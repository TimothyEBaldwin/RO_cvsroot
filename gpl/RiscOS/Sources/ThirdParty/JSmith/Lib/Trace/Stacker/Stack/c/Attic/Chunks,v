head	1.2;
access;
symbols
	Trace-0_11:1.1.1.1
	Trace-0_10:1.1.1.1
	Trace-0_09:1.1.1.1
	Trace-0_08:1.1.1.1
	Trace-0_07:1.1.1.1
	RO_5_07:1.1.1.1
	Trace-0_06:1.1.1.1
	Trace-0_05:1.1.1.1
	dellis_autobuild_BaseSW:1.1.1.1
	dcotton_autobuild_BaseSW:1.1.1.1
	Trace-0_04:1.1.1.1
	Trace-0_03:1.1.1.1
	Trace-0_02:1.1.1.1
	Trace-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.01.10.10.24.06;	author rsprowson;	state dead;
branches;
next	1.1;
commitid	hp6asoKx6k4MQs5y;

1.1
date	2000.04.11.17.50.10;	author blaughto;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.11.17.50.10;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Makefile recreated from fragments
Flattened out the sources into one 'c' and 'h' directory, while a cunning VPATH allowed the code to be compiled in situ, the link step failed because of the way the object file names are generated.
Code now uses Unix style directory referenced, rather than ^.

Version 0.12. Tagged as 'Trace-0_12'
@
text
@/* 
 * Copyright Julian Smith.
 * 
 * This file is part of Trace.
 * 
 * Trace is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 * 
 * Trace is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General
 * Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with Trace.  If not, see <http://www.gnu.org/licenses/>.
 */
#ifdef USE_UNIXLIB
int	Chunks_c_dummy;

#else


#include "Desk.Debug.h"
#include "Desk.Error.h"

#include "Stack.h"


#define	Stack_SVCSTACK_BASE		((char*) 0x1c00000)
#define	Stack_SVCSTACK_SIZE		8192
#define	Stack_SVCSTACK_TOP		(Stack_SVCSTACK_BASE + Stack_SVCSTACK_SIZE)
#define	Stack_SVCSTACK_BOTTOM	(Stack_SVCSTACK_BASE + 7*sizeof(int))


#define	Stack_GetStackTopBottom( stackchunk)									\
	do	{												\
		(stackchunk)->bottom	= ((char*) ((stackchunk)->_chunk+1)) + 7*sizeof(int);			\
		(stackchunk)->top	= ((char*) (stackchunk)->_chunk) + (stackchunk)->_chunk->sc_size;	\
		}												\
	while (0)




typedef struct	{
	char*	top;
	char*	bottom;
	}
	Stack_stack_miscchunk;


static Stack_stack_miscchunk	Stack_Stack_miscchunk = { NULL, NULL	};



void	Stack_RegisterMiscStack( void* bottom, void* top)
	{
	Desk_Debug5_Printf( Desk_error_PLACE "Registering misc stack, 0x%p-0x%p\n", bottom, top);
	Stack_Stack_miscchunk.top	= top;
	Stack_Stack_miscchunk.bottom	= bottom;
	}

void	Stack_UnRegisterMiscStack( void* bottom)
	{
	if ( bottom != Stack_Stack_miscchunk.bottom)	{
		Desk_Debug_Printf( "Stack_UnRegisterMiscStack called for unknown stack at 0x%p\n", bottom);
		//Stack_DiagnosticWhere( Stack__GetCaller(), "Stack_UnRegisterMiscStack called for unknown stack");
		}
	else	{
		Stack_Stack_miscchunk.top	= NULL;
		Stack_Stack_miscchunk.bottom	= NULL;
		}
	}


void	Stack_GetCurrentStackChunk2( Stack_stackchunk_block* stackchunk)
	{
	
	/* stackchunk->_chunk	= _kernel_current_stack_chunk();*/
	/* Now done in Stack_GetCurrentStackChunk2 macro.*/
	
	if ( NULL == stackchunk->_chunk)	return;
	
	stackchunk->stacktype = Stack_stacktype_USR;
	
	if ( (char*) stackchunk->_chunk + sizeof( _kernel_stack_chunk) == Stack_SVCSTACK_BASE)	{
		/* SVC stack - not a valid _kernel_stack_chunk, so we hack it...	*/
		stackchunk->stacktype	= Stack_stacktype_SVC;
		stackchunk->bottom	= (char*) Stack_SVCSTACK_BASE + 7*sizeof(int);
		stackchunk->top		= (char*) Stack_SVCSTACK_BASE + Stack_SVCSTACK_SIZE;
		Desk_Debug5_Printf( "Checking SVC stack, from 0x%p to 0x%p\n", stackchunk->bottom, stackchunk->top);
		}
	
	else if (
		Stack_Stack_miscchunk.bottom 
		&&
		( (char*) stackchunk->_chunk + sizeof( _kernel_stack_chunk) >= Stack_Stack_miscchunk.bottom)
		&&
		( (char*) stackchunk->_chunk + sizeof( _kernel_stack_chunk) < Stack_Stack_miscchunk.top)
		)
		{
		stackchunk->stacktype	= Stack_stacktype_MISC;
		stackchunk->bottom	= (char*) Stack_Stack_miscchunk.bottom + 7*sizeof( int);
		stackchunk->top		= (char*) Stack_Stack_miscchunk.top;
		Desk_Debug5_Printf( "Checking misc stack, from 0x%p to 0x%p\n", stackchunk->bottom, stackchunk->top);
		}
	
	else	{
		Stack_GetStackTopBottom( stackchunk);
		}
	}




void	Stack_GetPreviousStackChunk( Stack_stackchunk_block* stackchunk)
	{
	Desk_Debug5_Printf( Desk_error_PLACE "Stack_GetPreviousStackChunk called\n");
	
	if ( stackchunk->stacktype == Stack_stacktype_SVC || stackchunk->stacktype == Stack_stacktype_MISC)	{
		Desk_Debug5_Printf( Desk_error_PLACE "SVC/MISC stack\n");
		stackchunk->_chunk = NULL;
		stackchunk->bottom	= NULL;
		stackchunk->top		= NULL;
		}
	else	{
		Desk_Debug5_Printf( Desk_error_PLACE "USR stack\n");
		stackchunk->_chunk = stackchunk->_chunk->sc_prev;
		if ( stackchunk->_chunk)	Stack_GetStackTopBottom( stackchunk);
		else				stackchunk->bottom = stackchunk->top = NULL;
		
		Desk_Debug5_Printf( Desk_error_PLACE "new chunk header is 0x%p. Chunk is 0x%p-0x%p\n", 
			stackchunk->_chunk, 
			stackchunk->bottom, 
			stackchunk->bottom
			);
		}
	}


#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Summary:                        
  Initial import of Trace library into CVS.
                                
Detail:                         
  This is Julian Smith's library to automatically trace function execution.
  The build system for the main library has been restructured not to use
  Makatic, but the tests still do.
  The slightly over-the-top-for-something-this-small hierarchy of source code
  has been retained to avoid too much reorganisation, but the 'root' of this
  hierarchy has been moved up to where you'd expect to find it, not buried deep
  within places usually used for object code.
                                
Admin:                          
  all, clean, and export phases tested.
  Tested using the ATM driver, which uses DebugLib, which uses Trace.  Appears
  to work as previous binary-only version did.
@
text
@@
