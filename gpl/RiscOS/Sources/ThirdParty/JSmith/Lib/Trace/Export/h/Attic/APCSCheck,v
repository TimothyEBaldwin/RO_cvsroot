head	1.2;
access;
symbols
	Trace-0_11:1.1.1.1
	Trace-0_10:1.1.1.1
	Trace-0_09:1.1.1.1
	Trace-0_08:1.1.1.1
	Trace-0_07:1.1.1.1
	RO_5_07:1.1.1.1
	Trace-0_06:1.1.1.1
	Trace-0_05:1.1.1.1
	dellis_autobuild_BaseSW:1.1.1.1
	dcotton_autobuild_BaseSW:1.1.1.1
	Trace-0_04:1.1.1.1
	Trace-0_03:1.1.1.1
	Trace-0_02:1.1.1.1
	Trace-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.01.10.10.24.02;	author rsprowson;	state dead;
branches;
next	1.1;
commitid	hp6asoKx6k4MQs5y;

1.1
date	2000.04.11.17.50.10;	author blaughto;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.11.17.50.10;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Makefile recreated from fragments
Flattened out the sources into one 'c' and 'h' directory, while a cunning VPATH allowed the code to be compiled in situ, the link step failed because of the way the object file names are generated.
Code now uses Unix style directory referenced, rather than ^.

Version 0.12. Tagged as 'Trace-0_12'
@
text
@/* 
 * Copyright Julian Smith.
 * 
 * This file is part of Trace.
 * 
 * Trace is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 * 
 * Trace is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General
 * Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with Trace.  If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __Trace_APCSCheck_h
#define __Trace_APCSCheck_h




#ifdef Trace_TRACE
	
	void	Trace_APCSCheck_Init( void);
/*
Calls Trace_SetHandlers with Trace_APCSCheck_Start and
Trace_APCSCheck_Stop. These check that intercepted functions obey APCS.

If registers required by APCS to be preserved (r4-r11, r13, processor
flags in pc) are corrupted, a diagnostic to that effect will be output
to stderr.

Note that only functions intercepted by Trace_InterceptAllFunctions()
and/or Trace_InterceptFunction() will be checked, and that the standard
tracing of function entry/exit provided by Trace_StartHandler and
Trace_StopHandler will not function while APCS checking is turned on.

Thus to check APCS compliance of all functions, do:

Trace_APCSCheck_Init();
Trace_InterceptAllFunctions();
 */


	void	Trace_APCSCheck_SetAutoCorrect( int yesno);
/*
If yesno=1, Trace_APCS will correct register values on return if they
are found to be corrupted, after outputing the diagnostic.

if yesno=0, corrupted register values will be left.

The default behaviour is as if Trace_APCSCheck_SetAutoCorrect( 0) has
been called.
 */


	void	Trace_APCSCheck_Start( const char* fnname);
/*
Don't call directly.
 */


	void	Trace_APCSCheck_Stop( const char* fnname);
/*
Don't call directly.
 */



#else
	
	#define	Trace_APCSCheck_Init()
	#define	Trace_APCSCheck_SetAutoCorrect( yesno)
	#define	Trace_APCSCheck_Start( fnname)
	#define	Trace_APCSCheck_Stop( fnname)
	
#endif


#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Summary:                        
  Initial import of Trace library into CVS.
                                
Detail:                         
  This is Julian Smith's library to automatically trace function execution.
  The build system for the main library has been restructured not to use
  Makatic, but the tests still do.
  The slightly over-the-top-for-something-this-small hierarchy of source code
  has been retained to avoid too much reorganisation, but the 'root' of this
  hierarchy has been moved up to where you'd expect to find it, not buried deep
  within places usually used for object code.
                                
Admin:                          
  all, clean, and export phases tested.
  Tested using the ATM driver, which uses DebugLib, which uses Trace.  Appears
  to work as previous binary-only version did.
@
text
@@
