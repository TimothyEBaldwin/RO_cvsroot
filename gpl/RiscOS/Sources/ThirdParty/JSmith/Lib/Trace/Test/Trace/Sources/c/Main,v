head	1.1;
branch	1.1.1;
access;
symbols
	Trace-0_12:1.1.1.1
	Trace-0_11:1.1.1.1
	Trace-0_10:1.1.1.1
	Trace-0_09:1.1.1.1
	Trace-0_08:1.1.1.1
	Trace-0_07:1.1.1.1
	RO_5_07:1.1.1.1
	Trace-0_06:1.1.1.1
	Trace-0_05:1.1.1.1
	dellis_autobuild_BaseSW:1.1.1.1
	dcotton_autobuild_BaseSW:1.1.1.1
	Trace-0_04:1.1.1.1
	Trace-0_03:1.1.1.1
	Trace-0_02:1.1.1.1
	Trace-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2000.04.11.17.50.11;	author blaughto;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.11.17.50.11;	author blaughto;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* 
 * Copyright Julian Smith.
 * 
 * This file is part of Trace.
 * 
 * Trace is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 * 
 * Trace is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General
 * Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with Trace.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <stdio.h>

#include "Desk.Debug.h"

#include "Trace.Trace.h"



static int	Factorial( int n)
	{
	return (n<=2) ? n : n*Factorial( n-1);
	}

static void	Bar( void)
	{
	printf( "Hello\n");
	}


static int	AddressTest( void)
	{
	char	dummy[ 199];
	dummy[0] = 0;
	dummy[1] = 6;
	dummy[56] = 43;
	dummy[122] = 33;
	return dummy[0];
	}

static void	Foo( void)
	{
	printf( "Hello\n");
	Bar();
	}


static void	FnStart( const char* fnname)
	{
	printf( "Function '%s' entered\n", fnname);
	}

static void	FnStop( const char* fnname)
	{
	printf( "Function '%s' exited\n", fnname);
	}

static void	Address( const void* address)
	{
	printf( "Address 0x%p executed\n", address);
	}

int	main( void)
	{
	Trace_IgnoreFunctions( "Desk_* Wild_* FnStart FnStop ");
	Trace_SetHandlers( FnStart, FnStop);
	Desk_Debug_SetNestingIndentation( "  ");
	Trace_IgnoreFunctions( "zxs Addre*");
	Trace_InterceptAllFunctions();
	Foo();
	Trace_InterceptAddress( (int*) AddressTest+4);
	
	Trace_SetAddressHandler( Address);
	printf( "AddressTest returned %i\n", AddressTest());
	
	printf( "10! = %i\n", Factorial( 10));
	
	printf( "Press <Esc> to terminate\n");
	for(;;)	;
	
	return 0;
	}
@


1.1.1.1
log
@Summary:                        
  Initial import of Trace library into CVS.
                                
Detail:                         
  This is Julian Smith's library to automatically trace function execution.
  The build system for the main library has been restructured not to use
  Makatic, but the tests still do.
  The slightly over-the-top-for-something-this-small hierarchy of source code
  has been retained to avoid too much reorganisation, but the 'root' of this
  hierarchy has been moved up to where you'd expect to find it, not buried deep
  within places usually used for object code.
                                
Admin:                          
  all, clean, and export phases tested.
  Tested using the ATM driver, which uses DebugLib, which uses Trace.  Appears
  to work as previous binary-only version did.
@
text
@@
