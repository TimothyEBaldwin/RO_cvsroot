head	1.5;
access;
symbols
	Wild-0_05:1.4
	Wild-0_04:1.3
	Wild-0_03:1.2
	RO_5_07:1.2
	Wild-0_02:1.2
	dellis_autobuild_BaseSW:1.2
	dcotton_autobuild_BaseSW:1.2
	Wild-0_01:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2015.01.10.10.08.39;	author rsprowson;	state dead;
branches;
next	1.4;
commitid	LK7Uw4j6XvPyLs5y;

1.4
date	2014.10.18.13.30.05;	author srevill;	state Exp;
branches;
next	1.3;
commitid	r1xfCb0M5fI4AGUx;

1.3
date	2012.10.09.10.51.35;	author srevill;	state Exp;
branches;
next	1.2;
commitid	tKtT7gm5F6gssHnw;

1.2
date	2000.04.11.17.33.31;	author blaughto;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.11.17.28.02;	author blaughto;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.11.17.28.02;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Makefile recreated from fragments
Required renaming Wild.c to Wild1.c as the shared makefiles get confused if the source file is the same name as one of the targets.
Exported headers moved to 'h' directory.

Version 0.06. Tagged as 'Wild-0_06'
@
text
@# File:    Makefile
# Purpose: Makefile for Wild
# Author:  Ben Laughton
#
# History:
#
# 2000-04-10: BAL
# Created.




# ------------------------------------------------------------------------------
# Paths
#

EXP_DIR		= <Lib$Dir>.Wild
LIBDIR		= <Lib$Dir>




# ------------------------------------------------------------------------------
# Generic options
#

MKDIR		= mkdir -p
AS		= objasm
CC		= $(MemCheckCC) cc
C++		= c++
CMHG		= cmhg
CP		= copy
LD		= link
RM		= remove
WIPE		= x wipe
CD		= dir
CHMOD		= access
TOUCH		= create
DATA2AOF	= datatoaof
MODSQZ		= modsqz
LB		= libfile




# ------------------------------------------------------------------------------
# Flags
#

AFLAGS		= -depend !Depend $(THROWBACK) $(EXTRA_A_FLAGS) -stamp -quit
CCFLAGS		= -depend !Depend $(THROWBACK) $(INCLUDES) $(DFLAGS) -c -Wsp -ffah
LDFLAGS		= -aof
CPFLAGS		= ~cfr~v
WFLAGS		= ~c~vr
LBFLAGS		= -c
CHMODFLAGS	= RW/r

DFLAGS		= $(EXTRA_C_FLAGS)

INCLUDES	= -IC:,TCPIPLibs:




# ------------------------------------------------------------------------------
# Program specific options
#

COMPONENT	= Wild
TARGET		= l.Wild$(LIBSUFFIX)
EXPORTS		= $(EXP_C_H).$(COMPONENT)

OBJS =\
 $(EXT).IsMultiple\
 $(EXT).PathMatch2\
 $(EXT).PathMatch4\
 $(EXT).Replace\
 $(EXT).Wild\
 $(EXT).Wild2\
 $(EXT).Wild3\
 $(EXT).Wild4

# ------------------------------------------------------------------------------
# Rule patterns
#

.SUFFIXES:	.o .z .od .odz .i .h .s .c
.c.i:;		$(CC)	$(CCFLAGS)	-C -E $< >> $@@
.c.o:;		$(CC)	$(CCFLAGS)	-o $@@ $<
.c.od:;		$(CC)	$(CCFLAGS)	-fn -g -o $@@ $<
.c.z:;		$(CC)	$(CCFLAGS)	-DDesk__MODULE_CLIENT -zM -o $@@ $<
.c.odz:;	$(CC)	$(CCFLAGS)	-DDesk__MODULE_CLIENT -zM -fn -g -o $@@ $<
.s.i:;		@@echo $@@
.s.o:;		$(AS)	$(AFLAGS)	-pd "Desk_AS_EMBED_FNNAMES SETA 0" $< $@@
.s.z:;		$(AS)	$(AFLAGS)	-pd "Desk_AS_EMBED_FNNAMES SETA 0" $< $@@
.s.od:;		$(AS)	$(AFLAGS)	-pd "Desk_AS_EMBED_FNNAMES SETA 1" $< $@@
.s.odz:;	$(AS)	$(AFLAGS)	-pd "Desk_AS_EMBED_FNNAMES SETA 1" $< $@@




# ------------------------------------------------------------------------------
# Local build rules
#

all: $(TARGET)

debug: $(TARGET)

preprocess: $(TARGET)

$(TARGET): $(OBJS) $(LIBS) $(EXT).local_dirs
	$(MKDIR) l
	$(LB) $(LBFLAGS) -o $@@ $(OBJS)




# ------------------------------------------------------------------------------
# Common build rules

$(EXT).local_dirs:
	@@$(MKDIR) $(EXT)
	@@$(TOUCH) $@@

$(EXP_DIR).dirs:
	@@$(MKDIR) $(EXP_DIR).h
	@@$(MKDIR) $(EXP_DIR).o
	@@$(TOUCH) $@@



# ------------------------------------------------------------------------------
# RISC OS ROM build rules
#

export: export_$(PHASE)

export_hdrs: $(EXP_DIR).dirs
	@@$(CP)	Export.h	$(EXP_DIR).*		$(CPFLAGS)
	@@$(CP)	VersionNum	$(EXP_DIR).LibVersion	$(CPFLAGS)

export_libs: $(TARGET) $(EXP_DIR).dirs
	@@$(CP)	$(TARGET)	$(EXP_DIR).o.*	$(CPFLAGS)

clean:
	$(WIPE) $(EXT)			$(WFLAGS)



# ------------------------------------------------------------------------------
# RISC OS disc build rules
#

install:
	@@$(MKDIR) $(INSTDIR)
	@@$(CP)	$(EXP_DIR) $(INSTDIR).$(COMPONENT)	$(CPFLAGS)



# ------------------------------------------------------------------------------
# Dynamic dependencies:
@


1.4
log
@Added an install phase to support CTools builds.

Version 0.05. Tagged as 'Wild-0_05'
@
text
@@


1.3
log
@Removed lots of annoying errors during clean phase

Version 0.04. Tagged as 'Wild-0_04'
@
text
@d151 9
@


1.2
log
@Modified to use srccommit.

Version 0.01. Tagged as 'Wild-0_01'
@
text
@d35 1
a35 1
WIPE		= -wipe
@


1.1
log
@Initial revision
@
text
@d140 2
a141 1
	@@$(CP)	Export.h	$(EXP_DIR).*	$(CPFLAGS)
@


1.1.1.1
log
@Summary:                        
  Initial import of Wild library into CVS.
                                
Detail:                         
  This is Julian Smith's wildcard matching library, required by his Trace
  library.                      
  The build system for the main library has been restructured not to use
  Makatic, but the tests still do.
                                
Admin:                          
  all, clean, and export phases tested.
  Tested using the ATM driver, which uses DebugLib, which uses Trace, which
  uses Wild; appears to work as previous binary-only version did.
@
text
@@
