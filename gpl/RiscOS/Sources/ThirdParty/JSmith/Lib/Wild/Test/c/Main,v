head	1.1;
branch	1.1.1;
access;
symbols
	Wild-0_06:1.1.1.1
	Wild-0_05:1.1.1.1
	Wild-0_04:1.1.1.1
	Wild-0_03:1.1.1.1
	RO_5_07:1.1.1.1
	Wild-0_02:1.1.1.1
	dellis_autobuild_BaseSW:1.1.1.1
	dcotton_autobuild_BaseSW:1.1.1.1
	Wild-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2000.04.11.17.28.03;	author blaughto;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.11.17.28.03;	author blaughto;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* 
 * Copyright Julian Smith.
 * 
 * This file is part of Wild.
 * 
 * Wild is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 * 
 * Wild is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General
 * Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with Wild.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <stdio.h>

#include "DeskLib:Filing.h"
#include "DeskLib:File.h"
#include "DeskLib:Debug.h"

#include "Wild.Wild.h"


static void	FileFn( const char* canonpath, const char* path, void *reference)
	{
	UNUSED( path);
	UNUSED( reference);
	printf( "FileFn. %s\n", canonpath);
	}



static os_error*	FoundFileFn( const char* dirname, filing_fulldirentry* filedata, void* reference)
	{
	UNUSED( dirname);
	UNUSED( filedata);
	UNUSED( reference);
	return NULL;
	}

int	main( void)
	{
	#ifdef DeskLib_DEBUG
		debug_level = 5;
	#endif
	printf( "started\n");
	printf( "%i\n", File_IsDirectory( "ADFS::Anne.$.!Scrap.ScrapDirs.ScrapDir.ABCD.*"));
	
	Filing_ScanDir(
		"ADFS::Anne.$.!Scrap.ScrapDirs.ScrapDir.ABCD.*",
		NULL,
		FoundFileFn,
		NULL,
		NULL
		);
	printf( "finished\n");
	Wild_ScanPath4( "ADFS::Anne.$.!Scrap.ScrapDirs.ScrapDir.ABCD.*", FileFn, (void*) 0x12345);
	printf( "finished\n");
	return 0;
	}
@


1.1.1.1
log
@Summary:                        
  Initial import of Wild library into CVS.
                                
Detail:                         
  This is Julian Smith's wildcard matching library, required by his Trace
  library.                      
  The build system for the main library has been restructured not to use
  Makatic, but the tests still do.
                                
Admin:                          
  all, clean, and export phases tested.
  Tested using the ATM driver, which uses DebugLib, which uses Trace, which
  uses Wild; appears to work as previous binary-only version did.
@
text
@@
