head	1.1;
branch	1.1.1;
access;
symbols
	Wild-0_06:1.1.1.1
	Wild-0_05:1.1.1.1
	Wild-0_04:1.1.1.1
	Wild-0_03:1.1.1.1
	RO_5_07:1.1.1.1
	Wild-0_02:1.1.1.1
	dellis_autobuild_BaseSW:1.1.1.1
	dcotton_autobuild_BaseSW:1.1.1.1
	Wild-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2000.04.11.17.28.02;	author blaughto;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.11.17.28.02;	author blaughto;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* 
 * Copyright Julian Smith.
 * 
 * This file is part of Wild.
 * 
 * Wild is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 * 
 * Wild is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General
 * Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with Wild.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "Desk/Filing.h"
#include "Desk/Debug.h"
#include "Desk/Error2.h"
#include "Desk/DeskMem.h"
#include "Desk/SWI.h"
#include "Desk/KernelSWIs.h"

#include "Wild/Wild.h"

#include "IsMultiple.h"



typedef struct	{
	wild_wildfn2	fn;
	void		*reference;
	char		oldprefix[ 256];	/* Will contain 'Run:' or 'System:'	*/
	int		newprefixlen;
	}
	wild_keepblock;
/*
This struct holds info on the original multiple-path filepath, so that
our wild_wildfn can intercept calls from Wild_ScanPath and replace the
canonicalised path with a path containing the original multiple-path
prefix.

Eg if <Run$Path> was "ADFS::4.Lib1,ADFS::4.Lib2", Wild_ScanPath2(
"Run:a*", fn, ...) would call 'fn' with a string such as
"ADFS::4.$.Lib1.abc" and "ADFS::4.$.Lib2.ayz" but, if Wild_ScanPath3 is
used, fn would be called with "Run:abc" and "Run:ayz".
 */




static	void	PrefixReplacementFn( const char* path, void *reference)
{
wild_keepblock*	keep = (wild_keepblock*) reference;
char		replacementpath[ 256] = "";

strcat( replacementpath, keep->oldprefix);
strcat( replacementpath, &path[ keep->newprefixlen]);

keep->fn( path, replacementpath, keep->reference);
}




static void	Wild__ScanPath2( 
		const char*	string,
		wild_keepblock*	keep
		)
{
/* Check for path-variables	*/
char	*paths = PathIsMultiplePath( string);

if ( !paths)	Wild_ScanPath( string, PrefixReplacementFn, keep);

else	{
	
	char	newpath[ 256];
	char	*path;
	char	*tail = strchr( string, ':') + 1;
	
	Desk_Debug_Printf( "WildLib: Found sys path var in '%s'\n", string);
	Desk_Debug_Assert( tail!=(char *)1);
	
	if ( keep->oldprefix[0] == 0)	{
		/* This will happen on top-level call to this function	*/
		strncat( keep->oldprefix, string, tail-string);
		}
		
	for( path=paths; *path ; )	{
	
		int	len;
		
		/* Find first non-space chr	*/
		for ( ; isspace( *path) && *path; path++)	;
		
		if (*path==0)	break;
		
		/* Find end of sub-path	*/
		for ( len=0; !isspace(path[len]) && path[len]!=',' && path[len]; len++)	;
		
		strncpy( newpath, path, len);
		strcpy( newpath+len, tail);
		
		Desk_Debug_Printf( "WildLib: " Desk_error_PLACE "Calling ScanWildPath for '%s'\n", newpath);
		
		keep->newprefixlen	= len;
		Wild__ScanPath2( newpath, keep);
		
					
		if (path[len]==0)	break;
		path += len+1;
				
		}
	
	Desk_DeskMem_Free( paths);
	}

}




void	Wild_ScanPath2(  const char *path, wild_wildfn2 fn, void *reference)
{
wild_keepblock	keep;

keep.fn			= fn;
keep.reference		= reference;
keep.oldprefix[0]	= 0;
keep.newprefixlen	= 0;

Wild__ScanPath2(  path, &keep);
}



@


1.1.1.1
log
@Summary:                        
  Initial import of Wild library into CVS.
                                
Detail:                         
  This is Julian Smith's wildcard matching library, required by his Trace
  library.                      
  The build system for the main library has been restructured not to use
  Makatic, but the tests still do.
                                
Admin:                          
  all, clean, and export phases tested.
  Tested using the ATM driver, which uses DebugLib, which uses Trace, which
  uses Wild; appears to work as previous binary-only version did.
@
text
@@
