head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.09;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.09;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.07;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>objdump - GNU Binary Utilities</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="GNU Binary Utilities">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="prev" href="objcopy.html#objcopy" title="objcopy">
<link rel="next" href="ranlib.html#ranlib" title="ranlib">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="objdump"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="ranlib.html#ranlib">ranlib</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="objcopy.html#objcopy">objcopy</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="index.html#Top">Top</a>
<hr>
</div>

<h2 class="chapter">4 objdump</h2>

<p><a name="index-object-file-information-60"></a><a name="index-objdump-61"></a>
<!-- man title objdump display information from object files. -->

<pre class="smallexample">     <!-- man begin SYNOPSIS objdump -->
     objdump [<samp><span class="option">-a</span></samp>|<samp><span class="option">--archive-headers</span></samp>]
             [<samp><span class="option">-b</span></samp> <var>bfdname</var>|<samp><span class="option">--target=</span><var>bfdname</var></samp>]
             [<samp><span class="option">-C</span></samp>|<samp><span class="option">--demangle</span></samp>[=<var>style</var>] ]
             [<samp><span class="option">-d</span></samp>|<samp><span class="option">--disassemble</span></samp>]
             [<samp><span class="option">-D</span></samp>|<samp><span class="option">--disassemble-all</span></samp>]
             [<samp><span class="option">-z</span></samp>|<samp><span class="option">--disassemble-zeroes</span></samp>]
             [<samp><span class="option">-EB</span></samp>|<samp><span class="option">-EL</span></samp>|<samp><span class="option">--endian=</span></samp>{big | little }]
             [<samp><span class="option">-f</span></samp>|<samp><span class="option">--file-headers</span></samp>]
             [<samp><span class="option">-F</span></samp>|<samp><span class="option">--file-offsets</span></samp>]
             [<samp><span class="option">--file-start-context</span></samp>]
             [<samp><span class="option">-g</span></samp>|<samp><span class="option">--debugging</span></samp>]
             [<samp><span class="option">-e</span></samp>|<samp><span class="option">--debugging-tags</span></samp>]
             [<samp><span class="option">-h</span></samp>|<samp><span class="option">--section-headers</span></samp>|<samp><span class="option">--headers</span></samp>]
             [<samp><span class="option">-i</span></samp>|<samp><span class="option">--info</span></samp>]
             [<samp><span class="option">-j</span></samp> <var>section</var>|<samp><span class="option">--section=</span></samp><var>section</var>]
             [<samp><span class="option">-l</span></samp>|<samp><span class="option">--line-numbers</span></samp>]
             [<samp><span class="option">-S</span></samp>|<samp><span class="option">--source</span></samp>]
             [<samp><span class="option">-m</span></samp> <var>machine</var>|<samp><span class="option">--architecture=</span></samp><var>machine</var>]
             [<samp><span class="option">-M</span></samp> <var>options</var>|<samp><span class="option">--disassembler-options=</span></samp><var>options</var>]
             [<samp><span class="option">-p</span></samp>|<samp><span class="option">--private-headers</span></samp>]
             [<samp><span class="option">-r</span></samp>|<samp><span class="option">--reloc</span></samp>]
             [<samp><span class="option">-R</span></samp>|<samp><span class="option">--dynamic-reloc</span></samp>]
             [<samp><span class="option">-s</span></samp>|<samp><span class="option">--full-contents</span></samp>]
             [<samp><span class="option">-W[lLiaprmfFsoRt]</span></samp>|
              <samp><span class="option">--dwarf</span></samp>[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges]]
             [<samp><span class="option">-G</span></samp>|<samp><span class="option">--stabs</span></samp>]
             [<samp><span class="option">-t</span></samp>|<samp><span class="option">--syms</span></samp>]
             [<samp><span class="option">-T</span></samp>|<samp><span class="option">--dynamic-syms</span></samp>]
             [<samp><span class="option">-x</span></samp>|<samp><span class="option">--all-headers</span></samp>]
             [<samp><span class="option">-w</span></samp>|<samp><span class="option">--wide</span></samp>]
             [<samp><span class="option">--start-address=</span></samp><var>address</var>]
             [<samp><span class="option">--stop-address=</span></samp><var>address</var>]
             [<samp><span class="option">--prefix-addresses</span></samp>]
             [<samp><span class="option">--[no-]show-raw-insn</span></samp>]
             [<samp><span class="option">--adjust-vma=</span></samp><var>offset</var>]
             [<samp><span class="option">--special-syms</span></samp>]
             [<samp><span class="option">--prefix=</span></samp><var>prefix</var>]
             [<samp><span class="option">--prefix-strip=</span></samp><var>level</var>]
             [<samp><span class="option">--insn-width=</span></samp><var>width</var>]
             [<samp><span class="option">-V</span></samp>|<samp><span class="option">--version</span></samp>]
             [<samp><span class="option">-H</span></samp>|<samp><span class="option">--help</span></samp>]
             <var>objfile</var>...
     <!-- man end -->
</pre>
   <!-- man begin DESCRIPTION objdump -->
   <p><samp><span class="command">objdump</span></samp> displays information about one or more object files. 
The options control what particular information to display.  This
information is mostly useful to programmers who are working on the
compilation tools, as opposed to programmers who just want their
program to compile and work.

   <p><var>objfile</var><small class="dots">...</small> are the object files to be examined.  When you
specify archives, <samp><span class="command">objdump</span></samp> shows information on each of the member
object files.

<!-- man end -->
<!-- man begin OPTIONS objdump -->
   <p>The long and short forms of options, shown here as alternatives, are
equivalent.  At least one option from the list
<samp><span class="option">-a,-d,-D,-e,-f,-g,-G,-h,-H,-p,-r,-R,-s,-S,-t,-T,-V,-x</span></samp> must be given.

     <dl>
<dt><samp><span class="env">-a</span></samp><dt><samp><span class="env">--archive-header</span></samp><dd><a name="index-archive-headers-62"></a>If any of the <var>objfile</var> files are archives, display the archive
header information (in a format similar to &lsquo;<samp><span class="samp">ls -l</span></samp>&rsquo;).  Besides the
information you could list with &lsquo;<samp><span class="samp">ar tv</span></samp>&rsquo;, &lsquo;<samp><span class="samp">objdump -a</span></samp>&rsquo; shows
the object file format of each archive member.

     <br><dt><samp><span class="env">--adjust-vma=</span><var>offset</var></samp><dd><a name="index-section-addresses-in-objdump-63"></a><a name="index-VMA-in-objdump-64"></a>When dumping information, first add <var>offset</var> to all the section
addresses.  This is useful if the section addresses do not correspond to
the symbol table, which can happen when putting sections at particular
addresses when using a format which can not represent section addresses,
such as a.out.

     <br><dt><samp><span class="env">-b </span><var>bfdname</var></samp><dt><samp><span class="env">--target=</span><var>bfdname</var></samp><dd><a name="index-object-code-format-65"></a>Specify that the object-code format for the object files is
<var>bfdname</var>.  This option may not be necessary; <var>objdump</var> can
automatically recognize many formats.

     <p>For example,
     <pre class="example">          objdump -b oasys -m vax -h fu.o
</pre>
     <p class="noindent">displays summary information from the section headers (<samp><span class="option">-h</span></samp>) of
<samp><span class="file">fu.o</span></samp>, which is explicitly identified (<samp><span class="option">-m</span></samp>) as a VAX object
file in the format produced by Oasys compilers.  You can list the
formats available with the <samp><span class="option">-i</span></samp> option. 
See <a href="Target-Selection.html#Target-Selection">Target Selection</a>, for more information.

     <br><dt><samp><span class="env">-C</span></samp><dt><samp><span class="env">--demangle[=</span><var>style</var><span class="env">]</span></samp><dd><a name="index-demangling-in-objdump-66"></a>Decode (<dfn>demangle</dfn>) low-level symbol names into user-level names. 
Besides removing any initial underscore prepended by the system, this
makes C++ function names readable.  Different compilers have different
mangling styles. The optional demangling style argument can be used to
choose an appropriate demangling style for your compiler. See <a href="c_002b_002bfilt.html#c_002b_002bfilt">c++filt</a>,
for more information on demangling.

     <br><dt><samp><span class="env">-g</span></samp><dt><samp><span class="env">--debugging</span></samp><dd>Display debugging information.  This attempts to parse STABS and IEEE
debugging format information stored in the file and print it out using
a C like syntax.  If neither of these formats are found this option
falls back on the <samp><span class="option">-W</span></samp> option to print any DWARF information in
the file.

     <br><dt><samp><span class="env">-e</span></samp><dt><samp><span class="env">--debugging-tags</span></samp><dd>Like <samp><span class="option">-g</span></samp>, but the information is generated in a format compatible
with ctags tool.

     <br><dt><samp><span class="env">-d</span></samp><dt><samp><span class="env">--disassemble</span></samp><dd><a name="index-disassembling-object-code-67"></a><a name="index-machine-instructions-68"></a>Display the assembler mnemonics for the machine instructions from
<var>objfile</var>.  This option only disassembles those sections which are
expected to contain instructions.

     <br><dt><samp><span class="env">-D</span></samp><dt><samp><span class="env">--disassemble-all</span></samp><dd>Like <samp><span class="option">-d</span></samp>, but disassemble the contents of all sections, not just
those expected to contain instructions.

     <p>If the target is an ARM architecture this switch also has the effect
of forcing the disassembler to decode pieces of data found in code
sections as if they were instructions.

     <br><dt><samp><span class="env">--prefix-addresses</span></samp><dd>When disassembling, print the complete address on each line.  This is
the older disassembly format.

     <br><dt><samp><span class="env">-EB</span></samp><dt><samp><span class="env">-EL</span></samp><dt><samp><span class="env">--endian={big|little}</span></samp><dd><a name="index-endianness-69"></a><a name="index-disassembly-endianness-70"></a>Specify the endianness of the object files.  This only affects
disassembly.  This can be useful when disassembling a file format which
does not describe endianness information, such as S-records.

     <br><dt><samp><span class="env">-f</span></samp><dt><samp><span class="env">--file-headers</span></samp><dd><a name="index-object-file-header-71"></a>Display summary information from the overall header of
each of the <var>objfile</var> files.

     <br><dt><samp><span class="env">-F</span></samp><dt><samp><span class="env">--file-offsets</span></samp><dd><a name="index-object-file-offsets-72"></a>When disassembling sections, whenever a symbol is displayed, also
display the file offset of the region of data that is about to be
dumped.  If zeroes are being skipped, then when disassembly resumes,
tell the user how many zeroes were skipped and the file offset of the
location from where the disassembly resumes.  When dumping sections,
display the file offset of the location from where the dump starts.

     <br><dt><samp><span class="env">--file-start-context</span></samp><dd><a name="index-source-code-context-73"></a>Specify that when displaying interlisted source code/disassembly
(assumes <samp><span class="option">-S</span></samp>) from a file that has not yet been displayed, extend the
context to the start of the file.

     <br><dt><samp><span class="env">-h</span></samp><dt><samp><span class="env">--section-headers</span></samp><dt><samp><span class="env">--headers</span></samp><dd><a name="index-section-headers-74"></a>Display summary information from the section headers of the
object file.

     <p>File segments may be relocated to nonstandard addresses, for example by
using the <samp><span class="option">-Ttext</span></samp>, <samp><span class="option">-Tdata</span></samp>, or <samp><span class="option">-Tbss</span></samp> options to
<samp><span class="command">ld</span></samp>.  However, some object file formats, such as a.out, do not
store the starting address of the file segments.  In those situations,
although <samp><span class="command">ld</span></samp> relocates the sections correctly, using &lsquo;<samp><span class="samp">objdump
-h</span></samp>&rsquo; to list the file section headers cannot show the correct addresses. 
Instead, it shows the usual addresses, which are implicit for the
target.

     <br><dt><samp><span class="env">-H</span></samp><dt><samp><span class="env">--help</span></samp><dd>Print a summary of the options to <samp><span class="command">objdump</span></samp> and exit.

     <br><dt><samp><span class="env">-i</span></samp><dt><samp><span class="env">--info</span></samp><dd><a name="index-architectures-available-75"></a><a name="index-object-formats-available-76"></a>Display a list showing all architectures and object formats available
for specification with <samp><span class="option">-b</span></samp> or <samp><span class="option">-m</span></samp>.

     <br><dt><samp><span class="env">-j </span><var>name</var></samp><dt><samp><span class="env">--section=</span><var>name</var></samp><dd><a name="index-section-information-77"></a>Display information only for section <var>name</var>.

     <br><dt><samp><span class="env">-l</span></samp><dt><samp><span class="env">--line-numbers</span></samp><dd><a name="index-source-filenames-for-object-files-78"></a>Label the display (using debugging information) with the filename and
source line numbers corresponding to the object code or relocs shown. 
Only useful with <samp><span class="option">-d</span></samp>, <samp><span class="option">-D</span></samp>, or <samp><span class="option">-r</span></samp>.

     <br><dt><samp><span class="env">-m </span><var>machine</var></samp><dt><samp><span class="env">--architecture=</span><var>machine</var></samp><dd><a name="index-architecture-79"></a><a name="index-disassembly-architecture-80"></a>Specify the architecture to use when disassembling object files.  This
can be useful when disassembling object files which do not describe
architecture information, such as S-records.  You can list the available
architectures with the <samp><span class="option">-i</span></samp> option.

     <p>If the target is an ARM architecture then this switch has an
additional effect.  It restricts the disassembly to only those
instructions supported by the architecture specified by <var>machine</var>. 
If it is necessary to use this switch because the input file does not
contain any architecture information, but it is also desired to
disassemble all the instructions use <samp><span class="option">-marm</span></samp>.

     <br><dt><samp><span class="env">-M </span><var>options</var></samp><dt><samp><span class="env">--disassembler-options=</span><var>options</var></samp><dd>Pass target specific information to the disassembler.  Only supported on
some targets.  If it is necessary to specify more than one
disassembler option then multiple <samp><span class="option">-M</span></samp> options can be used or
can be placed together into a comma separated list.

     <p>If the target is an ARM architecture then this switch can be used to
select which register name set is used during disassembler.  Specifying
<samp><span class="option">-M reg-names-std</span></samp> (the default) will select the register names as
used in ARM's instruction set documentation, but with register 13 called
'sp', register 14 called 'lr' and register 15 called 'pc'.  Specifying
<samp><span class="option">-M reg-names-apcs</span></samp> will select the name set used by the ARM
Procedure Call Standard, whilst specifying <samp><span class="option">-M reg-names-raw</span></samp> will
just use &lsquo;<samp><span class="samp">r</span></samp>&rsquo; followed by the register number.

     <p>There are also two variants on the APCS register naming scheme enabled
by <samp><span class="option">-M reg-names-atpcs</span></samp> and <samp><span class="option">-M reg-names-special-atpcs</span></samp> which
use the ARM/Thumb Procedure Call Standard naming conventions.  (Either
with the normal register names or the special register names).

     <p>This option can also be used for ARM architectures to force the
disassembler to interpret all instructions as Thumb instructions by
using the switch <samp><span class="option">--disassembler-options=force-thumb</span></samp>.  This can be
useful when attempting to disassemble thumb code produced by other
compilers.

     <p>For the x86, some of the options duplicate functions of the <samp><span class="option">-m</span></samp>
switch, but allow finer grained control.  Multiple selections from the
following may be specified as a comma separated string. 
<samp><span class="option">x86-64</span></samp>, <samp><span class="option">i386</span></samp> and <samp><span class="option">i8086</span></samp> select disassembly for
the given architecture.  <samp><span class="option">intel</span></samp> and <samp><span class="option">att</span></samp> select between
intel syntax mode and AT&amp;T syntax mode. 
<samp><span class="option">intel-mnemonic</span></samp> and <samp><span class="option">att-mnemonic</span></samp> select between
intel mnemonic mode and AT&amp;T mnemonic mode. <samp><span class="option">intel-mnemonic</span></samp>
implies <samp><span class="option">intel</span></samp> and <samp><span class="option">att-mnemonic</span></samp> implies <samp><span class="option">att</span></samp>. 
<samp><span class="option">addr64</span></samp>, <samp><span class="option">addr32</span></samp>,
<samp><span class="option">addr16</span></samp>, <samp><span class="option">data32</span></samp> and <samp><span class="option">data16</span></samp> specify the default
address size and operand size.  These four options will be overridden if
<samp><span class="option">x86-64</span></samp>, <samp><span class="option">i386</span></samp> or <samp><span class="option">i8086</span></samp> appear later in the
option string.  Lastly, <samp><span class="option">suffix</span></samp>, when in AT&amp;T mode,
instructs the disassembler to print a mnemonic suffix even when the
suffix could be inferred by the operands.

     <p>For PowerPC, <samp><span class="option">booke</span></samp> controls the disassembly of BookE
instructions.  <samp><span class="option">32</span></samp> and <samp><span class="option">64</span></samp> select PowerPC and
PowerPC64 disassembly, respectively.  <samp><span class="option">e300</span></samp> selects
disassembly for the e300 family.  <samp><span class="option">440</span></samp> selects disassembly for
the PowerPC 440.  <samp><span class="option">ppcps</span></samp> selects disassembly for the paired
single instructions of the PPC750CL.

     <p>For MIPS, this option controls the printing of instruction mnemonic
names and register names in disassembled instructions.  Multiple
selections from the following may be specified as a comma separated
string, and invalid options are ignored:

          <dl>
<dt><code>no-aliases</code><dd>Print the 'raw' instruction mnemonic instead of some pseudo
instruction mnemonic.  I.e., print 'daddu' or 'or' instead of 'move',
'sll' instead of 'nop', etc.

          <br><dt><code>gpr-names=</code><var>ABI</var><dd>Print GPR (general-purpose register) names as appropriate
for the specified ABI.  By default, GPR names are selected according to
the ABI of the binary being disassembled.

          <br><dt><code>fpr-names=</code><var>ABI</var><dd>Print FPR (floating-point register) names as
appropriate for the specified ABI.  By default, FPR numbers are printed
rather than names.

          <br><dt><code>cp0-names=</code><var>ARCH</var><dd>Print CP0 (system control coprocessor; coprocessor 0) register names
as appropriate for the CPU or architecture specified by
<var>ARCH</var>.  By default, CP0 register names are selected according to
the architecture and CPU of the binary being disassembled.

          <br><dt><code>hwr-names=</code><var>ARCH</var><dd>Print HWR (hardware register, used by the <code>rdhwr</code> instruction) names
as appropriate for the CPU or architecture specified by
<var>ARCH</var>.  By default, HWR names are selected according to
the architecture and CPU of the binary being disassembled.

          <br><dt><code>reg-names=</code><var>ABI</var><dd>Print GPR and FPR names as appropriate for the selected ABI.

          <br><dt><code>reg-names=</code><var>ARCH</var><dd>Print CPU-specific register names (CP0 register and HWR names)
as appropriate for the selected CPU or architecture. 
</dl>

     <p>For any of the options listed above, <var>ABI</var> or
<var>ARCH</var> may be specified as &lsquo;<samp><span class="samp">numeric</span></samp>&rsquo; to have numbers printed
rather than names, for the selected types of registers. 
You can list the available values of <var>ABI</var> and <var>ARCH</var> using
the <samp><span class="option">--help</span></samp> option.

     <p>For VAX, you can specify function entry addresses with <samp><span class="option">-M
entry:0xf00ba</span></samp>.  You can use this multiple times to properly
disassemble VAX binary files that don't contain symbol tables (like
ROM dumps).  In these cases, the function entry mask would otherwise
be decoded as VAX instructions, which would probably lead the rest
of the function being wrongly disassembled.

     <br><dt><samp><span class="env">-p</span></samp><dt><samp><span class="env">--private-headers</span></samp><dd>Print information that is specific to the object file format.  The exact
information printed depends upon the object file format.  For some
object file formats, no additional information is printed.

     <br><dt><samp><span class="env">-r</span></samp><dt><samp><span class="env">--reloc</span></samp><dd><a name="index-relocation-entries_002c-in-object-file-81"></a>Print the relocation entries of the file.  If used with <samp><span class="option">-d</span></samp> or
<samp><span class="option">-D</span></samp>, the relocations are printed interspersed with the
disassembly.

     <br><dt><samp><span class="env">-R</span></samp><dt><samp><span class="env">--dynamic-reloc</span></samp><dd><a name="index-dynamic-relocation-entries_002c-in-object-file-82"></a>Print the dynamic relocation entries of the file.  This is only
meaningful for dynamic objects, such as certain types of shared
libraries.  As for <samp><span class="option">-r</span></samp>, if used with <samp><span class="option">-d</span></samp> or
<samp><span class="option">-D</span></samp>, the relocations are printed interspersed with the
disassembly.

     <br><dt><samp><span class="env">-s</span></samp><dt><samp><span class="env">--full-contents</span></samp><dd><a name="index-sections_002c-full-contents-83"></a><a name="index-object-file-sections-84"></a>Display the full contents of any sections requested.  By default all
non-empty sections are displayed.

     <br><dt><samp><span class="env">-S</span></samp><dt><samp><span class="env">--source</span></samp><dd><a name="index-source-disassembly-85"></a><a name="index-disassembly_002c-with-source-86"></a>Display source code intermixed with disassembly, if possible.  Implies
<samp><span class="option">-d</span></samp>.

     <br><dt><samp><span class="env">--prefix=</span><var>prefix</var></samp><dd><a name="index-Add-prefix-to-absolute-paths-87"></a>Specify <var>prefix</var> to add to the absolute paths when used with
<samp><span class="option">-S</span></samp>.

     <br><dt><samp><span class="env">--prefix-strip=</span><var>level</var></samp><dd><a name="index-Strip-absolute-paths-88"></a>Indicate how many initial directory names to strip off the hardwired
absolute paths. It has no effect without <samp><span class="option">--prefix=</span></samp><var>prefix</var>.

     <br><dt><samp><span class="env">--show-raw-insn</span></samp><dd>When disassembling instructions, print the instruction in hex as well as
in symbolic form.  This is the default except when
<samp><span class="option">--prefix-addresses</span></samp> is used.

     <br><dt><samp><span class="env">--no-show-raw-insn</span></samp><dd>When disassembling instructions, do not print the instruction bytes. 
This is the default when <samp><span class="option">--prefix-addresses</span></samp> is used.

     <br><dt><samp><span class="env">--insn-width=</span><var>width</var></samp><dd><a name="index-Instruction-width-89"></a>Display <var>width</var> bytes on a single line when disassembling
instructions.

     <br><dt><samp><span class="env">-W[lLiaprmfFsoRt]</span></samp><dt><samp><span class="env">--dwarf[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges]</span></samp><dd><a name="index-DWARF-90"></a><a name="index-debug-symbols-91"></a>Displays the contents of the debug sections in the file, if any are
present.  If one of the optional letters or words follows the switch
then only data found in those specific sections will be dumped.

     <p>Note that there is no single letter option to display the content of
trace sections.

     <br><dt><samp><span class="env">-G</span></samp><dt><samp><span class="env">--stabs</span></samp><dd><a name="index-stab-92"></a><a name="index-g_t_002estab-93"></a><a name="index-debug-symbols-94"></a><a name="index-ELF-object-file-format-95"></a>Display the full contents of any sections requested.  Display the
contents of the .stab and .stab.index and .stab.excl sections from an
ELF file.  This is only useful on systems (such as Solaris 2.0) in which
<code>.stab</code> debugging symbol-table entries are carried in an ELF
section.  In most other file formats, debugging symbol-table entries are
interleaved with linkage symbols, and are visible in the <samp><span class="option">--syms</span></samp>
output. 
For more information on stabs symbols, see <a href="../stabs/index.html#Top">Stabs</a>.

     <br><dt><samp><span class="env">--start-address=</span><var>address</var></samp><dd><a name="index-start_002daddress-96"></a>Start displaying data at the specified address.  This affects the output
of the <samp><span class="option">-d</span></samp>, <samp><span class="option">-r</span></samp> and <samp><span class="option">-s</span></samp> options.

     <br><dt><samp><span class="env">--stop-address=</span><var>address</var></samp><dd><a name="index-stop_002daddress-97"></a>Stop displaying data at the specified address.  This affects the output
of the <samp><span class="option">-d</span></samp>, <samp><span class="option">-r</span></samp> and <samp><span class="option">-s</span></samp> options.

     <br><dt><samp><span class="env">-t</span></samp><dt><samp><span class="env">--syms</span></samp><dd><a name="index-symbol-table-entries_002c-printing-98"></a>Print the symbol table entries of the file. 
This is similar to the information provided by the &lsquo;<samp><span class="samp">nm</span></samp>&rsquo; program,
although the display format is different.  The format of the output
depends upon the format of the file being dumped, but there are two main
types.  One looks like this:

     <pre class="smallexample">          [  4](sec  3)(fl 0x00)(ty   0)(scl   3) (nx 1) 0x00000000 .bss
          [  6](sec  1)(fl 0x00)(ty   0)(scl   2) (nx 0) 0x00000000 fred
</pre>
     <p>where the number inside the square brackets is the number of the entry
in the symbol table, the <var>sec</var> number is the section number, the
<var>fl</var> value are the symbol's flag bits, the <var>ty</var> number is the
symbol's type, the <var>scl</var> number is the symbol's storage class and
the <var>nx</var> value is the number of auxilary entries associated with
the symbol.  The last two fields are the symbol's value and its name.

     <p>The other common output format, usually seen with ELF based files,
looks like this:

     <pre class="smallexample">          00000000 l    d  .bss   00000000 .bss
          00000000 g       .text  00000000 fred
</pre>
     <p>Here the first number is the symbol's value (sometimes refered to as
its address).  The next field is actually a set of characters and
spaces indicating the flag bits that are set on the symbol.  These
characters are described below.  Next is the section with which the
symbol is associated or <em>*ABS*</em> if the section is absolute (ie
not connected with any section), or <em>*UND*</em> if the section is
referenced in the file being dumped, but not defined there.

     <p>After the section name comes another field, a number, which for common
symbols is the alignment and for other symbol is the size.  Finally
the symbol's name is displayed.

     <p>The flag characters are divided into 7 groups as follows:
          <dl>
<dt><code>l</code><dt><code>g</code><dt><code>u</code><dt><code>!</code><dd>The symbol is a local (l), global (g), unique global (u), neither
global nor local (a space) or both global and local (!).  A
symbol can be neither local or global for a variety of reasons, e.g.,
because it is used for debugging, but it is probably an indication of
a bug if it is ever both local and global.  Unique global symbols are
a GNU extension to the standard set of ELF symbol bindings.  For such
a symbol the dynamic linker will make sure that in the entire process
there is just one symbol with this name and type in use.

          <br><dt><code>w</code><dd>The symbol is weak (w) or strong (a space).

          <br><dt><code>C</code><dd>The symbol denotes a constructor (C) or an ordinary symbol (a space).

          <br><dt><code>W</code><dd>The symbol is a warning (W) or a normal symbol (a space).  A warning
symbol's name is a message to be displayed if the symbol following the
warning symbol is ever referenced.

          <br><dt><code>I</code><br><dt><code>i</code><dd>The symbol is an indirect reference to another symbol (I), a function
to be evaluated during reloc processing (i) or a normal symbol (a
space).

          <br><dt><code>d</code><dt><code>D</code><dd>The symbol is a debugging symbol (d) or a dynamic symbol (D) or a
normal symbol (a space).

          <br><dt><code>F</code><br><dt><code>f</code><br><dt><code>O</code><dd>The symbol is the name of a function (F) or a file (f) or an object
(O) or just a normal symbol (a space). 
</dl>

     <br><dt><samp><span class="env">-T</span></samp><dt><samp><span class="env">--dynamic-syms</span></samp><dd><a name="index-dynamic-symbol-table-entries_002c-printing-99"></a>Print the dynamic symbol table entries of the file.  This is only
meaningful for dynamic objects, such as certain types of shared
libraries.  This is similar to the information provided by the &lsquo;<samp><span class="samp">nm</span></samp>&rsquo;
program when given the <samp><span class="option">-D</span></samp> (<samp><span class="option">--dynamic</span></samp>) option.

     <br><dt><samp><span class="env">--special-syms</span></samp><dd>When displaying symbols include those which the target considers to be
special in some way and which would not normally be of interest to the
user.

     <br><dt><samp><span class="env">-V</span></samp><dt><samp><span class="env">--version</span></samp><dd>Print the version number of <samp><span class="command">objdump</span></samp> and exit.

     <br><dt><samp><span class="env">-x</span></samp><dt><samp><span class="env">--all-headers</span></samp><dd><a name="index-all-header-information_002c-object-file-100"></a><a name="index-header-information_002c-all-101"></a>Display all available header information, including the symbol table and
relocation entries.  Using <samp><span class="option">-x</span></samp> is equivalent to specifying all of
<samp><span class="option">-a -f -h -p -r -t</span></samp>.

     <br><dt><samp><span class="env">-w</span></samp><dt><samp><span class="env">--wide</span></samp><dd><a name="index-wide-output_002c-printing-102"></a>Format some lines for output devices that have more than 80 columns. 
Also do not truncate symbol names when they are displayed.

     <br><dt><samp><span class="env">-z</span></samp><dt><samp><span class="env">--disassemble-zeroes</span></samp><dd>Normally the disassembly output will skip blocks of zeroes.  This
option directs the disassembler to disassemble those blocks, just like
any other data. 
</dl>

<!-- man end -->
   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 3
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1991-2013 Free Software Foundation, Inc.
d21 1
a21 5
section entitled "GNU Free Documentation License".
 -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>GNU Binary Utilities: objdump</title>
a22 38
<meta name="description" content="GNU Binary Utilities: objdump">
<meta name="keywords" content="GNU Binary Utilities: objdump">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Binutils-Index.html#Binutils-Index" rel="index" title="Binutils Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="index.html#Top" rel="up" title="Top">
<link href="ranlib.html#ranlib" rel="next" title="ranlib">
<link href="objcopy.html#objcopy" rel="prev" title="objcopy">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d24 12
a35 3
</style>


d37 2
a38 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a39 1
<div class="header">
d41 4
a44 1
Next: <a href="ranlib.html#ranlib" accesskey="n" rel="next">ranlib</a>, Previous: <a href="objcopy.html#objcopy" accesskey="p" rel="prev">objcopy</a>, Up: <a href="index.html#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Binutils-Index.html#Binutils-Index" title="Index" rel="index">Index</a>]</p>
d46 1
a46 2
<hr>
<a name="objdump-1"></a>
d49 2
a50 3
<a name="index-object-file-information"></a>
<a name="index-objdump"></a>

d52 47
a98 48
<div class="smallexample">
<pre class="smallexample">objdump [<samp>-a</samp>|<samp>--archive-headers</samp>]
        [<samp>-b</samp> <var>bfdname</var>|<samp>--target=<var>bfdname</var></samp>]
        [<samp>-C</samp>|<samp>--demangle</samp>[=<var>style</var>] ]
        [<samp>-d</samp>|<samp>--disassemble</samp>]
        [<samp>-D</samp>|<samp>--disassemble-all</samp>]
        [<samp>-z</samp>|<samp>--disassemble-zeroes</samp>]
        [<samp>-EB</samp>|<samp>-EL</samp>|<samp>--endian=</samp>{big | little }]
        [<samp>-f</samp>|<samp>--file-headers</samp>]
        [<samp>-F</samp>|<samp>--file-offsets</samp>]
        [<samp>--file-start-context</samp>]
        [<samp>-g</samp>|<samp>--debugging</samp>]
        [<samp>-e</samp>|<samp>--debugging-tags</samp>]
        [<samp>-h</samp>|<samp>--section-headers</samp>|<samp>--headers</samp>]
        [<samp>-i</samp>|<samp>--info</samp>]
        [<samp>-j</samp> <var>section</var>|<samp>--section=</samp><var>section</var>]
        [<samp>-l</samp>|<samp>--line-numbers</samp>]
        [<samp>-S</samp>|<samp>--source</samp>]
        [<samp>-m</samp> <var>machine</var>|<samp>--architecture=</samp><var>machine</var>]
        [<samp>-M</samp> <var>options</var>|<samp>--disassembler-options=</samp><var>options</var>]
        [<samp>-p</samp>|<samp>--private-headers</samp>]
        [<samp>-P</samp> <var>options</var>|<samp>--private=</samp><var>options</var>]
        [<samp>-r</samp>|<samp>--reloc</samp>]
        [<samp>-R</samp>|<samp>--dynamic-reloc</samp>]
        [<samp>-s</samp>|<samp>--full-contents</samp>]
        [<samp>-W[lLiaprmfFsoRt]</samp>|
         <samp>--dwarf</samp>[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges,=gdb_index]]
        [<samp>-G</samp>|<samp>--stabs</samp>]
        [<samp>-t</samp>|<samp>--syms</samp>]
        [<samp>-T</samp>|<samp>--dynamic-syms</samp>]
        [<samp>-x</samp>|<samp>--all-headers</samp>]
        [<samp>-w</samp>|<samp>--wide</samp>]
        [<samp>--start-address=</samp><var>address</var>]
        [<samp>--stop-address=</samp><var>address</var>]
        [<samp>--prefix-addresses</samp>]
        [<samp>--[no-]show-raw-insn</samp>]
        [<samp>--adjust-vma=</samp><var>offset</var>]
        [<samp>--special-syms</samp>]
        [<samp>--prefix=</samp><var>prefix</var>]
        [<samp>--prefix-strip=</samp><var>level</var>]
        [<samp>--insn-width=</samp><var>width</var>]
        [<samp>-V</samp>|<samp>--version</samp>]
        [<samp>-H</samp>|<samp>--help</samp>]
        <var>objfile</var>&hellip;
</pre></div>


<p><code>objdump</code> displays information about one or more object files.
d103 3
a105 3
</p>
<p><var>objfile</var>&hellip; are the object files to be examined.  When you
specify archives, <code>objdump</code> shows information on each of the member
a106 1
</p>
d108 5
d114 4
a117 11
<p>The long and short forms of options, shown here as alternatives, are
equivalent.  At least one option from the list
<samp>-a,-d,-D,-e,-f,-g,-G,-h,-H,-p,-P,-r,-R,-s,-S,-t,-T,-V,-x</samp> must be given.
</p>
<dl compact="compact">
<dt><code>-a</code></dt>
<dt><code>--archive-header</code></dt>
<dd><a name="index-archive-headers"></a>
<p>If any of the <var>objfile</var> files are archives, display the archive
header information (in a format similar to &lsquo;<samp>ls -l</samp>&rsquo;).  Besides the
information you could list with &lsquo;<samp>ar tv</samp>&rsquo;, &lsquo;<samp>objdump -a</samp>&rsquo; shows
d119 2
a120 6
</p>
</dd>
<dt><code>--adjust-vma=<var>offset</var></code></dt>
<dd><a name="index-section-addresses-in-objdump"></a>
<a name="index-VMA-in-objdump"></a>
<p>When dumping information, first add <var>offset</var> to all the section
d125 2
a126 6
</p>
</dd>
<dt><code>-b <var>bfdname</var></code></dt>
<dt><code>--target=<var>bfdname</var></code></dt>
<dd><a name="index-object-code-format-1"></a>
<p>Specify that the object-code format for the object files is
d129 6
a134 7
</p>
<p>For example,
</p><div class="example">
<pre class="example">objdump -b oasys -m vax -h fu.o
</pre></div>
<p>displays summary information from the section headers (<samp>-h</samp>) of
<samp>fu.o</samp>, which is explicitly identified (<samp>-m</samp>) as a VAX object
d136 1
a136 1
formats available with the <samp>-i</samp> option.
d138 2
a139 6
</p>
</dd>
<dt><code>-C</code></dt>
<dt><code>--demangle[=<var>style</var>]</code></dt>
<dd><a name="index-demangling-in-objdump"></a>
<p>Decode (<em>demangle</em>) low-level symbol names into user-level names.
d145 2
a146 5
</p>
</dd>
<dt><code>-g</code></dt>
<dt><code>--debugging</code></dt>
<dd><p>Display debugging information.  This attempts to parse STABS and IEEE
d149 1
a149 1
falls back on the <samp>-W</samp> option to print any DWARF information in
d151 2
a152 5
</p>
</dd>
<dt><code>-e</code></dt>
<dt><code>--debugging-tags</code></dt>
<dd><p>Like <samp>-g</samp>, but the information is generated in a format compatible
d154 2
a155 7
</p>
</dd>
<dt><code>-d</code></dt>
<dt><code>--disassemble</code></dt>
<dd><a name="index-disassembling-object-code"></a>
<a name="index-machine-instructions"></a>
<p>Display the assembler mnemonics for the machine instructions from
d158 2
a159 5
</p>
</dd>
<dt><code>-D</code></dt>
<dt><code>--disassemble-all</code></dt>
<dd><p>Like <samp>-d</samp>, but disassemble the contents of all sections, not just
d161 2
a162 2
</p>
<p>If the target is an ARM architecture this switch also has the effect
d165 2
a166 4
</p>
</dd>
<dt><code>--prefix-addresses</code></dt>
<dd><p>When disassembling, print the complete address on each line.  This is
d168 2
a169 8
</p>
</dd>
<dt><code>-EB</code></dt>
<dt><code>-EL</code></dt>
<dt><code>--endian={big|little}</code></dt>
<dd><a name="index-endianness"></a>
<a name="index-disassembly-endianness"></a>
<p>Specify the endianness of the object files.  This only affects
d172 2
a173 6
</p>
</dd>
<dt><code>-f</code></dt>
<dt><code>--file-headers</code></dt>
<dd><a name="index-object-file-header"></a>
<p>Display summary information from the overall header of
d175 2
a176 6
</p>
</dd>
<dt><code>-F</code></dt>
<dt><code>--file-offsets</code></dt>
<dd><a name="index-object-file-offsets"></a>
<p>When disassembling sections, whenever a symbol is displayed, also
d182 3
a184 6
</p>
</dd>
<dt><code>--file-start-context</code></dt>
<dd><a name="index-source-code-context"></a>
<p>Specify that when displaying interlisted source code/disassembly
(assumes <samp>-S</samp>) from a file that has not yet been displayed, extend the
d186 2
a187 7
</p>
</dd>
<dt><code>-h</code></dt>
<dt><code>--section-headers</code></dt>
<dt><code>--headers</code></dt>
<dd><a name="index-section-headers"></a>
<p>Display summary information from the section headers of the
d189 4
a192 4
</p>
<p>File segments may be relocated to nonstandard addresses, for example by
using the <samp>-Ttext</samp>, <samp>-Tdata</samp>, or <samp>-Tbss</samp> options to
<code>ld</code>.  However, some object file formats, such as a.out, do not
d194 2
a195 2
although <code>ld</code> relocates the sections correctly, using &lsquo;<samp>objdump
-h</samp>&rsquo; to list the file section headers cannot show the correct addresses.
d198 13
a210 34
</p>
</dd>
<dt><code>-H</code></dt>
<dt><code>--help</code></dt>
<dd><p>Print a summary of the options to <code>objdump</code> and exit.
</p>
</dd>
<dt><code>-i</code></dt>
<dt><code>--info</code></dt>
<dd><a name="index-architectures-available"></a>
<a name="index-object-formats-available"></a>
<p>Display a list showing all architectures and object formats available
for specification with <samp>-b</samp> or <samp>-m</samp>.
</p>
</dd>
<dt><code>-j <var>name</var></code></dt>
<dt><code>--section=<var>name</var></code></dt>
<dd><a name="index-section-information"></a>
<p>Display information only for section <var>name</var>.
</p>
</dd>
<dt><code>-l</code></dt>
<dt><code>--line-numbers</code></dt>
<dd><a name="index-source-filenames-for-object-files"></a>
<p>Label the display (using debugging information) with the filename and
source line numbers corresponding to the object code or relocs shown.
Only useful with <samp>-d</samp>, <samp>-D</samp>, or <samp>-r</samp>.
</p>
</dd>
<dt><code>-m <var>machine</var></code></dt>
<dt><code>--architecture=<var>machine</var></code></dt>
<dd><a name="index-architecture"></a>
<a name="index-disassembly-architecture"></a>
<p>Specify the architecture to use when disassembling object files.  This
d213 3
a215 3
architectures with the <samp>-i</samp> option.
</p>
<p>If the target is an ARM architecture then this switch has an
d217 1
a217 1
instructions supported by the architecture specified by <var>machine</var>.
d220 3
a222 6
disassemble all the instructions use <samp>-marm</samp>.
</p>
</dd>
<dt><code>-M <var>options</var></code></dt>
<dt><code>--disassembler-options=<var>options</var></code></dt>
<dd><p>Pass target specific information to the disassembler.  Only supported on
d224 1
a224 1
disassembler option then multiple <samp>-M</samp> options can be used or
d226 2
a227 2
</p>
<p>If the target is an ARM architecture then this switch can be used to
d229 9
a237 9
<samp>-M reg-names-std</samp> (the default) will select the register names as
used in ARM&rsquo;s instruction set documentation, but with register 13 called
&rsquo;sp&rsquo;, register 14 called &rsquo;lr&rsquo; and register 15 called &rsquo;pc&rsquo;.  Specifying
<samp>-M reg-names-apcs</samp> will select the name set used by the ARM
Procedure Call Standard, whilst specifying <samp>-M reg-names-raw</samp> will
just use &lsquo;<samp>r</samp>&rsquo; followed by the register number.
</p>
<p>There are also two variants on the APCS register naming scheme enabled
by <samp>-M reg-names-atpcs</samp> and <samp>-M reg-names-special-atpcs</samp> which
d240 2
a241 2
</p>
<p>This option can also be used for ARM architectures to force the
d243 1
a243 1
using the switch <samp>--disassembler-options=force-thumb</samp>.  This can be
d246 2
a247 2
</p>
<p>For the x86, some of the options duplicate functions of the <samp>-m</samp>
d249 9
a257 9
following may be specified as a comma separated string.
<samp>x86-64</samp>, <samp>i386</samp> and <samp>i8086</samp> select disassembly for
the given architecture.  <samp>intel</samp> and <samp>att</samp> select between
intel syntax mode and AT&amp;T syntax mode.
<samp>intel-mnemonic</samp> and <samp>att-mnemonic</samp> select between
intel mnemonic mode and AT&amp;T mnemonic mode. <samp>intel-mnemonic</samp>
implies <samp>intel</samp> and <samp>att-mnemonic</samp> implies <samp>att</samp>.
<samp>addr64</samp>, <samp>addr32</samp>,
<samp>addr16</samp>, <samp>data32</samp> and <samp>data16</samp> specify the default
d259 2
a260 2
<samp>x86-64</samp>, <samp>i386</samp> or <samp>i8086</samp> appear later in the
option string.  Lastly, <samp>suffix</samp>, when in AT&amp;T mode,
d263 6
a268 6
</p>
<p>For PowerPC, <samp>booke</samp> controls the disassembly of BookE
instructions.  <samp>32</samp> and <samp>64</samp> select PowerPC and
PowerPC64 disassembly, respectively.  <samp>e300</samp> selects
disassembly for the e300 family.  <samp>440</samp> selects disassembly for
the PowerPC 440.  <samp>ppcps</samp> selects disassembly for the paired
d270 2
a271 2
</p>
<p>For MIPS, this option controls the printing of instruction mnemonic
d275 7
a281 14
</p>
<dl compact="compact">
<dt><code>no-aliases</code></dt>
<dd><p>Print the &rsquo;raw&rsquo; instruction mnemonic instead of some pseudo
instruction mnemonic.  I.e., print &rsquo;daddu&rsquo; or &rsquo;or&rsquo; instead of &rsquo;move&rsquo;,
&rsquo;sll&rsquo; instead of &rsquo;nop&rsquo;, etc.
</p>
</dd>
<dt><code>virt</code></dt>
<dd><p>Disassemble the virtualization ASE instructions.
</p>
</dd>
<dt><code>gpr-names=<var>ABI</var></code></dt>
<dd><p>Print GPR (general-purpose register) names as appropriate
d284 2
a285 4
</p>
</dd>
<dt><code>fpr-names=<var>ABI</var></code></dt>
<dd><p>Print FPR (floating-point register) names as
d288 2
a289 4
</p>
</dd>
<dt><code>cp0-names=<var>ARCH</var></code></dt>
<dd><p>Print CP0 (system control coprocessor; coprocessor 0) register names
d293 2
a294 4
</p>
</dd>
<dt><code>hwr-names=<var>ARCH</var></code></dt>
<dd><p>Print HWR (hardware register, used by the <code>rdhwr</code> instruction) names
d298 5
a302 10
</p>
</dd>
<dt><code>reg-names=<var>ABI</var></code></dt>
<dd><p>Print GPR and FPR names as appropriate for the selected ABI.
</p>
</dd>
<dt><code>reg-names=<var>ARCH</var></code></dt>
<dd><p>Print CPU-specific register names (CP0 register and HWR names)
as appropriate for the selected CPU or architecture.
</p></dd>
d305 3
a307 3
<p>For any of the options listed above, <var>ABI</var> or
<var>ARCH</var> may be specified as &lsquo;<samp>numeric</samp>&rsquo; to have numbers printed
rather than names, for the selected types of registers.
d309 5
a313 5
the <samp>--help</samp> option.
</p>
<p>For VAX, you can specify function entry addresses with <samp>-M
entry:0xf00ba</samp>.  You can use this multiple times to properly
disassemble VAX binary files that don&rsquo;t contain symbol tables (like
d317 2
a318 5
</p>
</dd>
<dt><code>-p</code></dt>
<dt><code>--private-headers</code></dt>
<dd><p>Print information that is specific to the object file format.  The exact
d321 3
a323 19
</p>
</dd>
<dt><code>-P <var>options</var></code></dt>
<dt><code>--private=<var>options</var></code></dt>
<dd><p>Print information that is specific to the object file format.  The
argument <var>options</var> is a comma separated list that depends on the
format (the lists of options is displayed with the help).
</p>
<p>For XCOFF, the available options are: <samp>header</samp>, <samp>aout</samp>,
<samp>sections</samp>, <samp>syms</samp>, <samp>relocs</samp>, <samp>lineno</samp>,
<samp>loader</samp>, <samp>except</samp>, <samp>typchk</samp>, <samp>traceback</samp>,
<samp>toc</samp> and <samp>ldinfo</samp>.
</p>
</dd>
<dt><code>-r</code></dt>
<dt><code>--reloc</code></dt>
<dd><a name="index-relocation-entries_002c-in-object-file"></a>
<p>Print the relocation entries of the file.  If used with <samp>-d</samp> or
<samp>-D</samp>, the relocations are printed interspersed with the
d325 2
a326 6
</p>
</dd>
<dt><code>-R</code></dt>
<dt><code>--dynamic-reloc</code></dt>
<dd><a name="index-dynamic-relocation-entries_002c-in-object-file"></a>
<p>Print the dynamic relocation entries of the file.  This is only
d328 2
a329 2
libraries.  As for <samp>-r</samp>, if used with <samp>-d</samp> or
<samp>-D</samp>, the relocations are printed interspersed with the
d331 2
a332 7
</p>
</dd>
<dt><code>-s</code></dt>
<dt><code>--full-contents</code></dt>
<dd><a name="index-sections_002c-full-contents"></a>
<a name="index-object-file-sections"></a>
<p>Display the full contents of any sections requested.  By default all
d334 11
a344 24
</p>
</dd>
<dt><code>-S</code></dt>
<dt><code>--source</code></dt>
<dd><a name="index-source-disassembly"></a>
<a name="index-disassembly_002c-with-source"></a>
<p>Display source code intermixed with disassembly, if possible.  Implies
<samp>-d</samp>.
</p>
</dd>
<dt><code>--prefix=<var>prefix</var></code></dt>
<dd><a name="index-Add-prefix-to-absolute-paths"></a>
<p>Specify <var>prefix</var> to add to the absolute paths when used with
<samp>-S</samp>.
</p>
</dd>
<dt><code>--prefix-strip=<var>level</var></code></dt>
<dd><a name="index-Strip-absolute-paths"></a>
<p>Indicate how many initial directory names to strip off the hardwired
absolute paths. It has no effect without <samp>--prefix=</samp><var>prefix</var>.
</p>
</dd>
<dt><code>--show-raw-insn</code></dt>
<dd><p>When disassembling instructions, print the instruction in hex as well as
d346 6
a351 11
<samp>--prefix-addresses</samp> is used.
</p>
</dd>
<dt><code>--no-show-raw-insn</code></dt>
<dd><p>When disassembling instructions, do not print the instruction bytes.
This is the default when <samp>--prefix-addresses</samp> is used.
</p>
</dd>
<dt><code>--insn-width=<var>width</var></code></dt>
<dd><a name="index-Instruction-width"></a>
<p>Display <var>width</var> bytes on a single line when disassembling
d353 2
a354 7
</p>
</dd>
<dt><code>-W[lLiaprmfFsoRt]</code></dt>
<dt><code>--dwarf[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges,=gdb_index]</code></dt>
<dd><a name="index-DWARF"></a>
<a name="index-debug-symbols"></a>
<p>Displays the contents of the debug sections in the file, if any are
d357 5
a361 41
</p>
<p>Note that there is no single letter option to display the content of
trace sections or .gdb_index.
</p>
<p>Note: the output from the <samp>=info</samp> option can also be affected
by the options <samp>--dwarf-depth</samp>, the <samp>--dwarf-start</samp> and
the <samp>--dwarf-check</samp>.
</p>
</dd>
<dt><code>--dwarf-depth=<var>n</var></code></dt>
<dd><p>Limit the dump of the <code>.debug_info</code> section to <var>n</var> children.
This is only useful with <samp>--dwarf=info</samp>.  The default is
to print all DIEs; the special value 0 for <var>n</var> will also have this
effect.
</p>
<p>With a non-zero value for <var>n</var>, DIEs at or deeper than <var>n</var>
levels will not be printed.  The range for <var>n</var> is zero-based.
</p>
</dd>
<dt><code>--dwarf-start=<var>n</var></code></dt>
<dd><p>Print only DIEs beginning with the DIE numbered <var>n</var>.  This is only
useful with <samp>--dwarf=info</samp>.
</p>
<p>If specified, this option will suppress printing of any header
information and all DIEs before the DIE numbered <var>n</var>.  Only
siblings and children of the specified DIE will be printed.
</p>
<p>This can be used in conjunction with <samp>--dwarf-depth</samp>.
</p>
</dd>
<dt><code>--dwarf-check</code></dt>
<dd><p>Enable additional checks for consistency of Dwarf information.
</p>
</dd>
<dt><code>-G</code></dt>
<dt><code>--stabs</code></dt>
<dd><a name="index-stab"></a>
<a name="index-_002estab"></a>
<a name="index-debug-symbols-1"></a>
<a name="index-ELF-object-file-format"></a>
<p>Display the full contents of any sections requested.  Display the
d366 12
a377 21
interleaved with linkage symbols, and are visible in the <samp>--syms</samp>
output.
</p>
</dd>
<dt><code>--start-address=<var>address</var></code></dt>
<dd><a name="index-start_002daddress"></a>
<p>Start displaying data at the specified address.  This affects the output
of the <samp>-d</samp>, <samp>-r</samp> and <samp>-s</samp> options.
</p>
</dd>
<dt><code>--stop-address=<var>address</var></code></dt>
<dd><a name="index-stop_002daddress"></a>
<p>Stop displaying data at the specified address.  This affects the output
of the <samp>-d</samp>, <samp>-r</samp> and <samp>-s</samp> options.
</p>
</dd>
<dt><code>-t</code></dt>
<dt><code>--syms</code></dt>
<dd><a name="index-symbol-table-entries_002c-printing"></a>
<p>Print the symbol table entries of the file.
This is similar to the information provided by the &lsquo;<samp>nm</samp>&rsquo; program,
a380 5
</p>
<div class="smallexample">
<pre class="smallexample">[  4](sec  3)(fl 0x00)(ty   0)(scl   3) (nx 1) 0x00000000 .bss
[  6](sec  1)(fl 0x00)(ty   0)(scl   2) (nx 0) 0x00000000 fred
</pre></div>
d382 4
a385 1
<p>where the number inside the square brackets is the number of the entry
d387 2
a388 2
<var>fl</var> value are the symbol&rsquo;s flag bits, the <var>ty</var> number is the
symbol&rsquo;s type, the <var>scl</var> number is the symbol&rsquo;s storage class and
d390 3
a392 3
the symbol.  The last two fields are the symbol&rsquo;s value and its name.
</p>
<p>The other common output format, usually seen with ELF based files,
a393 5
</p>
<div class="smallexample">
<pre class="smallexample">00000000 l    d  .bss   00000000 .bss
00000000 g       .text  00000000 fred
</pre></div>
d395 4
a398 1
<p>Here the first number is the symbol&rsquo;s value (sometimes refered to as
d405 2
a406 2
</p>
<p>After the section name comes another field, a number, which for common
d408 5
a412 9
the symbol&rsquo;s name is displayed.
</p>
<p>The flag characters are divided into 7 groups as follows:
</p><dl compact="compact">
<dt><code>l</code></dt>
<dt><code>g</code></dt>
<dt><code>u</code></dt>
<dt><code>!</code></dt>
<dd><p>The symbol is a local (l), global (g), unique global (u), neither
d420 7
a426 13
</p>
</dd>
<dt><code>w</code></dt>
<dd><p>The symbol is weak (w) or strong (a space).
</p>
</dd>
<dt><code>C</code></dt>
<dd><p>The symbol denotes a constructor (C) or an ordinary symbol (a space).
</p>
</dd>
<dt><code>W</code></dt>
<dd><p>The symbol is a warning (W) or a normal symbol (a space).  A warning
symbol&rsquo;s name is a message to be displayed if the symbol following the
d428 2
a429 5
</p>
</dd>
<dt><code>I</code></dt>
<dt><code>i</code></dt>
<dd><p>The symbol is an indirect reference to another symbol (I), a function
d432 2
a433 5
</p>
</dd>
<dt><code>d</code></dt>
<dt><code>D</code></dt>
<dd><p>The symbol is a debugging symbol (d) or a dynamic symbol (D) or a
d435 3
a437 8
</p>
</dd>
<dt><code>F</code></dt>
<dt><code>f</code></dt>
<dt><code>O</code></dt>
<dd><p>The symbol is the name of a function (F) or a file (f) or an object
(O) or just a normal symbol (a space).
</p></dd>
d440 1
a440 5
</dd>
<dt><code>-T</code></dt>
<dt><code>--dynamic-syms</code></dt>
<dd><a name="index-dynamic-symbol-table-entries_002c-printing"></a>
<p>Print the dynamic symbol table entries of the file.  This is only
d442 4
a445 6
libraries.  This is similar to the information provided by the &lsquo;<samp>nm</samp>&rsquo;
program when given the <samp>-D</samp> (<samp>--dynamic</samp>) option.
</p>
</dd>
<dt><code>--special-syms</code></dt>
<dd><p>When displaying symbols include those which the target considers to be
a447 30
</p>
</dd>
<dt><code>-V</code></dt>
<dt><code>--version</code></dt>
<dd><p>Print the version number of <code>objdump</code> and exit.
</p>
</dd>
<dt><code>-x</code></dt>
<dt><code>--all-headers</code></dt>
<dd><a name="index-all-header-information_002c-object-file"></a>
<a name="index-header-information_002c-all"></a>
<p>Display all available header information, including the symbol table and
relocation entries.  Using <samp>-x</samp> is equivalent to specifying all of
<samp>-a -f -h -p -r -t</samp>.
</p>
</dd>
<dt><code>-w</code></dt>
<dt><code>--wide</code></dt>
<dd><a name="index-wide-output_002c-printing"></a>
<p>Format some lines for output devices that have more than 80 columns.
Also do not truncate symbol names when they are displayed.
</p>
</dd>
<dt><code>-z</code></dt>
<dt><code>--disassemble-zeroes</code></dt>
<dd><p>Normally the disassembly output will skip blocks of zeroes.  This
option directs the disassembler to disassemble those blocks, just like
any other data.
</p></dd>
</dl>
d449 1
d451 3
d455 2
a456 5
<hr>
<div class="header">
<p>
Next: <a href="ranlib.html#ranlib" accesskey="n" rel="next">ranlib</a>, Previous: <a href="objcopy.html#objcopy" accesskey="p" rel="prev">objcopy</a>, Up: <a href="index.html#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Binutils-Index.html#Binutils-Index" title="Index" rel="index">Index</a>]</p>
</div>
d458 4
d463 2
a465 2
</body>
</html>
@

