head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.14;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.14;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.17;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Initial processing - The C Preprocessor</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="The C Preprocessor">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Overview.html#Overview" title="Overview">
<link rel="prev" href="Character-sets.html#Character-sets" title="Character sets">
<link rel="next" href="Tokenization.html#Tokenization" title="Tokenization">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005
Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation.  A copy of
the license is included in the
section entitled ``GNU Free Documentation License''.

This manual contains no Invariant Sections.  The Front-Cover Texts are
(a) (see below), and the Back-Cover Texts are (b) (see below).

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.
-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Initial-processing"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Tokenization.html#Tokenization">Tokenization</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Character-sets.html#Character-sets">Character sets</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Overview.html#Overview">Overview</a>
<hr>
</div>

<h3 class="section">1.2 Initial processing</h3>

<p>The preprocessor performs a series of textual transformations on its
input.  These happen before all other processing.  Conceptually, they
happen in a rigid order, and the entire file is run through each
transformation before the next one begins.  CPP actually does them
all at once, for performance reasons.  These transformations correspond
roughly to the first three &ldquo;phases of translation&rdquo; described in the C
standard.

     <ol type=1 start=1>
<li><a name="index-line-endings-1"></a>The input file is read into memory and broken into lines.

     <p>Different systems use different conventions to indicate the end of a
line.  GCC accepts the ASCII control sequences <kbd>LF</kbd>, <kbd>CR&nbsp;LF<!-- /@@w --></kbd> and <kbd>CR</kbd> as end-of-line markers.  These are the canonical
sequences used by Unix, DOS and VMS, and the classic Mac OS (before
OSX) respectively.  You may therefore safely copy source code written
on any of those systems to a different one and use it without
conversion.  (GCC may lose track of the current line number if a file
doesn't consistently use one convention, as sometimes happens when it
is edited on computers with different conventions that share a network
file system.)

     <p>If the last line of any input file lacks an end-of-line marker, the end
of the file is considered to implicitly supply one.  The C standard says
that this condition provokes undefined behavior, so GCC will emit a
warning message.

     <li><a name="index-trigraphs-2"></a><a name="trigraphs"></a>If trigraphs are enabled, they are replaced by their
corresponding single characters.  By default GCC ignores trigraphs,
but if you request a strictly conforming mode with the <samp><span class="option">-std</span></samp>
option, or you specify the <samp><span class="option">-trigraphs</span></samp> option, then it
converts them.

     <p>These are nine three-character sequences, all starting with &lsquo;<samp><span class="samp">??</span></samp>&rsquo;,
that are defined by ISO C to stand for single characters.  They permit
obsolete systems that lack some of C's punctuation to use C.  For
example, &lsquo;<samp><span class="samp">??/</span></samp>&rsquo; stands for &lsquo;<samp><span class="samp">\</span></samp>&rsquo;, so <tt>'??/n'</tt> is a character
constant for a newline.

     <p>Trigraphs are not popular and many compilers implement them
incorrectly.  Portable code should not rely on trigraphs being either
converted or ignored.  With <samp><span class="option">-Wtrigraphs</span></samp> GCC will warn you
when a trigraph may change the meaning of your program if it were
converted.  See <a href="Wtrigraphs.html#Wtrigraphs">Wtrigraphs</a>.

     <p>In a string constant, you can prevent a sequence of question marks
from being confused with a trigraph by inserting a backslash between
the question marks, or by separating the string literal at the
trigraph and making use of string literal concatenation.  <tt>"(??\?)"</tt>
is the string &lsquo;<samp><span class="samp">(???)</span></samp>&rsquo;, not &lsquo;<samp><span class="samp">(?]</span></samp>&rsquo;.  Traditional C compilers
do not recognize these idioms.

     <p>The nine trigraphs and their replacements are

     <pre class="smallexample">          Trigraph:       ??(  ??)  ??&lt;  ??&gt;  ??=  ??/  ??'  ??!  ??-
          Replacement:      [    ]    {    }    #    \    ^    |    ~
</pre>
     <li><a name="index-continued-lines-3"></a><a name="index-backslash_002dnewline-4"></a>Continued lines are merged into one long line.

     <p>A continued line is a line which ends with a backslash, &lsquo;<samp><span class="samp">\</span></samp>&rsquo;.  The
backslash is removed and the following line is joined with the current
one.  No space is inserted, so you may split a line anywhere, even in
the middle of a word.  (It is generally more readable to split lines
only at white space.)

     <p>The trailing backslash on a continued line is commonly referred to as a
<dfn>backslash-newline</dfn>.

     <p>If there is white space between a backslash and the end of a line, that
is still a continued line.  However, as this is usually the result of an
editing mistake, and many compilers will not accept it as a continued
line, GCC will warn you about it.

     <li><a name="index-comments-5"></a><a name="index-line-comments-6"></a><a name="index-block-comments-7"></a>All comments are replaced with single spaces.

     <p>There are two kinds of comments.  <dfn>Block comments</dfn> begin with
&lsquo;<samp><span class="samp">/*</span></samp>&rsquo; and continue until the next &lsquo;<samp><span class="samp">*/</span></samp>&rsquo;.  Block comments do not
nest:

     <pre class="smallexample">          /* <span class="roman">this is</span> /* <span class="roman">one comment</span> */ <span class="roman">text outside comment</span>
</pre>
     <p><dfn>Line comments</dfn> begin with &lsquo;<samp><span class="samp">//</span></samp>&rsquo; and continue to the end of the
current line.  Line comments do not nest either, but it does not matter,
because they would end in the same place anyway.

     <pre class="smallexample">          // <span class="roman">this is</span> // <span class="roman">one comment</span>
          <span class="roman">text outside comment</span>
</pre>
     </ol>

   <p>It is safe to put line comments inside block comments, or vice versa.

<pre class="smallexample">     /* <span class="roman">block comment</span>
        // <span class="roman">contains line comment</span>
        <span class="roman">yet more comment</span>
      */ <span class="roman">outside comment</span>
     
     // <span class="roman">line comment</span> /* <span class="roman">contains block comment</span> */
</pre>
   <p>But beware of commenting out one end of a block comment with a line
comment.

<pre class="smallexample">      // <span class="roman">l.c.</span>  /* <span class="roman">block comment begins</span>
         <span class="roman">oops! this isn't a comment anymore</span> */
</pre>
   <p>Comments are not recognized within string literals. 
<tt>"/*&nbsp;blah&nbsp;*/"<!-- /@@w --></tt> is the string constant &lsquo;<samp><span class="samp">/*&nbsp;blah&nbsp;*/<!-- /@@w --></span></samp>&rsquo;, not
an empty string.

   <p>Line comments are not in the 1989 edition of the C standard, but they
are recognized by GCC as an extension.  In C++ and in the 1999 edition
of the C standard, they are an official part of the language.

   <p>Since these transformations happen before all other processing, you can
split a line mechanically with backslash-newline anywhere.  You can
comment out the end of a line.  You can continue a line comment onto the
next line with backslash-newline.  You can even split &lsquo;<samp><span class="samp">/*</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">*/</span></samp>&rsquo;, and &lsquo;<samp><span class="samp">//</span></samp>&rsquo; onto multiple lines with backslash-newline. 
For example:

<pre class="smallexample">     /\
     *
     */ # /*
     */ defi\
     ne FO\
     O 10\
     20
</pre>
   <p class="noindent">is equivalent to <code>#define&nbsp;FOO&nbsp;1020<!-- /@@w --></code>.  All these tricks are
extremely confusing and should not be used in code intended to be
readable.

   <p>There is no way to prevent a backslash at the end of a line from being
interpreted as a backslash-newline.  This cannot affect any correct
program, however.

   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
2008, 2009, 2010, 2011
d18 1
a18 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d21 1
a21 1
section entitled "GNU Free Documentation License".
d28 1
a28 1
A GNU Manual
d32 1
a32 1
You have freedom to copy and modify this GNU Manual, like GNU
d34 1
a34 43
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>The C Preprocessor: Initial processing</title>

<meta name="description" content="The C Preprocessor: Initial processing">
<meta name="keywords" content="The C Preprocessor: Initial processing">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Index-of-Directives.html#Index-of-Directives" rel="index" title="Index of Directives">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Overview.html#Overview" rel="up" title="Overview">
<link href="Tokenization.html#Tokenization" rel="next" title="Tokenization">
<link href="Character-sets.html#Character-sets" rel="prev" title="Character sets">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d36 12
a47 3
</style>


d49 2
a50 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a51 1
<div class="header">
d53 4
a56 1
Next: <a href="Tokenization.html#Tokenization" accesskey="n" rel="next">Tokenization</a>, Previous: <a href="Character-sets.html#Character-sets" accesskey="p" rel="prev">Character sets</a>, Up: <a href="Overview.html#Overview" accesskey="u" rel="up">Overview</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
d58 1
a58 2
<hr>
<a name="Initial-processing-1"></a>
a67 4
</p>
<ol>
<li> <a name="index-line-endings"></a>
The input file is read into memory and broken into lines.
d69 4
a72 1
<p>Different systems use different conventions to indicate the end of a
d78 1
a78 1
doesn&rsquo;t consistently use one convention, as sometimes happens when it
d81 2
a82 2
</p>
<p>If the last line of any input file lacks an end-of-line marker, the end
d86 2
a87 3
</p>
</li><li> <a name="index-trigraphs"></a>
<a name="trigraphs"></a>If trigraphs are enabled, they are replaced by their
d89 2
a90 2
but if you request a strictly conforming mode with the <samp>-std</samp>
option, or you specify the <samp>-trigraphs</samp> option, then it
d93 1
a93 1
<p>These are nine three-character sequences, all starting with &lsquo;<samp>??</samp>&rsquo;,
d95 2
a96 2
obsolete systems that lack some of C&rsquo;s punctuation to use C.  For
example, &lsquo;<samp>??/</samp>&rsquo; stands for &lsquo;<samp>\</samp>&rsquo;, so <tt>'??/n'</tt> is a character
d98 2
a99 2
</p>
<p>Trigraphs are not popular and many compilers implement them
d101 1
a101 1
converted or ignored.  With <samp>-Wtrigraphs</samp> GCC will warn you
d103 3
a105 3
converted.  See <a href="Invocation.html#Wtrigraphs">Wtrigraphs</a>.
</p>
<p>In a string constant, you can prevent a sequence of question marks
d108 2
a109 2
trigraph and making use of string literal concatenation.  <tt>&quot;(??\?)&quot;</tt>
is the string &lsquo;<samp>(???)</samp>&rsquo;, not &lsquo;<samp>(?]</samp>&rsquo;.  Traditional C compilers
a110 11
</p>
<p>The nine trigraphs and their replacements are
</p>
<div class="smallexample">
<pre class="smallexample">Trigraph:       ??(  ??)  ??&lt;  ??&gt;  ??=  ??/  ??'  ??!  ??-
Replacement:      [    ]    {    }    #    \    ^    |    ~
</pre></div>

</li><li> <a name="index-continued-lines"></a>
<a name="index-backslash_002dnewline"></a>
Continued lines are merged into one long line.
d112 8
a119 1
<p>A continued line is a line which ends with a backslash, &lsquo;<samp>\</samp>&rsquo;.  The
d124 5
a128 5
</p>
<p>The trailing backslash on a continued line is commonly referred to as a
<em>backslash-newline</em>.
</p>
<p>If there is white space between a backslash and the end of a line, that
a131 5
</p>
</li><li> <a name="index-comments"></a>
<a name="index-line-comments"></a>
<a name="index-block-comments"></a>
All comments are replaced with single spaces.
d133 4
a136 2
<p>There are two kinds of comments.  <em>Block comments</em> begin with
&lsquo;<samp>/*</samp>&rsquo; and continue until the next &lsquo;<samp>*/</samp>&rsquo;.  Block comments do not
a137 4
</p>
<div class="smallexample">
<pre class="smallexample">/* <span class="roman">this is</span> /* <span class="roman">one comment</span> */ <span class="roman">text outside comment</span>
</pre></div>
d139 3
a141 1
<p><em>Line comments</em> begin with &lsquo;<samp>//</samp>&rsquo; and continue to the end of the
a143 17
</p>
<div class="smallexample">
<pre class="smallexample">// <span class="roman">this is</span> // <span class="roman">one comment</span>
<span class="roman">text outside comment</span>
</pre></div>
</li></ol>

<p>It is safe to put line comments inside block comments, or vice versa.
</p>
<div class="smallexample">
<pre class="smallexample">/* <span class="roman">block comment</span>
   // <span class="roman">contains line comment</span>
   <span class="roman">yet more comment</span>
 */ <span class="roman">outside comment</span>

// <span class="roman">line comment</span> /* <span class="roman">contains block comment</span> */
</pre></div>
d145 15
a159 1
<p>But beware of commenting out one end of a block comment with a line
a160 5
</p>
<div class="smallexample">
<pre class="smallexample"> // <span class="roman">l.c.</span>  /* <span class="roman">block comment begins</span>
    <span class="roman">oops! this isn&rsquo;t a comment anymore</span> */
</pre></div>
d162 5
a166 2
<p>Comments are not recognized within string literals.
<tt>&quot;/*&nbsp;blah&nbsp;*/&quot;<!-- /@@w --></tt> is the string constant &lsquo;<samp>/*&nbsp;blah&nbsp;*/<!-- /@@w --></samp>&rsquo;, not
d168 2
a169 2
</p>
<p>Line comments are not in the 1989 edition of the C standard, but they
d172 2
a173 2
</p>
<p>Since these transformations happen before all other processing, you can
d176 2
a177 2
next line with backslash-newline.  You can even split &lsquo;<samp>/*</samp>&rsquo;,
&lsquo;<samp>*/</samp>&rsquo;, and &lsquo;<samp>//</samp>&rsquo; onto multiple lines with backslash-newline.
a178 10
</p>
<div class="smallexample">
<pre class="smallexample">/\
*
*/ # /*
*/ defi\
ne FO\
O 10\
20
</pre></div>
d180 9
a188 1
<p>is equivalent to <code>#define&nbsp;FOO&nbsp;1020<!-- /@@w --></code>.  All these tricks are
d191 2
a192 2
</p>
<p>There is no way to prevent a backslash at the end of a line from being
a194 7
</p>
<hr>
<div class="header">
<p>
Next: <a href="Tokenization.html#Tokenization" accesskey="n" rel="next">Tokenization</a>, Previous: <a href="Character-sets.html#Character-sets" accesskey="p" rel="prev">Character sets</a>, Up: <a href="Overview.html#Overview" accesskey="u" rel="up">Overview</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
</div>

d196 1
a197 2
</body>
</html>
@

