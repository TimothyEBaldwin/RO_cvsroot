head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.14;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.14;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.17;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Traditional macros - The C Preprocessor</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="The C Preprocessor">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Traditional-Mode.html#Traditional-Mode" title="Traditional Mode">
<link rel="prev" href="Traditional-lexical-analysis.html#Traditional-lexical-analysis" title="Traditional lexical analysis">
<link rel="next" href="Traditional-miscellany.html#Traditional-miscellany" title="Traditional miscellany">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005
Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation.  A copy of
the license is included in the
section entitled ``GNU Free Documentation License''.

This manual contains no Invariant Sections.  The Front-Cover Texts are
(a) (see below), and the Back-Cover Texts are (b) (see below).

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.
-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Traditional-macros"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Traditional-miscellany.html#Traditional-miscellany">Traditional miscellany</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Traditional-lexical-analysis.html#Traditional-lexical-analysis">Traditional lexical analysis</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Traditional-Mode.html#Traditional-Mode">Traditional Mode</a>
<hr>
</div>

<h3 class="section">10.2 Traditional macros</h3>

<p>The major difference between traditional and ISO macros is that the
former expand to text rather than to a token sequence.  CPP removes
all leading and trailing horizontal whitespace from a macro's
replacement text before storing it, but preserves the form of internal
whitespace.

   <p>One consequence is that it is legitimate for the replacement text to
contain an unmatched quote (see <a href="Traditional-lexical-analysis.html#Traditional-lexical-analysis">Traditional lexical analysis</a>).  An
unclosed string or character constant continues into the text
following the macro call.  Similarly, the text at the end of a macro's
expansion can run together with the text after the macro invocation to
produce a single token.

   <p>Normally comments are removed from the replacement text after the
macro is expanded, but if the <samp><span class="option">-CC</span></samp> option is passed on the
command line comments are preserved.  (In fact, the current
implementation removes comments even before saving the macro
replacement text, but it careful to do it in such a way that the
observed effect is identical even in the function-like macro case.)

   <p>The ISO stringification operator &lsquo;<samp><span class="samp">#</span></samp>&rsquo; and token paste operator
&lsquo;<samp><span class="samp">##</span></samp>&rsquo; have no special meaning.  As explained later, an effect
similar to these operators can be obtained in a different way.  Macro
names that are embedded in quotes, either from the main file or after
macro replacement, do not expand.

   <p>CPP replaces an unquoted object-like macro name with its replacement
text, and then rescans it for further macros to replace.  Unlike
standard macro expansion, traditional macro expansion has no provision
to prevent recursion.  If an object-like macro appears unquoted in its
replacement text, it will be replaced again during the rescan pass,
and so on <em>ad infinitum</em>.  GCC detects when it is expanding
recursive macros, emits an error message, and continues after the
offending macro invocation.

<pre class="smallexample">     #define PLUS +
     #define INC(x) PLUS+x
     INC(foo);
          ==&gt; ++foo;
</pre>
   <p>Function-like macros are similar in form but quite different in
behavior to their ISO counterparts.  Their arguments are contained
within parentheses, are comma-separated, and can cross physical lines. 
Commas within nested parentheses are not treated as argument
separators.  Similarly, a quote in an argument cannot be left
unclosed; a following comma or parenthesis that comes before the
closing quote is treated like any other character.  There is no
facility for handling variadic macros.

   <p>This implementation removes all comments from macro arguments, unless
the <samp><span class="option">-C</span></samp> option is given.  The form of all other horizontal
whitespace in arguments is preserved, including leading and trailing
whitespace.  In particular

<pre class="smallexample">     f( )
</pre>
   <p class="noindent">is treated as an invocation of the macro &lsquo;<samp><span class="samp">f</span></samp>&rsquo; with a single
argument consisting of a single space.  If you want to invoke a
function-like macro that takes no arguments, you must not leave any
whitespace between the parentheses.

   <p>If a macro argument crosses a new line, the new line is replaced with
a space when forming the argument.  If the previous line contained an
unterminated quote, the following line inherits the quoted state.

   <p>Traditional preprocessors replace parameters in the replacement text
with their arguments regardless of whether the parameters are within
quotes or not.  This provides a way to stringize arguments.  For
example

<pre class="smallexample">     #define str(x) "x"
     str(/* <span class="roman">A comment</span> */some text )
          ==&gt; "some text "
</pre>
   <p class="noindent">Note that the comment is removed, but that the trailing space is
preserved.  Here is an example of using a comment to effect token
pasting.

<pre class="smallexample">     #define suffix(x) foo_/**/x
     suffix(bar)
          ==&gt; foo_bar
</pre>
   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
2008, 2009, 2010, 2011
d18 1
a18 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d21 1
a21 1
section entitled "GNU Free Documentation License".
d28 1
a28 1
A GNU Manual
d32 1
a32 1
You have freedom to copy and modify this GNU Manual, like GNU
d34 1
a34 43
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>The C Preprocessor: Traditional macros</title>

<meta name="description" content="The C Preprocessor: Traditional macros">
<meta name="keywords" content="The C Preprocessor: Traditional macros">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Index-of-Directives.html#Index-of-Directives" rel="index" title="Index of Directives">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Traditional-Mode.html#Traditional-Mode" rel="up" title="Traditional Mode">
<link href="Traditional-miscellany.html#Traditional-miscellany" rel="next" title="Traditional miscellany">
<link href="Traditional-lexical-analysis.html#Traditional-lexical-analysis" rel="prev" title="Traditional lexical analysis">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d36 12
a47 3
</style>


d49 2
a50 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a51 1
<div class="header">
d53 4
a56 1
Next: <a href="Traditional-miscellany.html#Traditional-miscellany" accesskey="n" rel="next">Traditional miscellany</a>, Previous: <a href="Traditional-lexical-analysis.html#Traditional-lexical-analysis" accesskey="p" rel="prev">Traditional lexical analysis</a>, Up: <a href="Traditional-Mode.html#Traditional-Mode" accesskey="u" rel="up">Traditional Mode</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
d58 1
a58 2
<hr>
<a name="Traditional-macros-1"></a>
d63 1
a63 1
all leading and trailing horizontal whitespace from a macro&rsquo;s
d66 2
a67 2
</p>
<p>One consequence is that it is legitimate for the replacement text to
d70 1
a70 1
following the macro call.  Similarly, the text at the end of a macro&rsquo;s
d73 3
a75 3
</p>
<p>Normally comments are removed from the replacement text after the
macro is expanded, but if the <samp>-CC</samp> option is passed on the
d80 3
a82 3
</p>
<p>The ISO stringification operator &lsquo;<samp>#</samp>&rsquo; and token paste operator
&lsquo;<samp>##</samp>&rsquo; have no special meaning.  As explained later, an effect
d86 2
a87 2
</p>
<p>CPP replaces an unquoted object-like macro name with its replacement
a94 7
</p>
<div class="smallexample">
<pre class="smallexample">#define PLUS +
#define INC(x) PLUS+x
INC(foo);
     &rarr; ++foo;
</pre></div>
d96 6
a101 1
<p>Function-like macros are similar in form but quite different in
d103 1
a103 1
within parentheses, are comma-separated, and can cross physical lines.
d109 3
a111 3
</p>
<p>This implementation removes all comments from macro arguments, unless
the <samp>-C</samp> option is given.  The form of all other horizontal
a113 4
</p>
<div class="smallexample">
<pre class="smallexample">f( )
</pre></div>
d115 3
a117 1
<p>is treated as an invocation of the macro &lsquo;<samp>f</samp>&rsquo; with a single
d121 2
a122 2
</p>
<p>If a macro argument crosses a new line, the new line is replaced with
d125 2
a126 2
</p>
<p>Traditional preprocessors replace parameters in the replacement text
a129 6
</p>
<div class="smallexample">
<pre class="smallexample">#define str(x) &quot;x&quot;
str(/* <span class="roman">A comment</span> */some text )
     &rarr; &quot;some text &quot;
</pre></div>
d131 5
a135 1
<p>Note that the comment is removed, but that the trailing space is
a137 13
</p>
<div class="smallexample">
<pre class="smallexample">#define suffix(x) foo_/**/x
suffix(bar)
     &rarr; foo_bar
</pre></div>

<hr>
<div class="header">
<p>
Next: <a href="Traditional-miscellany.html#Traditional-miscellany" accesskey="n" rel="next">Traditional miscellany</a>, Previous: <a href="Traditional-lexical-analysis.html#Traditional-lexical-analysis" accesskey="p" rel="prev">Traditional lexical analysis</a>, Up: <a href="Traditional-Mode.html#Traditional-Mode" accesskey="u" rel="up">Traditional Mode</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
</div>

d139 5
a144 2
</body>
</html>
@

