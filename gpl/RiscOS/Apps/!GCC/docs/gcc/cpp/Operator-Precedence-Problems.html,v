head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.15;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.15;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.18;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Operator Precedence Problems - The C Preprocessor</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="The C Preprocessor">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Macro-Pitfalls.html#Macro-Pitfalls" title="Macro Pitfalls">
<link rel="prev" href="Misnesting.html#Misnesting" title="Misnesting">
<link rel="next" href="Swallowing-the-Semicolon.html#Swallowing-the-Semicolon" title="Swallowing the Semicolon">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005
Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation.  A copy of
the license is included in the
section entitled ``GNU Free Documentation License''.

This manual contains no Invariant Sections.  The Front-Cover Texts are
(a) (see below), and the Back-Cover Texts are (b) (see below).

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.
-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Operator-Precedence-Problems"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Swallowing-the-Semicolon.html#Swallowing-the-Semicolon">Swallowing the Semicolon</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Misnesting.html#Misnesting">Misnesting</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Macro-Pitfalls.html#Macro-Pitfalls">Macro Pitfalls</a>
<hr>
</div>

<h4 class="subsection">3.10.2 Operator Precedence Problems</h4>

<p><a name="index-parentheses-in-macro-bodies-73"></a>
You may have noticed that in most of the macro definition examples shown
above, each occurrence of a macro argument name had parentheses around
it.  In addition, another pair of parentheses usually surround the
entire macro definition.  Here is why it is best to write macros that
way.

   <p>Suppose you define a macro as follows,

<pre class="smallexample">     #define ceil_div(x, y) (x + y - 1) / y
</pre>
   <p class="noindent">whose purpose is to divide, rounding up.  (One use for this operation is
to compute how many <code>int</code> objects are needed to hold a certain
number of <code>char</code> objects.)  Then suppose it is used as follows:

<pre class="smallexample">     a = ceil_div (b &amp; c, sizeof (int));
          ==&gt; a = (b &amp; c + sizeof (int) - 1) / sizeof (int);
</pre>
   <p class="noindent">This does not do what is intended.  The operator-precedence rules of
C make it equivalent to this:

<pre class="smallexample">     a = (b &amp; (c + sizeof (int) - 1)) / sizeof (int);
</pre>
   <p class="noindent">What we want is this:

<pre class="smallexample">     a = ((b &amp; c) + sizeof (int) - 1)) / sizeof (int);
</pre>
   <p class="noindent">Defining the macro as

<pre class="smallexample">     #define ceil_div(x, y) ((x) + (y) - 1) / (y)
</pre>
   <p class="noindent">provides the desired result.

   <p>Unintended grouping can result in another way.  Consider <code>sizeof
ceil_div(1, 2)</code>.  That has the appearance of a C expression that would
compute the size of the type of <code>ceil_div (1, 2)</code>, but in fact it
means something very different.  Here is what it expands to:

<pre class="smallexample">     sizeof ((1) + (2) - 1) / (2)
</pre>
   <p class="noindent">This would take the size of an integer and divide it by two.  The
precedence rules have put the division outside the <code>sizeof</code> when it
was intended to be inside.

   <p>Parentheses around the entire macro definition prevent such problems. 
Here, then, is the recommended way to define <code>ceil_div</code>:

<pre class="smallexample">     #define ceil_div(x, y) (((x) + (y) - 1) / (y))
</pre>
   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
2008, 2009, 2010, 2011
d18 1
a18 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d21 1
a21 1
section entitled "GNU Free Documentation License".
d28 1
a28 1
A GNU Manual
d32 1
a32 1
You have freedom to copy and modify this GNU Manual, like GNU
d34 1
a34 43
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>The C Preprocessor: Operator Precedence Problems</title>

<meta name="description" content="The C Preprocessor: Operator Precedence Problems">
<meta name="keywords" content="The C Preprocessor: Operator Precedence Problems">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Index-of-Directives.html#Index-of-Directives" rel="index" title="Index of Directives">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Macro-Pitfalls.html#Macro-Pitfalls" rel="up" title="Macro Pitfalls">
<link href="Swallowing-the-Semicolon.html#Swallowing-the-Semicolon" rel="next" title="Swallowing the Semicolon">
<link href="Misnesting.html#Misnesting" rel="prev" title="Misnesting">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d36 12
a47 3
</style>


d49 2
a50 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a51 1
<div class="header">
d53 4
a56 1
Next: <a href="Swallowing-the-Semicolon.html#Swallowing-the-Semicolon" accesskey="n" rel="next">Swallowing the Semicolon</a>, Previous: <a href="Misnesting.html#Misnesting" accesskey="p" rel="prev">Misnesting</a>, Up: <a href="Macro-Pitfalls.html#Macro-Pitfalls" accesskey="u" rel="up">Macro Pitfalls</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
d58 1
a58 2
<hr>
<a name="Operator-Precedence-Problems-1"></a>
a59 1
<a name="index-parentheses-in-macro-bodies"></a>
d61 2
a62 1
<p>You may have noticed that in most of the macro definition examples shown
a66 6
</p>
<p>Suppose you define a macro as follows,
</p>
<div class="smallexample">
<pre class="smallexample">#define ceil_div(x, y) (x + y - 1) / y
</pre></div>
d68 5
a72 1
<p>whose purpose is to divide, rounding up.  (One use for this operation is
a74 5
</p>
<div class="smallexample">
<pre class="smallexample">a = ceil_div (b &amp; c, sizeof (int));
     &rarr; a = (b &amp; c + sizeof (int) - 1) / sizeof (int);
</pre></div>
d76 4
a79 1
<p>This does not do what is intended.  The operator-precedence rules of
d81 14
a94 20
</p>
<div class="smallexample">
<pre class="smallexample">a = (b &amp; (c + sizeof (int) - 1)) / sizeof (int);
</pre></div>

<p>What we want is this:
</p>
<div class="smallexample">
<pre class="smallexample">a = ((b &amp; c) + sizeof (int) - 1)) / sizeof (int);
</pre></div>

<p>Defining the macro as
</p>
<div class="smallexample">
<pre class="smallexample">#define ceil_div(x, y) ((x) + (y) - 1) / (y)
</pre></div>

<p>provides the desired result.
</p>
<p>Unintended grouping can result in another way.  Consider <code>sizeof
a97 4
</p>
<div class="smallexample">
<pre class="smallexample">sizeof ((1) + (2) - 1) / (2)
</pre></div>
d99 3
a101 1
<p>This would take the size of an integer and divide it by two.  The
d104 2
a105 2
</p>
<p>Parentheses around the entire macro definition prevent such problems.
a106 11
</p>
<div class="smallexample">
<pre class="smallexample">#define ceil_div(x, y) (((x) + (y) - 1) / (y))
</pre></div>

<hr>
<div class="header">
<p>
Next: <a href="Swallowing-the-Semicolon.html#Swallowing-the-Semicolon" accesskey="n" rel="next">Swallowing the Semicolon</a>, Previous: <a href="Misnesting.html#Misnesting" accesskey="p" rel="prev">Misnesting</a>, Up: <a href="Macro-Pitfalls.html#Macro-Pitfalls" accesskey="u" rel="up">Macro Pitfalls</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
</div>

d108 3
a111 2
</body>
</html>
@

