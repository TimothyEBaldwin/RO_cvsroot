head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.14;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.14;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.17;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Ifdef - The C Preprocessor</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="The C Preprocessor">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Conditional-Syntax.html#Conditional-Syntax" title="Conditional Syntax">
<link rel="next" href="If.html#If" title="If">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005
Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation.  A copy of
the license is included in the
section entitled ``GNU Free Documentation License''.

This manual contains no Invariant Sections.  The Front-Cover Texts are
(a) (see below), and the Back-Cover Texts are (b) (see below).

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.
-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Ifdef"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="If.html#If">If</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Conditional-Syntax.html#Conditional-Syntax">Conditional Syntax</a>
<hr>
</div>

<h4 class="subsection">4.2.1 Ifdef</h4>

<p><a name="index-g_t_0023ifdef-84"></a><a name="index-g_t_0023endif-85"></a>
The simplest sort of conditional is

<pre class="smallexample">     #ifdef <var>MACRO</var>
     
     <var>controlled text</var>
     
     #endif /* <var>MACRO</var> */
</pre>
   <p><a name="index-conditional-group-86"></a>This block is called a <dfn>conditional group</dfn>.  <var>controlled text</var>
will be included in the output of the preprocessor if and only if
<var>MACRO</var> is defined.  We say that the conditional <dfn>succeeds</dfn> if
<var>MACRO</var> is defined, <dfn>fails</dfn> if it is not.

   <p>The <var>controlled text</var> inside of a conditional can include
preprocessing directives.  They are executed only if the conditional
succeeds.  You can nest conditional groups inside other conditional
groups, but they must be completely nested.  In other words,
&lsquo;<samp><span class="samp">#endif</span></samp>&rsquo; always matches the nearest &lsquo;<samp><span class="samp">#ifdef</span></samp>&rsquo; (or
&lsquo;<samp><span class="samp">#ifndef</span></samp>&rsquo;, or &lsquo;<samp><span class="samp">#if</span></samp>&rsquo;).  Also, you cannot start a conditional
group in one file and end it in another.

   <p>Even if a conditional fails, the <var>controlled text</var> inside it is
still run through initial transformations and tokenization.  Therefore,
it must all be lexically valid C.  Normally the only way this matters is
that all comments and string literals inside a failing conditional group
must still be properly ended.

   <p>The comment following the &lsquo;<samp><span class="samp">#endif</span></samp>&rsquo; is not required, but it is a
good practice if there is a lot of <var>controlled text</var>, because it
helps people match the &lsquo;<samp><span class="samp">#endif</span></samp>&rsquo; to the corresponding &lsquo;<samp><span class="samp">#ifdef</span></samp>&rsquo;. 
Older programs sometimes put <var>MACRO</var> directly after the
&lsquo;<samp><span class="samp">#endif</span></samp>&rsquo; without enclosing it in a comment.  This is invalid code
according to the C standard.  CPP accepts it with a warning.  It
never affects which &lsquo;<samp><span class="samp">#ifndef</span></samp>&rsquo; the &lsquo;<samp><span class="samp">#endif</span></samp>&rsquo; matches.

   <p><a name="index-g_t_0023ifndef-87"></a>Sometimes you wish to use some code if a macro is <em>not</em> defined. 
You can do this by writing &lsquo;<samp><span class="samp">#ifndef</span></samp>&rsquo; instead of &lsquo;<samp><span class="samp">#ifdef</span></samp>&rsquo;. 
One common use of &lsquo;<samp><span class="samp">#ifndef</span></samp>&rsquo; is to include code only the first
time a header file is included.  See <a href="Once_002dOnly-Headers.html#Once_002dOnly-Headers">Once-Only Headers</a>.

   <p>Macro definitions can vary between compilations for several reasons. 
Here are some samples.

     <ul>
<li>Some macros are predefined on each kind of machine
(see <a href="System_002dspecific-Predefined-Macros.html#System_002dspecific-Predefined-Macros">System-specific Predefined Macros</a>).  This allows you to provide
code specially tuned for a particular machine.

     <li>System header files define more macros, associated with the features
they implement.  You can test these macros with conditionals to avoid
using a system feature on a machine where it is not implemented.

     <li>Macros can be defined or undefined with the <samp><span class="option">-D</span></samp> and <samp><span class="option">-U</span></samp>
command line options when you compile the program.  You can arrange to
compile the same source file into two different programs by choosing a
macro name to specify which program you want, writing conditionals to
test whether or how this macro is defined, and then controlling the
state of the macro with command line options, perhaps set in the
Makefile.  See <a href="Invocation.html#Invocation">Invocation</a>.

     <li>Your program might have a special header file (often called
<samp><span class="file">config.h</span></samp>) that is adjusted when the program is compiled.  It can
define or not define macros depending on the features of the system and
the desired capabilities of the program.  The adjustment can be
automated by a tool such as <samp><span class="command">autoconf</span></samp>, or done by hand. 
</ul>

   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 13
a13 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
2008, 2009, 2010, 2011
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d20 1
a20 1
section entitled "GNU Free Documentation License".
d27 1
a27 1
A GNU Manual
d31 1
a31 1
You have freedom to copy and modify this GNU Manual, like GNU
d33 1
a33 43
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>The C Preprocessor: Ifdef</title>

<meta name="description" content="The C Preprocessor: Ifdef">
<meta name="keywords" content="The C Preprocessor: Ifdef">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Index-of-Directives.html#Index-of-Directives" rel="index" title="Index of Directives">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Conditional-Syntax.html#Conditional-Syntax" rel="up" title="Conditional Syntax">
<link href="If.html#If" rel="next" title="If">
<link href="Conditional-Syntax.html#Conditional-Syntax" rel="prev" title="Conditional Syntax">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d35 12
a46 3
</style>


d48 2
a49 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a50 1
<div class="header">
d52 3
a54 1
Next: <a href="If.html#If" accesskey="n" rel="next">If</a>, Up: <a href="Conditional-Syntax.html#Conditional-Syntax" accesskey="u" rel="up">Conditional Syntax</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
d56 1
a56 2
<hr>
<a name="Ifdef-1"></a>
a57 2
<a name="index-_0023ifdef"></a>
<a name="index-_0023endif"></a>
d59 2
a60 4
<p>The simplest sort of conditional is
</p>
<div class="smallexample">
<pre class="smallexample">#ifdef <var>MACRO</var>
d62 10
a71 1
<var>controlled text</var>
d73 1
a73 10
#endif /* <var>MACRO</var> */
</pre></div>

<a name="index-conditional-group"></a>
<p>This block is called a <em>conditional group</em>.  <var>controlled text</var>
will be included in the output of the preprocessor if and only if
<var>MACRO</var> is defined.  We say that the conditional <em>succeeds</em> if
<var>MACRO</var> is defined, <em>fails</em> if it is not.
</p>
<p>The <var>controlled text</var> inside of a conditional can include
d77 2
a78 2
&lsquo;<samp>#endif</samp>&rsquo; always matches the nearest &lsquo;<samp>#ifdef</samp>&rsquo; (or
&lsquo;<samp>#ifndef</samp>&rsquo;, or &lsquo;<samp>#if</samp>&rsquo;).  Also, you cannot start a conditional
d80 2
a81 2
</p>
<p>Even if a conditional fails, the <var>controlled text</var> inside it is
d86 2
a87 2
</p>
<p>The comment following the &lsquo;<samp>#endif</samp>&rsquo; is not required, but it is a
d89 1
a89 1
helps people match the &lsquo;<samp>#endif</samp>&rsquo; to the corresponding &lsquo;<samp>#ifdef</samp>&rsquo;.
d91 1
a91 1
&lsquo;<samp>#endif</samp>&rsquo; without enclosing it in a comment.  This is invalid code
d93 5
a97 6
never affects which &lsquo;<samp>#ifndef</samp>&rsquo; the &lsquo;<samp>#endif</samp>&rsquo; matches.
</p>
<a name="index-_0023ifndef"></a>
<p>Sometimes you wish to use some code if a macro is <em>not</em> defined.
You can do this by writing &lsquo;<samp>#ifndef</samp>&rsquo; instead of &lsquo;<samp>#ifdef</samp>&rsquo;.
One common use of &lsquo;<samp>#ifndef</samp>&rsquo; is to include code only the first
d99 2
a100 2
</p>
<p>Macro definitions can vary between compilations for several reasons.
d102 3
a104 3
</p>
<ul>
<li> Some macros are predefined on each kind of machine
d108 1
a108 1
</li><li> System header files define more macros, associated with the features
d112 1
a112 1
</li><li> Macros can be defined or undefined with the <samp>-D</samp> and <samp>-U</samp>
d120 2
a121 2
</li><li> Your program might have a special header file (often called
<samp>config.h</samp>) that is adjusted when the program is compiled.  It can
d124 2
a125 9
automated by a tool such as <code>autoconf</code>, or done by hand.
</li></ul>

<hr>
<div class="header">
<p>
Next: <a href="If.html#If" accesskey="n" rel="next">If</a>, Up: <a href="Conditional-Syntax.html#Conditional-Syntax" accesskey="u" rel="up">Conditional Syntax</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
</div>

d127 1
a128 2
</body>
</html>
@

