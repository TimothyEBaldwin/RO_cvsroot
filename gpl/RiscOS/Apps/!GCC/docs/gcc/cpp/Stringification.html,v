head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.14;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.14;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.17;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Stringification - The C Preprocessor</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="The C Preprocessor">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Macros.html#Macros" title="Macros">
<link rel="prev" href="Macro-Arguments.html#Macro-Arguments" title="Macro Arguments">
<link rel="next" href="Concatenation.html#Concatenation" title="Concatenation">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005
Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation.  A copy of
the license is included in the
section entitled ``GNU Free Documentation License''.

This manual contains no Invariant Sections.  The Front-Cover Texts are
(a) (see below), and the Back-Cover Texts are (b) (see below).

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.
-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Stringification"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Concatenation.html#Concatenation">Concatenation</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Macro-Arguments.html#Macro-Arguments">Macro Arguments</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Macros.html#Macros">Macros</a>
<hr>
</div>

<h3 class="section">3.4 Stringification</h3>

<p><a name="index-stringification-49"></a><a name="index-g_t_0040samp_007b_0023_007d-operator-50"></a>
Sometimes you may want to convert a macro argument into a string
constant.  Parameters are not replaced inside string constants, but you
can use the &lsquo;<samp><span class="samp">#</span></samp>&rsquo; preprocessing operator instead.  When a macro
parameter is used with a leading &lsquo;<samp><span class="samp">#</span></samp>&rsquo;, the preprocessor replaces it
with the literal text of the actual argument, converted to a string
constant.  Unlike normal parameter replacement, the argument is not
macro-expanded first.  This is called <dfn>stringification</dfn>.

   <p>There is no way to combine an argument with surrounding text and
stringify it all together.  Instead, you can write a series of adjacent
string constants and stringified arguments.  The preprocessor will
replace the stringified arguments with string constants.  The C
compiler will then combine all the adjacent string constants into one
long string.

   <p>Here is an example of a macro definition that uses stringification:

<pre class="smallexample">     #define WARN_IF(EXP) \
     do { if (EXP) \
             fprintf (stderr, "Warning: " #EXP "\n"); } \
     while (0)
     WARN_IF (x == 0);
          ==&gt; do { if (x == 0)
                fprintf (stderr, "Warning: " "x == 0" "\n"); } while (0);
</pre>
   <p class="noindent">The argument for <code>EXP</code> is substituted once, as-is, into the
<code>if</code> statement, and once, stringified, into the argument to
<code>fprintf</code>.  If <code>x</code> were a macro, it would be expanded in the
<code>if</code> statement, but not in the string.

   <p>The <code>do</code> and <code>while (0)</code> are a kludge to make it possible to
write <code>WARN_IF (</code><var>arg</var><code>);</code>, which the resemblance of
<code>WARN_IF</code> to a function would make C programmers want to do; see
<a href="Swallowing-the-Semicolon.html#Swallowing-the-Semicolon">Swallowing the Semicolon</a>.

   <p>Stringification in C involves more than putting double-quote characters
around the fragment.  The preprocessor backslash-escapes the quotes
surrounding embedded string constants, and all backslashes within string and
character constants, in order to get a valid C string constant with the
proper contents.  Thus, stringifying <code>p&nbsp;=&nbsp;"foo\n";<!-- /@@w --></code> results in
<tt>"p&nbsp;=&nbsp;\"foo\\n\";"<!-- /@@w --></tt>.  However, backslashes that are not inside string
or character constants are not duplicated: &lsquo;<samp><span class="samp">\n</span></samp>&rsquo; by itself
stringifies to <tt>"\n"</tt>.

   <p>All leading and trailing whitespace in text being stringified is
ignored.  Any sequence of whitespace in the middle of the text is
converted to a single space in the stringified result.  Comments are
replaced by whitespace long before stringification happens, so they
never appear in stringified text.

   <p>There is no way to convert a macro argument into a character constant.

   <p>If you want to stringify the result of expansion of a macro argument,
you have to use two levels of macros.

<pre class="smallexample">     #define xstr(s) str(s)
     #define str(s) #s
     #define foo 4
     str (foo)
          ==&gt; "foo"
     xstr (foo)
          ==&gt; xstr (4)
          ==&gt; str (4)
          ==&gt; "4"
</pre>
   <p><code>s</code> is stringified when it is used in <code>str</code>, so it is not
macro-expanded first.  But <code>s</code> is an ordinary argument to
<code>xstr</code>, so it is completely macro-expanded before <code>xstr</code>
itself is expanded (see <a href="Argument-Prescan.html#Argument-Prescan">Argument Prescan</a>).  Therefore, by the time
<code>str</code> gets to its argument, it has already been macro-expanded.

   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
2008, 2009, 2010, 2011
d18 1
a18 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d21 1
a21 1
section entitled "GNU Free Documentation License".
d28 1
a28 1
A GNU Manual
d32 1
a32 1
You have freedom to copy and modify this GNU Manual, like GNU
d34 1
a34 43
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>The C Preprocessor: Stringification</title>

<meta name="description" content="The C Preprocessor: Stringification">
<meta name="keywords" content="The C Preprocessor: Stringification">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Index-of-Directives.html#Index-of-Directives" rel="index" title="Index of Directives">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Macros.html#Macros" rel="up" title="Macros">
<link href="Concatenation.html#Concatenation" rel="next" title="Concatenation">
<link href="Macro-Arguments.html#Macro-Arguments" rel="prev" title="Macro Arguments">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d36 12
a47 3
</style>


d49 2
a50 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a51 1
<div class="header">
d53 4
a56 1
Next: <a href="Concatenation.html#Concatenation" accesskey="n" rel="next">Concatenation</a>, Previous: <a href="Macro-Arguments.html#Macro-Arguments" accesskey="p" rel="prev">Macro Arguments</a>, Up: <a href="Macros.html#Macros" accesskey="u" rel="up">Macros</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
d58 1
a58 2
<hr>
<a name="Stringification-1"></a>
a59 2
<a name="index-stringification"></a>
<a name="index-_0023-operator"></a>
d61 2
a62 1
<p>Sometimes you may want to convert a macro argument into a string
d64 2
a65 2
can use the &lsquo;<samp>#</samp>&rsquo; preprocessing operator instead.  When a macro
parameter is used with a leading &lsquo;<samp>#</samp>&rsquo;, the preprocessor replaces it
d68 3
a70 3
macro-expanded first.  This is called <em>stringification</em>.
</p>
<p>There is no way to combine an argument with surrounding text and
a75 12
</p>
<p>Here is an example of a macro definition that uses stringification:
</p>
<div class="smallexample">
<pre class="smallexample">#define WARN_IF(EXP) \
do { if (EXP) \
        fprintf (stderr, &quot;Warning: &quot; #EXP &quot;\n&quot;); } \
while (0)
WARN_IF (x == 0);
     &rarr; do { if (x == 0)
           fprintf (stderr, &quot;Warning: &quot; &quot;x == 0&quot; &quot;\n&quot;); } while (0);
</pre></div>
d77 11
a87 1
<p>The argument for <code>EXP</code> is substituted once, as-is, into the
d91 3
a93 3
</p>
<p>The <code>do</code> and <code>while (0)</code> are a kludge to make it possible to
write <code>WARN_IF (<var>arg</var>);</code>, which the resemblance of
d96 2
a97 2
</p>
<p>Stringification in C involves more than putting double-quote characters
d101 6
a106 6
proper contents.  Thus, stringifying <code>p&nbsp;=&nbsp;&quot;foo\n&quot;;<!-- /@@w --></code> results in
<tt>&quot;p&nbsp;=&nbsp;\&quot;foo\\n\&quot;;&quot;<!-- /@@w --></tt>.  However, backslashes that are not inside string
or character constants are not duplicated: &lsquo;<samp>\n</samp>&rsquo; by itself
stringifies to <tt>&quot;\n&quot;</tt>.
</p>
<p>All leading and trailing whitespace in text being stringified is
d111 4
a114 4
</p>
<p>There is no way to convert a macro argument into a character constant.
</p>
<p>If you want to stringify the result of expansion of a macro argument,
a115 12
</p>
<div class="smallexample">
<pre class="smallexample">#define xstr(s) str(s)
#define str(s) #s
#define foo 4
str (foo)
     &rarr; &quot;foo&quot;
xstr (foo)
     &rarr; xstr (4)
     &rarr; str (4)
     &rarr; &quot;4&quot;
</pre></div>
d117 11
a127 1
<p><code>s</code> is stringified when it is used in <code>str</code>, so it is not
a131 7
</p>
<hr>
<div class="header">
<p>
Next: <a href="Concatenation.html#Concatenation" accesskey="n" rel="next">Concatenation</a>, Previous: <a href="Macro-Arguments.html#Macro-Arguments" accesskey="p" rel="prev">Macro Arguments</a>, Up: <a href="Macros.html#Macros" accesskey="u" rel="up">Macros</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
</div>

d133 1
a134 2
</body>
</html>
@

