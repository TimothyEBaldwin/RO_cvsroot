head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.15;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.15;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.18;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Traditional lexical analysis - The C Preprocessor</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="The C Preprocessor">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Traditional-Mode.html#Traditional-Mode" title="Traditional Mode">
<link rel="next" href="Traditional-macros.html#Traditional-macros" title="Traditional macros">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005
Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation.  A copy of
the license is included in the
section entitled ``GNU Free Documentation License''.

This manual contains no Invariant Sections.  The Front-Cover Texts are
(a) (see below), and the Back-Cover Texts are (b) (see below).

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.
-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Traditional-lexical-analysis"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Traditional-macros.html#Traditional-macros">Traditional macros</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Traditional-Mode.html#Traditional-Mode">Traditional Mode</a>
<hr>
</div>

<h3 class="section">10.1 Traditional lexical analysis</h3>

<p>The traditional preprocessor does not decompose its input into tokens
the same way a standards-conforming preprocessor does.  The input is
simply treated as a stream of text with minimal internal form.

   <p>This implementation does not treat trigraphs (see <a href="trigraphs.html#trigraphs">trigraphs</a>)
specially since they were an invention of the standards committee.  It
handles arbitrarily-positioned escaped newlines properly and splices
the lines as you would expect; many traditional preprocessors did not
do this.

   <p>The form of horizontal whitespace in the input file is preserved in
the output.  In particular, hard tabs remain hard tabs.  This can be
useful if, for example, you are preprocessing a Makefile.

   <p>Traditional CPP only recognizes C-style block comments, and treats the
&lsquo;<samp><span class="samp">/*</span></samp>&rsquo; sequence as introducing a comment only if it lies outside
quoted text.  Quoted text is introduced by the usual single and double
quotes, and also by an initial &lsquo;<samp><span class="samp">&lt;</span></samp>&rsquo; in a <code>#include</code>
directive.

   <p>Traditionally, comments are completely removed and are not replaced
with a space.  Since a traditional compiler does its own tokenization
of the output of the preprocessor, this means that comments can
effectively be used as token paste operators.  However, comments
behave like separators for text handled by the preprocessor itself,
since it doesn't re-lex its input.  For example, in

<pre class="smallexample">     #if foo/**/bar
</pre>
   <p class="noindent">&lsquo;<samp><span class="samp">foo</span></samp>&rsquo; and &lsquo;<samp><span class="samp">bar</span></samp>&rsquo; are distinct identifiers and expanded
separately if they happen to be macros.  In other words, this
directive is equivalent to

<pre class="smallexample">     #if foo bar
</pre>
   <p class="noindent">rather than

<pre class="smallexample">     #if foobar
</pre>
   <p>Generally speaking, in traditional mode an opening quote need not have
a matching closing quote.  In particular, a macro may be defined with
replacement text that contains an unmatched quote.  Of course, if you
attempt to compile preprocessed output containing an unmatched quote
you will get a syntax error.

   <p>However, all preprocessing directives other than <code>#define</code>
require matching quotes.  For example:

<pre class="smallexample">     #define m This macro's fine and has an unmatched quote
     "/* This is not a comment.  */
     /* <span class="roman">This is a comment.  The following #include directive
        is ill-formed.</span>  */
     #include &lt;stdio.h
</pre>
   <p>Just as for the ISO preprocessor, what would be a closing quote can be
escaped with a backslash to prevent the quoted text from closing.

   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 13
a13 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
2008, 2009, 2010, 2011
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d20 1
a20 1
section entitled "GNU Free Documentation License".
d27 1
a27 1
A GNU Manual
d31 1
a31 1
You have freedom to copy and modify this GNU Manual, like GNU
d33 1
a33 43
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>The C Preprocessor: Traditional lexical analysis</title>

<meta name="description" content="The C Preprocessor: Traditional lexical analysis">
<meta name="keywords" content="The C Preprocessor: Traditional lexical analysis">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Index-of-Directives.html#Index-of-Directives" rel="index" title="Index of Directives">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Traditional-Mode.html#Traditional-Mode" rel="up" title="Traditional Mode">
<link href="Traditional-macros.html#Traditional-macros" rel="next" title="Traditional macros">
<link href="Traditional-Mode.html#Traditional-Mode" rel="prev" title="Traditional Mode">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d35 12
a46 3
</style>


d48 2
a49 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a50 1
<div class="header">
d52 3
a54 1
Next: <a href="Traditional-macros.html#Traditional-macros" accesskey="n" rel="next">Traditional macros</a>, Up: <a href="Traditional-Mode.html#Traditional-Mode" accesskey="u" rel="up">Traditional Mode</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
d56 1
a56 2
<hr>
<a name="Traditional-lexical-analysis-1"></a>
d62 2
a63 2
</p>
<p>This implementation does not treat trigraphs (see <a href="Initial-processing.html#trigraphs">trigraphs</a>)
d68 2
a69 2
</p>
<p>The form of horizontal whitespace in the input file is preserved in
d72 3
a74 3
</p>
<p>Traditional CPP only recognizes C-style block comments, and treats the
&lsquo;<samp>/*</samp>&rsquo; sequence as introducing a comment only if it lies outside
d76 1
a76 1
quotes, and also by an initial &lsquo;<samp>&lt;</samp>&rsquo; in a <code>#include</code>
d78 2
a79 2
</p>
<p>Traditionally, comments are completely removed and are not replaced
d84 1
a84 5
since it doesn&rsquo;t re-lex its input.  For example, in
</p>
<div class="smallexample">
<pre class="smallexample">#if foo/**/bar
</pre></div>
d86 3
a88 1
<p>&lsquo;<samp>foo</samp>&rsquo; and &lsquo;<samp>bar</samp>&rsquo; are distinct identifiers and expanded
a90 10
</p>
<div class="smallexample">
<pre class="smallexample">#if foo bar
</pre></div>

<p>rather than
</p>
<div class="smallexample">
<pre class="smallexample">#if foobar
</pre></div>
d92 7
a98 1
<p>Generally speaking, in traditional mode an opening quote need not have
d103 2
a104 2
</p>
<p>However, all preprocessing directives other than <code>#define</code>
a105 8
</p>
<div class="smallexample">
<pre class="smallexample">#define m This macro's fine and has an unmatched quote
&quot;/* This is not a comment.  */
/* <span class="roman">This is a comment.  The following #include directive
   is ill-formed.</span>  */
#include &lt;stdio.h
</pre></div>
d107 7
a113 1
<p>Just as for the ISO preprocessor, what would be a closing quote can be
a114 7
</p>
<hr>
<div class="header">
<p>
Next: <a href="Traditional-macros.html#Traditional-macros" accesskey="n" rel="next">Traditional macros</a>, Up: <a href="Traditional-Mode.html#Traditional-Mode" accesskey="u" rel="up">Traditional Mode</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
</div>

d116 1
a117 2
</body>
</html>
@

