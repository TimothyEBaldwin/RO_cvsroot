head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.15;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.15;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.18;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Undefining and Redefining Macros - The C Preprocessor</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="The C Preprocessor">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Macros.html#Macros" title="Macros">
<link rel="prev" href="Predefined-Macros.html#Predefined-Macros" title="Predefined Macros">
<link rel="next" href="Directives-Within-Macro-Arguments.html#Directives-Within-Macro-Arguments" title="Directives Within Macro Arguments">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005
Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation.  A copy of
the license is included in the
section entitled ``GNU Free Documentation License''.

This manual contains no Invariant Sections.  The Front-Cover Texts are
(a) (see below), and the Back-Cover Texts are (b) (see below).

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.
-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Undefining-and-Redefining-Macros"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Directives-Within-Macro-Arguments.html#Directives-Within-Macro-Arguments">Directives Within Macro Arguments</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Predefined-Macros.html#Predefined-Macros">Predefined Macros</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Macros.html#Macros">Macros</a>
<hr>
</div>

<h3 class="section">3.8 Undefining and Redefining Macros</h3>

<p><a name="index-undefining-macros-67"></a><a name="index-redefining-macros-68"></a><a name="index-g_t_0023undef-69"></a>
If a macro ceases to be useful, it may be <dfn>undefined</dfn> with the
&lsquo;<samp><span class="samp">#undef</span></samp>&rsquo; directive.  &lsquo;<samp><span class="samp">#undef</span></samp>&rsquo; takes a single argument, the
name of the macro to undefine.  You use the bare macro name, even if the
macro is function-like.  It is an error if anything appears on the line
after the macro name.  &lsquo;<samp><span class="samp">#undef</span></samp>&rsquo; has no effect if the name is not a
macro.

<pre class="smallexample">     #define FOO 4
     x = FOO;        ==&gt; x = 4;
     #undef FOO
     x = FOO;        ==&gt; x = FOO;
</pre>
   <p>Once a macro has been undefined, that identifier may be <dfn>redefined</dfn>
as a macro by a subsequent &lsquo;<samp><span class="samp">#define</span></samp>&rsquo; directive.  The new definition
need not have any resemblance to the old definition.

   <p>However, if an identifier which is currently a macro is redefined, then
the new definition must be <dfn>effectively the same</dfn> as the old one. 
Two macro definitions are effectively the same if:
     <ul>
<li>Both are the same type of macro (object- or function-like). 
<li>All the tokens of the replacement list are the same. 
<li>If there are any parameters, they are the same. 
<li>Whitespace appears in the same places in both.  It need not be
exactly the same amount of whitespace, though.  Remember that comments
count as whitespace. 
</ul>

<p class="noindent">These definitions are effectively the same:
<pre class="smallexample">     #define FOUR (2 + 2)
     #define FOUR         (2    +    2)
     #define FOUR (2 /* <span class="roman">two</span> */ + 2)
</pre>
   <p class="noindent">but these are not:
<pre class="smallexample">     #define FOUR (2 + 2)
     #define FOUR ( 2+2 )
     #define FOUR (2 * 2)
     #define FOUR(score,and,seven,years,ago) (2 + 2)
</pre>
   <p>If a macro is redefined with a definition that is not effectively the
same as the old one, the preprocessor issues a warning and changes the
macro to use the new definition.  If the new definition is effectively
the same, the redefinition is silently ignored.  This allows, for
instance, two different headers to define a common macro.  The
preprocessor will only complain if the definitions do not match.

   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
2008, 2009, 2010, 2011
d18 1
a18 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d21 1
a21 1
section entitled "GNU Free Documentation License".
d28 1
a28 1
A GNU Manual
d32 1
a32 1
You have freedom to copy and modify this GNU Manual, like GNU
d34 1
a34 43
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>The C Preprocessor: Undefining and Redefining Macros</title>

<meta name="description" content="The C Preprocessor: Undefining and Redefining Macros">
<meta name="keywords" content="The C Preprocessor: Undefining and Redefining Macros">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Index-of-Directives.html#Index-of-Directives" rel="index" title="Index of Directives">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Macros.html#Macros" rel="up" title="Macros">
<link href="Directives-Within-Macro-Arguments.html#Directives-Within-Macro-Arguments" rel="next" title="Directives Within Macro Arguments">
<link href="C_002b_002b-Named-Operators.html#C_002b_002b-Named-Operators" rel="prev" title="C++ Named Operators">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d36 12
a47 3
</style>


d49 2
a50 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a51 1
<div class="header">
d53 4
a56 1
Next: <a href="Directives-Within-Macro-Arguments.html#Directives-Within-Macro-Arguments" accesskey="n" rel="next">Directives Within Macro Arguments</a>, Previous: <a href="Predefined-Macros.html#Predefined-Macros" accesskey="p" rel="prev">Predefined Macros</a>, Up: <a href="Macros.html#Macros" accesskey="u" rel="up">Macros</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
d58 1
a58 2
<hr>
<a name="Undefining-and-Redefining-Macros-1"></a>
a59 3
<a name="index-undefining-macros"></a>
<a name="index-redefining-macros"></a>
<a name="index-_0023undef"></a>
d61 3
a63 2
<p>If a macro ceases to be useful, it may be <em>undefined</em> with the
&lsquo;<samp>#undef</samp>&rsquo; directive.  &lsquo;<samp>#undef</samp>&rsquo; takes a single argument, the
d66 1
a66 1
after the macro name.  &lsquo;<samp>#undef</samp>&rsquo; has no effect if the name is not a
a67 7
</p>
<div class="smallexample">
<pre class="smallexample">#define FOO 4
x = FOO;        &rarr; x = 4;
#undef FOO
x = FOO;        &rarr; x = FOO;
</pre></div>
d69 7
a75 2
<p>Once a macro has been undefined, that identifier may be <em>redefined</em>
as a macro by a subsequent &lsquo;<samp>#define</samp>&rsquo; directive.  The new definition
d77 3
a79 3
</p>
<p>However, if an identifier which is currently a macro is redefined, then
the new definition must be <em>effectively the same</em> as the old one.
d81 5
a85 5
</p><ul>
<li> Both are the same type of macro (object- or function-like).
</li><li> All the tokens of the replacement list are the same.
</li><li> If there are any parameters, they are the same.
</li><li> Whitespace appears in the same places in both.  It need not be
d87 2
a88 16
count as whitespace.
</li></ul>

<p>These definitions are effectively the same:
</p><div class="smallexample">
<pre class="smallexample">#define FOUR (2 + 2)
#define FOUR         (2    +    2)
#define FOUR (2 /* <span class="roman">two</span> */ + 2)
</pre></div>
<p>but these are not:
</p><div class="smallexample">
<pre class="smallexample">#define FOUR (2 + 2)
#define FOUR ( 2+2 )
#define FOUR (2 * 2)
#define FOUR(score,and,seven,years,ago) (2 + 2)
</pre></div>
d90 12
a101 1
<p>If a macro is redefined with a definition that is not effectively the
a106 7
</p>
<hr>
<div class="header">
<p>
Next: <a href="Directives-Within-Macro-Arguments.html#Directives-Within-Macro-Arguments" accesskey="n" rel="next">Directives Within Macro Arguments</a>, Previous: <a href="Predefined-Macros.html#Predefined-Macros" accesskey="p" rel="prev">Predefined Macros</a>, Up: <a href="Macros.html#Macros" accesskey="u" rel="up">Macros</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
</div>

d108 1
a109 2
</body>
</html>
@

