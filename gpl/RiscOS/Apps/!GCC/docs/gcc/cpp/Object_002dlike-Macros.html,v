head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.14;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.14;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.17;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Object-like Macros - The C Preprocessor</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="The C Preprocessor">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Macros.html#Macros" title="Macros">
<link rel="next" href="Function_002dlike-Macros.html#Function_002dlike-Macros" title="Function-like Macros">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005
Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation.  A copy of
the license is included in the
section entitled ``GNU Free Documentation License''.

This manual contains no Invariant Sections.  The Front-Cover Texts are
(a) (see below), and the Back-Cover Texts are (b) (see below).

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.
-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Object-like-Macros"></a>
<a name="Object_002dlike-Macros"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Function_002dlike-Macros.html#Function_002dlike-Macros">Function-like Macros</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Macros.html#Macros">Macros</a>
<hr>
</div>

<h3 class="section">3.1 Object-like Macros</h3>

<p><a name="index-object_002dlike-macro-40"></a><a name="index-symbolic-constants-41"></a><a name="index-manifest-constants-42"></a>
An <dfn>object-like macro</dfn> is a simple identifier which will be replaced
by a code fragment.  It is called object-like because it looks like a
data object in code that uses it.  They are most commonly used to give
symbolic names to numeric constants.

   <p><a name="index-g_t_0023define-43"></a>You create macros with the &lsquo;<samp><span class="samp">#define</span></samp>&rsquo; directive.  &lsquo;<samp><span class="samp">#define</span></samp>&rsquo; is
followed by the name of the macro and then the token sequence it should
be an abbreviation for, which is variously referred to as the macro's
<dfn>body</dfn>, <dfn>expansion</dfn> or <dfn>replacement list</dfn>.  For example,

<pre class="smallexample">     #define BUFFER_SIZE 1024
</pre>
   <p class="noindent">defines a macro named <code>BUFFER_SIZE</code> as an abbreviation for the
token <code>1024</code>.  If somewhere after this &lsquo;<samp><span class="samp">#define</span></samp>&rsquo; directive
there comes a C statement of the form

<pre class="smallexample">     foo = (char *) malloc (BUFFER_SIZE);
</pre>
   <p class="noindent">then the C preprocessor will recognize and <dfn>expand</dfn> the macro
<code>BUFFER_SIZE</code>.  The C compiler will see the same tokens as it would
if you had written

<pre class="smallexample">     foo = (char *) malloc (1024);
</pre>
   <p>By convention, macro names are written in uppercase.  Programs are
easier to read when it is possible to tell at a glance which names are
macros.

   <p>The macro's body ends at the end of the &lsquo;<samp><span class="samp">#define</span></samp>&rsquo; line.  You may
continue the definition onto multiple lines, if necessary, using
backslash-newline.  When the macro is expanded, however, it will all
come out on one line.  For example,

<pre class="smallexample">     #define NUMBERS 1, \
                     2, \
                     3
     int x[] = { NUMBERS };
          ==&gt; int x[] = { 1, 2, 3 };
</pre>
   <p class="noindent">The most common visible consequence of this is surprising line numbers
in error messages.

   <p>There is no restriction on what can go in a macro body provided it
decomposes into valid preprocessing tokens.  Parentheses need not
balance, and the body need not resemble valid C code.  (If it does not,
you may get error messages from the C compiler when you use the macro.)

   <p>The C preprocessor scans your program sequentially.  Macro definitions
take effect at the place you write them.  Therefore, the following input
to the C preprocessor

<pre class="smallexample">     foo = X;
     #define X 4
     bar = X;
</pre>
   <p class="noindent">produces

<pre class="smallexample">     foo = X;
     bar = 4;
</pre>
   <p>When the preprocessor expands a macro name, the macro's expansion
replaces the macro invocation, then the expansion is examined for more
macros to expand.  For example,

<pre class="smallexample">     #define TABLESIZE BUFSIZE
     #define BUFSIZE 1024
     TABLESIZE
          ==&gt; BUFSIZE
          ==&gt; 1024
</pre>
   <p class="noindent"><code>TABLESIZE</code> is expanded first to produce <code>BUFSIZE</code>, then that
macro is expanded to produce the final result, <code>1024</code>.

   <p>Notice that <code>BUFSIZE</code> was not defined when <code>TABLESIZE</code> was
defined.  The &lsquo;<samp><span class="samp">#define</span></samp>&rsquo; for <code>TABLESIZE</code> uses exactly the
expansion you specify&mdash;in this case, <code>BUFSIZE</code>&mdash;and does not
check to see whether it too contains macro names.  Only when you
<em>use</em> <code>TABLESIZE</code> is the result of its expansion scanned for
more macro names.

   <p>This makes a difference if you change the definition of <code>BUFSIZE</code>
at some point in the source file.  <code>TABLESIZE</code>, defined as shown,
will always expand using the definition of <code>BUFSIZE</code> that is
currently in effect:

<pre class="smallexample">     #define BUFSIZE 1020
     #define TABLESIZE BUFSIZE
     #undef BUFSIZE
     #define BUFSIZE 37
</pre>
   <p class="noindent">Now <code>TABLESIZE</code> expands (in two stages) to <code>37</code>.

   <p>If the expansion of a macro contains its own name, either directly or
via intermediate macros, it is not expanded again when the expansion is
examined for more macros.  This prevents infinite recursion. 
See <a href="Self_002dReferential-Macros.html#Self_002dReferential-Macros">Self-Referential Macros</a>, for the precise details.

   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 13
a13 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
2008, 2009, 2010, 2011
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d20 1
a20 1
section entitled "GNU Free Documentation License".
d27 1
a27 1
A GNU Manual
d31 1
a31 1
You have freedom to copy and modify this GNU Manual, like GNU
d33 1
a33 43
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>The C Preprocessor: Object-like Macros</title>

<meta name="description" content="The C Preprocessor: Object-like Macros">
<meta name="keywords" content="The C Preprocessor: Object-like Macros">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Index-of-Directives.html#Index-of-Directives" rel="index" title="Index of Directives">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Macros.html#Macros" rel="up" title="Macros">
<link href="Function_002dlike-Macros.html#Function_002dlike-Macros" rel="next" title="Function-like Macros">
<link href="Macros.html#Macros" rel="prev" title="Macros">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d35 12
a46 3
</style>


d48 3
a50 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a51 1
<div class="header">
d53 3
a55 1
Next: <a href="Function_002dlike-Macros.html#Function_002dlike-Macros" accesskey="n" rel="next">Function-like Macros</a>, Up: <a href="Macros.html#Macros" accesskey="u" rel="up">Macros</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
d57 1
a57 2
<hr>
<a name="Object_002dlike-Macros-1"></a>
a58 3
<a name="index-object_002dlike-macro"></a>
<a name="index-symbolic-constants"></a>
<a name="index-manifest-constants"></a>
d60 2
a61 1
<p>An <em>object-like macro</em> is a simple identifier which will be replaced
d65 2
a66 3
</p>
<a name="index-_0023define"></a>
<p>You create macros with the &lsquo;<samp>#define</samp>&rsquo; directive.  &lsquo;<samp>#define</samp>&rsquo; is
d68 2
a69 6
be an abbreviation for, which is variously referred to as the macro&rsquo;s
<em>body</em>, <em>expansion</em> or <em>replacement list</em>.  For example,
</p>
<div class="smallexample">
<pre class="smallexample">#define BUFFER_SIZE 1024
</pre></div>
d71 4
a74 2
<p>defines a macro named <code>BUFFER_SIZE</code> as an abbreviation for the
token <code>1024</code>.  If somewhere after this &lsquo;<samp>#define</samp>&rsquo; directive
a75 4
</p>
<div class="smallexample">
<pre class="smallexample">foo = (char *) malloc (BUFFER_SIZE);
</pre></div>
d77 3
a79 1
<p>then the C preprocessor will recognize and <em>expand</em> the macro
a81 4
</p>
<div class="smallexample">
<pre class="smallexample">foo = (char *) malloc (1024);
</pre></div>
d83 3
a85 1
<p>By convention, macro names are written in uppercase.  Programs are
d88 2
a89 2
</p>
<p>The macro&rsquo;s body ends at the end of the &lsquo;<samp>#define</samp>&rsquo; line.  You may
a92 8
</p>
<div class="smallexample">
<pre class="smallexample">#define NUMBERS 1, \
                2, \
                3
int x[] = { NUMBERS };
     &rarr; int x[] = { 1, 2, 3 };
</pre></div>
d94 7
a100 1
<p>The most common visible consequence of this is surprising line numbers
d102 2
a103 2
</p>
<p>There is no restriction on what can go in a macro body provided it
d107 2
a108 2
</p>
<p>The C preprocessor scans your program sequentially.  Macro definitions
a110 13
</p>
<div class="smallexample">
<pre class="smallexample">foo = X;
#define X 4
bar = X;
</pre></div>

<p>produces
</p>
<div class="smallexample">
<pre class="smallexample">foo = X;
bar = 4;
</pre></div>
d112 10
a121 1
<p>When the preprocessor expands a macro name, the macro&rsquo;s expansion
a123 8
</p>
<div class="smallexample">
<pre class="smallexample">#define TABLESIZE BUFSIZE
#define BUFSIZE 1024
TABLESIZE
     &rarr; BUFSIZE
     &rarr; 1024
</pre></div>
d125 7
a131 1
<p><code>TABLESIZE</code> is expanded first to produce <code>BUFSIZE</code>, then that
d133 3
a135 3
</p>
<p>Notice that <code>BUFSIZE</code> was not defined when <code>TABLESIZE</code> was
defined.  The &lsquo;<samp>#define</samp>&rsquo; for <code>TABLESIZE</code> uses exactly the
d140 2
a141 2
</p>
<p>This makes a difference if you change the definition of <code>BUFSIZE</code>
d145 9
a153 11
</p>
<div class="smallexample">
<pre class="smallexample">#define BUFSIZE 1020
#define TABLESIZE BUFSIZE
#undef BUFSIZE
#define BUFSIZE 37
</pre></div>

<p>Now <code>TABLESIZE</code> expands (in two stages) to <code>37</code>.
</p>
<p>If the expansion of a macro contains its own name, either directly or
d155 1
a155 1
examined for more macros.  This prevents infinite recursion.
a156 7
</p>
<hr>
<div class="header">
<p>
Next: <a href="Function_002dlike-Macros.html#Function_002dlike-Macros" accesskey="n" rel="next">Function-like Macros</a>, Up: <a href="Macros.html#Macros" accesskey="u" rel="up">Macros</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
</div>

d158 1
a159 2
</body>
</html>
@

