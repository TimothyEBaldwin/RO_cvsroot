head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.15;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.15;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.18;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Implementation-defined behavior - The C Preprocessor</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="The C Preprocessor">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Implementation-Details.html#Implementation-Details" title="Implementation Details">
<link rel="next" href="Implementation-limits.html#Implementation-limits" title="Implementation limits">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005
Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation.  A copy of
the license is included in the
section entitled ``GNU Free Documentation License''.

This manual contains no Invariant Sections.  The Front-Cover Texts are
(a) (see below), and the Back-Cover Texts are (b) (see below).

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.
-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Implementation-defined-behavior"></a>
<a name="Implementation_002ddefined-behavior"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Implementation-limits.html#Implementation-limits">Implementation limits</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Implementation-Details.html#Implementation-Details">Implementation Details</a>
<hr>
</div>

<h3 class="section">11.1 Implementation-defined behavior</h3>

<p><a name="index-implementation_002ddefined-behavior-108"></a>
This is how CPP behaves in all the cases which the C standard
describes as <dfn>implementation-defined</dfn>.  This term means that the
implementation is free to do what it likes, but must document its choice
and stick to it. 
<!-- FIXME: Check the C++ standard for more implementation-defined stuff. -->

     <ul>
<li>The mapping of physical source file multi-byte characters to the
execution character set.

     <p>Currently, CPP requires its input to be ASCII or UTF-8.  The execution
character set may be controlled by the user, with the
<samp><span class="option">-fexec-charset</span></samp> and <samp><span class="option">-fwide-exec-charset</span></samp> options.

     <li>Identifier characters. 
<a name="Identifier-characters"></a>The C and C++ standards allow identifiers to be composed of &lsquo;<samp><span class="samp">_</span></samp>&rsquo;
and the alphanumeric characters.  C++ and C99 also allow universal
character names, and C99 further permits implementation-defined
characters.  GCC currently only permits universal character names if
<samp><span class="option">-fextended-identifiers</span></samp> is used, because the implementation of
universal character names in identifiers is experimental.

     <p>GCC allows the &lsquo;<samp><span class="samp">$</span></samp>&rsquo; character in identifiers as an extension for
most targets.  This is true regardless of the <samp><span class="option">std=</span></samp> switch,
since this extension cannot conflict with standards-conforming
programs.  When preprocessing assembler, however, dollars are not
identifier characters by default.

     <p>Currently the targets that by default do not permit &lsquo;<samp><span class="samp">$</span></samp>&rsquo; are AVR,
IP2K, MMIX, MIPS Irix 3, ARM aout, and PowerPC targets for the AIX and
BeOS operating systems.

     <p>You can override the default with <samp><span class="option">-fdollars-in-identifiers</span></samp> or
<samp><span class="option">fno-dollars-in-identifiers</span></samp>.  See <a href="fdollars_002din_002didentifiers.html#fdollars_002din_002didentifiers">fdollars-in-identifiers</a>.

     <li>Non-empty sequences of whitespace characters.

     <p>In textual output, each whitespace sequence is collapsed to a single
space.  For aesthetic reasons, the first token on each non-directive
line of output is preceded with sufficient spaces that it appears in the
same column as it did in the original source file.

     <li>The numeric value of character constants in preprocessor expressions.

     <p>The preprocessor and compiler interpret character constants in the
same way; i.e. escape sequences such as &lsquo;<samp><span class="samp">\a</span></samp>&rsquo; are given the
values they would have on the target machine.

     <p>The compiler values a multi-character character constant a character
at a time, shifting the previous value left by the number of bits per
target character, and then or-ing in the bit-pattern of the new
character truncated to the width of a target character.  The final
bit-pattern is given type <code>int</code>, and is therefore signed,
regardless of whether single characters are signed or not (a slight
change from versions 3.1 and earlier of GCC).  If there are more
characters in the constant than would fit in the target <code>int</code> the
compiler issues a warning, and the excess leading characters are
ignored.

     <p>For example, <code>'ab'</code> for a target with an 8-bit <code>char</code> would be
interpreted as &lsquo;<samp><span class="samp">(int)&nbsp;((unsigned&nbsp;char)&nbsp;'a'&nbsp;*&nbsp;256&nbsp;+&nbsp;(unsigned&nbsp;char)&nbsp;'b')</span></samp>&rsquo;<!-- /@@w -->, and <code>'\234a'</code> as &lsquo;<samp><span class="samp">(int)&nbsp;((unsigned&nbsp;char)&nbsp;'\234'&nbsp;*&nbsp;256&nbsp;+&nbsp;(unsigned&nbsp;char)&nbsp;'a')</span></samp>&rsquo;<!-- /@@w -->.

     <li>Source file inclusion.

     <p>For a discussion on how the preprocessor locates header files,
<a href="Include-Operation.html#Include-Operation">Include Operation</a>.

     <li>Interpretation of the filename resulting from a macro-expanded
&lsquo;<samp><span class="samp">#include</span></samp>&rsquo; directive.

     <p>See <a href="Computed-Includes.html#Computed-Includes">Computed Includes</a>.

     <li>Treatment of a &lsquo;<samp><span class="samp">#pragma</span></samp>&rsquo; directive that after macro-expansion
results in a standard pragma.

     <p>No macro expansion occurs on any &lsquo;<samp><span class="samp">#pragma</span></samp>&rsquo; directive line, so the
question does not arise.

     <p>Note that GCC does not yet implement any of the standard
pragmas.

   </ul>

   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 13
a13 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
2008, 2009, 2010, 2011
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d20 1
a20 1
section entitled "GNU Free Documentation License".
d27 1
a27 1
A GNU Manual
d31 1
a31 1
You have freedom to copy and modify this GNU Manual, like GNU
d33 1
a33 43
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>The C Preprocessor: Implementation-defined behavior</title>

<meta name="description" content="The C Preprocessor: Implementation-defined behavior">
<meta name="keywords" content="The C Preprocessor: Implementation-defined behavior">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Index-of-Directives.html#Index-of-Directives" rel="index" title="Index of Directives">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Implementation-Details.html#Implementation-Details" rel="up" title="Implementation Details">
<link href="Implementation-limits.html#Implementation-limits" rel="next" title="Implementation limits">
<link href="Implementation-Details.html#Implementation-Details" rel="prev" title="Implementation Details">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d35 12
a46 3
</style>


d48 3
a50 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a51 1
<div class="header">
d53 3
a55 1
Next: <a href="Implementation-limits.html#Implementation-limits" accesskey="n" rel="next">Implementation limits</a>, Up: <a href="Implementation-Details.html#Implementation-Details" accesskey="u" rel="up">Implementation Details</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
d57 1
a57 2
<hr>
<a name="Implementation_002ddefined-behavior-1"></a>
a58 1
<a name="index-implementation_002ddefined-behavior"></a>
d60 3
a62 2
<p>This is how CPP behaves in all the cases which the C standard
describes as <em>implementation-defined</em>.  This term means that the
d64 5
a68 4
and stick to it.
</p>
<ul>
<li> The mapping of physical source file multi-byte characters to the
d71 6
a76 8
<p>The input character set can be specified using the
<samp>-finput-charset</samp> option, while the execution character set may
be controlled using the <samp>-fexec-charset</samp> and
<samp>-fwide-exec-charset</samp> options.
</p>
</li><li> Identifier characters.
<a name="Identifier-characters"></a>
<p>The C and C++ standards allow identifiers to be composed of &lsquo;<samp>_</samp>&rsquo;
d80 1
a80 1
<samp>-fextended-identifiers</samp> is used, because the implementation of
d82 3
a84 3
</p>
<p>GCC allows the &lsquo;<samp>$</samp>&rsquo; character in identifiers as an extension for
most targets.  This is true regardless of the <samp>std=</samp> switch,
a87 9
</p>
<p>Currently the targets that by default do not permit &lsquo;<samp>$</samp>&rsquo; are AVR,
IP2K, MMIX, MIPS Irix 3, ARM aout, and PowerPC targets for the AIX
operating system.
</p>
<p>You can override the default with <samp>-fdollars-in-identifiers</samp> or
<samp>fno-dollars-in-identifiers</samp>.  See <a href="Invocation.html#fdollars_002din_002didentifiers">fdollars-in-identifiers</a>.
</p>
</li><li> Non-empty sequences of whitespace characters.
d89 10
a98 1
<p>In textual output, each whitespace sequence is collapsed to a single
a101 2
</p>
</li><li> The numeric value of character constants in preprocessor expressions.
d103 4
a106 2
<p>The preprocessor and compiler interpret character constants in the
same way; i.e. escape sequences such as &lsquo;<samp>\a</samp>&rsquo; are given the
d108 2
a109 2
</p>
<p>The compiler evaluates a multi-character character constant a character
a118 5
</p>
<p>For example, <code>'ab'</code> for a target with an 8-bit <code>char</code> would be
interpreted as &lsquo;<samp>(int)&nbsp;((unsigned&nbsp;char)&nbsp;'a'&nbsp;*&nbsp;256&nbsp;+&nbsp;(unsigned&nbsp;char)&nbsp;'b')</samp>&rsquo;<!-- /@@w -->, and <code>'\234a'</code> as &lsquo;<samp>(int)&nbsp;((unsigned&nbsp;char)&nbsp;'\234'&nbsp;*&nbsp;256&nbsp;+&nbsp;(unsigned&nbsp;char)&nbsp;'a')</samp>&rsquo;<!-- /@@w -->.
</p>
</li><li> Source file inclusion.
d120 6
a125 1
<p>For a discussion on how the preprocessor locates header files,
d127 7
a133 7
</p>
</li><li> Interpretation of the filename resulting from a macro-expanded
&lsquo;<samp>#include</samp>&rsquo; directive.

<p>See <a href="Computed-Includes.html#Computed-Includes">Computed Includes</a>.
</p>
</li><li> Treatment of a &lsquo;<samp>#pragma</samp>&rsquo; directive that after macro-expansion
d136 1
a136 1
<p>No macro expansion occurs on any &lsquo;<samp>#pragma</samp>&rsquo; directive line, so the
d138 2
a139 2
</p>
<p>Note that GCC does not yet implement any of the standard
a140 8
</p>
</li></ul>

<hr>
<div class="header">
<p>
Next: <a href="Implementation-limits.html#Implementation-limits" accesskey="n" rel="next">Implementation limits</a>, Up: <a href="Implementation-Details.html#Implementation-Details" accesskey="u" rel="up">Implementation Details</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
</div>
d142 1
d144 1
a145 2
</body>
</html>
@

