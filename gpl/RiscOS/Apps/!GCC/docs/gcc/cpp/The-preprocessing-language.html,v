head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.15;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.15;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.18;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>The preprocessing language - The C Preprocessor</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="The C Preprocessor">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Overview.html#Overview" title="Overview">
<link rel="prev" href="Tokenization.html#Tokenization" title="Tokenization">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005
Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation.  A copy of
the license is included in the
section entitled ``GNU Free Documentation License''.

This manual contains no Invariant Sections.  The Front-Cover Texts are
(a) (see below), and the Back-Cover Texts are (b) (see below).

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.
-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="The-preprocessing-language"></a>
<p>
Previous:&nbsp;<a rel="previous" accesskey="p" href="Tokenization.html#Tokenization">Tokenization</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Overview.html#Overview">Overview</a>
<hr>
</div>

<h3 class="section">1.4 The preprocessing language</h3>

<p><a name="index-directives-21"></a><a name="index-preprocessing-directives-22"></a><a name="index-directive-line-23"></a><a name="index-directive-name-24"></a>
After tokenization, the stream of tokens may simply be passed straight
to the compiler's parser.  However, if it contains any operations in the
<dfn>preprocessing language</dfn>, it will be transformed first.  This stage
corresponds roughly to the standard's &ldquo;translation phase 4&rdquo; and is
what most people think of as the preprocessor's job.

   <p>The preprocessing language consists of <dfn>directives</dfn> to be executed
and <dfn>macros</dfn> to be expanded.  Its primary capabilities are:

     <ul>
<li>Inclusion of header files.  These are files of declarations that can be
substituted into your program.

     <li>Macro expansion.  You can define <dfn>macros</dfn>, which are abbreviations
for arbitrary fragments of C code.  The preprocessor will replace the
macros with their definitions throughout the program.  Some macros are
automatically defined for you.

     <li>Conditional compilation.  You can include or exclude parts of the
program according to various conditions.

     <li>Line control.  If you use a program to combine or rearrange source files
into an intermediate file which is then compiled, you can use line
control to inform the compiler where each source line originally came
from.

     <li>Diagnostics.  You can detect problems at compile time and issue errors
or warnings. 
</ul>

   <p>There are a few more, less useful, features.

   <p>Except for expansion of predefined macros, all these operations are
triggered with <dfn>preprocessing directives</dfn>.  Preprocessing directives
are lines in your program that start with &lsquo;<samp><span class="samp">#</span></samp>&rsquo;.  Whitespace is
allowed before and after the &lsquo;<samp><span class="samp">#</span></samp>&rsquo;.  The &lsquo;<samp><span class="samp">#</span></samp>&rsquo; is followed by an
identifier, the <dfn>directive name</dfn>.  It specifies the operation to
perform.  Directives are commonly referred to as &lsquo;<samp><span class="samp">#</span><var>name</var></samp>&rsquo;
where <var>name</var> is the directive name.  For example, &lsquo;<samp><span class="samp">#define</span></samp>&rsquo; is
the directive that defines a macro.

   <p>The &lsquo;<samp><span class="samp">#</span></samp>&rsquo; which begins a directive cannot come from a macro
expansion.  Also, the directive name is not macro expanded.  Thus, if
<code>foo</code> is defined as a macro expanding to <code>define</code>, that does
not make &lsquo;<samp><span class="samp">#foo</span></samp>&rsquo; a valid preprocessing directive.

   <p>The set of valid directive names is fixed.  Programs cannot define new
preprocessing directives.

   <p>Some directives require arguments; these make up the rest of the
directive line and must be separated from the directive name by
whitespace.  For example, &lsquo;<samp><span class="samp">#define</span></samp>&rsquo; must be followed by a macro
name and the intended expansion of the macro.

   <p>A preprocessing directive cannot cover more than one line.  The line
may, however, be continued with backslash-newline, or by a block comment
which extends past the end of the line.  In either case, when the
directive is processed, the continuations have already been merged with
the first line to make one long line.

   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 13
a13 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
2008, 2009, 2010, 2011
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d20 1
a20 1
section entitled "GNU Free Documentation License".
d27 1
a27 1
A GNU Manual
d31 1
a31 1
You have freedom to copy and modify this GNU Manual, like GNU
d33 1
a33 43
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>The C Preprocessor: The preprocessing language</title>

<meta name="description" content="The C Preprocessor: The preprocessing language">
<meta name="keywords" content="The C Preprocessor: The preprocessing language">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Index-of-Directives.html#Index-of-Directives" rel="index" title="Index of Directives">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Overview.html#Overview" rel="up" title="Overview">
<link href="Header-Files.html#Header-Files" rel="next" title="Header Files">
<link href="Tokenization.html#Tokenization" rel="prev" title="Tokenization">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d35 12
a46 3
</style>


d48 2
a49 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a50 1
<div class="header">
d52 3
a54 1
Previous: <a href="Tokenization.html#Tokenization" accesskey="p" rel="prev">Tokenization</a>, Up: <a href="Overview.html#Overview" accesskey="u" rel="up">Overview</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
d56 1
a56 2
<hr>
<a name="The-preprocessing-language-1"></a>
d58 13
a70 16
<a name="index-directives"></a>
<a name="index-preprocessing-directives"></a>
<a name="index-directive-line"></a>
<a name="index-directive-name"></a>

<p>After tokenization, the stream of tokens may simply be passed straight
to the compiler&rsquo;s parser.  However, if it contains any operations in the
<em>preprocessing language</em>, it will be transformed first.  This stage
corresponds roughly to the standard&rsquo;s &ldquo;translation phase 4&rdquo; and is
what most people think of as the preprocessor&rsquo;s job.
</p>
<p>The preprocessing language consists of <em>directives</em> to be executed
and <em>macros</em> to be expanded.  Its primary capabilities are:
</p>
<ul>
<li> Inclusion of header files.  These are files of declarations that can be
d73 1
a73 1
</li><li> Macro expansion.  You can define <em>macros</em>, which are abbreviations
d78 1
a78 1
</li><li> Conditional compilation.  You can include or exclude parts of the
d81 1
a81 1
</li><li> Line control.  If you use a program to combine or rearrange source files
d86 13
a98 13
</li><li> Diagnostics.  You can detect problems at compile time and issue errors
or warnings.
</li></ul>

<p>There are a few more, less useful, features.
</p>
<p>Except for expansion of predefined macros, all these operations are
triggered with <em>preprocessing directives</em>.  Preprocessing directives
are lines in your program that start with &lsquo;<samp>#</samp>&rsquo;.  Whitespace is
allowed before and after the &lsquo;<samp>#</samp>&rsquo;.  The &lsquo;<samp>#</samp>&rsquo; is followed by an
identifier, the <em>directive name</em>.  It specifies the operation to
perform.  Directives are commonly referred to as &lsquo;<samp>#<var>name</var></samp>&rsquo;
where <var>name</var> is the directive name.  For example, &lsquo;<samp>#define</samp>&rsquo; is
d100 2
a101 2
</p>
<p>The &lsquo;<samp>#</samp>&rsquo; which begins a directive cannot come from a macro
d104 3
a106 3
not make &lsquo;<samp>#foo</samp>&rsquo; a valid preprocessing directive.
</p>
<p>The set of valid directive names is fixed.  Programs cannot define new
d108 2
a109 2
</p>
<p>Some directives require arguments; these make up the rest of the
d111 1
a111 1
whitespace.  For example, &lsquo;<samp>#define</samp>&rsquo; must be followed by a macro
d113 2
a114 2
</p>
<p>A preprocessing directive cannot cover more than one line.  The line
a118 7
</p>
<hr>
<div class="header">
<p>
Previous: <a href="Tokenization.html#Tokenization" accesskey="p" rel="prev">Tokenization</a>, Up: <a href="Overview.html#Overview" accesskey="u" rel="up">Overview</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Index-of-Directives.html#Index-of-Directives" title="Index" rel="index">Index</a>]</p>
</div>

d120 1
a121 2
</body>
</html>
@

