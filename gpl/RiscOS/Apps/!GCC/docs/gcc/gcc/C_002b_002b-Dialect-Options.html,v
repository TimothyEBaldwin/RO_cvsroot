head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.19;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.19;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.26;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>C++ Dialect Options - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Invoking-GCC.html#Invoking-GCC" title="Invoking GCC">
<link rel="prev" href="C-Dialect-Options.html#C-Dialect-Options" title="C Dialect Options">
<link rel="next" href="Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options.html#Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options" title="Objective-C and Objective-C++ Dialect Options">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="C++-Dialect-Options"></a>
<a name="C_002b_002b-Dialect-Options"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options.html#Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options">Objective-C and Objective-C++ Dialect Options</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="C-Dialect-Options.html#C-Dialect-Options">C Dialect Options</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Invoking-GCC.html#Invoking-GCC">Invoking GCC</a>
<hr>
</div>

<h3 class="section">3.5 Options Controlling C++ Dialect</h3>

<p><a name="index-compiler-options_002c-C_002b_002b-120"></a><a name="index-C_002b_002b-options_002c-command-line-121"></a><a name="index-options_002c-C_002b_002b-122"></a>This section describes the command-line options that are only meaningful
for C++ programs; but you can also use most of the GNU compiler options
regardless of what language your program is in.  For example, you
might compile a file <code>firstClass.C</code> like this:

<pre class="smallexample">     g++ -g -frepo -O -c firstClass.C
</pre>
 <p class="noindent">In this example, only <samp><span class="option">-frepo</span></samp> is an option meant
only for C++ programs; you can use the other options with any
language supported by GCC.

 <p>Here is a list of options that are <em>only</em> for compiling C++ programs:

     <dl>
<dt><code>-fabi-version=</code><var>n</var><dd><a name="index-fabi_002dversion-123"></a>Use version <var>n</var> of the C++ ABI.  Version 2 is the version of the
C++ ABI that first appeared in G++ 3.4.  Version 1 is the version of
the C++ ABI that first appeared in G++ 3.2.  Version 0 will always be
the version that conforms most closely to the C++ ABI specification. 
Therefore, the ABI obtained using version 0 will change as ABI bugs
are fixed.

     <p>The default is version 2.

     <br><dt><code>-fno-access-control</code><dd><a name="index-fno_002daccess_002dcontrol-124"></a>Turn off all access checking.  This switch is mainly useful for working
around bugs in the access control code.

     <br><dt><code>-fcheck-new</code><dd><a name="index-fcheck_002dnew-125"></a>Check that the pointer returned by <code>operator new</code> is non-null
before attempting to modify the storage allocated.  This check is
normally unnecessary because the C++ standard specifies that
<code>operator new</code> will only return <code>0</code> if it is declared
&lsquo;<samp><span class="samp">throw()</span></samp>&rsquo;, in which case the compiler will always check the
return value even without this option.  In all other cases, when
<code>operator new</code> has a non-empty exception specification, memory
exhaustion is signalled by throwing <code>std::bad_alloc</code>.  See also
&lsquo;<samp><span class="samp">new (nothrow)</span></samp>&rsquo;.

     <br><dt><code>-fconserve-space</code><dd><a name="index-fconserve_002dspace-126"></a>Put uninitialized or runtime-initialized global variables into the
common segment, as C does.  This saves space in the executable at the
cost of not diagnosing duplicate definitions.  If you compile with this
flag and your program mysteriously crashes after <code>main()</code> has
completed, you may have an object that is being destroyed twice because
two definitions were merged.

     <p>This option is no longer useful on most targets, now that support has
been added for putting variables into BSS without making them common.

     <br><dt><code>-ffriend-injection</code><dd><a name="index-ffriend_002dinjection-127"></a>Inject friend functions into the enclosing namespace, so that they are
visible outside the scope of the class in which they are declared. 
Friend functions were documented to work this way in the old Annotated
C++ Reference Manual, and versions of G++ before 4.1 always worked
that way.  However, in ISO C++ a friend function which is not declared
in an enclosing scope can only be found using argument dependent
lookup.  This option causes friends to be injected as they were in
earlier releases.

     <p>This option is for compatibility, and may be removed in a future
release of G++.

     <br><dt><code>-fno-const-strings</code><dd><a name="index-fno_002dconst_002dstrings-128"></a>Give string constants type <code>char *</code> instead of type <code>const
char *</code>.  By default, G++ uses type <code>const char *</code> as required by
the standard.  Even if you use <samp><span class="option">-fno-const-strings</span></samp>, you cannot
actually modify the value of a string constant.

     <p>This option might be removed in a future release of G++.  For maximum
portability, you should structure your code so that it works with
string constants that have type <code>const char *</code>.

     <br><dt><code>-fno-elide-constructors</code><dd><a name="index-fno_002delide_002dconstructors-129"></a>The C++ standard allows an implementation to omit creating a temporary
which is only used to initialize another object of the same type. 
Specifying this option disables that optimization, and forces G++ to
call the copy constructor in all cases.

     <br><dt><code>-fno-enforce-eh-specs</code><dd><a name="index-fno_002denforce_002deh_002dspecs-130"></a>Don't generate code to check for violation of exception specifications
at runtime.  This option violates the C++ standard, but may be useful
for reducing code size in production builds, much like defining
&lsquo;<samp><span class="samp">NDEBUG</span></samp>&rsquo;.  This does not give user code permission to throw
exceptions in violation of the exception specifications; the compiler
will still optimize based on the specifications, so throwing an
unexpected exception will result in undefined behavior.

     <br><dt><code>-ffor-scope</code><dt><code>-fno-for-scope</code><dd><a name="index-ffor_002dscope-131"></a><a name="index-fno_002dfor_002dscope-132"></a>If <samp><span class="option">-ffor-scope</span></samp> is specified, the scope of variables declared in
a <i>for-init-statement</i> is limited to the &lsquo;<samp><span class="samp">for</span></samp>&rsquo; loop itself,
as specified by the C++ standard. 
If <samp><span class="option">-fno-for-scope</span></samp> is specified, the scope of variables declared in
a <i>for-init-statement</i> extends to the end of the enclosing scope,
as was the case in old versions of G++, and other (traditional)
implementations of C++.

     <p>The default if neither flag is given to follow the standard,
but to allow and give a warning for old-style code that would
otherwise be invalid, or have different behavior.

     <br><dt><code>-fno-gnu-keywords</code><dd><a name="index-fno_002dgnu_002dkeywords-133"></a>Do not recognize <code>typeof</code> as a keyword, so that code can use this
word as an identifier.  You can use the keyword <code>__typeof__</code> instead. 
<samp><span class="option">-ansi</span></samp> implies <samp><span class="option">-fno-gnu-keywords</span></samp>.

     <br><dt><code>-fno-implicit-templates</code><dd><a name="index-fno_002dimplicit_002dtemplates-134"></a>Never emit code for non-inline templates which are instantiated
implicitly (i.e. by use); only emit code for explicit instantiations. 
See <a href="Template-Instantiation.html#Template-Instantiation">Template Instantiation</a>, for more information.

     <br><dt><code>-fno-implicit-inline-templates</code><dd><a name="index-fno_002dimplicit_002dinline_002dtemplates-135"></a>Don't emit code for implicit instantiations of inline templates, either. 
The default is to handle inlines differently so that compiles with and
without optimization will need the same set of explicit instantiations.

     <br><dt><code>-fno-implement-inlines</code><dd><a name="index-fno_002dimplement_002dinlines-136"></a>To save space, do not emit out-of-line copies of inline functions
controlled by &lsquo;<samp><span class="samp">#pragma implementation</span></samp>&rsquo;.  This will cause linker
errors if these functions are not inlined everywhere they are called.

     <br><dt><code>-fms-extensions</code><dd><a name="index-fms_002dextensions-137"></a>Disable pedantic warnings about constructs used in MFC, such as implicit
int and getting a pointer to member function via non-standard syntax.

     <br><dt><code>-fno-nonansi-builtins</code><dd><a name="index-fno_002dnonansi_002dbuiltins-138"></a>Disable built-in declarations of functions that are not mandated by
ANSI/ISO C.  These include <code>ffs</code>, <code>alloca</code>, <code>_exit</code>,
<code>index</code>, <code>bzero</code>, <code>conjf</code>, and other related functions.

     <br><dt><code>-fno-operator-names</code><dd><a name="index-fno_002doperator_002dnames-139"></a>Do not treat the operator name keywords <code>and</code>, <code>bitand</code>,
<code>bitor</code>, <code>compl</code>, <code>not</code>, <code>or</code> and <code>xor</code> as
synonyms as keywords.

     <br><dt><code>-fno-optional-diags</code><dd><a name="index-fno_002doptional_002ddiags-140"></a>Disable diagnostics that the standard says a compiler does not need to
issue.  Currently, the only such diagnostic issued by G++ is the one for
a name having multiple meanings within a class.

     <br><dt><code>-fpermissive</code><dd><a name="index-fpermissive-141"></a>Downgrade some diagnostics about nonconformant code from errors to
warnings.  Thus, using <samp><span class="option">-fpermissive</span></samp> will allow some
nonconforming code to compile.

     <br><dt><code>-frepo</code><dd><a name="index-frepo-142"></a>Enable automatic template instantiation at link time.  This option also
implies <samp><span class="option">-fno-implicit-templates</span></samp>.  See <a href="Template-Instantiation.html#Template-Instantiation">Template Instantiation</a>, for more information.

     <br><dt><code>-fno-rtti</code><dd><a name="index-fno_002drtti-143"></a>Disable generation of information about every class with virtual
functions for use by the C++ runtime type identification features
(&lsquo;<samp><span class="samp">dynamic_cast</span></samp>&rsquo; and &lsquo;<samp><span class="samp">typeid</span></samp>&rsquo;).  If you don't use those parts
of the language, you can save some space by using this flag.  Note that
exception handling uses the same information, but it will generate it as
needed.

     <br><dt><code>-fstats</code><dd><a name="index-fstats-144"></a>Emit statistics about front-end processing at the end of the compilation. 
This information is generally only useful to the G++ development team.

     <br><dt><code>-ftemplate-depth-</code><var>n</var><dd><a name="index-ftemplate_002ddepth-145"></a>Set the maximum instantiation depth for template classes to <var>n</var>. 
A limit on the template instantiation depth is needed to detect
endless recursions during template class instantiation.  ANSI/ISO C++
conforming programs must not rely on a maximum depth greater than 17.

     <br><dt><code>-fno-threadsafe-statics</code><dd><a name="index-fno_002dthreadsafe_002dstatics-146"></a>Do not emit the extra code to use the routines specified in the C++
ABI for thread-safe initialization of local statics.  You can use this
option to reduce code size slightly in code that doesn't need to be
thread-safe.

     <br><dt><code>-fuse-cxa-atexit</code><dd><a name="index-fuse_002dcxa_002datexit-147"></a>Register destructors for objects with static storage duration with the
<code>__cxa_atexit</code> function rather than the <code>atexit</code> function. 
This option is required for fully standards-compliant handling of static
destructors, but will only work if your C library supports
<code>__cxa_atexit</code>.

     <br><dt><code>-fvisibility-inlines-hidden</code><dd><a name="index-fvisibility_002dinlines_002dhidden-148"></a>Causes all inlined methods to be marked with
<code>__attribute__ ((visibility ("hidden")))</code> so that they do not
appear in the export table of a DSO and do not require a PLT indirection
when used within the DSO.  Enabling this option can have a dramatic effect
on load and link times of a DSO as it massively reduces the size of the
dynamic export table when the library makes heavy use of templates.  While
it can cause bloating through duplication of code within each DSO where
it is used, often the wastage is less than the considerable space occupied
by a long symbol name in the export table which is typical when using
templates and namespaces.  For even more savings, combine with the
<samp><span class="option">-fvisibility=hidden</span></samp> switch.

     <br><dt><code>-fno-weak</code><dd><a name="index-fno_002dweak-149"></a>Do not use weak symbol support, even if it is provided by the linker. 
By default, G++ will use weak symbols if they are available.  This
option exists only for testing, and should not be used by end-users;
it will result in inferior code and has no benefits.  This option may
be removed in a future release of G++.

     <br><dt><code>-nostdinc++</code><dd><a name="index-nostdinc_002b_002b-150"></a>Do not search for header files in the standard directories specific to
C++, but do still search the other standard directories.  (This option
is used when building the C++ library.) 
</dl>

 <p>In addition, these optimization, warning, and code generation options
have meanings only for C++ programs:

     <dl>
<dt><code>-fno-default-inline</code><dd><a name="index-fno_002ddefault_002dinline-151"></a>Do not assume &lsquo;<samp><span class="samp">inline</span></samp>&rsquo; for functions defined inside a class scope. 
See <a href="Optimize-Options.html#Optimize-Options">Options That Control Optimization</a>.  Note that these
functions will have linkage like inline functions; they just won't be
inlined by default.

     <br><dt><code>-Wabi </code><span class="roman">(C++ only)</span><dd><a name="index-Wabi-152"></a>Warn when G++ generates code that is probably not compatible with the
vendor-neutral C++ ABI.  Although an effort has been made to warn about
all such cases, there are probably some cases that are not warned about,
even though G++ is generating incompatible code.  There may also be
cases where warnings are emitted even though the code that is generated
will be compatible.

     <p>You should rewrite your code to avoid these warnings if you are
concerned about the fact that code generated by G++ may not be binary
compatible with code generated by other compilers.

     <p>The known incompatibilities at this point include:

          <ul>
<li>Incorrect handling of tail-padding for bit-fields.  G++ may attempt to
pack data into the same byte as a base class.  For example:

          <pre class="smallexample">               struct A { virtual void f(); int f1 : 1; };
               struct B : public A { int f2 : 1; };
</pre>
          <p class="noindent">In this case, G++ will place <code>B::f2</code> into the same byte
as<code>A::f1</code>; other compilers will not.  You can avoid this problem
by explicitly padding <code>A</code> so that its size is a multiple of the
byte size on your platform; that will cause G++ and other compilers to
layout <code>B</code> identically.

          <li>Incorrect handling of tail-padding for virtual bases.  G++ does not use
tail padding when laying out virtual bases.  For example:

          <pre class="smallexample">               struct A { virtual void f(); char c1; };
               struct B { B(); char c2; };
               struct C : public A, public virtual B {};
</pre>
          <p class="noindent">In this case, G++ will not place <code>B</code> into the tail-padding for
<code>A</code>; other compilers will.  You can avoid this problem by
explicitly padding <code>A</code> so that its size is a multiple of its
alignment (ignoring virtual base classes); that will cause G++ and other
compilers to layout <code>C</code> identically.

          <li>Incorrect handling of bit-fields with declared widths greater than that
of their underlying types, when the bit-fields appear in a union.  For
example:

          <pre class="smallexample">               union U { int i : 4096; };
</pre>
          <p class="noindent">Assuming that an <code>int</code> does not have 4096 bits, G++ will make the
union too small by the number of bits in an <code>int</code>.

          <li>Empty classes can be placed at incorrect offsets.  For example:

          <pre class="smallexample">               struct A {};
               
               struct B {
                 A a;
                 virtual void f ();
               };
               
               struct C : public B, public A {};
</pre>
          <p class="noindent">G++ will place the <code>A</code> base class of <code>C</code> at a nonzero offset;
it should be placed at offset zero.  G++ mistakenly believes that the
<code>A</code> data member of <code>B</code> is already at offset zero.

          <li>Names of template functions whose types involve <code>typename</code> or
template template parameters can be mangled incorrectly.

          <pre class="smallexample">               template &lt;typename Q&gt;
               void f(typename Q::X) {}
               
               template &lt;template &lt;typename&gt; class Q&gt;
               void f(typename Q&lt;int&gt;::X) {}
</pre>
          <p class="noindent">Instantiations of these templates may be mangled incorrectly.

     </ul>

     <br><dt><code>-Wctor-dtor-privacy </code><span class="roman">(C++ only)</span><dd><a name="index-Wctor_002ddtor_002dprivacy-153"></a>Warn when a class seems unusable because all the constructors or
destructors in that class are private, and it has neither friends nor
public static member functions.

     <br><dt><code>-Wnon-virtual-dtor </code><span class="roman">(C++ only)</span><dd><a name="index-Wnon_002dvirtual_002ddtor-154"></a>Warn when a class appears to be polymorphic, thereby requiring a virtual
destructor, yet it declares a non-virtual one. 
This warning is enabled by <samp><span class="option">-Wall</span></samp>.

     <br><dt><code>-Wreorder </code><span class="roman">(C++ only)</span><dd><a name="index-Wreorder-155"></a><a name="index-reordering_002c-warning-156"></a><a name="index-warning-for-reordering-of-member-initializers-157"></a>Warn when the order of member initializers given in the code does not
match the order in which they must be executed.  For instance:

     <pre class="smallexample">          struct A {
            int i;
            int j;
            A(): j (0), i (1) { }
          };
</pre>
     <p>The compiler will rearrange the member initializers for &lsquo;<samp><span class="samp">i</span></samp>&rsquo;
and &lsquo;<samp><span class="samp">j</span></samp>&rsquo; to match the declaration order of the members, emitting
a warning to that effect.  This warning is enabled by <samp><span class="option">-Wall</span></samp>. 
</dl>

 <p>The following <samp><span class="option">-W...</span></samp> options are not affected by <samp><span class="option">-Wall</span></samp>.

     <dl>
<dt><code>-Weffc++ </code><span class="roman">(C++ only)</span><dd><a name="index-Weffc_002b_002b-158"></a>Warn about violations of the following style guidelines from Scott Meyers'
<cite>Effective C++</cite> book:

          <ul>
<li>Item 11:  Define a copy constructor and an assignment operator for classes
with dynamically allocated memory.

          <li>Item 12:  Prefer initialization to assignment in constructors.

          <li>Item 14:  Make destructors virtual in base classes.

          <li>Item 15:  Have <code>operator=</code> return a reference to <code>*this</code>.

          <li>Item 23:  Don't try to return a reference when you must return an object.

     </ul>

     <p>Also warn about violations of the following style guidelines from
Scott Meyers' <cite>More Effective C++</cite> book:

          <ul>
<li>Item 6:  Distinguish between prefix and postfix forms of increment and
decrement operators.

          <li>Item 7:  Never overload <code>&amp;&amp;</code>, <code>||</code>, or <code>,</code>.

     </ul>

     <p>When selecting this option, be aware that the standard library
headers do not obey all of these guidelines; use &lsquo;<samp><span class="samp">grep -v</span></samp>&rsquo;
to filter out those warnings.

     <br><dt><code>-Wno-deprecated </code><span class="roman">(C++ only)</span><dd><a name="index-Wno_002ddeprecated-159"></a>Do not warn about usage of deprecated features.  See <a href="Deprecated-Features.html#Deprecated-Features">Deprecated Features</a>.

     <br><dt><code>-Wstrict-null-sentinel </code><span class="roman">(C++ only)</span><dd><a name="index-Wstrict_002dnull_002dsentinel-160"></a>Warn also about the use of an uncasted <code>NULL</code> as sentinel.  When
compiling only with GCC this is a valid sentinel, as <code>NULL</code> is defined
to <code>__null</code>.  Although it is a null pointer constant not a null pointer,
it is guaranteed to of the same size as a pointer.  But this use is
not portable across different compilers.

     <br><dt><code>-Wno-non-template-friend </code><span class="roman">(C++ only)</span><dd><a name="index-Wno_002dnon_002dtemplate_002dfriend-161"></a>Disable warnings when non-templatized friend functions are declared
within a template.  Since the advent of explicit template specification
support in G++, if the name of the friend is an unqualified-id (i.e.,
&lsquo;<samp><span class="samp">friend foo(int)</span></samp>&rsquo;), the C++ language specification demands that the
friend declare or define an ordinary, nontemplate function.  (Section
14.5.3).  Before G++ implemented explicit specification, unqualified-ids
could be interpreted as a particular specialization of a templatized
function.  Because this non-conforming behavior is no longer the default
behavior for G++, <samp><span class="option">-Wnon-template-friend</span></samp> allows the compiler to
check existing code for potential trouble spots and is on by default. 
This new compiler behavior can be turned off with
<samp><span class="option">-Wno-non-template-friend</span></samp> which keeps the conformant compiler code
but disables the helpful warning.

     <br><dt><code>-Wold-style-cast </code><span class="roman">(C++ only)</span><dd><a name="index-Wold_002dstyle_002dcast-162"></a>Warn if an old-style (C-style) cast to a non-void type is used within
a C++ program.  The new-style casts (&lsquo;<samp><span class="samp">dynamic_cast</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">static_cast</span></samp>&rsquo;, &lsquo;<samp><span class="samp">reinterpret_cast</span></samp>&rsquo;, and &lsquo;<samp><span class="samp">const_cast</span></samp>&rsquo;) are
less vulnerable to unintended effects and much easier to search for.

     <br><dt><code>-Woverloaded-virtual </code><span class="roman">(C++ only)</span><dd><a name="index-Woverloaded_002dvirtual-163"></a><a name="index-overloaded-virtual-fn_002c-warning-164"></a><a name="index-warning-for-overloaded-virtual-fn-165"></a>Warn when a function declaration hides virtual functions from a
base class.  For example, in:

     <pre class="smallexample">          struct A {
            virtual void f();
          };
          
          struct B: public A {
            void f(int);
          };
</pre>
     <p>the <code>A</code> class version of <code>f</code> is hidden in <code>B</code>, and code
like:

     <pre class="smallexample">          B* b;
          b-&gt;f();
</pre>
     <p>will fail to compile.

     <br><dt><code>-Wno-pmf-conversions </code><span class="roman">(C++ only)</span><dd><a name="index-Wno_002dpmf_002dconversions-166"></a>Disable the diagnostic for converting a bound pointer to member function
to a plain pointer.

     <br><dt><code>-Wsign-promo </code><span class="roman">(C++ only)</span><dd><a name="index-Wsign_002dpromo-167"></a>Warn when overload resolution chooses a promotion from unsigned or
enumerated type to a signed type, over a conversion to an unsigned type of
the same size.  Previous versions of G++ would try to preserve
unsignedness, but the standard mandates the current behavior.

     <pre class="smallexample">          struct A {
            operator int ();
            A&amp; operator = (int);
          };
          
          main ()
          {
            A a,b;
            a = b;
          }
</pre>
     <p>In this example, G++ will synthesize a default &lsquo;<samp><span class="samp">A&amp; operator =
(const A&amp;);</span></samp>&rsquo;, while cfront will use the user-defined &lsquo;<samp><span class="samp">operator =</span></samp>&rsquo;. 
</dl>

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): C++ Dialect Options</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): C++ Dialect Options">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): C++ Dialect Options">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Invoking-GCC.html#Invoking-GCC" rel="up" title="Invoking GCC">
<link href="Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options.html#Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options" rel="next" title="Objective-C and Objective-C++ Dialect Options">
<link href="C-Dialect-Options.html#C-Dialect-Options" rel="prev" title="C Dialect Options">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 3
a48 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a49 1
<div class="header">
d51 4
a54 1
Next: <a href="Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options.html#Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options" accesskey="n" rel="next">Objective-C and Objective-C++ Dialect Options</a>, Previous: <a href="C-Dialect-Options.html#C-Dialect-Options" accesskey="p" rel="prev">C Dialect Options</a>, Up: <a href="Invoking-GCC.html#Invoking-GCC" accesskey="u" rel="up">Invoking GCC</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
d56 1
a56 2
<hr>
<a name="Options-Controlling-C_002b_002b-Dialect"></a>
d59 1
a59 4
<a name="index-compiler-options_002c-C_002b_002b"></a>
<a name="index-C_002b_002b-options_002c-command_002dline"></a>
<a name="index-options_002c-C_002b_002b"></a>
<p>This section describes the command-line options that are only meaningful
a62 4
</p>
<div class="smallexample">
<pre class="smallexample">g++ -g -frepo -O -c firstClass.C
</pre></div>
d64 3
a66 1
<p>In this example, only <samp>-frepo</samp> is an option meant
d69 5
a73 7
</p>
<p>Here is a list of options that are <em>only</em> for compiling C++ programs:
</p>
<dl compact="compact">
<dt><code>-fabi-version=<var>n</var></code></dt>
<dd><a name="index-fabi_002dversion"></a>
<p>Use version <var>n</var> of the C++ ABI.  Version 2 is the version of the
d76 1
a76 1
the version that conforms most closely to the C++ ABI specification.
d79 4
a82 25
</p>
<p>The default is version 2.
</p>
<p>Version 3 corrects an error in mangling a constant address as a
template argument.
</p>
<p>Version 4, which first appeared in G++ 4.5, implements a standard
mangling for vector types.
</p>
<p>Version 5, which first appeared in G++ 4.6, corrects the mangling of
attribute const/volatile on function pointer types, decltype of a
plain decl, and use of a function parameter in the declaration of
another parameter.
</p>
<p>Version 6, which first appeared in G++ 4.7, corrects the promotion
behavior of C++11 scoped enums and the mangling of template argument
packs, const/static_cast, prefix ++ and &ndash;, and a class scope function
used as a template argument.
</p>
<p>See also <samp>-Wabi</samp>.
</p>
</dd>
<dt><code>-fno-access-control</code></dt>
<dd><a name="index-fno_002daccess_002dcontrol"></a>
<p>Turn off all access checking.  This switch is mainly useful for working
d84 2
a85 5
</p>
</dd>
<dt><code>-fcheck-new</code></dt>
<dd><a name="index-fcheck_002dnew"></a>
<p>Check that the pointer returned by <code>operator new</code> is non-null
d89 1
a89 1
&lsquo;<samp>throw()</samp>&rsquo;, in which case the compiler will always check the
d93 3
a95 6
&lsquo;<samp>new (nothrow)</samp>&rsquo;.
</p>
</dd>
<dt><code>-fconserve-space</code></dt>
<dd><a name="index-fconserve_002dspace"></a>
<p>Put uninitialized or run-time-initialized global variables into the
d101 2
a102 2
</p>
<p>This option is no longer useful on most targets, now that support has
d104 3
a106 37
</p>
</dd>
<dt><code>-fconstexpr-depth=<var>n</var></code></dt>
<dd><a name="index-fconstexpr_002ddepth"></a>
<p>Set the maximum nested evaluation depth for C++11 constexpr functions
to <var>n</var>.  A limit is needed to detect endless recursion during
constant expression evaluation.  The minimum specified by the standard
is 512.
</p>
</dd>
<dt><code>-fdeduce-init-list</code></dt>
<dd><a name="index-fdeduce_002dinit_002dlist"></a>
<p>Enable deduction of a template type parameter as
std::initializer_list from a brace-enclosed initializer list, i.e.
</p>
<div class="smallexample">
<pre class="smallexample">template &lt;class T&gt; auto forward(T t) -&gt; decltype (realfn (t))
{
  return realfn (t);
}

void f()
{
  forward({1,2}); // call forward&lt;std::initializer_list&lt;int&gt;&gt;
}
</pre></div>

<p>This deduction was implemented as a possible extension to the
originally proposed semantics for the C++11 standard, but was not part
of the final standard, so it is disabled by default.  This option is
deprecated, and may be removed in a future version of G++.
</p>
</dd>
<dt><code>-ffriend-injection</code></dt>
<dd><a name="index-ffriend_002dinjection"></a>
<p>Inject friend functions into the enclosing namespace, so that they are
visible outside the scope of the class in which they are declared.
d109 1
a109 1
that way.  However, in ISO C++ a friend function that is not declared
d113 2
a114 2
</p>
<p>This option is for compatibility, and may be removed in a future
d116 12
a127 6
</p>
</dd>
<dt><code>-fno-elide-constructors</code></dt>
<dd><a name="index-fno_002delide_002dconstructors"></a>
<p>The C++ standard allows an implementation to omit creating a temporary
that is only used to initialize another object of the same type.
d130 3
a132 6
</p>
</dd>
<dt><code>-fno-enforce-eh-specs</code></dt>
<dd><a name="index-fno_002denforce_002deh_002dspecs"></a>
<p>Don&rsquo;t generate code to check for violation of exception specifications
at run time.  This option violates the C++ standard, but may be useful
d134 1
a134 1
&lsquo;<samp>NDEBUG</samp>&rsquo;.  This does not give user code permission to throw
d138 5
a142 10
</p>
</dd>
<dt><code>-ffor-scope</code></dt>
<dt><code>-fno-for-scope</code></dt>
<dd><a name="index-ffor_002dscope"></a>
<a name="index-fno_002dfor_002dscope"></a>
<p>If <samp>-ffor-scope</samp> is specified, the scope of variables declared in
a <i>for-init-statement</i> is limited to the &lsquo;<samp>for</samp>&rsquo; loop itself,
as specified by the C++ standard.
If <samp>-fno-for-scope</samp> is specified, the scope of variables declared in
d146 2
a147 2
</p>
<p>The default if neither flag is given to follow the standard,
d150 7
a156 13
</p>
</dd>
<dt><code>-fno-gnu-keywords</code></dt>
<dd><a name="index-fno_002dgnu_002dkeywords"></a>
<p>Do not recognize <code>typeof</code> as a keyword, so that code can use this
word as an identifier.  You can use the keyword <code>__typeof__</code> instead.
<samp>-ansi</samp> implies <samp>-fno-gnu-keywords</samp>.
</p>
</dd>
<dt><code>-fno-implicit-templates</code></dt>
<dd><a name="index-fno_002dimplicit_002dtemplates"></a>
<p>Never emit code for non-inline templates that are instantiated
implicitly (i.e. by use); only emit code for explicit instantiations.
d158 2
a159 5
</p>
</dd>
<dt><code>-fno-implicit-inline-templates</code></dt>
<dd><a name="index-fno_002dimplicit_002dinline_002dtemplates"></a>
<p>Don&rsquo;t emit code for implicit instantiations of inline templates, either.
d162 3
a164 6
</p>
</dd>
<dt><code>-fno-implement-inlines</code></dt>
<dd><a name="index-fno_002dimplement_002dinlines"></a>
<p>To save space, do not emit out-of-line copies of inline functions
controlled by &lsquo;<samp>#pragma implementation</samp>&rsquo;.  This will cause linker
d166 2
a167 5
</p>
</dd>
<dt><code>-fms-extensions</code></dt>
<dd><a name="index-fms_002dextensions-1"></a>
<p>Disable pedantic warnings about constructs used in MFC, such as implicit
d169 2
a170 5
</p>
</dd>
<dt><code>-fno-nonansi-builtins</code></dt>
<dd><a name="index-fno_002dnonansi_002dbuiltins"></a>
<p>Disable built-in declarations of functions that are not mandated by
d173 2
a174 18
</p>
</dd>
<dt><code>-fnothrow-opt</code></dt>
<dd><a name="index-fnothrow_002dopt"></a>
<p>Treat a <code>throw()</code> exception specification as though it were a
<code>noexcept</code> specification to reduce or eliminate the text size
overhead relative to a function with no exception specification.  If
the function has local variables of types with non-trivial
destructors, the exception specification will actually make the
function smaller because the EH cleanups for those variables can be
optimized away.  The semantic effect is that an exception thrown out of
a function with such an exception specification will result in a call
to <code>terminate</code> rather than <code>unexpected</code>.
</p>
</dd>
<dt><code>-fno-operator-names</code></dt>
<dd><a name="index-fno_002doperator_002dnames"></a>
<p>Do not treat the operator name keywords <code>and</code>, <code>bitand</code>,
d177 2
a178 5
</p>
</dd>
<dt><code>-fno-optional-diags</code></dt>
<dd><a name="index-fno_002doptional_002ddiags"></a>
<p>Disable diagnostics that the standard says a compiler does not need to
d181 3
a183 6
</p>
</dd>
<dt><code>-fpermissive</code></dt>
<dd><a name="index-fpermissive"></a>
<p>Downgrade some diagnostics about nonconformant code from errors to
warnings.  Thus, using <samp>-fpermissive</samp> will allow some
d185 7
a191 27
</p>
</dd>
<dt><code>-fno-pretty-templates</code></dt>
<dd><a name="index-fno_002dpretty_002dtemplates"></a>
<p>When an error message refers to a specialization of a function
template, the compiler will normally print the signature of the
template followed by the template arguments and any typedefs or
typenames in the signature (e.g. <code>void f(T) [with T = int]</code>
rather than <code>void f(int)</code>) so that it&rsquo;s clear which template is
involved.  When an error message refers to a specialization of a class
template, the compiler will omit any template arguments that match
the default template arguments for that template.  If either of these
behaviors make it harder to understand the error message rather than
easier, using <samp>-fno-pretty-templates</samp> will disable them.
</p>
</dd>
<dt><code>-frepo</code></dt>
<dd><a name="index-frepo"></a>
<p>Enable automatic template instantiation at link time.  This option also
implies <samp>-fno-implicit-templates</samp>.  See <a href="Template-Instantiation.html#Template-Instantiation">Template Instantiation</a>, for more information.
</p>
</dd>
<dt><code>-fno-rtti</code></dt>
<dd><a name="index-fno_002drtti"></a>
<p>Disable generation of information about every class with virtual
functions for use by the C++ run-time type identification features
(&lsquo;<samp>dynamic_cast</samp>&rsquo; and &lsquo;<samp>typeid</samp>&rsquo;).  If you don&rsquo;t use those parts
d194 3
a196 8
needed. The &lsquo;<samp>dynamic_cast</samp>&rsquo; operator can still be used for casts that
do not require run-time type information, i.e. casts to <code>void *</code> or to
unambiguous base classes.
</p>
</dd>
<dt><code>-fstats</code></dt>
<dd><a name="index-fstats"></a>
<p>Emit statistics about front-end processing at the end of the compilation.
d198 2
a199 15
</p>
</dd>
<dt><code>-fstrict-enums</code></dt>
<dd><a name="index-fstrict_002denums"></a>
<p>Allow the compiler to optimize using the assumption that a value of
enumerated type can only be one of the values of the enumeration (as
defined in the C++ standard; basically, a value that can be
represented in the minimum number of bits needed to represent all the
enumerators).  This assumption may not be valid if the program uses a
cast to convert an arbitrary integer value to the enumerated type.
</p>
</dd>
<dt><code>-ftemplate-depth=<var>n</var></code></dt>
<dd><a name="index-ftemplate_002ddepth"></a>
<p>Set the maximum instantiation depth for template classes to <var>n</var>.
d202 3
a204 8
conforming programs must not rely on a maximum depth greater than 17
(changed to 1024 in C++11).  The default value is 900, as the compiler
can run out of stack space before hitting 1024 in some situations.
</p>
</dd>
<dt><code>-fno-threadsafe-statics</code></dt>
<dd><a name="index-fno_002dthreadsafe_002dstatics"></a>
<p>Do not emit the extra code to use the routines specified in the C++
d206 1
a206 1
option to reduce code size slightly in code that doesn&rsquo;t need to be
d208 3
a210 6
</p>
</dd>
<dt><code>-fuse-cxa-atexit</code></dt>
<dd><a name="index-fuse_002dcxa_002datexit"></a>
<p>Register destructors for objects with static storage duration with the
<code>__cxa_atexit</code> function rather than the <code>atexit</code> function.
d214 3
a216 17
</p>
</dd>
<dt><code>-fno-use-cxa-get-exception-ptr</code></dt>
<dd><a name="index-fno_002duse_002dcxa_002dget_002dexception_002dptr"></a>
<p>Don&rsquo;t use the <code>__cxa_get_exception_ptr</code> runtime routine.  This
will cause <code>std::uncaught_exception</code> to be incorrect, but is necessary
if the runtime routine is not available.
</p>
</dd>
<dt><code>-fvisibility-inlines-hidden</code></dt>
<dd><a name="index-fvisibility_002dinlines_002dhidden"></a>
<p>This switch declares that the user does not attempt to compare
pointers to inline functions or methods where the addresses of the two functions
were taken in different shared objects.
</p>
<p>The effect of this is that GCC may, effectively, mark inline methods with
<code>__attribute__ ((visibility (&quot;hidden&quot;)))</code> so that they do not
d220 8
a227 53
dynamic export table when the library makes heavy use of templates.
</p>
<p>The behavior of this switch is not quite the same as marking the
methods as hidden directly, because it does not affect static variables
local to the function or cause the compiler to deduce that
the function is defined in only one shared object.
</p>
<p>You may mark a method as having a visibility explicitly to negate the
effect of the switch for that method.  For example, if you do want to
compare pointers to a particular inline method, you might mark it as
having default visibility.  Marking the enclosing class with explicit
visibility will have no effect.
</p>
<p>Explicitly instantiated inline methods are unaffected by this option
as their linkage might otherwise cross a shared library boundary.
See <a href="Template-Instantiation.html#Template-Instantiation">Template Instantiation</a>.
</p>
</dd>
<dt><code>-fvisibility-ms-compat</code></dt>
<dd><a name="index-fvisibility_002dms_002dcompat"></a>
<p>This flag attempts to use visibility settings to make GCC&rsquo;s C++
linkage model compatible with that of Microsoft Visual Studio.
</p>
<p>The flag makes these changes to GCC&rsquo;s linkage model:
</p>
<ol>
<li> It sets the default visibility to <code>hidden</code>, like
<samp>-fvisibility=hidden</samp>.

</li><li> Types, but not their members, are not hidden by default.

</li><li> The One Definition Rule is relaxed for types without explicit
visibility specifications that are defined in more than one different
shared object: those declarations are permitted if they would have
been permitted when this option was not used.
</li></ol>

<p>In new code it is better to use <samp>-fvisibility=hidden</samp> and
export those classes that are intended to be externally visible.
Unfortunately it is possible for code to rely, perhaps accidentally,
on the Visual Studio behavior.
</p>
<p>Among the consequences of these changes are that static data members
of the same type with the same name but defined in different shared
objects will be different, so changing one will not change the other;
and that pointers to function members defined in different shared
objects may not compare equal.  When this flag is given, it is a
violation of the ODR to define types with the same name differently.
</p>
</dd>
<dt><code>-fno-weak</code></dt>
<dd><a name="index-fno_002dweak"></a>
<p>Do not use weak symbol support, even if it is provided by the linker.
d232 2
a233 5
</p>
</dd>
<dt><code>-nostdinc++</code></dt>
<dd><a name="index-nostdinc_002b_002b"></a>
<p>Do not search for header files in the standard directories specific to
d235 1
a235 2
is used when building the C++ library.)
</p></dd>
d238 1
a238 1
<p>In addition, these optimization, warning, and code generation options
d240 3
a242 5
</p>
<dl compact="compact">
<dt><code>-fno-default-inline</code></dt>
<dd><a name="index-fno_002ddefault_002dinline"></a>
<p>Do not assume &lsquo;<samp>inline</samp>&rsquo; for functions defined inside a class scope.
d244 1
a244 1
functions will have linkage like inline functions; they just won&rsquo;t be
d246 2
a247 6
</p>
</dd>
<dt><code>-Wabi <span class="roman">(C, Objective-C, C++ and Objective-C++ only)</span></code></dt>
<dd><a name="index-Wabi"></a>
<a name="index-Wno_002dabi"></a>
<p>Warn when G++ generates code that is probably not compatible with the
d253 2
a254 2
</p>
<p>You should rewrite your code to avoid these warnings if you are
d257 5
a261 25
</p>
<p>The known incompatibilities in <samp>-fabi-version=2</samp> (the default) include:
</p>
<ul>
<li> A template with a non-type template parameter of reference type is
mangled incorrectly:
<div class="smallexample">
<pre class="smallexample">extern int N;
template &lt;int &amp;&gt; struct S {};
void n (S&lt;N&gt;) {2}
</pre></div>

<p>This is fixed in <samp>-fabi-version=3</samp>.
</p>
</li><li> SIMD vector types declared using <code>__attribute ((vector_size))</code> are
mangled in a non-standard way that does not allow for overloading of
functions taking vectors of different sizes.

<p>The mangling is changed in <samp>-fabi-version=4</samp>.
</p></li></ul>

<p>The known incompatibilities in <samp>-fabi-version=1</samp> include:
</p>
<ul>
<li> Incorrect handling of tail-padding for bit-fields.  G++ may attempt to
d264 4
a267 6
<div class="smallexample">
<pre class="smallexample">struct A { virtual void f(); int f1 : 1; };
struct B : public A { int f2 : 1; };
</pre></div>

<p>In this case, G++ will place <code>B::f2</code> into the same byte
d272 2
a273 2
</p>
</li><li> Incorrect handling of tail-padding for virtual bases.  G++ does not use
d276 5
a280 7
<div class="smallexample">
<pre class="smallexample">struct A { virtual void f(); char c1; };
struct B { B(); char c2; };
struct C : public A, public virtual B {};
</pre></div>

<p>In this case, G++ will not place <code>B</code> into the tail-padding for
d285 2
a286 2
</p>
</li><li> Incorrect handling of bit-fields with declared widths greater than that
d290 3
a292 5
<div class="smallexample">
<pre class="smallexample">union U { int i : 4096; };
</pre></div>

<p>Assuming that an <code>int</code> does not have 4096 bits, G++ will make the
a293 5
</p>
</li><li> Empty classes can be placed at incorrect offsets.  For example:

<div class="smallexample">
<pre class="smallexample">struct A {};
d295 1
a295 4
struct B {
  A a;
  virtual void f ();
};
d297 10
a306 4
struct C : public B, public A {};
</pre></div>

<p>G++ will place the <code>A</code> base class of <code>C</code> at a nonzero offset;
d309 2
a310 2
</p>
</li><li> Names of template functions whose types involve <code>typename</code> or
d313 11
a323 35
<div class="smallexample">
<pre class="smallexample">template &lt;typename Q&gt;
void f(typename Q::X) {}

template &lt;template &lt;typename&gt; class Q&gt;
void f(typename Q&lt;int&gt;::X) {}
</pre></div>

<p>Instantiations of these templates may be mangled incorrectly.
</p>
</li></ul>

<p>It also warns psABI related changes.  The known psABI changes at this
point include:
</p>
<ul>
<li> For SYSV/x86-64, when passing union with long double, it is changed to
pass in memory as specified in psABI.  For example:

<div class="smallexample">
<pre class="smallexample">union U {
  long double ld;
  int i;
};
</pre></div>

<p><code>union U</code> will always be passed in memory.
</p>
</li></ul>

</dd>
<dt><code>-Wctor-dtor-privacy <span class="roman">(C++ and Objective-C++ only)</span></code></dt>
<dd><a name="index-Wctor_002ddtor_002dprivacy"></a>
<a name="index-Wno_002dctor_002ddtor_002dprivacy"></a>
<p>Warn when a class seems unusable because all the constructors or
d326 6
a331 54
</p>
</dd>
<dt><code>-Wdelete-non-virtual-dtor <span class="roman">(C++ and Objective-C++ only)</span></code></dt>
<dd><a name="index-Wdelete_002dnon_002dvirtual_002ddtor"></a>
<a name="index-Wno_002ddelete_002dnon_002dvirtual_002ddtor"></a>
<p>Warn when &lsquo;<samp>delete</samp>&rsquo; is used to destroy an instance of a class that
has virtual functions and non-virtual destructor. It is unsafe to delete
an instance of a derived class through a pointer to a base class if the
base class does not have a virtual destructor.  This warning is enabled
by <samp>-Wall</samp>.
</p>
</dd>
<dt><code>-Wnarrowing <span class="roman">(C++ and Objective-C++ only)</span></code></dt>
<dd><a name="index-Wnarrowing"></a>
<a name="index-Wno_002dnarrowing"></a>
<p>Warn when a narrowing conversion prohibited by C++11 occurs within
&lsquo;<samp>{ }</samp>&rsquo;, e.g.
</p>
<div class="smallexample">
<pre class="smallexample">int i = { 2.2 }; // error: narrowing from double to int
</pre></div>

<p>This flag is included in <samp>-Wall</samp> and <samp>-Wc++11-compat</samp>.
</p>
<p>With -std=c++11, <samp>-Wno-narrowing</samp> suppresses the diagnostic
required by the standard.  Note that this does not affect the meaning
of well-formed code; narrowing conversions are still considered
ill-formed in SFINAE context.
</p>
</dd>
<dt><code>-Wnoexcept <span class="roman">(C++ and Objective-C++ only)</span></code></dt>
<dd><a name="index-Wnoexcept"></a>
<a name="index-Wno_002dnoexcept"></a>
<p>Warn when a noexcept-expression evaluates to false because of a call
to a function that does not have a non-throwing exception
specification (i.e. &lsquo;<samp>throw()</samp>&rsquo; or &lsquo;<samp>noexcept</samp>&rsquo;) but is known by
the compiler to never throw an exception.
</p>
</dd>
<dt><code>-Wnon-virtual-dtor <span class="roman">(C++ and Objective-C++ only)</span></code></dt>
<dd><a name="index-Wnon_002dvirtual_002ddtor"></a>
<a name="index-Wno_002dnon_002dvirtual_002ddtor"></a>
<p>Warn when a class has virtual functions and accessible non-virtual
destructor, in which case it would be possible but unsafe to delete
an instance of a derived class through a pointer to the base class.
This warning is also enabled if <samp>-Weffc++</samp> is specified.
</p>
</dd>
<dt><code>-Wreorder <span class="roman">(C++ and Objective-C++ only)</span></code></dt>
<dd><a name="index-Wreorder"></a>
<a name="index-Wno_002dreorder"></a>
<a name="index-reordering_002c-warning"></a>
<a name="index-warning-for-reordering-of-member-initializers"></a>
<p>Warn when the order of member initializers given in the code does not
d333 10
a342 13
</p>
<div class="smallexample">
<pre class="smallexample">struct A {
  int i;
  int j;
  A(): j (0), i (1) { }
};
</pre></div>

<p>The compiler will rearrange the member initializers for &lsquo;<samp>i</samp>&rsquo;
and &lsquo;<samp>j</samp>&rsquo; to match the declaration order of the members, emitting
a warning to that effect.  This warning is enabled by <samp>-Wall</samp>.
</p></dd>
d345 8
a352 11
<p>The following <samp>-W&hellip;</samp> options are not affected by <samp>-Wall</samp>.
</p>
<dl compact="compact">
<dt><code>-Weffc++ <span class="roman">(C++ and Objective-C++ only)</span></code></dt>
<dd><a name="index-Weffc_002b_002b"></a>
<a name="index-Wno_002deffc_002b_002b"></a>
<p>Warn about violations of the following style guidelines from Scott Meyers&rsquo;
<cite>Effective C++, Second Edition</cite> book:
</p>
<ul>
<li> Item 11:  Define a copy constructor and an assignment operator for classes
d355 3
a357 1
</li><li> Item 12:  Prefer initialization to assignment in constructors.
d359 1
a359 1
</li><li> Item 14:  Make destructors virtual in base classes.
d361 1
a361 1
</li><li> Item 15:  Have <code>operator=</code> return a reference to <code>*this</code>.
d363 1
a363 1
</li><li> Item 23:  Don&rsquo;t try to return a reference when you must return an object.
d365 2
a366 1
</li></ul>
d368 2
a369 5
<p>Also warn about violations of the following style guidelines from
Scott Meyers&rsquo; <cite>More Effective C++</cite> book:
</p>
<ul>
<li> Item 6:  Distinguish between prefix and postfix forms of increment and
d372 1
a372 1
</li><li> Item 7:  Never overload <code>&amp;&amp;</code>, <code>||</code>, or <code>,</code>.
d374 1
a374 1
</li></ul>
d376 2
a377 2
<p>When selecting this option, be aware that the standard library
headers do not obey all of these guidelines; use &lsquo;<samp>grep -v</samp>&rsquo;
d379 4
a382 6
</p>
</dd>
<dt><code>-Wstrict-null-sentinel <span class="roman">(C++ and Objective-C++ only)</span></code></dt>
<dd><a name="index-Wstrict_002dnull_002dsentinel"></a>
<a name="index-Wno_002dstrict_002dnull_002dsentinel"></a>
<p>Warn also about the use of an uncasted <code>NULL</code> as sentinel.  When
d385 1
a385 1
it is guaranteed to be of the same size as a pointer.  But this use is
d387 2
a388 6
</p>
</dd>
<dt><code>-Wno-non-template-friend <span class="roman">(C++ and Objective-C++ only)</span></code></dt>
<dd><a name="index-Wno_002dnon_002dtemplate_002dfriend"></a>
<a name="index-Wnon_002dtemplate_002dfriend"></a>
<p>Disable warnings when non-templatized friend functions are declared
d391 1
a391 1
&lsquo;<samp>friend foo(int)</samp>&rsquo;), the C++ language specification demands that the
d396 2
a397 2
behavior for G++, <samp>-Wnon-template-friend</samp> allows the compiler to
check existing code for potential trouble spots and is on by default.
d399 1
a399 1
<samp>-Wno-non-template-friend</samp>, which keeps the conformant compiler code
d401 4
a404 8
</p>
</dd>
<dt><code>-Wold-style-cast <span class="roman">(C++ and Objective-C++ only)</span></code></dt>
<dd><a name="index-Wold_002dstyle_002dcast"></a>
<a name="index-Wno_002dold_002dstyle_002dcast"></a>
<p>Warn if an old-style (C-style) cast to a non-void type is used within
a C++ program.  The new-style casts (&lsquo;<samp>dynamic_cast</samp>&rsquo;,
&lsquo;<samp>static_cast</samp>&rsquo;, &lsquo;<samp>reinterpret_cast</samp>&rsquo;, and &lsquo;<samp>const_cast</samp>&rsquo;) are
d406 2
a407 8
</p>
</dd>
<dt><code>-Woverloaded-virtual <span class="roman">(C++ and Objective-C++ only)</span></code></dt>
<dd><a name="index-Woverloaded_002dvirtual"></a>
<a name="index-Wno_002doverloaded_002dvirtual"></a>
<a name="index-overloaded-virtual-function_002c-warning"></a>
<a name="index-warning-for-overloaded-virtual-function"></a>
<p>Warn when a function declaration hides virtual functions from a
a408 10
</p>
<div class="smallexample">
<pre class="smallexample">struct A {
  virtual void f();
};

struct B: public A {
  void f(int);
};
</pre></div>
d410 9
a418 1
<p>the <code>A</code> class version of <code>f</code> is hidden in <code>B</code>, and code
d420 7
a426 13
</p>
<div class="smallexample">
<pre class="smallexample">B* b;
b-&gt;f();
</pre></div>

<p>will fail to compile.
</p>
</dd>
<dt><code>-Wno-pmf-conversions <span class="roman">(C++ and Objective-C++ only)</span></code></dt>
<dd><a name="index-Wno_002dpmf_002dconversions"></a>
<a name="index-Wpmf_002dconversions"></a>
<p>Disable the diagnostic for converting a bound pointer to member function
d428 2
a429 6
</p>
</dd>
<dt><code>-Wsign-promo <span class="roman">(C++ and Objective-C++ only)</span></code></dt>
<dd><a name="index-Wsign_002dpromo"></a>
<a name="index-Wno_002dsign_002dpromo"></a>
<p>Warn when overload resolution chooses a promotion from unsigned or
d433 14
a446 17
</p>
<div class="smallexample">
<pre class="smallexample">struct A {
  operator int ();
  A&amp; operator = (int);
};

main ()
{
  A a,b;
  a = b;
}
</pre></div>

<p>In this example, G++ will synthesize a default &lsquo;<samp>A&amp; operator =
(const A&amp;);</samp>&rsquo;, while cfront will use the user-defined &lsquo;<samp>operator =</samp>&rsquo;.
</p></dd>
d449 1
a449 7
<hr>
<div class="header">
<p>
Next: <a href="Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options.html#Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options" accesskey="n" rel="next">Objective-C and Objective-C++ Dialect Options</a>, Previous: <a href="C-Dialect-Options.html#C-Dialect-Options" accesskey="p" rel="prev">C Dialect Options</a>, Up: <a href="Invoking-GCC.html#Invoking-GCC" accesskey="u" rel="up">Invoking GCC</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>


a450 2
</body>
</html>
@

