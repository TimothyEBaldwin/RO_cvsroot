head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.18;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.18;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.24;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Debugging Options - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Invoking-GCC.html#Invoking-GCC" title="Invoking GCC">
<link rel="prev" href="Warning-Options.html#Warning-Options" title="Warning Options">
<link rel="next" href="Optimize-Options.html#Optimize-Options" title="Optimize Options">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Debugging-Options"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Optimize-Options.html#Optimize-Options">Optimize Options</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Warning-Options.html#Warning-Options">Warning Options</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Invoking-GCC.html#Invoking-GCC">Invoking GCC</a>
<hr>
</div>

<h3 class="section">3.9 Options for Debugging Your Program or GCC</h3>

<p><a name="index-options_002c-debugging-315"></a><a name="index-debugging-information-options-316"></a>
GCC has various special options that are used for debugging
either your program or GCC:

     <dl>
<dt><code>-g</code><dd><a name="index-g-317"></a>Produce debugging information in the operating system's native format
(stabs, COFF, XCOFF, or DWARF 2).  GDB can work with this debugging
information.

     <p>On most systems that use stabs format, <samp><span class="option">-g</span></samp> enables use of extra
debugging information that only GDB can use; this extra information
makes debugging work better in GDB but will probably make other debuggers
crash or
refuse to read the program.  If you want to control for certain whether
to generate the extra information, use <samp><span class="option">-gstabs+</span></samp>, <samp><span class="option">-gstabs</span></samp>,
<samp><span class="option">-gxcoff+</span></samp>, <samp><span class="option">-gxcoff</span></samp>, or <samp><span class="option">-gvms</span></samp> (see below).

     <p>GCC allows you to use <samp><span class="option">-g</span></samp> with
<samp><span class="option">-O</span></samp>.  The shortcuts taken by optimized code may occasionally
produce surprising results: some variables you declared may not exist
at all; flow of control may briefly move where you did not expect it;
some statements may not be executed because they compute constant
results or their values were already at hand; some statements may
execute in different places because they were moved out of loops.

     <p>Nevertheless it proves possible to debug optimized output.  This makes
it reasonable to use the optimizer for programs that might have bugs.

     <p>The following options are useful when GCC is generated with the
capability for more than one debugging format.

     <br><dt><code>-ggdb</code><dd><a name="index-ggdb-318"></a>Produce debugging information for use by GDB.  This means to use the
most expressive format available (DWARF 2, stabs, or the native format
if neither of those are supported), including GDB extensions if at all
possible.

     <br><dt><code>-gstabs</code><dd><a name="index-gstabs-319"></a>Produce debugging information in stabs format (if that is supported),
without GDB extensions.  This is the format used by DBX on most BSD
systems.  On MIPS, Alpha and System V Release 4 systems this option
produces stabs debugging output which is not understood by DBX or SDB. 
On System V Release 4 systems this option requires the GNU assembler.

     <br><dt><code>-feliminate-unused-debug-symbols</code><dd><a name="index-feliminate_002dunused_002ddebug_002dsymbols-320"></a>Produce debugging information in stabs format (if that is supported),
for only symbols that are actually used.

     <br><dt><code>-gstabs+</code><dd><a name="index-gstabs_002b-321"></a>Produce debugging information in stabs format (if that is supported),
using GNU extensions understood only by the GNU debugger (GDB).  The
use of these extensions is likely to make other debuggers crash or
refuse to read the program.

     <br><dt><code>-gcoff</code><dd><a name="index-gcoff-322"></a>Produce debugging information in COFF format (if that is supported). 
This is the format used by SDB on most System V systems prior to
System V Release 4.

     <br><dt><code>-gxcoff</code><dd><a name="index-gxcoff-323"></a>Produce debugging information in XCOFF format (if that is supported). 
This is the format used by the DBX debugger on IBM RS/6000 systems.

     <br><dt><code>-gxcoff+</code><dd><a name="index-gxcoff_002b-324"></a>Produce debugging information in XCOFF format (if that is supported),
using GNU extensions understood only by the GNU debugger (GDB).  The
use of these extensions is likely to make other debuggers crash or
refuse to read the program, and may cause assemblers other than the GNU
assembler (GAS) to fail with an error.

     <br><dt><code>-gdwarf-2</code><dd><a name="index-gdwarf_002d2-325"></a>Produce debugging information in DWARF version 2 format (if that is
supported).  This is the format used by DBX on IRIX 6.  With this
option, GCC uses features of DWARF version 3 when they are useful;
version 3 is upward compatible with version 2, but may still cause
problems for older debuggers.

     <br><dt><code>-gvms</code><dd><a name="index-gvms-326"></a>Produce debugging information in VMS debug format (if that is
supported).  This is the format used by DEBUG on VMS systems.

     <br><dt><code>-g</code><var>level</var><dt><code>-ggdb</code><var>level</var><dt><code>-gstabs</code><var>level</var><dt><code>-gcoff</code><var>level</var><dt><code>-gxcoff</code><var>level</var><dt><code>-gvms</code><var>level</var><dd>Request debugging information and also use <var>level</var> to specify how
much information.  The default level is 2.

     <p>Level 1 produces minimal information, enough for making backtraces in
parts of the program that you don't plan to debug.  This includes
descriptions of functions and external variables, but no information
about local variables and no line numbers.

     <p>Level 3 includes extra information, such as all the macro definitions
present in the program.  Some debuggers support macro expansion when
you use <samp><span class="option">-g3</span></samp>.

     <p><samp><span class="option">-gdwarf-2</span></samp> does not accept a concatenated debug level, because
GCC used to support an option <samp><span class="option">-gdwarf</span></samp> that meant to generate
debug information in version 1 of the DWARF format (which is very
different from version 2), and it would have been too confusing.  That
debug format is long obsolete, but the option cannot be changed now. 
Instead use an additional <samp><span class="option">-g</span><var>level</var></samp> option to change the
debug level for DWARF2.

     <br><dt><code>-feliminate-dwarf2-dups</code><dd><a name="index-feliminate_002ddwarf2_002ddups-327"></a>Compress DWARF2 debugging information by eliminating duplicated
information about each symbol.  This option only makes sense when
generating DWARF2 debugging information with <samp><span class="option">-gdwarf-2</span></samp>.

     <p><a name="index-g_t_0040command_007bprof_007d-328"></a><br><dt><code>-p</code><dd><a name="index-p-329"></a>Generate extra code to write profile information suitable for the
analysis program <samp><span class="command">prof</span></samp>.  You must use this option when compiling
the source files you want data about, and you must also use it when
linking.

     <p><a name="index-g_t_0040command_007bgprof_007d-330"></a><br><dt><code>-pg</code><dd><a name="index-pg-331"></a>Generate extra code to write profile information suitable for the
analysis program <samp><span class="command">gprof</span></samp>.  You must use this option when compiling
the source files you want data about, and you must also use it when
linking.

     <br><dt><code>-Q</code><dd><a name="index-Q-332"></a>Makes the compiler print out each function name as it is compiled, and
print some statistics about each pass when it finishes.

     <br><dt><code>-ftime-report</code><dd><a name="index-ftime_002dreport-333"></a>Makes the compiler print some statistics about the time consumed by each
pass when it finishes.

     <br><dt><code>-fmem-report</code><dd><a name="index-fmem_002dreport-334"></a>Makes the compiler print some statistics about permanent memory
allocation when it finishes.

     <br><dt><code>-fprofile-arcs</code><dd><a name="index-fprofile_002darcs-335"></a>Add code so that program flow <dfn>arcs</dfn> are instrumented.  During
execution the program records how many times each branch and call is
executed and how many times it is taken or returns.  When the compiled
program exits it saves this data to a file called
<samp><var>auxname</var><span class="file">.gcda</span></samp> for each source file.  The data may be used for
profile-directed optimizations (<samp><span class="option">-fbranch-probabilities</span></samp>), or for
test coverage analysis (<samp><span class="option">-ftest-coverage</span></samp>).  Each object file's
<var>auxname</var> is generated from the name of the output file, if
explicitly specified and it is not the final executable, otherwise it is
the basename of the source file.  In both cases any suffix is removed
(e.g. <samp><span class="file">foo.gcda</span></samp> for input file <samp><span class="file">dir/foo.c</span></samp>, or
<samp><span class="file">dir/foo.gcda</span></samp> for output file specified as <samp><span class="option">-o dir/foo.o</span></samp>). 
See <a href="Cross_002dprofiling.html#Cross_002dprofiling">Cross-profiling</a>.

     <p><a name="index-g_t_0040command_007bgcov_007d-336"></a><br><dt><code>--coverage</code><dd><a name="index-coverage-337"></a>
This option is used to compile and link code instrumented for coverage
analysis.  The option is a synonym for <samp><span class="option">-fprofile-arcs</span></samp>
<samp><span class="option">-ftest-coverage</span></samp> (when compiling) and <samp><span class="option">-lgcov</span></samp> (when
linking).  See the documentation for those options for more details.

          <ul>
<li>Compile the source files with <samp><span class="option">-fprofile-arcs</span></samp> plus optimization
and code generation options.  For test coverage analysis, use the
additional <samp><span class="option">-ftest-coverage</span></samp> option.  You do not need to profile
every source file in a program.

          <li>Link your object files with <samp><span class="option">-lgcov</span></samp> or <samp><span class="option">-fprofile-arcs</span></samp>
(the latter implies the former).

          <li>Run the program on a representative workload to generate the arc profile
information.  This may be repeated any number of times.  You can run
concurrent instances of your program, and provided that the file system
supports locking, the data files will be correctly updated.  Also
<code>fork</code> calls are detected and correctly handled (double counting
will not happen).

          <li>For profile-directed optimizations, compile the source files again with
the same optimization and code generation options plus
<samp><span class="option">-fbranch-probabilities</span></samp> (see <a href="Optimize-Options.html#Optimize-Options">Options that Control Optimization</a>).

          <li>For test coverage analysis, use <samp><span class="command">gcov</span></samp> to produce human readable
information from the <samp><span class="file">.gcno</span></samp> and <samp><span class="file">.gcda</span></samp> files.  Refer to the
<samp><span class="command">gcov</span></samp> documentation for further information.

     </ul>

     <p>With <samp><span class="option">-fprofile-arcs</span></samp>, for each function of your program GCC
creates a program flow graph, then finds a spanning tree for the graph. 
Only arcs that are not on the spanning tree have to be instrumented: the
compiler adds code to count the number of times that these arcs are
executed.  When an arc is the only exit or only entrance to a block, the
instrumentation code can be added to the block; otherwise, a new basic
block must be created to hold the instrumentation code.

     <br><dt><code>-ftest-coverage</code><dd><a name="index-ftest_002dcoverage-338"></a>Produce a notes file that the <samp><span class="command">gcov</span></samp> code-coverage utility
(see <a href="Gcov.html#Gcov"><samp><span class="command">gcov</span></samp>&mdash;a Test Coverage Program</a>) can use to
show program coverage.  Each source file's note file is called
<samp><var>auxname</var><span class="file">.gcno</span></samp>.  Refer to the <samp><span class="option">-fprofile-arcs</span></samp> option
above for a description of <var>auxname</var> and instructions on how to
generate test coverage data.  Coverage data will match the source files
more closely, if you do not optimize.

     <br><dt><code>-d</code><var>letters</var><br><dt><code>-fdump-rtl-</code><var>pass</var><dd><a name="index-d-339"></a>Says to make debugging dumps during compilation at times specified by
<var>letters</var>.    This is used for debugging the RTL-based passes of the
compiler.  The file names for most of the dumps are made by appending a
pass number and a word to the <var>dumpname</var>.  <var>dumpname</var> is generated
from the name of the output file, if explicitly specified and it is not
an executable, otherwise it is the basename of the source file.

     <p>Most debug dumps can be enabled either passing a letter to the <samp><span class="option">-d</span></samp>
option, or with a long <samp><span class="option">-fdump-rtl</span></samp> switch; here are the possible
letters for use in <var>letters</var> and <var>pass</var>, and their meanings:

          <dl>
<dt><code>-dA</code><dd><a name="index-dA-340"></a>Annotate the assembler output with miscellaneous debugging information.

          <br><dt><code>-db</code><dt><code>-fdump-rtl-bp</code><dd><a name="index-db-341"></a><a name="index-fdump_002drtl_002dbp-342"></a>Dump after computing branch probabilities, to <samp><var>file</var><span class="file">.09.bp</span></samp>.

          <br><dt><code>-dB</code><dt><code>-fdump-rtl-bbro</code><dd><a name="index-dB-343"></a><a name="index-fdump_002drtl_002dbbro-344"></a>Dump after block reordering, to <samp><var>file</var><span class="file">.30.bbro</span></samp>.

          <br><dt><code>-dc</code><dt><code>-fdump-rtl-combine</code><dd><a name="index-dc-345"></a><a name="index-fdump_002drtl_002dcombine-346"></a>Dump after instruction combination, to the file <samp><var>file</var><span class="file">.17.combine</span></samp>.

          <br><dt><code>-dC</code><dt><code>-fdump-rtl-ce1</code><dt><code>-fdump-rtl-ce2</code><dd><a name="index-dC-347"></a><a name="index-fdump_002drtl_002dce1-348"></a><a name="index-fdump_002drtl_002dce2-349"></a><samp><span class="option">-dC</span></samp> and <samp><span class="option">-fdump-rtl-ce1</span></samp> enable dumping after the
first if conversion, to the file <samp><var>file</var><span class="file">.11.ce1</span></samp>.  <samp><span class="option">-dC</span></samp>
and <samp><span class="option">-fdump-rtl-ce2</span></samp> enable dumping after the second if
conversion, to the file <samp><var>file</var><span class="file">.18.ce2</span></samp>.

          <br><dt><code>-dd</code><dt><code>-fdump-rtl-btl</code><dt><code>-fdump-rtl-dbr</code><dd><a name="index-dd-350"></a><a name="index-fdump_002drtl_002dbtl-351"></a><a name="index-fdump_002drtl_002ddbr-352"></a><samp><span class="option">-dd</span></samp> and <samp><span class="option">-fdump-rtl-btl</span></samp> enable dumping after branch
target load optimization, to <samp><var>file</var><span class="file">.31.btl</span></samp>.  <samp><span class="option">-dd</span></samp>
and <samp><span class="option">-fdump-rtl-dbr</span></samp> enable dumping after delayed branch
scheduling, to <samp><var>file</var><span class="file">.36.dbr</span></samp>.

          <br><dt><code>-dD</code><dd><a name="index-dD-353"></a>Dump all macro definitions, at the end of preprocessing, in addition to
normal output.

          <br><dt><code>-dE</code><dt><code>-fdump-rtl-ce3</code><dd><a name="index-dE-354"></a><a name="index-fdump_002drtl_002dce3-355"></a>Dump after the third if conversion, to <samp><var>file</var><span class="file">.28.ce3</span></samp>.

          <br><dt><code>-df</code><dt><code>-fdump-rtl-cfg</code><dt><code>-fdump-rtl-life</code><dd><a name="index-df-356"></a><a name="index-fdump_002drtl_002dcfg-357"></a><a name="index-fdump_002drtl_002dlife-358"></a><samp><span class="option">-df</span></samp> and <samp><span class="option">-fdump-rtl-cfg</span></samp> enable dumping after control
and data flow analysis, to <samp><var>file</var><span class="file">.08.cfg</span></samp>.  <samp><span class="option">-df</span></samp>
and <samp><span class="option">-fdump-rtl-cfg</span></samp> enable dumping dump after life analysis,
to <samp><var>file</var><span class="file">.16.life</span></samp>.

          <br><dt><code>-dg</code><dt><code>-fdump-rtl-greg</code><dd><a name="index-dg-359"></a><a name="index-fdump_002drtl_002dgreg-360"></a>Dump after global register allocation, to <samp><var>file</var><span class="file">.23.greg</span></samp>.

          <br><dt><code>-dG</code><dt><code>-fdump-rtl-gcse</code><dt><code>-fdump-rtl-bypass</code><dd><a name="index-dG-361"></a><a name="index-fdump_002drtl_002dgcse-362"></a><a name="index-fdump_002drtl_002dbypass-363"></a><samp><span class="option">-dG</span></samp> and <samp><span class="option">-fdump-rtl-gcse</span></samp> enable dumping after GCSE, to
<samp><var>file</var><span class="file">.05.gcse</span></samp>.  <samp><span class="option">-dG</span></samp> and <samp><span class="option">-fdump-rtl-bypass</span></samp>
enable dumping after jump bypassing and control flow optimizations, to
<samp><var>file</var><span class="file">.07.bypass</span></samp>.

          <br><dt><code>-dh</code><dt><code>-fdump-rtl-eh</code><dd><a name="index-dh-364"></a><a name="index-fdump_002drtl_002deh-365"></a>Dump after finalization of EH handling code, to <samp><var>file</var><span class="file">.02.eh</span></samp>.

          <br><dt><code>-di</code><dt><code>-fdump-rtl-sibling</code><dd><a name="index-di-366"></a><a name="index-fdump_002drtl_002dsibling-367"></a>Dump after sibling call optimizations, to <samp><var>file</var><span class="file">.01.sibling</span></samp>.

          <br><dt><code>-dj</code><dt><code>-fdump-rtl-jump</code><dd><a name="index-dj-368"></a><a name="index-fdump_002drtl_002djump-369"></a>Dump after the first jump optimization, to <samp><var>file</var><span class="file">.03.jump</span></samp>.

          <br><dt><code>-dk</code><dt><code>-fdump-rtl-stack</code><dd><a name="index-dk-370"></a><a name="index-fdump_002drtl_002dstack-371"></a>Dump after conversion from registers to stack, to <samp><var>file</var><span class="file">.33.stack</span></samp>.

          <br><dt><code>-dl</code><dt><code>-fdump-rtl-lreg</code><dd><a name="index-dl-372"></a><a name="index-fdump_002drtl_002dlreg-373"></a>Dump after local register allocation, to <samp><var>file</var><span class="file">.22.lreg</span></samp>.

          <br><dt><code>-dL</code><dt><code>-fdump-rtl-loop</code><dt><code>-fdump-rtl-loop2</code><dd><a name="index-dL-374"></a><a name="index-fdump_002drtl_002dloop-375"></a><a name="index-fdump_002drtl_002dloop2-376"></a><samp><span class="option">-dL</span></samp> and <samp><span class="option">-fdump-rtl-loop</span></samp> enable dumping after the first
loop optimization pass, to <samp><var>file</var><span class="file">.06.loop</span></samp>.  <samp><span class="option">-dL</span></samp> and
<samp><span class="option">-fdump-rtl-loop2</span></samp> enable dumping after the second pass, to
<samp><var>file</var><span class="file">.13.loop2</span></samp>.

          <br><dt><code>-dm</code><dt><code>-fdump-rtl-sms</code><dd><a name="index-dm-377"></a><a name="index-fdump_002drtl_002dsms-378"></a>Dump after modulo scheduling, to <samp><var>file</var><span class="file">.20.sms</span></samp>.

          <br><dt><code>-dM</code><dt><code>-fdump-rtl-mach</code><dd><a name="index-dM-379"></a><a name="index-fdump_002drtl_002dmach-380"></a>Dump after performing the machine dependent reorganization pass, to
<samp><var>file</var><span class="file">.35.mach</span></samp>.

          <br><dt><code>-dn</code><dt><code>-fdump-rtl-rnreg</code><dd><a name="index-dn-381"></a><a name="index-fdump_002drtl_002drnreg-382"></a>Dump after register renumbering, to <samp><var>file</var><span class="file">.29.rnreg</span></samp>.

          <br><dt><code>-dN</code><dt><code>-fdump-rtl-regmove</code><dd><a name="index-dN-383"></a><a name="index-fdump_002drtl_002dregmove-384"></a>Dump after the register move pass, to <samp><var>file</var><span class="file">.19.regmove</span></samp>.

          <br><dt><code>-do</code><dt><code>-fdump-rtl-postreload</code><dd><a name="index-do-385"></a><a name="index-fdump_002drtl_002dpostreload-386"></a>Dump after post-reload optimizations, to <samp><var>file</var><span class="file">.24.postreload</span></samp>.

          <br><dt><code>-dr</code><dt><code>-fdump-rtl-expand</code><dd><a name="index-dr-387"></a><a name="index-fdump_002drtl_002dexpand-388"></a>Dump after RTL generation, to <samp><var>file</var><span class="file">.00.expand</span></samp>.

          <br><dt><code>-dR</code><dt><code>-fdump-rtl-sched2</code><dd><a name="index-dR-389"></a><a name="index-fdump_002drtl_002dsched2-390"></a>Dump after the second scheduling pass, to <samp><var>file</var><span class="file">.32.sched2</span></samp>.

          <br><dt><code>-ds</code><dt><code>-fdump-rtl-cse</code><dd><a name="index-ds-391"></a><a name="index-fdump_002drtl_002dcse-392"></a>Dump after CSE (including the jump optimization that sometimes follows
CSE), to <samp><var>file</var><span class="file">.04.cse</span></samp>.

          <br><dt><code>-dS</code><dt><code>-fdump-rtl-sched</code><dd><a name="index-dS-393"></a><a name="index-fdump_002drtl_002dsched-394"></a>Dump after the first scheduling pass, to <samp><var>file</var><span class="file">.21.sched</span></samp>.

          <br><dt><code>-dt</code><dt><code>-fdump-rtl-cse2</code><dd><a name="index-dt-395"></a><a name="index-fdump_002drtl_002dcse2-396"></a>Dump after the second CSE pass (including the jump optimization that
sometimes follows CSE), to <samp><var>file</var><span class="file">.15.cse2</span></samp>.

          <br><dt><code>-dT</code><dt><code>-fdump-rtl-tracer</code><dd><a name="index-dT-397"></a><a name="index-fdump_002drtl_002dtracer-398"></a>Dump after running tracer, to <samp><var>file</var><span class="file">.12.tracer</span></samp>.

          <br><dt><code>-dV</code><dt><code>-fdump-rtl-vpt</code><dt><code>-fdump-rtl-vartrack</code><dd><a name="index-dV-399"></a><a name="index-fdump_002drtl_002dvpt-400"></a><a name="index-fdump_002drtl_002dvartrack-401"></a><samp><span class="option">-dV</span></samp> and <samp><span class="option">-fdump-rtl-vpt</span></samp> enable dumping after the value
profile transformations, to <samp><var>file</var><span class="file">.10.vpt</span></samp>.  <samp><span class="option">-dV</span></samp>
and <samp><span class="option">-fdump-rtl-vartrack</span></samp> enable dumping after variable tracking,
to <samp><var>file</var><span class="file">.34.vartrack</span></samp>.

          <br><dt><code>-dw</code><dt><code>-fdump-rtl-flow2</code><dd><a name="index-dw-402"></a><a name="index-fdump_002drtl_002dflow2-403"></a>Dump after the second flow pass, to <samp><var>file</var><span class="file">.26.flow2</span></samp>.

          <br><dt><code>-dz</code><dt><code>-fdump-rtl-peephole2</code><dd><a name="index-dz-404"></a><a name="index-fdump_002drtl_002dpeephole2-405"></a>Dump after the peephole pass, to <samp><var>file</var><span class="file">.27.peephole2</span></samp>.

          <br><dt><code>-dZ</code><dt><code>-fdump-rtl-web</code><dd><a name="index-dZ-406"></a><a name="index-fdump_002drtl_002dweb-407"></a>Dump after live range splitting, to <samp><var>file</var><span class="file">.14.web</span></samp>.

          <br><dt><code>-da</code><dt><code>-fdump-rtl-all</code><dd><a name="index-da-408"></a><a name="index-fdump_002drtl_002dall-409"></a>Produce all the dumps listed above.

          <br><dt><code>-dH</code><dd><a name="index-dH-410"></a>Produce a core dump whenever an error occurs.

          <br><dt><code>-dm</code><dd><a name="index-dm-411"></a>Print statistics on memory usage, at the end of the run, to
standard error.

          <br><dt><code>-dp</code><dd><a name="index-dp-412"></a>Annotate the assembler output with a comment indicating which
pattern and alternative was used.  The length of each instruction is
also printed.

          <br><dt><code>-dP</code><dd><a name="index-dP-413"></a>Dump the RTL in the assembler output as a comment before each instruction. 
Also turns on <samp><span class="option">-dp</span></samp> annotation.

          <br><dt><code>-dv</code><dd><a name="index-dv-414"></a>For each of the other indicated dump files (either with <samp><span class="option">-d</span></samp> or
<samp><span class="option">-fdump-rtl-</span><var>pass</var></samp>), dump a representation of the control flow
graph suitable for viewing with VCG to <samp><var>file</var><span class="file">.</span><var>pass</var><span class="file">.vcg</span></samp>.

          <br><dt><code>-dx</code><dd><a name="index-dx-415"></a>Just generate RTL for a function instead of compiling it.  Usually used
with &lsquo;<samp><span class="samp">r</span></samp>&rsquo; (<samp><span class="option">-fdump-rtl-expand</span></samp>).

          <br><dt><code>-dy</code><dd><a name="index-dy-416"></a>Dump debugging information during parsing, to standard error. 
</dl>

     <br><dt><code>-fdump-unnumbered</code><dd><a name="index-fdump_002dunnumbered-417"></a>When doing debugging dumps (see <samp><span class="option">-d</span></samp> option above), suppress instruction
numbers and line number note output.  This makes it more feasible to
use diff on debugging dumps for compiler invocations with different
options, in particular with and without <samp><span class="option">-g</span></samp>.

     <br><dt><code>-fdump-translation-unit </code><span class="roman">(C++ only)</span><dt><code>-fdump-translation-unit-</code><var>options</var> <span class="roman">(C++ only)</span><dd><a name="index-fdump_002dtranslation_002dunit-418"></a>Dump a representation of the tree structure for the entire translation
unit to a file.  The file name is made by appending <samp><span class="file">.tu</span></samp> to the
source file name.  If the &lsquo;<samp><span class="samp">-</span><var>options</var></samp>&rsquo; form is used, <var>options</var>
controls the details of the dump as described for the
<samp><span class="option">-fdump-tree</span></samp> options.

     <br><dt><code>-fdump-class-hierarchy </code><span class="roman">(C++ only)</span><dt><code>-fdump-class-hierarchy-</code><var>options</var> <span class="roman">(C++ only)</span><dd><a name="index-fdump_002dclass_002dhierarchy-419"></a>Dump a representation of each class's hierarchy and virtual function
table layout to a file.  The file name is made by appending <samp><span class="file">.class</span></samp>
to the source file name.  If the &lsquo;<samp><span class="samp">-</span><var>options</var></samp>&rsquo; form is used,
<var>options</var> controls the details of the dump as described for the
<samp><span class="option">-fdump-tree</span></samp> options.

     <br><dt><code>-fdump-ipa-</code><var>switch</var><dd><a name="index-fdump_002dipa-420"></a>Control the dumping at various stages of inter-procedural analysis
language tree to a file.  The file name is generated by appending a switch
specific suffix to the source file name.  The following dumps are possible:

          <dl>
<dt>&lsquo;<samp><span class="samp">all</span></samp>&rsquo;<dd>Enables all inter-procedural analysis dumps; currently the only produced
dump is the &lsquo;<samp><span class="samp">cgraph</span></samp>&rsquo; dump.

          <br><dt>&lsquo;<samp><span class="samp">cgraph</span></samp>&rsquo;<dd>Dumps information about call-graph optimization, unused function removal,
and inlining decisions. 
</dl>

     <br><dt><code>-fdump-tree-</code><var>switch</var><dt><code>-fdump-tree-</code><var>switch</var><code>-</code><var>options</var><dd><a name="index-fdump_002dtree-421"></a>Control the dumping at various stages of processing the intermediate
language tree to a file.  The file name is generated by appending a switch
specific suffix to the source file name.  If the &lsquo;<samp><span class="samp">-</span><var>options</var></samp>&rsquo;
form is used, <var>options</var> is a list of &lsquo;<samp><span class="samp">-</span></samp>&rsquo; separated options that
control the details of the dump.  Not all options are applicable to all
dumps, those which are not meaningful will be ignored.  The following
options are available

          <dl>
<dt>&lsquo;<samp><span class="samp">address</span></samp>&rsquo;<dd>Print the address of each node.  Usually this is not meaningful as it
changes according to the environment and source file.  Its primary use
is for tying up a dump file with a debug environment. 
<br><dt>&lsquo;<samp><span class="samp">slim</span></samp>&rsquo;<dd>Inhibit dumping of members of a scope or body of a function merely
because that scope has been reached.  Only dump such items when they
are directly reachable by some other path.  When dumping pretty-printed
trees, this option inhibits dumping the bodies of control structures. 
<br><dt>&lsquo;<samp><span class="samp">raw</span></samp>&rsquo;<dd>Print a raw representation of the tree.  By default, trees are
pretty-printed into a C-like representation. 
<br><dt>&lsquo;<samp><span class="samp">details</span></samp>&rsquo;<dd>Enable more detailed dumps (not honored by every dump option). 
<br><dt>&lsquo;<samp><span class="samp">stats</span></samp>&rsquo;<dd>Enable dumping various statistics about the pass (not honored by every dump
option). 
<br><dt>&lsquo;<samp><span class="samp">blocks</span></samp>&rsquo;<dd>Enable showing basic block boundaries (disabled in raw dumps). 
<br><dt>&lsquo;<samp><span class="samp">vops</span></samp>&rsquo;<dd>Enable showing virtual operands for every statement. 
<br><dt>&lsquo;<samp><span class="samp">lineno</span></samp>&rsquo;<dd>Enable showing line numbers for statements. 
<br><dt>&lsquo;<samp><span class="samp">uid</span></samp>&rsquo;<dd>Enable showing the unique ID (<code>DECL_UID</code>) for each variable. 
<br><dt>&lsquo;<samp><span class="samp">all</span></samp>&rsquo;<dd>Turn on all options, except <samp><span class="option">raw</span></samp>, <samp><span class="option">slim</span></samp> and <samp><span class="option">lineno</span></samp>. 
</dl>

     <p>The following tree dumps are possible:
          <dl>
<dt>&lsquo;<samp><span class="samp">original</span></samp>&rsquo;<dd>Dump before any tree based optimization, to <samp><var>file</var><span class="file">.original</span></samp>.

          <br><dt>&lsquo;<samp><span class="samp">optimized</span></samp>&rsquo;<dd>Dump after all tree based optimization, to <samp><var>file</var><span class="file">.optimized</span></samp>.

          <br><dt>&lsquo;<samp><span class="samp">inlined</span></samp>&rsquo;<dd>Dump after function inlining, to <samp><var>file</var><span class="file">.inlined</span></samp>.

          <br><dt>&lsquo;<samp><span class="samp">gimple</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dgimple-422"></a>Dump each function before and after the gimplification pass to a file.  The
file name is made by appending <samp><span class="file">.gimple</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">cfg</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dcfg-423"></a>Dump the control flow graph of each function to a file.  The file name is
made by appending <samp><span class="file">.cfg</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">vcg</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dvcg-424"></a>Dump the control flow graph of each function to a file in VCG format.  The
file name is made by appending <samp><span class="file">.vcg</span></samp> to the source file name.  Note
that if the file contains more than one function, the generated file cannot
be used directly by VCG.  You will need to cut and paste each function's
graph into its own separate file first.

          <br><dt>&lsquo;<samp><span class="samp">ch</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dch-425"></a>Dump each function after copying loop headers.  The file name is made by
appending <samp><span class="file">.ch</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">ssa</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dssa-426"></a>Dump SSA related information to a file.  The file name is made by appending
<samp><span class="file">.ssa</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">salias</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dsalias-427"></a>Dump structure aliasing variable information to a file.  This file name
is made by appending <samp><span class="file">.salias</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">alias</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dalias-428"></a>Dump aliasing information for each function.  The file name is made by
appending <samp><span class="file">.alias</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">ccp</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dccp-429"></a>Dump each function after CCP.  The file name is made by appending
<samp><span class="file">.ccp</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">storeccp</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dstoreccp-430"></a>Dump each function after STORE-CCP.  The file name is made by appending
<samp><span class="file">.storeccp</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">pre</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dpre-431"></a>Dump trees after partial redundancy elimination.  The file name is made
by appending <samp><span class="file">.pre</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">fre</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dfre-432"></a>Dump trees after full redundancy elimination.  The file name is made
by appending <samp><span class="file">.fre</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">copyprop</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dcopyprop-433"></a>Dump trees after copy propagation.  The file name is made
by appending <samp><span class="file">.copyprop</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">store_copyprop</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dstore_005fcopyprop-434"></a>Dump trees after store copy-propagation.  The file name is made
by appending <samp><span class="file">.store_copyprop</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">dce</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002ddce-435"></a>Dump each function after dead code elimination.  The file name is made by
appending <samp><span class="file">.dce</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">mudflap</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dmudflap-436"></a>Dump each function after adding mudflap instrumentation.  The file name is
made by appending <samp><span class="file">.mudflap</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">sra</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dsra-437"></a>Dump each function after performing scalar replacement of aggregates.  The
file name is made by appending <samp><span class="file">.sra</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">sink</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dsink-438"></a>Dump each function after performing code sinking.  The file name is made
by appending <samp><span class="file">.sink</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">dom</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002ddom-439"></a>Dump each function after applying dominator tree optimizations.  The file
name is made by appending <samp><span class="file">.dom</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">dse</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002ddse-440"></a>Dump each function after applying dead store elimination.  The file
name is made by appending <samp><span class="file">.dse</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">phiopt</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dphiopt-441"></a>Dump each function after optimizing PHI nodes into straightline code.  The file
name is made by appending <samp><span class="file">.phiopt</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">forwprop</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dforwprop-442"></a>Dump each function after forward propagating single use variables.  The file
name is made by appending <samp><span class="file">.forwprop</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">copyrename</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dcopyrename-443"></a>Dump each function after applying the copy rename optimization.  The file
name is made by appending <samp><span class="file">.copyrename</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">nrv</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dnrv-444"></a>Dump each function after applying the named return value optimization on
generic trees.  The file name is made by appending <samp><span class="file">.nrv</span></samp> to the source
file name.

          <br><dt>&lsquo;<samp><span class="samp">vect</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dvect-445"></a>Dump each function after applying vectorization of loops.  The file name is
made by appending <samp><span class="file">.vect</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">vrp</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dvrp-446"></a>Dump each function after Value Range Propagation (VRP).  The file name
is made by appending <samp><span class="file">.vrp</span></samp> to the source file name.

          <br><dt>&lsquo;<samp><span class="samp">all</span></samp>&rsquo;<dd><a name="index-fdump_002dtree_002dall-447"></a>Enable all the available tree dumps with the flags provided in this option. 
</dl>

     <br><dt><code>-ftree-vectorizer-verbose=</code><var>n</var><dd><a name="index-ftree_002dvectorizer_002dverbose-448"></a>This option controls the amount of debugging output the vectorizer prints. 
This information is written to standard error, unless <samp><span class="option">-fdump-tree-all</span></samp>
or <samp><span class="option">-fdump-tree-vect</span></samp> is specified, in which case it is output to the
usual dump listing file, <samp><span class="file">.vect</span></samp>.

     <br><dt><code>-frandom-seed=</code><var>string</var><dd><a name="index-frandom_002dstring-449"></a>This option provides a seed that GCC uses when it would otherwise use
random numbers.  It is used to generate certain symbol names
that have to be different in every compiled file.  It is also used to
place unique stamps in coverage data files and the object files that
produce them.  You can use the <samp><span class="option">-frandom-seed</span></samp> option to produce
reproducibly identical object files.

     <p>The <var>string</var> should be different for every file you compile.

     <br><dt><code>-fsched-verbose=</code><var>n</var><dd><a name="index-fsched_002dverbose-450"></a>On targets that use instruction scheduling, this option controls the
amount of debugging output the scheduler prints.  This information is
written to standard error, unless <samp><span class="option">-dS</span></samp> or <samp><span class="option">-dR</span></samp> is
specified, in which case it is output to the usual dump
listing file, <samp><span class="file">.sched</span></samp> or <samp><span class="file">.sched2</span></samp> respectively.  However
for <var>n</var> greater than nine, the output is always printed to standard
error.

     <p>For <var>n</var> greater than zero, <samp><span class="option">-fsched-verbose</span></samp> outputs the
same information as <samp><span class="option">-dRS</span></samp>.  For <var>n</var> greater than one, it
also output basic block probabilities, detailed ready list information
and unit/insn info.  For <var>n</var> greater than two, it includes RTL
at abort point, control-flow and regions info.  And for <var>n</var> over
four, <samp><span class="option">-fsched-verbose</span></samp> also includes dependence info.

     <br><dt><code>-save-temps</code><dd><a name="index-save_002dtemps-451"></a>Store the usual &ldquo;temporary&rdquo; intermediate files permanently; place them
in the current directory and name them based on the source file.  Thus,
compiling <samp><span class="file">foo.c</span></samp> with &lsquo;<samp><span class="samp">-c -save-temps</span></samp>&rsquo; would produce files
<samp><span class="file">foo.i</span></samp> and <samp><span class="file">foo.s</span></samp>, as well as <samp><span class="file">foo.o</span></samp>.  This creates a
preprocessed <samp><span class="file">foo.i</span></samp> output file even though the compiler now
normally uses an integrated preprocessor.

     <p>When used in combination with the <samp><span class="option">-x</span></samp> command line option,
<samp><span class="option">-save-temps</span></samp> is sensible enough to avoid over writing an
input source file with the same extension as an intermediate file. 
The corresponding intermediate file may be obtained by renaming the
source file before using <samp><span class="option">-save-temps</span></samp>.

     <br><dt><code>-time</code><dd><a name="index-time-452"></a>Report the CPU time taken by each subprocess in the compilation
sequence.  For C source files, this is the compiler proper and assembler
(plus the linker if linking is done).  The output looks like this:

     <pre class="smallexample">          # cc1 0.12 0.01
          # as 0.00 0.01
</pre>
     <p>The first number on each line is the &ldquo;user time&rdquo;, that is time spent
executing the program itself.  The second number is &ldquo;system time&rdquo;,
time spent executing operating system routines on behalf of the program. 
Both numbers are in seconds.

     <br><dt><code>-fvar-tracking</code><dd><a name="index-fvar_002dtracking-453"></a>Run variable tracking pass.  It computes where variables are stored at each
position in code.  Better debugging information is then generated
(if the debugging information format supports this information).

     <p>It is enabled by default when compiling with optimization (<samp><span class="option">-Os</span></samp>,
<samp><span class="option">-O</span></samp>, <samp><span class="option">-O2</span></samp>, ...), debugging information (<samp><span class="option">-g</span></samp>) and
the debug info format supports it.

     <br><dt><code>-print-file-name=</code><var>library</var><dd><a name="index-print_002dfile_002dname-454"></a>Print the full absolute name of the library file <var>library</var> that
would be used when linking&mdash;and don't do anything else.  With this
option, GCC does not compile or link anything; it just prints the
file name.

     <br><dt><code>-print-multi-directory</code><dd><a name="index-print_002dmulti_002ddirectory-455"></a>Print the directory name corresponding to the multilib selected by any
other switches present in the command line.  This directory is supposed
to exist in <samp><span class="env">GCC_EXEC_PREFIX</span></samp>.

     <br><dt><code>-print-multi-lib</code><dd><a name="index-print_002dmulti_002dlib-456"></a>Print the mapping from multilib directory names to compiler switches
that enable them.  The directory name is separated from the switches by
&lsquo;<samp><span class="samp">;</span></samp>&rsquo;, and each switch starts with an &lsquo;<samp><span class="samp">@@</span></samp>&rsquo; instead of the
&lsquo;<samp><span class="samp">-</span></samp>&rsquo;, without spaces between multiple switches.  This is supposed to
ease shell-processing.

     <br><dt><code>-print-prog-name=</code><var>program</var><dd><a name="index-print_002dprog_002dname-457"></a>Like <samp><span class="option">-print-file-name</span></samp>, but searches for a program such as &lsquo;<samp><span class="samp">cpp</span></samp>&rsquo;.

     <br><dt><code>-print-libgcc-file-name</code><dd><a name="index-print_002dlibgcc_002dfile_002dname-458"></a>Same as <samp><span class="option">-print-file-name=libgcc.a</span></samp>.

     <p>This is useful when you use <samp><span class="option">-nostdlib</span></samp> or <samp><span class="option">-nodefaultlibs</span></samp>
but you do want to link with <samp><span class="file">libgcc.a</span></samp>.  You can do

     <pre class="smallexample">          gcc -nostdlib <var>files</var>... `gcc -print-libgcc-file-name`
</pre>
     <br><dt><code>-print-search-dirs</code><dd><a name="index-print_002dsearch_002ddirs-459"></a>Print the name of the configured installation directory and a list of
program and library directories <samp><span class="command">gcc</span></samp> will search&mdash;and don't do anything else.

     <p>This is useful when <samp><span class="command">gcc</span></samp> prints the error message
&lsquo;<samp><span class="samp">installation problem, cannot exec cpp0: No such file or directory</span></samp>&rsquo;. 
To resolve this you either need to put <samp><span class="file">cpp0</span></samp> and the other compiler
components where <samp><span class="command">gcc</span></samp> expects to find them, or you can set the environment
variable <samp><span class="env">GCC_EXEC_PREFIX</span></samp> to the directory where you installed them. 
Don't forget the trailing &lsquo;<samp><span class="samp">/</span></samp>&rsquo;. 
See <a href="Environment-Variables.html#Environment-Variables">Environment Variables</a>.

     <br><dt><code>-dumpmachine</code><dd><a name="index-dumpmachine-460"></a>Print the compiler's target machine (for example,
&lsquo;<samp><span class="samp">i686-pc-linux-gnu</span></samp>&rsquo;)&mdash;and don't do anything else.

     <br><dt><code>-dumpversion</code><dd><a name="index-dumpversion-461"></a>Print the compiler version (for example, &lsquo;<samp><span class="samp">3.0</span></samp>&rsquo;)&mdash;and don't do
anything else.

     <br><dt><code>-dumpspecs</code><dd><a name="index-dumpspecs-462"></a>Print the compiler's built-in specs&mdash;and don't do anything else.  (This
is used when GCC itself is being built.)  See <a href="Spec-Files.html#Spec-Files">Spec Files</a>.

     <br><dt><code>-feliminate-unused-debug-types</code><dd><a name="index-feliminate_002dunused_002ddebug_002dtypes-463"></a>Normally, when producing DWARF2 output, GCC will emit debugging
information for all types declared in a compilation
unit, regardless of whether or not they are actually used
in that compilation unit.  Sometimes this is useful, such as
if, in the debugger, you want to cast a value to a type that is
not actually used in your program (but is declared).  More often,
however, this results in a significant amount of wasted space. 
With this option, GCC will avoid producing debug symbol output
for types that are nowhere used in the source file being compiled. 
</dl>

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Debugging Options</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Debugging Options">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Debugging Options">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Invoking-GCC.html#Invoking-GCC" rel="up" title="Invoking GCC">
<link href="Optimize-Options.html#Optimize-Options" rel="next" title="Optimize Options">
<link href="Warning-Options.html#Warning-Options" rel="prev" title="Warning Options">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="Optimize-Options.html#Optimize-Options" accesskey="n" rel="next">Optimize Options</a>, Previous: <a href="Warning-Options.html#Warning-Options" accesskey="p" rel="prev">Warning Options</a>, Up: <a href="Invoking-GCC.html#Invoking-GCC" accesskey="u" rel="up">Invoking GCC</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
d55 1
a55 2
<hr>
<a name="Options-for-Debugging-Your-Program-or-GCC"></a>
a56 2
<a name="index-options_002c-debugging"></a>
<a name="index-debugging-information-options"></a>
d58 2
a59 1
<p>GCC has various special options that are used for debugging
d61 3
a63 5
</p>
<dl compact="compact">
<dt><code>-g</code></dt>
<dd><a name="index-g"></a>
<p>Produce debugging information in the operating system&rsquo;s native format
d66 2
a67 2
</p>
<p>On most systems that use stabs format, <samp>-g</samp> enables use of extra
d72 5
a76 5
to generate the extra information, use <samp>-gstabs+</samp>, <samp>-gstabs</samp>,
<samp>-gxcoff+</samp>, <samp>-gxcoff</samp>, or <samp>-gvms</samp> (see below).
</p>
<p>GCC allows you to use <samp>-g</samp> with
<samp>-O</samp>.  The shortcuts taken by optimized code may occasionally
d82 2
a83 2
</p>
<p>Nevertheless it proves possible to debug optimized output.  This makes
d85 2
a86 2
</p>
<p>The following options are useful when GCC is generated with the
d88 2
a89 5
</p>
</dd>
<dt><code>-ggdb</code></dt>
<dd><a name="index-ggdb"></a>
<p>Produce debugging information for use by GDB.  This means to use the
d93 2
a94 5
</p>
</dd>
<dt><code>-gstabs</code></dt>
<dd><a name="index-gstabs"></a>
<p>Produce debugging information in stabs format (if that is supported),
d97 1
a97 1
produces stabs debugging output that is not understood by DBX or SDB.
d99 2
a100 5
</p>
</dd>
<dt><code>-feliminate-unused-debug-symbols</code></dt>
<dd><a name="index-feliminate_002dunused_002ddebug_002dsymbols"></a>
<p>Produce debugging information in stabs format (if that is supported),
d102 2
a103 24
</p>
</dd>
<dt><code>-femit-class-debug-always</code></dt>
<dd><p>Instead of emitting debugging information for a C++ class in only one
object file, emit it in all object files using the class.  This option
should be used only with debuggers that are unable to handle the way GCC
normally emits debugging information for classes because using this
option will increase the size of debugging information by as much as a
factor of two.
</p>
</dd>
<dt><code>-fno-debug-types-section</code></dt>
<dd><a name="index-fno_002ddebug_002dtypes_002dsection"></a>
<a name="index-fdebug_002dtypes_002dsection"></a>
<p>By default when using DWARF v4 or higher type DIEs will be put into
their own .debug_types section instead of making them part of the
.debug_info section.  It is more efficient to put them in a separate
comdat sections since the linker will then be able to remove duplicates.
But not all DWARF consumers support .debug_types sections yet.
</p>
</dd>
<dt><code>-gstabs+</code></dt>
<dd><a name="index-gstabs_002b"></a>
<p>Produce debugging information in stabs format (if that is supported),
d107 2
a108 5
</p>
</dd>
<dt><code>-gcoff</code></dt>
<dd><a name="index-gcoff"></a>
<p>Produce debugging information in COFF format (if that is supported).
d111 2
a112 5
</p>
</dd>
<dt><code>-gxcoff</code></dt>
<dd><a name="index-gxcoff"></a>
<p>Produce debugging information in XCOFF format (if that is supported).
d114 2
a115 5
</p>
</dd>
<dt><code>-gxcoff+</code></dt>
<dd><a name="index-gxcoff_002b"></a>
<p>Produce debugging information in XCOFF format (if that is supported),
d120 8
a127 47
</p>
</dd>
<dt><code>-gdwarf-<var>version</var></code></dt>
<dd><a name="index-gdwarf_002dversion"></a>
<p>Produce debugging information in DWARF format (if that is
supported).  This is the format used by DBX on IRIX 6.  The value
of <var>version</var> may be either 2, 3 or 4; the default version is 2.
</p>
<p>Note that with DWARF version 2 some ports require, and will always
use, some non-conflicting DWARF 3 extensions in the unwind tables.
</p>
<p>Version 4 may require GDB 7.0 and <samp>-fvar-tracking-assignments</samp>
for maximum benefit.
</p>
</dd>
<dt><code>-grecord-gcc-switches</code></dt>
<dd><a name="index-grecord_002dgcc_002dswitches"></a>
<p>This switch causes the command-line options used to invoke the
compiler that may affect code generation to be appended to the
DW_AT_producer attribute in DWARF debugging information.  The options
are concatenated with spaces separating them from each other and from
the compiler version.  See also <samp>-frecord-gcc-switches</samp> for another
way of storing compiler options into the object file.
</p>
</dd>
<dt><code>-gno-record-gcc-switches</code></dt>
<dd><a name="index-gno_002drecord_002dgcc_002dswitches"></a>
<p>Disallow appending command-line options to the DW_AT_producer attribute
in DWARF debugging information.  This is the default.
</p>
</dd>
<dt><code>-gstrict-dwarf</code></dt>
<dd><a name="index-gstrict_002ddwarf"></a>
<p>Disallow using extensions of later DWARF standard version than selected
with <samp>-gdwarf-<var>version</var></samp>.  On most targets using non-conflicting
DWARF extensions from later standard versions is allowed.
</p>
</dd>
<dt><code>-gno-strict-dwarf</code></dt>
<dd><a name="index-gno_002dstrict_002ddwarf"></a>
<p>Allow using extensions of later DWARF standard version than selected with
<samp>-gdwarf-<var>version</var></samp>.
</p>
</dd>
<dt><code>-gvms</code></dt>
<dd><a name="index-gvms"></a>
<p>Produce debugging information in VMS debug format (if that is
d129 2
a130 9
</p>
</dd>
<dt><code>-g<var>level</var></code></dt>
<dt><code>-ggdb<var>level</var></code></dt>
<dt><code>-gstabs<var>level</var></code></dt>
<dt><code>-gcoff<var>level</var></code></dt>
<dt><code>-gxcoff<var>level</var></code></dt>
<dt><code>-gvms<var>level</var></code></dt>
<dd><p>Request debugging information and also use <var>level</var> to specify how
d132 3
a134 6
</p>
<p>Level 0 produces no debug information at all.  Thus, <samp>-g0</samp> negates
<samp>-g</samp>.
</p>
<p>Level 1 produces minimal information, enough for making backtraces in
parts of the program that you don&rsquo;t plan to debug.  This includes
d137 2
a138 2
</p>
<p>Level 3 includes extra information, such as all the macro definitions
d140 4
a143 4
you use <samp>-g3</samp>.
</p>
<p><samp>-gdwarf-2</samp> does not accept a concatenated debug level, because
GCC used to support an option <samp>-gdwarf</samp> that meant to generate
d146 5
a150 70
debug format is long obsolete, but the option cannot be changed now.
Instead use an additional <samp>-g<var>level</var></samp> option to change the
debug level for DWARF.
</p>
</dd>
<dt><code>-gtoggle</code></dt>
<dd><a name="index-gtoggle"></a>
<p>Turn off generation of debug info, if leaving out this option would have
generated it, or turn it on at level 2 otherwise.  The position of this
argument in the command line does not matter, it takes effect after all
other options are processed, and it does so only once, no matter how
many times it is given.  This is mainly intended to be used with
<samp>-fcompare-debug</samp>.
</p>
</dd>
<dt><code>-fdump-final-insns<span class="roman">[</span>=<var>file</var><span class="roman">]</span></code></dt>
<dd><a name="index-fdump_002dfinal_002dinsns"></a>
<p>Dump the final internal representation (RTL) to <var>file</var>.  If the
optional argument is omitted (or if <var>file</var> is <code>.</code>), the name
of the dump file will be determined by appending <code>.gkd</code> to the
compilation output file name.
</p>
</dd>
<dt><code>-fcompare-debug<span class="roman">[</span>=<var>opts</var><span class="roman">]</span></code></dt>
<dd><a name="index-fcompare_002ddebug"></a>
<a name="index-fno_002dcompare_002ddebug"></a>
<p>If no error occurs during compilation, run the compiler a second time,
adding <var>opts</var> and <samp>-fcompare-debug-second</samp> to the arguments
passed to the second compilation.  Dump the final internal
representation in both compilations, and print an error if they differ.
</p>
<p>If the equal sign is omitted, the default <samp>-gtoggle</samp> is used.
</p>
<p>The environment variable <code>GCC_COMPARE_DEBUG</code>, if defined, non-empty
and nonzero, implicitly enables <samp>-fcompare-debug</samp>.  If
<code>GCC_COMPARE_DEBUG</code> is defined to a string starting with a dash,
then it is used for <var>opts</var>, otherwise the default <samp>-gtoggle</samp>
is used.
</p>
<p><samp>-fcompare-debug=</samp>, with the equal sign but without <var>opts</var>,
is equivalent to <samp>-fno-compare-debug</samp>, which disables the dumping
of the final representation and the second compilation, preventing even
<code>GCC_COMPARE_DEBUG</code> from taking effect.
</p>
<p>To verify full coverage during <samp>-fcompare-debug</samp> testing, set
<code>GCC_COMPARE_DEBUG</code> to say &lsquo;<samp>-fcompare-debug-not-overridden</samp>&rsquo;,
which GCC will reject as an invalid option in any actual compilation
(rather than preprocessing, assembly or linking).  To get just a
warning, setting <code>GCC_COMPARE_DEBUG</code> to &lsquo;<samp>-w%n-fcompare-debug
not overridden</samp>&rsquo; will do.
</p>
</dd>
<dt><code>-fcompare-debug-second</code></dt>
<dd><a name="index-fcompare_002ddebug_002dsecond"></a>
<p>This option is implicitly passed to the compiler for the second
compilation requested by <samp>-fcompare-debug</samp>, along with options to
silence warnings, and omitting other options that would cause
side-effect compiler outputs to files or to the standard output.  Dump
files and preserved temporary files are renamed so as to contain the
<code>.gk</code> additional extension during the second compilation, to avoid
overwriting those generated by the first.
</p>
<p>When this option is passed to the compiler driver, it causes the
<em>first</em> compilation to be skipped, which makes it useful for little
other than debugging the compiler proper.
</p>
</dd>
<dt><code>-feliminate-dwarf2-dups</code></dt>
<dd><a name="index-feliminate_002ddwarf2_002ddups"></a>
<p>Compress DWARF2 debugging information by eliminating duplicated
d152 4
a155 106
generating DWARF2 debugging information with <samp>-gdwarf-2</samp>.
</p>
</dd>
<dt><code>-femit-struct-debug-baseonly</code></dt>
<dd><p>Emit debug information for struct-like types
only when the base name of the compilation source file
matches the base name of file in which the struct was defined.
</p>
<p>This option substantially reduces the size of debugging information,
but at significant potential loss in type information to the debugger.
See <samp>-femit-struct-debug-reduced</samp> for a less aggressive option.
See <samp>-femit-struct-debug-detailed</samp> for more detailed control.
</p>
<p>This option works only with DWARF 2.
</p>
</dd>
<dt><code>-femit-struct-debug-reduced</code></dt>
<dd><p>Emit debug information for struct-like types
only when the base name of the compilation source file
matches the base name of file in which the type was defined,
unless the struct is a template or defined in a system header.
</p>
<p>This option significantly reduces the size of debugging information,
with some potential loss in type information to the debugger.
See <samp>-femit-struct-debug-baseonly</samp> for a more aggressive option.
See <samp>-femit-struct-debug-detailed</samp> for more detailed control.
</p>
<p>This option works only with DWARF 2.
</p>
</dd>
<dt><code>-femit-struct-debug-detailed<span class="roman">[</span>=<var>spec-list</var><span class="roman">]</span></code></dt>
<dd><p>Specify the struct-like types
for which the compiler will generate debug information.
The intent is to reduce duplicate struct debug information
between different object files within the same program.
</p>
<p>This option is a detailed version of
<samp>-femit-struct-debug-reduced</samp> and <samp>-femit-struct-debug-baseonly</samp>,
which will serve for most needs.
</p>
<p>A specification has the syntax<br>
[&lsquo;<samp>dir:</samp>&rsquo;|&lsquo;<samp>ind:</samp>&rsquo;][&lsquo;<samp>ord:</samp>&rsquo;|&lsquo;<samp>gen:</samp>&rsquo;](&lsquo;<samp>any</samp>&rsquo;|&lsquo;<samp>sys</samp>&rsquo;|&lsquo;<samp>base</samp>&rsquo;|&lsquo;<samp>none</samp>&rsquo;)
</p>
<p>The optional first word limits the specification to
structs that are used directly (&lsquo;<samp>dir:</samp>&rsquo;) or used indirectly (&lsquo;<samp>ind:</samp>&rsquo;).
A struct type is used directly when it is the type of a variable, member.
Indirect uses arise through pointers to structs.
That is, when use of an incomplete struct would be legal, the use is indirect.
An example is
&lsquo;<samp>struct one direct; struct two * indirect;</samp>&rsquo;.
</p>
<p>The optional second word limits the specification to
ordinary structs (&lsquo;<samp>ord:</samp>&rsquo;) or generic structs (&lsquo;<samp>gen:</samp>&rsquo;).
Generic structs are a bit complicated to explain.
For C++, these are non-explicit specializations of template classes,
or non-template classes within the above.
Other programming languages have generics,
but &lsquo;<samp>-femit-struct-debug-detailed</samp>&rsquo; does not yet implement them.
</p>
<p>The third word specifies the source files for those
structs for which the compiler will emit debug information.
The values &lsquo;<samp>none</samp>&rsquo; and &lsquo;<samp>any</samp>&rsquo; have the normal meaning.
The value &lsquo;<samp>base</samp>&rsquo; means that
the base of name of the file in which the type declaration appears
must match the base of the name of the main compilation file.
In practice, this means that
types declared in <samp>foo.c</samp> and <samp>foo.h</samp> will have debug information,
but types declared in other header will not.
The value &lsquo;<samp>sys</samp>&rsquo; means those types satisfying &lsquo;<samp>base</samp>&rsquo;
or declared in system or compiler headers.
</p>
<p>You may need to experiment to determine the best settings for your application.
</p>
<p>The default is &lsquo;<samp>-femit-struct-debug-detailed=all</samp>&rsquo;.
</p>
<p>This option works only with DWARF 2.
</p>
</dd>
<dt><code>-fno-merge-debug-strings</code></dt>
<dd><a name="index-fmerge_002ddebug_002dstrings"></a>
<a name="index-fno_002dmerge_002ddebug_002dstrings"></a>
<p>Direct the linker to not merge together strings in the debugging
information that are identical in different object files.  Merging is
not supported by all assemblers or linkers.  Merging decreases the size
of the debug information in the output file at the cost of increasing
link processing time.  Merging is enabled by default.
</p>
</dd>
<dt><code>-fdebug-prefix-map=<var>old</var>=<var>new</var></code></dt>
<dd><a name="index-fdebug_002dprefix_002dmap"></a>
<p>When compiling files in directory <samp><var>old</var></samp>, record debugging
information describing them as in <samp><var>new</var></samp> instead.
</p>
</dd>
<dt><code>-fno-dwarf2-cfi-asm</code></dt>
<dd><a name="index-fdwarf2_002dcfi_002dasm"></a>
<a name="index-fno_002ddwarf2_002dcfi_002dasm"></a>
<p>Emit DWARF 2 unwind info as compiler generated <code>.eh_frame</code> section
instead of using GAS <code>.cfi_*</code> directives.
</p>
<a name="index-prof"></a>
</dd>
<dt><code>-p</code></dt>
<dd><a name="index-p"></a>
<p>Generate extra code to write profile information suitable for the
analysis program <code>prof</code>.  You must use this option when compiling
d158 3
a160 7
</p>
<a name="index-gprof"></a>
</dd>
<dt><code>-pg</code></dt>
<dd><a name="index-pg"></a>
<p>Generate extra code to write profile information suitable for the
analysis program <code>gprof</code>.  You must use this option when compiling
d163 2
a164 5
</p>
</dd>
<dt><code>-Q</code></dt>
<dd><a name="index-Q"></a>
<p>Makes the compiler print out each function name as it is compiled, and
d166 2
a167 5
</p>
</dd>
<dt><code>-ftime-report</code></dt>
<dd><a name="index-ftime_002dreport"></a>
<p>Makes the compiler print some statistics about the time consumed by each
d169 2
a170 5
</p>
</dd>
<dt><code>-fmem-report</code></dt>
<dd><a name="index-fmem_002dreport"></a>
<p>Makes the compiler print some statistics about permanent memory
d172 2
a173 45
</p>
</dd>
<dt><code>-fpre-ipa-mem-report</code></dt>
<dd><a name="index-fpre_002dipa_002dmem_002dreport"></a>
</dd>
<dt><code>-fpost-ipa-mem-report</code></dt>
<dd><a name="index-fpost_002dipa_002dmem_002dreport"></a>
<p>Makes the compiler print some statistics about permanent memory
allocation before or after interprocedural optimization.
</p>
</dd>
<dt><code>-fstack-usage</code></dt>
<dd><a name="index-fstack_002dusage"></a>
<p>Makes the compiler output stack usage information for the program, on a
per-function basis.  The filename for the dump is made by appending
<samp>.su</samp> to the <var>auxname</var>.  <var>auxname</var> is generated from the name of
the output file, if explicitly specified and it is not an executable,
otherwise it is the basename of the source file.  An entry is made up
of three fields:
</p>
<ul>
<li> The name of the function.
</li><li> A number of bytes.
</li><li> One or more qualifiers: <code>static</code>, <code>dynamic</code>, <code>bounded</code>.
</li></ul>

<p>The qualifier <code>static</code> means that the function manipulates the stack
statically: a fixed number of bytes are allocated for the frame on function
entry and released on function exit; no stack adjustments are otherwise made
in the function.  The second field is this fixed number of bytes.
</p>
<p>The qualifier <code>dynamic</code> means that the function manipulates the stack
dynamically: in addition to the static allocation described above, stack
adjustments are made in the body of the function, for example to push/pop
arguments around function calls.  If the qualifier <code>bounded</code> is also
present, the amount of these adjustments is bounded at compile time and
the second field is an upper bound of the total amount of stack used by
the function.  If it is not present, the amount of these adjustments is
not bounded at compile time and the second field only represents the
bounded part.
</p>
</dd>
<dt><code>-fprofile-arcs</code></dt>
<dd><a name="index-fprofile_002darcs"></a>
<p>Add code so that program flow <em>arcs</em> are instrumented.  During
d177 3
a179 3
<samp><var>auxname</var>.gcda</samp> for each source file.  The data may be used for
profile-directed optimizations (<samp>-fbranch-probabilities</samp>), or for
test coverage analysis (<samp>-ftest-coverage</samp>).  Each object file&rsquo;s
d183 2
a184 2
(e.g. <samp>foo.gcda</samp> for input file <samp>dir/foo.c</samp>, or
<samp>dir/foo.gcda</samp> for output file specified as <samp>-o dir/foo.o</samp>).
d186 5
a190 9
</p>
<a name="index-gcov"></a>
</dd>
<dt><code>--coverage</code></dt>
<dd><a name="index-coverage"></a>

<p>This option is used to compile and link code instrumented for coverage
analysis.  The option is a synonym for <samp>-fprofile-arcs</samp>
<samp>-ftest-coverage</samp> (when compiling) and <samp>-lgcov</samp> (when
d192 3
a194 3
</p>
<ul>
<li> Compile the source files with <samp>-fprofile-arcs</samp> plus optimization
d196 1
a196 1
additional <samp>-ftest-coverage</samp> option.  You do not need to profile
d199 1
a199 1
</li><li> Link your object files with <samp>-lgcov</samp> or <samp>-fprofile-arcs</samp>
d202 1
a202 1
</li><li> Run the program on a representative workload to generate the arc profile
d209 1
a209 1
</li><li> For profile-directed optimizations, compile the source files again with
d211 1
a211 2
<samp>-fbranch-probabilities</samp> (see <a href="Optimize-Options.html#Optimize-Options">Options that
Control Optimization</a>).
d213 3
a215 3
</li><li> For test coverage analysis, use <code>gcov</code> to produce human readable
information from the <samp>.gcno</samp> and <samp>.gcda</samp> files.  Refer to the
<code>gcov</code> documentation for further information.
d217 1
a217 1
</li></ul>
d219 2
a220 2
<p>With <samp>-fprofile-arcs</samp>, for each function of your program GCC
creates a program flow graph, then finds a spanning tree for the graph.
d226 5
a230 8
</p>
</dd>
<dt><code>-ftest-coverage</code></dt>
<dd><a name="index-ftest_002dcoverage"></a>
<p>Produce a notes file that the <code>gcov</code> code-coverage utility
(see <a href="Gcov.html#Gcov"><code>gcov</code>&mdash;a Test Coverage Program</a>) can use to
show program coverage.  Each source file&rsquo;s note file is called
<samp><var>auxname</var>.gcno</samp>.  Refer to the <samp>-fprofile-arcs</samp> option
d234 32
a265 428
</p>
</dd>
<dt><code>-fdbg-cnt-list</code></dt>
<dd><a name="index-fdbg_002dcnt_002dlist"></a>
<p>Print the name and the counter upper bound for all debug counters.
</p>

</dd>
<dt><code>-fdbg-cnt=<var>counter-value-list</var></code></dt>
<dd><a name="index-fdbg_002dcnt"></a>
<p>Set the internal debug counter upper bound.  <var>counter-value-list</var>
is a comma-separated list of <var>name</var>:<var>value</var> pairs
which sets the upper bound of each debug counter <var>name</var> to <var>value</var>.
All debug counters have the initial upper bound of <var>UINT_MAX</var>,
thus dbg_cnt() returns true always unless the upper bound is set by this option.
e.g. With -fdbg-cnt=dce:10,tail_call:0
dbg_cnt(dce) will return true only for first 10 invocations
</p>
</dd>
<dt><code>-fenable-<var>kind</var>-<var>pass</var></code></dt>
<dt><code>-fdisable-<var>kind</var>-<var>pass</var>=<var>range-list</var></code></dt>
<dd><a name="index-fdisable_002d"></a>
<a name="index-fenable_002d"></a>

<p>This is a set of debugging options that are used to explicitly disable/enable
optimization passes. For compiler users, regular options for enabling/disabling
passes should be used instead.
</p>
<ul>
<li> -fdisable-ipa-<var>pass</var>
Disable ipa pass <var>pass</var>. <var>pass</var> is the pass name.  If the same pass is
statically invoked in the compiler multiple times, the pass name should be
appended with a sequential number starting from 1.

</li><li> -fdisable-rtl-<var>pass</var>
</li><li> -fdisable-rtl-<var>pass</var>=<var>range-list</var>
Disable rtl pass <var>pass</var>.  <var>pass</var> is the pass name.  If the same pass is
statically invoked in the compiler multiple times, the pass name should be
appended with a sequential number starting from 1.  <var>range-list</var> is a comma
seperated list of function ranges or assembler names.  Each range is a number
pair seperated by a colon.  The range is inclusive in both ends.  If the range
is trivial, the number pair can be simplified as a single number.  If the
function&rsquo;s cgraph node&rsquo;s <var>uid</var> is falling within one of the specified ranges,
the <var>pass</var> is disabled for that function.  The <var>uid</var> is shown in the
function header of a dump file, and the pass names can be dumped by using
option <samp>-fdump-passes</samp>.

</li><li> -fdisable-tree-<var>pass</var>
</li><li> -fdisable-tree-<var>pass</var>=<var>range-list</var>
Disable tree pass <var>pass</var>.  See <samp>-fdisable-rtl</samp> for the description of
option arguments.

</li><li> -fenable-ipa-<var>pass</var>
Enable ipa pass <var>pass</var>.  <var>pass</var> is the pass name.  If the same pass is
statically invoked in the compiler multiple times, the pass name should be
appended with a sequential number starting from 1.

</li><li> -fenable-rtl-<var>pass</var>
</li><li> -fenable-rtl-<var>pass</var>=<var>range-list</var>
Enable rtl pass <var>pass</var>.  See <samp>-fdisable-rtl</samp> for option argument
description and examples.

</li><li> -fenable-tree-<var>pass</var>
</li><li> -fenable-tree-<var>pass</var>=<var>range-list</var>
Enable tree pass <var>pass</var>.  See <samp>-fdisable-rtl</samp> for the description
of option arguments.

<div class="smallexample">
<pre class="smallexample">
# disable ccp1 for all functions
   -fdisable-tree-ccp1
# disable complete unroll for function whose cgraph node uid is 1
   -fenable-tree-cunroll=1
# disable gcse2 for functions at the following ranges [1,1],
# [300,400], and [400,1000]
# disable gcse2 for functions foo and foo2
   -fdisable-rtl-gcse2=foo,foo2
# disable early inlining
   -fdisable-tree-einline
# disable ipa inlining
   -fdisable-ipa-inline
# enable tree full unroll
   -fenable-tree-unroll

</pre></div>

</li></ul>

</dd>
<dt><code>-d<var>letters</var></code></dt>
<dt><code>-fdump-rtl-<var>pass</var></code></dt>
<dd><a name="index-d"></a>
<p>Says to make debugging dumps during compilation at times specified by
<var>letters</var>.  This is used for debugging the RTL-based passes of the
compiler.  The file names for most of the dumps are made by appending
a pass number and a word to the <var>dumpname</var>, and the files are
created in the directory of the output file.  Note that the pass
number is computed statically as passes get registered into the pass
manager.  Thus the numbering is not related to the dynamic order of
execution of passes.  In particular, a pass installed by a plugin
could have a number over 200 even if it executed quite early.
<var>dumpname</var> is generated from the name of the output file, if
explicitly specified and it is not an executable, otherwise it is the
basename of the source file. These switches may have different effects
when <samp>-E</samp> is used for preprocessing.
</p>
<p>Debug dumps can be enabled with a <samp>-fdump-rtl</samp> switch or some
<samp>-d</samp> option <var>letters</var>.  Here are the possible
letters for use in <var>pass</var> and <var>letters</var>, and their meanings:
</p>
<dl compact="compact">
<dt><code>-fdump-rtl-alignments</code></dt>
<dd><a name="index-fdump_002drtl_002dalignments"></a>
<p>Dump after branch alignments have been computed.
</p>
</dd>
<dt><code>-fdump-rtl-asmcons</code></dt>
<dd><a name="index-fdump_002drtl_002dasmcons"></a>
<p>Dump after fixing rtl statements that have unsatisfied in/out constraints.
</p>
</dd>
<dt><code>-fdump-rtl-auto_inc_dec</code></dt>
<dd><a name="index-fdump_002drtl_002dauto_005finc_005fdec"></a>
<p>Dump after auto-inc-dec discovery.  This pass is only run on
architectures that have auto inc or auto dec instructions.
</p>
</dd>
<dt><code>-fdump-rtl-barriers</code></dt>
<dd><a name="index-fdump_002drtl_002dbarriers"></a>
<p>Dump after cleaning up the barrier instructions.
</p>
</dd>
<dt><code>-fdump-rtl-bbpart</code></dt>
<dd><a name="index-fdump_002drtl_002dbbpart"></a>
<p>Dump after partitioning hot and cold basic blocks.
</p>
</dd>
<dt><code>-fdump-rtl-bbro</code></dt>
<dd><a name="index-fdump_002drtl_002dbbro"></a>
<p>Dump after block reordering.
</p>
</dd>
<dt><code>-fdump-rtl-btl1</code></dt>
<dt><code>-fdump-rtl-btl2</code></dt>
<dd><a name="index-fdump_002drtl_002dbtl2"></a>
<a name="index-fdump_002drtl_002dbtl2-1"></a>
<p><samp>-fdump-rtl-btl1</samp> and <samp>-fdump-rtl-btl2</samp> enable dumping
after the two branch
target load optimization passes.
</p>
</dd>
<dt><code>-fdump-rtl-bypass</code></dt>
<dd><a name="index-fdump_002drtl_002dbypass"></a>
<p>Dump after jump bypassing and control flow optimizations.
</p>
</dd>
<dt><code>-fdump-rtl-combine</code></dt>
<dd><a name="index-fdump_002drtl_002dcombine"></a>
<p>Dump after the RTL instruction combination pass.
</p>
</dd>
<dt><code>-fdump-rtl-compgotos</code></dt>
<dd><a name="index-fdump_002drtl_002dcompgotos"></a>
<p>Dump after duplicating the computed gotos.
</p>
</dd>
<dt><code>-fdump-rtl-ce1</code></dt>
<dt><code>-fdump-rtl-ce2</code></dt>
<dt><code>-fdump-rtl-ce3</code></dt>
<dd><a name="index-fdump_002drtl_002dce1"></a>
<a name="index-fdump_002drtl_002dce2"></a>
<a name="index-fdump_002drtl_002dce3"></a>
<p><samp>-fdump-rtl-ce1</samp>, <samp>-fdump-rtl-ce2</samp>, and
<samp>-fdump-rtl-ce3</samp> enable dumping after the three
if conversion passes.
</p>
</dd>
<dt><code>-fdump-rtl-cprop_hardreg</code></dt>
<dd><a name="index-fdump_002drtl_002dcprop_005fhardreg"></a>
<p>Dump after hard register copy propagation.
</p>
</dd>
<dt><code>-fdump-rtl-csa</code></dt>
<dd><a name="index-fdump_002drtl_002dcsa"></a>
<p>Dump after combining stack adjustments.
</p>
</dd>
<dt><code>-fdump-rtl-cse1</code></dt>
<dt><code>-fdump-rtl-cse2</code></dt>
<dd><a name="index-fdump_002drtl_002dcse1"></a>
<a name="index-fdump_002drtl_002dcse2"></a>
<p><samp>-fdump-rtl-cse1</samp> and <samp>-fdump-rtl-cse2</samp> enable dumping after
the two common sub-expression elimination passes.
</p>
</dd>
<dt><code>-fdump-rtl-dce</code></dt>
<dd><a name="index-fdump_002drtl_002ddce"></a>
<p>Dump after the standalone dead code elimination passes.
</p>
</dd>
<dt><code>-fdump-rtl-dbr</code></dt>
<dd><a name="index-fdump_002drtl_002ddbr"></a>
<p>Dump after delayed branch scheduling.
</p>
</dd>
<dt><code>-fdump-rtl-dce1</code></dt>
<dt><code>-fdump-rtl-dce2</code></dt>
<dd><a name="index-fdump_002drtl_002ddce1"></a>
<a name="index-fdump_002drtl_002ddce2"></a>
<p><samp>-fdump-rtl-dce1</samp> and <samp>-fdump-rtl-dce2</samp> enable dumping after
the two dead store elimination passes.
</p>
</dd>
<dt><code>-fdump-rtl-eh</code></dt>
<dd><a name="index-fdump_002drtl_002deh"></a>
<p>Dump after finalization of EH handling code.
</p>
</dd>
<dt><code>-fdump-rtl-eh_ranges</code></dt>
<dd><a name="index-fdump_002drtl_002deh_005franges"></a>
<p>Dump after conversion of EH handling range regions.
</p>
</dd>
<dt><code>-fdump-rtl-expand</code></dt>
<dd><a name="index-fdump_002drtl_002dexpand"></a>
<p>Dump after RTL generation.
</p>
</dd>
<dt><code>-fdump-rtl-fwprop1</code></dt>
<dt><code>-fdump-rtl-fwprop2</code></dt>
<dd><a name="index-fdump_002drtl_002dfwprop1"></a>
<a name="index-fdump_002drtl_002dfwprop2"></a>
<p><samp>-fdump-rtl-fwprop1</samp> and <samp>-fdump-rtl-fwprop2</samp> enable
dumping after the two forward propagation passes.
</p>
</dd>
<dt><code>-fdump-rtl-gcse1</code></dt>
<dt><code>-fdump-rtl-gcse2</code></dt>
<dd><a name="index-fdump_002drtl_002dgcse1"></a>
<a name="index-fdump_002drtl_002dgcse2"></a>
<p><samp>-fdump-rtl-gcse1</samp> and <samp>-fdump-rtl-gcse2</samp> enable dumping
after global common subexpression elimination.
</p>
</dd>
<dt><code>-fdump-rtl-init-regs</code></dt>
<dd><a name="index-fdump_002drtl_002dinit_002dregs"></a>
<p>Dump after the initialization of the registers.
</p>
</dd>
<dt><code>-fdump-rtl-initvals</code></dt>
<dd><a name="index-fdump_002drtl_002dinitvals"></a>
<p>Dump after the computation of the initial value sets.
</p>
</dd>
<dt><code>-fdump-rtl-into_cfglayout</code></dt>
<dd><a name="index-fdump_002drtl_002dinto_005fcfglayout"></a>
<p>Dump after converting to cfglayout mode.
</p>
</dd>
<dt><code>-fdump-rtl-ira</code></dt>
<dd><a name="index-fdump_002drtl_002dira"></a>
<p>Dump after iterated register allocation.
</p>
</dd>
<dt><code>-fdump-rtl-jump</code></dt>
<dd><a name="index-fdump_002drtl_002djump"></a>
<p>Dump after the second jump optimization.
</p>
</dd>
<dt><code>-fdump-rtl-loop2</code></dt>
<dd><a name="index-fdump_002drtl_002dloop2"></a>
<p><samp>-fdump-rtl-loop2</samp> enables dumping after the rtl
loop optimization passes.
</p>
</dd>
<dt><code>-fdump-rtl-mach</code></dt>
<dd><a name="index-fdump_002drtl_002dmach"></a>
<p>Dump after performing the machine dependent reorganization pass, if that
pass exists.
</p>
</dd>
<dt><code>-fdump-rtl-mode_sw</code></dt>
<dd><a name="index-fdump_002drtl_002dmode_005fsw"></a>
<p>Dump after removing redundant mode switches.
</p>
</dd>
<dt><code>-fdump-rtl-rnreg</code></dt>
<dd><a name="index-fdump_002drtl_002drnreg"></a>
<p>Dump after register renumbering.
</p>
</dd>
<dt><code>-fdump-rtl-outof_cfglayout</code></dt>
<dd><a name="index-fdump_002drtl_002doutof_005fcfglayout"></a>
<p>Dump after converting from cfglayout mode.
</p>
</dd>
<dt><code>-fdump-rtl-peephole2</code></dt>
<dd><a name="index-fdump_002drtl_002dpeephole2"></a>
<p>Dump after the peephole pass.
</p>
</dd>
<dt><code>-fdump-rtl-postreload</code></dt>
<dd><a name="index-fdump_002drtl_002dpostreload"></a>
<p>Dump after post-reload optimizations.
</p>
</dd>
<dt><code>-fdump-rtl-pro_and_epilogue</code></dt>
<dd><a name="index-fdump_002drtl_002dpro_005fand_005fepilogue"></a>
<p>Dump after generating the function prologues and epilogues.
</p>
</dd>
<dt><code>-fdump-rtl-regmove</code></dt>
<dd><a name="index-fdump_002drtl_002dregmove"></a>
<p>Dump after the register move pass.
</p>
</dd>
<dt><code>-fdump-rtl-sched1</code></dt>
<dt><code>-fdump-rtl-sched2</code></dt>
<dd><a name="index-fdump_002drtl_002dsched1"></a>
<a name="index-fdump_002drtl_002dsched2"></a>
<p><samp>-fdump-rtl-sched1</samp> and <samp>-fdump-rtl-sched2</samp> enable dumping
after the basic block scheduling passes.
</p>
</dd>
<dt><code>-fdump-rtl-see</code></dt>
<dd><a name="index-fdump_002drtl_002dsee"></a>
<p>Dump after sign extension elimination.
</p>
</dd>
<dt><code>-fdump-rtl-seqabstr</code></dt>
<dd><a name="index-fdump_002drtl_002dseqabstr"></a>
<p>Dump after common sequence discovery.
</p>
</dd>
<dt><code>-fdump-rtl-shorten</code></dt>
<dd><a name="index-fdump_002drtl_002dshorten"></a>
<p>Dump after shortening branches.
</p>
</dd>
<dt><code>-fdump-rtl-sibling</code></dt>
<dd><a name="index-fdump_002drtl_002dsibling"></a>
<p>Dump after sibling call optimizations.
</p>
</dd>
<dt><code>-fdump-rtl-split1</code></dt>
<dt><code>-fdump-rtl-split2</code></dt>
<dt><code>-fdump-rtl-split3</code></dt>
<dt><code>-fdump-rtl-split4</code></dt>
<dt><code>-fdump-rtl-split5</code></dt>
<dd><a name="index-fdump_002drtl_002dsplit1"></a>
<a name="index-fdump_002drtl_002dsplit2"></a>
<a name="index-fdump_002drtl_002dsplit3"></a>
<a name="index-fdump_002drtl_002dsplit4"></a>
<a name="index-fdump_002drtl_002dsplit5"></a>
<p><samp>-fdump-rtl-split1</samp>, <samp>-fdump-rtl-split2</samp>,
<samp>-fdump-rtl-split3</samp>, <samp>-fdump-rtl-split4</samp> and
<samp>-fdump-rtl-split5</samp> enable dumping after five rounds of
instruction splitting.
</p>
</dd>
<dt><code>-fdump-rtl-sms</code></dt>
<dd><a name="index-fdump_002drtl_002dsms"></a>
<p>Dump after modulo scheduling.  This pass is only run on some
architectures.
</p>
</dd>
<dt><code>-fdump-rtl-stack</code></dt>
<dd><a name="index-fdump_002drtl_002dstack"></a>
<p>Dump after conversion from GCC&rsquo;s &quot;flat register file&quot; registers to the
x87&rsquo;s stack-like registers.  This pass is only run on x86 variants.
</p>
</dd>
<dt><code>-fdump-rtl-subreg1</code></dt>
<dt><code>-fdump-rtl-subreg2</code></dt>
<dd><a name="index-fdump_002drtl_002dsubreg1"></a>
<a name="index-fdump_002drtl_002dsubreg2"></a>
<p><samp>-fdump-rtl-subreg1</samp> and <samp>-fdump-rtl-subreg2</samp> enable dumping after
the two subreg expansion passes.
</p>
</dd>
<dt><code>-fdump-rtl-unshare</code></dt>
<dd><a name="index-fdump_002drtl_002dunshare"></a>
<p>Dump after all rtl has been unshared.
</p>
</dd>
<dt><code>-fdump-rtl-vartrack</code></dt>
<dd><a name="index-fdump_002drtl_002dvartrack"></a>
<p>Dump after variable tracking.
</p>
</dd>
<dt><code>-fdump-rtl-vregs</code></dt>
<dd><a name="index-fdump_002drtl_002dvregs"></a>
<p>Dump after converting virtual registers to hard registers.
</p>
</dd>
<dt><code>-fdump-rtl-web</code></dt>
<dd><a name="index-fdump_002drtl_002dweb"></a>
<p>Dump after live range splitting.
</p>
</dd>
<dt><code>-fdump-rtl-regclass</code></dt>
<dt><code>-fdump-rtl-subregs_of_mode_init</code></dt>
<dt><code>-fdump-rtl-subregs_of_mode_finish</code></dt>
<dt><code>-fdump-rtl-dfinit</code></dt>
<dt><code>-fdump-rtl-dfinish</code></dt>
<dd><a name="index-fdump_002drtl_002dregclass"></a>
<a name="index-fdump_002drtl_002dsubregs_005fof_005fmode_005finit"></a>
<a name="index-fdump_002drtl_002dsubregs_005fof_005fmode_005ffinish"></a>
<a name="index-fdump_002drtl_002ddfinit"></a>
<a name="index-fdump_002drtl_002ddfinish"></a>
<p>These dumps are defined but always produce empty files.
</p>
</dd>
<dt><code>-da</code></dt>
<dt><code>-fdump-rtl-all</code></dt>
<dd><a name="index-da"></a>
<a name="index-fdump_002drtl_002dall"></a>
<p>Produce all the dumps listed above.
</p>
</dd>
<dt><code>-dA</code></dt>
<dd><a name="index-dA"></a>
<p>Annotate the assembler output with miscellaneous debugging information.
</p>
</dd>
<dt><code>-dD</code></dt>
<dd><a name="index-dD"></a>
<p>Dump all macro definitions, at the end of preprocessing, in addition to
d267 74
a340 10
</p>
</dd>
<dt><code>-dH</code></dt>
<dd><a name="index-dH"></a>
<p>Produce a core dump whenever an error occurs.
</p>
</dd>
<dt><code>-dp</code></dt>
<dd><a name="index-dp"></a>
<p>Annotate the assembler output with a comment indicating which
d343 12
a354 20
</p>
</dd>
<dt><code>-dP</code></dt>
<dd><a name="index-dP"></a>
<p>Dump the RTL in the assembler output as a comment before each instruction.
Also turns on <samp>-dp</samp> annotation.
</p>
</dd>
<dt><code>-dv</code></dt>
<dd><a name="index-dv"></a>
<p>For each of the other indicated dump files (<samp>-fdump-rtl-<var>pass</var></samp>),
dump a representation of the control flow graph suitable for viewing with VCG
to <samp><var>file</var>.<var>pass</var>.vcg</samp>.
</p>
</dd>
<dt><code>-dx</code></dt>
<dd><a name="index-dx"></a>
<p>Just generate RTL for a function instead of compiling it.  Usually used
with <samp>-fdump-rtl-expand</samp>.
</p></dd>
d357 8
a364 31
</dd>
<dt><code>-fdump-noaddr</code></dt>
<dd><a name="index-fdump_002dnoaddr"></a>
<p>When doing debugging dumps, suppress address output.  This makes it more
feasible to use diff on debugging dumps for compiler invocations with
different compiler binaries and/or different
text / bss / data / heap / stack / dso start locations.
</p>
</dd>
<dt><code>-fdump-unnumbered</code></dt>
<dd><a name="index-fdump_002dunnumbered"></a>
<p>When doing debugging dumps, suppress instruction numbers and address output.
This makes it more feasible to use diff on debugging dumps for compiler
invocations with different options, in particular with and without
<samp>-g</samp>.
</p>
</dd>
<dt><code>-fdump-unnumbered-links</code></dt>
<dd><a name="index-fdump_002dunnumbered_002dlinks"></a>
<p>When doing debugging dumps (see <samp>-d</samp> option above), suppress
instruction numbers for the links to the previous and next instructions
in a sequence.
</p>
</dd>
<dt><code>-fdump-translation-unit <span class="roman">(C++ only)</span></code></dt>
<dt><code>-fdump-translation-unit-<var>options</var> <span class="roman">(C++ only)</span></code></dt>
<dd><a name="index-fdump_002dtranslation_002dunit"></a>
<p>Dump a representation of the tree structure for the entire translation
unit to a file.  The file name is made by appending <samp>.tu</samp> to the
source file name, and the file is created in the same directory as the
output file.  If the &lsquo;<samp>-<var>options</var></samp>&rsquo; form is used, <var>options</var>
d366 18
a383 36
<samp>-fdump-tree</samp> options.
</p>
</dd>
<dt><code>-fdump-class-hierarchy <span class="roman">(C++ only)</span></code></dt>
<dt><code>-fdump-class-hierarchy-<var>options</var> <span class="roman">(C++ only)</span></code></dt>
<dd><a name="index-fdump_002dclass_002dhierarchy"></a>
<p>Dump a representation of each class&rsquo;s hierarchy and virtual function
table layout to a file.  The file name is made by appending
<samp>.class</samp> to the source file name, and the file is created in the
same directory as the output file.  If the &lsquo;<samp>-<var>options</var></samp>&rsquo; form
is used, <var>options</var> controls the details of the dump as described
for the <samp>-fdump-tree</samp> options.
</p>
</dd>
<dt><code>-fdump-ipa-<var>switch</var></code></dt>
<dd><a name="index-fdump_002dipa"></a>
<p>Control the dumping at various stages of inter-procedural analysis
language tree to a file.  The file name is generated by appending a
switch specific suffix to the source file name, and the file is created
in the same directory as the output file.  The following dumps are
possible:
</p>
<dl compact="compact">
<dt>&lsquo;<samp>all</samp>&rsquo;</dt>
<dd><p>Enables all inter-procedural analysis dumps.
</p>
</dd>
<dt>&lsquo;<samp>cgraph</samp>&rsquo;</dt>
<dd><p>Dumps information about call-graph optimization, unused function removal,
and inlining decisions.
</p>
</dd>
<dt>&lsquo;<samp>inline</samp>&rsquo;</dt>
<dd><p>Dump after function inlining.
</p>
</dd>
d386 10
a395 34
</dd>
<dt><code>-fdump-passes</code></dt>
<dd><a name="index-fdump_002dpasses"></a>
<p>Dump the list of optimization passes that are turned on and off by
the current command-line options.
</p>
</dd>
<dt><code>-fdump-statistics-<var>option</var></code></dt>
<dd><a name="index-fdump_002dstatistics"></a>
<p>Enable and control dumping of pass statistics in a separate file.  The
file name is generated by appending a suffix ending in
&lsquo;<samp>.statistics</samp>&rsquo; to the source file name, and the file is created in
the same directory as the output file.  If the &lsquo;<samp>-<var>option</var></samp>&rsquo;
form is used, &lsquo;<samp>-stats</samp>&rsquo; will cause counters to be summed over the
whole compilation unit while &lsquo;<samp>-details</samp>&rsquo; will dump every event as
the passes generate them.  The default with no option is to sum
counters for each function compiled.
</p>
</dd>
<dt><code>-fdump-tree-<var>switch</var></code></dt>
<dt><code>-fdump-tree-<var>switch</var>-<var>options</var></code></dt>
<dd><a name="index-fdump_002dtree"></a>
<p>Control the dumping at various stages of processing the intermediate
language tree to a file.  The file name is generated by appending a
switch specific suffix to the source file name, and the file is
created in the same directory as the output file.  If the
&lsquo;<samp>-<var>options</var></samp>&rsquo; form is used, <var>options</var> is a list of
&lsquo;<samp>-</samp>&rsquo; separated options which control the details of the dump.  Not
all options are applicable to all dumps; those that are not
meaningful will be ignored.  The following options are available
</p>
<dl compact="compact">
<dt>&lsquo;<samp>address</samp>&rsquo;</dt>
<dd><p>Print the address of each node.  Usually this is not meaningful as it
d397 2
a398 9
is for tying up a dump file with a debug environment.
</p></dd>
<dt>&lsquo;<samp>asmname</samp>&rsquo;</dt>
<dd><p>If <code>DECL_ASSEMBLER_NAME</code> has been set for a given decl, use that
in the dump instead of <code>DECL_NAME</code>.  Its primary use is ease of
use working backward from mangled names in the assembly file.
</p></dd>
<dt>&lsquo;<samp>slim</samp>&rsquo;</dt>
<dd><p>Inhibit dumping of members of a scope or body of a function merely
d401 11
a411 38
trees, this option inhibits dumping the bodies of control structures.
</p></dd>
<dt>&lsquo;<samp>raw</samp>&rsquo;</dt>
<dd><p>Print a raw representation of the tree.  By default, trees are
pretty-printed into a C-like representation.
</p></dd>
<dt>&lsquo;<samp>details</samp>&rsquo;</dt>
<dd><p>Enable more detailed dumps (not honored by every dump option).
</p></dd>
<dt>&lsquo;<samp>stats</samp>&rsquo;</dt>
<dd><p>Enable dumping various statistics about the pass (not honored by every dump
option).
</p></dd>
<dt>&lsquo;<samp>blocks</samp>&rsquo;</dt>
<dd><p>Enable showing basic block boundaries (disabled in raw dumps).
</p></dd>
<dt>&lsquo;<samp>vops</samp>&rsquo;</dt>
<dd><p>Enable showing virtual operands for every statement.
</p></dd>
<dt>&lsquo;<samp>lineno</samp>&rsquo;</dt>
<dd><p>Enable showing line numbers for statements.
</p></dd>
<dt>&lsquo;<samp>uid</samp>&rsquo;</dt>
<dd><p>Enable showing the unique ID (<code>DECL_UID</code>) for each variable.
</p></dd>
<dt>&lsquo;<samp>verbose</samp>&rsquo;</dt>
<dd><p>Enable showing the tree dump for each statement.
</p></dd>
<dt>&lsquo;<samp>eh</samp>&rsquo;</dt>
<dd><p>Enable showing the EH region number holding each statement.
</p></dd>
<dt>&lsquo;<samp>scev</samp>&rsquo;</dt>
<dd><p>Enable showing scalar evolution analysis details.
</p></dd>
<dt>&lsquo;<samp>all</samp>&rsquo;</dt>
<dd><p>Turn on all options, except <samp>raw</samp>, <samp>slim</samp>, <samp>verbose</samp>
and <samp>lineno</samp>.
</p></dd>
d414 16
a429 28
<p>The following tree dumps are possible:
</p><dl compact="compact">
<dt>&lsquo;<samp>original</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002doriginal"></a>
<p>Dump before any tree based optimization, to <samp><var>file</var>.original</samp>.
</p>
</dd>
<dt>&lsquo;<samp>optimized</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002doptimized"></a>
<p>Dump after all tree based optimization, to <samp><var>file</var>.optimized</samp>.
</p>
</dd>
<dt>&lsquo;<samp>gimple</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dgimple"></a>
<p>Dump each function before and after the gimplification pass to a file.  The
file name is made by appending <samp>.gimple</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>cfg</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dcfg"></a>
<p>Dump the control flow graph of each function to a file.  The file name is
made by appending <samp>.cfg</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>vcg</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dvcg"></a>
<p>Dump the control flow graph of each function to a file in VCG format.  The
file name is made by appending <samp>.vcg</samp> to the source file name.  Note
d431 1
a431 1
be used directly by VCG.  You will need to cut and paste each function&rsquo;s
d433 60
a492 114
</p>
</dd>
<dt>&lsquo;<samp>ch</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dch"></a>
<p>Dump each function after copying loop headers.  The file name is made by
appending <samp>.ch</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>ssa</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dssa"></a>
<p>Dump SSA related information to a file.  The file name is made by appending
<samp>.ssa</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>alias</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dalias"></a>
<p>Dump aliasing information for each function.  The file name is made by
appending <samp>.alias</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>ccp</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dccp"></a>
<p>Dump each function after CCP.  The file name is made by appending
<samp>.ccp</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>storeccp</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dstoreccp"></a>
<p>Dump each function after STORE-CCP.  The file name is made by appending
<samp>.storeccp</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>pre</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dpre"></a>
<p>Dump trees after partial redundancy elimination.  The file name is made
by appending <samp>.pre</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>fre</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dfre"></a>
<p>Dump trees after full redundancy elimination.  The file name is made
by appending <samp>.fre</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>copyprop</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dcopyprop"></a>
<p>Dump trees after copy propagation.  The file name is made
by appending <samp>.copyprop</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>store_copyprop</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dstore_005fcopyprop"></a>
<p>Dump trees after store copy-propagation.  The file name is made
by appending <samp>.store_copyprop</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>dce</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002ddce"></a>
<p>Dump each function after dead code elimination.  The file name is made by
appending <samp>.dce</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>mudflap</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dmudflap"></a>
<p>Dump each function after adding mudflap instrumentation.  The file name is
made by appending <samp>.mudflap</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>sra</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dsra"></a>
<p>Dump each function after performing scalar replacement of aggregates.  The
file name is made by appending <samp>.sra</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>sink</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dsink"></a>
<p>Dump each function after performing code sinking.  The file name is made
by appending <samp>.sink</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>dom</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002ddom"></a>
<p>Dump each function after applying dominator tree optimizations.  The file
name is made by appending <samp>.dom</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>dse</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002ddse"></a>
<p>Dump each function after applying dead store elimination.  The file
name is made by appending <samp>.dse</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>phiopt</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dphiopt"></a>
<p>Dump each function after optimizing PHI nodes into straightline code.  The file
name is made by appending <samp>.phiopt</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>forwprop</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dforwprop"></a>
<p>Dump each function after forward propagating single use variables.  The file
name is made by appending <samp>.forwprop</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>copyrename</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dcopyrename"></a>
<p>Dump each function after applying the copy rename optimization.  The file
name is made by appending <samp>.copyrename</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>nrv</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dnrv"></a>
<p>Dump each function after applying the named return value optimization on
generic trees.  The file name is made by appending <samp>.nrv</samp> to the source
d494 8
a501 24
</p>
</dd>
<dt>&lsquo;<samp>vect</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dvect"></a>
<p>Dump each function after applying vectorization of loops.  The file name is
made by appending <samp>.vect</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>slp</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dslp"></a>
<p>Dump each function after applying vectorization of basic blocks.  The file name
is made by appending <samp>.slp</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>vrp</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dvrp"></a>
<p>Dump each function after Value Range Propagation (VRP).  The file name
is made by appending <samp>.vrp</samp> to the source file name.
</p>
</dd>
<dt>&lsquo;<samp>all</samp>&rsquo;</dt>
<dd><a name="index-fdump_002dtree_002dall"></a>
<p>Enable all the available tree dumps with the flags provided in this option.
</p></dd>
d504 6
a509 33
</dd>
<dt><code>-ftree-vectorizer-verbose=<var>n</var></code></dt>
<dd><a name="index-ftree_002dvectorizer_002dverbose"></a>
<p>This option controls the amount of debugging output the vectorizer prints.
This information is written to standard error, unless
<samp>-fdump-tree-all</samp> or <samp>-fdump-tree-vect</samp> is specified,
in which case it is output to the usual dump listing file, <samp>.vect</samp>.
For <var>n</var>=0 no diagnostic information is reported.
If <var>n</var>=1 the vectorizer reports each loop that got vectorized,
and the total number of loops that got vectorized.
If <var>n</var>=2 the vectorizer also reports non-vectorized loops that passed
the first analysis phase (vect_analyze_loop_form) - i.e. countable,
inner-most, single-bb, single-entry/exit loops.  This is the same verbosity
level that <samp>-fdump-tree-vect-stats</samp> uses.
Higher verbosity levels mean either more information dumped for each
reported loop, or same amount of information reported for more loops:
if <var>n</var>=3, vectorizer cost model information is reported.
If <var>n</var>=4, alignment related information is added to the reports.
If <var>n</var>=5, data-references related information (e.g. memory dependences,
memory access-patterns) is added to the reports.
If <var>n</var>=6, the vectorizer reports also non-vectorized inner-most loops
that did not pass the first analysis phase (i.e., may not be countable, or
may have complicated control-flow).
If <var>n</var>=7, the vectorizer reports also non-vectorized nested loops.
If <var>n</var>=8, SLP related information is added to the reports.
For <var>n</var>=9, all the information the vectorizer generates during its
analysis and transformation is reported.  This is the same verbosity level
that <samp>-fdump-tree-vect-details</samp> uses.
</p>
</dd>
<dt><code>-frandom-seed=<var>string</var></code></dt>
<dd><a name="index-frandom_002dseed"></a>
<p>This option provides a seed that GCC uses when it would otherwise use
d513 1
a513 1
produce them.  You can use the <samp>-frandom-seed</samp> option to produce
d515 4
a518 7
</p>
<p>The <var>string</var> should be different for every file you compile.
</p>
</dd>
<dt><code>-fsched-verbose=<var>n</var></code></dt>
<dd><a name="index-fsched_002dverbose"></a>
<p>On targets that use instruction scheduling, this option controls the
d520 14
a533 19
written to standard error, unless <samp>-fdump-rtl-sched1</samp> or
<samp>-fdump-rtl-sched2</samp> is specified, in which case it is output
to the usual dump listing file, <samp>.sched1</samp> or <samp>.sched2</samp>
respectively.  However for <var>n</var> greater than nine, the output is
always printed to standard error.
</p>
<p>For <var>n</var> greater than zero, <samp>-fsched-verbose</samp> outputs the
same information as <samp>-fdump-rtl-sched1</samp> and <samp>-fdump-rtl-sched2</samp>.
For <var>n</var> greater than one, it also output basic block probabilities,
detailed ready list information and unit/insn info.  For <var>n</var> greater
than two, it includes RTL at abort point, control-flow and regions info.
And for <var>n</var> over four, <samp>-fsched-verbose</samp> also includes
dependence info.
</p>
</dd>
<dt><code>-save-temps</code></dt>
<dt><code>-save-temps=cwd</code></dt>
<dd><a name="index-save_002dtemps"></a>
<p>Store the usual &ldquo;temporary&rdquo; intermediate files permanently; place them
d535 3
a537 3
compiling <samp>foo.c</samp> with &lsquo;<samp>-c -save-temps</samp>&rsquo; would produce files
<samp>foo.i</samp> and <samp>foo.s</samp>, as well as <samp>foo.o</samp>.  This creates a
preprocessed <samp>foo.i</samp> output file even though the compiler now
d539 4
a542 4
</p>
<p>When used in combination with the <samp>-x</samp> command-line option,
<samp>-save-temps</samp> is sensible enough to avoid over writing an
input source file with the same extension as an intermediate file.
d544 3
a546 40
source file before using <samp>-save-temps</samp>.
</p>
<p>If you invoke GCC in parallel, compiling several different source
files that share a common base name in different subdirectories or the
same source file compiled for multiple output destinations, it is
likely that the different parallel compilers will interfere with each
other, and overwrite the temporary files.  For instance:
</p>
<div class="smallexample">
<pre class="smallexample">gcc -save-temps -o outdir1/foo.o indir1/foo.c&amp;
gcc -save-temps -o outdir2/foo.o indir2/foo.c&amp;
</pre></div>

<p>may result in <samp>foo.i</samp> and <samp>foo.o</samp> being written to
simultaneously by both compilers.
</p>
</dd>
<dt><code>-save-temps=obj</code></dt>
<dd><a name="index-save_002dtemps_003dobj"></a>
<p>Store the usual &ldquo;temporary&rdquo; intermediate files permanently.  If the
<samp>-o</samp> option is used, the temporary files are based on the
object file.  If the <samp>-o</samp> option is not used, the
<samp>-save-temps=obj</samp> switch behaves like <samp>-save-temps</samp>.
</p>
<p>For example:
</p>
<div class="smallexample">
<pre class="smallexample">gcc -save-temps=obj -c foo.c
gcc -save-temps=obj -c bar.c -o dir/xbar.o
gcc -save-temps=obj foobar.c -o dir2/yfoobar
</pre></div>

<p>would create <samp>foo.i</samp>, <samp>foo.s</samp>, <samp>dir/xbar.i</samp>,
<samp>dir/xbar.s</samp>, <samp>dir2/yfoobar.i</samp>, <samp>dir2/yfoobar.s</samp>, and
<samp>dir2/yfoobar.o</samp>.
</p>
</dd>
<dt><code>-time<span class="roman">[</span>=<var>file</var><span class="roman">]</span></code></dt>
<dd><a name="index-time"></a>
<p>Report the CPU time taken by each subprocess in the compilation
d548 1
a548 8
(plus the linker if linking is done).
</p>
<p>Without the specification of an output file, the output looks like this:
</p>
<div class="smallexample">
<pre class="smallexample"># cc1 0.12 0.01
# as 0.00 0.01
</pre></div>
d550 4
a553 1
<p>The first number on each line is the &ldquo;user time&rdquo;, that is time spent
d555 1
a555 1
time spent executing operating system routines on behalf of the program.
d557 2
a558 17
</p>
<p>With the specification of an output file, the output is appended to the
named file, and it looks like this:
</p>
<div class="smallexample">
<pre class="smallexample">0.12 0.01 cc1 <var>options</var>
0.00 0.01 as <var>options</var>
</pre></div>

<p>The &ldquo;user time&rdquo; and the &ldquo;system time&rdquo; are moved before the program
name, and the options passed to the program are displayed, so that one
can later tell what file was being compiled, and with which options.
</p>
</dd>
<dt><code>-fvar-tracking</code></dt>
<dd><a name="index-fvar_002dtracking"></a>
<p>Run variable tracking pass.  It computes where variables are stored at each
d561 3
a563 3
</p>
<p>It is enabled by default when compiling with optimization (<samp>-Os</samp>,
<samp>-O</samp>, <samp>-O2</samp>, &hellip;), debugging information (<samp>-g</samp>) and
d565 3
a567 25
</p>
</dd>
<dt><code>-fvar-tracking-assignments</code></dt>
<dd><a name="index-fvar_002dtracking_002dassignments"></a>
<a name="index-fno_002dvar_002dtracking_002dassignments"></a>
<p>Annotate assignments to user variables early in the compilation and
attempt to carry the annotations over throughout the compilation all the
way to the end, in an attempt to improve debug information while
optimizing.  Use of <samp>-gdwarf-4</samp> is recommended along with it.
</p>
<p>It can be enabled even if var-tracking is disabled, in which case
annotations will be created and maintained, but discarded at the end.
</p>
</dd>
<dt><code>-fvar-tracking-assignments-toggle</code></dt>
<dd><a name="index-fvar_002dtracking_002dassignments_002dtoggle"></a>
<a name="index-fno_002dvar_002dtracking_002dassignments_002dtoggle"></a>
<p>Toggle <samp>-fvar-tracking-assignments</samp>, in the same way that
<samp>-gtoggle</samp> toggles <samp>-g</samp>.
</p>
</dd>
<dt><code>-print-file-name=<var>library</var></code></dt>
<dd><a name="index-print_002dfile_002dname"></a>
<p>Print the full absolute name of the library file <var>library</var> that
would be used when linking&mdash;and don&rsquo;t do anything else.  With this
d570 2
a571 5
</p>
</dd>
<dt><code>-print-multi-directory</code></dt>
<dd><a name="index-print_002dmulti_002ddirectory"></a>
<p>Print the directory name corresponding to the multilib selected by any
d573 3
a575 6
to exist in <code>GCC_EXEC_PREFIX</code>.
</p>
</dd>
<dt><code>-print-multi-lib</code></dt>
<dd><a name="index-print_002dmulti_002dlib"></a>
<p>Print the mapping from multilib directory names to compiler switches
d577 2
a578 2
&lsquo;<samp>;</samp>&rsquo;, and each switch starts with an &lsquo;<samp>@@</samp>&rsquo; instead of the
&lsquo;<samp>-</samp>&rsquo;, without spaces between multiple switches.  This is supposed to
d580 19
a598 47
</p>
</dd>
<dt><code>-print-multi-os-directory</code></dt>
<dd><a name="index-print_002dmulti_002dos_002ddirectory"></a>
<p>Print the path to OS libraries for the selected
multilib, relative to some <samp>lib</samp> subdirectory.  If OS libraries are
present in the <samp>lib</samp> subdirectory and no multilibs are used, this is
usually just <samp>.</samp>, if OS libraries are present in <samp>lib<var>suffix</var></samp>
sibling directories this prints e.g. <samp>../lib64</samp>, <samp>../lib</samp> or
<samp>../lib32</samp>, or if OS libraries are present in <samp>lib/<var>subdir</var></samp>
subdirectories it prints e.g. <samp>amd64</samp>, <samp>sparcv9</samp> or <samp>ev6</samp>.
</p>
</dd>
<dt><code>-print-multiarch</code></dt>
<dd><a name="index-print_002dmultiarch"></a>
<p>Print the path to OS libraries for the selected multiarch,
relative to some <samp>lib</samp> subdirectory.
</p>
</dd>
<dt><code>-print-prog-name=<var>program</var></code></dt>
<dd><a name="index-print_002dprog_002dname"></a>
<p>Like <samp>-print-file-name</samp>, but searches for a program such as &lsquo;<samp>cpp</samp>&rsquo;.
</p>
</dd>
<dt><code>-print-libgcc-file-name</code></dt>
<dd><a name="index-print_002dlibgcc_002dfile_002dname"></a>
<p>Same as <samp>-print-file-name=libgcc.a</samp>.
</p>
<p>This is useful when you use <samp>-nostdlib</samp> or <samp>-nodefaultlibs</samp>
but you do want to link with <samp>libgcc.a</samp>.  You can do
</p>
<div class="smallexample">
<pre class="smallexample">gcc -nostdlib <var>files</var>&hellip; `gcc -print-libgcc-file-name`
</pre></div>

</dd>
<dt><code>-print-search-dirs</code></dt>
<dd><a name="index-print_002dsearch_002ddirs"></a>
<p>Print the name of the configured installation directory and a list of
program and library directories <code>gcc</code> will search&mdash;and don&rsquo;t do anything else.
</p>
<p>This is useful when <code>gcc</code> prints the error message
&lsquo;<samp>installation problem, cannot exec cpp0: No such file or directory</samp>&rsquo;.
To resolve this you either need to put <samp>cpp0</samp> and the other compiler
components where <code>gcc</code> expects to find them, or you can set the environment
variable <code>GCC_EXEC_PREFIX</code> to the directory where you installed them.
Don&rsquo;t forget the trailing &lsquo;<samp>/</samp>&rsquo;.
d600 5
a604 27
</p>
</dd>
<dt><code>-print-sysroot</code></dt>
<dd><a name="index-print_002dsysroot"></a>
<p>Print the target sysroot directory that will be used during
compilation.  This is the target sysroot specified either at configure
time or using the <samp>--sysroot</samp> option, possibly with an extra
suffix that depends on compilation options.  If no target sysroot is
specified, the option prints nothing.
</p>
</dd>
<dt><code>-print-sysroot-headers-suffix</code></dt>
<dd><a name="index-print_002dsysroot_002dheaders_002dsuffix"></a>
<p>Print the suffix added to the target sysroot when searching for
headers, or give an error if the compiler is not configured with such
a suffix&mdash;and don&rsquo;t do anything else.
</p>
</dd>
<dt><code>-dumpmachine</code></dt>
<dd><a name="index-dumpmachine"></a>
<p>Print the compiler&rsquo;s target machine (for example,
&lsquo;<samp>i686-pc-linux-gnu</samp>&rsquo;)&mdash;and don&rsquo;t do anything else.
</p>
</dd>
<dt><code>-dumpversion</code></dt>
<dd><a name="index-dumpversion"></a>
<p>Print the compiler version (for example, &lsquo;<samp>3.0</samp>&rsquo;)&mdash;and don&rsquo;t do
d606 2
a607 5
</p>
</dd>
<dt><code>-dumpspecs</code></dt>
<dd><a name="index-dumpspecs"></a>
<p>Print the compiler&rsquo;s built-in specs&mdash;and don&rsquo;t do anything else.  (This
d609 2
a610 5
</p>
</dd>
<dt><code>-feliminate-unused-debug-types</code></dt>
<dd><a name="index-feliminate_002dunused_002ddebug_002dtypes"></a>
<p>Normally, when producing DWARF2 output, GCC will emit debugging
d616 1
a616 1
however, this results in a significant amount of wasted space.
d618 1
a618 2
for types that are nowhere used in the source file being compiled.
</p></dd>
d621 1
a621 7
<hr>
<div class="header">
<p>
Next: <a href="Optimize-Options.html#Optimize-Options" accesskey="n" rel="next">Optimize Options</a>, Previous: <a href="Warning-Options.html#Warning-Options" accesskey="p" rel="prev">Warning Options</a>, Up: <a href="Invoking-GCC.html#Invoking-GCC" accesskey="u" rel="up">Invoking GCC</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>


a622 2
</body>
</html>
@

