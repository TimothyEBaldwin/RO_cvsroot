head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.17;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.17;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.23;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Disappointments - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Trouble.html#Trouble" title="Trouble">
<link rel="prev" href="Standard-Libraries.html#Standard-Libraries" title="Standard Libraries">
<link rel="next" href="C_002b_002b-Misunderstandings.html#C_002b_002b-Misunderstandings" title="C++ Misunderstandings">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Disappointments"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="C_002b_002b-Misunderstandings.html#C_002b_002b-Misunderstandings">C++ Misunderstandings</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Standard-Libraries.html#Standard-Libraries">Standard Libraries</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Trouble.html#Trouble">Trouble</a>
<hr>
</div>

<h3 class="section">10.7 Disappointments and Misunderstandings</h3>

<p>These problems are perhaps regrettable, but we don't know any practical
way around them.

     <ul>
<li>Certain local variables aren't recognized by debuggers when you compile
with optimization.

     <p>This occurs because sometimes GCC optimizes the variable out of
existence.  There is no way to tell the debugger how to compute the
value such a variable &ldquo;would have had&rdquo;, and it is not clear that would
be desirable anyway.  So GCC simply does not mention the eliminated
variable when it writes debugging information.

     <p>You have to expect a certain amount of disagreement between the
executable and your source code, when you use optimization.

     <p><a name="index-conflicting-types-2524"></a><a name="index-scope-of-declaration-2525"></a><li>Users often think it is a bug when GCC reports an error for code
like this:

     <pre class="smallexample">          int foo (struct mumble *);
          
          struct mumble { ... };
          
          int foo (struct mumble *x)
          { ... }
</pre>
     <p>This code really is erroneous, because the scope of <code>struct
mumble</code> in the prototype is limited to the argument list containing it. 
It does not refer to the <code>struct mumble</code> defined with file scope
immediately below&mdash;they are two unrelated types with similar names in
different scopes.

     <p>But in the definition of <code>foo</code>, the file-scope type is used
because that is available to be inherited.  Thus, the definition and
the prototype do not match, and you get an error.

     <p>This behavior may seem silly, but it's what the ISO standard specifies. 
It is easy enough for you to make your code work by moving the
definition of <code>struct mumble</code> above the prototype.  It's not worth
being incompatible with ISO C just to avoid an error for the example
shown above.

     <li>Accesses to bit-fields even in volatile objects works by accessing larger
objects, such as a byte or a word.  You cannot rely on what size of
object is accessed in order to read or write the bit-field; it may even
vary for a given bit-field according to the precise usage.

     <p>If you care about controlling the amount of memory that is accessed, use
volatile but do not use bit-fields.

     <li>GCC comes with shell scripts to fix certain known problems in system
header files.  They install corrected copies of various header files in
a special directory where only GCC will normally look for them.  The
scripts adapt to various systems by searching all the system header
files for the problem cases that we know about.

     <p>If new system header files are installed, nothing automatically arranges
to update the corrected header files.  They can be updated using the
<samp><span class="command">mkheaders</span></samp> script installed in
<samp><var>libexecdir</var><span class="file">/gcc/</span><var>target</var><span class="file">/</span><var>version</var><span class="file">/install-tools/</span></samp>.

     <li><a name="index-floating-point-precision-2526"></a>On 68000 and x86 systems, for instance, you can get paradoxical results
if you test the precise values of floating point numbers.  For example,
you can find that a floating point value which is not a NaN is not equal
to itself.  This results from the fact that the floating point registers
hold a few more bits of precision than fit in a <code>double</code> in memory. 
Compiled code moves values between memory and floating point registers
at its convenience, and moving them into memory truncates them.

     <p><a name="index-ffloat_002dstore-2527"></a>You can partially avoid this problem by using the <samp><span class="option">-ffloat-store</span></samp>
option (see <a href="Optimize-Options.html#Optimize-Options">Optimize Options</a>).

     <li>On AIX and other platforms without weak symbol support, templates
need to be instantiated explicitly and symbols for static members
of templates will not be generated.

     <li>On AIX, GCC scans object files and library archives for static
constructors and destructors when linking an application before the
linker prunes unreferenced symbols.  This is necessary to prevent the
AIX linker from mistakenly assuming that static constructor or
destructor are unused and removing them before the scanning can occur. 
All static constructors and destructors found will be referenced even
though the modules in which they occur may not be used by the program. 
This may lead to both increased executable size and unexpected symbol
references. 
</ul>

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Disappointments</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Disappointments">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Disappointments">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Trouble.html#Trouble" rel="up" title="Trouble">
<link href="C_002b_002b-Misunderstandings.html#C_002b_002b-Misunderstandings" rel="next" title="C++ Misunderstandings">
<link href="Standard-Libraries.html#Standard-Libraries" rel="prev" title="Standard Libraries">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="C_002b_002b-Misunderstandings.html#C_002b_002b-Misunderstandings" accesskey="n" rel="next">C++ Misunderstandings</a>, Previous: <a href="Standard-Libraries.html#Standard-Libraries" accesskey="p" rel="prev">Standard Libraries</a>, Up: <a href="Trouble.html#Trouble" accesskey="u" rel="up">Trouble</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
a54 3
<hr>
<a name="Disappointments-and-Misunderstandings"></a>
<h3 class="section">11.7 Disappointments and Misunderstandings</h3>
d56 3
a58 1
<p>These problems are perhaps regrettable, but we don&rsquo;t know any practical
d60 3
a62 3
</p>
<ul>
<li> Certain local variables aren&rsquo;t recognized by debuggers when you compile
d65 1
a65 1
<p>This occurs because sometimes GCC optimizes the variable out of
d70 2
a71 2
</p>
<p>You have to expect a certain amount of disagreement between the
d73 2
a74 4
</p>
</li><li> <a name="index-conflicting-types"></a>
<a name="index-scope-of-declaration"></a>
Users often think it is a bug when GCC reports an error for code
d77 9
a85 11
<div class="smallexample">
<pre class="smallexample">int foo (struct mumble *);

struct mumble { &hellip; };

int foo (struct mumble *x)
{ &hellip; }
</pre></div>

<p>This code really is erroneous, because the scope of <code>struct
mumble</code> in the prototype is limited to the argument list containing it.
d89 2
a90 2
</p>
<p>But in the definition of <code>foo</code>, the file-scope type is used
d93 2
a94 2
</p>
<p>This behavior may seem silly, but it&rsquo;s what the ISO standard specifies.
d96 1
a96 1
definition of <code>struct mumble</code> above the prototype.  It&rsquo;s not worth
d99 2
a100 2
</p>
</li><li> Accesses to bit-fields even in volatile objects works by accessing larger
d105 1
a105 1
<p>If you care about controlling the amount of memory that is accessed, use
d107 2
a108 2
</p>
</li><li> GCC comes with shell scripts to fix certain known problems in system
d114 1
a114 1
<p>If new system header files are installed, nothing automatically arranges
d116 4
a119 5
<code>mkheaders</code> script installed in
<samp><var>libexecdir</var>/gcc/<var>target</var>/<var>version</var>/install-tools/</samp>.
</p>
</li><li> <a name="index-floating-point-precision"></a>
On 68000 and x86 systems, for instance, you can get paradoxical results
d123 1
a123 1
hold a few more bits of precision than fit in a <code>double</code> in memory.
d127 1
a127 2
<a name="index-ffloat_002dstore-1"></a>
<p>You can partially avoid this problem by using the <samp>-ffloat-store</samp>
d129 2
a130 2
</p>
</li><li> On AIX and other platforms without weak symbol support, templates
d134 1
a134 1
</li><li> On AIX, GCC scans object files and library archives for static
d138 1
a138 1
destructor are unused and removing them before the scanning can occur.
d140 1
a140 1
though the modules in which they occur may not be used by the program.
d142 2
a143 9
references.
</li></ul>

<hr>
<div class="header">
<p>
Next: <a href="C_002b_002b-Misunderstandings.html#C_002b_002b-Misunderstandings" accesskey="n" rel="next">C++ Misunderstandings</a>, Previous: <a href="Standard-Libraries.html#Standard-Libraries" accesskey="p" rel="prev">Standard Libraries</a>, Up: <a href="Trouble.html#Trouble" accesskey="u" rel="up">Trouble</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>

d145 1
a146 2
</body>
</html>
@

