head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.16;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.16;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.21;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>C Dialect Options - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Invoking-GCC.html#Invoking-GCC" title="Invoking GCC">
<link rel="prev" href="Invoking-G_002b_002b.html#Invoking-G_002b_002b" title="Invoking G++">
<link rel="next" href="C_002b_002b-Dialect-Options.html#C_002b_002b-Dialect-Options" title="C++ Dialect Options">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="C-Dialect-Options"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="C_002b_002b-Dialect-Options.html#C_002b_002b-Dialect-Options">C++ Dialect Options</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Invoking-G_002b_002b.html#Invoking-G_002b_002b">Invoking G++</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Invoking-GCC.html#Invoking-GCC">Invoking GCC</a>
<hr>
</div>

<h3 class="section">3.4 Options Controlling C Dialect</h3>

<p><a name="index-dialect-options-91"></a><a name="index-language-dialect-options-92"></a><a name="index-options_002c-dialect-93"></a>
The following options control the dialect of C (or languages derived
from C, such as C++, Objective-C and Objective-C++) that the compiler
accepts:

     
<a name="index-ANSI-support-94"></a>
<a name="index-ISO-support-95"></a>
<dl><dt><code>-ansi</code><dd><a name="index-ansi-96"></a>In C mode, support all ISO C90 programs.  In C++ mode,
remove GNU extensions that conflict with ISO C++.

     <p>This turns off certain features of GCC that are incompatible with ISO
C90 (when compiling C code), or of standard C++ (when compiling C++ code),
such as the <code>asm</code> and <code>typeof</code> keywords, and
predefined macros such as <code>unix</code> and <code>vax</code> that identify the
type of system you are using.  It also enables the undesirable and
rarely used ISO trigraph feature.  For the C compiler,
it disables recognition of C++ style &lsquo;<samp><span class="samp">//</span></samp>&rsquo; comments as well as
the <code>inline</code> keyword.

     <p>The alternate keywords <code>__asm__</code>, <code>__extension__</code>,
<code>__inline__</code> and <code>__typeof__</code> continue to work despite
<samp><span class="option">-ansi</span></samp>.  You would not want to use them in an ISO C program, of
course, but it is useful to put them in header files that might be included
in compilations done with <samp><span class="option">-ansi</span></samp>.  Alternate predefined macros
such as <code>__unix__</code> and <code>__vax__</code> are also available, with or
without <samp><span class="option">-ansi</span></samp>.

     <p>The <samp><span class="option">-ansi</span></samp> option does not cause non-ISO programs to be
rejected gratuitously.  For that, <samp><span class="option">-pedantic</span></samp> is required in
addition to <samp><span class="option">-ansi</span></samp>.  See <a href="Warning-Options.html#Warning-Options">Warning Options</a>.

     <p>The macro <code>__STRICT_ANSI__</code> is predefined when the <samp><span class="option">-ansi</span></samp>
option is used.  Some header files may notice this macro and refrain
from declaring certain functions or defining certain macros that the
ISO standard doesn't call for; this is to avoid interfering with any
programs that might use these names for other things.

     <p>Functions which would normally be built in but do not have semantics
defined by ISO C (such as <code>alloca</code> and <code>ffs</code>) are not built-in
functions with <samp><span class="option">-ansi</span></samp> is used.  See <a href="Other-Builtins.html#Other-Builtins">Other built-in functions provided by GCC</a>, for details of the functions
affected.

     <br><dt><code>-std=</code><dd><a name="index-std-97"></a>Determine the language standard.  This option is currently only
supported when compiling C or C++.  A value for this option must be
provided; possible values are

          <dl>
<dt>&lsquo;<samp><span class="samp">c89</span></samp>&rsquo;<dt>&lsquo;<samp><span class="samp">iso9899:1990</span></samp>&rsquo;<dd>ISO C90 (same as <samp><span class="option">-ansi</span></samp>).

          <br><dt>&lsquo;<samp><span class="samp">iso9899:199409</span></samp>&rsquo;<dd>ISO C90 as modified in amendment 1.

          <br><dt>&lsquo;<samp><span class="samp">c99</span></samp>&rsquo;<dt>&lsquo;<samp><span class="samp">c9x</span></samp>&rsquo;<dt>&lsquo;<samp><span class="samp">iso9899:1999</span></samp>&rsquo;<dt>&lsquo;<samp><span class="samp">iso9899:199x</span></samp>&rsquo;<dd>ISO C99.  Note that this standard is not yet fully supported; see
<a href="http://gcc.gnu.org/gcc-4.1/c99status.html">http://gcc.gnu.org/gcc-4.1/c99status.html</a><!-- /@@w --> for more information.  The
names &lsquo;<samp><span class="samp">c9x</span></samp>&rsquo; and &lsquo;<samp><span class="samp">iso9899:199x</span></samp>&rsquo; are deprecated.

          <br><dt>&lsquo;<samp><span class="samp">gnu89</span></samp>&rsquo;<dd>Default, ISO C90 plus GNU extensions (including some C99 features).

          <br><dt>&lsquo;<samp><span class="samp">gnu99</span></samp>&rsquo;<dt>&lsquo;<samp><span class="samp">gnu9x</span></samp>&rsquo;<dd>ISO C99 plus GNU extensions.  When ISO C99 is fully implemented in GCC,
this will become the default.  The name &lsquo;<samp><span class="samp">gnu9x</span></samp>&rsquo; is deprecated.

          <br><dt>&lsquo;<samp><span class="samp">c++98</span></samp>&rsquo;<dd>The 1998 ISO C++ standard plus amendments.

          <br><dt>&lsquo;<samp><span class="samp">gnu++98</span></samp>&rsquo;<dd>The same as <samp><span class="option">-std=c++98</span></samp> plus GNU extensions.  This is the
default for C++ code. 
</dl>

     <p>Even when this option is not specified, you can still use some of the
features of newer standards in so far as they do not conflict with
previous C standards.  For example, you may use <code>__restrict__</code> even
when <samp><span class="option">-std=c99</span></samp> is not specified.

     <p>The <samp><span class="option">-std</span></samp> options specifying some version of ISO C have the same
effects as <samp><span class="option">-ansi</span></samp>, except that features that were not in ISO C90
but are in the specified version (for example, &lsquo;<samp><span class="samp">//</span></samp>&rsquo; comments and
the <code>inline</code> keyword in ISO C99) are not disabled.

     <p>See <a href="Standards.html#Standards">Language Standards Supported by GCC</a>, for details of
these standard versions.

     <br><dt><code>-aux-info </code><var>filename</var><dd><a name="index-aux_002dinfo-98"></a>Output to the given filename prototyped declarations for all functions
declared and/or defined in a translation unit, including those in header
files.  This option is silently ignored in any language other than C.

     <p>Besides declarations, the file indicates, in comments, the origin of
each declaration (source file and line), whether the declaration was
implicit, prototyped or unprototyped (&lsquo;<samp><span class="samp">I</span></samp>&rsquo;, &lsquo;<samp><span class="samp">N</span></samp>&rsquo; for new or
&lsquo;<samp><span class="samp">O</span></samp>&rsquo; for old, respectively, in the first character after the line
number and the colon), and whether it came from a declaration or a
definition (&lsquo;<samp><span class="samp">C</span></samp>&rsquo; or &lsquo;<samp><span class="samp">F</span></samp>&rsquo;, respectively, in the following
character).  In the case of function definitions, a K&amp;R-style list of
arguments followed by their declarations is also provided, inside
comments, after the declaration.

     <br><dt><code>-fno-asm</code><dd><a name="index-fno_002dasm-99"></a>Do not recognize <code>asm</code>, <code>inline</code> or <code>typeof</code> as a
keyword, so that code can use these words as identifiers.  You can use
the keywords <code>__asm__</code>, <code>__inline__</code> and <code>__typeof__</code>
instead.  <samp><span class="option">-ansi</span></samp> implies <samp><span class="option">-fno-asm</span></samp>.

     <p>In C++, this switch only affects the <code>typeof</code> keyword, since
<code>asm</code> and <code>inline</code> are standard keywords.  You may want to
use the <samp><span class="option">-fno-gnu-keywords</span></samp> flag instead, which has the same
effect.  In C99 mode (<samp><span class="option">-std=c99</span></samp> or <samp><span class="option">-std=gnu99</span></samp>), this
switch only affects the <code>asm</code> and <code>typeof</code> keywords, since
<code>inline</code> is a standard keyword in ISO C99.

     <br><dt><code>-fno-builtin</code><dt><code>-fno-builtin-</code><var>function</var><dd><a name="index-fno_002dbuiltin-100"></a><a name="index-built_002din-functions-101"></a>Don't recognize built-in functions that do not begin with
&lsquo;<samp><span class="samp">__builtin_</span></samp>&rsquo; as prefix.  See <a href="Other-Builtins.html#Other-Builtins">Other built-in functions provided by GCC</a>, for details of the functions affected,
including those which are not built-in functions when <samp><span class="option">-ansi</span></samp> or
<samp><span class="option">-std</span></samp> options for strict ISO C conformance are used because they
do not have an ISO standard meaning.

     <p>GCC normally generates special code to handle certain built-in functions
more efficiently; for instance, calls to <code>alloca</code> may become single
instructions that adjust the stack directly, and calls to <code>memcpy</code>
may become inline copy loops.  The resulting code is often both smaller
and faster, but since the function calls no longer appear as such, you
cannot set a breakpoint on those calls, nor can you change the behavior
of the functions by linking with a different library.  In addition,
when a function is recognized as a built-in function, GCC may use
information about that function to warn about problems with calls to
that function, or to generate more efficient code, even if the
resulting code still contains calls to that function.  For example,
warnings are given with <samp><span class="option">-Wformat</span></samp> for bad calls to
<code>printf</code>, when <code>printf</code> is built in, and <code>strlen</code> is
known not to modify global memory.

     <p>With the <samp><span class="option">-fno-builtin-</span><var>function</var></samp> option
only the built-in function <var>function</var> is
disabled.  <var>function</var> must not begin with &lsquo;<samp><span class="samp">__builtin_</span></samp>&rsquo;.  If a
function is named this is not built-in in this version of GCC, this
option is ignored.  There is no corresponding
<samp><span class="option">-fbuiltin-</span><var>function</var></samp> option; if you wish to enable
built-in functions selectively when using <samp><span class="option">-fno-builtin</span></samp> or
<samp><span class="option">-ffreestanding</span></samp>, you may define macros such as:

     <pre class="smallexample">          #define abs(n)          __builtin_abs ((n))
          #define strcpy(d, s)    __builtin_strcpy ((d), (s))
</pre>
     <br><dt><code>-fhosted</code><dd><a name="index-fhosted-102"></a><a name="index-hosted-environment-103"></a>
Assert that compilation takes place in a hosted environment.  This implies
<samp><span class="option">-fbuiltin</span></samp>.  A hosted environment is one in which the
entire standard library is available, and in which <code>main</code> has a return
type of <code>int</code>.  Examples are nearly everything except a kernel. 
This is equivalent to <samp><span class="option">-fno-freestanding</span></samp>.

     <br><dt><code>-ffreestanding</code><dd><a name="index-ffreestanding-104"></a><a name="index-hosted-environment-105"></a>
Assert that compilation takes place in a freestanding environment.  This
implies <samp><span class="option">-fno-builtin</span></samp>.  A freestanding environment
is one in which the standard library may not exist, and program startup may
not necessarily be at <code>main</code>.  The most obvious example is an OS kernel. 
This is equivalent to <samp><span class="option">-fno-hosted</span></samp>.

     <p>See <a href="Standards.html#Standards">Language Standards Supported by GCC</a>, for details of
freestanding and hosted environments.

     <br><dt><code>-fms-extensions</code><dd><a name="index-fms_002dextensions-106"></a>Accept some non-standard constructs used in Microsoft header files.

     <p>Some cases of unnamed fields in structures and unions are only
accepted with this option.  See <a href="Unnamed-Fields.html#Unnamed-Fields">Unnamed struct/union fields within structs/unions</a>, for details.

     <br><dt><code>-trigraphs</code><dd><a name="index-trigraphs-107"></a>Support ISO C trigraphs.  The <samp><span class="option">-ansi</span></samp> option (and <samp><span class="option">-std</span></samp>
options for strict ISO C conformance) implies <samp><span class="option">-trigraphs</span></samp>.

     <br><dt><code>-no-integrated-cpp</code><dd><a name="index-no_002dintegrated_002dcpp-108"></a>Performs a compilation in two passes: preprocessing and compiling.  This
option allows a user supplied "cc1", "cc1plus", or "cc1obj" via the
<samp><span class="option">-B</span></samp> option.  The user supplied compilation step can then add in
an additional preprocessing step after normal preprocessing but before
compiling.  The default is to use the integrated cpp (internal cpp)

     <p>The semantics of this option will change if "cc1", "cc1plus", and
"cc1obj" are merged.

     <p><a name="index-traditional-C-language-109"></a><a name="index-C-language_002c-traditional-110"></a><br><dt><code>-traditional</code><dt><code>-traditional-cpp</code><dd><a name="index-traditional_002dcpp-111"></a><a name="index-traditional-112"></a>Formerly, these options caused GCC to attempt to emulate a pre-standard
C compiler.  They are now only supported with the <samp><span class="option">-E</span></samp> switch. 
The preprocessor continues to support a pre-standard mode.  See the GNU
CPP manual for details.

     <br><dt><code>-fcond-mismatch</code><dd><a name="index-fcond_002dmismatch-113"></a>Allow conditional expressions with mismatched types in the second and
third arguments.  The value of such an expression is void.  This option
is not supported for C++.

     <br><dt><code>-funsigned-char</code><dd><a name="index-funsigned_002dchar-114"></a>Let the type <code>char</code> be unsigned, like <code>unsigned char</code>.

     <p>Each kind of machine has a default for what <code>char</code> should
be.  It is either like <code>unsigned char</code> by default or like
<code>signed char</code> by default.

     <p>Ideally, a portable program should always use <code>signed char</code> or
<code>unsigned char</code> when it depends on the signedness of an object. 
But many programs have been written to use plain <code>char</code> and
expect it to be signed, or expect it to be unsigned, depending on the
machines they were written for.  This option, and its inverse, let you
make such a program work with the opposite default.

     <p>The type <code>char</code> is always a distinct type from each of
<code>signed char</code> or <code>unsigned char</code>, even though its behavior
is always just like one of those two.

     <br><dt><code>-fsigned-char</code><dd><a name="index-fsigned_002dchar-115"></a>Let the type <code>char</code> be signed, like <code>signed char</code>.

     <p>Note that this is equivalent to <samp><span class="option">-fno-unsigned-char</span></samp>, which is
the negative form of <samp><span class="option">-funsigned-char</span></samp>.  Likewise, the option
<samp><span class="option">-fno-signed-char</span></samp> is equivalent to <samp><span class="option">-funsigned-char</span></samp>.

     <br><dt><code>-fsigned-bitfields</code><dt><code>-funsigned-bitfields</code><dt><code>-fno-signed-bitfields</code><dt><code>-fno-unsigned-bitfields</code><dd><a name="index-fsigned_002dbitfields-116"></a><a name="index-funsigned_002dbitfields-117"></a><a name="index-fno_002dsigned_002dbitfields-118"></a><a name="index-fno_002dunsigned_002dbitfields-119"></a>These options control whether a bit-field is signed or unsigned, when the
declaration does not use either <code>signed</code> or <code>unsigned</code>.  By
default, such a bit-field is signed, because this is consistent: the
basic integer types such as <code>int</code> are signed types. 
</dl>

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): C Dialect Options</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): C Dialect Options">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): C Dialect Options">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Invoking-GCC.html#Invoking-GCC" rel="up" title="Invoking GCC">
<link href="C_002b_002b-Dialect-Options.html#C_002b_002b-Dialect-Options" rel="next" title="C++ Dialect Options">
<link href="Invoking-G_002b_002b.html#Invoking-G_002b_002b" rel="prev" title="Invoking G++">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="C_002b_002b-Dialect-Options.html#C_002b_002b-Dialect-Options" accesskey="n" rel="next">C++ Dialect Options</a>, Previous: <a href="Invoking-G_002b_002b.html#Invoking-G_002b_002b" accesskey="p" rel="prev">Invoking G++</a>, Up: <a href="Invoking-GCC.html#Invoking-GCC" accesskey="u" rel="up">Invoking GCC</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
d55 1
a55 2
<hr>
<a name="Options-Controlling-C-Dialect"></a>
a56 3
<a name="index-dialect-options"></a>
<a name="index-language-dialect-options"></a>
<a name="index-options_002c-dialect"></a>
d58 2
a59 1
<p>The following options control the dialect of C (or languages derived
d62 8
a69 11
</p>
<dl compact="compact">
<dd><a name="index-ANSI-support"></a>
<a name="index-ISO-support"></a>
</dd>
<dt><code>-ansi</code></dt>
<dd><a name="index-ansi-1"></a>
<p>In C mode, this is equivalent to &lsquo;<samp>-std=c90</samp>&rsquo;. In C++ mode, it is
equivalent to &lsquo;<samp>-std=c++98</samp>&rsquo;.
</p>
<p>This turns off certain features of GCC that are incompatible with ISO
d75 1
a75 1
it disables recognition of C++ style &lsquo;<samp>//</samp>&rsquo; comments as well as
d77 2
a78 2
</p>
<p>The alternate keywords <code>__asm__</code>, <code>__extension__</code>,
d80 1
a80 1
<samp>-ansi</samp>.  You would not want to use them in an ISO C program, of
d82 1
a82 1
in compilations done with <samp>-ansi</samp>.  Alternate predefined macros
d84 7
a90 7
without <samp>-ansi</samp>.
</p>
<p>The <samp>-ansi</samp> option does not cause non-ISO programs to be
rejected gratuitously.  For that, <samp>-pedantic</samp> is required in
addition to <samp>-ansi</samp>.  See <a href="Warning-Options.html#Warning-Options">Warning Options</a>.
</p>
<p>The macro <code>__STRICT_ANSI__</code> is predefined when the <samp>-ansi</samp>
d93 1
a93 1
ISO standard doesn&rsquo;t call for; this is to avoid interfering with any
d95 2
a96 2
</p>
<p>Functions that would normally be built in but do not have semantics
d98 1
a98 2
functions when <samp>-ansi</samp> is used.  See <a href="Other-Builtins.html#Other-Builtins">Other
built-in functions provided by GCC</a>, for details of the functions
d100 23
a122 94
</p>
</dd>
<dt><code>-std=</code></dt>
<dd><a name="index-std-1"></a>
<p>Determine the language standard. See <a href="Standards.html#Standards">Language Standards
Supported by GCC</a>, for details of these standard versions.  This option
is currently only supported when compiling C or C++.
</p>
<p>The compiler can accept several base standards, such as &lsquo;<samp>c90</samp>&rsquo; or
&lsquo;<samp>c++98</samp>&rsquo;, and GNU dialects of those standards, such as
&lsquo;<samp>gnu90</samp>&rsquo; or &lsquo;<samp>gnu++98</samp>&rsquo;.  By specifying a base standard, the
compiler will accept all programs following that standard and those
using GNU extensions that do not contradict it.  For example,
&lsquo;<samp>-std=c90</samp>&rsquo; turns off certain features of GCC that are
incompatible with ISO C90, such as the <code>asm</code> and <code>typeof</code>
keywords, but not other GNU extensions that do not have a meaning in
ISO C90, such as omitting the middle term of a <code>?:</code>
expression. On the other hand, by specifying a GNU dialect of a
standard, all features the compiler support are enabled, even when
those features change the meaning of the base standard and some
strict-conforming programs may be rejected.  The particular standard
is used by <samp>-pedantic</samp> to identify which features are GNU
extensions given that version of the standard. For example
&lsquo;<samp>-std=gnu90 -pedantic</samp>&rsquo; would warn about C++ style &lsquo;<samp>//</samp>&rsquo;
comments, while &lsquo;<samp>-std=gnu99 -pedantic</samp>&rsquo; would not.
</p>
<p>A value for this option must be provided; possible values are
</p>
<dl compact="compact">
<dt>&lsquo;<samp>c90</samp>&rsquo;</dt>
<dt>&lsquo;<samp>c89</samp>&rsquo;</dt>
<dt>&lsquo;<samp>iso9899:1990</samp>&rsquo;</dt>
<dd><p>Support all ISO C90 programs (certain GNU extensions that conflict
with ISO C90 are disabled). Same as <samp>-ansi</samp> for C code.
</p>
</dd>
<dt>&lsquo;<samp>iso9899:199409</samp>&rsquo;</dt>
<dd><p>ISO C90 as modified in amendment 1.
</p>
</dd>
<dt>&lsquo;<samp>c99</samp>&rsquo;</dt>
<dt>&lsquo;<samp>c9x</samp>&rsquo;</dt>
<dt>&lsquo;<samp>iso9899:1999</samp>&rsquo;</dt>
<dt>&lsquo;<samp>iso9899:199x</samp>&rsquo;</dt>
<dd><p>ISO C99.  Note that this standard is not yet fully supported; see
<a href="http://gcc.gnu.org/gcc-4.7/c99status.html">http://gcc.gnu.org/gcc-4.7/c99status.html</a><!-- /@@w --> for more information.  The
names &lsquo;<samp>c9x</samp>&rsquo; and &lsquo;<samp>iso9899:199x</samp>&rsquo; are deprecated.
</p>
</dd>
<dt>&lsquo;<samp>c11</samp>&rsquo;</dt>
<dt>&lsquo;<samp>c1x</samp>&rsquo;</dt>
<dt>&lsquo;<samp>iso9899:2011</samp>&rsquo;</dt>
<dd><p>ISO C11, the 2011 revision of the ISO C standard.
Support is incomplete and experimental.  The name &lsquo;<samp>c1x</samp>&rsquo; is
deprecated.
</p>
</dd>
<dt>&lsquo;<samp>gnu90</samp>&rsquo;</dt>
<dt>&lsquo;<samp>gnu89</samp>&rsquo;</dt>
<dd><p>GNU dialect of ISO C90 (including some C99 features). This
is the default for C code.
</p>
</dd>
<dt>&lsquo;<samp>gnu99</samp>&rsquo;</dt>
<dt>&lsquo;<samp>gnu9x</samp>&rsquo;</dt>
<dd><p>GNU dialect of ISO C99.  When ISO C99 is fully implemented in GCC,
this will become the default.  The name &lsquo;<samp>gnu9x</samp>&rsquo; is deprecated.
</p>
</dd>
<dt>&lsquo;<samp>gnu11</samp>&rsquo;</dt>
<dt>&lsquo;<samp>gnu1x</samp>&rsquo;</dt>
<dd><p>GNU dialect of ISO C11.  Support is incomplete and experimental.  The
name &lsquo;<samp>gnu1x</samp>&rsquo; is deprecated.
</p>
</dd>
<dt>&lsquo;<samp>c++98</samp>&rsquo;</dt>
<dd><p>The 1998 ISO C++ standard plus amendments. Same as <samp>-ansi</samp> for
C++ code.
</p>
</dd>
<dt>&lsquo;<samp>gnu++98</samp>&rsquo;</dt>
<dd><p>GNU dialect of <samp>-std=c++98</samp>.  This is the default for
C++ code.
</p>
</dd>
<dt>&lsquo;<samp>c++11</samp>&rsquo;</dt>
<dd><p>The 2011 ISO C++ standard plus amendments.  Support for C++11 is still
experimental, and may change in incompatible ways in future releases.
</p>
</dd>
<dt>&lsquo;<samp>gnu++11</samp>&rsquo;</dt>
<dd><p>GNU dialect of <samp>-std=c++11</samp>. Support for C++11 is still
experimental, and may change in incompatible ways in future releases.
</p></dd>
d125 14
a138 27
</dd>
<dt><code>-fgnu89-inline</code></dt>
<dd><a name="index-fgnu89_002dinline"></a>
<p>The option <samp>-fgnu89-inline</samp> tells GCC to use the traditional
GNU semantics for <code>inline</code> functions when in C99 mode.
See <a href="Inline.html#Inline">An Inline Function is As Fast As a Macro</a>.  This option
is accepted and ignored by GCC versions 4.1.3 up to but not including
4.3.  In GCC versions 4.3 and later it changes the behavior of GCC in
C99 mode.  Using this option is roughly equivalent to adding the
<code>gnu_inline</code> function attribute to all inline functions
(see <a href="Function-Attributes.html#Function-Attributes">Function Attributes</a>).
</p>
<p>The option <samp>-fno-gnu89-inline</samp> explicitly tells GCC to use the
C99 semantics for <code>inline</code> when in C99 or gnu99 mode (i.e., it
specifies the default behavior).  This option was first supported in
GCC 4.3.  This option is not supported in <samp>-std=c90</samp> or
<samp>-std=gnu90</samp> mode.
</p>
<p>The preprocessor macros <code>__GNUC_GNU_INLINE__</code> and
<code>__GNUC_STDC_INLINE__</code> may be used to check which semantics are
in effect for <code>inline</code> functions.  See <a href="http://gcc.gnu.org/onlinedocs/cpp/Common-Predefined-Macros.html#Common-Predefined-Macros">Common Predefined
Macros</a> in <cite>The C Preprocessor</cite>.
</p>
</dd>
<dt><code>-aux-info <var>filename</var></code></dt>
<dd><a name="index-aux_002dinfo"></a>
<p>Output to the given filename prototyped declarations for all functions
d141 2
a142 2
</p>
<p>Besides declarations, the file indicates, in comments, the origin of
d144 2
a145 2
implicit, prototyped or unprototyped (&lsquo;<samp>I</samp>&rsquo;, &lsquo;<samp>N</samp>&rsquo; for new or
&lsquo;<samp>O</samp>&rsquo; for old, respectively, in the first character after the line
d147 1
a147 1
definition (&lsquo;<samp>C</samp>&rsquo; or &lsquo;<samp>F</samp>&rsquo;, respectively, in the following
d151 2
a152 13
</p>
</dd>
<dt><code>-fallow-parameterless-variadic-functions</code></dt>
<dd><p>Accept variadic functions without named parameters.
</p>
<p>Although it is possible to define such a function, this is not very
useful as it is not possible to read the arguments.  This is only
supported for C as this construct is allowed by C++.
</p>
</dd>
<dt><code>-fno-asm</code></dt>
<dd><a name="index-fno_002dasm"></a>
<p>Do not recognize <code>asm</code>, <code>inline</code> or <code>typeof</code> as a
d155 3
a157 3
instead.  <samp>-ansi</samp> implies <samp>-fno-asm</samp>.
</p>
<p>In C++, this switch only affects the <code>typeof</code> keyword, since
d159 2
a160 2
use the <samp>-fno-gnu-keywords</samp> flag instead, which has the same
effect.  In C99 mode (<samp>-std=c99</samp> or <samp>-std=gnu99</samp>), this
d163 5
a167 11
</p>
</dd>
<dt><code>-fno-builtin</code></dt>
<dt><code>-fno-builtin-<var>function</var></code></dt>
<dd><a name="index-fno_002dbuiltin"></a>
<a name="index-built_002din-functions"></a>
<p>Don&rsquo;t recognize built-in functions that do not begin with
&lsquo;<samp>__builtin_</samp>&rsquo; as prefix.  See <a href="Other-Builtins.html#Other-Builtins">Other built-in
functions provided by GCC</a>, for details of the functions affected,
including those which are not built-in functions when <samp>-ansi</samp> or
<samp>-std</samp> options for strict ISO C conformance are used because they
d169 2
a170 2
</p>
<p>GCC normally generates special code to handle certain built-in functions
d172 1
a172 1
instructions which adjust the stack directly, and calls to <code>memcpy</code>
d181 1
a181 1
warnings are given with <samp>-Wformat</samp> for bad calls to
d184 2
a185 2
</p>
<p>With the <samp>-fno-builtin-<var>function</var></samp> option
d187 2
a188 2
disabled.  <var>function</var> must not begin with &lsquo;<samp>__builtin_</samp>&rsquo;.  If a
function is named that is not built-in in this version of GCC, this
d190 10
a199 16
<samp>-fbuiltin-<var>function</var></samp> option; if you wish to enable
built-in functions selectively when using <samp>-fno-builtin</samp> or
<samp>-ffreestanding</samp>, you may define macros such as:
</p>
<div class="smallexample">
<pre class="smallexample">#define abs(n)          __builtin_abs ((n))
#define strcpy(d, s)    __builtin_strcpy ((d), (s))
</pre></div>

</dd>
<dt><code>-fhosted</code></dt>
<dd><a name="index-fhosted"></a>
<a name="index-hosted-environment-1"></a>

<p>Assert that compilation takes place in a hosted environment.  This implies
<samp>-fbuiltin</samp>.  A hosted environment is one in which the
d201 2
a202 7
type of <code>int</code>.  Examples are nearly everything except a kernel.
This is equivalent to <samp>-fno-freestanding</samp>.
</p>
</dd>
<dt><code>-ffreestanding</code></dt>
<dd><a name="index-ffreestanding-1"></a>
<a name="index-hosted-environment-2"></a>
d204 3
a206 2
<p>Assert that compilation takes place in a freestanding environment.  This
implies <samp>-fno-builtin</samp>.  A freestanding environment
d208 4
a211 4
not necessarily be at <code>main</code>.  The most obvious example is an OS kernel.
This is equivalent to <samp>-fno-hosted</samp>.
</p>
<p>See <a href="Standards.html#Standards">Language Standards Supported by GCC</a>, for details of
d213 12
a224 71
</p>
</dd>
<dt><code>-fopenmp</code></dt>
<dd><a name="index-fopenmp"></a>
<a name="index-OpenMP-parallel"></a>
<p>Enable handling of OpenMP directives <code>#pragma omp</code> in C/C++ and
<code>!$omp</code> in Fortran.  When <samp>-fopenmp</samp> is specified, the
compiler generates parallel code according to the OpenMP Application
Program Interface v3.0 <a href="http://www.openmp.org/">http://www.openmp.org/</a><!-- /@@w -->.  This option
implies <samp>-pthread</samp>, and thus is only supported on targets that
have support for <samp>-pthread</samp>.
</p>
</dd>
<dt><code>-fgnu-tm</code></dt>
<dd><a name="index-fgnu_002dtm"></a>
<p>When the option <samp>-fgnu-tm</samp> is specified, the compiler will
generate code for the Linux variant of Intel&rsquo;s current Transactional
Memory ABI specification document (Revision 1.1, May 6 2009).  This is
an experimental feature whose interface may change in future versions
of GCC, as the official specification changes.  Please note that not
all architectures are supported for this feature.
</p>
<p>For more information on GCC&rsquo;s support for transactional memory,
See <a href="../libitm/Enabling-libitm.html#Enabling-libitm">The GNU Transactional Memory Library</a> in <cite>GNU
Transactional Memory Library</cite>.
</p>
<p>Note that the transactional memory feature is not supported with
non-call exceptions (<samp>-fnon-call-exceptions</samp>).
</p>
</dd>
<dt><code>-fms-extensions</code></dt>
<dd><a name="index-fms_002dextensions"></a>
<p>Accept some non-standard constructs used in Microsoft header files.
</p>
<p>In C++ code, this allows member names in structures to be similar
to previous types declarations.
</p>
<div class="smallexample">
<pre class="smallexample">typedef int UOW;
struct ABC {
  UOW UOW;
};
</pre></div>

<p>Some cases of unnamed fields in structures and unions are only
accepted with this option.  See <a href="Unnamed-Fields.html#Unnamed-Fields">Unnamed struct/union
fields within structs/unions</a>, for details.
</p>
</dd>
<dt><code>-fplan9-extensions</code></dt>
<dd><p>Accept some non-standard constructs used in Plan 9 code.
</p>
<p>This enables <samp>-fms-extensions</samp>, permits passing pointers to
structures with anonymous fields to functions that expect pointers to
elements of the type of the field, and permits referring to anonymous
fields declared using a typedef.  See <a href="Unnamed-Fields.html#Unnamed-Fields">Unnamed
struct/union fields within structs/unions</a>, for details.  This is only
supported for C, not C++.
</p>
</dd>
<dt><code>-trigraphs</code></dt>
<dd><a name="index-trigraphs"></a>
<p>Support ISO C trigraphs.  The <samp>-ansi</samp> option (and <samp>-std</samp>
options for strict ISO C conformance) implies <samp>-trigraphs</samp>.
</p>
</dd>
<dt><code>-no-integrated-cpp</code></dt>
<dd><a name="index-no_002dintegrated_002dcpp"></a>
<p>Performs a compilation in two passes: preprocessing and compiling.  This
option allows a user supplied &quot;cc1&quot;, &quot;cc1plus&quot;, or &quot;cc1obj&quot; via the
<samp>-B</samp> option.  The user supplied compilation step can then add in
d227 6
a232 13
</p>
<p>The semantics of this option will change if &quot;cc1&quot;, &quot;cc1plus&quot;, and
&quot;cc1obj&quot; are merged.
</p>
<a name="index-traditional-C-language"></a>
<a name="index-C-language_002c-traditional"></a>
</dd>
<dt><code>-traditional</code></dt>
<dt><code>-traditional-cpp</code></dt>
<dd><a name="index-traditional_002dcpp"></a>
<a name="index-traditional"></a>
<p>Formerly, these options caused GCC to attempt to emulate a pre-standard
C compiler.  They are now only supported with the <samp>-E</samp> switch.
d235 2
a236 5
</p>
</dd>
<dt><code>-fcond-mismatch</code></dt>
<dd><a name="index-fcond_002dmismatch"></a>
<p>Allow conditional expressions with mismatched types in the second and
d239 4
a242 14
</p>
</dd>
<dt><code>-flax-vector-conversions</code></dt>
<dd><a name="index-flax_002dvector_002dconversions"></a>
<p>Allow implicit conversions between vectors with differing numbers of
elements and/or incompatible element types.  This option should not be
used for new code.
</p>
</dd>
<dt><code>-funsigned-char</code></dt>
<dd><a name="index-funsigned_002dchar"></a>
<p>Let the type <code>char</code> be unsigned, like <code>unsigned char</code>.
</p>
<p>Each kind of machine has a default for what <code>char</code> should
d245 3
a247 3
</p>
<p>Ideally, a portable program should always use <code>signed char</code> or
<code>unsigned char</code> when it depends on the signedness of an object.
d252 2
a253 2
</p>
<p>The type <code>char</code> is always a distinct type from each of
d256 8
a263 20
</p>
</dd>
<dt><code>-fsigned-char</code></dt>
<dd><a name="index-fsigned_002dchar"></a>
<p>Let the type <code>char</code> be signed, like <code>signed char</code>.
</p>
<p>Note that this is equivalent to <samp>-fno-unsigned-char</samp>, which is
the negative form of <samp>-funsigned-char</samp>.  Likewise, the option
<samp>-fno-signed-char</samp> is equivalent to <samp>-funsigned-char</samp>.
</p>
</dd>
<dt><code>-fsigned-bitfields</code></dt>
<dt><code>-funsigned-bitfields</code></dt>
<dt><code>-fno-signed-bitfields</code></dt>
<dt><code>-fno-unsigned-bitfields</code></dt>
<dd><a name="index-fsigned_002dbitfields"></a>
<a name="index-funsigned_002dbitfields"></a>
<a name="index-fno_002dsigned_002dbitfields"></a>
<a name="index-fno_002dunsigned_002dbitfields"></a>
<p>These options control whether a bit-field is signed or unsigned, when the
d266 1
a266 2
basic integer types such as <code>int</code> are signed types.
</p></dd>
d269 1
a269 7
<hr>
<div class="header">
<p>
Next: <a href="C_002b_002b-Dialect-Options.html#C_002b_002b-Dialect-Options" accesskey="n" rel="next">C++ Dialect Options</a>, Previous: <a href="Invoking-G_002b_002b.html#Invoking-G_002b_002b" accesskey="p" rel="prev">Invoking G++</a>, Up: <a href="Invoking-GCC.html#Invoking-GCC" accesskey="u" rel="up">Invoking GCC</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>


a270 2
</body>
</html>
@

