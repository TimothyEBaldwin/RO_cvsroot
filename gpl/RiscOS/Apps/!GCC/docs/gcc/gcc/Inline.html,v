head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.16;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.16;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.21;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Inline - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="C-Extensions.html#C-Extensions" title="C Extensions">
<link rel="prev" href="Alignment.html#Alignment" title="Alignment">
<link rel="next" href="Extended-Asm.html#Extended-Asm" title="Extended Asm">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Inline"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Extended-Asm.html#Extended-Asm">Extended Asm</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Alignment.html#Alignment">Alignment</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="C-Extensions.html#C-Extensions">C Extensions</a>
<hr>
</div>

<h3 class="section">5.33 An Inline Function is As Fast As a Macro</h3>

<p><a name="index-inline-functions-1877"></a><a name="index-integrating-function-code-1878"></a><a name="index-open-coding-1879"></a><a name="index-macros_002c-inline-alternative-1880"></a>
By declaring a function <code>inline</code>, you can direct GCC to
integrate that function's code into the code for its callers.  This
makes execution faster by eliminating the function-call overhead; in
addition, if any of the actual argument values are constant, their known
values may permit simplifications at compile time so that not all of the
inline function's code needs to be included.  The effect on code size is
less predictable; object code may be larger or smaller with function
inlining, depending on the particular case.  Inlining of functions is an
optimization and it really &ldquo;works&rdquo; only in optimizing compilation.  If
you don't use <samp><span class="option">-O</span></samp>, no function is really inline.

 <p>Inline functions are included in the ISO C99 standard, but there are
currently substantial differences between what GCC implements and what
the ISO C99 standard requires.

 <p>To declare a function inline, use the <code>inline</code> keyword in its
declaration, like this:

<pre class="smallexample">     inline int
     inc (int *a)
     {
       (*a)++;
     }
</pre>
 <p>(If you are writing a header file to be included in ISO C programs, write
<code>__inline__</code> instead of <code>inline</code>.  See <a href="Alternate-Keywords.html#Alternate-Keywords">Alternate Keywords</a>.) 
You can also make all &ldquo;simple enough&rdquo; functions inline with the option
<samp><span class="option">-finline-functions</span></samp>.

 <p><a name="index-Winline-1881"></a>Note that certain usages in a function definition can make it unsuitable
for inline substitution.  Among these usages are: use of varargs, use of
alloca, use of variable sized data types (see <a href="Variable-Length.html#Variable-Length">Variable Length</a>),
use of computed goto (see <a href="Labels-as-Values.html#Labels-as-Values">Labels as Values</a>), use of nonlocal goto,
and nested functions (see <a href="Nested-Functions.html#Nested-Functions">Nested Functions</a>).  Using <samp><span class="option">-Winline</span></samp>
will warn when a function marked <code>inline</code> could not be substituted,
and will give the reason for the failure.

 <p>Note that in C and Objective-C, unlike C++, the <code>inline</code> keyword
does not affect the linkage of the function.

 <p><a name="index-automatic-_0040code_007binline_007d-for-C_002b_002b-member-fns-1882"></a><a name="index-g_t_0040code_007binline_007d-automatic-for-C_002b_002b-member-fns-1883"></a><a name="index-member-fns_002c-automatically-_0040code_007binline_007d-1884"></a><a name="index-C_002b_002b-member-fns_002c-automatically-_0040code_007binline_007d-1885"></a><a name="index-fno_002ddefault_002dinline-1886"></a>GCC automatically inlines member functions defined within the class
body of C++ programs even if they are not explicitly declared
<code>inline</code>.  (You can override this with <samp><span class="option">-fno-default-inline</span></samp>;
see <a href="C_002b_002b-Dialect-Options.html#C_002b_002b-Dialect-Options">Options Controlling C++ Dialect</a>.)

 <p><a name="index-inline-functions_002c-omission-of-1887"></a><a name="index-fkeep_002dinline_002dfunctions-1888"></a>When a function is both inline and <code>static</code>, if all calls to the
function are integrated into the caller, and the function's address is
never used, then the function's own assembler code is never referenced. 
In this case, GCC does not actually output assembler code for the
function, unless you specify the option <samp><span class="option">-fkeep-inline-functions</span></samp>. 
Some calls cannot be integrated for various reasons (in particular,
calls that precede the function's definition cannot be integrated, and
neither can recursive calls within the definition).  If there is a
nonintegrated call, then the function is compiled to assembler code as
usual.  The function must also be compiled as usual if the program
refers to its address, because that can't be inlined.

 <p><a name="index-non_002dstatic-inline-function-1889"></a>When an inline function is not <code>static</code>, then the compiler must assume
that there may be calls from other source files; since a global symbol can
be defined only once in any program, the function must not be defined in
the other source files, so the calls therein cannot be integrated. 
Therefore, a non-<code>static</code> inline function is always compiled on its
own in the usual fashion.

 <p>If you specify both <code>inline</code> and <code>extern</code> in the function
definition, then the definition is used only for inlining.  In no case
is the function compiled on its own, not even if you refer to its
address explicitly.  Such an address becomes an external reference, as
if you had only declared the function, and had not defined it.

 <p>This combination of <code>inline</code> and <code>extern</code> has almost the
effect of a macro.  The way to use it is to put a function definition in
a header file with these keywords, and put another copy of the
definition (lacking <code>inline</code> and <code>extern</code>) in a library file. 
The definition in the header file will cause most calls to the function
to be inlined.  If any uses of the function remain, they will refer to
the single copy in the library.

 <p>Since GCC eventually will implement ISO C99 semantics for
inline functions, it is best to use <code>static inline</code> only
to guarantee compatibility.  (The
existing semantics will remain available when <samp><span class="option">-std=gnu89</span></samp> is
specified, but eventually the default will be <samp><span class="option">-std=gnu99</span></samp> and
that will implement the C99 semantics, though it does not do so yet.)

 <p>GCC does not inline any functions when not optimizing unless you specify
the &lsquo;<samp><span class="samp">always_inline</span></samp>&rsquo; attribute for the function, like this:

<pre class="smallexample">     /* <span class="roman">Prototype.</span>  */
     inline void foo (const char) __attribute__((always_inline));
</pre>
 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Inline</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Inline">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Inline">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="C-Extensions.html#C-Extensions" rel="up" title="C Extensions">
<link href="Volatiles.html#Volatiles" rel="next" title="Volatiles">
<link href="Alignment.html#Alignment" rel="prev" title="Alignment">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="Volatiles.html#Volatiles" accesskey="n" rel="next">Volatiles</a>, Previous: <a href="Alignment.html#Alignment" accesskey="p" rel="prev">Alignment</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
d55 6
a60 11
<hr>
<a name="An-Inline-Function-is-As-Fast-As-a-Macro"></a>
<h3 class="section">6.39 An Inline Function is As Fast As a Macro</h3>
<a name="index-inline-functions"></a>
<a name="index-integrating-function-code"></a>
<a name="index-open-coding"></a>
<a name="index-macros_002c-inline-alternative"></a>

<p>By declaring a function inline, you can direct GCC to make
calls to that function faster.  One way GCC can achieve this is to
integrate that function&rsquo;s code into the code for its callers.  This
d62 13
a74 18
addition, if any of the actual argument values are constant, their
known values may permit simplifications at compile time so that not
all of the inline function&rsquo;s code needs to be included.  The effect on
code size is less predictable; object code may be larger or smaller
with function inlining, depending on the particular case.  You can
also direct GCC to try to integrate all &ldquo;simple enough&rdquo; functions
into their callers with the option <samp>-finline-functions</samp>.
</p>
<p>GCC implements three different semantics of declaring a function
inline.  One is available with <samp>-std=gnu89</samp> or
<samp>-fgnu89-inline</samp> or when <code>gnu_inline</code> attribute is present
on all inline declarations, another when
<samp>-std=c99</samp>, <samp>-std=c11</samp>,
<samp>-std=gnu99</samp> or <samp>-std=gnu11</samp>
(without <samp>-fgnu89-inline</samp>), and the third
is used when compiling C++.
</p>
<p>To declare a function inline, use the <code>inline</code> keyword in its
d76 31
a106 35
</p>
<div class="smallexample">
<pre class="smallexample">static inline int
inc (int *a)
{
  return (*a)++;
}
</pre></div>

<p>If you are writing a header file to be included in ISO C90 programs, write
<code>__inline__</code> instead of <code>inline</code>.  See <a href="Alternate-Keywords.html#Alternate-Keywords">Alternate Keywords</a>.
</p>
<p>The three types of inlining behave similarly in two important cases:
when the <code>inline</code> keyword is used on a <code>static</code> function,
like the example above, and when a function is first declared without
using the <code>inline</code> keyword and then is defined with
<code>inline</code>, like this:
</p>
<div class="smallexample">
<pre class="smallexample">extern int inc (int *a);
inline int
inc (int *a)
{
  return (*a)++;
}
</pre></div>

<p>In both of these common cases, the program behaves the same as if you
had not used the <code>inline</code> keyword, except for its speed.
</p>
<a name="index-inline-functions_002c-omission-of"></a>
<a name="index-fkeep_002dinline_002dfunctions-1"></a>
<p>When a function is both inline and <code>static</code>, if all calls to the
function are integrated into the caller, and the function&rsquo;s address is
never used, then the function&rsquo;s own assembler code is never referenced.
d108 1
a108 1
function, unless you specify the option <samp>-fkeep-inline-functions</samp>.
d110 1
a110 1
calls that precede the function&rsquo;s definition cannot be integrated, and
d114 3
a116 33
refers to its address, because that can&rsquo;t be inlined.
</p>
<a name="index-Winline-1"></a>
<p>Note that certain usages in a function definition can make it unsuitable
for inline substitution.  Among these usages are: use of varargs, use of
alloca, use of variable sized data types (see <a href="Variable-Length.html#Variable-Length">Variable Length</a>),
use of computed goto (see <a href="Labels-as-Values.html#Labels-as-Values">Labels as Values</a>), use of nonlocal goto,
and nested functions (see <a href="Nested-Functions.html#Nested-Functions">Nested Functions</a>).  Using <samp>-Winline</samp>
will warn when a function marked <code>inline</code> could not be substituted,
and will give the reason for the failure.
</p>
<a name="index-automatic-inline-for-C_002b_002b-member-fns"></a>
<a name="index-inline-automatic-for-C_002b_002b-member-fns"></a>
<a name="index-member-fns_002c-automatically-inline"></a>
<a name="index-C_002b_002b-member-fns_002c-automatically-inline"></a>
<a name="index-fno_002ddefault_002dinline-2"></a>
<p>As required by ISO C++, GCC considers member functions defined within
the body of a class to be marked inline even if they are
not explicitly declared with the <code>inline</code> keyword.  You can
override this with <samp>-fno-default-inline</samp>; see <a href="C_002b_002b-Dialect-Options.html#C_002b_002b-Dialect-Options">Options Controlling C++ Dialect</a>.
</p>
<p>GCC does not inline any functions when not optimizing unless you specify
the &lsquo;<samp>always_inline</samp>&rsquo; attribute for the function, like this:
</p>
<div class="smallexample">
<pre class="smallexample">/* <span class="roman">Prototype.</span>  */
inline void foo (const char) __attribute__((always_inline));
</pre></div>

<p>The remainder of this section is specific to GNU C90 inlining.
</p>
<a name="index-non_002dstatic-inline-function"></a>
<p>When an inline function is not <code>static</code>, then the compiler must assume
d119 1
a119 1
the other source files, so the calls therein cannot be integrated.
d122 2
a123 2
</p>
<p>If you specify both <code>inline</code> and <code>extern</code> in the function
d128 2
a129 2
</p>
<p>This combination of <code>inline</code> and <code>extern</code> has almost the
d132 1
a132 1
definition (lacking <code>inline</code> and <code>extern</code>) in a library file.
a135 7
</p>
<hr>
<div class="header">
<p>
Next: <a href="Volatiles.html#Volatiles" accesskey="n" rel="next">Volatiles</a>, Previous: <a href="Alignment.html#Alignment" accesskey="p" rel="prev">Alignment</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>

d137 14
a151 2
</body>
</html>
@

