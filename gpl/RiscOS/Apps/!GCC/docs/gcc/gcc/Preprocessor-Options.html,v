head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.16;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.16;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.20;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Preprocessor Options - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Invoking-GCC.html#Invoking-GCC" title="Invoking GCC">
<link rel="prev" href="Optimize-Options.html#Optimize-Options" title="Optimize Options">
<link rel="next" href="Assembler-Options.html#Assembler-Options" title="Assembler Options">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Preprocessor-Options"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Assembler-Options.html#Assembler-Options">Assembler Options</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Optimize-Options.html#Optimize-Options">Optimize Options</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Invoking-GCC.html#Invoking-GCC">Invoking GCC</a>
<hr>
</div>

<h3 class="section">3.11 Options Controlling the Preprocessor</h3>

<p><a name="index-preprocessor-options-582"></a><a name="index-options_002c-preprocessor-583"></a>
These options control the C preprocessor, which is run on each C source
file before actual compilation.

 <p>If you use the <samp><span class="option">-E</span></samp> option, nothing is done except preprocessing. 
Some of these options make sense only together with <samp><span class="option">-E</span></samp> because
they cause the preprocessor output to be unsuitable for actual
compilation.

     
<a name="index-Wp-584"></a>
<dl>You can use <samp><span class="option">-Wp,</span><var>option</var></samp> to bypass the compiler driver
and pass <var>option</var> directly through to the preprocessor.  If
<var>option</var> contains commas, it is split into multiple options at the
commas.  However, many options are modified, translated or interpreted
by the compiler driver before being passed to the preprocessor, and
<samp><span class="option">-Wp</span></samp> forcibly bypasses this phase.  The preprocessor's direct
interface is undocumented and subject to change, so whenever possible
you should avoid using <samp><span class="option">-Wp</span></samp> and let the driver handle the
options instead.

     <dt><code>-Xpreprocessor </code><var>option</var><dd><a name="index-preprocessor-585"></a>Pass <var>option</var> as an option to the preprocessor.  You can use this to
supply system-specific preprocessor options which GCC does not know how to
recognize.

     <p>If you want to pass an option that takes an argument, you must use
<samp><span class="option">-Xpreprocessor</span></samp> twice, once for the option and once for the argument. 
</dl>

<!-- Copyright (c) 1999, 2000, 2001, 2002, 2003, 2004, 2005 -->
<!-- Free Software Foundation, Inc. -->
<!-- This is part of the CPP and GCC manuals. -->
<!-- For copying conditions, see the file gcc.texi. -->
<!--  -->
<!-- Options affecting the preprocessor -->
<!--  -->
<!-- If this file is included with the flag ``cppmanual'' set, it is -->
<!-- formatted for inclusion in the CPP manual; otherwise the main GCC manual. -->
     <dl>
<dt><code>-D </code><var>name</var><dd><a name="index-D-586"></a>Predefine <var>name</var> as a macro, with definition <code>1</code>.

     <br><dt><code>-D </code><var>name</var><code>=</code><var>definition</var><dd>The contents of <var>definition</var> are tokenized and processed as if
they appeared during translation phase three in a &lsquo;<samp><span class="samp">#define</span></samp>&rsquo;
directive.  In particular, the definition will be truncated by
embedded newline characters.

     <p>If you are invoking the preprocessor from a shell or shell-like
program you may need to use the shell's quoting syntax to protect
characters such as spaces that have a meaning in the shell syntax.

     <p>If you wish to define a function-like macro on the command line, write
its argument list with surrounding parentheses before the equals sign
(if any).  Parentheses are meaningful to most shells, so you will need
to quote the option.  With <samp><span class="command">sh</span></samp> and <samp><span class="command">csh</span></samp>,
<samp><span class="option">-D'</span><var>name</var><span class="option">(</span><var>args<small class="dots">...</small></var><span class="option">)=</span><var>definition</var><span class="option">'</span></samp> works.

     <p><samp><span class="option">-D</span></samp> and <samp><span class="option">-U</span></samp> options are processed in the order they
are given on the command line.  All <samp><span class="option">-imacros </span><var>file</var></samp> and
<samp><span class="option">-include </span><var>file</var></samp> options are processed after all
<samp><span class="option">-D</span></samp> and <samp><span class="option">-U</span></samp> options.

     <br><dt><code>-U </code><var>name</var><dd><a name="index-U-587"></a>Cancel any previous definition of <var>name</var>, either built in or
provided with a <samp><span class="option">-D</span></samp> option.

     <br><dt><code>-undef</code><dd><a name="index-undef-588"></a>Do not predefine any system-specific or GCC-specific macros.  The
standard predefined macros remain defined.

     <br><dt><code>-I </code><var>dir</var><dd><a name="index-I-589"></a>Add the directory <var>dir</var> to the list of directories to be searched
for header files. 
Directories named by <samp><span class="option">-I</span></samp> are searched before the standard
system include directories.  If the directory <var>dir</var> is a standard
system include directory, the option is ignored to ensure that the
default search order for system directories and the special treatment
of system headers are not defeated
.

     <br><dt><code>-o </code><var>file</var><dd><a name="index-o-590"></a>Write output to <var>file</var>.  This is the same as specifying <var>file</var>
as the second non-option argument to <samp><span class="command">cpp</span></samp>.  <samp><span class="command">gcc</span></samp> has a
different interpretation of a second non-option argument, so you must
use <samp><span class="option">-o</span></samp> to specify the output file.

     <br><dt><code>-Wall</code><dd><a name="index-Wall-591"></a>Turns on all optional warnings which are desirable for normal code. 
At present this is <samp><span class="option">-Wcomment</span></samp>, <samp><span class="option">-Wtrigraphs</span></samp>,
<samp><span class="option">-Wmultichar</span></samp> and a warning about integer promotion causing a
change of sign in <code>#if</code> expressions.  Note that many of the
preprocessor's warnings are on by default and have no options to
control them.

     <br><dt><code>-Wcomment</code><dt><code>-Wcomments</code><dd><a name="index-Wcomment-592"></a><a name="index-Wcomments-593"></a>Warn whenever a comment-start sequence &lsquo;<samp><span class="samp">/*</span></samp>&rsquo; appears in a &lsquo;<samp><span class="samp">/*</span></samp>&rsquo;
comment, or whenever a backslash-newline appears in a &lsquo;<samp><span class="samp">//</span></samp>&rsquo; comment. 
(Both forms have the same effect.)

     <br><dt><code>-Wtrigraphs</code><dd><a name="index-Wtrigraphs-594"></a><a name="Wtrigraphs"></a>Most trigraphs in comments cannot affect the meaning of the program. 
However, a trigraph that would form an escaped newline (&lsquo;<samp><span class="samp">??/</span></samp>&rsquo; at
the end of a line) can, by changing where the comment begins or ends. 
Therefore, only trigraphs that would form escaped newlines produce
warnings inside a comment.

     <p>This option is implied by <samp><span class="option">-Wall</span></samp>.  If <samp><span class="option">-Wall</span></samp> is not
given, this option is still enabled unless trigraphs are enabled.  To
get trigraph conversion without warnings, but get the other
<samp><span class="option">-Wall</span></samp> warnings, use &lsquo;<samp><span class="samp">-trigraphs -Wall -Wno-trigraphs</span></samp>&rsquo;.

     <br><dt><code>-Wtraditional</code><dd><a name="index-Wtraditional-595"></a>Warn about certain constructs that behave differently in traditional and
ISO C.  Also warn about ISO C constructs that have no traditional C
equivalent, and problematic constructs which should be avoided.

     <br><dt><code>-Wimport</code><dd><a name="index-Wimport-596"></a>Warn the first time &lsquo;<samp><span class="samp">#import</span></samp>&rsquo; is used.

     <br><dt><code>-Wundef</code><dd><a name="index-Wundef-597"></a>Warn whenever an identifier which is not a macro is encountered in an
&lsquo;<samp><span class="samp">#if</span></samp>&rsquo; directive, outside of &lsquo;<samp><span class="samp">defined</span></samp>&rsquo;.  Such identifiers are
replaced with zero.

     <br><dt><code>-Wunused-macros</code><dd><a name="index-Wunused_002dmacros-598"></a>Warn about macros defined in the main file that are unused.  A macro
is <dfn>used</dfn> if it is expanded or tested for existence at least once. 
The preprocessor will also warn if the macro has not been used at the
time it is redefined or undefined.

     <p>Built-in macros, macros defined on the command line, and macros
defined in include files are not warned about.

     <p><em>Note:</em> If a macro is actually used, but only used in skipped
conditional blocks, then CPP will report it as unused.  To avoid the
warning in such a case, you might improve the scope of the macro's
definition by, for example, moving it into the first skipped block. 
Alternatively, you could provide a dummy use with something like:

     <pre class="smallexample">          #if defined the_macro_causing_the_warning
          #endif
</pre>
     <br><dt><code>-Wendif-labels</code><dd><a name="index-Wendif_002dlabels-599"></a>Warn whenever an &lsquo;<samp><span class="samp">#else</span></samp>&rsquo; or an &lsquo;<samp><span class="samp">#endif</span></samp>&rsquo; are followed by text. 
This usually happens in code of the form

     <pre class="smallexample">          #if FOO
          ...
          #else FOO
          ...
          #endif FOO
</pre>
     <p class="noindent">The second and third <code>FOO</code> should be in comments, but often are not
in older programs.  This warning is on by default.

     <br><dt><code>-Werror</code><dd><a name="index-Werror-600"></a>Make all warnings into hard errors.  Source code which triggers warnings
will be rejected.

     <br><dt><code>-Wsystem-headers</code><dd><a name="index-Wsystem_002dheaders-601"></a>Issue warnings for code in system headers.  These are normally unhelpful
in finding bugs in your own code, therefore suppressed.  If you are
responsible for the system library, you may want to see them.

     <br><dt><code>-w</code><dd><a name="index-w-602"></a>Suppress all warnings, including those which GNU CPP issues by default.

     <br><dt><code>-pedantic</code><dd><a name="index-pedantic-603"></a>Issue all the mandatory diagnostics listed in the C standard.  Some of
them are left out by default, since they trigger frequently on harmless
code.

     <br><dt><code>-pedantic-errors</code><dd><a name="index-pedantic_002derrors-604"></a>Issue all the mandatory diagnostics, and make all mandatory diagnostics
into errors.  This includes mandatory diagnostics that GCC issues
without &lsquo;<samp><span class="samp">-pedantic</span></samp>&rsquo; but treats as warnings.

     <br><dt><code>-M</code><dd><a name="index-M-605"></a><a name="index-make-606"></a><a name="index-dependencies_002c-make-607"></a>Instead of outputting the result of preprocessing, output a rule
suitable for <samp><span class="command">make</span></samp> describing the dependencies of the main
source file.  The preprocessor outputs one <samp><span class="command">make</span></samp> rule containing
the object file name for that source file, a colon, and the names of all
the included files, including those coming from <samp><span class="option">-include</span></samp> or
<samp><span class="option">-imacros</span></samp> command line options.

     <p>Unless specified explicitly (with <samp><span class="option">-MT</span></samp> or <samp><span class="option">-MQ</span></samp>), the
object file name consists of the basename of the source file with any
suffix replaced with object file suffix.  If there are many included
files then the rule is split into several lines using &lsquo;<samp><span class="samp">\</span></samp>&rsquo;-newline. 
The rule has no commands.

     <p>This option does not suppress the preprocessor's debug output, such as
<samp><span class="option">-dM</span></samp>.  To avoid mixing such debug output with the dependency
rules you should explicitly specify the dependency output file with
<samp><span class="option">-MF</span></samp>, or use an environment variable like
<samp><span class="env">DEPENDENCIES_OUTPUT</span></samp> (see <a href="Environment-Variables.html#Environment-Variables">Environment Variables</a>).  Debug output
will still be sent to the regular output stream as normal.

     <p>Passing <samp><span class="option">-M</span></samp> to the driver implies <samp><span class="option">-E</span></samp>, and suppresses
warnings with an implicit <samp><span class="option">-w</span></samp>.

     <br><dt><code>-MM</code><dd><a name="index-MM-608"></a>Like <samp><span class="option">-M</span></samp> but do not mention header files that are found in
system header directories, nor header files that are included,
directly or indirectly, from such a header.

     <p>This implies that the choice of angle brackets or double quotes in an
&lsquo;<samp><span class="samp">#include</span></samp>&rsquo; directive does not in itself determine whether that
header will appear in <samp><span class="option">-MM</span></samp> dependency output.  This is a
slight change in semantics from GCC versions 3.0 and earlier.

     <p><a name="dashMF"></a><br><dt><code>-MF </code><var>file</var><dd><a name="index-MF-609"></a>When used with <samp><span class="option">-M</span></samp> or <samp><span class="option">-MM</span></samp>, specifies a
file to write the dependencies to.  If no <samp><span class="option">-MF</span></samp> switch is given
the preprocessor sends the rules to the same place it would have sent
preprocessed output.

     <p>When used with the driver options <samp><span class="option">-MD</span></samp> or <samp><span class="option">-MMD</span></samp>,
<samp><span class="option">-MF</span></samp> overrides the default dependency output file.

     <br><dt><code>-MG</code><dd><a name="index-MG-610"></a>In conjunction with an option such as <samp><span class="option">-M</span></samp> requesting
dependency generation, <samp><span class="option">-MG</span></samp> assumes missing header files are
generated files and adds them to the dependency list without raising
an error.  The dependency filename is taken directly from the
<code>#include</code> directive without prepending any path.  <samp><span class="option">-MG</span></samp>
also suppresses preprocessed output, as a missing header file renders
this useless.

     <p>This feature is used in automatic updating of makefiles.

     <br><dt><code>-MP</code><dd><a name="index-MP-611"></a>This option instructs CPP to add a phony target for each dependency
other than the main file, causing each to depend on nothing.  These
dummy rules work around errors <samp><span class="command">make</span></samp> gives if you remove header
files without updating the <samp><span class="file">Makefile</span></samp> to match.

     <p>This is typical output:

     <pre class="smallexample">          test.o: test.c test.h
          
          test.h:
</pre>
     <br><dt><code>-MT </code><var>target</var><dd><a name="index-MT-612"></a>
Change the target of the rule emitted by dependency generation.  By
default CPP takes the name of the main input file, including any path,
deletes any file suffix such as &lsquo;<samp><span class="samp">.c</span></samp>&rsquo;, and appends the platform's
usual object suffix.  The result is the target.

     <p>An <samp><span class="option">-MT</span></samp> option will set the target to be exactly the string you
specify.  If you want multiple targets, you can specify them as a single
argument to <samp><span class="option">-MT</span></samp>, or use multiple <samp><span class="option">-MT</span></samp> options.

     <p>For example, <samp><span class="option">-MT&nbsp;'$(objpfx)foo.o'<!-- /@@w --></span></samp> might give

     <pre class="smallexample">          $(objpfx)foo.o: foo.c
</pre>
     <br><dt><code>-MQ </code><var>target</var><dd><a name="index-MQ-613"></a>
Same as <samp><span class="option">-MT</span></samp>, but it quotes any characters which are special to
Make.  <samp><span class="option">-MQ&nbsp;'$(objpfx)foo.o'<!-- /@@w --></span></samp> gives

     <pre class="smallexample">          $$(objpfx)foo.o: foo.c
</pre>
     <p>The default target is automatically quoted, as if it were given with
<samp><span class="option">-MQ</span></samp>.

     <br><dt><code>-MD</code><dd><a name="index-MD-614"></a><samp><span class="option">-MD</span></samp> is equivalent to <samp><span class="option">-M -MF </span><var>file</var></samp>, except that
<samp><span class="option">-E</span></samp> is not implied.  The driver determines <var>file</var> based on
whether an <samp><span class="option">-o</span></samp> option is given.  If it is, the driver uses its
argument but with a suffix of <samp><span class="file">.d</span></samp>, otherwise it take the
basename of the input file and applies a <samp><span class="file">.d</span></samp> suffix.

     <p>If <samp><span class="option">-MD</span></samp> is used in conjunction with <samp><span class="option">-E</span></samp>, any
<samp><span class="option">-o</span></samp> switch is understood to specify the dependency output file
(but see <a href="dashMF.html#dashMF">-MF</a>), but if used without <samp><span class="option">-E</span></samp>, each <samp><span class="option">-o</span></samp>
is understood to specify a target object file.

     <p>Since <samp><span class="option">-E</span></samp> is not implied, <samp><span class="option">-MD</span></samp> can be used to generate
a dependency output file as a side-effect of the compilation process.

     <br><dt><code>-MMD</code><dd><a name="index-MMD-615"></a>Like <samp><span class="option">-MD</span></samp> except mention only user header files, not system
header files.

     <br><dt><code>-fpch-deps</code><dd><a name="index-fpch_002ddeps-616"></a>When using precompiled headers (see <a href="Precompiled-Headers.html#Precompiled-Headers">Precompiled Headers</a>), this flag
will cause the dependency-output flags to also list the files from the
precompiled header's dependencies.  If not specified only the
precompiled header would be listed and not the files that were used to
create it because those files are not consulted when a precompiled
header is used.

     <br><dt><code>-fpch-preprocess</code><dd><a name="index-fpch_002dpreprocess-617"></a>This option allows use of a precompiled header (see <a href="Precompiled-Headers.html#Precompiled-Headers">Precompiled Headers</a>) together with <samp><span class="option">-E</span></samp>.  It inserts a special <code>#pragma</code>,
<code>#pragma GCC pch_preprocess "&lt;filename&gt;"</code> in the output to mark
the place where the precompiled header was found, and its filename.  When
<samp><span class="option">-fpreprocessed</span></samp> is in use, GCC recognizes this <code>#pragma</code> and
loads the PCH.

     <p>This option is off by default, because the resulting preprocessed output
is only really suitable as input to GCC.  It is switched on by
<samp><span class="option">-save-temps</span></samp>.

     <p>You should not write this <code>#pragma</code> in your own code, but it is
safe to edit the filename if the PCH file is available in a different
location.  The filename may be absolute or it may be relative to GCC's
current directory.

     <br><dt><code>-x c</code><dt><code>-x c++</code><dt><code>-x objective-c</code><dt><code>-x assembler-with-cpp</code><dd><a name="index-x-618"></a>Specify the source language: C, C++, Objective-C, or assembly.  This has
nothing to do with standards conformance or extensions; it merely
selects which base syntax to expect.  If you give none of these options,
cpp will deduce the language from the extension of the source file:
&lsquo;<samp><span class="samp">.c</span></samp>&rsquo;, &lsquo;<samp><span class="samp">.cc</span></samp>&rsquo;, &lsquo;<samp><span class="samp">.m</span></samp>&rsquo;, or &lsquo;<samp><span class="samp">.S</span></samp>&rsquo;.  Some other common
extensions for C++ and assembly are also recognized.  If cpp does not
recognize the extension, it will treat the file as C; this is the most
generic mode.

     <p><em>Note:</em> Previous versions of cpp accepted a <samp><span class="option">-lang</span></samp> option
which selected both the language and the standards conformance level. 
This option has been removed, because it conflicts with the <samp><span class="option">-l</span></samp>
option.

     <br><dt><code>-std=</code><var>standard</var><dt><code>-ansi</code><dd><a name="index-ansi-619"></a><a name="index-std_003d-620"></a>Specify the standard to which the code should conform.  Currently CPP
knows about C and C++ standards; others may be added in the future.

     <p><var>standard</var>
may be one of:
          <dl>
<dt><code>iso9899:1990</code><dt><code>c89</code><dd>The ISO C standard from 1990.  &lsquo;<samp><span class="samp">c89</span></samp>&rsquo; is the customary shorthand for
this version of the standard.

          <p>The <samp><span class="option">-ansi</span></samp> option is equivalent to <samp><span class="option">-std=c89</span></samp>.

          <br><dt><code>iso9899:199409</code><dd>The 1990 C standard, as amended in 1994.

          <br><dt><code>iso9899:1999</code><dt><code>c99</code><dt><code>iso9899:199x</code><dt><code>c9x</code><dd>The revised ISO C standard, published in December 1999.  Before
publication, this was known as C9X.

          <br><dt><code>gnu89</code><dd>The 1990 C standard plus GNU extensions.  This is the default.

          <br><dt><code>gnu99</code><dt><code>gnu9x</code><dd>The 1999 C standard plus GNU extensions.

          <br><dt><code>c++98</code><dd>The 1998 ISO C++ standard plus amendments.

          <br><dt><code>gnu++98</code><dd>The same as <samp><span class="option">-std=c++98</span></samp> plus GNU extensions.  This is the
default for C++ code. 
</dl>

     <br><dt><code>-I-</code><dd><a name="index-I_002d-621"></a>Split the include path.  Any directories specified with <samp><span class="option">-I</span></samp>
options before <samp><span class="option">-I-</span></samp> are searched only for headers requested with
<code>#include&nbsp;"</code><var>file</var><code>"<!-- /@@w --></code>; they are not searched for
<code>#include&nbsp;&lt;</code><var>file</var><code>&gt;<!-- /@@w --></code>.  If additional directories are
specified with <samp><span class="option">-I</span></samp> options after the <samp><span class="option">-I-</span></samp>, those
directories are searched for all &lsquo;<samp><span class="samp">#include</span></samp>&rsquo; directives.

     <p>In addition, <samp><span class="option">-I-</span></samp> inhibits the use of the directory of the current
file directory as the first search directory for <code>#include&nbsp;"</code><var>file</var><code>"<!-- /@@w --></code>. 
This option has been deprecated.

     <br><dt><code>-nostdinc</code><dd><a name="index-nostdinc-622"></a>Do not search the standard system directories for header files. 
Only the directories you have specified with <samp><span class="option">-I</span></samp> options
(and the directory of the current file, if appropriate) are searched.

     <br><dt><code>-nostdinc++</code><dd><a name="index-nostdinc_002b_002b-623"></a>Do not search for header files in the C++-specific standard directories,
but do still search the other standard directories.  (This option is
used when building the C++ library.)

     <br><dt><code>-include </code><var>file</var><dd><a name="index-include-624"></a>Process <var>file</var> as if <code>#include "file"</code> appeared as the first
line of the primary source file.  However, the first directory searched
for <var>file</var> is the preprocessor's working directory <em>instead of</em>
the directory containing the main source file.  If not found there, it
is searched for in the remainder of the <code>#include "..."</code> search
chain as normal.

     <p>If multiple <samp><span class="option">-include</span></samp> options are given, the files are included
in the order they appear on the command line.

     <br><dt><code>-imacros </code><var>file</var><dd><a name="index-imacros-625"></a>Exactly like <samp><span class="option">-include</span></samp>, except that any output produced by
scanning <var>file</var> is thrown away.  Macros it defines remain defined. 
This allows you to acquire all the macros from a header without also
processing its declarations.

     <p>All files specified by <samp><span class="option">-imacros</span></samp> are processed before all files
specified by <samp><span class="option">-include</span></samp>.

     <br><dt><code>-idirafter </code><var>dir</var><dd><a name="index-idirafter-626"></a>Search <var>dir</var> for header files, but do it <em>after</em> all
directories specified with <samp><span class="option">-I</span></samp> and the standard system directories
have been exhausted.  <var>dir</var> is treated as a system include directory.

     <br><dt><code>-iprefix </code><var>prefix</var><dd><a name="index-iprefix-627"></a>Specify <var>prefix</var> as the prefix for subsequent <samp><span class="option">-iwithprefix</span></samp>
options.  If the prefix represents a directory, you should include the
final &lsquo;<samp><span class="samp">/</span></samp>&rsquo;.

     <br><dt><code>-iwithprefix </code><var>dir</var><dt><code>-iwithprefixbefore </code><var>dir</var><dd><a name="index-iwithprefix-628"></a><a name="index-iwithprefixbefore-629"></a>Append <var>dir</var> to the prefix specified previously with
<samp><span class="option">-iprefix</span></samp>, and add the resulting directory to the include search
path.  <samp><span class="option">-iwithprefixbefore</span></samp> puts it in the same place <samp><span class="option">-I</span></samp>
would; <samp><span class="option">-iwithprefix</span></samp> puts it where <samp><span class="option">-idirafter</span></samp> would.

     <br><dt><code>-isysroot </code><var>dir</var><dd><a name="index-isysroot-630"></a>This option is like the <samp><span class="option">--sysroot</span></samp> option, but applies only to
header files.  See the <samp><span class="option">--sysroot</span></samp> option for more information.

     <br><dt><code>-isystem </code><var>dir</var><dd><a name="index-isystem-631"></a>Search <var>dir</var> for header files, after all directories specified by
<samp><span class="option">-I</span></samp> but before the standard system directories.  Mark it
as a system directory, so that it gets the same special treatment as
is applied to the standard system directories.

     <br><dt><code>-iquote </code><var>dir</var><dd><a name="index-iquote-632"></a>Search <var>dir</var> only for header files requested with
<code>#include&nbsp;"</code><var>file</var><code>"<!-- /@@w --></code>; they are not searched for
<code>#include&nbsp;&lt;</code><var>file</var><code>&gt;<!-- /@@w --></code>, before all directories specified by
<samp><span class="option">-I</span></samp> and before the standard system directories.

     <br><dt><code>-fdollars-in-identifiers</code><dd><a name="index-fdollars_002din_002didentifiers-633"></a><a name="fdollars_002din_002didentifiers"></a>Accept &lsquo;<samp><span class="samp">$</span></samp>&rsquo; in identifiers.

     <br><dt><code>-fextended-identifiers</code><dd><a name="index-fextended_002didentifiers-634"></a>Accept universal character names in identifiers.  This option is
experimental; in a future version of GCC, it will be enabled by
default for C99 and C++.

     <br><dt><code>-fpreprocessed</code><dd><a name="index-fpreprocessed-635"></a>Indicate to the preprocessor that the input file has already been
preprocessed.  This suppresses things like macro expansion, trigraph
conversion, escaped newline splicing, and processing of most directives. 
The preprocessor still recognizes and removes comments, so that you can
pass a file preprocessed with <samp><span class="option">-C</span></samp> to the compiler without
problems.  In this mode the integrated preprocessor is little more than
a tokenizer for the front ends.

     <p><samp><span class="option">-fpreprocessed</span></samp> is implicit if the input file has one of the
extensions &lsquo;<samp><span class="samp">.i</span></samp>&rsquo;, &lsquo;<samp><span class="samp">.ii</span></samp>&rsquo; or &lsquo;<samp><span class="samp">.mi</span></samp>&rsquo;.  These are the
extensions that GCC uses for preprocessed files created by
<samp><span class="option">-save-temps</span></samp>.

     <br><dt><code>-ftabstop=</code><var>width</var><dd><a name="index-ftabstop-636"></a>Set the distance between tab stops.  This helps the preprocessor report
correct column numbers in warnings or errors, even if tabs appear on the
line.  If the value is less than 1 or greater than 100, the option is
ignored.  The default is 8.

     <br><dt><code>-fexec-charset=</code><var>charset</var><dd><a name="index-fexec_002dcharset-637"></a><a name="index-character-set_002c-execution-638"></a>Set the execution character set, used for string and character
constants.  The default is UTF-8.  <var>charset</var> can be any encoding
supported by the system's <code>iconv</code> library routine.

     <br><dt><code>-fwide-exec-charset=</code><var>charset</var><dd><a name="index-fwide_002dexec_002dcharset-639"></a><a name="index-character-set_002c-wide-execution-640"></a>Set the wide execution character set, used for wide string and
character constants.  The default is UTF-32 or UTF-16, whichever
corresponds to the width of <code>wchar_t</code>.  As with
<samp><span class="option">-fexec-charset</span></samp>, <var>charset</var> can be any encoding supported
by the system's <code>iconv</code> library routine; however, you will have
problems with encodings that do not fit exactly in <code>wchar_t</code>.

     <br><dt><code>-finput-charset=</code><var>charset</var><dd><a name="index-finput_002dcharset-641"></a><a name="index-character-set_002c-input-642"></a>Set the input character set, used for translation from the character
set of the input file to the source character set used by GCC.  If the
locale does not specify, or GCC cannot get this information from the
locale, the default is UTF-8.  This can be overridden by either the locale
or this command line option.  Currently the command line option takes
precedence if there's a conflict.  <var>charset</var> can be any encoding
supported by the system's <code>iconv</code> library routine.

     <br><dt><code>-fworking-directory</code><dd><a name="index-fworking_002ddirectory-643"></a><a name="index-fno_002dworking_002ddirectory-644"></a>Enable generation of linemarkers in the preprocessor output that will
let the compiler know the current working directory at the time of
preprocessing.  When this option is enabled, the preprocessor will
emit, after the initial linemarker, a second linemarker with the
current working directory followed by two slashes.  GCC will use this
directory, when it's present in the preprocessed input, as the
directory emitted as the current working directory in some debugging
information formats.  This option is implicitly enabled if debugging
information is enabled, but this can be inhibited with the negated
form <samp><span class="option">-fno-working-directory</span></samp>.  If the <samp><span class="option">-P</span></samp> flag is
present in the command line, this option has no effect, since no
<code>#line</code> directives are emitted whatsoever.

     <br><dt><code>-fno-show-column</code><dd><a name="index-fno_002dshow_002dcolumn-645"></a>Do not print column numbers in diagnostics.  This may be necessary if
diagnostics are being scanned by a program that does not understand the
column numbers, such as <samp><span class="command">dejagnu</span></samp>.

     <br><dt><code>-A </code><var>predicate</var><code>=</code><var>answer</var><dd><a name="index-A-646"></a>Make an assertion with the predicate <var>predicate</var> and answer
<var>answer</var>.  This form is preferred to the older form <samp><span class="option">-A
</span><var>predicate</var><span class="option">(</span><var>answer</var><span class="option">)</span></samp>, which is still supported, because
it does not use shell special characters.

     <br><dt><code>-A -</code><var>predicate</var><code>=</code><var>answer</var><dd>Cancel an assertion with the predicate <var>predicate</var> and answer
<var>answer</var>.

     <br><dt><code>-dCHARS</code><dd><var>CHARS</var> is a sequence of one or more of the following characters,
and must not be preceded by a space.  Other characters are interpreted
by the compiler proper, or reserved for future versions of GCC, and so
are silently ignored.  If you specify characters whose behavior
conflicts, the result is undefined.

          <dl>
<dt>&lsquo;<samp><span class="samp">M</span></samp>&rsquo;<dd><a name="index-dM-647"></a>Instead of the normal output, generate a list of &lsquo;<samp><span class="samp">#define</span></samp>&rsquo;
directives for all the macros defined during the execution of the
preprocessor, including predefined macros.  This gives you a way of
finding out what is predefined in your version of the preprocessor. 
Assuming you have no file <samp><span class="file">foo.h</span></samp>, the command

          <pre class="smallexample">               touch foo.h; cpp -dM foo.h
</pre>
          <p class="noindent">will show all the predefined macros.

          <br><dt>&lsquo;<samp><span class="samp">D</span></samp>&rsquo;<dd><a name="index-dD-648"></a>Like &lsquo;<samp><span class="samp">M</span></samp>&rsquo; except in two respects: it does <em>not</em> include the
predefined macros, and it outputs <em>both</em> the &lsquo;<samp><span class="samp">#define</span></samp>&rsquo;
directives and the result of preprocessing.  Both kinds of output go to
the standard output file.

          <br><dt>&lsquo;<samp><span class="samp">N</span></samp>&rsquo;<dd><a name="index-dN-649"></a>Like &lsquo;<samp><span class="samp">D</span></samp>&rsquo;, but emit only the macro names, not their expansions.

          <br><dt>&lsquo;<samp><span class="samp">I</span></samp>&rsquo;<dd><a name="index-dI-650"></a>Output &lsquo;<samp><span class="samp">#include</span></samp>&rsquo; directives in addition to the result of
preprocessing. 
</dl>

     <br><dt><code>-P</code><dd><a name="index-P-651"></a>Inhibit generation of linemarkers in the output from the preprocessor. 
This might be useful when running the preprocessor on something that is
not C code, and will be sent to a program which might be confused by the
linemarkers.

     <br><dt><code>-C</code><dd><a name="index-C-652"></a>Do not discard comments.  All comments are passed through to the output
file, except for comments in processed directives, which are deleted
along with the directive.

     <p>You should be prepared for side effects when using <samp><span class="option">-C</span></samp>; it
causes the preprocessor to treat comments as tokens in their own right. 
For example, comments appearing at the start of what would be a
directive line have the effect of turning that line into an ordinary
source line, since the first token on the line is no longer a &lsquo;<samp><span class="samp">#</span></samp>&rsquo;.

     <br><dt><code>-CC</code><dd>Do not discard comments, including during macro expansion.  This is
like <samp><span class="option">-C</span></samp>, except that comments contained within macros are
also passed through to the output file where the macro is expanded.

     <p>In addition to the side-effects of the <samp><span class="option">-C</span></samp> option, the
<samp><span class="option">-CC</span></samp> option causes all C++-style comments inside a macro
to be converted to C-style comments.  This is to prevent later use
of that macro from inadvertently commenting out the remainder of
the source line.

     <p>The <samp><span class="option">-CC</span></samp> option is generally used to support lint comments.

     <br><dt><code>-traditional-cpp</code><dd><a name="index-traditional_002dcpp-653"></a>Try to imitate the behavior of old-fashioned C preprocessors, as
opposed to ISO C preprocessors.

     <br><dt><code>-trigraphs</code><dd><a name="index-trigraphs-654"></a>Process trigraph sequences. 
These are three-character sequences, all starting with &lsquo;<samp><span class="samp">??</span></samp>&rsquo;, that
are defined by ISO C to stand for single characters.  For example,
&lsquo;<samp><span class="samp">??/</span></samp>&rsquo; stands for &lsquo;<samp><span class="samp">\</span></samp>&rsquo;, so &lsquo;<samp><span class="samp">'??/n'</span></samp>&rsquo; is a character
constant for a newline.  By default, GCC ignores trigraphs, but in
standard-conforming modes it converts them.  See the <samp><span class="option">-std</span></samp> and
<samp><span class="option">-ansi</span></samp> options.

     <p>The nine trigraphs and their replacements are

     <pre class="smallexample">          Trigraph:       ??(  ??)  ??&lt;  ??&gt;  ??=  ??/  ??'  ??!  ??-
          Replacement:      [    ]    {    }    #    \    ^    |    ~
</pre>
     <br><dt><code>-remap</code><dd><a name="index-remap-655"></a>Enable special code to work around file systems which only permit very
short file names, such as MS-DOS.

     <dt><code>--help</code><dt><code>--target-help</code><dd><a name="index-help-656"></a><a name="index-target_002dhelp-657"></a>Print text describing all the command line options instead of
preprocessing anything.

     <br><dt><code>-v</code><dd><a name="index-v-658"></a>Verbose mode.  Print out GNU CPP's version number at the beginning of
execution, and report the final form of the include path.

     <br><dt><code>-H</code><dd><a name="index-H-659"></a>Print the name of each header file used, in addition to other normal
activities.  Each name is indented to show how deep in the
&lsquo;<samp><span class="samp">#include</span></samp>&rsquo; stack it is.  Precompiled header files are also
printed, even if they are found to be invalid; an invalid precompiled
header file is printed with &lsquo;<samp><span class="samp">...x</span></samp>&rsquo; and a valid one with &lsquo;<samp><span class="samp">...!</span></samp>&rsquo; .

     <br><dt><code>-version</code><dt><code>--version</code><dd><a name="index-version-660"></a>Print out GNU CPP's version number.  With one dash, proceed to
preprocess as normal.  With two dashes, exit immediately. 
</dl>

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Preprocessor Options</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Preprocessor Options">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Preprocessor Options">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Invoking-GCC.html#Invoking-GCC" rel="up" title="Invoking GCC">
<link href="Assembler-Options.html#Assembler-Options" rel="next" title="Assembler Options">
<link href="Optimize-Options.html#Optimize-Options" rel="prev" title="Optimize Options">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="Assembler-Options.html#Assembler-Options" accesskey="n" rel="next">Assembler Options</a>, Previous: <a href="Optimize-Options.html#Optimize-Options" accesskey="p" rel="prev">Optimize Options</a>, Up: <a href="Invoking-GCC.html#Invoking-GCC" accesskey="u" rel="up">Invoking GCC</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
d55 1
a55 2
<hr>
<a name="Options-Controlling-the-Preprocessor"></a>
a56 2
<a name="index-preprocessor-options"></a>
<a name="index-options_002c-preprocessor"></a>
d58 2
a59 1
<p>These options control the C preprocessor, which is run on each C source
d61 3
a63 3
</p>
<p>If you use the <samp>-E</samp> option, nothing is done except preprocessing.
Some of these options make sense only together with <samp>-E</samp> because
d66 4
a69 5
</p>
<dl compact="compact">
<dt><code>-Wp,<var>option</var></code></dt>
<dd><a name="index-Wp"></a>
<p>You can use <samp>-Wp,<var>option</var></samp> to bypass the compiler driver
d74 1
a74 1
<samp>-Wp</samp> forcibly bypasses this phase.  The preprocessor&rsquo;s direct
d76 1
a76 1
you should avoid using <samp>-Wp</samp> and let the driver handle the
d78 3
a80 6
</p>
</dd>
<dt><code>-Xpreprocessor <var>option</var></code></dt>
<dd><a name="index-Xpreprocessor"></a>
<p>Pass <var>option</var> as an option to the preprocessor.  You can use this to
supply system-specific preprocessor options that GCC does not know how to
d82 3
a84 4
</p>
<p>If you want to pass an option that takes an argument, you must use
<samp>-Xpreprocessor</samp> twice, once for the option and once for the argument.
</p></dd>
d87 11
d99 2
a100 11


<dl compact="compact">
<dt><code>-D <var>name</var></code></dt>
<dd><a name="index-D"></a>
<p>Predefine <var>name</var> as a macro, with definition <code>1</code>.
</p>
</dd>
<dt><code>-D <var>name</var>=<var>definition</var></code></dt>
<dd><p>The contents of <var>definition</var> are tokenized and processed as if
they appeared during translation phase three in a &lsquo;<samp>#define</samp>&rsquo;
d103 3
a105 3
</p>
<p>If you are invoking the preprocessor from a shell or shell-like
program you may need to use the shell&rsquo;s quoting syntax to protect
d107 2
a108 2
</p>
<p>If you wish to define a function-like macro on the command line, write
d111 12
a122 18
to quote the option.  With <code>sh</code> and <code>csh</code>,
<samp>-D'<var>name</var>(<var>args&hellip;</var>)=<var>definition</var>'</samp> works.
</p>
<p><samp>-D</samp> and <samp>-U</samp> options are processed in the order they
are given on the command line.  All <samp>-imacros <var>file</var></samp> and
<samp>-include <var>file</var></samp> options are processed after all
<samp>-D</samp> and <samp>-U</samp> options.
</p>
</dd>
<dt><code>-U <var>name</var></code></dt>
<dd><a name="index-U"></a>
<p>Cancel any previous definition of <var>name</var>, either built in or
provided with a <samp>-D</samp> option.
</p>
</dd>
<dt><code>-undef</code></dt>
<dd><a name="index-undef"></a>
<p>Do not predefine any system-specific or GCC-specific macros.  The
d124 4
a127 7
</p>
</dd>
<dt><code>-I <var>dir</var></code></dt>
<dd><a name="index-I"></a>
<p>Add the directory <var>dir</var> to the list of directories to be searched
for header files.
Directories named by <samp>-I</samp> are searched before the standard
d133 3
a135 8
If <var>dir</var> begins with <code>=</code>, then the <code>=</code> will be replaced
by the sysroot prefix; see <samp>--sysroot</samp> and <samp>-isysroot</samp>.
</p>
</dd>
<dt><code>-o <var>file</var></code></dt>
<dd><a name="index-o-1"></a>
<p>Write output to <var>file</var>.  This is the same as specifying <var>file</var>
as the second non-option argument to <code>cpp</code>.  <code>gcc</code> has a
d137 5
a141 8
use <samp>-o</samp> to specify the output file.
</p>
</dd>
<dt><code>-Wall</code></dt>
<dd><a name="index-Wall-1"></a>
<p>Turns on all optional warnings which are desirable for normal code.
At present this is <samp>-Wcomment</samp>, <samp>-Wtrigraphs</samp>,
<samp>-Wmultichar</samp> and a warning about integer promotion causing a
d143 1
a143 1
preprocessor&rsquo;s warnings are on by default and have no options to
d145 3
a147 8
</p>
</dd>
<dt><code>-Wcomment</code></dt>
<dt><code>-Wcomments</code></dt>
<dd><a name="index-Wcomment-1"></a>
<a name="index-Wcomments"></a>
<p>Warn whenever a comment-start sequence &lsquo;<samp>/*</samp>&rsquo; appears in a &lsquo;<samp>/*</samp>&rsquo;
comment, or whenever a backslash-newline appears in a &lsquo;<samp>//</samp>&rsquo; comment.
d149 4
a152 7
</p>
</dd>
<dt><code>-Wtrigraphs</code></dt>
<dd><a name="index-Wtrigraphs-1"></a>
<a name="Wtrigraphs"></a><p>Most trigraphs in comments cannot affect the meaning of the program.
However, a trigraph that would form an escaped newline (&lsquo;<samp>??/</samp>&rsquo; at
the end of a line) can, by changing where the comment begins or ends.
d155 2
a156 2
</p>
<p>This option is implied by <samp>-Wall</samp>.  If <samp>-Wall</samp> is not
d159 3
a161 6
<samp>-Wall</samp> warnings, use &lsquo;<samp>-trigraphs -Wall -Wno-trigraphs</samp>&rsquo;.
</p>
</dd>
<dt><code>-Wtraditional</code></dt>
<dd><a name="index-Wtraditional-1"></a>
<p>Warn about certain constructs that behave differently in traditional and
d164 5
a168 6
</p>
</dd>
<dt><code>-Wundef</code></dt>
<dd><a name="index-Wundef-1"></a>
<p>Warn whenever an identifier which is not a macro is encountered in an
&lsquo;<samp>#if</samp>&rsquo; directive, outside of &lsquo;<samp>defined</samp>&rsquo;.  Such identifiers are
d170 3
a172 6
</p>
</dd>
<dt><code>-Wunused-macros</code></dt>
<dd><a name="index-Wunused_002dmacros"></a>
<p>Warn about macros defined in the main file that are unused.  A macro
is <em>used</em> if it is expanded or tested for existence at least once.
d175 2
a176 2
</p>
<p>Built-in macros, macros defined on the command line, and macros
d178 2
a179 2
</p>
<p><em>Note:</em> If a macro is actually used, but only used in skipped
d181 2
a182 2
warning in such a case, you might improve the scope of the macro&rsquo;s
definition by, for example, moving it into the first skipped block.
d184 5
a188 10
</p>
<div class="smallexample">
<pre class="smallexample">#if defined the_macro_causing_the_warning
#endif
</pre></div>

</dd>
<dt><code>-Wendif-labels</code></dt>
<dd><a name="index-Wendif_002dlabels-1"></a>
<p>Warn whenever an &lsquo;<samp>#else</samp>&rsquo; or an &lsquo;<samp>#endif</samp>&rsquo; are followed by text.
a189 8
</p>
<div class="smallexample">
<pre class="smallexample">#if FOO
&hellip;
#else FOO
&hellip;
#endif FOO
</pre></div>
d191 7
a197 1
<p>The second and third <code>FOO</code> should be in comments, but often are not
d199 2
a200 5
</p>
</dd>
<dt><code>-Werror</code></dt>
<dd><a name="index-Werror-1"></a>
<p>Make all warnings into hard errors.  Source code which triggers warnings
d202 2
a203 5
</p>
</dd>
<dt><code>-Wsystem-headers</code></dt>
<dd><a name="index-Wsystem_002dheaders-1"></a>
<p>Issue warnings for code in system headers.  These are normally unhelpful
d206 4
a209 10
</p>
</dd>
<dt><code>-w</code></dt>
<dd><a name="index-w-1"></a>
<p>Suppress all warnings, including those which GNU CPP issues by default.
</p>
</dd>
<dt><code>-pedantic</code></dt>
<dd><a name="index-pedantic-2"></a>
<p>Issue all the mandatory diagnostics listed in the C standard.  Some of
d212 2
a213 5
</p>
</dd>
<dt><code>-pedantic-errors</code></dt>
<dd><a name="index-pedantic_002derrors-2"></a>
<p>Issue all the mandatory diagnostics, and make all mandatory diagnostics
d215 5
a219 10
without &lsquo;<samp>-pedantic</samp>&rsquo; but treats as warnings.
</p>
</dd>
<dt><code>-M</code></dt>
<dd><a name="index-M"></a>
<a name="index-make"></a>
<a name="index-dependencies_002c-make"></a>
<p>Instead of outputting the result of preprocessing, output a rule
suitable for <code>make</code> describing the dependencies of the main
source file.  The preprocessor outputs one <code>make</code> rule containing
d221 11
a231 12
the included files, including those coming from <samp>-include</samp> or
<samp>-imacros</samp> command line options.
</p>
<p>Unless specified explicitly (with <samp>-MT</samp> or <samp>-MQ</samp>), the
object file name consists of the name of the source file with any
suffix replaced with object file suffix and with any leading directory
parts removed.  If there are many included files then the rule is
split into several lines using &lsquo;<samp>\</samp>&rsquo;-newline.  The rule has no
commands.
</p>
<p>This option does not suppress the preprocessor&rsquo;s debug output, such as
<samp>-dM</samp>.  To avoid mixing such debug output with the dependency
d233 2
a234 2
<samp>-MF</samp>, or use an environment variable like
<code>DEPENDENCIES_OUTPUT</code> (see <a href="Environment-Variables.html#Environment-Variables">Environment Variables</a>).  Debug output
d236 5
a240 8
</p>
<p>Passing <samp>-M</samp> to the driver implies <samp>-E</samp>, and suppresses
warnings with an implicit <samp>-w</samp>.
</p>
</dd>
<dt><code>-MM</code></dt>
<dd><a name="index-MM"></a>
<p>Like <samp>-M</samp> but do not mention header files that are found in
d243 4
a246 4
</p>
<p>This implies that the choice of angle brackets or double quotes in an
&lsquo;<samp>#include</samp>&rsquo; directive does not in itself determine whether that
header will appear in <samp>-MM</samp> dependency output.  This is a
d248 3
a250 6
</p>
<a name="dashMF"></a></dd>
<dt><code>-MF <var>file</var></code></dt>
<dd><a name="index-MF"></a>
<p>When used with <samp>-M</samp> or <samp>-MM</samp>, specifies a
file to write the dependencies to.  If no <samp>-MF</samp> switch is given
d253 6
a258 9
</p>
<p>When used with the driver options <samp>-MD</samp> or <samp>-MMD</samp>,
<samp>-MF</samp> overrides the default dependency output file.
</p>
</dd>
<dt><code>-MG</code></dt>
<dd><a name="index-MG"></a>
<p>In conjunction with an option such as <samp>-M</samp> requesting
dependency generation, <samp>-MG</samp> assumes missing header files are
d261 1
a261 1
<code>#include</code> directive without prepending any path.  <samp>-MG</samp>
d264 4
a267 7
</p>
<p>This feature is used in automatic updating of makefiles.
</p>
</dd>
<dt><code>-MP</code></dt>
<dd><a name="index-MP"></a>
<p>This option instructs CPP to add a phony target for each dependency
d269 16
a284 21
dummy rules work around errors <code>make</code> gives if you remove header
files without updating the <samp>Makefile</samp> to match.
</p>
<p>This is typical output:
</p>
<div class="smallexample">
<pre class="smallexample">test.o: test.c test.h

test.h:
</pre></div>

</dd>
<dt><code>-MT <var>target</var></code></dt>
<dd><a name="index-MT"></a>

<p>Change the target of the rule emitted by dependency generation.  By
default CPP takes the name of the main input file, deletes any
directory components and any file suffix such as &lsquo;<samp>.c</samp>&rsquo;, and
appends the platform&rsquo;s usual object suffix.  The result is the target.
</p>
<p>An <samp>-MT</samp> option will set the target to be exactly the string you
d286 24
a309 35
argument to <samp>-MT</samp>, or use multiple <samp>-MT</samp> options.
</p>
<p>For example, <samp><span class="nolinebreak">-MT</span>&nbsp;'$(objpfx)foo.o'<!-- /@@w --></samp> might give
</p>
<div class="smallexample">
<pre class="smallexample">$(objpfx)foo.o: foo.c
</pre></div>

</dd>
<dt><code>-MQ <var>target</var></code></dt>
<dd><a name="index-MQ"></a>

<p>Same as <samp>-MT</samp>, but it quotes any characters which are special to
Make.  <samp><span class="nolinebreak">-MQ</span>&nbsp;'$(objpfx)foo.o'<!-- /@@w --></samp> gives
</p>
<div class="smallexample">
<pre class="smallexample">$$(objpfx)foo.o: foo.c
</pre></div>

<p>The default target is automatically quoted, as if it were given with
<samp>-MQ</samp>.
</p>
</dd>
<dt><code>-MD</code></dt>
<dd><a name="index-MD"></a>
<p><samp>-MD</samp> is equivalent to <samp>-M -MF <var>file</var></samp>, except that
<samp>-E</samp> is not implied.  The driver determines <var>file</var> based on
whether an <samp>-o</samp> option is given.  If it is, the driver uses its
argument but with a suffix of <samp>.d</samp>, otherwise it takes the name
of the input file, removes any directory components and suffix, and
applies a <samp>.d</samp> suffix.
</p>
<p>If <samp>-MD</samp> is used in conjunction with <samp>-E</samp>, any
<samp>-o</samp> switch is understood to specify the dependency output file
(see <a href="#dashMF">-MF</a>), but if used without <samp>-E</samp>, each <samp>-o</samp>
d311 2
a312 2
</p>
<p>Since <samp>-E</samp> is not implied, <samp>-MD</samp> can be used to generate
d314 2
a315 5
</p>
</dd>
<dt><code>-MMD</code></dt>
<dd><a name="index-MMD"></a>
<p>Like <samp>-MD</samp> except mention only user header files, not system
d317 2
a318 5
</p>
</dd>
<dt><code>-fpch-deps</code></dt>
<dd><a name="index-fpch_002ddeps"></a>
<p>When using precompiled headers (see <a href="Precompiled-Headers.html#Precompiled-Headers">Precompiled Headers</a>), this flag
d320 1
a320 1
precompiled header&rsquo;s dependencies.  If not specified only the
d324 8
a331 11
</p>
</dd>
<dt><code>-fpch-preprocess</code></dt>
<dd><a name="index-fpch_002dpreprocess"></a>
<p>This option allows use of a precompiled header (see <a href="Precompiled-Headers.html#Precompiled-Headers">Precompiled Headers</a>) together with <samp>-E</samp>.  It inserts a special <code>#pragma</code>,
<code>#pragma GCC pch_preprocess &quot;<var>filename</var>&quot;</code> in the output to mark
the place where the precompiled header was found, and its <var>filename</var>.
When <samp>-fpreprocessed</samp> is in use, GCC recognizes this <code>#pragma</code>
and loads the PCH.
</p>
<p>This option is off by default, because the resulting preprocessed output
d333 3
a335 3
<samp>-save-temps</samp>.
</p>
<p>You should not write this <code>#pragma</code> in your own code, but it is
d337 1
a337 1
location.  The filename may be absolute or it may be relative to GCC&rsquo;s
d339 2
a340 8
</p>
</dd>
<dt><code>-x c</code></dt>
<dt><code>-x c++</code></dt>
<dt><code>-x objective-c</code></dt>
<dt><code>-x assembler-with-cpp</code></dt>
<dd><a name="index-x-1"></a>
<p>Specify the source language: C, C++, Objective-C, or assembly.  This has
d344 1
a344 1
&lsquo;<samp>.c</samp>&rsquo;, &lsquo;<samp>.cc</samp>&rsquo;, &lsquo;<samp>.m</samp>&rsquo;, or &lsquo;<samp>.S</samp>&rsquo;.  Some other common
d348 4
a351 4
</p>
<p><em>Note:</em> Previous versions of cpp accepted a <samp>-lang</samp> option
which selected both the language and the standards conformance level.
This option has been removed, because it conflicts with the <samp>-l</samp>
d353 2
a354 7
</p>
</dd>
<dt><code>-std=<var>standard</var></code></dt>
<dt><code>-ansi</code></dt>
<dd><a name="index-ansi-2"></a>
<a name="index-std_003d"></a>
<p>Specify the standard to which the code should conform.  Currently CPP
d356 2
a357 2
</p>
<p><var>standard</var>
d359 2
a360 5
</p><dl compact="compact">
<dt><code>c90</code></dt>
<dt><code>c89</code></dt>
<dt><code>iso9899:1990</code></dt>
<dd><p>The ISO C standard from 1990.  &lsquo;<samp>c90</samp>&rsquo; is the customary shorthand for
d362 6
a367 13
</p>
<p>The <samp>-ansi</samp> option is equivalent to <samp>-std=c90</samp>.
</p>
</dd>
<dt><code>iso9899:199409</code></dt>
<dd><p>The 1990 C standard, as amended in 1994.
</p>
</dd>
<dt><code>iso9899:1999</code></dt>
<dt><code>c99</code></dt>
<dt><code>iso9899:199x</code></dt>
<dt><code>c9x</code></dt>
<dd><p>The revised ISO C standard, published in December 1999.  Before
d369 9
a377 32
</p>
</dd>
<dt><code>iso9899:2011</code></dt>
<dt><code>c11</code></dt>
<dt><code>c1x</code></dt>
<dd><p>The revised ISO C standard, published in December 2011.  Before
publication, this was known as C1X.
</p>
</dd>
<dt><code>gnu90</code></dt>
<dt><code>gnu89</code></dt>
<dd><p>The 1990 C standard plus GNU extensions.  This is the default.
</p>
</dd>
<dt><code>gnu99</code></dt>
<dt><code>gnu9x</code></dt>
<dd><p>The 1999 C standard plus GNU extensions.
</p>
</dd>
<dt><code>gnu11</code></dt>
<dt><code>gnu1x</code></dt>
<dd><p>The 2011 C standard plus GNU extensions.
</p>
</dd>
<dt><code>c++98</code></dt>
<dd><p>The 1998 ISO C++ standard plus amendments.
</p>
</dd>
<dt><code>gnu++98</code></dt>
<dd><p>The same as <samp>-std=c++98</samp> plus GNU extensions.  This is the
default for C++ code.
</p></dd>
d380 9
a388 12
</dd>
<dt><code>-I-</code></dt>
<dd><a name="index-I_002d"></a>
<p>Split the include path.  Any directories specified with <samp>-I</samp>
options before <samp>-I-</samp> are searched only for headers requested with
<code>#include&nbsp;&quot;<var>file</var>&quot;<!-- /@@w --></code>; they are not searched for
<code>#include&nbsp;&lt;<var>file</var>&gt;<!-- /@@w --></code>.  If additional directories are
specified with <samp>-I</samp> options after the <samp>-I-</samp>, those
directories are searched for all &lsquo;<samp>#include</samp>&rsquo; directives.
</p>
<p>In addition, <samp>-I-</samp> inhibits the use of the directory of the current
file directory as the first search directory for <code>#include&nbsp;&quot;<var>file</var>&quot;<!-- /@@w --></code>.
d390 3
a392 6
</p>
</dd>
<dt><code>-nostdinc</code></dt>
<dd><a name="index-nostdinc"></a>
<p>Do not search the standard system directories for header files.
Only the directories you have specified with <samp>-I</samp> options
d394 2
a395 5
</p>
</dd>
<dt><code>-nostdinc++</code></dt>
<dd><a name="index-nostdinc_002b_002b-1"></a>
<p>Do not search for header files in the C++-specific standard directories,
d398 2
a399 5
</p>
</dd>
<dt><code>-include <var>file</var></code></dt>
<dd><a name="index-include"></a>
<p>Process <var>file</var> as if <code>#include &quot;file&quot;</code> appeared as the first
d401 1
a401 1
for <var>file</var> is the preprocessor&rsquo;s working directory <em>instead of</em>
d403 1
a403 1
is searched for in the remainder of the <code>#include &quot;&hellip;&quot;</code> search
d405 2
a406 2
</p>
<p>If multiple <samp>-include</samp> options are given, the files are included
d408 3
a410 6
</p>
</dd>
<dt><code>-imacros <var>file</var></code></dt>
<dd><a name="index-imacros"></a>
<p>Exactly like <samp>-include</samp>, except that any output produced by
scanning <var>file</var> is thrown away.  Macros it defines remain defined.
d413 6
a418 9
</p>
<p>All files specified by <samp>-imacros</samp> are processed before all files
specified by <samp>-include</samp>.
</p>
</dd>
<dt><code>-idirafter <var>dir</var></code></dt>
<dd><a name="index-idirafter"></a>
<p>Search <var>dir</var> for header files, but do it <em>after</em> all
directories specified with <samp>-I</samp> and the standard system directories
d420 2
a421 7
If <var>dir</var> begins with <code>=</code>, then the <code>=</code> will be replaced
by the sysroot prefix; see <samp>--sysroot</samp> and <samp>-isysroot</samp>.
</p>
</dd>
<dt><code>-iprefix <var>prefix</var></code></dt>
<dd><a name="index-iprefix"></a>
<p>Specify <var>prefix</var> as the prefix for subsequent <samp>-iwithprefix</samp>
d423 12
a434 31
final &lsquo;<samp>/</samp>&rsquo;.
</p>
</dd>
<dt><code>-iwithprefix <var>dir</var></code></dt>
<dt><code>-iwithprefixbefore <var>dir</var></code></dt>
<dd><a name="index-iwithprefix"></a>
<a name="index-iwithprefixbefore"></a>
<p>Append <var>dir</var> to the prefix specified previously with
<samp>-iprefix</samp>, and add the resulting directory to the include search
path.  <samp>-iwithprefixbefore</samp> puts it in the same place <samp>-I</samp>
would; <samp>-iwithprefix</samp> puts it where <samp>-idirafter</samp> would.
</p>
</dd>
<dt><code>-isysroot <var>dir</var></code></dt>
<dd><a name="index-isysroot"></a>
<p>This option is like the <samp>--sysroot</samp> option, but applies only to
header files (except for Darwin targets, where it applies to both header
files and libraries).  See the <samp>--sysroot</samp> option for more
information.
</p>
</dd>
<dt><code>-imultilib <var>dir</var></code></dt>
<dd><a name="index-imultilib"></a>
<p>Use <var>dir</var> as a subdirectory of the directory containing
target-specific C++ headers.
</p>
</dd>
<dt><code>-isystem <var>dir</var></code></dt>
<dd><a name="index-isystem"></a>
<p>Search <var>dir</var> for header files, after all directories specified by
<samp>-I</samp> but before the standard system directories.  Mark it
d437 9
a445 45
If <var>dir</var> begins with <code>=</code>, then the <code>=</code> will be replaced
by the sysroot prefix; see <samp>--sysroot</samp> and <samp>-isysroot</samp>.
</p>
</dd>
<dt><code>-iquote <var>dir</var></code></dt>
<dd><a name="index-iquote"></a>
<p>Search <var>dir</var> only for header files requested with
<code>#include&nbsp;&quot;<var>file</var>&quot;<!-- /@@w --></code>; they are not searched for
<code>#include&nbsp;&lt;<var>file</var>&gt;<!-- /@@w --></code>, before all directories specified by
<samp>-I</samp> and before the standard system directories.
If <var>dir</var> begins with <code>=</code>, then the <code>=</code> will be replaced
by the sysroot prefix; see <samp>--sysroot</samp> and <samp>-isysroot</samp>.
</p>
</dd>
<dt><code>-fdirectives-only</code></dt>
<dd><a name="index-fdirectives_002donly"></a>
<p>When preprocessing, handle directives, but do not expand macros.
</p>
<p>The option&rsquo;s behavior depends on the <samp>-E</samp> and <samp>-fpreprocessed</samp>
options.
</p>
<p>With <samp>-E</samp>, preprocessing is limited to the handling of directives
such as <code>#define</code>, <code>#ifdef</code>, and <code>#error</code>.  Other
preprocessor operations, such as macro expansion and trigraph
conversion are not performed.  In addition, the <samp>-dD</samp> option is
implicitly enabled.
</p>
<p>With <samp>-fpreprocessed</samp>, predefinition of command line and most
builtin macros is disabled.  Macros such as <code>__LINE__</code>, which are
contextually dependent, are handled normally.  This enables compilation of
files previously preprocessed with <code>-E -fdirectives-only</code>.
</p>
<p>With both <samp>-E</samp> and <samp>-fpreprocessed</samp>, the rules for
<samp>-fpreprocessed</samp> take precedence.  This enables full preprocessing of
files previously preprocessed with <code>-E -fdirectives-only</code>.
</p>
</dd>
<dt><code>-fdollars-in-identifiers</code></dt>
<dd><a name="index-fdollars_002din_002didentifiers"></a>
<a name="fdollars_002din_002didentifiers"></a><p>Accept &lsquo;<samp>$</samp>&rsquo; in identifiers.
</p>
</dd>
<dt><code>-fextended-identifiers</code></dt>
<dd><a name="index-fextended_002didentifiers"></a>
<p>Accept universal character names in identifiers.  This option is
d448 2
a449 5
</p>
</dd>
<dt><code>-fpreprocessed</code></dt>
<dd><a name="index-fpreprocessed"></a>
<p>Indicate to the preprocessor that the input file has already been
d451 1
a451 1
conversion, escaped newline splicing, and processing of most directives.
d453 1
a453 1
pass a file preprocessed with <samp>-C</samp> to the compiler without
d456 3
a458 3
</p>
<p><samp>-fpreprocessed</samp> is implicit if the input file has one of the
extensions &lsquo;<samp>.i</samp>&rsquo;, &lsquo;<samp>.ii</samp>&rsquo; or &lsquo;<samp>.mi</samp>&rsquo;.  These are the
d460 3
a462 6
<samp>-save-temps</samp>.
</p>
</dd>
<dt><code>-ftabstop=<var>width</var></code></dt>
<dd><a name="index-ftabstop"></a>
<p>Set the distance between tab stops.  This helps the preprocessor report
d466 2
a467 39
</p>
</dd>
<dt><code>-fdebug-cpp</code></dt>
<dd><a name="index-fdebug_002dcpp"></a>
<p>This option is only useful for debugging GCC.  When used with
<samp>-E</samp>, dumps debugging information about location maps.  Every
token in the output is preceded by the dump of the map its location
belongs to.  The dump of the map holding the location of a token would
be:
</p><div class="smallexample">
<pre class="smallexample">{&lsquo;<samp>P</samp>&rsquo;:<samp>/file/path</samp>;&lsquo;<samp>F</samp>&rsquo;:<samp>/includer/path</samp>;&lsquo;<samp>L</samp>&rsquo;:<var>line_num</var>;&lsquo;<samp>C</samp>&rsquo;:<var>col_num</var>;&lsquo;<samp>S</samp>&rsquo;:<var>system_header_p</var>;&lsquo;<samp>M</samp>&rsquo;:<var>map_address</var>;&lsquo;<samp>E</samp>&rsquo;:<var>macro_expansion_p</var>,&lsquo;<samp>loc</samp>&rsquo;:<var>location</var>}
</pre></div>

<p>When used without <samp>-E</samp>, this option has no effect.
</p>
</dd>
<dt><code>-ftrack-macro-expansion<span class="roman">[</span>=<var>level</var><span class="roman">]</span></code></dt>
<dd><a name="index-ftrack_002dmacro_002dexpansion"></a>
<p>Track locations of tokens across macro expansions. This allows the
compiler to emit diagnostic about the current macro expansion stack
when a compilation error occurs in a macro expansion. Using this
option makes the preprocessor and the compiler consume more
memory. The <var>level</var> parameter can be used to choose the level of
precision of token location tracking thus decreasing the memory
consumption if necessary. Value &lsquo;<samp>0</samp>&rsquo; of <var>level</var> de-activates
this option just as if no <samp>-ftrack-macro-expansion</samp> was present
on the command line. Value &lsquo;<samp>1</samp>&rsquo; tracks tokens locations in a
degraded mode for the sake of minimal memory overhead. In this mode
all tokens resulting from the expansion of an argument of a
function-like macro have the same location. Value &lsquo;<samp>2</samp>&rsquo; tracks
tokens locations completely. This value is the most memory hungry.
When this option is given no argument, the default parameter value is
&lsquo;<samp>2</samp>&rsquo;.
</p>
</dd>
<dt><code>-fexec-charset=<var>charset</var></code></dt>
<dd><a name="index-fexec_002dcharset"></a>
<a name="index-character-set_002c-execution"></a>
<p>Set the execution character set, used for string and character
d469 3
a471 7
supported by the system&rsquo;s <code>iconv</code> library routine.
</p>
</dd>
<dt><code>-fwide-exec-charset=<var>charset</var></code></dt>
<dd><a name="index-fwide_002dexec_002dcharset"></a>
<a name="index-character-set_002c-wide-execution"></a>
<p>Set the wide execution character set, used for wide string and
d474 2
a475 2
<samp>-fexec-charset</samp>, <var>charset</var> can be any encoding supported
by the system&rsquo;s <code>iconv</code> library routine; however, you will have
d477 2
a478 6
</p>
</dd>
<dt><code>-finput-charset=<var>charset</var></code></dt>
<dd><a name="index-finput_002dcharset"></a>
<a name="index-character-set_002c-input"></a>
<p>Set the input character set, used for translation from the character
d483 4
a486 8
precedence if there&rsquo;s a conflict.  <var>charset</var> can be any encoding
supported by the system&rsquo;s <code>iconv</code> library routine.
</p>
</dd>
<dt><code>-fworking-directory</code></dt>
<dd><a name="index-fworking_002ddirectory"></a>
<a name="index-fno_002dworking_002ddirectory"></a>
<p>Enable generation of linemarkers in the preprocessor output that will
d491 1
a491 1
directory, when it&rsquo;s present in the preprocessed input, as the
d495 1
a495 1
form <samp>-fno-working-directory</samp>.  If the <samp>-P</samp> flag is
d498 2
a499 5
</p>
</dd>
<dt><code>-fno-show-column</code></dt>
<dd><a name="index-fno_002dshow_002dcolumn"></a>
<p>Do not print column numbers in diagnostics.  This may be necessary if
d501 5
a505 8
column numbers, such as <code>dejagnu</code>.
</p>
</dd>
<dt><code>-A <var>predicate</var>=<var>answer</var></code></dt>
<dd><a name="index-A"></a>
<p>Make an assertion with the predicate <var>predicate</var> and answer
<var>answer</var>.  This form is preferred to the older form <samp>-A
<var>predicate</var>(<var>answer</var>)</samp>, which is still supported, because
d507 2
a508 4
</p>
</dd>
<dt><code>-A -<var>predicate</var>=<var>answer</var></code></dt>
<dd><p>Cancel an assertion with the predicate <var>predicate</var> and answer
d510 2
a511 4
</p>
</dd>
<dt><code>-dCHARS</code></dt>
<dd><p><var>CHARS</var> is a sequence of one or more of the following characters,
d516 3
a518 5
</p>
<dl compact="compact">
<dt>&lsquo;<samp>M</samp>&rsquo;</dt>
<dd><a name="index-dM"></a>
<p>Instead of the normal output, generate a list of &lsquo;<samp>#define</samp>&rsquo;
d521 9
a529 18
finding out what is predefined in your version of the preprocessor.
Assuming you have no file <samp>foo.h</samp>, the command
</p>
<div class="smallexample">
<pre class="smallexample">touch foo.h; cpp -dM foo.h
</pre></div>

<p>will show all the predefined macros.
</p>
<p>If you use <samp>-dM</samp> without the <samp>-E</samp> option, <samp>-dM</samp> is
interpreted as a synonym for <samp>-fdump-rtl-mach</samp>.
See <a href="http://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html#Debugging-Options">(gcc)Debugging Options</a>.
</p>
</dd>
<dt>&lsquo;<samp>D</samp>&rsquo;</dt>
<dd><a name="index-dD-1"></a>
<p>Like &lsquo;<samp>M</samp>&rsquo; except in two respects: it does <em>not</em> include the
predefined macros, and it outputs <em>both</em> the &lsquo;<samp>#define</samp>&rsquo;
d532 5
a536 21
</p>
</dd>
<dt>&lsquo;<samp>N</samp>&rsquo;</dt>
<dd><a name="index-dN"></a>
<p>Like &lsquo;<samp>D</samp>&rsquo;, but emit only the macro names, not their expansions.
</p>
</dd>
<dt>&lsquo;<samp>I</samp>&rsquo;</dt>
<dd><a name="index-dI"></a>
<p>Output &lsquo;<samp>#include</samp>&rsquo; directives in addition to the result of
preprocessing.
</p>
</dd>
<dt>&lsquo;<samp>U</samp>&rsquo;</dt>
<dd><a name="index-dU"></a>
<p>Like &lsquo;<samp>D</samp>&rsquo; except that only macros that are expanded, or whose
definedness is tested in preprocessor directives, are output; the
output is delayed until the use or test of the macro; and
&lsquo;<samp>#undef</samp>&rsquo; directives are also output for macros tested but
undefined at the time.
</p></dd>
d539 1
a539 4
</dd>
<dt><code>-P</code></dt>
<dd><a name="index-P"></a>
<p>Inhibit generation of linemarkers in the output from the preprocessor.
d543 2
a544 5
</p>
</dd>
<dt><code>-C</code></dt>
<dd><a name="index-C"></a>
<p>Do not discard comments.  All comments are passed through to the output
d547 3
a549 3
</p>
<p>You should be prepared for side effects when using <samp>-C</samp>; it
causes the preprocessor to treat comments as tokens in their own right.
d552 4
a555 6
source line, since the first token on the line is no longer a &lsquo;<samp>#</samp>&rsquo;.
</p>
</dd>
<dt><code>-CC</code></dt>
<dd><p>Do not discard comments, including during macro expansion.  This is
like <samp>-C</samp>, except that comments contained within macros are
d557 3
a559 3
</p>
<p>In addition to the side-effects of the <samp>-C</samp> option, the
<samp>-CC</samp> option causes all C++-style comments inside a macro
d563 4
a566 7
</p>
<p>The <samp>-CC</samp> option is generally used to support lint comments.
</p>
</dd>
<dt><code>-traditional-cpp</code></dt>
<dd><a name="index-traditional_002dcpp-1"></a>
<p>Try to imitate the behavior of old-fashioned C preprocessors, as
d568 3
a570 6
</p>
</dd>
<dt><code>-trigraphs</code></dt>
<dd><a name="index-trigraphs-1"></a>
<p>Process trigraph sequences.
These are three-character sequences, all starting with &lsquo;<samp>??</samp>&rsquo;, that
d572 1
a572 1
&lsquo;<samp>??/</samp>&rsquo; stands for &lsquo;<samp>\</samp>&rsquo;, so &lsquo;<samp>'??/n'</samp>&rsquo; is a character
d574 9
a582 14
standard-conforming modes it converts them.  See the <samp>-std</samp> and
<samp>-ansi</samp> options.
</p>
<p>The nine trigraphs and their replacements are
</p>
<div class="smallexample">
<pre class="smallexample">Trigraph:       ??(  ??)  ??&lt;  ??&gt;  ??=  ??/  ??'  ??!  ??-
Replacement:      [    ]    {    }    #    \    ^    |    ~
</pre></div>

</dd>
<dt><code>-remap</code></dt>
<dd><a name="index-remap"></a>
<p>Enable special code to work around file systems which only permit very
d584 2
a585 7
</p>
</dd>
<dt><code>--help</code></dt>
<dt><code>--target-help</code></dt>
<dd><a name="index-help-1"></a>
<a name="index-target_002dhelp-1"></a>
<p>Print text describing all the command line options instead of
d587 2
a588 5
</p>
</dd>
<dt><code>-v</code></dt>
<dd><a name="index-v-1"></a>
<p>Verbose mode.  Print out GNU CPP&rsquo;s version number at the beginning of
d590 2
a591 5
</p>
</dd>
<dt><code>-H</code></dt>
<dd><a name="index-H"></a>
<p>Print the name of each header file used, in addition to other normal
d593 1
a593 1
&lsquo;<samp>#include</samp>&rsquo; stack it is.  Precompiled header files are also
d595 4
a598 9
header file is printed with &lsquo;<samp>...x</samp>&rsquo; and a valid one with &lsquo;<samp>...!</samp>&rsquo; .
</p>
</dd>
<dt><code>-version</code></dt>
<dt><code>--version</code></dt>
<dd><a name="index-version-1"></a>
<p>Print out GNU CPP&rsquo;s version number.  With one dash, proceed to
preprocess as normal.  With two dashes, exit immediately.
</p></dd>
d601 1
a601 7
<hr>
<div class="header">
<p>
Next: <a href="Assembler-Options.html#Assembler-Options" accesskey="n" rel="next">Assembler Options</a>, Previous: <a href="Optimize-Options.html#Optimize-Options" accesskey="p" rel="prev">Optimize Options</a>, Up: <a href="Invoking-GCC.html#Invoking-GCC" accesskey="u" rel="up">Invoking GCC</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>


a602 2
</body>
</html>
@

