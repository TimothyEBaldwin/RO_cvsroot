head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.18;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.18;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.23;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Vector Extensions - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="C-Extensions.html#C-Extensions" title="C Extensions">
<link rel="prev" href="Return-Address.html#Return-Address" title="Return Address">
<link rel="next" href="Offsetof.html#Offsetof" title="Offsetof">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Vector-Extensions"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Offsetof.html#Offsetof">Offsetof</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Return-Address.html#Return-Address">Return Address</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="C-Extensions.html#C-Extensions">C Extensions</a>
<hr>
</div>

<h3 class="section">5.42 Using vector instructions through built-in functions</h3>

<p>On some targets, the instruction set contains SIMD vector instructions that
operate on multiple values contained in one large register at the same time. 
For example, on the i386 the MMX, 3Dnow! and SSE extensions can be used
this way.

 <p>The first step in using these extensions is to provide the necessary data
types.  This should be done using an appropriate <code>typedef</code>:

<pre class="smallexample">     typedef int v4si __attribute__ ((vector_size (16)));
</pre>
 <p>The <code>int</code> type specifies the base type, while the attribute specifies
the vector size for the variable, measured in bytes.  For example, the
declaration above causes the compiler to set the mode for the <code>v4si</code>
type to be 16 bytes wide and divided into <code>int</code> sized units.  For
a 32-bit <code>int</code> this means a vector of 4 units of 4 bytes, and the
corresponding mode of <code>foo</code> will be <acronym>V4SI</acronym>.

 <p>The <code>vector_size</code> attribute is only applicable to integral and
float scalars, although arrays, pointers, and function return values
are allowed in conjunction with this construct.

 <p>All the basic integer types can be used as base types, both as signed
and as unsigned: <code>char</code>, <code>short</code>, <code>int</code>, <code>long</code>,
<code>long long</code>.  In addition, <code>float</code> and <code>double</code> can be
used to build floating-point vector types.

 <p>Specifying a combination that is not valid for the current architecture
will cause GCC to synthesize the instructions using a narrower mode. 
For example, if you specify a variable of type <code>V4SI</code> and your
architecture does not allow for this specific SIMD type, GCC will
produce code that uses 4 <code>SIs</code>.

 <p>The types defined in this manner can be used with a subset of normal C
operations.  Currently, GCC will allow using the following operators
on these types: <code>+, -, *, /, unary minus, ^, |, &amp;, ~</code>.

 <p>The operations behave like C++ <code>valarrays</code>.  Addition is defined as
the addition of the corresponding elements of the operands.  For
example, in the code below, each of the 4 elements in <var>a</var> will be
added to the corresponding 4 elements in <var>b</var> and the resulting
vector will be stored in <var>c</var>.

<pre class="smallexample">     typedef int v4si __attribute__ ((vector_size (16)));
     
     v4si a, b, c;
     
     c = a + b;
</pre>
 <p>Subtraction, multiplication, division, and the logical operations
operate in a similar manner.  Likewise, the result of using the unary
minus or complement operators on a vector type is a vector whose
elements are the negative or complemented values of the corresponding
elements in the operand.

 <p>You can declare variables and use them in function calls and returns, as
well as in assignments and some casts.  You can specify a vector type as
a return type for a function.  Vector types can also be used as function
arguments.  It is possible to cast from one vector type to another,
provided they are of the same size (in fact, you can also cast vectors
to and from other datatypes of the same size).

 <p>You cannot operate between vectors of different lengths or different
signedness without a cast.

 <p>A port that supports hardware vector operations, usually provides a set
of built-in functions that can be used to operate on vectors.  For
example, a function to add two vectors and multiply the result by a
third could look like this:

<pre class="smallexample">     v4si f (v4si a, v4si b, v4si c)
     {
       v4si tmp = __builtin_addv4si (a, b);
       return __builtin_mulv4si (tmp, c);
     }
     
</pre>
 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Vector Extensions</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Vector Extensions">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Vector Extensions">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="C-Extensions.html#C-Extensions" rel="up" title="C Extensions">
<link href="Offsetof.html#Offsetof" rel="next" title="Offsetof">
<link href="Return-Address.html#Return-Address" rel="prev" title="Return Address">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="Offsetof.html#Offsetof" accesskey="n" rel="next">Offsetof</a>, Previous: <a href="Return-Address.html#Return-Address" accesskey="p" rel="prev">Return Address</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
d55 2
a56 3
<hr>
<a name="Using-vector-instructions-through-built_002din-functions"></a>
<h3 class="section">6.49 Using vector instructions through built-in functions</h3>
d59 2
a60 2
operate on multiple values contained in one large register at the same time.
For example, on the i386 the MMX, 3DNow! and SSE extensions can be used
d62 2
a63 2
</p>
<p>The first step in using these extensions is to provide the necessary data
a64 4
</p>
<div class="smallexample">
<pre class="smallexample">typedef int v4si __attribute__ ((vector_size (16)));
</pre></div>
d66 3
a68 1
<p>The <code>int</code> type specifies the base type, while the attribute specifies
d74 2
a75 2
</p>
<p>The <code>vector_size</code> attribute is only applicable to integral and
d78 2
a79 2
</p>
<p>All the basic integer types can be used as base types, both as signed
d83 3
a85 3
</p>
<p>Specifying a combination that is not valid for the current architecture
will cause GCC to synthesize the instructions using a narrower mode.
d89 2
a90 2
</p>
<p>The types defined in this manner can be used with a subset of normal C
d92 3
a94 3
on these types: <code>+, -, *, /, unary minus, ^, |, &amp;, ~, %</code>.
</p>
<p>The operations behave like C++ <code>valarrays</code>.  Addition is defined as
a98 8
</p>
<div class="smallexample">
<pre class="smallexample">typedef int v4si __attribute__ ((vector_size (16)));

v4si a, b, c;

c = a + b;
</pre></div>
d100 7
a106 1
<p>Subtraction, multiplication, division, and the logical operations
d111 2
a112 87
</p>
<p>In C it is possible to use shifting operators <code>&lt;&lt;</code>, <code>&gt;&gt;</code> on
integer-type vectors. The operation is defined as following: <code>{a0,
a1, &hellip;, an} &gt;&gt; {b0, b1, &hellip;, bn} == {a0 &gt;&gt; b0, a1 &gt;&gt; b1,
&hellip;, an &gt;&gt; bn}</code>. Vector operands must have the same number of
elements. 
</p>
<p>For the convenience in C it is allowed to use a binary vector operation
where one operand is a scalar. In that case the compiler will transform
the scalar operand into a vector where each element is the scalar from
the operation. The transformation will happen only if the scalar could be
safely converted to the vector-element type.
Consider the following code.
</p>
<div class="smallexample">
<pre class="smallexample">typedef int v4si __attribute__ ((vector_size (16)));

v4si a, b, c;
long l;

a = b + 1;    /* a = b + {1,1,1,1}; */
a = 2 * b;    /* a = {2,2,2,2} * b; */

a = l + a;    /* Error, cannot convert long to int. */
</pre></div>

<p>In C vectors can be subscripted as if the vector were an array with
the same number of elements and base type.  Out of bound accesses
invoke undefined behavior at runtime.  Warnings for out of bound
accesses for vector subscription can be enabled with
<samp>-Warray-bounds</samp>.
</p>
<p>In GNU C vector comparison is supported within standard comparison
operators: <code>==, !=, &lt;, &lt;=, &gt;, &gt;=</code>. Comparison operands can be
vector expressions of integer-type or real-type. Comparison between
integer-type vectors and real-type vectors are not supported.  The
result of the comparison is a vector of the same width and number of
elements as the comparison operands with a signed integral element
type.
</p>
<p>Vectors are compared element-wise producing 0 when comparison is false
and -1 (constant of the appropriate type where all bits are set)
otherwise. Consider the following example.
</p>
<div class="smallexample">
<pre class="smallexample">typedef int v4si __attribute__ ((vector_size (16)));

v4si a = {1,2,3,4};
v4si b = {3,2,1,4};
v4si c;

c = a &gt;  b;     /* The result would be {0, 0,-1, 0}  */
c = a == b;     /* The result would be {0,-1, 0,-1}  */
</pre></div>

<p>Vector shuffling is available using functions
<code>__builtin_shuffle (vec, mask)</code> and
<code>__builtin_shuffle (vec0, vec1, mask)</code>.
Both functions construct a permutation of elements from one or two
vectors and return a vector of the same type as the input vector(s).
The <var>mask</var> is an integral vector with the same width (<var>W</var>)
and element count (<var>N</var>) as the output vector.
</p>
<p>The elements of the input vectors are numbered in memory ordering of
<var>vec0</var> beginning at 0 and <var>vec1</var> beginning at <var>N</var>.  The
elements of <var>mask</var> are considered modulo <var>N</var> in the single-operand
case and modulo <em>2*<var>N</var></em> in the two-operand case.
</p>
<p>Consider the following example,
</p>
<div class="smallexample">
<pre class="smallexample">typedef int v4si __attribute__ ((vector_size (16)));

v4si a = {1,2,3,4};
v4si b = {5,6,7,8};
v4si mask1 = {0,1,1,3};
v4si mask2 = {0,4,2,5};
v4si res;

res = __builtin_shuffle (a, mask1);       /* res is {1,2,2,4}  */
res = __builtin_shuffle (a, b, mask2);    /* res is {1,5,3,6}  */
</pre></div>

<p>Note that <code>__builtin_shuffle</code> is intentionally semantically
compatible with the OpenCL <code>shuffle</code> and <code>shuffle2</code> functions.
</p>
<p>You can declare variables and use them in function calls and returns, as
d118 2
a119 2
</p>
<p>You cannot operate between vectors of different lengths or different
a120 7
</p>
<hr>
<div class="header">
<p>
Next: <a href="Offsetof.html#Offsetof" accesskey="n" rel="next">Offsetof</a>, Previous: <a href="Return-Address.html#Return-Address" accesskey="p" rel="prev">Return Address</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>

d122 13
a135 2
</body>
</html>
@

