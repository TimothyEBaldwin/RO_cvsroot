head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.16;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.16;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.20;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Labels as Values - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="C-Extensions.html#C-Extensions" title="C Extensions">
<link rel="prev" href="Local-Labels.html#Local-Labels" title="Local Labels">
<link rel="next" href="Nested-Functions.html#Nested-Functions" title="Nested Functions">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Labels-as-Values"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Nested-Functions.html#Nested-Functions">Nested Functions</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Local-Labels.html#Local-Labels">Local Labels</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="C-Extensions.html#C-Extensions">C Extensions</a>
<hr>
</div>

<h3 class="section">5.3 Labels as Values</h3>

<p><a name="index-labels-as-values-1677"></a><a name="index-computed-gotos-1678"></a><a name="index-goto-with-computed-label-1679"></a><a name="index-address-of-a-label-1680"></a>
You can get the address of a label defined in the current function
(or a containing function) with the unary operator &lsquo;<samp><span class="samp">&amp;&amp;</span></samp>&rsquo;.  The
value has type <code>void *</code>.  This value is a constant and can be used
wherever a constant of that type is valid.  For example:

<pre class="smallexample">     void *ptr;
     /* <span class="roman">...</span> */
     ptr = &amp;&amp;foo;
</pre>
 <p>To use these values, you need to be able to jump to one.  This is done
with the computed goto statement<a rel="footnote" href="#fn-1" name="fnd-1"><sup>1</sup></a>, <code>goto *</code><var>exp</var><code>;</code>.  For example,

<pre class="smallexample">     goto *ptr;
</pre>
 <p class="noindent">Any expression of type <code>void *</code> is allowed.

 <p>One way of using these constants is in initializing a static array that
will serve as a jump table:

<pre class="smallexample">     static void *array[] = { &amp;&amp;foo, &amp;&amp;bar, &amp;&amp;hack };
</pre>
 <p>Then you can select a label with indexing, like this:

<pre class="smallexample">     goto *array[i];
</pre>
 <p class="noindent">Note that this does not check whether the subscript is in bounds&mdash;array
indexing in C never does that.

 <p>Such an array of label values serves a purpose much like that of the
<code>switch</code> statement.  The <code>switch</code> statement is cleaner, so
use that rather than an array unless the problem does not fit a
<code>switch</code> statement very well.

 <p>Another use of label values is in an interpreter for threaded code. 
The labels within the interpreter function can be stored in the
threaded code for super-fast dispatching.

 <p>You may not use this mechanism to jump to code in a different function. 
If you do that, totally unpredictable things will happen.  The best way to
avoid this is to store the label address only in automatic variables and
never pass it as an argument.

 <p>An alternate way to write the above example is

<pre class="smallexample">     static const int array[] = { &amp;&amp;foo - &amp;&amp;foo, &amp;&amp;bar - &amp;&amp;foo,
                                  &amp;&amp;hack - &amp;&amp;foo };
     goto *(&amp;&amp;foo + array[i]);
</pre>
 <p class="noindent">This is more friendly to code living in shared libraries, as it reduces
the number of dynamic relocations that are needed, and by consequence,
allows the data to be read-only.

 <div class="footnote">
<hr>
<h4>Footnotes</h4><p class="footnote"><small>[<a name="fn-1" href="#fnd-1">1</a>]</small> The analogous feature in
Fortran is called an assigned goto, but that name seems inappropriate in
C, where one can do more than simply store label addresses in label
variables.</p>

 <hr></div>

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Labels as Values</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Labels as Values">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Labels as Values">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="C-Extensions.html#C-Extensions" rel="up" title="C Extensions">
<link href="Nested-Functions.html#Nested-Functions" rel="next" title="Nested Functions">
<link href="Local-Labels.html#Local-Labels" rel="prev" title="Local Labels">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="Nested-Functions.html#Nested-Functions" accesskey="n" rel="next">Nested Functions</a>, Previous: <a href="Local-Labels.html#Local-Labels" accesskey="p" rel="prev">Local Labels</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
a54 7
<hr>
<a name="Labels-as-Values-1"></a>
<h3 class="section">6.3 Labels as Values</h3>
<a name="index-labels-as-values"></a>
<a name="index-computed-gotos"></a>
<a name="index-goto-with-computed-label"></a>
<a name="index-address-of-a-label"></a>
d56 5
a60 2
<p>You can get the address of a label defined in the current function
(or a containing function) with the unary operator &lsquo;<samp>&amp;&amp;</samp>&rsquo;.  The
d63 13
a75 17
</p>
<div class="smallexample">
<pre class="smallexample">void *ptr;
/* <span class="roman">&hellip;</span> */
ptr = &amp;&amp;foo;
</pre></div>

<p>To use these values, you need to be able to jump to one.  This is done
with the computed goto statement<a name="DOCF3" href="#FOOT3"><sup>3</sup></a>, <code>goto *<var>exp</var>;</code>.  For example,
</p>
<div class="smallexample">
<pre class="smallexample">goto *ptr;
</pre></div>

<p>Any expression of type <code>void *</code> is allowed.
</p>
<p>One way of using these constants is in initializing a static array that
a76 10
</p>
<div class="smallexample">
<pre class="smallexample">static void *array[] = { &amp;&amp;foo, &amp;&amp;bar, &amp;&amp;hack };
</pre></div>

<p>Then you can select a label with indexing, like this:
</p>
<div class="smallexample">
<pre class="smallexample">goto *array[i];
</pre></div>
d78 7
a84 1
<p>Note that this does not check whether the subscript is in bounds&mdash;array
d86 2
a87 2
</p>
<p>Such an array of label values serves a purpose much like that of the
d91 2
a92 2
</p>
<p>Another use of label values is in an interpreter for threaded code.
d95 2
a96 2
</p>
<p>You may not use this mechanism to jump to code in a different function.
a99 8
</p>
<p>An alternate way to write the above example is
</p>
<div class="smallexample">
<pre class="smallexample">static const int array[] = { &amp;&amp;foo - &amp;&amp;foo, &amp;&amp;bar - &amp;&amp;foo,
                             &amp;&amp;hack - &amp;&amp;foo };
goto *(&amp;&amp;foo + array[i]);
</pre></div>
d101 7
a107 1
<p>This is more friendly to code living in shared libraries, as it reduces
d110 2
a111 11
This alternative with label differences is not supported for the AVR target,
please use the first approach for AVR programs.
</p>
<p>The <code>&amp;&amp;foo</code> expressions for the same label might have different
values if the containing function is inlined or cloned.  If a program
relies on them being always the same,
<code>__attribute__((__noinline__,__noclone__))</code> should be used to
prevent inlining and cloning.  If <code>&amp;&amp;foo</code> is used in a static
variable initializer, inlining and cloning is forbidden.
</p>
<div class="footnote">
d113 1
a113 4
<h4 class="footnotes-heading">Footnotes</h4>

<h3><a name="FOOT3" href="#DOCF3">(3)</a></h3>
<p>The analogous feature in
a116 6
</div>
<hr>
<div class="header">
<p>
Next: <a href="Nested-Functions.html#Nested-Functions" accesskey="n" rel="next">Nested Functions</a>, Previous: <a href="Local-Labels.html#Local-Labels" accesskey="p" rel="prev">Local Labels</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>
d118 1
d120 1
a121 2
</body>
</html>
@

