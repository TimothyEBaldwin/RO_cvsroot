head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.15;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.15;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.19;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Local Labels - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="C-Extensions.html#C-Extensions" title="C Extensions">
<link rel="prev" href="Statement-Exprs.html#Statement-Exprs" title="Statement Exprs">
<link rel="next" href="Labels-as-Values.html#Labels-as-Values" title="Labels as Values">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Local-Labels"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Labels-as-Values.html#Labels-as-Values">Labels as Values</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Statement-Exprs.html#Statement-Exprs">Statement Exprs</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="C-Extensions.html#C-Extensions">C Extensions</a>
<hr>
</div>

<h3 class="section">5.2 Locally Declared Labels</h3>

<p><a name="index-local-labels-1675"></a><a name="index-macros_002c-local-labels-1676"></a>
GCC allows you to declare <dfn>local labels</dfn> in any nested block
scope.  A local label is just like an ordinary label, but you can
only reference it (with a <code>goto</code> statement, or by taking its
address) within the block in which it was declared.

 <p>A local label declaration looks like this:

<pre class="smallexample">     __label__ <var>label</var>;
</pre>
 <p class="noindent">or

<pre class="smallexample">     __label__ <var>label1</var>, <var>label2</var>, /* <span class="roman">...</span> */;
</pre>
 <p>Local label declarations must come at the beginning of the block,
before any ordinary declarations or statements.

 <p>The label declaration defines the label <em>name</em>, but does not define
the label itself.  You must do this in the usual way, with
<var>label</var><code>:</code>, within the statements of the statement expression.

 <p>The local label feature is useful for complex macros.  If a macro
contains nested loops, a <code>goto</code> can be useful for breaking out of
them.  However, an ordinary label whose scope is the whole function
cannot be used: if the macro can be expanded several times in one
function, the label will be multiply defined in that function.  A
local label avoids this problem.  For example:

<pre class="smallexample">     #define SEARCH(value, array, target)              \
     do {                                              \
       __label__ found;                                \
       typeof (target) _SEARCH_target = (target);      \
       typeof (*(array)) *_SEARCH_array = (array);     \
       int i, j;                                       \
       int value;                                      \
       for (i = 0; i &lt; max; i++)                       \
         for (j = 0; j &lt; max; j++)                     \
           if (_SEARCH_array[i][j] == _SEARCH_target)  \
             { (value) = i; goto found; }              \
       (value) = -1;                                   \
      found:;                                          \
     } while (0)
</pre>
 <p>This could also be written using a statement-expression:

<pre class="smallexample">     #define SEARCH(array, target)                     \
     ({                                                \
       __label__ found;                                \
       typeof (target) _SEARCH_target = (target);      \
       typeof (*(array)) *_SEARCH_array = (array);     \
       int i, j;                                       \
       int value;                                      \
       for (i = 0; i &lt; max; i++)                       \
         for (j = 0; j &lt; max; j++)                     \
           if (_SEARCH_array[i][j] == _SEARCH_target)  \
             { value = i; goto found; }                \
       value = -1;                                     \
      found:                                           \
       value;                                          \
     })
</pre>
 <p>Local label declarations also make the labels they declare visible to
nested functions, if there are any.  See <a href="Nested-Functions.html#Nested-Functions">Nested Functions</a>, for details.

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Local Labels</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Local Labels">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Local Labels">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="C-Extensions.html#C-Extensions" rel="up" title="C Extensions">
<link href="Labels-as-Values.html#Labels-as-Values" rel="next" title="Labels as Values">
<link href="Statement-Exprs.html#Statement-Exprs" rel="prev" title="Statement Exprs">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="Labels-as-Values.html#Labels-as-Values" accesskey="n" rel="next">Labels as Values</a>, Previous: <a href="Statement-Exprs.html#Statement-Exprs" accesskey="p" rel="prev">Statement Exprs</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
a54 5
<hr>
<a name="Locally-Declared-Labels"></a>
<h3 class="section">6.2 Locally Declared Labels</h3>
<a name="index-local-labels"></a>
<a name="index-macros_002c-local-labels"></a>
d56 4
a59 1
<p>GCC allows you to declare <em>local labels</em> in any nested block
a62 12
</p>
<p>A local label declaration looks like this:
</p>
<div class="smallexample">
<pre class="smallexample">__label__ <var>label</var>;
</pre></div>

<p>or
</p>
<div class="smallexample">
<pre class="smallexample">__label__ <var>label1</var>, <var>label2</var>, /* <span class="roman">&hellip;</span> */;
</pre></div>
d64 9
a72 1
<p>Local label declarations must come at the beginning of the block,
d74 2
a75 2
</p>
<p>The label declaration defines the label <em>name</em>, but does not define
d77 3
a79 3
<code><var>label</var>:</code>, within the statements of the statement expression.
</p>
<p>The local label feature is useful for complex macros.  If a macro
a84 37
</p>
<div class="smallexample">
<pre class="smallexample">#define SEARCH(value, array, target)              \
do {                                              \
  __label__ found;                                \
  typeof (target) _SEARCH_target = (target);      \
  typeof (*(array)) *_SEARCH_array = (array);     \
  int i, j;                                       \
  int value;                                      \
  for (i = 0; i &lt; max; i++)                       \
    for (j = 0; j &lt; max; j++)                     \
      if (_SEARCH_array[i][j] == _SEARCH_target)  \
        { (value) = i; goto found; }              \
  (value) = -1;                                   \
 found:;                                          \
} while (0)
</pre></div>

<p>This could also be written using a statement-expression:
</p>
<div class="smallexample">
<pre class="smallexample">#define SEARCH(array, target)                     \
({                                                \
  __label__ found;                                \
  typeof (target) _SEARCH_target = (target);      \
  typeof (*(array)) *_SEARCH_array = (array);     \
  int i, j;                                       \
  int value;                                      \
  for (i = 0; i &lt; max; i++)                       \
    for (j = 0; j &lt; max; j++)                     \
      if (_SEARCH_array[i][j] == _SEARCH_target)  \
        { value = i; goto found; }                \
  value = -1;                                     \
 found:                                           \
  value;                                          \
})
</pre></div>
d86 34
a119 1
<p>Local label declarations also make the labels they declare visible to
a120 7
</p>
<hr>
<div class="header">
<p>
Next: <a href="Labels-as-Values.html#Labels-as-Values" accesskey="n" rel="next">Labels as Values</a>, Previous: <a href="Statement-Exprs.html#Statement-Exprs" accesskey="p" rel="prev">Statement Exprs</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>

d122 1
a123 2
</body>
</html>
@

