head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.17;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.17;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.23;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Compound Literals - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="C-Extensions.html#C-Extensions" title="C Extensions">
<link rel="prev" href="Initializers.html#Initializers" title="Initializers">
<link rel="next" href="Designated-Inits.html#Designated-Inits" title="Designated Inits">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Compound-Literals"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Designated-Inits.html#Designated-Inits">Designated Inits</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Initializers.html#Initializers">Initializers</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="C-Extensions.html#C-Extensions">C Extensions</a>
<hr>
</div>

<h3 class="section">5.19 Compound Literals</h3>

<p><a name="index-constructor-expressions-1746"></a><a name="index-initializations-in-expressions-1747"></a><a name="index-structures_002c-constructor-expression-1748"></a><a name="index-expressions_002c-constructor-1749"></a><a name="index-compound-literals-1750"></a><!-- The GNU C name for what C99 calls compound literals was "constructor expressions". -->

 <p>ISO C99 supports compound literals.  A compound literal looks like
a cast containing an initializer.  Its value is an object of the
type specified in the cast, containing the elements specified in
the initializer; it is an lvalue.  As an extension, GCC supports
compound literals in C89 mode and in C++.

 <p>Usually, the specified type is a structure.  Assume that
<code>struct foo</code> and <code>structure</code> are declared as shown:

<pre class="smallexample">     struct foo {int a; char b[2];} structure;
</pre>
 <p class="noindent">Here is an example of constructing a <code>struct foo</code> with a compound literal:

<pre class="smallexample">     structure = ((struct foo) {x + y, 'a', 0});
</pre>
 <p class="noindent">This is equivalent to writing the following:

<pre class="smallexample">     {
       struct foo temp = {x + y, 'a', 0};
       structure = temp;
     }
</pre>
 <p>You can also construct an array.  If all the elements of the compound literal
are (made up of) simple constant expressions, suitable for use in
initializers of objects of static storage duration, then the compound
literal can be coerced to a pointer to its first element and used in
such an initializer, as shown here:

<pre class="smallexample">     char **foo = (char *[]) { "x", "y", "z" };
</pre>
 <p>Compound literals for scalar types and union types are is
also allowed, but then the compound literal is equivalent
to a cast.

 <p>As a GNU extension, GCC allows initialization of objects with static storage
duration by compound literals (which is not possible in ISO C99, because
the initializer is not a constant). 
It is handled as if the object was initialized only with the bracket
enclosed list if the types of the compound literal and the object match. 
The initializer list of the compound literal must be constant. 
If the object being initialized has array type of unknown size, the size is
determined by compound literal size.

<pre class="smallexample">     static struct foo x = (struct foo) {1, 'a', 'b'};
     static int y[] = (int []) {1, 2, 3};
     static int z[] = (int [3]) {1};
</pre>
 <p class="noindent">The above lines are equivalent to the following:
<pre class="smallexample">     static struct foo x = {1, 'a', 'b'};
     static int y[] = {1, 2, 3};
     static int z[] = {1, 0, 0};
</pre>
 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Compound Literals</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Compound Literals">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Compound Literals">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="C-Extensions.html#C-Extensions" rel="up" title="C Extensions">
<link href="Designated-Inits.html#Designated-Inits" rel="next" title="Designated Inits">
<link href="Initializers.html#Initializers" rel="prev" title="Initializers">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="Designated-Inits.html#Designated-Inits" accesskey="n" rel="next">Designated Inits</a>, Previous: <a href="Initializers.html#Initializers" accesskey="p" rel="prev">Initializers</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
a54 8
<hr>
<a name="Compound-Literals-1"></a>
<h3 class="section">6.25 Compound Literals</h3>
<a name="index-constructor-expressions"></a>
<a name="index-initializations-in-expressions"></a>
<a name="index-structures_002c-constructor-expression"></a>
<a name="index-expressions_002c-constructor"></a>
<a name="index-compound-literals"></a>
d56 5
a60 1
<p>ISO C99 supports compound literals.  A compound literal looks like
d64 3
a66 4
compound literals in C90 mode and in C++, though the semantics are
somewhat different in C++.
</p>
<p>Usually, the specified type is a structure.  Assume that
d68 16
a83 23
</p>
<div class="smallexample">
<pre class="smallexample">struct foo {int a; char b[2];} structure;
</pre></div>

<p>Here is an example of constructing a <code>struct foo</code> with a compound literal:
</p>
<div class="smallexample">
<pre class="smallexample">structure = ((struct foo) {x + y, 'a', 0});
</pre></div>

<p>This is equivalent to writing the following:
</p>
<div class="smallexample">
<pre class="smallexample">{
  struct foo temp = {x + y, 'a', 0};
  structure = temp;
}
</pre></div>

<p>You can also construct an array, though this is dangerous in C++, as
explained below.  If all the elements of the compound literal are
(made up of) simple constant expressions, suitable for use in
a86 4
</p>
<div class="smallexample">
<pre class="smallexample">char **foo = (char *[]) { &quot;x&quot;, &quot;y&quot;, &quot;z&quot; };
</pre></div>
d88 3
a90 1
<p>Compound literals for scalar types and union types are
d93 2
a94 2
</p>
<p>As a GNU extension, GCC allows initialization of objects with static storage
d96 1
a96 1
the initializer is not a constant).
d98 2
a99 2
enclosed list if the types of the compound literal and the object match.
The initializer list of the compound literal must be constant.
a101 39
</p>
<div class="smallexample">
<pre class="smallexample">static struct foo x = (struct foo) {1, 'a', 'b'};
static int y[] = (int []) {1, 2, 3};
static int z[] = (int [3]) {1};
</pre></div>

<p>The above lines are equivalent to the following:
</p><div class="smallexample">
<pre class="smallexample">static struct foo x = {1, 'a', 'b'};
static int y[] = {1, 2, 3};
static int z[] = {1, 0, 0};
</pre></div>

<p>In C, a compound literal designates an unnamed object with static or
automatic storage duration.  In C++, a compound literal designates a
temporary object, which only lives until the end of its
full-expression.  As a result, well-defined C code that takes the
address of a subobject of a compound literal can be undefined in C++.
For instance, if the array compound literal example above appeared
inside a function, any subsequent use of &lsquo;<samp>foo</samp>&rsquo; in C++ has
undefined behavior because the lifetime of the array ends after the
declaration of &lsquo;<samp>foo</samp>&rsquo;.  As a result, the C++ compiler now rejects
the conversion of a temporary array to a pointer.
</p>
<p>As an optimization, the C++ compiler sometimes gives array compound
literals longer lifetimes: when the array either appears outside a
function or has const-qualified type.  If &lsquo;<samp>foo</samp>&rsquo; and its
initializer had elements of &lsquo;<samp>char *const</samp>&rsquo; type rather than
&lsquo;<samp>char *</samp>&rsquo;, or if &lsquo;<samp>foo</samp>&rsquo; were a global variable, the array
would have static storage duration.  But it is probably safest just to
avoid the use of array compound literals in code compiled as C++.
</p>
<hr>
<div class="header">
<p>
Next: <a href="Designated-Inits.html#Designated-Inits" accesskey="n" rel="next">Designated Inits</a>, Previous: <a href="Initializers.html#Initializers" accesskey="p" rel="prev">Initializers</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>

d103 10
a113 2
</body>
</html>
@

