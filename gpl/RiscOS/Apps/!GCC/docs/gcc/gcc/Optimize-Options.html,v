head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.18;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.18;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.25;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Optimize Options - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Invoking-GCC.html#Invoking-GCC" title="Invoking GCC">
<link rel="prev" href="Debugging-Options.html#Debugging-Options" title="Debugging Options">
<link rel="next" href="Preprocessor-Options.html#Preprocessor-Options" title="Preprocessor Options">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Optimize-Options"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Preprocessor-Options.html#Preprocessor-Options">Preprocessor Options</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Debugging-Options.html#Debugging-Options">Debugging Options</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Invoking-GCC.html#Invoking-GCC">Invoking GCC</a>
<hr>
</div>

<h3 class="section">3.10 Options That Control Optimization</h3>

<p><a name="index-optimize-options-464"></a><a name="index-options_002c-optimization-465"></a>
These options control various sorts of optimizations.

 <p>Without any optimization option, the compiler's goal is to reduce the
cost of compilation and to make debugging produce the expected
results.  Statements are independent: if you stop the program with a
breakpoint between statements, you can then assign a new value to any
variable or change the program counter to any other statement in the
function and get exactly the results you would expect from the source
code.

 <p>Turning on optimization flags makes the compiler attempt to improve
the performance and/or code size at the expense of compilation time
and possibly the ability to debug the program.

 <p>The compiler performs optimization based on the knowledge it has of
the program.  Optimization levels <samp><span class="option">-O</span></samp> and above, in
particular, enable <em>unit-at-a-time</em> mode, which allows the
compiler to consider information gained from later functions in
the file when compiling a function.  Compiling multiple files at
once to a single output file in <em>unit-at-a-time</em> mode allows
the compiler to use information gained from all of the files when
compiling each of them.

 <p>Not all optimizations are controlled directly by a flag.  Only
optimizations that have a flag are listed.

     <dl>
<dt><code>-O</code><dt><code>-O1</code><dd><a name="index-O-466"></a><a name="index-O1-467"></a>Optimize.  Optimizing compilation takes somewhat more time, and a lot
more memory for a large function.

     <p>With <samp><span class="option">-O</span></samp>, the compiler tries to reduce code size and execution
time, without performing any optimizations that take a great deal of
compilation time.

     <p><samp><span class="option">-O</span></samp> turns on the following optimization flags:
     <pre class="smallexample">          -fdefer-pop 
          -fdelayed-branch 
          -fguess-branch-probability 
          -fcprop-registers 
          -floop-optimize 
          -fif-conversion 
          -fif-conversion2 
          -ftree-ccp 
          -ftree-dce 
          -ftree-dominator-opts 
          -ftree-dse 
          -ftree-ter 
          -ftree-lrs 
          -ftree-sra 
          -ftree-copyrename 
          -ftree-fre 
          -ftree-ch 
          -funit-at-a-time 
          -fmerge-constants
</pre>
     <p><samp><span class="option">-O</span></samp> also turns on <samp><span class="option">-fomit-frame-pointer</span></samp> on machines
where doing so does not interfere with debugging.

     <p><samp><span class="option">-O</span></samp> doesn't turn on <samp><span class="option">-ftree-sra</span></samp> for the Ada compiler. 
This option must be explicitly specified on the command line to be
enabled for the Ada compiler.

     <br><dt><code>-O2</code><dd><a name="index-O2-468"></a>Optimize even more.  GCC performs nearly all supported optimizations
that do not involve a space-speed tradeoff.  The compiler does not
perform loop unrolling or function inlining when you specify <samp><span class="option">-O2</span></samp>. 
As compared to <samp><span class="option">-O</span></samp>, this option increases both compilation time
and the performance of the generated code.

     <p><samp><span class="option">-O2</span></samp> turns on all optimization flags specified by <samp><span class="option">-O</span></samp>.  It
also turns on the following optimization flags:
     <pre class="smallexample">          -fthread-jumps 
          -fcrossjumping 
          -foptimize-sibling-calls 
          -fcse-follow-jumps  -fcse-skip-blocks 
          -fgcse  -fgcse-lm  
          -fexpensive-optimizations 
          -fstrength-reduce 
          -frerun-cse-after-loop  -frerun-loop-opt 
          -fcaller-saves 
          -fpeephole2 
          -fschedule-insns  -fschedule-insns2 
          -fsched-interblock  -fsched-spec 
          -fregmove 
          -fstrict-aliasing 
          -fdelete-null-pointer-checks 
          -freorder-blocks  -freorder-functions 
          -falign-functions  -falign-jumps 
          -falign-loops  -falign-labels 
          -ftree-vrp 
          -ftree-pre
</pre>
     <p>Please note the warning under <samp><span class="option">-fgcse</span></samp> about
invoking <samp><span class="option">-O2</span></samp> on programs that use computed gotos.

     <br><dt><code>-O3</code><dd><a name="index-O3-469"></a>Optimize yet more.  <samp><span class="option">-O3</span></samp> turns on all optimizations specified by
<samp><span class="option">-O2</span></samp> and also turns on the <samp><span class="option">-finline-functions</span></samp>,
<samp><span class="option">-funswitch-loops</span></samp> and <samp><span class="option">-fgcse-after-reload</span></samp> options.

     <br><dt><code>-O0</code><dd><a name="index-O0-470"></a>Do not optimize.  This is the default.

     <br><dt><code>-Os</code><dd><a name="index-Os-471"></a>Optimize for size.  <samp><span class="option">-Os</span></samp> enables all <samp><span class="option">-O2</span></samp> optimizations that
do not typically increase code size.  It also performs further
optimizations designed to reduce code size.

     <p><samp><span class="option">-Os</span></samp> disables the following optimization flags:
     <pre class="smallexample">          -falign-functions  -falign-jumps  -falign-loops 
          -falign-labels  -freorder-blocks  -freorder-blocks-and-partition 
          -fprefetch-loop-arrays  -ftree-vect-loop-version
</pre>
     <p>If you use multiple <samp><span class="option">-O</span></samp> options, with or without level numbers,
the last such option is the one that is effective. 
</dl>

 <p>Options of the form <samp><span class="option">-f</span><var>flag</var></samp> specify machine-independent
flags.  Most flags have both positive and negative forms; the negative
form of <samp><span class="option">-ffoo</span></samp> would be <samp><span class="option">-fno-foo</span></samp>.  In the table
below, only one of the forms is listed&mdash;the one you typically will
use.  You can figure out the other form by either removing &lsquo;<samp><span class="samp">no-</span></samp>&rsquo;
or adding it.

 <p>The following options control specific optimizations.  They are either
activated by <samp><span class="option">-O</span></samp> options or are related to ones that are.  You
can use the following flags in the rare cases when &ldquo;fine-tuning&rdquo; of
optimizations to be performed is desired.

     <dl>
<dt><code>-fno-default-inline</code><dd><a name="index-fno_002ddefault_002dinline-472"></a>Do not make member functions inline by default merely because they are
defined inside the class scope (C++ only).  Otherwise, when you specify
<samp><span class="option">-O</span></samp><!-- /@@w -->, member functions defined inside class scope are compiled
inline by default; i.e., you don't need to add &lsquo;<samp><span class="samp">inline</span></samp>&rsquo; in front of
the member function name.

     <br><dt><code>-fno-defer-pop</code><dd><a name="index-fno_002ddefer_002dpop-473"></a>Always pop the arguments to each function call as soon as that function
returns.  For machines which must pop arguments after a function call,
the compiler normally lets arguments accumulate on the stack for several
function calls and pops them all at once.

     <p>Disabled at levels <samp><span class="option">-O</span></samp>, <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fforce-mem</code><dd><a name="index-fforce_002dmem-474"></a>Force memory operands to be copied into registers before doing
arithmetic on them.  This produces better code by making all memory
references potential common subexpressions.  When they are not common
subexpressions, instruction combination should eliminate the separate
register-load. This option is now a nop and will be removed in 4.2.

     <br><dt><code>-fforce-addr</code><dd><a name="index-fforce_002daddr-475"></a>Force memory address constants to be copied into registers before
doing arithmetic on them.

     <br><dt><code>-fomit-frame-pointer</code><dd><a name="index-fomit_002dframe_002dpointer-476"></a>Don't keep the frame pointer in a register for functions that
don't need one.  This avoids the instructions to save, set up and
restore frame pointers; it also makes an extra register available
in many functions.  <strong>It also makes debugging impossible on
some machines.</strong>

     <p>On some machines, such as the VAX, this flag has no effect, because
the standard calling sequence automatically handles the frame pointer
and nothing is saved by pretending it doesn't exist.  The
machine-description macro <code>FRAME_POINTER_REQUIRED</code> controls
whether a target machine supports this flag.  See <a href="../gccint/Registers.html#Registers">Register Usage</a>.

     <p>Enabled at levels <samp><span class="option">-O</span></samp>, <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-foptimize-sibling-calls</code><dd><a name="index-foptimize_002dsibling_002dcalls-477"></a>Optimize sibling and tail recursive calls.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fno-inline</code><dd><a name="index-fno_002dinline-478"></a>Don't pay attention to the <code>inline</code> keyword.  Normally this option
is used to keep the compiler from expanding any functions inline. 
Note that if you are not optimizing, no functions can be expanded inline.

     <br><dt><code>-finline-functions</code><dd><a name="index-finline_002dfunctions-479"></a>Integrate all simple functions into their callers.  The compiler
heuristically decides which functions are simple enough to be worth
integrating in this way.

     <p>If all calls to a given function are integrated, and the function is
declared <code>static</code>, then the function is normally not output as
assembler code in its own right.

     <p>Enabled at level <samp><span class="option">-O3</span></samp>.

     <br><dt><code>-finline-functions-called-once</code><dd><a name="index-finline_002dfunctions_002dcalled_002donce-480"></a>Consider all <code>static</code> functions called once for inlining into their
caller even if they are not marked <code>inline</code>.  If a call to a given
function is integrated, then the function is not output as assembler code
in its own right.

     <p>Enabled if <samp><span class="option">-funit-at-a-time</span></samp> is enabled.

     <br><dt><code>-fearly-inlining</code><dd><a name="index-fearly_002dinlining-481"></a>Inline functions marked by <code>always_inline</code> and functions whose body seems
smaller than the function call overhead early before doing
<samp><span class="option">-fprofile-generate</span></samp> instrumentation and real inlining pass.  Doing so
makes profiling significantly cheaper and usually inlining faster on programs
having large chains of nested wrapper functions.

     <p>Enabled by default.

     <br><dt><code>-finline-limit=</code><var>n</var><dd><a name="index-finline_002dlimit-482"></a>By default, GCC limits the size of functions that can be inlined.  This flag
allows the control of this limit for functions that are explicitly marked as
inline (i.e., marked with the inline keyword or defined within the class
definition in c++).  <var>n</var> is the size of functions that can be inlined in
number of pseudo instructions (not counting parameter handling).  The default
value of <var>n</var> is 600. 
Increasing this value can result in more inlined code at
the cost of compilation time and memory consumption.  Decreasing usually makes
the compilation faster and less code will be inlined (which presumably
means slower programs).  This option is particularly useful for programs that
use inlining heavily such as those based on recursive templates with C++.

     <p>Inlining is actually controlled by a number of parameters, which may be
specified individually by using <samp><span class="option">--param </span><var>name</var><span class="option">=</span><var>value</var></samp>. 
The <samp><span class="option">-finline-limit=</span><var>n</var></samp> option sets some of these parameters
as follows:

          <dl>
<dt><code>max-inline-insns-single</code><dd> is set to <var>n</var>/2. 
<br><dt><code>max-inline-insns-auto</code><dd> is set to <var>n</var>/2. 
<br><dt><code>min-inline-insns</code><dd> is set to 130 or <var>n</var>/4, whichever is smaller. 
<br><dt><code>max-inline-insns-rtl</code><dd> is set to <var>n</var>. 
</dl>

     <p>See below for a documentation of the individual
parameters controlling inlining.

     <p><em>Note:</em> pseudo instruction represents, in this particular context, an
abstract measurement of function's size.  In no way does it represent a count
of assembly instructions and as such its exact meaning might change from one
release to an another.

     <br><dt><code>-fkeep-inline-functions</code><dd><a name="index-fkeep_002dinline_002dfunctions-483"></a>In C, emit <code>static</code> functions that are declared <code>inline</code>
into the object file, even if the function has been inlined into all
of its callers.  This switch does not affect functions using the
<code>extern inline</code> extension in GNU C.  In C++, emit any and all
inline functions into the object file.

     <br><dt><code>-fkeep-static-consts</code><dd><a name="index-fkeep_002dstatic_002dconsts-484"></a>Emit variables declared <code>static const</code> when optimization isn't turned
on, even if the variables aren't referenced.

     <p>GCC enables this option by default.  If you want to force the compiler to
check if the variable was referenced, regardless of whether or not
optimization is turned on, use the <samp><span class="option">-fno-keep-static-consts</span></samp> option.

     <br><dt><code>-fmerge-constants</code><dd>Attempt to merge identical constants (string constants and floating point
constants) across compilation units.

     <p>This option is the default for optimized compilation if the assembler and
linker support it.  Use <samp><span class="option">-fno-merge-constants</span></samp> to inhibit this
behavior.

     <p>Enabled at levels <samp><span class="option">-O</span></samp>, <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fmerge-all-constants</code><dd>Attempt to merge identical constants and identical variables.

     <p>This option implies <samp><span class="option">-fmerge-constants</span></samp>.  In addition to
<samp><span class="option">-fmerge-constants</span></samp> this considers e.g. even constant initialized
arrays or initialized constant variables with integral or floating point
types.  Languages like C or C++ require each non-automatic variable to
have distinct location, so using this option will result in non-conforming
behavior.

     <br><dt><code>-fmodulo-sched</code><dd><a name="index-fmodulo_002dsched-485"></a>Perform swing modulo scheduling immediately before the first scheduling
pass.  This pass looks at innermost loops and reorders their
instructions by overlapping different iterations.

     <br><dt><code>-fno-branch-count-reg</code><dd><a name="index-fno_002dbranch_002dcount_002dreg-486"></a>Do not use &ldquo;decrement and branch&rdquo; instructions on a count register,
but instead generate a sequence of instructions that decrement a
register, compare it against zero, then branch based upon the result. 
This option is only meaningful on architectures that support such
instructions, which include x86, PowerPC, IA-64 and S/390.

     <p>The default is <samp><span class="option">-fbranch-count-reg</span></samp>, enabled when
<samp><span class="option">-fstrength-reduce</span></samp> is enabled.

     <br><dt><code>-fno-function-cse</code><dd><a name="index-fno_002dfunction_002dcse-487"></a>Do not put function addresses in registers; make each instruction that
calls a constant function contain the function's address explicitly.

     <p>This option results in less efficient code, but some strange hacks
that alter the assembler output may be confused by the optimizations
performed when this option is not used.

     <p>The default is <samp><span class="option">-ffunction-cse</span></samp>

     <br><dt><code>-fno-zero-initialized-in-bss</code><dd><a name="index-fno_002dzero_002dinitialized_002din_002dbss-488"></a>If the target supports a BSS section, GCC by default puts variables that
are initialized to zero into BSS.  This can save space in the resulting
code.

     <p>This option turns off this behavior because some programs explicitly
rely on variables going to the data section.  E.g., so that the
resulting executable can find the beginning of that section and/or make
assumptions based on that.

     <p>The default is <samp><span class="option">-fzero-initialized-in-bss</span></samp>.

     <br><dt><code>-fbounds-check</code><dd><a name="index-fbounds_002dcheck-489"></a>For front-ends that support it, generate additional code to check that
indices used to access arrays are within the declared range.  This is
currently only supported by the Java and Fortran front-ends, where
this option defaults to true and false respectively.

     <br><dt><code>-fmudflap -fmudflapth -fmudflapir</code><dd><a name="index-fmudflap-490"></a><a name="index-fmudflapth-491"></a><a name="index-fmudflapir-492"></a><a name="index-bounds-checking-493"></a><a name="index-mudflap-494"></a>For front-ends that support it (C and C++), instrument all risky
pointer/array dereferencing operations, some standard library
string/heap functions, and some other associated constructs with
range/validity tests.  Modules so instrumented should be immune to
buffer overflows, invalid heap use, and some other classes of C/C++
programming errors.  The instrumentation relies on a separate runtime
library (<samp><span class="file">libmudflap</span></samp>), which will be linked into a program if
<samp><span class="option">-fmudflap</span></samp> is given at link time.  Run-time behavior of the
instrumented program is controlled by the <samp><span class="env">MUDFLAP_OPTIONS</span></samp>
environment variable.  See <code>env MUDFLAP_OPTIONS=-help a.out</code>
for its options.

     <p>Use <samp><span class="option">-fmudflapth</span></samp> instead of <samp><span class="option">-fmudflap</span></samp> to compile and to
link if your program is multi-threaded.  Use <samp><span class="option">-fmudflapir</span></samp>, in
addition to <samp><span class="option">-fmudflap</span></samp> or <samp><span class="option">-fmudflapth</span></samp>, if
instrumentation should ignore pointer reads.  This produces less
instrumentation (and therefore faster execution) and still provides
some protection against outright memory corrupting writes, but allows
erroneously read data to propagate within a program.

     <br><dt><code>-fstrength-reduce</code><dd><a name="index-fstrength_002dreduce-495"></a>Perform the optimizations of loop strength reduction and
elimination of iteration variables.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fthread-jumps</code><dd><a name="index-fthread_002djumps-496"></a>Perform optimizations where we check to see if a jump branches to a
location where another comparison subsumed by the first is found.  If
so, the first branch is redirected to either the destination of the
second branch or a point immediately following it, depending on whether
the condition is known to be true or false.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fcse-follow-jumps</code><dd><a name="index-fcse_002dfollow_002djumps-497"></a>In common subexpression elimination, scan through jump instructions
when the target of the jump is not reached by any other path.  For
example, when CSE encounters an <code>if</code> statement with an
<code>else</code> clause, CSE will follow the jump when the condition
tested is false.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fcse-skip-blocks</code><dd><a name="index-fcse_002dskip_002dblocks-498"></a>This is similar to <samp><span class="option">-fcse-follow-jumps</span></samp>, but causes CSE to
follow jumps which conditionally skip over blocks.  When CSE
encounters a simple <code>if</code> statement with no else clause,
<samp><span class="option">-fcse-skip-blocks</span></samp> causes CSE to follow the jump around the
body of the <code>if</code>.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-frerun-cse-after-loop</code><dd><a name="index-frerun_002dcse_002dafter_002dloop-499"></a>Re-run common subexpression elimination after loop optimizations has been
performed.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-frerun-loop-opt</code><dd><a name="index-frerun_002dloop_002dopt-500"></a>Run the loop optimizer twice.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fgcse</code><dd><a name="index-fgcse-501"></a>Perform a global common subexpression elimination pass. 
This pass also performs global constant and copy propagation.

     <p><em>Note:</em> When compiling a program using computed gotos, a GCC
extension, you may get better runtime performance if you disable
the global common subexpression elimination pass by adding
<samp><span class="option">-fno-gcse</span></samp> to the command line.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fgcse-lm</code><dd><a name="index-fgcse_002dlm-502"></a>When <samp><span class="option">-fgcse-lm</span></samp> is enabled, global common subexpression elimination will
attempt to move loads which are only killed by stores into themselves.  This
allows a loop containing a load/store sequence to be changed to a load outside
the loop, and a copy/store within the loop.

     <p>Enabled by default when gcse is enabled.

     <br><dt><code>-fgcse-sm</code><dd><a name="index-fgcse_002dsm-503"></a>When <samp><span class="option">-fgcse-sm</span></samp> is enabled, a store motion pass is run after
global common subexpression elimination.  This pass will attempt to move
stores out of loops.  When used in conjunction with <samp><span class="option">-fgcse-lm</span></samp>,
loops containing a load/store sequence can be changed to a load before
the loop and a store after the loop.

     <p>Not enabled at any optimization level.

     <br><dt><code>-fgcse-las</code><dd><a name="index-fgcse_002dlas-504"></a>When <samp><span class="option">-fgcse-las</span></samp> is enabled, the global common subexpression
elimination pass eliminates redundant loads that come after stores to the
same memory location (both partial and full redundancies).

     <p>Not enabled at any optimization level.

     <br><dt><code>-fgcse-after-reload</code><dd><a name="index-fgcse_002dafter_002dreload-505"></a>When <samp><span class="option">-fgcse-after-reload</span></samp> is enabled, a redundant load elimination
pass is performed after reload.  The purpose of this pass is to cleanup
redundant spilling.

     <br><dt><code>-floop-optimize</code><dd><a name="index-floop_002doptimize-506"></a>Perform loop optimizations: move constant expressions out of loops, simplify
exit test conditions and optionally do strength-reduction as well.

     <p>Enabled at levels <samp><span class="option">-O</span></samp>, <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-floop-optimize2</code><dd><a name="index-floop_002doptimize2-507"></a>Perform loop optimizations using the new loop optimizer.  The optimizations
(loop unrolling, peeling and unswitching, loop invariant motion) are enabled
by separate flags.

     <br><dt><code>-funsafe-loop-optimizations</code><dd><a name="index-funsafe_002dloop_002doptimizations-508"></a>If given, the loop optimizer will assume that loop indices do not
overflow, and that the loops with nontrivial exit condition are not
infinite.  This enables a wider range of loop optimizations even if
the loop optimizer itself cannot prove that these assumptions are valid. 
Using <samp><span class="option">-Wunsafe-loop-optimizations</span></samp>, the compiler will warn you
if it finds this kind of loop.

     <br><dt><code>-fcrossjumping</code><dd><a name="index-crossjumping-509"></a>Perform cross-jumping transformation.  This transformation unifies equivalent code and save code size.  The
resulting code may or may not perform better than without cross-jumping.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fif-conversion</code><dd><a name="index-if_002dconversion-510"></a>Attempt to transform conditional jumps into branch-less equivalents.  This
include use of conditional moves, min, max, set flags and abs instructions, and
some tricks doable by standard arithmetics.  The use of conditional execution
on chips where it is available is controlled by <code>if-conversion2</code>.

     <p>Enabled at levels <samp><span class="option">-O</span></samp>, <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fif-conversion2</code><dd><a name="index-if_002dconversion2-511"></a>Use conditional execution (where available) to transform conditional jumps into
branch-less equivalents.

     <p>Enabled at levels <samp><span class="option">-O</span></samp>, <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fdelete-null-pointer-checks</code><dd><a name="index-fdelete_002dnull_002dpointer_002dchecks-512"></a>Use global dataflow analysis to identify and eliminate useless checks
for null pointers.  The compiler assumes that dereferencing a null
pointer would have halted the program.  If a pointer is checked after
it has already been dereferenced, it cannot be null.

     <p>In some environments, this assumption is not true, and programs can
safely dereference null pointers.  Use
<samp><span class="option">-fno-delete-null-pointer-checks</span></samp> to disable this optimization
for programs which depend on that behavior.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fexpensive-optimizations</code><dd><a name="index-fexpensive_002doptimizations-513"></a>Perform a number of minor optimizations that are relatively expensive.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-foptimize-register-move</code><dt><code>-fregmove</code><dd><a name="index-foptimize_002dregister_002dmove-514"></a><a name="index-fregmove-515"></a>Attempt to reassign register numbers in move instructions and as
operands of other simple instructions in order to maximize the amount of
register tying.  This is especially helpful on machines with two-operand
instructions.

     <p>Note <samp><span class="option">-fregmove</span></samp> and <samp><span class="option">-foptimize-register-move</span></samp> are the same
optimization.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fdelayed-branch</code><dd><a name="index-fdelayed_002dbranch-516"></a>If supported for the target machine, attempt to reorder instructions
to exploit instruction slots available after delayed branch
instructions.

     <p>Enabled at levels <samp><span class="option">-O</span></samp>, <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fschedule-insns</code><dd><a name="index-fschedule_002dinsns-517"></a>If supported for the target machine, attempt to reorder instructions to
eliminate execution stalls due to required data being unavailable.  This
helps machines that have slow floating point or memory load instructions
by allowing other instructions to be issued until the result of the load
or floating point instruction is required.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fschedule-insns2</code><dd><a name="index-fschedule_002dinsns2-518"></a>Similar to <samp><span class="option">-fschedule-insns</span></samp>, but requests an additional pass of
instruction scheduling after register allocation has been done.  This is
especially useful on machines with a relatively small number of
registers and where memory load instructions take more than one cycle.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fno-sched-interblock</code><dd><a name="index-fno_002dsched_002dinterblock-519"></a>Don't schedule instructions across basic blocks.  This is normally
enabled by default when scheduling before register allocation, i.e. 
with <samp><span class="option">-fschedule-insns</span></samp> or at <samp><span class="option">-O2</span></samp> or higher.

     <br><dt><code>-fno-sched-spec</code><dd><a name="index-fno_002dsched_002dspec-520"></a>Don't allow speculative motion of non-load instructions.  This is normally
enabled by default when scheduling before register allocation, i.e. 
with <samp><span class="option">-fschedule-insns</span></samp> or at <samp><span class="option">-O2</span></samp> or higher.

     <br><dt><code>-fsched-spec-load</code><dd><a name="index-fsched_002dspec_002dload-521"></a>Allow speculative motion of some load instructions.  This only makes
sense when scheduling before register allocation, i.e. with
<samp><span class="option">-fschedule-insns</span></samp> or at <samp><span class="option">-O2</span></samp> or higher.

     <br><dt><code>-fsched-spec-load-dangerous</code><dd><a name="index-fsched_002dspec_002dload_002ddangerous-522"></a>Allow speculative motion of more load instructions.  This only makes
sense when scheduling before register allocation, i.e. with
<samp><span class="option">-fschedule-insns</span></samp> or at <samp><span class="option">-O2</span></samp> or higher.

     <br><dt><code>-fsched-stalled-insns=</code><var>n</var><dd><a name="index-fsched_002dstalled_002dinsns-523"></a>Define how many insns (if any) can be moved prematurely from the queue
of stalled insns into the ready list, during the second scheduling pass.

     <br><dt><code>-fsched-stalled-insns-dep=</code><var>n</var><dd><a name="index-fsched_002dstalled_002dinsns_002ddep-524"></a>Define how many insn groups (cycles) will be examined for a dependency
on a stalled insn that is candidate for premature removal from the queue
of stalled insns.  Has an effect only during the second scheduling pass,
and only if <samp><span class="option">-fsched-stalled-insns</span></samp> is used and its value is not zero.

     <br><dt><code>-fsched2-use-superblocks</code><dd><a name="index-fsched2_002duse_002dsuperblocks-525"></a>When scheduling after register allocation, do use superblock scheduling
algorithm.  Superblock scheduling allows motion across basic block boundaries
resulting on faster schedules.  This option is experimental, as not all machine
descriptions used by GCC model the CPU closely enough to avoid unreliable
results from the algorithm.

     <p>This only makes sense when scheduling after register allocation, i.e. with
<samp><span class="option">-fschedule-insns2</span></samp> or at <samp><span class="option">-O2</span></samp> or higher.

     <br><dt><code>-fsched2-use-traces</code><dd><a name="index-fsched2_002duse_002dtraces-526"></a>Use <samp><span class="option">-fsched2-use-superblocks</span></samp> algorithm when scheduling after register
allocation and additionally perform code duplication in order to increase the
size of superblocks using tracer pass.  See <samp><span class="option">-ftracer</span></samp> for details on
trace formation.

     <p>This mode should produce faster but significantly longer programs.  Also
without <samp><span class="option">-fbranch-probabilities</span></samp> the traces constructed may not
match the reality and hurt the performance.  This only makes
sense when scheduling after register allocation, i.e. with
<samp><span class="option">-fschedule-insns2</span></samp> or at <samp><span class="option">-O2</span></samp> or higher.

     <br><dt><code>-freschedule-modulo-scheduled-loops</code><dd><a name="index-fscheduling_002din_002dmodulo_002dscheduled_002dloops-527"></a>The modulo scheduling comes before the traditional scheduling, if a loop was modulo scheduled
we may want to prevent the later scheduling passes from changing its schedule, we use this
option to control that.

     <br><dt><code>-fcaller-saves</code><dd><a name="index-fcaller_002dsaves-528"></a>Enable values to be allocated in registers that will be clobbered by
function calls, by emitting extra instructions to save and restore the
registers around such calls.  Such allocation is done only when it
seems to result in better code than would otherwise be produced.

     <p>This option is always enabled by default on certain machines, usually
those which have no call-preserved registers to use instead.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-ftree-pre</code><dd>Perform Partial Redundancy Elimination (PRE) on trees.  This flag is
enabled by default at <samp><span class="option">-O2</span></samp> and <samp><span class="option">-O3</span></samp>.

     <br><dt><code>-ftree-fre</code><dd>Perform Full Redundancy Elimination (FRE) on trees.  The difference
between FRE and PRE is that FRE only considers expressions
that are computed on all paths leading to the redundant computation. 
This analysis faster than PRE, though it exposes fewer redundancies. 
This flag is enabled by default at <samp><span class="option">-O</span></samp> and higher.

     <br><dt><code>-ftree-copy-prop</code><dd>Perform copy propagation on trees.  This pass eliminates unnecessary
copy operations.  This flag is enabled by default at <samp><span class="option">-O</span></samp> and
higher.

     <br><dt><code>-ftree-store-copy-prop</code><dd>Perform copy propagation of memory loads and stores.  This pass
eliminates unnecessary copy operations in memory references
(structures, global variables, arrays, etc).  This flag is enabled by
default at <samp><span class="option">-O2</span></samp> and higher.

     <br><dt><code>-ftree-salias</code><dd>Perform structural alias analysis on trees.  This flag
is enabled by default at <samp><span class="option">-O</span></samp> and higher.

     <br><dt><code>-ftree-sink</code><dd>Perform forward store motion  on trees.  This flag is
enabled by default at <samp><span class="option">-O</span></samp> and higher.

     <br><dt><code>-ftree-ccp</code><dd>Perform sparse conditional constant propagation (CCP) on trees.  This
pass only operates on local scalar variables and is enabled by default
at <samp><span class="option">-O</span></samp> and higher.

     <br><dt><code>-ftree-store-ccp</code><dd>Perform sparse conditional constant propagation (CCP) on trees.  This
pass operates on both local scalar variables and memory stores and
loads (global variables, structures, arrays, etc).  This flag is
enabled by default at <samp><span class="option">-O2</span></samp> and higher.

     <br><dt><code>-ftree-dce</code><dd>Perform dead code elimination (DCE) on trees.  This flag is enabled by
default at <samp><span class="option">-O</span></samp> and higher.

     <br><dt><code>-ftree-dominator-opts</code><dd>Perform a variety of simple scalar cleanups (constant/copy
propagation, redundancy elimination, range propagation and expression
simplification) based on a dominator tree traversal.  This also
performs jump threading (to reduce jumps to jumps). This flag is
enabled by default at <samp><span class="option">-O</span></samp> and higher.

     <br><dt><code>-ftree-ch</code><dd>Perform loop header copying on trees.  This is beneficial since it increases
effectiveness of code motion optimizations.  It also saves one jump.  This flag
is enabled by default at <samp><span class="option">-O</span></samp> and higher.  It is not enabled
for <samp><span class="option">-Os</span></samp>, since it usually increases code size.

     <br><dt><code>-ftree-loop-optimize</code><dd>Perform loop optimizations on trees.  This flag is enabled by default
at <samp><span class="option">-O</span></samp> and higher.

     <br><dt><code>-ftree-loop-linear</code><dd>Perform linear loop transformations on tree.  This flag can improve cache
performance and allow further loop optimizations to take place.

     <br><dt><code>-ftree-loop-im</code><dd>Perform loop invariant motion on trees.  This pass moves only invariants that
would be hard to handle at RTL level (function calls, operations that expand to
nontrivial sequences of insns).  With <samp><span class="option">-funswitch-loops</span></samp> it also moves
operands of conditions that are invariant out of the loop, so that we can use
just trivial invariantness analysis in loop unswitching.  The pass also includes
store motion.

     <br><dt><code>-ftree-loop-ivcanon</code><dd>Create a canonical counter for number of iterations in the loop for that
determining number of iterations requires complicated analysis.  Later
optimizations then may determine the number easily.  Useful especially
in connection with unrolling.

     <br><dt><code>-fivopts</code><dd>Perform induction variable optimizations (strength reduction, induction
variable merging and induction variable elimination) on trees.

     <br><dt><code>-ftree-sra</code><dd>Perform scalar replacement of aggregates.  This pass replaces structure
references with scalars to prevent committing structures to memory too
early.  This flag is enabled by default at <samp><span class="option">-O</span></samp> and higher.

     <br><dt><code>-ftree-copyrename</code><dd>Perform copy renaming on trees.  This pass attempts to rename compiler
temporaries to other variables at copy locations, usually resulting in
variable names which more closely resemble the original variables.  This flag
is enabled by default at <samp><span class="option">-O</span></samp> and higher.

     <br><dt><code>-ftree-ter</code><dd>Perform temporary expression replacement during the SSA-&gt;normal phase.  Single
use/single def temporaries are replaced at their use location with their
defining expression.  This results in non-GIMPLE code, but gives the expanders
much more complex trees to work on resulting in better RTL generation.  This is
enabled by default at <samp><span class="option">-O</span></samp> and higher.

     <br><dt><code>-ftree-lrs</code><dd>Perform live range splitting during the SSA-&gt;normal phase.  Distinct live
ranges of a variable are split into unique variables, allowing for better
optimization later.  This is enabled by default at <samp><span class="option">-O</span></samp> and higher.

     <br><dt><code>-ftree-vectorize</code><dd>Perform loop vectorization on trees.

     <br><dt><code>-ftree-vect-loop-version</code><dd><a name="index-ftree_002dvect_002dloop_002dversion-529"></a>Perform loop versioning when doing loop vectorization on trees.  When a loop
appears to be vectorizable except that data alignment or data dependence cannot
be determined at compile time then vectorized and non-vectorized versions of
the loop are generated along with runtime checks for alignment or dependence
to control which version is executed.  This option is enabled by default
except at level <samp><span class="option">-Os</span></samp> where it is disabled.

     <br><dt><code>-ftree-vrp</code><dd>Perform Value Range Propagation on trees.  This is similar to the
constant propagation pass, but instead of values, ranges of values are
propagated.  This allows the optimizers to remove unnecessary range
checks like array bound checks and null pointer checks.  This is
enabled by default at <samp><span class="option">-O2</span></samp> and higher.  Null pointer check
elimination is only done if <samp><span class="option">-fdelete-null-pointer-checks</span></samp> is
enabled.

     <br><dt><code>-ftracer</code><dd><a name="index-ftracer-530"></a>Perform tail duplication to enlarge superblock size.  This transformation
simplifies the control flow of the function allowing other optimizations to do
better job.

     <br><dt><code>-funroll-loops</code><dd><a name="index-funroll_002dloops-531"></a>Unroll loops whose number of iterations can be determined at compile
time or upon entry to the loop.  <samp><span class="option">-funroll-loops</span></samp> implies both
<samp><span class="option">-fstrength-reduce</span></samp> and <samp><span class="option">-frerun-cse-after-loop</span></samp>.  This
option makes code larger, and may or may not make it run faster.

     <br><dt><code>-funroll-all-loops</code><dd><a name="index-funroll_002dall_002dloops-532"></a>Unroll all loops, even if their number of iterations is uncertain when
the loop is entered.  This usually makes programs run more slowly. 
<samp><span class="option">-funroll-all-loops</span></samp> implies the same options as
<samp><span class="option">-funroll-loops</span></samp>,

     <br><dt><code>-fsplit-ivs-in-unroller</code><dd><a name="index-g_t_002dfsplit_002divs_002din_002dunroller-533"></a>Enables expressing of values of induction variables in later iterations
of the unrolled loop using the value in the first iteration.  This breaks
long dependency chains, thus improving efficiency of the scheduling passes.

     <p>Combination of <samp><span class="option">-fweb</span></samp> and CSE is often sufficient to obtain the
same effect.  However in cases the loop body is more complicated than
a single basic block, this is not reliable.  It also does not work at all
on some of the architectures due to restrictions in the CSE pass.

     <p>This optimization is enabled by default.

     <br><dt><code>-fvariable-expansion-in-unroller</code><dd><a name="index-g_t_002dfvariable_002dexpansion_002din_002dunroller-534"></a>With this option, the compiler will create multiple copies of some
local variables when unrolling a loop which can result in superior code.

     <br><dt><code>-fprefetch-loop-arrays</code><dd><a name="index-fprefetch_002dloop_002darrays-535"></a>If supported by the target machine, generate instructions to prefetch
memory to improve the performance of loops that access large arrays.

     <p>These options may generate better or worse code; results are highly
dependent on the structure of loops within the source code.

     <br><dt><code>-fno-peephole</code><dt><code>-fno-peephole2</code><dd><a name="index-fno_002dpeephole-536"></a><a name="index-fno_002dpeephole2-537"></a>Disable any machine-specific peephole optimizations.  The difference
between <samp><span class="option">-fno-peephole</span></samp> and <samp><span class="option">-fno-peephole2</span></samp> is in how they
are implemented in the compiler; some targets use one, some use the
other, a few use both.

     <p><samp><span class="option">-fpeephole</span></samp> is enabled by default. 
<samp><span class="option">-fpeephole2</span></samp> enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fno-guess-branch-probability</code><dd><a name="index-fno_002dguess_002dbranch_002dprobability-538"></a>Do not guess branch probabilities using heuristics.

     <p>GCC will use heuristics to guess branch probabilities if they are
not provided by profiling feedback (<samp><span class="option">-fprofile-arcs</span></samp>).  These
heuristics are based on the control flow graph.  If some branch probabilities
are specified by &lsquo;<samp><span class="samp">__builtin_expect</span></samp>&rsquo;, then the heuristics will be
used to guess branch probabilities for the rest of the control flow graph,
taking the &lsquo;<samp><span class="samp">__builtin_expect</span></samp>&rsquo; info into account.  The interactions
between the heuristics and &lsquo;<samp><span class="samp">__builtin_expect</span></samp>&rsquo; can be complex, and in
some cases, it may be useful to disable the heuristics so that the effects
of &lsquo;<samp><span class="samp">__builtin_expect</span></samp>&rsquo; are easier to understand.

     <p>The default is <samp><span class="option">-fguess-branch-probability</span></samp> at levels
<samp><span class="option">-O</span></samp>, <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-freorder-blocks</code><dd><a name="index-freorder_002dblocks-539"></a>Reorder basic blocks in the compiled function in order to reduce number of
taken branches and improve code locality.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>.

     <br><dt><code>-freorder-blocks-and-partition</code><dd><a name="index-freorder_002dblocks_002dand_002dpartition-540"></a>In addition to reordering basic blocks in the compiled function, in order
to reduce number of taken branches, partitions hot and cold basic blocks
into separate sections of the assembly and .o files, to improve
paging and cache locality performance.

     <p>This optimization is automatically turned off in the presence of
exception handling, for linkonce sections, for functions with a user-defined
section attribute and on any architecture that does not support named
sections.

     <br><dt><code>-freorder-functions</code><dd><a name="index-freorder_002dfunctions-541"></a>Reorder functions in the object file in order to
improve code locality.  This is implemented by using special
subsections <code>.text.hot</code> for most frequently executed functions and
<code>.text.unlikely</code> for unlikely executed functions.  Reordering is done by
the linker so object file format must support named sections and linker must
place them in a reasonable way.

     <p>Also profile feedback must be available in to make this option effective.  See
<samp><span class="option">-fprofile-arcs</span></samp> for details.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fstrict-aliasing</code><dd><a name="index-fstrict_002daliasing-542"></a>Allows the compiler to assume the strictest aliasing rules applicable to
the language being compiled.  For C (and C++), this activates
optimizations based on the type of expressions.  In particular, an
object of one type is assumed never to reside at the same address as an
object of a different type, unless the types are almost the same.  For
example, an <code>unsigned int</code> can alias an <code>int</code>, but not a
<code>void*</code> or a <code>double</code>.  A character type may alias any other
type.

     <p>Pay special attention to code like this:
     <pre class="smallexample">          union a_union {
            int i;
            double d;
          };
          
          int f() {
            a_union t;
            t.d = 3.0;
            return t.i;
          }
</pre>
     <p>The practice of reading from a different union member than the one most
recently written to (called &ldquo;type-punning&rdquo;) is common.  Even with
<samp><span class="option">-fstrict-aliasing</span></samp>, type-punning is allowed, provided the memory
is accessed through the union type.  So, the code above will work as
expected.  However, this code might not:
     <pre class="smallexample">          int f() {
            a_union t;
            int* ip;
            t.d = 3.0;
            ip = &amp;t.i;
            return *ip;
          }
</pre>
     <p>Every language that wishes to perform language-specific alias analysis
should define a function that computes, given an <code>tree</code>
node, an alias set for the node.  Nodes in different alias sets are not
allowed to alias.  For an example, see the C front-end function
<code>c_get_alias_set</code>.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-falign-functions</code><dt><code>-falign-functions=</code><var>n</var><dd><a name="index-falign_002dfunctions-543"></a>Align the start of functions to the next power-of-two greater than
<var>n</var>, skipping up to <var>n</var> bytes.  For instance,
<samp><span class="option">-falign-functions=32</span></samp> aligns functions to the next 32-byte
boundary, but <samp><span class="option">-falign-functions=24</span></samp> would align to the next
32-byte boundary only if this can be done by skipping 23 bytes or less.

     <p><samp><span class="option">-fno-align-functions</span></samp> and <samp><span class="option">-falign-functions=1</span></samp> are
equivalent and mean that functions will not be aligned.

     <p>Some assemblers only support this flag when <var>n</var> is a power of two;
in that case, it is rounded up.

     <p>If <var>n</var> is not specified or is zero, use a machine-dependent default.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>.

     <br><dt><code>-falign-labels</code><dt><code>-falign-labels=</code><var>n</var><dd><a name="index-falign_002dlabels-544"></a>Align all branch targets to a power-of-two boundary, skipping up to
<var>n</var> bytes like <samp><span class="option">-falign-functions</span></samp>.  This option can easily
make code slower, because it must insert dummy operations for when the
branch target is reached in the usual flow of the code.

     <p><samp><span class="option">-fno-align-labels</span></samp> and <samp><span class="option">-falign-labels=1</span></samp> are
equivalent and mean that labels will not be aligned.

     <p>If <samp><span class="option">-falign-loops</span></samp> or <samp><span class="option">-falign-jumps</span></samp> are applicable and
are greater than this value, then their values are used instead.

     <p>If <var>n</var> is not specified or is zero, use a machine-dependent default
which is very likely to be &lsquo;<samp><span class="samp">1</span></samp>&rsquo;, meaning no alignment.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>.

     <br><dt><code>-falign-loops</code><dt><code>-falign-loops=</code><var>n</var><dd><a name="index-falign_002dloops-545"></a>Align loops to a power-of-two boundary, skipping up to <var>n</var> bytes
like <samp><span class="option">-falign-functions</span></samp>.  The hope is that the loop will be
executed many times, which will make up for any execution of the dummy
operations.

     <p><samp><span class="option">-fno-align-loops</span></samp> and <samp><span class="option">-falign-loops=1</span></samp> are
equivalent and mean that loops will not be aligned.

     <p>If <var>n</var> is not specified or is zero, use a machine-dependent default.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>.

     <br><dt><code>-falign-jumps</code><dt><code>-falign-jumps=</code><var>n</var><dd><a name="index-falign_002djumps-546"></a>Align branch targets to a power-of-two boundary, for branch targets
where the targets can only be reached by jumping, skipping up to <var>n</var>
bytes like <samp><span class="option">-falign-functions</span></samp>.  In this case, no dummy operations
need be executed.

     <p><samp><span class="option">-fno-align-jumps</span></samp> and <samp><span class="option">-falign-jumps=1</span></samp> are
equivalent and mean that loops will not be aligned.

     <p>If <var>n</var> is not specified or is zero, use a machine-dependent default.

     <p>Enabled at levels <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>.

     <br><dt><code>-funit-at-a-time</code><dd><a name="index-funit_002dat_002da_002dtime-547"></a>Parse the whole compilation unit before starting to produce code. 
This allows some extra optimizations to take place but consumes
more memory (in general).  There are some compatibility issues
with <em>unit-at-at-time</em> mode:
          <ul>
<li>enabling <em>unit-at-a-time</em> mode may change the order
in which functions, variables, and top-level <code>asm</code> statements
are emitted, and will likely break code relying on some particular
ordering.  The majority of such top-level <code>asm</code> statements,
though, can be replaced by <code>section</code> attributes.

          <li><em>unit-at-a-time</em> mode removes unreferenced static variables
and functions.  This may result in undefined references
when an <code>asm</code> statement refers directly to variables or functions
that are otherwise unused.  In that case either the variable/function
shall be listed as an operand of the <code>asm</code> statement operand or,
in the case of top-level <code>asm</code> statements the attribute <code>used</code>
shall be used on the declaration.

          <li>Static functions now can use non-standard passing conventions that
may break <code>asm</code> statements calling functions directly.  Again,
attribute <code>used</code> will prevent this behavior. 
</ul>

     <p>As a temporary workaround, <samp><span class="option">-fno-unit-at-a-time</span></samp> can be used,
but this scheme may not be supported by future releases of GCC.

     <p>Enabled at levels <samp><span class="option">-O</span></samp>, <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fweb</code><dd><a name="index-fweb-548"></a>Constructs webs as commonly used for register allocation purposes and assign
each web individual pseudo register.  This allows the register allocation pass
to operate on pseudos directly, but also strengthens several other optimization
passes, such as CSE, loop optimizer and trivial dead code remover.  It can,
however, make debugging impossible, since variables will no longer stay in a
&ldquo;home register&rdquo;.

     <p>Enabled by default with <samp><span class="option">-funroll-loops</span></samp>.

     <br><dt><code>-fwhole-program</code><dd><a name="index-fwhole_002dprogram-549"></a>Assume that the current compilation unit represents whole program being
compiled.  All public functions and variables with the exception of <code>main</code>
and those merged by attribute <code>externally_visible</code> become static functions
and in a affect gets more aggressively optimized by interprocedural optimizers. 
While this option is equivalent to proper use of <code>static</code> keyword for
programs consisting of single file, in combination with option
<samp><span class="option">--combine</span></samp> this flag can be used to compile most of smaller scale C
programs since the functions and variables become local for the whole combined
compilation unit, not for the single source file itself.

     <br><dt><code>-fno-cprop-registers</code><dd><a name="index-fno_002dcprop_002dregisters-550"></a>After register allocation and post-register allocation instruction splitting,
we perform a copy-propagation pass to try to reduce scheduling dependencies
and occasionally eliminate the copy.

     <p>Disabled at levels <samp><span class="option">-O</span></samp>, <samp><span class="option">-O2</span></samp>, <samp><span class="option">-O3</span></samp>, <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-fprofile-generate</code><dd><a name="index-fprofile_002dgenerate-551"></a>
Enable options usually used for instrumenting application to produce
profile useful for later recompilation with profile feedback based
optimization.  You must use <samp><span class="option">-fprofile-generate</span></samp> both when
compiling and when linking your program.

     <p>The following options are enabled: <code>-fprofile-arcs</code>, <code>-fprofile-values</code>, <code>-fvpt</code>.

     <br><dt><code>-fprofile-use</code><dd><a name="index-fprofile_002duse-552"></a>Enable profile feedback directed optimizations, and optimizations
generally profitable only with profile feedback available.

     <p>The following options are enabled: <code>-fbranch-probabilities</code>, <code>-fvpt</code>,
<code>-funroll-loops</code>, <code>-fpeel-loops</code>, <code>-ftracer</code>,
<code>-fno-loop-optimize</code>.

 </dl>

 <p>The following options control compiler behavior regarding floating
point arithmetic.  These options trade off between speed and
correctness.  All must be specifically enabled.

     <dl>
<dt><code>-ffloat-store</code><dd><a name="index-ffloat_002dstore-553"></a>Do not store floating point variables in registers, and inhibit other
options that might change whether a floating point value is taken from a
register or memory.

     <p><a name="index-floating-point-precision-554"></a>This option prevents undesirable excess precision on machines such as
the 68000 where the floating registers (of the 68881) keep more
precision than a <code>double</code> is supposed to have.  Similarly for the
x86 architecture.  For most programs, the excess precision does only
good, but a few programs rely on the precise definition of IEEE floating
point.  Use <samp><span class="option">-ffloat-store</span></samp> for such programs, after modifying
them to store all pertinent intermediate computations into variables.

     <br><dt><code>-ffast-math</code><dd><a name="index-ffast_002dmath-555"></a>Sets <samp><span class="option">-fno-math-errno</span></samp>, <samp><span class="option">-funsafe-math-optimizations</span></samp>, <br>
<samp><span class="option">-fno-trapping-math</span></samp>, <samp><span class="option">-ffinite-math-only</span></samp>,
<samp><span class="option">-fno-rounding-math</span></samp>, <samp><span class="option">-fno-signaling-nans</span></samp>
and <samp><span class="option">fcx-limited-range</span></samp>.

     <p>This option causes the preprocessor macro <code>__FAST_MATH__</code> to be defined.

     <p>This option should never be turned on by any <samp><span class="option">-O</span></samp> option since
it can result in incorrect output for programs which depend on
an exact implementation of IEEE or ISO rules/specifications for
math functions.

     <br><dt><code>-fno-math-errno</code><dd><a name="index-fno_002dmath_002derrno-556"></a>Do not set ERRNO after calling math functions that are executed
with a single instruction, e.g., sqrt.  A program that relies on
IEEE exceptions for math error handling may want to use this flag
for speed while maintaining IEEE arithmetic compatibility.

     <p>This option should never be turned on by any <samp><span class="option">-O</span></samp> option since
it can result in incorrect output for programs which depend on
an exact implementation of IEEE or ISO rules/specifications for
math functions.

     <p>The default is <samp><span class="option">-fmath-errno</span></samp>.

     <p>On Darwin systems, the math library never sets <code>errno</code>.  There is therefore
no reason for the compiler to consider the possibility that it might,
and <samp><span class="option">-fno-math-errno</span></samp> is the default.

     <br><dt><code>-funsafe-math-optimizations</code><dd><a name="index-funsafe_002dmath_002doptimizations-557"></a>Allow optimizations for floating-point arithmetic that (a) assume
that arguments and results are valid and (b) may violate IEEE or
ANSI standards.  When used at link-time, it may include libraries
or startup files that change the default FPU control word or other
similar optimizations.

     <p>This option should never be turned on by any <samp><span class="option">-O</span></samp> option since
it can result in incorrect output for programs which depend on
an exact implementation of IEEE or ISO rules/specifications for
math functions.

     <p>The default is <samp><span class="option">-fno-unsafe-math-optimizations</span></samp>.

     <br><dt><code>-ffinite-math-only</code><dd><a name="index-ffinite_002dmath_002donly-558"></a>Allow optimizations for floating-point arithmetic that assume
that arguments and results are not NaNs or +-Infs.

     <p>This option should never be turned on by any <samp><span class="option">-O</span></samp> option since
it can result in incorrect output for programs which depend on
an exact implementation of IEEE or ISO rules/specifications.

     <p>The default is <samp><span class="option">-fno-finite-math-only</span></samp>.

     <br><dt><code>-fno-trapping-math</code><dd><a name="index-fno_002dtrapping_002dmath-559"></a>Compile code assuming that floating-point operations cannot generate
user-visible traps.  These traps include division by zero, overflow,
underflow, inexact result and invalid operation.  This option implies
<samp><span class="option">-fno-signaling-nans</span></samp>.  Setting this option may allow faster
code if one relies on &ldquo;non-stop&rdquo; IEEE arithmetic, for example.

     <p>This option should never be turned on by any <samp><span class="option">-O</span></samp> option since
it can result in incorrect output for programs which depend on
an exact implementation of IEEE or ISO rules/specifications for
math functions.

     <p>The default is <samp><span class="option">-ftrapping-math</span></samp>.

     <br><dt><code>-frounding-math</code><dd><a name="index-frounding_002dmath-560"></a>Disable transformations and optimizations that assume default floating
point rounding behavior.  This is round-to-zero for all floating point
to integer conversions, and round-to-nearest for all other arithmetic
truncations.  This option should be specified for programs that change
the FP rounding mode dynamically, or that may be executed with a
non-default rounding mode.  This option disables constant folding of
floating point expressions at compile-time (which may be affected by
rounding mode) and arithmetic transformations that are unsafe in the
presence of sign-dependent rounding modes.

     <p>The default is <samp><span class="option">-fno-rounding-math</span></samp>.

     <p>This option is experimental and does not currently guarantee to
disable all GCC optimizations that are affected by rounding mode. 
Future versions of GCC may provide finer control of this setting
using C99's <code>FENV_ACCESS</code> pragma.  This command line option
will be used to specify the default state for <code>FENV_ACCESS</code>.

     <br><dt><code>-fsignaling-nans</code><dd><a name="index-fsignaling_002dnans-561"></a>Compile code assuming that IEEE signaling NaNs may generate user-visible
traps during floating-point operations.  Setting this option disables
optimizations that may change the number of exceptions visible with
signaling NaNs.  This option implies <samp><span class="option">-ftrapping-math</span></samp>.

     <p>This option causes the preprocessor macro <code>__SUPPORT_SNAN__</code> to
be defined.

     <p>The default is <samp><span class="option">-fno-signaling-nans</span></samp>.

     <p>This option is experimental and does not currently guarantee to
disable all GCC optimizations that affect signaling NaN behavior.

     <br><dt><code>-fsingle-precision-constant</code><dd><a name="index-fsingle_002dprecision_002dconstant-562"></a>Treat floating point constant as single precision constant instead of
implicitly converting it to double precision constant.

     <br><dt><code>-fcx-limited-range</code><dt><code>-fno-cx-limited-range</code><dd><a name="index-fcx_002dlimited_002drange-563"></a><a name="index-fno_002dcx_002dlimited_002drange-564"></a>When enabled, this option states that a range reduction step is not
needed when performing complex division.  The default is
<samp><span class="option">-fno-cx-limited-range</span></samp>, but is enabled by <samp><span class="option">-ffast-math</span></samp>.

     <p>This option controls the default setting of the ISO C99
<code>CX_LIMITED_RANGE</code> pragma.  Nevertheless, the option applies to
all languages.

 </dl>

 <p>The following options control optimizations that may improve
performance, but are not enabled by any <samp><span class="option">-O</span></samp> options.  This
section includes experimental options that may produce broken code.

     <dl>
<dt><code>-fbranch-probabilities</code><dd><a name="index-fbranch_002dprobabilities-565"></a>After running a program compiled with <samp><span class="option">-fprofile-arcs</span></samp>
(see <a href="Debugging-Options.html#Debugging-Options">Options for Debugging Your Program or <samp><span class="command">gcc</span></samp></a>), you can compile it a second time using
<samp><span class="option">-fbranch-probabilities</span></samp>, to improve optimizations based on
the number of times each branch was taken.  When the program
compiled with <samp><span class="option">-fprofile-arcs</span></samp> exits it saves arc execution
counts to a file called <samp><var>sourcename</var><span class="file">.gcda</span></samp> for each source
file  The information in this data file is very dependent on the
structure of the generated code, so you must use the same source code
and the same optimization options for both compilations.

     <p>With <samp><span class="option">-fbranch-probabilities</span></samp>, GCC puts a
&lsquo;<samp><span class="samp">REG_BR_PROB</span></samp>&rsquo; note on each &lsquo;<samp><span class="samp">JUMP_INSN</span></samp>&rsquo; and &lsquo;<samp><span class="samp">CALL_INSN</span></samp>&rsquo;. 
These can be used to improve optimization.  Currently, they are only
used in one place: in <samp><span class="file">reorg.c</span></samp>, instead of guessing which path a
branch is mostly to take, the &lsquo;<samp><span class="samp">REG_BR_PROB</span></samp>&rsquo; values are used to
exactly determine which path is taken more often.

     <br><dt><code>-fprofile-values</code><dd><a name="index-fprofile_002dvalues-566"></a>If combined with <samp><span class="option">-fprofile-arcs</span></samp>, it adds code so that some
data about values of expressions in the program is gathered.

     <p>With <samp><span class="option">-fbranch-probabilities</span></samp>, it reads back the data gathered
from profiling values of expressions and adds &lsquo;<samp><span class="samp">REG_VALUE_PROFILE</span></samp>&rsquo;
notes to instructions for their later usage in optimizations.

     <p>Enabled with <samp><span class="option">-fprofile-generate</span></samp> and <samp><span class="option">-fprofile-use</span></samp>.

     <br><dt><code>-fvpt</code><dd><a name="index-fvpt-567"></a>If combined with <samp><span class="option">-fprofile-arcs</span></samp>, it instructs the compiler to add
a code to gather information about values of expressions.

     <p>With <samp><span class="option">-fbranch-probabilities</span></samp>, it reads back the data gathered
and actually performs the optimizations based on them. 
Currently the optimizations include specialization of division operation
using the knowledge about the value of the denominator.

     <br><dt><code>-frename-registers</code><dd><a name="index-frename_002dregisters-568"></a>Attempt to avoid false dependencies in scheduled code by making use
of registers left over after register allocation.  This optimization
will most benefit processors with lots of registers.  Depending on the
debug information format adopted by the target, however, it can
make debugging impossible, since variables will no longer stay in
a &ldquo;home register&rdquo;.

     <p>Enabled by default with <samp><span class="option">-funroll-loops</span></samp>.

     <br><dt><code>-ftracer</code><dd><a name="index-ftracer-569"></a>Perform tail duplication to enlarge superblock size.  This transformation
simplifies the control flow of the function allowing other optimizations to do
better job.

     <p>Enabled with <samp><span class="option">-fprofile-use</span></samp>.

     <br><dt><code>-funroll-loops</code><dd><a name="index-funroll_002dloops-570"></a>Unroll loops whose number of iterations can be determined at compile time or
upon entry to the loop.  <samp><span class="option">-funroll-loops</span></samp> implies
<samp><span class="option">-frerun-cse-after-loop</span></samp>, <samp><span class="option">-fweb</span></samp> and <samp><span class="option">-frename-registers</span></samp>. 
It also turns on complete loop peeling (i.e. complete removal of loops with
small constant number of iterations).  This option makes code larger, and may
or may not make it run faster.

     <p>Enabled with <samp><span class="option">-fprofile-use</span></samp>.

     <br><dt><code>-funroll-all-loops</code><dd><a name="index-funroll_002dall_002dloops-571"></a>Unroll all loops, even if their number of iterations is uncertain when
the loop is entered.  This usually makes programs run more slowly. 
<samp><span class="option">-funroll-all-loops</span></samp> implies the same options as
<samp><span class="option">-funroll-loops</span></samp>.

     <br><dt><code>-fpeel-loops</code><dd><a name="index-fpeel_002dloops-572"></a>Peels the loops for that there is enough information that they do not
roll much (from profile feedback).  It also turns on complete loop peeling
(i.e. complete removal of loops with small constant number of iterations).

     <p>Enabled with <samp><span class="option">-fprofile-use</span></samp>.

     <br><dt><code>-fmove-loop-invariants</code><dd><a name="index-fmove_002dloop_002dinvariants-573"></a>Enables the loop invariant motion pass in the new loop optimizer.  Enabled
at level <samp><span class="option">-O1</span></samp>

     <br><dt><code>-funswitch-loops</code><dd><a name="index-funswitch_002dloops-574"></a>Move branches with loop invariant conditions out of the loop, with duplicates
of the loop on both branches (modified according to result of the condition).

     <br><dt><code>-fprefetch-loop-arrays</code><dd><a name="index-fprefetch_002dloop_002darrays-575"></a>If supported by the target machine, generate instructions to prefetch
memory to improve the performance of loops that access large arrays.

     <p>Disabled at level <samp><span class="option">-Os</span></samp>.

     <br><dt><code>-ffunction-sections</code><dt><code>-fdata-sections</code><dd><a name="index-ffunction_002dsections-576"></a><a name="index-fdata_002dsections-577"></a>Place each function or data item into its own section in the output
file if the target supports arbitrary sections.  The name of the
function or the name of the data item determines the section's name
in the output file.

     <p>Use these options on systems where the linker can perform optimizations
to improve locality of reference in the instruction space.  Most systems
using the ELF object format and SPARC processors running Solaris 2 have
linkers with such optimizations.  AIX may have these optimizations in
the future.

     <p>Only use these options when there are significant benefits from doing
so.  When you specify these options, the assembler and linker will
create larger object and executable files and will also be slower. 
You will not be able to use <code>gprof</code> on all systems if you
specify this option and you may have problems with debugging if
you specify both this option and <samp><span class="option">-g</span></samp>.

     <br><dt><code>-fbranch-target-load-optimize</code><dd><a name="index-fbranch_002dtarget_002dload_002doptimize-578"></a>Perform branch target register load optimization before prologue / epilogue
threading. 
The use of target registers can typically be exposed only during reload,
thus hoisting loads out of loops and doing inter-block scheduling needs
a separate optimization pass.

     <br><dt><code>-fbranch-target-load-optimize2</code><dd><a name="index-fbranch_002dtarget_002dload_002doptimize2-579"></a>Perform branch target register load optimization after prologue / epilogue
threading.

     <br><dt><code>-fbtr-bb-exclusive</code><dd><a name="index-fbtr_002dbb_002dexclusive-580"></a>When performing branch target register load optimization, don't reuse
branch target registers in within any basic block.

     <br><dt><code>-fstack-protector</code><dd>Emit extra code to check for buffer overflows, such as stack smashing
attacks.  This is done by adding a guard variable to functions with
vulnerable objects.  This includes functions that call alloca, and
functions with buffers larger than 8 bytes.  The guards are initialized
when a function is entered and then checked when the function exits. 
If a guard check fails, an error message is printed and the program exits.

     <br><dt><code>-fstack-protector-all</code><dd>Like <samp><span class="option">-fstack-protector</span></samp> except that all functions are protected.

     <br><dt><code>--param </code><var>name</var><code>=</code><var>value</var><dd><a name="index-param-581"></a>In some places, GCC uses various constants to control the amount of
optimization that is done.  For example, GCC will not inline functions
that contain more that a certain number of instructions.  You can
control some of these constants on the command-line using the
<samp><span class="option">--param</span></samp> option.

     <p>The names of specific parameters, and the meaning of the values, are
tied to the internals of the compiler, and are subject to change
without notice in future releases.

     <p>In each case, the <var>value</var> is an integer.  The allowable choices for
<var>name</var> are given in the following table:

          <dl>
<dt><code>salias-max-implicit-fields</code><dd>The maximum number of fields in a variable without direct
structure accesses for which structure aliasing will consider trying
to track each field.  The default is 5

          <br><dt><code>sra-max-structure-size</code><dd>The maximum structure size, in bytes, at which the scalar replacement
of aggregates (SRA) optimization will perform block copies.  The
default value, 0, implies that GCC will select the most appropriate
size itself.

          <br><dt><code>sra-field-structure-ratio</code><dd>The threshold ratio (as a percentage) between instantiated fields and
the complete structure size.  We say that if the ratio of the number
of bytes in instantiated fields to the number of bytes in the complete
structure exceeds this parameter, then block copies are not used.  The
default is 75.

          <br><dt><code>max-crossjump-edges</code><dd>The maximum number of incoming edges to consider for crossjumping. 
The algorithm used by <samp><span class="option">-fcrossjumping</span></samp> is O(N^2) in
the number of edges incoming to each block.  Increasing values mean
more aggressive optimization, making the compile time increase with
probably small improvement in executable size.

          <br><dt><code>min-crossjump-insns</code><dd>The minimum number of instructions which must be matched at the end
of two blocks before crossjumping will be performed on them.  This
value is ignored in the case where all instructions in the block being
crossjumped from are matched.  The default value is 5.

          <br><dt><code>max-grow-copy-bb-insns</code><dd>The maximum code size expansion factor when copying basic blocks
instead of jumping.  The expansion is relative to a jump instruction. 
The default value is 8.

          <br><dt><code>max-goto-duplication-insns</code><dd>The maximum number of instructions to duplicate to a block that jumps
to a computed goto.  To avoid O(N^2) behavior in a number of
passes, GCC factors computed gotos early in the compilation process,
and unfactors them as late as possible.  Only computed jumps at the
end of a basic blocks with no more than max-goto-duplication-insns are
unfactored.  The default value is 8.

          <br><dt><code>max-delay-slot-insn-search</code><dd>The maximum number of instructions to consider when looking for an
instruction to fill a delay slot.  If more than this arbitrary number of
instructions is searched, the time savings from filling the delay slot
will be minimal so stop searching.  Increasing values mean more
aggressive optimization, making the compile time increase with probably
small improvement in executable run time.

          <br><dt><code>max-delay-slot-live-search</code><dd>When trying to fill delay slots, the maximum number of instructions to
consider when searching for a block with valid live register
information.  Increasing this arbitrarily chosen value means more
aggressive optimization, increasing the compile time.  This parameter
should be removed when the delay slot code is rewritten to maintain the
control-flow graph.

          <br><dt><code>max-gcse-memory</code><dd>The approximate maximum amount of memory that will be allocated in
order to perform the global common subexpression elimination
optimization.  If more memory than specified is required, the
optimization will not be done.

          <br><dt><code>max-gcse-passes</code><dd>The maximum number of passes of GCSE to run.  The default is 1.

          <br><dt><code>max-pending-list-length</code><dd>The maximum number of pending dependencies scheduling will allow
before flushing the current state and starting over.  Large functions
with few branches or calls can create excessively large lists which
needlessly consume memory and resources.

          <br><dt><code>max-inline-insns-single</code><dd>Several parameters control the tree inliner used in gcc. 
This number sets the maximum number of instructions (counted in GCC's
internal representation) in a single function that the tree inliner
will consider for inlining.  This only affects functions declared
inline and methods implemented in a class declaration (C++). 
The default value is 450.

          <br><dt><code>max-inline-insns-auto</code><dd>When you use <samp><span class="option">-finline-functions</span></samp> (included in <samp><span class="option">-O3</span></samp>),
a lot of functions that would otherwise not be considered for inlining
by the compiler will be investigated.  To those functions, a different
(more restrictive) limit compared to functions declared inline can
be applied. 
The default value is 90.

          <br><dt><code>large-function-insns</code><dd>The limit specifying really large functions.  For functions larger than this
limit after inlining inlining is constrained by
<samp><span class="option">--param large-function-growth</span></samp>.  This parameter is useful primarily
to avoid extreme compilation time caused by non-linear algorithms used by the
backend. 
This parameter is ignored when <samp><span class="option">-funit-at-a-time</span></samp> is not used. 
The default value is 2700.

          <br><dt><code>large-function-growth</code><dd>Specifies maximal growth of large function caused by inlining in percents. 
This parameter is ignored when <samp><span class="option">-funit-at-a-time</span></samp> is not used. 
The default value is 100 which limits large function growth to 2.0 times
the original size.

          <br><dt><code>large-unit-insns</code><dd>The limit specifying large translation unit.  Growth caused by inlining of
units larger than this limit is limited by <samp><span class="option">--param inline-unit-growth</span></samp>. 
For small units this might be too tight (consider unit consisting of function A
that is inline and B that just calls A three time.  If B is small relative to
A, the growth of unit is 300\% and yet such inlining is very sane.  For very
large units consisting of small inlininable functions however the overall unit
growth limit is needed to avoid exponential explosion of code size.  Thus for
smaller units, the size is increased to <samp><span class="option">--param large-unit-insns</span></samp>
before aplying <samp><span class="option">--param inline-unit-growth</span></samp>.  The default is 10000

          <br><dt><code>inline-unit-growth</code><dd>Specifies maximal overall growth of the compilation unit caused by inlining. 
This parameter is ignored when <samp><span class="option">-funit-at-a-time</span></samp> is not used. 
The default value is 50 which limits unit growth to 1.5 times the original
size.

          <br><dt><code>max-inline-insns-recursive</code><dt><code>max-inline-insns-recursive-auto</code><dd>Specifies maximum number of instructions out-of-line copy of self recursive inline
function can grow into by performing recursive inlining.

          <p>For functions declared inline <samp><span class="option">--param max-inline-insns-recursive</span></samp> is
taken into account.  For function not declared inline, recursive inlining
happens only when <samp><span class="option">-finline-functions</span></samp> (included in <samp><span class="option">-O3</span></samp>) is
enabled and <samp><span class="option">--param max-inline-insns-recursive-auto</span></samp> is used.  The
default value is 450.

          <br><dt><code>max-inline-recursive-depth</code><dt><code>max-inline-recursive-depth-auto</code><dd>Specifies maximum recursion depth used by the recursive inlining.

          <p>For functions declared inline <samp><span class="option">--param max-inline-recursive-depth</span></samp> is
taken into account.  For function not declared inline, recursive inlining
happens only when <samp><span class="option">-finline-functions</span></samp> (included in <samp><span class="option">-O3</span></samp>) is
enabled and <samp><span class="option">--param max-inline-recursive-depth-auto</span></samp> is used.  The
default value is 450.

          <br><dt><code>min-inline-recursive-probability</code><dd>Recursive inlining is profitable only for function having deep recursion
in average and can hurt for function having little recursion depth by
increasing the prologue size or complexity of function body to other
optimizers.

          <p>When profile feedback is available (see <samp><span class="option">-fprofile-generate</span></samp>) the actual
recursion depth can be guessed from probability that function will recurse via
given call expression.  This parameter limits inlining only to call expression
whose probability exceeds given threshold (in percents).  The default value is
10.

          <br><dt><code>inline-call-cost</code><dd>Specify cost of call instruction relative to simple arithmetics operations
(having cost of 1).  Increasing this cost disqualifies inlining of non-leaf
functions and at the same time increases size of leaf function that is believed to
reduce function size by being inlined.  In effect it increases amount of
inlining for code having large abstraction penalty (many functions that just
pass the arguments to other functions) and decrease inlining for code with low
abstraction penalty.  The default value is 16.

          <br><dt><code>max-unrolled-insns</code><dd>The maximum number of instructions that a loop should have if that loop
is unrolled, and if the loop is unrolled, it determines how many times
the loop code is unrolled.

          <br><dt><code>max-average-unrolled-insns</code><dd>The maximum number of instructions biased by probabilities of their execution
that a loop should have if that loop is unrolled, and if the loop is unrolled,
it determines how many times the loop code is unrolled.

          <br><dt><code>max-unroll-times</code><dd>The maximum number of unrollings of a single loop.

          <br><dt><code>max-peeled-insns</code><dd>The maximum number of instructions that a loop should have if that loop
is peeled, and if the loop is peeled, it determines how many times
the loop code is peeled.

          <br><dt><code>max-peel-times</code><dd>The maximum number of peelings of a single loop.

          <br><dt><code>max-completely-peeled-insns</code><dd>The maximum number of insns of a completely peeled loop.

          <br><dt><code>max-completely-peel-times</code><dd>The maximum number of iterations of a loop to be suitable for complete peeling.

          <br><dt><code>max-unswitch-insns</code><dd>The maximum number of insns of an unswitched loop.

          <br><dt><code>max-unswitch-level</code><dd>The maximum number of branches unswitched in a single loop.

          <br><dt><code>lim-expensive</code><dd>The minimum cost of an expensive expression in the loop invariant motion.

          <br><dt><code>iv-consider-all-candidates-bound</code><dd>Bound on number of candidates for induction variables below that
all candidates are considered for each use in induction variable
optimizations.  Only the most relevant candidates are considered
if there are more candidates, to avoid quadratic time complexity.

          <br><dt><code>iv-max-considered-uses</code><dd>The induction variable optimizations give up on loops that contain more
induction variable uses.

          <br><dt><code>iv-always-prune-cand-set-bound</code><dd>If number of candidates in the set is smaller than this value,
we always try to remove unnecessary ivs from the set during its
optimization when a new iv is added to the set.

          <br><dt><code>scev-max-expr-size</code><dd>Bound on size of expressions used in the scalar evolutions analyzer. 
Large expressions slow the analyzer.

          <br><dt><code>vect-max-version-checks</code><dd>The maximum number of runtime checks that can be performed when doing
loop versioning in the vectorizer.  See option ftree-vect-loop-version
for more information.

          <br><dt><code>max-iterations-to-track</code><dd>
The maximum number of iterations of a loop the brute force algorithm
for analysis of # of iterations of the loop tries to evaluate.

          <br><dt><code>hot-bb-count-fraction</code><dd>Select fraction of the maximal count of repetitions of basic block in program
given basic block needs to have to be considered hot.

          <br><dt><code>hot-bb-frequency-fraction</code><dd>Select fraction of the maximal frequency of executions of basic block in
function given basic block needs to have to be considered hot

          <br><dt><code>max-predicted-iterations</code><dd>The maximum number of loop iterations we predict statically.  This is useful
in cases where function contain single loop with known bound and other loop
with unknown.  We predict the known number of iterations correctly, while
the unknown number of iterations average to roughly 10.  This means that the
loop without bounds would appear artificially cold relative to the other one.

          <br><dt><code>tracer-dynamic-coverage</code><dt><code>tracer-dynamic-coverage-feedback</code><dd>
This value is used to limit superblock formation once the given percentage of
executed instructions is covered.  This limits unnecessary code size
expansion.

          <p>The <samp><span class="option">tracer-dynamic-coverage-feedback</span></samp> is used only when profile
feedback is available.  The real profiles (as opposed to statically estimated
ones) are much less balanced allowing the threshold to be larger value.

          <br><dt><code>tracer-max-code-growth</code><dd>Stop tail duplication once code growth has reached given percentage.  This is
rather hokey argument, as most of the duplicates will be eliminated later in
cross jumping, so it may be set to much higher values than is the desired code
growth.

          <br><dt><code>tracer-min-branch-ratio</code><dd>
Stop reverse growth when the reverse probability of best edge is less than this
threshold (in percent).

          <br><dt><code>tracer-min-branch-ratio</code><dt><code>tracer-min-branch-ratio-feedback</code><dd>
Stop forward growth if the best edge do have probability lower than this
threshold.

          <p>Similarly to <samp><span class="option">tracer-dynamic-coverage</span></samp> two values are present, one for
compilation for profile feedback and one for compilation without.  The value
for compilation with profile feedback needs to be more conservative (higher) in
order to make tracer effective.

          <br><dt><code>max-cse-path-length</code><dd>
Maximum number of basic blocks on path that cse considers.  The default is 10.

          <br><dt><code>max-cse-insns</code><dd>The maximum instructions CSE process before flushing. The default is 1000.

          <br><dt><code>global-var-threshold</code><dd>
Counts the number of function calls (<var>n</var>) and the number of
call-clobbered variables (<var>v</var>).  If <var>n</var>x<var>v</var> is larger than this limit, a
single artificial variable will be created to represent all the
call-clobbered variables at function call sites.  This artificial
variable will then be made to alias every call-clobbered variable. 
(done as <code>int * size_t</code> on the host machine; beware overflow).

          <br><dt><code>max-aliased-vops</code><dd>
Maximum number of virtual operands allowed to represent aliases
before triggering the alias grouping heuristic.  Alias grouping
reduces compile times and memory consumption needed for aliasing at
the expense of precision loss in alias information.

          <br><dt><code>ggc-min-expand</code><dd>
GCC uses a garbage collector to manage its own memory allocation.  This
parameter specifies the minimum percentage by which the garbage
collector's heap should be allowed to expand between collections. 
Tuning this may improve compilation speed; it has no effect on code
generation.

          <p>The default is 30% + 70% * (RAM/1GB) with an upper bound of 100% when
RAM &gt;= 1GB.  If <code>getrlimit</code> is available, the notion of "RAM" is
the smallest of actual RAM and <code>RLIMIT_DATA</code> or <code>RLIMIT_AS</code>.  If
GCC is not able to calculate RAM on a particular platform, the lower
bound of 30% is used.  Setting this parameter and
<samp><span class="option">ggc-min-heapsize</span></samp> to zero causes a full collection to occur at
every opportunity.  This is extremely slow, but can be useful for
debugging.

          <br><dt><code>ggc-min-heapsize</code><dd>
Minimum size of the garbage collector's heap before it begins bothering
to collect garbage.  The first collection occurs after the heap expands
by <samp><span class="option">ggc-min-expand</span></samp>% beyond <samp><span class="option">ggc-min-heapsize</span></samp>.  Again,
tuning this may improve compilation speed, and has no effect on code
generation.

          <p>The default is the smaller of RAM/8, RLIMIT_RSS, or a limit which
tries to ensure that RLIMIT_DATA or RLIMIT_AS are not exceeded, but
with a lower bound of 4096 (four megabytes) and an upper bound of
131072 (128 megabytes).  If GCC is not able to calculate RAM on a
particular platform, the lower bound is used.  Setting this parameter
very large effectively disables garbage collection.  Setting this
parameter and <samp><span class="option">ggc-min-expand</span></samp> to zero causes a full collection
to occur at every opportunity.

          <br><dt><code>max-reload-search-insns</code><dd>The maximum number of instruction reload should look backward for equivalent
register.  Increasing values mean more aggressive optimization, making the
compile time increase with probably slightly better performance.  The default
value is 100.

          <br><dt><code>max-cselib-memory-location</code><dd>The maximum number of memory locations cselib should take into account. 
Increasing values mean more aggressive optimization, making the compile time
increase with probably slightly better performance.  The default value is 500.

          <br><dt><code>max-flow-memory-location</code><dd>Similar as <samp><span class="option">max-cselib-memory-location</span></samp> but for dataflow liveness. 
The default value is 100.

          <br><dt><code>reorder-blocks-duplicate</code><dt><code>reorder-blocks-duplicate-feedback</code><dd>
Used by basic block reordering pass to decide whether to use unconditional
branch or duplicate the code on its destination.  Code is duplicated when its
estimated size is smaller than this value multiplied by the estimated size of
unconditional jump in the hot spots of the program.

          <p>The <samp><span class="option">reorder-block-duplicate-feedback</span></samp> is used only when profile
feedback is available and may be set to higher values than
<samp><span class="option">reorder-block-duplicate</span></samp> since information about the hot spots is more
accurate.

          <br><dt><code>max-sched-region-blocks</code><dd>The maximum number of blocks in a region to be considered for
interblock scheduling.  The default value is 10.

          <br><dt><code>max-sched-region-insns</code><dd>The maximum number of insns in a region to be considered for
interblock scheduling.  The default value is 100.

          <br><dt><code>min-sched-prob</code><dd>The minimum probability of reaching a source block for interblock
speculative scheduling.  The default value is 40.

          <br><dt><code>max-last-value-rtl</code><dd>
The maximum size measured as number of RTLs that can be recorded in an expression
in combiner for a pseudo register as last known value of that register.  The default
is 10000.

          <br><dt><code>integer-share-limit</code><dd>Small integer constants can use a shared data structure, reducing the
compiler's memory usage and increasing its speed.  This sets the maximum
value of a shared integer constant's.  The default value is 256.

          <br><dt><code>min-virtual-mappings</code><dd>Specifies the minimum number of virtual mappings in the incremental
SSA updater that should be registered to trigger the virtual mappings
heuristic defined by virtual-mappings-ratio.  The default value is
100.

          <br><dt><code>virtual-mappings-ratio</code><dd>If the number of virtual mappings is virtual-mappings-ratio bigger
than the number of virtual symbols to be updated, then the incremental
SSA updater switches to a full update for those symbols.  The default
ratio is 3.

          <br><dt><code>ssp-buffer-size</code><dd>The minimum size of buffers (i.e. arrays) that will receive stack smashing
protection when <samp><span class="option">-fstack-protection</span></samp> is used.

          <br><dt><code>max-jump-thread-duplication-stmts</code><dd>Maximum number of statements allowed in a block that needs to be
duplicated when threading jumps.

          <br><dt><code>max-fields-for-field-sensitive</code><dd>Maximum number of fields in a structure we will treat in
a field sensitive manner during pointer analysis.

     </dl>
     </dl>

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Optimize Options</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Optimize Options">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Optimize Options">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Invoking-GCC.html#Invoking-GCC" rel="up" title="Invoking GCC">
<link href="Preprocessor-Options.html#Preprocessor-Options" rel="next" title="Preprocessor Options">
<link href="Debugging-Options.html#Debugging-Options" rel="prev" title="Debugging Options">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="Preprocessor-Options.html#Preprocessor-Options" accesskey="n" rel="next">Preprocessor Options</a>, Previous: <a href="Debugging-Options.html#Debugging-Options" accesskey="p" rel="prev">Debugging Options</a>, Up: <a href="Invoking-GCC.html#Invoking-GCC" accesskey="u" rel="up">Invoking GCC</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
d55 1
a55 2
<hr>
<a name="Options-That-Control-Optimization"></a>
a56 2
<a name="index-optimize-options"></a>
<a name="index-options_002c-optimization"></a>
d58 4
a61 3
<p>These options control various sorts of optimizations.
</p>
<p>Without any optimization option, the compiler&rsquo;s goal is to reduce the
d68 2
a69 2
</p>
<p>Turning on optimization flags makes the compiler attempt to improve
d72 15
a86 25
</p>
<p>The compiler performs optimization based on the knowledge it has of the
program.  Compiling multiple files at once to a single output file mode allows
the compiler to use information gained from all of the files when compiling
each of them.
</p>
<p>Not all optimizations are controlled directly by a flag.  Only
optimizations that have a flag are listed in this section.
</p>
<p>Most optimizations are only enabled if an <samp>-O</samp> level is set on
the command line.  Otherwise they are disabled, even if individual
optimization flags are specified.
</p>
<p>Depending on the target and how GCC was configured, a slightly different
set of optimizations may be enabled at each <samp>-O</samp> level than
those listed here.  You can invoke GCC with &lsquo;<samp>-Q --help=optimizers</samp>&rsquo;
to find out the exact set of optimizations that are enabled at each level.
See <a href="Overall-Options.html#Overall-Options">Overall Options</a>, for examples.
</p>
<dl compact="compact">
<dt><code>-O</code></dt>
<dt><code>-O1</code></dt>
<dd><a name="index-O"></a>
<a name="index-O1"></a>
<p>Optimize.  Optimizing compilation takes somewhat more time, and a lot
d88 2
a89 2
</p>
<p>With <samp>-O</samp>, the compiler tries to reduce code size and execution
a91 34
</p>
<p><samp>-O</samp> turns on the following optimization flags:
</p><div class="smallexample">
<pre class="smallexample">-fauto-inc-dec 
-fcompare-elim 
-fcprop-registers 
-fdce 
-fdefer-pop 
-fdelayed-branch 
-fdse 
-fguess-branch-probability 
-fif-conversion2 
-fif-conversion 
-fipa-pure-const 
-fipa-profile 
-fipa-reference 
-fmerge-constants
-fsplit-wide-types 
-ftree-bit-ccp 
-ftree-builtin-call-dce 
-ftree-ccp 
-ftree-ch 
-ftree-copyrename 
-ftree-dce 
-ftree-dominator-opts 
-ftree-dse 
-ftree-forwprop 
-ftree-fre 
-ftree-phiprop 
-ftree-sra 
-ftree-pta 
-ftree-ter 
-funit-at-a-time
</pre></div>
d93 22
a114 1
<p><samp>-O</samp> also turns on <samp>-fomit-frame-pointer</samp> on machines
d116 9
a124 7
</p>
</dd>
<dt><code>-O2</code></dt>
<dd><a name="index-O2"></a>
<p>Optimize even more.  GCC performs nearly all supported optimizations
that do not involve a space-speed tradeoff.
As compared to <samp>-O</samp>, this option increases both compilation time
d126 2
a127 2
</p>
<p><samp>-O2</samp> turns on all optimization flags specified by <samp>-O</samp>.  It
d129 31
a159 50
</p><div class="smallexample">
<pre class="smallexample">-fthread-jumps 
-falign-functions  -falign-jumps 
-falign-loops  -falign-labels 
-fcaller-saves 
-fcrossjumping 
-fcse-follow-jumps  -fcse-skip-blocks 
-fdelete-null-pointer-checks 
-fdevirtualize 
-fexpensive-optimizations 
-fgcse  -fgcse-lm  
-finline-small-functions 
-findirect-inlining 
-fipa-sra 
-foptimize-sibling-calls 
-fpartial-inlining 
-fpeephole2 
-fregmove 
-freorder-blocks  -freorder-functions 
-frerun-cse-after-loop  
-fsched-interblock  -fsched-spec 
-fschedule-insns  -fschedule-insns2 
-fstrict-aliasing -fstrict-overflow 
-ftree-switch-conversion -ftree-tail-merge 
-ftree-pre 
-ftree-vrp
</pre></div>

<p>Please note the warning under <samp>-fgcse</samp> about
invoking <samp>-O2</samp> on programs that use computed gotos.
</p>
</dd>
<dt><code>-O3</code></dt>
<dd><a name="index-O3"></a>
<p>Optimize yet more.  <samp>-O3</samp> turns on all optimizations specified
by <samp>-O2</samp> and also turns on the <samp>-finline-functions</samp>,
<samp>-funswitch-loops</samp>, <samp>-fpredictive-commoning</samp>,
<samp>-fgcse-after-reload</samp>, <samp>-ftree-vectorize</samp> and
<samp>-fipa-cp-clone</samp> options.
</p>
</dd>
<dt><code>-O0</code></dt>
<dd><a name="index-O0"></a>
<p>Reduce compilation time and make debugging produce the expected
results.  This is the default.
</p>
</dd>
<dt><code>-Os</code></dt>
<dd><a name="index-Os"></a>
<p>Optimize for size.  <samp>-Os</samp> enables all <samp>-O2</samp> optimizations that
d162 8
a169 20
</p>
<p><samp>-Os</samp> disables the following optimization flags:
</p><div class="smallexample">
<pre class="smallexample">-falign-functions  -falign-jumps  -falign-loops 
-falign-labels  -freorder-blocks  -freorder-blocks-and-partition 
-fprefetch-loop-arrays  -ftree-vect-loop-version
</pre></div>

</dd>
<dt><code>-Ofast</code></dt>
<dd><a name="index-Ofast"></a>
<p>Disregard strict standards compliance.  <samp>-Ofast</samp> enables all
<samp>-O3</samp> optimizations.  It also enables optimizations that are not
valid for all standard compliant programs.
It turns on <samp>-ffast-math</samp> and the Fortran-specific
<samp>-fno-protect-parens</samp> and <samp>-fstack-arrays</samp>.
</p>
<p>If you use multiple <samp>-O</samp> options, with or without level numbers,
the last such option is the one that is effective.
</p></dd>
d172 1
a172 1
<p>Options of the form <samp>-f<var>flag</var></samp> specify machine-independent
d174 1
a174 1
form of <samp>-ffoo</samp> would be <samp>-fno-foo</samp>.  In the table
d176 1
a176 1
use.  You can figure out the other form by either removing &lsquo;<samp>no-</samp>&rsquo;
d178 3
a180 3
</p>
<p>The following options control specific optimizations.  They are either
activated by <samp>-O</samp> options or are related to ones that are.  You
d183 3
a185 5
</p>
<dl compact="compact">
<dt><code>-fno-default-inline</code></dt>
<dd><a name="index-fno_002ddefault_002dinline-1"></a>
<p>Do not make member functions inline by default merely because they are
d187 2
a188 2
<samp><span class="nolinebreak">-O</span></samp><!-- /@@w -->, member functions defined inside class scope are compiled
inline by default; i.e., you don&rsquo;t need to add &lsquo;<samp>inline</samp>&rsquo; in front of
d190 3
a192 6
</p>
</dd>
<dt><code>-fno-defer-pop</code></dt>
<dd><a name="index-fno_002ddefer_002dpop"></a>
<p>Always pop the arguments to each function call as soon as that function
returns.  For machines that must pop arguments after a function call,
d195 14
a208 32
</p>
<p>Disabled at levels <samp>-O</samp>, <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fforward-propagate</code></dt>
<dd><a name="index-fforward_002dpropagate"></a>
<p>Perform a forward propagation pass on RTL.  The pass tries to combine two
instructions and checks if the result can be simplified.  If loop unrolling
is active, two passes are performed and the second is scheduled after
loop unrolling.
</p>
<p>This option is enabled by default at optimization levels <samp>-O</samp>,
<samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-ffp-contract=<var>style</var></code></dt>
<dd><a name="index-ffp_002dcontract"></a>
<p><samp>-ffp-contract=off</samp> disables floating-point expression contraction.
<samp>-ffp-contract=fast</samp> enables floating-point expression contraction
such as forming of fused multiply-add operations if the target has
native support for them.
<samp>-ffp-contract=on</samp> enables floating-point expression contraction
if allowed by the language standard.  This is currently not implemented
and treated equal to <samp>-ffp-contract=off</samp>.
</p>
<p>The default is <samp>-ffp-contract=fast</samp>.
</p>
</dd>
<dt><code>-fomit-frame-pointer</code></dt>
<dd><a name="index-fomit_002dframe_002dpointer"></a>
<p>Don&rsquo;t keep the frame pointer in a register for functions that
don&rsquo;t need one.  This avoids the instructions to save, set up and
d212 2
a213 2
</p>
<p>On some machines, such as the VAX, this flag has no effect, because
d215 1
a215 1
and nothing is saved by pretending it doesn&rsquo;t exist.  The
d217 17
a233 57
whether a target machine supports this flag.  See <a href="http://gcc.gnu.org/onlinedocs/gccint/Registers.html#Registers">Register
Usage</a> in <cite>GNU Compiler Collection (GCC) Internals</cite>.
</p>
<p>Starting with GCC version 4.6, the default setting (when not optimizing for
size) for 32-bit Linux x86 and 32-bit Darwin x86 targets has been changed to
<samp>-fomit-frame-pointer</samp>.  The default can be reverted to
<samp>-fno-omit-frame-pointer</samp> by configuring GCC with the
<samp>--enable-frame-pointer</samp> configure option.
</p>
<p>Enabled at levels <samp>-O</samp>, <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-foptimize-sibling-calls</code></dt>
<dd><a name="index-foptimize_002dsibling_002dcalls"></a>
<p>Optimize sibling and tail recursive calls.
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fno-inline</code></dt>
<dd><a name="index-fno_002dinline"></a>
<p>Do not expand any functions inline apart from those marked with
the <code>always_inline</code> attribute.  This is the default when not
optimizing.
</p>
<p>Single functions can be exempted from inlining by marking them
with the <code>noinline</code> attribute.
</p>
</dd>
<dt><code>-finline-small-functions</code></dt>
<dd><a name="index-finline_002dsmall_002dfunctions"></a>
<p>Integrate functions into their callers when their body is smaller than expected
function call code (so overall size of program gets smaller).  The compiler
heuristically decides which functions are simple enough to be worth integrating
in this way.  This inlining applies to all functions, even those not declared
inline.
</p>
<p>Enabled at level <samp>-O2</samp>.
</p>
</dd>
<dt><code>-findirect-inlining</code></dt>
<dd><a name="index-findirect_002dinlining"></a>
<p>Inline also indirect calls that are discovered to be known at compile
time thanks to previous inlining.  This option has any effect only
when inlining itself is turned on by the <samp>-finline-functions</samp>
or <samp>-finline-small-functions</samp> options.
</p>
<p>Enabled at level <samp>-O2</samp>.
</p>
</dd>
<dt><code>-finline-functions</code></dt>
<dd><a name="index-finline_002dfunctions"></a>
<p>Consider all functions for inlining, even if they are not declared inline.
The compiler heuristically decides which functions are worth integrating
in this way.
</p>
<p>If all calls to a given function are integrated, and the function is
d236 4
a239 7
</p>
<p>Enabled at level <samp>-O3</samp>.
</p>
</dd>
<dt><code>-finline-functions-called-once</code></dt>
<dd><a name="index-finline_002dfunctions_002dcalled_002donce"></a>
<p>Consider all <code>static</code> functions called once for inlining into their
d243 4
a246 7
</p>
<p>Enabled at levels <samp>-O1</samp>, <samp>-O2</samp>, <samp>-O3</samp> and <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fearly-inlining</code></dt>
<dd><a name="index-fearly_002dinlining"></a>
<p>Inline functions marked by <code>always_inline</code> and functions whose body seems
d248 1
a248 1
<samp>-fprofile-generate</samp> instrumentation and real inlining pass.  Doing so
d251 18
a268 22
</p>
<p>Enabled by default.
</p>
</dd>
<dt><code>-fipa-sra</code></dt>
<dd><a name="index-fipa_002dsra"></a>
<p>Perform interprocedural scalar replacement of aggregates, removal of
unused parameters and replacement of parameters passed by reference
by parameters passed by value.
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp> and <samp>-Os</samp>.
</p>
</dd>
<dt><code>-finline-limit=<var>n</var></code></dt>
<dd><a name="index-finline_002dlimit"></a>
<p>By default, GCC limits the size of functions that can be inlined.  This flag
allows coarse control of this limit.  <var>n</var> is the size of functions that
can be inlined in number of pseudo instructions.
</p>
<p>Inlining is actually controlled by a number of parameters, which may be
specified individually by using <samp>--param <var>name</var>=<var>value</var></samp>.
The <samp>-finline-limit=<var>n</var></samp> option sets some of these parameters
d270 6
a275 8
</p>
<dl compact="compact">
<dt><code>max-inline-insns-single</code></dt>
<dd><p>is set to <var>n</var>/2.
</p></dd>
<dt><code>max-inline-insns-auto</code></dt>
<dd><p>is set to <var>n</var>/2.
</p></dd>
d278 5
a282 8
<p>See below for a documentation of the individual
parameters controlling inlining and for the defaults of these parameters.
</p>
<p><em>Note:</em> there may be no value to <samp>-finline-limit</samp> that results
in default behavior.
</p>
<p><em>Note:</em> pseudo instruction represents, in this particular context, an
abstract measurement of function&rsquo;s size.  In no way does it represent a count
d285 2
a286 13
</p>
</dd>
<dt><code>-fno-keep-inline-dllexport</code></dt>
<dd><a name="index-_002dfno_002dkeep_002dinline_002ddllexport"></a>
<p>This is a more fine-grained version of <samp>-fkeep-inline-functions</samp>,
which applies only to functions that are declared using the <code>dllexport</code>
attribute or declspec (See <a href="Function-Attributes.html#Function-Attributes">Declaring Attributes of
Functions</a>.)
</p>
</dd>
<dt><code>-fkeep-inline-functions</code></dt>
<dd><a name="index-fkeep_002dinline_002dfunctions"></a>
<p>In C, emit <code>static</code> functions that are declared <code>inline</code>
d289 1
a289 1
<code>extern inline</code> extension in GNU C90.  In C++, emit any and all
d291 5
a295 8
</p>
</dd>
<dt><code>-fkeep-static-consts</code></dt>
<dd><a name="index-fkeep_002dstatic_002dconsts"></a>
<p>Emit variables declared <code>static const</code> when optimization isn&rsquo;t turned
on, even if the variables aren&rsquo;t referenced.
</p>
<p>GCC enables this option by default.  If you want to force the compiler to
d297 3
a299 6
optimization is turned on, use the <samp>-fno-keep-static-consts</samp> option.
</p>
</dd>
<dt><code>-fmerge-constants</code></dt>
<dd><a name="index-fmerge_002dconstants"></a>
<p>Attempt to merge identical constants (string constants and floating-point
d301 3
a303 3
</p>
<p>This option is the default for optimized compilation if the assembler and
linker support it.  Use <samp>-fno-merge-constants</samp> to inhibit this
d305 10
a314 14
</p>
<p>Enabled at levels <samp>-O</samp>, <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fmerge-all-constants</code></dt>
<dd><a name="index-fmerge_002dall_002dconstants"></a>
<p>Attempt to merge identical constants and identical variables.
</p>
<p>This option implies <samp>-fmerge-constants</samp>.  In addition to
<samp>-fmerge-constants</samp> this considers e.g. even constant initialized
arrays or initialized constant variables with integral or floating-point
types.  Languages like C or C++ require each variable, including multiple
instances of the same variable in recursive calls, to have distinct locations,
so using this option will result in non-conforming
d316 2
a317 5
</p>
</dd>
<dt><code>-fmodulo-sched</code></dt>
<dd><a name="index-fmodulo_002dsched"></a>
<p>Perform swing modulo scheduling immediately before the first scheduling
d320 2
a321 14
</p>
</dd>
<dt><code>-fmodulo-sched-allow-regmoves</code></dt>
<dd><a name="index-fmodulo_002dsched_002dallow_002dregmoves"></a>
<p>Perform more aggressive SMS based modulo scheduling with register moves
allowed.  By setting this flag certain anti-dependences edges will be
deleted which will trigger the generation of reg-moves based on the
life-range analysis.  This option is effective only with
<samp>-fmodulo-sched</samp> enabled.
</p>
</dd>
<dt><code>-fno-branch-count-reg</code></dt>
<dd><a name="index-fno_002dbranch_002dcount_002dreg"></a>
<p>Do not use &ldquo;decrement and branch&rdquo; instructions on a count register,
d323 1
a323 1
register, compare it against zero, then branch based upon the result.
d326 8
a333 10
</p>
<p>The default is <samp>-fbranch-count-reg</samp>.
</p>
</dd>
<dt><code>-fno-function-cse</code></dt>
<dd><a name="index-fno_002dfunction_002dcse"></a>
<p>Do not put function addresses in registers; make each instruction that
calls a constant function contain the function&rsquo;s address explicitly.
</p>
<p>This option results in less efficient code, but some strange hacks
d336 4
a339 7
</p>
<p>The default is <samp>-ffunction-cse</samp>
</p>
</dd>
<dt><code>-fno-zero-initialized-in-bss</code></dt>
<dd><a name="index-fno_002dzero_002dinitialized_002din_002dbss"></a>
<p>If the target supports a BSS section, GCC by default puts variables that
d342 2
a343 2
</p>
<p>This option turns off this behavior because some programs explicitly
d347 9
a355 11
</p>
<p>The default is <samp>-fzero-initialized-in-bss</samp>.
</p>
</dd>
<dt><code>-fmudflap -fmudflapth -fmudflapir</code></dt>
<dd><a name="index-fmudflap"></a>
<a name="index-fmudflapth"></a>
<a name="index-fmudflapir"></a>
<a name="index-bounds-checking"></a>
<a name="index-mudflap"></a>
<p>For front-ends that support it (C and C++), instrument all risky
d361 3
a363 3
library (<samp>libmudflap</samp>), which will be linked into a program if
<samp>-fmudflap</samp> is given at link time.  Run-time behavior of the
instrumented program is controlled by the <code>MUDFLAP_OPTIONS</code>
d366 4
a369 4
</p>
<p>Use <samp>-fmudflapth</samp> instead of <samp>-fmudflap</samp> to compile and to
link if your program is multi-threaded.  Use <samp>-fmudflapir</samp>, in
addition to <samp>-fmudflap</samp> or <samp>-fmudflapth</samp>, if
d374 7
a380 5
</p>
</dd>
<dt><code>-fthread-jumps</code></dt>
<dd><a name="index-fthread_002djumps"></a>
<p>Perform optimizations where we check to see if a jump branches to a
d385 4
a388 18
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fsplit-wide-types</code></dt>
<dd><a name="index-fsplit_002dwide_002dtypes"></a>
<p>When using a type that occupies multiple registers, such as <code>long
long</code> on a 32-bit system, split the registers apart and allocate them
independently.  This normally generates better code for those types,
but may make debugging more difficult.
</p>
<p>Enabled at levels <samp>-O</samp>, <samp>-O2</samp>, <samp>-O3</samp>,
<samp>-Os</samp>.
</p>
</dd>
<dt><code>-fcse-follow-jumps</code></dt>
<dd><a name="index-fcse_002dfollow_002djumps"></a>
<p>In common subexpression elimination (CSE), scan through jump instructions
d393 5
a397 8
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fcse-skip-blocks</code></dt>
<dd><a name="index-fcse_002dskip_002dblocks"></a>
<p>This is similar to <samp>-fcse-follow-jumps</samp>, but causes CSE to
follow jumps that conditionally skip over blocks.  When CSE
d399 1
a399 1
<samp>-fcse-skip-blocks</samp> causes CSE to follow the jump around the
d401 4
a404 7
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-frerun-cse-after-loop</code></dt>
<dd><a name="index-frerun_002dcse_002dafter_002dloop"></a>
<p>Re-run common subexpression elimination after loop optimizations has been
d406 8
a413 7
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fgcse</code></dt>
<dd><a name="index-fgcse"></a>
<p>Perform a global common subexpression elimination pass.
d415 3
a417 3
</p>
<p><em>Note:</em> When compiling a program using computed gotos, a GCC
extension, you may get better run-time performance if you disable
d419 6
a424 9
<samp>-fno-gcse</samp> to the command line.
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fgcse-lm</code></dt>
<dd><a name="index-fgcse_002dlm"></a>
<p>When <samp>-fgcse-lm</samp> is enabled, global common subexpression elimination will
attempt to move loads that are only killed by stores into themselves.  This
d427 4
a430 7
</p>
<p>Enabled by default when gcse is enabled.
</p>
</dd>
<dt><code>-fgcse-sm</code></dt>
<dd><a name="index-fgcse_002dsm"></a>
<p>When <samp>-fgcse-sm</samp> is enabled, a store motion pass is run after
d432 1
a432 1
stores out of loops.  When used in conjunction with <samp>-fgcse-lm</samp>,
d435 4
a438 7
</p>
<p>Not enabled at any optimization level.
</p>
</dd>
<dt><code>-fgcse-las</code></dt>
<dd><a name="index-fgcse_002dlas"></a>
<p>When <samp>-fgcse-las</samp> is enabled, the global common subexpression
d441 4
a444 7
</p>
<p>Not enabled at any optimization level.
</p>
</dd>
<dt><code>-fgcse-after-reload</code></dt>
<dd><a name="index-fgcse_002dafter_002dreload"></a>
<p>When <samp>-fgcse-after-reload</samp> is enabled, a redundant load elimination
d447 11
a457 5
</p>
</dd>
<dt><code>-funsafe-loop-optimizations</code></dt>
<dd><a name="index-funsafe_002dloop_002doptimizations"></a>
<p>If given, the loop optimizer will assume that loop indices do not
d460 2
a461 2
the loop optimizer itself cannot prove that these assumptions are valid.
Using <samp>-Wunsafe-loop-optimizations</samp>, the compiler will warn you
d463 2
a464 5
</p>
</dd>
<dt><code>-fcrossjumping</code></dt>
<dd><a name="index-fcrossjumping"></a>
<p>Perform cross-jumping transformation.  This transformation unifies equivalent code and save code size.  The
d466 4
a469 27
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fauto-inc-dec</code></dt>
<dd><a name="index-fauto_002dinc_002ddec"></a>
<p>Combine increments or decrements of addresses with memory accesses.
This pass is always skipped on architectures that do not have
instructions to support this.  Enabled by default at <samp>-O</samp> and
higher on architectures that support this.
</p>
</dd>
<dt><code>-fdce</code></dt>
<dd><a name="index-fdce"></a>
<p>Perform dead code elimination (DCE) on RTL.
Enabled by default at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-fdse</code></dt>
<dd><a name="index-fdse"></a>
<p>Perform dead store elimination (DSE) on RTL.
Enabled by default at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-fif-conversion</code></dt>
<dd><a name="index-fif_002dconversion"></a>
<p>Attempt to transform conditional jumps into branch-less equivalents.  This
d473 4
a476 7
</p>
<p>Enabled at levels <samp>-O</samp>, <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fif-conversion2</code></dt>
<dd><a name="index-fif_002dconversion2"></a>
<p>Use conditional execution (where available) to transform conditional jumps into
d478 20
a497 54
</p>
<p>Enabled at levels <samp>-O</samp>, <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fdelete-null-pointer-checks</code></dt>
<dd><a name="index-fdelete_002dnull_002dpointer_002dchecks"></a>
<p>Assume that programs cannot safely dereference null pointers, and that
no code or data element resides there.  This enables simple constant
folding optimizations at all optimization levels.  In addition, other
optimization passes in GCC use this flag to control global dataflow
analyses that eliminate useless checks for null pointers; these assume
that if a pointer is checked after it has already been dereferenced,
it cannot be null.
</p>
<p>Note however that in some environments this assumption is not true.
Use <samp>-fno-delete-null-pointer-checks</samp> to disable this optimization
for programs that depend on that behavior.
</p>
<p>Some targets, especially embedded ones, disable this option at all levels.
Otherwise it is enabled at all levels: <samp>-O0</samp>, <samp>-O1</samp>,
<samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.  Passes that use the information
are enabled independently at different optimization levels.
</p>
</dd>
<dt><code>-fdevirtualize</code></dt>
<dd><a name="index-fdevirtualize"></a>
<p>Attempt to convert calls to virtual functions to direct calls.  This
is done both within a procedure and interprocedurally as part of
indirect inlining (<code>-findirect-inlining</code>) and interprocedural constant
propagation (<samp>-fipa-cp</samp>).
Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fexpensive-optimizations</code></dt>
<dd><a name="index-fexpensive_002doptimizations"></a>
<p>Perform a number of minor optimizations that are relatively expensive.
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-free</code></dt>
<dd><a name="index-free"></a>
<p>Attempt to remove redundant extension instructions.  This is especially
helpful for the x86-64 architecture which implicitly zero-extends in 64-bit
registers after writing to their lower 32-bit half.
</p>
<p>Enabled for x86 at levels <samp>-O2</samp>, <samp>-O3</samp>.
</p>
</dd>
<dt><code>-foptimize-register-move</code></dt>
<dt><code>-fregmove</code></dt>
<dd><a name="index-foptimize_002dregister_002dmove"></a>
<a name="index-fregmove"></a>
<p>Attempt to reassign register numbers in move instructions and as
d501 2
a502 2
</p>
<p>Note <samp>-fregmove</samp> and <samp>-foptimize-register-move</samp> are the same
a503 39
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fira-algorithm=<var>algorithm</var></code></dt>
<dd><p>Use the specified coloring algorithm for the integrated register
allocator.  The <var>algorithm</var> argument can be &lsquo;<samp>priority</samp>&rsquo;, which
specifies Chow&rsquo;s priority coloring, or &lsquo;<samp>CB</samp>&rsquo;, which specifies
Chaitin-Briggs coloring.  Chaitin-Briggs coloring is not implemented
for all architectures, but for those targets that do support it, it is
the default because it generates better code.
</p>
</dd>
<dt><code>-fira-region=<var>region</var></code></dt>
<dd><p>Use specified regions for the integrated register allocator.  The
<var>region</var> argument should be one of the following:
</p>
<dl compact="compact">
<dt>&lsquo;<samp>all</samp>&rsquo;</dt>
<dd><p>Use all loops as register allocation regions.
This can give the best results for machines with a small and/or
irregular register set.
</p>
</dd>
<dt>&lsquo;<samp>mixed</samp>&rsquo;</dt>
<dd><p>Use all loops except for loops with small register pressure 
as the regions.  This value usually gives
the best results in most cases and for most architectures,
and is enabled by default when compiling with optimization for speed
(<samp>-O</samp>, <samp>-O2</samp>, &hellip;).
</p>
</dd>
<dt>&lsquo;<samp>one</samp>&rsquo;</dt>
<dd><p>Use all functions as a single region.  
This typically results in the smallest code size, and is enabled by default for
<samp>-Os</samp> or <samp>-O0</samp>.
</p>
</dd>
</dl>
d505 3
a507 36
</dd>
<dt><code>-fira-loop-pressure</code></dt>
<dd><a name="index-fira_002dloop_002dpressure"></a>
<p>Use IRA to evaluate register pressure in loops for decisions to move
loop invariants.  This option usually results in generation
of faster and smaller code on machines with large register files (&gt;= 32
registers), but it can slow the compiler down.
</p>
<p>This option is enabled at level <samp>-O3</samp> for some targets.
</p>
</dd>
<dt><code>-fno-ira-share-save-slots</code></dt>
<dd><a name="index-fno_002dira_002dshare_002dsave_002dslots"></a>
<p>Disable sharing of stack slots used for saving call-used hard
registers living through a call.  Each hard register gets a
separate stack slot, and as a result function stack frames are
larger.
</p>
</dd>
<dt><code>-fno-ira-share-spill-slots</code></dt>
<dd><a name="index-fno_002dira_002dshare_002dspill_002dslots"></a>
<p>Disable sharing of stack slots allocated for pseudo-registers.  Each
pseudo-register that does not get a hard register gets a separate
stack slot, and as a result function stack frames are larger.
</p>
</dd>
<dt><code>-fira-verbose=<var>n</var></code></dt>
<dd><a name="index-fira_002dverbose"></a>
<p>Control the verbosity of the dump file for the integrated register allocator.
The default value is 5.  If the value <var>n</var> is greater or equal to 10,
the dump output is sent to stderr using the same format as <var>n</var> minus 10.
</p>
</dd>
<dt><code>-fdelayed-branch</code></dt>
<dd><a name="index-fdelayed_002dbranch"></a>
<p>If supported for the target machine, attempt to reorder instructions
d510 4
a513 7
</p>
<p>Enabled at levels <samp>-O</samp>, <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fschedule-insns</code></dt>
<dd><a name="index-fschedule_002dinsns"></a>
<p>If supported for the target machine, attempt to reorder instructions to
d517 5
a521 8
or floating-point instruction is required.
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>.
</p>
</dd>
<dt><code>-fschedule-insns2</code></dt>
<dd><a name="index-fschedule_002dinsns2"></a>
<p>Similar to <samp>-fschedule-insns</samp>, but requests an additional pass of
d525 12
a536 32
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fno-sched-interblock</code></dt>
<dd><a name="index-fno_002dsched_002dinterblock"></a>
<p>Don&rsquo;t schedule instructions across basic blocks.  This is normally
enabled by default when scheduling before register allocation, i.e.
with <samp>-fschedule-insns</samp> or at <samp>-O2</samp> or higher.
</p>
</dd>
<dt><code>-fno-sched-spec</code></dt>
<dd><a name="index-fno_002dsched_002dspec"></a>
<p>Don&rsquo;t allow speculative motion of non-load instructions.  This is normally
enabled by default when scheduling before register allocation, i.e.
with <samp>-fschedule-insns</samp> or at <samp>-O2</samp> or higher.
</p>
</dd>
<dt><code>-fsched-pressure</code></dt>
<dd><a name="index-fsched_002dpressure"></a>
<p>Enable register pressure sensitive insn scheduling before the register
allocation.  This only makes sense when scheduling before register
allocation is enabled, i.e. with <samp>-fschedule-insns</samp> or at
<samp>-O2</samp> or higher.  Usage of this option can improve the
generated code and decrease its size by preventing register pressure
increase above the number of available hard registers and as a
consequence register spills in the register allocation.
</p>
</dd>
<dt><code>-fsched-spec-load</code></dt>
<dd><a name="index-fsched_002dspec_002dload"></a>
<p>Allow speculative motion of some load instructions.  This only makes
d538 3
a540 6
<samp>-fschedule-insns</samp> or at <samp>-O2</samp> or higher.
</p>
</dd>
<dt><code>-fsched-spec-load-dangerous</code></dt>
<dd><a name="index-fsched_002dspec_002dload_002ddangerous"></a>
<p>Allow speculative motion of more load instructions.  This only makes
d542 3
a544 7
<samp>-fschedule-insns</samp> or at <samp>-O2</samp> or higher.
</p>
</dd>
<dt><code>-fsched-stalled-insns</code></dt>
<dt><code>-fsched-stalled-insns=<var>n</var></code></dt>
<dd><a name="index-fsched_002dstalled_002dinsns"></a>
<p>Define how many insns (if any) can be moved prematurely from the queue
d546 2
a547 11
<samp>-fno-sched-stalled-insns</samp> means that no insns will be moved
prematurely, <samp>-fsched-stalled-insns=0</samp> means there is no limit
on how many queued insns can be moved prematurely.
<samp>-fsched-stalled-insns</samp> without a value is equivalent to
<samp>-fsched-stalled-insns=1</samp>.
</p>
</dd>
<dt><code>-fsched-stalled-insns-dep</code></dt>
<dt><code>-fsched-stalled-insns-dep=<var>n</var></code></dt>
<dd><a name="index-fsched_002dstalled_002dinsns_002ddep"></a>
<p>Define how many insn groups (cycles) will be examined for a dependency
d549 4
a552 11
of stalled insns.  This has an effect only during the second scheduling pass,
and only if <samp>-fsched-stalled-insns</samp> is used.
<samp>-fno-sched-stalled-insns-dep</samp> is equivalent to
<samp>-fsched-stalled-insns-dep=0</samp>.
<samp>-fsched-stalled-insns-dep</samp> without a value is equivalent to
<samp>-fsched-stalled-insns-dep=1</samp>.
</p>
</dd>
<dt><code>-fsched2-use-superblocks</code></dt>
<dd><a name="index-fsched2_002duse_002dsuperblocks"></a>
<p>When scheduling after register allocation, do use superblock scheduling
d557 20
a576 99
</p>
<p>This only makes sense when scheduling after register allocation, i.e. with
<samp>-fschedule-insns2</samp> or at <samp>-O2</samp> or higher.
</p>
</dd>
<dt><code>-fsched-group-heuristic</code></dt>
<dd><a name="index-fsched_002dgroup_002dheuristic"></a>
<p>Enable the group heuristic in the scheduler.  This heuristic favors
the instruction that belongs to a schedule group.  This is enabled
by default when scheduling is enabled, i.e. with <samp>-fschedule-insns</samp>
or <samp>-fschedule-insns2</samp> or at <samp>-O2</samp> or higher.
</p>
</dd>
<dt><code>-fsched-critical-path-heuristic</code></dt>
<dd><a name="index-fsched_002dcritical_002dpath_002dheuristic"></a>
<p>Enable the critical-path heuristic in the scheduler.  This heuristic favors
instructions on the critical path.  This is enabled by default when
scheduling is enabled, i.e. with <samp>-fschedule-insns</samp>
or <samp>-fschedule-insns2</samp> or at <samp>-O2</samp> or higher.
</p>
</dd>
<dt><code>-fsched-spec-insn-heuristic</code></dt>
<dd><a name="index-fsched_002dspec_002dinsn_002dheuristic"></a>
<p>Enable the speculative instruction heuristic in the scheduler.  This
heuristic favors speculative instructions with greater dependency weakness.
This is enabled by default when scheduling is enabled, i.e.
with <samp>-fschedule-insns</samp> or <samp>-fschedule-insns2</samp>
or at <samp>-O2</samp> or higher.
</p>
</dd>
<dt><code>-fsched-rank-heuristic</code></dt>
<dd><a name="index-fsched_002drank_002dheuristic"></a>
<p>Enable the rank heuristic in the scheduler.  This heuristic favors
the instruction belonging to a basic block with greater size or frequency.
This is enabled by default when scheduling is enabled, i.e.
with <samp>-fschedule-insns</samp> or <samp>-fschedule-insns2</samp> or
at <samp>-O2</samp> or higher.
</p>
</dd>
<dt><code>-fsched-last-insn-heuristic</code></dt>
<dd><a name="index-fsched_002dlast_002dinsn_002dheuristic"></a>
<p>Enable the last-instruction heuristic in the scheduler.  This heuristic
favors the instruction that is less dependent on the last instruction
scheduled.  This is enabled by default when scheduling is enabled,
i.e. with <samp>-fschedule-insns</samp> or <samp>-fschedule-insns2</samp> or
at <samp>-O2</samp> or higher.
</p>
</dd>
<dt><code>-fsched-dep-count-heuristic</code></dt>
<dd><a name="index-fsched_002ddep_002dcount_002dheuristic"></a>
<p>Enable the dependent-count heuristic in the scheduler.  This heuristic
favors the instruction that has more instructions depending on it.
This is enabled by default when scheduling is enabled, i.e.
with <samp>-fschedule-insns</samp> or <samp>-fschedule-insns2</samp> or
at <samp>-O2</samp> or higher.
</p>
</dd>
<dt><code>-freschedule-modulo-scheduled-loops</code></dt>
<dd><a name="index-freschedule_002dmodulo_002dscheduled_002dloops"></a>
<p>The modulo scheduling comes before the traditional scheduling, if a loop
was modulo scheduled we may want to prevent the later scheduling passes
from changing its schedule, we use this option to control that.
</p>
</dd>
<dt><code>-fselective-scheduling</code></dt>
<dd><a name="index-fselective_002dscheduling"></a>
<p>Schedule instructions using selective scheduling algorithm.  Selective
scheduling runs instead of the first scheduler pass.
</p>
</dd>
<dt><code>-fselective-scheduling2</code></dt>
<dd><a name="index-fselective_002dscheduling2"></a>
<p>Schedule instructions using selective scheduling algorithm.  Selective
scheduling runs instead of the second scheduler pass.
</p>
</dd>
<dt><code>-fsel-sched-pipelining</code></dt>
<dd><a name="index-fsel_002dsched_002dpipelining"></a>
<p>Enable software pipelining of innermost loops during selective scheduling.
This option has no effect until one of <samp>-fselective-scheduling</samp> or
<samp>-fselective-scheduling2</samp> is turned on.
</p>
</dd>
<dt><code>-fsel-sched-pipelining-outer-loops</code></dt>
<dd><a name="index-fsel_002dsched_002dpipelining_002douter_002dloops"></a>
<p>When pipelining loops during selective scheduling, also pipeline outer loops.
This option has no effect until <samp>-fsel-sched-pipelining</samp> is turned on.
</p>
</dd>
<dt><code>-fshrink-wrap</code></dt>
<dd><a name="index-fshrink_002dwrap"></a>
<p>Emit function prologues only before parts of the function that need it,
rather than at the top of the function.  This flag is enabled by default at
<samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-fcaller-saves</code></dt>
<dd><a name="index-fcaller_002dsaves"></a>
<p>Enable values to be allocated in registers that will be clobbered by
d580 2
a581 2
</p>
<p>This option is always enabled by default on certain machines, usually
d583 7
a589 41
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fcombine-stack-adjustments</code></dt>
<dd><a name="index-fcombine_002dstack_002dadjustments"></a>
<p>Tracks stack adjustments (pushes and pops) and stack memory references
and then tries to find ways to combine them.
</p>
<p>Enabled by default at <samp>-O1</samp> and higher.
</p>
</dd>
<dt><code>-fconserve-stack</code></dt>
<dd><a name="index-fconserve_002dstack"></a>
<p>Attempt to minimize stack usage.  The compiler will attempt to use less
stack space, even if that makes the program slower.  This option
implies setting the <samp>large-stack-frame</samp> parameter to 100
and the <samp>large-stack-frame-growth</samp> parameter to 400.
</p>
</dd>
<dt><code>-ftree-reassoc</code></dt>
<dd><a name="index-ftree_002dreassoc"></a>
<p>Perform reassociation on trees.  This flag is enabled by default
at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-ftree-pre</code></dt>
<dd><a name="index-ftree_002dpre"></a>
<p>Perform partial redundancy elimination (PRE) on trees.  This flag is
enabled by default at <samp>-O2</samp> and <samp>-O3</samp>.
</p>
</dd>
<dt><code>-ftree-forwprop</code></dt>
<dd><a name="index-ftree_002dforwprop"></a>
<p>Perform forward propagation on trees.  This flag is enabled by default
at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-ftree-fre</code></dt>
<dd><a name="index-ftree_002dfre"></a>
<p>Perform full redundancy elimination (FRE) on trees.  The difference
d591 6
a596 15
that are computed on all paths leading to the redundant computation.
This analysis is faster than PRE, though it exposes fewer redundancies.
This flag is enabled by default at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-ftree-phiprop</code></dt>
<dd><a name="index-ftree_002dphiprop"></a>
<p>Perform hoisting of loads from conditional pointers on trees.  This
pass is enabled by default at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-ftree-copy-prop</code></dt>
<dd><a name="index-ftree_002dcopy_002dprop"></a>
<p>Perform copy propagation on trees.  This pass eliminates unnecessary
copy operations.  This flag is enabled by default at <samp>-O</samp> and
d598 13
a610 84
</p>
</dd>
<dt><code>-fipa-pure-const</code></dt>
<dd><a name="index-fipa_002dpure_002dconst"></a>
<p>Discover which functions are pure or constant.
Enabled by default at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-fipa-reference</code></dt>
<dd><a name="index-fipa_002dreference"></a>
<p>Discover which static variables do not escape cannot escape the
compilation unit.
Enabled by default at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-fipa-pta</code></dt>
<dd><a name="index-fipa_002dpta"></a>
<p>Perform interprocedural pointer analysis and interprocedural modification
and reference analysis.  This option can cause excessive memory and
compile-time usage on large compilation units.  It is not enabled by
default at any optimization level.
</p>
</dd>
<dt><code>-fipa-profile</code></dt>
<dd><a name="index-fipa_002dprofile"></a>
<p>Perform interprocedural profile propagation.  The functions called only from
cold functions are marked as cold. Also functions executed once (such as
<code>cold</code>, <code>noreturn</code>, static constructors or destructors) are identified. Cold
functions and loop less parts of functions executed once are then optimized for
size.
Enabled by default at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-fipa-cp</code></dt>
<dd><a name="index-fipa_002dcp"></a>
<p>Perform interprocedural constant propagation.
This optimization analyzes the program to determine when values passed
to functions are constants and then optimizes accordingly.
This optimization can substantially increase performance
if the application has constants passed to functions.
This flag is enabled by default at <samp>-O2</samp>, <samp>-Os</samp> and <samp>-O3</samp>.
</p>
</dd>
<dt><code>-fipa-cp-clone</code></dt>
<dd><a name="index-fipa_002dcp_002dclone"></a>
<p>Perform function cloning to make interprocedural constant propagation stronger.
When enabled, interprocedural constant propagation will perform function cloning
when externally visible function can be called with constant arguments.
Because this optimization can create multiple copies of functions,
it may significantly increase code size
(see <samp>--param ipcp-unit-growth=<var>value</var></samp>).
This flag is enabled by default at <samp>-O3</samp>.
</p>
</dd>
<dt><code>-fipa-matrix-reorg</code></dt>
<dd><a name="index-fipa_002dmatrix_002dreorg"></a>
<p>Perform matrix flattening and transposing.
Matrix flattening tries to replace an <em>m</em>-dimensional matrix
with its equivalent <em>n</em>-dimensional matrix, where <em>n &lt; m</em>.
This reduces the level of indirection needed for accessing the elements
of the matrix. The second optimization is matrix transposing, which
attempts to change the order of the matrix&rsquo;s dimensions in order to
improve cache locality.
Both optimizations need the <samp>-fwhole-program</samp> flag.
Transposing is enabled only if profiling information is available.
</p>
</dd>
<dt><code>-ftree-sink</code></dt>
<dd><a name="index-ftree_002dsink"></a>
<p>Perform forward store motion  on trees.  This flag is
enabled by default at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-ftree-bit-ccp</code></dt>
<dd><a name="index-ftree_002dbit_002dccp"></a>
<p>Perform sparse conditional bit constant propagation on trees and propagate
pointer alignment information.
This pass only operates on local scalar variables and is enabled by default
at <samp>-O</samp> and higher.  It requires that <samp>-ftree-ccp</samp> is enabled.
</p>
</dd>
<dt><code>-ftree-ccp</code></dt>
<dd><a name="index-ftree_002dccp"></a>
<p>Perform sparse conditional constant propagation (CCP) on trees.  This
d612 11
a622 35
at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-ftree-switch-conversion</code></dt>
<dd><p>Perform conversion of simple initializations in a switch to
initializations from a scalar array.  This flag is enabled by default
at <samp>-O2</samp> and higher.
</p>
</dd>
<dt><code>-ftree-tail-merge</code></dt>
<dd><p>Look for identical code sequences.  When found, replace one with a jump to the
other.  This optimization is known as tail merging or cross jumping.  This flag
is enabled by default at <samp>-O2</samp> and higher.  The compilation time
in this pass can
be limited using <samp>max-tail-merge-comparisons</samp> parameter and
<samp>max-tail-merge-iterations</samp> parameter.
</p>
</dd>
<dt><code>-ftree-dce</code></dt>
<dd><a name="index-ftree_002ddce"></a>
<p>Perform dead code elimination (DCE) on trees.  This flag is enabled by
default at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-ftree-builtin-call-dce</code></dt>
<dd><a name="index-ftree_002dbuiltin_002dcall_002ddce"></a>
<p>Perform conditional dead code elimination (DCE) for calls to builtin functions
that may set <code>errno</code> but are otherwise side-effect free.  This flag is
enabled by default at <samp>-O2</samp> and higher if <samp>-Os</samp> is not also
specified.
</p>
</dd>
<dt><code>-ftree-dominator-opts</code></dt>
<dd><a name="index-ftree_002ddominator_002dopts"></a>
<p>Perform a variety of simple scalar cleanups (constant/copy
d626 3
a628 14
enabled by default at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-ftree-dse</code></dt>
<dd><a name="index-ftree_002ddse"></a>
<p>Perform dead store elimination (DSE) on trees.  A dead store is a store into
a memory location that is later overwritten by another store without
any intervening loads.  In this case the earlier store can be deleted.  This
flag is enabled by default at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-ftree-ch</code></dt>
<dd><a name="index-ftree_002dch"></a>
<p>Perform loop header copying on trees.  This is beneficial since it increases
d630 10
a639 219
is enabled by default at <samp>-O</samp> and higher.  It is not enabled
for <samp>-Os</samp>, since it usually increases code size.
</p>
</dd>
<dt><code>-ftree-loop-optimize</code></dt>
<dd><a name="index-ftree_002dloop_002doptimize"></a>
<p>Perform loop optimizations on trees.  This flag is enabled by default
at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-ftree-loop-linear</code></dt>
<dd><a name="index-ftree_002dloop_002dlinear"></a>
<p>Perform loop interchange transformations on tree.  Same as
<samp>-floop-interchange</samp>.  To use this code transformation, GCC has
to be configured with <samp>--with-ppl</samp> and <samp>--with-cloog</samp> to
enable the Graphite loop transformation infrastructure.
</p>
</dd>
<dt><code>-floop-interchange</code></dt>
<dd><a name="index-floop_002dinterchange"></a>
<p>Perform loop interchange transformations on loops.  Interchanging two
nested loops switches the inner and outer loops.  For example, given a
loop like:
</p><div class="smallexample">
<pre class="smallexample">DO J = 1, M
  DO I = 1, N
    A(J, I) = A(J, I) * C
  ENDDO
ENDDO
</pre></div>
<p>loop interchange will transform the loop as if the user had written:
</p><div class="smallexample">
<pre class="smallexample">DO I = 1, N
  DO J = 1, M
    A(J, I) = A(J, I) * C
  ENDDO
ENDDO
</pre></div>
<p>which can be beneficial when <code>N</code> is larger than the caches,
because in Fortran, the elements of an array are stored in memory
contiguously by column, and the original loop iterates over rows,
potentially creating at each access a cache miss.  This optimization
applies to all the languages supported by GCC and is not limited to
Fortran.  To use this code transformation, GCC has to be configured
with <samp>--with-ppl</samp> and <samp>--with-cloog</samp> to enable the
Graphite loop transformation infrastructure.
</p>
</dd>
<dt><code>-floop-strip-mine</code></dt>
<dd><a name="index-floop_002dstrip_002dmine"></a>
<p>Perform loop strip mining transformations on loops.  Strip mining
splits a loop into two nested loops.  The outer loop has strides
equal to the strip size and the inner loop has strides of the
original loop within a strip.  The strip length can be changed
using the <samp>loop-block-tile-size</samp> parameter.  For example,
given a loop like:
</p><div class="smallexample">
<pre class="smallexample">DO I = 1, N
  A(I) = A(I) + C
ENDDO
</pre></div>
<p>loop strip mining will transform the loop as if the user had written:
</p><div class="smallexample">
<pre class="smallexample">DO II = 1, N, 51
  DO I = II, min (II + 50, N)
    A(I) = A(I) + C
  ENDDO
ENDDO
</pre></div>
<p>This optimization applies to all the languages supported by GCC and is
not limited to Fortran.  To use this code transformation, GCC has to
be configured with <samp>--with-ppl</samp> and <samp>--with-cloog</samp> to
enable the Graphite loop transformation infrastructure.
</p>
</dd>
<dt><code>-floop-block</code></dt>
<dd><a name="index-floop_002dblock"></a>
<p>Perform loop blocking transformations on loops.  Blocking strip mines
each loop in the loop nest such that the memory accesses of the
element loops fit inside caches.  The strip length can be changed
using the <samp>loop-block-tile-size</samp> parameter.  For example, given
a loop like:
</p><div class="smallexample">
<pre class="smallexample">DO I = 1, N
  DO J = 1, M
    A(J, I) = B(I) + C(J)
  ENDDO
ENDDO
</pre></div>
<p>loop blocking will transform the loop as if the user had written:
</p><div class="smallexample">
<pre class="smallexample">DO II = 1, N, 51
  DO JJ = 1, M, 51
    DO I = II, min (II + 50, N)
      DO J = JJ, min (JJ + 50, M)
        A(J, I) = B(I) + C(J)
      ENDDO
    ENDDO
  ENDDO
ENDDO
</pre></div>
<p>which can be beneficial when <code>M</code> is larger than the caches,
because the innermost loop will iterate over a smaller amount of data
which can be kept in the caches.  This optimization applies to all the
languages supported by GCC and is not limited to Fortran.  To use this
code transformation, GCC has to be configured with <samp>--with-ppl</samp>
and <samp>--with-cloog</samp> to enable the Graphite loop transformation
infrastructure.
</p>
</dd>
<dt><code>-fgraphite-identity</code></dt>
<dd><a name="index-fgraphite_002didentity"></a>
<p>Enable the identity transformation for graphite.  For every SCoP we generate
the polyhedral representation and transform it back to gimple.  Using
<samp>-fgraphite-identity</samp> we can check the costs or benefits of the
GIMPLE -&gt; GRAPHITE -&gt; GIMPLE transformation.  Some minimal optimizations
are also performed by the code generator CLooG, like index splitting and
dead code elimination in loops.
</p>
</dd>
<dt><code>-floop-flatten</code></dt>
<dd><a name="index-floop_002dflatten"></a>
<p>Removes the loop nesting structure: transforms the loop nest into a
single loop.  This transformation can be useful as an enablement
transform for vectorization and parallelization.  This feature
is experimental.
To use this code transformation, GCC has to be configured
with <samp>--with-ppl</samp> and <samp>--with-cloog</samp> to enable the
Graphite loop transformation infrastructure.
</p>
</dd>
<dt><code>-floop-parallelize-all</code></dt>
<dd><a name="index-floop_002dparallelize_002dall"></a>
<p>Use the Graphite data dependence analysis to identify loops that can
be parallelized.  Parallelize all the loops that can be analyzed to
not contain loop carried dependences without checking that it is
profitable to parallelize the loops.
</p>
</dd>
<dt><code>-fcheck-data-deps</code></dt>
<dd><a name="index-fcheck_002ddata_002ddeps"></a>
<p>Compare the results of several data dependence analyzers.  This option
is used for debugging the data dependence analyzers.
</p>
</dd>
<dt><code>-ftree-loop-if-convert</code></dt>
<dd><p>Attempt to transform conditional jumps in the innermost loops to
branch-less equivalents.  The intent is to remove control-flow from
the innermost loops in order to improve the ability of the
vectorization pass to handle these loops.  This is enabled by default
if vectorization is enabled.
</p>
</dd>
<dt><code>-ftree-loop-if-convert-stores</code></dt>
<dd><p>Attempt to also if-convert conditional jumps containing memory writes.
This transformation can be unsafe for multi-threaded programs as it
transforms conditional memory writes into unconditional memory writes.
For example,
</p><div class="smallexample">
<pre class="smallexample">for (i = 0; i &lt; N; i++)
  if (cond)
    A[i] = expr;
</pre></div>
<p>would be transformed to
</p><div class="smallexample">
<pre class="smallexample">for (i = 0; i &lt; N; i++)
  A[i] = cond ? expr : A[i];
</pre></div>
<p>potentially producing data races.
</p>
</dd>
<dt><code>-ftree-loop-distribution</code></dt>
<dd><p>Perform loop distribution.  This flag can improve cache performance on
big loop bodies and allow further loop optimizations, like
parallelization or vectorization, to take place.  For example, the loop
</p><div class="smallexample">
<pre class="smallexample">DO I = 1, N
  A(I) = B(I) + C
  D(I) = E(I) * F
ENDDO
</pre></div>
<p>is transformed to
</p><div class="smallexample">
<pre class="smallexample">DO I = 1, N
   A(I) = B(I) + C
ENDDO
DO I = 1, N
   D(I) = E(I) * F
ENDDO
</pre></div>

</dd>
<dt><code>-ftree-loop-distribute-patterns</code></dt>
<dd><p>Perform loop distribution of patterns that can be code generated with
calls to a library.  This flag is enabled by default at <samp>-O3</samp>.
</p>
<p>This pass distributes the initialization loops and generates a call to
memset zero.  For example, the loop
</p><div class="smallexample">
<pre class="smallexample">DO I = 1, N
  A(I) = 0
  B(I) = A(I) + I
ENDDO
</pre></div>
<p>is transformed to
</p><div class="smallexample">
<pre class="smallexample">DO I = 1, N
   A(I) = 0
ENDDO
DO I = 1, N
   B(I) = A(I) + I
ENDDO
</pre></div>
<p>and the initialization loop is transformed into a call to memset zero.
</p>
</dd>
<dt><code>-ftree-loop-im</code></dt>
<dd><a name="index-ftree_002dloop_002dim"></a>
<p>Perform loop invariant motion on trees.  This pass moves only invariants that
d641 1
a641 1
nontrivial sequences of insns).  With <samp>-funswitch-loops</samp> it also moves
d645 2
a646 5
</p>
</dd>
<dt><code>-ftree-loop-ivcanon</code></dt>
<dd><a name="index-ftree_002dloop_002divcanon"></a>
<p>Create a canonical counter for number of iterations in loops for which
d650 2
a651 5
</p>
</dd>
<dt><code>-fivopts</code></dt>
<dd><a name="index-fivopts"></a>
<p>Perform induction variable optimizations (strength reduction, induction
d653 2
a654 22
</p>
</dd>
<dt><code>-ftree-parallelize-loops=n</code></dt>
<dd><a name="index-ftree_002dparallelize_002dloops"></a>
<p>Parallelize loops, i.e., split their iteration space to run in n threads.
This is only possible for loops whose iterations are independent
and can be arbitrarily reordered.  The optimization is only
profitable on multiprocessor machines, for loops that are CPU-intensive,
rather than constrained e.g. by memory bandwidth.  This option
implies <samp>-pthread</samp>, and thus is only supported on targets
that have support for <samp>-pthread</samp>.
</p>
</dd>
<dt><code>-ftree-pta</code></dt>
<dd><a name="index-ftree_002dpta"></a>
<p>Perform function-local points-to analysis on trees.  This flag is
enabled by default at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-ftree-sra</code></dt>
<dd><a name="index-ftree_002dsra"></a>
<p>Perform scalar replacement of aggregates.  This pass replaces structure
d656 3
a658 6
early.  This flag is enabled by default at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-ftree-copyrename</code></dt>
<dd><a name="index-ftree_002dcopyrename"></a>
<p>Perform copy renaming on trees.  This pass attempts to rename compiler
d661 3
a663 6
is enabled by default at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-ftree-ter</code></dt>
<dd><a name="index-ftree_002dter"></a>
<p>Perform temporary expression replacement during the SSA-&gt;normal phase.  Single
d667 9
a675 18
enabled by default at <samp>-O</samp> and higher.
</p>
</dd>
<dt><code>-ftree-vectorize</code></dt>
<dd><a name="index-ftree_002dvectorize"></a>
<p>Perform loop vectorization on trees. This flag is enabled by default at
<samp>-O3</samp>.
</p>
</dd>
<dt><code>-ftree-slp-vectorize</code></dt>
<dd><a name="index-ftree_002dslp_002dvectorize"></a>
<p>Perform basic block vectorization on trees. This flag is enabled by default at
<samp>-O3</samp> and when <samp>-ftree-vectorize</samp> is enabled.
</p>
</dd>
<dt><code>-ftree-vect-loop-version</code></dt>
<dd><a name="index-ftree_002dvect_002dloop_002dversion"></a>
<p>Perform loop versioning when doing loop vectorization on trees.  When a loop
d677 2
a678 2
be determined at compile time, then vectorized and non-vectorized versions of
the loop are generated along with run-time checks for alignment or dependence
d680 3
a682 11
except at level <samp>-Os</samp> where it is disabled.
</p>
</dd>
<dt><code>-fvect-cost-model</code></dt>
<dd><a name="index-fvect_002dcost_002dmodel"></a>
<p>Enable cost model for vectorization.
</p>
</dd>
<dt><code>-ftree-vrp</code></dt>
<dd><a name="index-ftree_002dvrp"></a>
<p>Perform Value Range Propagation on trees.  This is similar to the
d686 2
a687 2
enabled by default at <samp>-O2</samp> and higher.  Null pointer check
elimination is only done if <samp>-fdelete-null-pointer-checks</samp> is
d689 2
a690 5
</p>
</dd>
<dt><code>-ftracer</code></dt>
<dd><a name="index-ftracer"></a>
<p>Perform tail duplication to enlarge superblock size.  This transformation
d693 12
a704 21
</p>
</dd>
<dt><code>-funroll-loops</code></dt>
<dd><a name="index-funroll_002dloops"></a>
<p>Unroll loops whose number of iterations can be determined at compile
time or upon entry to the loop.  <samp>-funroll-loops</samp> implies
<samp>-frerun-cse-after-loop</samp>.  This option makes code larger,
and may or may not make it run faster.
</p>
</dd>
<dt><code>-funroll-all-loops</code></dt>
<dd><a name="index-funroll_002dall_002dloops"></a>
<p>Unroll all loops, even if their number of iterations is uncertain when
the loop is entered.  This usually makes programs run more slowly.
<samp>-funroll-all-loops</samp> implies the same options as
<samp>-funroll-loops</samp>,
</p>
</dd>
<dt><code>-fsplit-ivs-in-unroller</code></dt>
<dd><a name="index-fsplit_002divs_002din_002dunroller"></a>
<p>Enables expressing of values of induction variables in later iterations
d707 2
a708 2
</p>
<p>Combination of <samp>-fweb</samp> and CSE is often sufficient to obtain the
d712 4
a715 7
</p>
<p>This optimization is enabled by default.
</p>
</dd>
<dt><code>-fvariable-expansion-in-unroller</code></dt>
<dd><a name="index-fvariable_002dexpansion_002din_002dunroller"></a>
<p>With this option, the compiler will create multiple copies of some
d717 2
a718 23
</p>
</dd>
<dt><code>-fpartial-inlining</code></dt>
<dd><a name="index-fpartial_002dinlining"></a>
<p>Inline parts of functions.  This option has any effect only
when inlining itself is turned on by the <samp>-finline-functions</samp>
or <samp>-finline-small-functions</samp> options.
</p>
<p>Enabled at level <samp>-O2</samp>.
</p>
</dd>
<dt><code>-fpredictive-commoning</code></dt>
<dd><a name="index-fpredictive_002dcommoning"></a>
<p>Perform predictive commoning optimization, i.e., reusing computations
(especially memory loads and stores) performed in previous
iterations of loops.
</p>
<p>This option is enabled at level <samp>-O3</samp>.
</p>
</dd>
<dt><code>-fprefetch-loop-arrays</code></dt>
<dd><a name="index-fprefetch_002dloop_002darrays"></a>
<p>If supported by the target machine, generate instructions to prefetch
d720 2
a721 2
</p>
<p>This option may generate better or worse code; results are highly
d723 3
a725 10
</p>
<p>Disabled at level <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fno-peephole</code></dt>
<dt><code>-fno-peephole2</code></dt>
<dd><a name="index-fno_002dpeephole"></a>
<a name="index-fno_002dpeephole2"></a>
<p>Disable any machine-specific peephole optimizations.  The difference
between <samp>-fno-peephole</samp> and <samp>-fno-peephole2</samp> is in how they
d728 8
a735 11
</p>
<p><samp>-fpeephole</samp> is enabled by default.
<samp>-fpeephole2</samp> enabled at levels <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fno-guess-branch-probability</code></dt>
<dd><a name="index-fno_002dguess_002dbranch_002dprobability"></a>
<p>Do not guess branch probabilities using heuristics.
</p>
<p>GCC will use heuristics to guess branch probabilities if they are
not provided by profiling feedback (<samp>-fprofile-arcs</samp>).  These
d737 1
a737 1
are specified by &lsquo;<samp>__builtin_expect</samp>&rsquo;, then the heuristics will be
d739 2
a740 2
taking the &lsquo;<samp>__builtin_expect</samp>&rsquo; info into account.  The interactions
between the heuristics and &lsquo;<samp>__builtin_expect</samp>&rsquo; can be complex, and in
d742 6
a747 9
of &lsquo;<samp>__builtin_expect</samp>&rsquo; are easier to understand.
</p>
<p>The default is <samp>-fguess-branch-probability</samp> at levels
<samp>-O</samp>, <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-freorder-blocks</code></dt>
<dd><a name="index-freorder_002dblocks"></a>
<p>Reorder basic blocks in the compiled function in order to reduce number of
d749 4
a752 7
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>.
</p>
</dd>
<dt><code>-freorder-blocks-and-partition</code></dt>
<dd><a name="index-freorder_002dblocks_002dand_002dpartition"></a>
<p>In addition to reordering basic blocks in the compiled function, in order
d756 2
a757 2
</p>
<p>This optimization is automatically turned off in the presence of
d761 2
a762 5
</p>
</dd>
<dt><code>-freorder-functions</code></dt>
<dd><a name="index-freorder_002dfunctions"></a>
<p>Reorder functions in the object file in order to
d768 7
a774 10
</p>
<p>Also profile feedback must be available in to make this option effective.  See
<samp>-fprofile-arcs</samp> for details.
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fstrict-aliasing</code></dt>
<dd><a name="index-fstrict_002daliasing"></a>
<p>Allow the compiler to assume the strictest aliasing rules applicable to
d782 14
a795 15
</p>
<a name="Type_002dpunning"></a><p>Pay special attention to code like this:
</p><div class="smallexample">
<pre class="smallexample">union a_union {
  int i;
  double d;
};

int f() {
  union a_union t;
  t.d = 3.0;
  return t.i;
}
</pre></div>
<p>The practice of reading from a different union member than the one most
d797 1
a797 1
<samp>-fstrict-aliasing</samp>, type-punning is allowed, provided the memory
d799 18
a816 65
expected.  See <a href="Structures-unions-enumerations-and-bit_002dfields-implementation.html#Structures-unions-enumerations-and-bit_002dfields-implementation">Structures unions enumerations and bit-fields implementation</a>.  However, this code might not:
</p><div class="smallexample">
<pre class="smallexample">int f() {
  union a_union t;
  int* ip;
  t.d = 3.0;
  ip = &amp;t.i;
  return *ip;
}
</pre></div>

<p>Similarly, access by taking the address, casting the resulting pointer
and dereferencing the result has undefined behavior, even if the cast
uses a union type, e.g.:
</p><div class="smallexample">
<pre class="smallexample">int f() {
  double d = 3.0;
  return ((union a_union *) &amp;d)-&gt;i;
}
</pre></div>

<p>The <samp>-fstrict-aliasing</samp> option is enabled at levels
<samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fstrict-overflow</code></dt>
<dd><a name="index-fstrict_002doverflow"></a>
<p>Allow the compiler to assume strict signed overflow rules, depending
on the language being compiled.  For C (and C++) this means that
overflow when doing arithmetic with signed numbers is undefined, which
means that the compiler may assume that it will not happen.  This
permits various optimizations.  For example, the compiler will assume
that an expression like <code>i + 10 &gt; i</code> will always be true for
signed <code>i</code>.  This assumption is only valid if signed overflow is
undefined, as the expression is false if <code>i + 10</code> overflows when
using twos complement arithmetic.  When this option is in effect any
attempt to determine whether an operation on signed numbers will
overflow must be written carefully to not actually involve overflow.
</p>
<p>This option also allows the compiler to assume strict pointer
semantics: given a pointer to an object, if adding an offset to that
pointer does not produce a pointer to the same object, the addition is
undefined.  This permits the compiler to conclude that <code>p + u &gt;
p</code> is always true for a pointer <code>p</code> and unsigned integer
<code>u</code>.  This assumption is only valid because pointer wraparound is
undefined, as the expression is false if <code>p + u</code> overflows using
twos complement arithmetic.
</p>
<p>See also the <samp>-fwrapv</samp> option.  Using <samp>-fwrapv</samp> means
that integer signed overflow is fully defined: it wraps.  When
<samp>-fwrapv</samp> is used, there is no difference between
<samp>-fstrict-overflow</samp> and <samp>-fno-strict-overflow</samp> for
integers.  With <samp>-fwrapv</samp> certain types of overflow are
permitted.  For example, if the compiler gets an overflow when doing
arithmetic on constants, the overflowed value can still be used with
<samp>-fwrapv</samp>, but not otherwise.
</p>
<p>The <samp>-fstrict-overflow</samp> option is enabled at levels
<samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-falign-functions</code></dt>
<dt><code>-falign-functions=<var>n</var></code></dt>
<dd><a name="index-falign_002dfunctions"></a>
<p>Align the start of functions to the next power-of-two greater than
d818 2
a819 2
<samp>-falign-functions=32</samp> aligns functions to the next 32-byte
boundary, but <samp>-falign-functions=24</samp> would align to the next
d821 2
a822 2
</p>
<p><samp>-fno-align-functions</samp> and <samp>-falign-functions=1</samp> are
d824 2
a825 2
</p>
<p>Some assemblers only support this flag when <var>n</var> is a power of two;
d827 7
a833 11
</p>
<p>If <var>n</var> is not specified or is zero, use a machine-dependent default.
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>.
</p>
</dd>
<dt><code>-falign-labels</code></dt>
<dt><code>-falign-labels=<var>n</var></code></dt>
<dd><a name="index-falign_002dlabels"></a>
<p>Align all branch targets to a power-of-two boundary, skipping up to
<var>n</var> bytes like <samp>-falign-functions</samp>.  This option can easily
d836 2
a837 2
</p>
<p><samp>-fno-align-labels</samp> and <samp>-falign-labels=1</samp> are
d839 2
a840 2
</p>
<p>If <samp>-falign-loops</samp> or <samp>-falign-jumps</samp> are applicable and
d842 8
a849 12
</p>
<p>If <var>n</var> is not specified or is zero, use a machine-dependent default
which is very likely to be &lsquo;<samp>1</samp>&rsquo;, meaning no alignment.
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>.
</p>
</dd>
<dt><code>-falign-loops</code></dt>
<dt><code>-falign-loops=<var>n</var></code></dt>
<dd><a name="index-falign_002dloops"></a>
<p>Align loops to a power-of-two boundary, skipping up to <var>n</var> bytes
like <samp>-falign-functions</samp>.  The hope is that the loop will be
d852 2
a853 2
</p>
<p><samp>-fno-align-loops</samp> and <samp>-falign-loops=1</samp> are
d855 6
a860 10
</p>
<p>If <var>n</var> is not specified or is zero, use a machine-dependent default.
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>.
</p>
</dd>
<dt><code>-falign-jumps</code></dt>
<dt><code>-falign-jumps=<var>n</var></code></dt>
<dd><a name="index-falign_002djumps"></a>
<p>Align branch targets to a power-of-two boundary, for branch targets
d862 1
a862 1
bytes like <samp>-falign-functions</samp>.  In this case, no dummy operations
d864 2
a865 2
</p>
<p><samp>-fno-align-jumps</samp> and <samp>-falign-jumps=1</samp> are
d867 35
a901 32
</p>
<p>If <var>n</var> is not specified or is zero, use a machine-dependent default.
</p>
<p>Enabled at levels <samp>-O2</samp>, <samp>-O3</samp>.
</p>
</dd>
<dt><code>-funit-at-a-time</code></dt>
<dd><a name="index-funit_002dat_002da_002dtime"></a>
<p>This option is left for compatibility reasons. <samp>-funit-at-a-time</samp>
has no effect, while <samp>-fno-unit-at-a-time</samp> implies
<samp>-fno-toplevel-reorder</samp> and <samp>-fno-section-anchors</samp>.
</p>
<p>Enabled by default.
</p>
</dd>
<dt><code>-fno-toplevel-reorder</code></dt>
<dd><a name="index-fno_002dtoplevel_002dreorder"></a>
<p>Do not reorder top-level functions, variables, and <code>asm</code>
statements.  Output them in the same order that they appear in the
input file.  When this option is used, unreferenced static variables
will not be removed.  This option is intended to support existing code
that relies on a particular ordering.  For new code, it is better to
use attributes.
</p>
<p>Enabled at level <samp>-O0</samp>.  When disabled explicitly, it also implies
<samp>-fno-section-anchors</samp>, which is otherwise enabled at <samp>-O0</samp> on some
targets.
</p>
</dd>
<dt><code>-fweb</code></dt>
<dd><a name="index-fweb"></a>
<p>Constructs webs as commonly used for register allocation purposes and assign
d907 4
a910 7
</p>
<p>Enabled by default with <samp>-funroll-loops</samp>.
</p>
</dd>
<dt><code>-fwhole-program</code></dt>
<dd><a name="index-fwhole_002dprogram"></a>
<p>Assume that the current compilation unit represents the whole program being
d913 8
a920 265
and in effect are optimized more aggressively by interprocedural optimizers. If <code>gold</code> is used as the linker plugin, <code>externally_visible</code> attributes are automatically added to functions (not variable yet due to a current <code>gold</code> issue) that are accessed outside of LTO objects according to resolution file produced by <code>gold</code>.  For other linkers that cannot generate resolution file, explicit <code>externally_visible</code> attributes are still necessary.
While this option is equivalent to proper use of the <code>static</code> keyword for
programs consisting of a single file, in combination with option
<samp>-flto</samp> this flag can be used to
compile many smaller scale programs since the functions and variables become
local for the whole combined compilation unit, not for the single source file
itself.
</p>
<p>This option implies <samp>-fwhole-file</samp> for Fortran programs.
</p>
</dd>
<dt><code>-flto[=<var>n</var>]</code></dt>
<dd><a name="index-flto"></a>
<p>This option runs the standard link-time optimizer.  When invoked
with source code, it generates GIMPLE (one of GCC&rsquo;s internal
representations) and writes it to special ELF sections in the object
file.  When the object files are linked together, all the function
bodies are read from these ELF sections and instantiated as if they
had been part of the same translation unit.
</p>
<p>To use the link-time optimizer, <samp>-flto</samp> needs to be specified at
compile time and during the final link.  For example:
</p>
<div class="smallexample">
<pre class="smallexample">gcc -c -O2 -flto foo.c
gcc -c -O2 -flto bar.c
gcc -o myprog -flto -O2 foo.o bar.o
</pre></div>

<p>The first two invocations to GCC save a bytecode representation
of GIMPLE into special ELF sections inside <samp>foo.o</samp> and
<samp>bar.o</samp>.  The final invocation reads the GIMPLE bytecode from
<samp>foo.o</samp> and <samp>bar.o</samp>, merges the two files into a single
internal image, and compiles the result as usual.  Since both
<samp>foo.o</samp> and <samp>bar.o</samp> are merged into a single image, this
causes all the interprocedural analyses and optimizations in GCC to
work across the two files as if they were a single one.  This means,
for example, that the inliner is able to inline functions in
<samp>bar.o</samp> into functions in <samp>foo.o</samp> and vice-versa.
</p>
<p>Another (simpler) way to enable link-time optimization is:
</p>
<div class="smallexample">
<pre class="smallexample">gcc -o myprog -flto -O2 foo.c bar.c
</pre></div>

<p>The above generates bytecode for <samp>foo.c</samp> and <samp>bar.c</samp>,
merges them together into a single GIMPLE representation and optimizes
them as usual to produce <samp>myprog</samp>.
</p>
<p>The only important thing to keep in mind is that to enable link-time
optimizations the <samp>-flto</samp> flag needs to be passed to both the
compile and the link commands.
</p>
<p>To make whole program optimization effective, it is necessary to make
certain whole program assumptions.  The compiler needs to know
what functions and variables can be accessed by libraries and runtime
outside of the link-time optimized unit.  When supported by the linker,
the linker plugin (see <samp>-fuse-linker-plugin</samp>) passes information
to the compiler about used and externally visible symbols.  When
the linker plugin is not available, <samp>-fwhole-program</samp> should be
used to allow the compiler to make these assumptions, which leads
to more aggressive optimization decisions.
</p>
<p>Note that when a file is compiled with <samp>-flto</samp>, the generated
object file is larger than a regular object file because it 
contains GIMPLE bytecodes and the usual final code.  This means that
object files with LTO information can be linked as normal object
files; if <samp>-flto</samp> is not passed to the linker, no
interprocedural optimizations are applied.
</p>
<p>Additionally, the optimization flags used to compile individual files
are not necessarily related to those used at link time.  For instance,
</p>
<div class="smallexample">
<pre class="smallexample">gcc -c -O0 -flto foo.c
gcc -c -O0 -flto bar.c
gcc -o myprog -flto -O3 foo.o bar.o
</pre></div>

<p>This produces individual object files with unoptimized assembler
code, but the resulting binary <samp>myprog</samp> is optimized at
<samp>-O3</samp>.  If, instead, the final binary is generated without
<samp>-flto</samp>, then <samp>myprog</samp> is not optimized.
</p>
<p>When producing the final binary with <samp>-flto</samp>, GCC only
applies link-time optimizations to those files that contain bytecode.
Therefore, you can mix and match object files and libraries with
GIMPLE bytecodes and final object code.  GCC automatically selects
which files to optimize in LTO mode and which files to link without
further processing.
</p>
<p>There are some code generation flags preserved by GCC when
generating bytecodes, as they need to be used during the final link
stage.  Currently, the following options are saved into the GIMPLE
bytecode files: <samp>-fPIC</samp>, <samp>-fcommon</samp> and all the
<samp>-m</samp> target flags.
</p>
<p>At link time, these options are read in and reapplied.  Note that the
current implementation makes no attempt to recognize conflicting
values for these options.  If different files have conflicting option
values (e.g., one file is compiled with <samp>-fPIC</samp> and another
isn&rsquo;t), the compiler simply uses the last value read from the
bytecode files.  It is recommended, then, that you compile all the files
participating in the same link with the same options.
</p>
<p>If LTO encounters objects with C linkage declared with incompatible
types in separate translation units to be linked together (undefined
behavior according to ISO C99 6.2.7), a non-fatal diagnostic may be
issued.  The behavior is still undefined at run time.
</p>
<p>Another feature of LTO is that it is possible to apply interprocedural
optimizations on files written in different languages.  This requires
support in the language front end.  Currently, the C, C++ and
Fortran front ends are capable of emitting GIMPLE bytecodes, so
something like this should work:
</p>
<div class="smallexample">
<pre class="smallexample">gcc -c -flto foo.c
g++ -c -flto bar.cc
gfortran -c -flto baz.f90
g++ -o myprog -flto -O3 foo.o bar.o baz.o -lgfortran
</pre></div>

<p>Notice that the final link is done with <code>g++</code> to get the C++
runtime libraries and <samp>-lgfortran</samp> is added to get the Fortran
runtime libraries.  In general, when mixing languages in LTO mode, you
should use the same link command options as when mixing languages in a
regular (non-LTO) compilation; all you need to add is <samp>-flto</samp> to
all the compile and link commands.
</p>
<p>If object files containing GIMPLE bytecode are stored in a library archive, say
<samp>libfoo.a</samp>, it is possible to extract and use them in an LTO link if you
are using a linker with plugin support.  To enable this feature, use
the flag <samp>-fuse-linker-plugin</samp> at link time:
</p>
<div class="smallexample">
<pre class="smallexample">gcc -o myprog -O2 -flto -fuse-linker-plugin a.o b.o -lfoo
</pre></div>

<p>With the linker plugin enabled, the linker extracts the needed
GIMPLE files from <samp>libfoo.a</samp> and passes them on to the running GCC
to make them part of the aggregated GIMPLE image to be optimized.
</p>
<p>If you are not using a linker with plugin support and/or do not
enable the linker plugin, then the objects inside <samp>libfoo.a</samp>
are extracted and linked as usual, but they do not participate
in the LTO optimization process.
</p>
<p>Link-time optimizations do not require the presence of the whole program to
operate.  If the program does not require any symbols to be exported, it is
possible to combine <samp>-flto</samp> and <samp>-fwhole-program</samp> to allow
the interprocedural optimizers to use more aggressive assumptions which may
lead to improved optimization opportunities.
Use of <samp>-fwhole-program</samp> is not needed when linker plugin is
active (see <samp>-fuse-linker-plugin</samp>).
</p>
<p>The current implementation of LTO makes no
attempt to generate bytecode that is portable between different
types of hosts.  The bytecode files are versioned and there is a
strict version check, so bytecode files generated in one version of
GCC will not work with an older/newer version of GCC.
</p>
<p>Link-time optimization does not work well with generation of debugging
information.  Combining <samp>-flto</samp> with
<samp>-g</samp> is currently experimental and expected to produce wrong
results.
</p>
<p>If you specify the optional <var>n</var>, the optimization and code
generation done at link time is executed in parallel using <var>n</var>
parallel jobs by utilizing an installed <code>make</code> program.  The
environment variable <code>MAKE</code> may be used to override the program
used.  The default value for <var>n</var> is 1.
</p>
<p>You can also specify <samp>-flto=jobserver</samp> to use GNU make&rsquo;s
job server mode to determine the number of parallel jobs. This
is useful when the Makefile calling GCC is already executing in parallel.
You must prepend a &lsquo;<samp>+</samp>&rsquo; to the command recipe in the parent Makefile
for this to work.  This option likely only works if <code>MAKE</code> is
GNU make.
</p>
<p>This option is disabled by default
</p>
</dd>
<dt><code>-flto-partition=<var>alg</var></code></dt>
<dd><a name="index-flto_002dpartition"></a>
<p>Specify the partitioning algorithm used by the link-time optimizer.
The value is either <code>1to1</code> to specify a partitioning mirroring
the original source files or <code>balanced</code> to specify partitioning
into equally sized chunks (whenever possible).  Specifying <code>none</code>
as an algorithm disables partitioning and streaming completely. The
default value is <code>balanced</code>.
</p>
</dd>
<dt><code>-flto-compression-level=<var>n</var></code></dt>
<dd><p>This option specifies the level of compression used for intermediate
language written to LTO object files, and is only meaningful in
conjunction with LTO mode (<samp>-flto</samp>).  Valid
values are 0 (no compression) to 9 (maximum compression).  Values
outside this range are clamped to either 0 or 9.  If the option is not
given, a default balanced compression setting is used.
</p>
</dd>
<dt><code>-flto-report</code></dt>
<dd><p>Prints a report with internal details on the workings of the link-time
optimizer.  The contents of this report vary from version to version.
It is meant to be useful to GCC developers when processing object
files in LTO mode (via <samp>-flto</samp>).
</p>
<p>Disabled by default.
</p>
</dd>
<dt><code>-fuse-linker-plugin</code></dt>
<dd><p>Enables the use of a linker plugin during link-time optimization.  This
option relies on plugin support in the linker, which is available in gold
or in GNU ld 2.21 or newer.
</p>
<p>This option enables the extraction of object files with GIMPLE bytecode out
of library archives. This improves the quality of optimization by exposing
more code to the link-time optimizer.  This information specifies what
symbols can be accessed externally (by non-LTO object or during dynamic
linking).  Resulting code quality improvements on binaries (and shared
libraries that use hidden visibility) are similar to <code>-fwhole-program</code>.
See <samp>-flto</samp> for a description of the effect of this flag and how to
use it.
</p>
<p>This option is enabled by default when LTO support in GCC is enabled
and GCC was configured for use with
a linker supporting plugins (GNU ld 2.21 or newer or gold).
</p>
</dd>
<dt><code>-ffat-lto-objects</code></dt>
<dd><a name="index-ffat_002dlto_002dobjects"></a>
<p>Fat LTO objects are object files that contain both the intermediate language
and the object code. This makes them usable for both LTO linking and normal
linking. This option is effective only when compiling with <samp>-flto</samp>
and is ignored at link time.
</p>
<p><samp>-fno-fat-lto-objects</samp> improves compilation time over plain LTO, but
requires the complete toolchain to be aware of LTO. It requires a linker with
linker plugin support for basic functionality.  Additionally, nm, ar and ranlib
need to support linker plugins to allow a full-featured build environment
(capable of building static libraries etc).
</p>
<p>The default is <samp>-ffat-lto-objects</samp> but this default is intended to
change in future releases when linker plugin enabled environments become more
common.
</p>
</dd>
<dt><code>-fcompare-elim</code></dt>
<dd><a name="index-fcompare_002delim"></a>
<p>After register allocation and post-register allocation instruction splitting,
identify arithmetic instructions that compute processor flags similar to a
comparison operation based on that arithmetic.  If possible, eliminate the
explicit comparison operation.
</p>
<p>This pass only applies to certain targets that cannot explicitly represent
the comparison operation before register allocation is complete.
</p>
<p>Enabled at levels <samp>-O</samp>, <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fcprop-registers</code></dt>
<dd><a name="index-fcprop_002dregisters"></a>
<p>After register allocation and post-register allocation instruction splitting,
a922 27
</p>
<p>Enabled at levels <samp>-O</samp>, <samp>-O2</samp>, <samp>-O3</samp>, <samp>-Os</samp>.
</p>
</dd>
<dt><code>-fprofile-correction</code></dt>
<dd><a name="index-fprofile_002dcorrection"></a>
<p>Profiles collected using an instrumented binary for multi-threaded programs may
be inconsistent due to missed counter updates. When this option is specified,
GCC will use heuristics to correct or smooth out such inconsistencies. By
default, GCC will emit an error message when an inconsistent profile is detected.
</p>
</dd>
<dt><code>-fprofile-dir=<var>path</var></code></dt>
<dd><a name="index-fprofile_002ddir"></a>

<p>Set the directory to search for the profile data files in to <var>path</var>.
This option affects only the profile data generated by
<samp>-fprofile-generate</samp>, <samp>-ftest-coverage</samp>, <samp>-fprofile-arcs</samp>
and used by <samp>-fprofile-use</samp> and <samp>-fbranch-probabilities</samp>
and its related options.  Both absolute and relative paths can be used.
By default, GCC will use the current directory as <var>path</var>, thus the
profile data file will appear in the same directory as the object file.
</p>
</dd>
<dt><code>-fprofile-generate</code></dt>
<dt><code>-fprofile-generate=<var>path</var></code></dt>
<dd><a name="index-fprofile_002dgenerate"></a>
d924 4
a927 1
<p>Enable options usually used for instrumenting application to produce
d929 1
a929 1
optimization.  You must use <samp>-fprofile-generate</samp> both when
d931 4
a934 11
</p>
<p>The following options are enabled: <code>-fprofile-arcs</code>, <code>-fprofile-values</code>, <code>-fvpt</code>.
</p>
<p>If <var>path</var> is specified, GCC will look at the <var>path</var> to find
the profile feedback data files. See <samp>-fprofile-dir</samp>.
</p>
</dd>
<dt><code>-fprofile-use</code></dt>
<dt><code>-fprofile-use=<var>path</var></code></dt>
<dd><a name="index-fprofile_002duse"></a>
<p>Enable profile feedback directed optimizations, and optimizations
a935 13
</p>
<p>The following options are enabled: <code>-fbranch-probabilities</code>, <code>-fvpt</code>,
<code>-funroll-loops</code>, <code>-fpeel-loops</code>, <code>-ftracer</code>
</p>
<p>By default, GCC emits an error message if the feedback profiles do not
match the source code.  This error can be turned into a warning by using
<samp>-Wcoverage-mismatch</samp>.  Note this may result in poorly optimized
code.
</p>
<p>If <var>path</var> is specified, GCC will look at the <var>path</var> to find
the profile feedback data files. See <samp>-fprofile-dir</samp>.
</p></dd>
</dl>
d937 8
a944 2
<p>The following options control compiler behavior regarding floating-point 
arithmetic.  These options trade off between speed and
d946 4
a949 6
</p>
<dl compact="compact">
<dt><code>-ffloat-store</code></dt>
<dd><a name="index-ffloat_002dstore"></a>
<p>Do not store floating-point variables in registers, and inhibit other
options that might change whether a floating-point value is taken from a
d951 2
a952 3
</p>
<a name="index-floating_002dpoint-precision"></a>
<p>This option prevents undesirable excess precision on machines such as
d957 1
a957 1
point.  Use <samp>-ffloat-store</samp> for such programs, after modifying
d959 14
a972 47
</p>
</dd>
<dt><code>-fexcess-precision=<var>style</var></code></dt>
<dd><a name="index-fexcess_002dprecision"></a>
<p>This option allows further control over excess precision on machines
where floating-point registers have more precision than the IEEE
<code>float</code> and <code>double</code> types and the processor does not
support operations rounding to those types.  By default,
<samp>-fexcess-precision=fast</samp> is in effect; this means that
operations are carried out in the precision of the registers and that
it is unpredictable when rounding to the types specified in the source
code takes place.  When compiling C, if
<samp>-fexcess-precision=standard</samp> is specified then excess
precision will follow the rules specified in ISO C99; in particular,
both casts and assignments cause values to be rounded to their
semantic types (whereas <samp>-ffloat-store</samp> only affects
assignments).  This option is enabled by default for C if a strict
conformance option such as <samp>-std=c99</samp> is used.
</p>
<a name="index-mfpmath"></a>
<p><samp>-fexcess-precision=standard</samp> is not implemented for languages
other than C, and has no effect if
<samp>-funsafe-math-optimizations</samp> or <samp>-ffast-math</samp> is
specified.  On the x86, it also has no effect if <samp>-mfpmath=sse</samp>
or <samp>-mfpmath=sse+387</samp> is specified; in the former case, IEEE
semantics apply without excess precision, and in the latter, rounding
is unpredictable.
</p>
</dd>
<dt><code>-ffast-math</code></dt>
<dd><a name="index-ffast_002dmath"></a>
<p>Sets <samp>-fno-math-errno</samp>, <samp>-funsafe-math-optimizations</samp>,
<samp>-ffinite-math-only</samp>, <samp>-fno-rounding-math</samp>,
<samp>-fno-signaling-nans</samp> and <samp>-fcx-limited-range</samp>.
</p>
<p>This option causes the preprocessor macro <code>__FAST_MATH__</code> to be defined.
</p>
<p>This option is not turned on by any <samp>-O</samp> option besides
<samp>-Ofast</samp> since it can result in incorrect output for programs
that depend on an exact implementation of IEEE or ISO rules/specifications
for math functions. It may, however, yield faster code for programs
that do not require the guarantees of these specifications.
</p>
</dd>
<dt><code>-fno-math-errno</code></dt>
<dd><a name="index-fno_002dmath_002derrno"></a>
<p>Do not set ERRNO after calling math functions that are executed
d976 3
a978 3
</p>
<p>This option is not turned on by any <samp>-O</samp> option since
it can result in incorrect output for programs that depend on
d980 7
a986 12
math functions. It may, however, yield faster code for programs
that do not require the guarantees of these specifications.
</p>
<p>The default is <samp>-fmath-errno</samp>.
</p>
<p>On Darwin systems, the math library never sets <code>errno</code>.  There is
therefore no reason for the compiler to consider the possibility that
it might, and <samp>-fno-math-errno</samp> is the default.
</p>
</dd>
<dt><code>-funsafe-math-optimizations</code></dt>
<dd><a name="index-funsafe_002dmath_002doptimizations"></a>
d988 1
a988 1
<p>Allow optimizations for floating-point arithmetic that (a) assume
d993 3
a995 3
</p>
<p>This option is not turned on by any <samp>-O</samp> option since
it can result in incorrect output for programs that depend on
d997 5
a1001 42
math functions. It may, however, yield faster code for programs
that do not require the guarantees of these specifications.
Enables <samp>-fno-signed-zeros</samp>, <samp>-fno-trapping-math</samp>,
<samp>-fassociative-math</samp> and <samp>-freciprocal-math</samp>.
</p>
<p>The default is <samp>-fno-unsafe-math-optimizations</samp>.
</p>
</dd>
<dt><code>-fassociative-math</code></dt>
<dd><a name="index-fassociative_002dmath"></a>

<p>Allow re-association of operands in series of floating-point operations.
This violates the ISO C and C++ language standard by possibly changing
computation result.  NOTE: re-ordering may change the sign of zero as
well as ignore NaNs and inhibit or create underflow or overflow (and
thus cannot be used on code that relies on rounding behavior like
<code>(x + 2**52) - 2**52</code>.  May also reorder floating-point comparisons
and thus may not be used when ordered comparisons are required.
This option requires that both <samp>-fno-signed-zeros</samp> and
<samp>-fno-trapping-math</samp> be in effect.  Moreover, it doesn&rsquo;t make
much sense with <samp>-frounding-math</samp>. For Fortran the option
is automatically enabled when both <samp>-fno-signed-zeros</samp> and
<samp>-fno-trapping-math</samp> are in effect.
</p>
<p>The default is <samp>-fno-associative-math</samp>.
</p>
</dd>
<dt><code>-freciprocal-math</code></dt>
<dd><a name="index-freciprocal_002dmath"></a>

<p>Allow the reciprocal of a value to be used instead of dividing by
the value if this enables optimizations.  For example <code>x / y</code>
can be replaced with <code>x * (1/y)</code>, which is useful if <code>(1/y)</code>
is subject to common subexpression elimination.  Note that this loses
precision and increases the number of flops operating on the value.
</p>
<p>The default is <samp>-fno-reciprocal-math</samp>.
</p>
</dd>
<dt><code>-ffinite-math-only</code></dt>
<dd><a name="index-ffinite_002dmath_002donly"></a>
<p>Allow optimizations for floating-point arithmetic that assume
d1003 8
a1010 24
</p>
<p>This option is not turned on by any <samp>-O</samp> option since
it can result in incorrect output for programs that depend on
an exact implementation of IEEE or ISO rules/specifications for
math functions. It may, however, yield faster code for programs
that do not require the guarantees of these specifications.
</p>
<p>The default is <samp>-fno-finite-math-only</samp>.
</p>
</dd>
<dt><code>-fno-signed-zeros</code></dt>
<dd><a name="index-fno_002dsigned_002dzeros"></a>
<p>Allow optimizations for floating-point arithmetic that ignore the
signedness of zero.  IEEE arithmetic specifies the behavior of
distinct +0.0 and -0.0 values, which then prohibits simplification
of expressions such as x+0.0 or 0.0*x (even with <samp>-ffinite-math-only</samp>).
This option implies that the sign of a zero result isn&rsquo;t significant.
</p>
<p>The default is <samp>-fsigned-zeros</samp>.
</p>
</dd>
<dt><code>-fno-trapping-math</code></dt>
<dd><a name="index-fno_002dtrapping_002dmath"></a>
<p>Compile code assuming that floating-point operations cannot generate
d1012 6
a1017 6
underflow, inexact result and invalid operation.  This option requires
that <samp>-fno-signaling-nans</samp> be in effect.  Setting this option may
allow faster code if one relies on &ldquo;non-stop&rdquo; IEEE arithmetic, for example.
</p>
<p>This option should never be turned on by any <samp>-O</samp> option since
it can result in incorrect output for programs that depend on
d1020 5
a1024 8
</p>
<p>The default is <samp>-ftrapping-math</samp>.
</p>
</dd>
<dt><code>-frounding-math</code></dt>
<dd><a name="index-frounding_002dmath"></a>
<p>Disable transformations and optimizations that assume default floating-point
rounding behavior.  This is round-to-zero for all floating point
d1029 1
a1029 1
floating-point expressions at compile time (which may be affected by
d1032 5
a1036 5
</p>
<p>The default is <samp>-fno-rounding-math</samp>.
</p>
<p>This option is experimental and does not currently guarantee to
disable all GCC optimizations that are affected by rounding mode.
d1038 1
a1038 1
using C99&rsquo;s <code>FENV_ACCESS</code> pragma.  This command-line option
d1040 2
a1041 5
</p>
</dd>
<dt><code>-fsignaling-nans</code></dt>
<dd><a name="index-fsignaling_002dnans"></a>
<p>Compile code assuming that IEEE signaling NaNs may generate user-visible
d1044 3
a1046 3
signaling NaNs.  This option implies <samp>-ftrapping-math</samp>.
</p>
<p>This option causes the preprocessor macro <code>__SUPPORT_SNAN__</code> to
d1048 4
a1051 4
</p>
<p>The default is <samp>-fno-signaling-nans</samp>.
</p>
<p>This option is experimental and does not currently guarantee to
d1053 9
a1061 18
</p>
</dd>
<dt><code>-fsingle-precision-constant</code></dt>
<dd><a name="index-fsingle_002dprecision_002dconstant"></a>
<p>Treat floating-point constants as single precision instead of
implicitly converting them to double-precision constants.
</p>
</dd>
<dt><code>-fcx-limited-range</code></dt>
<dd><a name="index-fcx_002dlimited_002drange"></a>
<p>When enabled, this option states that a range reduction step is not
needed when performing complex division.  Also, there is no checking
whether the result of a complex multiplication or division is <code>NaN
+ I*NaN</code>, with an attempt to rescue the situation in that case.  The
default is <samp>-fno-cx-limited-range</samp>, but is enabled by
<samp>-ffast-math</samp>.
</p>
<p>This option controls the default setting of the ISO C99
a1063 13
</p>
</dd>
<dt><code>-fcx-fortran-rules</code></dt>
<dd><a name="index-fcx_002dfortran_002drules"></a>
<p>Complex multiplication and division follow Fortran rules.  Range
reduction is done as part of complex division, but there is no checking
whether the result of a complex multiplication or division is <code>NaN
+ I*NaN</code>, with an attempt to rescue the situation in that case.
</p>
<p>The default is <samp>-fno-cx-fortran-rules</samp>.
</p>
</dd>
</dl>
d1065 4
a1068 2
<p>The following options control optimizations that may improve
performance, but are not enabled by any <samp>-O</samp> options.  This
d1070 5
a1074 8
</p>
<dl compact="compact">
<dt><code>-fbranch-probabilities</code></dt>
<dd><a name="index-fbranch_002dprobabilities"></a>
<p>After running a program compiled with <samp>-fprofile-arcs</samp>
(see <a href="Debugging-Options.html#Debugging-Options">Options for Debugging Your Program or
<code>gcc</code></a>), you can compile it a second time using
<samp>-fbranch-probabilities</samp>, to improve optimizations based on
d1076 3
a1078 3
compiled with <samp>-fprofile-arcs</samp> exits it saves arc execution
counts to a file called <samp><var>sourcename</var>.gcda</samp> for each source
file.  The information in this data file is very dependent on the
d1081 3
a1083 3
</p>
<p>With <samp>-fbranch-probabilities</samp>, GCC puts a
&lsquo;<samp>REG_BR_PROB</samp>&rsquo; note on each &lsquo;<samp>JUMP_INSN</samp>&rsquo; and &lsquo;<samp>CALL_INSN</samp>&rsquo;.
d1085 2
a1086 2
used in one place: in <samp>reorg.c</samp>, instead of guessing which path a
branch is most likely to take, the &lsquo;<samp>REG_BR_PROB</samp>&rsquo; values are used to
d1088 2
a1089 5
</p>
</dd>
<dt><code>-fprofile-values</code></dt>
<dd><a name="index-fprofile_002dvalues"></a>
<p>If combined with <samp>-fprofile-arcs</samp>, it adds code so that some
d1091 8
a1098 10
</p>
<p>With <samp>-fbranch-probabilities</samp>, it reads back the data gathered
from profiling values of expressions for usage in optimizations.
</p>
<p>Enabled with <samp>-fprofile-generate</samp> and <samp>-fprofile-use</samp>.
</p>
</dd>
<dt><code>-fvpt</code></dt>
<dd><a name="index-fvpt"></a>
<p>If combined with <samp>-fprofile-arcs</samp>, it instructs the compiler to add
d1100 3
a1102 3
</p>
<p>With <samp>-fbranch-probabilities</samp>, it reads back the data gathered
and actually performs the optimizations based on them.
d1105 2
a1106 5
</p>
</dd>
<dt><code>-frename-registers</code></dt>
<dd><a name="index-frename_002dregisters"></a>
<p>Attempt to avoid false dependencies in scheduled code by making use
d1112 4
a1115 7
</p>
<p>Enabled by default with <samp>-funroll-loops</samp> and <samp>-fpeel-loops</samp>.
</p>
</dd>
<dt><code>-ftracer</code></dt>
<dd><a name="index-ftracer-1"></a>
<p>Perform tail duplication to enlarge superblock size.  This transformation
d1118 6
a1123 9
</p>
<p>Enabled with <samp>-fprofile-use</samp>.
</p>
</dd>
<dt><code>-funroll-loops</code></dt>
<dd><a name="index-funroll_002dloops-1"></a>
<p>Unroll loops whose number of iterations can be determined at compile time or
upon entry to the loop.  <samp>-funroll-loops</samp> implies
<samp>-frerun-cse-after-loop</samp>, <samp>-fweb</samp> and <samp>-frename-registers</samp>.
d1127 9
a1135 15
</p>
<p>Enabled with <samp>-fprofile-use</samp>.
</p>
</dd>
<dt><code>-funroll-all-loops</code></dt>
<dd><a name="index-funroll_002dall_002dloops-1"></a>
<p>Unroll all loops, even if their number of iterations is uncertain when
the loop is entered.  This usually makes programs run more slowly.
<samp>-funroll-all-loops</samp> implies the same options as
<samp>-funroll-loops</samp>.
</p>
</dd>
<dt><code>-fpeel-loops</code></dt>
<dd><a name="index-fpeel_002dloops"></a>
<p>Peels loops for which there is enough information that they do not
d1138 7
a1144 13
</p>
<p>Enabled with <samp>-fprofile-use</samp>.
</p>
</dd>
<dt><code>-fmove-loop-invariants</code></dt>
<dd><a name="index-fmove_002dloop_002dinvariants"></a>
<p>Enables the loop invariant motion pass in the RTL loop optimizer.  Enabled
at level <samp>-O1</samp>
</p>
</dd>
<dt><code>-funswitch-loops</code></dt>
<dd><a name="index-funswitch_002dloops"></a>
<p>Move branches with loop invariant conditions out of the loop, with duplicates
d1146 7
a1152 7
</p>
</dd>
<dt><code>-ffunction-sections</code></dt>
<dt><code>-fdata-sections</code></dt>
<dd><a name="index-ffunction_002dsections"></a>
<a name="index-fdata_002dsections"></a>
<p>Place each function or data item into its own section in the output
d1154 1
a1154 1
function or the name of the data item determines the section&rsquo;s name
d1156 2
a1157 2
</p>
<p>Use these options on systems where the linker can perform optimizations
d1162 2
a1163 2
</p>
<p>Only use these options when there are significant benefits from doing
d1165 1
a1165 1
create larger object and executable files and will also be slower.
d1168 4
a1171 7
you specify both this option and <samp>-g</samp>.
</p>
</dd>
<dt><code>-fbranch-target-load-optimize</code></dt>
<dd><a name="index-fbranch_002dtarget_002dload_002doptimize"></a>
<p>Perform branch target register load optimization before prologue / epilogue
threading.
d1175 2
a1176 5
</p>
</dd>
<dt><code>-fbranch-target-load-optimize2</code></dt>
<dd><a name="index-fbranch_002dtarget_002dload_002doptimize2"></a>
<p>Perform branch target register load optimization after prologue / epilogue
d1178 2
a1179 5
</p>
</dd>
<dt><code>-fbtr-bb-exclusive</code></dt>
<dd><a name="index-fbtr_002dbb_002dexclusive"></a>
<p>When performing branch target register load optimization, don&rsquo;t reuse
d1181 2
a1182 5
</p>
</dd>
<dt><code>-fstack-protector</code></dt>
<dd><a name="index-fstack_002dprotector"></a>
<p>Emit extra code to check for buffer overflows, such as stack smashing
d1186 1
a1186 1
when a function is entered and then checked when the function exits.
d1188 4
a1191 40
</p>
</dd>
<dt><code>-fstack-protector-all</code></dt>
<dd><a name="index-fstack_002dprotector_002dall"></a>
<p>Like <samp>-fstack-protector</samp> except that all functions are protected.
</p>
</dd>
<dt><code>-fsection-anchors</code></dt>
<dd><a name="index-fsection_002danchors"></a>
<p>Try to reduce the number of symbolic address calculations by using
shared &ldquo;anchor&rdquo; symbols to address nearby objects.  This transformation
can help to reduce the number of GOT entries and GOT accesses on some
targets.
</p>
<p>For example, the implementation of the following function <code>foo</code>:
</p>
<div class="smallexample">
<pre class="smallexample">static int a, b, c;
int foo (void) { return a + b + c; }
</pre></div>

<p>would usually calculate the addresses of all three variables, but if you
compile it with <samp>-fsection-anchors</samp>, it will access the variables
from a common anchor point instead.  The effect is similar to the
following pseudocode (which isn&rsquo;t valid C):
</p>
<div class="smallexample">
<pre class="smallexample">int foo (void)
{
  register int *xr = &amp;x;
  return xr[&amp;a - &amp;x] + xr[&amp;b - &amp;x] + xr[&amp;c - &amp;x];
}
</pre></div>

<p>Not all targets support this option.
</p>
</dd>
<dt><code>--param <var>name</var>=<var>value</var></code></dt>
<dd><a name="index-param"></a>
<p>In some places, GCC uses various constants to control the amount of
d1193 5
a1197 5
that contain more than a certain number of instructions.  You can
control some of these constants on the command line using the
<samp>--param</samp> option.
</p>
<p>The names of specific parameters, and the meaning of the values, are
d1200 2
a1201 2
</p>
<p>In each case, the <var>value</var> is an integer.  The allowable choices for
d1203 19
a1221 10
</p>
<dl compact="compact">
<dt><code>predictable-branch-outcome</code></dt>
<dd><p>When branch is predicted to be taken with probability lower than this threshold
(in percent), then it is considered well predictable. The default is 10.
</p>
</dd>
<dt><code>max-crossjump-edges</code></dt>
<dd><p>The maximum number of incoming edges to consider for crossjumping.
The algorithm used by <samp>-fcrossjumping</samp> is <em>O(N^2)</em> in
d1223 1
a1223 1
more aggressive optimization, making the compilation time increase with
d1225 2
a1226 4
</p>
</dd>
<dt><code>min-crossjump-insns</code></dt>
<dd><p>The minimum number of instructions that must be matched at the end
d1230 3
a1232 5
</p>
</dd>
<dt><code>max-grow-copy-bb-insns</code></dt>
<dd><p>The maximum code size expansion factor when copying basic blocks
instead of jumping.  The expansion is relative to a jump instruction.
d1234 3
a1236 5
</p>
</dd>
<dt><code>max-goto-duplication-insns</code></dt>
<dd><p>The maximum number of instructions to duplicate to a block that jumps
to a computed goto.  To avoid <em>O(N^2)</em> behavior in a number of
d1241 2
a1242 4
</p>
</dd>
<dt><code>max-delay-slot-insn-search</code></dt>
<dd><p>The maximum number of instructions to consider when looking for an
d1246 4
a1249 6
aggressive optimization, making the compilation time increase with probably
small improvement in execution time.
</p>
</dd>
<dt><code>max-delay-slot-live-search</code></dt>
<dd><p>When trying to fill delay slots, the maximum number of instructions to
d1252 1
a1252 1
aggressive optimization, increasing the compilation time.  This parameter
d1255 2
a1256 4
</p>
</dd>
<dt><code>max-gcse-memory</code></dt>
<dd><p>The approximate maximum amount of memory that will be allocated in
d1260 4
a1263 10
</p>
</dd>
<dt><code>max-gcse-insertion-ratio</code></dt>
<dd><p>If the ratio of expression insertions to deletions is larger than this value
for any expression, then RTL PRE will insert or remove the expression and thus
leave partially redundant computations in the instruction stream.  The default value is 20.
</p>
</dd>
<dt><code>max-pending-list-length</code></dt>
<dd><p>The maximum number of pending dependencies scheduling will allow
d1267 3
a1269 11
</p>
</dd>
<dt><code>max-modulo-backtrack-attempts</code></dt>
<dd><p>The maximum number of backtrack attempts the scheduler should make
when modulo scheduling a loop.  Larger values can exponentially increase
compilation time.
</p>
</dd>
<dt><code>max-inline-insns-single</code></dt>
<dd><p>Several parameters control the tree inliner used in gcc.
This number sets the maximum number of instructions (counted in GCC&rsquo;s
d1272 4
a1275 6
inline and methods implemented in a class declaration (C++).
The default value is 400.
</p>
</dd>
<dt><code>max-inline-insns-auto</code></dt>
<dd><p>When you use <samp>-finline-functions</samp> (included in <samp>-O3</samp>),
d1279 6
a1284 8
be applied.
The default value is 40.
</p>
</dd>
<dt><code>large-function-insns</code></dt>
<dd><p>The limit specifying really large functions.  For functions larger than this
limit after inlining, inlining is constrained by
<samp>--param large-function-growth</samp>.  This parameter is useful primarily
d1286 2
a1287 1
back end.
d1289 3
a1291 4
</p>
</dd>
<dt><code>large-function-growth</code></dt>
<dd><p>Specifies maximal growth of large function caused by inlining in percents.
d1294 3
a1296 5
</p>
</dd>
<dt><code>large-unit-insns</code></dt>
<dd><p>The limit specifying large translation unit.  Growth caused by inlining of
units larger than this limit is limited by <samp>--param inline-unit-growth</samp>.
d1300 1
a1300 1
large units consisting of small inlineable functions however the overall unit
d1302 6
a1307 7
smaller units, the size is increased to <samp>--param large-unit-insns</samp>
before applying <samp>--param inline-unit-growth</samp>.  The default is 10000
</p>
</dd>
<dt><code>inline-unit-growth</code></dt>
<dd><p>Specifies maximal overall growth of the compilation unit caused by inlining.
The default value is 30 which limits unit growth to 1.3 times the original
d1309 2
a1310 22
</p>
</dd>
<dt><code>ipcp-unit-growth</code></dt>
<dd><p>Specifies maximal overall growth of the compilation unit caused by
interprocedural constant propagation.  The default value is 10 which limits
unit growth to 1.1 times the original size.
</p>
</dd>
<dt><code>large-stack-frame</code></dt>
<dd><p>The limit specifying large stack frames.  While inlining the algorithm is trying
to not grow past this limit too much.  Default value is 256 bytes.
</p>
</dd>
<dt><code>large-stack-frame-growth</code></dt>
<dd><p>Specifies maximal growth of large stack frames caused by inlining in percents.
The default value is 1000 which limits large stack frame growth to 11 times
the original size.
</p>
</dd>
<dt><code>max-inline-insns-recursive</code></dt>
<dt><code>max-inline-insns-recursive-auto</code></dt>
<dd><p>Specifies maximum number of instructions out-of-line copy of self recursive inline
d1312 2
a1313 2
</p>
<p>For functions declared inline <samp>--param max-inline-insns-recursive</samp> is
d1315 2
a1316 2
happens only when <samp>-finline-functions</samp> (included in <samp>-O3</samp>) is
enabled and <samp>--param max-inline-insns-recursive-auto</samp> is used.  The
d1318 4
a1321 7
</p>
</dd>
<dt><code>max-inline-recursive-depth</code></dt>
<dt><code>max-inline-recursive-depth-auto</code></dt>
<dd><p>Specifies maximum recursion depth used by the recursive inlining.
</p>
<p>For functions declared inline <samp>--param max-inline-recursive-depth</samp> is
d1323 5
a1327 7
happens only when <samp>-finline-functions</samp> (included in <samp>-O3</samp>) is
enabled and <samp>--param max-inline-recursive-depth-auto</samp> is used.  The
default value is 8.
</p>
</dd>
<dt><code>min-inline-recursive-probability</code></dt>
<dd><p>Recursive inlining is profitable only for function having deep recursion
d1331 2
a1332 2
</p>
<p>When profile feedback is available (see <samp>-fprofile-generate</samp>) the actual
d1337 10
a1346 65
</p>
</dd>
<dt><code>early-inlining-insns</code></dt>
<dd><p>Specify growth that early inliner can make.  In effect it increases amount of
inlining for code having large abstraction penalty.  The default value is 10.
</p>
</dd>
<dt><code>max-early-inliner-iterations</code></dt>
<dt><code>max-early-inliner-iterations</code></dt>
<dd><p>Limit of iterations of early inliner.  This basically bounds number of nested
indirect calls early inliner can resolve.  Deeper chains are still handled by
late inlining.
</p>
</dd>
<dt><code>comdat-sharing-probability</code></dt>
<dt><code>comdat-sharing-probability</code></dt>
<dd><p>Probability (in percent) that C++ inline function with comdat visibility
will be shared across multiple compilation units.  The default value is 20.
</p>
</dd>
<dt><code>min-vect-loop-bound</code></dt>
<dd><p>The minimum number of iterations under which a loop will not get vectorized
when <samp>-ftree-vectorize</samp> is used.  The number of iterations after
vectorization needs to be greater than the value specified by this option
to allow vectorization.  The default value is 0.
</p>
</dd>
<dt><code>gcse-cost-distance-ratio</code></dt>
<dd><p>Scaling factor in calculation of maximum distance an expression
can be moved by GCSE optimizations.  This is currently supported only in the
code hoisting pass.  The bigger the ratio, the more aggressive code hoisting
will be with simple expressions, i.e., the expressions that have cost
less than <samp>gcse-unrestricted-cost</samp>.  Specifying 0 will disable
hoisting of simple expressions.  The default value is 10.
</p>
</dd>
<dt><code>gcse-unrestricted-cost</code></dt>
<dd><p>Cost, roughly measured as the cost of a single typical machine
instruction, at which GCSE optimizations will not constrain
the distance an expression can travel.  This is currently
supported only in the code hoisting pass.  The lesser the cost,
the more aggressive code hoisting will be.  Specifying 0 will
allow all expressions to travel unrestricted distances.
The default value is 3.
</p>
</dd>
<dt><code>max-hoist-depth</code></dt>
<dd><p>The depth of search in the dominator tree for expressions to hoist.
This is used to avoid quadratic behavior in hoisting algorithm.
The value of 0 will avoid limiting the search, but may slow down compilation
of huge functions.  The default value is 30.
</p>
</dd>
<dt><code>max-tail-merge-comparisons</code></dt>
<dd><p>The maximum amount of similar bbs to compare a bb with.  This is used to
avoid quadratic behavior in tree tail merging.  The default value is 10.
</p>
</dd>
<dt><code>max-tail-merge-iterations</code></dt>
<dd><p>The maximum amount of iterations of the pass over the function.  This is used to
limit compilation time in tree tail merging.  The default value is 2.
</p>
</dd>
<dt><code>max-unrolled-insns</code></dt>
<dd><p>The maximum number of instructions that a loop should have if that loop
d1349 2
a1350 4
</p>
</dd>
<dt><code>max-average-unrolled-insns</code></dt>
<dd><p>The maximum number of instructions biased by probabilities of their execution
d1353 4
a1356 8
</p>
</dd>
<dt><code>max-unroll-times</code></dt>
<dd><p>The maximum number of unrollings of a single loop.
</p>
</dd>
<dt><code>max-peeled-insns</code></dt>
<dd><p>The maximum number of instructions that a loop should have if that loop
d1359 14
a1372 32
</p>
</dd>
<dt><code>max-peel-times</code></dt>
<dd><p>The maximum number of peelings of a single loop.
</p>
</dd>
<dt><code>max-completely-peeled-insns</code></dt>
<dd><p>The maximum number of insns of a completely peeled loop.
</p>
</dd>
<dt><code>max-completely-peel-times</code></dt>
<dd><p>The maximum number of iterations of a loop to be suitable for complete peeling.
</p>
</dd>
<dt><code>max-completely-peel-loop-nest-depth</code></dt>
<dd><p>The maximum depth of a loop nest suitable for complete peeling.
</p>
</dd>
<dt><code>max-unswitch-insns</code></dt>
<dd><p>The maximum number of insns of an unswitched loop.
</p>
</dd>
<dt><code>max-unswitch-level</code></dt>
<dd><p>The maximum number of branches unswitched in a single loop.
</p>
</dd>
<dt><code>lim-expensive</code></dt>
<dd><p>The minimum cost of an expensive expression in the loop invariant motion.
</p>
</dd>
<dt><code>iv-consider-all-candidates-bound</code></dt>
<dd><p>Bound on number of candidates for induction variables below that
d1376 2
a1377 4
</p>
</dd>
<dt><code>iv-max-considered-uses</code></dt>
<dd><p>The induction variable optimizations give up on loops that contain more
d1379 2
a1380 4
</p>
</dd>
<dt><code>iv-always-prune-cand-set-bound</code></dt>
<dd><p>If number of candidates in the set is smaller than this value,
d1383 2
a1384 4
</p>
</dd>
<dt><code>scev-max-expr-size</code></dt>
<dd><p>Bound on size of expressions used in the scalar evolutions analyzer.
d1386 7
a1392 57
</p>
</dd>
<dt><code>scev-max-expr-complexity</code></dt>
<dd><p>Bound on the complexity of the expressions in the scalar evolutions analyzer.
Complex expressions slow the analyzer.
</p>
</dd>
<dt><code>omega-max-vars</code></dt>
<dd><p>The maximum number of variables in an Omega constraint system.
The default value is 128.
</p>
</dd>
<dt><code>omega-max-geqs</code></dt>
<dd><p>The maximum number of inequalities in an Omega constraint system.
The default value is 256.
</p>
</dd>
<dt><code>omega-max-eqs</code></dt>
<dd><p>The maximum number of equalities in an Omega constraint system.
The default value is 128.
</p>
</dd>
<dt><code>omega-max-wild-cards</code></dt>
<dd><p>The maximum number of wildcard variables that the Omega solver will
be able to insert.  The default value is 18.
</p>
</dd>
<dt><code>omega-hash-table-size</code></dt>
<dd><p>The size of the hash table in the Omega solver.  The default value is
550.
</p>
</dd>
<dt><code>omega-max-keys</code></dt>
<dd><p>The maximal number of keys used by the Omega solver.  The default
value is 500.
</p>
</dd>
<dt><code>omega-eliminate-redundant-constraints</code></dt>
<dd><p>When set to 1, use expensive methods to eliminate all redundant
constraints.  The default value is 0.
</p>
</dd>
<dt><code>vect-max-version-for-alignment-checks</code></dt>
<dd><p>The maximum number of run-time checks that can be performed when
doing loop versioning for alignment in the vectorizer.  See option
ftree-vect-loop-version for more information.
</p>
</dd>
<dt><code>vect-max-version-for-alias-checks</code></dt>
<dd><p>The maximum number of run-time checks that can be performed when
doing loop versioning for alias in the vectorizer.  See option
ftree-vect-loop-version for more information.
</p>
</dd>
<dt><code>max-iterations-to-track</code></dt>
<dd>
<p>The maximum number of iterations of a loop the brute force algorithm
d1394 2
a1395 4
</p>
</dd>
<dt><code>hot-bb-count-fraction</code></dt>
<dd><p>Select fraction of the maximal count of repetitions of basic block in program
d1397 5
a1401 9
</p>
</dd>
<dt><code>hot-bb-frequency-fraction</code></dt>
<dd><p>Select fraction of the entry block frequency of executions of basic block in
function given basic block needs to have to be considered hot.
</p>
</dd>
<dt><code>max-predicted-iterations</code></dt>
<dd><p>The maximum number of loop iterations we predict statically.  This is useful
d1406 3
a1408 18
</p>
</dd>
<dt><code>align-threshold</code></dt>
<dd>
<p>Select fraction of the maximal frequency of executions of basic block in
function given basic block will get aligned.
</p>
</dd>
<dt><code>align-loop-iterations</code></dt>
<dd>
<p>A loop expected to iterate at lest the selected number of iterations will get
aligned.
</p>
</dd>
<dt><code>tracer-dynamic-coverage</code></dt>
<dt><code>tracer-dynamic-coverage-feedback</code></dt>
<dd>
<p>This value is used to limit superblock formation once the given percentage of
d1411 2
a1412 2
</p>
<p>The <samp>tracer-dynamic-coverage-feedback</samp> is used only when profile
d1415 2
a1416 4
</p>
</dd>
<dt><code>tracer-max-code-growth</code></dt>
<dd><p>Stop tail duplication once code growth has reached given percentage.  This is
d1420 3
a1422 5
</p>
</dd>
<dt><code>tracer-min-branch-ratio</code></dt>
<dd>
<p>Stop reverse growth when the reverse probability of best edge is less than this
d1424 3
a1426 6
</p>
</dd>
<dt><code>tracer-min-branch-ratio</code></dt>
<dt><code>tracer-min-branch-ratio-feedback</code></dt>
<dd>
<p>Stop forward growth if the best edge do have probability lower than this
d1428 2
a1429 2
</p>
<p>Similarly to <samp>tracer-dynamic-coverage</samp> two values are present, one for
d1433 22
a1454 14
</p>
</dd>
<dt><code>max-cse-path-length</code></dt>
<dd>
<p>Maximum number of basic blocks on path that cse considers.  The default is 10.
</p>
</dd>
<dt><code>max-cse-insns</code></dt>
<dd><p>The maximum instructions CSE process before flushing. The default is 1000.
</p>
</dd>
<dt><code>ggc-min-expand</code></dt>
<dd>
<p>GCC uses a garbage collector to manage its own memory allocation.  This
d1456 1
a1456 1
collector&rsquo;s heap should be allowed to expand between collections.
d1459 3
a1461 3
</p>
<p>The default is 30% + 70% * (RAM/1GB) with an upper bound of 100% when
RAM &gt;= 1GB.  If <code>getrlimit</code> is available, the notion of &quot;RAM&quot; is
d1465 1
a1465 1
<samp>ggc-min-heapsize</samp> to zero causes a full collection to occur at
d1468 3
a1470 5
</p>
</dd>
<dt><code>ggc-min-heapsize</code></dt>
<dd>
<p>Minimum size of the garbage collector&rsquo;s heap before it begins bothering
d1472 1
a1472 1
by <samp>ggc-min-expand</samp>% beyond <samp>ggc-min-heapsize</samp>.  Again,
d1475 2
a1476 2
</p>
<p>The default is the smaller of RAM/8, RLIMIT_RSS, or a limit that
d1482 1
a1482 1
parameter and <samp>ggc-min-expand</samp> to zero causes a full collection
d1484 2
a1485 4
</p>
</dd>
<dt><code>max-reload-search-insns</code></dt>
<dd><p>The maximum number of instruction reload should look backward for equivalent
d1487 8
a1494 1
compilation time increase with probably slightly better performance.
d1496 3
a1498 12
</p>
</dd>
<dt><code>max-cselib-memory-locations</code></dt>
<dd><p>The maximum number of memory locations cselib should take into account.
Increasing values mean more aggressive optimization, making the compilation time
increase with probably slightly better performance.  The default value is 500.
</p>
</dd>
<dt><code>reorder-blocks-duplicate</code></dt>
<dt><code>reorder-blocks-duplicate-feedback</code></dt>
<dd>
<p>Used by basic block reordering pass to decide whether to use unconditional
d1502 2
a1503 2
</p>
<p>The <samp>reorder-block-duplicate-feedback</samp> is used only when profile
d1505 1
a1505 1
<samp>reorder-block-duplicate</samp> since information about the hot spots is more
d1507 2
a1508 11
</p>
</dd>
<dt><code>max-sched-ready-insns</code></dt>
<dd><p>The maximum number of instructions ready to be issued the scheduler should
consider at any given time during the first scheduling pass.  Increasing
values mean more thorough searches, making the compilation time increase
with probably little benefit.  The default value is 100.
</p>
</dd>
<dt><code>max-sched-region-blocks</code></dt>
<dd><p>The maximum number of blocks in a region to be considered for
d1510 2
a1511 9
</p>
</dd>
<dt><code>max-pipeline-region-blocks</code></dt>
<dd><p>The maximum number of blocks in a region to be considered for
pipelining in the selective scheduler.  The default value is 15.
</p>
</dd>
<dt><code>max-sched-region-insns</code></dt>
<dd><p>The maximum number of insns in a region to be considered for
d1513 6
a1518 59
</p>
</dd>
<dt><code>max-pipeline-region-insns</code></dt>
<dd><p>The maximum number of insns in a region to be considered for
pipelining in the selective scheduler.  The default value is 200.
</p>
</dd>
<dt><code>min-spec-prob</code></dt>
<dd><p>The minimum probability (in percents) of reaching a source block
for interblock speculative scheduling.  The default value is 40.
</p>
</dd>
<dt><code>max-sched-extend-regions-iters</code></dt>
<dd><p>The maximum number of iterations through CFG to extend regions.
0 - disable region extension,
N - do at most N iterations.
The default value is 0.
</p>
</dd>
<dt><code>max-sched-insn-conflict-delay</code></dt>
<dd><p>The maximum conflict delay for an insn to be considered for speculative motion.
The default value is 3.
</p>
</dd>
<dt><code>sched-spec-prob-cutoff</code></dt>
<dd><p>The minimal probability of speculation success (in percents), so that
speculative insn will be scheduled.
The default value is 40.
</p>
</dd>
<dt><code>sched-mem-true-dep-cost</code></dt>
<dd><p>Minimal distance (in CPU cycles) between store and load targeting same
memory locations.  The default value is 1.
</p>
</dd>
<dt><code>selsched-max-lookahead</code></dt>
<dd><p>The maximum size of the lookahead window of selective scheduling.  It is a
depth of search for available instructions.
The default value is 50.
</p>
</dd>
<dt><code>selsched-max-sched-times</code></dt>
<dd><p>The maximum number of times that an instruction will be scheduled during
selective scheduling.  This is the limit on the number of iterations
through which the instruction may be pipelined.  The default value is 2.
</p>
</dd>
<dt><code>selsched-max-insns-to-rename</code></dt>
<dd><p>The maximum number of best instructions in the ready list that are considered
for renaming in the selective scheduler.  The default value is 2.
</p>
</dd>
<dt><code>sms-min-sc</code></dt>
<dd><p>The minimum value of stage count that swing modulo scheduler will
generate.  The default value is 2.
</p>
</dd>
<dt><code>max-last-value-rtl</code></dt>
<dd><p>The maximum size measured as number of RTLs that can be recorded in an expression
d1521 6
a1526 10
</p>
</dd>
<dt><code>integer-share-limit</code></dt>
<dd><p>Small integer constants can use a shared data structure, reducing the
compiler&rsquo;s memory usage and increasing its speed.  This sets the maximum
value of a shared integer constant.  The default value is 256.
</p>
</dd>
<dt><code>min-virtual-mappings</code></dt>
<dd><p>Specifies the minimum number of virtual mappings in the incremental
d1530 2
a1531 4
</p>
</dd>
<dt><code>virtual-mappings-ratio</code></dt>
<dd><p>If the number of virtual mappings is virtual-mappings-ratio bigger
d1535 5
a1539 9
</p>
</dd>
<dt><code>ssp-buffer-size</code></dt>
<dd><p>The minimum size of buffers (i.e. arrays) that will receive stack smashing
protection when <samp>-fstack-protection</samp> is used.
</p>
</dd>
<dt><code>max-jump-thread-duplication-stmts</code></dt>
<dd><p>Maximum number of statements allowed in a block that needs to be
a1540 256
</p>
</dd>
<dt><code>max-fields-for-field-sensitive</code></dt>
<dd><p>Maximum number of fields in a structure we will treat in
a field sensitive manner during pointer analysis.  The default is zero
for -O0, and -O1 and 100 for -Os, -O2, and -O3.
</p>
</dd>
<dt><code>prefetch-latency</code></dt>
<dd><p>Estimate on average number of instructions that are executed before
prefetch finishes.  The distance we prefetch ahead is proportional
to this constant.  Increasing this number may also lead to less
streams being prefetched (see <samp>simultaneous-prefetches</samp>).
</p>
</dd>
<dt><code>simultaneous-prefetches</code></dt>
<dd><p>Maximum number of prefetches that can run at the same time.
</p>
</dd>
<dt><code>l1-cache-line-size</code></dt>
<dd><p>The size of cache line in L1 cache, in bytes.
</p>
</dd>
<dt><code>l1-cache-size</code></dt>
<dd><p>The size of L1 cache, in kilobytes.
</p>
</dd>
<dt><code>l2-cache-size</code></dt>
<dd><p>The size of L2 cache, in kilobytes.
</p>
</dd>
<dt><code>min-insn-to-prefetch-ratio</code></dt>
<dd><p>The minimum ratio between the number of instructions and the
number of prefetches to enable prefetching in a loop.
</p>
</dd>
<dt><code>prefetch-min-insn-to-mem-ratio</code></dt>
<dd><p>The minimum ratio between the number of instructions and the
number of memory references to enable prefetching in a loop.
</p>
</dd>
<dt><code>use-canonical-types</code></dt>
<dd><p>Whether the compiler should use the &ldquo;canonical&rdquo; type system.  By
default, this should always be 1, which uses a more efficient internal
mechanism for comparing types in C++ and Objective-C++.  However, if
bugs in the canonical type system are causing compilation failures,
set this value to 0 to disable canonical types.
</p>
</dd>
<dt><code>switch-conversion-max-branch-ratio</code></dt>
<dd><p>Switch initialization conversion will refuse to create arrays that are
bigger than <samp>switch-conversion-max-branch-ratio</samp> times the number of
branches in the switch.
</p>
</dd>
<dt><code>max-partial-antic-length</code></dt>
<dd><p>Maximum length of the partial antic set computed during the tree
partial redundancy elimination optimization (<samp>-ftree-pre</samp>) when
optimizing at <samp>-O3</samp> and above.  For some sorts of source code
the enhanced partial redundancy elimination optimization can run away,
consuming all of the memory available on the host machine.  This
parameter sets a limit on the length of the sets that are computed,
which prevents the runaway behavior.  Setting a value of 0 for
this parameter will allow an unlimited set length.
</p>
</dd>
<dt><code>sccvn-max-scc-size</code></dt>
<dd><p>Maximum size of a strongly connected component (SCC) during SCCVN
processing.  If this limit is hit, SCCVN processing for the whole
function will not be done and optimizations depending on it will
be disabled.  The default maximum SCC size is 10000.
</p>
</dd>
<dt><code>ira-max-loops-num</code></dt>
<dd><p>IRA uses regional register allocation by default.  If a function
contains more loops than the number given by this parameter, only at most
the given number of the most frequently-executed loops form regions
for regional register allocation.  The default value of the
parameter is 100.
</p>
</dd>
<dt><code>ira-max-conflict-table-size</code></dt>
<dd><p>Although IRA uses a sophisticated algorithm to compress the conflict
table, the table can still require excessive amounts of memory for
huge functions.  If the conflict table for a function could be more
than the size in MB given by this parameter, the register allocator
instead uses a faster, simpler, and lower-quality
algorithm that does not require building a pseudo-register conflict table.  
The default value of the parameter is 2000.
</p>
</dd>
<dt><code>ira-loop-reserved-regs</code></dt>
<dd><p>IRA can be used to evaluate more accurate register pressure in loops
for decisions to move loop invariants (see <samp>-O3</samp>).  The number
of available registers reserved for some other purposes is given
by this parameter.  The default value of the parameter is 2, which is
the minimal number of registers needed by typical instructions.
This value is the best found from numerous experiments.
</p>
</dd>
<dt><code>loop-invariant-max-bbs-in-loop</code></dt>
<dd><p>Loop invariant motion can be very expensive, both in compilation time and
in amount of needed compile-time memory, with very large loops.  Loops
with more basic blocks than this parameter won&rsquo;t have loop invariant
motion optimization performed on them.  The default value of the
parameter is 1000 for -O1 and 10000 for -O2 and above.
</p>
</dd>
<dt><code>loop-max-datarefs-for-datadeps</code></dt>
<dd><p>Building data dapendencies is expensive for very large loops.  This
parameter limits the number of data references in loops that are
considered for data dependence analysis.  These large loops will not
be handled then by the optimizations using loop data dependencies.
The default value is 1000.
</p>
</dd>
<dt><code>max-vartrack-size</code></dt>
<dd><p>Sets a maximum number of hash table slots to use during variable
tracking dataflow analysis of any function.  If this limit is exceeded
with variable tracking at assignments enabled, analysis for that
function is retried without it, after removing all debug insns from
the function.  If the limit is exceeded even without debug insns, var
tracking analysis is completely disabled for the function.  Setting
the parameter to zero makes it unlimited.
</p>
</dd>
<dt><code>max-vartrack-expr-depth</code></dt>
<dd><p>Sets a maximum number of recursion levels when attempting to map
variable names or debug temporaries to value expressions.  This trades
compilation time for more complete debug information.  If this is set too
low, value expressions that are available and could be represented in
debug information may end up not being used; setting this higher may
enable the compiler to find more complex debug expressions, but compile
time and memory use may grow.  The default is 12.
</p>
</dd>
<dt><code>min-nondebug-insn-uid</code></dt>
<dd><p>Use uids starting at this parameter for nondebug insns.  The range below
the parameter is reserved exclusively for debug insns created by
<samp>-fvar-tracking-assignments</samp>, but debug insns may get
(non-overlapping) uids above it if the reserved range is exhausted.
</p>
</dd>
<dt><code>ipa-sra-ptr-growth-factor</code></dt>
<dd><p>IPA-SRA will replace a pointer to an aggregate with one or more new
parameters only when their cumulative size is less or equal to
<samp>ipa-sra-ptr-growth-factor</samp> times the size of the original
pointer parameter.
</p>
</dd>
<dt><code>tm-max-aggregate-size</code></dt>
<dd><p>When making copies of thread-local variables in a transaction, this
parameter specifies the size in bytes after which variables will be
saved with the logging functions as opposed to save/restore code
sequence pairs.  This option only applies when using
<samp>-fgnu-tm</samp>.
</p>
</dd>
<dt><code>graphite-max-nb-scop-params</code></dt>
<dd><p>To avoid exponential effects in the Graphite loop transforms, the
number of parameters in a Static Control Part (SCoP) is bounded.  The
default value is 10 parameters.  A variable whose value is unknown at
compilation time and defined outside a SCoP is a parameter of the SCoP.
</p>
</dd>
<dt><code>graphite-max-bbs-per-function</code></dt>
<dd><p>To avoid exponential effects in the detection of SCoPs, the size of
the functions analyzed by Graphite is bounded.  The default value is
100 basic blocks.
</p>
</dd>
<dt><code>loop-block-tile-size</code></dt>
<dd><p>Loop blocking or strip mining transforms, enabled with
<samp>-floop-block</samp> or <samp>-floop-strip-mine</samp>, strip mine each
loop in the loop nest by a given number of iterations.  The strip
length can be changed using the <samp>loop-block-tile-size</samp>
parameter.  The default value is 51 iterations.
</p>
</dd>
<dt><code>ipa-cp-value-list-size</code></dt>
<dd><p>IPA-CP attempts to track all possible values and types passed to a function&rsquo;s
parameter in order to propagate them and perform devirtualization.
<samp>ipa-cp-value-list-size</samp> is the maximum number of values and types it
stores per one formal parameter of a function.
</p>
</dd>
<dt><code>lto-partitions</code></dt>
<dd><p>Specify desired number of partitions produced during WHOPR compilation.
The number of partitions should exceed the number of CPUs used for compilation.
The default value is 32.
</p>
</dd>
<dt><code>lto-minpartition</code></dt>
<dd><p>Size of minimal partition for WHOPR (in estimated instructions).
This prevents expenses of splitting very small programs into too many
partitions.
</p>
</dd>
<dt><code>cxx-max-namespaces-for-diagnostic-help</code></dt>
<dd><p>The maximum number of namespaces to consult for suggestions when C++
name lookup fails for an identifier.  The default is 1000.
</p>
</dd>
<dt><code>sink-frequency-threshold</code></dt>
<dd><p>The maximum relative execution frequency (in percents) of the target block
relative to a statement&rsquo;s original block to allow statement sinking of a
statement.  Larger numbers result in more aggressive statement sinking.
The default value is 75.  A small positive adjustment is applied for
statements with memory operands as those are even more profitable so sink.
</p>
</dd>
<dt><code>max-stores-to-sink</code></dt>
<dd><p>The maximum number of conditional stores paires that can be sunk.  Set to 0
if either vectorization (<samp>-ftree-vectorize</samp>) or if-conversion
(<samp>-ftree-loop-if-convert</samp>) is disabled.  The default is 2.
</p>
</dd>
<dt><code>allow-load-data-races</code></dt>
<dd><p>Allow optimizers to introduce new data races on loads.
Set to 1 to allow, otherwise to 0.  This option is enabled by default
unless implicitly set by the <samp>-fmemory-model=</samp> option.
</p>
</dd>
<dt><code>allow-store-data-races</code></dt>
<dd><p>Allow optimizers to introduce new data races on stores.
Set to 1 to allow, otherwise to 0.  This option is enabled by default
unless implicitly set by the <samp>-fmemory-model=</samp> option.
</p>
</dd>
<dt><code>allow-packed-load-data-races</code></dt>
<dd><p>Allow optimizers to introduce new data races on packed data loads.
Set to 1 to allow, otherwise to 0.  This option is enabled by default
unless implicitly set by the <samp>-fmemory-model=</samp> option.
</p>
</dd>
<dt><code>allow-packed-store-data-races</code></dt>
<dd><p>Allow optimizers to introduce new data races on packed data stores.
Set to 1 to allow, otherwise to 0.  This option is enabled by default
unless implicitly set by the <samp>-fmemory-model=</samp> option.
</p>
</dd>
<dt><code>case-values-threshold</code></dt>
<dd><p>The smallest number of different values for which it is best to use a
jump-table instead of a tree of conditional branches.  If the value is
0, use the default for the machine.  The default is 0.
</p>
</dd>
<dt><code>tree-reassoc-width</code></dt>
<dd><p>Set the maximum number of instructions executed in parallel in
reassociated tree. This parameter overrides target dependent
heuristics used by default if has non zero value.
</p>
</dd>
</dl>
</dd>
</dl>
d1542 2
a1543 5
<hr>
<div class="header">
<p>
Next: <a href="Preprocessor-Options.html#Preprocessor-Options" accesskey="n" rel="next">Preprocessor Options</a>, Previous: <a href="Debugging-Options.html#Debugging-Options" accesskey="p" rel="prev">Debugging Options</a>, Up: <a href="Invoking-GCC.html#Invoking-GCC" accesskey="u" rel="up">Invoking GCC</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>
d1545 2
d1548 1
a1549 2
</body>
</html>
@

