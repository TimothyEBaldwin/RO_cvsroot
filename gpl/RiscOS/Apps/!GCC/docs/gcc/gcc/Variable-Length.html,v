head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.15;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.15;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.19;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Variable Length - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="C-Extensions.html#C-Extensions" title="C Extensions">
<link rel="prev" href="Zero-Length.html#Zero-Length" title="Zero Length">
<link rel="next" href="Empty-Structures.html#Empty-Structures" title="Empty Structures">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Variable-Length"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Empty-Structures.html#Empty-Structures">Empty Structures</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Zero-Length.html#Zero-Length">Zero Length</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="C-Extensions.html#C-Extensions">C Extensions</a>
<hr>
</div>

<h3 class="section">5.13 Arrays of Variable Length</h3>

<p><a name="index-variable_002dlength-arrays-1722"></a><a name="index-arrays-of-variable-length-1723"></a><a name="index-VLAs-1724"></a>
Variable-length automatic arrays are allowed in ISO C99, and as an
extension GCC accepts them in C89 mode and in C++.  (However, GCC's
implementation of variable-length arrays does not yet conform in detail
to the ISO C99 standard.)  These arrays are
declared like any other automatic arrays, but with a length that is not
a constant expression.  The storage is allocated at the point of
declaration and deallocated when the brace-level is exited.  For
example:

<pre class="smallexample">     FILE *
     concat_fopen (char *s1, char *s2, char *mode)
     {
       char str[strlen (s1) + strlen (s2) + 1];
       strcpy (str, s1);
       strcat (str, s2);
       return fopen (str, mode);
     }
</pre>
 <p><a name="index-scope-of-a-variable-length-array-1725"></a><a name="index-variable_002dlength-array-scope-1726"></a><a name="index-deallocating-variable-length-arrays-1727"></a>Jumping or breaking out of the scope of the array name deallocates the
storage.  Jumping into the scope is not allowed; you get an error
message for it.

 <p><a name="index-g_t_0040code_007balloca_007d-vs-variable_002dlength-arrays-1728"></a>You can use the function <code>alloca</code> to get an effect much like
variable-length arrays.  The function <code>alloca</code> is available in
many other C implementations (but not in all).  On the other hand,
variable-length arrays are more elegant.

 <p>There are other differences between these two methods.  Space allocated
with <code>alloca</code> exists until the containing <em>function</em> returns. 
The space for a variable-length array is deallocated as soon as the array
name's scope ends.  (If you use both variable-length arrays and
<code>alloca</code> in the same function, deallocation of a variable-length array
will also deallocate anything more recently allocated with <code>alloca</code>.)

 <p>You can also use variable-length arrays as arguments to functions:

<pre class="smallexample">     struct entry
     tester (int len, char data[len][len])
     {
       /* <span class="roman">...</span> */
     }
</pre>
 <p>The length of an array is computed once when the storage is allocated
and is remembered for the scope of the array in case you access it with
<code>sizeof</code>.

 <p>If you want to pass the array first and the length afterward, you can
use a forward declaration in the parameter list&mdash;another GNU extension.

<pre class="smallexample">     struct entry
     tester (int len; char data[len][len], int len)
     {
       /* <span class="roman">...</span> */
     }
</pre>
 <p><a name="index-parameter-forward-declaration-1729"></a>The &lsquo;<samp><span class="samp">int len</span></samp>&rsquo; before the semicolon is a <dfn>parameter forward
declaration</dfn>, and it serves the purpose of making the name <code>len</code>
known when the declaration of <code>data</code> is parsed.

 <p>You can write any number of such parameter forward declarations in the
parameter list.  They can be separated by commas or semicolons, but the
last one must end with a semicolon, which is followed by the &ldquo;real&rdquo;
parameter declarations.  Each forward declaration must match a &ldquo;real&rdquo;
declaration in parameter name and data type.  ISO C99 does not support
parameter forward declarations.

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Variable Length</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Variable Length">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Variable Length">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="C-Extensions.html#C-Extensions" rel="up" title="C Extensions">
<link href="Variadic-Macros.html#Variadic-Macros" rel="next" title="Variadic Macros">
<link href="Empty-Structures.html#Empty-Structures" rel="prev" title="Empty Structures">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="Variadic-Macros.html#Variadic-Macros" accesskey="n" rel="next">Variadic Macros</a>, Previous: <a href="Empty-Structures.html#Empty-Structures" accesskey="p" rel="prev">Empty Structures</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
a54 6
<hr>
<a name="Arrays-of-Variable-Length"></a>
<h3 class="section">6.19 Arrays of Variable Length</h3>
<a name="index-variable_002dlength-arrays"></a>
<a name="index-arrays-of-variable-length"></a>
<a name="index-VLAs"></a>
d56 7
a62 2
<p>Variable-length automatic arrays are allowed in ISO C99, and as an
extension GCC accepts them in C90 mode and in C++.  These arrays are
d67 11
a77 16
</p>
<div class="smallexample">
<pre class="smallexample">FILE *
concat_fopen (char *s1, char *s2, char *mode)
{
  char str[strlen (s1) + strlen (s2) + 1];
  strcpy (str, s1);
  strcat (str, s2);
  return fopen (str, mode);
}
</pre></div>

<a name="index-scope-of-a-variable-length-array"></a>
<a name="index-variable_002dlength-array-scope"></a>
<a name="index-deallocating-variable-length-arrays"></a>
<p>Jumping or breaking out of the scope of the array name deallocates the
d80 2
a81 3
</p>
<a name="index-alloca-vs-variable_002dlength-arrays"></a>
<p>You can use the function <code>alloca</code> to get an effect much like
d85 3
a87 3
</p>
<p>There are other differences between these two methods.  Space allocated
with <code>alloca</code> exists until the containing <em>function</em> returns.
d89 1
a89 1
name&rsquo;s scope ends.  (If you use both variable-length arrays and
a91 10
</p>
<p>You can also use variable-length arrays as arguments to functions:
</p>
<div class="smallexample">
<pre class="smallexample">struct entry
tester (int len, char data[len][len])
{
  /* <span class="roman">&hellip;</span> */
}
</pre></div>
d93 9
a101 1
<p>The length of an array is computed once when the storage is allocated
d104 2
a105 2
</p>
<p>If you want to pass the array first and the length afterward, you can
d107 9
a115 12
</p>
<div class="smallexample">
<pre class="smallexample">struct entry
tester (int len; char data[len][len], int len)
{
  /* <span class="roman">&hellip;</span> */
}
</pre></div>

<a name="index-parameter-forward-declaration"></a>
<p>The &lsquo;<samp>int len</samp>&rsquo; before the semicolon is a <em>parameter forward
declaration</em>, and it serves the purpose of making the name <code>len</code>
d117 2
a118 2
</p>
<p>You can write any number of such parameter forward declarations in the
a123 7
</p>
<hr>
<div class="header">
<p>
Next: <a href="Variadic-Macros.html#Variadic-Macros" accesskey="n" rel="next">Variadic Macros</a>, Previous: <a href="Empty-Structures.html#Empty-Structures" accesskey="p" rel="prev">Empty Structures</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>

d125 1
a126 2
</body>
</html>
@

