head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.19;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.19;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.26;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Variadic Macros - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="C-Extensions.html#C-Extensions" title="C Extensions">
<link rel="prev" href="Empty-Structures.html#Empty-Structures" title="Empty Structures">
<link rel="next" href="Escaped-Newlines.html#Escaped-Newlines" title="Escaped Newlines">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Variadic-Macros"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Escaped-Newlines.html#Escaped-Newlines">Escaped Newlines</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Empty-Structures.html#Empty-Structures">Empty Structures</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="C-Extensions.html#C-Extensions">C Extensions</a>
<hr>
</div>

<h3 class="section">5.14 Macros with a Variable Number of Arguments.</h3>

<p><a name="index-variable-number-of-arguments-1730"></a><a name="index-macro-with-variable-arguments-1731"></a><a name="index-rest-argument-_0028in-macro_0029-1732"></a><a name="index-variadic-macros-1733"></a>
In the ISO C standard of 1999, a macro can be declared to accept a
variable number of arguments much as a function can.  The syntax for
defining the macro is similar to that of a function.  Here is an
example:

<pre class="smallexample">     #define debug(format, ...) fprintf (stderr, format, __VA_ARGS__)
</pre>
 <p>Here &lsquo;<samp><span class="samp">...</span></samp>&rsquo; is a <dfn>variable argument</dfn>.  In the invocation of
such a macro, it represents the zero or more tokens until the closing
parenthesis that ends the invocation, including any commas.  This set of
tokens replaces the identifier <code>__VA_ARGS__</code> in the macro body
wherever it appears.  See the CPP manual for more information.

 <p>GCC has long supported variadic macros, and used a different syntax that
allowed you to give a name to the variable arguments just like any other
argument.  Here is an example:

<pre class="smallexample">     #define debug(format, args...) fprintf (stderr, format, args)
</pre>
 <p>This is in all ways equivalent to the ISO C example above, but arguably
more readable and descriptive.

 <p>GNU CPP has two further variadic macro extensions, and permits them to
be used with either of the above forms of macro definition.

 <p>In standard C, you are not allowed to leave the variable argument out
entirely; but you are allowed to pass an empty argument.  For example,
this invocation is invalid in ISO C, because there is no comma after
the string:

<pre class="smallexample">     debug ("A message")
</pre>
 <p>GNU CPP permits you to completely omit the variable arguments in this
way.  In the above examples, the compiler would complain, though since
the expansion of the macro still has the extra comma after the format
string.

 <p>To help solve this problem, CPP behaves specially for variable arguments
used with the token paste operator, &lsquo;<samp><span class="samp">##</span></samp>&rsquo;.  If instead you write

<pre class="smallexample">     #define debug(format, ...) fprintf (stderr, format, ## __VA_ARGS__)
</pre>
 <p>and if the variable arguments are omitted or empty, the &lsquo;<samp><span class="samp">##</span></samp>&rsquo;
operator causes the preprocessor to remove the comma before it.  If you
do provide some variable arguments in your macro invocation, GNU CPP
does not complain about the paste operation and instead places the
variable arguments after the comma.  Just like any other pasted macro
argument, these arguments are not macro expanded.

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Variadic Macros</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Variadic Macros">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Variadic Macros">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="C-Extensions.html#C-Extensions" rel="up" title="C Extensions">
<link href="Escaped-Newlines.html#Escaped-Newlines" rel="next" title="Escaped Newlines">
<link href="Variable-Length.html#Variable-Length" rel="prev" title="Variable Length">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="Escaped-Newlines.html#Escaped-Newlines" accesskey="n" rel="next">Escaped Newlines</a>, Previous: <a href="Variable-Length.html#Variable-Length" accesskey="p" rel="prev">Variable Length</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
a54 7
<hr>
<a name="Macros-with-a-Variable-Number-of-Arguments_002e"></a>
<h3 class="section">6.20 Macros with a Variable Number of Arguments.</h3>
<a name="index-variable-number-of-arguments"></a>
<a name="index-macro-with-variable-arguments"></a>
<a name="index-rest-argument-_0028in-macro_0029"></a>
<a name="index-variadic-macros"></a>
d56 4
a59 1
<p>In the ISO C standard of 1999, a macro can be declared to accept a
a62 4
</p>
<div class="smallexample">
<pre class="smallexample">#define debug(format, ...) fprintf (stderr, format, __VA_ARGS__)
</pre></div>
d64 3
a66 1
<p>Here &lsquo;<samp>&hellip;</samp>&rsquo; is a <em>variable argument</em>.  In the invocation of
d71 2
a72 2
</p>
<p>GCC has long supported variadic macros, and used a different syntax that
a74 4
</p>
<div class="smallexample">
<pre class="smallexample">#define debug(format, args...) fprintf (stderr, format, args)
</pre></div>
d76 3
a78 1
<p>This is in all ways equivalent to the ISO C example above, but arguably
d80 2
a81 2
</p>
<p>GNU CPP has two further variadic macro extensions, and permits them to
d83 2
a84 2
</p>
<p>In standard C, you are not allowed to leave the variable argument out
a87 4
</p>
<div class="smallexample">
<pre class="smallexample">debug (&quot;A message&quot;)
</pre></div>
d89 3
a91 1
<p>GNU CPP permits you to completely omit the variable arguments in this
a94 7
</p>
<p>To help solve this problem, CPP behaves specially for variable arguments
used with the token paste operator, &lsquo;<samp>##</samp>&rsquo;.  If instead you write
</p>
<div class="smallexample">
<pre class="smallexample">#define debug(format, ...) fprintf (stderr, format, ## __VA_ARGS__)
</pre></div>
d96 6
a101 1
<p>and if the variable arguments are omitted or empty, the &lsquo;<samp>##</samp>&rsquo;
a106 7
</p>
<hr>
<div class="header">
<p>
Next: <a href="Escaped-Newlines.html#Escaped-Newlines" accesskey="n" rel="next">Escaped Newlines</a>, Previous: <a href="Variable-Length.html#Variable-Length" accesskey="p" rel="prev">Variable Length</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>

d108 1
a109 2
</body>
</html>
@

