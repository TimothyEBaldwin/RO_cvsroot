head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.16;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.16;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.21;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Objective-C and Objective-C++ Dialect Options - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Invoking-GCC.html#Invoking-GCC" title="Invoking GCC">
<link rel="prev" href="C_002b_002b-Dialect-Options.html#C_002b_002b-Dialect-Options" title="C++ Dialect Options">
<link rel="next" href="Language-Independent-Options.html#Language-Independent-Options" title="Language Independent Options">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Objective-C-and-Objective-C++-Dialect-Options"></a>
<a name="Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Language-Independent-Options.html#Language-Independent-Options">Language Independent Options</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="C_002b_002b-Dialect-Options.html#C_002b_002b-Dialect-Options">C++ Dialect Options</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Invoking-GCC.html#Invoking-GCC">Invoking GCC</a>
<hr>
</div>

<h3 class="section">3.6 Options Controlling Objective-C and Objective-C++ Dialects</h3>

<p><a name="index-compiler-options_002c-Objective_002dC-and-Objective_002dC_002b_002b-168"></a><a name="index-Objective_002dC-and-Objective_002dC_002b_002b-options_002c-command-line-169"></a><a name="index-options_002c-Objective_002dC-and-Objective_002dC_002b_002b-170"></a>(NOTE: This manual does not describe the Objective-C and Objective-C++
languages themselves.  See See <a href="Standards.html#Standards">Language Standards Supported by GCC</a>, for references.)

 <p>This section describes the command-line options that are only meaningful
for Objective-C and Objective-C++ programs, but you can also use most of
the language-independent GNU compiler options. 
For example, you might compile a file <code>some_class.m</code> like this:

<pre class="smallexample">     gcc -g -fgnu-runtime -O -c some_class.m
</pre>
 <p class="noindent">In this example, <samp><span class="option">-fgnu-runtime</span></samp> is an option meant only for
Objective-C and Objective-C++ programs; you can use the other options with
any language supported by GCC.

 <p>Note that since Objective-C is an extension of the C language, Objective-C
compilations may also use options specific to the C front-end (e.g.,
<samp><span class="option">-Wtraditional</span></samp>).  Similarly, Objective-C++ compilations may use
C++-specific options (e.g., <samp><span class="option">-Wabi</span></samp>).

 <p>Here is a list of options that are <em>only</em> for compiling Objective-C
and Objective-C++ programs:

     <dl>
<dt><code>-fconstant-string-class=</code><var>class-name</var><dd><a name="index-fconstant_002dstring_002dclass-171"></a>Use <var>class-name</var> as the name of the class to instantiate for each
literal string specified with the syntax <code>@@"..."</code>.  The default
class name is <code>NXConstantString</code> if the GNU runtime is being used, and
<code>NSConstantString</code> if the NeXT runtime is being used (see below).  The
<samp><span class="option">-fconstant-cfstrings</span></samp> option, if also present, will override the
<samp><span class="option">-fconstant-string-class</span></samp> setting and cause <code>@@"..."</code> literals
to be laid out as constant CoreFoundation strings.

     <br><dt><code>-fgnu-runtime</code><dd><a name="index-fgnu_002druntime-172"></a>Generate object code compatible with the standard GNU Objective-C
runtime.  This is the default for most types of systems.

     <br><dt><code>-fnext-runtime</code><dd><a name="index-fnext_002druntime-173"></a>Generate output compatible with the NeXT runtime.  This is the default
for NeXT-based systems, including Darwin and Mac OS X.  The macro
<code>__NEXT_RUNTIME__</code> is predefined if (and only if) this option is
used.

     <br><dt><code>-fno-nil-receivers</code><dd><a name="index-fno_002dnil_002dreceivers-174"></a>Assume that all Objective-C message dispatches (e.g.,
<code>[receiver message:arg]</code>) in this translation unit ensure that the receiver
is not <code>nil</code>.  This allows for more efficient entry points in the runtime
to be used.  Currently, this option is only available in conjunction with
the NeXT runtime on Mac OS X 10.3 and later.

     <br><dt><code>-fobjc-call-cxx-cdtors</code><dd><a name="index-fobjc_002dcall_002dcxx_002dcdtors-175"></a>For each Objective-C class, check if any of its instance variables is a
C++ object with a non-trivial default constructor.  If so, synthesize a
special <code>- (id) .cxx_construct</code> instance method that will run
non-trivial default constructors on any such instance variables, in order,
and then return <code>self</code>.  Similarly, check if any instance variable
is a C++ object with a non-trivial destructor, and if so, synthesize a
special <code>- (void) .cxx_destruct</code> method that will run
all such default destructors, in reverse order.

     <p>The <code>- (id) .cxx_construct</code> and/or <code>- (void) .cxx_destruct</code> methods
thusly generated will only operate on instance variables declared in the
current Objective-C class, and not those inherited from superclasses.  It
is the responsibility of the Objective-C runtime to invoke all such methods
in an object's inheritance hierarchy.  The <code>- (id) .cxx_construct</code> methods
will be invoked by the runtime immediately after a new object
instance is allocated; the <code>- (void) .cxx_destruct</code> methods will
be invoked immediately before the runtime deallocates an object instance.

     <p>As of this writing, only the NeXT runtime on Mac OS X 10.4 and later has
support for invoking the <code>- (id) .cxx_construct</code> and
<code>- (void) .cxx_destruct</code> methods.

     <br><dt><code>-fobjc-direct-dispatch</code><dd><a name="index-fobjc_002ddirect_002ddispatch-176"></a>Allow fast jumps to the message dispatcher.  On Darwin this is
accomplished via the comm page.

     <br><dt><code>-fobjc-exceptions</code><dd><a name="index-fobjc_002dexceptions-177"></a>Enable syntactic support for structured exception handling in Objective-C,
similar to what is offered by C++ and Java.  Currently, this option is only
available in conjunction with the NeXT runtime on Mac OS X 10.3 and later.

     <pre class="smallexample">            @@try {
              ...
                 @@throw expr;
              ...
            }
            @@catch (AnObjCClass *exc) {
              ...
                @@throw expr;
              ...
                @@throw;
              ...
            }
            @@catch (AnotherClass *exc) {
              ...
            }
            @@catch (id allOthers) {
              ...
            }
            @@finally {
              ...
                @@throw expr;
              ...
            }
</pre>
     <p>The <code>@@throw</code> statement may appear anywhere in an Objective-C or
Objective-C++ program; when used inside of a <code>@@catch</code> block, the
<code>@@throw</code> may appear without an argument (as shown above), in which case
the object caught by the <code>@@catch</code> will be rethrown.

     <p>Note that only (pointers to) Objective-C objects may be thrown and
caught using this scheme.  When an object is thrown, it will be caught
by the nearest <code>@@catch</code> clause capable of handling objects of that type,
analogously to how <code>catch</code> blocks work in C++ and Java.  A
<code>@@catch(id ...)</code> clause (as shown above) may also be provided to catch
any and all Objective-C exceptions not caught by previous <code>@@catch</code>
clauses (if any).

     <p>The <code>@@finally</code> clause, if present, will be executed upon exit from the
immediately preceding <code>@@try ... @@catch</code> section.  This will happen
regardless of whether any exceptions are thrown, caught or rethrown
inside the <code>@@try ... @@catch</code> section, analogously to the behavior
of the <code>finally</code> clause in Java.

     <p>There are several caveats to using the new exception mechanism:

          <ul>
<li>Although currently designed to be binary compatible with <code>NS_HANDLER</code>-style
idioms provided by the <code>NSException</code> class, the new
exceptions can only be used on Mac OS X 10.3 (Panther) and later
systems, due to additional functionality needed in the (NeXT) Objective-C
runtime.

          <li>As mentioned above, the new exceptions do not support handling
types other than Objective-C objects.   Furthermore, when used from
Objective-C++, the Objective-C exception model does not interoperate with C++
exceptions at this time.  This means you cannot <code>@@throw</code> an exception
from Objective-C and <code>catch</code> it in C++, or vice versa
(i.e., <code>throw ... @@catch</code>). 
</ul>

     <p>The <samp><span class="option">-fobjc-exceptions</span></samp> switch also enables the use of synchronization
blocks for thread-safe execution:

     <pre class="smallexample">            @@synchronized (ObjCClass *guard) {
              ...
            }
</pre>
     <p>Upon entering the <code>@@synchronized</code> block, a thread of execution shall
first check whether a lock has been placed on the corresponding <code>guard</code>
object by another thread.  If it has, the current thread shall wait until
the other thread relinquishes its lock.  Once <code>guard</code> becomes available,
the current thread will place its own lock on it, execute the code contained in
the <code>@@synchronized</code> block, and finally relinquish the lock (thereby
making <code>guard</code> available to other threads).

     <p>Unlike Java, Objective-C does not allow for entire methods to be marked
<code>@@synchronized</code>.  Note that throwing exceptions out of
<code>@@synchronized</code> blocks is allowed, and will cause the guarding object
to be unlocked properly.

     <br><dt><code>-fobjc-gc</code><dd><a name="index-fobjc_002dgc-178"></a>Enable garbage collection (GC) in Objective-C and Objective-C++ programs.

     <br><dt><code>-freplace-objc-classes</code><dd><a name="index-freplace_002dobjc_002dclasses-179"></a>Emit a special marker instructing <samp><span class="command">ld(1)</span></samp> not to statically link in
the resulting object file, and allow <samp><span class="command">dyld(1)</span></samp> to load it in at
run time instead.  This is used in conjunction with the Fix-and-Continue
debugging mode, where the object file in question may be recompiled and
dynamically reloaded in the course of program execution, without the need
to restart the program itself.  Currently, Fix-and-Continue functionality
is only available in conjunction with the NeXT runtime on Mac OS X 10.3
and later.

     <br><dt><code>-fzero-link</code><dd><a name="index-fzero_002dlink-180"></a>When compiling for the NeXT runtime, the compiler ordinarily replaces calls
to <code>objc_getClass("...")</code> (when the name of the class is known at
compile time) with static class references that get initialized at load time,
which improves run-time performance.  Specifying the <samp><span class="option">-fzero-link</span></samp> flag
suppresses this behavior and causes calls to <code>objc_getClass("...")</code>
to be retained.  This is useful in Zero-Link debugging mode, since it allows
for individual class implementations to be modified during program execution.

     <br><dt><code>-gen-decls</code><dd><a name="index-gen_002ddecls-181"></a>Dump interface declarations for all classes seen in the source file to a
file named <samp><var>sourcename</var><span class="file">.decl</span></samp>.

     <br><dt><code>-Wassign-intercept</code><dd><a name="index-Wassign_002dintercept-182"></a>Warn whenever an Objective-C assignment is being intercepted by the
garbage collector.

     <br><dt><code>-Wno-protocol</code><dd><a name="index-Wno_002dprotocol-183"></a>If a class is declared to implement a protocol, a warning is issued for
every method in the protocol that is not implemented by the class.  The
default behavior is to issue a warning for every method not explicitly
implemented in the class, even if a method implementation is inherited
from the superclass.  If you use the <samp><span class="option">-Wno-protocol</span></samp> option, then
methods inherited from the superclass are considered to be implemented,
and no warning is issued for them.

     <br><dt><code>-Wselector</code><dd><a name="index-Wselector-184"></a>Warn if multiple methods of different types for the same selector are
found during compilation.  The check is performed on the list of methods
in the final stage of compilation.  Additionally, a check is performed
for each selector appearing in a <code>@@selector(...)</code>
expression, and a corresponding method for that selector has been found
during compilation.  Because these checks scan the method table only at
the end of compilation, these warnings are not produced if the final
stage of compilation is not reached, for example because an error is
found during compilation, or because the <samp><span class="option">-fsyntax-only</span></samp> option is
being used.

     <br><dt><code>-Wstrict-selector-match</code><dd><a name="index-Wstrict_002dselector_002dmatch-185"></a>Warn if multiple methods with differing argument and/or return types are
found for a given selector when attempting to send a message using this
selector to a receiver of type <code>id</code> or <code>Class</code>.  When this flag
is off (which is the default behavior), the compiler will omit such warnings
if any differences found are confined to types which share the same size
and alignment.

     <br><dt><code>-Wundeclared-selector</code><dd><a name="index-Wundeclared_002dselector-186"></a>Warn if a <code>@@selector(...)</code> expression referring to an
undeclared selector is found.  A selector is considered undeclared if no
method with that name has been declared before the
<code>@@selector(...)</code> expression, either explicitly in an
<code>@@interface</code> or <code>@@protocol</code> declaration, or implicitly in
an <code>@@implementation</code> section.  This option always performs its
checks as soon as a <code>@@selector(...)</code> expression is found,
while <samp><span class="option">-Wselector</span></samp> only performs its checks in the final stage of
compilation.  This also enforces the coding style convention
that methods and selectors must be declared before being used.

     <br><dt><code>-print-objc-runtime-info</code><dd><a name="index-print_002dobjc_002druntime_002dinfo-187"></a>Generate C header describing the largest structure that is passed by
value, if any.

 </dl>

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Objective-C and Objective-C++ Dialect Options</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Objective-C and Objective-C++ Dialect Options">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Objective-C and Objective-C++ Dialect Options">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Invoking-GCC.html#Invoking-GCC" rel="up" title="Invoking GCC">
<link href="Language-Independent-Options.html#Language-Independent-Options" rel="next" title="Language Independent Options">
<link href="C_002b_002b-Dialect-Options.html#C_002b_002b-Dialect-Options" rel="prev" title="C++ Dialect Options">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 3
a48 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a49 1
<div class="header">
d51 4
a54 1
Next: <a href="Language-Independent-Options.html#Language-Independent-Options" accesskey="n" rel="next">Language Independent Options</a>, Previous: <a href="C_002b_002b-Dialect-Options.html#C_002b_002b-Dialect-Options" accesskey="p" rel="prev">C++ Dialect Options</a>, Up: <a href="Invoking-GCC.html#Invoking-GCC" accesskey="u" rel="up">Invoking GCC</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
d56 1
a56 2
<hr>
<a name="Options-Controlling-Objective_002dC-and-Objective_002dC_002b_002b-Dialects"></a>
d59 4
a62 8
<a name="index-compiler-options_002c-Objective_002dC-and-Objective_002dC_002b_002b"></a>
<a name="index-Objective_002dC-and-Objective_002dC_002b_002b-options_002c-command_002dline"></a>
<a name="index-options_002c-Objective_002dC-and-Objective_002dC_002b_002b"></a>
<p>(NOTE: This manual does not describe the Objective-C and Objective-C++
languages themselves.  See <a href="Standards.html#Standards">Language Standards
Supported by GCC</a>, for references.)
</p>
<p>This section describes the command-line options that are only meaningful
d64 1
a64 1
the language-independent GNU compiler options.
a65 4
</p>
<div class="smallexample">
<pre class="smallexample">gcc -g -fgnu-runtime -O -c some_class.m
</pre></div>
d67 3
a69 1
<p>In this example, <samp>-fgnu-runtime</samp> is an option meant only for
d72 2
a73 2
</p>
<p>Note that since Objective-C is an extension of the C language, Objective-C
d75 4
a78 4
<samp>-Wtraditional</samp>).  Similarly, Objective-C++ compilations may use
C++-specific options (e.g., <samp>-Wabi</samp>).
</p>
<p>Here is a list of options that are <em>only</em> for compiling Objective-C
d80 4
a83 6
</p>
<dl compact="compact">
<dt><code>-fconstant-string-class=<var>class-name</var></code></dt>
<dd><a name="index-fconstant_002dstring_002dclass"></a>
<p>Use <var>class-name</var> as the name of the class to instantiate for each
literal string specified with the syntax <code>@@&quot;&hellip;&quot;</code>.  The default
d86 2
a87 2
<samp>-fconstant-cfstrings</samp> option, if also present, will override the
<samp>-fconstant-string-class</samp> setting and cause <code>@@&quot;&hellip;&quot;</code> literals
d89 2
a90 5
</p>
</dd>
<dt><code>-fgnu-runtime</code></dt>
<dd><a name="index-fgnu_002druntime"></a>
<p>Generate object code compatible with the standard GNU Objective-C
d92 2
a93 5
</p>
</dd>
<dt><code>-fnext-runtime</code></dt>
<dd><a name="index-fnext_002druntime"></a>
<p>Generate output compatible with the NeXT runtime.  This is the default
d97 8
a104 26
</p>
</dd>
<dt><code>-fno-nil-receivers</code></dt>
<dd><a name="index-fno_002dnil_002dreceivers"></a>
<p>Assume that all Objective-C message dispatches (<code>[receiver
message:arg]</code>) in this translation unit ensure that the receiver is
not <code>nil</code>.  This allows for more efficient entry points in the
runtime to be used.  This option is only available in conjunction with
the NeXT runtime and ABI version 0 or 1.
</p>
</dd>
<dt><code>-fobjc-abi-version=<var>n</var></code></dt>
<dd><a name="index-fobjc_002dabi_002dversion"></a>
<p>Use version <var>n</var> of the Objective-C ABI for the selected runtime.
This option is currently supported only for the NeXT runtime.  In that
case, Version 0 is the traditional (32-bit) ABI without support for
properties and other Objective-C 2.0 additions.  Version 1 is the
traditional (32-bit) ABI with support for properties and other
Objective-C 2.0 additions.  Version 2 is the modern (64-bit) ABI.  If
nothing is specified, the default is Version 0 on 32-bit target
machines, and Version 2 on 64-bit target machines.
</p>
</dd>
<dt><code>-fobjc-call-cxx-cdtors</code></dt>
<dd><a name="index-fobjc_002dcall_002dcxx_002dcdtors"></a>
<p>For each Objective-C class, check if any of its instance variables is a
d106 1
a106 1
special <code>- (id) .cxx_construct</code> instance method which will run
d110 1
a110 1
special <code>- (void) .cxx_destruct</code> method which will run
d112 11
a122 12
</p>
<p>The <code>- (id) .cxx_construct</code> and <code>- (void) .cxx_destruct</code>
methods thusly generated will only operate on instance variables
declared in the current Objective-C class, and not those inherited
from superclasses.  It is the responsibility of the Objective-C
runtime to invoke all such methods in an object&rsquo;s inheritance
hierarchy.  The <code>- (id) .cxx_construct</code> methods will be invoked
by the runtime immediately after a new object instance is allocated;
the <code>- (void) .cxx_destruct</code> methods will be invoked immediately
before the runtime deallocates an object instance.
</p>
<p>As of this writing, only the NeXT runtime on Mac OS X 10.4 and later has
d125 2
a126 5
</p>
</dd>
<dt><code>-fobjc-direct-dispatch</code></dt>
<dd><a name="index-fobjc_002ddirect_002ddispatch"></a>
<p>Allow fast jumps to the message dispatcher.  On Darwin this is
d128 89
a216 48
</p>
</dd>
<dt><code>-fobjc-exceptions</code></dt>
<dd><a name="index-fobjc_002dexceptions"></a>
<p>Enable syntactic support for structured exception handling in
Objective-C, similar to what is offered by C++ and Java.  This option
is required to use the Objective-C keywords <code>@@try</code>,
<code>@@throw</code>, <code>@@catch</code>, <code>@@finally</code> and
<code>@@synchronized</code>.  This option is available with both the GNU
runtime and the NeXT runtime (but not available in conjunction with
the NeXT runtime on Mac OS X 10.2 and earlier).
</p>
</dd>
<dt><code>-fobjc-gc</code></dt>
<dd><a name="index-fobjc_002dgc"></a>
<p>Enable garbage collection (GC) in Objective-C and Objective-C++
programs.  This option is only available with the NeXT runtime; the
GNU runtime has a different garbage collection implementation that
does not require special compiler flags.
</p>
</dd>
<dt><code>-fobjc-nilcheck</code></dt>
<dd><a name="index-fobjc_002dnilcheck"></a>
<p>For the NeXT runtime with version 2 of the ABI, check for a nil
receiver in method invocations before doing the actual method call.
This is the default and can be disabled using
<samp>-fno-objc-nilcheck</samp>.  Class methods and super calls are never
checked for nil in this way no matter what this flag is set to.
Currently this flag does nothing when the GNU runtime, or an older
version of the NeXT runtime ABI, is used.
</p>
</dd>
<dt><code>-fobjc-std=objc1</code></dt>
<dd><a name="index-fobjc_002dstd"></a>
<p>Conform to the language syntax of Objective-C 1.0, the language
recognized by GCC 4.0.  This only affects the Objective-C additions to
the C/C++ language; it does not affect conformance to C/C++ standards,
which is controlled by the separate C/C++ dialect option flags.  When
this option is used with the Objective-C or Objective-C++ compiler,
any Objective-C syntax that is not recognized by GCC 4.0 is rejected.
This is useful if you need to make sure that your Objective-C code can
be compiled with older versions of GCC.
</p>
</dd>
<dt><code>-freplace-objc-classes</code></dt>
<dd><a name="index-freplace_002dobjc_002dclasses"></a>
<p>Emit a special marker instructing <code>ld(1)</code> not to statically link in
the resulting object file, and allow <code>dyld(1)</code> to load it in at
d223 3
a225 6
</p>
</dd>
<dt><code>-fzero-link</code></dt>
<dd><a name="index-fzero_002dlink"></a>
<p>When compiling for the NeXT runtime, the compiler ordinarily replaces calls
to <code>objc_getClass(&quot;&hellip;&quot;)</code> (when the name of the class is known at
d227 2
a228 2
which improves run-time performance.  Specifying the <samp>-fzero-link</samp> flag
suppresses this behavior and causes calls to <code>objc_getClass(&quot;&hellip;&quot;)</code>
d231 5
a235 14
The GNU runtime currently always retains calls to <code>objc_get_class(&quot;&hellip;&quot;)</code>
regardless of command-line options.
</p>
</dd>
<dt><code>-gen-decls</code></dt>
<dd><a name="index-gen_002ddecls"></a>
<p>Dump interface declarations for all classes seen in the source file to a
file named <samp><var>sourcename</var>.decl</samp>.
</p>
</dd>
<dt><code>-Wassign-intercept <span class="roman">(Objective-C and Objective-C++ only)</span></code></dt>
<dd><a name="index-Wassign_002dintercept"></a>
<a name="index-Wno_002dassign_002dintercept"></a>
<p>Warn whenever an Objective-C assignment is being intercepted by the
d237 2
a238 6
</p>
</dd>
<dt><code>-Wno-protocol <span class="roman">(Objective-C and Objective-C++ only)</span></code></dt>
<dd><a name="index-Wno_002dprotocol"></a>
<a name="index-Wprotocol"></a>
<p>If a class is declared to implement a protocol, a warning is issued for
d242 1
a242 1
from the superclass.  If you use the <samp>-Wno-protocol</samp> option, then
d245 2
a246 6
</p>
</dd>
<dt><code>-Wselector <span class="roman">(Objective-C and Objective-C++ only)</span></code></dt>
<dd><a name="index-Wselector"></a>
<a name="index-Wno_002dselector"></a>
<p>Warn if multiple methods of different types for the same selector are
d249 1
a249 1
for each selector appearing in a <code>@@selector(&hellip;)</code>
d254 1
a254 1
found during compilation, or because the <samp>-fsyntax-only</samp> option is
d256 2
a257 6
</p>
</dd>
<dt><code>-Wstrict-selector-match <span class="roman">(Objective-C and Objective-C++ only)</span></code></dt>
<dd><a name="index-Wstrict_002dselector_002dmatch"></a>
<a name="index-Wno_002dstrict_002dselector_002dmatch"></a>
<p>Warn if multiple methods with differing argument and/or return types are
d261 1
a261 1
if any differences found are confined to types that share the same size
d263 2
a264 6
</p>
</dd>
<dt><code>-Wundeclared-selector <span class="roman">(Objective-C and Objective-C++ only)</span></code></dt>
<dd><a name="index-Wundeclared_002dselector"></a>
<a name="index-Wno_002dundeclared_002dselector"></a>
<p>Warn if a <code>@@selector(&hellip;)</code> expression referring to an
d267 1
a267 1
<code>@@selector(&hellip;)</code> expression, either explicitly in an
d270 2
a271 2
checks as soon as a <code>@@selector(&hellip;)</code> expression is found,
while <samp>-Wselector</samp> only performs its checks in the final stage of
d274 2
a275 5
</p>
</dd>
<dt><code>-print-objc-runtime-info</code></dt>
<dd><a name="index-print_002dobjc_002druntime_002dinfo"></a>
<p>Generate C header describing the largest structure that is passed by
a276 9
</p>
</dd>
</dl>

<hr>
<div class="header">
<p>
Next: <a href="Language-Independent-Options.html#Language-Independent-Options" accesskey="n" rel="next">Language Independent Options</a>, Previous: <a href="C_002b_002b-Dialect-Options.html#C_002b_002b-Dialect-Options" accesskey="p" rel="prev">C++ Dialect Options</a>, Up: <a href="Invoking-GCC.html#Invoking-GCC" accesskey="u" rel="up">Invoking GCC</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>
d278 1
d280 1
a281 2
</body>
</html>
@

