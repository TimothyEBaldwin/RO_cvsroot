head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.16;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.16;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.20;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Incompatibilities - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Trouble.html#Trouble" title="Trouble">
<link rel="prev" href="Interoperation.html#Interoperation" title="Interoperation">
<link rel="next" href="Fixed-Headers.html#Fixed-Headers" title="Fixed Headers">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Incompatibilities"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Fixed-Headers.html#Fixed-Headers">Fixed Headers</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Interoperation.html#Interoperation">Interoperation</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Trouble.html#Trouble">Trouble</a>
<hr>
</div>

<h3 class="section">10.4 Incompatibilities of GCC</h3>

<p><a name="index-incompatibilities-of-GCC-2498"></a><a name="index-traditional-2499"></a>
There are several noteworthy incompatibilities between GNU C and K&amp;R
(non-ISO) versions of C.

     
<a name="index-string-constants-2500"></a>
<a name="index-read_002donly-strings-2501"></a>
<a name="index-shared-strings-2502"></a>
<ul><li>GCC normally makes string constants read-only.  If several
identical-looking string constants are used, GCC stores only one
copy of the string.

     <p><a name="index-g_t_0040code_007bmktemp_007d_002c-and-constant-strings-2503"></a>One consequence is that you cannot call <code>mktemp</code> with a string
constant argument.  The function <code>mktemp</code> always alters the
string its argument points to.

     <p><a name="index-g_t_0040code_007bsscanf_007d_002c-and-constant-strings-2504"></a><a name="index-g_t_0040code_007bfscanf_007d_002c-and-constant-strings-2505"></a><a name="index-g_t_0040code_007bscanf_007d_002c-and-constant-strings-2506"></a>Another consequence is that <code>sscanf</code> does not work on some very
old systems when passed a string constant as its format control string
or input.  This is because <code>sscanf</code> incorrectly tries to write
into the string constant.  Likewise <code>fscanf</code> and <code>scanf</code>.

     <p>The solution to these problems is to change the program to use
<code>char</code>-array variables with initialization strings for these
purposes instead of string constants.

     <li><code>-2147483648</code> is positive.

     <p>This is because 2147483648 cannot fit in the type <code>int</code>, so
(following the ISO C rules) its data type is <code>unsigned long int</code>. 
Negating this value yields 2147483648 again.

     <li>GCC does not substitute macro arguments when they appear inside of
string constants.  For example, the following macro in GCC

     <pre class="smallexample">          #define foo(a) "a"
</pre>
     <p class="noindent">will produce output <code>"a"</code> regardless of what the argument <var>a</var> is.

     <p><a name="index-g_t_0040code_007bsetjmp_007d-incompatibilities-2507"></a><a name="index-g_t_0040code_007blongjmp_007d-incompatibilities-2508"></a><li>When you use <code>setjmp</code> and <code>longjmp</code>, the only automatic
variables guaranteed to remain valid are those declared
<code>volatile</code>.  This is a consequence of automatic register
allocation.  Consider this function:

     <pre class="smallexample">          jmp_buf j;
          
          foo ()
          {
            int a, b;
          
            a = fun1 ();
            if (setjmp (j))
              return a;
          
            a = fun2 ();
            /* <code>longjmp (j)</code><span class="roman"> may occur in </span><code>fun3</code><span class="roman">.</span> */
            return a + fun3 ();
          }
</pre>
     <p>Here <code>a</code> may or may not be restored to its first value when the
<code>longjmp</code> occurs.  If <code>a</code> is allocated in a register, then
its first value is restored; otherwise, it keeps the last value stored
in it.

     <p><a name="index-W-2509"></a>If you use the <samp><span class="option">-W</span></samp> option with the <samp><span class="option">-O</span></samp> option, you will
get a warning when GCC thinks such a problem might be possible.

     <li>Programs that use preprocessing directives in the middle of macro
arguments do not work with GCC.  For example, a program like this
will not work:

     <pre class="smallexample">          foobar (
          #define luser
                  hack)
</pre>
     <p>ISO C does not permit such a construct.

     <li>K&amp;R compilers allow comments to cross over an inclusion boundary
(i.e. started in an include file and ended in the including file).

     <p><a name="index-external-declaration-scope-2510"></a><a name="index-scope-of-external-declarations-2511"></a><a name="index-declaration-scope-2512"></a><li>Declarations of external variables and functions within a block apply
only to the block containing the declaration.  In other words, they
have the same scope as any other declaration in the same place.

     <p>In some other C compilers, a <code>extern</code> declaration affects all the
rest of the file even if it happens within a block.

     <li>In traditional C, you can combine <code>long</code>, etc., with a typedef name,
as shown here:

     <pre class="smallexample">          typedef int foo;
          typedef long foo bar;
</pre>
     <p>In ISO C, this is not allowed: <code>long</code> and other type modifiers
require an explicit <code>int</code>.

     <p><a name="index-typedef-names-as-function-parameters-2513"></a><li>PCC allows typedef names to be used as function parameters.

     <li>Traditional C allows the following erroneous pair of declarations to
appear together in a given scope:

     <pre class="smallexample">          typedef int foo;
          typedef foo foo;
</pre>
     <li>GCC treats all characters of identifiers as significant.  According to
K&amp;R-1 (2.2), &ldquo;No more than the first eight characters are significant,
although more may be used.&rdquo;.  Also according to K&amp;R-1 (2.2), &ldquo;An
identifier is a sequence of letters and digits; the first character must
be a letter.  The underscore _ counts as a letter.&rdquo;, but GCC also
allows dollar signs in identifiers.

     <p><a name="index-whitespace-2514"></a><li>PCC allows whitespace in the middle of compound assignment operators
such as &lsquo;<samp><span class="samp">+=</span></samp>&rsquo;.  GCC, following the ISO standard, does not
allow this.

     <p><a name="index-apostrophes-2515"></a><a name="index-g_t_0027-2516"></a><li>GCC complains about unterminated character constants inside of
preprocessing conditionals that fail.  Some programs have English
comments enclosed in conditionals that are guaranteed to fail; if these
comments contain apostrophes, GCC will probably report an error.  For
example, this code would produce an error:

     <pre class="smallexample">          #if 0
          You can't expect this to work.
          #endif
</pre>
     <p>The best solution to such a problem is to put the text into an actual
C comment delimited by &lsquo;<samp><span class="samp">/*...*/</span></samp>&rsquo;.

     <li>Many user programs contain the declaration &lsquo;<samp><span class="samp">long time ();</span></samp>&rsquo;.  In the
past, the system header files on many systems did not actually declare
<code>time</code>, so it did not matter what type your program declared it to
return.  But in systems with ISO C headers, <code>time</code> is declared to
return <code>time_t</code>, and if that is not the same as <code>long</code>, then
&lsquo;<samp><span class="samp">long time ();</span></samp>&rsquo; is erroneous.

     <p>The solution is to change your program to use appropriate system headers
(<code>&lt;time.h&gt;</code> on systems with ISO C headers) and not to declare
<code>time</code> if the system header files declare it, or failing that to
use <code>time_t</code> as the return type of <code>time</code>.

     <p><a name="index-g_t_0040code_007bfloat_007d-as-function-value-type-2517"></a><li>When compiling functions that return <code>float</code>, PCC converts it to
a double.  GCC actually returns a <code>float</code>.  If you are concerned
with PCC compatibility, you should declare your functions to return
<code>double</code>; you might as well say what you mean.

     <p><a name="index-structures-2518"></a><a name="index-unions-2519"></a><li>When compiling functions that return structures or unions, GCC
output code normally uses a method different from that used on most
versions of Unix.  As a result, code compiled with GCC cannot call
a structure-returning function compiled with PCC, and vice versa.

     <p>The method used by GCC is as follows: a structure or union which is
1, 2, 4 or 8 bytes long is returned like a scalar.  A structure or union
with any other size is stored into an address supplied by the caller
(usually in a special, fixed register, but on some machines it is passed
on the stack).  The target hook <code>TARGET_STRUCT_VALUE_RTX</code>
tells GCC where to pass this address.

     <p>By contrast, PCC on most target machines returns structures and unions
of any size by copying the data into an area of static storage, and then
returning the address of that storage as if it were a pointer value. 
The caller must copy the data from that memory area to the place where
the value is wanted.  GCC does not use this method because it is
slower and nonreentrant.

     <p>On some newer machines, PCC uses a reentrant convention for all
structure and union returning.  GCC on most of these machines uses a
compatible convention when returning structures and unions in memory,
but still returns small structures and unions in registers.

     <p><a name="index-fpcc_002dstruct_002dreturn-2520"></a>You can tell GCC to use a compatible convention for all structure and
union returning with the option <samp><span class="option">-fpcc-struct-return</span></samp>.

     <p><a name="index-preprocessing-tokens-2521"></a><a name="index-preprocessing-numbers-2522"></a><li>GCC complains about program fragments such as &lsquo;<samp><span class="samp">0x74ae-0x4000</span></samp>&rsquo;
which appear to be two hexadecimal constants separated by the minus
operator.  Actually, this string is a single <dfn>preprocessing token</dfn>. 
Each such token must correspond to one token in C.  Since this does not,
GCC prints an error message.  Although it may appear obvious that what
is meant is an operator and two values, the ISO C standard specifically
requires that this be treated as erroneous.

     <p>A <dfn>preprocessing token</dfn> is a <dfn>preprocessing number</dfn> if it
begins with a digit and is followed by letters, underscores, digits,
periods and &lsquo;<samp><span class="samp">e+</span></samp>&rsquo;, &lsquo;<samp><span class="samp">e-</span></samp>&rsquo;, &lsquo;<samp><span class="samp">E+</span></samp>&rsquo;, &lsquo;<samp><span class="samp">E-</span></samp>&rsquo;, &lsquo;<samp><span class="samp">p+</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">p-</span></samp>&rsquo;, &lsquo;<samp><span class="samp">P+</span></samp>&rsquo;, or &lsquo;<samp><span class="samp">P-</span></samp>&rsquo; character sequences.  (In strict C89
mode, the sequences &lsquo;<samp><span class="samp">p+</span></samp>&rsquo;, &lsquo;<samp><span class="samp">p-</span></samp>&rsquo;, &lsquo;<samp><span class="samp">P+</span></samp>&rsquo; and &lsquo;<samp><span class="samp">P-</span></samp>&rsquo; cannot
appear in preprocessing numbers.)

     <p>To make the above program fragment valid, place whitespace in front of
the minus sign.  This whitespace will end the preprocessing number. 
</ul>

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Incompatibilities</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Incompatibilities">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Incompatibilities">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Trouble.html#Trouble" rel="up" title="Trouble">
<link href="Fixed-Headers.html#Fixed-Headers" rel="next" title="Fixed Headers">
<link href="Interoperation.html#Interoperation" rel="prev" title="Interoperation">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="Fixed-Headers.html#Fixed-Headers" accesskey="n" rel="next">Fixed Headers</a>, Previous: <a href="Interoperation.html#Interoperation" accesskey="p" rel="prev">Interoperation</a>, Up: <a href="Trouble.html#Trouble" accesskey="u" rel="up">Trouble</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
a54 5
<hr>
<a name="Incompatibilities-of-GCC"></a>
<h3 class="section">11.4 Incompatibilities of GCC</h3>
<a name="index-incompatibilities-of-GCC"></a>
<a name="index-traditional-1"></a>
d56 4
a59 1
<p>There are several noteworthy incompatibilities between GNU C and K&amp;R
d61 6
a66 6
</p>
<ul>
<li> <a name="index-string-constants"></a>
<a name="index-read_002donly-strings"></a>
<a name="index-shared-strings"></a>
GCC normally makes string constants read-only.  If several
d70 1
a70 2
<a name="index-mktemp_002c-and-constant-strings"></a>
<p>One consequence is that you cannot call <code>mktemp</code> with a string
d73 2
a74 5
</p>
<a name="index-sscanf_002c-and-constant-strings"></a>
<a name="index-fscanf_002c-and-constant-strings"></a>
<a name="index-scanf_002c-and-constant-strings"></a>
<p>Another consequence is that <code>sscanf</code> does not work on some very
d78 2
a79 2
</p>
<p>The solution to these problems is to change the program to use
a81 2
</p>
</li><li> <code>-2147483648</code> is positive.
d83 4
a86 2
<p>This is because 2147483648 cannot fit in the type <code>int</code>, so
(following the ISO C rules) its data type is <code>unsigned long int</code>.
d88 2
a89 2
</p>
</li><li> GCC does not substitute macro arguments when they appear inside of
d92 5
a96 9
<div class="smallexample">
<pre class="smallexample">#define foo(a) &quot;a&quot;
</pre></div>

<p>will produce output <code>&quot;a&quot;</code> regardless of what the argument <var>a</var> is.
</p>
</li><li> <a name="index-setjmp-incompatibilities"></a>
<a name="index-longjmp-incompatibilities"></a>
When you use <code>setjmp</code> and <code>longjmp</code>, the only automatic
d101 16
a116 18
<div class="smallexample">
<pre class="smallexample">jmp_buf j;

foo ()
{
  int a, b;

  a = fun1 ();
  if (setjmp (j))
    return a;

  a = fun2 ();
  /* <span class="roman"><code>longjmp (j)</code> may occur in <code>fun3</code>.</span> */
  return a + fun3 ();
}
</pre></div>

<p>Here <code>a</code> may or may not be restored to its first value when the
d120 2
a121 3
</p>
<a name="index-W-3"></a>
<p>If you use the <samp>-W</samp> option with the <samp>-O</samp> option, you will
d123 2
a124 2
</p>
</li><li> Programs that use preprocessing directives in the middle of macro
d128 7
a134 9
<div class="smallexample">
<pre class="smallexample">foobar (
#define luser
        hack)
</pre></div>

<p>ISO C does not permit such a construct.
</p>
</li><li> K&amp;R compilers allow comments to cross over an inclusion boundary
d137 1
a137 4
</li><li> <a name="index-external-declaration-scope"></a>
<a name="index-scope-of-external-declarations"></a>
<a name="index-declaration-scope"></a>
Declarations of external variables and functions within a block apply
d141 1
a141 1
<p>In some other C compilers, an <code>extern</code> declaration affects all the
d143 2
a144 2
</p>
</li><li> In traditional C, you can combine <code>long</code>, etc., with a typedef name,
d147 5
a151 4
<div class="smallexample">
<pre class="smallexample">typedef int foo;
typedef long foo bar;
</pre></div>
d153 1
a153 5
<p>In ISO C, this is not allowed: <code>long</code> and other type modifiers
require an explicit <code>int</code>.
</p>
</li><li> <a name="index-typedef-names-as-function-parameters"></a>
PCC allows typedef names to be used as function parameters.
d155 1
a155 1
</li><li> Traditional C allows the following erroneous pair of declarations to
d158 4
a161 6
<div class="smallexample">
<pre class="smallexample">typedef int foo;
typedef foo foo;
</pre></div>

</li><li> GCC treats all characters of identifiers as significant.  According to
d168 2
a169 3
</li><li> <a name="index-whitespace"></a>
PCC allows whitespace in the middle of compound assignment operators
such as &lsquo;<samp>+=</samp>&rsquo;.  GCC, following the ISO standard, does not
d172 1
a172 3
</li><li> <a name="index-apostrophes"></a>
<a name="index-_0027"></a>
GCC complains about unterminated character constants inside of
d178 8
a185 10
<div class="smallexample">
<pre class="smallexample">#if 0
You can't expect this to work.
#endif
</pre></div>

<p>The best solution to such a problem is to put the text into an actual
C comment delimited by &lsquo;<samp>/*&hellip;*/</samp>&rsquo;.
</p>
</li><li> Many user programs contain the declaration &lsquo;<samp>long time ();</samp>&rsquo;.  In the
d190 1
a190 1
&lsquo;<samp>long time ();</samp>&rsquo; is erroneous.
d192 1
a192 1
<p>The solution is to change your program to use appropriate system headers
d196 2
a197 3
</p>
</li><li> <a name="index-float-as-function-value-type"></a>
When compiling functions that return <code>float</code>, PCC converts it to
d202 1
a202 3
</li><li> <a name="index-structures"></a>
<a name="index-unions"></a>
When compiling functions that return structures or unions, GCC
d207 1
a207 1
<p>The method used by GCC is as follows: a structure or union which is
d213 2
a214 2
</p>
<p>By contrast, PCC on most target machines returns structures and unions
d216 1
a216 1
returning the address of that storage as if it were a pointer value.
d220 2
a221 2
</p>
<p>On some newer machines, PCC uses a reentrant convention for all
d225 5
a229 8
</p>
<a name="index-fpcc_002dstruct_002dreturn-1"></a>
<p>You can tell GCC to use a compatible convention for all structure and
union returning with the option <samp>-fpcc-struct-return</samp>.
</p>
</li><li> <a name="index-preprocessing-tokens"></a>
<a name="index-preprocessing-numbers"></a>
GCC complains about program fragments such as &lsquo;<samp>0x74ae-0x4000</samp>&rsquo;
d231 1
a231 1
operator.  Actually, this string is a single <em>preprocessing token</em>.
d237 1
a237 1
<p>A <em>preprocessing token</em> is a <em>preprocessing number</em> if it
d239 3
a241 3
periods and &lsquo;<samp>e+</samp>&rsquo;, &lsquo;<samp>e-</samp>&rsquo;, &lsquo;<samp>E+</samp>&rsquo;, &lsquo;<samp>E-</samp>&rsquo;, &lsquo;<samp>p+</samp>&rsquo;,
&lsquo;<samp>p-</samp>&rsquo;, &lsquo;<samp>P+</samp>&rsquo;, or &lsquo;<samp>P-</samp>&rsquo; character sequences.  (In strict C90
mode, the sequences &lsquo;<samp>p+</samp>&rsquo;, &lsquo;<samp>p-</samp>&rsquo;, &lsquo;<samp>P+</samp>&rsquo; and &lsquo;<samp>P-</samp>&rsquo; cannot
a242 10
</p>
<p>To make the above program fragment valid, place whitespace in front of
the minus sign.  This whitespace will end the preprocessing number.
</p></li></ul>

<hr>
<div class="header">
<p>
Next: <a href="Fixed-Headers.html#Fixed-Headers" accesskey="n" rel="next">Fixed Headers</a>, Previous: <a href="Interoperation.html#Interoperation" accesskey="p" rel="prev">Interoperation</a>, Up: <a href="Trouble.html#Trouble" accesskey="u" rel="up">Trouble</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>
d244 3
d248 1
a249 2
</body>
</html>
@

