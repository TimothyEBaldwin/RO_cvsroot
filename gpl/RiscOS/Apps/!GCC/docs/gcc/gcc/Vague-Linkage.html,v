head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.17;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.17;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.23;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Vague Linkage - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="C_002b_002b-Extensions.html#C_002b_002b-Extensions" title="C++ Extensions">
<link rel="prev" href="Restricted-Pointers.html#Restricted-Pointers" title="Restricted Pointers">
<link rel="next" href="C_002b_002b-Interface.html#C_002b_002b-Interface" title="C++ Interface">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Vague-Linkage"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="C_002b_002b-Interface.html#C_002b_002b-Interface">C++ Interface</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Restricted-Pointers.html#Restricted-Pointers">Restricted Pointers</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="C_002b_002b-Extensions.html#C_002b_002b-Extensions">C++ Extensions</a>
<hr>
</div>

<h3 class="section">6.3 Vague Linkage</h3>

<p><a name="index-vague-linkage-2461"></a>
There are several constructs in C++ which require space in the object
file but are not clearly tied to a single translation unit.  We say that
these constructs have &ldquo;vague linkage&rdquo;.  Typically such constructs are
emitted wherever they are needed, though sometimes we can be more
clever.

     <dl>
<dt>Inline Functions<dd>Inline functions are typically defined in a header file which can be
included in many different compilations.  Hopefully they can usually be
inlined, but sometimes an out-of-line copy is necessary, if the address
of the function is taken or if inlining fails.  In general, we emit an
out-of-line copy in all translation units where one is needed.  As an
exception, we only emit inline virtual functions with the vtable, since
it will always require a copy.

     <p>Local static variables and string constants used in an inline function
are also considered to have vague linkage, since they must be shared
between all inlined and out-of-line instances of the function.

     <br><dt>VTables<dd><a name="index-vtable-2462"></a>C++ virtual functions are implemented in most compilers using a lookup
table, known as a vtable.  The vtable contains pointers to the virtual
functions provided by a class, and each object of the class contains a
pointer to its vtable (or vtables, in some multiple-inheritance
situations).  If the class declares any non-inline, non-pure virtual
functions, the first one is chosen as the &ldquo;key method&rdquo; for the class,
and the vtable is only emitted in the translation unit where the key
method is defined.

     <p><em>Note:</em> If the chosen key method is later defined as inline, the
vtable will still be emitted in every translation unit which defines it. 
Make sure that any inline virtuals are declared inline in the class
body, even if they are not defined there.

     <br><dt>type_info objects<dd><a name="index-type_005finfo-2463"></a><a name="index-RTTI-2464"></a>C++ requires information about types to be written out in order to
implement &lsquo;<samp><span class="samp">dynamic_cast</span></samp>&rsquo;, &lsquo;<samp><span class="samp">typeid</span></samp>&rsquo; and exception handling. 
For polymorphic classes (classes with virtual functions), the type_info
object is written out along with the vtable so that &lsquo;<samp><span class="samp">dynamic_cast</span></samp>&rsquo;
can determine the dynamic type of a class object at runtime.  For all
other types, we write out the type_info object when it is used: when
applying &lsquo;<samp><span class="samp">typeid</span></samp>&rsquo; to an expression, throwing an object, or
referring to a type in a catch clause or exception specification.

     <br><dt>Template Instantiations<dd>Most everything in this section also applies to template instantiations,
but there are other options as well. 
See <a href="Template-Instantiation.html#Template-Instantiation">Where's the Template?</a>.

 </dl>

 <p>When used with GNU ld version 2.8 or later on an ELF system such as
GNU/Linux or Solaris 2, or on Microsoft Windows, duplicate copies of
these constructs will be discarded at link time.  This is known as
COMDAT support.

 <p>On targets that don't support COMDAT, but do support weak symbols, GCC
will use them.  This way one copy will override all the others, but
the unused copies will still take up space in the executable.

 <p>For targets which do not support either COMDAT or weak symbols,
most entities with vague linkage will be emitted as local symbols to
avoid duplicate definition errors from the linker.  This will not happen
for local statics in inlines, however, as having multiple copies will
almost certainly break things.

 <p>See <a href="C_002b_002b-Interface.html#C_002b_002b-Interface">Declarations and Definitions in One Header</a>, for
another way to control placement of these constructs.

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Vague Linkage</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Vague Linkage">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Vague Linkage">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="C_002b_002b-Extensions.html#C_002b_002b-Extensions" rel="up" title="C++ Extensions">
<link href="C_002b_002b-Interface.html#C_002b_002b-Interface" rel="next" title="C++ Interface">
<link href="Restricted-Pointers.html#Restricted-Pointers" rel="prev" title="Restricted Pointers">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="C_002b_002b-Interface.html#C_002b_002b-Interface" accesskey="n" rel="next">C++ Interface</a>, Previous: <a href="Restricted-Pointers.html#Restricted-Pointers" accesskey="p" rel="prev">Restricted Pointers</a>, Up: <a href="C_002b_002b-Extensions.html#C_002b_002b-Extensions" accesskey="u" rel="up">C++ Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
a54 4
<hr>
<a name="Vague-Linkage-1"></a>
<h3 class="section">7.3 Vague Linkage</h3>
<a name="index-vague-linkage"></a>
d56 4
a59 1
<p>There are several constructs in C++ which require space in the object
d64 3
a66 4
</p>
<dl compact="compact">
<dt>Inline Functions</dt>
<dd><p>Inline functions are typically defined in a header file which can be
d73 2
a74 2
</p>
<p>Local static variables and string constants used in an inline function
d77 2
a78 5
</p>
</dd>
<dt>VTables</dt>
<dd><a name="index-vtable"></a>
<p>C++ virtual functions are implemented in most compilers using a lookup
d86 3
a88 3
</p>
<p><em>Note:</em> If the chosen key method is later defined as inline, the
vtable will still be emitted in every translation unit which defines it.
d91 5
a95 9
</p>
</dd>
<dt><code>type_info</code> objects</dt>
<dd><a name="index-type_005finfo"></a>
<a name="index-RTTI"></a>
<p>C++ requires information about types to be written out in order to
implement &lsquo;<samp>dynamic_cast</samp>&rsquo;, &lsquo;<samp>typeid</samp>&rsquo; and exception handling.
For polymorphic classes (classes with virtual functions), the &lsquo;<samp>type_info</samp>&rsquo;
object is written out along with the vtable so that &lsquo;<samp>dynamic_cast</samp>&rsquo;
d97 2
a98 2
other types, we write out the &lsquo;<samp>type_info</samp>&rsquo; object when it is used: when
applying &lsquo;<samp>typeid</samp>&rsquo; to an expression, throwing an object, or
a99 9
</p>
</dd>
<dt>Template Instantiations</dt>
<dd><p>Most everything in this section also applies to template instantiations,
but there are other options as well.
See <a href="Template-Instantiation.html#Template-Instantiation">Where&rsquo;s the Template?</a>.
</p>
</dd>
</dl>
d101 7
a107 1
<p>When used with GNU ld version 2.8 or later on an ELF system such as
d111 2
a112 2
</p>
<p>On targets that don&rsquo;t support COMDAT, but do support weak symbols, GCC
d115 2
a116 2
</p>
<p>For targets which do not support either COMDAT or weak symbols,
d121 2
a122 2
</p>
<p>See <a href="C_002b_002b-Interface.html#C_002b_002b-Interface">Declarations and Definitions in One Header</a>, for
a123 7
</p>
<hr>
<div class="header">
<p>
Next: <a href="C_002b_002b-Interface.html#C_002b_002b-Interface" accesskey="n" rel="next">C++ Interface</a>, Previous: <a href="Restricted-Pointers.html#Restricted-Pointers" accesskey="p" rel="prev">Restricted Pointers</a>, Up: <a href="C_002b_002b-Extensions.html#C_002b_002b-Extensions" accesskey="u" rel="up">C++ Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>

d125 1
a126 2
</body>
</html>
@

