head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.17;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.17;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.22;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Complex - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="C-Extensions.html#C-Extensions" title="C Extensions">
<link rel="prev" href="Long-Long.html#Long-Long" title="Long Long">
<link rel="next" href="Hex-Floats.html#Hex-Floats" title="Hex Floats">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Complex"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Hex-Floats.html#Hex-Floats">Hex Floats</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Long-Long.html#Long-Long">Long Long</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="C-Extensions.html#C-Extensions">C Extensions</a>
<hr>
</div>

<h3 class="section">5.9 Complex Numbers</h3>

<p><a name="index-complex-numbers-1709"></a><a name="index-g_t_0040code_007b_005fComplex_007d-keyword-1710"></a><a name="index-g_t_0040code_007b_005f_005fcomplex_005f_005f_007d-keyword-1711"></a>
ISO C99 supports complex floating data types, and as an extension GCC
supports them in C89 mode and in C++, and supports complex integer data
types which are not part of ISO C99.  You can declare complex types
using the keyword <code>_Complex</code>.  As an extension, the older GNU
keyword <code>__complex__</code> is also supported.

 <p>For example, &lsquo;<samp><span class="samp">_Complex double x;</span></samp>&rsquo; declares <code>x</code> as a
variable whose real part and imaginary part are both of type
<code>double</code>.  &lsquo;<samp><span class="samp">_Complex short int y;</span></samp>&rsquo; declares <code>y</code> to
have real and imaginary parts of type <code>short int</code>; this is not
likely to be useful, but it shows that the set of complex types is
complete.

 <p>To write a constant with a complex data type, use the suffix &lsquo;<samp><span class="samp">i</span></samp>&rsquo; or
&lsquo;<samp><span class="samp">j</span></samp>&rsquo; (either one; they are equivalent).  For example, <code>2.5fi</code>
has type <code>_Complex float</code> and <code>3i</code> has type
<code>_Complex int</code>.  Such a constant always has a pure imaginary
value, but you can form any complex value you like by adding one to a
real constant.  This is a GNU extension; if you have an ISO C99
conforming C library (such as GNU libc), and want to construct complex
constants of floating type, you should include <code>&lt;complex.h&gt;</code> and
use the macros <code>I</code> or <code>_Complex_I</code> instead.

 <p><a name="index-g_t_0040code_007b_005f_005freal_005f_005f_007d-keyword-1712"></a><a name="index-g_t_0040code_007b_005f_005fimag_005f_005f_007d-keyword-1713"></a>To extract the real part of a complex-valued expression <var>exp</var>, write
<code>__real__ </code><var>exp</var>.  Likewise, use <code>__imag__</code> to
extract the imaginary part.  This is a GNU extension; for values of
floating type, you should use the ISO C99 functions <code>crealf</code>,
<code>creal</code>, <code>creall</code>, <code>cimagf</code>, <code>cimag</code> and
<code>cimagl</code>, declared in <code>&lt;complex.h&gt;</code> and also provided as
built-in functions by GCC.

 <p><a name="index-complex-conjugation-1714"></a>The operator &lsquo;<samp><span class="samp">~</span></samp>&rsquo; performs complex conjugation when used on a value
with a complex type.  This is a GNU extension; for values of
floating type, you should use the ISO C99 functions <code>conjf</code>,
<code>conj</code> and <code>conjl</code>, declared in <code>&lt;complex.h&gt;</code> and also
provided as built-in functions by GCC.

 <p>GCC can allocate complex automatic variables in a noncontiguous
fashion; it's even possible for the real part to be in a register while
the imaginary part is on the stack (or vice-versa).  Only the DWARF2
debug info format can represent this, so use of DWARF2 is recommended. 
If you are using the stabs debug info format, GCC describes a noncontiguous
complex variable as if it were two separate variables of noncomplex type. 
If the variable's actual name is <code>foo</code>, the two fictitious
variables are named <code>foo$real</code> and <code>foo$imag</code>.  You can
examine and set these two fictitious variables with your debugger.

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Complex</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Complex">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Complex">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="C-Extensions.html#C-Extensions" rel="up" title="C Extensions">
<link href="Floating-Types.html#Floating-Types" rel="next" title="Floating Types">
<link href="Long-Long.html#Long-Long" rel="prev" title="Long Long">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="Floating-Types.html#Floating-Types" accesskey="n" rel="next">Floating Types</a>, Previous: <a href="Long-Long.html#Long-Long" accesskey="p" rel="prev">Long Long</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
a54 6
<hr>
<a name="Complex-Numbers"></a>
<h3 class="section">6.10 Complex Numbers</h3>
<a name="index-complex-numbers"></a>
<a name="index-_005fComplex-keyword"></a>
<a name="index-_005f_005fcomplex_005f_005f-keyword"></a>
d56 5
a60 2
<p>ISO C99 supports complex floating data types, and as an extension GCC
supports them in C90 mode and in C++, and supports complex integer data
d64 2
a65 2
</p>
<p>For example, &lsquo;<samp>_Complex double x;</samp>&rsquo; declares <code>x</code> as a
d67 1
a67 1
<code>double</code>.  &lsquo;<samp>_Complex short int y;</samp>&rsquo; declares <code>y</code> to
d71 3
a73 3
</p>
<p>To write a constant with a complex data type, use the suffix &lsquo;<samp>i</samp>&rsquo; or
&lsquo;<samp>j</samp>&rsquo; (either one; they are equivalent).  For example, <code>2.5fi</code>
d81 3
a83 5
</p>
<a name="index-_005f_005freal_005f_005f-keyword"></a>
<a name="index-_005f_005fimag_005f_005f-keyword"></a>
<p>To extract the real part of a complex-valued expression <var>exp</var>, write
<code>__real__ <var>exp</var></code>.  Likewise, use <code>__imag__</code> to
d89 2
a90 3
</p>
<a name="index-complex-conjugation"></a>
<p>The operator &lsquo;<samp>~</samp>&rsquo; performs complex conjugation when used on a value
d95 3
a97 3
</p>
<p>GCC can allocate complex automatic variables in a noncontiguous
fashion; it&rsquo;s even possible for the real part to be in a register while
d99 1
a99 1
debug info format can represent this, so use of DWARF2 is recommended.
d101 2
a102 2
complex variable as if it were two separate variables of noncomplex type.
If the variable&rsquo;s actual name is <code>foo</code>, the two fictitious
a104 7
</p>
<hr>
<div class="header">
<p>
Next: <a href="Floating-Types.html#Floating-Types" accesskey="n" rel="next">Floating Types</a>, Previous: <a href="Long-Long.html#Long-Long" accesskey="p" rel="prev">Long Long</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>

d106 1
a107 2
</body>
</html>
@

