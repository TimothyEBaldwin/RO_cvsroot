head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.16;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.16;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.21;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Typeof - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="C-Extensions.html#C-Extensions" title="C Extensions">
<link rel="prev" href="Constructing-Calls.html#Constructing-Calls" title="Constructing Calls">
<link rel="next" href="Conditionals.html#Conditionals" title="Conditionals">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Typeof"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Conditionals.html#Conditionals">Conditionals</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Constructing-Calls.html#Constructing-Calls">Constructing Calls</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="C-Extensions.html#C-Extensions">C Extensions</a>
<hr>
</div>

<h3 class="section">5.6 Referring to a Type with <code>typeof</code></h3>

<p><a name="index-typeof-1689"></a><a name="index-sizeof-1690"></a><a name="index-macros_002c-types-of-arguments-1691"></a>
Another way to refer to the type of an expression is with <code>typeof</code>. 
The syntax of using of this keyword looks like <code>sizeof</code>, but the
construct acts semantically like a type name defined with <code>typedef</code>.

 <p>There are two ways of writing the argument to <code>typeof</code>: with an
expression or with a type.  Here is an example with an expression:

<pre class="smallexample">     typeof (x[0](1))
</pre>
 <p class="noindent">This assumes that <code>x</code> is an array of pointers to functions;
the type described is that of the values of the functions.

 <p>Here is an example with a typename as the argument:

<pre class="smallexample">     typeof (int *)
</pre>
 <p class="noindent">Here the type described is that of pointers to <code>int</code>.

 <p>If you are writing a header file that must work when included in ISO C
programs, write <code>__typeof__</code> instead of <code>typeof</code>. 
See <a href="Alternate-Keywords.html#Alternate-Keywords">Alternate Keywords</a>.

 <p>A <code>typeof</code>-construct can be used anywhere a typedef name could be
used.  For example, you can use it in a declaration, in a cast, or inside
of <code>sizeof</code> or <code>typeof</code>.

 <p><code>typeof</code> is often useful in conjunction with the
statements-within-expressions feature.  Here is how the two together can
be used to define a safe &ldquo;maximum&rdquo; macro that operates on any
arithmetic type and evaluates each of its arguments exactly once:

<pre class="smallexample">     #define max(a,b) \
       ({ typeof (a) _a = (a); \
           typeof (b) _b = (b); \
         _a &gt; _b ? _a : _b; })
</pre>
 <p><a name="index-underscores-in-variables-in-macros-1692"></a><a name="index-g_t_0040samp_007b_005f_007d-in-variables-in-macros-1693"></a><a name="index-local-variables-in-macros-1694"></a><a name="index-variables_002c-local_002c-in-macros-1695"></a><a name="index-macros_002c-local-variables-in-1696"></a>
The reason for using names that start with underscores for the local
variables is to avoid conflicts with variable names that occur within the
expressions that are substituted for <code>a</code> and <code>b</code>.  Eventually we
hope to design a new form of declaration syntax that allows you to declare
variables whose scopes start only after their initializers; this will be a
more reliable way to prevent such conflicts.

<p class="noindent">Some more examples of the use of <code>typeof</code>:

     <ul>
<li>This declares <code>y</code> with the type of what <code>x</code> points to.

     <pre class="smallexample">          typeof (*x) y;
</pre>
     <li>This declares <code>y</code> as an array of such values.

     <pre class="smallexample">          typeof (*x) y[4];
</pre>
     <li>This declares <code>y</code> as an array of pointers to characters:

     <pre class="smallexample">          typeof (typeof (char *)[4]) y;
</pre>
     <p class="noindent">It is equivalent to the following traditional C declaration:

     <pre class="smallexample">          char *y[4];
</pre>
     <p>To see the meaning of the declaration using <code>typeof</code>, and why it
might be a useful way to write, rewrite it with these macros:

     <pre class="smallexample">          #define pointer(T)  typeof(T *)
          #define array(T, N) typeof(T [N])
</pre>
     <p class="noindent">Now the declaration can be rewritten this way:

     <pre class="smallexample">          array (pointer (char), 4) y;
</pre>
     <p class="noindent">Thus, <code>array (pointer (char), 4)</code> is the type of arrays of 4
pointers to <code>char</code>. 
</ul>

 <p><em>Compatibility Note:</em> In addition to <code>typeof</code>, GCC 2 supported
a more limited extension which permitted one to write

<pre class="smallexample">     typedef <var>T</var> = <var>expr</var>;
</pre>
 <p class="noindent">with the effect of declaring <var>T</var> to have the type of the expression
<var>expr</var>.  This extension does not work with GCC 3 (versions between
3.0 and 3.2 will crash; 3.2.1 and later give an error).  Code which
relies on it should be rewritten to use <code>typeof</code>:

<pre class="smallexample">     typedef typeof(<var>expr</var>) <var>T</var>;
</pre>
 <p class="noindent">This will work with all versions of GCC.

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Typeof</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Typeof">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Typeof">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="C-Extensions.html#C-Extensions" rel="up" title="C Extensions">
<link href="Conditionals.html#Conditionals" rel="next" title="Conditionals">
<link href="Constructing-Calls.html#Constructing-Calls" rel="prev" title="Constructing Calls">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="Conditionals.html#Conditionals" accesskey="n" rel="next">Conditionals</a>, Previous: <a href="Constructing-Calls.html#Constructing-Calls" accesskey="p" rel="prev">Constructing Calls</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
a54 6
<hr>
<a name="Referring-to-a-Type-with-typeof"></a>
<h3 class="section">6.6 Referring to a Type with <code>typeof</code></h3>
<a name="index-typeof"></a>
<a name="index-sizeof"></a>
<a name="index-macros_002c-types-of-arguments"></a>
d56 4
a59 1
<p>Another way to refer to the type of an expression is with <code>typeof</code>.
d62 2
a63 2
</p>
<p>There are two ways of writing the argument to <code>typeof</code>: with an
a64 4
</p>
<div class="smallexample">
<pre class="smallexample">typeof (x[0](1))
</pre></div>
d66 3
a68 1
<p>This assumes that <code>x</code> is an array of pointers to functions;
d70 9
a78 11
</p>
<p>Here is an example with a typename as the argument:
</p>
<div class="smallexample">
<pre class="smallexample">typeof (int *)
</pre></div>

<p>Here the type described is that of pointers to <code>int</code>.
</p>
<p>If you are writing a header file that must work when included in ISO C
programs, write <code>__typeof__</code> instead of <code>typeof</code>.
d80 2
a81 2
</p>
<p>A <code>typeof</code>-construct can be used anywhere a typedef name could be
d84 2
a85 6
</p>
<p>The operand of <code>typeof</code> is evaluated for its side effects if and
only if it is an expression of variably modified type or the name of
such a type.
</p>
<p><code>typeof</code> is often useful in conjunction with the
a88 13
</p>
<div class="smallexample">
<pre class="smallexample">#define max(a,b) \
  ({ typeof (a) _a = (a); \
      typeof (b) _b = (b); \
    _a &gt; _b ? _a : _b; })
</pre></div>

<a name="index-underscores-in-variables-in-macros"></a>
<a name="index-_005f-in-variables-in-macros"></a>
<a name="index-local-variables-in-macros"></a>
<a name="index-variables_002c-local_002c-in-macros"></a>
<a name="index-macros_002c-local-variables-in"></a>
d90 7
a96 1
<p>The reason for using names that start with underscores for the local
a101 27
</p>
<p>Some more examples of the use of <code>typeof</code>:
</p>
<ul>
<li> This declares <code>y</code> with the type of what <code>x</code> points to.

<div class="smallexample">
<pre class="smallexample">typeof (*x) y;
</pre></div>

</li><li> This declares <code>y</code> as an array of such values.

<div class="smallexample">
<pre class="smallexample">typeof (*x) y[4];
</pre></div>

</li><li> This declares <code>y</code> as an array of pointers to characters:

<div class="smallexample">
<pre class="smallexample">typeof (typeof (char *)[4]) y;
</pre></div>

<p>It is equivalent to the following traditional C declaration:
</p>
<div class="smallexample">
<pre class="smallexample">char *y[4];
</pre></div>
d103 20
a122 1
<p>To see the meaning of the declaration using <code>typeof</code>, and why it
a123 15
</p>
<div class="smallexample">
<pre class="smallexample">#define pointer(T)  typeof(T *)
#define array(T, N) typeof(T [N])
</pre></div>

<p>Now the declaration can be rewritten this way:
</p>
<div class="smallexample">
<pre class="smallexample">array (pointer (char), 4) y;
</pre></div>

<p>Thus, <code>array (pointer (char), 4)</code> is the type of arrays of 4
pointers to <code>char</code>.
</p></li></ul>
d125 12
a136 1
<p><em>Compatibility Note:</em> In addition to <code>typeof</code>, GCC 2 supported
a137 4
</p>
<div class="smallexample">
<pre class="smallexample">typedef <var>T</var> = <var>expr</var>;
</pre></div>
d139 3
a141 1
<p>with the effect of declaring <var>T</var> to have the type of the expression
a144 12
</p>
<div class="smallexample">
<pre class="smallexample">typedef typeof(<var>expr</var>) <var>T</var>;
</pre></div>

<p>This will work with all versions of GCC.
</p>
<hr>
<div class="header">
<p>
Next: <a href="Conditionals.html#Conditionals" accesskey="n" rel="next">Conditionals</a>, Previous: <a href="Constructing-Calls.html#Constructing-Calls" accesskey="p" rel="prev">Constructing Calls</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>
d146 3
d150 1
a151 2
</body>
</html>
@

