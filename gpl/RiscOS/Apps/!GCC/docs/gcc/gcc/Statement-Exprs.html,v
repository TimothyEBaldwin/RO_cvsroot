head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.18;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.18;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.24;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Statement Exprs - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="C-Extensions.html#C-Extensions" title="C Extensions">
<link rel="next" href="Local-Labels.html#Local-Labels" title="Local Labels">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Statement-Exprs"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Local-Labels.html#Local-Labels">Local Labels</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="C-Extensions.html#C-Extensions">C Extensions</a>
<hr>
</div>

<h3 class="section">5.1 Statements and Declarations in Expressions</h3>

<p><a name="index-statements-inside-expressions-1670"></a><a name="index-declarations-inside-expressions-1671"></a><a name="index-expressions-containing-statements-1672"></a><a name="index-macros_002c-statements-in-expressions-1673"></a>
<!-- the above section title wrapped and causes an underfull hbox.. i -->
<!-- changed it from "within" to "in". -mew 4feb93 -->
A compound statement enclosed in parentheses may appear as an expression
in GNU C.  This allows you to use loops, switches, and local variables
within an expression.

 <p>Recall that a compound statement is a sequence of statements surrounded
by braces; in this construct, parentheses go around the braces.  For
example:

<pre class="smallexample">     ({ int y = foo (); int z;
        if (y &gt; 0) z = y;
        else z = - y;
        z; })
</pre>
 <p class="noindent">is a valid (though slightly more complex than necessary) expression
for the absolute value of <code>foo ()</code>.

 <p>The last thing in the compound statement should be an expression
followed by a semicolon; the value of this subexpression serves as the
value of the entire construct.  (If you use some other kind of statement
last within the braces, the construct has type <code>void</code>, and thus
effectively no value.)

 <p>This feature is especially useful in making macro definitions &ldquo;safe&rdquo; (so
that they evaluate each operand exactly once).  For example, the
&ldquo;maximum&rdquo; function is commonly defined as a macro in standard C as
follows:

<pre class="smallexample">     #define max(a,b) ((a) &gt; (b) ? (a) : (b))
</pre>
 <p class="noindent"><a name="index-side-effects_002c-macro-argument-1674"></a>But this definition computes either <var>a</var> or <var>b</var> twice, with bad
results if the operand has side effects.  In GNU C, if you know the
type of the operands (here taken as <code>int</code>), you can define
the macro safely as follows:

<pre class="smallexample">     #define maxint(a,b) \
       ({int _a = (a), _b = (b); _a &gt; _b ? _a : _b; })
</pre>
 <p>Embedded statements are not allowed in constant expressions, such as
the value of an enumeration constant, the width of a bit-field, or
the initial value of a static variable.

 <p>If you don't know the type of the operand, you can still do this, but you
must use <code>typeof</code> (see <a href="Typeof.html#Typeof">Typeof</a>).

 <p>In G++, the result value of a statement expression undergoes array and
function pointer decay, and is returned by value to the enclosing
expression.  For instance, if <code>A</code> is a class, then

<pre class="smallexample">             A a;
     
             ({a;}).Foo ()
</pre>
 <p class="noindent">will construct a temporary <code>A</code> object to hold the result of the
statement expression, and that will be used to invoke <code>Foo</code>. 
Therefore the <code>this</code> pointer observed by <code>Foo</code> will not be the
address of <code>a</code>.

 <p>Any temporaries created within a statement within a statement expression
will be destroyed at the statement's end.  This makes statement
expressions inside macros slightly different from function calls.  In
the latter case temporaries introduced during argument evaluation will
be destroyed at the end of the statement that includes the function
call.  In the statement expression case they will be destroyed during
the statement expression.  For instance,

<pre class="smallexample">     #define macro(a)  ({__typeof__(a) b = (a); b + 3; })
     template&lt;typename T&gt; T function(T a) { T b = a; return b + 3; }
     
     void foo ()
     {
       macro (X ());
       function (X ());
     }
</pre>
 <p class="noindent">will have different places where temporaries are destroyed.  For the
<code>macro</code> case, the temporary <code>X</code> will be destroyed just after
the initialization of <code>b</code>.  In the <code>function</code> case that
temporary will be destroyed when the function returns.

 <p>These considerations mean that it is probably a bad idea to use
statement-expressions of this form in header files that are designed to
work with C++.  (Note that some versions of the GNU C Library contained
header files using statement-expression that lead to precisely this
bug.)

 <p>Jumping into a statement expression with <code>goto</code> or using a
<code>switch</code> statement outside the statement expression with a
<code>case</code> or <code>default</code> label inside the statement expression is
not permitted.  Jumping into a statement expression with a computed
<code>goto</code> (see <a href="Labels-as-Values.html#Labels-as-Values">Labels as Values</a>) yields undefined behavior. 
Jumping out of a statement expression is permitted, but if the
statement expression is part of a larger expression then it is
unspecified which other subexpressions of that expression have been
evaluated except where the language definition requires certain
subexpressions to be evaluated before or after the statement
expression.  In any case, as with a function call the evaluation of a
statement expression is not interleaved with the evaluation of other
parts of the containing expression.  For example,

<pre class="smallexample">       foo (), (({ bar1 (); goto a; 0; }) + bar2 ()), baz();
</pre>
 <p class="noindent">will call <code>foo</code> and <code>bar1</code> and will not call <code>baz</code> but
may or may not call <code>bar2</code>.  If <code>bar2</code> is called, it will be
called after <code>foo</code> and before <code>bar1</code>

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 13
a13 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d16 1
a16 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d18 4
a21 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d25 1
a25 1
A GNU Manual
d29 1
a29 1
You have freedom to copy and modify this GNU Manual, like GNU
d31 13
a43 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Statement Exprs</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Statement Exprs">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Statement Exprs">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="C-Extensions.html#C-Extensions" rel="up" title="C Extensions">
<link href="Local-Labels.html#Local-Labels" rel="next" title="Local Labels">
<link href="C-Extensions.html#C-Extensions" rel="prev" title="C Extensions">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d45 2
a46 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a47 1
<div class="header">
d49 3
a51 1
Next: <a href="Local-Labels.html#Local-Labels" accesskey="n" rel="next">Local Labels</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
a52 7
<hr>
<a name="Statements-and-Declarations-in-Expressions"></a>
<h3 class="section">6.1 Statements and Declarations in Expressions</h3>
<a name="index-statements-inside-expressions"></a>
<a name="index-declarations-inside-expressions"></a>
<a name="index-expressions-containing-statements"></a>
<a name="index-macros_002c-statements-in-expressions"></a>
d54 6
a59 1
<p>A compound statement enclosed in parentheses may appear as an expression
d62 2
a63 2
</p>
<p>Recall that a compound statement is a sequence of statements surrounded
a65 7
</p>
<div class="smallexample">
<pre class="smallexample">({ int y = foo (); int z;
   if (y &gt; 0) z = y;
   else z = - y;
   z; })
</pre></div>
d67 6
a72 1
<p>is a valid (though slightly more complex than necessary) expression
d74 2
a75 2
</p>
<p>The last thing in the compound statement should be an expression
d80 2
a81 2
</p>
<p>This feature is especially useful in making macro definitions &ldquo;safe&rdquo; (so
a84 4
</p>
<div class="smallexample">
<pre class="smallexample">#define max(a,b) ((a) &gt; (b) ? (a) : (b))
</pre></div>
d86 3
a88 2
<a name="index-side-effects_002c-macro-argument"></a>
<p>But this definition computes either <var>a</var> or <var>b</var> twice, with bad
a91 5
</p>
<div class="smallexample">
<pre class="smallexample">#define maxint(a,b) \
  ({int _a = (a), _b = (b); _a &gt; _b ? _a : _b; })
</pre></div>
d93 4
a96 1
<p>Embedded statements are not allowed in constant expressions, such as
d99 2
a100 2
</p>
<p>If you don&rsquo;t know the type of the operand, you can still do this, but you
d102 2
a103 2
</p>
<p>In G++, the result value of a statement expression undergoes array and
a105 6
</p>
<div class="smallexample">
<pre class="smallexample">        A a;

        ({a;}).Foo ()
</pre></div>
d107 6
a112 2
<p>will construct a temporary <code>A</code> object to hold the result of the
statement expression, and that will be used to invoke <code>Foo</code>.
d115 3
a117 3
</p>
<p>Any temporaries created within a statement within a statement expression
will be destroyed at the statement&rsquo;s end.  This makes statement
a122 11
</p>
<div class="smallexample">
<pre class="smallexample">#define macro(a)  ({__typeof__(a) b = (a); b + 3; })
template&lt;typename T&gt; T function(T a) { T b = a; return b + 3; }

void foo ()
{
  macro (X ());
  function (X ());
}
</pre></div>
d124 10
a133 1
<p>will have different places where temporaries are destroyed.  For the
d137 2
a138 2
</p>
<p>These considerations mean that it is probably a bad idea to use
d143 2
a144 2
</p>
<p>Jumping into a statement expression with <code>goto</code> or using a
d148 1
a148 1
<code>goto</code> (see <a href="Labels-as-Values.html#Labels-as-Values">Labels as Values</a>) yields undefined behavior.
a156 4
</p>
<div class="smallexample">
<pre class="smallexample">  foo (), (({ bar1 (); goto a; 0; }) + bar2 ()), baz();
</pre></div>
d158 3
a160 1
<p>will call <code>foo</code> and <code>bar1</code> and will not call <code>baz</code> but
a162 7
</p>
<hr>
<div class="header">
<p>
Next: <a href="Local-Labels.html#Local-Labels" accesskey="n" rel="next">Local Labels</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>

d164 1
a165 2
</body>
</html>
@

