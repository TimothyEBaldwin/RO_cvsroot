head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.19;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.19;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.27;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>What you can and what you cannot do in +load - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Executing-code-before-main.html#Executing-code-before-main" title="Executing code before main">
<link rel="prev" href="Executing-code-before-main.html#Executing-code-before-main" title="Executing code before main">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="What-you-can-and-what-you-cannot-do-in-+load"></a>
<a name="What-you-can-and-what-you-cannot-do-in-_002bload"></a>
<p>
Previous:&nbsp;<a rel="previous" accesskey="p" href="Executing-code-before-main.html#Executing-code-before-main">Executing code before main</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Executing-code-before-main.html#Executing-code-before-main">Executing code before main</a>
<hr>
</div>

<h4 class="subsection">7.1.1 What you can and what you cannot do in <code>+load</code></h4>

<p>The <code>+load</code> implementation in the GNU runtime guarantees you the following
things:

     <ul>
<li>you can write whatever C code you like;

     <li>you can send messages to Objective-C constant strings (<code>@@"this is a
constant string"</code>);

     <li>you can allocate and send messages to objects whose class is implemented
in the same file;

     <li>the <code>+load</code> implementation of all super classes of a class are executed before the <code>+load</code> of that class is executed;

     <li>the <code>+load</code> implementation of a class is executed before the
<code>+load</code> implementation of any category.

 </ul>

 <p>In particular, the following things, even if they can work in a
particular case, are not guaranteed:

     <ul>
<li>allocation of or sending messages to arbitrary objects;

     <li>allocation of or sending messages to objects whose classes have a
category implemented in the same file;

 </ul>

 <p>You should make no assumptions about receiving <code>+load</code> in sibling
classes when you write <code>+load</code> of a class.  The order in which
sibling classes receive <code>+load</code> is not guaranteed.

 <p>The order in which <code>+load</code> and <code>+initialize</code> are called could
be problematic if this matters.  If you don't allocate objects inside
<code>+load</code>, it is guaranteed that <code>+load</code> is called before
<code>+initialize</code>.  If you create an object inside <code>+load</code> the
<code>+initialize</code> method of object's class is invoked even if
<code>+load</code> was not invoked.  Note if you explicitly call <code>+load</code>
on a class, <code>+initialize</code> will be called first.  To avoid possible
problems try to implement only one of these methods.

 <p>The <code>+load</code> method is also invoked when a bundle is dynamically
loaded into your running program.  This happens automatically without any
intervening operation from you.  When you write bundles and you need to
write <code>+load</code> you can safely create and send messages to objects whose
classes already exist in the running program.  The same restrictions as
above apply to classes defined in bundle.

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 13
a13 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d16 1
a16 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d18 4
a21 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d25 1
a25 1
A GNU Manual
d29 1
a29 1
You have freedom to copy and modify this GNU Manual, like GNU
d31 13
a43 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): What you can and what you cannot do in +load</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): What you can and what you cannot do in +load">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): What you can and what you cannot do in +load">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Executing-code-before-main.html#Executing-code-before-main" rel="up" title="Executing code before main">
<link href="Type-encoding.html#Type-encoding" rel="next" title="Type encoding">
<link href="Executing-code-before-main.html#Executing-code-before-main" rel="prev" title="Executing code before main">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d45 3
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 3
a52 1
Up: <a href="Executing-code-before-main.html#Executing-code-before-main" accesskey="u" rel="up">Executing code before main</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
a53 3
<hr>
<a name="What-you-can-and-what-you-cannot-do-in-_002bload-1"></a>
<h4 class="subsection">8.2.1 What you can and what you cannot do in <code>+load</code></h4>
d55 10
a64 11
<p><code>+load</code> is to be used only as a last resort.  Because it is
executed very early, most of the Objective-C runtime machinery will
not be ready when <code>+load</code> is executed; hence <code>+load</code> works
best for executing C code that is independent on the Objective-C
runtime.
</p>
<p>The <code>+load</code> implementation in the GNU runtime guarantees you the
following things:
</p>
<ul>
<li> you can write whatever C code you like;
d66 1
a66 1
</li><li> you can allocate and send messages to objects whose class is implemented
d69 1
a69 2
</li><li> the <code>+load</code> implementation of all super classes of a class are
executed before the <code>+load</code> of that class is executed;
d71 1
a71 1
</li><li> the <code>+load</code> implementation of a class is executed before the
d74 1
a74 1
</li></ul>
d76 1
a76 1
<p>In particular, the following things, even if they can work in a
a77 3
</p>
<ul>
<li> allocation of or sending messages to arbitrary objects;
d79 4
a82 1
</li><li> allocation of or sending messages to objects whose classes have a
d85 1
a85 4
</li><li> sending messages to Objective-C constant strings (<code>@@&quot;this is a
constant string&quot;</code>);

</li></ul>
d87 1
a87 1
<p>You should make no assumptions about receiving <code>+load</code> in sibling
d90 3
a92 3
</p>
<p>The order in which <code>+load</code> and <code>+initialize</code> are called could
be problematic if this matters.  If you don&rsquo;t allocate objects inside
d95 1
a95 1
<code>+initialize</code> method of object&rsquo;s class is invoked even if
d99 2
a100 2
</p>
<p>The <code>+load</code> method is also invoked when a bundle is dynamically
a105 9
</p>


<hr>
<div class="header">
<p>
Up: <a href="Executing-code-before-main.html#Executing-code-before-main" accesskey="u" rel="up">Executing code before main</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>

d107 1
a108 2
</body>
</html>
@

