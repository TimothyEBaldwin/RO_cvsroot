head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.18;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.18;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.25;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Function Prototypes - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="C-Extensions.html#C-Extensions" title="C Extensions">
<link rel="prev" href="Attribute-Syntax.html#Attribute-Syntax" title="Attribute Syntax">
<link rel="next" href="C_002b_002b-Comments.html#C_002b_002b-Comments" title="C++ Comments">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Function-Prototypes"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="C_002b_002b-Comments.html#C_002b_002b-Comments">C++ Comments</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Attribute-Syntax.html#Attribute-Syntax">Attribute Syntax</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="C-Extensions.html#C-Extensions">C Extensions</a>
<hr>
</div>

<h3 class="section">5.26 Prototypes and Old-Style Function Definitions</h3>

<p><a name="index-function-prototype-declarations-1841"></a><a name="index-old_002dstyle-function-definitions-1842"></a><a name="index-promotion-of-formal-parameters-1843"></a>
GNU C extends ISO C to allow a function prototype to override a later
old-style non-prototype definition.  Consider the following example:

<pre class="smallexample">     /* <span class="roman">Use prototypes unless the compiler is old-fashioned.</span>  */
     #ifdef __STDC__
     #define P(x) x
     #else
     #define P(x) ()
     #endif
     
     /* <span class="roman">Prototype function declaration.</span>  */
     int isroot P((uid_t));
     
     /* <span class="roman">Old-style function definition.</span>  */
     int
     isroot (x)   /* <span class="roman">??? lossage here ???</span> */
          uid_t x;
     {
       return x == 0;
     }
</pre>
 <p>Suppose the type <code>uid_t</code> happens to be <code>short</code>.  ISO C does
not allow this example, because subword arguments in old-style
non-prototype definitions are promoted.  Therefore in this example the
function definition's argument is really an <code>int</code>, which does not
match the prototype argument type of <code>short</code>.

 <p>This restriction of ISO C makes it hard to write code that is portable
to traditional C compilers, because the programmer does not know
whether the <code>uid_t</code> type is <code>short</code>, <code>int</code>, or
<code>long</code>.  Therefore, in cases like these GNU C allows a prototype
to override a later old-style definition.  More precisely, in GNU C, a
function prototype argument type overrides the argument type specified
by a later old-style definition if the former type is the same as the
latter type before promotion.  Thus in GNU C the above example is
equivalent to the following:

<pre class="smallexample">     int isroot (uid_t);
     
     int
     isroot (uid_t x)
     {
       return x == 0;
     }
</pre>
 <p class="noindent">GNU C++ does not support old-style function definitions, so this
extension is irrelevant.

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Function Prototypes</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Function Prototypes">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Function Prototypes">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="C-Extensions.html#C-Extensions" rel="up" title="C Extensions">
<link href="C_002b_002b-Comments.html#C_002b_002b-Comments" rel="next" title="C++ Comments">
<link href="Attribute-Syntax.html#Attribute-Syntax" rel="prev" title="Attribute Syntax">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="C_002b_002b-Comments.html#C_002b_002b-Comments" accesskey="n" rel="next">C++ Comments</a>, Previous: <a href="Attribute-Syntax.html#Attribute-Syntax" accesskey="p" rel="prev">Attribute Syntax</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
a54 6
<hr>
<a name="Prototypes-and-Old_002dStyle-Function-Definitions"></a>
<h3 class="section">6.32 Prototypes and Old-Style Function Definitions</h3>
<a name="index-function-prototype-declarations"></a>
<a name="index-old_002dstyle-function-definitions"></a>
<a name="index-promotion-of-formal-parameters"></a>
d56 4
a59 1
<p>GNU C extends ISO C to allow a function prototype to override a later
a60 20
</p>
<div class="smallexample">
<pre class="smallexample">/* <span class="roman">Use prototypes unless the compiler is old-fashioned.</span>  */
#ifdef __STDC__
#define P(x) x
#else
#define P(x) ()
#endif

/* <span class="roman">Prototype function declaration.</span>  */
int isroot P((uid_t));

/* <span class="roman">Old-style function definition.</span>  */
int
isroot (x)   /* <span class="roman">??? lossage here ???</span> */
     uid_t x;
{
  return x == 0;
}
</pre></div>
d62 19
a80 1
<p>Suppose the type <code>uid_t</code> happens to be <code>short</code>.  ISO C does
d83 1
a83 1
function definition&rsquo;s argument is really an <code>int</code>, which does not
d85 2
a86 2
</p>
<p>This restriction of ISO C makes it hard to write code that is portable
a94 10
</p>
<div class="smallexample">
<pre class="smallexample">int isroot (uid_t);

int
isroot (uid_t x)
{
  return x == 0;
}
</pre></div>
d96 9
a104 1
<p>GNU C++ does not support old-style function definitions, so this
a105 2
</p>

d107 1
a108 2
</body>
</html>
@

