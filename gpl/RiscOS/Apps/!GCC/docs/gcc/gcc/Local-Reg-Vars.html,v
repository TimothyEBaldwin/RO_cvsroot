head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.15;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.15;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.19;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Local Reg Vars - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Explicit-Reg-Vars.html#Explicit-Reg-Vars" title="Explicit Reg Vars">
<link rel="prev" href="Global-Reg-Vars.html#Global-Reg-Vars" title="Global Reg Vars">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Local-Reg-Vars"></a>
<p>
Previous:&nbsp;<a rel="previous" accesskey="p" href="Global-Reg-Vars.html#Global-Reg-Vars">Global Reg Vars</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Explicit-Reg-Vars.html#Explicit-Reg-Vars">Explicit Reg Vars</a>
<hr>
</div>

<h4 class="subsection">5.37.2 Specifying Registers for Local Variables</h4>

<p><a name="index-local-variables_002c-specifying-registers-1962"></a><a name="index-specifying-registers-for-local-variables-1963"></a><a name="index-registers-for-local-variables-1964"></a>
You can define a local register variable with a specified register
like this:

<pre class="smallexample">     register int *foo asm ("a5");
</pre>
 <p class="noindent">Here <code>a5</code> is the name of the register which should be used.  Note
that this is the same syntax used for defining global register
variables, but for a local variable it would appear within a function.

 <p>Naturally the register name is cpu-dependent, but this is not a
problem, since specific registers are most often useful with explicit
assembler instructions (see <a href="Extended-Asm.html#Extended-Asm">Extended Asm</a>).  Both of these things
generally require that you conditionalize your program according to
cpu type.

 <p>In addition, operating systems on one type of cpu may differ in how they
name the registers; then you would need additional conditionals.  For
example, some 68000 operating systems call this register <code>%a5</code>.

 <p>Defining such a register variable does not reserve the register; it
remains available for other uses in places where flow control determines
the variable's value is not live.

 <p>This option does not guarantee that GCC will generate code that has
this variable in the register you specify at all times.  You may not
code an explicit reference to this register in the <em>assembler
instruction template</em> part of an <code>asm</code> statement and assume it will
always refer to this variable.  However, using the variable as an
<code>asm</code> <em>operand</em> guarantees that the specified register is used
for the operand.

 <p>Stores into local register variables may be deleted when they appear to be dead
according to dataflow analysis.  References to local register variables may
be deleted or moved or simplified.

 <p>As for global register variables, it's recommended that you choose a
register which is normally saved and restored by function calls on
your machine, so that library routines will not clobber it.  A common
pitfall is to initialize multiple call-clobbered registers with
arbitrary expressions, where a function call or library call for an
arithmetic operator will overwrite a register value from a previous
assignment, for example <code>r0</code> below:
<pre class="smallexample">     register int *p1 asm ("r0") = ...;
     register int *p2 asm ("r1") = ...;
</pre>
 <p>In those cases, a solution is to use a temporary variable for
each arbitrary expression.   See <a href="Example-of-asm-with-clobbered-asm-reg.html#Example-of-asm-with-clobbered-asm-reg">Example of asm with clobbered asm reg</a>.

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 13
a13 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d16 1
a16 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d18 4
a21 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d25 1
a25 1
A GNU Manual
d29 1
a29 1
You have freedom to copy and modify this GNU Manual, like GNU
d31 13
a43 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Local Reg Vars</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Local Reg Vars">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Local Reg Vars">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Explicit-Reg-Vars.html#Explicit-Reg-Vars" rel="up" title="Explicit Reg Vars">
<link href="Alternate-Keywords.html#Alternate-Keywords" rel="next" title="Alternate Keywords">
<link href="Global-Reg-Vars.html#Global-Reg-Vars" rel="prev" title="Global Reg Vars">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d45 2
a46 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a47 1
<div class="header">
d49 3
a51 1
Previous: <a href="Global-Reg-Vars.html#Global-Reg-Vars" accesskey="p" rel="prev">Global Reg Vars</a>, Up: <a href="Explicit-Reg-Vars.html#Explicit-Reg-Vars" accesskey="u" rel="up">Explicit Reg Vars</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
a52 6
<hr>
<a name="Specifying-Registers-for-Local-Variables"></a>
<h4 class="subsection">6.44.2 Specifying Registers for Local Variables</h4>
<a name="index-local-variables_002c-specifying-registers"></a>
<a name="index-specifying-registers-for-local-variables"></a>
<a name="index-registers-for-local-variables"></a>
d54 4
a57 1
<p>You can define a local register variable with a specified register
a58 4
</p>
<div class="smallexample">
<pre class="smallexample">register int *foo asm (&quot;a5&quot;);
</pre></div>
d60 3
a62 1
<p>Here <code>a5</code> is the name of the register which should be used.  Note
d65 2
a66 2
</p>
<p>Naturally the register name is cpu-dependent, but this is not a
d71 2
a72 2
</p>
<p>In addition, operating systems on one type of cpu may differ in how they
d75 2
a76 2
</p>
<p>Defining such a register variable does not reserve the register; it
d78 3
a80 3
the variable&rsquo;s value is not live.
</p>
<p>This option does not guarantee that GCC will generate code that has
d87 2
a88 2
</p>
<p>Stores into local register variables may be deleted when they appear to be dead
d91 2
a92 2
</p>
<p>As for global register variables, it&rsquo;s recommended that you choose a
d99 5
a103 13
</p><div class="smallexample">
<pre class="smallexample">register int *p1 asm (&quot;r0&quot;) = &hellip;;
register int *p2 asm (&quot;r1&quot;) = &hellip;;
</pre></div>
<p>In those cases, a solution is to use a temporary variable for
each arbitrary expression.   See <a href="Extended-Asm.html#Example-of-asm-with-clobbered-asm-reg">Example of asm with clobbered asm reg</a>.
</p>
<hr>
<div class="header">
<p>
Previous: <a href="Global-Reg-Vars.html#Global-Reg-Vars" accesskey="p" rel="prev">Global Reg Vars</a>, Up: <a href="Explicit-Reg-Vars.html#Explicit-Reg-Vars" accesskey="u" rel="up">Explicit Reg Vars</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>

d105 1
a106 2
</body>
</html>
@

