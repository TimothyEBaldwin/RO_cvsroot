head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.15;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.15;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.19;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Extended Asm - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="C-Extensions.html#C-Extensions" title="C Extensions">
<link rel="prev" href="Inline.html#Inline" title="Inline">
<link rel="next" href="Constraints.html#Constraints" title="Constraints">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Extended-Asm"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Constraints.html#Constraints">Constraints</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Inline.html#Inline">Inline</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="C-Extensions.html#C-Extensions">C Extensions</a>
<hr>
</div>

<h3 class="section">5.34 Assembler Instructions with C Expression Operands</h3>

<p><a name="index-extended-_0040code_007basm_007d-1890"></a><a name="index-g_t_0040code_007basm_007d-expressions-1891"></a><a name="index-assembler-instructions-1892"></a><a name="index-registers-1893"></a>
In an assembler instruction using <code>asm</code>, you can specify the
operands of the instruction using C expressions.  This means you need not
guess which registers or memory locations will contain the data you want
to use.

 <p>You must specify an assembler instruction template much like what
appears in a machine description, plus an operand constraint string for
each operand.

 <p>For example, here is how to use the 68881's <code>fsinx</code> instruction:

<pre class="smallexample">     asm ("fsinx %1,%0" : "=f" (result) : "f" (angle));
</pre>
 <p class="noindent">Here <code>angle</code> is the C expression for the input operand while
<code>result</code> is that of the output operand.  Each has &lsquo;<samp><span class="samp">"f"</span></samp>&rsquo; as its
operand constraint, saying that a floating point register is required. 
The &lsquo;<samp><span class="samp">=</span></samp>&rsquo; in &lsquo;<samp><span class="samp">=f</span></samp>&rsquo; indicates that the operand is an output; all
output operands' constraints must use &lsquo;<samp><span class="samp">=</span></samp>&rsquo;.  The constraints use the
same language used in the machine description (see <a href="Constraints.html#Constraints">Constraints</a>).

 <p>Each operand is described by an operand-constraint string followed by
the C expression in parentheses.  A colon separates the assembler
template from the first output operand and another separates the last
output operand from the first input, if any.  Commas separate the
operands within each group.  The total number of operands is currently
limited to 30; this limitation may be lifted in some future version of
GCC.

 <p>If there are no output operands but there are input operands, you must
place two consecutive colons surrounding the place where the output
operands would go.

 <p>As of GCC version 3.1, it is also possible to specify input and output
operands using symbolic names which can be referenced within the
assembler code.  These names are specified inside square brackets
preceding the constraint string, and can be referenced inside the
assembler code using <code>%[</code><var>name</var><code>]</code> instead of a percentage sign
followed by the operand number.  Using named operands the above example
could look like:

<pre class="smallexample">     asm ("fsinx %[angle],%[output]"
          : [output] "=f" (result)
          : [angle] "f" (angle));
</pre>
 <p class="noindent">Note that the symbolic operand names have no relation whatsoever to
other C identifiers.  You may use any name you like, even those of
existing C symbols, but you must ensure that no two operands within the same
assembler construct use the same symbolic name.

 <p>Output operand expressions must be lvalues; the compiler can check this. 
The input operands need not be lvalues.  The compiler cannot check
whether the operands have data types that are reasonable for the
instruction being executed.  It does not parse the assembler instruction
template and does not know what it means or even whether it is valid
assembler input.  The extended <code>asm</code> feature is most often used for
machine instructions the compiler itself does not know exist.  If
the output expression cannot be directly addressed (for example, it is a
bit-field), your constraint must allow a register.  In that case, GCC
will use the register as the output of the <code>asm</code>, and then store
that register into the output.

 <p>The ordinary output operands must be write-only; GCC will assume that
the values in these operands before the instruction are dead and need
not be generated.  Extended asm supports input-output or read-write
operands.  Use the constraint character &lsquo;<samp><span class="samp">+</span></samp>&rsquo; to indicate such an
operand and list it with the output operands.  You should only use
read-write operands when the constraints for the operand (or the
operand in which only some of the bits are to be changed) allow a
register.

 <p>You may, as an alternative, logically split its function into two
separate operands, one input operand and one write-only output
operand.  The connection between them is expressed by constraints
which say they need to be in the same location when the instruction
executes.  You can use the same C expression for both operands, or
different expressions.  For example, here we write the (fictitious)
&lsquo;<samp><span class="samp">combine</span></samp>&rsquo; instruction with <code>bar</code> as its read-only source
operand and <code>foo</code> as its read-write destination:

<pre class="smallexample">     asm ("combine %2,%0" : "=r" (foo) : "0" (foo), "g" (bar));
</pre>
 <p class="noindent">The constraint &lsquo;<samp><span class="samp">"0"</span></samp>&rsquo; for operand 1 says that it must occupy the
same location as operand 0.  A number in constraint is allowed only in
an input operand and it must refer to an output operand.

 <p>Only a number in the constraint can guarantee that one operand will be in
the same place as another.  The mere fact that <code>foo</code> is the value
of both operands is not enough to guarantee that they will be in the
same place in the generated assembler code.  The following would not
work reliably:

<pre class="smallexample">     asm ("combine %2,%0" : "=r" (foo) : "r" (foo), "g" (bar));
</pre>
 <p>Various optimizations or reloading could cause operands 0 and 1 to be in
different registers; GCC knows no reason not to do so.  For example, the
compiler might find a copy of the value of <code>foo</code> in one register and
use it for operand 1, but generate the output operand 0 in a different
register (copying it afterward to <code>foo</code>'s own address).  Of course,
since the register for operand 1 is not even mentioned in the assembler
code, the result will not work, but GCC can't tell that.

 <p>As of GCC version 3.1, one may write <code>[</code><var>name</var><code>]</code> instead of
the operand number for a matching constraint.  For example:

<pre class="smallexample">     asm ("cmoveq %1,%2,%[result]"
          : [result] "=r"(result)
          : "r" (test), "r"(new), "[result]"(old));
</pre>
 <p>Sometimes you need to make an <code>asm</code> operand be a specific register,
but there's no matching constraint letter for that register <em>by
itself</em>.  To force the operand into that register, use a local variable
for the operand and specify the register in the variable declaration. 
See <a href="Explicit-Reg-Vars.html#Explicit-Reg-Vars">Explicit Reg Vars</a>.  Then for the <code>asm</code> operand, use any
register constraint letter that matches the register:

<pre class="smallexample">     register int *p1 asm ("r0") = ...;
     register int *p2 asm ("r1") = ...;
     register int *result asm ("r0");
     asm ("sysint" : "=r" (result) : "0" (p1), "r" (p2));
</pre>
 <p><a name="Example-of-asm-with-clobbered-asm-reg"></a>In the above example, beware that a register that is call-clobbered by
the target ABI will be overwritten by any function call in the
assignment, including library calls for arithmetic operators. 
Assuming it is a call-clobbered register, this may happen to <code>r0</code>
above by the assignment to <code>p2</code>.  If you have to use such a
register, use temporary variables for expressions between the register
assignment and use:

<pre class="smallexample">     int t1 = ...;
     register int *p1 asm ("r0") = ...;
     register int *p2 asm ("r1") = t1;
     register int *result asm ("r0");
     asm ("sysint" : "=r" (result) : "0" (p1), "r" (p2));
</pre>
 <p>Some instructions clobber specific hard registers.  To describe this,
write a third colon after the input operands, followed by the names of
the clobbered hard registers (given as strings).  Here is a realistic
example for the VAX:

<pre class="smallexample">     asm volatile ("movc3 %0,%1,%2"
                   : /* <span class="roman">no outputs</span> */
                   : "g" (from), "g" (to), "g" (count)
                   : "r0", "r1", "r2", "r3", "r4", "r5");
</pre>
 <p>You may not write a clobber description in a way that overlaps with an
input or output operand.  For example, you may not have an operand
describing a register class with one member if you mention that register
in the clobber list.  Variables declared to live in specific registers
(see <a href="Explicit-Reg-Vars.html#Explicit-Reg-Vars">Explicit Reg Vars</a>), and used as asm input or output operands must
have no part mentioned in the clobber description. 
There is no way for you to specify that an input
operand is modified without also specifying it as an output
operand.  Note that if all the output operands you specify are for this
purpose (and hence unused), you will then also need to specify
<code>volatile</code> for the <code>asm</code> construct, as described below, to
prevent GCC from deleting the <code>asm</code> statement as unused.

 <p>If you refer to a particular hardware register from the assembler code,
you will probably have to list the register after the third colon to
tell the compiler the register's value is modified.  In some assemblers,
the register names begin with &lsquo;<samp><span class="samp">%</span></samp>&rsquo;; to produce one &lsquo;<samp><span class="samp">%</span></samp>&rsquo; in the
assembler code, you must write &lsquo;<samp><span class="samp">%%</span></samp>&rsquo; in the input.

 <p>If your assembler instruction can alter the condition code register, add
&lsquo;<samp><span class="samp">cc</span></samp>&rsquo; to the list of clobbered registers.  GCC on some machines
represents the condition codes as a specific hardware register;
&lsquo;<samp><span class="samp">cc</span></samp>&rsquo; serves to name this register.  On other machines, the
condition code is handled differently, and specifying &lsquo;<samp><span class="samp">cc</span></samp>&rsquo; has no
effect.  But it is valid no matter what the machine.

 <p>If your assembler instructions access memory in an unpredictable
fashion, add &lsquo;<samp><span class="samp">memory</span></samp>&rsquo; to the list of clobbered registers.  This
will cause GCC to not keep memory values cached in registers across the
assembler instruction and not optimize stores or loads to that memory. 
You will also want to add the <code>volatile</code> keyword if the memory
affected is not listed in the inputs or outputs of the <code>asm</code>, as
the &lsquo;<samp><span class="samp">memory</span></samp>&rsquo; clobber does not count as a side-effect of the
<code>asm</code>.  If you know how large the accessed memory is, you can add
it as input or output but if this is not known, you should add
&lsquo;<samp><span class="samp">memory</span></samp>&rsquo;.  As an example, if you access ten bytes of a string, you
can use a memory input like:

<pre class="smallexample">     {"m"( ({ struct { char x[10]; } *p = (void *)ptr ; *p; }) )}.
</pre>
 <p>Note that in the following example the memory input is necessary,
otherwise GCC might optimize the store to <code>x</code> away:
<pre class="smallexample">     int foo ()
     {
       int x = 42;
       int *y = &amp;x;
       int result;
       asm ("magic stuff accessing an 'int' pointed to by '%1'"
             "=&amp;d" (r) : "a" (y), "m" (*y));
       return result;
     }
</pre>
 <p>You can put multiple assembler instructions together in a single
<code>asm</code> template, separated by the characters normally used in assembly
code for the system.  A combination that works in most places is a newline
to break the line, plus a tab character to move to the instruction field
(written as &lsquo;<samp><span class="samp">\n\t</span></samp>&rsquo;).  Sometimes semicolons can be used, if the
assembler allows semicolons as a line-breaking character.  Note that some
assembler dialects use semicolons to start a comment. 
The input operands are guaranteed not to use any of the clobbered
registers, and neither will the output operands' addresses, so you can
read and write the clobbered registers as many times as you like.  Here
is an example of multiple instructions in a template; it assumes the
subroutine <code>_foo</code> accepts arguments in registers 9 and 10:

<pre class="smallexample">     asm ("movl %0,r9\n\tmovl %1,r10\n\tcall _foo"
          : /* no outputs */
          : "g" (from), "g" (to)
          : "r9", "r10");
</pre>
 <p>Unless an output operand has the &lsquo;<samp><span class="samp">&amp;</span></samp>&rsquo; constraint modifier, GCC
may allocate it in the same register as an unrelated input operand, on
the assumption the inputs are consumed before the outputs are produced. 
This assumption may be false if the assembler code actually consists of
more than one instruction.  In such a case, use &lsquo;<samp><span class="samp">&amp;</span></samp>&rsquo; for each output
operand that may not overlap an input.  See <a href="Modifiers.html#Modifiers">Modifiers</a>.

 <p>If you want to test the condition code produced by an assembler
instruction, you must include a branch and a label in the <code>asm</code>
construct, as follows:

<pre class="smallexample">     asm ("clr %0\n\tfrob %1\n\tbeq 0f\n\tmov #1,%0\n0:"
          : "g" (result)
          : "g" (input));
</pre>
 <p class="noindent">This assumes your assembler supports local labels, as the GNU assembler
and most Unix assemblers do.

 <p>Speaking of labels, jumps from one <code>asm</code> to another are not
supported.  The compiler's optimizers do not know about these jumps, and
therefore they cannot take account of them when deciding how to
optimize.

 <p><a name="index-macros-containing-_0040code_007basm_007d-1894"></a>Usually the most convenient way to use these <code>asm</code> instructions is to
encapsulate them in macros that look like functions.  For example,

<pre class="smallexample">     #define sin(x)       \
     ({ double __value, __arg = (x);   \
        asm ("fsinx %1,%0": "=f" (__value): "f" (__arg));  \
        __value; })
</pre>
 <p class="noindent">Here the variable <code>__arg</code> is used to make sure that the instruction
operates on a proper <code>double</code> value, and to accept only those
arguments <code>x</code> which can convert automatically to a <code>double</code>.

 <p>Another way to make sure the instruction operates on the correct data
type is to use a cast in the <code>asm</code>.  This is different from using a
variable <code>__arg</code> in that it converts more different types.  For
example, if the desired type were <code>int</code>, casting the argument to
<code>int</code> would accept a pointer with no complaint, while assigning the
argument to an <code>int</code> variable named <code>__arg</code> would warn about
using a pointer unless the caller explicitly casts it.

 <p>If an <code>asm</code> has output operands, GCC assumes for optimization
purposes the instruction has no side effects except to change the output
operands.  This does not mean instructions with a side effect cannot be
used, but you must be careful, because the compiler may eliminate them
if the output operands aren't used, or move them out of loops, or
replace two with one if they constitute a common subexpression.  Also,
if your instruction does have a side effect on a variable that otherwise
appears not to change, the old value of the variable may be reused later
if it happens to be found in a register.

 <p>You can prevent an <code>asm</code> instruction from being deleted
by writing the keyword <code>volatile</code> after
the <code>asm</code>.  For example:

<pre class="smallexample">     #define get_and_set_priority(new)              \
     ({ int __old;                                  \
        asm volatile ("get_and_set_priority %0, %1" \
                      : "=g" (__old) : "g" (new));  \
        __old; })
</pre>
 <p class="noindent">The <code>volatile</code> keyword indicates that the instruction has
important side-effects.  GCC will not delete a volatile <code>asm</code> if
it is reachable.  (The instruction can still be deleted if GCC can
prove that control-flow will never reach the location of the
instruction.)  Note that even a volatile <code>asm</code> instruction
can be moved relative to other code, including across jump
instructions.  For example, on many targets there is a system
register which can be set to control the rounding mode of
floating point operations.  You might try
setting it with a volatile <code>asm</code>, like this PowerPC example:

<pre class="smallexample">            asm volatile("mtfsf 255,%0" : : "f" (fpenv));
            sum = x + y;
</pre>
 <p class="noindent">This will not work reliably, as the compiler may move the addition back
before the volatile <code>asm</code>.  To make it work you need to add an
artificial dependency to the <code>asm</code> referencing a variable in the code
you don't want moved, for example:

<pre class="smallexample">         asm volatile ("mtfsf 255,%1" : "=X"(sum): "f"(fpenv));
         sum = x + y;
</pre>
 <p>Similarly, you can't expect a
sequence of volatile <code>asm</code> instructions to remain perfectly
consecutive.  If you want consecutive output, use a single <code>asm</code>. 
Also, GCC will perform some optimizations across a volatile <code>asm</code>
instruction; GCC does not &ldquo;forget everything&rdquo; when it encounters
a volatile <code>asm</code> instruction the way some other compilers do.

 <p>An <code>asm</code> instruction without any output operands will be treated
identically to a volatile <code>asm</code> instruction.

 <p>It is a natural idea to look for a way to give access to the condition
code left by the assembler instruction.  However, when we attempted to
implement this, we found no way to make it work reliably.  The problem
is that output operands might need reloading, which would result in
additional following &ldquo;store&rdquo; instructions.  On most machines, these
instructions would alter the condition code before there was time to
test it.  This problem doesn't arise for ordinary &ldquo;test&rdquo; and
&ldquo;compare&rdquo; instructions because they don't have any output operands.

 <p>For reasons similar to those described above, it is not possible to give
an assembler instruction access to the condition code left by previous
instructions.

 <p>If you are writing a header file that should be includable in ISO C
programs, write <code>__asm__</code> instead of <code>asm</code>.  See <a href="Alternate-Keywords.html#Alternate-Keywords">Alternate Keywords</a>.

<h4 class="subsection">5.34.1 Size of an <code>asm</code></h4>

<p>Some targets require that GCC track the size of each instruction used in
order to generate correct code.  Because the final length of an
<code>asm</code> is only known by the assembler, GCC must make an estimate as
to how big it will be.  The estimate is formed by counting the number of
statements in the pattern of the <code>asm</code> and multiplying that by the
length of the longest instruction on that processor.  Statements in the
<code>asm</code> are identified by newline characters and whatever statement
separator characters are supported by the assembler; on most processors
this is the `<code>;</code>' character.

 <p>Normally, GCC's estimate is perfectly adequate to ensure that correct
code is generated, but it is possible to confuse the compiler if you use
pseudo instructions or assembler macros that expand into multiple real
instructions or if you use assembler directives that expand to more
space in the object file than would be needed for a single instruction. 
If this happens then the assembler will produce a diagnostic saying that
a label is unreachable.

<h4 class="subsection">5.34.2 i386 floating point asm operands</h4>

<p>There are several rules on the usage of stack-like regs in
asm_operands insns.  These rules apply only to the operands that are
stack-like regs:

     <ol type=1 start=1>
<li>Given a set of input regs that die in an asm_operands, it is
necessary to know which are implicitly popped by the asm, and
which must be explicitly popped by gcc.

     <p>An input reg that is implicitly popped by the asm must be
explicitly clobbered, unless it is constrained to match an
output operand.

     <li>For any input reg that is implicitly popped by an asm, it is
necessary to know how to adjust the stack to compensate for the pop. 
If any non-popped input is closer to the top of the reg-stack than
the implicitly popped reg, it would not be possible to know what the
stack looked like&mdash;it's not clear how the rest of the stack &ldquo;slides
up&rdquo;.

     <p>All implicitly popped input regs must be closer to the top of
the reg-stack than any input that is not implicitly popped.

     <p>It is possible that if an input dies in an insn, reload might
use the input reg for an output reload.  Consider this example:

     <pre class="smallexample">          asm ("foo" : "=t" (a) : "f" (b));
</pre>
     <p>This asm says that input B is not popped by the asm, and that
the asm pushes a result onto the reg-stack, i.e., the stack is one
deeper after the asm than it was before.  But, it is possible that
reload will think that it can use the same reg for both the input and
the output, if input B dies in this insn.

     <p>If any input operand uses the <code>f</code> constraint, all output reg
constraints must use the <code>&amp;</code> earlyclobber.

     <p>The asm above would be written as

     <pre class="smallexample">          asm ("foo" : "=&amp;t" (a) : "f" (b));
</pre>
     <li>Some operands need to be in particular places on the stack.  All
output operands fall in this category&mdash;there is no other way to
know which regs the outputs appear in unless the user indicates
this in the constraints.

     <p>Output operands must specifically indicate which reg an output
appears in after an asm.  <code>=f</code> is not allowed: the operand
constraints must select a class with a single reg.

     <li>Output operands may not be &ldquo;inserted&rdquo; between existing stack regs. 
Since no 387 opcode uses a read/write operand, all output operands
are dead before the asm_operands, and are pushed by the asm_operands. 
It makes no sense to push anywhere but the top of the reg-stack.

     <p>Output operands must start at the top of the reg-stack: output
operands may not &ldquo;skip&rdquo; a reg.

     <li>Some asm statements may need extra stack space for internal
calculations.  This can be guaranteed by clobbering stack registers
unrelated to the inputs and outputs.

      </ol>

 <p>Here are a couple of reasonable asms to want to write.  This asm
takes one input, which is internally popped, and produces two outputs.

<pre class="smallexample">     asm ("fsincos" : "=t" (cos), "=u" (sin) : "0" (inp));
</pre>
 <p>This asm takes two inputs, which are popped by the <code>fyl2xp1</code> opcode,
and replaces them with one output.  The user must code the <code>st(1)</code>
clobber for reg-stack.c to know that <code>fyl2xp1</code> pops both inputs.

<pre class="smallexample">     asm ("fyl2xp1" : "=t" (result) : "0" (x), "u" (y) : "st(1)");
</pre>
 <!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1996, 1998, 1999, 2000, 2001, -->
<!-- 2002, 2003, 2004, 2005 Free Software Foundation, Inc. -->
<!-- This is part of the GCC manual. -->
<!-- For copying conditions, see the file gcc.texi. -->
<!-- Most of this node appears by itself (in a different place) even -->
<!-- when the INTERNALS flag is clear.  Passages that require the internals -->
<!-- manual's context are conditionalized to appear only in the internals manual. -->
 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): Extended Asm</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): Extended Asm">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): Extended Asm">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="C-Extensions.html#C-Extensions" rel="up" title="C Extensions">
<link href="Constraints.html#Constraints" rel="next" title="Constraints">
<link href="Volatiles.html#Volatiles" rel="prev" title="Volatiles">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="Constraints.html#Constraints" accesskey="n" rel="next">Constraints</a>, Previous: <a href="Volatiles.html#Volatiles" accesskey="p" rel="prev">Volatiles</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
a54 7
<hr>
<a name="Assembler-Instructions-with-C-Expression-Operands"></a>
<h3 class="section">6.41 Assembler Instructions with C Expression Operands</h3>
<a name="index-extended-asm"></a>
<a name="index-asm-expressions"></a>
<a name="index-assembler-instructions"></a>
<a name="index-registers"></a>
d56 4
a59 1
<p>In an assembler instruction using <code>asm</code>, you can specify the
d63 2
a64 2
</p>
<p>You must specify an assembler instruction template much like what
d67 10
a76 12
</p>
<p>For example, here is how to use the 68881&rsquo;s <code>fsinx</code> instruction:
</p>
<div class="smallexample">
<pre class="smallexample">asm (&quot;fsinx %1,%0&quot; : &quot;=f&quot; (result) : &quot;f&quot; (angle));
</pre></div>

<p>Here <code>angle</code> is the C expression for the input operand while
<code>result</code> is that of the output operand.  Each has &lsquo;<samp>&quot;f&quot;</samp>&rsquo; as its
operand constraint, saying that a floating point register is required.
The &lsquo;<samp>=</samp>&rsquo; in &lsquo;<samp>=f</samp>&rsquo; indicates that the operand is an output; all
output operands&rsquo; constraints must use &lsquo;<samp>=</samp>&rsquo;.  The constraints use the
d78 2
a79 2
</p>
<p>Each operand is described by an operand-constraint string followed by
d86 2
a87 2
</p>
<p>If there are no output operands but there are input operands, you must
d90 2
a91 2
</p>
<p>As of GCC version 3.1, it is also possible to specify input and output
d95 1
a95 1
assembler code using <code>%[<var>name</var>]</code> instead of a percentage sign
a97 6
</p>
<div class="smallexample">
<pre class="smallexample">asm (&quot;fsinx %[angle],%[output]&quot;
     : [output] &quot;=f&quot; (result)
     : [angle] &quot;f&quot; (angle));
</pre></div>
d99 5
a103 1
<p>Note that the symbolic operand names have no relation whatsoever to
d107 2
a108 2
</p>
<p>Output operand expressions must be lvalues; the compiler can check this.
d119 2
a120 2
</p>
<p>The ordinary output operands must be write-only; GCC will assume that
d123 1
a123 1
operands.  Use the constraint character &lsquo;<samp>+</samp>&rsquo; to indicate such an
d128 2
a129 2
</p>
<p>You may, as an alternative, logically split its function into two
d135 1
a135 1
&lsquo;<samp>combine</samp>&rsquo; instruction with <code>bar</code> as its read-only source
a136 4
</p>
<div class="smallexample">
<pre class="smallexample">asm (&quot;combine %2,%0&quot; : &quot;=r&quot; (foo) : &quot;0&quot; (foo), &quot;g&quot; (bar));
</pre></div>
d138 3
a140 1
<p>The constraint &lsquo;<samp>&quot;0&quot;</samp>&rsquo; for operand 1 says that it must occupy the
d143 2
a144 2
</p>
<p>Only a number in the constraint can guarantee that one operand will be in
a148 4
</p>
<div class="smallexample">
<pre class="smallexample">asm (&quot;combine %2,%0&quot; : &quot;=r&quot; (foo) : &quot;r&quot; (foo), &quot;g&quot; (bar));
</pre></div>
d150 3
a152 1
<p>Various optimizations or reloading could cause operands 0 and 1 to be in
d156 1
a156 1
register (copying it afterward to <code>foo</code>&rsquo;s own address).  Of course,
d158 3
a160 3
code, the result will not work, but GCC can&rsquo;t tell that.
</p>
<p>As of GCC version 3.1, one may write <code>[<var>name</var>]</code> instead of
a161 6
</p>
<div class="smallexample">
<pre class="smallexample">asm (&quot;cmoveq %1,%2,%[result]&quot;
     : [result] &quot;=r&quot;(result)
     : &quot;r&quot; (test), &quot;r&quot;(new), &quot;[result]&quot;(old));
</pre></div>
d163 6
a168 2
<p>Sometimes you need to make an <code>asm</code> operand be a specific register,
but there&rsquo;s no matching constraint letter for that register <em>by
d170 1
a170 1
for the operand and specify the register in the variable declaration.
a172 7
</p>
<div class="smallexample">
<pre class="smallexample">register int *p1 asm (&quot;r0&quot;) = &hellip;;
register int *p2 asm (&quot;r1&quot;) = &hellip;;
register int *result asm (&quot;r0&quot;);
asm (&quot;sysint&quot; : &quot;=r&quot; (result) : &quot;0&quot; (p1), &quot;r&quot; (p2));
</pre></div>
d174 6
a179 1
<a name="Example-of-asm-with-clobbered-asm-reg"></a><p>In the above example, beware that a register that is call-clobbered by
d181 1
a181 3
assignment, including library calls for arithmetic operators.
Also a register may be clobbered when generating some operations,
like variable shift, memory copy or memory move on x86.
a185 8
</p>
<div class="smallexample">
<pre class="smallexample">int t1 = &hellip;;
register int *p1 asm (&quot;r0&quot;) = &hellip;;
register int *p2 asm (&quot;r1&quot;) = t1;
register int *result asm (&quot;r0&quot;);
asm (&quot;sysint&quot; : &quot;=r&quot; (result) : &quot;0&quot; (p1), &quot;r&quot; (p2));
</pre></div>
d187 7
a193 1
<p>Some instructions clobber specific hard registers.  To describe this,
a196 7
</p>
<div class="smallexample">
<pre class="smallexample">asm volatile (&quot;movc3 %0,%1,%2&quot;
              : /* <span class="roman">no outputs</span> */
              : &quot;g&quot; (from), &quot;g&quot; (to), &quot;g&quot; (count)
              : &quot;r0&quot;, &quot;r1&quot;, &quot;r2&quot;, &quot;r3&quot;, &quot;r4&quot;, &quot;r5&quot;);
</pre></div>
d198 6
a203 1
<p>You may not write a clobber description in a way that overlaps with an
d208 1
a208 1
have no part mentioned in the clobber description.
d215 2
a216 2
</p>
<p>If you refer to a particular hardware register from the assembler code,
d218 6
a223 6
tell the compiler the register&rsquo;s value is modified.  In some assemblers,
the register names begin with &lsquo;<samp>%</samp>&rsquo;; to produce one &lsquo;<samp>%</samp>&rsquo; in the
assembler code, you must write &lsquo;<samp>%%</samp>&rsquo; in the input.
</p>
<p>If your assembler instruction can alter the condition code register, add
&lsquo;<samp>cc</samp>&rsquo; to the list of clobbered registers.  GCC on some machines
d225 2
a226 2
&lsquo;<samp>cc</samp>&rsquo; serves to name this register.  On other machines, the
condition code is handled differently, and specifying &lsquo;<samp>cc</samp>&rsquo; has no
d228 3
a230 3
</p>
<p>If your assembler instructions access memory in an unpredictable
fashion, add &lsquo;<samp>memory</samp>&rsquo; to the list of clobbered registers.  This
d232 1
a232 1
assembler instruction and not optimize stores or loads to that memory.
d235 1
a235 1
the &lsquo;<samp>memory</samp>&rsquo; clobber does not count as a side-effect of the
d238 1
a238 1
&lsquo;<samp>memory</samp>&rsquo;.  As an example, if you access ten bytes of a string, you
a239 4
</p>
<div class="smallexample">
<pre class="smallexample">{&quot;m&quot;( ({ struct { char x[10]; } *p = (void *)ptr ; *p; }) )}.
</pre></div>
d241 3
a243 1
<p>Note that in the following example the memory input is necessary,
d245 11
a255 13
</p><div class="smallexample">
<pre class="smallexample">int foo ()
{
  int x = 42;
  int *y = &amp;x;
  int result;
  asm (&quot;magic stuff accessing an 'int' pointed to by '%1'&quot;
        &quot;=&amp;d&quot; (r) : &quot;a&quot; (y), &quot;m&quot; (*y));
  return result;
}
</pre></div>

<p>You can put multiple assembler instructions together in a single
d259 1
a259 1
(written as &lsquo;<samp>\n\t</samp>&rsquo;).  Sometimes semicolons can be used, if the
d261 1
a261 1
assembler dialects use semicolons to start a comment.
d263 1
a263 1
registers, and neither will the output operands&rsquo; addresses, so you can
a266 7
</p>
<div class="smallexample">
<pre class="smallexample">asm (&quot;movl %0,r9\n\tmovl %1,r10\n\tcall _foo&quot;
     : /* no outputs */
     : &quot;g&quot; (from), &quot;g&quot; (to)
     : &quot;r9&quot;, &quot;r10&quot;);
</pre></div>
d268 6
a273 1
<p>Unless an output operand has the &lsquo;<samp>&amp;</samp>&rsquo; constraint modifier, GCC
d275 1
a275 1
the assumption the inputs are consumed before the outputs are produced.
d277 1
a277 1
more than one instruction.  In such a case, use &lsquo;<samp>&amp;</samp>&rsquo; for each output
d279 2
a280 2
</p>
<p>If you want to test the condition code produced by an assembler
a282 6
</p>
<div class="smallexample">
<pre class="smallexample">asm (&quot;clr %0\n\tfrob %1\n\tbeq 0f\n\tmov #1,%0\n0:&quot;
     : &quot;g&quot; (result)
     : &quot;g&quot; (input));
</pre></div>
d284 5
a288 1
<p>This assumes your assembler supports local labels, as the GNU assembler
d290 3
a292 3
</p>
<p>Speaking of labels, jumps from one <code>asm</code> to another are not
supported.  The compiler&rsquo;s optimizers do not know about these jumps, and
d294 3
a296 4
optimize.  See <a href="#Extended-asm-with-goto">Extended asm with goto</a>.
</p>
<a name="index-macros-containing-asm"></a>
<p>Usually the most convenient way to use these <code>asm</code> instructions is to
a297 7
</p>
<div class="smallexample">
<pre class="smallexample">#define sin(x)       \
({ double __value, __arg = (x);   \
   asm (&quot;fsinx %1,%0&quot;: &quot;=f&quot; (__value): &quot;f&quot; (__arg));  \
   __value; })
</pre></div>
d299 6
a304 1
<p>Here the variable <code>__arg</code> is used to make sure that the instruction
d307 2
a308 2
</p>
<p>Another way to make sure the instruction operates on the correct data
d315 2
a316 2
</p>
<p>If an <code>asm</code> has output operands, GCC assumes for optimization
d320 1
a320 1
if the output operands aren&rsquo;t used, or move them out of loops, or
d325 2
a326 2
</p>
<p>You can prevent an <code>asm</code> instruction from being deleted
a328 8
</p>
<div class="smallexample">
<pre class="smallexample">#define get_and_set_priority(new)              \
({ int __old;                                  \
   asm volatile (&quot;get_and_set_priority %0, %1&quot; \
                 : &quot;=g&quot; (__old) : &quot;g&quot; (new));  \
   __old; })
</pre></div>
d330 7
a336 1
<p>The <code>volatile</code> keyword indicates that the instruction has
a345 5
</p>
<div class="smallexample">
<pre class="smallexample">       asm volatile(&quot;mtfsf 255,%0&quot; : : &quot;f&quot; (fpenv));
       sum = x + y;
</pre></div>
d347 4
a350 1
<p>This will not work reliably, as the compiler may move the addition back
d353 1
a353 6
you don&rsquo;t want moved, for example:
</p>
<div class="smallexample">
<pre class="smallexample">    asm volatile (&quot;mtfsf 255,%1&quot; : &quot;=X&quot;(sum): &quot;f&quot;(fpenv));
    sum = x + y;
</pre></div>
d355 4
a358 1
<p>Similarly, you can&rsquo;t expect a
d360 1
a360 1
consecutive.  If you want consecutive output, use a single <code>asm</code>.
d364 2
a365 2
</p>
<p>An <code>asm</code> instruction without any output operands will be treated
d367 2
a368 2
</p>
<p>It is a natural idea to look for a way to give access to the condition
d374 4
a377 4
test it.  This problem doesn&rsquo;t arise for ordinary &ldquo;test&rdquo; and
&ldquo;compare&rdquo; instructions because they don&rsquo;t have any output operands.
</p>
<p>For reasons similar to those described above, it is not possible to give
d380 2
a381 89
</p>
<a name="Extended-asm-with-goto"></a><p>As of GCC version 4.5, <code>asm goto</code> may be used to have the assembly
jump to one or more C labels.  In this form, a fifth section after the
clobber list contains a list of all C labels to which the assembly may jump.
Each label operand is implicitly self-named.  The <code>asm</code> is also assumed
to fall through to the next statement.
</p>
<p>This form of <code>asm</code> is restricted to not have outputs.  This is due
to a internal restriction in the compiler that control transfer instructions
cannot have outputs.  This restriction on <code>asm goto</code> may be lifted
in some future version of the compiler.  In the mean time, <code>asm goto</code>
may include a memory clobber, and so leave outputs in memory.
</p>
<div class="smallexample">
<pre class="smallexample">int frob(int x)
{
  int y;
  asm goto (&quot;frob %%r5, %1; jc %l[error]; mov (%2), %%r5&quot;
            : : &quot;r&quot;(x), &quot;r&quot;(&amp;y) : &quot;r5&quot;, &quot;memory&quot; : error);
  return y;
 error:
  return -1;
}
</pre></div>

<p>In this (inefficient) example, the <code>frob</code> instruction sets the
carry bit to indicate an error.  The <code>jc</code> instruction detects
this and branches to the <code>error</code> label.  Finally, the output
of the <code>frob</code> instruction (<code>%r5</code>) is stored into the memory
for variable <code>y</code>, which is later read by the <code>return</code> statement.
</p>
<div class="smallexample">
<pre class="smallexample">void doit(void)
{
  int i = 0;
  asm goto (&quot;mfsr %%r1, 123; jmp %%r1;&quot;
            &quot;.pushsection doit_table;&quot;
            &quot;.long %l0, %l1, %l2, %l3;&quot;
            &quot;.popsection&quot;
            : : : &quot;r1&quot; : label1, label2, label3, label4);
  __builtin_unreachable ();

 label1:
  f1();
  return;
 label2:
  f2();
  return;
 label3:
  i = 1;
 label4:
  f3(i);
}
</pre></div>

<p>In this (also inefficient) example, the <code>mfsr</code> instruction reads
an address from some out-of-band machine register, and the following
<code>jmp</code> instruction branches to that address.  The address read by
the <code>mfsr</code> instruction is assumed to have been previously set via
some application-specific mechanism to be one of the four values stored
in the <code>doit_table</code> section.  Finally, the <code>asm</code> is followed
by a call to <code>__builtin_unreachable</code> to indicate that the <code>asm</code>
does not in fact fall through.
</p>
<div class="smallexample">
<pre class="smallexample">#define TRACE1(NUM)                         \
  do {                                      \
    asm goto (&quot;0: nop;&quot;                     \
              &quot;.pushsection trace_table;&quot;   \
              &quot;.long 0b, %l0;&quot;              \
              &quot;.popsection&quot;                 \
              : : : : trace#NUM);           \
    if (0) { trace#NUM: trace(); }          \
  } while (0)
#define TRACE  TRACE1(__COUNTER__)
</pre></div>

<p>In this example (which in fact inspired the <code>asm goto</code> feature)
we want on rare occasions to call the <code>trace</code> function; on other
occasions we&rsquo;d like to keep the overhead to the absolute minimum.
The normal code path consists of a single <code>nop</code> instruction.
However, we record the address of this <code>nop</code> together with the
address of a label that calls the <code>trace</code> function.  This allows
the <code>nop</code> instruction to be patched at runtime to be an
unconditional branch to the stored label.  It is assumed that an
optimizing compiler will move the labeled block out of line, to
optimize the fall through path from the <code>asm</code>.
</p>
<p>If you are writing a header file that should be includable in ISO C
d383 2
a384 3
</p>
<a name="Size-of-an-asm"></a>
<h4 class="subsection">6.41.1 Size of an <code>asm</code></h4>
d394 3
a396 3
this is the &lsquo;<code>;</code>&rsquo; character.
</p>
<p>Normally, GCC&rsquo;s estimate is perfectly adequate to ensure that correct
d400 1
a400 1
space in the object file than would be needed for a single instruction.
d403 2
a404 3
</p>
<a name="i386-floating-point-asm-operands"></a>
<h4 class="subsection">6.41.2 i386 floating point asm operands</h4>
d409 3
a411 3
</p>
<ol>
<li> Given a set of input regs that die in an asm_operands, it is
d415 1
a415 1
<p>An input reg that is implicitly popped by the asm must be
d418 3
a420 3
</p>
</li><li> For any input reg that is implicitly popped by an asm, it is
necessary to know how to adjust the stack to compensate for the pop.
d423 1
a423 1
stack looked like&mdash;it&rsquo;s not clear how the rest of the stack &ldquo;slides
d426 1
a426 1
<p>All implicitly popped input regs must be closer to the top of
d428 2
a429 2
</p>
<p>It is possible that if an input dies in an insn, reload might
a430 4
</p>
<div class="smallexample">
<pre class="smallexample">asm (&quot;foo&quot; : &quot;=t&quot; (a) : &quot;f&quot; (b));
</pre></div>
d432 3
a434 1
<p>This asm says that input B is not popped by the asm, and that
d439 2
a440 2
</p>
<p>If any input operand uses the <code>f</code> constraint, all output reg
a441 6
</p>
<p>The asm above would be written as
</p>
<div class="smallexample">
<pre class="smallexample">asm (&quot;foo&quot; : &quot;=&amp;t&quot; (a) : &quot;f&quot; (b));
</pre></div>
d443 5
a447 1
</li><li> Some operands need to be in particular places on the stack.  All
d452 1
a452 1
<p>Output operands must specifically indicate which reg an output
d455 2
a456 2
</p>
</li><li> Output operands may not be &ldquo;inserted&rdquo; between existing stack regs.
d458 1
a458 1
are dead before the asm_operands, and are pushed by the asm_operands.
d461 1
a461 1
<p>Output operands must start at the top of the reg-stack: output
d463 2
a464 2
</p>
</li><li> Some asm statements may need extra stack space for internal
d468 1
a468 1
</li></ol>
d470 1
a470 1
<p>Here are a couple of reasonable asms to want to write.  This asm
a471 4
</p>
<div class="smallexample">
<pre class="smallexample">asm (&quot;fsincos&quot; : &quot;=t&quot; (cos), &quot;=u&quot; (sin) : &quot;0&quot; (inp));
</pre></div>
d473 3
a475 1
<p>This asm takes two inputs, which are popped by the <code>fyl2xp1</code> opcode,
a477 13
</p>
<div class="smallexample">
<pre class="smallexample">asm (&quot;fyl2xp1&quot; : &quot;=t&quot; (result) : &quot;0&quot; (x), &quot;u&quot; (y) : &quot;st(1)&quot;);
</pre></div>



<hr>
<div class="header">
<p>
Next: <a href="Constraints.html#Constraints" accesskey="n" rel="next">Constraints</a>, Previous: <a href="Volatiles.html#Volatiles" accesskey="p" rel="prev">Volatiles</a>, Up: <a href="C-Extensions.html#C-Extensions" accesskey="u" rel="up">C Extensions</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>

d479 10
a489 2
</body>
</html>
@

