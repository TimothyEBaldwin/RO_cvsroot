head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.19;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.19;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.27;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>ARM Options - Using the GNU Compiler Collection (GCC)</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using the GNU Compiler Collection (GCC)">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Submodel-Options.html#Submodel-Options" title="Submodel Options">
<link rel="prev" href="ARC-Options.html#ARC-Options" title="ARC Options">
<link rel="next" href="AVR-Options.html#AVR-Options" title="AVR Options">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="ARM-Options"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="AVR-Options.html#AVR-Options">AVR Options</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="ARC-Options.html#ARC-Options">ARC Options</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Submodel-Options.html#Submodel-Options">Submodel Options</a>
<hr>
</div>

<h4 class="subsection">3.17.2 ARM Options</h4>

<p><a name="index-ARM-options-726"></a>
These &lsquo;<samp><span class="samp">-m</span></samp>&rsquo; options are defined for Advanced RISC Machines (ARM)
architectures:

     <dl>
<dt><code>-mabi=</code><var>name</var><dd><a name="index-mabi-727"></a>Generate code for the specified ABI.  Permissible values are: &lsquo;<samp><span class="samp">apcs-gnu</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">apcs-32</span></samp>&rsquo;, &lsquo;<samp><span class="samp">atpcs</span></samp>&rsquo;, &lsquo;<samp><span class="samp">aapcs</span></samp>&rsquo;, &lsquo;<samp><span class="samp">aapcs-linux</span></samp>&rsquo; and
&lsquo;<samp><span class="samp">iwmmxt</span></samp>&rsquo;.

     <br><dt><code>-mapcs-frame</code><dd><a name="index-mapcs_002dframe-728"></a>Generate a stack frame that is compliant with the ARM Procedure Call
Standard for all functions, even if this is not strictly necessary for
correct execution of the code.  Specifying <samp><span class="option">-fomit-frame-pointer</span></samp>
with this option will cause the stack frames not to be generated for
leaf functions.  The default is <samp><span class="option">-mno-apcs-frame</span></samp>.

     <br><dt><code>-mapcs</code><dd><a name="index-mapcs-729"></a>This is a synonym for <samp><span class="option">-mapcs-frame</span></samp>.

     <br><dt><code>-mapcs-stack-check</code><dd><a name="index-mapcs_002dstack_002dcheck-730"></a>Generate code to check the amount of stack space available upon entry to
every function (that actually uses some stack space).  If there is
insufficient space available then either the function
&lsquo;<samp><span class="samp">__rt_stkovf_split_small</span></samp>&rsquo; or &lsquo;<samp><span class="samp">__rt_stkovf_split_big</span></samp>&rsquo; will be
called, depending upon the amount of stack space required.  The run time
system is required to provide these functions.  The default is
<samp><span class="option">-mno-apcs-stack-check</span></samp>, since this produces smaller code.  However,
the APCS-32 ABI has <samp><span class="option">-mapcs-stack-check</span></samp> as default except when
module code is generated with <samp><span class="option">-mmodule</span></samp>.

     <br><dt><code>-mmodule</code><dd><a name="index-mmodule-731"></a>Generate code suited for building RISC OS modules.  All writable data
are accessed via an offset determined by the value at R10-536.  This is
only supported for APCS-32 ABI.  The default is <samp><span class="option">-mno-module</span></samp>.

     <br><dt><code>-mapcs-float</code><dd><a name="index-mapcs_002dfloat-732"></a>Pass floating point arguments using the float point registers.  This is
one of the variants of the APCS.  This option is recommended if the
target hardware has a floating point unit or if a lot of floating point
arithmetic is going to be performed by the code.  The default is
<samp><span class="option">-mno-apcs-float</span></samp>, since integer only code is slightly increased in
size if <samp><span class="option">-mapcs-float</span></samp> is used.

     <br><dt><code>-mthumb-interwork</code><dd><a name="index-mthumb_002dinterwork-733"></a>Generate code which supports calling between the ARM and Thumb
instruction sets.  Without this option the two instruction sets cannot
be reliably used inside one program.  The default is
<samp><span class="option">-mno-thumb-interwork</span></samp>, since slightly larger code is generated
when <samp><span class="option">-mthumb-interwork</span></samp> is specified.

     <br><dt><code>-mno-sched-prolog</code><dd><a name="index-mno_002dsched_002dprolog-734"></a>Prevent the reordering of instructions in the function prolog, or the
merging of those instruction with the instructions in the function's
body.  This means that all functions will start with a recognizable set
of instructions (or in fact one of a choice from a small set of
different function prologues), and this information can be used to
locate the start if functions inside an executable piece of code.  The
default is <samp><span class="option">-msched-prolog</span></samp>.

     <br><dt><code>-mhard-float</code><dd><a name="index-mhard_002dfloat-735"></a>Generate output containing floating point instructions.  This is the
default.

     <br><dt><code>-msoft-float</code><dd><a name="index-msoft_002dfloat-736"></a>Generate output containing library calls for floating point. 
<strong>Warning:</strong> the requisite libraries are not available for all ARM
targets.  Normally the facilities of the machine's usual C compiler are
used, but this cannot be done directly in cross-compilation.  You must make
your own arrangements to provide suitable library functions for
cross-compilation.

     <p><samp><span class="option">-msoft-float</span></samp> changes the calling convention in the output file;
therefore, it is only useful if you compile <em>all</em> of a program with
this option.  In particular, you need to compile <samp><span class="file">libgcc.a</span></samp>, the
library that comes with GCC, with <samp><span class="option">-msoft-float</span></samp> in order for
this to work.

     <br><dt><code>-mfloat-abi=</code><var>name</var><dd><a name="index-mfloat_002dabi-737"></a>Specifies which ABI to use for floating point values.  Permissible values
are: &lsquo;<samp><span class="samp">soft</span></samp>&rsquo;, &lsquo;<samp><span class="samp">softfp</span></samp>&rsquo; and &lsquo;<samp><span class="samp">hard</span></samp>&rsquo;.

     <p>&lsquo;<samp><span class="samp">soft</span></samp>&rsquo; and &lsquo;<samp><span class="samp">hard</span></samp>&rsquo; are equivalent to <samp><span class="option">-msoft-float</span></samp>
and <samp><span class="option">-mhard-float</span></samp> respectively.  &lsquo;<samp><span class="samp">softfp</span></samp>&rsquo; allows the generation
of floating point instructions, but still uses the soft-float calling
conventions.

     <br><dt><code>-mlittle-endian</code><dd><a name="index-mlittle_002dendian-738"></a>Generate code for a processor running in little-endian mode.  This is
the default for all standard configurations.

     <br><dt><code>-mbig-endian</code><dd><a name="index-mbig_002dendian-739"></a>Generate code for a processor running in big-endian mode; the default is
to compile code for a little-endian processor.

     <br><dt><code>-mwords-little-endian</code><dd><a name="index-mwords_002dlittle_002dendian-740"></a>This option only applies when generating code for big-endian processors. 
Generate code for a little-endian word order but a big-endian byte
order.  That is, a byte order of the form &lsquo;<samp><span class="samp">32107654</span></samp>&rsquo;.  Note: this
option should only be used if you require compatibility with code for
big-endian ARM processors generated by versions of the compiler prior to
2.8.

     <br><dt><code>-mcpu=</code><var>name</var><dd><a name="index-mcpu-741"></a>This specifies the name of the target ARM processor.  GCC uses this name
to determine what kind of instructions it can emit when generating
assembly code.  Permissible names are: &lsquo;<samp><span class="samp">arm2</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm250</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">arm3</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm6</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm60</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm600</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm610</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">arm620</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm7</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm7m</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm7d</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm7dm</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">arm7di</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm7dmi</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm70</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm700</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">arm700i</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm710</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm710c</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm7100</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">arm7500</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm7500fe</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm7tdmi</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm7tdmi-s</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">arm8</span></samp>&rsquo;, &lsquo;<samp><span class="samp">strongarm</span></samp>&rsquo;, &lsquo;<samp><span class="samp">strongarm110</span></samp>&rsquo;, &lsquo;<samp><span class="samp">strongarm1100</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">arm8</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm810</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm9</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm9e</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm920</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">arm920t</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm922t</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm946e-s</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm966e-s</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">arm968e-s</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm926ej-s</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm940t</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm9tdmi</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">arm10tdmi</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm1020t</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm1026ej-s</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">arm10e</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm1020e</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm1022e</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">arm1136j-s</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm1136jf-s</span></samp>&rsquo;, &lsquo;<samp><span class="samp">mpcore</span></samp>&rsquo;, &lsquo;<samp><span class="samp">mpcorenovfp</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">arm1176jz-s</span></samp>&rsquo;, &lsquo;<samp><span class="samp">arm1176jzf-s</span></samp>&rsquo;, &lsquo;<samp><span class="samp">xscale</span></samp>&rsquo;, &lsquo;<samp><span class="samp">iwmmxt</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">ep9312</span></samp>&rsquo;.

     <dt><code>-mtune=</code><var>name</var><dd><a name="index-mtune-742"></a>This option is very similar to the <samp><span class="option">-mcpu=</span></samp> option, except that
instead of specifying the actual target processor type, and hence
restricting which instructions can be used, it specifies that GCC should
tune the performance of the code as if the target were of the type
specified in this option, but still choosing the instructions that it
will generate based on the cpu specified by a <samp><span class="option">-mcpu=</span></samp> option. 
For some ARM implementations better performance can be obtained by using
this option.

     <br><dt><code>-march=</code><var>name</var><dd><a name="index-march-743"></a>This specifies the name of the target ARM architecture.  GCC uses this
name to determine what kind of instructions it can emit when generating
assembly code.  This option can be used in conjunction with or instead
of the <samp><span class="option">-mcpu=</span></samp> option.  Permissible names are: &lsquo;<samp><span class="samp">armv2</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">armv2a</span></samp>&rsquo;, &lsquo;<samp><span class="samp">armv3</span></samp>&rsquo;, &lsquo;<samp><span class="samp">armv3m</span></samp>&rsquo;, &lsquo;<samp><span class="samp">armv4</span></samp>&rsquo;, &lsquo;<samp><span class="samp">armv4t</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">armv5</span></samp>&rsquo;, &lsquo;<samp><span class="samp">armv5t</span></samp>&rsquo;, &lsquo;<samp><span class="samp">armv5te</span></samp>&rsquo;, &lsquo;<samp><span class="samp">armv6</span></samp>&rsquo;, &lsquo;<samp><span class="samp">armv6j</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">iwmmxt</span></samp>&rsquo;, &lsquo;<samp><span class="samp">ep9312</span></samp>&rsquo;.

     <br><dt><code>-mfpu=</code><var>name</var><dt><code>-mfpe=</code><var>number</var><dt><code>-mfp=</code><var>number</var><dd><a name="index-mfpu-744"></a><a name="index-mfpe-745"></a><a name="index-mfp-746"></a>This specifies what floating point hardware (or hardware emulation) is
available on the target.  Permissible names are: &lsquo;<samp><span class="samp">fpa</span></samp>&rsquo;, &lsquo;<samp><span class="samp">fpe2</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">fpe3</span></samp>&rsquo;, &lsquo;<samp><span class="samp">maverick</span></samp>&rsquo;, &lsquo;<samp><span class="samp">vfp</span></samp>&rsquo;.  <samp><span class="option">-mfp</span></samp> and <samp><span class="option">-mfpe</span></samp>
are synonyms for <samp><span class="option">-mfpu</span></samp>=&lsquo;<samp><span class="samp">fpe</span></samp>&rsquo;<var>number</var>, for compatibility
with older versions of GCC.

     <p>If <samp><span class="option">-msoft-float</span></samp> is specified this specifies the format of
floating point values.

     <br><dt><code>-mstructure-size-boundary=</code><var>n</var><dd><a name="index-mstructure_002dsize_002dboundary-747"></a>The size of all structures and unions will be rounded up to a multiple
of the number of bits set by this option.  Permissible values are 8, 32
and 64.  The default value varies for different toolchains.  For the COFF
targeted toolchain the default value is 8.  A value of 64 is only allowed
if the underlying ABI supports it.

     <p>Specifying the larger number can produce faster, more efficient code, but
can also increase the size of the program.  Different values are potentially
incompatible.  Code compiled with one value cannot necessarily expect to
work with code or libraries compiled with another value, if they exchange
information using structures or unions.

     <br><dt><code>-mabort-on-noreturn</code><dd><a name="index-mabort_002don_002dnoreturn-748"></a>Generate a call to the function <code>abort</code> at the end of a
<code>noreturn</code> function.  It will be executed if the function tries to
return.

     <br><dt><code>-mlong-calls</code><dt><code>-mno-long-calls</code><dd><a name="index-mlong_002dcalls-749"></a><a name="index-mno_002dlong_002dcalls-750"></a>Tells the compiler to perform function calls by first loading the
address of the function into a register and then performing a subroutine
call on this register.  This switch is needed if the target function
will lie outside of the 64 megabyte addressing range of the offset based
version of subroutine call instruction.

     <p>Even if this switch is enabled, not all function calls will be turned
into long calls.  The heuristic is that static functions, functions
which have the &lsquo;<samp><span class="samp">short-call</span></samp>&rsquo; attribute, functions that are inside
the scope of a &lsquo;<samp><span class="samp">#pragma no_long_calls</span></samp>&rsquo; directive and functions whose
definitions have already been compiled within the current compilation
unit, will not be turned into long calls.  The exception to this rule is
that weak function definitions, functions with the &lsquo;<samp><span class="samp">long-call</span></samp>&rsquo;
attribute or the &lsquo;<samp><span class="samp">section</span></samp>&rsquo; attribute, and functions that are within
the scope of a &lsquo;<samp><span class="samp">#pragma long_calls</span></samp>&rsquo; directive, will always be
turned into long calls.

     <p>This feature is not enabled by default.  Specifying
<samp><span class="option">-mno-long-calls</span></samp> will restore the default behavior, as will
placing the function calls within the scope of a &lsquo;<samp><span class="samp">#pragma
long_calls_off</span></samp>&rsquo; directive.  Note these switches have no effect on how
the compiler generates code to handle function calls via function
pointers.

     <br><dt><code>-mnop-fun-dllimport</code><dd><a name="index-mnop_002dfun_002ddllimport-751"></a>Disable support for the <code>dllimport</code> attribute.

     <br><dt><code>-msingle-pic-base</code><dd><a name="index-msingle_002dpic_002dbase-752"></a>Treat the register used for PIC addressing as read-only, rather than
loading it in the prologue for each function.  The run-time system is
responsible for initializing this register with an appropriate value
before execution begins.

     <br><dt><code>-mpic-register=</code><var>reg</var><dd><a name="index-mpic_002dregister-753"></a>Specify the register to be used for PIC addressing.  The default is R10
unless stack-checking is enabled, when R9 is used.

     <br><dt><code>-mcirrus-fix-invalid-insns</code><dd><a name="index-mcirrus_002dfix_002dinvalid_002dinsns-754"></a><a name="index-mno_002dcirrus_002dfix_002dinvalid_002dinsns-755"></a>Insert NOPs into the instruction stream to in order to work around
problems with invalid Maverick instruction combinations.  This option
is only valid if the <samp><span class="option">-mcpu=ep9312</span></samp> option has been used to
enable generation of instructions for the Cirrus Maverick floating
point co-processor.  This option is not enabled by default, since the
problem is only present in older Maverick implementations.  The default
can be re-enabled by use of the <samp><span class="option">-mno-cirrus-fix-invalid-insns</span></samp>
switch.

     <br><dt><code>-mpoke-function-name</code><dd><a name="index-mpoke_002dfunction_002dname-756"></a>Write the name of each function into the text section, directly
preceding the function prologue.  The generated code is similar to this:

     <pre class="smallexample">               t0
                   .ascii "arm_poke_function_name", 0
                   .align
               t1
                   .word 0xff000000 + (t1 - t0)
               arm_poke_function_name
                   mov     ip, sp
                   stmfd   sp!, {fp, ip, lr, pc}
                   sub     fp, ip, #4
</pre>
     <p>When performing a stack backtrace, code can inspect the value of
<code>pc</code> stored at <code>fp + 0</code>.  If the trace function then looks at
location <code>pc - 12</code> and the top 8 bits are set, then we know that
there is a function name embedded immediately preceding this location
and has length <code>((pc[-3]) &amp; 0xff000000)</code>.

     <br><dt><code>-mthumb</code><dd><a name="index-mthumb-757"></a>Generate code for the 16-bit Thumb instruction set.  The default is to
use the 32-bit ARM instruction set.

     <br><dt><code>-mtpcs-frame</code><dd><a name="index-mtpcs_002dframe-758"></a>Generate a stack frame that is compliant with the Thumb Procedure Call
Standard for all non-leaf functions.  (A leaf function is one that does
not call any other functions.)  The default is <samp><span class="option">-mno-tpcs-frame</span></samp>.

     <br><dt><code>-mtpcs-leaf-frame</code><dd><a name="index-mtpcs_002dleaf_002dframe-759"></a>Generate a stack frame that is compliant with the Thumb Procedure Call
Standard for all leaf functions.  (A leaf function is one that does
not call any other functions.)  The default is <samp><span class="option">-mno-apcs-leaf-frame</span></samp>.

     <br><dt><code>-mcallee-super-interworking</code><dd><a name="index-mcallee_002dsuper_002dinterworking-760"></a>Gives all externally visible functions in the file being compiled an ARM
instruction set header which switches to Thumb mode before executing the
rest of the function.  This allows these functions to be called from
non-interworking code.

     <br><dt><code>-mcaller-super-interworking</code><dd><a name="index-mcaller_002dsuper_002dinterworking-761"></a>Allows calls via function pointers (including virtual functions) to
execute correctly regardless of whether the target code has been
compiled for interworking or not.  There is a small overhead in the cost
of executing a function pointer if this option is enabled.

     <br><dt><code>-mtp=</code><var>name</var><dd><a name="index-mtp-762"></a>Specify the access model for the thread local storage pointer.  The valid
models are <samp><span class="option">soft</span></samp>, which generates calls to <code>__aeabi_read_tp</code>,
<samp><span class="option">cp15</span></samp>, which fetches the thread pointer from <code>cp15</code> directly
(supported in the arm6k architecture), and <samp><span class="option">auto</span></samp>, which uses the
best available method for the selected processor.  The default setting is
<samp><span class="option">auto</span></samp>.

 </dl>

 </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 14
a14 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010 Free Software Foundation, Inc.
d17 1
a17 1
under the terms of the GNU Free Documentation License, Version 1.3 or
d19 4
a22 4
Invariant Sections being "Funding Free Software", the Front-Cover
Texts being (a) (see below), and with the Back-Cover Texts being (b)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".
d26 1
a26 1
A GNU Manual
d30 1
a30 1
You have freedom to copy and modify this GNU Manual, like GNU
d32 13
a44 47
     funds for GNU development. -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using the GNU Compiler Collection (GCC): ARM Options</title>

<meta name="description" content="Using the GNU Compiler Collection (GCC): ARM Options">
<meta name="keywords" content="Using the GNU Compiler Collection (GCC): ARM Options">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="Option-Index.html#Option-Index" rel="index" title="Option Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Submodel-Options.html#Submodel-Options" rel="up" title="Submodel Options">
<link href="AVR-Options.html#AVR-Options" rel="next" title="AVR Options">
<link href="Adapteva-Epiphany-Options.html#Adapteva-Epiphany-Options" rel="prev" title="Adapteva Epiphany Options">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d46 2
a47 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a48 1
<div class="header">
d50 4
a53 1
Next: <a href="AVR-Options.html#AVR-Options" accesskey="n" rel="next">AVR Options</a>, Previous: <a href="Adapteva-Epiphany-Options.html#Adapteva-Epiphany-Options" accesskey="p" rel="prev">Adapteva Epiphany Options</a>, Up: <a href="Submodel-Options.html#Submodel-Options" accesskey="u" rel="up">Submodel Options</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
d55 1
a55 2
<hr>
<a name="ARM-Options-1"></a>
a56 1
<a name="index-ARM-options"></a>
d58 2
a59 1
<p>These &lsquo;<samp>-m</samp>&rsquo; options are defined for Advanced RISC Machines (ARM)
d61 7
a67 12
</p>
<dl compact="compact">
<dt><code>-mabi=<var>name</var></code></dt>
<dd><a name="index-mabi"></a>
<p>Generate code for the specified ABI.  Permissible values are: &lsquo;<samp>apcs-gnu</samp>&rsquo;,
&lsquo;<samp>apcs-32</samp>&rsquo;, &lsquo;<samp>atpcs</samp>&rsquo;, &lsquo;<samp>aapcs</samp>&rsquo;, &lsquo;<samp>aapcs-linux</samp>&rsquo; and
&lsquo;<samp>iwmmxt</samp>&rsquo;.
</p>
</dd>
<dt><code>-mapcs-frame</code></dt>
<dd><a name="index-mapcs_002dframe"></a>
<p>Generate a stack frame that is compliant with the ARM Procedure Call
d69 1
a69 1
correct execution of the code.  Specifying <samp>-fomit-frame-pointer</samp>
d71 5
a75 11
leaf functions.  The default is <samp>-mno-apcs-frame</samp>.
</p>
</dd>
<dt><code>-mapcs</code></dt>
<dd><a name="index-mapcs"></a>
<p>This is a synonym for <samp>-mapcs-frame</samp>.
</p>
</dd>
<dt><code>-mapcs-stack-check</code></dt>
<dd><a name="index-mapcs_002dstack_002dcheck"></a>
<p>Generate code to check the amount of stack space available upon entry to
d78 2
a79 2
&lsquo;<samp>__rt_stkovf_split_small</samp>&rsquo; or &lsquo;<samp>__rt_stkovf_split_big</samp>&rsquo; will be
called, depending upon the amount of stack space required.  The runtime
d81 5
a85 8
<samp>-mno-apcs-stack-check</samp>, since this produces smaller code.  However,
the APCS-32&nbsp;ABI has <samp>-mapcs-stack-check</samp> as default except when
module code is generated with <samp>-mmodule</samp>.
</p>
</dd>
<dt><code>-mmodule</code></dt>
<dd><a name="index-mmodule"></a>
<p>Generate code suited for building RISC OS modules.  All writable data
d87 3
a89 6
only supported for APCS-32&nbsp;ABI.  The default is <samp>-mno-module</samp>.
</p>
</dd>
<dt><code>-mapcs-float</code></dt>
<dd><a name="index-mapcs_002dfloat"></a>
<p>Pass floating-point arguments using the floating-point registers.  This is
d91 1
a91 1
target hardware has a floating-point unit or if a lot of floating-point
d93 11
a103 19
<samp>-mno-apcs-float</samp>, since integer only code is slightly increased in
size if <samp>-mapcs-float</samp> is used.
</p>

</dd>
<dt><code>-mthumb-interwork</code></dt>
<dd><a name="index-mthumb_002dinterwork"></a>
<p>Generate code that supports calling between the ARM and Thumb
instruction sets.  Without this option, on pre-v5 architectures, the
two instruction sets cannot be reliably used inside one program.  The
default is <samp>-mno-thumb-interwork</samp>, since slightly larger code
is generated when <samp>-mthumb-interwork</samp> is specified.  In AAPCS
configurations this option is meaningless.
</p>
</dd>
<dt><code>-mno-sched-prolog</code></dt>
<dd><a name="index-mno_002dsched_002dprolog"></a>
<p>Prevent the reordering of instructions in the function prologue, or the
merging of those instruction with the instructions in the function&rsquo;s
d108 27
a134 24
default is <samp>-msched-prolog</samp>.
</p>
</dd>
<dt><code>-mfloat-abi=<var>name</var></code></dt>
<dd><a name="index-mfloat_002dabi"></a>
<p>Specifies which floating-point ABI to use.  Permissible values
are: &lsquo;<samp>soft</samp>&rsquo;, &lsquo;<samp>softfp</samp>&rsquo; and &lsquo;<samp>hard</samp>&rsquo;.
</p>
<p>Specifying &lsquo;<samp>soft</samp>&rsquo; causes GCC to generate output containing
library calls for floating-point operations.
&lsquo;<samp>softfp</samp>&rsquo; allows the generation of code using hardware floating-point
instructions, but still uses the soft-float calling conventions.
&lsquo;<samp>hard</samp>&rsquo; allows generation of floating-point instructions
and uses FPU-specific calling conventions.
</p>
<p>The default depends on the specific target configuration.  Note that
the hard-float and soft-float ABIs are not link-compatible; you must
compile your entire program with the same ABI, and link with a
compatible set of libraries.
</p>
</dd>
<dt><code>-mlittle-endian</code></dt>
<dd><a name="index-mlittle_002dendian"></a>
<p>Generate code for a processor running in little-endian mode.  This is
d136 2
a137 5
</p>
</dd>
<dt><code>-mbig-endian</code></dt>
<dd><a name="index-mbig_002dendian"></a>
<p>Generate code for a processor running in big-endian mode; the default is
d139 2
a140 5
</p>
</dd>
<dt><code>-mwords-little-endian</code></dt>
<dd><a name="index-mwords_002dlittle_002dendian"></a>
<p>This option only applies when generating code for big-endian processors.
d142 1
a142 1
order.  That is, a byte order of the form &lsquo;<samp>32107654</samp>&rsquo;.  Note: this
d145 30
a174 6
2.8.  This option is now deprecated.
</p>
</dd>
<dt><code>-march=<var>name</var></code></dt>
<dd><a name="index-march"></a>
<p>This specifies the name of the target ARM architecture.  GCC uses this
d177 15
a191 120
of the <samp>-mcpu=</samp> option.  Permissible names are: &lsquo;<samp>armv2</samp>&rsquo;,
&lsquo;<samp>armv2a</samp>&rsquo;, &lsquo;<samp>armv3</samp>&rsquo;, &lsquo;<samp>armv3m</samp>&rsquo;, &lsquo;<samp>armv4</samp>&rsquo;, &lsquo;<samp>armv4t</samp>&rsquo;,
&lsquo;<samp>armv5</samp>&rsquo;, &lsquo;<samp>armv5t</samp>&rsquo;, &lsquo;<samp>armv5e</samp>&rsquo;, &lsquo;<samp>armv5te</samp>&rsquo;,
&lsquo;<samp>armv6</samp>&rsquo;, &lsquo;<samp>armv6j</samp>&rsquo;,
&lsquo;<samp>armv6t2</samp>&rsquo;, &lsquo;<samp>armv6z</samp>&rsquo;, &lsquo;<samp>armv6zk</samp>&rsquo;, &lsquo;<samp>armv6-m</samp>&rsquo;,
&lsquo;<samp>armv7</samp>&rsquo;, &lsquo;<samp>armv7-a</samp>&rsquo;, &lsquo;<samp>armv7-r</samp>&rsquo;, &lsquo;<samp>armv7-m</samp>&rsquo;, &lsquo;<samp>armv7e-m</samp>&rsquo;,
&lsquo;<samp>iwmmxt</samp>&rsquo;, &lsquo;<samp>iwmmxt2</samp>&rsquo;, &lsquo;<samp>ep9312</samp>&rsquo;.
</p>
<p><samp>-march=native</samp> causes the compiler to auto-detect the architecture
of the build computer.  At present, this feature is only supported on
Linux, and not all architectures are recognized.  If the auto-detect is
unsuccessful the option has no effect.
</p>
</dd>
<dt><code>-mtune=<var>name</var></code></dt>
<dd><a name="index-mtune"></a>
<p>This option specifies the name of the target ARM processor for
which GCC should tune the performance of the code.
For some ARM implementations better performance can be obtained by using
this option.
Permissible names are: &lsquo;<samp>arm2</samp>&rsquo;, &lsquo;<samp>arm250</samp>&rsquo;,
&lsquo;<samp>arm3</samp>&rsquo;, &lsquo;<samp>arm6</samp>&rsquo;, &lsquo;<samp>arm60</samp>&rsquo;, &lsquo;<samp>arm600</samp>&rsquo;, &lsquo;<samp>arm610</samp>&rsquo;,
&lsquo;<samp>arm620</samp>&rsquo;, &lsquo;<samp>arm7</samp>&rsquo;, &lsquo;<samp>arm7m</samp>&rsquo;, &lsquo;<samp>arm7d</samp>&rsquo;, &lsquo;<samp>arm7dm</samp>&rsquo;,
&lsquo;<samp>arm7di</samp>&rsquo;, &lsquo;<samp>arm7dmi</samp>&rsquo;, &lsquo;<samp>arm70</samp>&rsquo;, &lsquo;<samp>arm700</samp>&rsquo;,
&lsquo;<samp>arm700i</samp>&rsquo;, &lsquo;<samp>arm710</samp>&rsquo;, &lsquo;<samp>arm710c</samp>&rsquo;, &lsquo;<samp>arm7100</samp>&rsquo;,
&lsquo;<samp>arm720</samp>&rsquo;,
&lsquo;<samp>arm7500</samp>&rsquo;, &lsquo;<samp>arm7500fe</samp>&rsquo;, &lsquo;<samp>arm7tdmi</samp>&rsquo;, &lsquo;<samp>arm7tdmi-s</samp>&rsquo;,
&lsquo;<samp>arm710t</samp>&rsquo;, &lsquo;<samp>arm720t</samp>&rsquo;, &lsquo;<samp>arm740t</samp>&rsquo;,
&lsquo;<samp>strongarm</samp>&rsquo;, &lsquo;<samp>strongarm110</samp>&rsquo;, &lsquo;<samp>strongarm1100</samp>&rsquo;,
&lsquo;<samp>strongarm1110</samp>&rsquo;,
&lsquo;<samp>arm8</samp>&rsquo;, &lsquo;<samp>arm810</samp>&rsquo;, &lsquo;<samp>arm9</samp>&rsquo;, &lsquo;<samp>arm9e</samp>&rsquo;, &lsquo;<samp>arm920</samp>&rsquo;,
&lsquo;<samp>arm920t</samp>&rsquo;, &lsquo;<samp>arm922t</samp>&rsquo;, &lsquo;<samp>arm946e-s</samp>&rsquo;, &lsquo;<samp>arm966e-s</samp>&rsquo;,
&lsquo;<samp>arm968e-s</samp>&rsquo;, &lsquo;<samp>arm926ej-s</samp>&rsquo;, &lsquo;<samp>arm940t</samp>&rsquo;, &lsquo;<samp>arm9tdmi</samp>&rsquo;,
&lsquo;<samp>arm10tdmi</samp>&rsquo;, &lsquo;<samp>arm1020t</samp>&rsquo;, &lsquo;<samp>arm1026ej-s</samp>&rsquo;,
&lsquo;<samp>arm10e</samp>&rsquo;, &lsquo;<samp>arm1020e</samp>&rsquo;, &lsquo;<samp>arm1022e</samp>&rsquo;,
&lsquo;<samp>arm1136j-s</samp>&rsquo;, &lsquo;<samp>arm1136jf-s</samp>&rsquo;, &lsquo;<samp>mpcore</samp>&rsquo;, &lsquo;<samp>mpcorenovfp</samp>&rsquo;,
&lsquo;<samp>arm1156t2-s</samp>&rsquo;, &lsquo;<samp>arm1156t2f-s</samp>&rsquo;, &lsquo;<samp>arm1176jz-s</samp>&rsquo;, &lsquo;<samp>arm1176jzf-s</samp>&rsquo;,
&lsquo;<samp>cortex-a5</samp>&rsquo;, &lsquo;<samp>cortex-a7</samp>&rsquo;, &lsquo;<samp>cortex-a8</samp>&rsquo;, &lsquo;<samp>cortex-a9</samp>&rsquo;, 
&lsquo;<samp>cortex-a15</samp>&rsquo;, &lsquo;<samp>cortex-r4</samp>&rsquo;, &lsquo;<samp>cortex-r4f</samp>&rsquo;, &lsquo;<samp>cortex-r5</samp>&rsquo;,
&lsquo;<samp>cortex-m4</samp>&rsquo;, &lsquo;<samp>cortex-m3</samp>&rsquo;,
&lsquo;<samp>cortex-m1</samp>&rsquo;,
&lsquo;<samp>cortex-m0</samp>&rsquo;,
&lsquo;<samp>xscale</samp>&rsquo;, &lsquo;<samp>iwmmxt</samp>&rsquo;, &lsquo;<samp>iwmmxt2</samp>&rsquo;, &lsquo;<samp>ep9312</samp>&rsquo;,
&lsquo;<samp>fa526</samp>&rsquo;, &lsquo;<samp>fa626</samp>&rsquo;,
&lsquo;<samp>fa606te</samp>&rsquo;, &lsquo;<samp>fa626te</samp>&rsquo;, &lsquo;<samp>fmp626</samp>&rsquo;, &lsquo;<samp>fa726te</samp>&rsquo;.
</p>
<p><samp>-mtune=generic-<var>arch</var></samp> specifies that GCC should tune the
performance for a blend of processors within architecture <var>arch</var>.
The aim is to generate code that run well on the current most popular
processors, balancing between optimizations that benefit some CPUs in the
range, and avoiding performance pitfalls of other CPUs.  The effects of
this option may change in future GCC versions as CPU models come and go.
</p>
<p><samp>-mtune=native</samp> causes the compiler to auto-detect the CPU
of the build computer.  At present, this feature is only supported on
Linux, and not all architectures are recognized.  If the auto-detect is
unsuccessful the option has no effect.
</p>
</dd>
<dt><code>-mcpu=<var>name</var></code></dt>
<dd><a name="index-mcpu"></a>
<p>This specifies the name of the target ARM processor.  GCC uses this name
to derive the name of the target ARM architecture (as if specified
by <samp>-march</samp>) and the ARM processor type for which to tune for
performance (as if specified by <samp>-mtune</samp>).  Where this option
is used in conjunction with <samp>-march</samp> or <samp>-mtune</samp>,
those options take precedence over the appropriate part of this option.
</p>
<p>Permissible names for this option are the same as those for
<samp>-mtune</samp>.
</p>
<p><samp>-mcpu=generic-<var>arch</var></samp> is also permissible, and is
equivalent to <samp>-march=<var>arch</var> -mtune=generic-<var>arch</var></samp>.
See <samp>-mtune</samp> for more information.
</p>
<p><samp>-mcpu=native</samp> causes the compiler to auto-detect the CPU
of the build computer.  At present, this feature is only supported on
Linux, and not all architectures are recognized.  If the auto-detect is
unsuccessful the option has no effect.
</p>
</dd>
<dt><code>-mfpu=<var>name</var></code></dt>
<dt><code>-mfpe=<var>number</var></code></dt>
<dt><code>-mfp=<var>number</var></code></dt>
<dd><a name="index-mfpu"></a>
<a name="index-mfpe"></a>
<a name="index-mfp"></a>
<p>This specifies what floating-point hardware (or hardware emulation) is
available on the target.  Permissible names are: &lsquo;<samp>fpa</samp>&rsquo;, &lsquo;<samp>fpe2</samp>&rsquo;,
&lsquo;<samp>fpe3</samp>&rsquo;, &lsquo;<samp>maverick</samp>&rsquo;, &lsquo;<samp>vfp</samp>&rsquo;, &lsquo;<samp>vfpv3</samp>&rsquo;, &lsquo;<samp>vfpv3-fp16</samp>&rsquo;,
&lsquo;<samp>vfpv3-d16</samp>&rsquo;, &lsquo;<samp>vfpv3-d16-fp16</samp>&rsquo;, &lsquo;<samp>vfpv3xd</samp>&rsquo;, &lsquo;<samp>vfpv3xd-fp16</samp>&rsquo;,
&lsquo;<samp>neon</samp>&rsquo;, &lsquo;<samp>neon-fp16</samp>&rsquo;, &lsquo;<samp>vfpv4</samp>&rsquo;, &lsquo;<samp>vfpv4-d16</samp>&rsquo;,
&lsquo;<samp>fpv4-sp-d16</samp>&rsquo; and &lsquo;<samp>neon-vfpv4</samp>&rsquo;.
<samp>-mfp</samp> and <samp>-mfpe</samp> are synonyms for
<samp>-mfpu</samp>=&lsquo;<samp>fpe</samp>&rsquo;<var>number</var>, for compatibility with older versions
of GCC.
</p>
<p>If <samp>-msoft-float</samp> is specified this specifies the format of
floating-point values.
</p>
<p>If the selected floating-point hardware includes the NEON extension
(e.g. <samp>-mfpu</samp>=&lsquo;<samp>neon</samp>&rsquo;), note that floating-point
operations will not be used by GCC&rsquo;s auto-vectorization pass unless
<samp>-funsafe-math-optimizations</samp> is also specified.  This is
because NEON hardware does not fully implement the IEEE 754 standard for
floating-point arithmetic (in particular denormal values are treated as
zero), so the use of NEON instructions may lead to a loss of precision.
</p>
</dd>
<dt><code>-mfp16-format=<var>name</var></code></dt>
<dd><a name="index-mfp16_002dformat"></a>
<p>Specify the format of the <code>__fp16</code> half-precision floating-point type.
Permissible names are &lsquo;<samp>none</samp>&rsquo;, &lsquo;<samp>ieee</samp>&rsquo;, and &lsquo;<samp>alternative</samp>&rsquo;;
the default is &lsquo;<samp>none</samp>&rsquo;, in which case the <code>__fp16</code> type is not
defined.  See <a href="Half_002dPrecision.html#Half_002dPrecision">Half-Precision</a>, for more information.
</p>
</dd>
<dt><code>-mstructure-size-boundary=<var>n</var></code></dt>
<dd><a name="index-mstructure_002dsize_002dboundary"></a>
<p>The size of all structures and unions will be rounded up to a multiple
d196 2
a197 2
</p>
<p>Specifying the larger number can produce faster, more efficient code, but
d202 2
a203 5
</p>
</dd>
<dt><code>-mabort-on-noreturn</code></dt>
<dd><a name="index-mabort_002don_002dnoreturn"></a>
<p>Generate a call to the function <code>abort</code> at the end of a
d206 2
a207 7
</p>
</dd>
<dt><code>-mlong-calls</code></dt>
<dt><code>-mno-long-calls</code></dt>
<dd><a name="index-mlong_002dcalls-1"></a>
<a name="index-mno_002dlong_002dcalls"></a>
<p>Tells the compiler to perform function calls by first loading the
d212 2
a213 2
</p>
<p>Even if this switch is enabled, not all function calls will be turned
d215 2
a216 2
that have the &lsquo;<samp>short-call</samp>&rsquo; attribute, functions that are inside
the scope of a &lsquo;<samp>#pragma no_long_calls</samp>&rsquo; directive and functions whose
d219 3
a221 3
that weak function definitions, functions with the &lsquo;<samp>long-call</samp>&rsquo;
attribute or the &lsquo;<samp>section</samp>&rsquo; attribute, and functions that are within
the scope of a &lsquo;<samp>#pragma long_calls</samp>&rsquo; directive, will always be
d223 5
a227 5
</p>
<p>This feature is not enabled by default.  Specifying
<samp>-mno-long-calls</samp> will restore the default behavior, as will
placing the function calls within the scope of a &lsquo;<samp>#pragma
long_calls_off</samp>&rsquo; directive.  Note these switches have no effect on how
d230 5
a234 6
</p>
</dd>
<dt><code>-msingle-pic-base</code></dt>
<dd><a name="index-msingle_002dpic_002dbase"></a>
<p>Treat the register used for PIC addressing as read-only, rather than
loading it in the prologue for each function.  The runtime system is
d237 2
a238 5
</p>
</dd>
<dt><code>-mpic-register=<var>reg</var></code></dt>
<dd><a name="index-mpic_002dregister"></a>
<p>Specify the register to be used for PIC addressing.  The default is R10
d240 2
a241 6
</p>
</dd>
<dt><code>-mcirrus-fix-invalid-insns</code></dt>
<dd><a name="index-mcirrus_002dfix_002dinvalid_002dinsns"></a>
<a name="index-mno_002dcirrus_002dfix_002dinvalid_002dinsns"></a>
<p>Insert NOPs into the instruction stream to in order to work around
d243 3
a245 3
is only valid if the <samp>-mcpu=ep9312</samp> option has been used to
enable generation of instructions for the Cirrus Maverick floating-point
co-processor.  This option is not enabled by default, since the
d247 1
a247 1
can be re-enabled by use of the <samp>-mno-cirrus-fix-invalid-insns</samp>
d249 2
a250 5
</p>
</dd>
<dt><code>-mpoke-function-name</code></dt>
<dd><a name="index-mpoke_002dfunction_002dname"></a>
<p>Write the name of each function into the text section, directly
a251 12
</p>
<div class="smallexample">
<pre class="smallexample">     t0
         .ascii &quot;arm_poke_function_name&quot;, 0
         .align
     t1
         .word 0xff000000 + (t1 - t0)
     arm_poke_function_name
         mov     ip, sp
         stmfd   sp!, {fp, ip, lr, pc}
         sub     fp, ip, #4
</pre></div>
d253 11
a263 1
<p>When performing a stack backtrace, code can inspect the value of
d268 5
a272 17
</p>
</dd>
<dt><code>-mthumb</code></dt>
<dt><code>-marm</code></dt>
<dd><a name="index-marm"></a>
<a name="index-mthumb"></a>

<p>Select between generating code that executes in ARM and Thumb
states.  The default for most configurations is to generate code
that executes in ARM state, but the default can be changed by
configuring GCC with the <samp>--with-mode=</samp><var>state</var>
configure option.
</p>
</dd>
<dt><code>-mtpcs-frame</code></dt>
<dd><a name="index-mtpcs_002dframe"></a>
<p>Generate a stack frame that is compliant with the Thumb Procedure Call
d274 3
a276 6
not call any other functions.)  The default is <samp>-mno-tpcs-frame</samp>.
</p>
</dd>
<dt><code>-mtpcs-leaf-frame</code></dt>
<dd><a name="index-mtpcs_002dleaf_002dframe"></a>
<p>Generate a stack frame that is compliant with the Thumb Procedure Call
d278 3
a280 6
not call any other functions.)  The default is <samp>-mno-apcs-leaf-frame</samp>.
</p>
</dd>
<dt><code>-mcallee-super-interworking</code></dt>
<dd><a name="index-mcallee_002dsuper_002dinterworking"></a>
<p>Gives all externally visible functions in the file being compiled an ARM
d283 3
a285 7
non-interworking code.  This option is not valid in AAPCS configurations
because interworking is enabled by default.
</p>
</dd>
<dt><code>-mcaller-super-interworking</code></dt>
<dd><a name="index-mcaller_002dsuper_002dinterworking"></a>
<p>Allows calls via function pointers (including virtual functions) to
d288 6
a293 11
of executing a function pointer if this option is enabled.  This option
is not valid in AAPCS configurations because interworking is enabled
by default.
</p>
</dd>
<dt><code>-mtp=<var>name</var></code></dt>
<dd><a name="index-mtp"></a>
<p>Specify the access model for the thread local storage pointer.  The valid
models are <samp>soft</samp>, which generates calls to <code>__aeabi_read_tp</code>,
<samp>cp15</samp>, which fetches the thread pointer from <code>cp15</code> directly
(supported in the arm6k architecture), and <samp>auto</samp>, which uses the
d295 1
a295 57
<samp>auto</samp>.
</p>
</dd>
<dt><code>-mtls-dialect=<var>dialect</var></code></dt>
<dd><a name="index-mtls_002ddialect"></a>
<p>Specify the dialect to use for accessing thread local storage.  Two
dialects are supported &mdash; <samp>gnu</samp> and <samp>gnu2</samp>.  The
<samp>gnu</samp> dialect selects the original GNU scheme for supporting
local and global dynamic TLS models.  The <samp>gnu2</samp> dialect
selects the GNU descriptor scheme, which provides better performance
for shared libraries.  The GNU descriptor scheme is compatible with
the original scheme, but does require new assembler, linker and
library support.  Initial and local exec TLS models are unaffected by
this option and always use the original scheme.
</p>
</dd>
<dt><code>-mword-relocations</code></dt>
<dd><a name="index-mword_002drelocations"></a>
<p>Only generate absolute relocations on word-sized values (i.e. R_ARM_ABS32).
This is enabled by default on targets (uClinux, SymbianOS) where the runtime
loader imposes this restriction, and when <samp>-fpic</samp> or <samp>-fPIC</samp>
is specified.
</p>
</dd>
<dt><code>-mfix-cortex-m3-ldrd</code></dt>
<dd><a name="index-mfix_002dcortex_002dm3_002dldrd"></a>
<p>Some Cortex-M3 cores can cause data corruption when <code>ldrd</code> instructions
with overlapping destination and base registers are used.  This option avoids
generating these instructions.  This option is enabled by default when
<samp>-mcpu=cortex-m3</samp> is specified.
</p>
</dd>
<dt><code>-munaligned-access</code></dt>
<dt><code>-mno-unaligned-access</code></dt>
<dd><a name="index-munaligned_002daccess"></a>
<a name="index-mno_002dunaligned_002daccess"></a>
<p>Enables (or disables) reading and writing of 16- and 32- bit values
from addresses that are not 16- or 32- bit aligned.  By default
unaligned access is disabled for all pre-ARMv6 and all ARMv6-M
architectures, and enabled for all other architectures.  If unaligned
access is not enabled then words in packed data structures will be
accessed a byte at a time.
</p>
<p>The ARM attribute <code>Tag_CPU_unaligned_access</code> will be set in the
generated object file to either true or false, depending upon the
setting of this option.  If unaligned access is enabled then the
preprocessor symbol <code>__ARM_FEATURE_UNALIGNED</code> will also be
defined.
</p>
</dd>
</dl>

<hr>
<div class="header">
<p>
Next: <a href="AVR-Options.html#AVR-Options" accesskey="n" rel="next">AVR Options</a>, Previous: <a href="Adapteva-Epiphany-Options.html#Adapteva-Epiphany-Options" accesskey="p" rel="prev">Adapteva Epiphany Options</a>, Up: <a href="Submodel-Options.html#Submodel-Options" accesskey="u" rel="up">Submodel Options</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="Option-Index.html#Option-Index" title="Index" rel="index">Index</a>]</p>
</div>
d297 1
d299 1
a300 2
</body>
</html>
@

