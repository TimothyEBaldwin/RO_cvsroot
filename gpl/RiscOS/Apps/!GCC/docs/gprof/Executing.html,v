head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.06;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.06;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.03;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Executing - GNU gprof</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="GNU gprof">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="prev" href="Compiling.html#Compiling" title="Compiling">
<link rel="next" href="Invoking.html#Invoking" title="Invoking">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
This file documents the gprof profiler of the GNU system.

Copyright (C) 1988, 1992, 1997, 1998, 1999, 2000, 2001, 2003,
2007, 2008, 2009 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Executing"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Invoking.html#Invoking">Invoking</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Compiling.html#Compiling">Compiling</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="index.html#Top">Top</a>
<hr>
</div>

<h2 class="chapter">3 Executing the Program</h2>

<p>Once the program is compiled for profiling, you must run it in order to
generate the information that <code>gprof</code> needs.  Simply run the program
as usual, using the normal arguments, file names, etc.  The program should
run normally, producing the same output as usual.  It will, however, run
somewhat slower than normal because of the time spent collecting and
writing the profile data.

   <p>The way you run the program&mdash;the arguments and input that you give
it&mdash;may have a dramatic effect on what the profile information shows.  The
profile data will describe the parts of the program that were activated for
the particular input you use.  For example, if the first command you give
to your program is to quit, the profile data will show the time used in
initialization and in cleanup, but not much else.

   <p>Your program will write the profile data into a file called <samp><span class="file">gmon.out</span></samp>
just before exiting.  If there is already a file called <samp><span class="file">gmon.out</span></samp>,
its contents are overwritten.  There is currently no way to tell the
program to write the profile data under a different name, but you can rename
the file afterwards if you are concerned that it may be overwritten.

   <p>In order to write the <samp><span class="file">gmon.out</span></samp> file properly, your program must exit
normally: by returning from <code>main</code> or by calling <code>exit</code>.  Calling
the low-level function <code>_exit</code> does not write the profile data, and
neither does abnormal termination due to an unhandled signal.

   <p>The <samp><span class="file">gmon.out</span></samp> file is written in the program's <em>current working
directory</em> at the time it exits.  This means that if your program calls
<code>chdir</code>, the <samp><span class="file">gmon.out</span></samp> file will be left in the last directory
your program <code>chdir</code>'d to.  If you don't have permission to write in
this directory, the file is not written, and you will get an error message.

   <p>Older versions of the <span class="sc">gnu</span> profiling library may also write a file
called <samp><span class="file">bb.out</span></samp>.  This file, if present, contains an human-readable
listing of the basic-block execution counts.  Unfortunately, the
appearance of a human-readable <samp><span class="file">bb.out</span></samp> means the basic-block
counts didn't get written into <samp><span class="file">gmon.out</span></samp>. 
The Perl script <code>bbconv.pl</code>, included with the <code>gprof</code>
source distribution, will convert a <samp><span class="file">bb.out</span></samp> file into
a format readable by <code>gprof</code>.  Invoke it like this:

<pre class="smallexample">     bbconv.pl &lt; bb.out &gt; <var>bh-data</var>
</pre>
   <p>This translates the information in <samp><span class="file">bb.out</span></samp> into a form that
<code>gprof</code> can understand.  But you still need to tell <code>gprof</code>
about the existence of this translated information.  To do that, include
<var>bb-data</var> on the <code>gprof</code> command line, <em>along with
</em><samp><span class="file">gmon.out</span></samp>, like this:

<pre class="smallexample">     gprof <var>options</var> <var>executable-file</var> gmon.out <var>bb-data</var> [<var>yet-more-profile-data-files</var>...] [&gt; <var>outfile</var>]
</pre>
   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 12
a12 3
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- This file documents the gprof profiler of the GNU system.
d22 1
a22 5
section entitled "GNU Free Documentation License".
 -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>GNU gprof: Executing</title>
a23 37
<meta name="description" content="GNU gprof: Executing">
<meta name="keywords" content="GNU gprof: Executing">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="index.html#Top" rel="up" title="Top">
<link href="Invoking.html#Invoking" rel="next" title="Invoking">
<link href="Compiling.html#Compiling" rel="prev" title="Compiling">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d25 12
a36 3
</style>


d38 2
a39 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a40 1
<div class="header">
d42 4
a45 1
Next: <a href="Invoking.html#Invoking" accesskey="n" rel="next">Invoking</a>, Previous: <a href="Compiling.html#Compiling" accesskey="p" rel="prev">Compiling</a>, Up: <a href="index.html#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>]</p>
d47 1
a47 2
<hr>
<a name="Executing-the-Program"></a>
d56 2
a57 2
</p>
<p>The way you run the program&mdash;the arguments and input that you give
d63 3
a65 3
</p>
<p>Your program will write the profile data into a file called <samp>gmon.out</samp>
just before exiting.  If there is already a file called <samp>gmon.out</samp>,
d69 2
a70 2
</p>
<p>In order to write the <samp>gmon.out</samp> file properly, your program must exit
d74 2
a75 2
</p>
<p>The <samp>gmon.out</samp> file is written in the program&rsquo;s <em>current working
d77 2
a78 2
<code>chdir</code>, the <samp>gmon.out</samp> file will be left in the last directory
your program <code>chdir</code>&rsquo;d to.  If you don&rsquo;t have permission to write in
d80 3
a82 3
</p>
<p>Older versions of the <small>GNU</small> profiling library may also write a file
called <samp>bb.out</samp>.  This file, if present, contains an human-readable
d84 2
a85 2
appearance of a human-readable <samp>bb.out</samp> means the basic-block
counts didn&rsquo;t get written into <samp>gmon.out</samp>.
d87 1
a87 1
source distribution, will convert a <samp>bb.out</samp> file into
a88 4
</p>
<div class="smallexample">
<pre class="smallexample">bbconv.pl &lt; bb.out &gt; <var>bh-data</var>
</pre></div>
d90 3
a92 1
<p>This translates the information in <samp>bb.out</samp> into a form that
d96 1
a96 12
<samp>gmon.out</samp></em>, like this:
</p>
<div class="smallexample">
<pre class="smallexample">gprof <var>options</var> <var>executable-file</var> gmon.out <var>bb-data</var> [<var>yet-more-profile-data-files</var>&hellip;] [&gt; <var>outfile</var>]
</pre></div>

<hr>
<div class="header">
<p>
Next: <a href="Invoking.html#Invoking" accesskey="n" rel="next">Invoking</a>, Previous: <a href="Compiling.html#Compiling" accesskey="p" rel="prev">Compiling</a>, Up: <a href="index.html#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>]</p>
</div>

d98 3
a101 2
</body>
</html>
@

