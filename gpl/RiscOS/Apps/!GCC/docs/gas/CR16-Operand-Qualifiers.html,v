head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.11;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.11;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.12;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>CR16 Operand Qualifiers - Using as</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using as">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="CR16_002dDependent.html#CR16_002dDependent" title="CR16-Dependent">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
This file documents the GNU Assembler "as".

Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
2000, 2001, 2002, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="CR16-Operand-Qualifiers"></a>
<p>
Up:&nbsp;<a rel="up" accesskey="u" href="CR16_002dDependent.html#CR16_002dDependent">CR16-Dependent</a>
<hr>
</div>

<h4 class="subsection">9.6.1 CR16 Operand Qualifiers</h4>

<p><a name="index-CR16-Operand-Qualifiers-693"></a>
The National Semiconductor CR16 target of <code>as</code> has a few machine dependent operand qualifiers.

   <p>Operand expression type qualifier is an optional field in the instruction operand, to determines the type of the expression field of an operand. The <code>@@</code> is required. CR16 architecture uses one of the following expression qualifiers:

     <dl>
<dt><code>s</code><dd>- <code>Specifies expression operand type as small</code>
<br><dt><code>m</code><dd>- <code>Specifies expression operand type as medium</code>
<br><dt><code>l</code><dd>- <code>Specifies expression operand type as large</code>
<br><dt><code>c</code><dd>- <code>Specifies the CR16 Assembler generates a relocation entry for the operand, where pc has implied bit, the expression is adjusted accordingly. The linker uses the relocation entry to update the operand address at link time.</code>
<br><dt><code>got/GOT</code><dd>- <code>Specifies the CR16 Assembler generates a relocation entry for the operand, offset from Global Offset Table. The linker uses this relocation entry to update the operand address at link time</code>
<br><dt><code>cgot/cGOT</code><dd>- <code>Specifies the CompactRISC Assembler generates a relocation entry for the operand, where pc has implied bit, the expression is adjusted accordingly. The linker uses the relocation entry to update the operand address at link time.</code>
</dl>

   <p>CR16 target operand qualifiers and its size (in bits):

     <dl>
<dt>&lsquo;<samp><span class="samp">Immediate Operand</span></samp>&rsquo;<dd>- s &mdash;&ndash; 4 bits
<br><dt>&lsquo;<samp></samp>&rsquo;<dd>- m &mdash;&ndash; 16 bits, for movb and movw instructions. 
<br><dt>&lsquo;<samp></samp>&rsquo;<dd>- m &mdash;&ndash; 20 bits, movd instructions. 
<br><dt>&lsquo;<samp></samp>&rsquo;<dd>- l &mdash;&ndash; 32 bits

     <br><dt>&lsquo;<samp><span class="samp">Absolute Operand</span></samp>&rsquo;<dd>- s &mdash;&ndash; Illegal specifier for this operand. 
<br><dt>&lsquo;<samp></samp>&rsquo;<dd>- m &mdash;&ndash; 20 bits, movd instructions.

     <br><dt>&lsquo;<samp><span class="samp">Displacement Operand</span></samp>&rsquo;<dd>- s &mdash;&ndash; 8 bits
<br><dt>&lsquo;<samp></samp>&rsquo;<dd>- m &mdash;&ndash; 16 bits
<br><dt>&lsquo;<samp></samp>&rsquo;<dd>- l &mdash;&ndash; 24 bits
</dl>

   <p>For example:
<pre class="example">     1   <code>movw $_myfun@@c,r1</code>
     
         This loads the address of _myfun, shifted right by 1, into r1.
     
     2   <code>movd $_myfun@@c,(r2,r1)</code>
     
         This loads the address of _myfun, shifted right by 1, into register-pair r2-r1.
     
     3   <code>_myfun_ptr:</code>
         <code>.long _myfun@@c</code>
         <code>loadd _myfun_ptr, (r1,r0)</code>
         <code>jal (r1,r0)</code>
     
         This .long directive, the address of _myfunc, shifted right by 1 at link time.
     
     4   <code>loadd  _data1@@GOT(r12), (r1,r0)</code>
     
         This loads the address of _data1, into global offset table (ie GOT) and its offset value from GOT loads into register-pair r2-r1.
     
     5   <code>loadd  _myfunc@@cGOT(r12), (r1,r0)</code>
     
         This loads the address of _myfun, shifted right by 1, into global offset table (ie GOT) and its offset value from GOT loads into register-pair r1-r0.
</pre>
   <!-- Copyright 2002, 2004 Free Software Foundation, Inc. -->
<!-- This is part of the GAS manual. -->
<!-- For copying conditions, see the file as.texinfo. -->
<!-- CRIS description contributed by Axis Communications. -->
   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 11
a11 3
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- This file documents the GNU Assembler "as".
d13 2
a14 1
Copyright (C) 1991-2013 Free Software Foundation, Inc.
d21 1
a21 5
section entitled "GNU Free Documentation License".
 -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using as: CR16 Operand Qualifiers</title>
a22 38
<meta name="description" content="Using as: CR16 Operand Qualifiers">
<meta name="keywords" content="Using as: CR16 Operand Qualifiers">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="AS-Index.html#AS-Index" rel="index" title="AS Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="CR16_002dDependent.html#CR16_002dDependent" rel="up" title="CR16-Dependent">
<link href="CR16-Syntax.html#CR16-Syntax" rel="next" title="CR16 Syntax">
<link href="CR16_002dDependent.html#CR16_002dDependent" rel="prev" title="CR16-Dependent">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d24 12
a35 3
</style>


d37 2
a38 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a39 1
<div class="header">
d41 2
a42 1
Next: <a href="CR16-Syntax.html#CR16-Syntax" accesskey="n" rel="next">CR16 Syntax</a>, Up: <a href="CR16_002dDependent.html#CR16_002dDependent" accesskey="u" rel="up">CR16-Dependent</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="AS-Index.html#AS-Index" title="Index" rel="index">Index</a>]</p>
a43 29
<hr>
<a name="CR16-Operand-Qualifiers-1"></a>
<h4 class="subsection">9.7.1 CR16 Operand Qualifiers</h4>
<a name="index-CR16-Operand-Qualifiers"></a>

<p>The National Semiconductor CR16 target of <code>as</code> has a few machine dependent operand qualifiers.
</p>
<p>Operand expression type qualifier is an optional field in the instruction operand, to determines the type of the expression field of an operand. The <code>@@</code> is required. CR16 architecture uses one of the following expression qualifiers:
</p>
<dl compact="compact">
<dt><code>s</code></dt>
<dd><p>- <code>Specifies expression operand type as small</code>
</p></dd>
<dt><code>m</code></dt>
<dd><p>- <code>Specifies expression operand type as medium</code>
</p></dd>
<dt><code>l</code></dt>
<dd><p>- <code>Specifies expression operand type as large</code>
</p></dd>
<dt><code>c</code></dt>
<dd><p>- <code>Specifies the CR16 Assembler generates a relocation entry for the operand, where pc has implied bit, the expression is adjusted accordingly. The linker uses the relocation entry to update the operand address at link time.</code>
</p></dd>
<dt><code>got/GOT</code></dt>
<dd><p>- <code>Specifies the CR16 Assembler generates a relocation entry for the operand, offset from Global Offset Table. The linker uses this relocation entry to update the operand address at link time</code>
</p></dd>
<dt><code>cgot/cGOT</code></dt>
<dd><p>- <code>Specifies the CompactRISC Assembler generates a relocation entry for the operand, where pc has implied bit, the expression is adjusted accordingly. The linker uses the relocation entry to update the operand address at link time.</code>
</p></dd>
</dl>
d45 1
a45 40
<p>CR16 target operand qualifiers and its size (in bits):
</p>
<dl compact="compact">
<dt>&lsquo;<samp>Immediate Operand: s</samp>&rsquo;</dt>
<dd><p>4 bits.
</p>
</dd>
<dt>&lsquo;<samp>Immediate Operand: m</samp>&rsquo;</dt>
<dd><p>16 bits, for movb and movw instructions.
</p>
</dd>
<dt>&lsquo;<samp>Immediate Operand: m</samp>&rsquo;</dt>
<dd><p>20 bits, movd instructions.
</p>
</dd>
<dt>&lsquo;<samp>Immediate Operand: l</samp>&rsquo;</dt>
<dd><p>32 bits.
</p>
</dd>
<dt>&lsquo;<samp>Absolute Operand: s</samp>&rsquo;</dt>
<dd><p>Illegal specifier for this operand.
</p>
</dd>
<dt>&lsquo;<samp>Absolute Operand: m</samp>&rsquo;</dt>
<dd><p>20 bits, movd instructions.
</p>
</dd>
<dt>&lsquo;<samp>Displacement Operand: s</samp>&rsquo;</dt>
<dd><p>8 bits.
</p>
</dd>
<dt>&lsquo;<samp>Displacement Operand: m</samp>&rsquo;</dt>
<dd><p>16 bits.
</p>
</dd>
<dt>&lsquo;<samp>Displacement Operand: l</samp>&rsquo;</dt>
<dd><p>24 bits.
</p>
</dd>
</dl>
d47 2
a48 3
<p>For example:
</p><div class="example">
<pre class="example">1   <code>movw $_myfun@@c,r1</code>
d50 1
a50 1
    This loads the address of _myfun, shifted right by 1, into r1.
d52 8
a59 1
2   <code>movd $_myfun@@c,(r2,r1)</code>
d61 1
a61 23
    This loads the address of _myfun, shifted right by 1, into register-pair r2-r1.

3   <code>_myfun_ptr:</code>
    <code>.long _myfun@@c</code>
    <code>loadd _myfun_ptr, (r1,r0)</code>
    <code>jal (r1,r0)</code>

    This .long directive, the address of _myfunc, shifted right by 1 at link time.

4   <code>loadd  _data1@@GOT(r12), (r1,r0)</code>

    This loads the address of _data1, into global offset table (ie GOT) and its offset value from GOT loads into register-pair r2-r1.

5   <code>loadd  _myfunc@@cGOT(r12), (r1,r0)</code>

    This loads the address of _myfun, shifted right by 1, into global offset table (ie GOT) and its offset value from GOT loads into register-pair r1-r0.
</pre></div>

<hr>
<div class="header">
<p>
Next: <a href="CR16-Syntax.html#CR16-Syntax" accesskey="n" rel="next">CR16 Syntax</a>, Up: <a href="CR16_002dDependent.html#CR16_002dDependent" accesskey="u" rel="up">CR16-Dependent</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="AS-Index.html#AS-Index" title="Index" rel="index">Index</a>]</p>
</div>
d63 13
d77 29
a106 2
</body>
</html>
@

