head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.11;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.11;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.11;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>i386-Mnemonics - Using as</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using as">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="i386_002dDependent.html#i386_002dDependent" title="i386-Dependent">
<link rel="prev" href="i386_002dSyntax.html#i386_002dSyntax" title="i386-Syntax">
<link rel="next" href="i386_002dRegs.html#i386_002dRegs" title="i386-Regs">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
This file documents the GNU Assembler "as".

Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
2000, 2001, 2002, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="i386-Mnemonics"></a>
<a name="i386_002dMnemonics"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="i386_002dRegs.html#i386_002dRegs">i386-Regs</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="i386_002dSyntax.html#i386_002dSyntax">i386-Syntax</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="i386_002dDependent.html#i386_002dDependent">i386-Dependent</a>
<hr>
</div>

<h4 class="subsection">9.13.4 Instruction Naming</h4>

<p><a name="index-i386-instruction-naming-915"></a><a name="index-instruction-naming_002c-i386-916"></a><a name="index-x86_002d64-instruction-naming-917"></a><a name="index-instruction-naming_002c-x86_002d64-918"></a>
Instruction mnemonics are suffixed with one character modifiers which
specify the size of operands.  The letters &lsquo;<samp><span class="samp">b</span></samp>&rsquo;, &lsquo;<samp><span class="samp">w</span></samp>&rsquo;, &lsquo;<samp><span class="samp">l</span></samp>&rsquo;
and &lsquo;<samp><span class="samp">q</span></samp>&rsquo; specify byte, word, long and quadruple word operands.  If
no suffix is specified by an instruction then <code>as</code> tries to
fill in the missing suffix based on the destination register operand
(the last one by convention).  Thus, &lsquo;<samp><span class="samp">mov %ax, %bx</span></samp>&rsquo; is equivalent
to &lsquo;<samp><span class="samp">movw %ax, %bx</span></samp>&rsquo;; also, &lsquo;<samp><span class="samp">mov $1, %bx</span></samp>&rsquo; is equivalent to
&lsquo;<samp><span class="samp">movw $1, bx</span></samp>&rsquo;.  Note that this is incompatible with the AT&amp;T Unix
assembler which assumes that a missing mnemonic suffix implies long
operand size.  (This incompatibility does not affect compiler output
since compilers always explicitly specify the mnemonic suffix.)

   <p>Almost all instructions have the same names in AT&amp;T and Intel format. 
There are a few exceptions.  The sign extend and zero extend
instructions need two sizes to specify them.  They need a size to
sign/zero extend <em>from</em> and a size to zero extend <em>to</em>.  This
is accomplished by using two instruction mnemonic suffixes in AT&amp;T
syntax.  Base names for sign extend and zero extend are
&lsquo;<samp><span class="samp">movs...</span></samp>&rsquo; and &lsquo;<samp><span class="samp">movz...</span></samp>&rsquo; in AT&amp;T syntax (&lsquo;<samp><span class="samp">movsx</span></samp>&rsquo;
and &lsquo;<samp><span class="samp">movzx</span></samp>&rsquo; in Intel syntax).  The instruction mnemonic suffixes
are tacked on to this base name, the <em>from</em> suffix before the
<em>to</em> suffix.  Thus, &lsquo;<samp><span class="samp">movsbl %al, %edx</span></samp>&rsquo; is AT&amp;T syntax for
&ldquo;move sign extend <em>from</em> %al <em>to</em> %edx.&rdquo;  Possible suffixes,
thus, are &lsquo;<samp><span class="samp">bl</span></samp>&rsquo; (from byte to long), &lsquo;<samp><span class="samp">bw</span></samp>&rsquo; (from byte to word),
&lsquo;<samp><span class="samp">wl</span></samp>&rsquo; (from word to long), &lsquo;<samp><span class="samp">bq</span></samp>&rsquo; (from byte to quadruple word),
&lsquo;<samp><span class="samp">wq</span></samp>&rsquo; (from word to quadruple word), and &lsquo;<samp><span class="samp">lq</span></samp>&rsquo; (from long to
quadruple word).

   <p><a name="index-encoding-options_002c-i386-919"></a><a name="index-encoding-options_002c-x86_002d64-920"></a>
Different encoding options can be specified via optional mnemonic
suffix.  &lsquo;<samp><span class="samp">.s</span></samp>&rsquo; suffix swaps 2 register operands in encoding when
moving from one register to another.  &lsquo;<samp><span class="samp">.d32</span></samp>&rsquo; suffix forces 32bit
displacement in encoding.

   <p><a name="index-conversion-instructions_002c-i386-921"></a><a name="index-i386-conversion-instructions-922"></a><a name="index-conversion-instructions_002c-x86_002d64-923"></a><a name="index-x86_002d64-conversion-instructions-924"></a>The Intel-syntax conversion instructions

     <ul>
<li>&lsquo;<samp><span class="samp">cbw</span></samp>&rsquo; &mdash; sign-extend byte in &lsquo;<samp><span class="samp">%al</span></samp>&rsquo; to word in &lsquo;<samp><span class="samp">%ax</span></samp>&rsquo;,

     <li>&lsquo;<samp><span class="samp">cwde</span></samp>&rsquo; &mdash; sign-extend word in &lsquo;<samp><span class="samp">%ax</span></samp>&rsquo; to long in &lsquo;<samp><span class="samp">%eax</span></samp>&rsquo;,

     <li>&lsquo;<samp><span class="samp">cwd</span></samp>&rsquo; &mdash; sign-extend word in &lsquo;<samp><span class="samp">%ax</span></samp>&rsquo; to long in &lsquo;<samp><span class="samp">%dx:%ax</span></samp>&rsquo;,

     <li>&lsquo;<samp><span class="samp">cdq</span></samp>&rsquo; &mdash; sign-extend dword in &lsquo;<samp><span class="samp">%eax</span></samp>&rsquo; to quad in &lsquo;<samp><span class="samp">%edx:%eax</span></samp>&rsquo;,

     <li>&lsquo;<samp><span class="samp">cdqe</span></samp>&rsquo; &mdash; sign-extend dword in &lsquo;<samp><span class="samp">%eax</span></samp>&rsquo; to quad in &lsquo;<samp><span class="samp">%rax</span></samp>&rsquo;
(x86-64 only),

     <li>&lsquo;<samp><span class="samp">cqo</span></samp>&rsquo; &mdash; sign-extend quad in &lsquo;<samp><span class="samp">%rax</span></samp>&rsquo; to octuple in
&lsquo;<samp><span class="samp">%rdx:%rax</span></samp>&rsquo; (x86-64 only),
</ul>

<p class="noindent">are called &lsquo;<samp><span class="samp">cbtw</span></samp>&rsquo;, &lsquo;<samp><span class="samp">cwtl</span></samp>&rsquo;, &lsquo;<samp><span class="samp">cwtd</span></samp>&rsquo;, &lsquo;<samp><span class="samp">cltd</span></samp>&rsquo;, &lsquo;<samp><span class="samp">cltq</span></samp>&rsquo;, and
&lsquo;<samp><span class="samp">cqto</span></samp>&rsquo; in AT&amp;T naming.  <code>as</code> accepts either naming for these
instructions.

   <p><a name="index-jump-instructions_002c-i386-925"></a><a name="index-call-instructions_002c-i386-926"></a><a name="index-jump-instructions_002c-x86_002d64-927"></a><a name="index-call-instructions_002c-x86_002d64-928"></a>Far call/jump instructions are &lsquo;<samp><span class="samp">lcall</span></samp>&rsquo; and &lsquo;<samp><span class="samp">ljmp</span></samp>&rsquo; in
AT&amp;T syntax, but are &lsquo;<samp><span class="samp">call far</span></samp>&rsquo; and &lsquo;<samp><span class="samp">jump far</span></samp>&rsquo; in Intel
convention.

<h4 class="subsection">9.13.5 AT&amp;T Mnemonic versus Intel Mnemonic</h4>

<p><a name="index-i386-mnemonic-compatibility-929"></a><a name="index-mnemonic-compatibility_002c-i386-930"></a>
<code>as</code> supports assembly using Intel mnemonic. 
<code>.intel_mnemonic</code> selects Intel mnemonic with Intel syntax, and
<code>.att_mnemonic</code> switches back to the usual AT&amp;T mnemonic with AT&amp;T
syntax for compatibility with the output of <code>gcc</code>. 
Several x87 instructions, &lsquo;<samp><span class="samp">fadd</span></samp>&rsquo;, &lsquo;<samp><span class="samp">fdiv</span></samp>&rsquo;, &lsquo;<samp><span class="samp">fdivp</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">fdivr</span></samp>&rsquo;, &lsquo;<samp><span class="samp">fdivrp</span></samp>&rsquo;, &lsquo;<samp><span class="samp">fmul</span></samp>&rsquo;, &lsquo;<samp><span class="samp">fsub</span></samp>&rsquo;, &lsquo;<samp><span class="samp">fsubp</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">fsubr</span></samp>&rsquo; and &lsquo;<samp><span class="samp">fsubrp</span></samp>&rsquo;,  are implemented in AT&amp;T System V/386
assembler with different mnemonics from those in Intel IA32 specification. 
<code>gcc</code> generates those instructions with AT&amp;T mnemonic.

   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 13
a13 3
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- This file documents the GNU Assembler "as".
d15 2
a16 1
Copyright (C) 1991-2013 Free Software Foundation, Inc.
d23 1
a23 5
section entitled "GNU Free Documentation License".
 -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using as: i386-Mnemonics</title>
a24 38
<meta name="description" content="Using as: i386-Mnemonics">
<meta name="keywords" content="Using as: i386-Mnemonics">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="AS-Index.html#AS-Index" rel="index" title="AS Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="i386_002dDependent.html#i386_002dDependent" rel="up" title="i386-Dependent">
<link href="i386_002dRegs.html#i386_002dRegs" rel="next" title="i386-Regs">
<link href="i386_002dChars.html#i386_002dChars" rel="prev" title="i386-Chars">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d26 12
a37 3
</style>


d39 3
a41 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a42 1
<div class="header">
d44 4
a47 1
Next: <a href="i386_002dRegs.html#i386_002dRegs" accesskey="n" rel="next">i386-Regs</a>, Previous: <a href="i386_002dSyntax.html#i386_002dSyntax" accesskey="p" rel="prev">i386-Syntax</a>, Up: <a href="i386_002dDependent.html#i386_002dDependent" accesskey="u" rel="up">i386-Dependent</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="AS-Index.html#AS-Index" title="Index" rel="index">Index</a>]</p>
a48 3
<hr>
<a name="Instruction-Naming"></a>
<h4 class="subsection">9.15.4 Instruction Naming</h4>
d50 6
a55 8
<a name="index-i386-instruction-naming"></a>
<a name="index-instruction-naming_002c-i386"></a>
<a name="index-x86_002d64-instruction-naming"></a>
<a name="index-instruction-naming_002c-x86_002d64"></a>

<p>Instruction mnemonics are suffixed with one character modifiers which
specify the size of operands.  The letters &lsquo;<samp>b</samp>&rsquo;, &lsquo;<samp>w</samp>&rsquo;, &lsquo;<samp>l</samp>&rsquo;
and &lsquo;<samp>q</samp>&rsquo; specify byte, word, long and quadruple word operands.  If
d58 3
a60 3
(the last one by convention).  Thus, &lsquo;<samp>mov %ax, %bx</samp>&rsquo; is equivalent
to &lsquo;<samp>movw %ax, %bx</samp>&rsquo;; also, &lsquo;<samp>mov $1, %bx</samp>&rsquo; is equivalent to
&lsquo;<samp>movw $1, bx</samp>&rsquo;.  Note that this is incompatible with the AT&amp;T Unix
d64 2
a65 2
</p>
<p>Almost all instructions have the same names in AT&amp;T and Intel format.
d71 2
a72 2
&lsquo;<samp>movs&hellip;</samp>&rsquo; and &lsquo;<samp>movz&hellip;</samp>&rsquo; in AT&amp;T syntax (&lsquo;<samp>movsx</samp>&rsquo;
and &lsquo;<samp>movzx</samp>&rsquo; in Intel syntax).  The instruction mnemonic suffixes
d74 1
a74 1
<em>to</em> suffix.  Thus, &lsquo;<samp>movsbl %al, %edx</samp>&rsquo; is AT&amp;T syntax for
d76 3
a78 3
thus, are &lsquo;<samp>bl</samp>&rsquo; (from byte to long), &lsquo;<samp>bw</samp>&rsquo; (from byte to word),
&lsquo;<samp>wl</samp>&rsquo; (from word to long), &lsquo;<samp>bq</samp>&rsquo; (from byte to quadruple word),
&lsquo;<samp>wq</samp>&rsquo; (from word to quadruple word), and &lsquo;<samp>lq</samp>&rsquo; (from long to
a79 17
</p>
<a name="index-encoding-options_002c-i386"></a>
<a name="index-encoding-options_002c-x86_002d64"></a>

<p>Different encoding options can be specified via optional mnemonic
suffix.  &lsquo;<samp>.s</samp>&rsquo; suffix swaps 2 register operands in encoding when
moving from one register to another.  &lsquo;<samp>.d8</samp>&rsquo; or &lsquo;<samp>.d32</samp>&rsquo; suffix
prefers 8bit or 32bit displacement in encoding.
</p>
<a name="index-conversion-instructions_002c-i386"></a>
<a name="index-i386-conversion-instructions"></a>
<a name="index-conversion-instructions_002c-x86_002d64"></a>
<a name="index-x86_002d64-conversion-instructions"></a>
<p>The Intel-syntax conversion instructions
</p>
<ul>
<li> &lsquo;<samp>cbw</samp>&rsquo; &mdash; sign-extend byte in &lsquo;<samp>%al</samp>&rsquo; to word in &lsquo;<samp>%ax</samp>&rsquo;,
d81 10
a90 1
</li><li> &lsquo;<samp>cwde</samp>&rsquo; &mdash; sign-extend word in &lsquo;<samp>%ax</samp>&rsquo; to long in &lsquo;<samp>%eax</samp>&rsquo;,
d92 1
a92 1
</li><li> &lsquo;<samp>cwd</samp>&rsquo; &mdash; sign-extend word in &lsquo;<samp>%ax</samp>&rsquo; to long in &lsquo;<samp>%dx:%ax</samp>&rsquo;,
d94 1
a94 1
</li><li> &lsquo;<samp>cdq</samp>&rsquo; &mdash; sign-extend dword in &lsquo;<samp>%eax</samp>&rsquo; to quad in &lsquo;<samp>%edx:%eax</samp>&rsquo;,
d96 3
a98 1
</li><li> &lsquo;<samp>cdqe</samp>&rsquo; &mdash; sign-extend dword in &lsquo;<samp>%eax</samp>&rsquo; to quad in &lsquo;<samp>%rax</samp>&rsquo;
d101 3
a103 3
</li><li> &lsquo;<samp>cqo</samp>&rsquo; &mdash; sign-extend quad in &lsquo;<samp>%rax</samp>&rsquo; to octuple in
&lsquo;<samp>%rdx:%rax</samp>&rsquo; (x86-64 only),
</li></ul>
d105 2
a106 2
<p>are called &lsquo;<samp>cbtw</samp>&rsquo;, &lsquo;<samp>cwtl</samp>&rsquo;, &lsquo;<samp>cwtd</samp>&rsquo;, &lsquo;<samp>cltd</samp>&rsquo;, &lsquo;<samp>cltq</samp>&rsquo;, and
&lsquo;<samp>cqto</samp>&rsquo; in AT&amp;T naming.  <code>as</code> accepts either naming for these
d108 3
a110 7
</p>
<a name="index-jump-instructions_002c-i386"></a>
<a name="index-call-instructions_002c-i386"></a>
<a name="index-jump-instructions_002c-x86_002d64"></a>
<a name="index-call-instructions_002c-x86_002d64"></a>
<p>Far call/jump instructions are &lsquo;<samp>lcall</samp>&rsquo; and &lsquo;<samp>ljmp</samp>&rsquo; in
AT&amp;T syntax, but are &lsquo;<samp>call far</samp>&rsquo; and &lsquo;<samp>jump far</samp>&rsquo; in Intel
a111 3
</p>
<a name="AT_0026T-Mnemonic-versus-Intel-Mnemonic"></a>
<h4 class="subsection">9.15.5 AT&amp;T Mnemonic versus Intel Mnemonic</h4>
d113 1
a113 2
<a name="index-i386-mnemonic-compatibility"></a>
<a name="index-mnemonic-compatibility_002c-i386"></a>
d115 2
a116 1
<p><code>as</code> supports assembly using Intel mnemonic.
d119 5
a123 5
syntax for compatibility with the output of <code>gcc</code>.
Several x87 instructions, &lsquo;<samp>fadd</samp>&rsquo;, &lsquo;<samp>fdiv</samp>&rsquo;, &lsquo;<samp>fdivp</samp>&rsquo;,
&lsquo;<samp>fdivr</samp>&rsquo;, &lsquo;<samp>fdivrp</samp>&rsquo;, &lsquo;<samp>fmul</samp>&rsquo;, &lsquo;<samp>fsub</samp>&rsquo;, &lsquo;<samp>fsubp</samp>&rsquo;,
&lsquo;<samp>fsubr</samp>&rsquo; and &lsquo;<samp>fsubrp</samp>&rsquo;,  are implemented in AT&amp;T System V/386
assembler with different mnemonics from those in Intel IA32 specification.
a124 7
</p>
<hr>
<div class="header">
<p>
Next: <a href="i386_002dRegs.html#i386_002dRegs" accesskey="n" rel="next">i386-Regs</a>, Previous: <a href="i386_002dSyntax.html#i386_002dSyntax" accesskey="p" rel="prev">i386-Syntax</a>, Up: <a href="i386_002dDependent.html#i386_002dDependent" accesskey="u" rel="up">i386-Dependent</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="AS-Index.html#AS-Index" title="Index" rel="index">Index</a>]</p>
</div>

d126 1
a127 2
</body>
</html>
@

