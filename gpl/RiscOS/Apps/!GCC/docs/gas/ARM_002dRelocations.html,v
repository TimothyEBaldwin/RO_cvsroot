head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.13;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.13;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.14;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>ARM-Relocations - Using as</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using as">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="ARM-Syntax.html#ARM-Syntax" title="ARM Syntax">
<link rel="prev" href="ARM_002dRegs.html#ARM_002dRegs" title="ARM-Regs">
<link rel="next" href="ARM_002dNeon_002dAlignment.html#ARM_002dNeon_002dAlignment" title="ARM-Neon-Alignment">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
This file documents the GNU Assembler "as".

Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
2000, 2001, 2002, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="ARM-Relocations"></a>
<a name="ARM_002dRelocations"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="ARM_002dNeon_002dAlignment.html#ARM_002dNeon_002dAlignment">ARM-Neon-Alignment</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="ARM_002dRegs.html#ARM_002dRegs">ARM-Regs</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="ARM-Syntax.html#ARM-Syntax">ARM Syntax</a>
<hr>
</div>

<h5 class="subsubsection">9.3.3.1 ARM relocation generation</h5>

<p><a name="index-data-relocations_002c-ARM-604"></a><a name="index-ARM-data-relocations-605"></a>Specific data relocations can be generated by putting the relocation name
in parentheses after the symbol name.  For example:

<pre class="smallexample">             .word foo(TARGET1)
</pre>
   <p>This will generate an &lsquo;<samp><span class="samp">R_ARM_TARGET1</span></samp>&rsquo; relocation against the symbol
<var>foo</var>. 
The following relocations are supported:
<code>GOT</code>,
<code>GOTOFF</code>,
<code>TARGET1</code>,
<code>TARGET2</code>,
<code>SBREL</code>,
<code>TLSGD</code>,
<code>TLSLDM</code>,
<code>TLSLDO</code>,
<code>GOTTPOFF</code>,
<code>GOT_PREL</code>
and
<code>TPOFF</code>.

   <p>For compatibility with older toolchains the assembler also accepts
<code>(PLT)</code> after branch targets.  This will generate the deprecated
&lsquo;<samp><span class="samp">R_ARM_PLT32</span></samp>&rsquo; relocation.

   <p><a name="index-MOVW-and-MOVT-relocations_002c-ARM-606"></a>Relocations for &lsquo;<samp><span class="samp">MOVW</span></samp>&rsquo; and &lsquo;<samp><span class="samp">MOVT</span></samp>&rsquo; instructions can be generated
by prefixing the value with &lsquo;<samp><span class="samp">#:lower16:</span></samp>&rsquo; and &lsquo;<samp><span class="samp">#:upper16</span></samp>&rsquo;
respectively.  For example to load the 32-bit address of foo into r0:

<pre class="smallexample">             MOVW r0, #:lower16:foo
             MOVT r0, #:upper16:foo
</pre>
   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 13
a13 3
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- This file documents the GNU Assembler "as".
d15 2
a16 1
Copyright (C) 1991-2013 Free Software Foundation, Inc.
d23 1
a23 5
section entitled "GNU Free Documentation License".
 -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using as: ARM-Relocations</title>
a24 38
<meta name="description" content="Using as: ARM-Relocations">
<meta name="keywords" content="Using as: ARM-Relocations">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="AS-Index.html#AS-Index" rel="index" title="AS Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="ARM-Syntax.html#ARM-Syntax" rel="up" title="ARM Syntax">
<link href="ARM_002dNeon_002dAlignment.html#ARM_002dNeon_002dAlignment" rel="next" title="ARM-Neon-Alignment">
<link href="ARM_002dRegs.html#ARM_002dRegs" rel="prev" title="ARM-Regs">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d26 12
a37 3
</style>


d39 3
a41 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a42 1
<div class="header">
d44 4
a47 1
Next: <a href="ARM_002dNeon_002dAlignment.html#ARM_002dNeon_002dAlignment" accesskey="n" rel="next">ARM-Neon-Alignment</a>, Previous: <a href="ARM_002dRegs.html#ARM_002dRegs" accesskey="p" rel="prev">ARM-Regs</a>, Up: <a href="ARM-Syntax.html#ARM-Syntax" accesskey="u" rel="up">ARM Syntax</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="AS-Index.html#AS-Index" title="Index" rel="index">Index</a>]</p>
a48 3
<hr>
<a name="ARM-relocation-generation"></a>
<h4 class="subsubsection">9.4.2.4 ARM relocation generation</h4>
d50 3
a52 3
<a name="index-data-relocations_002c-ARM"></a>
<a name="index-ARM-data-relocations"></a>
<p>Specific data relocations can be generated by putting the relocation name
a53 4
</p>
<div class="smallexample">
<pre class="smallexample">        .word foo(TARGET1)
</pre></div>
d55 4
a58 2
<p>This will generate an &lsquo;<samp>R_ARM_TARGET1</samp>&rsquo; relocation against the symbol
<var>foo</var>.
a67 2
<code>TLSDESC</code>,
<code>TLSCALL</code>,
a71 16
</p>
<p>For compatibility with older toolchains the assembler also accepts
<code>(PLT)</code> after branch targets.  On legacy targets this will
generate the deprecated &lsquo;<samp>R_ARM_PLT32</samp>&rsquo; relocation.  On EABI
targets it will encode either the &lsquo;<samp>R_ARM_CALL</samp>&rsquo; or
&lsquo;<samp>R_ARM_JUMP24</samp>&rsquo; relocation, as appropriate.
</p>
<a name="index-MOVW-and-MOVT-relocations_002c-ARM"></a>
<p>Relocations for &lsquo;<samp>MOVW</samp>&rsquo; and &lsquo;<samp>MOVT</samp>&rsquo; instructions can be generated
by prefixing the value with &lsquo;<samp>#:lower16:</samp>&rsquo; and &lsquo;<samp>#:upper16</samp>&rsquo;
respectively.  For example to load the 32-bit address of foo into r0:
</p>
<div class="smallexample">
<pre class="smallexample">        MOVW r0, #:lower16:foo
        MOVT r0, #:upper16:foo
</pre></div>
d73 3
d77 3
d81 4
a85 2
</body>
</html>
@

