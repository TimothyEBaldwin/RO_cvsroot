head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.13;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.13;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.15;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>MSP430 Profiling Capability - Using as</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using as">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="MSP430_002dDependent.html#MSP430_002dDependent" title="MSP430-Dependent">
<link rel="prev" href="MSP430-Opcodes.html#MSP430-Opcodes" title="MSP430 Opcodes">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
This file documents the GNU Assembler "as".

Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
2000, 2001, 2002, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="MSP430-Profiling-Capability"></a>
<p>
Previous:&nbsp;<a rel="previous" accesskey="p" href="MSP430-Opcodes.html#MSP430-Opcodes">MSP430 Opcodes</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="MSP430_002dDependent.html#MSP430_002dDependent">MSP430-Dependent</a>
<hr>
</div>

<h4 class="subsection">9.26.6 Profiling Capability</h4>

<p><a name="index-MSP-430-profiling-capability-1400"></a><a name="index-profiling-capability-for-MSP-430-1401"></a>It is a performance hit to use gcc's profiling approach for this tiny target. 
Even more &ndash; jtag hardware facility does not perform any profiling functions. 
However we've got gdb's built-in simulator where we can do anything.

   <p>We define new section &lsquo;<samp><span class="samp">.profiler</span></samp>&rsquo; which holds all profiling information. 
We define new pseudo operation &lsquo;<samp><span class="samp">.profiler</span></samp>&rsquo; which will instruct assembler to
add new profile entry to the object file. Profile should take place at the
present address.

   <p>Pseudo operation format:

   <p>&lsquo;<samp><span class="samp">.profiler flags,function_to_profile [, cycle_corrector, extra]</span></samp>&rsquo;

   <p>where:

     <dl>
          <dl>
&lsquo;<samp><span class="samp">flags</span></samp>&rsquo; is a combination of the following characters:

          <dt><code>s</code><dd>function entry
<br><dt><code>x</code><dd>function exit
<br><dt><code>i</code><dd>function is in init section
<br><dt><code>f</code><dd>function is in fini section
<br><dt><code>l</code><dd>library call
<br><dt><code>c</code><dd>libc standard call
<br><dt><code>d</code><dd>stack value demand
<br><dt><code>I</code><dd>interrupt service routine
<br><dt><code>P</code><dd>prologue start
<br><dt><code>p</code><dd>prologue end
<br><dt><code>E</code><dd>epilogue start
<br><dt><code>e</code><dd>epilogue end
<br><dt><code>j</code><dd>long jump / sjlj unwind
<br><dt><code>a</code><dd>an arbitrary code fragment
<br><dt><code>t</code><dd>extra parameter saved (a constant value like frame size)
</dl>

     <br><dt><code>function_to_profile</code><dd>a function address
<br><dt><code>cycle_corrector</code><dd>a value which should be added to the cycle counter, zero if omitted. 
<br><dt><code>extra</code><dd>any extra parameter, zero if omitted.

   </dl>

   <p>For example:
<pre class="smallexample">     .global fxx
     .type fxx,@@function
     fxx:
     .LFrameOffset_fxx=0x08
     .profiler "scdP", fxx     ; function entry.
     			  ; we also demand stack value to be saved
       push r11
       push r10
       push r9
       push r8
     .profiler "cdpt",fxx,0, .LFrameOffset_fxx  ; check stack value at this point
     					  ; (this is a prologue end)
     					  ; note, that spare var filled with
     					  ; the farme size
       mov r15,r8
     ...
     .profiler cdE,fxx         ; check stack
       pop r8
       pop r9
       pop r10
       pop r11
     .profiler xcde,fxx,3      ; exit adds 3 to the cycle counter
       ret                     ; cause 'ret' insn takes 3 cycles
</pre>
   <!-- Copyright 2001, 2002, 2006 Free Software Foundation, Inc. -->
<!-- This is part of the GAS manual. -->
<!-- For copying conditions, see the file as.texinfo. -->
   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 12
a12 3
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- This file documents the GNU Assembler "as".
d14 2
a15 1
Copyright (C) 1991-2013 Free Software Foundation, Inc.
d22 1
a22 5
section entitled "GNU Free Documentation License".
 -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using as: MSP430 Profiling Capability</title>
a23 38
<meta name="description" content="Using as: MSP430 Profiling Capability">
<meta name="keywords" content="Using as: MSP430 Profiling Capability">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="AS-Index.html#AS-Index" rel="index" title="AS Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="MSP430_002dDependent.html#MSP430_002dDependent" rel="up" title="MSP430-Dependent">
<link href="NiosII_002dDependent.html#NiosII_002dDependent" rel="next" title="NiosII-Dependent">
<link href="MSP430-Opcodes.html#MSP430-Opcodes" rel="prev" title="MSP430 Opcodes">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d25 12
a36 3
</style>


d38 2
a39 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a40 1
<div class="header">
d42 3
a44 1
Previous: <a href="MSP430-Opcodes.html#MSP430-Opcodes" accesskey="p" rel="prev">MSP430 Opcodes</a>, Up: <a href="MSP430_002dDependent.html#MSP430_002dDependent" accesskey="u" rel="up">MSP430-Dependent</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="AS-Index.html#AS-Index" title="Index" rel="index">Index</a>]</p>
a45 3
<hr>
<a name="Profiling-Capability"></a>
<h4 class="subsection">9.29.6 Profiling Capability</h4>
d47 8
a54 8
<a name="index-MSP-430-profiling-capability"></a>
<a name="index-profiling-capability-for-MSP-430"></a>
<p>It is a performance hit to use gcc&rsquo;s profiling approach for this tiny target.
Even more &ndash; jtag hardware facility does not perform any profiling functions.
However we&rsquo;ve got gdb&rsquo;s built-in simulator where we can do anything.
</p>
<p>We define new section &lsquo;<samp>.profiler</samp>&rsquo; which holds all profiling information.
We define new pseudo operation &lsquo;<samp>.profiler</samp>&rsquo; which will instruct assembler to
a56 61
</p>
<p>Pseudo operation format:
</p>
<p>&lsquo;<samp>.profiler flags,function_to_profile [, cycle_corrector, extra]</samp>&rsquo;
</p>

<p>where:
</p>
<dl compact="compact">
<dd>
<dl compact="compact">
<dd>
<p>&lsquo;<samp>flags</samp>&rsquo; is a combination of the following characters:
</p>
</dd>
<dt><code>s</code></dt>
<dd><p>function entry
</p></dd>
<dt><code>x</code></dt>
<dd><p>function exit
</p></dd>
<dt><code>i</code></dt>
<dd><p>function is in init section
</p></dd>
<dt><code>f</code></dt>
<dd><p>function is in fini section
</p></dd>
<dt><code>l</code></dt>
<dd><p>library call
</p></dd>
<dt><code>c</code></dt>
<dd><p>libc standard call
</p></dd>
<dt><code>d</code></dt>
<dd><p>stack value demand
</p></dd>
<dt><code>I</code></dt>
<dd><p>interrupt service routine
</p></dd>
<dt><code>P</code></dt>
<dd><p>prologue start
</p></dd>
<dt><code>p</code></dt>
<dd><p>prologue end
</p></dd>
<dt><code>E</code></dt>
<dd><p>epilogue start
</p></dd>
<dt><code>e</code></dt>
<dd><p>epilogue end
</p></dd>
<dt><code>j</code></dt>
<dd><p>long jump / sjlj unwind
</p></dd>
<dt><code>a</code></dt>
<dd><p>an arbitrary code fragment
</p></dd>
<dt><code>t</code></dt>
<dd><p>extra parameter saved (a constant value like frame size)
</p></dd>
</dl>
d58 1
a58 12
</dd>
<dt><code>function_to_profile</code></dt>
<dd><p>a function address
</p></dd>
<dt><code>cycle_corrector</code></dt>
<dd><p>a value which should be added to the cycle counter, zero if omitted.
</p></dd>
<dt><code>extra</code></dt>
<dd><p>any extra parameter, zero if omitted.
</p>
</dd>
</dl>
d60 1
a60 26
<p>For example:
</p><div class="smallexample">
<pre class="smallexample">.global fxx
.type fxx,@@function
fxx:
.LFrameOffset_fxx=0x08
.profiler &quot;scdP&quot;, fxx     ; function entry.
			  ; we also demand stack value to be saved
  push r11
  push r10
  push r9
  push r8
.profiler &quot;cdpt&quot;,fxx,0, .LFrameOffset_fxx  ; check stack value at this point
					  ; (this is a prologue end)
					  ; note, that spare var filled with
					  ; the farme size
  mov r15,r8
...
.profiler cdE,fxx         ; check stack
  pop r8
  pop r9
  pop r10
  pop r11
.profiler xcde,fxx,3      ; exit adds 3 to the cycle counter
  ret                     ; cause 'ret' insn takes 3 cycles
</pre></div>
d62 1
a62 5
<hr>
<div class="header">
<p>
Previous: <a href="MSP430-Opcodes.html#MSP430-Opcodes" accesskey="p" rel="prev">MSP430 Opcodes</a>, Up: <a href="MSP430_002dDependent.html#MSP430_002dDependent" accesskey="u" rel="up">MSP430-Dependent</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="AS-Index.html#AS-Index" title="Index" rel="index">Index</a>]</p>
</div>
d64 20
d85 35
a120 2
</body>
</html>
@

