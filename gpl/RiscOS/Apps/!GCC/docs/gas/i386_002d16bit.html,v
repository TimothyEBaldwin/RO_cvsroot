head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.14;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.14;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.16;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>i386-16bit - Using as</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using as">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="i386_002dDependent.html#i386_002dDependent" title="i386-Dependent">
<link rel="prev" href="i386_002dLWP.html#i386_002dLWP" title="i386-LWP">
<link rel="next" href="i386_002dArch.html#i386_002dArch" title="i386-Arch">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
This file documents the GNU Assembler "as".

Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
2000, 2001, 2002, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="i386-16bit"></a>
<a name="i386_002d16bit"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="i386_002dArch.html#i386_002dArch">i386-Arch</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="i386_002dLWP.html#i386_002dLWP">i386-LWP</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="i386_002dDependent.html#i386_002dDependent">i386-Dependent</a>
<hr>
</div>

<h4 class="subsection">9.13.13 Writing 16-bit Code</h4>

<p><a name="index-i386-16_002dbit-code-981"></a><a name="index-g_t16_002dbit-code_002c-i386-982"></a><a name="index-real_002dmode-code_002c-i386-983"></a><a name="index-g_t_0040code_007bcode16gcc_007d-directive_002c-i386-984"></a><a name="index-g_t_0040code_007bcode16_007d-directive_002c-i386-985"></a><a name="index-g_t_0040code_007bcode32_007d-directive_002c-i386-986"></a><a name="index-g_t_0040code_007bcode64_007d-directive_002c-i386-987"></a><a name="index-g_t_0040code_007bcode64_007d-directive_002c-x86_002d64-988"></a>While <code>as</code> normally writes only &ldquo;pure&rdquo; 32-bit i386 code
or 64-bit x86-64 code depending on the default configuration,
it also supports writing code to run in real mode or in 16-bit protected
mode code segments.  To do this, put a &lsquo;<samp><span class="samp">.code16</span></samp>&rsquo; or
&lsquo;<samp><span class="samp">.code16gcc</span></samp>&rsquo; directive before the assembly language instructions to
be run in 16-bit mode.  You can switch <code>as</code> to writing
32-bit code with the &lsquo;<samp><span class="samp">.code32</span></samp>&rsquo; directive or 64-bit code with the
&lsquo;<samp><span class="samp">.code64</span></samp>&rsquo; directive.

   <p>&lsquo;<samp><span class="samp">.code16gcc</span></samp>&rsquo; provides experimental support for generating 16-bit
code from gcc, and differs from &lsquo;<samp><span class="samp">.code16</span></samp>&rsquo; in that &lsquo;<samp><span class="samp">call</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">ret</span></samp>&rsquo;, &lsquo;<samp><span class="samp">enter</span></samp>&rsquo;, &lsquo;<samp><span class="samp">leave</span></samp>&rsquo;, &lsquo;<samp><span class="samp">push</span></samp>&rsquo;, &lsquo;<samp><span class="samp">pop</span></samp>&rsquo;,
&lsquo;<samp><span class="samp">pusha</span></samp>&rsquo;, &lsquo;<samp><span class="samp">popa</span></samp>&rsquo;, &lsquo;<samp><span class="samp">pushf</span></samp>&rsquo;, and &lsquo;<samp><span class="samp">popf</span></samp>&rsquo; instructions
default to 32-bit size.  This is so that the stack pointer is
manipulated in the same way over function calls, allowing access to
function parameters at the same stack offsets as in 32-bit mode. 
&lsquo;<samp><span class="samp">.code16gcc</span></samp>&rsquo; also automatically adds address size prefixes where
necessary to use the 32-bit addressing modes that gcc generates.

   <p>The code which <code>as</code> generates in 16-bit mode will not
necessarily run on a 16-bit pre-80386 processor.  To write code that
runs on such a processor, you must refrain from using <em>any</em> 32-bit
constructs which require <code>as</code> to output address or operand
size prefixes.

   <p>Note that writing 16-bit code instructions by explicitly specifying a
prefix or an instruction mnemonic suffix within a 32-bit code section
generates different machine instructions than those generated for a
16-bit code segment.  In a 32-bit code section, the following code
generates the machine opcode bytes &lsquo;<samp><span class="samp">66 6a 04</span></samp>&rsquo;, which pushes the
value &lsquo;<samp><span class="samp">4</span></samp>&rsquo; onto the stack, decrementing &lsquo;<samp><span class="samp">%esp</span></samp>&rsquo; by 2.

<pre class="smallexample">             pushw $4
</pre>
   <p>The same code in a 16-bit code section would generate the machine
opcode bytes &lsquo;<samp><span class="samp">6a 04</span></samp>&rsquo; (i.e., without the operand size prefix), which
is correct since the processor default operand size is assumed to be 16
bits in a 16-bit code section.

   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 13
a13 3
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- This file documents the GNU Assembler "as".
d15 2
a16 1
Copyright (C) 1991-2013 Free Software Foundation, Inc.
d23 1
a23 5
section entitled "GNU Free Documentation License".
 -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using as: i386-16bit</title>
a24 38
<meta name="description" content="Using as: i386-16bit">
<meta name="keywords" content="Using as: i386-16bit">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="AS-Index.html#AS-Index" rel="index" title="AS Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="i386_002dDependent.html#i386_002dDependent" rel="up" title="i386-Dependent">
<link href="i386_002dBugs.html#i386_002dBugs" rel="next" title="i386-Bugs">
<link href="i386_002dTBM.html#i386_002dTBM" rel="prev" title="i386-TBM">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d26 12
a37 3
</style>


d39 3
a41 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a42 1
<div class="header">
d44 4
a47 1
Next: <a href="i386_002dBugs.html#i386_002dBugs" accesskey="n" rel="next">i386-Bugs</a>, Previous: <a href="i386_002dTBM.html#i386_002dTBM" accesskey="p" rel="prev">i386-TBM</a>, Up: <a href="i386_002dDependent.html#i386_002dDependent" accesskey="u" rel="up">i386-Dependent</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="AS-Index.html#AS-Index" title="Index" rel="index">Index</a>]</p>
a48 3
<hr>
<a name="Writing-16_002dbit-Code"></a>
<h4 class="subsection">9.15.15 Writing 16-bit Code</h4>
d50 3
a52 9
<a name="index-i386-16_002dbit-code"></a>
<a name="index-16_002dbit-code_002c-i386"></a>
<a name="index-real_002dmode-code_002c-i386"></a>
<a name="index-code16gcc-directive_002c-i386"></a>
<a name="index-code16-directive_002c-i386"></a>
<a name="index-code32-directive_002c-i386"></a>
<a name="index-code64-directive_002c-i386"></a>
<a name="index-code64-directive_002c-x86_002d64"></a>
<p>While <code>as</code> normally writes only &ldquo;pure&rdquo; 32-bit i386 code
d55 2
a56 2
mode code segments.  To do this, put a &lsquo;<samp>.code16</samp>&rsquo; or
&lsquo;<samp>.code16gcc</samp>&rsquo; directive before the assembly language instructions to
d58 7
a64 7
32-bit code with the &lsquo;<samp>.code32</samp>&rsquo; directive or 64-bit code with the
&lsquo;<samp>.code64</samp>&rsquo; directive.
</p>
<p>&lsquo;<samp>.code16gcc</samp>&rsquo; provides experimental support for generating 16-bit
code from gcc, and differs from &lsquo;<samp>.code16</samp>&rsquo; in that &lsquo;<samp>call</samp>&rsquo;,
&lsquo;<samp>ret</samp>&rsquo;, &lsquo;<samp>enter</samp>&rsquo;, &lsquo;<samp>leave</samp>&rsquo;, &lsquo;<samp>push</samp>&rsquo;, &lsquo;<samp>pop</samp>&rsquo;,
&lsquo;<samp>pusha</samp>&rsquo;, &lsquo;<samp>popa</samp>&rsquo;, &lsquo;<samp>pushf</samp>&rsquo;, and &lsquo;<samp>popf</samp>&rsquo; instructions
d67 2
a68 2
function parameters at the same stack offsets as in 32-bit mode.
&lsquo;<samp>.code16gcc</samp>&rsquo; also automatically adds address size prefixes where
d70 2
a71 2
</p>
<p>The code which <code>as</code> generates in 16-bit mode will not
d76 2
a77 2
</p>
<p>Note that writing 16-bit code instructions by explicitly specifying a
d81 2
a82 6
generates the machine opcode bytes &lsquo;<samp>66 6a 04</samp>&rsquo;, which pushes the
value &lsquo;<samp>4</samp>&rsquo; onto the stack, decrementing &lsquo;<samp>%esp</samp>&rsquo; by 2.
</p>
<div class="smallexample">
<pre class="smallexample">        pushw $4
</pre></div>
d84 4
a87 2
<p>The same code in a 16-bit code section would generate the machine
opcode bytes &lsquo;<samp>6a 04</samp>&rsquo; (i.e., without the operand size prefix), which
a89 7
</p>
<hr>
<div class="header">
<p>
Next: <a href="i386_002dBugs.html#i386_002dBugs" accesskey="n" rel="next">i386-Bugs</a>, Previous: <a href="i386_002dTBM.html#i386_002dTBM" accesskey="p" rel="prev">i386-TBM</a>, Up: <a href="i386_002dDependent.html#i386_002dDependent" accesskey="u" rel="up">i386-Dependent</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="AS-Index.html#AS-Index" title="Index" rel="index">Index</a>]</p>
</div>

d91 1
a92 2
</body>
</html>
@

