head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.11;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.11;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.12;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>s390 Mnemonics - Using as</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using as">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="s390-Syntax.html#s390-Syntax" title="s390 Syntax">
<link rel="prev" href="s390-Register.html#s390-Register" title="s390 Register">
<link rel="next" href="s390-Operands.html#s390-Operands" title="s390 Operands">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
This file documents the GNU Assembler "as".

Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
2000, 2001, 2002, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="s390-Mnemonics"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="s390-Operands.html#s390-Operands">s390 Operands</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="s390-Register.html#s390-Register">s390 Register</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="s390-Syntax.html#s390-Syntax">s390 Syntax</a>
<hr>
</div>

<h5 class="subsubsection">9.31.3.2 Instruction Mnemonics</h5>

<p><a name="index-instruction-mnemonics_002c-s390-1532"></a><a name="index-s390-instruction-mnemonics-1533"></a>
All instructions documented in the Principles of Operation are supported
with the mnemonic and order of operands as described. 
The instruction mnemonic identifies the instruction format
(<a href="s390-Formats.html#s390-Formats">s390 Formats</a>) and the specific operation code for the instruction. 
For example, the &lsquo;<samp><span class="samp">lr</span></samp>&rsquo; mnemonic denotes the instruction format &lsquo;<samp><span class="samp">RR</span></samp>&rsquo;
with the operation code &lsquo;<samp><span class="samp">0x18</span></samp>&rsquo;.

   <p>The definition of the various mnemonics follows a scheme, where the first
character usually hint at the type of the instruction:

<pre class="display">
     <p><table summary=""><tr align="left"><td valign="top">a </td><td valign="top">add instruction, for example &lsquo;<samp><span class="samp">al</span></samp>&rsquo; for add logical 32-bit
     <br></td></tr><tr align="left"><td valign="top">b </td><td valign="top">branch instruction, for example &lsquo;<samp><span class="samp">bc</span></samp>&rsquo; for branch on condition
     <br></td></tr><tr align="left"><td valign="top">c </td><td valign="top">compare or convert instruction, for example &lsquo;<samp><span class="samp">cr</span></samp>&rsquo; for compare
     register 32-bit
     <br></td></tr><tr align="left"><td valign="top">d </td><td valign="top">divide instruction, for example &lsquo;<samp><span class="samp">dlr</span></samp>&rsquo; devide logical register
     64-bit to 32-bit
     <br></td></tr><tr align="left"><td valign="top">i </td><td valign="top">insert instruction, for example &lsquo;<samp><span class="samp">ic</span></samp>&rsquo; insert character
     <br></td></tr><tr align="left"><td valign="top">l </td><td valign="top">load instruction, for example &lsquo;<samp><span class="samp">ltr</span></samp>&rsquo; load and test register
     <br></td></tr><tr align="left"><td valign="top">mv </td><td valign="top">move instruction, for example &lsquo;<samp><span class="samp">mvc</span></samp>&rsquo; move character
     <br></td></tr><tr align="left"><td valign="top">m </td><td valign="top">multiply instruction, for example &lsquo;<samp><span class="samp">mh</span></samp>&rsquo; multiply halfword
     <br></td></tr><tr align="left"><td valign="top">n </td><td valign="top">and instruction, for example &lsquo;<samp><span class="samp">ni</span></samp>&rsquo; and immediate
     <br></td></tr><tr align="left"><td valign="top">o </td><td valign="top">or instruction, for example &lsquo;<samp><span class="samp">oc</span></samp>&rsquo; or character
     <br></td></tr><tr align="left"><td valign="top">sla, sll </td><td valign="top">shift left single instruction
     <br></td></tr><tr align="left"><td valign="top">sra, srl </td><td valign="top">shift right single instruction
     <br></td></tr><tr align="left"><td valign="top">st </td><td valign="top">store instruction, for example &lsquo;<samp><span class="samp">stm</span></samp>&rsquo; store multiple
     <br></td></tr><tr align="left"><td valign="top">s </td><td valign="top">subtract instruction, for example &lsquo;<samp><span class="samp">slr</span></samp>&rsquo; subtract
     logical 32-bit
     <br></td></tr><tr align="left"><td valign="top">t </td><td valign="top">test or translate instruction, of example &lsquo;<samp><span class="samp">tm</span></samp>&rsquo; test under mask
     <br></td></tr><tr align="left"><td valign="top">x </td><td valign="top">exclusive or instruction, for example &lsquo;<samp><span class="samp">xc</span></samp>&rsquo; exclusive or
     character
     <br></td></tr></table>
</pre>
   <p>Certain characters at the end of the mnemonic may describe a property
of the instruction:

<pre class="display">
     <p><table summary=""><tr align="left"><td valign="top">c </td><td valign="top">the instruction uses a 8-bit character operand
     <br></td></tr><tr align="left"><td valign="top">f </td><td valign="top">the instruction extends a 32-bit operand to 64 bit
     <br></td></tr><tr align="left"><td valign="top">g </td><td valign="top">the operands are treated as 64-bit values
     <br></td></tr><tr align="left"><td valign="top">h </td><td valign="top">the operand uses a 16-bit halfword operand
     <br></td></tr><tr align="left"><td valign="top">i </td><td valign="top">the instruction uses an immediate operand
     <br></td></tr><tr align="left"><td valign="top">l </td><td valign="top">the instruction uses unsigned, logical operands
     <br></td></tr><tr align="left"><td valign="top">m </td><td valign="top">the instruction uses a mask or operates on multiple values
     <br></td></tr><tr align="left"><td valign="top">r </td><td valign="top">if r is the last character, the instruction operates on registers
     <br></td></tr><tr align="left"><td valign="top">y </td><td valign="top">the instruction uses 20-bit displacements
     <br></td></tr></table>
</pre>
   <p>There are many exceptions to the scheme outlined in the above lists, in
particular for the priviledged instructions. For non-priviledged
instruction it works quite well, for example the instruction &lsquo;<samp><span class="samp">clgfr</span></samp>&rsquo;
c: compare instruction, l: unsigned operands, g: 64-bit operands,
f: 32- to 64-bit extension, r: register operands. The instruction compares
an 64-bit value in a register with the zero extended 32-bit value from
a second register. 
For a complete list of all mnemonics see appendix B in the Principles
of Operation.

   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 13
a13 3
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- This file documents the GNU Assembler "as".
d15 2
a16 1
Copyright (C) 1991-2013 Free Software Foundation, Inc.
d23 1
a23 5
section entitled "GNU Free Documentation License".
 -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using as: s390 Mnemonics</title>
a24 38
<meta name="description" content="Using as: s390 Mnemonics">
<meta name="keywords" content="Using as: s390 Mnemonics">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="AS-Index.html#AS-Index" rel="index" title="AS Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="s390-Syntax.html#s390-Syntax" rel="up" title="s390 Syntax">
<link href="s390-Operands.html#s390-Operands" rel="next" title="s390 Operands">
<link href="s390-Register.html#s390-Register" rel="prev" title="s390 Register">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d26 12
a37 3
</style>


d39 2
a40 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a41 1
<div class="header">
d43 4
a46 1
Next: <a href="s390-Operands.html#s390-Operands" accesskey="n" rel="next">s390 Operands</a>, Previous: <a href="s390-Register.html#s390-Register" accesskey="p" rel="prev">s390 Register</a>, Up: <a href="s390-Syntax.html#s390-Syntax" accesskey="u" rel="up">s390 Syntax</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="AS-Index.html#AS-Index" title="Index" rel="index">Index</a>]</p>
a47 5
<hr>
<a name="Instruction-Mnemonics"></a>
<h4 class="subsubsection">9.37.3.2 Instruction Mnemonics</h4>
<a name="index-instruction-mnemonics_002c-s390"></a>
<a name="index-s390-instruction-mnemonics"></a>
d49 5
a53 2
<p>All instructions documented in the Principles of Operation are supported
with the mnemonic and order of operands as described.
d55 5
a59 5
(<a href="s390-Formats.html#s390-Formats">s390 Formats</a>) and the specific operation code for the instruction.
For example, the &lsquo;<samp>lr</samp>&rsquo; mnemonic denotes the instruction format &lsquo;<samp>RR</samp>&rsquo;
with the operation code &lsquo;<samp>0x18</samp>&rsquo;.
</p>
<p>The definition of the various mnemonics follows a scheme, where the first
a60 25
</p>
<div class="display">
<table>
<tr><td><pre class="display">a</pre></td><td><pre class="display">add instruction, for example &lsquo;<samp>al</samp>&rsquo; for add logical 32-bit</pre></td></tr>
<tr><td><pre class="display">b</pre></td><td><pre class="display">branch instruction, for example &lsquo;<samp>bc</samp>&rsquo; for branch on condition</pre></td></tr>
<tr><td><pre class="display">c</pre></td><td><pre class="display">compare or convert instruction, for example &lsquo;<samp>cr</samp>&rsquo; for compare
register 32-bit</pre></td></tr>
<tr><td><pre class="display">d</pre></td><td><pre class="display">divide instruction, for example &lsquo;<samp>dlr</samp>&rsquo; devide logical register
64-bit to 32-bit</pre></td></tr>
<tr><td><pre class="display">i</pre></td><td><pre class="display">insert instruction, for example &lsquo;<samp>ic</samp>&rsquo; insert character</pre></td></tr>
<tr><td><pre class="display">l</pre></td><td><pre class="display">load instruction, for example &lsquo;<samp>ltr</samp>&rsquo; load and test register</pre></td></tr>
<tr><td><pre class="display">mv</pre></td><td><pre class="display">move instruction, for example &lsquo;<samp>mvc</samp>&rsquo; move character</pre></td></tr>
<tr><td><pre class="display">m</pre></td><td><pre class="display">multiply instruction, for example &lsquo;<samp>mh</samp>&rsquo; multiply halfword</pre></td></tr>
<tr><td><pre class="display">n</pre></td><td><pre class="display">and instruction, for example &lsquo;<samp>ni</samp>&rsquo; and immediate</pre></td></tr>
<tr><td><pre class="display">o</pre></td><td><pre class="display">or instruction, for example &lsquo;<samp>oc</samp>&rsquo; or character</pre></td></tr>
<tr><td><pre class="display">sla, sll</pre></td><td><pre class="display">shift left single instruction</pre></td></tr>
<tr><td><pre class="display">sra, srl</pre></td><td><pre class="display">shift right single instruction</pre></td></tr>
<tr><td><pre class="display">st</pre></td><td><pre class="display">store instruction, for example &lsquo;<samp>stm</samp>&rsquo; store multiple</pre></td></tr>
<tr><td><pre class="display">s</pre></td><td><pre class="display">subtract instruction, for example &lsquo;<samp>slr</samp>&rsquo; subtract
logical 32-bit</pre></td></tr>
<tr><td><pre class="display">t</pre></td><td><pre class="display">test or translate instruction, of example &lsquo;<samp>tm</samp>&rsquo; test under mask</pre></td></tr>
<tr><td><pre class="display">x</pre></td><td><pre class="display">exclusive or instruction, for example &lsquo;<samp>xc</samp>&rsquo; exclusive or
character</pre></td></tr>
</table>
</div>
d62 24
a85 1
<p>Certain characters at the end of the mnemonic may describe a property
a86 14
</p>
<div class="display">
<table>
<tr><td><pre class="display">c</pre></td><td><pre class="display">the instruction uses a 8-bit character operand</pre></td></tr>
<tr><td><pre class="display">f</pre></td><td><pre class="display">the instruction extends a 32-bit operand to 64 bit</pre></td></tr>
<tr><td><pre class="display">g</pre></td><td><pre class="display">the operands are treated as 64-bit values</pre></td></tr>
<tr><td><pre class="display">h</pre></td><td><pre class="display">the operand uses a 16-bit halfword operand</pre></td></tr>
<tr><td><pre class="display">i</pre></td><td><pre class="display">the instruction uses an immediate operand</pre></td></tr>
<tr><td><pre class="display">l</pre></td><td><pre class="display">the instruction uses unsigned, logical operands</pre></td></tr>
<tr><td><pre class="display">m</pre></td><td><pre class="display">the instruction uses a mask or operates on multiple values</pre></td></tr>
<tr><td><pre class="display">r</pre></td><td><pre class="display">if r is the last character, the instruction operates on registers</pre></td></tr>
<tr><td><pre class="display">y</pre></td><td><pre class="display">the instruction uses 20-bit displacements</pre></td></tr>
</table>
</div>
d88 13
a100 1
<p>There are many exceptions to the scheme outlined in the above lists, in
d102 1
a102 1
instruction it works quite well, for example the instruction &lsquo;<samp>clgfr</samp>&rsquo;
d106 1
a106 1
a second register.
a108 7
</p>
<hr>
<div class="header">
<p>
Next: <a href="s390-Operands.html#s390-Operands" accesskey="n" rel="next">s390 Operands</a>, Previous: <a href="s390-Register.html#s390-Register" accesskey="p" rel="prev">s390 Register</a>, Up: <a href="s390-Syntax.html#s390-Syntax" accesskey="u" rel="up">s390 Syntax</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="AS-Index.html#AS-Index" title="Index" rel="index">Index</a>]</p>
</div>

d110 1
a111 2
</body>
</html>
@

