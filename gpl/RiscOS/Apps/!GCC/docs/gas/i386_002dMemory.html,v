head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.10;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.10;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.10;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>i386-Memory - Using as</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Using as">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="i386_002dDependent.html#i386_002dDependent" title="i386-Dependent">
<link rel="prev" href="i386_002dPrefixes.html#i386_002dPrefixes" title="i386-Prefixes">
<link rel="next" href="i386_002dJumps.html#i386_002dJumps" title="i386-Jumps">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
This file documents the GNU Assembler "as".

Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
2000, 2001, 2002, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="i386-Memory"></a>
<a name="i386_002dMemory"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="i386_002dJumps.html#i386_002dJumps">i386-Jumps</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="i386_002dPrefixes.html#i386_002dPrefixes">i386-Prefixes</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="i386_002dDependent.html#i386_002dDependent">i386-Dependent</a>
<hr>
</div>

<h4 class="subsection">9.13.8 Memory References</h4>

<p><a name="index-i386-memory-references-945"></a><a name="index-memory-references_002c-i386-946"></a><a name="index-x86_002d64-memory-references-947"></a><a name="index-memory-references_002c-x86_002d64-948"></a>An Intel syntax indirect memory reference of the form

<pre class="smallexample">     <var>section</var>:[<var>base</var> + <var>index</var>*<var>scale</var> + <var>disp</var>]
</pre>
   <p class="noindent">is translated into the AT&amp;T syntax

<pre class="smallexample">     <var>section</var>:<var>disp</var>(<var>base</var>, <var>index</var>, <var>scale</var>)
</pre>
   <p class="noindent">where <var>base</var> and <var>index</var> are the optional 32-bit base and
index registers, <var>disp</var> is the optional displacement, and
<var>scale</var>, taking the values 1, 2, 4, and 8, multiplies <var>index</var>
to calculate the address of the operand.  If no <var>scale</var> is
specified, <var>scale</var> is taken to be 1.  <var>section</var> specifies the
optional section register for the memory operand, and may override the
default section register (see a 80386 manual for section register
defaults). Note that section overrides in AT&amp;T syntax <em>must</em>
be preceded by a &lsquo;<samp><span class="samp">%</span></samp>&rsquo;.  If you specify a section override which
coincides with the default section register, <code>as</code> does <em>not</em>
output any section register override prefixes to assemble the given
instruction.  Thus, section overrides can be specified to emphasize which
section register is used for a given memory operand.

   <p>Here are some examples of Intel and AT&amp;T style memory references:

     <dl>
<dt>AT&amp;T: &lsquo;<samp><span class="samp">-4(%ebp)</span></samp>&rsquo;, Intel:  &lsquo;<samp><span class="samp">[ebp - 4]</span></samp>&rsquo;<dd><var>base</var> is &lsquo;<samp><span class="samp">%ebp</span></samp>&rsquo;; <var>disp</var> is &lsquo;<samp><span class="samp">-4</span></samp>&rsquo;. <var>section</var> is
missing, and the default section is used (&lsquo;<samp><span class="samp">%ss</span></samp>&rsquo; for addressing with
&lsquo;<samp><span class="samp">%ebp</span></samp>&rsquo; as the base register).  <var>index</var>, <var>scale</var> are both missing.

     <br><dt>AT&amp;T: &lsquo;<samp><span class="samp">foo(,%eax,4)</span></samp>&rsquo;, Intel: &lsquo;<samp><span class="samp">[foo + eax*4]</span></samp>&rsquo;<dd><var>index</var> is &lsquo;<samp><span class="samp">%eax</span></samp>&rsquo; (scaled by a <var>scale</var> 4); <var>disp</var> is
&lsquo;<samp><span class="samp">foo</span></samp>&rsquo;.  All other fields are missing.  The section register here
defaults to &lsquo;<samp><span class="samp">%ds</span></samp>&rsquo;.

     <br><dt>AT&amp;T: &lsquo;<samp><span class="samp">foo(,1)</span></samp>&rsquo;; Intel &lsquo;<samp><span class="samp">[foo]</span></samp>&rsquo;<dd>This uses the value pointed to by &lsquo;<samp><span class="samp">foo</span></samp>&rsquo; as a memory operand. 
Note that <var>base</var> and <var>index</var> are both missing, but there is only
<em>one</em> &lsquo;<samp><span class="samp">,</span></samp>&rsquo;.  This is a syntactic exception.

     <br><dt>AT&amp;T: &lsquo;<samp><span class="samp">%gs:foo</span></samp>&rsquo;; Intel &lsquo;<samp><span class="samp">gs:foo</span></samp>&rsquo;<dd>This selects the contents of the variable &lsquo;<samp><span class="samp">foo</span></samp>&rsquo; with section
register <var>section</var> being &lsquo;<samp><span class="samp">%gs</span></samp>&rsquo;. 
</dl>

   <p>Absolute (as opposed to PC relative) call and jump operands must be
prefixed with &lsquo;<samp><span class="samp">*</span></samp>&rsquo;.  If no &lsquo;<samp><span class="samp">*</span></samp>&rsquo; is specified, <code>as</code>
always chooses PC relative addressing for jump/call labels.

   <p>Any instruction that has a memory operand, but no register operand,
<em>must</em> specify its size (byte, word, long, or quadruple) with an
instruction mnemonic suffix (&lsquo;<samp><span class="samp">b</span></samp>&rsquo;, &lsquo;<samp><span class="samp">w</span></samp>&rsquo;, &lsquo;<samp><span class="samp">l</span></samp>&rsquo; or &lsquo;<samp><span class="samp">q</span></samp>&rsquo;,
respectively).

   <p>The x86-64 architecture adds an RIP (instruction pointer relative)
addressing.  This addressing mode is specified by using &lsquo;<samp><span class="samp">rip</span></samp>&rsquo; as a
base register.  Only constant offsets are valid. For example:

     <dl>
<dt>AT&amp;T: &lsquo;<samp><span class="samp">1234(%rip)</span></samp>&rsquo;, Intel: &lsquo;<samp><span class="samp">[rip + 1234]</span></samp>&rsquo;<dd>Points to the address 1234 bytes past the end of the current
instruction.

     <br><dt>AT&amp;T: &lsquo;<samp><span class="samp">symbol(%rip)</span></samp>&rsquo;, Intel: &lsquo;<samp><span class="samp">[rip + symbol]</span></samp>&rsquo;<dd>Points to the <code>symbol</code> in RIP relative way, this is shorter than
the default absolute addressing. 
</dl>

   <p>Other addressing modes remain unchanged in x86-64 architecture, except
registers used are 64-bit instead of 32-bit.

   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 13
a13 3
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- This file documents the GNU Assembler "as".
d15 2
a16 1
Copyright (C) 1991-2013 Free Software Foundation, Inc.
d23 1
a23 5
section entitled "GNU Free Documentation License".
 -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Using as: i386-Memory</title>
a24 38
<meta name="description" content="Using as: i386-Memory">
<meta name="keywords" content="Using as: i386-Memory">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="AS-Index.html#AS-Index" rel="index" title="AS Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="i386_002dDependent.html#i386_002dDependent" rel="up" title="i386-Dependent">
<link href="i386_002dJumps.html#i386_002dJumps" rel="next" title="i386-Jumps">
<link href="i386_002dPrefixes.html#i386_002dPrefixes" rel="prev" title="i386-Prefixes">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
d26 12
a37 3
</style>


d39 3
a41 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a42 1
<div class="header">
d44 4
a47 1
Next: <a href="i386_002dJumps.html#i386_002dJumps" accesskey="n" rel="next">i386-Jumps</a>, Previous: <a href="i386_002dPrefixes.html#i386_002dPrefixes" accesskey="p" rel="prev">i386-Prefixes</a>, Up: <a href="i386_002dDependent.html#i386_002dDependent" accesskey="u" rel="up">i386-Dependent</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="AS-Index.html#AS-Index" title="Index" rel="index">Index</a>]</p>
a48 3
<hr>
<a name="Memory-References"></a>
<h4 class="subsection">9.15.8 Memory References</h4>
d50 7
a56 15
<a name="index-i386-memory-references"></a>
<a name="index-memory-references_002c-i386"></a>
<a name="index-x86_002d64-memory-references"></a>
<a name="index-memory-references_002c-x86_002d64"></a>
<p>An Intel syntax indirect memory reference of the form
</p>
<div class="smallexample">
<pre class="smallexample"><var>section</var>:[<var>base</var> + <var>index</var>*<var>scale</var> + <var>disp</var>]
</pre></div>

<p>is translated into the AT&amp;T syntax
</p>
<div class="smallexample">
<pre class="smallexample"><var>section</var>:<var>disp</var>(<var>base</var>, <var>index</var>, <var>scale</var>)
</pre></div>
d58 3
a60 1
<p>where <var>base</var> and <var>index</var> are the optional 32-bit base and
d68 1
a68 1
be preceded by a &lsquo;<samp>%</samp>&rsquo;.  If you specify a section override which
d73 13
a85 18
</p>
<p>Here are some examples of Intel and AT&amp;T style memory references:
</p>
<dl compact="compact">
<dt>AT&amp;T: &lsquo;<samp>-4(%ebp)</samp>&rsquo;, Intel:  &lsquo;<samp>[ebp - 4]</samp>&rsquo;</dt>
<dd><p><var>base</var> is &lsquo;<samp>%ebp</samp>&rsquo;; <var>disp</var> is &lsquo;<samp>-4</samp>&rsquo;. <var>section</var> is
missing, and the default section is used (&lsquo;<samp>%ss</samp>&rsquo; for addressing with
&lsquo;<samp>%ebp</samp>&rsquo; as the base register).  <var>index</var>, <var>scale</var> are both missing.
</p>
</dd>
<dt>AT&amp;T: &lsquo;<samp>foo(,%eax,4)</samp>&rsquo;, Intel: &lsquo;<samp>[foo + eax*4]</samp>&rsquo;</dt>
<dd><p><var>index</var> is &lsquo;<samp>%eax</samp>&rsquo; (scaled by a <var>scale</var> 4); <var>disp</var> is
&lsquo;<samp>foo</samp>&rsquo;.  All other fields are missing.  The section register here
defaults to &lsquo;<samp>%ds</samp>&rsquo;.
</p>
</dd>
<dt>AT&amp;T: &lsquo;<samp>foo(,1)</samp>&rsquo;; Intel &lsquo;<samp>[foo]</samp>&rsquo;</dt>
<dd><p>This uses the value pointed to by &lsquo;<samp>foo</samp>&rsquo; as a memory operand.
d87 4
a90 7
<em>one</em> &lsquo;<samp>,</samp>&rsquo;.  This is a syntactic exception.
</p>
</dd>
<dt>AT&amp;T: &lsquo;<samp>%gs:foo</samp>&rsquo;; Intel &lsquo;<samp>gs:foo</samp>&rsquo;</dt>
<dd><p>This selects the contents of the variable &lsquo;<samp>foo</samp>&rsquo; with section
register <var>section</var> being &lsquo;<samp>%gs</samp>&rsquo;.
</p></dd>
d93 2
a94 2
<p>Absolute (as opposed to PC relative) call and jump operands must be
prefixed with &lsquo;<samp>*</samp>&rsquo;.  If no &lsquo;<samp>*</samp>&rsquo; is specified, <code>as</code>
d96 2
a97 2
</p>
<p>Any instruction that has a memory operand, but no register operand,
d99 1
a99 1
instruction mnemonic suffix (&lsquo;<samp>b</samp>&rsquo;, &lsquo;<samp>w</samp>&rsquo;, &lsquo;<samp>l</samp>&rsquo; or &lsquo;<samp>q</samp>&rsquo;,
d101 3
a103 3
</p>
<p>The x86-64 architecture adds an RIP (instruction pointer relative)
addressing.  This addressing mode is specified by using &lsquo;<samp>rip</samp>&rsquo; as a
d105 3
a107 4
</p>
<dl compact="compact">
<dt>AT&amp;T: &lsquo;<samp>1234(%rip)</samp>&rsquo;, Intel: &lsquo;<samp>[rip + 1234]</samp>&rsquo;</dt>
<dd><p>Points to the address 1234 bytes past the end of the current
d109 3
a111 6
</p>
</dd>
<dt>AT&amp;T: &lsquo;<samp>symbol(%rip)</samp>&rsquo;, Intel: &lsquo;<samp>[rip + symbol]</samp>&rsquo;</dt>
<dd><p>Points to the <code>symbol</code> in RIP relative way, this is shorter than
the default absolute addressing.
</p></dd>
d114 1
a114 1
<p>Other addressing modes remain unchanged in x86-64 architecture, except
a115 7
</p>
<hr>
<div class="header">
<p>
Next: <a href="i386_002dJumps.html#i386_002dJumps" accesskey="n" rel="next">i386-Jumps</a>, Previous: <a href="i386_002dPrefixes.html#i386_002dPrefixes" accesskey="p" rel="prev">i386-Prefixes</a>, Up: <a href="i386_002dDependent.html#i386_002dDependent" accesskey="u" rel="up">i386-Dependent</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="AS-Index.html#AS-Index" title="Index" rel="index">Index</a>]</p>
</div>

d117 1
a118 2
</body>
</html>
@

