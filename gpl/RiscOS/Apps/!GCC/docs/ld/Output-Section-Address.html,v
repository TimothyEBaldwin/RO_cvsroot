head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.07;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.07;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.04;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>Output Section Address - Untitled</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Untitled">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="SECTIONS.html#SECTIONS" title="SECTIONS">
<link rel="prev" href="Output-Section-Name.html#Output-Section-Name" title="Output Section Name">
<link rel="next" href="Input-Section.html#Input-Section" title="Input Section">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
This file documents the GNU linker LD
(GCCSDK GCC 4.1.2 Release 1 Development)
version 2.21.

Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="Output-Section-Address"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Input-Section.html#Input-Section">Input Section</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Output-Section-Name.html#Output-Section-Name">Output Section Name</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="SECTIONS.html#SECTIONS">SECTIONS</a>
<hr>
</div>

<h4 class="subsection">3.6.3 Output Section Address</h4>

<p><a name="index-address_002c-section-392"></a><a name="index-section-address-393"></a>The <var>address</var> is an expression for the VMA (the virtual memory
address) of the output section.  This address is optional, but if it
is provided then the output address will be set exactly as specified.

   <p>If the output address is not specified then one will be chosen for the
section, based on the heuristic below.  This address will be adjusted
to fit the alignment requirement of the output section.  The
alignment requirement is the strictest alignment of any input section
contained within the output section.

   <p>The output section address heuristic is as follows:

     <ul>
<li>If an output memory <var>region</var> is set for the section then it
is added to this region and its address will be the next free address
in that region.

     <li>If the MEMORY command has been used to create a list of memory
regions then the first region which has attributes compatible with the
section is selected to contain it.  The section's output address will
be the next free address in that region; <a href="MEMORY.html#MEMORY">MEMORY</a>.

     <li>If no memory regions were specified, or none match the section then
the output address will be based on the current value of the location
counter. 
</ul>

<p class="noindent">For example:

<pre class="smallexample">     .text . : { *(.text) }
</pre>
   <p class="noindent">and

<pre class="smallexample">     .text : { *(.text) }
</pre>
   <p class="noindent">are subtly different.  The first will set the address of the
&lsquo;<samp><span class="samp">.text</span></samp>&rsquo; output section to the current value of the location
counter.  The second will set it to the current value of the location
counter aligned to the strictest alignment of any of the &lsquo;<samp><span class="samp">.text</span></samp>&rsquo;
input sections.

   <p>The <var>address</var> may be an arbitrary expression; <a href="Expressions.html#Expressions">Expressions</a>. 
For example, if you want to align the section on a 0x10 byte boundary,
so that the lowest four bits of the section address are zero, you could
do something like this:
<pre class="smallexample">     .text ALIGN(0x10) : { *(.text) }
</pre>
   <p class="noindent">This works because <code>ALIGN</code> returns the current location counter
aligned upward to the specified value.

   <p>Specifying <var>address</var> for a section will change the value of the
location counter, provided that the section is non-empty.  (Empty
sections are ignored).

   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 15
a15 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- This file documents the GNU linker LD
(GNU Binutils)
version 2.24.
d17 2
a18 1
Copyright (C) 1991-2013 Free Software Foundation, Inc.
d25 13
a37 47
section entitled "GNU Free Documentation License". -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>LD: Output Section Address</title>

<meta name="description" content="LD: Output Section Address">
<meta name="keywords" content="LD: Output Section Address">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="LD-Index.html#LD-Index" rel="index" title="LD Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="SECTIONS.html#SECTIONS" rel="up" title="SECTIONS">
<link href="Input-Section.html#Input-Section" rel="next" title="Input Section">
<link href="Output-Section-Name.html#Output-Section-Name" rel="prev" title="Output Section Name">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d39 2
a40 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a41 1
<div class="header">
d43 4
a46 1
Next: <a href="Input-Section.html#Input-Section" accesskey="n" rel="next">Input Section</a>, Previous: <a href="Output-Section-Name.html#Output-Section-Name" accesskey="p" rel="prev">Output Section Name</a>, Up: <a href="SECTIONS.html#SECTIONS" accesskey="u" rel="up">SECTIONS</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="LD-Index.html#LD-Index" title="Index" rel="index">Index</a>]</p>
d48 1
a48 2
<hr>
<a name="Output-Section-Address-1"></a>
d50 2
a51 3
<a name="index-address_002c-section"></a>
<a name="index-section-address"></a>
<p>The <var>address</var> is an expression for the VMA (the virtual memory
d54 2
a55 2
</p>
<p>If the output address is not specified then one will be chosen for the
d60 5
a64 5
</p>
<p>The output section address heuristic is as follows:
</p>
<ul>
<li> If an output memory <var>region</var> is set for the section then it
d68 1
a68 1
</li><li> If the MEMORY command has been used to create a list of memory
d70 1
a70 1
section is selected to contain it.  The section&rsquo;s output address will
d73 1
a73 1
</li><li> If no memory regions were specified, or none match the section then
d75 2
a76 2
counter.
</li></ul>
d78 1
a78 11
<p>For example:
</p>
<div class="smallexample">
<pre class="smallexample">.text . : { *(.text) }
</pre></div>

<p>and
</p>
<div class="smallexample">
<pre class="smallexample">.text : { *(.text) }
</pre></div>
d80 8
a87 2
<p>are subtly different.  The first will set the address of the
&lsquo;<samp>.text</samp>&rsquo; output section to the current value of the location
d89 1
a89 1
counter aligned to the strictest alignment of any of the &lsquo;<samp>.text</samp>&rsquo;
d91 2
a92 2
</p>
<p>The <var>address</var> may be an arbitrary expression; <a href="Expressions.html#Expressions">Expressions</a>.
d96 3
a98 4
</p><div class="smallexample">
<pre class="smallexample">.text ALIGN(0x10) : { *(.text) }
</pre></div>
<p>This works because <code>ALIGN</code> returns the current location counter
d100 2
a101 2
</p>
<p>Specifying <var>address</var> for a section will change the value of the
a103 7
</p>
<hr>
<div class="header">
<p>
Next: <a href="Input-Section.html#Input-Section" accesskey="n" rel="next">Input Section</a>, Previous: <a href="Output-Section-Name.html#Output-Section-Name" accesskey="p" rel="prev">Output Section Name</a>, Up: <a href="SECTIONS.html#SECTIONS" accesskey="u" rel="up">SECTIONS</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="LD-Index.html#LD-Index" title="Index" rel="index">Index</a>]</p>
</div>

d105 1
a106 2
</body>
</html>
@

