head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.2
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.07;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.07;	author jlee;	state Exp;
branches;
next	1.1.1.2;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.2
date	2017.04.15.15.12.05;	author jlee;	state Exp;
branches;
next	;
commitid	Kx60weqAWGeJSDNz;


desc
@@


1.1
log
@Initial revision
@
text
@<html lang="en">
<head>
<title>File Commands - Untitled</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name="description" content="Untitled">
<meta name="generator" content="makeinfo 4.13">
<link title="Top" rel="start" href="index.html#Top">
<link rel="up" href="Simple-Commands.html#Simple-Commands" title="Simple Commands">
<link rel="prev" href="Entry-Point.html#Entry-Point" title="Entry Point">
<link rel="next" href="Format-Commands.html#Format-Commands" title="Format Commands">
<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
<!--
This file documents the GNU linker LD
(GCCSDK GCC 4.1.2 Release 1 Development)
version 2.21.

Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.-->
<meta http-equiv="Content-Style-Type" content="text/css">
<style type="text/css"><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
</head>
<body>
<div class="node">
<a name="File-Commands"></a>
<p>
Next:&nbsp;<a rel="next" accesskey="n" href="Format-Commands.html#Format-Commands">Format Commands</a>,
Previous:&nbsp;<a rel="previous" accesskey="p" href="Entry-Point.html#Entry-Point">Entry Point</a>,
Up:&nbsp;<a rel="up" accesskey="u" href="Simple-Commands.html#Simple-Commands">Simple Commands</a>
<hr>
</div>

<h4 class="subsection">3.4.2 Commands Dealing with Files</h4>

<p><a name="index-linker-script-file-commands-344"></a>Several linker script commands deal with files.

     <dl>
<dt><code>INCLUDE </code><var>filename</var><dd><a name="index-INCLUDE-_0040var_007bfilename_007d-345"></a><a name="index-including-a-linker-script-346"></a>Include the linker script <var>filename</var> at this point.  The file will
be searched for in the current directory, and in any directory specified
with the <samp><span class="option">-L</span></samp> option.  You can nest calls to <code>INCLUDE</code> up to
10 levels deep.

     <p>You can place <code>INCLUDE</code> directives at the top level, in <code>MEMORY</code> or
<code>SECTIONS</code> commands, or in output section descriptions.

     <br><dt><code>INPUT(</code><var>file</var><code>, </code><var>file</var><code>, ...)</code><dt><code>INPUT(</code><var>file</var> <var>file</var><code> ...)</code><dd><a name="index-INPUT_0028_0040var_007bfiles_007d_0029-347"></a><a name="index-input-files-in-linker-scripts-348"></a><a name="index-input-object-files-in-linker-scripts-349"></a><a name="index-linker-script-input-object-files-350"></a>The <code>INPUT</code> command directs the linker to include the named files
in the link, as though they were named on the command line.

     <p>For example, if you always want to include <samp><span class="file">subr.o</span></samp> any time you do
a link, but you can't be bothered to put it on every link command line,
then you can put &lsquo;<samp><span class="samp">INPUT (subr.o)</span></samp>&rsquo; in your linker script.

     <p>In fact, if you like, you can list all of your input files in the linker
script, and then invoke the linker with nothing but a &lsquo;<samp><span class="samp">-T</span></samp>&rsquo; option.

     <p>In case a <dfn>sysroot prefix</dfn> is configured, and the filename starts
with the &lsquo;<samp><span class="samp">/</span></samp>&rsquo; character, and the script being processed was
located inside the <dfn>sysroot prefix</dfn>, the filename will be looked
for in the <dfn>sysroot prefix</dfn>.  Otherwise, the linker will try to
open the file in the current directory.  If it is not found, the
linker will search through the archive library search path.  See the
description of &lsquo;<samp><span class="samp">-L</span></samp>&rsquo; in <a href="Options.html#Options">Command Line Options</a>.

     <p>If you use &lsquo;<samp><span class="samp">INPUT (-l</span><var>file</var><span class="samp">)</span></samp>&rsquo;, <samp><span class="command">ld</span></samp> will transform the
name to <code>lib</code><var>file</var><code>.a</code>, as with the command line argument
&lsquo;<samp><span class="samp">-l</span></samp>&rsquo;.

     <p>When you use the <code>INPUT</code> command in an implicit linker script, the
files will be included in the link at the point at which the linker
script file is included.  This can affect archive searching.

     <br><dt><code>GROUP(</code><var>file</var><code>, </code><var>file</var><code>, ...)</code><dt><code>GROUP(</code><var>file</var> <var>file</var><code> ...)</code><dd><a name="index-GROUP_0028_0040var_007bfiles_007d_0029-351"></a><a name="index-grouping-input-files-352"></a>The <code>GROUP</code> command is like <code>INPUT</code>, except that the named
files should all be archives, and they are searched repeatedly until no
new undefined references are created.  See the description of &lsquo;<samp><span class="samp">-(</span></samp>&rsquo;
in <a href="Options.html#Options">Command Line Options</a>.

     <br><dt><code>AS_NEEDED(</code><var>file</var><code>, </code><var>file</var><code>, ...)</code><dt><code>AS_NEEDED(</code><var>file</var> <var>file</var><code> ...)</code><dd><a name="index-AS_005fNEEDED_0028_0040var_007bfiles_007d_0029-353"></a>This construct can appear only inside of the <code>INPUT</code> or <code>GROUP</code>
commands, among other filenames.  The files listed will be handled
as if they appear directly in the <code>INPUT</code> or <code>GROUP</code> commands,
with the exception of ELF shared libraries, that will be added only
when they are actually needed.  This construct essentially enables
<samp><span class="option">--as-needed</span></samp> option for all the files listed inside of it
and restores previous <samp><span class="option">--as-needed</span></samp> resp. <samp><span class="option">--no-as-needed</span></samp>
setting afterwards.

     <br><dt><code>OUTPUT(</code><var>filename</var><code>)</code><dd><a name="index-OUTPUT_0028_0040var_007bfilename_007d_0029-354"></a><a name="index-output-file-name-in-linker-script-355"></a>The <code>OUTPUT</code> command names the output file.  Using
<code>OUTPUT(</code><var>filename</var><code>)</code> in the linker script is exactly like using
&lsquo;<samp><span class="samp">-o </span><var>filename</var></samp>&rsquo; on the command line (see <a href="Options.html#Options">Command Line Options</a>).  If both are used, the command line option takes
precedence.

     <p>You can use the <code>OUTPUT</code> command to define a default name for the
output file other than the usual default of <samp><span class="file">a.out</span></samp>.

     <br><dt><code>SEARCH_DIR(</code><var>path</var><code>)</code><dd><a name="index-SEARCH_005fDIR_0028_0040var_007bpath_007d_0029-356"></a><a name="index-library-search-path-in-linker-script-357"></a><a name="index-archive-search-path-in-linker-script-358"></a><a name="index-search-path-in-linker-script-359"></a>The <code>SEARCH_DIR</code> command adds <var>path</var> to the list of paths where
<samp><span class="command">ld</span></samp> looks for archive libraries.  Using
<code>SEARCH_DIR(</code><var>path</var><code>)</code> is exactly like using &lsquo;<samp><span class="samp">-L </span><var>path</var></samp>&rsquo;
on the command line (see <a href="Options.html#Options">Command Line Options</a>).  If both
are used, then the linker will search both paths.  Paths specified using
the command line option are searched first.

     <br><dt><code>STARTUP(</code><var>filename</var><code>)</code><dd><a name="index-STARTUP_0028_0040var_007bfilename_007d_0029-360"></a><a name="index-first-input-file-361"></a>The <code>STARTUP</code> command is just like the <code>INPUT</code> command, except
that <var>filename</var> will become the first input file to be linked, as
though it were specified first on the command line.  This may be useful
when using a system in which the entry point is always the start of the
first file. 
</dl>

   </body></html>

@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@


1.1.1.2
log
@GCC 4.7.4 release 3
Detail:
  This is a copy of GCC 4.7.4 release 3, composed from the following packages available from riscos.info:
  * GCC4 4.7.4-Rel3-1
  Note that to avoid bloating CVS there's no C++ compiler this time, and some of the extraneous libraries (e.g. VFP/NEON optimised libs) have been deleted
Admin:
  Tagged as GCC-4_7_4_r3
@
text
@d1 15
a15 5
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- This file documents the GNU linker LD
(GNU Binutils)
version 2.24.
d17 2
a18 1
Copyright (C) 1991-2013 Free Software Foundation, Inc.
d25 13
a37 47
section entitled "GNU Free Documentation License". -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>LD: File Commands</title>

<meta name="description" content="LD: File Commands">
<meta name="keywords" content="LD: File Commands">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="index.html#Top" rel="start" title="Top">
<link href="LD-Index.html#LD-Index" rel="index" title="LD Index">
<link href="index.html#SEC_Contents" rel="contents" title="Table of Contents">
<link href="Simple-Commands.html#Simple-Commands" rel="up" title="Simple Commands">
<link href="Format-Commands.html#Format-Commands" rel="next" title="Format Commands">
<link href="Entry-Point.html#Entry-Point" rel="prev" title="Entry Point">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>


d39 2
a40 2

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
a41 1
<div class="header">
d43 4
a46 1
Next: <a href="Format-Commands.html#Format-Commands" accesskey="n" rel="next">Format Commands</a>, Previous: <a href="Entry-Point.html#Entry-Point" accesskey="p" rel="prev">Entry Point</a>, Up: <a href="Simple-Commands.html#Simple-Commands" accesskey="u" rel="up">Simple Commands</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="LD-Index.html#LD-Index" title="Index" rel="index">Index</a>]</p>
d48 1
a48 2
<hr>
<a name="Commands-Dealing-with-Files"></a>
d50 5
a54 8
<a name="index-linker-script-file-commands"></a>
<p>Several linker script commands deal with files.
</p>
<dl compact="compact">
<dt><code>INCLUDE <var>filename</var></code></dt>
<dd><a name="index-INCLUDE-filename"></a>
<a name="index-including-a-linker-script"></a>
<p>Include the linker script <var>filename</var> at this point.  The file will
d56 1
a56 1
with the <samp>-L</samp> option.  You can nest calls to <code>INCLUDE</code> up to
d58 2
a59 2
</p>
<p>You can place <code>INCLUDE</code> directives at the top level, in <code>MEMORY</code> or
d61 2
a62 9
</p>
</dd>
<dt><code>INPUT(<var>file</var>, <var>file</var>, &hellip;)</code></dt>
<dt><code>INPUT(<var>file</var> <var>file</var> &hellip;)</code></dt>
<dd><a name="index-INPUT_0028files_0029"></a>
<a name="index-input-files-in-linker-scripts"></a>
<a name="index-input-object-files-in-linker-scripts"></a>
<a name="index-linker-script-input-object-files"></a>
<p>The <code>INPUT</code> command directs the linker to include the named files
d64 12
a75 12
</p>
<p>For example, if you always want to include <samp>subr.o</samp> any time you do
a link, but you can&rsquo;t be bothered to put it on every link command line,
then you can put &lsquo;<samp>INPUT (subr.o)</samp>&rsquo; in your linker script.
</p>
<p>In fact, if you like, you can list all of your input files in the linker
script, and then invoke the linker with nothing but a &lsquo;<samp>-T</samp>&rsquo; option.
</p>
<p>In case a <em>sysroot prefix</em> is configured, and the filename starts
with the &lsquo;<samp>/</samp>&rsquo; character, and the script being processed was
located inside the <em>sysroot prefix</em>, the filename will be looked
for in the <em>sysroot prefix</em>.  Otherwise, the linker will try to
d78 7
a84 7
description of &lsquo;<samp>-L</samp>&rsquo; in <a href="Options.html#Options">Command Line Options</a>.
</p>
<p>If you use &lsquo;<samp>INPUT (-l<var>file</var>)</samp>&rsquo;, <code>ld</code> will transform the
name to <code>lib<var>file</var>.a</code>, as with the command line argument
&lsquo;<samp>-l</samp>&rsquo;.
</p>
<p>When you use the <code>INPUT</code> command in an implicit linker script, the
d87 2
a88 7
</p>
</dd>
<dt><code>GROUP(<var>file</var>, <var>file</var>, &hellip;)</code></dt>
<dt><code>GROUP(<var>file</var> <var>file</var> &hellip;)</code></dt>
<dd><a name="index-GROUP_0028files_0029"></a>
<a name="index-grouping-input-files"></a>
<p>The <code>GROUP</code> command is like <code>INPUT</code>, except that the named
d90 1
a90 1
new undefined references are created.  See the description of &lsquo;<samp>-(</samp>&rsquo;
d92 2
a93 6
</p>
</dd>
<dt><code>AS_NEEDED(<var>file</var>, <var>file</var>, &hellip;)</code></dt>
<dt><code>AS_NEEDED(<var>file</var> <var>file</var> &hellip;)</code></dt>
<dd><a name="index-AS_005fNEEDED_0028files_0029"></a>
<p>This construct can appear only inside of the <code>INPUT</code> or <code>GROUP</code>
d98 2
a99 2
<samp>--as-needed</samp> option for all the files listed inside of it
and restores previous <samp>--as-needed</samp> resp. <samp>--no-as-needed</samp>
d101 4
a104 9
</p>
</dd>
<dt><code>OUTPUT(<var>filename</var>)</code></dt>
<dd><a name="index-OUTPUT_0028filename_0029"></a>
<a name="index-output-file-name-in-linker-script"></a>
<p>The <code>OUTPUT</code> command names the output file.  Using
<code>OUTPUT(<var>filename</var>)</code> in the linker script is exactly like using
&lsquo;<samp>-o <var>filename</var></samp>&rsquo; on the command line (see <a href="Options.html#Options">Command
Line Options</a>).  If both are used, the command line option takes
d106 7
a112 13
</p>
<p>You can use the <code>OUTPUT</code> command to define a default name for the
output file other than the usual default of <samp>a.out</samp>.
</p>
</dd>
<dt><code>SEARCH_DIR(<var>path</var>)</code></dt>
<dd><a name="index-SEARCH_005fDIR_0028path_0029"></a>
<a name="index-library-search-path-in-linker-script"></a>
<a name="index-archive-search-path-in-linker-script"></a>
<a name="index-search-path-in-linker-script"></a>
<p>The <code>SEARCH_DIR</code> command adds <var>path</var> to the list of paths where
<code>ld</code> looks for archive libraries.  Using
<code>SEARCH_DIR(<var>path</var>)</code> is exactly like using &lsquo;<samp>-L <var>path</var></samp>&rsquo;
d116 2
a117 6
</p>
</dd>
<dt><code>STARTUP(<var>filename</var>)</code></dt>
<dd><a name="index-STARTUP_0028filename_0029"></a>
<a name="index-first-input-file"></a>
<p>The <code>STARTUP</code> command is just like the <code>INPUT</code> command, except
d121 1
a121 2
first file.
</p></dd>
d124 1
a124 7
<hr>
<div class="header">
<p>
Next: <a href="Format-Commands.html#Format-Commands" accesskey="n" rel="next">Format Commands</a>, Previous: <a href="Entry-Point.html#Entry-Point" accesskey="p" rel="prev">Entry Point</a>, Up: <a href="Simple-Commands.html#Simple-Commands" accesskey="u" rel="up">Simple Commands</a> &nbsp; [<a href="index.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="LD-Index.html#LD-Index" title="Index" rel="index">Index</a>]</p>
</div>


a125 2
</body>
</html>
@

