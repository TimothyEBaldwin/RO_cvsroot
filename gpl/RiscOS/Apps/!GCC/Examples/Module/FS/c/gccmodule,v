head	1.1;
branch	1.1.1;
access;
symbols
	GCC-4_7_4_r3:1.1.1.1
	GCC-4_1_2_r2:1.1.1.1
	MAIN:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.29.22.46.20;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Uxh7I3IiWVY2YpZw;

1.1.1.1
date	2013.07.29.22.46.20;	author jlee;	state Exp;
branches;
next	;
commitid	Uxh7I3IiWVY2YpZw;


desc
@@


1.1
log
@Initial revision
@
text
@/* Copyright (c) 2005-2007 GCCSDK Developers
 *
 * Example module using GCC.  It can act as a boilerplate for a FS
 * implementation and is therefore not functional as-is.
 */

#include <stdio.h>

#include <oslib/osfscontrol.h>

#include "gccmodule_config.h"
#include "module.h" // Generated by CMUNGE

// When its option "-zbase" is used, CMunge declares and defines the
// Image__RO_Base variable which points to the start of the module at
// runtime.

// The error number is not allocated and should be changed.
static _kernel_oserror errNotSupp = { 0x01, "Not supported" };

static _kernel_oserror *
declare_fs(void *pw)
{
  const osfscontrol_fs_info_block info_block = {
      (int)FilingSystemName - Image__RO_Base, // name_offset
      (int)FilingSystemName - Image__RO_Base, // banner_offset
      (int)fsentry_open     - Image__RO_Base, // open_offset
      (int)fsentry_getbytes - Image__RO_Base, // get_bytes
      (int)fsentry_putbytes - Image__RO_Base, // put_bytes
      (int)fsentry_args     - Image__RO_Base, // args_offset
      (int)fsentry_close    - Image__RO_Base, // close_offset
      (int)fsentry_file     - Image__RO_Base, // file_offset
      FilingSystemNumber,                     // info
      (int)fsentry_func     - Image__RO_Base, // func_offset
      (int)fsentry_gbpb     - Image__RO_Base, // gbpb_offset
      0                                       // extra_info
  };

  return (_kernel_oserror *)xosfscontrol_add_fs((const byte *)Image__RO_Base, (int)&info_block - Image__RO_Base, pw);
}

static void
remove_fs(void)
{
  (void)xosfscontrol_remove_fs(FilingSystemName);
}


_kernel_oserror *
gccmodule_init(const char *cmd_tail, int podule_base, void *pw)
{
  puts("GCC example module initialise");

  return declare_fs(pw);
}


_kernel_oserror *
gccmodule_final(int fatal, int podule, void *pw)
{
  puts("GCC example module finalise");

  remove_fs();

  return NULL;
}

void
gccmodule_service(int service_number, _kernel_swi_regs *r, void *pw)
{
  switch (service_number)
    {
      case Service_FSRedeclare:
        puts("GCC example module Service_FSRedeclare");
        declare_fs(pw);
        break;
    }
}


_kernel_oserror *
fsentry_open_handler(_kernel_swi_regs *r, void *pw)
{
  puts("FSEntry_Open");
  return &errNotSupp;
}


_kernel_oserror *
fsentry_getbytes_handler(_kernel_swi_regs *r, void *pw)
{
  puts("FSEntry_GetBytes");
  return &errNotSupp;
}


_kernel_oserror *
fsentry_putbytes_handler(_kernel_swi_regs *r, void *pw)
{
  puts("FSEntry_PutBytes");
  return &errNotSupp;
}


_kernel_oserror *
fsentry_args_handler(_kernel_swi_regs *r, void *pw)
{
  puts("FSEntry_Args");
  return &errNotSupp;
}


_kernel_oserror *
fsentry_close_handler(_kernel_swi_regs *r, void *pw)
{
  puts("FSEntry_Close");
  return &errNotSupp;
}


_kernel_oserror *
fsentry_file_handler(_kernel_swi_regs *r, void *pw)
{
  puts("FSEntry_File");
  return &errNotSupp;
}


_kernel_oserror *
fsentry_func_handler(_kernel_swi_regs *r, void *pw)
{
  puts("FSEntry_Func");
  return &errNotSupp;
}


_kernel_oserror *
fsentry_gbpb_handler(_kernel_swi_regs *r, void *pw)
{
  puts("FSEntry_GBPB");
  return &errNotSupp;
}
@


1.1.1.1
log
@  Initial import of GCC 4
Detail:
  This is a standard copy of GCC 4.1.2 r2, straight from the packages available on riscos.info
  Installed packages are:
  * GCC4 4.1.2-Rel2-1
  * GCC4-C++ 4.1.2-Rel2-1
Admin:
  Tagged as GCC-4_1_2_r2
@
text
@@
