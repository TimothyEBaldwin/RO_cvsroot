head	1.1;
access;
symbols
	Perl-0_04:1.1
	Perl-2013-05-27:1.1
	Batch4:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.10.14.21.30.10;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Clean reimport of the build environment directories.
This represents the version released in the Batch 4 "bbe" tarfiles.
Tagged as 'Batch4'
@
text
@# Copyright 2008 Castle Technology Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
package TieHash;
use Carp;

sub new {
    my $pack = shift;
    $pack->TIEHASH(@@_);
}

# Grandfather "new"

sub TIEHASH {
    my $pack = shift;
    if (defined &{"{$pack}::new"}) {
	carp "WARNING: calling ${pack}->new since ${pack}->TIEHASH is missing"
	    if $^W;
	$pack->new(@@_);
    }
    else {
	croak "$pack doesn't define a TIEHASH method";
    }
}

sub EXISTS {
    my $pack = ref $_[0];
    croak "$pack doesn't define an EXISTS method";
}

sub CLEAR {
    my $self = shift;
    my $key = $self->FIRSTKEY(@@_);
    my @@keys;

    while (defined $key) {
	push @@keys, $key;
	$key = $self->NEXTKEY(@@_, $key);
    }
    foreach $key (@@keys) {
	$self->DELETE(@@_, $key);
    }
}

# The TieHash::Std package implements standard perl hash behaviour.
# It exists to act as a base class for classes which only wish to
# alter some parts of their behaviour.

package TieHash::Std;
@@ISA = qw(TieHash);

sub TIEHASH  { bless {}, $_[0] }
sub STORE    { $_[0]->{$_[1]} = $_[2] }
sub FETCH    { $_[0]->{$_[1]} }
sub FIRSTKEY { my $a = scalar keys %{$_[0]}; each %{$_[0]} }
sub NEXTKEY  { each %{$_[0]} }
sub EXISTS   { exists $_[0]->{$_[1]} }
sub DELETE   { delete $_[0]->{$_[1]} }
sub CLEAR    { %{$_[0]} = () }

1;
@
