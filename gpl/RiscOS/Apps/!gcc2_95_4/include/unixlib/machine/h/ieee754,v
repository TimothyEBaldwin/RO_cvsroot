head	1.1;
access;
symbols
	Batch6:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.12.03.18.30.41;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.1
log
@  Clean reimport of GCC version 2.95.4.
Detail:
  Original log from 2003-12-10 reads:
  This version is suitable for use on 32-bit machines, and creates APCS-32
  code by default. It is currently marked as "experimental", although it does
  fix several bugs that we have encountered using the last "stable" release.
  This directory is equivalent to a merge of the distribution archives "cc1",
  "cc1plus", "gcc" and "gccdoc" from http://www.riscos.info/gcc/32bit.html
  with one change: a #include commented out in _G_config.h, since this prevents
  the use of the STL library unless you are linking with UnixLib.
Admin:
  Tagged as 'Batch6'
@
text
@/****************************************************************************
 *
 * $Source: /home/cvs/RiscOS/Apps/!gcc/include/unixlib/machine/h/ieee754,v $
 * $Date: 2003/12/10 18:18:02 $
 * $Revision: 1.1.1.1 $
 * $State: Exp $
 * $Author: bavison $
 *
 ***************************************************************************/

#ifndef __MACHINE_IEEE754_H
#define __MACHINE_IEEE754_H 1

#ifndef __UNIXLIB_FEATURES_H
#include <unixlib/features.h>
#endif

__BEGIN_DECLS

union ieee754_float
  {
    float f;

    /* This is the IEEE 754 single-precision format.  */
    struct
      {
	unsigned int mantissa:23;
	unsigned int exponent:8;
	unsigned int negative:1;
      } ieee;

    /* This format makes it easier to see if a NaN is a signalling NaN.  */
    struct
      {
	unsigned int mantissa:22;
	unsigned int quiet_nan:1;
	unsigned int exponent:8;
	unsigned int negative:1;
      } ieee_nan;
  };

#define IEEE754_FLOAT_BIAS	0x7f /* Added to exponent.  */


union ieee754_double
  {
    double d;

    /* This is the IEEE 754 double-precision format.  */
    struct
      {
	unsigned int mantissa0:20;
	unsigned int exponent:11;
	unsigned int negative:1;
	unsigned int mantissa1:32;
      } ieee;

    /* This format makes it easier to see if a NaN is a signalling NaN.  */
    struct
      {
	unsigned int mantissa0:19;
	unsigned int quiet_nan:1;
	unsigned int exponent:11;
	unsigned int negative:1;
	unsigned int mantissa1:32;
      } ieee_nan;
  };

#define IEEE754_DOUBLE_BIAS	0x3ff /* Added to exponent.  */


union ieee854_long_double
  {
    long double d;

    /* This is the IEEE 854 double-extended-precision format.  */
    struct
      {
	unsigned int exponent:15;
	unsigned int empty:16;
	unsigned int negative:1;
	unsigned int mantissa0:32;
	unsigned int mantissa1:32;
      } ieee;

    /* This is for NaNs in the IEEE 854 double-extended-precision format.  */
    struct
      {
	unsigned int exponent:15;
	unsigned int empty:16;
	unsigned int negative:1;
	unsigned int mantissa0:30;
	unsigned int quiet_nan:1;
	unsigned int one:1;
	unsigned int mantissa1:32;
      } ieee_nan;
  };

#define IEEE854_LONG_DOUBLE_BIAS 0x3fff


extern double __ieee754_exp (double __x);

__END_DECLS

#endif
@
