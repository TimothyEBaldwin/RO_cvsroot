head	1.1;
access;
symbols
	Batch6:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.12.03.18.31.02;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.1
log
@  Clean reimport of GCC version 2.95.4.
Detail:
  Original log from 2003-12-10 reads:
  This version is suitable for use on 32-bit machines, and creates APCS-32
  code by default. It is currently marked as "experimental", although it does
  fix several bugs that we have encountered using the last "stable" release.
  This directory is equivalent to a merge of the distribution archives "cc1",
  "cc1plus", "gcc" and "gccdoc" from http://www.riscos.info/gcc/32bit.html
  with one change: a #include commented out in _G_config.h, since this prevents
  the use of the STL library unless you are linking with UnixLib.
Admin:
  Tagged as 'Batch6'
@
text
@/****************************************************************************
 *
 * $Source: /home/cvs/RiscOS/Apps/!gcc/include/unixlib/unixlib/h/os,v $
 * $Date: 2003/12/10 18:18:03 $
 * $Revision: 1.1.1.1 $
 * $State: Exp $
 * $Author: bavison $
 *
 ***************************************************************************/

#ifndef __UNIXLIB_OS_H
#define __UNIXLIB_OS_H

#ifndef __UNIXLIB_FEATURES_H
#include <unixlib/features.h>
#endif

#ifndef __KERNEL_H
#include <kernel.h>
#endif

__BEGIN_DECLS

#ifdef __UNIXLIB_INTERNALS

/* Setup console I/O.  */
extern int __os_console (void);
/* Setup RS423 I/O.  */
extern int __os_423 (void);

extern int __os_vdu (int);
extern int __os_get (void);
/* Returns -1 on timeout.  */
extern int __os_inkey (int);
/* Flush keyboard buffer.  */
extern int __os_keyflush (void);

/* 423 times are in centiseconds */

extern int __os_423vdu (int);
extern int __os_423get (void);
/* Returns -1 on timeout.  */
extern int __os_423inkey (int);
/* Flush RS423 buffer.  */
extern int __os_423flush (void);
extern int __os_423break (int);

extern _kernel_oserror *__os_swi (int,int * /* 10 reg */ );
extern _kernel_oserror *__os_byte (int,int,int,int * /* 3 reg */ );
extern _kernel_oserror *__os_word (int,void *);
extern _kernel_oserror *__os_prhex (int); 	/* %8x format hex output */
extern _kernel_oserror *__os_prdec (int);
extern _kernel_oserror *__os_print (const char *);
extern _kernel_oserror *__os_write (const char *,int);
extern _kernel_oserror *__os_nl (void);		/* newline */
extern _kernel_oserror *__os_cli (const char *);
extern _kernel_oserror *__os_file (int,const char *,int * /* 6 reg */ );
extern _kernel_oserror *__os_fopen (int,const char *,int * /* 1 reg */ );
extern _kernel_oserror *__os_fclose (int);
extern _kernel_oserror *__os_fread (int,void *,int,int * /* 5 reg */ );
extern _kernel_oserror *__os_fwrite (int,const void *,int,int * /* 5 reg */ );
extern _kernel_oserror *__os_args (int,int,int,int * /* 3 reg */ );
extern _kernel_oserror *__os_fsctrl (int,const char *,char *,int);

/* Flag RISC OS error to UNIX.  */
extern void __seterr (const _kernel_oserror *);
#endif

__END_DECLS

#endif
@
