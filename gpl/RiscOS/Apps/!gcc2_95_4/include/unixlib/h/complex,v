head	1.1;
access;
symbols
	Batch6:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.12.03.18.30.38;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.1
log
@  Clean reimport of GCC version 2.95.4.
Detail:
  Original log from 2003-12-10 reads:
  This version is suitable for use on 32-bit machines, and creates APCS-32
  code by default. It is currently marked as "experimental", although it does
  fix several bugs that we have encountered using the last "stable" release.
  This directory is equivalent to a merge of the distribution archives "cc1",
  "cc1plus", "gcc" and "gccdoc" from http://www.riscos.info/gcc/32bit.html
  with one change: a #include commented out in _G_config.h, since this prevents
  the use of the STL library unless you are linking with UnixLib.
Admin:
  Tagged as 'Batch6'
@
text
@/****************************************************************************
 *
 * $Source: /home/cvs/RiscOS/Apps/!gcc/include/unixlib/h/complex,v $
 * $Date: 2003/12/10 18:18:01 $
 * $Revision: 1.1.1.1 $
 * $State: Exp $
 * $Author: bavison $
 *
 ***************************************************************************/

/* ISO C99: 7.3 Complex arithmetic <complex.h> */

#ifndef __COMPLEX_H
#define __COMPLEX_H 1

#include <unixlib/features.h>

__BEGIN_DECLS

#ifdef __GNUC__
#define _Complex __complex__
#define complex _Complex

/* Narrowest imaginary unit.  */
#define _Complex_I	(__extension__ 1.0iF)
#else
/* Acorn C doesn't support complex numbers.
   Define enough macros to allow compilation to continue even though
   the functions will never work.  */
#define _Complex /**/
#define __real__ /**/
#define __imag__ /**/
#define __complex__ /**/
#endif


/* Another more descriptive name is `I'.  */
#undef I
#define I _Complex_I

/* Optimization aids.  */
#define CX_LIMITED_RANGE_ON
#define CX_LIMITED_RANGE_OFF
#define CX_LIMITED_RANGE_DEFAULT

/* Trigonometric functions.  */

/* Arc cosine of Z.  */
extern _Complex double cacos (double _Complex __z);
extern _Complex float cacosf (float _Complex __z);
extern _Complex long double cacosl (long double _Complex __z);

/* Arc sine of Z.  */
extern _Complex double casin (double _Complex __z);
/* Arc tangent of Z.  */
extern _Complex double catan (double _Complex __z);

/* Cosine of Z.  */
extern _Complex double ccos (double _Complex __z);
/* Sine of Z.  */
extern _Complex double csin (double _Complex __z);
/* Tangent of Z.  */
extern _Complex double ctan (double _Complex __z);


/* Hyperbolic functions.  */

/* Hyperbolic arc cosine of Z.  */
extern _Complex double cacosh (double _Complex __z);
/* Hyperbolic arc sine of Z.  */
extern _Complex double casinh (double _Complex __z);
/* Hyperbolic arc tangent of Z.  */
extern _Complex double catanh (double _Complex __z);

/* Hyperbolic cosine of Z.  */
extern _Complex double ccosh (double _Complex __z);
/* Hyperbolic sine of Z.  */
extern _Complex double csinh (double _Complex __z);
/* Hyperbolic tangent of Z.  */
extern _Complex double ctanh (double _Complex __z);


/* Exponential and logarithmic functions.  */

/* Exponential function of Z.  */
extern _Complex double cexp (double _Complex __z);

/* Natural logarithm of Z.  */
extern _Complex double clog (double _Complex __z);

/* The base 10 logarithm is not defined by the standard but to implement
   the standard C++ library it is handy.  */
extern _Complex double clog10 (double _Complex __z);

/* Power functions.  */

/* Return X to the Y power.  */
extern _Complex double cpow (double _Complex __x, double _Complex __y);

/* Return the square root of Z.  */
extern _Complex double csqrt (double _Complex __z);


/* Absolute value, conjugates, and projection.  */

/* Absolute value of Z.  */
extern double cabs (double _Complex __z);

/* Argument value of Z.  */
extern double carg (double _Complex __z);

/* Complex conjugate of Z.  */
extern _Complex double conj (double _Complex __z);

/* Projection of Z onto the Riemann sphere.  */
extern _Complex double cproj (double _Complex __z);


/* Decomposing complex values.  */

/* Imaginary part of Z.  */
extern double cimag (double _Complex __z);

/* Real part of Z.  */
extern double creal (double _Complex __z);

__END_DECLS

#endif
@
