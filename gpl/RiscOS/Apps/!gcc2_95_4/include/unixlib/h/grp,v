head	1.1;
access;
symbols
	Batch6:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.12.03.18.30.38;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.1
log
@  Clean reimport of GCC version 2.95.4.
Detail:
  Original log from 2003-12-10 reads:
  This version is suitable for use on 32-bit machines, and creates APCS-32
  code by default. It is currently marked as "experimental", although it does
  fix several bugs that we have encountered using the last "stable" release.
  This directory is equivalent to a merge of the distribution archives "cc1",
  "cc1plus", "gcc" and "gccdoc" from http://www.riscos.info/gcc/32bit.html
  with one change: a #include commented out in _G_config.h, since this prevents
  the use of the STL library unless you are linking with UnixLib.
Admin:
  Tagged as 'Batch6'
@
text
@/****************************************************************************
 *
 * $Source: /home/cvs/RiscOS/Apps/!gcc/include/unixlib/h/grp,v $
 * $Date: 2003/12/10 18:18:01 $
 * $Revision: 1.1.1.1 $
 * $State: Exp $
 * $Author: bavison $
 *
 ***************************************************************************/

#ifndef __GRP_H
#define __GRP_H 1

#ifndef __UNIXLIB_FEATURES_H
#include <unixlib/features.h>
#endif

#ifndef __UNIXLIB_TYPES_H
#include <unixlib/types.h>
#endif

#define __need_size_t
#include <stddef.h>

#if !defined __gid_t_defined
typedef __gid_t gid_t;
#define __gid_t_defined
#endif

__BEGIN_DECLS

#define __need_FILE
#include <stdio.h>

struct group
{
  char *gr_name; /* Group name.  */
  char *gr_passwd; /* Group password.  */
  __gid_t gr_gid; /* Group ID.  */
  char **gr_mem; /* Group members.  */
};

/* Rewind the group-file stream.  */
extern void setgrent (void);

/* Close the group-file stream.  */
extern void endgrent (void);

/* Read an entry from the group-file stream, opening it if necessary.  */
extern struct group *getgrent (void);

/* Read an entry from the password-file stream, opening it if
   necessary (re-entrant version).  */
extern int getgrent_r (struct group *__restrict __result_buf,
		       char *__restrict __buffer, size_t __buflen,
		       struct group **__restrict __result);

/* Read an entry from stream.  */
extern struct group *fgetgrent (FILE *__stream);

/* Read an entry from stream (re-entrant version).  */
extern int fgetgrent_r (FILE *__restrict __stream,
			struct group *__restrict __result_buf,
			char *__restrict __buffer, size_t __buflen,
			struct group **__restrict __result);

/* Search for an entry with a matching group ID.  */
extern struct group *getgrgid (gid_t __gid);

/* Search for an entry with a matching group ID (re-entrant version).  */
extern int getgrgid_r (gid_t __gid, struct group *__resbuf, char *__buffer,
		       size_t __buflen, struct group **__result);

/* Search for an entry with a matching group name.  */
extern struct group *getgrnam (const char *__name);

/* Search for an entry with a matching group name (re-entrant version).  */
extern int getgrnam_r (const char *__restrict __name,
		       struct group *__restrict __result_buf,
		       char *__restrict __buffer, size_t __buflen,
		       struct group **__restrict __result);

/* Get a list of all supplementary groups this user is in */
extern int getgroups (int __gidsetlen, gid_t *__gidset);

/* Set the list of supplementary groups this user is in */
extern int setgroups (int __ngroups, const gid_t *__gidset);

/* Build a list of all groups the user is in, then call setgroups on the list*/
extern int initgroups (const char *__name, gid_t __basegid);

#ifdef __UNIXLIB_INTERNALS
/* UnixLib group implementation function.  */
extern struct group *__grpread (FILE *__stream, struct group *__grp,
				char *__buf, size_t __buflen);
#endif

__END_DECLS

#endif
@
