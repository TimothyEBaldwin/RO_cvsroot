head	1.1;
access;
symbols
	Batch6:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.12.03.18.30.38;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.1
log
@  Clean reimport of GCC version 2.95.4.
Detail:
  Original log from 2003-12-10 reads:
  This version is suitable for use on 32-bit machines, and creates APCS-32
  code by default. It is currently marked as "experimental", although it does
  fix several bugs that we have encountered using the last "stable" release.
  This directory is equivalent to a merge of the distribution archives "cc1",
  "cc1plus", "gcc" and "gccdoc" from http://www.riscos.info/gcc/32bit.html
  with one change: a #include commented out in _G_config.h, since this prevents
  the use of the STL library unless you are linking with UnixLib.
Admin:
  Tagged as 'Batch6'
@
text
@/****************************************************************************
 *
 * $Source: /home/cvs/RiscOS/Apps/!gcc/include/unixlib/h/assert,v $
 * $Date: 2003/12/10 18:18:01 $
 * $Revision: 1.1.1.1 $
 * $State: Exp $
 * $Author: bavison $
 *
 ***************************************************************************/

/* ANSI Standard: 4.2 Diagnostics <assert.h>.  */

/* It is possible to turn assertions off and on in different functions within
   a translation unit by definining (or undefining) NDEBUG and including
   <assert.h> again.  */

#ifndef __ASSERT_H
#define __ASSERT_H

#ifndef __UNIXLIB_FEATURES_H
#include <unixlib/features.h>
#endif

__BEGIN_DECLS

extern void assert (int);

extern void __assert_fail (const char *__message,
			   const char *__file,
			   int __line,
			   const char *__function) __attribute__ ((__noreturn__));

__END_DECLS

#else
#undef assert
#endif /* __ASSERT_H */

#ifdef NDEBUG
#define assert(x) ((void) 0)
#else
#ifdef __GNUC__
/* If compiled under GCC, we can also output the function name.  */
#define assert(expr) \
  ((void)((expr) ||  \
	  (__assert_fail (#expr, __FILE__, __LINE__, __PRETTY_FUNCTION__), 0)))
#else

#ifdef __STDC__
#define assert(expr) \
  ((void)((expr) || (__assert_fail (#expr, __FILE__, __LINE__, NULL), 0)))
#else
#define assert(expr) \
  ((void)((expr) || (__assert_fail ("expr", __FILE__, __LINE__, NULL), 0)))
#endif

#endif /* __GNUC__ */

#endif /* NDEBUG */
@
