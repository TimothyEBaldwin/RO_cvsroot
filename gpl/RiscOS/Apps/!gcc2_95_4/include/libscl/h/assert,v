head	1.1;
access;
symbols
	Batch6:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.12.03.18.30.29;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.1
log
@  Clean reimport of GCC version 2.95.4.
Detail:
  Original log from 2003-12-10 reads:
  This version is suitable for use on 32-bit machines, and creates APCS-32
  code by default. It is currently marked as "experimental", although it does
  fix several bugs that we have encountered using the last "stable" release.
  This directory is equivalent to a merge of the distribution archives "cc1",
  "cc1plus", "gcc" and "gccdoc" from http://www.riscos.info/gcc/32bit.html
  with one change: a #include commented out in _G_config.h, since this prevents
  the use of the STL library unless you are linking with UnixLib.
Admin:
  Tagged as 'Batch6'
@
text
@/* Allow this file to be included multiple times
   with different settings of NDEBUG.  */
#undef assert
#undef __assert

#ifdef NDEBUG
#define assert(ignore) ((void) 0)
#else

#ifndef __GNUC__

#define assert(expression)  \
  ((void) ((expression) ? 0 : __assert (expression, __FILE__, __LINE__)))

#define __assert(expression, file, lineno)  \
  (printf ("%s:%u: failed assertion\n", file, lineno),	\
   abort (), 0)

#else

#if defined(__STDC__) || defined (__cplusplus)

/* Defined in libgcc.a */
#ifdef __cplusplus
extern "C" {
extern void __eprintf (const char *, const char *, unsigned, const char *)
    __attribute__ ((noreturn));
}
#else
extern void __eprintf (const char *, const char *, unsigned, const char *)
    __attribute__ ((noreturn));
#endif

#define assert(expression)  \
  ((void) ((expression) ? 0 : __assert (#expression, __FILE__, __LINE__)))

#define __assert(expression, file, line)  \
  (__eprintf ("%s:%u: failed assertion `%s'\n",		\
	      file, line, expression), 0)

#else /* no __STDC__ and not C++; i.e. -traditional.  */

extern void __eprintf () __attribute__ ((noreturn)); /* Defined in libgcc.a */

#define assert(expression)  \
  ((void) ((expression) ? 0 : __assert (expression, __FILE__, __LINE__)))

#define __assert(expression, file, lineno)  \
  (__eprintf ("%s:%u: failed assertion `%s'\n",		\
	      file, lineno, "expression"), 0)

#endif /* no __STDC__ and not C++; i.e. -traditional.  */
#endif /* no __GNU__; i.e., /bin/cc.  */
#endif
@
