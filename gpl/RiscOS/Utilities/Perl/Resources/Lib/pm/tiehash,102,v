head	1.1;
branch	1.1.1;
access;
symbols
	Perl-0_04:1.1.1.1
	Perl-0_03:1.1.1.1
	Perl-0_02:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.12.11.15.47.23;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.11.15.47.23;	author bavison;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@package TieHash;
use Carp;

sub new {
    my $pack = shift;
    $pack->TIEHASH(@@_);
}

# Grandfather "new"

sub TIEHASH {
    my $pack = shift;
    if (defined &{"{$pack}::new"}) {
	carp "WARNING: calling ${pack}->new since ${pack}->TIEHASH is missing"
	    if $^W;
	$pack->new(@@_);
    }
    else {
	croak "$pack doesn't define a TIEHASH method";
    }
}

sub EXISTS {
    my $pack = ref $_[0];
    croak "$pack doesn't define an EXISTS method";
}

sub CLEAR {
    my $self = shift;
    my $key = $self->FIRSTKEY(@@_);
    my @@keys;

    while (defined $key) {
	push @@keys, $key;
	$key = $self->NEXTKEY(@@_, $key);
    }
    foreach $key (@@keys) {
	$self->DELETE(@@_, $key);
    }
}

# The TieHash::Std package implements standard perl hash behaviour.
# It exists to act as a base class for classes which only wish to
# alter some parts of their behaviour.

package TieHash::Std;
@@ISA = qw(TieHash);

sub TIEHASH  { bless {}, $_[0] }
sub STORE    { $_[0]->{$_[1]} = $_[2] }
sub FETCH    { $_[0]->{$_[1]} }
sub FIRSTKEY { my $a = scalar keys %{$_[0]}; each %{$_[0]} }
sub NEXTKEY  { each %{$_[0]} }
sub EXISTS   { exists $_[0]->{$_[1]} }
sub DELETE   { delete $_[0]->{$_[1]} }
sub CLEAR    { %{$_[0]} = () }

1;
@


1.1.1.1
log
@Sources to RISC OS Perl 5 port 1.51 discovered in a dusty corner of the
Internet, given a new build structure and makefile, and knocked into C99
shape. Various functions missing from the original sources have been
recreated either in assembler or C, by disassembling the binary from
RiscOS.Apps.!Perl.Perl.
Tested in a desktop machine ROM build.
@
text
@@
