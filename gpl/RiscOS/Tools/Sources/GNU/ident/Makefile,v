head	1.5;
access;
symbols
	ident-0_04:1.5
	ident-0_03:1.4
	ident-0_02:1.3
	ident-0_01:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2014.06.27.21.09.10;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	UIKiz2rWLKbLKcGx;

1.4
date	2012.01.14.23.06.59;	author srevill;	state Exp;
branches;
next	1.3;
commitid	srou6lafpzJPacPv;

1.3
date	2008.03.28.22.13.51;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.16.19.01.07;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.22.12.57.07;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.03.22.12.57.07;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Makefile recreated from fragments
Also made the info box template long enough to hold the name of the app.
Built, tested briefly.

Version 0.04. Tagged as 'ident-0_04'
@
text
@# Makefile for GNU/ident
#

COMPONENT ?= ident
INSTAPP    = ${INSTDIR}${SEP}!GNUIdent
OBJS       = ident rcsmap
CDEFINES   = -DRCS_lint=0
CINCLUDES  = -IC:
INSTAPP_FILES = !Boot !Help !Run !Setup !Sprites [!Sprites22] Messages Templates ident
INSTAPP_VERSION = Desc

include CApp

# Dynamic dependencies:
@


1.4
log
@Replace "-wipe" with "x wipe" in makefiles to remove annoying errors.

Version 0.03. Tagged as 'ident-0_03'
@
text
@a2 7
# ***********************************
# ***    C h a n g e   L i s t    ***
# ***********************************
# Date       Name         Description
# ----       ----         -----------
# 21-Mar-00  SNB          Created.
#
d4 7
a10 4
#
# Paths
#
INSTAPP = ${INSTDIR}.^.^.Apps.!GNUIdent
d12 1
a12 127
#
# Generic options:
#
MKDIR   = mkdir -p
AS      = objasm
CP      = copy
CC      = cc
CM      = cmhg
RM      = remove
LD      = link
LB      = libfile
SQZ     = squeeze
TOUCH   = create
WIPE    = x wipe
TIDYDESC = do perl Build:TidyDesc

CCFLAGS = -c -depend !Depend -ffaho ${INCLUDES} ${DFLAGS} ${THROWBACK}
ASFLAGS = -depend !Depend -Stamp -quit
CPFLAGS = ~cfr~v
LBFLAGS = -c
WFLAGS  = ~CFR~V
SQZFLAGS= -f

#
# Libraries
#
CLIB      = CLIB:o.stubs
RLIB      = RISCOSLIB:o.risc_oslib
RSTUBS    = RISCOSLIB:o.rstubs
ROMSTUBS  = RISCOSLIB:o.romstubs
ROMCSTUBS = RISCOSLIB:o.romcstubs
ABSSYM    = RISC_OSLib:o.AbsSym

DIRS      = o._dirs

#
# Include files
#
INCLUDES  = -IC: -Iriscos
DFLAGS    = -DRCS_lint=0

#
# Program specific options:
#
COMPONENT  = ident
CAP_COMP   = GNUIdent
TARGET     = ${COMPONENT}
SOURCE     = 
EXPORTS    = 

OBJS= o.ident o.rcsmap
OBJSI= i.ident i.rcsmap
OBJSINST= oi.ident oi.rcsmap

HDRS=h.rcsbase

LIBS= ${CLIB}

#
# Rule patterns
#
.SUFFIXES: .o .oi .s .c .c++ .i .cmhg .inst
.c.o:;     ${CC} ${CCFLAGS} -o $@@ $<
.s.o:;     ${AS} ${ASFLAGS} -o $@@ $<
.cmhg.o:;  ${CM} ${CMFLAGS} -o $@@ $<
.cmhg.h:;  ${CM} ${CMFLAGS} -d $@@ $<
.c.i:;     ${CC} ${CCFLAGS} -c -C -E $< >> $@@
.inst.oi:; ${CC} ${CCFLAGS} -o $@@ $<

#
# build the target:
#
all: ${TARGET}
        @@echo ${COMPONENT}: ram module built

#
# RISC OS ROM build rules:
#
rom:
        @@echo ${COMPONENT}: rom module built

export: export_${PHASE}

install_rom:
        @@echo ${COMPONENT}: rom module installed

clean:
        ${WIPE} o ${WFLAGS}
        ${RM} ${TARGET}
        @@echo ${COMPONENT}: cleaned

export_hdrs: 
	@@echo ${COMPONENT}: export complete (hdrs)

export_libs: 
        @@echo ${COMPONENT}: export complete (libs)

install: install_${INSTTYPE}

install_tool: ${TARGET}
	${MKDIR} ${INSTDIR}.Docs
	${CP} ${TARGET} ${INSTDIR}.${TARGET} ${CPFLAGS}
	@@echo ${COMPONENT}: tool and docs installed in library

install_: install_tool
	${MKDIR} ${INSTAPP}
	${CP} LocalRes:!Boot ${INSTAPP}.!Boot ${CPFLAGS}
	${CP} LocalRes:!Run ${INSTAPP}.!Run ${CPFLAGS}
	${CP} LocalRes:!Help ${INSTAPP}.!Help ${CPFLAGS}
	${CP} LocalRes:!Setup ${INSTAPP}.!Setup ${CPFLAGS}
	${CP} LocalRes:!Sprites ${INSTAPP}.!Sprites ${CPFLAGS}
	${CP} LocalRes:!Sprites22 ${INSTAPP}.!Sprites22 ${CPFLAGS}
	${CP} LocalRes:Messages ${INSTAPP}.Messages ${CPFLAGS}
	${CP} LocalRes:Templates ${INSTAPP}.Templates ${CPFLAGS}
	${CC} -C++ -E >${INSTAPP}.Desc LocalRes:Desc
	${TIDYDESC}  ${INSTAPP}.Desc ${INSTAPP}.Desc
	@@echo ${COMPONENT}: FrontEnd app install in '${INSTAPP}'



${TARGET}: ${OBJS} ${DIRS}
        ${LD} -o $@@ ${OBJS} ${CLIB}
        ${SQZ} ${SQZFLAGS} $@@

${DIRS}:
        ${MKDIR} o
        ${TOUCH} $@@
@


1.3
log
@This tool doesn't really use CLX.

Version 0.02. Tagged as 'ident-0_02'
@
text
@d29 1
a29 1
WIPE    = -wipe
@


1.2
log
@Fixed install rule. Retagged.
@
text
@a47 1
CLXLIB    = C:CLX.o.clxlib
d54 1
a54 1
INCLUDES  = -IC:CLX -IC: -Iriscos
d72 1
a72 1
LIBS= ${CLXLIB} ${CLIB}
@


1.1
log
@Initial revision
@
text
@d14 1
a14 2
LIBDIR  = ${INSTDIR}.Library.GNU
INSTAPP = ${INSTDIR}.Apps.!GNUIdent
d30 1
d95 1
a95 1
rom: ${TARGET}
d100 1
a100 1
install_rom: ${TARGET}
d114 2
d117 2
a118 1
	${CP} ${TARGET} ${LIBDIR}.${TARGET} ${CPFLAGS}
d121 2
a122 1
install: install_tool install_dirs
d132 1
a133 4

install_dirs:
	${MKDIR} ${INSTAPP}
	${MKDIR} ${LIBDIR}.Docs
@


1.1.1.1
log
@Initial import of ident tool.  This tool searches files (both binary and
textual) for RCS keywords in order to reveal the revision information which
is built into the file.

@
text
@@
