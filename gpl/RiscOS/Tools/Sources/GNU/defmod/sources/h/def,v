head	1.3;
access;
symbols
	defmod-6_23:1.3
	defmod-6_22:1.3
	defmod-6_21:1.3
	defmod-6_01:1.2
	defmod-5_50_prerelease:1.1.1.1
	oslib-5_5_prerelease:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2001.06.06.12.48.10;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.18.11.52.31;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	99.11.18.11.10.50;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.11.18.11.10.50;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  Update of defmod to the one that accompanies public version 6.21
  UNIX version.
Detail:
  This source set represents that distributed with OSLib 6.21.  I've
    fixed some faults and passed them back to the maintainers (notably
    an uncaught NULL pointer dereference in the chelp_output function).
  This application now builds on Solaris, Linux & FreeBSD.
  The bootstrap code moves to directory 'oslib' instead of 'bs' to avoid
    needing to change lots of includes between RISC OS and non-RISC OS
    variants.
Notes:
  -cstrong seems to produce empty files (on all variants) - I guess it's
    not supported any more (we don't need it either).
Admin:
  Tested on Solaris, Linux, FreeBSD and RISC OS.
  Sources re-released to maintainers as required under GPL licence.


Version 6.21. Tagged as 'defmod-6_21'
@
text
@/*def.h - def file parser*/
#ifndef def_H
#define def_H

#ifndef types_H
   #include "types.h"
#endif

#define def_ID_LIMIT 255  /* max number of names of types */

#define def_C_PLUS_PLUS_LIMIT 1023

#define def_STRUCT_LIMIT 64 /* max number of members in in a single struct */
#define def_UNION_LIMIT  64 /* max number of members in in a single union */

#define def_DESCRIPTION_LIMIT 255 /* max number of chars in a description */

#define def_FLAGS 15 /*number to be used signifying returned flags*/

typedef enum
        { def_VALUE_REGISTER,
          def_VALUE_FIXED,
          def_VALUE_VARIABLE  /* structure contains ellipsis */
        }
        def_value;

typedef
   struct def_c
   {  int value;
      struct def_t *type;

      char *description;
   }
   *def_c;

typedef
   enum
   {  def_TYPE_INT,
      def_TYPE_SHORT,
      def_TYPE_BYTE,
      def_TYPE_CHAR,
      def_TYPE_BITS,
      def_TYPE_BYTES,
      def_TYPE_BOOL,
      def_TYPE_REF,
      def_TYPE_STRING,
      def_TYPE_ASM,
      def_TYPE_DATA,
      def_TYPE_STRUCT,
      def_TYPE_UNION,
      def_TYPE_LIST,
      def_TYPE_ROW,
      def_TYPE_VOID,
      def_TYPE_ID,
      def_TYPE_ABSTRACT
   }
   def_type;

typedef enum{ def_OP_DISJOINS,
              def_OP_CONJOINS,
              def_OP_ADDS,
              def_OP_EXCLUSIVELY_DISJOINS
            } def_op;


/* structure created when parser encounters a type definition */
typedef
   struct def_t
   {  def_type tag;     /* type of entry */
      char *name;       /* type name, if any */
      def_value value;  /* register type? */
      char *description;/* NULL if empty, else pointer to description */

      union
      {  /*INT, SHORT, BYTE, CHAR, BITS, BYTES, BOOL*/

         /*REF*/
         struct def_t *ref;

         /*STRING, ASM, DATA*/

         /*STRUCT, UNION, LIST*/
         struct
         {  int count;          /* number of members */
            osbool ellipsis;    /* definition contains ellipsis */
            struct def_t *base; /* pointer to base type definition, if present */
            struct def_t *members [def_STRUCT_LIMIT + def_UNION_LIMIT];
                                /* array of pointers to members */
         }
         list;

         /*ROW*/
         struct
         {  int count;
            struct def_t *base;
         }
         row;

         /*VOID*/

         /*ID*/
         char id [def_ID_LIMIT + 1];
      } data;
   }
   *def_t;

#define def_sizeof_TYPE(t) \
   (  offsetof (struct def_t, data) + \
      (  t == def_TYPE_REF? \
            sizeof ((def_t) NULL)->data AS ref: \
         t == def_TYPE_STRUCT || t == def_TYPE_UNION || t == def_TYPE_LIST? \
            sizeof ((def_t) NULL)->data AS list: \
         t == def_TYPE_ROW? \
            sizeof ((def_t) NULL)->data AS row: \
         t == def_TYPE_ID? \
            sizeof ((def_t) NULL)->data AS id: \
            0 \
      ) \
   )


/* structure created when parser encounters a SWI definition */
typedef
   struct def_s
   {  int swi; /*SWI number*/
      bits  i, /*set of input registers*/
            o, /*set of output registers*/
            c, /*set of corrupted registers*/
            k; /*set of constant input registers*/
      osbool  f_in  /*want flags on input?*/,
              f_out /*output?*/;

      struct def_t *inputs [10]; /*typed_vars for input args (if i set)*/
      struct def_t *outputs [10]; /*typed_vars for output args (if o set)*/
      int constants [10]; /*values to load constants with (if k set)*/
      bits ri, ro; /*true if REFERENCES rather than CONTAINS*/

      osbool starred_swi; /*TRUE if swi = (NUMBER NUM*, ...)*/
      osbool starred_constants [10]; /*TRUE if ENTRY (REG CONSTANT NUM*, ...)*/

      osbool absent; /*swi definition is absent*/

      def_op op [10]; /*operation for register*/

      bits value; /*if register R is to be returned as a value (in the non-X
         form), bit R is set*/

      char *description;
   }
   *def_s;

/* copy the char string at s1 into s0
** in the form "ModuleName_FOO_BAR" */
extern void def_as_macro (char *s0, const char *s1);

/* copy the char string at s1 into s0
** in the form "ModuleName_foo_bar" */
extern void def_as_extern (char *s0, const char *s1);

/* copy the char string at s1 into s0
** in the form "ModuleName" */
extern void def_as_prefix( char* s0, char* s1 );

extern void def_as_c_plus_plus (char *, char *, def_s);

extern osbool def_using_block (def_s);

extern int def_bit_index (bits i, int arg);
   /*the index of the |arg|'th set bit of |i|.*/

/* create a copy of string s on the heap
**  return a pointer to the heap block
**  defined in defmod.y */
extern char *qstrdup (const char *);

extern osbool def_inlinable (def_s);

#endif
@


1.2
log
@  Import of changes for defmod 6.01 from OSLib.
Admin:
  Tested against ToolAction.

Version 6.01. Tagged as 'defmod-6_01'
@
text
@d9 1
a9 1
#define def_ID_LIMIT 255
d13 2
a14 2
#define def_STRUCT_LIMIT 64
#define def_UNION_LIMIT  64
d16 1
a16 1
#define def_DESCRIPTION_LIMIT 255
d20 6
a25 2
typedef enum {def_VALUE_REGISTER, def_VALUE_FIXED, def_VALUE_VARIABLE}
      def_value;
d38 7
a44 2
   {  def_TYPE_INT, def_TYPE_SHORT, def_TYPE_BYTE, def_TYPE_CHAR,
         def_TYPE_BITS, def_TYPE_BYTES, def_TYPE_BOOL,
d46 6
a51 2
      def_TYPE_STRING, def_TYPE_ASM, def_TYPE_DATA,
      def_TYPE_STRUCT, def_TYPE_UNION, def_TYPE_LIST,
d59 5
a63 2
typedef enum {def_OP_DISJOINS, def_OP_CONJOINS, def_OP_ADDS,
      def_OP_EXCLUSIVELY_DISJOINS} def_op;
d65 2
d69 4
a72 4
   {  def_type tag;
      char *name; /*if any*/
      def_value value; /*register type?*/
      char *description;
d84 3
a86 3
         {  int count;
            bool ellipsis;
            struct def_t *base;
d88 1
d103 1
a103 2
      }
      data;
d121 2
d126 6
a131 5
      bits i, /*set of input registers*/
         o, /*set of output registers*/
         c, /*set of corrupted registers*/
         k; /*set of constant input registers*/
      bool f_in /*want flags on input?*/, f_out /*output?*/;
d138 2
a139 2
      bool starred_swi; /*TRUE if swi = (NUMBER NUM*, ...)*/
      bool starred_constants [10]; /*TRUE if ENTRY (REG CONSTANT NUM*, ...)*/
d141 1
a141 1
      bool absent; /*swi definition is absent*/
d152 11
a162 3
extern void def_as_macro (char *, char *);

extern void def_as_extern (char *, char *);
d166 1
a166 1
extern bool def_using_block (def_s);
d171 4
a174 1
extern char *qstrdup (char *);
d176 1
a176 1
extern bool def_inlinable (def_s);
@


1.1
log
@Initial revision
@
text
@d68 1
d131 1
a131 1
extern void def_as_macro (char *, const char *);
d133 1
a133 1
extern void def_as_extern (char *, const char *);
d135 1
a135 1
extern void def_as_c_plus_plus (char *, const char *, def_s);
d142 1
a142 1
extern char *qstrdup (const char *);
@


1.1.1.1
log
@  Initial import of the sources of the "defmod" tool, used to build OSLib.
  These sources represent the GPLed version of defmod available with OSLib
  5.5, with modifications to support -26bit and -32bit options to choose the
  APCS variant being used.
   
Detail:
  The code has been reorganised to remove dependencies on path variables
  which are not appropriate for our build structure.  The sources directory
  contains the main code sources; the bs directory contains bootstrap headers
  to enable defmod to be build without OSLib headers being available; the
  support directory contains derivatives of JCoxhead's support library.
  
  Code changes are a switch in support.s.riscosa to support 32-bit builds of
  defmod itself; sources.y.defmod includes VersionNum and uses Module_Date
  and Module_FullVersion in the -help output; sources.c.objasm has a new
  apcs32 flag which controls MOV vs. MOVS and LDM vs. LDM^ for veneer exits.
   
  The Makefile is a complete rewrite.
  
  Do not define __GNUC__ as zero even if the compiler wants you to - it
    breaks other things (due to inconsistent use of #ifdef and #if)
 
Admin:
  Checked output is correct by inspecting AOF files generated by ToolAction.
  This tool sits in the GNU sources directory as it is released the GPL.
  This tool exports its binary to the Library.Build directory because that
    is where it lives in the library at the moment.


Tagged as defmod-5_50_prerelease
  
@
text
@@
