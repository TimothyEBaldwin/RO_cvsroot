head	1.20;
access;
symbols
	SDCMOS-0_20:1.20
	SDCMOS-0_19:1.19
	SDCMOS-0_18:1.18
	SDCMOS-0_17:1.17
	SDCMOS-0_16:1.16
	SDCMOS-0_15:1.15
	SDCMOS-0_14:1.14
	SDCMOS-0_13:1.13
	SDCMOS-0_12:1.12
	SDCMOS-0_11:1.11
	SDCMOS-0_10:1.10
	SDCMOS-0_09:1.9
	SDCMOS-0_08:1.8
	SDCMOS-0_07:1.7
	SDCMOS-0_06:1.6
	SDCMOS-0_05:1.5
	SDCMOS-0_04:1.4
	SDCMOS-0_03:1.3
	SDCMOS-0_02:1.2
	SDCMOS-0_01:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.20
date	2018.06.21.21.49.08;	author jballance;	state Exp;
branches;
next	1.19;
commitid	wyWpSxG6SUsNccHA;

1.19
date	2018.06.19.18.44.21;	author jballance;	state Exp;
branches;
next	1.18;
commitid	nk6QAoHgWNRofVGA;

1.18
date	2017.08.12.09.24.11;	author rool;	state Exp;
branches;
next	1.17;
commitid	fE0GNnItCr619U2A;

1.17
date	2016.10.15.14.34.39;	author rsprowson;	state Exp;
branches;
next	1.16;
commitid	AhZDiPlOsqzoxfqz;

1.16
date	2015.08.03.07.06.49;	author rsprowson;	state Exp;
branches;
next	1.15;
commitid	N9omgJBq9kuDaNvy;

1.15
date	2015.02.03.19.21.09;	author bavison;	state Exp;
branches;
next	1.14;
commitid	ZQixtkMn0jqh3B8y;

1.14
date	2014.11.04.02.24.38;	author bavison;	state Exp;
branches;
next	1.13;
commitid	m6ODWDke65TTlOWx;

1.13
date	2014.04.29.13.21.29;	author bavison;	state Exp;
branches;
next	1.12;
commitid	voMGinv965YT3Ayx;

1.12
date	2013.12.22.21.35.44;	author rsprowson;	state Exp;
branches;
next	1.11;
commitid	77yfWi0XqtXxUaix;

1.11
date	2013.11.18.21.29.55;	author rsprowson;	state Exp;
branches;
next	1.10;
commitid	WMQZqnHPUMljYNdx;

1.10
date	2013.07.14.21.24.36;	author rsprowson;	state Exp;
branches;
next	1.9;
commitid	opZotooRSUhA1uXw;

1.9
date	2012.10.16.20.39.41;	author rsprowson;	state Exp;
branches;
next	1.8;
commitid	lnB9DoPJd5RfuEow;

1.8
date	2012.10.05.08.14.33;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	T96F2SNnHTeyIanw;

1.7
date	2012.10.03.22.18.39;	author jlee;	state Exp;
branches;
next	1.6;
commitid	U9i5wAPbIJq7sZmw;

1.6
date	2012.09.27.01.20.06;	author jlee;	state Exp;
branches;
next	1.5;
commitid	88Xjk0tRD9LjG6mw;

1.5
date	2012.09.16.15.40.10;	author jlee;	state Exp;
branches;
next	1.4;
commitid	Ta304yOdrPeiNLkw;

1.4
date	2012.09.01.20.41.21;	author jlee;	state Exp;
branches;
next	1.3;
commitid	Zw9UGSQYFByvWRiw;

1.3
date	2012.08.28.20.17.12;	author bavison;	state Exp;
branches;
next	1.2;
commitid	D4rM2b9sVHZbWliw;

1.2
date	2012.07.15.12.07.20;	author bavison;	state Exp;
branches;
next	1.1;
commitid	frOQbJE0HDiPDEcw;

1.1
date	2012.06.07.22.56.29;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	fLbuMMMFH3oNpP7w;

1.1.1.1
date	2012.06.07.22.56.29;	author bavison;	state Exp;
branches;
next	;
commitid	fLbuMMMFH3oNpP7w;


desc
@@


1.20
log
@  Updated various comments. Cleared unneeded mods
Detail:
  Removed most of the mods inserted in last update.
  Improved the comments.
Admin:
  tested on iMx6


Version 0.20. Tagged as 'SDCMOS-0_20'
@
text
@/* (0.20)
 *
 * This file is automatically maintained by srccommit, do not edit manually.
 * Last processed by srccommit version: 1.1.
 *
 */
#define Module_MajorVersion_CMHG        0.20
#define Module_MinorVersion_CMHG        
#define Module_Date_CMHG                21 Jun 2018

#define Module_MajorVersion             "0.20"
#define Module_Version                  20
#define Module_MinorVersion             ""
#define Module_Date                     "21 Jun 2018"

#define Module_ApplicationDate          "21-Jun-18"

#define Module_ComponentName            "SDCMOS"
#define Module_ComponentPath            "cddl/RiscOS/Sources/HWSupport/SD/SDCMOS"

#define Module_FullVersion              "0.20"
#define Module_HelpVersion              "0.20 (21 Jun 2018)"
#define Module_LibraryVersionInfo       "0:20"
@


1.19
log
@  Ensure cmos loaded at boot time in iMx6 if module active
Detail:
  Writes were saved to a SD based sector, but not read out at
  module initialisation
Admin:
  (highlight level of testing that has taken place)
  (bugfix number if appropriate)

  (overview of change)
Detail:
  (list files and functions that have changed)
Admin:
  (highlight level of testing that has taken place)
  (bugfix number if appropriate)


Version 0.19. Tagged as 'SDCMOS-0_19'
@
text
@d1 1
a1 1
/* (0.19)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.19
d9 1
a9 1
#define Module_Date_CMHG                19 Jun 2018
d11 2
a12 2
#define Module_MajorVersion             "0.19"
#define Module_Version                  19
d14 1
a14 1
#define Module_Date                     "19 Jun 2018"
d16 1
a16 1
#define Module_ApplicationDate          "19-Jun-18"
d21 3
a23 3
#define Module_FullVersion              "0.19"
#define Module_HelpVersion              "0.19 (19 Jun 2018)"
#define Module_LibraryVersionInfo       "0:19"
@


1.18
log
@Keep disc copy in sync with kernel when CMOS is reset
Detail:
  Check for a CMOS reset and re-save the disc copy if one happened, otherwise the kernel's default set is lost.
  The kernel clears the bit whenever there *isn't* a CMOS reset, so it doesn't matter what the state of the bit is trapped in the disc copy.
Admin:
  Submission for USB bounty.

Version 0.18. Tagged as 'SDCMOS-0_18'
@
text
@d1 1
a1 1
/* (0.18)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.18
d9 1
a9 1
#define Module_Date_CMHG                12 Aug 2017
d11 2
a12 2
#define Module_MajorVersion             "0.18"
#define Module_Version                  18
d14 1
a14 1
#define Module_Date                     "12 Aug 2017"
d16 1
a16 1
#define Module_ApplicationDate          "12-Aug-17"
d21 3
a23 3
#define Module_FullVersion              "0.18"
#define Module_HelpVersion              "0.18 (12 Aug 2017)"
#define Module_LibraryVersionInfo       "0:18"
@


1.17
log
@Drop StoreInHAL switch
No longer support or maintain the code which opened riscos.img and wrote values into it on the Pi.
However, carry over the logic which attempts to restore the time from the timestamp of the CMOS file from last shutdown so that the time (on a clockless Pi) is a better guess than the Unix epoch until the network time can be read.

Tested on a Pi 3.

Version 0.17. Tagged as 'SDCMOS-0_17'
@
text
@d1 1
a1 1
/* (0.17)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.17
d9 1
a9 1
#define Module_Date_CMHG                15 Oct 2016
d11 2
a12 2
#define Module_MajorVersion             "0.17"
#define Module_Version                  17
d14 1
a14 1
#define Module_Date                     "15 Oct 2016"
d16 1
a16 1
#define Module_ApplicationDate          "15-Oct-16"
d21 3
a23 3
#define Module_FullVersion              "0.17"
#define Module_HelpVersion              "0.17 (15 Oct 2016)"
#define Module_LibraryVersionInfo       "0:17"
@


1.16
log
@Build fix
There are no headers to export, so say so.

Version 0.16. Tagged as 'SDCMOS-0_16'
@
text
@d1 1
a1 1
/* (0.16)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.16
d9 1
a9 1
#define Module_Date_CMHG                03 Aug 2015
d11 2
a12 2
#define Module_MajorVersion             "0.16"
#define Module_Version                  16
d14 1
a14 1
#define Module_Date                     "03 Aug 2015"
d16 1
a16 1
#define Module_ApplicationDate          "03-Aug-15"
d21 3
a23 3
#define Module_FullVersion              "0.16"
#define Module_HelpVersion              "0.16 (03 Aug 2015)"
#define Module_LibraryVersionInfo       "0:16"
@


1.15
log
@  Add Raspberry Pi Compute module support
Detail:
  The default drive on the Compute module is SDFS::4 rather than SDFS::0 as
  on all other platforms which use this module. Rather than duplicating the
  platform detect code in SDFS, SDCMOS now canonicalises a looser filespec,
  effectively letting SDFS decide which drive to store the CMOS on for us.
Admin:
  Tested on Compute module and Pi 2

Version 0.15. Tagged as 'SDCMOS-0_15'
@
text
@d1 1
a1 1
/* (0.15)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.15
d9 1
a9 1
#define Module_Date_CMHG                03 Feb 2015
d11 2
a12 2
#define Module_MajorVersion             "0.15"
#define Module_Version                  15
d14 1
a14 1
#define Module_Date                     "03 Feb 2015"
d16 1
a16 1
#define Module_ApplicationDate          "03-Feb-15"
d21 3
a23 3
#define Module_FullVersion              "0.15"
#define Module_HelpVersion              "0.15 (03 Feb 2015)"
#define Module_LibraryVersionInfo       "0:15"
@


1.14
log
@  Add another SDCMOS build variant
Detail:
  Enabled by setting StoreAtDiscAddress on the amu command line or using
  -options in the Components file, this allows the CMOS to be stored at a
  fixed address on the SD card. Useful on platforms that don't use a boot
  FAT partition.

Version 0.14. Tagged as 'SDCMOS-0_14'
@
text
@d1 1
a1 1
/* (0.14)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.14
d9 1
a9 1
#define Module_Date_CMHG                04 Nov 2014
d11 2
a12 2
#define Module_MajorVersion             "0.14"
#define Module_Version                  14
d14 1
a14 1
#define Module_Date                     "04 Nov 2014"
d16 1
a16 1
#define Module_ApplicationDate          "04-Nov-14"
d21 3
a23 3
#define Module_FullVersion              "0.14"
#define Module_HelpVersion              "0.14 (04 Nov 2014)"
#define Module_LibraryVersionInfo       "0:14"
@


1.13
log
@  Add fallback for simplified Raspberry Pi distributions
Detail:
  Much like the OMAP builds of this module allow for SDFS::0 either being
  a plain FAT disc or a FileCore disc containing a FAT partition, the module
  now allows for cases where SDFS::0 is a FAT disc on Raspberry Pi as well
  as the more normal FileCore disc.
Admin:
  Tested on Raspberry Pi

Version 0.13. Tagged as 'SDCMOS-0_13'
@
text
@d1 1
a1 1
/* (0.13)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.13
d9 1
a9 1
#define Module_Date_CMHG                29 Apr 2014
d11 2
a12 2
#define Module_MajorVersion             "0.13"
#define Module_Version                  13
d14 1
a14 1
#define Module_Date                     "29 Apr 2014"
d16 1
a16 1
#define Module_ApplicationDate          "29-Apr-14"
d21 3
a23 3
#define Module_FullVersion              "0.13"
#define Module_HelpVersion              "0.13 (29 Apr 2014)"
#define Module_LibraryVersionInfo       "0:13"
@


1.12
log
@Leave clock alone if RTC driver is active
Might fix problem of time jumping backwards on Pis fitted with RTC expansion hardware.

Version 0.12. Tagged as 'SDCMOS-0_12'
@
text
@d1 1
a1 1
/* (0.12)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.12
d9 1
a9 1
#define Module_Date_CMHG                22 Dec 2013
d11 2
a12 2
#define Module_MajorVersion             "0.12"
#define Module_Version                  12
d14 1
a14 1
#define Module_Date                     "22 Dec 2013"
d16 1
a16 1
#define Module_ApplicationDate          "22-Dec-13"
d21 3
a23 3
#define Module_FullVersion              "0.12"
#define Module_HelpVersion              "0.12 (22 Dec 2013)"
#define Module_LibraryVersionInfo       "0:12"
@


1.11
log
@Internationalised
Just one message swapped out.

Version 0.11. Tagged as 'SDCMOS-0_11'
@
text
@d1 1
a1 1
/* (0.11)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.11
d9 1
a9 1
#define Module_Date_CMHG                18 Nov 2013
d11 2
a12 2
#define Module_MajorVersion             "0.11"
#define Module_Version                  11
d14 1
a14 1
#define Module_Date                     "18 Nov 2013"
d16 1
a16 1
#define Module_ApplicationDate          "18-Nov-13"
d21 3
a23 3
#define Module_FullVersion              "0.11"
#define Module_HelpVersion              "0.11 (18 Nov 2013)"
#define Module_LibraryVersionInfo       "0:11"
@


1.10
log
@Add startup check for presence of NVRAM HAL device
Logic is now
 * if NVRAM device is present, go dormant
 * if CMOS file is absent, go dormant
 * otherwise shadow it
or if StoreInHAL, behave as before.
Unrelated, added Hdr prefixes to includes so they can be double clicked on to open. Swap out OS_Word subreasons for symbolic names.

Version 0.10. Tagged as 'SDCMOS-0_10'
@
text
@d1 1
a1 1
/* (0.10)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.10
d9 1
a9 1
#define Module_Date_CMHG                14 Jul 2013
d11 2
a12 2
#define Module_MajorVersion             "0.10"
#define Module_Version                  10
d14 1
a14 1
#define Module_Date                     "14 Jul 2013"
d16 1
a16 1
#define Module_ApplicationDate          "14-Jul-13"
d21 3
a23 3
#define Module_FullVersion              "0.10"
#define Module_HelpVersion              "0.10 (14 Jul 2013)"
#define Module_LibraryVersionInfo       "0:10"
@


1.9
log
@Call the X version of the time setting SWI

Version 0.09. Tagged as 'SDCMOS-0_09'
@
text
@d1 1
a1 1
/* (0.09)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.09
d9 1
a9 1
#define Module_Date_CMHG                16 Oct 2012
d11 2
a12 2
#define Module_MajorVersion             "0.09"
#define Module_Version                  9
d14 1
a14 1
#define Module_Date                     "16 Oct 2012"
d16 1
a16 1
#define Module_ApplicationDate          "16-Oct-12"
d21 3
a23 3
#define Module_FullVersion              "0.09"
#define Module_HelpVersion              "0.09 (16 Oct 2012)"
#define Module_LibraryVersionInfo       "0:9"
@


1.8
log
@Timestamp the RPi HAL on fake HAL CMOS update
As the penny pinchers didn't fit a hardware real time clock, on a CMOS write (or desktop shutdown) the HAL CMOS is stamped with the current time. On power up, if the time is found to be 1970 (the kernel default) the last shutdown time is used instead - while this time is going to be incorrect it should at least ensure the time doesn't go backwards in the moments before NetTime manages to find a time server.

Version 0.08. Tagged as 'SDCMOS-0_08'
@
text
@d1 1
a1 1
/* (0.08)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.08
d9 1
a9 1
#define Module_Date_CMHG                05 Oct 2012
d11 2
a12 2
#define Module_MajorVersion             "0.08"
#define Module_Version                  8
d14 1
a14 1
#define Module_Date                     "05 Oct 2012"
d16 1
a16 1
#define Module_ApplicationDate          "05-Oct-12"
d21 3
a23 3
#define Module_FullVersion              "0.08"
#define Module_HelpVersion              "0.08 (05 Oct 2012)"
#define Module_LibraryVersionInfo       "0:8"
@


1.7
log
@Fix failure to terminate when no CMOS file found
Detail:
  s/sdcmos - Previous change accidentally resulted in the removal of the branch to the termination code when the initialisation callback fails to find a CMOS file, resulting in the module claiming ByteV and causing shenanigans on CMOS saves.
Admin:
  Tested on BB-xM
  Fixes issue reported on forums with Configure plugins throwing errors:
  http://www.riscosopen.org/forum/forums/11/topics/1329


Version 0.07. Tagged as 'SDCMOS-0_07'
@
text
@d1 1
a1 1
/* (0.07)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.07
d9 1
a9 1
#define Module_Date_CMHG                03 Oct 2012
d11 2
a12 2
#define Module_MajorVersion             "0.07"
#define Module_Version                  7
d14 1
a14 1
#define Module_Date                     "03 Oct 2012"
d16 1
a16 1
#define Module_ApplicationDate          "03-Oct-12"
d21 3
a23 3
#define Module_FullVersion              "0.07"
#define Module_HelpVersion              "0.07 (03 Oct 2012)"
#define Module_LibraryVersionInfo       "0:7"
@


1.6
log
@Make non-StoreInHAL variant look for both $.CMOS and $.!Boot.CMOS
Detail:
  s/sdcmos - Reworked initialisation a bit to allow the code to look for CMOS files in multiple places.
  Specifically, non-StoreInHAL variants now look for both $.CMOS and $.!Boot.CMOS.
  This allows the special FAT+FileCore partitioned SD cards to be used with more than just the Raspberry Pi; specifically Pandora+TouchBook, where not requiring USB or a 2nd SD card for a FileCore partition is desireable
Admin:
  Tested on Pandora


Version 0.06. Tagged as 'SDCMOS-0_06'
@
text
@d1 1
a1 1
/* (0.06)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.06
d9 1
a9 1
#define Module_Date_CMHG                27 Sep 2012
d11 2
a12 2
#define Module_MajorVersion             "0.06"
#define Module_Version                  6
d14 1
a14 1
#define Module_Date                     "27 Sep 2012"
d16 1
a16 1
#define Module_ApplicationDate          "27-Sep-12"
d21 3
a23 3
#define Module_FullVersion              "0.06"
#define Module_HelpVersion              "0.06 (27 Sep 2012)"
#define Module_LibraryVersionInfo       "0:6"
@


1.5
log
@Fix R7 corruption on CMOS write when StoreInHAL is TRUE
Detail:
  s/sdcmos - MyByteV now preserves R7 when StoreInHAL is true, preventing it from being corrupted
Admin:
  Tested on Raspberry Pi with high processor vectors
  Fixes Boot:Choices.Internet.Startup being left as filetype text, due to InetSetup's InternetEnabled pointer being corrupted and left pointing at &000000C3


Version 0.05. Tagged as 'SDCMOS-0_05'
@
text
@d1 1
a1 1
/* (0.05)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.05
d9 1
a9 1
#define Module_Date_CMHG                16 Sep 2012
d11 2
a12 2
#define Module_MajorVersion             "0.05"
#define Module_Version                  5
d14 1
a14 1
#define Module_Date                     "16 Sep 2012"
d16 1
a16 1
#define Module_ApplicationDate          "16-Sep-12"
d21 3
a23 3
#define Module_FullVersion              "0.05"
#define Module_HelpVersion              "0.05 (16 Sep 2012)"
#define Module_LibraryVersionInfo       "0:5"
@


1.4
log
@Reinstate file existence for StoreInHAL={TRUE} case
Detail:
  s/sdcmos - The previous change to remove the filetype check when StoreInHAL={TRUE} also had the side-effect of removing the check for whether the file exists.
  This resulted in the module not terminating itself if the file was absent, and consequently all attempts to write to CMOS would generate a 'file not found' error, causing assorted bits of code to malfunction.
Admin:
  Tested on Raspberry Pi


Version 0.04. Tagged as 'SDCMOS-0_04'
@
text
@d1 1
a1 1
/* (0.04)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.04
d9 1
a9 1
#define Module_Date_CMHG                01 Sep 2012
d11 2
a12 2
#define Module_MajorVersion             "0.04"
#define Module_Version                  4
d14 1
a14 1
#define Module_Date                     "01 Sep 2012"
d16 1
a16 1
#define Module_ApplicationDate          "01-Sep-12"
d21 3
a23 3
#define Module_FullVersion              "0.04"
#define Module_HelpVersion              "0.04 (01 Sep 2012)"
#define Module_LibraryVersionInfo       "0:4"
@


1.3
log
@  Relaxed filetype checking on ROM image file in Raspberry Pi case
Detail:
  Too many people were updating the ROM image file (for example using other
  OSes?) such that its filetype wasn't one of the two SDCMOS considered to
  be valid - EPROM or DOS. This resulted in CMOS support apparently not being
  functional for them. Since the filename tested for ("riscos/img") is
  probably quite a strong indicator that it really is a RISC OS ROM image,
  I think it's safe enough to remove the filetype check altogether.
Admin:
  Tested on a Raspberry Pi

Version 0.03. Tagged as 'SDCMOS-0_03'
@
text
@d1 1
a1 1
/* (0.03)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.03
d9 1
a9 1
#define Module_Date_CMHG                28 Aug 2012
d11 2
a12 2
#define Module_MajorVersion             "0.03"
#define Module_Version                  3
d14 1
a14 1
#define Module_Date                     "28 Aug 2012"
d16 1
a16 1
#define Module_ApplicationDate          "28-Aug-12"
d21 3
a23 3
#define Module_FullVersion              "0.03"
#define Module_HelpVersion              "0.03 (28 Aug 2012)"
#define Module_LibraryVersionInfo       "0:3"
@


1.2
log
@  Added support for writing fake CMOS on Raspberry Pi
Detail:
  For the Raspberry Pi, the CMOS RAM is embedded within the ROM image, since
  the default bootloader isn't flexible enough to load it from a separate
  file (and we need to know CMOS contents before modules like SDFS have
  initialised). This functionality is enabled by the build switch StoreInHAL
  passed in via the Makefile. Unrelatedly, removed a double free of the module
  workspace on finalisation.
Admin:
  Tested on Raspberry Pi.

Version 0.02. Tagged as 'SDCMOS-0_02'
@
text
@d1 1
a1 1
/* (0.02)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.02
d9 1
a9 1
#define Module_Date_CMHG                15 Jul 2012
d11 2
a12 2
#define Module_MajorVersion             "0.02"
#define Module_Version                  2
d14 1
a14 1
#define Module_Date                     "15 Jul 2012"
d16 1
a16 1
#define Module_ApplicationDate          "15-Jul-12"
d21 3
a23 3
#define Module_FullVersion              "0.02"
#define Module_HelpVersion              "0.02 (15 Jul 2012)"
#define Module_LibraryVersionInfo       "0:2"
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* (0.01)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.01
d9 1
a9 1
#define Module_Date_CMHG                07 Jun 2012
d11 2
a12 2
#define Module_MajorVersion             "0.01"
#define Module_Version                  1
d14 1
a14 1
#define Module_Date                     "07 Jun 2012"
d16 1
a16 1
#define Module_ApplicationDate          "07-Jun-12"
d21 3
a23 3
#define Module_FullVersion              "0.01"
#define Module_HelpVersion              "0.01 (07 Jun 2012)"
#define Module_LibraryVersionInfo       "0:1"
@


1.1.1.1
log
@  Initial import of SDCMOS module
Detail:
  This module intercepts ByteV so every time a CMOS bte is written, it
  saves the CMOS to the file "CMOS" on whichever card was in drive SDFS::0
  when the module initialised (which will normally be the boot card, since
  the module would not normally be reinitialised after ROM initialisation).
  If you don't want to be nagged to change cards every time the CMOS is
  written, you have two options:
  * Delete the CMOS file from your boot SD card, and update your boot
    script so it doesn't try to load it
  * Use *Unplug SDCMOS
  In either case, you will then require an EEPROM carrier board if you want
  your settings to persist across a reset.
Admin:
  Tested on beagleboard and beagleboard-xM, both with and without a CMOS
  file on the boot card.
@
text
@@
