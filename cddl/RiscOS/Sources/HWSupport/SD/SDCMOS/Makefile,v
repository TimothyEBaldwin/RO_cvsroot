head	1.4;
access;
symbols
	SDCMOS-0_20:1.4
	SDCMOS-0_19:1.4
	SDCMOS-0_18:1.4
	SDCMOS-0_17:1.4
	SDCMOS-0_16:1.4
	SDCMOS-0_15:1.3
	SDCMOS-0_14:1.3
	SDCMOS-0_13:1.3
	SDCMOS-0_12:1.3
	SDCMOS-0_11:1.3
	SDCMOS-0_10:1.3
	SDCMOS-0_09:1.3
	SDCMOS-0_08:1.3
	SDCMOS-0_07:1.3
	SDCMOS-0_06:1.3
	SDCMOS-0_05:1.3
	SDCMOS-0_04:1.3
	SDCMOS-0_03:1.3
	SDCMOS-0_02:1.3
	SDCMOS-0_01:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2015.08.03.07.06.48;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	N9omgJBq9kuDaNvy;

1.3
date	2012.07.20.10.38.30;	author bavison;	state Exp;
branches;
next	1.2;
commitid	T3NMKI4J3TmZYhdw;

1.2
date	2012.07.15.12.07.19;	author bavison;	state Exp;
branches;
next	1.1;
commitid	frOQbJE0HDiPDEcw;

1.1
date	2012.06.07.22.56.29;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	fLbuMMMFH3oNpP7w;

1.1.1.1
date	2012.06.07.22.56.29;	author bavison;	state Exp;
branches;
next	;
commitid	fLbuMMMFH3oNpP7w;


desc
@@


1.4
log
@Build fix
There are no headers to export, so say so.

Version 0.16. Tagged as 'SDCMOS-0_16'
@
text
@# Makefile for SDCMOS	

COMPONENT = SDCMOS
CMHGFILE  =
HDRS      =
CUSTOMRES = no
ASFLAGS   = ${MYASFLAGS}

include CModule

# Dynamic dependencies:
@


1.3
log
@  Remove (harmless) error in resources phase

Retagged as 'SDCMOS-0_02'
@
text
@a3 1
RES_OBJ   =
d5 2
a6 1
CUSTOMRES = custom
@


1.2
log
@  Added support for writing fake CMOS on Raspberry Pi
Detail:
  For the Raspberry Pi, the CMOS RAM is embedded within the ROM image, since
  the default bootloader isn't flexible enough to load it from a separate
  file (and we need to know CMOS contents before modules like SDFS have
  initialised). This functionality is enabled by the build switch StoreInHAL
  passed in via the Makefile. Unrelatedly, removed a double free of the module
  workspace on finalisation.
Admin:
  Tested on Raspberry Pi.

Version 0.02. Tagged as 'SDCMOS-0_02'
@
text
@d6 1
@


1.1
log
@Initial revision
@
text
@d6 1
@


1.1.1.1
log
@  Initial import of SDCMOS module
Detail:
  This module intercepts ByteV so every time a CMOS bte is written, it
  saves the CMOS to the file "CMOS" on whichever card was in drive SDFS::0
  when the module initialised (which will normally be the boot card, since
  the module would not normally be reinitialised after ROM initialisation).
  If you don't want to be nagged to change cards every time the CMOS is
  written, you have two options:
  * Delete the CMOS file from your boot SD card, and update your boot
    script so it doesn't try to load it
  * Use *Unplug SDCMOS
  In either case, you will then require an EEPROM carrier board if you want
  your settings to persist across a reset.
Admin:
  Tested on beagleboard and beagleboard-xM, both with and without a CMOS
  file on the boot card.
@
text
@@
