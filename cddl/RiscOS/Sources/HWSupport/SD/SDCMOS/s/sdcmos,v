head	1.20;
access;
symbols
	SDCMOS-0_20:1.20
	SDCMOS-0_19:1.19
	SDCMOS-0_18:1.18
	SDCMOS-0_17:1.17
	SDCMOS-0_16:1.16
	SDCMOS-0_15:1.16
	SDCMOS-0_14:1.15
	SDCMOS-0_13:1.14
	SDCMOS-0_12:1.13
	SDCMOS-0_11:1.11
	SDCMOS-0_10:1.10
	SDCMOS-0_09:1.9
	SDCMOS-0_08:1.8
	SDCMOS-0_07:1.7
	SDCMOS-0_06:1.6
	SDCMOS-0_05:1.5
	SDCMOS-0_04:1.4
	SDCMOS-0_03:1.3
	SDCMOS-0_02:1.2
	SDCMOS-0_01:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.20
date	2018.06.21.21.49.12;	author jballance;	state Exp;
branches;
next	1.19;
commitid	wyWpSxG6SUsNccHA;

1.19
date	2018.06.19.18.44.27;	author jballance;	state Exp;
branches;
next	1.18;
commitid	nk6QAoHgWNRofVGA;

1.18
date	2017.08.12.09.24.13;	author rool;	state Exp;
branches;
next	1.17;
commitid	fE0GNnItCr619U2A;

1.17
date	2016.10.15.14.34.42;	author rsprowson;	state Exp;
branches;
next	1.16;
commitid	AhZDiPlOsqzoxfqz;

1.16
date	2015.02.03.19.21.12;	author bavison;	state Exp;
branches;
next	1.15;
commitid	ZQixtkMn0jqh3B8y;

1.15
date	2014.11.04.02.24.41;	author bavison;	state Exp;
branches;
next	1.14;
commitid	m6ODWDke65TTlOWx;

1.14
date	2014.04.29.13.21.31;	author bavison;	state Exp;
branches;
next	1.13;
commitid	voMGinv965YT3Ayx;

1.13
date	2013.12.23.21.27.19;	author rsprowson;	state Exp;
branches;
next	1.12;
commitid	MxI2MNHTgfIiPiix;

1.12
date	2013.12.22.21.35.49;	author rsprowson;	state Exp;
branches;
next	1.11;
commitid	77yfWi0XqtXxUaix;

1.11
date	2013.11.18.21.29.57;	author rsprowson;	state Exp;
branches;
next	1.10;
commitid	WMQZqnHPUMljYNdx;

1.10
date	2013.07.14.21.24.39;	author rsprowson;	state Exp;
branches;
next	1.9;
commitid	opZotooRSUhA1uXw;

1.9
date	2012.10.16.20.39.45;	author rsprowson;	state Exp;
branches;
next	1.8;
commitid	lnB9DoPJd5RfuEow;

1.8
date	2012.10.05.08.14.36;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	T96F2SNnHTeyIanw;

1.7
date	2012.10.03.22.18.42;	author jlee;	state Exp;
branches;
next	1.6;
commitid	U9i5wAPbIJq7sZmw;

1.6
date	2012.09.27.01.20.09;	author jlee;	state Exp;
branches;
next	1.5;
commitid	88Xjk0tRD9LjG6mw;

1.5
date	2012.09.16.15.40.13;	author jlee;	state Exp;
branches;
next	1.4;
commitid	Ta304yOdrPeiNLkw;

1.4
date	2012.09.01.20.41.23;	author jlee;	state Exp;
branches;
next	1.3;
commitid	Zw9UGSQYFByvWRiw;

1.3
date	2012.08.28.20.17.14;	author bavison;	state Exp;
branches;
next	1.2;
commitid	D4rM2b9sVHZbWliw;

1.2
date	2012.07.15.12.07.22;	author bavison;	state Exp;
branches;
next	1.1;
commitid	frOQbJE0HDiPDEcw;

1.1
date	2012.06.07.22.56.29;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	fLbuMMMFH3oNpP7w;

1.1.1.1
date	2012.06.07.22.56.29;	author bavison;	state Exp;
branches;
next	;
commitid	fLbuMMMFH3oNpP7w;


desc
@@


1.20
log
@  Updated various comments. Cleared unneeded mods
Detail:
  Removed most of the mods inserted in last update.
  Improved the comments.
Admin:
  tested on iMx6


Version 0.20. Tagged as 'SDCMOS-0_20'
@
text
@;
; CDDL HEADER START
;
; The contents of this file are subject to the terms of the
; Common Development and Distribution License (the "Licence").
; You may not use this file except in compliance with the Licence.
;
; You can obtain a copy of the licence at
; cddl/RiscOS/Sources/HWSupport/SD/SDCMOS/LICENCE.
; See the Licence for the specific language governing permissions
; and limitations under the Licence.
;
; When distributing Covered Code, include this CDDL HEADER in each
; file and include the Licence file. If applicable, add the
; following below this CDDL HEADER, with the fields enclosed by
; brackets "[]" replaced with your own identifying information:
; Portions Copyright [yyyy] [name of copyright owner]
;
; CDDL HEADER END
;
; Copyright 2012 Ben Avison.  All rights reserved.
; Portions Copyright 2012 Jeffrey Lee.
; Use is subject to license terms.
;

; Note SDCMOS is responsible for keepin the copy of CMOS RAM stored on
; the SD card updated. It is NOT responsible for loading it - loading
; is done as part of the ROM image loading process.
;
; SDCMOS will only act if no other CMOS RAM is reported to be present.
;
; If StoreAtDiscAddress supplies a disc address the CMOS is stored at that
; hard coded disc address
; Otherwise it is stored in file on disc.
; Where UBoot loading is used this file is loaded before the ROM image is loaded
; Where StoreAtDiscAddress is used the disc address used is typically part of
; the rom image that gets loaded.

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Proc
        GET     Hdr:HighFSI
        GET     Hdr:ModHand
        GET     Hdr:OsBytes
        GET     Hdr:OsWords
        GET     Hdr:CMOS
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:Territory
        GET     Hdr:FileTypes
        GET     Hdr:Services
        GET     Hdr:MsgTrans
        GET     Hdr:RTC
        GET     Hdr:HALDevice
        GET     Hdr:HALEntries
        GET     Hdr:SDFS
        GET     VersionASM
        
        AREA    |Asm$$Code|, CODE, READONLY, PIC
        
        ENTRY
        
        DCD     0 ; Start
        DCD     Init - |Asm$$Code|
        DCD     Final - |Asm$$Code|
      [ :LNOT::DEF: StoreAtDiscAddress
        DCD     Services - |Asm$$Code|
      |
        DCD     0 ; Service call handler
      ]
        DCD     Title - |Asm$$Code|
        DCD     Help - |Asm$$Code|
        DCD     0 ; Keyword table
        DCD     0 ; SWI chunk
        DCD     0 ; SWI handler
        DCD     0 ; SWI table
        DCD     0 ; SWI decoder
        DCD     0 ; Messages
        DCD     Flags - |Asm$$Code|
        
Title   =       Module_ComponentName, 0
Help    =       Module_ComponentName, 9, 9, Module_HelpVersion, 0
        ALIGN
Flags   DCD     ModuleFlag_32bit
        
      [ :LNOT::DEF: StoreAtDiscAddress

NonCanonicalisedPath
        =       "SDFS:$.CMOS", 0
NonCanonicalisedPath2
        =       "SDFS:$.!Boot.Loader.CMOS", 0        
        ALIGN

SaveCMOS
        =       "SaveCMOS "
Len_SaveCMOS * .-SaveCMOS
        ALIGN

      ]


ReqdAPIMajor *  0

Init    ROUT
        Entry
        ; If the HAL proclaims hardware CMOS is present, go dormant
        MOV     r6, r8
        MOV     r1, #0
10
        LDR     r0, =(HALDeviceType_SysPeri + HALDeviceSysPeri_NVRAM) :OR: (ReqdAPIMajor:SHL:16)
        MOV     r8, #OSHW_DeviceEnumerate
        SWI     XOS_Hardware
        EXIT    VS
        
        CMP     r1, #-1                 ; All done with no matches, try file
        BEQ     %FT30

        LDRH    r3, [r2, #HALDevice_ID]
        TEQ     r3, #HALDeviceID_NVRAM_24C02
        TEQNE   r3, #HALDeviceID_NVRAM_24C04
        TEQNE   r3, #HALDeviceID_NVRAM_24C08
        TEQNE   r3, #HALDeviceID_NVRAM_24C16
        BNE     %BT10                   ; Was NVRAM, but not a known one

        ADR     r0, ErrorBlock_HardwareDepends
        MOV     r1, #0
        MOV     r2, #0
        SWI     XMessageTrans_ErrorLookup
        EXIT
20
        MakeInternatErrorBlock HardwareDepends,,HWDep
30
        MOV     r8, r6

        ; This module is designed to be included in a ROM, in which case we have
        ; to take account of the fact that SDFS::0 isn't properly initialised
        ; until the callbacks after ROM init.
        ADR     r0, CallBackFromInit
        MOV     r1, r12
        SWI     XOS_AddCallBack
        EXIT

CallBackFromInit ROUT
        Push    "lr" ; separate instructions to reduce warnings
        ADD     lr, sp, #4
        Push    "r0-r6, lr" ; yes, need to stack sp
        
      [ :LNOT::DEF: StoreAtDiscAddress
        ; We assume that we're entered during or soon after boot. In which case,
        ; if there is an SD card inserted, and if it contains a file called
        ; "CMOS" in its root directory of the correct filetype, then we must
        ; assume that it could have been used to initialise the kernel's CMOS
        ; RAM cache, and therefore needs updating whenever someone writes CMOS.

        ADR     r1, NonCanonicalisedPath
        BL      TryInit
        ADRVS   r1, NonCanonicalisedPath2
        BLVS    TryInit
        BVS     %FT90
      ]

        ; All good - get on ByteV
10      MOV     r0, #ByteV
        ADR     r1, MyByteV
        MOV     r2, r12
        SWI     XOS_Claim
        BVS     %F90

        ; See if a CMOS reset has occurred, if so our copy on the SD card
        ; is stale and we need to write out the Kernel's clean reset copy
        MOV     r0, #OsByte_ReadCMOS
        MOV     r1, #SystemSpeedCMOS
        SWI     XOS_Byte
        MOVVS   r2, #0
        TST     r2, #CMOSResetBit
        MOVNE   r0, #OsByte_WriteCMOS
        SWINE   XOS_Byte ; just echo it back to trigger a SaveCMOS
        CLRV

        Pull    "r0-r6, lr" ; separate instructions to reduce warnings
        Pull    "pc"

90      ; Error detected during callback - kill the module and exit
        ASSERT  %F99-%F98 = 8
        ADR     r0, %F98
        LDMIA   r0, {r1-r2}
        Push    "r1-r2"
        MOV     r0, #1
        MOV     r1, sp
        ADD     r2, sp, #%F99-%F98-1
        SWI     XOS_SynchroniseCodeAreas
        MOV     r0, #ModHandReason_Delete
        ADR     r1, Title
        ADD     r2, sp, #%F99-%F98 ; point r2 at stack frame
        MOV     pc, sp
        ; This last bit is executed after the module is killed so can't safely
        ; be executed in place - do it from the stack instead
98      SWI     XOS_Module
        LDMIA   r2, {r0-r6, sp, pc} ; atomic update of sp (which makes this code volatile) with pc
99


      [ :LNOT::DEF: StoreAtDiscAddress
; In: r1 = filename
; Out: Regs corrupt
;      V set on failure
;      No error pointer returned
TryInit ROUT
        Entry
        ; Find how long the canonicalised name is
        MOV     r0, #FSControl_CanonicalisePath
        MOV     r2, #0
        MOV     r3, #0
        MOV     r4, #0
        MOV     r5, #0
        SWI     XOS_FSControl
        BVS     %F90
        
        ; Allocate a buffer for the command string - will contain "SaveCMOS "
        ; plus the canonicalised name of the file, plus a terminator
        RSB     r3, r5, #Len_SaveCMOS + 1
        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        BVS     %F90
        STR     r2, [r12]
        
        ; Get the canonicalised name
        ADD     r2, r2, #Len_SaveCMOS
        MOV     r5, r3
        MOV     r0, #FSControl_CanonicalisePath
        MOV     r3, #0
        SWI     XOS_FSControl
        BVS     %F90

        ; Copy in the "SaveCMOS " part now we have a few more working registers
        ASSERT  Len_SaveCMOS = 9
        SUB     r2, r2, #Len_SaveCMOS
        ADR     r3, SaveCMOS
        LDMIA   r3!, {r4-r5}
        LDRB    r6, [r3]
        STMIA   r2!, {r4-r5}
        STRB    r6, [r2], #1

        ; Check it's a file (or image file)
        MOV     r0, #OSFile_ReadWithTypeNoPath
        MOV     r1, r2
        SWI     XOS_File
        BVS     %F90
        TST     r0, #object_file
        BEQ     %F90

        ; Check it's a sensible filetype
        LDR     r0, =FileType_Configuration
        TEQ     r6, r0
        LDRNE   r0, =FileType_MSDOS
        TEQNE   r6, r0
        BNE     %F90

        ; If there's no RTC, try restoring the time from the file timestamp
        SWI     XRTC_Features
        BVC     %F80        ; V clear -> RTC driver is active

        AND     r4, r2, #&FF
        ORRS    r0, r4, r3
        BEQ     %F80        ; Clearly duff load/exec address (timestamp)

        Push    "r3-r4"

        ; If the time is in 1970 then the kernel didn't find a real time
        ; clock, and NetTime hasn't picked up a link yet
        SUB     sp, sp, #8
        MOV     r0, #OsWord_ReadRealTimeClock
        MOV     r1, #OWReadRTC_5ByteInt
        STRB    r1, [sp]
        MOV     r1, sp
        SWI     XOS_Word
        ADDVS   sp, sp, #8
        BVS     %F60

        LDR     r3, =((71 * 365) + 18) * 86400
        MOV     r0, #100    ; want cs to end of 1970 from epoch 1900
        UMULL   r3, r4, r0, r3 
        LDR     r0, [sp, #0]
        LDRB    r1, [sp, #4]
        SUBS    r14, r0, r3
        SBCS    r14, r1, r4
        ADD     sp, sp, #8  
        BPL     %F60        ; now > 1970

        ; Use load/exec address (timestamp) as a better guess
        MOV     r0, sp
        SWI     XTerritory_SetTime
        CLRV
60
        ADD     sp, sp, #8  ; Drop load/exec address
80
        ; All good
        CLRV
        EXIT

90
        ; Something went wrong
        ; Free our workspace to avoid potential leak if TryInit called multiple times
        LDR     r2, [r12]
        CMP     r2, #0
        MOVNE   r0, #ModHandReason_Free
        SWINE   XOS_Module
        MOV     r2, #0
        STR     r2, [r12]
        SETV
        EXIT

Services ROUT
        TEQ     r1, #Service_ShutDown
        MOVNE   pc, lr
        Push    "r0-r1, lr" ; keep original r0 in case OS_File returns an error
        LDR     r1, [r12]
        ADD     r1, r1, #Len_SaveCMOS
        MOV     r0, #OSFile_SetStamp
        SWI     XOS_File    ; stamp at shutdown so file timestamp is fresh
        Pull    "r0-r1, pc" ; and on with the shutdown (don't claim)
      ]
        
MyByteV
        TEQ     r0, #OsByte_WriteCMOS
        MOVNE   pc, lr      ; only interested in when the CMOS is written
        ADR     r0, %F10
        Push    "r0, r12"   ; set up address for claimant to return to (NB this code is not 26-bit compatible) 
        MOV     r0, #OsByte_WriteCMOS
        MOV     pc, lr      ; pass on, and...
10                          ; ... we end up here after the CMOS has been written
        Pull    "r12"       ; get our own r12 back
        Pull    "pc", VS    ; if an error, just pass it up to original claim address
      [ :DEF: StoreAtDiscAddress
        Push    "r0-r4,r6"
        MOV     r6, #0
        MOV     r0, #1
        MOV     r1, #StoreAtDiscAddress :SHR: 29
        MOV     r2, #0
        SWI     XSDFS_MiscOp
        BVS     %F75
        TEQ     r2, #1
        BNE     %F75 ; disc has been changed since boot - don't write to it
        
        MOV     r6, #256
        BL      CMOSToStack
        
        MOV     r1, #2
        LDR     r2, =StoreAtDiscAddress
        MOV     r3, sp
        MOV     r4, r6
        SWI     XSDFS_DiscOp
75
        ADD     sp, sp, r6
        STRVS   r0, [sp]
        Pull    "r0-r4,r6, pc" ; go to original claim address
      |
        Push    "r0"
        LDR     r0, [r12]
        SWI     XOS_CLI     ; save the CMOS to the file
        STRVS   r0, [sp]
        Pull    "r0, pc"    ; go to original claim address
      ]

      [ :DEF: StoreAtDiscAddress
CMOSToStack ROUT
        MOV     r4, lr
        ; Copy the CMOS RAM into a block on the stack (should be small enough)
        ; CMOS RAM image &00-&ef is stored in physical address order
        ; &40-&ff,&10-&3f
        ; R6 is byte count to use. Image is at sp to sp+r6-1
        SUB     sp, sp, r6
        MOV     r1, #0                ; CMOS address
30      MOV     r0, #OsByte_ReadCMOS
        CMP     R1, #&F0
        BGE     %FT31
        CMP     R1, #&C0
        ADDLT   R3, R1, #&40
        SUBGE   R3, R1, #&B0
        SWI     XOS_Byte
        MOVVS   r2, #0
        STRB    r2, [sp, r3]
31      ADD     r1, r1, #1
        CMP     r1, r6
        BLO     %B30
        MOV     r2, #-1
        STR     r2, [sp, #&0]         ; pseudo rtc space
        STR     r2, [sp, #&4]
        STR     r2, [sp, #&8]
        STR     r2, [sp, #&c]
        MOV     pc, r4

      ]

Final   ROUT
        Entry
        ; It's good practice to remove our callback here just in case we got
        ; killed before it was triggered.
        ADR     r0, CallBackFromInit
        MOV     r1, r12
        SWI     XOS_RemoveCallBack
        
        ; Get off ByteV, if we were on it
        MOV     r0, #ByteV
        ADR     r1, MyByteV
        MOV     r2, r12
        SWI     XOS_Release

        ; The block pointed at by r12 is freed for us by the kernel if nonzero
        
        CLRV
        EXIT



        END
@


1.19
log
@  Ensure cmos loaded at boot time in iMx6 if module active
Detail:
  Writes were saved to a SD based sector, but not read out at
  module initialisation
Admin:
  (highlight level of testing that has taken place)
  (bugfix number if appropriate)

  (overview of change)
Detail:
  (list files and functions that have changed)
Admin:
  (highlight level of testing that has taken place)
  (bugfix number if appropriate)


Version 0.19. Tagged as 'SDCMOS-0_19'
@
text
@d26 13
d101 2
a102 1
        
a161 22
      [ :DEF: StoreAtDiscAddress
        ; See if a CMOS reset has occurred, if not our copy on the SD card
        ; is usable, so load cmos from it
        ; do this before we sit on ByteV and react to CMOS writes
        MOV     r0, #OsByte_ReadCMOS
        MOV     r1, #SystemSpeedCMOS
        SWI     XOS_Byte
        MOVVS   r2, #0
        TST     r2, #CMOSResetBit
        BNE     %ft10               ; CMOS reset

        mov     r6, #256
        sub     sp, sp, r6
        MOV     r1, #1              ; read
        LDR     r2, =StoreAtDiscAddress
        MOV     r3, sp
        MOV     r4, r6
        SWI     XSDFS_DiscOp
        BLVC    StackToCMOS
        add     sp, sp, r6
      ]

d370 3
a372 1
        ; in physical address order
d374 1
a374 1
        MOV     r3, #0
d376 5
a380 7
        MOV     r1, r3
        CMP     r3, #&10
        ADDLO   r1, r1, #&40
        CMP     r3, #&40
        ADDLO   r1, r1, #&F0
        CMP     r3, #&100
        SUBLO   r1, r1, #&40
d384 2
a385 2
        ADD     r3, r3, #1
        CMP     r3, r6
d387 5
d393 1
a393 21
;
StackToCMOS ROUT
        MOV     r4, lr
        ; Copy a block on the stack into the CMOS RAM  (should be small enough)
        ; from physical address order
        ; R6 is byte count to use. Image is at sp to sp+r6-1
        MOV     r3, #0
31      MOV     r0, #OsByte_WriteCMOS
        MOV     r1, r3
        CMP     r3, #&10
        ADDLO   r1, r1, #&40
        CMP     r3, #&40
        ADDLO   r1, r1, #&F0
        CMP     r3, #&100
        SUBLO   r1, r1, #&40
        LDRB    r2, [sp, r3]
        SWI     XOS_Byte
        ADD     r3, r3, #1
        CMP     r3, r6
        BLO     %B31
        MOV     pc, r4
d414 3
a416 1
        
@


1.18
log
@Keep disc copy in sync with kernel when CMOS is reset
Detail:
  Check for a CMOS reset and re-save the disc copy if one happened, otherwise the kernel's default set is lost.
  The kernel clears the bit whenever there *isn't* a CMOS reset, so it doesn't matter what the state of the bit is trapped in the disc copy.
Admin:
  Submission for USB bounty.

Version 0.18. Tagged as 'SDCMOS-0_18'
@
text
@d148 23
a170 1
        
d172 1
a172 1
        MOV     r0, #ByteV
d396 21
@


1.17
log
@Drop StoreInHAL switch
No longer support or maintain the code which opened riscos.img and wrote values into it on the Pi.
However, carry over the logic which attempts to restore the time from the timestamp of the CMOS file from last shutdown so that the time (on a clockless Pi) is a better guess than the Unix epoch until the network time can be read.

Tested on a Pi 3.

Version 0.17. Tagged as 'SDCMOS-0_17'
@
text
@d155 12
@


1.16
log
@  Add Raspberry Pi Compute module support
Detail:
  The default drive on the Compute module is SDFS::4 rather than SDFS::0 as
  on all other platforms which use this module. Rather than duplicating the
  platform detect code in SDFS, SDCMOS now canonicalises a looser filespec,
  effectively letting SDFS decide which drive to store the CMOS on for us.
Admin:
  Tested on Compute module and Pi 2

Version 0.15. Tagged as 'SDCMOS-0_15'
@
text
@d9 1
a9 1
; cddl/RiscOS/Sources/FileSys/SDFS/SDFS/LICENCE.
a25 5
 [ :LNOT::DEF: StoreInHAL
        GBLL    StoreInHAL
StoreInHAL SETL {FALSE};
 ]

d54 1
a54 1
      [ StoreInHAL
d74 1
a74 12
 [ StoreInHAL
 
NonCanonicalisedPath
        =       "SDFS:$.!Boot.Loader.riscos/img", 0
NonCanonicalisedPath2
        =       "SDFS:$.riscos/img", 0
        ALIGN

CMOSMarker UND  #&C305
OSIm    =       "OSIm"

 ELIF :LNOT::DEF: StoreAtDiscAddress
d87 1
a87 1
 ]
a92 1
      [ :LNOT: StoreInHAL
d121 1
a121 1
      ]
d178 1
a178 1
 [ :LNOT::DEF: StoreAtDiscAddress
a193 4
      [ StoreInHAL
        ; Allocate a buffer to hold filename of the ROM image plus terminator
        RSB     r3, r5, #1
      |
a196 1
      ]
a202 1
      [ :LNOT: StoreInHAL
a203 1
      ]
a209 1
      [ :LNOT: StoreInHAL
a217 1
      ]
a226 1
      [ :LNOT: StoreInHAL
d233 11
a243 1
      |
d253 1
a253 1
        BVS     %F80
d262 2
a263 30
        ADDPL   sp, sp, #8  ; now > 1970
        BPL     %F80

        ; Try and find the last saved value
        MOV     r0, #open_read :OR: open_mustopen :OR: open_nodir :OR: open_nopath
        LDR     r1, [r12]
        SWI     XOS_Find
        BVS     %F70
        MOV     r1, r0
        
        ; Search for the CMOS in the ROM on disc
        LDR     r5, CMOSMarker
        LDR     r6, OSIm
        MOV     r0, #OSGBPB_ReadFromPTR
50      MOV     r2, sp
        MOV     r3, #4
        SWI     XOS_GBPB
        BVS     %F60
        LDR     r14, [sp]
        TEQ     r14, r6
        BEQ     %F60        ; got to the end of the HAL and not found CMOS - give up
        TEQ     r14, r5
        BNE     %B50

        ; Read size of pseudo CMOS in HAL
        MOV     r2, sp
        MOV     r3, #4
        SWI     XOS_GBPB
        BVS     %F60
        LDR     r6, [sp]
d265 3
a267 18
        ; If there's no RTC, try restoring the time from the HAL timestamp
        SWI     XRTC_Features
        BVC     %F60        ; V clear -> RTC driver is active

        ; Read the last timestamp
        MOV     r0, #OSGBPB_ReadFromGiven
        MOV     r2, sp
        MOV     r3, #5
        ADD     r4, r4, r6
        SWI     XOS_GBPB
        BVS     %F60

        ; Check it's not unset
        LDR     r3, [sp, #0]
        LDRB    r4, [sp, #4]
        ORRS    r3, r4, r3
        MOVNE   r0, sp
        SWINE   XTerritory_SetTime
d270 1
a270 7
        MRS     r3, CPSR    ; preserve V set ness
        MOV     r0, #0      ; close file
        SWI     XOS_Find
        MSR     CPSR_f, r3
70
        ADD     sp, sp, #8  ; skip temp block
        BVS     %F90
a271 1
      ]
a286 1
 ] ; :LNOT::DEF: StoreAtDiscAddress
a287 1
      [ StoreInHAL
d291 6
a296 5
        Push    "r0, lr"    ; keep original r0 in case MyByteV returns an error
        Push    "pc"
        BL      %FT15       ; now write the values out, along with the timestamp
        NOP
        Pull    "r0, pc"    ; and on with the shutdown (don't claim)
a331 69
      ELIF StoreInHAL
15
        Push    "r0-r7"
        SUB     sp, sp, #4  ; allocate space on stack for buffer
        
        MOV     r7, r1
        MOV     r0, #open_update :OR: open_mustopen :OR: open_nodir :OR: open_nopath
        LDR     r1, [r12]
        SWI     XOS_Find
        BVS     %F90
        MOV     r1, r0
        
        ; Search for the CMOS in the ROM on disc - can't be sure it matches the
        ; running version!
        LDR     r5, CMOSMarker
        LDR     r6, OSIm
        MOV     r0, #OSGBPB_ReadFromPTR      
20      MOV     r2, sp
        MOV     r3, #4
        SWI     XOS_GBPB
        BVS     %F80
        LDR     r14, [sp]
        TEQ     r14, r6
        BEQ     %F80        ; got to the end of the HAL and not found CMOS - give up
        TEQ     r14, r5
        BNE     %B20
        
        ; Read size of block in HAL
        MOV     r2, sp
        MOV     r3, #4
        SWI     XOS_GBPB
        BVS     %F80
        LDR     r6, [sp]
        MOV     r5, r1      ; keep file handle safe
        
        BL      CMOSToStack

        ; Overwrite the HAL with the block from the stack
        MOV     r0, #OSGBPB_WriteAtPTR
        MOV     r1, r5
        MOV     r2, sp
        MOV     r3, r6
        SWI     XOS_GBPB
        BVS     %F75

        ; Refresh the timestamp
        MOV     r0, #OsWord_ReadRealTimeClock
        MOV     r1, #OWReadRTC_5ByteInt
        STRB    r1, [sp]
        MOV     r1, sp
        SWI     XOS_Word

        MOVVC   r0, #OSGBPB_WriteAtPTR
        MOVVC   r1, r5
        MOVVC   r2, sp
        MOVVC   r3, #5
        SWIVC   XOS_GBPB
75
        ADD     sp, sp, r6

80      MOV     r2, r0      ; preserve the original error
        MRS     r3, CPSR
        MOV     r0, #0      ; close file
        SWI     XOS_Find
        MOV     r0, r2
        MSR     CPSR_f, r3
90      ADD     sp, sp, #4  ; skip temp block
        STRVS   r0, [sp]
        Pull    "r0-r7, pc" ; go to original claim address
d340 1
a340 1
      [ StoreInHAL :LOR: :DEF: StoreAtDiscAddress
@


1.15
log
@  Add another SDCMOS build variant
Detail:
  Enabled by setting StoreAtDiscAddress on the amu command line or using
  -options in the Components file, this allows the CMOS to be stored at a
  fixed address on the SD card. Useful on platforms that don't use a boot
  FAT partition.

Version 0.14. Tagged as 'SDCMOS-0_14'
@
text
@d82 1
a82 1
        =       "SDFS::0.$.!Boot.Loader.riscos/img", 0
d84 1
a84 1
        =       "SDFS::0.$.riscos/img", 0
d93 1
a93 1
        =       "SDFS::0.$.CMOS", 0
d95 1
a95 1
        =       "SDFS::0.$.!Boot.Loader.CMOS", 0        
@


1.14
log
@  Add fallback for simplified Raspberry Pi distributions
Detail:
  Much like the OMAP builds of this module allow for SDFS::0 either being
  a plain FAT disc or a FileCore disc containing a FAT partition, the module
  now allows for cases where SDFS::0 is a FAT disc on Raspberry Pi as well
  as the more normal FileCore disc.
Admin:
  Tested on Raspberry Pi

Version 0.13. Tagged as 'SDCMOS-0_13'
@
text
@d49 1
d90 1
a90 1
 |
a97 2
ReqdAPIMajor *  0

d105 2
d152 1
d164 1
d195 1
d354 1
d377 24
a400 1
      [ StoreInHAL
d434 2
a436 19
        ; Copy the CMOS RAM into a block on the stack (should be small enough)
        ; in physical address order
        SUB     sp, sp, r6
        MOV     r3, #0
30      MOV     r0, #OsByte_ReadCMOS
        MOV     r1, r3
        CMP     r3, #&10
        ADDLO   r1, r1, #&40
        CMP     r3, #&40
        ADDLO   r1, r1, #&F0
        CMP     r3, #&100
        SUBLO   r1, r1, #&40
        SWI     XOS_Byte
        MOVVS   r2, #0
        STRB    r2, [sp, r3]
        ADD     r3, r3, #1
        CMP     r3, r6
        BLO     %B30
        
d477 24
@


1.13
log
@Leave clock alone if RTC driver is active
Variant of previous fix but that doesn't corrupt R0.
Retagged as SDCMOS-0_12.
@
text
@d82 2
a158 4

      [ :LNOT: StoreInHAL
        ; Also try !Boot.Loader.CMOS, to allow the special FAT-in-Filecore
        ; partition formats to be used on machines other than the Raspberry Pi
a160 1
      ]
@


1.12
log
@Leave clock alone if RTC driver is active
Might fix problem of time jumping backwards on Pis fitted with RTC expansion hardware.

Version 0.12. Tagged as 'SDCMOS-0_12'
@
text
@a301 4
        ; If there's no RTC, try restoring the time from the HAL timestamp
        SWI     XRTC_Features
        BVC     %F60        ; V clear -> RTC driver is active

d309 4
@


1.11
log
@Internationalised
Just one message swapped out.

Version 0.11. Tagged as 'SDCMOS-0_11'
@
text
@d46 1
d301 6
a306 2
        
        ; Read size of block in HAL
@


1.10
log
@Add startup check for presence of NVRAM HAL device
Logic is now
 * if NVRAM device is present, go dormant
 * if CMOS file is absent, go dormant
 * otherwise shadow it
or if StoreInHAL, behave as before.
Unrelated, added Hdr prefixes to includes so they can be double clicked on to open. Swap out OS_Word subreasons for symbolic names.

Version 0.10. Tagged as 'SDCMOS-0_10'
@
text
@d45 1
d125 4
a128 2
        ADR     r0, %FT20
        SETV
d131 1
a131 3
        DCD     0
        DCB     "Redundant", 0
        ALIGN        
@


1.9
log
@Call the X version of the time setting SWI

Version 0.09. Tagged as 'SDCMOS-0_09'
@
text
@d31 16
a46 14
        GET     ListOpts
        GET     Macros
        GET     System
        GET     Proc
        GET     HighFSI
        GET     ModHand
        GET     OsBytes
        GET     OsWords
        GET     CMOS
        GET     FSNumbers
        GET     NewErrors
        GET     Territory
        GET     FileTypes
        GET     Services
d93 2
d104 30
d262 1
a262 1
        MOV     r1, #3      ; time as UTC 5 byte cs
d433 1
a433 1
        MOV     r1, #3      ; time as UTC 5 byte cs
@


1.8
log
@Timestamp the RPi HAL on fake HAL CMOS update
As the penny pinchers didn't fit a hardware real time clock, on a CMOS write (or desktop shutdown) the HAL CMOS is stamped with the current time. On power up, if the time is found to be 1970 (the kernel default) the last shutdown time is used instead - while this time is going to be incorrect it should at least ensure the time doesn't go backwards in the moments before NetTime manages to find a time server.

Version 0.08. Tagged as 'SDCMOS-0_08'
@
text
@d286 2
a287 1
        SWINE   Territory_SetTime
@


1.7
log
@Fix failure to terminate when no CMOS file found
Detail:
  s/sdcmos - Previous change accidentally resulted in the removal of the branch to the termination code when the initialisation callback fails to find a CMOS file, resulting in the module claiming ByteV and causing shenanigans on CMOS saves.
Admin:
  Tested on BB-xM
  Fixes issue reported on forums with Configure plugins throwing errors:
  http://www.riscosopen.org/forum/forums/11/topics/1329


Version 0.07. Tagged as 'SDCMOS-0_07'
@
text
@d38 5
d44 1
d54 5
a58 1
        DCD     0; Service call handler
d72 1
a72 1
Flags   &       ModuleFlag_32bit
d223 73
d313 12
a324 1
MyByteV ROUT
d335 1
d340 1
a340 1
        MOV     r0, #&CF    ; open existing file for read/write, error if missing or directory, no path
d350 1
a350 1
        MOV     r0, #4      ; read bytes from current file pointer
d368 1
a368 1
        
d389 1
a389 1
        MOV     r0, #2      ; write bytes at current file pointer
d394 15
d410 2
a411 2
        
80      MOV     r2, r0
d417 1
a417 1
90      ADD     sp, sp, #4  ; skip data block
d419 1
a419 1
        Pull    "r0-r7, pc"  ; go to original claim address
@


1.6
log
@Make non-StoreInHAL variant look for both $.CMOS and $.!Boot.CMOS
Detail:
  s/sdcmos - Reworked initialisation a bit to allow the code to look for CMOS files in multiple places.
  Specifically, non-StoreInHAL variants now look for both $.CMOS and $.!Boot.CMOS.
  This allows the special FAT+FileCore partitioned SD cards to be used with more than just the Raspberry Pi; specifically Pandora+TouchBook, where not requiring USB or a 2nd SD card for a FileCore partition is desireable
Admin:
  Tested on Pandora


Version 0.06. Tagged as 'SDCMOS-0_06'
@
text
@d118 1
@


1.5
log
@Fix R7 corruption on CMOS write when StoreInHAL is TRUE
Detail:
  s/sdcmos - MyByteV now preserves R7 when StoreInHAL is true, preventing it from being corrupted
Admin:
  Tested on Raspberry Pi with high processor vectors
  Fixes Boot:Choices.Internet.Startup being left as filetype text, due to InetSetup's InternetEnabled pointer being corrupted and left pointing at &000000C3


Version 0.05. Tagged as 'SDCMOS-0_05'
@
text
@d77 2
d108 10
d119 35
a155 1
        ADR     r1, NonCanonicalisedPath
d213 3
a215 9
        
        ; All good - get on ByteV
        MOV     r0, #ByteV
        ADR     r1, MyByteV
        MOV     r2, r12
        SWI     XOS_Claim
        BVS     %F90
        Pull    "r0-r6, lr" ; separate instructions to reduce warnings
        Pull    "pc"
d217 11
a227 18
90      ; Error detected during callback - kill the module and exit
        ASSERT  %F99-%F98 = 8
        ADR     r0, %F98
        LDMIA   r0, {r1-r2}
        Push    "r1-r2"
        MOV     r0, #1
        MOV     r1, sp
        ADD     r2, sp, #%F99-%F98-1
        SWI     XOS_SynchroniseCodeAreas
        MOV     r0, #ModHandReason_Delete
        ADR     r1, Title
        ADD     r2, sp, #%F99-%F98 ; point r2 at stack frame
        MOV     pc, sp
        ; This last bit is executed after the module is killed so can't safely
        ; be executed in place - do it from the stack instead
98      SWI     XOS_Module
        LDMIA   r2, {r0-r6, sp, pc} ; atomic update of sp (which makes this code volatile) with pc
99
@


1.4
log
@Reinstate file existence for StoreInHAL={TRUE} case
Detail:
  s/sdcmos - The previous change to remove the filetype check when StoreInHAL={TRUE} also had the side-effect of removing the check for whether the file exists.
  This resulted in the module not terminating itself if the file was absent, and consequently all attempts to write to CMOS would generate a 'file not found' error, causing assorted bits of code to malfunction.
Admin:
  Tested on Raspberry Pi


Version 0.04. Tagged as 'SDCMOS-0_04'
@
text
@d207 1
a207 1
        Push    "r0-r6"
d275 1
a275 1
        Pull    "r0-r6, pc"  ; go to original claim address
@


1.3
log
@  Relaxed filetype checking on ROM image file in Raspberry Pi case
Detail:
  Too many people were updating the ROM image file (for example using other
  OSes?) such that its filetype wasn't one of the two SDCMOS considered to
  be valid - EPROM or DOS. This resulted in CMOS support apparently not being
  functional for them. Since the filename tested for ("riscos/img") is
  probably quite a strong indicator that it really is a RISC OS ROM image,
  I think it's safe enough to remove the filetype check altogether.
Admin:
  Tested on a Raspberry Pi

Version 0.03. Tagged as 'SDCMOS-0_03'
@
text
@d22 1
d149 1
d151 1
a151 1
        ; Check it's the sort of file we're expecting
d158 3
@


1.2
log
@  Added support for writing fake CMOS on Raspberry Pi
Detail:
  For the Raspberry Pi, the CMOS RAM is embedded within the ROM image, since
  the default bootloader isn't flexible enough to load it from a separate
  file (and we need to know CMOS contents before modules like SDFS have
  initialised). This functionality is enabled by the build switch StoreInHAL
  passed in via the Makefile. Unrelatedly, removed a double free of the module
  workspace on finalisation.
Admin:
  Tested on Raspberry Pi.

Version 0.02. Tagged as 'SDCMOS-0_02'
@
text
@a147 1
      ]
a155 3
      [ StoreInHAL
        LDR     r0, =FileType_EPROM
      |
a156 1
      ]
d161 1
@


1.1
log
@Initial revision
@
text
@d25 5
d63 11
d82 2
d116 4
d122 2
a124 1
        RSB     r3, r5, #Len_SaveCMOS + 1
d130 1
d132 1
d139 1
d148 1
d157 3
d161 1
d163 2
d198 1
a198 1
        ADR     r0, %F50
d202 1
a202 1
50                          ; ... we end up here after the CMOS has been written
d205 71
d281 1
d296 2
a297 6
        
        ; Free the block containing the command string, if it was allocated
        LDR     r2, [r12]
        TEQ     r2, #0
        MOVNE   r0, #ModHandReason_Free
        SWINE   XOS_Module
@


1.1.1.1
log
@  Initial import of SDCMOS module
Detail:
  This module intercepts ByteV so every time a CMOS bte is written, it
  saves the CMOS to the file "CMOS" on whichever card was in drive SDFS::0
  when the module initialised (which will normally be the boot card, since
  the module would not normally be reinitialised after ROM initialisation).
  If you don't want to be nagged to change cards every time the CMOS is
  written, you have two options:
  * Delete the CMOS file from your boot SD card, and update your boot
    script so it doesn't try to load it
  * Use *Unplug SDCMOS
  In either case, you will then require an EEPROM carrier board if you want
  your settings to persist across a reset.
Admin:
  Tested on beagleboard and beagleboard-xM, both with and without a CMOS
  file on the boot card.
@
text
@@
