head	1.1;
branch	1.1.1;
access;
symbols
	SDCMOS-0_20:1.1.1.1
	SDCMOS-0_19:1.1.1.1
	SDCMOS-0_18:1.1.1.1
	SDCMOS-0_17:1.1.1.1
	SDCMOS-0_16:1.1.1.1
	SDCMOS-0_15:1.1.1.1
	SDCMOS-0_14:1.1.1.1
	SDCMOS-0_13:1.1.1.1
	SDCMOS-0_12:1.1.1.1
	SDCMOS-0_11:1.1.1.1
	SDCMOS-0_10:1.1.1.1
	SDCMOS-0_09:1.1.1.1
	SDCMOS-0_08:1.1.1.1
	SDCMOS-0_07:1.1.1.1
	SDCMOS-0_06:1.1.1.1
	SDCMOS-0_05:1.1.1.1
	SDCMOS-0_04:1.1.1.1
	SDCMOS-0_03:1.1.1.1
	SDCMOS-0_02:1.1.1.1
	SDCMOS-0_01:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2012.06.07.22.56.29;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	fLbuMMMFH3oNpP7w;

1.1.1.1
date	2012.06.07.22.56.29;	author bavison;	state Exp;
branches;
next	;
commitid	fLbuMMMFH3oNpP7w;


desc
@@



1.1
log
@Initial revision
@
text
@Dir <Obey$Dir>
amu standalone THROWBACK=-throwback
@


1.1.1.1
log
@  Initial import of SDCMOS module
Detail:
  This module intercepts ByteV so every time a CMOS bte is written, it
  saves the CMOS to the file "CMOS" on whichever card was in drive SDFS::0
  when the module initialised (which will normally be the boot card, since
  the module would not normally be reinitialised after ROM initialisation).
  If you don't want to be nagged to change cards every time the CMOS is
  written, you have two options:
  * Delete the CMOS file from your boot SD card, and update your boot
    script so it doesn't try to load it
  * Use *Unplug SDCMOS
  In either case, you will then require an EEPROM carrier board if you want
  your settings to persist across a reset.
Admin:
  Tested on beagleboard and beagleboard-xM, both with and without a CMOS
  file on the boot card.
@
text
@@
