head	1.13;
access;
symbols
	SDIODriver-0_13:1.13
	SDIODriver-0_12:1.12
	SDIODriver-0_11:1.11
	SDIODriver-0_10:1.10
	SDIODriver-0_09:1.9
	SDIODriver-0_08:1.8
	SDIODriver-0_07:1.7
	SDIODriver-0_06:1.6
	SDIODriver-0_05:1.5
	SDIODriver-0_04:1.4
	SDIODriver-0_03:1.3
	SDIODriver-0_02:1.2
	SDIODriver-0_01:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.13
date	2017.01.17.20.22.29;	author rsprowson;	state Exp;
branches;
next	1.12;
commitid	4XZMggOtfLVnrmCz;

1.12
date	2015.05.20.17.55.23;	author rsprowson;	state Exp;
branches;
next	1.11;
commitid	tZCivf8Z3NzBadmy;

1.11
date	2015.02.02.13.57.17;	author bavison;	state Exp;
branches;
next	1.10;
commitid	jG1NzIlV3o3air8y;

1.10
date	2014.11.05.23.47.29;	author bavison;	state Exp;
branches;
next	1.9;
commitid	gIPNxvy52W00q3Xx;

1.9
date	2014.10.31.17.08.21;	author bavison;	state Exp;
branches;
next	1.8;
commitid	V3gCjETXCGx2nnWx;

1.8
date	2014.07.14.09.43.04;	author bavison;	state Exp;
branches;
next	1.7;
commitid	af7OVRKcjbHvpkIx;

1.7
date	2013.04.01.15.47.28;	author jlee;	state Exp;
branches;
next	1.6;
commitid	soXa5IHRBo2cv5Kw;

1.6
date	2013.01.24.20.15.42;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	GRTRlBp2f8SJ8vBw;

1.5
date	2012.07.06.00.54.52;	author bavison;	state Exp;
branches;
next	1.4;
commitid	Oo9VQOiqVI54drbw;

1.4
date	2012.07.03.23.18.58;	author bavison;	state Exp;
branches;
next	1.3;
commitid	gHDdSMXoFDi9Kabw;

1.3
date	2012.07.01.19.57.51;	author bavison;	state Exp;
branches;
next	1.2;
commitid	xZYBB6Dm3uK8HTaw;

1.2
date	2012.06.15.14.11.32;	author bavison;	state Exp;
branches;
next	1.1;
commitid	WlxzOpkuQxMdiO8w;

1.1
date	2012.06.07.13.36.41;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	w3QGLLHHCyb5mM7w;

1.1.1.1
date	2012.06.07.13.36.41;	author bavison;	state Exp;
branches;
next	;
commitid	w3QGLLHHCyb5mM7w;


desc
@@


1.13
log
@Fix for NULL pointer dereference
When COMMAND_DATA doesn't return an error, SDIODriver was still trying to check the error number in the error block, causing an abort.
Fixes problem spotted by Chris Hall on Pi Compute with its unusual eMMC chip.

Version 0.13. Tagged as 'SDIODriver-0_13'
@
text
@/* (0.13)
 *
 * This file is automatically maintained by srccommit, do not edit manually.
 * Last processed by srccommit version: 1.1.
 *
 */
#define Module_MajorVersion_CMHG        0.13
#define Module_MinorVersion_CMHG        
#define Module_Date_CMHG                17 Jan 2017

#define Module_MajorVersion             "0.13"
#define Module_Version                  13
#define Module_MinorVersion             ""
#define Module_Date                     "17 Jan 2017"

#define Module_ApplicationDate          "17-Jan-17"

#define Module_ComponentName            "SDIODriver"
#define Module_ComponentPath            "cddl/RiscOS/Sources/HWSupport/SD/SDIODriver"

#define Module_FullVersion              "0.13"
#define Module_HelpVersion              "0.13 (17 Jan 2017)"
#define Module_LibraryVersionInfo       "0:13"
@


1.12
log
@Correction to register offset
Looks like a factor of 2 the wrong way 14<-28->56, though SDIODriver doesn't actually use those high up registers fortunately.
Not tested, given that fact, but matches the comments now.

Version 0.12. Tagged as 'SDIODriver-0_12'
@
text
@d1 1
a1 1
/* (0.12)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.12
d9 1
a9 1
#define Module_Date_CMHG                20 May 2015
d11 2
a12 2
#define Module_MajorVersion             "0.12"
#define Module_Version                  12
d14 1
a14 1
#define Module_Date                     "20 May 2015"
d16 1
a16 1
#define Module_ApplicationDate          "20-May-15"
d21 3
a23 3
#define Module_FullVersion              "0.12"
#define Module_HelpVersion              "0.12 (20 May 2015)"
#define Module_LibraryVersionInfo       "0:12"
@


1.11
log
@  Add Raspberry Pi Compute module support
Detail:
  This is the first board supported by RISC OS that has an eMMC chip. This
  is a non-removable flash memory device which obeys a recent revision of
  the MMC bus protocol, which has many similarities with the SD bus.
  * Flags added to low-level and high-level APIs to identify the device as
    a hard drive under SDFS (affects the media search algorithms).
  * For a sector-addressed MMC device (over 2 GB), CMD1 needs HCS set in
    the command or it won't respond.
  * The MMC device needed to be selected when reading the EXT_CSD (which is
    only present in sector-addressed MMC cards).
  * Added the generic SDHCI fallback versions of some HAL device routines.
Admin:
  Tested on a Compute module (of course).

Version 0.11. Tagged as 'SDIODriver-0_11'
@
text
@d1 1
a1 1
/* (0.11)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.11
d9 1
a9 1
#define Module_Date_CMHG                02 Feb 2015
d11 2
a12 2
#define Module_MajorVersion             "0.11"
#define Module_Version                  11
d14 1
a14 1
#define Module_Date                     "02 Feb 2015"
d16 1
a16 1
#define Module_ApplicationDate          "02-Feb-15"
d21 3
a23 3
#define Module_FullVersion              "0.11"
#define Module_HelpVersion              "0.11 (02 Feb 2015)"
#define Module_LibraryVersionInfo       "0:11"
@


1.10
log
@  Tweak to SDHCI device API extension from version 0.09
Detail:
  Before this version gets too widely used in the wild, I'm taking the
  opportunity to correct the new call so that it takes the slot parameter
  like all the other calls do.


Version 0.10. Tagged as 'SDIODriver-0_10'
@
text
@d1 1
a1 1
/* (0.10)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.10
d9 1
a9 1
#define Module_Date_CMHG                05 Nov 2014
d11 2
a12 2
#define Module_MajorVersion             "0.10"
#define Module_Version                  10
d14 1
a14 1
#define Module_Date                     "05 Nov 2014"
d16 1
a16 1
#define Module_ApplicationDate          "05-Nov-14"
d21 3
a23 3
#define Module_FullVersion              "0.10"
#define Module_HelpVersion              "0.10 (05 Nov 2014)"
#define Module_LibraryVersionInfo       "0:10"
@


1.9
log
@  Miscellaneous improvements
Detail:
  * Important data loss bug rectified: the retry mechanism inadvertently
    failed to pass back over data that had been transmitted to the card but
    not written successfully, instead picking up afterwards and swallowing
    the error. Therefore, only repeatable errors such as card timeouts were
    being reported correctly, and user data could be lost with no indication
    until it failed to read back correctly.
  * Supports controllers with the following quirks:
    1) Error bit in interrupt status register not implemented
    2) Non-standard method of triggering SD bus command
  * Reports non-standard error number 12 reported by some controllers
  * Checks for a major version match on SDHCI HAL devices before using them
    (should have been doing this all along, but fortunately there are no
    plans for incompatible changes that would force a major version change
    in the forseeable future).

Version 0.09. Tagged as 'SDIODriver-0_09'
@
text
@d1 1
a1 1
/* (0.09)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.09
d9 1
a9 1
#define Module_Date_CMHG                31 Oct 2014
d11 2
a12 2
#define Module_MajorVersion             "0.09"
#define Module_Version                  9
d14 1
a14 1
#define Module_Date                     "31 Oct 2014"
d16 1
a16 1
#define Module_ApplicationDate          "31-Oct-14"
d21 3
a23 3
#define Module_FullVersion              "0.09"
#define Module_HelpVersion              "0.09 (31 Oct 2014)"
#define Module_LibraryVersionInfo       "0:9"
@


1.8
log
@  Support the Raspberry Pi model B+
Detail:
  For removable slots without a card detect pin, disable the ticker routine
  to poll for the card-detect state, because the HAL is unable to report
  any meaningful result. Pass through the fact that it is one of these types
  of slots to SDFS, where card removal / change is detected by use of
  timeouts instead.
Admin:
  Already in use in RC12a.

Version 0.08. Tagged as 'SDIODriver-0_08'
@
text
@d1 1
a1 1
/* (0.08)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.08
d9 1
a9 1
#define Module_Date_CMHG                14 Jul 2014
d11 2
a12 2
#define Module_MajorVersion             "0.08"
#define Module_Version                  8
d14 1
a14 1
#define Module_Date                     "14 Jul 2014"
d16 1
a16 1
#define Module_ApplicationDate          "14-Jul-14"
d21 3
a23 3
#define Module_FullVersion              "0.08"
#define Module_HelpVersion              "0.08 (14 Jul 2014)"
#define Module_LibraryVersionInfo       "0:8"
@


1.7
log
@Adjust startup logic to fix SDCMOS
Detail:
  c/module, cmhg/SDIOHdr - Instead of initialising the device list inside a callback, we now initialise it when we receive our ModulePostInit service call.
  This fixes SDCMOS initialisation; both SDCMOS and SDIODriver were using callbacks to initialise themselves, but the recent fixes to callback triggering during ROM init meant that the SDIODriver callback was no longer guaranteed to occur before the SDCMOS callback. This was preventing SDCMOS from initialising properly as SDFS/SDIODriver wouldn't have been available yet.
Admin:
  Tested on Raspberry Pi and Pandora with SDCMOS-friendly SD cards


Version 0.07. Tagged as 'SDIODriver-0_07'
@
text
@d1 1
a1 1
/* (0.07)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.07
d9 1
a9 1
#define Module_Date_CMHG                01 Apr 2013
d11 2
a12 2
#define Module_MajorVersion             "0.07"
#define Module_Version                  7
d14 1
a14 1
#define Module_Date                     "01 Apr 2013"
d16 1
a16 1
#define Module_ApplicationDate          "01-Apr-13"
d21 3
a23 3
#define Module_FullVersion              "0.07"
#define Module_HelpVersion              "0.07 (01 Apr 2013)"
#define Module_LibraryVersionInfo       "0:7"
@


1.6
log
@Don't overspill the product name column when no terminator
Spotted a product name which didn't have a terminator, and *SDIODEVICES spewed out whatever else was on the stack until a 0 terminator was found. Bounded the product name with the printf() formatter.

Version 0.06. Tagged as 'SDIODriver-0_06'
@
text
@d1 1
a1 1
/* (0.06)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.06
d9 1
a9 1
#define Module_Date_CMHG                24 Jan 2013
d11 2
a12 2
#define Module_MajorVersion             "0.06"
#define Module_Version                  6
d14 1
a14 1
#define Module_Date                     "24 Jan 2013"
d16 1
a16 1
#define Module_ApplicationDate          "24-Jan-13"
d21 3
a23 3
#define Module_FullVersion              "0.06"
#define Module_HelpVersion              "0.06 (24 Jan 2013)"
#define Module_LibraryVersionInfo       "0:6"
@


1.5
log
@  Change to order of SD controllers
Detail:
  Now uses OS_Hardware 5 if it is available, so that SD controllers are
  allocated in the order in which they were registered, irrespective of
  whether they were registered before or after SDIODriver initialised.
Admin:
  Builds, but not tested

Version 0.05. Tagged as 'SDIODriver-0_05'
@
text
@d1 1
a1 1
/* (0.05)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.05
d9 1
a9 1
#define Module_Date_CMHG                06 Jul 2012
d11 2
a12 2
#define Module_MajorVersion             "0.05"
#define Module_Version                  5
d14 1
a14 1
#define Module_Date                     "06 Jul 2012"
d16 1
a16 1
#define Module_ApplicationDate          "06-Jul-12"
d21 3
a23 3
#define Module_FullVersion              "0.05"
#define Module_HelpVersion              "0.05 (06 Jul 2012)"
#define Module_LibraryVersionInfo       "0:5"
@


1.4
log
@  Added support for SD on OMAP4
Detail:
  The OMAP4 SD controller is more fussy about how it is reset than the OMAP3
  and BCM2835 controllers - more details in inline comments. Issue identified
  by Willi Theiss, but I have implemented the fix differently. Also added
  Willi's support for DebugLib debugging.
Admin:
  Tested on Beagleboard, Raspberry Pi and Pandaboard, and with the usual
  set of 30+ cards.

Version 0.04. Tagged as 'SDIODriver-0_04'
@
text
@d1 1
a1 1
/* (0.04)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.04
d9 1
a9 1
#define Module_Date_CMHG                04 Jul 2012
d11 2
a12 2
#define Module_MajorVersion             "0.04"
#define Module_Version                  4
d14 1
a14 1
#define Module_Date                     "04 Jul 2012"
d16 1
a16 1
#define Module_ApplicationDate          "04-Jul-12"
d21 3
a23 3
#define Module_FullVersion              "0.04"
#define Module_HelpVersion              "0.04 (04 Jul 2012)"
#define Module_LibraryVersionInfo       "0:4"
@


1.3
log
@  Changes to better support the Raspberry Pi
Detail:
  * On SD memory cards and SDIO cards, disengage the card's internal pull-up
    resistor on DAT3. This is designed to function as part of the card detect
    mechanism on some boards (not any of the ones we support) but this is
    probably desirable in order to ensure the impedance of all the DAT lines
    match.
  * Pace data buffer reads by polling the Present State register rather than
    using the Read Buffer Ready interrupt. This is because the controller on
    the BCM2835 occasionally fails to issue the interrupt (another clock
    domain crossing bug in the chip?) so we end up waiting for a timeout and
    then retrying, with the overall effect appearing as variable data transfer
    rates. When background transfers are implemented, we will need to rely on
    TickerV to do this polling. Fortunately, the OMAP3 controller seems to be
    unaffected by this change.
  * Don't use the High Speed Enable bit in the Host Control 1 register - it
    seems to cause more trouble than it's worth (more discussion in inline
    comments).
Admin:
  Tested on my full collection of test cards on both beagleboard and RPi.

Version 0.03. Tagged as 'SDIODriver-0_03'
@
text
@d1 1
a1 1
/* (0.03)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.03
d9 1
a9 1
#define Module_Date_CMHG                01 Jul 2012
d11 2
a12 2
#define Module_MajorVersion             "0.03"
#define Module_Version                  3
d14 1
a14 1
#define Module_Date                     "01 Jul 2012"
d16 1
a16 1
#define Module_ApplicationDate          "01-Jul-12"
d21 3
a23 3
#define Module_FullVersion              "0.03"
#define Module_HelpVersion              "0.03 (01 Jul 2012)"
#define Module_LibraryVersionInfo       "0:3"
@


1.2
log
@  Fixed bug shown up by Raspberry Pi running in high speed mode
Detail:
  The Arasan controller, unlike the OMAP3 one, pays attention to the HSE
  bit in the Control 1 register. This wasn't being reset before starting
  up the next card to be inserted, which caused some cards to fail to
  initialise.
Admin:
  Tested on Raspberry Pi, should have no effect on OMAP3.

Version 0.02. Tagged as 'SDIODriver-0_02'
@
text
@d1 1
a1 1
/* (0.02)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.02
d9 1
a9 1
#define Module_Date_CMHG                15 Jun 2012
d11 2
a12 2
#define Module_MajorVersion             "0.02"
#define Module_Version                  2
d14 1
a14 1
#define Module_Date                     "15 Jun 2012"
d16 1
a16 1
#define Module_ApplicationDate          "15-Jun-12"
d21 3
a23 3
#define Module_FullVersion              "0.02"
#define Module_HelpVersion              "0.02 (15 Jun 2012)"
#define Module_LibraryVersionInfo       "0:2"
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* (0.01)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.01
d9 1
a9 1
#define Module_Date_CMHG                07 Jun 2012
d11 2
a12 2
#define Module_MajorVersion             "0.01"
#define Module_Version                  1
d14 1
a14 1
#define Module_Date                     "07 Jun 2012"
d16 1
a16 1
#define Module_ApplicationDate          "07-Jun-12"
d21 3
a23 3
#define Module_FullVersion              "0.01"
#define Module_HelpVersion              "0.01 (07 Jun 2012)"
#define Module_LibraryVersionInfo       "0:1"
@


1.1.1.1
log
@Initial import of SDIODriver module
@
text
@@
