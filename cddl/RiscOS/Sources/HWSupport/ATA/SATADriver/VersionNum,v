head	1.9;
access;
symbols
	SATADriver-0_09:1.9
	SATADriver-0_08:1.8
	SATADriver-0_07:1.7
	SATADriver-0_06:1.6
	SATADriver-0_05:1.5
	SATADriver-0_04:1.4
	SATADriver-0_03:1.3
	SATADriver-0_02:1.2
	SATADriver-0_01:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2018.07.07.17.38.47;	author jlee;	state Exp;
branches;
next	1.8;
commitid	SxCqxrGotqz2jeJA;

1.8
date	2018.06.12.11.20.05;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	s1AoDgb0IY5W0ZFA;

1.7
date	2017.08.22.21.07.55;	author jlee;	state Exp;
branches;
next	1.6;
commitid	H4nPnZGTLvVvIf4A;

1.6
date	2017.06.17.09.36.59;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	QQLGKBUcbiO01IVz;

1.5
date	2017.06.16.10.30.38;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	3iPJDdwxjzvplAVz;

1.4
date	2016.12.09.21.43.56;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	0I3RGN5sc2C39mxz;

1.3
date	2016.03.24.23.12.55;	author bavison;	state Exp;
branches;
next	1.2;
commitid	2sjNdJG8E4CIZWZy;

1.2
date	2016.03.13.22.38.58;	author bavison;	state Exp;
branches;
next	1.1;
commitid	HXVTgA26Btw0axYy;

1.1
date	2016.03.13.22.10.19;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	mANRhhLexUmfIwYy;

1.1.1.1
date	2016.03.13.22.10.19;	author bavison;	state Exp;
branches;
next	;
commitid	mANRhhLexUmfIwYy;


desc
@@


1.9
log
@Switch to using OS_Memory 19 by default
Detail:
  Makefile - Now that OS_Memory 19 has been merged to the trunk version of the kernel (along with the other SMP changes, which might cause problems if OS_Memory 0 was to continued to be used), we can change our build setting to use OS_Memory 19 by default
Admin:
  Untested
  Requires Kernel-6_09


Version 0.09. Tagged as 'SATADriver-0_09'
@
text
@/* (0.09)
 *
 * This file is automatically maintained by srccommit, do not edit manually.
 * Last processed by srccommit version: 1.1.
 *
 */
#define Module_MajorVersion_CMHG        0.09
#define Module_MinorVersion_CMHG        
#define Module_Date_CMHG                07 Jul 2018

#define Module_MajorVersion             "0.09"
#define Module_Version                  9
#define Module_MinorVersion             ""
#define Module_Date                     "07 Jul 2018"

#define Module_ApplicationDate          "07-Jul-18"

#define Module_ComponentName            "SATADriver"
#define Module_ComponentPath            "cddl/RiscOS/Sources/HWSupport/ATA/SATADriver"

#define Module_FullVersion              "0.09"
#define Module_HelpVersion              "0.09 (07 Jul 2018)"
#define Module_LibraryVersionInfo       "0:9"
@


1.8
log
@Listen for PreReset service and do a soft reset
Simulate the effects of a hard reset by globally resetting the controller. This fixes a problem with some brands of drive when the ROM is softloaded and the drives don't get long enough to retrain before SATADriver starts a 2nd time.

Version 0.08. Tagged as 'SATADriver-0_08'
@
text
@d1 1
a1 1
/* (0.08)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.08
d9 1
a9 1
#define Module_Date_CMHG                12 Jun 2018
d11 2
a12 2
#define Module_MajorVersion             "0.08"
#define Module_Version                  8
d14 1
a14 1
#define Module_Date                     "12 Jun 2018"
d16 1
a16 1
#define Module_ApplicationDate          "12-Jun-18"
d21 3
a23 3
#define Module_FullVersion              "0.08"
#define Module_HelpVersion              "0.08 (12 Jun 2018)"
#define Module_LibraryVersionInfo       "0:8"
@


1.7
log
@Add support for using OS_Memory 19 for DMA prep
Detail:
  Makefile - Add OSMEM19 option to control whether OS_Memory 0 or OS_Memory 19 is used. Defaults to OS_Memory 0, since OS_Memory 19 is currently only available on the SMP kernel branch.
  c/op, c/osmem0, h/dmaprep - Move OS_Memory 0 related code out into its own file, creating the dmaprep interface to abstract over whether OS_Memory 0 or OS_Memory 19 is in use
  c/osmem19, cmhg/SATADriverHdr - Code for performing DMA prep using OS_Memory 19
  h/globals - Adjust what variables ahciop_t stores, depending on DMA prep approach being used
Admin:
  Tested on IGEPv5
  OS_Memory 19 version (for use with SMP kernel/module) can be enabled via components file, e.g. '-options OSMEM19=TRUE'


Version 0.07. Tagged as 'SATADriver-0_07'
@
text
@d1 1
a1 1
/* (0.07)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.07
d9 1
a9 1
#define Module_Date_CMHG                22 Aug 2017
d11 2
a12 2
#define Module_MajorVersion             "0.07"
#define Module_Version                  7
d14 1
a14 1
#define Module_Date                     "22 Aug 2017"
d16 1
a16 1
#define Module_ApplicationDate          "22-Aug-17"
d21 3
a23 3
#define Module_FullVersion              "0.07"
#define Module_HelpVersion              "0.07 (22 Aug 2017)"
#define Module_LibraryVersionInfo       "0:7"
@


1.6
log
@Don't punish controllers that report DET_DEV_NE
For those controllers relying on the retry loop to get the top level port to detect, the change in SATADriver 0.05 made the retries take 25s.
Roll back the COMRESET_RECOVERY_TIME to 50cs like it was in revision 1.1.1.1 of op.c.
Then, pull out the subsequent PM rescan code into a function, and wrap it in a retry loop so the net result is the same as SATADriver 0.05 achieved. However, it is possible to escape the loop early with this arrangement, rather than just idling.

Version 0.06. Tagged as 'SATADriver-0_06'
@
text
@d1 1
a1 1
/* (0.06)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.06
d9 1
a9 1
#define Module_Date_CMHG                17 Jun 2017
d11 2
a12 2
#define Module_MajorVersion             "0.06"
#define Module_Version                  6
d14 1
a14 1
#define Module_Date                     "17 Jun 2017"
d16 1
a16 1
#define Module_ApplicationDate          "17-Jun-17"
d21 3
a23 3
#define Module_FullVersion              "0.06"
#define Module_HelpVersion              "0.06 (17 Jun 2017)"
#define Module_LibraryVersionInfo       "0:6"
@


1.5
log
@Adapt the capacity calculation based on reported sector size
Read the sector size from ATA Identify, so that the capacity reported is right when the sector size != 512B.
Increase the COMRESET recovery time a bit more to account for long spin up mechanical drives - the timeout's only used if a drive is present, so is harmless on fast (eg. SSD) drives which recover well before the timeout.

Tested on Titanium with an assortment of manufacturer drives, capacities, and sector sizes.

Version 0.05. Tagged as 'SATADriver-0_05'
@
text
@d1 1
a1 1
/* (0.05)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.05
d9 1
a9 1
#define Module_Date_CMHG                16 Jun 2017
d11 2
a12 2
#define Module_MajorVersion             "0.05"
#define Module_Version                  5
d14 1
a14 1
#define Module_Date                     "16 Jun 2017"
d16 1
a16 1
#define Module_ApplicationDate          "16-Jun-17"
d21 3
a23 3
#define Module_FullVersion              "0.05"
#define Module_HelpVersion              "0.05 (16 Jun 2017)"
#define Module_LibraryVersionInfo       "0:5"
@


1.4
log
@Give a little extra grace to mechanical drives
Some mechanical drives don't reply until spin up after COMRESET. Give them 50% longer to complete.
Solves a missing Seagate ST250DM000 drive issue at power on as init was too fast.

Version 0.04. Tagged as 'SATADriver-0_04'
@
text
@d1 1
a1 1
/* (0.04)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.04
d9 1
a9 1
#define Module_Date_CMHG                09 Dec 2016
d11 2
a12 2
#define Module_MajorVersion             "0.04"
#define Module_Version                  4
d14 1
a14 1
#define Module_Date                     "09 Dec 2016"
d16 1
a16 1
#define Module_ApplicationDate          "09-Dec-16"
d21 3
a23 3
#define Module_FullVersion              "0.04"
#define Module_HelpVersion              "0.04 (09 Dec 2016)"
#define Module_LibraryVersionInfo       "0:4"
@


1.3
log
@  Better tracking of task file registers in presence of port multiplier
Detail:
  The task file registers are really a per-drive concept, but unless you're
  using FIS-based switching (which we don't) then AHCI doesn't really keep
  track of which device downstream of a port multiplier was associated with
  its shadow copy of the task file registers. We now keep our own soft copies
  of the task file registers; whilst this won't really work reliably once
  background transfers are implemeted and multiple commands can be queued at
  once, for the time being it means we won't get task file registers
  associated with the wrong drive (which is what was behind disc error 08
  as occasionally reported on Titanium when multiple drives were fitted).
Admin:
  Tested on Titanium.

Version 0.03. Tagged as 'SATADriver-0_03'
@
text
@d1 1
a1 1
/* (0.03)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.03
d9 1
a9 1
#define Module_Date_CMHG                24 Mar 2016
d11 2
a12 2
#define Module_MajorVersion             "0.03"
#define Module_Version                  3
d14 1
a14 1
#define Module_Date                     "24 Mar 2016"
d16 1
a16 1
#define Module_ApplicationDate          "24-Mar-16"
d21 3
a23 3
#define Module_FullVersion              "0.03"
#define Module_HelpVersion              "0.03 (24 Mar 2016)"
#define Module_LibraryVersionInfo       "0:3"
@


1.2
log
@  LBA28 support and workaround for OMAP5432 errata
Detail:
  LBA28 is relatively straightforward to support as a subset of LBA48, and
  is still useful for some small capacity Micro SATA SSDs in particular.
  Errata i859 says that link negotiation can fail for SATA III (6 Gb/s)
  devices; there is no 100% reliable software workaround, but we can at least
  do some retries to reduce the frequency of failure.
Admin:
  Tested on IGEPv5.

Version 0.02. Tagged as 'SATADriver-0_02'
@
text
@d1 1
a1 1
/* (0.02)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.02
d9 1
a9 1
#define Module_Date_CMHG                13 Mar 2016
d11 2
a12 2
#define Module_MajorVersion             "0.02"
#define Module_Version                  2
d14 1
a14 1
#define Module_Date                     "13 Mar 2016"
d16 1
a16 1
#define Module_ApplicationDate          "13-Mar-16"
d21 3
a23 3
#define Module_FullVersion              "0.02"
#define Module_HelpVersion              "0.02 (13 Mar 2016)"
#define Module_LibraryVersionInfo       "0:2"
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* (0.01)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.01
d9 1
a9 1
#define Module_Date_CMHG                12 Oct 2015
d11 2
a12 2
#define Module_MajorVersion             "0.01"
#define Module_Version                  1
d14 1
a14 1
#define Module_Date                     "12 Oct 2015"
d16 1
a16 1
#define Module_ApplicationDate          "12-Oct-15"
d21 3
a23 3
#define Module_FullVersion              "0.01"
#define Module_HelpVersion              "0.01 (12 Oct 2015)"
#define Module_LibraryVersionInfo       "0:1"
@


1.1.1.1
log
@  Initial import of SATADriver module
Detail:
  This is the SATA implementation of a new generic ATA driver API, analogous
  to the SCSIDriver and SDIODriver APIs, but for ATA buses. Full support for
  port multipliers is included; effectively they appear transparent to the
  upper layers of the stack. No effort is to made to support enclosures,
  external SATA or hot-plugging (but note that hot-plugging is precluded by
  hardware on OMAP5432x and AM572x). Background transfers are only partially
  implemented at present. DMA is used, as mandated by the AHCI specification.
  The module is written mostly in C for maintainability and extendability, and
  uses locks for compatibility with a future multi-core version of the OS.
Admin:
  This version is what appeared in initial Titanium ROM releases.

Tagged as 'SATADriver-0_01'
@
text
@@
