head	1.1;
access;
symbols
	SATADriver-0_09:1.1
	SATADriver-0_08:1.1
	SATADriver-0_07:1.1;
locks; strict;
comment	@# @;


1.1
date	2017.08.22.21.08.03;	author jlee;	state Exp;
branches;
next	;
commitid	H4nPnZGTLvVvIf4A;


desc
@@


1.1
log
@Add support for using OS_Memory 19 for DMA prep
Detail:
  Makefile - Add OSMEM19 option to control whether OS_Memory 0 or OS_Memory 19 is used. Defaults to OS_Memory 0, since OS_Memory 19 is currently only available on the SMP kernel branch.
  c/op, c/osmem0, h/dmaprep - Move OS_Memory 0 related code out into its own file, creating the dmaprep interface to abstract over whether OS_Memory 0 or OS_Memory 19 is in use
  c/osmem19, cmhg/SATADriverHdr - Code for performing DMA prep using OS_Memory 19
  h/globals - Adjust what variables ahciop_t stores, depending on DMA prep approach being used
Admin:
  Tested on IGEPv5
  OS_Memory 19 version (for use with SMP kernel/module) can be enabled via components file, e.g. '-options OSMEM19=TRUE'


Version 0.07. Tagged as 'SATADriver-0_07'
@
text
@/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "Licence").
 * You may not use this file except in compliance with the Licence.
 *
 * You can obtain a copy of the licence at
 * cddl/RiscOS/Sources/HWSupport/ATA/SATADriver/LICENCE.
 * See the Licence for the specific language governing permissions
 * and limitations under the Licence.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the Licence file. If applicable, add the
 * following below this CDDL HEADER, with the fields enclosed by
 * brackets "[]" replaced with your own identifying information:
 * Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */
/*
 * Copyright 2015 Ben Avison.  All rights reserved.
 * Portions Copyright 2017 Jeffrey Lee
 * Use is subject to license terms.
 */

#ifndef DMAPREP_H
#define DMAPREP_H

#include "op.h"

typedef struct
{
  uint32_t         prdt_len; /**< Number of entries in PRDT */
  _kernel_oserror *e;        /**< Error that caused the prep operation to fail (if any) */
}
dmaprep_result_t;


/* Prepare an op
   * op->total_length will be length of transfer, guaranteed at least halfword multiple
   * op->length_done will be zero
   * scat is the scatter list to use
   * b->r0.bits.dir gives transfer direction
   * port contains the bounce buffer that can be used for this op
   If the transfer is too long, set b->data_len to the desired length and return a TooComplex error.
 */
extern dmaprep_result_t dmaprep_prep(ahciop_t *op, ataop_block_t *b, scatter_t *scat, ahciport_t *port);

/* Queue a prepared op
   * If this is a DMA read, copy any necessary data to the shared bounce buffer
   * Copy the PRDT to the port's command table
 */
extern void dmaprep_on_queue(ahciop_t *op, ahciport_t *port);

/* Abort an op
   * op->total_length will be the length of transfer
   * op->length_done will be zero
 */
extern void dmaprep_on_abort(ahciop_t *op);

/* Complete an op
   * op->length_done represents completed length of transfer
   * op->total_length represents remaining length of transfer
 */
extern void dmaprep_on_complete(ahciop_t *op, ahciport_t *port);

#endif
@
