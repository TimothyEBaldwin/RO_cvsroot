head	1.1;
branch	1.1.1;
access;
symbols
	SATADriver-0_09:1.1.1.1
	SATADriver-0_08:1.1.1.1
	SATADriver-0_07:1.1.1.1
	SATADriver-0_06:1.1.1.1
	SATADriver-0_05:1.1.1.1
	SATADriver-0_04:1.1.1.1
	SATADriver-0_03:1.1.1.1
	SATADriver-0_02:1.1.1.1
	SATADriver-0_01:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2016.03.13.22.10.19;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	mANRhhLexUmfIwYy;

1.1.1.1
date	2016.03.13.22.10.19;	author bavison;	state Exp;
branches;
next	;
commitid	mANRhhLexUmfIwYy;


desc
@@



1.1
log
@Initial revision
@
text
@/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "Licence").
 * You may not use this file except in compliance with the Licence.
 *
 * You can obtain a copy of the licence at
 * cddl/RiscOS/Sources/HWSupport/ATA/SATADriver/LICENCE.
 * See the Licence for the specific language governing permissions
 * and limitations under the Licence.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the Licence file. If applicable, add the
 * following below this CDDL HEADER, with the fields enclosed by
 * brackets "[]" replaced with your own identifying information:
 * Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */
/*
 * Copyright 2015 Ben Avison.  All rights reserved.
 * Use is subject to license terms.
 */

#ifndef OP_H
#define OP_H

#include <stdbool.h>
#include <stdint.h>
#include "globals.h"

typedef struct
{
  /* r0 */
  union
  {
    struct
    {
      unsigned reserved1:  1;
      unsigned nodrdy:     1;
      unsigned dma:        1;
      unsigned reserved2:  9;
      unsigned deviceid:   4;
      unsigned cpid:       8;
      unsigned dir:        2;
      bool     scatter:    1;
      bool     no_escape:  1;
      unsigned reserved3:  1;
      bool     bg:         1;
      unsigned reserved4:  2;
    } bits;
    uint32_t word;
  } r0;
  /* r1 */
  union
  {
    size_t param_len;
    void  *op_handle;
  } r1;
  /* r2 */
  union
  {
    ataop_param_device_control_t *device_control;
    ataop_param_lba28_t *lba28;
    ataop_param_lba48_t *lba48;
    ataop_param_wide_features_t *wide_features;
  } param;
  /* r3 */
  union
  {
    uint8_t   *block;
    scatter_t *scatter;
  } data;
  /* r4 */
  size_t data_len;
  /* r5 */
  union
  {
    uint32_t timeout;
    void    *callback_r5;
  } r5;
  /* r6 */
  void (*callback)(void);
  /* r7 */
  void *callback_r12;
} ataop_block_t;

typedef struct
{
  /* r0 */
  union
  {
    struct
    {
      unsigned reserved1: 1;
      unsigned dmadir:    1;
      unsigned dma:       1;
      unsigned reserved2: 9;
      unsigned deviceid:  4;
      unsigned cpid:      8;
      unsigned dir:       2;
      bool     scatter:   1;
      bool     no_escape: 1;
      unsigned reserved3: 1;
      bool     bg:        1;
      unsigned reserved4: 2;
    } bits;
    uint32_t word;
  } r0;
  /* r1 */
  union
  {
    size_t control_len;
    void  *op_handle;
  } r1;
  /* r2 */
  atapacketop_control_t *control;
  /* r3 */
  union
  {
    uint8_t   *block;
    scatter_t *scatter;
  } data;
  /* r4 */
  size_t data_len;
  /* r5 */
  union
  {
    uint32_t timeout;
    void    *callback_r5;
  } r5;
  /* r6 */
  void (*callback)(void);
  /* r7 */
  void *callback_r12;
} atapacketop_block_t;

bool op_read_pmp_reg(ahciport_t *restrict port, uint32_t pmp, pm_scr_t pm_pscr, uint32_t *restrict value, bool error_recovery);
bool op_write_pmp_reg(ahciport_t *port, uint32_t pmp, pm_scr_t pm_pscr, uint32_t value, bool error_recovery);
bool op_rescan_port(ahciport_t *port, bool error_recovery);
void op_abort(ahciport_t *restrict port, ahciop_t *restrict op);
void op_abort_all(ahciport_t *port);
_kernel_oserror *op_issue(ataop_block_t *b, bool atapi, bool error_recovery);

#endif
@


1.1.1.1
log
@  Initial import of SATADriver module
Detail:
  This is the SATA implementation of a new generic ATA driver API, analogous
  to the SCSIDriver and SDIODriver APIs, but for ATA buses. Full support for
  port multipliers is included; effectively they appear transparent to the
  upper layers of the stack. No effort is to made to support enclosures,
  external SATA or hot-plugging (but note that hot-plugging is precluded by
  hardware on OMAP5432x and AM572x). Background transfers are only partially
  implemented at present. DMA is used, as mandated by the AHCI specification.
  The module is written mostly in C for maintainability and extendability, and
  uses locks for compatibility with a future multi-core version of the OS.
Admin:
  This version is what appeared in initial Titanium ROM releases.

Tagged as 'SATADriver-0_01'
@
text
@@
