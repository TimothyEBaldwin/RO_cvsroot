head	1.1;
branch	1.1.1;
access;
symbols
	SATADriver-0_09:1.1.1.1
	SATADriver-0_08:1.1.1.1
	SATADriver-0_07:1.1.1.1
	SATADriver-0_06:1.1.1.1
	SATADriver-0_05:1.1.1.1
	SATADriver-0_04:1.1.1.1
	SATADriver-0_03:1.1.1.1
	SATADriver-0_02:1.1.1.1
	SATADriver-0_01:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2016.03.13.22.10.19;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	mANRhhLexUmfIwYy;

1.1.1.1
date	2016.03.13.22.10.19;	author bavison;	state Exp;
branches;
next	;
commitid	mANRhhLexUmfIwYy;


desc
@@



1.1
log
@Initial revision
@
text
@;
; CDDL HEADER START
;
; The contents of this file are subject to the terms of the
; Common Development and Distribution License (the "Licence").
; You may not use this file except in compliance with the Licence.
;
; You can obtain a copy of the licence at
; cddl/RiscOS/Sources/HWSupport/ATA/SATADriver/LICENCE.
; See the Licence for the specific language governing permissions
; and limitations under the Licence.
;
; When distributing Covered Code, include this CDDL HEADER in each
; file and include the Licence file. If applicable, add the
; following below this CDDL HEADER, with the fields enclosed by
; brackets "[]" replaced with your own identifying information:
; Portions Copyright [yyyy] [name of copyright owner]
;
; CDDL HEADER END
;
; Copyright 2015 Ben Avison.  All rights reserved.
; Use is subject to license terms.
;

        EXPORT  coroutine_reset
        EXPORT  coroutine_resume
        EXPORT  coroutine_wait

        GET     ListOpts
        GET     Macros
        GET     CPU/Generic32

        AREA    |Asm$$Code|, CODE, READONLY

coroutine_reset
        ; Set up initial stack pointer and stack contents so that on
        ; first call of coroutine_resume, we're at the coroutine entry point
        ADD     a1, a1, #4+560     ; coroutine sl
        MOV     a4, #0
        ADD     ip, a1, #256*4-560 ; coroutine sp
        STR     a2, [ip, #-4]!     ; coroutine pc
        STR     a4, [ip, #-4]!     ; coroutine fp
        STR     a1, [ip, #-4]!     ; coroutine sl
                                   ; don't care about v1-v6 on coroutine entry
        STR     a3, [ip, #-7*4]!   ; coroutine a1
        STR     ip, [a1, #-(4+560)]
        MOV     pc, lr

coroutine_resume
        ; Entered in SVC mode
        Push    "lr"
        SUB     sp, sp, #15*4
        STMIA   sp, {a1-a4, v1-v6, sl, fp, ip, sp, lr}^
        MSR     CPSR_c, #SYS32_mode
        LDR     sp, [a1, #0]
        Pull    "a1, v1-v6, sl, fp, pc"

coroutine_wait
        ; Entered in SYS mode
        Push    "a1, v1-v6, sl, fp, lr"
        STR     sp, [a1, #0]
        MSR     CPSR_c, #SVC32_mode
        LDMIA   sp, {a1-a4, v1-v6, sl, fp, ip, sp, lr}^
        NOP     ; objasm insists on this even though we're not targeting affected CPUs
        ADD     sp, sp, #15*4
        Pull    "pc"

        END
@


1.1.1.1
log
@  Initial import of SATADriver module
Detail:
  This is the SATA implementation of a new generic ATA driver API, analogous
  to the SCSIDriver and SDIODriver APIs, but for ATA buses. Full support for
  port multipliers is included; effectively they appear transparent to the
  upper layers of the stack. No effort is to made to support enclosures,
  external SATA or hot-plugging (but note that hot-plugging is precluded by
  hardware on OMAP5432x and AM572x). Background transfers are only partially
  implemented at present. DMA is used, as mandated by the AHCI specification.
  The module is written mostly in C for maintainability and extendability, and
  uses locks for compatibility with a future multi-core version of the OS.
Admin:
  This version is what appeared in initial Titanium ROM releases.

Tagged as 'SATADriver-0_01'
@
text
@@
