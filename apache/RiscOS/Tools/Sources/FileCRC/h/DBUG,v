head	1.1;
branch	1.1.1;
access;
symbols
	FileCRC-2_27:1.1.1.1
	FileCRC-2_26:1.1.1.1
	FileCRC-2_25:1.1.1.1
	FileCRC-2_23:1.1.1.1
	FileCRC-2_22:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	99.02.19.10.21.25;	author dcotton;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.02.19.10.21.25;	author dcotton;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// header file for DBUG.H

/* Begin-Prologue */
#ifndef DBUG_H
#define DBUG_H
#undef DECLARE
#undef INIT
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#else
#define DECLARE extern
#define INIT(x)
#endif
/* End-Prologue */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

#ifdef DEBUGLIB
#include "debuglib/debuglib.h"
#endif /* DEBUGLIB */

#define DBUG_LVL_PANIC    1  // fatal unrecoverable panic conditions
#define DBUG_LVL_ERROR    2  // serious but recoverable errors
#define DBUG_LVL_DIAG     3  // diagnostics for following main execution paths
#define DBUG_LVL_DEBUG    4  // debug messages for non-critical paths or utility fns
#define DBUG_LVL_LOOP     5  // iterative debugging, likely to cause lots of output


#ifdef DEBUGLIB
void DBUG_PRINTF(int level, char *fmt, ...);
#else
//#define DBUG_PRINTF(int, char *, ...);
#define DBUG_PRINTF if(0) NO_DEBUG_PRINTF
DECLARE void NO_DEBUG_PRINTF(int, char *, ...);
#endif /* DEBUGLIB */


#ifdef DEBUGLIB
  /* Whilst debugging we use a slightly altered version of malloc() and
free() which allow us to output debugging information which can help with
!MemCheck. If we are not debugging, remap these to the normal versions. */
  char* dbg_malloc(unsigned int amount);
  void dbg_free(char* area);
#else
  #define dbg_malloc(x) malloc(x)
  #define dbg_free(x) free(x)
#endif /* DEBUGLIB */




/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */

@


1.1.1.1
log
@Initial import of FileCRC from no previous source control
@
text
@@
