head	1.3;
access;
symbols
	FileCRC-2_27:1.3
	FileCRC-2_26:1.3
	FileCRC-2_25:1.2
	FileCRC-2_23:1.2
	FileCRC-2_22:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2001.02.06.14.07.38;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.02.14.38.36;	author dcotton;	state Exp;
branches;
next	1.1;

1.1
date	99.02.19.10.21.24;	author dcotton;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.02.19.10.21.24;	author dcotton;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  Added a C implementation of the assembler CRC function.
Detail:
  RISC OS builds still use the assembler version.  Portable versions will
    have to use the C implementation.
  Some portability changes made, but mostly this program  is not yet
    portable.
Admin:
  Built.

Version 2.26. Tagged as 'FileCRC-2_26'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:    display.c                                                   */
/* Purpose: Display routines.                                           */
/*                                                                      */
/* Author:  David Cotton <mailto:dcotton@@e-14.com>                      */
/* History: 0.01  Pre 1999-02-16                                        */
/*                Created. Originally used for the CopyApps utilities.  */
/*          0.02  1999-02-16                                            */
/*                Altered to generally improve it and add !MkDocs       */
/*                 comments.                                            */
/************************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

#ifdef RISCOS
#include "os.h"
#include "typedefs.h"
#include "display.h"
#include "kernel.h"
#include "swis.h"
#endif

#include "DBUG.h"

#ifdef RISCOS
void Report(os_error *er)
{
 printf("FileCRC has suffered an internal error.\n");
 printf("\n");
 printf("Error: [%x]  (%s)", er->errnum,er->errmess);
 exit(70);
}
#endif


void fatal(char *why, int exitcode)
{
  printf("%s\n",why);
  exit(exitcode);
}

void failure(char *what)
{
  printf("%s\n", what);
}

void progress(char *what)
{
  printf("%s\n",what);
}

void progressn(int n)
{
  printf(".. %02d%%", n);
}




/*********************************************************************************/
/* right                                                                         */
/*                                                                               */
/* This routine returns the right-most 'n' characters in the strng passed in.    */
/*                                                                               */
/* Parameters: str      The string to be truncated.                              */
/*             chars    The number of characters for it to be truncated to.      */
/*                                                                               */
/* Returns:    A pointer to the modified string.                                 */
/*                                                                               */
/*********************************************************************************/
char *right (char *str,
             int  chars)
{
    char *tmp;
    int  i;

    if (str)						/* Check the string isn't NULL */
    {
        if (strlen (str) > chars)			/* Ensure that the string is long enough */
        {
            tmp = (char *) dbg_malloc (strlen (str) + 1);	/* Reserve some space for temporary store */
            if (tmp)					/* Make sure memory is claimed */
            {
                sprintf (tmp, "%s", str + ((strlen (str) - chars)));  /* Take a copy */
                *(tmp + chars) = '\0';			/* Terminate the string */
                for (i = 0; i < 3; i++)
                {
                    *(tmp + i) = '*';			/* Overwrite first three chars with '*' */
                }
                sprintf (str, "%s", tmp);		/* Copy the truncated string */
                dbg_free (tmp);				/* Free temporary store */
            }
        }
    }
    return str;						/* Return the string */
}




/*********************************************************************************/
/* trunc_message                                                                 */
/*                                                                               */
/* This routine takes the passed string and displays only the characters that    */
/*  will fit in the width of the current screen mode. It displays the last       */
/*  characters in the string, which means that the beginning of the string       */
/*  becomes truncated.                                                           */
/*                                                                               */
/* Parameters: msg      The message to be displayed.                             */
/*                                                                               */
/* Returns:    Nothing.                                                          */
/*                                                                               */
/*********************************************************************************/
void trunc_message (char *msg)
{
    int screenwidth;
    char *tmp;
#ifdef RISCOS
    _kernel_swi_regs in, out;


    in.r[0] = -1;					/* Use current screen mode */
    in.r[1] = 1;					/* Find number of columns on screen */
    _kernel_swi (OS_ReadModeVariable, &in, &out);
    screenwidth = out.r[2];
#else
    screenwidth = 128;
#endif

    assert (msg!=NULL);

    tmp = (char *) dbg_malloc (strlen (msg) + 1);		/* Create temporary store */
    if (tmp)						/* Ensure it created okay */
    {
        strcpy (tmp, msg);				/* Take a copy of the original string */
        msg = right (msg, screenwidth);			/* Find right most characters of string */
        failure (msg);
        strcpy (msg, tmp);				/* Restore original string */
        dbg_free (tmp);					/* Free our temporary store */
    }
}
@


1.2
log
@	Various little changes.
Detail:
	Now under srccommit control; it obtains its version number from the VersionNum file.
	Errors (CRC, timestamp, exec addresses and filesize) display in a
better manner so that they are actually displayed in English and not
BAR-code.
	StripDepnd support added in the makefile.
Admin:
	Tested on a RiscPC.

Version 2.22. Tagged as 'FileCRC-2_22'
@
text
@d31 3
d39 1
a39 1
#include "assert.h"
d41 1
a41 1
#include "dbug.h"
d43 1
d51 1
a51 1

d135 2
a137 1
    char *tmp;
a138 1
    assert (msg!=NULL);
d144 5
@


1.1
log
@Initial revision
@
text
@a70 5
void title(char *what, char *which, char *when)
{
  printf("%s (V%s %s)\n", what, which, when);
}

@


1.1.1.1
log
@Initial import of FileCRC from no previous source control
@
text
@@
