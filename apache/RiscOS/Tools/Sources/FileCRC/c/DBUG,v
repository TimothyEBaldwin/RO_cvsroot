head	1.3;
access;
symbols
	FileCRC-2_27:1.3
	FileCRC-2_26:1.2
	FileCRC-2_25:1.1.1.1
	FileCRC-2_23:1.1.1.1
	FileCRC-2_22:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2018.10.14.11.34.54;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	parJ18zQAt8T6VVA;

1.2
date	2001.02.06.14.07.38;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	99.02.19.10.21.24;	author dcotton;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.02.19.10.21.24;	author dcotton;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Fix for memory leak on error
FileCRC.c: free tmpstr on error (2x places)
DBUG.c: delete pointless assignment of function parameter
Found by cppcheck static analysis.
Unrelated
Makefile: use things from AppStdRule to simplify a little

Version 2.27. Tagged as 'FileCRC-2_27'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:    dbug.c                                                      */
/* Purpose: Various debugging routines.                                 */
/*                                                                      */
/* Author:  David Cotton <mailto:dcotton@@e-14.com>                      */
/* History: 0.01  Pre 1999-02-16                                        */
/*                Created.                                              */
/*          0.02  1999-02-16                                            */
/*                Altered to generally improve it and add !MkDocs       */
/*                 comments.                                            */
/************************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#define PROTOTYPES_INTERNAL
#include "DBUG.h"
#include <time.h>



#ifdef DEBUGLIB

/*********************************************************************************/
/* DBUG_PRINTF                                                                   */
/*                                                                               */
/* This routine displays the passed text to a debug stream using dprintf()       */
/*                                                                               */
/* Parameters: level. The level of debugging for this message (1-5)              */
/*             fmt. A vararg'ed string.                                          */
/*                                                                               */
/* Returns:    Nothing                                                           */
/*                                                                               */
/*********************************************************************************/
void DBUG_PRINTF(int level, char *fmt, ...)
{
  va_list ap;
  char debug_line[256];
  char debug_line2[256];
  /* Add the time to the beginning of the line */
  sprintf(debug_line2, "%6d : ", clock());
  /* Now add the rest of the line */
  va_start(ap, fmt);
  vsprintf(debug_line, fmt, ap);
  strcat (debug_line2, debug_line);
  dprintf(("", debug_line2));
  va_end(ap);
}

#endif /* DEBUGLIB */




#ifdef DEBUGLIB

/*********************************************************************************/
/* dbg_malloc                                                                    */
/*                                                                               */
/* This routine acts as a wrapper for malloc(). It is only enabled if DEBUGLIB   */
/*  is defined. It differs from malloc() in that it outputs debugging messages   */
/*  to state how many bytes have been allocated to which memory area.            */
/*                                                                               */
/* Parameters: amount   The amount of memory required.                           */
/*                                                                               */
/* Returns:    A pointer to the newly-created memory area, or NULL if the        */
/*              operation was unsuccessful.                                      */
/*                                                                               */
/*********************************************************************************/
char* dbg_malloc(unsigned int amount)
{
  char* area;
  DBUG_PRINTF(DBUG_LVL_DIAG, "dbg_malloc(): Requesting %d bytes of memory.\n", amount);
  area = malloc(amount);
  if (!area)
  {
    printf("Error allocating %d bytes of memory.\n", amount);
    DBUG_PRINTF(DBUG_LVL_ERROR, "dbg_malloc(): Error allocating %d bytes of memory.\n", amount);
  }
  else
  {
    DBUG_PRINTF(DBUG_LVL_DIAG, "dbg_malloc(): Allocated area %p with %d bytes.\n", area, amount);
  }
  return (area);
}





/*********************************************************************************/
/* dbg_free                                                                      */
/*                                                                               */
/* This routine acts as a wrapper for free(). It is only enabled if DEBUGLIB is  */
/*  defined. It differs from free() in that it outputs debugging messages to     */
/*  state which memory area is being freed, and also set the pointer to the      */
/*  memory area to NULL afterwards.                                              */
/*                                                                               */
/* Parameters: area     The memory area to be freed.                             */
/*                                                                               */
/* Returns:    Nothing.                                                          */
/*                                                                               */
/*********************************************************************************/
void dbg_free(char* area)
{
  DBUG_PRINTF(DBUG_LVL_DIAG, "dbg_free(): Freeing area at %p.\n", area);
  free (area);
}

#endif /* DEBUGLIB */



@


1.2
log
@  Added a C implementation of the assembler CRC function.
Detail:
  RISC OS builds still use the assembler version.  Portable versions will
    have to use the C implementation.
  Some portability changes made, but mostly this program  is not yet
    portable.
Admin:
  Built.

Version 2.26. Tagged as 'FileCRC-2_26'
@
text
@a121 1
  area = NULL;
@


1.1
log
@Initial revision
@
text
@d31 1
a31 1
#include "DBUG.H"
@


1.1.1.1
log
@Initial import of FileCRC from no previous source control
@
text
@@
