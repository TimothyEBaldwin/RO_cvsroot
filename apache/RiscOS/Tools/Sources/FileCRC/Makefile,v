head	1.7;
access;
symbols
	FileCRC-2_27:1.7
	FileCRC-2_26:1.6
	FileCRC-2_25:1.4
	FileCRC-2_23:1.2
	FileCRC-2_22:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2018.10.14.11.34.52;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	parJ18zQAt8T6VVA;

1.6
date	2003.12.17.18.18.15;	author bavison;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.06.14.07.38;	author sbrodie;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.21.12.00.58;	author pskirrow;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.21.09.49.17;	author pskirrow;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.02.14.38.35;	author dcotton;	state Exp;
branches;
next	1.1;

1.1
date	99.02.19.10.21.24;	author dcotton;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.02.19.10.21.24;	author dcotton;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Fix for memory leak on error
FileCRC.c: free tmpstr on error (2x places)
DBUG.c: delete pointless assignment of function parameter
Found by cppcheck static analysis.
Unrelated
Makefile: use things from AppStdRule to simplify a little

Version 2.27. Tagged as 'FileCRC-2_27'
@
text
@# Copyright 1999 Element 14 Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Makefile for FileCRC
#
# ***********************************
# ***    C h a n g e   L i s t    ***
# ***********************************
# When          Who     What
# ----          ---     ----
# 11/2/1999     DSC     Created
# 17/2/1999     DSC     Preproccess & Instrumentation targets added.
#

#
# Generic options:
#

LDFLAGS = $(EXTRALDFLAGS) -c++

#
# Different compile options - choose one
#
# use PRODUCTION_TEST_BUILD if you want to build the version used for
#  production test software, along with its compiler flags, bugs etcetera.


# Override any options by setting the OPTS in the Build options

CDEFINES = -DRISCOS ${CCEXTRA} ${OPTS}
include StdTools
include AppStdRule
include AppLibs

#
# Program specific options:
#
COMPONENT = FileCRC
TARGETSA  = Targets.FileCRC
OBJS      = dbug.o filecrc.o display.o crc.o
OBJSI     = i.dbug i.filecrc i.display
OBJSINST  = inst.display inst.filecrc inst.dbug inst.crc

LIBSD     = ${DEBUGLIB} ${NET5LIBS}

#
# Generic rules:
#
all: ${TARGETSA} local_dirs
        @@echo ${COMPONENT}: all complete

install: ${TARGETSA} local_dirs
	${MKDIR} ${INSTDIR}.Docs
	${CP} ${TARGETSA} ${INSTDIR}.${COMPONENT} ${CPFLAGS}
	@@echo ${COMPONENT}: tool installed in library

preprocess: ${OBJSI} local_dirs
        @@echo ${COMPONENT}: preprocess build complete

instrument: ${OBJSINST} inst.instlib
        $(LD) $(LDFLAGS) -o targets.filecrci ${OBJSINST} inst.instlib ${CLIB} ${LIBS} ${LIBSD} ${RLIB} ${EXTRALIBS}
        @@echo ${COMPONENT}: instrument build complete

clean:
        ${WIPE} o.* ${WFLAGS}
        ${WIPE} i.* ${WFLAGS}
        ${WIPE} targets.* ${WFLAGS}
        ${WIPE} inst.* ${WFLAGS}
        ${RM} o
        ${RM} i
        ${RM} targets
        ${RM} linked
        ${RM} inst
        ${STRIP}
        @@echo ${COMPONENT}: cleaned

local_dirs:
        ${MKDIR} o
        ${MKDIR} i
        ${MKDIR} targets
        ${MKDIR} inst

#
# Executable target (static link)
#
${TARGETSA}: ${OBJS} ${CLIB} ${LIBS} ${LIBSD} ${RLIB} ${EXTRALIBS}
        ${LD} $(LDFLAGS) -o $@@ ${OBJS} ${CLIB} ${LIBS} ${LIBSD} ${RLIB} ${EXTRALIBS}

# Dynamic dependencies:
@


1.6
log
@Added install rule, added stripdepnd to !MkClean. Retagged.
@
text
@d15 1
a15 1
# Makefile for NCAccessManager
d36 1
a36 1
#  production test software, along with it's compiler flags, bugs etcetera.
d42 3
a44 20
include Makefiles:StdTools
include Makefiles:AppStdRule


# Libraries
#
include Makefiles:AppLibs

#
# Rule patterns
#
.SUFFIXES:  .oz .s .c .c+ .i .cmhg .inst
.c.i:;      $(CC) $(CFLAGS) -C -E $< >> $@@
.c++.i:;    $(C++) $(C++FLAGS) -c -C -E $< >> $@@
.i.inst:;   $(CC) $(CFLAGS) -C++ -c -o $@@ $<
.c.oz:;     ${CC} ${CCFLAGS} -o $@@ $< ${NCMAFLAGS}
.cmhg.o:;   ${CMHG} ${CMHGFLAGS} -o $@@ $<
.cmhg.h:;   ${CMHG} ${CMHGFLAGS} -d $@@ $<
.s.inst:;   ${AS} ${AFLAGS} $< $@@  -Predefine "ROM_BUILD SETL {FALSE}"
.s.oz:;     ${AS} ${AFLAGS} $< $@@  -Predefine "ROM_BUILD SETL {TRUE}"
a57 6
# Component build rules
#

# o.resources: s.resources ${NOTROMRESDEP}

#
@


1.5
log
@  Added a C implementation of the assembler CRC function.
Detail:
  RISC OS builds still use the assembler version.  Portable versions will
    have to use the C implementation.
  Some portability changes made, but mostly this program  is not yet
    portable.
Admin:
  Built.

Version 2.26. Tagged as 'FileCRC-2_26'
@
text
@d86 5
@


1.4
log
@  Replaced VersionNum test file with VersionNm in Tests.NCMAlite1 as it
  was  preventing srcommit from tagging this component.

Detail:
  When SrcCommit finds a VersionNum file it checks that the version number
  in the tag matches that in the VersionNum file. If it doesn't
  then it abandons the tagging process.

  The VersionNum file was simply a test file and could be called anything.

Admin:
  Note that the test suite fails because the date/time stamps
  do not match those in the CRC file (they are out by a few seconds).

Version 2.25. Tagged as 'FileCRC-2_25'
@
text
@d20 4
a23 4
# When		Who	What
# ----		---	----
# 11/2/1999	DSC	Created
# 17/2/1999	DSC	Preproccess & Instrumentation targets added.
d29 2
a30 20
MKDIR     = cdir
AS        = objasm
CC        = cc
CMHG      = cmhg
CP        = copy
LD        = link
RM        = remove
WIPE      = -wipe
CD        = dir
DEFMOD    = DefMod
AR        = LibFile
THROWBACK = -Throwback
STRIP     = stripdepnd


CPFLAGS   = ~cfr~v
WFLAGS    = ~c~v
CMHGFLAGS = -p -depend !Depend -throwback 
INCLUDES  = -IC: 
LDFLAGS	  = $(EXTRALDFLAGS) -c++
d41 3
a43 4
CCFLAGS = -c ${THROWBACK} ${CCEXTRA} -depend !Depend ${INCLUDES} ${OPTS}



d48 1
a48 11
LIBDIR	   = <Lib$Dir>
CLIB       = CLIB:o.stubs
RLIB       = RISCOSLIB:o.risc_oslib
RSTUBS     = RISCOSLIB:o.rstubs
ROMSTUBS   = RISCOSLIB:o.romstubs
ROMCSTUBS  = RISCOSLIB:o.romcstubs
ABSSYM     = RISC_OSLib:o.c_AbsSym
SOCKLIB	   = TCPIPLibs:o.socklib5 
INETLIB	   = TCPIPLibs:o.inetlib
LIBS       = <Lib$Dir>.tboxlibs.o.wimplib
C++LIB     = <Lib$Dir>.c++lib.o.c++libz
a53 1
.c.o:;      ${CC} ${CCFLAGS} -o $@@ $< 
a59 1
.s.o:;      ${AS} ${AFLAGS} $< $@@  -Predefine "ROM_BUILD SETL {FALSE}"
d72 2
d87 1
a87 1
	@@echo ${COMPONENT}: preprocess build complete
d90 1
a90 1
        $(LD) $(LDFLAGS) -o targets.filecrci ${OBJSINST} inst.instlib ${CLIB} ${LIBS} ${LIBSD} ${SOCKLIB} ${INETLIB} ${RLIB} ${EXTRALIBS}
d115 2
a116 5
${TARGETSA}: ${OBJS} ${CLIB} ${LIBS} ${LIBSD} ${SOCKLIB} ${INETLIB} ${RLIB} ${EXTRALIBS}
        ${LD} $(LDFLAGS) -o $@@ ${OBJS} ${CLIB} ${LIBS} ${LIBSD} ${SOCKLIB} ${INETLIB} ${RLIB} ${EXTRALIBS}



@


1.3
log
@  1. Changed error message to make it clearer.
  2. Fixed bug which could conceivably have caused a data abort.

Detail:
  1. A FileCRC check was failing with the error

       File 'DR.foo' inconsistent with 'foo'
       CRC Check Failed

     This implied that there was a problem with the CRC, when in fact
     FleCRC was merely complaining that the pathname was different.
     The error message has been changed so it now reads:

       Filename (or path) 'DR.foo' is inconsistent with 'foo'
       CRC Check Failed

  2. Two strings (*p and *q) were being compared by incrementing both
     p and q until *p!=*q, but there was no check for a \0 terminator,
     so if the data that followed each terminator was the same, then it
     would keep going. This occurred in two separate places.

Admin:
  Tested.

Version 2.24. Tagged as 'FileCRC-2_24'
@
text
@a150 3
o.dbug: c.dbug H.DBUG
o.filecrc: c.filecrc C:h.kernel C:h.swis C:h.os h.CRC h.Display h.FileCRC h.DBUG h.types VersionNum
o.display: c.display C:h.os C:h.kernel h.typedefs h.display C:h.kernel C:h.swis C:h.assert h.dbug
@


1.2
log
@	Various little changes.
Detail:
	Now under srccommit control; it obtains its version number from the VersionNum file.
	Errors (CRC, timestamp, exec addresses and filesize) display in a
better manner so that they are actually displayed in English and not
BAR-code.
	StripDepnd support added in the makefile.
Admin:
	Tested on a RiscPC.

Version 2.22. Tagged as 'FileCRC-2_22'
@
text
@d151 3
@


1.1
log
@Initial revision
@
text
@d41 1
d132 1
a150 20
o.dbug:	c.dbug
o.dbug:	H.DBUG
o.display:	c.display
o.display:	C:h.os
o.display:	C:h.kernel
o.display:	h.typedefs
o.display:	h.display
o.display:	C:h.kernel
o.display:	C:h.swis
o.display:	C:h.assert
o.display:	h.dbug
o.filecrc:	c.filecrc
o.filecrc:	C:h.kernel
o.filecrc:	C:h.swis
o.filecrc:	C:h.os
o.filecrc:	h.CRC
o.filecrc:	h.Display
o.filecrc:	h.FileCRC
o.filecrc:	h.DBUG
o.filecrc:	h.types
@


1.1.1.1
log
@Initial import of FileCRC from no previous source control
@
text
@@
