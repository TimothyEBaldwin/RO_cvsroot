head	1.8;
access;
symbols
	squeeze-5_14:1.7
	squeeze-5_13:1.7
	squeeze-5_12:1.7
	squeeze-5_11:1.7
	squeeze-5_10:1.7
	squeeze-5_09-2:1.7
	squeeze-5_09:1.6
	squeeze-5_08:1.5
	squeeze-5_07:1.4
	squeeze-5_06:1.4
	squeeze-5_05:1.3
	squeeze-5_04:1.3
	squeeze-5_03:1.3
	squeeze-5_02:1.3
	squeeze-5_01:1.2
	squeeze-5_00:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2015.03.27.08.28.11;	author rsprowson;	state dead;
branches;
next	1.7;
commitid	CAzM7w844tGBLdfy;

1.7
date	2010.05.19.16.16.13;	author bavison;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.05.15.13.40;	author kbracey;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.15.10.34.52;	author kbracey;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.16.12.35.24;	author sbrodie;	state Exp;
branches;
next	1.3;

1.3
date	99.06.11.16.13.21;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	99.02.22.18.45.36;	author smiddle;	state Exp;
branches;
next	1.1;

1.1
date	99.02.10.12.55.24;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.02.10.12.55.24;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Separate out the xpand tool
Xpand becomes a tool in its own right, since it only shared a header file with squeeze.

Version 5.15. Tagged as 'squeeze-5_15'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Title:     xpand - decompression of squeezed AIF executable images
 * Author:    RCC
 * Copyright: (C) 1988, Acorn Computers Ltd, Cambridge, England.
 * Date:      24-Mar-88
 * LastEdit:  24-Mar-88

 * 22Feb99: SJM: Note started to convert this to be able to run on
 * Solaris. However this isn't easily possible since currently it xpands
 * by running the unsqueeze code embedded in the code.
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "CLX/wholefls.h"

#ifdef __riscos
#include "CLib/kernel.h"
#include "CLib/swis.h"
#else
typedef struct {
   int load, exec;       /* load, exec addresses */
   int start, end;       /* start address/length, end address/attributes */
} _kernel_osfile_block;
#endif

#ifndef __riscos
#include <sys/types.h>
#include <sys/stat.h>
#endif

#include "squeeze.h"
#include "VersionNum"

#define DATE Module_Date
/* If macro value is empty, expression rewrites to "0 * + 1" which is zero. */
#if 0 * Module_MinorVersion_CMHG + 1 == 0
#  define VSN  Module_MajorVersion
#else
#  define VSN  Module_MajorVersion " (" Module_MinorVersion ")"
#endif
#define SELF "xpand"

typedef int func(int, int, int);

#ifndef __riscos
# include "asmcall1.h"
#else
extern int asmcall_call(func *, int, int, int);
extern int *asmcall_exit;
#endif

static int debug;
static int verbose;

#undef AIFPRELUDE /* musn't rely on this constant - it's changed over time */

/*
 * Veneer on file-handling.
 */

#define SAVE	  0
#define WRITEINFO 1
#define READINFO  5
#define LOAD	  0xff

#define FILFOUND  1

#ifdef __riscos
static void arthurise(_kernel_osfile_block *info)
{ if ((info->load == info->exec) && (info->load == 0x8000)) {
    /* can we use Arthur 'FF8' filetype ? */
    if (_kernel_hostos() == _kernel_ARTHUR) {
      /* This is Arthur - get time of day */
      int data[2];
      data[0] = 3;
      if (_kernel_osword(14, data) != _kernel_ERROR) {
	info->exec = data[0];
	info->load = 0xfffff800 + (data[1] & 0xff);
      }
    }
  }
}
#endif

static int fileinfo(_kernel_osfile_block *info, const char *name)
{
#ifdef __riscos
  if (_kernel_osfile(READINFO, name, info) != FILFOUND)
      return -1;
#else
  struct stat buf;
  int len, ftype;

  if (stat(name, &buf) != 0) return -1;

  len = strlen(name);
  if (len > 4 && name[len-4] == ',')
    ftype = (int)strtoul(name + len - 4, NULL, 16);
  else
    ftype = 0xfff;

  info->load = 0xfff00000 | (ftype << 8);
  info->exec = buf.st_mtime * 100 / 256;
  info->start = buf.st_size;
  info->end = 0;
#endif
  return 0;
}

static void fatalerror(const char *format, const char *name) {
  fputs(SELF ": ", stderr);
  fprintf(stderr, format, name);
#ifdef __riscos
  { _kernel_oserror *e = _kernel_last_oserror();
    if (e != 0) fprintf(stderr, " (host error %#x: %s)", e->errnum, e->errmess);
  }
#endif
  fputc('\n', stderr);
  exit(1);
}

#define ROR(x, n) (((x)<<(32-(n))) | (((x)>>(n)) & ((1<<(32-(n)))-1)))

static int immfield(word inst) {
  int shift = (inst & 0xf00) >> 7;
  int val = inst & 0xff;
  return ROR(val, shift);
}

static SqueezeHeader *find_squeeze_header(int isaif, int *decompress)
{
    /*
     * The size of the decoded thing is stored 6 words before the
     * start of the unsqueezing code (see squeeze.c).
     */
    if (!isaif) {
        /*
         * Non-AIF images skip the first few instructions of the unsqueezing
         * code; this has changed over time, so search backwards for
         * MOV R0, #<imm>, which is always the first instruction
         */
        while (((*decompress & 0xfffff000) != 0xe3a00000)) decompress--;
    }
    return (SqueezeHeader *) (decompress-SQUEEZEWORDS);
}

static int xpand(char *in, char *out)
{   _kernel_osfile_block info;
    bool isaif, isdata;
    int squeezedby = 0;
    int size;
    int *ws;
    aifhdr  *hdr;
    char *lastb;

    if (verbose)
      fprintf(stderr, "-- xpanding '%s' to '%s'\n", in, out);

    if (fileinfo(&info, in) == -1)
      fatalerror("no file '%s'", in);
    size = info.start;
    ws = (int *)malloc(size + sizeof(int) + (24*1024)); /* allow space for unsqueezing */
    hdr = (aifhdr *)(ws + 1);
    if (wf_load(in, hdr, size) == -1)
      fatalerror("can't load '%s'", in);
    if ((info.load & 0xfc000000) != 0) { /* Not a valid address */
	if ((info.load & 0xffffff00) == 0xfffff800) { /* Arthur absolute */
	    info.load = 0x8000; info.exec = 0x8000;
	} else if ((info.load & 0xffffff00) != SQUEEZED) {
	    info.exec = info.load;
	}
    }

    if ((size & 15) == 15 &&
	((hdr->bl_decompress & ~B_OFFSET) == BL ||
	 (hdr->bl_decompress & ~B_OFFSET) == B)
       ) {
      int d1, d2, d3;
      lastb = (char *)hdr + size;
      while (*--lastb == ' ') /* nothing */;
      if (isdigit(d3 = *--lastb) &&
	  isdigit(d2 = *--lastb) &&
	  *--lastb == '.' &&
	  isdigit(d1 = *--lastb) &&
	  *--lastb == ' ' &&
	  *--lastb == 'c' &&
	  *--lastb == 'c' &&
	  *--lastb == 'r')
	squeezedby = (d1-'0')*100+(d2-'0')*10+(d3-'0');
    }

    if (squeezedby == 0)
      fatalerror("'%s' is not squeezed", in);

    if (hdr->swi_exit == 0xef000011)	   /* OK, it's AIF */
	isdata = NO, isaif = YES;
    else if (((datahdr *)hdr)->datamagic == DATAMAGIC)	/* OK, it's squeezed data */
	isdata = YES, isaif = NO;
    else
	isdata = NO, isaif = NO;

    { int *decompress = &(((int *)hdr)[(hdr->bl_decompress & B_OFFSET) + PREFETCH]);
      SqueezeHeader *h = find_squeeze_header(isaif, decompress);
      int realsize = h->decodedsize;
      word *lastw = (word *)lastb - 1;

      if (debug)
	fprintf(stderr, "decodedsize %x  encodedsize %x  encodedtabs %x\n"
			"nshorts %x  nlongs %x  bytestomove %x\n"
			"squeezer %d.%02d\n",
			h->decodedsize, h->encodedsize, h->encodedtabs,
			h->nshorts, h->nlongs, h->bytestomove,
			squeezedby/100, squeezedby%100);
      /* Arrange to get back control after decompression.  We can't plant a
	 branch, since the decompression code gets shifted up store before
	 executing (and we'd rather not know the details).  We rely on the
	 fact that at the end of decompression, r8 points to the base of the
	 decompressed image and this is followed by
	    SUB r8, r8, #&7c
	    MOV pc, r8
	 (for aif images) or

	    ADD r8, r8, #exec_address - load_address
	    MOV pc, r8
	 (otherwise)
       */

      if (((int)lastb & 3) != 0 ||
	  *lastw != MOV_PC_R8)
	  fatalerror("format error in '%s'", in);
      if (isaif) {
          int backwards;
          for (backwards = 1; backwards < 8; ++backwards) {
            if (*(lastw-backwards) == (SUB_R8_R8_0 | 0x7c)) break;
          }
          if (backwards == 8) {
            fatalerror("aif format error in '%s' (end of expansion code not found)", in);
          }
          *(lastw-backwards) = (SUB_R8_R8_0 | 0x80);
      } else {
	  int execoffset = 0;
	  for (;; lastw--) {
	      word inst = *(lastw-1);
	      if ((inst & ~0xfff) == ADD_R8_R8_0)
		  execoffset += immfield(inst);
	      else if ((inst & ~0xfff) == SUB_R8_R8_0)
		  execoffset -= immfield(inst);
	      else
		  break;
	  }
	  info.exec += execoffset;
      }
      *lastw = LDR_PC_R8_MINUS4;
      *ws = (int)(&asmcall_exit);
      asmcall_call((func *)hdr, 0, 0, 0);
    /*
     * Just have to save it again.
     */
      if (isdata) {
	  datahdr *d = (datahdr *)hdr;
	  info.load = (int)d->load;
	  info.exec = d->exec;
	  info.start = (int)(d+1);
	  info.end = info.start + d->size;
      } else {
#ifdef __riscos
	  arthurise(&info);
#endif
	  info.start = (int)hdr;
	  if (isaif)
	    info.end = info.start + sizeof(*hdr) + realsize;
	  else
	    info.end = info.start + realsize;
      }
      if (wf_save(out, (void *)info.start, info.end - info.start) == -1)
	fatalerror("failed to write '%s'", out);
#ifdef __riscos
      _swix(OS_File, _INR(0,2), 18, out, (info.load << 12) >> 20);
#endif

      return(0);
    }
}

static void help(void)
{
    fprintf(stderr, "\n%s vsn %s [%s] - \n", SELF, VSN, DATE);
    fprintf(stderr, "takes an executable AIF image or data file compressed by\n");
    fprintf(stderr, "'squeeze' and decompresses it to reproduce the original image\n");
    fprintf(stderr, "(possibly with an extra 4 bytes of zeros on the end).\n\n");
    fprintf(stderr, "syntax: xpand <squeezed-file> [<unsqueezed-file>]\n");
}

int main(int argc, char *argv[])
{   int j;
    char *arg;
    char *a = NULL;
    char *b = NULL;
    char c;

    debug = verbose = 0;
    for (j = 1; j < argc; ++j) {
	arg = argv[j];
	if (arg[0] == '-') {
	    c = arg[1];
	    if (('A' <= c) && (c <= 'Z')) c += ('a' - 'A');
	    switch (c) {
		case 'h':  help();    exit(0);
		case 'q':  ++debug;   break;
		case 'v':  ++verbose; break;
		default:
		    fprintf(stderr, SELF ": flag '%c' not recognised", c);
		    help();
		    exit(1);
	    }
	} else { /* a filename */
	    if	    (a == NULL) a = arg;
	    else if (b == NULL) b = arg;
	    else {
		fatalerror("too many args '%s'", arg);
	    }
	}
    }
    if (a == NULL) fatalerror("need <file-to-xpand>", 0);
    if (b == NULL) b = a; /* xpand it to itself */
    return(xpand(a, b));
}
@


1.7
log
@  Changes to facilitate platform independence.
Detail:
  * Added shell-script make wrapper
  * Uses shared makefile fragments and one master makefile for all variants
  * #includes use CLX path explicitly
  * SWI numbers defined explicitly in s.unsqueeze to avoid dealing with the
    issue of RISC OS paths in GET statements
Admin:
   No functional change, so version not incremented

Tagged as 'squeeze-5_09-2'

Version 5.09. Not tagged
@
text
@@


1.6
log
@First OS_SynchroniseCodeAreas in unsqueeze code placed in binaries was WRONG.
Came to light in Rhenium; have been unable to reproduce in Iyonix.

It may be worth updating UnsqueezeAIF to identify the incorrect unsqueeze
code, and re-adding UnsqueezeAIF to the Iyonix ROM (as well as issuing as
a soft-load update for StrongARM Risc PCs).

Version 5.09. Tagged as 'squeeze-5_09'
@
text
@d32 1
a32 1
#include "wholefls.h"
d35 2
a36 2
#include "kernel.h"
#include "swis.h"
@


1.5
log
@Compression of non-AIF images was broken.
xpand would correctly decompress old non-AIF images, and the broken non-AIF
images generated by recent versions of squeeze, but needed to be changed to
also decompress the new non-AIF images.
Memory limit check now always occurs if running in the application slot,
regardless of whether we were loaded at &8000 - the check was not performed
reliably for non-AIF images either.

Version 5.08. Tagged as 'squeeze-5_08'
@
text
@d303 1
a303 1
static void help()
@


1.4
log
@  Fixed code detection code.
Detail:
  The insertion of the SWI XOS_SynchroniseCodeAreas in the squeeze code
    defeated xpand's attempts to decipher the code.  xpand is now willing
    to look back up to 8 instructions for the SUB r8, r8, #&7C instruction.
Admin:
  Tested - xpand can now expand things squeezed by squeeze again.

Version 5.06. Tagged as 'squeeze-5_06'
@
text
@d73 2
d148 17
a219 4
    /*
     * The size of the decoded thing is stored 6 words before the
     * start of the unsqueezing code (see squeeze.c).
     */
d221 1
a221 3
      SqueezeHeader *h = (SqueezeHeader *)(isaif ? decompress-SQUEEZEWORDS :
						   decompress-SQUEEZEWORDS-AIFPRELUDE);

@


1.3
log
@  Fixed host application overwrite/data abort on wimpslot overrun.
  Fixed filetype failure (RISC OS build)
Detail:
  If the application memory limit for a squeezed application was large
    enough to hold the squeezed code but not large enough to hold the
    unsqueezed version without overwriting the calling application
    (eg.  the C compiler being too large to fit under amu), then
    everything would die nastily.  This fix to the unsqueeze code
    verifies that the calling program will not be overwritten and
    aborts the unsqueeze operation before disaster strikes.
  RISC OS builds remember to retype the file after saving.
Admin:
  Tested by forcing amu to launch a newly-squeezed cc image in the
    appropriate memory conditions, and cc generates an error before
    unsqueezing and killing amu.
  Verified that UnSqueezeAIF still recognises and patches the unsqueeze
    code for StrongARM compatibility.

Version 5.02. Tagged as 'squeeze-5_02'
@
text
@d237 8
a244 4
	  if (*(lastw-1) != (SUB_R8_R8_0 | 0x7c))
	      fatalerror("aif format error in '%s'", in);
	  *(lastw-1) = (SUB_R8_R8_0 | 0x80);

@


1.2
log
@Ported squeeze to Solaris. cd ccsolaris ; make links ; make derived
You need CLX and aoftoc compiled for your architecture for it to
work. To do this converted the calls to _kernel functions into calls
to the wf_ functions in CLX.
xpand hasnt been ported since it currently works by running the
unsqueeze code that squeeze inserted into the binary and this
doesn't work too well on non-ARM architectures.

Version 5.01. Tagged as 'squeeze-5_01'
@
text
@d36 1
d278 3
@


1.1
log
@Initial revision
@
text
@d21 4
d30 5
d36 11
a46 1
#include <ctype.h>
d62 3
d67 1
d83 1
d98 26
d128 1
d132 1
d157 1
a157 1
    if (_kernel_osfile(READINFO, in, &info) != FILFOUND)
d162 1
a162 2
    info.load = (int)hdr; info.exec = 0;
    if (_kernel_osfile(LOAD, in, &info) != FILFOUND)
d266 1
d268 1
d275 1
a275 1
      if (_kernel_osfile(SAVE, out, &info) == _kernel_ERROR)
@


1.1.1.1
log
@  Import of sources to squeeze tool from Aquarius.
  Also contains sources to xpand tool.
Detail:
  Updated to take version numbers and dates from VersionNum
    but otherwise unchanged.
Admin:
  Changed to use srccommit.
  Initial VersionNum file faked to represent current version.

Tagged as squeeze-5_00

@
text
@@
