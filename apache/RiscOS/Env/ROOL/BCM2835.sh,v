head	1.3;
access;
symbols
	Env-1_38:1.3
	Env-1_37:1.2
	Env-1_36:1.2
	Env-1_35:1.2
	Env-1_34:1.2
	Env-1_33:1.2
	Env-1_32:1.2
	Env-1_31:1.2
	Env-1_30:1.1;
locks; strict;
comment	@# @;


1.3
date	2018.04.11.22.37.19;	author bavison;	state Exp;
branches;
next	1.2;
commitid	Cz2vgV5gXpYNK4yA;

1.2
date	2015.02.02.11.22.31;	author bavison;	state Exp;
branches;
next	1.1;
commitid	8y4EfT7uD213rq8y;

1.1
date	2014.09.24.19.54.34;	author bavison;	state Exp;
branches;
next	;
commitid	wJALpLyAoxWLtDRx;


desc
@@


1.3
log
@  Refactor cross-compilation environment scripts
Detail:
  In tentative efforts to support cross-compilation to date, a few
  components have had mk.sh scripts inserted. These are functionally
  equivalent to the !Mk* TaskObey files, in that they are a convenience for
  developers working on that component in isolation. However, unlike their
  RISC OS equivalents, the nature of shell scripts means that they are
  relatively complex, and are therefore relatively burdensome to create and
  maintain. This commit replaces this mechanism with a shell function which
  is defined when you source the Env file. This enables a build phase to be
  applied to the component at the working directory to be built with a
  simple "mk export", "mk install", "mk rom", "mk clean" and so on.
  Previously, the build variables COMPONENT, TARGET and INSTDIR were encoded
  in the mk.sh script, and where a component had multiple targets, the mk.sh
  script would run the phase on all such components; now the mk function
  scans the ModuleDB to locate this information instead. You can even target
  a component in another directory using the -C switch (chosen to match
  make's equivalent switch). Some efforts have also been made to support
  Posix shells other than bash. The only feature dropped is the ability to
  build the component using a different environment within a subshell.
  However it's relatively simple to construct this at the command line if
  desired.

Version 1.38. Tagged as 'Env-1_38'
@
text
@# Environment to build ROM for Raspberry Pi (BCM2835-based board)
#
# This script is applied to the current shell using the "." or "source" builtin shell commands.

export LOCALE=UK
export KEYBOARD=All
export MACHINE=RPi
export SYSTEM=Ursula
export USERIF=Raspberry
export DISPLAYTYPE=PAL
export IMAGESIZE=5120K
export HALSIZE=64K
export BUILD=ROOL/BCM2835
export APCS=APCS-32

# Get the location of this script when sourced from a variety of common Posix shells: bash, dash, ksh or zsh

if [ -n "$BASH" ]; then script=$BASH_SOURCE
elif [ -n "$TMOUT" ]; then script=${.sh.file}
elif [ -n "$ZSH_NAME" ]; then script=${(%):-%x}
elif [ ${0##*/} = dash ]; then x=$(lsof -p $$ -Fn0 | tail -1); script=${x#*n}
fi

export BUILDDIR="$(cd $(dirname $(readlink -f "$script"))/../../../.. && pwd)"

. $BUILDDIR/Env/!Common.sh
@


1.2
log
@  Add Raspberry Pi 2 support
Detail:
  The Raspberry Pi ROM now joins the IOMD ROM in supporting multiple
  architectures, in this case ARMv6 and ARMv7. This has been achieved by
  creating a new machine type specific for Raspberry Pi. The old ARM11ZF
  machine type remains for builds that are ARM11-only.

Version 1.31. Tagged as 'Env-1_31'
@
text
@a0 1
#!/bin/bash
d3 1
a3 4
# This can either be applied to the current shell using the "source" command,
# or executed directly. In the latter case, you will want to describe a
# a command to be executed by a subshell using the parameters to this script.
# In either case, the working directory must be set to the root of your sandbox on entry.
d16 1
a16 1
. Env/!Common.sh
d18 9
a26 1
[ -z "$@@" ] || bash -c "$@@"
@


1.1
log
@Resync cross-compile version of !Common with RISC OS native version.
Also add a couple more cross-compile Env files.

Version 1.30. Tagged as 'Env-1_30'
@
text
@d11 1
a11 1
export MACHINE=ARM11ZF
@

