head	1.6;
access;
symbols
	Env-1_38:1.6
	Env-1_37:1.5
	Env-1_36:1.5
	Env-1_35:1.5
	Env-1_34:1.5
	Env-1_33:1.5
	Env-1_32:1.3
	Env-1_31:1.3
	Env-1_30:1.3
	Env-1_29:1.2
	Env-1_28:1.2
	Env-1_27:1.2
	Env-1_26:1.2
	Env-1_25:1.2
	Env-1_24:1.2
	Env-1_23:1.2
	Env-1_22:1.2
	Env-1_21:1.2
	Env-1_20:1.2
	Env-1_19:1.2
	Env-1_18:1.2
	Env-1_17:1.2
	Env-1_16:1.2
	Env-1_15:1.2
	Env-1_14:1.2
	Env-1_13:1.2
	Env-1_12:1.2
	Env-1_11:1.2
	Env-1_10:1.2
	Env-1_09:1.1;
locks; strict;
comment	@# @;


1.6
date	2018.04.11.22.37.14;	author bavison;	state Exp;
branches;
next	1.5;
commitid	Cz2vgV5gXpYNK4yA;

1.5
date	2015.11.08.10.24.58;	author rool;	state Exp;
branches;
next	1.4;
commitid	74bvSgBQqzOx8hIy;

1.4
date	2015.11.07.17.34.55;	author rool;	state Exp;
branches;
next	1.3;
commitid	Yzmv2J5LmbxNybIy;

1.3
date	2014.09.24.19.54.29;	author bavison;	state Exp;
branches;
next	1.2;
commitid	wJALpLyAoxWLtDRx;

1.2
date	2011.03.17.19.29.52;	author srevill;	state Exp;
branches;
next	1.1;
commitid	WbZ5xonytZgcIecv;

1.1
date	2010.05.19.14.52.59;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.6
log
@  Refactor cross-compilation environment scripts
Detail:
  In tentative efforts to support cross-compilation to date, a few
  components have had mk.sh scripts inserted. These are functionally
  equivalent to the !Mk* TaskObey files, in that they are a convenience for
  developers working on that component in isolation. However, unlike their
  RISC OS equivalents, the nature of shell scripts means that they are
  relatively complex, and are therefore relatively burdensome to create and
  maintain. This commit replaces this mechanism with a shell function which
  is defined when you source the Env file. This enables a build phase to be
  applied to the component at the working directory to be built with a
  simple "mk export", "mk install", "mk rom", "mk clean" and so on.
  Previously, the build variables COMPONENT, TARGET and INSTDIR were encoded
  in the mk.sh script, and where a component had multiple targets, the mk.sh
  script would run the phase on all such components; now the mk function
  scans the ModuleDB to locate this information instead. You can even target
  a component in another directory using the -C switch (chosen to match
  make's equivalent switch). Some efforts have also been made to support
  Posix shells other than bash. The only feature dropped is the ability to
  build the component using a different environment within a subshell.
  However it's relatively simple to construct this at the command line if
  desired.

Version 1.38. Tagged as 'Env-1_38'
@
text
@# Common setup for build environment
# Include from an Env file, with "RiscOS" as the current directory
#

[ "$MACHINE" != "" ] || { echo "No build selected - Run an Env file"; exit 1; }

export TOOLSDIR=$BUILDDIR/Library

export ROOL_BIN=/opt/rool/bin
[ "$GCCSDK_INSTALL_CROSSBIN" != "" ] || export GCCSDK_INSTALL_CROSSBIN=/opt/gccsdk/cross/bin

# Replace existing entries on PATH to prevent it growing indefinitely
export PATH=$TOOLSDIR/Build:$TOOLSDIR/Misc:$ROOL_BIN:$GCCSDK_INSTALL_CROSSBIN:`echo -n $PATH | awk 'BEGIN{P="('$TOOLSDIR'|'$ROOL_BIN'|'$GCCSDK_INSTALL_CROSSBIN')";RS=":";ORS=":"}$0!~P' | sed 's/:$//'`

export APPDIR=$BUILDDIR/Apps
export MAKEFILEDIR=$BUILDDIR/BuildSys/GNUmakefiles
#export SRCDIR=$BUILDDIR/Sources
export INSTALLDIR=$BUILDDIR/Install

if [ "$APCS" = "APCS-R" ]; then
	TOOLOPTIONS="-26bit"
	ASASM_TOOLOPTIONS="-apcs26 -apcsfpv2"
	CMUNGE_TOOLOPTIONS="-26bit -apcs 3/26bit/fpe2"
	GCC_TOOLOPTIONS="-mapcs-26 -march=armv2 -mfpu=fpe2"
	NCC_TOOLOPTIONS="-APCS 3/26bit/fpe2"
	OBJASM_TOOLOPTIONS="-APCS 3/26bit"
elif [ "$APCS" = "APCS-32" ]; then
	TOOLOPTIONS="-32bit"
	ASASM_TOOLOPTIONS="-apcs32 -apcsfpv3"
	CMUNGE_TOOLOPTIONS="-32bit -apcs 3/32bit/fpe3"
	case "$MACHINE" in
	'Archimedes')
		GCC_TOOLOPTIONS="-march=armv2 -mfpu=fpe3"
		NCC_TOOLOPTIONS="-APCS 3/32bit/fpe3 -memaccess -L22-S22+L41"
		OBJASM_TOOLOPTIONS="-APCS 3/32bit"
		;;
	'All32')
		GCC_TOOLOPTIONS="-march=armv3 -mfpu=fpe3"
		NCC_TOOLOPTIONS="-APCS 3/32bit/fpe3 -cpu 3 -memaccess -L22-S22-L41"
		OBJASM_TOOLOPTIONS="-APCS 3/32bit -cpu 3"
		;;
	'32')
		GCC_TOOLOPTIONS="-march=armv3 -mfpu=fpe3"
		NCC_TOOLOPTIONS="-APCS 3/32bit/fpe3 -cpu 3 -memaccess -L22-S22+L41"
		OBJASM_TOOLOPTIONS="-APCS 3/32bit -cpu 3"
		;;
	'Tungsten')
		GCC_TOOLOPTIONS="-march=armv5te -mfpu=fpe3"
		NCC_TOOLOPTIONS="-APCS 3/32bit/fpe3 -cpu 5TE -memaccess +L22+S22+L41"
		OBJASM_TOOLOPTIONS="-APCS 3/32bit -cpu 5TE"
		;;
	'ARM11ZF')
		GCC_TOOLOPTIONS="-march=armv6 -mfpu=fpe3"
		NCC_TOOLOPTIONS="-APCS 3/32bit/fpe3 -cpu 6 -memaccess +L22+S22-L41"
		OBJASM_TOOLOPTIONS="-APCS 3/32bit/fpe3 -cpu 6Z --fpu VFPv2"
		;;
	'CortexA8')
		GCC_TOOLOPTIONS="-march=armv7 -mfpu=fpe3"
		NCC_TOOLOPTIONS="-APCS 3/32bit/fpe3 -cpu 7 -memaccess +L22+S22-L41"
		OBJASM_TOOLOPTIONS="-APCS 3/32bit/fpe3 -cpu Cortex-A8"
		;;
	'CortexA9')
		GCC_TOOLOPTIONS="-march=armv7 -mfpu=fpe3"
		NCC_TOOLOPTIONS="-APCS 3/32bit/fpe3 -cpu 7 -memaccess +L22+S22-L41"
		OBJASM_TOOLOPTIONS="-APCS 3/32bit/fpe3 -cpu Cortex-A9"
		;;
	'CortexA7')
		GCC_TOOLOPTIONS="-march=armv7 -mfpu=fpe3"
		NCC_TOOLOPTIONS="-APCS 3/32bit/fpe3 -cpu 7 -memaccess +L22+S22-L41"
		OBJASM_TOOLOPTIONS="-APCS 3/32bit/fpe3 -cpu Cortex-A7"
		;;
	*)
		GCC_TOOLOPTIONS="-march=armv2 -mfpu=fpe3"
		NCC_TOOLOPTIONS="-APCS 3/32bit/fpe3 -memaccess -L22-S22-L41"
		OBJASM_TOOLOPTIONS="-APCS 3/32bit"
		;;
	esac
fi
export TOOLOPTIONS
export ASASM_TOOLOPTIONS
export CMUNGE_TOOLOPTIONS
export GCC_TOOLOPTIONS
export NCC_TOOLOPTIONS
export OBJASM_TOOLOPTIONS

export APCSEXPORTDIR=$BUILDDIR/Export/$APCS
export HDRDIR=$APCSEXPORTDIR/Hdr
export EXPORTDIR=$HDRDIR/Interface
export GLOBALHDRDIR=$HDRDIR/Global
export CEXPORTDIR=$APCSEXPORTDIR/C
export LIBDIR=$APCSEXPORTDIR/Lib

# This enables you to simply type "make all" from the command line
alias make="make -I$MAKEFILEDIR --no-print-directory"

# This is similar, but infers COMPONENT, TARGET and INSTDIR from the ModuleDB
# if possible. Where a source directory occurs multiple times within the
# ModuleDB, make is invoked once for each possible COMPONENT, unless a single
# COMPONENT is specified in the environment. Settings of TARGET and INSTDIR
# from the environment also override those from the ModuleDB. You can also
# use the -C switch to avoid having to cd to a component first, just like
# with make. Any additional arguments (make targets etc) are passed to make.
mk ()
{(
    COMPONENTDIR=`pwd`
    if [ "$1" = "-C" ]; then
        COMPONENTDIR="$(cd $2 && pwd)"
        shift
        shift
    fi
    RELPATH=`echo ${COMPONENTDIR#*$BUILDDIR/} | tr / .`
    MYTMP=$(mktemp)
    
    if [ -n "$COMPONENT" ]; then
        grep "^$COMPONENT " $BUILDDIR/BuildSys/ModuleDB > $MYTMP
    else
        grep "$RELPATH" $BUILDDIR/BuildSys/ModuleDB | grep -v "$RELPATH\." > $MYTMP
    fi
    
    if [ $? -ne 0 ]; then
        # Component not found in ModuleDB - can't infer anything
        make -C $COMPONENTDIR $@@
    else
        while read -r DB_COMPONENT _ _ DB_INSTDIR DB_TARGET; do
            ARGS=""
            if [ -z "$COMPONENT" ]; then
                ARGS="$ARGS COMPONENT=$DB_COMPONENT"
            fi
            if [ -z "$TARGET" ]; then
                ARGS="$ARGS TARGET=$DB_TARGET"
            fi
            if [ -z "$INSTDIR" ]; then
                ARGS="$ARGS INSTDIR=$INSTALLDIR/$DB_INSTDIR"
            fi
            make -C $COMPONENTDIR $ARGS $@@
        done < $MYTMP
    fi
    rm $MYTMP
)}
@


1.5
log
@Machine selection changes
Detail:
  OMAP5: Since code wise and arch wise A7=A15=A17, the machines in HdrSrc have been made common on A7.
Admin:
  Bash script similarly changed, but untested.
  Retagged as Env-1_33.
@
text
@a6 1
export BUILDDIR=`pwd`
d20 1
a20 1
if [ "$APCS" == "APCS-R" ]; then
d27 1
a27 1
elif [ "$APCS" == "APCS-32" ]; then
d95 45
@


1.4
log
@Extra environment options
Detail:
  OMAP5 and Titanium environments defined.
  !Common.sh CPU switch changed to ARMv7 as appropriate.
Admin:
  Submission from Willi Theiss (OMAP5) and Elesar (Titanium).

Version 1.33. Tagged as 'Env-1_33'
@
text
@d68 1
a68 1
	'CortexA15')
d71 1
a71 1
		OBJASM_TOOLOPTIONS="-APCS 3/32bit/fpe3 -cpu Cortex-A15"
@


1.3
log
@Resync cross-compile version of !Common with RISC OS native version.
Also add a couple more cross-compile Env files.

Version 1.30. Tagged as 'Env-1_30'
@
text
@d53 1
a53 6
        'ARM11ZF')
                GCC_TOOLOPTIONS="-march=armv6 -mfpu=fpe3"
                NCC_TOOLOPTIONS="-APCS 3/32bit/fpe3 -cpu 6 -memaccess +L22+S22-L41"
                OBJASM_TOOLOPTIONS="-APCS 3/32bit/fpe3 -cpu 6Z --fpu VFPv2"
                ;;
	'CortexA8')
d56 5
d64 2
a65 2
		GCC_TOOLOPTIONS="-march=armv6 -mfpu=fpe3"
		NCC_TOOLOPTIONS="-APCS 3/32bit/fpe3 -cpu 6 -memaccess +L22+S22-L41"
d68 5
@


1.2
log
@Tweaks for new way of doing builds. Mainly removing dead cruft.

Version 1.10. Tagged as 'Env-1_10'
@
text
@d38 1
a38 1
	'Any32')
d50 1
a50 1
		NCC_TOOLOPTIONS="-cpu 5TE -memaccess +L22+S22+L41"
d53 5
d61 1
a61 1
		OBJASM_TOOLOPTIONS="-APCS 3/32bit -cpu 5TEJ"
d66 1
a66 1
		OBJASM_TOOLOPTIONS="-APCS 3/32bit -cpu 5TEJ"
@


1.1
log
@  Changes to facilitate platform independence.
Detail:
  Added shell-script equivalents of !Common and two Env files.
Admin:
  Tested by building the DDE tools on Linux.

Version 1.09. Tagged as 'Env-1_09'
@
text
@d18 1
a18 1
export SRCDIR=$BUILDDIR/Sources
@

