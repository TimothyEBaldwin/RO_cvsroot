head	1.1;
branch	1.1.1;
access;
symbols
	WinEdit-1_13:1.1.1.1
	WinEdit-1_12:1.1.1.1
	WinEdit-1_11:1.1.1.1
	WinEdit-1_10:1.1.1.1
	WinEdit-1_09:1.1.1.1
	WinEdit-1_08:1.1.1.1
	WinEdit-1_07:1.1.1.1
	WinEdit-1_06:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.12.10.19.05.14;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.10.19.05.14;	author bavison;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 2003 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*-*-C-*-
 *
 * Some functions to assist in icon justification bashing.
 */

#include "resed.h"


/*
 * Canonicalise icon flags word.  Return TRUE if the flag value changed.
 */

Bool justify_canonicalise (IconInfoPtr icon)
{
    unsigned int flags = icon->icon.flags | IF_VCENT;

    switch (icon->icon.flags & (IF_TEXT | IF_SPRITE))
    {
    case 0:
        flags |= IF_HCENT;
        flags &= ~IF_RJUST;
        break;
    case IF_TEXT:
    case IF_SPRITE:
        if (flags & IF_HCENT)
            flags &= ~IF_RJUST;
        break;
    case IF_SPRITE | IF_TEXT:
        if ((flags & IF_HCENT) && (flags & IF_RJUST))
            flags &= ~(IF_HCENT | IF_RJUST);
        break;
    }

    if (flags == icon->icon.flags)
        return FALSE;
    icon->icon.flags = flags;
    return TRUE;
}



/*
 * Given an icon, return its justification value.  We treat a
 * text+sprite icon with empty text as a sprite-only icon
 * for these purposes.
 */

JustifyType justify_type (IconInfoPtr icon)
{
    unsigned int flags = icon->icon.flags;

    if (flags & IF_IST == IF_IST &&
        (icon->icon.data[0] == 0 || icon->icon.data[0] == -1 ||
         *(char *) icon->icon.data[0] == 0))
        flags &= ~IF_TEXT;

    switch (flags & (IF_TEXT | IF_SPRITE))
    {
    case IF_TEXT:
    case IF_SPRITE:
        if (flags & IF_HCENT)           return Centre;
        else if (flags & IF_RJUST)      return Right;
        else                            return Left;
    case IF_TEXT | IF_SPRITE:
        if (flags & IF_HCENT)           return Centre;
        else if (flags & IF_RJUST)      return Left;    /* Sic */
        else                            return Right;   /* Sic */
    }
    return Centre;
}



/*
 * Set an icon to the specified justification type
 */

void justify_settype (IconInfoPtr icon, JustifyType type)
{
    unsigned int flags = icon->icon.flags & ~(IF_HCENT | IF_RJUST);
    unsigned int f = flags;

    if (f & IF_IST == IF_IST &&
        (icon->icon.data[0] == 0 || icon->icon.data[0] == -1 ||
         *(char *) icon->icon.data[0] == 0))
        f &= ~IF_TEXT;

    switch (f & (IF_TEXT | IF_SPRITE))
    {
    case IF_TEXT:
    case IF_SPRITE:
        if (type == Centre)             flags |= IF_HCENT;
        else if (type == Right)         flags |= IF_RJUST;
        break;
    case IF_TEXT | IF_SPRITE:
        if (type == Centre)             flags |= IF_HCENT;
        else if (type == Left)          flags |= IF_RJUST;  /* Sic */
        break;
    default:
        flags |= IF_HCENT;
    }

    icon->icon.flags = flags;
}
@


1.1.1.1
log
@Dug up the sources to WinEdit from the old Aquarius SrcFiler repository.
Made properly StrongARM and 32-bit compatible; updated to C99 standard;
gets version from VersionNum file; new Makefile written to use shared
makefiles and to provide an install rule.

Version 1.06. Tagged as 'WinEdit-1_06'
@
text
@@
