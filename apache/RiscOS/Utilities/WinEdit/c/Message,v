head	1.3;
access;
symbols
	WinEdit-1_13:1.3
	WinEdit-1_12:1.3
	WinEdit-1_11:1.3
	WinEdit-1_10:1.3
	WinEdit-1_09:1.2
	WinEdit-1_08:1.2
	WinEdit-1_07:1.1.1.1
	WinEdit-1_06:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2014.07.24.20.08.43;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	KqallZdVcnyayFJx;

1.2
date	2011.11.26.22.12.47;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	p5VOiaT7GJbQrTIv;

1.1
date	2003.12.10.19.05.14;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.10.19.05.14;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Makefile recreated from fragments
Get version number from messages file.
Use NoMem global message to say there isn't enough memory.
Swap key shortcut to match ResEd.

Version 1.10. Tagged as 'WinEdit-1_10'
@
text
@/* Copyright 2003 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*-*-C-*-
 * I allocate a per-MsgRec dynamic buffer to receive message expansions, which
 * must be considered private and volatile.  The size of this buffer has to be
 * specified when opening the message file with open_messagefile().  It should
 * be big enough for the longest entry in the Messages file.
 */

#include "resed.h"


/*
 * The 'longest' parameter is used to allocate the buffer for storing
 * messages in.  It must be at least as big as the longest
 * message in the messages file (after any expansion done by
 * MessageTrans_GSLookup.  Returns pointer to error block if open failed, else
 * NULL for success.
 */ 

error *message_openfile (MsgPtr msgs, char *filename, int longest)
{
    static const _kernel_oserror nomem = { 299, "NoMem" };
    _kernel_oserror *err;

    err = _swix(MessageTrans_FileInfo, _IN(1) | _OUT(2), filename, &(msgs->size));
    if (err != NULL) return err;

    msgs->buffersize = longest;
    msgs->data = malloc(msgs->size);
    msgs->buffer = malloc(msgs->buffersize);
    if ((msgs->data == NULL) || (msgs->buffer == NULL))
    {
        err = _swix(MessageTrans_ErrorLookup, _INR(0,3), &nomem, NULL, NULL, 0);
    }
    else
    {
        err = _swix(MessageTrans_OpenFile, _INR(0,2), &(msgs->opaque), filename, msgs->data);
    }
    
    if (err != NULL)
    {
        free(msgs->data);
        free(msgs->buffer);
        msgs->data = msgs->buffer = NULL;
        msgs->size = msgs->buffersize = 0;
        return err;
    }


    return NULL;
}


error * message_closefile (MsgPtr msgs)
{
    if (msgs->buffer)
        free(msgs->buffer);
    if (msgs->data)
        free(msgs->data);
    return _swix(MessageTrans_CloseFile, _IN(0),
                 &(msgs->opaque));
}


/*
 * Simple lookup with GSTransing but no parameter substitution.
 * The pointer returned points to a malloced buffer which is
 * private to the msgs structure passed in.  That is, the caller can
 * expect the contents to remain there until the next call
 * to message_lookup() with the same msgs parameter, or until
 * message_closefile() is called.
 *
 * If there's an error, just return a pointer to the original tag.
 */

char *message_lookup (MsgPtr msgs, char *token)

{
    char *res;
                
    if (_swix(MessageTrans_GSLookup, _INR(0,3) | _OUT(2),
              &(msgs->opaque), token, msgs->buffer, msgs->buffersize,
              &res) != NULL)
        return token;
    else
        return res;
}
@


1.2
log
@Remove local SWI call code.
Mass search and replace of swi() replaced with _swix() or _swi() as appropriate.
Removed '1.00' version numbers from !Run/!Boot.
Fix a few compiler warnings, use global filetype definitions.

Version 1.08. Tagged as 'WinEdit-1_08'
@
text
@a23 1
static error myerror = {299, "Could not allocate memory for messages"};
d35 5
a39 6
    error *err;
    err = _swix(MessageTrans_FileInfo, _IN(1) | _OUT(2),
                filename,
                &(msgs->size));
    if (err)
        return err;
a41 1
    
a42 2
    if (!msgs->data)
        return &myerror;
d44 8
a51 2
    if (!msgs->buffer)
        return &myerror;
d53 1
a53 3
    err = _swix(MessageTrans_OpenFile, _INR(0,2), 
                &(msgs->opaque), filename, msgs->data);
    if (err)
d61 3
a63 2
    else
        return NULL;
@


1.1
log
@Initial revision
@
text
@d37 3
a39 2
    err = swi(MessageTrans_FileInfo, R1, filename,
              OUT,  R2, &(msgs->size),  END);
d52 2
a53 4
    err = swi(MessageTrans_OpenFile,
              R0, &(msgs->opaque),
              R1, filename,
              R2, msgs->data,  END);
d73 2
a74 1
    return swi(MessageTrans_CloseFile,  R0, &(msgs->opaque),  END);
d94 3
a96 6
    if (swi(MessageTrans_GSLookup,
            R0, &(msgs->opaque),
            R1, token,
            R2, msgs->buffer,
            R3, msgs->buffersize,
            OUT,  R2, &res,  END))
@


1.1.1.1
log
@Dug up the sources to WinEdit from the old Aquarius SrcFiler repository.
Made properly StrongARM and 32-bit compatible; updated to C99 standard;
gets version from VersionNum file; new Makefile written to use shared
makefiles and to provide an install rule.

Version 1.06. Tagged as 'WinEdit-1_06'
@
text
@@
