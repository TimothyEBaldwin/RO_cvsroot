head	1.2;
access;
symbols
	WinEdit-1_13:1.2
	WinEdit-1_12:1.1.1.1
	WinEdit-1_11:1.1.1.1
	WinEdit-1_10:1.1.1.1
	WinEdit-1_09:1.1.1.1
	WinEdit-1_08:1.1.1.1
	WinEdit-1_07:1.1.1.1
	WinEdit-1_06:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2018.08.11.15.05.11;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	ScnsN3GXevKzkINA;

1.1
date	2003.12.10.19.05.14;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.10.19.05.14;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix NULL pointer assignment, realloc mistake
dragdrop.c: In dragdrop_scroll, don't write 0 to address 0 when 'removeptr' is NULL, as it often is.
registry.c: If realloc() fails, don't lose track of 'list' and leak the memory.
Found by cpp check static analysis.
dragdrop.c: Squash a couple of C99 prototype warnings.

Version 1.13. Tagged as 'WinEdit-1_13'
@
text
@/* Copyright 2003 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*-*-C-*-
 *
 * This file provides a simple mapping from window handles to
 * app-specific data pointers (closures)
 */

#include "resed.h"

#define DELTA 10

typedef struct _registryrec
{
    int used;
    int handle;
    RegistryType type;
    void *closure;
} RegistryRec, *RegistryPtr;

static RegistryPtr list = NULL;
static int listlen = 0;
static int listused = 0;


/*
 * Register a window.  Returns NULL for success, or else
 * an error ptr.
 */

error * registry_register_window (int handle, RegistryType type, void *closure)
{
    if (list)                   /* check for duplicate */
    {
        int i;
        for (i = 0; i < listused; i++)
            if (list[i].used && list[i].handle == handle)
                return NULL;
    }
    if (listused >= listlen)
    {
        RegistryPtr listextd;

        listextd = realloc (list, sizeof(RegistryRec) * (listlen += DELTA));
        if (listextd == NULL)
        {
            free (list);
            listlen = listused = 0;
            return error_lookup ("NoMem");
        }
        list = listextd;
    }
    list[listused].used = TRUE;
    list[listused].handle = handle;
    list[listused].type = type;
    list[listused].closure = closure;
    listused++;
    return NULL;
}


/*
 * Deregister a window.  Returns NULL for success, or else
 * an error ptr.
 */

error * registry_deregister_window (int handle)
{
    if (list)
    {
        int i;
        for (i = 0; i < listused; i++)
            if (list[i].used && list[i].handle == handle)
            {
                list[i].used = FALSE;
                if (i == listused - 1)
                    listused--;
                break;
            }
    }
    return NULL;
}


/*
 * Lookup a window based on its handle.  Returns the type,
 * or Unknown if the window was no found.  Note: does
 * not return error ptrs.  Can pass closure == NULL if you
 * don't want to know it.
 */

RegistryType registry_lookup_window (int handle, void **closure)
{
    if (list)
    {
        int i;
        for (i = 0; i < listused; i++)
            if (list[i].used && list[i].handle == handle)
            {
                if (closure) *closure = list[i].closure;
                return list[i].type;
            }
    }
    return Unknown;
}


/*
 * Enumerate.  Returns details of position'th entry, and updates position
 * to next.  (0 -> no more).
 */

int registry_enumerate_windows (int i, RegistryType *type, int *handle, void **closure)
{
    if (!list || listused == 0 || i >= listused)
        return 0;
    if (list[i].used == FALSE)
        return registry_enumerate_windows (i + 1, type, handle, closure);
    if (type) *type = list[i].type;
    if (handle) *handle = list[i].handle;
    if (closure) *closure = list[i].closure;
    return i + 1;
}
@


1.1
log
@Initial revision
@
text
@a52 2
        list = realloc (list, sizeof(RegistryRec) * (listlen += DELTA));
    if (list == NULL)
d54 10
a63 2
        listlen = listused = 0;
        return error_lookup ("NoMem");
@


1.1.1.1
log
@Dug up the sources to WinEdit from the old Aquarius SrcFiler repository.
Made properly StrongARM and 32-bit compatible; updated to C99 standard;
gets version from VersionNum file; new Makefile written to use shared
makefiles and to provide an install rule.

Version 1.06. Tagged as 'WinEdit-1_06'
@
text
@@
