head	1.8;
access;
symbols
	ABRelease-0_30:1.7
	ABRelease-0_29:1.6
	ABRelease-0_28:1.6
	ABRelease-0_27:1.6
	ABRelease-0_26:1.6
	ABRelease-0_25:1.6
	ABRelease-0_24:1.6
	ABRelease-0_23:1.6
	ABRelease-0_22:1.6
	ABRelease-0_21:1.6
	ABRelease-0_20:1.5
	ABRelease-0_19:1.5
	ABRelease-0_18:1.5
	ABRelease-0_17:1.4
	ABRelease-0_16:1.3
	ABRelease-0_15:1.3
	ABRelease-0_14:1.2
	ABRelease-0_13:1.2
	ABRelease-0_12:1.1;
locks; strict;
comment	@# @;


1.8
date	2012.02.23.00.10.18;	author jlee;	state dead;
branches;
next	1.7;
commitid	G94ryoqG1vnNgdUv;

1.7
date	2012.02.15.08.46.59;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	PIRsT1go7rMYneTv;

1.6
date	2012.01.07.18.44.54;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	MqW9i2HMopPMWgOv;

1.5
date	2011.05.25.20.23.30;	author jlee;	state Exp;
branches;
next	1.4;
commitid	0tpwGzqSgqp2N6lv;

1.4
date	2011.01.23.23.08.54;	author jlee;	state Exp;
branches;
next	1.3;

1.3
date	2010.11.14.19.00.24;	author jlee;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.17.18.05.05;	author jlee;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.13.00.10.40;	author jlee;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Use SDCreate component instead of local copies of the tool
Detail:
  Resources/OMAP3Dev/release_autobuild,feb, Resources/OMAP4Dev/release_autobuild,feb - Take SDCreate from the <Install$Dir>.ABRelease folder instead of using local copies of the tool
  Resources/OMAP3Dev/!SDCreate, Resources/OMAP4Dev/!SDCreate - Deleted local copies of SDCreate
Admin:
  Tested with building and packaging OMAP3 ROM


Version 0.31. Tagged as 'ABRelease-0_31'
@
text
@SDCreate
========


Introduction
------------

SDCreate is a utility designed to help people with the task of installing RISC OS ROM images onto SD cards, for use with the OMAP3 and OMAP4 ports of RISC OS. If you attempt to create an SD card manually then there are many places where things can go wrong, either due to user error or operating system quirks. But if you use SDCreate to create the image for you then you can (almost) guarantee that it will boot without any trouble.


Requirements
------------

Images can be created on almost any RISC OS computer with >32MB of spare disc space. You will need at least version 1.28 of the FrontEnd module and version 1.52 of DDEUtils. RISC OS 5 users can find up-to-date versions of these modules in the HardDisc4 image available in the downloads section of the RISC OS Open website. Users of 26bit machines can find the modules in the "System resources" download.
  http://www.riscosopen.org/content/downloads/other-zipfiles

If you want to use SDCreate to write the image to an SD card, then you'll need to be using a RISC OS 5 machine with a USB card reader and the USB mass storage drivers (SCSISoftUSB).

Alternatively, you can copy the SD card image to a Windows/Linux/Mac/etc. PC and write the image to an SD card using any number of the free utilities that are available for those platforms (see the 'Utilities for other platforms' section, below)

Before you use SDCreate to create an SD card image, you may need to track down some extra files/software:

* BeagleBoard-xM users will need suitable copies of x-loader and U-Boot. You will find suitable versions on the Linux SD card that came with your board; the 'mlo' file is x-loader, and the 'u-boot/bin' file is u-boot. Alternatively, you can extract them from the demo images available to download from the CircuitCo website:
  http://circuitco.com/support/index.php?title=Circuitco_Support_Wiki

* TouchBook users will need suitable copies of x-loader and U-Boot as well. You can either copy these off of the Linux SD card that came with the machine, or download new versions from the Always Innovating website.

* TouchBook users will also need to install the RISC OS port of mkimage, available from riscos.info:
  http://www.riscos.info/packages/CommandDetails.html#Mkimage


Usage
-----

The SDCreate main window is split into two sections - 'Create image' and 'Write image'. Depending on which options are selected the 'Run' button at the bottom may or may not be greyed out.

******** WARNING *******

The code which writes images to SD cards hasn't received thorough testing, and doesn't ask for confirmation before beginning the write operation. So if you've selected the wrong drive you will lose all your data on that drive, and if you try interacting with the drive while the write is occuring then it will likely result in a corrupt image.

******** WARNING *******


If you want to create an image, and save it as a file:

* Select 'Create image'
* Deselect 'Write image'
* Select the right machine type
* Drag the RISC OS ROM image to the 'ROM image' box
* Drag the x-loader and U-Boot binaries into the x-loader and U-Boot boxes, if necessary
* Drag your desired CMOS file into the 'CMOS file' box, if necessary
* Click 'Run'

If you want to create an image, and write it straight out to a card:

* Select both 'Create image' and 'Write image'
* Select the right machine type
* Drag the RISC OS ROM image to the 'ROM image' box
* Drag the x-loader and U-Boot  binaries into the x-loader and U-Boot boxes, if necessary
* Select the SCSI drive number which your SD card reader has appeared under
* Drag your desired CMOS file into the 'CMOS file' box, if necessary
* Click 'Run'

If you want to write an existing SD image to an SD card:

* Select 'Write image'
* Deselect 'Create image'
* Drag the image file to the 'SD image' box
* Select the SCSI drive number which your SD card reader has appeared under
* Drag your desired CMOS file into the 'CMOS file' box, if necessary
* Click 'Run'


That's it! If it all went well, you should now have a working SD card/image for use with your OMAP machine.


CMOS files
----------

RISC OS stores a number of non volatile settings in what is often referred to as CMOS memory. Most notably, these are all the configuration settings such as the keyboard repeat rate and the drive to boot from.

From RISC OS 5.18 onwards the OMAP3 HAL will try to find CMOS memory mounted on a carrier board plugged into the otherwise unused 14 pin JTAG connector.
If that is not found to be present then an attempt will be made to find a valid CMOS image loaded into volatile memory by the boot process, though any settings will be forgotten when powered down - it is recommended to obtain a CMOS carrier board from your supplier for full read/write capability.
If that is also not found to be present (or is corrupt) the defaults in the kernel will be used instead, so the machine will still boot whether the hardware is present or not and whether a CMOS file is present or not.

The default filename is simply 'cmos' but can be changed to anything you desire as long as the corresponding boot script is ammended (see 'The Techie Bit'
later).

The behaviour of SDCreate with regards to CMOS files is as follows:

* When creating an image (i.e. the 'Create image' box is ticked), you can place a copy of a specific CMOS file into the image by entering the filename in the 'CMOS file' box.
* If you don't specify a file, a blank CMOS file will be placed in the image.
* If you're writing an existing image to a card (i.e. 'Create image' isn't ticked), then by default the CMOS file held in the image will be used.
* However you can override this behaviour by entering a filename in the 'CMOS file' box. This CMOS file will then be used instead of the one held in the image.

The format of CMOS file used is compatible with that used by the *LoadCMOS/*SaveCMOS commands, or the load/save CMOS option available within Configure. Note that you should obviously only use CMOS files that have been saved by an OMAP3 machine; a file from a RiscPC, Iyonix, etc. isn't guaranteed to work correctly.


Additional usage notes
----------------------

Owners of old BeagleBoards, with version of U-Boot before 2009.01, may find that the 'BeagleBoard' option produces an SD card that won't boot on their machine. This can be solved in one of three ways:

* Edit the !SDCreate.Desc file so that the boot script is named 'RESET/SCR' instead of 'BOOT/SCR'. You need to change the "icn 8 maps_to ..." line (line 31)
* Reflash your NAND with the latest x-loader & U-Boot. See the beagleboard.org website for details.
* Use the BeagleBoard-xM machine type (with either the BeagleBoard or BeagleBoard-xM x-loader & U-Boot; both should be compatible with the non-xM boards).
  * Note however that this may introduce an additional problem, where the machine hangs on boot, due to an old, incompatible version of x-loader in NAND being used with the new version of U-Boot on the SD card. To fix this you can find an older version of U-Boot that works, or reflash your board, or always boot while holding down the User button.


Utilities for other platforms
-----------------------------

If you don't own a working RISC OS machine and therefore can't use SDCreate to create an SD card image, then 'The techie bit' section below has information as to what files SDCreate places into the images. This should allow you to create a working card manually.

If you've created an image file using SDCreate, but can't use SDCreate itself to write the image to a card, then you can use one of the following Windows/Linux/Mac utilities to write the image for you:

* Windows - Win32DiskImager - https://wiki.ubuntu.com/Win32DiskImager
  - Just make sure the file has a .img extension for Win32DiskImager to find it
* Linux - UNetbootin - http://unetbootin.sourceforge.net/
  - Or if you're feeling adventurous, just use 'dd'
* Mac - http://meego.com/devices/netbook/installing-meego-your-netbook
  - I'm not aware of any user-friendly utilities to do this on a Mac OS X machine, but the above instructions for writing a MeeGo Linux disc image onto a USB drive can easily be adapted for writing the SD card images created by SDCreate.


The techie bit
--------------

SDCreate creates SD card images in the following manner:

* The file !SDCreate.blank is a blank, 32MB FAT16 disc image created under Windows and then copied off of the SD card using 'dd' under Linux
* This file was then squashed using !Squash to cut down the size of the program.
* So one of the first things SDCreate does is to unsquash the image. If the image is being written straight out to the SD card then it will be unsquashed directly to the card using the SCSIFS_DiscOp SWIs. Otherwise, it will be unsquashed to a file. This file will then have its filetype set to 'DOSDisc', allowing the FAT image to be used as an image file with DOSFS.
* SDCreate then copies a series of files into the image. The exact files copied will depend upon which machine type you are using:

  BeagleBoard (non-xM):
    BOOT/SCR         <- The BeagleBoard boot script from !SDCreate.scripts
    UENV/TXT         <- U-Boot environment file from !SDCreate.scripts
    RISCOS           <- Your RISC OS ROM image
    CMOS             <- Your CMOS settings

  BeagleBoard-xM:
    MLO              <- The x-loader binary
    U-BOOT/BIN       <- The U-Boot binary
    BOOT/SCR         <- The BeagleBoard boot script from !SDCreate.scripts
    UENV/TXT         <- U-Boot environment file from !SDCreate.scripts
    RISCOS           <- Your RISC OS ROM image
    CMOS             <- Your CMOS settings

  DevKit8000:
    BOOT/SCR         <- The DevKit8000 boot script from !SDCreate.scripts
    RISCOS           <- Your RISC OS ROM image
    CMOS             <- Your CMOS settings

  IGEPv2:
    BOOT/INI         <- The IGEPv2 boot script from !SDCreate.scripts
    RISCOS           <- Your RISC OS ROM image
    CMOS             <- Your CMOS settings

  Touch Book:
    MLO              <- The x-loader binary
    U-BOOT/BIN       <- The U-Boot binary
    UIMAGE           <- Your RISC OS ROM image, packaged as a U-Boot uImage
    CMOS             <- Your CMOS settings

  Pandora:
    BOOT/SCR         <- The Pandora boot script from !SDCreate.scripts
    RISCOS           <- Your RISC OS ROM image
    CMOS             <- Your CMOS settings

  PandaBoard:
    MLO              <- The x-loader binary
    U-BOOT/BIN       <- The U-Boot binary
    BOOT/SCR         <- The PandaBoard boot script from !SDCreate.scripts
    RISCOS           <- Your RISC OS ROM image
    CMOS             <- Your CMOS settings

* The rules for which files get used on which machine type are in the FrontEnd description file (!SDCreate.Desc). I wouldn't advise trying to decipher it, though!
* If you want to examine the contents of an image file, just set its filetype to 'DOSDisc' and double-click. (The files get typed to Data since the FrontEnd module doesn't consider image files to be valid tool output!)
* The Touch Book uImage file is created using the following command:

  mkimage -A arm -O linux -T kernel -C none -a 0x81000000 -e 0x81000064 -n "RISC OS" -d <infile> <outfile>


The even more techie bit
------------------------

The human-readable source to the boot scripts is available in !SDCreate.scripts.source. You will also find there the 'convert' script script, which uses mkimage to convert the scripts to the binary format used by U-Boot.

Each boot script will enter the ROM image at a different address; this is how RISC OS works out what machine type it's running on. The full list of (current) ROM image entry points is given below:

BeagleBoard		ROM start + &00000000
DevKit8000		ROM start + &00000004
IGEPv2			ROM start + &00000008
Pandora			ROM start + &0000000C
Touch Book		ROM start + &00000010

PandaBoard		ROM start + &00000000

There is also an extra entry point at offset &00000064, which should be used when the ROM image is packed as a uImage. This entry point allows RISC OS to detect the machine type automatically, via the machine ID number that is passed to it by U-Boot. The uImage format also has a few other advantages (checksums, argument strings), so in the future it may be adopted for all machine types instead of just the Touch Book (and the only reason it's used on the Touch Book is because the default Touch Book version of U-Boot doesn't seem to look for boot scripts).

The U-Boot environment file (uenv.txt) is a file that new versions of U-Boot use to get their environment variables. Although it's supposedly an optional thing, the BeagleBoard-xM demo images have had their default environments changed such that the regular boot.scr is no longer used, and uenv.txt is the only (easy) method to boot RISC OS.


History
-------

V1.20 - 2012/2/12
 * Added PandaBoard support [Willi Theiss]
 * Fix interactive help text
 * Relaxed ROM size constraints and changed to using a 32MB FAT16 partition, to allow for both bigger ROMs and compressed ROMs
 * Change 'x-loader' to 'x-loader/MLO' in the templates file to help make it clear what's required
V1.16 - 2012/1/7
 * Scripts adjusted to load the CMOS file with 'fatload' [Rob Sprowson]
V1.15 - 2011/5/25
 * Added a uenv.txt file to provide compatability with the latest BeagleBoard/BeagleBoard-xM versions of U-Boot
V1.10 - 2011/1/22
 * Added support for adding CMOS files to images
V1.02b - 2010/11/14
 * Changed !Run file to RMEnsure FrontEnd 1.28 after receiving reports of 1.16 not working
V1.02 - 2010/10/17
 * Fixed a bug with the step that checks for successful uImage creation
 * Corrected all filenames to be in caps, so TouchBook/xM cards actually boot!
V1.01 - 2010/10/12
 * Tweaked a couple of bits and added Chris Wraight's icon
V1.00 - 2010/10/7
 * First release of the GUI version

Other
-----

SDCreate is public domain.

SDCreate was written by Jeffrey Lee, me@@phlamethrower.co.uk. SDCreate icon created by Chris Wraight.

http://www.phlamethrower.co.uk/riscos/sdcreate.php
@


1.7
log
@Import of !SDCreate 1.20 from Jeffrey Lee.

Version 0.30. Tagged as 'ABRelease-0_30'
@
text
@@


1.6
log
@A few changes to make deciphering what's what easier.
For ROMs we essentially have IOMDHAL[Dev]; Tungsten[Dev]; OMAP3[Dev]; OMAP4Dev and for these it only makes sense to autobuild the Dev ones and offer them as softloads where there's an actual ROM chip to softload over. OMAP4Dev remains development status, IOMDHAL doesn't exist in stable form.
So:
 * IOMDHALDev - only make a softload ZIP file
 * IOMDHAL - do not use at this time
 * OMAP3Dev - updated text docs to reflect CMOS use
 * OMAP3 - do not use at this time
 * TungstenDev - only make a softload ZIP file
 * Tungsten - do not use at this time
 * OMAP4Dev - untouched
Removed references to !SCSIForm from InstallHD4 script.
Don't turn off alignment exceptions by default in InstallHD4 script.
Update RMEnsures to 5.19 for development.
Make readme's be non specific about the version to save updating them again.

Version 0.21. Tagged as 'ABRelease-0_21'
@
text
@d8 1
a8 1
SDCreate is a utility designed to help people with the task of installing RISC OS ROM images onto SD cards, for use with the OMAP3 port of RISC OS. If you attempt to create an SD card manually then there are many places where things can go wrong, either due to user error or operating system quirks. But if you use SDCreate to create the image for you then you can (almost) guarantee that it will boot without any trouble.
d14 2
a15 2
Images can be created on almost any RISC OS computer with >8MB of spare disc space. You will need at least version 1.28 of the FrontEnd module and version 1.52 of DDEUtils. Up-to-date versions of these modules can be found in the !System archive available for download from the RISC OS Open website:
  http://www.riscosopen.org/content/downloads/boot-zipfiles
d74 1
a74 1
That's it! If it all went well, you should now have a working SD card/image for use with your OMAP3 machine.
d107 1
a107 1
  * Note however that this may introduce an additional problem, where the machine hangs on boot, due to an old, incompatible version of x-loader in NAND being used with the new version of U-Boot on the SD card. The only way to avoid this is to find an older version of U-Boot that works, or reflash your board, or always boot while holding down the User button.
d130 1
a130 11
* The file !SDCreate.blank is a blank, 8MB FAT12 disc image created under Linux using the following script:

  #!/bin/bash
  dd if=/dev/zero of=BlankImg bs=8225280 count=1
  sfdisk -C 1 -H 255 -S 63 -D BlankImg <<EOF
  ,,0x01,*
  EOF
  sudo losetup -v -o 32256 /dev/loop0 BlankImg
  sudo mkfs.vfat /dev/loop0 -n "RISC OS" -F 12
  sudo losetup -d /dev/loop0

d170 7
d197 2
d207 5
d213 1
a213 1
 * Scripts adjusted to load the CMOS file with 'fatload'
@


1.5
log
@Update SDCreate to V1.15
Detail:
  Resources/OMAP3Dev/!SDCreate/!Help, Desc, SDCreate,ffb, scripts/uenv.txt - New version of SDCreate to copy over a uenv.txt file when creating BB/BB-xM images
  Resources/OMAP3Dev/release_autobuild,feb - Updated to copy the extra file
Admin:
  SDCreate tested with creating BB & BB-xM images


Version 0.18. Tagged as 'ABRelease-0_18'
@
text
@d80 10
a89 1
Since OMAP3 machines lack any real CMOS RAM, the OMAP3 port of RISC OS uses a file stored on the SD card to emulate CMOS RAM. Therefore when you use SDCreate to install a new ROM image you must be careful not to overwrite the CMOS file, otherwise the settings held in CMOS will be restored to default. The behaviour of SDCreate with regards to CMOS files is as follows:
d92 1
a92 1
* If you don't specify a file, a blank CMOS file will be placed in the image. This file acts as a placeholder to ensure that CMOS settings can be saved back to the card once the SD/MMC driver gains write support.
d208 2
@


1.4
log
@Update SDCreate to V1.10. Add note about CMOS RAM.
Detail:
  Resources/OMAP3Dev/ReadMe.txt - Added a note about how the OMAP port handles CMOS RAM
  Resources/OMAP3Dev/!SDCreate/!Help, Desc, SDCreate,ffb, Templates,fec - Updated SDCreate to V1.10, which supports placing CMOS files into the SD images
Admin:
  New version of SDCreate tested on Iyonix; resulting images tested on BeagleBoard.


Version 0.17. Tagged as 'ABRelease-0_17'
@
text
@d23 2
a24 1
* BeagleBoard-xM users will need suitable copies of x-loader and U-Boot. You will find suitable versions on the Linux SD card that came with your board; the 'mlo' file is x-loader, and the 'u-boot/bin' file is u-boot. Alternatively, you can download the latest copies of those files from the beagleboard.org website.
d138 1
d146 1
d193 2
d199 2
@


1.3
log
@Replace !SDCreate with v1.02b. Add InstallHD4 script to help with setting up a !Boot sequence on OMAP machines.
Detail:
  Resources/OMAP3Dev/!SDCreate/!Help, !Run, !Desc - Updated to V1.02b. Only real change is to check for v1.28 of the FrontEnd module, since v1.16 was reported as not working.
  Resources/OMAP3Dev/InstallHD4,fe6, ReadMe.txt, release_autobuild,feb - Added InstallHD4 script, based around Trevor Johnson's script on the wiki
Admin:
  InstallHD4 script tested on BB-xM; seems to work!


Version 0.15. Tagged as 'ABRelease-0_15'
@
text
@d50 1
d60 1
d69 1
d76 13
d138 1
d145 1
d150 1
d155 1
d161 1
d166 1
d194 2
@


1.2
log
@Update SDCreate to V1.02
Detail:
  Resources/OMAP3Dev/!SDCreate/!Help, Desc & SDCreate,ffb - Updated for V1.02 of SDCreate. Fixes generation of SD cards for BeagleBoard-xM and TouchBook.
Admin:
  Tested with generation of all image types, and booting on TouchBook.


Version 0.13. Tagged as 'ABRelease-0_13'
@
text
@d14 2
a15 1
Images can be created on almost any RISC OS computer with >8MB of spare disc space. You will need at least version 1.15 of the FrontEnd module and version 1.52 of DDEUtils.
d172 2
@


1.1
log
@Update OMAP3 ROM autobuilder step to include !SDCreate in the ROM archive instead of a bunch of U-Boot scripts
Detail:
  Rather than running the risk of the user (or his OS) doing something wrong when creating SD card images from scratch, OMAP3 ROM images will now ship with the !SDCreate utility that presents the user with an easy-to-use WIMP frontend for creating and writing SD card images.
  For people without (working) RISC OS machines, the !SDCreate help file also contains enough information to allow them to set up a card manually, along with the source to the U-Boot scripts - so we're not really losing anything by deleting the old scripts folder.
Admin:
  Tested the release_autobuild stage on an OMAP3 ROM build, and everything seemed to be OK.


Version 0.12. Tagged as 'ABRelease-0_12'
@
text
@d77 1
a77 1
* Edit the !SDCreate.Desc file so that the boot script is named 'reset/scr' instead of 'boot/scr'. You need to change the "icn 8 maps_to ..." line (line 31)
d119 2
a120 2
    boot/scr         <- The BeagleBoard boot script from !SDCreate.scripts
    riscos           <- Your RISC OS ROM image
d123 4
a126 4
    mlo              <- The x-loader binary
    u-boot/bin       <- The U-Boot binary
    boot/scr         <- The BeagleBoard boot script from !SDCreate.scripts
    riscos           <- Your RISC OS ROM image
d129 2
a130 2
    boot/scr         <- The DevKit8000 boot script from !SDCreate.scripts
    riscos           <- Your RISC OS ROM image
d133 2
a134 2
    boot/ini         <- The IGEPv2 boot script from !SDCreate.scripts
    riscos           <- Your RISC OS ROM image
d137 3
a139 3
    mlo              <- The x-loader binary
    u-boot/bin       <- The U-Boot binary
    uimage           <- Your RISC OS ROM image, packaged as a U-Boot uImage
d142 2
a143 2
    boot/scr         <- The Pandora boot script from !SDCreate.scripts
    riscos           <- Your RISC OS ROM image
d168 11
@

