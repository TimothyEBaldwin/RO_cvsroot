head	1.4;
access;
symbols
	ABRelease-0_89:1.4
	RISC_OS-5_26_merge:1.3.2.1
	ABRelease-0_85-1_84_2_1:1.3.2.1
	RISC_OS-5_26:1.3.0.2
	RISC_OS-5_26_bp:1.3
	ABRelease-0_88:1.3
	ABRelease-0_87:1.3
	ABRelease-0_86:1.3
	ABRelease-0_85:1.3
	ABRelease-0_84:1.3
	ABRelease-0_83:1.3
	ABRelease-0_82:1.3
	ABRelease-0_81:1.3
	ABRelease-0_80:1.3
	ABRelease-0_79:1.3
	ABRelease-0_78:1.3
	ABRelease-0_77:1.3
	ABRelease-0_76:1.3
	ABRelease-0_75:1.3
	ABRelease-0_74:1.3
	ABRelease-0_73:1.3
	ABRelease-0_72:1.3
	ABRelease-0_71:1.3
	ABRelease-0_70:1.3
	ABRelease-0_69:1.3
	ABRelease-0_68:1.3
	ABRelease-0_67:1.3
	ABRelease-0_66:1.3
	ABRelease-0_65:1.3
	ABRelease-0_64:1.3
	ABRelease-0_63:1.3
	ABRelease-0_62:1.3
	ABRelease-0_61:1.3
	ABRelease-0_60:1.3
	ABRelease-0_59:1.3
	ABRelease-0_58:1.3
	ABRelease-0_57:1.3
	ABRelease-0_56:1.3
	ABRelease-0_55:1.3
	ABRelease-0_54:1.3
	ABRelease-0_53:1.3
	ABRelease-0_52:1.3
	ABRelease-0_51:1.3
	ABRelease-0_50:1.3
	ABRelease-0_49:1.3
	ABRelease-0_48:1.3
	ABRelease-0_47:1.2
	ABRelease-0_46:1.2
	ABRelease-0_45:1.2
	ABRelease-0_44:1.2
	ABRelease-0_43:1.2
	ABRelease-0_42:1.2
	ABRelease-0_41:1.2
	ABRelease-0_40:1.2
	ABRelease-0_39:1.2
	ABRelease-0_38:1.2
	ABRelease-0_37:1.2
	ABRelease-0_36:1.2
	ABRelease-0_35:1.2
	ABRelease-0_34:1.2
	ABRelease-0_33:1.2
	ABRelease-0_32:1.2
	ABRelease-0_31:1.2
	ABRelease-0_30:1.2
	ABRelease-0_29:1.2
	ABRelease-0_28:1.2
	ABRelease-0_27:1.2
	ABRelease-0_26:1.2
	ABRelease-0_25:1.2
	ABRelease-0_24:1.2
	ABRelease-0_23:1.2
	ABRelease-0_22:1.2
	ABRelease-0_21:1.2
	ABRelease-0_20:1.2
	ABRelease-0_19:1.2
	ABRelease-0_18:1.2
	ABRelease-0_17:1.2
	ABRelease-0_16:1.2
	ABRelease-0_15:1.2
	ABRelease-0_14:1.2
	ABRelease-0_13:1.2
	ABRelease-0_12:1.2
	ABRelease-0_11:1.2
	ABRelease-0_10:1.2
	ABRelease-0_09:1.2
	ABRelease-0_08:1.2
	ABRelease-0_07:1.2
	ABRelease-0_06:1.2
	ABRelease-0_05:1.2
	ABRelease-0_04:1.2
	ABRelease-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2018.10.26.21.44.53;	author bavison;	state Exp;
branches;
next	1.3;
commitid	lMnNolXCxyxf6wXA;

1.3
date	2013.03.23.13.20.39;	author rsprowson;	state Exp;
branches
	1.3.2.1;
next	1.2;
commitid	n4DzP17A4IfKYUIw;

1.2
date	2009.07.14.01.44.01;	author rool;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.13.16.10.12;	author srevill;	state Exp;
branches
	1.1.1.1;
next	;

1.3.2.1
date	2018.10.26.21.38.18;	author bavison;	state Exp;
branches;
next	;
commitid	UTAAsGEJKTSZ3wXA;

1.1.1.1
date	2009.07.13.16.10.12;	author srevill;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge branch RISC_OS-5_26
This has the effect of changing from Castle to Apache licence

Version 0.89. Tagged as 'ABRelease-0_89'
@
text
@ABRelease
=========

This component is designed to be inserted into builds (any type of build) so
that they can more fully interact with the Autobuild system.


HOW IT WORKS

The ABRelease component will run a build-specific script (obey file) for each
phase of the build process to allow any special behaviour to take place. To
do this, it will invoke the script by running it from a specific path, which
includes (in this order) the following Resources subdirectories:

  1. Resources.<Name of Autobuild build>  - e.g. "TungstenDev"
  2. Resources.<Name of build>            - e.g. "Tungsten"
  3. Resources.Generic

The script that is executed has a leafname which matches that of the phase it
will be run during, for example:

  Resources.TungstenDev.clean - run in the "clean" phase

If no script file is found for a given phase of a specific build, then no
action is taken by this component in that build phase.


THE DEFAULT SCRIPT

By default, only one phase has a corresponding obey file, and this will be
executed by any build, unless overridden by placing a script with the same
leafname into an earlier directory on the path. This default script is:

  Resources.Generic.release_autobuild

There are a few things to note about this script:

  1. It is only executed during the "release_autobuild" phase of the build
     process, so this won't happen when the build is initiated by !Builder,
     because that doesn't perform the "release_autobuild" phase. Normally,
     only the Autobuild process itself will run "release_autobuild" as the
     final build phase.

  2. This default script assumes a ROM build. It will create a zip archive
     which includes a copy of the Apache licence, a ReadMe text file and the
     ROM image (if found) and upload the archive onto the Autobuild server.

  3. All of the scripts are called with a single parameter, which is the
     INSTDIR build variable. This will be particularly useful for disc builds
     to locate the installed components.

For disc builds, there will need to be a "release_autobuild" script placed
earlier on the path which will do whatever packaging up and uploading is
required.

The default script will perform the following actions:

  * If there is no ROM image (e.g. the build failed), exit here
  * Create an empty directory to hold the files that will be zipped up
  * Copy the Apache licence file into the zip directory
  * Copy the ReadMe for this build into the zip directory
  * Copy the ROM image into the zip directory
  * Set the zip directory as the current directory
  * Create a zip archive with the required files in it
  * Return the CSD to its original state
  * Delete any pre-existing zip archive on the autobuild server
  * Copy the template zip archive onto the autobuild server
  * Remove any old crud from our build-specific resources directory

There is also a default script for the "clean" phase which deletes any copy
of the template zip archive from the Resources.<Name of Autobuild build>
directory (if there is one). This is really little more than an example.


ENVIRONMENT VARIABLES

In order to make writing these scripts easier, the ABRelease script sets up
some environment variables before looking for and runnnig the script for a
given build phase (if it exists):

  ab_res$dir    - the Autobuild resource directory (e.g. Resources.TungstenDev)
  ab_res$path   - path equivalent for convenience
  ab_build$dir  - the directory on the Autobuild server to upload into
  ab_build$path - path equivalent for convenience
  ab_zip$file   - the name of the zipfile to create on the Autobuild server (if any)

Note: some types of build might upload something other than a single zipfile
into their upload directory. In that case, the ab_zip$file variable can be
ignored.


FINAL NOTES

The Resources.Generic directory includes some resources which are generically
useful for builds, these are:

  * A copy of the Apache License Version 2.0 (text)
  * A template ReadMe text file containing only some generic information
@


1.3
log
@Sync ReadMe's with eachother
Some close relatives had become out of sync.
OMAP4 install script was trying to run SCSIForm.
Imported softload directory for IOMDHAL.
Some typos in the documentation ammended.

Version 0.48. Tagged as 'ABRelease-0_48'
@
text
@d45 1
a45 1
     which includes a copy of the Castle licence, a ReadMe text file and the
d60 1
a60 1
  * Copy the Castle licence file into the zip directory
d97 1
a97 1
  * A copy of the Castle licence (PDF)
@


1.3.2.1
log
@Uupdate packaging to use Apache rather than Castle licence.

Version 0.85, 1.84.2.1. Tagged as 'ABRelease-0_85-1_84_2_1'
@
text
@d45 1
a45 1
     which includes a copy of the Apache licence, a ReadMe text file and the
d60 1
a60 1
  * Copy the Apache licence file into the zip directory
d97 1
a97 1
  * A copy of the Apache License Version 2.0 (text)
@


1.2
log
@Fixed some very odd issues in the TungstenDev build.

I don't fully understand what was going wrong, but looked like an odd
interaction with Task Windows, SparkFS and Sunfish. I've removed all
requirement for SparkFS in favour of using the InfoZip CLI tool.

Admin:
  Tested in simple test builds and TungstenDev (but not a full autobuild
  because it's not in cvs yet!)
  Will require Library 1.36 or later.
Author:
  srevill

Version 0.04. Tagged as 'ABRelease-0_04'
@
text
@d10 1
a10 1
The ABRelease component will run a build-specifiy script (obey file) for each
d82 1
a82 1
  ab_red$path   - the Resources path, as described above
d84 1
a84 1
  ab_build$path - path to ab_build$dir - for convenience
@


1.1
log
@Initial revision
@
text
@d22 1
a22 1
  Resources.TungstenDev.clean   - run in the "clean" phase
d58 8
a65 8
  * If there is no ROM image (e.g. the build failed), exit here IfThere
  * If SparkFS isn't running, we're going to have problems so generate error
  * Remove any old template zip archive from our resources directory Remove
  * Copy the central template zip archive into our resources directory
  * Open the archive so we can copy into it
  * Copy a ReadMe file into the zip archive
  * Copy the ROM image into the zip archive
  * Close the archive (filer window)
d68 1
a68 1
  * Remove the template zip archive from our resources directory
d97 1
a97 1
  * A template zip archive containing a copy of the Castle licence (PDF)
a98 10
  * A utility (NullEvent) to cause a Task Window to sleep for a Wimp poll

The NullEvent utility is useful for putting between operations in a script in
order to ensure that some processing gets handed back to other Winp tasks.
This is useful for two reasons:

  1. It allows the contents of the Task Window to update on screen and give a
     better indication of progress

  2. Things like Filer_Run and Filer_Boot have a chance to execute
@


1.1.1.1
log
@Initial import of the ABRelease component.
@
text
@@
