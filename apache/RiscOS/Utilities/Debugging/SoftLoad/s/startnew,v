head	1.7;
access;
symbols
	SoftLoad-1_21:1.7
	SoftLoad-1_20:1.6
	SoftLoad-1_19:1.6
	SoftLoad-1_18:1.6
	SoftLoad-1_17:1.6
	SoftLoad-1_16:1.5
	SoftLoad-1_15:1.4
	SoftLoad-1_14:1.3
	SoftLoad-1_13:1.2
	SoftLoad-1_12:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2016.02.01.18.37.54;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	SFlum95X6auX8fTy;

1.6
date	2012.02.25.17.51.52;	author jlee;	state Exp;
branches;
next	1.5;
commitid	diNuVrCaNAoZ4zUv;

1.5
date	2011.06.25.23.25.38;	author jlee;	state Exp;
branches;
next	1.4;
commitid	TAhmZR3a1h2KN6pv;

1.4
date	2010.06.14.21.28.04;	author jlee;	state Exp;
branches;
next	1.3;

1.3
date	2009.04.23.17.13.20;	author rool;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.18.18.03.43;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2000.08.09.08.43.43;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.08.09.08.43.43;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to support ARMv7
Unlike ARMv5 and earlier, we can't rely on the final 'MMU off & jump' to be safely in the pipeline, fancy ARMs can do speculative execution and branch prediction ending up trying to run code that's not yet there followed by trying to execute exception vectors that also aren't there. Solve this by flat mapping the 'MMU off & jump' code like we do the ROM itself and jump to the copy in logical address space that's in the same place as in physical space.
softload.c:
  Express memory amounts using size_t so checks on machines with > 2GB don't think they have -ve memory amounts.
  Export log2phys() for the assembler to use.
  Use bool to hold booleans.
  Trim some unused/redundant defines.
startnew.s:
  Lookup the physical address of AppSpaceStart ready for L1PT flat mapping.
  Lookup the MMU_Changing ARMOp from the kernel rather than mess about with local copies (requires RISC OS 5.23 or later).
  Add code to skip the XScale/StrongARM bits and bobs based on the MIDR.
  Fix bug setting U bit in L1PT on ARMs that don't support it.
  Leave xsf alone when switching processor mode in CPSR.
  Use Push/Pull macros.
Tested on Titanium, and regression tested on a Risc PC softloading RISC OS 5.

Version 1.21. Tagged as 'SoftLoad-1_21'
@
text
@; Copyright 2000 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; startnew.s

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Services
        GET     Hdr:APCS.<APCS>
        GET     Hdr:OSEntries
        GET     Hdr:PublicWS
        GET     Hdr:Sound

        GET     Copro15ops.s

        AREA    |main|, CODE, READONLY

        EXPORT  |startnew|
        EXPORT  |DAhandler|
        EXPORT  |svcpeek|
;        EXPORT  |svcpoke|
        EXPORT  |svcarmid|
        EXPORT  |svcmemcpy|
        EXPORT  |asm_decompress|
        IMPORT  |log2phys|

startnew

; in -  r0 -> where ROM image will be in phys space (-1 if soft unloading)
;       r1 -> L1PT
;       r2 -> current ROM in phys space (-1 if soft loading)
;       r3 -> ARMA_Cleaner_flipflop word (kernel workspace, for StrongARM cache clean)
;       arg4 = logical base address of current ROM
;       arg5 = target ROM size, or current ROM size if soft unloading

        Push    "r0-r3" ;In some IOMD ROMs, Sound_Enable corrupts r2-r3. Store more
                        ; regs than necessary to protect against this.
        MOV     r0,#1
        SWI     XSound_Enable ;Make sure sound is off; avoids blast of noise when
                              ; booting compressed ROMs on Tungsten (not entirely sure why this
                              ; only happens with compressed ones, but we should make sure sound
                              ; is off regardless)

        SUB     sp,sp,#4
        MOV     r0,#AppSpaceStart
        MOV     r1,sp         ;Lookup physical address of first page of app space, but make sure that's
        BL      log2phys      ; done *after* the dynamic area containing the ROM has been set up
        ADD     sp,sp,#4
        MOV     r6,r0         ;Keep PA for later

        Pull    "r0-r5"

        SWI     XOS_EnterOS

        MSR     CPSR_c,#SVC32_mode+I32_bit+F32_bit ; Disable IRQs & FIQs when calling PreReset, same as the OS

        Push    "r0-r2"

        LDR     r0, =2 :OR: (10:SHL:8)  ; Get ARMop address of MMU_Changing
        SWI     XOS_MMUControl
        MOVVS   r0, #0
        MOV     r8, r0

        MOV     r1, #Service_PreReset   ; issue Service_PreReset to turn off h/w
        SWI     XOS_ServiceCall

        MSR     CPSR_c,#SVC32_mode+I32_bit+F32_bit ; Make sure they're still off

        ; There are at least two different DCache clean methods in use for
        ; StrongARM. 3.x and 4.x use ARMA_Cleaner_flipflop, while 5.x uses
        ; DCacheCleanAddr. So rather than keep adding more and more cleaner
        ; methods to the softload tool, we'll just flush and disable the data
        ; cache here using a simple SWI (assuming the SWI is supported!)

        CMP     r3,#0                   ; Only if no ARMA_Cleaner_flipflop
        BNE     %FT10
        ARM_read_ID r0
        AND     r1,r0,#&FF000000
        TEQ     r1,#&69000000
        BEQ     %FT10                   ; Ignore XScale
        AND     r1,r0,#&000F0000
        TEQ     r1,#&000F0000
        BEQ     %FT10                   ; Ignore 'Fancy' ARMs
        AND     r0,r0,#&F000
        CMP     r0,#&A000
        BNE     %FT10                   ; Ignore ARM6/7
        MOV     r0,#0
        MOV     r1,#0
        MVN     r2,#4
        SWI     XOS_MMUControl          ; StrongARM

        MSR     CPSR_c,#SVC32_mode+I32_bit+F32_bit ; Make sure they're still off
10
        Pull    "r0-r2"

        CMP     r0,#-1                  ; -1 means we want to 'soft unload' to real ROM
        BNE     startnew_flatten

        MOV     r0,r2                   ; we'll restart current ROM, but altered to jump to old
        ADD     r2,r1,r4,LSR #18        ; L1PT entry for ROM
        MOV     r7,r0
        ORR     r7,r7,#&400             ; make sure we have temporary write access to ROM
        ORR     r7,r7,#&01E             ; 1st 1MB section of ROM
        STR     r7,[r2]
        ARM_flush_TLB r2

        LDR     r7,NOPInst
        STR     r7,[r4]                 ; bung in a few NOPs to allow for some MMU-off delay
        STR     r7,[r4,#4]
        STR     r7,[r4,#8]
        STR     r7,[r4,#12]
        LDR     r7,MOVPC0Inst
        STR     r7,[r4,#16]             ; make it leap to real ROM

startnew_flatten

;
;set up L1 mapping so that logical mapping of ROM image at r0 is flat with
;physical mapping - this means that things will go smoothly when we turn off the
;MMU - we get away with this because the physical address of RAM on Medusa style
;machine is sufficiently high to avoid trashing any critical mapping around us
;at this point
;
        ARM_read_ID r7
        TST     r7, #&F000
        ADD     r7, r1, r0, LSR #18     ; r7 -> first L1PT entry
        ORR     r2, r0, #(1:SHL:10)     ; svc-only access
        ORR     r2, r2, #2              ; section mapped
        ORREQ   r2, r2, #1:SHL:4        ; U~C~B (L1_U only valid pre-ARM7)
10
        SUBS    r5, r5, #1024*1024
        STR     r2, [r7], #4
        ADD     r2, r2, #1024*1024
        BGT     %BT10

        Push    "r0-r4"

;
;set up L1 mapping so that logical mapping of app space bottom is flat with
;physical mapping - this gives somewhere to put a couple of MMU switch off instructions
;which will still be there when app space vanishes
;
        MOV     r0, r6, LSR #20
        MOV     r0, r0, LSL #20         ; MB align the page containing AppSpaceStart
        ADD     r7, r1, r0, LSR #18     ; r7 -> L1PT entry
        MOV     r2, r2, LSL #12
        ORR     r2, r0, r2, LSR #12     ; recycle L1PT flags from above
        STR     r2, [r7]                ; map it with a big spade

        ADR     r0, MMUOffInst
        ADR     r1, MMUOffInstEnd
        MOV     r2, #AppSpaceStart
10
        LDR     r5, [r0], #4            ; Copy the MMU off & jump to start of app
        STR     r5, [r2], #4
        TEQ     r0, r1
        BNE     %BT10

        ARM_read_ID r4
        AND     r2,r4,#&FF000000
        TEQ     r2,#&69000000
        BNE     notXScale

;flush cache(s) and TLB(s) - XScale version
        MOV     r1,#&FC000000
        ADD     r1,r1,#&800000
        ;we should really read the cache properties from the CP
        MOV     r0,#1024
xsynclp SUB     r1,r1,#32
        MCR     ARM_config_cp,0,r1,C7,C2,5   ;line-allocate
        SUBS    r0,r0,#1
        BNE     xsynclp

        ;Note that at this point the Dcache is full of invalid data for
        ;  the address range used and hopefully nothing else,
        ;  all other data having been written back to RAM

        MCR     ARM_config_cp,0,r0,C7,C6,0       ;invalidate Dcache and mini-Dcache
        MCR     ARM_config_cp,0,r1,C7,C5,0       ;invalidate Icache and BTB
        MRC     ARM_config_cp,0,r0,C2,C0,0       ;stall until CP15 changes effected
        MOV     r0,r0
        SUB     pc,pc,#4
        MCR     ARM_config_cp,0,r0,C8,C7,0       ;purge I+DTLBs

        ;ensure debug functionality is disabled so that the HAL/kernel code
        ;  doesn't stop at breakpoints, and position processor vectors at 0

        MRC     ARM_debug_cp,0,r0,ARM_DCS_reg,C0,0
        BIC     r0,r0,#1<<31
        MCR     ARM_debug_cp,0,r0,ARM_DCS_reg,C0,0
        ARM_read_control r1
        BIC     r1,r1,#&2000       ; Vectors at 0
        ARM_write_control r1

        B       doneflush

notXScale
;flush cache(s) and TLB(s) - Fancy ARM version
        AND     r2,r4,#&000F0000
        TEQ     r2,#&000F0000
        BNE     notFancy

        ARM_read_control r1
        BIC     r1,r1,#&2000       ; Vectors at 0
        ARM_write_control r1
        MOV     r1,#0
        MCR     ARM_config_cp,0,r1,C12,C0,0 ; VBAR=0

        TEQ     r8,#0
        BEQ     .                  ;pre Kernel 5.23 not supported
        BLX     r8                 ;MMU_Changing
        B       doneflush

notFancy
;flush cache(s) and TLB(s) - StrongARM/ARM6/ARM7 version
        AND     r4,r4,#&F000
        ;flush cache
        CMP     r4,#&A000
        ARM67_flush_cache NE       ;if not StrongARM, assume 6,7
        BNE     flushTLB
        ;StrongARM then (and OS must be 3.7 or later)
        MOVS    r2,r3              ;ARMA_Cleaner_flipflop, passed in
        BEQ     noflipflop
        LDR     r1,[r2]
        EOR     r1,r1,#16*1024
        STR     r1,[r2]
        ARMA_clean_DC r1,r2,r3     ;effectively, fully clean/flush wrt non-interrupt stuff
noflipflop
        ARMA_drain_WB
        ARMA_flush_IC              ;do *not* flush DC - may be interrupt stuff in it
flushTLB
        CMP     r4,#&A000
        ARMA_flush_TLBs EQ
        ARM67_flush_TLB NE         ;if not StrongARM, assume 6,7

doneflush
        Pull    "r0-r4"

        LDR     r3,[r0]
        LDR     r4,NOPInst               ;if inserted NOP, we want to jump here
        TEQ     r3,r4
        MOVEQ   r3,#0
        BEQ     startnew_jump

        LDR     r4,LDRPCInst             ;check if 1st instruction of the form LDR PC, [PC, +/-#x]
        EORS    r2, r4, r3, LSR #12      ; LDR PC,[PC,+#]
        CMPNE   r2, #1 :SHL: (23-12)     ; LDR PC,[PC,-#]
        MOVNE   r3, #0
        BNE     startnew_jump            ;assume it's a B instr then
        EOR     r3, r3, r4, LSL #12      ; extract offset, and up/down bit
        TST     r3, #1 :SHL: 23          ; NE => bit was 0, so -ve
        RSBNE   r3, r3, #1 :SHL: 23      ; get rid of bit 23 and negate
        ADD     r3, r3, #8               ; offset in ROM we're reading
        LDR     r3, [r0, r3]             ; address to jump to (may be in hi- or lo- ROM)

startnew_jump
; switch into 32-bit mode (we're already in 32-bit config)
        MRS     r2, CPSR
        BIC     r2, r2, #&1F
        ORR     r2, r2, #SVC32_mode
        MSR     CPSR_c, r2
        MOV     pc, r6                   ;jump to flat mapped MMU off code

MMUOffInst
        MOV     r2,#&30                  ; MMU off, in 32-bit config
        ARM_write_control r2
        ADD     pc, r0, r3               ; jump to it
MMUOffInstEnd

LDRPCInst
        DCI     &E59FF
NOPInst
        MOV     R0,R0
MOVPC0Inst
        MOV     PC,#0

;DAhandler for softROM DA (needs specific pages)
;r12 on entry to pregrow points to next page number needed
;
;we get away with handler code in app space, because softload runs predesktop
;(no swapping) and never returns
;
DAhandler
        CMP     r0,#0           ;pregrow? (clears V)
        MOVNE   pc,r14
        Push    "r0-r2"
        LDR     r0,[r12]        ;next page needed
DAh_pregrowloop
        STR     r0,[r1],#12
        ADD     r0,r0,#1
        SUBS    r2,r2,#1
        BNE     DAh_pregrowloop
        STR     r0,[r12]        ;for next call
        Pull    "r0-r2"
        MOV     pc,r14


; uint32 svcpeek(uint32 *addr)
svcpeek
        SWI     XOS_EnterOS
        LDR     r0, [r0]
        WritePSRc USR_mode,r3
        Return  ,LinkNotStacked

; void svcpoke(uint32 *addr, uint32 val)
;svcpoke
;        SWI     XOS_EnterOS
;        STR     r1, [r0]
;        WritePSRc USR_mode,r3
;        Return  ,LinkNotStacked

; uint32 svcarmid(void)
svcarmid
        SWI     XOS_EnterOS
        MRC     p15,0,r0,c0,c0,0
        WritePSRc USR_mode,r3
        Return  ,LinkNotStacked

; void svcmemcpy(void *dest,void *src,uint32 len)
svcmemcpy ROUT
        SWI     XOS_EnterOS
        ORR     r3,r0,r1
        ORR     r3,r3,r2
        TST     r3,#3
        BEQ     svcmemcpy_words
10
        SUBS    r2,r2,#1
        LDRGEB  r3,[r1],#1
        STRGEB  r3,[r0],#1
        BNE     %BT10
        WritePSRc USR_mode,r3
        Return  ,LinkNotStacked
svcmemcpy_words
        TST     r2,#7
        BEQ     svcmemcpy_doublewords      
20
        SUBS    r2,r2,#4
        LDRGE   r3,[r1],#4
        STRGE   r3,[r0],#4
        BNE     %BT20
        WritePSRc USR_mode,r3
        Return  ,LinkNotStacked
svcmemcpy_doublewords
30
        SUBS    r2,r2,#8
        LDMGEIA r1!,{r3,ip}
        STMGEIA r0!,{r3,ip}
        BNE     %BT30
        WritePSRc USR_mode,r3
        Return  ,LinkNotStacked

IMB32   Push    "lr"
        SWI     XOS_SynchroniseCodeAreas
        Pull    "pc"

IMB26   Push    "lr"
        ; Temporarily drop into 26bit mode so we can safely call the (26bit) SWI
        MSR     CPSR_c,#SVC26_mode
        SWI     XOS_SynchroniseCodeAreas
        MSR     CPSR_c,#SVC32_mode+I32_bit+F32_bit
        Pull    "pc"

asm_decompress
        ; R0 = OS hdr
        ; R1 = workspace ptr
        ; Switch to SVC mode to stop clib throwing a hissy fit if an event
        ; occurs and it tries to unwind the stack
        MRS     R3,CPSR
        SWI     OS_EnterOS
        Push    "r3"
        ; Get workspace pointer in right reg
        MOV     R2,R1
        ; If we're in a 26bit mode we must switch to SVC32 (with IRQ+FIQ disabled) to allow us to safely run the code located in the ROM (which will be in a DA)
        TST     R3,#&10
        ADREQ   R1,IMB26
        MSREQ   CPSR_c,#SVC32_mode+I32_bit+F32_bit
        ADRNE   R1,IMB32
        ; Call the decompression code
        LDR     R3,[R0,#OSHdr_DecompressHdr]
        ADD     R3,R3,R0
        LDR     R12,[R3,#OSDecompHdr_Code]
        MOV     LR,PC
        ADD     PC,R12,R3
        ; Back to USR26/USR32
        Pull    "r3"
        MSR     CPSR_c,r3
        MOV     pc,lr

        END
@


1.6
log
@Teach softload tool about different ROM sizes, compressed ROMs, and new Tungsten "NVidia STRAP data" HAL device
Detail:
  c/softload - Rewrote lots of code to add support for ROM size detection and compressed ROM detection while trying to avoid making the code even more confusing than it already is.
  - Use C99 uint32_t type instead of non-standard uint32
  - Can now probe the physical memory table to try and find the hard ROM location - tool can now locate the hard ROM of Tungsten machines
  - Add -n[odecompress] option to disable decompression of compressed images
  - Add -d[ummyrun] option to cause tool to exit just before the point it would start the new ROM, for debugging
  - Improve help text
  - Update NVidia patching code to also try patching the "NVidia STRAP data" HAL device
  s/startnew - Tweaked startnew to add support for different ROM sizes
  - Improve svcmemcpy to copy words/doublewords where possible
  - Add asm_decompress code for running ROM decompression code
Admin:
  Tested with softloading/unloading various ROMs on Tungsten & IOMD


Version 1.17. Tagged as 'SoftLoad-1_17'
@
text
@d18 8
d27 1
a27 10
    GET s.Copro15Ops

    GET Hdr:ListOpts
    GET Hdr:Macros
    GET Hdr:System
    GET Hdr:Services
    GET Hdr:APCS.<APCS>
    GET Hdr:OSEntries
    GET Hdr:PublicWS
    GET Hdr:Sound
d31 8
a38 7
        EXPORT |startnew|
        EXPORT |DAhandler|
        EXPORT |svcpeek|
;        EXPORT |svcpoke|
        EXPORT |svcarmid|
        EXPORT |svcmemcpy|
        EXPORT |asm_decompress|
d49 2
a50 1
        STMFD   sp!,{r0-r3} ; In some IOMD ROMs, Sound_Enable corrupts r2-r3. Store more regs than necessary to protect against this.
d52 11
a62 1
        SWI     XSound_Enable ; Make sure sound is off; avoids blast of noise when booting compressed ROMs on Tungsten (not entirely sure why this only happens with compressed ones, but we should make sure sound is off regardless)
d64 1
a64 1
        LDMFD   sp!,{r0-r5}
d70 7
a76 1
        STMFD   r13!, {r0-r2}
d94 3
d103 1
a103 1
        SWI     XOS_MMUControl
d105 1
a105 1
        MSR     CPSR_c,#SVC32_mode+I32_bit+F32_bit
d107 1
a107 2

        LDMFD   r13!, {r0-r2}
d116 1
a116 1
        ORR     r7,r7,#&01E             ; 1st 1Mb section of ROM
d137 2
d141 2
a142 1
        ORR     r2, r2, #(1:SHL:4):OR:2 ; U~C~B, section mapped
d149 23
a171 2
;flush cache(s) and TLB(s), ARMs 6,7,StrongARM and XScale
        STMFD   r13!,{r0-r4}
d173 3
a175 3
        AND      r2,r4,#&FF000000
        TEQ      r2,#&69000000
        BNE      notXScale
d177 1
d180 1
a180 1
;TWe should really read the cache properties from the CP
d200 1
a200 1
        
a201 1
        MRC     ARM_config_cp,0,r1,ARM_control_reg,C0,0
a202 1
        BIC     r1,r1,#&2000
d204 3
a206 1
        MCR     ARM_config_cp,0,r1,ARM_control_reg,C0,0
d211 21
a231 3
        AND      r4,r4,#&F000
;flush cache
        CMP      r4,#&A000
d233 2
a234 2
        BNE      flushTLB
;StrongARM then (and OS must be 3.7 or later)
d248 1
d250 1
a250 1
        LDMFD   r13!,{r0-r4}
d259 2
a260 2
        EORS    r5, r4, r3, LSR #12      ; LDR PC,[PC,+#]
        CMPNE   r5, #1 :SHL: (23-12)     ; LDR PC,[PC,-#]
d262 1
a262 1
        BNE     startnew_jump            ; probably a B instr
d274 4
a277 1
        MSR     CPSR_cxsf, r2
d281 1
d299 1
a299 1
        STMFD   r13!,{r0-r2}
d307 1
a307 1
        LDMFD   r13!,{r0-r2}
@


1.5
log
@SoftLoad tool improvements and fixes
Detail:
  c/startnew - Use svcpeek() to read from the page tables in ROM_physaddr. Fixes bug #267.
  Added read_sys_info() function and sysinfo_t struct for storing various bits of information about the system. OS_ReadSysInfo is used to try and work out whether the machine has a traditional 26bit IOMD-style memory map, the logical & physical address of the hard ROM, and whether the current ROM is soft or hard.
  Added physmemcpy() function to try to memcpy() a physical address range into a logical address range. Knows how to copy data directly via the flat-mapped IOMD physical memory map, and via OS_Memory 14/15.
  Updated arewefine(), copy_ROM_and_go(), load_ROM_and_go(), main() to make use of sysinfo_t, and to provide more error messages when things go wrong
  Made main() throw an error if the user tries running the tool from within a task window
  Made patch_NVidia_module() verify that the Tungsten HAL layout is as expected
  copy_ROM_and_go() now uses physmemcpy(), allowing it to be used to softload a hard ROM from within a RISC OS 5 IOMD soft ROM.
  load_ROM_and_go() now double-checks that patched Tungsten ROM doesn't match the current ROM before finalising the softload. This allows the tool to correctly detect if a new Tungsten softload is identical to the current one.
  s/startnew - Added svcmemcpy() function, which is used by physmemcpy().
  Improved the way StrongARM cache cleaning is handled. If a StrongARM is detected and the ARMA_cleaner_flipflop kernel value wasn't found (e.g. as on RISC OS 5) then OS_MMUControl is used to flush and disable the D-cache before any page table manipulation is performed. This allows the tool to be used on RO 5 IOMD ROM builds.
  Also tweaked the way interrupts are handled - now both IRQs and FIQs are disabled, and they'll be disabled before issuing Service_PreReset, to match the behaviour of the OS.
Admin:
  Tested with various operations on an Iyonix (5.12 ROM, 5.17 softload) and RiscPC (3.7 ROM, 5.17 softload).
  Fixes bug #267


Version 1.16. Tagged as 'SoftLoad-1_16'
@
text
@d26 3
d38 1
d42 1
a42 1
; in -  r0 -> where ROM image will be in phys space (0 if soft unloading)
d44 1
a44 1
;       r2 -> current ROM in phys space (0 if soft loading)
d47 1
d49 5
a53 1
        LDR     r4,[sp],#4
d90 1
a90 1
        TEQ     r0,#0                   ; 0 means we want to 'soft unload' to real ROM
d121 2
a122 4
        STR     r2, [r7], #4            ; put in entries for 4x 1Mb for ROM
        ADD     r2, r2, #1024*1024
        STR     r2, [r7], #4
        ADD     r2, r2, #1024*1024
d125 1
a125 1
        STR     r2, [r7], #4
d135 1
a135 1
        ADD	r1,r1,#&800000
a163 5
        ;disable the ATU temporarily because the HAL will move the flash ROM
        ;  back to address 0
;        MOV     r0,#0
;        STR     r0,[,#ATU_CR]

a248 1
        MOV     r0, r0
a255 1
;        MOV     r0, r0
a262 1
        MOV     r0, r0
d266 1
a266 1
svcmemcpy
d268 4
d274 2
a275 2
        LDRNEB  r3,[r1],#1
        STRNEB  r3,[r0],#1
d278 56
a333 2
        MOV     r0, r0
        Return  ,LinkNotStacked       
@


1.4
log
@Fix softload tool for ROMs which start with LDR PC,[PC,#...]
Detail:
  s/startnew - the code in doneflush now performs the right checks for LDR PC,[PC,#...] instructions, allowing the tool to be used on IOMD ROMs again.
Admin:
  Tested with softloading ROMs on both a RiscPC & Iyonix.


Version 1.15. Tagged as 'SoftLoad-1_15'
@
text
@d34 1
d48 3
a50 1
        STMFD   r13!, {r0,r1}
a52 1
        LDMFD   r13!, {r0,r1}
d54 26
a79 1
        SWI     XOS_IntOff              ; we really don't want old ROM active at all
d171 2
a172 1
        MOV     r2,r3              ;ARMA_Cleaner_flipflop, passed in
d177 1
d266 12
@


1.3
log
@  Iyonix-aware softloader received from Adrian Lees
Detail:
  Quoting from Adrian's email:
    It's still rather hacky in places, and in particular it must resort to
    patching some of the HAL's init code because the HAL is still softload-
    unaware.
Admin:
  Tested on the release version of 5.14 from Castle

Version 1.14. Tagged as 'SoftLoad-1_14'
@
text
@d165 2
a166 1
        TEQ     r4, r3, LSR #16
@


1.2
log
@  Miscellaneous tidy-up.
Detail:
  * s.Copro15ops upgraded to latest version - many changes including 32-bit
    compatibility
  * Moved to using shared Makefiles
  * Minor tweaks to s.startnew - no functional change
Admin:
  Not tested. Definitely not suitable for Iyonix!

Version 1.13. Tagged as 'SoftLoad-1_13'
@
text
@a26 3
ROMlogaddr       * &03800000


a28 1

d41 4
a44 1
;
d58 1
a58 1
        ADD     r2,r1,#ROMlogaddr:SHR:18 ;L1PT for ROM
a64 1
        MOV     r2,#ROMlogaddr
d66 4
a69 4
        STR     r7,[r2]                 ; bung in a few NOPs to allow for some MMU-off delay
        STR     r7,[r2,#4]
        STR     r7,[r2,#8]
        STR     r7,[r2,#12]
d71 1
a71 1
        STR     r7,[r2,#16]             ; make it leap to real ROM
d74 1
d93 1
a93 1
;flush cache(s) and TLB(s), ARMs 6,7,StrongARM
d96 42
d155 1
d163 5
a167 1
        LDR     r4,LDRPCInst             ;assume 1st instruction of the form LDR PC, [PC, +/-#x]
@


1.1
log
@Initial revision
@
text
@d139 1
a139 1
        DCD     &E59FF
d180 1
a180 1
;        MOVS    pc, r14
@


1.1.1.1
log
@
Import of RISC OS ROM softloader.  This is the version that is in common
  use around the company.  Tested briefly on desktop machine.
 
Tagged as SoftLoad-1_12

@
text
@@
