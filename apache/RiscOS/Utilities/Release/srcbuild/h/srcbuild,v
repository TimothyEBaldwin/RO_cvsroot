head	1.21;
access;
symbols
	srcbuild-0_51:1.21
	srcbuild-0_50:1.21
	srcbuild-0_49:1.21
	srcbuild-0_48:1.20
	srcbuild-0_47:1.20
	srcbuild-0_46:1.20
	srcbuild-0_45:1.20
	srcbuild-0_44:1.20
	srcbuild-0_43:1.19
	srcbuild-0_42:1.18
	srcbuild-0_41:1.18
	srcbuild-0_40:1.17
	srcbuild-0_39:1.17
	srcbuild-0_38:1.17
	srcbuild-0_37:1.17
	srcbuild-0_36:1.17
	srcbuild-0_35:1.17
	srcbuild-0_34:1.17
	srcbuild-0_33:1.17
	srcbuild-0_32:1.17
	srcbuild-0_31:1.17
	srcbuild-0_30:1.16
	srcbuild-0_29:1.16
	srcbuild-0_28:1.16
	srcbuild-0_27:1.16
	srcbuild-0_26:1.15
	srcbuild-0_25:1.14
	srcbuild-0_24-1_23_2_4:1.13.2.2
	srcbuild-0_24-1_23_2_3:1.13.2.2
	srcbuild-0_24-1_23_2_2:1.13.2.1
	srcbuild-0_24-1_23_2_1:1.13.2.1
	sbrodie_BBE:1.13.0.2
	sbrodie_BBE_bp:1.13
	srcbuild-0_24:1.13
	srcbuild-0_23:1.12
	srcbuild-0_22:1.12
	srcbuild-0_21:1.12
	srcbuild-0_20:1.12
	srcbuild-0_19:1.11
	srcbuild-0_18:1.10
	srcbuild-0_17:1.9
	srcbuild-0_16:1.9
	srcbuild-0_15:1.9
	srcbuild-0_14:1.8
	srcbuild-0_13:1.8
	srcbuild-0_12:1.7
	srcbuild-0_11:1.7
	srcbuild-0_10:1.7
	srcbuild-0_09:1.7
	srcbuild-0_08:1.6
	srcbuild-0_07:1.5
	srcbuild-0_06:1.5
	srcbuild-0_05:1.5
	srcbuild-0_04:1.5
	srcbuild-0_03:1.5
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.21
date	2011.03.17.19.13.56;	author srevill;	state Exp;
branches;
next	1.20;
commitid	fnYulYGnMGmFCecv;

1.20
date	2005.08.11.12.53.20;	author srevill;	state Exp;
branches;
next	1.19;

1.19
date	2004.11.12.14.23.26;	author bavison;	state Exp;
branches;
next	1.18;

1.18
date	2004.03.12.16.54.31;	author srevill;	state Exp;
branches;
next	1.17;

1.17
date	2001.03.22.13.20.19;	author sbrodie;	state Exp;
branches;
next	1.16;

1.16
date	2001.02.02.11.22.12;	author sbrodie;	state Exp;
branches;
next	1.15;

1.15
date	2001.01.25.16.16.54;	author sbrodie;	state Exp;
branches;
next	1.14;

1.14
date	2000.12.15.16.26.52;	author sbrodie;	state Exp;
branches;
next	1.13;

1.13
date	2000.11.16.11.08.37;	author kbracey;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	2000.06.08.17.44.37;	author dcotton;	state Exp;
branches;
next	1.11;

1.11
date	2000.05.22.12.22.26;	author dcotton;	state Exp;
branches;
next	1.10;

1.10
date	2000.03.27.13.41.08;	author dcotton;	state Exp;
branches;
next	1.9;

1.9
date	99.09.09.12.54.10;	author nbingham;	state Exp;
branches;
next	1.8;

1.8
date	99.05.07.12.37.27;	author kbracey;	state Exp;
branches;
next	1.7;

1.7
date	98.10.27.10.38.49;	author blaughto;	state Exp;
branches;
next	1.6;

1.6
date	98.10.27.09.40.19;	author kbracey;	state Exp;
branches;
next	1.5;

1.5
date	97.09.25.11.24.53;	author rbuckley;	state Exp;
branches;
next	1.4;

1.4
date	97.09.22.16.55.11;	author rbuckley;	state Exp;
branches;
next	1.3;

1.3
date	97.09.04.13.33.15;	author rbuckley;	state Exp;
branches;
next	1.2;

1.2
date	97.08.22.16.17.15;	author rbuckley;	state Exp;
branches;
next	1.1;

1.1
date	97.08.21.16.44.56;	author rbuckley;	state Exp;
branches
	1.1.1.1;
next	;

1.13.2.1
date	2000.12.07.17.03.45;	author sbrodie;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2000.12.14.17.41.50;	author sbrodie;	state Exp;
branches;
next	;

1.1.1.1
date	97.08.21.16.44.56;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Modified to not assume all source code is in a "Sources" directory (or relative
to that location).
Also cleaned up the makefile's clean phase.

Admin: THIS VERSION OF SRCCOMMIT WILL BREAK EXISTING BUILDS!

Version 0.49. Tagged as 'srcbuild-0_49'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#ifndef srcbuild_srcbuild_h
#define srcbuild_srcbuild_h

#include <stdarg.h>
#include <stdbool.h>
#include "VersionNum"

/* From CLX */
#include "hash.h"

#ifdef RISCOS
#define AMUMACHINEVAR   "Alias$amu_machine"
#define ENV_BUILD_DIR   "Build$Dir"     /* directory containing build */
#define ENV_NUM_LOCALE  "Build$LocaleListNumeric" /* A numeric variant of the locale list. */
#define ENV_RES_DIR     "Resource$Dir"  /* Where the export resources are held */
#define BBE_BS_MAKEFILE "BBEExport"     /* The Makefile containing the BBE rules */
#define BBE_BS_TOOLS    "StdTools"      /* The Makefile containing the standard tool definitions */
#else
#define AMUMACHINEVAR   "AMUMACHINE"
#define ENV_BUILD_DIR   "BUILDDIR"      /* directory containing build */
#define ENV_NUM_LOCALE  "BuildLocaleListNumeric" /* A numeric variant of the locale list. */
#define ENV_RES_DIR     "RESOURCEDIR"   /* Where the export resources are held */
#define BBE_BS_MAKEFILE "BBEExport"     /* The Makefile containing the BBE rules */
#define BBE_BS_TOOLS    "StdTools"      /* The Makefile containing the standard tool definitions */
#endif

#ifdef RISCOS
/* These variables are only ever set by RISC OS builds - variable scoping rules mean that
 * it is pointless setting them on other OSes as the variables aren't visible to the parent process.
 */
#define ENV_LOGFILE_LOCATION "SrcBuild$LogfileLocation"
#define ENV_IMAGE_LOCATION   "SrcBuild$ImageLocation"
#define ENV_RETURN_CODE      "SrcBuild$ReturnCode"
#endif

extern FILE *standard_output, *standard_error;

#define APP_VERSION Module_HelpVersion

#define ENV_BUILD_NAME  "Build"         /* name of build */
#define ENV_IMAGE_SIZE  "ImageSize"     /* size of image to be created */
#define BUILDSYS_DIR    "BuildSys"      /* directory off build root */
#define EXPORT_DIR      "Export"        /* directory containing the exported data */
#define SHADOW_DIR      "Shadow"        /* srcbuild state information */
#define LOGS_DIR        "Logs"          /* log info */
#define INSTALL_DIR     "Install"       /* directory for built modules */
#define IMAGES_DIR      "Images"        /* directory for final images */
#define COMPONENTS_DIR  "Components"    /* directory for component files */
#define MODULE_DB_FILE  "ModuleDB"      /* name of module database file */
#define ENV_LOCALE_LIST "LocaleList"    /* name of env var holding the comma-seperated list of locales */
#define ENV_LOCALE      "Locale"        /* The single locale as defined inthe env file. */
#define BBE_DIR         "BBE"           /* Binary Build Environment installation directory */
#define BBE_TMP_RES     "BBE_Res"       /* Temporary directory for resource export scripts */
#define BBE_TMP_ROM     "BBE_ROM"       /* Temporary directory for rom link export scripts */
#define AOF_DIR         "aof"           /* Directory holding partially linked module */
#define RESOURCES_DIR   "Resources"     /* Name of resource directories */

/* Territory mapping system variables, used to remove reliance on the International module */
#define TERR_NAME_PFX   "TerritoryName$"    /* TerritoryName$1 is set to UK, for example */
#define TERR_NUM_PFX    "TerritoryNumber$"  /* TerritoryNumber$UK is set to 1, for example */

#define BUFFER_LEN      1024    /* used for reading in strings */

/*
 * Neil's funky double macro thing
 */
#define ENUM_ENTRY(y) y
#define ARRAY_ENTRY(y) #y
#define ALL_MODULE_TYPES(x) x(RES),x(ASM),x(C),x(EXP),x(BAS),x(KERNEL),x(HAL),x(DATA),x(LOADER),x(BBE),x(UNDEF)

typedef enum {ALL_MODULE_TYPES(ENUM_ENTRY)} module_type_t;

typedef struct s_module_entry {
  char *name;
  char *path;
  char *output;
  char *filename;
  module_type_t type;
  char *switch_on;
  struct s_module_entry *next;
} module_entry_t;

typedef struct s_component_entry {
  char *name;
  char *options;
  char *switch_on;
  char *install;
  bool no_component_sources; /* If set then does not perform a ROM phase, even if ROM phase called. */
  bool install_after_rom;    /* If set then it does an install phase after the ROM phase */
  bool created_bbe_makefile; /* If set then this component has created its own BBE makefile */
  unsigned int resource_sfx; /* suffix for Resources: Resources or Resources2 or Resources3 ... */
  int  always_clean;         /* -clean will ensure that force_clean is always TRUE for this component */
  int  force_clean;
  int  duplicate;
  module_type_t type;
  unsigned long int  position;
  long size;
  struct s_component_entry *next;
  struct s_component_entry *prev;
  unsigned long int force_position;
} component_entry_t;

typedef struct s_error_entry {
  char *message;
  struct s_error_entry *next;
} error_entry_t;

typedef struct {
  char *product;
  char *descript;
  char *serial;
  char *status;
  char *manuf;
  char *part;
  char *date;
} podule_info_t;

typedef struct {
        int (*call)(void);
        char    *name;
        char    *help;
} action_t;


/* Remember the type of object we are building, rather than relying on the name of
 * the joiner and the joiner format (which will both be "romlinker" in future).
 */
typedef enum {
  image_type_rom,
  image_type_main_rom = image_type_rom,
  image_type_exprom,
  image_type_expansion_rom = image_type_exprom,
  image_type_extrom,
  image_type_extension_rom = image_type_extrom,
  image_type_other,
  image_type_unset
} image_type_t;

extern image_type_t image_type;

#define MAX_TERRITORIES 10
extern char* supported_territories[];
extern unsigned int num_of_territories;

/* Base address for ROM images */
extern unsigned long rom_base_address;

#define TRUE  (1)
#define FALSE (0)

#define CHK_STR(x) (x==NULL?"(null)":x)
/*
 * prototypes
 */
int  read_component_database(char *filename);
void release_component(component_entry_t *entry);
void error(int fatal, char *format, ...);
void banner(char c);

module_entry_t *lookup_module(char *name);
component_entry_t *lookup_component(char *name);

/*
 * global variables
 */
extern char *module_type_names[];
extern char *image_type_names[];
extern char *build_name;
extern char *build_dir;
extern char *image_filename;
extern char *log_filename;
extern char *image_size;
extern char *messages_filename;
extern char *joiner;
extern char *joiner_format;
extern char *sigstr;
extern char *signum;
extern int verbose;
extern module_entry_t *module_database;
extern component_entry_t *component_database;
extern HashTable join_db;
extern HashId join_entries[];
extern int join_db_hwm;
extern podule_info_t podule_info;

#endif
@


1.20
log
@  Bug fix/new feature.
Detail:
  When the same component is included in a build multiple times with
  different options, you can end up in a situation where the second time
  you do a build, the first instance of it isn't cleaned so you end up
  with the (incorrect) last set of options from the previous build and
  that's not good.

  Now, you can specify -clean in the components file for any component
  which you want to forcibly clean.

  I've also made some minor efficiency improvements by making the
  components list doubly-linked rather than singly-linked.
Admin:
  Tested in baseline 517 build and appears to do the job.

Version 0.44. Tagged as 'srcbuild-0_44'
@
text
@a69 1
#define SOURCE_DIR      "Sources"       /* directory containing sources */
@


1.19
log
@  Smoothed some rough edges in BBE exports; also corrects an apparent
  oversight in the clean phases.
Detail:
  * New type of component introduced, "BBE", for which only the BBE phase
    is executed, and for which no Makefile is exported to the BBE. Intended
    for use with BuildApps, BuildEnv etc.
  * Only creates "aof" subdirectory in BBE exports for "C" type components.
  * Doesn't create "rm" subdirectory in BBE exports for components of types
    "C", "RES" and "BBE".
  * Will now run clean and clean_all phases on "RES" type components.
Admin:
  Tested on a Tungsten BBE build.

Version 0.43. Tagged as 'srcbuild-0_43'
@
text
@d117 1
d124 1
@


1.18
log
@  Fixed some bugs.
Detail:
  The previous check-in broke Baseline builds (or any other build which
  has a components file within a subdirectory of the BuildSys/Components
  directory). Fixed.

  Also, where a build includes multiple instances of the same component
  to be built with dfferent options, the force clean rule was not being
  invoked if the build itself included a clean (or clean_all) phase.

  This meant that object files from the first time the component was built
  would still be resident for the next version(s). Now, duplicate components
  are flagged internally as being duplicate so their force_clean flag is not
  cleared during the clean or clean_all phases.
Admin:
  Tested in early Baseline 500 builds on Iyonix.

Version 0.41. Tagged as 'srcbuild-0_41'
@
text
@d94 1
a94 1
#define ALL_MODULE_TYPES(x) x(RES),x(ASM),x(C),x(EXP),x(BAS),x(KERNEL),x(HAL),x(DATA),x(LOADER),x(UNDEF)
@


1.17
log
@  Several little updates.
Detail:
  The RESDIR setting passed down to components is now fixed to be
    <Resource$Dir>.Resources for the first 64 components,
    <Resource$Dir>.Resources2 for the next 64,
    <Resource$Dir>.Resources3 for the next 64 etc.
    Currently most components explicitly override srcbuild's suggestion,
    but this is dangerous (could cause weird resource problems on old
    build machines).  64 chosen since it is comfortably less than 77.
  If a component appears twice in the components file(s), it is warned
    about.
  The default selection of image type (rom, exprom, extrom, other) is
    delayed until all components files are parsed - previously the choice
    would have been made at the end of any included file.
  BBE builds can cope with components that host multiple targets - notably
    the territory modules.  This used to fail previously (and required the
    entire sources of the component to be shipped) since only one target,
    the last to be processed, would be written into the BBE Makefile.
Admin:
  Tested briefly with various builds.

Version 0.31. Tagged as 'srcbuild-0_31'
@
text
@d118 1
@


1.16
log
@  More wide-ranging changes to srcbuild for portability and romlinker.
Detail:
  The romlinker joiner format is now defined and implemented by srcbuild.
    This means that srcbuild can invoke romlinker to join main ROMs,
    expansion ROMs or extension ROMs depending on a switch in a product's
    components file (the %format directive should specify a value of one
    of rom extrom or exprom).
  Any %-directives that are not srcbuild directives are passed through to
    romlinker as command-line options.  All target image sizes are passed
    through in bytes - see romlinker documentation for full details of the
    interfaces.
  Environment variables are set to represent the territory mappings.  This
    is done on all targets so that other tools can rely on retrieving the
    information via getenv() and not needing to prod the International
    module directly.
  extern declarations removed from .c files into .h files to remove chance
    of mismatched multiple declarations.
  Some spelling corrections in comments, system call synchronisation calls
    added, although sb_system does not implement parallel makes yet.
  Documentation added on the portability aspects, environmental aspects and
    the territory mapping stuff.  A program is provided (MkDefaults) to
    run under RISC OS to generate up-to-date source code for srcbuild's
    territory information database.
  srcbuild now keeps note of the type of image that it is generating, rather
    than relying on reverse-engineering it from the joiner and joiner format
    strings (set by %format in the component file, defaults to main ROM)
  Many comments updated to reflect the actual code, some obsolete code
    removed.
Admin:
  This version should represent a functionally complete version capable of
    running cross-compiled builds on UNIX systems.
  Tested on RISC OS.

Version 0.27. Tagged as 'srcbuild-0_27'
@
text
@d40 2
a41 2
#define BBE_BS_MAKEFILE "Makefiles:BBEExport" /* The Makefile containing the BBE rules */
#define BBE_BS_TOOLS    "Makefiles:StdTools" /* The Makefile containing the standard tool definitions */
d46 3
a48 3
#define ENV_RES_DIR     "RESOURCEDIR"  /* Where the export resources are held */
#define BBE_BS_MAKEFILE "${MAKEFILESDIR}/BBEExport" /* The Makefile containing the BBE rules */
#define BBE_BS_TOOLS    "${MAKEFILESDIR}/StdTools" /* The Makefile containing the standard tool definitions */
d78 4
d115 2
@


1.15
log
@  Portable version of srcbuild.
  Has initial knowledge of the romlinker tool - work incomplete.
Detail:
  This is a portable version of srcbuild.  It is no longer tied to various
    RISC OS concepts such as: global shared environment namespace;
    *Spool; . as directory separator (host's directory separator is read
    during program startup).
  UNIX version stores the "system variables" in a hash table and exports
    the contents of the environment hash table to new processes which it
    forks.  UNIX version does not parallelise builds currently - in theory
    with a little more intelligence in sb_system to manage the log file
    coherently, it should be possible to parallelise some actions during
    builds (because it will avoid blocking srcbuild when waiting for I/O,
    and because changing the environment in the parent srcbuild process
    won't affect any children that are still running)
  A lot of things have changed in this version - many functions have been
    renamed to avoid clashes with UNIX system calls (most calls in riscos.c
    in fact); printf/fprintf(stderr...) are no longer used directly -
    sb_printf/sb_fprintf is used instead to ensure data is copied to the
    log file.
  ROM joining works on Solaris if you supply the Install/<Build> directory
    fully populated with files from a RISC OS build which comprise the
    ROM image.  Identical images are produced (with: romlinker -format rom).
  This version of srcbuild cannot use romlinker to build anything other
    than ROM images - syntax for specifying expansion/extension images
    is yet to be implemented.  To test, set %Joiner and %JoinerFormat to
    romlinker in your Components file (and put romlinker in your library
    directory if you do not have a RiscOS/Library/Build which includes it)
  Removed some duplicated code that calculated ROM positions when an install_rom
    phase had not been run but a join had been requested - build_install_rom
    is now parameterised to enable the BBE generator, join phase and normal
    install_rom activities to be done by one function instead of three nearly
    identical bits of code.
  Anything other than list or join requires a compatible Makefile in each
    component in the build.
Admin:
  Tested, although not exhaustively, under RISC OS.
  Tested list & join phases on Intel Solaris.
  romlinker integration tested briefly.

Version 0.26. Tagged as 'srcbuild-0_26'
@
text
@d32 3
d37 1
a37 1
#define ENV_BUILD_DIR   "Build$Dir"	/* directory containing build */
d44 1
a44 1
#define ENV_BUILD_DIR   "BUILDDIR"	/* directory containing build */
d62 1
a62 1
#define APP_VERSION Module_MajorVersion " (" Module_Date ") " Module_MinorVersion
d64 3
a66 3
#define ENV_BUILD_NAME  "Build"		/* name of build */
#define ENV_IMAGE_SIZE  "ImageSize"	/* size of image to be created */
#define BUILDSYS_DIR    "BuildSys"	/* directory off build root */
d68 8
a75 8
#define SHADOW_DIR      "Shadow" 	/* srcbuild state information */
#define LOGS_DIR        "Logs"		/* log info */
#define SOURCE_DIR      "Sources" 	/* directory containing sources */
#define INSTALL_DIR     "Install"	/* directory for built modules */
#define IMAGES_DIR      "Images"		/* directory for final images */
#define COMPONENTS_DIR  "Components"	/* directory for component files */
#define MODULE_DB_FILE  "ModuleDB"	/* name of module database file */
#define ENV_LOCALE_LIST "LocaleList"    /* name of env var holding the comma-seperated list of lcoales */
d79 5
a83 1
#define BUFFER_LEN	1024	/* used for reading in strings */
d86 1
a86 1
 * Neils funky double macro thing
d135 3
a137 3
	int (*call)(void);
	char	*name;
	char	*help;
d140 17
d179 3
d183 18
a200 2

#define DEBUG 0
@


1.14
log
@  BBE phase added.
Detail:
  Lots of code changed - see branch logs for details.
Admin:
  The Binary Build Environment development has been done on a branch
    and is now considered stable for merge to the trunk.
  Tested in BBE.

Version 0.25. Tagged as 'srcbuild-0_25'
@
text
@d25 2
a26 2
#ifndef __srcbuild_h
#define __srcbuild_h
d32 27
a60 1
#define ENV_BUILD_DIR   "Build$Dir"	/* directory containing build */
d64 1
a72 1
#define ENV_NUM_LOCALE  "Build$LocaleListNumeric" /* A numeric variant of the locale list. */
d74 1
d83 1
a83 1
#define ALL_MODULE_TYPES(x) x(RES),x(ASM),x(C),x(EXP),x(BAS),x(KERNEL),x(HAL),x(DATA),x(UNDEF)
d107 1
a107 1
  int  size;
d137 2
a157 8

/*
  For the Bethany project (and later) we are altering the order in which resources get stored within the messages module.
  Previously, it was held in the order Resources.<territory>.<Build>. Due to the requirement for multiple territories, this is now going to be represented as Resources.<build>.<numeric locale list>.<territory>
  These macros can be used to defined either the old or the new behaviour.
*/
#define RESDIR "<Build>.<Build$LocaleListNumeric>.%s"
#define RESBASEDIR "<Build>"
@


1.13
log
@First attempt to allow a HAL/bootloader to be placed at the bottom of the
ROM; new component type is "HAL".
Performing a Join only when DATA components are in the build should now
work again.

Version 0.24. Tagged as 'srcbuild-0_24'
@
text
@d126 1
d128 1
a128 1
#define DEBUG 1
@


1.13.2.1
log
@  Intermediate development version of the Binary Build Environment support.
Detail:
  A new action 'bbe' has been created which generates a binary build
    environment in the Install.BBE directory.  This directory contains a
    self-contained environment in which ROM builds can be performed using
    only the pre-built binaries of modules and the parts of the modules'
    resources required for a particular project.
Admin:
  Requires BuildSys 2.81 or later (RiscOS/BuildSys; tag: BuildSys-2_81)
  Requires Library 0.60 or later (RiscOS/Library; tag: Library-0_60)

  Work in progress - checkpoint only.

Version 0.24, 1.23.2.1. Tagged as 'srcbuild-0_24-1_23_2_1'
@
text
@a125 1
extern char *module_type_names[];
@


1.13.2.2
log
@  More BBE changes.
Detail:
  More fixes and improvements.
Admin:
  This is now a release candidate.

Version 0.24, 1.23.2.3. Tagged as 'srcbuild-0_24-1_23_2_3'
@
text
@d128 1
a128 1
#define DEBUG 0
@


1.12
log
@	Fixed an 'OflaOfla bug.'
	Resource directory ordering changed.

Detail:
	Fixed a bug where directories called 'oflaofla...' were being created
in the Install directory. Srcbuild iterates through all the components in the
components file, and attempts to create the relevant install directory.
Unfortunatley, many components (e.g. HdrSrc) do not have an install directory
in the ModuleDB. This was causing a string to be printed with a NULL pointer,
causing oflaofla to be created as part of the directory leaf.
	As part of the work to allow multiple territories to be present in
one build, we are altering the resource directories so they are now held in the
following manner:
	Used to be : Messages.Resources.<locale>.<build>
	Is now :     Messages.Resources.<build>.<numeric terriory list>.<locale>
	Where the numeric territory list is a list of all the territories
held in the resources directory, eg. 000106 for Common, UK and France. The
Common directory holds all resources that are common to the other territories
and is generated by the Messages module. Note that if there are three
territories, then there will be four directories held in resources, one for
each territory and one for the Common directory.

Admin:
	Used in some Lazarus builds
	Very much work in progress. Use at your peril. Being checked in early
due to the anticiapted CVS server changes.
	Obbiously when you use this latest version, you will need to run the
resources phase because the formatting has changed.

Version 0.20. Tagged as 'srcbuild-0_20'
@
text
@d56 1
a56 1
#define ALL_MODULE_TYPES(x) x(RES),x(ASM),x(C),x(EXP),x(BAS),x(KERNEL),x(DATA),x(UNDEF)
d82 1
a82 1
  unsigned int force_position;
@


1.11
log
@	* Initial support for multiple territories in one build.

Admin:
	For the Bethany project we need to be able to build multiple resource
(territory) sets into one ROM build. The system variable LocaleList is read
and, if set, is parsed for a comma-seperated list of countries. The resources
phase is then called once for each of these countries. If the LocaleList flag
is unset then is should build the territory as set in the Locale in the Env
file.
	If the LocaleList flag is set then after the resources phase has been
run there should be one directory in the Internet.Messages path for each
territory mentioned in the LocaleList.
	To allow this to work the Common and Env files also need altering. If
the Env file does not have a LocaleList then it should have en explicit Unset
LocaleList. The common file also needs to have every *Set that references
<Locale> to be changed to a *SetMacro.

Admin:
	Work in progress for Bethany project. Only partially tested. A binary
checkin will follow after more work and testing.

Version 0.19. Tagged as 'srcbuild-0_19'
@
text
@d46 2
d125 11
@


1.10
log
@	Each component can now havw a -nosources flag.

Detail:
 	There is a requirement for a customer to get a binary-only build
where they can change resources and do their own builds. To allow this we
will be providing them with a prebuilt disc image for the project with almost
all the sources deleted.
	To allow them to build images, have added the functionality to
SrcBuild whereby adding a -nosources flag to a component in the components
file causes clean, export_hdrs, export_libs and rom phases to have no effect.
This allows the client to build with resources, install_rom and join phases
and thus get an image with any changed resources in.
 	This change should only affect components that have a -nsources flag
in the component file.

Admin:
	Tested in a Lazarus build.

Version 0.18. Tagged as 'srcbuild-0_18'
@
text
@d34 12
a45 11
#define ENV_BUILD_DIR  "Build$Dir"	/* directory containing build */
#define ENV_BUILD_NAME "Build"		/* name of build */
#define ENV_IMAGE_SIZE "ImageSize"	/* size of image to be created */
#define BUILDSYS_DIR   "BuildSys"	/* directory off build root */
#define SHADOW_DIR     "Shadow" 	/* srcbuild state information */
#define LOGS_DIR       "Logs"		/* log info */
#define SOURCE_DIR     "Sources" 	/* directory containing sources */
#define INSTALL_DIR    "Install"	/* directory for built modules */
#define IMAGES_DIR     "Images"		/* directory for final images */
#define COMPONENTS_DIR "Components"	/* directory for component files */
#define MODULE_DB_FILE "ModuleDB"	/* name of module database file */
d74 1
d103 5
@


1.9
log
@Summary
  *  Added support for install: targets
  *  Added support for podule ROM builds.

Detail
  *  Added support to pass 'install' as a valid parameter.  This allows
     disc builds and podule rom builds to be completed.
  *  Added knowledge of MakeExpROM as a valid joiner app.
Admin
  *  Tested install: work using a dummy Baseline 3 build.
  *  Tested MakeExpROM work using RiscOS/BuildSys/EtherI16E as a basis.
     srcbuild produces an indentical ROM to the old-style build system for
     populated roms and roms only containing podule ID information.

Version 0.15. Tagged as 'srcbuild-0_15'
@
text
@d29 1
d72 1
@


1.8
log
@Introduced the idea of a "DATA" module.

Version 0.13. Tagged as 'srcbuild-0_13'
@
text
@d70 1
@


1.7
log
@Summary
    Committing a couple of changes made long ago for Daytona but forgotten
    about:
      * Name of Messages module no longer hardwired.  Assumes Messages module
        is same name as leaf of Messages tag is the build's components file.
      * New 'BaseAddress' tag for components file allows base address of image
        to be specified e.g. for Daytona appflash.
Admin
    Sources compiled.
    A version merged with recent sources (version 0.07) has been tested in a
    couple of ROM builds.

Version 0.09. Tagged as 'srcbuild-0_09'
@
text
@d52 1
a52 1
#define ALL_MODULE_TYPES(x) x(RES),x(ASM),x(C),x(EXP),x(BAS),x(KERNEL),x(UNDEF)
@


1.6
log
@Added "-address <n>" option to place a component at a fixed address (for
nefarious purposes - it won't be linked into the module chain, so only useful
for some sort of embedded data).

Version 0.08. Tagged as 'srcbuild-0_08'
@
text
@d72 1
a72 1
  int  position;
@


1.5
log
@Modified sources to use VersionNum scheme.

Version 0.03. Tagged as 'srcbuild-0_03'
@
text
@d47 2
a48 2
/* 
 * Neils funky double macro thing 
d75 1
d103 1
a103 1
/* 
@


1.4
log
@Now look for components files in directory BuildSys.Components.
@
text
@d29 3
@


1.3
log
@Completed functionality, committed to repository prior to extensive
testing.
@
text
@d39 1
@


1.2
log
@Added my latest sources prior to going on holiday.
@
text
@d30 10
a39 8
#define BUILD_DIR  "Build$Dir"		/* directory containing build */
#define BUILD_NAME "Build"		/* name of build */
#define BUILD_SYS  "BuildSys"		/* directory off build root */
#define SHADOW_DIR BUILD_SYS ".Shadow" 	/* srcbuild state information */
#define LOGS_DIR   BUILD_SYS ".Logs"	/* log info */
#define SOURCE_DIR "Src$Dir"		/* directory containing sources */
#define MODULE_DB  "ModuleDB"		/* name of module database file */
#define IMAGE_SIZE "ImageSize"		/* size of image to be created */
d48 1
a48 1
#define ALL_MODULE_TYPES(x)  x(RES), x(ASM), x(C), x(EXP), x(BAS), x(UNDEF)
d68 2
@


1.1
log
@Initial revision
@
text
@d33 2
a34 1
#define SHADOW_DIR BUILD_SYS ".Shadow"	/* srcbuild state information */
d73 10
@


1.1.1.1
log
@First added for safe keeping.
@
text
@@
