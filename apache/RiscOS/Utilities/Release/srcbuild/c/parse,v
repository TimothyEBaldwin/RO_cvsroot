head	1.10;
access;
symbols
	srcbuild-0_53:1.10
	srcbuild-0_52:1.10
	srcbuild-0_51:1.9
	srcbuild-0_50:1.8
	srcbuild-0_49:1.8
	srcbuild-0_48:1.8
	srcbuild-0_47:1.8
	srcbuild-0_46:1.8
	srcbuild-0_45:1.8
	srcbuild-0_44:1.8
	srcbuild-0_43:1.8
	srcbuild-0_42:1.8
	srcbuild-0_41:1.8
	srcbuild-0_40:1.8
	srcbuild-0_39:1.8
	srcbuild-0_38:1.8
	srcbuild-0_37:1.8
	srcbuild-0_36:1.8
	srcbuild-0_35:1.8
	srcbuild-0_34:1.8
	srcbuild-0_33:1.8
	srcbuild-0_32:1.8
	srcbuild-0_31:1.8
	srcbuild-0_30:1.8
	srcbuild-0_29:1.8
	srcbuild-0_28:1.8
	srcbuild-0_27:1.8
	srcbuild-0_26:1.7
	srcbuild-0_25:1.6
	srcbuild-0_24-1_23_2_4:1.5.2.1
	srcbuild-0_24-1_23_2_3:1.5
	srcbuild-0_24-1_23_2_2:1.5
	srcbuild-0_24-1_23_2_1:1.5
	sbrodie_BBE:1.5.0.2
	sbrodie_BBE_bp:1.5
	srcbuild-0_24:1.5
	srcbuild-0_23:1.5
	srcbuild-0_22:1.5
	srcbuild-0_21:1.5
	srcbuild-0_20:1.5
	srcbuild-0_19:1.5
	srcbuild-0_18:1.4
	srcbuild-0_17:1.4
	srcbuild-0_16:1.4
	srcbuild-0_15:1.4
	srcbuild-0_14:1.4
	srcbuild-0_13:1.4
	srcbuild-0_12:1.4
	srcbuild-0_11:1.4
	srcbuild-0_10:1.4
	srcbuild-0_09:1.4
	srcbuild-0_08:1.4
	srcbuild-0_07:1.4
	srcbuild-0_06:1.4
	srcbuild-0_05:1.4
	srcbuild-0_04:1.4
	srcbuild-0_03:1.3
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2018.11.17.09.27.17;	author rool;	state Exp;
branches;
next	1.9;
commitid	fhoX8Rh7h2Vkjh0B;

1.9
date	2015.07.03.21.19.04;	author jlee;	state Exp;
branches;
next	1.8;
commitid	6n0wzpeFD0zLSSry;

1.8
date	2001.02.02.11.22.11;	author sbrodie;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.25.16.16.53;	author sbrodie;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.15.16.26.51;	author sbrodie;	state Exp;
branches;
next	1.5;

1.5
date	2000.05.22.12.22.25;	author dcotton;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	97.09.25.15.43.21;	author rbuckley;	state Exp;
branches;
next	1.3;

1.3
date	97.09.09.09.41.13;	author rbuckley;	state Exp;
branches;
next	1.2;

1.2
date	97.08.22.16.16.52;	author rbuckley;	state Exp;
branches;
next	1.1;

1.1
date	97.08.21.16.44.55;	author rbuckley;	state Exp;
branches
	1.1.1.1;
next	;

1.5.2.1
date	2000.12.15.15.33.30;	author sbrodie;	state Exp;
branches;
next	;

1.1.1.1
date	97.08.21.16.44.55;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Suppress compiler warnings
Detail:
  * Make several variables and functions static.
  * Initialise variables.
  * Add missing return statement.
  * Add missing header include.
  * Delete declaration of non-existant static function.
Admin:
  Submission from Timothy Baldwin.

Version 0.52. Tagged as 'srcbuild-0_52'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#include "srcbuild.h"
#include "riscos.h"
#include "parse.h"

/* Function to compare two strings case insensitively
 *
 * Parameters: matches those of strcmp.
 * Result: matches the exit conditions of strcmp.
 *
 *
 * The conversions to unsigned int stop the compiler messing around with
 * shifts all over the place whilst trying to promote the chars to int
 * whilst retaining the sign.
 *
 * Problems: Choice of return value when strings do not match is based
 *           upon character number rather than any alphabetic sorting.
 *
 */
int cstrcmp(const char *first, const char *second)
{
  for (;;) {
    unsigned int a = *first++;
    unsigned int b = *second++;

    if (a == 0) return -b;
    if (a != b) {
      unsigned int c = (unsigned int) tolower(a);
      unsigned int d = (unsigned int) tolower(b);
      signed int result = c - d;
      if (result != 0) return result;
    }
  }
}



/*
 * identify newline in string and replace with 0
 */
void
chop_newline(char *str)
{
  str[strcspn(str, "\n")] = '\0';
}

/*
 * return string in a malloced block, leave pointing at next character
 * trashes the string in the process
 */
char *extract_word(char *str, char **word, int env_var)
{
  int len = 0;
  char *cp;
  char *var = NULL;
  int end_of_string = FALSE;

  if (*word)
    free(*word);
  *word = NULL;

  if (str == NULL) {
    /* Trap special case */
    return str;
  }

  while (*str && isspace(*str)) ++str; /* skip whitespace */

  cp = str;
  for (cp = str; *cp && !isspace(*cp); ++cp) {
    len++;
  }

  if (*cp != 0) {
    *cp++ = 0; /* terminate for strdup */
    while (*cp && isspace(*cp)) ++cp; /* skip trailing whitespace */
  }

  if (*cp == 0) {
    end_of_string = TRUE;
  }

  if (strlen(str) != 0) {
    if (env_var && ((var = sb_getenv(str)) != NULL)) { /* an extant environment variable! */
      *word = sb_strdup(var);
    }
    else {
      *word = sb_strdup(str);
    }
  }
  return (end_of_string == FALSE) ? cp : NULL;
}


/* Determine if a string is a number, and if so, return it in *val and return 1.
 * Otherwise if it is not a number, return 0.
 */
static int parse_is_digits(const char *s, unsigned long *val)
{
  char *e;
  *val = strtoul(s, &e, 0);
  return (*e == '\0');
}

/* Parse a single territory entry.  We allow a territory name ("UK") or an assignment
 * expression of form either "1=UK" or "UK=1", indicating that UK territory is territory
 * number 1.  Enter TerritoryName$1 and TerritoryNumber$UK into the environment.
 *
 * Also used by sb_init to prime the environment with the known territory list.
 */
char *parse_territory_entry(char *territory)
{
  char *sep;
  char *number;
  char varname[sizeof(TERR_NAME_PFX TERR_NUM_PFX "LongCountryName")];

  sep = strchr(territory, '=');
  if (sep) {
    unsigned long terr_num;

    *sep++ = '\0';
    if (parse_is_digits(territory, &terr_num)) {
      number = territory;
      territory = sep;
    }
    else if (parse_is_digits(sep, &terr_num)) {
      number = sep;
    }
    else {
      error(1, "Badly formed territory declaration: %s=%s", territory, sep);
      return 0;
    }

    sprintf(varname, "%s%ld", TERR_NAME_PFX, terr_num);
    sb_setenv(varname, territory);
    sprintf(varname, "%s%s", TERR_NUM_PFX, territory);
    sb_setenv(varname, number);
  }

  return territory;
}


/* This routine parses any territory line passed in and strips out
   If the line is invalid, it returns false, otherwise it returns true.
   A line is considered invalid if it is empty or contains whitespace.
*/
bool parse_territories(char* territory_line)
{
  char *territory = NULL;

  sb_printf("Parsing territory line %s\n", territory_line);

  if (strlen(territory_line) < 1)
  {
    /* Line must contain something */
    return (false);
  }

  territory = strtok(territory_line, ",");
  while (territory)
  {
    territory = parse_territory_entry(territory);
    sb_printf ("territory is %s\n", territory);
    supported_territories[num_of_territories++] = sb_strdup(territory);
    territory = strtok (NULL, ",");
    if (num_of_territories == MAX_TERRITORIES) {
      error(1, "Too many territories (maximum is %d)", MAX_TERRITORIES);
    }
  }

  sb_printf ("%d territor%s detected in the territories list.\n", num_of_territories, num_of_territories==1?"y":"ies");

  return (true);
}
@


1.9
log
@Fix null pointer dereference in components file parsing
Detail:
  c/parse - Modify extract_word to skip trailing whitespace after the word. This ensures that the return value is only ever non-null if there's at least one more word left to extract. This avoids a null pointer dereference in srcbuild.c, where the while (cp) {...} loop at line 677 will perform a strcmp of a NULL word if there was trailing whitespace at the end of a line.
Admin:
  Tested with Iyonix ROM build


Version 0.51. Tagged as 'srcbuild-0_51'
@
text
@d31 1
d158 1
@


1.8
log
@  More wide-ranging changes to srcbuild for portability and romlinker.
Detail:
  The romlinker joiner format is now defined and implemented by srcbuild.
    This means that srcbuild can invoke romlinker to join main ROMs,
    expansion ROMs or extension ROMs depending on a switch in a product's
    components file (the %format directive should specify a value of one
    of rom extrom or exprom).
  Any %-directives that are not srcbuild directives are passed through to
    romlinker as command-line options.  All target image sizes are passed
    through in bytes - see romlinker documentation for full details of the
    interfaces.
  Environment variables are set to represent the territory mappings.  This
    is done on all targets so that other tools can rely on retrieving the
    information via getenv() and not needing to prod the International
    module directly.
  extern declarations removed from .c files into .h files to remove chance
    of mismatched multiple declarations.
  Some spelling corrections in comments, system call synchronisation calls
    added, although sb_system does not implement parallel makes yet.
  Documentation added on the portability aspects, environmental aspects and
    the territory mapping stuff.  A program is provided (MkDefaults) to
    run under RISC OS to generate up-to-date source code for srcbuild's
    territory information database.
  srcbuild now keeps note of the type of image that it is generating, rather
    than relying on reverse-engineering it from the joiner and joiner format
    strings (set by %format in the component file, defaults to main ROM)
  Many comments updated to reflect the actual code, some obsolete code
    removed.
Admin:
  This version should represent a functionally complete version capable of
    running cross-compiled builds on UNIX systems.
  Tested on RISC OS.

Version 0.27. Tagged as 'srcbuild-0_27'
@
text
@d100 6
a105 1
  if (*cp == 0)
d107 1
a107 2
  else
    *cp = 0;
d117 1
a117 1
  return (end_of_string == FALSE) ? (str + len + 1) : NULL;
@


1.7
log
@  Portable version of srcbuild.
  Has initial knowledge of the romlinker tool - work incomplete.
Detail:
  This is a portable version of srcbuild.  It is no longer tied to various
    RISC OS concepts such as: global shared environment namespace;
    *Spool; . as directory separator (host's directory separator is read
    during program startup).
  UNIX version stores the "system variables" in a hash table and exports
    the contents of the environment hash table to new processes which it
    forks.  UNIX version does not parallelise builds currently - in theory
    with a little more intelligence in sb_system to manage the log file
    coherently, it should be possible to parallelise some actions during
    builds (because it will avoid blocking srcbuild when waiting for I/O,
    and because changing the environment in the parent srcbuild process
    won't affect any children that are still running)
  A lot of things have changed in this version - many functions have been
    renamed to avoid clashes with UNIX system calls (most calls in riscos.c
    in fact); printf/fprintf(stderr...) are no longer used directly -
    sb_printf/sb_fprintf is used instead to ensure data is copied to the
    log file.
  ROM joining works on Solaris if you supply the Install/<Build> directory
    fully populated with files from a RISC OS build which comprise the
    ROM image.  Identical images are produced (with: romlinker -format rom).
  This version of srcbuild cannot use romlinker to build anything other
    than ROM images - syntax for specifying expansion/extension images
    is yet to be implemented.  To test, set %Joiner and %JoinerFormat to
    romlinker in your Components file (and put romlinker in your library
    directory if you do not have a RiscOS/Library/Build which includes it)
  Removed some duplicated code that calculated ROM positions when an install_rom
    phase had not been run but a join had been requested - build_install_rom
    is now parameterised to enable the BBE generator, join phase and normal
    install_rom activities to be done by one function instead of three nearly
    identical bits of code.
  Anything other than list or join requires a compatible Makefile in each
    component in the build.
Admin:
  Tested, although not exhaustively, under RISC OS.
  Tested list & join phases on Intel Solaris.
  romlinker integration tested briefly.

Version 0.26. Tagged as 'srcbuild-0_26'
@
text
@d32 13
a44 2
/*
 * compare two strings caselessly
d46 1
a46 2
int
cstrcmp(char *a, char *b)
d48 13
a60 1
  int d;
a61 2
  if (a == NULL && b == NULL)
    return 0;
a62 10
  if (a == NULL || b == NULL)
    return (-1);

  while (*a || *b) {
    d = tolower(*(a++)) - tolower(*(b++));
    if (d)
      return d;
  }
  return 0;
}
d70 1
a70 3
  while (*str != 0 && *str != '\n')
    str++;
  *str = 0;
d77 1
a77 2
char *
extract_word(char *str, char **word, int env_var)
d88 4
a91 2
  if (str == NULL)		/* deal with bogus input */
    return (NULL);
d93 1
a93 2
  while ((*str == ' ') || (*str == 9))	/* skip space chars */
    str++;
d96 1
a96 1
  while ((*cp != ' ') && (*cp != 9) && (*cp != 0)) {
a97 1
    cp++;
d99 1
d106 4
a109 6
    if (env_var) {		/* check for environment variable */
      if ((var = sb_getenv(str)) != NULL)	/* exists */
	*word = sb_strdup(var);
      else			/* does not exist */
	*word = sb_strdup(str);
    } else
d111 1
d117 46
d166 2
a167 1
   If the line is invalid, it retunrs false, otherwise it returns true. A line is considered invalid if it is empty or contains whitespace.
d184 1
a196 1

@


1.6
log
@  BBE phase added.
Detail:
  Lots of code changed - see branch logs for details.
Admin:
  The Binary Build Environment development has been done on a branch
    and is now considered stable for merge to the trunk.
  Tested in BBE.

Version 0.25. Tagged as 'srcbuild-0_25'
@
text
@d30 1
a54 31
 * malloc an area for a string and copy the string in
 */
char *
strdup(char *str)
{
  char *newstr = malloc(str == NULL ? 1 : (strlen(str) + 1));

  if (newstr != NULL) {
    if (str == NULL)
      *newstr = 0;
    else
      strcpy(newstr, str);
  }
  return (newstr);
}

/*
 * read an environment variable in to a malloced string
 */
char *read_env(char *variable)
{
  char *var = NULL;
  char *cp = NULL;

  if ((var = getenv(variable)) != NULL)
    cp = strdup(var);

  return (cp);
}

/*
d99 2
a100 2
      if ((var = getenv(str)) != NULL)	/* exists */
	*word = strdup(var);
d102 1
a102 1
	*word = strdup(str);
d104 1
a104 1
      *word = strdup(str);
d119 1
a119 1
  printf("Parsing territory line %s\n", territory_line);
d130 2
a131 2
    printf ("territory is %s\n", territory);
    supported_territories[num_of_territories++] = strdup(territory);
d133 3
d138 1
a138 1
  printf ("%d territor%s detected in the territories list.\n", num_of_territories, num_of_territories==1?"y":"ies");
d142 1
@


1.5
log
@	* Initial support for multiple territories in one build.

Admin:
	For the Bethany project we need to be able to build multiple resource
(territory) sets into one ROM build. The system variable LocaleList is read
and, if set, is parsed for a comma-seperated list of countries. The resources
phase is then called once for each of these countries. If the LocaleList flag
is unset then is should build the territory as set in the Locale in the Env
file.
	If the LocaleList flag is set then after the resources phase has been
run there should be one directory in the Internet.Messages path for each
territory mentioned in the LocaleList.
	To allow this to work the Common and Env files also need altering. If
the Env file does not have a LocaleList then it should have en explicit Unset
LocaleList. The common file also needs to have every *Set that references
<Locale> to be changed to a *SetMacro.

Admin:
	Work in progress for Bethany project. Only partially tested. A binary
checkin will follow after more work and testing.

Version 0.19. Tagged as 'srcbuild-0_19'
@
text
@d165 1
a165 1
  printf ("%d territories detected in the territories list.\n", num_of_territories);
@


1.5.2.1
log
@  More BBE changes.
Detail:
  New CLI option: -p outputs a CSV file containing the supported phases
    and their help strings.
  Pluralises territory correctly in output messages.
  Removes BBE_Res and BBE_ROM directories from installed BBE.
Admin:
  Tested in BBE.

Version 0.24, 1.23.2.4. Tagged as 'srcbuild-0_24-1_23_2_4'
@
text
@d165 1
a165 1
  printf ("%d territor%s detected in the territories list.\n", num_of_territories, num_of_territories==1?"y":"ies");
@


1.4
log
@Allow multiple words for the -options field.
Support the new flags for BigSplit2 for ROM signature.

Version 0.04. Tagged as 'srcbuild-0_04'
@
text
@d53 1
a53 1
/* 
d70 1
a70 1
/* 
d73 1
a73 2
char *
read_env(char *variable)
d84 1
a84 1
/* 
d95 1
a95 1
/* 
d137 31
@


1.3
log
@Changed behaviour for modules not found in the shadow file. Force clean is
only performed for modules with switch or options set and it is only these
modules which are logged in the shadow file.
@
text
@d38 2
a39 2
  
  if (a==NULL && b==NULL)
d41 2
a42 2
    
  if (a==NULL || b==NULL)
d44 5
a48 5
    
  while (*a || *b)
  {
    d = tolower( *(a++) ) - tolower( *(b++) );
    if (d) return d;
d59 1
a59 1
  char *newstr=malloc(str==NULL?1:(strlen(str)+1));
d61 2
a62 3
  if (newstr != NULL)
  {
    if (str==NULL)
d76 5
a80 5
  char *var=NULL;
  char *cp =NULL;
  
  if ((var=getenv(variable))!=NULL)
    cp=strdup(var);
d91 1
a91 1
  while (*str!=0 && *str!='\n')
d93 1
a93 1
  *str=0;
d103 1
a103 1
  int len=0;
d105 1
a105 1
  char *var=NULL;
d107 6
a112 2
  
  if (str==NULL)			/* deal with bogus input */
d114 2
a115 2
    
  while ((*str==' ') || (*str==9)) 	/* skip space chars */
d118 2
a119 3
  cp=str;
  while ((*cp!=' ') && (*cp!=9) && (*cp!=0))
  {
d123 2
a124 2
  if (*cp==0)
    end_of_string=TRUE;
d126 9
a134 14
    *cp=0;
  
  if (strlen(str)==0)
    *word = NULL;
  else
  {  
    if (env_var)			/* check for environment variable */
    {
      if ((var=getenv(str))!=NULL)	/* exists */
        *word=strdup(var);
      else				/* does not exist */
        *word = strdup(str);
    }
    else
d137 1
a137 2
 
  return (end_of_string==FALSE)?(str+len+1):NULL;
@


1.2
log
@Added my latest sources prior to going on holiday.
@
text
@d39 4
a42 1
  if ((a==NULL) || (b==NULL))
@


1.1
log
@Initial revision
@
text
@d38 4
a41 1

@


1.1.1.1
log
@First added for safe keeping.
@
text
@@
