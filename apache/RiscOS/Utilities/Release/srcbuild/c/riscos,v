head	1.15;
access;
symbols
	srcbuild-0_53:1.15
	srcbuild-0_52:1.15
	srcbuild-0_51:1.14
	srcbuild-0_50:1.14
	srcbuild-0_49:1.14
	srcbuild-0_48:1.14
	srcbuild-0_47:1.14
	srcbuild-0_46:1.14
	srcbuild-0_45:1.14
	srcbuild-0_44:1.14
	srcbuild-0_43:1.14
	srcbuild-0_42:1.14
	srcbuild-0_41:1.14
	srcbuild-0_40:1.14
	srcbuild-0_39:1.14
	srcbuild-0_38:1.14
	srcbuild-0_37:1.14
	srcbuild-0_36:1.14
	srcbuild-0_35:1.14
	srcbuild-0_34:1.13
	srcbuild-0_33:1.11
	srcbuild-0_32:1.11
	srcbuild-0_31:1.10
	srcbuild-0_30:1.10
	srcbuild-0_29:1.10
	srcbuild-0_28:1.10
	srcbuild-0_27:1.10
	srcbuild-0_26:1.9
	srcbuild-0_25:1.8
	srcbuild-0_24-1_23_2_4:1.7.2.2
	srcbuild-0_24-1_23_2_3:1.7.2.1
	srcbuild-0_24-1_23_2_2:1.7.2.1
	srcbuild-0_24-1_23_2_1:1.7.2.1
	sbrodie_BBE:1.7.0.2
	sbrodie_BBE_bp:1.7
	srcbuild-0_24:1.7
	srcbuild-0_23:1.7
	srcbuild-0_22:1.6
	srcbuild-0_21:1.5
	srcbuild-0_20:1.5
	srcbuild-0_19:1.4
	srcbuild-0_18:1.4
	srcbuild-0_17:1.4
	srcbuild-0_16:1.4
	srcbuild-0_15:1.4
	srcbuild-0_14:1.4
	srcbuild-0_13:1.4
	srcbuild-0_12:1.4
	srcbuild-0_11:1.4
	srcbuild-0_10:1.4
	srcbuild-0_09:1.4
	srcbuild-0_08:1.4
	srcbuild-0_07:1.4
	srcbuild-0_06:1.4
	srcbuild-0_05:1.4
	srcbuild-0_04:1.4
	srcbuild-0_03:1.3
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.15
date	2018.11.17.09.27.17;	author rool;	state Exp;
branches;
next	1.14;
commitid	fhoX8Rh7h2Vkjh0B;

1.14
date	2001.10.19.12.44.34;	author srevill;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.21.14.40.19;	author nbingham;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.08.15.29.01;	author sbrodie;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.27.13.04.03;	author sbrodie;	state Exp;
branches;
next	1.10;

1.10
date	2001.02.02.11.22.11;	author sbrodie;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.25.16.16.53;	author sbrodie;	state Exp;
branches;
next	1.8;

1.8
date	2000.12.15.16.26.51;	author sbrodie;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.16.10.58.32;	author sbrodie;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2000.07.18.12.32.06;	author dcotton;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.08.17.44.36;	author dcotton;	state Exp;
branches;
next	1.4;

1.4
date	97.09.25.15.43.22;	author rbuckley;	state Exp;
branches;
next	1.3;

1.3
date	97.09.04.13.33.08;	author rbuckley;	state Exp;
branches;
next	1.2;

1.2
date	97.08.22.16.16.53;	author rbuckley;	state Exp;
branches;
next	1.1;

1.1
date	97.08.21.16.44.55;	author rbuckley;	state Exp;
branches
	1.1.1.1;
next	;

1.7.2.1
date	2000.12.07.17.03.43;	author sbrodie;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2000.12.15.15.33.30;	author sbrodie;	state Exp;
branches;
next	;

1.1.1.1
date	97.08.21.16.44.55;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Suppress compiler warnings
Detail:
  * Make several variables and functions static.
  * Initialise variables.
  * Add missing return statement.
  * Add missing header include.
  * Delete declaration of non-existant static function.
Admin:
  Submission from Timothy Baldwin.

Version 0.52. Tagged as 'srcbuild-0_52'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>
#include <errno.h>

#include "host.h"
#include "wholefls.h"
#include "hash.h"

#ifdef RISCOS
#  include "kernel.h"
#  include "swis.h"
#  include "Global/Services.h"
#else
#  include "sys/wait.h"
#endif

#include "srcbuild.h"
#include "riscos.h"
#include "parse.h"

/*
 * contains all non-portable functions
 */

/*
 * globals
 */
static int spooling = FALSE;


#ifdef RISCOS
#else
enum {
  max_env_vars = 2000 /* Remember this includes all the territory mappings! */
};
static HashTable env;
static HashId vars[max_env_vars];
static int env_hwm = 0;
static FILE *logfile;
#endif

/*
 * change working directory
 */
int
sb_chdir(const char *dir)
{
#ifdef RISCOS
  return -!!_swix(OS_FSControl, _INR(0,1), 0, dir);
#else
  return chdir(dir);
#endif
}

/*
 * make directory
 */
int
sb_mkdir(const char *dir, int mode)
{
#ifdef RISCOS
  (void) mode;
  return -!!_swix(OS_File, _INR(0,1)|_IN(4), 8, dir, 0);
#else
  int result = mkdir(dir, mode);
  if (result == -1 && errno == EEXIST) result = 0;
  return result;
#endif
}

/*
 * make directory (recursive if necessary)...
 */
int
sb_mkdir_p(const char *dir, int mode)
{
  char buffer[BUFFER_LEN];

#ifdef RISCOS
  (void) mode;
  sprintf(buffer, "mkdir -p %s", dir);
#else
  sprintf(buffer, "mkdir -m %o -p %s", mode, dir);
#endif
  return -!!sb_system(buffer);
}

/*
 * open a spool session
 */
void
spool_open(char *file)
{
  char *filename;
  char buffer[BUFFER_LEN];
#ifdef RISCOS
  _kernel_swi_regs reg;

  reg.r[0] = 199; /* OS_Byte reason code to read/write the spool file handle */
  reg.r[1] = 0;
  reg.r[2] = 255; /* read and don't change */
  if (_kernel_swi(OS_Byte, &reg, &reg)) {
    error(0, "failed to read spooling filehandle.");
    return;
  }

  /* Were we already spooling? (either ourselves or somebody higher up!) */
  if (reg.r[1] != 0)
    return;

  strcpy(buffer, "spool ");
  filename = strchr(buffer, '\0');
#else
  if (logfile)
    return;

  filename = buffer;
#endif

  strcpy(buffer, "spool ");
  sb_buildfilename(BUFFER_LEN, filename, build_dir, BUILDSYS_DIR, LOGS_DIR, file, NULL);

  if (verbose)
    sb_printf("Opening log file '%s'.\n", filename);

#ifdef RISCOS
  reg.r[0] = (int) buffer;
  if (_kernel_swi(OS_CLI, &reg, &reg))
    error(0, "failed to open log file %s.", filename);
  else
    spooling = TRUE;
#else
  /* Connect stdout and stderr to the logfile */
  logfile = fopen(filename, "w");
  if (logfile)
    spooling = TRUE;
  else
    error(0, "unable to open log file %s.", filename);
#endif
}

/*
 * close a spool session
 */
void
spool_close(char *file)
{
  char filename[BUFFER_LEN];
  char tmp_filename[BUFFER_LEN];
#ifdef RISCOS
  _kernel_swi_regs reg;
  FILE *fh = NULL;
  FILE *fhtmp = NULL;
  char c;

  if (!spooling)
    return;

  sb_buildfilename(BUFFER_LEN, filename, build_dir, BUILDSYS_DIR, LOGS_DIR, file, NULL);

  if (verbose)
    sb_printf("Closing log file '%s'.\n", filename);

  reg.r[0] = (int) "spool";
  if (_kernel_swi(OS_CLI, &reg, &reg))
    error(1, "cannot close spool to file '%s'", filename);

  spooling = FALSE;

  if ((fh = fopen(filename, "r")) == NULL)
    error(1, "cannot open log file '%s'.", filename);

  strcpy(tmp_filename, tmpnam(NULL));
  if ((fhtmp = fopen(tmp_filename, "w")) == NULL)
    error(1, "cannot open temp log file '%s'.", tmp_filename);

  while (!feof(fh)) {
    c = fgetc(fh);
    if (!feof(fh)) {
      if (c == 0x0d) {
        c = fgetc(fh);
        if (c != 0x0a)
          fputc(0x0d, fhtmp);
      } else if (c == 0x0a) {
        c = fgetc(fh);
        if (c != 0x0d)
          fputc(0x0a, fhtmp);
        else
          c = 0x0a;
      }
      fputc(c, fhtmp);;
    }
  }

  fclose(fh);
  fclose(fhtmp);

  remove(filename);
  if (wf_rename(tmp_filename, filename))
    error(1, "moving log file '%s'.", file);
#else
  if (spooling) {
    /* close the file descriptors and re-attach to stdout/stderr */
    fclose(logfile);
    logfile = NULL;
  }
#endif
}

/*
 * return the size of a file in bytes
 */
long
sb_file_size(const char *file)
{
  return (long) wf_filesize((char *)file);
}

/*
 * set an environment variable
 */
int
sb_setenv(const char *name, const char *value)
{
#ifdef RISCOS
  return (_kernel_setenv(name, value) == NULL) ? 0 : -1;
#else
  HashId varval;

  if (!hash_enter(env, name, &varval)) {
    free(hash_value(env, varval));
  }

  hash_assoc(env, varval, sb_strdup(value));
  return 0;
#endif
}

/*
 * get an environment variable
 */
char *
sb_getenv(const char *name)
{
#ifdef RISCOS
  return getenv(name);
#else
  HashId varval;
  char *val;

  if (hash_enter(env, name, &varval)) {
    if (env_hwm == max_env_vars) {
      error(1, "out of environment information data space");
    }
    val = sb_strdup(getenv(name));
    hash_assoc(env, varval, val);
    vars[env_hwm++] = varval;
  }
  else {
    val = hash_value(env, varval);
  }

  return hash_value(env, varval);
#endif
}

/* Declare the environment ready to launch a new program (not RISC OS)
 */
char **sb_putenv(void)
{
#ifdef RISCOS
  return NULL;
#else
  char **environment = malloc(sizeof(char *) * (env_hwm + 1));
  int i, j;

  for (i=j=0; i<env_hwm; ++i) {
    char *key, *val;

    key = hash_key(env, vars[i]);
    val = hash_value(env, vars[i]);
    if (val) {
      /* printf("%s => %s\n", key, val); */
      environment[j] = malloc(strlen(key) + 1 + strlen(val) + 1 + 2);
      if (!environment[j]) {
        error(1, "out of memory building the environment");
      }
      sprintf(environment[j], "%s=%s", key, val);
      ++j;
    }
  }

  environment[j] = NULL;

  return environment;
#endif
}

static void sb_preload_env(void)
{
#ifdef RISCOS
  /* nothing to do */
#else
  extern char **environ;
  char **envp;

  for (envp = environ; *envp; ++envp) {
    char *dup = sb_strdup(*envp);
    dup[strcspn(dup,"=")] = '\0';
    sb_getenv(dup);
    free(dup);
  }
#endif
}

/*
 * return the country code number of a passed in country.
 * Returns -1 if it is not a valid country.
*/
int sb_return_country_number(const char* country)
{
  char *env = malloc(strlen(country) + sizeof(TERR_NUM_PFX));
  char *val;
  int result = -1;

  if (env) {
    sprintf(env, "%s%s", TERR_NUM_PFX, country);
    val = sb_getenv(env);
    free(env);
    if (val) {
      result = (int) strtoul(val, NULL, 0);
      if (result == 0) result = -1;
    }
  }
  else {
    error(1, "out of memory in return_country_number");
  }

#ifdef RISCOS
  if (result == -1) {
    int unclaimed;

    /* Service_International, sub-reason code 0 */
    if (_swix(OS_ServiceCall, _INR(1,4)|_OUT(1)|_OUT(4),
        Service_International, 0, country, 0,
        &unclaimed, &result)
        || unclaimed)
          result = -1;
  }
#endif

  return result;
}

/*
 * copy objects (possibly an entire directory tree, possibly just a file)
 */
int sb_copy_objects(const char *destination, const char *source)
{
#ifdef RISCOS
  return !!_swix(OS_FSControl, _INR(0,3), 26, source, destination, 1<<1 /* force */);
#else
  char buffer[BUFFER_LEN];
  sprintf(buffer, "cp -r %s %s", source, destination);
  system(buffer);
  return 0;
#endif
}

/*
 * delete objects (possibly an entire directory tree, possibly just a file)
 */

int sb_wipe_objects(const char *source, int recurse)
{
#ifdef RISCOS
  return !! _swix(OS_FSControl, _INR(0,1)|_IN(3), 27, source, (recurse?1:0)|(1<<1) /* recurse, force */);
#else
  char buffer[BUFFER_LEN];
  sprintf(buffer, "rm -%sf %s", recurse ? "r" : "", source);
  system(buffer);
  return 0;
#endif
}


/*
 * Build up a filename from components, terminated by NULL
 */
int sb_buildfilename(int bufsize, char *buffer, ...)
{
  char *p = buffer, *arg;
  va_list ap;

  host_init();
  va_start(ap, buffer);
  while ((arg = va_arg(ap, char *)) != NULL) {
    size_t length = strlen(arg) + 1;  /* includes dir sep or zero terminator */
    if (length >= bufsize) break;
    if (buffer != p) *p++ = host_dir_sep_char();
    memcpy(p, arg, length - 1);
    p += length - 1;
    bufsize -= length - 1;
  }
  va_end(ap);

  *p = '\0';
  return p - buffer;
}

static void sb_init_territories(void)
{
  char temporary[32]; /* Magic - longer than all the following strings */

  /* If you really do want to update this list of defaults, then you should probably
   * use MkDefaults BASIC program in the docs directory to pull the current set out
   * of the machine you are using (after softloading an updated International module
   * of course.
   */

  (void) parse_territory_entry(strcpy(temporary, "1=UK"));
  (void) parse_territory_entry(strcpy(temporary, "4=Italy"));
  (void) parse_territory_entry(strcpy(temporary, "5=Spain"));
  (void) parse_territory_entry(strcpy(temporary, "6=France"));
  (void) parse_territory_entry(strcpy(temporary, "7=Germany"));
  (void) parse_territory_entry(strcpy(temporary, "8=Portugal"));
  (void) parse_territory_entry(strcpy(temporary, "9=Esperanto"));
  (void) parse_territory_entry(strcpy(temporary, "10=Greece"));
  (void) parse_territory_entry(strcpy(temporary, "11=Sweden"));
  (void) parse_territory_entry(strcpy(temporary, "12=Finland"));
  (void) parse_territory_entry(strcpy(temporary, "14=Denmark"));
  (void) parse_territory_entry(strcpy(temporary, "15=Norway"));
  (void) parse_territory_entry(strcpy(temporary, "16=Iceland"));
  (void) parse_territory_entry(strcpy(temporary, "17=Canada1"));
  (void) parse_territory_entry(strcpy(temporary, "18=Canada2"));
  (void) parse_territory_entry(strcpy(temporary, "19=Canada"));
  (void) parse_territory_entry(strcpy(temporary, "20=Turkey"));
  (void) parse_territory_entry(strcpy(temporary, "22=Ireland"));
  (void) parse_territory_entry(strcpy(temporary, "24=Russia"));
  (void) parse_territory_entry(strcpy(temporary, "26=Israel"));
  (void) parse_territory_entry(strcpy(temporary, "27=Mexico"));
  (void) parse_territory_entry(strcpy(temporary, "28=LatinAm"));
  (void) parse_territory_entry(strcpy(temporary, "29=Australia"));
  (void) parse_territory_entry(strcpy(temporary, "30=Austria"));
  (void) parse_territory_entry(strcpy(temporary, "31=Belgium"));
  (void) parse_territory_entry(strcpy(temporary, "32=Japan"));
  (void) parse_territory_entry(strcpy(temporary, "33=MiddleEast"));
  (void) parse_territory_entry(strcpy(temporary, "34=Netherlands"));
  (void) parse_territory_entry(strcpy(temporary, "35=Switzerland"));
  (void) parse_territory_entry(strcpy(temporary, "36=Wales"));
  (void) parse_territory_entry(strcpy(temporary, "48=USA"));
  (void) parse_territory_entry(strcpy(temporary, "49=Wales2"));
  (void) parse_territory_entry(strcpy(temporary, "50=China"));
  (void) parse_territory_entry(strcpy(temporary, "51=Brazil"));
  (void) parse_territory_entry(strcpy(temporary, "52=SAfrica"));
  (void) parse_territory_entry(strcpy(temporary, "70=DvorakUK"));
  (void) parse_territory_entry(strcpy(temporary, "71=DvorakUSA"));
  (void) parse_territory_entry(strcpy(temporary, "80=ISO1"));
}

void sb_init(void)
{
#ifdef RISCOS
#else
  logfile = NULL;
  env = hash_cinew(max_env_vars);
  /* Now call sb_getenv(varname) for each variable you want to pass to the
   * child tasks or use in this task explicitly, so that we can cache it
   * in-process.
   */
#endif
  sb_preload_env();
  sb_init_territories();
}

#ifndef RISCOS
static char **sb_makeargv(char *command)
{
  char **args, *space;
  int arg_count = 0;

  for (space = command; *space; ++arg_count) {
    space += strcspn(space, " \t");
    while (*space && isspace(*space)) ++space;
  }

  args = malloc(sizeof(char *) * (arg_count + 1));
  if (!args) {
    error(1, "out of memory allocating argv array");
  }

  for (space = command, arg_count = 0; *space; ++arg_count) {
    args[arg_count] = space;
    space += strcspn(space, " \t");
    if (*space) *space++ = '\0';
    while (*space && isspace(*space)) ++space;
  }

  args[arg_count] = NULL;

  return args;
}
#endif

#ifndef RISCOS
static char *sb_resolve_path(char *command)
{
  char *path = sb_getenv("PATH"), *next;
  char dir_sep = host_dir_sep_char();
  char sep_str[4];
  char buffer[BUFFER_LEN];

  sep_str[0] = host_env_var_sep_char();
  sep_str[1] = '\0';

  while (*path) {
    const size_t seg_len = strcspn(path, sep_str);
    memcpy(buffer, path, seg_len);
    buffer[seg_len] = dir_sep;
    strcpy(buffer + seg_len + 1, command);
    if (wf_filesize(buffer) > 0) return sb_strdup(buffer);
    if (path[seg_len]) ++path;
    path += seg_len;
  }

  return command;
}
#endif

int sb_system(char *command)
{
#ifdef RISCOS
  return system(command);
#else
  /* UNIX builds will fork() and exec() the child process.  Note that this function
   * is written carefully to avoid building the environment in the parent process,
   * avoid building the argument list in the parent process, avoid resolving the
   * path in the parent process, and avoid destroying the command parameter in the
   * parent process.
   *
   * With care, this routine could be extended to not wait() for children immediately
   * but to simply remember the child PID and allow sb_system_sync to reap the children.
   * It may even be preferable to create a signal handler to sit and wait for SIGCHLD.
   */
  pid_t pid;
  int status = -1;
  char **argv, **env, *path;
  char buf[256];

  fflush(stdout);
  fflush(stderr);

  pid = fork();
  switch (pid) {
    case -1:
      error(1, "unable to fork()");
      break;
    case  0:
       /* I am the child process and must never return */

      if (getcwd(buf, sizeof(buf))) {
        sb_setenv("PWD", buf);
      }

      argv = sb_makeargv(command); /* updates command to 0-terminate the filename */
      env = sb_putenv();
      path = sb_resolve_path(command);

      /*
      for (status = 0; argv[status]; ++status) printf("ARG: %s\n", argv[status]);
      for (status = 0; env[status]; ++status) printf("ENV: %s\n", env[status]);
      printf("flushing, and called execve ...\n");
      fflush(stderr);
      fflush(stdout);
      */

      close(2);
      dup(1);
      if (logfile) {
        fclose(logfile);
      }
      execve(path, argv, env);
      /* Must NOT allow the C library to interfere with the termination */
      _exit(errno);
      _exit(ENOEXEC);
      break;
    default:
      /* I am the parent, pid is the child's PID */
      wait(&status); /* return value should equal child's pid */
      if ((status & 0xFF) == 0) {
        status = (status & 0xFF00) >> 8;
      }
      break;
  }

  return status;
#endif
}

void sb_system_sync(void)
{
#ifndef RISCOS
  /* Nothing to do.  If we allow sb_system to fork and leave the task running in
   * the background, we need to wait() for all the child processes to terminate
   * here before returning.
   */
#endif
}

/* Function to duplicate a string (allocate memory and copy bytewise)
 *
 * Originally: sbrodie
 *
 * Parameters: const char *s1 - source string
 * Result: char * - duplicate string (or NULL on failure or s1 NULL)
 *
 *
 * Problems: None known
 *
 */

char *sb_strdup(const char *s1)
{
  if (s1 == NULL) {
    return NULL;
  }
  else {
    const size_t length = strlen(s1) + 1;
    char *const s2 = malloc(length);

    if (s2 == NULL) return NULL;
    return memcpy(s2, s1, length);
  }
}


/* sb_printf/sb_fprintf - srcbuild's interfaces to these standard library
 * routines takes into account the log file and copies the data to that too.
 */
int sb_printf(const char *fmt, ...)
{
  int result;

  va_list ap;
  va_start(ap, fmt);
  result = vprintf(fmt, ap);
  va_end(ap);
#ifndef RISCOS
  if (logfile) {
    va_start(ap, fmt);
    vfprintf(logfile, fmt, ap);
    va_end(ap);
  }
#endif

  return result;
}

int sb_fprintf(FILE *f, const char *fmt, ...)
{
  int result;

  va_list ap;
  va_start(ap, fmt);
  result = vfprintf(f, fmt, ap);
  va_end(ap);
#ifndef RISCOS
  if (logfile && f != logfile) {
    va_start(ap, fmt);
    vfprintf(logfile, fmt, ap);
    va_end(ap);
  }
#endif

  return result;
}
@


1.14
log
@  srcbuild changes.
Detail:
  srcbuild utility modfied to cope with the Env files and Components files
  being nested inside sub-directories. This had a small impact upon the
  directory creation code.
Admin:
  Required by Builder-0_14

Version 0.35. Tagged as 'srcbuild-0_35'
@
text
@d54 1
a54 1
int spooling = FALSE;
@


1.13
log
@  Update to environment reading added to srcbuild-0_33 for Unix builds
Detail:
  The original environment reading function stored all grabbed environment
  variables and stored them as "<var_value"> - this confuses Make somewhat
  but only for static dependencies.
Admin:
  Tested on Linux building a ROM of 14 components with phases resources,
  rom, rom_link and join.
  Only affects Unix builds of srcbuild.

Version 0.34. Tagged as 'srcbuild-0_34'
@
text
@d98 17
@


1.12
log
@  messages_filename is no longer permitted to be an environment variable.
Detail:
  Fixes for Linux version.
Admin:
  Work in progress - checkin point.


Version 0.33. Not tagged
@
text
@d297 1
a297 1
      sprintf(environment[j], "%s=\"%s\"", key, val);
@


1.11
log
@  Recursive deletion now used.
Detail:
  The previous change to support multiple target BBE exports broke the
    deleting of BBE_Rom and BBE_Res directories because the recursion
    option was not specifed to OS_FSControl 27 (*Wipe)
Admin:
  Tested.

Version 0.32. Tagged as 'srcbuild-0_32'
@
text
@d60 1
a60 1
  max_env_vars = 1024 /* Remember this includes all the territory mappings! */
d288 1
d292 1
d308 17
d481 1
d508 2
d557 4
d569 3
a571 4
      close(2);
      dup(1);
      if (logfile) {
        fclose(logfile);
d573 1
d577 5
d584 7
d594 1
@


1.10
log
@  More wide-ranging changes to srcbuild for portability and romlinker.
Detail:
  The romlinker joiner format is now defined and implemented by srcbuild.
    This means that srcbuild can invoke romlinker to join main ROMs,
    expansion ROMs or extension ROMs depending on a switch in a product's
    components file (the %format directive should specify a value of one
    of rom extrom or exprom).
  Any %-directives that are not srcbuild directives are passed through to
    romlinker as command-line options.  All target image sizes are passed
    through in bytes - see romlinker documentation for full details of the
    interfaces.
  Environment variables are set to represent the territory mappings.  This
    is done on all targets so that other tools can rely on retrieving the
    information via getenv() and not needing to prod the International
    module directly.
  extern declarations removed from .c files into .h files to remove chance
    of mismatched multiple declarations.
  Some spelling corrections in comments, system call synchronisation calls
    added, although sb_system does not implement parallel makes yet.
  Documentation added on the portability aspects, environmental aspects and
    the territory mapping stuff.  A program is provided (MkDefaults) to
    run under RISC OS to generate up-to-date source code for srcbuild's
    territory information database.
  srcbuild now keeps note of the type of image that it is generating, rather
    than relying on reverse-engineering it from the joiner and joiner format
    strings (set by %format in the component file, defaults to main ROM)
  Many comments updated to reflect the actual code, some obsolete code
    removed.
Admin:
  This version should represent a functionally complete version capable of
    running cross-compiled builds on UNIX systems.
  Tested on RISC OS.

Version 0.27. Tagged as 'srcbuild-0_27'
@
text
@d364 1
a364 1
int sb_wipe_objects(const char *source)
d367 1
a367 1
  return !!_swix(OS_FSControl, _INR(0,1)|_IN(3), 27, source, 1<<1 /* force */);
d370 1
a370 1
  sprintf(buffer, "rm -rf %s", source);
@


1.9
log
@  Portable version of srcbuild.
  Has initial knowledge of the romlinker tool - work incomplete.
Detail:
  This is a portable version of srcbuild.  It is no longer tied to various
    RISC OS concepts such as: global shared environment namespace;
    *Spool; . as directory separator (host's directory separator is read
    during program startup).
  UNIX version stores the "system variables" in a hash table and exports
    the contents of the environment hash table to new processes which it
    forks.  UNIX version does not parallelise builds currently - in theory
    with a little more intelligence in sb_system to manage the log file
    coherently, it should be possible to parallelise some actions during
    builds (because it will avoid blocking srcbuild when waiting for I/O,
    and because changing the environment in the parent srcbuild process
    won't affect any children that are still running)
  A lot of things have changed in this version - many functions have been
    renamed to avoid clashes with UNIX system calls (most calls in riscos.c
    in fact); printf/fprintf(stderr...) are no longer used directly -
    sb_printf/sb_fprintf is used instead to ensure data is copied to the
    log file.
  ROM joining works on Solaris if you supply the Install/<Build> directory
    fully populated with files from a RISC OS build which comprise the
    ROM image.  Identical images are produced (with: romlinker -format rom).
  This version of srcbuild cannot use romlinker to build anything other
    than ROM images - syntax for specifying expansion/extension images
    is yet to be implemented.  To test, set %Joiner and %JoinerFormat to
    romlinker in your Components file (and put romlinker in your library
    directory if you do not have a RiscOS/Library/Build which includes it)
  Removed some duplicated code that calculated ROM positions when an install_rom
    phase had not been run but a join had been requested - build_install_rom
    is now parameterised to enable the BBE generator, join phase and normal
    install_rom activities to be done by one function instead of three nearly
    identical bits of code.
  Anything other than list or join requires a compatible Makefile in each
    component in the build.
Admin:
  Tested, although not exhaustively, under RISC OS.
  Tested list & join phases on Intel Solaris.
  romlinker integration tested briefly.

Version 0.26. Tagged as 'srcbuild-0_26'
@
text
@d45 1
a54 2
extern char *build_dir;
extern int verbose;
d60 1
a60 1
  max_env_vars = 512
d312 3
a314 3
#ifdef RISCOS
  _kernel_swi_regs reg;
  int return_value = 0;
d316 12
a327 5
  reg.r[1] = Service_International;
  reg.r[2] = 0;              /* sub-reason code 0 */
  reg.r[3] = (int)country;   /* The country we require (NULL terminated) */
  reg.r[4] = 0;
  _kernel_swi(OS_ServiceCall, &reg, &reg);
d329 3
a331 4
  if (reg.r[1] != 0)
    return_value = -1; /* Unrecognised country */
  else
    return_value = reg.r[4];
d333 7
a339 5
  return (return_value);
#else
  if (cstrcmp(country, "UK") == 0) return 1;
  sb_fprintf(stderr, "sb_return_country_number: not implemented properly yet\n");
  return -1;
d341 2
d401 49
d462 1
d522 10
d545 3
a547 1
      fclose(logfile);
d559 1
a559 2
      wait(&status);
      sb_printf("PARENT: exit status %d (%d)\n", status , status >> 8);
d567 10
@


1.8
log
@  BBE phase added.
Detail:
  Lots of code changed - see branch logs for details.
Admin:
  The Binary Build Environment development has been done on a branch
    and is now considered stable for merge to the trunk.
  Tested in BBE.

Version 0.25. Tagged as 'srcbuild-0_25'
@
text
@d27 16
a42 2
#include "kernel.h"
#include "swis.h"
d44 1
a44 1
#include "Global/Services.h"
d56 13
d73 1
a73 1
chdir(char *dir)
d75 5
a79 8
  _kernel_swi_regs reg;

  reg.r[0] = 0;
  reg.r[1] = (int) dir;
  if (_kernel_swi(OS_FSControl, &reg, &reg))
    return (-1);

  return (0);
d86 1
a86 1
mkdir(const char *dir, int mode)
d88 8
a95 8
  _kernel_swi_regs reg;
  reg.r[0] = 8;
  reg.r[1] = (int) dir;
  reg.r[4] = 0;
  if (_kernel_swi(OS_File, &reg, &reg))
    return (-1);

  return (0);
d104 3
a107 1
  char buffer[BUFFER_LEN];
d121 11
a131 1
  sprintf(buffer, "spool %s.%s.%s.%s", build_dir, BUILDSYS_DIR, LOGS_DIR, file);
d134 1
a134 1
    printf("Opening log file '%s'.\n", buffer + strlen("spool") + 1);
d136 1
d139 1
a139 1
    error(0, "failed to open log file %s.", buffer + strlen("spool") + 1);
d142 8
a149 1

d158 3
a163 2
  char filename[BUFFER_LEN];
  char tmp_filename[BUFFER_LEN];
d169 1
a169 1
  sprintf(filename, "%s.%s.%s.%s", build_dir, BUILDSYS_DIR, LOGS_DIR, file);
d172 1
a172 1
    printf("Closing log file '%s'.\n", filename);
d191 3
a193 3
	c = fgetc(fh);
	if (c != 0x0a)
	  fputc(0x0d, fhtmp);
d195 5
a199 5
	c = fgetc(fh);
	if (c != 0x0d)
	  fputc(0x0a, fhtmp);
	else
	  c = 0x0a;
d209 1
a209 6

  reg.r[0] = 26;		/* copy objects */
  reg.r[1] = (int) tmp_filename;
  reg.r[2] = (int) filename;
  reg.r[3] = 0;
  if (_kernel_swi(OS_FSControl, &reg, &reg))
d211 8
d220 7
a226 1
  remove(tmp_filename);
d230 1
a230 3
 * returns    0 - doesn't exist
 *              1 - file found
 *              2 - directory found
d233 1
a233 1
file_exists(char *file)
d235 4
a238 1
  _kernel_swi_regs reg;
d240 3
a242 3
  reg.r[0] = 23;		/* no paths */
  reg.r[1] = (int) file;
  _kernel_swi(OS_File, &reg, &reg);
d244 3
a246 1
  return (reg.r[0]);
d250 1
a250 1
 * return the size of a file in bytes
d252 2
a253 2
int
file_size(char *file)
d255 17
a271 1
  _kernel_swi_regs reg;
d273 2
a274 5
  reg.r[0] = 23;		/* no paths */
  reg.r[1] = (int) file;
  _kernel_swi(OS_File, &reg, &reg);

  return (reg.r[0] == 1 ? reg.r[4] : -1);
d277 1
a277 2
/*
 * set an environment variable
d279 1
a279 2
int
setenv(char *name, char *value)
d281 18
a298 3
  if (DEBUG && verbose)
  {
    printf ("Setting %s to %s\n", name, value);
d300 5
a304 1
  return (_kernel_setenv(name, value) == NULL) ? 0 : -1;
a306 1

d311 1
a311 1
int return_country_number(const char* country)
d313 1
d329 5
d339 1
a339 1
int copy_objects(const char *destination, const char *source)
d341 1
a341 1
  /* should be in riscos.c */
d343 6
d355 1
a355 1
int wipe_objects(const char *source)
d357 1
d359 207
@


1.7
log
@  Spool opening and closing does nothing if spooling is already on.
  Uncommented a remove call that should not have been commented.
Detail:
  spool_open now calls OS_Byte 199 to find out whether spooling is
    already happening to avoid screwing up any higher level redirection
    that is taking place.  This should enable more meaningful log
    messages to be generated.
Admin:
  Built.

Version 0.23. Tagged as 'srcbuild-0_23'
@
text
@d213 1
a213 1
  if (DEBUG)
d244 17
@


1.7.2.1
log
@  Intermediate development version of the Binary Build Environment support.
Detail:
  A new action 'bbe' has been created which generates a binary build
    environment in the Install.BBE directory.  This directory contains a
    self-contained environment in which ROM builds can be performed using
    only the pre-built binaries of modules and the parts of the modules'
    resources required for a particular project.
Admin:
  Requires BuildSys 2.81 or later (RiscOS/BuildSys; tag: BuildSys-2_81)
  Requires Library 0.60 or later (RiscOS/Library; tag: Library-0_60)

  Work in progress - checkpoint only.

Version 0.24, 1.23.2.1. Tagged as 'srcbuild-0_24-1_23_2_1'
@
text
@d213 1
a213 1
  if (DEBUG && verbose)
@


1.7.2.2
log
@  More BBE changes.
Detail:
  New CLI option: -p outputs a CSV file containing the supported phases
    and their help strings.
  Pluralises territory correctly in output messages.
  Removes BBE_Res and BBE_ROM directories from installed BBE.
Admin:
  Tested in BBE.

Version 0.24, 1.23.2.4. Tagged as 'srcbuild-0_24-1_23_2_4'
@
text
@a243 17
/*
 * copy objects (possibly an entire directory tree, possibly just a file)
 */
int copy_objects(const char *destination, const char *source)
{
  /* should be in riscos.c */
  return !!_swix(OS_FSControl, _INR(0,3), 26, source, destination, 1<<1 /* force */);
}

/*
 * delete objects (possibly an entire directory tree, possibly just a file)
 */

int wipe_objects(const char *source)
{
  return !!_swix(OS_FSControl, _INR(0,1)|_IN(3), 27, source, 1<<1 /* force */);
}
@


1.6
log
@	Chnaged mechanism by which the country number is obtained.

Detail:
	SWI Territory_NameToNumber expects an internationalised country name.
This could upset the build process for countries such as Japan.
	Insted we now use Service_International 0 to obtain the country
number in a non-internationalised manner.

Admin:
	Tested in a Lazarus and Customer F 7 build.

Version 0.22. Tagged as 'srcbuild-0_22'
@
text
@d83 12
@


1.5
log
@	Fixed an 'OflaOfla bug.'
	Resource directory ordering changed.

Detail:
	Fixed a bug where directories called 'oflaofla...' were being created
in the Install directory. Srcbuild iterates through all the components in the
components file, and attempts to create the relevant install directory.
Unfortunatley, many components (e.g. HdrSrc) do not have an install directory
in the ModuleDB. This was causing a string to be printed with a NULL pointer,
causing oflaofla to be created as part of the directory leaf.
	As part of the work to allow multiple territories to be present in
one build, we are altering the resource directories so they are now held in the
following manner:
	Used to be : Messages.Resources.<locale>.<build>
	Is now :     Messages.Resources.<build>.<numeric terriory list>.<locale>
	Where the numeric territory list is a list of all the territories
held in the resources directory, eg. 000106 for Common, UK and France. The
Common directory holds all resources that are common to the other territories
and is generated by the Messages module. Note that if there are three
territories, then there will be four directories held in resources, one for
each territory and one for the Common directory.

Admin:
	Used in some Lazarus builds
	Very much work in progress. Use at your peril. Being checked in early
due to the anticiapted CVS server changes.
	Obbiously when you use this latest version, you will need to run the
resources phase because the formatting has changed.

Version 0.20. Tagged as 'srcbuild-0_20'
@
text
@d30 1
d218 5
a222 3
  reg.r[0] = -1;		/* no paths */
  reg.r[1] = (int)country;
  _kernel_swi(Territory_NameToNumber, &reg, &reg);
d224 2
a225 2
  if (reg.r[0] == 0)
    return_value = -1; /* Not a valid country */
d227 1
a227 1
    return_value = reg.r[0];
@


1.4
log
@Allow multiple words for the -options field.
Support the new flags for BigSplit2 for ROM signature.

Version 0.04. Tagged as 'srcbuild-0_04'
@
text
@d26 1
d31 1
a31 1
/* 
d35 1
a35 1
/* 
d41 1
a41 1
/* 
d57 1
a57 1
/* 
d61 1
a61 1
mkdir(char *dir, int mode)
a63 1

d73 1
a73 1
/* 
d95 1
a95 1
/* 
d162 1
a162 1
/* 
d179 1
a179 1
/* 
d194 1
a194 1
/* 
d200 4
d206 23
@


1.3
log
@Completed functionality, committed to repository prior to extensive
testing.
@
text
@d37 1
a37 1
int  spooling=FALSE;
d39 1
a39 1
extern int  verbose;
d47 1
a47 1
  
d49 2
a50 2
  reg.r[1] = (int)dir;
  if (_kernel_swi(OS_FSControl,&reg,&reg))
d52 1
a52 1
    
d63 1
a63 1
  
d65 1
a65 1
  reg.r[1] = (int)dir;
d67 1
a67 1
  if (_kernel_swi(OS_File,&reg,&reg))
d69 1
a69 1
    
d81 3
a83 3
  
  sprintf(buffer,"spool %s.%s.%s.%s",build_dir,BUILDSYS_DIR,LOGS_DIR,file);
  
d85 5
a89 5
    printf("Opening log file '%s'.\n",buffer+strlen("spool")+1);
    
  reg.r[0] = (int)buffer;
  if (_kernel_swi(OS_CLI,&reg,&reg))
    error(0,"failed to open log file %s.",buffer+strlen("spool")+1);
d91 2
a92 2
    spooling=TRUE;
    
d102 2
a103 2
  FILE *fh=NULL;
  FILE *fhtmp=NULL;
d107 1
a107 1
  
d110 2
a111 2
  
  sprintf(filename,"%s.%s.%s.%s",build_dir,BUILDSYS_DIR,LOGS_DIR,file);
d114 28
a141 25
    printf("Closing log file '%s'.\n",filename);
  
  reg.r[0] = (int)"spool";
  if (_kernel_swi(OS_CLI,&reg,&reg))
    error(1,"cannot close spool to file '%s'",filename);
    
  spooling=FALSE;
     
  if ((fh=fopen(filename,"r"))==NULL)
    error(1,"cannot open log file '%s'.",filename);
    
  strcpy(tmp_filename,tmpnam(NULL));
  if ((fhtmp=fopen(tmp_filename,"w"))==NULL)
    error(1,"cannot open temp log file '%s'.",tmp_filename);
    
  while (!feof(fh))
  {
    c=fgetc(fh);
    if (!feof(fh))
    {
      if (c==0x0d)
      {
        c=fgetc(fh);
        if (c!=0x0a)
          fputc(0x0d,fhtmp);
d143 1
a143 9
      else if (c==0x0a)
      {
        c=fgetc(fh);
        if (c!=0x0d)
          fputc(0x0a,fhtmp);
        else
          c=0x0a;
      }
      fputc(c,fhtmp);;
d146 1
a146 1
  
d149 1
a149 1
  
d153 2
a154 2
  reg.r[1] = (int)tmp_filename;
  reg.r[2] = (int)filename;
d156 3
a158 3
  if (_kernel_swi(OS_FSControl,&reg,&reg))
    error(1,"moving log file '%s'.",file);
    
d161 1
a161 1
 
d163 3
a165 3
 * returns 	0 - doesn't exist
 *		1 - file found
 *		2 - directory found
d171 5
a175 5
  
  reg.r[0] = 23; 	/* no paths */
  reg.r[1] = (int)file;
  _kernel_swi(OS_File,&reg,&reg);
  
d182 2
a183 1
int file_size(char *file)
d186 6
a191 6
  
  reg.r[0] = 23; 	/* no paths */
  reg.r[1] = (int)file;
  _kernel_swi(OS_File,&reg,&reg);
  
  return (reg.r[0]==1?reg.r[4]:-1);
d200 1
a200 1
  return (_kernel_setenv(name,value)==NULL)?0:-1;
a201 1
  
@


1.2
log
@Added my latest sources prior to going on holiday.
@
text
@d82 1
a82 1
  sprintf(buffer,"spool %s.%s.%s",build_dir,LOGS_DIR,file);
d111 2
a112 1
  sprintf(filename,"%s.%s.%s",build_dir,LOGS_DIR,file);
d121 1
a121 7
  
  reg.r[0] = 18;  	/* settype */
  reg.r[1] = (int)filename;
  reg.r[2] = 0xfff;	/* text */
  if (_kernel_swi(OS_File,&reg,&reg))
    error(1,"setting type of log file '%s'.",filename);
   
d163 2
d183 24
@


1.1
log
@Initial revision
@
text
@d38 2
a39 1

d82 5
a86 1
  sprintf(buffer,"spool %s",file);
d88 3
a90 1
  if (_kernel_swi(OS_CLI,&reg,&reg)==NULL)
d92 1
d104 1
d111 4
d117 1
a117 1
    error(1,"cannot close spool to file '%s'",file);
d122 1
a122 1
  reg.r[1] = (int)file;
d125 1
a125 1
    error(1,"setting type of log file '%s'.",file);
d127 2
a128 2
  if ((fh=fopen(file,"r"))==NULL)
    error(1,"cannot open log file '%s'.",file);
d160 1
a160 1
  remove(file);
d164 2
a165 2
  reg.r[2] = (int)file;
  reg.r[3] = 0;/* 1<<7; */		/* delete after */
@


1.1.1.1
log
@First added for safe keeping.
@
text
@@
