head	1.2;
access;
symbols
	crc32-2_00:1.2
	jfarrell_17Nov1999:1.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.2
date	99.11.17.15.05.31;	author jfarrell;	state Exp;
branches;
next	1.1;

1.1
date	97.09.25.09.12.21;	author rbuckley;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.09.25.09.12.21;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Added CRC-16 and BYTESUM-32 formats too.  Updated documentation.

Detail:
  Rename make_table() to make_tables() and have it generate tables for
  both CRC-16 and CRC-32.

  Add extra input/output parameter 'crc16' to update_crc() and have it
  calculate CRC-16 in parallel with CRC-32.

  Change result printing to report CRC-16 and BYTESUM-32 as well as existing
  CRC-32 and BYTESUM-16.  Output format is not backwards-parsable with old
  format, but there is no known code that parses it.

Admin:
  Built and tested with a couple of test files on RISCOS and Sparc Solaris.
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "crc.h"

#define TABLE_SIZE  256

static U32 crc32tab[TABLE_SIZE];
static U16 crc16tab[TABLE_SIZE];

void make_tables(void)
{
  int i, inx;
  U32 carry32, entry32;
  U16 carry16, entry16;

  for (inx = 0; inx < TABLE_SIZE; ++inx) {
    entry32 = inx;

    for (i = 0; i < 8; ++i) {
      carry32 = entry32 & 1;
      entry32 >>= 1;
      if (carry32)
        entry32 ^= 0xedb88320;
    }

    crc32tab[inx] = entry32;
  }
  
  for (inx = 0; inx < TABLE_SIZE; ++inx) {
    entry16 = inx;

    for (i = 0; i < 8; ++i) {
      carry16 = entry16 & 1;
      entry16 >>= 1;
      if (carry16)
        entry16 ^= 0xA001;
    }

    crc16tab[inx] = entry16;
  }  
}

void update_crc(U8 *buf, int count, U32 *crc32, U16 *crc16, U32 *chk8)
{
  int i;
  U8 inx32;
  U8 inx16;

  if (count == 0)
    return;

  for (i = 0; i < count; ++i) {
    *chk8 += buf[i];
    
    inx32 = buf[i] ^ *crc32;
    *crc32 >>= 8;
    *crc32 ^= crc32tab[inx32];

    inx16 = buf[i] ^ *crc16;
    *crc16 >>= 8;
    *crc16 ^= crc16tab[inx16];

  }
}
@


1.1
log
@Initial revision
@
text
@d20 1
d22 1
a22 1
void make_table(void)
d25 2
a26 2
  U32 carry32;
  U32 entry32;
d40 13
d55 1
a55 1
void update_crc(U8 *buf, int count, U32 *crc32, U32 *chk8)
d59 1
d66 1
d70 5
@


1.1.1.1
log
@Sources taken from Spinner.Release.Components.crc.
@
text
@@
