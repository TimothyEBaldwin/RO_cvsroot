head	1.3;
access;
symbols
	builder-0_26:1.3
	builder-0_25:1.2
	builder-0_24:1.2
	builder-0_23:1.2
	builder-0_22:1.2
	builder-0_21:1.2
	builder-0_20:1.2
	builder-0_19:1.2
	builder-0_18:1.2
	builder-0_17:1.2
	builder-0_16:1.2
	builder-0_15:1.2
	builder-0_14:1.2
	builder-0_13:1.1.1.2
	builder-0_12:1.1.1.2
	builder-0_11:1.1.1.2
	builder-0_10:1.1.1.2
	builder-0_09:1.1.1.2
	builder-0_08:1.1.1.2
	builder-0_07:1.1.1.2
	builder-0_06:1.1.1.2
	builder-0_06-1_1_2_2:1.1.1.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2014.10.31.19.37.39;	author srevill;	state Exp;
branches;
next	1.2;
commitid	03eFpwTzNuadcoWx;

1.2
date	2001.10.19.12.45.16;	author srevill;	state Exp;
branches;
next	1.1;

1.1
date	97.09.12.14.13.55;	author rbuckley;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.09.12.14.13.55;	author rbuckley;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.09.22.12.45.21;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Added "Build directory" to the things you can do in the main window's menu.

You can now open the build directory from the main window's "View" submenu,
which complements the pre-existing functionality.

Also squashed a whole slew of build warnings. This was some shoddy code...

Version 0.26. Tagged as 'builder-0_26'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* 			Copyright 1996 Online Media			*/
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Online Media. It may not be reproduced, used,	*/
/*  sold, or transferred to any third party without the prior written	*/
/*  consent of Online Media. All rights reserved.			*/
/*									*/
/************************************************************************/

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "kernel.h"
#include "swis.h"
#include "gadgets.h"

#include "env.h"
#include "constants.h"
#include "main.h"


/*
 * Enumerate the env directory and present files as options in the stringset.
 * Set the current value depending on the value of the Build environment
 * variable.
 */
_kernel_oserror *
env_populate(int window, int gadget, char *default_env)
{
  _kernel_oserror *err=NULL;
  char directory[BUFFER_SIZE];
  char subdirectory[BUFFER_SIZE];
  char strings_available[BUFFER_SIZE];

  sprintf(directory,"%s.%s",build_tree,ENV_DIR);
  strcpy(strings_available,"");
  strcpy(subdirectory,"");

  ERR_RETURN(err,env_recurse(directory,subdirectory,strings_available,window,gadget,default_env));

  ERR_RETURN(err,stringset_set_available(0,window,gadget,strings_available));
  if (default_env) {
    if (strstr(strings_available,default_env)!=NULL) {
      ERR_RETURN(err,stringset_set_selected(0,window,gadget,default_env));
    }
  } else {
    ERR_RETURN(err,stringset_set_selected(0,window,gadget,""));
  }
  return (NULL);
}

/*
 *
 *
 *
 *
 */
_kernel_oserror *
env_recurse(char *directory,
            char *subdirectory,
            char *strings_available,
            int window,
            int gadget,
            char *default_env)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err=NULL;
  char buffer[96];
  char *filename;
  int  dir_length;
  int  path_length;

  reg.r[0] = 10;
  reg.r[1] = (int)directory;
  reg.r[2] = (int)buffer;
  reg.r[3] = 1;
  reg.r[4] = 0;
  reg.r[5] = sizeof(buffer);
  reg.r[6] = NULL;
  do {
    ERR_RETURN(err,_kernel_swi(OS_GBPB,&reg,&reg));
    if (reg.r[3] > 0) /* If we read any items */
    {
      filename = buffer+20;
      if ((*(int *)(buffer + 16) & 2) != 0) /* Recurse into directories */
      {
        dir_length  = strlen(directory);
        path_length = strlen(subdirectory);
        strcat(directory, ".");
        strcat(directory, filename);
        if (strlen(subdirectory) != 0) strcat(subdirectory, ".");
        strcat(subdirectory, filename);

        ERR_RETURN(err,env_recurse(directory,subdirectory,strings_available,window,gadget,default_env));

        directory[dir_length]     = '\0';
        subdirectory[path_length] = '\0';
      }
      else
      {
        if ((*(int *)(buffer + 0) & 0x000FFF00) == 0x000FEB00) /* Skip non-Obey files */
        if (strcmp(filename, "!Common") != 0)                  /* Skip the !Common files */
        {
          char item[BUFFER_SIZE];

          /* Nested env files are prefixed by their parent directory name(s) in the menu listing */
          if (strlen(subdirectory) == 0)
          {
            strcpy(item,filename);
          }
          else
          {
            sprintf(item,"%s.%s",subdirectory,filename);
          }

          /* If we have room in our structure, add this item to our menu */
          if (strlen(strings_available)+strlen(item)+1<BUFFER_SIZE)
          {
            if (strlen(strings_available)>0)     /* more than one, add , */
            {
              strcat(strings_available,",");
            }
            strcat(strings_available,item);
          }

        }
      }
    }
  } while (reg.r[4] != -1);

  return (NULL);
}

_kernel_oserror *
env_source(void)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err=NULL;
  char cmd[BUFFER_SIZE];

  if (!default_env) {
    return (NULL);
  }

  sprintf(cmd,"%s.%s.%s",build_tree,ENV_DIR,default_env);

  reg.r[0] = (int)cmd;
  ERR_RETURN(err,_kernel_swi(Wimp_StartTask,&reg,&reg));

  return (NULL);
}
@


1.2
log
@  Some improvements and changes.
Detail:
  Support for subdirectories of the Env directory added. The scan is
  now recursive to find any nested Env files.

  The environment list construction only bothers to list Obey files and
  is hard-wired to ignore the !Common file. Thus, the menu now doesn't
  contain bogus entries like '!Common', 'Makefile' and 'VersionNum'.

  When you select a different build directory, the environment is reset
  to blank to reinforce the fact that you should really run a new env
  file.
Admin:
  Tested. Requires new srcbuild in Library-0_87 (srcbuild-0_35).

Version 0.14. Tagged as 'builder-0_14'
@
text
@d34 1
a35 2
extern char *build_tree;
extern char *default_env;
@


1.1
log
@Initial revision
@
text
@d32 1
d35 2
a36 1
extern char build_name[];
d38 1
a38 1
/* 
d44 37
a80 1
env_populate(char *path, int window, int gadget)
a84 1
  char strings_available[1024];
d86 3
a88 4
  char *b=NULL;
  
  strcpy(strings_available,"");
  
d90 1
a90 1
  reg.r[1] = (int)path;
d96 1
a96 2
  do
  {
d98 1
a98 1
    if (reg.r[4] != -1)
d101 42
a142 6
      if (strlen(strings_available)+strlen(filename)+1<
         		sizeof(strings_available))
      {      
        if (strlen(strings_available)>0)	/* more than one, add , */ 
          strcat(strings_available,",");
        strcat(strings_available,filename);
d146 1
a146 15
  
  ERR_RETURN(err,stringset_set_available(0,window,gadget,strings_available));
  if ((b=getenv(BUILD_ENV))!=NULL)
  {
    strcpy(build_name,b);
    if (strstr(strings_available,build_name)!=NULL)
    {
      ERR_RETURN(err,stringset_set_selected(0,window,gadget,build_name));
    }
  }
  else
  {
    strcpy(build_name,"");
    ERR_RETURN(err,stringset_set_selected(0,window,gadget,build_name));
  }
d151 1
a151 1
env_source(char *path, int window, int gadget)
d155 7
a161 6
  int i;
  char cmd[BUILD_NAME_SIZE];
  
  ERR_RETURN(err,stringset_get_selected(0,window,gadget,build_name,
  	BUILD_NAME_SIZE,&i));
  sprintf(cmd,"%s.%s",ENV_DIR,build_name);
d165 1
a165 1
  
@


1.1.1.1
log
@First import of !Builder sources for srcbuild front end.
@
text
@@


1.1.1.2
log
@Major update :
  Makefile allows application to be installed to a directory specified
  in !MkInstall.
  Application maintains multiple build directories.
  Application supports the -quit command line option.
  Updated !Help.
@
text
@d34 1
a34 2
extern char *build_tree;
extern char *default_env;
d42 1
a42 1
env_populate(int window, int gadget, char *default_env)
d47 1
a47 2
  char directory[BUFFER_SIZE];
  char strings_available[BUFFER_SIZE];
d49 1
a50 1
  sprintf(directory,"%s.%s",build_tree,ENV_DIR);
d54 1
a54 1
  reg.r[1] = (int)directory;
d60 2
a61 1
  do {
d63 2
a64 1
    if (reg.r[4] != -1) {
d67 2
a68 1
         		sizeof(strings_available)) {      
d77 6
a82 3
  if (default_env) {
    if (strstr(strings_available,default_env)!=NULL) {
      ERR_RETURN(err,stringset_set_selected(0,window,gadget,default_env));
d84 5
a88 2
  } else {
    ERR_RETURN(err,stringset_set_selected(0,window,gadget,""));
d94 1
a94 1
env_source(void)
d98 2
a99 5
  char cmd[BUFFER_SIZE];
  
  if (!default_env) {
    return (NULL);
  }
d101 3
a103 1
  sprintf(cmd,"%s.%s.%s",build_tree,ENV_DIR,default_env);
@
