head	1.3;
access;
symbols
	builder-0_26:1.3
	builder-0_25:1.2
	builder-0_24:1.2
	builder-0_23:1.2
	builder-0_22:1.2
	builder-0_21:1.2
	builder-0_20:1.2
	builder-0_19:1.2
	builder-0_18:1.2
	builder-0_17:1.2
	builder-0_16:1.2
	builder-0_15:1.2
	builder-0_14:1.2
	builder-0_13:1.2
	builder-0_12:1.2
	builder-0_11:1.2
	builder-0_10:1.2
	builder-0_09:1.2
	builder-0_08:1.2
	builder-0_07:1.2
	builder-0_06:1.2
	builder-0_06-1_1_2_2:1.1.2.1
	Spinner:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2014.10.31.19.37.39;	author srevill;	state Exp;
branches;
next	1.2;
commitid	03eFpwTzNuadcoWx;

1.2
date	97.09.25.11.44.51;	author rbuckley;	state Exp;
branches;
next	1.1;

1.1
date	97.09.22.12.45.26;	author rbuckley;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.09.22.12.45.26;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Added "Build directory" to the things you can do in the main window's menu.

You can now open the build directory from the main window's "View" submenu,
which complements the pre-existing functionality.

Also squashed a whole slew of build warnings. This was some shoddy code...

Version 0.26. Tagged as 'builder-0_26'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#include "constants.h"
#include "parse.h"

/*
 * compare two strings caselessly
 */
int
cstrcmp(char *a, char *b)
{
  int d;

  if (a==NULL && b==NULL)
    return 0;

  if (a==NULL || b==NULL)
    return (-1);

  while (*a || *b)
  {
    d = tolower( *(a++) ) - tolower( *(b++) );
    if (d) return d;
  }
  return 0;
}

/*
 * malloc an area for a string and copy the string in
 */
char *
strdup(char *str)
{
  char *newstr=malloc(str==NULL?1:(strlen(str)+1));

  if (newstr != NULL)
  {
    if (str==NULL)
      *newstr = 0;
    else
      strcpy(newstr, str);
  }
  return (newstr);
}

/*
 * read an environment variable in to a malloced string
 */
char *
read_env(char *variable)
{
  char *var=NULL;
  char *cp =NULL;

  if ((var=getenv(variable))!=NULL)
    cp=strdup(var);

  return (cp);
}

/*
 * identify newline in string and replace with 0
 */
void
chop_newline(char *str)
{
  while (*str!=0 && *str!='\n')
    str++;
  *str=0;
}

/*
 * return string in a malloced block, leave pointing at next character
 * trashes the string in the process
 */
char *
extract_word(char *str, char **word, int env_var)
{
  int len=0;
  char *cp;
  char *var=NULL;
  int end_of_string = FALSE;

  if (str==NULL)			/* deal with bogus input */
    return (NULL);

  while ((*str==' ') || (*str==9)) 	/* skip space chars */
    str++;

  cp=str;
  while ((*cp!=' ') && (*cp!=9) && (*cp!=0))
  {
    len++;
    cp++;
  }
  if (*cp==0)
    end_of_string=TRUE;
  else
    *cp=0;

  if (strlen(str)==0)
    *word = NULL;
  else
  {
    if (env_var)			/* check for environment variable */
    {
      if ((var=getenv(str))!=NULL)	/* exists */
        *word=strdup(var);
      else				/* does not exist */
        *word = strdup(str);
    }
    else
      *word = strdup(str);
  }

  return (end_of_string==FALSE)?(str+len+1):NULL;
}

/*
 * parse the command line to extract arguments in form argc and argv
 */
int
parse_getargs(char *line, char **argv)
{
  int  argc = 0;
  char *cp;

  cp = line;
  while (*cp != '\0')
  {
    while (*cp == ' ')
      cp++;
    if (*cp == '\0')
      break;

    argv[argc++] = cp;
    while (*cp != '\0' && *cp != ' ')
      cp++;
    if (*cp == 0)
      break;
    *cp++ = '\0';
  }
  *cp++ = '\0';

  return (argc);
}
@


1.2
log
@Folded Spinner sources onto TRUNK.

Version 0.06. Tagged as 'builder-0_06'
@
text
@d30 1
d39 1
a39 1
  
d42 1
a42 1
    
d45 1
a45 1
    
d54 1
a54 1
/* 
d72 1
a72 1
/* 
d80 1
a80 1
  
d87 1
a87 1
/* 
d98 1
a98 1
/* 
d109 1
a109 1
  
d112 1
a112 1
    
d126 1
a126 1
  
d130 1
a130 1
  {  
d141 1
a141 1
 
@


1.1
log
@file parse was initially added on branch Spinner.
@
text
@d1 171
@


1.1.2.1
log
@Major update :
  Makefile allows application to be installed to a directory specified
  in !MkInstall.
  Application maintains multiple build directories.
  Application supports the -quit command line option.
  Updated !Help.
@
text
@a0 171
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#include "constants.h"

/*
 * compare two strings caselessly
 */
int
cstrcmp(char *a, char *b)
{
  int d;
  
  if (a==NULL && b==NULL)
    return 0;
    
  if (a==NULL || b==NULL)
    return (-1);
    
  while (*a || *b)
  {
    d = tolower( *(a++) ) - tolower( *(b++) );
    if (d) return d;
  }
  return 0;
}

/* 
 * malloc an area for a string and copy the string in
 */
char *
strdup(char *str)
{
  char *newstr=malloc(str==NULL?1:(strlen(str)+1));

  if (newstr != NULL)
  {
    if (str==NULL)
      *newstr = 0;
    else
      strcpy(newstr, str);
  }
  return (newstr);
}

/* 
 * read an environment variable in to a malloced string
 */
char *
read_env(char *variable)
{
  char *var=NULL;
  char *cp =NULL;
  
  if ((var=getenv(variable))!=NULL)
    cp=strdup(var);

  return (cp);
}

/* 
 * identify newline in string and replace with 0
 */
void
chop_newline(char *str)
{
  while (*str!=0 && *str!='\n')
    str++;
  *str=0;
}

/* 
 * return string in a malloced block, leave pointing at next character
 * trashes the string in the process
 */
char *
extract_word(char *str, char **word, int env_var)
{
  int len=0;
  char *cp;
  char *var=NULL;
  int end_of_string = FALSE;
  
  if (str==NULL)			/* deal with bogus input */
    return (NULL);
    
  while ((*str==' ') || (*str==9)) 	/* skip space chars */
    str++;

  cp=str;
  while ((*cp!=' ') && (*cp!=9) && (*cp!=0))
  {
    len++;
    cp++;
  }
  if (*cp==0)
    end_of_string=TRUE;
  else
    *cp=0;
  
  if (strlen(str)==0)
    *word = NULL;
  else
  {  
    if (env_var)			/* check for environment variable */
    {
      if ((var=getenv(str))!=NULL)	/* exists */
        *word=strdup(var);
      else				/* does not exist */
        *word = strdup(str);
    }
    else
      *word = strdup(str);
  }
 
  return (end_of_string==FALSE)?(str+len+1):NULL;
}

/*
 * parse the command line to extract arguments in form argc and argv
 */
int
parse_getargs(char *line, char **argv)
{
  int  argc = 0;
  char *cp;

  cp = line;
  while (*cp != '\0')
  {
    while (*cp == ' ')
      cp++;
    if (*cp == '\0')
      break;

    argv[argc++] = cp;
    while (*cp != '\0' && *cp != ' ')
      cp++;
    if (*cp == 0)
      break;
    *cp++ = '\0';
  }
  *cp++ = '\0';

  return (argc);
}
@
