head	1.4;
access;
symbols
	romlinker-0_06:1.4
	romlinker-0_05:1.3
	romlinker-0_04:1.2
	romlinker-0_03:1.1
	romlinker-0_02:1.1
	romlinker-0_01:1.1;
locks; strict;
comment	@# @;


1.4
date	2016.04.06.00.45.40;	author jlee;	state Exp;
branches;
next	1.3;
commitid	NeDZuqk3OIQz7v1z;

1.3
date	2014.09.07.17.22.41;	author jlee;	state Exp;
branches;
next	1.2;
commitid	XfksbcHFIdnxbrPx;

1.2
date	2011.07.31.13.11.08;	author jlee;	state Exp;
branches;
next	1.1;
commitid	DIartSUSFYxbfGtv;

1.1
date	2001.02.02.12.34.25;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Add support for embedding debug symbols in ROM images
Detail:
  This change allows debug symbols (currently, just function names) to be embedded in ROM images, by having romlinker read the _syms and _gpa files that the shared makefiles copy to the install folder alongside each module.
  Basic compression techniques are used to try and keep the symbol table size manageable, e.g. the symbols for a Raspberry Pi ROM currently require 240k of space.
  The symbol table will be automatically discarded if there is insufficient space (e.g. IOMD), or if necessary the -nodebugsyms option can be used to prevent symbol table inclusion completely.
  File changes:
  c/symbols, h/symbols - Code for parsing the GPA & syms files and producing the compressed symbol table blob. Adapted from the ROM symbol loading functionality present in profanal (http://www.phlamethrower.co.uk/riscos/fiqprof.php)
  Makefile - Include symbols.c
  c/makerom - Add the -nodebugsyms option. Collect symbols for each component as it's loaded. Write out the symbol table after the module chain, and include the offset in the extended ROM footer.
  c/memory, h/memory - Add safe_realloc function
  docs/Notes - document -nodebugsyms option
Admin:
  Tested with Raspberry Pi, IOMD ROM builds


Version 0.06. Tagged as 'romlinker-0_06'
@
text
@
$Id: Notes,v 1.3 2014/09/07 17:22:41 jlee Exp $


romlinker
=========


General Information
===================

romlinker provides a ROM image construction service.  It takes multiple
components, together with meta-information about the target image and
generates the target image.  romlinker can create three different types of
image:

* "rom"    - a normal RISC OS ROM image
* "extrom" - a standard RISC OS Extension ROM image
* "exprom" - a standard RISC OS Expansion card ROM image


Interface
=========

The invocation syntax for romlinker is:

  romlinker [options] [module [module ...]]

Some options are mandatory, some are optional.  The presence of some
parameters makes other parameters mandatory.

After the options code the list of files to be combined into the image. 
These may be preceded by a decimal number parameter indicating a fixed offset
from the start of the image at which the following component should be
placed.


Mandatory options
=================

-format:  Specifies the type of image that is being created.  This can be
          rom, extrom or exprom.  Failure to specify any format is an error;
          failure to specify a known format is an error.
          
-imagename: The name of the file to contain the generated image.

-imagesize: The size of the image in bytes (in decimal).


If the format is extrom or exprom, then there is a further mandatory
parameter:

-poduleproduct: The product code of the extension/expansion ROM.


Optional options
================

-via: The following parameter is the name of a file which contains extra
      command-line arguments.  The file is parsed and each logical line is
      treated as if it had been specified as a single command-line
      parameter.  NOTE that this means that lines containing whitespace will
      be treated as ONE parameter, not split at spaces.


For "rom" images:

-sigstr: The next parameter is a 4-letter signature string for the image
         which acts as a 32-bit identity string.

-signum: The next parameter is a numeric representation of the 32-bit
         value which acts as the image identity string.

-noimagesize: Don't store the ROM image size at offset &60

-nodebugsyms: Don't store debug symbols blob in the image

-subformat: Sub format of image to produce. Can be "uimage", to add a U-Boot
            uImage header to the resulting ROM file

-load_addr: Load address to place in the uImage header

-exec_addr: Exec/entry address to place in the uImage header


For "exprom" and "extrom" images:

-poduledescription: The description string chunk contents

-poduleserial: The serial number chunk contents

-podulemanufacture: The place of manufacture chunk contents

-podulepart: The part number chunk contents

-poduledate: The date chunk contents (will be automatically generated as
             the local date by romlinker if this parameter is omitted)
             
-podulestatus: The revision status chunk contents


Adding new options
==================

In future, other options may be added.  Any product which needs to pass
options through to the romlinker may do so by inserting them into the
components file prefixed by %.

e.g.

%myoption Hello

will arrive as two arguments, "-myoption" and "Hello" in the romlinker
argument list.

Not all arguments are passed through - srcbuild will have stripped things
like %image (it replaces it with -imagename), %messages, %joiner,
%joinerformat, %include and %log


==END==
@


1.3
log
@Add support for generating U-Boot uImage files
Detail:
  c/makerom - Add optional '-subformat' parameter, which when set to 'uimage' will cause the resulting image file to have a U-Boot uImage header prepended to it. -load_addr and -exec_addr must also be used to specify the load & exec addresses to include in the header.
  docs/Notes - Updated docs for the new options
Admin:
  Tested with linking a few OMAP4 ROM images
  Manual inspection of the images and 'mkimage -l' suggest that everything is OK


Version 0.05. Tagged as 'romlinker-0_05'
@
text
@d2 1
a2 1
$Id: Notes,v 1.2 2011/07/31 13:11:08 jlee Exp $
d76 2
@


1.2
log
@Improve romlinker functionality
Detail:
  romlinker now supports a new 'noimagesize' option to suppress the code that stores the ROM image size at offset &60 into the ROM image.
  romlinker now also inserts a new tag-based data structure into the end of the ROM image, just before the current 20 byte footer. At the moment this is used to store the ROM build/link date, but can easily be expanded to store other items of data.
  c/makerom - New code for the above features
  docs/Notes - New docs for the above features
Admin:
  Tested with building and running OMAP & Tungsten ROMs.
  Unix version of tool untested.


Version 0.04. Tagged as 'romlinker-0_04'
@
text
@d2 1
a2 1
$Id: Notes,v 1.1 2001/02/02 12:34:25 sbrodie Exp $
d76 7
@


1.1
log
@  New version of romlinker which implements its own joinerformat.
  Documentation on usage and implementation added.
Detail:
  Sprites can be added to extension ROMs/expansion card ROMs and get
    their chunks marked appropriately.
  No longer core dumps when -v or -via is the final CLI parameter.
  Gives help on supported formats when complaining that -format is
    missing or wrong.
  More common code abstracted out of the individual linkers.
Admin:
  Requires and required by srcbuild 0.27 or later (mutually dependent)
  Builds on RISC OS, Intel Solaris.
  Tested somewhat on RISC OS.

Version 0.01. Tagged as 'romlinker-0_01'
@
text
@d2 1
a2 1
$Id$
d74 2
@

