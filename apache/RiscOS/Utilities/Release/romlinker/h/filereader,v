head	1.1;
branch	1.1.1;
access;
symbols
	romlinker-0_06:1.1.1.1
	romlinker-0_05:1.1.1.1
	romlinker-0_04:1.1.1.1
	romlinker-0_03:1.1.1.1
	romlinker-0_02:1.1.1.1
	romlinker-0_01:1.1.1.1
	romlinker-0_00:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2001.01.19.16.05.42;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.01.19.16.05.42;	author sbrodie;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 2001 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * ROM Linker
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */
#ifndef filereader_romlinker_h_included
#define filereader_romlinker_h_included

#include "romlinker.h"

/* Read a line of text from the input file.  The pointer returned points
 * to a malloc'ed copy of the text, with newline characters and comments
 * (from # to end of line) removed.  Returns NULL on EOF.
 */
extern char *readline(FILE *f);

/* As readline, but aborts the program instead of returning NULL.
 */
extern char *readlinenonull(FILE *f);


/* The type specification for a filereader_consumer callback function
 * The return value of this function is zero to get readfile to continue
 * reading data from the file, non-zero to stop reading data and return.
 */
typedef int (*filereader_consumer)(const char *, void *);

/* Repeatedly calls readline, passing each line read to the consumer
 * function.  consumer_data is the private data to be supplied to the
 * consumer function, and is the return value of this function.
 */
extern void *readfile(FILE *f, filereader_consumer consumer, void *consumer_data);


/* Return the size of a file specified as the parameter.
 * Returns -1 on error, else the size of the file.
 */
extern unsigned long filereader_filesize(const char *name);


/* Load the named file into memory at the given place.  The size should be
 * equal to the 'size' parameter - it is an error if the file is not that
 * size (ie. it was changed since the module list was enumerated)
 *
 * Returns 'at' on success, NULL on failure.
 */
extern void *filereader_load_file(const char *name, unsigned long size, void *at);


/* Find the chunk entry type appropriate to the given file.  On RISC OS, the
 * filetype is read and used; on other systems the file extension is used.
 * RISC OS Module is the default if there is no extension.
 * empty_chunk is returned if an error occurs.
 */
extern chunk_entry_types filereader_file_type(const char *name);

#endif
@


1.1.1.1
log
@Initial import of unified ROM joining tool.
  
This tool can generate standard RISC OS ROM images (superceding BigSplit2)
and expansion card ROM images (superceding MakeExpROM) and also extension
ROM images (for which no tool currently exists in our library repository).
  
All content of expansion and extension ROMs is assumed to be a module at
present - this will be fixed in the next version to enable sprites to be
used as well as loaders and other chunk entry types.
  
This tool is portable and has been tested on RISC OS, Intel Solaris and
SPARC Solaris and shown to produce identical output.
  
Tagged as romlinker-0_00

@
text
@@
