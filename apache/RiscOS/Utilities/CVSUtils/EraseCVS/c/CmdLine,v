head	1.6;
access;
symbols
	EraseCVS-0_08:1.6
	EraseCVS-0_07:1.5
	EraseCVS-0_06:1.5
	EraseCVS-0_05:1.4
	Spin_merge:1.1.2.1
	Spinner:1.1.0.2;
locks; strict;
comment	@# @;


1.6
date	2000.08.11.10.28.24;	author sbrodie;	state Exp;
branches;
next	1.5;

1.5
date	99.07.06.16.31.12;	author nbingham;	state Exp;
branches;
next	1.4;

1.4
date	99.06.10.12.39.22;	author nbingham;	state Exp;
branches;
next	1.3;

1.3
date	99.05.24.10.02.51;	author nbingham;	state Exp;
branches;
next	1.2;

1.2
date	99.05.24.09.57.32;	author nturton;	state Exp;
branches;
next	1.1;

1.1
date	99.02.16.13.43.21;	author nbingham;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	99.02.16.13.43.21;	author nbingham;	state Exp;
branches;
next	;


desc
@@


1.6
log
@  Rewrote the important part of this utility so it worked.
Detail:
  Endless dereferences of uninitialised points; strlen(NULL); etc.
    It's amazing it ever worked at all - perhaps it was just luck?
    Previous versions always used to just take my machine out with
    a nasty abort - hardly surprising given the code.
  The code no longer has to enumerate directories multiple times -
    it will thus execute faster now.
  Code no longer recurses with vast amounts of stacked data; static
    data requirements increased (24K of static buffers are used instead).
  This version now has a restriction that it won't work if the total length
     of all the leafnames in all the directories in any single complete
     root->leaf path exceeds 32768-N bytes (where N is the number of leafnames)
Admin:
  Tested.

Version 0.08. Tagged as 'EraseCVS-0_08'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:    CmdLine.c                                                   */
/* Purpose: Allow EraseCVS to operate from the command line as well as  */
/*          from the iconbar.                                           */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@@acorn.com>                    */
/* History: 0.01  Thu 07th January 1999                                 */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "constants.h"
#include "main.h"
#include "CmdLine.h"
#include "VersionNum"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* erase_from_commandline                                               */
/*                                                                      */
/* Function is called with the argc/argv params.  It then determines    */
/* what the options and executes.                                       */
/*                                                                      */
/* Parameters: argc & argv                                              */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void erase_from_commandline(int argc, char *argv[])
{
  verbose = FALSE;

  printf("EraseCVS (%s, %s).\n", Module_FullVersion, Module_Date);

  if ((strcmp(argv[1], "-command") == 0) || (strcmp(argv[1], "-Command") == 0))
  {
    if (argc == 2)
    {
      /* Can only be "erasecvs -command", so do current directory */
      erase_command("<obey$dir>");
    }
    else if (argc == 3)
    {
      /* Can be "erasecvs -command -v" or "erasecvs -command <dir>" so check */
      if ( (strcmp(argv[2], "-v") ==0) || (strcmp(argv[2], "-V") == 0) )
      {
        /* It is Verbose, so do the current directory */
        verbose = TRUE;

        erase_command("<obey$dir>");
      }
      else if ( (strcmp(argv[2], "-h") ==0) || (strcmp(argv[2], "-H") == 0) ||
                (strcmp(argv[2], "-help") ==0) || (strcmp(argv[2], "-HELP") == 0) )
      {
        print_help();
      }
      else
      {
        /* Must be to a specific directory (no verbose) */
        erase_command(argv[2]);
      }
    }
    else if (argc == 4)
    {
      /* Has to be verbose to a specific dir: "erasecvs -command -v <dir>" */
      verbose = TRUE;

      erase_command(argv[3]);
    }
    else
    {
      print_help();
    }
  }
}


/************************************************************************/
/* erase_command                                                        */
/*                                                                      */
/* Function checks to make sure a valid directory is passed before      */
/* proceeding.                                                          */
/*                                                                      */
/* Parameters: dir     - directory to clean.                            */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
int erase_command(char *dir)
{
  _kernel_oserror	*er = NULL;
  int			 proceed = FALSE;
  int			 rc = FALSE;
  char			*dirname = NULL;

  /* Canonicalise directory name */
  rc = canonicalise_path(&dirname, dir);

  if (rc == TRUE)
  {
    /* Prepare for Erase - check that a valid directory was passed */
    if (valid_directory(dirname) == FALSE)
    {
      printf("EraseCVS Error:\n");
      printf("  '%s' is not a directory.\n", dirname);
      return(FALSE);
    }
    else
    {
      if (dir_on_nfs(dirname) == TRUE)
      {
        /* Directory resides on NFS */
        if (delete_from_nfs_cmdline(dirname) == TRUE)
          proceed = TRUE;
        else
          proceed = FALSE;
      }
      else
      {
        proceed = TRUE;
      }

      if (proceed == TRUE)
      {
        printf("Erasing CVS dirs from '%s'\n", dirname);
        er = remove_cvs(dirname);
        if (er != NULL)
        {
          printf("EraseCVS Error:\n");
          printf("  Error (%d): %s.\n", er->errnum, er->errmess);
        }
        else
        {
//          printf("Complete.\n\n");
        }
      }
    }
    free(dirname);
  }
  return(TRUE);
}


/************************************************************************/
/* valid_directory                                                      */
/*                                                                      */
/* Function checks to see if the passed string is really a directory.   */
/*                                                                      */
/* Parameters: dir_name - directory to check for.                       */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int valid_directory(char *dir_name)
{
  _kernel_oserror		*er = NULL;
  _kernel_swi_regs		 regs;

  regs.r[0] = 21;
  regs.r[1] = (int) dir_name;

  er = _kernel_swi(OS_File, &regs, &regs);

  if (er != NULL)
  {
    return(FALSE);
  }
  else
  {
    /* SWI returned NULL meaning something exists.  Now check to see if it is a directory */
    if(regs.r[0] != 2)
      return(FALSE);
    else
      return(TRUE);
  }
}


/************************************************************************/
/* print_help                                                           */
/*                                                                      */
/* Function outputs parameter information if the user doesn't do it     */
/* right.                                                               */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void print_help(void)
{
  printf("EraseCVS\n");
  printf("  Remove CVS directories from source directories\n");
  printf("  Usage: erasecvs {-v} [directory]\n");
}


/************************************************************************/
/* dir_on_nfs                                                           */
/*                                                                      */
/* Function checks the passed directory, and if it is on an NFS         */
/* filesystem it returns TRUE, else FALSE.                              */
/*                                                                      */
/* Parameters: path - directory to check.                               */
/*                                                                      */
/* Returns:    TRUE or FALSE                                            */
/*                                                                      */
/************************************************************************/
int dir_on_nfs(char *path)
{
  char			*buffer = NULL;
  int			 rc = FALSE;

  if (canonicalise_path(&buffer, path) == TRUE)
  {
    if ( (strncmp(buffer, "nfs", 3) == 0) || (strncmp (buffer, "NFS", 3) == 0) )
      rc = TRUE;
    else
      rc = FALSE;

    free(buffer);
    return(rc);
  }
  else
  {
    return(FALSE);
  }
}


/************************************************************************/
/* messagetrans_lookup                                                  */
/*                                                                      */
/* Function looks up the tag specified in the specified Messages File & */
/* returns the token to the calling function.                           */
/*                                                                      */
/* Parameters: file_id  - file handle as setup by nb_messagetrans_open..*/
/*             tag      - tag in Messages to lookup.                    */
/*                                                                      */
/* Returns:    Token which matches the tag in Messages.                 */
/*                                                                      */
/************************************************************************/
char *messagetrans_lookup(MessagesFD file_id, char *tag)
{
  _kernel_swi_regs  regs;

  if (!tag)
    return NULL;

  if (tag[0] == '\0')
    return NULL;

  regs.r[0] = (int) &file_id;
  regs.r[1] = (int) tag;
  regs.r[2] = 0;

  if (_kernel_swi (MessageTrans_Lookup, &regs, &regs))
    return 0;
  else
  {
    return (char *) regs.r[2];
  }
}


/************************************************************************/
/* canonicalise_path                                                    */
/*                                                                      */
/* Function builds a full path based on the var passed.                 */
/*                                                                      */
/* Parameters: pointer.                                                 */
/*             path to expand                                           */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int canonicalise_path(char **path, char *dir)
{
  _kernel_swi_regs	 regs;
  int			 buff_size = 0;
  char			*buffer = NULL;

  regs.r[0] = 37;
  regs.r[1] = (int) dir;
  regs.r[2] = NULL;
  regs.r[4] = 0;
  regs.r[5] = NULL;

  _kernel_swi(OS_FSControl, &regs, &regs);
  buff_size = ~regs.r[5] + 10;

  if ((buffer = malloc(buff_size)) != NULL)
  {
    regs.r[0] = 37;
    regs.r[1] = (int) dir;
    regs.r[2] = (int) buffer;
    regs.r[4] = 0;
    regs.r[5] = buff_size;

    _kernel_swi(OS_FSControl, &regs, &regs);

    *path = buffer;

    return(TRUE);
  }
  else
  {
    return(FALSE);
  }
}


/************************************************************************/
/* delete_from_nfs_cmdline                                              */
/*                                                                      */
/* Function asks the user if they wish to delete CVS files on an NFS    */
/* mount.                                                               */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE (delete), FALSE (abort).                            */
/*                                                                      */
/************************************************************************/
int delete_from_nfs_cmdline(char *dir)
{
  char ans;

  _swix(0x107, 0);

  printf("Directory %s resides on NFS.\n", dir);
  printf("Do you wish to proceed (y/n)?");

  scanf("%c", &ans);

  if (ans == 'y')
    return(TRUE);
  else if (ans == 'Y')
    return(TRUE);
  else
    return(FALSE);
}

/************************************************************************/
/* delete_from_nfs                                                      */
/*                                                                      */
/* Ask the user if they want to delete from NFS.  If TRUE proceed with  */
/* delete.                                                              */
/*                                                                      */
/* Parameters: void                                                     */
/*             tag                                                      */
/*                                                                      */
/* Returns:    TRUE (OK clicked), or FALSE (Cancel clicked).            */
/*                                                                      */
/************************************************************************/
int delete_from_nfs(void)
{
  _kernel_oserror	 er;
  _kernel_oserror	*is_error = NULL;
  _kernel_swi_regs	 regs;

  er.errnum = 0;
  strncpy(er.errmess, messagetrans_lookup(messages, "NFSDelete"), 254);

  /* Setup registers */
  regs.r[1] = 3;
  regs.r[0] = (int) &er;
  regs.r[2] = (int) messagetrans_lookup(messages, "_TaskName");

  is_error = _kernel_swi(Wimp_ReportError, &regs, &regs);

  /* Check r1 to see what button was pressed by the user */
  if (regs.r[1] == 1)
  {
    /* OK Pressed */
    return(TRUE);
  }
  else
  {
    /* Cancel Pressed (if setup) */
    return(FALSE);
  }
}


@


1.5
log
@Command Line Support:
  * Removed \n that was output to stdout before outputting "EraseCVS ...."
    version string.  Done for consistency with other build tools.

Version 0.06. Tagged as 'EraseCVS-0_06'
@
text
@d147 1
a147 1
        er = remove_cvs(dirname, NULL, NULL);
@


1.4
log
@* Tidied up the information output in command line mode to be more
consistent with the other tools.

Version 0.05. Tagged as 'EraseCVS-0_05'
@
text
@a53 1
  printf("\n");
@


1.3
log
@Added verbose operation (-v) and help (-h) to command line support.

Version 0.04. Not tagged
@
text
@d30 1
d55 1
a55 2
  printf("EraseCVS\n");
  printf("--------\n");
d74 5
d147 1
a147 1
        printf("Erasing CVS dirs from: %s\n", dirname);
d156 1
a156 1
          printf("Complete.\n\n");
@


1.2
log
@Moved from Spinner to the Trunk.
@
text
@d51 2
a58 1
    /* Validly run */
d61 1
a61 1
      /* We have been run from the command line with no directory parameter */
d64 1
a64 1
    else
d66 2
a67 2
      /* Verbose selected */
      if (argc == 3)
d69 4
a72 1
        erase_command(argv[2]);
d76 2
a77 1
        print_help();
d79 11
@


1.1
log
@file CmdLine was initially added on branch Spinner.
@
text
@d1 385
@


1.1.2.1
log
@Added feature to warn user if directory to be cleaned is on NFS.
EraseCVS can now be run as a command line tool via alias EraseCVS
@
text
@a0 385
/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:    CmdLine.c                                                   */
/* Purpose: Allow EraseCVS to operate from the command line as well as  */
/*          from the iconbar.                                           */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@@acorn.com>                    */
/* History: 0.01  Thu 07th January 1999                                 */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "constants.h"
#include "main.h"
#include "CmdLine.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* erase_from_commandline                                               */
/*                                                                      */
/* Function is called with the argc/argv params.  It then determines    */
/* what the options and executes.                                       */
/*                                                                      */
/* Parameters: argc & argv                                              */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void erase_from_commandline(int argc, char *argv[])
{
  printf("\n");
  printf("EraseCVS\n");
  printf("--------\n");

  if ((strcmp(argv[1], "-command") == 0) || (strcmp(argv[1], "-Command") == 0))
  {
    /* Validly run */
    if (argc == 2)
    {
      /* We have been run from the command line with no directory parameter */
      erase_command("<obey$dir>");
    }
    else
    {
      /* Verbose selected */
      if (argc == 3)
      {
        erase_command(argv[2]);
      }
      else
      {
        print_help();
      }
    }
  }
}


/************************************************************************/
/* erase_command                                                        */
/*                                                                      */
/* Function checks to make sure a valid directory is passed before      */
/* proceeding.                                                          */
/*                                                                      */
/* Parameters: dir     - directory to clean.                            */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
int erase_command(char *dir)
{
  _kernel_oserror	*er = NULL;
  int			 proceed = FALSE;
  int			 rc = FALSE;
  char			*dirname = NULL;

  /* Canonicalise directory name */
  rc = canonicalise_path(&dirname, dir);

  if (rc == TRUE)
  {
    /* Prepare for Erase - check that a valid directory was passed */
    if (valid_directory(dirname) == FALSE)
    {
      printf("EraseCVS Error:\n");
      printf("  '%s' is not a directory.\n", dirname);
      return(FALSE);
    }
    else
    {
      if (dir_on_nfs(dirname) == TRUE)
      {
        /* Directory resides on NFS */
        if (delete_from_nfs_cmdline(dirname) == TRUE)
          proceed = TRUE;
        else
          proceed = FALSE;
      }
      else
      {
        proceed = TRUE;
      }

      if (proceed == TRUE)
      {
        printf("Erasing CVS dirs from: %s\n", dirname);
        er = remove_cvs(dirname, NULL, NULL);
        if (er != NULL)
        {
          printf("EraseCVS Error:\n");
          printf("  Error (%d): %s.\n", er->errnum, er->errmess);
        }
        else
        {
          printf("Complete.\n\n");
        }
      }
    }
    free(dirname);
  }
  return(TRUE);
}


/************************************************************************/
/* valid_directory                                                      */
/*                                                                      */
/* Function checks to see if the passed string is really a directory.   */
/*                                                                      */
/* Parameters: dir_name - directory to check for.                       */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int valid_directory(char *dir_name)
{
  _kernel_oserror		*er = NULL;
  _kernel_swi_regs		 regs;

  regs.r[0] = 21;
  regs.r[1] = (int) dir_name;

  er = _kernel_swi(OS_File, &regs, &regs);

  if (er != NULL)
  {
    return(FALSE);
  }
  else
  {
    /* SWI returned NULL meaning something exists.  Now check to see if it is a directory */
    if(regs.r[0] != 2)
      return(FALSE);
    else
      return(TRUE);
  }
}


/************************************************************************/
/* print_help                                                           */
/*                                                                      */
/* Function outputs parameter information if the user doesn't do it     */
/* right.                                                               */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void print_help(void)
{
  printf("EraseCVS\n");
  printf("  Remove CVS directories from source directories\n");
  printf("  Usage: erasecvs {-v} [directory]\n");
}


/************************************************************************/
/* dir_on_nfs                                                           */
/*                                                                      */
/* Function checks the passed directory, and if it is on an NFS         */
/* filesystem it returns TRUE, else FALSE.                              */
/*                                                                      */
/* Parameters: path - directory to check.                               */
/*                                                                      */
/* Returns:    TRUE or FALSE                                            */
/*                                                                      */
/************************************************************************/
int dir_on_nfs(char *path)
{
  char			*buffer = NULL;
  int			 rc = FALSE;

  if (canonicalise_path(&buffer, path) == TRUE)
  {
    if ( (strncmp(buffer, "nfs", 3) == 0) || (strncmp (buffer, "NFS", 3) == 0) )
      rc = TRUE;
    else
      rc = FALSE;

    free(buffer);
    return(rc);
  }
  else
  {
    return(FALSE);
  }
}


/************************************************************************/
/* messagetrans_lookup                                                  */
/*                                                                      */
/* Function looks up the tag specified in the specified Messages File & */
/* returns the token to the calling function.                           */
/*                                                                      */
/* Parameters: file_id  - file handle as setup by nb_messagetrans_open..*/
/*             tag      - tag in Messages to lookup.                    */
/*                                                                      */
/* Returns:    Token which matches the tag in Messages.                 */
/*                                                                      */
/************************************************************************/
char *messagetrans_lookup(MessagesFD file_id, char *tag)
{
  _kernel_swi_regs  regs;

  if (!tag)
    return NULL;

  if (tag[0] == '\0')
    return NULL;

  regs.r[0] = (int) &file_id;
  regs.r[1] = (int) tag;
  regs.r[2] = 0;

  if (_kernel_swi (MessageTrans_Lookup, &regs, &regs))
    return 0;
  else
  {
    return (char *) regs.r[2];
  }
}


/************************************************************************/
/* canonicalise_path                                                    */
/*                                                                      */
/* Function builds a full path based on the var passed.                 */
/*                                                                      */
/* Parameters: pointer.                                                 */
/*             path to expand                                           */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int canonicalise_path(char **path, char *dir)
{
  _kernel_swi_regs	 regs;
  int			 buff_size = 0;
  char			*buffer = NULL;

  regs.r[0] = 37;
  regs.r[1] = (int) dir;
  regs.r[2] = NULL;
  regs.r[4] = 0;
  regs.r[5] = NULL;

  _kernel_swi(OS_FSControl, &regs, &regs);
  buff_size = ~regs.r[5] + 10;

  if ((buffer = malloc(buff_size)) != NULL)
  {
    regs.r[0] = 37;
    regs.r[1] = (int) dir;
    regs.r[2] = (int) buffer;
    regs.r[4] = 0;
    regs.r[5] = buff_size;

    _kernel_swi(OS_FSControl, &regs, &regs);

    *path = buffer;

    return(TRUE);
  }
  else
  {
    return(FALSE);
  }
}


/************************************************************************/
/* delete_from_nfs_cmdline                                              */
/*                                                                      */
/* Function asks the user if they wish to delete CVS files on an NFS    */
/* mount.                                                               */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE (delete), FALSE (abort).                            */
/*                                                                      */
/************************************************************************/
int delete_from_nfs_cmdline(char *dir)
{
  char ans;

  _swix(0x107, 0);

  printf("Directory %s resides on NFS.\n", dir);
  printf("Do you wish to proceed (y/n)?");

  scanf("%c", &ans);

  if (ans == 'y')
    return(TRUE);
  else if (ans == 'Y')
    return(TRUE);
  else
    return(FALSE);
}

/************************************************************************/
/* delete_from_nfs                                                      */
/*                                                                      */
/* Ask the user if they want to delete from NFS.  If TRUE proceed with  */
/* delete.                                                              */
/*                                                                      */
/* Parameters: void                                                     */
/*             tag                                                      */
/*                                                                      */
/* Returns:    TRUE (OK clicked), or FALSE (Cancel clicked).            */
/*                                                                      */
/************************************************************************/
int delete_from_nfs(void)
{
  _kernel_oserror	 er;
  _kernel_oserror	*is_error = NULL;
  _kernel_swi_regs	 regs;

  er.errnum = 0;
  strncpy(er.errmess, messagetrans_lookup(messages, "NFSDelete"), 254);

  /* Setup registers */
  regs.r[1] = 3;
  regs.r[0] = (int) &er;
  regs.r[2] = (int) messagetrans_lookup(messages, "_TaskName");

  is_error = _kernel_swi(Wimp_ReportError, &regs, &regs);

  /* Check r1 to see what button was pressed by the user */
  if (regs.r[1] == 1)
  {
    /* OK Pressed */
    return(TRUE);
  }
  else
  {
    /* Cancel Pressed (if setup) */
    return(FALSE);
  }
}


@
