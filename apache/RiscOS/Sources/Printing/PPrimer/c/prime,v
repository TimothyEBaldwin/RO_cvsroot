head	4.4;
access;
symbols
	PPrimer-0_30:4.4
	PPrimer-0_29:4.4
	PPrimer-0_28:4.4
	PPrimer-0_27:4.4
	PPrimer-0_26:4.4
	PPrimer-0_25:4.4
	PPrimer-0_24:4.3
	PPrimer-0_23:4.3
	dellis_autobuild_BaseSW:4.3
	PPrimer-0_22:4.3
	PPrimer-0_21:4.3
	PPrimer-0_20:4.2
	sbrodie_sedwards_16Mar2000:4.2
	PPrimer-0_19:4.2
	PPrimer-0_18:4.2
	PPrimer-0_17:4.2
	PPrimer-0_16:4.2
	dcotton_autobuild_BaseSW:4.3
	PPrimer-0_15-1_1_2_3:4.1.7.4
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.3
	Ursula_RiscPC:4.1.7.3.0.4
	PPrimer-0_15-1_1_2_2:4.1.7.4
	FunaiNC2_PPrimer-0_15:4.1.7.4
	FunaiNC2_PPrimer-0_14:4.1.7.3
	rthornb_UrsulaBuild-19Aug1998:4.1.7.3
	UrsulaBuild_FinalSoftload:4.1.7.3
	rthornb_UrsulaBuild-12Aug1998:4.1.7.3
	aglover_UrsulaBuild-05Aug1998:4.1.7.3
	rthornb_UrsulaBuild-29Jul1998:4.1.7.3
	rthornb_UrsulaBuild-22Jul1998:4.1.7.3
	hsimons_BOCA-1_2-Release:4.1.7.3
	rthornb_UrsulaBuild-15Jul1998:4.1.7.3
	rthornb_UrsulaBuild-07Jul1998:4.1.7.3
	rthornb_UrsulaBuild-17Jun1998:4.1.7.3
	rthornb_UrsulaBuild-03Jun1998:4.1.7.3
	rthornb_UrsulaBuild-27May1998:4.1.7.3
	rthornb_UrsulaBuild-21May1998:4.1.7.3
	rthornb_UrsulaBuild_01May1998:4.1.7.3
	afrost_NC2_Generic:4.1.7.3
	afrost_Funai01-33:4.1.7.3
	Ursula:4.1.7.3.0.2
	Ursula_bp:4.1.7.3
	Ursula_31Mar1998:4.1
	Spinner_RCA116:4.1.7.3
	Spinner_B20_2:4.1.7.2
	Spinner_19_3:4.1.7.2
	Spinner_B18:4.1.7.2
	Spinner_B17:4.1.7.2
	Spinner_B15:4.1.7.2
	Spinner_B14:4.1.7.2
	Spinner_B13:4.1.7.2
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.4
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.4
date	2002.02.05.13.41.56;	author mboura;	state Exp;
branches;
next	4.3;

4.3
date	2000.06.09.12.40.48;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	99.09.30.10.55.49;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.21.11.19.09;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.21.11.19.09;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.44.22;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.06.11.13.31.14;	author arodger;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.08.19.14.45.16;	author arodger;	state Exp;
branches;
next	4.1.7.4;

4.1.7.4
date	98.10.29.11.07.11;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Changing printer driver no longer always resets connection to parallel.
Detail:
Printer$Path is only changed if Printer$Path == PrinterType$1 thus ensuring that fastparallel is dealt with correctly, but without upsetting other printer connections, notably USB.
Misleading comments that confused _kernel_oserror* with _kernel_oserror and 'defined' with 'declared' fixed.
Admin:
Tested on DSL 4000

Version 0.25. Tagged as 'PPrimer-0_25'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*----------------------------------------------------------------------*/
/*    Filename    : c.prime                                       	*/
/*    Author	  : R.W.Buckley						*/
/*    Date        : Tue 28th March 1995					*/
/*    Description :      						*/
/*    Modification history:    	    		       			*/
/*    		   							*/
/*    23/05/96, RWB - Set Printer$Path and Printer$ for each printer.   */
/*    11/6/97,	AR  - Set a choice of paper for lj and PS.		*/
/*    		   							*/
/*----------------------------------------------------------------------*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "stdbool.h"
#include "kernel.h"
#include "swis.h"
#include "constants.h"

#include "cmos.h"
#include "module.h"
#include "misc.h"
#include "text.h"
#include "callbacks.h"

extern _kernel_swi_regs reg;	 /* Declared in main */
extern _kernel_oserror *err; 	 /* Error block pointer defined in main */

int    i_text_height;            /* Extracted from paper size and used to prime dp and lj drivers */

static _kernel_oserror *set_environment(int i_fast_parallel)
{
  bool parallel;
  char *printer, *p;

  /* Is the current connection parallel? */
  p = getenv( "Printer$Path" );
  if( p ) /* A printer destination has been set up */
  {
    printer = malloc( strlen(p) + 1 );
    if (printer == NULL) return error_construct("Err_Memory");
    strcpy( printer, p );
    p = getenv( "PrinterType$1" );
    parallel = strcmp( printer, p ) == 0;
    free( printer );
  }
  else
  {
    parallel = true;
  }

  ERROR_RETURN(_kernel_setenv("PrinterType$1",                              /* Need to set PrinterType$1 */
                              i_fast_parallel ? "devices#buffer3:$.FastParallel" :
                                                "devices#buffer3:$.Parallel"));

  ERROR_RETURN(_kernel_swi(PDriver_Info,&reg,&reg));
  ERROR_RETURN(_kernel_setenv("Printer$", (char*)reg.r[4]));  /* and export the printer type in Printer$ */

  if( parallel ) ERROR_RETURN( _kernel_setenv("Printer$Path", "<PrinterType$1>"));  /* Need to update Printer: */

  return NULL;
}

/*----------------------------------------------------------------------
    Name : read_definition

    Description : Populate graphics_data structure with stuff from
    		  printer definition file. This function should be
    		  extended if more printer factilities are to be added.

    Dependencies : misc_next_line - misc.h

    File format : graphics: section heading
    	 	  dumper module name
    	 	  dumper number
    	 	  palette number
    	 	  strip type
    	 	  halftone type
    	 	  x resolution
    	 	  y resolution
    	 	  length of data block
    	 	  data block
    	 	  flags

    Parameters : m_block       - pointer to memory containing printer definition
    	       	 i_size        - size of printer definition in memory
    	       	 graphics_data - pointer to configuration data structure
    	       	 s_short_name  - printer reference string
----------------------------------------------------------------------*/
static _kernel_oserror *read_dp_definition(char *m_block, int i_size, t_graphics *graphics_data,
       		       			   char **s_short_name, int *i_paper_id, int *i_fast_parallel)
{
  int i_offset=0;
  int i;

  misc_next_line(m_block,i_size,&i_offset);  /* Skip dp line */
  *s_short_name = text_copy_string(m_block+i_offset);
  text_match_line("graphics:",m_block,i_size,&i_offset);
  graphics_data->s_dumper = text_copy_string(m_block+i_offset);   /* Dumper name */
  misc_next_line(m_block,i_size,&i_offset);
  graphics_data->i_dumper = atoi(m_block+i_offset);	          /* Dumper number */
  misc_next_line(m_block,i_size,&i_offset);
  graphics_data->i_palette = atoi(m_block+i_offset);	          /* Palette number */
  misc_next_line(m_block,i_size,&i_offset);
  graphics_data->i_strip = atoi(m_block+i_offset);	          /* Options - strip type */
  misc_next_line(m_block,i_size,&i_offset);
  graphics_data->i_halftone = atoi(m_block+i_offset);	          /* Options - halftone value */
  misc_next_line(m_block,i_size,&i_offset);
  graphics_data->i_xres = atoi(m_block+i_offset);	          /* xres */
  misc_next_line(m_block,i_size,&i_offset);
  graphics_data->i_yres = atoi(m_block+i_offset);	          /* yres */
  misc_next_line(m_block,i_size,&i_offset);
  graphics_data->i_data_length = atoi(m_block+i_offset);          /* Data length */
  misc_next_line(m_block,i_size,&i_offset);
  graphics_data->m_data = malloc(graphics_data->i_data_length);    /* Declare space for data */
  if (graphics_data->m_data == NULL) return error_construct("Err_Memory");
  for (i=0; i<graphics_data->i_data_length; i++) *(graphics_data->m_data+i) = *(m_block+i_offset+i);

  i_offset+=graphics_data->i_data_length+1;         /* Move to start of next line */
  graphics_data->i_flags = atoi(m_block+i_offset);

  text_match_line("paper:",m_block,i_size,&i_offset);
  *i_paper_id = atoi(m_block+i_offset);	  	    /* Paper id number */

  if (text_match_line("fastparallel:",m_block,i_size,&i_offset) != -1)
    *i_fast_parallel = atoi(m_block+i_offset);
  else
    *i_fast_parallel = 0;

  return NULL;
}

/*----------------------------------------------------------------------
    Name : dp_prime

    Description : Do whatever is necessary to prime the specified printer

    Dependencies :

    Parameters : m_block       - pointer to memory containing printer definition
    	       	 i_size        - size of printer definition in memory
----------------------------------------------------------------------*/
_kernel_oserror *dp_prime(char *m_block, int i_size)
{
  t_graphics graphics_mode;
  char 	     *s_short_name = NULL;
  char       s_filename[256];
  int 	     i_paper_id, i_fast_parallel;

  err = read_dp_definition(m_block, i_size, &graphics_mode, &s_short_name, &i_paper_id, &i_fast_parallel);
  ERROR_RETURN(err);

  /* Load modules in this order : Colours, PDriver, PDumperSpt, PDriverDP, PDumper */
  err = module_rmload_latest("ColourTrans","Colours",      PATH_SYSTEM_MODULES);          ERROR_RETURN(err);
  err = module_rmload_latest("PDriver","PDriver",          PATH_MODULES); 	 	  ERROR_RETURN(err);
  err = module_rmload_latest("PDumperSupport","PDumperSpt",PATH_MODULES);        	  ERROR_RETURN(err);
  err = module_rmload_latest("PDriverDP","PDriverDP",	   PATH_MODULES);        	  ERROR_RETURN(err);

  usermode_donothing();  /* Run routine to flush all callbacks. This completes module initialisation */
  ERROR_RETURN(err);

  reg.r[0] = 7;  /* 7 is the magic number for the dumper driver */
  err = _kernel_swi(PDriver_SelectDriver, &reg, &reg);
  ERROR_RETURN(err);

	// This allows the connection between PDriverDP and PDriver before registering, support for MiscOP 800000,
  err = module_rmload_latest(graphics_mode.s_dumper,graphics_mode.s_dumper,PATH_MODULES); ERROR_RETURN(err);

  usermode_donothing();  /* Run routine to flush all callbacks. This completes module initialisation */
  ERROR_RETURN(err);

  /* if we have strip type 5 and the dumper doesn't support it, deprecate it down to strip type 3 */
  if (graphics_mode.i_strip==5)
  {
    /* we've selected the dumper driver, so this should work */
    reg.r[0] = 0x80000002;	         /* Return bit mask showing which strip types a printer dumper supports */
    reg.r[1] = graphics_mode.i_dumper;   /* Printer dumper */
    err = _kernel_swi(PDriver_MiscOp,&reg,&reg);
    ERROR_RETURN(err);

    if ((unsigned int)reg.r[0] == (unsigned int)0x80000002) return error_construct("Err_Dumper");
    if ((reg.r[0] & 1<<5)==0) graphics_mode.i_strip = 3;
  }

  reg.r[1] = graphics_mode.i_xres;
  reg.r[2] = graphics_mode.i_yres;
  reg.r[4] = (int)s_short_name; /* Printer name */
  reg.r[5] = graphics_mode.i_xres/graphics_mode.i_halftone;
  reg.r[6] = graphics_mode.i_yres/graphics_mode.i_halftone;

  if (graphics_mode.i_strip >= 2)
    reg.r[3] = 1;                   /* Colour */
  else
    reg.r[3] = 0;

  err = _kernel_swi(PDriver_SetInfo,&reg,&reg);
  ERROR_RETURN(err);

/* Set passes per line entry. Warning : The comparison is made against strip type 2 (colour) or greater.
   This assumes, therefore, that any strip types that are 2 or greater are colour which is currently true */

  if (graphics_mode.i_strip>=2)
    *(graphics_mode.m_data+DATA_pass_per_line) = 4;
  else
    *(graphics_mode.m_data+DATA_pass_per_line) = 1;

  *(graphics_mode.m_data+DATA_strip_type) = graphics_mode.i_strip; /* set strip type field */

  if (graphics_mode.i_strip==0)
    *(graphics_mode.m_data+DATA_output_bpp) = 1;
  else
    *(graphics_mode.m_data+DATA_output_bpp) = 8; /* set output bpp field */

  if (graphics_mode.i_strip==3)
    *(graphics_mode.m_data+DATA_no_passes) = 3;
  else
    *(graphics_mode.m_data+DATA_no_passes) = 1;  /* set num passes field */

  /* Now set the page size */
  err = misc_paper_set_page_size(i_paper_id, &i_text_height);
  ERROR_RETURN(err);

  *(graphics_mode.m_data+DATA_dp_data_num_lines) = (char)(i_text_height & 0xFF);

  sprintf(s_filename,"%s%d",PATH_PALETTE,graphics_mode.i_palette);
  reg.r[1] = graphics_mode.i_dumper;
  reg.r[2] = 0;
  reg.r[3] = (int)s_filename;
  reg.r[4] = (int)graphics_mode.m_data;
  reg.r[5] = graphics_mode.i_flags;
  err = _kernel_swi(PDriver_SetDriver,&reg, &reg);
  ERROR_RETURN(err);

  ERROR_RETURN(set_environment(i_fast_parallel));

  free(s_short_name);
  free(graphics_mode.s_dumper);
  free(graphics_mode.m_data);

  return NULL;
}
/*----------------------------------------------------------------------
    Name : lj_prime

    Description : Do whatever is necessary to prime the specified printer

    Dependencies :

    Parameters : m_block       - pointer to memory containing printer definition
    	       	 i_size        - size of printer definition in memory
----------------------------------------------------------------------*/
_kernel_oserror *lj_prime(char *m_block, int i_size)
{
  t_graphics graphics_mode;
  char 	     *s_short_name = NULL;
  char       s_filename[256];
  int	     i_paper_id, i_tmp, i_paper, i_fast_parallel;

  err = read_dp_definition(m_block, i_size, &graphics_mode, &s_short_name, &i_paper_id, &i_fast_parallel);
  ERROR_RETURN(err);

  /* Load modules in this order : Colours, PDriver, PDumperSpt, PDriverDP, PDumper */
  err = module_rmload_latest("ColourTrans","Colours",      PATH_SYSTEM_MODULES);          ERROR_RETURN(err);
  err = module_rmload_latest("PDriver","PDriver",          PATH_MODULES); 	 	  ERROR_RETURN(err);
  err = module_rmload_latest("PDumperSupport","PDumperSpt",PATH_MODULES);        	  ERROR_RETURN(err);
  err = module_rmload_latest("PDriverDP","PDriverDP",	   PATH_MODULES);        	  ERROR_RETURN(err);

  usermode_donothing();  /* Run routine to flush all callbacks. This completes module initialisation */
  ERROR_RETURN(err);

  reg.r[0] = 7;  /* 7 is the magic number for the dumper driver */
  err = _kernel_swi(PDriver_SelectDriver, &reg, &reg);
  ERROR_RETURN(err);

	// This allows the connection between PDriverDP and PDriver before registering, support for MiscOP 800000,
  err = module_rmload_latest(graphics_mode.s_dumper,graphics_mode.s_dumper,PATH_MODULES); ERROR_RETURN(err);

  usermode_donothing();  /* Run routine to flush all callbacks. This completes module initialisation */
  ERROR_RETURN(err);

  /* if we have strip type 5 and the dumper doesn't support it, deprecate it down to strip type 3 */
  if (graphics_mode.i_strip==5)
  {
    /* we've selected the dumper driver, so this should work */
    reg.r[0] = 0x80000002;	         /* Return bit mask showing which strip types a printer dumper supports */
    reg.r[1] = graphics_mode.i_dumper;   /* Printer dumper */
    err = _kernel_swi(PDriver_MiscOp,&reg,&reg);
    ERROR_RETURN(err);

    if ((unsigned int)reg.r[0] == (unsigned int)0x80000002) return error_construct("Err_Dumper");
    if ((reg.r[0] & 1<<5)==0) graphics_mode.i_strip = 3;
  }

  reg.r[1] = graphics_mode.i_xres;
  reg.r[2] = graphics_mode.i_yres;
  reg.r[4] = (int)s_short_name; /* Printer name */
  reg.r[5] = graphics_mode.i_xres/graphics_mode.i_halftone;
  reg.r[6] = graphics_mode.i_yres/graphics_mode.i_halftone;

  if (graphics_mode.i_strip >= 2)
    reg.r[3] = 1;                   /* Colour */
  else
    reg.r[3] = 0;

  err = _kernel_swi(PDriver_SetInfo,&reg,&reg);
  ERROR_RETURN(err);

/* Set passes per line entry. Warning : The comparison is made against strip type 2 (colour) or greater.
   This assumes, therefore, that any strip types that are 2 or greater are colour which is currently true */

  if (graphics_mode.i_strip>=2)
    *(graphics_mode.m_data+DATA_pass_per_line) = 4;
  else
    *(graphics_mode.m_data+DATA_pass_per_line) = 1;

  *(graphics_mode.m_data+DATA_strip_type) = graphics_mode.i_strip; /* set strip type field */

  if (graphics_mode.i_strip==0)
    *(graphics_mode.m_data+DATA_output_bpp) = 1;
  else
    *(graphics_mode.m_data+DATA_output_bpp) = 8; /* set output bpp field */

  if (graphics_mode.i_strip==3)
    *(graphics_mode.m_data+DATA_no_passes) = 3;
  else
    *(graphics_mode.m_data+DATA_no_passes) = 1;  /* set num passes field */

  /* Now set the page size */
  err = misc_paper_set_page_size(i_paper_id, &i_text_height);
  ERROR_RETURN(err);

  sprintf(s_filename,"%s%d",PATH_PALETTE,graphics_mode.i_palette);
  reg.r[1] = graphics_mode.i_dumper;
  reg.r[2] = 0;
  reg.r[3] = (int)s_filename;
  reg.r[4] = (int)graphics_mode.m_data;
  reg.r[5] = graphics_mode.i_flags;
  err = _kernel_swi(PDriver_SetDriver,&reg, &reg);
  ERROR_RETURN(err);

  err = cmos_get_printer(&i_tmp, &i_tmp, &i_paper);
  ERROR_RETURN(err);

  switch (i_paper)
  {
    case PAPER_A4:
    	err = _kernel_setenv("PDumperLJ$Extra", PAPER_FEED_A4);
  	ERROR_RETURN(err);
	break;
    case PAPER_LETTER:
    	err = _kernel_setenv("PDumperLJ$Extra", PAPER_FEED_LETTER);
  	ERROR_RETURN(err);
	break;
    case PAPER_LEGAL:
    	err = _kernel_setenv("PDumperLJ$Extra", PAPER_FEED_LEGAL);
  	ERROR_RETURN(err);
	break;
    default:
        err = _kernel_setenv("PDumperLJ$Extra", PAPER_FEED_LETTER);
  	ERROR_RETURN(err);
	break;
  }

  ERROR_RETURN(set_environment(i_fast_parallel));

  free(s_short_name);
  free(graphics_mode.s_dumper);
  free(graphics_mode.m_data);

  return NULL;
}
/*----------------------------------------------------------------------
    Name : read_ps_definition

    Description : Populate graphics_data structure with stuff from
    		  printer definition file. This function should be
    		  extended if more printer factilities are to be added.

    Dependencies : misc_next_line - misc.h

    File format : graphics: section heading
    	 	  dumper module name
    	 	  dumper number
    	 	  palette number
    	 	  strip type
    	 	  halftone type
    	 	  x resolution
    	 	  y resolution
    	 	  length of data block
    	 	  data block
    	 	  flags

    Parameters : m_block       - pointer to memory containing printer definition
    	       	 i_size        - size of printer definition in memory
    	       	 postscript_data - pointer to configuration data structure
    	       	 s_short_name  - printer reference string
----------------------------------------------------------------------*/
static _kernel_oserror *read_ps_definition(char *m_block,int i_size,t_postscript *postscript_data,
       		       			   char **s_short_name, int *i_paper_id, int *i_fast_parallel)
{
  int i_offset=0;

  misc_next_line(m_block,i_size,&i_offset);                         /* Skip ps line */
  *s_short_name = text_copy_string(m_block+i_offset);
  misc_next_line(m_block,i_size,&i_offset);                         /* Skip ps line */
  postscript_data->i_xres = atoi(m_block+i_offset);	            /* xres */
  misc_next_line(m_block,i_size,&i_offset);
  postscript_data->i_yres = atoi(m_block+i_offset);	            /* yres */
  misc_next_line(m_block,i_size,&i_offset);
  postscript_data->i_xres_half = atoi(m_block+i_offset);	    /* xres - halftone */
  misc_next_line(m_block,i_size,&i_offset);
  postscript_data->i_yres_half = atoi(m_block+i_offset);	    /* yres - halftone */
  misc_next_line(m_block,i_size,&i_offset);
  postscript_data->s_prologue = text_copy_string(m_block+i_offset); /* prologue string */
  misc_next_line(m_block,i_size,&i_offset);
  postscript_data->s_manual_false = text_copy_string(m_block+i_offset); /* manual false string */
  misc_next_line(m_block,i_size,&i_offset);
  postscript_data->s_manual_true = text_copy_string(m_block+i_offset);  /* manual true string */
  ERROR_RETURN(err);
  misc_next_line(m_block,i_size,&i_offset);
  postscript_data->i_flags = atoi(m_block+i_offset);	    /* flags */

  text_match_line("paper:",m_block,i_size,&i_offset);
  *i_paper_id = atoi(m_block+i_offset);	  	    /* Paper id number */

  if (text_match_line("fastparallel:",m_block,i_size,&i_offset) != -1)
    *i_fast_parallel = atoi(m_block+i_offset);
  else
    *i_fast_parallel = 0;

  return NULL;
}
/*----------------------------------------------------------------------
    Name : ps_prime

    Description : Do whatever is necessary to prime the specified printer

    Dependencies :

    Parameters : m_block       - pointer to memory containing printer definition
    	       	 i_size        - size of printer definition in memory
----------------------------------------------------------------------*/
_kernel_oserror *ps_prime(char *m_block, int i_size)
{
  t_postscript postscript_data;
  char 	       *s_short_name = NULL;
  char         s_string[256];
  char	       *manual_feed;
  int	       i_paper_id, i_tmp, i_paper, i_fast_parallel;

  err = read_ps_definition(m_block, i_size, &postscript_data, &s_short_name, &i_paper_id, &i_fast_parallel);
  ERROR_RETURN(err);

  /* Load modules in this order : Colours, PDriver, PDumperSpt, PDriverDP, PDumper */
  err = module_rmload_latest("PDriver","PDriver",       PATH_MODULES); 	 	  ERROR_RETURN(err);
  err = module_rmload_latest("PDriverPS","PDriverPS",   PATH_MODULES);        	  ERROR_RETURN(err);
  err = module_rmload_latest("MakePSFont","MakePSFont",	PATH_MODULES);        	  ERROR_RETURN(err);

  usermode_donothing();  /* Run routine to flush all callbacks. This completes module initialisation */
  ERROR_RETURN(err);

  reg.r[0] = 0;
  err = _kernel_swi(PDriver_SelectDriver, &reg, &reg);
  ERROR_RETURN(err);

  reg.r[1] = postscript_data.i_xres;
  reg.r[2] = postscript_data.i_yres;
  reg.r[4] = (int)s_short_name;
  reg.r[5] = postscript_data.i_xres_half;
  reg.r[6] = postscript_data.i_yres_half;
  reg.r[7] = 0;
  if (postscript_data.i_flags & 1<<4) /* Check colour state bit in flags */
    reg.r[3] = 0x2000001;
  else
    reg.r[3] = 0x2000000;
  err = _kernel_swi(PDriver_SetInfo, &reg, &reg);
  ERROR_RETURN(err);

  reg.r[1] = 1<<0;
  if (postscript_data.i_flags & 1<<5) reg.r[1] |= 1<<1; /* verbose prologue */
  if (postscript_data.i_flags & 1<<6) reg.r[1] |= 1<<2; /* accented chars */
  err = _kernel_swi(PDriver_SetDriver, &reg, &reg);
  ERROR_RETURN(err);

  /* Now set the page size */
  err = misc_paper_set_page_size(i_paper_id, &i_text_height);
  ERROR_RETURN(err);

  /* construct filepath for prologues 1 and 2 os variable string */
  sprintf(s_string,"%sPSprologue",PATH_PROLOGUE);
  err = _kernel_setenv("PDriver$PSprologue", s_string);
  ERROR_RETURN(err);

  sprintf(s_string,"%s%s",PATH_PROLOGUE,postscript_data.s_prologue);
  err = _kernel_setenv("PDriver$PSprologue2",  s_string);
  ERROR_RETURN(err);

  if (postscript_data.i_flags & 1<<3)
  	manual_feed = postscript_data.s_manual_true;
  else
  	manual_feed = postscript_data.s_manual_false;

  err = cmos_get_printer(&i_tmp, &i_tmp, &i_paper);
  ERROR_RETURN(err);

  switch (i_paper)
  {
    case PAPER_A4:
    	sprintf(s_string,"%s|J%s",manual_feed, PAGE_SELECT_A4);
	break;
    case PAPER_LETTER:
    	sprintf(s_string,"%s|J%s",manual_feed, PAGE_SELECT_LETTER);
	break;
    case PAPER_LEGAL:
    	sprintf(s_string,"%s|J%s",manual_feed, PAGE_SELECT_LEGAL);
	break;
    default:
    	sprintf(s_string,"%s|J%s",manual_feed, PAGE_SELECT_LETTER);
 	break;
  }

  ERROR_RETURN(set_environment(i_fast_parallel));

  return NULL;
}
@


4.3
log
@32-bit compatible.

Version 0.21. Tagged as 'PPrimer-0_21'
@
text
@d31 1
d43 1
a43 1
extern _kernel_oserror *err; 	 /* Error block declared in main */
d49 19
d73 1
d75 1
a75 1
  ERROR_RETURN(_kernel_setenv("Printer$", (char*)reg.r[4]));  /* and export the printer type in Printer$ */
d77 1
a77 3
  return _kernel_setenv("Printer$Path",                                    /* Need to set Printer: */
                              i_fast_parallel ? "devices#buffer3:$.FastParallel" :
                                                "devices#buffer3:$.Parallel");
@


4.2
log
@Merged Spinner branch to trunk.

Version 0.16. Tagged as 'PPrimer-0_16'
@
text
@d39 1
a39 1
#include "usermode.h"
d156 1
a156 1
  err = usermode_donothing();  /* Run routine to flush all callbacks. This completes module initialisation */
d166 1
a166 1
  err = usermode_donothing();  /* Run routine to flush all callbacks. This completes module initialisation */
d265 1
a265 1
  err = usermode_donothing();  /* Run routine to flush all callbacks. This completes module initialisation */
d275 1
a275 1
  err = usermode_donothing();  /* Run routine to flush all callbacks. This completes module initialisation */
d456 1
a456 1
  err = usermode_donothing();  /* Run routine to flush all callbacks. This completes module initialisation */
@


4.1
log
@Initial revision
@
text
@d23 1
d35 1
d46 1
a46 1
static _kernel_oserror *set_environment()
d48 3
a50 1
  ERROR_RETURN(_kernel_setenv("PrinterType$1", "devices#buffer3:$.Parallel"));  /* Need to set PrinterType$1 */
d56 3
a58 1
  return _kernel_setenv("Printer$Path", "devices#buffer3:$.Parallel");   /* Need to set Printer: */
d88 1
a88 1
       		       			   char **s_short_name, int *i_paper_id)
d122 5
d145 1
a145 1
  int 	     i_paper_id;
d147 1
a147 1
  err = read_dp_definition(m_block, i_size, &graphics_mode, &s_short_name, &i_paper_id);
a154 1
  err = module_rmload_latest(graphics_mode.s_dumper,graphics_mode.s_dumper,PATH_MODULES); ERROR_RETURN(err);
d163 6
d231 1
a231 1
  ERROR_RETURN(set_environment());
d254 1
a254 1
  int	     i_paper_id;
d256 1
a256 1
  err = read_dp_definition(m_block, i_size, &graphics_mode, &s_short_name, &i_paper_id);
a263 1
  err = module_rmload_latest(graphics_mode.s_dumper,graphics_mode.s_dumper,PATH_MODULES); ERROR_RETURN(err);
d272 6
d338 1
a338 1
  err = _kernel_setenv("PDumperLJ$Extra", PAPER_FEED);
d341 21
a361 1
  ERROR_RETURN(set_environment());
d396 1
a396 1
       		       			   char **s_short_name, int *i_paper_id)
d423 5
d445 2
a446 1
  int	       i_paper_id;
d448 1
a448 1
  err = read_ps_definition(m_block, i_size, &postscript_data, &s_short_name, &i_paper_id);
d496 1
a496 1
    sprintf(s_string,"%s|J%s",postscript_data.s_manual_true,PAGE_SELECT);
d498 1
a498 1
    sprintf(s_string,"%s|J%s",postscript_data.s_manual_false,PAGE_SELECT);
d500 1
a500 1
  err = _kernel_setenv("PDriver$PSextra", s_string);
d503 17
a519 1
  ERROR_RETURN(set_environment());
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Changes to Constants.h and Prime.c were to extend the paper usage to letter
and Legal as both PS and PCL printer languages use paper size requests this
is in the lj prime and ps prime proceedures.
@
text
@a22 1
/*    11/6/97,	AR  - Set a choice of paper for lj and PS.		*/
a33 1
#include "cmos.h"
d238 1
a238 1
  int	     i_paper_id, i_tmp, i_paper;
d316 2
a317 2
  
  err = cmos_get_printer(&i_tmp, &i_tmp, &i_paper);
a319 20
  switch (i_paper)
  {
    case PAPER_A4:       
    	err = _kernel_setenv("PDumperLJ$Extra", PAPER_FEED_A4);
  	ERROR_RETURN(err);
	break;
    case PAPER_LETTER:   
    	err = _kernel_setenv("PDumperLJ$Extra", PAPER_FEED_LETTER);
  	ERROR_RETURN(err);
	break;
    case PAPER_LEGAL:
    	err = _kernel_setenv("PDumperLJ$Extra", PAPER_FEED_LEGAL);
  	ERROR_RETURN(err);
	break;
    default:
        err = _kernel_setenv("PDumperLJ$Extra", PAPER_FEED_LETTER);
  	ERROR_RETURN(err);
	break;
  }

d399 1
a399 2
  char	       *manual_feed;
  int	       i_paper_id, i_tmp, i_paper;
d449 1
a449 1
  	manual_feed = postscript_data.s_manual_true;
d451 3
a453 3
  	manual_feed = postscript_data.s_manual_false;
 
  err = cmos_get_printer(&i_tmp, &i_tmp, &i_paper);
a454 16

  switch (i_paper)
  {
    case PAPER_A4:       
    	sprintf(s_string,"%s|J%s",manual_feed, PAGE_SELECT_A4);
	break;
    case PAPER_LETTER:   
    	sprintf(s_string,"%s|J%s",manual_feed, PAGE_SELECT_LETTER);
	break;
    case PAPER_LEGAL:
    	sprintf(s_string,"%s|J%s",manual_feed, PAGE_SELECT_LEGAL);
	break;
    default:
    	sprintf(s_string,"%s|J%s",manual_feed, PAGE_SELECT_LETTER);
 	break;
  }
@


4.1.7.3
log
@Moved the Rmloading of the dumper until after the connection to the PDriver
is connected to the PDriver
@
text
@d146 1
a154 6
	// This allows the connection between PDriverDP and PDriver before registering, support for MiscOP 800000,
  err = module_rmload_latest(graphics_mode.s_dumper,graphics_mode.s_dumper,PATH_MODULES); ERROR_RETURN(err);

  err = usermode_donothing();  /* Run routine to flush all callbacks. This completes module initialisation */
  ERROR_RETURN(err);

d250 1
a256 6
  ERROR_RETURN(err);
  
	// This allows the connection between PDriverDP and PDriver before registering, support for MiscOP 800000,
  err = module_rmload_latest(graphics_mode.s_dumper,graphics_mode.s_dumper,PATH_MODULES); ERROR_RETURN(err);

  err = usermode_donothing();  /* Run routine to flush all callbacks. This completes module initialisation */
@


4.1.7.4
log
@Added support for fast Centronics printers (fastparallel: 1 in definition
files).
Changed to use srccommit.

Version 0.15, 1.1.2.2. Tagged as 'PPrimer-0_15-1_1_2_2'
@
text
@d46 1
a46 1
static _kernel_oserror *set_environment(int i_fast_parallel)
d48 1
a48 3
  ERROR_RETURN(_kernel_setenv("PrinterType$1",                              /* Need to set PrinterType$1 */
                              i_fast_parallel ? "devices#buffer3:$.FastParallel" :
                                                "devices#buffer3:$.Parallel"));
d54 1
a54 3
  return _kernel_setenv("Printer$Path",                                    /* Need to set Printer: */
                              i_fast_parallel ? "devices#buffer3:$.FastParallel" :
                                                "devices#buffer3:$.Parallel");
d84 1
a84 1
       		       			   char **s_short_name, int *i_paper_id, int *i_fast_parallel)
a117 5
  if (text_match_line("fastparallel:",m_block,i_size,&i_offset) != -1)
    *i_fast_parallel = atoi(m_block+i_offset);
  else
    *i_fast_parallel = 0;

d136 1
a136 1
  int 	     i_paper_id, i_fast_parallel;
d138 1
a138 1
  err = read_dp_definition(m_block, i_size, &graphics_mode, &s_short_name, &i_paper_id, &i_fast_parallel);
d222 1
a222 1
  ERROR_RETURN(set_environment(i_fast_parallel));
d245 1
a245 1
  int	     i_paper_id, i_tmp, i_paper, i_fast_parallel;
d247 1
a247 1
  err = read_dp_definition(m_block, i_size, &graphics_mode, &s_short_name, &i_paper_id, &i_fast_parallel);
d262 1
a262 1

d328 1
a328 1

d334 1
a334 1
    case PAPER_A4:
d338 1
a338 1
    case PAPER_LETTER:
d352 1
a352 1
  ERROR_RETURN(set_environment(i_fast_parallel));
d387 1
a387 1
       		       			   char **s_short_name, int *i_paper_id, int *i_fast_parallel)
a413 5
  if (text_match_line("fastparallel:",m_block,i_size,&i_offset) != -1)
    *i_fast_parallel = atoi(m_block+i_offset);
  else
    *i_fast_parallel = 0;

d432 1
a432 1
  int	       i_paper_id, i_tmp, i_paper, i_fast_parallel;
d434 1
a434 1
  err = read_ps_definition(m_block, i_size, &postscript_data, &s_short_name, &i_paper_id, &i_fast_parallel);
d485 1
a485 1

d491 1
a491 1
    case PAPER_A4:
d494 1
a494 1
    case PAPER_LETTER:
d505 1
a505 1
  ERROR_RETURN(set_environment(i_fast_parallel));
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
