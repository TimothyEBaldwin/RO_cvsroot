head	4.5;
access;
symbols
	PPrimer-0_30:4.5
	PPrimer-0_29:4.5
	PPrimer-0_28:4.5
	PPrimer-0_27:4.5
	PPrimer-0_26:4.5
	PPrimer-0_25:4.5
	PPrimer-0_24:4.4
	PPrimer-0_23:4.4
	dellis_autobuild_BaseSW:4.4
	PPrimer-0_22:4.4
	PPrimer-0_21:4.4
	PPrimer-0_20:4.4
	sbrodie_sedwards_16Mar2000:4.4
	PPrimer-0_19:4.4
	PPrimer-0_18:4.4
	PPrimer-0_17:4.3
	PPrimer-0_16:4.2
	dcotton_autobuild_BaseSW:4.4
	PPrimer-0_15-1_1_2_3:4.1.7.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.3
	Ursula_RiscPC:4.1.7.3.0.4
	PPrimer-0_15-1_1_2_2:4.1.7.3
	FunaiNC2_PPrimer-0_15:4.1.7.3
	FunaiNC2_PPrimer-0_14:4.1.7.3
	rthornb_UrsulaBuild-19Aug1998:4.1.7.3
	UrsulaBuild_FinalSoftload:4.1.7.3
	rthornb_UrsulaBuild-12Aug1998:4.1.7.3
	aglover_UrsulaBuild-05Aug1998:4.1.7.3
	rthornb_UrsulaBuild-29Jul1998:4.1.7.3
	rthornb_UrsulaBuild-22Jul1998:4.1.7.3
	hsimons_BOCA-1_2-Release:4.1.7.3
	rthornb_UrsulaBuild-15Jul1998:4.1.7.3
	rthornb_UrsulaBuild-07Jul1998:4.1.7.3
	rthornb_UrsulaBuild-17Jun1998:4.1.7.3
	rthornb_UrsulaBuild-03Jun1998:4.1.7.3
	rthornb_UrsulaBuild-27May1998:4.1.7.3
	rthornb_UrsulaBuild-21May1998:4.1.7.3
	rthornb_UrsulaBuild_01May1998:4.1.7.3
	afrost_NC2_Generic:4.1.7.3
	afrost_Funai01-33:4.1.7.3
	Ursula:4.1.7.3.0.2
	Ursula_bp:4.1.7.3
	Ursula_31Mar1998:4.1
	Spinner_RCA116:4.1.7.3
	Spinner_B20_2:4.1.7.3
	Spinner_19_3:4.1.7.3
	Spinner_B18:4.1.7.3
	Spinner_B17:4.1.7.3
	Spinner_B15:4.1.7.3
	Spinner_B14:4.1.7.3
	Spinner_B13:4.1.7.3
	Spinner_B12:4.1.7.3
	Spinner_B10:4.1.7.2
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.3
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.5
date	2002.02.05.13.41.56;	author mboura;	state Exp;
branches;
next	4.4;

4.4
date	99.12.09.15.48.55;	author dcotton;	state Exp;
branches;
next	4.3;

4.3
date	99.09.30.12.33.22;	author olove;	state Exp;
branches;
next	4.2;

4.2
date	99.09.30.10.55.47;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.21.11.19.04;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.21.11.19.04;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.44.12;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.05.09.11.07.36;	author scormie;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.06.04.15.49.22;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Changing printer driver no longer always resets connection to parallel.
Detail:
Printer$Path is only changed if Printer$Path == PrinterType$1 thus ensuring that fastparallel is dealt with correctly, but without upsetting other printer connections, notably USB.
Misleading comments that confused _kernel_oserror* with _kernel_oserror and 'defined' with 'declared' fixed.
Admin:
Tested on DSL 4000

Version 0.25. Tagged as 'PPrimer-0_25'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*----------------------------------------------------------------------*/
/*    Filename    : h.cmos                                       	*/
/*    Author	  : R.W.Buckley						*/
/*    Date        : Mon 20th February 1995				*/
/*    Description : Functions to read/write to CMOS RAM			*/
/*    Modification history:    	    		       			*/
/*    		   							*/
/*----------------------------------------------------------------------*/
#include <stdlib.h>

#include "kernel.h"
#include "swis.h"
#include "constants.h"

#include "nvram.h"

#include "Debuglib/Debuglib.h"

extern _kernel_swi_regs reg; /* Global set of registers to use */
extern _kernel_oserror *err; /* Error block pointer */

/*----------------------------------------------------------------------
    Name : config_get_printer

    Description : Read byte in CMOS to get current printer configuration
----------------------------------------------------------------------*/
_kernel_oserror *cmos_get_printer(int *i_printer, int *i_colour, int *i_paper)
{
  dprintf(("", "cmos_get_printer()\n"));

  /* Try reading from new NVRAM location first. */
  reg.r[0] = (int)PrinterIDTAG;
  reg.r[1] = (int)i_printer;
  reg.r[2] = 0;
  err = _kernel_swi(NVRAM_Read, &reg, &reg);
  if ((err != NULL) || (reg.r[0] < 0))
  {
    /* Reading new location failed so try the old one. */
    reg.r[0] = 161;           /* Read CMOS RAM */
    reg.r[1] = PrinterIDCMOS; /* Location of printer ID byte */
    err = _kernel_swi(OS_Byte, &reg, &reg);  ERROR_RETURN(err);
    *i_printer = reg.r[2];
  }

  /* Try reading from new NVRAM location first. */
  reg.r[0] = (int)PrinterColourTAG;
  reg.r[1] = (int)i_colour;
  reg.r[2] = 0;
  err = _kernel_swi(NVRAM_Read, &reg, &reg);
  if ((err != NULL) || (reg.r[0] < 0))
  {
    /* Reading new location failed so try the old one. */
    reg.r[0] = 161;           /* Read CMOS RAM */
    reg.r[1] = PSITCMOS;      /* Location of printer information byte */
    err = _kernel_swi(OS_Byte, &reg, &reg);  ERROR_RETURN(err);
    *i_colour = reg.r[2] & PSITCMOS_MASK;
  }

  /* Try reading from new NVRAM location first. */
  reg.r[0] = (int)PrinterPaperTAG;
  reg.r[1] = (int)i_paper;
  reg.r[2] = 0;
  err = _kernel_swi(NVRAM_Read, &reg, &reg);
  if ((err != NULL) || (reg.r[0] < 0))
  {
    /* Reading new location failed so try the old one. */
    reg.r[0] = 161;           /* Read CMOS RAM */
    reg.r[1] = PrinterPaperCMOS;
    err = _kernel_swi(OS_Byte, &reg, &reg);  ERROR_RETURN(err);
    *i_paper = reg.r[2] & PrinterPaper_MASK;
  }
  return NULL;
}

#if 0
/****** NOT USED AT PRESENT ******/

/*----------------------------------------------------------------------
    Name : config_set_printer

    Description : Set byte in CMOS to change current printer configuration
----------------------------------------------------------------------*/
_kernel_oserror *cmos_set_printer(int i_printer, int i_colour)
{
  /* Try writing to new NVRAM location first. */
  reg.r[0] = (int)PrinterIDTAG;
  reg.r[1] = (int)&i_printer;
  reg.r[2] = 0;
  err = _kernel_swi(NVRAM_Write, &reg, &reg);
  if ((err != NULL) || (reg.r[0] < 0))
  {
    /* Writing new location failed so try the old one. */
    reg.r[0] = 162;           /* Write CMOS RAM */
    reg.r[1] = PrinterIDCMOS; /* Location of printer ID byte */
    reg.r[2] = i_printer;
    err = _kernel_swi(OS_Byte, &reg, &reg);  ERROR_RETURN(err);
  }
  reg.r[0] = 161;           /* Read CMOS RAM */
  reg.r[1] = PSITCMOS;      /* Location of printer information byte */
  err = _kernel_swi(OS_Byte, &reg, &reg);  ERROR_RETURN(err);

  if (i_colour == 1)
    reg.r[2] |= PSITCMOS_MASK;
  else
    reg.r[2] &= ~PSITCMOS_MASK;

  reg.r[0] = 162;           /* Write CMOS RAM */
  err = _kernel_swi(OS_Byte, &reg, &reg);

  return err;
}

#endif
@


4.4
log
@	Added DebugLib support.
Detail:
	Added DebugLib support to help debug a fault in the Lazarus build.
	Added stripdepnd support.
	Added MkD and MkRomD targets.
Admin:
	Tested as a softload on a Lazarus box.

Version 0.18. Tagged as 'PPrimer-0_18'
@
text
@d34 1
a34 1
extern _kernel_oserror *err; /* Error block */
@


4.3
log
@Modified .cmos file so that it now reads the values for PaperSize and Colour
using NVRAM tags rather than the from the direct locations in CMOS.

Version 0.17. Not tagged
@
text
@d31 2
d43 2
d72 1
a72 1
  
d85 1
a85 1
  }  
@


4.2
log
@Merged Spinner branch to trunk.

Version 0.16. Tagged as 'PPrimer-0_16'
@
text
@d55 27
a81 8
  reg.r[0] = 161;           /* Read CMOS RAM */
  reg.r[1] = PSITCMOS;      /* Location of printer information byte */
  err = _kernel_swi(OS_Byte, &reg, &reg);  ERROR_RETURN(err);
  *i_colour = reg.r[2] & PSITCMOS_MASK;

  reg.r[1] = PrinterPaperCMOS;
  err = _kernel_swi(OS_Byte, &reg, &reg);  ERROR_RETURN(err);
  *i_paper = reg.r[2] & PrinterPaper_MASK;
@


4.1
log
@Initial revision
@
text
@d29 2
d41 14
a55 4
  reg.r[1] = PrinterIDCMOS; /* Location of printer ID byte */
  err = _kernel_swi(OS_Byte, &reg, &reg);  ERROR_RETURN(err);
  *i_printer = reg.r[2];

d76 13
a88 5
  reg.r[0] = 162;           /* Write CMOS RAM */
  reg.r[1] = PrinterIDCMOS; /* Location of printer ID byte */
  reg.r[2] = i_printer;
  err = _kernel_swi(OS_Byte, &reg, &reg);  ERROR_RETURN(err);

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Now uses new NVRAM allocation for printer ID.
@
text
@a28 2
#include "nvram.h"

d39 4
a42 13
  /* Try reading from new NVRAM location first. */
  reg.r[0] = (int)PrinterIDTAG;
  reg.r[1] = (int)i_printer;
  reg.r[2] = 0;
  err = _kernel_swi(NVRAM_Read, &reg, &reg);
  if ((err != NULL) || (reg.r[0] < 0))
  {
    /* Reading new location failed so try the old one. */
    reg.r[0] = 161;           /* Read CMOS RAM */
    reg.r[1] = PrinterIDCMOS; /* Location of printer ID byte */
    err = _kernel_swi(OS_Byte, &reg, &reg);  ERROR_RETURN(err);
    *i_printer = reg.r[2];
  }
d64 5
a68 13
  /* Try writing to new NVRAM location first. */
  reg.r[0] = (int)PrinterIDTAG;
  reg.r[1] = (int)&i_printer;
  reg.r[2] = 0;
  err = _kernel_swi(NVRAM_Write, &reg, &reg);
  if ((err != NULL) || (reg.r[0] < 0))
  {
    /* Writing new location failed so try the old one. */
    reg.r[0] = 162;           /* Write CMOS RAM */
    reg.r[1] = PrinterIDCMOS; /* Location of printer ID byte */
    reg.r[2] = i_printer;
    err = _kernel_swi(OS_Byte, &reg, &reg);  ERROR_RETURN(err);
  }
@


4.1.7.3
log
@Need to set r0 for when NVRAM read works
@
text
@a54 1
  reg.r[0] = 161;           /* Read CMOS RAM */
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
