head	4.1;
access;
symbols
	PPrimer-0_30:4.1
	PPrimer-0_29:4.1
	PPrimer-0_28:4.1
	PPrimer-0_27:4.1
	PPrimer-0_26:4.1
	PPrimer-0_25:4.1
	PPrimer-0_24:4.1
	PPrimer-0_23:4.1
	dellis_autobuild_BaseSW:4.1
	PPrimer-0_22:4.1
	PPrimer-0_21:4.1
	PPrimer-0_20:4.1
	sbrodie_sedwards_16Mar2000:4.1
	PPrimer-0_19:4.1
	PPrimer-0_18:4.1
	PPrimer-0_17:4.1
	PPrimer-0_16:4.1
	dcotton_autobuild_BaseSW:4.1
	PPrimer-0_15-1_1_2_3:4.1.7.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1
	Ursula_RiscPC:4.1.7.1.0.6
	PPrimer-0_15-1_1_2_2:4.1.7.1
	FunaiNC2_PPrimer-0_15:4.1.7.1
	FunaiNC2_PPrimer-0_14:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1
	UrsulaBuild_FinalSoftload:4.1.7.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Ursula:4.1.7.1.0.4
	Ursula_bp:4.1.7.1
	Ursula_31Mar1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.1
date	96.11.21.11.19.04;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.21.11.19.04;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.44.13;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*----------------------------------------------------------------------*/
/*    Filename    : c.db                                        	*/
/*    Author	  : R.W.Buckley						*/
/*    Date        : Fri 10th February 1995				*/
/*    Description :      						*/
/*    Modification history:    	    		       			*/
/*    		   							*/
/*----------------------------------------------------------------------*/

#include "constants.h"

#ifdef DEBUG

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>

#undef malloc
#undef free

static FILE *f_debug=NULL;

/*
        ------------
        | Header   | !0
        ------------
        | Size     | !4
        ------------
        | Previous | !8
        ------------
        | Next     | !12
        ------------
        | ID no    | !16
        ------------
        |          | !20 +...
        | Data     |
        |          |
        ------------
        | Tail     | !Size+20
        ------------
 */


static char *s_id = "RICH";
static char *m_anchor=NULL;
static int i_malloc_count=0;
static int i_id_number=0;

/* ----------------------------------------------------------------- */

static int get_size(char *m_pointer)
{
  return *(int*)(m_pointer+4);
}
/* ----------------------------------------------------------------- */
static void set_next(char *m_pointer,char *m_next)
{
  *(int*)(m_pointer+12) = (int)m_next;
}
/* ----------------------------------------------------------------- */
static char *get_next(char *m_pointer)
{
  return (char*)*(int*)(m_pointer+12);
}
/* ----------------------------------------------------------------- */
static void set_previous(char *m_pointer,char *m_next)
{
  *(int*)(m_pointer+8) = (int)m_next;
}
/* ----------------------------------------------------------------- */
static char *get_previous(char *m_pointer)
{
  return (char*)*(int*)(m_pointer+8);
}
/* ----------------------------------------------------------------- */
static void write_guard(char *m_pointer)
{
  int i;
  for (i=0; i<4; i++)
     *(m_pointer+i) = *(s_id+i);
}
/* ----------------------------------------------------------------- */
void *db_malloc(size_t i_size)
{
  char *m_space=NULL;

  m_space = (char *)malloc(i_size+24);
  if (m_space == NULL) return NULL;

  write_guard(m_space+0);
  *(int*)(m_space+4) = i_size;
  set_next(m_space,NULL);
  *(int*)(m_space+16) = i_id_number;
  write_guard(m_space+i_size+20);
  if (m_anchor == NULL)
  {
    m_anchor = m_space;
    set_previous(m_space,NULL);
    set_next(m_space,NULL);
  }
  else
  {
    set_previous(m_space,NULL);
    set_previous(m_anchor,m_space);
    set_next(m_space,m_anchor);
    m_anchor = m_space;
  }
/*   db_printf("Alloc> Block %d, size %d\n",i_id_number,i_size); */
  i_malloc_count++;
  i_id_number++;
  return m_space+20;
}
/* ----------------------------------------------------------------- */

void db_free(void *m_void)
{
  char *previous=NULL, *next=NULL;
  BOOL bad=FALSE;
  char *m_pointer;
  int i_id;

  if (m_void != NULL)
  {
    m_pointer = (char*)m_void;
    m_pointer -= 20; /* Get to actual anchor */

    previous = get_previous(m_pointer);
    next = get_next(m_pointer);
    i_id = *(int*)(m_pointer+16);
    if (strncmp(m_pointer,s_id,4) != 0)
    {
      db_printf("Free> Block %d, %x : header corrupt\n",i_id,(int)m_pointer);
      bad = TRUE;
    }
    if (strncmp(m_pointer+get_size(m_pointer)+20,s_id,4) != 0)
    {
      db_printf("Free> Block %d, %x : tail corrupt\n",i_id,(int)m_pointer);
      bad = TRUE;
    }

    if (bad)
    {
      db_printf("Free> Bad block, free failed\n");
    }
    else
    {
      if (next != NULL && previous != NULL)
      {
        set_next(previous,next);
        set_previous(next,previous);
      }
      if (next == NULL && previous != NULL) set_next(previous, NULL);
      if (next != NULL && previous == NULL)
      {
        set_previous(next, NULL);
        m_anchor = next;
      }
      if (next == NULL && previous == NULL) m_anchor = NULL;
      free(m_pointer);
/*       db_printf("Free> Block %d\n",i_id); */
      i_malloc_count--;
    }
  }
}
/* ----------------------------------------------------------------- */

void db_check()
{
  char *m_pointer=NULL;
  BOOL ok;

  m_pointer = m_anchor;
  db_printf("Check> Checking malloc allocations ...");
  db_printf("%d blocks have been allocated, %d blocks currently allocated,\n",i_id_number-1, i_malloc_count);
  if (i_malloc_count>0) db_printf("Check>   Block ");
  while (m_pointer != NULL)
  {
    ok = TRUE;
    db_printf("%d, ",(*(int*)(m_pointer+16)));
    if (strncmp(m_pointer,s_id,4) != 0)
    {
      ok = FALSE;
      db_printf("Header corrupt, ");
    }
    if (strncmp(m_pointer+get_size(m_pointer)+20,s_id,4) != 0)
    {
      ok=FALSE;
      db_printf("tail corrupt, ");
    }
    if (!ok)
    {
      db_printf("\nCheckBlock>   Block ");
    }
    m_pointer = get_next(m_pointer);
  }
  db_printf("\nCheck> Complete\n");
}

void db_query(void *m_void)
{
  char *m_pointer;

  if (m_void != NULL)
  {
    m_pointer = (char*)m_void;
    m_pointer -= 20;  /* Get to actual anchor */
    db_printf("Query> Block id is %d, size is %d\n",(*(int*)(m_pointer+16)),(*(int*)(m_pointer+4)));
  }
}

/* ----------------------------------------------------------------- */

void db_file_init(char*s_filename)
{
  if (s_filename!=NULL)
  {
    f_debug = fopen(s_filename,"w");
  }
  else
  {
    fclose(f_debug);
    f_debug=NULL;
  }
}
/* ----------------------------------------------------------------- */

int db_printf (char *format, ...)
{
  int ret = 0;
  va_list list;

  va_start (list, format);
  ret = vfprintf(f_debug?f_debug:stdout, format, list);
  va_end(list);
  return ret;
}

#endif
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
