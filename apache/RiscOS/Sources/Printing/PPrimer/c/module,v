head	4.3;
access;
symbols
	PPrimer-0_30:4.3
	PPrimer-0_29:4.3
	PPrimer-0_28:4.3
	PPrimer-0_27:4.3
	PPrimer-0_26:4.3
	PPrimer-0_25:4.3
	PPrimer-0_24:4.2
	PPrimer-0_23:4.2
	dellis_autobuild_BaseSW:4.2
	PPrimer-0_22:4.2
	PPrimer-0_21:4.2
	PPrimer-0_20:4.2
	sbrodie_sedwards_16Mar2000:4.2
	PPrimer-0_19:4.2
	PPrimer-0_18:4.2
	PPrimer-0_17:4.1
	PPrimer-0_16:4.1
	dcotton_autobuild_BaseSW:4.2
	PPrimer-0_15-1_1_2_3:4.1.7.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1
	Ursula_RiscPC:4.1.7.1.0.6
	PPrimer-0_15-1_1_2_2:4.1.7.1
	FunaiNC2_PPrimer-0_15:4.1.7.1
	FunaiNC2_PPrimer-0_14:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1
	UrsulaBuild_FinalSoftload:4.1.7.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Ursula:4.1.7.1.0.4
	Ursula_bp:4.1.7.1
	Ursula_31Mar1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.3
date	2002.02.05.13.41.56;	author mboura;	state Exp;
branches;
next	4.2;

4.2
date	99.12.09.15.48.56;	author dcotton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.21.11.19.08;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.1.5.1
date	96.11.21.11.19.08;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.44.20;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Changing printer driver no longer always resets connection to parallel.
Detail:
Printer$Path is only changed if Printer$Path == PrinterType$1 thus ensuring that fastparallel is dealt with correctly, but without upsetting other printer connections, notably USB.
Misleading comments that confused _kernel_oserror* with _kernel_oserror and 'defined' with 'declared' fixed.
Admin:
Tested on DSL 4000

Version 0.25. Tagged as 'PPrimer-0_25'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*----------------------------------------------------------------------*/
/*    Filename    : c.module	                                       	*/
/*    Author	  : R.W.Buckley						*/
/*    Date        : Mon 06th March 1995					*/
/*    Description : Handle loading of modules etc			*/
/*    Modification history:    	    		       			*/
/*      13/04/95 - Module version number for any module in ROM is now   */
/* 		   looked for. If the ROM module is dormant, it is      */
/* 		   woken up.   	      	  	    	     		*/
/*    		   							*/
/*----------------------------------------------------------------------*/

#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "constants.h"

#include "Debuglib/Debuglib.h"

extern _kernel_swi_regs reg;	 /* Declared in main */
extern _kernel_oserror *err; 	 /* Error block defined in main */

/*----------------------------------------------------------------------
    Name : rmload_latest_module

    Description : Strategy: - is the module currently in memory?
    		  	    - if so, what is its version number?
    			    - is the module in ROM?
    			    - if so, what is its version number?
    			    - is the module on disc?
    			    - if so, what is its version number?
    			    - use whichever module has the latest version

    Dependencies : file stuff - stdio.h
    		   swi calls  - kernel.h, swis.h
    		   strcmp     - string.h

    File format : Byte 0x14 in a module header refers to the offset
    	 	  from that address to the help string. This string
    	 	  is of a standard format and contains the version
    	 	  number. This can be extracted.

    Parameters : s_name - module name eg PDumperDM
    	       	 s_path - module path
----------------------------------------------------------------------*/
_kernel_oserror *module_rmload_latest(char *s_name, char *s_filename, char *s_path)
{
  char s_filepath[255];
  int  ram_version, disc_version, rom_version, highest_version, rom_state;
  char *ptr;
  int  i;
  int  i_offset;
  FILE *f_file;

  dprintf(("", "module_rmload_latest()\n"));

  sprintf(s_filepath,"%s%s",s_path,s_filename);

  ram_version = -1;
  reg.r[0] = 18;                               /* Lookup module name */
  reg.r[1] = (int)s_name;		       /* This name */
  err = _kernel_swi(OS_Module, &reg, &reg);
  if (err==NULL)    	       	               /* if module is in ram */
  {
    ptr = (char*)reg.r[3];                     /* look at start address */
    if (*(ptr+0x14)!=0)      		       /* Check for existance of help string (contains version) */
    {
      ptr+=*(ptr+0x14);                        /* The contents of 0x14 is the offset to the help string */
      while (*ptr!=9 && *ptr!=0) ptr++;        /* Skip tabs */
      if (*ptr!=0)   		 	       /* Not the end of line */
      {
        ram_version = 0;
        ptr++;
        while (*ptr>='0' && *ptr<='9' || *ptr=='.')
        {
          if (*ptr>='0' && *ptr<='9') ram_version = ram_version*10 + (*ptr-'0');
          ptr++;
        }
      }
    }
  }

  rom_version = -1;
  reg.r[0] = 20;   /* Enumerate ROM modules with version numbers */
  reg.r[1] = 0;
  reg.r[2] = -1;
  do
  {
    err = _kernel_swi(OS_Module, &reg, &reg);
    if (err == NULL)
    {
      if (strcmp((char*)reg.r[3],s_name) == 0)   /* Check module name */
      {
        rom_state    = reg.r[4];    /* -1 = unplugged, 0 = dormant, 1 = active, 2 = running */
        rom_version  = (reg.r[6]>>8  & 0xF);
        rom_version += (reg.r[6]>>12 & 0xF)*10;
        rom_version += (reg.r[6]>>16 & 0xF)*100;
        rom_version += (reg.r[6]>>20 & 0xF)*1000;
        rom_version += (reg.r[6]>>24 & 0xF)*10000;
        rom_version += (reg.r[6]>>28 & 0xF)*100000;
      }
    }
  } while (rom_version == -1 && err == NULL);

  disc_version = -1;
  f_file = fopen(s_filepath,"r");                        /* Open file for read */
  if (f_file!=NULL)
  {
    fseek(f_file, 0x14, SEEK_SET);		         /* Find help offset value */
    i_offset = 0;
    for (i=0; i<24; i+=8) i_offset += fgetc(f_file)<<i;  /* Extract offset value */
    if (*ptr!=0)
    {
      fseek(f_file, i_offset, SEEK_SET);      	      /* Move to offset from start */
      do { i = fgetc(f_file); } while (i!=0 && i!=9); /* find the start of the version number */
      if (i!=0)
      {
        disc_version = 0;
        do
        {
          i = fgetc(f_file);
          if (i>='0' && i<='9') disc_version = disc_version*10+i-'0';
        } while ((i>='0' && i<='9') || i=='.' || i==9);
      }
    }
   fclose(f_file);		                    /* Close the file */
  }

  if (ram_version>rom_version)
    highest_version = ram_version;
  else
    highest_version = rom_version;

  if (disc_version>highest_version)
  {
    reg.r[0] = 1;                                 /* rmload */
    reg.r[1] = (int)s_filepath;			  /* this module */
    err = _kernel_swi(OS_Module, &reg, &reg);
    ERROR_RETURN(err);
  }
  else
  {
    if (highest_version == rom_version)
    {
      if (rom_state<1)
      {
        reg.r[0] = 4;   /* RMKill */
        reg.r[1] = (int)s_name;
        err = _kernel_swi(OS_Module, &reg, &reg); /* Ignore errors */
        reg.r[0] = 3;   /* RMReInit */
        err = _kernel_swi(OS_Module, &reg, &reg);
        ERROR_RETURN(err);
      }
    }
  }

  reg.r[0] = 18;                                  /* check that we've got a module */
  reg.r[1] = (int)s_name;
  err = _kernel_swi(OS_Module, &reg, &reg);
  ERROR_RETURN(err);

  return NULL;
}
@


4.2
log
@	Added DebugLib support.
Detail:
	Added DebugLib support to help debug a fault in the Lazarus build.
	Added stripdepnd support.
	Added MkD and MkRomD targets.
Admin:
	Tested as a softload on a Lazarus box.

Version 0.18. Tagged as 'PPrimer-0_18'
@
text
@d36 1
a36 1
extern _kernel_oserror *err; 	 /* Error block declared in main */
@


4.1
log
@Initial revision
@
text
@d33 2
d69 2
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
