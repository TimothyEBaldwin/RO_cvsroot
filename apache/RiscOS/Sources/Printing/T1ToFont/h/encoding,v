head	4.2;
access;
symbols
	T1ToFont-1_37:4.2
	T1ToFont-1_36:4.1.1.1
	T1ToFont-1_35:4.1.1.1
	T1ToFont-1_34:4.1.1.1
	T1ToFont-1_33:4.1.1.1
	T1ToFont-1_32:4.1.1.1
	T1ToFont-1_31:4.1.1.1
	T1ToFont-1_30:4.1.1.1
	T1ToFont-1_29:4.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1
	Ursula_RiscPC:4.1.7.1.0.4
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1
	UrsulaBuild_FinalSoftload:4.1.7.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	Ursula:4.1.7.1.0.2
	Ursula_bp:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	RO_3_71:4.1.3.1
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2018.08.11.15.16.05;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	OTGphC2SMAlioINA;

4.1
date	96.11.05.09.49.43;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.49.43;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.16.07;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.32.55;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.35.54;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Fix for potential buffer overrun and never finding EOF
convert.c: fgetc() needs ints for its return value in order to spot EOF.
metrics.c: The hashtable itterator ran from 0-1023 (MAX_CHARS) but only contains 256 entries, so if the character can't be found the loop continued checking 768 garbage entries.
Found by cppcheck static analysis.
encoding.h/encoding.c: Define a symbol to describe the hashtable size. Use new define for MAX_HASHS where applicable.

Version 1.37. Tagged as 'T1ToFont-1_37'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*-*-c-*- > h.encoding
 */

#ifndef _h_encoding
#define _h_encoding


typedef enum
{
    ENC_CHECKED,		       /* done */
    ENC_NOEXIST,		       /* doesn't exist in encoding vector */
    ENC_EXIST			       /* exists in encoding vector */
} checktype;


#define MAXNAMELEN 31
#define MAX_CHARS 1024
#define MAX_HASHS 256
#define MAX_CHUNKS (MAX_CHARS/8)

typedef struct cc_section
{
    int code;			       /* character code (-1 if none) */
    int xoffset, yoffset;	       /* x/y offset (design units) */
} cc_section;


typedef struct nameblk
{
    struct nameblk *link;
    int code;			       /* char code this corresponds to */
    char name[MAXNAMELEN + 1];	       /* identifier of character */
    cc_section base, accent;	       /* composite character sections */
    int width;			       /* useful for guessing composite character accent
				        * xoffset */
} nameblk;


typedef struct encstr
{
    int nchars;
    nameblk *hashtable[MAX_HASHS];     /* name -> number mapping */
    nameblk *nameof[MAX_CHARS];	       /* number -> name mapping */
    char matchtable[MAX_CHARS];	       /* flag: does character exist? */
    int alphabet;		       /* RISC OS alphabet number (0 if none) */
    char name[MAXNAMELEN + 1];	       /* name of encoding */
} encstr;


#include "h.metrics"


os_error *startencoding(encstr * encoding);
os_error *writeencoding(encstr * encoding, const char *filename);
os_error *readencoding(encstr * encoding, metricsstr * metrics,
		       const char *encname, CheckEncoding checkflag, BOOL useBase);

os_error *addname(encstr * encoding, int code, const char *name);
int matchname(encstr * encoding, const char *name);
nameblk *matchnameblk(encstr * encoding, const char *name);
nameblk *matchnameblk_adding(encstr * encoding, const char *name);
void freeEncoding(encstr *);

void *smalloc_abort(int size);
int smalloc_size(void *pointer);
void *smalloc_copy(void *oldblock);
void *malloc_abort(int size);

os_error *make_oserror(int errnum, const char *format,...);

os_error *fopen_err(const char *filename, const char *access, FILE ** result);
os_error *fread_err(void *buffer, int itemsize, int itemcount, FILE * file);
os_error *fwrite_err(void *buffer, int itemsize, int itemcount, FILE * file);

#endif
@


4.1
log
@Initial revision
@
text
@d32 1
d56 1
a56 1
    nameblk *hashtable[256];	       /* name -> number mapping */
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
