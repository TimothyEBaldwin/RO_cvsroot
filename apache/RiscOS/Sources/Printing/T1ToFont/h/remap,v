head	4.1;
branch	4.1.1;
access;
symbols
	T1ToFont-1_37:4.1.1.1
	T1ToFont-1_36:4.1.1.1
	T1ToFont-1_35:4.1.1.1
	T1ToFont-1_34:4.1.1.1
	T1ToFont-1_33:4.1.1.1
	T1ToFont-1_32:4.1.1.1
	T1ToFont-1_31:4.1.1.1
	T1ToFont-1_30:4.1.1.1
	T1ToFont-1_29:4.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1
	Ursula_RiscPC:4.1.7.1.0.4
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1
	UrsulaBuild_FinalSoftload:4.1.7.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	Ursula:4.1.7.1.0.2
	Ursula_bp:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	RO_3_71:4.1.3.1
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.49.44;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.49.44;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.16.21;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.33.00;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.35.59;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*-*-c-*- > h.remap
 */

typedef struct FFile_FontHdr
{
    int fontid;			       /* "FONT" */
    char bpp;			       /* bits per pixel (0 ==> outlines) */
    char version;		       /* version number of file format (current = 1) */
    short int designsize;	       /* size of 1 em in the design units, or flags */
    short int x0, y0, xs, ys;	       /* font bounding box */
    int chunkoff[9];		       /* offsets to chunks */
} FFile_FontHdr;


typedef struct charheader
{
    char flags;			       /* bit 0 set => coords are 12-bit, else 8-bit bit
				        * 1 set => data is 1-bpp, else 4-bpp bit 2 set =>
				        * initial pixel is black, else white bit 3 set =>
				        * data is outline, else bitmap bits 4..7 = 'f'
				        * value for char (0 ==> not encoded) */
    char x0y0[3];		       /* 2 x 12-bit numbers = 3 bytes */
    char x1y1[3];		       /* ditto */
} charheader;			       /* char data follows */

/*
 * To find out if this has composite sections, we must scan past the outline segments
 * till we find the terminator, then possibly the skeleton section, then the composite section.
 */

typedef unsigned char uchar;

typedef enum
{
    CHUNKFLAG_HSUBPIXEL  = 1 << 0,
    CHUNKFLAG_VSUBPIXEL  = 1 << 1,
    CHUNKFLAG_DEPENDENCY = 1 << 7, /* bit set => dependency byte present */
    CHUNKFLAG_PRESENT = (int) (1U << 31),
    CHUNKFLAG_RESERVED = ~(CHUNKFLAG_HSUBPIXEL | CHUNKFLAG_VSUBPIXEL |
			   CHUNKFLAG_DEPENDENCY | CHUNKFLAG_PRESENT)
} chunkflags;

#define CHARFLAGS_12BIT       0x01
#define CHARFLAGS_ANTIALIASED 0x02
#define CHARFLAGS_STARTSBLACK 0x04
#define CHARFLAGS_OUTLINE     0x08
#define CHARFLAGS_FVALUE      0xF0
#define CHARFLAGS_COMPOSITE1  0x10
#define CHARFLAGS_COMPOSITE2  0x20
#define CHARFLAGS_16BITCODES  0x40
#define CHARFLAGS_RESERVED    0x80

#define IN_BASE_FILE ~0x7FFFFFFF

#define NULL_SCAFFOLD 0x1000000
#define WID_LTANGENT 254
#define WID_RTANGENT 255


typedef struct outlinestr
{
    encstr encoding;		       /* encoding to be used for this file */
    metricsstr metrics;		       /* metrics data (read from IntMetrics or AFM file) */
    FFile_FontHdr *header;	       /* pointer to block containing header */
    short int *table;		       /* pointer to block containing table of offsets to
				        * scaffold entries */
    uchar *extradata;		       /* between scaffold end and first chunk */
    uchar *scaffold[MAX_CHARS];	       /* pointer to scaffold data */
    uchar *chardata[MAX_CHARS];	       /* pointer to outline data */
    int dependency[MAX_CHUNKS];	       /* filled in by remapoutlines() */
    int basefileflags;		       /* bit set => chunk is in parent */
    chunkflags chunkflag[MAX_CHUNKS];  /* for version 7 onwards */
    char threshold;		       /* for version 5 onwards */
} outlinestr;


os_error *convertencoding(const char *fontprefix, const char *fontname, keyid actions,
			   const char *oldenc, const char *newenc);

os_error *readoutlinesfile(outlinestr * filedata, char *filename);
os_error *writeoutlinesfile(outlinestr * filedata, char *filename);

os_error *getcoord(uchar ** pp, int charflags, int *xp, int *yp);
os_error *putcoord(uchar ** pp, int charflags, int x, int y);
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
