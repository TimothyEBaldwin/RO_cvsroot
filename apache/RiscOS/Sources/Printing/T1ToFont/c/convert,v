head	4.2;
access;
symbols
	T1ToFont-1_37:4.2
	T1ToFont-1_36:4.1.1.1
	T1ToFont-1_35:4.1.1.1
	T1ToFont-1_34:4.1.1.1
	T1ToFont-1_33:4.1.1.1
	T1ToFont-1_32:4.1.1.1
	T1ToFont-1_31:4.1.1.1
	T1ToFont-1_30:4.1.1.1
	T1ToFont-1_29:4.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1
	Ursula_RiscPC:4.1.7.1.0.4
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1
	UrsulaBuild_FinalSoftload:4.1.7.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	Ursula:4.1.7.1.0.2
	Ursula_bp:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	RO_3_71:4.1.3.1
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2018.08.11.15.16.02;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	OTGphC2SMAlioINA;

4.1
date	96.11.05.09.49.34;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.49.34;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.14.51;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.32.29;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.35.33;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Fix for potential buffer overrun and never finding EOF
convert.c: fgetc() needs ints for its return value in order to spot EOF.
metrics.c: The hashtable itterator ran from 0-1023 (MAX_CHARS) but only contains 256 entries, so if the character can't be found the loop continued checking 768 garbage entries.
Found by cppcheck static analysis.
encoding.h/encoding.c: Define a symbol to describe the hashtable size. Use new define for MAX_HASHS where applicable.

Version 1.37. Tagged as 'T1ToFont-1_37'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 * Convert a Mac or PC format Type-1 font into a plain
 * type-1 font.  The Mac format uses the resource
 * fork of the file to carry binary data for the
 * eexec portion of the description.  Each record
 * in the resource file carries two bytes (after the
 * length word) indicating what the record contains.
 * The second byte is always 0.  The first contains:
 * 
 *   1: the record contains ASCII text, with \r instead
 *      of \n to separate lines.
 *   2: the record contains binary, which should be
 *      output as pairs of hex digits.
 *   5: terminator - no more records.
 *
 * This is based on looking at one font!  There may
 * be other record types (3 and 4?)
 */

#include <stdio.h>
#include <string.h>
#include <setjmp.h>
#include "frontend.h"

#define TRUE 1
#define FALSE 0

static int lastBinary = FALSE;
static int position = 0;

static jmp_buf jmp;

/* Break binary output into lines after this
 * many hex pairs
 */

#define BREAK 32

/* For hex conversion */

static char *tab = "0123456789abcdef";


static int readLongBigEndian (FILE *f)	  /* for the MAC */
{
    int i, r = 0;
    for (i = 0; i < 4; i++)
    {
	int c = getc(f);
	
	if (c == EOF)
	{
	    longjmp(jmp, 1);
	}

	r = (r << 8) | (c & 0xff);
    }
	
    return r;
}

int readLongLittleEndian (FILE *f)        /* for the PC */
{
    int i, r = 0;
    for (i = 0; i < 4; i++)
    {
	int c = getc(f);
	
	if (c == EOF)
	{
	    longjmp(jmp, 1);
	}

	r |= (c << (i*8));
    }
	
    return r;
}


static void readAscii (FILE *in, FILE *out, int len)
{
    if (lastBinary && position > 0)
	putc('\n', out);
    lastBinary = FALSE;
    position = 0;
    while (len--)
    {
	int b = fgetc(in);
	if (b == EOF)
	    longjmp(jmp, 2);
	if (b == '\r')
	    b = '\n';
	putc(b, out);
    }
}

static void readBinary (FILE *in, FILE *out, int len)
{
    int i;
    for (i = 0; i < len; i++)
    {
	int b = fgetc(in);
	if (b == EOF)
	    longjmp(jmp, 3);
	putc(tab[(b >> 4) & 0xF], out);
	putc(tab[b & 0xF], out);
	if (++position == BREAK)
	{
	    putc('\n', out);
	    position = 0;
	}
    }
    lastBinary = TRUE;
}


/*
 * If anything goes wrong, just return FALSE.
 */

int preprocess_mac (char *mac, char *type1)
{
    FILE *in, *out;
    int word;
    int byte1, byte2;

    if ((in = fopen(mac, "r")) == NULL)
	return FALSE;
    if ((out = fopen(type1, "w")) == NULL)
    {
	fclose(in);
	return FALSE;
    }

   if (setjmp(jmp) != 0)
   {
       fclose(in);
       fclose(out);
       return FALSE;
   }

    /* Skip header */
    word = readLongBigEndian(in);
    fseek (in, word, 0);
 
    while (1)
    {
	word = readLongBigEndian(in);
	byte1 = getc(in);
	byte2 = getc(in);

	if (byte1 == EOF || byte2 == EOF)
	    longjmp(jmp, 4);

	switch (byte1)
	{
	case 1:
	    readAscii(in, out, word - 2);
	    break;
	case 2:
	    readBinary(in, out, word - 2);
	    break;
	case 5:
	    fclose(in);
	    fclose(out);
	    return TRUE;

	/* Ignore unknown segments types, and hope! */
	}
    }
    /*NOTREACHED*/
}


int preprocess_pc (char *pc, char *type1)
{
    FILE *in, *out;
    int word;
    int byte1, byte2;

    if ((in = fopen(pc, "r")) == NULL)
	return FALSE;
    if ((out = fopen(type1, "w")) == NULL)
    {
	fclose(in);
	return FALSE;
    }

    if (setjmp(jmp) != 0)
    {
	fclose(in);
	fclose(out);
	return FALSE;
    }

    while (1)
    {
	byte1 = getc(in);
	byte2 = getc(in);

	if (byte1 == EOF || byte2 == EOF)
	    longjmp(jmp, 4);

	switch (byte2)
	{
	case 1:
	    word = readLongLittleEndian(in);
	    readAscii(in, out, word);
	    break;
	case 2:
	    word = readLongLittleEndian(in);
	    readBinary(in, out, word);
	    break;
	case 3:
	    fclose(in);
	    fclose(out);
	    return TRUE;

	/* Ignore unknown segments types, and hope! */
	}
    }
    /*NOTREACHED*/
}


int guesstype (char *file)
{
    int c;
    FILE *f = fopen(file, "r");
    if (!f)
	return FILETYPE_TYPE1;
    c = getc(f);
    if (c == EOF)
    {
	fclose(f);
	return FILETYPE_TYPE1;
    }
    else if (c == '%')
    {
	fclose(f);
	return FILETYPE_TYPE1;
    }
    else if (c == 128)
    {
	fclose(f);
	return FILETYPE_PC;
    }
    else
    {
	/* Check for MAC more complicated */
	int offset;
	if (setjmp(jmp) != 0)
	{
	    fclose(f);
	    return FILETYPE_TYPE1;
	}
	if (fseek(f, 0, 0) != 0)
	    longjmp(jmp, 1);
	offset = readLongBigEndian(f) + 2;
	if (fseek(f, offset, 1) != 0)
	    longjmp(jmp, 2);
	c = getc(f);
	fclose(f);
	if (c == '%')
	    return FILETYPE_MAC;
	else
	    return FILETYPE_TYPE1;
    }
}
@


4.1
log
@Initial revision
@
text
@d140 1
a140 1
    char byte1, byte2;
d194 1
a194 1
    char byte1, byte2;
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
