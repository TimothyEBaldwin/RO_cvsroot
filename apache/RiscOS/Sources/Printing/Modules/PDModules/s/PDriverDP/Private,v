head	4.7;
access;
symbols
	PDModules-4_64:4.7
	PDModules-4_63:4.7
	PDModules-4_62:4.7
	PDModules-4_61:4.7
	PDModules-4_60:4.7
	PDModules-4_59:4.7
	PDModules-4_58:4.7
	PDModules-4_57:4.7
	PDModules-4_56:4.7
	PDModules-4_55:4.7
	PDModules-4_54:4.7
	PDModules-4_53:4.7
	PDModules-4_52:4.7
	PDModules-4_51:4.7
	PDModules-4_50:4.7
	PDModules-4_49:4.7
	PDModules-4_48:4.7
	PDModules-4_47:4.6
	PDModules-4_46:4.5
	kbracey_32bit_merge:4.4.2.2
	PDModules-4_45:4.5
	PDModules-4_44-4_1_2_7:4.4.2.2
	PDModules-4_44-4_1_2_6:4.4.2.2
	PDModules-4_44-4_1_2_5:4.4.2.2
	PDModules-4_44-4_1_2_4:4.4.2.2
	PDModules-4_44-4_1_2_3:4.4.2.2
	PDModules-4_44-4_1_2_2:4.4.2.2
	PDModules-4_44-4_1_2_1:4.4.2.1
	kbracey_32bit:4.4.0.2
	kbracey_32bit_bp:4.4
	dellis_autobuild_BaseSW:4.4
	Ursula_merge:4.1.7.3
	PDModules-4_44:4.4
	sbrodie_sedwards_16Mar2000:4.4
	dcotton_autobuild_BaseSW:4.5
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.3
	Ursula_RiscPC:4.1.7.3.0.4
	rthornb_UrsulaBuild-19Aug1998:4.1.7.3
	UrsulaBuild_FinalSoftload:4.1.7.3
	rthornb_UrsulaBuild-12Aug1998:4.1.7.3
	aglover_UrsulaBuild-05Aug1998:4.1.7.3
	rthornb_UrsulaBuild-29Jul1998:4.1.7.3
	rthornb_UrsulaBuild-22Jul1998:4.1.7.3
	hsimons_BOCA-1_2-Release:4.1.7.3
	rthornb_UrsulaBuild-15Jul1998:4.1.7.3
	rthornb_UrsulaBuild-07Jul1998:4.1.7.3
	rthornb_UrsulaBuild-17Jun1998:4.1.7.3
	rthornb_UrsulaBuild-03Jun1998:4.1.7.3
	rthornb_UrsulaBuild-27May1998:4.1.7.3
	rthornb_UrsulaBuild-21May1998:4.1.7.3
	rthornb_UrsulaBuild_01May1998:4.1.7.3
	afrost_NC2_Generic:4.1.7.3
	afrost_Funai01-33:4.1.7.3
	Ursula:4.1.7.3.0.2
	Ursula_bp:4.1.7.3
	Ursula_31Mar1998:4.4
	Spinner_RCA116:4.1.7.3
	Spinner_B20_2:4.1.7.2
	Spinner_19_3:4.1.7.2
	Spinner_B18:4.1.7.2
	Spinner_B17:4.1.7.2
	Spinner_B15:4.1.7.2
	Spinner_B14:4.1.7.2
	Spinner_B13:4.1.7.2
	Spinner_B12:4.1.7.2
	Spin_merge_28May97:4.1.7.1
	Spinner_B10:4.1.7.2
	Spin_merge_16May97:4.1.7.1
	Daytona:4.3.0.4
	Daytona_bp:4.3
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.2
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2002.12.17.19.05.24;	author srevill;	state Exp;
branches;
next	4.6;

4.6
date	2002.12.05.20.45.09;	author srevill;	state Exp;
branches;
next	4.5;

4.5
date	2001.01.09.13.59.39;	author sbrodie;	state Exp;
branches;
next	4.4;

4.4
date	97.05.28.12.18.38;	author kbracey;	state Exp;
branches
	4.4.2.1;
next	4.3;

4.3
date	97.05.02.14.06.41;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.01.20.16.57.10;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.48.38;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.4.2.1
date	2000.10.18.11.32.02;	author sbrodie;	state Exp;
branches;
next	4.4.2.2;

4.4.2.2
date	2000.11.24.13.27.32;	author sbrodie;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.48.38;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.05.09;	author nturton;	state Exp;
branches
	4.1.3.1.2.1;
next	4.1.3.2;

4.1.3.2
date	97.05.01.15.07.03;	author kbracey;	state Exp;
branches;
next	;

4.1.3.1.2.1
date	97.04.30.17.03.19;	author kbracey;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.27.34;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.31.15;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.05.22.10.46.51;	author jcoxhead;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.08.19.14.14.01;	author arodger;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Build change,no code change.
You no longer have to do all that directory renaming covered in the
checkin message with 4.47,these are now ready to eat straight out of
the tin.

Version 4.48. Tagged as 'PDModules-4_48'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.PDriverDP.Private


;aims to dump chunk of about 32 rows, subject to remaining height
;and chunk being multiple of dump depth (except last chunk)
;
;entry: R0-R3,R5-R8 set up for CallPDumperForJob
;       R4=height remaining for output
;exit   R4 updated, R0 updated as necessary
;
dump_one_chunk
        Push    "R5-R9,LR"
        LDRB   R9,job_dump_depth
  Debug Privatemjs,"dump_one_chunk, dump_depth = ",R9
00      CMP    R9,#32
        MOVLT  R9,R9,LSL #1
        BLT    %BT00
  Debug Privatemjs,"  chunk_depth,remaining_height = ",R9,R4
        Push   "R4,R9"
        CMP    R4,R9
        MOVGE  R4,R9
  Debug Privatemjs,"  chosen depth for dumper = ",R4
        MOV    R9,#PDumperReason_OutputDump
        BL     CallPDumperForJob
        Pull   "R4,R9"
        BVS    %FT03
        CMP    R4,R9
        MOVLT  R4,R9
        SUBS   R4,R4,R9     ;new remaining height
        BEQ    %FT03
      [ Libra1
;convert R5 from pixels to bytes
        LDRB   R8,job_strip_type
        CMP    R8,#4
        MOVEQ  R5,R5,LSL #1
        CMP    R8,#5
        MOVEQ  R5,R5,LSL #2
      ]
        MUL    R8,R9,R5     ;bytes in one dump_depth
        LDRB   R6,job_no_passes
        CMP    R6,#1
        BLE    %FT02
        Push   "R0"
01
        LDR    R7,[R0]
        ADD    R7,R7,R8     ;adjust each pass pixel pointer
        STR    R7,[R0],#4
        SUBS   R6,R6,#1
        BGT    %BT01
        LDR    R7,[R0]
        ADD    R7,R7,R8,LSL #2 ;adjust 32bpp buffer pixel pointer
        STR    R7,[R0]
        Pull   "R0"
        B      %FT03
02
        ADD    R0,R0,R8     ;adjust strip pixel pointer
03
        Pull   "R5-R9,PC"


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; the main dump routine!
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

dump_current_buffer ROUT
        Push    "r0-r8, lr"

        BL      restore_output_state
        MOVVC   r0, #SpriteReason_RemoveLeftHandWastage
        ADRVC   r2, job_linebuffer
        BLVC    myspriteop

        BVS     %FT99

        LDRB    r4, job_no_passes
  Debug Privatemjs,"dump_current_buffer, passes=",r4
        CMP     r4, #1
        BLE     %FT00
        ADD     r4,r4,#1  ;one extra for 32bpp buffer
;use job_DrawMatrix as buffer to place pointers to multiple pass sprites
        ADR     r0, job_DrawMatrix
        ADR     r3, job_linebuffer+12
01
        MOV     r2, r3
        BL      get_sprite_address
        BVS     %FT99

        LDR     r5, [r2, #spImage]
        ADD     r5, r5, r2
        STR     r5, [r0], #4
        ADD     r3, r3, #12
        SUBS    r4, r4, #1
        BGT     %BT01
        SUB     r3,r3,#12  ;step back from 32bpp buffer
        MOV     r2, r3
        BL      get_sprite_address
        ADR     r0, job_DrawMatrix
        B       %FT02

00
        ADR     r2, job_linebuffer              ;; <== ADDED BY NRAINE, 2-May-89
        BL      get_sprite_address              ;; BVS moved to catch more cases
        BVS     %FT99

        LDR     r0, [r2, #spImage]
        ADD     r0, r0, r2
02
        LDR     r4, [r2, #spHeight]             ;; rows in buffer - 1
        ADD     r4, r4, #1                      ;; <== ADDED BY NRAINE, 20-Apr-89

        LDR     r5, job_currentline
        LDR     lr, job_totalheight
        SUB     r5, lr, r5                      ; rows left to do

        CMP     r5, r4                          ; r4 = number of rows to print this time
        MOVLT   r4, r5

        LDR     r5, [r2, #spWidth]              ; r5 = sprite width in words
        ADD     r5, r5, #1

                                                ; r0 -> sprite pixel data for a single pass plot
        LDR     r1, jobhandle                   ; r1  = file handle for job
        LDRB    r2, job_strip_type              ; r2  = strip type
        LDR     r3, job_linelength              ; r3  = number of columns to output
        [ Libra1
        LDRB    LR, job_strip_type
        CMP     LR, #4
        MOVEQ   R5, R5, LSL #1
        CMPNE   LR, #5
        MOVNE   R5, R5, LSL #2
        |
        MOV     r5, r5, LSL #2                  ; r5  = no of bytes in one row
        ]
        LDR     r6, job_halftoneX               ; r6  = halftone width in byte 0, halftone height in byte 1
        ADR     r7, job_dump_depth              ; r7 -> job workspace
        ADR     r8, job_pdumper_word            ; r8  = pdumper private word
03
;  Debug Privatemjs,"dump_one_chunk ptr step w h +",r0,r2,r3,r4,r5
        BL      dump_one_chunk
        BVS     %FT99

;check escape state - drop into user mode so that callbacks get a chance to go off

        Push    r1
        WritePSRc USR_mode,r1
        SWI     XOS_ReadEscapeState
        SavePSR r1
        SWI     XOS_EnterOS ;svc mode
        TST     r1,#C_bit
        Pull    r1
        BNE     %FT98
        CMP     R4,#0
        BNE     %BT03
        BL      redirect_output
99      STRVS   r0, [stack]
        Pull    "r0-r8, pc"

98
        SETV
        Pull    "r0-r8, pc"

; **********************************************************
; now get all the common subroutines

      [ debug
        InsertNDRDebugRoutines
      ]
        LNK     s.PDriverDP.Private2
@


4.6
log
@Changed to use objasm to avoid any LDR rN,[rN],#0 problems
Changed to use shared Makefiles
Numerous small 32 bit conversion improvements
Bugfix to PDriverPS,it was pulling LR not PC - this has been the case for
many years so not sure how it ever worked.
Due to a bug in objasm 3.27 this checkin will infact not build directly.
You must first
 - rename the PDriverDP dir to PDriverDP2
 - rename the PDriverPS dir to PDriverPS2
 - move the 2 source files of the same name up a directory
checked in in this way to minimise messing in CVS.

Version 4.47. Tagged as 'PDModules-4_47'
@
text
@d182 1
a182 1
        LNK     s.PDriverDP2.Private2
@


4.5
log
@  Merge of 32-bit branch.
Detail:
  These modules are now thought to work.
Admin:
  This module has received some testing of both 26-bit and 32-bit
    builds and is believed to function correctly.

Version 4.45. Tagged as 'PDModules-4_45'
@
text
@d182 1
a182 1
        LNK     s.PDriverDP.Private2
@


4.4
log
@Spinner branch taken
@
text
@d158 2
a159 5
        STMFD   SP,{LR}^    ;preserve user LR
        SUB     SP,SP,#4    ;couldn't use write back in banked STMFD
        TEQP    PC,#0       ;user mode
        MOV     R0,R0       ;NOP

d161 1
a161 2
        BCS     %FT98

d163 3
a165 4
        LDMFD   SP,{LR}^    ;restore user LR
        MOV     R0,R0       ;NOP
        ADD     SP,SP,#4

d168 1
a168 1
        BL      redirect_output         
a172 5
        SWI     XOS_EnterOS ;svc mode
        LDMFD   SP,{LR}^    ;restore user LR
        MOV     R0,R0       ;NOP
        ADD     SP,SP,#4

@


4.4.2.1
log
@  First attempt at 32-bit compatible modules.
Admin:
  Tested that modules build 26-bit and 32-bit.
  Requires HdrSrc-1_05 or later.

Version 4.44, 4.1.2.1. Tagged as 'PDModules-4_44-4_1_2_1'
@
text
@d158 5
a162 2
        Push    r1
        WritePSRc USR_mode,r1
d167 4
a171 1
        Pull    r1
d173 1
a173 1
        BL      redirect_output
d179 3
@


4.4.2.2
log
@  Lots of fixes.
Detail:
  Several stack imbalances and missing conditions on instructions fixed.
  Some flag removal code sequences improved (RSB rn,pc,pc:SUB rn,lr,rn)
Admin:
  Built both 26 and 32-bit versions - neither tested.

Version 4.44, 4.1.2.2. Tagged as 'PDModules-4_44-4_1_2_2'
@
text
@d161 2
a162 1
        SavePSR r1
d164 1
a164 1
        TST     r1,#C_bit
a165 2
        BNE     %FT98
        CMP     R4,#0
d172 2
@


4.3
log
@Version RO_3_71 merged
@
text
@d137 1
a137 5
        [ Libra1
        LDR     r2, job_strip_type              ; r2  = strip type in byte 0, no_passes in byte 2
        |
        LDRB    r2, job_strip_type              ; r2  = strip type in byte 0, no_passes in byte 2
        ]
d158 2
a159 1

d161 1
a161 1
        MOV     R0,R0
d167 4
d173 1
a173 1
        BL      redirect_output
d179 4
@


4.2
log
@Module merged
@
text
@a162 7
;NOPs (MOV R0,R0) extra to ARM advice around here are just in case for prototype StrongARM

   MOV R0,R0
   MOV R0,R0

        STMFD   SP,{LR}^    ;preserve user LR
        SUB     SP,SP,#4    ;couldn't use write back in banked STMFD
d164 1
a164 1
        MOV     R0,R0       ;NOP
a169 5
        LDMFD   SP,{LR}^    ;restore user LR
        MOV     R0,R0       ;NOP
   MOV R0,R0
        ADD     SP,SP,#4

d172 1
a172 1
        BL      redirect_output         
a177 5
        LDMFD   SP,{LR}^    ;restore user LR
        MOV     R0,R0       ;NOP
   MOV R0,R0
        ADD     SP,SP,#4

@


4.1
log
@Initial revision
@
text
@d18 56
d90 1
d93 2
d108 3
a134 1
        Push    "r9"
d155 30
a184 5
        MOV     r9, #PDumperReason_OutputDump
        BL      CallPDumperForJob
        Pull    "r9"                            ; preserving r9
        BLVC    redirect_output
                     
d186 10
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@a17 56
;aims to dump chunk of about 32 rows, subject to remaining height
;and chunk being multiple of dump depth (except last chunk)
;
;entry: R0-R3,R5-R8 set up for CallPDumperForJob
;       R4=height remaining for output
;exit   R4 updated, R0 updated as necessary
;
dump_one_chunk
        Push    "R5-R9,LR"
        LDRB   R9,job_dump_depth
  Debug Privatemjs,"dump_one_chunk, dump_depth = ",R9
00      CMP    R9,#32
        MOVLT  R9,R9,LSL #1
        BLT    %BT00
  Debug Privatemjs,"  chunk_depth,remaining_height = ",R9,R4
        Push   "R4,R9"
        CMP    R4,R9
        MOVGE  R4,R9
  Debug Privatemjs,"  chosen depth for dumper = ",R4
        MOV    R9,#PDumperReason_OutputDump
        BL     CallPDumperForJob
        Pull   "R4,R9"
        BVS    %FT03
        CMP    R4,R9
        MOVLT  R4,R9
        SUBS   R4,R4,R9     ;new remaining height
        BEQ    %FT03
      [ Libra1
;convert R5 from pixels to bytes
        LDRB   R8,job_strip_type
        CMP    R8,#4
        MOVEQ  R5,R5,LSL #1
        CMP    R8,#5
        MOVEQ  R5,R5,LSL #2
      ]
        MUL    R8,R9,R5     ;bytes in one dump_depth
        LDRB   R6,job_no_passes
        CMP    R6,#1
        BLE    %FT02
        Push   "R0"
01
        LDR    R7,[R0]
        ADD    R7,R7,R8     ;adjust each pass pixel pointer
        STR    R7,[R0],#4
        SUBS   R6,R6,#1
        BGT    %BT01
        LDR    R7,[R0]
        ADD    R7,R7,R8,LSL #2 ;adjust 32bpp buffer pixel pointer
        STR    R7,[R0]
        Pull   "R0"
        B      %FT03
02
        ADD    R0,R0,R8     ;adjust strip pixel pointer
03
        Pull   "R5-R9,PC"

a33 1
  Debug Privatemjs,"dump_current_buffer, passes=",r4
a35 2
        ADD     r4,r4,#1  ;one extra for 32bpp buffer
;use job_DrawMatrix as buffer to place pointers to multiple pass sprites
a48 3
        SUB     r3,r3,#12  ;step back from 32bpp buffer
        MOV     r2, r3
        BL      get_sprite_address
d73 1
d94 5
a98 23
03
;  Debug Privatemjs,"dump_one_chunk ptr step w h +",r0,r2,r3,r4,r5
        BL      dump_one_chunk
        BVS     %FT99

;check escape state - drop into user mode so that callbacks get a chance to go off

        STMFD   SP,{LR}^    ;preserve user LR
        SUB     SP,SP,#4    ;couldn't use write back in banked STMFD
        TEQP    PC,#0       ;user mode
        MOV     R0,R0       ;NOP

        SWI     XOS_ReadEscapeState
        BCS     %FT98

        SWI     XOS_EnterOS ;svc mode
        LDMFD   SP,{LR}^    ;restore user LR
        MOV     R0,R0       ;NOP
        ADD     SP,SP,#4

        CMP     R4,#0
        BNE     %BT03
        BL      redirect_output         
a99 9
        Pull    "r0-r8, pc"

98
        SWI     XOS_EnterOS ;svc mode
        LDMFD   SP,{LR}^    ;restore user LR
        MOV     R0,R0       ;NOP
        ADD     SP,SP,#4

        SETV
@


4.1.7.2
log
@   Just pass in job_strip_type to the PDumper: it doesn't use anything else
anyway. (Used to pass in 4 bytes from that location.)
@
text
@d137 5
a141 1
        LDRB    r2, job_strip_type              ; r2  = strip type
@


4.1.7.3
log
@Added call PDriver_Command not supported in ps and passed to the dumper in DP
@
text
@a16 9
;AR 	this simply calls the dumper with the Command Reason Code
command
	Push	"r11,lr"
		
	MOV	r11, #PDumperReason_Command
	BL	CallPDumper
	
	Pull	"r11,pc"

@


4.1.5.1
log
@Import from SrcFiler
@
text
@a17 56
;aims to dump chunk of about 32 rows, subject to remaining height
;and chunk being multiple of dump depth (except last chunk)
;
;entry: R0-R3,R5-R8 set up for CallPDumperForJob
;       R4=height remaining for output
;exit   R4 updated, R0 updated as necessary
;
dump_one_chunk
        Push    "R5-R9,LR"
        LDRB   R9,job_dump_depth
  Debug Privatemjs,"dump_one_chunk, dump_depth = ",R9
00      CMP    R9,#32
        MOVLT  R9,R9,LSL #1
        BLT    %BT00
  Debug Privatemjs,"  chunk_depth,remaining_height = ",R9,R4
        Push   "R4,R9"
        CMP    R4,R9
        MOVGE  R4,R9
  Debug Privatemjs,"  chosen depth for dumper = ",R4
        MOV    R9,#PDumperReason_OutputDump
        BL     CallPDumperForJob
        Pull   "R4,R9"
        BVS    %FT03
        CMP    R4,R9
        MOVLT  R4,R9
        SUBS   R4,R4,R9     ;new remaining height
        BEQ    %FT03
      [ Libra1
;convert R5 from pixels to bytes
        LDRB   R8,job_strip_type
        CMP    R8,#4
        MOVEQ  R5,R5,LSL #1
        CMP    R8,#5
        MOVEQ  R5,R5,LSL #2
      ]
        MUL    R8,R9,R5     ;bytes in one dump_depth
        LDRB   R6,job_no_passes
        CMP    R6,#1
        BLE    %FT02
        Push   "R0"
01
        LDR    R7,[R0]
        ADD    R7,R7,R8     ;adjust each pass pixel pointer
        STR    R7,[R0],#4
        SUBS   R6,R6,#1
        BGT    %BT01
        LDR    R7,[R0]
        ADD    R7,R7,R8,LSL #2 ;adjust 32bpp buffer pixel pointer
        STR    R7,[R0]
        Pull   "R0"
        B      %FT03
02
        ADD    R0,R0,R8     ;adjust strip pixel pointer
03
        Pull   "R5-R9,PC"

a33 1
  Debug Privatemjs,"dump_current_buffer, passes=",r4
a35 2
        ADD     r4,r4,#1  ;one extra for 32bpp buffer
;use job_DrawMatrix as buffer to place pointers to multiple pass sprites
a48 3
        SUB     r3,r3,#12  ;step back from 32bpp buffer
        MOV     r2, r3
        BL      get_sprite_address
d73 1
d94 5
a98 23
03
;  Debug Privatemjs,"dump_one_chunk ptr step w h +",r0,r2,r3,r4,r5
        BL      dump_one_chunk
        BVS     %FT99

;check escape state - drop into user mode so that callbacks get a chance to go off

        STMFD   SP,{LR}^    ;preserve user LR
        SUB     SP,SP,#4    ;couldn't use write back in banked STMFD
        TEQP    PC,#0       ;user mode
        MOV     R0,R0       ;NOP

        SWI     XOS_ReadEscapeState
        BCS     %FT98

        SWI     XOS_EnterOS ;svc mode
        LDMFD   SP,{LR}^    ;restore user LR
        MOV     R0,R0       ;NOP
        ADD     SP,SP,#4

        CMP     R4,#0
        BNE     %BT03
        BL      redirect_output         
a99 9
        Pull    "r0-r8, pc"

98
        SWI     XOS_EnterOS ;svc mode
        LDMFD   SP,{LR}^    ;restore user LR
        MOV     R0,R0       ;NOP
        ADD     SP,SP,#4

        SETV
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a17 56
;aims to dump chunk of about 32 rows, subject to remaining height
;and chunk being multiple of dump depth (except last chunk)
;
;entry: R0-R3,R5-R8 set up for CallPDumperForJob
;       R4=height remaining for output
;exit   R4 updated, R0 updated as necessary
;
dump_one_chunk
        Push    "R5-R9,LR"
        LDRB   R9,job_dump_depth
  Debug Privatemjs,"dump_one_chunk, dump_depth = ",R9
00      CMP    R9,#32
        MOVLT  R9,R9,LSL #1
        BLT    %BT00
  Debug Privatemjs,"  chunk_depth,remaining_height = ",R9,R4
        Push   "R4,R9"
        CMP    R4,R9
        MOVGE  R4,R9
  Debug Privatemjs,"  chosen depth for dumper = ",R4
        MOV    R9,#PDumperReason_OutputDump
        BL     CallPDumperForJob
        Pull   "R4,R9"
        BVS    %FT03
        CMP    R4,R9
        MOVLT  R4,R9
        SUBS   R4,R4,R9     ;new remaining height
        BEQ    %FT03
      [ Libra1
;convert R5 from pixels to bytes
        LDRB   R8,job_strip_type
        CMP    R8,#4
        MOVEQ  R5,R5,LSL #1
        CMP    R8,#5
        MOVEQ  R5,R5,LSL #2
      ]
        MUL    R8,R9,R5     ;bytes in one dump_depth
        LDRB   R6,job_no_passes
        CMP    R6,#1
        BLE    %FT02
        Push   "R0"
01
        LDR    R7,[R0]
        ADD    R7,R7,R8     ;adjust each pass pixel pointer
        STR    R7,[R0],#4
        SUBS   R6,R6,#1
        BGT    %BT01
        LDR    R7,[R0]
        ADD    R7,R7,R8,LSL #2 ;adjust 32bpp buffer pixel pointer
        STR    R7,[R0]
        Pull   "R0"
        B      %FT03
02
        ADD    R0,R0,R8     ;adjust strip pixel pointer
03
        Pull   "R5-R9,PC"

a33 1
  Debug Privatemjs,"dump_current_buffer, passes=",r4
a35 2
        ADD     r4,r4,#1  ;one extra for 32bpp buffer
;use job_DrawMatrix as buffer to place pointers to multiple pass sprites
a48 3
        SUB     r3,r3,#12  ;step back from 32bpp buffer
        MOV     r2, r3
        BL      get_sprite_address
d73 1
d94 5
a98 30
03
;  Debug Privatemjs,"dump_one_chunk ptr step w h +",r0,r2,r3,r4,r5
        BL      dump_one_chunk
        BVS     %FT99

;check escape state - drop into user mode so that callbacks get a chance to go off


;NOPs (MOV R0,R0) extra to ARM advice around here are just in case for prototype StrongARM

   MOV R0,R0
   MOV R0,R0

        STMFD   SP,{LR}^    ;preserve user LR
        SUB     SP,SP,#4    ;couldn't use write back in banked STMFD
        TEQP    PC,#0       ;user mode
        MOV     R0,R0       ;NOP

        SWI     XOS_ReadEscapeState
        BCS     %FT98

        SWI     XOS_EnterOS ;svc mode
        LDMFD   SP,{LR}^    ;restore user LR
        MOV     R0,R0       ;NOP
   MOV R0,R0
        ADD     SP,SP,#4

        CMP     R4,#0
        BNE     %BT03
        BL      redirect_output         
a99 10
        Pull    "r0-r8, pc"

98
        SWI     XOS_EnterOS ;svc mode
        LDMFD   SP,{LR}^    ;restore user LR
        MOV     R0,R0       ;NOP
   MOV R0,R0
        ADD     SP,SP,#4

        SETV
@


4.1.3.2
log
@Version RO_3_71 taken
@
text
@d163 7
d171 1
a171 1
        MOV     R0,R0
d177 5
d184 1
a184 1
        BL      redirect_output
d190 5
@


4.1.3.1.2.1
log
@Merged from 3.70 CD
@
text
@d163 7
d171 1
a171 1
        MOV     R0,R0
d177 5
d184 1
a184 1
        BL      redirect_output
d190 5
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
