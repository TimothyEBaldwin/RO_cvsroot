head	4.2;
access;
symbols
	PDModules-4_64:4.2
	PDModules-4_63:4.2
	PDModules-4_62:4.2
	PDModules-4_61:4.2
	PDModules-4_60:4.2
	PDModules-4_59:4.2
	PDModules-4_58:4.2
	PDModules-4_57:4.2
	PDModules-4_56:4.2
	PDModules-4_55:4.2
	PDModules-4_54:4.2
	PDModules-4_53:4.2
	PDModules-4_52:4.2
	PDModules-4_51:4.2
	PDModules-4_50:4.2
	PDModules-4_49:4.2
	PDModules-4_48:4.2
	PDModules-4_47:4.2
	PDModules-4_46:4.2
	kbracey_32bit_merge:4.1.4.3
	PDModules-4_45:4.2
	PDModules-4_44-4_1_2_7:4.1.4.3
	PDModules-4_44-4_1_2_6:4.1.4.3
	PDModules-4_44-4_1_2_5:4.1.4.3
	PDModules-4_44-4_1_2_4:4.1.4.3
	PDModules-4_44-4_1_2_3:4.1.4.3
	PDModules-4_44-4_1_2_2:4.1.4.2
	PDModules-4_44-4_1_2_1:4.1.4.1
	kbracey_32bit:4.1.0.4
	kbracey_32bit_bp:4.1
	dellis_autobuild_BaseSW:4.1
	Ursula_merge:4.1.7.1
	PDModules-4_44:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1
	Ursula_RiscPC:4.1.7.1.0.6
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1
	UrsulaBuild_FinalSoftload:4.1.7.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Ursula:4.1.7.1.0.4
	Ursula_bp:4.1.7.1
	Ursula_31Mar1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spin_merge_28May97:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_16May97:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2001.01.09.13.59.39;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.48.39;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.48.39;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.05.18;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	2000.10.18.11.32.02;	author sbrodie;	state Exp;
branches;
next	4.1.4.2;

4.1.4.2
date	2000.11.24.13.27.32;	author sbrodie;	state Exp;
branches;
next	4.1.4.3;

4.1.4.3
date	2000.11.30.12.13.39;	author sbrodie;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.27.41;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.31.21;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@  Merge of 32-bit branch.
Detail:
  These modules are now thought to work.
Admin:
  This module has received some testing of both 26-bit and 32-bit
    builds and is believed to function correctly.

Version 4.45. Tagged as 'PDModules-4_45'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.PDriverDP.Vdu5

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; printer specific code to deal with a VDU 5 character. On
; some printer drivers (e.g. the PostScript one, to avoid
; generating massive numbers of "show" commands), this will
; usually result in the characters concerned being buffered up
; until they have to be output; other printer drivers will
; simply deal with characters as and when they arrive.
;   Note that this routine is NOT expected to try to change
; the graphics cursor position - this will be done by the
; printer dependent code. If it buffers characters, it should
; print them separated by the amount specified in
; 'vdu5autoadvance'.
; Entry: R0 holds the character.
;        R1 holds the X co-ordinate of the top left corner of
;           the character. It is in OS units, relative to the
;           bottom left corner of the user's box.
;        R2 holds the Y co-ordinate of the top left corner of
;           the character. It is also in OS units, relative to
;           the bottom left corner of the user's box.
;             It should be noted that this is NOT the same as
;           the Y co-ordinate of the graphics cursor, but one
;           screen pixel line above it. (Things are done this
;           way essentially because the top left corner of the
;           character is a resolution independent concept,
;           whereas the bottom left corner of the top left
;           pixel of the character is not. PostScript and
;           similar printer drivers can use this position
;           directly. Dot matrix and similar printer drivers
;           which are going to invoke the VDU drivers to print
;           the character to a sprite will need to subtract
;           one sprite pixel line from this Y co-ordinate to
;           get the appropriate graphics cursor position.)
;        R10 is the file handle for the print job.
;        R11 = job's workspace pointer.
;        'vdu5charsize' (2 words) contains the required VDU 5
;           character size, in OS units (not pixels, as
;           supplied to VDU 23,17,7,...).
;        'vdu5autoadvance' (2 words) contains the required VDU
;           5 character advance, again in OS units. If the
;           printer driver is buffering characters up, it only
;           needs to remember the first character's position,
;           then move by this amount between characters.
;        The correct colour has been set up (note that this
;           makes it a very good idea for printer drivers that
;           buffer their output to ensure they only produce
;           output for one colour change if a large number of
;           identical colour changes occur in succession).
;        Printer drivers which wish to buffer VDU 5 characters
;           may use 'textbuffer', a buffer of 'textbufferlen'
;           (which is a constant) bytes, and 'textbufferpos'
;           (a byte variable, containing the number of
;           characters currently in 'textbuffer'), provided
;           they take care to empty the buffer whenever
;           'vdu5_flush' (see below) is called, and that they
;           take care not to overfill the buffer. They may
;           also assume that 'textbufferpos' is zero when
;           'vdu5_char' is called for the first time, and that
;           its value and the valid characters in the buffer
;           are preserved between calls to 'vdu_char' and
;           'vdu5_flush'.
; Exit:  R0 to R3 may be corrupted.
;        All other registers preserved.
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

vdu5_char ROUT
          Push     "r0-r3, lr"
          CLRV
          LDRB     lr, disabled
          TST      lr, #disabled_nullclip
          Pull    "r0-r3, pc", NE

          LDRB     r3, passthrough             ; need to allow SpriteExtend
          ORR      lr, r3, #passthrough_spr    ; to do PlotCharScaled
          STRB     lr, passthrough

          Debuga   Vdu5,"Vdu5 priting",R0
          Debuga   Vdu5," at",R1
          Debug    Vdu5,",",R2

     ; set the text size:

          ADR       r0, set_text_width_string
          BL        vdu_counted_string
          BVS       %FT99

          LDR       r0, vdu5charsize
          BL        XScale                        ; -> our OS units
          MOV       r0, r0, LSR #bufferpix_l2size ; -> our pixels

          Debuga    Vdu5,"Text size",R0

          BL        vdu_pair
          BVS       %FT99

          LDR       r0, vdu5charsize+4
          BL        YScale                        ; -> our OS units
          MOV       r0, r0, LSR #bufferpix_l2size ; -> our pixels

          Debug     Vdu5,",",R0

          BL        vdu_pair
          MOVVC     r0, #0
          BLVC      vdu_pair
          BVS       %FT99

 ; now calculate the position

          MOV       r0, r1, LSL #8
          BL        XScale
          LDR       lr, job_currentXoffset
          SUB       r0, r0, lr
          MOV       r1, r0, ASR #8
          MOV       r0, r2, LSL #8
          BL        YScale
          LDR       lr, job_currentYoffset
          SUB       r0, r0, lr
          MOV       r2, r0, ASR #8
          SUB       r2, r2, #1:SHL: bufferpix_l2size

          Debuga    Vdu5,"Move To",R1
          Debug     Vdu5,",",R2

          LDR       r0, =25+4*256
          BL        vdu_pair              ; MOVE...
          MOVVC     r0, r1
          BLVC      vdu_pair
          MOVVC     r0, r2
          BLVC      vdu_pair
          LDRVC     r0, [stack]
          BLVC      vdu_char

99        STRVS     r0, [stack]
          STRB      r3, passthrough
          Pull     "r0-r3, pc"
          LTORG

set_text_width_string = 4, 23, 17, 7, 6
          ALIGN

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; printer specific code to write a solid block character in
; the current (background) colour, to do a VDU 5 DELETE.
; Entry and exit conditions are as for 'vdu5_char', except:
;   (a) the background colour has been set up, not the
;       foreground.
;   (b) R0 is irrelevant on entry.
;   (c) the printer specific code is not allowed to buffer
;       DELETEs, and hence 'vdu5autoadvance' is irrelevant on
;       entry.
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

vdu5_delete  ROUT
        Push "r0, r3, lr"
        MOV   r0, #" "
        BL    vdu5_char
        LDRB  r3, passthrough
        ORR   lr, r3, #passthrough_spr
        STRB  lr, passthrough
        MOVVC r0, #127
        BLVC  vdu_char
        STRVS r0, [stack]
        STRB  r3, passthrough
        Pull "r0, r3, pc"

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; this printer specific call is of interest to printer drivers
; which try to buffer up VDU 5 characters in 'textbuffer' or
; elsewhere. It is called at the following points:
;   (a) when an intercepted call is going to (or is likely to)
;       produce some output, so that the VDU 5 characters must
;       be printed to get the overwriting order right.
;   (b) when any VDU control sequence is about to be obeyed.
;   (c) when a PDriver_DrawPage/PDriver_GetRectangle-supplied
;       rectangle is about to be finished.
; The printer specific code should respond by flushing any
; buffered VDU 5 characters to the printer and ensuring that
; 'textbufferpos' is set to zero.
;   If the printer driver does not use 'textbuffer' and/or
; 'textbufferpos' to buffer characters, it should provide a
; null implementation of this routine. It may safely assume
; that 'textbufferpos' is zero if none of its routines change
; it.
; Entry: R10 is the file handle for the print job.
;        R11 = job's workspace pointer.
; Exit:  All registers preserved (except R0 on an error).
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

vdu5_flush
        RETURNVC

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; this call informs the printer specific code that the
; definition of a VDU 5 character (or of the entire VDU 5
; character set) has changed, or at least may have changed. It
; is called for a specific character if that character is
; redefined, and is called for the entire character set
; whenever the printer driver turns interception of VDU calls
; on (as character definitions may have been changed while it
; was off). Note that this call is made to all existing print
; jobs under both these circumstances - not just the current
; print job.
; Entry: R1 = character that may have changed, or anything
;           else to indicate that all characters may have
;           changed.
;        R11 = job's workspace pointer.
; Exit:  All registers preserved. May not produce an error.
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

vdu5_changed
        RETURNVC

        END
@


4.1
log
@Initial revision
@
text
@d91 1
a91 1
   
d105 1
a105 1
        
d116 1
a116 1
   
d204 2
a205 1
vdu5_flush  Return
d225 2
a226 1
vdu5_changed Return
@


4.1.4.1
log
@  First attempt at 32-bit compatible modules.
Admin:
  Tested that modules build 26-bit and 32-bit.
  Requires HdrSrc-1_05 or later.

Version 4.44, 4.1.2.1. Tagged as 'PDModules-4_44-4_1_2_1'
@
text
@d91 1
a91 1

d105 1
a105 1

d116 1
a116 1

d204 1
a204 3
vdu5_flush
        CLRV
        Return
d224 1
a224 3
vdu5_changed
        CLRV
        Return
@


4.1.4.2
log
@  Lots of fixes.
Detail:
  Several stack imbalances and missing conditions on instructions fixed.
  Some flag removal code sequences improved (RSB rn,pc,pc:SUB rn,lr,rn)
Admin:
  Built both 26 and 32-bit versions - neither tested.

Version 4.44, 4.1.2.2. Tagged as 'PDModules-4_44-4_1_2_2'
@
text
@d206 1
a206 1
        MOV     pc, lr
d228 1
a228 1
        MOV     pc, lr
@


4.1.4.3
log
@  More fixes.
Detail:
  26-bit builds work again - a stack imbalance in PDriverDP has been fixed.
  Tidied up some nasty code that effected an EOR in a convoluted manner.  It
    now uses an EOR instruction instead of loads of TSTs and TEQP.
Admin:
  26-bit build tested very briefly - no longer dies.
  32-bit build dies still.

Version 4.44, 4.1.2.3. Tagged as 'PDModules-4_44-4_1_2_3'
@
text
@d205 2
a206 1
        RETURNVC
d227 2
a228 1
        RETURNVC
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
