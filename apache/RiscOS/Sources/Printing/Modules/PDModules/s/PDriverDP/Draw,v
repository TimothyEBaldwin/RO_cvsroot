head	4.2;
access;
symbols
	PDModules-4_64:4.2
	PDModules-4_63:4.2
	PDModules-4_62:4.2
	PDModules-4_61:4.2
	PDModules-4_60:4.2
	PDModules-4_59:4.2
	PDModules-4_58:4.2
	PDModules-4_57:4.2
	PDModules-4_56:4.2
	PDModules-4_55:4.2
	PDModules-4_54:4.2
	PDModules-4_53:4.2
	PDModules-4_52:4.2
	PDModules-4_51:4.1
	PDModules-4_50:4.1
	PDModules-4_49:4.1
	PDModules-4_48:4.1
	PDModules-4_47:4.1
	PDModules-4_46:4.1
	kbracey_32bit_merge:4.1
	PDModules-4_45:4.1
	PDModules-4_44-4_1_2_7:4.1
	PDModules-4_44-4_1_2_6:4.1
	PDModules-4_44-4_1_2_5:4.1
	PDModules-4_44-4_1_2_4:4.1
	PDModules-4_44-4_1_2_3:4.1
	PDModules-4_44-4_1_2_2:4.1
	PDModules-4_44-4_1_2_1:4.1
	kbracey_32bit:4.1.0.4
	kbracey_32bit_bp:4.1
	dellis_autobuild_BaseSW:4.1
	Ursula_merge:4.1.7.1
	PDModules-4_44:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1
	Ursula_RiscPC:4.1.7.1.0.6
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1
	UrsulaBuild_FinalSoftload:4.1.7.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Ursula:4.1.7.1.0.4
	Ursula_bp:4.1.7.1
	Ursula_31Mar1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spin_merge_28May97:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_16May97:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2007.11.05.17.13.38;	author srevill;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.48.36;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.48.36;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.04.38;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.27.18;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.31.02;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Fix debug builds of PDriverDP and PDriverPS.
Detail:
  With debugging turned on, various minor build issues arose. Namely,
  the lack of ALIGN directives resulting in unaligned code labels and
  out-of-range ADRs.
 
  These have been fixed by inserting ALIGN directives in the appropriate
  places and converting ADR to ADRL where necessary.
Admin:
  Testing was limited to ensuring that the code would build.
Notes:
  Changes by John-Mark Bell

Version 4.52. Tagged as 'PDModules-4_52'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.PDriverDP.Draw

; *****************************************************************
; thin stroke the specified path, closing all open subpaths.
;  Entry: R0 -> path
;         R2 -> Draw transformation matrix, or is zero
;         R3 = flatness, in user co-ordinates
;         R10 is the file handle for this print job
;  Exit:  R0,R9 corrupt (except R0 on an error)
;         All other registers preserved.
; *****************************************************************

draw_boundaryonly ROUT
          Push   "r1, r2, r8, lr"

          BL      SetDrawMatrixEtc
          Pull   "r1, r2, r8, pc",NE
          MOV     r1, #2_11000        ; set all boundary pixels
          SWI     XDraw_Fill
          STRB    r8, passthrough
          Pull   "r1, r2, r8, pc"

; *****************************************************************
; fill the interior of the specified path,
; excluding boundary pixels if possible.
; Entry: R0 -> path
;        Bit 1 of R1 is set if the even-odd winding rule is to be used
;              (otherwise, use the non-zero winding number rule).
;        R2 -> Draw transformation matrix, or is zero
;        R3 = flatness, in user co-ordinates
;        R10 is the file handle for this print job
; Exit:  R0,R9 corrupt (except R0 on an error)
;        All other registers preserved.
; *****************************************************************

draw_interiornobdry ROUT
          Push   "r1, r2, r8, lr"
          BL      SetDrawMatrixEtc
          Pull   "r1, r2, r8, pc",NE
          ORR     r1, r1, #2_100000     ; non-boundary interior pixels
          SWI     XDraw_Fill
          STRB    r8, passthrough
          Pull   "r1, r2, r8, pc"

; *****************************************************************
; fill the interior of the specified path.
;  Entry: R0 -> path
;         Bit 1 of R1 is set if the even-odd winding rule is to be used
;         (otherwise, use the non-zero winding number rule).
;         R2 -> Draw transformation matrix, or is zero
;         R3 = flatness, in user co-ordinates
;         R10 is the file handle for this print job
;  Exit:  R0,R9 corrupt (except R0 on an error)
;         All other registers preserved.
; *****************************************************************

draw_interior ROUT
          Push   "r1, r2, r8, lr"
          BL      SetDrawMatrixEtc
          Pull   "r1, r2, r8, pc",NE
          ORR     r1, r1, #2_110000     ; all interior pixels
          SWI     XDraw_Fill
          STRB    r8, passthrough
          Pull   "r1, r2, r8, pc"

; *****************************************************************
; fill the interior and boundary of the specified path.
;  Entry: R0 -> path
;         Bit 1 of R1 is set if the even-odd winding rule is to be used
;          (otherwise, use the non-zero winding number rule).
;         R2 -> Draw transformation matrix, or is zero
;         R3 = flatness, in user co-ordinates
;         R10 is the file handle for this print job
;  Exit:  R0,R9 corrupt (except R0 on an error)
;         All other registers preserved.
; *****************************************************************

draw_interiorwithbdry ROUT
          Push   "r1, r2, r8, lr"
          BL      SetDrawMatrixEtc
          Pull   "r1, r2, r8, pc",NE
          ORR     r1, r1, #2_111000     ; up to boundary edge pixels
          SWI     XDraw_Fill
          STRB    r8, passthrough
          Pull   "r1, r2, r8, pc"

; *****************************************************************
; stroke the specified path, using as close an approximation to
;  "plot interior, excluding interior boundary" as possible.
; Entry: R0 -> path
;        R2 -> Draw transformation matrix, or is zero
;        R3 = flatness, in user co-ordinates
;        R4 = thickness (non-zero)
;        R5 -> Draw cap and join specification
;        R6 -> Draw dash pattern, or is zero
;        R10 is the file handle for this print job
; Exit:  R0,R9 corrupt (except R0 on an error)
;        All other registers preserved.
; *****************************************************************

draw_strokenobdry ROUT
          Push   "r1, r2, r8, lr"
          BL      SetDrawMatrixEtc
          Pull   "r1, r2, r8, pc",NE
          MOV     r1, #2_100000
          SWI     XDraw_Stroke
          STRB    r8, passthrough
          Pull   "r1, r2, r8, pc"

; *****************************************************************
; stroke the specified path.
;  Entry: R0 -> path
;         R2 -> Draw transformation matrix, or is zero
;         R3 = flatness, in user co-ordinates
;         R4 = thickness (non-zero)
;         R5 -> Draw cap and join specification
;         R6 -> Draw dash pattern, or is zero
;         R10 is the file handle for this print job
;  Exit:  R0,R9 corrupt (except R0 on an error)
;         All other registers preserved.
; *****************************************************************

draw_stroke ROUT
          Push   "r1, r2, r8, lr"
          BL      SetDrawMatrixEtc
          Pull   "r1, r2, r8, pc",NE
          MOV     r1, #2_110000
          SWI     XDraw_Stroke
          STRB    r8, passthrough
          Pull   "r1, r2, r8, pc"

; *****************************************************************
; stroke the specified path, using as close an approximation to
;  "plot interior and all of boundary" as possible.
; Entry: R0 -> path
;        R2 -> Draw transformation matrix, or is zero
;        R3 = flatness, in user co-ordinates
;        R4 = thickness (non-zero)
;        R5 -> Draw cap and join specification
;        R6 -> Draw dash pattern, or is zero
;        R10 is the file handle for this print job
; Exit:  R0,R9 corrupt (except R0 on an error)
;        All other registers preserved.
; *****************************************************************

draw_strokewithbdry ROUT
          Push   "r1, r2, r8, lr"
          BL      SetDrawMatrixEtc
          Pull   "r1, r2, r8, pc",NE
          MOV     r1, #2_111000
          SWI     XDraw_Stroke
          STRB    r8, passthrough
          Pull   "r1, r2, r8, pc"

; *****************************************************************
; thin stroke the specified path.
;  Entry: R0 -> path
;         R2 -> Draw transformation matrix, or is zero
;         R3 = flatness, in user co-ordinates
;         R6 -> Draw dash pattern, or is zero
;         R10 is the file handle for this print job
;  Exit:  R0,R9 corrupt (except R0 on an error)
;         All other registers preserved.
; *****************************************************************

draw_thinstroke ROUT
          Push   "r1, r2, r4, r8, lr"
          BL      SetDrawMatrixEtc
          Pull   "r1, r2, r4, r8, pc",NE
          MOV     r1, #0             ; default
          MOV     r4, #0             ; for zero-thickness lines
          SWI     XDraw_Stroke
          STRB    r8, passthrough
          Pull   "r1, r2, r4, r8, pc"

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Draw support routine: build a new transformation matrix from the
; one at r2, also set no interception of Draw calls.
; R9 corruptible
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

SetDrawMatrixEtc ROUT
         Push   "r0, lr"
         LDRB    lr, disabled
         TST     lr, #disabled_nullclip
         Pull   "r0, pc", NE

   ; user flatness is specified in user coordinate space
   ; this will be scaled by job_currentX/Yscale / 180,
   ; so we should multiply by 180 / job_currentX/Yscale
   ; NOTE1: the default flatness is assumed to be 512 before scaling
   ; NOTE2: we assume that if the draw matrix is not the identity,
   ;        the caller will have modified his flatness accordingly.
   ;        We can therefore use the supplied flatness as a 'hint'

         CMP     r3, #0
         MOVEQ   r3, #512                ;; <== ADDED BY NRAINE, 26-Apr-89
      ;; BNE     sdme_flatOK

   ; user has asked for "default" flatness; we want to produce something
   ; that will give "adequate" results on the printed page.
   ; So take the default flatness (2), and scale it by the maximum
   ; scale factor.

         Push   "r0, r1"
         MOV     r0, #180                ;; <== ADDED BY NRAINE, 26-Apr-89
         MUL     r0, r3, r0              ;;
      ;; LDR     r0, =512*180            ; old default flatness + conversion
         LDR     r1, job_currentXscale
         LDR     lr, job_currentYscale
         CMP     r1, lr
         MOVLT   r1, lr
         BL      divide_and_scale
         MOVS    r3, r0, LSR #bufferpix_l2size   ; new flatness
         MOVEQ   r3, #1                          ; with underflow check

         Debug   Draw,"New flatness",R3

         Pull   "r0, r1"

sdme_flatOK
         LDRB    r8, passthrough
         ORR     lr, r8, #passthrough_draw
         STRB    lr, passthrough
         CMP     r2, #0
       [ debugDraw
         ADREQL  r2, SDM_Identity
       |
         ADREQ   r2, SDM_Identity
       ]

    ; first adjust the translation elements: there's the current offset from
    ; the bottom of the strip, then there's the adjustment from 0,0 to
    ; usersoffset-relative coordinates
    ; Translation entries refer to the output coordinate space, so need
    ; scaling.

         LDR     r0, [r2, #4*4]
         Debuga  Draw,"X translation is",R0

         LDR     lr, usersoffset
         SUB     r0, r0, lr, LSL #8        ; convert to usersoffset-relative
         Debuga  Draw,"->",R0

         BL      XScale                    ; scale to new output space
         Debuga  Draw,"->",R0

         LDR     lr, job_currentXoffset
         SUB     r0, r0, lr
         Debug   Draw,"->",R0
         STR     r0, job_DrawMatrix+4*4

         LDR     r0, [r2, #4*5]
         Debuga  Draw,"Y translation",R0

         LDR     lr, usersoffset+4
         SUB     r0, r0, lr, LSL #8
         Debuga  Draw,"->",R0

         BL      YScale
         Debuga  Draw,"->",R0

         LDR     lr, job_currentYoffset
         SUB     r0, r0, lr
         Debug   Draw,"->",R0
         STR     r0, job_DrawMatrix+4*5

     ; now add X scaling, Y scaling
         LDR     r0, [r2, #4*0]
         BL      XScale
         STR     r0, job_DrawMatrix+4*0

         LDR     r0, [r2, #4*2]
         BL      XScale
         STR     r0, job_DrawMatrix+4*2

         LDR     r0, [r2, #4*1]
         BL      YScale
         STR     r0, job_DrawMatrix+4*1

         LDR     r0, [r2, #4*3]
         BL      YScale
         STR     r0, job_DrawMatrix+4*3

       [ debugDraw
         LDR     r0, job_DrawMatrix
         Debuga  ,"New draw matrix",R0
         LDR     r0, job_DrawMatrix+4
         Debuga  ,",",R0
         LDR     r0, job_DrawMatrix+8
         Debuga  ,",",R0
         LDR     r0, job_DrawMatrix+12
         Debuga  ,",",R0
         LDR     r0, job_DrawMatrix+16
         Debuga  ,",",R0
         LDR     r0, job_DrawMatrix+20
         Debug   ,",",R0
       ]
         ADR     r2, job_DrawMatrix
         CMP     r0, r0               ; set EQ
         Pull   "r0, pc"

SDM_Identity & &10000, 0, 0, &10000, 0, 0

        END
@


4.1
log
@Initial revision
@
text
@d240 3
d244 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
