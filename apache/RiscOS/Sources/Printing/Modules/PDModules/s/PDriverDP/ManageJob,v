head	4.8;
access;
symbols
	PDModules-4_64:4.8
	PDModules-4_63:4.8
	PDModules-4_62:4.8
	PDModules-4_61:4.8
	PDModules-4_60:4.8
	PDModules-4_59:4.8
	PDModules-4_58:4.7
	PDModules-4_57:4.7
	PDModules-4_56:4.7
	PDModules-4_55:4.7
	PDModules-4_54:4.7
	PDModules-4_53:4.7
	PDModules-4_52:4.7
	PDModules-4_51:4.7
	PDModules-4_50:4.7
	PDModules-4_49:4.6
	PDModules-4_48:4.6
	PDModules-4_47:4.6
	PDModules-4_46:4.6
	kbracey_32bit_merge:4.4.2.2
	PDModules-4_45:4.5
	PDModules-4_44-4_1_2_7:4.4.2.2
	PDModules-4_44-4_1_2_6:4.4.2.2
	PDModules-4_44-4_1_2_5:4.4.2.2
	PDModules-4_44-4_1_2_4:4.4.2.2
	PDModules-4_44-4_1_2_3:4.4.2.2
	PDModules-4_44-4_1_2_2:4.4.2.2
	PDModules-4_44-4_1_2_1:4.4.2.1
	kbracey_32bit:4.4.0.2
	kbracey_32bit_bp:4.4
	dellis_autobuild_BaseSW:4.4
	Ursula_merge:4.1.7.5
	PDModules-4_44:4.4
	sbrodie_sedwards_16Mar2000:4.4
	dcotton_autobuild_BaseSW:4.6
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.5
	Ursula_RiscPC:4.1.7.5.0.4
	rthornb_UrsulaBuild-19Aug1998:4.1.7.5
	UrsulaBuild_FinalSoftload:4.1.7.5
	rthornb_UrsulaBuild-12Aug1998:4.1.7.5
	aglover_UrsulaBuild-05Aug1998:4.1.7.5
	rthornb_UrsulaBuild-29Jul1998:4.1.7.5
	rthornb_UrsulaBuild-22Jul1998:4.1.7.5
	hsimons_BOCA-1_2-Release:4.1.7.5
	rthornb_UrsulaBuild-15Jul1998:4.1.7.5
	rthornb_UrsulaBuild-07Jul1998:4.1.7.5
	rthornb_UrsulaBuild-17Jun1998:4.1.7.5
	rthornb_UrsulaBuild-03Jun1998:4.1.7.5
	rthornb_UrsulaBuild-27May1998:4.1.7.5
	rthornb_UrsulaBuild-21May1998:4.1.7.5
	rthornb_UrsulaBuild_01May1998:4.1.7.5
	afrost_NC2_Generic:4.1.7.5
	afrost_Funai01-33:4.1.7.5
	Ursula:4.1.7.5.0.2
	Ursula_bp:4.1.7.5
	Ursula_31Mar1998:4.4
	Spinner_RCA116:4.1.7.5
	Spinner_B20_2:4.1.7.4
	Spinner_19_3:4.1.7.4
	Spinner_B18:4.1.7.4
	Spinner_B17:4.1.7.4
	Spinner_B15:4.1.7.3
	Spinner_B14:4.1.7.3
	Spinner_B13:4.1.7.3
	Spinner_B12:4.1.7.3
	Spin_merge_28May97:4.1.7.2
	Spinner_B10:4.1.7.3
	Spin_merge_16May97:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Spinner_B7:4.1.7.2
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.3
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.8
date	2014.10.20.21.53.05;	author rsprowson;	state Exp;
branches;
next	4.7;
commitid	kYvwc1FHitWAiZUx;

4.7
date	2003.03.10.11.33.28;	author rsprowson;	state Exp;
branches;
next	4.6;

4.6
date	2001.07.20.09.14.46;	author mboura;	state Exp;
branches;
next	4.5;

4.5
date	2001.01.09.13.59.39;	author sbrodie;	state Exp;
branches;
next	4.4;

4.4
date	97.05.28.12.18.36;	author kbracey;	state Exp;
branches
	4.4.2.1;
next	4.3;

4.3
date	97.05.16.12.55.46;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.01.21.17.07.44;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.48.37;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.4.2.1
date	2000.10.18.11.32.02;	author sbrodie;	state Exp;
branches;
next	4.4.2.2;

4.4.2.2
date	2000.11.24.13.27.32;	author sbrodie;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.48.37;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.04.58;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.27.26;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.31.08;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.05.01.12.38.24;	author nturton;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.05.22.10.46.50;	author jcoxhead;	state Exp;
branches;
next	4.1.7.4;

4.1.7.4
date	97.07.09.15.31.10;	author arodger;	state Exp;
branches;
next	4.1.7.5;

4.1.7.5
date	97.08.11.12.28.35;	author arodger;	state Exp;
branches;
next	;


desc
@@


4.8
log
@Some PDModule tidy ups
Core/FontSWI.s & PDriverDP/Font.s:
 The pointer compares are now unsigned, so raise the limit for printing strings in top bit set addresses when no length is passed in R7.
 Couple of comment typos.
Core/Header.s:
 A CVS merge mistake left behind two copies of Push/return sequence.
Core/PDriver.s:
 Unused VersionString removed.
PDriverDP/Macros.s & PDriverDP/ManageJob.s:
 Single use unhelpful debug message removed.
PDriverDP/Private2.s & Sprite.s & TranSprite.s:
 Use some of the defines from Hdr:Sprite.
Makefile:
 For ROMming, explicitly state there's no resources phase
PDriverDP/PageBox.s:
 Unjumble the set_sprite_output_state data. The MonoBufferOK and Libra1 switch happen to work when both are {TRUE} but other combinations would output a silly table. Let ObjAsm work out the size instead.

Tested briefly, still printed OK.

Version 4.59. Tagged as 'PDModules-4_59'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.PDriverDP.ManageJob

; ***********************************************************
; printer specific allocation of workspace for a job
; Entry: -
;  Exit:  R11 = job's workspace pointer
;
; ***********************************************************

managejob_allocate  ROUT
        Push    "r0-r3, lr"

        Debug   ManageJob,"managejob_allocate"

        LDR     r0, printer_pdumper_pointer
        CMP     r0, #0
        BNE     pdumper_module_loaded

        ADRL    r0, pending_pdumper_command
        Debug   ManageJob,"Performing RMEnsure command",R0
        SWI     XOS_CLI
        Debuga  ManageJob,"Returned from command with WP of",R12
        Debug   ManageJob," and R0 of",R0
        DebugE  ManageJob,"Ensure command failed with"
        BVS     %FT99

        LDR     r0, printer_pdumper_pointer
        CMP     r0, #0
        BNE     pdumper_module_loaded
        ADDR    r0, ErrorBlock_PDumperUndeclared
        BL      LookupSingle                    ; Always sets the V bit
        BVS     %FT99

pdumper_module_loaded
        MOV      r0,#ModHandReason_Claim ;Claim workspace
        LDR      r3,=jobwslength



        Debug   ManageJob,"managejob_allocate",R3

        SWI     XOS_Module
        MOV     r11, r2
        BVS     %FT99

; copy our global data to the job workspace

        ADR     r0, printer_dump_depth
        ADR     r1, job_dump_depth
        ADD     r1, r1, #jobwsoffset            ; MUST add jobwsoffset to get correct address in record
        MOV     r2, #job_endconfigdata-job_dump_depth

        Debug   ManageJob,"copying data from:",R0
        Debug   ManageJob,"               to:",R1
        Debug   ManageJob,"           length:",R2

10      LDR      r3, [r0], #4
        STR      r3, [r1], #4
        SUBS     r2, r2, #4
        BGE      %BT10

; Get PDumper private word

        Push    "r9,r11"

        ADD     r11, r11, #jobwsoffset                  ; IMPORTANT!! needed to obtain correct values from record

        MOV     r0, #0
        STR     r0, job_pdumper_word                    ; reset the private word to zero

        ADR     r0, job_pdumper_word
        MOV     r1, r10
        
        LDRB    r2, job_strip_type
        MOV     r9, #PDumperReason_StartJob
        BL      CallPDumperForJob

        [ Medusa
        BL      sprite_clear32Ktable            ; setup coloourtrans32K anchor block
        ]

        Pull    "r9,r11"
99
        DebugE  ManageJob,"managejob_allocate returns error"

        STRVS    r0, [stack]
        Pull    "r0-r3, pc"
        LTORG



; ***********************************************************
; printer specific initialisation of a job
;  Entry: R1 = zero or points to control or topbit character
;              terminated title string.
;         R10 = file handle of job
;         R11 = job's workspace pointer
; ***********************************************************

managejob_init  ROUT
       Push    "r0-r9, lr"

       Debuga   ManageJob,"managejob_init on file handle",R10
       DebugS   ManageJob,", job title",R1

       MOV      r0, #0
       STR      r0, job_VDUsavearea
       STR      r0, job_savedVDUstate  ; no redirection yet
       STR      r0, job_currentrect
       STR      r0, job_dashstyle
       STR      r0, job_sarea_change
       STRB     r0, job_htonealign
       BL       font_fontslost         ; clear the slave data

       Debug    ManageJob,"Initialise job_spritearea to -1"

       MOV      r0, #-1                ; no buffer yet
       STR      r0, job_spritearea
       CLRV

  ; set up halftone data

       LDR      r0, info_xpixelres
       LDR      r1, info_xhtoneres

       BL       Divide
       CMP      r0, #256
       BGE      %FT98
       STRB     r0, job_halftoneX
       MOV      r3, r0

       Debug    ManageJob,"halftoneX",R0

       LDR      r0, info_ypixelres
       LDR      r1, info_yhtoneres
       BL       Divide
       CMP      r0, #256
       BGE      %FT98
       STRB     r0, job_halftoneY

        Debug   ManageJob,"HalftoneY",R0

99      STRVS  r0, [stack]
        DebugE ManageJob,"Error returned from managejob_init"
        Pull   "r0-r9, pc"

98      ADR     r0, ErrorBlock_PrintBadHalftone
        BL      LookupSingle                    ; Always sets V
        B       %BT99

       MakeInternatErrorBlock PrintBadHalftone,,BadHton

; ***********************************************************
; printer specific suspension of a job
;  Entry: R10 = file handle of job
;         R11 = job's workspace pointer
; This routine is not allowed to return an error,
;    but it can set up a persistent error (to be reported later)
; ***********************************************************

managejob_suspend ROUT

        Debug   ManageJob,"managejob_suspend on handle",R10

          Push     "lr"
          BL        restore_printer_ignore
          Pull     "lr"

restore_output_state             ; swap output away from our sprite
          EntryS    "r0-r3"
          ADR       r0, job_savedVDUstate
          LDMIA     r0, {r0-r3}
          CMP       r0, #0

        [ debugManageJob
          BEQ       %FT80
          Debug     ManageJob,"restore output state"
          B         %FT81
80
          Debug     ManageJob,"restore output state - already done"
81
        ]
          BEQ       %FT01                ;; ADDED BY NRAINE, 2-May-89

          ADR       lr, jobspriteparams
          STMIA     lr, {r0-r3}
          BL        pass_spriteop

; we must invalidate ColourTrans's cache, as output bitmap is changing
; (also done in PDriverDP.Private2: redirect_output)

          SWI       XColourTrans_InvalidateCache

01
          MOV       r3, #0
          STR       r3, job_savedVDUstate

          BLVS      makepersistenterror     ;; ADDED BY NRAINE, 2-May-89
          EXITS


; ***********************************************************
; printer specific resumption of a job
;  Entry: R10 = file handle of job
;         R11 = job's workspace pointer
; This routine is not allowed to return an error,
;    but it can set up a persistent error (to be reported later)
; ***********************************************************

managejob_resume ROUT
          EntryS  "r0"

          Debug   ManageJob,"managejob_resume on file handle",R10

          LDR     r0, job_spritearea
          CMP     r0, #-1
        [ debugManageJob
          BNE     %FT80
          Debug   ManageJob,"************** Resume: no sprite area."
80
        ]
          BLNE    redirect_output
          BLVC    set_printer_ignore

          BLVS    makepersistenterror
          EXITS

; ***********************************************************
; printer specific finalisation of a job
;  Entry: R10 = file handle of job
;         R11 = job's workspace pointer
; ***********************************************************

managejob_finalise ROUT
          Push  "r0, lr"

          Debug   ManageJob,"managejob_finalise"

        ; finalise is not a fatality, therfore we don't want to wipe
        ; the output stream - have to go via abortalt

        Push    "R3"
        MOV     R3, #1

        BL     managejob_abortalt          ; lose any blocks we hold
        Pull    "R3"

;          ADR    r0, job_job_epilogue
;          BL     send_counted_string
          STRVS  r0, [stack]
          Pull  "r0, pc"

; ***********************************************************
; printer specific aborting of a job
;  Entry: R10 = file handle of job
;         R11 = job's workspace pointer
; ***********************************************************

managejob_abort ROUT
        Push    "r3,lr"                 ; we must always preserve r3!
        MOV     R3,#2                  ; into the tar pit time
        [ Libra1
        ORR     R3, R3, #1 :SHL: 24     ; we return the printer into a sane state
        ]
        BL      managejob_abortalt
        Pull    "r3,pc"

managejob_shrink_const
        DCD     -1000*1024

managejob_abortalt ROUT
        Push  "r0-r2,r4,lr"

        Debuga  ManageJob,"managejob_abort on file handle",R10
        Debug   ManageJob,"fatility",R3

        BL      restore_printer_ignore
        BL      restore_output_state     ; swap output away from our sprite

        Push    "r9"

        [ Medusa
        BL     sprite_free32Ktable      ; freeup pointer in colourtrans32K anchor block
        ]
        [ Libra1
        ; if printing to old strip type - might have big holes in RMA, try to shrink it

        MOV     R0, #1
;        LDR     R1, =-1000*1024
        ADR     R1, managejob_shrink_const
        LDR     R1, [R1]
        SWI     XOS_ChangeDynamicArea
        CLRV                            ; ignore any error
        ]

        ADR     r0, job_pdumper_word
        LDR     r1, jobhandle
        LDRB    r2, job_strip_type
        ; remember r3 contains info used by abort-job
        [ Libra1
        ; if printer is going to be set into a sane state need to provide
        ; location of dumper config. data
        TST     R3, #1 :SHL: 24
        ADRNE   R4, job_dump_depth
        ]
        MOV     r9, #PDumperReason_AbortJob
        BL      CallPDumperForJob

        [ Libra1
        ; set the output stream to 0 if the job is aborted
        ; this stops pages being printed if background printing
        ; is on!

        Push    "R0-R2"
        BIC     R3, R3, #1 :SHL: 24
        CMP     R3, #2
        MOVEQ   R0, #3
        MOVEQ   R1, R10
        MOVEQ   R2, #0
        SWIEQ   XOS_Args
        Pull    "R0-R2"
        ]

        Pull    "r9"                    ; preserve r9 it could be important

      [ MultiplePasses
        ADR     r0, job_linebuffer+12
        LDRB    r2, job_strip_type
        CMP     r2, #3                  ;multiple pass 16m colours
        LDRB    r2, job_no_passes
        ADDEQ   r2,r2,#1
00
        BL      losebuffersprite
        ADD     r0, r0, #12
        SUBS    r2, r2, #1
        BGT     %BT00
      |
        ADR     r0, job_linebuffer
        BL      losebuffersprite
      ]
        ADR     r0, job_rotationbuffer
        BL      losebuffersprite

        LDR     r2, job_VDUsavearea
        CMP     r2, #0
        MOVNE   r0, #ModHandReason_Free
        SWINE   XOS_Module

         LDR    r2, job_spritearea
         CMP    r2, r2, ASR#31
         MOVNE  r0, #ModHandReason_Free
         SWINE  XOS_Module

         LDR    r0, job_sarea_change
         RSBS   r1, r0, #0
         MOVNE  r0, #3                ; system sprite area
         SWINE  XOS_ChangeDynamicArea

         Debug  ManageJob,"Sprite area deallocated"

         MOV    r0, #-1                ; no buffer now
         STR    r0, job_spritearea

         SWI    XColourTrans_InvalidateCache ; ensure ColourTrans is in a kosher state


         Debug  ManageJob,"managejob_abort finished"

         CLRV
         Pull  "r0-r2,r4,pc"

;.................................................................
; routines to save/restore the printer ignore state.
;.................................................................

set_printer_ignore ROUT
         Push   "r0-r2, lr"
         MOV     r0, #182
         MOV     r1, #255          ; we want NOIGNORE
         MOV     r2, #0
         SWI     XOS_Byte
         STRVCB  r1, job_saved_pignore
         STRVS   r0, [stack]
         Pull   "r0-r2, pc"

restore_printer_ignore ROUT
         Push   "r0-r2, lr"
         MOV     r0, #182
         LDRB    r1, job_saved_pignore
         MOV     r2, #0
         SWI     XOS_Byte
         STRVS   r0, [stack]
         Pull   "r0-r2, pc"

         END

@


4.7
log
@Fix for the thingy which sits on SpriteV,it got optimised sometime round
2000 which led to it getting the "redirected to sprite" switch in a
muddle so printing from some apps ended up on the screen not in the
postscript file.
Changed the "%%Creator" string a bit.
Took the opportunity to eliminate all the signed pointer comparisons.
Tightened up the checking of pointers to palettes and translation tables
so that "0 or -1" means to use the default,not <= 0.

Version 4.50. Tagged as 'PDModules-4_50'
@
text
@a45 1
  DebugE xx,"Error about undeclared PDumper"
@


4.6
log
@PDumperReason_OutputDump was being passed a random number instead of a file handle.
Detail:
An unitialised memory location was being assigned to R1.
Admin:
Fix suggested, and tested by Risc OS Ltd

Version 4.45. Not tagged
@
text
@d231 1
a231 1
          CMP     r0, #0
d233 1
a233 1
          BGE     %FT80
d237 1
a237 1
          BLGE    redirect_output
d240 1
a240 2

          BLVS    makepersistenterror     ;; ADDED BY NRAINE, 2-May-89
d365 3
a367 3
         CMP    r2, #0
         MOVGT  r0, #ModHandReason_Free
         SWIGT  XOS_Module
@


4.5
log
@  Merge of 32-bit branch.
Detail:
  These modules are now thought to work.
Admin:
  This module has received some testing of both 26-bit and 32-bit
    builds and is believed to function correctly.

Version 4.45. Tagged as 'PDModules-4_45'
@
text
@d87 2
a88 2
        LDR     r1, jobhandle                           ; NB: not sure this is actually valid

@


4.4
log
@Spinner branch taken
@
text
@d28 1
a28 1
        
d53 1
a53 1
       
d64 1
a64 1
        ADR     r1, job_dump_depth 
d78 1
a78 1
        
d88 1
a88 1
 
d146 1
a146 1
       
d185 1
a185 1
          Push     "r0-r3, lr"
d214 1
a214 1
          Pull     "r0-r3, pc",,^
d226 1
a226 1
          Push   "r0, lr"
d239 1
a239 1
          
d242 1
a242 1
          Pull   "r0, pc",,^
d252 1
a252 1
          
d257 1
a257 1
        
d260 1
a260 1
      
d282 1
a282 1
        Pull    "r3,pc"                 
d292 1
a292 1
        
d316 1
a316 1
        [ Libra1 
d331 1
a331 1
        BIC     R3, R3, #1 :SHL: 24    
d339 1
a339 1
        
d382 1
a382 1
         
d385 2
a386 2
         Pull  "r0-r2,r4,lr"
         Return
@


4.4.2.1
log
@  First attempt at 32-bit compatible modules.
Admin:
  Tested that modules build 26-bit and 32-bit.
  Requires HdrSrc-1_05 or later.

Version 4.44, 4.1.2.1. Tagged as 'PDModules-4_44-4_1_2_1'
@
text
@d28 1
a28 1

d53 1
a53 1

d64 1
a64 1
        ADR     r1, job_dump_depth
d78 1
a78 1

d88 1
a88 1

d146 1
a146 1

d185 1
a185 1
          EntryS    "r0-r3"
d214 1
a214 1
          EXITS
d226 1
a226 1
          EntryS  "r0"
d239 1
a239 1

d242 1
a242 1
          EXITS
d252 1
a252 1

d257 1
a257 1

d260 1
a260 1

d282 1
a282 1
        Pull    "r3,pc"
d292 1
a292 1

d316 1
a316 1
        [ Libra1
d331 1
a331 1
        BIC     R3, R3, #1 :SHL: 24
d339 1
a339 1

d382 1
a382 1

a385 1
         CLRV
@


4.4.2.2
log
@  Lots of fixes.
Detail:
  Several stack imbalances and missing conditions on instructions fixed.
  Some flag removal code sequences improved (RSB rn,pc,pc:SUB rn,lr,rn)
Admin:
  Built both 26 and 32-bit versions - neither tested.

Version 4.44, 4.1.2.2. Tagged as 'PDModules-4_44-4_1_2_2'
@
text
@d385 1
d387 1
a387 1
         Pull  "r0-r2,r4,pc"
@


4.3
log
@Spinner branch merged
@
text
@a88 3
        [ Libra1
        LDR     r2, job_strip_type
        |
a89 1
        ]
a313 3
        [ Libra1
        LDR    r2, job_strip_type
        |
a314 1
        ]
@


4.2
log
@Version Spin_merge taken
@
text
@d33 1
a33 1
        ADR     r0, pending_pdumper_command
@


4.1
log
@Initial revision
@
text
@d352 2
d355 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@a351 2
        LDRB    r2, job_strip_type
        CMP     r2, #3                  ;multiple pass 16m colours
a352 1
        ADDEQ   r2,r2,#1
@


4.1.7.2
log
@Fixed data abort on init
@
text
@d33 1
a33 1
        ADRL    r0, pending_pdumper_command
@


4.1.7.3
log
@   Just pass in job_strip_type to the PDumper: it doesn't use anything else
anyway. (Used to pass in 4 bytes from that location.)
@
text
@d89 3
d93 1
d318 3
d322 1
@


4.1.7.4
log
@Placed code in redirect output to check for the current state, so as not to duplicate the present output direction(jobspriteparams)
@
text
@d199 1
a199 1
          
@


4.1.7.5
log
@Moved the redirection to after the call to pdumper abortjob in case it
is an escape error in which case we are able to send reset sequeces.
@
text
@d293 3
a340 3
	
	BL	managejob_suspend	; As a final output action restore output direction (screen)
					; and restore the ignore state.
@


4.1.5.1
log
@Import from SrcFiler
@
text
@a351 2
        LDRB    r2, job_strip_type
        CMP     r2, #3                  ;multiple pass 16m colours
a352 1
        ADDEQ   r2,r2,#1
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a351 2
        LDRB    r2, job_strip_type
        CMP     r2, #3                  ;multiple pass 16m colours
a352 1
        ADDEQ   r2,r2,#1
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
