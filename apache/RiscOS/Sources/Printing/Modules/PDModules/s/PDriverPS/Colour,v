head	4.3;
access;
symbols
	PDModules-4_64:4.3
	PDModules-4_63:4.3
	PDModules-4_62:4.3
	PDModules-4_61:4.3
	PDModules-4_60:4.3
	PDModules-4_59:4.3
	PDModules-4_58:4.3
	PDModules-4_57:4.3
	PDModules-4_56:4.3
	PDModules-4_55:4.3
	PDModules-4_54:4.3
	PDModules-4_53:4.3
	PDModules-4_52:4.3
	PDModules-4_51:4.3
	PDModules-4_50:4.3
	PDModules-4_49:4.3
	PDModules-4_48:4.3
	PDModules-4_47:4.3
	PDModules-4_46:4.3
	kbracey_32bit_merge:4.2.2.2
	PDModules-4_45:4.3
	PDModules-4_44-4_1_2_7:4.2.2.2
	PDModules-4_44-4_1_2_6:4.2.2.2
	PDModules-4_44-4_1_2_5:4.2.2.2
	PDModules-4_44-4_1_2_4:4.2.2.2
	PDModules-4_44-4_1_2_3:4.2.2.2
	PDModules-4_44-4_1_2_2:4.2.2.1
	PDModules-4_44-4_1_2_1:4.2.2.1
	kbracey_32bit:4.2.0.2
	kbracey_32bit_bp:4.2
	dellis_autobuild_BaseSW:4.2
	Ursula_merge:4.1.7.2
	PDModules-4_44:4.2
	sbrodie_sedwards_16Mar2000:4.2
	dcotton_autobuild_BaseSW:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.2
	Ursula_RiscPC:4.1.7.2.0.4
	rthornb_UrsulaBuild-19Aug1998:4.1.7.2
	UrsulaBuild_FinalSoftload:4.1.7.2
	rthornb_UrsulaBuild-12Aug1998:4.1.7.2
	aglover_UrsulaBuild-05Aug1998:4.1.7.2
	rthornb_UrsulaBuild-29Jul1998:4.1.7.2
	rthornb_UrsulaBuild-22Jul1998:4.1.7.2
	hsimons_BOCA-1_2-Release:4.1.7.2
	rthornb_UrsulaBuild-15Jul1998:4.1.7.2
	rthornb_UrsulaBuild-07Jul1998:4.1.7.2
	rthornb_UrsulaBuild-17Jun1998:4.1.7.2
	rthornb_UrsulaBuild-03Jun1998:4.1.7.2
	rthornb_UrsulaBuild-27May1998:4.1.7.2
	rthornb_UrsulaBuild-21May1998:4.1.7.2
	rthornb_UrsulaBuild_01May1998:4.1.7.2
	afrost_NC2_Generic:4.1.7.2
	afrost_Funai01-33:4.1.7.2
	Ursula:4.1.7.2.0.2
	Ursula_bp:4.1.7.2
	Ursula_31Mar1998:4.2
	Spinner_RCA116:4.1.7.2
	Spinner_B20_2:4.1.7.2
	Spinner_19_3:4.1.7.2
	Spinner_B18:4.1.7.2
	Spinner_B17:4.1.7.2
	Spinner_B15:4.1.7.2
	Spinner_B14:4.1.7.2
	Spinner_B13:4.1.7.2
	Spinner_B12:4.1.7.2
	Spin_merge_28May97:4.1.7.2
	Spinner_B10:4.1.7.2
	Spin_merge_16May97:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.2
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2001.01.09.13.59.43;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.05.16.12.55.51;	author kbracey;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.48.39;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.2.2.1
date	2000.10.18.11.32.02;	author sbrodie;	state Exp;
branches;
next	4.2.2.2;

4.2.2.2
date	2000.11.30.12.13.40;	author sbrodie;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.48.39;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.05.20;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.27.42;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.31.22;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.04.30.17.46.13;	author scormie;	state Exp;
branches;
next	;


desc
@@


4.3
log
@  Merge of 32-bit branch.
Detail:
  These modules are now thought to work.
Admin:
  This module has received some testing of both 26-bit and 32-bit
    builds and is believed to function correctly.

Version 4.45. Tagged as 'PDModules-4_45'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.PDriverPS.Colour

; Colour handling routines for the PostScript printer driver

; A useful subroutine to convert an RGB value to a grey scale value.
; Formula used: grey = (77*red + 150*green + 28*blue)/255
; Entry: R1 = &BBGGRR00
; Exit:  R1 = grey (in range 0-255)
;
; Multiplications by 77 and 150 are done by multiply instructions to save
; code. The division by 255, with rounding, is done by a trick that works on
; numbers in the required range. This trick is:
;
; Provided 0 <= X <= &FF00, X DIV &FF = (&101*X + &100) DIV &10000.
;
; Proof: X/&FF = (&101*X)/&FFFF
;              = (&101*X)/&10000 + ((&101*X)/&FFFF)/&10000
;             <= (&101*X)/&10000 + &100/&10000, as X <= &FF00
;              = (&101*X + &100)/&10000
;              < (&101*X + &101)/&FFFF
;              = (&101*(X+1))/&FFFF
;              = (X+1)/&FF
; Therefore X DIV &FF <= (&101*X + &100) DIV &10000 <= (X+1) DIV &FF,
; with the second inequality being strict if X+1 is a multiple of &FF. But
; (X+1) DIV &FF = (X DIV &FF) + 1 if X+1 is a multiple of &FF and
; (X+1) DIV &FF = X DIV &FF otherwise, yielding the required result either
; way.

        [ Medusa
; alternative entry point for colour_rgbtogray that expects
; the colours to be in r1, r2 and r3 already
;
colour_rgbcomponentstogray
        Push    "R2,R3,LR"
        B       %FT00
        ]

colour_rgbtogrey
        Push    "R2,R3,LR"
        MOV     R3,#&FF
        AND     R2,R3,R1,LSR #16        ;R2 := green
        AND     R3,R3,R1,LSR #8         ;R3 := red
        MOV     R1,R1,LSR #24           ;R1 := blue
00
        MOV     LR,#77
        MUL     LR,R3,LR                ;LR := 77*red
        MOV     R3,#150
        MLA     LR,R2,R3,LR             ;LR := 77*red + 150*green
        RSB     R1,R1,R1,LSL #3         ;R1 := 7*blue
        ADD     LR,LR,R1,LSL #2         ;LR := 77*red + 150*green + 28*blue
        ADD     LR,LR,#&7F              ;Offset to do rounded division
        ADD     LR,LR,LR,LSL #8         ;LR := &101*X
        ADD     LR,LR,#&100             ;LR := &101*X + &100
        MOV     R1,LR,LSR #16           ;R1 := (&101*X + &100) DIV &10000
        Pull    "R2,R3,PC"

        [       PSCoordSpeedUps

; Routine to set an RGB combination to use in the PostScript output

colour_setrealrgb
        [       PSDebugColour

        Push    "R0,LR"
        PrError colour_setrealrgb_return
        PrStrIm "% colour_setrealrgb "
        MOV     R0,R1,LSR #24
        PrHex   R0,CorruptR0
        MOV     R0,R1,LSR #16
        PrHex   R0,CorruptR0
        MOV     R0,R1,LSR #8
        PrHex   R0,CorruptR0
        PrHex   R1,CorruptR0
        PrNewLn FallThroughOnError
        STRVC   R1,realcolour
        PrError
colour_setrealrgb_return
        STRVS   R0,[R13]
        Pull    "R0,PC"

        |

        STR     R1,realcolour
        RETURNVC

        ]

; Routine to make certain the correct colour is set in the PostScript
; output

colour_ensure
        Push    "R1,R2,LR"
        PrError colour_ensure_return

        [       PSDebugColour
        PrLnIm  "% colour_ensure "
        ]

        LDR     R1,realcolour
        LDR     LR,info_features
        TST     LR,#1
        BNE     colour_ensure_coloured

        BL      colour_rgbtogrey                ;Note R1 becomes a byte value
        LDR     R2,currentcolptr                ;Don't output redundant
        LDR     LR,[R2]                         ;  colour changes
        CMP     R1,LR                           ;NB clears V
        BEQ     colour_ensure_return
        STR     R1,[R2]
        PrNumSp R1
        PrStrIm "G ",FallThroughOnError
        B       colour_ensure_return

colour_ensure_coloured
        BIC     R1,R1,#&FF                      ;Make certain R1 <> -1
        LDR     R2,currentcolptr                ;Don't output redundant
        LDR     LR,[R2]                         ;  colour changes
        CMP     R1,LR                           ;NB clears V
        BEQ     colour_ensure_return
        STR     R1,[R2]
        PrRGB   R1,CorruptR1
        PrStrIm "C ",FallThroughOnError

        PrError
colour_ensure_return
        Pull    "R1,R2,PC"

        |

; Routine to set an RGB combination in the PostScript output

colour_setrealrgb
        Push    "R1,R2,LR"
        PrError colour_setrealrgb_return

        [       PSDebugColour
        PrStrIm "% colour_setrealrgb "
        MOV     R2,R1,LSR #24
        PrHex   R2
        MOV     R2,R1,LSR #16
        PrHex   R2
        MOV     R2,R1,LSR #8
        PrHex   R2
        PrHex   R1
        PrNewLn
        ]

        LDR     LR,info_features
        TST     LR,#1
        BNE     colour_setrealrgb_coloured

        BL      colour_rgbtogrey                ;Note R1 becomes a byte value
        LDR     R2,currentcolptr                ;Don't output redundant
        LDR     LR,[R2]                         ;  colour changes
        CMP     R1,LR                           ;NB clears V
        BEQ     colour_setrealrgb_return
        STR     R1,[R2]
        PrNumSp R1
        PrStrIm "G ",FallThroughOnError
        B       colour_setrealrgb_return

colour_setrealrgb_coloured
        BIC     R1,R1,#&FF                      ;Make certain R1 <> -1
        LDR     R2,currentcolptr                ;Don't output redundant
        LDR     LR,[R2]                         ;  colour changes
        CMP     R1,LR                           ;NB clears V
        BEQ     colour_setrealrgb_return
        STR     R1,[R2]
        PrRGB   R1,CorruptR1
        PrStrIm "C ",FallThroughOnError

        PrError
colour_setrealrgb_return
        Pull    "R1,R2,PC"

        ]

; Routine to convert an RGB value into a "pixel value" suitable for use in
; sprite translation tables.
;   This uses two different approaches, depending on whether this current
; job uses colour. If it doesn't, it converts the RGB value to a grey scale
; value according to the formula:
;   grey = (77*red + 150*green + 28*blue)/255
; If it does, a table of pixel values is used. If the requested colour
; appears in the table, it is returned. If it doesn't and there is still
; space in the table, a new entry is allocated for the new colour. Otherwise,
; the closest entry in the table is returned - "closest" being measured the
; same way as the ColourTrans module measures it.

colour_rgbtopixval
        Push    "R1-R3,LR"
        LDR     LR,info_features
        TST     LR,#1
        BNE     colour_rgbtopixval_coloured

; This is a monochrome job, so calculate and return grey scale value.

        MOV     R1,R0
        BL      colour_rgbtogrey
        ADDS    R0,R1,#0                ;Clears V
        Pull    "R1-R3,PC"

colour_rgbtopixval_coloured

; We first try to find an exact match or, failing that, an empty slot in the
; 'pixelvalues' table.

        BIC     R0,R0,#&FF              ;Following code would be upset by a
                                        ;  non-zero bottom byte.
        ADRL    LR,pixelvalues
        MOV     R1,#255                 ;Start looking at entry 255
        MOV     R2,#-1                  ;No empty slot found yet
colour_rgbtopixval_search1
        LDR     R3,[LR,R1,LSL #2]
;  Debug mjs,"colour_rgbtopixval colour-in table-index table-colour ",R0,R1,R3
        CMP     R0,R3                   ;Return (with V clear) if exact match
        MOVEQ   R0,R1
        Pull    "R1-R3,PC",EQ
        TST     R3,#&FF                 ;Remember slot if empty
        MOVNE   R2,R1
        SUBS    R1,R1,#1                ;Loop for next slot
        BGE     colour_rgbtopixval_search1

        CMP     R2,#0                   ;Tests for empty slot and clears V
        STRGE   R0,[LR,R2,LSL #2]       ;Store new entry and return if there
        MOVGE   R0,R2                   ;  is an empty slot
        Pull    "R1-R3,PC",GE

; There is no exact match and no empty slot. Find the closest match.

        Push    "R4-R9"
        MOV     R9,#&FF
        AND     R1,R9,R0,LSR #16        ;R1 := green
        AND     R2,R9,R0,LSR #8         ;R2 := red
        MOV     R0,R0,LSR #24           ;R0 := blue
        MOV     R3,#255                 ;Start looking at entry 255
        MOV     R4,#&FFFFFFFF           ;Closest distance so far
colour_rgbtopixval_search2
        LDR     R6,[LR,R3,LSL #2]       ;Get this entry

        AND     R7,R9,R6,LSR #16        ;R7 := this entry's green
        SUBS    R7,R7,R1                ;R7 := green distance
        RSBMI   R7,R7,#0                ;Ensure positive for faster mult'n
        MUL     R8,R7,R7                ;R8 := (green distance)^2
        ADD     R8,R8,R8,LSL #1         ;R8 := 3*(green distance)^2

        MOV     R7,R6,LSR #24           ;R7 := this entry's blue
        SUBS    R7,R7,R0                ;R7 := blue distance
        RSBMI   R7,R7,#0                ;Ensure positive for faster mult'n
        MLA     R8,R7,R7,R8             ;R8 += (blue distance)^2

        AND     R7,R9,R6,LSR #8         ;R7 := this entry's red
        SUBS    R7,R7,R2                ;R7 := red distance
        RSBMI   R7,R7,#0                ;Ensure positive for faster mult'n
        MOV     R6,R7,LSL #1            ;R6 := 2*(red distance)
        MLA     R8,R6,R7,R8             ;R8 += 2*(red distance)^2

        CMP     R4,R8                   ;Closer than before?
        MOVHI   R4,R8                   ;If so, record new closest colour
        MOVHI   R5,R3

        SUBS    R3,R3,#1                ;Advance to next colour (and clear V)
        BGE     colour_rgbtopixval_search2

        MOV     R0,R5
        Pull    "R4-R9"
        Pull    "R1-R3,PC"


colour_rgbtopixvalwide
	Debug	Colour, "colour_rgbtopixvalwide"
        Push    "LR"
        BL      colour_rgbtopixval
        MOV     R1, #1                  ; PS pixel values are always 1 byte
  Debug mjs,"colour_rgbtopixvalwide (PS) R0 R1 ",R0,R1
        Pull    "PC"

        END
@


4.2
log
@Spinner branch merged
@
text
@d98 1
a98 1
        Return
@


4.2.2.1
log
@  First attempt at 32-bit compatible modules.
Admin:
  Tested that modules build 26-bit and 32-bit.
  Requires HdrSrc-1_05 or later.

Version 4.44, 4.1.2.1. Tagged as 'PDModules-4_44-4_1_2_1'
@
text
@d98 1
a98 2
        CLRV    VS
        MOV     pc, lr
@


4.2.2.2
log
@  More fixes.
Detail:
  26-bit builds work again - a stack imbalance in PDriverDP has been fixed.
  Tidied up some nasty code that effected an EOR in a convoluted manner.  It
    now uses an EOR instruction instead of loads of TSTs and TEQP.
Admin:
  26-bit build tested very briefly - no longer dies.
  32-bit build dies still.

Version 4.44, 4.1.2.3. Tagged as 'PDModules-4_44-4_1_2_3'
@
text
@d98 2
a99 1
        RETURNVC
@


4.1
log
@Initial revision
@
text
@d285 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@   Use buffer in workspace for MessageTrans.
   Added 'Colour' debugging flag.
   Do not pass SpriteV calls to pdriver if a Wimp error box is open.
@
text
@a284 1
	Debug	Colour, "colour_rgbtopixvalwide"
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
