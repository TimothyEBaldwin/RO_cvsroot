head	4.2;
access;
symbols
	PDModules-4_64:4.2
	PDModules-4_63:4.2
	PDModules-4_62:4.2
	PDModules-4_61:4.2
	PDModules-4_60:4.2
	PDModules-4_59:4.2
	PDModules-4_58:4.2
	PDModules-4_57:4.2
	PDModules-4_56:4.2
	PDModules-4_55:4.2
	PDModules-4_54:4.2
	PDModules-4_53:4.2
	PDModules-4_52:4.2
	PDModules-4_51:4.2
	PDModules-4_50:4.2
	PDModules-4_49:4.2
	PDModules-4_48:4.2
	PDModules-4_47:4.2
	PDModules-4_46:4.1
	kbracey_32bit_merge:4.1
	PDModules-4_45:4.1
	PDModules-4_44-4_1_2_7:4.1
	PDModules-4_44-4_1_2_6:4.1
	PDModules-4_44-4_1_2_5:4.1
	PDModules-4_44-4_1_2_4:4.1
	PDModules-4_44-4_1_2_3:4.1
	PDModules-4_44-4_1_2_2:4.1
	PDModules-4_44-4_1_2_1:4.1
	kbracey_32bit:4.1.0.4
	kbracey_32bit_bp:4.1
	dellis_autobuild_BaseSW:4.1
	Ursula_merge:4.1.7.1
	PDModules-4_44:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1
	Ursula_RiscPC:4.1.7.1.0.6
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1
	UrsulaBuild_FinalSoftload:4.1.7.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Ursula:4.1.7.1.0.4
	Ursula_bp:4.1.7.1
	Ursula_31Mar1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spin_merge_28May97:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_16May97:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2002.12.05.20.45.09;	author srevill;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.48.34;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.48.34;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.04.09;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.27.05;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.30.50;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Changed to use objasm to avoid any LDR rN,[rN],#0 problems
Changed to use shared Makefiles
Numerous small 32 bit conversion improvements
Bugfix to PDriverPS,it was pulling LR not PC - this has been the case for
many years so not sure how it ever worked.
Due to a bug in objasm 3.27 this checkin will infact not build directly.
You must first
 - rename the PDriverDP dir to PDriverDP2
 - rename the PDriverPS dir to PDriverPS2
 - move the 2 source files of the same name up a directory
checked in in this way to minimise messing in CVS.

Version 4.47. Tagged as 'PDModules-4_47'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Core.OSByte

;----------------------------------------------------------------------------
;
; The ByteV interception routine
;
;----------------------------------------------------------------------------

interceptbyte
        Push    "R0,R11,LR"

; Is this an OS_Byte call we're not interested in, either because we're
; passing OS_Byte calls through to the real routines or because it's neither
; OS_Byte &DA (read/write bytes in VDU queue) nor OSByte &A3 (set dot pattern
; length)?

;; Also intercept OS_Byte &87 (read mode / char under cursor)
;; This can only return the mode number (of the sprite),
;; as the sprite buffer may be too small (address exceptions can occur).

;; Modified by DJS to use the global (and accurate) "spriteparams" variable
;; rather than per job "jobspriteparams" variable, which simply says which
;; sprite belongs to each job rather than where output is currently going.

          GBLL  NDR_fix87
NDR_fix87 SETL  {TRUE}

        LDRB    LR,passthrough
        TST     LR,#passthrough_byte
        Pull    "R0,R11,PC",NE

        AND     R0,R0,#&FF
        CMP     R0,#&DA                 ;NB C set if &DA, cleared if &A3/&87
        TEQNE   R0,#&A3
      [ NDR_fix87
        TEQNE   R0,#&87
      ]
        Pull    "R0,R11,PC",NE

        BCS     interceptbyte_readwritequeuelength      ;So branch if &DA

      [ NDR_fix87
        TEQ     R0,#&A3
        BEQ     interceptbyte_dotdashlength

;; This is OS_Byte &87.
;; If output is going to the sprite buffer, look up its mode directly.
;; This is to avoid address exceptions if the sprite is small.

; intercept but do precisely nothing if it is a counting pass
        LDR     LR, counting_pass
        CMP     LR, #0
        Pull    "R0,R11,LR,PC",NE
        LDR     LR,spriteparams + 2*4
        TEQ     LR,#0                   ; if output going to screen,
        Pull    "R0,R11,PC",EQ          ; pass it on
        LDR     R2,[LR,#spMode]         ; (always stored in absolute form)
        MOV     R1,#0                   ; character not recognised
        Pull    "R0,R11,LR,PC"          ; don't pass it on

interceptbyte_dotdashlength
      ]

; This is OS_Byte &A3. We're only interested in R1 = &F2, R2 <= 64.

        AND     LR,R2,#&FF
        CMP     LR,#64
        ANDLE   R0,R1,#&FF
        CMPLE   R0,#&F2
        Pull    "R0,R11,PC",NE

; intercept but do precisely nothing if it is a counting pass
        LDR     LR, counting_pass
        CMP     LR, #0
        Pull    "R0,R11,LR,PC",NE
        LDR     R11,currentws           ;Deal with 1-64 (and redundantly 0
        STRB    LR,dottedlength         ;  as well) by storing length
        CMP     LR,#0                   ;(NB clears V) Deal with 0 by setting
        BLEQ    defaultdotpattern       ;  default dot pattern
        STRVS   R0,[R13]
        Pull    "R0,R11,LR,PC"          ;Claim call

; This is OS_Byte &DA (read/write bytes in VDU queue). First call the next
; owner of the vector to set R2's return value, then do the main body of
; the call on our own variables.

interceptbyte_readwritequeuelength
; intercept but do precisely nothing if it is a counting pass
        LDR     LR, counting_pass
        CMP     LR, #0
        Pull    "R0,R11,LR,PC",NE
        TEQ     PC,PC
        ADRNE   R0,interceptbyte_cont + SVC_mode
        ADREQ   R0,interceptbyte_cont
        Push    "R0-R2,R12"
        MOV     R0,#&DA                 ;Don't change VDU's variable
        MOV     R1,#0
        MOV     R2,#255
        LDR     PC,[R13,#24]            ;Stack holds R0-R2,R12,R0,R11,LR
interceptbyte_cont
        STRVS   R0,[R13]
        Pull    "R0,R1,R12"             ;R0 holds original R1, R1 holds
                                        ;  original R2, R2 holds R2 to return
        LDRVC   R11,currentws
        LDRVCB  LR,wrchqueuepos         ;LR := old +ve queue position
        RSBVC   LR,LR,#0                ;LR := old -ve queue position
        ANDVC   R1,LR,R1                ;R1 := new -ve queue position
        EORVC   R1,R1,R0
        RSBVC   R1,R1,#0                ;R1 := new +ve queue position
        STRVCB  R1,wrchqueuepos         ;Update our queue position
        ANDVC   R1,LR,#&FF              ;Produce correct R1 to return

        STRVS   R0,[R13]
        Pull    "R0,R11,LR,PC"          ;Claim call

; Subroutine to set the default dot-dash pattern.

defaultdotpattern
        Push    "R0,R1,LR"
        ADR     LR,defaultdotpattern_data
        LDMIA   LR,{R0,R1,LR}
        STRB    LR,dottedlength
        ADR     LR,dottedpattern
        STMIA   LR,{R0,R1}
        CLRV
        Pull    "R0,R1,PC"

defaultdotpattern_data
        DCD     &AAAAAAAA
        DCD     &AAAAAAAA
        DCD     8

        END
@


4.1
log
@Initial revision
@
text
@d106 3
a108 1
        ADR     R0,interceptbyte_cont + SVC_mode        ;Fake return address
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
