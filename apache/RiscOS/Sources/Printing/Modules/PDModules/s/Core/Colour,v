head	4.1;
access;
symbols
	PDModules-4_64:4.1
	PDModules-4_63:4.1
	PDModules-4_62:4.1
	PDModules-4_61:4.1
	PDModules-4_60:4.1
	PDModules-4_59:4.1
	PDModules-4_58:4.1
	PDModules-4_57:4.1
	PDModules-4_56:4.1
	PDModules-4_55:4.1
	PDModules-4_54:4.1
	PDModules-4_53:4.1
	PDModules-4_52:4.1
	PDModules-4_51:4.1
	PDModules-4_50:4.1
	PDModules-4_49:4.1
	PDModules-4_48:4.1
	PDModules-4_47:4.1
	PDModules-4_46:4.1
	kbracey_32bit_merge:4.1
	PDModules-4_45:4.1
	PDModules-4_44-4_1_2_7:4.1
	PDModules-4_44-4_1_2_6:4.1
	PDModules-4_44-4_1_2_5:4.1
	PDModules-4_44-4_1_2_4:4.1
	PDModules-4_44-4_1_2_3:4.1
	PDModules-4_44-4_1_2_2:4.1
	PDModules-4_44-4_1_2_1:4.1
	kbracey_32bit:4.1.0.4
	kbracey_32bit_bp:4.1
	dellis_autobuild_BaseSW:4.1
	Ursula_merge:4.1.7.1
	PDModules-4_44:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1
	Ursula_RiscPC:4.1.7.1.0.6
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1
	UrsulaBuild_FinalSoftload:4.1.7.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Ursula:4.1.7.1.0.4
	Ursula_bp:4.1.7.1
	Ursula_31Mar1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spin_merge_28May97:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_16May97:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.48.31;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.48.31;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.03.41;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.26.49;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.30.35;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; Core.Colour

;----------------------------------------------------------------------------
;
; Colour handling subroutines
;
;----------------------------------------------------------------------------

; Routine to work out the RGB value that corresponds to a particular GCOL/
; tint combination.
;
; Entry: R1 = GCOL in bits 15-8, tint in bits 7-0
; Exit:  R1 = &BBGGRR00
;        NB does not return errors. V not significant on exit.

        [ Medusa
; 8bpp full palette: as for 8bpp non-full palette
; 16/32bpp: need to generate the &BBGGRR00 as for a
; standard palette from the GCOL and TINT
        ]

gcol_lookup
        Push    "R0,R2,R3,LR"
        LDR     R2,lgbpp

        [ Medusa
        TEQ     R2, #4                  ;16bpp?
        TEQNE   R2, #5                  ;  or 32bpp?
        BEQ     gcol_lookup_16or32      ;  then rip the bits out directly
        ]

        TEQ     R2,#3
        MOVNE   R0,R1,LSR #8
        MOVEQ   R1,R1,LSR #6            ;If 256 colour, convert to pixel
        ANDEQ   R0,R1,#&87              ;  value
        ANDEQ   R2,R1,#&38
        ORREQ   R0,R0,R2,LSL #1
        ANDEQ   R2,R1,#&40
        ORREQ   R0,R0,R2,LSR #3
gcol_lookup_common
        MOV     R1,#16
        BL      intcolour_readpalette
        MOV     R1,R2                   ;Return colour in R1
        Pull    "R0,R2,R3,PC"

        [ Medusa
gcol_lookup_16or32

        Debuga  Medusa, "gcol_lookup of ", R1

        MOV     R0, R1, LSR #8          ;GCol in R0
        MOV     R1, R1, LSR #6          ;Tint in R1 bits 0..1
        AND     R1, R1, #3              ;  with other bits clear

        AND     R2, R0, #4_0003         ;Extract red
        ORR     R2, R1, R2, LSL #2      ;  or the tint in
        MOV     R3, R2, LSL #15-4       ;  place it in destination bits

        AND     R2, R0, #4_0030         ;Extract green
        ORR     R2, R1, R2              ;  or the tint in
        ORR     R3, R3, R2, LSL #23-4   ;  place it in destination bits

        AND     R2, R0, #4_0300         ;Extract blue
        ORR     R2, R1, R2, LSR #2      ;  or the tint in
        ORR     R3, R3, R2, LSL #31-4   ;  place it in destination bits

        ORR     R1, R3, R3, LSR #4      ; duplicate nibbles

        Debug   Medusa, "Returns ", R1

        Pull    "R0,R2,R3,PC"
        ]
        

; A similar routine that looks up a pixel value, supplied in bits 0-7 of R1.

pixval_lookup
        Push    "R0,R2,R3,LR"
        MOV     R0,R1
        B       gcol_lookup_common

; Routine to read interesting variables about the current screen mode and
; do some preprocessing on them.

readcurvduvariables
        Push    "R0,R1,LR"
        ADR     R0,vduvariableswanted
        ADR     R1,fgmode
        SWI     XOS_ReadVduVariables
        ADRVC   R1,fggcol               ;Combine foreground GCOL and TINT
        LDMVCIA R1,{R0,R1}              ;  into a single word
        ORRVC   R1,R0,R1,LSL #8
        STRVC   R1,fggcol
        ADRVC   R1,bggcol               ;Combine background GCOL and TINT
        LDMVCIA R1,{R0,R1}              ;  into a single word
        ORRVC   R1,R0,R1,LSL #8
        STRVC   R1,bggcol
        STRVS   R0,[R13]
        Pull    "R0,R1,PC"

        ASSERT  fggcol = fgmode + 4
        ASSERT  fgrgb = fggcol + 4
        ASSERT  bgmode = fgrgb + 4
        ASSERT  bggcol = bgmode + 4
        ASSERT  bgrgb = bggcol + 4
        ASSERT  lgbpp = bgrgb + 4
        ASSERT  currxeig = lgbpp + 4
        ASSERT  curryeig = currxeig + 4

vduvariableswanted
        DCD     VduExt_GPLFMD
        DCD     VduExt_GFTint
        DCD     VduExt_GFCOL
        DCD     VduExt_GPLBMD
        DCD     VduExt_GBTint
        DCD     VduExt_GBCOL
        DCD     VduExt_Log2BPP
        DCD     VduExt_XEigFactor
        DCD     VduExt_YEigFactor
        DCD     -1

; Routine to determine the foreground or background colour.
; Entry: HI if background wanted, LS if foreground wanted
;        R1 contains set of 'disabled' flags to ignore.
; Exit:  disabled_colour bit of 'disabled' set or cleared as appropriate,
;        EQ set and R1 = &BBGGRR00 <=> all appropriate bits of disabled are
;        zero; R1 corrupt otherwise.

gcol_lookupfgorbg
        BHI     gcol_lookupbg

; Routine to determine the foreground colour.
; Entry: R1 contains set of 'disabled' flags to ignore.
; Exit:  disabled_colour bit of 'disabled' set or cleared as appropriate,
;        EQ set and R1 = &BBGGRR00 <=> all appropriate bits of disabled are
;        zero; R1 corrupt otherwise.
;        NB does not return errors. V insignificant on return

gcol_lookupfg
        Push    "R0,R2,R3,LR"
        ASSERT  fggcol = fgmode + 4
        ASSERT  fgrgb = fggcol + 4
        ADR     LR,fgmode
        B       gcol_lookupcommon

; Routine to determine the background colour.
; Entry: R1 contains set of 'disabled' flags to ignore.
; Exit:  disabled_colour bit of 'disabled' set or cleared as appropriate,
;        EQ set and R1 = &BBGGRR00 <=> all appropriate bits of disabled are
;        zero; R1 corrupt otherwise.
;        NB does not return errors. V insignificant on return

gcol_lookupbg
        Push    "R0,R2,R3,LR"
        ASSERT  bggcol = bgmode + 4
        ASSERT  bgrgb = bggcol + 4
        ADR     LR,bgmode

gcol_lookupcommon
        MOV     R3,R1
        LDMIA   LR,{R0,R1,R2}
        TST     R0,#7
        LDRB    LR,disabled
        ORRNE   LR,LR,#disabled_colour
        BICEQ   LR,LR,#disabled_colour
        STRB    LR,disabled
        BICS    LR,LR,R3
        Pull    "R0,R2,R3,PC",NE
        TEQ     R1,#0
        MOVMI   R1,R2
        BLPL    gcol_lookup
        TEQ     R0,R0                   ;Set EQ again
        Pull    "R0,R2,R3,PC"

        END
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
