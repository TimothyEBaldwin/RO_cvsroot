head	4.2;
access;
symbols
	PDModules-4_64:4.2
	PDModules-4_63:4.2
	PDModules-4_62:4.2
	PDModules-4_61:4.2
	PDModules-4_60:4.2
	PDModules-4_59:4.2
	PDModules-4_58:4.2
	PDModules-4_57:4.2
	PDModules-4_56:4.2
	PDModules-4_55:4.2
	PDModules-4_54:4.2
	PDModules-4_53:4.2
	PDModules-4_52:4.2
	PDModules-4_51:4.2
	PDModules-4_50:4.2
	PDModules-4_49:4.2
	PDModules-4_48:4.2
	PDModules-4_47:4.2
	PDModules-4_46:4.2
	kbracey_32bit_merge:4.1.4.1
	PDModules-4_45:4.2
	PDModules-4_44-4_1_2_7:4.1.4.1
	PDModules-4_44-4_1_2_6:4.1.4.1
	PDModules-4_44-4_1_2_5:4.1.4.1
	PDModules-4_44-4_1_2_4:4.1.4.1
	PDModules-4_44-4_1_2_3:4.1.4.1
	PDModules-4_44-4_1_2_2:4.1.4.1
	PDModules-4_44-4_1_2_1:4.1.4.1
	kbracey_32bit:4.1.0.4
	kbracey_32bit_bp:4.1
	dellis_autobuild_BaseSW:4.1
	Ursula_merge:4.1.7.1
	PDModules-4_44:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1
	Ursula_RiscPC:4.1.7.1.0.6
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1
	UrsulaBuild_FinalSoftload:4.1.7.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Ursula:4.1.7.1.0.4
	Ursula_bp:4.1.7.1
	Ursula_31Mar1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spin_merge_28May97:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_16May97:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2001.01.09.13.59.35;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.48.33;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.48.33;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.04.01;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	2000.10.18.11.32.02;	author sbrodie;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.27.00;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.30.45;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@  Merge of 32-bit branch.
Detail:
  These modules are now thought to work.
Admin:
  This module has received some testing of both 26-bit and 32-bit
    builds and is believed to function correctly.

Version 4.45. Tagged as 'PDModules-4_45'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Core.Intercept


;----------------------------------------------------------------------------
;
; Interception subroutines
;
;----------------------------------------------------------------------------

; Routine to initialise the interception data to its standard state just
; after the printer driver is initialised or after a soft reset. Assumptions
; made:
;   (a) Output is directed to the screen at the time.
;   (b) We are not in a Wimp error report.
;   (c) No interceptions are currently in effect.
; All three of these assumptions are necessarily true on a soft reset, and
; (c) is necessarily true on initialisation. It is a mistake to initialise
; the PDriver module when (a) or (b) is not true.
;   NB does not return errors. V insignificant on exit.

initintercept
        Push    "R0,LR"
        MOV     R0,#intercept_all:SHL:8
        STR     R0,intercepting
        ASSERT  (:INDEX:intercepting:AND:3) = 0
        ASSERT  shouldintercept = intercepting + 1
        ASSERT  passthrough = shouldintercept + 1
        ASSERT  wimpreportflag = passthrough + 1
        ADR     R0,spriteparams
        BL      setscreenparams
        Pull    "R0,PC"

; Routine to adjust the interceptions being made at a time that the
; 'shouldintercept' byte has not changed, but other circumstances (e.g.
; existence of an active print job, output to sprite status, Wimp error
; reporting) have.
;   If an error occurs during OS_Claim or OS_Release, an attempt will be made
; to clear all interceptions. The error will be reported only if V was clear
; on entry (i.e. there was no error). Under all other circumstances, the
; routine preserves all registers and flags.

adjustintercept
        EntryS  "R0-R7,R10,R11"
        LDRB    R3,shouldintercept
        B       changeintercept_common

; Routine to change the current interceptions to fit the circumstances. The
; rules are:
;   (a) If a Wimp error is currently being reported, turn off all
;       interceptions.
;   (b) If there is no active print job, turn off all interceptions.
;   (c) If there is an active print job and output is neither directed to
;       the screen nor to that job's sprite, turn off all interceptions.
;   (d) Otherwise set up the interceptions indicated by 'shouldintercept'.
;
; R3 contains the interceptions wanted on entry.
;   If an error occurs during OS_Claim or OS_Release, an attempt will be made
; to clear all interceptions. The error will be reported only if V was clear
; on entry (i.e. there was no error). Under all other circumstances, the
; routine preserves all registers and flags.

changeintercept
        ALTENTRY
        STRB    R3,shouldintercept
changeintercept_common
        MOV     R7,#0
changeintercept_common2
        TEQ     R3,#0                           ;No point checking up on
                                                ;  cases above if we're
                                                ;  turning off interceptions
        LDRNEB  LR,wimpreportflag               ;Otherwise, check for being
        TEQNE   LR,#1                           ;  inside Wimp error report

        ASSERT  :BASE:currenthandle = R12       ;Otherwise, check for there
        ASSERT  :INDEX:currenthandle = 0        ;  being a print job, loading
        ASSERT  currentws = currenthandle + 4   ;  print job workspace
        LDMNEIA R12,{R10,R11}                   ;  pointer if there is
        TEQNE   R10,#0
        BEQ     changeintercept_nointercepts

        ADR     LR,spriteparams                 ;Otherwise, check output
        LDMIA   LR,{R0-R2}                      ;  destination
        ADR     LR,jobspriteparams
        LDMIA   LR,{R4-R6}
        TEQ     R0,R4                           ;If output to job's sprite
        TEQEQ   R1,R5
        TEQEQ   R2,R6
        TEQNE   R2,#0                           ;  or output to screen,
        BEQ     changeintercept_intercepts      ;  use R3 value supplied
changeintercept_nointercepts
        MOV     R3,#0                           ;No intercepts wanted
changeintercept_intercepts

; We now know exactly what intercepts we want. Find out what intercepts we
; have got and which need changing. If none, return quickly, restoring flags.

        LDRB    R4,intercepting
        EORS    R5,R3,R4
        BEQ     changeintercept_exit

        MOV     R2,R12                          ;Set up common value

; Deal with change to OS_Wrch interception.

        TST     R5,#intercept_wrch
        BEQ     changeintercept_notwrch
        MOV     R0,#WrchV
        ADRL    R1,interceptwrch
        TST     R3,#intercept_wrch
        BNE     changeintercept_wrchon
        SWI     XOS_Release
        B       changeintercept_wrchdone
changeintercept_wrchon
        SWI     XOS_Claim
        MOV     R1,#-1
        BL      broadcast_vdu5_changed
changeintercept_wrchdone
        BVS     changeintercept_error
        EOR     R4,R4,#intercept_wrch
changeintercept_notwrch

; Deal with change to ColourTrans calls interception.

        TST     R5,#intercept_col
        BEQ     changeintercept_notcol
        MOV     R0,#ColourV
        ADRL    R1,interceptcolour
        TST     R3,#intercept_col
        BNE     changeintercept_colon
        SWI     XOS_Release
        B       changeintercept_coldone
changeintercept_colon
        SWI     XOS_Claim
changeintercept_coldone
        BVS     changeintercept_error
        EOR     R4,R4,#intercept_col
changeintercept_notcol

; Deal with change to Draw calls interception.

        TST     R5,#intercept_draw
        BEQ     changeintercept_notdraw
        MOV     R0,#DrawV
        ADRL    R1,interceptdraw
        TST     R3,#intercept_draw
        BNE     changeintercept_drawon
        SWI     XOS_Release
        B       changeintercept_drawdone
changeintercept_drawon
        SWI     XOS_Claim
changeintercept_drawdone
        BVS     changeintercept_error
        EOR     R4,R4,#intercept_draw
changeintercept_notdraw

; Deal with change to OS_SpriteOp interception.

        TST     R5,#intercept_spr
        BEQ     changeintercept_notspr
        MOV     R0,#SpriteV
        ADRL    R1,interceptsprite
        TST     R3,#intercept_spr
        BNE     changeintercept_spron
        SWI     XOS_Release
        B       changeintercept_sprdone
changeintercept_spron
        SWI     XOS_Claim
changeintercept_sprdone
        BVS     changeintercept_error
        EOR     R4,R4,#intercept_spr
changeintercept_notspr

; Deal with change to OS_Byte interception.

        TST     R5,#intercept_byte
        BEQ     changeintercept_notbyte
        MOV     R0,#ByteV
        ADRL    R1,interceptbyte
        TST     R3,#intercept_byte
        BNE     changeintercept_byteon
        SWI     XOS_Release
        B       changeintercept_bytedone
changeintercept_byteon
        SWI     XOS_Claim
changeintercept_bytedone
        BVS     changeintercept_error
        EOR     R4,R4,#intercept_byte
changeintercept_notbyte

; Deal with changes to font manager calls interception

        TST     R5,#intercept_font
        BEQ     changeintercept_notfont
        MOV     R1,#Service_Print
        TST     R3,#intercept_font
        MOVNE   R2,#-1
        MOVEQ   R2,#0
        SWI     XOS_ServiceCall
        EOR     R4,R4,#intercept_font
changeintercept_notfont

; Deal with changes to JPEG plot interception

        TST     R5,#intercept_jpeg
        BEQ     changeintercept_notjpeg
        TST     R3,#intercept_jpeg
        MOVNE   R0,#1
        MOVEQ   R0,#0
        SWI     XJPEG_PDriverIntercept
        EOR     R4,R4,#intercept_jpeg
changeintercept_notjpeg

        STRB    R4,intercepting
        EXITS

changeintercept_error
        STRB    R4,intercepting
        TEQ     R7,#0                   ;Try to clear intercepts if this
        BLEQ    changeintercept_clear   ;  is not a recursive call. Note V
                                        ;  is set, so R0 and V are preserved
        [ Proc_SavedCPSR
        LDR     LR,[R13,#Proc_RegOffset-4]    ; Recover entry flags (32-bit)
        |
        LDR     LR,[R13,#Proc_RegOffset+10*4] ; Recover entry flags (26-bit)
        ]
        TST     LR,#V_bit
        BNE     changeintercept_exit
        STREQ   R0,[R13,#Proc_RegOffset]
        EXIT                            ;Note V is still set

changeintercept_clear
        ALTENTRY
        MOV     R3,#0
        STRB    R3,shouldintercept
        MOV     R7,#-1
        B       changeintercept_common2

changeintercept_exit
        EXITS

; A subroutine to broadcast the information that VDU 5 characters may have
; been redefined to all print jobs. Entered with R1 = character that may have
; changed, or anything else to mean that all characters may have changed.
; Preserves all registers and flags.

broadcast_vdu5_changed
        EntryS  "R11"
        ADR     R11,printjoblist - (:INDEX:joblink)
        ASSERT  :BASE:joblink = R11
broadcast_vdu5_changed_loop
        LDR     R11,joblink
        TEQ     R11,#0
        EXITS   EQ
        BL      vdu5_changed
        B       broadcast_vdu5_changed_loop

        END
@


4.1
log
@Initial revision
@
text
@d57 1
a57 1
        Push    "R0-R7,R10,R11,LR"
d77 1
a77 1
        Push    "R0-R7,R10,R11,LR"
d113 1
a113 1
        Pull    "R0-R7,R10,R11,PC",EQ,^
d228 1
a228 1
        Pull    "R0-R7,R10,R11,PC",,^
d235 5
a239 1
        LDR     LR,[R13,#40]            ;Recover entry LR value
d241 3
a243 3
        Pull    "R0-R7,R10,R11,PC",NE,^
        STR     R0,[R13]
        Pull    "R0-R7,R10,R11,PC"      ;Note V is still set
d246 1
a246 1
        Push    "R0-R7,R10,R11,LR"
d252 3
d261 1
a261 1
        Push    "R11,LR"
d267 1
a267 1
        Pull    "R11,PC",EQ,^
@


4.1.4.1
log
@  First attempt at 32-bit compatible modules.
Admin:
  Tested that modules build 26-bit and 32-bit.
  Requires HdrSrc-1_05 or later.

Version 4.44, 4.1.2.1. Tagged as 'PDModules-4_44-4_1_2_1'
@
text
@d57 1
a57 1
        EntryS  "R0-R7,R10,R11"
d77 1
a77 1
        ALTENTRY
d113 1
a113 1
        BEQ     changeintercept_exit
d228 1
a228 1
        EXITS
d235 1
a235 5
        [ Proc_SavedCPSR
        LDR     LR,[R13,#Proc_RegOffset-4]    ; Recover entry flags (32-bit)
        |
        LDR     LR,[R13,#Proc_RegOffset+10*4] ; Recover entry flags (26-bit)
        ]
d237 3
a239 3
        BNE     changeintercept_exit
        STREQ   R0,[R13,#Proc_RegOffset]
        EXIT                            ;Note V is still set
d242 1
a242 1
        ALTENTRY
a247 3
changeintercept_exit
        EXITS

d254 1
a254 1
        EntryS  "R11"
d260 1
a260 1
        EXITS   EQ
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
