head	4.2;
access;
symbols
	PDModules-4_64:4.2
	PDModules-4_63:4.2
	PDModules-4_62:4.2
	PDModules-4_61:4.2
	PDModules-4_60:4.2
	PDModules-4_59:4.2
	PDModules-4_58:4.2
	PDModules-4_57:4.2
	PDModules-4_56:4.2
	PDModules-4_55:4.2
	PDModules-4_54:4.2
	PDModules-4_53:4.2
	PDModules-4_52:4.2
	PDModules-4_51:4.2
	PDModules-4_50:4.2
	PDModules-4_49:4.2
	PDModules-4_48:4.2
	PDModules-4_47:4.2
	PDModules-4_46:4.2
	kbracey_32bit_merge:4.1.4.1
	PDModules-4_45:4.2
	PDModules-4_44-4_1_2_7:4.1.4.1
	PDModules-4_44-4_1_2_6:4.1.4.1
	PDModules-4_44-4_1_2_5:4.1.4.1
	PDModules-4_44-4_1_2_4:4.1.4.1
	PDModules-4_44-4_1_2_3:4.1.4.1
	PDModules-4_44-4_1_2_2:4.1.4.1
	PDModules-4_44-4_1_2_1:4.1.4.1
	kbracey_32bit:4.1.0.4
	kbracey_32bit_bp:4.1
	dellis_autobuild_BaseSW:4.1
	Ursula_merge:4.1.7.1
	PDModules-4_44:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1
	Ursula_RiscPC:4.1.7.1.0.6
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1
	UrsulaBuild_FinalSoftload:4.1.7.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Ursula:4.1.7.1.0.4
	Ursula_bp:4.1.7.1
	Ursula_31Mar1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spin_merge_28May97:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_16May97:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2001.01.09.13.59.35;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.48.32;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.48.32;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.03.54;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	2000.10.18.11.32.02;	author sbrodie;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.26.55;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.30.40;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@  Merge of 32-bit branch.
Detail:
  These modules are now thought to work.
Admin:
  This module has received some testing of both 26-bit and 32-bit
    builds and is believed to function correctly.

Version 4.45. Tagged as 'PDModules-4_45'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Core.Draw

;----------------------------------------------------------------------------
;
; The DrawV interception routine
;
;----------------------------------------------------------------------------

interceptdraw
        Push    "LR"

; Is this Draw output we're not interested in?
        LDRB    LR,passthrough
        TST     LR,#passthrough_draw
        Pull    "PC",NE

; intercept but do precisely nothing if it is a counting pass
        LDR     LR, counting_pass
; Debug   PageBox, "draw counting_pass = ",LR
        CMP     LR, #0
        Pull    "LR,PC",NE

; Intercept Draw_Fill, Draw_Stroke and Draw_ProcessPath calls.

        TEQ     R8,#DrawReas_Fill
        BEQ     intdraw_fill
        TEQ     R8,#DrawReas_Stroke
        BEQ     intdraw_stroke
        TEQ     R8,#DrawReas_ProcessPath
        Pull    "PC",NE

; This is a Draw_ProcessPath call. We can hand it on to the Draw module if
; it isn't meant to produce screen output. Otherwise, we produce an error.

        SUB     LR,R7,#1
        CMP     LR,#2-1
        Pull    "PC",HI

        Push    "R10,R11"
        ASSERT  :BASE:currenthandle = R12
        ASSERT  :INDEX:currenthandle = 0
        ASSERT  currentws = currenthandle + 4
        LDMIA   R12,{R10,R11}           ;R10:=currenthandle, R11:=currentws
        BL      checkpersistenterror
        BVS     intdraw_process_persistentreturn
        ADR     r0, ErrorBlock_PrintCantDrawPlot
        BL      LookupSingle            ; Always sets the V flag
        BL      makepersistenterror
intdraw_process_persistentreturn
        Pull    "R10,R11,PC"

        MakeInternatErrorBlock PrintCantDrawPlot,,NoDPlot


; This is a Draw_Fill call. Main problem is whether printer drivers can
; manage the fill style requested. At present, we only allow fill styles
; 2_0000X0, 2_0110X0, 2_1000X0, 2_1100X0, 2_1110X0 and 2_1111X0.

intdraw_fill
        Push    "R1,R9-R11"
        MOV     R9,R1                   ;Put fill style somewhere safe

; Pick up current job's workspace, check for persistent errors, enable
; ESCAPEs and pass through recursive OS_WriteC's

        ASSERT  :BASE:currenthandle = R12
        ASSERT  :INDEX:currenthandle = 0
        ASSERT  currentws = currenthandle + 4
        LDMIA   R12,{R10,R11}           ;R10:=currenthandle, R11:=currentws

        BL      checkpersistenterror
        BVS     intdraw_fill_persistentreturn

        BL      enableescapes

; Flush any buffered VDU 5 characters

        BLVC    vdu5_flush
        BVS     intdraw_fill_return

; Get foreground colour. Return if no plotting wanted; otherwise set the
; colour.

      [ PrinterDrawBit
        TST     R9, #1:SHL:16
        BIC     R9, R9, #1:SHL:16
        BNE     intdraw_fill_colour_setup
      ]
        MOV     R1,#disabled_vdu
        BL      gcol_lookupfg
        BNE     intdraw_fill_return
        BL      colour_setrealrgb
        BVS     intdraw_fill_return

; Then test fill style to call the right routine.
intdraw_fill_colour_setup
        ADDS    R1,R9,#0                ;Recover fill style (clears V!)
        BICS    R9,R1,#&3E              ;Disallow out of range fill styles,
        MOVNE   R9,#2_1000000           ;  and negative & positive rules,
                                        ;  by addressing a fake table entry
        ANDEQ   R9,R1,#2_111100         ;Otherwise address the correct entry
        MOV     LR,PC                   ;Table-driven subroutine call
        ADD     PC,PC,R9
        B       intdraw_fill_return

        B       intdraw_maybenothing    ;2_0000X0
        B       intdraw_badfillstyle    ;2_0001X0
        B       intdraw_badfillstyle    ;2_0010X0
        B       intdraw_badfillstyle    ;2_0011X0
        B       intdraw_badfillstyle    ;2_0100X0
        B       intdraw_badfillstyle    ;2_0101X0
        B       draw_boundaryonly       ;2_0110X0
        B       intdraw_badfillstyle    ;2_0111X0
        B       draw_interiornobdry     ;2_1000X0
        B       intdraw_badfillstyle    ;2_1001X0
        B       intdraw_badfillstyle    ;2_1010X0
        B       intdraw_badfillstyle    ;2_1011X0
        B       draw_interior           ;2_1100X0
        B       intdraw_badfillstyle    ;2_1101X0
        B       draw_interiorwithbdry   ;2_1110X0
        B       plot_fillclipbox        ;2_1111X0
intdraw_badfillstyle                    ;2_1000000 - a fake entry
        ADR     r0, ErrorBlock_PrintCantThisFill
        B       LookupSingle            ; Will set V and return to LR

        MakeInternatErrorBlock PrintCantThisFill,,NoFill

intdraw_fill_return
        BL      disableandcheckescapes
        BLVS    makepersistenterror
intdraw_fill_persistentreturn
        Pull    "R1,R9-R11,LR,PC"       ;Return from this routine

; 2_0000X0 - this asks us to plot nothing at all or to plot according to the
; default rule. In the first case, the details of the path, transformation,
; etc., do not affect what happens!

intdraw_maybenothing
        TEQ     R1,#0
        MOVNE   PC,LR
        Push    "R1,LR"
        MOV     R1,#&30
        BL      draw_interior
        Pull    "R1,PC"

; This is a Draw_Stroke call. A number of parameters need vetting:
; (a) if the thickness is zero, the fill style should be 2_XX00XX, 2_XX10XX
;     or 2_XX11XX, possibly with the top bit set.
; (b) if the thickness is non-zero, the fill style should be 2_000000,
;     2_100000, 2_110000, 2_111000 or 2_111100, possibly with the top bit
;     set.

intdraw_stroke
        Push    "R1,R9-R11"
        MOV     R9,R1                   ;Put fill style somewhere safe

; Pick up current job's workspace, check for persistent errors, enable
; ESCAPEs and pass through recursive OS_WriteC's

        ASSERT  :BASE:currenthandle = R12
        ASSERT  :INDEX:currenthandle = 0
        ASSERT  currentws = currenthandle + 4
        LDMIA   R12,{R10,R11}           ;R10:=currenthandle, R11:=currentws

        BL      checkpersistenterror
        BVS     intdraw_stroke_persistentreturn

        BL      enableescapes

; Flush any buffered VDU 5 characters

        BLVC    vdu5_flush
        BVS     intdraw_stroke_return

; Set up colour
      [ PrinterDrawBit
        TST     R9, #1:SHL:16
        BIC     R9, R9, #1:SHL:16
        BNE     intdraw_stroke_colour_setup
      ]

        MOV     R1,#disabled_vdu
        BL      gcol_lookupfg
        BNE     intdraw_stroke_return
        BL      colour_setrealrgb
        BVS     intdraw_stroke_return

intdraw_stroke_colour_setup
        MOV     R1,R9                           ;Recover fill style

; Split according to whether this is zero or non-zero thickness

        TEQ     R4,#0
        BEQ     intdraw_stroke_thin

; Check the fill style

        BICS    R9,R1,#&8000003C        ;Disallow out of range fill styles,
        MOVNE   R9,#2_1000000           ;  or other than non-zero rules,
                                        ;  by addressing a fake table entry
        ANDEQ   R9,R1,#2_111100         ;Otherwise address correct entry
        MOV     LR,PC                   ;Table-driven subroutine call
        ADD     PC,PC,R9
        B       intdraw_stroke_return

        B       draw_stroke             ;2_000000
        B       intdraw_badfillstyle    ;2_000100
        B       intdraw_badfillstyle    ;2_001000
        B       intdraw_badfillstyle    ;2_001100
        B       intdraw_badfillstyle    ;2_010000
        B       intdraw_badfillstyle    ;2_010100
        B       intdraw_badfillstyle    ;2_011000
        B       intdraw_badfillstyle    ;2_011100
        B       draw_strokenobdry       ;2_100000
        B       intdraw_badfillstyle    ;2_100100
        B       intdraw_badfillstyle    ;2_101000
        B       intdraw_badfillstyle    ;2_101100
        B       draw_stroke             ;2_110000
        B       intdraw_badfillstyle    ;2_110100
        B       draw_strokewithbdry     ;2_111000
        B       plot_fillclipbox        ;2_111100
        B       intdraw_badfillstyle    ;2_1000000 - a fake entry

; Zero thickness. Switch according to the fill style

intdraw_stroke_thin
        BICS    R9,R1,#&8000003F        ;Change out of range fill style
        MOVNE   R9,#2_000100            ;  to one we cannot handle
        ANDEQS  R9,R9,#&3F              ;Otherwise apply default
        MOVEQ   R9,#2_011000
        AND     R9,R9,#2_001100
        CLRV
        MOV     LR,PC                   ;Table-driven subroutine call
        ADD     PC,PC,R9
        B       intdraw_stroke_return

        MOV     pc, lr                  ;2_XX00XX
        B       intdraw_badfillstyle    ;2_XX01XX
        B       draw_thinstroke         ;2_XX10XX
        B       plot_fillclipbox        ;2_XX11XX

intdraw_stroke_return
        BL      disableandcheckescapes
        BLVS    makepersistenterror
intdraw_stroke_persistentreturn
        Pull    "R1,R9-R11,LR,PC"       ;Return from this routine

        END
@


4.1
log
@Initial revision
@
text
@d111 1
a111 1
        MOV     R1,R9                   ;Recover fill style
d154 1
a154 1
        Return  NE
d246 1
d251 1
a251 1
        Return                          ;2_XX00XX
@


4.1.4.1
log
@  First attempt at 32-bit compatible modules.
Admin:
  Tested that modules build 26-bit and 32-bit.
  Requires HdrSrc-1_05 or later.

Version 4.44, 4.1.2.1. Tagged as 'PDModules-4_44-4_1_2_1'
@
text
@d111 1
a111 1
        ADDS    R1,R9,#0                ;Recover fill style (clears V!)
d154 1
a154 1
        MOVNE   PC,LR
a245 1
        CLRV
d250 1
a250 1
        MOV     pc, lr                  ;2_XX00XX
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
