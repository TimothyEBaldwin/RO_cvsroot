head	4.6;
access;
symbols
	MakePSFont-1_16:4.5
	MakePSFont-1_15:4.5
	MakePSFont-1_14:4.5
	RO_5_07:4.5
	MakePSFont-1_13:4.5
	MakePSFont-1_12:4.5
	MakePSFont-1_11:4.5
	MakePSFont-1_10:4.4
	dellis_autobuild_BaseSW:4.4
	Ursula_merge:4.1.3.1
	MakePSFont-1_09:4.4
	sbrodie_sedwards_16Mar2000:4.3
	dcotton_autobuild_BaseSW:4.5
	nturton_MakePSFont-1_08:4.3
	Spin_merge:4.1.7.1
	Spin_merge_29Jan1999:4.1.7.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.3.1
	Ursula_RiscPC:4.1.3.1.0.4
	rthornb_UrsulaBuild-19Aug1998:4.1.3.1
	UrsulaBuild_FinalSoftload:4.1.3.1
	rthornb_UrsulaBuild-12Aug1998:4.1.3.1
	aglover_UrsulaBuild-05Aug1998:4.1.3.1
	rthornb_UrsulaBuild-29Jul1998:4.1.3.1
	Ursula:4.1.3.1.0.2
	Ursula_bp:4.1.3.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Ursula_31Mar1998:4.3
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spin_merge_28May97:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.2.0.4
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.6
date	2018.05.22.19.39.32;	author rsprowson;	state dead;
branches;
next	4.5;
commitid	Ut0fDWoya884skDA;

4.5
date	2000.11.27.14.33.10;	author sbrodie;	state Exp;
branches;
next	4.4;

4.4
date	2000.08.29.16.52.05;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	97.05.28.12.18.28;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.01.22.15.57.24;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.48.22;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.48.22;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.02.50;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.26.26;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.30.17;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Use _swix() instead of local swi()
Change to use _swix() which packs the in/out vararg selection into a single register, so resulting in a lot less stuff being stacked for SWIs with more than 2 parameters.
Note that because ZEROREGS was {TRUE} a little care is needed with Font_ReadFontMetrics which needs lots of 0's for the read operation, and these were not previously explicitly shown.
Remove redundant misc.c.

Version 1.17. Tagged as 'MakePSFont-1_17'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; extern os_error *swi (int swinum, ...)
; usage: swi (swinum, R0, 33, R1, "foo", END)
; usage: swi (swinum, NONX, R0, 33, R1, "foo", END)
; usage: swi (swinum, R0, 33, R1, "foo", OUT, R0, &var0, R4, &var4, END)
; usage: swi (swinum, R0, 33, R1, "foo", OUT, R0, &var0, CARRY, &carry, END)

;mjs changes to use OS_CallASWI
                GET     Hdr:ListOpts
                GET     Hdr:APCS.<APCS>

                GBLL    ZEROREGS
ZEROREGS        SETL    {TRUE}                  ; If true, unspecified args default to zero.

F_END           *       20
F_OUT           *       21
F_CARRY         *       22
F_NONX          *       23

SWIMASK         *       &ff000000
SWIXBIT         *       &00020000

XOS_CallASWI    *       &2006f

                AREA    |C$$code|, CODE, READONLY

                EXPORT  swi

swi             MOV     ip, sp                          ; APCS entry
                STMFD   sp!, {r1-r3}                    ; varargs preparation
                STMFD   sp!, {r4-r9, fp, ip, lr, pc}    ; APCS entry
                SUB     fp, ip, #16                     ; APCS entry

                ADD     lr, fp, #4              ; point to first varargs argument

                BIC     r4, r0, #SWIMASK        ; build SWI number ...
                ORR     r4, r4, #SWIXBIT

        [ ZEROREGS
                MOV     r0, #0                  ; extend stack with zeros
                MOV     r1, #10                 ; room for 10 registers
clear           STR     r0, [sp, #-4]!
                SUBS    r1, r1, #1
                BNE     clear
        |
                SUB     sp, sp, #40             ; registers contain junk by default
        ]

collect         LDR     r0, [lr], #4            ; get next arg

                TEQ     r0, #F_NONX             ; is it "no X bit"?
                BICEQ   r4, r4, #SWIXBIT        ; yes, clear X bit
                BEQ     collect

                TEQ     r0, #F_END              ; if it's END
                SUBEQ   lr, lr, #4              ; then back up so we see it again...
                TEQNE   r0, #F_OUT              ; stop collecting if it's END or OUT,

; XXX assume r0 now holds valid register number

                LDRNE   r1, [lr], #4            ; ... get the argument...
                STRNE   r1, [sp, r0, LSL #2]    ; ... and put it in the array

                BNE     collect                 ; continue

                MOV     r0, sp                  ; save address of register table
                STMFD   sp!,{r10,lr}
                MOV     r10,r4
                LDMIA   r0, {r0-r9}             ; get the registers
                SWI     XOS_CallASWI

                LDMFD   sp!,{r10,lr}
                STMIA   sp, {r0-r9}             ; save the results back

                MOVVC   r0, #0                  ; if no error, return zero (otherwise return r0)
                MOVCC   r1, #0                  ; set r1 to 1 or 0 as carry flag
                MOVCS   r1, #1

scatter         LDR     r2, [lr], #4            ; get the next argument
                TEQ     r2, #F_END              ; is it END?
                BEQ     finished
                TEQ     r2, #F_CARRY            ; is it carry?
                MOVEQ   r2, r1                  ; yes, use the carry flag
                LDRNE   r2, [sp, r2, LSL #2]    ; no, so get [r2] register's value back
                LDR     r3, [lr], #4            ; get address of user's variable
                STR     r2, [r3]                ; store the value there
                B       scatter

finished
                Return  "r4-r9", fpbased        ; APCS exit

                END
@


4.5
log
@  32-bit compatible.
Detail:
  modulefp_enable/modulefp_disable called to permit the floating point
    code to preserve the FP registers correctly.
Admin:
  Built.

Version 1.11. Tagged as 'MakePSFont-1_11'
@
text
@@


4.4
log
@Remerged RISC OS 3.70 StrongARM compatibility changes that got lost during
a previous Spinner branch merge.

Tagged as MakePSFont-1_09.
@
text
@d23 2
a28 17
r0              RN      0
r1              RN      1
r2              RN      2
r3              RN      3
r4              RN      4
r5              RN      5
r6              RN      6
r7              RN      7
r8              RN      8
r9              RN      9
sl              RN      10
fp              RN      11
ip              RN      12
sp              RN      13
lr              RN      14
pc              RN      15

d77 1
a77 1
                
d92 1
a92 1
                
d103 2
a104 1
finished        LDMEA   fp, {r4-r9, fp, sp, pc}^        ; APCS exit
@


4.3
log
@Spinner branch taken
@
text
@d15 1
d22 4
a25 2
		GBLL	ZEROREGS
ZEROREGS	SETL	{TRUE}			; If true, unspecified args default to zero.
d37 2
a38 2
sl		RN	10
fp		RN	11
d44 9
a52 9
F_END		*	20
F_OUT		*	21
F_CARRY		*	22
F_NONX		*	23

SWIMASK		*	&ff000000
SWIINST		*	&ef000000
SWIXBIT		*	&00020000
RETINST		*	&E51FF004		; LDR	pc, [pc, #-4]
d58 29
a86 30
swi		MOV	ip, sp				; APCS entry
		STMFD	sp!, {r1-r3}			; varargs preparation
		STMFD	sp!, {r4-r9, fp, ip, lr, pc}	; APCS entry
		SUB	fp, ip, #16			; APCS entry

		ADD	lr, fp, #4		; point to first varargs argument

                BIC     r4, r0, #SWIMASK	; build SWI instruction ...
                ORR     r4, r4, #SWIINST	; ... assuming XBit version for now
		ORR	r4, r4, #SWIXBIT

	[ ZEROREGS
		MOV	r0, #0			; extend stack with zeros
		MOV	r1, #10			; room for 10 registers
clear		STR	r0, [sp, #-4]!
		SUBS	r1, r1, #1
		BNE	clear
	|
		SUB	sp, sp, #40		; registers contain junk by default
	]

collect		LDR	r0, [lr], #4		; get next arg

		TEQ	r0, #F_NONX		; is it "no X bit"?
		BICEQ	r4, r4, #SWIXBIT	; yes, clear X bit
		BEQ	collect

		TEQ	r0, #F_END		; if it's END
		SUBEQ	lr, lr, #4		; then back up so we see it again...
		TEQNE	r0, #F_OUT		; stop collecting if it's END or OUT,
d90 27
a116 35
		LDRNE	r1, [lr], #4		; ... get the argument...
		STRNE	r1, [sp, r0, LSL #2]	; ... and put it in the array
		
		BNE	collect			; continue

; Build the SWI on the stack.  Return with an LDR from the stack, as we don't
; have any safe registers (can't rely on lr because we might already be in
; supervisor mode).

		MOV	r0, sp			; save address of register table
		LDR	r5, =RETINST		; LDR pc, [pc, #-4]
		ADD	r6, pc, #return-.-8	; generate return address
		STMFD	sp!, {r4-r6, lr}	; Relies on ordering imposed by STM
		LDMIA	r0, {r0-r9}		; get the registers
		MOV	pc, sp			; branch to the bottom of the stack

; If all goes well, we regain control after the SWI right here:-

return		ADD	sp, sp, #12		; throw away the two instructions and addr
		LDR	lr, [sp], #4		; regain address of argument list
		STMIA	sp, {r0-r9}		; save the results back

		MOVVC	r0, #0			; if no error, return zero (otherwise return r0)
		MOVCC	r1, #0			; set r1 to 1 or 0 as carry flag
		MOVCS	r1, #1
		
scatter		LDR	r2, [lr], #4		; get the next argument
		TEQ	r2, #F_END		; is it END?
		BEQ	finished
		TEQ	r2, #F_CARRY		; is it carry?
		MOVEQ	r2, r1			; yes, use the carry flag
		LDRNE	r2, [sp, r2, LSL #2]	; no, so get [r2] register's value back
		LDR	r3, [lr], #4		; get address of user's variable
		STR	r2, [r3]		; store the value there
		B	scatter
d118 1
a118 1
finished	LDMEA	fp, {r4-r9, fp, sp, pc}^	; APCS exit
d120 1
a120 1
		END
@


4.2
log
@Version RO_3_70 taken
@
text
@a14 1

d21 2
a22 4
;mjs changes to use OS_CallASWI

                GBLL    ZEROREGS
ZEROREGS        SETL    {TRUE}                  ; If true, unspecified args default to zero.
d34 2
a35 2
sl              RN      10
fp              RN      11
d41 9
a49 9
F_END           *       20
F_OUT           *       21
F_CARRY         *       22
F_NONX          *       23

SWIMASK         *       &ff000000
SWIXBIT         *       &00020000

XOS_CallASWI    *       &2006f
d55 30
a84 29
swi             MOV     ip, sp                          ; APCS entry
                STMFD   sp!, {r1-r3}                    ; varargs preparation
                STMFD   sp!, {r4-r9, fp, ip, lr, pc}    ; APCS entry
                SUB     fp, ip, #16                     ; APCS entry

                ADD     lr, fp, #4              ; point to first varargs argument

                BIC     r4, r0, #SWIMASK        ; build SWI number ...
                ORR     r4, r4, #SWIXBIT

        [ ZEROREGS
                MOV     r0, #0                  ; extend stack with zeros
                MOV     r1, #10                 ; room for 10 registers
clear           STR     r0, [sp, #-4]!
                SUBS    r1, r1, #1
                BNE     clear
        |
                SUB     sp, sp, #40             ; registers contain junk by default
        ]

collect         LDR     r0, [lr], #4            ; get next arg

                TEQ     r0, #F_NONX             ; is it "no X bit"?
                BICEQ   r4, r4, #SWIXBIT        ; yes, clear X bit
                BEQ     collect

                TEQ     r0, #F_END              ; if it's END
                SUBEQ   lr, lr, #4              ; then back up so we see it again...
                TEQNE   r0, #F_OUT              ; stop collecting if it's END or OUT,
d88 35
a122 27
                LDRNE   r1, [lr], #4            ; ... get the argument...
                STRNE   r1, [sp, r0, LSL #2]    ; ... and put it in the array
                
                BNE     collect                 ; continue

                MOV     r0, sp                  ; save address of register table
                STMFD   sp!,{r10,lr}
                MOV     r10,r4
                LDMIA   r0, {r0-r9}             ; get the registers
                SWI     XOS_CallASWI

                LDMFD   sp!,{r10,lr}
                STMIA   sp, {r0-r9}             ; save the results back

                MOVVC   r0, #0                  ; if no error, return zero (otherwise return r0)
                MOVCC   r1, #0                  ; set r1 to 1 or 0 as carry flag
                MOVCS   r1, #1
                
scatter         LDR     r2, [lr], #4            ; get the next argument
                TEQ     r2, #F_END              ; is it END?
                BEQ     finished
                TEQ     r2, #F_CARRY            ; is it carry?
                MOVEQ   r2, r1                  ; yes, use the carry flag
                LDRNE   r2, [sp, r2, LSL #2]    ; no, so get [r2] register's value back
                LDR     r3, [lr], #4            ; get address of user's variable
                STR     r2, [r3]                ; store the value there
                B       scatter
d124 1
a124 1
finished        LDMEA   fp, {r4-r9, fp, sp, pc}^        ; APCS exit
d126 1
a126 1
                END
@


4.1
log
@Initial revision
@
text
@d15 1
d22 4
a25 2
		GBLL	ZEROREGS
ZEROREGS	SETL	{TRUE}			; If true, unspecified args default to zero.
d37 2
a38 2
sl		RN	10
fp		RN	11
d44 9
a52 9
F_END		*	20
F_OUT		*	21
F_CARRY		*	22
F_NONX		*	23

SWIMASK		*	&ff000000
SWIINST		*	&ef000000
SWIXBIT		*	&00020000
RETINST		*	&E51FF004		; LDR	pc, [pc, #-4]
d58 29
a86 30
swi		MOV	ip, sp				; APCS entry
		STMFD	sp!, {r1-r3}			; varargs preparation
		STMFD	sp!, {r4-r9, fp, ip, lr, pc}	; APCS entry
		SUB	fp, ip, #16			; APCS entry

		ADD	lr, fp, #4		; point to first varargs argument

                BIC     r4, r0, #SWIMASK	; build SWI instruction ...
                ORR     r4, r4, #SWIINST	; ... assuming XBit version for now
		ORR	r4, r4, #SWIXBIT

	[ ZEROREGS
		MOV	r0, #0			; extend stack with zeros
		MOV	r1, #10			; room for 10 registers
clear		STR	r0, [sp, #-4]!
		SUBS	r1, r1, #1
		BNE	clear
	|
		SUB	sp, sp, #40		; registers contain junk by default
	]

collect		LDR	r0, [lr], #4		; get next arg

		TEQ	r0, #F_NONX		; is it "no X bit"?
		BICEQ	r4, r4, #SWIXBIT	; yes, clear X bit
		BEQ	collect

		TEQ	r0, #F_END		; if it's END
		SUBEQ	lr, lr, #4		; then back up so we see it again...
		TEQNE	r0, #F_OUT		; stop collecting if it's END or OUT,
d90 27
a116 35
		LDRNE	r1, [lr], #4		; ... get the argument...
		STRNE	r1, [sp, r0, LSL #2]	; ... and put it in the array
		
		BNE	collect			; continue

; Build the SWI on the stack.  Return with an LDR from the stack, as we don't
; have any safe registers (can't rely on lr because we might already be in
; supervisor mode).

		MOV	r0, sp			; save address of register table
		LDR	r5, =RETINST		; LDR pc, [pc, #-4]
		ADD	r6, pc, #return-.-8	; generate return address
		STMFD	sp!, {r4-r6, lr}	; Relies on ordering imposed by STM
		LDMIA	r0, {r0-r9}		; get the registers
		MOV	pc, sp			; branch to the bottom of the stack

; If all goes well, we regain control after the SWI right here:-

return		ADD	sp, sp, #12		; throw away the two instructions and addr
		LDR	lr, [sp], #4		; regain address of argument list
		STMIA	sp, {r0-r9}		; save the results back

		MOVVC	r0, #0			; if no error, return zero (otherwise return r0)
		MOVCC	r1, #0			; set r1 to 1 or 0 as carry flag
		MOVCS	r1, #1
		
scatter		LDR	r2, [lr], #4		; get the next argument
		TEQ	r2, #F_END		; is it END?
		BEQ	finished
		TEQ	r2, #F_CARRY		; is it carry?
		MOVEQ	r2, r1			; yes, use the carry flag
		LDRNE	r2, [sp, r2, LSL #2]	; no, so get [r2] register's value back
		LDR	r3, [lr], #4		; get address of user's variable
		STR	r2, [r3]		; store the value there
		B	scatter
d118 1
a118 1
finished	LDMEA	fp, {r4-r9, fp, sp, pc}^	; APCS exit
d120 1
a120 1
		END
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a14 1

d21 2
a22 4
;mjs changes to use OS_CallASWI

                GBLL    ZEROREGS
ZEROREGS        SETL    {TRUE}                  ; If true, unspecified args default to zero.
d34 2
a35 2
sl              RN      10
fp              RN      11
d41 9
a49 9
F_END           *       20
F_OUT           *       21
F_CARRY         *       22
F_NONX          *       23

SWIMASK         *       &ff000000
SWIXBIT         *       &00020000

XOS_CallASWI    *       &2006f
d55 30
a84 29
swi             MOV     ip, sp                          ; APCS entry
                STMFD   sp!, {r1-r3}                    ; varargs preparation
                STMFD   sp!, {r4-r9, fp, ip, lr, pc}    ; APCS entry
                SUB     fp, ip, #16                     ; APCS entry

                ADD     lr, fp, #4              ; point to first varargs argument

                BIC     r4, r0, #SWIMASK        ; build SWI number ...
                ORR     r4, r4, #SWIXBIT

        [ ZEROREGS
                MOV     r0, #0                  ; extend stack with zeros
                MOV     r1, #10                 ; room for 10 registers
clear           STR     r0, [sp, #-4]!
                SUBS    r1, r1, #1
                BNE     clear
        |
                SUB     sp, sp, #40             ; registers contain junk by default
        ]

collect         LDR     r0, [lr], #4            ; get next arg

                TEQ     r0, #F_NONX             ; is it "no X bit"?
                BICEQ   r4, r4, #SWIXBIT        ; yes, clear X bit
                BEQ     collect

                TEQ     r0, #F_END              ; if it's END
                SUBEQ   lr, lr, #4              ; then back up so we see it again...
                TEQNE   r0, #F_OUT              ; stop collecting if it's END or OUT,
d88 35
a122 27
                LDRNE   r1, [lr], #4            ; ... get the argument...
                STRNE   r1, [sp, r0, LSL #2]    ; ... and put it in the array
                
                BNE     collect                 ; continue

                MOV     r0, sp                  ; save address of register table
                STMFD   sp!,{r10,lr}
                MOV     r10,r4
                LDMIA   r0, {r0-r9}             ; get the registers
                SWI     XOS_CallASWI

                LDMFD   sp!,{r10,lr}
                STMIA   sp, {r0-r9}             ; save the results back

                MOVVC   r0, #0                  ; if no error, return zero (otherwise return r0)
                MOVCC   r1, #0                  ; set r1 to 1 or 0 as carry flag
                MOVCS   r1, #1
                
scatter         LDR     r2, [lr], #4            ; get the next argument
                TEQ     r2, #F_END              ; is it END?
                BEQ     finished
                TEQ     r2, #F_CARRY            ; is it carry?
                MOVEQ   r2, r1                  ; yes, use the carry flag
                LDRNE   r2, [sp, r2, LSL #2]    ; no, so get [r2] register's value back
                LDR     r3, [lr], #4            ; get address of user's variable
                STR     r2, [r3]                ; store the value there
                B       scatter
d124 1
a124 1
finished        LDMEA   fp, {r4-r9, fp, sp, pc}^        ; APCS exit
d126 1
a126 1
                END
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
