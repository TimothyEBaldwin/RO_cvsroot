head	4.4;
access;
symbols
	MakePSFont-1_18:4.4
	MakePSFont-1_17:4.3
	MakePSFont-1_16:4.2
	MakePSFont-1_15:4.1
	MakePSFont-1_14:4.1
	RO_5_07:4.1
	MakePSFont-1_13:4.1
	MakePSFont-1_12:4.1
	MakePSFont-1_11:4.1
	MakePSFont-1_10:4.1
	dellis_autobuild_BaseSW:4.1
	Ursula_merge:4.1.3.1
	MakePSFont-1_09:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	nturton_MakePSFont-1_08:4.1
	Spin_merge:4.1.7.1
	Spin_merge_29Jan1999:4.1.7.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.3.1
	Ursula_RiscPC:4.1.3.1.0.4
	rthornb_UrsulaBuild-19Aug1998:4.1.3.1
	UrsulaBuild_FinalSoftload:4.1.3.1
	rthornb_UrsulaBuild-12Aug1998:4.1.3.1
	aglover_UrsulaBuild-05Aug1998:4.1.3.1
	rthornb_UrsulaBuild-29Jul1998:4.1.3.1
	Ursula:4.1.3.1.0.2
	Ursula_bp:4.1.3.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Ursula_31Mar1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spin_merge_28May97:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2018.06.02.13.48.27;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	TgtEOgC2pfJK9IEA;

4.3
date	2018.05.22.19.39.27;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	Ut0fDWoya884skDA;

4.2
date	2016.04.09.07.07.28;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	vTiRbOzT0uVz8V1z;

4.1
date	96.11.05.09.48.17;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.48.17;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.02.08;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.26.07;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.29.58;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@When standalone register messages
It looks like standalone builds have always omitted to register their messages on startup, assuming they were in ROM.
Add usual service call/init/finalisation supporting code so make_error() returns the expected text.

Version 1.18. Tagged as 'MakePSFont-1_18'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 * Module-specific parts
 */

#include "Global/Services.h"
#include "module.h"
#include "mheader.h"

#if DEBUG

#define HostFS_HostVdu 0x40100
#define HostFS_TubeVdu 0x40101

void dstringc (const char *s)
{
    _swix(HostFS_HostVdu, 0);
    _swix(OS_Write0, _IN(0), s);
    _swix(HostFS_TubeVdu, 0);
}

void dstring (const char *s)
{
    dstringc (s); dstringc("\r\n");
}

void dint (const char *s, int i)
{
    char num[12];
    sprintf(num, "%d", i);
    dstringc(s); dstring(num);
}

#endif


/* Make an error by looking up a token in our messages file which is constructed
 * from the given error number.
 */
os_error *make_error (int num)
{
    static os_error error;
    int msgtrans_desc[4];
    os_error *err;

    if ((err = _swix(MessageTrans_OpenFile, _INR(0,2), msgtrans_desc, Module_MessagesFile, 0)) == NULL)
    {
        error.errnum = num + ERROR_BASE;
        sprintf(error.errmess, "E%02d", num-1);
        err = _swix(MessageTrans_ErrorLookup, _INR(0,2), &error, msgtrans_desc, 0);
        _swix(MessageTrans_CloseFile, _IN(0), msgtrans_desc);
    }

    /* Copy error as MessageTrans is capable of overwriting it if we
     * don't use it straight away.
     */
    error.errnum = err->errnum;
    strncpy(error.errmess, err->errmess, sizeof(error.errmess));
    return &error;
}


/*
 * BODGE ALERT
 * The HACK structure is a mimic of part of the FILE structure, with
 * the hidden fields made available.
 */
typedef struct _hack
{
    unsigned char *__ptr;
    int __icnt, __ocnt, __flag;
    unsigned char *__base;
    int __file;
} HACK;

Bool do_declarations;           /* TRUE if we are declaring stuff to the */
                                /* MiscOp fontlist.  If this is set, output */
                                /* should be NULL. */

Bool do_extra_declarations;     /* TRUE if we want to declare DocumentFonts
                                 * and DocumentSuppliedFont entries too. */

Bool dont_allow_downloads;      /* FALSE if whole fonts may be downloaded.  If */
                                /* TRUE then fonts may be remapped, but big nasty */
                                /* space-consuming downloads will be quietly */
                                /* replaced with a reference to a default font */

Bool permanent;                 /* TRUE if we're doing a permanent download; */
                                /* handle font names and encodings differently */

Bool procremap;                 /* TRUE if we rely on the presence of RF and RFE procs */
                                /* for font remapping */

_kernel_oserror *makepsf_swi (int swi_no, _kernel_swi_regs *r, void *private)
{
    switch (swi_no)
    {
    case MakePSFont_MakeFont - MakePSFont_00:
        /*
         * R0: file handle, or -1 for no output (but still declare fonts
         *     and encodings) or -2 for no output and no declarations (just
         *     return name).
         * R1: font name string, NUL terminated
         * R2: return font name buffer or NULL if you don't want to know
         * R3: size of buffer (ignored if R2 is NULL)
         * R4: Flags:
         *      Bit 0 set: make MiscOp entries of types DF_REGISTRY and DSF_REGISTRY.

         *      Bit 1 set: Don't allow downloading -- substitute a default font instead.
         *                 This only applies if bit 2 is clear (permanent download) and
         *                 does not affect remappings -- only full downloads.  The default
         *                 font is hardwired into the code (DEFAULTFONT).

         *      Bit 2 set: this is a transient download (inside print job) and an Acorn
         *                 encoding may be sent/referenced.  The font might have kerning info,
         *                 and its name will be prefixed RO_ or RK_.  If this bit is clear,
         *                 then the font is being downloaded permanently, without an encoding and
         *                 with a name prefix of DL_.  In this case the font should get
         *                 remapped to something with an encoding when someone tries to
         *                 print with it.  Unless you are providing an exitserver wrapper
         *                 in the calling code, this bit should be SET.

         *      Bit 3 set: try to provide kerning info.  No effect if bit 2 is clear.

         *      Bit 4 set: Do remaps with RF and RFE procedures (which should be predefined
         *                 in the preceding PostScript prologue).  This mechanism is provided
         *                 so that the remapping system can be altered by editing the prologue
         *                 file.  RF takes three parameters:
         *                      newname matrix oldname RF
         *                 RFE takes four parameters:
         *                      newname encoding matrix oldname RFE
         *                 In both cases matrix may be 'false' meaning don't alter the
         *                 parent font's matrix.  If a matrix is specified it should be
         *                 concatenated with the parent font's matrix.  For RFE, encoding
         *                 may be 'false' meaning use the parent font's encoding.
         *                 The matrix may be 'false' which means don't apply a matrix.
         *
         *                 If this bit is not set, then a short PostScript remap sequence is
         *                 sent instead, which does not rely on prologue support.  If you are
         *                 doing permanent downloading (bit 2 clear) then you should set this bit).
         *

         *      All other bits reserved and should be zero.

         * RETURNS:
         * V SET:  R0 points to error block
         * V CLEAR: if R3 is zero, the (R2) contains the zero-terminated
         *          font name to reference this font with.
         *          If R3 is non-zero, then the return name buffer overflowed.
         *          Allocate a buffer at least R3 bytes long, and call
         *          again to obtain the font name.  (NB: the output has
         *          already been sent; the second call just gets you
         *          the fontname).
         *
         * Other registers preserved.
         * Output to the file handle supplied (which is still open)
         * Zero or more fonts will have been declared to the printer system.
         */

        {
            int null_handle;
            os_error *err;
            FILE *out;
            HACK *hack;
            int handle = r->r[0];
            char *fontname = (char *) r->r[1];
            char *fontret = (char *) r->r[2];
            int fontretlen = r->r[3];
            int flags = r->r[4];

            if (handle < 0)
            {
                out = NULL;
                do_declarations = (handle == -1);
            }
            else
            {
                do_declarations = TRUE;
                out = fopen("NULL:", "w");
                hack = (HACK *) out;
                if (!out)
                    return make_error(ENULL);
                null_handle = hack->__file;
                hack->__file = r->r[0];
            }

dint("Flags ", flags);
            do_extra_declarations = do_declarations && (flags & 1);
            dont_allow_downloads = (flags & 2);
            permanent = !(flags & 4);
            procremap = (flags & 16);

dstring("Calling ensure");
            err = ensure_font(fontname, out, fontret, &fontretlen, flags & 8);
dstring("Back from ensure");

            if (fontret)
                r->r[3] = fontretlen;

            if (handle >= 0)
            {
                fflush(out);    /* this is vital! */
                hack->__file = null_handle;
                fclose(out);
            }

            if (err)
                return err;
        }
        return NULL;

    default:
        return error_BAD_SWI;
    }
}

void makepsf_services(int service_number, _kernel_swi_regs *r, void *pw)
{
    switch (service_number)
    {
#ifndef ROM
        case Service_ResourceFSStarting:
            (*(void (*)(void *, void *, void *, void *))r->r[2])(Resources(), 0, 0, (void *)r->r[3]);
            break;
#endif            
    }
    UNUSED(pw);
}

_kernel_oserror *makepsf_final(int fatal, int podule, void *pw)
{
#ifndef ROM
    _swix(ResourceFS_DeregisterFiles, _IN(0), Resources());
#endif
    UNUSED(fatal);
    UNUSED(podule);
    UNUSED(pw);

    return NULL;
}
@


4.3
log
@Use _swix() instead of local swi()
Change to use _swix() which packs the in/out vararg selection into a single register, so resulting in a lot less stuff being stacked for SWIs with more than 2 parameters.
Note that because ZEROREGS was {TRUE} a little care is needed with Font_ReadFontMetrics which needs lots of 0's for the read operation, and these were not previously explicitly shown.
Remove redundant misc.c.

Version 1.17. Tagged as 'MakePSFont-1_17'
@
text
@d19 1
d107 1
a107 1
_kernel_oserror *convert_swi (int swi_no, _kernel_swi_regs *r, void *private)
d230 24
@


4.2
log
@Makefile recreated from fragments
init.s: Use Push/Pull for fewer warnings
module.h/module.c: Use central headers or CMHG generated header in preference
mheader.cmhg: Declare the resource filename here
registry.c/use.c: Unjumbled double header inclusion
convert.c/provide.c: Mark many functions as static
Messages: Remove (now) unused message E06

Version 1.16. Tagged as 'MakePSFont-1_16'
@
text
@a19 1
#include "swicall.h"
d27 1
a27 1
void dstringc (char *s)
d29 3
a31 3
    swi(HostFS_HostVdu, END);
    swi(OS_Write0, R0, s, END);
    swi(HostFS_TubeVdu, END);
d34 1
a34 1
void dstring (char *s)
d39 1
a39 1
void dint (char *s, int i)
d58 1
a58 1
    if ((err = swi(MessageTrans_OpenFile, R0, msgtrans_desc, R1, Module_MessagesFile, R2, 0, END)) == NULL)
d62 2
a63 2
        err = swi(MessageTrans_ErrorLookup, R0, &error, R1, msgtrans_desc, R2, 0, END);
        (void)swi(MessageTrans_CloseFile, R0, msgtrans_desc, END);
@


4.1
log
@Initial revision
@
text
@d21 1
d59 1
a59 1
    if ((err = swi(MessageTrans_OpenFile, R0, msgtrans_desc, R1, MESSAGES_FILENAME, R2, 0, END)) == NULL)
d111 1
a111 1
    case 0:
d224 1
d226 1
a226 1
        return make_error(EUNKNOWNSWI);
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
