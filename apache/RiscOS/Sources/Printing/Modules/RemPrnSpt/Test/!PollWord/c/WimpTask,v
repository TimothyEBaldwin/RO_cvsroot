head	4.1;
access;
symbols
	RemPrnSpt-1_15:4.1
	RemPrnSpt-1_14:4.1
	RemPrnSpt-1_13:4.1
	RemPrnSpt-1_12:4.1
	RemPrnSpt-1_11:4.1
	RemPrnSpt-1_10:4.1
	RemPrnSpt-1_09:4.1
	RemPrnSpt-1_08:4.1
	RemPrnSpt-1_07:4.1
	RemPrnSpt-1_06:4.1
	RemPrnSpt-1_05:4.1
	RemPrnSpt-1_04:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1
	Ursula_RiscPC:4.1.7.1.0.6
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1
	UrsulaBuild_FinalSoftload:4.1.7.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Ursula:4.1.7.1.0.4
	Ursula_bp:4.1.7.1
	Ursula_31Mar1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spin_merge_28May97:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.49.02;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.49.02;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.09.21;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.29.41;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.33.07;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * WimpTask.c
 */

#include <stdio.h>
#include <kernel.h>
#include <swis.h>
#include <string.h>

#include "WimpTask.h"
#include "debug.h"

#ifndef TRUE
# define TRUE 1
# define FALSE 0
#endif

#define RemotePrinterSupport_ReadPollwordLocation (293248)
#define RemotePrinterSupport_ReadLastObject (293249)

int message_list[] = { 0 } ;

int task_handle = 0 ;
int wimp_version = -1 ;
int *pollword ;
int pollwordcopy ;


int deal_with_message (void *poll_block)
{
        if (*((int *)poll_block + 4) == 0)
                return (TRUE) ;
        else
        {
debug dprintf ("Message number %x received\n\r", *((int *)poll_block + 4)) ;
                return (FALSE) ;
        }
}


void thing (int pollword)
{
        _kernel_swi_regs r ;

debug dprintf ("Pollword has changed to %d which is: ") ;

        switch (pollword)
        {
                case 1:
                        debug dprintf ("printer: closed\n\r") ;
                        break ;
                case 2:
                        debug dprintf ("file renamed from spool to queue\n\r") ;
                        break ;
                case 3:
                        debug dprintf ("printer added\n\r") ;
                        _kernel_swi (RemotePrinterSupport_ReadLastObject, &r, &r) ;
                        debug dprintf ("    Object is %s\n\r", r.r[0]) ;
                        break ;
                case 4:
                        debug dprintf ("printer removed\n\r") ;
                        _kernel_swi (RemotePrinterSupport_ReadLastObject, &r, &r) ;
                        debug dprintf ("    Object is %s\n\r", r.r[0]) ;
                        break ;
                case 5:
                        debug dprintf ("printer changed\n\r") ;
                        _kernel_swi (RemotePrinterSupport_ReadLastObject, &r, &r) ;
                        debug dprintf ("    Object is %s\n\r", r.r[0]) ;
                        break ;
                case 6:
                        debug dprintf ("local printer deleted\n\r") ;
                        _kernel_swi (RemotePrinterSupport_ReadLastObject, &r, &r) ;
                        debug dprintf ("    Object is %s\n\r", r.r[0]) ;
                        break ;
                case 7:
                        debug dprintf ("freeway starting\n\r") ;
                        break ;
                case 8:
                        debug dprintf ("freeway terminating\n\r") ;
                        break ;
                default:
                        dprintf ("TERMINALLY BRAIN DEAD\n\r") ;
                        break ;
        }
}

void wimp_poll_loop ()
{
        int quit = FALSE ;
        _kernel_swi_regs in, out ;
        char poll_block[256] ;

        in.r[0] = 1 | 1<<1 | 1<<4 | 1<<5 | 1<<6 | 1<<8 | 1<<11 | 1<<12 | 1<<22 | 1<<23 ;
        in.r[1] = (int) poll_block ;
        in.r[3] = (int) pollword ;

        while (!quit) 
        {
debug dprintf ("About to poll...") ;

                _kernel_swi (Wimp_Poll, &in, &out) ;

debug dprintf (" polled\r\n") ;

debug dprintf ("Wimp_Poll, reason code %d\n\r", out.r[0]) ;
                switch (out.r[0])
                {
                        case 13:
                                pollwordcopy = *pollword ;
                                *pollword = 0 ;
                                thing (pollwordcopy) ;
                        case 17:
                        case 18:
                                quit = deal_with_message (poll_block) ;
                                break ;
                }
        }

}



void wimp_initialise (void)
{
        _kernel_swi_regs r ;

        r.r[0] = 310 ;
        r.r[1] = 0x4b534154 ;
        r.r[2] = (int) "Poll word test" ;
        r.r[3] = (int) message_list ;

debug dprintf ("About to initialise...") ;

        _kernel_swi (Wimp_Initialise, &r, &r) ;

debug dprintf (" initialised\n\r") ;

        wimp_version = r.r[0] ;
        task_handle = r.r[1] ;

        _kernel_swi (RemotePrinterSupport_ReadPollwordLocation, &r, &r) ;
        pollword = (int *) r.r[0] ;

debug dprintf ("Task handle %d, wimp version %d, pollword location 0x%x\n\r", task_handle, wimp_version, (int) pollword) ;
}


void wimp_closedown (void)
{
        _kernel_swi_regs r ;
                              
debug dprintf ("Calling Wimp_CloseDown any second now\n\r") ;

        _kernel_swi (Wimp_CloseDown, &r, &r) ;
}

int main (char *argv[], int argc)
{

        debug_start () ;

        wimp_initialise () ;
        
        wimp_poll_loop () ;

        wimp_closedown () ;

        debug_stop () ;

        return (0) ;
}
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
