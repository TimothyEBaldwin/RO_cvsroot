head	4.5;
access;
symbols
	RemPrnSpt-1_15:4.5
	RemPrnSpt-1_14:4.5
	RemPrnSpt-1_13:4.5
	RemPrnSpt-1_12:4.5
	RemPrnSpt-1_11:4.4
	RemPrnSpt-1_10:4.4
	RemPrnSpt-1_09:4.4
	RemPrnSpt-1_08:4.3
	RemPrnSpt-1_07:4.3
	RemPrnSpt-1_06:4.2
	RemPrnSpt-1_05:4.2
	RemPrnSpt-1_04:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1
	Ursula_RiscPC:4.1.7.1.0.6
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1
	UrsulaBuild_FinalSoftload:4.1.7.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Ursula:4.1.7.1.0.4
	Ursula_bp:4.1.7.1
	Ursula_31Mar1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spin_merge_28May97:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2013.04.06.07.00.05;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	Nxd1WLOLjqKfqGKw;

4.4
date	2003.04.15.08.20.40;	author rsprowson;	state Exp;
branches;
next	4.3;

4.3
date	2003.03.24.15.50.47;	author srevill;	state Exp;
branches;
next	4.2;

4.2
date	2003.01.09.13.51.58;	author rsprowson;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.48.55;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.48.55;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.08.09;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.29.08;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.32.39;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Makefile recreated from fragments
Usual drill
* Rename CMHG file to be the auto generated one
* Cast away some warnings
* Swap a few header files around, use defs from central headers where available
Also, add hdr/RemotePrin which in turn will be exported and end up in <swis.h>.

Eliminated the RemPrnSptMsgs module target - if we're disc based then carry round and register our own messages (through the magic of the shared makefiles), and if we're ROM based the messages are exported to ResourceFS as usual in the resources phase.

Compiled and ran, messages were correctly registered.


Version 1.11. Tagged as 'RemPrnSpt-1_11'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * list.c  - a module to implement a list of anything, as long
 *     as the whole list has the same type. Implemented
 *     in C using void pointers along with a tag at the
 *     start of the list to specify the size and type
 *     of object being held in the list.
 *
 *     For simplicity's sake, always allocate storage and
 *     hold a pointer to the object, even if it's 32 bits
 *     or smaller. Details like this can be worked out later.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <kernel.h>

#include "Module.h"
#include "Debug.h"
#include "Errors.h"
#include "ListP.h"
#include "Msgs.h"

/*
 * List_New
 */

_kernel_oserror *List_New (List *l, char *ObjectName, int ObjectSize)
{
  /*
   * Copy the name, we can't necessarily rely upon
   * it
   */
  *l = (List) malloc (sizeof (struct _List)) ;
  if (*l == NULL)
  {
    return (msgs_error_lookup (ERROR_LIST2, "LIST2", 0)) ;
  }

  (*l)->Desc.Name = (char *) malloc (strlen (ObjectName) + 1) ;

  if ((*l)->Desc.Name == NULL)
  {
    free (*l) ;
    return (msgs_error_lookup (ERROR_LIST3, "LIST3", 0)) ;
  }

  strcpy ((*l)->Desc.Name, ObjectName) ;

  (*l)->Desc.Size = ObjectSize ;

  (*l)->ListHead = NULL ;

  return ((_kernel_oserror *) NULL) ;
}

/*
 * List_Destroy
 */

_kernel_oserror *List_Destroy (List list)
{
  Node *cur, *next ;

  if (list == NULL)
  {
    return (msgs_error_lookup (ERROR_LIST1, "LIST1", 1, "List_Destroy")) ;
  }

  cur = list->ListHead ;
  next = NULL ;

  /* If the list isn't empty */
  if (list->ListHead != NULL)
  {
    while (cur != NULL)
    {
      next = cur->Next ;
      free (cur->Obj) ;
      free (cur) ;
      cur = next ;
    }
  }
  if (list->Desc.Name != NULL)
    free (list->Desc.Name) ;

  free (list) ;

  return ((_kernel_oserror *) NULL) ;
}

/*
 * Accessor functions
 */

int List_IsEmpty (List list)
{
  if (list == NULL)
    return (TRUE) ;

  return (list->ListHead == NULL) ;
}

/*
 * List_GetFirst
 */

_kernel_oserror *List_GetFirst (List list, void **object)
{
  if (list == NULL)
  {
    return (msgs_error_lookup (ERROR_LIST1, "LIST1", 1, "List_GetCurrent")) ;
  }

  if ((list->ListHead == NULL) || (list->ListHead == (void *)0xDEADDEADu))
  {
    list->ListHead = NULL;
    return (msgs_error_lookup (ERROR_LIST1, "LIST1", 1, "List_GetCurrent")) ;
  }

debug dprintf ("List_GetFirst: About to copy\n\r") ;

  *object = list->ListHead->Obj ;

  return ((_kernel_oserror *) NULL) ;
}

/*
 * List_AddItemAtEnd
 */

_kernel_oserror *List_AddItemAtEnd (List list, void *obj, char *ObjectName)
{
  void *newptr ;
  Node *newnode ;

  if (strcmp (ObjectName, list->Desc.Name) != 0)
  {
    return (msgs_error_lookup (ERROR_LIST4, "LIST4", 0)) ;
  }

  newptr = (void *) malloc (list->Desc.Size) ;
  if (newptr == NULL)
  {
    return (msgs_error_lookup (ERROR_LIST2, "LIST2", 0)) ;
  }

  newnode = (void *) malloc (sizeof (struct _Node)) ;
  if (newnode == NULL)
  {
    free (newptr) ;
    return (msgs_error_lookup (ERROR_LIST2, "LIST2", 0)) ;
  }

  newnode->Obj = newptr ;
  newnode->Next = NULL ;
  newnode->Prev = NULL ;

  memcpy (newnode->Obj, obj, list->Desc.Size) ;

  if (list->ListHead == NULL)
  {
debug dprintf ("List_AddItemAtEnd: Empty list\n\r") ;
    /*
     * Empty list case
     */
    newnode->Prev = NULL ;
    newnode->Next = NULL ;
    list->ListHead       = newnode ;
    list->ListEnd        = newnode ;
  }
  else
  {
debug dprintf ("List_AddItemAtEnd: Generic\n\r") ;
    /*
     * Generic case
     */
    newnode->Next = NULL ;
    newnode->Prev = list->ListEnd ;
    list->ListEnd->Next = newnode ;
    list->ListEnd = newnode ;
  }

  return ((_kernel_oserror *) NULL) ;
}

/*
 * List_DeleteItemAtStart
 */

_kernel_oserror *List_DeleteItemAtStart (List list)
{
  Node *here ;

  /*
   * List not created...
   */

  if (list == NULL)
  {
    return (msgs_error_lookup (ERROR_LIST1, "LIST1", 1, "List_DeleteItem")) ;
  }

  /*
   * List created, no items in it though
   */

  if (list->ListHead == NULL)
  {
    return (msgs_error_lookup (ERROR_LIST1, "LIST1", 1, "List_DeleteItem")) ;
  }

  /*
   * Re-link the list, leaving here pointing to the freed lump
   */

debug dprintf ("List_DeleteItemAtStart\n\r") ;

  here = list->ListHead ;

  list->ListHead = list->ListHead->Next ;
  if (list->ListHead != NULL)
    list->ListHead->Prev = NULL ;

  free (here->Obj) ;
  free (here) ;

  return ((_kernel_oserror *) NULL) ;
}
@


4.4
log
@Moved test of DEADDEAD out of service call handler into somewhere where
it actually has effect.

Version 1.09. Tagged as 'RemPrnSpt-1_09'
@
text
@d32 1
a32 1
#include "RemPrnSpt.h"
@


4.3
log
@Addition of RemotePrinterSupport_EnumerateUSBPrinters SWI.
Also now looks for USB devices appearing and disappearing and adds them
to the event list passed to printer manager.
When a new USB printer is plugged in an attempt will be made to find it
in the messages file pointed to by "PrintDefs$Dir.USBMap" to work out
which PDF is needed.When no match is made this is passed to !Printers
anyway incase it wants to ask the user to choose one themselves.
Also #if'd out the whole of the debug file when not doing debug versions
which makes it smaller and removes some,ahem,text strings!

Version 1.07. Tagged as 'RemPrnSpt-1_07'
@
text
@d129 1
a129 1
  if (list->ListHead == NULL)
d131 1
d135 1
a135 1
debug dprintf ("List_GetCurrent: About to copy\n\r") ;
@


4.2
log
@Two bug fixes from D.Ellis
 Upcall_MediaNotPresent was not being claimed properly so if a machine
 with a shared printer on was switched off all the other machines would
 complain that Share::_Sxxxx was not available (ie.the shared spool file)
 A signed cast of a string point was stopping shared printing to file
 and hence shared USB printing
Tiny tweak to remove two warnings while we're at it.

Version 1.05. Tagged as 'RemPrnSpt-1_05'
@
text
@d21 1
a21 1
 *    
d26 1
a26 1
      
d37 1
a37 1
        
d41 1
a41 1
 
d67 1
a67 1
  
d76 1
a76 1
{        
d106 2
a107 2
/* 
 * Accessor functions 
d122 1
a122 1
_kernel_oserror *List_GetFirst (List list, void **object) 
d132 1
a132 1
  }  
d147 1
a147 1
  void *new ;
d155 2
a156 2
  new = (void *) malloc (list->Desc.Size) ;
  if (new == NULL)
d164 1
a164 1
    free (new) ;
d168 1
a168 1
  newnode->Obj = new ;
d217 1
a217 1
  /* 
@


4.1
log
@Initial revision
@
text
@d148 1
a148 1
  Node *here, *newnode ;
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
