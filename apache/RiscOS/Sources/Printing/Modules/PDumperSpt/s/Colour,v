head	4.3;
access;
symbols
	PDumperSpt-1_31:4.3
	PDumperSpt-1_30:4.3
	PDumperSpt-1_29:4.3
	PDumperSpt-1_28:4.3
	PDumperSpt-1_27:4.3
	PDumperSpt-1_26:4.3
	PDumperSpt-1_25:4.3
	dellis_autobuild_BaseSW:4.3
	PDumperSpt-1_24:4.3
	PDumperSpt-1_23:4.3
	sbrodie_sedwards_16Mar2000:4.2
	dcotton_autobuild_BaseSW:4.3
	nturton_PDumperSpt-1_22:4.1.7.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1
	Ursula_RiscPC:4.1.7.1.0.6
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1
	UrsulaBuild_FinalSoftload:4.1.7.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Ursula:4.1.7.1.0.4
	Ursula_bp:4.1.7.1
	Ursula_31Mar1998:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spin_merge_28May97:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_16May97:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2000.06.09.11.59.56;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.01.21.17.13.50;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.48.51;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.48.51;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.07.26;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.28.42;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.32.16;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@32-bit compatible.

Version 1.23. Tagged as 'PDumperSpt-1_23'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Colour

;------------------------------------------------------------------------------
;
; PDumper_SetColour implementation
;
;   Entry: r0 ->anchor word
;          r1 physical RGB
;          r2 strip information
;               bits 0..7 => strip type
;               bits 24..31 => pass number
;
;          r4 halftone information
;               bits 0..7 => horizontal
;               bits 8..15 => vertical
;
;   Exit:  V =1 => r0 ->Error block, r3 corrupt!
;          else,   r3 colour number to be used
;
; This routine will attempt to process the colour setting required
; by the PDumper, it attempts to decode the strip type and then
; setup a suitable colour number.
;
;------------------------------------------------------------------------------

SWIPDumper_SetColour ROUT

        Debuga  colset,"(colour set) Anchor word",r0
        Debuga  colset,", Physical &BBGGRRxx",r1
        Debuga  colset,", Strip info",r2
        Debug   colset,", Halftone information",r4
        Debuga  colset,"(colour set) processed by "

        MOV     r3, r2, LSL #24         ;Is the strip type valid (corrupts r3!)
        CMP     r3, #((%20-%10)/4)<<24
        ADDCC   pc, pc, r3, LSR #24-2   ;Despatch correctly if so
        B       %FT20                   ;Otherwise, give an error
10
        B       GetColourMono
        B       GetColourGrey
        B       GetColour8BPP
        [ fullrgb
        B       GetColourMulti
        B       GetColour16Bit
        B       GetColour24Bit
        ]
20
        Debug   colset,"- bad strip type"

        ADR     r0, ErrorBlock_PDumperBadStrip
        B       LookupError             ;Report error about strip type being invalid

        MakeInternatErrorBlock PDumperBadStrip,,BadStrp

;..............................................................................
;
; GetColourMono
;
; Generate a suitable colour number for a monochrome device.
;
; in    as for above
; out   V =1 => r0 -> error block
;       else,   r3 contains the colour number

GetColourMono EntryS "r2"

        MOV     r11, #&FF
        AND     r3, r11, r1, LSR #24        ;Source blue
        AND     r2, r11, r1, LSR #16        ;Source green
        AND     lr, r11, r1, LSR #8         ;Source red

        ADD     lr, lr, r2                 ;Average red, green and blue
        ADD     lr, lr, r3
        MOV     r2, #3
        DivRem  r10, lr, r2, r3

        RSB     r10, r10, #255              ;Invert

        MOV     r3, r10, LSR #7            ;Get black/white dependent on top bit
        CMP     r10, #255
        MOVEQ   r10, #256
        MOV     r10, r10, LSR #2
        ORR     r3, r3, r10, LSL #16
        MOV     r10, r10, LSR #2
        ORR     r3, r3, r10, LSL #8         ;=Suitable colour number

        Debug   colset,"monochrome",r3

        EXITS

;..............................................................................
;
; GetColourGrey
;
; Generate a suitable colour number for a grey-level device.
;
; in    as for above
; out   V =1 => r0 -> error block
;       else,   r3 contains the colour number

GetColourGrey Entry "r0-r2,r4"

;get R2 -> relevant grey table
        LDR     R2,=BlockType_Palette
        SWI     XPDumper_Find
        BVS     %FT05                    ;Trap the error occuring
        LDR     R3,[R2,#palette_Calib32] ;offset
        ADD     R2,R2,R3                 ;R2-> calib32 tables
        ADD     R2,R2,#4                 ;skip error diffuse word
        AND     R3,R4,#&FF               ;look at horizontal htone size
        CMP     R3,#1                    ;1 if its actually error diffused
        ADDEQ   R2,R2,#14*256            ;R2->error diffuse grey table
        ADDNE   R2,R2,#15*256            ;R2->halftone grey table
  Debug colset,"GetColourGrey physcol table@@ hhtone ",R1,R2,R3

;now do the usual jazz with accepted lightness function
        MOV     r3, #&FF                ;Suitable mask for extracting the data

        AND     r10, r3, r1, LSR #16    ;r10 =Green
        AND     r11, r3, r1, LSR #8     ;r11 =Red
        MOV     r1, r1, LSR #24         ;r1 =Blue

        MOV     lr, #77
        MUL     lr, r11, lr             ;lr =77*red
        MOV     r11, #150
        MLA     lr, r11, r10, lr        ;lr =77*red +150*green
        RSB     r1, r1, r1, LSL #3      ;r1 =7*blue
        ADD     r1, lr, r1, LSL #2      ;r1 =77*red +150*green +28*blue
        ADD     r3, r1, #&7F
        ADD     r3, r3, r3, LSL #8
        ADD     r3, r3, #&100
        MOV     r3, r3, LSR #16
00
        RSB     r3, r3, #255
        AND     r3, r3, #255            ;invert and mask to suitable level
        LDRB    r3,[r2,r3]              ;correct it

        Debug   colset,"grey level",r3

05
        STRVS   r0, [SP]
        EXIT

;..............................................................................
;
; Generate a suitable colour number for an 8BPP colour device.
;
; in    as for above
; out   V =1 => r0 -> error block
;       else,   r3 contains the colour number
; NOTE: NO Calibration is done - this is done later with a precomputed KCMY table

GetColour8BPP Entry "r0-r2,r4-r7"

        LDR     r2, =BlockType_Palette
        SWI     XPDumper_Find           ;Attempt to locate the palette block
        BVS     %FT30                   ;...and return any errors

        LDR     r0,[r2,#palette_Palette] ;Load the palette pointer
        ADD     r0,r2,r0                 ;which is an offset in the file
05
        MOV     r5, #&FF
        AND     r3, r5, r1, LSR #24
        AND     r2, r5, r1, LSR #16
        AND     r1, r5, r1, LSR #8      ;Seperate R,G and B components

        MOV     r4, #&FFFFFFFF          ;Worst case colour
        MOV     lr, #0

        TEQ     r1, r2
        TEQEQ   r2, r3                  ;Is a grey wanted?
        MOVEQ   r10, #1
        MOVNE   r10, #2                 ;Yup so setup a suitable flag
10
; r0->next palette table entry to look at
; r1=B
; r2=G
; r3=R
; r4=best distance so far
; r5=&ff
; r10=flag colours not available
; r12=best colour number so (yes, r12 isn't used from this point onwards)
; lr=current colour number

; r6 used as distance accumulator
; r7 used as accumulator
; r11 used as current palette entry's RRGGBBxx

        LDR     r11, [r0], #4
        TST     r10, r11                 ;Two bits ab-a =>not allowed as a colour
        BNE     %FT20

        AND     r7, r5, r11, LSR #16
        SUBS    r7, r7, r2              ;Get the green distance
        RSBMI   r7, r7, #0              ;Ensure +VE for faster mul
        MUL     r6, r7, r7

        AND     r7, r5, r11, LSR #24
        SUBS    r7, r7, r3              ;Get the blue distance
        RSBMI   r7, r7, #0              ;...ensure +VE
        MLA     r6, r7, r7, r6

        AND     r7, r5, r11, LSR #8
        SUBS    r7, r7, r1              ;Get the red distance
        RSBMI   r7, r7, #0              ;...ensure +VE
        MLA     r6, r7, r7, r6

        CMP     r6, r4                  ;Is this the colour we are looking for?
        MOVLO   r4, r6
        MOVLO   r12, lr
20
        ADD     lr, lr, #1              ;Increase the colour index
        CMP     lr, #256                ;Have we finished scanning yet?
        BLT     %BT10

        MOV     r3, r12
30
        Debug   colset,"256 colour handler", r3

        STRVS   r0, [SP]
        EXIT

        [ fullrgb
GetColourMulti Entry "r0-r2,r4"
;This code transfered from PROdriver Common.24Bit
     ;;;no longer use 'old' calibration - done by new 32bpp stuff
     ;;;   BL      CalibrateTheColour
     ;;;   LDR     R2,[SP,#8]              ;get original strip type back
        MOV     R2,R2,LSR#24
;just split the colour into RGB
        TEQ     R2,#1
        MOVEQ   R3,R1,LSR#8
        TEQ     R2,#2
        MOVEQ   R3,R1,LSR#16
        TEQ     R2,#3
        MOVEQ   R3,R1,LSR#24
        AND     R3,R3,#255

     ;;;   STRVS   R0,[SP]
        EXIT

GetColour24Bit Entry "r0-r2,r4"
        ; Don't return a gamma corrected colour since the whole of the output
        ; buffer is gamma corrected just prior to conversion to CMYK.
        ; Future version's of SpriteExtend may allow colour translation tables
        ; that allow the incorporation of gamma correction. Until then it is
        ; not sensible to return calibrated values from here

        ; BL      CalibrateTheColour - gamma correction is current

        MOV     R3,R1,LSR#8             ;We need it down the bottom
  Debug colset,"  colour in, colour out",R1,R3
        EXIT

GetColour16Bit Entry "r0-r2,r4"
        ; Don't gamma correct colour since entire output strip is done just
        ; prior to rendering - see above

        ;BL      CalibrateTheColour
        AND     R4,R1,#&F800            ;The red bits
        AND     R2,R1,#&F80000          ;The green bits
        AND     R3,R1,#&F8000000        ;The blue bits
        MOV     R3,R3,LSR#17            ;32-5-10
        ORR     R3,R3,R2,LSR#14         ;24-5-5
        ORR     R3,R3,R4,LSR#11         ;16-5

        STRVS   R0,[SP]
        EXIT

CalibrateTheColour Entry   "r0,r2,r4"
        LDR     r2, =BlockType_Palette  ;Attempt to locate the palette block

        SWI     XPDumper_Find
        BVS     %FT05                   ;Trap the error occuring

        LDR     R3,[R2,#palette_Calibration]  ;Load the calibration table offset
        TEQ     R3,#0
        ADDNE   R3,R2,R3                ;Which is an offset into the file (or null)

        SWI     XColourTrans_ConvertDeviceColour

        MOV     R1,R2
05
        STRVS   R0, [SP]
        EXIT
        ]
        END
@


4.2
log
@Version Spin_merge taken
@
text
@d26 1
a26 1
; 
d30 1
a30 1
;                     
d32 1
a32 1
;          else,   r3 colour number to be used  
d54 1
a54 1
        B       GetColourGrey   
d70 1
a70 1
; 
d79 1
a79 1
GetColourMono Entry "r2"
d106 1
a106 1
; 
d146 1
a146 1
        MOV     r3, r3, LSR #16           
d233 1
a233 1
 
d262 1
a262 1
 
a293 1
        [ newctrans
a294 3
        |
        BL      ConvertDeviceColour
        ]
@


4.1
log
@Initial revision
@
text
@d117 2
a118 2
             
        LDR     r2, =BlockType_Palette  ;Attempt to locate the palette block
d120 9
a128 1
        BVS     %FT05                   ;Trap the error occuring
d130 1
a130 16
        LDR     R3,[R2,#palette_Calibration]  ;Load the calibration table offset
        TEQ     R3,#0
        ADDNE   R3,R2,R3                ;Which is an offset into the file (or null)

        [ newctrans
        SWI     XColourTrans_ConvertDeviceColour
        |
        BL      ConvertDeviceColour
        ]
05
        STRVS   r0, [SP]
        EXIT    VS

        MOV     r1, r2                  ;Get the new device colour

; Now do the usual jazz with accepted lightness function
d149 2
a150 1
        AND     r3, r3, #255            ;Invert and mask to suitable level
d154 2
d240 3
a242 2
        BL      CalibrateTheColour
        LDR     R2,[SP,#8]              ;get original strip type back
d253 1
a253 1
        STRVS   R0,[SP]
d266 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@d117 2
a118 2
;get R2 -> relevant grey table
        LDR     R2,=BlockType_Palette
d120 1
a120 9
        BVS     %FT05                    ;Trap the error occuring
        LDR     R3,[R2,#palette_Calib32] ;offset
        ADD     R2,R2,R3                 ;R2-> calib32 tables
        ADD     R2,R2,#4                 ;skip error diffuse word
        AND     R3,R4,#&FF               ;look at horizontal htone size
        CMP     R3,#1                    ;1 if its actually error diffused
        ADDEQ   R2,R2,#14*256            ;R2->error diffuse grey table
        ADDNE   R2,R2,#15*256            ;R2->halftone grey table
  Debug colset,"GetColourGrey physcol table@@ hhtone ",R1,R2,R3
d122 16
a137 1
;now do the usual jazz with accepted lightness function
d156 1
a156 2
        AND     r3, r3, #255            ;invert and mask to suitable level
        LDRB    r3,[r2,r3]              ;correct it
a159 2
05
        STRVS   r0, [SP]
d244 2
a245 3
     ;;;no longer use 'old' calibration - done by new 32bpp stuff
     ;;;   BL      CalibrateTheColour
     ;;;   LDR     R2,[SP,#8]              ;get original strip type back
d256 1
a256 1
     ;;;   STRVS   R0,[SP]
a268 1
  Debug colset,"  colour in, colour out",R1,R3
@


4.1.5.1
log
@Import from SrcFiler
@
text
@d117 2
a118 2
;get R2 -> relevant grey table
        LDR     R2,=BlockType_Palette
d120 1
a120 9
        BVS     %FT05                    ;Trap the error occuring
        LDR     R3,[R2,#palette_Calib32] ;offset
        ADD     R2,R2,R3                 ;R2-> calib32 tables
        ADD     R2,R2,#4                 ;skip error diffuse word
        AND     R3,R4,#&FF               ;look at horizontal htone size
        CMP     R3,#1                    ;1 if its actually error diffused
        ADDEQ   R2,R2,#14*256            ;R2->error diffuse grey table
        ADDNE   R2,R2,#15*256            ;R2->halftone grey table
  Debug colset,"GetColourGrey physcol table@@ hhtone ",R1,R2,R3
d122 16
a137 1
;now do the usual jazz with accepted lightness function
d156 1
a156 2
        AND     r3, r3, #255            ;invert and mask to suitable level
        LDRB    r3,[r2,r3]              ;correct it
a159 2
05
        STRVS   r0, [SP]
d244 2
a245 3
     ;;;no longer use 'old' calibration - done by new 32bpp stuff
     ;;;   BL      CalibrateTheColour
     ;;;   LDR     R2,[SP,#8]              ;get original strip type back
d256 1
a256 1
     ;;;   STRVS   R0,[SP]
a268 1
  Debug colset,"  colour in, colour out",R1,R3
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@d117 2
a118 2
;get R2 -> relevant grey table
        LDR     R2,=BlockType_Palette
d120 1
a120 9
        BVS     %FT05                    ;Trap the error occuring
        LDR     R3,[R2,#palette_Calib32] ;offset
        ADD     R2,R2,R3                 ;R2-> calib32 tables
        ADD     R2,R2,#4                 ;skip error diffuse word
        AND     R3,R4,#&FF               ;look at horizontal htone size
        CMP     R3,#1                    ;1 if its actually error diffused
        ADDEQ   R2,R2,#14*256            ;R2->error diffuse grey table
        ADDNE   R2,R2,#15*256            ;R2->halftone grey table
  Debug colset,"GetColourGrey physcol table@@ hhtone ",R1,R2,R3
d122 16
a137 1
;now do the usual jazz with accepted lightness function
d156 1
a156 2
        AND     r3, r3, #255            ;invert and mask to suitable level
        LDRB    r3,[r2,r3]              ;correct it
a159 2
05
        STRVS   r0, [SP]
d244 2
a245 3
     ;;;no longer use 'old' calibration - done by new 32bpp stuff
     ;;;   BL      CalibrateTheColour
     ;;;   LDR     R2,[SP,#8]              ;get original strip type back
d256 1
a256 1
     ;;;   STRVS   R0,[SP]
a268 1
  Debug colset,"  colour in, colour out",R1,R3
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
