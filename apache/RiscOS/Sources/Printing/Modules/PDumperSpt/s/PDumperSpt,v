head	4.10;
access;
symbols
	PDumperSpt-1_31:4.10
	PDumperSpt-1_30:4.10
	PDumperSpt-1_29:4.10
	PDumperSpt-1_28:4.9
	PDumperSpt-1_27:4.8
	PDumperSpt-1_26:4.7
	PDumperSpt-1_25:4.6
	dellis_autobuild_BaseSW:4.5
	PDumperSpt-1_24:4.5
	PDumperSpt-1_23:4.4
	sbrodie_sedwards_16Mar2000:4.3
	dcotton_autobuild_BaseSW:4.9
	nturton_PDumperSpt-1_22:4.1.7.4
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.4.2.1
	Ursula_RiscPC:4.1.7.4.2.1.0.2
	rthornb_UrsulaBuild-19Aug1998:4.1.7.4.2.1
	UrsulaBuild_FinalSoftload:4.1.7.4.2.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.4.2.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.4.2.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.4.2.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.4.2.1
	hsimons_BOCA-1_2-Release:4.1.7.4
	rthornb_UrsulaBuild-15Jul1998:4.1.7.4.2.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.4.2.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.4.2.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.4.2.1
	rthornb_UrsulaBuild-27May1998:4.1.7.4.2.1
	rthornb_UrsulaBuild-21May1998:4.1.7.4.2.1
	rthornb_UrsulaBuild_01May1998:4.1.7.4.2.1
	afrost_NC2_Generic:4.1.7.4
	afrost_Funai01-33:4.1.7.4
	Ursula:4.1.7.4.0.2
	Ursula_bp:4.1.7.4
	Ursula_31Mar1998:4.3
	Spinner_RCA116:4.1.7.4
	Spinner_B20_2:4.1.7.4
	Spinner_19_3:4.1.7.4
	Spinner_B18:4.1.7.4
	Spinner_B17:4.1.7.4
	Spinner_B15:4.1.7.4
	Spinner_B14:4.1.7.4
	Spinner_B13:4.1.7.4
	Spinner_B12:4.1.7.4
	Spin_merge_28May97:4.1.7.4
	Spinner_B10:4.1.7.4
	Spin_merge_16May97:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Spinner_B7:4.1.7.4
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.4
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.10
date	2003.03.05.14.50.51;	author srevill;	state Exp;
branches;
next	4.9;

4.9
date	2000.11.30.13.21.24;	author sbrodie;	state Exp;
branches;
next	4.8;

4.8
date	2000.10.20.10.04.23;	author sbrodie;	state Exp;
branches;
next	4.7;

4.7
date	2000.10.19.14.47.16;	author sbrodie;	state Exp;
branches;
next	4.6;

4.6
date	2000.10.18.15.28.05;	author sbrodie;	state Exp;
branches;
next	4.5;

4.5
date	2000.06.09.13.22.37;	author sbrodie;	state Exp;
branches;
next	4.4;

4.4
date	2000.06.09.11.59.58;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	97.05.16.13.00.34;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.01.21.17.13.49;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.48.53;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.48.53;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.07.42;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.28.51;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.32.29;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.04.30.17.46.23;	author scormie;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.05.01.10.32.03;	author nturton;	state Exp;
branches;
next	4.1.7.4;

4.1.7.4
date	97.05.01.13.47.27;	author nturton;	state Exp;
branches
	4.1.7.4.2.1;
next	;

4.1.7.4.2.1
date	98.04.07.17.03.58;	author arodger;	state Exp;
branches;
next	;


desc
@@


4.10
log
@Change to use objasm instead of aasm.
No code changes.

Version 1.29. Tagged as 'PDumperSpt-1_29'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > PDumperSpt

; ********************
; *** CHANGES LIST ***
; ********************

;  7-Oct-91 DDV 0.00 Created
; 14-Oct-91 DDV      Added PDumper_Claim and PDumper_Free
; 14-Oct-91 DDV      PDumper_StartJob allows the loading of a palette file + added block type to claim
; 14-Oct-91 DDV      Added PDumper_TidyJob, PDumper_EndJob both allowing lists of blocks to be removed
; 15-Oct-91 DDV      Split the strip manipulation code into seperate file
; 15-Oct-91 DDV      Added PDumper_PrepareStrip and PDumper_SetColour
; 21-Oct-91 DDV      Changed tidy job to accept a fataility indicator + removed end job
; 21-Oct-91 DDV      Added PDumper_LookupError to lookup error within the messages block
; 22-Oct-91 DDV 0.01 Added PDumper_CopyFilename to copy filename strings into workspace
; 23-Oct-91 DDV 0.02 Added PDumper_Find to locate blocks from the anchor word
; 23-Oct-91 DDV      Changed SWI not known to use MakeErrorBlock
; 24-Oct-91 DDV 0.03 Bug fix: Init code zaps the SharedMessages word
; 24-Oct-91 DDV      Bug fix: PDumper_StartJob does not pooh out anymore
; 24-Oct-91 DDV      Modified block Claim,Release and Find to return -> data area rather than link
; 25-Oct-91 DDV      Added list comparisions to TidyJob, now only removes blocks requested to
; 25-Oct-91 DDV 0.04 Rest of the teathing problems ironed out
; 28-Oct-91 DDV 0.05 Prepare strip no longer corrupts memory at will
; 29-Oct-91 DDV      Bug fix: Grey-level colour improved
; 29-Oct-91 DDV 0.06 Bug fix: Stack inbalance in Find SWI
; 10-Dec-91 SC  0.07 Shortended tokens
;  6-Feb-92 JSR 0.08 Bug fixes: RP-0643 / RP-0713 (register corruption)
; 12-Mar-92 DDV 0.09 Bug fix: monochrome selection of colours (RP-1580)
; 30-Mar-92 DDV      Bug fix: reserved flag checking in StartJob
; 30-Mar-92 DDV      Bug fix: more careful when opening a palette file
;  1-Apr-92 DDV 0.10 Bug fix: grey-small halftones now works, doens't generate grey-large haltones
; 23-Apr-92 DDV 0.11 Bug fix: Memory root when printing colour dither cured, no longer links to wrong block
;
; 12-Sep-92 TC  0.20 Colours and Manipulate restarted 'from scratch'
;                     to get the colour matching right for a change!
; 10-May-93 TC  0.21 Used correct ColourTrans stuff N.B. user must RMEnsure proper modules
;                    Sorted problems with Palette file loading (check for old/locked)
; 18-May-93 TC  0.22 Changed error diffusion threshold to be 128+-RND(32)
;                    Added halftone overlap correction code (types 0,1,2)
;                    Corrected colour error diffuser (buffer was misaligned)
; 29-Jul-93 TC  0.23 Started to add full RGB handling
;                    Fixed Overlap flag loading for Diffusion (required by fullrgb)
; 21-Aug-93 TC  0.24 Bug-fixed version handed back to Acorn
; Oops - cockup in numbering scheme, release is 1.04

; 16-Nov-93 PAH 1.05 SpeedUp: modification to halftone macros to go faster :-)
; 17-Nov-93 PAH 1.06 Oops forgot to set Fullrgb true for 1.05
;  7-Dec-93 PAH 1.07 Bugfix: Palette block is not freed at end of job - eats RMA
; 14-Jan-94 PAH 1.08 Bugfix: Palette block was being freed at wrong stage + causing probs.
; 31-Jan-94 JSR 1.09 Bugfix: MED-01743 - Makefile now sets access in installed files to LR/R
;           PAH      Bugfix: output to true colour output on medusa now does gamma correction
;                       on output image. Maybe one day we can get SpriteExtend to do it instead!
; 23-Aug-94 SMC 1.10 Added MStephens bug fix for MED-03675 + higher precision error diffusion.
; 17-Nov-94 MJS 1.13 Speed ups in colour error diffusion
; 23-Nov-94 MJS 1.14 refuse to initialise (be dormant in ROM) if PDriver module not started
;                    (saves workspace RAM, if PDriver later in ROM chain)
; 25-Nov-94 MJS 1.15 Give proper message if PDriver not active
; 03-Jan-95 MJS 1.16 Fix MED-04204 bug (bad patterning, near-white, error diffused)
; 10-Jul-95 MJS 1.19 32 bit (16m colour) mode completely revamped; faster, greatly
;                    optimised over external whitespace, new RGB->CMYK calibration
;                    control (currently via new palette file).

                GET     hdr:ListOpts
                GET     hdr:Macros
                GET     hdr:System
                GET     hdr:ModHand
                GET     hdr:Services
                GET     hdr:FSNumbers
                GET     hdr:HighFSI
                GET     hdr:NewErrors
                GET     hdr:PDriver
                GET     hdr:PDumper
                GET     hdr:MsgTrans
                GET     hdr:HostFS
                GET     hdr:NDRDebug
                GET     hdr:DDVMacros
                GET     hdr:Proc
                GET     hdr:ColourTran

                GET     VersionASM

                GBLL    debug
                GBLL    hostvdu
                GBLL    fullrgb
                GBLL    userandom
                GBLS    PrivMessages

PrivMessages    SETS    ""

debug           SETL    false
hostvdu         SETL    true
debug_flush     SETL    false

fullrgb         SETL    true            ; turn tc's 24bit stuff on
userandom       SETL    true            ; use random perturbation in error diffusion

Philip          SETD    false
claim           SETD    false            ;Claiming memory
free            SETD    false            ;Free memory
SWI             SETD    false            ;internal SWI debugging
startjob        SETD    false            ;start job decoding
tidyjob         SETD    false            ;tidying workspace lists
prepstrip       SETD    false            ;prep strip functions
colset          SETD    false            ;colour handling
findblock       SETD    false            ;block finding routines
mjs             SETD    false
mjs2            SETD    true

;------------------------------------------------------------------------------
;
; Define some suitable R12 relative workspace
;
;------------------------------------------------------------------------------
                       ^ 0
diffuse_abefore        # 4
diffuse_anow           # 4
diffuse_before         # 4
diffuse_workspace      * :INDEX: @@

                        ^ 0
halftone_x              # 4
halftone_y              # 4
halftone_table          # 4
halftone_halfsize       # 4
halftone_xstart         # 4
halftone_ystart         # 4
halftone_workspace      * :INDEX: @@

                        ^ 0,WP
MessagesBlock           # 16            ;Scratch block used by MessageTrans
error_buffer		# 256
MessagesOpen            # 4             ;Flag to indicate messages file open
SharedMessages          # 4             ;->Shared messages block allocated / =0 if none

errorbuffer             # 4
RandomSeed              # 4                      ;Random seed for diffuser
FirstStrip              # 4                      ;Flag set for first strip by PDumper_StartJob
                        [ fullrgb
FullRGBInfo             # 0
redbuffer               # 4
greenbuffer             # 4
bluebuffer              # 4
pixsep                  # 4
;Note positioning of information above...MUST BE BEFORE Remove
                        ]

Remove                  # 1                      ;UCL % (for 24-bit?)
Overlap                 # 1                      ;Flag for overlap compensation
Spare                   # 2                      ;Spare bytes

KeyDiffuse              # diffuse_workspace
CyanDiffuse             # diffuse_workspace
MagentaDiffuse          # diffuse_workspace
YellowDiffuse           # diffuse_workspace
KeyHalfInfo             # halftone_workspace
CyanHalfInfo            # halftone_workspace
MagentaHalfInfo         # halftone_workspace
YellowHalfInfo          # halftone_workspace
KCMYValues              # 0
KeyValue                # 1
CyanValue               # 1
MagentaValue            # 1
YellowValue             # 1
KCMYTable               # 4
;
;
;whitespace stuff
rowmargins              # 4 ; ptr to start of next row, 1st four words are margin counts
lastleftmargin          # 4
lastleftgreymargin      # 4
lastrightmargin         # 4
lastrightgreymargin     # 4
thisleftmargin          # 4
thisleftgreymargin      # 4
thisrightmargin         # 4
thisrightgreymargin     # 4

; these should only be needed for non-32 bit case
RedGammaTable           # 256
GreenGammaTable         # 256
BlueGammaTable          # 256

;
;mjs - new stuff for 32bit case
mjsCalibrationTable     # 0
ediff_density           # 4
CalibrateTables         # 12*256
;
workspace_required      * :INDEX: @@

; A block header

                        ^ 0
block_Link              # 4             ;->Next block / =0 if none
block_Type              # 4             ;ID word for the block allocated
block_DataStart         * :INDEX: @@

; Structures hanging from the various blocks

;***NEW PALETTE FORMAT***
                        ^ 0
palette_Version         # 4
palette_Palette         # 4             ;8-bit image palette
palette_Small           # 4*5           ;Small halftones (sizes in tables)
palette_Large           # 4*5           ;Large halftones (sizes in tables)
palette_Calibration     # 4             ;New calibration table
palette_PalInverse      # 4             ;Inverse 8-bit palette (KCMY calibrated)
palette_Removal         # 4             ;% under-colour removal
palette_Calib32         # 4             ;newer 32bit cmyk calibration stuff

                        ^ 0
diffuse_RandomSeed      # 4             ;Random seed used for diffusion
diffuse_FirstPixel      # 4             ;Pixel stored at horizontal posn -1
diffuse_LineDataStart   # 4             ;Start of the real line data

;------------------------------------------------------------------------------
;
; Define the module header
;
;------------------------------------------------------------------------------

        AREA    |PDumperSpt$$Code|, CODE, READONLY, PIC

module_base
        & 0                             ;not an application
        & init -module_base
        & final -module_base
        & service -module_base

        & title -module_base
        & help -module_base
        & 0                             ;no command table

        & Module_SWISystemBase + PDumperSWI * Module_SWIChunkSize
        & despatch -module_base
        & table -module_base
        & 0
      [ :LNOT: No32bitCode
        & 0
        & moduleflags -module_base
      ]

title   = "PDumperSupport",0
help    = "PDumper Support",9,"$Module_HelpVersion"
      [ debug
        = " Development version"
      ]
        = 0
        ALIGN

table   = "PDumper",0
        = "Info",0
        = "Claim",0
        = "Free",0
        = "Find",0
        = "StartJob",0
        = "TidyJob",0
        = "SetColour",0
        = "PrepareStrip",0
        = "LookupError",0
        = "CopyFilename",0
        = "",0
        ALIGN

      [ :LNOT: No32bitCode
moduleflags DCD ModuleFlag_32bit
      ]

        LTORG


;..............................................................................
;
; Handle the module initialisation, simply attempt to claim some
; workspace.

init    ROUT

        Push    "R1-R3,LR"

      [ :LNOT:hostvdu
        Debug_Open "$.SptDebug"         ;Open debugging file if output to hostvdu not happening
      ]

  Debug mjs,"PDumperSpt initialise"

        LDR     R2,[WP]
        TEQ     R2,#0                   ;Any workspace already owned?
        BNE     %FT10                   ;Yes, so don't attempt to claim any

; we will be dormant in ROM, as long as PDriver is after us in chain
        SWI     XPDriver_CurrentJob     ;cheap check that PDriver module is present
        BVC     init_pdriver_active
; PDriver not present
        ADR     r0, no_PDriver_error
        MOV     r1, #0 ; use global messages
       	MOV     r2, #0 ; use internal buffer
        ADR     r4, title
        ADR     r5, pdr_title
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
        Pull    "R1-R3,PC"

no_PDriver_error
        DCD     ErrorNumber_NeedMod
        DCB     "NeedMod",0
        ALIGN
pdr_title
        DCB     "PDriver",0
        ALIGN

wspace_reqd
        DCD     workspace_required

init_pdriver_active
        MOV     R0,#ModHandReason_Claim
        LDR     R3,wspace_reqd
        SWI     XOS_Module              ;Attempt to claim a suitable lump of space
        Pull    "R1-R3,PC",VS           ;Return any errors generated during init

        STR     R2,[WP]
10      MOV     WP,R2                   ;Setup the workspace pointer

        SUBS    R0,R0,R0                ;(R0=0, V cleared) Mark as there being no messages files open
        STR     R0,SharedMessages
        STR     R0,MessagesOpen

        Pull    "R1-R3,PC"

;..............................................................................
;
; Handle the module close down, this simply involves ensuring that the
; messages files are closed and that any extra workspace has been
; released.

final   ROUT

      [ :LNOT: hostvdu
        Debug_Close                     ;Close the debugging file if being used
      ]

        LDR     WP,[WP]                 ;Resolve the workspace pointer
        B       CloseMessages           ;and then attempt to close the messages files

;..............................................................................
;
; Handle service calls being passed around.

Ursula_ServiceTable
        DCD     0
        DCD     service_fast - module_base
        DCD     Service_PDriverGetMessages
        DCD     0
        DCD     Ursula_ServiceTable - module_base
service
        MOV     r0, r0
service_fast
        TEQ     R1,#Service_PDriverGetMessages
        LDREQ   r12, [r12]
        BEQ     ServiceMessages         ;yup, then resolve workspace and process

        MOV     PC,LR

;..............................................................................
;
; Handle the despatch of SWIs within the module, this involves ensuring the
; IRQs are enabled and then despatching via the table.

despatch ROUT
      [ debugSWI
        Entry   ""
        Debug   SWI,"PDumperSpt entered with reason,WP",R11,WP
        Debuga  SWI,"   Input:",R0,R1,R2,R3,R4
        Debug   SWI,"",R5,R6,R7
        BL      %FT10
        DebugE  SWI,"Error generated"
        Debug   SWI,"Leaving PDumperSpt"
        Debuga  SWI,"  Output:",R0,R1,R2,R3,R4
        Debug   SWI,"",R5,R6,R7
        EXIT
10
      ]

        LDR     WP,[WP]                 ;Resolve the workspace pointer
        CMP     R11,#(%10-%00)/4
        BCS     %FT10
        Push    "r9, lr"
        WritePSRc SVC_mode,r9,,r10      ; enable IRQs; R10=old psr
        Pull    "r9"
        Push    "r10"
        MOV     lr, pc
        ADD     PC,PC,R11,LSL #2        ;Despatch if within a suitable range
        B       %FT20
00
        B       SWIPDumper_Info
        B       SWIPDumper_Claim
        B       SWIPDumper_Free
        B       SWIPDumper_Find
        B       SWIPDumper_StartJob
        B       SWIPDumper_TidyJob
        B       SWIPDumper_SetColour
        B       SWIPDumper_PrepareStrip
        B       SWIPDumper_LookupError
        B       SWIPDumper_CopyFilename
10
        ADR     R0,ErrorBlock_ModuleBadSWI
        ADR     R1,title
        B       LookupError             ;Setup suitable error string
20
        Pull    "r10"
        ORRVS   r10, r10, #V_bit        ;Restore PSR, preserve V
        RestPSR r10,,cf
        Pull    "pc"

        MakeErrorBlock ModuleBadSWI

;------------------------------------------------------------------------------
;
; PDumper_Info implementation
;
;   Entry: -
;   Exit:  V =1 => R0 ->Error block
;          else,   R0 version number *100, ie. 1.23 =123
;                  R1 features of this support module
;                       bit 0 set => supports halftone grey
;                       bit 1 set => supports error diffuse grey
;                       bit 2 set => supports halftone colour
;                       bit 3 set => supports error diffuse colour
; NEW ENTRIES FOR RGB
;                       bit 4 set => supports full RGB halftone colour
;                       bit 5 set => supports full RGB diffuse colour
;
;                       all other bits zero
;
; This call simply returns information about the PDumper Support module,
; ie. which output routines it does support.  All modules support the
; basic set of SWIs to allocate, free, start end and tidy jobs.  This
; SWI describes the features of new SWIs added in later revisions and
; the features of the prepare strip routine.
;
;------------------------------------------------------------------------------

capflag_HalftoneGrey    * 1:SHL:0
capflag_DiffuseGrey     * 1:SHL:1
capflag_HalftoneColour  * 1:SHL:2
capflag_DiffuseColour   * 1:SHL:3
                        [ fullrgb
capflag_HalftoneRGB     * 1:SHL:4
capflag_DiffuseRGB      * 1:SHL:5
capflag_Supported       * capflag_HalftoneGrey +capflag_DiffuseGrey +capflag_HalftoneColour +capflag_DiffuseColour+capflag_HalftoneRGB+capflag_DiffuseRGB
                        |
capflag_Supported       * capflag_HalftoneGrey +capflag_DiffuseGrey +capflag_HalftoneColour +capflag_DiffuseColour
                        ]
SWIPDumper_Info ROUT

        LDR     R0,=Module_Version             ;Get version and capabilities
        LDR     R1,=capflag_Supported
        MOV     PC,LR

        LTORG

;------------------------------------------------------------------------------
;
; PDumper_Claim implementation
;
;   Entry: R0 ->anchor word within block
;          R3 size of block to be claimed
;          R4 tag for the block
;
;   Exit:  V =1 => R0 ->Error block
;          else,   R2 ->block allocated (on a word boundary)
;
; This call will allocate a block of memory and then link it into the specified
; anchor word.  The size specified need not be a word boundary and the ID
; is a four byte value stored after the link point.
;
; The block is linked in at the top of the chain, although this need/should
; not be assumed.
;
;------------------------------------------------------------------------------

SWIPDumper_Claim Entry "r0,r3"

        MOV     r10, r0                  ;Copy the pointer to the anchor word

        Debug   claim,"(claim) anchor, size, tag =",R0,R3,R4

        MOV     r0, #ModHandReason_Claim
        ADD     r3, r3, #block_DataStart
        SWI     XOS_Module               ;Attempt to claim the block
      [ debugclaim
        DebugE  claim,"(claim) failed"
        STRVS   R0,[SP]                  ;If it failed then return error
        EXIT    VS
        Debug   claim,"(claim) address, anchor, type",R2,R10,R4
      ]

        LDRVC   lr, [r10]                ;Get the current block pointer
        STRVC   r2, [r10]                ;Store new block link so that linked into the top of the chain
        STRVC   lr, [r2, #block_Link]

        STRVC   r4, [r2, #block_Type]    ;Store the block type and the type away
        ADDVC   r2, r2, #block_DataStart ;Modify the return pointer so points past header block

        STRVS   r0, [sp]                 ;Store a suitable error pointer

        EXIT

;------------------------------------------------------------------------------
;
; PDumper_Free implementation
;
;   Entry: R0 ->anchor word
;          R2 ->block to be released
;
;   Exit:  V =1 => R0 ->Error block
;
; This call will attempt to release a block from the chain, if it is not
; owned by the specified list then it will not be released and an error will
; be generated.
;
;------------------------------------------------------------------------------

        ASSERT  block_Link =0

SWIPDumper_Free Entry "r0,r2"

        SUB     r2, r2, #block_DataStart ;Adjust so pointer to actual word we will find
10
        LDR     lr, [r0, #block_Link]   ;Get the pointer to the next block
        TEQ     lr, #0                  ;Can I find the block?
        BEQ     %FT90                   ;No, so give an error about the block

        TEQ     lr, r2                  ;Is this the block I need?
        MOVNE   r0, lr
        BNE     %BT10                   ;No, so loop back until they have all been checked

        LDR     lr, [r2, #block_Link]   ;Get the pointer to the next block
        STR     lr, [r0, #block_Link]   ;and setup the parent pointer to free it

        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module              ;And then release the block
80
        STRVS   r0, [sp]
        EXIT                            ;Return passing back any errors that are generated
90
        ADR     r0, ErrorBlock_PDumperNotLinked
        BL      LookupError             ;Resolve the error
        B       %BT80

        MakeInternatErrorBlock PDumperNotLinked,,NotLink

;------------------------------------------------------------------------------
;
; PDumper_Find implementation
;
;   Entry: R0 ->anchor word
;          R2 tag
;
;   Exit:  V =1 => R0 ->Error block
;          else,   R2 ->tag block found
;
; This call scans from the specified anchor word down the chain until it locates
; the specified block of memory.  It will return an error if the block cannot
; be located.
;
;------------------------------------------------------------------------------

SWIPDumper_Find ROUT

        Debuga  findblock,"(find) Anchor word",R0
        Debug   findblock,", tag",R2

        MOV     r10, r0                 ;Setup a copy to the anchor word
00
        LDR     r10, [r10, #block_Link]
        TEQ     r10, #0                 ;Has the end of the list been reached?
        BEQ     %FT80                   ;..yup so give an error and exit

        Debug   findblock,"(find) Check record at",R10

        LDR     r11, [r10, #block_Type]
        Debuga  findblock,"(find) Tag for that block is",R11
        Debug   findblock," we want",R2

        CMP     r11, r2                 ;Have I found the block yet?
        BNE     %BT00                   ;..nope so loop back until all blocks checked

        ADD     r2, r10, #block_DataStart ;->Useable area of the block

        Debug   findblock,"(find) Found and pointer is",R2

        MOV     pc, lr

80
        Debug   findblock,"(find) End of list found, no block"

        ADRL    R0,ErrorBlock_PDumperBlockNotFound
        B       LookupError             ;Convert token to suitable error

        MakeInternatErrorBlock PDumperBlockNotFound,,BlkMiss

;------------------------------------------------------------------------------
;
; PDumper_StartJob implementation
;
;   Entry: R0 ->anchor word
;          R1 flags word
;               all other bits reserved
;
;          R2 ->Palette filename / =0 if not to load one
;
;   Exit:  V =1 => R0 ->Error block
;
; This is called at the start of a job.  It will attempt to setup any workspace
; that is required for the specified job.  R1 contains a flags word which
; is reserved for future expansion, R2 contains the pointer to the name of
; a palette file which should be loaded.
;
; If all is susessful then the palette will be loaded and a suitable block
; attached to the specified anchor word.
;
;------------------------------------------------------------------------------

find_close      * &0

SWIPDumper_StartJob Entry "r0-r4"

        Debug   startjob,"startJob: anchor word,flags",R0,R1
        DebugS  startjob,"          filename",R2

        CMP     r1, #0                  ;All flags currently reserved
        ADRNE   r0, ErrorBlock_PDumperReserved
        BNE     %FT95                   ;Complain to the user if any reserved bits are set

;Bugfix for no filename!

        CMP     r2,#0                   ;Will CLRV for me too
        BEQ     %FT80

        MOV     r11, r0                 ;Take a copy of the anchor word

        MOVS    r1, r2                  ;->Filename (may be zero)
        BEQ     %FT90

        MOV     r0, #open_mustopen :OR: open_nodir :OR: open_read
        SWI     XOS_Find                ;Attempt to open the file
        BVS     %FT80                   ;  and complain if it fails

        MOV     r1, r0
        MOV     r0, #OSArgs_ReadEXT
        SWI     XOS_Args                ;Get the size of the palette to load (into R2)

        Debug   startjob,"startjob: palette file size",R2

        MOVVC   r0, r11
        MOVVC   r3, r2
        LDRVC   r4, =BlockType_Palette  ;Claim a suitable block for the palette and tag it accordingly
        SWIVC   XPDumper_Claim          ;and then attempt to claim a suitable block of memory

        MOVVC   r0, #OSGBPB_ReadFromPTR
        MOV     r10, r2                 ; just in case OS_GBPB trashes our buffer
        SWIVC   XOS_GBPB                ;And then attempt to read the block (yarrooo!)
        MOV     r2, r10
        BVS     %FT30                   ;have to check contents now...

        LDR     r10,[r2]
        CMP     r10,#2                  ;check for palette version number - must be 2 <<<<
        BEQ     %FT10                   ;will clear V also, everything is Ok

        ADR     r0, ErrorBlock_PDumperBadPalette
        BL      LookupError             ;Resolve the error (could have a new one)
30                                      ;Always in error at this point
        MOV     r10,r0                  ;remember the error pointer!
        MOV     r0, r11
        SWI     XPDumper_Free           ;Release the block

        DebugE  startjob,"startjob: error before closing file"
        Debug   startjob,"startjob: close file (handle)",R1

        MOV     r2, r10                 ;And get back the old error from r10
        SETV                            ;V will be cleared by XPDumper_Free normally
10                                      ;only get directly here if V clear so r0 irrelevant
        SavePSR r3
        MOV     r0, #0
        SWI     XOS_Find                ; Close the stream (assumes R1 =file handle)
        TST     r3, #V_bit              ; leaves V alone
        MOVNE   r0, r2                  ; If there was an error earlier
        RestPSR r3,NE,f                 ; restore error pointer and PSR
80
        STRVS   r0, [sp]                 ;Return from the routine returning any error pointers
        MVNVC   r0, #0                   ;Flag to say this is the first strip
        STRVC   r0,FirstStrip
        [ {TRUE}                        ; ensure truecolour output can be gamma corrected
        BLVC    InvalidateGammaTable
        ]
        EXIT
90
        ADR     r0, ErrorBlock_PDumperBadPalette
95      BL      LookupError             ;Resolve the error
        B       %BT80                   ;..and then return

        MakeInternatErrorBlock PDumperBadPalette,,BadPal
        MakeInternatErrorBlock PDumperReserved,,Reservd

;------------------------------------------------------------------------------
;
; PDumper_TidyJob implementation
;
;   Entry: R0 ->anchor word for the job
;          R1 ->list of extra blocks to be removed / =0 if none
;
;               +0 tag for first block
;               +4 tag for next block
;
;               ... until null word
;
;          R2 flag to indicate if end of document or simple tidy up
;               =0 then simply tidy workspace
;               >0 then remove all blocks as end of document
;
;   Exit:  V =1 => R0 ->Error block
;
; This routine will attempt to release the page specific blocks associated
; with a particular job.  For instance the error diffusion area, but not
; the palette block (which is a global job one).
;
;------------------------------------------------------------------------------

SWIPDumper_TidyJob Entry "r1"

        Debug   tidyjob,"tidyjob: anchor word, list at, flags",R0,R1,R2

        CMP     r1, #0                  ;Does the caller have a list of blocks? (will clear V)
        BLNE    tidyjob
        EXIT    VS

        TEQ     r2, #0                  ;Is it a fatal tidy up or just the normal
        ADREQ   r1, internallist
        ADRNE   r1, internalendjoblist
        BL      tidyjob                 ;Attempt to tidy using this list then

        EXIT

;..............................................................................
;
; This routine will attempt to remove all the blocks attached to the anchor
; point.  The routine scans the blocks hanging from the anchor word and
; compares their tags against the ones specified in the list, if they match
; then they are removed.
;
; in    R0 ->anchor word
;       R1 ->null terminated list of words containing the tags of suitable blocks
;
; out   V =1 => R0 -> error block

        ASSERT  block_Link =0

tidyjob Entry "r0,r3"

        Debug   tidyjob,"tidyjob (local) anchor word,list",R0,R1

        SUB     r3, r0, #block_Link
10
        LDR     r2, [r3, #block_Link]   ;Get the pointer to a new block (=0 if none)
        CMP     r2, #0                  ;End of the list reached yet?
        BEQ     %FT90                   ;Return because the end of the list has been reached

        MOV     lr, r1                  ;->List of blocks to be scanned
        LDR     r11, [r2, #block_Type]  ;Get the tag associated with the block
15
        LDR     r10, [lr], #4
        TEQ     r10, #BlockType_EndOfList
        MOVEQ   r3, r2                  ;->New anchor point as not to remove this block
        BEQ     %BT10                   ;..and then loop back until finished scanning

        TEQ     r10, r11
        BNE     %BT15                   ;Is the tag in the list, if not then loop back until all checked

        Debug   tidyjob,"tidyjob (local) block within list"

        LDR     lr, [r2, #block_Link]   ;Get the pointer to the following block
        STR     lr, [r3, #block_Link]   ;...and then link around the required one

        Debug   tidyjob,"tidyjob (local) block at",R2

        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module              ;Attempt to free the block
        BVC     %BT10                   ;And continue looping until all released (unless errored)
        STR     r0, [sp]
90
        EXIT

;..............................................................................

internalendjoblist
        & BlockType_Palette

internallist
        & BlockType_ErrorDiffuse
        & BlockType_EndOfList

;------------------------------------------------------------------------------
;
; PDumper_LookupError implementation
;
;   Entry: R0 ->error block including token
;          R1 ->title of module / =0 for no string
;
;   Exit:  V =1 => R0 ->resolved error block
;
; This routine simply accesses the internal error handling routines within
; the support module.  Therefore removing any need to have the MsgTrans
; routines within the PDumper as most PDumpers simply resolve errors.
;
;------------------------------------------------------------------------------

SWIPDumper_LookupError ROUT

        B       LookupError             ;Quite boring really

;------------------------------------------------------------------------------
;
; PDumper_CopyFilename implementation
;
;   Entry: R0 ->Buffer to copy string into
;          R1 Size of buffer
;          R2 ->String to be copied
;
;   Exit:  V =1 => R0 ->Error block
;          else,   R0 ->Past terminating character
;                  R2 ->Last character copied
;
; This routine will copy the specified filename away into a buffer, reporting
; an overflow if this occurs (ie. more than R1 characters are copied).  The
; routine terminates on any characters <=32 and converts it to a null.
;
;------------------------------------------------------------------------------

SWIPDumper_CopyFilename Entry "r1"

10
        LDRB    lr, [r2], #1            ;Get a character
        CMP     lr, #32                 ;Is it within a suitable range?
        MOVLE   lr, #0
        MOVLE   r1, #0                  ;No, so terminate on a control code
        STRB    lr, [r0],#1
        SUBS    r1, r1, #1              ;Decrease the counter
        BGT     %BT10                   ;Looping until finished

        CMP     lr, #0                  ;Was the exit due to a buffer overflow?
        ADRNE   r0, ErrorBlock_PrintOverflow
        MOVNE   r1, #0
        BLNE    LookupError             ;Resolve the error token

        EXIT                            ;Return passing back a possible error

        MakeInternatErrorBlock PrintOverflow,,BufOFlo

;..............................................................................

      [ debug
        InsertNDRDebugRoutines
      ]

        GET     s.Manipulate
        GET     s.Colour
        GET     s.Halftone
        GET     s.Halftone32
        GET     s.Halftone8
        GET     s.Error
        GET     s.Error32
        GET     s.Error8
        GET     s.FullRGB
        GET     s.MsgCode

        END
@


4.9
log
@Detail:
  Replaced condition code on a RestPSR that was lost during 32-bit work.
  CloseMessages preserves flags like it needs to.
Admin:
  Built - not tested.

Version 1.28. Tagged as 'PDumperSpt-1_28'
@
text
@d236 1
a236 1
        LEADR   Module_LoadAddr
d386 1
a386 1
        ENTRY   ""
@


4.8
log
@  Re-instated important fix in service call handler which got lost during
    my cock-up earlier this week.
Detail:
  The workspace pointer was not being loaded before attempting to dereference
    it.  Effectively, this would in all likelihood have resulted in PDumperSpt
    blatted the kernel's module chain information - causing all sorts of
    carnage.
Admin:
  Built.
  Not tested.

Version 1.27. Tagged as 'PDumperSpt-1_27'
@
text
@d704 1
a704 1
        RestPSR r3,,f                   ; restore error pointer and PSR
@


4.7
log
@  More 32-bit compatibility - stack references were wrong in places.
Detail:
Admin:
  Built.

Version 1.23. Tagged as 'PDumperSpt-1_23'
@
text
@d366 1
a366 1
        DCD     ServiceMessages - module_base
d372 1
d374 1
@


4.6
log
@  Corrected typo in service call code.
Detail:
  Obviously a well exercised component, nobody noticed the LRD instruction
    which was trying to masquerade as an LDR.
Admin:
  Should now build.

Version 1.25. Tagged as 'PDumperSpt-1_25'
@
text
@d258 1
a258 1
help    = "PDumper Support",9,"$Module_MajorVersion ($Module_Date)"
d366 1
a366 1
        DCD     service_fast - module_base
a371 1
service_fast
a372 1
        LDREQ   r12, [r12]
@


4.5
log
@Fixed mistake in service call handler
Now remembers to get its workspace pointer correctly

Version 1.24. Tagged as 'PDumperSpt-1_24'
@
text
@d374 1
a374 1
        LRDEQ   r12, [r12]
@


4.4
log
@32-bit compatible.

Version 1.23. Tagged as 'PDumperSpt-1_23'
@
text
@d366 1
a366 1
        DCD     ServiceMessages - module_base
d372 1
d374 1
@


4.3
log
@Spinner branch merged
@
text
@d94 1
a94 1
                GET     Version
d114 1
a114 1
SWI             SETD    false            ;internal SWI debugging            
a122 3
                GBLL    newctrans
newctrans       SETL    true          ;New colourtrans available

d204 1
a204 1
                                            
d210 1
a210 1
block_DataStart         * :INDEX: @@ 
d215 1
a215 1
                        ^ 0 
a224 11
                        [ :LNOT:newctrans
                        ^ 0
;Calibration table offsets (for colourtrans really)
calib_Version           # 4              ;Version number (resonably small for checking)
calib_idealblack        # 4              ;Ideal black (often &00000000)
calib_idealwhite        # 4              ;Ideal white (often &FFFFFF00)
calib_SWI               # 4              ;Own SWI for proprietary processing
calib_tablecount        # 4              ;Number of tables (1 or 3)
calib_gammatables       # 0              ;calibration tables start here
                        ]

d237 1
a237 1
        
d240 1
a240 1
        & init -module_base     
d243 1
a243 1
        
d252 4
d258 1
a258 1
help    = "PDumper Support",9,"$VString ($Date)"
d279 4
d285 1
d287 1
a287 1
; 
d300 1
a300 1
                          
d339 1
a339 1
        MOV     R0,#0                   ;Mark as there being no messages files open
d343 1
a343 1
        Pull    "R1-R3,PC",,^
d346 2
a347 2
; 
; Handle the module close down, this simply involves ensuring that the 
d361 1
a361 1
; 
d364 8
a371 2
service ROUT

a372 1
        LDREQ   WP,[WP]                 ;If it's the service call we are interested
d375 1
a375 1
        MOVS    PC,LR
d378 1
a378 1
; 
a397 2
        TEQP    PC,#SVC_mode            ;Ensure IRQs are enabled

d399 8
a406 2
        ADDCC   PC,PC,R11,LSL #2        ;Despatch if within a suitable range
        B       %FT10
d413 1
a413 1
        B       SWIPDumper_TidyJob        
d421 6
a426 1
        B       LookupError             ;Setup suitable error string 
d449 1
a449 1
; ie. which output routines it does support.  All modules support the 
d453 1
a453 1
; 
d455 1
a455 1
         
d469 1
a469 1
        LDR     R0,=Version             ;Get version and capabilities 
d471 3
a473 1
        MOVS    PC,LR
d482 1
a482 1
;                     
d488 1
a488 1
; is a four byte value stored after the link point. 
d494 1
a494 1
                 
d498 1
a498 1
                     
d513 1
a513 1
        STRVC   lr, [r2, #block_Link]   
d528 1
a528 1
;                     
d538 1
a538 1
              
d562 1
a562 1
        B       %BT80       
d572 1
a572 1
;                     
d589 1
a589 1
        LDR     r10, [r10, #block_Link]     
d601 1
a601 1
                   
d625 1
a625 1
;                     
d633 1
a633 1
; If all is susessful then the palette will be loaded and a suitable block 
d637 1
a637 1
               
d639 1
a639 1
  
d657 1
a657 1
        BEQ     %FT90                  
d670 1
a670 1
        MOVVC   r3, r2                  
d697 1
a697 1
        MOV     r3, pc                  ;Store the error pointer + PSR
d702 1
a702 1
        TEQNEP  r3, #0                  ; restore error pointer and PSR
d711 1
a711 1
90             
d730 1
a730 1
;                         
d742 1
a742 1
       
d746 1
a746 1
             
d759 1
a759 1
; 
d771 1
a771 1
 
d776 1
a776 1
        SUB     r3, r0, #block_Link                  
d799 1
a799 1
           
d822 1
a822 1
;                     
d842 1
a842 1
;                     
d852 1
a852 1
                                                                      
d858 1
a858 1
        MOVLE   lr, #0   
a886 1
;      [ fullrgb
a887 4
;      ]
      [ :LNOT:newctrans
        GET     s.CTrans
      ]
@


4.2
log
@Version Spin_merge taken
@
text
@d148 1
d316 1
a316 1
        MOV     r2, #0 ; use internal buffer
@


4.1
log
@Initial revision
@
text
@d73 3
a75 2
; 13-Jan-95 MJS 1.17 Fix MED-04348 (bad patterning near 25%)
; 02-Mar-95 MJS 1.18 Allow ink-density-correcting palette, for Stylus colour 720 dpi
d105 1
a105 1
hostvdu         SETL    false
d111 11
a121 9
Philip          SETD    true
claim           SETD    false           ;Claiming memory
free            SETD    false           ;Free memory
SWI             SETD    false           ;internal SWI debugging            
startjob        SETD    false           ;start job decoding
tidyjob         SETD    false           ;tidying workspace lists
prepstrip       SETD    false           ;prep strip functions
colset          SETD    false           ;colour handling
findblock       SETD    false           ;block finding routines
d152 1
a152 1
RandomSeed              # 0                      ;Random seed for diffuser or...
d181 14
d198 7
d225 1
d302 2
d331 3
d336 1
a336 1
        LDR     R3,=workspace_required
d669 2
a670 2
        CMP     r10,#1                  ;check for palette version number<<<<
        BLS     %FT10                   ;will clear V also, everything is Ok
d870 2
d873 2
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@d73 2
a74 3
; 10-Jul-95 MJS 1.19 32 bit (16m colour) mode completely revamped; faster, greatly
;                    optimised over external whitespace, new RGB->CMYK calibration
;                    control (currently via new palette file).
d104 1
a104 1
hostvdu         SETL    true
d110 9
a118 11
Philip          SETD    false
claim           SETD    false            ;Claiming memory
free            SETD    false            ;Free memory
SWI             SETD    false            ;internal SWI debugging            
startjob        SETD    false            ;start job decoding
tidyjob         SETD    false            ;tidying workspace lists
prepstrip       SETD    false            ;prep strip functions
colset          SETD    false            ;colour handling
findblock       SETD    false            ;block finding routines
mjs             SETD    false
mjs2            SETD    true
d149 1
a149 1
RandomSeed              # 4                      ;Random seed for diffuser
a177 14
;
;
;whitespace stuff
rowmargins              # 4 ; ptr to start of next row, 1st four words are margin counts
lastleftmargin          # 4
lastleftgreymargin      # 4
lastrightmargin         # 4
lastrightgreymargin     # 4
thisleftmargin          # 4
thisleftgreymargin      # 4
thisrightmargin         # 4
thisrightgreymargin     # 4

; these should only be needed for non-32 bit case
a180 7

;
;mjs - new stuff for 32bit case
mjsCalibrationTable     # 0
ediff_density           # 4
CalibrateTables         # 12*256
;
a200 1
palette_Calib32         # 4             ;newer 32bit cmyk calibration stuff
a276 2

  Debug mjs,"PDumperSpt initialise"
a303 3
wspace_reqd
        DCD     workspace_required

d306 1
a306 1
        LDR     R3,wspace_reqd
d639 2
a640 2
        CMP     r10,#2                  ;check for palette version number - must be 2 <<<<
        BEQ     %FT10                   ;will clear V also, everything is Ok
a839 2
        GET     s.Halftone32
        GET     s.Halftone8
a840 2
        GET     s.Error32
        GET     s.Error8
@


4.1.7.2
log
@   Use buffer in workspace for MessageTrans.
   Added 'Colour' debugging flag.
   Do not pass SpriteV calls to pdriver if a Wimp error box is open.
@
text
@d315 1
a315 6
	[	true
	ADR	r2, error_buffer
	MOV	r3, #?error_buffer
	|
       	MOV     r2, #0 ; use internal buffer
	]
@


4.1.7.3
log
@Tested, and fixed the previous set of fixes...
@
text
@a147 1
error_buffer		# 256
@


4.1.7.4
log
@Fixed corruption on module init
@
text
@d316 4
d321 1
@


4.1.7.4.2.1
log
@changed the service call handler as per new spec.  Also added Multi-Bit handling.
@
text
@d105 1
a105 1
hostvdu         SETL    false
d117 1
a117 1
prepstrip       SETD    true            ;prep strip functions
d121 1
a121 3
mjs2            SETD    false
remote		SETD	false		; debug using debugmod
stats		SETD    true
d124 1
a124 1
newctrans       SETL    true            ;New colourtrans available
a130 1

d132 1
a132 1
diffuse_abefore        # 4	; Floyd Steinberg
a134 3
diffuse_a_after        # 4	; Burke filter
diffuse_b_before       # 4
diffuse_ab_before      # 4
d151 1
a151 3
	[ 		debugremote
DebugBlock		# 64
	]
a171 1

a201 1
MultiBitPalette	        # 4
a290 55
;####################### MACROS

XDebugMod_Send  EQU	&06c440

	MACRO
$label	RemoteDB	$text

$label 
	[ debugremote
	Push	"r0"
	ADR	r0, %FT20
	SWI	XDebugMod_Send
	Pull	"r0"
	B	%FT10
20
	DCB	"$text",0
10
	]
	MEND
	
	MACRO
$label	RemoteDBReg	$reg1, $reg2, $reg3

$label 
	[ debugremote
	 Push	"r0-r2"
	MOV	R0, $reg1
	ADRL    R1, DebugBlock
	MOV	R2, #124
	SWI	OS_ConvertHex8
	MOV	R2, #&20
	STRB	R2, [R1]
	Pull	"r0-r2"
  	Push	"r0-r2"
	MOV	R0, $reg2
	ADRL    R1, DebugBlock
	ADD	R1, R1, #9
	MOV	R2, #115
	SWI	OS_ConvertHex8
	MOV	R2, #&20
	STRB	R2, [R1]
	Pull	"r0-r2"
	Push	"r0-r2"
	MOV	R0, $reg3
	ADRL    R1, DebugBlock
	ADD	R1, R1, #18
	MOV	R2, #106
	SWI	OS_ConvertHex8
	ADRL    R0, DebugBlock
	SWI	XDebugMod_Send
	Pull	"r0-r2"
	]	
	MEND

;###############################
d301 1
a301 1
        Debug_Open "$.debug.SptDebug"         ;Open debugging file if output to hostvdu not happening
d303 1
a357 1
	;RemoteDB  "Killed"
d361 1
a367 5
serviceentry_ServTab
	DCD	0
	DCD	Service_PDriverGetMessages         ; finding messages block?
	DCD	0
        DCD     serviceentry_ServTab - module_base  ;anchor for table
d370 1
a370 1
	MOV	R0, R0
a657 4
        ;RemoteDB	"Setting up the palette"
        ;BL	SetLookupPalette	; this is now done in the dumper.
        ;RemoteDB	"Setup palette"

a875 2
        GET     s.Error32M
        GET	s.MultiBit
@


4.1.5.1
log
@Import from SrcFiler
@
text
@d73 2
a74 3
; 10-Jul-95 MJS 1.19 32 bit (16m colour) mode completely revamped; faster, greatly
;                    optimised over external whitespace, new RGB->CMYK calibration
;                    control (currently via new palette file).
d104 1
a104 1
hostvdu         SETL    true
d110 9
a118 11
Philip          SETD    false
claim           SETD    false            ;Claiming memory
free            SETD    false            ;Free memory
SWI             SETD    false            ;internal SWI debugging            
startjob        SETD    false            ;start job decoding
tidyjob         SETD    false            ;tidying workspace lists
prepstrip       SETD    false            ;prep strip functions
colset          SETD    false            ;colour handling
findblock       SETD    false            ;block finding routines
mjs             SETD    false
mjs2            SETD    true
d149 1
a149 1
RandomSeed              # 4                      ;Random seed for diffuser
a177 14
;
;
;whitespace stuff
rowmargins              # 4 ; ptr to start of next row, 1st four words are margin counts
lastleftmargin          # 4
lastleftgreymargin      # 4
lastrightmargin         # 4
lastrightgreymargin     # 4
thisleftmargin          # 4
thisleftgreymargin      # 4
thisrightmargin         # 4
thisrightgreymargin     # 4

; these should only be needed for non-32 bit case
a180 7

;
;mjs - new stuff for 32bit case
mjsCalibrationTable     # 0
ediff_density           # 4
CalibrateTables         # 12*256
;
a200 1
palette_Calib32         # 4             ;newer 32bit cmyk calibration stuff
a276 2

  Debug mjs,"PDumperSpt initialise"
a303 3
wspace_reqd
        DCD     workspace_required

d306 1
a306 1
        LDR     R3,wspace_reqd
d639 2
a640 2
        CMP     r10,#2                  ;check for palette version number - must be 2 <<<<
        BEQ     %FT10                   ;will clear V also, everything is Ok
a839 2
        GET     s.Halftone32
        GET     s.Halftone8
a840 2
        GET     s.Error32
        GET     s.Error8
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@d73 2
a74 3
; 10-Jul-95 MJS 1.19 32 bit (16m colour) mode completely revamped; faster, greatly
;                    optimised over external whitespace, new RGB->CMYK calibration
;                    control (currently via new palette file).
d104 1
a104 1
hostvdu         SETL    true
d110 9
a118 11
Philip          SETD    false
claim           SETD    false            ;Claiming memory
free            SETD    false            ;Free memory
SWI             SETD    false            ;internal SWI debugging            
startjob        SETD    false            ;start job decoding
tidyjob         SETD    false            ;tidying workspace lists
prepstrip       SETD    false            ;prep strip functions
colset          SETD    false            ;colour handling
findblock       SETD    false            ;block finding routines
mjs             SETD    false
mjs2            SETD    true
d149 1
a149 1
RandomSeed              # 4                      ;Random seed for diffuser
a177 14
;
;
;whitespace stuff
rowmargins              # 4 ; ptr to start of next row, 1st four words are margin counts
lastleftmargin          # 4
lastleftgreymargin      # 4
lastrightmargin         # 4
lastrightgreymargin     # 4
thisleftmargin          # 4
thisleftgreymargin      # 4
thisrightmargin         # 4
thisrightgreymargin     # 4

; these should only be needed for non-32 bit case
a180 7

;
;mjs - new stuff for 32bit case
mjsCalibrationTable     # 0
ediff_density           # 4
CalibrateTables         # 12*256
;
a200 1
palette_Calib32         # 4             ;newer 32bit cmyk calibration stuff
a276 2

  Debug mjs,"PDumperSpt initialise"
a303 3
wspace_reqd
        DCD     workspace_required

d306 1
a306 1
        LDR     R3,wspace_reqd
d639 2
a640 2
        CMP     r10,#2                  ;check for palette version number - must be 2 <<<<
        BEQ     %FT10                   ;will clear V also, everything is Ok
a839 2
        GET     s.Halftone32
        GET     s.Halftone8
a840 2
        GET     s.Error32
        GET     s.Error8
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
