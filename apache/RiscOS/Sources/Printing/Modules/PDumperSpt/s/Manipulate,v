head	4.3;
access;
symbols
	PDumperSpt-1_31:4.3
	PDumperSpt-1_30:4.3
	PDumperSpt-1_29:4.3
	PDumperSpt-1_28:4.3
	PDumperSpt-1_27:4.3
	PDumperSpt-1_26:4.3
	PDumperSpt-1_25:4.3
	dellis_autobuild_BaseSW:4.3
	PDumperSpt-1_24:4.3
	PDumperSpt-1_23:4.3
	sbrodie_sedwards_16Mar2000:4.2
	dcotton_autobuild_BaseSW:4.3
	nturton_PDumperSpt-1_22:4.1.7.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1.4.1
	Ursula_RiscPC:4.1.7.1.4.1.0.2
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1.4.1
	UrsulaBuild_FinalSoftload:4.1.7.1.4.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1.4.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1.4.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1.4.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1.4.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1.4.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1.4.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1.4.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1.4.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1.4.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1.4.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1.4.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Ursula:4.1.7.1.0.4
	Ursula_bp:4.1.7.1
	Ursula_31Mar1998:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spin_merge_28May97:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_16May97:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2000.06.09.11.59.58;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.01.21.17.07.58;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.48.52;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.48.52;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.07.37;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.28.48;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.32.26;	author nturton;	state Exp;
branches
	4.1.7.1.4.1;
next	;

4.1.7.1.4.1
date	98.04.07.17.03.58;	author arodger;	state Exp;
branches;
next	;


desc
@@


4.3
log
@32-bit compatible.

Version 1.23. Tagged as 'PDumperSpt-1_23'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Manipulate

;------------------------------------------------------------------------------
;
; PDumper_PrepareStrip implementation
;
;   Entry: R0 ->anchor word
;          R1 ->bit image data
;          R2 resulting format of the strip
;               bits 0..7 => format
;                               0 =grey level (halftoned)
;                               1 =grey level (diffused)
;                               2 =colour     (halftoned)
;                               3 =colour     (diffused)
;                               2*X  =halftoned
;                               2*X+1=diffused for strip-type X
;
;               bits 8 set => returned monochrome always
;               all other bits reserved
;
;          R3 strip width in pixels               ;N.B. NOT IN BYTES
;          R4 strip height in scan lines
;          R5 strip width in pixels               ;INCLUDING PADDING, NOT IN BYTES
;>>>>>>>>>>>N.B. R5 IS DEFINED TO BE A MULTIPLE OF 4<<<<<<<<<<<<<<<<<
;          R6 halftone information
;               bits 0..7 => horizontal resolution
;               bits 8..15 => vertical resolution
;
;   Exit:  V =1 => R0 ->Error block
;          else,
;>>>>>>>>>>R1->bit image data to ouput, N.B. could now be different from R1 in<<<<<<<
; This call processes the specified 8BPP bitmap generated by the PDumperDP
; module into a format suitable for printing by the relevant output routine.
;
;------------------------------------------------------------------------------

                                ^ 0
preptype_GreyHalftone           # 1
preptype_GreyDithered           # 1
preptype_ColourHalftone         # 1
preptype_ColourDither           # 1
                                [ fullrgb
preptype_MultiRGBHalftone       # 1
preptype_MultiRGBDither         # 1
preptype_16BitRGBHalftone       # 1
preptype_16BitRGBDither         # 1
preptype_24BitRGBHalftone       # 1
preptype_24BitRGBDither         # 1
                                ]
preptype_Max                    * :INDEX: @@

prepflag_OutputInMonochrome     * 1:SHL:8

prepflag_Allowed                * 2_11111111
preptype_Mask                   * 2_11111111

SWIPDumper_PrepareStrip ROUT

;make sure width is multiple of 8 (assumed by some newer code), ie. catch case
;when old PDriverDP might cause crash
        TST     R3,#7
        BNE     %FT81

        Push    "R0-R1,R8,LR"

        Debug   prepstrip,"(prepstrip) anchor word",R0
        Debug   prepstrip,"            strip at",R1
        Debug   prepstrip,"            format",R2
        Debuga  prepstrip,"            width",R3
        Debuga  prepstrip,", height",R4
        Debuga  prepstrip,", byte width",R5
        Debug   prepstrip,", halftone information",R6

        LDR     R8,=prepflag_Allowed
        BICS    R8,R2,R8                ;Are any invalid bits set within flags
        BLNE    %FT80                   ;Yes, so give an error

        MOVVC   R8,R0                   ;->Pointer to anchor word
        MOVVC   R0,R1                   ;->Strip data
        BLVC    preproutine             ;Despatch to a suitable routine for prep work
        MOVVC   R8,#0
        STRVC   R8,FirstStrip           ;reset flag
        STRVS   R0,[SP]                 ;Balance the stack and then exit
        STRVC   R0,[SP,#4]              ;<<<<AND KEEP NEW STRIP POINTER
        Pull    "R0-R1,R8,PC"

80
        Debug   prepstrip,"(prepstrip) reserved bits set"

        ADRL    R0,ErrorBlock_PDumperReserved
        B       LookupError             ;Convert token to a suitable error

;sod it - this is a very rare error, so forget internationalisation
81
       ADR      R0,old_pdriverdp_error
       SETV
       MOV      PC,LR

old_pdriverdp_error
       DCD      0
       DCB      "PDumperSpt needs newer PDriverDP (illegal strip width)",0
       ALIGN

;..............................................................................

InvalidateGammaTable
        Push    "R0-R1,LR"

        ADRL    R0, RedGammaTable
        MOV     R1, #&FF
        STRB    R1, [R0]
        Pull    "R0-R1,PC"

;32bit case removed - replaced by code in s.Calib32
;BuildGammaTable32

BuildGammaTable16
        Push    "R0-R11,LR"

        LDR     R2, =BlockType_Palette
        SWI     XPDumper_Find
        BVS     builttable16

        LDR     R3, [R2, #palette_Calibration]
        TEQ     R3, #0
        ADDNE   R3, R2, R3

        Push    "R7,R0"
        MOV     R11, #&FF
        MOV     R0, #&1F
01
        MOV     R4, R0, LSL #3
        ORR     R4, R4, R4, LSR #5      ; convert from 5bit -> 8bit

        MOV     R1, R4, LSL #8          ; make 24 bit rgb value
        ORR     R1, R1, R4, LSL #16
        ORR     R1, R1, R4, LSL #24

        SWI     XColourTrans_ConvertDeviceColour

        ADRL    R6, RedGammaTable
        AND     R7, R11, R2, LSR #8
        AND     R7, R7, #&F8
        MOV     R7, R7, LSR #3
        STRB    R7, [R6, R0]

        ADRL    R6, GreenGammaTable
        AND     R7, R11, R2, LSR #16
        AND     R7, R7, #&F8
        MOV     R7, R7, LSR #3
        STRB    R7, [R6, R0]

        ADRL    R6, BlueGammaTable
        AND     R7, R11, R2, LSR #24
        AND     R7, R7, #&F8
        MOV     R7, R7, LSR #3
        STRB    R7, [R6, R0]

        SUBS    R0, R0, #1
;version 1.18 - make sure table includes proper 0 correction
        BPL     %BT01

        Pull    "R7,R0"

builttable16
        Pull    "R0-R11,PC"


;32bit case removed - replaced by code in s.Calib32
;gamma_correctstrip32

        GET     s.Calib32

;8 bit gr8rey calib
        GET     s.Calib8

gamma_correctstrip16
        EntryS  "R0-R11"

        Push    "R0-R3"

        ADR     R3, RedGammaTable
        LDRB    R1, [R3]
        CMP     R1, #&FF
        MOVEQ   R0, R8
        BLEQ    BuildGammaTable16
        Pull    "R0-R3"

        MUL     R5, R4, R3
        MOV     R6, #&1F               ; R6 = mask for 5 bit colour
        ADR     R8, RedGammaTable
        ADR     R9, GreenGammaTable
        ADR     R10, BlueGammaTable

        LDRB    R11,[R9,#0]  ; = corrected-green[0] , detects ink-density-correcting palette

        MOV     R7, #&7F00
        ORR     R7, R7, #&FF
        ORR     R7, R7, R7, LSL #16    ; R7 = &7FFF7FFF = white,white

        B       %FT01

next_pixel16
        SUBS    R5, R5, #2             ; next 2 pixels
        EXITS   LE

01      LDR     R14, [R0], #4          ; load 2 pixels

; version 1.18 - stop the optimise which doesn't look-up 0 (black) - may need correction
        CMP     R14,R7                 ; are they white,white ?
        BEQ     next_pixel16

        AND     R3, R6, R14, LSR #10     ; extract blue 1
        AND     R2, R6, R14, LSR #5      ; extract green 1
        AND     R1, R6, R14              ; extract red 1
        LDRB    R1, [R8, R1]             ; gamma correct red
        LDRB    R2, [R9, R2]             ; gamma correct green
        LDRB    R3, [R10, R3]            ; gamma correct blue
        CMP     R11,#0
        BEQ     %FT02
;ink density correction - 32k mode is going to be rubbish anyway (range 0..31, then reduce ink
;densities ... oh dear!), so do something cheap, ie. just crunch all components by another 62.5% factor
        ADD     R1,R1,R1,LSL #2 ;*5
        MOV     R1,R1,LSR #3    ;*5/8 (62.5%)
        ADD     R1,R1,#12       ;+3/8 (of 31)
        ADD     R2,R2,R2,LSL #2
        MOV     R2,R2,LSR #3
        ADD     R2,R2,#12
        ADD     R3,R3,R3,LSL #2
        MOV     R3,R3,LSR #3
        ADD     R3,R3,#12
02
        ORR     R1, R1, R2, LSL #5
        ORR     R1, R1, R3, LSL #10
        MOV     R4, R1                   ; remember corrected 1

        AND     R3, R6, R14, LSR #10+16  ; extract blue 2
        AND     R2, R6, R14, LSR #5+16   ; extract green 2
        AND     R1, R6, R14, LSR #16     ; extract red 2
        LDRB    R1, [R8, R1]             ; gamma correct red
        LDRB    R2, [R9, R2]             ; gamma correct green
        LDRB    R3, [R10, R3]            ; gamma correct blue
        CMP     R11,#0
        BEQ     %FT03
        ADD     R1,R1,R1,LSL #2 ;*5
        MOV     R1,R1,LSR #3    ;*5/8 (62.5%)
        ADD     R1,R1,#12       ;+3/8 (of 31)
        ADD     R2,R2,R2,LSL #2
        MOV     R2,R2,LSR #3
        ADD     R2,R2,#12
        ADD     R3,R3,R3,LSL #2
        MOV     R3,R3,LSR #3
        ADD     R3,R3,#12
03
        ORR     R1, R1, R2, LSL #5
        ORR     R1, R1, R3, LSL #10
        ORR     R4, R4, R1, LSL #16      ; corrected 1 and 2

        STR     R4, [R0, #-4]            ; store corrected 1 and 2
        B       next_pixel16


preproutine
        AND     R1,R2,#preptype_Mask    ;Extract suitable bits for execution

        Debug   prepstrip,"(prepstrip) strip at",R0
        Debuga  prepstrip,"(prepstrip) output type",R1
        Debug   prepstrip,", flags word",R2

        [ {TRUE}
        Push    "R14"
        CMP     R1, #0
        CMPNE   R1, #1
        BLEQ    cmyk_convert_strip8     ;grey->k conversion (also finds whitespace margins)
        CMP     R1, #6                  ; Is it a 16bpp output
        CMPNE   R1, #7                  ; or is it a 32bpp output
        BLEQ    gamma_correctstrip16    ; then gamma correct output strip
        CMP     R1, #8
        CMPNE   R1, #9
        BLEQ    cmyk_convert_strip32    ;combined (fast) calibration, rgb->cmyk conversion
        Pull    "R14"
        ]

        CMP     R1,#preptype_Max        ;Is it within a sensible range?
        ADDCC   PC,PC,R1,LSL #2         ;...yup so despatch
        B       %FT99

        B       HalftoneGreySprite
        B       DitherGreySprite
        B       HalftoneColourSprite
        B       DitherColourSprite
        [ fullrgb
        B       HalftoneMultiRGB
        B       DitherMultiRGB
        B       Halftone16BitRGB
        B       Dither16BitRGB
        B       Halftone24BitRGB
        B       Dither24BitRGB
        ]
99
        Debug   prepstrip,"(prepstrip) kabooom!"

        ADR     R0,ErrorBlock_PDumperBadOutputType
        B       LookupError             ;Return a deep and meaningful error

        MakeInternatErrorBlock PDumperBadOutputType,,BadType

;------------------------------------------------------------------------------
;
; findblock / findblockR8
;
; Find the block based on the tag in R1, either using the anchor point in R0
; or R8.  The routine can be made to the next block by moving the returned
; pointer into the specified anchor word pointer and then calling the
; routines again.
;
; in    R0 ->anchor word (if 'findblock')
;       R1 tag of block to find
;       R8 ->anchor word (if 'findblockR8')
;
; out   V =1 => R0 ->error block
;       else,   R1 ->block located

findblockR8 ROUT

        Push    "R0,LR"

        Debuga  findblock,"(findblockR8) Anchor word",R8
        Debug   findblock,", tag",R1

        MOV     R0,R8           ;Move anchor word to suitable register
        BL      findblock       ;Attempt to find the block
        STRVS   R0,[SP]

        DebugE  findblock,"(findblockR8) Gave error"
        Debug   findblock,"(findblockR8) Pointer to strip block",R1

        Pull    "R0,PC"

; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

findblock ROUT

        Push    "R0,R2,LR"

        Debuga  findblock,"(findblock) Anchor word",R0
        Debug   findblock,", tag",R1

        MOV     R2,R1           ;Tag for the block to be found
        SWI     XPDumper_Find
        MOVVC   R1,R2           ;Resolve pointer to block if it has been found
        STRVS   R0,[SP]         ;..or maybe even the error pointer

        DebugE  findblock,"(findblock) Gave error"
        Debug   findblock,"(findblock) Pointer to strip block",R1

        Pull    "R0,R2,PC"

;------------------------------------------------------------------------------
;
; HalftoneGreySprite implementation
;
;   Entry: R0 ->strip
;          R3 dump width
;          R4 number of rows
;          R5 row width in bytes
;          R6 x halftone width in bits 0..7 and Y in bits 8..15
;          R8 ->anchor word for pdumper
;
;   Exit:  V =1 => R0 ->Error block
;
; Halftone the specified sprite using the data stored within the palette
; file.
;
;------------------------------------------------------------------------------

HalftoneGreySprite ROUT

        Push    "R0-R11,LR"

        LDR     R1,=BlockType_Palette   ;Tag for the palette file
        BL      findblockR8
        BVS     halftonegrey_return     ;If unable to locate the block then return

        ADR     R10,KeyHalfInfo            ;Needed later
        LDR     R11,FirstStrip
        TEQ     R11,#0
        BEQ     halftonegrey_start         ;Initialisation has been done
        MOV     R11,#0
        STR     R11,FirstStrip

        Debuga  prepstrip,"(halftone grey) Strip at",R0
        Debuga  prepstrip,", width",R3
        Debuga  prepstrip,", height",R4
        Debuga  prepstrip,", byte width",R5
        Debuga  prepstrip,", halftone info",R6
        Debug   prepstrip,", palette block at",R1
;Need to call Do_HalftoneGreySprite with a bit of register rearrangement...
;R0=R5 (columncount byte width used, halftoning missing bits doesn't matter)
;R1=R4 (rowcount)
;R2,R3=x,y
;R4,R6=table,halfsize
;R7,R8=xstart,ystart
;R10=R0 (sprite)
;R12,KeyHalfInfo=Small/Large halftone info for each colour...depends on R6
;Between strips, information is kept in KeyHalfInfo, like the colour rendering
        AND     R6,R6,#255           ;Get halftoning resolution
        CMP     R6,#4
        ADDLS   R8,R1,#palette_Small    ;Use small halftone if <=4
        ADDHI   R8,R1,#palette_Large    ;Otherwise large halftones
        MOV     R14,#0
;Clear out the halftone table
        MOV     R9,#halftone_workspace
00
        STR     R14,[R10],#4
        SUBS    R9,R9,#4
        BNE     %BT00
;So now x,y,xstart,ystart are Ok, Need also to set halftone_table and halftone_halfsize
        ADR     R10,KeyHalfInfo
        LDR     R14,[R8]                 ;Pick up offset to halftone table
        ADD     R14,R1,R14               ;Add the file start
        LDR     R9,[R14],#4              ;Load the size
        STR     R9,[R10,#halftone_halfsize]
        ADD     R9,R14,R9,LSL #2         ;Offset to the actual table
        STR     R9,[R10,#halftone_table]
;And now whole block is ready for load...
halftonegrey_start
        MOV     R1,R4
        LDMIA   R10,{R2,R3,R4,R6,R7,R8}
        MOV     R10,R0
        MOV     R0,R5
        CLRV                              ;There won't be any errors (honest guv!)
        BL      Do_HalftoneGreySprite
        ADR     R10,KeyHalfInfo
        STMIA   R10,{R2,R3,R4,R6,R7,R8}   ;Keep info for next sweep
halftonegrey_return
        DebugE  prepstrip,"(halftone grey) errored"
        Debug   prepstrip,"(halftone grey) exiting"

        STRVS   R0,[SP]                 ;Return any errors generated
        Pull    "R0-R11,PC"

;------------------------------------------------------------------------------
;
; DitherGreySprite implementation
;
;   Entry: R0 ->strip
;          R3 dump width (bytes or bits)
;          R4 dump height (rows)
;          R5 row width in bytes ( >=R3)
;          R6 x halftone width in bits 0..7 and Y in bits 8..15
;          R8 ->anchor word
;
;   Exit:  V =1 => R0 ->Error block
;
; Error diffuse a grey sprite using palette data.
;
;------------------------------------------------------------------------------
; Entry for Do_DitherGreySprite is
; R0=Width (***should be dump width, not row width??***) use R5 for the moment
; R1=Height (=R4)
; R2=abefore (kept between strips)
; R3=anow (kept between strips)
; (R5=before)
; R12,errorbuffer=allocated buffer for errors (initially blank), size=Width+2


DitherGreySprite ROUT

        Push    "R0-R11,LR"

        Debug   prepstrip,"(dither grey) Entered"

        LDR     R1,=BlockType_ErrorDiffuse
        BL      findblockR8             ;Attempt to find diffusion block
        BVC     %FT10                   ;We found it so no need to set one up

        Debug   prepstrip,"(dither grey) Allocate diffuse buffer"

        Push    "R3,R4"
        MOV     R0,R8
        ADD     R3,R5,#2                ;Size of block with two blanks at ends
        MOV     R3,R3,LSL#2             ;And need words (error may be +/-)
        LDR     R4,=BlockType_ErrorDiffuse
        SWI     XPDumper_Claim          ;Attempt to claim the block required
        Pull    "R3,R4"                 ;...restore R3,R4
        BVS     dithergrey_return

        Debug   prepstrip,"(dither grey) Diffuse buffer at",R2

        MOV     R1,#1                   ;Reset the random seed
        STR     R1,RandomSeed
        STR     R2,errorbuffer          ;Keep the error buffer for later
        ADD     R3,R5,#2                ;Temporary copy of line width used when reseting
        MOV     R1,#0                   ;Reset the rest of the buffer will nulls
05
        STR     R1,[R2],#4              ;Reset the pixel value
        SUBS    R3,R3,#1
        BNE     %BT05                   ;Loop back until all reset

        MOV   R2,#0                ;clear abefore/anow for the first row
        STR   R2,KeyDiffuse        ;before is dealt with by code anyway at line ends
        STR   R2,KeyDiffuse+4
10
        LDR     R10,[SP]                ;Restore original strip pointer
        MOV     R0,R5
        MOV     R1,R4
        LDR     R2,KeyDiffuse
        LDR     R3,KeyDiffuse+4

        CLRV                            ;Should be no errors
        BL      Do_DitherGreySprite

        STR     R2,KeyDiffuse           ;Keep for next time to glue lines together
        STR     R3,KeyDiffuse+4

        Debuga  prepstrip,"(dither grey) Strip at",R0
        Debuga  prepstrip,", width",R3
        Debuga  prepstrip,", height",R4
        Debuga  prepstrip,", byte width",R5
        Debug   prepstrip,", halftone info",R6
        Debug   prepstrip,"(dither grey) Diffuse buffer at",R8

dithergrey_return
        DebugE  prepstrip,"(dither grey) errored"
        Debug   prepstrip,"(dither grey) exiting"

        STRVS   R0,[SP]                 ;Store suitable error pointer if required
        Pull    "R0-R11,PC"

;routine used in multi-pass case to convert 3-plane 24bpp format into 32bpp
;(deep sprite) format for new code
;
;entry: R0->descriptor
;           R0+0  -> red plane
;           R0+4  -> green plane
;           R0+8  -> blue plane
;           R0+12 -> 32bpp buffer
;       R3 = width in pixels
;       R4 = height in pixels
conv_24bpp_to_32bpp ROUT
        Push    "R0-R9,LR"
   Debug prepstrip,"conv_24bpp_to_32bpp R0 w h ",R0,R3,R4
        LDMIA R0,{R5-R8}
   Debug prepstrip,"conv_24bpp_to_32bpp buffers ",R5,R6,R7,R8
        MUL   R3,R4,R3
01
        LDR   R0,[R5],#4
        LDR   R1,[R6],#4
        LDR   R2,[R7],#4
        CMN   R0,#1
        CMNEQ R1,#1
        CMNEQ R2,#1
        BEQ   %FT03  ;all 4 pixels white
        MOV   LR,#4
02
        AND   R4,R0,#255
        AND   R9,R1,#255
        ORR   R4,R4,R9,LSL #8
        AND   R9,R2,#255
        ORR   R4,R4,R9,LSL #16
        STR   R4,[R8],#4
        MOV   R0,R0,LSR #8
        MOV   R1,R1,LSR #8
        MOV   R2,R2,LSR #8
        SUBS  LR,LR,#1
        BNE   %BT02
        SUBS  R3,R3,#4
        BNE   %BT01
        Pull  "R0-R9,PC"
03
        MOV   R0,R0,LSR #8   ; &FFFFFFFF => &00FFFFFF (= 32bpp white)
        MOV   R1,R0
        MOV   R2,R0
        MOV   R4,R0
        STMIA R8!,{R0-R2,R4}
        SUBS  R3,R3,#4
        BNE   %BT01
        Pull  "R0-R9,PC"

;------------------------------------------------------------------------------
;
; HalftoneColourSprite implementation
;
;   Entry: R0 ->strip
;          R3 dump width (bytes or bits)          ***I.e. pixels for fullrgb
;          R4 number of rows
;          R5 row width in bytes ( >= R3 )
;          R6 x halftone width in bits 0..7 and Y in bits 8..15
;          R8 ->anchor word for pdumper
;
;   Exit:  V =1 => R0 ->Error block
;
; Recolour a 256 colour sprite according to the specified pattern table.
;
;------------------------------------------------------------------------------
            [ fullrgb
;In much the same way as for the error diffuser (see below)
;It is safe to write the result into the 'first' of the various buffers

HalftoneMultiRGB ROUT
        Push    "R0-R11,LR"
        MOV     R1,#0
        STR     R1,KCMYTable
        BL      conv_24bpp_to_32bpp         ;convert to 32bpp pixels
        LDR     R0,[R0,#12]                 ;pick up the 32bpp pointer
        Push    "R1"
        MOV     R1,#8 ;flags halftone mode
        BL      cmyk_convert_strip32
        Pull    "R1"
;now everything looks like ordinary 24BitRGB case
        MOV     R10,#4
        STR     R0,redbuffer
        ADD     R1,R0,#1
        STR     R1,greenbuffer
        ADD     R1,R0,#2
        STR     R1,bluebuffer
        STR     R0,[SP]                     ;See note below...
        B       HalftoneColourSprite2
Halftone16BitRGB ROUT
        Push    "R0-R11,LR"
        MOV     R1,#1
        STR     R1,KCMYTable
        MOV     R10,#2
        STR     R0,redbuffer
        B       HalftoneColourSprite2
Halftone24BitRGB ROUT
        Push    "R0-R11,LR"
        MOV     R1,#0
        STR     R1,KCMYTable
        MOV     R10,#4
        STR     R0,redbuffer
        ADD     R1,R0,#1
        STR     R1,greenbuffer
        ADD     R1,R0,#2
        STR     R1,bluebuffer
        B       HalftoneColourSprite2
            ]

HalftoneColourSprite ROUT

        Push    "R0-R11,LR"

        [ fullrgb
        MOV     R10,#0                  ;Get KCMYTable from palette file
HalftoneColourSprite2
        STR     R10,pixsep              ;Will be non-zero for real sprites
        ]

        LDR     R1,=BlockType_Palette   ;Tag for the palette block
        BL      findblockR8
        BVS     halftonecolour_return   ;If unable to find the palette block then exit

        LDR     R11,FirstStrip
  Debug mjs,"HalftoneColourSprite, FirstStrip = ",R11
        TEQ     R11,#0
        BEQ     halftonecolour_start         ;Initialisation has been done
        MOV     R11,#0
        STR     R11,FirstStrip

        [ fullrgb
        TEQ     R10,#0                         ;See if this is 8-bit sprite
        LDREQ     R11,[R1,#palette_PalInverse] ;Get the inverse table
        ADDEQ     R11,R1,R11                   ;Pointer to Key inverses
        STREQ     R11,KCMYTable                ;Keep it for the halftoner
        |
        LDR     R11,[R1,#palette_PalInverse] ;Get the inverse table
        ADD     R11,R1,R11                   ;Pointer to Key inverses
        STR     R11,KCMYTable                ;Keep it for the halftoner
        ]

        LDR     R11,[R1,#palette_Removal]    ;Removal and Overlap flag
        STR     R11,Remove                   ;We need these both

        Debuga  prepstrip,"(halftone colour) Strip at",R0
        Debuga  prepstrip,", width",R3
        Debuga  prepstrip,", height",R4
        Debuga  prepstrip,", byte width",R5
        Debuga  prepstrip,", halftone info",R6
        Debug   prepstrip,", palette block at",R1
;Need to call Do_HalftoneColourSprite with a bit of register rearrangement...
;R0=R5 (columncount byte width used, halftoning missing bits doesn't matter)
;R1=R4 (rowcount)
;R10=R0 (sprite)
;R12,KCMYTable=address of Inverse table in palette file
;R12,XXXHalfInfo=Small/Large halftone info for each colour...depends on R6
        AND     R6,R6,#255           ;Get halftoning resolution
        CMP     R6,#4
        ADDLS   R8,R1,#palette_Small+4  ;Use small halftone if <=4 (preceeded by Grey halftones)
        ADDHI   R8,R1,#palette_Large+4  ;Otherwise large halftones
;Order of tables is Grey,Key,Cyan,Magenta,Yellow i.e. same as for internal layout (of course)
        MOV     R14,#0
;Clear out the halftone tables, this should be dependant on 'first strip' flag
        ADR     R10,KeyHalfInfo
        MOV     R9,#halftone_workspace*4
00
        STR     R14,[R10],#4
        SUBS    R9,R9,#4
        BNE     %BT00
;So now x,y,xstart,ystart are Ok, Need also to set halftone_table and halftone_halfsize
        ADR     R10,KeyHalfInfo
        MOV     R7,#4
10
        LDR     R14,[R8],#4              ;Pick up offset to halftone table
        ADD     R14,R1,R14               ;Add the file start
        LDR     R9,[R14],#4              ;Load the size
        STR     R9,[R10,#halftone_halfsize]
        ADD     R9,R14,R9,LSL #2         ;Offset to the actual table
        STR     R9,[R10,#halftone_table]
        ADD     R10,R10,#halftone_workspace
        SUBS    R7,R7,#1                  ;Repeat for all four colours
        BNE     %BT10
;This is all that's required, except on the first strip
;WARNING: (IMPLICIT) USE OF R12 OFFSETS RESTRICTS USE TO ONE DUMPER AT A TIME...
;SHOULD CHANGE R12 TO A LOCAL ONE HUNG OFF THE ANCHOR
halftonecolour_start
        MOV     R10,R0
        MOV     R1,R4
        MOV     R0,R5
        CLRV                              ;There won't be any errors (honest guv!)
        BL      Do_HalftoneColourSprite

halftonecolour_return
        DebugE  prepstrip,"(halftone colour) errored"
        Debug   prepstrip,"(halftone colour) exiting"

        STRVS   R0,[SP]                 ;Store the error pointer (if error condition)
        Pull    "R0-R11,PC"

;------------------------------------------------------------------------------
;
; DitherColourSprite implementation
;
;   Entry: R0 ->strip
;          R3 dump width (bytes or bits)         ***I.e. Pixels for FullRGB
;          R4 dump height (rows)
;          R5 row width in bytes ( >=R3)
;          R6 x halftone width in bits 0..7 and Y in bits 8..15
;          R8 ->anchor word
;
;   Exit:  V =1 => R0 ->Error block
;
; Error diffuse a colour sprite using palette data.
;
;------------------------------------------------------------------------------
; See DitherGreySprite for info on register usage
; Things are multiplied up by a factor of 4 (e.g. error buffer size, and abefore/anows kept)
             [ fullrgb
;for these new ones, we have to set up the buffer pointers
;also some part of the image needs choosing for the output buffer
;since the input is at least 2x the size of the output, it is safe to use the
;first of the pointers as the output buffer, no overlaps occur (honest!)
DitherMultiRGB ROUT
        Push    "R0-R11,LR"
        MOV     R1,#0
        STR     R1,KCMYTable
        BL      conv_24bpp_to_32bpp         ;convert to 32bpp pixels
        LDR     R0,[R0,#12]                 ;pick up the 32bpp pointer
        Push    "R1"
        MOV     R1,#9 ;flags diffused mode
        BL      cmyk_convert_strip32
        Pull    "R1"
;now everything looks like ordinary 24BitRGB
        MOV     R10,#4
        STR     R0,redbuffer
        ADD     R1,R0,#1
        STR     R1,greenbuffer
        ADD     R1,R0,#2
        STR     R1,bluebuffer
        STR     R0,[SP]                     ;System picks this up later...
        B       DitherColourSprite2    ;I.e. this returns output buffer address
Dither16BitRGB ROUT
        Push    "R0-R11,LR"
        MOV     R1,#1
        STR     R1,KCMYTable
        MOV     R10,#2
        STR     R0,redbuffer
        B       DitherColourSprite2
Dither24BitRGB ROUT
        Push    "R0-R11,LR"
        MOV     R1,#0
        STR     R1,KCMYTable
        MOV     R10,#4
        STR     R0,redbuffer
        ADD     R1,R0,#1
        STR     R1,greenbuffer
        ADD     R1,R0,#2
        STR     R1,bluebuffer
        B       DitherColourSprite2
             ]

DitherColourSprite ROUT

        Push    "R0-R11,LR"

        [ fullrgb
        MOV     R10,#0
DitherColourSprite2
        STR     R10,pixsep              ;Will be non-zero for real sprites
        ]

        LDR     R1,=BlockType_Palette
        BL      findblockR8             ;Locate the requested block
        BVS     dithercolour_return     ;Return if it errors.

        [ fullrgb
        TEQ     R10,#0                         ;See if this is 8-bit sprite
        LDREQ     R11,[R1,#palette_PalInverse] ;Get the inverse table
        ADDEQ     R11,R1,R11                   ;Pointer to Key inverses
        STREQ     R11,KCMYTable                ;Keep it for the diffuser
        LDRNE     R11,[R1,#palette_Removal]    ;Removal and Overlap flag
        STRNE     R11,Remove                   ;We need Removal for full colour
        |
        LDR     R11,[R1,#palette_PalInverse] ;Get the inverse table
        ADD     R11,R1,R11                   ;Pointer to Key inverses
        STR     R11,KCMYTable                ;Keep it for the diffuser
        ]

        MOV     R0,R8
        LDR     R1,=BlockType_ErrorDiffuse
        BL      findblock               ;Attempt to locate the error diffusion block
        BVC     %FT10                   ;Found it Ok

        Push    "R3,R4"
        MOV     R0,R8                   ;Fix to ensure that the anchor word is correctly quoted!
        ADD     R3,R5,#2                ;Size and two blanks
        MOV     R3,R3,LSL#4             ;Needs words and 4 inks
        LDR     R4,=BlockType_ErrorDiffuse
        SWI     XPDumper_Claim          ;Attempt to claim the block (assumes R0 ->anchor word)
        Pull    "R3,R4"                 ;Preserve R3,R4 they are kinda important
        BVS     dithercolour_return     ;..exit if it fails to claim

        MOV     R1,#1                   ;Reset the random seed
        STR     R1,RandomSeed
        STR     R2,errorbuffer          ;Keep the error buffer for later
        MOV     R1,#0                   ;Reset scan line information within buffer
        ADD     R3,R5,#2                ;Temporary copy of line width used when reseting
05
        STR     R1,[R2],#4              ;Reset pixel entries to contain zero
        STR     R1,[R2],#4
        STR     R1,[R2],#4
        STR     R1,[R2],#4
        SUBS    R3,R3,#1
        BNE     %BT05                   ;And loop until they have all been reset

        MOV   R2,#0                ;clear abefore/anow for each colour
        STR   R2,KeyDiffuse        ;before is dealt with by code anyway at line ends
        STR   R2,KeyDiffuse+4
        STR   R2,CyanDiffuse
        STR   R2,CyanDiffuse+4
        STR   R2,MagentaDiffuse
        STR   R2,MagentaDiffuse+4
        STR   R2,YellowDiffuse
        STR   R2,YellowDiffuse+4
10
        Debuga  prepstrip,"(dither colour) Strip at",R0
        Debuga  prepstrip,", width",R3
        Debuga  prepstrip,", height",R4
        Debuga  prepstrip,", byte width",R5
        Debuga  prepstrip,", halftone info",R6
        Debug   prepstrip,"Inverse palette at",R11

        LDR     R10,[SP]                ;Restore original strip pointer
        MOV     R0,R5
        MOV     R1,R4
        CLRV                            ;Should be no errors
        BL      Do_DitherColourSprite

dithercolour_return
        DebugE  prepstrip,"(dither colour) errored"
        Debug   prepstrip,"(dither colour) exiting"

        STRVS   R0,[SP]                 ;Store the error pointer if needed
        Pull    "R0-R11,PC"

        END
@


4.2
log
@Version Spin_merge taken
@
text
@d42 1
a42 1
;                     
d44 1
a44 1
;          else,   
d67 1
a67 1
                                       
d77 1
a77 1
               
d79 1
a79 1
       
d105 1
a105 1
        B       LookupError             ;Convert token to a suitable error 
d118 1
a118 1
;..............................................................................           
d122 1
a122 1
        
d161 1
a161 1
        ADRL    R6, GreenGammaTable 
d171 1
a171 1
        STRB    R7, [R6, R0] 
d181 1
a181 1
 
d192 1
a192 1
        Push    "R0-R11,LR"
d195 1
a195 1
        
d212 1
a212 1
        ORR     R7, R7, #&FF           
d219 1
a219 1
        Pull    "R0-R11,PC",LE,^
d323 1
a323 1
; 
d325 1
a325 1
;                       
d330 1
a330 1
; 
d334 1
a334 1
; 
d344 1
a344 1
                          
d351 1
a351 1
                                
d354 1
a354 1
; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
d370 2
a371 2
                                
        Pull    "R0,R2,PC"     
d383 1
a383 1
;                     
d390 1
a390 1
          
d396 1
a396 1
        BL      findblockR8          
d449 1
a449 1
        STMIA   R10,{R2,R3,R4,R6,R7,R8}   ;Keep info for next sweep                           
d467 1
a467 1
;                     
d471 1
a471 1
;                     
d535 1
a535 1
        Debug   prepstrip,", halftone info",R6 
d605 1
a605 1
;          
d754 1
a754 1
;                     
d807 1
a807 1
         
d832 1
a832 1
        
d837 1
a837 1
  
d857 1
a857 1
        SUBS    R3,R3,#1           
d876 1
a876 1
                   
@


4.1
log
@Initial revision
@
text
@d72 6
a77 1
                  
d95 2
a96 1

d100 1
d107 11
d128 2
a129 39
BuildGammaTable32
        Push    "R0-R11,LR"

        LDR     R2, =BlockType_Palette
        SWI     XPDumper_Find
        BVS     builttable32

        LDR     R3, [R2, #palette_Calibration]
        TEQ     R3, #0
        ADDNE   R3, R2, R3

        Push    "R7,R0"
        MOV     R11, #&FF
        MOV     R0, #&FF
01      MOV     R1, R0, LSL #8
        ORR     R1, R1, R0, LSL #16
        ORR     R1, R1, R0, LSL #24
        SWI     XColourTrans_ConvertDeviceColour

        ADRL    R6, RedGammaTable
        AND     R7, R11, R2, LSR #8
        STRB    R7, [R6, R0]

        ADRL    R6, GreenGammaTable 
        AND     R7, R11, R2, LSR #16
        STRB    R7, [R6, R0]

        ADRL    R6, BlueGammaTable
        AND     R7, R11, R2, LSR #24
        STRB    R7, [R6, R0] 

        SUBS    R0, R0, #1
;version 1.18 - make sure table includes proper 0 correction (eg. for ink density)
        BPL     %BT01

        Pull    "R7,R0"
builttable32
        Pull    "R0-R11,PC"

a181 2
gamma_correctstrip32
        Push    "R0-R11,LR"
d183 2
a184 3
        ; R0 = location of pixel strip
        ; R3 = width of strip
        ; R4 = height of strip
d186 1
a186 8
        Push    "R0-R3"
        
        ADR     R3, RedGammaTable
        LDRB    R1, [R3]
        CMP     R1, #&FF
        MOVEQ   R0, R8
        BLEQ    BuildGammaTable32
        Pull    "R0-R3"
d188 2
a189 92
        MUL     R5, R3, R4              ; r5 = number pixels to convert
        MOV     R7, #&FF                ; r7 = byte mask for extracting rgb components
        ADR     R8,  RedGammaTable
        ADR     R9,  GreenGammaTable
        ADR     R10, BlueGammaTable

        LDRB    R4,[R9,#0] ; = corrected-green[0] , detects ink-density-correcting palette
        CMP     R4,#0
        ADRNEL  R4,two_ink_correction   ; fixed table, optimised for 62.5% 1-ink, 62.5% 2-ink

        MOV     R14, #&FFFFFF00         ; initialise initial value of last corrected pixel (=white)
        MOV     R1,R14,LSR #8           ; initialise corrected value of last corrected pixel (=white)
        B       %FT01

next_pixel32
        SUBS    R5, R5, #1
        Pull    "R0-R11,PC",EQ,^

01      LDR     R6, [R0], #4
; version 1.18 - stop the optimise which doesn't look-up 0 (black) - may need correction
        MOV     R6, R6, LSL #8
        CMP     R6, #&FFFFFF00
        BEQ     next_pixel32            ; don't gamma correct if pure white

        TEQ     R14, R6                 ; is it the same colour as the last one corrected
        MOVNE   R14, R6
        STREQ   R1, [R0, #-4]           ; if it is there use the last computed colour
        BEQ     next_pixel32

        AND     R11, R7, R6, LSR #8     ; extract red
        LDRB    R1, [R8, R11]           ; look up gamma corrected red

        AND     R11, R7, R6, LSR #16    ; extract green
        LDRB    R2, [R9, R11]           ; look up gamma corrected green

        LDRB    R3, [R10, R6, LSR #24]  ; extract + gamma correct blue

        CMP     R4,#0 ; if R4=0, no ink density correction
        BEQ     %FT09
;additional correction for use of two inks (fixed at 62.5%)
;first, do a sort (swaps remembered in R6), to give R1 <= R2 <= R3
;wish I could make this neater/faster
        MOV     R6,#0
        CMP     R1,R2
        ORRGT   R1,R1,R2,LSL #8
        ANDGT   R2,R1,#255
        MOVGT   R1,R1,LSR #8
        ORRGT   R6,R6,#1        ;flags 1st r1,r2 swap
        CMP     R2,R3
        ORRGT   R2,R2,R3,LSL #8
        ANDGT   R3,R2,#255
        MOVGT   R2,R2,LSR #8
        ORRGT   R6,R6,#2        ;flags r2,r3 swap
        CMP     R1,R2
        ORRGT   R1,R1,R2,LSL #8
        ANDGT   R2,R1,#255
        MOVGT   R1,R1,LSR #8
        ORRGT   R6,R6,#4        ;flags 2nd r1,r2 swap
;now adjust values - call initial R1,R2,R3 values u,v,w (w stays the same)
        SUB     R1,R1,R2        ;R1 := u - v
        SUB     R2,R3,R2        ;R2 := w - v (always +ve)
        LDRB    R2,[R4,R2]      ;look-up 2-ink correction
        SUB     R2,R3,R2        ;R2 := w - corrected(w - v) = corrected_v
        ADD     R1,R1,R2        ;R1 := u - v + corrected_v = corrected_u
;now we have to undo the sort, to move back to proper r,g,b
        TST     R6,#4           ;check for 2nd r1,r2 swap
        ORRNE   R1,R1,R2,LSL #8
        ANDNE   R2,R1,#255
        MOVNE   R1,R1,LSR #8
        TST     R6,#2           ;check for r2,r3 swap
        ORRNE   R2,R2,R3,LSL #8
        ANDNE   R3,R2,#255
        MOVNE   R2,R2,LSR #8
        TST     R6,#1           ;check for 1st r1,r2 swap
        ORRNE   R1,R1,R2,LSL #8
        ANDNE   R2,R1,#255
        MOVNE   R1,R1,LSR #8
;done adjustment!
09
        ORR     R1, R1, R2, LSL #8      ; combine components to give colour number
        ORR     R1, R1, R3, LSL #16

        STR     R1, [R0, #-4]          ; store corrected colour

        B       next_pixel32

; *** MJS bug fix: this code was swapping pairs of pixels horizontally, except
;     where pixels are white or black! This is fault MED-03675 on database.
;     New code deals with 2 pixels at once, to allow valid word-wise load/store
;     (hope number of pixels in row is even...)
;     Note: we skip pairs of black or white for speed: individual black or
;     white will be 'corrected' to same value, via table
d276 1
d286 3
d291 1
a291 1
        BLEQ    gamma_correctstrip16      ; then gamma correct output strip
d294 1
a294 1
        BLEQ    gamma_correctstrip32
d545 50
d619 10
a628 2
        MOV     R10,#1
        LDR     R1,[R0,#4]
d630 1
a630 1
        LDR     R1,[R0,#8]
a631 2
        LDR     R0,[R0]
        STR     R0,redbuffer
d669 1
d771 10
a780 2
        MOV     R10,#1
        LDR     R1,[R0,#4]
d782 1
a782 1
        LDR     R1,[R0,#8]
d784 1
a784 3
        LDR     R0,[R0]
        STR     R0,redbuffer
        STR     R0,[SP]                ;System picks this up later...
d837 1
a837 1
                  
a888 20


;2-ink correction table assuming 62.5% 1-ink (0..159 in) and 62.5% 2-ink
two_ink_correction
  DCB   0,  1,  2,  3,  3,  4,  5,  6,  7,  7,  8,  9, 10, 11, 12, 12
  DCB  13, 14, 15, 16, 16, 17, 18, 19, 20, 20, 21, 22, 23, 24, 24, 25
  DCB  26, 27, 27, 28, 29, 30, 30, 31, 32, 33, 33, 34, 35, 35, 36, 37
  DCB  38, 38, 39, 40, 40, 41, 42, 43, 43, 44, 45, 45, 46, 47, 47, 48
  DCB  49, 49, 50, 51, 51, 52, 53, 53, 54, 55, 55, 56, 56, 57, 58, 58
  DCB  59, 60, 60, 61, 61, 62, 63, 63, 64, 65, 65, 66, 66, 67, 67, 68
  DCB  69, 69, 70, 70, 71, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77
  DCB  77, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85
  DCB  86, 86, 87, 87, 88, 88, 88, 89, 89, 90, 90, 91, 91, 92, 92, 93
  DCB  93, 94, 94, 94, 95, 95, 96, 96, 96, 97, 97, 98, 98, 99, 99, 99
  DCB  99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99
  DCB  99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99
  DCB  99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99
  DCB  99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99
  DCB  99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99
  DCB  99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@d72 1
a72 6

;make sure width is multiple of 8 (assumed by some newer code), ie. catch case
;when old PDriverDP might cause crash
        TST     R3,#7
        BNE     %FT81
               
d90 1
a90 2
        MOVVC   R8,#0
        STRVC   R8,FirstStrip           ;reset flag
a93 1

a99 11
;sod it - this is a very rare error, so forget internationalisation
81
       ADR      R0,old_pdriverdp_error
       SETV
       MOV      PC,LR

old_pdriverdp_error
       DCD      0
       DCB      "PDumperSpt needs newer PDriverDP (illegal strip width)",0
       ALIGN

d110 39
a148 2
;32bit case removed - replaced by code in s.Calib32
;BuildGammaTable32
d201 2
d204 3
a206 2
;32bit case removed - replaced by code in s.Calib32
;gamma_correctstrip32
d208 8
a215 1
        GET     s.Calib32
d217 92
a308 2
;8 bit gr8rey calib
        GET     s.Calib8
a394 1

a403 3
        CMP     R1, #0
        CMPNE   R1, #1
        BLEQ    cmyk_convert_strip8     ;grey->k conversion (also finds whitespace margins)
d406 1
a406 1
        BLEQ    gamma_correctstrip16    ; then gamma correct output strip
d409 1
a409 1
        BLEQ    cmyk_convert_strip32    ;combined (fast) calibration, rgb->cmyk conversion
a659 50
;routine used in multi-pass case to convert 3-plane 24bpp format into 32bpp
;(deep sprite) format for new code
;
;entry: R0->descriptor
;           R0+0  -> red plane
;           R0+4  -> green plane
;           R0+8  -> blue plane
;           R0+12 -> 32bpp buffer
;       R3 = width in pixels
;       R4 = height in pixels
conv_24bpp_to_32bpp ROUT
        Push    "R0-R9,LR"
   Debug prepstrip,"conv_24bpp_to_32bpp R0 w h ",R0,R3,R4
        LDMIA R0,{R5-R8}
   Debug prepstrip,"conv_24bpp_to_32bpp buffers ",R5,R6,R7,R8
        MUL   R3,R4,R3
01
        LDR   R0,[R5],#4
        LDR   R1,[R6],#4
        LDR   R2,[R7],#4
        CMN   R0,#1
        CMNEQ R1,#1
        CMNEQ R2,#1
        BEQ   %FT03  ;all 4 pixels white
        MOV   LR,#4
02
        AND   R4,R0,#255
        AND   R9,R1,#255
        ORR   R4,R4,R9,LSL #8
        AND   R9,R2,#255
        ORR   R4,R4,R9,LSL #16
        STR   R4,[R8],#4
        MOV   R0,R0,LSR #8
        MOV   R1,R1,LSR #8
        MOV   R2,R2,LSR #8
        SUBS  LR,LR,#1
        BNE   %BT02
        SUBS  R3,R3,#4
        BNE   %BT01
        Pull  "R0-R9,PC"
03
        MOV   R0,R0,LSR #8   ; &FFFFFFFF => &00FFFFFF (= 32bpp white)
        MOV   R1,R0
        MOV   R2,R0
        MOV   R4,R0
        STMIA R8!,{R0-R2,R4}
        SUBS  R3,R3,#4
        BNE   %BT01
        Pull  "R0-R9,PC"

d684 2
a685 10
        BL      conv_24bpp_to_32bpp         ;convert to 32bpp pixels
        LDR     R0,[R0,#12]                 ;pick up the 32bpp pointer
        Push    "R1"
        MOV     R1,#8 ;flags halftone mode
        BL      cmyk_convert_strip32
        Pull    "R1"
;now everything looks like ordinary 24BitRGB case
        MOV     R10,#4
        STR     R0,redbuffer
        ADD     R1,R0,#1
d687 1
a687 1
        ADD     R1,R0,#2
d689 2
a727 1
  Debug mjs,"HalftoneColourSprite, FirstStrip = ",R11
d829 2
a830 10
        BL      conv_24bpp_to_32bpp         ;convert to 32bpp pixels
        LDR     R0,[R0,#12]                 ;pick up the 32bpp pointer
        Push    "R1"
        MOV     R1,#9 ;flags diffused mode
        BL      cmyk_convert_strip32
        Pull    "R1"
;now everything looks like ordinary 24BitRGB
        MOV     R10,#4
        STR     R0,redbuffer
        ADD     R1,R0,#1
d832 1
a832 1
        ADD     R1,R0,#2
d834 3
a836 1
        STR     R0,[SP]                     ;System picks this up later...
d889 1
a889 1
  
d941 20
@


4.1.7.1.4.1
log
@changed the service call handler as per new spec.  Also added Multi-Bit handling.
@
text
@d52 1
a52 1
preptype_GreyHalftone           # 1     ; this is one byte per pixel
d54 1
a54 1
preptype_ColourHalftone         # 1	; this is one word per pixel	
d78 1
a78 1
        Push    "R0-R2,R8,LR"
d80 7
a86 16
        ;Debug   prepstrip,"(prepstrip) anchor word r0",R0
        ;Debug   prepstrip,"            strip at    r1",R1
        ;Debug   prepstrip,"            format      r2",R2
        ;Debug   prepstrip,"            width       r3",R3
        ;Debug   prepstrip,", height                r4",R4
        ;Debug   prepstrip,", byte width            r5",R5
        ;Debug   prepstrip,", halftone information  r6",R6
        
        MOV     R8, R2, LSR #16
        CMP     R8, #4
        BGT	%FT80			; compare the maximum output colour size
        Push    "R2"		 	; store the bits per colour
        BIC	R2, R2, R8, LSL #16	; and clear them
                
        LDR     R8,=prepflag_Allowed	; test the rest for 
        ;Debug   prepstrip,"compare      r2, R8",R2, R8
d88 1
a89 1
        Pull    "R2"
d98 2
a99 2
        STRVC   R0,[SP,#4]              ;<<<<AND KEEP NEW STRIP POINTER, in r1
        Pull    "R0-R2,R8,PC"
d102 1
a102 1
        Debug   prepstrip,"(prepstrip) reserved bits set", R2, R8
d206 2
a207 2
        ADRL     R9, GreenGammaTable
        ADRL     R10, BlueGammaTable
d280 3
a282 7
        ;Debug  prepstrip,"(prepstrip) Preproutine version 3.00"
        ;Debug  prepstrip,"(prepstrip) strip at",R0
        ;Debug  prepstrip,"(prepstrip) output type",R1
        ;Debug  prepstrip,", flags word",R2
        ; R8 = anchor word
        ; r0 = pointer to sprite
        ; r1 = r2 if preptypemask = allowed mask, and why not
d297 1
a297 11
        
	TST    R2, #&F:SHL:16
	BEQ    %FT10
	;Debug  prepstrip, "calling Dither Multi", R1, R2
	CMP    R1, #1			; test for grey scale
	BEQ	DitherGreyMulti
	CMP    R1, #9			; test for grey scale
	BEQ	DitherCMYKMulti
	B	%FT99
10
	Debug  prepstrip, "calling Dither", R1, R2
@


4.1.5.1
log
@Import from SrcFiler
@
text
@d72 1
a72 6

;make sure width is multiple of 8 (assumed by some newer code), ie. catch case
;when old PDriverDP might cause crash
        TST     R3,#7
        BNE     %FT81
               
d90 1
a90 2
        MOVVC   R8,#0
        STRVC   R8,FirstStrip           ;reset flag
a93 1

a99 11
;sod it - this is a very rare error, so forget internationalisation
81
       ADR      R0,old_pdriverdp_error
       SETV
       MOV      PC,LR

old_pdriverdp_error
       DCD      0
       DCB      "PDumperSpt needs newer PDriverDP (illegal strip width)",0
       ALIGN

d110 39
a148 2
;32bit case removed - replaced by code in s.Calib32
;BuildGammaTable32
d201 2
d204 3
a206 2
;32bit case removed - replaced by code in s.Calib32
;gamma_correctstrip32
d208 8
a215 1
        GET     s.Calib32
d217 92
a308 2
;8 bit gr8rey calib
        GET     s.Calib8
a394 1

a403 3
        CMP     R1, #0
        CMPNE   R1, #1
        BLEQ    cmyk_convert_strip8     ;grey->k conversion (also finds whitespace margins)
d406 1
a406 1
        BLEQ    gamma_correctstrip16    ; then gamma correct output strip
d409 1
a409 1
        BLEQ    cmyk_convert_strip32    ;combined (fast) calibration, rgb->cmyk conversion
a659 50
;routine used in multi-pass case to convert 3-plane 24bpp format into 32bpp
;(deep sprite) format for new code
;
;entry: R0->descriptor
;           R0+0  -> red plane
;           R0+4  -> green plane
;           R0+8  -> blue plane
;           R0+12 -> 32bpp buffer
;       R3 = width in pixels
;       R4 = height in pixels
conv_24bpp_to_32bpp ROUT
        Push    "R0-R9,LR"
   Debug prepstrip,"conv_24bpp_to_32bpp R0 w h ",R0,R3,R4
        LDMIA R0,{R5-R8}
   Debug prepstrip,"conv_24bpp_to_32bpp buffers ",R5,R6,R7,R8
        MUL   R3,R4,R3
01
        LDR   R0,[R5],#4
        LDR   R1,[R6],#4
        LDR   R2,[R7],#4
        CMN   R0,#1
        CMNEQ R1,#1
        CMNEQ R2,#1
        BEQ   %FT03  ;all 4 pixels white
        MOV   LR,#4
02
        AND   R4,R0,#255
        AND   R9,R1,#255
        ORR   R4,R4,R9,LSL #8
        AND   R9,R2,#255
        ORR   R4,R4,R9,LSL #16
        STR   R4,[R8],#4
        MOV   R0,R0,LSR #8
        MOV   R1,R1,LSR #8
        MOV   R2,R2,LSR #8
        SUBS  LR,LR,#1
        BNE   %BT02
        SUBS  R3,R3,#4
        BNE   %BT01
        Pull  "R0-R9,PC"
03
        MOV   R0,R0,LSR #8   ; &FFFFFFFF => &00FFFFFF (= 32bpp white)
        MOV   R1,R0
        MOV   R2,R0
        MOV   R4,R0
        STMIA R8!,{R0-R2,R4}
        SUBS  R3,R3,#4
        BNE   %BT01
        Pull  "R0-R9,PC"

d684 2
a685 10
        BL      conv_24bpp_to_32bpp         ;convert to 32bpp pixels
        LDR     R0,[R0,#12]                 ;pick up the 32bpp pointer
        Push    "R1"
        MOV     R1,#8 ;flags halftone mode
        BL      cmyk_convert_strip32
        Pull    "R1"
;now everything looks like ordinary 24BitRGB case
        MOV     R10,#4
        STR     R0,redbuffer
        ADD     R1,R0,#1
d687 1
a687 1
        ADD     R1,R0,#2
d689 2
a727 1
  Debug mjs,"HalftoneColourSprite, FirstStrip = ",R11
d829 2
a830 10
        BL      conv_24bpp_to_32bpp         ;convert to 32bpp pixels
        LDR     R0,[R0,#12]                 ;pick up the 32bpp pointer
        Push    "R1"
        MOV     R1,#9 ;flags diffused mode
        BL      cmyk_convert_strip32
        Pull    "R1"
;now everything looks like ordinary 24BitRGB
        MOV     R10,#4
        STR     R0,redbuffer
        ADD     R1,R0,#1
d832 1
a832 1
        ADD     R1,R0,#2
d834 3
a836 1
        STR     R0,[SP]                     ;System picks this up later...
d889 1
a889 1
  
d941 20
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@d72 1
a72 6

;make sure width is multiple of 8 (assumed by some newer code), ie. catch case
;when old PDriverDP might cause crash
        TST     R3,#7
        BNE     %FT81
               
d90 1
a90 2
        MOVVC   R8,#0
        STRVC   R8,FirstStrip           ;reset flag
a93 1

a99 11
;sod it - this is a very rare error, so forget internationalisation
81
       ADR      R0,old_pdriverdp_error
       SETV
       MOV      PC,LR

old_pdriverdp_error
       DCD      0
       DCB      "PDumperSpt needs newer PDriverDP (illegal strip width)",0
       ALIGN

d110 39
a148 2
;32bit case removed - replaced by code in s.Calib32
;BuildGammaTable32
d201 2
d204 3
a206 2
;32bit case removed - replaced by code in s.Calib32
;gamma_correctstrip32
d208 8
a215 1
        GET     s.Calib32
d217 92
a308 2
;8 bit gr8rey calib
        GET     s.Calib8
a394 1

a403 3
        CMP     R1, #0
        CMPNE   R1, #1
        BLEQ    cmyk_convert_strip8     ;grey->k conversion (also finds whitespace margins)
d406 1
a406 1
        BLEQ    gamma_correctstrip16    ; then gamma correct output strip
d409 1
a409 1
        BLEQ    cmyk_convert_strip32    ;combined (fast) calibration, rgb->cmyk conversion
a659 50
;routine used in multi-pass case to convert 3-plane 24bpp format into 32bpp
;(deep sprite) format for new code
;
;entry: R0->descriptor
;           R0+0  -> red plane
;           R0+4  -> green plane
;           R0+8  -> blue plane
;           R0+12 -> 32bpp buffer
;       R3 = width in pixels
;       R4 = height in pixels
conv_24bpp_to_32bpp ROUT
        Push    "R0-R9,LR"
   Debug prepstrip,"conv_24bpp_to_32bpp R0 w h ",R0,R3,R4
        LDMIA R0,{R5-R8}
   Debug prepstrip,"conv_24bpp_to_32bpp buffers ",R5,R6,R7,R8
        MUL   R3,R4,R3
01
        LDR   R0,[R5],#4
        LDR   R1,[R6],#4
        LDR   R2,[R7],#4
        CMN   R0,#1
        CMNEQ R1,#1
        CMNEQ R2,#1
        BEQ   %FT03  ;all 4 pixels white
        MOV   LR,#4
02
        AND   R4,R0,#255
        AND   R9,R1,#255
        ORR   R4,R4,R9,LSL #8
        AND   R9,R2,#255
        ORR   R4,R4,R9,LSL #16
        STR   R4,[R8],#4
        MOV   R0,R0,LSR #8
        MOV   R1,R1,LSR #8
        MOV   R2,R2,LSR #8
        SUBS  LR,LR,#1
        BNE   %BT02
        SUBS  R3,R3,#4
        BNE   %BT01
        Pull  "R0-R9,PC"
03
        MOV   R0,R0,LSR #8   ; &FFFFFFFF => &00FFFFFF (= 32bpp white)
        MOV   R1,R0
        MOV   R2,R0
        MOV   R4,R0
        STMIA R8!,{R0-R2,R4}
        SUBS  R3,R3,#4
        BNE   %BT01
        Pull  "R0-R9,PC"

d684 2
a685 10
        BL      conv_24bpp_to_32bpp         ;convert to 32bpp pixels
        LDR     R0,[R0,#12]                 ;pick up the 32bpp pointer
        Push    "R1"
        MOV     R1,#8 ;flags halftone mode
        BL      cmyk_convert_strip32
        Pull    "R1"
;now everything looks like ordinary 24BitRGB case
        MOV     R10,#4
        STR     R0,redbuffer
        ADD     R1,R0,#1
d687 1
a687 1
        ADD     R1,R0,#2
d689 2
a727 1
  Debug mjs,"HalftoneColourSprite, FirstStrip = ",R11
d829 2
a830 10
        BL      conv_24bpp_to_32bpp         ;convert to 32bpp pixels
        LDR     R0,[R0,#12]                 ;pick up the 32bpp pointer
        Push    "R1"
        MOV     R1,#9 ;flags diffused mode
        BL      cmyk_convert_strip32
        Pull    "R1"
;now everything looks like ordinary 24BitRGB
        MOV     R10,#4
        STR     R0,redbuffer
        ADD     R1,R0,#1
d832 1
a832 1
        ADD     R1,R0,#2
d834 3
a836 1
        STR     R0,[SP]                     ;System picks this up later...
d889 1
a889 1
  
d941 20
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
