head	1.3;
access;
symbols
	PMonitor-0_05:1.3
	PMonitor-0_04:1.3
	PMonitor-0_03:1.2
	PMonitor-0_02:1.1.1.1
	PMonitor-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2016.06.12.14.01.11;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	NBbUtQWVrLY0nbaz;

1.2
date	2012.02.02.08.38.56;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	VTBB7RWZVrI9LyRv;

1.1
date	2001.11.16.15.23.24;	author mboura;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.11.16.15.23.24;	author mboura;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Add extra parameter for osvarlen()
Requires AsmUtils-0_19.

Version 0.04. Tagged as 'PMonitor-0_04'
@
text
@/* Copyright 2001 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* main.c */

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>

#include "swis.h"

#include "Global/Variables.h"
#include "AsmUtils/osvarlen.h"
#include "DebugLib/DebugLib.h"
#include "Global/RISCOS.h"
#include "Global/UpCall.h"

#include "counting.h"
#include "header.h"
#include "ink.h"
#include "url.h"
#include "PDumper.h"

/* static variables */
static bool upcallClaimed;

static int inkMono, inkColour; /* Last notified ink levels */
static int newMono, newColour; /* New levels */
static bool fetchSucceeded;    /* When true, last notified can be updated from new levels */

/* static function definitions */

static _kernel_oserror *checkInk( void )
{
  _kernel_oserror *err = NULL;
  int length;
  int type;
  int session = 0;
  int status;
  const char *var = INK_SERVER_VAR;
  char *url = NULL;

  err = ink_levels( &newMono, &newColour );
  if( err ) return err;

  if(    ( newMono   == -1 || newMono   == inkMono )
      || ( newColour == -1 || newColour == inkColour )
    ) return NULL;

  length = osvarlen( var, VarType_Expanded ) + 1;
  url = malloc( length );
  
  err = _swix( OS_ReadVarVal, _INR(0,4), var, url, length, 0, 0 );  
  if( err ) return err;

  return url_fetch( url, INK_EXTRA_DATA, &fetchSucceeded );
}

/* extern functions */

void logWrite( char *text )
{
  _kernel_oserror *err = NULL;
  FILE *f;

  f = fopen( "<PMonitor$dir>.log", "a" );
  if( f )
  {
    char *b = malloc( 200 );
    char *p;

    *b = 0;
    err = _swix( OS_Word, _IN(0) | _IN(1), 14 , b); 
    if( !err )
    {
      for( p = b; *p != 13; p++ );
      *p = 0;
      fprintf( f, "%s %s\n", b, text );
    }
    fclose( f );
  }
}

/* Module entry points */

_kernel_oserror *initialisation(const char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *err = NULL;

  debug_initialise( "PMonitor", "ADFS::Malcolm.$.Work.Current.PMonitor.Debug", "PMonitor$Debug" );
  debug_set_stamp_debug( false ); 
  debug_set_device( FILE_OUTPUT );
  debug_set_unbuffered_files( true );
  
  /* Register for upcall */
  err = _swix(OS_Claim, _IN(0)|_IN(1)|_IN(2), UpCallV, (int)upcallVeneer, (int)pw);
  upcallClaimed = err ? false : true;

  /** Read the counts file from the server */

  return err;
}

_kernel_oserror *termination(int fatal, int podule, void *pw)
{
  _kernel_oserror *err = NULL;

  /* Release the upcall */
  if ( upcallClaimed )
  {
    _swix(OS_Release, _IN(0)|_IN(1)|_IN(2), UpCallV, upcallVeneer, pw);
    upcallClaimed = false;
  }
  /** Cancel any pending read of data from the printer */

  return err;
}

_kernel_oserror *upcallHandler( _kernel_swi_regs *r, void *pw )
{
  _kernel_oserror *err = NULL;
  int flags;
  int *registers;

  flags = r->r[1];
  registers = (int *)r->r[2];

  switch( r->r[0] )
  {
    case UpCall_PDumperAction:
      counting_upcall( flags, registers );
      if( registers[11] == PDUMPER_REASON_ABORT_JOB ) checkInk(); 
      break;
  }
  return err;
}

_kernel_oserror *starCommandHandler(const char *argString, int argc, int cmdNo, void *pw)
{
  _kernel_oserror *err;
  argString = argString; argc = argc; pw = pw;

  dprintf(( "Star_5", "\nstarCommandHandler %i\n", cmdNo ));
  
  switch( cmdNo )
  {
    case 0: /* Print the contents of the counters */
      err = counting_starCounts();
      break;

    case 1: /* Ink levels */
      err = ink_starLevels();
      break;

    default:
      return NULL;
  }
  return err;
}

/* end of main.c */
@


1.2
log
@Change to use CModule shared makefile.
In version 0.02 it was claimed this project compiled, but that cannot be
the case since 'url.c' was missing from the makefile and is called by
url_fetch() from the main module.
Many syntax errors fixed up (silly things like missing open braces
around functions) - the earlier log messages refer to this project being
canned but it seems like the code that was checked in didn't match what
was claimed.
Now compiles, but is likely to be of limited usefulness in the absence
of any discontinued parallel port HP inkject printers.

Version 0.03. Tagged as 'PMonitor-0_03'
@
text
@d24 1
d62 1
a62 1
  length = osvarlen( var ) + 1;
@


1.1
log
@Initial revision
@
text
@d18 2
a19 1
#include "stdbool.h"
d33 1
a33 3

#define INK_SERVER_VAR "RemotePrinterQuery$LowInkLevel"
#define INK_EXTRA_DATA NULL
a41 4
/* static function declarations */

static void checkInk( void );

d44 1
a44 1
static void checkInk( void )
d165 3
@


1.1.1.1
log
@PMonitor counts pages printed
Detail:
Monitors UpCall PDumper_Upcall and counts pages printed etc
Also parses HP Id string to find ink levels. HP intend to encrypt this information so it may cease to be useful.
Admin:
Tested and worked, but then the project was scrapped
@
text
@@
