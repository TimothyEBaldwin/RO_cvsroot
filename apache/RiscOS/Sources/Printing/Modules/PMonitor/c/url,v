head	1.2;
access;
symbols
	PMonitor-0_05:1.2
	PMonitor-0_04:1.2
	PMonitor-0_03:1.2
	PMonitor-0_02:1.1.1.1
	PMonitor-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2012.02.02.08.38.57;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	VTBB7RWZVrI9LyRv;

1.1
date	2001.11.16.15.23.24;	author mboura;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.11.16.15.23.24;	author mboura;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Change to use CModule shared makefile.
In version 0.02 it was claimed this project compiled, but that cannot be
the case since 'url.c' was missing from the makefile and is called by
url_fetch() from the main module.
Many syntax errors fixed up (silly things like missing open braces
around functions) - the earlier log messages refer to this project being
canned but it seems like the code that was checked in didn't match what
was claimed.
Now compiles, but is likely to be of limited usefulness in the absence
of any discontinued parallel port HP inkject printers.

Version 0.03. Tagged as 'PMonitor-0_03'
@
text
@/* Copyright 2001 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* url.c */

#include <stdbool.h>
#include <stdlib.h>
#include "Interface/URL.h"
#include "swis.h"
#include "ink.h"
#include "url.h"

#define CONNECTED   (1<<0)
#define REQUESTED   (1<<1)
#define DATA_SENT   (1<<2)
#define REPLIED     (1<<3)
#define ONGOING     (1<<4)
#define COMPLETE    (1<<5)
#define ABORTED     (1<<6)

#define BUFF_SIZE   (1024)

static int  regDump[16];
static bool callBackClaimed = false;
static bool callAfterClaimed = false;
static bool sessionActive = false;
static int  session;

static _kernel_oserror *process(_kernel_swi_regs *r, void *pw)
{
  _kernel_oserror *err;
  char *buffer;
  int status;

  err = _swix( URL_Status, _INR(0,1) | _OUT(0), 0, session, &status );
  if( err ) return err;

  if( status & ( COMPLETE | ABORTED ) )
  {
    return url_finalise();
  }

  if( status & ONGOING )
  {
    buffer = malloc( BUFF_SIZE );
    if( buffer == NULL ) return NULL;
    while( status & ( COMPLETE | ABORTED ) == 0 )
    {
      int bytesRead = 1;
      while( !err && bytesRead > 0 )
      {
        err = _swix( URL_ReadData, _INR(0,3) | _OUT(0) | _OUT(4), 0,
                     session, buffer, BUFF_SIZE,
                     &status, &bytesRead );
      }               
    }
  }
  
  return err;
}

/* url_fetch()
  Entry:
    url - The url to fetch, including the protocol, ie http
    extra - extra data to send as part of initial request
  Exit:
    success will be updated some time after this function returns
  Returns:
    Error
*/
_kernel_oserror *url_fetch( const char *url, const char *extra, bool *success )
{
  int status;
  
  _kernel_oserror *err = _swix( URL_Register, _IN(0) | _OUT(1), 0, &session );
  if( err ) return err;
  sessionActive = true;

  /* Start the fetch */
  err = _swix( URL_GetURL, _INR(0,6) | _OUT(0), 0, session, 2, url, INK_EXTRA_DATA, 2, NULL, &status );

  return err;
}

/* url_finalise()
  Tidy up any outstanding callEvery, callBack etc
*/
_kernel_oserror *url_finalise( void )
{
  int status;
  
  if( sessionActive ) _swix( URL_Deregister, _INR(0,1) | _OUT(0), 0, session, &status );
  sessionActive = false;
  
  return NULL;
}

/* End of url.c */
@


1.1
log
@Initial revision
@
text
@d17 5
a21 2
#include "stdbool.h"

d40 1
a40 1
static _kernel_oserror *process(_kernel_swi_regs *r, void *pw);
d63 1
a63 1
        err = _swix( URL_ReadData, _INR(0,3) | OUT(0) | OUT(4), 0,
d69 2
a70 1

d82 1
a82 1
_kernel_oserror *url_fetch( const char *url, const char *extra, bool *success );
d84 3
a86 1
  err = _swix( URL_register, _IN(0) | _OUT(1), 0, &session );
a91 2
  if( err ) return err;

d93 1
d100 3
a102 1

d105 2
@


1.1.1.1
log
@PMonitor counts pages printed
Detail:
Monitors UpCall PDumper_Upcall and counts pages printed etc
Also parses HP Id string to find ink levels. HP intend to encrypt this information so it may cease to be useful.
Admin:
Tested and worked, but then the project was scrapped
@
text
@@
