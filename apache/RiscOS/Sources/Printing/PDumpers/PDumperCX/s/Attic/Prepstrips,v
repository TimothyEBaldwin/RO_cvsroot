head	1.1;
access;
symbols
	RO_5_07:1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.2.1
	Ursula_RiscPC:1.1.2.1.0.2
	rthornb_UrsulaBuild-19Aug1998:1.1.2.1
	UrsulaBuild_FinalSoftload:1.1.2.1
	rthornb_UrsulaBuild-12Aug1998:1.1.2.1
	aglover_UrsulaBuild-05Aug1998:1.1.2.1
	rthornb_UrsulaBuild-29Jul1998:1.1.2.1
	rthornb_UrsulaBuild-22Jul1998:1.1.2.1
	rthornb_UrsulaBuild-15Jul1998:1.1.2.1
	rthornb_UrsulaBuild-07Jul1998:1.1.2.1
	rthornb_UrsulaBuild-17Jun1998:1.1.2.1
	rthornb_UrsulaBuild-03Jun1998:1.1.2.1
	rthornb_UrsulaBuild-27May1998:1.1.2.1
	rthornb_UrsulaBuild-21May1998:1.1.2.1
	rthornb_UrsulaBuild_01May1998:1.1.2.1
	Ursula:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	98.04.28.12.46.39;	author rthornb;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	98.04.28.12.46.40;	author rthornb;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file Prepstrips was initially added on branch Ursula.
@
text
@; Copyright 1998 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
@


1.1.2.1
log
@Added for the Ursula build of PDumperCX
@
text
@a0 167
; Copyright 1998 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > OutputDump

;..............................................................................
; 
; Output a monochrome strip to the specified device.
;
; in    R0 ->strip
;       R1 file handle
;       R2 strip type
;       R3 width of the strip in pixels
;       R4 height of the strip
;       R5 row width in bytes
;       R6 halftone information
;       R7 ->job workspace
;       R8 ->private word for job
; 
; out   V =1 => R0 -> error block

OutputStrip_Monochrome ROUT
        
        PDumper_Entry "R0-R3"

        PDumper_Reset

        STR     R1,FileHandle
        BL      output_mono_sprite      ;Convert the strip to suitable data for printer
        PDumper_Error
        PDumper_EmptyBuffer             ;Attempt to flush the buffer and tidy as required
        
        PDumper_Exit 

;..............................................................................
; 
; Output a grey-level strip to the specified device.
;
; in    R0 ->strip
;       R1 file handle
;       R2 strip type
;       R3 width of the strip in pixels
;       R4 height of the strip
;       R5 row width in bytes
;       R6 halftone information
;       R7 ->job workspace
;       R8 ->private word for job
; 
; out   V =1 => R0 -> error block

OutputStrip_Grey ROUT

        PDumper_Entry "R0-R9"

        STR     R1,FileHandle
                    
        PDumper_Reset

; Fiddle factor. On the last strip of a page, we are given an R4 of the
; correct size, but the sprite buffer ;  actually can contain more data down
; to the bottom of a dump_depth strip. This area must be cleared (or printed).
; We do this by halftoning or error-diffusing the full area.

        Push    "R0-R4"

        MOV     R1,R0
        MOV     R0,R8                   ;Setup pointer to the strip and then the anchor word

        LDRB    R2,[R7,#pd_dump_depth]                
        DivRem  R9,R4,R2,LR             ;= height DIV dump_depth_height
        CMP     R4,#0
        ADDNE   R9,R9,#1
        MUL     R4,R9,R2
                  
        AND     R2,R6,#255              ;Get the horizontal resolution
        CMP     R2,#1                   ;Is it monochrome or not?
        MOVGT   R2,#PDumperMakeStrip_GreyHalftone
        MOVLE   R2,#PDumperMakeStrip_GreyDither
	Push	"R8"
	LDRB	R8, [R7, #pd_private_flags] ; and don't we hate ism's
	TST	R8, #df_photorealism
	ORRNE	R2, R2, #2:SHL:16
	Pull    "R8"

	Debug	Dump, "Calling prepstrip"
        SWI     XPDumper_PrepareStrip
        PDumper_Error                   ;Trap any errors coming back 
        Debug   Dump, "Returned prepstrip"

        Pull    "R0-R4"                 ;Restore original depth
	Debug	Dump, "Calling output sprite"
        BL      output_grey_sprite
        Debug   Dump, "Returned output sprite"
        PDumper_EmptyBuffer

        Debug   Dump,"Exiting the grey-level dump routine"

        PDumper_Exit

;..............................................................................
; 
; Output a 256 colour strip to the specified device.
;
; in    R0 ->strip
;       R1 file handle
;       R2 strip type
;       R3 width of the strip in pixels
;       R4 height of the strip
;       R5 row width in bytes
;       R6 halftone information
;       R7 ->job workspace
;       R8 ->private word for job
; 
; out   V =1 => R0 -> error block

OutputStrip_Colour256 ROUT

        PDumper_Entry "R0-R9"
        
        Debug    , " Entered outputstrip_colour???? - does this need to be fixed"

        STR     R1,FileHandle
                    
        PDumper_Reset

; Fiddle factor. On the last strip of a page, we are given an R4 of the
; correct size, but the sprite buffer ;  actually can contain more data down
; to the bottom of a dump_depth strip. This area must be cleared (or printed).
; We do this by halftoning or error-diffusing the full area.

        Push    "R0-R4"

        MOV     R1,R0
        MOV     R0,R8                   ;Setup pointer to the strip and then the anchor word

        LDRB    R2,[R7,#pd_dump_depth]                
        DivRem  R9,R4,R2,LR             ;= height DIV dump_depth_height
        CMP     R4,#0
        ADDNE   R9,R9,#1
        MUL     R4,R9,R2
                  
        AND     R2,R6,#255              ;Get the horizontal resolution
        CMP     R2,#1                   ;Is it monochrome or not?
        MOVGT   R2,#PDumperMakeStrip_ColourHalftone
        MOVLE   R2,#PDumperMakeStrip_ColourDither
        
        SWI     XPDumper_PrepareStrip
        PDumper_Error                   ;Trap any errors coming back 

        Pull    "R0-R4"                 ;Restore original depth
        BL      output_colour_sprite
        PDumper_EmptyBuffer

        PDumper_Exit

        END
@
