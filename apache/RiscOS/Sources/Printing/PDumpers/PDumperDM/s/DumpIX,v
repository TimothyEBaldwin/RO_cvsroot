head	4.3;
access;
symbols
	PDumpers-1_46:4.3
	PDumpers-1_45:4.3
	PDumpers-1_44:4.3
	PDumpers-1_43:4.3
	PDumpers-1_42:4.3
	PDumpers-1_41:4.3
	RO_5_07:4.3
	PDumpers-1_40:4.3
	PDumpers-1_39:4.3
	PDumpers-1_38:4.3
	PDumpers-1_37:4.3
	PDumpers-1_36:4.3
	PDumpers-1_35:4.3
	PDumpers-1_33:4.3
	PDumpers-1_32:4.3
	PDumpers-1_31:4.3
	PDumpers-1_30:4.3
	PDumpers-1_29:4.3
	PDumpers-1_27:4.3
	PDumpers-1_26:4.3
	PDumpers-1_25:4.3
	Spin_merge-1_21:4.1.7.1
	PDumpers-1_24:4.3
	PDumpers-1_23:4.2
	PDumpers-1_22:4.2
	dellis_autobuild_BaseSW:4.2
	PDumpers-1_21:4.2
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.3
	dcotton_MPT2_build_16061999:4.1.7.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1
	Ursula_RiscPC:4.1.7.1.0.6
	nicke_PDumpers-1_21:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1
	UrsulaBuild_FinalSoftload:4.1.7.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	hsimons_BOCA-1_2-Release:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Ursula:4.1.7.1.0.4
	Ursula_bp:4.1.7.1
	Ursula_31Mar1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spin_merge_28May97:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge_16May97:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2000.11.26.11.22.00;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	2000.06.09.11.08.00;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.49.16;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.49.16;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.11.33;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.30.41;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.34.14;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@  32-bit fixes.
Detail:
  Some routines using EXITS needed R14 as a result register.
    These routines now work in 32-bit modes.
  Fixed ADR lr, unthread to be JumpAddress lr, unthread so that
    26-bit builds work when the routine jumped to uses EntryS.
Admin:
  Built 26-bit and 32-bit versions - untested,

Version 1.24. Tagged as 'PDumpers-1_24'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > DumpIX

;..............................................................................
;
; Output monochrome sprite to the current file.
;
;  in: R0 ->Strip
;      R1 dump width in bytes
;      R2 dump height in rows
;      R3 row width in bytes (>=R3)
;      R5 Row width in bytes
;      R7 ->Job workspace
;
; out: -

dumpIX_Monochrome ROUT

        Push    "LR"

        ADD     R7,R7,#pd_data
02
        SWI     XOS_ReadEscapeState
        Pull    "PC",CS                 ;If <escape> then exit

        LDRB    R1,[R7,#pd_data_line_start]
        ADD     R1,R7,R1                ;Line start data
        PDumper_PrintCountedString R1,R2,R6

        Push    "R3"

        BL      getix_length
        MOVS    R3,LR                   ;Get the length of line to use for printing
;;<<        LDRNE   R8,[R7,#pd_leftmargin -pd_data]
        PDumper_GetLeftMargin R8,NE
        ADDNE   R8,R8,#7                ;Align to a nice boundary
        ADDNE   LR,R3,R8,LSR #3
        PDumper_OutputReg LR            ;Send the line length going to be used

        TEQ     R3,#0                   ;Is the line null?
        BEQ     %FT25                   ;If it is then we must attempt to skip it...

        MOV     R2,#3                   ;Do three passes identically
01
        Push    "R0,R3,R8"

        MOV     R6,#255
05
        SUBS    R8,R8,#8                ;Decrease attempting to send the leading space
        BMI     %FT00                   ;If end of leading sequence reached then send it

        PDumper_OutputReg R6
        B       %BT05                   ;Otherwise loop back until all sent
00
        LDRB    R1,[R0],#1              ;Get next byte
        MVN     R1,R1,LSL #24           ;Perform the inversion
        MOV     LR,#8                   ;Reverse all eight bits
10
        MOVS    R1,R1,LSL #1
        MOV     R6,R6,RRX               ;Rotate back into a suitable register
        SUBS    LR,LR,#1
        BNE     %BT10                   ;Loop back until all bits inverted

        MOV     R6,R6,LSR #24           ;And then move so in byte 0 of the word
        PDumper_OutputReg R6

        SUBS    R3,R3,#1
        BGT     %BT00                   ;Whilst data remaining in line then loop

        Pull    "R0,R3,R8"

        SUBS    R2,R2,#1                ;Do passes for Red, Green and then Blue...
        BGT     %BT01
25
        Pull    "R3"                    ;Restore the original line length

        ADD     R0,R0,R5
        SUBS    R4,R4,#1
        BGT     %BT02                   ;Assuming there is more line data

        Pull    "PC"

;..............................................................................
;
; Output a 8BPP sprite to the current file, converting it to suitable Epson
; data as we go.
;
;  in: R0 ->Strip
;      R1 dump width in bytes
;      R2 dump height in rows
;      R3 row width in bytes (>=R3)
;      R5 Row width in bytes
;      R7 ->Job workspace
;
; out: -

dumpIX_Grey ROUT
dumpIX_Colour256 ROUT

        EntryS

        ADD     R7,R7,#pd_data
02
        SWI     XOS_ReadEscapeState
        EXITS   CS                      ;If <escape> then exit

        LDRB    R1,[R7,#pd_data_line_start]
        ADD     R1,R7,R1
        PDumper_PrintCountedString R1,R2,R8

        Push    "R3"                    ;We need to preserve the original line length

        BL      getix_length            ;Read length skipping any white space that may occur
        MOVS    R3,LR                   ;Is there any data to be sent?
        PDumper_GetLeftMargin R8,NE
;;<        LDRNE   R8,[R7,#pd_leftmargin -pd_data]
        MOVNE   LR,R3                   ;Ho hum ... account for Macro using R14
        ADDNE   R8,R8,#7
        ADDNE   LR,LR,#7                ;Align line length to a nice boundary
        MOVNE   LR,LR,LSR #3
        ADDNE   LR,LR,R8,LSR #3
        PDumper_OutputReg LR            ;Spit the length of the line out

        TEQ     R3,#0                   ;Is the line white - no data present?
        BEQ     %FT25                   ;Yes, so skip it...

        MOV     R1,#4                   ;Do three passes (bit mask 4,2 and then 1)
01
        Push    "R0,R3,R8"

        MOV     R6,#255                 ;Send white to pad the line starts
05
        SUBS    R8,R8,#8                ;Decrease the leading zero counter
        MOVMI   R8,#128
        BMI     %FT00                   ;Skip forward to include the leading nulls

        PDumper_OutputReg R6
        B       %BT05                   ;Loop back until all leading characters are sent
00
        LDRB    R2,[R0],#1
        TST     R2,#8
        TSTEQ   R2,R1                   ;Is the byte valid?
        BICNE   R6,R6,R8

        MOVS    R8,R8,LSR #1            ;Loop until all bytes scanned to make output byte
        BNE     %FT20

        PDumper_OutputReg R6
        MOV     R8,#128
        MOV     R6,#255                 ;Send byte and setup registers again
20
        SUBS    R3,R3,#1
        BGT     %BT00                   ;Loop until all bytes for the line sent

        TEQ     R8,#128                 ;Any pending data in register?
        BEQ     %FT20                   ;No so don't output it

        PDumper_OutputReg R6
20
        Pull    "R0,R3,R8"              ;Restore line length and pointer
        MOVS    R1,R1,LSR #1
        BNE     %BT01                   ;Loop back until done all passes required for the line
25
        Pull    "R3"                    ;Restore the original line length

        ADD     R0,R0,R5
        SUBS    R4,R4,#1                ;Decrease the line count (after increasing the index)
        BGT     %BT02                   ;Loop back until finished

        EXITS

;..............................................................................
;
; getix_length .. remove trailing zeros from a scan line.
;
; in    R0 ->scan line
;       R5 byte offset to next line
;
; out   V =1 => R0 -> error block
;       else,   LR modified to contain true length of line

getix_length ROUT

        Push    "r5, r12, r14"
        SavePSR r12

        MOV     LR,R5           ;Setup result register as an index
00
        SUBS    LR,LR,#1        ;Decrease the counter
        BMI     %10

        LDRB    R5,[R0,LR]      ;Get a byte from the line
        TEQ     R5,#0           ;Is it a null - white space?
        BEQ     %BT00           ;Loop back until they have all been checked
10
        ADD     LR,LR,#1        ;Adjust to cope with -VE and pre-indexing

        RestPSR r12,,f
        Pull    "r5, r12, pc"

        END
@


4.2
log
@32-bit compatible.

Version 1.21. Tagged as 'PDumpers-1_21'
@
text
@d197 2
a198 1
        EntryS  "R5"
d211 2
a212 1
        EXITS
@


4.1
log
@Initial revision
@
text
@d38 1
a38 1
                
d42 1
a42 1
                
d46 1
a46 1
        MOVS    R3,LR                   ;Get the length of line to use for printing                 
d55 1
a55 1
        
d58 1
a58 1
        Push    "R0,R3,R8"                                     
d79 1
a79 1
                            
d93 1
a93 1
        
d113 1
a113 1
        Push    "LR"
d118 1
a118 1
        Pull    "PC",CS,^               ;If <escape> then exit
d123 1
a123 1
                                             
d127 1
a127 1
        MOVS    R3,LR                   ;Is there any data to be sent?        
d136 1
a136 1
          
d139 1
a139 1
                            
d164 1
a164 1
20      
d174 1
a174 1
        MOVS    R1,R1,LSR #1        
d183 1
a183 1
        Pull    "PC",,^
d186 1
a186 1
; 
d197 2
a198 2
        Push    "R5,LR"
        
d210 1
a210 1
        Pull    "R5,PC",,^
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
