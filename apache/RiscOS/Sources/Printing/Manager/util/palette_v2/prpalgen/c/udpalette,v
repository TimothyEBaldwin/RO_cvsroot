head	4.1;
branch	4.1.3;
access;
symbols
	Manager-1_89:4.1.3.1
	Manager-1_88:4.1.3.1
	Manager-1_87:4.1.3.1
	Manager-1_86:4.1.3.1
	Manager-1_85:4.1.3.1
	Manager-1_84:4.1.3.1
	Manager-1_83:4.1.3.1
	Manager-1_82:4.1.3.1
	Manager-1_81:4.1.3.1
	Manager-1_80:4.1.3.1
	Manager-1_79:4.1.3.1
	Manager-1_78:4.1.3.1
	Manager-1_77:4.1.3.1
	Manager-1_76:4.1.3.1
	Manager-1_75:4.1.3.1
	Manager-1_74:4.1.3.1
	Manager-1_73:4.1.3.1
	Manager-1_72:4.1.3.1
	Manager-1_71:4.1.3.1
	Manager-1_70:4.1.3.1
	Manager-1_69:4.1.3.1
	Manager-1_68:4.1.3.1
	Manager-1_67:4.1.3.1
	Manager-1_66:4.1.3.1
	Manager-1_65:4.1.3.1
	Manager-1_64:4.1.3.1
	Manager-1_63:4.1.3.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.3.1
	Ursula_RiscPC:4.1.3.1.0.2
	rthornb_UrsulaBuild-19Aug1998:4.1.3.1
	UrsulaBuild_FinalSoftload:4.1.3.1
	rthornb_UrsulaBuild-12Aug1998:4.1.3.1
	aglover_UrsulaBuild-05Aug1998:4.1.3.1
	rthornb_UrsulaBuild-29Jul1998:4.1.3.1
	rthornb_UrsulaBuild-22Jul1998:4.1.3.1
	rthornb_UrsulaBuild-15Jul1998:4.1.3.1
	rthornb_UrsulaBuild-07Jul1998:4.1.3.1
	rthornb_UrsulaBuild-17Jun1998:4.1.3.1
	rthornb_UrsulaBuild-03Jun1998:4.1.3.1
	rthornb_UrsulaBuild-27May1998:4.1.3.1
	Ursula_bp:4.1.3.1
	Ursula:4.1.3.1
	Ursula_31Mar1998:4.1.3.1
	Daytona:4.1.3.1.0.4
	Daytona_bp:4.1.3.1
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.1
date	96.11.06.03.01.46;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.1.3.1
date	96.11.06.03.01.46;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* udpalette.c - update palette from version 1 (!Repro style) to version 2 */

#include <stdio.h>
#include <stdlib.h>

#include "prtablegen.h"
#include "udpalette.h"

#define Debug 0

/* ------------------------------------------------------------------------ */

static palhdr_t palhdr;
static uint8    *paldata;

static int datasize;

/* ------------------------------------------------------------------------ */

static void *do_malloc(int size)
{
  /* allocate size bytes; abort on failure */

  void *ptr = malloc(size);

  if (ptr == NULL)
  {
    fprintf(stderr,"Sorry! not enough memory (malloc failed)\n");
    exit(1);
  }

  return(ptr);
}

/* ------------------------------------------------------------------------ */

static void read_palette(FILE *fp)
{
  fread(&palhdr,sizeof(palhdr_t),1,fp);
  datasize = palhdr.reproinfo - sizeof(palhdr_t);

  if ((palhdr.version != 1) && (palhdr.version != 2))
  {
    fprintf(stderr,"cannot cope with palette version %1d (1 or 2 only)\n",
            palhdr.version);
    exit(1);
  }

#if Debug
  fprintf(stderr,
          "read palette:\n"
          "  version    = %1d\n"
          "  tables/repro at %8.8x\n"
          "  data size  = %1d\n",
          palhdr.version,palhdr.reproinfo,datasize);
#endif

  paldata = do_malloc(datasize);
  fread(paldata,datasize,1,fp);
}

/* ------------------------------------------------------------------------ */

static void write_palette(FILE *fp, tables_t *tables)
{
  palhdr.version = 2;

  fwrite(&palhdr,sizeof(palhdr_t),1,fp);
  fwrite(paldata,datasize,1,fp);
  fwrite(tables,sizeof(tables_t),1,fp);

#if Debug
  fprintf(stderr,"new palette:\n"
                 "  version = %1d\n"
                 "  size    = %1d\n",
                 palhdr.version,sizeof(palhdr_t)+datasize+sizeof(tables_t));
#endif
}

/* ------------------------------------------------------------------------ */

int udpalette(FILE *pal, tables_t *tables, int *tables_offset)
{
  int oldv;

  read_palette(pal);
  oldv = palhdr.version;

  rewind(pal);
  write_palette(pal,tables);

  *tables_offset = sizeof(palhdr_t) + datasize;
  return oldv;
}

/* ------------------------------------------------------------------------ */

int readback_params(FILE *pal, calib_t *calib)
{
  int      v;
  tables_t tables;
  calib_t  defcal = 
       { 100, 0,0,0, {1,1},1, {2,2,2,2},
         {100,100,100,100},100,100, {100,100},{100,100},1 };

  read_palette(pal);
  v = palhdr.version;
  if (v == 2)
  {
    fread(&tables,sizeof(tables_t),1,pal);
    *calib = tables.calib;
  }
  else *calib = defcal;

  return v;
}
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@
