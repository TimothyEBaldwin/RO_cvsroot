head	1.1;
branch	1.1.1;
access;
symbols
	Manager-1_89:1.1.1.1
	Manager-1_88:1.1.1.1
	Manager-1_87:1.1.1.1
	Manager-1_86:1.1.1.1
	Manager-1_85:1.1.1.1
	Manager-1_84:1.1.1.1
	Manager-1_83:1.1.1.1
	Manager-1_82:1.1.1.1
	Manager-1_81:1.1.1.1
	Manager-1_80:1.1.1.1
	Manager-1_79:1.1.1.1
	Manager-1_78:1.1.1.1
	Manager-1_77:1.1.1.1
	Manager-1_76:1.1.1.1
	Manager-1_75:1.1.1.1
	Manager-1_74:1.1.1.1
	Manager-1_73:1.1.1.1
	Manager-1_72:1.1.1.1
	Manager-1_71:1.1.1.1
	Manager-1_70:1.1.1.1
	Manager-1_69:1.1.1.1
	Manager-1_68:1.1.1.1
	Manager-1_67:1.1.1.1
	Manager-1_66:1.1.1.1
	Manager-1_65:1.1.1.1
	Manager-1_64:1.1.1.1
	Manager-1_63:1.1.1.1
	fish-0_01:1.1.1.1
	fish-0_00:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2000.10.05.08.53.11;	author arodger;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.05.08.53.11;	author arodger;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*----------------------------------------------------------------------*/
/*    Filename    : c.module	                                       	*/
/*    Author	  : R.W.Buckley						*/
/*    Date        : Mon 06th March 1995					*/
/*    Description : Handle loading of modules etc			*/
/*    Modification history:    	    		       			*/
/*      13/04/95 - Module version number for any module in ROM is now   */
/* 		   looked for. If the ROM module is dormant, it is      */
/* 		   woken up.   	      	  	    	     		*/
/*    		   							*/
/*----------------------------------------------------------------------*/

#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
//#include "constants.h"
#include "module.h"

extern _kernel_oserror *err; 	 /* Error block declared in main */

/*----------------------------------------------------------------------
    Name : rmload_latest_module

    Description : Strategy: - is the module currently in memory?
    		  	    - if so, what is its version number?
    			    - is the module in ROM?
    			    - if so, what is its version number?
    			    - is the module on disc?
    			    - if so, what is its version number?
    			    - use whichever module has the latest version

    Dependencies : file stuff - stdio.h
    		   swi calls  - kernel.h, swis.h
    		   strcmp     - string.h

    File format : Byte 0x14 in a module header refers to the offset
    	 	  from that address to the help string. This string
    	 	  is of a standard format and contains the version
    	 	  number. This can be extracted.

    Parameters : s_name - module name eg PDumperDM
    	       	 s_path - module path
----------------------------------------------------------------------*/
_kernel_oserror *module_rmload_latest(char *s_name, char *s_filename, char *s_path)
{
  _kernel_swi_regs reg;	 /* Declared in main */
  char s_filepath[255];
  int  ram_version, disc_version, rom_version, highest_version, rom_state;
  char *ptr;
  int  i;
  int  i_offset;
  FILE *f_file;

  sprintf(s_filepath,"%s%s",s_path,s_filename);

  ram_version = -1;
  reg.r[0] = 18;                               /* Lookup module name */
  reg.r[1] = (int)s_name;		       /* This name */
  err = _kernel_swi(OS_Module, &reg, &reg);
  if (err==NULL)    	       	               /* if module is in ram */
  {
    ptr = (char*)reg.r[3];                     /* look at start address */
    if (*(ptr+0x14)!=0)      		       /* Check for existance of help string (contains version) */
    {
      ptr+=*(ptr+0x14);                        /* The contents of 0x14 is the offset to the help string */
      while (*ptr!=9 && *ptr!=0) ptr++;        /* Skip tabs */
      if (*ptr!=0)   		 	       /* Not the end of line */
      {
        ram_version = 0;
        ptr++;
        while (*ptr>='0' && *ptr<='9' || *ptr=='.')
        {
          if (*ptr>='0' && *ptr<='9') ram_version = ram_version*10 + (*ptr-'0');
          ptr++;
        }
      }
    }
  }

  rom_version = -1;
  reg.r[0] = 20;   /* Enumerate ROM modules with version numbers */
  reg.r[1] = 0;
  reg.r[2] = -1;
  do
  {
    err = _kernel_swi(OS_Module, &reg, &reg);
    if (err == NULL)
    {
      if (strcmp((char*)reg.r[3],s_name) == 0)   /* Check module name */
      {
        rom_state    = reg.r[4];    /* -1 = unplugged, 0 = dormant, 1 = active, 2 = running */
        rom_version  = (reg.r[6]>>8  & 0xF);
        rom_version += (reg.r[6]>>12 & 0xF)*10;
        rom_version += (reg.r[6]>>16 & 0xF)*100;
        rom_version += (reg.r[6]>>20 & 0xF)*1000;
        rom_version += (reg.r[6]>>24 & 0xF)*10000;
        rom_version += (reg.r[6]>>28 & 0xF)*100000;
      }
    }
  } while (rom_version == -1 && err == NULL);

  disc_version = -1;
  f_file = fopen(s_filepath,"r");                        /* Open file for read */
  if (f_file!=NULL)
  {
    fseek(f_file, 0x14, SEEK_SET);		         /* Find help offset value */
    i_offset = 0;
    for (i=0; i<24; i+=8) i_offset += fgetc(f_file)<<i;  /* Extract offset value */
    if (i_offset !=0)						/* if there is a help string */
    {
      fseek(f_file, i_offset, SEEK_SET);      	      /* Move to offset from start */
      do { i = fgetc(f_file); } while (i!=0 && i!=9); /* find the start of the version number */
      if (i!=0)
      {
        disc_version = 0;
        do
        {
          i = fgetc(f_file);
          if (i>='0' && i<='9') disc_version = disc_version*10+i-'0';
        } while ((i>='0' && i<='9') || i=='.' || i==9);
      }
    }
   fclose(f_file);		                    /* Close the file */
  }
  
  if (ram_version>rom_version)
    highest_version = ram_version;
  else
    highest_version = rom_version;

  if (disc_version>highest_version)
  {
    reg.r[0] = 1;                                 /* rmload */
    reg.r[1] = (int)s_filepath;			  /* this module */
    err = _kernel_swi(OS_Module, &reg, &reg);
    ERROR_RETURN(err);
  }
  else
  {
    if (highest_version == rom_version)
    {
      if (rom_state<1)
      {
        reg.r[0] = 4;   /* RMKill */
        reg.r[1] = (int)s_name;
        err = _kernel_swi(OS_Module, &reg, &reg); /* Ignore errors */
        reg.r[0] = 3;   /* RMReInit */
        err = _kernel_swi(OS_Module, &reg, &reg);
        ERROR_RETURN(err);
      }
    }
  }

  reg.r[0] = 18;                                  /* check that we've got a module */
  reg.r[1] = (int)s_name;
  err = _kernel_swi(OS_Module, &reg, &reg);
  ERROR_RETURN(err);

  return NULL;
}
@


1.1.1.1
log
@This is an initial import of a tool I have been using to test PDF files
on a RiscPC without having to soft load on an STB or such like.

It is development code and was written tongue in cheek.  But as all useful
tools do, has proved useful to the point that it would be a shame to lose
the source.

It is anticipated to grow as we seem to have misplaced the source to the
tool used to convert RiscPC pdf files to the NC style, this can be added
to this tool.

@
text
@@
