head	1.1;
branch	1.1.1;
access;
symbols
	Manager-1_89:1.1.1.1
	Manager-1_88:1.1.1.1
	Manager-1_87:1.1.1.1
	Manager-1_86:1.1.1.1
	Manager-1_85:1.1.1.1
	Manager-1_84:1.1.1.1
	Manager-1_83:1.1.1.1
	Manager-1_82:1.1.1.1
	Manager-1_81:1.1.1.1
	Manager-1_80:1.1.1.1
	Manager-1_79:1.1.1.1
	Manager-1_78:1.1.1.1
	Manager-1_77:1.1.1.1
	Manager-1_76:1.1.1.1
	Manager-1_75:1.1.1.1
	Manager-1_74:1.1.1.1
	Manager-1_73:1.1.1.1
	Manager-1_72:1.1.1.1
	Manager-1_71:1.1.1.1
	Manager-1_70:1.1.1.1
	Manager-1_69:1.1.1.1
	Manager-1_68:1.1.1.1
	Manager-1_67:1.1.1.1
	Manager-1_66:1.1.1.1
	Manager-1_65:1.1.1.1
	Manager-1_64:1.1.1.1
	Manager-1_63:1.1.1.1
	fish-0_01:1.1.1.1
	fish-0_00:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2000.10.05.08.53.11;	author arodger;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.05.08.53.11;	author arodger;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*----------------------------------------------------------------------*/
/*    Filename    : h.events	                                       	*/
/*    Author	  : A.Rodger						*/
/*    Date        : Nov 1997						*/
/*    Description : contains a list if generic event handlers		*/
/*		these are handled for all objects.  Toolbox objects	*/
/*		can have events attached to them only			*/
/*    Modification history:    	    		       			*/
/*    									*/
/*----------------------------------------------------------------------*/


#ifndef __events_h
#define __events_h
#include "main.h"
#include "WimpJob.h"

	// Event allocations these are defined by actions in the res file
#define menu_quit_event 	0x99       	// main.quit_function,
#define Debug_File_Stop		0x01		// stop the debug spool file
#define radio_A4		0x02
#define radio_Legal		0x03
#define radio_Letter		0x04
#define printer_prime   	0x10
#define printer_set_paper	0x11
#define print_info_to_debug	0x12
#define save_paper_file		0x13
#define save_pdf_file		0x14

	// event handling functions in events.c
int quit_function	(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
int handler_Toolbox_Error(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
int Debug_function	(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);

int handler_saveas	(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
int handler_saveas_created(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
int handler_debug_stop	(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);

int radio_button_changed(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
int print_primer	(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
int print_set_pagesize	(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
int print_get_info	(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
int save_pdf_info	(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
int save_paper_info	(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);

	// messages
int message_load    (WimpMessage *in_message, void *handle);
int message_load_ack(WimpMessage *in_message, void *handle);
int message_save    (WimpMessage *in_message, void *handle);
int message_save_ack(WimpMessage *in_message, void *handle);
	
int PrintFile     (WimpMessage *message, void *handle);
int PrintSave     (WimpMessage *message, void *handle);
int WillPrint	  (WimpMessage *message, void *handle);
int PrintInit     (WimpMessage *message, void *handle);
int PrintError    (WimpMessage *message, void *handle);
int PrintTypeOdd  (WimpMessage *message, void *handle);
int PrintTypeKnown(WimpMessage *message, void *handle);

#endif
@


1.1.1.1
log
@This is an initial import of a tool I have been using to test PDF files
on a RiscPC without having to soft load on an STB or such like.

It is development code and was written tongue in cheek.  But as all useful
tools do, has proved useful to the point that it would be a shame to lose
the source.

It is anticipated to grow as we seem to have misplaced the source to the
tool used to convert RiscPC pdf files to the NC style, this can be added
to this tool.

@
text
@@
