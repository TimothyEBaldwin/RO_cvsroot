head	1.1;
branch	1.1.1;
access;
symbols
	Manager-1_89:1.1.1.1
	Manager-1_88:1.1.1.1
	Manager-1_87:1.1.1.1
	Manager-1_86:1.1.1.1
	Manager-1_85:1.1.1.1
	Manager-1_84:1.1.1.1
	Manager-1_83:1.1.1.1
	Manager-1_82:1.1.1.1
	Manager-1_81:1.1.1.1
	Manager-1_80:1.1.1.1
	Manager-1_79:1.1.1.1
	Manager-1_78:1.1.1.1
	Manager-1_77:1.1.1.1
	Manager-1_76:1.1.1.1
	Manager-1_75:1.1.1.1
	Manager-1_74:1.1.1.1
	Manager-1_73:1.1.1.1
	Manager-1_72:1.1.1.1
	Manager-1_71:1.1.1.1
	Manager-1_70:1.1.1.1
	Manager-1_69:1.1.1.1
	Manager-1_68:1.1.1.1
	Manager-1_67:1.1.1.1
	Manager-1_66:1.1.1.1
	Manager-1_65:1.1.1.1
	Manager-1_64:1.1.1.1
	Manager-1_63:1.1.1.1
	fish-0_01:1.1.1.1
	fish-0_00:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2000.10.05.08.53.11;	author arodger;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.05.08.53.11;	author arodger;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef __WIMPJOB
#define __WIMPJOB

#include "main.h"

#define POLL_MASK	Wimp_Poll_KeyPressedMask
#define TOOLBOX_NAME	20
#define CLR_SCREEN      _swix(0x110,0);

class toolbox_object
{
  public:
  char		name[TOOLBOX_NAME];
  ObjectId	self_id;
  	// 0 for object means no object, -1 for component means no component
  toolbox_object(int flags, char* nname);
  ~toolbox_object();
  
  void show(int flags, void* type_buffer, ObjectId parent, ComponentId parent_component);
  void hide(int flags);
  void GetState() {};
  void MiscOp() {};
  
  void AddFunction(int event_code, ToolboxEventHandler *function_name, void *handle);
  void AddWimpEvent(int event_code, WimpEventHandler *handler, void *handle);
  
//  void Dprintf(char *format, ...);

};

class WimpJob
{								// this is the basic class for any job it 
public:

  	MessagesFD 	message_block;  			// declare a message block for use with toolbox initialise
  	IdBlock    	event_id_block;				// declare an event block for use with toolbox initialise
  	int		wimp_messages[NUMBER_OF_MESSAGES];	// the list of handled messages.
  	int		toolbox_events[1];			// initial array of events
 	int        	vtask_id;       			// and our task handle
 	
	int 		message_count;
	int 		current_wimp;  

	WimpPollBlock 	block;			// the WimpPollBlock event dependant
	int		kill_event;		// Message numbers are on line 667 of wimp.h
						// WimpMessage Handler is of the form WimpMessage, Handle		
void AddMessage(int Message_No, WimpMessageHandler *handler, void *handle);
						// creates a function that reacts to all objects one event code
void AddFunction(int event_code, ToolboxEventHandler *function_name, void *handle);
void AddWimpEvent(int event_code, WimpEventHandler *handler, void *handle);

void set_mask(int mask); 			// this sets the mask for events that will be passed to this application

int  task_id();

int  poll(void);
int  pollidle(void);
			// this sets up the id block with poll event masks and the appropriate function pointer
WimpJob();
~WimpJob() 		{};
};


#endif
@


1.1.1.1
log
@This is an initial import of a tool I have been using to test PDF files
on a RiscPC without having to soft load on an STB or such like.

It is development code and was written tongue in cheek.  But as all useful
tools do, has proved useful to the point that it would be a shame to lose
the source.

It is anticipated to grow as we seem to have misplaced the source to the
tool used to convert RiscPC pdf files to the NC style, this can be added
to this tool.

@
text
@@
