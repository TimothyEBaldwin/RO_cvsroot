head	1.2;
access;
symbols
	Manager-1_89:1.2
	Manager-1_88:1.2
	Manager-1_87:1.2
	Manager-1_86:1.2
	Manager-1_85:1.2
	Manager-1_84:1.2
	Manager-1_83:1.2
	Manager-1_82:1.2
	Manager-1_81:1.2
	Manager-1_80:1.2
	Manager-1_79:1.2
	Manager-1_78:1.2
	Manager-1_77:1.2
	Manager-1_76:1.2
	Manager-1_75:1.2
	Manager-1_74:1.2
	Manager-1_73:1.2
	Manager-1_72:1.2
	Manager-1_71:1.2
	Manager-1_70:1.2
	Manager-1_69:1.2
	Manager-1_68:1.2
	Manager-1_67:1.2
	Manager-1_66:1.2
	Manager-1_65:1.2
	Manager-1_64:1.2
	Manager-1_63:1.2
	fish-0_01:1.2
	fish-0_00:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2000.10.31.17.11.19;	author arodger;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.05.08.53.11;	author arodger;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.05.08.53.11;	author arodger;	state Exp;
branches;
next	;


desc
@@


1.2
log
@   fixed saving of margins file.
Detail:
   fixed a bad piece of code, now saving of margin settings can be done.
Admin:
   this has been tested.

Version 0.01. Tagged as 'fish-0_01'
@
text
@// Copyright 2000 Pace Micro Technology plc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#include "file.h"
#include "error.h"
#include "file_op.h"

int save_complete(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(event);
  IGNORE(id_block);
  int *block = (int*)handle;

  toolbox_object* save_box = (toolbox_object*)block[0];
  char *tmp_ptr = (char*)block[1];

  delete save_box;
  free(tmp_ptr);
  free(block);

  return TRUE;
}

file::file(char *s_filename, int filetype, BOOL new_open, int new_size)
{
  char *path_in_path, *file_in_path;

  path_in_path = strrchr(s_filename, ':');		// strip out any : in the string
  if (path_in_path == NULL)
     path_in_path = s_filename;
  else path_in_path++;

  file_in_path = strrchr(path_in_path, '.');		// last occurance of '.' in path is the file name
  if (file_in_path == NULL)
  	file_in_path = path_in_path;
  else file_in_path++;

  name = malloc(strlen(file_in_path)+1 );

  if (name == NULL)		BadError( error_construct("Err_Memory") );
  strcpy(name, file_in_path);

  type = filetype;

  if (new_open == TRUE)
  {
    	Debug("creating a new file\n");
  	size = new_size;

  	pointer = malloc(size * sizeof(char));

  	if (pointer == NULL)
  	{
  		BadError( error_construct("Err_Memory") );
  	}
  }
  else
  {
    	Debug("opening file\n");
  	BadError( file_load(s_filename, type, &pointer, &size, &type) );
  }
}

file::~file()
{
  free(name);
  free(pointer);
}

int file::save()
{
  int *block = NULL;
  char *tmp_ptr = NULL;
  toolbox_object *save_box = NULL;
  int tmp_size, i;

  save_box = new toolbox_object(0,"Save_1");			// allocations
  block    = (int*)malloc(2*sizeof(int));
  tmp_ptr  = malloc(size*sizeof(char));
  if ( (save_box == NULL)||(block == NULL)||(tmp_ptr == NULL) ){
    free(block); free(tmp_ptr); delete save_box;
    return FALSE;
  }

  tmp_size = size;
  if (tmp_ptr == NULL){
    Error( error_construct("Err_Memory") );
    tmp_ptr = pointer; pointer = NULL;
    size =0;
  }
  else
    for(i=0; i< tmp_size;i++) tmp_ptr[i] = pointer[i];

  block[0] = (int)save_box; block[1] = (int)tmp_ptr;		// this enables us to free this memory allocation

  save_box->AddFunction(SaveAs_DialogueCompleted, save_complete, block);
  save_box->AddFunction(SaveAs_SaveCompleted,     save_complete, block);

  saveas_set_file_name(0,save_box->self_id, name);

  saveas_set_data_address(0,save_box->self_id, tmp_ptr, tmp_size, tmp_ptr, tmp_size);

  save_box->show(0,NULL,0,0);

  return TRUE;
}

void file::print()
{
  char temp_bfr[128];
  int i, j;

  for(i = 0; i<size;  i++){
    j=0;
    while( (j < 128) && (pointer[i] != '\n') && (pointer[i] != EOF) ){
    	temp_bfr[j] = pointer[i];
    	if (temp_bfr[j] == '\t') temp_bfr[j] = ' ';
    	i++; j++;
    }
    if ( (pointer[i] == '\n')||(pointer[i] != EOF) ) temp_bfr[j] = '\0';
    Debug("%s\0", temp_bfr);
  }
}

int file::compress()
{
  _kernel_swi_regs reg;

  int output_size, workspace_size;
  char *output_buffer;
  char *workspace_buffer;

  reg.r[0] = 1<<3;  /* Return workspace required */
  reg.r[1] = size;
  if (Error (_kernel_swi(Squash_Compress, &reg, &reg) ) )
  	return FALSE;

  workspace_size = reg.r[0];
  output_size    = reg.r[1];
  workspace_buffer = malloc(workspace_size * sizeof(char));
  output_buffer    = malloc(output_size * sizeof(char));
  // compress file
  free (workspace_buffer);
  free (output_buffer);

  return TRUE;
}

int file::line_to_int(int *position)
{
  char *tmp_string;
  int tmp_int;

  tmp_string = line_to_alloc_string(position);
  tmp_int = atoi(tmp_string);
  free(tmp_string);

  return tmp_int;
}

int file::copy_line(char *buffer, int *position)	// copy line including EOL;
{
  int i=0;
  int pos = (*position);

  while ((pos < size)&&(pointer[pos] != '\n')){
    buffer[i] = pointer[pos];
    pos++;     i++;					// while not eol or eof count characters;
  }
  buffer[i] = pointer[pos];
  pos++;     i++;					// copy terminating character

  *position = pos;
 return i;						// return length of line
}

char *file::line_to_alloc_string(int *position)
{
  int j,i = *position;
  char *ptr;

  while ((i < size)&&(pointer[i] != '\n')) i++;	// while not eol or eof count characters;
  ptr = (char*)malloc((i-(*position)+1)*sizeof(char));

  if (ptr == NULL) { Error( error_construct("Err_Memory") ); exit(0); }

  for (j=0;j<(i-(*position));j++)
   ptr[j] = pointer[(*position)+j];

  ptr[j] = '\0';

  i++;						// eat the end of line

  (*position) = i;
  return ptr;
}

void file::eat_line(int *position)
{
  int i = *position;
  while ((i < size)&&(pointer[i] != '\n')) i++;	// while not eol or eof count characters;
  i++;
  *position = i;
}
@


1.1
log
@Initial revision
@
text
@d25 1
a25 1
  
d28 1
a28 1
  
d32 1
a32 1
  
d36 1
a36 1
file::file(char *s_filename, int filetype, int new_size)
d39 1
a39 1
  
d49 1
a49 1
  
d51 1
a51 1
  
a53 17
  
  type = filetype;
  pointer = malloc(size * sizeof(char));
  
  if (pointer == NULL)		BadError( error_construct("Err_Memory") );
  
  size = new_size;
}

file::file(char *s_filename, int filetype)
{
  char *path_in_path, *file_in_path;
  
  path_in_path = strrchr(s_filename, ':');		// strip out any : in the string
  if (path_in_path == NULL)
     path_in_path = s_filename;
  else path_in_path++;
a54 10
  file_in_path = strrchr(path_in_path, '.');		// last occurance of '.' in path is the file name
  if (file_in_path == NULL)
  	file_in_path = path_in_path;
  else file_in_path++;
  
  name = malloc(strlen(file_in_path)+1 );
  
  if (name == NULL)		BadError( error_construct("Err_Memory") );
  strcpy(name, file_in_path);
  
d57 17
a73 1
  BadError( file_load(s_filename, type, &pointer, &size, &type) );
d88 1
a88 1
  
d96 1
a96 1
  
d105 1
a105 1
  
d107 1
a107 1
  
d112 1
a112 1
  
d114 1
a114 1
  
d119 1
a119 1
  
d124 1
a124 1
  
d127 1
a127 1
    while( (j < 128) && (pointer[i] != '\n') && (pointer[i] != EOF) ){   
d144 1
a144 1
  
d149 1
a149 1
  
d157 1
a157 1
  
d160 1
a160 1
  
d165 1
a165 1
  
d169 1
a169 1
  
d177 1
a177 1
  
d184 1
a184 1
    
d193 1
a193 1
  
d196 1
a196 1
  
d198 1
a198 1
  
d201 1
a201 1
   
d205 1
a205 1
  
d209 1
a209 1
  
@


1.1.1.1
log
@This is an initial import of a tool I have been using to test PDF files
on a RiscPC without having to soft load on an STB or such like.

It is development code and was written tongue in cheek.  But as all useful
tools do, has proved useful to the point that it would be a shame to lose
the source.

It is anticipated to grow as we seem to have misplaced the source to the
tool used to convert RiscPC pdf files to the NC style, this can be added
to this tool.

@
text
@@
