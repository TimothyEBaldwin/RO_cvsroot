head	1.1;
branch	1.1.1;
access;
symbols
	Manager-1_89:1.1.1.1
	Manager-1_88:1.1.1.1
	Manager-1_87:1.1.1.1
	Manager-1_86:1.1.1.1
	Manager-1_85:1.1.1.1
	Manager-1_84:1.1.1.1
	Manager-1_83:1.1.1.1
	Manager-1_82:1.1.1.1
	Manager-1_81:1.1.1.1
	Manager-1_80:1.1.1.1
	Manager-1_79:1.1.1.1
	Manager-1_78:1.1.1.1
	Manager-1_77:1.1.1.1
	Manager-1_76:1.1.1.1
	Manager-1_75:1.1.1.1
	Manager-1_74:1.1.1.1
	Manager-1_73:1.1.1.1
	Manager-1_72:1.1.1.1
	Manager-1_71:1.1.1.1
	Manager-1_70:1.1.1.1
	Manager-1_69:1.1.1.1
	Manager-1_68:1.1.1.1
	Manager-1_67:1.1.1.1
	Manager-1_66:1.1.1.1
	Manager-1_65:1.1.1.1
	Manager-1_64:1.1.1.1
	Manager-1_63:1.1.1.1
	fish-0_01:1.1.1.1
	fish-0_00:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2000.10.05.08.53.11;	author arodger;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.05.08.53.11;	author arodger;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@// Copyright 2000 Pace Micro Technology plc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#include "WimpJob.h"
#include "error.h"

	// Quit message not a member function but only used with this class
int quit_message(WimpMessage *message, void *handle)
{ 
  WimpJob* wimptask = (WimpJob*)handle;
  
  if (message->hdr.action_code == Wimp_MQuit)
  	wimptask->kill_event = TRUE;
  return 1;
}



	// WIMPJOB functions
int  WimpJob::task_id()
{
  return vtask_id;
}

WimpJob::WimpJob()
{
  int i;
  kill_event = FALSE;
  
  toolbox_events[0] = 0;
		
  Error( event_initialise(&event_id_block) );		// Initialise ourselves with the event library 
   
  for( i=0; i<NUMBER_OF_MESSAGES; i++)
  	 wimp_messages[i] = Wimp_MQuit;
  message_count = 1;
  							// add the quit message handler (above)
  Error( event_register_message_handler(Wimp_MQuit, quit_message, this) );
  							// Initialise ourselves with the toolbox
  Error( toolbox_initialise(0, wimp_version, wimp_messages, toolbox_events, our_directory,
                 	  &message_block, &event_id_block,
                          &current_wimp, &vtask_id, NULL) );  
}

void WimpJob::AddMessage(int Message_No, WimpMessageHandler *handler, void *handle)
{
  int i;
  if ( message_count >= NUMBER_OF_MESSAGES ){		// test for the number of messages
    Error(error_construct ("Err_MessNum"));
    return;
  }
  
  for (i=0; i < message_count; i++){			// test to see if the message has already been added
    if ( wimp_messages[i] == Message_No ){
    	Error( error_construct ("Err_MessDup") );
    	return;
    }
  }
  wimp_messages[message_count-1] = Message_No;		// Add it to the list;
  Error ( event_register_message_handler(Message_No, handler, handle) );
  message_count++;
}

void WimpJob::AddFunction(int event_code, ToolboxEventHandler *function_name, void* handle)
{
  Error ( event_register_toolbox_handler(-1, event_code, function_name, handle) );	
}
void WimpJob::AddWimpEvent(int event_code, WimpEventHandler *handler, void *handle)
{
  Error( event_register_wimp_handler(-1, event_code, handler, handle) );
}

void WimpJob::set_mask(int mask)
{
  Error( event_set_mask(mask) );
}

int WimpJob::poll(void)
{
  int code;
  _kernel_oserror *er;
  
    er = event_poll(&code, &block, NULL);
    if (er != NULL){
    	Error(er);
    	return 0;
    	}
    return !kill_event;
}

int WimpJob::pollidle(void)
{
  int code, time;
  _kernel_swi_regs reg; /* Global set of registers to use */
  _kernel_oserror *er;  
  
    Error( _kernel_swi(OS_ReadMonotonicTime, &reg, &reg) );
    time = reg.r[0]+200;
  
    er = event_poll_idle(&code, &block, time, NULL);
    if (er != NULL){
    	Error(er);
    	return 0;
    	} 
    return !kill_event;
}

/*	TOOLBOX OBJECT functions */

toolbox_object::toolbox_object(int flags, char *nname)
{
  self_id = 0;					// in case of errors
  strncpy(name, nname, TOOLBOX_NAME-1);
  
  name[TOOLBOX_NAME-1] = '\0';			// null terminate the string, it now should include two null characters.
  
  Error( toolbox_create_object(flags, name, &self_id) );
}

toolbox_object::~toolbox_object()
{
  Error( toolbox_delete_object(0, self_id) );
}
  
void toolbox_object::show(int flags, void* type_buffer, ObjectId parent, ComponentId parent_component)
{
  Error( toolbox_show_object(flags, self_id, 0, type_buffer, parent, parent_component)	);
} 
void toolbox_object::hide(int flags)
{
  Error( toolbox_hide_object(flags, self_id) );
}

void toolbox_object::AddFunction(int event_code, ToolboxEventHandler *function_name, void* handle)
{
  Error ( event_register_toolbox_handler(self_id, event_code, function_name, handle) );	
}

void toolbox_object::AddWimpEvent(int event_code, WimpEventHandler *handler, void *handle)
{
  Error( event_register_wimp_handler(self_id, event_code, handler, handle) );
}
@


1.1.1.1
log
@This is an initial import of a tool I have been using to test PDF files
on a RiscPC without having to soft load on an STB or such like.

It is development code and was written tongue in cheek.  But as all useful
tools do, has proved useful to the point that it would be a shame to lose
the source.

It is anticipated to grow as we seem to have misplaced the source to the
tool used to convert RiscPC pdf files to the NC style, this can be added
to this tool.

@
text
@@
