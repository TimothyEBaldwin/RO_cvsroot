head	1.2;
access;
symbols
	Manager-1_89:1.2
	Manager-1_88:1.2
	Manager-1_87:1.2
	Manager-1_86:1.2
	Manager-1_85:1.2
	Manager-1_84:1.2
	Manager-1_83:1.2
	Manager-1_82:1.2
	Manager-1_81:1.2
	Manager-1_80:1.2
	Manager-1_79:1.2
	Manager-1_78:1.2
	Manager-1_77:1.2
	Manager-1_76:1.2
	Manager-1_75:1.2
	Manager-1_74:1.2
	Manager-1_73:1.2
	Manager-1_72:1.2
	Manager-1_71:1.2
	Manager-1_70:1.2
	Manager-1_69:1.2
	Manager-1_68:1.2
	Manager-1_67:1.2
	Manager-1_66:1.2
	Manager-1_65:1.2
	Manager-1_64:1.2
	Manager-1_63:1.2
	fish-0_01:1.2
	fish-0_00:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2000.10.31.17.11.19;	author arodger;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.05.08.53.11;	author arodger;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.05.08.53.11;	author arodger;	state Exp;
branches;
next	;


desc
@@


1.2
log
@   fixed saving of margins file.
Detail:
   fixed a bad piece of code, now saving of margin settings can be done.
Admin:
   this has been tested.

Version 0.01. Tagged as 'fish-0_01'
@
text
@// Copyright 2000 Pace Micro Technology plc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#include "events.h"
#include "file_op.h"
#include "error.h"
#include "printer.h"

extern pdf *prn_defn;		//set the address of the pointer to the global PDF file to 'prn_defn'

int quit_function(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{

  IGNORE(event_code);
  IGNORE(event);
  IGNORE(id_block);

  WimpJob* wimptask  = (WimpJob*)handle;

  wimptask->kill_event = TRUE;

  return 1;
}

int handler_Toolbox_Error(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(handle);

     _kernel_oserror err_block;

    ToolboxErrorEvent *ev = (ToolboxErrorEvent*)event;

    Debug("ToolboxError: %s",ev->errmess);
    err_block.errnum = ev->errnum;
    strcpy(err_block.errmess, ev->errmess);

    Error( &err_block );

    return 1;
}

int handler_saveas(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(handle);

  SaveAsSaveToFileEvent *ev = (SaveAsSaveToFileEvent*)event;

  Error( saveas_file_save_completed(1, id_block->self_id, ev->filename) );

  ((text_window*)handle)->fp = fopen(ev->filename, "a");

  Error( event_deregister_toolbox_handler(-1, event_code, handler_saveas, handle) );

  return 1;
}

int handler_saveas_created(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(event);
  IGNORE(handle);

  saveas_set_file_size (0, id_block->self_id, 36);

  return 1;
}

int handler_debug_stop(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(event);

  if(( ( text_window*)handle)->fp != NULL)
  	fclose( ( (text_window*)handle )->fp );

  return 1;
}

int radio_button_changed(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event);
  IGNORE(id_block);
  IGNORE(handle);

  if (prn_defn == NULL) return 0;

  prn_defn->set_margins(event_code-2);	// set to the range starting at 0

  return 1;
}

int print_primer(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(event);

  printer_methods *printer = (printer_methods*)handle;

  printer->prime((small_pdf*)prn_defn);

  WimpMessage msg;

  msg.hdr.your_ref = 0;
  msg.hdr.action_code = Wimp_MSetPrinter;
  wimp_send_message(Wimp_EUserMessage , &msg, 0,0,0);

  return 1;
}

int print_set_pagesize(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(event);

  printer_methods *printer = (printer_methods*)handle;

  prn_defn->p_margins.set_from_display(prn_defn->display);
  printer->set_paper_size(&(prn_defn->p_margins));

  return 1;
}

int print_get_info(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(event);

  printer_methods *printer = (printer_methods*)handle;

  printer->get_paper_size(&(prn_defn->p_margins));
  prn_defn->p_margins.show(prn_defn->display);
  printer->get_info();

  return TRUE;
}

int save_pdf_info (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(event);
  IGNORE(handle);

  file *pdf_file;

  pdf_file = prn_defn->output_to_file();

  pdf_file->save();

  return TRUE;
}

int save_paper_info (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(event);
  IGNORE(handle);

  file *new_file = NULL, *old_file = NULL;

  if ( prn_defn->p_margins.height < (285*millipoint_to_millimetre))
	 old_file = new file(FILENAME_PAPER_LETTER, 0);

  else if ( prn_defn->p_margins.height < (300*millipoint_to_millimetre) )
	 old_file = new file(FILENAME_PAPER_A4, 0);

  else if ( prn_defn->p_margins.height > (300*millipoint_to_millimetre) )
	 old_file = new file(FILENAME_PAPER_LEGAL, 0);

  else {
  	Error( error_construct("Err_Paper") );
  	return FALSE;
  }

  prn_defn->p_margins.set_from_display(prn_defn->display);

  new_file = prn_defn->p_margins.update_file(old_file, prn_defn->paper_offset);

  new_file->save();

  delete new_file;
  delete old_file;

  return TRUE;
}

/***************************** MESSAGES *********************************/

int message_load(WimpMessage *message, void *handle)
{
  WimpJob *job = (WimpJob*)handle;
  WimpMessage msg;

  Debug("DataLoad");

  if (	(message->data.data_open.file_type != 0xfff )&&
  	(message->data.data_open.file_type != 0xfc6 ) ){
    		Error( error_construct("Err_File_Type") );
    		return 0;
  }

  msg = *message;
  msg.hdr.your_ref = msg.hdr.my_ref;

  file loaded_file(message->data.data_load.leaf_name, 0);
  
  if (loaded_file.size > 0)
  {
    	Debug("loaded file\n");
    	
  	switch(loaded_file.pointer[0]){
  	  case 'p':	//PostScript
  	  	break;
  	  case 'd':	//bitmap printers
  		delete prn_defn;		// guaranteed harmless if a NULL pointer
  		prn_defn = new small_pdf(&loaded_file);
  		prn_defn->show();
  	  	break;
  	  case 'l':	//laserjet printers
  		delete prn_defn;		// guaranteed harmless if a NULL pointer
  		prn_defn = new small_pdf(&loaded_file);
  		prn_defn->show();
  	 	break;
  	}
  	msg.hdr.sender = job->task_id();
  	msg.hdr.your_ref = message->hdr.my_ref;
  	msg.hdr.my_ref = message->hdr.your_ref;
  	if (message->hdr.action_code == Wimp_MDataLoad) msg.hdr.action_code = Wimp_MDataLoadAck;
  	wimp_send_message(Wimp_EUserMessage, &msg, msg.hdr.sender,0,0);
  }
  return 1;
}

int message_load_ack(WimpMessage *in_message, void *handle)
{
  Debug("message_load_ack");

  IGNORE(in_message);
  IGNORE(handle);

  return 1;
}

int PrintFile(WimpMessage *message, void *handle)
{
  Debug("Print File  type %3.3X", message->data.bytes[20] );

  WimpJob *job = (WimpJob*)handle;

  if (prn_defn != NULL)
  	message->hdr.action_code = Wimp_MPrintTypeOdd;
  else
  	message->hdr.action_code = Wimp_MPrintError;

  wimp_send_message(Wimp_EUserMessageRecorded, message, 0,0,0);

  return 1;	// don't accept
}

int PrintSave(WimpMessage *message, void *handle)
{
  Debug("Print Save type %3.3X",message->data.bytes[20] );

  WimpJob *job = (WimpJob*)handle;
  message->hdr.your_ref = message->hdr.my_ref;

  message->hdr.action_code = Wimp_MPrintFile;
  wimp_send_message(Wimp_EUserMessageRecorded, message, 0,0,0);

  WimpMessage msg;

  msg.hdr.your_ref = 0;
  msg.hdr.action_code = Wimp_MSetPrinter;
  wimp_send_message(Wimp_EUserMessage , &msg, 0,0,0);

  Error(_kernel_setenv("Printer$Temp", "Printer:") );  	// and export the printer type in Printer$

  return 1;
}

int WillPrint(WimpMessage *message, void *handle)
{
  Debug("Will Print");

  IGNORE(handle);
  if (message->hdr.action_code ==  Wimp_MWillPrint);
  return TRUE;
}

int PrintInit(WimpMessage *message, void *handle)
{
  Debug("Print Init");

  handle = handle;
  if (message->hdr.action_code == Wimp_MPrintInit);
  return 1;
}
int PrintError(WimpMessage *message, void *handle)
{
  Debug("Print Error");
  handle = handle;
  if (message->hdr.action_code == Wimp_MPrintError);
  return 1;
}
int PrintTypeOdd(WimpMessage *message, void *handle)
{
  Debug("Print Type Odd type %3.3X",message->data.bytes[20] );
  handle = handle;
  if (message->hdr.action_code == Wimp_MPrintTypeOdd);

  return 1;
}

int PrintTypeKnown(WimpMessage *message, void *handle)
{
  Debug("Print Type Known");

  IGNORE(message);
  IGNORE(handle);

  return 1;
}
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
  
d32 1
a32 1
  
d41 1
a41 1
  
d45 1
a45 1
    
d49 1
a49 1
    
d51 1
a51 1
    
d62 1
a62 1
  
d64 1
a64 1
    
d66 1
a66 1
  
d68 1
a68 1
  
d70 1
a70 1
} 
d78 1
a78 1
  
d82 1
a82 1
} 
d89 2
a90 2
  
  if(( ( text_window*)handle)->fp != NULL) 
d92 1
a92 1
  
d98 1
a98 1
  IGNORE(event); 
d101 1
a101 1
 
d103 1
a103 1
  
d105 1
a105 1
  
d114 1
a114 1
  
d116 1
a116 1
  
d118 1
a118 1
  
d124 1
a124 1
 
d127 1
a127 1
  
d133 1
a133 1
  
d138 1
a138 1
  
d140 1
a140 1
}  
d147 1
a147 1
  
d149 1
a149 1
   
d153 1
a153 1
  
d155 2
a156 2
} 
 
d163 1
a163 1
  
d165 1
a165 1
  
d167 1
a167 1
  
d169 1
a169 1
  
d179 3
a181 3
  
  file *new_file, *old_file;
   
d184 1
a184 1
	  
d187 1
a187 1
  
d190 2
a191 2
	 
  else { 
d195 1
a195 1
 
d197 1
d199 1
a199 1
  
d201 1
a201 1
  
d204 1
a204 1
  
d214 1
a214 1
  
d216 2
a217 2
  
  if (	(message->data.data_open.file_type != 0xfff )&& 
d222 1
a222 1
  
d225 1
a225 1
  
d228 23
a250 13
  switch(loaded_file.pointer[0]){
    case 'p':	//PostScript
    	break;
    case 'd':	//bitmap printers
  	delete prn_defn;		// guaranteed harmless if a NULL pointer
  	prn_defn = new small_pdf(&loaded_file);
 	prn_defn->show();
    	break;
    case 'l':	//laserjet printers
  	delete prn_defn;		// guaranteed harmless if a NULL pointer
  	prn_defn = new small_pdf(&loaded_file);
 	prn_defn->show();
   	break;
a251 6
  msg.hdr.sender = job->task_id();
  msg.hdr.your_ref = message->hdr.my_ref;
  msg.hdr.my_ref = message->hdr.your_ref;
  if (message->hdr.action_code == Wimp_MDataLoad) msg.hdr.action_code = Wimp_MDataLoadAck;
  wimp_send_message(Wimp_EUserMessage, &msg, msg.hdr.sender,0,0);
  
d261 1
a261 1
    
d270 1
a270 1
  
d275 1
a275 1
  
d277 1
a277 1
  
d284 1
a284 1
  
d287 1
a287 1
  
d290 1
a290 1
  
d296 1
a296 1
  
d298 1
a298 1
  
d305 1
a305 1
  
d314 1
a314 1
  
d331 1
a331 1
  
d341 1
a341 1
  
@


1.1.1.1
log
@This is an initial import of a tool I have been using to test PDF files
on a RiscPC without having to soft load on an STB or such like.

It is development code and was written tongue in cheek.  But as all useful
tools do, has proved useful to the point that it would be a shame to lose
the source.

It is anticipated to grow as we seem to have misplaced the source to the
tool used to convert RiscPC pdf files to the NC style, this can be added
to this tool.

@
text
@@
