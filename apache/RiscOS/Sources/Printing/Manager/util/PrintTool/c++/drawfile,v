head	1.4;
access;
symbols
	Manager-1_89:1.4
	Manager-1_88:1.4
	Manager-1_87:1.4
	Manager-1_86:1.4
	Manager-1_85:1.4
	Manager-1_84:1.4
	Manager-1_83:1.4
	Manager-1_82:1.4
	Manager-1_81:1.4
	Manager-1_80:1.4
	Manager-1_79:1.4
	Manager-1_78:1.4
	Manager-1_77:1.4
	Manager-1_76:1.4
	Manager-1_75:1.4
	Manager-1_74:1.4
	Manager-1_73:1.4
	Manager-1_72:1.4
	Manager-1_71:1.4
	Manager-1_70:1.4
	Manager-1_69:1.4
	Manager-1_68:1.4
	Manager-1_67:1.4
	Manager-1_66:1.4
	Manager-1_65:1.4
	Manager-1_64:1.4
	Manager-1_63:1.4
	PrintTool-0_01:1.3
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.1
	Ursula_RiscPC:1.1.1.1.0.2
	rthornb_UrsulaBuild-19Aug1998:1.1.1.1
	UrsulaBuild_FinalSoftload:1.1.1.1
	rthornb_UrsulaBuild-12Aug1998:1.1.1.1
	aglover_UrsulaBuild-05Aug1998:1.1.1.1
	rthornb_UrsulaBuild-29Jul1998:1.1.1.1
	rthornb_UrsulaBuild-22Jul1998:1.1.1.1
	rthornb_UrsulaBuild-15Jul1998:1.1.1.1
	rthornb_UrsulaBuild-07Jul1998:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2002.11.26.10.55.49;	author rsprowson;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.07.13.55.39;	author arodger;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.13.12.30.10;	author arodger;	state Exp;
branches;
next	1.1;

1.1
date	98.06.19.10.25.22;	author arodger;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.06.19.10.25.22;	author arodger;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Changes to SetPrint util for additional printer$type understanding
Template tidy up
Change to get version number from VesionNum file
Tweak to SuppSrc for 32 bit high bit addresses
Change !Run file to look for OS3.50 as we use MSR and MRS now
Pick up all but 2 of the changes added to 1.65 on 26-Jun-2001,mostly
cosmetic,with two exceptions
 - use of Parallel_IgnoreErrors
 - warning about dropping "bundled" printer definitions onto it

Version 1.63. Tagged as 'Manager-1_63'
@
text
@// Copyright 1998 Acorn Computers Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#include "kernel.h"
#include "drawfile.h"
#include "walkth.h"
#include "tboxclass.h"

extern PalTask abc_task;

void
drawfile::set_A4_extent_with_zoom()
{
  if (ratio[1] == 0) ratio[1] = 1;	// not doing a division by 0
  
  w_extent.xmin = 0;
  w_extent.xmax = (int)((ratio[0]/(float)ratio[1]) * 210 * MM_OSUNIT); // os units
  w_extent.ymin = 0;
  w_extent.ymax = (int)((ratio[0]/(float)ratio[1]) * 297 * MM_OSUNIT); // os units 
}

int
drawfile::file_size(char *s_filename)
{
  _kernel_swi_regs regs;
  regs.r[0] = 17;
  regs.r[1] = (int) s_filename;
 
  Error(_kernel_swi(OS_File,&regs,&regs)) ;
  
  return regs.r[4];
}  

void
drawfile::file_load(char *s_filename) 
{
  if (allocated_file == NULL){
  	Error(error_construct("Err_Memory"));
  	return;
  }
  	
  _kernel_swi_regs regs;
  regs.r[0] = 16;
  regs.r[1] = (int) s_filename;
  regs.r[2] = (int) allocated_file;
  regs.r[3] = 0;
 
  Error(_kernel_swi(OS_File,&regs,&regs));
}   
               
drawfile::drawfile()
{
  ComponentId comp_id;
  ObjectId parent, toolbar_id = 0;
  int temp_extent;
  
  Error( Window::Create(0,"Window") );	// does the attach
  
  Error( GetToolBars( 0x01, &toolbar_id, NULL, NULL, NULL) );
  
  if (toolbar_id != 0) toolbar.Attach(toolbar_id);
  else
     BadError(error_construct("Err_Obj"));
     
  allocated_file = NULL;
  load_new_file(toolbar.stages[toolbar.stage_count].file_name);
  
  ratio[0] = 1;
  ratio[1] = 1;
  
  set_A4_extent_with_zoom();
  Error( SetExtent(0, &w_extent) );
  temp_extent = w_extent.ymax;
  w_extent.ymax = 100;
  Error( toolbar.SetExtent(0, &w_extent) ); 	// this can be overwritten in a smaller screen
  w_extent.ymax = temp_extent;			// mode so this insures the size
  
  comp_id = 0;
  Error( GetParent(0, &parent, &comp_id) );
  Error( Show( 0, 0, NULL, parent, comp_id ) );
}

drawfile::~drawfile()
{
  delete allocated_file;
  abc_task.recorded_message_list.DeRegisterWaitingForMessage(mOID);
}

void
drawfile::MessageHandler(WimpMessage *message)
{
 _kernel_swi_regs regs;		//PrintSave request
  //TRACE("Received a message %i", message->hdr.action_code);
  
  abc_task.recorded_message_list.DeRegisterWaitingForMessage(mOID, Wimp_MPrintTypeOdd);
  abc_task.recorded_message_list.DeRegisterWaitingForMessage(mOID, Wimp_MPrintError);
  
  //TRACE("De register");
  
  if (message->hdr.action_code == Wimp_MPrintError){
  	Error(error_construct("Err_Print"));
  	return;
  }

  message->hdr.your_ref = message->hdr.my_ref;
  message->hdr.action_code = Wimp_MPrintTypeKnown;
  
  regs.r[0] = Wimp_EUserMessage;  		//code user recorded or Acknowledge;
  regs.r[1] = (int)message;
  regs.r[2] = message->hdr.sender;		// broadcast
  
  TRACE("message_size %i", message->hdr.size);
    
  Error(_kernel_swi(Wimp_SendMessage, &regs, &regs));
  
  print_render();
}

void 
drawfile::OnHasBeenHiddenEvent( WindowHasBeenHiddenEvent *has_been_hidden, IdBlock *idb )
{
  Window::OnHasBeenHiddenEvent( has_been_hidden, idb );
  delete this;
}

void
drawfile::zoom(int in_out)
{
  if (in_out){	// if out
  	if (ratio[1] > 1) ratio[1] -= 1;
  	else ratio[0] += 1;
  	set_A4_extent_with_zoom();	// if zoom out redraw on larger size
  	SetExtent(0, &w_extent);
  	ForceRedraw(0, &w_extent);
  } else {	// zoom in
   	if (ratio[0] > 1) ratio[0] -= 1;
  	else ratio[1] += 1;
        ForceRedraw(0, &w_extent);
  	set_A4_extent_with_zoom();
  	SetExtent(0, &w_extent);	// otherwise on the larger size
  }  
}   

void
drawfile::request_print(void)
{
  WimpMessage  message;
 _kernel_swi_regs regs;		//PrintSave request
  char path[FILE_PATH_LENGTH];

  sprintf(path, "%s.%s", WORKING_DIR, file_name);
 
  abc_task.recorded_message_list.RegisterWaitingForMessage(mOID, Wimp_MPrintTypeOdd);
  abc_task.recorded_message_list.RegisterWaitingForMessage(mOID, Wimp_MPrintError);

    message.hdr.size = 256; //just header sizeof(message);
    message.hdr.my_ref = 0;
    message.hdr.your_ref = 0;
    message.hdr.action_code = Wimp_MPrintSave;
    message.data.data_save.estimated_size = f_size;
    message.data.data_save.file_type = 0xAFF;	// draw file type
    sprintf(message.data.data_save.leaf_name,"%s", path);
    
    regs.r[0] = Wimp_EUserMessageRecorded;  	//code user recorded or Acknowledge;
    regs.r[1] = (int)&message;
    regs.r[2] = 0;				// broadcast
    
    Error(_kernel_swi(Wimp_SendMessage, &regs, &regs));
}

_kernel_oserror*
drawfile::Render(int *matrix, BBox *extent)
{
    _kernel_swi_regs reg; 

      reg.r[0] = 0;
      reg.r[1] = (int)allocated_file; 
      reg.r[2] = f_size; 
      reg.r[3] = (int)matrix;
      reg.r[4] = (int)extent;
      reg.r[5] = 0;
                                                               
      return _kernel_swi(DrawFile_Render, &reg, &reg);
}

void
drawfile::redraw()
{
   int matrix[6];	// transformation matrix, see toolbox prm 494.
   WimpGetWindowStateBlock state;
   WimpRedrawWindowBlock block;
  _kernel_swi_regs reg;

   Error(GetWimpState(0, &state));
   
   matrix[0] = matrix[3] = (int)((ratio[0]/(float)ratio[1]) * (1<<16));
   matrix[1] = matrix[2] = 0;
   matrix[4] = (state.visible_area.xmin - state.xscroll) * 256;
   matrix[5] = (state.visible_area.ymax - state.yscroll) * 256;
  
   Error(GetWimpHandle(0, &(block.window_handle) ) );
   reg.r[1] = (int)&block;
   Error(_kernel_swi(Wimp_RedrawWindow, &reg, &reg));
   while (reg.r[0])
   {  
      Error(Render(matrix, &(block.redraw_area) ));
      reg.r[1] = (int)&block;
      Error(_kernel_swi(Wimp_GetRectangle, &reg, &reg));
   }
}

void
drawfile::print_render()
{
   int job=0;
   int trfm[6];
   int plot_origin[2];
  _kernel_swi_regs regs;
   BBox printable;
   
   //TRACE("Print Render");
 
   if (toolbar.stages == NULL){
   	Error(error_construct("Err_Obj"));
   	return;
   }
   
   set_identity_tran_matrix(trfm);	// initialise the structures
   
   trfm[4] = plot_origin[0] = printable.xmin = toolbar.stages[toolbar.stage_count].limits.xmin;
   trfm[5] = plot_origin[1] = printable.ymin = toolbar.stages[toolbar.stage_count].limits.ymin;
   printable.xmax = toolbar.stages[toolbar.stage_count].limits.xmax;
   printable.ymax = toolbar.stages[toolbar.stage_count].limits.ymax;
   
   plot_origin[0] = plot_origin[0] * OS_MILLIPT; // osunit->millipoint
   plot_origin[1] = plot_origin[1] * OS_MILLIPT;
   trfm[4] = trfm[4] * 256;
   trfm[5] = trfm[5] * 256;
  
   if( (!Error(_kernel_swi(Hourglass_On, &regs, &regs))) &&
       (!Error(_kernel_swi(PDriver_Info, &regs, &regs))) ){
         
   	TRACE("Printer: %s", regs.r[4]);
   
   	regs.r[0] = 0xcf;
   	regs.r[1] = (int) "printer:";

   	if (!Error(_kernel_swi(OS_Find, &regs, &regs))){

   		job = regs.r[0];

   		regs.r[1] = (int) "test print";

   		if (Error(_kernel_swi(PDriver_SelectJob, &regs, &regs))){
   	  		print_abort(job);
   	  		return;
   		}

   		regs.r[0] = 0;
   		regs.r[1] = (int)allocated_file;
   		regs.r[2] = f_size;
   	
   		if (Error(_kernel_swi(DrawFile_DeclareFonts, &regs, &regs))){
	  		print_abort(job);
   	  		return;
   		}
   		
   		regs.r[0] = 0;				//bounding box for printable area
   		regs.r[1] = (int) &printable;
   		regs.r[2] = (int) trfm;
   		regs.r[3] = (int) plot_origin;		// the address of 4 and 5 the origin
   		regs.r[4] = BACKGROUND_COLOUR;
   		
   		if (Error(_kernel_swi(PDriver_GiveRectangle, &regs, &regs))){
	  		print_abort(job);
   	 	 	return;
   		}
		
   		regs.r[0] = 1;	// only one copy
   		regs.r[1] = (int)&printable;
   		regs.r[2] = 0;
   		regs.r[3] = 0;

   		if (Error(_kernel_swi(PDriver_DrawPage, &regs, &regs))){
 	 	 	print_abort(job);
   		  	return;
   		}
  		while (regs.r[0])
   		{  
   		   TRACE("printing rectangle %i, %i, %i, %i", printable.xmin, printable.xmax, 
   						printable.ymin, printable.ymax);

      			if (Error(Render(0, &printable))){
 	  			print_abort(job);
   	  			return;
   			}
     			regs.r[1] = (int)&printable;
      			if (Error(_kernel_swi(PDriver_GetRectangle, &regs, &regs))){
 	  			print_abort(job);
   	  			return;
   			}
  		}
  	}// end error on file find
   }// end error zone, hourglass and printer info
   
   if (job) {
      regs.r[0] = job;
      _kernel_swi(PDriver_EndJob, &regs,&regs);
      regs.r[0] = 0;
      regs.r[1] = job;
      _kernel_swi(OS_Find, &regs,&regs);

   }                                             
   Error(_kernel_swi(Hourglass_Off, &regs, &regs));
   next_stage(+1);
}

void 
drawfile::print_abort(int job)
{
   _kernel_swi_regs regs;

    regs.r[0] = job;
    Error(_kernel_swi(PDriver_CancelJob, &regs, &regs));
    Error(_kernel_swi(PDriver_AbortJob, &regs,&regs));
      regs.r[0] = 0;
      regs.r[1] = job;
     _kernel_swi(OS_Find, &regs,&regs);

   Error(_kernel_swi(Hourglass_Off, &regs, &regs));
}

void
drawfile::set_identity_tran_matrix(int *matx)
{
  matx[0] = matx[3] = 1<<16;
  matx[1] = matx[2] = matx[4] = matx[5] = 0;
}


int
drawfile::next_stage(int amount)
{
  int end;
  end = toolbar.next_stage(amount);
  if (strcmp(file_name, toolbar.stages[toolbar.stage_count].file_name))
  	load_new_file( toolbar.stages[toolbar.stage_count].file_name );
  	
  return end;
}

void
drawfile::load_new_file(char *s_filename)
{
	//toolbar.stages[toolbar.stage_count].file_name;		
	// this does not create an new memory location 
	// so if you delete the stage we have a floater

  char path[FILE_PATH_LENGTH];

  file_name = s_filename;	// point to the file in the stages array
     
  sprintf(path, "%s.%s", WORKING_DIR, file_name);
  f_size = file_size(path);
  if (allocated_file != NULL) {
    	delete allocated_file;
  	ForceRedraw(0, &w_extent);
  }
  allocated_file = new char[f_size];
  file_load(path);
}
@


1.3
log
@  * builds with checked in ABCLib.
Detail:
  most of the file changes are removed space characters.  Usage of the
  TRACE diagnostic method has been changed to 'dprintf'.
Admin:
   This has been rudimentarily tested, no indepth testing has been done.

Version 0.01. Tagged as 'PrintTool-0_01'
@
text
@d26 1
a26 1

d30 1
a30 1
  w_extent.ymax = (int)((ratio[0]/(float)ratio[1]) * 297 * MM_OSUNIT); // os units
d39 1
a39 1

d41 1
a41 1

d43 1
a43 1
}
d46 1
a46 1
drawfile::file_load(char *s_filename)
d52 1
a52 1

d58 1
a58 1

d60 2
a61 2
}

d67 1
a67 1

d69 1
a69 1

d71 2
a72 5

  if (toolbar_id != 0)
  {
  	toolbar.Attach(toolbar_id);
  }
d74 2
a75 4
  {
  	BadError(error_construct("Err_Obj"));
  }

d78 1
a78 1

d81 1
a81 1

d88 1
a88 1

d104 2
a105 2
  //dprintf(("", "Received a message %i", message->hdr.action_code));

d108 3
a110 3

  //dprintf(("", "De register"));

d118 1
a118 1

d122 3
a124 3

  dprintf(("", "message_size %i", message->hdr.size));

d126 1
a126 1

d130 1
a130 1
void
d152 2
a153 2
  }
}
d163 1
a163 1

d174 1
a174 1

d178 1
a178 1

d185 1
a185 1
    _kernel_swi_regs reg;
d188 2
a189 2
      reg.r[1] = (int)allocated_file;
      reg.r[2] = f_size;
d193 1
a193 1

d206 1
a206 1

d211 1
a211 1

d216 1
a216 1
   {
d231 3
a233 3

   //dprintf(("", "Print Render"));

d238 1
a238 1

d240 1
a240 1

d245 1
a245 1

d250 1
a250 1

d253 3
a255 3

   	dprintf(("", "Printer: %s", regs.r[4]));

d273 1
a273 1

d278 1
a278 1

d284 1
a284 1

d289 1
a289 1

d300 3
a302 3
   		{
   		   dprintf(("", "printing rectangle %i, %i, %i, %i", printable.xmin, printable.xmax,
   						printable.ymin, printable.ymax));
d316 1
a316 1

d324 1
a324 1
   }
d329 1
a329 1
void
d359 1
a359 1

d366 2
a367 2
	//toolbar.stages[toolbar.stage_count].file_name;
	// this does not create an new memory location
a371 2
  dprintf(("", "load new file (%s)\n", s_filename));

d373 1
a373 1

@


1.2
log
@  small changes to ensure building with new version of ABClib, subject
  to its addition to the source tree.
  removed the duplicate files in the docs directory and moved the real
  docs to the docs directory.
Detail:
   my mistake for building a product that used libraries that don't
   exist in the source tree.
Admin:
  this has not been tested other than building and opening starting to run
  generally this is a simple application wrapping around strong algorithms
  already used for the command line version of this application.

Version 0.00. Not tagged
@
text
@d72 4
a75 1
  if (toolbar_id != 0) toolbar.Attach(toolbar_id);
d77 3
a79 1
     BadError(error_construct("Err_Obj"));
d109 1
d114 2
d128 2
d237 2
d259 2
d306 1
a306 1
   		   dprintf(("drawfile", "printing rectangle %i, %i, %i, %i", printable.xmin, printable.xmax,
d376 2
@


1.1
log
@Initial revision
@
text
@d26 1
a26 1
  
d30 1
a30 1
  w_extent.ymax = (int)((ratio[0]/(float)ratio[1]) * 297 * MM_OSUNIT); // os units 
d39 1
a39 1
 
d41 1
a41 1
  
d43 1
a43 1
}  
d46 1
a46 1
drawfile::file_load(char *s_filename) 
d52 1
a52 1
  	
d58 1
a58 1
 
d60 2
a61 2
}   
               
d67 1
a67 1
  
d69 1
a69 1
  
d71 1
a71 1
  
d75 1
a75 1
     
d78 1
a78 1
  
d81 1
a81 1
  
d88 1
a88 1
  
d104 1
a104 2
  //TRACE("Received a message %i", message->hdr.action_code);
  
d107 1
a107 3
  
  //TRACE("De register");
  
d115 1
a115 1
  
d119 1
a119 3
  
  TRACE("message_size %i", message->hdr.size);
    
d121 1
a121 1
  
d125 1
a125 1
void 
d147 2
a148 2
  }  
}   
d158 1
a158 1
 
d169 1
a169 1
    
d173 1
a173 1
    
d180 1
a180 1
    _kernel_swi_regs reg; 
d183 2
a184 2
      reg.r[1] = (int)allocated_file; 
      reg.r[2] = f_size; 
d188 1
a188 1
                                                               
d201 1
a201 1
   
d206 1
a206 1
  
d211 1
a211 1
   {  
d226 1
a226 3
   
   //TRACE("Print Render");
 
d231 1
a231 1
   
d233 1
a233 1
   
d238 1
a238 1
   
d243 1
a243 1
  
d246 1
a246 3
         
   	TRACE("Printer: %s", regs.r[4]);
   
d264 1
a264 1
   	
d269 1
a269 1
   		
d275 1
a275 1
   		
d280 1
a280 1
		
d291 3
a293 3
   		{  
   		   TRACE("printing rectangle %i, %i, %i, %i", printable.xmin, printable.xmax, 
   						printable.ymin, printable.ymax);
d307 1
a307 1
   
d315 1
a315 1
   }                                             
d320 1
a320 1
void 
d350 1
a350 1
  	
d357 2
a358 2
	//toolbar.stages[toolbar.stage_count].file_name;		
	// this does not create an new memory location 
d364 1
a364 1
     
@


1.1.1.1
log
@This tool is a toolbox application that tunes palettes.  It is based around
the prpalgen utility but is aimed at more inexperienced users.
@
text
@@
