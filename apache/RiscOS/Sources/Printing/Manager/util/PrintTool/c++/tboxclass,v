head	1.4;
access;
symbols
	Manager-1_89:1.4
	Manager-1_88:1.4
	Manager-1_87:1.4
	Manager-1_86:1.4
	Manager-1_85:1.4
	Manager-1_84:1.4
	Manager-1_83:1.4
	Manager-1_82:1.4
	Manager-1_81:1.4
	Manager-1_80:1.4
	Manager-1_79:1.4
	Manager-1_78:1.4
	Manager-1_77:1.4
	Manager-1_76:1.4
	Manager-1_75:1.4
	Manager-1_74:1.4
	Manager-1_73:1.4
	Manager-1_72:1.4
	Manager-1_71:1.4
	Manager-1_70:1.4
	Manager-1_69:1.4
	Manager-1_68:1.4
	Manager-1_67:1.4
	Manager-1_66:1.4
	Manager-1_65:1.4
	Manager-1_64:1.4
	Manager-1_63:1.4
	PrintTool-0_01:1.3
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.1
	Ursula_RiscPC:1.1.1.1.0.2
	rthornb_UrsulaBuild-19Aug1998:1.1.1.1
	UrsulaBuild_FinalSoftload:1.1.1.1
	rthornb_UrsulaBuild-12Aug1998:1.1.1.1
	aglover_UrsulaBuild-05Aug1998:1.1.1.1
	rthornb_UrsulaBuild-29Jul1998:1.1.1.1
	rthornb_UrsulaBuild-22Jul1998:1.1.1.1
	rthornb_UrsulaBuild-15Jul1998:1.1.1.1
	rthornb_UrsulaBuild-07Jul1998:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2002.11.26.10.55.49;	author rsprowson;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.07.13.55.39;	author arodger;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.13.12.30.11;	author arodger;	state Exp;
branches;
next	1.1;

1.1
date	98.06.19.10.25.22;	author arodger;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.06.19.10.25.22;	author arodger;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Changes to SetPrint util for additional printer$type understanding
Template tidy up
Change to get version number from VesionNum file
Tweak to SuppSrc for 32 bit high bit addresses
Change !Run file to look for OS3.50 as we use MSR and MRS now
Pick up all but 2 of the changes added to 1.65 on 26-Jun-2001,mostly
cosmetic,with two exceptions
 - use of Parallel_IgnoreErrors
 - warning about dropping "bundled" printer definitions onto it

Version 1.63. Tagged as 'Manager-1_63'
@
text
@// Copyright 1998 Acorn Computers Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#include "main.h"
#include "tboxclass.h"
#include "menu.h"
#include "toolbox.h"

extern PalTask abc_task;

void 
MainMenu::OnSelectionEvent( MenuSelectionEvent *selection, IdBlock *idb )
{
    Menu::OnSelectionEvent( selection, idb );
    if ( idb->self_component == 0 )
       abc_task.Finalise();
}

WaitMessage::WaitMessage(ObjectId w_obj, int a_code)
{
  waiting_object = w_obj;
  action_code = a_code;
  next = NULL;
}

void
PalTask::OnAutoCreatedEvent( ToolboxObjectAutoCreatedEvent *auto_created, IdBlock *idb )
{
    ToolboxTask::OnAutoCreatedEvent( auto_created, idb );
    
    if ( strcmp(auto_created->template_name, "IconMenu") == 0 )
    	mIconMenu.Attach( idb->self_id );

    if ( strcmp(auto_created->template_name, "PalChoose") == 0 )
    	pal_choose.Attach( idb->self_id );
}

void
PalTask::DispatchEvent(int event)
{ 
  void *ObjectInstance;
  IdBlock *idb;
  
  if (event  == Wimp_ERedrawWindow){
    idb = GetIdBlock();
      GetObjectFromId((GetIdBlock()->self_id), &ObjectInstance); 	// get the object that needs redrawing
      ((drawfile*)ObjectInstance)->redraw();
  }
  
  ToolboxTask::DispatchEvent( event );        
}  

/*----messages-----------------------------------------------------------------------------------------*/
void 
PalTask::OnUserMessageEvent( WimpUserMessageEvent *user_message )
{
  TRACE("received user message %X", user_message->hdr.action_code);
  user_message_list.FindAndImplimentMessageFunction(user_message->hdr.action_code, 
  						(WimpMessage*)user_message);
  ToolboxTask::OnUserMessageEvent(user_message);
}

void 
PalTask::OnUserMessageRecordedEvent( WimpUserMessageRecordedEvent *user_message_recorded )
{
  TRACE("received user message, Recorded %X", user_message_recorded->hdr.action_code);
  	
  recorded_message_list.FindAndImplimentMessageFunction(user_message_recorded->hdr.action_code, 
  							(WimpMessage*)user_message_recorded);
  ToolboxTask::OnUserMessageRecordedEvent( user_message_recorded );
}

void 
PalTask::OnUserMessageAcknowledgeEvent( WimpUserMessageAcknowledgeEvent *user_message_acknowledge )
{
  TRACE("received user message, Acknowledge %X", user_message_acknowledge->hdr.action_code);
  acknowledge_message_list.FindAndImplimentMessageFunction(user_message_acknowledge->hdr.action_code, 
  							(WimpMessage*)user_message_acknowledge);
  ToolboxTask::OnUserMessageAcknowledgeEvent( user_message_acknowledge );
}

MessageList::MessageList(void)
{
    MessageObject = NULL;
}
 
MessageList::~MessageList(void)		// discard message waiting list
{
   WaitMessage *Temp;
   
   Temp = MessageObject;
   while (Temp != NULL){
     Temp = Temp->next;
     delete MessageObject;
     MessageObject = Temp; 
   }
}

void 
MessageList::RegisterWaitingForMessage(ObjectId w_obj, int a_code)
{
    WaitMessage *Temp;	// inserts a message in the front of the list
    
    Temp = MessageObject;	// the address of the first object
    MessageObject = new WaitMessage(w_obj, a_code);// new first object
    MessageObject->next = Temp;	// the new first object points to the old
}

  
void 
MessageList::DeRegisterWaitingForMessage(ObjectId w_obj, int a_code)
{
      WaitMessage *Temp, *Temp_a;	// temp ->last object, temp_a -> this (in linked list)
      
      Temp = Temp_a = MessageObject;	// initialise both pointers
      
      while (Temp_a != NULL){
        if ((a_code == Temp_a->action_code)&&(w_obj == Temp_a->waiting_object)){// if this waitmessage
          	if (Temp_a == MessageObject){
          		MessageObject = Temp->next;
          		delete Temp;
          	}// first case
          	else{
               		Temp->next = Temp_a->next;
               		delete Temp_a;
          	}// delete this and correct next pointer.
        }// end if message
        if (Temp_a == MessageObject)// first case incriment
        	Temp_a = Temp_a->next;
        else{
          	Temp_a = Temp_a->next;
          	Temp = Temp->next;
        }
      }//while
}

  
void 
MessageList::DeRegisterWaitingForMessage(ObjectId w_obj)
{
      WaitMessage *Temp, *Temp_a;	// temp ->last object, temp_a -> this (in linked list)
      
      Temp = Temp_a = MessageObject;	// initialise both pointers
      
      while (Temp_a != NULL){
        if (w_obj == Temp_a->waiting_object){// if this waitmessage
          if (Temp_a == MessageObject){
          	MessageObject = Temp->next;
          	delete Temp;
          }// first case
          else{
               Temp->next = Temp_a->next;
               delete Temp_a;
          }// delete this and correct next pointer.
        }// end if 
        if (Temp_a == MessageObject)// first case incriment
        	Temp_a = Temp_a->next;
        else{
          Temp_a = Temp_a->next;
          Temp = Temp->next;
        }
      }//while
}

void
MessageList::FindAndImplimentMessageFunction(int action_code, WimpMessage *message)
{  
    WaitMessage *Temp;
    void *WaitingForMessageObject;
    Temp = MessageObject;
    while (Temp != NULL){
    	if (Temp->action_code == action_code){
      		abc_task.GetObjectFromId(Temp->waiting_object, &WaitingForMessageObject);
      		((drawfile*)WaitingForMessageObject)->MessageHandler(message);
      				// we need to break on the first one as most
     		break;		//  will deregister their handler this has obvious repercussions
     	}
     	Temp = Temp->next;
    }//while
}
@


1.3
log
@  * builds with checked in ABCLib.
Detail:
  most of the file changes are removed space characters.  Usage of the
  TRACE diagnostic method has been changed to 'dprintf'.
Admin:
   This has been rudimentarily tested, no indepth testing has been done.

Version 0.01. Tagged as 'PrintTool-0_01'
@
text
@d22 1
a22 1
void
d41 1
a41 1

d51 2
a52 2
{
  Object *ObjectInstance;
d54 1
a54 2
  char *taskname = NULL;

d57 1
a57 1
      GetObjectFromId(GetIdBlock()->self_id, &ObjectInstance); 	// get the object that needs redrawing
d60 3
a62 3

  ToolboxTask::DispatchEvent( event );
}
d65 1
a65 1
void
d68 2
a69 2
  dprintf(("", "received user message %X", user_message->hdr.action_code));
  user_message_list.FindAndImplimentMessageFunction(user_message->hdr.action_code,
d74 1
a74 1
void
d77 3
a79 3
  dprintf(("", "received user message, Recorded %X", user_message_recorded->hdr.action_code));

  recorded_message_list.FindAndImplimentMessageFunction(user_message_recorded->hdr.action_code,
d84 1
a84 1
void
d87 2
a88 2
  dprintf(("", "received user message, Acknowledge %X", user_message_acknowledge->hdr.action_code));
  acknowledge_message_list.FindAndImplimentMessageFunction(user_message_acknowledge->hdr.action_code,
d97 1
a97 1

d101 1
a101 1

d106 1
a106 1
     MessageObject = Temp;
d110 1
a110 1
void
d114 1
a114 1

d120 2
a121 2

void
d125 1
a125 1

d127 1
a127 1

d148 2
a149 2

void
d153 1
a153 1

d155 1
a155 1

d166 1
a166 1
        }// end if
d178 1
a178 1
{
d180 1
a180 1
    Object *WaitingForMessageObject;
@


1.2
log
@  small changes to ensure building with new version of ABClib, subject
  to its addition to the source tree.
  removed the duplicate files in the docs directory and moved the real
  docs to the docs directory.
Detail:
   my mistake for building a product that used libraries that don't
   exist in the source tree.
Admin:
  this has not been tested other than building and opening starting to run
  generally this is a simple application wrapping around strong algorithms
  already used for the command line version of this application.

Version 0.00. Not tagged
@
text
@d54 1
d58 1
a58 1
      GetObjectFromId((GetIdBlock()->self_id), &ObjectInstance); 	// get the object that needs redrawing
d69 1
a69 1
  dprintf(("tboxclass", "received user message %X", user_message->hdr.action_code));
d78 1
a78 1
  dprintf(("tboxclass", "received user message, Recorded %X", user_message_recorded->hdr.action_code));
d88 1
a88 1
  dprintf(("tboxclass", "received user message, Acknowledge %X", user_message_acknowledge->hdr.action_code));
@


1.1
log
@Initial revision
@
text
@d22 1
a22 1
void 
d41 1
a41 1
    
d51 2
a52 2
{ 
  void *ObjectInstance;
d54 1
a54 1
  
d60 3
a62 3
  
  ToolboxTask::DispatchEvent( event );        
}  
d65 1
a65 1
void 
d68 2
a69 2
  TRACE("received user message %X", user_message->hdr.action_code);
  user_message_list.FindAndImplimentMessageFunction(user_message->hdr.action_code, 
d74 1
a74 1
void 
d77 3
a79 3
  TRACE("received user message, Recorded %X", user_message_recorded->hdr.action_code);
  	
  recorded_message_list.FindAndImplimentMessageFunction(user_message_recorded->hdr.action_code, 
d84 1
a84 1
void 
d87 2
a88 2
  TRACE("received user message, Acknowledge %X", user_message_acknowledge->hdr.action_code);
  acknowledge_message_list.FindAndImplimentMessageFunction(user_message_acknowledge->hdr.action_code, 
d97 1
a97 1
 
d101 1
a101 1
   
d106 1
a106 1
     MessageObject = Temp; 
d110 1
a110 1
void 
d114 1
a114 1
    
d120 2
a121 2
  
void 
d125 1
a125 1
      
d127 1
a127 1
      
d148 2
a149 2
  
void 
d153 1
a153 1
      
d155 1
a155 1
      
d166 1
a166 1
        }// end if 
d178 1
a178 1
{  
d180 1
a180 1
    void *WaitingForMessageObject;
@


1.1.1.1
log
@This tool is a toolbox application that tunes palettes.  It is based around
the prpalgen utility but is aimed at more inexperienced users.
@
text
@@
