head	1.5;
access;
symbols
	Manager-1_89:1.5
	Manager-1_88:1.5
	Manager-1_87:1.4
	Manager-1_86:1.4
	Manager-1_85:1.4
	Manager-1_84:1.4
	Manager-1_83:1.4
	Manager-1_82:1.4
	Manager-1_81:1.4
	Manager-1_80:1.4
	Manager-1_79:1.4
	Manager-1_78:1.4
	Manager-1_77:1.4
	Manager-1_76:1.4
	Manager-1_75:1.4
	Manager-1_74:1.4
	Manager-1_73:1.4
	Manager-1_72:1.4
	Manager-1_71:1.4
	Manager-1_70:1.4
	Manager-1_69:1.4
	Manager-1_68:1.4
	Manager-1_67:1.4
	Manager-1_66:1.4
	Manager-1_65:1.4
	Manager-1_64:1.4
	Manager-1_63:1.4
	PrintTool-0_01:1.3
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.3
	Ursula_RiscPC:1.1.1.3.0.2
	rthornb_UrsulaBuild-19Aug1998:1.1.1.3
	UrsulaBuild_FinalSoftload:1.1.1.3
	rthornb_UrsulaBuild-12Aug1998:1.1.1.3
	aglover_UrsulaBuild-05Aug1998:1.1.1.3
	rthornb_UrsulaBuild-29Jul1998:1.1.1.3
	rthornb_UrsulaBuild-22Jul1998:1.1.1.3
	rthornb_UrsulaBuild-15Jul1998:1.1.1.3
	rthornb_UrsulaBuild-07Jul1998:1.1.1.3
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2018.02.26.20.44.06;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	Dcj3YMcKdSLBxpsA;

1.4
date	2002.11.26.10.55.49;	author rsprowson;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.07.13.55.39;	author arodger;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.13.12.30.10;	author arodger;	state Exp;
branches;
next	1.1;

1.1
date	98.06.19.10.25.21;	author arodger;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.06.19.10.25.21;	author arodger;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.06.23.12.31.35;	author arodger;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	98.06.23.15.14.41;	author arodger;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Write through the right system variable
Remove the misuse of PrinterChoices$Path for writing through
* It's stated in the sources it only ever has one directory on it, so might as well not be a path
* It's not in !Printers allocated namespace
* We can save some effort canonicalising it
Drop support for the define 'UseChoices'; always use them.
Global search and replace of PrinterChoices: for <Printers$ChoicesRW>. (cf. Boot$ChoicesRW).

Version 1.88. Tagged as 'Manager-1_88'
@
text
@// Copyright 1998 Acorn Computers Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#include "display.h"
#include "kernel.h"
#include "walkth.h"

void
PalWin::set_update(int bool)
{
 char buffer[20];
 
    if (update == bool)
       return;
       
    update = bool;
    
    if (bool == TRUE)
        sprintf( buffer, "Palette *%s", pal_file);
    else
        sprintf( buffer, "Palette %s", pal_file);
        
    SetTitle( 0, buffer);
}
  
/* ------------------------------------------------------------------------ */
void 
PalWin::DispatchEvent( ToolboxEvent *event, IdBlock *idb )
{
  if (event->hdr.event_code == WritableField_ValueChanged){
    set_update(TRUE);
    return;
  }
  if (event->hdr.event_code != ActionButton_Selected){
    Window::DispatchEvent(event, idb);
    return;
  }
  switch (idb->self_component)
    {
      case 0x19:	// walkthrough
        new drawfile();
      	break;
      case 0x26:	// save
         read_toolbox_window();
         if (!validate_calib(&pal_table.tab.calib))
         	Error(error_construct("Err_ValidCalib"));
         set_tables(&pal_table.tab.calib, &pal_table.tab);
         write_palette();
         write_toolbox_window();
         update_cached_palette();
         set_update(FALSE);
        break;
      case 0x27:	// refresh
         read_palette();
         write_toolbox_window();
         set_update(FALSE);
        break;
      case 0x2f:	// cancel
         SpalWin *temp;			// temp now floats addressable trough the toolbox
         temp = new SpalWin(pal_file);
         temp->pal_table = pal_table;
         temp->write_toolbox_window();
         Hide(0);
        break;
      case 0x30:	// clear
         pal_table.set_default_calib();
         write_toolbox_window();
         set_update(TRUE);
        break;
      default:
  	Window::DispatchEvent(event, idb);     	
    }
}
  
PalWin::PalWin(void)
{	// no op so I can run the child constructor
}

PalWin::PalWin(char *palette_file)
{
  // This function should read a palette and write those values to the 
  // writables of the toolbox window
  ComponentId comp_id;
  ObjectId parent;
  
  pal_file = new char[strlen(palette_file)+1];
  strcpy( pal_file, palette_file);
  
  Window::Create(0, "Control");
  for (comp_id = 2; comp_id <= 23; comp_id++)
  	PalVal[comp_id-2].Attach(mOID, comp_id);
  	
  walk.Attach(mOID, 0x19);
  save.Attach(mOID, 0x26);
  refresh.Attach(mOID, 0x27);
  
  paldata = NULL;
 
  if (!read_palette()){ // read parameters set to default if old version
       Error(error_construct("Err_File"));
       return ;
  }
 
  write_toolbox_window();
 
  comp_id = 0;
  GetParent(0, &parent, &comp_id);
  Show( 0, 0, NULL, parent, comp_id );

  set_update(FALSE);
}

PalWin::~PalWin(void)
{ 
  TRACE("deleting a palette instance");
  // raise a do you want to save dialogue box
  delete pal_file;
  delete paldata;
  Window::~Window;
}

int
PalWin::read_palette()
{
  FILE *fp;
  char file_path[FILE_PATH_LENGTH];
  sprintf(file_path, "Printers:palettes.%s",pal_file);
  
  fp = fopen(file_path, "r");
    if ( fp == NULL){
        Error(error_construct("Err_File"));
        return FALSE;
    }
    fread(&palhdr,sizeof(palhdr_t),1,fp);
   
    if ((palhdr.version != 1) && (palhdr.version != 2)){
  	Error(error_construct("Err_PalVer"));
	fclose(fp);
  	return FALSE;
    }
    datasize = palhdr.reproinfo - sizeof(palhdr_t);

    delete paldata;			// no effect on null
    paldata = new uint8[datasize];	// freed in the delete
    if (paldata == NULL){
    	BadError(error_construct("Err_Memory"));
    	fclose(fp);
  	return FALSE;
    }

    fread(paldata,datasize,1,fp);
    if ( palhdr.version == 1 ){
  	// notify that the palette is of version 1
       read_toolbox_window();	// set the default from the template
    }
    else
        fread(&pal_table, sizeof(tables_t),1,fp);
  fclose(fp);
  
  return TRUE;
}

int
PalWin::write_palette()
{
  FILE *fp;
  char file_path[FILE_PATH_LENGTH];
  sprintf(file_path, "<Choices$Write>.Printers.palettes.%s",pal_file);
  
  set_tables(&pal_table.tab.calib, &pal_table.tab); // call the palgen code calib -> tables
  fp = fopen(file_path, "w");
  if ( fp == NULL){
        Error(error_construct("Err_File"));
        return FALSE;
  }
  
  palhdr.version = 2;
  fwrite(&palhdr,sizeof(palhdr_t),1,fp);
  fwrite(paldata,datasize,1,fp);
  fwrite(&pal_table.tab, sizeof(tables_t),1,fp);
  fclose(fp);
  return TRUE;
}

void
PalWin::update_cached_palette()
{
    /* only updates the new-tables part */

  _kernel_swi_regs r;
  int           handle,syshandle,fsno;
  uint32        *u, palette_version, hdr;
  calib_table   *t;
  char 		fname[FILE_PATH_LENGTH];

  sprintf(fname,"Resources:Resources.Printers.Palettes.%s",pal_file);
 
  r.r[0] = 0x43;
  r.r[1] = (int)fname;
  Error(_kernel_swi(OS_Find, &r, &r));
  handle = r.r[0];

  if (handle != 0)
  {
    r.r[0] = 21; 		// return filing system file handle
    r.r[1] = handle;
    Error(_kernel_swi(OS_FSControl,&r, &r));
    syshandle = r.r[1];		// pointer to the palette in memory
    fsno = r.r[2] & 255;	// filing system information word
    if (fsno == 46) 		// ResourceFS
    {
      u = (uint32 *)syshandle;
      palette_version = *u;	// the first element in the palette
      u = (uint32 *)(syshandle - ((strlen(fname)-strlen("Resources:")+4) & ~3) - 28);
      hdr = *u;

      if ((palette_version == 2) && (hdr == 0x48434143))
      {
        t = (calib_table *)(syshandle + (sizeof(palhdr_t) + datasize));
        (*t) = pal_table;
      }
      else  Error(error_construct("Err_File"));
        
      r.r[0] = 0;
      r.r[1] = handle;
      Error(_kernel_swi(OS_Find,&r, &r)); /* close */
    }// end if resorce FS
  } // else it is not cached
}

void 
PalWin::write_toolbox_window(void)
{
  char text[10];
  TRACE("Palwin write");
  
  sprintf(text, "%3.1f",pal_table.tab.calib.ediff_density);  
  PalVal[0].SetValue(0, text);
  sprintf(text, "%2.2f",pal_table.tab.calib.bright[0]);  
  PalVal[1].SetValue(0, text);
  sprintf(text, "%2.2f",pal_table.tab.calib.bright[1]); 
  PalVal[2].SetValue(0, text);
  sprintf(text, "%2.2f",pal_table.tab.calib.contrast);
  PalVal[3].SetValue(0, text);
  sprintf(text, "%2.2f",pal_table.tab.calib.red_adj_my);  
  PalVal[4].SetValue(0, text);
  sprintf(text, "%2.2f",pal_table.tab.calib.green_adj_cy); 
  PalVal[5].SetValue(0, text);
  sprintf(text, "%2.2f",pal_table.tab.calib.blue_adj_cm);
  PalVal[6].SetValue(0, text);
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[0]);  
  PalVal[7].SetValue(0, text);
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[1]); 
  PalVal[8].SetValue(0, text);
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[2]); 
  PalVal[9].SetValue(0, text);
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[3]); 
  PalVal[10].SetValue(0, text);
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gcr[0]); 
  PalVal[11].SetValue(0, text);
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gcr[1]); 
  PalVal[12].SetValue(0, text);
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gen[0]); 
  PalVal[13].SetValue(0, text);
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gen[1]); 
  PalVal[14].SetValue(0, text);
  sprintf(text, "%i", (int)((((float)pal_table.tab.calib.k_mnz/256)*100)+0.5));
  PalVal[15].SetValue(0, text);
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[0]); 
  PalVal[16].SetValue(0, text);
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[1]); 
  PalVal[17].SetValue(0, text);
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[2]); 
  PalVal[18].SetValue(0, text);
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[3]);  
  PalVal[19].SetValue(0, text);
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete2ink);
  PalVal[20].SetValue(0, text);
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete3ink);
  PalVal[21].SetValue(0, text);
}  

void 
PalWin::read_toolbox_window(void)
{
  TRACE("PalWin read");
  char text[10], *chrptr;
  int  nbytes;
  
  PalVal[0].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.ediff_density = (float)strtod(text, &chrptr);  
  PalVal[1].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.bright[0] = (float)strtod(text, &chrptr);  
  PalVal[2].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.bright[1] = (float)strtod(text, &chrptr); 
  PalVal[3].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.contrast = (float)strtod(text, &chrptr);
  PalVal[4].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.red_adj_my = (float)strtod(text, &chrptr);  
  PalVal[5].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.green_adj_cy = (float)strtod(text, &chrptr); 
  PalVal[6].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.blue_adj_cm = (float)strtod(text, &chrptr);
  PalVal[7].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.gamma[0] = (float)strtod(text, &chrptr);  
  PalVal[8].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.gamma[1] = (float)strtod(text, &chrptr); 
  PalVal[9].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.gamma[2] = (float)strtod(text, &chrptr); 
  PalVal[10].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.gamma[3] = (float)strtod(text, &chrptr); 
  PalVal[11].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.k_gcr[0] = (float)strtod(text, &chrptr); 
  PalVal[12].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.k_gcr[1] = (float)strtod(text, &chrptr); 
  PalVal[13].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.k_gen[0] = (float)strtod(text, &chrptr); 
  PalVal[14].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.k_gen[1] = (float)strtod(text, &chrptr); 
  PalVal[15].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.k_mnz = (int)((strtod(text, &chrptr)/100)*256);
  PalVal[16].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.deplete1ink[0] = (float)strtod(text, &chrptr); 
  PalVal[17].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.deplete1ink[1] = (float)strtod(text, &chrptr); 
  PalVal[18].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.deplete1ink[2] = (float)strtod(text, &chrptr); 
  PalVal[19].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.deplete1ink[3] = (float)strtod(text, &chrptr);  
  PalVal[20].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.deplete2ink = (float)strtod(text, &chrptr);
  PalVal[21].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.deplete3ink = (float)strtod(text, &chrptr);
  
  if (!validate_calib(&pal_table.tab.calib)){
         	Error(error_construct("Err_ValidCalib"));
         	write_toolbox_window();
  }
}  

void 
PalWin::OnHasBeenHiddenEvent( WindowHasBeenHiddenEvent *has_been_hidden, IdBlock *idb )
{
  Window::OnHasBeenHiddenEvent( has_been_hidden, idb );
  delete this;
}
/* ------------------------------------------------------------------------ */
void 
SpalWin::set_no_black(int bool)
{
  unsigned int flags;
  if (bool == TRUE){
  	// sets the grey variables to 'faded' in the toolbox, de&f
  	Error(PalVal[0xD].GetFlags(0,&flags));
  	flags = flags | Gadget_Faded;
  	Error(PalVal[0xD].SetFlags(0,flags));
  	Error(PalVal[0xe].GetFlags(0,&flags));
  	flags = flags | Gadget_Faded;
   	Error(PalVal[0xe].SetFlags(0,flags));
  	Error(PalVal[0xf].GetFlags(0,&flags));
  	flags = flags | Gadget_Faded;
   	Error(PalVal[0xf].SetFlags(0,flags));
  	Error(PalVal[0xa].GetFlags(0,&flags));
  	flags = flags | Gadget_Faded;
   	Error(PalVal[0xa].SetFlags(0,flags));
 	pal_table.tab.calib.k_gcr[0] = 0.0f; 
  }	
  else{
  	Error(PalVal[0xD].GetFlags(0,&flags));
  	flags = flags & ~Gadget_Faded;
   	Error(PalVal[0xD].SetFlags(0,flags));
  	Error(PalVal[0xe].GetFlags(0,&flags));
  	flags = flags & ~Gadget_Faded;
   	Error(PalVal[0xe].SetFlags(0,flags));
  	Error(PalVal[0xf].GetFlags(0,&flags));
  	flags = flags & ~Gadget_Faded;
   	Error(PalVal[0xf].SetFlags(0,flags));
  	Error(PalVal[0xa].GetFlags(0,&flags));
  	flags = flags & ~Gadget_Faded;
   	Error(PalVal[0xa].SetFlags(0,flags));
 	pal_table.tab.calib.k_gcr[0] = 100.0f; 
  }
  Radio_col.SetState(0, bool);
  set_update(FALSE);
}

void 
SpalWin::DispatchEvent( ToolboxEvent *event, IdBlock *idb )
{
  if ((event->hdr.event_code == RadioButton_StateChanged )
      &&(idb->self_component == 0x2c)){
        RadioButtonStateChangedEvent *r_event = (RadioButtonStateChangedEvent*)event;
    	set_no_black(r_event->state);
    	write_toolbox_window();
  }
  else if (event->hdr.event_code == ActionButton_Selected){
     if (idb->self_component == 0x31){
     	  PalWin *temp;
     	  temp = new PalWin(pal_file);
     	  read_toolbox_window();
     	  temp->pal_table = pal_table;	// nifty isn't it.
     	  temp->write_toolbox_window();
     	  Hide(0);
     } else 
     if(idb->self_component == 0x2f)
     	  Hide(0);
     else
     	  PalWin::DispatchEvent(event, idb);
  }
  else 
  PalWin::DispatchEvent(event, idb);
}

SpalWin::SpalWin(char *palette_file)
{
  // This function should read a palette and write those values to the 
  // writables of the toolbox window
  ComponentId comp_id;
  ObjectId parent;
  
  pal_file = new char[strlen(palette_file)+1];
  strcpy( pal_file, palette_file);
  
  Window::Create(0, "SControl");
  for (comp_id = 1; comp_id <= 18; comp_id++)
  	PalVal[comp_id].Attach(mOID, comp_id);
  	
  walk.Attach(mOID, 0x19);
  save.Attach(mOID, 0x26);
  refresh.Attach(mOID, 0x27);
  
  Radio_b_w.Attach(mOID, 0x2D);
  Radio_col.Attach(mOID, 0x2c);
  
  paldata = NULL;
 
  if (!read_palette()){ // read parameters set to default if old version
       Error(error_construct("Err_File"));
       return ;
  }
  
  write_toolbox_window();
  set_no_black(!pal_table.tab.calib.k_gcr[0]); // if this value is zero we are using a CMY palette
  
  comp_id = 0;
  GetParent(0, &parent, &comp_id);
  Show( 0, 0, NULL, parent, comp_id );

	
  set_update(FALSE);
}

void
SpalWin::write_toolbox_window(void)	// return boolean success
{
   char text[10];
   float temp;
 
  temp = 100.0 - pal_table.tab.calib.ediff_density;

  sprintf(text, "%3.1f",pal_table.tab.calib.bright[0]);  
  PalVal[1].SetValue(0, text);
  sprintf(text, "%3.1f",pal_table.tab.calib.contrast);
  PalVal[2].SetValue(0, text);
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[0]);  
  PalVal[3].SetValue(0, text);
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[1]); 
  PalVal[4].SetValue(0, text);
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[2]); 
  PalVal[5].SetValue(0, text);
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[3]); 
  PalVal[6].SetValue(0, text);
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[0]-temp); 
  PalVal[7].SetValue(0, text);
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[1]-temp); 
  PalVal[8].SetValue(0, text);
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[2]-temp); 
  PalVal[9].SetValue(0, text);
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[3]-temp);  
  PalVal[10].SetValue(0, text);
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete2ink-temp);
  PalVal[11].SetValue(0, text);
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete3ink-temp);
  PalVal[12].SetValue(0, text);
  
  sprintf(text, "%2.2f",pal_table.tab.calib.red_adj_my);  
  PalVal[16].SetValue(0, text);
  sprintf(text, "%2.2f",pal_table.tab.calib.green_adj_cy); 
  PalVal[17].SetValue(0, text);
  sprintf(text, "%2.2f",pal_table.tab.calib.blue_adj_cm);
  PalVal[18].SetValue(0, text);
  
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gcr[0]/2); 
  PalVal[13].SetValue(0, text);
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gen[0]/2); 
  PalVal[14].SetValue(0, text);
  sprintf(text, "%i",(int)((((float)pal_table.tab.calib.k_mnz/256)*100)+0.5) );
  PalVal[15].SetValue(0, text);
}

void
SpalWin::read_toolbox_window(void)	// writes the structures to the palette
{
  char text[10], *chrptr;
  int  nbytes;
  float temp;

  PalVal[1].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.bright[0] = (float)strtod(text, &chrptr);  
  PalVal[2].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.contrast = (float)strtod(text, &chrptr);

  PalVal[3].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.gamma[0] = (float)strtod(text, &chrptr);  
  PalVal[4].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.gamma[1] = (float)strtod(text, &chrptr); 
  PalVal[5].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.gamma[2] = (float)strtod(text, &chrptr); 
  PalVal[6].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.gamma[3] = (float)strtod(text, &chrptr); 

  PalVal[7].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.deplete1ink[0] = (float)strtod(text, &chrptr); 
  PalVal[8].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.deplete1ink[1] = (float)strtod(text, &chrptr); 
  PalVal[9].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.deplete1ink[2] = (float)strtod(text, &chrptr); 
  PalVal[10].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.deplete1ink[3] = (float)strtod(text, &chrptr);  
  
  PalVal[11].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.deplete2ink = (float)strtod(text, &chrptr);
  PalVal[12].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.deplete3ink = (float)strtod(text, &chrptr);

  PalVal[13].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.k_gcr[0] = (float)strtod(text, &chrptr)*2; 
  PalVal[14].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.k_gen[0] = (float)strtod(text, &chrptr)*2; 
  PalVal[15].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.k_mnz = (int)((strtod(text, &chrptr)*256/100));

  PalVal[16].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.red_adj_my = (float)strtod(text, &chrptr);  
  PalVal[17].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.green_adj_cy = (float)strtod(text, &chrptr); 
  PalVal[18].GetValue(0, text, 10, &nbytes); chrptr = text + nbytes;
  pal_table.tab.calib.blue_adj_cm = (float)strtod(text, &chrptr);
 	// calculate the remainder of the values
 	
  pal_table.tab.calib.ediff_density = max_depletion();			// set the density to the maximum value
  temp = 100.0 -  pal_table.tab.calib.ediff_density;			// scale the others by this value
  	
  pal_table.tab.calib.deplete1ink[3] =  pal_table.tab.calib.deplete1ink[3] + temp;
  pal_table.tab.calib.deplete1ink[0] =  pal_table.tab.calib.deplete1ink[0] + temp; 
  pal_table.tab.calib.deplete1ink[1] =  pal_table.tab.calib.deplete1ink[1] + temp; 
  pal_table.tab.calib.deplete1ink[2] =  pal_table.tab.calib.deplete1ink[2] + temp;
  pal_table.tab.calib.deplete2ink =  pal_table.tab.calib.deplete2ink + temp;
  pal_table.tab.calib.deplete3ink =  pal_table.tab.calib.deplete3ink + temp;
  
  pal_table.tab.calib.bright[1] = 0.75; // half tone
  pal_table.tab.calib.k_gcr[1]  = 100; 	// 100% value
  pal_table.tab.calib.k_gen[1]  = 100; 
 
  if (!validate_calib(&pal_table.tab.calib)){
         	Error(error_construct("Err_ValidCalib"));
         	write_toolbox_window();
  }
}

float 
SpalWin::max_depletion(void)
{
  float max;
  int state;
  ComponentId id = 0x2c;
  
  Radio_col.GetState(0, &state, &id);
  
  if (!state)	// if col not selected we need to include black 
  	max = pal_table.tab.calib.deplete1ink[3];
  else 
  	max = pal_table.tab.calib.deplete1ink[2];
  
  if (pal_table.tab.calib.deplete1ink[0] > max) max = pal_table.tab.calib.deplete1ink[0];
  if (pal_table.tab.calib.deplete1ink[1] > max) max = pal_table.tab.calib.deplete1ink[1];
  if (pal_table.tab.calib.deplete1ink[2] > max) max = pal_table.tab.calib.deplete1ink[2];
  if (pal_table.tab.calib.deplete2ink > max)    max = pal_table.tab.calib.deplete2ink;
  if (pal_table.tab.calib.deplete3ink > max)    max = pal_table.tab.calib.deplete3ink;
  
  return max;
}
@


1.4
log
@Changes to SetPrint util for additional printer$type understanding
Template tidy up
Change to get version number from VesionNum file
Tweak to SuppSrc for 32 bit high bit addresses
Change !Run file to look for OS3.50 as we use MSR and MRS now
Pick up all but 2 of the changes added to 1.65 on 26-Jun-2001,mostly
cosmetic,with two exceptions
 - use of Parallel_IgnoreErrors
 - warning about dropping "bundled" printer definitions onto it

Version 1.63. Tagged as 'Manager-1_63'
@
text
@d179 1
a179 1
  sprintf(file_path, "PrinterChoices:palettes.%s",pal_file);
@


1.3
log
@  * builds with checked in ABCLib.
Detail:
  most of the file changes are removed space characters.  Usage of the
  TRACE diagnostic method has been changed to 'dprintf'.
Admin:
   This has been rudimentarily tested, no indepth testing has been done.

Version 0.01. Tagged as 'PrintTool-0_01'
@
text
@d23 1
a23 1

d26 1
a26 1

d28 1
a28 1

d33 1
a33 1

d36 1
a36 1

d38 1
a38 1
void
d52 1
a52 2
        new drawfile(); // this is associated through its window identity we are not
        		// throwing away a pointer.
d82 1
a82 1
  	Window::DispatchEvent(event, idb);
d85 1
a85 1

d92 1
a92 1
  // This function should read a palette and write those values to the
d96 1
a96 1

d99 1
a99 1

d103 1
a103 1

d107 1
a107 1

d109 1
a109 1

d114 1
a114 1

d116 1
a116 1

d125 2
a126 2
{
  dprintf(("", "deleting a palette instance"));
d138 2
a139 2
  sprintf(file_path, "%s.%s",PALETTE_DIR, pal_file);

d146 1
a146 1

d170 1
a170 1

d180 1
a180 1

d187 1
a187 1

d208 1
a208 1

d234 1
a234 1

d242 1
a242 1
void
d246 3
a248 3
  dprintf(("", "Palwin write"));

  sprintf(text, "%3.1f",pal_table.tab.calib.ediff_density);
d250 1
a250 1
  sprintf(text, "%2.2f",pal_table.tab.calib.bright[0]);
d252 1
a252 1
  sprintf(text, "%2.2f",pal_table.tab.calib.bright[1]);
d256 1
a256 1
  sprintf(text, "%2.2f",pal_table.tab.calib.red_adj_my);
d258 1
a258 1
  sprintf(text, "%2.2f",pal_table.tab.calib.green_adj_cy);
d262 1
a262 1
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[0]);
d264 1
a264 1
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[1]);
d266 1
a266 1
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[2]);
d268 1
a268 1
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[3]);
d270 1
a270 1
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gcr[0]);
d272 1
a272 1
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gcr[1]);
d274 1
a274 1
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gen[0]);
d276 1
a276 1
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gen[1]);
d280 1
a280 1
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[0]);
d282 1
a282 1
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[1]);
d284 1
a284 1
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[2]);
d286 1
a286 1
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[3]);
d292 1
a292 1
}
d294 1
a294 1
void
d297 1
a297 1
  dprintf(("", "PalWin read"));
d300 1
a300 1

d302 1
a302 1
  pal_table.tab.calib.ediff_density = (float)strtod(text, &chrptr);
d304 1
a304 1
  pal_table.tab.calib.bright[0] = (float)strtod(text, &chrptr);
d306 1
a306 1
  pal_table.tab.calib.bright[1] = (float)strtod(text, &chrptr);
d310 1
a310 1
  pal_table.tab.calib.red_adj_my = (float)strtod(text, &chrptr);
d312 1
a312 1
  pal_table.tab.calib.green_adj_cy = (float)strtod(text, &chrptr);
d316 1
a316 1
  pal_table.tab.calib.gamma[0] = (float)strtod(text, &chrptr);
d318 1
a318 1
  pal_table.tab.calib.gamma[1] = (float)strtod(text, &chrptr);
d320 1
a320 1
  pal_table.tab.calib.gamma[2] = (float)strtod(text, &chrptr);
d322 1
a322 1
  pal_table.tab.calib.gamma[3] = (float)strtod(text, &chrptr);
d324 1
a324 1
  pal_table.tab.calib.k_gcr[0] = (float)strtod(text, &chrptr);
d326 1
a326 1
  pal_table.tab.calib.k_gcr[1] = (float)strtod(text, &chrptr);
d328 1
a328 1
  pal_table.tab.calib.k_gen[0] = (float)strtod(text, &chrptr);
d330 1
a330 1
  pal_table.tab.calib.k_gen[1] = (float)strtod(text, &chrptr);
d334 1
a334 1
  pal_table.tab.calib.deplete1ink[0] = (float)strtod(text, &chrptr);
d336 1
a336 1
  pal_table.tab.calib.deplete1ink[1] = (float)strtod(text, &chrptr);
d338 1
a338 1
  pal_table.tab.calib.deplete1ink[2] = (float)strtod(text, &chrptr);
d340 1
a340 1
  pal_table.tab.calib.deplete1ink[3] = (float)strtod(text, &chrptr);
d345 1
a345 1

d350 1
a350 1
}
d352 1
a352 1
void
d359 1
a359 1
void
d377 2
a378 2
 	pal_table.tab.calib.k_gcr[0] = 0.0f;
  }
d392 1
a392 1
 	pal_table.tab.calib.k_gcr[0] = 100.0f;
d398 1
a398 1
void
d415 1
a415 1
     } else
d421 1
a421 1
  else
d427 1
a427 1
  // This function should read a palette and write those values to the
d431 1
a431 1

d433 2
a434 2
  strcpy( pal_file, palette_file );

d438 1
a438 1

d442 1
a442 1

d445 1
a445 1

d447 1
a447 1

d452 1
a452 1

a453 1

d455 1
a455 1

a457 1

d460 1
d469 1
a469 1

d472 1
a472 1
  sprintf(text, "%3.1f",pal_table.tab.calib.bright[0]);
d476 1
a476 1
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[0]);
d478 1
a478 1
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[1]);
d480 1
a480 1
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[2]);
d482 1
a482 1
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[3]);
d484 1
a484 1
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[0]-temp);
d486 1
a486 1
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[1]-temp);
d488 1
a488 1
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[2]-temp);
d490 1
a490 1
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[3]-temp);
d496 2
a497 2

  sprintf(text, "%2.2f",pal_table.tab.calib.red_adj_my);
d499 1
a499 1
  sprintf(text, "%2.2f",pal_table.tab.calib.green_adj_cy);
d503 2
a504 2

  sprintf(text, "%3.1f",pal_table.tab.calib.k_gcr[0]/2);
d506 1
a506 1
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gen[0]/2);
d520 1
a520 1
  pal_table.tab.calib.bright[0] = (float)strtod(text, &chrptr);
d525 1
a525 1
  pal_table.tab.calib.gamma[0] = (float)strtod(text, &chrptr);
d527 1
a527 1
  pal_table.tab.calib.gamma[1] = (float)strtod(text, &chrptr);
d529 1
a529 1
  pal_table.tab.calib.gamma[2] = (float)strtod(text, &chrptr);
d531 1
a531 1
  pal_table.tab.calib.gamma[3] = (float)strtod(text, &chrptr);
d534 1
a534 1
  pal_table.tab.calib.deplete1ink[0] = (float)strtod(text, &chrptr);
d536 1
a536 1
  pal_table.tab.calib.deplete1ink[1] = (float)strtod(text, &chrptr);
d538 1
a538 1
  pal_table.tab.calib.deplete1ink[2] = (float)strtod(text, &chrptr);
d540 2
a541 2
  pal_table.tab.calib.deplete1ink[3] = (float)strtod(text, &chrptr);

d548 1
a548 1
  pal_table.tab.calib.k_gcr[0] = (float)strtod(text, &chrptr)*2;
d550 1
a550 1
  pal_table.tab.calib.k_gen[0] = (float)strtod(text, &chrptr)*2;
d555 1
a555 1
  pal_table.tab.calib.red_adj_my = (float)strtod(text, &chrptr);
d557 1
a557 1
  pal_table.tab.calib.green_adj_cy = (float)strtod(text, &chrptr);
d561 1
a561 1

d564 1
a564 1

d566 2
a567 2
  pal_table.tab.calib.deplete1ink[0] =  pal_table.tab.calib.deplete1ink[0] + temp;
  pal_table.tab.calib.deplete1ink[1] =  pal_table.tab.calib.deplete1ink[1] + temp;
d571 1
a571 1

d574 2
a575 2
  pal_table.tab.calib.k_gen[1]  = 100;

d582 1
a582 1
float
d588 1
a588 1

d590 2
a591 2

  if (!state)	// if col not selected we need to include black
d593 1
a593 1
  else
d595 1
a595 1

d601 1
a601 1

@


1.2
log
@  small changes to ensure building with new version of ABClib, subject
  to its addition to the source tree.
  removed the duplicate files in the docs directory and moved the real
  docs to the docs directory.
Detail:
   my mistake for building a product that used libraries that don't
   exist in the source tree.
Admin:
  this has not been tested other than building and opening starting to run
  generally this is a simple application wrapping around strong algorithms
  already used for the command line version of this application.

Version 0.00. Not tagged
@
text
@d52 2
a53 1
        new drawfile();
d127 1
a127 1
  dprintf(("display", "deleting a palette instance"));
d139 1
a139 1
  sprintf(file_path, "Printers:palettes.%s",pal_file);
d247 1
a247 1
  dprintf(("display", "Palwin write"));
d298 1
a298 2
  dprintf(("display", "PalWin read\n"));

d434 1
a434 1
  strcpy( pal_file, palette_file);
d455 1
d460 1
a461 1

@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
 
d26 1
a26 1
       
d28 1
a28 1
    
d33 1
a33 1
        
d36 1
a36 1
  
d38 1
a38 1
void 
d82 1
a82 1
  	Window::DispatchEvent(event, idb);     	
d85 1
a85 1
  
d92 1
a92 1
  // This function should read a palette and write those values to the 
d96 1
a96 1
  
d99 1
a99 1
  
d103 1
a103 1
  	
d107 1
a107 1
  
d109 1
a109 1
 
d114 1
a114 1
 
d116 1
a116 1
 
d125 2
a126 2
{ 
  TRACE("deleting a palette instance");
d139 1
a139 1
  
d146 1
a146 1
   
d170 1
a170 1
  
d180 1
a180 1
  
d187 1
a187 1
  
d208 1
a208 1
 
d234 1
a234 1
        
d242 1
a242 1
void 
d246 3
a248 3
  TRACE("Palwin write");
  
  sprintf(text, "%3.1f",pal_table.tab.calib.ediff_density);  
d250 1
a250 1
  sprintf(text, "%2.2f",pal_table.tab.calib.bright[0]);  
d252 1
a252 1
  sprintf(text, "%2.2f",pal_table.tab.calib.bright[1]); 
d256 1
a256 1
  sprintf(text, "%2.2f",pal_table.tab.calib.red_adj_my);  
d258 1
a258 1
  sprintf(text, "%2.2f",pal_table.tab.calib.green_adj_cy); 
d262 1
a262 1
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[0]);  
d264 1
a264 1
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[1]); 
d266 1
a266 1
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[2]); 
d268 1
a268 1
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[3]); 
d270 1
a270 1
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gcr[0]); 
d272 1
a272 1
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gcr[1]); 
d274 1
a274 1
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gen[0]); 
d276 1
a276 1
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gen[1]); 
d278 1
a278 1
  sprintf(text, "%i",pal_table.tab.calib.k_mnz);
d280 1
a280 1
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[0]); 
d282 1
a282 1
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[1]); 
d284 1
a284 1
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[2]); 
d286 1
a286 1
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[3]);  
d292 1
a292 1
}  
d294 1
a294 1
void 
d297 2
a298 1
  TRACE("PalWin read");
d301 1
a301 1
  
d303 1
a303 1
  pal_table.tab.calib.ediff_density = (float)strtod(text, &chrptr);  
d305 1
a305 1
  pal_table.tab.calib.bright[0] = (float)strtod(text, &chrptr);  
d307 1
a307 1
  pal_table.tab.calib.bright[1] = (float)strtod(text, &chrptr); 
d311 1
a311 1
  pal_table.tab.calib.red_adj_my = (float)strtod(text, &chrptr);  
d313 1
a313 1
  pal_table.tab.calib.green_adj_cy = (float)strtod(text, &chrptr); 
d317 1
a317 1
  pal_table.tab.calib.gamma[0] = (float)strtod(text, &chrptr);  
d319 1
a319 1
  pal_table.tab.calib.gamma[1] = (float)strtod(text, &chrptr); 
d321 1
a321 1
  pal_table.tab.calib.gamma[2] = (float)strtod(text, &chrptr); 
d323 1
a323 1
  pal_table.tab.calib.gamma[3] = (float)strtod(text, &chrptr); 
d325 1
a325 1
  pal_table.tab.calib.k_gcr[0] = (float)strtod(text, &chrptr); 
d327 1
a327 1
  pal_table.tab.calib.k_gcr[1] = (float)strtod(text, &chrptr); 
d329 1
a329 1
  pal_table.tab.calib.k_gen[0] = (float)strtod(text, &chrptr); 
d331 1
a331 1
  pal_table.tab.calib.k_gen[1] = (float)strtod(text, &chrptr); 
d333 1
a333 1
  pal_table.tab.calib.k_mnz = (int)strtod(text, &chrptr);
d335 1
a335 1
  pal_table.tab.calib.deplete1ink[0] = (float)strtod(text, &chrptr); 
d337 1
a337 1
  pal_table.tab.calib.deplete1ink[1] = (float)strtod(text, &chrptr); 
d339 1
a339 1
  pal_table.tab.calib.deplete1ink[2] = (float)strtod(text, &chrptr); 
d341 1
a341 1
  pal_table.tab.calib.deplete1ink[3] = (float)strtod(text, &chrptr);  
d346 1
a346 1
  
d351 1
a351 1
}  
d353 1
a353 1
void 
d360 1
a360 1
void 
d378 2
a379 2
 	pal_table.tab.calib.k_gcr[0] = 0.0f; 
  }	
d393 1
a393 1
 	pal_table.tab.calib.k_gcr[0] = 100.0f; 
d399 1
a399 1
void 
d416 1
a416 1
     } else 
d422 1
a422 1
  else 
d428 1
a428 1
  // This function should read a palette and write those values to the 
d432 1
a432 1
  
d435 1
a435 1
  
d439 1
a439 1
  	
d443 1
a443 1
  
d446 1
a446 1
  
d448 1
a448 1
 
d453 1
a453 1
  
d456 1
a456 1
  
d461 1
a461 1
	
d470 1
a470 1
 
d473 1
a473 1
  sprintf(text, "%3.1f",pal_table.tab.calib.bright[0]);  
d477 1
a477 1
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[0]);  
d479 1
a479 1
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[1]); 
d481 1
a481 1
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[2]); 
d483 1
a483 1
  sprintf(text, "%1.2f",pal_table.tab.calib.gamma[3]); 
d485 1
a485 1
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[0]-temp); 
d487 1
a487 1
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[1]-temp); 
d489 1
a489 1
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[2]-temp); 
d491 1
a491 1
  sprintf(text, "%3.1f",pal_table.tab.calib.deplete1ink[3]-temp);  
d497 2
a498 2
  
  sprintf(text, "%2.2f",pal_table.tab.calib.red_adj_my);  
d500 1
a500 1
  sprintf(text, "%2.2f",pal_table.tab.calib.green_adj_cy); 
d504 2
a505 2
  
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gcr[0]/2.0); 
d507 1
a507 1
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gen[0]/2.0); 
d509 1
a509 1
  sprintf(text, "%i",pal_table.tab.calib.k_mnz);
d521 1
a521 1
  pal_table.tab.calib.bright[0] = (float)strtod(text, &chrptr);  
d526 1
a526 1
  pal_table.tab.calib.gamma[0] = (float)strtod(text, &chrptr);  
d528 1
a528 1
  pal_table.tab.calib.gamma[1] = (float)strtod(text, &chrptr); 
d530 1
a530 1
  pal_table.tab.calib.gamma[2] = (float)strtod(text, &chrptr); 
d532 1
a532 1
  pal_table.tab.calib.gamma[3] = (float)strtod(text, &chrptr); 
d535 1
a535 1
  pal_table.tab.calib.deplete1ink[0] = (float)strtod(text, &chrptr); 
d537 1
a537 1
  pal_table.tab.calib.deplete1ink[1] = (float)strtod(text, &chrptr); 
d539 1
a539 1
  pal_table.tab.calib.deplete1ink[2] = (float)strtod(text, &chrptr); 
d541 2
a542 2
  pal_table.tab.calib.deplete1ink[3] = (float)strtod(text, &chrptr);  
  
d549 1
a549 1
  pal_table.tab.calib.k_gcr[0] = 2.0*(float)strtod(text, &chrptr); 
d551 1
a551 1
  pal_table.tab.calib.k_gen[0] = 2.0*(float)strtod(text, &chrptr); 
d553 1
a553 1
  pal_table.tab.calib.k_mnz = (int)strtod(text, &chrptr);
d556 1
a556 1
  pal_table.tab.calib.red_adj_my = (float)strtod(text, &chrptr);  
d558 1
a558 1
  pal_table.tab.calib.green_adj_cy = (float)strtod(text, &chrptr); 
d562 1
a562 1
 	
d565 1
a565 1
  	
d567 2
a568 2
  pal_table.tab.calib.deplete1ink[0] =  pal_table.tab.calib.deplete1ink[0] + temp; 
  pal_table.tab.calib.deplete1ink[1] =  pal_table.tab.calib.deplete1ink[1] + temp; 
d572 1
a572 1
  
d575 2
a576 2
  pal_table.tab.calib.k_gen[1]  = 100; 
 
d583 1
a583 1
float 
d589 1
a589 1
  
d591 2
a592 2
  
  if (!state)	// if col not selected we need to include black 
d594 1
a594 1
  else 
d596 1
a596 1
  
d602 1
a602 1
  
@


1.1.1.1
log
@This tool is a toolbox application that tunes palettes.  It is based around
the prpalgen utility but is aimed at more inexperienced users.
@
text
@@


1.1.1.2
log
@changed minimum level replacement to display a percentage.
@
text
@d278 1
a278 1
  sprintf(text, "%i", (int)(((double)pal_table.tab.calib.k_mnz/256)*100));
d332 1
a332 1
  pal_table.tab.calib.k_mnz = (int)((strtod(text, &chrptr)/100)*256);
d508 1
a508 1
  sprintf(text, "%i",(int)(((double)pal_table.tab.calib.k_mnz/256)*100) );
d552 1
a552 1
  pal_table.tab.calib.k_mnz = (int)((strtod(text, &chrptr)*256/100));
@


1.1.1.3
log
@fixed a rounding error introduced by converting the minimum value to a percentagge.
@
text
@d278 1
a278 1
  sprintf(text, "%i", (int)((((float)pal_table.tab.calib.k_mnz/256)*100)+0.5));
d504 1
a504 1
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gcr[0]/2); 
d506 1
a506 1
  sprintf(text, "%3.1f",pal_table.tab.calib.k_gen[0]/2); 
d508 1
a508 1
  sprintf(text, "%i",(int)((((float)pal_table.tab.calib.k_mnz/256)*100)+0.5) );
d548 1
a548 1
  pal_table.tab.calib.k_gcr[0] = (float)strtod(text, &chrptr)*2; 
d550 1
a550 1
  pal_table.tab.calib.k_gen[0] = (float)strtod(text, &chrptr)*2; 
@
