head	4.1;
branch	4.1.1;
access;
symbols
	Manager-1_89:4.1.1.1
	Manager-1_88:4.1.1.1
	Manager-1_87:4.1.1.1
	Manager-1_86:4.1.1.1
	Manager-1_85:4.1.1.1
	Manager-1_84:4.1.1.1
	Manager-1_83:4.1.1.1
	Manager-1_82:4.1.1.1
	Manager-1_81:4.1.1.1
	Manager-1_80:4.1.1.1
	Manager-1_79:4.1.1.1
	Manager-1_78:4.1.1.1
	Manager-1_77:4.1.1.1
	Manager-1_76:4.1.1.1
	Manager-1_75:4.1.1.1
	Manager-1_74:4.1.1.1
	Manager-1_73:4.1.1.1
	Manager-1_72:4.1.1.1
	Manager-1_71:4.1.1.1
	Manager-1_70:4.1.1.1
	Manager-1_69:4.1.1.1
	Manager-1_68:4.1.1.1
	Manager-1_67:4.1.1.1
	Manager-1_66:4.1.1.1
	Manager-1_65:4.1.1.1
	Manager-1_64:4.1.1.1
	Manager-1_63:4.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.1.1
	Ursula_RiscPC:4.1.1.1.0.2
	rthornb_UrsulaBuild-19Aug1998:4.1.1.1
	UrsulaBuild_FinalSoftload:4.1.1.1
	rthornb_UrsulaBuild-12Aug1998:4.1.1.1
	aglover_UrsulaBuild-05Aug1998:4.1.1.1
	rthornb_UrsulaBuild-29Jul1998:4.1.1.1
	rthornb_UrsulaBuild-22Jul1998:4.1.1.1
	rthornb_UrsulaBuild-15Jul1998:4.1.1.1
	rthornb_UrsulaBuild-07Jul1998:4.1.1.1
	rthornb_UrsulaBuild-17Jun1998:4.1.1.1
	rthornb_UrsulaBuild-03Jun1998:4.1.1.1
	rthornb_UrsulaBuild-27May1998:4.1.1.1
	Ursula_bp:4.1.1.1
	Ursula:4.1.1.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	Ursula_31Mar1998:4.1.1.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.1.1.0.4
	Daytona_bp:4.1.1.1
	RO_3_71:4.1.3.1
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.47.38;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.47.38;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.57.53;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.24.00;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.28.03;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@The Printer protocol
--- ------- --------

   The printer protocol is used to ensure a uniform procedure by which an
application may print files of any type, allowing for the files to be
printed immediately or queued by other software for printing later. The
printer manager Printers, supplied with RISC OS 3, uses this protocol. The
description below will assume that the dialogue is being conducted between
an application and Printers, to avoid referring repeatedly to "the
destination of the printer protocol."

   The protocol for printing a file is:

         1 The application issues either:

            (a) DataSave    (user dropped file onto Printers icon)
            (b) PrintSave   (user initiated an application 'Print' option)

         2 If Printers is loaded, it replies with PrintError if there is an
      error (the protocol is now over), or PrintFile. (This stage is present
      for compatibility with RISC OS 2 applications.) If Printers is not
      loaded, the message bounces. In this case, the application should do
      one of two things: if it was graphics printing, go ahead and try to
      print anyway; if it was text printing, complain that the printer
      manager is required.

         3 The application does one of the following:

               ignores PrintFile (this is the normal behaviour under RISC
            OS 3);

               replies with WillPrint and prints the file (this is the RISC
            OS 2 behaviour, now deprecated - the application has "jumped the
            queue);

               converts the file, stores the output in Printer$Temp, and
            replies with DataLoad.

      In the first case, the protocol continues as described below.

         4 Printers responds in one of two ways, depending on whether the
      destination printer is in use or not, by issuing either:

            PrintTypeOdd (requesting the application to print the file
                  itself immediately);

            DataSaveAck (requesting the application to send the file to
                  Printers for queuing).

      In the first case, this PrintTypeOdd is NOT broadcast, and does NOT
      contain valid file type or file name fields. These must not be relied
      on.

         5 In the first case, the application may be able to print the file
      itself immediately, in which case it replies with PrintTypeKnown and
      prints the file (the protocol is now over); or it may not, in which
      case it ignores the PrintTypeOdd, and Printers responds with a
      DataSaveAck, so that it can take a copy of the file. 

         6 Either way, the application has received a DataSaveAck from
      Printers. It should save the data it wants printed to the file
      whose name was supplied in the DataSaveAck message, and reply with
      DataLoad.

         7 Printers will respond with DataLoadAck. The file is in the print
      queue.

   At some future time, the file will rise to the top of the queue (unless
the user has removed it manually), and Printers will broadcast a PrintType-
Odd to find an application willing to print the file. (This might be the
same application as the one that queued the file, or a different one.) If
the PrintTypeOdd is not replied to, Printers will issue the SWI

      sprintf (s, "@@PrintType_%3.3X %s", file_type, file_name);
      _swi (Wimp_StartTask, _IN (0), s);

This should be a command that will cause the application to print the file
immediately.

   In response to the PrintSave, the printer manager may reply with
PrintError (0x80144). If the size of this message is 20, this means you are
talking to an old printer manager and it is busy. If the size of the message
is not 20, there is an error number at offset 20 and null terminated error
text at offset 24.

   If the application is doing graphics printing, it should print the file
WITHOUT CALLING Wimp_Poll. Wimp_Poll must NOT be called when using
Printers because when Printers regains control it assumes that the current
file has been printed and moves on to the next entry in the queue.

   The protocol as decribed above is the one implemented by Printers. Future
versions of printer managing software may take the copy by RAM transfer from
applications that support it: to be ready for this, the application should
be prepared for a RAMFetch to be sent in the place of the DataSaveAck
described above. (By ignoring this RAMFetch, they will revert to the
file-based protocol.)
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
