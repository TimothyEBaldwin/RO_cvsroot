head	4.4;
access;
symbols
	FontPrint-1_37:4.4
	FontPrint-1_36:4.4
	FontPrint-1_35:4.3
	FontPrint-1_34:4.3
	FontPrint-1_33:4.2
	FontPrint-1_32:4.2
	FontPrint-1_31:4.2
	FontPrint-1_30:4.2
	FontPrint-1_29:4.2
	FontPrint-1_28:4.2
	FontPrint-1_27:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1
	Ursula_RiscPC:4.1.7.1.0.4
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1
	UrsulaBuild_FinalSoftload:4.1.7.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	Ursula:4.1.7.1.0.2
	Ursula_bp:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	RO_3_71:4.1.3.1
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2015.02.01.10.20.37;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	73DBakx7VNKM7i8y;

4.3
date	2014.07.22.08.23.49;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	MFwpWoWE70dmIlJx;

4.2
date	2003.03.05.14.56.51;	author srevill;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.46.36;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.46.36;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.52.44;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.20.28;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.24.32;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Fix for menu opening position
Menus were being opened at variously wrong offsets - for the iconbar x-width/2-24 and others x-32,y+32 rather than x-64,y+0 like the Style Guide says.

Version 1.36. Tagged as 'FontPrint-1_36'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "swis.h"
#include "main.h"
#include "menu.h"
#define mess(s) message_lookup(&msgs, s)

#define N_ICONMENU mess("nIcon")
#define N_WINDOWMENU mess("nWindow")
#define N_FONTMENU mess("nFont")
#define N_SELNMENU mess("nSeln")
#define M_INFO mess("mInfo")
#define N_MAPMENU  mess("nMap")
#define N_ENCMENU mess("nEnc")
#define N_ADDMENU mess("nAdd")

#define M_QUIT mess("mQuit")

#define M_SELALL mess("mSelAll")
#define M_CLEARSEL mess("mClearSel")

#define M_DOWNLOAD mess("mDownload")
#define M_DELETE mess("mDelete")

#include "fonts.h"
#include "panes.h"
#include "icons.h"

/*
 * Create, post and decode menus.
 */

#define MAP_SIZE 50
#define ENC_SIZE 50

MenuRec iconmenu;
MenuRec windowmenu;
MenuRec selectionmenu;
MenuRec mapmenu;
MenuRec encmenu;

static int pos_info, pos_quit;
static int pos_selnmenu, pos_fontmenu, pos_selectall, pos_clearseln;
static int pos_download, pos_mapmenu, pos_encmenu, pos_delete;

static Bool got_encmenu = FALSE;

static char *fontdata = NULL;
static char *indirdata = NULL;
static int fontdata_size;
static int indirdata_size;

MenuPtr currentmenu;

void post_iconmenu (void)
{
    currentmenu = &iconmenu;
    _swix(Wimp_CreateMenu, _INR(1,3), (int) iconmenu.data, mousex - 64, 96 + 44 * iconmenu.nused);
}

static char *title_font, *title_seln;

void post_windowmenu (void)
{
    FontPtr font;
    Bool typeSame, mapSame, encSame;
    currentmenu = &windowmenu;

    if (!window_enabled)     /* Should instead grey out the whole menu */
        return;

    font = selected_font();
    make_fontmenu();

    untick_menu(&selectionmenu);
    untick_menu(&mapmenu);
    untick_menu(&encmenu);
    set_menu_item_text(&mapmenu, mapmenu.nused - 1, "");

    set_menu_item_text(&windowmenu, pos_selnmenu, num_selected <= 1 ? title_font : title_seln);
    set_menu_title(&selectionmenu, num_selected <= 1 ? title_font : title_seln);

    check_selected_fonts(font, &typeSame, &mapSame, &encSame);

    set_menu_item_active(&windowmenu, pos_selectall, num_fonts(0) > 0);
    set_menu_item_active(&windowmenu, pos_clearseln, num_selected > 0);
    set_menu_item_active(&windowmenu, pos_selnmenu, num_selected > 0);
    set_menu_item_active(&selectionmenu, pos_mapmenu, num_selected > 0);
    set_menu_active(&selectionmenu, num_selected > 0);
    set_menu_active(&mapmenu, num_selected > 0);
    set_menu_active(&encmenu, got_encmenu && num_selected > 0 && typeSame && font->type == Mapped);
    set_menu_item_active(&selectionmenu, pos_encmenu, got_encmenu && num_selected > 0 && typeSame && font->type == Mapped);


    if (font != NULL && typeSame)
    {
        if (font->type == Downloaded)
        {
            tick_menu_item(&selectionmenu, pos_download);
        } else
        {
            if (mapSame)
            {
                int num = menu_string_match(&mapmenu, font->foreign);
                if (num == -1)
                {
                    num = mapmenu.nused - 1;   /* writeable entry */
                    set_menu_item_text(&mapmenu, num, font->foreign);
                }
                tick_menu_item(&selectionmenu, pos_mapmenu);
                tick_menu_item(&mapmenu, num);
            }
            if (got_encmenu && encSame)
            {
                int num = menu_string_match(&encmenu, font->encoding);
                if (num != -1)
                {
                    tick_menu_item(&selectionmenu, pos_encmenu);
                    tick_menu_item(&encmenu, num);
                }
            }
        }
    }

    _swix(Wimp_CreateMenu, _INR(1,3), (int) windowmenu.data, mousex - 64, mousey);
}


void init_iconmenu (void)
{
    if (!start_menu(&iconmenu, 2, N_ICONMENU))
        return;
    pos_info = add_menu_entry(&iconmenu, M_INFO, 0, 0, MFLAGS_NONE, NULL);  /* Should raise error */
    if (pos_info >= 0)
        set_subwindow(&iconmenu, pos_info, handle_of(PANE_INFO));
    pos_quit = add_menu_entry(&iconmenu, M_QUIT, 0, 0, MFLAGS_NONE, NULL);  /* Should raise error */
}

void init_windowmenu (void)
{
    /* Start all the menus so we have the addresses */

    title_font = strsave(N_FONTMENU);
    title_seln = strsave(N_SELNMENU);

    if (!start_menu(&windowmenu, 4, N_WINDOWMENU))
        return;
    if (!start_menu(&selectionmenu, 4, strlen(title_seln) > strlen(title_font) ? title_seln : title_font))
        return;
    if (!start_menu(&encmenu, ENC_SIZE, N_ENCMENU))
        return;
    if (!start_menu(&mapmenu, MAP_SIZE, N_MAPMENU))
        return;

    pos_selnmenu  = add_menu_entry(&windowmenu, N_SELNMENU, 0, 0, MFLAGS_SEETHRU, &selectionmenu);
    pos_selectall = add_menu_entry(&windowmenu, M_SELALL, 0, 0, MFLAGS_NONE, NULL);
    pos_clearseln = add_menu_entry(&windowmenu, M_CLEARSEL, 0, 0, MFLAGS_NONE, NULL);
    pos_fontmenu  = add_menu_entry(&windowmenu, N_ADDMENU, 0, 0, MFLAGS_NONE, NULL);

    pos_download  = add_menu_entry(&selectionmenu, M_DOWNLOAD, 0, 0, MFLAGS_NONE, NULL);
    pos_mapmenu   = add_menu_entry(&selectionmenu, N_MAPMENU, 0, 0, MFLAGS_SEETHRU, &mapmenu);
    pos_encmenu   = add_menu_entry(&selectionmenu, N_ENCMENU, 0, 0, MFLAGS_SEETHRU, &encmenu);
    pos_delete    = add_menu_entry(&selectionmenu, M_DELETE, 0, 0, MFLAGS_NONE, NULL);

/*    add_menu_entry(&mapmenu, "Times-Roman", 0, 0, MFLAGS_NONE, NULL);
    add_menu_entry(&mapmenu, "Helvetica-Medium", 0, 0, MFLAGS_NONE, NULL);
    add_menu_entry(&mapmenu, "Helvetica-Oblique", 0, 0, MFLAGS_NONE, NULL);
    add_menu_entry(&mapmenu, "Zapf-Chancery", 0, 0, MFLAGS_NONE, NULL);
    add_menu_entry(&mapmenu, "", 100, 20, MFLAGS_WRITEABLE, NULL); */

/* Make the mapmenu when we see have the list of fonts from the !Printers */

    make_encmenu();
}

void make_fontmenu (void)
{
    /* Get sizes needed */
    int font_needed, indir_needed;

    _swix(Font_ListFonts, _INR(1,5) | _OUT(3) | _OUT(5), 0, 1<<19, 0, 0, 0, &font_needed, &indir_needed);

    if (font_needed == 0)
        return;           /* no fonts */
    if (font_needed > fontdata_size || fontdata == NULL)
    {
        if (fontdata != NULL)
            free(fontdata);
        fontdata_size = 0;
        fontdata = malloc(font_needed);
        if (fontdata == NULL)
            return;
        fontdata_size = font_needed;
    }
    if (indir_needed > indirdata_size || indirdata == NULL)
    {
        if (indirdata != NULL)
            free(indirdata);
        indirdata_size = 0;
        indirdata = malloc(indir_needed);
        if (indirdata == NULL)
            return;
        indirdata_size = indir_needed;
    }
    /* Now call it for real.  We should not get buffer overflow */

    _swix(Font_ListFonts, _INR(1,5), (int) fontdata, 1<<19, fontdata_size, (int) indirdata, indirdata_size);

    set_submenu(&windowmenu, pos_fontmenu, NULL, fontdata);
}


/* If Printers$Dir is not set, or if there is no PS.Adobe directory, then this will
 * leave an empty menu.  The correct action is to attempt to build this menu each time we
 * query the printer, until we succeed.  Finding a valid directory, with no entries, is
 * considered to be failure.
 */

void make_encmenu (void)
{
    char buf[1024], *bufp;
    int num, next = 0;

    if (got_encmenu) return;

    free_menu_items(&encmenu);    /* Can be done repeatedly */

    strcpy(buf, "Adobe.");
    bufp = buf + strlen(buf);
    do
    {
        if (_swix(OS_GBPB, _INR(0,6) | _OUTR(3,4), 9, "Printers:PS.Adobe", bufp, 1, next, sizeof(buf) - 6, 0, &num, &next))
            goto error;
        if (num > 0)
           add_menu_entry(&encmenu, buf, 0, 0, MFLAGS_NONE, NULL);
    } while (next != -1);

error:
    if (encmenu.nused == 0)
        add_menu_entry(&encmenu, "", 0, 0, MFLAGS_NONE, NULL);
    else
        got_encmenu = TRUE;
}


static int compare (const void *one, const void *two)
{
    return strcmp(*(char **) one, *(char **) two);
}

void make_mapmenu (void)
{
    char *ptrs[ENC_SIZE];
    int i = 0, j;
    FontPtr font;

    free_menu_items(&mapmenu);

    for (font = firstFont; font && i < MAP_SIZE - 1; font = font->next)
        if (font->type == Mapped)
            ptrs[i++] = font->foreign;
    if (i > 0)
    {
        qsort((void *)ptrs, (size_t) i, sizeof(char *), compare);

        add_menu_entry(&mapmenu, ptrs[0], 0, 0, MFLAGS_NONE, NULL);
        for (j = 1; j < i; j++)
            if (strcmp(ptrs[j], ptrs[j - 1]))
                add_menu_entry(&mapmenu, ptrs[j], 0, 0, MFLAGS_NONE, NULL);
    }
    add_menu_entry(&mapmenu, "", 100, 20, MFLAGS_WRITEABLE, NULL);
}


static void decode_iconmenu (int *buf);
static void decode_windowmenu (int *buf);
static void decode_selectionmenu (int *buf);
static void decode_mapmenu (int *buf);
static void decode_encmenu (int *buf);
static void decode_fontmenu (int *buf);


void decode_menus (int *buf)
{
    if (currentmenu == &iconmenu)
        decode_iconmenu(buf);
    else if (currentmenu == &windowmenu)
        decode_windowmenu(buf);
}


static void decode_iconmenu (int *buf)
{
    _swix(Wimp_GetPointerInfo, _IN(1), (int) info);

    if (*buf == pos_quit)
    {
        _swix(Wimp_CloseDown, 0);
        exit(0);
    }

    if (info[2] & 1)
        post_iconmenu();      /* Deal with ADJUST-click */
}


static void decode_windowmenu (int *buf)
{
    _swix(Wimp_GetPointerInfo, _IN(1), (int) info);

    if (*buf == pos_selnmenu)
        decode_selectionmenu(buf + 1);
    else if (*buf == pos_selectall)
    {
        select_all();
        update_win();
    }
    else if (*buf == pos_clearseln)
    {
        deselect_all();
        update_win();
    }
    else if (*buf == pos_fontmenu)
        decode_fontmenu(buf + 1);

    if (info[2] & 1)
        post_windowmenu();    /* Deal with ADJUST-click */
}

static void decode_selectionmenu (int *buf)
{
    if (*buf == -1)
        return;
    else if (*buf == pos_download)
    {
        set_all_selected_to(Downloaded, NULL);
        update_win();
    }
    else if (*buf == pos_mapmenu)
        decode_mapmenu(buf + 1);
    else if (*buf == pos_encmenu)
        decode_encmenu(buf + 1);
    else if (*buf == pos_delete)
    {
        FontPtr font;
        for (font = firstFont; font; font = font->next)
            if (font->selected)
                remove_font(font);
        fix_extent(FALSE);
        force_redraw_win(PANE_LIST);
    }
}

static void decode_mapmenu (int *buf)
{
    if (*buf == -1)
        return;
    if (*buf >= 0 && *buf < mapmenu.nused)
    {
        set_all_selected_to(Mapped, read_menu_item_text(&mapmenu, *buf));
        update_win();
    }
}

static void decode_encmenu (int *buf)
{
    if (*buf == -1)
        return;
    if (*buf >= 0 && *buf < encmenu.nused)
    {
        set_all_selected_to_enc(read_menu_item_text(&encmenu, *buf));
        update_win();
    }
}


static void decode_fontmenu (int *buf)
{
    static char *result = NULL;
    static int result_len = 0;
    int len;
    char *resp;
    FontPtr there;

    if (*buf == -1 || fontdata == NULL)
        return;
    _swix(Font_DecodeMenu, _INR(0,3) | _OUT(4), 0, (int) fontdata, (int) buf, 0, &len);

    if (len == 0)
        return;
    if (len > result_len)
    {
        if (result != NULL)
            free(result);
        result = malloc(len + 1);
        if (result == NULL)
            return;
        result_len = len;
    }

    _swix(Font_DecodeMenu, _INR(0,4), 0, (int) fontdata, (int) buf, (int) result, result_len);

    resp = result;
    if (*resp++ != '\\' && *resp++ != 'F')
        return;
    while (*resp > 31 && *resp != '\\')
        resp++;
    *resp = 0;

    there = find_font(result + 2);
    if (there)
    {
        deselect_all();
        select_font(there);
        tempsel = TRUE;
        ensure_visible(icon_y_pos(there), icon_y_pos(there) + icon_distance);
    } else
    {
        there = add_font(lastFont, result + 2, NULL, NULL);
        if (there)
        {
            deselect_all();
            select_font(there);
            tempsel = TRUE;
            fix_extent(TRUE);
        }
    }
    force_redraw_win(PANE_LIST);
}
@


4.3
log
@Use NoMem global message to say there isn't enough memory
Get version string from messages file.
Resolve the trivial compiler warnings.
Tested briefly, still works.

Version 1.34. Tagged as 'FontPrint-1_34'
@
text
@d70 1
a70 1
    _swix(Wimp_CreateMenu, _INR(1,3), (int) iconmenu.data, mousex - menuwidth(&iconmenu) / 2 - 24, 96 + 44 * iconmenu.nused);
d137 1
a137 1
    _swix(Wimp_CreateMenu, _INR(1,3), (int) windowmenu.data, mousex - 32, mousey + 32);
@


4.2
log
@Changes to allow it to be compiled with a vaguely recent compiler.
Sprites 23 removed.
RISC OS 5 Sprites and Sprites22 added.

Version 1.27. Tagged as 'FontPrint-1_27'
@
text
@d67 1
a67 1
void post_iconmenu ()
d75 1
a75 1
void post_windowmenu ()
d141 1
a141 1
void init_iconmenu ()
d151 1
a151 1
void init_windowmenu ()
d188 1
a188 1
void make_fontmenu ()
d263 1
a263 1
void make_mapmenu ()
@


4.1
log
@Initial revision
@
text
@d15 1
d70 1
a70 5
    swi(Wimp_CreateMenu,
        R1, (int) iconmenu.data,
        R2, mousex - menuwidth(&iconmenu) / 2 - 24,
        R3, 96 + 44 * iconmenu.nused,
        END);
d137 1
a137 5
    swi(Wimp_CreateMenu,
        R1, (int) windowmenu.data,
        R2, mousex - 32,
        R3, mousey + 32,
        END);
d193 1
a193 3
    swi(Font_ListFonts,
        R2, 1<<19,  R1, 0,  R3, 0,  R4, 0,  R5, 0,
        OUT,  R3, &font_needed,  R5, &indir_needed, END);
d219 1
a219 7
    swi(Font_ListFonts,
        R2, 1<<19,
        R1, (int) fontdata,
        R3, fontdata_size,
        R4, (int) indirdata,
        R5, indirdata_size,
        END);
d235 1
a235 1
    
d242 1
a242 1
    do 
d244 1
a244 3
        if (swi(OS_GBPB,  R0, 9,  R1, "Printers:PS.Adobe",  R2, bufp,  R3, 1,
                R4, next,  R5, sizeof(buf) - 6,  R6, 0,
                OUT,  R3,  &num,  R4, &next,  END))
d306 1
a306 1
    swi(Wimp_GetPointerInfo,  R1, (int) info,  END);
d310 1
a310 1
        swi(Wimp_CloseDown, END);
d321 1
a321 1
    swi(Wimp_GetPointerInfo,  R1, (int) info,  END);
d396 1
a396 1
    
d399 1
a399 6
    swi(Font_DecodeMenu,
        R0, 0,
        R1, (int) fontdata,
        R2, (int) buf,
        R3, 0,
        OUT, R4, &len, END);
d413 2
a414 8
    swi(Font_DecodeMenu,
        R0, 0,
        R1, (int) fontdata,
        R2, (int) buf,
        R3, (int) result,
        R4, result_len,
        END);
    
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
