head	4.2;
access;
symbols
	FontPrint-1_37:4.2
	FontPrint-1_36:4.2
	FontPrint-1_35:4.2
	FontPrint-1_34:4.2
	FontPrint-1_33:4.2
	FontPrint-1_32:4.2
	FontPrint-1_31:4.2
	FontPrint-1_30:4.2
	FontPrint-1_29:4.2
	FontPrint-1_28:4.2
	FontPrint-1_27:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1
	Ursula_RiscPC:4.1.7.1.0.4
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1
	UrsulaBuild_FinalSoftload:4.1.7.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	Ursula:4.1.7.1.0.2
	Ursula_bp:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	RO_3_71:4.1.3.1
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2003.03.05.14.56.51;	author srevill;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.46.37;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.46.37;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.52.46;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.20.29;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.24.33;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Changes to allow it to be compiled with a vaguely recent compiler.
Sprites 23 removed.
RISC OS 5 Sprites and Sprites22 added.

Version 1.27. Tagged as 'FontPrint-1_27'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Menu builder functions
 */

#include "menuwrap.h"
#include <stdlib.h>
#include <string.h>

extern char *strsave (char *s);

char *start_menu (MenuPtr menu, int nentries, char *title)
{
    menu->indir_title = 0;
    menu->nentries = nentries;
    menu->nused = 0;
    menu->data = malloc(menusize(nentries));
    if (menu->data == NULL)
        return NULL;
    set_menu_title(menu, title);
    menu->data[12] = MTITLE_FORE;
    menu->data[13] = MTITLE_BACK;
    menu->data[14] = MWORK_FORE;
    menu->data[15] = MWORK_BACK;
    {
        int *wordp = (int *) menu->data;
        wordp[4] = strlen(title) * 16 + 12;     /* Width */
        wordp[5] = 44;    /* Standard height */
        wordp[6] = 0;     /* No gap */
    }
    return menu->data;
}


/*
 * Add a menu entry.  The item string is copied to a malloced buffer.  Size may be zero,
 * in which case strlen(item) will be used.  Flags has the 'last' bit orred in
 * as appropriate.  Submenu may be NULL for 'no submenu'.
 * The routine returns the index of the entry, starting at 0, otherwise the
 * constant -2 if it failed.  (The choice of -2 was made because the int
 * array returned from menu selections is terminated with -1.)
 */

int add_menu_entry (MenuPtr menu,
                    char *item,       /* item text to be copied.  Use "" for empty */
                    int size,         /* size in chars of buffer, or 0 for length of 'item' */
                    int width,        /* width in characters, or 0 to calculate from 'size' */
                    int flags,
                    MenuPtr submenu)
{
    char *itemp;
    int *wordp = (int *) menu->data;
    if (wordp == NULL || menu->nused == menu->nentries)
        return -2;

    if (size == 0)
        size = strlen(item);
    itemp = malloc(size + 1);
    if (itemp == NULL)
        return -2;
    strncpy(itemp, item, size + 1);

    if (width == 0)
        width = size;
    if (width * 16 + 12 > wordp[4])
        wordp[4] = width * 16 + 12;

    wordp += 7 + menu->nused * 6;
    wordp[0] = flags | MFLAGS_LAST;
    if (menu->indir_title && menu->nused == 0)
        wordp[0] |= MFLAGS_INDIRTITLE;
    wordp[1] = submenu ? (int) submenu->data : -1;
    wordp[2] = IFLAGS;
    wordp[3] = (int) itemp;
    wordp[4] = 0;      /* no validation */
    wordp[5] = size;
    if (menu->nused != 0)
        wordp[-6] &= ~MFLAGS_LAST;
    return menu->nused++;
}


/*
 * Free the menu items in a menu.  The menu can then be reused.
 */

void free_menu_items (MenuPtr menu)
{
    int num;
    int *wordp = ((int *) menu->data) + 7;
    for (num = menu->nused; num > 0; wordp += 6, num--)
        if (wordp[3] != 0)
            free((char *) (wordp[3]));
    menu->nused = 0;
}


/*
 * Free the storage associated with a menu.  You must then
 * call start_menu() before re-using it.
 */

void free_menu (MenuPtr menu)
{
    free_menu_items(menu);
    free(menu->data);
    menu->data = NULL;
    menu->nentries = 0;
}


/*
 * Replace the submenu entry of a menu.  Useful if you have to
 * relocate the menu (realloc for example).  Ignores entry numbers
 * that are too big.  Numbers start at 0.
 * You can instead pass NULL as the submenu, and pass a plain char *
 * pointer to a 'real' wimp menu structure.  For no submenu, pass
 * two NULLs.
 */

void set_submenu (MenuPtr menu, int entry, MenuPtr submenu, char *data)
{
    int *wordp;
    char *menudata = submenu ? submenu->data : data;
    if (entry >= menu->nused)
        return;
    wordp = (int *) menu->data;
    wordp += 7 + 6 * entry;
    wordp[1] = menudata ? (int) menudata : -1;
}

/*
 * As above, but for attaching a window to a menu pulloff.
 */

void set_subwindow (MenuPtr menu, int entry, int handle)
{
    int *wordp;
    if (entry >= menu->nused)
        return;
    wordp = (int *) menu->data;
    wordp += 7 + 6 * entry;
    wordp[1] = handle;
}


/*
 * Grow a menu to be at least 'newsize' entries long.  It is
 * up to the caller to fix up any menus which have this as a
 * submenu.  The new address is returned to assist this.
 * Returns NULL on failure.
 */

char *grow_menu (MenuPtr menu, int newsize)
{
    if (newsize <= menu->nentries)
        return menu->data;            /* no work */
    menu->nentries = newsize;
    menu->data = realloc(menu->data, menusize(newsize));
    return menu->data;
}


void untick_menu (MenuPtr menu)
{
    int i;
    int *wordp = ((int *)menu->data) + 7;
    for (i = 0; i < menu->nused; i++, wordp+=6)
        *wordp &= ~MFLAGS_TICKED;
}

void tick_menu_item (MenuPtr menu, int item)
{
    if (item >= menu->nused)
        return;
    else
    {
        int *wordp = ((int *) menu->data) + 7 + item * 6;
        *wordp |= MFLAGS_TICKED;
    }
}

int menu_string_match (MenuPtr menu, char *text)
{
    int *wordp = ((int *)menu->data) + 7;
    int i;
    for (i = 0; i < menu->nused; i++, wordp+=6)
        if (strncmp(text, (char *)(wordp[3]), wordp[5]) == 0)
            return i;
    return -1;
}

void set_menu_title (MenuPtr menu, char *text)
{
    int *wordp = (int *) menu->data;
    if (wordp == NULL)
        return;

    /* Free old title if indirected */
    if (menu->indir_title)
        free((char *) (wordp[0]));

    /* Check if new title needs to be indirected */
    menu->indir_title = strlen(text) > 12;
    if (menu->indir_title)
    {
        wordp[0] = (int) strsave(text);
        wordp[1] = 0;
        wordp[2] = strlen(text) + 1;
        if (menu->nused)
            wordp[7] |= MFLAGS_INDIRTITLE;
    }
    else
    {
        strncpy(menu->data, text, 12);
        if (menu->nused)
            wordp[7] &= ~MFLAGS_INDIRTITLE;
    }
}

void set_menu_item_text (MenuPtr menu, int item, char *text)
{
    int *wordp = ((int *)menu->data) + 7 + item * 6;
    if (item >= menu->nused)
        return;
    strncpy((char *)(wordp[3]), text, wordp[5]);
}

char *read_menu_item_text (MenuPtr menu, int item)
{
    int *wordp = ((int *)menu->data) + 7 + item * 6;
    if (item >= menu->nused)
        return NULL;
    return (char *)(wordp[3]);
}

void set_menu_item_active(MenuPtr menu, int item, int on)
{
    int *wordp = ((int *)menu->data) + 7 + item * 6;
    if (item > menu->nused)
        return;
    if (on)
        wordp[2] &= ~IFLAGS_SHADED;
    else
        wordp[2] |= IFLAGS_SHADED;
}

void set_menu_active(MenuPtr menu, int on)
{
    int item, *wordp = ((int *)menu->data) + 7;
    for (item = 0; item < menu->nused; item++, wordp+=6)
        if (on)
            wordp[2] &= ~IFLAGS_SHADED;
        else
            wordp[2] |= IFLAGS_SHADED;
}

@


4.1
log
@Initial revision
@
text
@d23 1
d110 1
a110 1
 
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
