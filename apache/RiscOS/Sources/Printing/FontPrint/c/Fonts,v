head	4.2;
access;
symbols
	FontPrint-1_37:4.2
	FontPrint-1_36:4.2
	FontPrint-1_35:4.2
	FontPrint-1_34:4.2
	FontPrint-1_33:4.1.1.1
	FontPrint-1_32:4.1.1.1
	FontPrint-1_31:4.1.1.1
	FontPrint-1_30:4.1.1.1
	FontPrint-1_29:4.1.1.1
	FontPrint-1_28:4.1.1.1
	FontPrint-1_27:4.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.7.1
	Ursula_RiscPC:4.1.7.1.0.4
	rthornb_UrsulaBuild-19Aug1998:4.1.7.1
	UrsulaBuild_FinalSoftload:4.1.7.1
	rthornb_UrsulaBuild-12Aug1998:4.1.7.1
	aglover_UrsulaBuild-05Aug1998:4.1.7.1
	rthornb_UrsulaBuild-29Jul1998:4.1.7.1
	rthornb_UrsulaBuild-22Jul1998:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.7.1
	rthornb_UrsulaBuild-07Jul1998:4.1.7.1
	rthornb_UrsulaBuild-17Jun1998:4.1.7.1
	rthornb_UrsulaBuild-03Jun1998:4.1.7.1
	rthornb_UrsulaBuild-27May1998:4.1.7.1
	rthornb_UrsulaBuild-21May1998:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.7.1
	Ursula:4.1.7.1.0.2
	Ursula_bp:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	RO_3_71:4.1.3.1
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2014.07.22.08.23.49;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	MFwpWoWE70dmIlJx;

4.1
date	96.11.05.09.46.36;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.46.36;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.52.38;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.20.22;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.24.29;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Use NoMem global message to say there isn't enough memory
Get version string from messages file.
Resolve the trivial compiler warnings.
Tested briefly, still works.

Version 1.34. Tagged as 'FontPrint-1_34'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "main.h"
#include "fonts.h"
#include "icons.h"

FontPtr firstFont = NULL;
FontPtr lastFont = NULL;
int num_selected = 0;

static FontPtr allocate_font (void)
{
    FontPtr font = (FontPtr) calloc(1, sizeof(FontRec));
    if (font == NULL)
        return NULL;
    font->type = Downloaded;
    font->selected = FALSE;
    font->prev = font->next = NULL;
    return font;
}

static void free_font (FontPtr font)
{
    (void) free((char *) font);
}

/*
 * Add a font to the list.  Use after == NULL for the start
 * of the list. use foreign == NULL for a download font.
 * Return ptr to the new font, or NULL if it failed.
 */

FontPtr add_font (FontPtr after, char *local, char *foreign, char *encoding)
{
    FontPtr newfont = allocate_font();
    if (newfont == NULL)
        return NULL;
    /* The local and foreign fields of the new font will be zeroed */
    strncpy(newfont->local, local, FONTNAMEMAX - 1);
    if (foreign)
    {
        strncpy(newfont->foreign, foreign, FOREIGNNAMEMAX - 1);
        newfont->type = Mapped;
    }
    if (encoding)
        strncpy(newfont->encoding, encoding, ENCODINGNAMEMAX - 1);

    if (firstFont == NULL)
        after = NULL;
    if (after == NULL)
    {
        newfont->next = firstFont;
        newfont->prev = NULL;
        if (firstFont)
        {
            firstFont->prev = newfont;
            firstFont = newfont;
        } else
            firstFont = lastFont = newfont;
    } else if (after == lastFont)
    {
        newfont->next = NULL;
        newfont->prev = lastFont;
        lastFont->next = newfont;
        lastFont = newfont;
    } else
    {
        newfont->next = after->next;
        newfont->prev = after;
        if (after->next != NULL)
            after->next->prev = newfont;
        after->next = newfont;
    }
    num_fonts(+1);
    return newfont;
}


void remove_font (FontPtr font)
{
    FontPtr before = font->prev;
    FontPtr after  = font->next;
    if (before != NULL)
        before->next = after;
    if (after  != NULL)
        after->prev = before;
    if (font == firstFont)
        firstFont = after;
    if (font == lastFont)
        lastFont = before;
    if (font->selected)
        num_selected--;
    free_font(font);
    num_fonts(-1);
}

void select_font (FontPtr font)
{
    if (font->selected == FALSE)
        num_selected++;
    font->selected = TRUE;
}

void toggle_font (FontPtr font)
{
    if (font->selected == FALSE)
        num_selected++;
    else
        num_selected--;
    font->selected = !font->selected;
}

void select_all (void)
{
    FontPtr f = firstFont;
    num_selected = 0;
    while (f)
    {
        f->selected = TRUE;
        num_selected++;
        f = f->next;
    }
    if (num_selected)
        tempsel = FALSE;
}

void deselect_all (void)
{
    FontPtr f = firstFont;
    while (f)
    {
        f->selected = FALSE;
        f = f->next;
    }
    num_selected = 0;
}

int num_fonts (int n)
{
    static int num = 0;
    num += n;
    return num;
}

/*
 * Return pointer to the FIRST selected font.
 */

FontPtr selected_font (void)
{
    FontPtr font;
    for (font = firstFont; font; font = font->next)
        if (font->selected)
            return font;
    return NULL;
}

void check_selected_fonts (FontPtr this, Bool *sameType, Bool *sameMap, Bool *sameEnc)
{
    FontPtr font;
    *sameType = TRUE;
    *sameMap = TRUE;
    *sameEnc = TRUE;

    for (font = firstFont; font; font = font->next)
    {
        if (font == this)
            continue;
        if (!font->selected)
            continue;
        if (font->type != this->type)
        {
            *sameType = FALSE;
            return;           /* sameMap and sameEnc are meaningless */
        }
        if (font->type == Mapped)
        {
            if (strcmp(font->foreign, this->foreign) != 0)
                *sameMap = FALSE;
            if (strcmp(font->encoding, this->encoding) != 0)
                *sameEnc = FALSE;
        }
    }
}

#if 0
Bool all_selected_fonts_match (FontPtr this)
{
    FontPtr font;
    for (font = firstFont; font; font = font->next)
    {
        if (!font->selected)
            continue;
        if (font->type != this->type)
            return FALSE;
        if (this->type == Mapped &&
            strcmp(font->foreign, this->foreign) != 0)
            return FALSE;
    }
    return TRUE;
}
#endif

void set_all_selected_to_enc (char *encoding)
{
    FontPtr font;
    for (font = firstFont; font; font = font->next)
        if (font->selected && font->type == Mapped)
            strncpy(font->encoding, encoding, ENCODINGNAMEMAX - 1);
}

void set_all_selected_to (EntryType type, char *foreign)
{
    FontPtr font;
    for (font = firstFont; font; font = font->next)
    {
        if (font->selected)
        {
            font->type = type;
            if (type == Mapped)
                strncpy(font->foreign, foreign, FOREIGNNAMEMAX - 1);
        }
    }
}

FontPtr find_font (char *local)
{
    FontPtr font;
    for (font = firstFont; font; font = font->next)
        if (strcmp(font->local, local) == 0)
            return font;
    return NULL;
}
@


4.1
log
@Initial revision
@
text
@d23 1
a23 1
static FontPtr allocate_font ()
d125 1
a125 1
void select_all ()
d139 1
a139 1
void deselect_all ()
d161 1
a161 1
FontPtr selected_font ()
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
