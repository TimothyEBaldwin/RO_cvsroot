head	1.3;
access;
symbols
	EDIDDecode-1_24:1.3
	EDIDDecode-1_23:1.2
	EDIDDecode-1_22:1.2
	EDIDDecode-1_21:1.1;
locks; strict;
comment	@# @;


1.3
date	2018.07.14.15.06.34;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	aPk9SdcVXWVQe7KA;

1.2
date	2012.07.07.23.41.07;	author jlee;	state Exp;
branches;
next	1.1;
commitid	0zpY8DqtW1ILJGbw;

1.1
date	2012.07.07.23.33.47;	author jlee;	state Exp;
branches;
next	;
commitid	z1PDF9oI7qvfHGbw;


desc
@@


1.3
log
@Fix handle leak on error
EDIDDecocde.c: Don't leak file on error.
LinkedList.c: Remove pointless check of listItem being non NULL, having used it several times earlier in the function.

Version 1.24. Tagged as 'EDIDDecode-1_24'
@
text
@/* Copyright 2012 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include <stdlib.h>
#include "LinkedList.h"


int LinkedList_Init(PLINKED_LISTBASE Base)
{
	Base->Entries = 0;
	Base->FirstEntry = NULL;
	Base->LastEntry = NULL;
	return 0;
}
#if 0
/*----------------------------------------------------------------------------*/
int LinkedList_AddEntry(PLINKED_LISTBASE Base, void *Item)
{
	/* Add to end of list*/
	PLINKED_LIST listItem;

	listItem = Base->LastEntry;
	Base->LastEntry = (PLINKED_LIST)calloc(sizeof(LINKED_LIST), 1);
	Base->LastEntry->Previous = listItem;
	Base->LastEntry->This = Item;
	Base->LastEntry->Next = NULL;

	if (listItem != NULL)
	{
		listItem->Next = Base->LastEntry;
	}
	else
	{
		Base->FirstEntry = Base->LastEntry;
	}
	Base->Entries ++;
	/* debug_log("\nAdded list entry, now %d", Base->Entries);*/
	return 0;
}
#endif
/*----------------------------------------------------------------------------*/
void LinkedList_AddEntry(PLINKED_LISTBASE Base, void *Item)
{
	/* Add to start of list */
	PLINKED_LIST listItem;

	listItem = Base->FirstEntry;
	Base->FirstEntry = (PLINKED_LIST)calloc(sizeof(LINKED_LIST), 1);
	Base->FirstEntry->Previous = NULL;
	Base->FirstEntry->This = Item;
	Base->FirstEntry->Next = listItem;
	if (listItem != NULL)
	{
		listItem->Previous = Base->FirstEntry;
	}
	else
	{
		Base->LastEntry = Base->FirstEntry;
	}
	Base->Entries ++;
	/* debug_log("\nAdded list entry, now %d", Base->Entries);*/
}
/*----------------------------------------------------------------------------*/
PLINKED_LIST LinkedList_RemoveEntry(PLINKED_LISTBASE Base,PLINKED_LIST listItem)
{
	PLINKED_LIST Listentry = listItem->Next;
	if (listItem->Previous != NULL)
	{
		listItem->Previous->Next = listItem->Next;
	}
	else
	{
		if (listItem->Next != NULL)
		{
			Base->FirstEntry = listItem->Next;
		}
	}
	if (listItem->Next != NULL)
	{
		listItem->Next->Previous = listItem->Previous;
	}
	else
	{
		if (listItem->Previous != NULL)
		{
			Base->LastEntry = listItem->Previous;
		}
	}

	if ((listItem->Next == NULL) && (listItem->Previous == NULL))
	{
		Base->FirstEntry = NULL;
		Base->LastEntry = NULL;
	}
	/*debug_log("\nfree(listItem");*/
	free(listItem);
	Base->Entries --;
	/*debug_log("\nRemoved list entry, now %d", Base->Entries);*/
	return Listentry;
}
/*----------------------------------------------------------------------------*/
PLINKED_LIST LinkedList_GetEntry(PLINKED_LISTBASE Base, int entry)
{
	PLINKED_LIST listentry;
	int current = 0;
	if (((Base->Entries) < entry) || (entry < 0))
	{
		return NULL;
	}
	listentry = Base->FirstEntry;

	while ((Base->Entries - current) != entry)
	{
		listentry = listentry->Next;
		current++;
	}
	return listentry;
}
@


1.2
log
@Incorporate Willi Theiss's changes
Detail:
  c/EDIDDecode, c/LinkedList - Several source tweaks by Willi Theiss to tidy up the code a bit:
  * Use tabs instead of spaces for formatting
  * #include "h.linkedlist" -> "linkedlist.h"
  * Added MAXMODENAMESIZE #define to get rid of some magic numbers
  * Trim dead code and fix assorted compiler warnings
  * Add support for 16:10 aspect ratio
  * Only generate modes which are within the monitors max pixel rate
Admin:
  Builds, but untested


Version 1.22. Tagged as 'EDIDDecode-1_22'
@
text
@d108 1
a108 5
	if (listItem != NULL)
	{
		free(listItem);
	}
//	listItem = NULL;
@


1.1
log
@Add EDIDDecode tool to source control
Detail:
  Perhaps better known as "Decode EDID", EDIDDecode is a tool originally written by Will Ling at Castle, for converting raw EDID dumps to RISC OS mode files
  According to Will it's based on the VESA Excel spreadsheet for the GTF calculations, and as much information as was available on the Internet at the time (a lot less than what's available now).
  Apart from the addition of the Castle licence text and a fresh makefile, this is the original code as received from Will
Admin:
  Builds, but untested


Version 1.21. Tagged as 'EDIDDecode-1_21'
@
text
@d17 1
a17 1
#include "h.LinkedList"
a19 4
#ifndef EXISTS
 #define EXISTS != NULL
#endif

d22 4
a25 4
  Base->Entries = 0;
  Base->FirstEntry = NULL;
  Base->LastEntry = NULL;
  return 0;
d27 1
d29 24
a52 23
//int LinkedList_AddEntry(PLINKED_LISTBASE Base,void* Item)
//{
// /* Add to end of list*/
//  PLINKED_LIST listItem;
//
//  listItem = Base->LastEntry;
//  Base->LastEntry = (PLINKED_LIST)calloc(sizeof(LINKED_LIST),1);
//  Base->LastEntry->Previous = listItem;
//  Base->LastEntry->This = Item;
//  Base->LastEntry->Next = NULL;
//
//  if(listItem != NULL)
//    {
//     listItem->Next=Base->LastEntry;
//    }
//    else
//    {
//     Base->FirstEntry=Base->LastEntry;
//    }
//  Base->Entries ++;
// /* debug_log("\nAdded list entry, now %d", Base->Entries);*/
//return 0;
//}
d54 1
a54 1
void LinkedList_AddEntry(PLINKED_LISTBASE Base,void* Item)
d56 2
a57 18
  /*Add to start of list*/
  PLINKED_LIST listItem;

  listItem = Base->FirstEntry;
  Base->FirstEntry = (PLINKED_LIST)calloc(sizeof(LINKED_LIST),1);
  Base->FirstEntry->Previous = NULL;
  Base->FirstEntry->This = Item;
  Base->FirstEntry->Next = listItem;
  if(listItem != NULL)
    {
     listItem->Previous=Base->FirstEntry;
    }
    else
    {
     Base->LastEntry=Base->FirstEntry;
    }
  Base->Entries ++;
 /* debug_log("\nAdded list entry, now %d", Base->Entries);*/
d59 15
d78 38
a115 37
   PLINKED_LIST Listentry = listItem->Next;
    if(listItem->Previous EXISTS)
      {
       listItem->Previous->Next = listItem->Next;
      }
      else
      {
       if(listItem->Next EXISTS)
         {
         Base->FirstEntry=listItem->Next;
         }
      }
    if(listItem->Next EXISTS)
      {
       listItem->Next->Previous = listItem->Previous;
      }
      else
      {
       if(listItem->Previous EXISTS)
         {
         Base->LastEntry=listItem->Previous;
         }
       }

      if((listItem->Next == NULL)&&(listItem->Previous == NULL)){
         Base->FirstEntry = NULL;
         Base->LastEntry = NULL;
      }
      /*debug_log("\nfree(listItem");*/
      if(listItem EXISTS)
       {
        free(listItem);
       }
     // listItem = NULL;
      Base->Entries --;
      /*debug_log("\nRemoved list entry, now %d", Base->Entries);*/
return Listentry;
d118 1
a118 5
PLINKED_LIST LinkedList_GetEntry(PLINKED_LISTBASE Base,int entry)
{
PLINKED_LIST listentry;
int current = 0;
if(((Base->Entries)<entry)||(entry<0))
d120 14
a133 1
return NULL;
a134 12
listentry=Base->FirstEntry;

while((Base->Entries-current) != entry)
{
listentry=listentry->Next;
current++;
}
return listentry;
}



@

