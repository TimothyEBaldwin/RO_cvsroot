head	1.1;
access;
symbols
	EDIDDecode-1_24:1.1
	EDIDDecode-1_23:1.1
	EDIDDecode-1_22:1.1
	EDIDDecode-1_21:1.1;
locks; strict;
comment	@# @;


1.1
date	2012.07.07.23.33.50;	author jlee;	state Exp;
branches;
next	;
commitid	z1PDF9oI7qvfHGbw;


desc
@@


1.1
log
@Add EDIDDecode tool to source control
Detail:
  Perhaps better known as "Decode EDID", EDIDDecode is a tool originally written by Will Ling at Castle, for converting raw EDID dumps to RISC OS mode files
  According to Will it's based on the VESA Excel spreadsheet for the GTF calculations, and as much information as was available on the Internet at the time (a lot less than what's available now).
  Apart from the addition of the Castle licence text and a fresh makefile, this is the original code as received from Will
Admin:
  Builds, but untested


Version 1.21. Tagged as 'EDIDDecode-1_21'
@
text
@/* Copyright 2012 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef LinkedList_h
#define LinkedList_h LinkedList_h


typedef struct LINKED_LIST  LINKED_LIST;

struct LINKED_LIST{
        LINKED_LIST*   Previous;
        void*   This;
        LINKED_LIST*   Next;
        //int            EntryNumber;
};
typedef LINKED_LIST *PLINKED_LIST;

typedef struct _LINKED_LISTBASE{
        int            Entries;
        //int            CurrentEntry;
        //LINKED_LIST*   CurrentEntryPointer;
        LINKED_LIST*   FirstEntry;
        LINKED_LIST*   LastEntry;
}LINKED_LISTBASE, *PLINKED_LISTBASE;

int LinkedList_Init(PLINKED_LISTBASE Base);

void LinkedList_AddEntry(PLINKED_LISTBASE Base,void* Item);

PLINKED_LIST LinkedList_RemoveEntry(PLINKED_LISTBASE Base,PLINKED_LIST listItem);

//int LinkedList_GotoEntry(PLINKED_LISTBASE Base,int entry);

PLINKED_LIST LinkedList_GetEntry(PLINKED_LISTBASE Base,int entry);

#endif










@
