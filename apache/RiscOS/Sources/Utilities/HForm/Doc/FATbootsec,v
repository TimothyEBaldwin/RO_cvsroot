head	1.1;
access;
symbols
	HForm-2_75:1.1
	HForm-2_74:1.1
	HForm-2_73:1.1
	HForm-2_72:1.1
	HForm-2_71:1.1
	HForm-2_70:1.1
	HForm-2_69:1.1
	HForm-2_68:1.1
	HForm-2_67:1.1
	HForm-2_66:1.1
	HForm-2_65:1.1
	HForm-2_64:1.1
	HForm-2_63:1.1
	HForm-2_62:1.1
	HForm-2_61:1.1
	HForm-2_60:1.1
	HForm-2_59:1.1
	HForm-2_58:1.1
	HForm-2_57:1.1
	HForm-2_56:1.1
	HForm-2_55:1.1;
locks; strict;
comment	@# @;


1.1
date	2005.05.18.15.00.11;	author jballance;	state Exp;
branches;
next	;


desc
@@


1.1
log
@	update of HForm to build !SCSIForm to format SCSI media in
	USB Mass storage to filecore format
Detail:
        Builds either HForm or SCSIForm form relevant !Mk files.
	Also added code to ensure that when formatting filecore format
	any DOS format info is removed, and an appropriate boot sector
	installed to permit reformatting with DOS format by DOS machines.
	(this stops ambiguous usage)
Admin:
	Not exhaustively tested..
	HForm builds.. will need doublechecking before any release is made
	from this version.
	SCSIForm has been reasonably well tested.. will be released initially
	on the beta test site for further scrutiny.
	Castle added IP


Version 2.55. Not tagged
@
text
@FAT boot sector info


what		offset		length		Note
bytes/sector	11 (&b)		2               (little endian)
secs/cluster	13		1		1,2,4,8,16,32,64,128 only
reserved secs	14		2		Secs to start of 1st FAT min 1
FATS		16		1
Root entries	17		2
Small Sectors	19		2		secs/disc or 0 if > 64k
Media descr	21		1		F8 = fixed disc ?? F0
Secs/FAT	22		2
Secs/Track	24		2
Heads		26		2
HiddenSecs	28		4		secs on disc before boot sector
LargeSecs	32		4		Secs in volume if Smallsecs 0
???             36              4

convert LBA to CHS:
    cylinder = LBA / (heads_per_cylinder * sectors_per_track)
        temp = LBA % (heads_per_cylinder * sectors_per_track)
        head = temp / sectors_per_track
      sector = temp % sectors_per_track + 1

convert CHS to LBA:
         LBA = ( (cylinder * heads_per_cylinder + heads ) *
                    sectors_per_track ) + sector - 1

last 2 bytes of bootsec are 0x55 0xaa

before that come 4 off 16 byte partitions.

first then at offset 0x1be (0x200 sector size)

byte 0:		0x80		bootable disc
byte 1:		starting CHS in INT13 format
byte 2:
byte 3:
byte 4:		type byte.. suggest 0x41 for riscos
byte 5:		ending CHS in INT13 format
byte 6:
byte 7:
word 8:		Starting LBA (little endian)
word c:		Size in Sectors

BIOS boot uses CHS only.  ignores LBA

CHS format. first byte is H                          max H = 255
            2nd byte bottom 6 bits are S.            max S = 63
            2nd byte top 2 bits are top 2 bits of C  max C = 1023
            3rd byte is low byte of C@
