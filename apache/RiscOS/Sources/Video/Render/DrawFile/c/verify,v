head	4.3;
access;
symbols
	DrawFile-1_59:4.3
	DrawFile-1_58:4.3
	DrawFile-1_57:4.3
	DrawFile-1_56:4.3
	DrawFile-1_55:4.3
	DrawFile-1_54:4.3
	DrawFile-1_53:4.3
	RO_5_07:4.3
	DrawFile-1_52:4.3
	DrawFile-1_51:4.2
	dellis_autobuild_BaseSW:4.2
	sbrodie_sedwards_16Mar2000:4.2
	DrawFile-1_50:4.2
	dcotton_autobuild_BaseSW:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	DrawFile-1_49:4.2
	nicke_DrawFile-1_48:4.1.7.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	hsimons_BOCA-1_2-Release:4.1.7.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	rthornb_UrsulaBuild_01May1998:4.2
	Spinner_RCA116:4.1.7.2
	Spinner_B20_2:4.1.7.2
	Spinner_19_3:4.1.7.2
	Spinner_B18:4.1.7.2
	Spinner_B17:4.1.7.2
	Spinner_B15:4.1.7.2
	Spinner_B14:4.1.7.2
	Spinner_B13:4.1.7.2
	Spinner_B12:4.1.7.2
	Spinner_B10:4.1.7.2
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	Spinner_B7:4.1.7.2
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.2
	Spin_3Apr97:4.1.7.2
	RCA_bp:4.2
	ARTtmp:4.1.7.2.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2002.11.22.21.41.26;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.01.21.17.49.26;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.42.43;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.42.43;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.11.27;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.49.24;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.12.27;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	96.12.11.15.30.14;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Made to work with C99

Version 1.52. Tagged as 'DrawFile-1_52'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*verify.c - verify stuff*/

/*From CLib*/
#include <stddef.h>
#include <string.h>

/*From OSLib*/
#include "macros.h"
#include "os.h"

/*From Support*/
#include "riscos.h"
#include "jc_trace.h"

/*Local*/
#include "drawfile.h"
#include "main.h"
#include "verify.h"

typedef
   struct
   {  drawfile_object *object;
      drawfile_diagram *diagram;
      drawfile_object *font_table;
   }
   State;

/*------------------------------------------------------------------------*/
osbool verify_overlap (os_box *box1, os_box *box2)

{  return MAX (box1->x0, box2->x0) <= MIN (box1->x1, box2->x1) &&
         MAX (box1->y0, box2->y0) <= MIN (box1->y1, box2->y1);
}
/*------------------------------------------------------------------------*/
char *verify_lookup_font_index (byte font_no, drawfile_object *font_table)

{  drawfile_font_def *font_def, *end;

   end = (drawfile_font_def *) &((byte *) font_table) [font_table->size];

   for (font_def = font_table->data AS font_table.font_def; font_def < end
         && font_def->font_index != 0; *(byte **) &font_def +=
         drawfile_SIZEOF_FONT_DEF (strlen (font_def->font_name) + 1))
      if (font_def->font_index == font_no)
         return font_def->font_name;

   return NULL;
}
/*------------------------------------------------------------------------*/
os_error *verify_diagram (drawfile_diagram *diagram, int size)

{  os_error *error = NULL;
   State state;
   drawfile_object *o, *end;

   state.object     = NULL;
   state.diagram    = diagram;
   state.font_table = NULL;

   if (size < offsetof (drawfile_diagram, objects) ||
         *(int *) diagram->tag != *(int *) "Draw")
   {  error = main_error_lookup (error_DRAW_FILE_NOT_DRAW, "NotDraw");
      goto finish;
   }

   if (diagram->major_version > 201)
   {  char s [DEC_WIDTH + 1];

      error = main_error_lookup (error_DRAW_FILE_VERSION, "Version",
            riscos_format_dec (s, diagram->major_version, 0, 1));
      goto finish;
   }

   tracef ("verify: despatching\n");
   end = (drawfile_object *) &((byte *) diagram) [size];
   for (o = diagram->objects; o < end; *(byte **) &o += o->size)
   {  if ((drawfile_object *) &((byte *) o) [o->size] > end)
      {  error = main_error_lookup (error_DRAW_FILE_BAD_FILE, "BadFile");
         goto finish;
      }

      tracef ("verifying object type %d\n" _ o->type);
      state.object = o;
      if ((error = callback (main_verification_callback, &state, NULL, 1,
            o->type)) != NULL)
         goto finish;
   }

finish:
   /*If an error was found while an object was current, report it using the
      approved wording.*/
   if (error != NULL && state.object != NULL)
   {  char s [HEX_WIDTH + 1];

      error = main_error_lookup (error->errnum, "Error", error->errmess,
            riscos_format_hex (s, (char *) state.object -
            (char *) state.diagram, 0, 1));
   }

   return error;
}
/*------------------------------------------------------------------------*/
os_error *verify_font_table (void *null, void *s, osbool *unclaimed)

{  State *state = (State *) s; /*save typing*/
   os_error *error = NULL;

   NOT_USED (unclaimed)

   tracef ("verify_font_table\n");
   #ifdef TEST
      riscos_assert (null == NULL);
      riscos_assert (state->object->type == drawfile_TYPE_FONT_TABLE);
   #else
      null = null;
   #endif

   /*Save the pointer.*/
   if (state->font_table != NULL)
   {  error = main_error_lookup (error_DRAW_FILE_FONT_TAB, "FontTab");
      goto finish;
   }

   state->font_table = state->object;

finish:
   return error;
}
/*------------------------------------------------------------------------*/
os_error *verify_group (void *null, void *s, osbool *unclaimed)

{  State *state = (State *) s /*save typing*/;
   drawfile_object *o, *end;
   os_error *error = NULL;

   NOT_USED (unclaimed)

   tracef ("verify_group\n");
   #ifdef TEST
      riscos_assert (null == NULL);
      riscos_assert (state->object->type == drawfile_TYPE_GROUP);
   #else
      null = null;
   #endif

   end = (drawfile_object *) &((byte *) state->object)
         [state->object->size];
   for (o = (drawfile_object *) &state->object->data AS group.objects;
         o < end; *(byte **) &o += o->size)
   {  tracef ("o 0x%X, end 0x%X\n" _ o _ end);

      if ((drawfile_object *) &((byte *) o) [o->size] > end)
      {  error = main_error_lookup (error_DRAW_FILE_BAD_GROUP, "BadGroup");
         goto finish;
      }

      tracef ("verifying object type %d\n" _ o->type);
      state->object = o;
      if ((error = callback (main_verification_callback, state, NULL, 1,
            o->type)) != NULL)
         goto finish;
   }
   tracef ("o 0x%X, end 0x%X\n" _ o _ end);

finish:
   return error;
}
/*------------------------------------------------------------------------*/
os_error *verify_text (void *null, void *s, osbool *unclaimed)

{  State *state = (State *) s; /*save typing*/
   char *font_name;
   os_error *error = NULL;

   NOT_USED (unclaimed)

   tracef ("verify_text\n");
   #ifdef TEST
      riscos_assert (null == NULL);
      riscos_assert (state->object->type == drawfile_TYPE_TEXT);
   #else
      null = null;
   #endif

   if (state->object->data AS text.style.font_index != font_SYSTEM)
   {  /*Check the font table pointer.*/
      if (state->font_table == NULL || (font_name = verify_lookup_font_index
            (state->object->data AS text.style.font_index,
            state->font_table)) == NULL)
      {  char s [DEC_WIDTH + 1];

         error = main_error_lookup (error_DRAW_FILE_BAD_FONT_NO,
               "BadFontNo", riscos_format_hex (s, state->object->data AS
               text.style.font_index, 0, 1));
         goto finish;
   }  }

finish:
   return error;
}
/*------------------------------------------------------------------------*/
os_error *verify_tagged (void *null, void *s, osbool *unclaimed)

{  State *state = (State *) s /*save typing*/;
   drawfile_object *o, *end;
   os_error *error = NULL;

   NOT_USED (unclaimed)

   tracef ("verify_tagged\n");
   #ifdef TEST
      riscos_assert (null == NULL);
      riscos_assert (state->object->type == drawfile_TYPE_TAGGED);
   #else
      null = null;
   #endif

   o = (drawfile_object *) &state->object->data AS tagged.object;
   end = (drawfile_object *) &((byte *) state->object)
         [state->object->size];
   if ((drawfile_object *) &((byte *) o) [o->size] > end)
   {  error = main_error_lookup (error_DRAW_FILE_BAD_TAG, "BadTag");
      goto finish;
   }

   tracef ("verifying object type %d\n" _ o->type);
   state->object = o;
   if ((error = callback (main_verification_callback, state, NULL, 1,
         o->type)) != NULL)
      goto finish;

finish:
   return error;
}
/*------------------------------------------------------------------------*/
os_error *verify_trfm_text (void *null, void *s, osbool *unclaimed)

{  char *font_name;
   State *state = (State *) s; /*save typing*/
   os_error *error = NULL;

   NOT_USED (unclaimed)

   tracef ("verify_trfm_text\n");
   #ifdef TEST
      riscos_assert (null == NULL);
      riscos_assert (state->object->type == drawfile_TYPE_TRFM_TEXT);
   #else
      null = null;
   #endif

   if (state->object->data AS trfm_text.style.font_index != font_SYSTEM)
   {  /*Check the font table pointer.*/
      if (state->font_table == NULL || (font_name = verify_lookup_font_index
            (state->object->data AS trfm_text.style.font_index,
            state->font_table)) == NULL)
      {  char s [DEC_WIDTH + 1];

         error = main_error_lookup (error_DRAW_FILE_BAD_FONT_NO,
               "BadFontNo", riscos_format_dec (s, state->object->data AS
               trfm_text.style.font_index, 0, 1));
         goto finish;
   }  }

finish:
   return error;
}
@


4.2
log
@Version Spin_merge taken
@
text
@d43 1
a43 1
bool verify_overlap (os_box *box1, os_box *box2)
d117 1
a117 1
os_error *verify_font_table (void *null, void *s, bool *unclaimed)
d144 1
a144 1
os_error *verify_group (void *null, void *s, bool *unclaimed)
d183 1
a183 1
os_error *verify_text (void *null, void *s, bool *unclaimed)
d216 1
a216 1
os_error *verify_tagged (void *null, void *s, bool *unclaimed)
d250 1
a250 1
os_error *verify_trfm_text (void *null, void *s, bool *unclaimed)
@


4.1
log
@Initial revision
@
text
@d27 1
a27 1
#include "trace.h"
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Fixed name clash with trace.h:  New name jc_trace.h
@
text
@d27 1
a27 1
#include "jc_trace.h"
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
