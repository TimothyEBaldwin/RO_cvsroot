head	4.1;
access;
symbols
	Manager-3_80:4.1
	Manager-3_79:4.1
	Manager-3_78:4.1
	Manager-3_77:4.1
	Manager-3_76:4.1
	Manager-3_75:4.1
	Manager-3_74:4.1
	Manager-3_73:4.1
	Manager-3_72:4.1
	Manager-3_71:4.1
	Manager-3_70:4.1
	Manager-3_69:4.1
	Manager-3_68:4.1
	Manager-3_67:4.1
	Manager-3_66:4.1
	Manager-3_65:4.1
	Manager-3_64:4.1
	Manager-3_63:4.1
	Manager-3_62:4.1
	Manager-3_61:4.1
	Manager-3_60:4.1
	RO_5_07:4.1
	Manager-3_59:4.1
	Manager-3_58:4.1
	Manager-3_57:4.1
	Manager-3_56:4.1
	Manager-3_55:4.1
	Manager-3_54:4.1
	Manager-3_53:4.1
	Manager-3_52:4.1
	Manager-3_51:4.1
	Manager-3_50:4.1
	Manager-3_49:4.1
	dellis_autobuild_BaseSW:4.1
	Manager-3_48:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	Manager-3_47:4.1
	Manager-3_46:4.1
	Manager-3_45:4.1
	Manager-3_44:4.1
	Manager-3_43:4.1
	Manager-3_42:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Manager-3_41-4_2_2_13:4.1
	Ursula_RiscPC:4.1.0.10
	Manager-3_41-4_2_2_12:4.1
	Manager-3_41-4_2_2_11:4.1
	Manager-3_41-4_2_2_10:4.1
	Manager-3_41-4_2_2_9:4.1
	Manager-3_41-4_2_2_8:4.1
	Manager-3_41-4_2_2_7:4.1
	Manager-3_41-4_2_2_6:4.1
	Manager-3_41-4_2_2_5:4.1
	Manager-3_41-4_2_2_4:4.1
	Manager-3_41-4_2_2_3:4.1
	Manager-3_41-4_2_2_2:4.1
	Manager-3_41-4_2_2_1:4.1
	NRaine:4.1.0.8
	Manager-3_41:4.1
	Ursula_merge:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	bavison_FontManager-3_40:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Manager-3_40-1_1_2_2:4.1.7.1
	smiddle_2Mar1998_Fonts16:4.1.7.1.0.4
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.43.54;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.43.54;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.21.49;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.54.00;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.16.45;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Search for transition:

     inword = current input word
              32 pixels with the leftmost being least significant

     lowsetbit = inword & -inword
     inword |= lowsetbit-1
     inword = !inword

     lowsetbit = inword & -inword
     inword |= lowsetbit-1
     inword = !inword

     etc. until lowsetbit=0, at which point we get the next word

Unfortunately we need the index of the bit position anyway, so this doesn't
save anything.

If xpath --> chain of current on/off pairs, ascending
   newxcoord[] = array to receive the next set of transitions
   nextx() returns the x-coord of the next x-transition

typedef struct xpathstr {
  struct xpathstr *link;
  int x,y;                 /* first one is a MOVE, all others are LINE */
} xpathstr;

typedef struct xpathheadstr {
  struct xpathheadstr *link;
  int x;
  xpathstr *path;
} xpathheadstr;

       inptr = <start of bottom row>;
       oldxpath = &xhead;
       xpath = xhead;                     /* may be null, else white/black transition */
       onx = findpixel(1);                 /* look for first black pixel */
       offx = findpixel(0);
       while (onx != big || xpath)       /* onx=big at end of row */
         while (xpath && xpath->x > offx) {
           newxpath = newblock(onx,oldxpath);  /* join up at the bottom */
           join(newxpath,onx,offx);
           addsides(newxpath);
         }
         while (xpath && xpath->offx < test.onx) {
           join(xpath,xpath->onx,xpath->offx);  /* join up at the top */
           writepath(xpath);
           unlink(&xpath,oldxpath);             /* remove from chain */
         }
         if (xpath && onx != big) {
           join(xpath,test.onx,test.offx);      /* join up at the sides */
           addsides(xpath);
           xpath = xpath->link;
         }
         readnextx(&test);
       }

void unlink(xpathheadstr **xpp, xpathheadstr **oldxpp)
{
  xpathheadstr *xpp2 = *xpp->link;
  free(*xpp);
  *oldxpp = *xpp = xpp2;
}


void join(xpathheadstr *xpath, int onx, int offx)
{
  register int x = xpath->onx;
  register int step = (onx<x) ? -1 : 1;

  for(;x!=onx;x+=step) {
    register xpathstr *xp = malloc(sizeof(xpathstr));
    xp->link = NULL;
    xp->x = x;
    xp->y = currenty;               /* static variable */
    xpath->lefttail->link = xp;
    xpath->lefttail = xp;
  }
  xpath->onx = x;

  x = xpath->offx;
  step = (offx<x) ? -1 : 1;
  for(;x!=offx;x+=step) {
    register xpathstr *xp = malloc(sizeof(xpathstr));
    xp->link = xpath->righthead;
    xp->x = x;
    xp->y = currenty;               /* static variable */
    xpath->righthead = xp;
  }
  xpath->offx = x;
}


void addsides(xpathheadstr *xpath)
{
  register xpathstr *xp = malloc(sizeof(xpathstr));
  xp->link = NULL;
  xp->x = xpath->onx;
  xp->y = currenty-1;             /* static variable */
  xpath->lefttail->link = xp;
  xpath->lefttail = xp;

  xp = malloc(sizeof(xpathstr));
  xp->link = xpath->righthead;
  xp->x = xpath->offx;
  xp->y = currenty-1;             /* static variable */
  xpath->righthead = xp;
}


static int user_outptr;
static int user_size;

void writepath(xpathheadstr *xpath)
{
  register xpathstr *xp = xpath->righthead;

  xp = outpath(MOVETO,xp);        /* frees block */
  while(xp) {
    xp = outpath(LINETO,xp);      /* frees block */
  }
}


xpathstr *outpath(int type,xpathstr *xp)
{
  register xpathstr *xp2 = xp->link;

  if (user_size < 12) error("Buffer overflow");

  *user_outptr++ = type;
  *user_outptr++ = xp->x << 8;
  *user_outptr++ = xp->y << 8;
  *user_outptr = 0;              /* leave pointing to terminator */
  user_size -= 12;

  free(xp);
  return(xp2);
}



 malloc(sizeof(xpathheadstr));
           newxpath->onx=test.onx;
           newxpath->offx=test.offx;
           newxpath->path=NULL;
           newxpath->link = *oldxpath;
           *oldxpath=newxpath;

           newxpath->offx = newxpath->onx;
           join(newxpath, test.onx, test.offx);

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
