head	4.1;
access;
symbols
	Manager-3_80:4.1
	Manager-3_79:4.1
	Manager-3_78:4.1
	Manager-3_77:4.1
	Manager-3_76:4.1
	Manager-3_75:4.1
	Manager-3_74:4.1
	Manager-3_73:4.1
	Manager-3_72:4.1
	Manager-3_71:4.1
	Manager-3_70:4.1
	Manager-3_69:4.1
	Manager-3_68:4.1
	Manager-3_67:4.1
	Manager-3_66:4.1
	Manager-3_65:4.1
	Manager-3_64:4.1
	Manager-3_63:4.1
	Manager-3_62:4.1
	Manager-3_61:4.1
	Manager-3_60:4.1
	RO_5_07:4.1
	Manager-3_59:4.1
	Manager-3_58:4.1
	Manager-3_57:4.1
	Manager-3_56:4.1
	Manager-3_55:4.1
	Manager-3_54:4.1
	Manager-3_53:4.1
	Manager-3_52:4.1
	Manager-3_51:4.1
	Manager-3_50:4.1
	Manager-3_49:4.1
	dellis_autobuild_BaseSW:4.1
	Manager-3_48:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	Manager-3_47:4.1
	Manager-3_46:4.1
	Manager-3_45:4.1
	Manager-3_44:4.1
	Manager-3_43:4.1
	Manager-3_42:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Manager-3_41-4_2_2_13:4.1
	Ursula_RiscPC:4.1.0.10
	Manager-3_41-4_2_2_12:4.1
	Manager-3_41-4_2_2_11:4.1
	Manager-3_41-4_2_2_10:4.1
	Manager-3_41-4_2_2_9:4.1
	Manager-3_41-4_2_2_8:4.1
	Manager-3_41-4_2_2_7:4.1
	Manager-3_41-4_2_2_6:4.1
	Manager-3_41-4_2_2_5:4.1
	Manager-3_41-4_2_2_4:4.1
	Manager-3_41-4_2_2_3:4.1
	Manager-3_41-4_2_2_2:4.1
	Manager-3_41-4_2_2_1:4.1
	NRaine:4.1.0.8
	Manager-3_41:4.1
	Ursula_merge:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	bavison_FontManager-3_40:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Manager-3_40-1_1_2_2:4.1.7.1
	smiddle_2Mar1998_Fonts16:4.1.7.1.0.4
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.43.36;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.43.36;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.19.13;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.52.51;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.15.40;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > c.maketree
 */

#include <stdio.h>
#include <stdlib.h>
#include "maketree.h"


node * maketree(int n, int *frequencies)
{
  node *item1, *item2, *answer;
  int i;
  heapstr myheap;

  initheap(&myheap,n,frequencies);

  sortheap(&myheap);

  for (i=0; i<n-1; i++) {
    item1 = removeheap(&myheap);
    item2 = removeheap(&myheap);
    if (item1->frequency > item2->frequency) error("Incorrect order");

    answer = newnode(-1, item1->frequency+item2->frequency, item1, item2);
    addheap(&myheap,answer);
  }

  answer = removeheap(&myheap);

  freeheap(&myheap);

  return(answer);
}


void initheap(heapstr *heapp, int n, int *frequencies)
{
  int i;
 
  heapp->nitems = n;
  heapp->ptr =
  heapp->array = malloc(n * sizeof(node *));

  if (!heapp->array) error("Not enough memory");

  for (i=0; i<n; i++) {
    heapp->array[i] = newnode(i, frequencies[i], NULL, NULL);
  }
}


void sortheap(heapstr *heapp)
{
  qsort(heapp->ptr, heapp->nitems, sizeof(node *), mycompare);
}


int mycompare(const void *item1, const void *item2)
{
  node *realitem1 = *(node **)item1;
  node *realitem2 = *(node **)item2;

  return(realitem1->frequency > realitem2->frequency);
}


void addheap(heapstr *heapp, node *newitem)
{
  int i;

  for(i=0; i<heapp->nitems; i++) {
    if (heapp->ptr[i]->frequency >= newitem->frequency) break;
    heapp->ptr[i-1] = heapp->ptr[i];
  }
  heapp->ptr[i-1] = newitem;

  heapp->nitems++;
  --heapp->ptr;
}


node * removeheap(heapstr *heapp)
{
  if (heapp->nitems-- == 0) error("No items on heap");

  return(*heapp->ptr++);
}


void freeheap(heapstr *heapp)
{
  free(heapp->array);
}


node * newnode(int value, int frequency, node *left, node *right)
{
  node *fred = malloc(sizeof(node));

  if (!fred) error("Not enough memory");

  fred->value = value;
  fred->frequency = frequency;
  fred->left = left;
  fred->right = right;

  return(fred);
}


void error(char *str)
{
  fprintf(stderr, "%s\n", str);
  exit(1);
}

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
