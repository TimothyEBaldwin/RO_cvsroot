head	4.3;
access;
symbols
	Colours-1_95:4.3
	Colours-1_94:4.3
	Colours-1_93:4.3
	Colours-1_92:4.3
	Colours-1_91:4.3
	Colours-1_90:4.3
	Colours-1_89:4.3
	Colours-1_88:4.3
	Colours-1_87:4.3
	Colours-1_86:4.3
	Colours-1_85:4.3
	Colours-1_84:4.2
	Colours-1_83:4.1
	Colours-1_82:4.1
	Colours-1_81:4.1
	Colours-1_80:4.1
	Colours-1_79:4.1
	Colours-1_78:4.1
	Colours-1_77:4.1
	RO_5_07:4.1
	Colours-1_76:4.1
	Colours-1_75:4.1
	Colours-1_74:4.1
	Colours-1_73:4.1
	Colours-1_72:4.1
	dellis_autobuild_BaseSW:4.1
	Colours-1_71:4.1
	Colours-1_70:4.1
	Colours-1_69:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	Colours-1_68:4.1
	Colours-1_67:4.1
	Ursula_merge:4.1
	nturton_Colours-1_65:4.1
	dcotton_colours_MPTInitialBuild:4.1.7.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2013.02.11.08.14.38;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	fsgIEEtgergszKDw;

4.2
date	2013.02.09.18.42.49;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	XLAcAYecDjGX6yDw;

4.1
date	96.11.05.09.42.13;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.42.13;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.07.46;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.47.57;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.10.51;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Rework maketables to not need ColourTrans loaded at build time
During generation of the 32k colour lookup tables, the tool already has to hand the 5:5:5 RGB value and 8:8:8 RGB palette, so can do the colour lookup itself. This removes the need to build a platform agnostic ColourTrans module, it's just C code.
* Replace make_32k_table() with brute force colour matcher
* Use <stdio.h> functions to write out the output, change to use <stdint.h>
* Simplify top level makefile
* Header.s: minor warning squashed
Binary output compared with Colours-1_83.

Version 1.85. Tagged as 'Colours-1_85'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* maketables.c - makes the colourtrans ROM tables */

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

static const uint32_t palette4[16] =
                { 0xffffff00, 0xdddddd00, 0xbbbbbb00, 0x99999900,
                  0x77777700, 0x55555500, 0x33333300, 0x00000000,
                  0x99440000, 0x00eeee00, 0x00cc0000, 0x0000dd00,
                  0xbbeeee00, 0x00885500, 0x00bbff00, 0xffbb0000 };

static const uint32_t palette4g[16] =
                { 0xffffff00, 0xdddddd00, 0xbbbbbb00, 0x99999900,
                  0x77777700, 0x55555500, 0x33333300, 0x00000000,
                  0x11111100, 0xcccccc00, 0x66666600, 0x22222200,
                  0xeeeeee00, 0x44444400, 0xaaaaaa00, 0x88888800 };

static uint8_t *make_32ktable(const uint32_t *palette, uint8_t *table, size_t palsize)
{
  uint32_t element;

  for (element = 0; element < 32768; element++)
  {
    uint32_t shortest, euclid;
    size_t   best = 0, colour;
    uint32_t r,g,b;
    uint32_t rp,gp,bp;

    b = ((element >> 10) & 0x1f) * 255/31;
    g = ((element >>  5) & 0x1f) * 255/31;
    r = ((element >>  0) & 0x1f) * 255/31;
    shortest = UINT32_MAX;

    for (colour = 0; colour < palsize; colour++)
    {
      rp = (uint8_t)(palette[colour] >>  8);
      gp = (uint8_t)(palette[colour] >> 16);
      bp = (uint8_t)(palette[colour] >> 24);
      /* Weight the distances per PRM 3-339 */
      euclid = (2 * (rp - r) * (rp - r)) +
               (4 * (gp - g) * (gp - g)) +
               (1 * (bp - b) * (bp - b));
      if (euclid < shortest)
      {
        shortest = euclid;
        best = colour;
      }
    }
    table[element] = (uint8_t)best;
  }
  return table;
}

int main(int argc, char *argv[])
{
  uint32_t *palette;
  uint8_t  *table;
  FILE     *file;
  size_t    loop;
  uint32_t  r, g, b;
  char      outfile[256];

  palette = (uint32_t *)malloc(256 * sizeof(uint32_t));
  table = (uint8_t *)malloc(32 * 32 * 32 * sizeof(uint8_t));
  (void)argc; /* Unused */
  
  /* 8bpp desktop */
  printf("Constructing 8bpp desktop tables\n");
  for (loop = 0; loop < 256; loop++)
  {
    r = g = b = 0;
    if (loop & 0x80) b |= 0x88; /* top bit blue */
    if (loop & 0x40) g |= 0x88; /* top bit green */
    if (loop & 0x20) g |= 0x44; /* 2nd bit green */
    if (loop & 0x10) r |= 0x88; /* top bit red */
    if (loop & 0x08) b |= 0x44; /* 2nd bit blue */
    if (loop & 0x04) r |= 0x44; /* 2nd bit red */
    if (loop & 0x02)
      { r |= 0x22; g |= 0x22; b |= 0x22; } /* 3rd bit, added white */
    if (loop & 0x01)
      { r |= 0x11; g |= 0x11; b |= 0x11; } /* 4th bit, added white */
    palette[loop] = (b<<24) | (g<<16) | (r<<8);
  }
  sprintf(outfile,"%s.Palettes.8desktop",argv[1]);
  file = fopen(outfile, "wb");
  fwrite(palette, sizeof(uint32_t), 256, file);
  fclose(file);
  printf("  - written palette.\n");

  memset(table,0,32*32*32);
  table = make_32ktable(palette, table, 256);
  sprintf(outfile,"%s.Tables.8desktop",argv[1]);
  file = fopen(outfile, "wb");
  fwrite(table, sizeof(uint8_t), 32 * 32 * 32, file);
  fclose(file);
  printf("  - written table.\n");

  /* 8bpp grey */
  printf("Constructing 8bpp grey tables\n");
  for (loop = 0; loop < 256; loop++)
  {
    palette[loop] = (loop<<24) | (loop<<16) | (loop<<8);
  }
  sprintf(outfile,"%s.Palettes.8greys",argv[1]);
  file = fopen(outfile, "wb");
  fwrite(palette, sizeof(uint32_t), 256, file);
  fclose(file);
  printf("  - written palette.\n");

  memset(table,0,32*32*32);
  table = make_32ktable(palette, table, 256);
  sprintf(outfile,"%s.Tables.8greys",argv[1]);
  file = fopen(outfile, "wb");
  fwrite(table, sizeof(uint8_t), 32 * 32 * 32, file);
  fclose(file);
  printf("  - written table.\n");

  /* 4bpp desktop */
  printf("Constructing 4bpp desktop tables\n");
  sprintf(outfile,"%s.Palettes.4desktop",argv[1]);
  file = fopen(outfile, "wb");
  fwrite(palette4, sizeof(uint32_t), 16, file);
  fclose(file);
  printf("  - written palette.\n");

  memset(table,0,32*32*32);
  table = make_32ktable(palette4, table, 16);
  sprintf(outfile,"%s.Tables.4desktop",argv[1]);
  file = fopen(outfile, "wb");
  fwrite(table, sizeof(uint8_t), 32 * 32 * 32, file);
  fclose(file);
  printf("  - written table.\n");

  /* 4bpp grey */
  printf("Constructing 4bpp grey tables\n");
  sprintf(outfile,"%s.Palettes.4greys",argv[1]);
  file = fopen(outfile, "wb");
  fwrite(palette4g, sizeof(uint32_t), 16, file);
  fclose(file);
  printf("  - written palette.\n");

  memset(table,0,32*32*32);
  table = make_32ktable(palette4g, table, 16);
  sprintf(outfile,"%s.Tables.4greys",argv[1]);
  file = fopen(outfile, "wb");
  fwrite(table, sizeof(uint8_t), 32 * 32 * 32, file);
  fclose(file);
  printf("  - written table.\n");

  free(palette);
  free(table);

  return 0;
}
@


4.2
log
@Use machine '32' when generating MakeTables
Previously 'All32' was used, but since HdrSrc-2_24 that no longer has sight of STB or HAL switches so the temporary module didn't build properly during the resources phase. It's still all a bit yucky.
Tidied 2 easy warnings in MakeTables.

Version 1.84. Tagged as 'Colours-1_84'
@
text
@d17 1
a18 1
#include "swis.h"
d22 1
a22 1
static unsigned int palette4[16] =
d28 1
a28 1
static unsigned int palette4g[16] =
d34 1
a34 1
static char *make_32ktable(int *palette, int mode, char *table)
d36 1
a36 1
   int element;
d38 30
a67 17
   for (element=0;element<32768;element++)
   {
      int      palette_entry;
      int      colour;
      int      r,g,b;
//      palette_entry = ((element & 0x7c00) << 17) | ((element & 0x3e0) << 14) | ((element & 0x1f) << 11);
      r = (element >> 10) * 255/31;
      g = ((element >> 5) & 0x1f) * 255/31;
      b = (element & 0x1f) * 255/31;
//printf("rgb = (%d,%d,%d)\n", r, g, b);
      palette_entry = (r << 24) | (g << 16) | (b << 8);
      _swi(ColourTrans_ReturnColourNumberForMode, _IN(0) | _IN(1) | _IN(2) | _OUT(0),
                palette_entry, mode, palette, &colour);
//printf("pal %x = (%d)\n", palette_entry, colour);
      table[element] = (unsigned char)(colour & 0xff);
   }
   return(table);
d72 6
a77 8
  int          *palette;
  char         *table;
  unsigned int loop,
               r,g,b;
  char         outfile[256];
  static int   modeselector8bpp[10] = {1, 800, 600, 3, -1, 0, 128, 3, 255, -1}; /* 800x600 8bpp new format mode with
                                                                                   full colour palette */
  static int   modeselector4bpp[6] = {1, 800, 600, 2, -1, -1}; /* 800x600 4bpp new format mode */
d79 2
a80 2
  palette = (int *)malloc(256*sizeof(int));
  table = (char *)malloc(32*32*32*sizeof(char));
d83 1
a83 1
/* 8bpp desktop */
d85 1
a85 1
  for (loop=0;loop<256;loop++)
d101 3
a103 1
  _swi(OS_File, _IN(0) | _IN(1) | _IN(2) | _IN(4) | _IN(5), 10, outfile, 0xffd, palette, palette+256);
d105 1
d107 1
a107 1
  table = make_32ktable(palette, (int)modeselector8bpp, table);
d109 3
a111 1
  _swi(OS_File, _IN(0) | _IN(1) | _IN(2) | _IN(4) | _IN(5), 10, outfile, 0xffd, table, table+32*32*32);
d114 1
a114 2
/* 8bpp grey */

d116 2
a117 1
  for (loop=0;loop<256;loop++)
d119 1
d121 3
a123 1
  _swi(OS_File, _IN(0) | _IN(1) | _IN(2) | _IN(4) | _IN(5), 10, outfile, 0xffd, palette, palette+256);
d125 1
d127 1
a127 1
  table = make_32ktable(palette, (int)modeselector8bpp, table);
d129 3
a131 1
  _swi(OS_File, _IN(0) | _IN(1) | _IN(2) | _IN(4) | _IN(5), 10, outfile, 0xffd, table, table+32*32*32);
d134 1
a134 2
/* 4bpp desktop */

d137 3
a139 1
  _swi(OS_File, _IN(0) | _IN(1) | _IN(2) | _IN(4) | _IN(5), 10, outfile, 0xffd, palette4, palette4+16);
d141 1
d143 1
a143 1
  table = make_32ktable((int *)palette4, (int)modeselector4bpp, table);
d145 3
a147 1
  _swi(OS_File, _IN(0) | _IN(1) | _IN(2) | _IN(4) | _IN(5), 10, outfile, 0xffd, table, table+32*32*32);
d150 1
a150 2
/* 4bpp grey */

d153 3
a155 1
  _swi(OS_File, _IN(0) | _IN(1) | _IN(2) | _IN(4) | _IN(5), 10, outfile, 0xffd, palette4g, palette4g+16);
d157 1
d159 1
a159 1
  table = make_32ktable((int *)palette4g, (int)modeselector4bpp, table);
d161 3
a163 1
  _swi(OS_File, _IN(0) | _IN(1) | _IN(2) | _IN(4) | _IN(5), 10, outfile, 0xffd, table, table+32*32*32);
d169 1
a169 1
  return(0);
@


4.1
log
@Initial revision
@
text
@d34 1
a34 1
char *make_32ktable(int *palette, int mode, char *table)
d70 2
a71 1

@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
