head	4.3;
access;
symbols
	Colours-1_95:4.3
	Colours-1_94:4.3
	Colours-1_93:4.3
	Colours-1_92:4.3
	Colours-1_91:4.3
	Colours-1_90:4.3
	Colours-1_89:4.3
	Colours-1_88:4.3
	Colours-1_87:4.3
	Colours-1_86:4.3
	Colours-1_85:4.3
	Colours-1_84:4.3
	Colours-1_83:4.3
	Colours-1_82:4.3
	Colours-1_81:4.3
	Colours-1_80:4.3
	Colours-1_79:4.3
	Colours-1_78:4.3
	Colours-1_77:4.3
	RO_5_07:4.3
	Colours-1_76:4.3
	Colours-1_75:4.3
	Colours-1_74:4.2
	Colours-1_73:4.2
	Colours-1_72:4.2
	dellis_autobuild_BaseSW:4.2
	Colours-1_71:4.2
	Colours-1_70:4.2
	Colours-1_69:4.2
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.3
	Colours-1_68:4.1
	Colours-1_67:4.1
	Ursula_merge:4.1
	nturton_Colours-1_65:4.1
	dcotton_colours_MPTInitialBuild:4.1.7.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2001.05.14.15.16.01;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	2000.05.12.12.34.33;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.42.16;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.42.16;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.08.04;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.48.01;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.11.01;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.72 or later.
  Requires BuildSys 3.09 or later.
  Requires Env 0.65 or later.

Version 1.75. Tagged as 'Colours-1_75'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;*********************************************************
; Version 054 SWI's - calibration

; in    R0 -> table to be copied

SetCalibration_Code
        Debug   input1,"SetCalibration: R0",R0
        Debug   input2,"SetCalibration: R0",R0
        Push    "r0-r7,lr"

; Look to see if it is a new calibration table
      [ newcalibration
        TEQ     R0,#0
        LDRNE   LR,[R0,#calib_version]
        TEQNE   LR,#0                           ; new calibration table?
        BEQ     setnewtable                     ; force to use a new format table
      ]

; Invalidate the cache
        BL      InvalidateCache_Code
        MOV     r1, r0
; Free old calibration pointer
        LDR     r2, [r12, #Calibration_ptr]
        CMP     r2, #0
        MOVNE   r0, #ModHandReason_Free
        SWINE   XOS_Module
        ADDVS   sp, sp, #4
        Pull    "r1-r7,pc",VS
        MOV     r2, #0
        STR     r2, [r12, #Calibration_ptr]
;  Create new heap space for new calibration table
        LDMIA   r1!, {r4,r5,r6}
        CMP     r4, #2
        BLT     bad_calibration
        CMP     r5, #2
        BLT     bad_calibration
        CMP     r6, #2
        BLT     bad_calibration
        MOV     r3, #12
        ADD     r3, r3, r4, LSL #2
        ADD     r3, r3, r5, LSL #2
        ADD     r3, r3, r6, LSL #2
        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        ADDVS   sp, sp, #4
        Pull    "r1-r7,pc",VS
; Copy data
        STR     r2, [r12, #Calibration_ptr]
        STMIA   r2!, {r4,r5,r6}
; Transfer first device colour data
        LDR     r3, [r1]
        TST     r3, #&ff
        BNE     bad_calibration
        AND     r0, r3, #&ff
01
        LDR     r3, [r1], #4
        STR     r3, [r2], #4
        AND     r7, r3, #&ff
        CMP     r7, r0
        BLT     bad_calibration
        MOV     r0, r7
        SUBS    r4, r4, #1
        BNE     %BT01
        CMP     r0, #&ff
        BNE     bad_calibration
; Transfer second device colour data
        LDR     r3, [r1]
        TST     r3, #&ff
        BNE     bad_calibration
        AND     r0, r3, #&ff
01
        LDR     r3, [r1], #4
        STR     r3, [r2], #4
        AND     r7, r3, #&ff
        CMP     r7, r0
        BLT     bad_calibration
        MOV     r0, r7
        SUBS    r5, r5, #1
        BNE     %BT01
        CMP     r0, #&ff
        BNE     bad_calibration
; Transfer third device colour data
        LDR     r3, [r1]
        TST     r3, #&ff
        BNE     bad_calibration
        AND     r0, r3, #&ff
01
        LDR     r3, [r1], #4
        STR     r3, [r2], #4
        AND     r7, r3, #&ff
        CMP     r7, r0
        BLT     bad_calibration
        MOV     r0, r7
        SUBS    r6, r6, #1
        BNE     %BT01
        CMP     r0, #&ff
        BNE     bad_calibration

      [ newcalibration
        MOV     R0,#0
        STR     R0,[R12,#Calibration_newtable]
      ]

; Issue a service call
        MOV     R1, #Service_CalibrationChanged
        SWI     XOS_ServiceCall
        ADDVS   sp,sp,#4
        Pull    "r1-r7,PC",VS
; Everything transfered okay, so exit
        CLRV
        Pull    "r0-r7,PC"

bad_calibration
; Free old calibration pointer
        LDR     r2, [r12, #Calibration_ptr]
        CMP     r2, #0
        MOVNE   r0, #ModHandReason_Free
        SWINE   XOS_Module
        MOV     r2, #0
        STR     r2, [r12, #Calibration_ptr]
; Issue a service call
        MOV     R1, #Service_CalibrationChanged
        SWI     XOS_ServiceCall
; Return the error
        Pull    "R0-R7,LR"
        [ debuginput1 :LOR: debuginput2 :LOR: debugoutput
        ADRL    r0, ErrorBlock_CTBadCalib
        |
        ADR     r0, ErrorBlock_CTBadCalib
        ]
        B       LookupError             ; Always sets the V bit

      [ newcalibration

;; Cope with new format calibration tables, first validating them and
;; then doing their funky stuff into our workspace!

setnewtable
        BL      InvalidateCache_Code    ; die existing cache scum!
        MOV     R1,R0                   ; take a copy of the table pointer

        LDR     R2,[R12,#Calibration_ptr]
        Debug   newcalibrate,"Old calibration table at",R2
        CMP     R2,#0                   ; is there an calibration table?
        MOVNE   R0,#ModHandReason_Free
        SWINE   XOS_Module              ; release the existing table
        STRVS   R0,[sp]                 ; if it fails then setup the error pointer
        Pull    "R0-R7,PC",VS           ; and exit with error condition

        MOV     R2,#0
        STR     R2,[R12,#Calibration_ptr]

        CMP     R1,#0                   ; if reseting the calibration table then ignore the request
        Pull    "R0-R7,PC",EQ

        LDR     R0,[R1,#calib_tablecount]
        Debug   newcalibrate,"Number of tables in calibration block",R0
        TEQ     R0,#1
        TEQNE   R0,#3                   ; are there the correct number of tables?
        BNE     bad_calibration         ; fault it if not 1 or 3 tables

        MOV     LR,#calib_gammasize
        MUL     R3,LR,R0
        ADD     R3,R3,#calib_gammatables
        MOV     R0,#ModHandReason_Claim
        SWI     XOS_Module              ; allocate a block for the table
        STRVS   R0,[sp]                 ; ah poohey it was faulted so return
        Pull    "R0-R7,PC",VS

        Debuga  newcalibrate,"New calibration table copied to",R2
        Debug   newcalibrate,", size",R3

        STR     R2,[R12,#Calibration_ptr]
10
        SUBS    R3,R3,#1                ; decrease the counter
        LDRPLB  R0,[R1,R3]              ; if still valid use as index to copy byte
        STRPLB  R0,[R2,R3]
        BPL     %BT10                   ; looping until all done

        MOV     R0,#-1
        STR     R0,[R12,#Calibration_newtable]

        MOV     R1,#Service_CalibrationChanged
        SWI     XOS_ServiceCall
        STRVS   R0,[sp]
        Pull    "R0-R7,PC"              ; broadcast the calibration has changed, returning if it faulted

      ]

;..............................................................................

; in    R0 -> buffer to be filled / =0 if to read size
; out   R1 = table size
;       [R0] = updated with data

      [ newcalibration

ReadCalibration_Code ROUT

        Debug   input1,"ReadCalibration: R0",R0
        Debug   input2,"ReadCalibration: ptr",R0

        Push    "R0,R2-R5,LR"

        LDR     R2,[WP,#Calibration_ptr]
        CMP     R2,#0                   ; is there a table currently?
        MOVEQ   R1,#0                   ; if not then return a size of zero
        Pull    "R0,R2-R5,PC",EQ        ; exiting with (V clear)

        LDR     LR,[WP,#Calibration_newtable]
        TEQ     LR,#0                   ; is it a new format table?
        BEQ     read_old_table          ; no, so read the old format table

        LDR     R1,[R2,#calib_tablecount]
        MOV     R3,#calib_gammasize
        MUL     R1,R3,R1
        ADD     R1,R1,#calib_gammatables

; R0 -> buffer maybe
; R1 = size of table to be copied

        Debuga  newcalibrate,"Copy calibration table to",R0
        Debug   newcalibrate,", size",R1

        Debug   output,"In ReadCalibration: size is",R1

        CMP     R0,#0                   ; are we just reading the size?
        Pull    "R0,R2-R5,PC",EQ        ; yes, so return without copying data

        MOV     R3,R1
10
        SUBS    R3,R3,#1                ; copy data decreasing index
        LDRPLB  LR,[R2,R3]              ; which we then use as an index into the table to copy
        STRPLB  LR,[R0,R3]
        BPL     %BT10

        Pull    "R0,R2-R5,PC"

read_old_table
        LDMIA   R2,{R3,R4,R5}
        MOV     R1,#12
        ADD     R1,R1,R3,LSL #2
        ADD     R1,R1,R4,LSL #2
        ADD     R1,R1,R5,LSL #2         ; R1 == total size of table

        CMP     R0,#0                   ; are we just reading the table size?
        Pull    "R0,R2-R5,PC",EQ        ; if so then return now - R1 already setup!

        MOV     R3,R1
15      SUBS    R3,R3,#4
        LDRPL   LR,[R2,R3]
        STRPL   LR,[R0,R3]
        BPL     %BT15                   ; loop copying data until index is -VE!

        Pull    "R0,R2-R5,PC"

      |

ReadCalibration_Code
        Push    "r0, r2, r3, r4, r5, lr"
        Push    "r1"
        LDR     r2, [r12, #Calibration_ptr]
        CMP     r2, #0
      [ Version >= 066
        MOVEQ   r1, #0                  ; If no calibration table then return 0 size
        ADDEQ   SP, SP, #4              ; Skip R1 pushed earlier
        Pull    "r0, r2-r5, pc",EQ
      |
        ADDR    r2, default_calibration, EQ
      ]
        CMP     r0, #0
        LDMIA   r2!, {r3,r4,r5}
        MOV     r1, #12
        ADD     r1, r1, r3, LSL #2
        ADD     r1, r1, r4, LSL #2
        ADD     r1, r1, r5, LSL #2
        Pull    "r0", EQ
        BEQ     read_calibration
        STMIA   r0!, {r3,r4,r5}
        SUB     r1, r1, #12
01
        LDR     r3, [r2], #4
        STR     r3, [r0], #4
        SUBS    r1, r1, #4
        BNE     %BT01
        Pull    "r1"
read_calibration
        CLRV
        Pull    "r0, r2, r3, r4, r5, PC"

        ]


;..............................................................................

; NB: Assumes table is valid!

; in    R0 = number of colours to convert
;       R1 -> input table
;       R2 -> output table
;       R3 -> calibration table

      [ newcalibration

ConvertDevicePalette_Code

        Debug   input1,"ConvertDevicePalette: R0-R3",R0,R1,R2,R3
        Debug   input2,"ConvertDevicePalette: #cols, >table, >output, table",R0,R1,R2,R3

        Push    "R0-R5,LR"

        MOV     R4,R1                           ; slosh around with the pointers
        MOV     R5,R2
10
        SUBS    R0,R0,#1                        ; decrease counter
        Pull    "R0-R4,PC",MI                   ; exiting if the specified table is null

        LDR     R1,[R4],#4                      ; pick up value to convert
        BL      ConvertDeviceColour_Code        ; perform conversion
        STRVS   R0,[SP]                         ; ensuring valid error pointer if required
        Pull    "R0-R5,PC",VS                   ; an exiting if error is pending

        STR     R2,[R5],#4                      ; store the converted value into the return buffer
        B       %BT10                           ; loop back until all done

      |


ConvertDevicePalette_Code
        Push    "r0,r1,r2,r3,r4,lr"
        CMP     r3, #0
        LDREQ   r3, [r12, #Calibration_ptr]
        CMP     r3, #0
      [ Version <= 065
        ADREQL  r3, default_calibration
      ]
01
        LDR     r4, [r1], #4
      [ Version >= 066
        CMP     r3, #0
        BLNE    convert_device_colour
      |
        BL      convert_device_colour
      ]
        STR     r4, [r2], #4
        SUBS    r0, r0, #1
        BNE     %BT01
        Pull    "r0,r1,r2,r3,r4,PC"

      ]

;..............................................................................

; NB: Assumes that the table is valid!

; int   R1 = colour to convert
;       R3 -> table
; out   R2 = converted colour

ConvertDeviceColour_Code ROUT

      [ newcalibration

        Debug   input1,"ConvertDeviceColour: R1,R3",R1,R3
        Debug   input2,"ConvertDeviceColour: colour,table",R1,R3

        Push    "R0-R1,R3-R4,LR"

        CMP     R3,#0                           ; use supplied table?
        LDREQ   R3,[WP,#Calibration_ptr]        ; if not then use current screen one
        CMPEQ   R3,#0                           ; if there is none at all
        Debug   newcalibrate,"ConvertDeviceColour - calibration table at",R3
        MOVEQ   R2,R1                           ; then bodge the return value
        Debug   output,"ConvertDeviceColour interim return value",R2
        Pull    "R0-R1,R3-R4,PC",EQ             ; and give up the ghost!

        LDR     LR,[R3,#calib_version]
        CMP     LR,#0                           ; is it a new format table?
        BNE     %FT10                           ; if not then ignore use old format code

        Debug   newcalibrate,"Calling new conversion function with",R1
        BL      new_convert_device_colour
        STRVS   R0,[SP]
        Debug   output,"ConvertDeviceColour return value",R2
        Pull    "R0-R1,R3-R4,PC"                ; use new code, reporting any errors
10
        MOV     R4,R1
        BL      convert_device_colour
        ADDS    R2,R4,#0         ; clear V      ; use old code - ah borring!
        Pull    "R0-R1,R3-R4,PC"                ; returning the values as needed
      |
        Push    "r0,r1,r3,r4,lr"
        CMP     r3, #0
        LDREQ   r3, [r12, #Calibration_ptr]
        CMP     r3, #0
      [ Version >= 066
        MOVEQ   r2,r1
        Pull    "r0,r1,r3,r4,pc",EQ
      |
        ADREQL  r3, default_calibration
      ]
        MOV     r4, r1
        BL      convert_device_colour
        MOV     r2, r4
        Debug   output,"ConvertDeviceColour (old) return value",R2
        Pull    "r0,r1,r3,r4,PC"

      ]

;*********************************************************

RGB_to_CIE_matrix
        DCD     &7A6BC1
        DCD     &4C6E67
        DCD     &2CB2AD
        DCD     &4372CE
        DCD     &A7B146
        DCD     &14DBEA
        DCD     &51181
        DCD     &29114A
        DCD     &E86DEE
CIE_to_RGB_matrix
        DCD     &2BD4872
        DCD     &FEDAF45B
        DCD     &FF936FD5
        DCD     &FEE18A27
        DCD     &2074BD3
        DCD     &87C2A
        DCD     &235269
        DCD     &FFAAA2FC
        DCD     &11AD439

        MakeEitherErrorBlock CTConvOver

ConvertRGBToCIE_Code
        Debug   input1,"RGBtoCIE: R0-R2",R0,R1,R2
        Debug   input2,"RGBtoCIE: red, green, blue",R0,R1,R2
        Push    "r3-r6,r9-r11,lr"
        ADDR     r3, RGB_to_CIE_matrix
        B       multiply_by_matrix
ConvertCIEToRGB_Code
        Debug   input1,"CIEtoRGB: R0-R2",R0,R1,R2
        Debug   input2,"CIEtoRGB: x, y, z",R0,R1,R2
        Push    "r3-r6,r9-r11,lr"
        ADDR     r3, CIE_to_RGB_matrix
multiply_by_matrix
; First split R0, R1, R2
        MOV     r4, r0, ASR #16
        BIC     r0, r0, r4, LSL#16
        MOV     r5, r1, ASR #16
        BIC     r1, r1, r5, LSL#16
        MOV     r6, r2, ASR #16
        BIC     r2, r2, r6, LSL#16
        CLRV
; First row
        BL      multiply_by_row
        MOVVC   r10, r9
; Second row
        BLVC    multiply_by_row
        MOVVC   r11, r9
; Second row
        BLVC    multiply_by_row
        Pull    "r3-r6,r9-r11,pc",VS
; Return results
        MOV     r2, r9
        MOV     r0, r10
        MOV     r1, r11
        Debug   output,"RGB<->CIE returns",R0,R1,R2
        Pull    "r3-r6,r9-r11,pc"

; Multiply r0.r4 - r2.r6 by matrix row in r3. Returns r9 or error.
multiply_by_row
        Push    "r7-r8,r10-r11,lr"
; First entry for the row
        LDR     r7, [r3], #4
        MOV     r8, r7, ASR #16
        BIC     r7, r7, r8, LSL #16
        MUL     r9, r0, r7
        MUL     r10, r4, r8
        MUL     r11, r0, r8
        ADDS    r9, r9, r11, LSL#16
        ADC     r10, r10, r11, ASR#16
        MUL     r11, r4, r7
        ADDS    r9, r9, r11, LSL#16
        ADC     r10, r10, r11, ASR#16
; Second entry for the row
        LDR     r7, [r3], #4
        MOV     r8, r7, ASR #16
        BIC     r7, r7, r8, LSL #16
        MUL     r11, r1, r7
        ADDS    r9, r9, r11
        MUL     r11, r5, r8
        ADC     r10, r10, r11
        MUL     r11, r1, r8
        ADDS    r9, r9, r11, LSL#16
        ADC     r10, r10, r11, ASR#16
        MUL     r11, r5, r7
        ADDS    r9, r9, r11, LSL#16
        ADC     r10, r10, r11, ASR#16
; Third entry for the row
        LDR     r7, [r3], #4
        MOV     r8, r7, ASR #16
        BIC     r7, r7, r8, LSL #16
        MUL     r11, r2, r7
        ADDS    r9, r9, r11
        MUL     r11, r6, r8
        ADC     r10, r10, r11
        MUL     r11, r2, r8
        ADDS    r9, r9, r11, LSL#16
        ADC     r10, r10, r11, ASR#16
        MUL     r11, r6, r7
        ADDS    r9, r9, r11, LSL#16
        ADC     r10, r10, r11, ASR#16
; Check for overflow
        MOV     r9, r9, LSR #24
        ORR     r9, r9, r10, LSL #8
        MOVS    r10, r10, ASR #23 ; Top 9 bits of r10 must be the same for no overflow
        CMPNE   r10, #-1
        MSREQ   CPSR_f,#Z_bit                   ; clear V, keep EQ
        Pull    "r7-r8,r10-r11,pc",EQ
; Overflow, so return an error
        addr    r0, ErrorBlock_CTConvOver
        BL      LookupError                     ; Always sets the V bit
        Pull    "r7-r8,r10-r11,pc"

        END
@


4.2
log
@32-bit compatible.

Version 1.69. Tagged as 'Colours-1_69'
@
text
@d533 1
a533 1
        msr EQ ,CPSR_f,#Z_bit                   ; clear V, keep EQ
@


4.1
log
@Initial revision
@
text
@d19 1
a19 1
                               
d31 1
a31 1
      ]                      
d61 1
a61 1
; Copy data          
d163 1
a163 1
                               
d168 1
a168 1
        Pull    "R0-R7,PC",EQ,^
d177 2
a178 2
        MUL     R3,LR,R0                
        ADD     R3,R3,#calib_gammatables    
d183 1
a183 1
  
d209 1
a209 1
      
d212 1
a212 1
ReadCalibration_Code ROUT         
d216 1
a216 2
                                
        BIC     LR,LR,#V_bit
d222 1
a222 1
        Pull    "R0,R2-R5,PC",EQ,^      ; exiting with (V clear)
d230 1
a230 1
        MUL     R1,R3,R1                      
d232 1
a232 1
                                        
d235 1
a235 1
            
d237 2
a238 2
        Debug   newcalibrate,", size",R1                               
        
d242 1
a242 1
        Pull    "R0,R2-R5,PC",EQ,^      ; yes, so return without copying data
d251 2
a252 2
        Pull    "R0,R2-R5,PC",,^
                            
d258 1
a258 1
        ADD     R1,R1,R5,LSL #2         ; R1 == total size of table  
d261 1
a261 1
        Pull    "R0,R2-R5,PC",EQ,^      ; if so then return now - R1 already setup!
d269 1
a269 1
        Pull    "R0,R2-R5,PC",,^                                                                              
d272 1
a272 1
                            
d288 3
a290 3
        ADD     r1, r1, r3, LSL #2 
        ADD     r1, r1, r4, LSL #2 
        ADD     r1, r1, r5, LSL #2 
d301 1
a301 1
read_calibration    
d318 2
a319 2
       
ConvertDevicePalette_Code    
d323 1
a323 1
        
d330 2
a331 2
        Pull    "R0-R4,PC",MI,^                 ; exiting if the specified table is null
                                                                          
d376 2
a377 2
      [ newcalibration         
      
d385 1
a385 1
        CMPEQ   R3,#0                           ; if there is none at all 
d394 1
a394 1
       
d403 2
a404 2
        MOV     R2,R4                           ; use old code - ah borring!
        Pull    "R0-R1,R3-R4,PC",,^             ; returning the values as needed
d418 1
a418 1
        MOV     r2, r4                      
d449 1
a449 1
ConvertRGBToCIE_Code             
d468 1
a468 1
        CLRV   
d481 1
a481 1
        MOV     r1, r11                 
d486 1
a486 1
multiply_by_row              
d533 2
a534 1
        Pull    "r7-r8,r10-r11,pc",EQ,^
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
