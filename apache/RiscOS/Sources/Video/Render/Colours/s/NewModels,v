head	4.5;
access;
symbols
	Colours-1_95:4.5
	Colours-1_94:4.5
	Colours-1_93:4.5
	Colours-1_92:4.5
	Colours-1_91:4.5
	Colours-1_90:4.5
	Colours-1_89:4.5
	Colours-1_88:4.5
	Colours-1_87:4.4
	Colours-1_86:4.3
	Colours-1_85:4.3
	Colours-1_84:4.3
	Colours-1_83:4.3
	Colours-1_82:4.3
	Colours-1_81:4.3
	Colours-1_80:4.3
	Colours-1_79:4.3
	Colours-1_78:4.3
	Colours-1_77:4.3
	RO_5_07:4.3
	Colours-1_76:4.3
	Colours-1_75:4.3
	Colours-1_74:4.2
	Colours-1_73:4.2
	Colours-1_72:4.2
	dellis_autobuild_BaseSW:4.2
	Colours-1_71:4.2
	Colours-1_70:4.2
	Colours-1_69:4.2
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.2
	Colours-1_68:4.1
	Colours-1_67:4.1
	Ursula_merge:4.1
	nturton_Colours-1_65:4.1
	dcotton_colours_MPTInitialBuild:4.1.7.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2014.02.27.23.15.44;	author jlee;	state Exp;
branches;
next	4.4;
commitid	KBVViyk78fRijNqx;

4.4
date	2014.01.12.12.58.08;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	hf3poNjKTAt7nPkx;

4.3
date	2003.11.12.21.48.23;	author bavison;	state Exp;
branches;
next	4.2;

4.2
date	2000.05.12.12.34.34;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.42.19;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.42.19;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.08.34;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.48.17;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.11.14;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Performance improvements
Detail:
  A selection of performance improvements, mainly focusing around fixing the terrible ColourTrans_SelectTable performance when using the default 256 colour palette in a full 256 colour mode (i.e. not VIDC1 style)
  s/Header:
  - Add flag for whether MUL of large or negative numbers is slow
  s/Commons:
  - Update palette analysis code so that C256 modes with the default palette can use the same optimised routines as C64 modes with default palette.
  - Also detect G256 modes with the default palette and add a new set of best/worst colour routines for them
  - Remove unused ColErr macro and (now inaccurate) ARM2/ARM3 timing calculations
  - Optimised CompErr macro (used with slow best/worst colour functions). Three different variants depending on CPU, with the Cortex-A8 version being about twice as fast as the original.
  - Rewrote Find256 macro (used with default 256 colour palette), producing four different versions depending on CPU. Even the ARM2 compatible version should be about twice as fast as the original.
  - Strip out a few pointless best/worst wrapper functions
  s/NewModels:
  - Update ColourTrans_ConvertHSVToRGB to make use of SMULL where supported
Admin:
  Tested on Iyonix, BB-xM, StrongARM RiscPC
  Palette analysis fix means 256 colour modes using default RO 5 icon sprites (i.e. custom 256 colour palettes) are no longer as slow as treacle.
  256 grey modes are also nice and snappy too.


Version 1.88. Tagged as 'Colours-1_88'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > NewModels

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: ConvertRGBtoHSV_Code
;
; in:   r0  = R 0 ->   1.0 (16.16 fixed)
;       r1  = G 0 ->   1.0 (16.16 fixed)
;       r2  = B 0 ->   1.0 (16.16 fixed)
;
; out:  r0  = H 0-> 360.0 (16.16 fixed)
;       r1  = S 0->   1.0 (16.16 fixed)
;       r2  = V 0->   1.0 (16.16 fixed)
;
; This function will convert the given RGB colour into the HSV colour model.
;

ConvertRGBtoHSV_Code ROUT
                Debug   input1,"ConvertRGBtoHSV: R0-R2",R0,R1,R2
                Debug   input1,"ConvertRGBtoHSV: red, green, blue",R0,R1,R2

                Push    "r3-r10, lr"

                MOV     r8, r0
                MOV     r9, r1
                MOV     r10, r2                 ; move r,g and b into r8, r9 and r10.

                MOV     r6, r0
                CMP     r1, r6
                MOVGT   r6, r1
                CMP     r2, r6
                MOVGT   r6, r2                  ; r6 = max(red,green,blue)

                MOV     r7, r0
                CMP     r1, r7
                MOVLT   r7, r1
                CMP     r2, r7
                MOVLT   r7, r2                  ; r7 = min(red,green,blue)

                SUB     r5, r6, r7              ; v =(v-temp)

        ; r5     = max-min
        ; r6     = max (value)
        ; r7     = min (temp)
        ; r8-r10 = red, green, blue

                TEQ     r6, #0                  ; is value =0?
                MOVEQ   r4, #0
                BEQ     %FT10                   ; yes, so saturation =0

                MOV     r0, r5, ASL #16
                MOV     r1, r5, ASR #16
                BL      arith_DSdivS            ; r4 = (r0,r1)/r6
                DCB     r0, r6, r4
                ALIGN

10              TEQ     r4, #0                  ; if saturation =0, then hue is undefined
                MOVEQ   r3, #-1
                BEQ     %FT20                   ; and exit.

                SUB     r0, r6, r10
                MOV     r1, r0, ASR #16
                MOV     r0, r0, ASL #16
                BL      arith_DSdivS            ; r2 = (v-b)/(v-temp)
                DCB     r0, r5, r2
                ALIGN
                Push    "r2"                    ; and push to stack

                SUB     r0, r6, r9
                MOV     r1, r0, ASR #16
                MOV     r0, r0, ASL #16
                BL      arith_DSdivS            ; r2 = (v-g)/(v-temp)
                DCB     r0, r5, r2
                ALIGN
                Push    "r2"                    ; and push to stack

                SUB     r1, r6, r8
                MOV     r2, r1, ASR #16
                MOV     r1, r1, ASL #16
                BL      arith_DSdivS            ; r2 = (v-r)/(v-temp)
                DCB     r1, r5, r0
                ALIGN

                Pull    "r1-r2"                 ; r0 =Cr, r1 =Cg, r2 =Cb.

                TEQ     r8, r6                  ; if red=value then colour between yellow and magenta
                SUBEQ   r3, r2, r1
                TEQ     r9, r6                  ; if green=value then colour between cyan and yellow
                SUBEQ   r3, r0, r2
                ADDEQ   r3, r3, #&20000
                TEQ     r10, r6                 ; if blue=value then colour between magenta and cyan
                SUBEQ   r3, r1, r0
                ADDEQ   r3, r3, #&40000

                MOV     lr, #60
                MULS    r3, lr, r3              ; convert to degrees
                ADDMI   r3, r3, #360:SHL:16     ; and ensure not -ve

20      ; r3 = hue, r4 = saturation, r6 = value

                ADDS    r0, r3, #0              ; clear V
                MOV     r1, r4
                MOV     r2, r6                  ; move values down into correct return registers

                Debug   output,"Leaving RGBToHSV: h, s, v",R0,R1,R2

                Pull    "r3-r10, pc"

                LTORG

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: Mul_1616
;
; in:   $a = signed fixed point value
;       $b = signed fixed point value
;
; out:  $dest = result of $a*$b
;       r0, lr corrupt
;
; Multiply two 16.16 fixed point values, keeping the point at b16.
;
  [ NoARMM
           ; Long multiply not supported - do it the hard way
           MACRO
           Mul_1616 $dest, $a, $b
         [ "$a" <> "r0"
           ASSERT "$b" <> "r0"
           MOV    r0, $a
         ]
         [ "$b" <> "r1"
           MOV    r1, $b
         ]
           BL     _Mul_1616
         [ "$dest" <> "r0"
           MOV    $dest, r0
         ]
           MEND
           
_Mul_1616  ROUT

           Push  "r1-r3, lr"

           MOV    r2, r1, ASR #16       ; r2 = scale_hi
           BIC    r1, r1, r2, LSL #16   ; r1 = scale_lo
           MOV    r3, r0, ASR #16       ; r3 = input_hi
           BIC    r0, r0, r3, LSL #16   ; r0 = input_lo

           MUL    lr, r2, r0            ; lr = scale_hi * input_lo
           MLA    lr, r1, r3, lr        ; lr = scale_lo * input_hi + lr
           MUL    r0, r1, r0            ; r0 = scale_lo * input_lo
           MUL    r1, r2, r3            ; r1 = scale_hi * input_hi

           ADD    r0, lr, r0, LSR #16
           ADD    r0, r0, r1, LSL #16   ; r0 = answer!

           Pull  "r1-r3, pc"
  |
           ; Long multiply supported - inline the code
           MACRO
           Mul_1616 $dest, $a, $b
           ASSERT "$dest" <> "$b"
           ASSERT "$dest" <> "lr"
           SMULL  $dest, lr, $b, $a
           MOV    $dest, $dest, LSR #16
           ORR    $dest, $dest, lr, LSL #16
           MEND
  ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: ConvertHSVtoRGB
;
; in:   r0 = H 0 -> 360.0 (16.16 fixed)
;       r1 = S 0 ->   1.0 (16.16 fixed)
;       r2 = V 0 ->   1.0 (16.16 fixed)
;
; out:  r0 = R 0 ->   1.0 (16.16 fixed)
;       r1 = G 0 ->   1.0 (16.16 fixed)
;       r2 = B 0 ->   1.0 (16.16 fixed)
;
; This routine converts from HSV to RGB colour.
;

ConvertHSVtoRGB_Code ROUT
                Debug   input1,"ConvertHSVtoRGB: R0-R2",R0,R1,R2
                Debug   input2,"ConvertHSVtoRGB: h, s, v",R0,R1,R2

                Push    "r3-r9 , lr"

        ; check for achromatic colour case

                TEQ     r1, #0                  ; is saturation =0?
                BNE     %FT10

                CMP     r0, #0                  ; is hue undefined? (will Clear V!)
                ADREQ   r0, ErrorBlock_CTBadHSV
                BLEQ    LookupError             ; Always sets the V bit
                Pull    "r3-r9 , pc",VS         ; in the achromatic colour case, hue is undefined

                MOV     r0, r2
                MOV     r1, r2                  ; setup r0, r1 to contain V
                Debug   output,"RGBToHSV: achromatic",R0,R1
                Pull    "r3-r9, pc"             ; and then return home

10      ; so its not achromatic it is infact a chromatic colour
        ; we must now calculate the R,G and B based on the positions given
        ; in the hex cone.
        ;
                CMP     r0, #360:SHL:16
                SUBGE   r0, r0, #360:SHL:16     ; ensure within nice range

                MOV     r4, r1                  ; r4 = saturation
                MOV     r5, r2                  ; r5 = value

                MOV     r1, r0, ASR #16
                MOV     r0, r0, ASL #16
                MOV     r2, #60:SHL:16          ; convert to nice whizzo value
                BL      arith_DSdivS
                DCB     r0, r2, r3              ; r3 =result of (hue/60)
                ALIGN

                MOV     r6, r3, ASR #16         ; r6 =Floor(hue)
                BIC     r3, r3, r6, ASL #16     ; r3 =fractional element of hue

                RSB     r1, r4, #&10000
                Mul_1616 r7, r5, r1             ; = v*(1-s)

                Mul_1616 r0, r4, r3             ; = (s*f)
                RSB     r0, r0, #&10000         ; = 1-(s*f)
                Mul_1616 r8, r0, r5             ; = v*(1-(s*f))

                RSB     r1, r3, #&10000
                Mul_1616 r0, r4, r1             ; = (s*(1-f)
                RSB     r0, r0, #&10000
                Mul_1616 r0, r0, r5             ; = v*(1-S*(1-f)
                ADDS    r9, r0, #0              ; clear V

        ; f=r3, s=r4, v=r5, i=r6, m=r7, n=r8, k=r9

                Debug   output,"No debugging on tail end - need rewrite!)"

                MOV     lr, pc                  ; setup return address
                ADD     pc, pc, r6, ASL #4
                Pull    "r3-r9, pc"             ; return home

                MOV     r0, r5                  ; case 0; r=v, g=k, b=m
                MOV     r1, r9
                MOV     r2, r7
                MOV     pc, lr

                MOV     r0, r8                  ; case 1; r=n, g=v, b=m
                MOV     r1, r5
                MOV     r2, r7
                MOV     pc, lr

                MOV     r0, r7                  ; case 2; r=m, g=v, b=k
                MOV     r1, r5
                MOV     r2, r9
                MOV     pc, lr

                MOV     r0, r7                  ; case 3; r=m, g=n, b=v
                MOV     r1, r8
                MOV     r2, r5
                MOV     pc, lr

                MOV     r0, r9                  ; case 4; r=k, g=m, b=v
                MOV     r1, r7
                MOV     r2, r5
                MOV     pc, lr

                MOV     r0, r5                  ; case 5; r=v, g=m, b=n
                MOV     r1, r7
                MOV     r2, r8
                MOV     pc, lr

                LTORG

                MakeEitherErrorBlock CTBadHSV

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: ConvertRGBtoCMYK
;
; in:   r0  = R 0 -> 1.0 (16.16 fixed)
;       r1  = G 0 -> 1.0 (16.16 fixed)
;       r2  = B 0 -> 1.0 (16.16 fixed)
;
; out:  r0  = C 0 -> 1.0 (16.16 fixed)
;       r1  = M 0 -> 1.0 (16.16 fixed)
;       r2  = Y 0 -> 1.0 (16.16 fixed)
;       r3  = K 0 -> 1.0 (16.16 fixed)
;
; Conversion of R,G and B to C,M,Y and K.
;

ConvertRGBtoCMYK_Code ROUT

                Debug   input1,"RGBtoCMYK: R0-R2",R0,R1,R2
                Debug   input2,"RGBtoCMYK: R G B",R0,R1,R2

                Push    "lr"

                RSB     r0, r0, #&10000         ; negate the colour vector to get CMY
                RSB     r1, r1, #&10000
                RSB     r2, r2, #&10000

                MOV     r3, r0
                CMP     r1, r3
                MOVLT   r3, r1
                CMP     r2, r3
                MOVLT   r3, r2                  ; get min (C,M,Y)

                SUB     r0, r0, r3
                SUB     r1, r1, r3
                SUB     r2, r2, r3              ; subtract key (equally from all colours)

                Debug   output,"RGBtoCMYK returns C M Y K",R0,R1,R2,R3

                CLRV
                Pull    "pc"

                LTORG

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: ConvertCMYKtoRGB
;
; in:   r0 = C 0 -> 1.0 (16.16 fixed)
;       r1 = M 0 -> 1.0 (16.16 fixed)
;       r2 = Y 0 -> 1.0 (16.16 fixed)
;       r3 = K 0 -> 1.0 (16.16 fixed)
;
; out:  r0 = R 0 -> 1.0 (16.16 fixed)
;       r1 = G 0 -> 1.0 (16.16 fixed)
;       r2 = B 0 -> 1.0 (16.16 fixed)
;       r3 preserved.
;
; This routine converts from CMYK to RGB, based around the CMY colour model
; conversion with extensions for K (black).
;

ConvertCMYKtoRGB_Code ROUT

                Debug   input1,"CMYKtoRGB: R0-R3",R0,R1,R2,R3
                Debug   input2,"CMYKtoRGB: C M Y K",R0,R1,R2,R3

                Push    "r3, lr"

                ADD     r0, r0, r3              ; restore key whilst keeping in range
                CMP     r0, #&10000
                MOVGT   r0, #&10000
                ADD     r1, r1, r3
                CMP     r1, #&10000
                MOVGT   r1, #&10000
                ADD     r2, r2, r3
                CMP     r2, #&10000
                MOVGT   r2, #&10000

                RSB     r0, r0, #&10000         ; re-invert colour index
                RSB     r1, r1, #&10000
                RSB     r2, r2, #&10000

                Debug   output,"CMYKtoRGB: returning R G B",R0,R1,R2

                CLRV
                Pull    "r3, pc"

                LTORG

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Subroutine to divide a double precision unsigned number by a single
; precision unsigned number, yielding a single precision unsigned result.
; The word following the BL should contain the number of the register holding
; the ls part of the dividend in its bottom byte; the ms part of the dividend
; is in the next register. The next byte of the word contains the number of
; the divisor register, and the next byte the number of the register in which
; to deposit the quotient.
;   This_Code routine will only work on registers R0-R8. It assumes that the
; divisor is not zero, and that the quotient will not overflow.

arith_DSdivS
        Push    "R0-R8"
        SUB     R8,R14,PC
        ADD     R8,PC,R8                ;R8 = LR without flags + 4
        LDRB    R0,[R8,#-4]             ;Get first operand
        ADD     R0,R13,R0,LSL #2
        LDMIA   R0,{R0,R1}
        LDRB    R2,[R8,#-3]             ;Get second operand
        LDR     R2,[R13,R2,LSL #2]
        MOV     R3,#1                   ;Init. quotient with a sentinel bit
arith_DSdivS_loop
        ADDS    R0,R0,R0                ;Shift a bit up into the ms half of
        ADC     R1,R1,R1                ;  the dividend
        CMP     R1,R2                   ;Do trial subtraction, producing
        SUBCS   R1,R1,R2                ;  result bit in C
        ADCS    R3,R3,R3                ;Result bit into result, then loop
        BCC     arith_DSdivS_loop       ;  unless sentinel bit shifted out
        LDRB    R0,[R8,#-2]             ;Store the result on the stack, to be
        STR     R3,[R13,R0,LSL #2]      ;  picked up by the correct registers
        Pull    "R0-R8"
        ADD     PC,R14,#4               ;Skip the argument word on return


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


        END

@


4.4
log
@Fix for erroneous mode change on return from ColourTrans_ConvertCMYKToRGB
This less often used colour model had a 26 bit style return, manifesting in !Paint aborting apparently on exit from CallAVector trying to pop from an already empty IRQ stack.
Fixes ticket #339.

Version 1.87. Tagged as 'Colours-1_87'
@
text
@d132 64
a249 1
                MOV     r0, r5
d251 1
a251 2
                BL      mul                     ; = v*(1-s)
                MOV     r7, r0                  ; r0 =result
d253 3
a255 7
                MOV     r0, r4
                MOV     r1, r3
                BL      mul                     ; = (s*f)
                RSB     r1, r0, #&10000         ; = 1-(s*f)
                MOV     r0, r5
                BL      mul                     ; = v*(1-(s*f))
                MOV     r8, r0
a256 1
                MOV     r0, r4
d258 3
a260 4
                BL      mul                     ; = (s*(1-f)
                RSB     r1, r0, #&10000
                MOV     r0, r5
                BL      mul                     ; = v*(1-S*(1-f)
a447 35


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: mul
;
; in:   r0 = fixed point value (a)
;       r1 = fixed point value (b)
;
; out:  r0 = result of a*b
;
; Multiply two 16.16 fixed point values, keeping the point at b16.
;

mul        ROUT

           Push  "r1-r3, lr"

           MOV    r2, r1, ASR #16       ; r2 = scale_hi
           BIC    r1, r1, r2, LSL #16   ; r1 = scale_lo
           MOV    r3, r0, ASR #16       ; r3 = input_hi
           BIC    r0, r0, r3, LSL #16   ; r0 = input_lo

           MUL    lr, r2, r0            ; lr = scale_hi * input_lo
           MLA    lr, r1, r3, lr        ; lr = scale_lo * input_hi + lr
           MUL    r0, r1, r0            ; r0 = scale_lo * input_lo
           MUL    r1, r2, r3            ; r1 = scale_hi * input_hi

           ADD    r0, lr, r0, LSR #16
           ADD    r0, r0, r1, LSL #16   ; r0 = answer!

           Pull  "r1-r3, pc"

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@


4.3
log
@A missing bit of 32-bitting that was done last October. VersionNum not updated
for consistency with the released Tungsten builds.
@
text
@d344 2
a345 1
                Pull    "r3, pc",,^
@


4.2
log
@32-bit compatible.

Version 1.69. Tagged as 'Colours-1_69'
@
text
@d367 3
a369 2
        BIC     R8,R14,#&FC000003
        LDRB    R0,[R8]                 ;Get first operand
d372 1
a372 1
        LDRB    R2,[R8,#1]              ;Get second operand
d382 1
a382 1
        LDRB    R0,[R8,#2]              ;Store the result on the stack, to be
@


4.1
log
@Initial revision
@
text
@d24 1
a24 1
; 
d28 1
a28 1
; 
d31 1
a31 1
                                                 
d41 1
a41 1
                
d53 1
a53 1
                
d55 1
a55 1
        
d62 1
a62 1
                MOVEQ   r4, #0           
d70 1
a70 1
                
d72 1
a72 1
                MOVEQ   r3, #-1 
d115 1
a115 1
                MOV     r0, r3
d118 1
a118 1
                
d121 1
a121 1
                Pull    "r3-r10, pc",,^
d137 1
a137 1
; 
d141 1
a141 1
; 
d144 1
a144 1
                                               
d154 1
a154 1
                BNE     %FT10                   
d162 1
a162 1
                MOV     r1, r2                  ; setup r0, r1 to contain V  
d164 1
a164 1
                Pull    "r3-r9, pc",,^          ; and then return home
d186 2
a187 2
                MOV     r0, r5             
                RSB     r1, r4, #&10000       
d195 1
a195 1
                MOV     r0, r5                 
d200 1
a200 1
                RSB     r1, r3, #&10000         
d205 2
a206 2
                MOV     r9, r0                 
                   
d208 1
a208 1
                    
d210 1
a210 1
                                     
d213 2
a214 2
                Pull    "r3-r9, pc",,^          ; return home
                             
d218 1
a218 1
                MOVS    pc, lr
d223 2
a224 2
                MOVS    pc, lr              
                
d228 1
a228 1
                MOVS    pc, lr
d233 1
a233 1
                MOVS    pc, lr
d238 1
a238 1
                MOVS    pc, lr
d243 1
a243 1
                MOVS    pc, lr
d261 1
a261 1
; 
d266 1
a266 1
; 
d269 2
a270 2
                              
ConvertRGBtoCMYK_Code ROUT            
d290 1
a290 1
                                                
d293 2
a294 1
                Pull    "pc",,^
d311 1
a311 1
; 
d316 1
a316 1
; 
d320 2
a321 2
                                           
ConvertCMYKtoRGB_Code ROUT                   
d325 1
a325 1
                
d327 1
a327 1
                                   
d334 1
a334 1
                ADD     r2, r2, r3           
d341 1
a341 1
                                                
d398 1
a398 1
; 
d400 1
a400 1
; 
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
