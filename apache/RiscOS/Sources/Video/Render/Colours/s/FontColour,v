head	4.6;
access;
symbols
	Colours-1_95:4.6
	Colours-1_94:4.6
	Colours-1_93:4.5
	Colours-1_92:4.5
	Colours-1_91:4.5
	Colours-1_90:4.5
	Colours-1_89:4.5
	Colours-1_88:4.5
	Colours-1_87:4.5
	Colours-1_86:4.5
	Colours-1_85:4.4
	Colours-1_84:4.4
	Colours-1_83:4.4
	Colours-1_82:4.4
	Colours-1_81:4.4
	Colours-1_80:4.4
	Colours-1_79:4.4
	Colours-1_78:4.4
	Colours-1_77:4.4
	RO_5_07:4.4
	Colours-1_76:4.4
	Colours-1_75:4.4
	Colours-1_74:4.3
	Colours-1_73:4.3
	Colours-1_72:4.3
	dellis_autobuild_BaseSW:4.3
	Colours-1_71:4.3
	Colours-1_70:4.3
	Colours-1_69:4.3
	sbrodie_sedwards_16Mar2000:4.2
	dcotton_autobuild_BaseSW:4.4
	Colours-1_68:4.2
	Colours-1_67:4.2
	Ursula_merge:4.2
	nturton_Colours-1_65:4.2
	dcotton_colours_MPTInitialBuild:4.1.7.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	rthornb_UrsulaBuild_01May1998:4.2
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.6
date	2016.05.08.17.31.21;	author jlee;	state Exp;
branches;
next	4.5;
commitid	d1ySJ33i6bBREH5z;

4.5
date	2013.08.06.23.49.21;	author jlee;	state Exp;
branches;
next	4.4;
commitid	wewI5Vx1d9Rn5s0x;

4.4
date	2001.05.14.15.16.01;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	2000.05.12.12.34.34;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.01.21.17.44.33;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.42.18;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.42.18;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.08.20;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.48.12;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.11.09;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Avoid unnecessary remainder calculations
Detail:
  s/Commons, s/DevicePal, s/Dither, s/FontColour - Avoid unnecessary remainder calculations in DivRem macro
  s/Header - Remove unused Divide macro
Admin:
  Tested on Cortex-A15


Version 1.94. Tagged as 'Colours-1_94'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > FontColour

;------------------------------------------------------------------------------
;
; ColourTrans_SetFontColours implementation
;
;   Entry: R0 font handle / =0 for no change
;          R1 background physical colour
;          R2 foreground physical colour
;          R3 maximum offset
;
;   Exit:  V =1 => R0 ->Error block
;          else,   R0 preserved
;                  R1,R2,R3 for passing to Font_SetFontColour
;
; This routine will get the font colour parameters and then set the
; colours.
;
;------------------------------------------------------------------------------

SetFontColours_Code ROUT

        Debug   input1,"SetFontColours: R0-R3",R0,R1,R2,R3
        Debug   input2,"SetFontColours: handle, for/back, offset",R0,R1,R2,R3

        Push    "R0-R6,LR"

        MOV     R4,R1
        MOV     R5,R2
        MOV     R6,R3                   ;Take copies of fore, back and offset

        MOV     R10,#-1                 ;Return colours need not preserve colours
        BL      ReturnFontColours_Alt

        ADDVC   LR,SP,#4
        STMVCIA LR,{R1-R3}              ;Store return parameters

        MOVVC   R1,#0                   ;No colour table
        MOVVC   R2,R4                   ;Background physical colour
        MOVVC   R3,R5                   ;Foreground physical colour
        MOVVC   R4,R6                   ;and the offset
        SWIVC   XFont_SetColourTable
        BVC     setfontcolours_exit     ;Leave now because it worked, otherwise fall back to RISC OS 2.00 method

        LDMIA   SP,{R0-R3}
        SWI     XFont_SetFontColours    ;And set it...

setfontcolours_exit
        STRVS   R0,[SP]
        [ debugoutput
        Pull    "R0-R6,LR"
        Debug   output,"Leaving SetFontColours R0-R3",R0,R1,R2,R3
        MOV     PC,LR
        |
        Pull    "R0-R6,PC"              ;Return allowing flags through
        ]

;------------------------------------------------------------------------------
;
; ColourTrans_ReturnFontColours implementation
;
;   Entry: R0 handle
;          R1 background physical colour
;          R2 foreground physical colour
;          R3 offset
;
;   Exit:  V =1 => R0 ->Error block
;          else,   R0 unchanged,
;                  R1-R3 passable to Font_SetFontColours
;
; Return suitable parameters for passing to Font_SetFontColours.  This routine
; checks to see what mode we
;
;------------------------------------------------------------------------------

ReturnFontColours_Code ROUT
        Debug   input1,"ReturnFontColours: R0-R3",R0,R1,R2,R3
        Debug   input2,"ReturnFontColours: handle, back, fore, offset",R0,R1,R2,R3

        MOV     R10,#0                  ;Preserve the font colours at all costs

ReturnFontColours_Alt
      [ buginRISCOSLib
        CMP     R0,#-1                  ;Early versions of RISCOS_Lib pass -1 for current handle!
        MOVLE   R0,#0
      ]

        LDRB    R11,[WP,#CachedL2BPP]
        CMP     R11,#3                  ;Is it an 8BPP mode?
        BLT     returnfontcolours_slow

;..............................................................................
;
; Cycle through the pseudo palette entries within the Font Manager setting
; up entries required for the selected colours.
;
; in    R0 handle
;       R1 physical background
;       R2 physical foreground
;       R3 offset
;
; out   V =1 => R0 -> error block
;       else,   as for Font_SetFontColours

returnfontcolours_8bpp
        Push    "R4-R6,LR"

        LDR     R6,=&65757254           ;="True" to tell Font Manager about 24bit values
        MOV     R4,R1
        MOV     R5,R2                   ;Copy physical colours up

        AND     R2,R2,#15

        Push    "R0-R3"

        TEQ     R10,#0                  ;Do I need to preserve the colour settings?
        BEQ     colour_preserve         ;Yes, so do this cleanly

        SWI     XFont_SetPalette
        STRVS   R0,[SP]                 ;Otherwise just set entry
        B       skip_colour_preserve    ;and then exit back to the caller

colour_preserve
        SWI     XFont_CurrentFont


        Push    "R1-R3"                 ;Store the colours and the font
        ADD     LR,SP,#4*4
        LDMIA   LR,{R1-R3}              ;Get the colours to change to
        SWI     XFont_SetPalette        ;Setup the palette entry
        Pull    "R1-R3"
        STRVS   R0,[SP]                 ;Restore back to original

        SavePSR R6
        MOV     R0,#0
        SWI     XFont_SetFontColours    ;Ignore errors when restoring colour
        RestPSR R6,,f                   ;(it may be invalid anyway)

skip_colour_preserve
        [ debugoutput
        Pull    "R0-R6,LR"
        Debug   output,"Leaving ReturnFontColours: R0-R3",R0,R1,R2,R3
        MOV     PC,LR
        |
        Pull    "R0-R6,PC"              ;Finished so return now
        ]

        LTORG

;..............................................................................
;
; Attempt to find the closest set of colours to the specified foreground
; and backgrounds attempting to put in as many anti-aliased colours upto
; the specified limit as specified.
;
; The routine works by performing the following:
;
; It first calculates suitable colour numbers for the foreground and background
; colours.  The background colour number is then stacked as it is not
; needed for any of the future calculations, we then attempt to work out
; how many aliasing colours we can add in, this is handled by two
; specific routines.
;
; We first get the two palette entries for the colours and then attempt to
; divide the difference by the number of steps required, from here
; we can then step from the foreground to the background looking for a suitable
; range of colours.
;
; The first attempt we make is to scan from the background back to the foreground
; by adding the offset to the foreground colour number (if this ends up outside
; the palette we abort as it is invalid) and attempting to calculate the error
; between the two colours (ie. palette entry and required colour) if this is
; <= to the error between each step within the foreground -background /divide
; current offset then we allow it and loop down until the offset is zero.
;
; If the test fails then the routine attempts to perform the same by scanning
; backwards, again if this fails the routine decreases the global offset and
; starts again until the offset is zero when it then abandons and
; anti-aliased text is used.
;
; in    R0 handle
;       R1 physical background
;       R2 physical foreground
;       R3 offset
;
; out   V =1 => R0 -> error block
;       else,   as for Font_SetFontColours

returnfontcolours_slow ROUT

        Push    "R0-R1,R4-R11,LR"

        BIC     R5,R1,#&FF
        BIC     R4,R2,#&FF              ;Setup copies of the foreground/background colours
        MOV     R7,#0                   ;I have not cached the palette yet

        MOV     R0,R5
        BL      TryCache                ;Attempt to locate the background colour in colour cache
        LDREQ   R1,[R1,#CachedColour]
        BEQ     returnfontcolours_gotback

        MOV     R0,#-1                  ;Read the current palette for the current mode
        MOV     R1,#-1
        BuildColoursForBest             ;Attempt to read the palette
        MOV     R7,R0
        MOV     R8,R1                   ;Copy bounds into R7,R8 to be used later on

        MOV     R2,R5
        GetBestColour                   ;Attempt to get the colour we want

        MOV     R0,R2                   ;Colour number
        MOV     R1,R2                   ;GCOL
        MOV     R2,R5                   ;Physical colour
        BL      WriteCacheEntry

returnfontcolours_gotback
        ORR     R5,R5,R1                ;Generate combined physical and logical colour
        STR     R1,[SP,#CallerR1]       ;Store the background colour

        MOV     R0,R4                   ;Now attempt to lookup the foreground colour
        BL      TryCache
        LDREQ   R1,[R1,#CachedColour]   ;Read the associated colour number
        BEQ     returnfontcolours_gotfore

        MOVS    R0,R7
        MOVNE   R1,R8                   ;Has the palette already been cached, if not then re-read
        BNE     returnfontcolours_havepalette

        MOV     R0,#-1
        MOV     R1,#-1
        BuildColoursForBest             ;Read the palette of the current mode
        MOV     R7,R0
        MOV     R8,R1                   ;Take copy of the pointers around the palette

returnfontcolours_havepalette
        MOV     R2,R4
        GetBestColour                   ;Attempt to locate the foreground physical colour

        MOV     R0,R2
        MOV     R1,R2
        MOV     R2,R4
        BL      WriteCacheEntry         ;Write colour number, GCOL and physical colours to cache

returnfontcolours_gotfore
        ORR     R4,R4,R1                ;Munge to make foreground physical colour + colour number

        MOVS    R0,R7                   ;Has it been cached already?
        MOVNE   R1,R8
        BNE     %FT10

        MOV     R0,#-1                  ;...otherwise read for the current mode
        MOV     R1,#-1
        BuildColoursForBest             ;Only re-build if not recached
10
        Debuga  fontcolours,"Palette from",R0
        Debug   fontcolours," to",R1
        Debuga  fontcolours,"User specified offset",R3
        Debuga  fontcolours,", background",R4
        Debug   fontcolours,", foreground",R5

        CMP     R3,#14                  ;Can only have a maximum of 14 different cowlours
        MOVGT   R3,#14                  ;Truncate if too big... then we can boogie!

        MOV     R2,R4,LSR #16
        AND     R2,R2,#&FF00
        AND     R10,R5,#&FF000000
        RSBS    R10,R2,R10,LSR #16
        RSBMI   R10,R10,#0              ;Get the difference between the two blue points (ensure +ve)
        MOV     LR,#0
        ORRMI   LR,LR,#1

        MOV     R2,R4,LSR #8
        AND     R2,R2,#&FF00
        AND     R9,R5,#&FF0000
        RSBS    R9,R2,R9,LSR #8
        RSBMI   R9,R9,#0                ;Get the difference between the two green points (ensure +ve)
        ORRMI   LR,LR,#2

        AND     R2,R4,#&FF00
        AND     R8,R5,#&FF00
        RSBS    R8,R2,R8
        RSBMI   R8,R8,#0                ;Get the difference between the two red points (ensure +ve)
        ORRMI   LR,LR,#4

        ADR     R2,StaticFontColourCode
        ADD     R2,R2,LR,LSL #4           ;4 words of code per case (3 bit selector in LR)
        STR     R2,[WP,#FontColourCodeAt]

returnfontcolours_loop
        Debug   fontcolours3,"Offset before scanning",R3

        CMP     R3,#0                   ;Have we bottomed out?
        MOVLT   R3,#0
        ANDLE   R2,R4,#&FF              ;Yup... so exit (if <0 then convert to monohrome)
        BLT     returnfontcolours_exit

        Push    "R3,R8-R10"

        ADD     R3,R3,#1                ;Try offset of n+1

        AND     R2,R4,#&FF00            ;Get the red starting point
        DivRem  R11,R8,R3,LR,norem      ;..divide by the step value
        ORR     R8,R2,R11,LSL #16       ;..combine to make an nice happy value

      [ :LNOT: checkluminance
        LDR     R7,[WP,#ColourErrorLoading]
        AND     R2,R7,#&FF00
        MOV     R2,R2,LSR #8
        MOV     R11,R11,LSR #8
        MUL     LR,R11,R11
        MUL     R6,LR,R2                ;Convert so that red step = red^2*error loading
      ]

        MOV     R2,R4,LSR #8
        AND     R2,R2,#&FF00
        DivRem  R11,R9,R3,LR,norem
        ORR     R9,R2,R11,LSL #16       ;Get the green step and combine with starting green

      [ :LNOT: checkluminance
        AND     R2,R7,#&FF0000
        MOV     R2,R2,LSR #16
        MOV     R11,R11,LSR #8
        MUL     LR,R11,R11              ;Get the step and multiply by the error loading, square it
        MLA     R6,LR,R2,R6             ;and combine with current value
      ]

        MOV     R2,R4,LSR #16
        AND     R2,R2,#&FF00
        DivRem  R11,R10,R3,LR,norem
        ORR     R10,R2,R11,LSL #16      ;Do the same again but this time for the blue (calculate the step)

      [ :LNOT: checkluminance
        MOV     R2,R7,LSR #24
        MOV     R11,R11,LSR #8
        MUL     LR,R11,R11
        MLA     R6,LR,R2,R6             ;And then play around with the loading for this colour
      ]

        Debuga  fontcolours2,"Step+start red",R8
        Debuga  fontcolours2,", green",R9
        Debug   fontcolours2,", blue",R10
        Debug   fontcolours2 :LAND: checkluminance,"Step as an error",R6

        Pull    "R3"                    ;Restore the step value back to its normal happy self

        CLC
        BL      checkforwards
        BLCC    checkbackwards          ;Scan fowards from current pointer, if that fails look backwards
        BCS     returnfontcolours_altexit

        Debug   fontcolours2,"Failed to match suitable range"

returnfontcolours_failed
        Pull    "R8-R10"
        SUB     R3,R3,#1                ;Decrease the step value
        B       returnfontcolours_loop

returnfontcolours_altexit
        Pull    "R8-R10"                ;Balance the stack ready to exit

returnfontcolours_exit
        Pull    "R0-R1,R4-R11"          ;Restore ready to setup the colours
        TEQ     R10,#0
        SWINE   XFont_SetFontColours    ;If R10<>0 then must set the colours

        Pull    "PC"

;..............................................................................

; in    R0 ->palette table
;       R1 ->end of palette table
;       R3 offset value
;       R4 packed foreground + logical colour
;       R5 packed background + logical colour
;       R8,R9,R10 contain base values + step to next
;
; out   C =1 => suitable match found
;       C =0 => no match found yet

checkforwards ROUT

        Push    "R0,R3-R5,R8-R10,LR"

        AND     R4,R4,#&FF              ;Get the foreground index into the palette
        SUB     R5,R1,R0                ;Get the range of the palette

checkforwards_loop
        ADD     R4,R4,#1                ;Advance the index
        CMP     R4,R5,LSR #2            ;If outside acceptable range then exit
        LDRLT   R11,[R0,R4,LSL #2]      ;Get the physical entry to compare against and compare
        BLLT    advanceRGB
        BGE     checkfnomatch

        SUBS    R3,R3,#1                ;Decrease offset until happy with the result
        BNE     checkforwards_loop

        Pull    "R0,R3-R5,R8-R10,LR"

        Debug   fontcolours,"Check forwards matched with offset",R3

checkprovedok
        AND     R2,R4,#&FF
        RSB     R3,R3,#0
        SUB     R2,R2,R3                ;Calculate meaninful offset + foreground colour
        SEC
        MOV     PC,LR

checkfnomatch
        CLC
        Pull    "R0,R3-R5,R8-R10,PC"

;..............................................................................

; in    R0 ->palette table
;       R1 ->end of palette table
;       R3 offset value
;       R4 packed foreground + logical colour
;       R5 packed background + logical colour
;       R8,R9,R10 contain base values + step to next
;
; out   C =1 => suitable match found
;       C =0 => no match found yet

checkbackwards ROUT

        Push    "R0,R3-R4,R8-R10,LR"

        AND     R4,R4,#&FF              ;Get the foreground logical colour

checkbackwards_loop
        SUBS    R4,R4,#1                ;When we step below zero then we should exit
        BLT     checkbnomatch

        LDR     R11,[R0,R4,LSL #2]      ;Get the physical colour associated with the logical
        BL      advanceRGB              ;and then perform the physical advance and comparison
        BGE     checkbnomatch

        SUBS    R3,R3,#1                ;Decrease the offset and loop until done
        BNE     checkbackwards_loop

        Pull    "R0,R3-R4,R8-R10,LR"
        Debug   fontcolours,"Check backwards matched with offset",R3
        RSB     R3,R3,#0                ;Invert offset before passing to generic exit routine
        B       checkprovedok           ;...and then exit

checkbnomatch
        CLC
        Pull    "R0,R3-R4,R8-R10,PC"

;..............................................................................

; in    R8 packed red + step
;       R9 packed green + step
;       R10 packed green + step
;       R11 physical colour to compare against
;
; out   R2 palette entry calculate converted luminance (0...255)
;       R8,R9,R10 updated

advanceRGB ROUT

      [ checkluminance
        Entry   "R0-R1,R3"
      |
        Entry   "R0-R1,R3-R5"
      ]

        MOV     R0,R8,LSL #16
        MOV     R0,R0,LSR #16           ;Extract the red
        MOV     R1,R9,LSL #16
        MOV     R1,R1,LSR #16           ;Extract the green
        MOV     R3,R10,LSL #16
        MOV     R3,R3,LSR #16           ;Extract the blue

        Debuga  fontcolours2,"Before adjustment red",R0
        Debuga  fontcolours2,", green",R1
        Debug   fontcolours2,", blue",R3

        Branch  WP,FontColourCodeAt     ;Call routine to modify the three components

        Debuga  fontcolours2,"After adjustment red",R0
        Debuga  fontcolours2,", green",R1
        Debug   fontcolours2,", blue",R3

        MOV     R8,R8,LSR #16
        ORR     R8,R0,R8,LSL #16        ;Remake the red + step value into single word
        MOV     R9,R9,LSR #16
        ORR     R9,R1,R9,LSL #16        ;Remake the green + step value into single word
        MOV     R10,R10,LSR #16
        ORR     R10,R3,R10,LSL #16      ;Remake the blue + step value into single word

      [ checkluminance

        ! 0,"Font colours derived by luminance matching"

        MOV     LR,#77
        MUL     R2,LR,R0                ;77*red
        MOV     LR,#150
        MLA     R2,LR,R1,R2             ;77*red +150*green
        RSB     R3,R3,R3,LSL #3
        ADD     R2,R2,R3,LSL #2         ;77*red +150*green +27*blue (requested as luminance)

        MOV     LR,#&FF
        AND     R0,LR,R11,LSR #8        ;Extract the red value of the colour
        MOV     R1,#77
        MUL     R0,R1,R0                ;77*red
        AND     R3,LR,R11,LSR #16
        MOV     R1,#150
        MLA     R0,R1,R3,R0             ;77*red +150*green
        MOV     R3,R11,LSR #24
        RSB     R3,R3,R3,LSL #3
        ADD     R0,R0,R3,LSL #2         ;77*red +150*green +27*blue (palette as luminance)

        MOV     R1,R8,LSR #24           ;Get the red step value
        MOV     LR,#77
        MUL     R1,LR,R1                ;77*red
        MOV     R3,R9,LSR #24
        MOV     LR,#150
        MLA     R1,R3,LR,R1             ;77*red +150*green
        MOV     R3,R10,LSR #24
        RSB     R3,R3,R3,LSL #3
        ADD     R1,R1,R3,LSL #2         ;77*red +150*green +27*blue (difference as luminance)

        Debug   fontcolours3,"Luminance of entry looking for",R2
        Debug   fontcolours3,"Luminance of entry matching against",R0
        Debug   fontcolours3,"Step value as a luminance",R1

        SUBS    R0,R0,R2,LSR #8
        RSBMI   R0,R0,#0                ;Ensure the colour is valid
        CMP     R0,R1

        Debug   fontcolours3,"Difference between required and match",R0

      |

        LDR     R4,[WP,#ColourErrorLoading]
        MOV     R5,#&FF                 ;Get the error loading value and the mask to be used

        MOV     R0,R0,LSR #8
        AND     LR,R5,R11,LSR #8
        SUBS    R0,R0,LR
        RSBMI   R0,R0,#0
        MUL     LR,R0,R0                ;Get the difference between the two colours and
        AND     R2,R5,R4,LSR #8         ;convert the red component via its error loading
        MUL     R0,R2,LR

        AND     LR,R5,R11,LSR #16
        RSBS    R1,LR,R1,LSR #8
        RSBMI   R1,R1,#0
        MUL     LR,R1,R1
        AND     R2,R5,R4,LSR #16        ;Do the same with the green and combine with current value
        MLA     R0,LR,R2,R0

        MOV     R3,R3,LSR #8
        SUBS    R3,R3,R11,LSR #24
        RSBMI   R3,R3,#0
        MUL     LR,R3,R3
        MOV     R4,R4,LSR #24           ;Finally do the same with the blue and we have a value read to compare
        MLA     R0,LR,R4,R0

        CMP     R0,R6                   ;Compare against the step converted to an error

      ]

        EXIT

;..............................................................................

; in    R0  red value   (8.8 fixed point)
;       R1  green value (8.8 fixed point)
;       R3  blue value  (8.8 fixed point)
;       R8  red step    (8.8 fixed point)
;       R9  green step  (8.8 fixed point)
;       R10 blue step   (8.8 fixed point)


StaticFontColourCode
;2_000
        ADD     R0,R0,R8,LSR #16
        ADD     R1,R1,R9,LSR #16
        ADD     R3,R3,R10,LSR #16
        MOV     PC,LR
;2_001
        ADD     R0,R0,R8,LSR #16
        ADD     R1,R1,R9,LSR #16
        SUB     R3,R3,R10,LSR #16
        MOV     PC,LR
;2_010
        ADD     R0,R0,R8,LSR #16
        SUB     R1,R1,R9,LSR #16
        ADD     R3,R3,R10,LSR #16
        MOV     PC,LR
;2_011
        ADD     R0,R0,R8,LSR #16
        SUB     R1,R1,R9,LSR #16
        SUB     R3,R3,R10,LSR #16
        MOV     PC,LR
;2_100
        SUB     R0,R0,R8,LSR #16
        ADD     R1,R1,R9,LSR #16
        ADD     R3,R3,R10,LSR #16
        MOV     PC,LR
;2_101
        SUB     R0,R0,R8,LSR #16
        ADD     R1,R1,R9,LSR #16
        SUB     R3,R3,R10,LSR #16
        MOV     PC,LR
;2_110
        SUB     R0,R0,R8,LSR #16
        SUB     R1,R1,R9,LSR #16
        ADD     R3,R3,R10,LSR #16
        MOV     PC,LR
;2_111
        SUB     R0,R0,R8,LSR #16
        SUB     R1,R1,R9,LSR #16
        SUB     R3,R3,R10,LSR #16
        MOV     PC,LR


        END
@


4.5
log
@Update to cope with new pixel formats
Detail:
  s/Commons - Update best/worst colour code to add support for all the new RGB pixel format variations
  s/Dither - Rework code to remove reliance on now removed get_physical16bpp routine
  s/Enhanced - Drop support for VIDC enhancer. "VIDC20" code enhanced to add support for all the new RGB pixel formats, mainly reliant on new ColourConv macro. Drop get_physical16bpp routine as it wasn't really needed and would have been a pain to update.
  s/FontColours - Remove reference to obsolete PseudoPaletteEntry variable
  s/Header - Update workspace to clarify how certain variables are overlaid over the colour cache entries. Rename temp_guardtable to temp_errortable as the name makes more sense to me. Cache current modeflags & log2 NColour in InitCache.
  s/MainSWIs - Flag_* -> ModeFlag_* renaming. Pass through source mode to make32Ktable
  s/Palettes - Strip out some old Module_Version switches to make code more readable. Cache current modeflags and log2 NColour values when dealing with sprite output.
  s/Tables32K - Table generation code rewritten to add support for new 16bpp pixel formats, be faster, and (hopefully) more readable. Core generation code has been split off into seperate file, s/TablesAlgo, as it's needed multiple times but is too big for a macro.
  s/TablesAlgo - New file containing core code for the "32K" table generation. Disregarding pixel format differences, it can be assembled in two forms, optimised either for large or small data caches. New code is 85% faster on BB-xM (large cache version), 43% faster on Iyonix and 80% faster on StrongARM (both small cache version).
Admin:
  Tested on BB-xM
  Part of an implementation of the Extended Framebuffer Format spec:
  http://www.riscosopen.org/wiki/documentation/show/Extended%20Framebuffer%20Format%20Specification
  Code is in need of updating to allow caller to identify which type of 32K table has been returned (i.e. old-style 32K table or some new kind of 4K/32K/64K one)


Version 1.86. Tagged as 'Colours-1_86'
@
text
@d316 1
a316 1
        DivRem  R11,R8,R3,LR            ;..divide by the step value
d330 1
a330 1
        DivRem  R11,R9,R3,LR
d343 1
a343 1
        DivRem  R11,R10,R3,LR
@


4.4
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.72 or later.
  Requires BuildSys 3.09 or later.
  Requires Env 0.65 or later.

Version 1.75. Tagged as 'Colours-1_75'
@
text
@a125 1
        LDRB    LR,[WP,#PseudoPaletteEntry]
a126 2
        ADD     LR,R2,#1                ;Cycle through the pseudo palette entries
        STRB    LR,[WP,#PseudoPaletteEntry]
@


4.3
log
@32-bit compatible.

Version 1.69. Tagged as 'Colours-1_69'
@
text
@d480 1
a480 1
        ENTRY   "R0-R1,R3"
d482 1
a482 1
        ENTRY   "R0-R1,R3-R5"
@


4.2
log
@Version RO_3_70 taken
@
text
@d25 1
a25 1
;                     
d30 1
a30 1
; This routine will get the font colour parameters and then set the 
d35 1
a35 1
SetFontColours_Code ROUT    
d58 2
a59 2
         
        LDMIA   SP,{R0-R3}             
d63 1
a63 1
        STRVS   R0,[SP]                            
d71 1
a71 1
       
d79 2
a80 2
;          R3 offset 
;                     
d86 1
a86 1
; checks to see what mode we 
d107 1
a107 1
; 
d130 1
a130 1
                                                     
d135 1
a135 1
                    
d141 2
a142 2
        SWI     XFont_CurrentFont                             
        
d145 1
a145 1
        ADD     LR,SP,#4*4          
d148 1
a148 1
        Pull    "R1-R3"                        
d151 1
a151 1
        MOV     R6,PC
d154 1
a154 1
        TEQP    R6,#0                   ;(it may be invalid anyway)
d156 1
a156 1
skip_colour_preserve           
d158 1
a158 1
        Pull    "R0-R6,LR" 
d164 1
a164 1
          
d168 1
a168 1
; 
d171 1
a171 1
; the specified limit as specified. 
d181 1
a181 1
; We first get the two palette entries for the colours and then attempt to 
d189 1
a189 1
; between the two colours (ie. palette entry and required colour) if this is 
d191 1
a191 1
; current offset then we allow it and loop down until the offset is zero.  
d227 1
a227 1
        
d240 1
a240 1
        BEQ     returnfontcolours_gotfore       
d245 1
a245 1
                 
d255 1
a255 1
        
d266 1
a266 3
        MOVEQ   R0,#-1                  ;...otherwise read for the current mode
        MOVEQ   R1,#-1
        BuildColoursForBest EQ          ;Only re-build if not recached
d268 4
d284 1
a284 1
        RSBS    R10,R2,R10,LSR #16 
d292 1
a292 1
        RSBS    R9,R2,R9,LSR #8        
d297 1
a297 1
        AND     R8,R5,#&FF00            
d304 1
a304 1
        STR     R2,[WP,#FontColourCodeAt]  
d317 1
a317 1
        
d323 1
a323 1
        LDR     R7,[WP,#ColourErrorLoading]     
d325 2
a326 2
        MOV     R2,R2,LSR #8         
        MOV     R11,R11,LSR #8      
d332 2
a333 2
        AND     R2,R2,#&FF00          
        DivRem  R11,R9,R3,LR          
d338 2
a339 2
        MOV     R2,R2,LSR #16       
        MOV     R11,R11,LSR #8          
d343 1
a343 1
         
d348 1
a348 1
                               
d350 2
a351 2
        MOV     R2,R7,LSR #24        
        MOV     R11,R11,LSR #8       
d355 1
a355 1
         
d369 1
a369 1
        
d380 1
a380 1
        TEQ     R10,#0                 
d409 1
a409 1
        Pull    "R0,R3-R5,R8-R10,PC",GE,^
d422 6
a427 1
        ORRS    PC,LR,#C_bit
d449 1
a449 1
        Pull    "R0,R3-R4,R8-R10,PC",LT,^
d453 1
a453 1
        Pull    "R0,R3-R4,R8-R10,PC",GE,^
d457 1
a457 1
                 
d462 5
a466 1
                     
d468 1
a468 1
                  
d470 1
a470 1
;       R9 packed green + step 
d483 1
a483 1
      ]      
d512 1
a512 1
                   
d517 1
a517 1
        RSB     R3,R3,R3,LSL #3        
d524 1
a524 1
        AND     R3,LR,R11,LSR #16       
d528 1
a528 1
        RSB     R3,R3,R3,LSL #3        
d540 1
a540 1
         
d555 1
a555 1
                                        
d562 1
a562 1
        MUL     R0,R2,LR               
d577 2
a578 2
                                                                                           
        CMP     R0,R6                   ;Compare against the step converted to an error              
d581 1
a581 1
                            
d583 1
a583 1
                                           
d599 1
a599 1
        MOV     PC,LR               
d624 1
a624 1
        MOV     PC,LR 
d634 1
a634 1
        MOV     PC,LR 
@


4.1
log
@Initial revision
@
text
@d284 2
a285 3
        LDRPL   LR,blueinstructs
        LDRMI   LR,blueinstructs+4      ;Get the relevant instruction to handle the step value
        Push    "LR"                    ;Push to the stack
d292 1
a292 3
        LDRPL   LR,greeninstructs
        LDRMI   LR,greeninstructs+4     ;Get the relevant instruction to handle the step value
        Push    "LR"                    ;Push to the stack
d298 1
a298 2
        LDRPL   LR,redinstructs
        LDRMI   LR,redinstructs+4       ;Get the relevant instruction to handle the step value
d300 2
a301 1
        addl    R2,WP,FontColourCode    ;Setup pointer to the relevant piece of code
a303 11
        Debug   fontcolours,"Self compiled routine",R2
        Debuga  fontcolours,"Start red",R8
        Debuga  fontcolours,", green",R9
        Debuga  fontcolours,", blue",R10

        STR     LR,[R2],#4              ;Store instruction for advancing the red value
        Pull    "R11,LR"
        STMIA   R2!,{R11,LR}            ;Store green and blue instructions
        LDR     LR,lastword
        STR     LR,[R2]                 ;And to cap it all bung in a return

a581 3
redinstructs
        ADD     R0,R0,R8,LSR #16        ;When step is -VE
        SUB     R0,R0,R8,LSR #16        ;When step is +VE
d583 28
a610 1
greeninstructs
d612 4
a616 2

blueinstructs
d618 4
d623 1
a624 2
lastword
        MOV     PC,LR                   ;Final word (I will not hear another one)                 
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@d284 3
a286 2
        MOV     LR,#0
        ORRMI   LR,LR,#1
d293 3
a295 1
        ORRMI   LR,LR,#2
d301 2
a302 1
        ORRMI   LR,LR,#4
d304 1
a304 2
        ADR     R2,StaticFontColourCode
        ADD     R2,R2,LR,LSL #4           ;4 words of code per case (3 bit selector in LR)
d307 11
d596 3
d600 1
a600 8
StaticFontColourCode
;2_000
        ADD     R0,R0,R8,LSR #16
        ADD     R1,R1,R9,LSR #16
        ADD     R3,R3,R10,LSR #16
        MOV     PC,LR               
;2_001
        ADD     R0,R0,R8,LSR #16
a601 4
        SUB     R3,R3,R10,LSR #16
        MOV     PC,LR
;2_010
        ADD     R0,R0,R8,LSR #16
d603 2
a605 24
        MOV     PC,LR
;2_011
        ADD     R0,R0,R8,LSR #16
        SUB     R1,R1,R9,LSR #16
        SUB     R3,R3,R10,LSR #16
        MOV     PC,LR
;2_100
        SUB     R0,R0,R8,LSR #16
        ADD     R1,R1,R9,LSR #16
        ADD     R3,R3,R10,LSR #16
        MOV     PC,LR
;2_101
        SUB     R0,R0,R8,LSR #16
        ADD     R1,R1,R9,LSR #16
        SUB     R3,R3,R10,LSR #16
        MOV     PC,LR 
;2_110
        SUB     R0,R0,R8,LSR #16
        SUB     R1,R1,R9,LSR #16
        ADD     R3,R3,R10,LSR #16
        MOV     PC,LR
;2_111
        SUB     R0,R0,R8,LSR #16
        SUB     R1,R1,R9,LSR #16
a606 1
        MOV     PC,LR 
d608 2
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
