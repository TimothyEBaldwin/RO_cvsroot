head	4.5;
access;
symbols
	Colours-1_95:4.5
	Colours-1_94:4.5
	Colours-1_93:4.5
	Colours-1_92:4.5
	Colours-1_91:4.5
	Colours-1_90:4.4
	Colours-1_89:4.4
	Colours-1_88:4.4
	Colours-1_87:4.4
	Colours-1_86:4.4
	Colours-1_85:4.3
	Colours-1_84:4.3
	Colours-1_83:4.3
	Colours-1_82:4.3
	Colours-1_81:4.3
	Colours-1_80:4.3
	Colours-1_79:4.3
	Colours-1_78:4.3
	Colours-1_77:4.3
	RO_5_07:4.3
	Colours-1_76:4.3
	Colours-1_75:4.3
	Colours-1_74:4.2
	Colours-1_73:4.2
	Colours-1_72:4.2
	dellis_autobuild_BaseSW:4.2
	Colours-1_71:4.2
	Colours-1_70:4.2
	Colours-1_69:4.2
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.3
	Colours-1_68:4.1
	Colours-1_67:4.1
	Ursula_merge:4.1
	nturton_Colours-1_65:4.1
	dcotton_colours_MPTInitialBuild:4.1.7.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2014.04.06.19.16.30;	author jlee;	state Exp;
branches;
next	4.4;
commitid	wFrSc3pexQ7wLEvx;

4.4
date	2013.08.06.23.49.21;	author jlee;	state Exp;
branches;
next	4.3;
commitid	wewI5Vx1d9Rn5s0x;

4.3
date	2001.05.14.15.16.01;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	2000.05.12.12.34.34;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.42.18;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.42.18;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.08.16;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.48.08;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.11.07;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Don't trust physical colours to have the bottom byte clear
Detail:
  s/Enhanced - Update 32bpp best/worst colour routines to not assume the bottom byte of the physical colour is clear. Sometimes sprite palettes (and any other values that might get passed in by the user) have junk in there. Also make sure to clear any junk on exit.
Admin:
  Tested in Iyonix ROM softload
  "T3" backdrop tile is no longer green tinted when in 32bpp red-blue swapped modes (pre-ARMv6 version of best_colour_8888_TRGB was corrupting the green channel due to junk being in the bottom byte of the sprite palette entries)


Version 1.91. Tagged as 'Colours-1_91'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Enhanced

;;-----------------------------------------------------------------------------
;; Routines to cope with true colour pixel formats
;;-----------------------------------------------------------------------------



;;-----------------------------------------------------------------------------
;; Convert a physical colour word (8 bit red, green and blue) to a (16 bit)
;; value suitable for the graphics hardware we are driving.  The macro simply
;; takes the top bits of each gun and places them together in the right order
;; to produce the final colour value suitable for hardware.  Additionally,
;; a default alpha value can be merged in so that the colour is suitable for
;; use with framebuffers which have alpha blending enabled.
;;
;;      bits    FEDCBA9876543210
;;      gun     0bbbbbgggggrrrrr
;;
;; in   R2 = physical colour (bbbbbbbbggggggggrrrrrrrrxxxxxxxx)
;; out  R2 = colour number
;;-----------------------------------------------------------------------------
        MACRO
        BestAndWorst16 $format,$red_shift,$red_bits,$green_shift,$green_bits,$blue_shift,$blue_bits,$alpha
worst_colour_$format
        Debug   buildcolours,"worst_colour_$format in:",R2
        MVN     R2,R2                   ; Invert the colour word (gives worst colour)
best_colour_$format
        Debug   buildcolours,"best_colour_$format in:",R2
        Entry   "R3,R4"
        ColourConv R2,R2,R3,R4,LR,$red_shift,$red_bits,$green_shift,$green_bits,$blue_shift,$blue_bits,$alpha
        Debug   buildcolours,"best_colour_$format out:",R2
        EXIT
        MEND


        BestAndWorst16 4444_TBGR,0,4,4,4,8,4
        BestAndWorst16 4444_TRGB,8,4,4,4,0,4
        BestAndWorst16 4444_ABGR,0,4,4,4,8,4,&F000
        BestAndWorst16 4444_ARGB,8,4,4,4,0,4,&F000
        BestAndWorst16 1555_TBGR,0,5,5,5,10,5
        BestAndWorst16 1555_TRGB,10,5,5,5,0,5
        BestAndWorst16 1555_ABGR,0,5,5,5,10,5,&8000
        BestAndWorst16 1555_ARGB,10,5,5,5,0,5,&8000
        BestAndWorst16 565_BGR,0,5,5,6,11,5
        BestAndWorst16 565_RGB,11,5,5,6,0,5



;;-----------------------------------------------------------------------------
;; These routine cope with generating a suitable colour word for a 32 bit
;; device, with or without alpha blending.
;;
;; in   R2 = physical colour
;; out  R2 = colour word to be used
;;-----------------------------------------------------------------------------

worst_colour_8888_TBGR ROUT
        Debug buildcolours,"worst_colour_8888_TBGR in:",R2
        MVN     R2,R2                   ; Invert the colour word (gives worst colour)
best_colour_8888_TBGR ROUT
        Debug buildcolours,"best_colour_8888_TBGR in:",R2
        MOV     R2,R2,LSR #8            ; Convert from &BBGGRRXX to &00BBGGRR
        Debug buildcolours,"best_colour_8888_TBGR returning:",R2
        MOV     PC,LR                   ; Returning having done it


worst_colour_8888_TRGB ROUT
        Debug buildcolours,"worst_colour_8888_TRGB in:",R2
        MVN     R2,R2                   ; Invert the colour word (gives worst colour)
best_colour_8888_TRGB ROUT
        Debug buildcolours,"best_colour_8888_TRGB in:",R2
      [ NoARMv6
        Entry
        MOV     R2,R2,LSR #8            ; &00BBGGRR
        AND     LR,R2,#&0000FF00        ; &0000GG00
        ORR     R2,LR,R2,ROR #16        ; &GGRRGGBB
        BIC     R2,R2,#&FF000000        ; &00RRGGBB
        Debug buildcolours,"best_colour_8888_TRGB returning:",R2
        EXIT                            ; Returning having done it
      |
        REV     R2,R2                   ; Convert from &BBGGRRXX to &XXRRGGBB
        BIC     R2,R2,#&FF000000        ; Discard junk byte
        Debug buildcolours,"best_colour_8888_TRGB returning:",R2
        MOV     PC,LR                   ; Returning having done it
      ]


worst_colour_8888_ABGR ROUT
        Debug buildcolours,"worst_colour_8888_ABGR in:",R2
        MVN     R2,R2                   ; Invert the colour word (gives worst colour)
best_colour_8888_ABGR ROUT
        Debug buildcolours,"best_colour_8888_ABGR in:",R2
        MOV     R2,R2,LSR #8            ; Convert from &BBGGRRXX to &XXBBGGRR
        ORR     R2,R2,#&FF000000        ; Set alpha component
        Debug buildcolours,"best_colour_8888_ABGR returning:",R2
        MOV     PC,LR                   ; Returning having done it


worst_colour_8888_ARGB ROUT
        Debug buildcolours,"worst_colour_8888_ARGB in:",R2
        MVN     R2,R2                   ; Invert the colour word (gives worst colour)
best_colour_8888_ARGB ROUT
        Debug buildcolours,"best_colour_8888_ARGB in:",R2
      [ NoARMv6
        Entry
        MOV     R2,R2,LSR #8            ; &00BBGGRR
        AND     LR,R2,#&0000FF00        ; &0000GG00
        ORR     R2,LR,R2,ROR #16        ; &GGRRGGBB
        ORR     R2,R2,#&FF000000        ; &AARRGGBB
        Debug buildcolours,"best_colour_8888_ARGB returning:",R2
        EXIT                            ; Returning having done it
      |
        REV     R2,R2                   ; Convert from &BBGGRRXX to &XXRRGGBB
        ORR     R2,R2,#&FF000000        ; Set alpha component
        Debug buildcolours,"best_colour_8888_ARGB returning:",R2
        MOV     PC,LR                   ; Returning having done it
      ]


        END
@


4.4
log
@Update to cope with new pixel formats
Detail:
  s/Commons - Update best/worst colour code to add support for all the new RGB pixel format variations
  s/Dither - Rework code to remove reliance on now removed get_physical16bpp routine
  s/Enhanced - Drop support for VIDC enhancer. "VIDC20" code enhanced to add support for all the new RGB pixel formats, mainly reliant on new ColourConv macro. Drop get_physical16bpp routine as it wasn't really needed and would have been a pain to update.
  s/FontColours - Remove reference to obsolete PseudoPaletteEntry variable
  s/Header - Update workspace to clarify how certain variables are overlaid over the colour cache entries. Rename temp_guardtable to temp_errortable as the name makes more sense to me. Cache current modeflags & log2 NColour in InitCache.
  s/MainSWIs - Flag_* -> ModeFlag_* renaming. Pass through source mode to make32Ktable
  s/Palettes - Strip out some old Module_Version switches to make code more readable. Cache current modeflags and log2 NColour values when dealing with sprite output.
  s/Tables32K - Table generation code rewritten to add support for new 16bpp pixel formats, be faster, and (hopefully) more readable. Core generation code has been split off into seperate file, s/TablesAlgo, as it's needed multiple times but is too big for a macro.
  s/TablesAlgo - New file containing core code for the "32K" table generation. Disregarding pixel format differences, it can be assembled in two forms, optimised either for large or small data caches. New code is 85% faster on BB-xM (large cache version), 43% faster on Iyonix and 80% faster on StrongARM (both small cache version).
Admin:
  Tested on BB-xM
  Part of an implementation of the Extended Framebuffer Format spec:
  http://www.riscosopen.org/wiki/documentation/show/Extended%20Framebuffer%20Format%20Specification
  Code is in need of updating to allow caller to identify which type of 32K table has been returned (i.e. old-style 32K table or some new kind of 4K/32K/64K one)


Version 1.86. Tagged as 'Colours-1_86'
@
text
@d34 1
a34 1
;; in   R2 = physical colour (bbbbbbbbggggggggrrrrrrrr00000000)
d41 1
a41 2
        MOV     R2,R2,LSR #8
        MVN     R2,R2,LSL #8              ; simply invert the colour for worst match
d77 1
a77 1
        MOV     R2,R2,LSR #8            ; Convert from &BBGGRR00 to &00BBGGRR
d89 4
a92 4
        AND     LR,R2,#&00FF0000        ; &00GG0000
        BIC     R2,R2,#&00FF0000        ; &BB00RR00
        MOV     LR,LR,LSR #8            ; &0000GG00
        ORR     R2,LR,R2,ROR #24        ; &00RRGGBB
d96 2
a97 1
        REV     R2,R2                   ; Convert from &BBGGRR00 to &00RRGGBB
d108 1
a108 1
        MOV     R2,R2,LSR #8            ; Convert from &BBGGRR00 to &00BBGGRR
d121 3
a123 3
        AND     LR,R2,#&00FF0000        ; &00GG0000
        MOV     R2,R2,ROR #24           ; &GGRR00BB
        ORR     R2,R2,LR,LSR #8         ; &GGRRGGBB
d128 1
a128 1
        REV     R2,R2                   ; Convert from &BBGGRR00 to &00RRGGBB
@


4.3
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.72 or later.
  Requires BuildSys 3.09 or later.
  Requires Env 0.65 or later.

Version 1.75. Tagged as 'Colours-1_75'
@
text
@d18 1
a18 1
;; Routines to cope with 16 and 32 bits per pixel operation
a20 8
;;-----------------------------------------------------------------------------
;; These functions are designed for the Vertical Twist graphics enhancer
;; podule and the VIDC20 platform.  The following variables control the
;; path of assembly to get the relevent bit masks.
;;-----------------------------------------------------------------------------

        GBLL    vidc20
vidc20  SETL    true            ; if true then compiling for VIDC20
d24 6
a29 6
;; Convert a physical colour word (8 bit red, green and blue) to a value
;; suitable for the graphics hardware we are driving.  The function simply
;; takes the top five bits for each gun and uses them to make a fifteen
;; bit colour word which can be poked into the display memory.
;;
;; VIDC 20:
a33 5
;; Graphics Enhancer:
;;
;;      bits    FEDCBA9876543210
;;      gun     0bgrbbbbggggrrrr
;;
d37 4
a40 4

worst_colour16bpp ROUT
        Debug buildcolours,"worst_colour16 in:",R2

d42 3
a44 7
        MVN     R2,R2,LSL #8            ; simply invert the colour for worst match

best_colour16bpp ROUT

      [ vidc20
        Debug buildcolours,"best_colour16 in:",R2

d46 2
a47 12

        MOV     LR,#&1F                 ; suitable mask to extract the relevant bits
        MOV     R3,R2,LSR #8 +3
        AND     R3,R3,LR
        MOV     R4,R2,LSR #16 +3
        AND     R4,R4,LR
        MOV     R2,R2,LSR #24 +3
        AND     R2,R2,LR
        ORR     R3,R3,R4,LSL #5
        ORR     R2,R3,R2,LSL #10
        Debug buildcolours,"best_colour16 out:",R2

d49 1
a50 3
      |

        Entry "R0-R1,R3"
d52 10
a61 18
        MOV     LR,#&1F                 ; suitable mask for extracting bits
        AND     R0,LR,R2,LSR #8+3       ; extracting the red
        AND     R1,LR,R2,LSR #16+3      ; and then the green
        MOV     R2,R2,LSR #24+3         ; finally the blue

        MOV     LR,R0,LSR #1
        AND     R3,R0,#1
        ORR     LR,LR,R3,LSL #12        ; pack the red into a sensible place

        MOV     R3,R1,LSR #1
        ORR     LR,LR,R3,LSL #4
        AND     R3,R1,#1
        ORR     LR,LR,R3,LSL #13        ; pack the green into the gun

        MOV     R3,R2,LSR #1
        ORR     LR,LR,R3,LSL #8
        AND     R3,R2,#1
        ORR     R2,LR,R3,LSL #14        ; finally pack in the blue
a62 3
        EXIT

      ]
d66 2
a67 22
;; Conver the specified colour word into a physcial colour, this is simply
;; a matter of taking the packed word and expanding it out so that all
;; the bits are in the correct order.  Note that we do not attempt compensate
;; for losing 3 bits in the original conversion, this is important to ensure
;; that the dithering is performed correctly.
;;
;; In   R2 = colour word:
;;
;;   VIDC 20:
;;
;;      bit     FEDCBA9876543210FEDCBA9876543210
;;                               bbbbbgggggrrrrr
;;
;;   Graphics Enhancer:
;;
;;      bit     FEDCBA9876543210FEDCBA9876543210
;;                               bgrbbbbggggrrrr
;;
;; Out  R2 = physical colour word:
;;
;;      bit     FEDCBA9876543210FEDCBA9876543210
;;              bbbbb000ggggg000rrrrr000
d69 2
d73 8
a80 1
get_physical16bpp ROUT
a81 15
      [ vidc20

        Entry   "R3,R4"

        MOV     LR,#2_11111
        MOV     R3,R2,LSL #3            ; move green, blue to bit 8 and bit 16 respectivly
        MOV     R4,R2,LSL #6
        AND     R2,R2,LR                ; mask out red
        AND     R3,R3,LR,LSL #8         ;          green
        AND     R4,R4,LR,LSL #16        ;          blue
        ORR     R2,R2,R3
        ORR     R2,R2,R4                ; combine to make red (bit 0), green (bit 8) and blue (bit 16)
        MOV     R2,R2,LSL #11           ; shift so red (bit 11), green (bit 19) and blue (bit 27)

        EXIT
d83 13
d97 3
a99 22

        Entry   "R0-R1,R3"

        MOV     R0,R2,LSL #28
        AND     R1,R2,#1:SHL:12
        ORR     R0,R0,R1,LSL #(27-12)
        MOV     R3,R0,LSR #16           ; red component

        MOV     R0,R2,LSR #4
        MOV     R0,R0,LSL #28
        AND     R1,R2,#1:SHL:13
        ORR     R0,R0,R1,LSL #(27-13)
        ORR     R3,R3,R0,LSR #8         ; green component

        MOV     R0,R2,LSR #4
        MOV     R0,R0,LSL #28
        AND     R1,R2,#1:SHL:14
        ORR     R0,R0,R1,LSL #(27-14)
        ORR     R2,R3,R0                ; blue component

        EXIT

d103 9
a112 8
;;-----------------------------------------------------------------------------
;; This routine copes with generating a suitable colour word for a 32 bit
;; device.  Currently this generates a VIDC 20 value &00BBGGRR the top bits
;; are left clear.
;;
;; in   R2 = physical colour
;; out  R2 = colour word to be used
;;-----------------------------------------------------------------------------
d114 2
a115 2
worst_colour32bpp ROUT
        Debug buildcolours,"worst_colour32 in:",R2
d117 14
a130 6

best_colour32bpp ROUT
        Debug buildcolours,"best_colour32 in:",R2

        MOV     R2,R2,LSR #8            ; Convert from &BBGGRR00 to &00BGGRR
        Debug buildcolours,"best_colour32 returning:",R2
d132 1
a132 1

@


4.2
log
@32-bit compatible.

Version 1.69. Tagged as 'Colours-1_69'
@
text
@d62 1
a62 1
        ENTRY   "R3,R4"
d79 1
a79 1
        ENTRY "R0-R1,R3"
d135 1
a135 1
        ENTRY   "R3,R4"
d151 1
a151 1
        ENTRY   "R0-R1,R3"
@


4.1
log
@Initial revision
@
text
@d46 1
a46 1
;;  
d52 1
a52 1
        Debug buildcolours,"worst_colour16 in:",R2 
d60 2
a61 2
        Debug buildcolours,"best_colour16 in:",R2 
            
d73 1
a73 1
        Debug buildcolours,"best_colour16 out:",R2 
d75 1
a75 1
        EXITS
d85 2
a86 2
                    
        MOV     LR,R0,LSR #1 
d97 1
a97 1
        AND     R3,R2,#1        
d99 2
a100 2
                                     
        EXITS
d111 1
a111 1
;;                   
d113 1
a113 1
;; 
d115 2
a116 2
;;      
;;      bit     FEDCBA9876543210FEDCBA9876543210     
d121 1
a121 1
;;      bit     FEDCBA9876543210FEDCBA9876543210     
d126 1
a126 1
;;      bit     FEDCBA9876543210FEDCBA9876543210     
d130 1
a130 1
                                         
d137 1
a137 1
        MOV     LR,#2_11111    
d139 1
a139 1
        MOV     R4,R2,LSL #6        
d146 2
a147 2
                
        EXITS        
d152 1
a152 1
                     
d154 1
a154 1
        AND     R1,R2,#1:SHL:12        
d156 1
a156 1
        MOV     R3,R0,LSR #16           ; red component  
d160 1
a160 1
        AND     R1,R2,#1:SHL:13        
d163 1
a163 1
    
d166 1
a166 1
        AND     R1,R2,#1:SHL:14        
d169 2
a170 2
                                  
        EXITS
d177 1
a177 1
;; This routine copes with generating a suitable colour word for a 32 bit 
d186 1
a186 1
        Debug buildcolours,"worst_colour32 in:",R2 
d190 1
a190 1
        Debug buildcolours,"best_colour32 in:",R2 
d193 3
a195 3
        Debug buildcolours,"best_colour32 returning:",R2 
        MOVS    PC,LR                   ; Returning having done it
          
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
