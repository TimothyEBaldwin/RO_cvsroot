head	4.3;
access;
symbols
	Colours-1_95:4.3
	Colours-1_94:4.3
	Colours-1_93:4.3
	Colours-1_92:4.3
	Colours-1_91:4.3
	Colours-1_90:4.3
	Colours-1_89:4.3
	Colours-1_88:4.3
	Colours-1_87:4.3
	Colours-1_86:4.3
	Colours-1_85:4.3
	Colours-1_84:4.3
	Colours-1_83:4.3
	Colours-1_82:4.3
	Colours-1_81:4.3
	Colours-1_80:4.3
	Colours-1_79:4.3
	Colours-1_78:4.3
	Colours-1_77:4.3
	RO_5_07:4.3
	Colours-1_76:4.3
	Colours-1_75:4.3
	Colours-1_74:4.2
	Colours-1_73:4.2
	Colours-1_72:4.2
	dellis_autobuild_BaseSW:4.2
	Colours-1_71:4.2
	Colours-1_70:4.2
	Colours-1_69:4.2
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.3
	Colours-1_68:4.1
	Colours-1_67:4.1
	Ursula_merge:4.1
	nturton_Colours-1_65:4.1
	dcotton_colours_MPTInitialBuild:4.1.7.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2001.05.14.15.16.01;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	2000.05.12.12.34.34;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.42.18;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.42.18;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.08.17;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.48.11;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.11.08;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.72 or later.
  Requires BuildSys 3.09 or later.
  Requires Env 0.65 or later.

Version 1.75. Tagged as 'Colours-1_75'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > FileCal

;..............................................................................

; Handle desktop saving messages, ie. write calibration/loadings to a file

; in    R1 service number
;       R2 handle
;       WP ->private word (may be zero)
;
; out   R1 Service_Servied if failed to save, else leave intact

save_desktop_to_file ROUT

        LDR     WP,[WP]                 ;Has any workspace been allocated
        CMP     WP,#0
        MOVEQ   PC,LR

        Push    "R0-R2,LR"

        MOV     R1,R2                   ;Move handle to a sensible register
        MOV     R0,#0                   ;..and reset the flags word
        BL      WriteCalibrationToFile_Code
        BLVC    WriteLoadingsToFile_Code

        STRVS   R0,[SP]                 ;Store the error pointer if went boing!
        Pull    "R0-R2"
        MOVVS   R1,#Service_Serviced
        Pull    "PC"                    ;If an error occurs then ensure R0 ->error and service is claimed

;..............................................................................

ColourTransMapSize_Code ROUT

        Entry   "R1-R7"

        BL      validateworkspace
        EXIT    VS

        MOV     R1,R0                   ;->Command line
        BL      getnumber
        MOVVC   R4,R0
        BLVC    getnumber
        MOVVC   R5,R0
        BLVC    getnumber
        MOVVC   R6,R0                   ;Read all three commands

        ADDVC   R3,R4,R5
        ADDVC   R3,R3,R6
        MOVVC   R3,R3,LSL #2
        ADDVC   R3,R3,#12
        MOVVC   R0,#ModHandReason_Claim
        SWIVC   XOS_Module              ;Attempt to claim buffer to put data into
        EXIT    VS

        MOV     R1,R2
        LDR     R2,[WP,#Calibration_pending]
        STR     R1,[WP,#Calibration_pending]
        CMP     R2,#0                   ;Do I need to free any pending blocks?
        BEQ     %FT10                   ;..no as it's already free'd

        MOV     R0,#ModHandReason_Free
        SWI     XOS_Module
10
        STMIA   R1,{R4-R6}
        STR     R3,[WP,#Calibration_remaining]
        EXIT

;..............................................................................

ColourTransMap_Code ROUT

        Entry   "R1-R7"

        BL      validateworkspace
        EXIT    VS                      ;Give up if unable to validate workspace

        MOV     R1,R0                   ;->Command line to be scanned
        LDR     R4,[WP,#Calibration_pending]
10
        LDRB    LR,[R0]                 ;Is there a character left for me to read?
        CMP     LR,#32
        BLT     %FT20                   ;No, so give up now yer big sother poof!

        LDR     R5,[WP,#Calibration_remaining]
        CMP     R5,#12                  ;Is there enough space?
        BLE     %FT90                   ;Nope, so give up its all a pile of glop!

        BL      getnumber               ;Read a number and update line pointer
        SUBVC   R5,R5,#4
        STRVC   R0,[R4,R5]
        STRVC   R5,[WP,#Calibration_remaining]
        BVC     %BT10                   ;Loop until no more numbers left to read

        EXIT                            ;Return if it errors during the above
20
        LDR     R5,[WP,#Calibration_remaining]
        CMP     R5,#12                  ;Is there any more to come (will clear V)
        EXIT    NE                      ;Yes there is so just return

        LDR     R0,[WP,#Calibration_pending]
        BL      SetCalibration_Code
        EXIT    VS                      ;Return now if failed to setup correctly

        LDR     R2,[WP,#Calibration_pending]
        MOV     R0,#ModHandReason_Free
        SWI     XOS_Module              ;Attempt to release the block
        MOVVC   R1,#0
        STRVC   R1,[WP,#Calibration_pending]

        EXIT
90
        ADR     R0,ErrorBlock_CTBadCalib
        BL      LookupError
        EXIT                            ;Return error if setting the table is invalid

        MakeInternatErrorBlock CTBadCalib

;..............................................................................

; Write the calibration block to a file consisting of *commands, this is
; used as part of the desktop boot sequence.

; in    R0 bit 0 clear => if saving to be done if default calibration
;          bit 0 set => set if saving is always to be done
;
;       R1 file handle

WriteCalToFileFlag_SaveAlways * 1:SHL:0

WriteCalibrationToFile_Code ROUT

        Debug   input1,"WriteCalibrationToFile: R0,R1",R0,R1
        Debug   input2,"WriteCalibrationToFile: flag, handle",R0,R1

        Entry   "R1-R7"

        LDR     R4,[WP,#Calibration_ptr]
        CMP     R4,#0                   ;Is there a calibration table?
        TSTEQ   R0,#WriteCalToFileFlag_SaveAlways
        EXIT    EQ

      [ newcalibration
        LDR     LR,[WP,#Calibration_newtable]
        CMP     LR,#0                   ; new format table - if so then ignore the command
        EXIT    NE
      ]

        CMP     R4,#0                   ;Do I need to address the default table
        ADDR    R4,default_calibration,EQ

        LDR     R2,=?mapsizecommand
        ADR     R3,mapcommand           ;->String to be spat
        BL      output_string_r3        ;And then send it now
        LDRVC   R3,[R4]
        MOVVC   R5,R3
        BLVC    output_number_r3
        LDRVC   R3,[R4,#4]
        ADDVC   R5,R5,R3
        BLVC    output_number_r3
        LDRVC   R3,[R4,#8]
        ADDVC   R5,R5,R3
        BLVC    output_number_r3        ;Send the parameters for setting up the map
        EXIT    VS
05
        MOV     R0,#10
        SWI     XOS_BPut                ;Write the new line
        EXIT    VS

        MOV     R5,R5,LSL #2
        ADD     R5,R5,#8                ;Calculate the size of the calibration table

        LDR     R2,=?mapcommand
        ADR     R3,mapcommand
        BL      output_string_r3        ;Send the map command
        EXIT    VS

        MOV     R6,R5
        SUB     R5,R5,#4*16             ;16 items, not 4 as it used to be
10
        CMP     R6,#12                  ;Have we finished yet?
        BLT     %FT20

        CMP     R6,R5                   ;Finished a line of data, need to mush onto the next one
        BLE     %BT05

        LDR     R3,[R4,R6]
        BL      output_number_r3        ;Output numbers at R4+R6
        SUBVC   R6,R6,#4
        BVC     %BT10                   ;Loop back until finished

        EXIT
20
        MOV     R0,#10
        SWI     XOS_BPut                ;Write the final new line
        EXIT                            ;...and then exit

mapsizecommand  = "ColourTransMapSize"
mapcommand      = "ColourTransMap"
loadingcommand  = "ColourTransLoadings"

        ALIGN

;..............................................................................

; Write error loadings to a file as a single *command with three parameters.

; in    R1 handle
; out   all must be preserved, unless error (V set, R0 -> block)

WriteLoadingsToFile_Code ROUT

        Debug   input1,"WriteLoadingsToFile: R1",R1
        Debug   input2,"WriteLoadingsToFile: file handle",R1

        Entry   "R1-R5"

        MOV     R2,#(?loadingcommand)
        ADR     R3,loadingcommand
        BL      output_string_r3        ;Spit the *ColourTransLoadings
        LDRVC   R4,[WP,#ColourErrorLoading]
        MOVVC   R5,#3                   ;Spit three numbers out => R,G and B
10
        MOVVC   R4,R4,LSR #8
        ANDVC   R3,R4,#&FF              ;Get the loading value being applied
        BLVC    output_number_r3        ;and then spit the value out
        BVS     %FT20

        SUBS    R5,R5,#1
        BNE     %BT10

        MOV     R0,#10                  ;Terminate the line
        SWI     XOS_BPut                ;Write the end of line
20
        EXIT                            ;Return any possible errors (R0 and flags passed out)

;..............................................................................

ColourTransLoadings_Code ROUT

        Entry   "R1-R3"

        BL      validateworkspace
        EXIT    VS                      ;Attempt to resolve the workspace pointer and exit if fails

        MOV     R1,R0
        BL      getnumber               ;Attempt to read the red value from the command
        ANDVC   R2,R0,#&FF
        BLVC    getnumber               ;Attempt to read the green value from the command
        ANDVC   R3,R0,#&FF
        BLVC    getnumber               ;Attempt to read the blue value from the command
        ANDVC   R0,R0,#&FF
        EXIT    VS

        MOV     R1,R0,LSL #24           ;&BBxxxxxx
        ORR     R1,R1,R2,LSL #8         ;&BBxxRRxx
        ORR     R1,R1,R3,LSL #16        ;&BBGGRRxx

        MOV     R2,#0
        MOV     R0,#CTransMiscOp_SetWeights
        SWI     XColourTrans_MiscOp     ;Setup the error loading value correctly

        EXIT

;..............................................................................

; in    R1 handle
;       R3 number to output
; out   V set => R0 -> error block

output_number_r3 ROUT

        Push    "R1-R2,LR"

        MOV     R0,#" "                 ;Prefix ' &'
        SWI     XOS_BPut
        MOVVC   R0,#"&"
        SWIVC   XOS_BPut
        Pull    "R1-R2,PC",VS

        MOV     R0,R3
        ADD     R1,WP,#text_buffer12
        MOV     R2,#12
        SWI     XOS_ConvertHex8         ;Convert number to nice wibble hex value

        Pull    "R1-R2,LR"              ;Restore values from the stack

        ADD     R3,WP,#text_buffer12    ;Now strip the leading zeros
        MOV     R2,#8
10
        LDRB    R0,[R3]
        TEQ     R0,#48
        BNE     output_string_r3        ;When we reach a non-zero character then exit

        ADD     R3,R3,#1                ;Increase index into string

        SUB     R2,R2,#1                ;And don't ever remove the final zero
        CMP     R2,#1
        BGT     %BT10                   ;loop back until finished

; flow down into 'output_string_r3'

;..............................................................................

; in    R1 handle
;       R2 size
;       R3 ->string

output_string_r3 ROUT

        Entry   ""
10
        CMP     R2,#0                   ;End of the string reached yet (clears V)
        EXIT    EQ

        LDRB    R0,[R3],#1              ;Get a character from the string
        SWI     XOS_BPut                ;Write the character
        SUBVC   R2,R2,#1
        BVC     %BT10                   ;Loop back until all the blighters are written

        EXIT                            ;..return if it errors

;..............................................................................
;
; getnumber
;
; Extract a number from the current command line.
;
; in    R1 ->command line
; out   V =1 => R0 -> error block
;       else,   R0 contains number obtained
;               R1 updated to point to either next non-white space or termination character

getnumber ROUT

        Entry   "R2"

        MOV     R0,#10 :OR: (1:SHL:31)
        SWI     XOS_ReadUnsigned        ;Get the number from the line
        EXIT    VS

        MOV     R0,R2                   ;Copy number to suitable register
10
        LDRB    R2,[R1,#1]!
        CMP     R2,#32
        BEQ     %BT10

        EXIT

        END
@


4.2
log
@32-bit compatible.

Version 1.69. Tagged as 'Colours-1_69'
@
text
@d49 1
a49 1
        ENTRY   "R1-R7"
d87 1
a87 1
        ENTRY   "R1-R7"
d150 1
a150 1
        ENTRY   "R1-R7"
d230 1
a230 1
        ENTRY   "R1-R5"
d255 1
a255 1
        ENTRY   "R1-R3"
d325 1
a325 1
        ENTRY   ""
d350 1
a350 1
        ENTRY   "R2"
@


4.1
log
@Initial revision
@
text
@d39 1
a39 1
      
d53 1
a53 1
                     
d68 1
a68 1
        EXIT    VS                  
d70 1
a70 1
        MOV     R1,R2      
d86 1
a86 1
        
d114 1
a114 1
                             
d124 1
a124 1
                                            
d134 1
a134 1
               
d142 1
a142 1
 
d144 1
a144 1
                   
d156 1
a156 1
            
d159 3
a161 3
        TEQ     LR,#0                   ; new format table - if so then ignore the command
        EXITS   NE
      ] 
d190 1
a190 1
        EXIT    VS                      
d217 1
a217 1
    
d219 1
a219 1
                                                                
d232 1
a232 1
        MOV     R2,#(?loadingcommand)  
d245 1
a245 1
                   
d252 1
a252 1
            
d256 1
a256 1
        
d259 1
a259 1
                                                                               
d268 1
a268 1
                      
d286 1
a286 1
      
d303 1
a303 1
        MOV     R2,#8                  
d316 1
a316 1
               
d318 1
a318 1
     
d338 1
a338 1
; 
d340 1
a340 1
;        
d342 1
a342 1
; 
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
