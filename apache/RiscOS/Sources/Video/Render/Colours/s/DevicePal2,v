head	4.4;
access;
symbols
	Colours-1_95:4.4
	Colours-1_94:4.4
	Colours-1_93:4.4
	Colours-1_92:4.4
	Colours-1_91:4.4
	Colours-1_90:4.4
	Colours-1_89:4.4
	Colours-1_88:4.4
	Colours-1_87:4.4
	Colours-1_86:4.4
	Colours-1_85:4.4
	Colours-1_84:4.4
	Colours-1_83:4.4
	Colours-1_82:4.4
	Colours-1_81:4.4
	Colours-1_80:4.4
	Colours-1_79:4.4
	Colours-1_78:4.4
	Colours-1_77:4.4
	RO_5_07:4.4
	Colours-1_76:4.4
	Colours-1_75:4.4
	Colours-1_74:4.4
	Colours-1_73:4.4
	Colours-1_72:4.4
	dellis_autobuild_BaseSW:4.4
	Colours-1_71:4.4
	Colours-1_70:4.4
	Colours-1_69:4.4
	sbrodie_sedwards_16Mar2000:4.3
	dcotton_autobuild_BaseSW:4.4
	Colours-1_68:4.3
	Colours-1_67:4.3
	Ursula_merge:4.2
	nturton_Colours-1_65:4.2
	dcotton_colours_MPTInitialBuild:4.1.7.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	rthornb_UrsulaBuild_01May1998:4.2
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.2
	ARTtmp:4.1.7.1.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2000.05.12.12.34.33;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	99.08.05.09.51.58;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.01.21.17.44.34;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.42.17;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.42.17;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.08.11;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.48.06;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.11.05;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@32-bit compatible.

Version 1.69. Tagged as 'Colours-1_69'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > DevicePal2

;;-----------------------------------------------------------------------------
;; New Calibration Code for ColourTrans 1.10 and beyond.
;;
;; This code is for use with the Ace Computing Pro-Drivers and the newer
;; versions of PDumper Support provided by Acorn.
;;
;; The code is supplied by Tony Cheal at Ace Computing / Oak Solutions to
;; replace the existing calibration code which was defunct.
;;-----------------------------------------------------------------------------

;;-----------------------------------------------------------------------------
;; ConvertDeviceColour
;;
;; Pass a specified colour word (&bbggrrxx) through the calibration table
;; yeilding and gamma correct colour value in the same format.
;;
;; in   R1 = colour to convert (&bbggrrxx)
;;      R3 -> table
;; out  R2 = new colour
;;-----------------------------------------------------------------------------

new_convert_device_colour ROUT

        CMP     R3,#0                                   ; any calibration table supplied?
        MOVEQ   R2,R1                                   ; if not then simply pass back the entry colour
        MOVEQ   PC,LR                                   ; and then return

        Push    "R0,R4-R6,LR"

        MOV     LR,#&FF                                 ; mask to use to extract values
        AND     R4,LR,R1,LSR #8                         ; get the red component
        AND     R5,LR,R1,LSR #16                        ; and then the greeen
        MOV     R6,R1,LSR #24                           ; finally the blue

        LDR     R0,[R3,#calib_idealwhite]
        CMP     R0,#&FFFFFF00                           ; is white really white
        BLNE    do_grey_shift                           ; if not then perform a level of compensataion

        LDR     R0,[R3,#calib_idealblack]
        CMP     R0,#&00000000                           ; is black really black?
        [       Module_Version >= 123
        BEQ     %FT10
        |
        BNE     %FT10                                   ; if it is then ignore the requirement to compensate
        ]
        MVN     R0,R0                                   ; ones compliment of the shift value
        EOR     R4,R4,#&FF                              ; and invert the colours
        EOR     R5,R5,#&FF
        EOR     R6,R6,#&FF
        BL      do_grey_shift                           ; perform compensation
        EOR     R4,R4,#&FF                              ; and invert the resulting colours
        EOR     R5,R5,#&FF
        EOR     R6,R6,#&FF
10
        LDR     R0,[R3,#calib_tablecount]               ; get the number of lookup tables
        TEQ     R0,#3                                   ; is there a table for red, green and blue independantly
        ADD     R0,R3,#calib_gammatables
        LDRB    R4,[R0,R4]                              ; pass red through the table
        ADDEQ   R0,R0,#calib_gammasize
        LDRB    R5,[R0,R5]                              ; pass green through the table
        ADDEQ   R0,R0,#calib_gammasize
        LDRB    R6,[R0,R6]                              ; pass blue through the table
        MOV     R2,R6,LSL #24
        ORR     R2,R2,R5,LSL #16
        ORR     R2,R2,R4,LSL #8                         ; combine to make a colour word

        LDR     R0,[R3,#calib_postprocessSWI]           ; get the post processing SWI number
        CMP     R0,#0                                   ; is one defined?
        Pull    "R0,R4-R6,PC",EQ                        ; if not then return now!

     [ StrongARM
        Push    "R10"
        MOV     R1,R2
        ORR     R10,R0,#Auto_Error_SWI_bit              ; ensure if it fails it is not fatal
        SWI     XOS_CallASWI
        Pull    "R10"
     |
        MOV     R1,R2
        ADD     R0,R0,#&EF000000                        ; SWI intruction
        ORR     R0,R0,#Auto_Error_SWI_bit               ; ensure if it fails it is not fatal
        ADR     R2,%FT20 -4
        SUB     R2,R2,SP
        MOV     R2,R2,LSR #2
        BIC     R2,R2,#&FF000000                        ; bugfix for negative
        ADD     R2,R2,#&EA000000                        ; build into a branch instruction
        Push    "R0,R2"                                 ; push to the stack

        MOV     PC,SP                                   ; and execute on the frame
20
        ADD     SP,SP,#4*2                              ; balance the stack for an easy life
      ]

        STRVS   R0,[SP]                                 ; ensure sensible error pointer passed out (if required)
        Pull    "R0,R4-R6,PC"                           ; return passing back error and flags



;;-----------------------------------------------------------------------------
;; Code to perform compensation for non-real black/white
;;
;; Formula used = newR = oldR * (1 - (min(R,G,B) / max (R,G,B)) * (1 - idealR)
;;                newG = oldG * (1 - (min(R,G,B) / max (R,G,B)) * (1 - idealG)
;;                newB = oldB * (1 - (min(R,G,B) / max (R,G,B)) * (1 - idealB)
;;
;; in   R0 = ideal red, green, blue (&ibigirxx)
;;      R3 -> calibration table
;;      R4,R5,R6 = red, green, blue
;; out  R4,R5,R6 = red, green, blue (compensated)
;;-----------------------------------------------------------------------------

do_grey_shift ROUT

        Push    "R7-R9,LR"
        MVN     R0,R0                                   ; quicker on complements

        [       Module_Version >= 123
        MOV     R8,R4                                   ; min(R,G,B)
        CMP     R8,R5
        MOVLO   R8,R5
        CMP     R8,R6
        MOVLO   R8,R6
        |
        MOV     R8,R4                                   ; min(R,G,B)
        CMP     R8,R5
        MOVHI   R8,R5
        CMP     R8,R6
        MOVHI   R8,R6
        ]
        TEQ     R8,#0                                   ; is it pure black?
        Pull    "R7-R9,PC",EQ                           ; if so then return now

        [       Module_Version >= 123
        MOV     R7,R4                                   ; max(R,G,B)
        CMP     R7,R5
        MOVHI   R7,R5
        CMP     R7,R6
        MOVHI   R7,R6
        |
        MOV     R7,R4                                   ; max(R,G,B)
        CMP     R7,R5
        MOVLO   R7,R5
        CMP     R7,R6
        MOVLO   R7,R6
        ]

        TEQ     R7,R8                                   ; check for min/max = 1
        MOVEQ   R9,#1:SHL:8                             ; and if that is the case then avoid divide
        BEQ     %FT10

        MOV     R7,R7,LSL #8
        DivRem  R9,R7,R8,LR                             ; divide out
10
        MOV     LR,R0,LSR #8                            ; get the ideal red
        ANDS    LR,LR,#&FF                              ; check for no change
        BEQ     %FT20                                   ; no red shift

        MUL     LR,R9,LR                                ; bla!
        RSB     LR,LR,#&FF00                            ; 1 is now 255<<8
        MUL     R4,LR,R4                                ; Answer now 255<<8 too big
        [       Module_Version >= 123
        MOVS    R4,R4,LSR #16
        ADDNE   R4,R4,#1                                ; Division is by 256*255
        |
        MOV     R4,R4,LSR #8
        ]
        CMP     R4,#&FF                                 ; just in case!
        MOVHI   R4,#&FF
20
        MOV     LR,R0,LSR #16                           ; get the ideal green
        ANDS    LR,LR,#&FF                              ; check for no change
        BEQ     %FT30                                   ; no green shift

        MUL     LR,R9,LR                                ; bla!
        RSB     LR,LR,#&FF00
        MUL     R5,LR,R5
        [       Module_Version >= 123
        MOVS    R5,R5,LSR #16
        ADDNE   R5,R5,#1
        |
        MOV     R5,R5,LSR #8
        ]
        CMP     R5,#&FF
        MOVHI   R5,#&FF
30
        MOVS    LR,R0,LSR #24                           ; get the ideal blue
        BEQ     %FT40                                   ; no blue shift

        MUL     LR,R9,LR                                ; bla!
        RSB     LR,LR,#&FF00
        [       Module_Version >= 125
        MUL     R6,LR,R6
        |
        MUL     R6,LR,R4
        ]

        [       Module_Version >= 123
        MOVS    R6,R6,LSR #16
        ADDNE   R6,R6,#1
        |
        MOV     R6,R6,LSR #8
        ]
        CMP     R6,#&FF
        MOVHI   R6,#&FF
40
        Pull    "R7-R9,PC"                              ; shazam!


        END
@


4.3
log
@Spinner and Ursula branches merged.
Changed to use srccommit.

Version 1.67. Tagged as 'Colours-1_67'
@
text
@d24 1
a24 1
;; replace the exisiting calibration code which was defunct.
d40 1
a40 3
        BIC     LR,LR,#V_bit                            ; prepare for a tidy exit

        TEQ     R3,#0                                   ; any calibration table supplied?
d42 1
a42 1
        MOVEQS  PC,LR                                   ; and then return
d85 1
a85 1
        Pull    "R0,R4-R6,PC",EQ,^                      ; if not then return now!
d87 7
a103 9
  [ StrongARM
    Push   "r0-r2,lr"
    MOV    r0,#1                    ;means range specified in r1,r2
    ADD    r1,sp,#4*4               ;start address (allowing for stacked r0-r2,lr)
    ADD    r2,r1,#4                 ;end address (inclusive) for 2 words of code
    SWI    XOS_SynchroniseCodeAreas ;do the necessary
    Pull   "r0-r2,lr"
  ]

d107 2
d146 1
a146 1
        Pull    "R7-R9,PC",EQ,^                         ; if so then return now
d221 1
a221 1
        Pull    "R7-R9,PC",,^                           ; shazam!
@


4.2
log
@Version RO_3_70 taken
@
text
@d23 1
a23 1
;; The code is supplied by Tony Cheal at Ace Computing / Oak Solutions to 
d30 1
a30 1
;; Pass a specified colour word (&bbggrrxx) through the calibration table 
d34 1
a34 1
;;      R3 -> table 
d56 2
a57 2
 
        LDR     R0,[R3,#calib_idealblack]               
d59 1
a59 1
        [       Version >= 123
d92 1
a92 1
        ADR     R2,%FT20 -4                             
d106 1
a106 1
  ]  
d112 1
a112 1
        Pull    "R0,R4-R6,PC"                           ; return passing back error and flags 
d121 1
a121 1
;;                newB = oldB * (1 - (min(R,G,B) / max (R,G,B)) * (1 - idealB)                
d133 2
a134 2
                                                                    
        [       Version >= 123
d139 1
a139 1
        MOVLO   R8,R6 
d145 1
a145 1
        MOVHI   R8,R6 
d149 2
a150 2
         
        [       Version >= 123
d156 1
a156 1
        |                                                             
d178 1
a178 1
        [       Version >= 123
d194 1
a194 1
        [       Version >= 123
d208 1
a208 1
        [       Version >= 125
d214 1
a214 1
        [       Version >= 123
@


4.1
log
@Initial revision
@
text
@d98 10
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a97 10

  [ StrongARM
    Push   "r0-r2,lr"
    MOV    r0,#1                    ;means range specified in r1,r2
    ADD    r1,sp,#4*4               ;start address (allowing for stacked r0-r2,lr)
    ADD    r2,r1,#4                 ;end address (inclusive) for 2 words of code
    SWI    XOS_SynchroniseCodeAreas ;do the necessary
    Pull   "r0-r2,lr"
  ]  

@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
