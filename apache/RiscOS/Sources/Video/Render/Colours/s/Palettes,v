head	4.7;
access;
symbols
	Colours-1_95:4.7
	Colours-1_94:4.7
	Colours-1_93:4.7
	Colours-1_92:4.7
	Colours-1_91:4.7
	Colours-1_90:4.7
	Colours-1_89:4.6
	Colours-1_88:4.6
	Colours-1_87:4.6
	Colours-1_86:4.6
	Colours-1_85:4.5
	Colours-1_84:4.5
	Colours-1_83:4.5
	Colours-1_82:4.5
	Colours-1_81:4.5
	Colours-1_80:4.5
	Colours-1_79:4.5
	Colours-1_78:4.5
	Colours-1_77:4.4
	RO_5_07:4.4
	Colours-1_76:4.4
	Colours-1_75:4.4
	Colours-1_74:4.4
	Colours-1_73:4.4
	Colours-1_72:4.4
	dellis_autobuild_BaseSW:4.3
	Colours-1_71:4.3
	Colours-1_70:4.3
	Colours-1_69:4.3
	sbrodie_sedwards_16Mar2000:4.2
	dcotton_autobuild_BaseSW:4.4
	Colours-1_68:4.2
	Colours-1_67:4.2
	Ursula_merge:4.1
	nturton_Colours-1_65:4.1
	dcotton_colours_MPTInitialBuild:4.1.7.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2014.03.09.16.03.32;	author jlee;	state Exp;
branches;
next	4.6;
commitid	WOmdzPKUoPn7B2sx;

4.6
date	2013.08.06.23.49.21;	author jlee;	state Exp;
branches;
next	4.5;
commitid	wewI5Vx1d9Rn5s0x;

4.5
date	2010.08.29.11.25.01;	author rsprowson;	state Exp;
branches;
next	4.4;

4.4
date	2000.11.17.12.51.46;	author bavison;	state Exp;
branches;
next	4.3;

4.3
date	2000.05.12.12.34.34;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	99.08.05.09.52.00;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.42.19;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.42.19;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.08.37;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.48.19;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.11.15;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Use a greyscale palette when screen output is redirected to an alpha mask
Detail:
  s/Header - Update ResourceFS scanning to identify the deafult 8bpp greyscale palette and remember its location
  s/Palettes - When screen output is switching to an alpha mask, instead of trying to use the sprite's palette use the 8bpp greyscale palette instead.
Admin:
  Tested on Iyonix, BB-xM


Version 1.90. Tagged as 'Colours-1_90'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Palettes

        MakeEitherErrorBlock CTBuffOver

;..............................................................................
;
; Define some important flags used within this file.
;

readpalflag_SpritePointer  * 1:SHL:0
readpalflag_ReturnFlashing * 1:SHL:1

setpalflag_SpritePointer   * 1:SHL:0
setpalflag_WriteFlashing   * 1:SHL:1
setpalflag_DontCompact     * 1:SHL:2

palette_BrainDamaged       * 1:SHL:0
palette_DoubleEntries      * 1:SHL:1

readpalflag_Allowed        * 2_11
setpalflag_Allowed         * 2_111

        ASSERT  palette_DoubleEntries =readpalflag_ReturnFlashing
        ASSERT  palette_DoubleEntries =setpalflag_WriteFlashing

;------------------------------------------------------------------------------
;
; ColourTrans_ReadPalette
;
;  in: r0  = source of palette data
;                      = -1 => current mode
;                    <= 255 => specified screen mode
;                    >= 256 => sprite block pointer (R1 -> sprite)
;
;      r1  = palette block pointer
;                       =-1 => current
;                       = 0 => default for the mode
;                    else -> sprite name or -> sprite (R4,bit 1 set)
;
;      r2 -> buffer to return data into
;      r3  = size of return buffer
;      r4  = flags
;               bit 0 set => R1 is a sprite pointer
;               bit 1 set => return flashing colours
;
;               all other bits reserved for future expansion.
;
; out: V set => r0 -> error block, else;-
;
;      if r2 <>0 on entry then [r2] contains data, r3 =remaining space
;      if r2  =0 on entry then r3 =size of table that would be returned
;
; This call is used to read the palette associated with a particular device or
; sprite.  The palette returned is always in TRUE 24 bit RGB and not in some
; brain-damaged form used by the graphics controller.
;

ReadPalette_Code ROUT

        Push    "R0-R1,R4-R11,LR"

        Debug   input1,"ReadPalette: R0-R4",R0,R1,R2,R3,R4
        Debug   input2,"ReadPalette: source mode/pal",R0,R1
        Debug   input2,"buffer, size, flags",R2,R3,R4

        Debug   palettes,"Read palette for mode/sprite mode",R0
        Debug   palettes,"R1-R4",R1,R2,R3,R4

        BICS    LR,R4,#readpalflag_Allowed
        addr    R0,ErrorBlock_CTBadFlags,NE
        BNE     readpalette_makeerror   ;Are there valid flags setup; if not then complain

        MOV     R11,#0                  ;Flags about the reading of the entries

        CMP     R0,#256                 ;Is it a sprite pointer (should clear V)
        BCC     readpalette_modenumber
        CMP     R0,#-1
        BEQ     readpalette_modenumber
        TST     R0,#&01
        BNE     readpalette_modenumber

        CMP     R0,#&8000
        CMPNE   R0,#256
        BEQ     %FT19

        LDR     LR,[R0]
        TST     R14,#&01
        BNE     readpalette_modenumber

        ;at this point it must be a sprite
19
        BL      DecodeSprite
        BVS     readpalette_return      ;Return any errors that may be generated

readpalette_modenumber
        Debuga  palettes,"Mode number",R0
        Debug   palettes," palette pointer",R1
        Debug   palettes,"Buffer to return data into",R2
        Debug   palettes,"Size of return buffer",R3
        Debug   palettes,"Flags word",R4

        Push    "R1,R2"                 ;Preserve the palette -> and return buffer

        MOV     R1,#VduExt_Log2BPP
        SWI     XOS_ReadModeVariable    ;Read the Log2BPP
        MOVVC   R5,R2                   ;Take a copy
        Pull    "R1,R2"
        BVS     readpalette_return      ;It went wrong so return an error
        BCS     readpalette_badmode     ;If CS then bad mode so return that aswell

        Debuga  palettes,"Mode number",R0
        Debug   palettes," Log2BPP of this mode",R5

        CMP     R5,#3                   ;Is the depth valid?
        BGT     readpalette_baddepth

        TEQ     R1,#0                   ;Are we supposed to use default palette for mode?
        BNE     readpalette_notdefault

        addr    LR,defpals
        LDR     R1,[LR,R5,LSL#2]
        ADD     R1,R1,LR                ;If default for mode then convert the 0 value to a table pointer

        TEQ     R5,#3                   ;Is it a 256 colour mode, yes so mark as brain damaged
        ORREQ   R11,R11,#palette_BrainDamaged

readpalette_notdefault
        MOV     LR,#1
        MOV     R7,LR,LSL R5
        MOV     R7,LR,LSL R7            ;Number of colours in the mode by: 1<<(1<<Log2BPP)

        MOV     LR,R7,LSL#2             ;Size of data block that would be returned, colours *4

        TST     R4,#readpalflag_ReturnFlashing
        MOVNE   LR,LR,LSL#1             ;If flashing colours then double buffer size

        CMP     R2,#0                   ;Counting the size of the buffer? (clears V)
        MOVEQ   R3,LR
        BEQ     readpalette_return      ;Yes, so R3 is the size and now return the value

        SUBS    R3,R3,LR                ;Otherwise just subtract from size and get amount of space remaining
        addr    R0,ErrorBlock_CTBuffOver, LT
        BLT     readpalette_makeerror   ;Generate a suitable error

        Debuga  palettes,"Mode number returning from",R0
        Debug   palettes," palette pointer",R1
        Debuga  palettes,"Return buffer",R2
        Debug   palettes," with remaining space of",R3
        Debug   palettes,"Flags for the call",R4

        MOV     R9,#0                   ;Colour number to copy
        MOV     R10,R1                  ;Setup the palette pointer

        Debuga  palettes,"About to scan palette from",R9
        Debug   palettes," until",R7
        Debug   palettes,"Flags passed to getpalentry",R11

;        ; find out whether we can use the fast routine
        TEQ     R10,#0
        BNE     readpalette_main        ;not if reading from a sprite/memory

        STMFD   R13!,{R0-R7}
        MOV     R0,#0
        MOV     R1,#16
        ORR     R1,R7,R1,LSL #24
        MOV     R6,R2
        TST     R11,#palette_DoubleEntries
        ORRNE   R1,R1,#&02000000 ; change type from 16 to 18

        BL      fast_read_whole_palette

        CMP     R0,#0                   ;will be 0 if it succeeded
        LDMFD   R13!,{R0-R7}
        BNE     readpalette_main

        ;need to set up return conditions - R2+=size R3-=size

        ;R7 = Number of colours in the mode by: 1<<(1<<Log2BPP)

        MOV     LR,R7,LSL#2             ;Size of data block that would be returned, colours *4

        TST     R4,#readpalflag_ReturnFlashing
        MOVNE   LR,LR,LSL#1             ;If flashing colours then double buffer size

        SUBS    R3,R3,LR                ;Otherwise just subtract from size and get amount of spac
        ADD     R2,R2,LR
        B       readpalette_return

readpalette_main
        CMP     R9,R7                   ;Have we finished filling the buffer yet?
        BEQ     readpalette_return      ;Yes we have so return home

        BL      getpalentry             ;Read palette entry into R5,R6
        TST     R4,#readpalflag_ReturnFlashing
        STMNEIA R2!,{R5-R6}
        STREQ   R5,[R2],#4              ;Store the correct number

        ADD     R9,R9,#1
        B       readpalette_main        ;Loop until they have all been read

readpalette_badmode
        BadMODE                         ;Get the pointer to the bad mode error string

readpalette_makeerror
        BL      LookupError             ;Sets V and resolves r0 to error block

readpalette_return
        STRVS   R0,[SP]                 ;Store error pointer if needed
        Pull    "R0-R1,R4-R11,PC"

readpalette_baddepth
        ADR     R0,ErrorBlock_CTBadDepth
        B       readpalette_makeerror

        MakeEitherErrorBlock CTBadDepth

;..............................................................................
;
; Get a pallete entry, from either screen or table.  Will perform calibration
; and convert from brain damaged values as required.
;
;  in:    r9  = colour number
;        r10 -> palette block / =-1 from screen
;        r11  = flags
;                 bit 0 set => colour values are brain damaged
;                 bit 1 set => palette table contains double entries
;
; out:    r5  = 1st flash state
;         r6  = 2nd flash state
;

getpalentry
        Push    "R0-R3,LR"

        CMP     R10,#-1                 ;Reading from the screen?
        BNE     try_fromblock

        MOV     R0,R9
        MOV     R1,#16
        BL      my_read_palette         ;Read palette and calibrate if needed
        ADDS    R5,R2,#0                ;clear V
        MOV     R6,R3                   ;Copy to the usable registers

        Pull    "R0-R3,PC"

try_fromblock
        ADDS    LR,R9,#0                ;Index into palette table (clear V)

        TST     R11,#palette_BrainDamaged
        ANDNE   LR,R9,#15               ;If brain-damaged then we can only trust first 16 entires

        TST     R11,#palette_DoubleEntries
        LDREQ   R5,[R10,LR,LSL#2]       ;Yup - reading double entries
        MOVEQ   R6,R5                   ;When table does not contain flash states then return both entries the same
        ADDNE   R5,R10,LR,LSL#3
        LDMNEIA R5,{R5,R6}              ;Otherwise read both entries

        TST     R11,#2_001              ;Brain damaged munging needed?
        Pull    "R0-R3,PC",EQ

        BIC     R5,R5,#&80000000        ;Transfer hard blue bit
        BIC     R6,R6,#&80000000
        AND     LR,R9,#&80
        ORR     R5,R5,LR,LSL#31-7
        ORR     R6,R6,LR,LSL#31-7
        BIC     R5,R5,#&00C00000        ;Transfer hard green bits
        BIC     R6,R6,#&00C00000
        AND     LR,R9,#&60
        ORR     R5,R5,LR,LSL#23-6
        ORR     R6,R6,LR,LSL#23-6
        BIC     R5,R5,#&00008000        ;Transfer hard red bit
        BIC     R6,R6,#&00008000
        AND     LR,R9,#&10
        ORR     R5,R5,LR,LSL#15-4
        ORR     R6,R6,LR,LSL#15-4

        LDR     R3,=&F0F0F000           ;Sort out 12bit VIDC palette blocks
        AND     R5,R5,R3
      [ newcalibration
        ORR     R5,R5,R5,LSR#4
      |
        ORR     R2,R5,R5,LSR#4
        BL      convert_screen_colour
        MOV     R5,R2
      ]

        AND     R6,R6,R3
      [ newcalibration
        ORR     R6,R6,R6,LSR#4
      |
        ORR     R2,R6,R6,LSR#4
        BL      convert_screen_colour
        MOV     R6,R2
      ]

        CLRV
        Pull    "R0-R3,PC"

        LTORG

;------------------------------------------------------------------------------




;------------------------------------------------------------------------------
;
; ColourTrans_WritePalette
;
;  in: R0  = destination for write
;                        = -1 the to current device
;                       >=  0 then go to specified sprite area (R1 -> sprite)
;
;      R1 -> destination for write
;               if r0 =-1 then;
;                       r1 =-1 to write to screen
;
;               if r0 >=0 then;
;                       R4,bit 0 =1 -> sprite in area
;                       R4,bit 0 =0 -> sprite name
;
;      R2 -> palette block
;      R3  = reserved (should be zero)
;      R4  = flags word
;               bit 0 set => R1 -> sprite not name
;               bit 1 set => flashing colours in table
;               bit 2 set => disable palette compaction
;
;               all other bits reserved for future expansion and should be zero.
;
; out: V set => r0 -> error block
;      V clear => all preserved.
;
; This code will write the palette associated with a particular device, the
; call deals with true 24bit RGB and will attempt to write to a sprite if
; required and the screen.
;
; When the call is aimed at a sprite then the call attempts to compact and
; expand the palette to see if it can use the tint translation used in
; read palette to compress the palette down to 16 entries rather than 256.
;
; The call indirects via PaletteV as required, also when writing to a sprite
; which has output switched to it it the output will work.
;
        MakeEitherErrorBlock CTSwitched

WritePalette_Code ROUT

        Push    "R0-R11,LR"

        Debug   input1,"WritePalette: R0-R4",R0,R1,R2,R3,R4
        Debug   input2,"WritePalette: mode, palette, >palette",R0,R1,R2
        Debug   input2,"zero, flags",R3,R4

        LDR     LR,[WP,#PaletteAt]
        CMP     LR,#0                   ;Is output switched to a sprite at the moment? (Will clear V if equal)
        ADRNE   R0,ErrorBlock_CTSwitched
        BNE     writepalette_returnalt

        BICS    LR,R4,#setpalflag_Allowed
        addr    R0,ErrorBlock_CTBadFlags,NE
        BNE     writepalette_returnalt  ;If invalid flags then give up with a bang!

        MOV     R11,#0                  ;Reset my internal flags word
        MOV     R10,R0                  ;Device to write to is in R10 (DecodeSprite changes it)
        MOV     R9,R10                  ;We also need a seperate copy of the block pointer

        CMP     R0,#-1                  ;Is it writing to the screen? (almost certainly Clears V)
        BLNE    DecodeSprite            ;Returns mode and sprite palette address
        BVS     writepalette_return

        Debug   palettes,"Mode writing to",R0
        Debug   palettes,"Palette table is at",R2
        Debug   palettes,"Destination is",R10

        Push    "R2"
        MOV     R1,#VduExt_Log2BPP
        SWI     XOS_ReadModeVariable
        MOVCC   R5,R2                   ;Take copy of Log2BPP as required
        Pull    "R2"                    ;Restoring R2
        BVS     writepalette_return
        BCS     writepalette_badmode    ;If mode not known we cannot do anything with this call

        CMP     R5,#3
        BGT     writepalette_baddepth   ;Complain if greater than 8 bit per pixel mode!

        MOV     LR,#1
        MOV     R5,LR,LSL R5
        MOV     R5,LR,LSL R5            ;Number of colours within this mode to be used

        Debug   palettes,"Number of colours to be written",R5

        CMP     R10,#-1                 ;Is it being directed at a sprite?
        BEQ     writepalette_skipcompact

        TST     R4,#setpalflag_DontCompact
        TEQEQ   R5,#256                 ;Is this a 256 colour palette we see before us and is compact on?
        BNE     writepalette_ensuresize

        Push    "R0-R1,R5-R6,R9-R11"

        MOV     R9,R5                   ;Setup the first entry in the table
        MOV     R10,R2                  ;Setup pointer to block to scan
        AND     R11,R4,#setpalflag_WriteFlashing

        Debug   palettes,"About to perform compression check on table at",R10

writepalette_compactloop
        SUBS    R9,R9,#1                ;Have we finished scanning the palette yet?
        Pull    "R0-R1,R5-R6,R9-R11",MI
        MOVMI   R5,#16                  ;If we can compact then compact to 16 entries
        BMI     writepalette_ensuresize

        EOR     R11,R11,#2_1            ;We must read the brain damaged copy of the colour
        BL      getpalentry
        Push    "R5,R6"
        EOR     R11,R11,#2_1            ;And then the original non-damaged version
        BL      getpalentry
        Pull    "R0,R1"

        TEQ     R0,R5
        TEQEQ   R1,R6                   ;Are the colours the same? not likely but could happen!
        BEQ     writepalette_compactloop;If so then we are one step closer to compaction

        Debug   palettes,"Compression failed on entry",R9
        Debuga  palettes,"1st flash (brain damaged)",R0
        Debug   palettes," compared to 1st flash (original)",R5
        Debuga  palettes,"2st flash (brain damaged)",R1
        Debug   palettes," compared to 2st flash (original)",R6

        Pull    "R0-R1,R5-R6,R9-R11"    ;Comaction has failed to install a full size palette

writepalette_ensuresize
        Debug   palettes,"Compression check resulted in palette size of",R5

        Push    "R0-R5"                 ;Preserve the all important registers

        LDR     R0,=&200+SpriteReason_CreateRemovePalette
        MOV     R1,R9
        MOV     R2,R10                  ;Pointer to sprite to be modified
        MOV     R3,#1                   ;Adding a palette
        TEQ     R5,#256                 ;Are we adding a complete 256 colour palette?
        ORREQ   R3,R3,#1:SHL:31         ;If bit 31 set of R3 then don't add a brian damaged version
        Debug   palettes,"Calling CreateRemovePalette with reason",R3
        SWI     XOS_SpriteOp
        MOVVC   R3,#-1                  ;Now read the addresses back
        SWIVC   XOS_SpriteOp
        MOVVC   R10,R4                  ;If that worked then R10 points at the palette block
        STRVS   R0,[SP]

        Debuga  palettes,"Recieved back pointer of",R4
        Debug   palettes," and size of",R3

        Pull    "R0-R5"
        BVS     writepalette_return     ;Return if the palette creation fails

writepalette_skipcompact
        MOV     R0,#0                   ;Entry for me to write
        MOV     R1,#16                  ;Writing both flash states as RGB values
        MOV     R6,R2                   ;Pointer to data block to be copied

; NB: If writing to a sprite R10 will have changed to point at the actual
;     palette block to be written into.

; if we are writing the screen palette, try and use the new BulkWrite
; PaletteV reason code

        CMP     R10,#-1
        BNE     writepalette_loop       ;Skip if to a sprite

        STMFD   R13!,{R0-R6}

        ;R1=colour type
        ;R0=first colour
        ;R6=>source data
        ;R5=number to do

        ORR     R1,R5,R1,LSL #24        ;build the type/number word
        TST     R4,#setpalflag_WriteFlashing
        ORREQ   R1,R1,#&01000000        ;change to write one word only if
                                        ;we are not doing flashing colours

        MOV     R0,#0
        MOV     R2,R6

        MOV     R4,#paletteV_BulkWrite

        BL      fast_write_whole_palette

        CMP     R4,#0
        LDMFD   R13!,{R0-R6}
        BEQ     writepalette_return

writepalette_loop
        CMP     R0,R5                   ;Finished writing data yet?
        BEQ     writepalette_return

        TST     R4,#setpalflag_WriteFlashing
        LDREQ   R2,[R6],#4
        MOVEQ   R3,R2
        LDMNEIA R6!,{R2,R3}             ;Setup R2,R3 to contain two words no matter what

        BL      dowrite                 ;Write as required to the device
        ADD     R0,R0,#1
        B       writepalette_loop

writepalette_badmode
        BadMODE                         ;Get pointer to the bad mode error string

writepalette_returnalt
        BL      LookupError             ;Setup error block pointer

writepalette_return
        STRVS   R0,[SP]                 ;Store error pointer as required
        Pull    "R0-R11,PC"

dowrite Push    "LR"

        CMP     R10,#-1
        BNE     %FT40
        BL      my_write_palette        ;If writing to the screen then go via global routine
        Pull    "PC"
40      ADD     LR,R10,R0,LSL#3
        STMIA   LR,{R2,R3}              ;If writing to a sprite then do so at index *8 as entries are two words
        Pull    "PC"

writepalette_baddepth
        ADRL    R0,ErrorBlock_CTBadDepth
        B       writepalette_returnalt

;------------------------------------------------------------------------------
;
; fast_read_whole_palette
;
; This routine tries to use the new PaletteV bulk read reason code. If that fails
; it is the caller's responsibility to fall back to individual reads
;
; in: R0 = number of colours
;     R1 = type
;     R6 => where to put returned data (one or both flash states)
;
; out: R0 = 0 if successful, preserved otherwise
;      [R6] contains palette entries
;
; everything else preserved.

fast_read_whole_palette ROUT

        Push "R0-R4,R6,R9,R10,R14"

        ; don't try to be too clever - if the palette is in a sprite return
        ; immediately!

        LDR     R10,[WP,#PaletteAt]
        TEQ     R10,#0
        BNE     %FT80
        ; try the new call

        ORR     R1,R0,R1,LSL #24
        MOV     R0,#0                   ;no colour list - start at first
        MOV     R2,R6                   ;where to put device colours
        MOV     R3,#0                   ;put everything at [R2]

        MOV     R4,#paletteV_BulkRead   ;Attempt to obtain a single entry

        MOV     R9,#PaletteV
        SWI     XOS_CallAVector

        BVS     %FT80                   ;It went BANG!

        TEQ     R4,#paletteV_Complete   ;Was the operation sucsessful?
        BEQ     %FT90

80      ; failed exit
        Pull    "R0-R4,R6,R9,R10,PC"

90      ; successful exit
        Pull    "R0-R4,R6,R9,R10,R14"
        MOV     R0,#0
        MOV     PC,LR

;------------------------------------------------------------------------------
;
; fast_write_whole_palette
;
; This routine tries to use the new PaletteV bulk write reason code. If that fails
; it is the caller's responsibility to fall back to individual reads
;
; (parameters in are the same as the call itself)
; in: R0 => colours to write or 0 for sequential from 0
;     R1 =  type word & number to do
;     R2 => palette data
;     R4 =  8
;
; out: R4 = 0 if successful, preserved otherwise
;
; everything else preserved.

fast_write_whole_palette ROUT

        Push "R0-R3,R9,R10,R14"

        ; try the new call

        MOV     R9,#PaletteV
        SWI     XOS_CallAVector

        BVS     %FT80                   ;It went BANG!

        TEQ     R4,#paletteV_Complete   ;Was the operation sucsessful?
        BEQ     %FT90

80      ; failed exit
        Pull    "R0-R3,R9,R10,PC"

90      ; successful exit

        ;if called to write a steady colour, repeat the call for the
        ;second flash state

        TST      R1,#&01000000
        EORNE    R1,R1,#&03000000
        MOVNE    R9,#PaletteV
        MOV      R4,#8

        SWINE    XOS_CallAVector
        BVS      %BT80


        MOV     R4,#0
        Pull    "R0-R3,R9,R10,PC"

;------------------------------------------------------------------------------
;
; my_read_palette
;
;  in: r0  = colour
;      r1  = 16 for normal colour, 24 for border etc...
;
; out: r3 dies,
;      r2  = is the standard RGB colour
;
; Using the result of OS_ReadPalette leeds to a bias in the colour selection
; as the lower nibbles are always null.  This routine copies and then calibrates
; the colours correctly.
;
; The call first trys using the PaletteV to obtain the colour, if this works
; then it will simply return it without modification assuming it is TRUE 24 bit
; colour.
;

my_read_palette ROUT

      [ callpaletteV

        Push    "R9-R11,LR"

        LDR     R10,[WP,#PaletteAt]
        TEQ     R10,#0
        BNE     my_read_palettefromsprite

        Push    "R4"

        MOV     R4,#paletteV_Read               ;Attempt to obtain a single entry
        MOV     R9,#PaletteV
        SWI     XOS_CallAVector
        Pull    "R4,R9-R11,PC",VS               ;Return if the call went BANG!

        TEQ     R4,#paletteV_Complete           ;Was the operation sucsessful?
        SWINE   XOS_ReadPalette                 ;No so we have to call OS_ReadPalette - bla!
        LDRNE   LR,=&F0F0F000
        ANDNE   R2,R2,LR
        ORRNE   R2,R2,R2,LSR #4                 ;Copy lower nibbles down as VIDC only has 12bit colour
10
    [ :LNOT: newcalibration
      [ docalibration
        BL      convert_screen_colour           ; convert the screen colour
      ]
    ]
        CLRV
        Pull    "R4,R9-R11,PC"

my_read_palettefromsprite
        Push    "R5-R6"

        MOV     R9,R0                           ;Get colour and flags word
        LDR     R11,[WP,#PaletteFlags]
        BL      getpalentry                     ;And then attempt to read entry
        ADDS    R2,R5,#0                        ; clear V
        MOV     R3,R6                           ;Return the correct colours in R2,R3

        Debug   palettes,"read returning 1st flash",R2
        Debug   palettes,"read returning 2nd flash",R3

        Pull    "R5-R6,R9-R11,PC"

      |

        Push    "R3,LR"

        SWI     XOS_ReadPalette                 ;No so we have to call OS_ReadPalette

        LDRVC   LR,=&F0F0F000
        ANDVC   R2,R2,LR
        ORRVC   R2,R2,R2,LSR #4                 ;Copy lower nibbles down as VIDC only has 12bit colour
        BLVC    convert_screen_colour           ;And then calibrate

        Pull    "R3,PC"

      ]

;------------------------------------------------------------------------------




;------------------------------------------------------------------------------
;
; my_write_palette
;
;  in:  r0  = colour number to write
;       r1  = reason code to use for write
;       r2  = 1st flash state if applicable
;       r3  = 2nd flash state if applicable
;
; This code should write palette entries.  The code attempts to call the
; PaletteV and then if this fails resorts back to using OS_Word.
;

my_write_palette ROUT

        Push    "R4,R9,LR"

        MOV     R4,#paletteV_Set                ;Set the colours within paletteV
        MOV     R9,#PaletteV
        SWI     XOS_CallAVector
        Pull    "R4,R9,PC",VS                   ;Return if it errored

        TEQ     R4,#paletteV_Complete
        Pull    "R4,R9,PC",EQ                   ;If its been handled then return

        AND     R14,R0,#&FF
        AND     R4,R1,#&FF
        ORR     R4,R14,R4,LSL #8
        BIC     R14,R2,#&FF                     ;R14 = &BBGGRR00
        ORR     R4,R4,R14,LSL #8                ;R4  = &GGRRr1r0 (green,red,R1,R0)
        MOV     R14,R2,LSR #24                  ;R14 = &000000BB (blue)
        Push    "R0,R1,R4,R14"
        ADD     R1,sp,#2*4                      ;R1 -> block
        MOV     R0,#12                          ;Write palette
        SWI     XOS_Word
        STRVS   R0,[sp]
        Pull    "R0,R1,R4,R14"

        Pull    "R4,R9,PC"                      ;Restore the registers

;------------------------------------------------------------------------------




;------------------------------------------------------------------------------
;
; output_to_sprite
;
;  in: r1  = service code
;      r2  = reason code for SpriteOp (although always 512)
;      r3 -> sprite block
;      r4 -> sprite
;      r5 -> store area
;
; We must now decode the switching of output to the sprite to see which
; sprite.  We must then decode the sprite pointer and decide what sort of
; palette is being used, this can be done by calling DecodeSprite this returns
; the palette size, flags and then return.
;
; When read palette is called it uses these values to perform the read
; from either the screen or the palette.
;

output_to_sprite ROUT

        Push    "R0-R4,R10-R11,LR"

        BL      validateworkspace

        MOV     R0,R3                           ;Is output going back to the screen?
        MOVS    R1,R4
        MOV     R4,#readpalflag_SpritePointer
        BEQ     output_to_sprite1               ;V must be clear and R1 point at the sprite block

        Debug   palettes,"Sprite block at",R0
        Debug   palettes,"Sprite is at",R1
        Debug   palettes,"Flags",R4

        MOV     R11,#0                          ;Default flags are zero
        BL      DecodeSprite
        DebugE  palettes,"Error from decode sprite is"

        ; If redirecting output to an alpha mask, use the default 256 grey palette (assuming we found it in ResourceFS)
        BVS     output_to_sprite1
        ASSERT  SpriteReason_SwitchOutputToSprite = 60
        ASSERT  SpriteReason_SwitchOutputToMask = 61
        TST     R2,#1
        TSTNE   R0,#&80000000
        LDRNE   R1,[WP,#grey8bpp_palette]
        MOVNE   R11,#0
        BNE     output_to_sprite1

    [ defaultpalettes

        ! 0,"Palette handling uses the default for mode when no present"

;This code when assembled in copes with sprites that have no palette.  It will
;attempt to use the default palette for that screen mode rather than the current
;one.
;
;This however had its problems as highlighted by the PC Stimulator and Acorn DTP,
;so currently it is assembled out.
;
      [ debugpalettes
        BVS     output_to_sprite1               ;Skip if an error occurred

        Debug   palettes,"Mode for sprite is",R0
        Debug   palettes,"Palette table is at",R1
        Debug   palettes,"Sprite is at",R10
        Debug   palettes,"Flags for palette is at",R11
      ]

        TEQ     R1,#0                           ;Is a palette table specified?
        BNE     output_to_sprite1

        MOV     R1,#VduExt_Log2BPP
        SWI     XOS_ReadModeVariable            ;Read the Log2BPP of the mode
        MOVCS   R1,#0
        BCS     output_to_sprite1               ;If it fails then use current screen palette as before!

        addr    LR,defpals
        LDR     R1,[LR,R2,LSL#2]
        ADD     R1,R1,LR                        ;If default for mode then convert the 0 value to a table pointer

        TEQ     R2,#3
        ORREQ   R11,R11,#palette_BrainDamaged   ;If its 8BPP then mark as brain damaged.
    ]
output_to_sprite1
        Debug   palettes,"Palette block is at",R1
        Debug   palettes,"Flags being used are",R11

        STRVC   R1,[WP,#PaletteAt]
        STRVC   R11,[WP,#PaletteFlags]          ;Store new improved values

        MOVVC   R0,#-1
        MOVVC   R1,#VduExt_Log2BPP
        SWIVC   XOS_ReadModeVariable            ;Read the Log2BPP of the switched mode
        STRVCB  R2,[R12,#CachedL2BPP]

        MOVVC   R1,#VduExt_ModeFlags
        SWIVC   XOS_ReadModeVariable            ;Get the mode flags
        MOVCS   R2,#0
      [ NoARMv4
        STRVCB  R2,[R12,#CachedModeFlags]
        MOVVC   R2,R2,LSR #8
        STRVCB  R2,[R12,#CachedModeFlags+1]
      |
        STRVCH  R2,[R12,#CachedModeFlags]
      ]

        MOVVC   R1,#VduExt_NColour
        SWIVC   XOS_ReadModeVariable
        BVS     %FT90
        MOVCS   R2,#0                   ;Is there much point handling errors here?
        ; These code snippets will produce nonsense results for YUV modes
      [ NoARMv5
        MOV     R1,#0
10
        MOVS    R2,R2,LSR #1
        ADDCS   R1,R1,#1
        BCS     %BT10
      |
        CLZ     R1,R2
        RSB     R1,R1,#32
      ]
        STRB    R1,[R12,#CachedL2NColour]        

90
        STRVS   R0,[SP]                         ;Store the error pointer if required
        Pull    "R0-R4,R10-R11,PC"

        LTORG

;------------------------------------------------------------------------------




;------------------------------------------------------------------------------
;
; DecodeSprite
;
;  in:  r0 -> sprite area
;       r1 -> sprite name/sprite
;       r4  = flags word
;                       bit 0 set => r1 ->sprite rather than ->name
;
;      r11  = flags word where bit 0 used to indicate if brain damaged
;             and bit 1 used to indicate double entries
;
; out:  r0,r1 corrected to contain mode and palette pointers
;       r10 -> sprite within the block
;       r11 bit 0 updated to indicate if palette is send to be brain damaged
;           and bit 1 is used to indicate double entries.
;
; This code is used to scan the sprite areas and attempt to convert the
; sprite name and block pointers into absolute sprite information.
;
; The routine has to decode if the sprite is possibly an extended 256 colour
; sprite and then attempt to fall back if not to the old 'brain damaged'
; format if not.
;

DecodeSprite
        Push    "R2-R5,LR"

        TST     R4,#readpalflag_SpritePointer
        MOVNE   R10,R1
        BNE     decodesprite_found      ;Was an absolute sprite pointer specified

        MOV     R2,R1
        MOVS    R1,R0                   ;Copy Sprite pointers up if r1 =0 then system sprite
        BNE     decodesprite_notsystem

        MOV     R0,#3                   ;R0=3, read system sprite base address
        SWI     XOS_ReadDynamicArea
        BVS     decodesprite_return     ;This should not error, but just-in-case!!

        MOV     R1,R0                   ;They say its corrupt; we know its a pointer to the area!

decodesprite_notsystem
        LDR     R0,=(SpriteReason_SelectSprite+&100)
        SWI     XOS_SpriteOp            ;Look up sprite at r1,r2; return pointer in R1
        BVS     decodesprite_return

        MOV     R10,R2                  ;Setup R1 to point at the sprite to be used

decodesprite_found

        Debug   palettes,"Sprite found and is at",R10

        LDR     R0,=&200+SpriteReason_CreateRemovePalette
        MOV     R2,R10
        MOV     R3,#-1
        SWI     XOS_SpriteOp            ;Attempt to read the presence of a palette
        BVS     decodesprite_return

        Debug   palettes,"Size of palette data is",R3
        Debug   palettes,"Palette data lives at",R4
        Debug   palettes,"MODE that sprite is defined in",R5

        MOV     R0,R5                   ;Return the mode value in R0
        MOVS    R1,R4                   ;Address of the palette data
        BEQ     decodesprite_return

        MOV     R1,#VduExt_Log2BPP
        SWI     XOS_ReadModeVariable    ;Read the Log2BPP

        TEQ     R2,#3                   ;Is it an 8BPP mode?
        BNE     decodesprite_passback

        TEQ     R3,#256                 ;Is it a brain damaged mode?
        ORRNE   R11,R11,#palette_BrainDamaged

      [ debugpalettes
        BNE     decodesprite_passback
        Debug   palettes,"Is an extended palette"
      ]

decodesprite_passback
        MOV     R1,R4                   ;Return pointer to the palette data and flag for double entries
        ORR     R11,R11,#palette_DoubleEntries

decodesprite_return
        Pull    "R2-R5,PC"

;------------------------------------------------------------------------------


        END
@


4.6
log
@Update to cope with new pixel formats
Detail:
  s/Commons - Update best/worst colour code to add support for all the new RGB pixel format variations
  s/Dither - Rework code to remove reliance on now removed get_physical16bpp routine
  s/Enhanced - Drop support for VIDC enhancer. "VIDC20" code enhanced to add support for all the new RGB pixel formats, mainly reliant on new ColourConv macro. Drop get_physical16bpp routine as it wasn't really needed and would have been a pain to update.
  s/FontColours - Remove reference to obsolete PseudoPaletteEntry variable
  s/Header - Update workspace to clarify how certain variables are overlaid over the colour cache entries. Rename temp_guardtable to temp_errortable as the name makes more sense to me. Cache current modeflags & log2 NColour in InitCache.
  s/MainSWIs - Flag_* -> ModeFlag_* renaming. Pass through source mode to make32Ktable
  s/Palettes - Strip out some old Module_Version switches to make code more readable. Cache current modeflags and log2 NColour values when dealing with sprite output.
  s/Tables32K - Table generation code rewritten to add support for new 16bpp pixel formats, be faster, and (hopefully) more readable. Core generation code has been split off into seperate file, s/TablesAlgo, as it's needed multiple times but is too big for a macro.
  s/TablesAlgo - New file containing core code for the "32K" table generation. Disregarding pixel format differences, it can be assembled in two forms, optimised either for large or small data caches. New code is 85% faster on BB-xM (large cache version), 43% faster on Iyonix and 80% faster on StrongARM (both small cache version).
Admin:
  Tested on BB-xM
  Part of an implementation of the Extended Framebuffer Format spec:
  http://www.riscosopen.org/wiki/documentation/show/Extended%20Framebuffer%20Format%20Specification
  Code is in need of updating to allow caller to identify which type of 32K table has been returned (i.e. old-style 32K table or some new kind of 4K/32K/64K one)


Version 1.86. Tagged as 'Colours-1_86'
@
text
@d500 1
a500 1
        MOV     R4,#8
d814 10
@


4.5
log
@Stack imbalance.
Was popping R3 in the error case when it wasn't pushed.

Version 1.78. Tagged as 'Colours-1_78'
@
text
@a855 1
     [ Module_Version >= 090
a859 1
     ]
a860 2
     [ Module_Version >= 108
        MOVVC   R0,#-1
d864 22
a885 2
        ANDVC   R2,R2,#Flag_FullPalette         ;And store the full colour look up table stuff
        STRVCB  R2,[R12,#CachedFullCLUT]
d887 1
d889 1
@


4.4
log
@  A couple of fixes for top-bit-set pointers.
Detail:
  ColourTrans_WritePalette:
    * sprite area pointer in R0 can now be top-bit set
  ColourTrans_SelectTable/GenerateTable where R0/R1 reference a mode/palette
  combination rather than a sprite and where the source mode is 16/32bpp:
    * destination palette pointer in R3 can be top-bit set
    * giving R3 a value of 0 (default for the mode) now works
Admin:
  Tested briefly.

Version 1.72. Tagged as 'Colours-1_72'
@
text
@d681 1
a681 1
        Pull    "R3-R4,R9-R11,PC",VS            ;Return if the call when BANG!
@


4.3
log
@32-bit compatible.

Version 1.69. Tagged as 'Colours-1_69'
@
text
@d379 2
a380 2
        MOVS    R10,R0                  ;Device to write to is in R10 (DecodeSprite changes it)
        MOVPL   R9,R10                  ;We also need a seperate copy of the block pointer
d382 2
a383 2
        CMP     R0,#0                   ;Is it writing to the screen? (Clears V)
        BLGE    DecodeSprite            ;Returns mode and sprite palette address
@


4.2
log
@Spinner and Ursula branches merged.
Changed to use srccommit.

Version 1.67. Tagged as 'Colours-1_67'
@
text
@d255 1
a255 1
        MOV     R5,R2
d258 1
a258 1
        Pull    "R0-R3,PC",,^
d261 1
a261 1
        MOV     LR,R9                   ;Index into palette table
d273 1
a273 1
        Pull    "R0-R3,PC",EQ,^
d310 2
a311 1
        Pull    "R0-R3,PC",,^
d534 5
a538 4
        BLEQ    my_write_palette        ;If writing to the screen then go via global routine
        ADDNE   LR,R10,R0,LSL#3
        STMNEIA LR,{R2,R3}              ;If writing to a sprite then do so at index *8 as entries are two words

d694 2
a695 1
        Pull    "R4,R9-R11,PC",,^
d703 1
a703 1
        MOV     R2,R5
d709 1
a709 1
        Pull    "R5-R6,R9-R11,PC",,^
d769 1
a769 3
        Pull    "R4,R9,LR"                      ;Restore the registers
        ORRVS   LR,LR,#V_bit                    ;And reflect any errors that may occur
        MOVS    PC,LR
@


4.1
log
@Initial revision
@
text
@d20 1
a20 1
; 
d34 1
a34 1
readpalflag_Allowed        * 2_11   
d36 1
a36 1
  
d55 1
a55 1
;      r3  = size of return buffer       
d71 1
a71 1
                     
d74 2
a75 2
        Push    "R0-R1,R4-R11,LR"                   
        
d95 1
a95 1
        
d103 1
a103 1
        
d105 1
a105 1
19      
d108 1
a108 1
                                      
d118 1
a118 1
        MOV     R1,#VduExt_Log2BPP      
d127 1
a127 1
                                  
d139 2
a140 2
        ORREQ   R11,R11,#palette_BrainDamaged                              
     
d142 2
a143 2
        MOV     LR,#1   
        MOV     R7,LR,LSL R5          
d148 1
a148 1
        TST     R4,#readpalflag_ReturnFlashing                          
d150 1
a150 1
        
d164 1
a164 1
        
d181 1
a181 1
        TST     R11,#palette_DoubleEntries                                            
d196 1
a196 1
        TST     R4,#readpalflag_ReturnFlashing                          
d208 2
a209 2
        TST     R4,#readpalflag_ReturnFlashing                       
        STMNEIA R2!,{R5-R6}                                
d211 1
a211 1
        
d214 1
a214 1
                   
d220 1
a220 1
   
d223 2
a224 2
        Pull    "R0-R1,R4-R11,PC"   
           
d246 1
a246 1
getpalentry     
d251 1
a251 1
                 
d266 1
a266 1
        TST     R11,#palette_DoubleEntries                                            
d269 2
a270 2
        ADDNE   R5,R10,LR,LSL#3    
        LDMNEIA R5,{R5,R6}              ;Otherwise read both entries   
d352 1
a352 1
; expand the palette to see if it can use the tint translation used in 
d359 1
a359 1
        
d363 1
a363 1
        
d368 1
a368 1
        LDR     LR,[WP,#PaletteAt]  
d376 1
a376 1
                                                                     
d388 1
a388 1
        
d394 1
a394 1
        BVS     writepalette_return     
d396 1
a396 1
                                 
d408 2
a409 2
        
        TST     R4,#setpalflag_DontCompact   
d414 1
a414 1
                                                                       
d428 1
a428 1
        BL      getpalentry       
d432 1
a432 1
        Pull    "R0,R1"                 
d445 1
a445 1
                                          
d485 1
a485 1
                                
d490 1
a490 1
                               
d498 1
a498 1
                     
d501 1
a501 1
        BL      fast_write_whole_palette                   
d515 1
a515 1
     
d525 1
a525 1
               
d531 1
a531 1
                    
d558 1
a558 1
                             
d567 2
a568 2
        TEQ     R10,#0    
        BNE     %FT80    
d579 1
a579 1
        SWI     XOS_CallAVector         
d586 1
a586 1
80      ; failed exit          
d589 1
a589 1
90      ; successful exit            
d600 1
a600 1
;                        
d610 1
a610 1
                             
d618 1
a618 1
        SWI     XOS_CallAVector         
d625 1
a625 1
80      ; failed exit             
d632 1
a632 1
                           
d635 1
a635 1
        MOVNE    R9,#PaletteV            
d638 1
a638 1
        SWINE    XOS_CallAVector         
d654 1
a654 1
; 
d663 1
a663 1
         
d690 1
a690 1
      ]      
d766 1
a766 1
        Pull    "R4,R9,LR"                      ;Restore the registers 
d778 1
a778 1
;                 
d784 1
a784 1
; 
d793 1
a793 1
                                        
d819 1
a819 1
;one. 
d844 1
a844 1
     
d851 1
a851 1
          
d855 1
a855 1
     [ Version >= 090
d862 1
a862 1
     [ Version >= 108
d872 1
a872 1
        Pull    "R0-R4,R10-R11,PC"    
d889 1
a889 1
; 
d902 1
a902 1
; sprite and then attempt to fall back if not to the old 'brain damaged' 
d908 1
a908 1
                  
d912 1
a912 1
        
d916 1
a916 1
            
d927 1
a927 1
        
d955 1
a955 1
        ORRNE   R11,R11,#palette_BrainDamaged       
d964 1
a964 1
        ORR     R11,R11,#palette_DoubleEntries 
a972 1
                                                     @


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
