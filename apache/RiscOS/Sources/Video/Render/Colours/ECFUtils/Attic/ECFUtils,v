head	4.2;
access;
symbols
	Colours-1_82:4.1
	Colours-1_81:4.1
	Colours-1_80:4.1
	Colours-1_79:4.1
	Colours-1_78:4.1
	Colours-1_77:4.1
	RO_5_07:4.1
	Colours-1_76:4.1
	Colours-1_75:4.1
	Colours-1_74:4.1
	Colours-1_73:4.1
	Colours-1_72:4.1
	dellis_autobuild_BaseSW:4.1
	Colours-1_71:4.1
	Colours-1_70:4.1
	Colours-1_69:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	Colours-1_68:4.1
	Colours-1_67:4.1
	Ursula_merge:4.1
	nturton_Colours-1_65:4.1
	dcotton_colours_MPTInitialBuild:4.1.7.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2012.10.27.07.45.01;	author rsprowson;	state dead;
branches;
next	4.1;
commitid	h9OXlEVmlIYyQZpw;

4.1
date	96.11.05.09.42.09;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.42.09;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.07.04;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.47.44;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.10.38;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Source for ECFUtils put in the attic
Unused since 1992 and OS_SetColour introduction, is also the last use of 'MakeDate' build tool.

Version 1.83. Tagged as 'Colours-1_83'
@
text
@; > ECFUtils

; ********************
; *** CHANGES LIST ***
; ********************

; 08-Jan-92 DDV 0.01 Created
; 08-Jan-92 DDV 0.02 Handling of colour words improved to extract only required bits
; 04-Jun-92 DDV      Intergrated Tim's implementation of OS_SetColour from the kernel sources
; 04-Jun-92 DDV 0.10 Extended to support text colour setting
;
        GET     hdr:ListOpts
        GET     hdr:Macros
        GET     hdr:System
        GET     hdr:ModHand
        GET     hdr:NewSpace
        GET     hdr:Services
        GET     hdr:Proc

        GET     Version



;------------------------------------------------------------------------------
; Assembly constants
;------------------------------------------------------------------------------

        GBLL    debug
        GBLL    Module

debug   SETL    {TRUE}                          ;Development version
Module  SETL    {TRUE}                          ;Local copy of SetColour60



;------------------------------------------------------------------------------
; Module header
;------------------------------------------------------------------------------

module_base
        & 0                                     ;Not an application
        & init -module_base
        & die -module_base
        & service -module_base

        & title -module_base
        & help -module_base
        & 0                                     ;No *Commands

title   = "ECFUtils",0
help    = "ECF Utils",9,"$VString ($Date)"
      [ debug
        = " Development version"
      ]
        = 0
        ALIGN



;------------------------------------------------------------------------------
; Setup the SWI despatcher so SWI is indirected to me
;------------------------------------------------------------------------------

init    ENTRY   "R0-R1"

        LDR     R0,=SvcTable +4*OS_SetColour    ;Address of entry in despatch table
        LDR     R1,[R0]                         ;Read current owner
        STR     R1,[WP]                         ;Store into my temp workspace
         
        ADR     R1,SWISetColour
        STR     R1,[R0]                         ;Setup a new handler in my module

        EXITS



;------------------------------------------------------------------------------
; Handle releasing the module
;------------------------------------------------------------------------------

die     ENTRY   "R0-R1"

        LDR     R0,=SvcTable +4*OS_SetColour    ;Entry in despatch table for my SWI
        LDR     R1,[R0]                         ;Read then current owner
        ADR     R2,SWISetColour          
        TEQ     R1,R2                           ;Is it me?
        LDREQ   R1,[WP]                         ;If so read the original owner
        STREQ   R1,[R0]                         ;And store back into table

        EXITS                                   ;Then return



;------------------------------------------------------------------------------
; Handle service calls recieved by the module - reclaim handler if a reset
;------------------------------------------------------------------------------

service ROUT
        TEQ     R1,#Service_Reset               ;Is it a reset?
        MOVNES  PC,LR                           ;Nope, so return hope right now
        B       init                            ;Yup, so claim the SWI



;------------------------------------------------------------------------------
;
; OS_SetColour implementation
; ------------
;        
; This SWI will set the foreground or background text or graphics colours.
;
; When setting the graphics colour it is also possible to supply a eight word
; pattern block which can be used for painting with gaint ECF's which have
; been extended so that setting them with this SWI will allow both a foreground
; and a background pattern to be defined.
;
; When setting the text colour it is not possible to define the logical operation
; nor, the pattern table as text must always be painted in solid colours.
;
; in    R0 = logical operation / flags
;               bit 0-3 => logical operation
;               bit 4   => fg/bg control bit
;               bit 5   => colour word/pattern bit
;               bit 6   => set text colour
;               all other bits reserved and should be zero
;
;       R1 = colour word / -> eight words of pattern data
; out   -
;
;------------------------------------------------------------------------------
         
setcol_LogicOpMask      * &00F
setcol_FgBgFlag         * &010
setcol_PatternFlag      * &020
setcol_TextFlag         * &040
       
TEUpdate         *  1 :SHL: 29

        ASSERT  WsPtr > 9

SWISetColour ROUT

        Push    "R0-R9,WsPtr,R14"

        VDWS    WsPtr                           ; Obtain base of the VDU driver workspace
               
        TST     R0, #setcol_TextFlag            ; Setting the text colour?
        BNE     %FT70

        AND     R2, R0, #setcol_LogicOpMask     ; Get the logical operation
        ORR     R2, R2, #&60                    ; Mark as being a special kind of pattern
     
        TST     R0, #setcol_FgBgFlag
        STREQ   R2, [WsPtr, #GPLFMD]            ; Store the relevant logical operation away for fg/bg
        STRNE   R2, [WsPtr, #GPLBMD]
        ADDEQ   R3, WsPtr, #FgPattern
        ADDNE   R3, WsPtr, #BgPattern           ; Setup the pointer to a store for the pattern

        TST     R0, #setcol_PatternFlag         ; Did the caller specify a pattern block?
        BNE     %FT50                           ; Yes so don't try to expand colour value to pattern

        MOV     R2, #1
        LDR     R4, [WsPtr, #Log2BPP]           ; Get the Log2 depth of the mode
        MOV     R4, R2, ASL R4                  ; R4 = bits per pixel
        RSB     R2, R2, R2, LSL R4              ; Get a mask to extract only meaningful bits from word
        AND     R1, R1, R2                      ; Extract bits suitable for this depth of mode
10
        TEQ     R4, #32                         ; Do we need to do any more replication
        ORRNE   R1, R1, R1, LSL R4              ; Yes so or word with itself shifted
        MOVNE   R4, R4, LSL #1                  ; and double amount to shift next time
        BNE     %BT10

        MOV     R2, #8
20
        STR     R1, [R3], #4                    ; now copy word 8 times into block
        SUBS    R2, R2, #1
        BNE     %BT20
        B       %FT60
50
        LDMIA   R1,{R0,R2,R4-R9}
        STMIA   R3,{R0,R2,R4-R9}                ; Copy the pattern into the buffer (assumes word aligned)
60
      [ Module
        ADD     R0,WsPtr,#FgPattern             ;Setup the fg pattern
        ADD     R1,WsPtr,#BgPattern
        ADD     R2,WsPtr,#FgEcfOraEor
        LDR     R3,[WsPtr,#GPLFMD]
        BL      SetCol60

        ADD     R0,WsPtr,#BgPattern             ;Setup the bg pattern
        ADD     R1,WsPtr,#FgPattern
        ADD     R2,WsPtr,#BgEcfOraEor
        LDR     R3,[WsPtr,#GPLBMD]
        BL      SetCol60

        ADD     R0,WsPtr,#BgPattern             ;Setup the bg clearing pattern
        ADD     R1,WsPtr,#FgPattern
        ADD     R2,WsPtr,#BgEcfStore
        MOV     R3,#0
        BL      SetCol60 
      |     
        BL      SetColour                       ; And then setup the internal GCOL tables
      ]

        Pull    "R0-R9,WsPtr,R14"
        ExitSWIHandler
70
        TST     R0,#setcol_FgBgFlag             ; Is it the foreground or background?
        STREQ   R1,[WsPtr,#TForeCol]
        STRNE   R1,[WsPtr,#TBackCol]

        LDR     R0,[WsPtr,#CursorFlags]         ; Flag so that text colours are updated as required
        ORR     R0,R0,#TEUpdate
        STR     R0,[WsPtr,#CursorFlags]           

        Pull    "R0-R9,WsPtr,R14"
        ExitSWIHandler

      

      [ Module

; *****************************************************************************
;
;       SetCol60 - Build up an ecf, ORed and EORed appropriate to GCOL action
;
;       Internal to SetColour
;
; in:   R0 -> ecf colour (FgEcf/BgEcf)
;       R1 -> transparent colour (BgEcf/FgEcf)
;       R2 -> destination FgEcfOraEor/BgEcfOraEor/BgEcfStore
;       R3 = gcol action number (may indicate ecf)
;
; uses: R4 = index into ecf (7..0)
;       R5 = ecf colour word
;       R6 = transparency mask, set to &FFFFFFFF for NO transparency
;       R7 -> zgoo..zgee for gcol action
;       R8 = mask for pixel under examination
;       R9 = shift factor to move mask to next pixel (BytesPerChar)
;       R10, R11 temporary
;

TBscrmasks      *       2_10010111000011111110110001010011

SetCol60 ROUT
        MOV     R4, #7                          ; 7..0 words to process
        AND     R3, R3, #&F                     ; extract action bits
        AND     R11, R3, #7                     ; 0-7 Store etc
                                                ; 8-15 ditto with transparency
        MOV     R11, R11, LSL #2                ; 4 bits for each
        LDR     R7, =TBscrmasks
        MOV     R7, R7, ROR R11                 ; relevant bits are in top 4
        AND     R7, R7, #&F0000000              ; isolate these bits (N,Z,C,V)
SetCol70
        LDR     R5, [R0, R4, LSL #2]            ; get ecf word
        TST     R3, #8                          ; if action < 8
        MOVEQ   R6, #&FFFFFFFF
        BEQ     SetCol90                        ; then not transparent
                                                ; else build transparency mask
        LDR     R8, [WsPtr, #RAMMaskTb]         ; fetch mask for leftmost pixel
        LDR     R9, [WsPtr, #BytesPerChar]      ; shift factor for next pixel
        LDR     R6, [R1, R4, LSL #2]            ; get 'transparent' colour
        EOR     R6, R6, R5
SetCol80
        TST     R6, R8                          ; if pixels the same,
                                                ; then it's transparent
        ORRNE   R6, R6, R8                      ; else set mask to plot it
        MOVS    R8, R8, LSL R9
        BNE     SetCol80

SetCol90
        TEQP    R7, #SVC_mode                   ; put bits into N, Z, C, V
                                                ;              OO,EO,OE,EE

        MOVCC   R10, R5                         ; if ORing with &00000000
        MOVCS   R10, #&FFFFFFFF                 ; if ORing with &FFFFFFFF
        MVNVS   R10, R10                        ; if EORing with &FFFFFFFF

;       MOVPL   R5, R5                          ; if ORing with &00000000
        MOVMI   R5, #&FFFFFFFF                  ; if ORing with &FFFFFFFF
        MVNEQ   R5, R5                          ; if EORing with &FFFFFFFF

; now R5 = OR mask, R10 = EOR mask

        AND     R5, R5, R6                      ; then clear 'transparent'
        AND     R10, R10, R6                    ; pixels

        LDR     R11, [WsPtr, #ECFShift]
        MOV     R5, R5, ROR R11                 ; rotate OR and EOR masks
        MOV     R10, R10, ROR R11               ; to correct for ECF X origin

        LDR     R11, [WsPtr, #ECFYOffset]
        ADD     R11, R11, R4                    ; add on ECF Y offset
        AND     R11, R11, #7                    ; and wrap

        ADD     R11, R2, R11, LSL #3
        STMIA   R11, {R5, R10}                  ; write to (Fg/Bg)EcfOraEor

        SUBS    R4, R4, #1
        BCS     SetCol70

        MOV     PC, R14
              
      ]

;------------------------------------------------------------------------------


        END



@


4.1
log
@Initial revision
@
text
@@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
