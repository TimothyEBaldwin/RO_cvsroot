head	1.2;
access;
symbols
	Circles-0_05:1.2
	Circles-0_04:1.1.1.2
	Circles-0_03:1.1.1.2
	Circles-0_01:1.1.1.2
	Circles-0_02:1.1.1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.2
	Ursula_RiscPC:1.1.1.2.0.2
	rthornb_UrsulaBuild-19Aug1998:1.1.1.2
	UrsulaBuild_FinalSoftload:1.1.1.2
	rthornb_UrsulaBuild-12Aug1998:1.1.1.2
	aglover_UrsulaBuild-05Aug1998:1.1.1.2
	rthornb_UrsulaBuild-29Jul1998:1.1.1.2
	rthornb_UrsulaBuild-22Jul1998:1.1.1.2
	rthornb_UrsulaBuild-15Jul1998:1.1.1.2
	rthornb_UrsulaBuild-07Jul1998:1.1.1.2
	rthornb_UrsulaBuild-17Jun1998:1.1.1.2
	rleggett_Circles-0_01:1.1.1.2
	rthornb_UrsulaBuild-03Jun1998:1.1.1.1
	rthornb_UrsulaBuild-27May1998:1.1.1.1
	rthornb_UrsulaBuild-21May1998:1.1.1.1
	rthornb_UrsulaBuild_01May1998:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.06.28.22.28.14;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	GatdP2NHi7Zpqfry;

1.1
date	98.04.14.11.35.11;	author rleggett;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.04.14.11.35.11;	author rleggett;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.06.17.09.47.23;	author rleggett;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Numerous screensaver/setup improvements
Slowed down the circle drawing a bit so there's a few seconds of animation to watch before blackout.
Purpose (which appears in the info box in the screen setup plugin) no longer says "Demo screensaver".
Changed to using common functions in "saver.c" rather than local ones.
There's no setup app for this saver as there's nothing to configure.
Other admin changes:
* Makefiles recreated from fragments
* Version number now auto inserted from VersionNum
* Messages and common code "saver.c" sync'd with other screensaver/setup apps
* Removed references to Filer Configure from RMEnsure error messages
* Fix null pointer dereference when -openat switch has too few arguments
* Symbolic names used instead of magic numbers where possible
Tested on RISC OS 4.02.


Version 0.05. Tagged as 'Circles-0_05'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*---------------------------------------------------------------------------*/
/* File:    c.circles                                                        */
/* Purpose: Demonstrate how to write a screensaver.                          */
/* Author:  Richard Leggett                                                  */
/* History: 14-Nov-97: RML: Created.                                         */
/*          19-Mar-98: RML: Minor changes.                                   */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "wimp.h"
#include "swis.h"
#include "wimplib.h"
#include "toolbox.h"
#include "event.h"
#include "window.h"
#include "saver.h"

static MessagesFD messages_desc;
static IdBlock    idb;
static int        screenw;
static int        screenh;
static int        xeig;
static int        yeig;
static int        saver_initialised = 0;
static int        lasttime;


/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

void program_exit(void)
{
    saver_exit();
    exit(0);
}


/*---------------------------------------------------------------------------*
 * null_event                                                                *
 *                                                                           *
 * Null event handler - we do all our animation etc. here.                   *
 *---------------------------------------------------------------------------*/

int null_event(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    int x, y, r;
    int timenow;

    if (!saver_initialised)
    {
        /* We no longer need high priority poll word checking */
        saver_error_trap(event_set_mask(Wimp_Poll_PollWord), 0);
        saver_initialised = 1;
    }

    _swix(OS_ReadMonotonicTime, _OUT(0), &timenow);
    if ((timenow - lasttime) > 10)
    {
        /* One more splatter */
        lasttime = timenow;
        x = saver_rnd(screenw);
        y = saver_rnd(screenh);
        r = saver_rnd(200) + 50;
        
        _swix(OS_SetColour, _INR(0,1), 0, 0);
        _swix(OS_Plot, _INR(0,2), OSPlot_Move,       x,     y);
        _swix(OS_Plot, _INR(0,2), OSPlot_CircleFill, x + r, y);
    }    

    return 1;
}


/*---------------------------------------------------------------------------*
 * gain_pointer                                                              *
 *                                                                           *
 * Pointer has entered my window - turn it off!                              *
 *---------------------------------------------------------------------------*/

int gain_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    saver_hide_pointer();

    return 1;
}


/*---------------------------------------------------------------------------*
 * lose_pointer                                                              *
 *                                                                           *
 * Pointer has left my window - switch it back on again!                     *
 *---------------------------------------------------------------------------*/

int lose_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    saver_show_pointer();

    return 1;
}


/*---------------------------------------------------------------------------*
 * redraw                                                                    *
 *                                                                           *
 * Handle redraw events - do nothing!                                        *
 *---------------------------------------------------------------------------*/

int redraw(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    WimpRedrawWindowBlock block;
    int                   more;
    
    wimp_update_window(&block, &more);
    while (more)
    {
        wimp_get_rectangle(&block, &more);
    }
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * pollword                                                                  *
 *                                                                           *
 * Handle pollword non-zero events                                           *
 *---------------------------------------------------------------------------*/

int pollword(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/
 
int message_quit(WimpMessage *event, void *handler)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *                                                                           *
 * Initialise the toolbox, work out the screensize, open the window.         *
 *                                                                           *
 * Globals: screenw, screenh                                                 *
 *---------------------------------------------------------------------------*/

static int main_initialise(void)
{
    int task_handle;
    int main_window;

    /* Initialise toolbox */
    saver_error_trap(toolbox_initialise(0, 310, 0, 0, "<BlankTask$Dir>", &messages_desc, &idb,
                                  0, &task_handle, 0), 1);
    saver_error_trap(event_initialise(&idb), 0);
    saver_error_trap(event_set_mask(Wimp_Poll_PollWord +
                                    Wimp_Poll_PollWordHighPriority), 0);    

    /* Register event handlers */
    saver_error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_ENull, null_event, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_ERedrawWindow, redraw, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPollWordNonZero, pollword, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPointerEnteringWindow, gain_pointer, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPointerLeavingWindow, lose_pointer, NULL), 0);

    /* Open the covering window */
    saver_read_screensize(&screenw, &screenh, &xeig, &yeig);
    saver_error_trap(toolbox_create_object(0, "Window", &main_window), 1);
    saver_open_covering_window(main_window);

    /* Note the time for delay */
    _swix(OS_ReadMonotonicTime, _OUT(0), &lasttime);

    return 1;
}


/*---------------------------------------------------------------------------*
 * main                                                                      *
 *                                                                           *
 * Main polling loop.                                                        *
 *---------------------------------------------------------------------------*/

int main(int argc, char **argv)
{
    WimpPollBlock  wpb;
    int            event_code;
    int           *pollword = NULL;

    if (argc>1) pollword = (int*) atoi(argv[1]);
    if (!pollword) program_exit();
    if (!main_initialise()) program_exit();

    while (TRUE)
    {
        saver_error_trap(event_poll(&event_code, &wpb, pollword), 0);
    }

    return 0;
}
@


1.1
log
@Initial revision
@
text
@d16 2
a17 2
/* File:    c.main                                                           */
/* Purpose: Very simple screen saver.                                        */
d28 1
a29 1
#include "wimplib.h"
d35 1
d41 2
d44 1
d55 1
a55 7
    /* Turn on pointer */
    _swix(OS_Byte, _INR(0,1), 106, 1);

    /* Unset ScrSaver$Running */
    _swix(OS_SetVarVal, _INR(0,4), "ScrSaver$Running", 0, -1, 0, 0);
    
    /* Exit */
a60 50
 * error_trap                                                                *
 *                                                                           *
 * Wrap around a function to report an error if one occurred eg.:            *
 *  error_trap(event_initialise(&idb), 0);                                   *
 *                                                                           *
 * In: err - a kernel_oserror block                                          *
 *     type - 0 means non-fatal, otherwise program will exit after reporting *
 *---------------------------------------------------------------------------*/

void error_trap(_kernel_oserror *err, int err_type)
{
    /* Report the appropriate error, has one occured */
    if (err != NULL)
    {
        wimp_report_error(err, 0, "Screen Blanker", 0, 0, 0);
  
        /* Now, if it was a fatal error (type != 0), exit at once */
        if (err_type != 0) exit(0);
    }
}


/*---------------------------------------------------------------------------*
 * rnd                                                                       *
 *                                                                           *
 * Generate a random number between 1 and n.                                 *
 *---------------------------------------------------------------------------*/

int rnd(int n)
{
    return (int) ( ((float)rand()/(float)RAND_MAX) *n)+1;
}


/*---------------------------------------------------------------------------*
 * set_random_seed                                                           *
 *                                                                           *
 * Reset the random number seed to a value dependent on the monotonic timer. *
 *---------------------------------------------------------------------------*/

void set_random_seed(void)
{
    int time;
    
    _swix(OS_ReadMonotonicTime, _OUT(0), &time);
    srand(time);
}


/*---------------------------------------------------------------------------*
d68 2
a69 3
    int x;
    int y;
    int r;
d74 1
a74 1
        error_trap(event_set_mask(Wimp_Poll_PollWord), 0);
d78 13
a90 7
    x = rnd(screenw);
    y = rnd(screenh);
    r = rnd(300) + 100;
    
    _swix(OS_SetColour, _INR(0,1), 0, 0);
    _swix(OS_Plot, _INR(0,2), 69, x, y);
    _swix(OS_Plot, _INR(0,2), 157, x+r, y);    
d104 1
a104 1
    _swix(OS_Byte, _INR(0,1), 106, 0);
d118 1
a118 1
    _swix(OS_Byte, _INR(0,1), 106, 1);
d183 2
a184 10
    WimpOpenWindowBlock win;
    BBox                extent;
    int                 show[2];
    int                 xeig;
    int                 yeig;
    int                 xpixels;
    int                 ypixels;
    int                 task_handle;
    int                 window_toolbox_id;
    int                 window_wimp_handle;
d186 2
a187 2
    /* Initialise and register event handlers */
    error_trap(toolbox_initialise(0, 310, 0, 0, "<BlankTask$Dir>", &messages_desc, &idb,
d189 11
a199 29
    error_trap(event_initialise(&idb), 1);
    error_trap(event_set_mask(Wimp_Poll_PollWord +
                              Wimp_Poll_PollWordHighPriority), 0);

    error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 1);
    error_trap(event_register_wimp_handler(-1, Wimp_ENull, null_event, NULL), 1);
    error_trap(event_register_wimp_handler(-1, Wimp_ERedrawWindow, redraw, NULL), 1);
    error_trap(event_register_wimp_handler(-1, Wimp_EPollWordNonZero, pollword, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_EPointerEnteringWindow, gain_pointer, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_EPointerLeavingWindow, lose_pointer, NULL), 0);

    /* Find screen size */
    error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &xeig), 1);
    error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &yeig), 1);
    error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 11, &xpixels), 1);
    error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 12, &ypixels), 1);
    screenw = xpixels<<xeig;
    screenh = ypixels<<yeig;

    /* Set the extent of the 'covering' window. */
    extent.xmin = 0;
    extent.xmax = screenw;
    extent.ymin = 0;
    extent.ymax = screenh;
    show[0] = 0;
    show[1] = screenh;
    error_trap(toolbox_create_object(0, "Window", &window_toolbox_id), 1);
    error_trap(window_set_extent(0, window_toolbox_id, &extent), 1);
    error_trap(window_get_wimp_handle(0, window_toolbox_id, &window_wimp_handle), 1);
d202 7
a208 10
    win.window_handle=window_wimp_handle;
    win.visible_area.xmin = 0;
    win.visible_area.xmax = screenw;
    win.visible_area.ymin = 0;
    win.visible_area.ymax = screenh;
    win.xscroll = 0;
    win.yscroll = 0;
    win.behind= - 1;
    error_trap(wimp_open_window(&win), 1);
    
d215 2
d223 1
a223 1
    int           *pollword = 0;
d231 1
a231 1
        error_trap(event_poll(&event_code, &wpb, pollword), 0);
@


1.1.1.1
log
@Initial import of Circles screensaver.
@
text
@@


1.1.1.2
log
@Application name used for error reporting was wrong.
@
text
@d16 2
a17 2
/* File:    c.circles                                                        */
/* Purpose: Demonstrate how to write a screensaver.                          */
a34 4
#include "saver.h"

#define OSPlot_Move       4
#define OSPlot_CircleFill 157
d52 1
a52 1
    _kernel_osbyte(106, 1, 0);
d77 1
a77 1
        wimp_report_error(err, 0, "Screensaver", 0, 0, 0);
d136 2
a137 2
    _swix(OS_Plot, _INR(0,2), OSPlot_Move,       x,     y);
    _swix(OS_Plot, _INR(0,2), OSPlot_CircleFill, x + r, y);    
d151 1
a151 1
    _kernel_osbyte(106, 0, 0);
d165 2
a166 2
    _kernel_osbyte(106, 1, 0);
 
@
