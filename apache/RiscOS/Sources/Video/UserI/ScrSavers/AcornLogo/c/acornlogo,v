head	1.2;
access;
symbols
	AcornLogo-0_04:1.2
	AcornLogo-0_03:1.1.1.2
	AcornLogo-0_01:1.1.1.2
	AcornLogo-0_02:1.1.1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.2
	Ursula_RiscPC:1.1.1.2.0.2
	rthornb_UrsulaBuild-19Aug1998:1.1.1.2
	UrsulaBuild_FinalSoftload:1.1.1.2
	rthornb_UrsulaBuild-12Aug1998:1.1.1.2
	aglover_UrsulaBuild-05Aug1998:1.1.1.2
	rthornb_UrsulaBuild-29Jul1998:1.1.1.2
	rthornb_UrsulaBuild-22Jul1998:1.1.1.2
	rthornb_UrsulaBuild-15Jul1998:1.1.1.2
	rleggett_AcornLogo-0_02:1.1.1.2
	rthornb_UrsulaBuild-07Jul1998:1.1.1.2
	rthornb_UrsulaBuild-17Jun1998:1.1.1.2
	rleggett_AcornLogo-0_01:1.1.1.1
	rthornb_UrsulaBuild-03Jun1998:1.1.1.1
	rthornb_UrsulaBuild-27May1998:1.1.1.1
	rthornb_UrsulaBuild-21May1998:1.1.1.1
	rthornb_UrsulaBuild_01May1998:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.06.28.22.23.09;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	pgKvFZWskhDEofry;

1.1
date	98.04.14.11.33.14;	author rleggett;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.04.14.11.33.14;	author rleggett;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.06.10.10.12.42;	author rleggett;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Numerous screensaver/setup improvements
Notably the setup application allowed the setting of the aniation speed but that didn't affect the animation speed at all. This was because the corresponding code in the screensaver was disabled due to being totally wrong.
Now, the speed setting is interpreted, and for the double banked case the previous frame is blacked out and for the single bank case the area moved is blacked out (to eliminate flicker).
Squash the animation frames so they don't occupy 765k of disc space, new unsquash code added (from Pogo saver).
Set 'Cancel' as the escape action button so the setup window closes when Escape is pressed.
Other admin changes:
* Makefiles recreated from fragments
* Version number now auto inserted from VersionNum
* Messages and common code "saver.c" sync'd with other screensaver/setup apps
* Removed references to Filer Configure from RMEnsure error messages
* Removed never used info from setup app messages, ensuring they're never out of date by deleting them
* Removed non internationalised "Screensave setup" from error box titles
* Load settings from Choices: write settings through <Choices$Write>
* Fix null pointer dereference when -openat switch has too few arguments
* Symbolic names used instead of magic numbers where possible
Tested on RISC OS 4.02.

Version 0.04. Tagged as 'AcornLogo-0_04'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*---------------------------------------------------------------------------*/
/* File:    c.acornlogo                                                      */
/* Purpose: Simple screen saver.                                             */
/* Author:  Richard Leggett                                                  */
/* History: 21-Nov-97: RML: Created.                                         */
/*          23-Mar-98: RML: Minor modifications.                             */
/*          03-Jun-98: RML: Removed reference to PhotoQV in error reporting. */
/*          05-Jun-98: RML: Screen banking added.                            */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "Global/Sprite.h"
#include "Global/VduExt.h"

#include "wimp.h"
#include "wimplib.h"
#include "swis.h"
#include "toolbox.h"
#include "event.h"
#include "window.h"

#include "main.h"
#include "squash.h"
#include "saver.h"

#define SettingsRO           "Choices:ScrSavers.AcornLogo"
#define FirstLoopingFrame    34
#define LastLoopingFrame     34
#define DelayBetweenFrames   2
#define DelayBetweenMoves    1
#define JustStarting         -2
#define DefaultSpeed         1


static char      *ctrans_table = 0;
static char       spritename[SpriteNameSize + 1];
static IdBlock    idb;
static MessagesFD messages_desc;
static int        screenw, screenh;
static int        screenbanks;
static int        xeig, yeig;
static int        spritew, spriteh;
static int        logo_x, logo_y, old_x, old_y;
static int        x_step;
static int        y_step;
static int        last_frame;
static int        last_move;
int              *sprites;

/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

void program_exit(void)
{
    saver_exit();
    exit(0);
}


/*---------------------------------------------------------------------------*
 * read_settings                                                             *
 *                                                                           *
 * Read the current settings file.                                           *
 *---------------------------------------------------------------------------*/

void read_settings(void)
{
    FILE *fp;
    char  string[256];
    int   speed = DefaultSpeed;

    fp=fopen(SettingsRO, "r");
    if (fp)
    {
        fgets(string, 256, fp);
        sscanf(string, "Speed %d", &speed);
        fclose(fp);
    }

    if (speed<0) speed = 1;
    if (speed>10) speed = 10;
    x_step = speed<<xeig;
    y_step = speed<<yeig;
}        



/*---------------------------------------------------------------------------*
 * plot_sprite                                                               *
 *                                                                           *
 * Er, plot the sprite.                                                      *
 *---------------------------------------------------------------------------*/

void plot_sprite(void)
{
    _swix(OS_SpriteOp, _INR(0,7), 256 + SpriteReason_PutSpriteScaled,
                                  sprites,
                                  spritename,
                                  logo_x,
                                  logo_y,
                                  32,
                                  0,
                                  ctrans_table);
}


/*---------------------------------------------------------------------------*
 * initialise_animation                                                      *
 *                                                                           *
 * Set up the animation.                                                     *
 *---------------------------------------------------------------------------*/

static _kernel_oserror *initialise_animation(void)
{
    _kernel_oserror *e;
    int              size = 0;
    
    /* Load the sprites and find the size of a frame */
    e = squash_decompress_file("<BlankTask$Dir>.Frames");
    if (e == NULL)
    {
        e = _swix(OS_SpriteOp, _INR(0,2)|_OUTR(3,4), 256 + SpriteReason_ReadSpriteSize,
                               sprites, "logo0", &spritew, &spriteh);
        spritew = spritew<<xeig;
        spriteh = spriteh<<yeig;
    }
    if (e != NULL) return e;

    /* Generate a colourtrans table */
    e = _swix(ColourTrans_GenerateTable, _INR(0,5)|_OUT(4), sprites, "logo0", -1, -1, 0, 16, &size);
    if (e != NULL) return e;
    ctrans_table = malloc(size);
    if (ctrans_table == NULL)
    {
        return _swix(MessageTrans_ErrorLookup, _INR(0,2), "    NoMem", 0, 0);
    }
    e = _swix(ColourTrans_GenerateTable, _INR(0,5), sprites, "logo0", -1, -1, ctrans_table, 16);
    if (e != NULL)
    {
        free(ctrans_table);
        return e;
    }

    /* Set initial position and direction */
    strcpy(spritename, "logo0");
    _swix(OS_ReadMonotonicTime, _OUT(0), &last_frame); 
    last_move = last_frame;
    logo_x = old_x = saver_rnd(screenw-spritew);
    logo_y = old_y = saver_rnd(screenh-spriteh);
    
    screenbanks = saver_decide_double_buffering();

    return NULL;
}
    

/*---------------------------------------------------------------------------*
 * null_event                                                                *
 *                                                                           *
 * Null event handler - we do all our animation etc. here.                   *
 *---------------------------------------------------------------------------*/

int null_event(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    static int current_frame = JustStarting;
    int        time;
    int        plot_it = 0;

    /* If we're just starting, then remove the high priority on pollword */
    if (current_frame == JustStarting)
    {
        saver_error_trap(event_set_mask(Wimp_Poll_PollWord), 0);    
        plot_it = 1;
    }
 
    /* Change the frame? */
    _swix(OS_ReadMonotonicTime, _OUT(0), &time);
    if ((time-last_frame) >= DelayBetweenFrames)
    {
        last_frame = time;
        current_frame++;
        if (current_frame>LastLoopingFrame) current_frame = FirstLoopingFrame;
        plot_it = 1;
        sprintf(spritename, "logo%d", current_frame);
    }

    /* Move the animation? */
    if (current_frame >= FirstLoopingFrame)
    {
        if ((time-last_move) >= DelayBetweenMoves)
        {
            old_x = logo_x;
            old_y = logo_y;

            last_move = time;
            logo_x += x_step;
            logo_y += y_step;

            if ( (logo_x > (screenw - spritew))
              || (logo_x < 0) )
            {
                x_step = -x_step;
                logo_x += x_step;
            }
            
            if ( (logo_y > (screenh - spriteh))
              || (logo_y < 0) )
            {
                y_step = -y_step;
                logo_y += y_step;
            }
            
            plot_it = 1;
        }
    }

    if (plot_it)
    {
       /* Switch banks and draw the new location */
       saver_write_bank();
       plot_sprite();
       saver_read_bank();

       /* For the single bank case, need to add a black border (of width = stepsize)
        * to cover up the previous location and avoid flicker.
        * For the dual bank case, just plot over the sprite.
        */
       _swix(ColourTrans_SetGCOL, _IN(0)|_IN(3)|_IN(4), 0, 0, 0);
       saver_write_bank();
       if (screenbanks > 1)
       {
           _swix(OS_Plot, _INR(0, 2), OSPlot_Move, old_x, old_y);
           _swix(OS_Plot, _INR(0, 2), OSPlot_RectangleFill, spritew, spriteh);
       }
       else
       {
           /* Below */
           _swix(OS_Plot, _INR(0, 2), OSPlot_Move, old_x, old_y);
           _swix(OS_Plot, _INR(0, 2), OSPlot_RectangleFill, spritew, -y_step);
           /* Above */
           _swix(OS_Plot, _INR(0, 2), OSPlot_Move, old_x, old_y + spriteh);
           _swix(OS_Plot, _INR(0, 2), OSPlot_RectangleFill, spritew, y_step);
           /* Left + corners */
           _swix(OS_Plot, _INR(0, 2), OSPlot_Move, old_x - x_step, old_y - y_step);
           _swix(OS_Plot, _INR(0, 2), OSPlot_RectangleFill, x_step, spriteh + (2 * y_step));
           /* Right + corners */
           _swix(OS_Plot, _INR(0, 2), OSPlot_Move, old_x + spritew, old_y - y_step);
           _swix(OS_Plot, _INR(0, 2), OSPlot_RectangleFill, x_step, spriteh + (2 * y_step));
       }
    }
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * gain_pointer                                                              *
 *                                                                           *
 * Pointer has entered my window - turn it off!                              *
 *---------------------------------------------------------------------------*/

int gain_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    saver_hide_pointer();

    return 1;
}


/*---------------------------------------------------------------------------*
 * lose_pointer                                                              *
 *                                                                           *
 * Pointer has left my window - switch it back on again!                     *
 *---------------------------------------------------------------------------*/

int lose_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    saver_show_pointer();

    return 1;
}


/*---------------------------------------------------------------------------*
 * redraw                                                                    *
 *                                                                           *
 * Handle redraw events - do nothing!                                        *
 *---------------------------------------------------------------------------*/

int redraw(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    WimpRedrawWindowBlock block;
    int                   more;
    
    wimp_redraw_window(&block, &more);
    while (more)
    {
        wimp_get_rectangle(&block, &more);
    }
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * pollword                                                                  *
 *                                                                           *
 * Handle pollword non-zero events                                           *
 *---------------------------------------------------------------------------*/

int pollword(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/
 
int message_quit(WimpMessage *event, void *handler)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *---------------------------------------------------------------------------*/

static void main_initialise(void)
{
    int main_window;
    int task_handle;

    /* Initialise toolbox */
    saver_error_trap(toolbox_initialise(0, 310, 0, 0, "<BlankTask$Dir>",
                                  &messages_desc, &idb, 0, &task_handle, 0), 1);
    saver_error_trap(event_initialise(&idb), 1);
    saver_error_trap(event_set_mask(Wimp_Poll_PollWord +
                              Wimp_Poll_PollWordHighPriority), 1);    

    /* Register event handlers */
    saver_error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 1);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_ENull, null_event, NULL), 1);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_ERedrawWindow, redraw, NULL), 1);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPollWordNonZero, pollword, NULL), 1);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPointerEnteringWindow, gain_pointer, NULL), 1);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPointerLeavingWindow, lose_pointer, NULL), 1);

    /* Open covering window */
    saver_read_screensize(&screenw, &screenh, &xeig, &yeig);
    saver_error_trap(toolbox_create_object(0, "Window", &main_window), 1);
    saver_open_covering_window(main_window);
    
    /* More initialisation */
    saver_set_rnd_seed();
    read_settings();
    saver_error_trap(initialise_animation(), 1);
}


/*---------------------------------------------------------------------------*
 * main                                                                      *
 *---------------------------------------------------------------------------*/

int main(int argc, char **argv)
{
    WimpPollBlock  wpb;
    int            event_code;
    int           *pollword = NULL;

    if (argc>1) pollword = (int*) atoi(argv[1]);
    if (!pollword) program_exit();

    main_initialise();
    
    while (TRUE)
    {
        saver_error_trap(event_poll(&event_code, &wpb, pollword), 0);
    }
    
    return 0;
}
@


1.1
log
@Initial revision
@
text
@d21 2
d30 4
a36 1
#include "wimplib.h"
d41 5
a45 1
#define SpriteFile           "<BlankTask$Dir>.Frames"
d50 3
a52 4
#define SpriteInitialiseArea 9
#define SpriteLoadFile       10
#define SpriteReadInfo       40
#define SpritePutScaled      52
a53 1
static int       *spritearea = 0;
d55 1
a55 1
static char       spritename[16];
d58 7
a64 4
static int        screenw;
static int        screenh;
static int        animation_initialised = 0;
static int        current_frame;
d67 1
a67 7
static int        spritew;
static int        spriteh;
static int        px;
static int        py;
static int        ax;
static int        ay;

d77 1
a77 9
    /* Turn on pointer */
    _swix(OS_Byte, _INR(0,1), 106, 1);

    /* Unset ScrSaver$Running */
    _swix(OS_SetVarVal, _INR(0,4), "ScrSaver$Running", 0, -1, 0, 0);
    
    /* Exit */
    if (spritearea) free(spritearea);
    if (ctrans_table) free(ctrans_table);
d83 1
a83 4
 * error_trap                                                                *
 *                                                                           *
 * Wrap around a function to report an error if one occurred eg.:            *
 *  error_trap(event_initialise(&idb), 0);                                   *
d85 1
a85 2
 * In: err - a kernel_oserror block                                          *
 *     type - 0 means non-fatal, otherwise program will exit after reporting *
d88 1
a88 1
void error_trap(_kernel_oserror *err, int err_type)
d90 6
a95 2
    /* Report the appropriate error, has one occured */
    if (err != NULL)
d97 4
a100 7
        wimp_report_error(err, 0, "Screen Blanker", 0, 0, 0);
  
        /* Now, if it was a fatal error (type != 0), exit at once */
        if (err_type != 0) exit(0);
    }    
}

d102 5
a106 5
/*---------------------------------------------------------------------------*
 * rnd                                                                       *
 *                                                                           *
 * Generate a random number between 1 and n.                                 *
 *---------------------------------------------------------------------------*/
a107 4
int rnd(int n)
{
    return (int) ( ((float)rand()/(float)RAND_MAX) *n)+1;
}
d111 1
a111 1
 * set_random_seed                                                           *
d113 1
a113 14
 * Reset the random number seed to a value dependent on the monotonic timer. *
 *---------------------------------------------------------------------------*/

void set_random_seed(void)
{
    int time;
    
    _swix(OS_ReadMonotonicTime, _OUT(0), &time);
    srand(time);
}


/*---------------------------------------------------------------------------*
 * plot_sprite                                                               *
d118 8
a125 3
    _swix(OS_SpriteOp, _INR(0,7),
                       256+SpritePutScaled, spritearea, spritename,
                       px, py, 32, 0, ctrans_table);
d131 2
d135 1
a135 1
int initialise_animation()
a137 1
    int              type = 0;
d140 11
a150 16
    /* Find size of sprite file and get memory to store it */
    e = _swix(OS_File, _INR(0,1)|_OUT(0)|_OUT(4), 17, SpriteFile, &type, &size);
    if ((e) || (size==0) || (type==0)) return 0;
    spritearea = malloc(size+16);
    if (!spritearea) return 0;
    spritearea[0] = size + 16;
    spritearea[2] = 16;

    /* Initialise sprite area, read sprites into it and find their size */
    e=_swix(OS_SpriteOp, _INR(0,1), 256+SpriteInitialiseArea, spritearea);
    if (!e) e = _swix(OS_SpriteOp, _INR(0,2), 256+SpriteLoadFile, spritearea, SpriteFile);
    if (!e) e = _swix(OS_SpriteOp, _INR(0,2)|_OUTR(3,4), 256+SpriteReadInfo, spritearea, "logo0", &spritew, &spriteh);
    if (e) return 0;
    spritew = spritew * 2;
    spriteh = spriteh * 2;
    
d152 2
a153 2
    e = _swix(ColourTrans_GenerateTable, _INR(0,5)|_OUT(4), spritearea, "logo0", -1, -1, 0, 16, &size);
    if (e) return 0;				      
d155 10
a164 3
    if (!ctrans_table) return 0;				       
    e = _swix(ColourTrans_GenerateTable, _INR(0,5), spritearea, "logo0", -1, -1, ctrans_table, 16);
    if (e) return 0;
d167 2
a168 5
    memset(spritename, 0, 16);    
    sprintf(spritename, "logo0");
    set_random_seed();
    current_frame = -2;
    last_frame = _swi(OS_ReadMonotonicTime, _RETURN(0));
d170 4
a173 5
    px = rnd(screenw-spritew);
    py = rnd(screenh-spriteh);
    ax = ay = rnd(2)*2;
    if (rnd(2)==1) ax = -ax;
    if (rnd(2)==1) ay = -ay;
d175 1
a175 1
    return 1;
d187 3
a189 5
    int time;
    int plot_it = 0;

    /* If we've failed to start up, then at least we get a blank screen */
    if (!animation_initialised) return 1;
d192 1
a192 1
    if (current_frame==-2)
d194 2
a195 2
        error_trap(event_set_mask(Wimp_Poll_PollWord), 0);    
        plot_it=1;
d199 1
a199 1
    time = _swi(OS_ReadMonotonicTime, _RETURN(0));
d214 3
d218 17
a234 6
            px += ax;
            py += ay;
            if (px>=(screenw-spritew)) ax =- ax;
            if (py>=(screenh-spriteh)) ay =- ay;
            if (px<=0) ax =- ax;
            if (py<=0) ay =- ay;
d239 34
a272 1
    if (plot_it) plot_sprite();
d286 1
a286 1
    _swix(OS_Byte, _INR(0,1), 106, 0);
d300 1
a300 1
    _swix(OS_Byte, _INR(0,1), 106, 1);
d359 1
a359 1
static int main_initialise(void)
d361 2
a362 10
    WimpOpenWindowBlock win;
    BBox                extent;
    int                 main_window;
    int                 show[2];
    int                 xeig;
    int                 yeig;
    int                 xpixels;
    int                 ypixels;
    int                 task_handle;
    int                 wimp_handle;
d364 2
a365 2
    /* Initialise and register event handlers */
    error_trap(toolbox_initialise(0, 310, 0, 0, "<BlankTask$Dir>",
d367 21
a387 44
    error_trap(event_initialise(&idb), 0);
    error_trap(event_set_mask(Wimp_Poll_PollWord +
                              Wimp_Poll_PollWordHighPriority), 0);    

    error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_ENull, null_event, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_ERedrawWindow, redraw, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_EPollWordNonZero, pollword, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_EPointerEnteringWindow, gain_pointer, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_EPointerLeavingWindow, lose_pointer, NULL), 0);

    /* Find screen size */
    error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &xeig), 0);
    error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &yeig), 0);
    error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 11, &xpixels), 0);
    error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 12, &ypixels), 0);
    screenw = xpixels<<xeig;
    screenh = ypixels<<yeig;

    /* Set the extent of the 'covering' window. */
    extent.xmin = 0;
    extent.xmax = screenw;
    extent.ymin = 0;
    extent.ymax = screenh;
    show[0] = 0;
    show[1] = screenh;
    error_trap(toolbox_create_object(0, "Window", &main_window), 1);
    error_trap(window_set_extent(0, main_window, &extent), 0);
    error_trap(window_get_wimp_handle(0, main_window, &wimp_handle), 0);

    /* Open the covering window */
    win.window_handle = wimp_handle;
    win.visible_area.xmin = 0;
    win.visible_area.xmax = screenw;
    win.visible_area.ymin = 0;
    win.visible_area.ymax = screenh;
    win.xscroll = 0;
    win.yscroll = 0;
    win.behind = -1;
    error_trap(wimp_open_window(&win), 0);

    animation_initialised = initialise_animation();
    
    return 1;
d399 1
a399 1
    int           *pollword = 0;
d403 2
a404 1
    if (!main_initialise()) program_exit();
d408 1
a408 1
        error_trap(event_poll(&event_code, &wpb, pollword), 0);
@


1.1.1.1
log
@Initial import of AcornLogo screensaver.
@
text
@@


1.1.1.2
log
@Added screen banking to improve smoothness
@
text
@a20 2
/*          03-Jun-98: RML: Removed reference to PhotoQV in error reporting. */
/*          05-Jun-98: RML: Screen banking added.                            */
a34 1
#include "saver.h"
a35 1
#define SettingsFile         "<Choices$Write>.ScrSavers.Acornlogo"
a44 3
#define JustStarting         -2
#define DefaultSpeed         2

d53 2
a54 2
static int        xeig;
static int        yeig;
d59 4
a62 4
static int        logo_x;
static int        logo_y;
static int        x_step;
static int        y_step;
d73 7
a79 1
    saver_exit();
d82 13
d96 10
a105 1
    exit(0);
d110 1
a110 1
 * read_settings                                                             *
d112 1
a112 1
 * Read the current settings file.                                           *
d115 1
a115 1
void read_settings(void)
d117 9
a125 3
#if 0
    FILE *fp;
    char  string[256];
d127 3
a129 7
    fp=fopen(SettingsFile, "r");
    if (fp)
    {
        fgets(string, 256, fp);
        sscanf(string, "Speed %d", &speed);
        fclose(fp);
    }
d131 3
a133 9
    if (speed<0) speed = 1;
    if (speed>4) speed = 4;
#else
    int speed = DefaultSpeed;    
#endif
    x_step = speed<<xeig;
    y_step = speed<<yeig;
}        

a137 2
 *                                                                           *
 * Er, plot the sprite.                                                      *
d142 3
a144 31
    saver_write_bank();
    
#if 0
    if (speed > 2)
    {
        /* Black out the corner pieces which will be left as a trail */
        _swix(ColourTrans_SetGCOL, _IN(0)|_IN(3)|_IN(4), 0, 0, 0);
        _swix(OS_Plot, _INR(0, 2), OSPlot_Move, logo_x - (speed*x_step), logo_y - (speed*y_step));
        _swix(OS_Plot, _INR(0, 2), OSPlot_RectangleFill, spritew + (speed*x_step), speed*y_step);

        _swix(OS_Plot, _INR(0, 2), OSPlot_Move, logo_x - (speed*x_step), logo_y + spriteh);
        _swix(OS_Plot, _INR(0, 2), OSPlot_RectangleFill, spritew + (speed*x_step), speed*y_step);

        _swix(OS_Plot, _INR(0, 2), OSPlot_Move, logo_x - (speed*x_step), logo_y);
        _swix(OS_Plot, _INR(0, 2), OSPlot_RectangleFill, speed*x_step, spriteh);

        _swix(OS_Plot, _INR(0, 2), OSPlot_Move, logo_x + spritew, logo_y);
        _swix(OS_Plot, _INR(0, 2), OSPlot_RectangleFill, speed*x_step, spriteh);
    }        
#endif        
    
    _swix(OS_SpriteOp, _INR(0,7), 256+SpritePutScaled,
                                  spritearea,
                                  spritename,
                                  logo_x,
                                  logo_y,
                                  32,
                                  0,
                                  ctrans_table);
                                  
    saver_read_bank();
a149 2
 *                                                                           *
 * Set up the animation.                                                     *
d167 6
a172 9
    if (_swix(OS_SpriteOp, _INR(0,1), 256+SpriteInitialiseArea, spritearea)) return 0;
    if (_swix(OS_SpriteOp, _INR(0,2), 256+SpriteLoadFile, spritearea, SpriteFile)) return 0;
    if (_swix(OS_SpriteOp, _INR(0,2)|_OUTR(3,4), 256+SpriteReadInfo,
                                                 spritearea,
                                                 "logo0",
                                                 &spritew,
                                                 &spriteh)) return 0;
    spritew = spritew<<xeig;
    spriteh = spriteh<<yeig;
d175 2
a176 1
    if (_swix(ColourTrans_GenerateTable, _INR(0,5)|_OUT(4), spritearea, "logo0", -1, -1, 0, 16, &size)) return 0;
d178 3
a180 2
    if (!ctrans_table) return 0;
    if (_swix(ColourTrans_GenerateTable, _INR(0,5), spritearea, "logo0", -1, -1, ctrans_table, 16)) return 0;
d185 3
a187 1
    _swix(OS_ReadMonotonicTime, _OUT(0), &last_frame); 
d189 5
a193 4
    logo_x = saver_rnd(screenw-spritew);
    logo_y = saver_rnd(screenh-spriteh);
    
    saver_decide_double_buffering();
d207 5
a211 3
    static int current_frame = JustStarting;
    int        time;
    int        plot_it = 0;
d214 1
a214 1
    if (current_frame == JustStarting)
d216 2
a217 2
        saver_error_trap(event_set_mask(Wimp_Poll_PollWord), 0);    
        plot_it = 1;
d221 1
a221 1
    _swix(OS_ReadMonotonicTime, _OUT(0), &time);
d237 6
a242 17
            logo_x += x_step;
            logo_y += y_step;

            if ( (logo_x > (screenw - spritew))
              || (logo_x < 0) )
            {
                x_step = -x_step;
                logo_x += x_step;
            }
            
            if ( (logo_y > (screenh - spriteh))
              || (logo_y < 0) )
            {
                y_step = -y_step;
                logo_y += y_step;
            }
            
d261 1
a261 1
    saver_hide_pointer();
d275 1
a275 1
    saver_show_pointer();
d334 1
a334 1
static void main_initialise(void)
d336 10
a345 2
    int main_window;
    int task_handle;
d347 2
a348 2
    /* Initialise toolbox */
    saver_error_trap(toolbox_initialise(0, 310, 0, 0, "<BlankTask$Dir>",
d350 44
a393 21
    saver_error_trap(event_initialise(&idb), 1);
    saver_error_trap(event_set_mask(Wimp_Poll_PollWord +
                              Wimp_Poll_PollWordHighPriority), 1);    

    /* Register event handlers */
    saver_error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 1);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_ENull, null_event, NULL), 1);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_ERedrawWindow, redraw, NULL), 1);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPollWordNonZero, pollword, NULL), 1);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPointerEnteringWindow, gain_pointer, NULL), 1);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPointerLeavingWindow, lose_pointer, NULL), 1);

    /* Open covering window */
    saver_read_screensize(&screenw, &screenh, &xeig, &yeig);
    saver_error_trap(toolbox_create_object(0, "Window", &main_window), 1);
    saver_open_covering_window(main_window);
    
    /* More initialisation */
    saver_set_rnd_seed();
    read_settings();
    if (!initialise_animation()) saver_handle_fatal_error();
d409 1
a409 2

    main_initialise();
d413 1
a413 1
        saver_error_trap(event_poll(&event_code, &wpb, pollword), 0);
@
