head	1.3;
access;
symbols
	AcornLogo-0_04:1.3
	AcornLogo-0_03:1.2
	AcornLogo-0_01:1.2
	AcornLogo-0_02:1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.2.2
	Ursula_RiscPC:1.1.2.2.0.2
	rthornb_UrsulaBuild-19Aug1998:1.1.2.2
	UrsulaBuild_FinalSoftload:1.1.2.2
	rthornb_UrsulaBuild-12Aug1998:1.1.2.2
	aglover_UrsulaBuild-05Aug1998:1.1.2.2
	rthornb_UrsulaBuild-29Jul1998:1.1.2.2
	rthornb_UrsulaBuild-22Jul1998:1.1.2.2
	rthornb_UrsulaBuild-15Jul1998:1.1.2.2
	rleggett_AcornLogo-0_02:1.1.2.2
	rthornb_UrsulaBuild-07Jul1998:1.1.2.1
	rthornb_UrsulaBuild-17Jun1998:1.1.2.1
	Ursula:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2015.06.28.22.23.09;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	pgKvFZWskhDEofry;

1.2
date	2001.01.16.15.10.28;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.06.10.10.12.45;	author rleggett;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	98.06.10.10.12.46;	author rleggett;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	98.07.15.09.36.22;	author rleggett;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Numerous screensaver/setup improvements
Notably the setup application allowed the setting of the aniation speed but that didn't affect the animation speed at all. This was because the corresponding code in the screensaver was disabled due to being totally wrong.
Now, the speed setting is interpreted, and for the double banked case the previous frame is blacked out and for the single bank case the area moved is blacked out (to eliminate flicker).
Squash the animation frames so they don't occupy 765k of disc space, new unsquash code added (from Pogo saver).
Set 'Cancel' as the escape action button so the setup window closes when Escape is pressed.
Other admin changes:
* Makefiles recreated from fragments
* Version number now auto inserted from VersionNum
* Messages and common code "saver.c" sync'd with other screensaver/setup apps
* Removed references to Filer Configure from RMEnsure error messages
* Removed never used info from setup app messages, ensuring they're never out of date by deleting them
* Removed non internationalised "Screensave setup" from error box titles
* Load settings from Choices: write settings through <Choices$Write>
* Fix null pointer dereference when -openat switch has too few arguments
* Symbolic names used instead of magic numbers where possible
Tested on RISC OS 4.02.

Version 0.04. Tagged as 'AcornLogo-0_04'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*---------------------------------------------------------------------------*/
/* File:    c.saver                                                          */
/* Purpose: Handy routines for screensavers                                  */
/* Author:  Richard Leggett                                                  */
/* History: 05-Jun-98: RML: Created.                                         */
/*          15-Jul-98: RML: Changed memory freeing code to take account of   */
/*                          screen memory granularity.                       */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "Global/OsBytes.h"
#include "Global/VduExt.h"

#include "wimplib.h"
#include "window.h"
#include "event.h"
#include "saver.h"
#include "swis.h"

static int extra_screen = 0;
static int screen_banks = 1;
static int current_bank = 1;


/*---------------------------------------------------------------------------*
 * saver_error_trap                                                          *
 *                                                                           *
 * Wrap around a function to report an error if one occurred eg.:            *
 *  error_trap(event_initialise(&idb), 0);                                   *
 *                                                                           *
 * Use only in exceptional cases with screensavers.                          *
 *                                                                           *
 * In: err - a kernel_oserror block                                          *
 *     type - 0 means non-fatal, otherwise program will exit after reporting *
 *---------------------------------------------------------------------------*/

void saver_error_trap(_kernel_oserror *err, int err_type)
{
    /* Report the appropriate error, has one occured */
    if (err != NULL)
    {
        wimp_report_error(err, 0, "Screensaver", 0, 0, 0);
  
        /* Now, if it was a fatal error (type != 0), exit at once */
        if (err_type != 0) exit(0);
    }    
}


/*---------------------------------------------------------------------------*
 * saver_handle_fatal_error                                                  *
 *                                                                           *
 * If a fatal error occurs, clear the screen (to ensure blanking) and remove *
 * null event handler.                                                       *
 *---------------------------------------------------------------------------*/

void saver_handle_fatal_error(void)
{
    _swix(ColourTrans_SetGCOL, _IN(0)|_IN(3)|_IN(4), 0, 128, 0);
    _swi(OS_WriteC, _IN(0), 16);

    event_set_mask(Wimp_Poll_PollWord + Wimp_Poll_NullMask);
}    


/*---------------------------------------------------------------------------*
 * saver_exit                                                                *
 *                                                                           *
 * Exit routine to be called before death. Frees up screen memory and unsets *
 * ScrSaver$Running.                                                         *
 *---------------------------------------------------------------------------*/

void saver_exit(void)
{
    /* Turn on pointer */
    _swix(OS_Byte, _INR(0,1), OsByte_SelectPointer, 1);

    /* If screen banking was used, free up the extra screen memory */
    if (screen_banks > 1)
    {
        _swix(OS_Byte, _INR(0,1), OsByte_BankForVDU, 1);
        _swix(OS_Byte, _INR(0,1), OsByte_BankForDisplay, 1);
        _swix(OS_ChangeDynamicArea, _INR(0,1), ScreenDA, -extra_screen);
    }

    /* Unset ScrSaver$Running */
    _swix(OS_SetVarVal, _INR(0,4), "ScrSaver$Running", 0, -1, 0, 0);
}    


/*---------------------------------------------------------------------------*
 * saver_decide_double_buffering                                             *
 *                                                                           *
 * Decide if there's enough memory for double buffering the screen. If there *
 * is, then set up the two screen banks.                                     *
 *---------------------------------------------------------------------------*/

int saver_decide_double_buffering(void)
{
    int screen_memory_required;
    int memory_required;
    int free_memory;
    int old_size;
    int new_size;

    /* Find out the free memory, also the memory required to hold two screen banks */
    _swix(Wimp_SlotSize, _INR(0,1)|_OUT(2), -1, -1, &free_memory);
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, VduExt_ScreenSize, &screen_memory_required);
    screen_memory_required = screen_memory_required * 2;

    /* Now work out the minimum memory that must be free before we'll use screen banking */
    memory_required = screen_memory_required + (MinimumFreeMemory * 1024);
    if (free_memory < memory_required) return 1;

    /* Find out how much memory is currently assigned to the screen */
    if (_swix(OS_DynamicArea, _INR(0,1)|_OUT(2), 2, ScreenDA, &old_size)) return 1;
    extra_screen = screen_memory_required - old_size;
    if (extra_screen < 0) extra_screen = 0;

    /* Try and increase the screen memory dynamic area */
    if (extra_screen)
    {
        if (_swix(OS_ChangeDynamicArea, _INR(0,1), ScreenDA, extra_screen)) return 1;
    }
    
    /* Find out what it's increased to (it may be more than we asked for because
       of granularity) */
    if (_swix(OS_DynamicArea, _INR(0,1)|_OUT(2), 2, ScreenDA, &new_size)) return 1;
    extra_screen = new_size - old_size;

    /* Clear second bank */
    _swix(ColourTrans_SetGCOL, _IN(0)|_IN(3)|_IN(4), 0, 128, 0);
    _swix(OS_Byte, _INR(0,1), OsByte_BankForVDU, 2);
    _swix(OS_WriteC, _IN(0), 16);
    _swix(OS_Byte, _INR(0,1), OsByte_BankForVDU, 1);

    screen_banks = 2;

    return screen_banks;
}


/*---------------------------------------------------------------------------*
 * saver_write_bank                                                          *
 *                                                                           *
 * Sets up the next screen bank to write to. Call this before writing to the *
 * screen, then call saver_read bank, after the data has been written.       *
 *---------------------------------------------------------------------------*/

void saver_write_bank(void)
{
    if (screen_banks > 1)
    {
        _swix(OS_Byte, _INR(0,1), OsByte_BankForVDU, current_bank);
    }
}


/*---------------------------------------------------------------------------*
 * saver_read_bank                                                           *
 *                                                                           *
 * Sets up the next screen bank to read from.                                *
 *---------------------------------------------------------------------------*/

void saver_read_bank(void)
{
    if (screen_banks > 1)
    {
        _swix(OS_Byte, _INR(0,1), OsByte_BankForDisplay, current_bank);
        _swix(OS_Byte, _IN(0), OsByte_Wait);
        current_bank = current_bank^3;
    }
}


/*---------------------------------------------------------------------------*
 * saver_read_screensize                                                     *
 *                                                                           *
 * Read the screen size, plus eigenvalues.                                   *
 *                                                                           *
 * In: sw -> variable to store screen width.                                 *
 *     sh -> variable to store screen height.                                *
 *     xe -> variable to store x eigen value.                                *
 *     ye -> variable to store y eigen value.                                *
 *---------------------------------------------------------------------------*/

void saver_read_screensize(int *sw, int *sh, int *xe, int *ye)
{
    int xeig;
    int yeig;
    int xpixels;
    int ypixels;
    
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, VduExt_XEigFactor, &xeig);
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, VduExt_YEigFactor, &yeig);
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, VduExt_XWindLimit, &xpixels);
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, VduExt_YWindLimit, &ypixels);

    *sw = (xpixels + 1) << xeig;
    *sh = (ypixels + 1) << yeig;
    *xe = xeig;
    *ye = yeig;
}


/*---------------------------------------------------------------------------*
 * rnd                                                                       *
 *                                                                           *
 * Generate a random number between 1 and n.                                 *
 *---------------------------------------------------------------------------*/

int saver_rnd(int n)
{
    return (int) ( ((float)rand()/(float)RAND_MAX) *n)+1;
}


/*---------------------------------------------------------------------------*
 * set_random_seed                                                           *
 *                                                                           *
 * Reset the random number seed to a value dependent on the monotonic timer. *
 *---------------------------------------------------------------------------*/

void saver_set_rnd_seed(void)
{
    int time;
    
    _swix(OS_ReadMonotonicTime, _OUT(0), &time);
    srand(time);
}


/*---------------------------------------------------------------------------*
 * saver_hide_pointer                                                        *
 *                                                                           *
 * Remove the pointer from the screen.                                       *
 *---------------------------------------------------------------------------*/

void saver_hide_pointer(void)
{
    _swix(OS_Byte, _INR(0,1), OsByte_SelectPointer, 0);
}


/*---------------------------------------------------------------------------*
 * saver_show_pointer                                                        *
 *                                                                           *
 * Re-show the pointer.                                                      *
 *---------------------------------------------------------------------------*/

void saver_show_pointer(void)
{
    _swix(OS_Byte, _INR(0,1), OsByte_SelectPointer, 1);
}


/*---------------------------------------------------------------------------*
 * saver_open_covering_window                                                *
 *                                                                           *
 * Given the toolbox ID of a window, set it's extent to cover the screen and *
 * then open the window.                                                     *
 *                                                                           *
 * In: window_id = toolbox ID of window to open.                             *
 *---------------------------------------------------------------------------*/

void saver_open_covering_window(int window_id)
{
    WimpOpenWindowBlock win;
    BBox extent;
    int  wimp_handle;
    int  screenw;
    int  screenh;
    int  xeig;
    int  yeig;
    int  show[2];
    
    saver_read_screensize(&screenw, &screenh, &xeig, &yeig);

    extent.xmin = 0;
    extent.xmax = screenw;
    extent.ymin = 0;
    extent.ymax = screenh;

    show[0] = 0;
    show[1] = screenh;

    saver_error_trap(window_set_extent(0, window_id, &extent), 0);
    saver_error_trap(window_get_wimp_handle(0, window_id, &wimp_handle), 0);

    win.window_handle = wimp_handle;
    win.visible_area.xmin = 0;
    win.visible_area.xmax = screenw;
    win.visible_area.ymin = 0;
    win.visible_area.ymax = screenh;
    win.xscroll = 0;
    win.yscroll = 0;
    win.behind = -1;
    saver_error_trap(wimp_open_window(&win), 0);
}
@


1.2
log
@Merged Ursula branch
@
text
@d29 4
a32 1
#include "kernel.h"
d95 1
a95 1
    _kernel_osbyte(106, 1, 0);
d100 2
a101 2
        _kernel_osbyte(OSByte_WriteDriverBank, 1, 0);
        _kernel_osbyte(OSByte_WriteDisplayBank, 1, 0);
d117 1
a117 1
void saver_decide_double_buffering(void)
d127 1
a127 1
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 7, &screen_memory_required);
d132 1
a132 1
    if (free_memory < memory_required) return;
d135 1
a135 1
    if (_swix(OS_DynamicArea, _INR(0,1)|_OUT(2), 2, ScreenDA, &old_size)) return;
d142 1
a142 1
        if (_swix(OS_ChangeDynamicArea, _INR(0,1), ScreenDA, extra_screen)) return;
d147 1
a147 1
    if (_swix(OS_DynamicArea, _INR(0,1)|_OUT(2), 2, ScreenDA, &new_size)) return;
d152 1
a152 1
    _kernel_osbyte(OSByte_WriteDriverBank, 2, 0); 
d154 1
a154 1
    _kernel_osbyte(OSByte_WriteDriverBank, 1, 0);
d157 2
d173 1
a173 1
        _kernel_osbyte(OSByte_WriteDriverBank, current_bank, 0);
d188 2
a189 2
        _kernel_osbyte(OSByte_WriteDisplayBank, current_bank, 0);
        _kernel_osbyte(OSByte_WaitVSync, 0, 0);
d213 4
a216 4
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &xeig);
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &yeig);
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 11, &xpixels);
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 12, &ypixels);
d260 1
a260 1
    _kernel_osbyte(106, 0, 0);
d272 1
a272 1
    _kernel_osbyte(106, 1, 0);
@


1.1
log
@file saver was initially added on branch Ursula.
@
text
@d1 313
@


1.1.2.1
log
@Added screen banking to improve smoothness
@
text
@a0 304
/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*---------------------------------------------------------------------------*/
/* File:    c.saver                                                          */
/* Purpose: Handy routines for screensavers                                  */
/* Author:  Richard Leggett                                                  */
/* History: 05-Jun-98: RML: Created.                                         */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "wimplib.h"
#include "window.h"
#include "event.h"
#include "saver.h"
#include "swis.h"

static int extra_screen = 0;
static int screen_banks = 1;
static int current_bank = 1;


/*---------------------------------------------------------------------------*
 * saver_error_trap                                                          *
 *                                                                           *
 * Wrap around a function to report an error if one occurred eg.:            *
 *  error_trap(event_initialise(&idb), 0);                                   *
 *                                                                           *
 * Use only in exceptional cases with screensavers.                          *
 *                                                                           *
 * In: err - a kernel_oserror block                                          *
 *     type - 0 means non-fatal, otherwise program will exit after reporting *
 *---------------------------------------------------------------------------*/

void saver_error_trap(_kernel_oserror *err, int err_type)
{
    /* Report the appropriate error, has one occured */
    if (err != NULL)
    {
        wimp_report_error(err, 0, "Screensaver", 0, 0, 0);
  
        /* Now, if it was a fatal error (type != 0), exit at once */
        if (err_type != 0) exit(0);
    }    
}


/*---------------------------------------------------------------------------*
 * saver_handle_fatal_error                                                  *
 *                                                                           *
 * If a fatal error occurs, clear the screen (to ensure blanking) and remove *
 * null event handler.                                                       *
 *---------------------------------------------------------------------------*/

void saver_handle_fatal_error(void)
{
    _swix(ColourTrans_SetGCOL, _IN(0)|_IN(3)|_IN(4), 0, 128, 0);
    _swi(OS_WriteC, _IN(0), 16);

    event_set_mask(Wimp_Poll_PollWord + Wimp_Poll_NullMask);
}    


/*---------------------------------------------------------------------------*
 * saver_exit                                                                *
 *                                                                           *
 * Exit routine to be called before death. Frees up screen memory and unsets *
 * ScrSaver$Running.                                                         *
 *---------------------------------------------------------------------------*/

void saver_exit(void)
{
    /* Turn on pointer */
    _kernel_osbyte(106, 1, 0);

    /* If screen banking was used, free up the extra screen memory */
    if (screen_banks > 1)
    {
        _kernel_osbyte(OSByte_WriteDriverBank, 1, 0);
        _kernel_osbyte(OSByte_WriteDisplayBank, 1, 0);
        _swix(OS_ChangeDynamicArea, _INR(0,1), ScreenDA, -extra_screen);
    }

    /* Unset ScrSaver$Running */
    _swix(OS_SetVarVal, _INR(0,4), "ScrSaver$Running", 0, -1, 0, 0);
}    


/*---------------------------------------------------------------------------*
 * saver_decide_double_buffering                                             *
 *                                                                           *
 * Decide if there's enough memory for double buffering the screen. If there *
 * is, then set up the two screen banks.                                     *
 *---------------------------------------------------------------------------*/

void saver_decide_double_buffering(void)
{
    int screen_memory_required;
    int memory_required;
    int free_memory;

    /* Find out the free memory, also the memory required to hold two screen banks */
    _swix(Wimp_SlotSize, _INR(0,1)|_OUT(2), -1, -1, &free_memory);
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 7, &screen_memory_required);
    screen_memory_required = screen_memory_required * 2;

    /* Now work out the minimum memory that must be free before we'll use screen banking */
    memory_required = screen_memory_required + (MinimumFreeMemory * 1024);
    if (free_memory < memory_required) return;

    /* Find out how much memory is currently assigned to the screen */
    if (_swix(OS_DynamicArea, _INR(0,1)|_OUT(2), 2, ScreenDA, &extra_screen)) return;
    extra_screen = screen_memory_required - extra_screen;
    if (extra_screen < 0) extra_screen = 0;

    /* Try and increase the screen memory dynamic area */
    if (extra_screen)
    {
        if (_swix(OS_ChangeDynamicArea, _INR(0,1), ScreenDA, extra_screen)) return;
    }

    /* Clear second bank */
    _swix(ColourTrans_SetGCOL, _IN(0)|_IN(3)|_IN(4), 0, 128, 0);
    _kernel_osbyte(OSByte_WriteDriverBank, 2, 0); 
    _swix(OS_WriteC, _IN(0), 16);
    _kernel_osbyte(OSByte_WriteDriverBank, 1, 0);

    screen_banks = 2;
}


/*---------------------------------------------------------------------------*
 * saver_write_bank                                                          *
 *                                                                           *
 * Sets up the next screen bank to write to. Call this before writing to the *
 * screen, then call saver_read bank, after the data has been written.       *
 *---------------------------------------------------------------------------*/

void saver_write_bank(void)
{
    if (screen_banks > 1)
    {
        _kernel_osbyte(OSByte_WriteDriverBank, current_bank, 0);
    }
}


/*---------------------------------------------------------------------------*
 * saver_read_bank                                                           *
 *                                                                           *
 * Sets up the next screen bank to read from.                                *
 *---------------------------------------------------------------------------*/

void saver_read_bank(void)
{
    if (screen_banks > 1)
    {
        _kernel_osbyte(OSByte_WriteDisplayBank, current_bank, 0);
        _kernel_osbyte(OSByte_WaitVSync, 0, 0);
        current_bank = current_bank^3;
    }
}


/*---------------------------------------------------------------------------*
 * saver_read_screensize                                                     *
 *                                                                           *
 * Read the screen size, plus eigenvalues.                                   *
 *                                                                           *
 * In: sw -> variable to store screen width.                                 *
 *     sh -> variable to store screen height.                                *
 *     xe -> variable to store x eigen value.                                *
 *     ye -> variable to store y eigen value.                                *
 *---------------------------------------------------------------------------*/

void saver_read_screensize(int *sw, int *sh, int *xe, int *ye)
{
    int xeig;
    int yeig;
    int xpixels;
    int ypixels;
    
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &xeig);
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &yeig);
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 11, &xpixels);
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 12, &ypixels);

    *sw = (xpixels + 1) << xeig;
    *sh = (ypixels + 1) << yeig;
    *xe = xeig;
    *ye = yeig;
}


/*---------------------------------------------------------------------------*
 * rnd                                                                       *
 *                                                                           *
 * Generate a random number between 1 and n.                                 *
 *---------------------------------------------------------------------------*/

int saver_rnd(int n)
{
    return (int) ( ((float)rand()/(float)RAND_MAX) *n)+1;
}


/*---------------------------------------------------------------------------*
 * set_random_seed                                                           *
 *                                                                           *
 * Reset the random number seed to a value dependent on the monotonic timer. *
 *---------------------------------------------------------------------------*/

void saver_set_rnd_seed(void)
{
    int time;
    
    _swix(OS_ReadMonotonicTime, _OUT(0), &time);
    srand(time);
}


/*---------------------------------------------------------------------------*
 * saver_hide_pointer                                                        *
 *                                                                           *
 * Remove the pointer from the screen.                                       *
 *---------------------------------------------------------------------------*/

void saver_hide_pointer(void)
{
    _kernel_osbyte(106, 0, 0);
}


/*---------------------------------------------------------------------------*
 * saver_show_pointer                                                        *
 *                                                                           *
 * Re-show the pointer.                                                      *
 *---------------------------------------------------------------------------*/

void saver_show_pointer(void)
{
    _kernel_osbyte(106, 1, 0);
}


/*---------------------------------------------------------------------------*
 * saver_open_covering_window                                                *
 *                                                                           *
 * Given the toolbox ID of a window, set it's extent to cover the screen and *
 * then open the window.                                                     *
 *                                                                           *
 * In: window_id = toolbox ID of window to open.                             *
 *---------------------------------------------------------------------------*/

void saver_open_covering_window(int window_id)
{
    WimpOpenWindowBlock win;
    BBox extent;
    int  wimp_handle;
    int  screenw;
    int  screenh;
    int  xeig;
    int  yeig;
    int  show[2];
    
    saver_read_screensize(&screenw, &screenh, &xeig, &yeig);

    extent.xmin = 0;
    extent.xmax = screenw;
    extent.ymin = 0;
    extent.ymax = screenh;

    show[0] = 0;
    show[1] = screenh;

    saver_error_trap(window_set_extent(0, window_id, &extent), 0);
    saver_error_trap(window_get_wimp_handle(0, window_id, &wimp_handle), 0);

    win.window_handle = wimp_handle;
    win.visible_area.xmin = 0;
    win.visible_area.xmax = screenw;
    win.visible_area.ymin = 0;
    win.visible_area.ymax = screenh;
    win.xscroll = 0;
    win.yscroll = 0;
    win.behind = -1;
    saver_error_trap(wimp_open_window(&win), 0);
}
@


1.1.2.2
log
@Minor problem with handing back of screen memory on unblanking corrected
(problem was it handed back less was taken on phoebe systems with 1Mb
VRAM granularity)
@
text
@a19 2
/*          15-Jul-98: RML: Changed memory freeing code to take account of   */
/*                          screen memory granularity.                       */
a116 2
    int old_size;
    int new_size;
d128 2
a129 2
    if (_swix(OS_DynamicArea, _INR(0,1)|_OUT(2), 2, ScreenDA, &old_size)) return;
    extra_screen = screen_memory_required - old_size;
a136 5
    
    /* Find out what it's increased to (it may be more than we asked for because
       of granularity) */
    if (_swix(OS_DynamicArea, _INR(0,1)|_OUT(2), 2, ScreenDA, &new_size)) return;
    extra_screen = new_size - old_size;
@
