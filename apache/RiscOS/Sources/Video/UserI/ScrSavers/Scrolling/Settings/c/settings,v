head	1.4;
access;
symbols
	Scrolling-0_09:1.4
	Scrolling-0_08:1.3
	Scrolling-0_07:1.2
	Scrolling-0_06:1.2
	Scrolling-0_05:1.2
	Scrolling-0_04:1.2
	Scrolling-0_01:1.1.1.1
	Scrolling-0_03:1.1.1.1
	bavison_Scrolling-0_01:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2015.06.28.22.45.11;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	6ZYUpFL0ydSewfry;

1.3
date	2012.02.11.09.25.32;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	9LLdWXiNHTKaJISv;

1.2
date	2003.06.18.15.50.09;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	98.09.23.14.28.46;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.23.14.28.46;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Numerous screensaver/setup improvements
Simplified reading/writing of choices, and error handling therein.
Set 'Cancel' as the escape action button so the setup window closes when Escape is pressed.
Other admin changes:
* Makefiles recreated from fragments
* Version number now auto inserted from VersionNum
* Messages and common code "saver.c" sync'd with other screensaver/setup apps
* Removed never used info from setup app messages, ensuring they're never out of date by deleting them
* Removed non internationalised "Screensave setup" from error box titles
* Load settings from Choices: write settings through <Choices$Write>
* Fix null pointer dereference when -openat switch has too few arguments
* Symbolic names used instead of magic numbers where possible
Tested on RISC OS 4.02.

Version 0.09. Tagged as 'Scrolling-0_09'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*---------------------------------------------------------------------------*/
/* File:    c.settings                                                       */
/* Purpose: Example configuration for screen blanker                         */
/* Author:  Mark Moir                                                        */
/* History: 20-Nov-97: RML: Shell created                                    */
/*          25-Feb-98: MM : Scrolling text message version started           */
/*---------------------------------------------------------------------------*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "Global/VduExt.h"
#include "Global/FileTypes.h"
#include "Interface/HighFSI.h"

#include "swis.h"
#include "toolbox.h"
#include "event.h"
#include "window.h"
#include "wimplib.h"
#include "fontmenu.h"
#include "colourdbox.h"

#define SettingsRO    "Choices:ScrSavers.Scrolling"
#define SettingsFile  "<Choices$Write>.ScrSavers.Scrolling"

#define DefaultButton     0x06
#define CancelButton      0x07
#define SetButton         0x08
#define Mask_NoNullEvents 1

/* Global variables */
static IdBlock    idb;
static int        quit=FALSE;
static int        task_handle;
static int        colourdbox_handle;
static MessagesFD messages_desc;
static int        main_window;
static int        chosen_colour, chosen_size, chosen_speed;
static char       chosen_font[256], chosen_message[256];

static int font_selected(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle);
static int colour_selected(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle);
static void save_choices(void);
static void set_default_choices(void);
static void read_choices(void);
static int redraw(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle);
static void set_colour(int palent);


/*---------------------------------------------------------------------------*
 * error_trap                                                                *
 *                                                                           *
 * Wrap around a function to report an error if one occurred eg.:            *
 *  error_trap(event_initialise(&idb), 0);                                   *
 *                                                                           *
 * In: err - a kernel_oserror block                                          *
 *     type - 0 means non-fatal, otherwise program will exit after reporting *
 *---------------------------------------------------------------------------*/

void error_trap(_kernel_oserror *err, int err_type)
{
    /* Report the appropriate error, has one occured */
    if (err != NULL)
    {
        wimp_report_error(err, 0, "SvrSetup", 0, 0, 0);
  
        /* Now, if it was a fatal error (type != 0), exit at once */
        if (err_type != 0) exit(0);
    }
}


/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

void program_exit(void)
{
    exit(0);
}


/*---------------------------------------------------------------------------*
 * read_screensize                                                           *
 *                                                                           *
 * Return the size of rhe screen in OS units                                 *
 *---------------------------------------------------------------------------*/

_kernel_oserror* read_screensize(int* x, int* y)
{
    _kernel_oserror* e;
    int              xeig, yeig, xpix, ypix;

    e = _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, VduExt_XEigFactor, &xeig);
    e = _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, VduExt_YEigFactor, &yeig);
    e = _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, VduExt_XWindLimit, &xpix);
    e = _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, VduExt_YWindLimit, &ypix);

    *x = xpix << xeig;
    *y = ypix << yeig;

    return NULL;
}


/*---------------------------------------------------------------------------*
 * save_choices                                                              *
 *                                                                           *
 * Save the current settings.                                                *
 *---------------------------------------------------------------------------*/

static void save_choices(void)
{
  char buffer[256], out[256];
  int read, filehandle;

  slider_get_value(0, main_window, 0x14, &chosen_speed);

  numberrange_get_value(0, main_window, 0x11, &chosen_size);
  writablefield_get_value(0, main_window, 0x9, buffer, 256, &read);
  buffer[read] = 0;

  strcpy(chosen_message, buffer);

  error_trap(_swix(OS_Find, _INR(0,1)|_OUT(0), open_write | open_mustopen | open_nodir,
                            SettingsFile, &filehandle), 0);
  error_trap(_swix(OS_GBPB, _INR(0,4), OSGBPB_WriteAtPTR, filehandle, chosen_font, strlen(chosen_font), -1), 0);
  error_trap(_swix(OS_BPut, _INR(0,1), 10, filehandle), 0);
  error_trap(_swix(OS_GBPB, _INR(0,4), OSGBPB_WriteAtPTR, filehandle, chosen_message, strlen(chosen_message), -1), 0);
  error_trap(_swix(OS_BPut, _INR(0,1), 10, filehandle), 0);
  sprintf(out, "%d", chosen_size);
  error_trap(_swix(OS_GBPB, _INR(0,4), OSGBPB_WriteAtPTR, filehandle, out, strlen(out), -1), 0);
  error_trap(_swix(OS_BPut, _INR(0,1), 10, filehandle), 0);
  sprintf(out, "%d", chosen_colour);
  error_trap(_swix(OS_GBPB, _INR(0,4), OSGBPB_WriteAtPTR, filehandle, out, strlen(out), -1), 0);
  error_trap(_swix(OS_BPut, _INR(0,1), 10, filehandle), 0);
  sprintf(out, "%d", chosen_speed);
  error_trap(_swix(OS_GBPB, _INR(0,4), OSGBPB_WriteAtPTR, filehandle, out, strlen(out), -1), 0);
  error_trap(_swix(OS_BPut, _INR(0,1), 10, filehandle), 0);

  error_trap(_swix(OS_Find, _INR(0,1), OSFind_Close, filehandle), 0);
  error_trap(_swix(OS_File, _INR(0,2), OSFile_SetType, SettingsFile, FileType_Text), 0);
}


/*---------------------------------------------------------------------------*
 * set_default_choices                                                       *
 *                                                                           *
 * Fill in the default choices in the dialogue box.                          *
 *---------------------------------------------------------------------------*/

static void set_default_choices(void)
{
  char out[256];

  /* Make up some defaults */
  strcpy(chosen_font, "Homerton.Bold");
  strcpy(chosen_message, "Screen saver");
  chosen_size = 50;
  chosen_colour = (int)0xffffff00;
  chosen_speed = 50;

  displayfield_set_value(0, main_window, 0xb, chosen_font);
  writablefield_set_value(0, main_window, 0x9, chosen_message);

  sprintf(out, "&%8x", chosen_colour);
  displayfield_set_value(0, main_window, 0xf, out);

  numberrange_set_value(0, main_window, 0x11, chosen_size);

  slider_set_value(0, main_window, 0x14, chosen_speed);
}


/*---------------------------------------------------------------------------*
 * read_choices                                                              *
 *                                                                           *
 * Read the current settings.                                                 *
 *---------------------------------------------------------------------------*/

static void read_choices(void)
{
  char buffer[256];
  int  filehandle, ptr, byte, type;

  /* Make up some defaults */
  strcpy(chosen_font, "Homerton.Bold");
  strcpy(chosen_message, "Screen saver");
  chosen_size = 50;
  chosen_colour = (int)0xffffff00;
  chosen_speed = 50;

  _swix(OS_File, _INR(0,1)|_OUT(0), OSFile_ReadNoPath, SettingsRO, &type);

  if (type==object_file)
  {
    error_trap(_swix(OS_Find, _INR(0,1)|_OUT(0), 0xcc, SettingsRO, &filehandle), 1);
  
    /***** Read the font name *****/
  
    ptr = 0;
    do
    {
      error_trap(_swix(OS_BGet, _IN(1)|_OUT(0), filehandle, &byte), 0);
      buffer[ptr++] = byte;
    } while (byte != 10 && ptr < 255);
  
    if (byte == 10)
    {
      buffer[ptr - 1] = 0;
      strcpy(chosen_font, buffer);
    }
  
    /***** Read the message *****/
  
    ptr = 0;
    do
    {
      error_trap(_swix(OS_BGet, _IN(1)|_OUT(0), filehandle, &byte), 0);
      buffer[ptr++] = byte;
    } while (byte != 10 && ptr < 255);
  
    if (byte == 10)
    {
      buffer[ptr - 1] = 0;
      strcpy(chosen_message, buffer);
    }
  
    /***** Read the font size *****/
  
    ptr = 0;
    do
    {
      error_trap(_swix(OS_BGet, _IN(1)|_OUT(0), filehandle, &byte), 0);
      buffer[ptr++] = byte;
    } while (byte != 10 && ptr < 255);
  
    if (byte == 10)
    {
      buffer[ptr - 1] = 0;
      chosen_size = atoi(buffer);
    }
  
    /***** Read the font colour *****/
  
    ptr = 0;
    do
    {
      error_trap(_swix(OS_BGet, _IN(1)|_OUT(0), filehandle, &byte), 0);
      buffer[ptr++] = byte;
    } while (byte != 10 && ptr < 255);
  
    if (byte == 10)
    {
      buffer[ptr - 1] = 0;
      chosen_colour = atoi(buffer);
    }
  
    /***** Read the message speed *****/
  
    ptr = 0;
    do
    {
      error_trap(_swix(OS_BGet, _IN(1)|_OUT(0), filehandle, &byte), 0);
      buffer[ptr++] = byte;
    } while (byte != 10 && ptr < 255);
  
    if (byte == 10)
    {
      buffer[ptr - 1] = 0;
      chosen_speed = atoi(buffer);
    }
  
    error_trap(_swix(OS_Find, _INR(0,1), OSFind_Close, filehandle), 0);
  }
}


/*-----------------------------------------------------------------------------------------------*/
/*                                          Event handlers                                       */
/*-----------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*
 * toolbox_error                                                             *
 *                                                                           *
 * Handler for errors from toolbox.                                          *
 *---------------------------------------------------------------------------*/

int toolbox_error(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  ToolboxErrorEvent *error_event = (ToolboxErrorEvent *)event;
  _kernel_oserror err;

  strcpy(err.errmess, error_event->errmess);
  err.errnum=error_event->errnum;
  error_trap(&err, 0);

  return 1;
}


/*---------------------------------------------------------------------------*
 * auto_created                                                              *
 *                                                                           *
 * Handler for when the font menu is auto-created                            *
 *---------------------------------------------------------------------------*/

int auto_created(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle)
{
  ToolboxObjectAutoCreatedEvent *block = (ToolboxObjectAutoCreatedEvent *) event_block;
  int colour_block[3];

  if (!strcmp(block->template_name, "FontMenu"))
  {
    error_trap(event_register_toolbox_handler(id_block->self_id, FontMenu_Selection, font_selected, NULL), 0);
  }

  if (!strcmp(block->template_name, "ColourDbox"))
  {
    error_trap(event_register_toolbox_handler(id_block->self_id, ColourDbox_ColourSelected, colour_selected, NULL), 0);

    colourdbox_handle = id_block->self_id;

    colour_block[0] = chosen_colour;
    colour_block[1] = 0; /* No extension data */
    colourdbox_set_colour(0, colourdbox_handle, (int *) colour_block);
  }

  return 1;
}

/*---------------------------------------------------------------------------*
 * colour_selected                                                           *
 *                                                                           *
 * Handler for when a colour is chosen from the dialogue box                 *
 *---------------------------------------------------------------------------*/

static int colour_selected(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle)
{
  ColourDboxColourSelectedEvent *block = (ColourDboxColourSelectedEvent *) event_block;
  char *colours;

  colours = (char *) block->colour_block;

  chosen_colour = ((int) colours[3] << 24) | ((int) colours[2] << 16) | ((int) colours[1] << 8);

  button_set_flags(0, main_window, 0x17, 0, 0);

  return 1;
}

/*---------------------------------------------------------------------------*
 * font_selected                                                             *
 *                                                                           *
 * Handler for when a font is chosen from the menu                           *
 *---------------------------------------------------------------------------*/

static int font_selected(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle)
{
  char name[256], bar[2];
  char *name_ptr, *slant_bar;
  FontMenuSelectionEvent *block = (FontMenuSelectionEvent *) event_block;

  strcpy(name, block->font_id);
  name_ptr = name + 2;
  bar[0] = 92;
  bar[1] = 0;
  slant_bar = strstr(name_ptr, bar);
  if (slant_bar)
    slant_bar[0] = 0;

  strcpy(chosen_font, name_ptr);
  displayfield_set_value(0, main_window, 0xb, chosen_font);

  return 1;
}


/*---------------------------------------------------------------------------*
 * action_selected                                                           *
 *                                                                           *
 * Handler for when action buttons are clicked on.                           *
 *---------------------------------------------------------------------------*/

int action_selected(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle)
{
  ActionButtonSelectedEvent *block = (ActionButtonSelectedEvent *) event_block;
  int icon = id_block->self_component;

  switch (icon)
  {
    case SetButton:
      save_choices();

      if ((block->hdr.flags & 7) == 0)
        program_exit();      /* Return pressed */

      if (block->hdr.flags & 4)
        program_exit();      /* Left button */
    break;

    case CancelButton:
      if ((block->hdr.flags & 7) == 0)
        program_exit();      /* Escape pressed */

      if (block->hdr.flags & 1)
        set_default_choices(); /* Right button */

      if (block->hdr.flags & 4)
        program_exit();      /* Left button */
    break;
        
    case DefaultButton:
      set_default_choices();
    break;
  }

  return 1;
}


/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/
 
int message_quit(WimpMessage *event, void *handler)
{
  program_exit();
    
  return 1;
}


/*---------------------------------------------------------------------------*
 * close_window                                                              *
 *                                                                           *
 * Called when user has clicked on close icon of window.                     *
 *---------------------------------------------------------------------------*/

int close_window(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  program_exit();
    
  return 1;
}


/*-----------------------------------------------------------------------------------------------*/
/*                               Program startup & polling loop                                  */
/*-----------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*
 * open_configure_window                                                     *
 *                                                                           *
 * Called to open the configure window on screen and register handlers.      *
 *---------------------------------------------------------------------------*/

static void open_configure_window(int at_x, int at_y)
{
  BBox  bbox;
  int   screenx, screeny;
  int   buffer[2];

  /* Create window */
  error_trap(toolbox_create_object(0, "Window", &main_window), 1);

  /* Register handlers for the configure window */
  error_trap(event_register_toolbox_handler(-1,Toolbox_Error,toolbox_error,NULL) ,0);
  error_trap(event_register_toolbox_handler(-1, Toolbox_ObjectAutoCreated, auto_created, NULL), 0);

  error_trap(event_register_wimp_handler(main_window, Wimp_ECloseWindow, close_window, NULL), 0);
  error_trap(event_register_wimp_handler(main_window, Wimp_ERedrawWindow, redraw, NULL), 1);
  error_trap(event_register_toolbox_handler(main_window, ActionButton_Selected, action_selected, NULL), 0);

  /* Work out positioning (unless it was supplied in the command line) */
  if ((at_x==-1) && (at_y==-1))
  {
    error_trap(read_screensize(&screenx, &screeny), 0);
    error_trap(window_get_extent(0, main_window, &bbox), 0);
    at_y = screeny - ((screeny+bbox.ymin)/2);
    at_x = (screenx - bbox.xmax)/2;
  }

  displayfield_set_value(0, main_window, 0xb, chosen_font);
  writablefield_set_value(0, main_window, 0x9, chosen_message);
  slider_set_value(0, main_window, 0x14, chosen_speed);
  numberrange_set_value(0, main_window, 0x11, chosen_size);

  /* Show the window */
  buffer[0] = at_x;
  buffer[1] = at_y;
  error_trap(toolbox_show_object(0, main_window, 2, buffer, 0, 0), 0);

}


/*---------------------------------------------------------------------------*
 * redraw                                                                    *
 *                                                                           *
 * Handle redraw events - do nothing!                                        *
 *---------------------------------------------------------------------------*/

static int redraw(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  WimpGetWindowStateBlock state;
  WimpRedrawWindowBlock block;
  int more;
  BBox bbox, draw_in;

  state.window_handle = event->redraw_window_request.window_handle;
  block.window_handle = event->redraw_window_request.window_handle;

  wimp_get_window_state(&state);

  gadget_get_bbox(0, main_window, 0x17, &bbox);
  draw_in.xmin = state.visible_area.xmin + bbox.xmin;
  draw_in.ymin = state.visible_area.ymax + bbox.ymin;
  draw_in.xmax = state.visible_area.xmin + bbox.xmax - 4;
  draw_in.ymax = state.visible_area.ymax + bbox.ymax - 4;

  wimp_redraw_window(&block, &more);

  while (more)
  {
    set_colour(chosen_colour);
    _swix(OS_Plot, _INR(0,2), 100, draw_in.xmin, draw_in.ymin);
    _swix(OS_Plot, _INR(0,2), 101, draw_in.xmax, draw_in.ymax);

    wimp_get_rectangle(&block, &more);
  }
  
  return 1;
}


/*---------------------------------------------------------------------------*
 * set_colour                                                                *
 *                                                                           *
 * Sets the colour from a palette entry                                      *
 *---------------------------------------------------------------------------*/

static void set_colour(int palent)
{
  int colnum;

  _swix(ColourTrans_ReturnColourNumber, _IN(0)|_OUT(0), palent, &colnum);

  _swix(OS_SetColour, _INR(0,1), 0, colnum);
}


/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *                                                                           *
 * Initialise toolbox etc.                                                   *
 *                                                                           *
 * In: Nothing.                                                              *
 *                                                                           *
 * Returns: 1 if everything went okay, 0 otherwise                           *
 *---------------------------------------------------------------------------*/

static int main_initialise(void)
{
  static int mess_wanted[] = {Wimp_MQuit,
                              0};
  static int tbox_wanted[] = {Toolbox_Error,
                              Toolbox_ObjectAutoCreated,
                              ActionButton_Selected,
                              FontMenu_Selection,
                              ColourDbox_ColourSelected,
                              0};
                              
  error_trap(toolbox_initialise(0, 310, mess_wanted, tbox_wanted,
                                "<SvrSetup$Dir>", &messages_desc, &idb,
                                0, &task_handle, 0) ,1);
  error_trap(event_initialise(&idb), 0);
  error_trap(event_set_mask(Mask_NoNullEvents), 0);
  error_trap(event_register_message_handler(Wimp_MQuit, (WimpMessageHandler *) message_quit, NULL), 0);

  read_choices(); /* Read in the saved choices */

  return 1;
}


/*---------------------------------------------------------------------------*
 * main                                                                      *
 *                                                                           *
 * Main polling loop                                                         *
 *---------------------------------------------------------------------------*/

int main(int argc, char *argv[])
{
  WimpPollBlock wpb;
  int           event_code;
  int           openat_x=-1;
  int           openat_y=-1;

  /* Have we been passed any co-ordinates to open at? */
  if ((argc>=4) && (strcmp(argv[1], "-openat")==0))
  {
    openat_x = atoi(argv[2]);
    openat_y = atoi(argv[3]);
  }

  if (!main_initialise()) return 0;
  
  open_configure_window(openat_x, openat_y);

  while (!quit)
    error_trap(event_poll(&event_code, &wpb, NULL), 0);
  
  return 0;
}         

@


1.3
log
@Fix to not fail to open the settings plugin.
In version 0.06 some RMEnsures were added but these refer to non
existant versions of the toolbox modules, hence giving "ColourDBox has
active clients" type errors. RMEnsures changed to those that were
pertinent around 1998 when this plugin was written.
Version number in messages file hand cranked.
Fixed to read choices from Choices: not Choices$Write.
Error boxes no longer hve "PhotoQV" in their title bar.
Tested briefly, config file is written to the right place, and read back
successfully.

Version 0.08. Tagged as 'Scrolling-0_08'
@
text
@d26 5
a35 1

d39 3
a41 2
#define VersionString     "1.01 (17-Jun-03)"
#define TaskName          "Screensaver setup"
a46 1

d61 1
a61 1
static void read_choices(int type);
d81 1
a81 1
        wimp_report_error(err, 0, TaskName, 0, 0, 0);
d112 4
a115 4
    e = _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &xeig);
    e = _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &yeig);
    e = _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 11, &xpix);
    e = _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 12, &ypix);
d133 1
a133 1
  int read, filehandle, exist;
d143 15
a157 24
  error_trap(_swix(OS_File, _INR(0,1)|_OUT(0), 17, "<Choices$Write>.ScrSavers", &exist), 1);

  if (exist == 0)
    {
    error_trap(_swix(OS_File, _INR(0,1), 8, "<Choices$Write>.ScrSavers"), 1);
    exist = 2;
    }

  if (exist == 2)
  {
    error_trap(_swix(OS_Find, _INR(0,1)|_OUT(0), 0x8c, "<Choices$Write>.ScrSavers.Scrolling", &filehandle), 0);
    error_trap(_swix(OS_GBPB, _INR(0,4), 2, filehandle, chosen_font, strlen(chosen_font), -1), 0);
    error_trap(_swix(OS_BPut, _INR(0,1), 10, filehandle), 0);
    error_trap(_swix(OS_GBPB, _INR(0,4), 2, filehandle, chosen_message, strlen(chosen_message), -1), 0);
    error_trap(_swix(OS_BPut, _INR(0,1), 10, filehandle), 0);
    sprintf(out, "%d", chosen_size);
    error_trap(_swix(OS_GBPB, _INR(0,4), 2, filehandle, out, strlen(out), -1), 0);
    error_trap(_swix(OS_BPut, _INR(0,1), 10, filehandle), 0);
    sprintf(out, "%d", chosen_colour);
    error_trap(_swix(OS_GBPB, _INR(0,4), 2, filehandle, out, strlen(out), -1), 0);
    error_trap(_swix(OS_BPut, _INR(0,1), 10, filehandle), 0);
    sprintf(out, "%d", chosen_speed);
    error_trap(_swix(OS_GBPB, _INR(0,4), 2, filehandle, out, strlen(out), -1), 0);
    error_trap(_swix(OS_BPut, _INR(0,1), 10, filehandle), 0);
d159 2
a160 3
    error_trap(_swix(OS_Find, _INR(0,1), 0, filehandle), 0);
    _swix(OS_CLI, _IN(0), "Settype <Choices$Write>.ScrSavers.Scrolling FFF");
  }
d174 6
a179 1
  read_choices(0);  /* Read the default values in */
d199 1
a199 1
static void read_choices(int type)
d202 1
a202 1
  int read, filehandle, ptr, byte, exists;
d204 6
a209 4
  if (type == 0)
    strcpy(buffer, "<SvrSetup$Dir>.Default");
  else
    strcpy(buffer, "Choices:ScrSavers.Scrolling");
d211 1
a211 1
  _swix(OS_File, _INR(0,1)|_OUT(0), 17, buffer, &exists);
d213 1
a213 1
  if (exists)
d215 4
a218 4
    error_trap(_swix(OS_Find, _INR(0,1)|_OUT(0), 0xcc, buffer, &filehandle), 1);

/***** Read the font name *****/

d223 1
a223 3
      buffer[ptr] = byte;

      ptr ++;
d225 1
a225 1

d231 3
a233 5
    else
      strcpy(chosen_font, "Homerton.Bold");

/***** Read the message *****/

d238 1
a238 3
      buffer[ptr] = byte;

      ptr ++;
d240 1
a240 1

d246 3
a248 5
    else
      strcpy(chosen_message, "Screen saver");

/***** Read the font size *****/

d253 1
a253 3
      buffer[ptr] = byte;

      ptr ++;
d255 1
a255 1

d261 3
a263 5
    else
      chosen_size = 50;

/***** Read the font colour *****/

d268 1
a268 3
      buffer[ptr] = byte;

      ptr ++;
d270 1
a270 1

d276 3
a278 5
    else
      chosen_colour = 0xffffff00;

/***** Read the message speed *****/

d283 1
a283 3
      buffer[ptr] = byte;

      ptr ++;
d285 1
a285 1

d291 2
a292 20
    else
      chosen_speed = 50;

    error_trap(_swix(OS_Find, _INR(0,1), 0, filehandle), 0);
  }
  else
  {
    /* File probably doesn't exist so make up some defaults */

    if (type != 0)
    {
      strcpy(chosen_font, "Homerton.Bold");
      strcpy(chosen_message, "Screen saver");
      chosen_size = 50;
      chosen_colour = 0xffffff00;
      chosen_speed = 50;

      set_default_choices(); /* Set default choices calls read_choices so this has an
                                'if' around it to prevent feedback */
    }
d314 1
a314 1
  wimp_report_error(&err, 0, "Screensaver", 0, 0, 0);
d425 1
a425 1
        read_choices(1);     /* Right button */
d600 1
a600 1
  read_choices(1); /* Read in the saved choices */
d620 1
a620 1
  if (strcmp(argv[1], "-openat")==0)
@


1.2
log
@This screensaver was somewhat unfinished and would blow up with a
postmortem at various points,as would its settings program.
Tidied settings dialogue.
Made the colour picker work.
Got rid of the unused variables/warnings.
Made its representation of colour numbers consisten (chosen_colour).
Settings filetype is now text.
Fantastic - it works now.

Version 0.04. Tagged as 'Scrolling-0_04'
@
text
@a204 3
  _swix(OS_ReadVarVal, _INR(0,4)|_OUT(2), "Choices$Write", buffer, 255, 0, 0, &read);
  buffer[read] = 0;

d208 1
a208 1
    strcat(buffer, ".ScrSavers.Scrolling");
d349 1
a349 1
  wimp_report_error(&err, 0, "PhotoQV", 0, 0, 0);
@


1.1
log
@Initial revision
@
text
@d35 2
a36 2
#define VersionString     "1.00 (25-Feb-98)"
#define TaskName          "Screen saver settings"
d142 1
d144 2
d164 2
a165 2
    error_trap(_swix(OS_Find, _INR(0,1)|_OUT(0), 0, filehandle), 0);
    _swix(OS_CLI, _IN(0), "Settype <Choices$Write>.ScrSavers.Scrolling Data");
d185 1
a185 1
  sprintf(out, "&%.6x", chosen_colour);
d293 1
a293 1
      chosen_colour = 16777215;
d314 1
a314 1
    error_trap(_swix(OS_Find, _INR(0,1)|_OUT(0), 0, filehandle), 0);
d318 1
a318 1
    /* File probably doesn't exist so read in defaults */
d328 2
a329 1
      set_default_choices();
d367 1
a367 1
  char colour_block[12];
a379 5
    //colour_block[0] = 0;
    //colour_block[1] = chosen_colour & 0x0000ff;
    //colour_block[2] = (chosen_colour & 0x00ff00) >> 8;
    //colour_block[3] = (chosen_colour & 0xff0000) >> 16;

d381 1
a381 1
    colour_block[4] = 0;
a396 1
  char out[256];
d401 1
a401 1
  chosen_colour = ((int) colours[3] << 16) | ((int) colours[2] << 8) | ((int) colours[1]);
a520 1
  char  out[256];
d551 1
a566 1
  char out[256];
d583 1
a583 1
    set_colour(chosen_colour << 8);
@


1.1.1.1
log
@Initial import of 'Scrolling' screensaver.
@
text
@@
