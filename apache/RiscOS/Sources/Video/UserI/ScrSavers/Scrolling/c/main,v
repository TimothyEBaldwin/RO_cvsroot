head	1.4;
access;
symbols
	Scrolling-0_09:1.4
	Scrolling-0_08:1.3
	Scrolling-0_07:1.2
	Scrolling-0_06:1.2
	Scrolling-0_05:1.2
	Scrolling-0_04:1.2
	Scrolling-0_01:1.1.1.1
	Scrolling-0_03:1.1.1.1
	bavison_Scrolling-0_01:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2015.06.28.22.45.13;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	6ZYUpFL0ydSewfry;

1.3
date	2012.02.11.09.25.34;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	9LLdWXiNHTKaJISv;

1.2
date	2003.06.18.15.50.09;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	98.09.23.14.28.45;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.23.14.28.45;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Numerous screensaver/setup improvements
Simplified reading/writing of choices, and error handling therein.
Set 'Cancel' as the escape action button so the setup window closes when Escape is pressed.
Other admin changes:
* Makefiles recreated from fragments
* Version number now auto inserted from VersionNum
* Messages and common code "saver.c" sync'd with other screensaver/setup apps
* Removed never used info from setup app messages, ensuring they're never out of date by deleting them
* Removed non internationalised "Screensave setup" from error box titles
* Load settings from Choices: write settings through <Choices$Write>
* Fix null pointer dereference when -openat switch has too few arguments
* Symbolic names used instead of magic numbers where possible
Tested on RISC OS 4.02.

Version 0.09. Tagged as 'Scrolling-0_09'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*---------------------------------------------------------------------------*/
/* File:    c.main                                                           */
/* Purpose: Scrolling message screen saver.                                  */
/* Author:  Mark Moir                                                        */
/* History: 14-Nov-97: RML: Shell created.                                   */
/*          24-Feb-98: MM : Scrolling message version.                       */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "Global/OsBytes.h"
#include "Global/Sprite.h"
#include "Global/VduExt.h"
#include "Interface/HighFSI.h"

#include "wimp.h"
#include "wimplib.h"
#include "swis.h"
#include "toolbox.h"
#include "event.h"
#include "window.h"

#include "main.h"
#include "saver.h"

static MessagesFD messages_desc;
static IdBlock    idb;
static int        task_handle;
static int        window_toolbox_id;
static int        window_wimp_handle;
static int        screenw, screenh, screensize, pixmag;
static int        fonthandle;
static int        delay_start, delay_length = 5;
static int        x_pos, mem_needed, start_time_lapsed, start_time_start;
static int        xeig, yeig, xpixels, ypixels, message_width;
static int        *sprites;
static int        save_area[2000];
static int        chosen_colour, chosen_size, chosen_speed;
static char       chosen_font[256], chosen_message[256];
static int        saver_initialised = 0;

#define SettingsRO   "Choices:ScrSavers.Scrolling"

static int check_time(void);
static void scroll_message(void);
static void set_up_font(char *fontname, int backcol, int forecol, int size);
static void display_text(char *text, int x, int y);
static void set_colour(int palent);

/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

void program_exit(void)
{
  if (sprites)
    free(sprites);

  _swix(OS_Byte, _INR(0,1), OsByte_SelectPointer, 1);
  _swix(OS_SetVarVal, _INR(0,4), "ScrSaver$Running", 0, -1, 0, 0);

  exit(0);
}


/*---------------------------------------------------------------------------*
 * error_trap                                                                *
 *                                                                           *
 * Wrap around a function to report an error if one occurred eg.:            *
 *  error_trap(event_initialise(&idb), 0);                                   *
 *                                                                           *
 * In: err - a kernel_oserror block                                          *
 *     type - 0 means non-fatal, otherwise program will exit after reporting *
 *---------------------------------------------------------------------------*/

void error_trap(_kernel_oserror *err, int err_type)
{
  /* Report the appropriate error, has one occured */
  if (err != NULL)
  {
    wimp_report_error(err, 0, "Screensaver", 0, 0, 0);

    /* Now, if it was a fatal error (type != 0), exit at once */
    if (err_type != 0) exit(0);
  }
}


/*---------------------------------------------------------------------------*
 * rnd                                                                       *
 *                                                                           *
 * Generate a random number between 1 and n.                                 *
 *---------------------------------------------------------------------------*/

int rnd(int n)
{
  return (int) ( ((float)rand()/(float)RAND_MAX) *n)+1;
}


/*---------------------------------------------------------------------------*
 * set_random_seed                                                           *
 *                                                                           *
 * Reset the random number seed to a value dependent on the monotonic timer. *
 *---------------------------------------------------------------------------*/

void set_random_seed(void)
{
  int time;
  
  _swix(OS_ReadMonotonicTime, _OUT(0), &time);
  srand(time);
}


/*---------------------------------------------------------------------------*
 * read_choices                                                              *
 *                                                                           *
 * Read the current settings.                                                 *
 *---------------------------------------------------------------------------*/

static void read_choices(void)
{
  char buffer[256];
  int  filehandle, ptr, byte, type;

  /* Make up some defaults */
  strcpy(chosen_font, "Homerton.Bold");
  strcpy(chosen_message, "Screen saver");
  chosen_size = 50;
  chosen_colour = (int)0xffffff00;
  chosen_speed = 50;

  _swix(OS_File, _INR(0,1)|_OUT(0), OSFile_ReadNoPath, SettingsRO, &type);

  if (type==object_file)
  {
    error_trap(_swix(OS_Find, _INR(0,1)|_OUT(0), 0xcc, SettingsRO, &filehandle), 1);
  
    /***** Read the font name *****/
  
    ptr = 0;
    do
    {
      error_trap(_swix(OS_BGet, _IN(1)|_OUT(0), filehandle, &byte), 0);
      buffer[ptr++] = byte;
    } while (byte != 10 && ptr < 255);
  
    if (byte == 10)
    {
      buffer[ptr - 1] = 0;
      strcpy(chosen_font, buffer);
    }
  
    /***** Read the message *****/
  
    ptr = 0;
    do
    {
      error_trap(_swix(OS_BGet, _IN(1)|_OUT(0), filehandle, &byte), 0);
      buffer[ptr++] = byte;
    } while (byte != 10 && ptr < 255);
  
    if (byte == 10)
    {
      buffer[ptr - 1] = 0;
      strcpy(chosen_message, buffer);
    }
  
    /***** Read the font size *****/
  
    ptr = 0;
    do
    {
      error_trap(_swix(OS_BGet, _IN(1)|_OUT(0), filehandle, &byte), 0);
      buffer[ptr++] = byte;
    } while (byte != 10 && ptr < 255);
  
    if (byte == 10)
    {
      buffer[ptr - 1] = 0;
      chosen_size = atoi(buffer);
    }
  
    /***** Read the font colour *****/
  
    ptr = 0;
    do
    {
      error_trap(_swix(OS_BGet, _IN(1)|_OUT(0), filehandle, &byte), 0);
      buffer[ptr++] = byte;
    } while (byte != 10 && ptr < 255);
  
    if (byte == 10)
    {
      buffer[ptr - 1] = 0;
      chosen_colour = atoi(buffer);
    }
  
    /***** Read the message speed *****/
  
    ptr = 0;
    do
    {
      error_trap(_swix(OS_BGet, _IN(1)|_OUT(0), filehandle, &byte), 0);
      buffer[ptr++] = byte;
    } while (byte != 10 && ptr < 255);
  
    if (byte == 10)
    {
      buffer[ptr - 1] = 0;
      chosen_speed = atoi(buffer);
    }
  
    error_trap(_swix(OS_Find, _INR(0,1), OSFind_Close, filehandle), 0);
  }

  set_up_font(chosen_font, 0, chosen_colour, chosen_size);

  _swix(Font_StringWidth, _INR(0,5)|_OUT(2), 0, chosen_message, 1000000, 1000000, -1, 256, &message_width);

  message_width = message_width / 400;

  delay_length = 10 - (chosen_speed / 10);
}


/*---------------------------------------------------------------------------*
 * null_event                                                                *
 *                                                                           *
 * Null event handler - we do all our animation etc. here.                   *
 *---------------------------------------------------------------------------*/

int null_event(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{

  if (!saver_initialised)
  {
      error_trap(event_set_mask(Wimp_Poll_PollWord), 0);
      saver_initialised = 1;
  }

  if (check_time())
  {
    scroll_message();
  }

  return 1;
}


/*---------------------------------------------------------------------------*
 * scroll_message                                                            *
 *                                                                           *
 * Scrolls the message along                                                 *
 *---------------------------------------------------------------------------*/

static void scroll_message(void)
{
  int r1, r2, r3;

  set_up_font(chosen_font, 0x00000000, chosen_colour, chosen_size);

  x_pos -= 8;
  if (x_pos < -(message_width + 50))
    x_pos = screenw;

  save_area[0] = 0;
  error_trap(_swix(OS_SpriteOp, _INR(0,3)|_OUTR(1,3), 256 + SpriteReason_SwitchOutputToSprite, sprites, "screen", save_area, &r1, &r2, &r3), 0);

  set_colour(0x000000);
  _swix(OS_Plot, _INR(0,2), 100, 0, 0);
  _swix(OS_Plot, _INR(0,2), 101, screenw, screenh);

  display_text(chosen_message, x_pos, (chosen_size << yeig) / 2);

  error_trap(_swix(OS_SpriteOp, _INR(0,3), 256 + SpriteReason_SwitchOutputToSprite, r1, r2, r3), 0);

  saver_write_bank();

  error_trap(_swix(OS_SpriteOp, _INR(0,5), 256 + SpriteReason_PutSpriteUserCoords, sprites, "screen", 0, (screenh / 2) - (chosen_size << yeig), 0), 0);

  saver_read_bank();
}


/*---------------------------------------------------------------------------*
 * set_colour                                                                *
 *                                                                           *
 * Sets the colour from a palette entry                                      *
 *---------------------------------------------------------------------------*/

static void set_colour(int palent)
{
  int colnum;

  _swix(ColourTrans_ReturnColourNumber, _IN(0)|_OUT(0), palent, &colnum);

  _swix(OS_SetColour, _INR(0,1), 0, colnum);
}

/*---------------------------------------------------------------------------*
 * set_up_font                                                               *
 *                                                                           *
 * Sets up the given font and font colours etc.                              *
 *---------------------------------------------------------------------------*/

static void set_up_font(char *fontname, int backcol, int forecol, int size)
{
  _swix(Font_FindFont, _INR(1,5)|_OUT(0), fontname, size*16,  size*16, 0, 0, &fonthandle);

  if (fonthandle)
  {
    _swix(ColourTrans_SetFontColours, _INR(0,3), 0, backcol, forecol, 14);
  }
  else
  {
    _swix(Font_FindFont, _INR(1,5)|_OUT(0), "Homerton.Bold", size*16,  size*16, 0, 0, &fonthandle);
  }
}

/*---------------------------------------------------------------------------*
 * display_text                                                              *
 *                                                                           *
 * Displays text at the given coordinates                                    *
 *---------------------------------------------------------------------------*/

static void display_text(char *text, int x, int y)
{
  _swix(Font_Paint, _INR(0,4), 0, text, 16, x, y);
}

/*---------------------------------------------------------------------------*
 * check_time                                                                *
 *                                                                           *
 * Decides whether the next frame of animation should be displayed (makes    *
 * the code independant of processor speed.
 *---------------------------------------------------------------------------*/

static int check_time(void)
{
  int timenow;

  _swix(OS_ReadMonotonicTime, _OUT(0), &timenow);

  if ((timenow - delay_start) > delay_length)
  {
    delay_start = timenow;

    return(1);
  }
  else
    return(0);
}


/*---------------------------------------------------------------------------*
 * redraw                                                                    *
 *                                                                           *
 * Handle redraw events - do nothing!                                        *
 *---------------------------------------------------------------------------*/

int redraw(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  WimpRedrawWindowBlock block;
  int more;
  
  wimp_update_window(&block, &more);

  while (more)
  {
    wimp_get_rectangle(&block, &more);
  }
  
  return 1;
}


/*---------------------------------------------------------------------------*
 * gain_pointer                                                              *
 *                                                                           *
 * Pointer has entered my window - turn it off!                              *
 *---------------------------------------------------------------------------*/

int gain_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  _swix(OS_Byte, _INR(0,1), OsByte_SelectPointer, 0);

  return 1;
}


/*---------------------------------------------------------------------------*
 * lose_pointer                                                              *
 *                                                                           *
 * Pointer has left my window - switch it back on again!                     *
 *---------------------------------------------------------------------------*/

int lose_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  _swix(OS_Byte, _INR(0,1), OsByte_SelectPointer, 1);

  return 1;
}


/*---------------------------------------------------------------------------*
 * pollword                                                                  *
 *                                                                           *
 * Handle pollword non-zero events                                           *
 *---------------------------------------------------------------------------*/

int pollword(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  program_exit();
    
  return 1;
}


/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/
 
int message_quit(WimpMessage *event, void *handler)
{
  program_exit();
  
  return 1;
}


/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *                                                                           *
 * Initialise the toolbox, work out the screensize, load and decompress the  *
 * sprites, open the window.                                                 *
 *                                                                           *
 * Globals: screenw, screenh, window_toolbox_id, window_wimp_handle,         *
 *          task_handle                                                      *
 *---------------------------------------------------------------------------*/

static int main_initialise(void)
{
  WimpOpenWindowBlock win;
  static int messages_wanted[] = {Wimp_MQuit, 0};
  static int tbox_wanted[] = {0};
  BBox       extent;
  int        show[2];

  /* Initialise and register event handlers */
  error_trap(toolbox_initialise(0, 310, messages_wanted, tbox_wanted,
                                "<BlankTask$Dir>", &messages_desc, &idb,
                                0, &task_handle, 0), 1);
  error_trap(event_initialise(&idb), 1);

  error_trap(event_set_mask(Wimp_Poll_PollWord +
                          Wimp_Poll_PollWordHighPriority), 0);

  error_trap(event_register_message_handler(Wimp_MQuit, (WimpMessageHandler *) message_quit, NULL), 1);
  error_trap(event_register_wimp_handler(-1, Wimp_ENull, null_event, NULL), 1);
  error_trap(event_register_wimp_handler(-1, Wimp_ERedrawWindow, redraw, NULL), 1);

  error_trap(event_register_wimp_handler(-1, Wimp_EPollWordNonZero, pollword, NULL), 0);
  error_trap(event_register_wimp_handler(-1, Wimp_EPointerEnteringWindow, gain_pointer, NULL), 0);
  error_trap(event_register_wimp_handler(-1, Wimp_EPointerLeavingWindow, lose_pointer, NULL), 0);

  /* Find screen size */
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, VduExt_XEigFactor, &xeig), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, VduExt_YEigFactor, &yeig), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, VduExt_XWindLimit, &xpixels), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, VduExt_YWindLimit, &ypixels), 1);
  screenw = xpixels << xeig;
  screenh = ypixels << yeig;

  /* Set the extent of the 'covering' window. */
  extent.xmin = 0;
  extent.xmax = screenw;
  extent.ymin = 0;
  extent.ymax = screenh;
  show[0] = 0;
  show[1] = screenh;
  error_trap(toolbox_create_object(0, "Window", &window_toolbox_id), 1);
  error_trap(window_set_extent(0, window_toolbox_id, &extent), 1);
  error_trap(window_get_wimp_handle(0, window_toolbox_id, &window_wimp_handle), 1);

  /* Open the covering window */
  win.window_handle=window_wimp_handle;
  win.visible_area.xmin = 0;
  win.visible_area.xmax = screenw;
  win.visible_area.ymin = 0;
  win.visible_area.ymax = screenh;
  win.xscroll = 0;
  win.yscroll = 0;
  win.behind= - 1;
  error_trap(wimp_open_window(&win), 1);

  saver_decide_double_buffering();

  x_pos = screenw;

  read_choices();

  _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, VduExt_ScreenSize, &screensize);
  pixmag = screensize / xpixels / ypixels;

  mem_needed = ((xpixels * ((chosen_size << yeig) * 2)) * pixmag) + 2048;

  do
  {
    sprites = malloc(mem_needed);
    if (sprites)
    {
      sprites[0] = mem_needed;
      sprites[2] = 16;
      _swix(OS_SpriteOp, _INR(0,1), 256 + SpriteReason_ClearSprites, sprites);

      _swix(OS_SpriteOp, _INR(0,7), 256 + SpriteReason_GetSpriteUserCoords, sprites, "screen", 0, 0, 0, screenw, (chosen_size << yeig) * 2);
    }
    else
    {
      chosen_size -= (chosen_size / 10);
    }
  } while (!sprites);

  _swix(OS_ReadMonotonicTime, _OUT(0), &delay_start);


  return 1;
}


/*---------------------------------------------------------------------------*
 * main                                                                      *
 *---------------------------------------------------------------------------*/

int main(int argc, char **argv)
{
  WimpPollBlock wpb;
  int           event_code;
  int *poll_word_location = 0;

  if (argc > 1)
    poll_word_location = (int *) atoi(argv[1]);

  if (!poll_word_location)
    program_exit();

  start_time_lapsed = 0;
  _swix(OS_ReadMonotonicTime, _OUT(0), &start_time_start);

  if (!main_initialise())
    program_exit();

  while (1)
  {
    error_trap(event_poll(&event_code, &wpb, poll_word_location), 0);
  }

  return 0;
}
@


1.3
log
@Fix to not fail to open the settings plugin.
In version 0.06 some RMEnsures were added but these refer to non
existant versions of the toolbox modules, hence giving "ColourDBox has
active clients" type errors. RMEnsures changed to those that were
pertinent around 1998 when this plugin was written.
Version number in messages file hand cranked.
Fixed to read choices from Choices: not Choices$Write.
Error boxes no longer hve "PhotoQV" in their title bar.
Tested briefly, config file is written to the right place, and read back
successfully.

Version 0.08. Tagged as 'Scrolling-0_08'
@
text
@d26 6
a34 1
#include "wimplib.h"
d58 2
d77 1
a77 1
  _swix(OS_Byte, _INR(0,1), 106, 1);
d99 1
a99 1
    wimp_report_error(err, 0, "Screen Blanker", 0, 0, 0);
d143 1
a143 1
  int read, filehandle, ptr, byte, exists;
d145 6
a150 1
  strcpy(buffer, "Choices:ScrSavers.Scrolling");
d152 1
a152 1
  _swix(OS_File, _INR(0,1)|_OUT(0), 17, buffer, &exists);
d154 1
a154 1
  if (exists)
d156 4
a159 4
    error_trap(_swix(OS_Find, _INR(0,1)|_OUT(0), 0xcc, buffer, &filehandle), 1);

/***** Read the font name *****/

d164 1
a164 3
      buffer[ptr] = byte;

      ptr ++;
d166 1
a166 1

d172 3
a174 5
    else
      strcpy(chosen_font, "Homerton.Bold");

/***** Read the message *****/

d179 1
a179 3
      buffer[ptr] = byte;

      ptr ++;
d181 1
a181 1

d187 3
a189 5
    else
      strcpy(chosen_message, "Screen saver");

/***** Read the font size *****/

d194 1
a194 3
      buffer[ptr] = byte;

      ptr ++;
d196 1
a196 1

d202 3
a204 5
    else
      chosen_size = 50;

/***** Read the font colour *****/

d209 1
a209 3
      buffer[ptr] = byte;

      ptr ++;
d211 1
a211 1

d217 3
a219 5
    else
      chosen_colour = 0xffffff00;

/***** Read the message speed *****/

d224 1
a224 3
      buffer[ptr] = byte;

      ptr ++;
d226 1
a226 1

d232 2
a233 14
    else
      chosen_speed = 50;

    error_trap(_swix(OS_Find, _INR(0,1), 0, filehandle), 0);
  }
  else
  {
    /* File probably doesn't exist so make up some defaults */

    strcpy(chosen_font, "Homerton.Bold");
    strcpy(chosen_message, "Screen saver");
    chosen_size = 50;
    chosen_colour = 0xffffff00;
    chosen_speed = 50;
a238 1
  //_swix(Font_ScanString, _INR(0,7)|_OUT(3), 0, chosen_message, 0, 0, 0, 0, 0, 0, &message_width);
d287 1
a287 1
  error_trap(_swix(OS_SpriteOp, _INR(0,3)|_OUTR(1,3), 256 + 60, sprites, "screen", save_area, &r1, &r2, &r3), 0);
d295 1
a295 1
  error_trap(_swix(OS_SpriteOp, _INR(0,3), 256 + 60, r1, r2, r3), 0);
d297 1
a297 1
saver_write_bank();
d299 1
a299 1
  error_trap(_swix(OS_SpriteOp, _INR(0,5), 256 + 34, sprites, "screen", 0, (screenh / 2) - (chosen_size << yeig), 0), 0);
d301 1
a301 1
saver_read_bank();
d405 1
a405 1
  _swix(OS_Byte, _INR(0,1), 106, 0);
d419 1
a419 1
  _swix(OS_Byte, _INR(0,1), 106, 1);
d489 4
a492 4
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &xeig), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &yeig), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 11, &xpixels), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 12, &ypixels), 1);
d518 1
a518 1
saver_decide_double_buffering();
d524 1
a524 1
  _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 7, &screensize);
d536 1
a536 1
      _swix(OS_SpriteOp, _INR(0,1), 256 + 9, sprites);
d538 1
a538 1
      _swix(OS_SpriteOp, _INR(0,7), 256 + 16, sprites, "screen", 0, 0, 0, screenw, (chosen_size << yeig) * 2);
@


1.2
log
@This screensaver was somewhat unfinished and would blow up with a
postmortem at various points,as would its settings program.
Tidied settings dialogue.
Made the colour picker work.
Got rid of the unused variables/warnings.
Made its representation of colour numbers consisten (chosen_colour).
Settings filetype is now text.
Fantastic - it works now.

Version 0.04. Tagged as 'Scrolling-0_04'
@
text
@d138 1
a138 4
  _swix(OS_ReadVarVal, _INR(0,4)|_OUT(2), "Choices$Write", buffer, 255, 0, 0, &read);
  buffer[read] = 0;

  strcat(buffer, ".ScrSavers.Scrolling");
@


1.1
log
@Initial revision
@
text
@a14 3

//#define DEVELOP 1

d45 1
a45 1
static int        x_pos, font_size, mem_needed, start_time_lapsed, start_time_start;
d223 1
a223 1
      chosen_colour = 16777215;
d244 1
a244 1
    error_trap(_swix(OS_Find, _INR(0,1)|_OUT(0), 0, filehandle), 0);
d248 1
a248 1
    /* File probably doesn't exist so read in defaults */
d253 1
a253 1
    chosen_colour = 0xffffff;
a256 2
  chosen_colour = (chosen_colour << 8);

a275 1
  int start_time_now;
a300 1
  char out[256];
a369 2
  int width, height;

a491 2
  int        len, timenow;
  char       temp[256];
@


1.1.1.1
log
@Initial import of 'Scrolling' screensaver.
@
text
@@
