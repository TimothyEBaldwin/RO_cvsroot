head	1.2;
access;
symbols
	Pogo-0_04:1.2
	Pogo-0_03:1.1.1.1
	Pogo-0_01:1.1.1.1
	Pogo-0_02:1.1.1.1
	bavison_Pogo-0_01:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.06.28.22.37.41;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	nFvCt7t1pfAFtfry;

1.1
date	98.09.23.14.27.49;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.23.14.27.49;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Numerous screensaver/setup improvements
Reworked the sprite plotting to not leave a trail of flickering pogo stick animation on the screen, this was caused by confusion about OS units mostly and writing into the wrong screen bank.
Replaced the squash code with some that's sensible - this now uses a squash file exactly as output by !Squash rather than a homebrew format. The screensaver app was also supplied with both the squashed and not squashed versions of the sprite just for extra comedy.
Changed to using common functions in "saver.c" rather than local ones.
There's no setup app for this saver as there's nothing to configure.
Other admin changes:
* Makefiles recreated from fragments
* Version number now auto inserted from VersionNum
* Messages and common code "saver.c" sync'd with other screensaver/setup apps
* Removed references to Filer Configure from RMEnsure error messages
* Fix null pointer dereference when -openat switch has too few arguments
* Symbolic names used instead of magic numbers where possible
Tested on RISC OS 4.02.

Version 0.04. Tagged as 'Pogo-0_04'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

#include "Global/FileTypes.h"
#include "Global/Sprite.h"
#include "Interface/HighFSI.h"

#include "main.h"

static _kernel_oserror *squash_alloc_fail(void)
{
    /* Global 'out of memory' message lookup */
    return _swix(MessageTrans_ErrorLookup, _INR(0,2), "    NoMem", 0, 0);
}

_kernel_oserror *squash_decompress_file(const char *fname)
{
    _kernel_oserror *err;
    int fhandle, object, type;
    int input_size, work_size;
    int header[5];
    char *input, *workspace;
  
    /* Get info, want a sprite or a squash file */
    err = _swix(OS_File, _INR(0,1)|_OUT(0)|_OUT(4)|_OUT(6),
                OSFile_ReadWithType, fname,
                &object, &input_size, &type);
    if (err != NULL) return err;
    if (object != object_file) type = -1;
  
    switch (type)
    {
      case FileType_Sprite:
          /* Uncompressed sprite */
          sprites = malloc(input_size + SpriteAreaCBsize);
          if (sprites == NULL) return squash_alloc_fail();
          *(int *)(saEnd    + (int)sprites) = input_size + SpriteAreaCBsize;
          *(int *)(saNumber + (int)sprites) = 0;
          *(int *)(saFirst  + (int)sprites) = saExten;
          *(int *)(saFree   + (int)sprites) = saExten;
          return _swix(OS_SpriteOp, _INR(0,2), 256 + SpriteReason_LoadSpriteFile, sprites, fname);
  
      case FileType_Squash:
          /* Squashed one */
          err = _swix(OS_Find, _INR(0,1)|_OUT(0),
                      open_read | open_mustopen | open_nodir, fname,
                      &fhandle);
          if (err != NULL) return err;
    
          /* Pre-read the header to see how big the original sprites were */
          header[1] = 0;
          err = _swix(OS_GBPB, _INR(0,3), OSGBPB_ReadFromPTR, fhandle, header, sizeof(header));
          _swix(OS_Find, _INR(0,1), OSFind_Close, fhandle);
          if (err != NULL) return err;
          err = _swix(Squash_Decompress, _INR(0,1)|_OUT(0), 1<<3, -1, &work_size);
          if (err != NULL) return err;
          sprites = malloc(header[1] + SpriteAreaCBsize);
          input = malloc(input_size);
          workspace = malloc(work_size);
          if ((sprites == NULL) || (input == NULL) || (workspace == NULL))
          {
              free(sprites);
              free(input);
              free(workspace);
              return squash_alloc_fail();
          }
    
          /* If there's enough memory for the output sprites, there must be enough for the
           * input compressed version too, so just load the whole lot in one.
           */
          err = _swix(OS_File, _INR(0,3), OSFile_Load, fname, input, 0);
          if (err == NULL)
          {
              *(int *)(saEnd + (int)sprites) = header[1] + SpriteAreaCBsize;
              err = _swix(Squash_Decompress, _INR(0,5), 1<<2, workspace,
                          &input[sizeof(header)], input_size - sizeof(header),
                          sprites + 1, header[1] + SpriteAreaCBsize - sizeof(int));
          }
          free(input);
          free(workspace);
          if (err != NULL) free(sprites);
          return err;
  
      default:
          /* Dunno */
          return _swix(OS_File, _INR(0,2), OSFile_MakeError, fname, object);
    }
}
@


1.1
log
@Initial revision
@
text
@d19 1
d21 3
a23 3
#include "kernel.h"
#include "swis.h"
//#include "os.h"
d27 1
a27 10
#define XSquash_Compress    0x62700
#define XSquash_Decompress  0x62701

static int work_size, area_size, out_size;
static int *out, *out_ptr, *work, *work_ptr;

static int open_file(char *filename, int flag);
static int close_file(int file_handle);

void squash_compress_to_file(char *fname)
d29 2
a30 73
  _kernel_swi_regs r, p;
  _kernel_oserror *err;
  int fhandle, bytes_compressed, seq_ptr;
  char size_buff[256];

  _swix(OS_SpriteOp, _INR(0,1)|_OUT(2), 256 + 8, sprites, &area_size);

  _swix(Squash_Compress, _INR(0,1)|_OUT(0), 8, -1, &work_size);
  _swix(Squash_Compress, _INR(0,1)|_OUT(1), 8, -1, &out_size);

  work = malloc(work_size);

  out = malloc(out_size + 1000);  /* Assume output is as big as the input */

  if (out)
  {
    seq_ptr = 0;

    out_ptr = out;

    fhandle = open_file(fname, 1);

    memset(out, 0, 50);

    out[0] = area_size;

    _swix(OS_GBPB, _INR(0,4), 1, fhandle, out, 20, seq_ptr);

    seq_ptr += 20;

    if (fhandle)
    {
      r.r[0] = 0;
      r.r[1] = (int) work;
      r.r[2] = (int) sprites;
      r.r[3] = (int) area_size;
      do
      {
        r.r[4] = (int) out;
        r.r[5] = out_size;
        err = _kernel_swi(XSquash_Compress, &r, &r);

        if (!err)
        {
          bytes_compressed = r.r[4] - (int) out;

          p.r[0] = 1;
          p.r[1] = fhandle;
          p.r[2] = (int) out;
          p.r[3] = bytes_compressed;
          p.r[4] = seq_ptr;
          err = _kernel_swi(OS_GBPB, &p, &p);

          if (err)
            printf("Error = %s\n", err->errmess);

          seq_ptr += bytes_compressed;

          r.r[0] = 1;
        }
      }
      while (r.r[3]);

      close_file(fhandle);

      free(out_ptr);
      free(work);
    }
    else
      printf("Output file couldn't be found");
  }
  else
    printf("Workspace couldn't be allocated");
d33 1
a33 1
void squash_decompress_file(char *fname)
d35 14
a48 27
  _kernel_swi_regs r, p;
  _kernel_oserror *err;
  int fhandle, input_size;
  int size_buff[256];
  char *input, *input_ptr;

  fhandle = open_file(fname, 0);

  _swix(OS_GBPB, _INR(0,4), 3, fhandle, size_buff, 255, 0);

  sprites = malloc(size_buff[0]);

  _swix(OS_File, _INR(0,3)|_OUT(4), 17, fname, 0, 0, &input_size);
  input_size += 1000;

  input = malloc(input_size);

  if (input)
  {
    input_ptr = input;

    _swix(Squash_Compress, _INR(0,1)|_OUT(0), 8, -1, &work_size);
    work_size += 1000;

    work = malloc(work_size);

    if (work)
d50 54
a103 18
      _swix(OS_GBPB, _INR(0,4), 3, fhandle, input, input_size, 0);

      input += 20;

      r.r[0] = 0;
      r.r[1] = (int) work;
      r.r[2] = (int) input;
      r.r[3] = input_size - 20;
      r.r[4] = (int) sprites;
      r.r[5] = size_buff[0];
      err = _kernel_swi(0x062701, &r, &r);

      //if (err)
        //printf("Error (3) = %s\n", err->errmess);

      close_file(fhandle);

      free(work);
a104 31
    else
      printf("Work area buffer not allocated");

    free(input_ptr);
  }
  else
    printf("Input buffer not allocated");
}

static int open_file(char *filename, int flag)
{
  int        file_handle =-1;
  _kernel_swi_regs r;
  _kernel_oserror *err;

  if (flag)
    _swix(OS_Find, _INR(0,2)|_OUT(0), 0x87, filename, 0, &file_handle);
  else
    _swix(OS_Find, _INR(0,2)|_OUT(0), 0xc7, filename, 0, &file_handle);

  return (file_handle);
}

static int close_file(int file_handle)
{
  _kernel_swi_regs r;
  _kernel_oserror *err;

  _swix(OS_Find, _INR(0,1), 0, file_handle);

  return(1);
@


1.1.1.1
log
@Initial import of 'Pogo' screensaver.
@
text
@@
