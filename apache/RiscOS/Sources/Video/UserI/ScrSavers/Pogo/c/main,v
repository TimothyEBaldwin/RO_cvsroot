head	1.2;
access;
symbols
	Pogo-0_04:1.2
	Pogo-0_03:1.1.1.1
	Pogo-0_01:1.1.1.1
	Pogo-0_02:1.1.1.1
	bavison_Pogo-0_01:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.06.28.22.37.41;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	nFvCt7t1pfAFtfry;

1.1
date	98.09.23.14.27.49;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.23.14.27.49;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Numerous screensaver/setup improvements
Reworked the sprite plotting to not leave a trail of flickering pogo stick animation on the screen, this was caused by confusion about OS units mostly and writing into the wrong screen bank.
Replaced the squash code with some that's sensible - this now uses a squash file exactly as output by !Squash rather than a homebrew format. The screensaver app was also supplied with both the squashed and not squashed versions of the sprite just for extra comedy.
Changed to using common functions in "saver.c" rather than local ones.
There's no setup app for this saver as there's nothing to configure.
Other admin changes:
* Makefiles recreated from fragments
* Version number now auto inserted from VersionNum
* Messages and common code "saver.c" sync'd with other screensaver/setup apps
* Removed references to Filer Configure from RMEnsure error messages
* Fix null pointer dereference when -openat switch has too few arguments
* Symbolic names used instead of magic numbers where possible
Tested on RISC OS 4.02.

Version 0.04. Tagged as 'Pogo-0_04'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*---------------------------------------------------------------------------*/
/* File:    c.main                                                           */
/* Purpose: Pogo stick screen saver.                                         */
/* Author:  Mark Moir                                                        */
/* History: 14-Nov-97: RML: Shell created.                                   */
/*          20-Feb-98: MM : Pogo stick version.                              */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "Global/OsBytes.h"
#include "Global/Sprite.h"
#include "Global/VduExt.h"

#include "wimp.h"
#include "wimplib.h"
#include "swis.h"
#include "toolbox.h"
#include "event.h"
#include "window.h"

#include "main.h"
#include "squash.h"
#include "saver.h"

#define POGO_SQUASH_FLAG        10000 /* Hit the ground, the spring is squashed */
#define COORDS_MAX              (sizeof(coords) / sizeof(coords[0]))
#define COORD_GAIN_X            2
#define COORD_GAIN_Y            3

static MessagesFD messages_desc;
static IdBlock    idb;
static int        screenw, screenh;
static int        xeig, yeig;
static int        spr_height, spr_width;
typedef struct    { int x, y; } coord_t;
static coord_t    coords[] = { { 0,5+POGO_SQUASH_FLAG }, { 0,19+POGO_SQUASH_FLAG },
                               { 1,33 }, { 1,48 },
                               { 2,62 }, { 2,75 } , { 2,85 },
                               { 3,93 }, { 3,99 },
                               { 4,103 }, { 4,106 },
                               { 5,107 }, { 5,106 },
                               { 4,103 }, { 4,99 },
                               { 3,93 }, { 3,85 },
                               { 2,75 }, { 2,62 }, { 2,48 },
                               { 1,33 },
                               { 0,19+POGO_SQUASH_FLAG }, { 0,5+POGO_SQUASH_FLAG }
                             };
static int        x_pos, y_pos, c_pos, x_calc, last_x, last_y;
static int        delay_start, delay_length;
static enum       { LEFT_TO_RIGHT, RIGHT_TO_LEFT } animation;
static int        saver_initialised = 0;
int              *sprites = 0;

static int check_time(void);
static void unplot_sprite(int x, int y);
static void plot_sprite(int x, int y, const char *name);
static void pogo_stick_animation(void);
static void set_up_starts(void);

/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

void program_exit(void)
{
    saver_exit();
    exit(0);
}


/*---------------------------------------------------------------------------*
 * null_event                                                                *
 *                                                                           *
 * Null event handler - we do all our animation etc. here.                   *
 *---------------------------------------------------------------------------*/

int null_event(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    if (!saver_initialised)
    {
        saver_error_trap(event_set_mask(Wimp_Poll_PollWord), 0);
        saver_initialised = 1;
    }
  
    if (check_time())
    {
        pogo_stick_animation();
    }
  
    return 1;
}


/*---------------------------------------------------------------------------*
 * pogo_stick_animation                                                      *
 *                                                                           *
 * Displays the frames of animation at the current position                  *
 *---------------------------------------------------------------------------*/

static void pogo_stick_animation(void)
{
    int temp_x, temp_y;
  
    if (animation == LEFT_TO_RIGHT)
    {
        /* Calculate the new coordinates from current position */
        x_calc += (coords[c_pos].x * COORD_GAIN_X);
        temp_x = x_calc;
        temp_y = y_pos + (coords[c_pos].y * COORD_GAIN_Y);
    
        saver_write_bank();
        unplot_sprite(last_x, last_y);

        /* Check the y coordinate to see if we want to use the squashed bottom of the
           pogo stick rather than the extended one.  Simple way of flagging the sprite to
           use */
        if (temp_y >= POGO_SQUASH_FLAG)
        {
            temp_y -= (COORD_GAIN_Y * POGO_SQUASH_FLAG);
            plot_sprite(temp_x, temp_y, "rights");
        }
        else
        {
            plot_sprite(temp_x, temp_y, "right");
        }
        saver_read_bank();

        c_pos++;
        if (c_pos >= COORDS_MAX)
        {
            x_pos = temp_x;
            x_calc = x_pos;
            if (x_pos > screenw)
            {
                animation = RIGHT_TO_LEFT;
                set_up_starts();
                if (y_pos > screenh)
                  y_pos = saver_rnd(screenh) / 2;
            }
            c_pos = 0;
        }
    }
    else
    {
        /* Calculate the new coordinates from current position */
        x_calc -= (coords[c_pos].x * COORD_GAIN_X);
        temp_x = x_calc;
        temp_y = y_pos + (coords[c_pos].y * COORD_GAIN_Y);

        saver_write_bank();
        unplot_sprite(last_x, last_y);
    
        /* Check the y coordinate to see if we want to use the squashed bottom of the
           pogo stick rather than the extended one.  Simple way of flagging the sprite to
           use */
        if (temp_y >= POGO_SQUASH_FLAG)
        {
            temp_y -= (COORD_GAIN_Y * POGO_SQUASH_FLAG);
            plot_sprite(temp_x, temp_y, "lefts");
        }
        else
        {
            plot_sprite(temp_x, temp_y, "left");
        }
        saver_read_bank();
    
        c_pos--;
        if (c_pos < 0)
        {
            x_pos = temp_x;
            x_calc = x_pos;
            if (x_pos < -200)
            {
                animation = LEFT_TO_RIGHT;
                set_up_starts();
                if (y_pos > screenh)
                  y_pos = saver_rnd(screenh) / 2;
            }
            c_pos = COORDS_MAX - 1;
        }
    }

    /* Keep the last plot point so it can be unplotted. Strictly speaking this describes
     * where to unplot the one in the other bank, but the movement is small enough that
     * this is near enough.
     */
    last_x = temp_x;
    last_y = temp_y;
}


/*---------------------------------------------------------------------------*
 * unplot_sprite                                                             *
 *                                                                           *
 * Plots a black rectangle where the last pogo was drawn                     *
 *---------------------------------------------------------------------------*/

static void unplot_sprite(int x, int y)
{
    /* Pick black */
    _swix(ColourTrans_SetGCOL, _IN(0)|_IN(3)|_IN(4), 0, 0, 0);

    /* Rectangle fill */
    _swix(OS_Plot, _INR(0,2), OSPlot_Move,          x, y);
    _swix(OS_Plot, _INR(0,2), OSPlot_RectangleFill, spr_width, spr_height);
}


/*---------------------------------------------------------------------------*
 * plot_sprite                                                               *
 *                                                                           *
 * Plots sprite in any mode (correct colours etc.)                           *
 *---------------------------------------------------------------------------*/

static void plot_sprite(int x, int y, const char *name)
{
    char        pal[256];
    int         scale[16];
    int         log, sprtype = 0x100;
    int         mode, mask;
  
    _swix(OS_SpriteOp, _INR(0,2)|_OUTR(5,6), 256 + SpriteReason_ReadSpriteSize,
          sprites, name, &mask, &mode);
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, VduExt_NColour, &log);
  
    if (log > 15)
    {
        _swix(Wimp_ReadPixTrans, _INR(0,2)|_INR(6,7), sprtype, sprites, name, scale, pal);
        _swix(ColourTrans_SelectTable, _INR(0,5), mode, -1, -1, -1, pal, 0);
    }
    else
    {
        _swix(Wimp_ReadPixTrans, _INR(0,2)|_INR(6,7), sprtype, sprites, name, scale, pal);
    }
  
    _swix(OS_SpriteOp, _INR(0,7), 256 + SpriteReason_PutSpriteScaled,
          sprites, name, x, y, mask ? 8 : 0, scale, pal);
}


/*---------------------------------------------------------------------------*
 * check_time                                                                *
 *                                                                           *
 * Decides whether the next frame of animation should be displayed (makes    *
 * the code independant of processor speed.                                  *
 *---------------------------------------------------------------------------*/

static int check_time(void)
{
    int timenow;
  
    _swix(OS_ReadMonotonicTime, _OUT(0), &timenow);
  
    if ((timenow - delay_start) > delay_length)
    {
        delay_start = timenow;
    
        return(1);
    }
    return(0);
}


/*---------------------------------------------------------------------------*
 * redraw                                                                    *
 *                                                                           *
 * Handle redraw events - do nothing!                                        *
 *---------------------------------------------------------------------------*/

int redraw(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    WimpRedrawWindowBlock block;
    int more;
    
    wimp_update_window(&block, &more);
  
    while (more)
    {
        wimp_get_rectangle(&block, &more);
    }
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * gain_pointer                                                              *
 *                                                                           *
 * Pointer has entered my window - turn it off!                              *
 *---------------------------------------------------------------------------*/

int gain_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    saver_hide_pointer();

    return 1;
}


/*---------------------------------------------------------------------------*
 * lose_pointer                                                              *
 *                                                                           *
 * Pointer has left my window - switch it back on again!                     *
 *---------------------------------------------------------------------------*/

int lose_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    saver_show_pointer();

    return 1;
}


/*---------------------------------------------------------------------------*
 * pollword                                                                  *
 *                                                                           *
 * Handle pollword non-zero events                                           *
 *---------------------------------------------------------------------------*/

int pollword(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    program_exit();
      
    return 1;
}

/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/
 
int message_quit(WimpMessage *event, void *handler)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * set_up_starts                                                             *
 *                                                                           *
 * Sets up the variables for each animation                                  *
 *---------------------------------------------------------------------------*/
 
static void set_up_starts(void)
{
    int spr_xeig, spr_yeig, mode;

    if (animation == LEFT_TO_RIGHT)
    {
        _swix(OS_SpriteOp, _INR(0,2)|_OUTR(3,4)|_OUT(6), 256 + SpriteReason_ReadSpriteSize,
              sprites, "right", &spr_width, &spr_height, &mode);
        _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, VduExt_XEigFactor, &spr_xeig);
        _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, VduExt_YEigFactor, &spr_yeig);
        spr_width = spr_width << spr_xeig;
        spr_height = spr_height << spr_yeig;     /* Keep in OS units */

        x_pos = -spr_width;                      /* Start off screen */
        c_pos = 0;
        x_calc = x_pos;
        delay_length = 5;                        /* Delay between frames (centi-seconds) */
    }
  
    if (animation == RIGHT_TO_LEFT)
    {
        _swix(OS_SpriteOp, _INR(0,2)|_OUTR(3,4)|_OUT(6), 256 + SpriteReason_ReadSpriteSize,
              sprites, "left", &spr_width, &spr_height, &mode);
        _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, VduExt_XEigFactor, &spr_xeig);
        _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, VduExt_YEigFactor, &spr_yeig);
        spr_width = spr_width << spr_xeig;
        spr_height = spr_height << spr_yeig;     /* Keep in OS units */

        x_pos = screenw;
        c_pos = COORDS_MAX - 1;
        x_calc = x_pos;
        delay_length = 5;                        /* Delay between frames (centi-seconds) */
    }
  
    _swix(OS_ReadMonotonicTime, _OUT(0), &delay_start);
}

/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *                                                                           *
 * Initialise the toolbox, work out the screensize, load and decompress the  *
 * sprites, open the window.                                                 *
 *                                                                           *
 * Globals: screenw, screenh, window_toolbox_id, window_wimp_handle,         *
 *          task_handle                                                      *
 *---------------------------------------------------------------------------*/

static int main_initialise(void)
{
    int task_handle;
    int main_window;

    /* Initialise toolbox */
    saver_error_trap(toolbox_initialise(0, 310, 0, 0, "<BlankTask$Dir>", &messages_desc, &idb,
                                  0, &task_handle, 0), 1);
    saver_error_trap(event_initialise(&idb), 0);
    saver_error_trap(event_set_mask(Wimp_Poll_PollWord +
                                    Wimp_Poll_PollWordHighPriority), 0);    

    /* Register event handlers */
    saver_error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_ENull, null_event, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_ERedrawWindow, redraw, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPollWordNonZero, pollword, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPointerEnteringWindow, gain_pointer, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPointerLeavingWindow, lose_pointer, NULL), 0);

    /* Open the covering window */
    saver_read_screensize(&screenw, &screenh, &xeig, &yeig);
    saver_error_trap(toolbox_create_object(0, "Window", &main_window), 1);
    saver_open_covering_window(main_window);

    saver_error_trap(squash_decompress_file("<BlankTask$Dir>.Frames"), 1);

    saver_decide_double_buffering();

    saver_set_rnd_seed();
    y_pos = last_y = saver_rnd(screenh) / 2;
    animation = LEFT_TO_RIGHT; /* Animation type: pogo stick left-to-right or pogo stick right-to-left */
  
    set_up_starts();
  
    return 1;
}


/*---------------------------------------------------------------------------*
 * main                                                                      *
 *                                                                           *
 * Main polling loop.                                                        *
 *---------------------------------------------------------------------------*/

int main(int argc, char **argv)
{
    WimpPollBlock  wpb;
    int            event_code;
    int           *pollword = NULL;

    if (argc>1) pollword = (int*) atoi(argv[1]);
    if (!pollword) program_exit();
    if (!main_initialise()) program_exit();
  
    while (1)
    {
        saver_error_trap(event_poll(&event_code, &wpb, pollword), 0);
    }
  
    return 0;
}
@


1.1
log
@Initial revision
@
text
@a15 2
//#define DEVELOP 1

d27 5
a34 1
#include "wimplib.h"
d43 5
a49 3
static int        task_handle;
static int        window_toolbox_id;
static int        window_wimp_handle;
d51 16
a66 5
static int        coords[60] = {0,10005, 0,10019, 1,33, 1,48, 2,62, 2,75, 2,85, 3,93, 3,99, 4,103, 4,106, 5,107,
                                5,106, 4,103, 4,99, 3,93, 3,85, 2,75, 2,62, 2,48, 1,33, 0,10019/*, 0,10005*/};
static int        coords_max = 42;
static int        x_pos, y_pos, c_pos, x_calc;
static int        temp_x, temp_y;
d68 1
a68 2
static int        pogo_non_squash_height;
static int        animation;
d70 1
a70 2

int               *sprites = 0;
d73 3
a75 2
static void plot_sprite(int x, int y, char *name);
static void pogo_stick_animation(int type);
d86 2
a87 57
  if (sprites)
    free(sprites);

  _swix(OS_Byte, _INR(0,1), 106, 1);
  _swix(OS_SetVarVal, _INR(0,4), "ScrSaver$Running", 0, -1, 0, 0);

  exit(0);
}


/*---------------------------------------------------------------------------*
 * error_trap                                                                *
 *                                                                           *
 * Wrap around a function to report an error if one occurred eg.:            *
 *  error_trap(event_initialise(&idb), 0);                                   *
 *                                                                           *
 * In: err - a kernel_oserror block                                          *
 *     type - 0 means non-fatal, otherwise program will exit after reporting *
 *---------------------------------------------------------------------------*/

void error_trap(_kernel_oserror *err, int err_type)
{
  /* Report the appropriate error, has one occured */
  if (err != NULL)
  {
    wimp_report_error(err, 0, "Screen Blanker", 0, 0, 0);

    /* Now, if it was a fatal error (type != 0), exit at once */
    if (err_type != 0) exit(0);
  }
}


/*---------------------------------------------------------------------------*
 * rnd                                                                       *
 *                                                                           *
 * Generate a random number between 1 and n.                                 *
 *---------------------------------------------------------------------------*/

int rnd(int n)
{
  return (int) ( ((float)rand()/(float)RAND_MAX) *n)+1;
}


/*---------------------------------------------------------------------------*
 * set_random_seed                                                           *
 *                                                                           *
 * Reset the random number seed to a value dependent on the monotonic timer. *
 *---------------------------------------------------------------------------*/

void set_random_seed(void)
{
  int time;
  
  _swix(OS_ReadMonotonicTime, _OUT(0), &time);
  srand(time);
d99 12
a110 16
  if (!saver_initialised)
  {
      error_trap(event_set_mask(Wimp_Poll_PollWord), 0);
      saver_initialised = 1;
  }

  if (check_time())
  {
    if (animation == 1)
      pogo_stick_animation(1);

    if (animation == 2)
      pogo_stick_animation(2);
  }

  return 1;
d120 1
a120 1
static void pogo_stick_animation(int type)
d122 3
a124 14
  int squash_height;

  if (animation == 1)
  {
    /* Calculate the new coordinates from current position */
    x_calc += (coords[c_pos] * 2);
    temp_x = x_calc;
    temp_y = y_pos + (coords[c_pos + 1] * 3);

    /* If the y coordinate is over 9999 then we want to use the squashed bottom of the
       pogo stick rather than the extended one.  Simple way of flagging the sprite to
       use */

    if (temp_y > 9999)
d126 7
a132 1
      temp_y -= 30000;
d134 28
a161 1
      plot_sprite(temp_x, temp_y, "rights");
d165 4
a168 2
      plot_sprite(temp_x, temp_y, "right");
    }
d170 31
a200 16
    c_pos += 2;

    if (c_pos > coords_max)
    {
      x_pos = temp_x;
      x_calc = x_pos;

      if (x_pos > screenw)
      {
        animation = 2;
        set_up_starts();
        if (y_pos > screenh)
          y_pos = rnd(screenh) / 2;
      }

      c_pos = 0;
a201 7
  }
  else
  {
    /* Calculate the new coordinates from current position */
    x_calc -= (coords[c_pos] * 2);
    temp_x = x_calc;
    temp_y = y_pos + (coords[c_pos + 1] * 3);
d203 7
a209 3
    /* If the y coordinate is over 9999 then we want to use the squashed bottom of the
       pogo stick rather than the extended one.  Simple way of flagging the sprite to
       use */
a210 3
    if (temp_y > 9999)
    {
      temp_y -= 30000;
d212 5
a216 1
      plot_sprite(temp_x, temp_y, "lefts");
d218 4
a221 20
      //_swix(OS_ReadMonotonicTime, _OUT(0), &delay_start); /* Double delay for squashed bottom of pogo stick */
    }
    else
    {
      plot_sprite(temp_x, temp_y, "left");
    }

    c_pos -= 2;

    if (c_pos < 0)
    {
      x_pos = temp_x;
      x_calc = x_pos;
      if (x_pos < -200)
      {
        animation = 1;
        set_up_starts();
        if (y_pos > screenh)
          y_pos = rnd(screenh) / 2;
      }
d223 3
a225 3
      c_pos = coords_max;
    }
  }
d235 1
a235 1
static void plot_sprite(int x, int y, char *name)
d237 21
a257 26
  char        pal[256];
  int         scale[16];
  int         log, sprtype = 0x100;
  int         mode, mask;

  _swix(OS_SpriteOp, _INR(0,2)|_OUT(6), 256+40, sprites, name, &mode);
  _swix(OS_SpriteOp, _INR(0,2)|_OUT(5), 256+40, sprites, name, &mask);

  _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, 3, &log);

saver_write_bank();

  if (log > 15)
  {
    _swix(Wimp_ReadPixTrans, _INR(0,7), sprtype, sprites, name, 0, 0, 0, scale, pal);
    _swix(ColourTrans_SelectTable, _INR(0,5), mode, -1, -1, -1, pal);
  }
  else
    _swix(Wimp_ReadPixTrans, _INR(0,7), sprtype, sprites, name, 0, 0, 0, scale, pal);

  if (mask)
    _swix(OS_SpriteOp, _INR(0,7), 256 + 52, sprites, name, x, y, 8, scale, pal);
  else
    _swix(OS_SpriteOp, _INR(0,7), 256 + 52, sprites, name, x, y, 0, scale, pal);

saver_read_bank();
d265 1
a265 1
 * the code independant of processor speed.
d270 10
a279 11
  int timenow;

  _swix(OS_ReadMonotonicTime, _OUT(0), &timenow);

  if ((timenow - delay_start) > delay_length)
  {
    delay_start = timenow;

    return(1);
  }
  else
d292 4
a295 2
  WimpRedrawWindowBlock block;
  int more;
d297 6
a302 8
  wimp_update_window(&block, &more);

  while (more)
  {
    wimp_get_rectangle(&block, &more);
  }
  
  return 1;
d314 1
a314 1
  _swix(OS_Byte, _INR(0,1), 106, 0);
d316 1
a316 1
  return 1;
d328 1
a328 1
  _swix(OS_Byte, _INR(0,1), 106, 1);
d330 1
a330 1
  return 1;
d342 3
a344 3
  program_exit();
    
  return 1;
d355 3
a357 3
  program_exit();
  
  return 1;
d369 1
a369 1
  int        spr_height, spr_width;
d371 31
a401 25
  if (animation == 1)
  {
    _swix(OS_SpriteOp, _INR(0,2)|_OUT(3), 256+40, sprites, "right", &spr_width);
    _swix(OS_SpriteOp, _INR(0,2)|_OUT(4), 256+40, sprites, "right", &spr_height);
    _swix(OS_SpriteOp, _INR(0,2)|_OUT(4), 256+40, sprites, "rights", &pogo_non_squash_height);

    x_pos = -(spr_width * 2);                /* Start off screen */
    c_pos = 0;
    x_calc = x_pos;
    delay_length = 5;                        /* Delay between frames (centi-seconds) */
  }

  if (animation == 2)
  {
    _swix(OS_SpriteOp, _INR(0,2)|_OUT(3), 256+40, sprites, "left", &spr_width);
    _swix(OS_SpriteOp, _INR(0,2)|_OUT(4), 256+40, sprites, "left", &spr_height);
    _swix(OS_SpriteOp, _INR(0,2)|_OUT(4), 256+40, sprites, "lefts", &pogo_non_squash_height);

    x_pos = screenw;
    c_pos = coords_max;
    x_calc = x_pos;
    delay_length = 5;                        /* Delay between frames (centi-seconds) */
  }

  _swix(OS_ReadMonotonicTime, _OUT(0), &delay_start);
d416 2
a417 68
  WimpOpenWindowBlock win;
  static int messages_wanted[] = {Wimp_MQuit, 0};
  static int tbox_wanted[] = {0};
  BBox       extent;
  int        show[2];
  int        xeig, yeig, xpixels, ypixels, len, spr_height, spr_width;

  /* Initialise and register event handlers */
  error_trap(toolbox_initialise(0, 310, messages_wanted, tbox_wanted,
                                "<BlankTask$Dir>", &messages_desc, &idb,
                                0, &task_handle, 0), 1);
  error_trap(event_initialise(&idb), 1);

  error_trap(event_set_mask(Wimp_Poll_PollWord +
                          Wimp_Poll_PollWordHighPriority), 0);

  error_trap(event_register_message_handler(Wimp_MQuit, (WimpMessageHandler *) message_quit, NULL), 1);
  error_trap(event_register_wimp_handler(-1, Wimp_ENull, null_event, NULL), 1);
  error_trap(event_register_wimp_handler(-1, Wimp_ERedrawWindow, redraw, NULL), 1);

  error_trap(event_register_wimp_handler(-1, Wimp_EPollWordNonZero, pollword, NULL), 0);
  error_trap(event_register_wimp_handler(-1, Wimp_EPointerEnteringWindow, gain_pointer, NULL), 0);
  error_trap(event_register_wimp_handler(-1, Wimp_EPointerLeavingWindow, lose_pointer, NULL), 0);


  /* Find screen size */
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &xeig), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &yeig), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 11, &xpixels), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 12, &ypixels), 1);
  screenw = xpixels << xeig;
  screenh = ypixels << yeig;

  /* Set the extent of the 'covering' window. */
  extent.xmin = 0;
  extent.xmax = screenw;
  extent.ymin = 0;
  extent.ymax = screenh;
  show[0] = 0;
  show[1] = screenh;
  error_trap(toolbox_create_object(0, "Window", &window_toolbox_id), 1);
  error_trap(window_set_extent(0, window_toolbox_id, &extent), 1);
  error_trap(window_get_wimp_handle(0, window_toolbox_id, &window_wimp_handle), 1);

  /* Open the covering window */
  win.window_handle=window_wimp_handle;
  win.visible_area.xmin = 0;
  win.visible_area.xmax = screenw;
  win.visible_area.ymin = 0;
  win.visible_area.ymax = screenh;
  win.xscroll = 0;
  win.yscroll = 0;
  win.behind= - 1;
  error_trap(wimp_open_window(&win), 1);

saver_decide_double_buffering();

#if0
  error_trap(_swix(OS_File, _INR(0,1)|_OUT(4), 13, "<BlankTask$Dir>.Sprites22", &len), 1);

  len += 4096;
  sprites = malloc(len);

  if (sprites)
  {
    sprites[0] = len;
    sprites[2] = 16;
    _swix(OS_SpriteOp, _INR(0,1), 256+9, sprites);
d419 31
a449 25
    error_trap(_swix(OS_SpriteOp, _INR(0,2), 256+10, sprites, "<BlankTask$Dir>.Sprites22"), 1);

    _swix(OS_SpriteOp, _INR(0,2)|_OUT(3), 256+40, sprites, "pogoright", &spr_width);
    _swix(OS_SpriteOp, _INR(0,2)|_OUT(4), 256+40, sprites, "pogoright", &spr_height);

    _swix(OS_SpriteOp, _INR(0,2)|_OUT(4), 256+40, sprites, "br", &pogo_non_squash_height);

    squash_compress_to_file("<BlankTask$Dir>.Data");
    program_exit();
  }
  else
    program_exit();
#endif

  squash_decompress_file("<BlankTask$Dir>.Data");

  set_random_seed();
  y_pos = rnd(screenh) / 2;
  animation = 1;                           /* Animation type:
                                                1 = pogo stick left-to-right 
                                                2 = pogo stick right-to-left */

  set_up_starts();

  return 1;
d455 2
d461 14
a474 19
  WimpPollBlock wpb;
  int           event_code;
  int *poll_word_location = 0;

  if (argc > 1)
    poll_word_location = (int *) atoi(argv[1]);

  if (!poll_word_location)
    program_exit();

  if (!main_initialise())
    program_exit();

  while (1)
  {
    error_trap(event_poll(&event_code, &wpb, poll_word_location), 0);
  }

  return 0;
@


1.1.1.1
log
@Initial import of 'Pogo' screensaver.
@
text
@@
