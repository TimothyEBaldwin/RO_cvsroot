head	1.2;
access;
symbols
	Swarm-0_05:1.2
	Swarm-0_04:1.1.1.4
	Swarm-0_03:1.1.1.4
	Swarm-0_02:1.1.1.4
	Ursula_merge:1.1.1.4
	Swarm-0_01:1.1.1.4
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.4
	Ursula_RiscPC:1.1.1.4.0.2
	rthornb_UrsulaBuild-19Aug1998:1.1.1.4
	UrsulaBuild_FinalSoftload:1.1.1.4
	rthornb_UrsulaBuild-12Aug1998:1.1.1.4
	aglover_UrsulaBuild-05Aug1998:1.1.1.4
	rthornb_UrsulaBuild-29Jul1998:1.1.1.4
	rthornb_UrsulaBuild-22Jul1998:1.1.1.4
	rthornb_UrsulaBuild-15Jul1998:1.1.1.4
	rthornb_UrsulaBuild-07Jul1998:1.1.1.4
	rthornb_UrsulaBuild-17Jun1998:1.1.1.4
	rleggett_Swarm-0_01:1.1.1.4
	rthornb_UrsulaBuild-03Jun1998:1.1.1.3
	rthornb_UrsulaBuild-27May1998:1.1.1.2
	rthornb_UrsulaBuild-21May1998:1.1.1.2
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.06.28.22.57.46;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	MIGRDqyNERDvAfry;

1.1
date	98.05.13.12.25.46;	author rleggett;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.05.13.12.25.46;	author rleggett;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.05.19.15.38.00;	author rleggett;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	98.06.01.10.13.47;	author rleggett;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	98.06.17.10.52.59;	author rleggett;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Numerous screensaver/setup improvements
The default swarm speed in the code didn't match the default in the setup app. Additionally, the default was 0, which on modern CPUs is impossibly fast flying for bees - so when using the 'Try' option in the screen setup plugin the result didn't make sense nor match what the dialogue showed.
UK run files moved into UK resources.
Other admin changes:
* Makefiles recreated from fragments
* Version number now auto inserted from VersionNum
* Messages and common code "saver.c" sync'd with other screensaver/setup apps
* Removed references to Filer Configure from RMEnsure error messages
* Removed never used info from setup app messages, ensuring they're never out of date by deleting them
* Removed non internationalised "Screensave setup" from error box titles
* Load settings from Choices: write settings through <Choices$Write>
* Fix null pointer dereference when -openat switch has too few arguments
* Symbolic names used instead of magic numbers where possible
Tested on RISC OS 4.02.

Version 0.05. Tagged as 'Swarm-0_05'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*---------------------------------------------------------------------------*/
/* File:    Swarm.c                                                          */
/* Purpose: Swarming bees screen saver.                                      */
/* Author:  David Brown                                                      */
/* History: 29-Apr-98: DTAB: Created.                                        */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "Global/OsBytes.h"
#include "Global/VduExt.h"
#include "Interface/HighFSI.h"

#include "wimp.h"
#include "wimplib.h"
#include "swis.h"
#include "toolbox.h"
#include "event.h"
#include "window.h"

static MessagesFD    messages_desc;
static IdBlock       idb;
static int           screenw;
static int           screenh;
static int           saver_initialised = 0;

#define SettingsRO   "Choices:ScrSavers.Swarm"
#define BEEACC       3
#define QUEENACC     5
#define BEEMAX       18
#define QUEENMAX     20

typedef struct
{
  int xpos;
  int ypos;
  int oldxpos;
  int oldypos;
  int xdir;
  int ydir;
} bee;

/* Configurable variables */
static unsigned int    delay  = 1;
static unsigned int    nobees = 100;
static unsigned char   near_r = 255;
static unsigned char   near_g = 255;
static unsigned char   near_b = 0;
static unsigned char   far_r  = 255;
static unsigned char   far_g  = 0;
static unsigned char   far_b  = 0;
static unsigned int    queen_col = 0xffffff00;

/* Internal variables */
static bee           * swarm;
static unsigned int    old_time;

/* Colour tables */
static unsigned int    coloursGCOL[9][256]; /* 0-8 for brightness, 0-255 for distance */
static unsigned int    blackGCOL;
static unsigned int    queenGCOL;

/*---------------------------------------------------------------------------*
 * saver_error                                                               *
 *                                                                           *
 * Make an error block from a token.                                         *
 *---------------------------------------------------------------------------*/

_kernel_oserror *saver_error(const char *tok)
{
  static _kernel_oserror e;
  e.errnum=0;
  _swix(MessageTrans_Lookup, _INR(0,3), &messages_desc, tok, &e.errmess, sizeof(e.errmess));

  return &e;
}

/*---------------------------------------------------------------------------*
 * read_settings                                                             *
 *                                                                           *
 * Read the current settings file.                                           *
 *---------------------------------------------------------------------------*/

_kernel_oserror * read_settings(void)
{
  _kernel_oserror * e;
  char              string[256];
  char            * buffer;
  int               buffsize;
  int               messblk[4];
  int               tempcol;
  int               type;

  _swix(OS_File, _INR(0,1)|_OUT(0), OSFile_ReadNoPath, SettingsRO, &type);
  if (type!=object_file) return NULL;

  if ((e = _swix(MessageTrans_FileInfo, _IN(1) | _OUT(2), SettingsRO, &buffsize)) != NULL) return e;
  buffer = malloc(buffsize);
  if (buffer == NULL) return saver_error("NoMem");

  if ((e = _swix(MessageTrans_OpenFile, _INR(0, 2), messblk, SettingsRO, buffer)) != NULL)
  {
    free(buffer);
    return e;
  }
  /* Read bits here */

  if (!_swix(MessageTrans_Lookup, _INR(0, 7), messblk, "NoBees:100", string, 256, 0, 0, 0, 0))
    nobees    = (unsigned int)strtoul(string, NULL, 10);

  if (!_swix(MessageTrans_Lookup, _INR(0, 7), messblk, "QueenColour:0xffffff00", string, 256, 0, 0, 0, 0))
    queen_col = (unsigned int)strtoul(string, NULL, 16);

  if (!_swix(MessageTrans_Lookup, _INR(0, 7), messblk, "NearColour:0x00ffff00", string, 256, 0, 0, 0, 0))
  {
    tempcol   = (unsigned int)strtoul(string, NULL, 16);
    near_r    = (tempcol >> 8) & 0xff;
    near_g    = (tempcol >> 16) & 0xff;
    near_b    = (tempcol >> 24) & 0xff;
  }

  if (!_swix(MessageTrans_Lookup, _INR(0, 7), messblk, "FarColour:0x0000ff00", string, 256, 0, 0, 0, 0))
  {
    tempcol   = (unsigned int)strtoul(string, NULL, 16);
    far_r     = (tempcol >> 8) & 0xff;
    far_g     = (tempcol >> 16) & 0xff;
    far_b     = (tempcol >> 24) & 0xff;
  }

  if (!_swix(MessageTrans_Lookup, _INR(0, 7), messblk, "Delay:1", string, 256, 0, 0, 0, 0))
    delay     = (unsigned int)strtoul(string, NULL, 10);

  e = _swix(MessageTrans_CloseFile, _IN(0), messblk);

  free(buffer);
  return e;
}

/*---------------------------------------------------------------------------*
 * init_saver                                                                *
 *                                                                           *
 * Initialist the screensaver.                                               *
 *---------------------------------------------------------------------------*/

_kernel_oserror * init_saver(void)
{
  _kernel_oserror *e;
  bee * temp;
  int   count, count2;
  unsigned char red, green, blue;

  e = read_settings();
  if (e) return e;

  swarm = malloc(sizeof(bee) * nobees);
  if (swarm == NULL) return saver_error("NoMem");

  temp = swarm;

  for(count = nobees; count; count--)
  {
    temp->xpos = rand() % screenw;
    temp->ypos = rand() % screenh;
    temp->oldxpos = temp->xpos;
    temp->oldypos = temp->ypos;
    temp->xdir = 0;
    temp->ydir = 0;

    temp++;
  }

  /* Create interpolated colour array */
  for(count = 0; count < 256; count++)
  {
    red   = (far_r * count) + near_r * (255 - count) >> 8;
    green = (far_g * count) + near_g * (255 - count) >> 8;
    blue  = (far_b * count) + near_b * (255 - count) >> 8;

    for(count2 = 0; count2 < 9; count2++)
    {
      /* Brightness is currently not used but is provided to allow fading trails behind the bees */
      e = _swix(ColourTrans_ReturnGCOL, _IN(0) | _OUT(0), (((red   * count2) >> 3) << 8)  |
                                                          (((green * count2) >> 3) << 16) |
                                                          (((blue  * count2) >> 3) << 24), &coloursGCOL[count2][count]);

      if (e) return e;
    }
  }

  e = _swix(ColourTrans_ReturnGCOL, _IN(0) | _OUT(0), 0, &blackGCOL);
  if (e) return e;
  e = _swix(ColourTrans_ReturnGCOL, _IN(0) | _OUT(0), queen_col, &queenGCOL);
  if (e) return e;

  return NULL;
}

/*---------------------------------------------------------------------------*
 * call_saver                                                                *
 *                                                                           *
 * Call the screensaver to do an update.                                     *
 *---------------------------------------------------------------------------*/

_kernel_oserror * call_saver(void)
{
  _kernel_oserror *e;
  bee * temp;
  int   count;
  int   dy, dx, distance;
  unsigned int current_time;

  e = _swix(OS_ReadMonotonicTime, _OUT(0), &current_time);
  if (e) return e;

  if (current_time - old_time < delay) return NULL;

  old_time = current_time;

  /* Special case the queen for extra speed */

  e = _swix(ColourTrans_SetColour, _IN(0)|_IN(3)|_IN(4), blackGCOL, 0x80, 0);
  if (e) return e;
  e = _swix(OS_Plot, _INR(0,2), 4, swarm->oldxpos, swarm->oldypos);
  if (e) return e;
  e = _swix(OS_Plot, _INR(0,2), 7, swarm->xpos, swarm->ypos);
  if (e) return e;

  swarm->oldxpos = swarm->xpos;
  swarm->oldypos = swarm->ypos;

  e = _swix(ColourTrans_SetColour, _IN(0)|_IN(3)|_IN(4), queenGCOL, 0, 0);
  if (e) return e;
  swarm->xdir += (rand() % QUEENACC*2+1) - QUEENACC;
  swarm->ydir += (rand() % QUEENACC*2+1) - QUEENACC;

  /* Limit speed */
  if (swarm->xdir >  BEEMAX) swarm->xdir =  QUEENMAX;
  if (swarm->xdir < -BEEMAX) swarm->xdir = -QUEENMAX;
  if (swarm->ydir >  BEEMAX) swarm->ydir =  QUEENMAX;
  if (swarm->ydir < -BEEMAX) swarm->ydir = -QUEENMAX;

  /* Bounce the queen off the edges of the screen */
  if ((swarm->xpos + swarm->xdir > screenw) || (swarm->xpos + swarm->xdir < 0)) swarm->xdir = -swarm->xdir;
  if ((swarm->ypos + swarm->ydir > screenh) || (swarm->ypos + swarm->ydir < 0)) swarm->ydir = -swarm->ydir;

  swarm->xpos += swarm->xdir;
  swarm->ypos += swarm->ydir;

  e = _swix(OS_Plot, _INR(0,2), 5, swarm->xpos, swarm->ypos);
  if (e) return e;

  /* End of queen code */

  /* The general case for all other bees in the swarm */

  temp = swarm + 1;

  for(count = nobees-1; count; count--)
  {
    e = _swix(OS_Plot, _INR(0,2), 4, temp->oldxpos, temp->oldypos);
    if (e) return e;
    e = _swix(OS_Plot, _INR(0,2), 7, temp->xpos, temp->ypos);
    if (e) return e;

    temp->oldxpos = temp->xpos;
    temp->oldypos = temp->ypos;

    /* Swarm */
    dy = swarm->ypos - temp->ypos;
    dx = swarm->xpos - temp->xpos;
    distance = abs(dx) + abs(dy);

    if (distance)
    {
      /* Accelerate bee towards queen */
      temp->xdir += (dx * BEEACC) / distance;
      temp->ydir += (dy * BEEACC) / distance;

      /* Spread the bees out a bit */
      if (rand() % 30 == 1)
      {
        temp->xdir += (rand() % BEEACC * 4 + 1) - BEEACC * 2;
        temp->ydir += (rand() % BEEACC * 4 + 1) - BEEACC * 2;
      }

      /* Limit speed */
      if (temp->xdir >  BEEMAX) temp->xdir =  BEEMAX;
      if (temp->xdir < -BEEMAX) temp->xdir = -BEEMAX;
      if (temp->ydir >  BEEMAX) temp->ydir =  BEEMAX;
      if (temp->ydir < -BEEMAX) temp->ydir = -BEEMAX;
    }

    distance >>= 1;

    if (distance > 255) distance = 255;

    e = _swix(ColourTrans_SetColour, _IN(0) | _INR(3, 4), coloursGCOL[8][distance], 0, 0);
    if (e) return e;

    temp->xpos += temp->xdir;
    temp->ypos += temp->ydir;

    e = _swix(OS_Plot, _INR(0,2), 5, temp->xpos, temp->ypos);
    if (e) return e;

    temp++;
  }

  return NULL;
}


/*---------------------------------------------------------------------------*
 * kill_saver                                                                *
 *                                                                           *
 * Kill the screensaver prior to exit.                                       *
 *---------------------------------------------------------------------------*/

_kernel_oserror * kill_saver(void)
{
  if (swarm) free(swarm);
  return NULL;
}

/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

void program_exit(void)
{
  _kernel_oserror *e;

  e = kill_saver();

  /* Turn on pointer */
  _swix(OS_Byte, _INR(0,1), OsByte_SelectPointer, 1);

  /* Unset ScrSaver$Running */
  _swix(OS_SetVarVal, _INR(0,4), "ScrSaver$Running", 0, -1, 0, 0);

  /* Exit */
  exit(0);
}


/*---------------------------------------------------------------------------*
 * error_trap                                                                *
 *                                                                           *
 * Wrap around a function to report an error if one occurred eg.:            *
 *  error_trap(event_initialise(&idb), 0);                                   *
 *                                                                           *
 * In: err - a kernel_oserror block                                          *
 *     type - 0 means non-fatal, otherwise program will exit after reporting *
 *---------------------------------------------------------------------------*/

void error_trap(_kernel_oserror *err, int err_type)
{
  /* Report the appropriate error, has one occured */
  if (err != NULL)
  {
    wimp_report_error(err, 0, "Screensaver", 0, 0, 0);

    /* Now, if it was a fatal error (type != 0), exit at once */
    if (err_type != 0) exit(0);
  }
}

/*---------------------------------------------------------------------------*
 * set_random_seed                                                           *
 *                                                                           *
 * Reset the random number seed to a value dependent on the monotonic timer. *
 *---------------------------------------------------------------------------*/

void set_random_seed(void)
{
  int time;

  _swix(OS_ReadMonotonicTime, _OUT(0), &time);
  srand(time);
}

/*---------------------------------------------------------------------------*
 * null_event                                                                *
 *                                                                           *
 * Null event handler - we do all our animation etc. here.                   *
 *---------------------------------------------------------------------------*/

int null_event(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  if (!saver_initialised)
  {
    /* We no longer need high priority poll word checking */
    error_trap(event_set_mask(Wimp_Poll_PollWord), 0);
    saver_initialised = 1;
  }

  call_saver();

  return 1;
}


/*---------------------------------------------------------------------------*
 * gain_pointer                                                              *
 *                                                                           *
 * Pointer has entered my window - turn it off!                              *
 *---------------------------------------------------------------------------*/

int gain_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  _swix(OS_Byte, _INR(0,1), OsByte_SelectPointer, 0);

  return 1;
}


/*---------------------------------------------------------------------------*
 * lose_pointer                                                              *
 *                                                                           *
 * Pointer has left my window - switch it back on again!                     *
 *---------------------------------------------------------------------------*/

int lose_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  _swix(OS_Byte, _INR(0,1), OsByte_SelectPointer, 1);

  return 1;
}


/*---------------------------------------------------------------------------*
 * redraw                                                                    *
 *                                                                           *
 * Handle redraw events - do nothing!                                        *
 *---------------------------------------------------------------------------*/

int redraw(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  WimpRedrawWindowBlock block;
  int                   more;

  wimp_update_window(&block, &more);
  while (more)
  {
    wimp_get_rectangle(&block, &more);
  }

  return 1;
}


/*---------------------------------------------------------------------------*
 * pollword                                                                  *
 *                                                                           *
 * Handle pollword non-zero events                                           *
 *---------------------------------------------------------------------------*/

int pollword(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  program_exit();

  return 1;
}


/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/

int message_quit(WimpMessage *event, void *handler)
{
  program_exit();

  return 1;
}


/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *                                                                           *
 * Initialise the toolbox, work out the screensize, open the window.         *
 *                                                                           *
 * Globals: screenw, screenh                                                 *
 *---------------------------------------------------------------------------*/

static int main_initialise(void)
{
  WimpOpenWindowBlock   win;
  BBox                  extent;
  int                   show[2];
  int                   xeig;
  int                   yeig;
  int                   xpixels;
  int                   ypixels;
  int                   task_handle;
  int                   window_toolbox_id;
  int                   window_wimp_handle;

  /* Initialise and register event handlers */
  error_trap(toolbox_initialise(0, 310, 0, 0, "<BlankTask$Dir>", &messages_desc, &idb,
                                0, &task_handle, 0), 1);
  error_trap(event_initialise(&idb), 1);
  error_trap(event_set_mask(Wimp_Poll_PollWord +
                            Wimp_Poll_PollWordHighPriority), 0);

  error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 1);
  error_trap(event_register_wimp_handler(-1, Wimp_ENull, null_event, NULL), 1);
  error_trap(event_register_wimp_handler(-1, Wimp_ERedrawWindow, redraw, NULL), 1);
  error_trap(event_register_wimp_handler(-1, Wimp_EPollWordNonZero, pollword, NULL), 0);
  error_trap(event_register_wimp_handler(-1, Wimp_EPointerEnteringWindow, gain_pointer, NULL), 0);
  error_trap(event_register_wimp_handler(-1, Wimp_EPointerLeavingWindow, lose_pointer, NULL), 0);

  /* Find screen size */
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, VduExt_XEigFactor, &xeig), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, VduExt_YEigFactor, &yeig), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, VduExt_XWindLimit, &xpixels), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, VduExt_YWindLimit, &ypixels), 1);
  screenw = xpixels<<xeig;
  screenh = ypixels<<yeig;

  /* Set the extent of the 'covering' window. */
  extent.xmin = 0;
  extent.xmax = screenw;
  extent.ymin = 0;
  extent.ymax = screenh;
  show[0] = 0;
  show[1] = screenh;
  error_trap(toolbox_create_object(0, "Window", &window_toolbox_id), 1);
  error_trap(window_set_extent(0, window_toolbox_id, &extent), 1);
  error_trap(window_get_wimp_handle(0, window_toolbox_id, &window_wimp_handle), 1);

  /* Open the covering window */
  win.window_handle=window_wimp_handle;
  win.visible_area.xmin = 0;
  win.visible_area.xmax = screenw;
  win.visible_area.ymin = 0;
  win.visible_area.ymax = screenh;
  win.xscroll = 0;
  win.yscroll = 0;
  win.behind= - 1;
  error_trap(wimp_open_window(&win), 1);

  error_trap(init_saver(), 1);

  return 1;
}


/*---------------------------------------------------------------------------*
 * main                                                                      *
 *---------------------------------------------------------------------------*/

int main(int argc, char **argv)
{
  WimpPollBlock  wpb;
  int            event_code;
  int           *pollword = NULL;

  if (argc>1) pollword = (int*) atoi(argv[1]);

  if (!pollword)          program_exit();
  if (!main_initialise()) program_exit();

  while (TRUE) error_trap(event_poll(&event_code, &wpb, pollword), 0);

  return 0;
}
@


1.1
log
@Initial revision
@
text
@d27 5
a34 1
#include "wimplib.h"
d45 1
a45 1
#define SettingsFile "<Choices$Write>.ScrSavers.Swarm"
d62 1
a62 1
static unsigned int    delay  = 0;
d81 7
a87 1
_kernel_oserror *saver_error(const char *st)
d91 1
a91 1
  strcpy(e.errmess, st);
d107 1
a107 1
  int               flags, buffsize;
d110 4
d115 1
a115 1
  if ((e = _swix(MessageTrans_FileInfo, _IN(1) | _OUTR(1, 2), SettingsFile, &flags, &buffsize)) != NULL) return e;
d117 1
d119 1
a119 1
  if ((e = _swix(MessageTrans_OpenFile, _INR(0, 2), messblk, SettingsFile, buffer)) != NULL)
d148 1
a148 1
  if (!_swix(MessageTrans_Lookup, _INR(0, 7), messblk, "Delay:0", string, 256, 0, 0, 0, 0))
d174 1
a174 1
  if (!swarm) return saver_error("Insufficient memory");
d239 1
a239 1
  e = _swix(ColourTrans_SetColour, _IN(0)|_IN(3)|_IN(4), blackGCOL, 0, 0);
d243 1
a243 1
  e = _swix(OS_Plot, _INR(0,2), 5, swarm->xpos, swarm->ypos);
a266 2
  e = _swix(OS_Plot, _INR(0,2), 4, swarm->oldxpos, swarm->oldypos);
  if (e) return e;
a277 2
    e = _swix(ColourTrans_SetColour, _IN(0)|_IN(3)|_IN(4), blackGCOL, 0, 0);
    if (e) return e;
d280 1
a280 1
    e = _swix(OS_Plot, _INR(0,2), 5, temp->xpos, temp->ypos);
a320 2
    e = _swix(OS_Plot, _INR(0,2), 4, temp->oldxpos, temp->oldypos);
    if (e) return e;
d356 1
a356 1
  _swix(OS_Byte, _INR(0,1), 106, 1);
d381 1
a381 1
    wimp_report_error(err, 0, "Screen Blanker", 0, 0, 0);
d431 1
a431 1
  _swix(OS_Byte, _INR(0,1), 106, 0);
d445 1
a445 1
  _swix(OS_Byte, _INR(0,1), 106, 1);
d536 4
a539 4
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &xeig), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &yeig), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 11, &xpixels), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 12, &ypixels), 1);
d579 1
a579 1
  int           *pollword = 0;
@


1.1.1.1
log
@Initial import to CVS.
@
text
@@


1.1.1.2
log
@SvrSetup$Dir used instead of Settings$Dir.
@
text
@a99 4
  int               type;

  _swix(OS_File, _INR(0,1)|_OUT(0), 17, SettingsFile, &type);
  if (type!=1) return NULL;
@


1.1.1.3
log
@Various speed improvements.
@
text
@d228 1
a228 1
  e = _swix(ColourTrans_SetColour, _IN(0)|_IN(3)|_IN(4), blackGCOL, 0x80, 0);
d232 1
a232 1
  e = _swix(OS_Plot, _INR(0,2), 7, swarm->xpos, swarm->ypos);
d256 2
d269 2
d273 1
a273 1
    e = _swix(OS_Plot, _INR(0,2), 7, temp->xpos, temp->ypos);
d314 2
@


1.1.1.4
log
@Removed reference to wrong application name in error reporting.
@
text
@d370 1
a370 1
    wimp_report_error(err, 0, "Screensaver", 0, 0, 0);
@
