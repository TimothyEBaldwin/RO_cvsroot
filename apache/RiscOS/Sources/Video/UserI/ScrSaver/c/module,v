head	1.3;
access;
symbols
	ScrSaver-0_14-1_9_2_4:1.2.2.4
	ScrSaver-0_14-1_9_2_3:1.2.2.4
	ScrSaver-0_22:1.3
	RO_5_07:1.2.2.3
	bavison_ScrSaver-0_14:1.2.2.3
	ScrSaver-0_21:1.3
	ScrSaver-0_20:1.3
	dellis_autobuild_BaseSW:1.3
	ScrSaver-0_19:1.3
	sbrodie_sedwards_16Mar2000:1.3
	dcotton_autobuild_BaseSW:1.3
	ScrSaver-0_18:1.3
	ScrSaver-0_17:1.3
	ScrSaver-0_16:1.3
	ScrSaver-0_15:1.3
	mstphens_UrsulaRiscPCBuild_20Nov98:1.2.2.3
	Ursula_RiscPC:1.2.2.3.0.2
	rthornb_UrsulaBuild-19Aug1998:1.2.2.3
	UrsulaBuild_FinalSoftload:1.2.2.3
	rthornb_UrsulaBuild-12Aug1998:1.2.2.3
	aglover_UrsulaBuild-05Aug1998:1.2.2.3
	rthornb_UrsulaBuild-29Jul1998:1.2.2.3
	rthornb_UrsulaBuild-22Jul1998:1.2.2.3
	rthornb_UrsulaBuild-15Jul1998:1.2.2.3
	rthornb_UrsulaBuild-07Jul1998:1.2.2.3
	rthornb_UrsulaBuild-17Jun1998:1.2.2.3
	rthornb_UrsulaBuild-03Jun1998:1.2.2.3
	rthornb_UrsulaBuild-27May1998:1.2.2.3
	rleggett_ScrSaver-0_14:1.2.2.3
	rthornb_UrsulaBuild-21May1998:1.2.2.3
	rthornb_UrsulaBuild_01May1998:1.2.2.3
	afrost_NC2_Generic:1.1.1.4
	Spinner_B20_2:1.1.1.2
	Spinner_19_3:1.1.1.2
	Spinner_B18:1.1.1.2
	Spinner_B17:1.1.1.2
	Spinner_B15:1.1.1.2
	Ursula:1.2.0.2
	Ursula_bp:1.2
	Spin_merge:1.1.1.4
	Spinner_B14:1.1.1.2
	Spinner_B13:1.1.1.2
	Spinner_B12:1.1.1.2
	Spinner_B10:1.1.1.2
	Daytona:1.1.0.6
	Daytona_bp:1.1
	Spinner_B7:1.1.1.2
	ARTtmp_merge:1.1.1.1
	Spin_3Apr97:1.1.1.2
	ARTtmp:1.1.1.1.0.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.3
date	99.04.28.09.08.35;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	97.06.30.15.02.50;	author kbracey;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	97.03.19.14.25.47;	author scormie;	state Exp;
branches
	1.1.1.1;
next	;

1.2.2.1
date	97.11.21.11.34.02;	author rleggett;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	98.03.27.10.15.42;	author rleggett;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	98.04.15.11.19.41;	author rleggett;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	2012.05.08.21.38.23;	author rsprowson;	state Exp;
branches;
next	;
commitid	vh8V3LWmZ9IdZX3w;

1.1.1.1
date	97.03.19.14.25.47;	author scormie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.03.27.12.59.25;	author scormie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.10.09.15.44.45;	author olove;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	97.10.09.16.44.47;	author olove;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Spinner branch merged.
Modified to use srccommit.

Version 0.15. Tagged as 'ScrSaver-0_15'
@
text
@/* > module.c
 *
 *      RISC OS module related code.
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"

#include "module.h"

int poll_word;

#define OS_Module             0x1e
#define TaskModule_StartTask  0x4d301
#define OS_Find               0x0d
#define PDriver_Info          0x80140

/*------------------------------------------------------------------------*/

/* Check if user is already printing */
static int user_currently_printing(void)
{
  _kernel_swi_regs regs;
  _kernel_oserror *err;
  int printing = FALSE;

  regs.r[0] = 0;
  err = _kernel_swi(PDriver_Info, &regs, &regs);   /* Get PDriver Info */
  if (err)
    printing = FALSE;    /* printer does not exist - user not printing */
  else
  {
    regs.r[0] = 0xc3;
    regs.r[1] = (int) "printer:";
    regs.r[2] = 0;
    _kernel_swi(OS_Find, &regs, &regs);   /* try and open printer */
    if (regs.r[0] != 0)    /* printer: not in use - user not printing */
    {
      regs.r[1] = regs.r[0];                
      regs.r[0] = 0;
      regs.r[2] = 0;                      
     _kernel_swi(OS_Find, &regs, &regs);  /* close printer: */
      printing = FALSE;    
    }
    else
     printing = TRUE;      /* printer: is in use - user is printing */
  }
  return (printing);
}

static void blank_screen(void)
{
  _kernel_swi_regs r;
  char cmd[256];
  
  poll_word = 0;             /* Set value of Poll Word to 0 */
  
  sprintf(cmd, "Run Resources:$.Resources.ScrSaver.!Run %d", (int) &poll_word);
  r.r[0] = (int) cmd;
  r.r[1] = 0;
  _kernel_swi(TaskModule_StartTask, &r, &r);  /* Run Basic App */
}

/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *
module_initialise( char *cmd_tail, int podule_base, void *pw )
{
  return 0;

  NOT_USED( cmd_tail );
  NOT_USED( podule_base );
  NOT_USED( pw );
}

/*------------------------------------------------------------------------------
 * module_service
 *
 *      Module service call entry point.
 */
void
module_service( int service_no, _kernel_swi_regs *r, void *pw )
{
        if ( service_no == Service_ScreenBlanking )
        {
          if (user_currently_printing() == FALSE)
          {
            blank_screen();
          }
          r->r[1]=0;                /* Claim service call */
        }

        if ( service_no == Service_ScreenRestored )
        {
          poll_word = 1;         /* Set value of Poll Word to 1 */
        }
       
        NOT_USED( pw );
}
@


1.2
log
@Spinner branch merged
@
text
@d17 35
d91 4
a94 1
          blank_screen();
@


1.2.2.1
log
@Service_ScreenBlanking only claimed if ScrSaver$Path is set.
@
text
@a16 1
#define OS_ReadVarVal         0x23
d25 1
a25 1
  sprintf(cmd, "Run <ScrSaver$Path>!Run %d", (int) &poll_word);
d54 5
a58 19
  _kernel_swi_regs rv;
  char path[]="ScrSaver$Path";
  
  if ( service_no == Service_ScreenBlanking )
  {
    /* Check if ScrSaver$Path is set. If not, don't claim this call */
    rv.r[0]=(int)path;
    rv.r[1]=0;
    rv.r[2]=-1;
    rv.r[3]=0;
    rv.r[4]=0;
    _kernel_swi(OS_ReadVarVal, &rv, &rv);
    
    if (rv.r[2]<0)
    {
      blank_screen();
      r->r[1]=0;                /* Claim service call */
    }
  }
d60 4
a63 4
  if ( service_no == Service_ScreenRestored )
  {
    poll_word = 1;         /* Set value of Poll Word to 1 */
  }
d65 1
a65 1
  NOT_USED( pw );
@


1.2.2.2
log
@Added check of ScrSaver$Running and ScrSaver$MinMem.
Changed ScrSaver$Path to ScrSaver$Dir.
@
text
@d1 4
a4 22
/*---------------------------------------------------------------------------*/
/* File:    module.c                                                         */
/* Purpose: Module code for ScrSaver module.                                 */
/* Author:  Original author unknown.                                         */
/*          Ursula changes - Richard Leggett                                 */
/* History: xx-xxx-97: xxx: Created.                                         */
/*          17-Nov-97: RML: Taken from NCOS sources for Ursula RISC OS.      */
/*                          Added code to check if in desktop and if         */
/*                          <ScrSaver$Dir> set, before claiming Service_     */
/*                          ScreenBlanking.                                  */
/*          26-Nov-97: RML: Added check if printer is in use.                */
/*          20-Mar-98: RML: Added check of ScrSaver$Running. If set, don't   */
/*                          claim Service_ScreenBlanking, but unset          */
/*                          ScrSaver$Running.                                */
/*          23-Mar-98: RML: If ScrSaver$Running is set, we ignore it if more */
/*                          than blanktime + error has elapsed since screen  */
/*                          was last restored.                               */
/*          24-Mar-98: RML: Added check of ScrSaver$MinMem before running.   */
/*                          Changed ScrSaver$Path to ScrSaver$Dir.           */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/
d6 1
d10 1
d13 2
a14 2
#define OS_Byte               0x06
#define OS_Find               0x0d
d16 1
a17 9
#define OS_SetVarVal          0x24
#define OS_ReadMonotonicTime  0x42
#define Wimp_SlotSize         0x400ec
#define Wimp_ReadSysInfo      0x400f2
#define TaskManager_StartTask 0x42683
#define ScreenBlanker_Control 0x43100
#define TaskModule_StartTask  0x4d301
#define PDriver_Info          0x80140
#define PDriver_CurrentJob    0x80146
d19 1
a19 17
int poll_word;
int force_dpms;
int restore_time = 0;
int blanking_time;
int slotsize;

/*---------------------------------------------------------------------------*
 * read_time                                                                 *
 *                                                                           *
 * Read the centisecond timer.                                               *
 *                                                                           *
 * In: Nothing.                                                              *
 *                                                                           *
 * Out: Returns timer value.                                                 *
 *---------------------------------------------------------------------------*/

static int read_time(void)
d21 2
a22 27
    _kernel_swi_regs r;

    _kernel_swi(OS_ReadMonotonicTime, &r, &r);

    return r.r[0];
}


/*---------------------------------------------------------------------------*
 * safe_to_claim_blanking                                                    *
 *                                                                           *
 * Decide if it's safe to claim Service_ScreenBlanking:                      *
 *                                                                           *
 * In: Nothing.                                                              *
 *                                                                           *
 * Out: 1 means safte to claim, 0 means don't claim.                         *
 *---------------------------------------------------------------------------*/

static int safe_to_claim_blanking(void)
{
    _kernel_swi_regs r;
    char dir[] = "ScrSaver$Dir";
    char mem[] = "ScrSaver$MinMem";
    int buffer[4];

    /* Are we forcing the DPMS blanker? */
    if (force_dpms) return FALSE;
d24 1
a24 8
    /* Check if <ScrSaver$Dir> is set */
    r.r[0] = (int)dir;
    r.r[1] = 0;
    r.r[2] = -1;
    r.r[3] = 0;
    r.r[4] = 0;
    _kernel_swi(OS_ReadVarVal, &r, &r);
    if (r.r[2]==0) return FALSE;
d26 41
a66 16
    /* Check if we're in the desktop */
    r.r[0] = 3;
    _kernel_swi(Wimp_ReadSysInfo, &r, &r);
    if (r.r[0]==0) return FALSE;
  
    /* Check if there's a print job on */
    _kernel_swi(PDriver_CurrentJob, &r, &r);
    if (r.r[0]!=0) return FALSE;
  
    /* Check we've got enough memory via ScrSaver$MinMem */
    r.r[0] = (int)mem;
    r.r[1] = (int)buffer;
    r.r[2] = -1;
    r.r[3] = 0;
    r.r[4] = 0;
    _kernel_swi(OS_ReadVarVal, &r, &r);
d68 1
a68 1
    if (r.r[4]==1)  /* If ScrSaver$MinMem exists */
d70 2
a71 16
        /* Find value */
        r.r[0] = (int)mem;
        r.r[1] = (int)buffer;
        r.r[2] = 16;
        r.r[3] = 0;
        r.r[4] = 0;
        _kernel_swi(OS_ReadVarVal, &r, &r);
        
        /* Read free memory */
        r.r[0] = -1;
        r.r[1] = -1;
        _kernel_swi(Wimp_SlotSize, &r, &r);
        
        /* Check if enough memory to run screen saver */
        /* We check for MinMem + 16K */
        if ( (r.r[2] / 1024) < (buffer[0] + 16) ) return FALSE;
d73 1
a73 54
  
    return TRUE;
}


/*---------------------------------------------------------------------------*
 * only_just_restored                                                        *
 *                                                                           *
 * Decide if the screen has only just been restored.                         *
 *---------------------------------------------------------------------------*/

static int only_just_restored(void)
{
    _kernel_swi_regs r;

    blanking_time = read_time();
    
    r.r[0] = 5;
    _kernel_swi(ScreenBlanker_Control, &r, &r);

    /* If the time now is < or = to the time we last restored the screen
       plus the blanktime, plus a half second error, then we have
       'only just restored' the screen. */
    if (blanking_time > (restore_time + r.r[1] + 50)) return FALSE;
    
    return TRUE;
}


/*---------------------------------------------------------------------------*
 * unset_saver_running                                                       *
 *                                                                           *
 * Unset system variable ScrSaver$Running.                                   *
 *---------------------------------------------------------------------------*/

static void unset_saver_running(void)
{
    _kernel_swi_regs r;
    char varname[] = "ScrSaver$Running";
  
    r.r[0] = (int)varname;
    r.r[1] = 0;
    r.r[2] = -1;
    r.r[3] = 0;
    r.r[4] = 0;
    _kernel_swi(OS_SetVarVal, &r, &r);
}


/*---------------------------------------------------------------------------*
 * check_saver_running                                                       *
 *                                                                           *
 * Check if system variable ScrSaver$Running exists.                         *
 *---------------------------------------------------------------------------*/
d75 6
a80 98
static int check_saver_running(void)
{
    _kernel_swi_regs r;
    char varname[] = "ScrSaver$Running";
  
    r.r[0] = (int)varname;
    r.r[1] = 0;
    r.r[2] = -1;
    r.r[3] = 0;
    r.r[4] = 0;
    _kernel_swi(OS_ReadVarVal, &r, &r);
  
    if (r.r[2]==0) return FALSE;
      
    return TRUE;
}


/*---------------------------------------------------------------------------*
 * blank_screen                                                              *
 *                                                                           *
 * Launch the blanker application.                                           *
 *---------------------------------------------------------------------------*/

static void blank_screen(void)
{
    _kernel_swi_regs r;
    char cmd[256];

    /* Set value of Poll Word to 0 */
    poll_word = 0;
    
    /* Run Basic App */
    sprintf(cmd, "Run <ScrSaver$Dir>.!Run %d", (int) &poll_word);
    r.r[0] = (int) cmd;
    r.r[1] = 0;
    _kernel_swi(TaskManager_StartTask, &r, &r);
}


/*---------------------------------------------------------------------------*
 * module_initialise                                                         *
 *                                                                           *
 * Module initialisation entry point.                                        *
 *---------------------------------------------------------------------------*/

_kernel_oserror *module_initialise( char *cmd_tail, int podule_base, void *pw )
{
    return 0;
  
    NOT_USED( cmd_tail );
    NOT_USED( podule_base );
    NOT_USED( pw );
}


/*---------------------------------------------------------------------------*
 * module_service                                                            *
 *                                                                           *
 * Module service call entry point.                                          *
 *---------------------------------------------------------------------------*/

void module_service( int service_no, _kernel_swi_regs *r, void *pw )
{
    force_dpms = 0;

    /* Deal with Service_ScreenBlanking */
    if ( service_no == Service_ScreenBlanking )
    {
        if (check_saver_running())
        {
            /* If ScrSaver$Running is set... */
            unset_saver_running();
            
            /* If ScrSaver$Running is set AND we've only recently restored
               the screen (ie. within blanktime + 0.5 secs), then we assume
               a WIMP error forced the screen to be restored last time, so
               force the DPMS saver this time. */
            if (only_just_restored()) force_dpms = 1;
            else force_dpms = 0;
        }
        
        if (safe_to_claim_blanking())
        {
            /* Claim the service call */
            blank_screen();
            r->r[1] = 0;
        }
    }
  
    /* Deal with Service_ScreenRestored */
    if ( service_no == Service_ScreenRestored )
    {
        restore_time = read_time();
        poll_word = 1;                 /* Set value of Poll Word to 1 */
    }
         
    NOT_USED( pw );
@


1.2.2.3
log
@Fixed error handling for call to PDriver.
@
text
@a81 1
    _kernel_oserror *e;
d104 2
a105 2
    e = _kernel_swi(PDriver_CurrentJob, &r, &r);
    if ((!e) && (r.r[0]!=0)) return FALSE;
@


1.2.2.4
log
@Makefile recreated.
Warnings squashed.
Changed to use VersionNum.
Explicit rule for target 'app' written, so it at least compiles, but probably not relevant on this branch.
Participated in ROM build but not functionally tested.

Version 0.14, 1.9.2.3. Tagged as 'ScrSaver-0_14-1_9_2_3'
@
text
@a25 1
#include "swis.h"
d29 19
a47 4
static int poll_word;
static int force_dpms;
static int restore_time = 0;
static int blanking_time;
@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
char *poll_word;
a17 22
static char *claim_rma_space(void)
{
  _kernel_swi_regs r;

  r.r[0] = 6;
  r.r[1] = r.r[2] = 0;
  r.r[3] = 8;
  _kernel_swi(OS_Module, &r, &r);

  return((char *) r.r[2]);
}

/* static void free_rma_space(char *poll_word)
{
  _kernel_swi_regs r;

  r.r[0] = 7;
  r.r[1] = 0;
  r.r[2] = (int) poll_word;
  _kernel_swi(OS_Module, &r, &r);
}  */

d23 1
a23 1
  poll_word[0] = 0;             /* Set value of Poll Word to 0 */
d25 1
a25 1
  sprintf(cmd, "Run Resources:$.Resources.ScrSaver.!Run %d", (int) poll_word);
d39 4
a43 4

  poll_word = claim_rma_space();   /* Claim a Poll Word */
   
  return 0;
d62 1
a62 1
          poll_word[0] = 1;         /* Set value of Poll Word to 1 */
@


1.1.1.1
log
@Initial version.

@
text
@@


1.1.1.2
log
@Fixed poll word handling.
@
text
@d13 1
a13 1
int poll_word;
d18 22
d45 1
a45 1
  poll_word = 0;             /* Set value of Poll Word to 0 */
d47 1
a47 1
  sprintf(cmd, "Run Resources:$.Resources.ScrSaver.!Run %d", (int) &poll_word);
d61 4
a65 4

  NOT_USED( cmd_tail );
  NOT_USED( podule_base );
  NOT_USED( pw );
d84 1
a84 1
          poll_word = 1;         /* Set value of Poll Word to 1 */
@


1.1.1.3
log
@Updated module to check for if NC is printing or not before displaying
screen saver.
@
text
@a16 32
#define OS_Find               0x0d

/*------------------------------------------------------------------------*/

/* Check if user is already printing */
static int user_currently_printing(void)
{
  _kernel_swi_regs regs;
  _kernel_oserror *err;
  int printing = FALSE;
  
  regs.r[0] = 0xcb;
  regs.r[1] = (int) "printer:";
  regs.r[2] = 0;
  err = _kernel_swi(OS_Find, &regs, &regs);   /* try and open printer */
  if (err)
    printing = FALSE;      /* printer: does not exist - user not printing */
  else
  {
    if (regs.r[0] != 0)    /* printer: not in use - user not printing */
    {
      regs.r[1] = regs.r[0];                
      regs.r[0] = 0;
      regs.r[2] = 0;                      
     _kernel_swi(OS_Find, &regs, &regs);  /* close printer: */
      printing = FALSE;    
    }
    else
     printing = TRUE;      /* printer: is in use - user is printing */
  }
  return (printing);
}
d56 1
a56 4
          if (user_currently_printing() == FALSE)
          {
            blank_screen();
          }
@


1.1.1.4
log
@Tried again to make screen saver stop working if user is printing.
@
text
@a17 1
#define PDriver_Info          0x80140
d27 5
a31 3

  regs.r[0] = 0;
  err = _kernel_swi(PDriver_Info, &regs, &regs);   /* Get PDriver Info */
d33 1
a33 1
    printing = FALSE;    /* printer does not exist - user not printing */
a35 4
    regs.r[0] = 0xc3;
    regs.r[1] = (int) "printer:";
    regs.r[2] = 0;
    _kernel_swi(OS_Find, &regs, &regs);   /* try and open printer */
@
