head	1.1;
access;
symbols
	ScrModes-0_71:1.1
	ScrModes-0_70:1.1
	ScrModes-0_69:1.1
	ScrModes-0_68:1.1
	ScrModes-0_67:1.1
	ScrModes-0_66:1.1
	ScrModes-0_65:1.1
	ScrModes-0_64:1.1
	ScrModes-0_62:1.1
	ScrModes-0_61:1.1;
locks; strict;
comment	@# @;


1.1
date	2017.03.05.15.21.09;	author rool;	state Exp;
branches;
next	;
commitid	dv9rieZmjERhgnIz;


desc
@@


1.1
log
@Offer export of raw EDID blob and complementary MDF export
Detail:
  Export the EDID raw data as a file in ResourceFS. This allows the Screen Setup plugin to scan that directory to pick up the currently connected monitor, and similarly select it from !Boot.Choices.PreDesk. The EDID data can also be drag & drop copied or exported for offline analysis.
  Add SaveModeFile command. This differs in that it works on the current set, to be symmetrical with LoadModeFile which loads the current set. Also fixes issues of losing the original mode names given; NULL pointer dereference when the EDID block contains no modes (eg. VIDCDriver); and no long writes out malformed MDFs which can't be loaded into !MakeModes (this seems to be because the CreateModeFile command was based on a stale copy of EDIDDecode which fixed the same bug circa 2012).
  Query the current GraphicsV driver for the deepest colour depth for the preferred mode, rather than assuming 32bpp is always possible (eg. because of bandwidth or graphics controller constraints).
  If the configured MonitorType is EDID but no EDID could be read, or it was corrupt, substitute a safe VESA monitor to allow the kernel to select something close to MODE 28.
  Add ScreenModes_Features SWI so the Screen Setup plugin knows whether it's safe to offer EDID in its dialogues.
  Retire the ReadEDID command (no longer needed since LoadModeFile can load the exported EDID blob, or one from disc) and CreateModeFile commands (see SaveModeFile).
  Internationalise the default monitor title ("Unidentified") used when EDID doesn't contain one.
Admin:
  New file - doc/BootStates documents all possible situations, and their recovery, for both the MDF and (non-hotplug) EDID schemes.
  New file - doc/EDIDGoals states the aims of the EDID support from both a user and support perspective.

  Submission for the EDID bounty.

Version 0.61. Tagged as 'ScrModes-0_61'
@
text
@Statement of aims
~~~~~~~~~~~~~~~~~
* Resiliance against corrupt or inaccurate EDID data from the monitor
  => some default display, and ability to override EDID data with 'known good' library copy
     in a similar manner to Windows overriding the EDID from an INF file as described here
     https://msdn.microsoft.com/en-us/library/windows/hardware/jj133967(v=vs.85).aspx
  => allow loading of disc based EDID on platforms that don't support it (eg. Risc PC)
* Simple user interface
  => user unlikely to care where the monitor settings came from, but they must work at least
     as well as the previous MDF system
  => checkbox or menu entry in !Configure plugin 
* Fallback to MonitorType=Auto behaviour if EDID unavailable
  => avoids problem when softload sets up to use EDID but underlying ROM OS doesn't support it
  => R-power-on/Delete-power-on/Keypad-dot-power-on revert to Auto as currently
* Advanced diagnostics for support staff
  => "many to 1" problem, so most of the complexity should reside on the support staff's desk,
     the remote system where the problem lies can be relatively simple
  => PC tools used to offline analyse EDID dumps (or, enhanced !MakeModes application)
  => means to capture EDID dump (utility, star command, BASIC, or similar)
* Discless boot
  => ability to select EDID without a boot sequence having run
  => ensure that the initial mode (prior to !Boot running) is feasible by vetting modes with the
     graphics driver
  => fallback to kernel's numbered modes if EDID is corrupt or inaccurate
* Hotplug and multi head
  => not currently supported, but design should not preclude their introduction in future, for
     example by setting the CMHG keyword matcher to let through some extra args but ignore
     them today
@
