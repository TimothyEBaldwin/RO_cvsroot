head	4.1;
branch	4.1.3;
access;
symbols
	Picker-0_56-1:4.1.3.1
	Picker-0_56:4.1.3.1
	Picker-0_55:4.1.3.1
	Picker-0_54:4.1.3.1
	Picker-0_53:4.1.3.1
	Picker-0_52:4.1.3.1
	Picker-0_51:4.1.3.1
	Picker-0_50:4.1.3.1
	RO_5_07:4.1.3.1
	Picker-0_49:4.1.3.1
	Picker-0_48:4.1.3.1
	dellis_autobuild_BaseSW:4.1.3.1
	Picker-0_47:4.1.3.1
	Picker-0_46:4.1.3.1
	sbrodie_sedwards_16Mar2000:4.1.3.1
	Picker-0_45:4.1.3.1
	Picker-0_44:4.1.3.1
	Picker-0_43:4.1.3.1
	Ursula_merge:4.1.3.1
	Picker-0_42:4.1.3.1
	dcotton_autobuild_BaseSW:4.1.3.1
	nturton_Picker-0_40:4.1.3.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.3.1
	Ursula_RiscPC:4.1.3.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1.3.1
	UrsulaBuild_FinalSoftload:4.1.3.1
	rthornb_UrsulaBuild-12Aug1998:4.1.3.1
	aglover_UrsulaBuild-05Aug1998:4.1.3.1
	hsimons_BOCA-1_2-Release:4.1.3.1
	rthornb_UrsulaBuild-29Jul1998:4.1.3.1
	rthornb_UrsulaBuild-22Jul1998:4.1.3.1
	rthornb_UrsulaBuild-15Jul1998:4.1.3.1
	rthornb_UrsulaBuild-07Jul1998:4.1.3.1
	rthornb_UrsulaBuild-17Jun1998:4.1.3.1
	rthornb_UrsulaBuild-03Jun1998:4.1.3.1
	rthornb_UrsulaBuild-27May1998:4.1.3.1
	rthornb_UrsulaBuild-21May1998:4.1.3.1
	rthornb_UrsulaBuild_01May1998:4.1.3.1
	Daytona:4.1.3.1.0.6
	Daytona_bp:4.1.3.1
	Ursula:4.1.3.1.0.2
	Ursula_bp:4.1.3.1
	RO_3_71:4.1.3.1
	RCA_bp:4.1.3.1
	RCA:4.1.3.1.0.4
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.1
date	96.11.06.02.49.26;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.1.3.1
date	96.11.06.02.49.26;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@lookup.c
--------

History
-------
26th October 1992  J R C  Started

   This module provides an extensible lookup table. The programmer interface
allows any number of entries to be added to a lookup table without needing
memory management to be done by the calling programme.

   There are functions

         |lookup_new| to create a lookup table;

         |lookup_delete| to dispose of an unwanted one;

         |lookup_insert| to add an entry to a table; and

         |lookup| to do the actual searching;

         |lookup_enumerate| to retreive all the tokens currently in the
      lookup table.

   The interface allows for a hashing system to be used, providing that one
can be designed that allows for an extensible table: I have experimented
with this, but don't have such in a bug-free form at the moment.

   The module stores only a |void *| value for each entry in the table. This
would normally be a pointer (suitably cast) to some application-specific
data associated with the name. It is the applications responsibility to
ensure that if this pointer changes (because of flex movement, for example),
the value in the table is updated to refer to the new location of the data.
See the |resource| module for how this can be done in two different ways. It
relies on the fact that a |lookup_insert| of a value with a token aleeady
known to the |lookup_| module will replace the previous value.

   The implementation of the lookup table is as an array of (char *, void*)
pairs, of a length which is a power of 2. When a table is filled, it is
|realloc|'d to the next power of 2. Pointers to tokens are held in the first
word of each array element, and the data pointer in the other half. This
allows only linear searching in the table; many improvements are possible
here, but have not been attempted. However, the interface specified here is
general enough to provide the facilities that are required without being
specific enough to prohibit the various abvious enhancements. The obvious
ones would be either

         hold the array sorted by token, cutting access time to O (log N),
      where N is the number of entries; or

         hash the token values, cutting access time to O (1).

   Unfortunately, one of |lookup_|'s clients makes use of a fact not
intended by its interface: this is that a call to |lookup_enumerate| returns
the tokens in the order they were inserted into the table. If this property
were to be maintained by either of these implementations, extra work would
be needed internally.

   (I do have a hashing implementation of the module, but it is not
bug-free.)
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@
