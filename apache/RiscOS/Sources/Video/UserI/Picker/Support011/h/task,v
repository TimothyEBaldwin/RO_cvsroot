head	4.2;
access;
symbols
	Picker-0_56-1:4.2
	Picker-0_56:4.2
	Picker-0_55:4.2
	Picker-0_54:4.2
	Picker-0_53:4.2
	Picker-0_52:4.2
	Picker-0_51:4.2
	Picker-0_50:4.2
	RO_5_07:4.2
	Picker-0_49:4.2
	Picker-0_48:4.1.3.1
	dellis_autobuild_BaseSW:4.1.3.1
	Picker-0_47:4.1.3.1
	Picker-0_46:4.1.3.1
	sbrodie_sedwards_16Mar2000:4.1.3.1
	Picker-0_45:4.1.3.1
	Picker-0_44:4.1.3.1
	Picker-0_43:4.1.3.1
	Ursula_merge:4.1.3.1
	Picker-0_42:4.1.3.1
	dcotton_autobuild_BaseSW:4.1.3.1
	nturton_Picker-0_40:4.1.3.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.3.1
	Ursula_RiscPC:4.1.3.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1.3.1
	UrsulaBuild_FinalSoftload:4.1.3.1
	rthornb_UrsulaBuild-12Aug1998:4.1.3.1
	aglover_UrsulaBuild-05Aug1998:4.1.3.1
	hsimons_BOCA-1_2-Release:4.1.3.1
	rthornb_UrsulaBuild-29Jul1998:4.1.3.1
	rthornb_UrsulaBuild-22Jul1998:4.1.3.1
	rthornb_UrsulaBuild-15Jul1998:4.1.3.1
	rthornb_UrsulaBuild-07Jul1998:4.1.3.1
	rthornb_UrsulaBuild-17Jun1998:4.1.3.1
	rthornb_UrsulaBuild-03Jun1998:4.1.3.1
	rthornb_UrsulaBuild-27May1998:4.1.3.1
	rthornb_UrsulaBuild-21May1998:4.1.3.1
	rthornb_UrsulaBuild_01May1998:4.1.3.1
	Daytona:4.1.3.1.0.6
	Daytona_bp:4.1.3.1
	Ursula:4.1.3.1.0.2
	Ursula_bp:4.1.3.1
	RO_3_71:4.1.3.1
	RCA_bp:4.1.3.1
	RCA:4.1.3.1.0.4
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.2
date	2002.10.25.14.55.11;	author bavison;	state Exp;
branches;
next	4.1;

4.1
date	96.11.06.02.49.46;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.1.3.1
date	96.11.06.02.49.46;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Lots of bools changed to osbools to keep the new compiler happy.
No longer assumes the location of the SVC stack.

Version 0.49. Tagged as 'Picker-0_49'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef task_H
#define task_H

/*From OSLib*/
#ifndef os_H
   #include "os.h"
#endif

#ifndef wimp_H
   #include "wimp.h"
#endif

/*Local*/
#ifndef callback_H
   #include "callback.h"
#endif

#define task_SHIFT ((bits) 0x1u)
#define task_CTRL  ((bits) 0x2u)
#define task_ALT   ((bits) 0x4u)

/*Type of a task descriptor.*/
typedef struct task_r *task_r;

/*Type of a function that handles a message reply or bounce.*/
typedef os_error *task_message_fn (void *, wimp_block *);

extern os_error *task_new (char *programme, wimp_t task, task_r *r_out);

extern os_error *task_delete (task_r r);

extern wimp_t task_info_task (task_r);

/* ------------------------------------------------------------------------
 * Function to process one event. Used in filters that need to handle
 * multiple callback lists (for multiple tasks).
 */

extern os_error *task_callback (task_r r, callback_l list, int event,
      wimp_block *block, osbool *unclaimed);

/* ------------------------------------------------------------------------
 * Function to call Wimp_ReportError (on a deprocedured argument,
 * usually) if necessary.
 */

extern os_error *task_report_error (task_r r, os_error *error);

/* ------------------------------------------------------------------------
 * Functions to claim and release events. Reference counts are maintained
 * for each. This is not really a very good interface to the WIMP's
 * facilities because:
 *
 *    - there is no way to mask out the message events (since they start
 *      out unmasked with a reference count of 0)
 *    - there is no way to set the Wimp_P bit of the mask
 *    - there is no way to set the Wimp_GivenPollword or
 *         Wimp_PollHighPriority bits of the mask.
 *
 * All these return the state of the mask (after the operation, if any).
 */

extern bits task_claim (task_r r, int event),
      task_release (task_r r, int event),
      task_mask (task_r r);

extern callback_l task_list (task_r r);

extern os_error *task_send_user_message
      (wimp_t to, int ref,
      int action, ...);

extern os_error *task_send_user_message_recorded
      (wimp_t to, int ref,
      task_r r, task_message_fn *reply_fn, task_message_fn *bounce_fn,
      void *h, int action, ...);

extern os_error *task_send_user_message_acknowledge
      (wimp_t to, int ref,
      int action, ...);

extern os_error *task_send_user_message_to_window
      (wimp_w to_w, wimp_i to_i, int ref,
      int action, ...);

extern os_error *task_send_user_message_recorded_to_window
      (wimp_w to_w, wimp_i to_i, int ref,
      task_r r, task_message_fn *reply_fn, task_message_fn *bounce_fn,
      void *h, int action, ...);

extern os_error *task_send_user_message_acknowledge_to_window
      (wimp_w to_w, wimp_i to_i, int ref,
      int action, ...);

#endif
@


4.1
log
@Initial revision
@
text
@d54 1
a54 1
      wimp_block *block, bool *unclaimed);
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@
