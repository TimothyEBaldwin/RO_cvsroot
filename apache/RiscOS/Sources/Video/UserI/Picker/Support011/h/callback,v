head	4.2;
access;
symbols
	Picker-0_56-1:4.2
	Picker-0_56:4.2
	Picker-0_55:4.2
	Picker-0_54:4.2
	Picker-0_53:4.2
	Picker-0_52:4.2
	Picker-0_51:4.2
	Picker-0_50:4.2
	RO_5_07:4.2
	Picker-0_49:4.2
	Picker-0_48:4.1.3.1
	dellis_autobuild_BaseSW:4.1.3.1
	Picker-0_47:4.1.3.1
	Picker-0_46:4.1.3.1
	sbrodie_sedwards_16Mar2000:4.1.3.1
	Picker-0_45:4.1.3.1
	Picker-0_44:4.1.3.1
	Picker-0_43:4.1.3.1
	Ursula_merge:4.1.3.1
	Picker-0_42:4.1.3.1
	dcotton_autobuild_BaseSW:4.1.3.1
	nturton_Picker-0_40:4.1.3.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.3.1
	Ursula_RiscPC:4.1.3.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1.3.1
	UrsulaBuild_FinalSoftload:4.1.3.1
	rthornb_UrsulaBuild-12Aug1998:4.1.3.1
	aglover_UrsulaBuild-05Aug1998:4.1.3.1
	hsimons_BOCA-1_2-Release:4.1.3.1
	rthornb_UrsulaBuild-29Jul1998:4.1.3.1
	rthornb_UrsulaBuild-22Jul1998:4.1.3.1
	rthornb_UrsulaBuild-15Jul1998:4.1.3.1
	rthornb_UrsulaBuild-07Jul1998:4.1.3.1
	rthornb_UrsulaBuild-17Jun1998:4.1.3.1
	rthornb_UrsulaBuild-03Jun1998:4.1.3.1
	rthornb_UrsulaBuild-27May1998:4.1.3.1
	rthornb_UrsulaBuild-21May1998:4.1.3.1
	rthornb_UrsulaBuild_01May1998:4.1.3.1
	Daytona:4.1.3.1.0.6
	Daytona_bp:4.1.3.1
	Ursula:4.1.3.1.0.2
	Ursula_bp:4.1.3.1
	RO_3_71:4.1.3.1
	RCA_bp:4.1.3.1
	RCA:4.1.3.1.0.4
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.2
date	2002.10.25.14.55.11;	author bavison;	state Exp;
branches;
next	4.1;

4.1
date	96.11.06.02.49.37;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.1.3.1
date	96.11.06.02.49.37;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Lots of bools changed to osbools to keep the new compiler happy.
No longer assumes the location of the SVC stack.

Version 0.49. Tagged as 'Picker-0_49'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef callback_H
#define callback_H

/* Changed by J R C 16th Aug 1994 to return |os_error *|.
 */

#ifndef os_H
   #include "os.h"
#endif

#ifndef trace_H
   #include "trace.h"
#endif

/* The type of a callback function.
 */
typedef os_error *callback_fn (void *, void *, osbool *);

/* The type of a callback list.
 */
typedef struct callback_l *callback_l;

/* Function to create a new, empty callback list.
 */
extern os_error *callback_new (callback_l *);

/* Function to delete a callback list.
 */
extern os_error *callback_delete (callback_l);

/* Function to make all the callbacks registered in a given list for
 * the given key values.
 *
 * callback_l     the callback list to be scanned
 * void *         a handle to be passed to the functions called
 * int            the number of key values to be matched
 * ...            the keys themselves
 *
 *    Every function registered in the callback list with the given key
 * values will be called, and passed the given handle, until
 * one is claimed.
 */
extern os_error *callback (callback_l, void *, osbool *, int, ...);

/* Function to register a new callback function.
 *
 * callback_l     the callback list to be extended
 * callback_fn *  the function to call
 * void *         a handle to be passed to the function when it is called
 * int            the number of key values provided
 * ...            a list of integer key values
 *
 *    The function and handle will be registered in the callback list.
 */
extern os_error *callback_register (callback_l, callback_fn *, void *,
      int, ...);

/* Function to deregister a callback function. The callback list is
 * scanned for a single match to the (function, handle) pair at the given
 * key values, and it is deleted.
 */
extern os_error *callback_deregister (callback_l, void *, int, ...);

#if TRACE
   extern void callback_trace (callback_l);
#else
   #define callback_trace(l) SKIP
#endif

#endif
@


4.1
log
@Initial revision
@
text
@d31 1
a31 1
typedef os_error *callback_fn (void *, void *, bool *);
d57 1
a57 1
extern os_error *callback (callback_l, void *, bool *, int, ...);
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@
