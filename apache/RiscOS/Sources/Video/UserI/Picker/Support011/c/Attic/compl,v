head	4.2;
access;
symbols
	RO_5_07:4.2
	sbrodie_sedwards_16Mar2000:4.1.3.1
	Ursula_merge:4.1.3.1
	Picker-0_42:4.1.3.1
	dcotton_autobuild_BaseSW:4.1.3.1
	nturton_Picker-0_40:4.1.3.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.3.1
	Ursula_RiscPC:4.1.3.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1.3.1
	UrsulaBuild_FinalSoftload:4.1.3.1
	rthornb_UrsulaBuild-12Aug1998:4.1.3.1
	aglover_UrsulaBuild-05Aug1998:4.1.3.1
	hsimons_BOCA-1_2-Release:4.1.3.1
	rthornb_UrsulaBuild-29Jul1998:4.1.3.1
	rthornb_UrsulaBuild-22Jul1998:4.1.3.1
	rthornb_UrsulaBuild-15Jul1998:4.1.3.1
	rthornb_UrsulaBuild-07Jul1998:4.1.3.1
	rthornb_UrsulaBuild-17Jun1998:4.1.3.1
	rthornb_UrsulaBuild-03Jun1998:4.1.3.1
	rthornb_UrsulaBuild-27May1998:4.1.3.1
	rthornb_UrsulaBuild-21May1998:4.1.3.1
	rthornb_UrsulaBuild_01May1998:4.1.3.1
	Daytona:4.1.3.1.0.6
	Daytona_bp:4.1.3.1
	Ursula:4.1.3.1.0.2
	Ursula_bp:4.1.3.1
	RO_3_71:4.1.3.1
	RCA_bp:4.1.3.1
	RCA:4.1.3.1.0.4
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.2
date	99.11.24.00.05.01;	author sbrodie;	state dead;
branches;
next	4.1;

4.1
date	96.11.06.02.49.15;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.1.3.1
date	96.11.06.02.49.15;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@  This code has hacked me off for the last time.
Detail:
  As much as possible of the junk has been removed.
  Standard build structure replaces it.
  Unused code removed.
  Support for RISC OS pre-3.60 removed (remove the int'l
    stuff in the CMHG file to reverse this - it must save
    all of 100 bytes!)
  RAM builds now contain the resources for registering in
    ResourceFS (NOTE: this build does not register them yet
    but that's the same as current versions!)  When this is
    fixed, the RAM builds will be the standalone builds.
  RAM build contains a single ResourceFS area which is to be
    registered instead of NINE that it used to register.
  Shame I can't remove all traces of the other directories.
  WinEdit is now invoked from the makefile instead of having
    several silly one-liner Obey scripts to do it.  However, this
    necessitates the perl script to fix the trigraphs (cannot
    use # in makefiles) unless you like 1000s of warnings about
    ANSI trigraphs in the (valid) generated headers.
  Unable to extract it from OSLib or Support011 - it's too
     heavily dependent on them.  Sorry.
Admin:
  RAM builds seem to work.

Version 0.43. Tagged as 'Picker-0_43'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*compl.c - complex numbers in three different lengths*/

#include <math.h>

#include "compl.h"

/*Functions that should be provided, but aren't.*/
static long double lsqrt (long double x1)

{  return (long double) sqrt ((double) x1);
}

static long double latan2 (long double x1, long double x2)

{  return (long double) atan2 ((double) x1, (double) x2);
}

static long double lexp (long double x1)

{  return (long double) exp ((double) x1);
}

static long double llog (long double x1)

{  return (long double) log ((double) x1);
}

static long double lcos (long double x1)

{  return (long double) cos ((double) x1);
}

static long double lsin (long double x1)

{  return (long double) sin ((double) x1);
}
/*------------------------------------------------------------------------*/
/*Transfer functions*/
compl_long compl_leng (compl z1) {compl_long z;
      z.re = (long double) z1.re; z.im = (long double) z1.im; return z;}
compl compl_short_leng (compl_short z1) {compl z;
      z.re = (double) z1.re; z.im = (double) z1.im; return z;}
compl_short compl_shorten (compl z1) {compl_short z;
      z.re = (float) z1.re; z.im = (float) z1.im; return z;}
compl compl_long_shorten (compl_long z1) {compl z;
      z.re = (double) z1.re; z.im = (double) z1.im; return z;}
/*------------------------------------------------------------------------*/
compl compl_compl (double x) {compl z; z.re = x; z.im = 0; return z;}

double compl_abs (compl z1) {return sqrt (SQR (z1.re) + SQR (z1.im));}

double compl_arg (compl z1) {return atan2 (z1.re, z1.im);}

compl compl_conj (compl z1) {compl z;
      z.re = z1.re; z.im = -z1.im;
      return z;}

bool compl_eq (compl z1, compl z2)
      {return z1.re == z2.re && z1.im == z2.im;}

bool compl_ne (compl z1, compl z2)
      {return z1.re != z2.re || z1.im != z2.im;}

compl compl_sub (compl z1, compl z2) {compl z;
      z.re = z1.re - z2.re;
      z.im = z1.im - z2.im; return z;}

compl compl_minus (compl z1) {compl z;
      z.re = -z1.re; z.im = -z1.im;
      return z;}

compl compl_add (compl z1, compl z2) {compl z;
      z.re = z1.re + z2.re;
      z.im = z1.im + z2.im; return z;}

compl compl_mul (compl z1, compl z2) {compl z;
      z.re = z1.re*z2.re - z1.im*z2.im; z.im = z1.re*z2.im + z1.im*z2.re;
      return z;}

compl compl_div (compl z1, compl z2) {compl z; double d;
      d = SQR (z2.re) + SQR (z2.im);
      z.re = (z1.re*z2.re + z1.im*z2.im)/d;
      z.im = (z1.im*z2.re - z1.re*z2.im)/d;
      return z;}

/*Should be amended for more accuracy!*/
compl compl_sqrt (compl z1) {compl z; double d;
      d = sqrt (SQR (z1.re) + SQR (z1.im));
      z.re =             sqrt ((d + z1.re)/2.0);
      z.im = (z1.im >= 0? 1: -1)*sqrt ((d - z1.re)/2.0);
      return z;}

compl compl_inv (compl z1) {compl z; double d;
      d = SQR (z1.re) + SQR (z1.im);
      z.re = z1.re/d; z.im = -z1.im/d;
      return z;}

compl compl_exp (compl z1) {compl z; double d;
      d = exp (z1.re);
      z.re = d*cos (z.im);
      z.im = d*sin (z.im);
      return z;}

compl compl_log (compl z1) {compl z;
      z.re = log (SQR (z1.re) + SQR (z1.im));
      z.im = atan2 (z1.re, z1.im);
      return z;}

compl compl_pow (compl z1, compl z2)
      {return compl_exp (compl_mul (z2, compl_log (z1)));}      
/*------------------------------------------------------------------------*/
compl_long compl_compl_long (long double x) {compl_long z;
      z.re = x; z.im = 0; return z;}

long double compl_long_abs (compl_long z1)
      {return lsqrt (SQR (z1.re) + SQR (z1.im));}

long double compl_long_arg (compl_long z1)
      {return latan2 (z1.re, z1.im);}

compl_long compl_long_conj (compl_long z1) {compl_long z;
      z.re = z1.re; z.im = -z1.im;
      return z;}

bool compl_long_eq (compl_long z1, compl_long z2)
      {return z1.re == z2.re && z1.im == z2.im;}

bool compl_long_ne (compl_long z1, compl_long z2)
      {return z1.re != z2.re || z1.im != z2.im;}

compl_long compl_long_sub (compl_long z1, compl_long z2) {compl_long z;
      z.re = z1.re - z2.re;
      z.im = z1.im - z2.im; return z;}

compl_long compl_long_minus (compl_long z1) {compl_long z;
      z.re = -z1.re; z.im = -z1.im;
      return z;}

compl_long compl_long_add (compl_long z1, compl_long z2) {compl_long z;
      z.re = z1.re + z2.re;
      z.im = z1.im + z2.im; return z;}

compl_long compl_long_mul (compl_long z1, compl_long z2) {compl_long z;
      z.re = z1.re*z2.re - z1.im*z2.im; z.im = z1.re*z2.im + z1.im*z2.re;
      return z;}

compl_long compl_long_div (compl_long z1, compl_long z2) {compl_long z;
      long double d;
      d = SQR (z2.re) + SQR (z2.im);
      z.re = (z1.re*z2.re + z1.im*z2.im)/d;
      z.im = (z1.im*z2.re - z1.re*z2.im)/d;
      return z;}

compl_long compl_long_sqrt (compl_long z1) {compl_long z; long double d;
      d = lsqrt (SQR (z1.re) + SQR (z1.im));
      z.re =             lsqrt ((d + z1.re)/2.0L);
      z.im = (z1.im >= 0? 1: -1)*lsqrt ((d - z1.re)/2.0L);
      return z;}

compl_long compl_long_inv (compl_long z1) {compl_long z;
      long double d;
      d = SQR (z1.re) + SQR (z1.im);
      z.re = z1.re/d; z.im = -z1.im/d;
      return z;}

compl_long compl_long_exp (compl_long z1) {compl_long z; long double d;
      d = lexp (z1.re);
      z.re = d*lcos (z.im);
      z.im = d*lsin (z.im);
      return z;}

compl_long compl_long_log (compl_long z1) {compl_long z;
      z.re = llog (SQR (z1.re) + SQR (z1.im));
      z.im = latan2 (z1.re, z1.im);
      return z;}

compl_long compl_long_pow (compl_long z1, compl_long z2)
      {return compl_long_exp (compl_long_mul (z2, compl_long_log (z1)));} 
/*------------------------------------------------------------------------*/
compl_short compl_compl_short (float x) {compl_short z;
      z.re = x; z.im = 0; return z;}

float compl_short_abs (compl_short z1)
      {return (float) sqrt (SQR ((double) z1.re) + SQR ((double) z1.im));}

float compl_short_arg (compl_short z1)
      {return (float) atan2 (z1.re, z1.im);}

compl_short compl_short_conj (compl_short z1) {compl_short z;
      z.re = z1.re; z.im = -z1.im;
      return z;}

bool compl_short_eq (compl_short z1, compl_short z2)
      {return z1.re == z2.re && z1.im == z2.im;}

bool compl_short_ne (compl_short z1, compl_short z2)
      {return z1.re != z2.re || z1.im != z2.im;}

compl_short compl_short_sub (compl_short z1, compl_short z2) {compl_short z;
      z.re = z1.re - z2.re;
      z.im = z1.im - z2.im; return z;}

compl_short compl_short_minus (compl_short z1) {compl_short z;
      z.re = -z1.re; z.im = -z1.im;
      return z;}

compl_short compl_short_add (compl_short z1, compl_short z2) {compl_short z;
      z.re = z1.re + z2.re;
      z.im = z1.im + z2.im; return z;}

compl_short compl_short_mul (compl_short z1, compl_short z2) {compl_short z;
      z.re = z1.re*z2.re - z1.im*z2.im; z.im = z1.re*z2.im + z1.im*z2.re;
      return z;}

compl_short compl_short_div (compl_short z1, compl_short z2) {compl_short z;
      float d;
      d = SQR (z2.re) + SQR (z2.im);
      z.re = (z1.re*z2.re + z1.im*z2.im)/d;
      z.im = (z1.im*z2.re - z1.re*z2.im)/d;
      return z;}

compl_short compl_short_sqrt (compl_short z1) {compl_short z; float d;
      d = (float) sqrt (SQR ((double) z1.re) + SQR ((double) z1.im));
      z.re = (float)              sqrt (((double) d + (double) z1.re)/2.0);
      z.im = (float) ((z1.im >= 0? 1: -1)*sqrt (((double) d - (double) z1.re)/2.0));
      return z;}

compl_short compl_short_inv (compl_short z1) {compl_short z;
      float d;
      d = SQR (z1.re) + SQR (z1.im);
      z.re = z1.re/d; z.im = -z1.im/d;
      return z;}

compl_short compl_short_exp (compl_short z1) {compl_short z; float d;
      d = (float) exp (z1.re);
      z.re = (float) (d*cos (z.im));
      z.im = (float) (d*sin (z.im));
      return z;}

compl_short compl_short_log (compl_short z1) {compl_short z;
      z.re = (float) log (SQR ((double) z1.re) + SQR ((double) z1.im));
      z.im = (float) atan2 (z1.re, z1.im);
      return z;}

compl_short compl_short_pow (compl_short z1, compl_short z2)
      {return compl_short_exp (compl_short_mul (z2, compl_short_log (z1)));}
@


4.1
log
@Initial revision
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@
