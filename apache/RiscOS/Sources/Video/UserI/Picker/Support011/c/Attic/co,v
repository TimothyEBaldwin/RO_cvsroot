head	4.2;
access;
symbols
	RO_5_07:4.2
	sbrodie_sedwards_16Mar2000:4.1.3.1
	Ursula_merge:4.1.3.1
	Picker-0_42:4.1.3.1
	dcotton_autobuild_BaseSW:4.1.3.1
	nturton_Picker-0_40:4.1.3.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.3.1
	Ursula_RiscPC:4.1.3.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1.3.1
	UrsulaBuild_FinalSoftload:4.1.3.1
	rthornb_UrsulaBuild-12Aug1998:4.1.3.1
	aglover_UrsulaBuild-05Aug1998:4.1.3.1
	hsimons_BOCA-1_2-Release:4.1.3.1
	rthornb_UrsulaBuild-29Jul1998:4.1.3.1
	rthornb_UrsulaBuild-22Jul1998:4.1.3.1
	rthornb_UrsulaBuild-15Jul1998:4.1.3.1
	rthornb_UrsulaBuild-07Jul1998:4.1.3.1
	rthornb_UrsulaBuild-17Jun1998:4.1.3.1
	rthornb_UrsulaBuild-03Jun1998:4.1.3.1
	rthornb_UrsulaBuild-27May1998:4.1.3.1
	rthornb_UrsulaBuild-21May1998:4.1.3.1
	rthornb_UrsulaBuild_01May1998:4.1.3.1
	Daytona:4.1.3.1.0.6
	Daytona_bp:4.1.3.1
	Ursula:4.1.3.1.0.2
	Ursula_bp:4.1.3.1
	RO_3_71:4.1.3.1
	RCA_bp:4.1.3.1
	RCA:4.1.3.1.0.4
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.2
date	99.11.24.00.04.58;	author sbrodie;	state dead;
branches;
next	4.1;

4.1
date	96.11.06.02.49.14;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.1.3.1
date	96.11.06.02.49.14;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@  This code has hacked me off for the last time.
Detail:
  As much as possible of the junk has been removed.
  Standard build structure replaces it.
  Unused code removed.
  Support for RISC OS pre-3.60 removed (remove the int'l
    stuff in the CMHG file to reverse this - it must save
    all of 100 bytes!)
  RAM builds now contain the resources for registering in
    ResourceFS (NOTE: this build does not register them yet
    but that's the same as current versions!)  When this is
    fixed, the RAM builds will be the standalone builds.
  RAM build contains a single ResourceFS area which is to be
    registered instead of NINE that it used to register.
  Shame I can't remove all traces of the other directories.
  WinEdit is now invoked from the makefile instead of having
    several silly one-liner Obey scripts to do it.  However, this
    necessitates the perl script to fix the trigraphs (cannot
    use # in makefiles) unless you like 1000s of warnings about
    ANSI trigraphs in the (valid) generated headers.
  Unable to extract it from OSLib or Support011 - it's too
     heavily dependent on them.  Sorry.
Admin:
  RAM builds seem to work.

Version 0.43. Tagged as 'Picker-0_43'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*co.c - coroutine implementation*/

/*From CLib*/
#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>

/*From Support*/
#include "co.h"
#include "m.h"
#include "trace.h"

#define STACK_DISP 0x230
#define JMP_FP     6
#define JMP_SP     7
#define JMP_SL     8
#define JMP_LR     9

#define V3_FP_MASK 0x80000000
#define SC_NEXT    1
#define SC_PREV    2
#define SC_SIZE    3

#define STACK_CHUNK_SIZE 4096

struct co_routine {jmp_buf env; int *stack;};

static struct co_routine Main_Co;

typedef void Cofunction (void *);

static co_routine Starter, Current = &Main_Co;
static void *Parameter;
static Cofunction *Start_Proc;

/*Resume a coroutine. Coroutine may be current.*/
void *co_resume (co_routine r, void *p)

{  if (setjmp (Current->env) == 0)
   {  Current = r;
      Parameter = p;
      longjmp (r->env, 0);
   }

   return Parameter;
}

/*Initialise the coroutine handling. Establish the mainline coroutine.*/
void co_init (void)

{  (void) setjmp (Main_Co.env);
   Main_Co.stack = (int *) (Main_Co.env [JMP_SL] - STACK_DISP);
   tracef ("co_init: stack 0x%X = 0x%X - 0x%X\n" _
       Main_Co.stack _ Main_Co.env [JMP_SL] _ STACK_DISP);
}

void co_term (void)

{  longjmp (Main_Co.env, 0);
}

/*Coroutine starter for co_create.*/
static void Start (void)

{  Cofunction *proc = Start_Proc;

   (void) (*proc) (co_resume (Starter, NULL));
   fprintf (stderr, "Exit from coroutine\n");
   exit (1);
}

/*Create coroutine and start executing.*/
co_routine co_create (Cofunction *proc)

{  co_routine r;
   int *stack;

   r = malloc (sizeof *r);

   /*Put STACK_DISP space at beginning of space.*/
   stack = malloc (STACK_DISP + STACK_CHUNK_SIZE);

   memcpy (stack, Current->stack, STACK_DISP);

   stack [SC_NEXT] = NULL;
   stack [SC_PREV] = NULL;
   stack [SC_SIZE] = STACK_DISP + STACK_CHUNK_SIZE;

   setjmp (r->env);
   r->env [JMP_SL] = (int) stack + STACK_DISP;
   r->env [JMP_SP] = (int) stack + STACK_DISP + STACK_CHUNK_SIZE;
   r->env [JMP_LR] = (int) Start;

   Start_Proc = proc;
   Starter = Current;
   co_resume (r, NULL);

   return r;
}

void co_delete (co_routine r)

{  free (r);
}
@


4.1
log
@Initial revision
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@
