head	4.2;
access;
symbols
	RO_5_07:4.2
	sbrodie_sedwards_16Mar2000:4.1.3.1
	Ursula_merge:4.1.3.1
	Picker-0_42:4.1.3.1
	dcotton_autobuild_BaseSW:4.1.3.1
	nturton_Picker-0_40:4.1.3.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.3.1
	Ursula_RiscPC:4.1.3.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1.3.1
	UrsulaBuild_FinalSoftload:4.1.3.1
	rthornb_UrsulaBuild-12Aug1998:4.1.3.1
	aglover_UrsulaBuild-05Aug1998:4.1.3.1
	hsimons_BOCA-1_2-Release:4.1.3.1
	rthornb_UrsulaBuild-29Jul1998:4.1.3.1
	rthornb_UrsulaBuild-22Jul1998:4.1.3.1
	rthornb_UrsulaBuild-15Jul1998:4.1.3.1
	rthornb_UrsulaBuild-07Jul1998:4.1.3.1
	rthornb_UrsulaBuild-17Jun1998:4.1.3.1
	rthornb_UrsulaBuild-03Jun1998:4.1.3.1
	rthornb_UrsulaBuild-27May1998:4.1.3.1
	rthornb_UrsulaBuild-21May1998:4.1.3.1
	rthornb_UrsulaBuild_01May1998:4.1.3.1
	Daytona:4.1.3.1.0.6
	Daytona_bp:4.1.3.1
	Ursula:4.1.3.1.0.2
	Ursula_bp:4.1.3.1
	RO_3_71:4.1.3.1
	RCA_bp:4.1.3.1
	RCA:4.1.3.1.0.4
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.2
date	99.11.24.00.05.10;	author sbrodie;	state dead;
branches;
next	4.1;

4.1
date	96.11.06.02.49.19;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.1.3.1
date	96.11.06.02.49.19;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@  This code has hacked me off for the last time.
Detail:
  As much as possible of the junk has been removed.
  Standard build structure replaces it.
  Unused code removed.
  Support for RISC OS pre-3.60 removed (remove the int'l
    stuff in the CMHG file to reverse this - it must save
    all of 100 bytes!)
  RAM builds now contain the resources for registering in
    ResourceFS (NOTE: this build does not register them yet
    but that's the same as current versions!)  When this is
    fixed, the RAM builds will be the standalone builds.
  RAM build contains a single ResourceFS area which is to be
    registered instead of NINE that it used to register.
  Shame I can't remove all traces of the other directories.
  WinEdit is now invoked from the makefile instead of having
    several silly one-liner Obey scripts to do it.  However, this
    necessitates the perl script to fix the trigraphs (cannot
    use # in makefiles) unless you like 1000s of warnings about
    ANSI trigraphs in the (valid) generated headers.
  Unable to extract it from OSLib or Support011 - it's too
     heavily dependent on them.  Sorry.
Admin:
  RAM builds seem to work.

Version 0.43. Tagged as 'Picker-0_43'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*trfm.c - trfm stuff*/

#include <limits.h>

#include "macros.h"
#include "os.h"

#include "muldiv.h"
#include "trace.h"
#include "trfm.h"

void trfm_mul (os_trfm *r, os_trfm *m1, os_trfm *m2)

   /*r = m1 * m2*/

{  int i, j, k;

   tracef ("trfm_mul\n");

   for (j = 0; j < 2; j++)
   {  for (i = 0; i < 3; i++)
      {  r->entries [i] [j] = 0;

         for (k = 0; k < 2; k++)
            r->entries [i] [j] += muldiv (m1->entries [k] [j],
                  m2->entries [i] [k], 1 << 16);
      }

      r->entries [2] [j] += m1->entries [2] [j];
}  }
/*------------------------------------------------------------------------*/
void trfm_point (os_coord *r, os_trfm *m, os_coord *r1)

   /*r = m * r1, where |r1| is representing a point*/

{  tracef ("trfm_point\n");

   r->x = muldiv (m->entries [0] [0], r1->x, 1 << 16) +
         muldiv (m->entries [1] [0], r1->y, 1 << 16) +
         m->entries [2] [0];

   r->y = muldiv (m->entries [0] [1], r1->x, 1 << 16) +
         muldiv (m->entries [1] [1], r1->y, 1 << 16) +
         m->entries [2] [1];
}
/*------------------------------------------------------------------------*/
void trfm_dir (os_coord *r, os_trfm *m, os_coord *r1)

   /*r = m * r1, where |r1| is representing a direction*/

{  tracef ("trfm_dir\n");

   r->x = muldiv (m->entries [0] [0], r1->x, 1 << 16) +
         muldiv (m->entries [1] [0], r1->y, 1 << 16);

   r->y = muldiv (m->entries [0] [1], r1->x, 1 << 16) +
         muldiv (m->entries [1] [1], r1->y, 1 << 16);
}
/*------------------------------------------------------------------------*/
void trfm_inv (os_trfm *m, os_trfm *m1)

   /*m = m1^-1. Don't try to invert a singular matrix.*/

{  int det, alpha, beta, gamma, delta;

   tracef ("trfm_inv\n");

   det = trfm_det (m1);

   alpha = muldiv (m1->entries [0] [0], 1 << 16, det);
   beta =  muldiv (m1->entries [0] [1], 1 << 16, det);
   gamma = muldiv (m1->entries [1] [0], 1 << 16, det);
   delta = muldiv (m1->entries [1] [1], 1 << 16, det);

   m->entries [0] [0] = delta;
   m->entries [0] [1] = -beta;
   m->entries [1] [0] = -gamma;
   m->entries [1] [1] = alpha;
   m->entries [2] [0] = muldiv (gamma, m1->entries [2] [1], 1 << 16) -
         muldiv (delta, m1->entries [2] [0], 1 << 16);
   m->entries [2] [1] = -muldiv (alpha, m1->entries [2] [1], 1 << 16) +
         muldiv (beta, m1->entries [2] [0], 1 << 16);
}
/*------------------------------------------------------------------------*/
int trfm_det (os_trfm *m)

   /*det m*/

{  tracef ("trfm_det\n");

   return muldiv (m->entries [0] [0], m->entries [1] [1], 1 << 16) -
         muldiv (m->entries [0] [1], m->entries [1] [0], 1 << 16);
}
/*------------------------------------------------------------------------*/
void trfm_box (os_box *b, os_trfm *m, os_box *b1)

   /*set |b| to the bbox of |b1| after transformation by |m|.*/

{  os_coord c [4], c1 [4];
   int i;

   tracef ("trfm_box\n");

   /*Get the four corners of |b1|.*/
   c1 [0].x = b1->x0, c1 [0].y = b1->y0;
   c1 [1].x = b1->x1, c1 [1].y = b1->y0;
   c1 [2].x = b1->x1, c1 [2].y = b1->y1;
   c1 [3].x = b1->x0, c1 [3].y = b1->y1;

   /*Transform them all.*/
   for (i = 0; i < 4; i++)
      trfm_point (&c [i], m, &c1 [i]);

   /*Bound the four new points.*/
   b->x0 = b->y0 = INT_MAX;
   b->x1 = b->y1 =-INT_MAX;

   for (i = 0; i < 4; i++)
   {  (void) MINAB (b->x0, c [i].x);
      (void) MINAB (b->y0, c [i].y);
      (void) MAXAB (b->x1, c [i].x);
      (void) MAXAB (b->y1, c [i].y);
}  }
@


4.1
log
@Initial revision
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@
