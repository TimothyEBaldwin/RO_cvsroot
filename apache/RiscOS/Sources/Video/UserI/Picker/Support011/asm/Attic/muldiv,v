head	4.2;
access;
symbols
	RO_5_07:4.2
	sbrodie_sedwards_16Mar2000:4.1.3.1
	Ursula_merge:4.1.3.1
	Picker-0_42:4.1.3.1
	dcotton_autobuild_BaseSW:4.1.3.1
	nturton_Picker-0_40:4.1.3.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.3.1
	Ursula_RiscPC:4.1.3.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1.3.1
	UrsulaBuild_FinalSoftload:4.1.3.1
	rthornb_UrsulaBuild-12Aug1998:4.1.3.1
	aglover_UrsulaBuild-05Aug1998:4.1.3.1
	hsimons_BOCA-1_2-Release:4.1.3.1
	rthornb_UrsulaBuild-29Jul1998:4.1.3.1
	rthornb_UrsulaBuild-22Jul1998:4.1.3.1
	rthornb_UrsulaBuild-15Jul1998:4.1.3.1
	rthornb_UrsulaBuild-07Jul1998:4.1.3.1
	rthornb_UrsulaBuild-17Jun1998:4.1.3.1
	rthornb_UrsulaBuild-03Jun1998:4.1.3.1
	rthornb_UrsulaBuild-27May1998:4.1.3.1
	rthornb_UrsulaBuild-21May1998:4.1.3.1
	rthornb_UrsulaBuild_01May1998:4.1.3.1
	Daytona:4.1.3.1.0.6
	Daytona_bp:4.1.3.1
	Ursula:4.1.3.1.0.2
	Ursula_bp:4.1.3.1
	RO_3_71:4.1.3.1
	RCA_bp:4.1.3.1
	RCA:4.1.3.1.0.4
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.2
date	99.11.24.00.04.41;	author sbrodie;	state dead;
branches;
next	4.1;

4.1
date	96.11.06.02.49.12;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.1.3.1
date	96.11.06.02.49.12;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@  This code has hacked me off for the last time.
Detail:
  As much as possible of the junk has been removed.
  Standard build structure replaces it.
  Unused code removed.
  Support for RISC OS pre-3.60 removed (remove the int'l
    stuff in the CMHG file to reverse this - it must save
    all of 100 bytes!)
  RAM builds now contain the resources for registering in
    ResourceFS (NOTE: this build does not register them yet
    but that's the same as current versions!)  When this is
    fixed, the RAM builds will be the standalone builds.
  RAM build contains a single ResourceFS area which is to be
    registered instead of NINE that it used to register.
  Shame I can't remove all traces of the other directories.
  WinEdit is now invoked from the makefile instead of having
    several silly one-liner Obey scripts to do it.  However, this
    necessitates the perl script to fix the trigraphs (cannot
    use # in makefiles) unless you like 1000s of warnings about
    ANSI trigraphs in the (valid) generated headers.
  Unable to extract it from OSLib or Support011 - it's too
     heavily dependent on them.  Sorry.
Admin:
  RAM builds seem to work.

Version 0.43. Tagged as 'Picker-0_43'
@
text
@a1 RN 0
a2 RN 1
a3 RN 2
a4 RN 3
v1 RN 4
v2 RN 5
ip RN 12
sp RN 13
lr RN 14
pc RN 15

        AREA |C$$code|, CODE, READONLY

        EXPORT muldiv
;;;;    IMPORT raise

muldiv
 ; muldiv(a, b, c)
 ; result = a*b/c
 ; the intermediate product is 64 bits long
 ; do everything using moduluses, and sort out signs later

        STMFD   sp!, {a1, a2, a3, a4, v1, v2, lr}

 ; first, the double-length product, returned in a3 & a4
         ; uses ip, a1 and a2 as workspace
        MOV     a3, #0
        MOV     a4, #0
        MOV     ip, #0
        CMPS    a2, #0
        RSBLT   a2, a2, #0      ; abs b
        MOV     v2, a2
        CMPS    a1, #0
        RSBLT   a1, a1, #0      ; abs a
muldiv0
        MOVS    a2, a2, LSR #1
        BCC     muldiv1
        ADDS    a4, a4, a1
        ADC     a3, a3, ip
muldiv1
        MOVS    a1, a1, ASL #1
        ADC     ip, ip, ip
        CMPS    a2, #0
        BNE     muldiv0

 ; now the 64*32 bit divide
 ; dividend in a3 and a4
 ; remainder ends up in a4; quotient in ip
 ; uses a1 and a2 to hold the (shifted) divisor;
 ;      v1 for the current bit in the quotient
        LDR     a2, [sp, #8]    ; recover divisor
        CMPS    a2, #0
        LDMEQFD sp!, {a1-a4, v1, v2, pc}^
        ;;was BEQ muldiv_by_0, but we might be a module
        RSBLT   a2, a2, #0      ; abs c
        MOV     v2, a2
        MOV     ip, #0
        MOV     a1, #0
        MOV     v1, #0
        MOV     lr, #1
muldiv2
        CMPS    a1, #&80000000
        BCS     muldiv3
        CMPS    a1, a3
        CMPEQS  a2, a4          ; compare of [a1, a2] against [a3, a4]
        BCS     muldiv3
        MOVS    a2, a2, ASL #1
        MOV     a1, a1, ASL #1
        ADC     a1, a1, #0
        ADD     v1, v1, #1
        B       muldiv2

muldiv3
        CMPS    a1, a3
        CMPEQS  a2, a4
        BHI     muldiv4
        CMPS    v1, #31
        ADDLE   ip, ip, lr, ASL v1
        SUBS    a4, a4, a2
        SBC     a3, a3, a1
muldiv4
        MOVS    a1, a1, ASR #1
        MOV     a2, a2, RRX
        SUBS    v1, v1, #1
        BGE     muldiv3

 ; now all we need to do is sort out the signs.
        LDMFD   sp!, {a1, a2, a3, v1}
        EOR     a2, a2, a1      ; a2 has the sign of a*b: a3 is the sign of c
        MOV     a1, ip
        TEQS    a2, a3          ; if a*b and c have opposite signs,
        RSBMI   a1, a1, #0      ; negate the quotient
        CMPS    a2, #0          ; and if the dividend was negative,
        RSBLT   a4, a4, #0      ; negate the remainder
;;;;    Now discard the remainder - J R C 19 March 1991
;;;;    STR     a4, [v1]
        LDMFD   sp!, {v1, v2, pc}^

muldiv_by_0 ;not used
;;;;    LDMFD   sp!, {a1-a4, v1, v2, lr}
;;;;    MOV     a1, #2          ; SIGFPE
;;;;    B       raise

        END
@


4.1
log
@Initial revision
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@
