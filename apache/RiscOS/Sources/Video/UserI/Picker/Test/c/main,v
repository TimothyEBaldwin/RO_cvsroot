head	4.1;
access;
symbols
	Picker-0_56-1:4.1
	Picker-0_56:4.1
	Picker-0_55:4.1
	Picker-0_54:4.1
	Picker-0_53:4.1
	Picker-0_52:4.1
	Picker-0_51:4.1
	Picker-0_50:4.1
	RO_5_07:4.1
	Picker-0_49:4.1
	Picker-0_48:4.1
	dellis_autobuild_BaseSW:4.1
	Picker-0_47:4.1
	Picker-0_46:4.1
	sbrodie_sedwards_16Mar2000:4.1
	Picker-0_45:4.1
	Picker-0_44:4.1
	Picker-0_43:4.1
	Ursula_merge:4.1
	Picker-0_42:4.1
	dcotton_autobuild_BaseSW:4.1
	nturton_Picker-0_40:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_Picker_0_38:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	hsimons_BOCA-1_2-Release:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.46.20;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.46.20;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.50.12;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.01.44;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.23.53;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*main.c - test programme for colour picker*/

/*From CLib*/
#include <stdio.h>
#include <stdlib.h>

/*From OSLib*/
#include "help.h"
#include "macros.h"
#include "os.h"
#include "wimp.h"
#include "wimpreadsysinfo.h"

/*From Support*/
#include "application.h"
#include "callback.h"
#include "riscos.h"
#include "trace.h"

/*Local*/
#include "colourpicker.h"

static int Dialogue_Count;

static int X0 = 500, Y1 = 600;

static os_error *Null (void *d, void *b, bool *unclaimed)

{  colourpicker_dialogue dialogue;
   os_error *error;

   NOT_USED (b)

   tracef ("Null\n");

#if 0 /*good for a giggle*/
   X0 += 50*(2*(rand ()/(double) RAND_MAX) - 1);
   Y1 += 50*(2*(rand ()/(double) RAND_MAX) - 1);

   dialogue.visible.x0 = X0;
   dialogue.visible.y1 = Y1;

   if ((error = xcolourpicker_update_dialogue (colourpicker_UPDATE_VISIBLE,
         *(colourpicker_d *) d, &dialogue)) != NULL)
      goto finish;
#endif

finish:
   return error;
}
/*------------------------------------------------------------------------*/
static os_error *Quit (void *d, void *b, bool *unclaimed)

{  tracef ("Quit\n");

   NOT_USED (d)
   NOT_USED (b)

   application_quit = TRUE;

   return NULL;
}
/*------------------------------------------------------------------------*/
static os_error *Close (void *d, void *b, bool *unclaimed)

{  os_error *error = NULL;

   NOT_USED (d)

   tracef ("Close\n");

   if ((error = xcolourpicker_close_dialogue (NONE,
         ((colourpicker_message_close_dialogue_request *)
         &((wimp_block *) b) ASREF message.data)->d)) != NULL)
      goto finish;

   if (--Dialogue_Count == 0) application_quit = TRUE;

finish:
   return error;
}
/*------------------------------------------------------------------------*/
static os_error *Reset (void *d, void *b, bool *unclaimed)

{  os_error *error = NULL;

   NOT_USED (d)

   tracef ("Reset\n");

   if ((error = xos_bell ()) != NULL)
      goto finish;

finish:
   return error;
}
/*------------------------------------------------------------------------*/
static os_error *Receive (void *d, void *b, bool *unclaimed)

{  char new_title [DEC_WIDTH + 1];
   colourpicker_dialogue dialogue;
   os_error *error = NULL;

   static int Received;

   NOT_USED (d)

   tracef ("Receive\n");

   sprintf (new_title, "%d", Received++);
   dialogue.title = new_title; /*rest irrelevant*/

   if ((error = xcolourpicker_update_dialogue
         (colourpicker_UPDATE_TITLE,
         ((colourpicker_message_colour_changed *) &((wimp_block *) b) ASREF
         message.data)->d, &dialogue)) != NULL)
      goto finish;

finish:
   return error;
}
/*------------------------------------------------------------------------*/
int main (void)

{  colourpicker_dialogue d1, d2, d3;
   colourpicker_d d [3];
   wimp_MESSAGE_LIST (7) list =
      {  message_HELP_REQUEST,
         message_COLOUR_PICKER_RESET_COLOUR_REQUEST,
         message_COLOUR_PICKER_CLOSE_DIALOGUE_REQUEST,
         message_COLOUR_PICKER_OPEN_PARENT_REQUEST,
         message_COLOUR_PICKER_COLOUR_CHANGED,
         message_COLOUR_PICKER_COLOUR_CHOICE,
         message_QUIT
      };
   os_error *error;

   trace_initialise ("Trace$To");

   d1.flags       = colourpicker_DIALOGUE_OFFERS_TRANSPARENT |
                         colourpicker_DIALOGUE_TRANSPARENT |
                         colourpicker_DIALOGUE_TYPE_CLICK_DRAG <<
                         colourpicker_DIALOGUE_TYPE_SHIFT |
                         colourpicker_DIALOGUE_IGNORE_HELP;
   d1.title       = "Colour Dialogue Box: Button type Never";
   d1.visible.x0  = X0;
   d1.visible.y0  = 500;
   d1.visible.x1  = 600;
   d1.visible.y1  = Y1;
   d1.xscroll     = 0;
   d1.yscroll     = 0;
   d1.colour      = os_COLOUR_RED;
   d1.size        = 0;

   d2 = d1;
   d2.flags       = colourpicker_DIALOGUE_OFFERS_TRANSPARENT |
                         colourpicker_DIALOGUE_TYPE_CLICK <<
                         colourpicker_DIALOGUE_TYPE_SHIFT;
   d2.title       = "Another picker (Click)";
   d2.visible.x0 += 200;
   d2.visible.y1 -= 200;
   d2.colour      = os_COLOUR_GREEN;
   d2.size        = 4;
   d2.info [0]    = colourpicker_MODEL_CMYK;

   d3 = d1;
   d3.flags       = colourpicker_DIALOGUE_TYPE_NEVER <<
                         colourpicker_DIALOGUE_TYPE_SHIFT |
                         colourpicker_DIALOGUE_IGNORE_HELP;
   d3.title       = NULL;
   d3.visible.x0 += 400;
   d3.visible.y1 += 200;
   d3.colour      = os_COLOUR_BLUE;
   d3.size        = 4;
   d3.info [0]    = colourpicker_MODEL_HSV;

   if ((error = application_initialise ("ColourPickers",
         (wimp_message_list *) &list)) != NULL)
      goto finish;

   tracef ("ColourPicker_OpenDialogue ...\n");
   if ((error = xcolourpicker_open_dialogue (NONE, &d1,
         &d [0], NULL)) != NULL /*||
       (error = xcolourpicker_open_dialogue (NONE, &d2, &d [1], NULL)) !=
         NULL ||
       (error = xcolourpicker_open_dialogue (NONE, &d3, &d [2], NULL)) !=
         NULL*/)
      goto finish;
   tracef ("opened 0x%X, 0x%X, 0x%X\n" _ d [0] _ d [1] _ d [2]);

   Dialogue_Count = 1;

   if
   (  (error = callback_register (application_list, &Null, d, 1,
            wimp_NULL_REASON_CODE)) != NULL ||
      (error = callback_register (application_list, &Quit, d, 2,
            wimp_USER_MESSAGE, message_QUIT)) != NULL ||
      (error = callback_register (application_list, &Quit, d, 2,
            wimp_USER_MESSAGE_RECORDED, message_QUIT)) != NULL ||
      (error = callback_register (application_list, &Close, d, 2,
            wimp_USER_MESSAGE,
            message_COLOUR_PICKER_CLOSE_DIALOGUE_REQUEST)) != NULL ||
      (error = callback_register (application_list, &Close, d, 2,
            wimp_USER_MESSAGE_RECORDED,
            message_COLOUR_PICKER_CLOSE_DIALOGUE_REQUEST)) != NULL ||
      (error = callback_register (application_list, &Receive, d, 2,
            wimp_USER_MESSAGE, message_COLOUR_PICKER_COLOUR_CHANGED)) !=
            NULL ||
      (error = callback_register (application_list, &Reset, d, 2,
            wimp_USER_MESSAGE, message_COLOUR_PICKER_RESET_COLOUR_REQUEST))             != NULL
   )
      goto finish;

   /*application_claim (wimp_NULL_REASON_CODE);*/
   application ();

   if ((error = application_terminate ()) != NULL)
      goto finish;

finish:
   application_report_error (error);
   return 0;
}
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
