head	4.3;
access;
symbols
	Picker-0_56-1:4.3
	Picker-0_56:4.3
	Picker-0_55:4.3
	Picker-0_54:4.3
	Picker-0_53:4.2
	Picker-0_52:4.2
	Picker-0_51:4.2
	Picker-0_50:4.2
	RO_5_07:4.2
	Picker-0_49:4.2
	Picker-0_48:4.1
	dellis_autobuild_BaseSW:4.1
	Picker-0_47:4.1
	Picker-0_46:4.1
	sbrodie_sedwards_16Mar2000:4.1
	Picker-0_45:4.1
	Picker-0_44:4.1
	Picker-0_43:4.1
	Ursula_merge:4.1
	Picker-0_42:4.1
	dcotton_autobuild_BaseSW:4.1
	nturton_Picker-0_40:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_Picker_0_38:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	hsimons_BOCA-1_2-Release:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2013.08.06.23.59.18;	author jlee;	state Exp;
branches;
next	4.2;
commitid	EqT0dB8QNXJN8s0x;

4.2
date	2002.10.25.14.55.12;	author bavison;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.45.53;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.45.53;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.47.33;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.00.48;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.22.59;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Add support for new screen modes
Detail:
  c/rgb - Dither the RGB colourspace image in 4096 colour modes; to me this looks better than leaving it undithered
  c/tables, h/tables - Cache the NColour value so that RGB code can detect 4K colour modes
Admin:
  Tested on BB-xM
  Part of an implementation of the Extended Framebuffer Format Spec:
  http://www.riscosopen.org/wiki/documentation/show/Extended%20Framebuffer%20Format%20Specification


Version 0.54. Tagged as 'Picker-0_54'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*tables.c*/

/*History

   15th Sep 1994 J R C Started

*/

/*From CLib*/

/*From OSLib*/
#include "colourtrans.h"
#include "os.h"
#include "osspriteop.h"

/*From Support*/
#include "m.h"
#include "riscos.h"
#include "tables.h"

typedef
   struct Mode_Descriptor
      {  bits flags;
         int xsize;
         int ysize;
         int log2_bpp;
         int frame_rate;
         int terminator;
      }
      Mode_Descriptor;

int tables_xeig, tables_yeig, tables_log2_bpp, tables_ncolour;

osspriteop_trans_tab *tables_translation = NULL, *tables_injection = NULL,
      *tables_surjection = NULL;

static osbool Found_Tables;

os_error *tables_initialise (void)

{  Found_Tables = FALSE;

   return NULL;
}
/*------------------------------------------------------------------------*/
os_error *tables_terminate (void)

{  tracef ("tables_lose\n");

   if (Found_Tables)
   {  m_FREE (tables_translation, 0);
      m_FREE (tables_injection, 0);
      m_FREE (tables_surjection, 0);

      Found_Tables = FALSE;
   }

   return NULL;
}
/*------------------------------------------------------------------------*/
os_error *tables_ensure (void)

{  os_error *error = NULL;
   int size;

   static Mode_Descriptor Wide_Mode = {1, 800, 600, 4, -1, -1};

   tracef ("tables_find\n");

   if (!Found_Tables)
   {  tracef ("finding new tables ...\n");
      tables_translation = tables_injection = tables_surjection = NULL;
         /*Fix bug: clear these in case there's an error. J R C 9th Mar 1995*/

      /*Read new size of translation table for USE_SCALING.*/
      if ((error = xcolourtrans_generate_table
            ((os_mode) (6 << 27 | 180 << 14 | 180 << 1 | 1),
            colourtrans_CURRENT_PALETTE, colourtrans_CURRENT_MODE,
            colourtrans_CURRENT_PALETTE, NULL, 1 << 1, SKIP, SKIP,
            &size)) != NULL)
         goto finish;
      tracef ("size %d\n" _ size);

      /*Get that much store.*/
      if (size != 0)
      {  if ((tables_translation = m_ALLOC (size)) == NULL)
         {  error = riscos_error_lookup (os_GLOBAL_NO_MEM, "NoMem");
            goto finish;
         }
         tracef ("tables_translation 0x%X\n" _ tables_translation);

         /*Get the new table.*/
         if ((error = xcolourtrans_generate_table
               ((os_mode) (6 << 27 | 180 << 14 | 180 << 1 | 1),
               colourtrans_CURRENT_PALETTE, colourtrans_CURRENT_MODE,
               colourtrans_CURRENT_PALETTE, tables_translation, 1 << 1, SKIP,
               SKIP, NULL)) != NULL)
            goto finish;
         tracef ("filled in tables_translation\n");
      }
      else
         tables_translation = NULL;

      /*Read new size of surjection table for USE_DIFFUSION.*/
      if ((error = xcolourtrans_generate_table
            ((os_mode) (5 << 27 | 180 << 14 | 180 << 1 | 1),
            colourtrans_CURRENT_PALETTE,
            colourtrans_CURRENT_MODE, colourtrans_CURRENT_PALETTE, NULL,
            1 << 0 /*R1 is a sprite pointer*/ | 1 << 1 /*use current
            palette*/, SKIP, SKIP, &size)) != NULL)
         goto finish;
      tracef ("Surjection table size %d\n" _ size);

      /*Get that much store.*/
      if (size != 0)
      {  if ((tables_surjection = m_ALLOC (size)) == NULL)
         {  error = riscos_error_lookup (os_GLOBAL_NO_MEM, "NoMem");
            goto finish;
         }

         /*Get the new table.*/
         if ((error = xcolourtrans_generate_table
               ((os_mode) (5 << 27 | 180 << 14 | 180 << 1 | 1),
               colourtrans_CURRENT_PALETTE, colourtrans_CURRENT_MODE,
               colourtrans_CURRENT_PALETTE, tables_surjection, 1 << 0 /*R1 is
               a sprite pointer*/ | 1 << 1 /*use current palette*/, SKIP,
               SKIP, NULL)) != NULL)
            goto finish;
      }
      else
         tables_surjection = NULL;

      /*Same for injection table.*/
      if ((error = xcolourtrans_generate_table
            (colourtrans_CURRENT_MODE, colourtrans_CURRENT_PALETTE,
            (os_mode) &Wide_Mode /*was 5 << 27 | 180 << 14 | 180 << 1 | 1*/,
            colourtrans_CURRENT_PALETTE, NULL, 1 << 1 /*use current palette*/
            | 1 << 4 /*wide entries for deep sprites*/, SKIP, SKIP, &size))
            != NULL)
         goto finish;
      tracef ("Injection table size %d\n" _ size);

      if (size != 0)
      {  if ((tables_injection = m_ALLOC (size)) == NULL)
         {  error = riscos_error_lookup (os_GLOBAL_NO_MEM, "NoMem");
            goto finish;
         }

         if ((error = xcolourtrans_generate_table
               (colourtrans_CURRENT_MODE, colourtrans_CURRENT_PALETTE,
               (os_mode) &Wide_Mode
                     /*was 5 << 27 | 180 << 14 | 180 << 1 | 1*/,
               colourtrans_CURRENT_PALETTE, tables_injection, 1 << 1 /*use
               current palette*/ | 1 << 4 /*wide entries for deep sprites*/,
               SKIP, SKIP, NULL)) != NULL)
            goto finish;
      }
      else
         tables_injection = NULL;

      if (tables_surjection != 0)
         tracef ("tables_surjection [] {0x%X, 0x%X, 0x%X, ...}\n" _
               ((int *) tables_surjection) [0] _
               ((int *) tables_surjection) [1] _
               ((int *) tables_surjection) [2]);

      Found_Tables = TRUE;
      tracef ("finding new tables ... done\n");
   }

finish:
   if (error != NULL)
      tracef ("ERROR: %s (error 0x%X)\n" _ error->errmess _ error->errnum);

   /*Fix storage leak if not all tables found. J R C 4th Mar 1994*/
   if (error != NULL)
   {  m_FREE (tables_translation, 0);
      m_FREE (tables_injection, 0);
      m_FREE (tables_surjection, 0);
   }

   return error;
}
/*------------------------------------------------------------------------*/
os_error *tables_mode_change (void)

   /*Called on a mode change.*/

{  os_error *error = NULL;

   tracef ("tables_read_modevars\n");

   /*We need the X and Y EIG factors and lb bpp.*/
   if ((error = xos_read_mode_variable (os_CURRENT_MODE, os_MODEVAR_XEIG_FACTOR,
         &tables_xeig, NULL)) != NULL)
      goto finish;
   tracef ("tables_xeig %d\n" _ tables_xeig);

   if ((error = xos_read_mode_variable (os_CURRENT_MODE, os_MODEVAR_YEIG_FACTOR,
         &tables_yeig, NULL)) != NULL)
      goto finish;
   tracef ("tables_yeig %d\n" _ tables_yeig);

   if ((error = xos_read_mode_variable (os_CURRENT_MODE, os_MODEVAR_LOG2_BPP,
         &tables_log2_bpp, NULL)) != NULL)
      goto finish;
   tracef ("tables_log2_bpp %d\n" _ tables_log2_bpp);

   if ((error = xos_read_mode_variable (os_CURRENT_MODE, os_MODEVAR_NCOLOUR,
         &tables_ncolour, NULL)) != NULL)
      goto finish;
   tracef ("tables_ncolour %d\n" _ tables_ncolour);

   if ((error = tables_terminate ()) != NULL)
         /*we know this does nothing more than free the memory, so it's o k.*/
      goto finish;

finish:
   if (error != NULL)
      tracef ("ERROR: %s (error 0x%X)\n" _ error->errmess _ error->errnum);
   return error;
}
@


4.2
log
@Lots of bools changed to osbools to keep the new compiler happy.
No longer assumes the location of the SVC stack.

Version 0.49. Tagged as 'Picker-0_49'
@
text
@d46 1
a46 1
int tables_xeig, tables_yeig, tables_log2_bpp;
d223 5
@


4.1
log
@Initial revision
@
text
@d51 1
a51 1
static bool Found_Tables;
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
