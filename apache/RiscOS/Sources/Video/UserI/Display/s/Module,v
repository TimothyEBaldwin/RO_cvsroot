head	4.6;
access;
symbols
	Display-0_42-1:4.6
	Display-0_44:4.6
	Display-0_43:4.6
	Display-0_42:4.6
	Display-0_41:4.6
	Display-0_40:4.5
	Display-0_39:4.5
	RO_5_07:4.5
	Display-0_38:4.5
	Display-0_37:4.4
	Ursula_merge:4.1.4.2
	Display-0_36:4.3
	Display-0_34:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.2
	Ursula_RiscPC:4.1.4.2.0.2
	rthornb_UrsulaBuild-19Aug1998:4.1.4.2
	UrsulaBuild_FinalSoftload:4.1.4.2
	rthornb_UrsulaBuild-12Aug1998:4.1.4.2
	aglover_UrsulaBuild-05Aug1998:4.1.4.2
	rthornb_UrsulaBuild-29Jul1998:4.1.4.2
	rthornb_UrsulaBuild-22Jul1998:4.1.4.2
	rthornb_UrsulaBuild-15Jul1998:4.1.4.2
	rthornb_UrsulaBuild-07Jul1998:4.1.4.2
	rthornb_UrsulaBuild-17Jun1998:4.1.4.2
	rthornb_UrsulaBuild-03Jun1998:4.1.4.2
	rthornb_UrsulaBuild-27May1998:4.1.4.2
	rthornb_UrsulaBuild-21May1998:4.1.4.2
	rthornb_UrsulaBuild_01May1998:4.1.4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.6
date	2015.01.16.00.55.02;	author jlee;	state Exp;
branches;
next	4.5;
commitid	yM5i84ar30KGvb6y;

4.5
date	2003.02.03.10.21.25;	author rsprowson;	state Exp;
branches;
next	4.4;

4.4
date	2001.03.23.17.13.57;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	2000.05.12.13.10.56;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	2000.05.12.13.03.16;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.45.43;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.45.43;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.45.43;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.05.29.10.44.01;	author kbracey;	state Exp;
branches;
next	4.1.4.2;

4.1.4.2
date	98.04.15.07.26.18;	author mstphens;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.00.04;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.22.20;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@Escape some dollars
Detail:
  s/Message, s/Module - Escape some dollars contained in strings to avoid warnings from objasm
Admin:
  Resulting binary unchanged


Version 0.41. Retagged as 'Display-0_41'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.Module
        AREA    |DisplayManager$$Code|, CODE, READONLY, PIC
Module_BaseAddr

        ASSERT  (.=Module_BaseAddr)

        DCD     Mod_Start               - Module_BaseAddr
        DCD     Mod_Init                - Module_BaseAddr
        DCD     Mod_Die                 - Module_BaseAddr
        DCD     Mod_Service             - Module_BaseAddr
        DCD     Mod_Title               - Module_BaseAddr
        DCD     Mod_Helpstr             - Module_BaseAddr
        DCD     Mod_Helptable           - Module_BaseAddr
        DCD     0
        DCD     0
        DCD     0
        DCD     0
 [ International_Help <> 0
        DCD     MsgTrans_FileName       - Module_BaseAddr
 |
        DCD     0
 ]
 [ :LNOT: No32bitCode
        DCD     Mod_Flags               - Module_BaseAddr
 ]

;---------------------------------------------------------------------------
Mod_Helptable
displaymanager_command
        Command Desktop_DisplayManager,0,0,International_Help
        DCB     0

 [ International_Help = 0
Desktop_DisplayManager_Help
        DCB     "The Display Manager module allows the selection of screen modes."
        DCB     13,10
        DCB     "Do not use *Desktop_DisplayManager, use *Desktop instead."
        DCB     0
Desktop_DisplayManager_Syntax
        DCB     "Syntax: *Desktop_"     ; Drop through to...
 |
Desktop_DisplayManager_Help
        DCB     "HDPMDSK",0
Desktop_DisplayManager_Syntax
        DCB     "SDPMDSK",0
 ]

Mod_Title       DCB     "DisplayManager",0
Mod_Helpstr     DCB     "DisplayManager",9
Mod_Version     DCB     "$Module_HelpVersion", 0
                ALIGN

 [ :LNOT: No32bitCode
Mod_Flags
        DCD     1                       ; 32-bit compatible
 ]


;---------------------------------------------------------------------------
;       Code to handle *Desktop_DisplayManager command.
;
Desktop_DisplayManager_Code
        ROUT
        Entry

        LDR     lr, [r12]
        CMP     lr, #0                  ; If not had Service_StartWimp or couldn't get workspace then
        BLE     %FT10                   ;   can't start up.

        LDR     lr, [lr, #:INDEX:task_handle]
        TEQ     lr, #0                  ; If we're not already a task then
        MOVEQ   r2, r0                  ;   start up as one.
        MOVEQ   r0, #ModHandReason_Enter
        ADREQ   r1, Mod_Title
        SWIEQ   XOS_Module
10
        ADR     r0, ErrorBlock_Modes_CantStart  ; Otherwise, can't start up.
        MOV     r1, #0
        MOV     r2, #0
        ADR     r4, Mod_Title
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup

        EXIT

        MakeErrorBlock  Modes_CantStart


;---------------------------------------------------------------------------
;       Module initialisation.
;
Mod_Init
        Entry   "r1-r4"

 [ standalone
        Debug   mod,"Mod_Init"
        ADRL    r0, resourcefs_files
        SWI     XResourceFS_RegisterFiles
        EXIT    VS
 ]

        ADR     r0, Mod_Path
        MOV     r2, #-1
        MOV     r3, #0
        MOV     r4, #VarType_Expanded
        SWI     XOS_ReadVarVal
        CMP     r2, #0

        ADREQ   r0, Mod_Path
        ADREQ   r1, Mod_PathDefault
        MOVEQ   r2, #?Mod_PathDefault
        MOVEQ   r3, #0
        MOVEQ   r4, #VarType_String
        SWIEQ   XOS_SetVarVal

        EXIT

Mod_Path        DCB     "DisplayManager$$Path",0
Mod_PathDefault DCB     "Resources:$.Resources.Display.",0
                ALIGN


;---------------------------------------------------------------------------
;       Service call handler.
;
;Ursula format
;
        ASSERT  Service_Reset              < Service_ModeChange
        ASSERT  Service_ModeChange         < Service_StartWimp
        ASSERT  Service_StartWimp          < Service_StartedWimp
        ASSERT  Service_StartedWimp        < Service_CalibrationChanged
        ASSERT  Service_CalibrationChanged < Service_WimpPalette
        ASSERT  Service_WimpPalette        < Service_MessageFileClosed
        ASSERT  Service_MessageFileClosed  < Service_ResourceFSStarting
        ASSERT  Service_ResourceFSStarting < Service_ModeFileChanged
;
UServTab
        DCD     0
        DCD     UService - Module_BaseAddr
        DCD     Service_Reset
        DCD     Service_ModeChange
        DCD     Service_StartWimp
        DCD     Service_StartedWimp
        DCD     Service_CalibrationChanged
        DCD     Service_WimpPalette
  [ MessageChanging
        DCD     Service_MessageFileClosed
  ]
  [ standalone
        DCD     Service_ResourceFSStarting
  ]
        DCD     Service_ModeFileChanged
        DCD     0
        DCD     UServTab - Module_BaseAddr
Mod_Service
        MOV     r0, r0
        TEQ     r1, #Service_StartWimp
        TEQNE   r1, #Service_StartedWimp
        TEQNE   r1, #Service_Reset
        TEQNE   r1, #Service_ModeChange
        TEQNE   r1, #Service_WimpPalette
        TEQNE   r1, #Service_CalibrationChanged
        TEQNE   r1, #Service_ModeFileChanged
  [ standalone
        TEQNE   r1, #Service_ResourceFSStarting
  ]
  [ MessageChanging
        TEQNE   r1, #Service_MessageFileClosed
  ]
        MOVNE   pc, lr
UService
        TEQ     r1, #Service_StartWimp
        BEQ     svc_startwimp

        TEQ     r1, #Service_StartedWimp
        BEQ     svc_startedwimp

        TEQ     r1, #Service_Reset
        BEQ     svc_reset

        LDR     r12, [r12]              ; Make sure we have workspace for the following services.
        CMP     r12, #0
        MOVLE   pc, lr

        TEQ     r1, #Service_ModeChange
        BEQ     svc_modechange

        TEQ     r1, #Service_WimpPalette
        TEQNE   r1, #Service_CalibrationChanged
        BEQ     svc_wimppalette

        TEQ     r1, #Service_ModeFileChanged
        BEQ     svc_modefilechanged

 [ standalone
        TEQ     r1, #Service_ResourceFSStarting
        BEQ     svc_resourcefsstarting
 ]

 [ MessageChanging
        TEQ     r1, #Service_MessageFileClosed
        MOVNE   pc, lr


svc_messagefileclosed
        Entry   "r0"
        Debug   mod,"svc_messagefileclosed",r0
        LDR     lr, task_handle         ; Make sure we are a task.
        TEQ     lr, #0
        EXIT    EQ
   [ {FALSE}
        ; We don't actually have to re-open the message file using
        ; MessageTrans_OpenFile as it says in the PRM.  MessageTrans
        ; remembers the file block and will open the file for us when
        ; we next try to access it.
        LDRB    lr, flags
        BIC     lr, lr, #f_messagesopen
        STRB    lr, flags
   ]
        BL      Menu_Init               ; Re-open messages file and build all menus.
        LDRVC   lr, pollword
        ORRVC   lr, lr, #pf_modeinit :OR: pf_refreshicons
        STRVC   lr, pollword
        EXIT
  |
        MOV     pc, lr                  ; Just in case...
  ] ; MessageChanging

svc_reset
        Entry   "r0-r3"

        Debug   mod,"Service_Reset"

        LDR     lr, [r12]
        CMP     lr, #0                  ; If couldn't get workspace on Service_StartWimp then
        MOVLT   lr, #0                  ;   clear flag so user can retry.
        STRLT   lr, [r12]

        MOVGT   r12, lr                 ; Otherwise, if we have workspace then
        MOVGT   lr, #0                  ;   free it (but don't call Wimp_CloseDown).
        STRGT   lr, task_handle
        BLGT    Mod_ShutDown

        EXIT


svc_startwimp
        Entry   "r2,r3"

        LDR     r2, [r12]
        TEQ     r2, #0
        EXIT    NE                      ; Don't claim service unless = 0.

        Debug   mod,"Service_StartWimp"

        MOV     r0, #ModHandReason_Claim        ; Try to claim workspace.
        LDR     r3, =max_running_work
        SWI     XOS_Module
        MOVVS   r2, #-1                 ; Avoid looping.
        STR     r2, [r12]

        Debug   mod," workspace at",r2

        MOVVC   r0, #0
        STRVC   r0, [r2, #:INDEX:task_handle]
        STRVC   r0, [r2, #:INDEX:indirected_data]
        STRVC   r0, [r2, #:INDEX:mode_space]
        STRVCB  r0, [r2, #:INDEX:flags]
        STRVC   r12, [r2, #:INDEX:private_word]
        ADRVC   r0, displaymanager_command

        MOVVC   r1, #0                  ; Claim service.
        EXIT


svc_startedwimp
        Entry

        Debug   mod,"Service_StartedWimp"

        LDR     lr, [r12]
        CMP     lr, #-1                 ; If failed to get workspace then
        MOVEQ   lr, #0                  ;   clear flag so user can try again.
        STREQ   lr, [r12]

        EXIT


svc_wimppalette
        Entry   "r0-r3"

        Debug   mod,"svc_wimppalette"
        LDR     lr, task_handle         ; Make sure we are a task.
        TEQ     lr, #0
        EXIT    EQ

        LDR     lr, pollword
        ORR     lr, lr, #pf_modeinit :OR: pf_refreshicons
        STR     lr, pollword

        SWI     XColourTrans_InvalidateCache
        BL      scanpalette
        MOVNE   r0, #-1                 ; Force redraw whole screen if wimp palette changed.
        MOVNE   r1, #-bignum
        MOVNE   r2, #-bignum
        MOVNE   r3, #bignum
        MOVNE   r4, #bignum
        SWINE   XWimp_ForceRedraw

        ASSERT  ms_data = 5*4           ; Send message like Palette utility used to.
        MOV     r0, #ms_data
        MOV     r3, #0
        MOV     lr, #Message_PaletteChange
        Push    "r0-r3,lr"
        MOV     r0, #User_Message
        MOV     r1, sp
        MOV     r2, #0
        SWI     XWimp_SendMessage
        ADD     sp, sp, #ms_data

        EXIT


scanpalette
        Entry   "r0-r4",80

        MOV     r1, sp                  ; Dump new palette into stack frame.
        SWI     XWimp_ReadPalette

        ADR     r0, wimp_palette        ; Compare against old palette.
        MOV     lr, #16
        MOV     r4, #0
10
        LDRB    r2, [r0]                ; Only bottom 8 bits stored.
        LDR     r3, [r1], #4
        STRB    r3, [r0], #1            ; Update current palette.
        EOR     r3, r3, r2
        ORR     r4, r4, r3, LSL #24     ; Only interested in bottom 8 bits.
        SUBS    lr, lr, #1
        BNE     %BT10

        TEQ     r4, #0                  ; EQ=>same, NE=>changed
        EXIT


svc_modechange
        Entry
        Debug   mod,"svc_modechange"
        LDR     lr, task_handle         ; Make sure we are a task.
        TEQ     lr, #0
        LDRNE   lr, pollword
        ORRNE   lr, lr, #pf_modeinit :OR: pf_refreshicons
        STRNE   lr, pollword
        EXIT


svc_modefilechanged
        Entry   "r0-r4"
        Debug   mod,"svc_modefilechanged"
        LDR     lr, task_handle         ; Make sure we are a task.
        TEQ     lr, #0
        EXIT    EQ
        BL      Menu_Init               ; Build menus.

        SUB     r13, r13, #40
        MOV     r1, #iconbar_whandle    ; refresh iconbar icon (incase the 'display' sprite was changed)
        STR     r1, [r13, #0]
        LDR     r1, icon_handle
        STR     r1, [r13, #4]
        MOV     r1, r13
        SWI     XWimp_GetIconState
        ADDVC   r0, r1, #8
        LDMVCIA r0, {r1-r4}
        MOVVC   r0, #iconbar_whandle
        SWIVC   XWimp_ForceRedraw
        ADD     r13, r13, #40

        LDR     lr, pollword
        ORR     lr, lr, #pf_modeinit :OR: pf_refreshicons :OR: pf_settitle
        STR     lr, pollword
        EXIT


 [ standalone
svc_resourcefsstarting
        Entry   "r0"
        ADRL    r0, resourcefs_files
        MOV     lr, pc
        MOV     pc, r2
        EXIT
 ]


;---------------------------------------------------------------------------
;       Killing the module.
;
Mod_Die
        Entry   "r0-r3"

        LDR     r12, [r12]
        BL      Mod_ShutDown

 [ standalone
        ADRL    r0, resourcefs_files
        SWI     XResourceFS_DeregisterFiles
 ]

        CLRV
        EXIT


;---------------------------------------------------------------------------
; Mod_ShutDown
;
;       In:     r12 -> workspace
;       Out:    r0-r3 corrupted
;               r12 -> private word
;
;       Shut down as a task or before dying.
;
Mod_ShutDown
        CMP     r12, #0                 ; If no workspace then
        MOVLE   pc, lr                  ;   nothing to do.

        Debug   mod,"Mod_ShutDown, workspace at",r12

        MOV     r3, lr                  ; Can't use stack on exit if USR mode.

        Debug   mod," closing down as a task"
        LDR     r0, task_handle
        CMP     r0, #0                  ; If we're running as a task then
        LDRGT   r1, task_identifier     ;   close down and ignore errors.
        SWIGT   XWimp_CloseDown

        Debug   mod," closing message file"
        LDRB    r0, flags               ; Close messages if open.
        TST     r0, #f_messagesopen
        ADRNE   r0, message_file_block
        SWINE   XMessageTrans_CloseFile

        Debug   mod," freeing indirect data"
        MOV     r0, #ModHandReason_Free ; Free indirected window data if we have it.
        LDR     r2, indirected_data
        TEQ     r2, #0
        SWINE   XOS_Module

        Debug   mod," freeing mode data"
        LDR     r2, mode_space          ; Free mode related data if we have it.
        TEQ     r2, #0
        SWINE   XOS_Module

        Debug   mod," freeing workspace"
        MOV     r2, r12                 ; Free workspace and zero private word.
        LDR     r12, private_word
        MOV     lr, #0
        STR     lr, [r12]
        SWI     XOS_Module

        Debug   mod," exiting to",r3
        MOV     pc, r3


;---------------------------------------------------------------------------
;       Start module as a Wimp task.
;
Mod_Start
        LDR     r12, [r12]              ; Get workspace pointer.
        CMP     r12, #0

        ADRLEL  r0, ErrorBlock_Modes_CantStart
        MOVLE   r1, #0
        MOVLE   r2, #0
        ADRLEL  r4, Mod_Title
        MOVLE   r5, #0
        MOVLE   r6, #0
        MOVLE   r7, #0
        SWILE   MessageTrans_ErrorLookup

        LDR     lr, task_handle
        CMP     lr, #0
        SWIGT   OS_GenerateError

        ADR     sp, stack_top           ; STACK IS NOW VALID!!

        Debug   mod,"Mod_Start"

        SUB     sp, sp, #max_banner_size        ; Look up banner for task display.
        ADR     r1, banner
        MOV     r2, sp
        MOV     r3, #max_banner_size
        BL      MsgTrans_Lookup
        SWIVS   OS_GenerateError

        MOV     r0, #300                ; Start up as Wimp task.
        LDR     r1, task_identifier
        ADR     r3, messages_list
        SWI     Wimp_Initialise

        ADD     sp, sp, #max_banner_size

        CMP     r0, #300                ; Make sure were running on RISC OS 3.
        BCC     error_old_wimp

        STR     r1, task_handle         ; Store task handle and initialise loads of stuff.
        BL      Icon_Init
        BLVC    Window_Init
        BLVC    Menu_Init
        BLVC    Mode_Init
        BVS     error_abort

        MOV     r0, #-1                 ; Remaining initialisation.
        STR     r0, scrap_ref
        MOV     r0, #0
        STR     r0, pollword

repoll_wimp
        Debug   mod,"Polling WIMP..."
        MOVVS   r1, #1                  ; Report any error with OK button.
        BLVS    Mod_ReportError

        LDR     r0, =poll_mask
        ADR     r1, user_data
        ADR     r3, pollword
        SWI     XWimp_Poll
        BVS     repoll_wimp

        ADR     lr, repoll_wimp
        CMP     r0, #(jump_table_end-jump_table)/4
        ADDCC   pc, pc, r0, ASL #2
        MOV     pc, lr

jump_table
        MOV     pc, lr                  ; Null event.
        MOV     pc, lr                  ; Redraw window.
        B       Window_Open
        B       Window_Close
        MOV     pc, lr                  ; Pointer leaving window.
        MOV     pc, lr                  ; Pointer entering window.
        B       Mouse_Click
        MOV     pc, lr                  ; User drag box.
        B       Mode_KeyPressed
        B       Menu_Selection
        MOV     pc, lr                  ; Scroll request.
        MOV     pc, lr                  ; Lose caret.
        MOV     pc, lr                  ; Gain caret.
        B       Mod_PollWord
        MOV     pc, lr                  ; 14
        MOV     pc, lr                  ; 15
        MOV     pc, lr                  ; 16
        B       Message_Received
        B       Message_Recorded
        MOV     pc, lr                  ; Message acknowledge.
jump_table_end


error_old_wimp
        SWI     XWimp_CloseDown
        SWI     XOS_WriteI+4            ; Just in case (old Wimp!)
        ADR     r0, ErrorBlock_Modes_NoWimp
        BL      MsgTrans_ErrorLookup
        SWI     OS_GenerateError        ; Don't return.

        MakeErrorBlock  Modes_NoWimp


error_abort
        MOV     r1, #2                  ; Cancel button only.
        BL      Mod_ReportError
        BL      Mod_ShutDown            ; On exit r12->private word
        MOV     lr, #-1                 ; Error in initialisation.
        STR     lr, [r12]
        SWI     OS_Exit


messages_list
        DCD     Message_MenuWarning
        DCD     Message_MenusDeleted
        DCD     Message_HelpRequest
 [ LoadModeFiles
        DCD     Message_DataLoad
        DCD     Message_DataSave
 ]
        DCD     0
task_identifier
        DCB     "TASK"
banner
        DCB     "Title",0
        ALIGN


;---------------------------------------------------------------------------
; Mod_ReportError
;
;       In:     r0 -> error block
;               r1 = flags for Wimp_ReportError
;       Out:    r1 = returned from Wimp_ReportError
;
;       Report the given error using the given flags.
;
Mod_ReportError
        Entry   "r0-r3",max_banner_size         ; Save regs and get local stack frame.

        Debug   mod,"Mod_ReportError"
        ADR     r1, banner                      ; Get module title.
        MOV     r2, sp
        MOV     r3, #max_banner_size
        BL      MsgTrans_Lookup
        ADD     r3, sp, #max_banner_size
        LDMIA   r3, {r0,r1}                     ; Get back original error and flags.
        SWI     XWimp_ReportError
        STR     r1, [r3, #4]                    ; Pass back returned flags.

        EXIT


;---------------------------------------------------------------------------
; Mod_CopyString
;
;       In:     r0 -> 0 terminated string to copy
;               r1 -> buffer to copy into
;               r2 = size of buffer (-1 if you don't care)
;       Out:    r0 preserved
;               r1 -> terminating 0 in buffer
;               r2 = space left in buffer
;
;       Copy a string.  If r2<>-1 then the buffer is of fixed length and
;       will not overflow.  The string copied into the buffer is always
;       0 terminated even if it didn't fit.
;
Mod_CopyString
        ROUT
        Entry   "r0"
        TEQ     r2, #0
        EXIT    EQ
10
        LDRB    lr, [r0], #1
        SUBS    r2, r2, #1
        MOVEQ   lr, #0
        TEQNE   lr, #0
        STRNEB  lr, [r1], #1
        BNE     %BT10
20
        STRB    lr, [r1]
        EXIT


;---------------------------------------------------------------------------
; Mod_PollWord
;
;       Poll word is non-zero.
;
Mod_PollWord
        ROUT
        Entry   "r1"

        LDR     r1, pollword

        TST     r1, #pf_settitle
        BLNE    Window_SetTitle

        TST     r1, #pf_modeinit
        BLNE    Mode_Init
        BVS     %FT10

        TST     r1, #pf_refreshicons
        BLNE    Icon_Refresh
10
        MOV     r1, #0                  ; It's the safest thing to do!
        STR     r1, pollword

        EXIT


;---------------------------------------------------------------------------
;       Neil's debugging routines
;
      [ debug
        InsertNDRDebugRoutines
      ]

        LTORG

        END
@


4.5
log
@Bug fix to the colour popup menu.The "this is how many bpp I'm looking
to ungrey" value only got incremented when a successful mode match was
made so you could never get greyed entries at the start of a menu - that
would just lead to a completely grey menu.
This now evaluates all modes into a bit mask,then ungreys selected
entries as required.
Now also forces a redraw of its iconbar icon when the MDF is changed so
that the display manager icon can look like the monitor the MDF describes.

Version 0.38. Tagged as 'Display-0_38'
@
text
@d134 1
a134 1
Mod_Path        DCB     "DisplayManager$Path",0
@


4.4
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.72 or later.
  Requires BuildSys 3.09 or later.
  Requires Env 0.65 or later.

Version 0.37. Tagged as 'Display-0_37'
@
text
@d374 1
a374 1
        Entry   "r0"
d380 14
@


4.3
log
@Ursula branch merged. Tagged as Display-0_36.
@
text
@d16 2
a17 1
        LEADR   Module_LoadAddr
d64 1
a64 1
Mod_Version     DCB     "$VString ($Date)",0
d78 1
a78 1
        ENTRY
d109 1
a109 1
        ENTRY   "r1-r4"
d222 1
a222 1
        ENTRY   "r0"
d246 1
a246 1
        ENTRY   "r0-r3"
d264 1
a264 1
        ENTRY   "r2,r3"
d293 1
a293 1
        ENTRY
d306 1
a306 1
        ENTRY   "r0-r3"
d341 1
a341 1
        ENTRY   "r0-r4",80
d363 1
a363 1
        ENTRY
d374 1
a374 1
        ENTRY   "r0"
d388 1
a388 1
        ENTRY   "r0"
d400 1
a400 1
        ENTRY   "r0-r3"
d603 1
a603 1
        ENTRY   "r0-r3",max_banner_size         ; Save regs and get local stack frame.
d634 1
a634 1
        ENTRY   "r0"
d656 1
a656 1
        ENTRY   "r1"
@


4.2
log
@32-bit compatible. Tagged as Display-0_34.
@
text
@d141 29
d171 16
d215 1
d226 1
a226 1
 [ {FALSE}
d234 1
a234 1
 ]
d240 3
a242 1

@


4.1
log
@Initial revision
@
text
@d36 3
d66 5
d153 1
a153 1
        MOVLES  pc, lr
d171 1
a171 1
        MOVNES  pc, lr
d179 1
a179 1
        EXITS   EQ
d211 1
a211 1
        EXITS
d219 1
a219 1
        EXITS   NE                      ; Don't claim service unless = 0.
d240 1
a240 1
        EXITS
d253 1
a253 1
        EXITS
d329 1
a329 1
        EXITS   EQ
d334 1
a334 1
        EXITS
d343 1
a343 1
        EXITS
d361 2
a362 1
        EXITS
@


4.1.4.1
log
@Stopped selections being lost when ResourceFS contents changed (eg when a
shared disc appears)
@
text
@a134 15
        TEQNE   r1, #Service_StartedWimp
        TEQNE   r1, #Service_Reset
        TEQNE   r1, #Service_ModeChange
        TEQNE   r1, #Service_WimpPalette
        TEQNE   r1, #Service_CalibrationChanged
        TEQNE   r1, #Service_ModeFileChanged
  [ standalone
        TEQNE   r1, #Service_ResourceFSStarting
  ]
  [ MessageChanging
        TEQNE   r1, #Service_MessageFileClosed
  ]
        MOVNES  pc, lr

        TEQ     r1, #Service_StartWimp
a161 1
 [ MessageChanging
d172 1
a172 1
   [ {FALSE}
d180 1
a180 1
   ]
d186 1
a186 3
  |
        MOVS    pc, lr                  ; Just in case...
  ] ; MessageChanging
@


4.1.4.2
log
@update to Ursula service format
@
text
@a132 29
;Ursula format
;
        ASSERT  Service_Reset              < Service_ModeChange
        ASSERT  Service_ModeChange         < Service_StartWimp
        ASSERT  Service_StartWimp          < Service_StartedWimp
        ASSERT  Service_StartedWimp        < Service_CalibrationChanged
        ASSERT  Service_CalibrationChanged < Service_WimpPalette
        ASSERT  Service_WimpPalette        < Service_MessageFileClosed
        ASSERT  Service_MessageFileClosed  < Service_ResourceFSStarting
        ASSERT  Service_ResourceFSStarting < Service_ModeFileChanged
;
UServTab
        DCD     0
        DCD     UService - Module_BaseAddr
        DCD     Service_Reset
        DCD     Service_ModeChange
        DCD     Service_StartWimp
        DCD     Service_StartedWimp
        DCD     Service_CalibrationChanged
        DCD     Service_WimpPalette
  [ MessageChanging
        DCD     Service_MessageFileClosed
  ]
  [ standalone
        DCD     Service_ResourceFSStarting
  ]
        DCD     Service_ModeFileChanged
        DCD     0
        DCD     UServTab - Module_BaseAddr
a133 1
        MOV     r0, r0
d148 1
a148 1
UService
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
