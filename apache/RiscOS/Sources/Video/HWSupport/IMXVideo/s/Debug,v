head	1.2;
access;
symbols
	IMXVideo-0_27:1.2
	IMXVideo-0_26:1.2
	IMXVideo-0_25:1.2
	IMXVideo-0_24:1.2
	IMXVideo-0_23:1.2
	IMXVideo-0_22:1.2
	IMXVideo-0_21:1.2
	IMXVideo-0_20:1.2
	IMXVideo-0_19:1.2
	IMXVideo-0_18:1.2
	IMXVideo-0_17:1.2
	IMXVideo-0_16:1.2
	IMXVideo-0_15:1.1.1.1
	IMXVideo-0_13:1.1.1.1
	IMXVideo-0_12:1.1.1.1
	IMXVideo-0_03:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2017.12.31.14.32.00;	author jballance;	state Exp;
branches;
next	1.1;
commitid	6sKxxmK4qR5vj3lA;

1.1
date	2017.01.20.23.07.41;	author jballance;	state Exp;
branches
	1.1.1.1;
next	;
commitid	h7Ww9g2WBNf0gLCz;

1.1.1.1
date	2017.01.20.23.07.41;	author jballance;	state Exp;
branches;
next	;
commitid	h7Ww9g2WBNf0gLCz;


desc
@@


1.2
log
@Resync IMXVideo with development version


Version 0.16. Tagged as 'IMXVideo-0_16'
@
text
@; Copyright 2017 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;
 [ Debug
; a2-> null terminated string
DebugTXS    ROUT
        STMFD   sp!, {a1,lr}
        SUB     a2,a2,#1
1       LDRB    a1, [a2,#1]!
        TEQ     a1, #&0
        LDMEQFD sp!, {a2,pc}
        BL      DebugTX
        B       %BT1

DebugHexTX
       stmfd    r13!, {r0-r3,lr}
       ldr      r0,[r13, #20]
       b        jbdt1
DebugHexTX2
       stmfd    r13!, {r0-r3,lr}
       ldr      r0,[r13, #20]
       b        jbdt2
DebugHexTX4
       stmfd    r13!, {r0-r3,lr}
       ldr      r0,[r13, #20]
       mov      r0,r0,ror #24          ; hi byte
       bl       jbdtxh
       mov      r0,r0,ror #24
       bl       jbdtxh
jbdt2
       mov      r0,r0,ror #24
       bl       jbdtxh
       mov      r0,r0,ror #24
jbdt1
       bl       jbdtxh
       mov      r0,#' '
       bl       DebugTX
       ldmfd    r13!, {r0-r3,pc}

DebugTXStrInline
       stmfd    r13!, {r0-r3}          ; lr points to prinstring, immediately
                                       ; following call, null terminated
       sub      r3,lr,#1
1      ldrb     r0,[r3,#1]!            ; pop next char, auto incr
       teq      r0,#0                  ; terminating null
       biceq    lr,r3,#3               ; round down address
       ldmeqfd  r13!,{r0-r3}
       addeq    pc,lr,#4               ; return to next word
       bl       DebugTX                ; else send, then
       b        %bt1                   ; loop

jbdtxh stmfd    r13!,{r0-r3,lr}        ; print byte as hex
       and      a4,a1,#&f              ; get low nibble
       and      a1,a1,#&f0             ; get hi nibble
       mov      a1,a1,lsr #4           ; shift to low nibble
       cmp      a1,#&9                 ; 9?
       addle    a1,a1,#&30
       addgt    a1,a1,#&37             ; convert letter if needed
       bl       DebugTX
       cmp      a4,#9
       addle    a1,a4,#&30
       addgt    a1,a4,#&37
       bl       DebugTX
       ldmfd    r13!,{r0-r3,pc}

DebugTX
       stmfd    r13!,{r0-r3,r8,r9,lr}
       mov      r8, #OSHW_CallHAL
       mov      r9, #EntryNo_HAL_DebugTX
       SWI      XOS_Hardware
       ldmfd    r13!,{r0-r3,r8,r9,pc}

 ]
       END
@


1.1
log
@Initial revision
@
text
@d61 1
a61 1
       bl       DebugTX            ; else send, then
d79 3
a81 3
       stmfd    r13!,{r0,r8,r9,lr}
       mov      r8,#0
       mov      r9, #86   ; HAL_DebugTX
d83 1
a83 1
       ldmfd    r13!,{r0,r8,r9,pc}
@


1.1.1.1
log
@nitial import
@
text
@@
