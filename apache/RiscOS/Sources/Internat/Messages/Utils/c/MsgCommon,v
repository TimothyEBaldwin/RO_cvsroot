head	4.1;
access;
symbols
	Messages-1_12:4.1
	Messages-1_11:4.1
	Messages-1_10:4.1
	Messages-1_09:4.1
	Messages-1_08:4.1
	Messages-1_07:4.1
	RO_5_07:4.1
	Messages-1_06:4.1
	sbrodie_dev:4.1.0.10
	sbrodie_dev_bp:4.1
	Messages-1_05:4.1
	Messages-1_04:4.1
	Messages-1_03:4.1
	Messages-1_02:4.1
	Messages-1_01:4.1
	Messages-1_00:4.1
	Messages-0_99:4.1
	dellis_autobuild_BaseSW:4.1
	Messages-0_98:4.1
	Messages-0_97:4.1
	Messages-0_96:4.1
	Messages-0_95:4.1
	Messages-0_94:4.1
	dcotton_Messages_13062000:4.1
	dcotton_Messages_10062000:4.1
	Messages-0_93:4.1
	Messages-0_92:4.1
	Messages-0_91:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	Messages-0_90:4.1
	Ursula_merge:4.1
	nturton_Messages-0_84:4.1
	Messages-0_89:4.1
	Messages-0_88:4.1
	Messages-0_87:4.1
	Messages-0_86:4.1
	Messages-0_85:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_Messages-0_79:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_Messages-0_85:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.40.07;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1
	4.1.10.1;
next	;

4.1.1.1
date	96.11.05.09.40.07;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.53.36;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.45.04;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.59.55;	author nturton;	state Exp;
branches;
next	;

4.1.10.1
date	2001.06.27.15.43.50;	author sbrodie;	state dead;
branches;
next	;


desc
@@


4.1
log
@Initial revision
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* MsgCommon.c: */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "msgcommon.h"

int mem_times;
int mem_calls;
extern int line;
char TERMINATOR = '\0';

   char SetTERM(char ch)
/* -------------------------------------------------------------------------- */
{
    TERMINATOR = ch;
    return TERMINATOR;
}

   void report(int exitnum,errtype e,char *fmt, ... )
/* -------------------------------------------------------------------------- */
{                  
    char *errlist[4] = { "Warning","Error","Serious Error" };
    va_list args;

    if (e >= EINFO)   
       fprintf(stderr,"\"%s\", ",progname);
    else
        if (line != -1)
           fprintf(stderr,"\"%s\", line %i: %s: ",progname,line,errlist[e]);
        else
           fprintf(stderr,"\"%s\", %s: ",progname,errlist[e]);

    va_start(args,fmt);
    vfprintf(stderr,fmt,args);
    va_end(args);
       
    if (exitnum !=0) exit(exitnum);
}


   void *emalloc(unsigned int size)
/* -------------------------------------------------------------------------- */
{     
    void *region;

    mem_times++;
    if ((region=malloc(size))== NULL) report(1,ESERR,"Out of Memory\n");
    mem_calls++;
    return (region);
}


   void efree(void *str)
/* -------------------------------------------------------------------------- */
{             
    if (mem_times-- <= 0) report(1,ESERR,"Too many efree calls\n");
    free(str);
}


   char *xalloc(char *s)
/* -------------------------------------------------------------------------- */
{         
    if (s == NULL) return NULL;
    return Tstrcpy(emalloc(Tstrlen(s)+1),s);
}

   char *xnalloc(char *s,int of,int size)
/* -------------------------------------------------------------------------- */
{                               
    int len;
    char *em;
    
    if (s == NULL) return NULL;
    len = Tstrlen(s);
    if (of > len-1) return NULL;
    if (of+size >= len) size = len-of;

    em = emalloc(sizeof(char)*size+1);
    memset(em,TERMINATOR,sizeof(char)*size+1);
    return Tstrncpy(em,&s[of],size);
}



/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= */
/* Terminator Routines                                                                         */
/* =-----------------------------------------------------------------------------------------= */

int inescape = 0;

   int EOL(char *s1,int idx) 
/* ----------------------------------------------------- <esc><esc><0a><00> - */
{              
    if (idx==0) inescape = 0;
    
    if (inescape) 
    {
        inescape = 0;
        return 0;
    }
  
    if (s1[idx] == '\033')
    {
        inescape = 1;
        return 0;
    }

    if (s1[idx] == TERMINATOR && !inescape)
        return 1;

    return 0;
}

   int Tstrlen(char *s1)
/* -------------------------------------------------------------------------- */
{
    int idx=0;
    if (s1 == NULL) return NULL;        /* return null strings */

    while (!EOL(s1,idx))                /* while no terminator has been met... */
    {
        idx++;                          /* Move along home... */
    }
    return idx;
}


   char *Tstrcpy(char *s1, char *s2)
/* -------------------------------------------------------------------------- */
{                     
    int idx=0;
    while (!EOL(s2,idx)) { s1[idx] = s2[idx]; idx++; };
    s1[idx] = TERMINATOR;
    return s1;
}

   char *Tstrncpy(char *s1, char *s2, size_t maxsize)
/* -------------------------------------------------------------------------- */
{           
    int idx=0;
    while (!EOL(s2,idx) && maxsize-- > 0) { s1[idx] = s2[idx]; idx++; }
    return s1;
}

   char *Tstrcat(char *s1, char *s2)
/* -------------------------------------------------------------------------- */
{                             
    int idx1=0,idx2=0;
    while (!EOL(s1,idx1)) idx1++;
    while (!EOL(s2,idx2)) s1[idx1++] = s2[idx2++];
    s1[idx1] = TERMINATOR;
    return s1;
}

   int Tstrcmp(char *s1, char *s2)
/* -------------------------------------------------------------------------- */
{                     
    int c = 0, idx1=0,idx2=0;
                          
    if (s1 == NULL && s2 == NULL) return NULL;
    if (s1 == NULL && s2 != NULL) return s2[0];
    if (s1 != NULL && s2 == NULL) return s1[0];

    /*Tfprintf(stdout,s1,1); printf(" ? "); Tfprintf(stdout,s2,1);*/

    while (!EOL(s1,idx1) && !EOL(s2,idx2) && c == 0)
        c += s1[idx1++] - s2[idx2++];
                       
    if (EOL(s1,idx1) != EOL(s2,idx2))
        c += s1[idx1] - s2[idx2];                               

    /*printf(" %i\n",c);*/

    return c;
}

  int Tstrncmp(char *s1, char *s2, size_t n)
/* -------------------------------------------------------------------------- */
{                     
    int c = 0, idx1=0,idx2=0;

    while (!EOL(s1,idx1) && !EOL(s2,idx2) && n != 0 && c == 0)
    {   c += s1[idx1++]-s2[idx2++]; n--; }

    return c;
}

   char *Tstrchr(char *s1, int ch)
/* -------------------------------------------------------------------------- */
{                                 
    int idx=0;
    while (!EOL(s1,idx)) {
       /* printf("'%c'",s1[idx]);*/
        if (s1[idx] == ch ) return &s1[idx];
        idx++;
    }
    return NULL;
}

   void Tfprintf(FILE *fp,char *s1,int expand)
/* -------------------------------------------------------------------------- */
{                      
    int idx=0;
    while (!EOL(s1,idx)) 
        if (s1[idx] < ' ' || s1[idx] == 128) 
        {                  
            switch (expand)
            {
            case 1: fprintf(fp,"[%02x]",s1[idx++]); break;
            case 2: 
                if (s1[idx] == '\0' && s1[idx-1] != '\033') 
                {
                    idx++; 
                    break;
                }
            case 0: fprintf(fp,"%c",s1[idx++]); break;
            }
        } else
            fprintf(fp,"%c",s1[idx++]);
}                      

   char *Tfgets(char *s1,int many,FILE *fp)
/* -------------------------------------------------------------------------- */
{                      
    int idx=0,term=0;
    char ch;

    s1[idx] = TERMINATOR;

    if (fp == NULL || feof(fp) || ferror(fp) || many < 1) return s1;

    ch = fgetc(fp);
    while (!feof(fp) && !term && idx < many)
    {   
        term = ch; 
        s1[idx++] = ch;
        ch = fgetc(fp);                               
        if (ch == TERMINATOR && term != '\033')
        {
            s1[idx++] = ch;
            term = 1;
        } else
            term = 0;
    }

    return s1;                                                           
}

/* End of MsgCommon.c */
@


4.1.10.1
log
@  Checkpoint check-in.
Detail:
  These are the initial portable versions of all these utilities.
  Most have not been tested and the rest have received cursory testing.
  They do all compile for me though.
Admin:
  Not for use - checked-in to provide a baseline only.
  Some notes on portability changes added too.


Version 1.05, 4.25.2.1. Tagged as 'Messages-1_05-4_25_2_1'
@
text
@@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
