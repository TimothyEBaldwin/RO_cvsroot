head	4.3;
access;
symbols
	Messages-1_12:4.3
	Messages-1_11:4.3
	Messages-1_10:4.3
	Messages-1_09:4.3
	Messages-1_08:4.2
	Messages-1_07:4.2
	RO_5_07:4.2
	Messages-1_06:4.2
	Messages-1_05-4_25_2_3:4.2.2.1
	Messages-1_05-4_25_2_2:4.2.2.1
	Messages-1_05-4_25_2_1:4.2.2.1
	sbrodie_dev:4.2.0.2
	sbrodie_dev_bp:4.2
	Messages-1_05:4.2
	Messages-1_04:4.2
	Messages-1_03:4.2
	Messages-1_02:4.2
	Messages-1_01:4.2
	Messages-1_00:4.2
	Messages-0_99:4.2
	dellis_autobuild_BaseSW:4.2
	Messages-0_98:4.2
	Messages-0_97:4.2
	Messages-0_96:4.2
	Messages-0_95:4.2
	Messages-0_94:4.2
	dcotton_Messages_13062000:4.2
	dcotton_Messages_10062000:4.2
	Messages-0_93:4.1
	Messages-0_92:4.1
	Messages-0_91:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.2
	Messages-0_90:4.1
	Ursula_merge:4.1
	nturton_Messages-0_84:4.1
	Messages-0_89:4.1
	Messages-0_88:4.1
	Messages-0_87:4.1
	Messages-0_86:4.1
	Messages-0_85:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_Messages-0_79:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_Messages-0_85:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2012.03.20.21.30.31;	author jlee;	state Exp;
branches;
next	4.2;
commitid	DNlk1u7X2Ic8wFXv;

4.2
date	2000.06.10.10.31.04;	author dcotton;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.40.09;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.2.2.1
date	2001.06.27.15.43.51;	author sbrodie;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.40.09;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.54.05;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.45.14;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.00.03;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Fix spurious assert in MsgTok2. Tidy other utils a bit and rebuild all binaries.
Detail:
  Utils/c/MskTok2 - Fix spurious assert when tokenising a message that runs up to end of buffer and isn't newline terminated
  Utils/Makefile - Tweaked to use CApp makefile fragment
  Utils/MkClean,fd7, Utils/MkCVSClean,fd7 - New scripts for cleaning everything, or for cleaning just the bits we don't want in CVS
  Utils/o - Removed folder, shouldn't be in CVS
  Utils/c/Old - Removed folder, we rely on CVS to store old versions of files
  Utils/c/MsgExt, Utils/c/ScanRes, Utils/c/TokGen, Utils/c/TokGen2 - Fixed dangerous-sounding warnings (potential use of uninitialised variables, wrong fscanf arg type for "%s")
  Utils/*,ff8 - Rebuilt all binaries with Norcroft 5.69
Admin:
  Tested with building/running Iyonix & OMAP3 ROMs


Version 1.09. Tagged as 'Messages-1_09'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "swis.h"

#define TOKEN_OVERHEAD 2

#define MAX_TOKEN_LEN 254

char *tokens[256];

int strlen_lf(char *a)
{
    char *x;
    int c;

    x = a + 1;
    while ((c = *a++) != '\n') {
        if (c == 27) a++;
    }
    return a - x;
}

int strlen_0(char *a)
{
    char *x;
    int c;

    x = a + 1;
    while ((c = *a++) != 0) {
        if (c == 27) a++;
    }
    return a - x;
}

int strcmp_lf(char *a, char *b)
{
    char c1, c2;
    int d;

    while (1) {
        c1 = *a++;
        c2 = *b++;
        d = c1 - c2;
        if (d) {
            if (c1 == '\n') c1 = 0;
            if (c2 == '\n') c2 = 0;
            return c1 - c2;
        }
        if (c1 == 27) {
            c1 = *a++;
            c2 = *b++;
            d = c1 - c2;
            if (d) return d;
            continue;
        }
        if (c1 == '\n') return 0;
    }
}

int strncmp_lf(char *a, char *b, int n)
{
    char c1, c2;

    while (--n >= 0) {
        c1 = *a++;
        c2 = *b++;
        if (c1 - c2) {
            if (c1 == '\n') c1 = 0;
            if (c2 == '\n') c2 = 0;
            return c1 - c2;
        }
        if (c1 == 27) {
            if (--n < 0) break;
            c1 = *a++;
            c2 = *b++;
            if (c1 - c2) return c1 - c2;
            continue;
        }
        if (c1 == '\n') return 0;
    }
    return 0;
}

/* See Sedgewick: Algorithms 2nd edition P 108 */
static void sortstrings(char **a, int n)
{
    int  h, i, j;
    char *v;

    a--;
    h = 1;
    do
        h = h * 3 + 1;
    while (h <= n);
    do {
        h = h / 3;
        for (i = h + 1; i <= n; i++) {
            v = a[i];
            j = i;
            /* *a > *v or *a = *v and a > v */
            while (j > h && (strcmp_lf(a[j-h], v) > 0)) {
                a[j] = a[j-h];
                j -= h;
            }
            a[j] = v;
        }
    } while (h > 1);
}

static void write_out_token(char *s, FILE *f, int e)
{
    int c;

    while ((c = *s++) != '\0') {
        if (c == 27) {
            if ((c = *s++) > 1)
                write_out_token(tokens[c], f, e);
            else {
                if (e) {
                    fprintf(f, "<ESC>%d", c);
                } else {
                    fputc(27, f);
                    fputc(c, f);
                }
            }
        } else
            fputc(c, f);
    }
}

#if 0
int sort_strcmp(const void *a, const void *b)
{
    return strcmp_lf(*(char **)a, *(char **)b);
}
#endif

char *get_token(char *buff, int size, char **lines, int c)
{
    int i, k, l;
    char *cp, *s;
    int score, maxscore;
    char *best = NULL;
    int bestlen = 0, length, maxlen;
    int nextline;
    int n;
    static char token_buffer[MAX_TOKEN_LEN];

    l = 0;
    for (i = 0; i < size; ) {
        cp = buff + i;
        k = strlen_lf(cp);
        i = i + k + 1;
        n = 0;
        while (k >= 3) {
            if (n != 27) {
                lines[l++] = cp;
            }
            k--;
            n = *cp++;
        }
    }
#if 0
    qsort(lines, l, 4, sort_strcmp);
#endif
    sortstrings(lines, l);
/*
    for (i = 0; i < l; i++)
         printf("%s\n", lines[i]);
*/
    maxscore = 0;
    for (i = 0; i < l - 1; i++) {
        cp = lines[i];
        maxlen = strlen_lf(cp) - 1;
        if (maxlen > MAX_TOKEN_LEN - 1)
            maxlen = MAX_TOKEN_LEN - 1;
        for (length = 3; length <= maxlen;) {
            if (cp[length - 1] == 27) {
                length++;
                continue;
            }
            nextline = i;
            n = 1;
            while (nextline < l - 1) {
                nextline++;
                s = lines[nextline];
                if (strncmp_lf(cp, s, length))
                    break;
                n++;
            }
            if (n == 1) break;
            score = n * (length - 2) - (length + TOKEN_OVERHEAD);
            if (score > maxscore) {
                maxscore = score;
                best = cp;
                bestlen = length;
                length++;
            } else {
                    length = (maxscore + 2 * n + length + TOKEN_OVERHEAD) / n + 1;
            }
        }
    }
/*
    printf("Best token: \"");
    for (i = 0; i < bestlen; i++)
        putchar(best[i]);
    printf("\", Score = %4d, Bestlen = %d\n", maxscore, bestlen);
*/
    if (maxscore <= 0) return 0;
    memcpy(token_buffer, best, bestlen);
    token_buffer[bestlen] = 0;
    return token_buffer;
}

int replace(char *buff, int size, char *token, int key)
{
    char *dest;
    int i;
    int toklen;

    toklen = strlen_0(token);
    dest = buff;
    for (i = 0; i < size;) {
        if (memcmp(token, buff + i, toklen) == 0) {
            *dest++ = 27;
            *dest++ = key;
            i = i + strlen_0(token);
        } else {
            *dest++ = buff[i++];
        }
    }
    *dest = 0;
    return dest - buff;
}

void sub_main(int argc, char **argv)
{
    char *messages_file, *tokens_file, *dictionary_file;
    int size;
    char *finbuff;
    int i;
    char **lines;
    int c;
    int source, dest;
    int j;
    char *token;
    FILE *f, *f2;
    int t;

    if (argc != 4)
        _swi(OS_GenerateError, _IN(0),
             "\0\0\0\0Usage: TokGen <messages file> <tokens file> <dictionary>\n");
    messages_file = argv[1];
    tokens_file = argv[2];
    dictionary_file = argv[3];
    size = _swi(OS_File, _IN(0)|_IN(1)|_RETURN(4), 5, messages_file);
    if ((finbuff = malloc(size + 1)) == NULL)
        _swi(OS_GenerateError, _IN(0), "\0\0\0\0Out of memory");
    _swi(OS_File, _IN(0)|_IN(1)|_IN(2)|_IN(3), 16, messages_file, finbuff, 0);
    finbuff[size] = '\n';
    dest = 0;
    for (source = 0; source < size;) {
        c = finbuff[source];
        j = source;
        while (finbuff[++j] == c);
        if (j - source >= 3) {
            source = j;
        } else {
            finbuff[dest++] = c;
            source++;
        }
    }
    size = dest;
    finbuff[size] = 0;
    lines = malloc(size * 4);
    if (!lines) _swi(OS_GenerateError, _IN(0), "\0\0\0\0Out of memory");
    printf("Original size = %d\n", size);
    for (i = 0; i <= 255; i++)
        tokens[i] = "";
    t = _swi(OS_ReadMonotonicTime, 0);
    tokens[1] = "\r";
    for (c = 2; c <= 255; c++) {
        token = get_token(finbuff, size, lines, c);
        if (!token) break;
        tokens[c] = malloc(strlen_0(token) + 1);
        if (!tokens[c])
            _swi(OS_GenerateError, _IN(0), "\0\0\0\0Out of memory");
        memmove(tokens[c], token, strlen_0(token) + 1);
        size = replace(finbuff, size, token, c);
        printf("Substituted \"");
        write_out_token(token, stdout, 1);
        printf("\", key = %02x, size now = %d\n", c, size);
    }
    t = _swi(OS_ReadMonotonicTime, 0) - t;
    printf("Time = %dcs\n", t);
    f = fopen(tokens_file, "w");
    f2 = fopen(dictionary_file, "w");
    if (!f)
        _swi(OS_GenerateError, _IN(0), "\0\0\0\0Error opening tokens file");
    for (i = 1; i <= 255; i++) {
        token = tokens[i];
        if (*token != 0) {
            j = strlen_0(token);
            write_out_token(token, f, 0);
            fputc('\n', f);
            fputc(1 + j + 1, f2);
            if (1+j+1 > 255)
            {
               _swi(OS_GenerateError, _IN(0), "\0\0\0\0Internal error: Token too long"); /* should be <= 255 */
            }
            for (t = 0; t < j; t++)
                fputc(token[t], f2);
            fputc(0, f2);
        }
    }
    fclose(f);
    fputc(0, f2);
    fclose(f2);
}

int main(int argc, char **argv)
{
    sub_main(argc, argv);
    exit(0);
}
@


4.2
log
@	Many changes. Warning, Danger! Danger!
	This version of the module deals with multiple territory blocks being
held in ResourceFS.

Detail:
	* Fixed a bug in TokGen2. MAX_TOKEN_LEN2 was set to 256, when it
actually should be 254 (to allow for 2 byte to hold length and status). This
was causing an overflow which meant that large messages were not being
correctly tokenised. Also added a check for tokens that are too long, to at
least make sure that the buildmaster is informed that something has gone
screwy with the token generation instead of continuing on regardless.
	* Created a simple Perl script, HelpApend, that appends common help
data onto the end of each of the individual territory blocks.
	* Bug fixed in s.Common: Pointer in list was not being advanced.
	* ScanRes altered to allow nested resorce blocks.
	* Bug fixed in ResCommon - the -simulate flag now works in the
correct manner, and not the inverse (ooops!)
	* MsgTok2 now gives a warning if the input file is not present.
	* The main MakeFile has been altered to go through the extra stages
needed by the multiple-resource system.
	* Added the ResCommon binary.

To be done:
	* Make ScanRes use Service_Territory 0 instead of
Territory_NameToNumber to work out territory number to name mappings.
	* Make ResCommon cope with Squash files.
	* Make ResCommon remove all empty directories from the resource
directories.
	* Tidy up the code.
	* Add documentation.
	* Thoroughly test on different builds.

Admin:
	Must be used with srcbuild 20 or later.
	Important notice: From this version onwards, the TerritoryManager
*must* be placed ahead of Messages in the ROM, but after ResourceFS.
	This module has not yet been tested without the LocaleList system
variable being set.
	Work in progress. Do not use for anything release-critical.

Version 0.93. Not tagged
@
text
@d159 2
a160 2
    char *best;
    int bestlen, length, maxlen;
@


4.2.2.1
log
@  Checkpoint check-in.
Detail:
  These are the initial portable versions of all these utilities.
  Most have not been tested and the rest have received cursory testing.
  They do all compile for me though.
Admin:
  Not for use - checked-in to provide a baseline only.
  Some notes on portability changes added too.


Version 1.05, 4.25.2.1. Tagged as 'Messages-1_05-4_25_2_1'
@
text
@a0 21
/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* TokGen2
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */

/* Standard C headers */
a17 1
#include <time.h>
d19 1
a19 4
/* CLX heders */
#include "wholefls.h"
#include "err.h"
#include "prgname.h"
d27 1
a27 18

char *tokens[256];

/* The name of the program being executed */
static char progname[32];

static int get_file_length(char *filename)
{
  int i = (int) wf_filesize(filename);

  if (i == -1) {
    fprintf(stderr, "File '%s' not found\n", filename);
    exit(EXIT_FAILURE);
  }
  return i;
}

static void *load_file(char *filename, int *size)
d29 1
a29 21
  unsigned char *data;
  *size = get_file_length(filename);
  data = malloc(1+*size);
  if (data == NULL) {
    fprintf(stderr, "Unable to load file '%s' - out of memory\n", filename);
    exit(EXIT_FAILURE);
  }
  if (wf_load(filename, data, *size) == -1) {
    fprintf(stderr, "Unable to read file '%s'\n", filename);
    exit(EXIT_FAILURE);
  }
  /* put a NULL terminator after the file for safety */
  data[*size] = 0;
  return data;
}



static int strlen_lf(const char *a)
{
    const char *x;
d39 1
a39 1
int strlen_0(const char *a)
d41 1
a41 1
    const char *x;
d51 1
a51 1
int strcmp_lf(const char *a, const char *b)
d76 1
a76 1
int strncmp_lf(const char *a, const char *b, int n)
a230 10
static char *safe_strdup_0(const char *s1)
{
  const size_t length = strlen_0(s1) + 1;
  char *const s2 = malloc(length);

  if (s2 == NULL) err_fail("Out of memory");
  return memcpy(s2, s1, length);
}


d264 1
a264 1
    time_t t, start_t;
d266 3
a268 3
    if (argc != 4) {
      err_fail("Usage: TokGen2 <messages file> <tokens file> <dictionary>");
    }
d272 4
a275 1
    finbuff = load_file(messages_file, &size);
d292 1
a292 1
    if (!lines) err_fail("Out of memory");
d296 1
a296 1
    time(&start_t);
d301 4
a304 1
        tokens[c] = safe_strdup_0(token);
d310 1
a310 1
    t = time(NULL) - start_t;
d314 2
a315 3
    if (!f) {
        err_fail("Error opening tokens file '%s'", tokens_file);
    }
d325 1
a325 1
               err_fail("Internal error: token too long (token %i is %i bytes long)", i, 1+j+1);
d332 1
a332 3
    if (fclose(f) == EOF) {
      err_fail("error writing tokens file '%s'", tokens_file);
    }
d334 1
a334 3
    if (fclose(f2) == EOF) {
      err_fail("error writing dictionary file '%s'", dictionary_file);
    }
a338 1
    err_init(program_name(argv[0], progname, sizeof(progname)));
@


4.1
log
@Initial revision
@
text
@d23 1
a23 1
#define MAX_TOKEN_LEN 256
d223 1
a223 1
    printf("\", Score = %4d\n", maxscore);
d323 4
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
