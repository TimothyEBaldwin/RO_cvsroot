head	4.3;
access;
symbols
	Messages-1_12:4.3
	Messages-1_11:4.2
	Messages-1_10:4.2
	Messages-1_09:4.2
	Messages-1_08:4.1
	Messages-1_07:4.1
	RO_5_07:4.1
	Messages-1_06:4.1
	Messages-1_05-4_25_2_3:4.1.10.2
	Messages-1_05-4_25_2_2:4.1.10.2
	Messages-1_05-4_25_2_1:4.1.10.1
	sbrodie_dev:4.1.0.10
	sbrodie_dev_bp:4.1
	Messages-1_05:4.1
	Messages-1_04:4.1
	Messages-1_03:4.1
	Messages-1_02:4.1
	Messages-1_01:4.1
	Messages-1_00:4.1
	Messages-0_99:4.1
	dellis_autobuild_BaseSW:4.1
	Messages-0_98:4.1
	Messages-0_97:4.1
	Messages-0_96:4.1
	Messages-0_95:4.1
	Messages-0_94:4.1
	dcotton_Messages_13062000:4.1
	dcotton_Messages_10062000:4.1
	Messages-0_93:4.1
	Messages-0_92:4.1
	Messages-0_91:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	Messages-0_90:4.1
	Ursula_merge:4.1
	nturton_Messages-0_84:4.1
	Messages-0_89:4.1
	Messages-0_88:4.1
	Messages-0_87:4.1
	Messages-0_86:4.1
	Messages-0_85:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_Messages-0_79:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_Messages-0_85:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2015.10.24.08.46.30;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	n1PulGJJSatn5lGy;

4.2
date	2012.03.20.21.30.30;	author jlee;	state Exp;
branches;
next	4.1;
commitid	DNlk1u7X2Ic8wFXv;

4.1
date	96.11.05.09.40.07;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1
	4.1.10.1;
next	;

4.1.1.1
date	96.11.05.09.40.07;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.53.39;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.45.05;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.59.56;	author nturton;	state Exp;
branches;
next	;

4.1.10.1
date	2001.06.27.15.43.50;	author sbrodie;	state Exp;
branches;
next	4.1.10.2;

4.1.10.2
date	2001.06.28.13.28.32;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Fix for NULL pointer dereference
Looks like a typo, since there's no point checking search!=NULL then checking again 2 lines later, the intent was probably to check search->msg!=NULL.
Binary rebuilt with cc 5.71 in Disc environment.

Version 1.12. Tagged as 'Messages-1_12'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* MsgExt.c: */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "msgcommon.h"

typedef struct stTag Tag;
typedef struct stEntry Entry;

struct stTag {
    Tag  *next;
    char *id;
    char *msg;
};

struct stEntry {
    Tag   *root;
    char  *msg;
};

int line=-1;
char *progname=NULL;

   void Usage(void)
/* ------------------------------------------------------------------------------------------- */
{
    fprintf(stderr,"Usage:  %s <tokens file> <tags file>\n",progname);
    exit(1);
}


   void Show_Tag(Tag *this)
/* ------------------------------------------------------------------------------------------- */
{
    if (this == NULL)
        fprintf(stderr,"<null record>\n");
    else {
        fprintf(stderr,"Tag: '%s'\n",(this->id==0?"<null>":this->id));
        fprintf(stderr,"Msg: '%s'\n",(this->msg==0?"<null>":this->msg));
        fprintf(stderr,"Lnk: %08x\n",(int)this->next);
    }
}

   void Show_Entry(Entry *this)
/* ------------------------------------------------------------------------------------------- */
{
    if (this == NULL)
        fprintf(stderr,"<null entry>\n");
    else {
        Tag *chain = this->root;
        int count=0;

        fprintf(stderr,"Msg: '%s'\n",(this->msg==0?"<null>":this->msg));
        fprintf(stderr,"Root: \n");
        while (chain != NULL)
        {
           count++;
           fprintf(stderr,"Link %i:\n",count);
           Show_Tag(chain);
           chain = chain->next;
        }
    }
    fprintf(stderr,"\n");
}


   Tag *New_Tag(Tag *append,char *id, char *msg)
/* ------------------------------------------------------------------------------------------- */
{
    Tag *root;

    root = emalloc(sizeof(Tag));
    root->next = NULL;
    if (msg != NULL) root->msg = msg; else root->msg = NULL;
    if (id != NULL) root->id = id; else root->id = NULL;

    if (append != NULL) append->next = root;        /* Append to a given tag, if given */

    return root;
}


   Tag *Delete_Tag(Tag *root)
/* ------------------------------------------------------------------------------------------- */
{
    Tag *next;

    if (root == NULL) return NULL;

    if (root->msg != NULL) efree(root->msg);
    if (root->id != NULL) efree(root->id);
    next = root->next;
    efree(root);

    return next;
}


   Entry *Read_Tokens(Entry *root,char *filename)
/* ------------------------------------------------------------------------------------------- */
{
    FILE *read;

    if (root != NULL)
    {
        Tag *chain = root->root;                        /* => Entry.Root */
        while (chain != NULL)                           /* While links in the chain */
           chain = Delete_Tag(chain);

        if (root->msg) efree(root->msg);                /* Free Entry.msg */
        efree(root);                                    /* Free Entry */
        root = NULL;                                    /* Make sure root is NULL */
    }

    root = emalloc(sizeof(Entry));
    if (filename == NULL) return 0;                     /* Filename valid? */

    root->root = NULL;
    root->msg = xalloc(filename);

    if ((read=fopen(filename,"r")) != NULL && root != NULL)
    {
        char msgbuf[1024];
        Tag *head = NULL;

        fprintf(stderr,"Reading %s...\n",filename);


        while (!feof(read))
        {
            int mp;

            memset(msgbuf,0,1024);
            fgets(msgbuf,1024,read);

            mp=0;
            while (msgbuf[mp] != '\0')
                if (msgbuf[mp++] == '\n')
                        msgbuf[mp-1] = '\0';

            while (strchr(msgbuf,':') == NULL && !feof(read))
            {
                if (msgbuf[0] == '#') break;
                if (strlen(msgbuf) > 1 ) msgbuf[strlen(msgbuf)-1] = '/'; else msgbuf[0] = '\0';
                fgets(&msgbuf[strlen(msgbuf)],1024-strlen(msgbuf),read);
            }

            if (msgbuf[0] != '#' && msgbuf[0] != '\0')
            {
                char *colon = strchr(msgbuf,':');

                if (colon != NULL)
                {
                    char *x = xalloc(msgbuf), *b = x;
                    char taglen = (int)(colon-msgbuf);
                    char *tagsep;

                    x[taglen] = '\0';

                    tagsep = strchr(b,'/');
                    while (tagsep != NULL)
                    {
                        head = New_Tag(head,xnalloc(b,0,(int)(tagsep-b)),NULL);
                        if (root->root == NULL) root->root = head;
                        b = tagsep+1;
                        tagsep = strchr(b,'/');
                    }
                    head = New_Tag(head,xalloc(b),xalloc(colon+1));
                    if (root->root == NULL) root->root = head;
                    efree(x);
                }
                else
                {
                    report(1,EERR,"Missing ':' in %s\n",filename);
                }
            }
        }
        fclose(read);
    }
    return root;
}

   int Write_Tokens(Entry *tkns)
/* ------------------------------------------------------------------------------------------- */
{
    FILE *out;
    Tag *root;
    int count=0;

    if (tkns == NULL) report(2,ESERR,"Null -> passed to Write_Tokens\n");
    if (tkns->msg == NULL)
        out = stdout;
    else
        if ((out = fopen(tkns->msg,"a")) == NULL)
            return NULL;

    if ((root = tkns->root) != NULL)
    {
        while (root != NULL)
        {
            if (root->id != NULL) fprintf(out,"%s",root->id);
            if (root->msg == NULL)
            {
                if (root->id != NULL) fprintf(out,"/");
            } else {
                if (root->id != NULL) fprintf(out,":");
                fprintf(out,"%s",root->msg);
                fprintf(out,"\n");
            }
            root = root->next;
            count++;
        }
    } else {
        report(0,EWARN,"No tokens written\n");
        count = -1;
    }
    fclose(out);
    return count;
}


   int Expand_Tokens(Entry *subs,Entry *msgtags,Entry *only)
/* ------------------------------------------------------------------------------------------- */
{
    Tag *process = only->root;
    Tag *head = NULL;

    subs->root = NULL;

    while (process != NULL)
    {
        Tag *search = msgtags->root;
        while (search != NULL && strcmp(search->id,process->id) != NULL)
            search = search->next;

        if (search != NULL)
        {
            char clean[1024];

            if (search->msg != NULL)
            {
                int i,p=0,l;
                l = strlen(search->msg);
                for (i=0;i<l;i++)
                {
                    switch (search->msg[i])
                    {
                    case '|':i++; clean[p]='\n'; break;
                    case '%':i++; clean[p]='\n'; break;
                    default:
                        clean[p] = search->msg[i];
                    }
                    p++;
                }
                clean[p]='\0';
            }

            head = New_Tag(head,NULL,(search->msg!=NULL?xalloc(clean):NULL));
            if (subs->root == NULL) subs->root = head;
        } else {
            report(0,EERR,"Tag '%s' not found\n",process->id);
        }
        process = process->next;
    }

    return NULL;
}

   Entry *Read_Entry(Entry *root,FILE *in)
/* ------------------------------------------------------------------------------------------- */
{
    char msgbuf[1024];
    char *finished;
    Tag *head = NULL;

    if (root != NULL)
    {
       Tag *chain = root->root;                      /* => Entry.Root */

        while (chain != NULL)                           /* While links in the chain */
           chain = Delete_Tag(chain);

        if (root->msg != NULL) efree(root->msg);        /* Free Entry.msg */
        efree(root);                                    /* Free Entry */
        root = NULL;                                    /* Make sure root is NULL */
    }

    root = emalloc(sizeof(Entry));
    root->root = NULL;
    root->msg = NULL;

    memset(msgbuf,0,1024);
    fscanf(in,"%s",msgbuf);
    while (strchr(msgbuf,':') == NULL && !feof(in)) fscanf(in,"%s",msgbuf);

    if (feof(in)) return NULL;

    msgbuf[strlen(msgbuf)-1] = '\0';
    root->msg = xalloc(msgbuf); /* filename of file */

    if (feof(in)) report(0,EERR,"End of process file\n");

    finished = (char *)-1;
    while (finished != NULL)
    {
        char ctag[256];
        fscanf(in,"%s",ctag);
        finished = strchr(ctag,',');
        if (finished != NULL) *finished = '\0';

        {
            char *x = xalloc(ctag), *b = x;
            char *tagsep;
            tagsep = strchr(b,'/');
            while (tagsep != NULL)
            {
                head = New_Tag(head,xnalloc(b,0,(int)(tagsep-b)),NULL);
                if (root->root == NULL) root->root = head;
                b = tagsep+1;
                tagsep = strchr(b,'/');
            }
            head = New_Tag(head,xalloc(b),NULL);
            if (root->root == NULL) root->root = head;
            efree(x);
        }

    }
    return root;
}

   int main(int argc,char *argv[])
/* ------------------------------------------------------------------------------------------- */
{
    char *tokenfile = NULL, *tagsfile = NULL;
    FILE *tags;
    Entry *subs = NULL, *msgtags = NULL, *root = NULL;

    progname = *argv++; --argc;                  /* -> Name of program */
    if (argc != 2) Usage();

    tokenfile = *argv++;                         /* -> Name of token file */
    tagsfile = *argv++;                          /* -> Name of tags file */

    fclose( fopen(tokenfile,"w") );              /* Don't really want tokenfile to contain anything. */

    subs = Read_Tokens(NULL,tokenfile);

    /* Open for reading the tags file containing all the help tokens to be extracted and */
    /* create an error if not */
    /* */
    if ((tags = fopen(tagsfile,"r")) == NULL)
        report(1,ESERR,"Cannot open tags file '%s'\n",tagsfile);

    while ((root=Read_Entry(root,tags)) != NULL && !feof(tags))
    {
        /* At this point Entry 'root' contain 'filename' (root->msg) and a link list */
        /* of token to be obtained from the 'filename' (root->root.id, root->root.next) */

        /* Next order of business is to read in the whole message file, compress help token, */
        /* write out message tokens and warn of any lines greater than 240 characters in */
        /* length */
        /* */
        if ((msgtags=Read_Tokens(msgtags,root->msg)) == NULL)
            report(1,ESERR,"Unable to access '%s' for reading\n",root->msg);

        Expand_Tokens(subs,msgtags,root);

        if (Write_Tokens(subs) == NULL)
            report(1,ESERR,"Unable to access '%s' for writing\n",root->msg);

    }
    /* Close open tagfile */
    /* */
    fclose(tags);

    /* Discard Used Tokens */
    /* */
}

/* End of MsgTok.c */
@


4.2
log
@Fix spurious assert in MsgTok2. Tidy other utils a bit and rebuild all binaries.
Detail:
  Utils/c/MskTok2 - Fix spurious assert when tokenising a message that runs up to end of buffer and isn't newline terminated
  Utils/Makefile - Tweaked to use CApp makefile fragment
  Utils/MkClean,fd7, Utils/MkCVSClean,fd7 - New scripts for cleaning everything, or for cleaning just the bits we don't want in CVS
  Utils/o - Removed folder, shouldn't be in CVS
  Utils/c/Old - Removed folder, we rely on CVS to store old versions of files
  Utils/c/MsgExt, Utils/c/ScanRes, Utils/c/TokGen, Utils/c/TokGen2 - Fixed dangerous-sounding warnings (potential use of uninitialised variables, wrong fscanf arg type for "%s")
  Utils/*,ff8 - Rebuilt all binaries with Norcroft 5.69
Admin:
  Tested with building/running Iyonix & OMAP3 ROMs


Version 1.09. Tagged as 'Messages-1_09'
@
text
@d255 1
a255 1
            if (search != NULL)
@


4.1
log
@Initial revision
@
text
@d322 1
a322 1
        fscanf(in,"%s",&ctag);
@


4.1.10.1
log
@  Checkpoint check-in.
Detail:
  These are the initial portable versions of all these utilities.
  Most have not been tested and the rest have received cursory testing.
  They do all compile for me though.
Admin:
  Not for use - checked-in to provide a baseline only.
  Some notes on portability changes added too.


Version 1.05, 4.25.2.1. Tagged as 'Messages-1_05-4_25_2_1'
@
text
@d20 1
a20 2

#include "shared.h"
d36 4
a40 2
/*
static const char *chk_null(const char *s)
d42 2
a43 1
  return s ? s : "<null>";
d46 3
a48 1
static void Show_Tag(Tag *this_tag)
d50 1
a50 1
    if (this_tag == NULL)
d53 3
a55 3
        fprintf(stderr,"Tag: '%s'\n", chk_null(this_tag->id));
        fprintf(stderr,"Msg: '%s'\n", chk_null(this_tag->msg));
        fprintf(stderr,"Lnk: %08p\n", this_tag->next);
d59 2
a60 1
static void Show_Entry(Entry *this_entry)
d62 1
a62 1
    if (this_entry == NULL)
d65 1
a65 1
        Tag *chain = this_entry->root;
d68 1
a68 1
        fprintf(stderr,"Msg: '%s'\n", chk_null(this_entry->msg));
a79 1
*/
d82 1
a83 1
Tag *New_Tag(Tag *append,char *id, char *msg)
d87 1
a87 1
    root = safe_alloc(sizeof(Tag));
d89 2
a90 2
    root->msg = msg;
    root->id = id;
d98 1
a99 1
Tag *Delete_Tag(Tag *root)
d104 3
d108 1
a108 4

    free_block(root->msg);
    free_block(root->id);
    free_block(root);
d114 1
a115 1
Entry *Read_Tokens(Entry *root,char *filename)
d125 3
a127 2
        free_block(root->msg);                          /* Free Entry.msg */
        free_block(root);                               /* Free Entry */
d130 1
a132 1
    root = safe_alloc(sizeof(Entry));
d134 1
a134 1
    root->msg = str_dup_term(filename);
d136 1
a136 1
    if ((read=fopen(filename,"r")) != NULL)
d143 2
a144 1
        while (fgets(msgbuf, sizeof(msgbuf), read) != NULL)
d146 9
a154 1
            msgbuf[strcspn(msgbuf, "\n")] = '\0';
d169 1
a169 1
                    char *x = str_dup_term(msgbuf), *b = x;
d178 1
a178 1
                        head = New_Tag(head,str_dup_sub_term(b,0,(int)(tagsep-b)),NULL);
d183 1
a183 1
                    head = New_Tag(head,str_dup_term(b),str_dup_term(colon+1));
d185 1
a185 1
                    free_block(x);
d189 1
a189 1
                    report(EXIT_FAILURE, err_SERIOUS_ERROR,"Missing ':' in %s\n",filename);
d197 2
a199 1
int Write_Tokens(Entry *tkns)
d205 1
a205 1
    if (tkns == NULL) report(2,err_SERIOUS_ERROR,"Null -> passed to Write_Tokens\n");
d229 1
a229 1
        report(0,err_WARN,"No tokens written\n");
d273 1
a273 1
            head = New_Tag(head,NULL,(search->msg!=NULL?str_dup_term(clean):NULL));
d276 1
a276 1
            report(0,err_ERROR,"Tag '%s' not found\n",process->id);
d298 2
a299 2
        if (root->msg != NULL) free_block(root->msg);   /* Free Entry.msg */
        free_block(root);                               /* Free Entry */
d303 1
a303 1
    root = safe_alloc(sizeof(Entry));
d314 1
a314 1
    root->msg = str_dup_term(msgbuf); /* filename of file */
d316 1
a316 1
    if (feof(in)) report(0,err_ERROR,"End of process file\n");
d327 1
a327 1
            char *x = str_dup_term(ctag), *b = x;
d332 1
a332 1
                head = New_Tag(head,str_dup_sub_term(b,0,(int)(tagsep-b)),NULL);
d337 1
a337 1
            head = New_Tag(head,str_dup_term(b),NULL);
d339 1
a339 1
            free_block(x);
d346 2
a347 2

int main(int argc,char *argv[])
d353 2
a354 4
    shared_init(argc, argv);
    if (argc != 3) {
      report(EXIT_FAILURE, err_INFO, "Usage: %s <tokens file> <tags file>\n", progname);
    }
d356 2
a357 2
    tokenfile = argv[1];                         /* -> Name of token file */
    tagsfile = argv[2];                          /* -> Name of tags file */
d359 1
a359 2
    tags = fopen(tokenfile, "w");                /* Don't really want tokenfile to contain anything. */
    if (tags) fclose(tags);
d367 1
a367 1
        report(EXIT_FAILURE, err_SERIOUS_ERROR, "Cannot open tags file '%s'\n",tagsfile);
d379 1
a379 1
            report(EXIT_FAILURE, err_SERIOUS_ERROR,"Unable to access '%s' for reading\n",root->msg);
d384 1
a384 1
            report(EXIT_FAILURE, err_SERIOUS_ERROR,"Unable to access '%s' for writing\n",root->msg);
d388 1
d392 1
a392 1
    return 0;
@


4.1.10.2
log
@  Several utilities modified to return 0 from main() explicitly.
  Couple of NULL pointer bugs fixed.
Detail:
  UNIX builds stopped with "errors" because of the random numbers being
    treated as process return values.
  ResCommon and MsgExt both contained NULL pointer dereferences - these
    have been fixed (they cause seg faults on UNIX; RISC OS builds are
    just lucky to get away with it)
Admin:
  Run over a test resources directory and the output data file was built
    successfully.  It still remains to be seen whether the output file is
    sensible and matches that produced by a RISC OS build.


Version 1.05, 4.25.2.2. Tagged as 'Messages-1_05-4_25_2_2'
@
text
@d240 1
a240 1
            if (search->msg != NULL)
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
