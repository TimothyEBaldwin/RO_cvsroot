head	4.2;
access;
symbols
	Messages-1_12:4.2
	Messages-1_11:4.2
	Messages-1_10:4.2
	Messages-1_09:4.2
	Messages-1_08:4.1
	Messages-1_07:4.1
	RO_5_07:4.1
	Messages-1_06:4.1
	Messages-1_05-4_25_2_3:4.1.10.1
	Messages-1_05-4_25_2_2:4.1.10.1
	Messages-1_05-4_25_2_1:4.1.10.1
	sbrodie_dev:4.1.0.10
	sbrodie_dev_bp:4.1
	Messages-1_05:4.1
	Messages-1_04:4.1
	Messages-1_03:4.1
	Messages-1_02:4.1
	Messages-1_01:4.1
	Messages-1_00:4.1
	Messages-0_99:4.1
	dellis_autobuild_BaseSW:4.1
	Messages-0_98:4.1
	Messages-0_97:4.1
	Messages-0_96:4.1
	Messages-0_95:4.1
	Messages-0_94:4.1
	dcotton_Messages_13062000:4.1
	dcotton_Messages_10062000:4.1
	Messages-0_93:4.1
	Messages-0_92:4.1
	Messages-0_91:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	Messages-0_90:4.1
	Ursula_merge:4.1
	nturton_Messages-0_84:4.1
	Messages-0_89:4.1
	Messages-0_88:4.1
	Messages-0_87:4.1
	Messages-0_86:4.1
	Messages-0_85:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_Messages-0_79:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_Messages-0_85:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2012.03.20.21.30.31;	author jlee;	state Exp;
branches;
next	4.1;
commitid	DNlk1u7X2Ic8wFXv;

4.1
date	96.11.05.09.40.08;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1
	4.1.10.1;
next	;

4.1.1.1
date	96.11.05.09.40.08;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.54.01;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.45.13;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.00.02;	author nturton;	state Exp;
branches;
next	;

4.1.10.1
date	2001.06.27.15.43.51;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Fix spurious assert in MsgTok2. Tidy other utils a bit and rebuild all binaries.
Detail:
  Utils/c/MskTok2 - Fix spurious assert when tokenising a message that runs up to end of buffer and isn't newline terminated
  Utils/Makefile - Tweaked to use CApp makefile fragment
  Utils/MkClean,fd7, Utils/MkCVSClean,fd7 - New scripts for cleaning everything, or for cleaning just the bits we don't want in CVS
  Utils/o - Removed folder, shouldn't be in CVS
  Utils/c/Old - Removed folder, we rely on CVS to store old versions of files
  Utils/c/MsgExt, Utils/c/ScanRes, Utils/c/TokGen, Utils/c/TokGen2 - Fixed dangerous-sounding warnings (potential use of uninitialised variables, wrong fscanf arg type for "%s")
  Utils/*,ff8 - Rebuilt all binaries with Norcroft 5.69
Admin:
  Tested with building/running Iyonix & OMAP3 ROMs


Version 1.09. Tagged as 'Messages-1_09'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "swis.h"

#define TOKEN_LIST "@@BCEFHIJKLMNOPQUVXYZ^_bcefghijklmnopqrtuvxyz0123456789" ## \
"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f" ## \
"\x90\x91\x92\x93\x94\x95\x96\x97\x99\x99\x9a\x9b\x9c\x9d\x9e\x9f" ## \
"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xaa\xa9\xaa\xab\xac\xad\xae\xaf" ## \
"\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xbb\xb9\xba\xbb\xbc\xbd\xbe\xbf" ## \
"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xcc\xc9\xca\xcb\xcc\xcd\xce\xcf" ## \
"\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xdd\xd9\xda\xdb\xdc\xdd\xde\xdf" ## \
"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xee\xe9\xea\xeb\xec\xed\xee\xef" ## \
"\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xff\xf9\xfa\xfb\xfc\xfd\xfe\xff"

#define TOKEN_OVERHEAD 4

#define MAX_TOKEN_LEN 256

char *tokens[256];

/* See Sedgewick: Algorithms 2nd edition P 108 */
static void sortstrings(char **a, int n)
{
    int  h, i, j;
    char *v;

    a--;
    h = 1;
    do
        h = h * 3 + 1;
    while (h <= n);
    do {
        h = h / 3;
        for (i = h + 1; i <= n; i++) {
            v = a[i];
            j = i;
            /* *a > *v or *a = *v and a > v */
            while (j > h && (strcmp(a[j-h], v) > 0)) {
                a[j] = a[j-h];
                j -= h;
            }
            a[j] = v;
        }
    } while (h > 1);
}

static void write_out_token(char *s, FILE *f)
{
    int c;

    while ((c = *s++) != '\0') {
        if (c == '\\')
            write_out_token(tokens[*s++], f);
        else
            fputc(c, f);
    }
}

char *get_token(char *buff, int size, char **lines, int c)
{
    int i, k, l;
    char *cp, *s;
    int score, maxscore;
    char *best = NULL;
    int bestlen = 0, length, maxlen;
    int nextline;
    int n;
    static char token_buffer[MAX_TOKEN_LEN];

    l = 0;
    for (i = 0; i < size; ) {
        cp = buff + i;
        k = strlen(cp);
        i = i + k + 1;
        n = 0;
        while (k >= 3) {
            if (n != '\\' && n != '|' && n != '%') {
                lines[l++] = cp;
            }
            k--;
            n = *cp++;
        }
    }
    sortstrings(lines, l);
/*
    for (i = 0; i < l; i++)
         printf("%s\n", lines[i]);
*/
    maxscore = 0;
    for (i = 0; i < l - 1; i++) {
        cp = lines[i];
        maxlen = strlen(cp);
        if (maxlen > MAX_TOKEN_LEN - 1)
            maxlen = MAX_TOKEN_LEN - 1;
        for (length = 3; length <= maxlen;) {
            if (cp[length - 1] == '\\') {
                length++;
                continue;
            }
            nextline = i;
            n = 1;
            while (nextline < l - 1) {
                nextline++;
                s = lines[nextline];
                if (strncmp(cp, s, length))
                    break;
                n++;
            }
            if (n == 1) break;
            score = n * (length - 2) - (length + TOKEN_OVERHEAD);
            if (score > maxscore) {
                /*putchar('.');*/
                maxscore = score;
                best = cp;
                bestlen = length;
                length++;
            } else {
                    length = (maxscore + 2 * n + length + TOKEN_OVERHEAD) / n + 1;
            }
        }
    }
/*
    printf("Best token: \"");
    for (i = 0; i < bestlen; i++)
        putchar(best[i]);
    printf("\", Score = %4d\n", maxscore);
    putchar('\n');
*/
    if (maxscore <= 0) return 0;
    memcpy(token_buffer, best, bestlen);
    token_buffer[bestlen] = 0;
    return token_buffer;
}

int replace(char *buff, int size, char *token, int key)
{
    char *dest;
    int i;
    int toklen;

    toklen = strlen(token);
    dest = buff;
    for (i = 0; i < size;) {
        if (strncmp(token, buff + i, toklen) == 0) {
            *dest++ = '\\';
            *dest++ = key;
            i = i + strlen(token);
        } else {
            *dest++ = buff[i++];
        }
    }
    *dest = 0;
    return dest - buff;
}

void sub_main(int argc, char **argv)
{
    char *messages_file, *tokens_file;
    int size;
    char *cp;
    int linestart;
    char *finbuff;
    int i;
    char **lines;
    int c;
    int source, dest;
    int j;
    char *token;
    FILE *f;
    int t;

    if (argc != 3)
        _swi(OS_GenerateError, _IN(0),
             "\0\0\0\0Usage: TokGen <messages file> <tokens file>\n");
    messages_file = argv[1];
    tokens_file = argv[2];
    size = _swi(OS_File, _IN(0)|_IN(1)|_RETURN(4), 5, messages_file);
    if ((finbuff = malloc(size + 1)) == NULL)
        _swi(OS_GenerateError, _IN(0), "\0\0\0\0Out of memory");
    _swi(OS_File, _IN(0)|_IN(1)|_IN(2)|_IN(3), 16, messages_file, finbuff, 0);
    cp = finbuff;
    linestart = 1;
    for (i = 0; i < size; i++) {
        if (linestart) {
            linestart = 0;
        }
        if (!*cp || *cp == '\n') {
            *cp = 0;
            linestart = 1;
        }
        cp++;
    }
    finbuff[size] = 0;
    dest = 0;
    for (source = 0; source < size;) {
        c = finbuff[source];
        j = source;
        while (finbuff[++j] == c);
        if (j - source >= 3) {
            source = j;
        } else {
            finbuff[dest++] = c;
            source++;
        }
    }
    size = dest;
    finbuff[size] = 0;
    cp = TOKEN_LIST;
    lines = malloc(size * 4);
    if (!lines) _swi(OS_GenerateError, _IN(0), "\0\0\0\0Out of memory");
    printf("Original size = %d\n", size);
    for (i = 0; i < 256; i++)
        tokens[i] = "";
    t = _swi(OS_ReadMonotonicTime, 0);
    while ((c = *cp++) != '\0') {
        token = get_token(finbuff, size, lines, c);
        if (!token) break;
        tokens[c] = malloc(strlen(token) + 1);
        if (!tokens[c])
            _swi(OS_GenerateError, _IN(0), "\0\0\0\0Out of memory");
        strcpy(tokens[c], token);
        size = replace(finbuff, size, token, c);
        printf("Substituted \"%s\", key = \\%c, size now = %d\n", token, c, size);
    }
    t = _swi(OS_ReadMonotonicTime, 0) - t;
    printf("Time = %dcs\n", t);
    f = fopen(tokens_file, "w");
    if (!f)
        _swi(OS_GenerateError, _IN(0), "\0\0\0\0Error opening tokens file");
    for (i = 0; i < 256; i++) {
        token = tokens[i];
        if (strcmp(token, "")) {
            fputc('T', f);
            fputc(i, f);
            fputc(':', f);
            write_out_token(token, f);
            fputc('\n', f);
        }
    }
    fclose(f);
}

int main(int argc, char **argv)
{
    sub_main(argc, argv);
    exit(0);
}
@


4.1
log
@Initial revision
@
text
@d80 2
a81 2
    char *best;
    int bestlen, length, maxlen;
@


4.1.10.1
log
@  Checkpoint check-in.
Detail:
  These are the initial portable versions of all these utilities.
  Most have not been tested and the rest have received cursory testing.
  They do all compile for me though.
Admin:
  Not for use - checked-in to provide a baseline only.
  Some notes on portability changes added too.


Version 1.05, 4.25.2.1. Tagged as 'Messages-1_05-4_25_2_1'
@
text
@a0 21
/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* TokGen
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */

/* Standard C headers */
a17 6
#include <time.h>

/* CLX heders */
#include "wholefls.h"
#include "err.h"
#include "prgname.h"
d19 1
a36 34
/* The name of the program being executed */
static char progname[32];

static int get_file_length(char *filename)
{
  int i = (int) wf_filesize(filename);

  if (i == -1) {
    fprintf(stderr, "File '%s' not found\n", filename);
    exit(EXIT_FAILURE);
  }
  return i;
}

static void *load_file(char *filename, int *size)
{
  unsigned char *data;
  *size = get_file_length(filename);
  data = malloc(1+*size);
  if (data == NULL) {
    fprintf(stderr, "Unable to load file '%s' - out of memory\n", filename);
    exit(EXIT_FAILURE);
  }
  if (wf_load(filename, data, *size) == -1) {
    fprintf(stderr, "Unable to read file '%s'\n", filename);
    exit(EXIT_FAILURE);
  }
  /* put a NULL terminator after the file for safety */
  data[*size] = 0;
  return data;
}



a171 10
static char *safe_strdup(const char *s1)
{
  const size_t length = strlen(s1) + 1;
  char *const s2 = malloc(length);

  if (s2 == NULL) err_fail("Out of memory");
  return memcpy(s2, s1, length);
}


d186 1
a186 1
    time_t t, start_t;
d188 3
a190 3
    if (argc != 3) {
      err_fail("Usage: TokGen <messages file> <tokens file>");
    }
d193 4
a196 2

    finbuff = load_file(messages_file, &size);
d226 1
a226 1
    if (!lines) err_fail("Out of memory");
d228 1
a228 1
    for (i = 0; i < 256; i++) {
d230 1
a230 2
    }
    time(&start_t);
d234 4
a237 1
        tokens[c] = safe_strdup(token);
d241 1
a241 1
    t = time(NULL) - start_t;
d244 2
a245 3
    if (!f) {
        err_fail("Unable to open tokens file '%s'", tokens_file);
    }
d248 1
a248 1
        if (*token) {
d256 1
a256 3
    if (fclose(f) == EOF) {
      err_fail("Error writing tokens file '%s'", tokens_file);
    }
a260 1
    err_init(program_name(argv[0], progname, sizeof(progname)));
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
