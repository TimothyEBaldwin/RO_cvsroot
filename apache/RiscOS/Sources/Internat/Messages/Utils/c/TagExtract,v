head	4.1;
access;
symbols
	Messages-1_12:4.1
	Messages-1_11:4.1
	Messages-1_10:4.1
	Messages-1_09:4.1
	Messages-1_08:4.1
	Messages-1_07:4.1
	RO_5_07:4.1
	Messages-1_06:4.1
	Messages-1_05-4_25_2_3:4.1.10.1
	Messages-1_05-4_25_2_2:4.1.10.1
	Messages-1_05-4_25_2_1:4.1.10.1
	sbrodie_dev:4.1.0.10
	sbrodie_dev_bp:4.1
	Messages-1_05:4.1
	Messages-1_04:4.1
	Messages-1_03:4.1
	Messages-1_02:4.1
	Messages-1_01:4.1
	Messages-1_00:4.1
	Messages-0_99:4.1
	dellis_autobuild_BaseSW:4.1
	Messages-0_98:4.1
	Messages-0_97:4.1
	Messages-0_96:4.1
	Messages-0_95:4.1
	Messages-0_94:4.1
	dcotton_Messages_13062000:4.1
	dcotton_Messages_10062000:4.1
	Messages-0_93:4.1
	Messages-0_92:4.1
	Messages-0_91:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	Messages-0_90:4.1
	Ursula_merge:4.1
	nturton_Messages-0_84:4.1
	Messages-0_89:4.1
	Messages-0_88:4.1
	Messages-0_87:4.1
	Messages-0_86:4.1
	Messages-0_85:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_Messages-0_79:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_Messages-0_85:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.40.08;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1
	4.1.10.1;
next	;

4.1.1.1
date	96.11.05.09.40.08;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.53.57;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.45.11;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.00.01;	author nturton;	state Exp;
branches;
next	;

4.1.10.1
date	2001.06.27.15.43.51;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


4.1
log
@Initial revision
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * TagExtract <directory> <dictionary tag file> <!Help tag file>
 *
 * Create dictionary and !Help tag files for messages module build.
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <ctype.h>

#include "swis.h"

#define BUFSZ   512

#define FALSE   0
#define TRUE    ~FALSE

#define FATAL           TRUE
#define NON_FATAL       FALSE

#define STATE_DEFAULT   0
#define STATE_DICTTOK   1
#define STATE_HELPTOK   2

char dir[ BUFSZ ];
char dictfile[ BUFSZ ];
char helpfile[ BUFSZ ];
char text[ BUFSZ ];
char token0[ BUFSZ ];

typedef unsigned int word;

typedef struct
{
        word loadaddr;
        word execaddr;
        word length;
        word attr;
        word type;
        char name[1];
} object;

#define filetype( object )      (((object)->loadaddr>>8)&0xFFF)


/* Print an error and then exit.
 */
void
error( int fatal, const char *str, ... )
{
        va_list argp;

        printf( fatal ? "Error: " : "Warning: " );

        va_start( argp, str );
        vprintf( str, argp );
        va_end( argp );

        if ( fatal ) exit( 1 );
}

int
gettype( char *obj )
{
        int type;

        _swi( OS_File, _IN(0)|_IN(1)|_OUT(0), 17, obj, &type );

        return type;
}

/* Match two strings ignoring case. A partial match is allowed ie. the
 * comparison stops as soon as either terminator is reached.
 */
int
strcmp_nocase( char *s1, char *s2 )
{
        while ( (*s1 != '\0') && (*s2 != '\0') )
        {
                char a = toupper( *s1++ );
                char b = toupper( *s2++ );
                if ( a < b ) return -1;
                if ( a > b ) return 1;
        };
        return 0;
}

/* Output a '\0' terminated string to the given file.
 */
void
output0( char *text, FILE *fp )
{
        if ( fputs(text, fp) == EOF )
                error( FATAL, "Write failed\n" );
}

/* Output a counted string to the given file.
 */
void
outputn( char *text, int n, FILE *fp )
{
        if ( fwrite(text, sizeof(char), n, fp) != n )
                error( FATAL, "Write failed\n" );
}

/* If the text passed in contains a tag then output it to the given file.
 * If first is TRUE then this is the first tag output for the current file
 * so the file name is output first, otherwise it is a continuation so a
 * comma is output before the tag. Function returns TRUE if anything was
 * output.
 */
int
output_token( char *text, int *first, FILE *fp )
{
        char *cp = strchr( text, ':' );

        if ( cp != NULL )
        {
                if ( *first )
                {
                        output0( dir, fp );
                        output0( ": ", fp );
                        *first = FALSE;
                }
                else
                {
                        output0( ", ", fp );
                }

                outputn( text, cp-text, fp );
                return TRUE;
        }

        return FALSE;
}

/* Scan the given file and output tags to the tag files as appropriate.
 */
void
scan( char *obj, FILE *dictfp, FILE *helpfp )
{
        FILE *fp = fopen( obj, "r" );

        if ( fp )
        {
                int state = STATE_DEFAULT;                      /* Initial state is no tokenisation. */
                int first_dict = TRUE, first_help = TRUE;       /* Not written to either file yet. */
                int ignore_next = FALSE;                        /* Used when buffer is not big enough for whole line. */
                long size = ftell( fp );                        /* Used to find out how much is read at one time. */

                printf( "Extracting tags from '%s'.\n", obj );

                *token0 = '\0';                                 /* No text for token 0 initially. */

                while ( fgets( text, BUFSZ, fp ) )
                {
                        size = ftell(fp) - size;

                        if ( ignore_next )
                        {
                                /* Ignoring this buffer as it is a continuation of the last line.
                                 * Only start again when end of line is found.
                                 */
                                if ( text[size-1] == '\n' )
                                        ignore_next = FALSE;
                        }
                        else
                        {
                                if ( *text == '#' )
                                {
                                        /* Found a comment so see if it is actually a directive.
                                         */
                                        if ( strcmp_nocase(text+1, "{Default}") == 0 )
                                        {
                                                state = STATE_DEFAULT;
                                        }
                                        else
                                        {
                                                if ( strcmp_nocase(text+1, "{DictTokens}") == 0 )
                                                {
                                                        state = STATE_DICTTOK;
                                                        *token0 = '\0';
                                                }
                                                else
                                                {
                                                        if ( strcmp_nocase(text+1, "{HelpTokens}") == 0 )
                                                        {
                                                                state = STATE_HELPTOK;
                                                        }
                                                        else
                                                        {
                                                                if ( strcmp_nocase(text+1, "{Token0=") == 0 )
                                                                {
                                                                        if ( state != STATE_DICTTOK )
                                                                        {
                                                                                error( NON_FATAL, "Attempt to set token 0 when not performing dictionary tokenisation in '%s'.\n", obj );
                                                                        }
                                                                        else
                                                                        {
                                                                                char *tp = text+9;      /* Skip "#{Token0=". */
                                                                                char *cp = token0;

                                                                                /* Copy string for token 0 into buffer.
                                                                                 */
                                                                                while ( *tp != '}' )
                                                                                {
                                                                                        if ( *tp < ' ' )
                                                                                                error( NON_FATAL, "Badly formed directive in '%s'\n", obj );
                                                                                        *cp++ = *tp++;
                                                                                }
                                                                                *cp = '\0';
                                                                        }
                                                                }
                                                        }
                                                }
                                        }
                                }
                                else
                                {
                                        switch ( state )
                                        {
                                                case STATE_DEFAULT:
                                                        break;

                                                case STATE_DICTTOK:
                                                        if ( output_token(text, &first_dict, dictfp) && (*token0 != '\0') )
                                                        {
                                                                /* If we have a current token 0 string then output it too.
                                                                 */
                                                                output0( ":", dictfp );
                                                                output0( token0, dictfp );
                                                        }
                                                        break;

                                                case STATE_HELPTOK:
                                                        output_token( text, &first_help, helpfp );
                                                        break;
                                        }
                                }

                                /* If no '\n' at the end of the string then the line was too big for the buffer
                                 * so ignore any more input until '\n' is found.
                                 */
                                if ( text[size-1] != '\n' )
                                        ignore_next = TRUE;
                        }

                        /* Set up size so we can work out how much is read next time round.
                         */
                        size = ftell( fp );
                }

                /* Output new lines if we wrote anything to the files.
                 */
                if ( !first_dict ) output0( "\n\n", dictfp );
                if ( !first_help ) output0( "\n\n", helpfp );

                fclose( fp );
        }
        else
        {
                error( NON_FATAL, "Couldn't open file '%s' for read\n", obj );
        }
}

/* Append leaf to path.
 */
void
appendleaf( char *path, char *leaf )
{
        strcat( path, "." );
        strcat( path, leaf );
}

/* Strip leaf from path.
 */
void
stripleaf( char *path )
{
        char *sep = strrchr( path, '.' );

        if ( sep != 0 ) *sep = '\0';
}

/* Descend into the given directory. Called recursively to scan a whole
 * directory structure.
 */
void
descend( char *path, FILE *dictfp, FILE *helpfp )
{
        char *buf = malloc( BUFSZ );
        int offset = 0;

        if ( buf != NULL )
        {
                do
                {
                        object *op = (object *)buf;
                        int nread;

                        _swi( OS_GBPB, _IN(0)|_IN(1)|_IN(2)|_IN(3)|_IN(4)|_IN(5)|_IN(6)|_OUT(3)|_OUT(4),
                                10, path, buf, 80, offset, BUFSZ, 0, &nread, &offset );

                        while ( nread > 0 )
                        {
                                switch ( op->type )
                                {
                                        case 1:
                                                if ( filetype(op) == 0xFFF )
                                                {
                                                        /* Text file found so scan it for tags.
                                                         */
                                                        appendleaf( path, op->name );
                                                        scan( path, dictfp, helpfp );
                                                        stripleaf( path );
                                                }
                                                break;

                                        case 2:
                                                /* Directory found so descend into it.
                                                 */
                                                appendleaf( path, op->name );
                                                descend( path, dictfp, helpfp );
                                                stripleaf( path );
                                                break;

                                        default:
                                                error( NON_FATAL, "Don't know how to process object type %d\n", op->type );
                                }

                                op = (object *)(((int)(op->name)+strlen(op->name)+4)&~3);
                                nread -= 1;
                        }
                } while ( offset != -1 );

                free( buf );
        }
        else
        {
                error( FATAL, "Couldn't allocate enough memory\n" );
        }
}

/* Canonicalise the given file name.
 */
void
canonicalise( char *src, char *dest, int bufsz )
{
        _swi( OS_FSControl, _IN(0)|_IN(1)|_IN(2)|_IN(3)|_IN(4)|_IN(5),
                37, src, dest, 0, 0, bufsz );
}

int
main( int argc, char *argv[] )
{
        if ( argc != 4 )
        {
                printf( "Syntax: TagExtract <directory> <dict tags> <help tags>\n" );
        }
        else
        {
                strcpy( dir, argv[1] );
                canonicalise( argv[2], dictfile, BUFSZ );
                canonicalise( argv[3], helpfile, BUFSZ );

                if ( gettype(dir) == 2 )
                {
                        FILE *dictfp, *helpfp;

                        if ( (dictfp = fopen(dictfile, "w")) != NULL )
                        {
                                if ( (helpfp = fopen(helpfile, "w")) != NULL )
                                {
                                        descend( dir, dictfp, helpfp );
                                        fclose( helpfp );
                                        fclose( dictfp );
                                }
                                else
                                {
                                        fclose( dictfp );
                                        error( FATAL, "'%s' could not be opened for update\n", helpfile );
                                }
                        }
                        else
                        {
                                error( FATAL, "'%s' could not be opened for update\n", dictfile );
                        }
                }
                else
                {
                        error( FATAL, "'%s' is not a directory\n", dir );
                }
        }
}
@


4.1.10.1
log
@  Checkpoint check-in.
Detail:
  These are the initial portable versions of all these utilities.
  Most have not been tested and the rest have received cursory testing.
  They do all compile for me though.
Admin:
  Not for use - checked-in to provide a baseline only.
  Some notes on portability changes added too.


Version 1.05, 4.25.2.1. Tagged as 'Messages-1_05-4_25_2_1'
@
text
@a23 1
#include <stddef.h>
a25 1
#include <errno.h>
d27 1
a27 12
/* CLX */
#include "err.h"
#include "prgname.h"
#include "wholefls.h"
#include "host.h"

#ifdef RISCOS
#  include "swis.h"
#else
#  include <sys/stat.h>
#  include <dirent.h>
#endif
a28 1
#ifdef RISCOS
a29 3
#else
#define BUFSZ   4096
#endif
a46 2
char dir_sep_char;

a50 1
#ifdef RISCOS
a54 1
#endif
a58 1
#ifdef RISCOS
a59 3
#else
#define filetype( object )      (0xFFF)
#endif
d69 1
a69 1
        fprintf( stderr, fatal ? "Error: " : "Warning: " );
d72 1
a72 1
        vfprintf( stderr, str, argp );
d81 5
a85 1
        return wf_objtype(obj);
a87 16
/* Function to compare two strings case insensitively
 *
 * Originally: sbrodie
 *
 * Parameters: matches those of strcmp.
 * Result: matches the exit conditions of strcmp.
 *
 *
 * The conversions to unsigned int stop the compiler messing around with
 * shifts all over the place whilst trying to promote the chars to int
 * whilst retaining the sign.
 *
 * Problems: Choice of return value when strings do not match is based
 *           upon character number rather than any alphabetic sorting.
 *
 */
d91 2
a92 1
int strcmp_nocase(const char *first_param, const char *second_param)
d94 8
a101 18
        const unsigned char *first = (const unsigned char *) first_param;
        const unsigned char *second = (const unsigned char *) second_param;

        for (;;) {
                unsigned int a = *first++;
                unsigned int b = *second++;

                /* only if either a or b is zero is the multiplication result 0 */
                if ((a * b) == 0) return 0;

                if (a != b) {
                        /* avoid the tolower() call until we need it */
                        unsigned int c = (unsigned int) tolower(a);
                        unsigned int d = (unsigned int) tolower(b);
                        signed int result = c - d;
                        if (result != 0) return result;
                }
        }
d282 1
a282 2

/* Append leaf to path, returning truncation point to remove it again
d284 1
a284 1
char *
d287 2
a288 4
        path = strchr(path, '\0');
        *path = dir_sep_char;
        (void) strcpy(path+1, leaf);
        return path;
d296 1
a296 2
        *path = '\0';
}
d298 1
a298 70

typedef struct {
  object op[2];
} align_test;

#define STRUCTURE_ALIGNMENT \
  ((offsetof(align_test, op[1]) - offsetof(align_test, op[0].name)) - 1)

#ifndef RISCOS
void load_unix_directory(char *dir, char *buf, size_t bufsize, int *nread)
{
  DIR *d = opendir(dir);
  char *const leaf = appendleaf(dir, "") + 1;

  *nread = 0;

  if (!d) {
    error(FATAL, "Unable to open directory '%s'\n", dir);
  }

  for (;;) {
    struct dirent *de;
    errno = 0;
    de = readdir(d);
    if (de == NULL) {
      if (errno == 0) {
        break;
      }
      else {
        error( NON_FATAL, "Unable to read directory '%s': %s\n", dir, strerror(errno));
        break;
      }
    }
    else {
      char *last_comma, *eos;
      object *op = (object *) buf;
      int namelen;

      if (de->d_name[0] == '.' && (de->d_name[1] == '\0' || (de->d_name[1] == '.' && de->d_name[2] == '\0'))) {
        continue;
      }

      /* Find length of leafname whilst copying it */
      namelen = sprintf(leaf, "%s", de->d_name);

      if (sizeof(*op) + namelen >= bufsize) {
        error(FATAL, "out of buffer space in load_unix_directory (directory %s)", dir);
      }

      op->type = gettype(dir);
      if (op->type != 1 && op->type != 2) {
        continue;
      }
      last_comma = strrchr(leaf, ',');
      if (last_comma != NULL && strtoul(last_comma+1, &eos, 16) != 0xfff && *eos == '\0') {
        /* OK - it was a non-textual file or directory - dump it */
      }
      else {
        buf = memcpy(op->name, de->d_name, namelen) + namelen;
        do {
          *buf++ = '\0';
        } while (((int)buf)&STRUCTURE_ALIGNMENT);
        bufsize -= (buf - (char *)op);
        ++(*nread);
      }
    }
  }

  (void) closedir(d);
  leaf[-1] = '\0';
a299 1
#endif
a303 1
#pragma check_stack
a316 1
#ifdef RISCOS
a318 4
#else
                        offset = -1;
                        load_unix_directory(path, buf, BUFSZ, &nread);
#endif
d329 1
a329 1
                                                        char *trunc_char = appendleaf( path, op->name );
d331 1
a331 1
                                                        stripleaf( trunc_char );
d335 7
a341 8
                                        case 2: {
                                                  /* Directory found so descend into it.
                                                   */
                                                  char *trunc_char = appendleaf( path, op->name );
                                                  descend( path, dictfp, helpfp );
                                                  stripleaf( trunc_char );
                                                  break;
                                                }
d347 1
a347 1
                                op = (object *)(((int)(op->name)+strlen(op->name)+STRUCTURE_ALIGNMENT+1)&~STRUCTURE_ALIGNMENT);
a358 1
#pragma no_check_stack
a364 1
#ifdef RISCOS
a366 4
#else
        *dest = 0;
        strncat(dest, src, bufsz);
#endif
a371 2
//  printf("%d\n", STRUCTURE_ALIGNMENT);
//  exit(0);
a377 2
                host_init();
                dir_sep_char = host_dir_sep_char();
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
