head	4.2;
access;
symbols
	Messages-1_08:4.1
	Messages-1_07:4.1
	RO_5_07:4.1
	Messages-1_06:4.1
	Messages-1_05-4_25_2_3:4.1
	Messages-1_05-4_25_2_2:4.1
	Messages-1_05-4_25_2_1:4.1
	sbrodie_dev:4.1.0.10
	sbrodie_dev_bp:4.1
	Messages-1_05:4.1
	Messages-1_04:4.1
	Messages-1_03:4.1
	Messages-1_02:4.1
	Messages-1_01:4.1
	Messages-1_00:4.1
	Messages-0_99:4.1
	dellis_autobuild_BaseSW:4.1
	Messages-0_98:4.1
	Messages-0_97:4.1
	Messages-0_96:4.1
	Messages-0_95:4.1
	Messages-0_94:4.1
	dcotton_Messages_13062000:4.1
	dcotton_Messages_10062000:4.1
	Messages-0_93:4.1
	Messages-0_92:4.1
	Messages-0_91:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.1
	Messages-0_90:4.1
	Ursula_merge:4.1
	nturton_Messages-0_84:4.1
	Messages-0_89:4.1
	Messages-0_88:4.1
	Messages-0_87:4.1
	Messages-0_86:4.1
	Messages-0_85:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_Messages-0_79:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_Messages-0_85:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2012.03.20.21.30.34;	author jlee;	state dead;
branches;
next	4.1;
commitid	DNlk1u7X2Ic8wFXv;

4.1
date	96.11.05.09.40.09;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.40.09;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.54.09;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.45.16;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.00.04;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Fix spurious assert in MsgTok2. Tidy other utils a bit and rebuild all binaries.
Detail:
  Utils/c/MskTok2 - Fix spurious assert when tokenising a message that runs up to end of buffer and isn't newline terminated
  Utils/Makefile - Tweaked to use CApp makefile fragment
  Utils/MkClean,fd7, Utils/MkCVSClean,fd7 - New scripts for cleaning everything, or for cleaning just the bits we don't want in CVS
  Utils/o - Removed folder, shouldn't be in CVS
  Utils/c/Old - Removed folder, we rely on CVS to store old versions of files
  Utils/c/MsgExt, Utils/c/ScanRes, Utils/c/TokGen, Utils/c/TokGen2 - Fixed dangerous-sounding warnings (potential use of uninitialised variables, wrong fscanf arg type for "%s")
  Utils/*,ff8 - Rebuilt all binaries with Norcroft 5.69
Admin:
  Tested with building/running Iyonix & OMAP3 ROMs


Version 1.09. Tagged as 'Messages-1_09'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* MsgTok.c: */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "msgcommon.h"

typedef struct stTag Tag;
typedef struct stEntry Entry;

struct stTag {
    Tag  *next;
    char *id;
    char *msg;
};

struct stEntry {
    Tag   *root;
    char  *msg;
};

int line=-1;
char *progname=NULL;

   void Usage(void)
/* ------------------------------------------------------------------------------------------- */
{
    fprintf(stderr,"Usage:  %s <tokens file> <tags file>\n",progname);
    exit(1);
}


   void Show_Tag(Tag *this)
/* ------------------------------------------------------------------------------------------- */
{
    if (this == NULL)
        fprintf(stderr,"<null record>\n");
    else {
        fprintf(stderr,"Tag: '%s'\n",(this->id==0?"<null>":this->id));
        fprintf(stderr,"Msg: '%s'\n",(this->msg==0?"<null>":this->msg));
        fprintf(stderr,"Lnk: %08x\n",(int)this->next);
    }
}

   void Show_Entry(Entry *this)
/* ------------------------------------------------------------------------------------------- */
{
    if (this == NULL)
        fprintf(stderr,"<null entry>\n");
    else {
        Tag *chain = this->root;
        int count=0;

        fprintf(stderr,"Msg: '%s'\n",(this->msg==0?"<null>":this->msg));
        fprintf(stderr,"Root: \n");
        while (chain != NULL)
        {
           count++;
           fprintf(stderr,"Link %i:\n",count);
           Show_Tag(chain);
           chain = chain->next;
        }
    }
    fprintf(stderr,"\n");
}


   Tag *New_Tag(Tag *append,char *id, char *msg)
/* ------------------------------------------------------------------------------------------- */
{
    Tag *root;

    root = emalloc(sizeof(Tag));
    root->next = NULL;
    if (msg != NULL) root->msg = msg; else root->msg = NULL;
    if (id != NULL) root->id = id; else root->id = NULL;

    if (append != NULL) append->next = root;        /* Append to a given tag, if given */

    return root;
}


   Tag *Delete_Tag(Tag *root)
/* ------------------------------------------------------------------------------------------- */
{
    Tag *next;

    if (root == NULL) return NULL;

    if (root->msg != NULL) efree(root->msg);
    if (root->id != NULL) efree(root->id);
    next = root->next;
    efree(root);

    return next;
}


   Entry *Read_Tokens(Entry *root,char *filename)
/* ------------------------------------------------------------------------------------------- */
{
    FILE *read;

    if (root != NULL)
    {
        Tag *chain = root->root;                        /* => Entry.Root */
        while (chain != NULL)                           /* While links in the chain */
           chain = Delete_Tag(chain);

        if (root->msg) efree(root->msg);                /* Free Entry.msg */
        efree(root);                                    /* Free Entry */
        root = NULL;                                    /* Make sure root is NULL */
    }

    root = emalloc(sizeof(Entry));
    if (filename == NULL) return 0;                     /* Filename valid? */

    if ((read=fopen(filename,"r")) != NULL && root != NULL)
    {
        char msgbuf[1024];
        Tag *head = NULL;

        root->root = NULL;
        root->msg = xalloc(filename);

        while (!feof(read))
        {
            int mp;

            memset(msgbuf,0,1024);

            mp = 0;
            do {
                if (mp > 0) msgbuf[mp++] = '/';

                fgets(msgbuf+mp, 1024-mp, read);

                if (msgbuf[0] == '#') break;

                while (msgbuf[mp] != '\0')
                    if (msgbuf[mp++] == '\n')
                        msgbuf[--mp] = '\0';
            } while (strchr(msgbuf,':') == NULL && !feof(read));

            if (msgbuf[0] != '#' && msgbuf[0] != '\0')
            {
                char *colon = strchr(msgbuf,':');

                if (colon != NULL)
                {
                    char *x = xalloc(msgbuf), *b = x;
                    char taglen = (int)(colon-msgbuf);
                    char *tagsep;

                    x[taglen] = '\0';

                    tagsep = strchr(b,'/');
                    while (tagsep != NULL)
                    {
                        head = New_Tag(head,xnalloc(b,0,(int)(tagsep-b)),NULL);
                        if (root->root == NULL) root->root = head;
                        b = tagsep+1;
                        tagsep = strchr(b,'/');
                    }
                    head = New_Tag(head,xalloc(b),xalloc(colon+1));
                    if (root->root == NULL) root->root = head;
                    efree(x);
                }
                else
                {
                    report(1,EERR,"Missing ':', in %s\n",filename);
                }
            }
        }
        fclose(read);
    }
    return root;
}

   int Write_Tokens(Entry *tkns)
/* ------------------------------------------------------------------------------------------- */
{
    FILE *out;
    Tag *root;
    int count=0;

    if (tkns == NULL) report(2,ESERR,"Null -> passed to Write_Tokens\n");
    if (tkns->msg == NULL)
        out = stdout;
    else
        if ((out = fopen(tkns->msg,"w")) == NULL)
            return NULL;

    /*fprintf(stderr,"Writing tokens...\n");*/

    if ((root = tkns->root) != NULL)
    {
        while (root != NULL)
        {
            if (root->id == NULL) report(2,ESERR,"Null Tag Id in Write_Tokens\n");
            fprintf(out,"%s",root->id);
            if (root->msg == NULL) fprintf(out,"/"); else fprintf(out,":%s\n",root->msg);
            root = root->next;
            count++;
        }
    } else {
        report(2,EWARN,"No tokens written\n");
    }
    fclose(out);
    return count;
}


   int Compress_Tokens(Entry *subs,Entry *msgtags,Entry *only)
/* ------------------------------------------------------------------------------------------- */
{
    char paste[1024];
    Tag *process = only->root;
    while (process != NULL)
    {
        Tag *search = msgtags->root;
        while (search != NULL && strcmp(search->id,process->id) != NULL)
           search = search->next;

        if (search != NULL)
        {
            int idx = 0;
            char *st = search->msg;

            if (st != NULL)
            {
                while (st[idx] != '\0')
                {
                    Tag *found = subs->root;
                    Tag *longest= NULL;
                    while (found != NULL)
                    {
                        if (strncmp(found->msg,&st[idx],strlen(found->msg)) == NULL)
                        {
                            if (longest == NULL)
                                longest = found;
                            else
                                if (strlen(found->msg) > strlen(longest->msg))
                                    longest = found;
                        }
                        found = found->next;
                    }

                    if (longest != NULL)
                    {
                        strncpy(paste,st,idx);
                        paste[idx] = '\0';
                        strcat(paste,"\\");
                        strcat(paste,&longest->id[1]);
                        strcat(paste,&st[idx+strlen(longest->msg)]);
                        efree(search->msg);
                        search->msg = xalloc(paste);
                        st = search->msg;
                        idx+=strlen(longest->id);
                    }
                    else
                        idx++;
                };
            }
        } else {
            report(0,EERR,"Tag '%s' not found\n",process->id);
        }
        process = process->next;
    }

    return NULL;
}

   Entry *Read_Entry(Entry *root,FILE *in)
/* ------------------------------------------------------------------------------------------- */
{
    char msgbuf[1024];
    char *finished;
    Tag *head = NULL;

    if (root != NULL)
    {
       Tag *chain = root->root;                      /* => Entry.Root */

        while (chain != NULL)                           /* While links in the chain */
           chain = Delete_Tag(chain);

        if (root->msg != NULL) efree(root->msg);        /* Free Entry.msg */
        efree(root);                                    /* Free Entry */
        root = NULL;                                    /* Make sure root is NULL */
    }

    root = emalloc(sizeof(Entry));
    root->root = NULL;
    root->msg = NULL;

    memset(msgbuf,0,1024);
    fscanf(in,"%s",msgbuf);
    while (strchr(msgbuf,':') == NULL && !feof(in)) fscanf(in,"%s",msgbuf);

    if (feof(in)) return NULL;

    msgbuf[strlen(msgbuf)-1] = '\0';
    root->msg = xalloc(msgbuf); /* filename of file */

    if (feof(in)) report(0,EERR,"End of process file\n");

    finished = (char *)-1;
    while (finished != NULL)
    {
        char ctag[256];
        fscanf(in,"%s",&ctag);
        finished = strchr(ctag,',');
        if (finished != NULL) *finished = '\0';

        {
            char *x = xalloc(ctag), *b = x;
            char *tagsep;
            tagsep = strchr(b,'/');
            while (tagsep != NULL)
            {
                head = New_Tag(head,xnalloc(b,0,(int)(tagsep-b)),NULL);
                if (root->root == NULL) root->root = head;
                b = tagsep+1;
                tagsep = strchr(b,'/');
            }
            head = New_Tag(head,xalloc(b),NULL);
            if (root->root == NULL) root->root = head;
            efree(x);
        }

    }
    return root;
}

   int main(int argc,char *argv[])
/* ------------------------------------------------------------------------------------------- */
{
    char *tokenfile = NULL, *tagsfile = NULL;
    FILE *tags;
    Entry *subs = NULL, *msgtags = NULL, *root = NULL;

    progname = *argv++; --argc;                  /* -> Name of program */
    if (argc != 2) Usage();

    tokenfile = *argv++;                         /* -> Name of token file */
    tagsfile = *argv++;                          /* -> Name of tags file */

    subs = Read_Tokens(subs,tokenfile);          /* Obtain token to be used for tokenistation */

    /* Open for reading the tags file containing all the help tokens that need compression and */
    /* create an error if not */
    /* */
    if ((tags = fopen(tagsfile,"r")) == NULL)
        report(1,ESERR,"Cannot open tags file '%s'\n",tagsfile);

    while ((root=Read_Entry(root,tags)) != NULL)
    {
        /* At this point Entry 'root' contain 'filename' (root->msg) and a link list */
        /* of token to be obtained from the 'filename' (root->root.id, root->root.next) */

        /* Next order of business is to read in the whole message file, compress help token, */
        /* write out message tokens and warn of any lines greater than 240 characters in */
        /* length */
        /* */
        if ((msgtags=Read_Tokens(msgtags,root->msg)) == NULL)
            report(1,ESERR,"Unable to access '%s' for reading\n",root->msg);

        Compress_Tokens(subs,msgtags,root);

        if (Write_Tokens(msgtags) == NULL)
            report(1,ESERR,"Unable to access '%s' for writing\n",root->msg);
    }

    /* Close open tagfile */
    /* */
    fclose(tags);

    /* Discard Used Tokens */
    /* */
}

/* End of MsgTok.c */
@


4.1
log
@Initial revision
@
text
@@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
