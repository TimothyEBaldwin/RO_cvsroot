head	1.3;
access;
symbols
	Messages-1_12:1.3
	Messages-1_11:1.3
	Messages-1_10:1.3
	Messages-1_09:1.3
	Messages-1_08:1.3
	Messages-1_07:1.3
	RO_5_07:1.3
	Messages-1_06:1.3
	Messages-1_05-4_25_2_3:1.2.2.1
	Messages-1_05-4_25_2_2:1.2.2.1
	Messages-1_05-4_25_2_1:1.2.2.1
	sbrodie_dev:1.2.0.2
	sbrodie_dev_bp:1.2
	Messages-1_05:1.2
	Messages-1_04:1.2
	Messages-1_03:1.2
	Messages-1_02:1.2
	Messages-1_01:1.2
	Messages-1_00:1.1
	dcotton_autobuild_BaseSW:1.2
	Messages-0_99:1.1;
locks; strict;
comment	@# @;


1.3
date	2003.12.02.15.50.04;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.23.12.55.35;	author rthornbu;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2000.10.17.08.21.37;	author rthornbu;	state Exp;
branches;
next	;

1.2.2.1
date	2001.06.27.15.43.49;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  Given a thrashing to make it build on a 32-bit machine.
Detail:
  * Switched to build the module using objasm instead of aasm
  * Rebuilt all the utils APCS-32, involved making them C99 compliant
  * Fixed a bug in MsgTok whereby single character tokens would screw up
    the output (because the tokenised version is longer than the original).
    Not really sure how we got away with this in the past, and not sure why
    the token generator produces single-character tokens to begin with.
Admin:
  Tested in a Tungsten build.

Version 1.06. Tagged as 'Messages-1_06'
@
text
@/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*****************************************************************************
* $Id: LocaleChk,v 1.2 2000/10/23 12:55:35 rthornbu Exp $
* $Name:  $
*
* Author: Rob Thornburrow
* Project: Bethany (333)
*
* ----------------------------------------------------------------------------
* Copyright [2000] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold, or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: This file will parse the environment variable LocaleList and
*          create an assembler source file containing the country codes
*          of the supported locales.
*
*          This must be run before the Messages module is built as the
*          Messages module includes the generated file.
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
/* Include Standard headers */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <assert.h>
#include <ctype.h>

/* Include RISC OS headers */
#include "kernel.h"
#include "swis.h"
#include "os.h"
#include "Global/FileTypes.h"
#include "Global/Services.h"

/* Include other headers */
#include "debuglib/debuglib.h"

/* Forward prototypes */
int return_country_number(const char* const country);

/*****************************************************************************
* MACROS
*****************************************************************************/
#define ENV_LOCALE_LIST "LocaleList"  /* name of env var holding the comma-seperated list of locales */

/*****************************************************************************
* File scope global variables
*****************************************************************************/

FILE *asmfile = NULL;

/*****************************************************************************
* Function prototypes - Private to this file
*****************************************************************************/
char *strdup(const char *str);
char *read_env(char *variable);
bool parse_territories(char *territory_line);
void create_locale_list(void);
bool write_locale_list(void);

/*****************************************************************************
* FUNCTIONS
*****************************************************************************/


char *strdup(const char *str)
{
  char *newstr = malloc(str == NULL ? 1 : (strlen(str) + 1));

  if (newstr != NULL) {
    if (str == NULL)
      *newstr = 0;
    else
      strcpy(newstr, str);
  }
  return (newstr);
}

char *read_env(char *variable)
{
  char *var = NULL;
  char *cp = NULL;

  if ((var = getenv(variable)) != NULL)
    cp = strdup(var);

  return (cp);
}


bool parse_territories(char *territory_line)
{
  char *territory = NULL;

  if (strlen(territory_line) < 1)
  {
    /* Line must contain something */
    return (false);
  }

  territory = strtok(territory_line, ",");
  while (territory)
  {
    fprintf(asmfile, "\tDCB\t&%x\n", return_country_number(territory));
    territory = strtok(NULL, ",");
  }
  return (true);
}


void create_locale_list(void)
{
  char *locale_list = NULL;

  if ((locale_list = read_env(ENV_LOCALE_LIST)) != NULL)
  {
    if (!parse_territories(locale_list))
    {
      /* Some error occurred whilst parsing the locale list */
      printf("Malformed Locale list detected.");
      exit(EXIT_FAILURE);
    }
    free(locale_list);
    locale_list = NULL;
  }
}


bool write_locale_list(void)
{
  if ((asmfile = fopen("s.LocaleList", "w")) != NULL)
  {
    fprintf(asmfile, "; > s.LocaleList\n;\n");
    fprintf(asmfile, "; THIS FILE IS AUTOMATICALLY GENERATED BY THE BUILD PROCESS - DO NOT MODIFY!\n");
    fprintf(asmfile, "; If you do need to make a modification, do it to the LocaleChk source file\n");
    fprintf(asmfile, "; otherwise any changes will be lost during the next build.\n\n");
    fprintf(asmfile, "TerritoryList\n");

    create_locale_list();
    fprintf(asmfile, "\tDCB\t&FF\t\t; list terminator\n");
    fprintf(asmfile, "\tALIGN\n\n");
    fprintf(asmfile, "\tEND\n");
    fclose(asmfile);
    return (true);
  }
  else
  {
    printf("Failed to create ^.s.LocaleList\n");
    exit(EXIT_FAILURE);
  }
  return (false);
}

/*****************************************************************************
* return_country_number
*
* This routine returns the country code number of a passed in country.
*
* Assumptions
*  That the version of the International module has knowledge about the
*   country that is being requested.
*
* Inputs
*  country     : A string containing the name of the territory to be
*                 converted.
*
* Outputs
*  None
*
* Returns
*  This routine returns the numeric form of the territory name passed in, or
*   -1 if it is not a valid country. Note that build machines that wish
*   to use utilities that inclue this routine should ensure that they have
*   the latest version of the International module so that they can ensure
*   they are aware of all the latest Name->number mappings.
*
*****************************************************************************/
int return_country_number(const char* const country)
{
  _kernel_swi_regs reg;
  int return_value = 0;

  reg.r[1] = Service_International;
  reg.r[2] = 0;              /* sub-reason code 0 */
  reg.r[3] = (int)country;   /* The country we require (NULL terminated) */
  reg.r[4] = 0;
  _kernel_swi(OS_ServiceCall, &reg, &reg);

  if (reg.r[1] != 0)
    return_value = -1; /* Unrecognised country */
  else
    return_value = reg.r[4];

  return (return_value);
}


int main(int argc, char *argv)
{
  if (!write_locale_list())
  {
    printf("Failed to write ^.s.LocaleList\n");
    exit(EXIT_FAILURE);
  }
  return 0;
}


/*****************************************************************************
* END OF FILE
*****************************************************************************/
@


1.2
log
@  Slight optimisation and internationalisation bug fix.
Detail:
  s.Common
    The loop where it checks to see whether the territory exists and selects
    a default one if not has been optimised a bit.
  Utils.c.LocaleChk
    Changed Territory_NameToNumber to use OS_ServiceCall to prevent problems
    with some territory names not being known (namely Austraila in this case).

Version 1.01. Tagged as 'Messages-1_01'
@
text
@d16 2
a17 2
* $Id: LocaleChk,v 1.1 2000/10/17 08:21:37 rthornbu Exp $
* $Name: Messages-1_00 $
d65 3
@


1.2.2.1
log
@  Checkpoint check-in.
Detail:
  These are the initial portable versions of all these utilities.
  Most have not been tested and the rest have received cursory testing.
  They do all compile for me though.
Admin:
  Not for use - checked-in to provide a baseline only.
  Some notes on portability changes added too.


Version 1.05, 4.25.2.1. Tagged as 'Messages-1_05-4_25_2_1'
@
text
@d16 2
a17 2
* $Id: LocaleChk,v 1.2 2000/10/23 12:55:35 rthornbu Exp $
* $Name:  $
d23 1
a23 1
* Copyright [2001] Pace Micro Technology PLC.  All rights reserved.
d53 1
d56 29
a84 1
#include "shared.h"
d90 15
a104 1
static void write_territory_number(const char *name, unsigned long terr_num, void *fileh)
d106 7
a112 1
  (void) fprintf(fileh, "\tDCB\t&%02lx\t\t; %s\n", terr_num, name);
d115 2
a116 1
static bool write_locale_list(const char *filename)
d118 1
a118 1
  FILE *asmfile;
d120 4
a123 2
  if ((asmfile = fopen(filename, "w")) == NULL) {
    report(EXIT_FAILURE, err_SERIOUS_ERROR, "Failed to create output file %s\n", filename);
d126 8
a133 1
  fprintf(asmfile, "; > %s\n", filename);
a134 9
  fputs(
    ";\n"
    "; THIS FILE IS AUTOMATICALLY GENERATED BY THE BUILD PROCESS - DO NOT MODIFY!\n"
    ";\n"
    "; If you do need to make a modification, do it to the LocaleChk source file\n"
    "; otherwise any changes will be lost during the next build.\n"
    "\n"
    "TerritoryList\n",
    asmfile);
d136 14
a149 2
  if (!parse_territories(NULL, write_territory_number, asmfile)) {
    report(EXIT_FAILURE, err_SERIOUS_ERROR, "Unable to parse territory list");
d151 1
a152 5
  fputs(
    "\tDCB\t&FF\t\t; list terminator\n"
    "\tALIGN\n\n"
    "\tEND\n",
    asmfile);
d154 21
a174 2
  if (fclose(asmfile)) {
    report(EXIT_FAILURE, err_SERIOUS_ERROR, "Failed to write output file %s\n", filename);
d176 1
a176 2

  return (true);
d179 25
a203 1
int main(int argc, char *argv[])
d205 2
a206 1
  const char *filename;
d208 10
a217 2
  shared_init(argc, argv);
  filename = argc > 1 ? argv[1] : "s.LocaleList";
d219 7
a225 1
  if (!write_locale_list(filename))
@


1.1
log
@  If the configured territory does not exist, the resources from an already
  defined default territory are taken.
Detail:
  Needed for Bethany as the UK territory is not hard-coded in the kernel as
  one set of ROMs does not contain UK.  If an unknown territory (say 99 for
  example) was selected, the unit would data abort on start up as it could
  not find the correct resources.
  At build time, the application 'LocaleChk' is run that defines a locale
  table which is built into the Messages module.
Admin:
  The new Messages module has been tested in both the Bethany builds (one with
  and one without UK) and the correct behaviour is seen.

Version 0.99. Tagged as 'Messages-0_99'
@
text
@d16 2
a17 2
* $Id: $
* $Name: $
a118 2
  int territory_number;
  _kernel_oserror *err;
d129 1
a129 2
    err = _swix(Territory_NameToNumber, _IN(0)|_IN(1)|_OUT(0), 1, territory, &territory_number);
    fprintf(asmfile, "\tDCB\t&%x\n", territory_number);
d177 43
@

