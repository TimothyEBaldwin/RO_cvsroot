head	4.4;
access;
symbols
	Messages-1_12:4.4
	Messages-1_11:4.4
	Messages-1_10:4.4
	Messages-1_09:4.3
	Messages-1_08:4.2
	Messages-1_07:4.2
	RO_5_07:4.2
	Messages-1_06:4.2
	Messages-1_05-4_25_2_3:4.2.2.2
	Messages-1_05-4_25_2_2:4.2.2.2
	Messages-1_05-4_25_2_1:4.2.2.1
	sbrodie_dev:4.2.0.2
	sbrodie_dev_bp:4.2
	Messages-1_05:4.2
	Messages-1_04:4.2
	Messages-1_03:4.2
	Messages-1_02:4.2
	Messages-1_01:4.2
	Messages-1_00:4.2
	Messages-0_99:4.2
	dellis_autobuild_BaseSW:4.2
	Messages-0_98:4.2
	Messages-0_97:4.2
	Messages-0_96:4.2
	Messages-0_95:4.2
	Messages-0_94:4.2
	dcotton_Messages_13062000:4.2
	dcotton_Messages_10062000:4.2
	Messages-0_93:4.1
	Messages-0_92:4.1
	Messages-0_91:4.1
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.2
	Messages-0_90:4.1
	Ursula_merge:4.1
	nturton_Messages-0_84:4.1
	Messages-0_89:4.1
	Messages-0_88:4.1
	Messages-0_87:4.1
	Messages-0_86:4.1
	Messages-0_85:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_Messages-0_79:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_Messages-0_85:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_Funai01-33:4.1.7.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2012.03.20.22.57.48;	author jlee;	state Exp;
branches;
next	4.3;
commitid	CT7w8kTYN5b70GXv;

4.3
date	2012.03.20.21.30.30;	author jlee;	state Exp;
branches;
next	4.2;
commitid	DNlk1u7X2Ic8wFXv;

4.2
date	2000.06.10.10.31.04;	author dcotton;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.40.08;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.2.2.1
date	2001.06.27.15.43.50;	author sbrodie;	state Exp;
branches;
next	4.2.2.2;

4.2.2.2
date	2001.06.28.13.28.33;	author sbrodie;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.40.08;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.01.53.50;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.45.09;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.20.59.59;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Revert MsgTok2 assert change
Detail:
  Utils/c/MsgTok2 - MessageTrans won't find messages which don't end in a newline, so revert the assert to its previous state and output an error message whenever we encounter a file which doesn't end in a newline
  Utils/MsgTok2,ff8 - Rebuilt
Admin:
  Tested in OMAP3 ROM build


Version 1.10. Tagged as 'Messages-1_10'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#include "swis.h"

int getword(char *b, int i, int size, char *r)
{
     int j;

     while (i < size && isspace(b[i])) i++;
     j = 0;
     while (i < size && (isalnum(b[i]) || b[i] == '/' || b[i] == '@@' || b[i] == '$' || b[i] == '_' || b[i] == '?' || b[i] == '-' || b[i] == '.' || b[i] =='<' || b[i] == '>')) r[j++] = b[i++];
     r[j] = 0;
     return i;
}

int no_of_tokens;
char *tokens[256];
int token_len[256];
int token_n[256];

static void sorttokens(int n)
{
    int  h, i, j;
    int v;
    char *v_tokens;
    int v_token_n;

    h = 1;
    do
        h = h * 3 + 1;
    while (h <= n);
    do {
        h = h / 3;
        for (i = h + 1; i <= n; i++) {
            v = token_len[i];
            v_tokens = tokens[i];
            v_token_n = token_n[i];
            j = i;
            while (j > h && token_len[j-h] < v) {
                tokens[j] = tokens[j-h];
                token_len[j] = token_len[j-h];
                token_n[j] = token_n[j-h];
                j -= h;
            }
            tokens[j] = v_tokens;
            token_n[j] = v_token_n;
            token_len[j] = v;
        }
    } while (h > 1);
}

void readtokens(char *token_file)
{
    int rc;
    char *buffer;
    int size;
    int esc, linestart;
    int tn;
    int i;

    rc = _swi(OS_File, _IN(0)|_IN(1)|_OUT(4), 17, token_file, &size);
    if (rc != 1) {
        fprintf(stderr, "File %s not found\n", token_file);
        exit(1);
    }
    buffer = malloc(size);
    if (!buffer) {
        fprintf(stderr, "Out of memory\n");
        exit(1);
    }
    _swi(OS_File, _IN(0)|_IN(1)|_IN(2)|_IN(3), 16, token_file, buffer, 0);
    linestart = 1;
    tn = 0;
    esc = 0;
    /* Token 0 is always 0. */
    token_n[0] = 0;
    for (i = 0; i < size; i++) {
        if (linestart) {
            tokens[++tn] = buffer + i;
            token_n[tn] = tn;
            linestart = 0;
        }
        if (esc) {
            esc = 0;
        } else {
            if (buffer[i] == 27)
                esc = 1;
            if (buffer[i] == '\n') {
                linestart = 1;
                token_len[tn] = (buffer + i) - tokens[tn];
            }
        }
    }
    if (!linestart) token_len[tn] = (buffer + i) - tokens[tn];
    no_of_tokens = tn;
    sorttokens(no_of_tokens);
/*
    for (i = 1; i <= no_of_tokens; i++) {
        int l, j;
        char *s;

        l = token_len[i];
        printf("Token %03d, len = %03d:", token_n[i], l);
        s = tokens[i];
        for (j = 0; j < l; j++)
            putchar(s[j]);
        putchar('\n');
    }
*/
}

int main(int argc, char **argv)
{
    int rc, size, orig_size;
    char ket[256];
    char *msg_buff;
    int msgi, found, l;
    char *tagb;
    int tagi;
    int msg_size;
    char message_file[256];
    int l1, l2, ii, tn;
    char *s;
    int desti, n;

    if (argc != 3) {
        fprintf(stderr, "Usage: MsgTok <token> <tags>\n");
        exit(1);
    }
    readtokens(argv[1]);
    rc = _swi(OS_File, _IN(0)|_IN(1)|_OUT(4), 17, argv[2], &size);
    if (rc != 1) {
        fprintf(stderr, "File %s not found\n", argv[2]);
        exit(1);
    }
    tagb = malloc(size);
    if (!tagb) {
        fprintf(stderr, "Out of memory\n");
        exit(1);
    }
    rc = _swi(OS_File, _IN(0)|_IN(1)|_IN(2)|_IN(3), 16, argv[2], tagb, 0);
    if (rc!=1)
    {
        fprintf(stderr, "File %s not found\n", argv[2]);
        exit(1);
    }
    tagi = 0;
    /* Token 0 is always copied into string array 'ket'. */
    tokens[0] = ket;
    while (1) {
        tagi = getword(tagb, tagi, size, message_file);
        if (tagi >= size) break;
        if (tagb[tagi++] != ':') {
            fprintf(stderr, "Missing ':' for %s\n", message_file);
            exit(1);
        }
        if (tagi >= size) break;
        rc = _swi(OS_File, _IN(0)|_IN(1)|_OUT(4), 17, message_file, &orig_size);        msg_size = orig_size;
        if (rc != 1) {
            fprintf(stderr, "File %s not found\n", message_file);
            exit(1);
        }
        msg_buff = malloc(msg_size);
        if (!msg_buff) {
            fprintf(stderr, "Out of memory\n");
            exit(1);
        }
        _swi(OS_File, _IN(0)|_IN(1)|_IN(2)|_IN(3), 16, message_file, msg_buff, 0);
        if(msg_size && (msg_buff[msg_size-1] != '\n')) {
            /* We could fix this automatically, but it's better to remind people so that they don't make the same mistake in any untokenised files */
            fprintf(stderr,"Bad messages file '%s': File must end in a newline\n", message_file);
            exit(1);
        }
        printf("Tokenising %s\n", message_file);
        while (1) {
            tagi = getword(tagb, tagi, size, ket);
            if (tagi >= size) break;
            msgi = 0;
            desti = 0;
            /*printf("Tag: %s\n", ket);*/
            l = strlen(ket);
            found = 0;
            while (1) {
                if (msg_buff[msgi] != '#') {
                    if (strncmp(&msg_buff[msgi], ket, l) == 0 && msg_buff[msgi + l] == ':') {
                        found = 1;
                        memmove(msg_buff + desti, msg_buff + msgi, l + 1);
                        msgi = msgi + l + 1;
                        desti = desti + l + 1;
                        n = msgi;
                        while (n < msg_size && msg_buff[n] != '\n') {
                            if (msg_buff[n] == 27) {
                                ++n;
                                continue;
                            }
                            if (msg_buff[n] == '%' && msg_buff[n + 1] != '\n') {
                                n += 2;
                                continue;
                            }
                            n++;
                        }
                        l1 = n - msgi;
                        memmove(msg_buff + desti, msg_buff + msgi, l1);
                        msgi += l1;
                        assert(msg_buff[msgi] == '\n');
                        s = msg_buff + desti;
                        /* Handle substitution of token 0 too. */
                        if (tagb[tagi] == ':') {
                            tagi = getword(tagb, tagi+1, size, ket);
                            token_len[0] = strlen(ket);
                            tn = 0;
                        } else {
                            tn = 1;
                        }
                        for (; tn <= no_of_tokens; tn++) {
                            l2 = token_len[tn];
                            for (ii = 0; ii <= l1 - l2; ii++) {
                                if (memcmp(s + ii, tokens[tn], l2) == 0) {
                                    s[ii] = 27;
                                    s[ii+1] = token_n[tn];
                                    memmove(s + ii + 2, s + ii + l2, l1 - (ii + l2));
                                    l1 -= (l2 - 2);
                                }
                                if (s[ii] == 27) ii++;
                            }
                        }
                        desti += l1;
                    }
                    while (msgi < msg_size && (msg_buff[desti++] = msg_buff[msgi++]) != '\n');
                } else {
                    for (ii = msgi+1; ii < msg_size && msg_buff[ii++] != '\n'; ) ;
                    if ( ii < msg_size ) {
                        memmove(msg_buff + msgi, msg_buff + ii, msg_size - ii + 1);
                        msg_size -= ii - msgi;
                    }
                }
                if (msgi >= msg_size) break;
            }
            msg_size = desti;
            if (!found) {
                fprintf(stderr, "Warning: Tag %s not found\n", ket);
            }
            if (tagb[tagi++] != ',') break;
        }
        _swi(OS_File, _IN(0)|_IN(1)|_IN(2)|_IN(4)|_IN(5), 10, message_file, 0xfff, msg_buff, msg_buff + msg_size);
        printf("Original size = %d, size now = %d\n", orig_size, msg_size);
        free(msg_buff);
    }
}
@


4.3
log
@Fix spurious assert in MsgTok2. Tidy other utils a bit and rebuild all binaries.
Detail:
  Utils/c/MskTok2 - Fix spurious assert when tokenising a message that runs up to end of buffer and isn't newline terminated
  Utils/Makefile - Tweaked to use CApp makefile fragment
  Utils/MkClean,fd7, Utils/MkCVSClean,fd7 - New scripts for cleaning everything, or for cleaning just the bits we don't want in CVS
  Utils/o - Removed folder, shouldn't be in CVS
  Utils/c/Old - Removed folder, we rely on CVS to store old versions of files
  Utils/c/MsgExt, Utils/c/ScanRes, Utils/c/TokGen, Utils/c/TokGen2 - Fixed dangerous-sounding warnings (potential use of uninitialised variables, wrong fscanf arg type for "%s")
  Utils/*,ff8 - Rebuilt all binaries with Norcroft 5.69
Admin:
  Tested with building/running Iyonix & OMAP3 ROMs


Version 1.09. Tagged as 'Messages-1_09'
@
text
@d187 5
d223 1
a223 1
                        assert((msgi == msg_size) || (msg_buff[msgi] == '\n'));
@


4.2
log
@	Many changes. Warning, Danger! Danger!
	This version of the module deals with multiple territory blocks being
held in ResourceFS.

Detail:
	* Fixed a bug in TokGen2. MAX_TOKEN_LEN2 was set to 256, when it
actually should be 254 (to allow for 2 byte to hold length and status). This
was causing an overflow which meant that large messages were not being
correctly tokenised. Also added a check for tokens that are too long, to at
least make sure that the buildmaster is informed that something has gone
screwy with the token generation instead of continuing on regardless.
	* Created a simple Perl script, HelpApend, that appends common help
data onto the end of each of the individual territory blocks.
	* Bug fixed in s.Common: Pointer in list was not being advanced.
	* ScanRes altered to allow nested resorce blocks.
	* Bug fixed in ResCommon - the -simulate flag now works in the
correct manner, and not the inverse (ooops!)
	* MsgTok2 now gives a warning if the input file is not present.
	* The main MakeFile has been altered to go through the extra stages
needed by the multiple-resource system.
	* Added the ResCommon binary.

To be done:
	* Make ScanRes use Service_Territory 0 instead of
Territory_NameToNumber to work out territory number to name mappings.
	* Make ResCommon cope with Squash files.
	* Make ResCommon remove all empty directories from the resource
directories.
	* Tidy up the code.
	* Add documentation.
	* Thoroughly test on different builds.

Admin:
	Must be used with srcbuild 20 or later.
	Important notice: From this version onwards, the TerritoryManager
*must* be placed ahead of Messages in the ROM, but after ResourceFS.
	This module has not yet been tested without the LocaleList system
variable being set.
	Work in progress. Do not use for anything release-critical.

Version 0.93. Not tagged
@
text
@d218 1
a218 1
                        assert(msg_buff[msgi] == '\n');
@


4.2.2.1
log
@  Checkpoint check-in.
Detail:
  These are the initial portable versions of all these utilities.
  Most have not been tested and the rest have received cursory testing.
  They do all compile for me though.
Admin:
  Not for use - checked-in to provide a baseline only.
  Some notes on portability changes added too.


Version 1.05, 4.25.2.1. Tagged as 'Messages-1_05-4_25_2_1'
@
text
@a0 21
/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* MsgTok
 *
 * Copyright (C) Pace Micro Technology plc.
 *
 */

/* Standard C headers */
d21 1
a21 3
/* CLX */
#include "wholefls.h"

a69 36
static int get_file_length(char *filename)
{
  int i = (int) wf_filesize(filename);

  if (i == -1) {
    fprintf(stderr, "File '%s' not found\n", filename);
    exit(EXIT_FAILURE);
  }
  return i;
}

static void *load_file(char *filename, int *size)
{
  void *data;
  *size = get_file_length(filename);
  data = malloc(*size);
  if (data == NULL) {
    fprintf(stderr, "Unable to load file '%s' - out of memory\n", filename);
    exit(EXIT_FAILURE);
  }
  if (wf_load(filename, data, *size) == -1) {
    fprintf(stderr, "Unable to read file '%s'\n", filename);
    exit(EXIT_FAILURE);
  }
  return data;
}

static void save_file(char *filename, char *base, int size)
{
  if (wf_save(filename, base, size) == -1) {
    fprintf(stderr, "Unable to save file '%s'\n", filename);
    exit(EXIT_FAILURE);
  }
}


d72 1
d79 11
a89 1
    buffer = load_file(token_file, &size);
d132 1
a132 1
    int size, orig_size;
d145 1
a145 1
        fprintf(stderr, "Usage: MsgTok2 <token> <tags>\n");
d149 16
a164 1
    tagb = load_file(argv[2], &size);
d176 11
a186 2
        msg_buff = load_file(message_file, &orig_size);
        msg_size = orig_size;
d258 1
a258 1
        save_file(message_file, msg_buff, msg_size);
@


4.2.2.2
log
@  Several utilities modified to return 0 from main() explicitly.
  Couple of NULL pointer bugs fixed.
Detail:
  UNIX builds stopped with "errors" because of the random numbers being
    treated as process return values.
  ResCommon and MsgExt both contained NULL pointer dereferences - these
    have been fixed (they cause seg faults on UNIX; RISC OS builds are
    just lucky to get away with it)
Admin:
  Run over a test resources directory and the output data file was built
    successfully.  It still remains to be seen whether the output file is
    sensible and matches that produced by a RISC OS build.


Version 1.05, 4.25.2.2. Tagged as 'Messages-1_05-4_25_2_2'
@
text
@a271 2

    return 0;
@


4.1
log
@Initial revision
@
text
@d29 1
a29 1
     while (i < size && (isalnum(b[i]) || b[i] == '/' || b[i] == '@@' || b[i] == '$' || b[i] == '_' || b[i] == '?' || b[i] == '-' || b[i] == '.')) r[j++] = b[i++];
d159 6
a164 1
    _swi(OS_File, _IN(0)|_IN(1)|_IN(2)|_IN(3), 16, argv[2], tagb, 0);
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
