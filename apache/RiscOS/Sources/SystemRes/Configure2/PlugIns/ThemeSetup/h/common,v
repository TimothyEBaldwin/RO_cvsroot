head	1.1;
access;
symbols
	ThemeSetup-0_05:1.1
	ThemeSetup-0_04:1.1
	ThemeSetup-0_03:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.08.03.08.12.55;	author rsprowson;	state Exp;
branches;
next	;
commitid	YVccpQuHBTe20ZZw;


desc
@@


1.1
log
@Import of theme setup plugin
The theme setup plugin ties together visual aspects of the desktop (behavioural ones are in the window setup plugin).
Absorbed options
 * desktop font (was previously in font manager setup)
 * protect built in icons (was previously in window setup)
 * 3D window outlines (was missing)
 * textured menus (was missing)
and also includes a picker for the current desktop theme. This requires a reasonably recent boot sequence which includes the theme loader (!ThemeDefs) and either a recent Wimp, or softloaded Wimp for pre-RISC OS 5 machines.

Version 0.03. Tagged as 'ThemeSetup-0_03'
@
text
@/* Copyright 2013 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*---------------------------------------------------------------------------*/
/* File:    common.h                                                         */
/*---------------------------------------------------------------------------*/

void error_trap(_kernel_oserror *err, int err_type);
void messages_register(MessagesFD *messagefd_point, char *messagebuff_point);
void enable_gadget(int objectid, int gadgetid, BOOL enable);
char *messages_lookup(const char *token_string);
char *messages_lookup_with_parameter(char *token_string, char *parameter);
_kernel_oserror *common_read_screensize(int *x, int *y);
_kernel_oserror *common_error(char *s);
int strncmpa(char *str1, char *str2, int size);
char *strncpya(char *s1, const char *s2, int n);
int read_cmos_value(int location);
void write_cmos_value(int location, int value);
@
