head	1.4;
access;
symbols
	SndSetup-2_08:1.4
	SndSetup-2_07:1.3
	SndSetup-2_06:1.2
	SndSetup-2_05:1.2
	SndSetup-2_04:1.2
	SndSetup-2_03:1.2
	SndSetup-2_02:1.2
	SndSetup-2_01:1.2
	SndSetup-2_00:1.2
	SndSetup-1_00:1.2
	SndSetup-0_06:1.1.1.1
	SndSetup-0_05:1.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.1
	Ursula_RiscPC:1.1.1.1.0.2
	rleggett_SndSetup-0_04b:1.1.1.1
	rthornb_UrsulaBuild-19Aug1998:1.1.1.1
	UrsulaBuild_FinalSoftload:1.1.1.1
	rthornb_UrsulaBuild-29Jul1998:1.1.1.1
	rthornb_UrsulaBuild-22Jul1998:1.1.1.1
	rthornb_UrsulaBuild-15Jul1998:1.1.1.1
	rthornb_UrsulaBuild-07Jul1998:1.1.1.1
	rthornb_UrsulaBuild-17Jun1998:1.1.1.1
	rleggett_SndSetup-0_03:1.1.1.1
	rthornb_UrsulaBuild-03Jun1998:1.1.1.1
	rthornb_UrsulaBuild-27May1998:1.1.1.1
	rthornb_UrsulaBuild-21May1998:1.1.1.1
	rthornb_UrsulaBuild_01May1998:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2016.06.08.22.00.55;	author jlee;	state Exp;
branches;
next	1.3;
commitid	OjqsgzPB8RRw9I9z;

1.3
date	2013.07.20.14.39.44;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	siN8EGpUAUgHAdYw;

1.2
date	2003.02.28.16.15.27;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	98.04.14.10.41.55;	author rleggett;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.04.14.10.41.55;	author rleggett;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Allow configuration of default audio controller device
Detail:
  If SndSetup detects that a version of SoundDMA is in use which supports controller enumeration & selection, the plugin display will have an extra string set gadget which can be used to select which device should be used
  When switching between devices the list of mixer controllers will update accordingly
  The controller selection will be saved to the SndSetup choices file, along with the mixer settings - with mixer settings being saved for all mxiers that are present, not just the selected one.
  File changes:
  - Resources/UK/Res,fae, h/defines - Updated to add the new string set and tweak the layout a bit
  - h/sound, c/sound - Added linked list of controller devices. Mixer channel detail arrays are now allocated on demand and stored as part of the controller details. Channel details now also tracks the currently selected mute & gain settings, since we can no longer rely on the UI to store those values for us if we're recreating gadgets when switching device.
  - c/main - Mixer volume slider setup separated out into its own function, so it can be repeated whenever we switch device.
  - h/common - Forward-declare of new function
Admin:
  Tested on Raspberry Pi, iMx6, Iyonix, RiscPC
  Requires Sound0HAL-1_84 / Sound0Trid-1_69 / Sound0-1_72


Version 2.08. Tagged as 'SndSetup-2_08'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*---------------------------------------------------------------------------*/
/* File:    common.h                                                         */
/*---------------------------------------------------------------------------*/

#define NewLine 0x0A
#define Wimp_MOpenConfigWindow 0x50d83

void error_trap(_kernel_oserror *err, int err_type);
void messages_register(MessagesFD *messagefd_point, char *messagebuff_point);
char *messages_lookup(char *token_string);
const char* messages_lookup_withparam(const char *token_string, const char* parameter);
_kernel_oserror *common_read_screensize(int* x, int* y);
_kernel_oserror* common_error(char *s);
void grey_gadget(int objectid, int gadgetid);
void ungrey_gadget(int objectid, int gadgetid);
int strncmpa(char* str1, char* str2, int size);
int read_cmos_value(int location);
void write_cmos_value(int location, int value);
void setup_sliders(void);

extern char TaskName[];
@


1.3
log
@Move beep on error option into Sound Setup
Part of simplification of the window setup plugin.
Also, to avoid having to maintain two similar plugins, the differences from the former VIDC oriented Sound Setup are integrated
* If SoundControl module is running behave as before
* If no SoundControl but there is a VIDC, adapt to add
  + 16b/8b hardware option
  + oversampling option
  + don't permit muting of the (one and only) mixing channel
  + the mixing channel governs the *VOLUME and corresponding CMOS bits
* Updated common functions from other plugins
* Use definitions from HighFSI, OsBytes, CMOS in place of local ones

Tested on a Risc PC (ie. VIDC style) and Beagleboard xM (ie. mixer style).

Version 2.07. Tagged as 'SndSetup-2_07'
@
text
@d33 1
@


1.2
log
@Given a major overhaul to work with the HAL version of the SoundControl
module. Slider list is now dynamically generated to reflect hardware
capabilities. Configuration of beep voice and volume is now consistent with
the rest of !Configure (ie doesn't happen until you click 'Set').

Version 1.00. Tagged as 'SndSetup-1_00'
@
text
@d16 1
a16 1
/* File:    h.common                                                         */
a18 4
#include "wimplib.h"

#include "defines.h"

d22 1
a22 9

typedef struct
{
    char type;
    int value;
} evexp;


inline void error_trap(_kernel_oserror *err, int err_type);
a34 23


/*---------------------------------------------------------------------------*
 * error_trap                                                                *
 *                                                                           *
 * Wrap around a function to report an error if one occurred eg.:            *
 *  error_trap(event_initialise(&idb), 0);                                   *
 *                                                                           *
 * In: err - a kernel_oserror block                                          *
 *     type - 0 means non-fatal, otherwise program will exit after reporting *
 *---------------------------------------------------------------------------*/

inline void error_trap(_kernel_oserror *err, int err_type)
{
    /* Report the appropriate error, has one occured */
    if (err != NULL)
    {
        wimp_report_error(err, 0, TaskName, 0, 0, 0);
  
        /* Now, if it was a fatal error (type != 0), exit at once */
        if (err_type != 0) exit(0);
    }
}
@


1.1
log
@Initial revision
@
text
@d19 4
d34 1
a34 1
void error_trap(_kernel_oserror *err, int err_type);
d37 1
d45 25
@


1.1.1.1
log
@Initial import of SndSetup plugin for Configure.
@
text
@@
