head	1.3;
access;
symbols
	SndSetup-2_08:1.3
	SndSetup-2_07:1.3
	SndSetup-2_06:1.2
	SndSetup-2_05:1.2
	SndSetup-2_04:1.2
	SndSetup-2_03:1.2
	SndSetup-2_02:1.2
	SndSetup-2_01:1.2
	SndSetup-2_00:1.2
	SndSetup-1_00:1.2
	SndSetup-0_06:1.1.1.1
	SndSetup-0_05:1.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.1
	Ursula_RiscPC:1.1.1.1.0.2
	rleggett_SndSetup-0_04b:1.1.1.1
	rthornb_UrsulaBuild-19Aug1998:1.1.1.1
	UrsulaBuild_FinalSoftload:1.1.1.1
	rthornb_UrsulaBuild-29Jul1998:1.1.1.1
	rthornb_UrsulaBuild-22Jul1998:1.1.1.1
	rthornb_UrsulaBuild-15Jul1998:1.1.1.1
	rthornb_UrsulaBuild-07Jul1998:1.1.1.1
	rthornb_UrsulaBuild-17Jun1998:1.1.1.1
	rleggett_SndSetup-0_03:1.1.1.1
	rthornb_UrsulaBuild-03Jun1998:1.1.1.1
	rthornb_UrsulaBuild-27May1998:1.1.1.1
	rthornb_UrsulaBuild-21May1998:1.1.1.1
	rthornb_UrsulaBuild_01May1998:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2013.07.20.14.39.42;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	siN8EGpUAUgHAdYw;

1.2
date	2003.02.28.16.15.27;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	98.04.14.10.41.55;	author rleggett;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.04.14.10.41.55;	author rleggett;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Move beep on error option into Sound Setup
Part of simplification of the window setup plugin.
Also, to avoid having to maintain two similar plugins, the differences from the former VIDC oriented Sound Setup are integrated
* If SoundControl module is running behave as before
* If no SoundControl but there is a VIDC, adapt to add
  + 16b/8b hardware option
  + oversampling option
  + don't permit muting of the (one and only) mixing channel
  + the mixing channel governs the *VOLUME and corresponding CMOS bits
* Updated common functions from other plugins
* Use definitions from HighFSI, OsBytes, CMOS in place of local ones

Tested on a Risc PC (ie. VIDC style) and Beagleboard xM (ie. mixer style).

Version 2.07. Tagged as 'SndSetup-2_07'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*---------------------------------------------------------------------------*/
/* File:    common.c                                                         */
/* Purpose: Commonly used Wimp routines                                      */
/* Author:  Richard Leggett                                                  */
/* History: 28-Oct-97: RML: Begun (some routines nicked from PhotoQV)        */
/*                                                                           */
/* Copyright © 1997 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdlib.h>
#include <string.h>
#include "Global/OsBytes.h"
#include "kernel.h"
#include "wimp.h"
#include "wimplib.h"
#include "toolbox.h"
#include "gadgets.h"
#include "swis.h"
#include "common.h"
#include "defines.h"

char TaskName[30] = "?";

/* Global messages file descriptor and string pointer */
static MessagesFD *message_block;
static char       *message_buffer;


/*---------------------------------------------------------------------------*
 * error_trap                                                                *
 *                                                                           *
 * Wrap around a function to report an error if one occurred eg.:            *
 *  error_trap(event_initialise(&idb), 0);                                   *
 *                                                                           *
 * In: err - a kernel_oserror block                                          *
 *     type - 0 means non-fatal, otherwise program will exit after reporting *
 *---------------------------------------------------------------------------*/

void error_trap(_kernel_oserror *err, int err_type)
{
    /* Report the appropriate error, has one occured */
    if (err != NULL)
    {
        wimp_report_error(err, 0, TaskName, 0, 0, 0);
  
        /* Now, if it was a fatal error (type != 0), exit at once */
        if (err_type != 0) exit(0);
    }
}


/*---------------------------------------------------------------------------*
 * messages_register                                                         *
 *                                                                           *
 * Registers the message file descriptor with the library so that it knows   *
 * where to find the message block for lookups.                              *
 *                                                                           *
 * In:                                                                       *
 *---------------------------------------------------------------------------*/

void messages_register(MessagesFD *messagefd_point, char *messagebuff_point)
{
  message_block = messagefd_point;
  message_buffer = messagebuff_point;
  char *taskname = messages_lookup("_TaskName");
  strncpy(TaskName, taskname, sizeof TaskName - 1);
  TaskName[sizeof TaskName - 1] = '\0';
}


/*---------------------------------------------------------------------------*
 * messages_lookup                                                           *
 *                                                                           *
 * Searches the 'messages' file for the text represented by the token string *
 * and returns a pointer to a buffer storing this text                       *
 *                                                                           *
 * In:                                                                       *
 *---------------------------------------------------------------------------*/

char* messages_lookup(char *token_string)
{
  _kernel_swi_regs regs;

  regs.r[0] = (int)message_block;
  regs.r[1] = (int)token_string;
  regs.r[2] = (int)message_buffer;
  regs.r[3] = 255;
  _kernel_swi(MessageTrans_Lookup, &regs, &regs);
  return message_buffer;
}


/*---------------------------------------------------------------------------*
 * messages_lookup_withparam                                                 *
 *                                                                           *
 * Searches the 'messages' file for the text represented by the token string *
 * and returns a pointer to a buffer storing this text                       *
 *                                                                           *
 * In:                                                                       *
 *---------------------------------------------------------------------------*/

const char* messages_lookup_withparam(const char *token_string, const char* parameter)
{
  _kernel_swi_regs regs;

  regs.r[0] = (int)message_block;
  regs.r[1] = (int)token_string;
  regs.r[2] = (int)message_buffer;
  regs.r[3] = 255;
  regs.r[4] = (int)parameter;
  _kernel_swi(MessageTrans_Lookup, &regs, &regs);
  return message_buffer;
}


/*---------------------------------------------------------------------------*
 * common_read_screensize                                                    *
 *                                                                           *
 * Return the size of the screen in OS units                                 *
 *---------------------------------------------------------------------------*/

_kernel_oserror *common_read_screensize(int *x, int *y)
{
    _kernel_oserror *e;
    int              xeig, yeig, xpix, ypix;

    e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &xeig); if (e) return e;
    e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &yeig); if (e) return e;
    e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 11, &xpix); if (e) return e;
    e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 12, &ypix); if (e) return e;

    *x = xpix << xeig;
    *y = ypix << yeig;

    return NULL;
}
    

/*---------------------------------------------------------------------------*
 * common_error                                                              *
 *                                                                           *
 * Given a string, return a kernel_oserror compatible error.                 *
 *---------------------------------------------------------------------------*/

_kernel_oserror *common_error(char *s)
{
    static _kernel_oserror e;
    
    e.errnum = 0;
    strcpy(e.errmess, s);
    
    return &e;
}


/*---------------------------------------------------------------------------*
 * grey_gadget                                                               *
 *                                                                           *
 * Grey a a gadget.                                                          *
 *                                                                           *
 * In: objectid = ID of the object containing the gadget.                    *
 *     gadgetid = ID of the gadget.                                          *
 *---------------------------------------------------------------------------*/

void grey_gadget(int objectid, int gadgetid)
{
    unsigned int flags;

    error_trap(gadget_get_flags(0, objectid, gadgetid, &flags), 0);
    flags = flags | Gadget_Faded;
    error_trap(gadget_set_flags(0, objectid, gadgetid, flags), 0);
}


/*---------------------------------------------------------------------------*
 * ungrey_gadget                                                             *
 *                                                                           *
 * Ungrey a a gadget.                                                        *
 *                                                                           *
 * In: objectid = ID of the object containing the gadget.                    *
 *     gadgetid = ID of the gadget.                                          *
 *---------------------------------------------------------------------------*/

void ungrey_gadget(int objectid, int gadgetid)
{
    unsigned int flags;

    error_trap(gadget_get_flags(0, objectid, gadgetid, &flags), 0);
    flags &= ~Gadget_Faded;
    error_trap(gadget_set_flags(0, objectid, gadgetid, flags), 0);
}


/*---------------------------------------------------------------------------*
 * strncmpa                                                                  *
 *                                                                           *
 * Compare n letters of a string, case insensitive.                          *
 *                                                                           *
 * In: str1 -> first string                                                  *
 *     str2 -> second string                                                 *
 *     size = number of characters to compare.                               *
 *                                                                           *
 * Returns: 0 if strings equal, otherwise number of characters they differ   *
 *          by.                                                              *
 *---------------------------------------------------------------------------*/
 
int strncmpa(char *str1, char *str2, int size)
{
    int n;
    int equal = size;
    
    for (n = 0; n < size; n++)
    {
        if (str1[n] == str2[n]) equal--;
        else if (str1[n] == str2[n] - 32) equal--;
        else if (str1[n]-32 == str2[n]) equal--;
    }

    return equal;
}


/*---------------------------------------------------------------------------*
 * read_cmos_value                                                           *
 *                                                                           *
 * Read a byte of CMOS ram                                                   *
 *                                                                           *
 * In: location = CMOS location to read                                      *
 *                                                                           *
 * Returns: contents of location.                                            *
 *---------------------------------------------------------------------------*/

int read_cmos_value(int location)
{
    int result;
    
    _swix(OS_Byte, _INR(0,1) | _OUT(2), OsByte_ReadCMOS, location, &result);
    return result;
}


/*---------------------------------------------------------------------------*
 * write_cmos_value                                                          *
 *                                                                           *
 * Write a byte of CMOS ram                                                  *
 *                                                                           *
 * In: location = CMOS location to write                                     *
 *     value = value to write                                                *
 *---------------------------------------------------------------------------*/

void write_cmos_value(int location, int value)
{
    _swix(OS_Byte, _INR(0,2), OsByte_WriteCMOS, location, value);
}
@


1.2
log
@Given a major overhaul to work with the HAL version of the SoundControl
module. Slider list is now dynamically generated to reflect hardware
capabilities. Configuration of beep voice and volume is now consistent with
the rest of !Configure (ie doesn't happen until you click 'Set').

Version 1.00. Tagged as 'SndSetup-1_00'
@
text
@d16 1
a16 1
/* File:    c.common                                                         */
d26 1
a35 2
#define Flag_GadgetFaded 1u<<31

d53 11
a63 1
extern inline void error_trap(_kernel_oserror *err, int err_type);
d133 1
a133 1
 * Return the size of rhe screen in OS units                                 *
d136 1
a136 1
_kernel_oserror* common_read_screensize(int *x, int *y)
d138 2
a139 5
    _kernel_oserror* e;
    int              xeig;
    int              yeig;
    int              xpix;
    int              ypix;
d159 1
a159 1
_kernel_oserror* common_error(char *s)
d162 1
d184 1
a184 1
    flags=flags | Flag_GadgetFaded;
d203 1
a203 1
    if (flags & Flag_GadgetFaded) flags=flags^Flag_GadgetFaded;
d226 1
a226 1
    for (n=0; n<size; n++)
d228 3
a230 3
        if (str1[n]==str2[n]) equal--;
        else if (str1[n]==str2[n]-32) equal--;
        else if (str1[n]-32==str2[n]) equal--;
d250 2
a251 1
    _swix(OS_Byte, _INR(0,1)|_OUT(2), 161, location, &result);
d267 1
a267 1
    _swix(OS_Byte, _INR(0,2), 162, location, value);
@


1.1
log
@Initial revision
@
text
@d32 1
d37 2
d40 2
a41 2
MessagesFD *message_block;
char       *message_buffer;
d54 1
a54 11
void error_trap(_kernel_oserror *err, int err_type)
{
    /* Report the appropriate error, has one occured */
    if (err != NULL)
    {
        wimp_report_error(err, 0, TaskName, 0, 0, 0);
  
        /* Now, if it was a fatal error (type != 0), exit at once */
        if (err_type != 0) exit(0);
    }
}
d70 3
d93 23
@


1.1.1.1
log
@Initial import of SndSetup plugin for Configure.
@
text
@@
