head	1.3;
access;
symbols
	FontSetup-0_12:1.3
	FontSetup-0_11:1.2
	FontSetup-0_10:1.2
	FontSetup-0_09:1.2
	FontSetup-0_08:1.2
	FontSetup-0_07:1.2
	FontSetup-0_06:1.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.1
	Ursula_RiscPC:1.1.1.1.0.2
	bavison_FontSetup-0_05:1.1.1.1
	rthornb_UrsulaBuild-19Aug1998:1.1.1.1
	UrsulaBuild_FinalSoftload:1.1.1.1
	rthornb_UrsulaBuild-29Jul1998:1.1.1.1
	rthornb_UrsulaBuild-22Jul1998:1.1.1.1
	bavison_FontSetup-0_04:1.1.1.1
	rthornb_UrsulaBuild-15Jul1998:1.1.1.1
	bavison_FontSetup-0_03:1.1.1.1
	bavison_FontSetup-0_02:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2013.08.03.07.39.05;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	msZwYnZgAvyuOYZw;

1.2
date	2002.12.19.22.34.08;	author srevill;	state Exp;
branches;
next	1.1;

1.1
date	98.05.29.14.13.53;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.05.29.14.13.53;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Relocate 'desktop font' picker out of the font manager setup
This plugin is now only concerned with font manager matters.

Version 0.12. Tagged as 'FontSetup-0_12'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/******	ToolboxE.c ********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Fonts configuration plug-in
This file:	Toolbox event code

History:
Date		Who	Change
----------------------------------------------------------------------------
20/05/1998	BJGA	Created
27/05/1998	BJGA	Added FontMenu_Selected and NumberRange_ValueChanged handlers,
			plus "Install fonts..." action button handler
28/05/1998	BJGA	Select-clicks on action buttons now start quit negotiation instead of just quitting

\**************************************************************************/

/* CLib */
#include <string.h>
#include "swis.h"
/* Toolbox */
#include "event.h"
#include "wimplib.h"
#include "window.h"
#include "toolbox.h"
#include "gadgets.h"
/* Common */
#include "cmos.h"
#include "misc.h"
/* local headers */
#include "Main.h"
#include "Settings.h"
#include "ToolboxE.h"  /* includes prototypes for this file */

static int toolboxe_actionbuttonselected (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static int toolboxe_numberrangevaluechanged (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static int toolboxe_objectautocreated (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static int toolboxe_optionbuttonstatechanged (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static void static_changevalue (ComponentId cmp, int state, int newlimit, BOOL max);
static void static_changevalue_cachebits (int state, int newlimit, BOOL max);
static void static_changevalue_antialias (int state, int newlimit, BOOL max);
static void static_changevalue_horizaa (int state, int newlimit, BOOL max);
static void static_changevalue_vertaa (int state, int newlimit, BOOL max);
static void static_changevalue_cacheinit (int newlimit, BOOL max);
static void static_changevalue_cachelimit (int newlimit, BOOL max);

int toolboxe_events [6] =     { ActionButton_Selected,
				NumberRange_ValueChanged,
				Toolbox_ObjectAutoCreated,
				OptionButton_StateChanged,
				0 };

void toolboxe_register (void)
{
  throw (event_register_toolbox_handler (-1, ActionButton_Selected, toolboxe_actionbuttonselected, NULL));
  throw (event_register_toolbox_handler (-1, NumberRange_ValueChanged, toolboxe_numberrangevaluechanged, NULL));
  throw (event_register_toolbox_handler (-1, Toolbox_ObjectAutoCreated, toolboxe_objectautocreated, NULL));
  throw (event_register_toolbox_handler (-1, OptionButton_StateChanged, toolboxe_optionbuttonstatechanged, NULL));
}

/******	toolboxe_actionbuttonselected() ***********************************\

Purpose:	Handles ActionButton_Selected event

\**************************************************************************/

static int toolboxe_actionbuttonselected (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  switch (id_block->self_component)
  {
    case mainwindow_fontinstall:
      if (fontmerge_alive)
      {
        WimpMessage message;
        message.hdr.size = 20;
        message.hdr.your_ref = 0;
        message.hdr.action_code = Wimp_MOpenConfigWindow;
        throw (wimp_send_message (17, &message, fontmerge_taskhandle, 0, NULL));
      }
      else
      {
        WimpGetWindowStateBlock state;
        BBox gadget;
        char command [256];
        int x0, y1;
        throw (window_get_wimp_handle (0, mainwindow_id, &(state.window_handle)));
        throw (wimp_get_window_state (&state));
        throw (gadget_get_bbox (0, mainwindow_id, mainwindow_fontinstall, &gadget));
        x0 = gadget.xmin + state.visible_area.xmin - state.xscroll;
        y1 = gadget.ymax + state.visible_area.ymax - state.yscroll;
        sprintf (command, "/<FontSetup$Dir>.!FontMerge.!Run -openat %i %i", x0, y1);
        fontmerge_taskhandle = _swi (Wimp_StartTask, _IN(0)|_RETURN(0), command);
        fontmerge_alive = (fontmerge_taskhandle != 0) ? TRUE : FALSE;
      }
      break;
    case mainwindow_default:
      settings_read (cmos_default);
      break;
    case mainwindow_cancel:
      if (!(event->hdr.flags & 1))
      {
        main_startquit (0); /* Plug-in should complain if there's any outstanding work */
      }
      else
      {
        settings_read (cmos_read);
      }
      break;
    case mainwindow_set:
      if (settings_write ())
      {
        if (!(event->hdr.flags & 1))
        {
          main_startquit (1); /* Plug-in should perform any outstanding work */
        }
        else
        {
          settings_read (cmos_read); /* Make sure everything's legal */
        }
      }
      break;
  }
  return 1;
}

/******	toolboxe_numberrangevaluechanged() ********************************\

Purpose:	Handles NumberRange_ValueChanged event

\**************************************************************************/

static int toolboxe_numberrangevaluechanged (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  /* Need to enforce new value in both directions, since we don't know which arrow was used */
  static_changevalue (id_block->self_component, -1, ((NumberRangeValueChangedEvent *)event)->new_value, TRUE);
  static_changevalue (id_block->self_component, -1, ((NumberRangeValueChangedEvent *)event)->new_value, FALSE);
  return 1;
}

/******	toolboxe_objectautocreated() **************************************\

Purpose:	Handles Toolbox_ObjectAutoCreated event

\**************************************************************************/

static int toolboxe_objectautocreated (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  if (0 == strcmp ("Fonts", ((ToolboxObjectAutoCreatedEvent *)event)->template_name))
  {
    mainwindow_id = id_block->self_id;
    misc_openwindow (mainwindow_id, TRUE);
    setup_gadgets_by_fontmanager ();
    settings_read (cmos_read);
    if (!(2 & _swi (OS_File, _INR(0,1)|_RETURN(0), 17, "<FontSetup$Dir>.!FontMerge")))
      misc_shadecomponents (TRUE, mainwindow_id, mainwindow_fontinstall, mainwindow_fontinstall);
  }
  return 1;
}

/******	toolboxe_optionbuttonstatechanged() *******************************\

Purpose:	Handles OptionButton_StateChanged event

\**************************************************************************/

static int toolboxe_optionbuttonstatechanged (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  static_changevalue (id_block->self_component, ((OptionButtonStateChangedEvent *)event)->new_state, -1, 0);
  return 1;
}

/******	static_changevalue() **********************************************\

Purpose:	Handles the dependencies between numerical options
In:		Component id being altered
		State: 0 => off/faded, 1 = > on/unfaded, -1 => leave unchanged
		New limiting value (-1 => don't change value)
		Limiting value is a maximum / minimum
Notes:		Recursive

\**************************************************************************/

static void static_changevalue (ComponentId cmp, int state, int newlimit, BOOL max)
{
  switch (cmp)
  {
    case mainwindow_cachebitsoption:
    case mainwindow_cachebits:
      static_changevalue_cachebits (state, newlimit, max);
      break;

    case mainwindow_antialiasoption:
    case mainwindow_antialias:
      static_changevalue_antialias (state, newlimit, max);
      break;

    case mainwindow_horizaaoption:
    case mainwindow_horizaa:
      static_changevalue_horizaa (state, newlimit, max);
      break;

    case mainwindow_vertaaoption:
    case mainwindow_vertaa:
      static_changevalue_vertaa (state, newlimit, max);
      break;

    case mainwindow_cacheinit:
      static_changevalue_cacheinit (newlimit, max);
      break;

    case mainwindow_cachelimit:
      static_changevalue_cachelimit (newlimit, max);
      break;
  }
}

/******	static_changevalue_cachebits() ************************************\

Purpose:	"Cache bitmaps" part of static_changevalue()
In:		State: 0 => off/faded, 1 = > on/unfaded, -1 => leave unchanged
		New limiting value (-1 => don't change value)
		Limiting value is a maximum / minimum
Notes:		Recursive

\**************************************************************************/

static void static_changevalue_cachebits (int state, int newlimit, BOOL max)
{
  /* Get the old state: have to do this by reading the fade state of the number
     range, rather than the option button state, as the Toolbox may (or may not)
     have already changed the option button state for us */
  unsigned int old_state;
  throw (gadget_get_flags (0, mainwindow_id, mainwindow_cachebits, &old_state));
  old_state = (0 == (old_state & Gadget_Faded));

  if (state != -1 && state != old_state)
  {
    /* Turn option button on/off if necessary */
    int old_opt_state;
    throw (optionbutton_get_state (0, mainwindow_id, mainwindow_cachebitsoption, &old_opt_state));
    if (old_opt_state != state)
    {
      throw (optionbutton_set_state (0, mainwindow_id, mainwindow_cachebitsoption, state));
    }

    /* Fade/unfade the number range as appropriate */
    misc_shadecomponents (!state, mainwindow_id, mainwindow_cachebits_shademin, mainwindow_cachebits_shademax);

    /* No cacheing => no antialiasing */
    if (state == 0)
    {
      static_changevalue (mainwindow_antialias, 0, -1, 0);
    }
  }

  if (newlimit != -1)
  {
    int old_value;
    throw (numberrange_get_value (0, mainwindow_id, mainwindow_cachebits, &old_value));

    /* Re-enforce range limits */
    if (newlimit > 255) newlimit = 255;
    if (newlimit < 1) newlimit = 1;

    /* Adjust our value according to the limit, pass on if necessary */
    if (max) /* new upper limit being imposed */
    {
      if (old_value > newlimit)
      {
        throw (numberrange_set_value (0, mainwindow_id, mainwindow_cachebits, newlimit));
      }
      static_changevalue (mainwindow_antialias, -1, newlimit, max);
    }
    else /* new lower limit being imposed */
    {
      if (old_value < newlimit)
      {
        throw (numberrange_set_value (0, mainwindow_id, mainwindow_cachebits, newlimit));
      }
      /* Can't pass any higher up! */
    }
  }
}

/******	static_changevalue_antialias() ************************************\

Purpose:	"Antialias" part of static_changevalue()
In:		State: 0 => off/faded, 1 = > on/unfaded, -1 => leave unchanged
		New limiting value (-1 => don't change value)
		Limiting value is a maximum / minimum
Notes:		Recursive

\**************************************************************************/

static void static_changevalue_antialias (int state, int newlimit, BOOL max)
{
  /* Get the old state: have to do this by reading the fade state of the number
     range, rather than the option button state, as the Toolbox may (or may not)
     have already changed the option button state for us */
  unsigned int old_state;
  throw (gadget_get_flags (0, mainwindow_id, mainwindow_antialias, &old_state));
  old_state = (0 == (old_state & Gadget_Faded));

  if (state != -1 && state != old_state)
  {
    /* Turn option button on/off if necessary */
    int old_opt_state;
    throw (optionbutton_get_state (0, mainwindow_id, mainwindow_antialiasoption, &old_opt_state));
    if (old_opt_state != state)
    {
      throw (optionbutton_set_state (0, mainwindow_id, mainwindow_antialiasoption, state));
    }

    /* Fade/unfade the number range as appropriate */
    misc_shadecomponents (!state, mainwindow_id, mainwindow_antialias_shademin, mainwindow_antialias_shademax);

    /* No antialiasing => no h or v antialiasing */
    if (state == 0)
    {
      static_changevalue (mainwindow_horizaa, 0, -1, 0);
      static_changevalue (mainwindow_vertaa, 0, -1, 0);
    }

    /* Antialiasing => cacheing */
    if (state == 1)
    {
      static_changevalue (mainwindow_cachebits, 1, -1, 0);
    }
  }

  if (newlimit != -1)
  {
    int old_value;
    throw (numberrange_get_value (0, mainwindow_id, mainwindow_antialias, &old_value));

    /* Re-enforce range limits */
    if (newlimit > 255) newlimit = 255;
    if (newlimit < 1) newlimit = 1;

    /* Adjust our value according to the limit, pass on if necessary */
    if (max) /* new upper limit being imposed */
    {
      if (old_value > newlimit)
      {
        throw (numberrange_set_value (0, mainwindow_id, mainwindow_antialias, newlimit));
      }
      static_changevalue (mainwindow_horizaa, -1, newlimit, max);
      static_changevalue (mainwindow_vertaa, -1, newlimit, max);
    }
    else /* new lower limit being imposed */
    {
      if (old_value < newlimit)
      {
        throw (numberrange_set_value (0, mainwindow_id, mainwindow_antialias, newlimit));
      }
      static_changevalue (mainwindow_cachebits, -1, newlimit, max);
    }
  }
}

/******	static_changevalue_horizaa() **************************************\

Purpose:	"Horizontal antialiasing" part of static_changevalue()
In:		State: 0 => off/faded, 1 = > on/unfaded, -1 => leave unchanged
		New limiting value (-1 => don't change value)
		Limiting value is a maximum / minimum
Notes:		Recursive

\**************************************************************************/

static void static_changevalue_horizaa (int state, int newlimit, BOOL max)
{
  /* Get the old state: have to do this by reading the fade state of the number
     range, rather than the option button state, as the Toolbox may (or may not)
     have already changed the option button state for us */
  unsigned int old_state;
  throw (gadget_get_flags (0, mainwindow_id, mainwindow_horizaa, &old_state));
  old_state = (0 == (old_state & Gadget_Faded));

  if (state != -1 && state != old_state)
  {
    /* Turn option button on/off if necessary */
    int old_opt_state;
    throw (optionbutton_get_state (0, mainwindow_id, mainwindow_horizaaoption, &old_opt_state));
    if (old_opt_state != state)
    {
      throw (optionbutton_set_state (0, mainwindow_id, mainwindow_horizaaoption, state));
    }

    /* Fade/unfade the number range as appropriate */
    misc_shadecomponents (!state, mainwindow_id, mainwindow_horizaa_shademin, mainwindow_horizaa_shademax);

    /* Horizontal antialiasing => antialiasing */
    if (state == 1)
    {
      static_changevalue (mainwindow_antialias, 1, -1, 0);
    }
  }

  if (newlimit != -1)
  {
    int old_value;
    throw (numberrange_get_value (0, mainwindow_id, mainwindow_horizaa, &old_value));

    /* Re-enforce range limits */
    if (newlimit > 255) newlimit = 255;
    if (newlimit < 1) newlimit = 1;

    /* Adjust our value according to the limit, pass on if necessary */
    if (max) /* new upper limit being imposed */
    {
      if (old_value > newlimit)
      {
        throw (numberrange_set_value (0, mainwindow_id, mainwindow_horizaa, newlimit));
      }
      /* Can't pass any lower down! */
    }
    else /* new lower limit being imposed */
    {
      if (old_value < newlimit)
      {
        throw (numberrange_set_value (0, mainwindow_id, mainwindow_horizaa, newlimit));
      }
      static_changevalue (mainwindow_antialias, -1, newlimit, max);
    }
  }
}

/******	static_changevalue_vertaa() ***************************************\

Purpose:	"Horizontal antialiasing" part of static_changevalue()
In:		State: 0 => off/faded, 1 = > on/unfaded, -1 => leave unchanged
		New limiting value (-1 => don't change value)
		Limiting value is a maximum / minimum
Notes:		Recursive

\**************************************************************************/

static void static_changevalue_vertaa (int state, int newlimit, BOOL max)
{
  /* Get the old state: have to do this by reading the fade state of the number
     range, rather than the option button state, as the Toolbox may (or may not)
     have already changed the option button state for us */
  unsigned int old_state;
  throw (gadget_get_flags (0, mainwindow_id, mainwindow_vertaa, &old_state));
  old_state = (0 == (old_state & Gadget_Faded));

  if (state != -1 && state != old_state)
  {
    /* Turn option button on/off if necessary */
    int old_opt_state;
    throw (optionbutton_get_state (0, mainwindow_id, mainwindow_vertaaoption, &old_opt_state));
    if (old_opt_state != state)
    {
      throw (optionbutton_set_state (0, mainwindow_id, mainwindow_vertaaoption, state));
    }

    /* Fade/unfade the number range as appropriate */
    misc_shadecomponents (!state, mainwindow_id, mainwindow_vertaa_shademin, mainwindow_vertaa_shademax);

    /* Vertical antialiasing => antialiasing */
    if (state == 1)
    {
      static_changevalue (mainwindow_antialias, 1, -1, 0);
    }
  }

  if (newlimit != -1)
  {
    int old_value;
    throw (numberrange_get_value (0, mainwindow_id, mainwindow_vertaa, &old_value));

    /* Re-enforce range limits */
    if (newlimit > 255) newlimit = 255;
    if (newlimit < 1) newlimit = 1;

    /* Adjust our value according to the limit, pass on if necessary */
    if (max) /* new upper limit being imposed */
    {
      if (old_value > newlimit)
      {
        throw (numberrange_set_value (0, mainwindow_id, mainwindow_vertaa, newlimit));
      }
      /* Can't pass any lower down! */
    }
    else /* new lower limit being imposed */
    {
      if (old_value < newlimit)
      {
        throw (numberrange_set_value (0, mainwindow_id, mainwindow_vertaa, newlimit));
      }
      static_changevalue (mainwindow_antialias, -1, newlimit, max);
    }
  }
}

/******	static_changevalue_cacheinit() ************************************\

Purpose:	"Initial font cache" part of static_changevalue()
In:		New limiting value
		Limiting value is a maximum / minimum
Notes:		Recursive

\**************************************************************************/

static void static_changevalue_cacheinit (int newlimit, BOOL max)
{
  int old_value;
  throw (numberrange_get_value (0, mainwindow_id, mainwindow_cacheinit, &old_value));

  /* Adjust our value according to the limit, pass on if necessary */
  if (max) /* new upper limit being imposed */
  {
    if (old_value > newlimit)
    {
      throw (numberrange_set_value (0, mainwindow_id, mainwindow_cacheinit, newlimit));
    }
    /* Can't pass any higher up! */
  }
  else /* new lower limit being imposed */
  {
    if (old_value < newlimit)
    {
      throw (numberrange_set_value (0, mainwindow_id, mainwindow_cacheinit, newlimit));
    }
    static_changevalue (mainwindow_cachelimit, -1, newlimit, max);
  }
}

/******	static_changevalue_cachelimit() ***********************************\

Purpose:	"Font cache limit" part of static_changevalue()
In:		New limiting value
		Limiting value is a maximum / minimum
Notes:		Recursive

\**************************************************************************/

static void static_changevalue_cachelimit (int newlimit, BOOL max)
{
  int old_value;
  throw (numberrange_get_value (0, mainwindow_id, mainwindow_cachelimit, &old_value));

  /* Adjust our value according to the limit, pass on if necessary */
  if (max) /* new upper limit being imposed */
  {
    if (old_value > newlimit)
    {
      throw (numberrange_set_value (0, mainwindow_id, mainwindow_cachelimit, newlimit));
    }
    static_changevalue (mainwindow_cacheinit, -1, newlimit, max);
  }
  else /* new lower limit being imposed */
  {
    if (old_value < newlimit)
    {
      throw (numberrange_set_value (0, mainwindow_id, mainwindow_cachelimit, newlimit));
    }
    /* Can't pass any lower down! */
  }
}
@


1.2
log
@UK Res file tweaks.
Now detects the version of fontmanager running and adjusts the step size
of the cache limits from 4k to 64k accordingly.

Version 0.07. Tagged as 'FontSetup-0_07'
@
text
@a38 1
#include "fontmenu.h"
a43 1
#include "DeskFont.h"
a48 1
static int toolboxe_fontmenuselection (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
a60 1
				FontMenu_Selection,
a68 1
  throw (event_register_toolbox_handler (-1, FontMenu_Selection, toolboxe_fontmenuselection, NULL));
a138 12
/******	toolboxe_fontmenuselection() **************************************\

Purpose:	Handles FontMenu_Selection event

\**************************************************************************/

static int toolboxe_fontmenuselection (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  DeskFont_ReflectFontNameInDisplayField ();
  return 1;
}

a169 4
  if (0 == strcmp ("FontMenu", ((ToolboxObjectAutoCreatedEvent *)event)->template_name))
  {
    fontmenu_id = id_block->self_id;
  }
@


1.1
log
@Initial revision
@
text
@d182 1
d225 1
a225 1
      
d230 1
a230 1
      
d235 1
a235 1
      
d240 1
a240 1
      
d244 1
a244 1
      
d269 1
a269 1
  
d279 1
a279 1
    
d282 1
a282 1
    
d289 1
a289 1
  
d294 1
a294 1
    
d298 1
a298 1
    
d337 1
a337 1
  
d347 1
a347 1
    
d350 1
a350 1
    
d357 1
a357 1
    
d364 1
a364 1
  
d369 1
a369 1
    
d373 1
a373 1
    
d413 1
a413 1
  
d423 1
a423 1
    
d426 1
a426 1
    
d433 1
a433 1
  
d438 1
a438 1
    
d442 1
a442 1
    
d481 1
a481 1
  
d491 1
a491 1
    
d494 1
a494 1
    
d501 1
a501 1
  
d506 1
a506 1
    
d510 1
a510 1
    
d544 1
a544 1
  
d577 1
a577 1
  
@


1.1.1.1
log
@Initial import of Configure plug-in '!FontSetup' to CVS.
@
text
@@
