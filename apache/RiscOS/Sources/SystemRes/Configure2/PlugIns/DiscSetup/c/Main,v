head	1.4;
access;
symbols
	DiscSetup-0_12:1.4
	DiscSetup-0_11:1.4
	DiscSetup-0_10:1.2
	DiscSetup-0_09:1.2
	DiscSetup-0_08:1.2
	DiscSetup-0_07:1.2
	DiscSetup-0_06:1.2
	DiscSetup-0_05:1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.1
	Ursula_RiscPC:1.1.1.1.0.2
	bavison_DiscSetup-0_04:1.1.1.1
	rthornb_UrsulaBuild-19Aug1998:1.1.1.1
	UrsulaBuild_FinalSoftload:1.1.1.1
	rthornb_UrsulaBuild-12Aug1998:1.1.1.1
	aglover_UrsulaBuild-05Aug1998:1.1.1.1
	bavison_DiscSetup-0_03:1.1.1.1
	rthornb_UrsulaBuild-29Jul1998:1.1.1.1
	rthornb_UrsulaBuild-22Jul1998:1.1.1.1
	bavison_DiscSetup-0_02:1.1.1.1
	rthornb_UrsulaBuild-15Jul1998:1.1.1.1
	rthornb_UrsulaBuild-07Jul1998:1.1.1.1
	bavison_DiscSetup-0_01:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2015.09.22.19.39.30;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	rJ1szNqM3aAaJhCy;

1.3
date	2015.09.22.19.35.26;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	soHqpe1Vm0cfHhCy;

1.2
date	2002.12.14.13.04.57;	author srevill;	state Exp;
branches;
next	1.1;

1.1
date	98.06.30.08.47.53;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.06.30.08.47.53;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Raise RAM disc clamp when possible
If the 'PMP' extensions for dynamic areas are available, allow the numberrange gadget to choose a larger RAM disc, and if not clamp at 128MB as before.
Use unsigned types to hold memory amounts, and calculate in pages where possible to avoid overflow/signedness issues above 2GB.
As at time of writing RAMFS is still being worked on, this plugin doesn't respect that, so if you choose a size larger than RAMFS supports it'll choose the lower of the two.

Tested briefly on a Risc PC with 256MB RAM with and without PMP dynamic areas.

Version 0.11. Tagged as 'DiscSetup-0_11'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/******	Main.c ************************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Discs configuration plug-in
This file:	Overall control

History:
Date		Who	Change
----------------------------------------------------------------------------
23/06/1998	BJGA	Created
24/06/1998	BJGA	Added static_initMemorySizeVariables
15/06/1998	BJGA	Now reads total RAM size using documented call.

\**************************************************************************/

/* CLib */
#include <stdlib.h>
#include "swis.h"
#include "AsmUtils/clz.h"
/* Toolbox */
#include "event.h"
#include "toolbox.h"
/* Common */
#include "error.h"
#include "misc.h"
/* Local headers */
#include "Main.h"
#include "ToolboxE.h"
#include "WimpE.h"
#include "WimpM.h"

#define	WimpVersion	((int) 310)

/* Global variables */

	BOOL		Quit = FALSE;
	ObjectId	Window_Obj;
	MessagesFD	messages;
	const char	*StatusFile = "<Choices$Write>.Boot.PreDesk.DiscSetup";
	const char	*StatusFileRO = "Choices:Boot.PreDesk.DiscSetup";
	unsigned int	RAMFS_Limit;
	int		ADFS_Default_Buffer;

/* Prototypes */

void static_InitMemorySizeVariables (void);


/******	main() ************************************************************\

In:		Command line option:
		  -openat x y
		    specifies initial position to open window at

\**************************************************************************/

int main (int argc, char *argv[])
{
  WimpPollBlock poll_block;
  IdBlock id_block;

  error_initialise ();
  throw (toolbox_initialise (0, WimpVersion, WimpM_Messages, ToolboxE_Events,
    "<DiscSetup$Dir>", &messages, &id_block, NULL, NULL, NULL));
  misc_parsearguments (argc, argv);
  throw (event_initialise (&id_block));
  throw (event_set_mask (WimpE_Mask));

  WimpM_Register ();
  WimpE_Register ();
  ToolboxE_Register ();

  static_InitMemorySizeVariables ();

  error_recover_point();
  while (!Quit)
  {
    throw (event_poll (NULL, &poll_block, NULL));
  }
  exit (EXIT_SUCCESS);
}

/******	static_InitMemorySizeVariables() **********************************\

Purpose:	Initialises things related to total RAM size

\**************************************************************************/

void static_InitMemorySizeVariables (void)
{
  unsigned int PageSize, Log2PageSize;
  unsigned int RAM_Size;
  unsigned int DA_Size;
  int flags;
  _kernel_oserror *e;

  /* Get total RAM size (in bytes) */
  _swi (OS_ReadMemMapInfo, _OUTR(0,1), &PageSize, &RAM_Size);
  Log2PageSize = 1 + ctz(PageSize);

  /* This is the way ADFS does it, via an undocumented OS_SetEnv call:
  **
  ** RAM_Size = _swi (OS_SetEnv, _INR(0,7)|_RETURN(2), 0, 0, 0, 0, 0, 0, 0, 0);
  **
  */

  /* The default value for both ADFSBuffers and ADFSDirCache is 1/256th of */
  /* the total RAM, capped and collared by 255K and 4K */
  ADFS_Default_Buffer = RAM_Size >> (18 - Log2PageSize);
  ADFS_Default_Buffer = min(255, ADFS_Default_Buffer);
  ADFS_Default_Buffer = max(4, ADFS_Default_Buffer);

  /* See if PMP dynamic areas are available */
  e = _swix (OS_DynamicArea, _INR(0,1) | _OUT(4), 24, 5, &flags);
  if ((e == NULL) && (flags & (1<<20)))
  {
    /* Limited only by physical RAM */
    RAMFS_Limit = (RAM_Size >> (20 - Log2PageSize)) * 10;
  }
  else
  {
    /* Get RAMFS dynamic area max size (in bytes) */
    _swi (OS_DynamicArea, _INR(0,1) | _OUT(5), 2, 5, &DA_Size);
    DA_Size = DA_Size >> Log2PageSize; /* In pages */

    /* Clamp RAM_Size if the maximum size if the RAMFS dynamic area is smaller */
    if (DA_Size < RAM_Size) RAM_Size = DA_Size;

    /* RAMFS is limited by available memory, the RAMFS DA size, or by 128MB, whichever is smaller */
    RAMFS_Limit = (RAM_Size >> (20 - Log2PageSize)) * 10;
    if (RAMFS_Limit >= 1280) RAMFS_Limit = 1280;
  }
}
@


1.3
log
@Use symbolic defines instead of numbers
Swap a few magic numbers for those in the central headers.
Make sure when reading settings they're read from Choices: not <Choices$Write>.
Not tagged.
@
text
@d33 1
d55 1
a55 1
	int		RAMFS_Limit;
d105 5
a109 6
  int PageSize;
  int RAM_Size;
  int DA_Size;

  /* Get RAMFS dynamic area max size (in bytes) */
  _swi (OS_DynamicArea, _INR(0,1) | _OUT(5), 2, 5, &DA_Size);
d113 1
a113 4
  RAM_Size *= PageSize;

  /* Clamp RAM_Size if the maximum size if the RAMFS dynamic area is smaller */
  if (DA_Size < RAM_Size) RAM_Size = DA_Size;
d123 1
a123 1
  ADFS_Default_Buffer = RAM_Size >> 18;
d127 8
a134 3
  /* RAMFS is limited by available memory, the RAMFS DA size, or by 128MB, whichever is smaller */
  RAMFS_Limit = (RAM_Size >> 20) * 10;
  if (RAMFS_Limit >= 1280)
d136 10
a145 1
    RAMFS_Limit = 1280;
@


1.2
log
@Change to use ADFS autodetect time rather than having to configure the
number of drives.
New icons
Updated Res accordingly
Makefile tweaks
Addition of MkAll
As featured on disc image accompanying RISC OS 5.00

Version 0.05. Tagged as 'DiscSetup-0_05'
@
text
@d53 1
@


1.1
log
@Initial revision
@
text
@d73 1
a73 1
  
d80 1
a80 1
  
d84 1
a84 1
  
d86 1
a86 1
  
d105 5
a109 1
  
d113 4
a116 1
  
d122 1
a122 1
  
d128 2
a129 2
  
  /* RAMFS is limited by available memory, or by 128MB, whichever is smaller */
@


1.1.1.1
log
@
Initial import of Configure plug-in '!DiscSetup' to CVS.
@
text
@@
