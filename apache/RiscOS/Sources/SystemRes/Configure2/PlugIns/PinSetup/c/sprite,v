head	1.2;
access;
symbols
	PinSetup-0_24:1.2
	PinSetup-0_23:1.2
	PinSetup-0_22:1.2
	PinSetup-0_21:1.2
	PinSetup-0_20:1.2
	PinSetup-0_19:1.2
	PinSetup-0_18:1.2
	PinSetup-0_17:1.2
	PinSetup-0_16:1.1.1.3
	PinSetup-0_15:1.1.1.3
	PinSetup-0_14:1.1.1.3
	PinSetup-0_13:1.1.1.3
	PinSetup-0_12:1.1.1.3
	PinSetup-0_11:1.1.1.3
	PinSetup-0_10:1.1.1.3
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.3
	Ursula_RiscPC:1.1.1.3.0.2
	rleggett_PinSetup-0_09b:1.1.1.3
	rthornb_UrsulaBuild-19Aug1998:1.1.1.3
	UrsulaBuild_FinalSoftload:1.1.1.3
	rthornb_UrsulaBuild-29Jul1998:1.1.1.3
	rthornb_UrsulaBuild-22Jul1998:1.1.1.3
	rleggett_PinSetup-0_09:1.1.1.3
	rthornb_UrsulaBuild-15Jul1998:1.1.1.2
	rthornb_UrsulaBuild-07Jul1998:1.1.1.2
	rthornb_UrsulaBuild-17Jun1998:1.1.1.2
	rleggett_PinSetup-0_08:1.1.1.2
	rthornb_UrsulaBuild-03Jun1998:1.1.1.2
	rthornb_UrsulaBuild-27May1998:1.1.1.2
	rthornb_UrsulaBuild-21May1998:1.1.1.1
	rthornb_UrsulaBuild_01May1998:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2012.09.09.18.57.28;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	skbKDg9lUvGS6Tjw;

1.1
date	98.04.14.10.38.43;	author rleggett;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.04.14.10.38.43;	author rleggett;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.05.26.16.56.34;	author rleggett;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	98.07.22.10.42.16;	author rleggett;	state Exp;
branches;
next	;


desc
@@


1.2
log
@PinSetup tidy step
Usual drill
* Makefile recreated from fragments
* Version number inserted to messages at build time
* Local OS interface definitions replaced with central header files
* Read choices from Choices$Path write via Choices$Write
Also simplified the random texture 'try' option by just running RTexture directly rather than emulating it in C.
Tested briefly, still works.

Version 0.17. Tagged as 'PinSetup-0_17'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*---------------------------------------------------------------------------*/
/* File:    sprite.c                                                         */
/* Purpose: Sprite handling routines                                         */
/* Author:  Richard Leggett                                                  */
/* History: 29-Oct-97: RML: Begun.                                           */
/*                                                                           */
/* Copyright © 1997 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "Global/Sprite.h"
#include "Interface/HighFSI.h"
#include "toolbox.h"
#include "common.h"
#include "sprite.h"

/* Sprite structures */
typedef struct
{
  int size;
  int number;
  int sproff;
  int freeoff;
} sprite_area;

typedef struct
{
  int  next;
  char name[12];
  int  width;
  int  height;
  int  lbit;
  int  rbit;
  int  image;
  int  mask;
  int  mode;
  int  palette[512];
  char img[4];
} sprite_header;


/* Global variables */
static int prev1;
static int prev2;
static int prev3;
static char* save_area;


/*---------------------------------------------------------------------------*
 * sprite_size_of_spritearea                                                 *
 *                                                                           *
 * Given a sprite's filename, calculate how large a chunk of memory is       *
 * required to hold it.                                                      *
 *                                                                           *
 * In: filename -> filename string.                                          *
 *                                                                           *
 * On exit: areasize -> size of area required.                               *
 *---------------------------------------------------------------------------*/

_kernel_oserror* sprite_size_of_spritearea(char* filename, int* areasize)
{
    _kernel_oserror *e;
    int              type, length;

    e=_swix(OS_File, _INR(0,1)|_OUT(0)|_OUT(4), OSFile_ReadNoPath, filename, &type, &length);
    if (e) return e;
    if ((!type) || (!length)) return common_error(messages_lookup("TileNotExist"));
    *areasize = length+8;
    return NULL;
}


/*---------------------------------------------------------------------------*
 * sprite_init_and_load                                                      *
 *                                                                           *
 * Initialise a sprite area and load a file into it.                         *
 *                                                                           *
 * In: filename -> filename string.                                          *
 *     buffer -> buffer to load file.                                        *
 *     size = size of buffer.                                                *
 *---------------------------------------------------------------------------*/

_kernel_oserror* sprite_init_and_load(char* filename, void* buffer, int size)
{
    _kernel_oserror *e;
    int*             sprite_area = (int*)buffer;
    
    sprite_area[0] = size;
    sprite_area[1] = 16;
    
    e = _swix(OS_SpriteOp, _INR(0,1), 256+SpriteReason_ClearSprites, buffer);

    if (!e) e = _swix(OS_SpriteOp, _INR(0,2), 256+SpriteReason_LoadSpriteFile, buffer, filename);

    return e;
}


/*---------------------------------------------------------------------------*
 * sprite_find_address_of                                                    *
 *                                                                           *
 * Find the address in memory of a sprite with a given name.                 *
 *                                                                           *
 * In: buffer -> sprite area which contains the sprite.                      *
 *     sprite_name -> sprite name string.                                    *
 *                                                                           *
 * On exit: address-> address of sprite in memory.                           *
 *---------------------------------------------------------------------------*/

_kernel_oserror* sprite_find_address_of(void* buffer, char* sprite_name, char**address)
{
    _kernel_oserror *e;
    void*            dest;
    
    e = _swix(OS_SpriteOp, _INR(0,2)|_OUT(2), 256+SpriteReason_SelectSprite, buffer,
                                              sprite_name, &dest);
    *address = dest;
        
    return e;
}


/*---------------------------------------------------------------------------*
 * sprite_generate_colourtrans                                               *
 *                                                                           *
 * Generate a colourtrans table for a sprite being plotted into a 32bpp      *
 * screen mode.                                                              *
 *                                                                           *
 * In: area -> sprite area containing the sprite                             *
 *     header -> sprite header for the sprite                                *
 *                                                                           *
 * On exit: table -> location of colourtrans table.                          *
 *---------------------------------------------------------------------------*/

_kernel_oserror* sprite_generate_colourtrans32(void* area, void* sprite, char** table)
{
    _kernel_oserror *e;
    char*            ctable;
    int              modespec[] = {1, 640, 480, 5, -1, -1};
    int              size;
    /* void*            palette; */

    /*e = _swix(OS_SpriteOp, _INR(0,3)|_OUT(3), 512 + Sprite_CreatePalette,
                                              area,
                                              sprite,
                                              -1,
                                              &palette);
    if (e) return e;
    if (palette == 0) palette=(void*)-1;
    else palette=sprite; */
        
    e = _swix(ColourTrans_GenerateTable, _INR(0,5)|_OUT(4),
                                         area,
                                         sprite,
                                         modespec,
                                         0,
                                         0,
                                         1+2+16,
                                         &size);
    if (e) return e;
 
    ctable = malloc(size);
    if (!ctable) return common_error(messages_lookup("NotEnoughMemory"));
    
    e = _swix(ColourTrans_GenerateTable, _INR(0,5),
                                         area,
                                         sprite,
                                         modespec,
                                         0,
                                         ctable,
                                         1+2+16);
    *table = ctable;

    return e;
}


/*---------------------------------------------------------------------------*
 * sprite_output_to_sprite                                                   *
 *                                                                           *
 * Direct vdu output to a sprite.                                            *
 *                                                                           *
 * In: area -> spritearea containing sprite.                                 *
 *     header -> header of sprite.                                           *
 *---------------------------------------------------------------------------*/

_kernel_oserror* sprite_output_to_sprite(void* area, void* header)
{
    _kernel_oserror *e;
    int save_area_size;
    
    e = _swix(OS_SpriteOp, _INR(0,2)|_OUT(3),
                           512+SpriteReason_ReadSaveAreaSize,
                           area,
                           header,
                           &save_area_size);
    if (e) return e;
    
    save_area = malloc(save_area_size);
    if (!save_area) return common_error(messages_lookup("NotEnoughMemory"));    
    memset(save_area, 0, 4);

    e = _swix(OS_SpriteOp, _INR(0,3)|_OUTR(1,3),
                           512+SpriteReason_SwitchOutputToSprite,
                           area,
                           header,
                           save_area,
                           &prev1,
                           &prev2,
                           &prev3);
    return e;
}


/*---------------------------------------------------------------------------*
 * sprite_output_back_to_screen                                              *
 *                                                                           *
 * Direct vdu output back to screen.                                         *
 *---------------------------------------------------------------------------*/

_kernel_oserror* sprite_output_back_to_screen(void)
{
    _kernel_oserror *e;

    e = _swix(OS_SpriteOp, _INR(0,3),
                           512+SpriteReason_SwitchOutputToSprite,
                           prev1,
                           prev2,
                           prev3);
    free(save_area);
    
    return e;
}


/*---------------------------------------------------------------------------*
 * sprite_return_size                                                        *
 *                                                                           *
 * Return the width and height of a sprite.                                  *
 *                                                                           *
 * In: area -> sprite area containing sprite.                                *
 *     header -> header of sprite we're interested in.                       *
 *                                                                           *
 * On exit: width -> sprite width.                                           *
 *          height -> sprite_height.                                         *
 *---------------------------------------------------------------------------*/

_kernel_oserror* sprite_return_size(void* area, void* header, int* width, int* height)
{
    _kernel_oserror *e;
    int              x, y;
    
    e = _swix(OS_SpriteOp, _INR(0,2)|_OUTR(3,4), 512+SpriteReason_ReadSpriteSize,
                                                 area, header, &x, &y);
    *width = x;
    *height = y;
    
    return e;
}
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
/* File:    c.sprite                                                         */
a22 1

d27 2
d81 1
a81 1
    e=_swix(OS_File, _INR(0,1)|_OUT(0)|_OUT(4), 17, filename, &type, &length);
d107 1
a107 1
    e = _swix(OS_SpriteOp, _INR(0,1), 256+Sprite_Initialise, buffer);
d109 1
a109 1
    if (!e) e = _swix(OS_SpriteOp, _INR(0,2), 256+Sprite_Load, buffer, filename);
d131 1
a131 1
    e = _swix(OS_SpriteOp, _INR(0,2)|_OUT(2), 256+Sprite_Select, buffer,
d157 11
a167 1
    
d174 1
a174 1
                                         16+1,
d187 1
a187 1
                                         16+1);
d209 1
a209 1
                           512+Sprite_SaveAreaSize,
d220 1
a220 1
                           512+Sprite_SwitchOutputToSprite,
d237 1
a237 1
_kernel_oserror* sprite_output_back_to_screen()
d242 1
a242 1
                           512+Sprite_SwitchOutputToSprite,
d269 1
a269 1
    e = _swix(OS_SpriteOp, _INR(0,2)|_OUTR(3,4), 512+Sprite_ReadInformation,
@


1.1.1.1
log
@Initial import of PinSetup plugin for Configure.
@
text
@@


1.1.1.2
log
@Chosen backdrop colour now shows through masked sprites.
Choices file renamed to PinSetup (from Pinboard).
@
text
@d156 1
a156 11
    //void*            palette;

    //e = _swix(OS_SpriteOp, _INR(0,3)|_OUT(3), 512 + Sprite_CreatePalette,
    //                                          area,
    //                                          sprite,
    //                                          -1,
    //                                          &palette);
    //if (e) return e;
    //if (palette == 0) palette=(void*)-1;
    //else palette=sprite;
        
d163 1
a163 1
                                         1+2+16,
d176 1
a176 1
                                         1+2+16);
@


1.1.1.3
log
@* Fixed bug with plotting into sprites in rectangular pixel modes.
* If Try was clicked, Cancel button restores saved state as was before Try.
@
text
@d156 1
a156 1
    /* void*            palette; */
d158 8
a165 8
    /*e = _swix(OS_SpriteOp, _INR(0,3)|_OUT(3), 512 + Sprite_CreatePalette,
                                              area,
                                              sprite,
                                              -1,
                                              &palette);
    if (e) return e;
    if (palette == 0) palette=(void*)-1;
    else palette=sprite; */
@
