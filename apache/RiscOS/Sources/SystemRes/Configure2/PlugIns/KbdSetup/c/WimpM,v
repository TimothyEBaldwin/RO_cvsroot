head	1.2;
access;
symbols
	KbdSetup-0_18:1.2
	KbdSetup-0_17:1.2
	KbdSetup-0_16:1.2
	KbdSetup-0_15:1.2
	KbdSetup-0_14:1.2
	KbdSetup-0_13:1.2
	KbdSetup-0_12:1.1.1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.1
	Ursula_RiscPC:1.1.1.1.0.2
	bavison_KbdSetup-0_11:1.1.1.2
	bavison_KbdSetup-0_10:1.1.1.2
	rthornb_UrsulaBuild-19Aug1998:1.1.1.1
	UrsulaBuild_FinalSoftload:1.1.1.1
	bavison_KbdSetup-0_09:1.1.1.1
	rthornb_UrsulaBuild-29Jul1998:1.1.1.1
	rthornb_UrsulaBuild-22Jul1998:1.1.1.1
	rthornb_UrsulaBuild-15Jul1998:1.1.1.1
	rthornb_UrsulaBuild-07Jul1998:1.1.1.1
	bavison_KbdSetup-0_08:1.1.1.1
	bavison_KbdSetup-0_07:1.1.1.1
	rthornb_UrsulaBuild-17Jun1998:1.1.1.1
	bavison_KbdSetup-0_06:1.1.1.1
	rthornb_UrsulaBuild-03Jun1998:1.1.1.1
	rthornb_UrsulaBuild-27May1998:1.1.1.1
	rthornb_UrsulaBuild-21May1998:1.1.1.1
	rthornb_UrsulaBuild_01May1998:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2002.12.14.13.42.31;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	98.04.07.18.24.48;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.04.07.18.24.48;	author bavison;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.08.28.10.49.57;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Resource file change,now refers to "Macro" keys not "Acorn" keys.
Writeables linked into a circle
Version number incremented in Messages file

Version 0.13. Tagged as 'KbdSetup-0_13'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/******	WimpM.c ***********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Keyboard configuration plug-in
This file:	Wimp message code

History:
Date		Who	Change
----------------------------------------------------------------------------
09/12/1997	BJGA	Split from Main
			Added these headers
10/12/1997	BJGA	Made handler routines static
28/08/1998	BJGA	Added Message_DataLoad handler

\**************************************************************************/

/* Toolbox */
#include "event.h"
#include "toolbox.h"
#include "window.h"
#include "wimplib.h"
/* Common */
#include "misc.h"
/* local headers */
#include "Main.h"
#include "Settings.h"
#include "WimpM.h"  /* includes prototypes for this file */

static int wimpm_quit (WimpMessage *message, void *handle);
static int wimpm_dataload (WimpMessage *message, void *handle);
static int wimpm_openconfigwindow (WimpMessage *message, void *handle);

int wimpm_messages [3] =      { Wimp_MDataLoad,
				Wimp_MOpenConfigWindow,
				0 };

void wimpm_register (void)
{
  throw (event_register_message_handler (Wimp_MQuit, wimpm_quit, NULL));
  throw (event_register_message_handler (Wimp_MDataLoad, wimpm_dataload, NULL));
  throw (event_register_message_handler (Wimp_MOpenConfigWindow, wimpm_openconfigwindow, NULL));
}

/******	wimpm_quit() ******************************************************\

Purpose:	Handles Message_Quit

\**************************************************************************/

static int wimpm_quit (WimpMessage *message, void *handle)
{
  quit = TRUE;
  return 1;
}

/******	wimpm_dataload() **************************************************\

Purpose:	Handles Message_DataLoad

\**************************************************************************/

static int wimpm_dataload (WimpMessage *message, void *handle)
{
  ObjectId    drop_window;
  ComponentId drop_gadget;
  throw (window_wimp_to_toolbox (0, message->data.data_load.destination_window,
      message->data.data_load.destination_icon, &drop_window, &drop_gadget));
  if (drop_window == mainwindow_id)
  {
    switch (drop_gadget)
    {
      case mainwindow_keyalone:
//      case mainwindow_shiftkey:
      case mainwindow_ctrlkey:
//      case mainwindow_ctrlshiftkey:
        if (message->data.data_load.file_type == 0x1000)
        {
          char new_string [1000];
          /* Directories need Filer_OpenDir preprending */
          sprintf (new_string, "Filer_OpenDir %s", message->data.data_load.leaf_name);
          throw (writablefield_set_value (0, drop_window, drop_gadget, new_string));
        }
        else
        {
          throw (writablefield_set_value (0, drop_window, drop_gadget, message->data.data_load.leaf_name));
        }
        /* Reply with Message_DataLoadAck */
        message->hdr.your_ref = message->hdr.my_ref;
        message->hdr.action_code = Wimp_MDataLoadAck;
        throw (wimp_send_message (Wimp_EUserMessage, message, message->hdr.sender, 0, NULL));
    }
  }
  return 1;
}

/******	wimpm_openconfigwindow() ******************************************\

Purpose:	Handles Message_OpenConfigWindow

\**************************************************************************/

static int wimpm_openconfigwindow (WimpMessage *message, void *handle)
{
  misc_openwindow (mainwindow_id, FALSE);
  return 1;
}
@


1.1
log
@Initial revision
@
text
@d27 1
d34 2
d40 1
d44 1
d47 2
a48 1
int wimpm_messages [2] =      { Wimp_MOpenConfigWindow,
d54 1
d67 40
@


1.1.1.1
log
@Initial commit of Configure plug-in '!KbdSetup' to CVS.
@
text
@@


1.1.1.2
log
@Added Win95 keys options - drop-sensitive writable icons for each key action.

Options are now read from / written to Choices.Boot.PreDesktop instead of
Choices.Boot.PreDesk.KbdSetup.

Bugfix: now uses Message_FontChanged to refresh the screen instead of
Wimp_ForceRedraw. This additionally causes the desktop font to be recached
appropriate to the new alphabet.

Bugfix: PC-delete option is now applied even if the choices file is locked.
@
text
@a26 1
28/08/1998	BJGA	Added Message_DataLoad handler
a32 2
#include "window.h"
#include "wimplib.h"
a36 1
#include "Settings.h"
a39 1
static int wimpm_dataload (WimpMessage *message, void *handle);
d42 1
a42 2
int wimpm_messages [3] =      { Wimp_MDataLoad,
				Wimp_MOpenConfigWindow,
a47 1
  throw (event_register_message_handler (Wimp_MDataLoad, wimpm_dataload, NULL));
a59 40
  return 1;
}

/******	wimpm_dataload() **************************************************\

Purpose:	Handles Message_DataLoad

\**************************************************************************/

static int wimpm_dataload (WimpMessage *message, void *handle)
{
  ObjectId    drop_window;
  ComponentId drop_gadget;
  throw (window_wimp_to_toolbox (0, message->data.data_load.destination_window,
      message->data.data_load.destination_icon, &drop_window, &drop_gadget));
  if (drop_window == mainwindow_id)
  {
    switch (drop_gadget)
    {
      case mainwindow_keyalone:
      case mainwindow_shiftkey:
      case mainwindow_ctrlkey:
      case mainwindow_ctrlshiftkey:
        if (message->data.data_load.file_type == 0x1000)
        {
          char new_string [1000];
          /* Directories need Filer_OpenDir preprending */
          sprintf (new_string, "Filer_OpenDir %s", message->data.data_load.leaf_name);
          throw (writablefield_set_value (0, drop_window, drop_gadget, new_string));
        }
        else
        {
          throw (writablefield_set_value (0, drop_window, drop_gadget, message->data.data_load.leaf_name));
        }
        /* Reply with Message_DataLoadAck */
        message->hdr.your_ref = message->hdr.my_ref;
        message->hdr.action_code = Wimp_MDataLoadAck;
        throw (wimp_send_message (Wimp_EUserMessage, message, message->hdr.sender, 0, NULL));
    }
  }
@
