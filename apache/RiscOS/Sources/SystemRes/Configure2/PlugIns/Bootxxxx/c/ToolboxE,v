head	1.2;
access;
symbols
	Bootxxxx-0_15:1.2
	Bootxxxx-0_14:1.2
	Bootxxxx-0_13:1.2
	Bootxxxx-0_12:1.2
	Bootxxxx-0_11:1.1.1.2
	Bootxxxx-0_10:1.1.1.2
	Bootxxxx-0_09:1.1.1.2
	Bootxxxx-0_08:1.1.1.2
	Bootxxxx-0_07:1.1.1.2
	Bootxxxx-0_06:1.1.1.2
	Bootxxxx-0_05:1.1.1.2
	Bootxxxx-0_04:1.1.1.2
	Bootxxxx-0_03:1.1.1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.2
	Ursula_RiscPC:1.1.1.2.0.2
	rthornb_UrsulaBuild-19Aug1998:1.1.1.2
	UrsulaBuild_FinalSoftload:1.1.1.2
	rthornb_UrsulaBuild-29Jul1998:1.1.1.2
	rthornb_UrsulaBuild-22Jul1998:1.1.1.2
	rthornb_UrsulaBuild-15Jul1998:1.1.1.2
	rthornb_UrsulaBuild-07Jul1998:1.1.1.2
	bavison_Bootxxxx-0_02:1.1.1.2
	bavison_Bootxxxx-0_01:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2012.11.28.11.22.42;	author rgriffin;	state Exp;
branches;
next	1.1;
commitid	tKeEfVcg1WUr18uw;

1.1
date	98.06.23.11.29.54;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.06.23.11.29.54;	author bavison;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.07.02.12.45.36;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fixed data abort in Bootxxxx plugin

Version 0.12. Tagged as 'Bootxxxx-0_12'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/******	ToolboxE.c ********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	BootApps/BootBoot/BootRun
This file:	Toolbox event code

History:
Date		Who	Change
----------------------------------------------------------------------------
10/06/1998	BJGA	Created
11/06/1998	BJGA	Implemented Cancel action button handler and
			DCS Discard button and DialogueCompleted handlers
16/06/1998	BJGA	Implemented Select-all and Clear-selection button
			handlers; reads list from disc again on Adjust-Cancel
18/06/1998	BJGA	Implemented Remove-selection button handler.
19/06/1998	BJGA	Implemented "Set" buttons in main window and DCS box
02/07/1998	BJGA	Removed responsibility for broadcasting Message_PlugInQuitAbort.
			Moved resetting of ToolboxE_DCS_Action from DCS_DialogueCompleted
			event to DCS_AboutToBeShown; IgnoreNextDCSDialogueCompleted
			variable no longer needed.

\**************************************************************************/

/* Toolbox */
#include "event.h"
#include "wimplib.h"
#include "toolbox.h"
#include "dcs.h"
#include "gadgets.h"
/* ConfigureLib */
#include "misc.h"
/* Local headers */
#include "List.h"
#include "Main.h"
#include "ToolboxE.h"
#include "WimpM.h"

static	unsigned int	LastActionButtonFlags = 0;
	int		ToolboxE_DCS_Action = 0; /* 1 => desktop shutdown, 2 => plug-in quit */
static	int		This_DCS_Action; /* internal use only */

static int static_ActionButtonSelected (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static int static_DCSAboutToBeShown (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static int static_DCSDiscard (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static int static_DCSSave (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static void static_Cancel (int buttons);

int ToolboxE_Events [5] =     { ActionButton_Selected,
				DCS_AboutToBeShown,
				DCS_Discard,
				DCS_Save,
				0 };

void ToolboxE_Register (void)
{
  throw (event_register_toolbox_handler (-1, ActionButton_Selected, static_ActionButtonSelected, NULL));
  throw (event_register_toolbox_handler (-1, DCS_AboutToBeShown, static_DCSAboutToBeShown, NULL));
  throw (event_register_toolbox_handler (-1, DCS_Discard, static_DCSDiscard, NULL));
  throw (event_register_toolbox_handler (-1, DCS_Save, static_DCSSave, NULL));
}

/******	static_ActionButtonSelected() *************************************\

Purpose:	Handles ActionButton_Selected event

\**************************************************************************/

static int static_ActionButtonSelected (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  if (id_block->self_id == Window_Obj)
  {
    switch (id_block->self_component)
    {
      case Window_REMOVE:
        List_RemoveSelection ();
        break;

      case Window_ALL:
        List_SetAll (TRUE);
        break;

      case Window_CLEAR:
        List_SetAll (FALSE);
        break;

      case Window_SET:
        throw( List_Write (event->hdr.flags));
        break;

      case Window_CANCEL:
        if (Modified)
        {
          LastActionButtonFlags = event->hdr.flags;
          throw (toolbox_show_object (Toolbox_ShowObject_AsMenu, DCS_Obj, Toolbox_ShowObject_Centre,
              NULL, NULL_ObjectId, NULL_ComponentId));
        }
        else
        {
          static_Cancel (event->hdr.flags);
        }
        break;
    }
  }
  return 1;
}

/******	static_DCSAboutToBeShown() ****************************************\

Purpose:	Handles DCS_AboutToBeShown event

\**************************************************************************/

static int static_DCSAboutToBeShown (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  This_DCS_Action = ToolboxE_DCS_Action;
  ToolboxE_DCS_Action = 0; /* will apply next time, unless specified otherwise */
  return 1;
}

/******	static_DCSDiscard() ***********************************************\

Purpose:	Handles DCS_Discard event

\**************************************************************************/

static int static_DCSDiscard (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  WimpPollBlock block;

  switch (This_DCS_Action)
  {
    case 0: /* Normal case - equivalent to Cancel */
      static_Cancel (LastActionButtonFlags);
      break;

    case 1: /* Desktop shutdown - equivalent to Cancel + generate hotkey */
      static_Cancel (LastActionButtonFlags);
      block.key_pressed.key_code = 0x1FC; /* Ctrl-Shift-F12 */
      throw (wimp_send_message (Wimp_EKeyPressed, &block, WimpM_Sender, 0, NULL));
      break;

    case 2: /* Plug-in quit - restart process, don't complain next time */
      block.user_message.hdr.size = 24;
      block.user_message.hdr.your_ref = 0;
      block.user_message.hdr.action_code = Wimp_MPlugInQuitContinue;
      block.user_message.data.words [0] = WimpM_SenderDescriptor;
      throw (wimp_send_message (Wimp_EUserMessage, &block, WimpM_Sender, 0, NULL));
      Complain = FALSE;
      break;
  }
  return 1;
}

/******	static_DCSSave() **************************************************\

Purpose:	Handles DCS_Save event

\**************************************************************************/

static int static_DCSSave (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  WimpPollBlock block;
  _kernel_oserror *err;

  /* Fake a click on "Set" */
  err = List_Write (LastActionButtonFlags);

  switch (This_DCS_Action)
  {
    case 0: /* Normal case - no further action required */
      break;

    case 1: /* Desktop shutdown - if no error, generate hotkey */
      if (!err)
      {
        block.key_pressed.key_code = 0x1FC; /* Ctrl-Shift-F12 */
        throw (wimp_send_message (Wimp_EKeyPressed, &block, WimpM_Sender, 0, NULL));
      }
      break;

    case 2: /* Plug-in quit - if no error, send PlugInQuitContinue */
      if (!err)
      {
        block.user_message.hdr.size = 24;
        block.user_message.hdr.your_ref = 0;
        block.user_message.hdr.action_code = Wimp_MPlugInQuitContinue;
        block.user_message.data.words [0] = WimpM_SenderDescriptor;
        throw (wimp_send_message (Wimp_EUserMessage, &block, WimpM_Sender, 0, NULL));
      }
      break;
  }

  /* Throw the error returned from List_Write */
  throw (err);

  return 1;
}

/******	static_Cancel() ***************************************************\

Purpose:	Performs the actions of a click on the Cancel action button
		without opening DCS box
In:		Mouse button state of click

\**************************************************************************/

void static_Cancel (int buttons)
{
  LastActionButtonFlags = buttons;
  if (0 == (buttons & ActionButton_Selected_Adjust))
  {
    Quit = TRUE;
  }
  else
  {
    /* Restore list from disc */
    throw (List_Read (FALSE));

    /* Update modified flag */
    if (Modified)
    {
      throw (window_set_title (0, Window_Obj, Title_Unmodified));
      Modified = FALSE;
    }
  }
}
@


1.1
log
@Initial revision
@
text
@d31 4
a52 1
static	BOOL		IgnoreNextDCSDialogueCompleted = FALSE;
d54 1
d57 1
a59 1
static int static_DCSDialogueCompleted (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
d63 1
a65 1
				DCS_DialogueCompleted,
d71 1
a73 1
  throw (event_register_toolbox_handler (-1, DCS_DialogueCompleted, static_DCSDialogueCompleted, NULL));
d91 1
a91 1
        
d95 1
a95 1
        
d99 1
a99 1
        
d101 1
a101 1
        List_Write (event->hdr.flags);
d103 1
a103 1
        
d121 13
d143 2
a144 6
  int tda = ToolboxE_DCS_Action;
  
  IgnoreNextDCSDialogueCompleted = TRUE;
  ToolboxE_DCS_Action = 0; /* set now in case an error occurs */
  
  switch (tda)
d149 1
a149 1
      
d155 1
a155 1
      
a176 1
  int tda = ToolboxE_DCS_Action;
d178 1
a178 4
  
  IgnoreNextDCSDialogueCompleted = TRUE;
  ToolboxE_DCS_Action = 0; /* set now in case an error occurs */
  
d181 2
a182 2
  
  switch (tda)
d186 1
a186 1
      
d194 2
a195 2
      
    case 2: /* Plug-in quit - if no error, send PlugInQuitContinue, else broadcast PlugInQuitAbort */
a203 8
      else
      {
        block.user_message.hdr.size = 24;
        block.user_message.hdr.your_ref = 0;
        block.user_message.hdr.action_code = Wimp_MPlugInQuitAbort;
        block.user_message.data.words [0] = WimpM_SenderDescriptor;
        throw (wimp_send_message (Wimp_EUserMessage, &block, 0, 0, NULL));
      }
d206 1
a206 1
  
a208 5
  
  return 1;
}

/******	static_DCSDialogueCompleted() *************************************\
a209 24
Purpose:	Handles DCS_DialogueCompleted event

\**************************************************************************/

static int static_DCSDialogueCompleted (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  BOOL inddc = IgnoreNextDCSDialogueCompleted;
  IgnoreNextDCSDialogueCompleted = FALSE; /* set now in case an error occurs */
  
  if (inddc == FALSE)
  {
    WimpMessage block;
    if (ToolboxE_DCS_Action == 2)
    {
      /* Broadcast Message_PlugInQuitAbort */
      block.hdr.size = 24;
      block.hdr.your_ref = 0;
      block.hdr.action_code = Wimp_MPlugInQuitAbort;
      block.data.words [0] = WimpM_SenderDescriptor;
      throw (wimp_send_message (Wimp_EUserMessage, &block, 0, 0, NULL));
    }
    
    ToolboxE_DCS_Action = 0;
  }
d232 1
a232 1
    
@


1.1.1.1
log
@
Initial import of Configure plug-ins '!BootApps', '!BootBoot' and '!BootRun'
to CVS.

Note that all three plug-ins plug in to !BootSetup, and they also share
source code.
@
text
@@


1.1.1.2
log
@Fixed event ordering problems that became apparent when click-type window tools
were re-enabled in the Wimp. This involves a subtle alteration to the plug-in
quit protocol.
@
text
@a30 4
02/07/1998	BJGA	Removed responsibility for broadcasting Message_PlugInQuitAbort.
			Moved resetting of ToolboxE_DCS_Action from DCS_DialogueCompleted
			event to DCS_AboutToBeShown; IgnoreNextDCSDialogueCompleted
			variable no longer needed.
d49 1
a50 1
static	int		This_DCS_Action; /* internal use only */
a52 1
static int static_DCSAboutToBeShown (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
d55 1
a58 1
				DCS_AboutToBeShown,
d61 1
a66 1
  throw (event_register_toolbox_handler (-1, DCS_AboutToBeShown, static_DCSAboutToBeShown, NULL));
d69 1
a116 13
/******	static_DCSAboutToBeShown() ****************************************\

Purpose:	Handles DCS_AboutToBeShown event

\**************************************************************************/

static int static_DCSAboutToBeShown (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  This_DCS_Action = ToolboxE_DCS_Action;
  ToolboxE_DCS_Action = 0; /* will apply next time, unless specified otherwise */
  return 1;
}

d126 4
d131 1
a131 1
  switch (This_DCS_Action)
d164 1
d167 3
d173 1
a173 1
  switch (This_DCS_Action)
d186 1
a186 1
    case 2: /* Plug-in quit - if no error, send PlugInQuitContinue */
d195 8
d209 29
@
