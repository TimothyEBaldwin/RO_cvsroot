head	1.2;
access;
symbols
	HelpSetup-0_14:1.2
	HelpSetup-0_13:1.2
	HelpSetup-0_12:1.2
	HelpSetup-0_11:1.2
	HelpSetup-0_10:1.2
	HelpSetup-0_09:1.2
	HelpSetup-0_08:1.1.1.1
	HelpSetup-0_07:1.1.1.1
	HelpSetup-0_06:1.1.1.1
	HelpSetup-0_05:1.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.1
	Ursula_RiscPC:1.1.1.1.0.2
	rleggett_HelpSetup-0_04b:1.1.1.1
	rthornb_UrsulaBuild-19Aug1998:1.1.1.1
	UrsulaBuild_FinalSoftload:1.1.1.1
	rthornb_UrsulaBuild-29Jul1998:1.1.1.1
	rthornb_UrsulaBuild-22Jul1998:1.1.1.1
	rthornb_UrsulaBuild-15Jul1998:1.1.1.1
	rthornb_UrsulaBuild-07Jul1998:1.1.1.1
	rthornb_UrsulaBuild-17Jun1998:1.1.1.1
	rleggett_HelpSetup-0_04:1.1.1.1
	rthornb_UrsulaBuild-03Jun1998:1.1.1.1
	rthornb_UrsulaBuild-27May1998:1.1.1.1
	rthornb_UrsulaBuild-21May1998:1.1.1.1
	rthornb_UrsulaBuild_01May1998:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2012.02.11.18.23.51;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	SQn7CZVvOWHRHLSv;

1.1
date	98.04.14.10.37.14;	author rleggett;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.04.14.10.37.14;	author rleggett;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Updated to use central HelpEnable wimp message.
Remove excess/duplicated include files.
Get error box title from "_TaskName" token in messages file.
Use Mask_NoNullEvents/Gadget_Faded flag from toolbox headers.
Use OSFile 8 to create directories not OS_CLI.
Code in 'common.[c|h]' made more common.

Version 0.09. Tagged as 'HelpSetup-0_09'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*---------------------------------------------------------------------------*/
/* File:    common.c                                                         */
/* Purpose: Commonly used Wimp routines                                      */
/*---------------------------------------------------------------------------*/
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "wimplib.h"
#include "toolbox.h"
#include "swis.h"
#include "common.h"

/* Global messages file descriptor and string pointer */
MessagesFD    *message_block;
char          *message_buffer;


/*---------------------------------------------------------------------------*
 * error_trap                                                                *
 *                                                                           *
 * Wrap around a function to report an error if one occurred eg.:            *
 *  error_trap(event_initialise(&idb), 0);                                   *
 *                                                                           *
 * In: err - a kernel_oserror block                                          *
 *     type - 0 means non-fatal, otherwise program will exit after reporting *
 *---------------------------------------------------------------------------*/

void error_trap(_kernel_oserror *err, int err_type)
{
    /* Report the appropriate error, has one occured */
    if (err != NULL)
    {
        wimp_report_error(err, 0, messages_lookup("_TaskName"), 0, 0, 0);
  
        /* Now, if it was a fatal error (type != 0), exit at once */
        if (err_type != 0) exit(0);
    }
}


/*---------------------------------------------------------------------------*
 * messages_register                                                         *
 *                                                                           *
 * Registers the message file descriptor with the library so that it knows   *
 * where to find the message block for lookups.                              *
 *                                                                           *
 * In:                                                                       *
 *---------------------------------------------------------------------------*/

void messages_register(MessagesFD *messagefd_point, char *messagebuff_point)
{
  message_block = messagefd_point;
  message_buffer = messagebuff_point;
}


/*---------------------------------------------------------------------------*
 * messages_lookup                                                           *
 *                                                                           *
 * Searches the 'messages' file for the text represented by the token string *
 * and returns a pointer to a buffer storing this text                       *
 *                                                                           *
 * In:                                                                       *
 *---------------------------------------------------------------------------*/

char *messages_lookup(const char *token_string)
{
  _kernel_swi_regs regs;

  regs.r[0] = (int)message_block;
  regs.r[1] = (int)token_string;
  regs.r[2] = (int)message_buffer;
  regs.r[3] = 255;
  _kernel_swi(MessageTrans_Lookup, &regs, &regs);
    
  return message_buffer;
}


char *messages_lookup_with_parameter(char *token_string, char *parameter)
{
  _kernel_swi_regs regs;

  regs.r[0] = (int)message_block;
  regs.r[1] = (int)token_string;
  regs.r[2] = (int)message_buffer;
  regs.r[3] = 255;
  regs.r[4] = (int)parameter;
  _kernel_swi(MessageTrans_Lookup, &regs, &regs);
    
  return message_buffer;
}


/*---------------------------------------------------------------------------*
 * common_read_screensize                                                    *
 *                                                                           *
 * Return the size of the screen in OS units                                 *
 *---------------------------------------------------------------------------*/

_kernel_oserror *common_read_screensize(int *x, int *y)
{
    _kernel_oserror *e;
    int              xeig, yeig, xpix, ypix;

    e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &xeig); if (e) return e;
    e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &yeig); if (e) return e;
    e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 11, &xpix); if (e) return e;
    e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 12, &ypix); if (e) return e;

    *x = xpix << xeig;
    *y = ypix << yeig;

    return NULL;
}
    

/*---------------------------------------------------------------------------*
 * common_error                                                              *
 *                                                                           *
 * Given a string, return a kernel_oserror compatible error.                 *
 *---------------------------------------------------------------------------*/

_kernel_oserror *common_error(char *s)
{
    static _kernel_oserror e;
    e.errnum=0;
    strcpy(e.errmess, s);
    
    return &e;
}


/*---------------------------------------------------------------------------*
 * strncmpa                                                                  *
 *                                                                           *
 * Compare n letters of a string, case insensitive.                          *
 *                                                                           *
 * In: str1 -> first string                                                  *
 *     str2 -> second string                                                 *
 *     size = number of characters to compare.                               *
 *                                                                           *
 * Returns: 0 if strings equal, otherwise number of characters they differ   *
 *          by.                                                              *
 *---------------------------------------------------------------------------*/
 
int strncmpa(char *str1, char *str2, int size)
{
    int n;
    int equal=size;
    
    for (n=0; n<size; n++)
    {
        if (str1[n]==str2[n]) equal--;
        else if (str1[n]==str2[n]-32) equal--;
        else if (str1[n]-32==str2[n]) equal--;
    }

    return equal;
}


/*---------------------------------------------------------------------------*
 * read_cmos_value                                                           *
 *                                                                           *
 * Read a byte of CMOS ram                                                   *
 *                                                                           *
 * In: location = CMOS location to read                                      *
 *                                                                           *
 * Returns: contents of location.                                            *
 *---------------------------------------------------------------------------*/

int read_cmos_value(int location)
{
    int result;
    _swix(OS_Byte, _INR(0,1)|_OUT(2), 161, location, &result);
    return result;
}
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
/* File:    c.common                                                         */
a17 2
/* Author:  Richard Leggett                                                  */
/* History: 28-Oct-97: RML: Begun (some routines nicked from PhotoQV)        */
a18 1

a21 1
#include "wimp.h"
a23 1
#include "gadgets.h"
d25 1
a25 3
#include "defines.h"

#define Flag_GadgetFaded 1u<<31
d47 1
a47 1
        wimp_report_error(err, 0, TaskName, 0, 0, 0);
d80 1
a80 1
char* messages_lookup(char *token_string)
d89 16
d112 1
a112 1
 * Return the size of rhe screen in OS units                                 *
d115 1
a115 1
_kernel_oserror* common_read_screensize(int* x, int* y)
d117 1
a117 1
    _kernel_oserror* e;
d138 1
a138 1
_kernel_oserror* common_error(char *s)
a148 38
 * grey_gadget                                                               *
 *                                                                           *
 * Grey a a gadget.                                                          *
 *                                                                           *
 * In: objectid = ID of the object containing the gadget.                    *
 *     gadgetid = ID of the gadget.                                          *
 *---------------------------------------------------------------------------*/

void grey_gadget(int objectid, int gadgetid)
{
    unsigned int flags;

    error_trap(gadget_get_flags(0, objectid, gadgetid, &flags), 0);
    flags=flags | Flag_GadgetFaded;
    error_trap(gadget_set_flags(0, objectid, gadgetid, flags), 0);
}


/*---------------------------------------------------------------------------*
 * ungrey_gadget                                                             *
 *                                                                           *
 * Ungrey a a gadget.                                                        *
 *                                                                           *
 * In: objectid = ID of the object containing the gadget.                    *
 *     gadgetid = ID of the gadget.                                          *
 *---------------------------------------------------------------------------*/

void ungrey_gadget(int objectid, int gadgetid)
{
    unsigned int flags;

    error_trap(gadget_get_flags(0, objectid, gadgetid, &flags), 0);
    if (flags & Flag_GadgetFaded) flags=flags^Flag_GadgetFaded;
    error_trap(gadget_set_flags(0, objectid, gadgetid, flags), 0);
}


/*---------------------------------------------------------------------------*
d161 1
a161 1
int strncmpa(char* str1, char* str2, int size)
a192 1

@


1.1.1.1
log
@Initial import of HelpSetup plugin for Configure.
@
text
@@
