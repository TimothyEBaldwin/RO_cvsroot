head	1.5;
access;
symbols
	Main-2_12:1.5
	Main-2_11:1.4
	Main-2_10:1.3
	Main-2_09:1.2
	Main-2_08:1.1.1.2
	Main-2_07:1.1.1.2
	Main-2_06:1.1.1.2
	Main-2_05:1.1.1.2
	Main-2_04:1.1.1.2
	Main-2_03:1.1.1.2
	Main-2_02:1.1.1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.2
	Ursula_RiscPC:1.1.1.2.0.2
	rthornb_UrsulaBuild-19Aug1998:1.1.1.2
	UrsulaBuild_FinalSoftload:1.1.1.2
	rthornb_UrsulaBuild-12Aug1998:1.1.1.2
	aglover_UrsulaBuild-05Aug1998:1.1.1.2
	bavison_Configure-2_01:1.1.1.2
	rthornb_UrsulaBuild-29Jul1998:1.1.1.2
	bavison_Configure-2_00:1.1.1.2
	rthornb_UrsulaBuild-22Jul1998:1.1.1.1
	rthornb_UrsulaBuild-15Jul1998:1.1.1.1
	rthornb_UrsulaBuild-07Jul1998:1.1.1.1
	bavison_Configure-0_17:1.1.1.1
	rthornb_UrsulaBuild-17Jun1998:1.1.1.1
	rthornb_UrsulaBuild-03Jun1998:1.1.1.1
	rthornb_UrsulaBuild-27May1998:1.1.1.1
	rthornb_UrsulaBuild-21May1998:1.1.1.1
	bavison_Configure-0_16:1.1.1.1
	rthornb_UrsulaBuild_01May1998:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2016.07.28.21.40.36;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	V0phLURig2XVq8gz;

1.4
date	2014.07.23.22.24.06;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	yqvYVAJAvLlCkyJx;

1.3
date	2013.12.07.09.29.46;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	u6q2m3hAZLgmnbgx;

1.2
date	2013.11.24.15.09.54;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	W0eYHX4PpQhXFxex;

1.1
date	98.04.06.13.21.39;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.04.06.13.21.39;	author bavison;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.07.28.08.53.03;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Offer CMOS defaults when the kernel knows what they are
Since 2013 (ref ticket #316) we stopped including a ResetCMOS file in the ROxxxHook directory because the numerous HAL based targets meant it wasn't possible to define a safe set of defaults for all hardware.
However, the result of that is the the 'CMOS/Default' menu entry in !Configure is never enabled (unless the OEM provides an overriding ResetCMOS themselves).
Query the kernel, and is the OS_NVMemory reason code to read the defaults from the OS is available, reenable the 'CMOS/Default' menu entry, and when the time comes simply transfer those defaults by writing them back.
Main.c/Main.h:
  New flag for OS_NVMemory 6 being available
Plugin.c:
  Use symbols for OS_File & OS_GBPB
ToolboxE.c:
  Offer defaults, and copy them, if ResetCMOS isn't found

Problem spotted while reviewing the User Guide's configure chapter.

Version 2.12. Tagged as 'Main-2_12'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/******	Main.c ************************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Configure central application
This file:	Overall control

History:
Date		Who	Change
----------------------------------------------------------------------------
10/12/1997	BJGA	Split into Main, Calc, Plugin, State, ToolboxE,
			  WimpE & WimpM
			Added these headers
24/07/1998	BJGA	When checking for an existing invocation of Configure,
			  now checks if it was a Ursula version, and if so,
			  sends it a Message_OpenConfigWindow to force its
			  main window to the top of the stack.

\**************************************************************************/

/* CLib */
#include <stdlib.h>
#include <string.h>
#include "swis.h"
/* Toolbox */
#include "event.h"
#include "wimplib.h"
#include "toolbox.h"
/* Common */
#include "error.h"
#include "message.h"
#include "misc.h"
#include "str.h"
/* local headers */
#include "Main.h"  /* includes prototypes for this file */
#include "Plugin.h"
#include "Selector.h"
#include "ToolboxE.h"
#include "WimpE.h"
#include "WimpM.h"

#ifdef TIMING  /* For optimisation purposes */
#include <stdio.h>
static int t0;
static FILE *f;
#endif

#define	WimpVersion	((int) 310)

/* Global variables */

	BOOL		quit = FALSE;
	ObjectId	menu_id = -1;
	ObjectId	cmosmenu_id = -1;
	ObjectId	proginfo_id = -1;
	ObjectId	pluginmenu_id = -1;
	MessagesFD	messages;
	int		thandle;
	BOOL		configure_seen;
	BOOL		got_nvm_defaults;
	int		openat_x = -1, openat_y = -1;

/* Static global variables */

static	WimpPollBlock	poll_block;
static	IdBlock		id_block;

/* Prototypes */

static void checkinvocations (void);
static void end (void);

/******	main() ************************************************************\

In:		Command line option:
		  -openat x y
		    specifies initial position to open window at

\**************************************************************************/

int main (int argc, char *argv[])
{
  /* Have we been passed any co-ordinates to open at? */
  if ((argc >= 4) && (strcmp (argv[1], "-openat") == 0))
  {
    openat_x = atoi (argv[2]);
    openat_y = atoi (argv[3]);
  }
  error_initialise ();
#ifdef TIMING
  t0 = _swi (OS_ReadMonotonicTime, _RETURN(0));
#endif
  throw (toolbox_initialise (0, WimpVersion, wimpm_messages, toolboxe_events,
    "<Configure$Dir>", &messages, &id_block, NULL, &thandle, NULL));
  _swi (Hourglass_On, 0);
  checkinvocations ();
  got_nvm_defaults = _swix (OS_NVMemory, _INR(0,1), 6, 1 /* any */) == NULL;
  configure_seen = (BOOL) getenv ("Configure$Seen");
  _swi (OS_CLI, _IN(0), (int) "Set Configure$Seen 1");
  throw (event_initialise (&id_block));
  throw (event_set_mask (wimpe_mask));
//
  wimpm_register ();
  wimpe_register ();
  toolboxe_register ();
//
  plugin_scan ();
  atexit (end);
  _swi (Hourglass_Off, 0);
#ifdef TIMING
  f = fopen ("$.ConfigTime", "w");
  fprintf (f, "Configure initialised in %i cs\n", _swi (OS_ReadMonotonicTime, _RETURN(0)) - t0);
  fclose (f);
#endif
//
  error_recover_point();
  while (!quit)
  {
    throw (event_poll (NULL, &poll_block, NULL));
  }
  exit (EXIT_SUCCESS);
}

/******	checkinvocations() ************************************************\

Purpose:	Ensures only one copy of Configure is active at once

\**************************************************************************/

static void checkinvocations (void)
{
  int buffer [4], r0 = 0;
  char taskname [2] [32];
  char sprite [13];
  message_lookup_buffer(taskname[1],messages,"_TaskName");
  message_lookup_buffer(sprite,messages,"_ConfigSprite");
  while (r0 >= 0)
  {
    r0 = _swi (TaskManager_EnumerateTasks, _INR(0,2)|_RETURN(0), r0, buffer, sizeof (buffer));
    str_ncpy (taskname [0], (char *) buffer [1], sizeof (taskname [0]));
    if (strcmp (taskname [0], taskname [1]) == 0)
    {
      char term = *( str_len (taskname [0]) + (char *) buffer [1]); /* original terminator char */
      if (term == '\0')
      {
        /* It was the old !Configure - report error and exit */
        _kernel_oserror err_multi = { 0, "Err_Multi" };
        wimp_report_error (
          (_kernel_oserror *) _swix (MessageTrans_ErrorLookup, _INR(0,7)|_RETURN(0), (int) &err_multi, (int) &messages, 0, 0, 0, 0, 0, 0),
          Wimp_ReportError_Cancel | 1u << 8 | 2u << 9,
          taskname [1], sprite, (void *) 1, 0);
      }
      else
      {
        /* It was the new !Configure - send it a Message_OpenConfigWindow and exit */
        WimpMessage mess;
        mess.hdr.size = 20;
        mess.hdr.your_ref = 0;
        mess.hdr.action_code = Wimp_MOpenConfigWindow;
        throw (wimp_send_message (Wimp_EUserMessage, &mess, buffer [0], 0, NULL));
        _swi (Hourglass_Off, 0);
      }
      exit (EXIT_FAILURE);
    }
  }
}

/******	end() *************************************************************\

Purpose:	Tidies up at exit

\**************************************************************************/

static void end (void)
{
  selector_finalise (plugin_selector);
  free (plugin_text);
  free (plugin_list);
}
@


1.4
log
@Makefile recreated from fragments
Get version number from messages file.

Version 2.11. Tagged as 'Main-2_11'
@
text
@d73 1
d110 1
@


1.3
log
@Minor !Configure changes
The load/save/default CMOS options are now placed in a submenu.
Submission from William Harden.
While the bonnet is up, add search for international messages files for plugin.
Fixes ticket #367.

Built, and tested briefly in UK territory.

Version 2.10. Tagged as 'Main-2_10'
@
text
@a67 1
	ObjectId	infomenu_id = -1;
@


1.2
log
@Make plugin help context sensitive
Rather than present a large menu of info boxes, act like the filer and just offer the one info box over which the mouse click was.
Add support for "-openat" switch like the plugins themselves.
Submission from William Harden.

Version 2.09. Tagged as 'Main-2_09'
@
text
@a65 1
	ObjectId	savecmos_id = -1;
d67 1
@


1.1
log
@Initial revision
@
text
@d27 4
d70 1
d74 1
d96 6
d129 2
a130 1
  while (!quit) {
d149 2
a150 1
  while (r0 >= 0) {
d153 22
a174 6
    if (strcmp (taskname [0], taskname [1]) == 0) {
      _kernel_oserror err_multi = { 0, "Err_Multi" };
      wimp_report_error (
        (_kernel_oserror *) _swix (MessageTrans_ErrorLookup, _INR(0,7)|_RETURN(0), (int) &err_multi, (int) &messages, 0, 0, 0, 0, 0, 0),
        Wimp_ReportError_Cancel | 1u << 8 | 2u << 9,
        taskname [1], sprite, (void *) 1, 0);
@


1.1.1.1
log
@Initial checkin of main Configure application to CVS.
@
text
@@


1.1.1.2
log
@Re-running Configure while it's still active now forces the main window of the
existing application to the top of the window stack, instead of bringing up an
error box.

Increased version number to 2.00 to avoid clashes with old !Configure apps.
@
text
@a26 4
24/07/1998	BJGA	When checking for an existing invocation of Configure,
			  now checks if it was a Ursula version, and if so,
			  sends it a Message_OpenConfigWindow to force its
			  main window to the top of the stack.
d136 1
a136 2
  while (r0 >= 0)
  {
d139 6
a144 22
    if (strcmp (taskname [0], taskname [1]) == 0)
    {
      char term = *( str_len (taskname [0]) + (char *) buffer [1]); /* original terminator char */
      if (term == '\0')
      {
        /* It was the old !Configure - report error and exit */
        _kernel_oserror err_multi = { 0, "Err_Multi" };
        wimp_report_error (
          (_kernel_oserror *) _swix (MessageTrans_ErrorLookup, _INR(0,7)|_RETURN(0), (int) &err_multi, (int) &messages, 0, 0, 0, 0, 0, 0),
          Wimp_ReportError_Cancel | 1u << 8 | 2u << 9,
          taskname [1], sprite, (void *) 1, 0);
      }
      else
      {
        /* It was the new !Configure - send it a Message_OpenConfigWindow and exit */
        WimpMessage mess;
        mess.hdr.size = 20;
        mess.hdr.your_ref = 0;
        mess.hdr.action_code = Wimp_MOpenConfigWindow;
        throw (wimp_send_message (Wimp_EUserMessage, &mess, buffer [0], 0, NULL));
        _swi (Hourglass_Off, 0);
      }
@
