head	1.1;
branch	1.1.1;
access;
symbols
	Main-2_12:1.1.1.2
	Main-2_11:1.1.1.2
	Main-2_10:1.1.1.2
	Main-2_09:1.1.1.2
	Main-2_08:1.1.1.2
	Main-2_07:1.1.1.2
	Main-2_06:1.1.1.2
	Main-2_05:1.1.1.2
	Main-2_04:1.1.1.2
	Main-2_03:1.1.1.2
	Main-2_02:1.1.1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.1.2
	Ursula_RiscPC:1.1.1.2.0.2
	rthornb_UrsulaBuild-19Aug1998:1.1.1.2
	UrsulaBuild_FinalSoftload:1.1.1.2
	rthornb_UrsulaBuild-12Aug1998:1.1.1.2
	aglover_UrsulaBuild-05Aug1998:1.1.1.2
	bavison_Configure-2_01:1.1.1.2
	rthornb_UrsulaBuild-29Jul1998:1.1.1.2
	bavison_Configure-2_00:1.1.1.2
	rthornb_UrsulaBuild-22Jul1998:1.1.1.2
	rthornb_UrsulaBuild-15Jul1998:1.1.1.2
	rthornb_UrsulaBuild-07Jul1998:1.1.1.2
	bavison_Configure-0_17:1.1.1.2
	rthornb_UrsulaBuild-17Jun1998:1.1.1.1
	rthornb_UrsulaBuild-03Jun1998:1.1.1.1
	rthornb_UrsulaBuild-27May1998:1.1.1.1
	rthornb_UrsulaBuild-21May1998:1.1.1.1
	bavison_Configure-0_16:1.1.1.1
	rthornb_UrsulaBuild_01May1998:1.1.1.1
	initial:1.1.1.1
	Ursula:1.1.1;
locks; strict;
comment	@# @;


1.1
date	98.04.06.13.21.39;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.04.06.13.21.39;	author bavison;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.07.02.12.40.26;	author bavison;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/******	State.c ***********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Configure central application
This file:	Routines governing program state

History:
Date		Who	Change
----------------------------------------------------------------------------
10/12/1997	BJGA	Split from Main
			Added these headers
15/12/1997	BJGA	Message_FSLockStateChangeConfirm is now broadcast
15/01/1998	BJGA	Delegated menu item fading/unfading to Menu_AboutToBeShown event handler
02/02/1998	BJGA	Message_PlugInQuit now uses PlugInSystem_Configure macro

\**************************************************************************/

/* CLib */
#include <string.h>
/* Toolbox */
#include "wimplib.h"
#include "toolbox.h"
#include "menu.h"
/* Common */
#include "misc.h"
#include "message.h"
/* local headers */
#include "Main.h"
#include "Plugin.h"
#include "Selector.h"
#include "State.h"  /* includes prototypes for this file */

BOOL state_quitduetolocking =	FALSE;
int state_locked =		0;

/******	state_quit() ******************************************************\

Purpose:	Starts a negotiated quit
In:		Whether to flag quit as having been caused by actiavtion
		  of FSLock (in which case, the main app and the Lock
		  plug-in mustn't be quit at the end of the process)

\**************************************************************************/

void state_quit (BOOL duetolocking)
{
  state_quitduetolocking = duetolocking;
  state_resumequit ();
}

/******	state_resumequit() ************************************************\

Purpose:	As state_quit, but preserving old flag

\**************************************************************************/

void state_resumequit (void)
{
  WimpMessage buffer;
  buffer.hdr.size = 24;
  buffer.hdr.your_ref = 0;
  buffer.hdr.action_code = Wimp_MPlugInQuit;
  buffer.data.words [0] = PlugInSystem_Configure;
  throw (wimp_send_message (18, &buffer, 0, 0, NULL));  
}

/******	state_lock() ******************************************************\

Purpose:	Actually adjusts for a new FSLock state.
		Icons are faded/unfaded as necessary, and plug-ins are
		quit if appropriate.
In:		New FSLock level

\**************************************************************************/

void state_lock (int level)
{
  int plugin;
  WimpMessage buffer;
  char lockapp [40];
  message_lookup_buffer(lockapp,messages,"LockApp");
  state_locked = (level == 2);
  
  buffer.hdr.size = 20;
  buffer.hdr.your_ref = 0;
  buffer.hdr.action_code = Wimp_MFSLockStateChangeConfirm;
  throw (wimp_send_message (17, &buffer, 0, 0, NULL));
  
  for (plugin = 0; plugin < plugin_no; plugin++) {
    if (strcmp (plugin_text + (plugin_list + plugin) -> app_name, lockapp) != 0) {  /* non-lock windows */
      if (level == 2) {
        buffer.hdr.size = 20;
        buffer.hdr.your_ref = 0;
        buffer.hdr.action_code = Wimp_MQuit;
        if ((plugin_list + plugin) -> alive) throw (wimp_send_message (17, &buffer, (plugin_list + plugin) -> task_handle, 0, NULL));
      }
      selector_set_fade (plugin_selector, (plugin_list + plugin) -> item, level == 2);
    }
  }
  throw (wimp_force_redraw (selector_get_wimp_handle (plugin_selector), 0, -0xFFFFFF, 0xFFFFFF, 0));
}
@


1.1.1.1
log
@Initial checkin of main Configure application to CVS.
@
text
@@


1.1.1.2
log
@Fixed event ordering problems that became apparent when click-type window tools
were re-enabled in the Wimp. This involves a subtle alteration to the plug-in
quit protocol.
@
text
@a28 1
01/07/1998	BJGA	Broadcast Message_PlugInQuitAbort before Message_PlugInQuit (protocol change)
a60 7
  WimpMessage buffer;
  buffer.hdr.size = 24;
  buffer.hdr.your_ref = 0;
  buffer.hdr.action_code = Wimp_MPlugInQuitAbort; /* in case the last quit hasn't finished yet!! */
  buffer.data.words [0] = PlugInSystem_Configure;
  throw (wimp_send_message (18, &buffer, 0, 0, NULL));  
  
@
