head	4.3;
access;
symbols
	Configure-1_92:4.3
	Configure-1_91:4.3
	Configure-1_90:4.3
	Configure-1_89:4.2
	Configure-1_88:4.2
	Configure-1_87:4.1.1.1
	Configure-1_86:4.1.1.1
	Configure-1_50:4.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.1.1
	Ursula_RiscPC:4.1.1.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1.1.1
	UrsulaBuild_FinalSoftload:4.1.1.1
	rthornb_UrsulaBuild-12Aug1998:4.1.1.1
	aglover_UrsulaBuild-05Aug1998:4.1.1.1
	rthornb_UrsulaBuild-29Jul1998:4.1.1.1
	rthornb_UrsulaBuild-22Jul1998:4.1.1.1
	rthornb_UrsulaBuild-15Jul1998:4.1.1.1
	rthornb_UrsulaBuild-07Jul1998:4.1.1.1
	rthornb_UrsulaBuild-17Jun1998:4.1.1.1
	rthornb_UrsulaBuild-03Jun1998:4.1.1.1
	rthornb_UrsulaBuild-27May1998:4.1.1.1
	rthornb_UrsulaBuild-21May1998:4.1.1.1
	rthornb_UrsulaBuild_01May1998:4.1.1.1
	Daytona:4.1.1.1.0.6
	Daytona_bp:4.1.1.1
	Ursula:4.1.1.1.0.4
	Ursula_bp:4.1.1.1
	RO_3_71:4.1.3.1
	ART_bp:4.1.1.1
	ART:4.1.1.1.0.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2012.08.12.16.11.48;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	VQScGFJnDmiS5hgw;

4.2
date	2012.07.19.20.16.12;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	CU769GL4R2Ywdddw;

4.1
date	96.11.05.09.53.18;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.53.18;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.50.13;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Deselect icon in templates
Accidentally left selected in previous commit.
Also removed local SWI definitions in favour of those from swis.h.

Version 1.90. Not tagged
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * lock.c
 *
 * This is the module that handles the lock window. 
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "wimp.h"
#include "wimpt.h"
#include "werr.h"
#include "win.h"
#include "event.h"
#include "baricon.h"
#include "template.h"
#include "msgs.h"
#include "msgtrans.h"
#include "menu.h"
#include "res.h"
#include "resspr.h"
#include "dbox.h"
#include "alarm.h"

#include "configure.h"
#include "lock.h" 
#include "cmos.h"

/* Define ADFS to be the locked filing system */
#define FSLock_FilingSystem 8
#define FSLock_FullyUnlocked 0
#define FSLock_Unlocked 1
#define FSLock_Locked 2

#define fslock_changestatus(s,o,n) ((os_error *)_swix(FSLock_ChangeStatus,_IN(0)|_IN(1)|_IN(2)|_IN(3)|_IN(4),(s),(o),(n),FSLock_FilingSystem,0))

/*
        Icon definitions
*/
#define LockWindow_OldPassword               1
#define LockWindow_NewPassword1              3
#define LockWindow_NewPassword2              5
#define LockWindow_Change                    6  
#define LockWindow_Cancel                    7
#define LockWindow_Unlock                    8

static int lock_window=0;
static char *oldp;
static char *newp1;
static char *newp2;

int lock_status(void)
{
        int t;

        if ( _swix( FSLock_Status, _OUT(0), &t ) ) t=0;

        return t;
}

static struct
{
        int errno;
        char errtext[9];
}       mustgivepass =
{
        0,
        "LONOPASS"
};

static struct
{
        int errno;
        char errtext[8];
}       mustgivenew =
{
        0,
        "LOFirst"
};

static void update_lock_status(void)
{
        char tempbuf[20];

        sprintf( tempbuf, "LOL%d", lock_status() );
        changeicontext( lock_window, LockWindow_Unlock, msgs_lookup( tempbuf ));

        main_window_lockstate_update();
}

static void bung_caret_in_window( int what, void *handle )
{
        wimp_caretstr c;

        what = what;
        handle = handle;

        if ( lock_window )
        {
                c.w = lock_window;
                c.i = LockWindow_OldPassword;
                c.height = -1;
                c.index = 0;
                (void)wimp_set_caret_pos( &c );
        }
}

static void blank_password_fields(void)
{
        wimp_icon ii;

        *oldp = 0;
        *newp1 = 0;
        *newp2 = 0;
        (void)wimp_get_icon_info( lock_window, LockWindow_OldPassword, &ii );
        redraw_icon( lock_window, &ii );
        (void)wimp_get_icon_info( lock_window, LockWindow_NewPassword1, &ii );
        redraw_icon( lock_window, &ii );
        (void)wimp_get_icon_info( lock_window, LockWindow_NewPassword2, &ii );
        redraw_icon( lock_window, &ii );

        alarm_set( 0, bung_caret_in_window, 0 );
}

static os_error *lockunlockaction(void)
{
        os_error *err = NULL;

        switch( lock_status() )
        {
        case FSLock_FullyUnlocked:
                if ( strlen( newp1 ) < 5 || strlen( newp2 ) < 5 )
                {
                        wimp_caretstr c;

                        /* Set caret to 1st new password field */
                        c.w = lock_window;
                        c.i = LockWindow_NewPassword1;
                        c.height = -1;
                        c.index = 0;
                        (void)wimp_set_caret_pos( &c );

                        err = msgtrans_error_lookup( &mustgivenew, msgs_main_control_block(), 0, 0, 0, 0, 0, 0 );
                }
                else
                {
                        err = fslock_changestatus( FSLock_Locked, NULL, newp1 );
                }
                break;
        case FSLock_Unlocked:
                err = fslock_changestatus( FSLock_Locked, NULL, NULL );
                break;
        case FSLock_Locked:
                if ( !*oldp )
                {
                        err = msgtrans_error_lookup( &mustgivepass, msgs_main_control_block(), 0, 0, 0, 0, 0, 0 );
                }
                else
                {
                        err = fslock_changestatus( FSLock_Unlocked, oldp, NULL );
                }
                break;
        }

        if ( err )
        {
                wimp_reporterror( err, wimp_EOK, msgs_lookup( "TaskID" ));
        }

        update_lock_status();

        return err;
}

static void lock_event_handler(wimp_eventstr *e,void *handle)
{
        char combuf[ 256 ];
        os_error *err = NULL;
        wimp_mousestr m;

        handle=handle;

        switch (e->e)
        {
        case wimp_EOPEN:
                wimp_open_wind(&e->data.o);
                break;
        case wimp_ECLOSE:
                wimp_get_point_info( &m );
                if ( m.bbits==wimp_BRIGHT ) 
                {
                        wimp_wstate s;
                        wimp_get_wind_state(lock_window,&s);
                        reopen_main_window(s.o.box.x0,s.o.box.y1);
                }
                delete_window( &lock_window );
                break;

        case wimp_EBUT:
                if ((e->data.but.m.bbits==wimp_BRIGHT) ||
                    (e->data.but.m.bbits==wimp_BLEFT) )
                {
                        switch (e->data.but.m.i)
                        {
                        case LockWindow_Change:
                                if ( (strlen( newp1 ) < 5 || strlen( newp2 ) < 5) && !(*newp1==0 && *newp2==0) )
                                {
                                        werr( 0, msgs_lookup( "LONoNew" ));
                                        break;
                                }

                                if ( lock_status() > 0 && !*oldp )
                                {
                                        werr( 0, msgs_lookup( "LONOPASS" ));
                                        break;
                                }

                                if ( *newp1==0 && *newp2==0 )
                                {
                                        err = fslock_changestatus( FSLock_FullyUnlocked, oldp, NULL );
                                }
                                else
                                {
                                        sprintf( combuf, "%%FSLock_ChangePassword ADFS %s %s %s", newp1, newp2, oldp );
                                        err = os_cli( combuf );
                                }

                                if ( err )
                                {
                                        wimp_reporterror( err, wimp_EOK, msgs_lookup( "TaskID" ));
                                }

                                update_lock_status();
                                break;

                        case LockWindow_Cancel:
                                /* It all happens automatically */
                                break;

                        case LockWindow_Unlock:
                                err = lockunlockaction();
                                break;
                        }

                        /*
                                Blank all fields
                        */
                        blank_password_fields();

                        /*
                                If no error and left button, then close window
                        */
                        if ( !err && e->data.but.m.bbits==wimp_BLEFT )
                        {
                                delete_window( &lock_window );
                        }
                }
                break;

        case wimp_EKEY:
                if ( e->data.key.chcode == 13 )
                {
                        if ( !lockunlockaction() )
                                delete_window ( &lock_window );
                }
                else
                {
                        (void)wimp_processkey( e->data.key.chcode );
                }
                break;
        }
}

int lock_create_window(void)
{
        if ( !lock_window )
        {
                lock_window = create_window( "Lock", lock_event_handler, "LO" );
                oldp = icontext( lock_window, LockWindow_OldPassword );
                newp1 = icontext( lock_window, LockWindow_NewPassword1 );
                newp2 = icontext( lock_window, LockWindow_NewPassword2 );
                if ( !oldp || !newp1 || !newp2 )
                {
                        delete_window( &lock_window );
                        return 0;
                }
        }
        update_lock_status();
        blank_password_fields();

        return lock_window;
}

void lock_update_window(void)
{
        if ( lock_window ) lock_create_window();
}
@


4.2
log
@Old style function warnings squashed
Out of bounds array reference warning refactored to not be (FontMerge.c)

Version 1.88. Tagged as 'Configure-1_88'
@
text
@a47 13
/*
        Some useful SWIs
*/
#ifndef FSLock_Version
#define FSLock_Version          0x44780
#endif
#ifndef FSLock_Status
#define FSLock_Status           0x44781
#endif
#ifndef FSLock_ChangeStatus
#define FSLock_ChangeStatus     0x44782
#endif

@


4.1
log
@Initial revision
@
text
@d84 1
a84 1
int lock_status( void )
d113 1
a113 1
static void update_lock_status( void )
d140 1
a140 1
static void blank_password_fields( void )
d157 1
a157 1
static os_error *lockunlockaction( void )
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
