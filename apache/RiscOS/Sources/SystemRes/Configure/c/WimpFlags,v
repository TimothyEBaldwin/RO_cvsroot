head	4.3;
access;
symbols
	Configure-1_92:4.3
	Configure-1_91:4.3
	Configure-1_90:4.3
	Configure-1_89:4.3
	Configure-1_88:4.2
	Configure-1_87:4.1.1.1
	Configure-1_86:4.1.1.1
	Configure-1_50:4.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.1.1
	Ursula_RiscPC:4.1.1.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1.1.1
	UrsulaBuild_FinalSoftload:4.1.1.1
	rthornb_UrsulaBuild-12Aug1998:4.1.1.1
	aglover_UrsulaBuild-05Aug1998:4.1.1.1
	rthornb_UrsulaBuild-29Jul1998:4.1.1.1
	rthornb_UrsulaBuild-22Jul1998:4.1.1.1
	rthornb_UrsulaBuild-15Jul1998:4.1.1.1
	rthornb_UrsulaBuild-07Jul1998:4.1.1.1
	rthornb_UrsulaBuild-17Jun1998:4.1.1.1
	rthornb_UrsulaBuild-03Jun1998:4.1.1.1
	rthornb_UrsulaBuild-27May1998:4.1.1.1
	rthornb_UrsulaBuild-21May1998:4.1.1.1
	rthornb_UrsulaBuild_01May1998:4.1.1.1
	Daytona:4.1.1.1.0.6
	Daytona_bp:4.1.1.1
	Ursula:4.1.1.1.0.4
	Ursula_bp:4.1.1.1
	RO_3_71:4.1.3.1
	ART_bp:4.1.1.1
	ART:4.1.1.1.0.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2012.07.28.07.27.46;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	mJqAc5rC4yTZFiew;

4.2
date	2012.07.19.20.16.12;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	CU769GL4R2Ywdddw;

4.1
date	96.11.05.09.53.20;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.53.20;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.50.47;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Trim some dead or duplicated defines
Mark filename passed for config file manipulation as const.
Resolve a warning.
Compiles, but not tested.

Version 1.89. Tagged as 'Configure-1_89'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * wimpflags.c
 *
 * This is the module that handles the WimpFlags window.
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "wimp.h"
#include "wimpt.h"
#include "werr.h"
#include "win.h"
#include "event.h"
#include "baricon.h"
#include "template.h"
#include "msgs.h"
#include "menu.h"
#include "res.h"
#include "resspr.h"
#include "dbox.h"

#include "configure.h"
#include "ConfigFile.h"
#include "wimpflags.h"
#include "cmos.h"

#define WimpFlagsWindow_FilerAct        0
#define WimpFlagsWindow_Movement        3
#define WimpFlagsWindow_Resize          4
#define WimpFlagsWindow_Horizontal      5
#define WimpFlagsWindow_Vertical        6
#define WimpFlagsWindow_All             7
#define WimpFlagsWindow_None            8
#define WimpFlagsWindow_OffScreen       11
#define WimpFlagsWindow_OffScreenAll    12
#define WimpFlagsWindow_Error           13
#define WimpFlagsWindow_AutoMenus       14
#define WimpFlagsWindow_TexturedWindows 15
#define WimpFlagsWindow_2DTools         16


static int wimpflags_window=0;

static void wimpflags_setfileract(void)
{
        int on=cmos_get(CMOS_FilerAction) & (1<<2);

        wimp_set_icon_state(wimpflags_window,WimpFlagsWindow_FilerAct,on ? 0 : wimp_ISELECTED ,wimp_ISELECTED);
}

static void wimpflags_setmovement(void)
{
        int on=cmos_get(CMOS_WimpFlags) & 1;

        wimp_set_icon_state(wimpflags_window,WimpFlagsWindow_Movement,on ? wimp_ISELECTED : 0,wimp_ISELECTED);
}

static void wimpflags_setresize(void)
{
        int on=(cmos_get(CMOS_WimpFlags) >> 1) & 1;
        wimp_set_icon_state(wimpflags_window,WimpFlagsWindow_Resize,on ? wimp_ISELECTED : 0,wimp_ISELECTED);
}

static void wimpflags_sethorizontal(void)
{
        int on=(cmos_get(CMOS_WimpFlags) >> 2) & 1;
        wimp_set_icon_state(wimpflags_window,WimpFlagsWindow_Horizontal,on ? wimp_ISELECTED : 0,wimp_ISELECTED);
}

static void wimpflags_setvertical(void)
{
        int on=(cmos_get(CMOS_WimpFlags) >> 3) & 1;
        wimp_set_icon_state(wimpflags_window,WimpFlagsWindow_Vertical,on ? wimp_ISELECTED : 0,wimp_ISELECTED);
}

static void wimpflags_seterror(void)
{
        int on=!((cmos_get(CMOS_WimpFlags) >> 4) & 1);
        wimp_set_icon_state(wimpflags_window,WimpFlagsWindow_Error,on ? wimp_ISELECTED : 0,wimp_ISELECTED);
}

static void wimpflags_setoffscreen(void)
{
        int on=(cmos_get(CMOS_WimpFlags) >> 5) & 1;
        wimp_set_icon_state(wimpflags_window,WimpFlagsWindow_OffScreen,on ? wimp_ISELECTED : 0,wimp_ISELECTED);
}

static void wimpflags_setoffscreenall(void)
{
        int on=(cmos_get(CMOS_WimpFlags) >> 6) & 1;
        wimp_set_icon_state(wimpflags_window,WimpFlagsWindow_OffScreenAll,on ? wimp_ISELECTED : 0,wimp_ISELECTED);
}

static void wimpflags_setautomenus(void)
{
        int on=(cmos_get(CMOS_WimpFlags) >> 7) & 1;
        wimp_set_icon_state(wimpflags_window,WimpFlagsWindow_AutoMenus,on ? wimp_ISELECTED : 0,wimp_ISELECTED);
}

static void wimpflags_settiledbackground(void)
{
        int off=(cmos_get(CMOS_Wimp2D) >> 7) & 1;
        wimp_set_icon_state(wimpflags_window,WimpFlagsWindow_TexturedWindows,off ? 0:wimp_ISELECTED,wimp_ISELECTED);
}

static void wimpflags_set2Dtools(void)
{
        char *configline = configfile_readline( PostDeskConfigFile, PostDeskToolsLine );
        int on = configline && strlen( configline ) > 1;

        wimpt_noerr( wimp_set_icon_state( wimpflags_window, WimpFlagsWindow_2DTools, on ? wimp_ISELECTED : 0,wimp_ISELECTED ));
}

static void change_fileract(void)
{
        int flags=cmos_get(CMOS_FilerAction) ^ (1<<2);
        cmos_set(CMOS_FilerAction,flags);
        wimpflags_setfileract();
}

static void change_movement(void)
{
        int flags=cmos_get(CMOS_WimpFlags) ^ (1<<0);
        cmos_set(CMOS_WimpFlags,flags);
        wimpflags_setmovement();
}

static void change_resize(void)
{
        int flags=cmos_get(CMOS_WimpFlags) ^ (1<<1);
        cmos_set(CMOS_WimpFlags,flags);
        wimpflags_setresize();
}

static void change_horizontal(void)
{
        int flags=cmos_get(CMOS_WimpFlags) ^ (1<<2);
        cmos_set(CMOS_WimpFlags,flags);
        wimpflags_sethorizontal();
}

static void change_vertical(void)
{
        int flags=cmos_get(CMOS_WimpFlags) ^ (1<<3);
        cmos_set(CMOS_WimpFlags,flags);
        wimpflags_setvertical();
}

static void change_error(void)
{
        int flags=cmos_get(CMOS_WimpFlags) ^ (1<<4);
        cmos_set(CMOS_WimpFlags,flags);
        wimpflags_seterror();
}

static void change_offscreen(void)
{
        int flags=cmos_get(CMOS_WimpFlags) ^ (1<<5);
        cmos_set(CMOS_WimpFlags,flags);
        wimpflags_setoffscreen();
}

static void change_offscreenall(void)
{
        int flags=cmos_get(CMOS_WimpFlags) ^ (1<<6);
        cmos_set(CMOS_WimpFlags,flags);
        wimpflags_setoffscreenall();
}

static void change_automenus(void)
{
        int flags=cmos_get(CMOS_WimpFlags) ^ (1<<7);
        cmos_set(CMOS_WimpFlags,flags);
        _kernel_oscli("Configure WimpAutoMenuDelay 10");
        _kernel_oscli("Configure WimpMenuDragDelay 10");
        wimpflags_setautomenus();
}

static void change_tiledbackground(void)
{
        int flags=cmos_get(CMOS_Wimp2D) ^ (1<<7);
        int thismode;
        cmos_set(CMOS_Wimp2D,flags);
        wimpt_noerr( _swix( OS_ScreenMode, _IN(0)|_OUT(1), 1, &thismode ));
        wimpt_noerr( _swix( Wimp_SetMode, _IN(0), thismode ));
        wimpflags_settiledbackground();
}

static void wimpflags_resetall(void)
{
        wimpflags_setmovement();
        wimpflags_setresize();
        wimpflags_sethorizontal();
        wimpflags_setvertical();
        wimpflags_seterror();
        wimpflags_setoffscreen();
        wimpflags_setoffscreenall();
        wimpflags_setautomenus();
        wimpflags_setfileract();
        wimpflags_settiledbackground();
        wimpflags_set2Dtools();
}

static void change_all(void)
{
        int flags=cmos_get(CMOS_WimpFlags) | 0xf;
        cmos_set(CMOS_WimpFlags,flags);
        wimpflags_resetall();
}

static void change_none(void)
{
        int flags=cmos_get(CMOS_WimpFlags) & (~0xf);
        cmos_set(CMOS_WimpFlags,flags);
        wimpflags_resetall();
}

static void change_2Dtools(void)
{
        wimp_icon icon;
        int thismode;

        wimpt_noerr( wimp_set_icon_state( wimpflags_window, WimpFlagsWindow_2DTools, wimp_ISELECTED, 0 ));
        wimpt_noerr( wimp_get_icon_info( wimpflags_window, WimpFlagsWindow_2DTools, &icon ));

        wimpt_noerr( _swix( OS_CLI, _IN(0),
                (icon.flags & wimp_ISELECTED) ?
                        "*ToolSprites BootResources:Configure.2DTools"
                      : "*ToolSprites Resources:$.Resources.Wimp.Tools" ));
        cmos_set( CMOS_Wimp2D, (cmos_get( CMOS_Wimp2D ) & ~1) | ((icon.flags & wimp_ISELECTED) ? 0 : 1) );
        configfile_writeline( PostDeskConfigFile, PostDeskToolsLine,
                (icon.flags & wimp_ISELECTED) ?
                        "*ToolSprites BootResources:Configure.2DTools"
                      : "" );
        wimpt_noerr( _swix( OS_ScreenMode, _IN(0)|_OUT(1), 1, &thismode ));
        wimpt_noerr( _swix( Wimp_SetMode, _IN(0), thismode ));
}

static void do_config(void)
{
        char buf[50];
        int flags=cmos_get(CMOS_WimpFlags);
        sprintf(buf,"Configure Wimpflags %i",flags);
        _kernel_oscli(buf);
}

static void wimpflags_event_handler(wimp_eventstr *e,void *handle)
{
        handle=handle;

        switch (e->e)
        {
        case wimp_EOPEN:
                wimp_open_wind(&e->data.o);
                break;
        case wimp_ECLOSE:
               {
                wimp_mousestr m;
                wimp_get_point_info(&m);
                if (m.bbits==wimp_BRIGHT)
                {
                        wimp_wstate s;
                        wimp_get_wind_state(wimpflags_window,&s);
                        reopen_main_window(s.o.box.x0,s.o.box.y1);
                }
                delete_window( &wimpflags_window );
               }
                break;
        case wimp_EBUT:
                if ((e->data.but.m.bbits==wimp_BRIGHT) ||
                    (e->data.but.m.bbits==wimp_BLEFT)
                   )
                {
                        switch (e->data.but.m.i)
                        {
                        case WimpFlagsWindow_Movement:
                                change_movement();
                                break;
                        case WimpFlagsWindow_Resize:
                                change_resize();
                                break;
                        case WimpFlagsWindow_Horizontal:
                                change_horizontal();
                                break;
                        case WimpFlagsWindow_Vertical:
                                change_vertical();
                                break;
                        case WimpFlagsWindow_All:
                                change_all();
                                break;
                        case WimpFlagsWindow_None:
                                change_none();
                                break;
                        case WimpFlagsWindow_Error:
                                change_error();
                                break;
                        case WimpFlagsWindow_OffScreen:
                                change_offscreen();
                                break;
                        case WimpFlagsWindow_OffScreenAll:
                                change_offscreenall();
                                break;
                        case WimpFlagsWindow_AutoMenus:
                                change_automenus();
                                break;
                        case WimpFlagsWindow_FilerAct:
                                change_fileract();
                                break;
                        case WimpFlagsWindow_TexturedWindows:
                                change_tiledbackground();
                                break;
                        case WimpFlagsWindow_2DTools:
                                change_2Dtools();
                                break;
                        }
                        /* Now make the wimp take notice of us */
                        do_config();
                }
                break;
        }
}


int wimpflags_create_window(void)
{
        if (! wimpflags_window)
        {
                wimpflags_window=create_window("WimpFlags",wimpflags_event_handler,"WI");
        }

        wimpflags_resetall();
        return wimpflags_window;
}

void wimpflags_update_window(void)
{
        if (wimpflags_window) wimpflags_create_window();
}
@


4.2
log
@Old style function warnings squashed
Out of bounds array reference warning refactored to not be (FontMerge.c)

Version 1.88. Tagged as 'Configure-1_88'
@
text
@a46 4
#ifndef OS_ScreenMode
#define OS_ScreenMode 0x65
#endif

@


4.1
log
@Initial revision
@
text
@d130 1
a130 1
static void wimpflags_set2Dtools( void )
d138 1
a138 1
static void change_fileract()
d145 1
a145 1
static void change_movement()
d152 1
a152 1
static void change_resize()
d159 1
a159 1
static void change_horizontal()
d166 1
a166 1
static void change_vertical()
d173 1
a173 1
static void change_error()
d180 1
a180 1
static void change_offscreen()
d187 1
a187 1
static void change_offscreenall()
d194 1
a194 1
static void change_automenus()
d203 1
a203 1
static void change_tiledbackground()
d213 1
a213 1
static void wimpflags_resetall()
d228 1
a228 1
static void change_all()
d235 1
a235 1
static void change_none()
d242 1
a242 1
static void change_2Dtools( void )
d263 1
a263 1
static void do_config()
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
