head	4.1;
branch	4.1.1;
access;
symbols
	Configure-1_92:4.1.1.1
	Configure-1_91:4.1.1.1
	Configure-1_90:4.1.1.1
	Configure-1_89:4.1.1.1
	Configure-1_88:4.1.1.1
	Configure-1_87:4.1.1.1
	Configure-1_86:4.1.1.1
	Configure-1_50:4.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.1.1
	Ursula_RiscPC:4.1.1.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1.1.1
	UrsulaBuild_FinalSoftload:4.1.1.1
	rthornb_UrsulaBuild-12Aug1998:4.1.1.1
	aglover_UrsulaBuild-05Aug1998:4.1.1.1
	rthornb_UrsulaBuild-29Jul1998:4.1.1.1
	rthornb_UrsulaBuild-22Jul1998:4.1.1.1
	rthornb_UrsulaBuild-15Jul1998:4.1.1.1
	rthornb_UrsulaBuild-07Jul1998:4.1.1.1
	rthornb_UrsulaBuild-17Jun1998:4.1.1.1
	rthornb_UrsulaBuild-03Jun1998:4.1.1.1
	rthornb_UrsulaBuild-27May1998:4.1.1.1
	rthornb_UrsulaBuild-21May1998:4.1.1.1
	rthornb_UrsulaBuild_01May1998:4.1.1.1
	Daytona:4.1.1.1.0.6
	Daytona_bp:4.1.1.1
	Ursula:4.1.1.1.0.4
	Ursula_bp:4.1.1.1
	RO_3_71:4.1.3.1
	ART_bp:4.1.1.1
	ART:4.1.1.1.0.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.53.13;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.53.13;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.49.34;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * filer.c
 *
 * This is the module that handles the Filer window. 
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "wimp.h"
#include "wimpt.h"
#include "werr.h"
#include "win.h"
#include "event.h"
#include "baricon.h"
#include "template.h"
#include "msgs.h"
#include "menu.h"
#include "res.h"
#include "resspr.h"
#include "dbox.h"

#include "configure.h"
#include "filer.h" 
#include "cmos.h"

#define FilerWindow_FirstDisplay        2
#define FilerWindow_FirstSort           7

#ifdef INCLUDE_FILER

static int filer_window=0;


static void filer_setdisplay(void)
{
 int type=cmos_get(CMOS_Filer) & 3;
 int i;
 for (i=0;i<3;i++)
    wimp_set_icon_state(filer_window,FilerWindow_FirstDisplay+i,(type==i) ? wimp_ISELECTED : 0,wimp_ISELECTED);
}

static void filer_setsort(void)
{
 int type=(cmos_get(CMOS_Filer) >> 2) & 3;
 int i;
 for (i=0;i<4;i++)
    wimp_set_icon_state(filer_window,FilerWindow_FirstSort+i,(type==i) ? wimp_ISELECTED : 0,wimp_ISELECTED);
}


static void change_display(int value)
{
 int byte=cmos_get(CMOS_Filer) & (~3);
 cmos_set(CMOS_Filer,byte | value);  
 filer_setdisplay();
}

static void change_sort(int value)
{
 int byte=cmos_get(CMOS_Filer) & (~(3<<2));
 cmos_set(CMOS_Filer,byte | (value<<2));  
 filer_setsort();
}


static void filer_resetall()
{
 filer_setdisplay();
 filer_setsort();
}

static void filer_event_handler(wimp_eventstr *e,void *handle)
{
 int w=(int)handle;

 switch (e->e)
 {
  case wimp_EOPEN:
       wimp_open_wind(&e->data.o);
       break;
  case wimp_ECLOSE:
       {
        wimp_mousestr m;
        wimp_get_point_info(&m);
        if (m.bbits==wimp_BRIGHT) 
        {
         wimp_wstate s;
         wimp_get_wind_state(filer_window,&s);
         reopen_main_window(s.o.box.x0,s.o.box.y1);
        }
        delete_window( &filer_window );
       }
       break;
  case wimp_EBUT:
          if ((e->data.but.m.bbits==wimp_BRIGHT) ||
              (e->data.but.m.bbits==wimp_BLEFT)
             )
          {
            if ((e->data.but.m.i >= FilerWindow_FirstDisplay) && 
                (e->data.but.m.i <= FilerWindow_FirstDisplay+2)
               )
               change_display(e->data.but.m.i-FilerWindow_FirstDisplay);

            if ((e->data.but.m.i >= FilerWindow_FirstSort) && 
                (e->data.but.m.i <= FilerWindow_FirstSort+3)
               )
               change_sort(e->data.but.m.i-FilerWindow_FirstSort);

          }
          break;
 }
}


int filer_create_window(void)
{
 if (! filer_window)
 {
  filer_window=create_window("Filer",filer_event_handler,"FI");
 }

 filer_resetall();
 return filer_window;
}

void filer_update_window(void)
{
 if (filer_window) filer_create_window();
}

#endif

void filer_restart_filers(void)
{
 _kernel_swi_regs r;
 int filer_handle;
 r.r[0]=18;     /* Lookup module name */
 r.r[1]=(int)"Filer";
 if (_kernel_swi(XOS_Bit | OS_Module,&r,&r) != NULL) return;
 if (r.r[4]<=0) return; /* No workspace ! */
 filer_handle=*(int *)(r.r[4]); /* First word of workspace is task handle */
 if (filer_handle <= 0 ) return;        /* No task !? */
 do
 {
  r.r[0]=filer_handle;
  r.r[1]=0x4b;   /* Service start filer */
  wimpt_noerr( (os_error *) (_kernel_swi(XOS_Bit | OS_ServiceCall,&r,&r)));
  if (r.r[1]==0) _kernel_swi(XOS_Bit | Wimp_StartTask , &r , &r);
 } while (r.r[1]==0);
 r.r[1]=0x4c;   /* Service_StartedFiler */
 wimpt_noerr((os_error *)(_kernel_swi(XOS_Bit | OS_ServiceCall,&r,&r)));
}



 
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
