head	1.2;
access;
symbols
	Boot-1_26:1.2
	Boot-1_25:1.2
	Boot-1_24:1.2
	Boot-1_23:1.2
	Boot-1_22:1.2
	Boot-1_21:1.2
	Boot-1_20:1.2
	Boot-1_19:1.2
	Boot-1_18:1.2
	Boot-1_17:1.2
	Boot-1_16:1.2
	Boot-1_15:1.2
	Boot-1_14:1.2
	Boot-1_13:1.2
	Boot-1_12:1.2
	Boot-1_11:1.2
	Boot-1_10:1.2
	Boot-1_09:1.2
	Boot-1_08:1.2
	Boot-1_07:1.2
	Boot-1_06:1.2
	Boot-1_05:1.2
	Boot-1_04:1.2
	Boot-1_03:1.2
	Boot-1_02:1.2
	Boot-1_01:1.2
	Boot-1_00:1.2
	Boot-0_99:1.2
	Boot-0_98:1.2
	Boot-0_97:1.2
	Boot-0_96:1.2
	Boot-0_95:1.2
	Boot-0_94:1.2
	Boot-0_93:1.2
	Boot-0_92:1.2
	Boot-0_91:1.2
	Boot-0_90:1.2
	Boot-0_89:1.2
	Boot-0_88:1.2
	Boot-0_87:1.2
	Boot-0_86:1.2
	Boot-0_85:1.2
	Boot-0_84:1.2
	Boot-0_83:1.2
	Boot-0_82:1.2
	Boot-0_81:1.2
	Boot-0_80:1.2
	Boot-0_79:1.2
	Boot-0_78:1.2
	Boot-0_77:1.2
	Boot-0_76:1.2
	Boot-0_75:1.2
	Boot-0_74:1.2
	Boot-0_73:1.2
	Boot-0_72:1.2
	Boot-0_71:1.2
	Boot-0_70:1.2
	Boot-0_69:1.2
	Boot-0_68:1.2
	Boot-0_67:1.2
	nbingham_boot_991007:1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.2
	Ursula_RiscPC:1.2.0.6
	rthornb_UrsulaBuild-19Aug1998:1.2
	UrsulaBuild_FinalSoftload:1.2
	rthornb_UrsulaBuild-12Aug1998:1.2
	aglover_UrsulaBuild-05Aug1998:1.2
	rthornb_UrsulaBuild-29Jul1998:1.2
	rthornb_UrsulaBuild-22Jul1998:1.2
	rthornb_UrsulaBuild-15Jul1998:1.2
	rthornb_UrsulaBuild-07Jul1998:1.2
	rthornb_UrsulaBuild-17Jun1998:1.2
	rthornb_UrsulaBuild-03Jun1998:1.2
	rthornb_UrsulaBuild-27May1998:1.2
	rthornb_UrsulaBuild-21May1998:1.2
	rthornb_UrsulaBuild_01May1998:1.2
	Daytona:1.2.0.4
	Daytona_bp:1.2
	Ursula:1.2.0.2
	Ursula_bp:1.2
	StrongARM:1.1.0.4
	RO_3_71:1.1.4.1;
locks; strict;
comment	@# @;


1.2
date	97.05.06.11.27.44;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.04.30.18.19.42;	author kbracey;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	97.04.30.18.19.43;	author kbracey;	state Exp;
branches;
next	;

1.1.4.1
date	97.05.06.09.49.28;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Version RO_3_71 merged
@
text
@
About ROMPatch
--------------

This is an entirely new version of ROMpatch, coded in C and assembler,
and using an improved mapping strategy. It breaks ROM mapping into
sections, large pages and pages, retaining larger mappings where
possible (the restriction being that patch hits must appear in
pages). The old version always breaks the ROM entirely into pages.

The advantage of retaining larger mapping granularity is that it
is potentially far less likely to provoke MMU TLB misses (the
unpatched ROM is mapped very efficiently, as 4x 1Mb sections).

Version 2.02 supports patches for multiple ROMs (within reason).

A brief description of files in this directory follows:
 
binary               holds interim build target(s); just the
                     unsqueezed runimage in this case

c.rompatch           most of C code
c.debug              routines for debugging only

docs.xxx             other documents, including info on StrongARM bug, and
                     results of binary and source code searches

h.debug              defs used only for debugging
h.defs               types and defs

Install              target stuff for distribution; the obey file
                     !!ROMPatch and the directory ROMPatch should be
                     placed in the user's !Boot.Choices.Boot.PreDesk, to
                     implement patches; the make builds ROMPatch.!RunImage;
                     a ReadMe and TechNote for distribution are also there

patches.h.patch      structure that collects all patch groups for all ROMs together
patches.370.h.*      all patches for RISC OS 3.70
patches.360.h.*      all patches for RISC OS 3.60

pdiff                contains C app that can compare two 4Mb ROM files,
                     and output difference list in style required for
                     a patches.h file

s.asmutils           routines implemented in assembler (they require
                     supervisor status)
s.module             construction of module that is inserted to handle
                     patches dynamic area (mainly, to remove patches on reset)

UK                   compile-time internationalisation (yeah, want to make
                     something of it?)


Adding a ROM supported by patches
---------------------------------

See patches.h.patch. Should be straightforward, but note that some code may
be affected by OS variable placement changes (see h.defs and the assembler source
in the s directory). Only 4 Mb ROMs are currently supported.

Adding a patch group:
---------------------

See patches.360.h.* and patches.370.h.* for examples. Each ROM has an h.patch
file that collects the patches together. Each patch must define a procedure of
the form:

static patchentry_t *somepatches_proc(void *handle)
{
  /* return either a list of patchentry_t triplets, terminated by {0,0,0},
     or NULL meaning this group not required in this configuration */
}

The generic handle is currently not used (always passed as NULL).

This function is then of type patchlist_proc, and suitable for inclusion
in the list of functions (terminated by NULL), in h.patch.

Note that the function must be callable more than once.

See patches.370.h.STMHpatch for an example of a patch conditional on current
configuration. See patches.370.h.RTCAfix for an example of a 'patch' that
doesn't output a patch, but applies a runtime fix.

---

mjs/issue 2, 24 Feb 97
@


1.1
log
@file ReadMe was initially added on branch RO_3_70_to_3_71.
@
text
@d1 87
@


1.1.4.1
log
@Version RO_3_71 taken
@
text
@a0 87

About ROMPatch
--------------

This is an entirely new version of ROMpatch, coded in C and assembler,
and using an improved mapping strategy. It breaks ROM mapping into
sections, large pages and pages, retaining larger mappings where
possible (the restriction being that patch hits must appear in
pages). The old version always breaks the ROM entirely into pages.

The advantage of retaining larger mapping granularity is that it
is potentially far less likely to provoke MMU TLB misses (the
unpatched ROM is mapped very efficiently, as 4x 1Mb sections).

Version 2.02 supports patches for multiple ROMs (within reason).

A brief description of files in this directory follows:
 
binary               holds interim build target(s); just the
                     unsqueezed runimage in this case

c.rompatch           most of C code
c.debug              routines for debugging only

docs.xxx             other documents, including info on StrongARM bug, and
                     results of binary and source code searches

h.debug              defs used only for debugging
h.defs               types and defs

Install              target stuff for distribution; the obey file
                     !!ROMPatch and the directory ROMPatch should be
                     placed in the user's !Boot.Choices.Boot.PreDesk, to
                     implement patches; the make builds ROMPatch.!RunImage;
                     a ReadMe and TechNote for distribution are also there

patches.h.patch      structure that collects all patch groups for all ROMs together
patches.370.h.*      all patches for RISC OS 3.70
patches.360.h.*      all patches for RISC OS 3.60

pdiff                contains C app that can compare two 4Mb ROM files,
                     and output difference list in style required for
                     a patches.h file

s.asmutils           routines implemented in assembler (they require
                     supervisor status)
s.module             construction of module that is inserted to handle
                     patches dynamic area (mainly, to remove patches on reset)

UK                   compile-time internationalisation (yeah, want to make
                     something of it?)


Adding a ROM supported by patches
---------------------------------

See patches.h.patch. Should be straightforward, but note that some code may
be affected by OS variable placement changes (see h.defs and the assembler source
in the s directory). Only 4 Mb ROMs are currently supported.

Adding a patch group:
---------------------

See patches.360.h.* and patches.370.h.* for examples. Each ROM has an h.patch
file that collects the patches together. Each patch must define a procedure of
the form:

static patchentry_t *somepatches_proc(void *handle)
{
  /* return either a list of patchentry_t triplets, terminated by {0,0,0},
     or NULL meaning this group not required in this configuration */
}

The generic handle is currently not used (always passed as NULL).

This function is then of type patchlist_proc, and suitable for inclusion
in the list of functions (terminated by NULL), in h.patch.

Note that the function must be callable more than once.

See patches.370.h.STMHpatch for an example of a patch conditional on current
configuration. See patches.370.h.RTCAfix for an example of a 'patch' that
doesn't output a patch, but applies a runtime fix.

---

mjs/issue 2, 24 Feb 97
@


1.1.2.1
log
@Merged from 3.71 CD
@
text
@a0 87

About ROMPatch
--------------

This is an entirely new version of ROMpatch, coded in C and assembler,
and using an improved mapping strategy. It breaks ROM mapping into
sections, large pages and pages, retaining larger mappings where
possible (the restriction being that patch hits must appear in
pages). The old version always breaks the ROM entirely into pages.

The advantage of retaining larger mapping granularity is that it
is potentially far less likely to provoke MMU TLB misses (the
unpatched ROM is mapped very efficiently, as 4x 1Mb sections).

Version 2.02 supports patches for multiple ROMs (within reason).

A brief description of files in this directory follows:
 
binary               holds interim build target(s); just the
                     unsqueezed runimage in this case

c.rompatch           most of C code
c.debug              routines for debugging only

docs.xxx             other documents, including info on StrongARM bug, and
                     results of binary and source code searches

h.debug              defs used only for debugging
h.defs               types and defs

Install              target stuff for distribution; the obey file
                     !!ROMPatch and the directory ROMPatch should be
                     placed in the user's !Boot.Choices.Boot.PreDesk, to
                     implement patches; the make builds ROMPatch.!RunImage;
                     a ReadMe and TechNote for distribution are also there

patches.h.patch      structure that collects all patch groups for all ROMs together
patches.370.h.*      all patches for RISC OS 3.70
patches.360.h.*      all patches for RISC OS 3.60

pdiff                contains C app that can compare two 4Mb ROM files,
                     and output difference list in style required for
                     a patches.h file

s.asmutils           routines implemented in assembler (they require
                     supervisor status)
s.module             construction of module that is inserted to handle
                     patches dynamic area (mainly, to remove patches on reset)

UK                   compile-time internationalisation (yeah, want to make
                     something of it?)


Adding a ROM supported by patches
---------------------------------

See patches.h.patch. Should be straightforward, but note that some code may
be affected by OS variable placement changes (see h.defs and the assembler source
in the s directory). Only 4 Mb ROMs are currently supported.

Adding a patch group:
---------------------

See patches.360.h.* and patches.370.h.* for examples. Each ROM has an h.patch
file that collects the patches together. Each patch must define a procedure of
the form:

static patchentry_t *somepatches_proc(void *handle)
{
  /* return either a list of patchentry_t triplets, terminated by {0,0,0},
     or NULL meaning this group not required in this configuration */
}

The generic handle is currently not used (always passed as NULL).

This function is then of type patchlist_proc, and suitable for inclusion
in the list of functions (terminated by NULL), in h.patch.

Note that the function must be callable more than once.

See patches.370.h.STMHpatch for an example of a patch conditional on current
configuration. See patches.370.h.RTCAfix for an example of a 'patch' that
doesn't output a patch, but applies a runtime fix.

---

mjs/issue 2, 24 Feb 97
@
