head	1.4;
access;
symbols
	Boot-1_26:1.4
	Boot-1_25:1.4
	Boot-1_24:1.4
	Boot-1_23:1.4
	Boot-1_22:1.4
	Boot-1_21:1.4
	Boot-1_20:1.4
	Boot-1_19:1.4
	Boot-1_18:1.4
	Boot-1_17:1.3
	Boot-1_16:1.3
	Boot-1_15:1.3
	Boot-1_14:1.3
	Boot-1_13:1.3
	Boot-1_12:1.3
	Boot-1_11:1.3
	Boot-1_10:1.3
	Boot-1_09:1.3
	Boot-1_08:1.3
	Boot-1_07:1.3
	Boot-1_06:1.3
	Boot-1_05:1.3
	Boot-1_04:1.3
	Boot-1_03:1.3
	Boot-1_02:1.3
	Boot-1_01:1.3
	Boot-1_00:1.3
	Boot-0_99:1.3
	Boot-0_98:1.3
	Boot-0_97:1.3
	Boot-0_96:1.3
	Boot-0_95:1.3
	Boot-0_94:1.2
	Boot-0_93:1.2
	Boot-0_92:1.2
	Boot-0_91:1.2
	Boot-0_90:1.2
	Boot-0_89:1.2
	Boot-0_88:1.2
	Boot-0_87:1.2
	Boot-0_86:1.2
	Boot-0_85:1.2
	Boot-0_84:1.2
	Boot-0_83:1.2
	Boot-0_82:1.2
	Boot-0_81:1.2
	Boot-0_80:1.2
	Boot-0_79:1.2
	Boot-0_78:1.2
	Boot-0_77:1.2
	Boot-0_76:1.2
	Boot-0_75:1.2
	Boot-0_74:1.2
	Boot-0_73:1.2
	Boot-0_72:1.2
	Boot-0_71:1.2
	Boot-0_70:1.2
	Boot-0_69:1.2
	Boot-0_68:1.2
	Boot-0_67:1.2
	nbingham_boot_991007:1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.2
	Ursula_RiscPC:1.2.0.6
	rthornb_UrsulaBuild-19Aug1998:1.2
	UrsulaBuild_FinalSoftload:1.2
	rthornb_UrsulaBuild-12Aug1998:1.2
	aglover_UrsulaBuild-05Aug1998:1.2
	rthornb_UrsulaBuild-29Jul1998:1.2
	rthornb_UrsulaBuild-22Jul1998:1.2
	rthornb_UrsulaBuild-15Jul1998:1.2
	rthornb_UrsulaBuild-07Jul1998:1.2
	rthornb_UrsulaBuild-17Jun1998:1.2
	rthornb_UrsulaBuild-03Jun1998:1.2
	rthornb_UrsulaBuild-27May1998:1.2
	rthornb_UrsulaBuild-21May1998:1.2
	rthornb_UrsulaBuild_01May1998:1.2
	Daytona:1.2.0.4
	Daytona_bp:1.2
	Ursula:1.2.0.2
	Ursula_bp:1.2
	StrongARM:1.1.0.4
	RO_3_71:1.1.4.1;
locks; strict;
comment	@# @;


1.4
date	2013.05.27.20.37.42;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	vUwSuxHXx7U7jjRw;

1.3
date	2012.07.26.07.31.02;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	OlF6qJCeal42L2ew;

1.2
date	97.05.06.11.27.39;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.04.30.18.19.38;	author kbracey;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	97.04.30.18.19.39;	author kbracey;	state Exp;
branches;
next	;

1.1.4.1
date	97.05.06.09.24.41;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update ROM patcher to understand Ursula kernels
The ROM patcher relied on lots of grubby internal knowledge of kernel addresses, some of which moved for Ursula
* L1PT now discovered with OS_ReadSysInfo 6
* CAM now discovered with OS_ReadSysInfo 6
* The StrongARM cleaner flipflop now discovered with OS_ReadSysInfo 6
* Option to ignore the ROM checksum where it is known to be duff (eg. personalised copies of RISC OS 4)

Also
* Remove RO430Hook from the output pending more testing
* Readd SoundDMA for RISC OS 3.60


Version 1.18. Tagged as 'Boot-1_18'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* debug.c */

#include "defs.h"
#include "debug.h"

#if DEBUG

#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
#include "Global/OSRSI6.h"

/* ------------------------------------------------------------------------ */

void dbtrace_patchhits(int *romsection,int *romlpage,int *rompage)
{
  int i,j;
  static char *sym = ".123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ**";

  fprintf(stderr,"section hits:");
  for (i=0; i<ROMsections(ROMsize); i++)
  {
    if ((i & 63) == 0) fprintf(stderr,"\n");
    fprintf(stderr,"%c",sym[romsection[i]]);
  }
  fprintf(stderr,"\nlarge page hits:");
  for (i=0; i<ROMlpages(ROMsize); i++)
  {
    if ((i & 63) == 0) fprintf(stderr,"\n");
    fprintf(stderr,"%c",sym[romlpage[i]]);
  }
  fprintf(stderr,"\npage hits:");
  for (i=0; i<ROMpages(ROMsize); i++)
  {
    if ((i & 63) == 0) fprintf(stderr,"\n");
    j = rompage[i];
    if (j > 36) j = 36;
    fprintf(stderr,"%c",sym[j]);
  }
  fprintf(stderr,"\n");
}

/* ------------------------------------------------------------------------ */

void dbtrace_DApages(int DAN, uint32 DAbase, int DAsize)
{
  uint32     a,pa,pn,ppl;
  uint32     *camptr = NULL;
  camentry_t *cam;

  _swix(OS_ReadSysInfo, _INR(0,2) | _OUT(2),
        6, 0, OSRSI6_CamEntriesPointer,
        &camptr);
  if (camptr == NULL)
  {
    cam = (camentry_t *)CAMstart; /* Pre Ursula hardwired number */
  }
  else
  {
    cam = (camentry_t *)*camptr;
  }

  fprintf(stderr,"patchDA num=%8.8x size=%8.8x base=%8.8x\n",DAN,DAsize,DAbase);

  for (a=DAbase; a<DAbase+DAsize; a+=0x1000)
  {
    pa  = logtophys(a);
    pn  = logtopagenum(a);
    ppl = cam[pn].PPL;
    fprintf(stderr,"  DA log=%8.8x phys=%8.8x pnum=%8.8x PPL=%8.8x\n",a,pa,pn,ppl);
  }
}

/* ------------------------------------------------------------------------ */

#endif /* DEBUG */
@


1.3
log
@Generate ROM patches from source
It looks like the source to the ROM patches got lost in one of the numerous reorganisations, so while "ROMPatch2" was here "ROMPatch3" including the crucial > 2GB drive lockup fix were lost.
* Reverse engineered ROMPatch3, see userdocs/v204/!ReadMe
* Added support to the patch tool for 2MB ROMs as used in RISC OS 3.50
* Convert the BASIC patch for 3.50 (in Sources/ROMPatch4M) into patch tool format, unfortunately it's not clear what all the patches actually do so they're mostly grouped by module with little explanation
* Removed source attribution from obey files copied to the user
* Use Push/Pull macros
Tested by applying the original patch to a ROM, saving it, then applying this patch, and diffing the result.

Version 0.95. Tagged as 'Boot-0_95'
@
text
@d26 1
d63 14
a76 1
  camentry_t *cam = (camentry_t *)CAMstart;
@


1.2
log
@Version RO_3_71 merged
@
text
@d21 1
a21 1
#if Debug
a26 3
extern uint32 logtophys(uint32 log);
extern uint32 logtopagenum(uint32 log);

d35 1
a35 1
  for (i=0; i<ROMsections; i++)
d41 1
a41 1
  for (i=0; i<ROMlpages; i++)
d47 1
a47 1
  for (i=0; i<ROMpages; i++)
d77 1
a77 1
#endif /* Debug */
@


1.1
log
@file debug was initially added on branch RO_3_70_to_3_71.
@
text
@d1 80
@


1.1.4.1
log
@Version RO_3_71 taken
@
text
@a0 80
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* debug.c */

#include "defs.h"
#include "debug.h"

#if Debug

#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>

extern uint32 logtophys(uint32 log);
extern uint32 logtopagenum(uint32 log);

/* ------------------------------------------------------------------------ */

void dbtrace_patchhits(int *romsection,int *romlpage,int *rompage)
{
  int i,j;
  static char *sym = ".123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ**";

  fprintf(stderr,"section hits:");
  for (i=0; i<ROMsections; i++)
  {
    if ((i & 63) == 0) fprintf(stderr,"\n");
    fprintf(stderr,"%c",sym[romsection[i]]);
  }
  fprintf(stderr,"\nlarge page hits:");
  for (i=0; i<ROMlpages; i++)
  {
    if ((i & 63) == 0) fprintf(stderr,"\n");
    fprintf(stderr,"%c",sym[romlpage[i]]);
  }
  fprintf(stderr,"\npage hits:");
  for (i=0; i<ROMpages; i++)
  {
    if ((i & 63) == 0) fprintf(stderr,"\n");
    j = rompage[i];
    if (j > 36) j = 36;
    fprintf(stderr,"%c",sym[j]);
  }
  fprintf(stderr,"\n");
}

/* ------------------------------------------------------------------------ */

void dbtrace_DApages(int DAN, uint32 DAbase, int DAsize)
{
  uint32     a,pa,pn,ppl;
  camentry_t *cam = (camentry_t *)CAMstart;

  fprintf(stderr,"patchDA num=%8.8x size=%8.8x base=%8.8x\n",DAN,DAsize,DAbase);

  for (a=DAbase; a<DAbase+DAsize; a+=0x1000)
  {
    pa  = logtophys(a);
    pn  = logtopagenum(a);
    ppl = cam[pn].PPL;
    fprintf(stderr,"  DA log=%8.8x phys=%8.8x pnum=%8.8x PPL=%8.8x\n",a,pa,pn,ppl);
  }
}

/* ------------------------------------------------------------------------ */

#endif /* Debug */
@


1.1.2.1
log
@Merged from 3.71 CD
@
text
@a0 80
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* debug.c */

#include "defs.h"
#include "debug.h"

#if Debug

#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>

extern uint32 logtophys(uint32 log);
extern uint32 logtopagenum(uint32 log);

/* ------------------------------------------------------------------------ */

void dbtrace_patchhits(int *romsection,int *romlpage,int *rompage)
{
  int i,j;
  static char *sym = ".123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ**";

  fprintf(stderr,"section hits:");
  for (i=0; i<ROMsections; i++)
  {
    if ((i & 63) == 0) fprintf(stderr,"\n");
    fprintf(stderr,"%c",sym[romsection[i]]);
  }
  fprintf(stderr,"\nlarge page hits:");
  for (i=0; i<ROMlpages; i++)
  {
    if ((i & 63) == 0) fprintf(stderr,"\n");
    fprintf(stderr,"%c",sym[romlpage[i]]);
  }
  fprintf(stderr,"\npage hits:");
  for (i=0; i<ROMpages; i++)
  {
    if ((i & 63) == 0) fprintf(stderr,"\n");
    j = rompage[i];
    if (j > 36) j = 36;
    fprintf(stderr,"%c",sym[j]);
  }
  fprintf(stderr,"\n");
}

/* ------------------------------------------------------------------------ */

void dbtrace_DApages(int DAN, uint32 DAbase, int DAsize)
{
  uint32     a,pa,pn,ppl;
  camentry_t *cam = (camentry_t *)CAMstart;

  fprintf(stderr,"patchDA num=%8.8x size=%8.8x base=%8.8x\n",DAN,DAsize,DAbase);

  for (a=DAbase; a<DAbase+DAsize; a+=0x1000)
  {
    pa  = logtophys(a);
    pn  = logtopagenum(a);
    ppl = cam[pn].PPL;
    fprintf(stderr,"  DA log=%8.8x phys=%8.8x pnum=%8.8x PPL=%8.8x\n",a,pa,pn,ppl);
  }
}

/* ------------------------------------------------------------------------ */

#endif /* Debug */
@
