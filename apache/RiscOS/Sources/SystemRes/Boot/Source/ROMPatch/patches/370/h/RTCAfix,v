head	1.3;
access;
symbols
	Boot-1_26:1.3
	Boot-1_25:1.3
	Boot-1_24:1.3
	Boot-1_23:1.3
	Boot-1_22:1.3
	Boot-1_21:1.3
	Boot-1_20:1.3
	Boot-1_19:1.3
	Boot-1_18:1.3
	Boot-1_17:1.3
	Boot-1_16:1.3
	Boot-1_15:1.3
	Boot-1_14:1.3
	Boot-1_13:1.3
	Boot-1_12:1.3
	Boot-1_11:1.3
	Boot-1_10:1.3
	Boot-1_09:1.3
	Boot-1_08:1.3
	Boot-1_07:1.3
	Boot-1_06:1.3
	Boot-1_05:1.3
	Boot-1_04:1.3
	Boot-1_03:1.3
	Boot-1_02:1.3
	Boot-1_01:1.3
	Boot-1_00:1.3
	Boot-0_99:1.3
	Boot-0_98:1.3
	Boot-0_97:1.3
	Boot-0_96:1.3
	Boot-0_95:1.3
	Boot-0_94:1.2
	Boot-0_93:1.2
	Boot-0_92:1.2
	Boot-0_91:1.2
	Boot-0_90:1.2
	Boot-0_89:1.2
	Boot-0_88:1.2
	Boot-0_87:1.2
	Boot-0_86:1.2
	Boot-0_85:1.2
	Boot-0_84:1.2
	Boot-0_83:1.2
	Boot-0_82:1.2
	Boot-0_81:1.2
	Boot-0_80:1.2
	Boot-0_79:1.2
	Boot-0_78:1.2
	Boot-0_77:1.2
	Boot-0_76:1.2
	Boot-0_75:1.2
	Boot-0_74:1.2
	Boot-0_73:1.2
	Boot-0_72:1.2
	Boot-0_71:1.2
	Boot-0_70:1.2
	Boot-0_69:1.2
	Boot-0_68:1.2
	Boot-0_67:1.2
	nbingham_boot_991007:1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.2
	Ursula_RiscPC:1.2.0.6
	rthornb_UrsulaBuild-19Aug1998:1.2
	UrsulaBuild_FinalSoftload:1.2
	rthornb_UrsulaBuild-12Aug1998:1.2
	aglover_UrsulaBuild-05Aug1998:1.2
	rthornb_UrsulaBuild-29Jul1998:1.2
	rthornb_UrsulaBuild-22Jul1998:1.2
	rthornb_UrsulaBuild-15Jul1998:1.2
	rthornb_UrsulaBuild-07Jul1998:1.2
	rthornb_UrsulaBuild-17Jun1998:1.2
	rthornb_UrsulaBuild-03Jun1998:1.2
	rthornb_UrsulaBuild-27May1998:1.2
	rthornb_UrsulaBuild-21May1998:1.2
	rthornb_UrsulaBuild_01May1998:1.2
	Daytona:1.2.0.4
	Daytona_bp:1.2
	Ursula:1.2.0.2
	Ursula_bp:1.2
	StrongARM:1.1.0.4
	RO_3_71:1.1.4.1;
locks; strict;
comment	@# @;


1.3
date	2012.07.26.07.31.12;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	OlF6qJCeal42L2ew;

1.2
date	97.05.06.11.28.24;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.04.30.18.20.12;	author kbracey;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	97.04.30.18.20.13;	author kbracey;	state Exp;
branches;
next	;

1.1.4.1
date	97.05.06.09.50.16;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Generate ROM patches from source
It looks like the source to the ROM patches got lost in one of the numerous reorganisations, so while "ROMPatch2" was here "ROMPatch3" including the crucial > 2GB drive lockup fix were lost.
* Reverse engineered ROMPatch3, see userdocs/v204/!ReadMe
* Added support to the patch tool for 2MB ROMs as used in RISC OS 3.50
* Convert the BASIC patch for 3.50 (in Sources/ROMPatch4M) into patch tool format, unfortunately it's not clear what all the patches actually do so they're mostly grouped by module with little explanation
* Removed source attribution from obey files copied to the user
* Use Push/Pull macros
Tested by applying the original patch to a ROM, saving it, then applying this patch, and diffing the result.

Version 0.95. Tagged as 'Boot-0_95'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* patches/370/RTCAfix.h */

/*
   unconditional fix for RTCAdjust

   - On ROM start, RTCAdjust installs two CallEvery's instead of one. One is
     installed for module init, one for Service_Reset. The two are typically
     a few seconds apart, and the second can make a very large adjustment,
     based on an error over the very small interval, which is not readjusted
     for about an hour (the CallEvery period). The upshot is that the centisecond
     timing reference may run very fast or slow (several %) in some hours.

     This cannot be patched as such (the problem occurs during ROM boot), but
     can be fixed as a run time restoration of the intended single CallEvery.

     Hence, this routine returns NULL patches, but does the fix the first time
     it is called. It should be perfectly safe to mess with RTCAdjust's CallEvery
     at this time, because ROMPatch will be run by !Boot, long before the
     first CallEvery is due.
*/

/* kernel.h and swis.h are included by main code */

/* values correct for RISC OS 3.70 */
#define RTCA370_ROMaddress       0x39c9634          /* start of module */
#define RTCA370_CallEveryHandler 0x39c97d0          /* address of handler */
#define RTCA370_CallEveryDelay   (60*60*100 - 1)    /* for 1 hour */

static patchentry_t *RTCAfix370_proc(void *handle)
{
  _kernel_oserror *e;
  uint32          addr,wspace;

  static int fix_needed = 1;

  if (fix_needed)
  {
    /* check ROM version of RTCAdjust is active, and get its workspace address */
    e = _swix(OS_Module,_INR(0,1)|_OUTR(3,4),18,"RTCAdjust",&addr,&wspace);
    if (!e && (addr == RTCA370_ROMaddress))
    {
      /* remove current CallEvery's (both will be removed) */
      _swix(OS_RemoveTickerEvent,_INR(0,1),RTCA370_CallEveryHandler,wspace);
      /* now install the intended single CallEvery */
      _swix(OS_CallEvery,_INR(0,2),RTCA370_CallEveryDelay,RTCA370_CallEveryHandler,wspace);
#if DEBUG
        fprintf(stderr,"RTCAfix: OS_RemoveTickerEvent,%8.8x,%8.8x\n"
                       "RTCAfix: OS_CallEvery,%1d,%8.8x,%8.8x\n",
                RTCA370_CallEveryHandler,wspace,
                RTCA370_CallEveryDelay,RTCA370_CallEveryHandler,wspace    );
#endif
    }
    fix_needed = 0;
  }

  return NULL;
}
@


1.2
log
@Version RO_3_71 merged
@
text
@d61 1
a61 1
#     if Debug
d66 1
a66 1
#     endif
@


1.1
log
@file RTCAfix was initially added on branch RO_3_70_to_3_71.
@
text
@d1 72
@


1.1.4.1
log
@Version RO_3_71 taken
@
text
@a0 72
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* patches/370/RTCAfix.h */

/*
   unconditional fix for RTCAdjust

   - On ROM start, RTCAdjust installs two CallEvery's instead of one. One is
     installed for module init, one for Service_Reset. The two are typically
     a few seconds apart, and the second can make a very large adjustment,
     based on an error over the very small interval, which is not readjusted
     for about an hour (the CallEvery period). The upshot is that the centisecond
     timing reference may run very fast or slow (several %) in some hours.

     This cannot be patched as such (the problem occurs during ROM boot), but
     can be fixed as a run time restoration of the intended single CallEvery.

     Hence, this routine returns NULL patches, but does the fix the first time
     it is called. It should be perfectly safe to mess with RTCAdjust's CallEvery
     at this time, because ROMPatch will be run by !Boot, long before the
     first CallEvery is due.
*/

/* kernel.h and swis.h are included by main code */

/* values correct for RISC OS 3.70 */
#define RTCA370_ROMaddress       0x39c9634          /* start of module */
#define RTCA370_CallEveryHandler 0x39c97d0          /* address of handler */
#define RTCA370_CallEveryDelay   (60*60*100 - 1)    /* for 1 hour */

static patchentry_t *RTCAfix370_proc(void *handle)
{
  _kernel_oserror *e;
  uint32          addr,wspace;

  static int fix_needed = 1;

  if (fix_needed)
  {
    /* check ROM version of RTCAdjust is active, and get its workspace address */
    e = _swix(OS_Module,_INR(0,1)|_OUTR(3,4),18,"RTCAdjust",&addr,&wspace);
    if (!e && (addr == RTCA370_ROMaddress))
    {
      /* remove current CallEvery's (both will be removed) */
      _swix(OS_RemoveTickerEvent,_INR(0,1),RTCA370_CallEveryHandler,wspace);
      /* now install the intended single CallEvery */
      _swix(OS_CallEvery,_INR(0,2),RTCA370_CallEveryDelay,RTCA370_CallEveryHandler,wspace);
#     if Debug
        fprintf(stderr,"RTCAfix: OS_RemoveTickerEvent,%8.8x,%8.8x\n"
                       "RTCAfix: OS_CallEvery,%1d,%8.8x,%8.8x\n",
                RTCA370_CallEveryHandler,wspace,
                RTCA370_CallEveryDelay,RTCA370_CallEveryHandler,wspace    );
#     endif
    }
    fix_needed = 0;
  }

  return NULL;
}
@


1.1.2.1
log
@Merged from 3.71 CD
@
text
@a0 72
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* patches/370/RTCAfix.h */

/*
   unconditional fix for RTCAdjust

   - On ROM start, RTCAdjust installs two CallEvery's instead of one. One is
     installed for module init, one for Service_Reset. The two are typically
     a few seconds apart, and the second can make a very large adjustment,
     based on an error over the very small interval, which is not readjusted
     for about an hour (the CallEvery period). The upshot is that the centisecond
     timing reference may run very fast or slow (several %) in some hours.

     This cannot be patched as such (the problem occurs during ROM boot), but
     can be fixed as a run time restoration of the intended single CallEvery.

     Hence, this routine returns NULL patches, but does the fix the first time
     it is called. It should be perfectly safe to mess with RTCAdjust's CallEvery
     at this time, because ROMPatch will be run by !Boot, long before the
     first CallEvery is due.
*/

/* kernel.h and swis.h are included by main code */

/* values correct for RISC OS 3.70 */
#define RTCA370_ROMaddress       0x39c9634          /* start of module */
#define RTCA370_CallEveryHandler 0x39c97d0          /* address of handler */
#define RTCA370_CallEveryDelay   (60*60*100 - 1)    /* for 1 hour */

static patchentry_t *RTCAfix370_proc(void *handle)
{
  _kernel_oserror *e;
  uint32          addr,wspace;

  static int fix_needed = 1;

  if (fix_needed)
  {
    /* check ROM version of RTCAdjust is active, and get its workspace address */
    e = _swix(OS_Module,_INR(0,1)|_OUTR(3,4),18,"RTCAdjust",&addr,&wspace);
    if (!e && (addr == RTCA370_ROMaddress))
    {
      /* remove current CallEvery's (both will be removed) */
      _swix(OS_RemoveTickerEvent,_INR(0,1),RTCA370_CallEveryHandler,wspace);
      /* now install the intended single CallEvery */
      _swix(OS_CallEvery,_INR(0,2),RTCA370_CallEveryDelay,RTCA370_CallEveryHandler,wspace);
#     if Debug
        fprintf(stderr,"RTCAfix: OS_RemoveTickerEvent,%8.8x,%8.8x\n"
                       "RTCAfix: OS_CallEvery,%1d,%8.8x,%8.8x\n",
                RTCA370_CallEveryHandler,wspace,
                RTCA370_CallEveryDelay,RTCA370_CallEveryHandler,wspace    );
#     endif
    }
    fix_needed = 0;
  }

  return NULL;
}
@
