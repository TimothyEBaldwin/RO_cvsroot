head	1.5;
access;
symbols
	Boot-1_26:1.5
	Boot-1_25:1.4
	Boot-1_24:1.4
	Boot-1_23:1.4
	Boot-1_22:1.4
	Boot-1_21:1.4
	Boot-1_20:1.4
	Boot-1_19:1.4
	Boot-1_18:1.4
	Boot-1_17:1.3
	Boot-1_16:1.3
	Boot-1_15:1.3
	Boot-1_14:1.3
	Boot-1_13:1.3
	Boot-1_12:1.3
	Boot-1_11:1.3
	Boot-1_10:1.3
	Boot-1_09:1.3
	Boot-1_08:1.3
	Boot-1_07:1.3
	Boot-1_06:1.3
	Boot-1_05:1.3
	Boot-1_04:1.3
	Boot-1_03:1.3
	Boot-1_02:1.3
	Boot-1_01:1.3
	Boot-1_00:1.3
	Boot-0_99:1.3
	Boot-0_98:1.3
	Boot-0_97:1.3
	Boot-0_96:1.3
	Boot-0_95:1.3
	Boot-0_94:1.2
	Boot-0_93:1.2
	Boot-0_92:1.2
	Boot-0_91:1.2
	Boot-0_90:1.2
	Boot-0_89:1.2
	Boot-0_88:1.2
	Boot-0_87:1.2
	Boot-0_86:1.2
	Boot-0_85:1.2
	Boot-0_84:1.2
	Boot-0_83:1.2
	Boot-0_82:1.2
	Boot-0_81:1.2
	Boot-0_80:1.2
	Boot-0_79:1.2
	Boot-0_78:1.2
	Boot-0_77:1.2
	Boot-0_76:1.2
	Boot-0_75:1.2
	Boot-0_74:1.2
	Boot-0_73:1.2
	Boot-0_72:1.2
	Boot-0_71:1.2
	Boot-0_70:1.2
	Boot-0_69:1.2
	Boot-0_68:1.2
	Boot-0_67:1.2
	nbingham_boot_991007:1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.2
	Ursula_RiscPC:1.2.0.6
	rthornb_UrsulaBuild-19Aug1998:1.2
	UrsulaBuild_FinalSoftload:1.2
	rthornb_UrsulaBuild-12Aug1998:1.2
	aglover_UrsulaBuild-05Aug1998:1.2
	rthornb_UrsulaBuild-29Jul1998:1.2
	rthornb_UrsulaBuild-22Jul1998:1.2
	rthornb_UrsulaBuild-15Jul1998:1.2
	rthornb_UrsulaBuild-07Jul1998:1.2
	rthornb_UrsulaBuild-17Jun1998:1.2
	rthornb_UrsulaBuild-03Jun1998:1.2
	rthornb_UrsulaBuild-27May1998:1.2
	rthornb_UrsulaBuild-21May1998:1.2
	rthornb_UrsulaBuild_01May1998:1.2
	Daytona:1.2.0.4
	Daytona_bp:1.2
	Ursula:1.2.0.2
	Ursula_bp:1.2
	StrongARM:1.1.0.4
	RO_3_71:1.1.4.1;
locks; strict;
comment	@# @;


1.5
date	2018.02.02.21.36.08;	author jlee;	state Exp;
branches;
next	1.4;
commitid	jlvtBOT0SmsaBkpA;

1.4
date	2013.05.27.20.38.01;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	vUwSuxHXx7U7jjRw;

1.3
date	2012.07.26.07.31.19;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	OlF6qJCeal42L2ew;

1.2
date	97.05.06.11.28.48;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.04.30.18.20.29;	author kbracey;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	97.04.30.18.20.30;	author kbracey;	state Exp;
branches;
next	;

1.1.4.1
date	97.05.06.09.50.48;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Add ROM patches for the ADFS "disc error 20" fix
Detail:
  This set of changes adds a "disc error 20" fix to ADFS for RISC OS 3.50 thru 4.02, using similar code to that used for the fix that was applied to ADFS itself (in ADFS 3.54). This is to resolve issues with modern IDE devices which don't adhere to the DRQ timeout that old versions of the ATA spec mandated.
  File changes (all within Source/ROMPatch):
  - patches/s/ADFS354 - Generic assembler source for the disc error 20 fix
  - ihf2c/c/ihf2c - Source for a C utility that was used to help produce the ROM patch data
  - patches/adfs354,feb - Utility script for building the different versions of the ADFS patch and converting to ROMPatch form
  - patches/350/h/ADFSpatch, patches/360/h/ADFSpatch, patches/370/h/ADFSpatch, patches/371/h/ADFSpatch, patches/402/h/ADFSpatch - Added/updated ADFS patches
  - patches/350/h/patch, patches/371/h/patch, patches/402/h/patch - Include new ADFSpatch files where relevant
  - UK/h/messages - Update ROMPatch version numbers
  - c/rompatch, s/module - Add a word of writable workspace to the module which the ADFS patch can use
  - patches/402/h/CDSFTpatch - Remove duplicate patch (duplicate of RESLVpatch)
  - patches/402/h/MSGSpatch - Document the patches
  - ReadMe, Install/ROMPatch/!RunImage,ff8 - Remove redundant/outdated files (the main Boot makefile will build and install ROMPatch for us)
Admin:
  Tested on a RISC OS 3.70 StrongARM RiscPC with a CF-IDE adapter, disc error 20 is no more
  3.50/3.60/3.70/3.71/4.02 also tested under RPCEmu, manually provoking the different code paths to check hook points are correct


Version 1.26. Tagged as 'Boot-1_26'
@
text
@; Copyright 1997 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;


; module.s

; - required to handle removing patches on a Service_PreReset
; - also removes patches when rmkill'ed, but this should be used with caution
; - designed for insertion into RMA (not ROM-able)
; - has local cache/TLB flushing code, currently copes with ARM 6,7,StrongARM
; - suitable for 3.50, 3.60, 3.70, 3.71 & Ursula

        AREA    |main|, CODE, READONLY

        EXPORT  |myflush|

        EXPORT  |module|
        EXPORT  |modDAhandler|
        EXPORT  |moddata|
        EXPORT  |moduleend|
        EXPORT  |adfs354_word|

              GBLS   VersionString
VersionString SETS   "2.07 (20 Nov 2017)"

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Services
        GET     UK/messages.s

module
        DCD     0               ; start entry
        DCD     0               ; init entry
        DCD     module_bye      - module
        DCD     module_service  - module
        DCD     module_title    - module
        DCD     module_helpstr  - module
        DCD     0               ; command table
        DCD     0               ; swi chunk
        DCD     0               ; swi code
        DCD     0               ; swi strings
        DCD     0               ; swi name decode code

module_title
        DCB    "ROMPatches",0
        ALIGN
module_helpstr
        DCB    "ROM Patches",9,VersionString,0
        ALIGN

module_service
        TEQ     r1, #Service_PreReset
        TEQNE   r1, #Service_DynamicAreaRenumber
        MOVNE   pc, r14
        TEQ     r1, #Service_PreReset
        BEQ     serv_prereset

;Service_DynamicAreaRenumber
        Push    "r14"
        LDR     r14,modDAN
        CMP     r14,#0
        Pull    "pc", EQ
        CMP     r14,r2
        STREQ   r3,modDAN
        Pull    "pc"

;Service_PreReset
serv_prereset
        Push    "r14"
        BL      unpatchrom
        Pull    "pc"

module_bye
        Push    "r0-r1, r14"
        BL      unpatchrom
        MOV     r0,#1
        LDR     r1,modDAN
        CMP     r1,#0
        SWINE   XOS_DynamicArea       ;remove dynamic area
        MOV     r1,#0
        STR     r1,modDAN             ;mark as removed
        Pull    "r0-r1, pc"

unpatchrom
        Push    "r0-r4, lr"
        LDR     r0,modL1PT
        CMP     r0,#0
        BEQ     unpatchromdone
        ADR     r1,modL1PTentries
        LDR     r2,modROMsections     ;up to 4x1M sections
        MOV     r4,pc
        ORR     r3,r4,#I_bit
        TEQP    r3,#0                 ;disable interrupts
unpatchromloop
        LDR     r3,[r1],#4
        STR     r3,[r0],#4
        SUBS    r2,r2,#1
        BNE     unpatchromloop
        BL      myflush
        TEQP    r4,#0                 ;restore IRQ state
        MOV     r0,#0
        STR     r0,modL1PT            ;mark as unpatched
unpatchromdone
        Pull    "r0-r4, pc"


;flush cache(s) and TLB(s), without using any ROM code, since
;ROM mapping is being messed about with
;
;copes with ARM 6,7 or StrongARM (not currently ARM 8)
;
;this routine is part of module, but also called by app
;
myflush
        Push    "r0-r4, lr"
        MRC     p15,0,r4,c0,c0,0    ;read ID reg
        AND     r4,r4,#&F000
;flush cache
        CMP     r4,#&A000
        MCRNE   p15,0,r0,c7,c0,0    ;flush ARM 6/7 cache
        BNE     flushTLB
;StrongARM then (must also therefore be RISC OS 3.70 or later)
        LDR     r2,modFlipFlop
        LDR     r1,[r2]
        EOR     r1,r1,#16*1024      ;next cleaner area
        STR     r1,[r2]       
        ADD     r2,r1,#16*1024      ;16k data cache
cleanDCloop
        LDR     r3,[r1],#32         ;read (clean/flush) next cache line
        TEQ     r2,r1
        BNE     cleanDCloop
        MCR     p15,0,r0,c7,c10,4   ;drain WB
        MCR     p15,0,r0,c7,c5,0    ;flush IC
        NOP
        NOP
        NOP
        NOP
flushTLB
        CMP     r4,#&A000
        MCREQ   p15,0,r0,c8,c7,0    ;flush StrongARM TLB(s)
        MCRNE   p15,0,r0,c5,c0,0    ;flush ARM 6/7 TLB
        Pull    "r0-r4, pc"

modDAhandler
        CMP     r0,#2           ;preshrink?
        BEQ     mdah_preshrink
        CMP     r0,#0           ;pregrow?  (NB clears V)
        MOVNE   pc,r14
;pregrow
        Push    "r0-r3"
        LDR     r0,modnextpageneeded
        LDR     r3,modfirstpagenotneeded
        CMP     r0,r3           ;allow pregrow only if not fully grown yet
        BHS     mdah_pregrowerror
mdah_pregrowloop
        STR     r0,[r1],#12     ;fill in next required page number in block
        ADD     r0,r0,#1
        SUBS    r2,r2,#1
        BNE     mdah_pregrowloop
        STR     r0,modnextpageneeded
        Pull    "r0-r3"
        MOV     pc,r14
mdah_pregrowerror
        ADR     r0,errorNaffOff
        CMP     pc,#&80000000   ;refuse (set V flag)
        Pull    "r0-r3"
        MOV     pc,r14
;
mdah_preshrink
        LDR     r0,modL1PT
        CMP     r0,#0           ;refuse preshrink unless patches removed
        MOVEQ   r0,#2           ;restore r0=2 reason code, preshrink allowed
        MOVNE   r3,#0           ;no shrinkage
        ADRNE   r0,errorNaffOff
        CMPNE   pc,#&80000000   ;refuse (set V flag)
        MOV     pc,r14

errorNaffOff
        DCD     0
        DCB     HandlerSaysNaffOff,0
        ALIGN

;values will be poked in by C (after module is inserted, and copied to RMA)
moddata
modnextpageneeded            ;next page number required for DA on next grow
        DCD     0
modfirstpagenotneeded        ;pages modfirstpageneeded..modfirstpagenotneeded-1 still required
        DCD     0
modDAN
        DCD     0            ;dynamic area number for patches
modFlipFlop
        DCD     0            ;StrongARM cache maintenance
modROMsections
        DCD     0            ;number of sections the unpatched ROM occupies
modL1PT
        DCD     0            ;L1PT address for ROM
modL1PTentries
        DCD     0            ;up to 4 entries to map unpatched ROM as 4 sections
        DCD     0
        DCD     0
        DCD     0
adfs354_word
        DCD     0            ;Writable word needed by ADFS "disc error 20" patch

moduleend

        END
@


1.4
log
@Update ROM patcher to understand Ursula kernels
The ROM patcher relied on lots of grubby internal knowledge of kernel addresses, some of which moved for Ursula
* L1PT now discovered with OS_ReadSysInfo 6
* CAM now discovered with OS_ReadSysInfo 6
* The StrongARM cleaner flipflop now discovered with OS_ReadSysInfo 6
* Option to ignore the ROM checksum where it is known to be duff (eg. personalised copies of RISC OS 4)

Also
* Remove RO430Hook from the output pending more testing
* Readd SoundDMA for RISC OS 3.60


Version 1.18. Tagged as 'Boot-1_18'
@
text
@d33 1
d36 1
a36 1
VersionString SETS   "2.06 (27 May 2013)"
d215 2
@


1.3
log
@Generate ROM patches from source
It looks like the source to the ROM patches got lost in one of the numerous reorganisations, so while "ROMPatch2" was here "ROMPatch3" including the crucial > 2GB drive lockup fix were lost.
* Reverse engineered ROMPatch3, see userdocs/v204/!ReadMe
* Added support to the patch tool for 2MB ROMs as used in RISC OS 3.50
* Convert the BASIC patch for 3.50 (in Sources/ROMPatch4M) into patch tool format, unfortunately it's not clear what all the patches actually do so they're mostly grouped by module with little explanation
* Removed source attribution from obey files copied to the user
* Use Push/Pull macros
Tested by applying the original patch to a ROM, saving it, then applying this patch, and diffing the result.

Version 0.95. Tagged as 'Boot-0_95'
@
text
@d23 1
d35 1
a35 1
VersionString SETS   "2.05 (24 Jul 2012)"
a42 4
; - valid kernel workspace address for RISC OS 3.70, 3.71
; - does not exist and not used for RISC OS 3.60
ARMA_Cleaner_flipflop        * &178

d135 1
a135 1
        MOV     r2,#ARMA_Cleaner_flipflop
d203 2
a215 1
        DCD     0
@


1.2
log
@Version RO_3_71 merged
@
text
@d17 1
a17 1
; s.module
d26 1
a26 1
        EXPORT |myflush|
d28 4
a31 4
        EXPORT |module|
        EXPORT |modDAhandler|
        EXPORT |moddata|
        EXPORT |moduleend|
d34 1
a34 3
VersionString SETS   "2.02 (24-Feb-97)"

        GET   UK.s.messages
d36 5
a45 6

Service_PreReset             * &45
Service_DynamicAreaRenumber  * &92
XOS_DynamicArea              * &20066
I_bit                        * &8000000 ;interrupt disable

d72 3
a74 2
;serv_DArenum
        STMFD   r13!,{r14}
d77 1
a77 1
        LDMEQFD r13!,{pc}
d80 3
a82 1
        LDMFD   r13!,{pc}
d84 1
a84 1
        STMFD   r13!, {r14}
d86 1
a86 1
        LDMFD   r13!, {pc}
d89 1
a89 1
        STMFD   r13!, {r0,r1,r14}
d97 1
a97 1
        LDMFD   r13!, {r0,r1,pc}
d100 1
a100 1
        STMFD   r13!,{r0-r4,lr}
d105 1
a105 1
        MOV     r2,#4
d119 1
a119 1
        LDMFD   r13!,{r0-r4,pc}
d130 1
a130 1
        STMFD   r13!,{r0-r4,lr}
d157 1
a157 1
        LDMFD   r13!,{r0-r4,pc}
d165 1
a165 1
        STMFD   r13!,{r0-r3}
d176 1
a176 1
        LDMFD   r13!,{r0-r3}
d181 1
a181 1
        LDMFD   r13!,{r0-r3}
d206 2
d211 1
a211 1
        DCD     0            ;4 entries to map unpatched ROM as 4 sections
@


1.1
log
@file module was initially added on branch RO_3_70_to_3_71.
@
text
@d1 217
@


1.1.4.1
log
@Version RO_3_71 taken
@
text
@a0 217
; Copyright 1997 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;


; s.module

; - required to handle removing patches on a Service_PreReset
; - also removes patches when rmkill'ed, but this should be used with caution
; - designed for insertion into RMA (not ROM-able)
; - has local cache/TLB flushing code, currently copes with ARM 6,7,StrongARM

        AREA    |main|, CODE, READONLY

        EXPORT |myflush|

        EXPORT |module|
        EXPORT |modDAhandler|
        EXPORT |moddata|
        EXPORT |moduleend|

              GBLS   VersionString
VersionString SETS   "2.02 (24-Feb-97)"

        GET   UK.s.messages


; - valid kernel workspace address for RISC OS 3.70, 3.71
; - does not exist and not used for RISC OS 3.60
ARMA_Cleaner_flipflop        * &178


Service_PreReset             * &45
Service_DynamicAreaRenumber  * &92
XOS_DynamicArea              * &20066
I_bit                        * &8000000 ;interrupt disable

module
        DCD     0               ; start entry
        DCD     0               ; init entry
        DCD     module_bye      - module
        DCD     module_service  - module
        DCD     module_title    - module
        DCD     module_helpstr  - module
        DCD     0               ; command table
        DCD     0               ; swi chunk
        DCD     0               ; swi code
        DCD     0               ; swi strings
        DCD     0               ; swi name decode code

module_title
        DCB    "ROMPatches",0
        ALIGN
module_helpstr
        DCB    "ROM Patches",9,VersionString,0
        ALIGN

module_service
        TEQ     r1, #Service_PreReset
        TEQNE   r1, #Service_DynamicAreaRenumber
        MOVNE   pc, r14
        TEQ     r1, #Service_PreReset
        BEQ     serv_prereset
;serv_DArenum
        STMFD   r13!,{r14}
        LDR     r14,modDAN
        CMP     r14,#0
        LDMEQFD r13!,{pc}
        CMP     r14,r2
        STREQ   r3,modDAN
        LDMFD   r13!,{pc}
serv_prereset
        STMFD   r13!, {r14}
        BL      unpatchrom
        LDMFD   r13!, {pc}

module_bye
        STMFD   r13!, {r0,r1,r14}
        BL      unpatchrom
        MOV     r0,#1
        LDR     r1,modDAN
        CMP     r1,#0
        SWINE   XOS_DynamicArea       ;remove dynamic area
        MOV     r1,#0
        STR     r1,modDAN             ;mark as removed
        LDMFD   r13!, {r0,r1,pc}

unpatchrom
        STMFD   r13!,{r0-r4,lr}
        LDR     r0,modL1PT
        CMP     r0,#0
        BEQ     unpatchromdone
        ADR     r1,modL1PTentries
        MOV     r2,#4
        MOV     r4,pc
        ORR     r3,r4,#I_bit
        TEQP    r3,#0                 ;disable interrupts
unpatchromloop
        LDR     r3,[r1],#4
        STR     r3,[r0],#4
        SUBS    r2,r2,#1
        BNE     unpatchromloop
        BL      myflush
        TEQP    r4,#0                 ;restore IRQ state
        MOV     r0,#0
        STR     r0,modL1PT            ;mark as unpatched
unpatchromdone
        LDMFD   r13!,{r0-r4,pc}


;flush cache(s) and TLB(s), without using any ROM code, since
;ROM mapping is being messed about with
;
;copes with ARM 6,7 or StrongARM (not currently ARM 8)
;
;this routine is part of module, but also called by app
;
myflush
        STMFD   r13!,{r0-r4,lr}
        MRC     p15,0,r4,c0,c0,0    ;read ID reg
        AND     r4,r4,#&F000
;flush cache
        CMP     r4,#&A000
        MCRNE   p15,0,r0,c7,c0,0    ;flush ARM 6/7 cache
        BNE     flushTLB
;StrongARM then (must also therefore be RISC OS 3.70 or later)
        MOV     r2,#ARMA_Cleaner_flipflop
        LDR     r1,[r2]
        EOR     r1,r1,#16*1024      ;next cleaner area
        STR     r1,[r2]       
        ADD     r2,r1,#16*1024      ;16k data cache
cleanDCloop
        LDR     r3,[r1],#32         ;read (clean/flush) next cache line
        TEQ     r2,r1
        BNE     cleanDCloop
        MCR     p15,0,r0,c7,c10,4   ;drain WB
        MCR     p15,0,r0,c7,c5,0    ;flush IC
        NOP
        NOP
        NOP
        NOP
flushTLB
        CMP     r4,#&A000
        MCREQ   p15,0,r0,c8,c7,0    ;flush StrongARM TLB(s)
        MCRNE   p15,0,r0,c5,c0,0    ;flush ARM 6/7 TLB
        LDMFD   r13!,{r0-r4,pc}

modDAhandler
        CMP     r0,#2           ;preshrink?
        BEQ     mdah_preshrink
        CMP     r0,#0           ;pregrow?  (NB clears V)
        MOVNE   pc,r14
;pregrow
        STMFD   r13!,{r0-r3}
        LDR     r0,modnextpageneeded
        LDR     r3,modfirstpagenotneeded
        CMP     r0,r3           ;allow pregrow only if not fully grown yet
        BHS     mdah_pregrowerror
mdah_pregrowloop
        STR     r0,[r1],#12     ;fill in next required page number in block
        ADD     r0,r0,#1
        SUBS    r2,r2,#1
        BNE     mdah_pregrowloop
        STR     r0,modnextpageneeded
        LDMFD   r13!,{r0-r3}
        MOV     pc,r14
mdah_pregrowerror
        ADR     r0,errorNaffOff
        CMP     pc,#&80000000   ;refuse (set V flag)
        LDMFD   r13!,{r0-r3}
        MOV     pc,r14
;
mdah_preshrink
        LDR     r0,modL1PT
        CMP     r0,#0           ;refuse preshrink unless patches removed
        MOVEQ   r0,#2           ;restore r0=2 reason code, preshrink allowed
        MOVNE   r3,#0           ;no shrinkage
        ADRNE   r0,errorNaffOff
        CMPNE   pc,#&80000000   ;refuse (set V flag)
        MOV     pc,r14

errorNaffOff
        DCD     0
        DCB     HandlerSaysNaffOff,0
        ALIGN

;values will be poked in by C (after module is inserted, and copied to RMA)
moddata
modnextpageneeded            ;next page number required for DA on next grow
        DCD     0
modfirstpagenotneeded        ;pages modfirstpageneeded..modfirstpagenotneeded-1 still required
        DCD     0
modDAN
        DCD     0            ;dynamic area number for patches
modL1PT
        DCD     0            ;L1PT address for ROM
modL1PTentries
        DCD     0            ;4 entries to map unpatched ROM as 4 sections
        DCD     0
        DCD     0
        DCD     0

moduleend
        DCD     0

        END
@


1.1.2.1
log
@Merged from 3.71 CD
@
text
@a0 217
; Copyright 1997 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;


; s.module

; - required to handle removing patches on a Service_PreReset
; - also removes patches when rmkill'ed, but this should be used with caution
; - designed for insertion into RMA (not ROM-able)
; - has local cache/TLB flushing code, currently copes with ARM 6,7,StrongARM

        AREA    |main|, CODE, READONLY

        EXPORT |myflush|

        EXPORT |module|
        EXPORT |modDAhandler|
        EXPORT |moddata|
        EXPORT |moduleend|

              GBLS   VersionString
VersionString SETS   "2.02 (24-Feb-97)"

        GET   UK.s.messages


; - valid kernel workspace address for RISC OS 3.70, 3.71
; - does not exist and not used for RISC OS 3.60
ARMA_Cleaner_flipflop        * &178


Service_PreReset             * &45
Service_DynamicAreaRenumber  * &92
XOS_DynamicArea              * &20066
I_bit                        * &8000000 ;interrupt disable

module
        DCD     0               ; start entry
        DCD     0               ; init entry
        DCD     module_bye      - module
        DCD     module_service  - module
        DCD     module_title    - module
        DCD     module_helpstr  - module
        DCD     0               ; command table
        DCD     0               ; swi chunk
        DCD     0               ; swi code
        DCD     0               ; swi strings
        DCD     0               ; swi name decode code

module_title
        DCB    "ROMPatches",0
        ALIGN
module_helpstr
        DCB    "ROM Patches",9,VersionString,0
        ALIGN

module_service
        TEQ     r1, #Service_PreReset
        TEQNE   r1, #Service_DynamicAreaRenumber
        MOVNE   pc, r14
        TEQ     r1, #Service_PreReset
        BEQ     serv_prereset
;serv_DArenum
        STMFD   r13!,{r14}
        LDR     r14,modDAN
        CMP     r14,#0
        LDMEQFD r13!,{pc}
        CMP     r14,r2
        STREQ   r3,modDAN
        LDMFD   r13!,{pc}
serv_prereset
        STMFD   r13!, {r14}
        BL      unpatchrom
        LDMFD   r13!, {pc}

module_bye
        STMFD   r13!, {r0,r1,r14}
        BL      unpatchrom
        MOV     r0,#1
        LDR     r1,modDAN
        CMP     r1,#0
        SWINE   XOS_DynamicArea       ;remove dynamic area
        MOV     r1,#0
        STR     r1,modDAN             ;mark as removed
        LDMFD   r13!, {r0,r1,pc}

unpatchrom
        STMFD   r13!,{r0-r4,lr}
        LDR     r0,modL1PT
        CMP     r0,#0
        BEQ     unpatchromdone
        ADR     r1,modL1PTentries
        MOV     r2,#4
        MOV     r4,pc
        ORR     r3,r4,#I_bit
        TEQP    r3,#0                 ;disable interrupts
unpatchromloop
        LDR     r3,[r1],#4
        STR     r3,[r0],#4
        SUBS    r2,r2,#1
        BNE     unpatchromloop
        BL      myflush
        TEQP    r4,#0                 ;restore IRQ state
        MOV     r0,#0
        STR     r0,modL1PT            ;mark as unpatched
unpatchromdone
        LDMFD   r13!,{r0-r4,pc}


;flush cache(s) and TLB(s), without using any ROM code, since
;ROM mapping is being messed about with
;
;copes with ARM 6,7 or StrongARM (not currently ARM 8)
;
;this routine is part of module, but also called by app
;
myflush
        STMFD   r13!,{r0-r4,lr}
        MRC     p15,0,r4,c0,c0,0    ;read ID reg
        AND     r4,r4,#&F000
;flush cache
        CMP     r4,#&A000
        MCRNE   p15,0,r0,c7,c0,0    ;flush ARM 6/7 cache
        BNE     flushTLB
;StrongARM then (must also therefore be RISC OS 3.70 or later)
        MOV     r2,#ARMA_Cleaner_flipflop
        LDR     r1,[r2]
        EOR     r1,r1,#16*1024      ;next cleaner area
        STR     r1,[r2]       
        ADD     r2,r1,#16*1024      ;16k data cache
cleanDCloop
        LDR     r3,[r1],#32         ;read (clean/flush) next cache line
        TEQ     r2,r1
        BNE     cleanDCloop
        MCR     p15,0,r0,c7,c10,4   ;drain WB
        MCR     p15,0,r0,c7,c5,0    ;flush IC
        NOP
        NOP
        NOP
        NOP
flushTLB
        CMP     r4,#&A000
        MCREQ   p15,0,r0,c8,c7,0    ;flush StrongARM TLB(s)
        MCRNE   p15,0,r0,c5,c0,0    ;flush ARM 6/7 TLB
        LDMFD   r13!,{r0-r4,pc}

modDAhandler
        CMP     r0,#2           ;preshrink?
        BEQ     mdah_preshrink
        CMP     r0,#0           ;pregrow?  (NB clears V)
        MOVNE   pc,r14
;pregrow
        STMFD   r13!,{r0-r3}
        LDR     r0,modnextpageneeded
        LDR     r3,modfirstpagenotneeded
        CMP     r0,r3           ;allow pregrow only if not fully grown yet
        BHS     mdah_pregrowerror
mdah_pregrowloop
        STR     r0,[r1],#12     ;fill in next required page number in block
        ADD     r0,r0,#1
        SUBS    r2,r2,#1
        BNE     mdah_pregrowloop
        STR     r0,modnextpageneeded
        LDMFD   r13!,{r0-r3}
        MOV     pc,r14
mdah_pregrowerror
        ADR     r0,errorNaffOff
        CMP     pc,#&80000000   ;refuse (set V flag)
        LDMFD   r13!,{r0-r3}
        MOV     pc,r14
;
mdah_preshrink
        LDR     r0,modL1PT
        CMP     r0,#0           ;refuse preshrink unless patches removed
        MOVEQ   r0,#2           ;restore r0=2 reason code, preshrink allowed
        MOVNE   r3,#0           ;no shrinkage
        ADRNE   r0,errorNaffOff
        CMPNE   pc,#&80000000   ;refuse (set V flag)
        MOV     pc,r14

errorNaffOff
        DCD     0
        DCB     HandlerSaysNaffOff,0
        ALIGN

;values will be poked in by C (after module is inserted, and copied to RMA)
moddata
modnextpageneeded            ;next page number required for DA on next grow
        DCD     0
modfirstpagenotneeded        ;pages modfirstpageneeded..modfirstpagenotneeded-1 still required
        DCD     0
modDAN
        DCD     0            ;dynamic area number for patches
modL1PT
        DCD     0            ;L1PT address for ROM
modL1PTentries
        DCD     0            ;4 entries to map unpatched ROM as 4 sections
        DCD     0
        DCD     0
        DCD     0

moduleend
        DCD     0

        END
@
