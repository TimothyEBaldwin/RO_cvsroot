head	1.4;
access;
symbols
	Boot-1_26:1.4
	Boot-1_25:1.4
	Boot-1_24:1.4
	Boot-1_23:1.4
	Boot-1_22:1.4
	Boot-1_21:1.4
	Boot-1_20:1.4
	Boot-1_19:1.4
	Boot-1_18:1.4
	Boot-1_17:1.3
	Boot-1_16:1.3
	Boot-1_15:1.3
	Boot-1_14:1.3
	Boot-1_13:1.3
	Boot-1_12:1.3
	Boot-1_11:1.3
	Boot-1_10:1.3
	Boot-1_09:1.3
	Boot-1_08:1.3
	Boot-1_07:1.3
	Boot-1_06:1.3
	Boot-1_05:1.3
	Boot-1_04:1.3
	Boot-1_03:1.3
	Boot-1_02:1.3
	Boot-1_01:1.3
	Boot-1_00:1.3
	Boot-0_99:1.3
	Boot-0_98:1.3
	Boot-0_97:1.3
	Boot-0_96:1.3
	Boot-0_95:1.3
	Boot-0_94:1.2
	Boot-0_93:1.2
	Boot-0_92:1.2
	Boot-0_91:1.2
	Boot-0_90:1.2
	Boot-0_89:1.2
	Boot-0_88:1.2
	Boot-0_87:1.2
	Boot-0_86:1.2
	Boot-0_85:1.2
	Boot-0_84:1.2
	Boot-0_83:1.2
	Boot-0_82:1.2
	Boot-0_81:1.2
	Boot-0_80:1.2
	Boot-0_79:1.2
	Boot-0_78:1.2
	Boot-0_77:1.2
	Boot-0_76:1.2
	Boot-0_75:1.2
	Boot-0_74:1.2
	Boot-0_73:1.2
	Boot-0_72:1.2
	Boot-0_71:1.2
	Boot-0_70:1.2
	Boot-0_69:1.2
	Boot-0_68:1.2
	Boot-0_67:1.2
	nbingham_boot_991007:1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.2
	Ursula_RiscPC:1.2.0.6
	rthornb_UrsulaBuild-19Aug1998:1.2
	UrsulaBuild_FinalSoftload:1.2
	rthornb_UrsulaBuild-12Aug1998:1.2
	aglover_UrsulaBuild-05Aug1998:1.2
	rthornb_UrsulaBuild-29Jul1998:1.2
	rthornb_UrsulaBuild-22Jul1998:1.2
	rthornb_UrsulaBuild-15Jul1998:1.2
	rthornb_UrsulaBuild-07Jul1998:1.2
	rthornb_UrsulaBuild-17Jun1998:1.2
	rthornb_UrsulaBuild-03Jun1998:1.2
	rthornb_UrsulaBuild-27May1998:1.2
	rthornb_UrsulaBuild-21May1998:1.2
	rthornb_UrsulaBuild_01May1998:1.2
	Daytona:1.2.0.4
	Daytona_bp:1.2
	Ursula:1.2.0.2
	Ursula_bp:1.2
	StrongARM:1.1.0.4
	RO_3_71:1.1.4.1;
locks; strict;
comment	@# @;


1.4
date	2013.05.27.20.38.01;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	vUwSuxHXx7U7jjRw;

1.3
date	2012.07.26.07.31.19;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	OlF6qJCeal42L2ew;

1.2
date	97.05.06.11.28.45;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.04.30.18.20.28;	author kbracey;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	97.04.30.18.20.28;	author kbracey;	state Exp;
branches;
next	;

1.1.4.1
date	97.05.06.09.50.46;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update ROM patcher to understand Ursula kernels
The ROM patcher relied on lots of grubby internal knowledge of kernel addresses, some of which moved for Ursula
* L1PT now discovered with OS_ReadSysInfo 6
* CAM now discovered with OS_ReadSysInfo 6
* The StrongARM cleaner flipflop now discovered with OS_ReadSysInfo 6
* Option to ignore the ROM checksum where it is known to be duff (eg. personalised copies of RISC OS 4)

Also
* Remove RO430Hook from the output pending more testing
* Readd SoundDMA for RISC OS 3.60


Version 1.18. Tagged as 'Boot-1_18'
@
text
@; Copyright 1997 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; asmutils.s

        AREA    |main|, CODE, READONLY

        EXPORT  |svcarmid|
        EXPORT  |svccopy|
        EXPORT  |svcpeek|
        EXPORT  |svcpoke|
        EXPORT  |svcsetROML1PT|
                
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System

; uint32 svcarmid(void)
svcarmid
        SWI     XOS_EnterOS
        MRC     p15,0,r0,c0,c0,0
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14

; void svccopy(uint32 *src,uint32 *dest,int bytes)
svccopy
        SWI     XOS_EnterOS
copyloop
        LDR     r3, [r0], #4
        STR     r3, [r1], #4
        SUBS    r2, r2, #4
        BNE     copyloop
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14

; uint32 svcpeek(uint32 *addr)
svcpeek
        SWI     XOS_EnterOS
        LDR     r0, [r0]
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14

; void svcpoke(uint32 *addr, uint32 val)
svcpoke
        SWI     XOS_EnterOS
        STR     r1, [r0]
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14

; void svcsetROML1PT(uint32 *L1PTaddr, uint32 *L1PTvals, int count, void *flushfn)
svcsetROML1PT
        SWI     XOS_EnterOS
        Push    "r0-r4, r14"
        MOV     r4,pc
        ORR     r3,r4,#I_bit
        TEQP    r3,#0             ;disable interrupts
10
        LDR     r3, [r1], #4
        STR     r3, [r0], #4
        SUBS    r2, r2, #1
        BNE     %BT10

        MOV     lr, pc
        LDR     pc, [sp, #3*4]    ;flush cache(s) and TLB(s) without recourse to ROM

        TEQP    r4,#0             ;restore IRQ state
        MOV     r0, r0
        Pull    "r0-r4, r14"
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14

        END
@


1.3
log
@Generate ROM patches from source
It looks like the source to the ROM patches got lost in one of the numerous reorganisations, so while "ROMPatch2" was here "ROMPatch3" including the crucial > 2GB drive lockup fix were lost.
* Reverse engineered ROMPatch3, see userdocs/v204/!ReadMe
* Added support to the patch tool for 2MB ROMs as used in RISC OS 3.50
* Convert the BASIC patch for 3.50 (in Sources/ROMPatch4M) into patch tool format, unfortunately it's not clear what all the patches actually do so they're mostly grouped by module with little explanation
* Removed source attribution from obey files copied to the user
* Use Push/Pull macros
Tested by applying the original patch to a ROM, saving it, then applying this patch, and diffing the result.

Version 0.95. Tagged as 'Boot-0_95'
@
text
@a25 2
        IMPORT  |myflush|

d66 1
a66 1
; void svcsetROML1PT(uint32 *L1PTaddr, uint32 *L1PTvals, int count)
d73 1
a73 1
svcsetROML1PTloop
d77 5
a81 2
        BNE     svcsetROML1PTloop
        BL      myflush           ;flush cache(s) and TLB(s) without recourse to ROM
d88 1
@


1.2
log
@Version RO_3_71 merged
@
text
@d16 1
a16 4
; s.asmutils

XOS_EnterOS      * &20016
I_bit            * &8000000 ;interrupt disable
d20 11
a30 7
        EXPORT |svcarmid|
        EXPORT |svccopy|
        EXPORT |svcpeek|
        EXPORT |svcpoke|
        EXPORT |svcsetROML1PT|

        IMPORT |myflush|
d71 1
a71 1
        STMFD   r13!,{r0-r4,r14}
d83 1
a83 1
        LDMFD   r13!,{r0-r4,r14}
@


1.1
log
@file asmutils was initially added on branch RO_3_70_to_3_71.
@
text
@d1 86
@


1.1.4.1
log
@Version RO_3_71 taken
@
text
@a0 86
; Copyright 1997 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; s.asmutils

XOS_EnterOS      * &20016
I_bit            * &8000000 ;interrupt disable

        AREA    |main|, CODE, READONLY

        EXPORT |svcarmid|
        EXPORT |svccopy|
        EXPORT |svcpeek|
        EXPORT |svcpoke|
        EXPORT |svcsetROML1PT|

        IMPORT |myflush|

; uint32 svcarmid(void)
svcarmid
        SWI     XOS_EnterOS
        MRC     p15,0,r0,c0,c0,0
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14

; void svccopy(uint32 *src,uint32 *dest,int bytes)
svccopy
        SWI     XOS_EnterOS
copyloop
        LDR     r3, [r0], #4
        STR     r3, [r1], #4
        SUBS    r2, r2, #4
        BNE     copyloop
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14

; uint32 svcpeek(uint32 *addr)
svcpeek
        SWI     XOS_EnterOS
        LDR     r0, [r0]
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14

; void svcpoke(uint32 *addr, uint32 val)
svcpoke
        SWI     XOS_EnterOS
        STR     r1, [r0]
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14

; void svcsetROML1PT(uint32 *L1PTaddr, uint32 *L1PTvals, int count)
svcsetROML1PT
        SWI     XOS_EnterOS
        STMFD   r13!,{r0-r4,r14}
        MOV     r4,pc
        ORR     r3,r4,#I_bit
        TEQP    r3,#0             ;disable interrupts
svcsetROML1PTloop
        LDR     r3, [r1], #4
        STR     r3, [r0], #4
        SUBS    r2, r2, #1
        BNE     svcsetROML1PTloop
        BL      myflush           ;flush cache(s) and TLB(s) without recourse to ROM
        TEQP    r4,#0             ;restore IRQ state
        MOV     r0, r0
        LDMFD   r13!,{r0-r4,r14}
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14
        END
@


1.1.2.1
log
@Merged from 3.71 CD
@
text
@a0 86
; Copyright 1997 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; s.asmutils

XOS_EnterOS      * &20016
I_bit            * &8000000 ;interrupt disable

        AREA    |main|, CODE, READONLY

        EXPORT |svcarmid|
        EXPORT |svccopy|
        EXPORT |svcpeek|
        EXPORT |svcpoke|
        EXPORT |svcsetROML1PT|

        IMPORT |myflush|

; uint32 svcarmid(void)
svcarmid
        SWI     XOS_EnterOS
        MRC     p15,0,r0,c0,c0,0
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14

; void svccopy(uint32 *src,uint32 *dest,int bytes)
svccopy
        SWI     XOS_EnterOS
copyloop
        LDR     r3, [r0], #4
        STR     r3, [r1], #4
        SUBS    r2, r2, #4
        BNE     copyloop
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14

; uint32 svcpeek(uint32 *addr)
svcpeek
        SWI     XOS_EnterOS
        LDR     r0, [r0]
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14

; void svcpoke(uint32 *addr, uint32 val)
svcpoke
        SWI     XOS_EnterOS
        STR     r1, [r0]
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14

; void svcsetROML1PT(uint32 *L1PTaddr, uint32 *L1PTvals, int count)
svcsetROML1PT
        SWI     XOS_EnterOS
        STMFD   r13!,{r0-r4,r14}
        MOV     r4,pc
        ORR     r3,r4,#I_bit
        TEQP    r3,#0             ;disable interrupts
svcsetROML1PTloop
        LDR     r3, [r1], #4
        STR     r3, [r0], #4
        SUBS    r2, r2, #1
        BNE     svcsetROML1PTloop
        BL      myflush           ;flush cache(s) and TLB(s) without recourse to ROM
        TEQP    r4,#0             ;restore IRQ state
        MOV     r0, r0
        LDMFD   r13!,{r0-r4,r14}
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14
        END
@
