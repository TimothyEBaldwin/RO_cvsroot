head	1.4;
access;
symbols
	Boot-1_26:1.4
	Boot-1_25:1.4
	Boot-1_24:1.4
	Boot-1_23:1.4
	Boot-1_22:1.4
	Boot-1_21:1.4
	Boot-1_20:1.4
	Boot-1_19:1.4
	Boot-1_18:1.4
	Boot-1_17:1.3
	Boot-1_16:1.3
	Boot-1_15:1.3
	Boot-1_14:1.3
	Boot-1_13:1.3
	Boot-1_12:1.3
	Boot-1_11:1.3
	Boot-1_10:1.3
	Boot-1_09:1.3
	Boot-1_08:1.3
	Boot-1_07:1.3
	Boot-1_06:1.3
	Boot-1_05:1.3
	Boot-1_04:1.3
	Boot-1_03:1.3
	Boot-1_02:1.3
	Boot-1_01:1.3
	Boot-1_00:1.3
	Boot-0_99:1.3
	Boot-0_98:1.3
	Boot-0_97:1.3
	Boot-0_96:1.3
	Boot-0_95:1.3
	Boot-0_94:1.2
	Boot-0_93:1.2
	Boot-0_92:1.2
	Boot-0_91:1.2
	Boot-0_90:1.2
	Boot-0_89:1.2
	Boot-0_88:1.2
	Boot-0_87:1.2
	Boot-0_86:1.2
	Boot-0_85:1.2
	Boot-0_84:1.2
	Boot-0_83:1.2
	Boot-0_82:1.2
	Boot-0_81:1.2
	Boot-0_80:1.2
	Boot-0_79:1.2
	Boot-0_78:1.2
	Boot-0_77:1.2
	Boot-0_76:1.2
	Boot-0_75:1.2
	Boot-0_74:1.2
	Boot-0_73:1.2
	Boot-0_72:1.2
	Boot-0_71:1.2
	Boot-0_70:1.2
	Boot-0_69:1.2
	Boot-0_68:1.2
	Boot-0_67:1.2
	nbingham_boot_991007:1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.2
	Ursula_RiscPC:1.2.0.6
	rthornb_UrsulaBuild-19Aug1998:1.2
	UrsulaBuild_FinalSoftload:1.2
	rthornb_UrsulaBuild-12Aug1998:1.2
	aglover_UrsulaBuild-05Aug1998:1.2
	rthornb_UrsulaBuild-29Jul1998:1.2
	rthornb_UrsulaBuild-22Jul1998:1.2
	rthornb_UrsulaBuild-15Jul1998:1.2
	rthornb_UrsulaBuild-07Jul1998:1.2
	rthornb_UrsulaBuild-17Jun1998:1.2
	rthornb_UrsulaBuild-03Jun1998:1.2
	rthornb_UrsulaBuild-27May1998:1.2
	rthornb_UrsulaBuild-21May1998:1.2
	rthornb_UrsulaBuild_01May1998:1.2
	Daytona:1.2.0.4
	Daytona_bp:1.2
	Ursula:1.2.0.2
	Ursula_bp:1.2
	StrongARM:1.1.0.4
	RO_3_71:1.1.4.1;
locks; strict;
comment	@# @;


1.4
date	2013.05.27.20.37.44;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	vUwSuxHXx7U7jjRw;

1.3
date	2012.07.26.07.31.04;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	OlF6qJCeal42L2ew;

1.2
date	97.05.06.11.27.59;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.04.30.18.19.55;	author kbracey;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	97.04.30.18.19.56;	author kbracey;	state Exp;
branches;
next	;

1.1.4.1
date	97.05.06.09.49.46;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update ROM patcher to understand Ursula kernels
The ROM patcher relied on lots of grubby internal knowledge of kernel addresses, some of which moved for Ursula
* L1PT now discovered with OS_ReadSysInfo 6
* CAM now discovered with OS_ReadSysInfo 6
* The StrongARM cleaner flipflop now discovered with OS_ReadSysInfo 6
* Option to ignore the ROM checksum where it is known to be duff (eg. personalised copies of RISC OS 4)

Also
* Remove RO430Hook from the output pending more testing
* Readd SoundDMA for RISC OS 3.60


Version 1.18. Tagged as 'Boot-1_18'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* defs.h */

#define DEBUG           0
#define REALLY_DO_REMAP 1

/* compiler pacifier */
#define UNUSED(k)       (k)=(k)

/* exit code on error */
#define ErrorReturnCode 257

/* Caution! these defs are valid for RISC OS 3.50, 3.60, 3.70, 3.71.
   Where possible, OS_ReadSysInfo 6 is used in preference to this pixie dust.
   Make sure valid for all ROM versions supported by given release of ROMPatch!
 */

#define CAMstart              0x1e02000  /* soft CAM */
#define ARMA_Cleaner_flipflop 0x178      /* StrongARM cache maintenance */
#define L1PT                  0x2c0c000  /* MMU level 1 page table */

#define ROMstart              0x3800000
#define ROMphysstart                0x0
#define ROMlimit               0x400000  /* Largest ROM patchable */

#define ROMsections(k)      ((k) >> 20)  /*  1M MMU sections      */
#define ROMlpages(k)        ((k) >> 16)  /* 64k MMU large pages   */
#define ROMpages(k)         ((k) >> 12)  /*  4k MMU (small) pages */

typedef unsigned char uint8;
typedef unsigned int uint32;
typedef unsigned short uint16;

typedef struct
{
  uint32 logaddr;
  uint32 PPL;     /* 'page protection level' - protection and flags */
} camentry_t;

/* for logical to physical address translation, via OS_Memory */
typedef struct
{
  uint32 pagenumber;
  uint32 logaddr;
  uint32 physaddr;
} osmemoryblock_t;

/* one entry of patch list */
typedef struct
{
  uint32 *logaddr;
  uint32 oldval;
  uint32 newval;
} patchentry_t;

/* layout of the data in module, to be set by C */
typedef struct
{
  uint32 nextpageneeded;     /* next page number needed to grow area */
  uint32 firstpagenotneeded; /* first page number not needed (determines fully grown) */
  uint32 DAN;                /* dynamic area number */
  uint32 flipflop;           /* StrongARM cache maintenance */
  uint32 sections;           /* used entries in L1PTentries */
  uint32 kernL1PT;           /* address of kernel L1PT entries for ROM */
  uint32 L1PTentries[4];     /* 'unpatch' values of the sections */
} moduledata_t;

/* procedure that returns list of patches
     - patch list terminated by {0,0,0} entry
     - returning NULL means no patches (allows conditional patches)
     - handle is abstract value for passing any data
     - proc must be capable of being called more than once */
typedef patchentry_t * (*patchlist_proc)(void *handle);

/* one entry of list of recognised ROMs */
typedef struct
{
  const uint32   *romcrc;       /* ROM checksum and CRC's */
  uint8           writeprotect; /* whether ROM supports ROM-space write protection */
  uint8           trustsum;     /* whether ROM checksum is correct or not */
  uint16          romsize;      /* the ROM size in MB */
  const char     *patchname;    /* for dynamic Area */
  patchlist_proc *patchlist;    /* list of patch applier procs, terminated by NULL */
} ROMentry_t;
@


1.3
log
@Generate ROM patches from source
It looks like the source to the ROM patches got lost in one of the numerous reorganisations, so while "ROMPatch2" was here "ROMPatch3" including the crucial > 2GB drive lockup fix were lost.
* Reverse engineered ROMPatch3, see userdocs/v204/!ReadMe
* Added support to the patch tool for 2MB ROMs as used in RISC OS 3.50
* Convert the BASIC patch for 3.50 (in Sources/ROMPatch4M) into patch tool format, unfortunately it's not clear what all the patches actually do so they're mostly grouped by module with little explanation
* Removed source attribution from obey files copied to the user
* Use Push/Pull macros
Tested by applying the original patch to a ROM, saving it, then applying this patch, and diffing the result.

Version 0.95. Tagged as 'Boot-0_95'
@
text
@d27 3
a29 2
/* Caution! these defs are valid for RISC OS 3.50, 3.60, 3.70, 3.71. Make
   sure valid for all ROM versions supported by given release of ROMPatch.
d33 2
a34 1
#define PageFlags_Unavailable    0x2000  /* flag bit in CAM PPL word */
a35 1
#define L1PT                  0x2c0c000  /* MMU level 1 page table */
d76 1
d92 3
a94 2
  uint32         *romcrc;       /* ROM checksum and CRC's */
  uint16          writeprotect; /* whether ROM supports ROM-space write protection */
d96 1
a96 1
  char           *patchname;    /* for dynamic Area */
@


1.2
log
@Version RO_3_71 merged
@
text
@d18 5
a22 2
#define Debug 0
#define ReallyDoRemap 1
d27 1
a27 1
/* Caution! these defs are valid for RISC OS 3.60, 3.70, 3.71. Make
d29 1
a29 1
   Note that only 4Mb ROMs currently supported. */
d37 1
a37 1
#define ROMsize                0x400000  /* code assumes 4Mb in various places */
d39 3
a41 3
#define ROMsections (ROMsize >> 20) /*  1M MMU sections      */
#define ROMlpages   (ROMsize >> 16) /* 64k MMU large pages   */
#define ROMpages    (ROMsize >> 12) /*  4k MMU (small) pages */
d45 1
d75 1
d77 1
a77 1
  uint32 L1PTentries[4];     /* 'unpatch' values of the 4 entries */
d90 5
a94 4
  uint32         *romcrc;      /* ROM checksum and CRC's */
  int            writeprotect; /* whether ROM supports ROM-space write protection */
  char           *patchname;   /* for dynamic Area */
  patchlist_proc *patchlist;   /* list of patch applier procs, terminated by NULL */
@


1.1
log
@file defs was initially added on branch RO_3_70_to_3_71.
@
text
@d1 89
@


1.1.4.1
log
@Version RO_3_71 taken
@
text
@a0 89
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* defs.h */

#define Debug 0
#define ReallyDoRemap 1

/* exit code on error */
#define ErrorReturnCode 257

/* Caution! these defs are valid for RISC OS 3.60, 3.70, 3.71. Make
   sure valid for all ROM versions supported by given release of ROMPatch.
   Note that only 4Mb ROMs currently supported. */

#define CAMstart              0x1e02000  /* soft CAM */
#define PageFlags_Unavailable    0x2000  /* flag bit in CAM PPL word */

#define L1PT                  0x2c0c000  /* MMU level 1 page table */
#define ROMstart              0x3800000
#define ROMphysstart                0x0
#define ROMsize                0x400000  /* code assumes 4Mb in various places */

#define ROMsections (ROMsize >> 20) /*  1M MMU sections      */
#define ROMlpages   (ROMsize >> 16) /* 64k MMU large pages   */
#define ROMpages    (ROMsize >> 12) /*  4k MMU (small) pages */

typedef unsigned char uint8;
typedef unsigned int uint32;

typedef struct
{
  uint32 logaddr;
  uint32 PPL;     /* 'page protection level' - protection and flags */
} camentry_t;

/* for logical to physical address translation, via OS_Memory */
typedef struct
{
  uint32 pagenumber;
  uint32 logaddr;
  uint32 physaddr;
} osmemoryblock_t;

/* one entry of patch list */
typedef struct
{
  uint32 *logaddr;
  uint32 oldval;
  uint32 newval;
} patchentry_t;

/* layout of the data in module, to be set by C */
typedef struct
{
  uint32 nextpageneeded;     /* next page number needed to grow area */
  uint32 firstpagenotneeded; /* first page number not needed (determines fully grown) */
  uint32 DAN;                /* dynamic area number */
  uint32 kernL1PT;           /* address of kernel L1PT entries for ROM */
  uint32 L1PTentries[4];     /* 'unpatch' values of the 4 entries */
} moduledata_t;

/* procedure that returns list of patches
     - patch list terminated by {0,0,0} entry
     - returning NULL means no patches (allows conditional patches)
     - handle is abstract value for passing any data
     - proc must be capable of being called more than once */
typedef patchentry_t * (*patchlist_proc)(void *handle);

/* one entry of list of recognised ROMs */
typedef struct
{
  uint32         *romcrc;      /* ROM checksum and CRC's */
  int            writeprotect; /* whether ROM supports ROM-space write protection */
  char           *patchname;   /* for dynamic Area */
  patchlist_proc *patchlist;   /* list of patch applier procs, terminated by NULL */
} ROMentry_t;
@


1.1.2.1
log
@Merged from 3.71 CD
@
text
@a0 89
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* defs.h */

#define Debug 0
#define ReallyDoRemap 1

/* exit code on error */
#define ErrorReturnCode 257

/* Caution! these defs are valid for RISC OS 3.60, 3.70, 3.71. Make
   sure valid for all ROM versions supported by given release of ROMPatch.
   Note that only 4Mb ROMs currently supported. */

#define CAMstart              0x1e02000  /* soft CAM */
#define PageFlags_Unavailable    0x2000  /* flag bit in CAM PPL word */

#define L1PT                  0x2c0c000  /* MMU level 1 page table */
#define ROMstart              0x3800000
#define ROMphysstart                0x0
#define ROMsize                0x400000  /* code assumes 4Mb in various places */

#define ROMsections (ROMsize >> 20) /*  1M MMU sections      */
#define ROMlpages   (ROMsize >> 16) /* 64k MMU large pages   */
#define ROMpages    (ROMsize >> 12) /*  4k MMU (small) pages */

typedef unsigned char uint8;
typedef unsigned int uint32;

typedef struct
{
  uint32 logaddr;
  uint32 PPL;     /* 'page protection level' - protection and flags */
} camentry_t;

/* for logical to physical address translation, via OS_Memory */
typedef struct
{
  uint32 pagenumber;
  uint32 logaddr;
  uint32 physaddr;
} osmemoryblock_t;

/* one entry of patch list */
typedef struct
{
  uint32 *logaddr;
  uint32 oldval;
  uint32 newval;
} patchentry_t;

/* layout of the data in module, to be set by C */
typedef struct
{
  uint32 nextpageneeded;     /* next page number needed to grow area */
  uint32 firstpagenotneeded; /* first page number not needed (determines fully grown) */
  uint32 DAN;                /* dynamic area number */
  uint32 kernL1PT;           /* address of kernel L1PT entries for ROM */
  uint32 L1PTentries[4];     /* 'unpatch' values of the 4 entries */
} moduledata_t;

/* procedure that returns list of patches
     - patch list terminated by {0,0,0} entry
     - returning NULL means no patches (allows conditional patches)
     - handle is abstract value for passing any data
     - proc must be capable of being called more than once */
typedef patchentry_t * (*patchlist_proc)(void *handle);

/* one entry of list of recognised ROMs */
typedef struct
{
  uint32         *romcrc;      /* ROM checksum and CRC's */
  int            writeprotect; /* whether ROM supports ROM-space write protection */
  char           *patchname;   /* for dynamic Area */
  patchlist_proc *patchlist;   /* list of patch applier procs, terminated by NULL */
} ROMentry_t;
@
