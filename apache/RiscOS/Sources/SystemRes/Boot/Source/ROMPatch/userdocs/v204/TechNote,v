head	1.1;
access;
symbols
	Boot-1_26:1.1
	Boot-1_25:1.1
	Boot-1_24:1.1
	Boot-1_23:1.1
	Boot-1_22:1.1
	Boot-1_21:1.1
	Boot-1_20:1.1
	Boot-1_19:1.1
	Boot-1_18:1.1
	Boot-1_17:1.1
	Boot-1_16:1.1
	Boot-1_15:1.1
	Boot-1_14:1.1
	Boot-1_13:1.1
	Boot-1_12:1.1
	Boot-1_11:1.1
	Boot-1_10:1.1
	Boot-1_09:1.1
	Boot-1_08:1.1
	Boot-1_07:1.1
	Boot-1_06:1.1
	Boot-1_05:1.1
	Boot-1_04:1.1
	Boot-1_03:1.1
	Boot-1_02:1.1
	Boot-1_01:1.1
	Boot-1_00:1.1
	Boot-0_99:1.1
	Boot-0_98:1.1
	Boot-0_97:1.1
	Boot-0_96:1.1
	Boot-0_95:1.1;
locks; strict;
comment	@# @;


1.1
date	2012.07.26.07.31.22;	author rsprowson;	state Exp;
branches;
next	;
commitid	OlF6qJCeal42L2ew;


desc
@@


1.1
log
@Generate ROM patches from source
It looks like the source to the ROM patches got lost in one of the numerous reorganisations, so while "ROMPatch2" was here "ROMPatch3" including the crucial > 2GB drive lockup fix were lost.
* Reverse engineered ROMPatch3, see userdocs/v204/!ReadMe
* Added support to the patch tool for 2MB ROMs as used in RISC OS 3.50
* Convert the BASIC patch for 3.50 (in Sources/ROMPatch4M) into patch tool format, unfortunately it's not clear what all the patches actually do so they're mostly grouped by module with little explanation
* Removed source attribution from obey files copied to the user
* Use Push/Pull macros
Tested by applying the original patch to a ROM, saving it, then applying this patch, and diffing the result.

Version 0.95. Tagged as 'Boot-0_95'
@
text
@
Technical note for RISC OS 3.70 and StrongARM, 24-Oct-96
--------------------------------------------------------

You do not need to read this note in order to use the supplied patches;
read the ReadMe file instead. This note is for those who develop code
for RISC OS.

The SA110 (of revision less than 3, as specified in the ARM ID register)
has a bug in the User Register Store Multiple instruction (STM^). This is
the STM that is used to store user mode registers while in a privileged
mode. If the STM^ is executed while a data cache fill is completing the
store address for all but the first register may be wrong.

This should not affect any application or transient code (which will
execute in user mode), nor typical module code, but may affect a few
modules.

If you use STM^ in a module that is designed to work with StrongARM, we
recommend the following workaround for the problem:

    Split the STM^ into a standard STM for the non banked registers
    followed by an STM^ for the banked registers, adjusting the base
    register afterwards as necessary.

A typical example follows:

    ;privileged mode  
    STMIA r0,{r1-r14}^

becomes:

    ;privileged mode
    STMIA r0!,{r1-r12}    ;store non-banked registers, writeback allowed
    STMIA r0,{r13,r14}^   ;store banked registers
    SUB   r0,r0,#12*4     ;adjust base register back

The banked registers are R13 and R14 (it is extremely unlikely that FIQ
code would perform an STM^, since the extra banked registers are
precisely to avoid this need). It may be possible to optimise the base
register adjustment into the following code, depending on how the base
register is used subsequently.

Note that this sequence is non-atomic and does manipulate the base
register value. This is unlikely to be an issue, but the effect of an
interrupt (if enabled) during this sequence may need to be borne in mind.

Similar workarounds apply to other cases. However, you should note the
following standard ARM coding considerations:

  - The first (non-^) STM cannot use writeback if the base register is in
    the store list; this is unlikely, because it is not particularly
    useful to store the base of the stored block in the block.

  - The STM^ must not use writeback.

  - If the base register is one of the banked registers, then a NOP
    should precede the SUB instruction (since the SUB then uses a banked
    register).
@
