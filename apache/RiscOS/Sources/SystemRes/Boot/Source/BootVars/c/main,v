head	4.12;
access;
symbols
	Boot-1_26:4.12
	Boot-1_25:4.12
	Boot-1_24:4.12
	Boot-1_23:4.12
	Boot-1_22:4.12
	Boot-1_21:4.12
	Boot-1_20:4.11
	Boot-1_19:4.11
	Boot-1_18:4.10
	Boot-1_17:4.10
	Boot-1_16:4.10
	Boot-1_15:4.10
	Boot-1_14:4.10
	Boot-1_13:4.10
	Boot-1_12:4.10
	Boot-1_11:4.10
	Boot-1_10:4.10
	Boot-1_09:4.10
	Boot-1_08:4.10
	Boot-1_07:4.10
	Boot-1_06:4.10
	Boot-1_05:4.10
	Boot-1_04:4.10
	Boot-1_03:4.10
	Boot-1_02:4.10
	Boot-1_01:4.10
	Boot-1_00:4.9
	Boot-0_99:4.9
	Boot-0_98:4.9
	Boot-0_97:4.9
	Boot-0_96:4.9
	Boot-0_95:4.9
	Boot-0_94:4.9
	Boot-0_93:4.9
	Boot-0_92:4.9
	Boot-0_91:4.9
	Boot-0_90:4.8
	Boot-0_89:4.8
	Boot-0_88:4.8
	Boot-0_87:4.8
	Boot-0_86:4.8
	Boot-0_85:4.6
	Boot-0_84:4.5
	Boot-0_83:4.5
	Boot-0_82:4.5
	Boot-0_81:4.5
	Boot-0_80:4.5
	Boot-0_79:4.5
	Boot-0_78:4.5
	Boot-0_77:4.5
	Boot-0_76:4.4
	Boot-0_75:4.4
	Boot-0_74:4.4
	Boot-0_73:4.4
	Boot-0_72:4.4
	Boot-0_71:4.3
	Boot-0_70:4.3
	Boot-0_69:4.3
	Boot-0_68:4.3
	Boot-0_67:4.3
	nbingham_boot_991007:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.6
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	rthornb_UrsulaBuild_01May1998:4.2
	Daytona:4.2.0.4
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	RO_3_71:4.1.3.1
	ART_bp:4.1.1.1
	ART:4.1.1.1.0.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.12
date	2014.09.26.19.21.07;	author rsprowson;	state Exp;
branches;
next	4.11;
commitid	21IfZ6DR2gpkeTRx;

4.11
date	2013.11.21.22.04.12;	author rsprowson;	state Exp;
branches;
next	4.10;
commitid	Js39uamLEdZ34cex;

4.10
date	2012.08.31.07.17.45;	author rsprowson;	state Exp;
branches;
next	4.9;
commitid	1GPnQEuPSPgIwFiw;

4.9
date	2012.07.19.11.37.04;	author rsprowson;	state Exp;
branches;
next	4.8;
commitid	x6wvxB4CUBaPkadw;

4.8
date	2012.01.09.19.39.39;	author srevill;	state Exp;
branches;
next	4.7;
commitid	rOmczEEhXJgubxOv;

4.7
date	2012.01.09.19.07.40;	author srevill;	state Exp;
branches;
next	4.6;
commitid	4h5bXfxSXhFB0xOv;

4.6
date	2011.12.12.18.06.23;	author srevill;	state Exp;
branches;
next	4.5;
commitid	C5vpWLbYleErzVKv;

4.5
date	2009.09.30.20.22.11;	author jlee;	state Exp;
branches;
next	4.4;

4.4
date	2003.02.13.17.22.34;	author rsprowson;	state Exp;
branches;
next	4.3;

4.3
date	99.10.05.19.14.06;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.05.06.11.27.10;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.52.35;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.52.35;	author nturton;	state Exp;
branches
	4.1.1.1.2.1;
next	;

4.1.1.1.2.1
date	97.04.24.15.09.35;	author kbracey;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.44.24;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.12
log
@Correction to Boot$ReadOnly evaluation logic
BootVars was not accounting for a locked drive (with FSLock) when working out whether to set Boot$ReadOnly.
This meant that a locked drive would unhelpfully create a small RAM disc with a default setup in it rather than running the normal boot sequence (albeit locked against changes to everything except $.Public and !Scrap).
Tested on RISC OS 4.02.

Version 1.21. Tagged as 'Boot-1_21'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * BootVars
 *
 * Copyright (C) Pace Micro Technology plc. 1999
 *
 * Sets various system variable:
 *
 *  Boot$OSVersion - UtilityModule version minus final digit (eg. 4.02 -> 4.00)
 *  Boot$State     - either 'commands' or 'desktop'
 *  Boot$Unique    - a unique ID or Local or empty.
 *  Boot$ReadOnly  - nonzero if hosting FS is readonly
 *  Boot$Dir       - recreated with canonical version of name
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stddef.h>
#include <assert.h>

#include "kernel.h"
#include "swis.h"

#include "Global/Services.h"
#include "Global/CMOS.h"
#include "Global/OsBytes.h"
#include "Global/FSNumbers.h"
#include "Interface/Econet.h"
#include "Interface/HighFSI.h"

#include "sys/types.h"
#include "sys/dcistructs.h"
#include "sys/socket.h"
#include "net/if.h"
#include "net/ethernet.h"
#include "sys/ioctl.h"
#include "socklib.h"
#include "netinet/in.h"

#include "RMVersion/RMVersion.h"

static void Get_Ether_DCI2(struct ether_addr *id)
{
        int i, unclaimed;
        struct dci2_dib {
                char *name;
                int  units;
                int  swi_base;
                unsigned char *address [4];
                char *module;
        } *dib;

        for (i = 0; i < 4; i++) {
                _swix (OS_ServiceCall, _INR(1,4)|_OUT(1)|_OUT(3),
                        Service_FindNetworkDriver, -1, 0, i, &unclaimed, &dib);

                if (unclaimed == 0) {
                        memcpy(id, dib->address [0], sizeof(*id));
                        break;
                }
        }
}

static void Get_Ether_DCI4(struct ether_addr *id)
{
        struct chaindib *chain, *c;

        if (_swix(OS_ServiceCall, _INR(0,1)|_OUT(0), 0,
                Service_EnumerateNetworkDrivers, &chain)) {
                return;
        }

        for (c = chain; c != NULL; c = c->chd_next) {
                /*Ignore Econet and Loopback.*/
                if (strcmp((char *) c->chd_dib->dib_name, "ec") == 0) continue;
                if (strcmp((char *) c->chd_dib->dib_name, "lo") == 0) continue;
                if (c->chd_dib->dib_address == 0) continue;
                memcpy(id, c->chd_dib->dib_address, sizeof(*id));
                break;
        }

        /* Free the chain. */
        for (c = chain; c; ) {
                struct chaindib *next = c->chd_next;
                free(c);
                c = next;
        }
}

static int Module_Version (char *module_name)
{
        /*Return the version number of a ROM module.*/
        unsigned int version;
        _kernel_oserror *e = rmversion(rmversion_ROM, module_name, &version);
        if (e) {
                return 0;
        }
        return version >> 8;
}

/* Calls the Internet module to discover the given interfaces current flag settings and
 * returns them
 */
static short bootvars_read_if_flags(int s, const char *name)
{
        struct ifreq ifr;

        (void) strncpy(ifr.ifr_name, name, sizeof(ifr.ifr_name));
        if (socketioctl(s, SIOCGIFFLAGS, &ifr)<0) {
                return 0;
        }
        else {
                return ifr.ifr_flags;
        }
}

static u_long bootvars_read_if_address(int s, const char *name)
{
        struct ifreq ifr;

        (void) strncpy(ifr.ifr_name, name, sizeof(ifr.ifr_name));
        if (socketioctl(s, SIOCGIFADDR, &ifr)<0) {
                return 0UL;
        }
        else {
                return ((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr.s_addr;
        }
}


/* Reads the primary IP address associated with the specified network interface */
static u_long Get_Inter (char *interface)
{
        int s;
        u_long result = 0UL;
        short iflags;

        s = socket(PF_INET, SOCK_DGRAM, 0);
        if (s < 0) {
                return 0UL;
        }

        iflags = bootvars_read_if_flags(s, interface) & (IFF_BROADCAST|IFF_UP|IFF_LOOPBACK);
        if (iflags == (IFF_UP|IFF_BROADCAST)) {
                result = bootvars_read_if_address(s, interface);
        }

        socketclose(s);

        return result;
}

/* Set Boot$OSVersion based on the UtilityModule version number */
static void bootvars_os_version(void)
{
        unsigned int version;

        if (!rmversion(rmversion_ROM, "UtilityModule", &version)) {
                char os_version[16];
                sprintf(os_version, "%X0", version >> 12);
                _kernel_setenv("Boot$OSVersion", os_version);
        }
}

static void bootvars_set_boot_state(void)
{
        int state;
        if (_swix(Wimp_ReadSysInfo, _IN(0)|_OUT(0), 3, &state)) state = 0;
        _kernel_setenv("Boot$State", state == 0 ? "commands" : "desktop");
}

static int bootvars_read_cmos(int location)
{
        int value;

        if (_swix(OS_Byte, _INR(0,1)|_OUT(2), OsByte_ReadCMOS, location, &value)) value = 0;
        return value;
}

static int bootvars_read_configured_fs(void)
{
        return bootvars_read_cmos(FileLangCMOS);
}

/* Routine for generating a unique name when NetFS is the configured filesystem */
static void bootvars_netfs_unique(char *buffer)
{
        unsigned int station, net;

        if (_swix(Econet_ReadLocalStationAndNet, _OUTR(0,1), &station, &net)) {
                station = net = 0;
        }
        else {
                /* Fix infelicity: if there is a native Econet, and also an Internet
                 * connection, the net number just returned is 0, which is wrong.
                 * Let's try asking Internet if it has a better idea of the net
                 * number, but still using 0 if there's an error. J R C 21st Feb 1995
                 */
                if (net == 0) {
                        net = (unsigned int) ((Get_Inter ("ea0") & 0xFF0000) >> 16);
                }
        }

        sprintf(buffer, "Stn%.3d!%.3d", net, station);
}

static void bootvars_sharefs_unique(char *buffer)
{
        struct ether_addr id;
        char addr [13];

        memset(&id, '\0', sizeof(id));

        /* To get the ethernet number, we need the Internet version number. */
        if (Module_Version ("Internet") < 0x350) {
                /* was 0x400 J R C 8th Mar 1995 */
                Get_Ether_DCI2 (&id);
        }
        else {
                Get_Ether_DCI4 (&id);
        }

        sprintf(addr, "%.2X%.2X%.2X%.2X%.2X%.2X",
                id.octet[0], id.octet[1], id.octet[2],
                id.octet[3], id.octet[4], id.octet[5]);

        /* Skip leading noughts and make sure the name is less than 10 digits long.*/
        sprintf(buffer, "%.10s", addr + strspn(addr, "0"));
}

static void bootvars_nexus_unique(char *buffer)
{
        struct {
                int lo, hi;
        } id_w;
        struct ether_addr *id = (struct ether_addr *) &id_w;
        char addr [13];

        /* &45A09 is NexusVC_ReadLocalAddress */
        if (_swix(0x45A09, _OUTR(0,1), &id_w.lo, &id_w.hi)) {
                id_w.lo = id_w.hi = 0;
        }

        sprintf(addr, "%.2X%.2X%.2X%.2X%.2X%.2X",
                id->octet[5], id->octet[4], id->octet[3],
                id->octet[2], id->octet[1], id->octet[0]);

        /* Skip leading noughts and make sure the name is less than 10 digits long.*/
        sprintf(buffer, "%.10s", addr + strspn(addr, "0"));
}

static bool fs_is_readonly(char *unique)
{
        char buffer[256];
        int type, load_addr, exec_addr, size, attr;
        int state, whichfs;
        _kernel_oserror *err;

        sprintf(buffer, "<Boot$Dir>.MchConfig.%s", unique);
        err = _swix(OS_File, _INR(0,1) | _OUT(0) | _OUTR(2,5),
                             OSFile_ReadNoPath, buffer,
                             &type, &load_addr, &exec_addr, &size, &attr);
        if ((err != NULL) || (type == object_nothing)) {
                sprintf(buffer, "<Boot$Dir>.RO<Boot$OSVersion>Hook");
                err = _swix(OS_File, _INR(0,1) | _OUT(0) | _OUTR(2,5),
                                     OSFile_ReadNoPath, buffer,
                                     &type, &load_addr, &exec_addr, &size, &attr);
                if ((err != NULL) || (type == object_nothing)) {
                        sprintf(buffer, "<Boot$Dir>.Choices");
                        err = _swix(OS_File, _INR(0,1) | _OUT(0) | _OUTR(2,5),
                                             OSFile_ReadNoPath, buffer,
                                             &type, &load_addr, &exec_addr, &size, &attr);
                        if ((err != NULL) || (type == object_nothing))
                        {
                                /* None of the tree for network/local !Boot seems to be there */
                                return true;
                        }
                }
        }

        /* Need to distinguish a) FS is readonly (like ROMFS or ResourceFS)
         *                     b) Media is write protected (a disc with a write protect tab)
         *                     c) FS is locked (via FSLock)
         */
        err = _swix(FSLock_Status, _IN(0) | _OUTR(0,1), 0, &state, &whichfs);
        if (err == NULL) {
                if ((bootvars_read_configured_fs() == whichfs) && (state != 0)) {
                        /* Case (c) isn't readonly as FSLock whitelists !Scrap and Public */
                        return false;
                }
        }
        /* Try refreshing the catalogue entry, this catches (a) and (b) in one test */
        err = _swix(OS_File, _INR(0,3) | _IN(5),
                             OSFile_WriteInfo, buffer, load_addr, exec_addr, attr);

        return (err != NULL) ? true : false;
}

static void bootvars_readonly_unique(bool readonly)
{
        if (readonly)
                _kernel_oscli("SetEval Boot$ReadOnly 1");
        else
                _kernel_oscli("SetEval Boot$ReadOnly 0");
}

static void bootvars_boot_unique(void)
{
        char unique[16];

        /* Set Boot$Unique to the unique machine id. */
        switch (bootvars_read_configured_fs()) {
                case fsnumber_net:
                        bootvars_netfs_unique(unique);
                        break;

                case fsnumber_ShareFS:
                        bootvars_sharefs_unique(unique);
                        break;

                case fsnumber_Nexus:
                        bootvars_nexus_unique(unique);
                        break;

                default:
                        strcpy(unique, "Local");
                        break;
        }

        bootvars_readonly_unique(fs_is_readonly(unique));

        _kernel_setenv("Boot$Unique", unique);
}

static void bootvars_boot_dir_adfs(char *canon)
{
        sprintf(canon, "ADFS::%d.$.!Boot", (bootvars_read_cmos(StartCMOS) >> 0) & 7);
}

static void bootvars_boot_dir_scsi(char *canon)
{
        sprintf(canon, "SCSI::%d.$.!Boot", (bootvars_read_cmos(ScsiFsCMOS) >> 3) & 7);
}

static void bootvars_boot_dir_netfs(char *canon)
{
        typedef struct netfs_read_user_environment_reply {
                unsigned char len;
                char disc_name [16];
                char csd_name [10];
                char lib_name [10];
        } netfs_reply;
        netfs_reply read_env;
        char csd [sizeof(read_env.csd_name) + 4];
        char disc[sizeof(read_env.disc_name) + 4];

        /* Compile-time assertion checks assert that structure is packed */
        extern void *assertion_1[-1+2*(offsetof(netfs_reply, disc_name) == 1)];
        extern void *assertion_2[-1+2*(offsetof(netfs_reply, csd_name ) == 17)];
        extern void *assertion_3[-1+2*(offsetof(netfs_reply, lib_name ) == 27)];
        (void) assertion_1, (void) assertion_2, (void) assertion_3;
        /* End assertions */

        /* Get the CSD name. */
        if (_swix(NetFS_DoFSOp, _INR(0,3),
                FileServer_ReadUserEnvironment, &read_env, 0, sizeof(read_env))) {
                *canon = '\0';
                return;
        }

        csd [0] = '$';
        if (read_env.csd_name [0] == '$') {
                csd [1] = '\0';
        }
        else {
                read_env.lib_name[0] = ' '; /*ensure it's terminated - this overwrites the
                        first character of the library name, which we don't need */
                sprintf (csd + 1, ".%.*s",
                        strcspn (read_env.csd_name, " "), read_env.csd_name);
        }

        /* Get the disc name. */
        read_env.csd_name[0] = ' '; /* Terminate disc name */
        sprintf (disc, "%.*s", strcspn (read_env.disc_name, " "), read_env.disc_name);

        /* don't use the configured file server - all the info we need
         * has now been read from the real thing. JRC 17th Feb 1995
         * after talk with Rhodri James, S J Research
         */
         sprintf (canon, "Net::%s.%s.!ArmBoot", disc, csd);
}

static void bootvars_now_set(void)
{
        _swix(OS_ServiceCall, _INR(0,1), 0 /* Flags */, Service_BootBootVarsSet); 
}

static void bootvars_canonicalise_boot_dir(void)
{
        /* "Canonicalise" Boot$Dir, making sure it contains the filing system and
         * disc name.
         */
        static char canon[BUFSIZ];
        const char *boot_dir = getenv("Boot$Dir");

        if (boot_dir && strchr(boot_dir, '$')) {
                /* Already OK ... so just return */
                return;
        }

        switch (bootvars_read_configured_fs()) {
                case fsnumber_net:
                        bootvars_boot_dir_netfs(canon);
                        break;

                case fsnumber_adfs:
                        bootvars_boot_dir_adfs(canon);
                        break;

                case fsnumber_SCSIFS:
                        bootvars_boot_dir_scsi(canon);
                        break;

                default:
                        *canon = '\0';
                        break;
        }

        if (*canon) {
                _kernel_setenv("Boot$Dir", canon);
        }
}

int main(void)
{
        /* Set Boot$OSVersion to the version number. */
        bootvars_os_version();

        /* Set Boot$State to either commands or desktop depending on where we are */
        bootvars_set_boot_state();

        /* Set Boot$Unique & Boot$ReadOnly */
        bootvars_boot_unique();

        /* Canonicalise Boot$Dir */
        bootvars_canonicalise_boot_dir();

        /* All set, tell ROM modules that is the case */
        bootvars_now_set();

        return 0;
}

@


4.11
log
@Issue service call once boot variables are set
After setting BootResources$Things, Choices$Things, Boot$Things a new service call is sent to allow, for example, ROM based modules to react to any implications of that change.
R0 is defined as flags, currently all 0, might be useful one day.
Tested briefly.

Version 1.19. Tagged as 'Boot-1_19'
@
text
@d45 1
d272 1
d276 4
a279 2
        err = _swix(OS_File, _INR(0,1) | _OUT(0) | _OUTR(2,5), 17, buffer, &type, &load_addr, &exec_addr, &size, &attr);
        if (err || type == 0) {
d281 4
a284 2
                err = _swix(OS_File, _INR(0,1) | _OUT(0) | _OUTR(2,5), 17, buffer, &type, &load_addr, &exec_addr, &size, &attr);
                if (err || type == 0) {
d286 4
a289 2
                        err = _swix(OS_File, _INR(0,1) | _OUT(0) | _OUTR(2,5), 17, buffer, &type, &load_addr, &exec_addr, &size, &attr);
                        if (err || type == 0)
d291 1
d297 14
a310 1
        err = _swix(OS_File, _INR(0,3) | _IN(5), 1, buffer, load_addr, exec_addr, attr);
d312 1
a312 1
        return err ? true : false;
@


4.10
log
@Use published fsnnumber_Nexus
Retagged as Boot-1_01.
@
text
@d387 5
d442 3
a444 1
        /* OK - exit cleanly */
@


4.9
log
@Try again - CVS bombed out.
Manually tagged as Boot-0_91.
@
text
@a56 6
/* Bodge around unpublished Nexus filesystem in ROOL sources */
#ifndef fsnumber_Nexus
#define fsnumber_Nexus 45
#endif


@


4.8
log
@Remove errant debug output when booting from a read-only medium.
@
text
@d23 1
d25 1
a27 6
 *
 * History:
 *
 * 04-Oct-1999   SBrodie   Rewrote this utility.
 *
 *
d42 1
d197 1
a197 1
        if (_swix(OS_Byte, _INR(0,1)|_OUT(2), ReadCMOS, location, &value)) value = 0;
a309 1
        int fs;
d312 1
a312 3
        fs = bootvars_read_configured_fs();

        switch (fs) {
d337 1
a337 1
        sprintf(canon, "ADFS::%d.$.!Boot", bootvars_read_cmos(StartCMOS) & 7);
d342 1
a342 2
        sprintf(canon, "SCSI::%d.$.!Boot",
                (bootvars_read_cmos(ScsiFsCMOS) >> 3) & 0x38);
d437 1
a437 1
        /* Set Boot$Unique */
@


4.7
log
@Fixed BootVars.

We introduced a bug in BootVars which breaks the boot sequence on non-read-only
filesystems (e.g. almost everything!). Doh. This version should mean that our
HardDisc4 build works a bit better now...

Version 0.86. Tagged as 'Boot-0_86'
@
text
@a297 4
if (err)
{
printf("err4 '%s'\n", err->errmess);
}
@


4.6
log
@Modified to support booting from read-only file systems.

Changes to the BootVars utility and a couple of Boot:Utils scripts.
Introduces the new Boot$ReadOnly and Boot$ChoicesRW system variables:

  Boot$ReadOnly evaluates to 1 if booting from a read-only file
  system (or more specifically, if the choices specific to that
  machine cannot be written to). Else evaluates to 0.

  Boot$ChoicesRW is the full pathname of the writeable Choices
  directory, which may NOT be Boot:Choices under various circumstances.
  This is only important during the boot sequence. The Choices$Write
  variable is still the one for everyone else to use.

Version 0.85. Tagged as 'Boot-0_85'
@
text
@d278 1
a278 1
        char buffer[1024];
d282 1
a282 1
        sprintf(buffer, "Boot:MchConfig.%s", unique);
d284 2
a285 2
        if (err) {
                sprintf(buffer, "Boot:RO<Boot$OSVersion>Hook");
d287 2
a288 2
                if (err) {
                        sprintf(buffer, "Boot:Choices");
d290 2
a291 1
                        if (err)
d293 1
d298 5
@


4.5
log
@Update BootVars to allow RISC OS 5.1x !Boot to be built from ROOL sources
Detail:
  Source/BootVars/c/main - Added kludge for missing service call definition in current ROOL sources
  Makefile - Updated to include RO510Hook directory. Fixed VProtect to use ${CPFLAGS} when copying.
  RO510Hook directory reconstructed by comparing RO500Hook directory against RISC OS 5 install CD.
Admin:
  Built on Iyonix, tested on beagleboard


Version 0.77. Tagged as 'Boot-0_77'
@
text
@d59 1
a59 1
 
d276 31
d333 2
@


4.4
log
@Finally got round to storing this stuff.
Many changes,highlights being:
 freepool now creates its 'o' directory in the top Makefile
 safelogin tweaked so it can find its header files again
 stopped EXITS macro moaning about no ENTRYS in Appsize and AddApp
 added 2DTools to universal boot sequence
 Added RO370/400/500Hook though the 370 and 400 are just empty at present
 newer vprotect added from Alan Glover
 add Utils.NetChoices
 delete ~CDReinit binary,shuffle sources a bit
 misc changes to obey files from Steve
The Makefile now expects a TARGET to be defined.Currently the 500 one is
the only one tested,though UNIVERSAL is also defined and outputs a boot
sequence like you would have got with !MkInstall in V0.71.
This picks up files which might differ between boots,and also adds
extra files which change when the UserIF changes.

Version 0.72. Tagged as 'Boot-0_72'
@
text
@d59 5
@


4.3
log
@  Rewrote BootVars and LoadCMOS to remove dependency on CoxheadLibs.
Detail:
  Rewrote BootVars/main.c and LoadCMOS/main.c in real C.
Admin:
  It builds - this is an intermediate checkin.
  Requires Econet 5.72 or later header export.
  Requires HdrSrc 0.30 or later header export.
@
text
@d58 1
a58 1
#include "RMVersion.h"
d63 1
a63 2
        int i;
        bool unclaimed;
d76 1
a76 1
                if (!unclaimed) {
@


4.2
log
@Version RO_3_71 merged
@
text
@d15 19
a33 1
/*From CLib*/
d36 47
a82 1
#include <swis.h>
d84 24
a107 80
/*From Support*/
#include "trace.h"
#include "x.h"

/*From OSLib*/
#include "econet.h"
#include "netfs.h"
#include "macros.h"
#include "os.h"
#include "osbyte.h"
#include "osfscontrol.h"
#include "osmodule.h"
#include "socket.h"
#include "wimpreadsysinfo.h"

static void Get_Ether_DCI2 (byte id [6])

{  int i;
   bool unclaimed;
   struct dib
      {  char *name;
         int  units;
         int  swi_base;
         byte *address [4];
         char *module;
      }
      *dib;

   tracef ("Get_Ether_DCI2\n");

   for (i = 0; i < 4; i++)
   {  _swi (OS_ServiceCall, _IN (1) | _IN (2) | _IN (3) | _IN (4) |
            _OUT (1) | _OUT (3), 0x84, -1, 0, i, &unclaimed, &dib);

      if (!unclaimed)
      {  memcpy (id, dib->address [0], 6);
         break;
      }
   }
}

static void Get_Ether_DCI4 (byte id [6])

{  struct dib
         /*Fix fault: use the released structure definition. J R C 9th Mar
            1995*/
      {  bits       swi_base;
         char       *name;
         bits       unit;
         byte       *address;
         char       *module;
         char       *location;
         bits       slot;
      };

   struct dibchain
      {  struct dibchain *next;
         struct dib      *dib;
      }
      *chain, *c, *next;

   tracef ("Get_Ether_DCI4\n");

   chain = (struct dibchain *) _swi (OS_ServiceCall,
         _IN (0) | _IN (1) | _RETURN (0), NULL, 0x9B);

   for (c = chain; c != NULL; c = c->next)
   {  /*Ignore Econet and Loopback.*/
      tracef ("found interface %s\n" _ c->dib->name);
      if (!(strcmp (c->dib->name, "ec") == 0 ||
            strcmp (c->dib->name, "lo") == 0))
      {  memcpy (id, c->dib->address, 6);
         break;
   }  }

   /*Free the chain.*/
   for (c = chain; c != NULL; c = next)
   {  next = c->next;
      osmodule_free (c);
   }
d111 93
d205 18
a222 1
   /*Return the version number of a ROM module.*/
d224 43
a266 305
#if 1
{  char *cc;
   int col, version, place;
   enum {BEFORE, AFTER} state;
   byte *module;

   osmodule_lookup (module_name, NULL, &module, NULL, NULL);
   cc = (char *) &module [*(int *) &module [osmodule_ENTRY_HELP]];

   /*True code. JRC 17th Feb 1995*/
   for (col = 0; *cc != '\0' && col < 16;
         *cc++ == '\t'? col += 8, col &= ~7: col++)
      ;
   if (*cc == '\0') return 0;
   /*assert (col == 16);*/

   for (; *cc != '\0' && !ISXDIGIT (*cc); cc++)
      ;
   if (*cc == '\0') return 0;
   /*assert (ISXDIGIT (*cc));*/

   version = 0;
   state = BEFORE;
   for (;; cc++)
      if (ISXDIGIT (*cc))
         if (state == BEFORE)
            version = version << 4 | XDIGIT (*cc) << 8;
         else
            version += XDIGIT (*cc) << (place -= 4);
      else
         switch (*cc)
         {  case '.':
               state = AFTER;
               place = 8;
            break;

            default:
               /*No more xdigits, end of string, etc.*/
               return version;
            break;
         }
}
#else
   /*Can't use osmodule_enumerate_rom_with_info() on RO200.*/
{  int v = 0, m, s;
   char *name;
   x_exception x;

   m = 0, s = -1;
   x_TRY (&x)
      /*Bizarrely, this call only stops when it gets an error ...*/
      while (TRUE)
      {  m = osmodule_enumerate_rom_with_info (m, s, &s, &name, NULL,
            NULL, &v);

         if (strcmp (name, module) == 0)
            break;
      }
   x_CATCH (&x)
      ;

   return v >> 8;
}
#endif

static bits Get_Inter (char *interface)

{  socket_ifconf conf;
   socket_ifreq reqs [8], *r, *end;
   socket_s s;
   x_exception x;
   bits addr = NONE;

   s = socket_creat (socket_AF_INET, socket_SOCK_DGRAM, 0);

   x_TRY (&x)
   {  conf.u AS req = reqs;
      socket_ioctl (s, socket_SIOCGIFCONF, (byte *) &conf);

      end = (socket_ifreq *) (conf.u AS buf + conf.len);
      for (r = reqs; r < end; r++)
      {  socket_ioctl (s, socket_SIOCGIFFLAGS, (byte *) r);

         if ((r->u AS flags & (socket_IF_LOOPBACK | socket_IF_BROADCAST |
               socket_IF_UP)) == (socket_IF_BROADCAST | socket_IF_UP) &&
               strcmp (r->name, interface) == 0)
         {  socket_ioctl (s, socket_SIOCGIFADDR, (byte *) r);
            addr = r->u AS sockaddr.sockaddr_in.addr;
            break;
   }  }  }
   x_CATCH (&x)
      ;

   socket_close (s);

   return addr;
}

int main (void)

{  int fs, used;
   char version [80 + 1], *state, unique [80 + 1],
         boot_dir [os_FILE_NAME_LIMIT + 1], canon [os_FILE_NAME_LIMIT + 1];

   trace_initialise ("BootVars$Trace");

   /*Set Boot$OSVersion to the version number.*/
   sprintf (version, "%X0", Module_Version ("UtilityModule")/16);
   tracef ("utility module version 0x%X\n" _
         Module_Version ("UtilityModule"));
   os_set_var_val ("Boot$OSVersion", (byte *) version, strlen (version), 0,
         os_VARTYPE_STRING, NULL);

   state = wimpreadsysinfo_task_count () == 0? "commands": "desktop";
   os_set_var_val ("Boot$State", (byte *) state, strlen (state), 0,
         os_VARTYPE_STRING, NULL);

   /*Set Boot$Unique to the unique machine id.*/
   os_byte (osbyte_READ_CMOS, osbyte_CONFIGURE_FILE_SYSTEM, SKIP,
         NULL, &fs);

   switch (fs)
   {  case fileswitch_FS_NUMBER_NETFS:
      {  byte station, net;
         x_exception x;

         tracef ("NetFS\n");
         econet_read_local_station_and_net (&station, &net);

         /*Fix infelicity: if there is a native Econet, and also an Internet
            connection, the net number just returned is 0, which is wrong.
            Let's try asking Internet if it has a better idea of the net
            number, but still using 0 if there's an error. J R C 21st Feb
            1995*/
         if (net == 0)
            x_TRY (&x)
               net = (Get_Inter ("ea0") & 0xFF0000) >> 16;
            x_CATCH (&x)
               ;

         sprintf (unique, "Stn%.3d!%.3d", net, station);
      }
      break;

      case fileswitch_FS_NUMBER_SHAREFS:
      {  byte id [6] = {0 /*, ...*/};
         char addr [13], *a;

         tracef ("ShareFS\n");
         /*To get the ethernet number, we need the Internet version
            number.*/
         tracef ("internet version 0x%X\n" _ Module_Version ("Internet"));
         if (Module_Version ("Internet") < 0x350)
               /*was 0x400 J R C 8th Mar 1995*/
            Get_Ether_DCI2 (id);
         else
            Get_Ether_DCI4 (id);

         sprintf (addr, "%.2X%.2X%.2X%.2X%.2X%.2X",
               id [0], id [1], id [2], id [3], id [4], id [5]);
         tracef ("addr %s\n" _ addr);

         /*Skip leading noughts.*/
         a = addr;
         while (*a == '0') a++;
         if (*a == '\0') a--;

         /*And make sure the file name is still only 10 letters long.*/
         sprintf (unique, "%.10s", a);
      }
      break;

      case 45 /*osfscontrol_FS_NUMBER_NEXUS*/:
      {  union {struct {int lo, hi;} words; char bytes [6];} id;
         char addr [13], *a;

         _swi (0x45A09 /*NexusVC_ReadLocalAddress*/, _OUT(0) | _OUT(1),
               &id AS words.lo, &id AS words.hi);

         sprintf (addr, "%.2X%.2X%.2X%.2X%.2X%.2X",
               id AS bytes [5], id AS bytes [4], id AS bytes [3],
               id AS bytes [2], id AS bytes [1], id AS bytes [0]);

         /*Skip leading noughts.*/
         a = addr;
         while (*a == '0') a++;
         if (*a == '\0') a--;

         /*And make sure the file name is still only 10 letters long.*/
         sprintf (unique, "%.10s", a);
      }
      break;

      default:
         strcpy (unique, "Local");
      break;
   }

   os_set_var_val ("Boot$Unique", (byte *) unique, strlen (unique),
         0, os_VARTYPE_STRING, NULL);

   /*"Canonicalise" Boot$Dir, making sure it contains the filing system and
      disc name.*/
   os_read_var_val ("Boot$Dir", boot_dir, sizeof boot_dir - 1, 0,
         os_VARTYPE_STRING, &used, NULL);
   boot_dir [used] = '\0';

   /*Don't do this more than once.*/
   if (strchr (boot_dir, '$') == NULL)
   {  switch (fs)
      {  case fileswitch_FS_NUMBER_NETFS:
         {  char csd [os_FILE_NAME_LIMIT + 1],
                  disc [netfs_DISC_NAME_LIMIT + 1];
            netfs_read_env read_env;

            /*Get the CSD name.*/
            netfs_do_fs_op (netfs_FS_OP_READ_ENV, (netfs_op *) &read_env, 0,
                  sizeof read_env, NULL);

            csd [0] = '$';
            if (read_env AS reply.csd_name [0] == '$')
               csd [1] = '\0';
            else
            {  read_env AS reply.csd_name [sizeof read_env AS reply.csd_name]
                     = ' '; /*ensure it's terminated - this overwrites the
                     first character of the library name, which we don't
                     need.*/
               sprintf (csd + 1, ".%.*s",
                     strcspn (read_env AS reply.csd_name, " "),
                     read_env AS reply.csd_name);
            }

            /*Get the disc name.*/
            read_env AS reply.disc_name [sizeof read_env AS reply.disc_name]
                  = ' '; /*ensure it's terminated - this overwrites the
                  first character of the CSD name, which we've already
                  saved.*/
            sprintf (disc, "%.*s", strcspn (read_env AS reply.disc_name,
                  " "), read_env AS reply.disc_name);

         #if 1 /*don't use the configured file server - all the info we need
               has now been read from the real thing. JRC 17th Feb 1995
               after talk with Rhodri James, S J Research*/
            sprintf (canon, "Net::%s.%s.!ArmBoot", disc, csd);
         #else
            /*Get the configured file server.*/
            os_byte (osbyte_READ_CMOS, osbyte_CONFIGURE_FS_STATION, SKIP,
                  NULL, &station);
            if (station == 0)
            {  /*Name configured.*/
               int i, b;
               char *cc;

               cc = name;

               os_byte (osbyte_READ_CMOS, osbyte_CONFIGURE_FS_NAME0, SKIP,
                     NULL, &b);
               *cc++ = b;

               for (i = osbyte_CONFIGURE_FS_NAME1;
                     i < osbyte_CONFIGURE_FS_NAME1 +
                     osbyte_CONFIGURE_FS_NAME_LIMIT - 1; i++)
               {  os_byte (osbyte_READ_CMOS, i, SKIP, NULL, &b);
                  *cc++ = b;
               }
               *cc = '\0';

               sprintf (canon, "Net::%s.%s.!ArmBoot", name, csd);
            }
            else
            {  /*Number configured.*/
               os_byte (osbyte_READ_CMOS, osbyte_CONFIGURE_FS_NET, SKIP,
                     NULL, &net);
               sprintf (canon, "Net#%d.%d:%s.!ArmBoot", net, station, csd);
            }
         #endif
         }
         break;

         case fileswitch_FS_NUMBER_ADFS:
         {  int drive;

            os_byte (osbyte_READ_CMOS, osbyte_CONFIGURE_DRIVE, SKIP, NULL,
                  &drive);
            sprintf (canon, "ADFS::%d.$.!Boot",
                  (drive & osbyte_CONFIGURE_DRIVE_MASK) >>
                  osbyte_CONFIGURE_DRIVE_SHIFT);
         }
         break;

         case fileswitch_FS_NUMBER_SCSIFS:
         {  int drive;

            os_byte (osbyte_READ_CMOS, osbyte_CONFIGURE_SCSIFS_DRIVE,
                  SKIP, NULL, &drive);
            sprintf (canon, "SCSI::%d.$.!Boot",
                  ((drive & osbyte_CONFIGURE_SCSIFS_DRIVE_MASK) >>
                  osbyte_CONFIGURE_SCSIFS_DRIVE_SHIFT) + 4);
         }
         break;
      }

      os_set_var_val ("Boot$Dir", (byte *) canon, strlen (canon),
            0, os_VARTYPE_STRING, NULL);
   }
d268 37
a304 1
   trace_terminate ();
d306 4
a309 1
   return 0;
d311 103
@


4.1
log
@Initial revision
@
text
@a20 1
#include "socket.h"
d32 1
d173 2
a174 2
{  socket_if_conf conf;
   socket_if_req reqs [8], *r, *end;
d179 1
a179 1
   s = socket_creat (socket_DOMAIN_INET, socket_TYPE_DGRAM, 0);
d183 1
a183 1
      socket_ioctl (s, socket_IOCTL_SIOCGIFCONF, (byte *) &conf);
d185 1
a185 1
      end = (socket_if_req *) (conf.u AS buf + conf.len);
d187 1
a187 1
      {  socket_ioctl (s, socket_IOCTL_SIOCGIFFLAGS, (byte *) r);
d192 2
a193 2
         {  socket_ioctl (s, socket_IOCTL_SIOCGIFADDR, (byte *) r);
            addr = r->u AS addr.inet.addr;
d228 1
a228 1
   {  case osfscontrol_FS_NUMBER_NETFS:
d250 1
a250 1
      case osfscontrol_FS_NUMBER_SHAREFS:
d316 1
a316 1
      {  case osfscontrol_FS_NUMBER_NETFS:
d385 1
a385 1
         case osfscontrol_FS_NUMBER_ADFS:
d396 1
a396 1
         case osfscontrol_FS_NUMBER_SCSIFS:
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@d21 1
a32 1
#include "socket.h"
d173 2
a174 2
{  socket_ifconf conf;
   socket_ifreq reqs [8], *r, *end;
d179 1
a179 1
   s = socket_creat (socket_AF_INET, socket_SOCK_DGRAM, 0);
d183 1
a183 1
      socket_ioctl (s, socket_SIOCGIFCONF, (byte *) &conf);
d185 1
a185 1
      end = (socket_ifreq *) (conf.u AS buf + conf.len);
d187 1
a187 1
      {  socket_ioctl (s, socket_SIOCGIFFLAGS, (byte *) r);
d192 2
a193 2
         {  socket_ioctl (s, socket_SIOCGIFADDR, (byte *) r);
            addr = r->u AS sockaddr.sockaddr_in.addr;
d228 1
a228 1
   {  case fileswitch_FS_NUMBER_NETFS:
d250 1
a250 1
      case fileswitch_FS_NUMBER_SHAREFS:
d316 1
a316 1
      {  case fileswitch_FS_NUMBER_NETFS:
d385 1
a385 1
         case fileswitch_FS_NUMBER_ADFS:
d396 1
a396 1
         case fileswitch_FS_NUMBER_SCSIFS:
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@


4.1.1.1.2.1
log
@Merged in RO_3_70.
@
text
@d21 1
a32 1
#include "socket.h"
d173 2
a174 2
{  socket_ifconf conf;
   socket_ifreq reqs [8], *r, *end;
d179 1
a179 1
   s = socket_creat (socket_AF_INET, socket_SOCK_DGRAM, 0);
d183 1
a183 1
      socket_ioctl (s, socket_SIOCGIFCONF, (byte *) &conf);
d185 1
a185 1
      end = (socket_ifreq *) (conf.u AS buf + conf.len);
d187 1
a187 1
      {  socket_ioctl (s, socket_SIOCGIFFLAGS, (byte *) r);
d192 2
a193 2
         {  socket_ioctl (s, socket_SIOCGIFADDR, (byte *) r);
            addr = r->u AS sockaddr.sockaddr_in.addr;
d228 1
a228 1
   {  case fileswitch_FS_NUMBER_NETFS:
d250 1
a250 1
      case fileswitch_FS_NUMBER_SHAREFS:
d316 1
a316 1
      {  case fileswitch_FS_NUMBER_NETFS:
d385 1
a385 1
         case fileswitch_FS_NUMBER_ADFS:
d396 1
a396 1
         case fileswitch_FS_NUMBER_SCSIFS:
@
