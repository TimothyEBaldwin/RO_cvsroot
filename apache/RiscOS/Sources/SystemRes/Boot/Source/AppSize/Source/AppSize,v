head	4.2;
access;
symbols
	Boot-1_26:4.2
	Boot-1_25:4.2
	Boot-1_24:4.2
	Boot-1_23:4.2
	Boot-1_22:4.2
	Boot-1_21:4.2
	Boot-1_20:4.2
	Boot-1_19:4.2
	Boot-1_18:4.2
	Boot-1_17:4.2
	Boot-1_16:4.2
	Boot-1_15:4.2
	Boot-1_14:4.2
	Boot-1_13:4.2
	Boot-1_12:4.2
	Boot-1_11:4.2
	Boot-1_10:4.2
	Boot-1_09:4.2
	Boot-1_08:4.2
	Boot-1_07:4.2
	Boot-1_06:4.2
	Boot-1_05:4.2
	Boot-1_04:4.2
	Boot-1_03:4.2
	Boot-1_02:4.2
	Boot-1_01:4.2
	Boot-1_00:4.2
	Boot-0_99:4.2
	Boot-0_98:4.2
	Boot-0_97:4.2
	Boot-0_96:4.2
	Boot-0_95:4.2
	Boot-0_94:4.2
	Boot-0_93:4.2
	Boot-0_92:4.2
	Boot-0_91:4.2
	Boot-0_90:4.2
	Boot-0_89:4.2
	Boot-0_88:4.2
	Boot-0_87:4.2
	Boot-0_86:4.2
	Boot-0_85:4.2
	Boot-0_84:4.2
	Boot-0_83:4.2
	Boot-0_82:4.2
	Boot-0_81:4.2
	Boot-0_80:4.2
	Boot-0_79:4.2
	Boot-0_78:4.2
	Boot-0_77:4.2
	Boot-0_76:4.2
	Boot-0_75:4.2
	Boot-0_74:4.2
	Boot-0_73:4.2
	Boot-0_72:4.2
	Boot-0_71:4.1.1.1
	Boot-0_70:4.1.1.1
	Boot-0_69:4.1.1.1
	Boot-0_68:4.1.1.1
	Boot-0_67:4.1.1.1
	nbingham_boot_991007:4.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.1.1
	Ursula_RiscPC:4.1.1.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1.1.1
	UrsulaBuild_FinalSoftload:4.1.1.1
	rthornb_UrsulaBuild-12Aug1998:4.1.1.1
	aglover_UrsulaBuild-05Aug1998:4.1.1.1
	rthornb_UrsulaBuild-29Jul1998:4.1.1.1
	rthornb_UrsulaBuild-22Jul1998:4.1.1.1
	rthornb_UrsulaBuild-15Jul1998:4.1.1.1
	rthornb_UrsulaBuild-07Jul1998:4.1.1.1
	rthornb_UrsulaBuild-17Jun1998:4.1.1.1
	rthornb_UrsulaBuild-03Jun1998:4.1.1.1
	rthornb_UrsulaBuild-27May1998:4.1.1.1
	rthornb_UrsulaBuild-21May1998:4.1.1.1
	rthornb_UrsulaBuild_01May1998:4.1.1.1
	Daytona:4.1.1.1.0.6
	Daytona_bp:4.1.1.1
	Ursula:4.1.1.1.0.4
	Ursula_bp:4.1.1.1
	RO_3_71:4.1.3.1
	ART_bp:4.1.1.1
	ART:4.1.1.1.0.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2003.02.13.17.22.32;	author rsprowson;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.52.32;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.52.32;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.43.59;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Finally got round to storing this stuff.
Many changes,highlights being:
 freepool now creates its 'o' directory in the top Makefile
 safelogin tweaked so it can find its header files again
 stopped EXITS macro moaning about no ENTRYS in Appsize and AddApp
 added 2DTools to universal boot sequence
 Added RO370/400/500Hook though the 370 and 400 are just empty at present
 newer vprotect added from Alan Glover
 add Utils.NetChoices
 delete ~CDReinit binary,shuffle sources a bit
 misc changes to obey files from Steve
The Makefile now expects a TARGET to be defined.Currently the 500 one is
the only one tested,though UNIVERSAL is also defined and outputs a boot
sequence like you would have got with !MkInstall in V0.71.
This picks up files which might differ between boots,and also adds
extra files which change when the UserIF changes.

Version 0.72. Tagged as 'Boot-0_72'
@
text
@
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Proc
        GET     Hdr:ModHand
        GET     Hdr:NDRDebug

;;-----------------------------------------------------------------------------
;; A transient to resize the RMA dynamic area in order to achived a
;; specified application area size. Intended for use before the Wimp
;; has started, in order to allow a BASIC program to load modules etc.
;;
;; Syntax: AppSize <size>K
;;
;; Try to set the application area to the specified size. Move any
;; excess into the RMA, or try to borrow from the RMA, as appropriate.
;;-----------------------------------------------------------------------------

        GBLL    hostvdu
debug   SETL    false
hostvdu SETL    false

TransientStart ENTRY "R1-R6"
                       
        Debug   ,"appsize"

        LDRB    LR,[R1]
        CMP     LR,#32                          ; are they are any commands?
        BLO     %FT90                           ;   complain because the syntax is invalid
                     
        MOV     R0,#0
        MOV     R2,#0
        SWI     XOS_ReadUnsigned                ; attempt to get the line
        EXIT    VS                              ;   returning if there is an error

        LDRB    LR,[R1]                         ; get the next character
        UpperCase LR,R0                         ;   ensure it is of sensible case
        TEQ     LR,#"K"                         ;   and see if the amount is kilobytes
        MOVEQ   R2,R2,LSL #10                   ;   if it is then multiple by 1024
        MOV     R5, R2                          ; R5 = desired app size
        Debug   ,"desired app size        ",R5

        SWI     XOS_GetEnv                      ; now R1 = address of first unavailable byte
        EXIT    VS
        SUB     R1, R1, #32768                  ; R1 = size of app area
        SUB     R4, R1, R5                      ; R1 = amount to move from app area
        Debug   ,"amount to move from app ",R4

        MOV     R0,#1                           ; dynamic Area = RMA
        SWI     XOS_ReadDynamicArea             ;   read its size
        EXIT    VS                              ; R0 = max size of RMA, R1 = current size
        Debug   ,"max and current RMA size",R0,R1
        MOV     R0,#4*1024*1024                 ; DDV asserts that R0 will hold the max
                                                ; size to which RMA can grow - it seems to
                                                ; me to hold 24M! So, we need to insert at
                                                ; this point the max size to which the RMA
                                                ; can grow.
        SUB     R0, R0, R1                      ; R0 = max amount by which RMA can grow
        Debug   ,"max space avail in RMA",R0
        CMP     R4,R0
        MOVGT   R4,R0
        Debug   ,"amount to try to move   ",R4

        MOV     R0,#1                           ;   dynamic area = 1 (RMA)
        MOV     R1,R4                           ;   move this much
        Debug   ,"change RMA by           ",R1
        SWI     XOS_ChangeDynamicArea           ;   and modify the size

        [ debug
        MOV     R0,#1                           ; dynamic Area = RMA
        SWI     XOS_ReadDynamicArea             ;   read its size
        EXIT    VS
        Debug   ,"RMA size                ",R1
        ]

        CLRV
        EXIT 
90
        ADR     R0,Syntax
        SETV                                    ; setup the error (V set!)
        EXIT

        InsertNDRDebugRoutines

Syntax  & 220
        = "Syntax: AppSize <size>[K]",0

        DCB     "AppSize 1.00 29-Nov-1993  © Acorn Computers Ltd 1993", 0
        ALIGN

        END
@


4.1
log
@Initial revision
@
text
@d77 2
a78 2

        EXITS 
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
