head	1.3;
access;
symbols
	Boot-1_26:1.3
	Boot-1_25:1.3
	Boot-1_24:1.3
	Boot-1_23:1.3
	Boot-1_22:1.3
	Boot-1_21:1.3
	Boot-1_20:1.3
	Boot-1_19:1.3
	Boot-1_18:1.3
	Boot-1_17:1.3
	Boot-1_16:1.3
	Boot-1_15:1.3
	Boot-1_14:1.3
	Boot-1_13:1.3
	Boot-1_12:1.3
	Boot-1_11:1.3
	Boot-1_10:1.3
	Boot-1_09:1.3
	Boot-1_08:1.3
	Boot-1_07:1.3
	Boot-1_06:1.3
	Boot-1_05:1.3
	Boot-1_04:1.3
	Boot-1_03:1.3
	Boot-1_02:1.3
	Boot-1_01:1.3
	Boot-1_00:1.3
	Boot-0_99:1.3
	Boot-0_98:1.3
	Boot-0_97:1.3
	Boot-0_96:1.2
	Boot-0_95:1.2
	Boot-0_94:1.2
	Boot-0_93:1.2
	Boot-0_92:1.2
	Boot-0_91:1.2
	Boot-0_90:1.2
	Boot-0_89:1.2
	Boot-0_88:1.2
	Boot-0_87:1.2
	Boot-0_86:1.2
	Boot-0_85:1.2
	Boot-0_84:1.2
	Boot-0_83:1.2
	Boot-0_82:1.2
	Boot-0_81:1.2
	Boot-0_80:1.2
	Boot-0_79:1.2
	Boot-0_78:1.2
	Boot-0_77:1.2
	Boot-0_76:1.2
	Boot-0_75:1.2
	Boot-0_74:1.2
	Boot-0_73:1.2
	Boot-0_72:1.2
	Boot-0_71:1.2
	Boot-0_70:1.2
	Boot-0_69:1.2
	Boot-0_68:1.2
	Boot-0_67:1.2
	nbingham_boot_991007:1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.2
	Ursula_RiscPC:1.2.0.6
	rthornb_UrsulaBuild-19Aug1998:1.2
	UrsulaBuild_FinalSoftload:1.2
	rthornb_UrsulaBuild-12Aug1998:1.2
	aglover_UrsulaBuild-05Aug1998:1.2
	rthornb_UrsulaBuild-29Jul1998:1.2
	rthornb_UrsulaBuild-22Jul1998:1.2
	rthornb_UrsulaBuild-15Jul1998:1.2
	rthornb_UrsulaBuild-07Jul1998:1.2
	rthornb_UrsulaBuild-17Jun1998:1.2
	rthornb_UrsulaBuild-03Jun1998:1.2
	rthornb_UrsulaBuild-27May1998:1.2
	rthornb_UrsulaBuild-21May1998:1.2
	rthornb_UrsulaBuild_01May1998:1.2
	Daytona:1.2.0.4
	Daytona_bp:1.2
	Ursula:1.2.0.2
	Ursula_bp:1.2
	RO_3_71:1.1.2.1;
locks; strict;
comment	@# @;


1.3
date	2012.08.12.16.41.44;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	OHKH6pQmli54ghgw;

1.2
date	97.05.06.11.27.01;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.04.30.18.19.08;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.04.30.18.19.09;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Adjust for VIDCBandwidthLimit and VIDCBandLimit
RO350Hook and RO360Hook these were still containing an obey file 'BandLimit' however the corresponding !Configure had been modified (for 3.7x) to instead use the alias VIDCBandLimit. Adjusted obey files accordingly.
RO500Hook and RO510Hook now use 'X' to supress errors when VIDCBandwidthLimit is absent. From RO520Hook onwards this can be removed permanently.
Additionally RO500Hook and RO510Hook were not running ClrMonitor so on a CMOS reset the (potentially wrong) monitor would be selected.
Updated comment in BandLimit/BandLimit.c.
Updated ClrMonitor/main.c to use central defines. Put old copy in attic to reduce confusion.

Version 0.97. Tagged as 'Boot-0_97'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* bandlimit.c */

/* Set VIDC bandlimit, being sensitive to KernelMemSpeed value.
   Introduced with RISC OS 3.71, to support A7000+ with 7500FE
   and 64 MHz EDO RAM */

#include <stdio.h>
#include <stdlib.h>

#include "kernel.h"
#include "swis.h"

/* range of OS version for which KernelMemSpeedAddr known valid */
#define MinOSVersion 0xa6 /* 3.6 */
#define MaxOSVersion 0xa7 /* 3.7 */

#define KernelMemSpeedAddr 0x110

int main(int argc, char *argv[])
{
  int  i, lim[4], osversion = 0, memspeed = 0;
  char cmd[256];

  if ((argc < 4) || (argc > 5))
  {
    /* in 1000-bytes/s: DRAM (32MHz), 1Mb VRAM, 2Mb VRAM, EDO DRAM (64 MHz) */
    printf("syntax: BandLimit <bwidth> <bwidth> <bwidth> [<bwidth>]\n");
    exit(1);
  }

  for (i=1; i<argc; i++) lim[i-1] = atoi(argv[i])*1000;

  _swix(OS_Byte,_INR(0,2)|_OUT(1),129,0,255,&osversion);

  /* the MemSpeed info really ought to be available via a SWI call */
  if ((osversion >= MinOSVersion) && (osversion <= MaxOSVersion))
    memspeed = *((int *)KernelMemSpeedAddr) & 0xffff;

  /* set alias for VIDCBandLimit command, which can also be used by other code (eg. Configure) */
  switch(memspeed)
  {
    case 32000: /* 32 MHz - A7000+, with 7500FE and EDO memory */
      sprintf(cmd,"Set Alias$VIDCBandLimit VIDCBandwidthLimit %1d %1d %1d",lim[3],lim[1],lim[2]);
      break;

    case 16000: /* 16 MHz - Risc PC or A7000 */
    default:
      sprintf(cmd,"Set Alias$VIDCBandLimit VIDCBandwidthLimit %1d %1d %1d",lim[0],lim[1],lim[2]);
      break;
  }   

  _swix(OS_CLI,_IN(0),cmd);
  _swix(OS_CLI,_IN(0),"VIDCBandLimit");

  return 0;
}
@


1.2
log
@Version RO_3_71 merged
@
text
@d20 1
a20 1
   and 32 MHz EDO RAM */
@


1.1
log
@file BandLimit was initially added on branch RO_3_70_to_3_71.
@
text
@d1 71
@


1.1.2.1
log
@Merged from 3.71 CD
@
text
@a0 71
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* bandlimit.c */

/* Set VIDC bandlimit, being sensitive to KernelMemSpeed value.
   Introduced with RISC OS 3.71, to support A7000+ with 7500FE
   and 32 MHz EDO RAM */

#include <stdio.h>
#include <stdlib.h>

#include "kernel.h"
#include "swis.h"

/* range of OS version for which KernelMemSpeedAddr known valid */
#define MinOSVersion 0xa6 /* 3.6 */
#define MaxOSVersion 0xa7 /* 3.7 */

#define KernelMemSpeedAddr 0x110

int main(int argc, char *argv[])
{
  int  i, lim[4], osversion = 0, memspeed = 0;
  char cmd[256];

  if ((argc < 4) || (argc > 5))
  {
    /* in 1000-bytes/s: DRAM (32MHz), 1Mb VRAM, 2Mb VRAM, EDO DRAM (64 MHz) */
    printf("syntax: BandLimit <bwidth> <bwidth> <bwidth> [<bwidth>]\n");
    exit(1);
  }

  for (i=1; i<argc; i++) lim[i-1] = atoi(argv[i])*1000;

  _swix(OS_Byte,_INR(0,2)|_OUT(1),129,0,255,&osversion);

  /* the MemSpeed info really ought to be available via a SWI call */
  if ((osversion >= MinOSVersion) && (osversion <= MaxOSVersion))
    memspeed = *((int *)KernelMemSpeedAddr) & 0xffff;

  /* set alias for VIDCBandLimit command, which can also be used by other code (eg. Configure) */
  switch(memspeed)
  {
    case 32000: /* 32 MHz - A7000+, with 7500FE and EDO memory */
      sprintf(cmd,"Set Alias$VIDCBandLimit VIDCBandwidthLimit %1d %1d %1d",lim[3],lim[1],lim[2]);
      break;

    case 16000: /* 16 MHz - Risc PC or A7000 */
    default:
      sprintf(cmd,"Set Alias$VIDCBandLimit VIDCBandwidthLimit %1d %1d %1d",lim[0],lim[1],lim[2]);
      break;
  }   

  _swix(OS_CLI,_IN(0),cmd);
  _swix(OS_CLI,_IN(0),"VIDCBandLimit");

  return 0;
}
@
