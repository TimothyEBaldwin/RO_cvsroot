head	4.3;
access;
symbols
	Boot-1_26:4.3
	Boot-1_25:4.3
	Boot-1_24:4.3
	Boot-1_23:4.3
	Boot-1_22:4.3
	Boot-1_21:4.3
	Boot-1_20:4.3
	Boot-1_19:4.3
	Boot-1_18:4.3
	Boot-1_17:4.3
	Boot-1_16:4.3
	Boot-1_15:4.3
	Boot-1_14:4.3
	Boot-1_13:4.3
	Boot-1_12:4.3
	Boot-1_11:4.3
	Boot-1_10:4.3
	Boot-1_09:4.3
	Boot-1_08:4.3
	Boot-1_07:4.3
	Boot-1_06:4.3
	Boot-1_05:4.3
	Boot-1_04:4.3
	Boot-1_03:4.3
	Boot-1_02:4.3
	Boot-1_01:4.3
	Boot-1_00:4.3
	Boot-0_99:4.3
	Boot-0_98:4.3
	Boot-0_97:4.3
	Boot-0_96:4.3
	Boot-0_95:4.3
	Boot-0_94:4.3
	Boot-0_93:4.3
	Boot-0_92:4.3
	Boot-0_91:4.3
	Boot-0_90:4.3
	Boot-0_89:4.3
	Boot-0_88:4.3
	Boot-0_87:4.3
	Boot-0_86:4.3
	Boot-0_85:4.3
	Boot-0_84:4.3
	Boot-0_83:4.3
	Boot-0_82:4.3
	Boot-0_81:4.3
	Boot-0_80:4.3
	Boot-0_79:4.3
	Boot-0_78:4.3
	Boot-0_77:4.3
	Boot-0_76:4.3
	Boot-0_75:4.3
	Boot-0_74:4.3
	Boot-0_73:4.3
	Boot-0_72:4.3
	Boot-0_71:4.3
	Boot-0_70:4.3
	Boot-0_69:4.3
	Boot-0_68:4.3
	Boot-0_67:4.3
	nbingham_boot_991007:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.6
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	rthornb_UrsulaBuild_01May1998:4.2
	Daytona:4.2.0.4
	Daytona_bp:4.2
	Ursula:4.2.0.2
	Ursula_bp:4.2
	RO_3_71:4.1.3.1
	ART_bp:4.1.1.1
	ART:4.1.1.1.0.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	99.10.05.19.14.11;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.05.06.11.27.16;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.52.44;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.52.44;	author nturton;	state Exp;
branches
	4.1.1.1.2.1;
next	;

4.1.1.1.2.1
date	97.04.24.15.09.38;	author kbracey;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.46.00;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@  Rewrote BootVars and LoadCMOS to remove dependency on CoxheadLibs.
Detail:
  Rewrote BootVars/main.c and LoadCMOS/main.c in real C.
Admin:
  It builds - this is an intermediate checkin.
  Requires Econet 5.72 or later header export.
  Requires HdrSrc 0.30 or later header export.
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * LoadCMOS
 *
 * Copyright (C) Pace Micro Technology plc. 1999
 *
 * Restores a CMOS RAM settings file
 *
 *
 *
 * History:
 *
 * 04-Oct-1999   SBrodie   Rewrote this utility in proper C.
 *
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"

#include "Global/CMOS.h"

static void fail(const char *format, ...)
{
        va_list ap;

        va_start(ap, format);
        vfprintf(stderr, format, ap);
        va_end(ap);
        exit(0); /* Just print it */
}

static void tryswi(_kernel_oserror *e)
{
        if (e) fail("%s\n", e->errmess);
}

static int read_cmos(int location)
{
        int value;

        tryswi(_swix(OS_Byte, _INR(0,1)|_OUT(2), ReadCMOS, location, &value));
        return value;
}

int main (int argc, char *argv[])
{
        FILE *f;
        int location;

        if (argc < 2) {
                fail("Syntax: LoadCMOS <filename>\n");
        }

        f = fopen(argv[1], "rb");
        if (!f) {
                fail("Unable to open %s\n", argv[1]);
        }

        for (location = 0; ; ++location) {
                int byte = fgetc(f);
                if (byte == EOF) break;

                if (location == YearCMOS || location == YearCMOS + 1) continue;
                if (location == AlarmAndTimeCMOS) {
                        const int r = read_cmos(AlarmAndTimeCMOS);
                        byte &= ~DSTCMOSBit;
                        byte |= (r & DSTCMOSBit);
                }

                tryswi(_swix(OS_Byte, _INR(0,2), WriteCMOS, location, byte));
        }

        fclose(f);
        return 0;
}
@


4.2
log
@Version RO_3_71 merged
@
text
@d15 15
a29 1
/*main.c - LOADCMOS *command*/
a30 7
/*History

   27th Oct 1994 J R C Written

*/

/*From CLib*/
d33 54
d88 2
a89 67
/*From OSLib*/
#include "os.h"
#include "osbyte.h"
#include "osfile.h"
#include "osfind.h"
#include "osgbpb.h"

/*From Support*/
#include "x.h"

int main (void)

{  struct {char *prog, *file; char argb [os_CLI_LIMIT + 1];} argl;
   os_f f;
   int r, w, i, size, obj_type;
   x_exception x, y;

   x_TRY (&x)
   {  os_read_args ("prog/a,file/a", os_get_env (NULL, NULL), (char *) &argl,
           sizeof argl);

      obj_type = osfile_read_stamped_no_path (argl.file, NULL, NULL, &size,
            NULL, NULL);

      if (obj_type != osfile_IS_FILE)
         osfile_make_error (argl.file, obj_type);

      f = osfind_openin (osfind_NO_PATH | osfind_ERROR_IF_ABSENT |
            osfind_ERROR_IF_DIR, argl.file, NULL);

      x_TRY (&y)
         for (i = 0; i < size; i++)
         {  (void) osgbpb_read (f, (byte *) &w, 1);
            /*(Note that the top 24 bits of |w| are garbage.)*/

            switch (i)
            {  case osbyte_CONFIGURE_DST:
                  /*Do not load bit 7.*/
                  os_byte (osbyte_READ_CMOS, i, SKIP, NULL, &r);

                  os_byte (osbyte_WRITE_CMOS, i, w & ~osbyte_CONFIGURE_DST_MASK |
                        r & osbyte_CONFIGURE_DST_MASK, NULL, NULL);
               break;

               case osbyte_CONFIGURE_YEAR0:
               case osbyte_CONFIGURE_YEAR1:
                  /*Do nothing - these are never loaded.*/
               break;

               default:
                  os_byte (osbyte_WRITE_CMOS, i, w, NULL, NULL);
               break;
            }
         }
      x_CATCH (&y)
         ;

      osfind_close (f);

      x_RETHROW (&y);
   }
   x_CATCH (&x)
      ;
   /*Do not return an error - just print it out. J R C 23rd Aug 1995*/
   if (x_ERROR (&x) != NULL)
      fprintf (stderr, "%s\n", x_ERROR (&x)->errmess);
   /*was x_EXIT (&x);*/
d91 2
a92 1
   return 0;
@


4.1
log
@Initial revision
@
text
@d46 1
a46 1
           sizeof argl, NULL);
d90 4
d95 1
a95 1
   x_EXIT (&x);
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@d46 1
a46 1
           sizeof argl);
a89 4
   /*Do not return an error - just print it out. J R C 23rd Aug 1995*/
   if (x_ERROR (&x) != NULL)
      fprintf (stderr, "%s\n", x_ERROR (&x)->errmess);
   /*was x_EXIT (&x);*/
d91 1
a91 1
   return 0;
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@


4.1.1.1.2.1
log
@Merged in RO_3_70.
@
text
@d46 1
a46 1
           sizeof argl);
a89 4
   /*Do not return an error - just print it out. J R C 23rd Aug 1995*/
   if (x_ERROR (&x) != NULL)
      fprintf (stderr, "%s\n", x_ERROR (&x)->errmess);
   /*was x_EXIT (&x);*/
d91 1
a91 1
   return 0;
@
