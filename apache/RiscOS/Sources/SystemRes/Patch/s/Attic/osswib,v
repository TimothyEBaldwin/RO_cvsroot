head	4.2;
access;
symbols
	Patch-0_06:4.1.3.1
	Patch-0_05:4.1.3.1
	Patch-0_04:4.1.3.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.3.1
	Ursula_RiscPC:4.1.3.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1.3.1
	UrsulaBuild_FinalSoftload:4.1.3.1
	rthornb_UrsulaBuild-12Aug1998:4.1.3.1
	aglover_UrsulaBuild-05Aug1998:4.1.3.1
	rthornb_UrsulaBuild-29Jul1998:4.1.3.1
	rthornb_UrsulaBuild-22Jul1998:4.1.3.1
	rthornb_UrsulaBuild-15Jul1998:4.1.3.1
	rthornb_UrsulaBuild-07Jul1998:4.1.3.1
	rthornb_UrsulaBuild-17Jun1998:4.1.3.1
	rthornb_UrsulaBuild-03Jun1998:4.1.3.1
	rthornb_UrsulaBuild-27May1998:4.1.3.1
	rthornb_UrsulaBuild-21May1998:4.1.3.1
	rthornb_UrsulaBuild_01May1998:4.1.3.1
	Daytona:4.1.3.1.0.6
	Daytona_bp:4.1.3.1
	Ursula:4.1.3.1.0.4
	Ursula_bp:4.1.3.1
	RO_3_71:4.1.3.1
	ART_bp:4.1.3.1
	ART:4.1.3.1.0.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.2
date	2012.09.01.13.59.37;	author rsprowson;	state dead;
branches;
next	4.1;
commitid	wmVf3VFxGhRBIPiw;

4.1
date	96.11.06.03.59.59;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.1.3.1
date	96.11.06.03.59.59;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Fix to not badly corrupt random bits of RMA
The C compiler switches were missing the -zM switch, and C code was referencing data in far away areas (which don't get reduced to position independent ADRs).
It's hard to see how this would have ever worked, but rather than worry too much about it, just change it so it does.
* Makefile gains -zM switches and general tidying up
* Generate CMHG header file so the C code matches the module header prototypes, and rename the CMHG file so as not to confuse the unix<->RISC OS filename translation
* Be more strict and only match on subreason 1 of Service_UKCompression rather than any non zero subreason
* If the pathname exceeds 255 characters, right justify it and add an elipsis rather than overruning the buffer
* Remove some dubious casts
* Add a bit of assembler to the 'GetSig' macro to do the position independent bit
Tested on StrongARM RISC OS 4.02, with an application known to need patching. Patch count was 1, and machine didn't stiff.

Version 0.07. Tagged as 'Patch-0_07'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; void os_swi(int swicode, os_regset* /*inout*/);

; In    a1 contains swi number, a2 points to ARM register structure

os_swi  STMDB   sp!, {v1-v6, lk}

        ORR     a1, a1, #SWI_OP         ; make into SWI operation

        ADR     v1, exit_sequence
        LDMIA   v1,      {v2,v3}
        MOVS    ip, a2
        MOVEQ   v2, #0
        STMDB   sp!, {a1, v2,v3}        ; copy SWI and exit code onto stack
        LDMNEIA a2, {r0-r9}             ; load up registers for SWI if wanted
        MOV     pc, sp                  ; and jump to the sequence

;       SWI     whatever                ; <- sp
exit_sequence
        STMIA   ip, {r0-r9}
        LDMIA   sp!, {a2-a4, v1-v6, pc}^ ; a2-a4 just to pop stack


; os_error *os_swix(int swicode, os_regset* /*inout*/);

; In    a1 contains swi number, a2 points to ARM register structure

os_swix STMDB   sp!, {v1-v6, lk}

        ORR     a1, a1, #SWI_OP         ; make into SWI operation
        ORR     a1, a1, #XOS_MASK       ; make a SWI of V-error type

        ADR     v1, xexit_sequence
        LDMIA   v1, {v2,v3,v4,v5}
        MOVS    ip, a2
        MOVEQ   v2, #0
        STMDB   sp!, {a1, v2,v3,v4,v5}  ; copy SWI and exit code onto stack
        LDMNEIA ip, {r0-r9}             ; load up registers for SWI if wanted
        MOV     pc, sp                  ; and jump to the sequence

;       SWI     Xwhatever               ; <- sp
xexit_sequence
        STMIA   ip, {r0-r9}
        MOVVC   a1, #0
        ADD     sp, sp, #4 * 4
        LDMIA   sp!, {a3, v1-v6, pc}^
                                        ; a3 is junk (LDM)
                                        ; Note: CAN NOT move stack past LDM
                                        ; before instruction executes
os_swix0
os_swix1
os_swix2
os_swix3
os_swix4
os_swix5
os_swix6
os_swix7
        ORR     a1, a1, #&20000
os_swi0
os_swi1
os_swi2
os_swi3
os_swi4
os_swi5
os_swi6
        STMDB   sp!, {v1-v6, lk}
        ORR     a1, a1, #SWI_OP
        ADR     ip, swi6_exit_sequence
        LDMIA   ip, {ip, lk}
        STMDB   sp!, {a1, ip, lk}
        MOV     a1, a2
        MOV     a2, a3
        MOV     a3, a4
        ADD     ip, sp, #10 * 4
        LDMIA   ip, {a4, v1, v2}
        MOV     pc, sp

swi6_exit_sequence
        MOVVC   a1, #0
        LDMIA   sp!, {a2-a4, v1-v6, pc}^

swi_ret_inst
        MOV     pc, ip

os_swix1r
        ORR     a1, a1, #&20000
os_swi1r
        ORR     a1, a1, #&ef000000
        LDR     a2, swi_ret_inst
        STMDB   sp!, {a1, a2, a3, v1-v6, lk}
        MOV     a1, a2
        MOV     ip, pc
        MOV     pc, sp
        LDR     ip, [sp, #8]!
        LDMVSIA sp!, {a2, v1-v6, pc}^
        TEQ     ip, #0
        STRNE   a1, [ip]
        MOV     a1, #0
        LDMIA   sp!, {a2, v1-v6, pc}^

os_swix2r
        ORR     a1, a1, #&20000
os_swi2r
        MOV     ip, a2
        ORR     a1, a1, #&ef000000
        LDR     a2, swi_ret_inst
        STMDB   sp!, {a1, a2, a4, v1-v6, lk}
        MOV     a1, ip
        MOV     a2, a3
        MOV     ip, pc
        MOV     pc, sp
        LDR     ip, [sp, #8]!
        LDMVSIA sp!, {a2, v1-v6, pc}^
        TEQ     ip, #0
        STRNE   a1, [ip]
        LDR     ip, [sp, #8 * 4]
        TEQ     ip, #0
        STRNE   a2, [ip]
        MOV     a1, #0
        LDMIA   sp!, {a2, v1-v6, pc}^

os_swix3r
        ORR     a1, a1, #&20000
os_swi3r
        MOV     ip, a2
        ORR     a1, a1, #&ef000000
        LDR     a2, swi_ret_inst
        STMDB   sp!, {a1, a2, v1-v6, lk}
        MOV     a1, ip
        MOV     a2, a3
        MOV     a3, a4
        MOV     ip, pc
        MOV     pc, sp
        ADD     ip, sp, #9 * 4
        LDMIA   ip, {v1, v2, v3}
        LDMVSIA sp!, {a2, a3, v1-v6, pc}^
        TEQ     v1, #0
        STRNE   a1, [v1]
        TEQ     v2, #0
        STRNE   a2, [v2]
        TEQ     v3, #0
        STRNE   a3, [v3]
        MOV     a1, #0
        LDMIA   sp!, {a2, a3, v1-v6, pc}^

os_swix4r
        ORR     a1, a1, #&20000
os_swi4r
        MOV     ip, a2
        ORR     a1, a1, #&ef000000
        LDR     a2, swi_ret_inst
        STMDB   sp!, {a1, a2, v1-v6, lk}
        MOV     a1, ip
        MOV     a2, a3
        MOV     a3, a4
        LDR     a4, [sp, #9 * 4]
        MOV     ip, pc
        MOV     pc, sp
        ADD     ip, sp, #10 * 4
        LDMIA   ip, {v1-v4}
        LDMVSIA sp!, {a2, a3, v1-v6, pc}^
        TEQ     v1, #0
        STRNE   a1, [v1]
        TEQ     v2, #0
        STRNE   a2, [v2]
        TEQ     v3, #0
        STRNE   a3, [v3]
        TEQ     v4, #0
        STRNE   a4, [v4]
        MOV     a1, #0
        LDMIA   sp!, {a2, a3, v1-v6, pc}^

os_swix5r
        ORR     a1, a1, #&20000
os_swi5r
        MOV     ip, a2
        ORR     a1, a1, #&ef000000
        LDR     a2, swi_ret_inst
        STMDB   sp!, {a1, a2, v1-v6, lk}
        MOV     a1, ip
        MOV     a2, a3
        MOV     a3, a4
        ADD     ip, sp, #9 * 4
        LDMIA   ip, {a4, v1}
        MOV     ip, pc
        MOV     pc, sp
        ADD     ip, sp, #11 * 4
        LDMIA   ip, {v3-v6, ip}
        LDMVSIA sp!, {a3, a4, v1-v6, pc}^
        TEQ     v3, #0
        STRNE   a1, [v3]
        TEQ     v4, #0
        STRNE   a2, [v4]
        TEQ     v5, #0
        STRNE   a3, [v5]
        TEQ     v6, #0
        STRNE   a4, [v6]
        TEQ     ip, #0
        STRNE   v1, [ip]
        MOV     a1, #0
        LDMIA   sp!, {a3, a4, v1-v6, pc}^

os_swix6r
        ORR     a1, a1, #&20000
os_swi6r
        MOV     ip, a2
        ORR     a1, a1, #&ef000000
        LDR     a2, swi_ret_inst
        STMDB   sp!, {a1, a2, v1-v6, lk}
        MOV     a1, ip
        MOV     a2, a3
        MOV     a3, a4
        ADD     ip, sp, #9 * 4
        LDMIA   ip, {a4, v1, v2}
        MOV     ip, pc
        MOV     pc, sp
        ADD     ip, sp, #12 * 4
        LDMIA   ip, {v3-v6, ip, lk} ; APCS-R assumption here
        LDMVSIA sp!, {a3, a4, v1-v6, pc}^
        TEQ     v3, #0
        STRNE   a1, [v3]
        TEQ     v4, #0
        STRNE   a2, [v4]
        TEQ     v5, #0
        STRNE   a3, [v5]
        TEQ     v6, #0
        STRNE   a4, [v6]
        TEQ     ip, #0
        STRNE   v1, [ip]
        TEQ     lk, #0
        STRNE   v2, [lk]
        MOV     a1, #0
        LDMIA   sp!, {a3, a4, v1-v6, pc}^
@


4.1
log
@Initial revision
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@
