head	4.1;
branch	4.1.3;
access;
symbols
	Patch-0_08:4.1.3.1
	Patch-0_07:4.1.3.1
	Patch-0_06:4.1.3.1
	Patch-0_05:4.1.3.1
	Patch-0_04:4.1.3.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.3.1
	Ursula_RiscPC:4.1.3.1.0.8
	rthornb_UrsulaBuild-19Aug1998:4.1.3.1
	UrsulaBuild_FinalSoftload:4.1.3.1
	rthornb_UrsulaBuild-12Aug1998:4.1.3.1
	aglover_UrsulaBuild-05Aug1998:4.1.3.1
	rthornb_UrsulaBuild-29Jul1998:4.1.3.1
	rthornb_UrsulaBuild-22Jul1998:4.1.3.1
	rthornb_UrsulaBuild-15Jul1998:4.1.3.1
	rthornb_UrsulaBuild-07Jul1998:4.1.3.1
	rthornb_UrsulaBuild-17Jun1998:4.1.3.1
	rthornb_UrsulaBuild-03Jun1998:4.1.3.1
	rthornb_UrsulaBuild-27May1998:4.1.3.1
	rthornb_UrsulaBuild-21May1998:4.1.3.1
	rthornb_UrsulaBuild_01May1998:4.1.3.1
	Daytona:4.1.3.1.0.6
	Daytona_bp:4.1.3.1
	Ursula:4.1.3.1.0.4
	Ursula_bp:4.1.3.1
	RO_3_71:4.1.3.1
	ART_bp:4.1.3.1
	ART:4.1.3.1.0.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.1
date	96.11.06.03.59.55;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.1.3.1
date	96.11.06.03.59.55;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

	AREA	|asm$$code|,CODE,READONLY
	EXPORT	rolib1

lk	RN 14

a1	RN 0
a2	RN 1
a3	RN 2
a4	RN 3

v1	RN 4
v2	RN 5
v3	RN 6
v4	RN 7
v5	RN 8
v6	RN 9

XOS_MASK	* &20000
XOS_CallASWI	* &2006f

rolib1	DCD	os_swi
; void os_swi(int swicode, os_regset* /*inout*/);

; In    a1 contains swi number, a2 points to ARM register structure

os_swi
        STMDB   sp!, {v1-v6, sl, lk}
        MOV     r10, r0
        MOVS    ip, r1
        BEQ     os_swi_noregset
        LDMIA   ip, {r0-r9}
        SWI     XOS_CallASWI
        STMIA   ip, {r0-r9}
        LDMIA   sp!, {v1-v6, sl, pc}^
os_swi_noregset
        SWI     XOS_CallASWI
        LDMIA   sp!, {v1-v6, sl, pc}^

	NOP				; must pad correctly
	NOP
	NOP
	NOP

; os_error *os_swix(int swicode, os_regset* /*inout*/);

; In    a1 contains swi number, a2 points to ARM register structure

os_swix
        STMDB   sp!, {v1-v6, sl, lk}
        ORR     a1, a1, #XOS_MASK       ; make a SWI of V-error type
        MOV     r10, r0
        MOVS    ip, r1
        BEQ     os_swix_noregset
        LDMIA   ip, {r0-r9}
        SWI     XOS_CallASWI
        STMIA   ip, {r0-r9}
        MOVVC   a1, #0
        LDMIA   sp!, {v1-v6, sl, pc}^
os_swix_noregset
        SWI     XOS_CallASWI
        MOVVC   a1, #0
        LDMIA   sp!, {v1-v6, sl, pc}^

	DCD	-1

	END
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@
