head	4.3;
access;
symbols
	System-1_00:4.3
	System-0_99:4.3
	System-0_98:4.3
	System-0_97:4.3
	System-0_96:4.3
	System-0_95:4.3
	System-0_94:4.3
	System-0_93:4.3
	System-0_92:4.3
	System-0_91:4.3
	System-0_90:4.3
	System-0_89:4.3
	System-0_88:4.3
	System-0_87:4.3
	System-0_86:4.3
	System-0_85:4.3
	System-0_07:4.3
	System-0_06:4.3
	System-0_05:4.3
	System-0_04:4.3
	System-0_03:4.3
	System-0_02:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.10
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	Ursula:4.2.0.8
	Ursula_bp:4.2
	Ursula_12Aug1998_bp:4.2
	Ursula_12Aug1998:4.2.0.4
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	rthornb_UrsulaBuild_01May1998:4.2
	Daytona:4.2.0.6
	Daytona_bp:4.2
	RO_3_71:4.1.3.1
	ART_bp:4.2
	ART:4.2.0.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	99.10.04.14.42.32;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.05.08.13.42.38;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.54.24;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.54.24;	author nturton;	state Exp;
branches
	4.1.1.1.2.1;
next	;

4.1.1.1.2.1
date	97.04.24.14.46.06;	author kbracey;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.04.02.36;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@  Rewrote SysPaths without dependency on JCoxhead's personal libraries.
Detail:
  SysPaths now doesn't contain the OS_GBPB misuse bug (the "check if R4
    is -1 before checking the count of returned objects" bug).
  Doesn't rely on pulling in source files from elsewhere (ie. Support
    library which isn't in CVS - and it won't be because it's rubbish)
  Doesn't rely on OSLib, but uses the built-in C library routines instead.
Admin:
  Tested on desktop machine.
  Requires RMVersion 0.02 or later.
    (CVS: RiscOS/Sources/Programmer/RMVersion)
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * SysPaths
 *
 * Copyright (C) Pace Micro Technology plc. 1999
 *
 *
 * This application code will ensure that Boot$OSVersion is set correctly
 * (without a dot in the version number) and will setup Sys$Path to be
 * a canonical version of "<System$Dir>.", and will set System$Path to refer
 * to all appropriate numeric subdirectories of <System$Dir> (in descending order)
 * with <System$Dir>. as the final path component.
 *
 *
 * History:
 *
 * 04-Oct-1999   SBrodie   Rewrote this utility without OS_GBPB misuse bug.
 *
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "kernel.h"
#include "swis.h"

#include "RMVersion.h"

#define ENTRY_LIMIT 256 /* Number of path elements we can cope with. */

static int directories[ENTRY_LIMIT];

/* Auxiliary comparison function for qsort - requires that the entries
 * are in order highest to lowest.
 */
static int qsort_aux(const void *v0, const void *v1)
{
        const int *i0 = v0;
        const int *i1 = v1;

        return *i1 - *i0;
}


/* Construct System$Path by examining the objects inside !System which are
 * entirely numeric in nature
 */
static void build_system_path(const char *basedir, int version)
{
        static char buffer[BUFSIZ];
        size_t bufsize = sizeof(buffer) - 32; /* Allow safety margin */
        char *buf;
        int entry_count = 0;
        int context = 0;

        while (context != -1) {
                char *buf = buffer;
                int count;
                if (_swix(OS_GBPB, _INR(0,6)|_OUTR(3,4),
                        9, basedir, buffer, 256, context, bufsize, 0,
                        &count, &context)) break;

                while (count-- > 0 && entry_count < ENTRY_LIMIT) {
                        int buflen = strlen(buf), v, n;
                        /* Process name pointed to by 'buf' */
                        sscanf(buf, "%d%n", &v, (n = -1, &n));
                        if (n == buflen && v <= version) {
                                directories[entry_count++] = v;
                        }
                        buf += buflen + 1;
                }
        }

        if (entry_count > 1) {
                qsort(directories, entry_count, sizeof(*directories), qsort_aux);
        }


        buf = buffer;
        *buf = '\0';

        for (context=0; context<entry_count; ++context) {
                const size_t length = sprintf(buf, "Sys:%d.,", directories[context]);
                buf += length;
                if (length > bufsize) break; /* overflow - oh dear */
                bufsize -= length;
        }

        sprintf(buf, "%s.", basedir);
        _kernel_setenv("System$Path", buffer);
}

static int syspaths_os_version(void)
{
        static char os_version[16];
        const char *bootosversion;
        unsigned int version, n;

        bootosversion = getenv("Boot$OSVersion");
        if (!bootosversion) {
                if (rmversion(rmversion_ROM, "UtilityModule", &version)) return 0;
                sprintf(os_version, "%X0", version >> 4);
        }
        else {
                /* Remove unnecessary dots. ie. turn "3.50" into "350" */
                char *dst = os_version;
                const char *eodst = os_version + sizeof(os_version) - 1;
                while (*bootosversion && dst < eodst) {
                        if ((*dst++ = *bootosversion++) == '.') {
                                --dst;
                        }
                }
                *dst = '\0';
        }

        _kernel_setenv("Boot$OSVersion", os_version);
        sscanf (os_version, "%u%n", &version, (n = -1, &n));
        if (n == strlen(os_version)) {
                return version;
        }
        else {
                return 0;
        }
}

static const char *syspaths_system_dir(void)
{
        static char system_dir[BUFSIZ];
        size_t length;

        if (_kernel_getenv("System$Dir", system_dir, sizeof(system_dir))) {
                return 0;
        }
        length = strlen(system_dir);
        system_dir[length] = '.';
        system_dir[length+1] = '\0';
        _kernel_setenv("Sys$Path", system_dir);
        system_dir[length] = '\0';

        return system_dir;
}

int main(void)
{
        const char *basedir = syspaths_system_dir();
        const int version   = syspaths_os_version();

        if (basedir && version) {
                build_system_path(basedir, version);
        }

        return 0;
}
@


4.2
log
@ART branch (version 0.76) folded in
@
text
@d15 19
a33 1
/*main.c - generate system variables for System application*/
a34 1
/*From CLib*/
d37 4
d42 1
a42 15
/*From OSLib*/
#include "macros.h"
#include "os.h"
#include "osgbpb.h"
#include "osmodule.h"

/*From Support*/
#include "x.h"

/* J R C  2nd Mar 1995  Sorts the path elements, rather than assuming they
                        come out in numerical order.
                        Use x-clear SWI's.
                        Match any numerical directory. Sort in numerical
                        order.
*/
d44 1
a44 1
#define ENTRY_LIMIT 32 /*Number path elements we can cope with.*/
d46 1
a46 1
x_STATIC_ERROR (Too_Many_Entries, 1, "Too many entries")
d48 7
a54 2
static int Compare (void const *i0, void const *i1)
      {return atoi (*(char **) i1) - atoi (*(char **) i0);}
d56 6
a61 2
/*
 * Return the version number of a ROM module.
d63 1
a63 1
static int Module_Version(const char *module)
d65 38
a102 16
   int v = 0, m, s;
   char *name;
   x_exception x;

   m = 0, s = -1;
   x_TRY (&x)
      /*Bizarrely, this call only stops when it gets an error ...*/
      while (TRUE)
      {  m = osmodule_enumerate_rom_with_info (m, s, &s, &name, NULL,
            NULL, &v);

         if (strcmp (name, module) == 0)
            break;
      }
   x_CATCH (&x)
      ;
d104 2
a105 1
   return v >> 8;
d108 54
a161 1
int main (void)
d163 3
a165 86
{  char info [os_FILE_NAME_LIMIT + 1], system_path [1024 + 1],
      system_dir [1024 + 1], sys_path [os_CLI_LIMIT + 1],
      os_version [os_CLI_LIMIT + 1], *entries [ENTRY_LIMIT];
   int context, version, n, used, v, entry, entry_count;
   char *point;
   x_exception x;
   os_error *e;

   x_TRY (&x)
   {  /*Fix fault: ignore arguments, and read System$Dir instead. J R C
         20th Mar 1995*/
      os_read_var_val ("System$Dir", system_dir, sizeof system_dir, 0,
            os_VARTYPE_STRING, &used, NULL);
      system_dir [used] = '\0';

      /*Set Sys$Path*/
      sprintf (sys_path, "%s.", system_dir);
      os_set_var_val ("Sys$Path", (byte *) sys_path, strlen (sys_path), 0,
            os_VARTYPE_STRING, NULL);

      /*Which OS are we running under?*/
      e = xos_read_var_val ("Boot$OSVersion", os_version, sizeof os_version, 0,
            os_VARTYPE_STRING, &used, NULL, NULL);
      if (e->errnum == error_VAR_CANT_FIND)
      {
         /* Set it if not already set */
         sprintf(os_version, "%X0%n", Module_Version("UtilityModule")/16, &used);
         os_set_var_val("Boot$OSVersion", (byte *) os_version, used, 0,
                        os_VARTYPE_STRING, NULL);
      }
      else if (e)
         x_THROW(e);
      else
         os_version [used] = '\0';

      /* Turn "3.50" into "350" */
      if ((point = strchr(os_version, '.')) != NULL)
      {
         do
         {
            *point=*(point+1);
         }
         while (*++point);
         os_set_var_val("Boot$OSVersion", (byte *) os_version, used, 0,
                        os_VARTYPE_STRING, NULL);
     }

      sscanf (os_version, "%d%n", &version, (n = -1, &n));
      if (n == strlen (os_version))
      {  entry_count = 0;
         context = 0;
         while ((context = osgbpb_dir_entries (system_dir,
               (osgbpb_string_list *) info, 1, context, sizeof info, "*",
               NULL)) != osgbpb_NO_MORE)
         {  /*Check that the name is composed of digits.*/
            sscanf (info, "%d%n", &v, (n = -1, &n));

            if (n == strlen (info) && v <= version)
            {  /*Add this directory to our table.*/
               if (entry_count == ENTRY_LIMIT)
                  x_THROW (Too_Many_Entries);

               strcpy (entries [entry_count++] = x_alloc (strlen (info) + 1),
                     info);
            }
         }

         /*Sort the list we just made.*/
         qsort (entries, entry_count, sizeof *entries, &Compare);

         CLEAR (system_path);
         for (entry = 0; entry < entry_count; entry++)
         {  if (!EMPTY (system_path)) strcat (system_path, ",");
            sprintf (system_path + strlen (system_path), "Sys:%s.",
                 entries [entry]);
         }

         if (!EMPTY (system_path)) strcat (system_path, ",");
         strcat (system_path, sys_path);

         os_set_var_val ("System$Path", (byte *) system_path,
               strlen (system_path), 0, os_VARTYPE_STRING, NULL);
      }
   }
   x_CATCH (&x)
      ;
d167 1
a167 1
   x_EXIT (&x);
@


4.1
log
@Initial revision
@
text
@d25 1
d44 25
d75 1
d77 1
d92 25
a116 3
      os_read_var_val ("Boot$OSVersion", os_version, sizeof os_version, 0,
            os_VARTYPE_STRING, &used, NULL);
      os_version [used] = '\0';
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@


4.1.1.1.2.1
log
@Merged in RO_3_70.
Made SysPaths set Boot$OSVersion if not already set, and convert "3.50"
and similar to "350".
@
text
@a24 1
#include "osmodule.h"
a42 25
/*
 * Return the version number of a ROM module.
 */
static int Module_Version(const char *module)
{
   int v = 0, m, s;
   char *name;
   x_exception x;

   m = 0, s = -1;
   x_TRY (&x)
      /*Bizarrely, this call only stops when it gets an error ...*/
      while (TRUE)
      {  m = osmodule_enumerate_rom_with_info (m, s, &s, &name, NULL,
            NULL, &v);

         if (strcmp (name, module) == 0)
            break;
      }
   x_CATCH (&x)
      ;

   return v >> 8;
}

a48 1
   char *point;
a49 1
   os_error *e;
d64 3
a66 25
      e = xos_read_var_val ("Boot$OSVersion", os_version, sizeof os_version, 0,
            os_VARTYPE_STRING, &used, NULL, NULL);
      if (e->errnum == error_VAR_CANT_FIND)
      {
         /* Set it if not already set */
         sprintf(os_version, "%X0%n", Module_Version("UtilityModule")/16, &used);
         os_set_var_val("Boot$OSVersion", (byte *) os_version, used, 0,
                        os_VARTYPE_STRING, NULL);
      }
      else if (e)
         x_THROW(e);
      else
         os_version [used] = '\0';

      /* Turn "3.50" into "350" */
      if ((point = strchr(os_version, '.')) != NULL)
      {
         do
         {
            *point=*(point+1);
         }
         while (*++point);
         os_set_var_val("Boot$OSVersion", (byte *) os_version, used, 0,
                        os_VARTYPE_STRING, NULL);
     }
@
