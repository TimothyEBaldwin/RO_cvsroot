head	1.3;
access;
symbols
	Source-0_59:1.3
	Source-0_58:1.3
	Source-0_57:1.3
	Source-0_56:1.3
	Source-0_55:1.3
	Source-0_54:1.3
	Source-0_53:1.3
	Source-0_52:1.3
	Source-0_51:1.3
	Source-0_50:1.3
	Source-0_49:1.3
	InetSetup-0_49:1.3
	InetSetup-0_48:1.3
	InetSetup-0_47:1.3
	InetSetup-0_46:1.3
	InetSetup-0_45:1.3
	InetSetup-0_44:1.3
	InetSetup-0_43:1.3
	InetSetup-0_42:1.3
	InetSetup-0_41:1.3
	InetSetup-0_40:1.3
	InetSetup-0_39:1.3
	InetSetup-0_38:1.3
	InetSetup-0_37:1.3
	InetSetup-0_36:1.3
	InetSetup-0_35:1.3
	InetSetup-0_34:1.3
	InetSetup-0_33:1.3
	InetSetup-0_32:1.2
	InetSetup-0_31:1.2
	InetSetup-0_30:1.2
	InetSetup-0_29:1.2
	StrongARM_merge:1.1.4.1
	sbrodie_InetSetup_dev_merge:1.2
	Daytona_merge:1.2
	Ursula_merge:1.2
	InetSetup-0_28:1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.2
	Ursula_RiscPC:1.2.0.8
	InetSetup-0_22-1_1_2_4:1.2
	InetSetup-0_22-1_1_2_3_2_1:1.2
	sbrodie_InetSetup_dev-1_1_2_3:1.2.0.6
	sbrodie_InetSetup_dev-1_1_2_3_bp:1.2
	rthornb_UrsulaBuild-19Aug1998:1.2
	UrsulaBuild_FinalSoftload:1.2
	rthornb_UrsulaBuild-12Aug1998:1.2
	aglover_UrsulaBuild-05Aug1998:1.2
	rthornb_UrsulaBuild-29Jul1998:1.2
	rthornb_UrsulaBuild-22Jul1998:1.2
	InetSetup-0_22-1_1_2_3:1.2
	rthornb_UrsulaBuild-15Jul1998:1.2
	rthornb_UrsulaBuild-07Jul1998:1.2
	rthornb_UrsulaBuild-17Jun1998:1.2
	rthornb_UrsulaBuild-03Jun1998:1.2
	rthornb_UrsulaBuild-27May1998:1.2
	rthornb_UrsulaBuild-21May1998:1.2
	bavison_InetSetup-0_25:1.2
	rthornb_UrsulaBuild_01May1998:1.2
	celkins_InetSetup_0_24:1.2
	InetSetup-0_22-1_1_2_2:1.2
	Daytona:1.2.0.4
	Daytona_bp:1.2
	Ursula:1.2.0.2
	Ursula_bp:1.2
	StrongARM:1.1.0.4
	RO_3_71:1.1.4.1;
locks; strict;
comment	@# @;


1.3
date	2002.12.19.20.31.29;	author srevill;	state Exp;
branches;
next	1.2;

1.2
date	97.05.06.17.27.28;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.04.30.18.43.36;	author kbracey;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	97.04.30.18.43.37;	author kbracey;	state Exp;
branches;
next	;

1.1.4.1
date	97.05.06.17.11.14;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Changes to the greying out behaviour in the "Obtain IP address" dialogue
as it was a real mess,particularly the behaviour when DHCP was selected.
UK Res file overhaul.
You can now drag the AUNMap to an editor and it will be loaded.
New Sprites files.

Version 0.33. Tagged as 'InetSetup-0_33'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   wimpevent.c
 * Purpose: functions for wimp event dispatching
 * Author:  IDJ
 * History: 19-Jun-94: IDJ: created
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "os.h"

#include "wimpevent.h"
#include "x.h"

#define MAX_WIMP_HANDLER 20

static event_wimp_handler_item    *Handlers[MAX_WIMP_HANDLER+1];
static event_wimp_handler_item    *All_Handlers = 0;

#define MATCHES(h, object_id, event_code, handler, handle) \
   ((h)->object_id == (object_id) && (h)->event_code == (event_code) && \
         (h)->handler == (handler) && (h)->handle == (handle))

static int Matches (int event_code, event_wimp_handler_item *h, toolbox_block *id_block)

{
    /*
     * first see if "other" wimp event handler, and interested in event
     * then look to see if interested in all objects,
     * then interest in this object.
     */

    if (event_code >= MAX_WIMP_HANDLER && h->event_code != event_code && h->event_code != -1)
        return 0;

   return h->object_id == event_ANY || h->object_id == id_block->this_obj;
}

static void Call (int event_code, event_wimp_handler_item *h, wimp_block *poll_block, toolbox_block *id_block, bool *claimed)

{  for (; h != NULL; h = h->next)
      if (Matches (event_code, h, id_block) && h->handler != NULL)
         /* call the handler */
         if (h->handler (event_code, poll_block, id_block, h->handle))
         {  *claimed = TRUE;
            return;
         }

    *claimed = FALSE;
}

extern void wimpevent_dispatch (int event_code, wimp_block *poll_block, toolbox_block *id_block)

{ /*
   * if it's not a known wimp event, use dft handler, else we call any wimp handlers
   * on the chain for this event.  If they return non-zero, they have claimed
   * the event.
   */

   bool claimed = FALSE;

   Call (event_code, Handlers [event_code < MAX_WIMP_HANDLER?
         event_code: MAX_WIMP_HANDLER - 1], poll_block, id_block,
         &claimed);
   if (!claimed)
      Call (event_code, All_Handlers, poll_block, id_block, &claimed);
}

/* --------------------------- registering handlers for wimp events ----------------------------- */

void wimpevent_register_wimp_handler (toolbox_o object_id, int event_code, event_wimp_handler *handler, void *handle)
{
    event_wimp_handler_item *h, *new_h;
    int                   elem;

    /*
     * see if there's one there already
     */

    /*
     * start looking down the linked list which hangs off the array element for this event
     * Any events > 19 are just handled by a default case.
     */

    if (event_code < MAX_WIMP_HANDLER)
        elem = event_code;
    else
        elem = MAX_WIMP_HANDLER;

    if (event_code == -1)
        h =  All_Handlers;
    else
        h = Handlers[elem];


    while (h != NULL)
    {
        /*
         * if there's already a handler, just return.
         */

        if (MATCHES (h, object_id, event_code, handler, handle))
            return;

        h = h->next;
    }


    /*
     * make a new entry in the list for this event
     */

    new_h = x_ALLOC (sizeof *new_h);
    new_h->object_id  = object_id;
    new_h->event_code = event_code;
    new_h->handler    = handler;
    new_h->handle     = handle;

    if (event_code == -1)
    {
        new_h->next               = All_Handlers;
        All_Handlers   = new_h;
    }
    else
    {
        new_h->next               = Handlers[elem];
        Handlers[elem] = new_h;
    }
}



void wimpevent_deregister_wimp_handler (toolbox_o object_id, int event_code, event_wimp_handler *handler, void *handle)
{
    event_wimp_handler_item *h, *prev_h;
    event_wimp_handler_item **listhead;
    int elem;

    /*
     * see if handler registered, and if so delete it.
     */

    /*
     * start looking down the linked list which hangs off the array element for this event
     */

    if (event_code <= MAX_WIMP_HANDLER-1)
        elem = event_code;
    else
        elem = MAX_WIMP_HANDLER;

    if (event_code == -1)
    {
        h = prev_h = All_Handlers;
        listhead = &All_Handlers;
    }
    else
    {
        h = prev_h = Handlers[elem];
        listhead = &Handlers[elem];
    }

    while (h != NULL)
    {
        /*
         * see if there's a handler, which matches.
         */

        if (MATCHES (h, object_id, event_code, handler, handle))
            break;

        prev_h = h;
        h = h->next;
    }


    /*
     * delete the handler from the list
     */

    if (h != NULL)
    {
        if (h == *listhead)
            *listhead = h->next;
        else
            prev_h->next = h->next;

        x_FREE (h, sizeof *h);
    }
}
@


1.2
log
@Version RO_3_71 taken
@
text
@d55 1
a55 1
static void Call (int event_code, event_wimp_handler_item *h, wimp_block *poll_block, toolbox_block *id_block, int *claimed)
@


1.1
log
@file wimpevent was initially added on branch RO_3_70_to_3_71.
@
text
@d1 206
@


1.1.4.1
log
@Version RO_3_71 taken
@
text
@a0 206
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   wimpevent.c
 * Purpose: functions for wimp event dispatching
 * Author:  IDJ
 * History: 19-Jun-94: IDJ: created
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "os.h"

#include "wimpevent.h"
#include "x.h"

#define MAX_WIMP_HANDLER 20

static event_wimp_handler_item    *Handlers[MAX_WIMP_HANDLER+1];
static event_wimp_handler_item    *All_Handlers = 0;

#define MATCHES(h, object_id, event_code, handler, handle) \
   ((h)->object_id == (object_id) && (h)->event_code == (event_code) && \
         (h)->handler == (handler) && (h)->handle == (handle))

static int Matches (int event_code, event_wimp_handler_item *h, toolbox_block *id_block)

{
    /*
     * first see if "other" wimp event handler, and interested in event
     * then look to see if interested in all objects,
     * then interest in this object.
     */

    if (event_code >= MAX_WIMP_HANDLER && h->event_code != event_code && h->event_code != -1)
        return 0;

   return h->object_id == event_ANY || h->object_id == id_block->this_obj;
}

static void Call (int event_code, event_wimp_handler_item *h, wimp_block *poll_block, toolbox_block *id_block, int *claimed)

{  for (; h != NULL; h = h->next)
      if (Matches (event_code, h, id_block) && h->handler != NULL)
         /* call the handler */
         if (h->handler (event_code, poll_block, id_block, h->handle))
         {  *claimed = TRUE;
            return;
         }

    *claimed = FALSE;
}

extern void wimpevent_dispatch (int event_code, wimp_block *poll_block, toolbox_block *id_block)

{ /*
   * if it's not a known wimp event, use dft handler, else we call any wimp handlers
   * on the chain for this event.  If they return non-zero, they have claimed
   * the event.
   */

   bool claimed = FALSE;

   Call (event_code, Handlers [event_code < MAX_WIMP_HANDLER?
         event_code: MAX_WIMP_HANDLER - 1], poll_block, id_block,
         &claimed);
   if (!claimed)
      Call (event_code, All_Handlers, poll_block, id_block, &claimed);
}

/* --------------------------- registering handlers for wimp events ----------------------------- */

void wimpevent_register_wimp_handler (toolbox_o object_id, int event_code, event_wimp_handler *handler, void *handle)
{
    event_wimp_handler_item *h, *new_h;
    int                   elem;

    /*
     * see if there's one there already
     */

    /*
     * start looking down the linked list which hangs off the array element for this event
     * Any events > 19 are just handled by a default case.
     */

    if (event_code < MAX_WIMP_HANDLER)
        elem = event_code;
    else
        elem = MAX_WIMP_HANDLER;

    if (event_code == -1)
        h =  All_Handlers;
    else
        h = Handlers[elem];


    while (h != NULL)
    {
        /*
         * if there's already a handler, just return.
         */

        if (MATCHES (h, object_id, event_code, handler, handle))
            return;

        h = h->next;
    }


    /*
     * make a new entry in the list for this event
     */

    new_h = x_ALLOC (sizeof *new_h);
    new_h->object_id  = object_id;
    new_h->event_code = event_code;
    new_h->handler    = handler;
    new_h->handle     = handle;

    if (event_code == -1)
    {
        new_h->next               = All_Handlers;
        All_Handlers   = new_h;
    }
    else
    {
        new_h->next               = Handlers[elem];
        Handlers[elem] = new_h;
    }
}



void wimpevent_deregister_wimp_handler (toolbox_o object_id, int event_code, event_wimp_handler *handler, void *handle)
{
    event_wimp_handler_item *h, *prev_h;
    event_wimp_handler_item **listhead;
    int elem;

    /*
     * see if handler registered, and if so delete it.
     */

    /*
     * start looking down the linked list which hangs off the array element for this event
     */

    if (event_code <= MAX_WIMP_HANDLER-1)
        elem = event_code;
    else
        elem = MAX_WIMP_HANDLER;

    if (event_code == -1)
    {
        h = prev_h = All_Handlers;
        listhead = &All_Handlers;
    }
    else
    {
        h = prev_h = Handlers[elem];
        listhead = &Handlers[elem];
    }

    while (h != NULL)
    {
        /*
         * see if there's a handler, which matches.
         */

        if (MATCHES (h, object_id, event_code, handler, handle))
            break;

        prev_h = h;
        h = h->next;
    }


    /*
     * delete the handler from the list
     */

    if (h != NULL)
    {
        if (h == *listhead)
            *listhead = h->next;
        else
            prev_h->next = h->next;

        x_FREE (h, sizeof *h);
    }
}
@


1.1.2.1
log
@Merged from 3.71 CD
@
text
@a0 206
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   wimpevent.c
 * Purpose: functions for wimp event dispatching
 * Author:  IDJ
 * History: 19-Jun-94: IDJ: created
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "os.h"

#include "wimpevent.h"
#include "x.h"

#define MAX_WIMP_HANDLER 20

static event_wimp_handler_item    *Handlers[MAX_WIMP_HANDLER+1];
static event_wimp_handler_item    *All_Handlers = 0;

#define MATCHES(h, object_id, event_code, handler, handle) \
   ((h)->object_id == (object_id) && (h)->event_code == (event_code) && \
         (h)->handler == (handler) && (h)->handle == (handle))

static int Matches (int event_code, event_wimp_handler_item *h, toolbox_block *id_block)

{
    /*
     * first see if "other" wimp event handler, and interested in event
     * then look to see if interested in all objects,
     * then interest in this object.
     */

    if (event_code >= MAX_WIMP_HANDLER && h->event_code != event_code && h->event_code != -1)
        return 0;

   return h->object_id == event_ANY || h->object_id == id_block->this_obj;
}

static void Call (int event_code, event_wimp_handler_item *h, wimp_block *poll_block, toolbox_block *id_block, int *claimed)

{  for (; h != NULL; h = h->next)
      if (Matches (event_code, h, id_block) && h->handler != NULL)
         /* call the handler */
         if (h->handler (event_code, poll_block, id_block, h->handle))
         {  *claimed = TRUE;
            return;
         }

    *claimed = FALSE;
}

extern void wimpevent_dispatch (int event_code, wimp_block *poll_block, toolbox_block *id_block)

{ /*
   * if it's not a known wimp event, use dft handler, else we call any wimp handlers
   * on the chain for this event.  If they return non-zero, they have claimed
   * the event.
   */

   bool claimed = FALSE;

   Call (event_code, Handlers [event_code < MAX_WIMP_HANDLER?
         event_code: MAX_WIMP_HANDLER - 1], poll_block, id_block,
         &claimed);
   if (!claimed)
      Call (event_code, All_Handlers, poll_block, id_block, &claimed);
}

/* --------------------------- registering handlers for wimp events ----------------------------- */

void wimpevent_register_wimp_handler (toolbox_o object_id, int event_code, event_wimp_handler *handler, void *handle)
{
    event_wimp_handler_item *h, *new_h;
    int                   elem;

    /*
     * see if there's one there already
     */

    /*
     * start looking down the linked list which hangs off the array element for this event
     * Any events > 19 are just handled by a default case.
     */

    if (event_code < MAX_WIMP_HANDLER)
        elem = event_code;
    else
        elem = MAX_WIMP_HANDLER;

    if (event_code == -1)
        h =  All_Handlers;
    else
        h = Handlers[elem];


    while (h != NULL)
    {
        /*
         * if there's already a handler, just return.
         */

        if (MATCHES (h, object_id, event_code, handler, handle))
            return;

        h = h->next;
    }


    /*
     * make a new entry in the list for this event
     */

    new_h = x_ALLOC (sizeof *new_h);
    new_h->object_id  = object_id;
    new_h->event_code = event_code;
    new_h->handler    = handler;
    new_h->handle     = handle;

    if (event_code == -1)
    {
        new_h->next               = All_Handlers;
        All_Handlers   = new_h;
    }
    else
    {
        new_h->next               = Handlers[elem];
        Handlers[elem] = new_h;
    }
}



void wimpevent_deregister_wimp_handler (toolbox_o object_id, int event_code, event_wimp_handler *handler, void *handle)
{
    event_wimp_handler_item *h, *prev_h;
    event_wimp_handler_item **listhead;
    int elem;

    /*
     * see if handler registered, and if so delete it.
     */

    /*
     * start looking down the linked list which hangs off the array element for this event
     */

    if (event_code <= MAX_WIMP_HANDLER-1)
        elem = event_code;
    else
        elem = MAX_WIMP_HANDLER;

    if (event_code == -1)
    {
        h = prev_h = All_Handlers;
        listhead = &All_Handlers;
    }
    else
    {
        h = prev_h = Handlers[elem];
        listhead = &Handlers[elem];
    }

    while (h != NULL)
    {
        /*
         * see if there's a handler, which matches.
         */

        if (MATCHES (h, object_id, event_code, handler, handle))
            break;

        prev_h = h;
        h = h->next;
    }


    /*
     * delete the handler from the list
     */

    if (h != NULL)
    {
        if (h == *listhead)
            *listhead = h->next;
        else
            prev_h->next = h->next;

        x_FREE (h, sizeof *h);
    }
}
@
