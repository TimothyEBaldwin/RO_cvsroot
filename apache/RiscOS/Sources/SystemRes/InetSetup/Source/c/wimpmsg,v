head	1.2;
access;
symbols
	Source-0_59:1.2
	Source-0_58:1.2
	Source-0_57:1.2
	Source-0_56:1.2
	Source-0_55:1.2
	Source-0_54:1.2
	Source-0_53:1.2
	Source-0_52:1.2
	Source-0_51:1.2
	Source-0_50:1.2
	Source-0_49:1.2
	InetSetup-0_49:1.2
	InetSetup-0_48:1.2
	InetSetup-0_47:1.2
	InetSetup-0_46:1.2
	InetSetup-0_45:1.2
	InetSetup-0_44:1.2
	InetSetup-0_43:1.2
	InetSetup-0_42:1.2
	InetSetup-0_41:1.2
	InetSetup-0_40:1.2
	InetSetup-0_39:1.2
	InetSetup-0_38:1.2
	InetSetup-0_37:1.2
	InetSetup-0_36:1.2
	InetSetup-0_35:1.2
	InetSetup-0_34:1.2
	InetSetup-0_33:1.2
	InetSetup-0_32:1.2
	InetSetup-0_31:1.2
	InetSetup-0_30:1.2
	InetSetup-0_29:1.2
	StrongARM_merge:1.1.4.1
	sbrodie_InetSetup_dev_merge:1.2
	Daytona_merge:1.2
	Ursula_merge:1.2
	InetSetup-0_28:1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.2
	Ursula_RiscPC:1.2.0.8
	InetSetup-0_22-1_1_2_4:1.2
	InetSetup-0_22-1_1_2_3_2_1:1.2
	sbrodie_InetSetup_dev-1_1_2_3:1.2.0.6
	sbrodie_InetSetup_dev-1_1_2_3_bp:1.2
	rthornb_UrsulaBuild-19Aug1998:1.2
	UrsulaBuild_FinalSoftload:1.2
	rthornb_UrsulaBuild-12Aug1998:1.2
	aglover_UrsulaBuild-05Aug1998:1.2
	rthornb_UrsulaBuild-29Jul1998:1.2
	rthornb_UrsulaBuild-22Jul1998:1.2
	InetSetup-0_22-1_1_2_3:1.2
	rthornb_UrsulaBuild-15Jul1998:1.2
	rthornb_UrsulaBuild-07Jul1998:1.2
	rthornb_UrsulaBuild-17Jun1998:1.2
	rthornb_UrsulaBuild-03Jun1998:1.2
	rthornb_UrsulaBuild-27May1998:1.2
	rthornb_UrsulaBuild-21May1998:1.2
	bavison_InetSetup-0_25:1.2
	rthornb_UrsulaBuild_01May1998:1.2
	celkins_InetSetup_0_24:1.2
	InetSetup-0_22-1_1_2_2:1.2
	Daytona:1.2.0.4
	Daytona_bp:1.2
	Ursula:1.2.0.2
	Ursula_bp:1.2
	StrongARM:1.1.0.4
	RO_3_71:1.1.4.1;
locks; strict;
comment	@# @;


1.2
date	97.05.06.17.27.29;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.04.30.18.43.38;	author kbracey;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	97.04.30.18.43.38;	author kbracey;	state Exp;
branches;
next	;

1.1.4.1
date	97.05.06.17.11.16;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Version RO_3_71 taken
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   wimpmsg.c
 * Purpose: functions for wimp message handling
 * Author:  IDJ
 * History: 19-Jun-94:     IDJ:   created
 *          30th Aug 1995  J R C  Hacked for Support library
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "os.h"

#include "wimpmsg.h"
#include "x.h"

static event_message_handler_item *Handlers = NULL; /*the list of all
      wimp message handlers*/

/* ------------------ dispatching a wimp message ------------------ */
void wimpmsg_dispatch (wimp_block *poll_block, toolbox_block *id_block)

{  event_message_handler_item *h;

   id_block = id_block;

   for (h = Handlers; h != NULL; h = h->next)
      if (h->handler != NULL && (h->msg_no == -1 ||
            h->msg_no == poll_block->message.action))
         if (h->handler (&poll_block->message, h->handle))
            return;
}

void wimpmsg_register_message_handler (int msg_no,
      event_message_handler *handler, void *handle)

{  event_message_handler_item *h;

   h = x_ALLOC (sizeof *h);
   h->msg_no     = msg_no;
   h->handler    = handler;
   h->handle     = handle;
   h->next       = Handlers;
   Handlers = h;
}

void wimpmsg_deregister_message_handler (int msg_no,
     event_message_handler *handler, void *handle)

{  event_message_handler_item **h;

   /*search for exact match of handler, list and handle*/
   for (h = &Handlers; *h != NULL; h = &(*h)->next)
      if ((*h)->handler == handler && (*h)->handle == handle &&
            (*h)->msg_no == msg_no)
      {  event_message_handler_item *hh = *h;

         *h = hh->next;
         x_FREE (hh, sizeof *hh);
      }
}
@


1.1
log
@file wimpmsg was initially added on branch RO_3_70_to_3_71.
@
text
@d1 75
@


1.1.4.1
log
@Version RO_3_71 taken
@
text
@a0 75
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   wimpmsg.c
 * Purpose: functions for wimp message handling
 * Author:  IDJ
 * History: 19-Jun-94:     IDJ:   created
 *          30th Aug 1995  J R C  Hacked for Support library
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "os.h"

#include "wimpmsg.h"
#include "x.h"

static event_message_handler_item *Handlers = NULL; /*the list of all
      wimp message handlers*/

/* ------------------ dispatching a wimp message ------------------ */
void wimpmsg_dispatch (wimp_block *poll_block, toolbox_block *id_block)

{  event_message_handler_item *h;

   id_block = id_block;

   for (h = Handlers; h != NULL; h = h->next)
      if (h->handler != NULL && (h->msg_no == -1 ||
            h->msg_no == poll_block->message.action))
         if (h->handler (&poll_block->message, h->handle))
            return;
}

void wimpmsg_register_message_handler (int msg_no,
      event_message_handler *handler, void *handle)

{  event_message_handler_item *h;

   h = x_ALLOC (sizeof *h);
   h->msg_no     = msg_no;
   h->handler    = handler;
   h->handle     = handle;
   h->next       = Handlers;
   Handlers = h;
}

void wimpmsg_deregister_message_handler (int msg_no,
     event_message_handler *handler, void *handle)

{  event_message_handler_item **h;

   /*search for exact match of handler, list and handle*/
   for (h = &Handlers; *h != NULL; h = &(*h)->next)
      if ((*h)->handler == handler && (*h)->handle == handle &&
            (*h)->msg_no == msg_no)
      {  event_message_handler_item *hh = *h;

         *h = hh->next;
         x_FREE (hh, sizeof *hh);
      }
}
@


1.1.2.1
log
@Merged from 3.71 CD
@
text
@a0 75
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   wimpmsg.c
 * Purpose: functions for wimp message handling
 * Author:  IDJ
 * History: 19-Jun-94:     IDJ:   created
 *          30th Aug 1995  J R C  Hacked for Support library
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "os.h"

#include "wimpmsg.h"
#include "x.h"

static event_message_handler_item *Handlers = NULL; /*the list of all
      wimp message handlers*/

/* ------------------ dispatching a wimp message ------------------ */
void wimpmsg_dispatch (wimp_block *poll_block, toolbox_block *id_block)

{  event_message_handler_item *h;

   id_block = id_block;

   for (h = Handlers; h != NULL; h = h->next)
      if (h->handler != NULL && (h->msg_no == -1 ||
            h->msg_no == poll_block->message.action))
         if (h->handler (&poll_block->message, h->handle))
            return;
}

void wimpmsg_register_message_handler (int msg_no,
      event_message_handler *handler, void *handle)

{  event_message_handler_item *h;

   h = x_ALLOC (sizeof *h);
   h->msg_no     = msg_no;
   h->handler    = handler;
   h->handle     = handle;
   h->next       = Handlers;
   Handlers = h;
}

void wimpmsg_deregister_message_handler (int msg_no,
     event_message_handler *handler, void *handle)

{  event_message_handler_item **h;

   /*search for exact match of handler, list and handle*/
   for (h = &Handlers; *h != NULL; h = &(*h)->next)
      if ((*h)->handler == handler && (*h)->handle == handle &&
            (*h)->msg_no == msg_no)
      {  event_message_handler_item *hh = *h;

         *h = hh->next;
         x_FREE (hh, sizeof *hh);
      }
}
@
