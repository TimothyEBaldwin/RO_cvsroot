head	1.4;
access;
symbols
	Source-0_59:1.4
	Source-0_58:1.4
	Source-0_57:1.4
	Source-0_56:1.4
	Source-0_55:1.4
	Source-0_54:1.4
	Source-0_53:1.4
	Source-0_52:1.4
	Source-0_51:1.4
	Source-0_50:1.4
	Source-0_49:1.4
	InetSetup-0_49:1.4
	InetSetup-0_48:1.4
	InetSetup-0_47:1.4
	InetSetup-0_46:1.4
	InetSetup-0_45:1.4
	InetSetup-0_44:1.4
	InetSetup-0_43:1.4
	InetSetup-0_42:1.4
	InetSetup-0_41:1.4
	InetSetup-0_40:1.4
	InetSetup-0_39:1.4
	InetSetup-0_38:1.4
	InetSetup-0_37:1.4
	InetSetup-0_36:1.4
	InetSetup-0_35:1.4
	InetSetup-0_34:1.4
	InetSetup-0_33:1.4
	InetSetup-0_32:1.3
	InetSetup-0_31:1.3
	InetSetup-0_30:1.3
	InetSetup-0_29:1.3
	StrongARM_merge:1.1.4.1
	sbrodie_InetSetup_dev_merge:1.2.2.1
	Daytona_merge:1.2
	Ursula_merge:1.2.2.1
	InetSetup-0_28:1.3
	mstphens_UrsulaRiscPCBuild_20Nov98:1.2.2.1
	Ursula_RiscPC:1.2.2.1.0.4
	InetSetup-0_22-1_1_2_4:1.2.2.1
	InetSetup-0_22-1_1_2_3_2_1:1.2.2.1
	sbrodie_InetSetup_dev-1_1_2_3:1.2.2.1.0.2
	sbrodie_InetSetup_dev-1_1_2_3_bp:1.2.2.1
	rthornb_UrsulaBuild-19Aug1998:1.2.2.1
	UrsulaBuild_FinalSoftload:1.2.2.1
	rthornb_UrsulaBuild-12Aug1998:1.2.2.1
	aglover_UrsulaBuild-05Aug1998:1.2.2.1
	rthornb_UrsulaBuild-29Jul1998:1.2.2.1
	rthornb_UrsulaBuild-22Jul1998:1.2.2.1
	InetSetup-0_22-1_1_2_3:1.2.2.1
	rthornb_UrsulaBuild-15Jul1998:1.2.2.1
	rthornb_UrsulaBuild-07Jul1998:1.2.2.1
	rthornb_UrsulaBuild-17Jun1998:1.2.2.1
	rthornb_UrsulaBuild-03Jun1998:1.2.2.1
	rthornb_UrsulaBuild-27May1998:1.2.2.1
	rthornb_UrsulaBuild-21May1998:1.2.2.1
	bavison_InetSetup-0_25:1.2.2.1
	rthornb_UrsulaBuild_01May1998:1.2.2.1
	celkins_InetSetup_0_24:1.2.2.1
	InetSetup-0_22-1_1_2_2:1.2.2.1
	Daytona:1.2.0.4
	Daytona_bp:1.2
	Ursula:1.2.0.2
	Ursula_bp:1.2
	StrongARM:1.1.0.4
	RO_3_71:1.1.4.1;
locks; strict;
comment	@# @;


1.4
date	2002.12.19.20.31.28;	author srevill;	state Exp;
branches;
next	1.3;

1.3
date	99.08.10.16.04.53;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	97.05.06.17.27.14;	author kbracey;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	97.04.30.18.43.18;	author kbracey;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.2.2.1
date	97.11.18.16.08.36;	author dbrown;	state Exp;
branches;
next	;

1.1.2.1
date	97.04.30.18.43.19;	author kbracey;	state Exp;
branches;
next	;

1.1.4.1
date	97.05.06.17.10.59;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Changes to the greying out behaviour in the "Obtain IP address" dialogue
as it was a real mess,particularly the behaviour when DHCP was selected.
UK Res file overhaul.
You can now drag the AUNMap to an editor and it will be loaded.
New Sprites files.

Version 0.33. Tagged as 'InetSetup-0_33'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "osbyte.h"
#include "econet.h"
#include "hourglass.h"
#include "netfs.h"
#include "netprint.h"
#include "displayfield.h"
#include "stringset.h"
#include "event.h"
#include "writablefield.h"

#include "AUN.h"
#include "ModUtils.h"
#include "Gadgets.h"
#include "Main.h"

static bool setshow(bits event_code, toolbox_action *event,
                    toolbox_block *id, void *handle)
{
    int context = 0;
    netfs_file_server server;
    int totallen=0;
    char *buffer, *p;
    int count, i;
    os_error *e;

    NOT_USED(event_code); NOT_USED(event); NOT_USED(handle);

    if (id->this_cmp == aun_FileServer)
    {
        xhourglass_on();
        for (;;)
        {
            e=xnetfs_enumerate_fs_list(context, &server, sizeof server, 1, &context, &i);
            if (e)
            {
                xhourglass_off();
            	return TRUE;
            }
            if (i==1)
            	totallen+=17;
            if (context == -1)
                break;
        }

        buffer=malloc(totallen);
        if (buffer)
        {
            context=0;
            p=buffer;
            *p='\0';
            for (;;)
            {
                context=netfs_enumerate_fs_list(context, &server, sizeof server, 1, &i);
                if (i==1)
                {
        	    sprintf(p, "%s,%n", server.disc_name, &i);
        	    p += i;
                }
                if (context == -1)
            	    break;
       	    }
       	    if (p>buffer)
            	*(p-1)='\0';

            stringset_set_available(0, id->this_obj, aun_FileServer, buffer);
            free(buffer);
        }
        netfs_enable_cache();
        xhourglass_off();
        return TRUE;
    }
    else if (id->this_cmp == aun_PrintServer)
    {
        buffer=malloc(8192);
        if (buffer)
        {
            e=xnetprintlistservers_name((netprint_name_entry *)buffer, 8192, 300, &count, 0);
            if (e==0)
            {
            	for (i = 0; i < count - 1; i++)
                    buffer[strlen(buffer)]=',';
            	stringset_set_available(0, id->this_obj, aun_PrintServer, buffer);
            }
            free(buffer);
        }
        return TRUE;
    }
    return FALSE;
}

void AUNFaff(toolbox_o o)
{
    char buffer[64];
    os_station_number sn = { 0 }; // important to zero this (see next line)

    if (xeconet_read_local_station_and_net((byte *)&sn.station, (byte *)&sn.net) == 0)
    	sprintf(buffer, "%d.%d", sn.net, sn.station);
    else
        sprintf(buffer, "%d", readCMOS(osbyte_CONFIGURE_STATION));

    displayfield_set_value(0, o, aun_ThisStation, buffer);

    event_register_toolbox_handler(o, action_STRING_SET_ABOUT_TO_BE_SHOWN, setshow, 0);

    sn.station=readCMOS(osbyte_CONFIGURE_FS_STATION);

    if (sn.station != 0)
    {
        sn.net = readCMOS(osbyte_CONFIGURE_FS_NET);
        sprintf(buffer, "%d.%d", sn.net, sn.station);
    }
    else
    {
        char *p=buffer;
        int i;
        *p++ = readCMOS(osbyte_CONFIGURE_FS_NAME0);
        for (i = osbyte_CONFIGURE_FS_NAME1; i <= osbyte_CONFIGURE_FS_NAME15; i++)
            *p++ = readCMOS(i);
        *p='\0'; /* Just in case */

        if (!strcmp(buffer, "")) strcpy(buffer, "0.254");
    }
    stringset_set_selected_string(0, o, aun_FileServer, buffer);

    sn.station=readCMOS(osbyte_CONFIGURE_PS_STATION);

    if (sn.station != 0)
    {
        sn.net = readCMOS(osbyte_CONFIGURE_PS_NET);
        sprintf(buffer, "%d.%d", sn.net, sn.station);
    }
    else
    {
        char *p=buffer;
        int i;
        *p++ = readCMOS(osbyte_CONFIGURE_PS_NAME0);
        for (i = osbyte_CONFIGURE_PS_NAME1; i <= osbyte_CONFIGURE_PS_NAME5; i++)
            *p++ = readCMOS(i);
        *p='\0'; /* Just in case */

        if (!strcmp(buffer, "")) strcpy(buffer, "0.235");
    }
    stringset_set_selected_string(0, o, aun_PrintServer, buffer);
}

void UpdateAUNCMOS(void)
{
    char FS[32] = {0}, PS[32] = {0};
    os_station_number sn;
    os_error *e;
    char *p;
    int i;
    extern toolbox_o AUNObject;

    stringset_get_selected_string(0, AUNObject, aun_FileServer, FS, sizeof FS);
    stringset_get_selected_string(0, AUNObject, aun_PrintServer, PS, sizeof PS);

    e = xeconet_read_station_number(FS, 0, &sn.station, &sn.net);

    if (e || sn.station == -1)
    {
        if (e->errnum != error_BAD_NUMB && e->errnum != error_NO_SUCH_SWI)
        {
            report_error(e);
            return;
        }
    	writeCMOS(osbyte_CONFIGURE_FS_STATION, 0);
    	writeCMOS(osbyte_CONFIGURE_FS_NAME0, FS[0]);
    	for (i = osbyte_CONFIGURE_FS_NAME1, p = FS+1; i <= osbyte_CONFIGURE_FS_NAME15; i++)
    	    writeCMOS(i, *p++);
    }
    else
    {
        writeCMOS(osbyte_CONFIGURE_FS_STATION, sn.station);
        writeCMOS(osbyte_CONFIGURE_FS_NET, sn.net >= 0 ? sn.net : 0);
    }

    e=xeconet_read_station_number(PS, 0, &sn.station, &sn.net);
    if (e || sn.station == -1)
    {
        if (e->errnum != error_BAD_NUMB && e->errnum != error_NO_SUCH_SWI)
        {
            report_error(e);
            return;
        }
    	writeCMOS(osbyte_CONFIGURE_PS_STATION, 0);
    	writeCMOS(osbyte_CONFIGURE_PS_NAME0, PS[0]);
    	for (i = osbyte_CONFIGURE_PS_NAME1, p = PS+1; i <= osbyte_CONFIGURE_PS_NAME5; i++)
    	    writeCMOS(i, *p++);
    }
    else
    {
        writeCMOS(osbyte_CONFIGURE_PS_STATION, sn.station);
        writeCMOS(osbyte_CONFIGURE_PS_NET, sn.net >= 0 ? sn.net : 0);
    }

    AUNFaff(AUNObject);
}
@


1.3
log
@  Merge of half a dozen separate branches to the trunk:
    Ursula
    Ursula_RiscPC
    StrongARM
    Daytona(!)
    sbrodie_InetSetup_dev-1_1_2_3
    ART
Detail:
  What a mess.
Admin:
  This is the Ursula plugin version.  It builds.

Version 0.28. Tagged as 'InetSetup-0_28'
@
text
@d141 1
a141 1
    stringsetsetselected_string(0, o, aun_FileServer, buffer);
d161 1
a161 1
    stringsetsetselected_string(0, o, aun_PrintServer, buffer);
d173 2
a174 2
    stringsetgetselected_string(0, AUNObject, aun_FileServer, FS, sizeof FS);
    stringsetgetselected_string(0, AUNObject, aun_PrintServer, PS, sizeof PS);
@


1.2
log
@Version RO_3_71 taken
@
text
@d138 2
d158 2
d176 2
a177 1
    e=xeconet_read_station_number(FS, 0, &sn.station, &sn.net);
@


1.2.2.1
log
@Support added for PPP module and additional network cards.  Front end has also
been modified to fit style guide more closely.
@
text
@a137 2

        if (!strcmp(buffer, "")) strcpy(buffer, "0.254");
a155 2

        if (!strcmp(buffer, "")) strcpy(buffer, "0.235");
d172 1
a172 2
    e = xeconet_read_station_number(FS, 0, &sn.station, &sn.net);

@


1.1
log
@file AUN was initially added on branch RO_3_70_to_3_71.
@
text
@d1 211
@


1.1.4.1
log
@Version RO_3_71 taken
@
text
@a0 211
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "osbyte.h"
#include "econet.h"
#include "hourglass.h"
#include "netfs.h"
#include "netprint.h"
#include "displayfield.h"
#include "stringset.h"
#include "event.h"
#include "writablefield.h"

#include "AUN.h"
#include "ModUtils.h"
#include "Gadgets.h"
#include "Main.h"

static bool setshow(bits event_code, toolbox_action *event,
                    toolbox_block *id, void *handle)
{
    int context = 0;
    netfs_file_server server;
    int totallen=0;
    char *buffer, *p;
    int count, i;
    os_error *e;

    NOT_USED(event_code); NOT_USED(event); NOT_USED(handle);

    if (id->this_cmp == aun_FileServer)
    {
        xhourglass_on();
        for (;;)
        {
            e=xnetfs_enumerate_fs_list(context, &server, sizeof server, 1, &context, &i);
            if (e)
            {
                xhourglass_off();
            	return TRUE;
            }
            if (i==1)
            	totallen+=17;
            if (context == -1)
                break;
        }

        buffer=malloc(totallen);
        if (buffer)
        {
            context=0;
            p=buffer;
            *p='\0';
            for (;;)
            {
                context=netfs_enumerate_fs_list(context, &server, sizeof server, 1, &i);
                if (i==1)
                {
        	    sprintf(p, "%s,%n", server.disc_name, &i);
        	    p += i;
                }
                if (context == -1)
            	    break;
       	    }
       	    if (p>buffer)
            	*(p-1)='\0';

            stringset_set_available(0, id->this_obj, aun_FileServer, buffer);
            free(buffer);
        }
        netfs_enable_cache();
        xhourglass_off();
        return TRUE;
    }
    else if (id->this_cmp == aun_PrintServer)
    {
        buffer=malloc(8192);
        if (buffer)
        {
            e=xnetprintlistservers_name((netprint_name_entry *)buffer, 8192, 300, &count, 0);
            if (e==0)
            {
            	for (i = 0; i < count - 1; i++)
                    buffer[strlen(buffer)]=',';
            	stringset_set_available(0, id->this_obj, aun_PrintServer, buffer);
            }
            free(buffer);
        }
        return TRUE;
    }
    return FALSE;
}

void AUNFaff(toolbox_o o)
{
    char buffer[64];
    os_station_number sn = { 0 }; // important to zero this (see next line)

    if (xeconet_read_local_station_and_net((byte *)&sn.station, (byte *)&sn.net) == 0)
    	sprintf(buffer, "%d.%d", sn.net, sn.station);
    else
        sprintf(buffer, "%d", readCMOS(osbyte_CONFIGURE_STATION));

    displayfield_set_value(0, o, aun_ThisStation, buffer);

    event_register_toolbox_handler(o, action_STRING_SET_ABOUT_TO_BE_SHOWN, setshow, 0);

    sn.station=readCMOS(osbyte_CONFIGURE_FS_STATION);

    if (sn.station != 0)
    {
        sn.net = readCMOS(osbyte_CONFIGURE_FS_NET);
        sprintf(buffer, "%d.%d", sn.net, sn.station);
    }
    else
    {
        char *p=buffer;
        int i;
        *p++ = readCMOS(osbyte_CONFIGURE_FS_NAME0);
        for (i = osbyte_CONFIGURE_FS_NAME1; i <= osbyte_CONFIGURE_FS_NAME15; i++)
            *p++ = readCMOS(i);
        *p='\0'; /* Just in case */
    }
    stringsetsetselected_string(0, o, aun_FileServer, buffer);

    sn.station=readCMOS(osbyte_CONFIGURE_PS_STATION);

    if (sn.station != 0)
    {
        sn.net = readCMOS(osbyte_CONFIGURE_PS_NET);
        sprintf(buffer, "%d.%d", sn.net, sn.station);
    }
    else
    {
        char *p=buffer;
        int i;
        *p++ = readCMOS(osbyte_CONFIGURE_PS_NAME0);
        for (i = osbyte_CONFIGURE_PS_NAME1; i <= osbyte_CONFIGURE_PS_NAME5; i++)
            *p++ = readCMOS(i);
        *p='\0'; /* Just in case */
    }
    stringsetsetselected_string(0, o, aun_PrintServer, buffer);
}

void UpdateAUNCMOS(void)
{
    char FS[32] = {0}, PS[32] = {0};
    os_station_number sn;
    os_error *e;
    char *p;
    int i;
    extern toolbox_o AUNObject;

    stringsetgetselected_string(0, AUNObject, aun_FileServer, FS, sizeof FS);
    stringsetgetselected_string(0, AUNObject, aun_PrintServer, PS, sizeof PS);

    e=xeconet_read_station_number(FS, 0, &sn.station, &sn.net);
    if (e || sn.station == -1)
    {
        if (e->errnum != error_BAD_NUMB && e->errnum != error_NO_SUCH_SWI)
        {
            report_error(e);
            return;
        }
    	writeCMOS(osbyte_CONFIGURE_FS_STATION, 0);
    	writeCMOS(osbyte_CONFIGURE_FS_NAME0, FS[0]);
    	for (i = osbyte_CONFIGURE_FS_NAME1, p = FS+1; i <= osbyte_CONFIGURE_FS_NAME15; i++)
    	    writeCMOS(i, *p++);
    }
    else
    {
        writeCMOS(osbyte_CONFIGURE_FS_STATION, sn.station);
        writeCMOS(osbyte_CONFIGURE_FS_NET, sn.net >= 0 ? sn.net : 0);
    }

    e=xeconet_read_station_number(PS, 0, &sn.station, &sn.net);
    if (e || sn.station == -1)
    {
        if (e->errnum != error_BAD_NUMB && e->errnum != error_NO_SUCH_SWI)
        {
            report_error(e);
            return;
        }
    	writeCMOS(osbyte_CONFIGURE_PS_STATION, 0);
    	writeCMOS(osbyte_CONFIGURE_PS_NAME0, PS[0]);
    	for (i = osbyte_CONFIGURE_PS_NAME1, p = PS+1; i <= osbyte_CONFIGURE_PS_NAME5; i++)
    	    writeCMOS(i, *p++);
    }
    else
    {
        writeCMOS(osbyte_CONFIGURE_PS_STATION, sn.station);
        writeCMOS(osbyte_CONFIGURE_PS_NET, sn.net >= 0 ? sn.net : 0);
    }

    AUNFaff(AUNObject);
}
@


1.1.2.1
log
@Merged from 3.71 CD
@
text
@a0 211
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "osbyte.h"
#include "econet.h"
#include "hourglass.h"
#include "netfs.h"
#include "netprint.h"
#include "displayfield.h"
#include "stringset.h"
#include "event.h"
#include "writablefield.h"

#include "AUN.h"
#include "ModUtils.h"
#include "Gadgets.h"
#include "Main.h"

static bool setshow(bits event_code, toolbox_action *event,
                    toolbox_block *id, void *handle)
{
    int context = 0;
    netfs_file_server server;
    int totallen=0;
    char *buffer, *p;
    int count, i;
    os_error *e;

    NOT_USED(event_code); NOT_USED(event); NOT_USED(handle);

    if (id->this_cmp == aun_FileServer)
    {
        xhourglass_on();
        for (;;)
        {
            e=xnetfs_enumerate_fs_list(context, &server, sizeof server, 1, &context, &i);
            if (e)
            {
                xhourglass_off();
            	return TRUE;
            }
            if (i==1)
            	totallen+=17;
            if (context == -1)
                break;
        }

        buffer=malloc(totallen);
        if (buffer)
        {
            context=0;
            p=buffer;
            *p='\0';
            for (;;)
            {
                context=netfs_enumerate_fs_list(context, &server, sizeof server, 1, &i);
                if (i==1)
                {
        	    sprintf(p, "%s,%n", server.disc_name, &i);
        	    p += i;
                }
                if (context == -1)
            	    break;
       	    }
       	    if (p>buffer)
            	*(p-1)='\0';

            stringset_set_available(0, id->this_obj, aun_FileServer, buffer);
            free(buffer);
        }
        netfs_enable_cache();
        xhourglass_off();
        return TRUE;
    }
    else if (id->this_cmp == aun_PrintServer)
    {
        buffer=malloc(8192);
        if (buffer)
        {
            e=xnetprintlistservers_name((netprint_name_entry *)buffer, 8192, 300, &count, 0);
            if (e==0)
            {
            	for (i = 0; i < count - 1; i++)
                    buffer[strlen(buffer)]=',';
            	stringset_set_available(0, id->this_obj, aun_PrintServer, buffer);
            }
            free(buffer);
        }
        return TRUE;
    }
    return FALSE;
}

void AUNFaff(toolbox_o o)
{
    char buffer[64];
    os_station_number sn = { 0 }; // important to zero this (see next line)

    if (xeconet_read_local_station_and_net((byte *)&sn.station, (byte *)&sn.net) == 0)
    	sprintf(buffer, "%d.%d", sn.net, sn.station);
    else
        sprintf(buffer, "%d", readCMOS(osbyte_CONFIGURE_STATION));

    displayfield_set_value(0, o, aun_ThisStation, buffer);

    event_register_toolbox_handler(o, action_STRING_SET_ABOUT_TO_BE_SHOWN, setshow, 0);

    sn.station=readCMOS(osbyte_CONFIGURE_FS_STATION);

    if (sn.station != 0)
    {
        sn.net = readCMOS(osbyte_CONFIGURE_FS_NET);
        sprintf(buffer, "%d.%d", sn.net, sn.station);
    }
    else
    {
        char *p=buffer;
        int i;
        *p++ = readCMOS(osbyte_CONFIGURE_FS_NAME0);
        for (i = osbyte_CONFIGURE_FS_NAME1; i <= osbyte_CONFIGURE_FS_NAME15; i++)
            *p++ = readCMOS(i);
        *p='\0'; /* Just in case */
    }
    stringsetsetselected_string(0, o, aun_FileServer, buffer);

    sn.station=readCMOS(osbyte_CONFIGURE_PS_STATION);

    if (sn.station != 0)
    {
        sn.net = readCMOS(osbyte_CONFIGURE_PS_NET);
        sprintf(buffer, "%d.%d", sn.net, sn.station);
    }
    else
    {
        char *p=buffer;
        int i;
        *p++ = readCMOS(osbyte_CONFIGURE_PS_NAME0);
        for (i = osbyte_CONFIGURE_PS_NAME1; i <= osbyte_CONFIGURE_PS_NAME5; i++)
            *p++ = readCMOS(i);
        *p='\0'; /* Just in case */
    }
    stringsetsetselected_string(0, o, aun_PrintServer, buffer);
}

void UpdateAUNCMOS(void)
{
    char FS[32] = {0}, PS[32] = {0};
    os_station_number sn;
    os_error *e;
    char *p;
    int i;
    extern toolbox_o AUNObject;

    stringsetgetselected_string(0, AUNObject, aun_FileServer, FS, sizeof FS);
    stringsetgetselected_string(0, AUNObject, aun_PrintServer, PS, sizeof PS);

    e=xeconet_read_station_number(FS, 0, &sn.station, &sn.net);
    if (e || sn.station == -1)
    {
        if (e->errnum != error_BAD_NUMB && e->errnum != error_NO_SUCH_SWI)
        {
            report_error(e);
            return;
        }
    	writeCMOS(osbyte_CONFIGURE_FS_STATION, 0);
    	writeCMOS(osbyte_CONFIGURE_FS_NAME0, FS[0]);
    	for (i = osbyte_CONFIGURE_FS_NAME1, p = FS+1; i <= osbyte_CONFIGURE_FS_NAME15; i++)
    	    writeCMOS(i, *p++);
    }
    else
    {
        writeCMOS(osbyte_CONFIGURE_FS_STATION, sn.station);
        writeCMOS(osbyte_CONFIGURE_FS_NET, sn.net >= 0 ? sn.net : 0);
    }

    e=xeconet_read_station_number(PS, 0, &sn.station, &sn.net);
    if (e || sn.station == -1)
    {
        if (e->errnum != error_BAD_NUMB && e->errnum != error_NO_SUCH_SWI)
        {
            report_error(e);
            return;
        }
    	writeCMOS(osbyte_CONFIGURE_PS_STATION, 0);
    	writeCMOS(osbyte_CONFIGURE_PS_NAME0, PS[0]);
    	for (i = osbyte_CONFIGURE_PS_NAME1, p = PS+1; i <= osbyte_CONFIGURE_PS_NAME5; i++)
    	    writeCMOS(i, *p++);
    }
    else
    {
        writeCMOS(osbyte_CONFIGURE_PS_STATION, sn.station);
        writeCMOS(osbyte_CONFIGURE_PS_NET, sn.net >= 0 ? sn.net : 0);
    }

    AUNFaff(AUNObject);
}
@
