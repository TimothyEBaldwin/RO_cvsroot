head	1.3;
access;
symbols
	Source-0_59:1.3
	Source-0_58:1.3
	Source-0_57:1.2
	Source-0_56:1.2
	Source-0_55:1.2
	Source-0_54:1.2
	Source-0_53:1.2
	Source-0_52:1.2
	Source-0_51:1.2
	Source-0_50:1.2
	Source-0_49:1.2
	InetSetup-0_49:1.2
	InetSetup-0_48:1.2
	InetSetup-0_47:1.2
	InetSetup-0_46:1.2
	InetSetup-0_45:1.2
	InetSetup-0_44:1.2
	InetSetup-0_43:1.2
	InetSetup-0_42:1.2
	InetSetup-0_41:1.2
	InetSetup-0_40:1.2
	InetSetup-0_39:1.2
	InetSetup-0_38:1.2
	InetSetup-0_37:1.2
	InetSetup-0_36:1.2
	InetSetup-0_35:1.2
	InetSetup-0_34:1.2
	InetSetup-0_33:1.2
	InetSetup-0_32:1.2
	InetSetup-0_31:1.2
	InetSetup-0_30:1.2
	InetSetup-0_29:1.2
	StrongARM_merge:1.1.4.1
	sbrodie_InetSetup_dev_merge:1.2
	Daytona_merge:1.2
	Ursula_merge:1.2
	InetSetup-0_28:1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.2
	Ursula_RiscPC:1.2.0.8
	InetSetup-0_22-1_1_2_4:1.2
	InetSetup-0_22-1_1_2_3_2_1:1.2
	sbrodie_InetSetup_dev-1_1_2_3:1.2.0.6
	sbrodie_InetSetup_dev-1_1_2_3_bp:1.2
	rthornb_UrsulaBuild-19Aug1998:1.2
	UrsulaBuild_FinalSoftload:1.2
	rthornb_UrsulaBuild-12Aug1998:1.2
	aglover_UrsulaBuild-05Aug1998:1.2
	rthornb_UrsulaBuild-29Jul1998:1.2
	rthornb_UrsulaBuild-22Jul1998:1.2
	InetSetup-0_22-1_1_2_3:1.2
	rthornb_UrsulaBuild-15Jul1998:1.2
	rthornb_UrsulaBuild-07Jul1998:1.2
	rthornb_UrsulaBuild-17Jun1998:1.2
	rthornb_UrsulaBuild-03Jun1998:1.2
	rthornb_UrsulaBuild-27May1998:1.2
	rthornb_UrsulaBuild-21May1998:1.2
	bavison_InetSetup-0_25:1.2
	rthornb_UrsulaBuild_01May1998:1.2
	celkins_InetSetup_0_24:1.2
	InetSetup-0_22-1_1_2_2:1.2
	Daytona:1.2.0.4
	Daytona_bp:1.2
	Ursula:1.2.0.2
	Ursula_bp:1.2
	StrongARM:1.1.0.4
	RO_3_71:1.1.4.1;
locks; strict;
comment	@# @;


1.3
date	2017.01.07.17.24.51;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	AdZgvrr1LYvkM3Bz;

1.2
date	97.05.06.17.27.25;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.04.30.18.43.32;	author kbracey;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	97.04.30.18.43.33;	author kbracey;	state Exp;
branches;
next	;

1.1.4.1
date	97.05.06.17.11.11;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Only ensure AUNMsgs when they're needed
When TCP/IP networking is disabled, but AUN or Access are enabled, the Internet module is loaded for its IP handling. In doing so, only load AUNMsgs if the Internet module to hand actually requires it.
Save.c:
  Check if the Internet module is new enough to contain its own messages, and don't load AUNMsgs if so.
Load.c/Versions.h/Messages:
  Populate v_InternetMsgs.
Main.h/Main.c:
  Turn the resolver types into an enum so the max value can be used instead of magic number 4.
SmallDrag.c:
  Don't look for Wimp_PlotIcon define, it's been in the headers for years.
UK/!Run:
  Simplify the check, !InetSetup doesn't need AUNMsgs itself.
Save.c/Routes/SetUpNet:
  Remove the hardwired version string of !Internet, since the files end up in Choices:, that way it can't be out of date ever again.

Version 0.58. Tagged as 'Source-0_58'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdlib.h>

#include "os.h"
#include "osbyte.h"

#include "wimp.h"
#include "draganobject.h"

#include "toolbox.h"
#include "window.h"
#include "gadget.h"
#include "draggable.h"

#include "ModUtils.h"
#include "Gadgets.h"

bool dragginganobject;
bool ourdrag;
extern toolbox_o InternetObject;

bool SmallDragHandler(wimp_event_no event_code, wimp_block *event,
    	    	      toolbox_block *id, void *handle)
{
    if (id->this_cmp != (toolbox_c) handle)
    	return FALSE;

    if (event->pointer.buttons != wimp_DRAG_ADJUST &&
        event->pointer.buttons != wimp_DRAG_SELECT)
        return FALSE;

    if (readCMOS(osbyte_CONFIGURE_DRAG_ASPRITE) & osbyte_CONFIGURE_DRAG_ASPRITE_MASK)
    {
        os_register_block r;
        os_box box;
        wimp_window_state wstate;
    	wimp_i icon[2];
    	wimp_window_info *winfo;
    	wimp_icon ploticon;
    	wimp_w w;
    	int xoff, yoff;

    	dragginganobject = TRUE;

    	gadget_get_icon_list(0, id->this_obj, id->this_cmp, icon, sizeof icon);

    	winfo=(wimp_window_info *)malloc(2048);
    	if (!winfo)
    	    return FALSE;

    	w = window_get_wimp_handle(0, id->this_obj);

    	winfo->w = w;
    	wimp_get_window_info(winfo);
    	ploticon.flags = winfo->icons[icon[0]].flags;
    	ploticon.data  = winfo->icons[icon[0]].data;

        r.registers[1] = (int) &ploticon;

        gadget_get_bbox(0, id->this_obj, id->this_cmp, &box);
        wstate.w = event->pointer.w;
        wimp_get_window_state(&wstate);
        xoff = wstate.visible.x0 - wstate.xscroll;
        yoff = wstate.visible.y1 - wstate.yscroll;
        box.x0 += xoff;
        box.x1 += xoff;
        box.y0 += yoff;
        box.y1 += yoff;

        r.registers[4] = -box.x0;
        r.registers[5] = -box.y0;
        ploticon.extent = box;

        draganobject_start(draganobject_HPOS_LEFT |
                           draganobject_VPOS_BOTTOM |
                           draganobject_NO_BOUND |
                           draganobject_BOUND_POINTER |
                           draganobject_DROP_SHADOW |
                           draganobject_SWI_FUNCTION,
                           (draganobject_function) Wimp_PlotIcon,
                           &r,
                           &box,
                           0);

        free(winfo);
    }
    else
    {
        wimp_drag drag;
        int xoff, yoff;
        wimp_window_state wstate;
        wimp_pointer pointer;

    	dragginganobject = FALSE;
        drag.w = event->pointer.w;
        drag.type = wimp_DRAG_USER_FIXED;
        gadget_get_bbox(0, id->this_obj, id->this_cmp, &drag.initial);

        wstate.w = event->pointer.w;
        wimp_get_window_state(&wstate);
        xoff = wstate.visible.x0 - wstate.xscroll;
        yoff = wstate.visible.y1 - wstate.yscroll;
        drag.initial.x0 += xoff;
        drag.initial.x1 += xoff;
        drag.initial.y0 += yoff;
        drag.initial.y1 += yoff;

        wimp_get_pointer_info(&pointer);

        drag.bbox.x0 = 0;
        drag.bbox.y0 = 0;
        drag.bbox.x1 = 0;
        drag.bbox.y1 = 0;

        wimp_drag_box(&drag);
    }

    ourdrag = TRUE;

    return TRUE;
}

bool SmallDragFinish(wimp_event_no event_code, wimp_block *event,
    	    	     toolbox_block *id, void *handle)
{
    toolbox_action action;
    draggable_action_drag_ended *drag=(draggable_action_drag_ended *) &action.data;
    wimp_pointer pointer;

    if (!ourdrag)
    	return FALSE;

    ourdrag = FALSE;

    if (dragginganobject)
    	draganobject_stop();

    wimp_get_pointer_info(&pointer);

    action.size = 16 + sizeof(draggable_action_drag_ended);
    action.action_no = action_DRAGGABLE_DRAG_ENDED;
    action.flags = 0;
    drag->ids.wimp.w = pointer.w;
    drag->ids.wimp.i = pointer.i;
    drag->pos = pointer.pos;
    toolbox_raise_toolbox_event(0, InternetObject, internet_Extra, &action);

    return TRUE;
}
@


1.2
log
@Version RO_3_71 taken
@
text
@a86 3
    	#ifndef Wimp_PlotIcon
    	#define Wimp_PlotIcon 0x400E2
    	#endif
@


1.1
log
@file SmallDrag was initially added on branch RO_3_70_to_3_71.
@
text
@d1 165
@


1.1.4.1
log
@Version RO_3_71 taken
@
text
@a0 165
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdlib.h>

#include "os.h"
#include "osbyte.h"

#include "wimp.h"
#include "draganobject.h"

#include "toolbox.h"
#include "window.h"
#include "gadget.h"
#include "draggable.h"

#include "ModUtils.h"
#include "Gadgets.h"

bool dragginganobject;
bool ourdrag;
extern toolbox_o InternetObject;

bool SmallDragHandler(wimp_event_no event_code, wimp_block *event,
    	    	      toolbox_block *id, void *handle)
{
    if (id->this_cmp != (toolbox_c) handle)
    	return FALSE;

    if (event->pointer.buttons != wimp_DRAG_ADJUST &&
        event->pointer.buttons != wimp_DRAG_SELECT)
        return FALSE;

    if (readCMOS(osbyte_CONFIGURE_DRAG_ASPRITE) & osbyte_CONFIGURE_DRAG_ASPRITE_MASK)
    {
        os_register_block r;
        os_box box;
        wimp_window_state wstate;
    	wimp_i icon[2];
    	wimp_window_info *winfo;
    	wimp_icon ploticon;
    	wimp_w w;
    	int xoff, yoff;

    	dragginganobject = TRUE;

    	gadget_get_icon_list(0, id->this_obj, id->this_cmp, icon, sizeof icon);

    	winfo=(wimp_window_info *)malloc(2048);
    	if (!winfo)
    	    return FALSE;

    	w = window_get_wimp_handle(0, id->this_obj);

    	winfo->w = w;
    	wimp_get_window_info(winfo);
    	ploticon.flags = winfo->icons[icon[0]].flags;
    	ploticon.data  = winfo->icons[icon[0]].data;

        r.registers[1] = (int) &ploticon;

        gadget_get_bbox(0, id->this_obj, id->this_cmp, &box);
        wstate.w = event->pointer.w;
        wimp_get_window_state(&wstate);
        xoff = wstate.visible.x0 - wstate.xscroll;
        yoff = wstate.visible.y1 - wstate.yscroll;
        box.x0 += xoff;
        box.x1 += xoff;
        box.y0 += yoff;
        box.y1 += yoff;

        r.registers[4] = -box.x0;
        r.registers[5] = -box.y0;
        ploticon.extent = box;

    	#ifndef Wimp_PlotIcon
    	#define Wimp_PlotIcon 0x400E2
    	#endif
        draganobject_start(draganobject_HPOS_LEFT |
                           draganobject_VPOS_BOTTOM |
                           draganobject_NO_BOUND |
                           draganobject_BOUND_POINTER |
                           draganobject_DROP_SHADOW |
                           draganobject_SWI_FUNCTION,
                           (draganobject_function) Wimp_PlotIcon,
                           &r,
                           &box,
                           0);

        free(winfo);
    }
    else
    {
        wimp_drag drag;
        int xoff, yoff;
        wimp_window_state wstate;
        wimp_pointer pointer;

    	dragginganobject = FALSE;
        drag.w = event->pointer.w;
        drag.type = wimp_DRAG_USER_FIXED;
        gadget_get_bbox(0, id->this_obj, id->this_cmp, &drag.initial);

        wstate.w = event->pointer.w;
        wimp_get_window_state(&wstate);
        xoff = wstate.visible.x0 - wstate.xscroll;
        yoff = wstate.visible.y1 - wstate.yscroll;
        drag.initial.x0 += xoff;
        drag.initial.x1 += xoff;
        drag.initial.y0 += yoff;
        drag.initial.y1 += yoff;

        wimp_get_pointer_info(&pointer);

        drag.bbox.x0 = 0;
        drag.bbox.y0 = 0;
        drag.bbox.x1 = 0;
        drag.bbox.y1 = 0;

        wimp_drag_box(&drag);
    }

    ourdrag = TRUE;

    return TRUE;
}

bool SmallDragFinish(wimp_event_no event_code, wimp_block *event,
    	    	     toolbox_block *id, void *handle)
{
    toolbox_action action;
    draggable_action_drag_ended *drag=(draggable_action_drag_ended *) &action.data;
    wimp_pointer pointer;

    if (!ourdrag)
    	return FALSE;

    ourdrag = FALSE;

    if (dragginganobject)
    	draganobject_stop();

    wimp_get_pointer_info(&pointer);

    action.size = 16 + sizeof(draggable_action_drag_ended);
    action.action_no = action_DRAGGABLE_DRAG_ENDED;
    action.flags = 0;
    drag->ids.wimp.w = pointer.w;
    drag->ids.wimp.i = pointer.i;
    drag->pos = pointer.pos;
    toolbox_raise_toolbox_event(0, InternetObject, internet_Extra, &action);

    return TRUE;
}
@


1.1.2.1
log
@Merged from 3.71 CD
@
text
@a0 165
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdlib.h>

#include "os.h"
#include "osbyte.h"

#include "wimp.h"
#include "draganobject.h"

#include "toolbox.h"
#include "window.h"
#include "gadget.h"
#include "draggable.h"

#include "ModUtils.h"
#include "Gadgets.h"

bool dragginganobject;
bool ourdrag;
extern toolbox_o InternetObject;

bool SmallDragHandler(wimp_event_no event_code, wimp_block *event,
    	    	      toolbox_block *id, void *handle)
{
    if (id->this_cmp != (toolbox_c) handle)
    	return FALSE;

    if (event->pointer.buttons != wimp_DRAG_ADJUST &&
        event->pointer.buttons != wimp_DRAG_SELECT)
        return FALSE;

    if (readCMOS(osbyte_CONFIGURE_DRAG_ASPRITE) & osbyte_CONFIGURE_DRAG_ASPRITE_MASK)
    {
        os_register_block r;
        os_box box;
        wimp_window_state wstate;
    	wimp_i icon[2];
    	wimp_window_info *winfo;
    	wimp_icon ploticon;
    	wimp_w w;
    	int xoff, yoff;

    	dragginganobject = TRUE;

    	gadget_get_icon_list(0, id->this_obj, id->this_cmp, icon, sizeof icon);

    	winfo=(wimp_window_info *)malloc(2048);
    	if (!winfo)
    	    return FALSE;

    	w = window_get_wimp_handle(0, id->this_obj);

    	winfo->w = w;
    	wimp_get_window_info(winfo);
    	ploticon.flags = winfo->icons[icon[0]].flags;
    	ploticon.data  = winfo->icons[icon[0]].data;

        r.registers[1] = (int) &ploticon;

        gadget_get_bbox(0, id->this_obj, id->this_cmp, &box);
        wstate.w = event->pointer.w;
        wimp_get_window_state(&wstate);
        xoff = wstate.visible.x0 - wstate.xscroll;
        yoff = wstate.visible.y1 - wstate.yscroll;
        box.x0 += xoff;
        box.x1 += xoff;
        box.y0 += yoff;
        box.y1 += yoff;

        r.registers[4] = -box.x0;
        r.registers[5] = -box.y0;
        ploticon.extent = box;

    	#ifndef Wimp_PlotIcon
    	#define Wimp_PlotIcon 0x400E2
    	#endif
        draganobject_start(draganobject_HPOS_LEFT |
                           draganobject_VPOS_BOTTOM |
                           draganobject_NO_BOUND |
                           draganobject_BOUND_POINTER |
                           draganobject_DROP_SHADOW |
                           draganobject_SWI_FUNCTION,
                           (draganobject_function) Wimp_PlotIcon,
                           &r,
                           &box,
                           0);

        free(winfo);
    }
    else
    {
        wimp_drag drag;
        int xoff, yoff;
        wimp_window_state wstate;
        wimp_pointer pointer;

    	dragginganobject = FALSE;
        drag.w = event->pointer.w;
        drag.type = wimp_DRAG_USER_FIXED;
        gadget_get_bbox(0, id->this_obj, id->this_cmp, &drag.initial);

        wstate.w = event->pointer.w;
        wimp_get_window_state(&wstate);
        xoff = wstate.visible.x0 - wstate.xscroll;
        yoff = wstate.visible.y1 - wstate.yscroll;
        drag.initial.x0 += xoff;
        drag.initial.x1 += xoff;
        drag.initial.y0 += yoff;
        drag.initial.y1 += yoff;

        wimp_get_pointer_info(&pointer);

        drag.bbox.x0 = 0;
        drag.bbox.y0 = 0;
        drag.bbox.x1 = 0;
        drag.bbox.y1 = 0;

        wimp_drag_box(&drag);
    }

    ourdrag = TRUE;

    return TRUE;
}

bool SmallDragFinish(wimp_event_no event_code, wimp_block *event,
    	    	     toolbox_block *id, void *handle)
{
    toolbox_action action;
    draggable_action_drag_ended *drag=(draggable_action_drag_ended *) &action.data;
    wimp_pointer pointer;

    if (!ourdrag)
    	return FALSE;

    ourdrag = FALSE;

    if (dragginganobject)
    	draganobject_stop();

    wimp_get_pointer_info(&pointer);

    action.size = 16 + sizeof(draggable_action_drag_ended);
    action.action_no = action_DRAGGABLE_DRAG_ENDED;
    action.flags = 0;
    drag->ids.wimp.w = pointer.w;
    drag->ids.wimp.i = pointer.i;
    drag->pos = pointer.pos;
    toolbox_raise_toolbox_event(0, InternetObject, internet_Extra, &action);

    return TRUE;
}
@
