head	1.6;
access;
symbols
	Source-0_59:1.6
	Source-0_58:1.5
	Source-0_57:1.5
	Source-0_56:1.4
	Source-0_55:1.4
	Source-0_54:1.4
	Source-0_53:1.4
	Source-0_52:1.4
	Source-0_51:1.3
	Source-0_50:1.3
	Source-0_49:1.3
	InetSetup-0_49:1.3
	InetSetup-0_48:1.3
	InetSetup-0_47:1.3
	InetSetup-0_46:1.3
	InetSetup-0_45:1.3
	InetSetup-0_44:1.3
	InetSetup-0_43:1.3
	InetSetup-0_42:1.3
	InetSetup-0_41:1.3
	InetSetup-0_40:1.3
	InetSetup-0_39:1.3
	InetSetup-0_38:1.3
	InetSetup-0_37:1.3
	InetSetup-0_36:1.3
	InetSetup-0_35:1.3
	InetSetup-0_34:1.3
	InetSetup-0_33:1.3
	InetSetup-0_32:1.3
	InetSetup-0_31:1.3
	InetSetup-0_30:1.3
	InetSetup-0_29:1.3
	StrongARM_merge:1.1.4.1
	sbrodie_InetSetup_dev_merge:1.2.2.1
	Daytona_merge:1.2
	Ursula_merge:1.2.2.1
	InetSetup-0_28:1.3
	mstphens_UrsulaRiscPCBuild_20Nov98:1.2.2.1
	Ursula_RiscPC:1.2.2.1.0.4
	InetSetup-0_22-1_1_2_4:1.2.2.1
	InetSetup-0_22-1_1_2_3_2_1:1.2.2.1
	sbrodie_InetSetup_dev-1_1_2_3:1.2.2.1.0.2
	sbrodie_InetSetup_dev-1_1_2_3_bp:1.2.2.1
	rthornb_UrsulaBuild-19Aug1998:1.2.2.1
	UrsulaBuild_FinalSoftload:1.2.2.1
	rthornb_UrsulaBuild-12Aug1998:1.2.2.1
	aglover_UrsulaBuild-05Aug1998:1.2.2.1
	rthornb_UrsulaBuild-29Jul1998:1.2.2.1
	rthornb_UrsulaBuild-22Jul1998:1.2.2.1
	InetSetup-0_22-1_1_2_3:1.2.2.1
	rthornb_UrsulaBuild-15Jul1998:1.2.2.1
	rthornb_UrsulaBuild-07Jul1998:1.2.2.1
	rthornb_UrsulaBuild-17Jun1998:1.2.2.1
	rthornb_UrsulaBuild-03Jun1998:1.2.2.1
	rthornb_UrsulaBuild-27May1998:1.2.2.1
	rthornb_UrsulaBuild-21May1998:1.2.2.1
	bavison_InetSetup-0_25:1.2.2.1
	rthornb_UrsulaBuild_01May1998:1.2.2.1
	celkins_InetSetup_0_24:1.2.2.1
	InetSetup-0_22-1_1_2_2:1.2.2.1
	Daytona:1.2.0.4
	Daytona_bp:1.2
	Ursula:1.2.0.2
	Ursula_bp:1.2
	StrongARM:1.1.0.4
	RO_3_71:1.1.4.1;
locks; strict;
comment	@# @;


1.6
date	2018.08.19.09.48.15;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	nIgrlmSwWmfUjIOA;

1.5
date	2015.12.11.20.56.41;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	PxajFBzwRK0dAzMy;

1.4
date	2014.02.10.21.27.37;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	kQh2uZzkI1G5gBox;

1.3
date	99.08.10.16.05.00;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	97.05.06.17.27.16;	author kbracey;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	97.04.30.18.43.21;	author kbracey;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.2.2.1
date	97.11.18.16.08.39;	author dbrown;	state Exp;
branches;
next	;

1.1.2.1
date	97.04.30.18.43.22;	author kbracey;	state Exp;
branches;
next	;

1.1.4.1
date	97.05.06.17.11.01;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Fix NULL pointer dereference on error
Load.c: if the file didn't open, don't try fclose(NULL)
Found by cppcheck static analysis.
Save.c/Diagnose.c: sort netdb.h's header ordering

Version 0.59. Tagged as 'Source-0_59'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "os.h"
#include "wimpspriteop.h"
#include "toolbox.h"

#include "inetlib.h"
#include "netdb.h"

#include "Main.h"
#include "Load.h"
#include "Diagnose.h"
#include "Gadgets.h"

static int strcasecmp(const char *a, const char *b)
{
    while (tolower(*a) == tolower(*b))
    {
        if (*a == 0) return 0;
        a++; b++;
    }
    return tolower(*a) - tolower(*b);
}

static bool InHostsFile(const char *nam)
{
    struct hostent *hp;
    register char **cp;
    bool found = FALSE;

    sethostent(1);
    while ((hp = gethostent()) != 0)
    {
        if (strcasecmp(hp->h_name, nam) == 0)
        {
            found = TRUE;
            break;
        }
        for (cp = hp->h_aliases; cp != NULL && *cp != 0; cp++)
        {
            if (strcasecmp(*cp, nam) == 0)
            {
                found = TRUE;
                goto found;
            }
        }
    }
found:
    endhostent();
    return found;
}

bool Diagnose(void)
{
    int i, configured = 0;
    os_error err = {1};
    extern toolbox_c interface_addrtype[16];

    if (InternetEnabled)
    {
        if (!Set(HostName))
        {
            toolbox_block id;
            extern toolbox_o MainObject;

            sprintf(err.errmess, msgs_lookup("NoHostName"));
            report_error(&err);

            /* Open the host name dialogue to resolve the problem */
            id.parent_obj = id.ancestor_obj = toolbox_NULL_OBJECT;
            id.parent_cmp = id.ancestor_cmp = toolbox_NULL_COMPONENT;
            id.this_obj = MainObject;
            id.this_cmp = internet_Names;
            show_hostname_window(&id);
            return FALSE;
        }
        for (i = 0; i < interfaces; i++)
        {
            if (Set(interface_address[i]))
            {
                configured++;
                if (!Set(interface_netmask[i]))
                {
                    sprintf(err.errmess, msgs_lookup("NoMask"), interface_name[i],
                        	    	    	    	    	interface_location[i]);
        	    report_error(&err);
        	    return FALSE;
                }

                /* Only checking for remote link address for slip interface */

                if (interface_is_pp[i] == 1 && !Set(interface_linkaddr[i]))
                {
                    sprintf(err.errmess, msgs_lookup("NoLinkAddr"), interface_name[i],
                        	    	    	    	    	    interface_location[i]);
        	    report_error(&err);
        	    return FALSE;
                }

                if ((interface_addrtype[i] == if_Manual
                       || interface_addrtype[i] == if_FromHostname) &&
                    !namisipadr(interface_address[i]) &&
                    !InHostsFile(interface_address[i]))
                {
                    sprintf(err.errmess, msgs_lookup("NotInHosts"), interface_address[i]);
                    report_error(&err);
                    return FALSE;
                }

            }
        }

        if (configured == 0 && interfaces > 0)
        {
            wimp_error_box_selection s;
            strcpy(err.errmess, msgs_lookup("NoIfs"));
            s = wimp_report_error_by_category(&err,
            	    	    	    	      wimp_ERROR_BOX_OK_ICON |
            	    	    	    	      wimp_ERROR_BOX_CANCEL_ICON |
            	    	    	    	      wimp_ERROR_BOX_CATEGORY_QUESTION <<
            	    	    	    	       	wimp_ERROR_BOX_CATEGORY_SHIFT,
            	    	    	    	      msgs_lookup("_TaskName"),
            	    	    	    	      "!inetsetup",
            	    	    	    	      wimpspriteop_AREA,
            	    	    	    	      0);
            if (s == wimp_ERROR_BOX_SELECTED_CANCEL)
            	return FALSE;
        }
    }
    return TRUE;
}
@


1.5
log
@Be more helpful when no hostname is set
Rather than explaining in a wordy error box how to get to the hostname dialogue, rephrase the diagnosis message to say that a hostname is required, then simply open the dialogue with the caret in the box to resolve the problem.
Implements ticket #406.
Also change the top level icon label for AUN to say Econet, since that makes more sense alongside Access and Internet (which are protocols). The interactive help introduces the term AUN for some context (as before).

Messages: Rephrased error box text.
Res: Rephrased AUN option.
Diagnose.c: Open the hostname window when no hostname is set.
IfsDbox.c/Main.c/Main.h: Rename OpenWindowFromIcon() to a more Toolboxey show_window_from_component().

Version 0.57. Tagged as 'Source-0_57'
@
text
@d23 1
a24 1
#include "inetlib.h"
@


1.4
log
@Compare results of gethostent() caselessly
Matches behaviour of the Resolver module.

Version 0.52. Tagged as 'Source-0_52'
@
text
@d79 3
d84 7
@


1.3
log
@  Merge of half a dozen separate branches to the trunk:
    Ursula
    Ursula_RiscPC
    StrongARM
    Daytona(!)
    sbrodie_InetSetup_dev-1_1_2_3
    ART
Detail:
  What a mess.
Admin:
  This is the Ursula plugin version.  It builds.

Version 0.28. Tagged as 'InetSetup-0_28'
@
text
@d17 1
d31 10
d50 1
a50 1
        if (strcmp(hp->h_name, nam) == 0)
d55 8
a62 6
	for (cp = hp->h_aliases; cp != 0 && *cp != 0; cp++)
	    if (strcmp(*cp, nam) == 0)
	    {
	        found = TRUE;
	        goto found;
	    }
@


1.2
log
@Version RO_3_71 taken
@
text
@d83 3
a85 1
                if (interface_is_pp[i] && !Set(interface_linkaddr[i]))
@


1.2.2.1
log
@Support added for PPP module and additional network cards.  Front end has also
been modified to fit style guide more closely.
@
text
@d83 1
a83 3
                /* Only checking for remote link address for slip interface */

                if (interface_is_pp[i] == 1 && !Set(interface_linkaddr[i]))
@


1.1
log
@file Diagnose was initially added on branch RO_3_70_to_3_71.
@
text
@d1 122
@


1.1.4.1
log
@Version RO_3_71 taken
@
text
@a0 122
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include <string.h>

#include "os.h"
#include "wimpspriteop.h"
#include "toolbox.h"

#include "netdb.h"
#include "inetlib.h"

#include "Main.h"
#include "Load.h"
#include "Diagnose.h"
#include "Gadgets.h"

static bool InHostsFile(const char *nam)
{
    struct hostent *hp;
    register char **cp;
    bool found = FALSE;

    sethostent(1);
    while ((hp = gethostent()) != 0)
    {
        if (strcmp(hp->h_name, nam) == 0)
        {
            found = TRUE;
            break;
        }
	for (cp = hp->h_aliases; cp != 0 && *cp != 0; cp++)
	    if (strcmp(*cp, nam) == 0)
	    {
	        found = TRUE;
	        goto found;
	    }
    }
found:
    endhostent();
    return found;
}

bool Diagnose(void)
{
    int i, configured = 0;
    os_error err = {1};
    extern toolbox_c interface_addrtype[16];

    if (InternetEnabled)
    {
        if (!Set(HostName))
        {
            sprintf(err.errmess, msgs_lookup("NoHostName"));
            report_error(&err);
            return FALSE;
        }
        for (i = 0; i < interfaces; i++)
        {
            if (Set(interface_address[i]))
            {
                configured++;
                if (!Set(interface_netmask[i]))
                {
                    sprintf(err.errmess, msgs_lookup("NoMask"), interface_name[i],
                        	    	    	    	    	interface_location[i]);
        	    report_error(&err);
        	    return FALSE;
                }

                if (interface_is_pp[i] && !Set(interface_linkaddr[i]))
                {
                    sprintf(err.errmess, msgs_lookup("NoLinkAddr"), interface_name[i],
                        	    	    	    	    	    interface_location[i]);
        	    report_error(&err);
        	    return FALSE;
                }

                if ((interface_addrtype[i] == if_Manual
                       || interface_addrtype[i] == if_FromHostname) &&
                    !namisipadr(interface_address[i]) &&
                    !InHostsFile(interface_address[i]))
                {
                    sprintf(err.errmess, msgs_lookup("NotInHosts"), interface_address[i]);
                    report_error(&err);
                    return FALSE;
                }

            }
        }

        if (configured == 0 && interfaces > 0)
        {
            wimp_error_box_selection s;
            strcpy(err.errmess, msgs_lookup("NoIfs"));
            s = wimp_report_error_by_category(&err,
            	    	    	    	      wimp_ERROR_BOX_OK_ICON |
            	    	    	    	      wimp_ERROR_BOX_CANCEL_ICON |
            	    	    	    	      wimp_ERROR_BOX_CATEGORY_QUESTION <<
            	    	    	    	       	wimp_ERROR_BOX_CATEGORY_SHIFT,
            	    	    	    	      msgs_lookup("_TaskName"),
            	    	    	    	      "!inetsetup",
            	    	    	    	      wimpspriteop_AREA,
            	    	    	    	      0);
            if (s == wimp_ERROR_BOX_SELECTED_CANCEL)
            	return FALSE;
        }
    }
    return TRUE;
}
@


1.1.2.1
log
@Merged from 3.71 CD
@
text
@a0 122
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include <string.h>

#include "os.h"
#include "wimpspriteop.h"
#include "toolbox.h"

#include "netdb.h"
#include "inetlib.h"

#include "Main.h"
#include "Load.h"
#include "Diagnose.h"
#include "Gadgets.h"

static bool InHostsFile(const char *nam)
{
    struct hostent *hp;
    register char **cp;
    bool found = FALSE;

    sethostent(1);
    while ((hp = gethostent()) != 0)
    {
        if (strcmp(hp->h_name, nam) == 0)
        {
            found = TRUE;
            break;
        }
	for (cp = hp->h_aliases; cp != 0 && *cp != 0; cp++)
	    if (strcmp(*cp, nam) == 0)
	    {
	        found = TRUE;
	        goto found;
	    }
    }
found:
    endhostent();
    return found;
}

bool Diagnose(void)
{
    int i, configured = 0;
    os_error err = {1};
    extern toolbox_c interface_addrtype[16];

    if (InternetEnabled)
    {
        if (!Set(HostName))
        {
            sprintf(err.errmess, msgs_lookup("NoHostName"));
            report_error(&err);
            return FALSE;
        }
        for (i = 0; i < interfaces; i++)
        {
            if (Set(interface_address[i]))
            {
                configured++;
                if (!Set(interface_netmask[i]))
                {
                    sprintf(err.errmess, msgs_lookup("NoMask"), interface_name[i],
                        	    	    	    	    	interface_location[i]);
        	    report_error(&err);
        	    return FALSE;
                }

                if (interface_is_pp[i] && !Set(interface_linkaddr[i]))
                {
                    sprintf(err.errmess, msgs_lookup("NoLinkAddr"), interface_name[i],
                        	    	    	    	    	    interface_location[i]);
        	    report_error(&err);
        	    return FALSE;
                }

                if ((interface_addrtype[i] == if_Manual
                       || interface_addrtype[i] == if_FromHostname) &&
                    !namisipadr(interface_address[i]) &&
                    !InHostsFile(interface_address[i]))
                {
                    sprintf(err.errmess, msgs_lookup("NotInHosts"), interface_address[i]);
                    report_error(&err);
                    return FALSE;
                }

            }
        }

        if (configured == 0 && interfaces > 0)
        {
            wimp_error_box_selection s;
            strcpy(err.errmess, msgs_lookup("NoIfs"));
            s = wimp_report_error_by_category(&err,
            	    	    	    	      wimp_ERROR_BOX_OK_ICON |
            	    	    	    	      wimp_ERROR_BOX_CANCEL_ICON |
            	    	    	    	      wimp_ERROR_BOX_CATEGORY_QUESTION <<
            	    	    	    	       	wimp_ERROR_BOX_CATEGORY_SHIFT,
            	    	    	    	      msgs_lookup("_TaskName"),
            	    	    	    	      "!inetsetup",
            	    	    	    	      wimpspriteop_AREA,
            	    	    	    	      0);
            if (s == wimp_ERROR_BOX_SELECTED_CANCEL)
            	return FALSE;
        }
    }
    return TRUE;
}
@
