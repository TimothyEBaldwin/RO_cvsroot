head	1.4;
access;
symbols
	Source-0_59:1.4
	Source-0_58:1.4
	Source-0_57:1.4
	Source-0_56:1.4
	Source-0_55:1.4
	Source-0_54:1.4
	Source-0_53:1.4
	Source-0_52:1.4
	Source-0_51:1.4
	Source-0_50:1.4
	Source-0_49:1.4
	InetSetup-0_49:1.4
	InetSetup-0_48:1.4
	InetSetup-0_47:1.4
	InetSetup-0_46:1.4
	InetSetup-0_45:1.4
	InetSetup-0_44:1.4
	InetSetup-0_43:1.4
	InetSetup-0_42:1.4
	InetSetup-0_41:1.4
	InetSetup-0_40:1.4
	InetSetup-0_39:1.4
	InetSetup-0_38:1.4
	InetSetup-0_37:1.4
	InetSetup-0_36:1.4
	InetSetup-0_35:1.4
	InetSetup-0_34:1.4
	InetSetup-0_33:1.4
	InetSetup-0_32:1.3
	InetSetup-0_31:1.3
	InetSetup-0_30:1.3
	InetSetup-0_29:1.3
	StrongARM_merge:1.1.4.1
	sbrodie_InetSetup_dev_merge:1.2.2.1
	Daytona_merge:1.2
	Ursula_merge:1.2.2.1
	InetSetup-0_28:1.3
	mstphens_UrsulaRiscPCBuild_20Nov98:1.2.2.1
	Ursula_RiscPC:1.2.2.1.0.4
	InetSetup-0_22-1_1_2_4:1.2.2.1
	InetSetup-0_22-1_1_2_3_2_1:1.2.2.1
	sbrodie_InetSetup_dev-1_1_2_3:1.2.2.1.0.2
	sbrodie_InetSetup_dev-1_1_2_3_bp:1.2.2.1
	rthornb_UrsulaBuild-19Aug1998:1.2.2.1
	UrsulaBuild_FinalSoftload:1.2.2.1
	rthornb_UrsulaBuild-12Aug1998:1.2.2.1
	aglover_UrsulaBuild-05Aug1998:1.2.2.1
	rthornb_UrsulaBuild-29Jul1998:1.2.2.1
	rthornb_UrsulaBuild-22Jul1998:1.2.2.1
	InetSetup-0_22-1_1_2_3:1.2.2.1
	rthornb_UrsulaBuild-15Jul1998:1.2.2.1
	rthornb_UrsulaBuild-07Jul1998:1.2.2.1
	rthornb_UrsulaBuild-17Jun1998:1.2.2.1
	rthornb_UrsulaBuild-03Jun1998:1.2.2.1
	rthornb_UrsulaBuild-27May1998:1.2.2.1
	rthornb_UrsulaBuild-21May1998:1.2.2.1
	bavison_InetSetup-0_25:1.2.2.1
	rthornb_UrsulaBuild_01May1998:1.2.2.1
	celkins_InetSetup_0_24:1.2.2.1
	InetSetup-0_22-1_1_2_2:1.2.2.1
	Daytona:1.2.0.4
	Daytona_bp:1.2
	Ursula:1.2.0.2
	Ursula_bp:1.2
	StrongARM:1.1.0.4
	RO_3_71:1.1.4.1;
locks; strict;
comment	@# @;


1.4
date	2002.12.19.20.31.30;	author srevill;	state Exp;
branches;
next	1.3;

1.3
date	99.08.10.16.05.05;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	97.05.06.17.27.44;	author kbracey;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	97.04.30.18.43.58;	author kbracey;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.2.2.1
date	97.11.18.16.08.48;	author dbrown;	state Exp;
branches;
next	;

1.1.2.1
date	97.04.30.18.43.59;	author kbracey;	state Exp;
branches;
next	;

1.1.4.1
date	97.05.06.17.11.32;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Changes to the greying out behaviour in the "Obtain IP address" dialogue
as it was a real mess,particularly the behaviour when DHCP was selected.
UK Res file overhaul.
You can now drag the AUNMap to an editor and it will be loaded.
New Sprites files.

Version 0.33. Tagged as 'InetSetup-0_33'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef event_H
#define event_H

#ifndef wimp_H
#include "wimp.h"
#endif

#ifndef toolbox_H
#include "toolbox.h"
#endif

#ifndef bool
#include <stdbool.h>
#endif

#define event_ANY ((toolbox_o) -1)

typedef bool event_wimp_handler (wimp_event_no event_code,
      wimp_block *block, toolbox_block *id_block,
      void *handle);

typedef bool event_toolbox_handler (bits event_code,
      toolbox_action *action, toolbox_block *id_block,
      void *handle);

typedef bool event_message_handler (wimp_message *message,
      void *handle);

typedef struct event_wimp_handler_item event_wimp_handler_item;

struct event_wimp_handler_item
   {  event_wimp_handler_item *next;
      toolbox_o               object_id;
      wimp_event_no                     event_code;
      event_wimp_handler      *handler;
      void                    *handle;
   };


typedef struct event_toolbox_handler_item event_toolbox_handler_item;

struct event_toolbox_handler_item
   {  event_toolbox_handler_item *next;
      toolbox_o                  object_id;
      bits                        event_code;
      event_toolbox_handler      *handler;
      void                       *handle;
   };

typedef struct event_message_handler_item event_message_handler_item;

struct event_message_handler_item
   {  event_message_handler_item *next;
      int                        msg_no;
      event_message_handler      *handler;
      void                       *handle;
   };

extern void event_poll (wimp_event_no *event_code, wimp_block *poll_block,
      void *poll_word);

extern void event_poll_idle (wimp_event_no *event_code, wimp_block *poll_block,
      os_t earliest, void *poll_word);

extern void event_register_wimp_handler (toolbox_o object_id,
      wimp_event_no event_code, event_wimp_handler *handler, void *handle);

extern void event_deregister_wimp_handler (toolbox_o object_id,
      wimp_event_no event_code, event_wimp_handler *handler, void *handle);

extern void event_register_toolbox_handler (toolbox_o object_id,
      bits event_code, event_toolbox_handler *handler, void *handle);

extern void event_deregister_toolbox_handler (toolbox_o object_id,
      bits event_code, event_toolbox_handler *handler, void *handle);

extern void event_register_message_handler (bits msg_no,
      event_message_handler *handler, void *handle);

extern void event_deregister_message_handler (bits msg_no,
      event_message_handler *handler, void *handle);

extern void event_set_mask (wimp_poll_flags mask);

extern void event_get_mask (wimp_poll_flags *mask);

extern void event_initialise (toolbox_block *id_block);

#endif
@


1.3
log
@  Merge of half a dozen separate branches to the trunk:
    Ursula
    Ursula_RiscPC
    StrongARM
    Daytona(!)
    sbrodie_InetSetup_dev-1_1_2_3
    ART
Detail:
  What a mess.
Admin:
  This is the Ursula plugin version.  It builds.

Version 0.28. Tagged as 'InetSetup-0_28'
@
text
@d26 4
@


1.2
log
@Version RO_3_71 taken
@
text
@d15 2
a16 1
/* Header for eventlib (using OSLib types) */
d18 2
a19 2
#ifdef __cplusplus
extern "C" {
d22 8
a29 2
typedef bool event_wimp_handler(wimp_event_no event_code,
      wimp_block *event,toolbox_block *id,
d32 2
a33 2
typedef bool event_toolbox_handler(bits event_code,
      toolbox_action *event, toolbox_block *id,
d36 1
a36 1
typedef bool event_message_handler(wimp_message *message,
d39 31
a69 1
void event_poll(wimp_event_no *event_code, wimp_block *poll_block,
d71 2
a72 1
void event_poll_idle(wimp_event_no *event_code, wimp_block *poll_block,
d75 2
a76 2
void event_set_mask(wimp_poll_flags mask);
void event_get_mask(wimp_poll_flags *mask);
d78 2
a79 2
void event_register_wimp_handler(toolbox_o object_id,
    wimp_event_no event_code, event_wimp_handler *handler, void *handle);
d81 2
a82 2
void event_register_toolbox_handler(toolbox_o object_id,
    wimp_event_no event_code, event_toolbox_handler *handler, void *handle);
d84 2
a85 2
void event_register_message_handler(bits msg_no,
    event_message_handler *handler, void *handle);
d87 2
a88 2
void event_deregister_wimp_handler(toolbox_o object_id,
    wimp_event_no event_code, event_wimp_handler *handler, void *handle);
d90 2
a91 2
void event_deregister_toolbox_handler(toolbox_o object_id,
    wimp_event_no event_code, event_toolbox_handler *handler, void *handle);
d93 1
a93 2
void event_deregister_message_handler(bits msg_no,
    event_message_handler *handler, void *handle);
d95 1
a95 1
void event_initialise(toolbox_block *id_block);
d97 1
a97 1
#define event_ANY ((toolbox_o) -1)
a98 2
#ifdef __cplusplus
}
@


1.2.2.1
log
@Support added for PPP module and additional network cards.  Front end has also
been modified to fit style guide more closely.
@
text
@d15 1
a15 2
#ifndef event_H
#define event_H
d17 2
a18 2
#ifndef wimp_H
#include "wimp.h"
d21 2
a22 8
#ifndef toolbox_H
#include "toolbox.h"
#endif

#define event_ANY ((toolbox_o) -1)

typedef bool event_wimp_handler (wimp_event_no event_code,
      wimp_block *block, toolbox_block *id_block,
d25 2
a26 2
typedef bool event_toolbox_handler (bits event_code,
      toolbox_action *action, toolbox_block *id_block,
d29 1
a29 1
typedef bool event_message_handler (wimp_message *message,
d32 1
a32 31
typedef struct event_wimp_handler_item event_wimp_handler_item;

struct event_wimp_handler_item
   {  event_wimp_handler_item *next;
      toolbox_o               object_id;
      wimp_event_no                     event_code;
      event_wimp_handler      *handler;
      void                    *handle;
   };


typedef struct event_toolbox_handler_item event_toolbox_handler_item;

struct event_toolbox_handler_item
   {  event_toolbox_handler_item *next;
      toolbox_o                  object_id;
      bits                        event_code;
      event_toolbox_handler      *handler;
      void                       *handle;
   };

typedef struct event_message_handler_item event_message_handler_item;

struct event_message_handler_item
   {  event_message_handler_item *next;
      int                        msg_no;
      event_message_handler      *handler;
      void                       *handle;
   };

extern void event_poll (wimp_event_no *event_code, wimp_block *poll_block,
d34 1
a34 2

extern void event_poll_idle (wimp_event_no *event_code, wimp_block *poll_block,
d37 2
a38 2
extern void event_register_wimp_handler (toolbox_o object_id,
      wimp_event_no event_code, event_wimp_handler *handler, void *handle);
d40 2
a41 2
extern void event_deregister_wimp_handler (toolbox_o object_id,
      wimp_event_no event_code, event_wimp_handler *handler, void *handle);
d43 2
a44 2
extern void event_register_toolbox_handler (toolbox_o object_id,
      bits event_code, event_toolbox_handler *handler, void *handle);
d46 2
a47 2
extern void event_deregister_toolbox_handler (toolbox_o object_id,
      bits event_code, event_toolbox_handler *handler, void *handle);
d49 2
a50 2
extern void event_register_message_handler (bits msg_no,
      event_message_handler *handler, void *handle);
d52 2
a53 2
extern void event_deregister_message_handler (bits msg_no,
      event_message_handler *handler, void *handle);
d55 2
a56 1
extern void event_set_mask (wimp_poll_flags mask);
d58 1
a58 1
extern void event_get_mask (wimp_poll_flags *mask);
d60 1
a60 1
extern void event_initialise (toolbox_block *id_block);
d62 2
@


1.1
log
@file event was initially added on branch RO_3_70_to_3_71.
@
text
@d1 64
@


1.1.4.1
log
@Version RO_3_71 taken
@
text
@a0 64
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Header for eventlib (using OSLib types) */

#ifdef __cplusplus
extern "C" {
#endif

typedef bool event_wimp_handler(wimp_event_no event_code,
      wimp_block *event,toolbox_block *id,
      void *handle);

typedef bool event_toolbox_handler(bits event_code,
      toolbox_action *event, toolbox_block *id,
      void *handle);

typedef bool event_message_handler(wimp_message *message,
      void *handle);

void event_poll(wimp_event_no *event_code, wimp_block *poll_block,
      void *poll_word);
void event_poll_idle(wimp_event_no *event_code, wimp_block *poll_block,
      os_t earliest, void *poll_word);

void event_set_mask(wimp_poll_flags mask);
void event_get_mask(wimp_poll_flags *mask);

void event_register_wimp_handler(toolbox_o object_id,
    wimp_event_no event_code, event_wimp_handler *handler, void *handle);

void event_register_toolbox_handler(toolbox_o object_id,
    wimp_event_no event_code, event_toolbox_handler *handler, void *handle);

void event_register_message_handler(bits msg_no,
    event_message_handler *handler, void *handle);

void event_deregister_wimp_handler(toolbox_o object_id,
    wimp_event_no event_code, event_wimp_handler *handler, void *handle);

void event_deregister_toolbox_handler(toolbox_o object_id,
    wimp_event_no event_code, event_toolbox_handler *handler, void *handle);

void event_deregister_message_handler(bits msg_no,
    event_message_handler *handler, void *handle);

void event_initialise(toolbox_block *id_block);

#define event_ANY ((toolbox_o) -1)

#ifdef __cplusplus
}
#endif
@


1.1.2.1
log
@Merged from 3.71 CD
@
text
@a0 64
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Header for eventlib (using OSLib types) */

#ifdef __cplusplus
extern "C" {
#endif

typedef bool event_wimp_handler(wimp_event_no event_code,
      wimp_block *event,toolbox_block *id,
      void *handle);

typedef bool event_toolbox_handler(bits event_code,
      toolbox_action *event, toolbox_block *id,
      void *handle);

typedef bool event_message_handler(wimp_message *message,
      void *handle);

void event_poll(wimp_event_no *event_code, wimp_block *poll_block,
      void *poll_word);
void event_poll_idle(wimp_event_no *event_code, wimp_block *poll_block,
      os_t earliest, void *poll_word);

void event_set_mask(wimp_poll_flags mask);
void event_get_mask(wimp_poll_flags *mask);

void event_register_wimp_handler(toolbox_o object_id,
    wimp_event_no event_code, event_wimp_handler *handler, void *handle);

void event_register_toolbox_handler(toolbox_o object_id,
    wimp_event_no event_code, event_toolbox_handler *handler, void *handle);

void event_register_message_handler(bits msg_no,
    event_message_handler *handler, void *handle);

void event_deregister_wimp_handler(toolbox_o object_id,
    wimp_event_no event_code, event_wimp_handler *handler, void *handle);

void event_deregister_toolbox_handler(toolbox_o object_id,
    wimp_event_no event_code, event_toolbox_handler *handler, void *handle);

void event_deregister_message_handler(bits msg_no,
    event_message_handler *handler, void *handle);

void event_initialise(toolbox_block *id_block);

#define event_ANY ((toolbox_o) -1)

#ifdef __cplusplus
}
#endif
@
