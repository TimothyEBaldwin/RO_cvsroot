head	1.2;
access;
symbols
	Source-0_59:1.2
	Source-0_58:1.2
	Source-0_57:1.2
	Source-0_56:1.2
	Source-0_55:1.2
	Source-0_54:1.2
	Source-0_53:1.2
	Source-0_52:1.2
	Source-0_51:1.2
	Source-0_50:1.2
	Source-0_49:1.2
	InetSetup-0_49:1.2
	InetSetup-0_48:1.2
	InetSetup-0_47:1.2
	InetSetup-0_46:1.2
	InetSetup-0_45:1.2
	InetSetup-0_44:1.2
	InetSetup-0_43:1.2
	InetSetup-0_42:1.2
	InetSetup-0_41:1.2
	InetSetup-0_40:1.2
	InetSetup-0_39:1.2
	InetSetup-0_38:1.2
	InetSetup-0_37:1.2
	InetSetup-0_36:1.2
	InetSetup-0_35:1.2
	InetSetup-0_34:1.2
	InetSetup-0_33:1.2
	InetSetup-0_32:1.2
	InetSetup-0_31:1.2
	InetSetup-0_30:1.2
	InetSetup-0_29:1.2
	sbrodie_InetSetup_dev_merge:1.1.2.1
	Ursula_merge:1.1.2.1
	InetSetup-0_28:1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1.2.1
	Ursula_RiscPC:1.1.2.1.0.4
	InetSetup-0_22-1_1_2_4:1.1.2.1
	InetSetup-0_22-1_1_2_3_2_1:1.1.2.1
	sbrodie_InetSetup_dev-1_1_2_3:1.1.2.1.0.2
	sbrodie_InetSetup_dev-1_1_2_3_bp:1.1.2.1
	rthornb_UrsulaBuild-19Aug1998:1.1.2.1
	UrsulaBuild_FinalSoftload:1.1.2.1
	rthornb_UrsulaBuild-12Aug1998:1.1.2.1
	aglover_UrsulaBuild-05Aug1998:1.1.2.1
	rthornb_UrsulaBuild-29Jul1998:1.1.2.1
	rthornb_UrsulaBuild-22Jul1998:1.1.2.1
	InetSetup-0_22-1_1_2_3:1.1.2.1
	rthornb_UrsulaBuild-15Jul1998:1.1.2.1
	rthornb_UrsulaBuild-07Jul1998:1.1.2.1
	rthornb_UrsulaBuild-17Jun1998:1.1.2.1
	rthornb_UrsulaBuild-03Jun1998:1.1.2.1
	rthornb_UrsulaBuild-27May1998:1.1.2.1
	rthornb_UrsulaBuild-21May1998:1.1.2.1
	bavison_InetSetup-0_25:1.1.2.1
	rthornb_UrsulaBuild_01May1998:1.1.2.1
	celkins_InetSetup_0_24:1.1.2.1
	InetSetup-0_22-1_1_2_2:1.1.2.1
	Ursula:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	99.08.10.16.05.09;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	97.12.17.15.15.58;	author celkins;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.12.17.15.15.59;	author celkins;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Merge of half a dozen separate branches to the trunk:
    Ursula
    Ursula_RiscPC
    StrongARM
    Daytona(!)
    sbrodie_InetSetup_dev-1_1_2_3
    ART
Detail:
  What a mess.
Admin:
  This is the Ursula plugin version.  It builds.

Version 0.28. Tagged as 'InetSetup-0_28'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef x_H
#define x_H

/*x.h - exception handling header*/

#include <stdio.h>
#include <stdlib.h>
#include <setjmp.h>
#include <signal.h>

#ifndef os_H
   #include "os.h"
#endif

typedef
   struct x_exception
      {  int trampoline [3];
         void (*previous [3]) (int);
         os_error *error;
         jmp_buf buf;
      }
      x_exception;

/* (Pseudo-)function to be called before a group of statements which
 * could throw an exception.
 */

#define x_TRY(x) \
      if (x__try (x), setjmp ((x)->buf) == NULL)
extern void x__try (x_exception *);

/* Function to allow the exception type to be examined. MUST be
 * called to balance a call to x_TRY.
 */

#define x_CATCH(x) \
      if (x__catch (x), (x)->error != NULL)
extern void x__catch (x_exception *);

/* Function to re-throw exceptions. Used in exception handlers or in tidy-
 * up code to throw the error to the next-higher level that needs it. If
 * there was no exception, this does nothing.
 */

#define x_RETHROW(x) \
      ((x)->error != NULL? os_generate_error ((x)->error): (void) SKIP)

/* Strange pseudo-declaration thing to make an |os_error *| from an error
 * number and a message. Declares |id| to be an |os_error *| pointing at the
 * block {num, mess}, without wasting 252 bytes of empty error block. Can
 * also be used if you want an international message that will be passed to
 * messagetrans_error_lookup.
 */

#define x_LOCAL_ERROR(id, num, mess) 			\
   static struct {int errnum;                     	\
                  char errmess [sizeof mess + 1]; 	\
                 } id ## _ = {num, mess}; 		\
   static os_error *id = (os_error *) &id ## _;

/* Another declaration, to make an |os_error *| from an error
 * number and a message. Declares |id| to be an |os_error *| pointing at the
 * block {num, mess}, without wasting 252 bytes of empty error block. Can
 * also be used if you want an international message that will be passed to
 * messagetrans_error_lookup.
 */

#define x_GLOBAL_ERROR(id, num, mess) \
   static struct {int errnum; char errmess [sizeof mess + 1];} id ## _ = \
         {num, mess}; \
   os_error *id = (os_error *) &id ## _;

/* Function to throw exceptions. Used anywhere that obtains an
 * |os_error *| (usually from x_LOCAL_ERROR), and wants to turn it into an
 * exception. Undefined if its argument is NULL.
 */

#define x_THROW(error) \
   os_generate_error (error)

/* Function to throw an error after one has been detected by the run-time
 * system. Use after (e g) fopen, printf fail.
 */

#define x_THROW_LAST_ERROR() \
   os_generate_error (x__last_error ())
extern os_error *x__last_error (void);

/* Function to give the error responsible. Useful only at the top, where the
 * error is be reported.
 */

#define x_ERROR(x) ((x)->error)

/* Function to exit from the programme, with an appropriate message and
 * return value (not useful for desktop programmes).
 */

#define x_EXIT(x) \
   (  (x)->error != NULL? \
      (  fprintf (stderr, "%s\n", (x)->error->errmess), \
         exit (EXIT_FAILURE) \
      ): \
      exit (0) \
   )

/* Function to exit from a desktop programme with an appropriate message and
 * return value.
 */

#define x_REPORT_EXIT(x, programme) \
   (  (x)->error != NULL? \
      (  wimp_report_error ((x)->error, NONE, programme), \
         exit (EXIT_FAILURE) \
      ): \
      exit (0) \
   )

/* A set of functions to do exception-throwing memory allocation. If they
 * return, they have succeeded, so they can be used in expressions, etc.
 */

extern os_error *x_no_memory;

#ifdef TRACE
   #define x_ALLOC(size)                  x__alloc (size)
   #define x_CALLOC(count, size)          x__calloc (count, size)
   #define x_FREE(ptr, size)              x__free (ptr, size)
   #define x_REALLOC(ptr, old_size, size) x__realloc (ptr, old_size, size)
#else
   #define x_ALLOC(size)                  x__alloc (size)
   #define x_CALLOC(count, size)          x__calloc (count, size)
   #define x_FREE(ptr, size)              x__free (ptr, 0)
   #define x_REALLOC(ptr, old_size, size) x__realloc (ptr, 0, size)
#endif

extern void *x__alloc (int size);
extern void *x__calloc (int count, int size);
extern void x__free (void *ptr, int size);
extern void *x__realloc (void *ptr, int old_size, int size);

#endif

@


1.1
log
@file x was initially added on branch Ursula.
@
text
@d1 157
@


1.1.2.1
log
@This is version 0.23 (15-Dec-97) of !InetSetup.
Principle changes in this version are that :-
a) 'use DNS' is now chosen by default, provided that a DNS client is available.
b) PPP is no longer considered a suitable candidate for 'default' interface -
   whilst in practice, it may be the only interface, it will not have a default
   netmask setup for it, and it will not be marked as 'set IP address from
   hostname'.
c) Certain incorrect values in the table of known interfaces were removed.
d) Certain headers appeared to be missing - these have been added to the local
   headers directory, rather than relying upon OSLib's example programs
   headers being in some 'appropriate' place.

Version 0.22, 1.1.2.2. Tagged as 'InetSetup-0_22-1_1_2_2'
@
text
@a0 157
/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef x_H
#define x_H

/*x.h - exception handling header*/

#include <stdio.h>
#include <stdlib.h>
#include <setjmp.h>
#include <signal.h>

#ifndef os_H
   #include "os.h"
#endif

typedef
   struct x_exception
      {  int trampoline [3];
         void (*previous [3]) (int);
         os_error *error;
         jmp_buf buf;
      }
      x_exception;

/* (Pseudo-)function to be called before a group of statements which
 * could throw an exception.
 */

#define x_TRY(x) \
      if (x__try (x), setjmp ((x)->buf) == NULL)
extern void x__try (x_exception *);

/* Function to allow the exception type to be examined. MUST be
 * called to balance a call to x_TRY.
 */

#define x_CATCH(x) \
      if (x__catch (x), (x)->error != NULL)
extern void x__catch (x_exception *);

/* Function to re-throw exceptions. Used in exception handlers or in tidy-
 * up code to throw the error to the next-higher level that needs it. If
 * there was no exception, this does nothing.
 */

#define x_RETHROW(x) \
      ((x)->error != NULL? os_generate_error ((x)->error): (void) SKIP)

/* Strange pseudo-declaration thing to make an |os_error *| from an error
 * number and a message. Declares |id| to be an |os_error *| pointing at the
 * block {num, mess}, without wasting 252 bytes of empty error block. Can
 * also be used if you want an international message that will be passed to
 * messagetrans_error_lookup.
 */

#define x_LOCAL_ERROR(id, num, mess) 			\
   static struct {int errnum;                     	\
                  char errmess [sizeof mess + 1]; 	\
                 } id ## _ = {num, mess}; 		\
   static os_error *id = (os_error *) &id ## _;

/* Another declaration, to make an |os_error *| from an error
 * number and a message. Declares |id| to be an |os_error *| pointing at the
 * block {num, mess}, without wasting 252 bytes of empty error block. Can
 * also be used if you want an international message that will be passed to
 * messagetrans_error_lookup.
 */

#define x_GLOBAL_ERROR(id, num, mess) \
   static struct {int errnum; char errmess [sizeof mess + 1];} id ## _ = \
         {num, mess}; \
   os_error *id = (os_error *) &id ## _;

/* Function to throw exceptions. Used anywhere that obtains an
 * |os_error *| (usually from x_LOCAL_ERROR), and wants to turn it into an
 * exception. Undefined if its argument is NULL.
 */

#define x_THROW(error) \
   os_generate_error (error)

/* Function to throw an error after one has been detected by the run-time
 * system. Use after (e g) fopen, printf fail.
 */

#define x_THROW_LAST_ERROR() \
   os_generate_error (x__last_error ())
extern os_error *x__last_error (void);

/* Function to give the error responsible. Useful only at the top, where the
 * error is be reported.
 */

#define x_ERROR(x) ((x)->error)

/* Function to exit from the programme, with an appropriate message and
 * return value (not useful for desktop programmes).
 */

#define x_EXIT(x) \
   (  (x)->error != NULL? \
      (  fprintf (stderr, "%s\n", (x)->error->errmess), \
         exit (EXIT_FAILURE) \
      ): \
      exit (0) \
   )

/* Function to exit from a desktop programme with an appropriate message and
 * return value.
 */

#define x_REPORT_EXIT(x, programme) \
   (  (x)->error != NULL? \
      (  wimp_report_error ((x)->error, NONE, programme), \
         exit (EXIT_FAILURE) \
      ): \
      exit (0) \
   )

/* A set of functions to do exception-throwing memory allocation. If they
 * return, they have succeeded, so they can be used in expressions, etc.
 */

extern os_error *x_no_memory;

#ifdef TRACE
   #define x_ALLOC(size)                  x__alloc (size)
   #define x_CALLOC(count, size)          x__calloc (count, size)
   #define x_FREE(ptr, size)              x__free (ptr, size)
   #define x_REALLOC(ptr, old_size, size) x__realloc (ptr, old_size, size)
#else
   #define x_ALLOC(size)                  x__alloc (size)
   #define x_CALLOC(count, size)          x__calloc (count, size)
   #define x_FREE(ptr, size)              x__free (ptr, 0)
   #define x_REALLOC(ptr, old_size, size) x__realloc (ptr, 0, size)
#endif

extern void *x__alloc (int size);
extern void *x__calloc (int count, int size);
extern void x__free (void *ptr, int size);
extern void *x__realloc (void *ptr, int old_size, int size);

#endif

@
