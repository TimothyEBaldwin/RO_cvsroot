head	1.6;
access;
symbols
	Source-0_59:1.6
	Source-0_58:1.6
	Source-0_57:1.6
	Source-0_56:1.6
	Source-0_55:1.5
	Source-0_54:1.5
	Source-0_53:1.5
	Source-0_52:1.5
	Source-0_51:1.5
	Source-0_50:1.5
	Source-0_49:1.4
	InetSetup-0_49:1.4
	InetSetup-0_48:1.4
	InetSetup-0_47:1.4
	InetSetup-0_46:1.4
	InetSetup-0_45:1.4
	InetSetup-0_44:1.4
	InetSetup-0_43:1.4
	InetSetup-0_42:1.4
	InetSetup-0_41:1.4
	InetSetup-0_40:1.4
	InetSetup-0_39:1.4
	InetSetup-0_38:1.4
	InetSetup-0_37:1.4
	InetSetup-0_36:1.4
	InetSetup-0_35:1.4
	InetSetup-0_34:1.4
	InetSetup-0_33:1.4
	InetSetup-0_32:1.3
	InetSetup-0_31:1.3
	InetSetup-0_30:1.3
	InetSetup-0_29:1.3
	StrongARM_merge:1.1.4.1
	sbrodie_InetSetup_dev_merge:1.2.2.1
	Daytona_merge:1.2
	Ursula_merge:1.2.2.1
	InetSetup-0_28:1.3
	mstphens_UrsulaRiscPCBuild_20Nov98:1.2.2.1
	Ursula_RiscPC:1.2.2.1.0.4
	InetSetup-0_22-1_1_2_4:1.2.2.1
	InetSetup-0_22-1_1_2_3_2_1:1.2.2.1
	sbrodie_InetSetup_dev-1_1_2_3:1.2.2.1.0.2
	sbrodie_InetSetup_dev-1_1_2_3_bp:1.2.2.1
	rthornb_UrsulaBuild-19Aug1998:1.2.2.1
	UrsulaBuild_FinalSoftload:1.2.2.1
	rthornb_UrsulaBuild-12Aug1998:1.2.2.1
	aglover_UrsulaBuild-05Aug1998:1.2.2.1
	rthornb_UrsulaBuild-29Jul1998:1.2.2.1
	rthornb_UrsulaBuild-22Jul1998:1.2.2.1
	InetSetup-0_22-1_1_2_3:1.2.2.1
	rthornb_UrsulaBuild-15Jul1998:1.2.2.1
	rthornb_UrsulaBuild-07Jul1998:1.2.2.1
	rthornb_UrsulaBuild-17Jun1998:1.2.2.1
	rthornb_UrsulaBuild-03Jun1998:1.2.2.1
	rthornb_UrsulaBuild-27May1998:1.2.2.1
	rthornb_UrsulaBuild-21May1998:1.2.2.1
	bavison_InetSetup-0_25:1.2.2.1
	rthornb_UrsulaBuild_01May1998:1.2.2.1
	celkins_InetSetup_0_24:1.2.2.1
	InetSetup-0_22-1_1_2_2:1.2.2.1
	Daytona:1.2.0.4
	Daytona_bp:1.2
	Ursula:1.2.0.2
	Ursula_bp:1.2
	StrongARM:1.1.0.4
	RO_3_71:1.1.4.1;
locks; strict;
comment	@# @;


1.6
date	2015.12.11.20.49.38;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	DBivlqTKYN6OxzMy;

1.5
date	2013.10.03.20.07.07;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	iG3J3iBSU4UyZS7x;

1.4
date	2002.12.19.20.31.27;	author srevill;	state Exp;
branches;
next	1.3;

1.3
date	99.08.10.16.04.47;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	97.05.06.17.27.01;	author kbracey;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	97.04.30.18.42.59;	author kbracey;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.2.2.1
date	97.11.18.16.08.30;	author dbrown;	state Exp;
branches;
next	;

1.1.2.1
date	97.04.30.18.42.59;	author kbracey;	state Exp;
branches;
next	;

1.1.4.1
date	97.05.06.17.10.45;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Resource updates
The blank User and Routes files were referencing some ancient !Internet.
The Resolver test expressions were using variables not registered for the Internet module, moved from Test$Eval to Inet$TestEval.
The !Help was missing some detail, added.

Version 0.56. Tagged as 'Source-0_56'
@
text
@Internet Setup
==============

InetSetup is used to configure the networking built into RISC OS.

Depending on the installed hardware, this may include:

    Acorn Econet (using the Econet or AUN protocol)
    Acorn Access (sharing files and printers with ShareFS)
    Internet (all protocols sent using the TCP/IP protocol)


Troubleshooting
---------------
You may find that some options are greyed out. This will be because some
required software has not been found in your ROMs or in your System
application. 

InetSetup is aware of four of the available name resolvers:

    Resolve from Gnome Computers
    Resolver from ANT
    InetDB by Adam Goodfellow
    DNSResolver by Stewart Brodie

If InetSetup detects any of these in your System application it will allow
you to select one and configure it in the Hosts dialogue box.


What InetSetup does
-------------------
InetSetup scans both the ROM and the System directory of your computer to
find available network modules. It also autodetects network cards fitted to
your computer. It then offers configuration dialogue boxes for the available
network software and hardware.

When the Save button is clicked:

    1) InetSetup checks that all settings are consistent.
    2) Obsolete and duplicate network modules are unplugged.
    3) Required network modules are inserted if available in ROM.
    4) !Internet's configuration files are updated, if the TCP/IP
       Protocol Suite is enabled.
    5) A SetUpNet obey file is placed into your !Boot directory
       to ensure that the networking software is run on startup.
    6) You are given the opportunity to restart your computer.


Technical details
-----------------
InetSetup is hardwired with details of common network interfaces. To add an
unknown interface to InetSetup's interface list, place a detection program in
!InetSetup.AutoSense. All files in the AutoSense directory are run before the
InetSetup application starts. Your program should detect the presence of an
interface (independently of its driver module being present - it may be
unplugged), and for each interface present set a system variable

    InetSetup$Driver$<location>

<Location> is not significant, but is presented to the user in InetSetup,
with underscores converted to spaces. Example locations are "NIC", "Slot_4"
and "Econet".

The variable should be set to

    <description>:<unit>:<driver module>[:<version>[:<module filename>[:P]]]
      
where

    description = human-readable description of interface, eg
                  "Ethernet III"
    unit = DCI-4 driver name, eg "ea0"
    driver module = name of driver module, eg "Ether3"
    version = minimum version required for DCI 4.02 support, eg "4.21".
              If omitted, it is assumed that any version will do.
    module filename = filename of driver module in System:Modules.Network,
                      eg. "Ether3-16". If omitted, it will not attempt to
                      softload the module should it not be present in
                      ROM.
    P : if present, the interface is a point-to-point interface (PPP).

The required version numbers for the core networking modules are specified in
InetSetup's Messages file. If, for example, you have Net 6.18 in ROM, but
require Net 6.19, then you must set v_Net to 6.19 in the Messages file,
otherwise InetSetup, when used, will RMInsert the Net from the ROM, and not
cause the new Net module to be loaded on startup.

InetSetup currently generates the files Choices:Internet.Startup, and
<Boot$ToBeLoaded>.SetUpNet. The other files in the Choices:Internet directory
are intended to be manually edited.  Any changes made to the Startup or
SetUpNet files will be lost when InetSetup next runs.
@


1.5
log
@Add a live interface status/statistics view to the interface dialogue
This new button, 'status', to compliment the 'configure' button, shows various useful facts for an interface (packets, errors, link state, IP address) and updates every second.
Previously, obtaining this information required messing around with showstat or ifconfig at the command line.

Version 0.50. Tagged as 'Source-0_50'
@
text
@d4 1
a4 1
InetSetup is used to configure the TCP/IP network stack built into RISC OS.
d6 5
a10 2
Extensive interactive help is available - press the Help button in
InetSetup's main dialogue box.
d21 4
a24 4
         Resolve from Gnome Computers
         Resolver from ANT
         InetDB by Adam Goodfellow
         DNSResolver by Stewart Brodie
d39 8
a46 8
     1) InetSetup checks that all settings are consistent.
     2) Obsolete and duplicate network modules are unplugged.
     3) Required network modules are inserted if available in ROM.
     4) !Internet's configuration files are updated, if the TCP/IP
        Protocol Suite is enabled.
     5) A SetUpNet obey file is placed into your !Boot directory
        to ensure that the networking software is run on startup.
     6) You are given the opportunity to restart your computer.
d58 1
a58 1
  InetSetup$Driver$<location>
d70 11
a80 11
      description = human-readable description of interface, eg
                    "Ethernet III"
      unit = DCI-4 driver name, eg "ea0"
      driver module = name of driver module, eg "Ether3"
      version = minimum version required for DCI 4.02 support, eg "4.21".
                If omitted, it is assumed that any version will do.
      module filename = filename of driver module in System:Modules.Network,
                        eg. "Ether3-16". If omitted, it will not attempt to
                        softload the module should it not be present in
                        ROM.
      P : if present, the interface is a point-to-point interface (PPP).
@


1.4
log
@Changes to the greying out behaviour in the "Obtain IP address" dialogue
as it was a real mess,particularly the behaviour when DHCP was selected.
UK Res file overhaul.
You can now drag the AUNMap to an editor and it will be loaded.
New Sprites files.

Version 0.33. Tagged as 'InetSetup-0_33'
@
text
@d74 1
a74 1
                        eg "Ether3-16". If omitted, it will not attempt to
@


1.3
log
@  Merge of half a dozen separate branches to the trunk:
    Ursula
    Ursula_RiscPC
    StrongARM
    Daytona(!)
    sbrodie_InetSetup_dev-1_1_2_3
    ART
Detail:
  What a mess.
Admin:
  This is the Ursula plugin version.  It builds.

Version 0.28. Tagged as 'InetSetup-0_28'
@
text
@d4 1
a4 2
InetSetup is used to configure the TCP/IP network stack built into RISC OS
3.7.
a5 5
Together with the new Internet application (which is contained within !Boot),
it replaces the functionality of the old !Internet and !BootNet that
were available separately for previous versions of RISC OS.

For information on how to use InetSetup, see the RISC OS 3.7 release note.
d14 1
a14 2
application.  Some options (eg Reverse ARP and RouteD) will only be available
if you have the full TCP/IP Protocol Suite.
d16 1
a16 2
No name resolver is supplied with this edition of RISC OS, but InetSetup
is aware of four of the available name resolvers:
@


1.2
log
@Version RO_3_71 taken
@
text
@d85 1
a85 5
      P : if present, the interface is a point-to-point interface (eg SLIP).
          Note that most point-to-point interfaces (eg PPP) use dynamic
          addressing, and should not be set up using InetSetup. Your
          dialler software should arrange for the interface to be set
          each time you dial.
@


1.2.2.1
log
@Support added for PPP module and additional network cards.  Front end has also
been modified to fit style guide more closely.
@
text
@d85 5
a89 1
      P : if present, the interface is a point-to-point interface (PPP).
@


1.1
log
@file !Help was initially added on branch RO_3_70_to_3_71.
@
text
@d1 100
@


1.1.4.1
log
@Version RO_3_71 taken
@
text
@a0 100
Internet Setup
==============

InetSetup is used to configure the TCP/IP network stack built into RISC OS
3.7.

Together with the new Internet application (which is contained within !Boot),
it replaces the functionality of the old !Internet and !BootNet that
were available separately for previous versions of RISC OS.

For information on how to use InetSetup, see the RISC OS 3.7 release note.
Extensive interactive help is available - press the Help button in
InetSetup's main dialogue box.


Troubleshooting
---------------
You may find that some options are greyed out. This will be because some
required software has not been found in your ROMs or in your System
application.  Some options (eg Reverse ARP and RouteD) will only be available
if you have the full TCP/IP Protocol Suite.

No name resolver is supplied with this edition of RISC OS, but InetSetup
is aware of four of the available name resolvers:

         Resolve from Gnome Computers
         Resolver from ANT
         InetDB by Adam Goodfellow
         DNSResolver by Stewart Brodie

If InetSetup detects any of these in your System application it will allow
you to select one and configure it in the Hosts dialogue box.


What InetSetup does
-------------------
InetSetup scans both the ROM and the System directory of your computer to
find available network modules. It also autodetects network cards fitted to
your computer. It then offers configuration dialogue boxes for the available
network software and hardware.

When the Save button is clicked:

     1) InetSetup checks that all settings are consistent.
     2) Obsolete and duplicate network modules are unplugged.
     3) Required network modules are inserted if available in ROM.
     4) !Internet's configuration files are updated, if the TCP/IP
        Protocol Suite is enabled.
     5) A SetUpNet obey file is placed into your !Boot directory
        to ensure that the networking software is run on startup.
     6) You are given the opportunity to restart your computer.


Technical details
-----------------
InetSetup is hardwired with details of common network interfaces. To add an
unknown interface to InetSetup's interface list, place a detection program in
!InetSetup.AutoSense. All files in the AutoSense directory are run before the
InetSetup application starts. Your program should detect the presence of an
interface (independently of its driver module being present - it may be
unplugged), and for each interface present set a system variable

  InetSetup$Driver$<location>

<Location> is not significant, but is presented to the user in InetSetup,
with underscores converted to spaces. Example locations are "NIC", "Slot_4"
and "Econet".

The variable should be set to

    <description>:<unit>:<driver module>[:<version>[:<module filename>[:P]]]
      
where

      description = human-readable description of interface, eg
                    "Ethernet III"
      unit = DCI-4 driver name, eg "ea0"
      driver module = name of driver module, eg "Ether3"
      version = minimum version required for DCI 4.02 support, eg "4.21".
                If omitted, it is assumed that any version will do.
      module filename = filename of driver module in System:Modules.Network,
                        eg "Ether3-16". If omitted, it will not attempt to
                        softload the module should it not be present in
                        ROM.
      P : if present, the interface is a point-to-point interface (eg SLIP).
          Note that most point-to-point interfaces (eg PPP) use dynamic
          addressing, and should not be set up using InetSetup. Your
          dialler software should arrange for the interface to be set
          each time you dial.

The required version numbers for the core networking modules are specified in
InetSetup's Messages file. If, for example, you have Net 6.18 in ROM, but
require Net 6.19, then you must set v_Net to 6.19 in the Messages file,
otherwise InetSetup, when used, will RMInsert the Net from the ROM, and not
cause the new Net module to be loaded on startup.

InetSetup currently generates the files Choices:Internet.Startup, and
<Boot$ToBeLoaded>.SetUpNet. The other files in the Choices:Internet directory
are intended to be manually edited.  Any changes made to the Startup or
SetUpNet files will be lost when InetSetup next runs.
@


1.1.2.1
log
@Merged from 3.71 CD
@
text
@a0 100
Internet Setup
==============

InetSetup is used to configure the TCP/IP network stack built into RISC OS
3.7.

Together with the new Internet application (which is contained within !Boot),
it replaces the functionality of the old !Internet and !BootNet that
were available separately for previous versions of RISC OS.

For information on how to use InetSetup, see the RISC OS 3.7 release note.
Extensive interactive help is available - press the Help button in
InetSetup's main dialogue box.


Troubleshooting
---------------
You may find that some options are greyed out. This will be because some
required software has not been found in your ROMs or in your System
application.  Some options (eg Reverse ARP and RouteD) will only be available
if you have the full TCP/IP Protocol Suite.

No name resolver is supplied with this edition of RISC OS, but InetSetup
is aware of four of the available name resolvers:

         Resolve from Gnome Computers
         Resolver from ANT
         InetDB by Adam Goodfellow
         DNSResolver by Stewart Brodie

If InetSetup detects any of these in your System application it will allow
you to select one and configure it in the Hosts dialogue box.


What InetSetup does
-------------------
InetSetup scans both the ROM and the System directory of your computer to
find available network modules. It also autodetects network cards fitted to
your computer. It then offers configuration dialogue boxes for the available
network software and hardware.

When the Save button is clicked:

     1) InetSetup checks that all settings are consistent.
     2) Obsolete and duplicate network modules are unplugged.
     3) Required network modules are inserted if available in ROM.
     4) !Internet's configuration files are updated, if the TCP/IP
        Protocol Suite is enabled.
     5) A SetUpNet obey file is placed into your !Boot directory
        to ensure that the networking software is run on startup.
     6) You are given the opportunity to restart your computer.


Technical details
-----------------
InetSetup is hardwired with details of common network interfaces. To add an
unknown interface to InetSetup's interface list, place a detection program in
!InetSetup.AutoSense. All files in the AutoSense directory are run before the
InetSetup application starts. Your program should detect the presence of an
interface (independently of its driver module being present - it may be
unplugged), and for each interface present set a system variable

  InetSetup$Driver$<location>

<Location> is not significant, but is presented to the user in InetSetup,
with underscores converted to spaces. Example locations are "NIC", "Slot_4"
and "Econet".

The variable should be set to

    <description>:<unit>:<driver module>[:<version>[:<module filename>[:P]]]
      
where

      description = human-readable description of interface, eg
                    "Ethernet III"
      unit = DCI-4 driver name, eg "ea0"
      driver module = name of driver module, eg "Ether3"
      version = minimum version required for DCI 4.02 support, eg "4.21".
                If omitted, it is assumed that any version will do.
      module filename = filename of driver module in System:Modules.Network,
                        eg "Ether3-16". If omitted, it will not attempt to
                        softload the module should it not be present in
                        ROM.
      P : if present, the interface is a point-to-point interface (eg SLIP).
          Note that most point-to-point interfaces (eg PPP) use dynamic
          addressing, and should not be set up using InetSetup. Your
          dialler software should arrange for the interface to be set
          each time you dial.

The required version numbers for the core networking modules are specified in
InetSetup's Messages file. If, for example, you have Net 6.18 in ROM, but
require Net 6.19, then you must set v_Net to 6.19 in the Messages file,
otherwise InetSetup, when used, will RMInsert the Net from the ROM, and not
cause the new Net module to be loaded on startup.

InetSetup currently generates the files Choices:Internet.Startup, and
<Boot$ToBeLoaded>.SetUpNet. The other files in the Choices:Internet directory
are intended to be manually edited.  Any changes made to the Startup or
SetUpNet files will be lost when InetSetup next runs.
@
