head	4.1;
branch	4.1.3;
access;
symbols
	StrongARM_merge:4.1.3.2
	ART_merge:4.1.3.1
	RO_3_71:4.1.3.2
	ART_bp:4.1.3.1
	ART:4.1.3.1.0.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.1
date	96.11.06.03.56.31;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.1.3.1
date	96.11.06.03.56.31;	author nturton;	state Exp;
branches
	4.1.3.1.4.1;
next	4.1.3.2;

4.1.3.2
date	97.05.06.17.09.54;	author kbracey;	state dead;
branches;
next	;

4.1.3.1.4.1
date	97.04.30.18.42.14;	author kbracey;	state dead;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include <string.h>

#include "os.h"
#include "wimpspriteop.h"
#include "toolbox.h"

#include "netdb.h"
#include "inetlib.h"

#include "Main.h"
#include "Load.h"
#include "Diagnose.h"
#include "Gadgets.h"

static bool InHostsFile(const char *nam)
{
    struct hostent *hp;
    register char **cp;
    bool found = FALSE;

    sethostent(1);
    while ((hp = gethostent()) != 0)
    {
        if (strcmp(hp->h_name, nam) == 0)
        {
            found = TRUE;
            break;
        }
	for (cp = hp->h_aliases; cp != 0 && *cp != 0; cp++)
	    if (strcmp(*cp, nam) == 0)
	    {
	        found = TRUE;
	        goto found;
	    }
    }
found:
    endhostent();
    return found;
}

bool Diagnose(void)
{
    int i, configured = 0;
    os_error err = {1};
    extern toolbox_c interface_addrtype[16];

    if (InternetEnabled)
    {
        if (!Set(HostName))
        {
            sprintf(err.errmess, msgs_lookup("NoHostName"));
            report_error(&err);
            return FALSE;
        }
        for (i = 0; i < interfaces; i++)
        {
            if (Set(interface_address[i]))
            {
                configured++;
                if (!Set(interface_netmask[i]))
                {
                    sprintf(err.errmess, msgs_lookup("NoMask"), interface_name[i],
                        	    	    	    	    	interface_location[i]);
        	    report_error(&err);
        	    return FALSE;
                }

                if (interface_is_pp[i] && !Set(interface_linkaddr[i]))
                {
                    sprintf(err.errmess, msgs_lookup("NoLinkAddr"), interface_name[i],
                        	    	    	    	    	    interface_location[i]);
        	    report_error(&err);
        	    return FALSE;
                }

                if ((interface_addrtype[i] == if_Manual
                       || interface_addrtype[i] == if_FromHostname) &&
                    !namisipadr(interface_address[i]) &&
                    !InHostsFile(interface_address[i]))
                {
                    sprintf(err.errmess, msgs_lookup("NotInHosts"), interface_address[i]);
                    report_error(&err);
                    return FALSE;
                }

            }
        }

        if (configured == 0 && interfaces > 0)
        {
            wimp_error_box_selection s;
            strcpy(err.errmess, msgs_lookup("NoIfs"));
            s = wimp_report_error_by_category(&err,
            	    	    	    	      wimp_ERROR_BOX_OK_ICON |
            	    	    	    	      wimp_ERROR_BOX_CANCEL_ICON |
            	    	    	    	      wimp_ERROR_BOX_CATEGORY_QUESTION <<
            	    	    	    	       	wimp_ERROR_BOX_CATEGORY_SHIFT,
            	    	    	    	      msgs_lookup("_TaskName"),
            	    	    	    	      "!inetsetup",
            	    	    	    	      wimpspriteop_AREA,
            	    	    	    	      0);
            if (s == wimp_ERROR_BOX_SELECTED_CANCEL)
            	return FALSE;
        }
    }
    return TRUE;
}
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.3.2
log
@Version RO_3_71 taken
@
text
@@


4.1.3.1.4.1
log
@Merged from 3.71 CD
@
text
@@
