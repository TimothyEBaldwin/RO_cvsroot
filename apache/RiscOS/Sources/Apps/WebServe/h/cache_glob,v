head	1.2;
access;
symbols
	WebServe-0_02:1.2
	WebServe-0_01:1.2
	WebServe-0_49:1.1.1.1
	sbrodie_WebServe_0_48:1.1.1.1
	sbrodie_WebServe_0_45:1.1.1.1
	sbrodie_WebServe_0_44:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_WebServe_0_42:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2007.10.18.11.19.55;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	98.02.12.17.02.32;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.02.12.17.02.32;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Multiple application fixes to work in Batch Two environment.
Detail:
  As summary.
Admin:
  Tested in prototype Batch Two build environment on an Iyonix.
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * The global entry points for cache.c
 */

#ifndef __cache_global__
#define __cache_global__

/* functions */
extern cache_list cache_new_entry(char *hostname, char *url, int port);
extern cache_list cache_search(char *hostname, char *url, int port);
extern void       cache_setURLExpire_time(char *url, int days_from_now);
extern void       cache_setURLCache_size(int size_MB);

extern void       cache_delete_entry(cache_list cacheentry);
extern filemanage_FILE     * cache_openfile(cache_list cacheentry, char *access);
extern void       cache_incfilesize(cache_list cacheentry, int by);
extern void       cache_incfileusage(cache_list cacheentry);
extern void       cache_decfileusage(cache_list cacheentry);
extern void       cache_entry_complete(cache_list cacheentry);

extern void       cache_do_delayed_writeback(void);

extern void     cache_flush(void);
extern void     cache_minimise(void);
extern void     cache_economise(void);
extern void 	cache_init(void);



extern void cache_read_index(void);
extern void cache_write_index(void);
extern void cache_statistics(int *p_max_size, int *p_current_size);


extern host_list hostlist_search(host_list listroot, char *hostname, int port);
extern host_list new_host_record(char *hostname, char *dirname, int port);
extern void http_get_request(const char *url, char **host, int *port);

extern cache_list urllist_search(host_list hostentry, char *url);
extern cache_list new_url_record(host_list hostentry, char *filename, char *url);

extern host_list global_cacheroot;
extern int global_cache_writeback_delayed;
extern int global_cachesizemax;

extern char *scan_buffer_for_string(char *buffer, char *line_prefix);
extern char *check_line_for_string(char *line_start, char *line_prefix);
extern char *strdup(const char *s1);

extern _kernel_oserror *convert_date_and_time(char *buffer, int buffsize, unsigned int LoadAddr, unsigned int ExecAddr);


extern _kernel_oserror *os_create_directory(char *name);
extern _kernel_oserror *os_create_file(char *name);
extern _kernel_oserror *os_delete_directory(char *name);
extern _kernel_oserror *os_delete_file(char *name);
extern _kernel_oserror *os_read_catalogue_info(char *name, int *p_objtype, int *p_objlength, int *p_filetype);

extern host_list hostlist_search_by_dirname(host_list listroot, char *dirname);
extern cache_list urllist_search_by_filename(host_list hostentry, char *filename);


#endif /* __cache_global__ */
@


1.1
log
@Initial revision
@
text
@d62 1
a62 1
extern char *strdup(char *s1);
@


1.1.1.1
log
@Import of WebServe from SrcFiler
@
text
@@
