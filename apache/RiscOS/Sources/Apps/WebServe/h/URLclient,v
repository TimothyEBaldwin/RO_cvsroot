head	1.1;
branch	1.1.1;
access;
symbols
	WebServe-0_02:1.1.1.1
	WebServe-0_01:1.1.1.1
	WebServe-0_49:1.1.1.1
	sbrodie_WebServe_0_48:1.1.1.1
	sbrodie_WebServe_0_45:1.1.1.1
	sbrodie_WebServe_0_44:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_WebServe_0_42:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	98.02.12.17.02.33;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.02.12.17.02.33;	author sbrodie;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * URL (URLclient.h)
 *
 * © Acorn Computers Ltd. 1997
 */
 
/* The following two calls are purely veneers to SWI URL_ParseURL */
extern _kernel_oserror *URL_find_lengths(int flags, const char *url, const char *rel, URL *u);
extern _kernel_oserror *URL_find_data(int flags, const char *url, const char *rel, URL *u);
extern _kernel_oserror *URL_compose_from_components(int flags, const char *url, const char *rel, URL *u);

/* The following call resolves a relative URL to the given base URL and returns
 * the canonical resolved form of the URL.
 */
extern char *URL_resolve(int flags, const char *url, const char *rel);

/* The following call is used to ensure that the given URL is in canonical form.
 * It returns NULL on failure, and a pointer to a newly malloced block if it has
 * succeeded.  It is equivalent to URL_resolve(flags, url, NULL);
 */
extern char *URL_canonicalise(int flags, const char *url);

/* The following call resolves a relative URL to the given base URL and returns
 * the minimal relative link which would navigate from the base to the relative
 *
 */
extern char *URL_minimise(int flags, const char *url, const char *rel);
@


1.1.1.1
log
@Import of WebServe from SrcFiler
@
text
@@
