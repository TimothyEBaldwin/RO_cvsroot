head	1.2;
access;
symbols
	WebServe-0_02:1.2
	WebServe-0_01:1.2
	WebServe-0_49:1.2
	sbrodie_WebServe_0_48:1.1.1.1
	sbrodie_WebServe_0_45:1.1.1.1
	sbrodie_WebServe_0_44:1.1.1.1
	sbrodie_Expresso_final_190298:1.1.1.1
	sbrodie_WebServe_0_42:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	98.08.14.12.41.04;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.02.12.17.02.29;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.02.12.17.02.29;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Will not proxy file: and filer_* urls from remote hosts
Detail:
  New file-only configuration to block proxying of particular URLs when
  they are requested from remote hosts.
  !Run file ensures later versions of some modules as required.
Admin:
  Build and tested.
  Tagged as WebServe-0_49
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * WebServe (checkloop.c)
 *
 * The code in this file checks the interface in which the connection is
 * arriving to see if it is the loopback interface.
 *
 * © Acorn Computers Ltd. 1997
 */

/*#define CHECK_LOOP*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <time.h>
#include "kernel.h"
#include "swis.h"
#include "sys/types.h"
#include "sys/socket.h"
#include "sys/ioctl.h"
#include "netinet/in.h"
#include "sys/errno.h"
#include "socklib.h"
#include "sys/time.h"
#include "sys/select.h"
#include "sys/time.h"
#include "net/if.h"
#include "arpa/inet.h"
#include "debug.h"
#include "checkloop.h"


static struct in_addr loopback;
static int know_loop = 0;

#ifndef CHECK_LOOP

struct in_addr checkloop_loopback_address(void)
{
        if (!know_loop) {
		inet_aton("127.0.0.1", &loopback);
		know_loop = 1;
	}
	return loopback;
}

/*int checkloop_socket(int sd)
{
        (void) sd;
        return 0;
}*/
#else

#define UDPMSGSIZE	8800

static int checkloop_loopback_address_do(int sd)
{
        struct sockaddr_in *sin;
	struct ifconf ifc;
        struct ifreq ifreq, *ifr;
        int n, i;
        int result = 0;
        char buf[UDPMSGSIZE];

	ifc.ifc_len = UDPMSGSIZE;
	ifc.ifc_buf = buf;
	if (ioctl(sd, SIOCGIFCONF, (char *)&ifc) < 0) {
	        debug(("ioctl failed - errno = %d\n", errno));
	        return 0; /* unable to read?? */
	}
	ifr = ifc.ifc_req;
	for (i = 0, n = ifc.ifc_len / sizeof (struct ifreq); n > 0; n--, ifr++) {
	        if (ifr->ifr_addr.sa_family != AF_INET) continue;
	        ifreq = *ifr;
	        if (ioctl(sd, SIOCGIFFLAGS, (char *)&ifreq) < 0) {
	                continue;
	        }
		sin = (struct sockaddr_in *) &ifr->ifr_addr;
		debug(("Found interface %s (%s)", inet_ntoa(sin->sin_addr),
			(ifreq.ifr_flags & IFF_LOOPBACK) ? "loop" : "not loop"));
	        if ((ifreq.ifr_flags & IFF_LOOPBACK) != 0) {
	                debug(("Remembering that IP address\n"));
	                loopback = sin->sin_addr;
	                result = 1;
	        }
	}

	return result;
}

struct in_addr checkloop_loopback_address(void)
{
        if (!know_loop) {
                int sd = socket(AF_INET, SOCK_DGRAM, 0);
                int result = 0;

		if (sd >= 0) {
			result = checkloop_loopback_address_do(sd);
			socketclose(sd);
		}
		if (result == 0) {
                        inet_aton("127.0.0.1", &loopback);
		}
		know_loop = 1;
	}

        return loopback;
}
#endif /* CHECK_LOOP */

int checkloop_socket(int sd)
{
	struct sockaddr_in sd_sin;
	struct in_addr loop = checkloop_loopback_address();
        int sz = sizeof(sd_sin);

	getsockname(sd, (struct sockaddr *)&sd_sin, &sz);
	if (!memcmp(&loop, &sd_sin.sin_addr, sizeof(struct in_addr))) {
	        debug(("Matched IP address for loopback!\n"));
	        return 1;
	}
	return 0;
}

@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
 * 
d24 1
a24 1
#define CHECK_LOOP
d62 1
a62 1
int checkloop_socket(int sd)
d66 1
a66 1
}
d102 1
a102 1
	
d111 1
a111 1
                
d124 1
a139 2

#endif /* CHECK_LOOP */
@


1.1.1.1
log
@Import of WebServe from SrcFiler
@
text
@@
