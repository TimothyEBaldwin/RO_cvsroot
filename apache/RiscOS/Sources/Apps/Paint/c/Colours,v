head	4.8;
access;
symbols
	Paint-2_23-1:4.8
	Paint-2_23:4.8
	Paint-2_22:4.8
	Paint-2_21:4.8
	Paint-2_20:4.8
	Paint-2_19:4.8
	Paint-2_18:4.8
	Paint-2_17:4.8
	Paint-2_16:4.8
	Paint-2_15:4.7
	Paint-2_14:4.7
	Paint-2_13:4.7
	Paint-2_12:4.7
	Paint-2_11:4.6
	Paint-2_10:4.6
	Paint-2_09:4.6
	Paint-2_08:4.6
	Paint-2_07:4.6
	Paint-2_06:4.5
	Paint-2_05:4.5
	Paint-2_04:4.5
	Paint-2_03:4.4
	Paint-2_02:4.4
	Paint-2_01:4.3
	Paint-2_00:4.2
	Paint-1_99:4.2
	Paint-1_98:4.2
	Paint-1_97:4.1.1.1
	RO_5_07:4.1.1.1
	Paint-1_96:4.1.1.1
	Paint-1_95:4.1.1.1
	Paint-1_94:4.1.1.1
	Ursula_merge:4.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.1.1
	Ursula_RiscPC:4.1.1.1.0.6
	rthornb_UrsulaBuild-19Aug1998:4.1.1.1
	UrsulaBuild_FinalSoftload:4.1.1.1
	rthornb_UrsulaBuild-12Aug1998:4.1.1.1
	aglover_UrsulaBuild-05Aug1998:4.1.1.1
	rthornb_UrsulaBuild-29Jul1998:4.1.1.1
	rthornb_UrsulaBuild-22Jul1998:4.1.1.1
	rthornb_UrsulaBuild-15Jul1998:4.1.1.1
	rthornb_UrsulaBuild-07Jul1998:4.1.1.1
	rthornb_UrsulaBuild-17Jun1998:4.1.1.1
	rthornb_UrsulaBuild-10Jun1998:4.1.1.1
	rthornb_UrsulaBuild-03Jun1998:4.1.1.1
	rthornb_UrsulaBuild-27May1998:4.1.1.1
	rthornb_UrsulaBuild-21May1998:4.1.1.1
	rthornb_UrsulaBuild_01May1998:4.1.1.1
	Daytona:4.1.1.1.0.4
	Daytona_bp:4.1.1.1
	Ursula:4.1.1.1.0.2
	Ursula_bp:4.1.1.1
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.8
date	2014.03.27.23.18.34;	author jlee;	state Exp;
branches;
next	4.7;
commitid	zsqBYJ6Lrncsqoux;

4.7
date	2012.08.22.07.18.09;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	jkPgRNvjP7QROvhw;

4.6
date	2010.12.12.21.12.56;	author rsprowson;	state Exp;
branches;
next	4.5;

4.5
date	2010.12.06.22.30.45;	author rsprowson;	state Exp;
branches;
next	4.4;

4.4
date	2010.11.29.20.55.24;	author rsprowson;	state Exp;
branches;
next	4.3;

4.3
date	2009.05.29.02.09.29;	author pnaulls;	state Exp;
branches;
next	4.2;

4.2
date	2008.06.05.12.56.38;	author bavison;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.20.05;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.20.05;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.28.14;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.8
log
@Various bugfixes. Improve sprite info dialog.
Detail:
  - Handling of currently selected foreground & background colour rewritten; colour is now stored as a 'main_colour' struct, in order to allow representation of alpha level, pixel colour/palette index (which must be 4 bytes for things like CMYK) and ECF index (previously encoded as negative colour values). Fixes crashes when editing RISC OS 5 32bpp ARGB sprites. Note that although the alpha level is now stored internally, and tools should mostly respect it, palette/colour picker limitations mean that only 0/255 is available when selecting colours.
  - "Select colour" code rewritten to decode all the new pixel formats correctly; colours_entry() now accepts a sprite mode word instead of a number-of-colours value
  - "Full info" display tweaked to give more information about the mask (now displays no mask, normal mask, alpha mask, alpha channel)
  - Sprite info dialog extended to display lots more information, including OS version compatibility
  - Fix sprite menu to disallow add/remove mask option if the sprite has a RISC OS 5 alpha channel
  - Fix ECF pattern that's used for the background of masked sprites to get black/white colour values from ColourTrans when in >8bpp modes, to ensure correct colours in new RISC OS 5 modes
  - Fix palette window to render ECF patterns correctly - when creating the sprite that shows the ECF pattern in the palette, psprite_setup_ecf() was failing to set its palette due to passing a sprite pointer to ColourTrans but setting the flags as if it was a sprite name
  - Fix sprwindow_redisplay() and sprwindow_invalidate() to refresh the display correctly when in full info mode; was previously assuming only one column of sprites visible
  - Fix sprites with alpha channels to have the mask ECF pattern plotted in the background
  Files changed:
  - Resources/UK/Messages, Resources/UK/Templates,fec, c/Colours, c/Main, c/Menus, c/PSprite, c/SprWindow, c/Tools, h/Colours, h/MenuD, h/PSprite, h/main
Admin:
  Tested on BB-xM
  Amongst others, fixes issue reported on forums with spritefile window not refreshing correctly when in full info display with multiple columns:
  http://www.riscosopen.org/forum/forums/8/topics/2146?page=5#posts-31272


Version 2.16. Tagged as 'Paint-2_16'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > C.Colours
 *
 *  Paint: Arthur 2 sprite editor
 *   Main loop and resource loading
 *
 *  Author: A.P. Thompson
 *
 * Upgraded to RISCOSlib - DAHE - 16 Aug 1989
 *  DAHE, 28 Aug 89 - internationalisation
 *  JAB,  30 Oct 90 - Brings colour window to the front it is already open
 *  JAB,  23 Nov 90 - Doesn't reset options when closing colour window
 */

#include <swis.h>
#include "Global/VduExt.h"

#include "bbc.h"
#include "wimpt.h"

#include "ftrace.h"
#include "m.h"
#include "main.h"
#include "Menus.h"
#include "PSprite.h"
#include "SprWindow.h"
#include "ToolWindow.h"
#include "Colours.h"
#include "PaintLib.h"

/**********************************
 * Number of colours in a sprite  *
 **********************************/

int colours_count (main_sprite *sprite)

{
  int mode = psprite_address(sprite)->mode;
  int ncolour,modeflags;
  ncolour = bbc_modevar(mode, bbc_NColour)+1;
  modeflags = bbc_modevar(mode, bbc_ModeFlags);

  /* Use similar logic to psprite_get_colours() */
  if (modeflags == -1) /* i.e. error */
    ncolour = -1;
  else if (ncolour == 64)
    ncolour = 256;
  else if ((ncolour == 65536) && !(modeflags & ModeFlag_64k))
    ncolour = 32768;
  else if (!ncolour)
    ncolour = 1<<24;

  ftracef2 ("colours_count (\"%.12s\") -> 0x%X\n",
      psprite_address (sprite)->name,
      ncolour);

  return ncolour;
}

/**************************************************
 * Set gcol, doing tint if dest = 256 colour mode *
 **************************************************/

char colours_gcol_ttab [] =
    "\00\01\20\21\02\03\22\23\04\05\24\25\06\07\26\27\10"
    "\11\30\31\12\13\32\33\14\15\34\35\16\17\36\37\40\41"
    "\60\61\42\43\62\63\44\45\64\65\46\47\66\67\50\51\70"
    "\71\52\53\72\73\54\55\74\75\56\57\76\77";

void colours_set_gcol (int col, int action, int back)

{ switch ((unsigned) bbc_modevar (-1, bbc_NColour))
  { case 63u: case 0xFFFFu: case 0xFFFFFFFFu:
      bbc_gcol (action, colours_gcol_ttab [col >> 2] | back << 7);
      bbc_tint (2 | back, col & 3); /* library shifts it for me */
      ftracef3 ("GCOL 0x%X=%d, TINT %d\n",
          colours_gcol_ttab [col >> 2] | back << 7,
          colours_gcol_ttab [col >> 2] | back << 7, col & 3);
    break;

    case 1u: case 3u: case 15u: case 255u:
      os_swi2 (OS_SetColour, action | back << 4, col);
      ftracef2 ("SetColour 0x%X=%d\n", col, col);
    break;
  }
}

/***********************************************************
 * Set the gcol, doing sprite ECF selection if appropriate *
 ***********************************************************/

void colours_set_sprite_gcol (main_colour gcol, main_sprite *sprite, int back)

{ ftracef4 ("colours_set_sprite_gcol (0x%08x %d %d, ..., %d)\n", gcol.colour, gcol.alpha, gcol.ecf, back);

  if (gcol.ecf)
    psprite_set_ecf (sprite, gcol.colour, back);
  else
  {
    int col = colours_pack_alpha(sprite, gcol);
    if (colours_count (sprite) != 256 || psprite_hastruecolpal (sprite))
    { /*Deep sprite - just use OS_SetColour.*/
      ftracef2 ("OS_SetColour (%d, %d)\n",
          toolwindow_current_mode | back << 4, col);
      os_swix2 (OS_SetColour, toolwindow_current_mode | back << 4, col);
    }
    else
      colours_set_gcol (col, toolwindow_current_mode, back);
  }

  ftracef3 ("set gcol 0x%X %d %d\n", gcol.colour, gcol.alpha, gcol.ecf);
}

/**********************************************************************
 *                                                                    *
 *  Window event handler for sprite colour windows.                   *
 *                                                                    *
 **********************************************************************/

void colours_event_handler (wimp_eventstr *e, void *handle)

{ main_sprite *sprite = (main_sprite *) handle;
  int coloursize = sprite->coloursize, x_eig, y_eig, max_eig;

  ftracef0 ("colours_event_handler\n");
  x_eig = bbc_vduvar (bbc_XEigFactor);
  y_eig = bbc_vduvar (bbc_YEigFactor);
  if (x_eig > y_eig) max_eig = x_eig; else max_eig = y_eig;
  coloursize = (coloursize - 1 >> max_eig) + 1 << max_eig;

  switch (e->e)
  { case wimp_EOPEN:
      wimpt_complain (wimp_open_wind (&e->data.o));
    break;

    case wimp_EREDRAW:
    { int nc, lim, nacross, lb_bpp;
      BOOL more, mask;
      wimp_redrawstr rds;
      unsigned char mono_ttab [256];

      static const unsigned int mono_palette [] = {0x00000000, 0xFFFFFF00};

      mask = psprite_hasmask (sprite);
      lim = nc = colours_count (sprite);
      if (mask) lim++;
      for (more = 0; more < 4; more++)
        if (sprite->ECFs [more].sarea != NULL)
          lim++;
      lb_bpp = bbc_modevar (psprite_address (sprite)->mode, bbc_Log2BPP);

      rds.w = e->data.o.w;
      wimpt_noerr (wimp_redraw_wind (&rds, &more));

      nacross = (lim > 21? 16: 4)*coloursize;

      /*Get a mapping from the sprite to black and white.*/
      if (psprite_haspal (sprite))
        os_swi6 (ColourTrans_GenerateTable, sprite->file->spritearea,
            psprite_address (sprite), 0, (int) mono_palette, (int) mono_ttab,
            1 << 0 /*R1 is sprite*/);
      else
        os_swi6 (ColourTrans_GenerateTable, psprite_address (sprite)->mode,
            psprite_std_palettes [sprite->file->use_current_palette? 0: 1]
            [lb_bpp], 0, (int) mono_palette, (int) mono_ttab, 0);

      #ifdef XTRACE
      { int i;

        for (i = 0; i < 1 << (1 << lb_bpp); i++)
          ftracef2 ("mono_ttab [%d]: %d\n", i, mono_ttab [i]);
      }
      #endif

      while (more)
      { int i, colourx = -coloursize, coloury = 0, xpos, ypos;

        /*Is this a wide table?*/
        ftracef2 ("got a %d-entry sprite, table size %d\n",
            nc, sprite->transtab->ttab_size);

        wimp_setcolour (0);
        bbc_clg ();

        /* now convert to on_screen coordinates */
        for (i = 0; i < lim; i++)
        { int ECF = 0;
          colourx += coloursize;
          if (colourx + coloursize > nacross)
            colourx = 0, coloury -= coloursize;

          xpos = colourx + rds.box.x0 - rds.scx;
          ypos = coloury + rds.box.y1 - rds.scy;

          if (main_CLIPS (&rds.g, xpos, ypos - coloursize,
              xpos + coloursize, ypos))
          { int x, y;

            x = xpos + (1 << x_eig)/2;
            y = ypos - coloursize + (1 << y_eig)/2;

            if (i == nc && mask)
              psprite_ecf (0);
            else
            { if (i >= nc)     /* ECF! */
              { int ECFno;

                ECFno = i - nc;
                if (!mask) ECFno++;        /* ECF index + 1 */

                for (ECF = 0; ECFno; ECF++)
                  if (sprite->ECFs [ECF].sarea != NULL) ECFno--;

                psprite_plot_ecf_sprite (sprite, ECF-1, x, y);
                ftracef2 ("Got ECF %d; gcol %d\n", ECF, sprite->gcol);
              }
              else
              { if (sprite->transtab->table != 0)
                  switch (sprite->transtab->ttab_size/nc)
                  { case 1:
                    #ifdef JRC
                      colours_set_gcol (sprite->transtab->table [i], 0, 0);
                    #else
                    { unsigned char *t =
                          (unsigned char *) sprite->transtab->table;
                      os_swi2 (OS_SetColour, 0, t [i]);
                    }
                    #endif
                    break;

                    case 2:
                    { short *t = (short *) sprite->transtab->table;
                      os_swi2 (OS_SetColour, 0, t [i]);
                    }
                    break;

                    case 4:
                    { int *t = (int *) sprite->transtab->table;
                      os_swi2 (OS_SetColour, 0, t [i]);
                    }
                    break;
                  }
              }
            }

            if (!ECF) bbc_rectanglefill (x, y, coloursize - (1 << x_eig),
                coloursize - (1 << y_eig));

            /*If this is the selected colour, border is white, otherwise
              black.*/
            BOOL selected;
            if (ECF)
              selected = sprite->gcol.ecf && (sprite->gcol.colour == ECF-1);
            else if(i == nc)
              selected = !sprite->gcol.ecf && !sprite->gcol.alpha;
            else
              selected = !sprite->gcol.ecf && sprite->gcol.alpha && (sprite->gcol.colour == i);
            wimpt_noerr (wimp_setcolour (selected?
                0: 7));
            bbc_rectangle (x, y, coloursize - (1 << x_eig),
                coloursize - (1 << y_eig));

            /*Fill in the number (full size only).*/
            if
            ( coloursize == colours_SIZE
                #if !TRACE
                  && selected
                #endif
            )
            { unsigned int fg, bg;

              /*Find the RGB colour of this cell in the colours window.*/
              if (psprite_hastruecolpal (sprite))
                bg = (&psprite_address (sprite)->mode + 1) [2*i];
              else
              { if (psprite_haspal (sprite))
                  /*Use the brain-damaged palette.*/
                  bg = (&psprite_address (sprite)->mode + 1) [2*(i & 15)] |
                      (i & 16) << 11 | (i & 96) << 17 | (i & 128) << 24;
                else
                { /*Use the relevant "standard palette."*/
                  if (nc == 256)
                    bg = psprite_std_palettes
                        [sprite->file->use_current_palette? 0: 1]
                        [3] [i & 15] |
                        (i & 16) << 11 | (i & 96) << 17 | (i & 128) << 24;
                  else
                    bg = psprite_std_palettes
                        [sprite->file->use_current_palette? 0: 1]
                        [nc == 2? 0: nc == 4? 1: 2] [i];

                  /*Copy nybbles.*/
                  bg |= bg >> 4;
                }
              }

              if (mono_ttab [i /*was colour 31st Jan 1994*/])
                fg = 0 /*black*/;
              else
                fg = 0xFFFFFF00 /*white*/;

              if (os_swix3 (Wimp_TextOp, 0 /*SetColour*/, fg, bg) == NULL)
              { /*Do this with the WIMP font ...*/
                char s [10];

                if (i < nc)
                  sprintf (s, "%d", i);
                else if (!ECF)
                  s [0] = 'T', s [1] = '\0';
                else
                  sprintf (s, "E%d", ECF);

                os_swi6 (Wimp_TextOp, 2 /*RenderText*/, s,
                    -1, -1,
                    xpos + coloursize/2 -
                    (i < nc? (i < 10? 1: i < 100? 2: 3):
                    !ECF? 1: 2)*(main_FILER_TextWidth - 4)/2,
                    ypos - coloursize + (main_FILER_TextHeight/2));
              }
              else
              { /*WIMP Does not support wimptextop_set_colour.*/
                wimpt_noerr (wimp_setcolour (mono_ttab [i /*was colour 31st
                    Jan 1994*/]? 7: 0));

                bbc_move (xpos + coloursize/2 -
                    (i < nc? (i < 10? 1: i < 100? 2: 3):
                    !ECF? 1: 2)*(main_FILER_TextWidth - 4)/2,
                    ypos - (main_FILER_TextHeight/2));
                /*the main_FILER_TextWidth's have 4 taken off to set value
                  to the original size*/

                if (i < nc)
                  printf ("%d", i);
                else if (!ECF)
                  puts ("T");
                else
                  printf ("E%d", ECF);
              }
            }
          }
        }

        wimpt_noerr (wimp_get_rectangle (&rds, &more));
      }
    }
    break;

    case wimp_EBUT:
      if (e->data.but.m.bbits & (wimp_BRIGHT | wimp_BLEFT))
      { wimp_wstate whereisit;
        wimp_redrawstr rds;
        int x, y, ncols, ncs, perrow;
        main_colour oldgcol,newgcol;
        BOOL mask = psprite_hasmask(sprite);

        wimpt_noerr (wimp_get_wind_state (sprite->colourhandle, &whereisit));
        ncs = colours_count (sprite);
        if (!mask) ncs--;
        ncols = ncs;
        for (x=0; x<4; x++) if (sprite->ECFs[x].sarea != NULL) ncols++;
        perrow = ncols > 20 ? 16 : 4;

        /* convert to work extent coordinates */
        x = e->data.but.m.x-whereisit.o.box.x0+whereisit.o.x;
        y = - (e->data.but.m.y-whereisit.o.box.y1+whereisit.o.y);

        /* and now to colour number */
        x /= coloursize;
        if (x>=perrow) break;
        y /= coloursize;

        newgcol.colour = y*perrow + x;
        newgcol.alpha = 255;
        newgcol.ecf = FALSE;
        oldgcol = e->data.but.m.bbits & wimp_BLEFT ? sprite->gcol : sprite->gcol2;

        if (newgcol.colour > ncols) break;

        if (newgcol.colour > ncs)
        { int ECF, n = newgcol.colour - ncs;

          for (ECF = 0; n; ECF++)
             if (sprite->ECFs [ECF].sarea != NULL)
                n--;

          newgcol.colour = ECF-1;
          newgcol.ecf = TRUE;
        }
        else if((newgcol.colour == ncs) && mask)
        {
          newgcol.colour = 0;
          newgcol.alpha = 0;
        }

        ftracef2 ("Colour %d %d\n", newgcol.colour, newgcol.ecf /*sprite->gcol*/);
        rds.w = sprite->colourhandle;
        rds.box.x0 = x*coloursize /*x*coloursize*/;
        rds.box.y0 = -(y + 1)*coloursize /*rds.box.y1 - coloursize*/;

        rds.box.x1 = (x + 1)*coloursize /*rds.box.x0 + coloursize*/;
        rds.box.y1 =-y*coloursize /*-y*coloursize*/;
        wimpt_noerr (wimp_force_redraw (&rds));  /* of new colour */

        if (oldgcol.ecf)
        { int ECFno, n = 0;

          for (ECFno = 0; ECFno < oldgcol.colour; ECFno++)
            if (sprite->ECFs[ECFno].sarea != NULL) n++;

          oldgcol.colour = n + ncs + 1;
        }
        else if(!oldgcol.alpha)
          oldgcol.colour = ncs;

        rds.w = sprite->colourhandle;
        x = oldgcol.colour%perrow;
        y = oldgcol.colour/perrow;
        rds.box.x0 = x*coloursize /*x*coloursize*/;
        rds.box.y0 =- (y + 1)*coloursize /*rds.box.y1 - coloursize*/;

        rds.box.x1 = (x + 1)*coloursize /*rds.box.x0 + coloursize*/;
        rds.box.y1 =-y*coloursize /*-y*coloursize*/;
        wimpt_noerr (wimp_force_redraw (&rds));  /* of old colour */

        *(e->data.but.m.bbits & wimp_BLEFT ? &sprite->gcol : &sprite->gcol2) = newgcol;
      }
    break;

    case wimp_ECLOSE:
      ftracef0 ("Colour window close\n");
      colours_delete_window (sprite);
      main_current_options.colours.show_colours = FALSE;
    break;

    case wimp_ESEND:
    case wimp_ESENDWANTACK:
      if (e->data.msg.hdr.action == wimp_MHELPREQUEST)
      { ftracef0 ("Help request on colour window\n");
        main_help_message ("PntH6", e);
      }
    break;

    default:
      ftracef1 ("Poll returned event %d\n", e->e);
    break;
  }
  menus_insdel_frig ();
}

/*****************************************************
 *  Delete a sprite colour window                    *
 *****************************************************/

void colours_delete_window (main_sprite *sprite)

{ ftracef0 ("colours_delete_window\n");
  ftracef1 ("deleting colour window %d\n", sprite->colourhandle);

  m_FREE (sprite->colourtitle, 23); /*plug memory leak. J R C 29th Nov 1993*/
  if (sprite->colourdialogue != 0)
  { os_swi2 (ColourPicker_CloseDialogue, 0, sprite->colourdialogue);
    sprite->colourdialogue = 0;
  }
  else
    main_delete_window (sprite->colourhandle);
  sprite->colourhandle = 0;
}

/****************************************************
 *  Force display of sprite colour window           *
 ****************************************************/

static void calculate_colour_extent (main_sprite *sprite,
    wimp_box *box, char *title)

{ int ne, width, height, i, x_eig, y_eig, max_eig, coloursize;

  ftracef0 ("calculate_colour_extent\n");
  ne = colours_count (sprite);
  if (psprite_hasmask (sprite)) ne++;
  for (i = 0; i < 4; i++) if (sprite->ECFs [i].sarea != NULL) ne++;

  width  = ne >= 256? 16: 4;
  height = (ne - 1)/width + 1;
  ftracef2 ("colour window is %d x %d\n", width, height);

  x_eig = bbc_vduvar (bbc_XEigFactor);
  y_eig = bbc_vduvar (bbc_YEigFactor);
  if (x_eig > y_eig) max_eig = x_eig; else max_eig = y_eig;
  coloursize = (sprite->coloursize - 1 >> max_eig) + 1 << max_eig;

  /* make extent something appropriate */
  box->x0 = 0;
  box->y1 = 0;
  box->x1 = coloursize*width;
  box->y0 =-coloursize*height;

  i = (strlen (title) + 5)*(main_FILER_TextWidth - 4);
    /* set main_FILER_TextWidth to original size */
  if (box->x1 < i) box->x1 = i;
}

void colours_set_extent (main_sprite *sprite)

{ ftracef0 ("colours_set_extent\n");
  if (sprite->colourhandle != NULL)
  { wimp_winfo curr;
    wimp_redrawstr newext;

    curr.w = sprite->colourhandle;
    wimpt_noerr (paintlib_get_wind_info (&curr));

    newext.w = sprite->colourhandle;
    calculate_colour_extent (sprite, &newext.box,
                          curr.info.title.indirecttext.buffer);
    wimpt_noerr (wimp_set_extent (&newext));

    wimpt_noerr (wimp_open_wind ((wimp_openstr *) &curr));
    main_force_redraw (sprite->colourhandle);
  }
}

void colours_create_window (main_sprite *sprite)

{ wimp_openstr colours_open_str;
  wimp_wstate colours_w_state, sprite_w_state;
  wimp_redrawstr sprite_redraw_str;
  int colours_height, colours_width, nc;

  ftracef0 ("colours_create_window\n");
  if (sprite->colourhandle == 0)
  { char *sprname = psprite_address (sprite)->name;

    ftracef0 ("New sprite colour window\n");

    /*Get the state of the parent sprite window*/
    wimpt_noerr (wimp_get_wind_state (sprite->windows->window->handle,
        &sprite_w_state));

    /*And its outline*/
    sprite_redraw_str.w = sprite->windows->window->handle;
    wimpt_noerr (wimp_getwindowoutline (&sprite_redraw_str));

    /*Allocate store for the title*/
    if ((sprite->colourtitle = m_ALLOC (23)) == NULL)
    { main_NO_ROOM ("indirect title - sprite colours");
      return;
    }
    sprintf (sprite->colourtitle, msgs_lookup ("PntW7"), sprname);

    if ((nc = colours_count (sprite)) > 256)
    { /*Use a colour picker.*/
      colourpicker_dialogue dialogue;

      dialogue.flags       =
          ((psprite_transparency_type (sprite) != transparency_type_none)?
              colourpicker_DIALOGUE_OFFERS_TRANSPARENT: 0) |
          ((!sprite->gcol.alpha)? colourpicker_DIALOGUE_TRANSPARENT: 0) |
          (colourpicker_DIALOGUE_TYPE_CLICK << colourpicker_DIALOGUE_TYPE_SHIFT);
      ftracef1 ("flags set to 0x%X\n", dialogue.flags);
      dialogue.title       = sprite->colourtitle;
      dialogue.visible.x0  = sprite_redraw_str.box.x1;
      dialogue.visible.y0  = (int)0x80000000;
      dialogue.visible.x1  = 0x7FFFFFFF;
      dialogue.visible.y1  = sprite_w_state.o.box.y1;
      dialogue.xscroll     = 0;
      dialogue.yscroll     = 0;
      dialogue.colour      = (!sprite->gcol.alpha)? 0:
          colours_entry (psprite_address(sprite)->mode, sprite->gcol.colour);
      dialogue.size        = 0;

      if (wimpt_complain (os_swix2r (ColourPicker_OpenDialogue,
          colourpicker_OPEN_TOOLBOX, &dialogue, &sprite->colourdialogue,
          &sprite->colourhandle)) != NULL)
      { m_FREE (sprite->colourtitle, 23);
        sprite->colourtitle = 0;
        return;
      }
    }
    else
    { wimp_wind colours_wind;

      colours_wind = sprwindow_template.t;
      colours_wind.workflags = (wimp_iconflags) (wimp_IBTYPE*wimp_BCLICKAUTO);
      colours_wind.minsize = 0x00010001;      /* allow tinyness */
      colours_wind.titleflags = (wimp_iconflags) (colours_wind.titleflags | wimp_INDIRECT);
      colours_wind.title.indirecttext.bufflen = 23;
      colours_wind.title.indirecttext.buffer = sprite->colourtitle;
      colours_wind.title.indirecttext.validstring = 0;

      calculate_colour_extent (sprite, &colours_wind.ex,
                              colours_wind.title.indirecttext.buffer);
      colours_wind.box.x1 = colours_wind.box.x0 + colours_wind.ex.x1; /*new*/
      colours_wind.box.y0 = colours_wind.box.y1 + colours_wind.ex.y0;
      if (!main_create_window (&colours_wind, &sprite->colourhandle,
                          &colours_event_handler, sprite)) return;

      wimpt_noerr (wimp_get_wind_state (sprite->colourhandle,
          &colours_w_state));
      colours_width  = colours_w_state.o.box.x1 - colours_w_state.o.box.x0;
      colours_height = colours_w_state.o.box.y1 - colours_w_state.o.box.y0;

      colours_open_str.w = sprite->colourhandle;
      /* open colours_wind to right of its parent */
      colours_open_str.box.x0 = sprite_redraw_str.box.x1;
      colours_open_str.box.x1 = sprite_redraw_str.box.x1 + colours_width;
      colours_open_str.box.y0 = sprite_w_state.o.box.y1 - colours_height;
      colours_open_str.box.y1 = sprite_w_state.o.box.y1;
      colours_open_str.behind = -1;
      colours_open_str.x = 0;
      colours_open_str.y = 0;
      wimpt_noerr (wimp_open_wind (&colours_open_str));
    }
  }
  else
  { /* if the window is already open, then bring it to the front */
    wimp_wstate colour_w_state;

    wimpt_noerr (wimp_get_wind_state (sprite->colourhandle,
        &colour_w_state));
    colour_w_state.o.behind = -1;
    wimpt_noerr (wimp_open_wind (&colour_w_state.o));
  }
}

int colours_entry (int mode, int colour)

{ /*Returns the &BBGGRRxx palette entry corresponding to the given colour number.*/
  ftracef0 ("colours_entry\n");

  int ncolour,modeflags;
  ncolour = bbc_modevar(mode, bbc_NColour);
  modeflags = bbc_modevar(mode, bbc_ModeFlags);

  int r,g,b;

  /* Assume RGB colourspace */
  switch (ncolour)
  { case 4095:
      r = (colour & 0xF)*0x11;
      g = ((colour>>4) & 0xF)*0x11;
      b = ((colour>>8) & 0xF)*0x11;
      break;
    case 65535:
      r = 255*(colour & 0x1F)/31;
      if (modeflags & ModeFlag_64k)
      {
        g = 255*((colour & 0x7E0)>>5)/63;
        colour = colour>>11;
      }
      else
      {
        g = 255*((colour & 0x3E0)>>5)/31;
        colour = colour>>10;
      }
      b = 255*(colour & 0x1F)/31;
      break;
    case 1677215:
    case -1:
      r = colour & 0xff;
      g = (colour>>8) & 0xff;
      b = (colour>>16) & 0xff;
      break;

    default:
      ftracef0 ("INVALID SPRITE MODE!!!\n");
      return 0;
    break;
  }

  if(modeflags & ModeFlag_DataFormatSub_RGB)
  {
    return (r<<24) | (g<<16) | (b<<8);
  }
  else
  {
    return (r<<8) | (g<<16) | (b<<24);
  }
}

int colours_pack_alpha(main_sprite *sprite, main_colour gcol)
{
  int mode = psprite_address(sprite)->mode;
  int modeflags = bbc_modevar(mode, bbc_ModeFlags);
  int colour = gcol.colour;
  if ((modeflags != -1) && (modeflags & ModeFlag_DataFormatSub_Alpha))
  {
    int ncolour = bbc_modevar(mode, bbc_NColour);
    if(ncolour == 4095)
      colour |= (gcol.alpha & 0xf0)<<8;
    else if(ncolour == 65535)
      colour |= (gcol.alpha & 0x80)<<8;
    else
      colour |= gcol.alpha<<24;
  }
  return colour;
}

sprite_colour colours_pack_colour(main_sprite *sprite, main_colour gcol)
{
  sprite_colour colour;
  if (colours_count(sprite) != 256 || psprite_hastruecolpal (sprite))
  {
    colour.colour = colours_pack_alpha(sprite,gcol);
    colour.tint = 0;
  }
  else
  {
    colour.colour = colours_gcol_ttab [gcol.colour >> 2];
    colour.tint = (gcol.colour & 3) << 6;
  }
  return colour;  
}

main_colour colours_unpack_colour(main_sprite *sprite, sprite_colour colour)
{
  main_colour gcol;
  gcol.alpha = 255;
  gcol.ecf = FALSE;
  int nc = colours_count(sprite);
  if (nc != 256 || psprite_hastruecolpal (sprite))
  {
    gcol.colour = colour.colour;
    int modeflags = bbc_modevar(psprite_address(sprite)->mode, bbc_ModeFlags);
    if((modeflags != -1) && (modeflags & ModeFlag_DataFormatSub_Alpha))
    {
      if(nc == 4096)
      {
        gcol.alpha = (gcol.colour>>12) * 0x11;
        gcol.colour &= ~0xf000;
      }
      else if(nc == 32768)
      {
        if(!(gcol.colour & 32768))
          gcol.alpha = 0;
        gcol.colour &= ~32768;
      }
      else
      {
        gcol.alpha = gcol.colour >> 24;
        gcol.colour &= ~0xff000000;
      }
    }
  }
  else
  {
    gcol.colour =
        colours_gcol_ttab [colours_gcol_ttab [colours_gcol_ttab
        [colour.colour]]] << 2 | colour.tint >> 6;
  }
  return gcol;
}

sprite_maskstate colours_pack_mask(main_sprite *sprite, main_colour gcol)
{
  switch(psprite_transparency_type(sprite))
  {
  case transparency_type_onoffmask:
    return (gcol.alpha?sprite_masksolid:sprite_masktransparent);
  case transparency_type_alphamask:
    return (sprite_maskstate) gcol.alpha;
  }
  return sprite_masksolid;
}

main_colour colours_unpack_colour2(main_sprite *sprite, sprite_colour colour, sprite_maskstate mask)
{
  main_colour gcol = colours_unpack_colour(sprite,colour);
  switch(psprite_transparency_type(sprite))
  {
  case transparency_type_onoffmask:
    gcol.alpha = (mask==sprite_masksolid?255:0);
    break;
  case transparency_type_alphamask:
    gcol.alpha = mask;
    break;
  }
  return gcol;
}

@


4.7
log
@Sprite filer selection logic made consistent with filer
Specifically, in the filer when you menu click on a file it is temporarily selected. Clicking on a different file loses the first temporary selection and moves the highlight to the new file. This behaviour is skipped if there are already files selected (using left or right click).
This change makes !Paint behave this way too, previously the menu click was a permanent selection, so menu clicking elsewhere on a different sprite would actually manipulate the sprite selected some time earlier - very confusing.
Tidy ups
 * Remove hardwired mouse button bitmask operations, now uses defines from <wimp.h>.
 * Use OS_Byte numbers from header

Version 2.12. Tagged as 'Paint-2_12'
@
text
@d29 1
d50 15
a64 1
{ static int N [] = {-1, 1 << 1, 1 << 2, 1 << 4, 1 << 8, 1 << 15, 1 << 24};
d68 1
a68 1
      N [bbc_modevar (psprite_address (sprite)->mode, bbc_Log2BPP) + 1]);
d70 1
a70 1
  return N [bbc_modevar (psprite_address (sprite)->mode, bbc_Log2BPP) + 1];
d105 1
a105 1
void colours_set_sprite_gcol (int gcol, main_sprite *sprite, int back)
d107 1
a107 1
{ ftracef2 ("colours_set_sprite_gcol (%d, ..., %d)\n", gcol, back);
d109 13
a121 7
  if (gcol < 0)
    psprite_set_ecf (sprite, -gcol - 1, back);
  else if (colours_count (sprite) != 256 || psprite_hastruecolpal (sprite))
  { /*Deep sprite - just use OS_SetColour.*/
    ftracef2 ("OS_SetColour (%d, %d)\n",
        toolwindow_current_mode | back << 4, gcol);
    os_swix2 (OS_SetColour, toolwindow_current_mode | back << 4, gcol);
a122 2
  else
    colours_set_gcol (gcol, toolwindow_current_mode, back);
d124 1
a124 1
  ftracef1 ("set gcol 0x%X\n", gcol);
d264 8
a271 1
            wimpt_noerr (wimp_setcolour (sprite->gcol == (!ECF? i: -ECF)?
d280 1
a280 2
                  && (sprite->gcol == (!ECF? i: -ECF) /*||
                      sprite->gcol2 == (!ECF? i: -ECF)*/)
d365 3
a367 1
        int x, y, oldgcol, newgcol, ncols, ncs, perrow;
d371 1
a371 1
        if (!psprite_hasmask (sprite)) ncs--;
d385 3
a387 1
        newgcol = y*perrow + x;
d390 1
a390 1
        if (newgcol > ncols) break;
d392 2
a393 2
        if (newgcol > ncs)
        { int ECF, n = newgcol - ncs;
d399 7
a405 1
          newgcol = -ECF;
d408 1
a408 1
        ftracef1 ("Colour %d\n", newgcol /*sprite->gcol*/);
d417 1
a417 1
        if (oldgcol < 0)
d420 1
a420 1
          for (ECFno = 0; ECFno < -oldgcol; ECFno++)
d423 1
a423 1
          oldgcol = n + ncs;
d425 2
d429 2
a430 2
        x = oldgcol%perrow;
        y = oldgcol/perrow;
d569 1
a569 1
          (psprite_hasmask (sprite)?
d571 1
a571 1
          (sprite->gcol == nc? colourpicker_DIALOGUE_TRANSPARENT: 0) |
d581 2
a582 2
      dialogue.colour      = sprite->gcol == nc? 0:
          colours_entry (nc, sprite->gcol);
d639 1
a639 1
int colours_entry (int nc, int colour)
d641 1
a641 1
{ /*Returns the palette entry corresponding to the given colour number.*/
d644 83
a726 6
  switch (nc)
  { case 1 << 15:
    { int
        r = colour & 0x1F,
        g = (colour & 0x3E0) >> 5,
        b = (colour & 0x7C00) >> 10;
d728 28
a755 1
      return 0xFF*r/0x1F << 8 | 0xFF*g/0x1F << 16 | 0xFF*b/0x1F << 24;
d757 21
a777 1
    break;
d779 7
a785 2
    case 1 << 24:
      return colour << 8;
d787 2
a788 4

    default:
      ftracef0 ("INVALID SPRITE MODE!!!\n");
      return 0;
d791 1
d793 1
@


4.6
log
@Colour picker help made more helpful.
Previously, the help requests would end up in the background event handler which didn't look at the window handle and would just return "This is paint" even if the handle was that of the colour picker dialogue.
Also now passes documented 0x80000000 and 0x7FFFFFFF on opening rather than zero.

Version 2.07. Tagged as 'Paint-2_07'
@
text
@d337 1
a337 1
      if (e->data.but.m.bbits & 5)
d359 1
a359 1
        oldgcol = e->data.but.m.bbits & 4? sprite->gcol: sprite->gcol2;
d401 1
a401 1
        *(e->data.but.m.bbits & 4? &sprite->gcol: &sprite->gcol2) = newgcol;
@


4.5
log
@Clean up pass.
No functional changes, but it's now a consistent ball of spaghetti.
@
text
@d535 1
a535 2
          colourpicker_DIALOGUE_TYPE_CLICK <<
          colourpicker_DIALOGUE_TYPE_SHIFT;
d539 2
a540 2
      dialogue.visible.y0  = 0;
      dialogue.visible.x1  = 0;
@


4.4
log
@Fix abort when sorting the sprites by name and one or more sprite viewers
are open, also massively simplified it since the copying around of
main_sprite blocks was pointless - much simpler to just rejoin the linked
list leaving the data in place.
*Tidy up
 Delete awk.*, change to use central 'AwkVers' script.
 Delete h.types.
 Delete h.Paint, it's a duplicate of h.main.
 Delete writepixel, swap to using the one in RISCOS_Lib
 Retire 'h.fixes', switches collapsed, bugfixes proven after 18 years use.
 Cast away some warnings.
 Sprinkled in some consts, moved pointer qualifiers to get syntax colouring
 right.
 Remove local SWI defines, read from <swis.h> now.
 !MkInstall now installs into <Install$Dir>.Apps
*Little UI changes
 Make the colour number in the colour picker be in the right place vertically
 and correct horizontal position of 'T' and 'E' for ECFs.
 In the create new sprite dialogue box the 32k and 16M options are shaded
 when a palette is requested, this avoids the problem of selecting a deep
 colour mode (which trapped the radio icon in a shaded paletted selection).
 The 'Selection' menu is now shaded when there are zero sprites in the
 file
*Sprite filer
 Fix tiled main window fill to work in EX0 modes and not overwrite in EX2
 modes (was using the sprite's mode word not the current mode to deduce eigen
 factors), leading to odd chequer board areas not being redrawn.
 Refactored main_clear_background() to use stronger typing of RISC_OSLib
 rather than _swix where possible.
 A failure to get the Wimp pixel translation table now falls back to solid
 fill
 Double clicking on a sprite in the sprite file window no longer leaves it
 selected, to mimic the filer.
 Set DISPLAY_MARGIN to 0 to counter for the recent increase from 32 to 40
 of main_FILER_TextHeight
 Added 'Sort by size' after 'Sort by name'

Version 2.02. Tagged as 'Paint-2_02'
@
text
@d83 2
a84 1
} }
d236 3
a238 1
            } }   }
d282 2
a283 1
              } }
d326 4
a329 1
        } } } }
d487 1
a487 1
    wimpt_noerr (PaintLib_get_wind_info (&curr));
d555 2
a556 1
    } }
d590 2
a591 1
  } }
d603 1
a603 1
extern int colours_entry (int nc, int colour)
d605 2
a606 3
  /*Returns the palette entry corresponding to the given colour number.*/

{ ftracef0 ("colours_entry\n");
d627 2
a628 1
} }
@


4.3
log
@Filename fixes for case-sensitive environments.  No functional changes.  First commit to ROOL CVS, hooray.

Version 2.00. Not tagged
@
text
@d28 1
a28 1
#include "swis.h"
a42 11
#undef  OS_SetColour
#define OS_SetColour               0x61
#undef  ColourPicker_OpenDialogue
#define ColourPicker_OpenDialogue  0x47702
#undef  ColourPicker_CloseDialogue
#define ColourPicker_CloseDialogue 0x47703
#undef  Wimp_TextOp
#define Wimp_TextOp                0x400F9
#undef  ColourTrans_GenerateTable
#define ColourTrans_GenerateTable  0x40763

a84 16
#if 0
  /*replaces the following. J R C 22nd Feb 1994*/
  { if (bbc_modevar (-1, bbc_Log2BPP) >= 3)  /* 256 colour mode */
    { bbc_gcol (action, colours_gcol_ttab [col >> 2] | back << 7);
      bbc_tint (2 + back, col & 3); /* library shifts it for me */
      ftracef3 ("GCOL 0x%X=%d, TINT %d\n",
          colours_gcol_ttab [col >> 2] | back << 7,
          colours_gcol_ttab [col >> 2] | back << 7, col & 3);
    }
    else
    { bbc_gcol (action, (col & 127) | back << 7);
      ftracef2 ("GCOL 0x%X=%d\n", (col & 127) | back << 7,
          (col & 127) | back << 7);
  } }
#endif

d135 1
a135 1
      static int mono_palette [] = {0x00000000, 0xFFFFFF00};
d301 2
a302 3
                    !ECF? 2: 1)*(main_FILER_TextWidth - 4)/2,
                    ypos -
                    (coloursize + main_FILER_TextHeight + (1 << y_eig))/2);
d311 2
a312 3
                    !ECF? 2: 1)*(main_FILER_TextWidth - 4)/2,
                    ypos - (coloursize - main_FILER_TextHeight +
                    (1 << y_eig))/2);
@


4.2
log
@Fix to filename capitalisation clash for version 1.98.
Summary:
  Changes to SpriteFile window to allow selections and
  sprite edit window changed to improve positioning accuracy.
Detail:
  * Wimp_EScroll event added to make wheelmouse work.
  * Tool rubber banding now snaps to pixel centres making location easier.
  * flickering of box stopped in move (hand) tool.
  * Bottom left of sprites used in painting aligned with grid and sprite plotted
    directly under moving version.
  * Text painting now plots under the moving version of the text.
  * copy, move and hand tools cancel dragging with Adjust.
  * SpriteFile window changed to allow selections using Select,Adjust or Drag.
  * Alt-Select/Adjust on name allows renaming of sprite.
  * TAB moves rename icon to next sprite.
  * Shift TAB moves rename icon to previous sprite
  * Ctrl-Return renames sprite and moves the rename icon to the
    next sprite.
 V2 changes
  * Rubber band rectangular boxes with 0 width or height drawn as a
   line so they don't disappear.
  * Parallelogram rubber band where all the points are in line drawn
    as a line so they don't disappear.
Admin:
  Tested on Iyonix RO5.10
  Programmer tested only.
Changed by:
  Colin Granville

Version 1.98. Retagged as 'Paint-1_98'
@
text
@d36 5
a40 5
#include "menus.h"
#include "psprite.h"
#include "sprwindow.h"
#include "toolwindow.h"
#include "colours.h"
@


4.1
log
@Initial revision
@
text
@d41 1
d509 1
a509 1
    wimpt_noerr (wimp_get_wind_info (&curr));
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
