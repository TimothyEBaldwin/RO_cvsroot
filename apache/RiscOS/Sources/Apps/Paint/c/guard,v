head	4.4;
access;
symbols
	Paint-2_23-1:4.4
	Paint-2_23:4.3
	Paint-2_22:4.3
	Paint-2_21:4.3
	Paint-2_20:4.2
	Paint-2_19:4.2
	Paint-2_18:4.2
	Paint-2_17:4.2
	Paint-2_16:4.2
	Paint-2_15:4.2
	Paint-2_14:4.2
	Paint-2_13:4.2
	Paint-2_12:4.2
	Paint-2_11:4.2
	Paint-2_10:4.2
	Paint-2_09:4.2
	Paint-2_08:4.2
	Paint-2_07:4.2
	Paint-2_06:4.2
	Paint-2_05:4.2
	Paint-2_04:4.2
	Paint-2_03:4.2
	Paint-2_02:4.2
	Paint-2_01:4.2
	Paint-2_00:4.2
	Paint-1_99:4.2
	Paint-1_98:4.2
	Paint-1_97:4.2
	RO_5_07:4.2
	Paint-1_96:4.2
	Paint-1_95:4.1.1.1
	Paint-1_94:4.1.1.1
	Ursula_merge:4.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.1.1
	Ursula_RiscPC:4.1.1.1.0.6
	rthornb_UrsulaBuild-19Aug1998:4.1.1.1
	UrsulaBuild_FinalSoftload:4.1.1.1
	rthornb_UrsulaBuild-12Aug1998:4.1.1.1
	aglover_UrsulaBuild-05Aug1998:4.1.1.1
	rthornb_UrsulaBuild-29Jul1998:4.1.1.1
	rthornb_UrsulaBuild-22Jul1998:4.1.1.1
	rthornb_UrsulaBuild-15Jul1998:4.1.1.1
	rthornb_UrsulaBuild-07Jul1998:4.1.1.1
	rthornb_UrsulaBuild-17Jun1998:4.1.1.1
	rthornb_UrsulaBuild-10Jun1998:4.1.1.1
	rthornb_UrsulaBuild-03Jun1998:4.1.1.1
	rthornb_UrsulaBuild-27May1998:4.1.1.1
	rthornb_UrsulaBuild-21May1998:4.1.1.1
	rthornb_UrsulaBuild_01May1998:4.1.1.1
	Daytona:4.1.1.1.0.4
	Daytona_bp:4.1.1.1
	Ursula:4.1.1.1.0.2
	Ursula_bp:4.1.1.1
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2018.08.11.14.56.23;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	UgSFIrgUSohTgINA;

4.3
date	2017.05.20.08.52.53;	author rool;	state Exp;
branches;
next	4.2;
commitid	igjazMDLAvE4F6Sz;

4.2
date	2003.02.21.11.58.25;	author rsprowson;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.20.07;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.20.07;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.28.16;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Minor debug fixes
PSprite.c: move the trace message up before the label, so if tb is NULL there isn't a NULL pointer dereference
guard.c: refactor assert() to not check ptr!=0 a second time
Found by cppcheck static analysis.
Tagged as Paint-2_23-1 since both are debug code only.
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*guard*/

/* Copyright (C) Acorn Computers Limited 1991
   Confidential - Do not distribute outside Acorn Computers Limited.
   Neither the whole nor any part of the information contained here
   may be adapted or reproduced in any material form except with the
   prior written approval of Acorn Computers Limited (Acorn).
*/

/* History:
 *   Jonathan Coxhead 10 July 1991 Written, based on nova_.
 */

#include <assert.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>

#include "ftrace.h"

#include "guard.h"

#undef guard_summary
#undef guard_check
#undef free_size

#define XTRACE 0 /*define as 1 for extended tracing*/
/*------------------------------------------------------------------------*/
static int Allocated_Store = 0, Allocated_Blocks = 0;

#define GUARD_WORD 0xACCE55ED /*an unlikely value*/
#define GUARD_BYTE 0xC0       /*first two letters of my name!*/ 
#define EXTRA 100             /*Must be >= 1 to hold the guard byte*/

typedef struct Block_Header
  { struct Block_Header *next;  /*a double-linked chain is maintained, to
                                  keep deletion reasonably quick */
    struct Block_Header *prev;
    int size;                   /*size excluding this header */
    char *file;                 /*where first created */
    int line;                   /*where first created */
    unsigned int guard;         /*an unlikely value */
  }
  Block_Header;

static Block_Header *Blocks = NULL;
static int Largest_Block_Size = 0, Highest_Line_No = 0;
/*------------------------------------------------------------------------*/
void guard_summary (void)

{  Block_Header *header;

   ftracef0 ("allocated store ...\n");
   ftracef2 ("allocated %d blocks, %d bytes\n",
         Allocated_Blocks, Allocated_Store);

   ftracef0 ("block summary, in reverse order of allocation:\n");
   for (header = Blocks; header; header = header->prev)
      ftracef4 ("0x%X: guard_alloc (%d) at %s,%d\n",
            (char *) header + sizeof (Block_Header), header->size,
            header->file, header->line);

   ftracef0 ("... end\n");
}
/*------------------------------------------------------------------------*/
void guard_check (void)

{  Block_Header *header;
   int len, i, count = 0;

   #if XTRACE
   ftracef3 ("checking %d blocks, largest %d, lines 1-%d\n",
         Allocated_Blocks, Largest_Block_Size, Highest_Line_No);
   #endif

   for (header = Blocks; header != NULL; header = header->prev)
   {  /*The block must be a reasonable size.*/
      assert (0 < header->size && header->size <= Largest_Block_Size);

      /*We only trace C source.*/
      len = strlen (header->file);
      assert (3 <= len && len <= 12 /*it's RISC O S*/);
      assert (header->file [0] == 'c');
      assert (header->file [1] == '.');
      for (i = 2; i < len; i++) assert (isprint (header->file [i]));

      /*The line number must be reasonable.*/
      assert (1 <= header->line && header->line <= Highest_Line_No);

      /*There's a guard word in the header.*/
      assert (header->guard == GUARD_WORD);

      /*There's a guard byte at the end of each block.*/
      assert (((char *) (header + 1)) [header->size] == GUARD_BYTE);

      assert (count < Allocated_Blocks);
      count++;
   }

   assert (count == Allocated_Blocks);
}
/*------------------------------------------------------------------------*/
void *guard_alloc (char *file, int line, size_t size)

{  void *result;

   #if XTRACE
   ftracef (file, line, "guard_alloc (%d) [%d+%d]\n",
         size, Allocated_Blocks, Allocated_Store);
   #endif

   guard_check ();

   result = (malloc) (size != 0? size + sizeof (Block_Header) + EXTRA: 0);

   if (result == NULL)
      return NULL;
   else
   {  Block_Header *header = (Block_Header *) result;

      Allocated_Blocks++;
      Allocated_Store += size;
      if (Largest_Block_Size < size) Largest_Block_Size = size;
      if (Highest_Line_No < line) Highest_Line_No = line;

      header->prev = Blocks;
      if (Blocks) Blocks->next = header;
      header->next  = NULL;
      header->size  = size;
      header->file  = file;
      header->line  = line;
      header->guard = GUARD_WORD;
      Blocks = header;

      ((char *) (header + 1)) [size] = GUARD_BYTE;
      return (char *) result + sizeof (Block_Header);
}  }
/*------------------------------------------------------------------------*/
void *guard_realloc (char *file, int line, void *ptr, size_t size)

{  void *result;
   Block_Header *old_header = ptr != NULL? (Block_Header *) ptr - 1: NULL;
   size_t old_size = old_header != NULL? old_header->size: 0;

   #if XTRACE
   ftracef (file, line, "guard_realloc (0x%X, %d) [%d+%d]\n",
         ptr, size, Allocated_Blocks, Allocated_Store);
   #endif

   assert (old_header == NULL || old_header->guard == GUARD_WORD);
   assert (old_header == NULL ||
         ((char *) (old_header + 1)) [old_size] == GUARD_BYTE);
   guard_check ();

   if (size == 0 && old_size != 0)
   {  /*Effectively a call to free(). Remove the block from the chain.*/
      if (old_header->next)
      {  assert (old_header->next->prev == old_header);
         old_header->next->prev = old_header->prev;
      }

      if (old_header->prev)
      {  assert (old_header->prev->next == old_header);
         old_header->prev->next = old_header->next;
      }
      if (Blocks == old_header) Blocks = old_header->prev;

      Allocated_Blocks--;
      Allocated_Store -= old_size;
   }
   result = (realloc) ((char *) old_header,
       size != 0? size + sizeof (Block_Header) + EXTRA: 0);

   if (result == NULL)
      return NULL;
   else
   {  Block_Header *header = (Block_Header *) result;

      if (Largest_Block_Size < size) Largest_Block_Size = size;
      if (Highest_Line_No < line) Highest_Line_No = line;

      if (old_header == NULL)
      {  /*Fill in the new block.*/
         Allocated_Blocks++;
         Allocated_Store += size;
         
         header->prev = Blocks;
         if (Blocks) Blocks->next = header;
         header->next = NULL;
         header->size = size;
         header->file = file;
         header->line = line;
         header->guard = GUARD_WORD;
         Blocks = header;
      }
      else
      {  assert (header->guard == GUARD_WORD);

         Allocated_Store += size - header->size;
         header->size = size;

         /* the block may have moved, in which case we must move the
         pointers to it in the two-way chain. */
         if (header->prev)
         {  assert(header->prev->next == old_header);
            header->prev->next = header;
         }

         if (header->next)
         {  assert(header->next->prev == old_header);
            header->next->prev = header;
         }
         if (Blocks == old_header) Blocks = header;
      }

      ((char *) (header + 1)) [size] = GUARD_BYTE;
      return (char *) result + sizeof (Block_Header);
}  }
/*------------------------------------------------------------------------*/
void guard_free (char *file, int line, void *ptr, size_t size)

{  Block_Header *header;
   size_t actual_size;

   file = file, line = line;

   #if XTRACE
   ftracef (file, line, "guard_free (0x%X, %d) [%d+%d]\n",
      ptr, size, Allocated_Blocks, Allocated_Store);
   #endif

   guard_check ();

   if (ptr != NULL)
   {  header = (Block_Header *) ptr - 1;
      actual_size = header->size;
   
      assert ((int) ptr > 0);
      assert (header->guard == GUARD_WORD); /*protects against multiple
            freeing*/
      assert (size == 0 || actual_size == size);
      assert (((char *) (header + 1)) [header->size] == GUARD_BYTE);
   
      /* Remove the block from the chain */
      if (header->next)
      {  assert(header->next->prev == header);
         header->next->prev = header->prev;
      }
   
      if (header->prev)
      {  assert(header->prev->next == header);
         header->prev->next = header->next;
      }
      if (Blocks == header) Blocks = header->prev;
   
      /*Set the contents of the block.*/
      memset (header, -1, actual_size + sizeof (Block_Header) + EXTRA);
   
      (free) (header);
   
      Allocated_Blocks--;
      Allocated_Store -= actual_size;
}  }
@


4.3
log
@Warning suppression
Detail:
  3 fewer compiler warnings.
Admin:
  Submission for the Paint bounty.
  Built, but no run time testing.
@
text
@d252 1
a252 1
      assert (!(ptr == 0 || (int) ptr < 0));
@


4.2
log
@Deleted some junk from CVS.
On creating a new sprite (which is white) an attempt is made to select the
furthest colour from white in the palette.
Corrected icon shading in create dialogue,redid create template.
On closing a file the sprites are freed in reverse order in an attempt to
make it faster (as the blocks are flex'd in the other order) - will speed
up some situations.
When there are 0 sprites in a file the "Save" entry is greyed,this was
causing a internal error nasty looking error box before.
Tweak to allow the debug to be compiled again.
Filesize info box now used OS_ConvertFileSize as the display field
overflowed for files > 1M ish.
File info box made longer than 50 characters,that was a bit stingy.
Local flood fill with transparent mask added.
Reworded some of the messages.
Added "sort by name" to misc menu - sorts the sprites by name oddly enough.
The delete rows/columns now rounds up the grid coordinates,before there
were cases where you could never quite select the edge column/row,for
example a 79*98 sprites zoomed to x8 versus x7.

Version 1.96. Tagged as 'Paint-1_96'
@
text
@d56 1
a56 1
    int guard;                  /*an unlikely value */
@


4.1
log
@Initial revision
@
text
@d43 1
a43 1
static Allocated_Store = 0, Allocated_Blocks = 0;
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
