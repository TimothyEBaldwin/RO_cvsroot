head	4.3;
access;
symbols
	Paint-2_23-1:4.3
	Paint-2_23:4.3
	Paint-2_22:4.3
	Paint-2_21:4.3
	Paint-2_20:4.2
	Paint-2_19:4.2
	Paint-2_18:4.2
	Paint-2_17:4.2
	Paint-2_16:4.2
	Paint-2_15:4.2
	Paint-2_14:4.2
	Paint-2_13:4.2
	Paint-2_12:4.2
	Paint-2_11:4.1.1.1
	Paint-2_10:4.1.1.1
	Paint-2_09:4.1.1.1
	Paint-2_08:4.1.1.1
	Paint-2_07:4.1.1.1
	Paint-2_06:4.1.1.1
	Paint-2_05:4.1.1.1
	Paint-2_04:4.1.1.1
	Paint-2_03:4.1.1.1
	Paint-2_02:4.1.1.1
	Paint-2_01:4.1.1.1
	Paint-2_00:4.1.1.1
	Paint-1_99:4.1.1.1
	Paint-1_98:4.1.1.1
	Paint-1_97:4.1.1.1
	RO_5_07:4.1.1.1
	Paint-1_96:4.1.1.1
	Paint-1_95:4.1.1.1
	Paint-1_94:4.1.1.1
	Ursula_merge:4.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.1.1
	Ursula_RiscPC:4.1.1.1.0.6
	rthornb_UrsulaBuild-19Aug1998:4.1.1.1
	UrsulaBuild_FinalSoftload:4.1.1.1
	rthornb_UrsulaBuild-12Aug1998:4.1.1.1
	aglover_UrsulaBuild-05Aug1998:4.1.1.1
	rthornb_UrsulaBuild-29Jul1998:4.1.1.1
	rthornb_UrsulaBuild-22Jul1998:4.1.1.1
	rthornb_UrsulaBuild-15Jul1998:4.1.1.1
	rthornb_UrsulaBuild-07Jul1998:4.1.1.1
	rthornb_UrsulaBuild-17Jun1998:4.1.1.1
	rthornb_UrsulaBuild-10Jun1998:4.1.1.1
	rthornb_UrsulaBuild-03Jun1998:4.1.1.1
	rthornb_UrsulaBuild-27May1998:4.1.1.1
	rthornb_UrsulaBuild-21May1998:4.1.1.1
	rthornb_UrsulaBuild_01May1998:4.1.1.1
	Daytona:4.1.1.1.0.4
	Daytona_bp:4.1.1.1
	Ursula:4.1.1.1.0.2
	Ursula_bp:4.1.1.1
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2017.05.20.08.52.54;	author rool;	state Exp;
branches;
next	4.2;
commitid	igjazMDLAvE4F6Sz;

4.2
date	2012.08.22.07.18.10;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	jkPgRNvjP7QROvhw;

4.1
date	96.11.05.09.20.07;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.20.07;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.28.17;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Warning suppression
Detail:
  3 fewer compiler warnings.
Admin:
  Submission for the Paint bounty.
  Built, but no run time testing.
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*m.c - redirection for memory allocation functions*/

#undef  TRACE
#define TRACE 1

/*#define XTRACE*/

/*From CLib*/
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <swis.h>

/*From OSLib*/
#include "os.h"
#include "wimp.h"

/*From Support*/
#include "m.h"
#include "ftrace.h"

#define JUNK 0xA5 /*used to initialise and clear blocks*/
#define GUARD 0xACCE55ED /*set at the head of each block*/
#define POST 1024 /*bytes extra after each block*/
#define PRE  4 /*bytes extra before each block*/

#define m_ASSERT(file, line, c) \
   (!(c)? m_assert (file, line, #c): (void) 0)

typedef struct Block *Block;

struct Block
   {  unsigned int guard;
      Block next;
      Block prev;
      int size;
      int seq_no;
      char *file;
      int line;
      char pre [PRE];
      char (data) [1];
   };

#define BLOCK(N) \
   struct \
      {  unsigned int guard; \
         Block next; \
         Block prev; \
         int size; \
         int seq_no; \
         char *file; \
         int line; \
         char pre [PRE]; \
         char (data) [N]; \
      }

#define sizeof_BLOCK(N) \
      (offsetof (struct Block, data) + (N)*sizeof ((Block) NULL)->data)

static int Byte_Count = 0, Block_Count = 0, Seq_No = 0;

static Block List;
/*------------------------------------------------------------------------*/
static void m_assert (char *file, int line, char *msg)

{  os_error error;

   ftracef (file, line, "m_assert %s\n", msg);

   error.errnum = 1;
   sprintf (error.errmess, "%s,%d: Assertion failure: %s",
         file, line, msg);

   os_swi1 (OS_GenerateError, &error);
}
/*------------------------------------------------------------------------*/
static void Check (char *file, int line)

{  Block block;
   int count = 0, size = 0, i;

   ftracef (file, line, "m: Check\n");

   /*To check the list in order of allocation, first find its start.*/
   block = List;
   if (block != NULL)
      while (block->prev != NULL)
         block = block->prev;

   /*Then scan through it.*/
   while (block != NULL)
   {  count++;
      size += block->size;

      m_ASSERT (file, line, block->guard == GUARD);
      m_ASSERT (file, line, block->size != 0);
      m_ASSERT (file, line, strlen (block->file) < FILENAME_MAX);

      if (block->next != NULL)
         m_ASSERT (file, line, block->next->prev == block);

      if (block->prev != NULL)
         m_ASSERT (file, line, block->prev->next == block);

      for (i = 0; i < PRE; i++)
         m_ASSERT (file, line, block->pre [i] == JUNK);

      for (i = 0; i < POST; i++)
         m_ASSERT (file, line, block->data [block->size + i] == JUNK);

      block = block->next;
   }

   m_ASSERT (file, line, count == Block_Count);
   m_ASSERT (file, line, size == Byte_Count);
}
/*------------------------------------------------------------------------*/
void *m_alloc (char *file, int line, int size)

{  Block block;

   Check (file, line);

   if (size != 0 && (block = malloc (sizeof_BLOCK (size + POST))) != NULL)
   {  Block_Count++;
      Byte_Count += size;

      /*guard*/
      block->guard = GUARD;

      /*next*/
      block->next = NULL;

      /*prev*/
      block->prev = List;

      /*size*/
      block->size = size;

      /*seq_no*/
      block->seq_no = Seq_No++;

      /*file*/
      block->file = file;

      /*line*/
      block->line = line;

      /*pre*/
      memset (block->pre, JUNK, PRE);

      /*data*/
      memset (block->data, JUNK, size + POST);

      /*Link it to the rest of the world.*/
      if (List != NULL) List->next = block;
      List = block;

   #ifdef XTRACE
      ftracef (file, line, "m_ALLOC (%d) -> 0x%X\n",
            size, block->data);
   #endif
      return block->data;
   }
   else
   {  /*0 bytes requested, or allocation failed.*/
   #ifdef XTRACE
      ftracef (file, line, "m_ALLOC (%d): no store\n", size);
   #endif
      return NULL;
}  }
/*------------------------------------------------------------------------*/
void m_free (char *file, int line, void *ptr, int size)

{  Block block;
   int i;

   Check (file, line);

   if (ptr != NULL)
   {  /*block->data == ptr, therefore*/
      block = (Block) ((char *) ptr - offsetof (struct Block, data));

      m_ASSERT (file, line, block->guard == GUARD);
      if (size != 0) m_ASSERT (file, line, size == block->size);

      if (block->next != NULL)
      {  m_ASSERT (file, line, block->next->prev == block);
         block->next->prev = block->prev;
      }

      if (block->prev != NULL)
      {  m_ASSERT (file, line, block->prev->next == block);
         block->prev->next = block->next;
      }

      if (List == block) List = block->prev;

      Block_Count--;
      Byte_Count -= block->size;

      /*Check that the PRE bytes are still intact.*/
      for (i = 0; i < PRE; i++)
         m_ASSERT (file, line, block->pre [i] == JUNK);

      /*Check that the POST bytes are still intact.*/
      for (i = 0; i < POST; i++)
         m_ASSERT (file, line, block->data [block->size + i] == JUNK);

      /*Clear the part of the block that has been used.*/
      memset (block, JUNK, sizeof_BLOCK (block->size));

      free (block);

   #ifdef XTRACE
      ftracef (file, line, "m_FREE (0x%X)\n", ptr);
   #endif
   }
   else
   {
   #ifdef XTRACE
      ftracef (file, line, "m_FREE (NULL)\n");
   #endif
}  }
/*------------------------------------------------------------------------*/
void *m_realloc (char *file, int line, void *ptr, int old_size, int size)

{  if (ptr != NULL && size != 0)
   {  void *tmp;

      if ((tmp = m_alloc (file, line, size)) == NULL)
         return NULL;

      memcpy (tmp, ptr, size);

      m_free (file, line, ptr, old_size);

      return tmp;
   }
   else if (size != 0)
      return m_alloc (file, line, size);
   else
   {  /*ptr != NULL*/
      m_free (file, line, ptr, old_size);
      return NULL;
}  }
/*------------------------------------------------------------------------*/
void m_summary (char *file, int line)

{  Block block;
   int i = 0, size = 0;

   ftracef (file, line, "m_SUMMARY\n");

   Check (file, line);

   /*To print out the list in order of allocation, first find its start.*/
   block = List;
   if (block != NULL)
      while (block->prev != NULL)
         block = block->prev;

   /*Then scan through it.*/
   while (block != NULL)
   {  if (i%20 == 0)
         ftracef (NULL, 0, "%12s%6s   %s,%s\n",
               "block no", "bytes",
               "file", "line");

      ftracef (NULL, 0, "%12d%6d   %s,%d\n",
            block->seq_no, block->size,
            block->file, block->line);

      i++;
      size += block->size;
      block = block->next;
   }

   ftracef (file, line, "total: Block_Count %d, Byte_Count %d\n",
         Block_Count, Byte_Count);
}
/*------------------------------------------------------------------------*/
void *m_validate_address (char *file, int line, void *ptr)

{  Block block;

   ftracef (file, line, "m_VALIDATE_ADDRESS\n");

   Check (file, line);

   /*Scan through it.*/
   for (block = List; block != NULL; block = block->prev)
      if ((void *) block->data <= ptr &&
            ptr < (void *) &block->data [block->size])
         return ptr;

   abort ();
   return 0;
}
@


4.2
log
@Sprite filer selection logic made consistent with filer
Specifically, in the filer when you menu click on a file it is temporarily selected. Clicking on a different file loses the first temporary selection and moves the highlight to the new file. This behaviour is skipped if there are already files selected (using left or right click).
This change makes !Paint behave this way too, previously the menu click was a permanent selection, so menu clicking elsewhere on a different sprite would actually manipulate the sprite selected some time earlier - very confusing.
Tidy ups
 * Remove hardwired mouse button bitmask operations, now uses defines from <wimp.h>.
 * Use OS_Byte numbers from header

Version 2.12. Tagged as 'Paint-2_12'
@
text
@d48 1
a48 1
   {  int guard;
d61 1
a61 1
      {  int guard; \
@


4.1
log
@Initial revision
@
text
@d27 1
d89 1
a89 1
   os_swi1 (0x2B /*OS_GenerateError*/, &error);
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
