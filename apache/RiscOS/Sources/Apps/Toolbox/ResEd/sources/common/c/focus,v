head	1.2;
access;
symbols
	ResEd-0_59:1.2
	ResEd-0_58:1.2
	ResEd-0_57:1.2
	ResEd-0_56:1.2
	ResEd-0_55:1.2
	ResEd-0_54:1.2
	ResEd-0_53:1.2
	ResEd-0_52:1.2
	ResEd-0_51:1.1.1.1
	ResEd-0_50:1.1.1.1
	ResEd-0_49:1.1.1.1
	ResEd-0_48:1.1.1.1
	ResEd-0_47:1.1.1.1
	ResEd-0_46:1.1.1.1
	ResEd-0_45:1.1.1.1
	ResEd-0_44:1.1.1.1
	ResEd-0_43:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2011.04.19.20.57.36;	author rgriffin;	state Exp;
branches;
next	1.1;
commitid	ELFY9fuOaAmj8ugv;

1.1
date	98.06.03.15.12.14;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.06.03.15.12.14;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Added support for Tabs and Treeview gadgets to ResEd.

Version 0.52. Tagged as 'ResEd-0_52'
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*-*-C-*-
 *
 * Code to handle input focus, new-style
 */

#include "resed.h"

#include "swicall.h"
#include "wimp.h"

#include "focus.h"


static int focuswindow = -1;          /* Window with the selection; -1 if we don't own it */
static FocusCallback callback = NULL; /* Called when focus changes */
static void *closure = NULL;          /* Passed to callback */
static int mytaskid = 0;

/*
 * gain focus in the given window.  If another of our windows currently has it
 * ask inform it that it has been taken away.  If we don't have it, then
 * broadcast the fact to the world at large.
 */

error * focus_claim (int window, FocusCallback cb, void *cls)
{
    if (window == focuswindow)        /* it's already there */
    {
        return NULL;
    }
    else if (focuswindow != -1)       /* it's in another of our windows */
    {
        if (callback)
        {
            int oldfocuswindow = focuswindow;
            focuswindow = -1;
            (*callback) (FocusLost, oldfocuswindow, closure);
        }
    }
    else                              /* it's elsewhere */
    {
        MessageClaimEntityRec claim;
        claim.header.size = sizeof(claim);
        claim.header.yourref = 0;
        claim.header.messageid = MESSAGE_CLAIM_ENTITY;
        claim.flags = BIT(0) | BIT(1);
        ER ( swi (Wimp_SendMessage,  R0, EV_USER_MESSAGE,  R1, &claim,  R2, 0,  END) );
        mytaskid = claim.header.taskhandle;
    }
    focuswindow = window;
    callback = cb;
    closure = cls;
    if (callback)
    {
        (*callback) (FocusGained, focuswindow, closure);
    }
    return NULL;
}


/*
 * The application should call this when it is deleting a window
 * that might have the focus.  It just resets the idea of where
 * the current focus is.  Does not call the callback.
 */

error * focus_giveup (int window)
{
    if (window == focuswindow)
    {
        focuswindow = -1;
        callback = NULL;
        closure = NULL;
    }
    return NULL;
}


/*
 * Inform caller of the current focus window, or -1 if it is
 * believed to be elsewhere.
 */

int focus_current (void)
{
    return focuswindow;
}


/*
 * Call this on receipt of claim messages.  We ignore all
 * claim messages that originated from ourselves.
 */

error * focus_message_claim_entity (MessageClaimEntityPtr claim)
{
    if (claim->flags & (BIT(0) | BIT(1)) == 0)
        return NULL;

    if (claim->header.taskhandle == mytaskid)
        return NULL;

    if (focuswindow != -1)
    {
        if (callback)
        {
            int oldfocuswindow = focuswindow;
            focuswindow = -1;
            (*callback) (FocusLost, oldfocuswindow, closure);
        }
        focuswindow = -1;
        callback = NULL;
        closure = NULL;
    }
    return NULL;
}
@


1.1
log
@Initial revision
@
text
@d98 1
a98 1
int focus_current ()
d113 1
a113 1
    
d116 1
a116 1
    
@


1.1.1.1
log
@
Import of ResEd from SrcFiler.

RISC OS Version 0.42.
Build structure rationalised.

@
text
@@
