head	4.16;
access;
symbols
	SciCalc-0_87:4.16
	SciCalc-0_86:4.15
	SciCalc-0_85:4.14
	SciCalc-0_84:4.13
	SciCalc-0_83:4.12
	SciCalc-0_82:4.11
	SciCalc-0_81:4.10
	SciCalc-0_80:4.9
	SciCalc-0_79:4.8
	SciCalc-0_78:4.8
	SciCalc-0_77:4.7
	SciCalc-0_76:4.6
	SciCalc-0_75:4.5
	SciCalc-0_61:4.4
	SciCalc-0_60:4.4
	SciCalc-0_59:4.4
	SciCalc-0_58:4.3
	SciCalc-0_57:4.2
	SciCalc-0_56:4.2
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.16
date	2016.04.23.08.08.30;	author rool;	state Exp;
branches;
next	4.15;
commitid	4OMAIc7REtZD1J3z;

4.15
date	2015.11.07.21.54.04;	author rool;	state Exp;
branches;
next	4.14;
commitid	YO4dLiscs8bDZcIy;

4.14
date	2015.09.08.19.18.02;	author rsprowson;	state Exp;
branches;
next	4.13;
commitid	MYEssQHpU5fH3uAy;

4.13
date	2015.05.23.09.59.07;	author rsprowson;	state Exp;
branches;
next	4.12;
commitid	BG7xaRzR1aBcrymy;

4.12
date	2014.02.12.20.27.37;	author rsprowson;	state Exp;
branches;
next	4.11;
commitid	Zhlr8wmKZewuRQox;

4.11
date	2013.10.23.20.42.59;	author rsprowson;	state Exp;
branches;
next	4.10;
commitid	SlSYSzBqfnQ0ysax;

4.10
date	2013.08.24.09.08.24;	author rsprowson;	state Exp;
branches;
next	4.9;
commitid	lgWURMAMCfveDG2x;

4.9
date	2013.07.17.07.32.24;	author rsprowson;	state Exp;
branches;
next	4.8;
commitid	GP1gLYGWFbj2kNXw;

4.8
date	2013.05.18.20.05.31;	author rsprowson;	state Exp;
branches;
next	4.7;
commitid	blLbDINa2Cs1q9Qw;

4.7
date	2012.09.07.20.48.05;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	ZSN8iNAzAsEOMDjw;

4.6
date	2012.09.07.20.27.16;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	CW6E3vdYAH4GFDjw;

4.5
date	2012.09.07.20.00.47;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	SwV0viPS4Y3BwDjw;

4.4
date	2008.09.25.19.36.15;	author srevill;	state Exp;
branches;
next	4.3;

4.3
date	2007.11.05.16.45.57;	author srevill;	state Exp;
branches;
next	4.2;

4.2
date	98.07.17.14.00.36;	author sforrest;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.21.10;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.21.10;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.32.39;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.16
log
@Reflect choices made when reopening choices
Detail:
  On changing SciCalc's choices, reopening the dialogue would show the previous settings (having written the new ones to disc).
  This change reflects the choices immediately.
Admin:
  Submission from Chris Wraight.

Version 0.87. Tagged as 'SciCalc-0_87'
@
text
@REM >!SciCalc.!RunImage

REM Copyright 1996 Acorn Computers Ltd
REM
REM Licensed under the Apache License, Version 2.0 (the "License");
REM you may not use this file except in compliance with the License.
REM You may obtain a copy of the License at
REM
REM     http://www.apache.org/licenses/LICENSE-2.0
REM
REM Unless required by applicable law or agreed to in writing, software
REM distributed under the License is distributed on an "AS IS" BASIS,
REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
REM See the License for the specific language governing permissions and
REM limitations under the License.
REM
REM Authors: ASmith, CDean, JCoxhead, SForrest, CWraight

REM Conventions
REM ===========
REM
REM Global variables are capitalised (e.g. Block%)
REM Local variables are not (e.g. display$)
REM Constants are in all-caps (e.g. SB_REPLACE%)
REM
REM Most global variables are defined in either
REM PROCcalc_init or PROCwimp_init,
REM with a brief explanation of their function.

REM // Initialise application and load resources //
PROClocale_init
PROCcalc_init
PROCmess_load("<SciCalc$Dir>.Messages")
PROCwimp_init
PROCinfowin_init
END=END+&8000:REM Give back unused sprite memory
PROCcalc_clear
IF Option_Open%=TRUE THEN PROCcalwin_firstopen

REM // Poll loop //
SYS "Wimp_DragBox",,-1
WHILE NOT AppQuit%
 PROCwimp_poll
ENDWHILE
SYS "Wimp_CloseDown"

REM // Tidy up and close //
PROCmess_close
END

REM-----------------------------------------------------------------------------

REM // Iconbar //

REM-----------------------------------------------------------------------------

DEF PROCiconbar_click (button%)
REM Handle clicks on the Iconbar icon
CASE button% OF
 WHEN 4:IF FirstClick%=FALSE THEN
   PROCwimp_openwindow(CalWin%,0,0,0,0,0,0,-1,TRUE)
  ELSE
   PROCcalwin_firstopen
  ENDIF
 WHEN 2:SYS "Wimp_GetPointerInfo",,Block%
  SYS "Wimp_CreateMenu",,InfoMenu%,!Block%-64,(4*44)+96
  MenuOpen%=InfoMenu%
ENDCASE
ENDPROC

REM-----------------------------------------------------------------------------

REM // CalWin //

REM-----------------------------------------------------------------------------

DEF PROCcalwin_redraw
REM Redraw the Calculator window
LOCAL @@%,more%,x%,y%,display$,xsize%
@@%="+G10"+DecimalPoint$+"10"
IF ErrorFlag% THEN
 display$="Error"
ELSE
 IF NOT NumberComplete% THEN
  display$=Entry$
 ELSE
  display$=FNformat_tobase(Entry)
 ENDIF
ENDIF
SYS "Wimp_RedrawWindow",,Block% TO more%
x%=Block%!4:y%=Block%!16
WHILE more%
 SYS "Wimp_SetColour",0
 RECTANGLE FILL x%+12,y%-20,CalcSize%-26,-46
 SYS "Wimp_SetColour",7
 RECTANGLE x%+12,y%-20,CalcSize%-26,-46
 SYS "Font_SetFont",DisplayFont%
 SYS "Font_ScanString",0,display$,,2500*400,2500*400,,,LEN(display$) TO ,,,xsize%
 xsize%=xsize% DIV 400
 SYS "Wimp_SetFontColours",DisplayFont%,0,7,14
 SYS "Font_Paint",DisplayFont%,display$,16,x%+CalcSize%-20-xsize%,y%-52
 SYS "Wimp_GetRectangle",,Block% TO more%
ENDWHILE
ENDPROC

DEF PROCcalwin_refresh (icon%)
REM Update window layout when Base is changed
LOCAL i%,oldbase%,temp
LOCAL ERROR
ON ERROR LOCAL ErrorFlag%=TRUE:icon%=-1
IF ErrorFlag% THEN
 IF icon%=18 THEN PROCcalc_clear
ELSE
 CASE OldBase% OF
  WHEN BASE_DEC%:oldbase%=10
  WHEN BASE_BIN%:oldbase%=2
  WHEN BASE_OCT%:oldbase%=8
  WHEN BASE_HEX%:oldbase%=16
 ENDCASE
 CASE Base% OF
  WHEN BASE_DEC%
   SYS "Wimp_ForceRedraw",CalWin%,0,-400,800,0
   FOR i%=2 TO 11:PROCwimp_showicon(CalWin%,i%):NEXT
   FOR i%=53 TO 69:PROCwimp_hideicon(CalWin%,i%):NEXT
   FOR i%=27 TO 51:PROCwimp_showicon(CalWin%,i%): NEXT
   FOR i%=76 TO 78:PROCwimp_showicon(CalWin%,i%):NEXT
   FOR i%=76 TO 78:PROCwimp_selecticon(CalWin%,i%,FALSE):NEXT
   PROCwimp_selecticon(CalWin%,75+Trig%,TRUE)
   IF oldbase%<>10 THEN Entry$=FNformat_tobase(Entry)
  WHEN BASE_BIN%
   SYS "Wimp_ForceRedraw",CalWin%,0,-400,800,0
   FOR i%=2 TO 11:PROCwimp_hideicon(CalWin%,i%):NEXT
   FOR i%=27 TO 51:PROCwimp_hideicon(CalWin%,i%):NEXT
   FOR i%=64 TO 69:PROCwimp_hideicon(CalWin%,i%):NEXT
   FOR i%=76 TO 78:PROCwimp_hideicon(CalWin%,i%):NEXT
   IF oldbase%=10 THEN
    FOR i%=53 TO 63:PROCwimp_showicon(CalWin%,i%):NEXT
    PROCformat_round(FNlocale_val(Entry$))
   ELSE
    temp=FNformat_todec(oldbase%,Entry$)
    Entry$=FNformat_tobase(temp)
   ENDIF
  WHEN BASE_OCT%
   SYS "Wimp_ForceRedraw",CalWin%,0,-400,800,0
   FOR i%=2 TO 7:PROCwimp_showicon(CalWin%,i%):NEXT
   FOR i%=8 TO 11:PROCwimp_hideicon(CalWin%,i%):NEXT
   FOR i%=27 TO 51:PROCwimp_hideicon(CalWin%,i%):NEXT
   FOR i%=64 TO 69:PROCwimp_hideicon(CalWin%,i%):NEXT
   FOR i%=76 TO 78:PROCwimp_hideicon(CalWin%,i%):NEXT
   IF oldbase%=10 THEN
    FOR i%=53 TO 63:PROCwimp_showicon(CalWin%,i%):NEXT
    PROCformat_round(FNlocale_val(Entry$))
   ELSE
    temp=FNformat_todec(oldbase%,Entry$)
    Entry$=FNformat_tobase(temp)
   ENDIF
  WHEN BASE_HEX%
   SYS "Wimp_ForceRedraw",CalWin%,0,-400,800,0
   FOR i%=2 TO 11:PROCwimp_showicon(CalWin%,i%):NEXT
   FOR i%=27 TO 51:PROCwimp_hideicon(CalWin%,i%):NEXT
   FOR i%=64 TO 69:PROCwimp_showicon(CalWin%,i%):NEXT
   FOR i%=76 TO 78:PROCwimp_hideicon(CalWin%,i%):NEXT
   PROCwimp_hideicon(CalWin%,10)
   IF oldbase%=10 THEN
    FOR i%=53 TO 63:PROCwimp_showicon(CalWin%,i%):NEXT
    PROCformat_round(FNlocale_val(Entry$))
   ELSE
    temp=FNformat_todec(oldbase%,Entry$)
    Entry$=FNformat_tobase(temp)
   ENDIF
 ENDCASE
 NumberComplete%=TRUE
ENDIF
PROCcalc_summarise("","",SB_BASE%)
ENDPROC

DEF PROCcalwin_resize (xmin%,ymin%,xscroll%)
LOCAL xmax%,ymax%
REM Resizes window when Toggle icon is clicked
IF CalcSize%=CALC_SMALL% THEN
 PROCwimp_settick(ViewMenu%,0,FALSE)
 PROCwimp_settick(ViewMenu%,1,TRUE)
 CalcSize%=CALC_BIG%
ELSE
 PROCwimp_settick(ViewMenu%,0,TRUE)
 PROCwimp_settick(ViewMenu%,1,FALSE)
 OldBase%=Base%:Base%=BASE_DEC%
 FOR i%=71 TO 73:PROCwimp_selecticon(CalWin%,i%,FALSE):NEXT
 PROCwimp_selecticon(CalWin%,70,TRUE)
 xscroll%=CALC_BIG%-CALC_SMALL%
 CalcSize%=CALC_SMALL%
ENDIF
xmax%=xmin%+CalcSize%:ymax%=ymin%+436
Block%!0=CalWin%
Block%!4=xmin%:Block%!8=ymin%
Block%!12=xmax%:Block%!16=ymax%
Block%!20=xscroll%
Block%!28=-1
SYS "Wimp_OpenWindow",,Block%
PROCcalwin_refresh(18)
ENDPROC

DEF PROCcalwin_click (icon%,button%)
REM Handle clicks in Calculator window
PROCwimp_claimcaret(CalWin%,-1,TRUE)
IF button%=2 THEN
 SYS "Wimp_GetPointerInfo",,Block%
 SYS "Wimp_CreateMenu",,CalcMenu%,!Block%-64,Block%!4
 MenuOpen%=CalcMenu%:ENDPROC
ENDIF
big%=&1FFFFFFF
LOCAL ERROR
ON ERROR LOCAL ErrorFlag%=TRUE:icon%=-1
IF ErrorFlag% THEN
 IF icon%=18 PROCcalc_clear
ELSE
 CASE icon% OF
  WHEN 0,1,2,3,4,5,6,7,8,9:PROCcalc_digit(CHR$(icon%+ASC"0"))
  WHEN 64,65,66,67,68,69:PROCcalc_digit(CHR$(icon%+1))
  WHEN 10:PROCcalc_point
  WHEN 11:PROCcalc_binary("/")
  WHEN 12:PROCcalc_binary("×")
  WHEN 13:IF NOT OpStack% THEN PROCcalc_sign
  WHEN 14:PROCcalc_binary("-")
  WHEN 15:PROCcalc_binary("+")
  WHEN 16:PROCcalc_binary("=")
  WHEN 18:PROCcalc_clear
  WHEN 19:PROCcalc_function("CE")
  WHEN 20:PROCcalc_function("MC")
  WHEN 21:PROCcalc_function("Min")
  WHEN 22:PROCcalc_function("MR")
  WHEN 23:IF NOT OpStack% THEN PROCcalc_unary("NOT")
  WHEN 24:IF NOT OpStack% THEN PROCcalc_binary("AND")
  WHEN 25:IF NOT OpStack% THEN PROCcalc_binary("OR")
  WHEN 26:IF NOT OpStack% THEN PROCcalc_binary("EOR")
  WHEN 27:IF NOT OpStack% THEN PROCcalc_unary("%")
  WHEN 28:PROCcalc_function("RND")
  WHEN 29:IF NOT OpStack% THEN PROCcalc_trig("cos")
  WHEN 30:IF NOT OpStack% THEN PROCcalc_trig("tan")
  WHEN 31:IF NOT OpStack% THEN PROCcalc_trig("arcsin")
  WHEN 32:IF NOT OpStack% THEN PROCcalc_trig("arccos")
  WHEN 33:IF NOT OpStack% THEN PROCcalc_trig("arctan")
  WHEN 34:IF NOT OpStack% THEN PROCcalc_unary("fact")
  WHEN 35:IF NOT OpStack% THEN PROCcalc_unary("10x")
  WHEN 36:IF NOT OpStack% THEN PROCcalc_unary("log")
  WHEN 37:IF NOT OpStack% THEN PROCcalc_unary("ln")
  WHEN 38:IF NOT OpStack% THEN PROCcalc_unary("ex")
  WHEN 39:IF NOT OpStack% THEN PROCcalc_binary("nCr")
  WHEN 40:IF NOT OpStack% THEN PROCcalc_binary("nPr")
  WHEN 41:IF NOT OpStack% THEN PROCcalc_unary("sqrt")
  WHEN 42:IF NOT OpStack% THEN PROCcalc_binary("root")
  WHEN 43:IF NOT OpStack% THEN PROCcalc_unary("sqr")
  WHEN 44:IF NOT OpStack% THEN PROCcalc_binary("^")
  WHEN 45:PROCcalc_unary("reci")
  WHEN 46:PROCcalc_digit("E")
  WHEN 48:IF Bracket% PROCcalc_binary(")") ELSE PROCcalc_binary("(")
  WHEN 49:PROCcalc_function("PI")
  WHEN 50:PROCcalc_function("HYP")
  WHEN 51:IF NOT OpStack% THEN PROCcalc_trig("sin")
  WHEN 52:PROCwimp_claimcaret(CalWin%,-1,FALSE)
  WHEN 53:IF NOT OpStack% THEN PROCcalc_binary("DIV")
  WHEN 54:IF NOT OpStack% THEN PROCcalc_binary("NOR")
  WHEN 55:IF NOT OpStack% THEN PROCcalc_binary("MOD")
  WHEN 56:IF NOT OpStack% THEN PROCcalc_binary("NAND")
  WHEN 57:IF NOT OpStack% THEN PROCcalc_binary("EQV")
  WHEN 58:IF NOT OpStack% THEN PROCcalc_binary("<O")
  WHEN 59:IF NOT OpStack% THEN PROCcalc_binary("<<")
  WHEN 60:IF NOT OpStack% THEN PROCcalc_binary("<<")
  WHEN 61:IF NOT OpStack% THEN PROCcalc_binary(">>")
  WHEN 62:IF NOT OpStack% THEN PROCcalc_binary(">>>")
  WHEN 63:IF NOT OpStack% THEN PROCcalc_binary("O>")
  WHEN 70:OldBase%=Base%:Base%=BASE_DEC%:IFBase%<>OldBase% THENPROCcalwin_refresh(0)
  WHEN 71:OldBase%=Base%:Base%=BASE_BIN%:IFBase%<>OldBase% THENPROCcalwin_refresh(0)
  WHEN 72:OldBase%=Base%:Base%=BASE_OCT%:IFBase%<>OldBase% THENPROCcalwin_refresh(0)
  WHEN 73:OldBase%=Base%:Base%=BASE_HEX%:IFBase%<>OldBase% THENPROCcalwin_refresh(0)
  WHEN 76:Trig%=TRIG_RAD%
  WHEN 77:Trig%=TRIG_DEG%
  WHEN 78:Trig%=TRIG_GRAD%
 ENDCASE
ENDIF
IF ((icon%>=70) AND (icon%<=73)) OR ((icon%>=76) AND (icon%<=78)) THEN
 IF button%=1 THEN PROCwimp_selecticon(CalWin%,icon%,TRUE) : REM Adjust click on radio - pop back in
ENDIF
IF icon%<>50 THEN Hyp%=FALSE:PROCwimp_selecticon(CalWin%,50,FALSE)
SYS "Wimp_ForceRedraw",CalWin%,0,-124,800,-16
ENDPROC

DEF PROCcalwin_keypress (char%)
REM Handle keypresses in Calculator window
LOCAL shift%
SYS "OS_Byte",129,&03 EOR &FF,&FF TO ,shift%
IF shift%=&FF THEN shift%=TRUE ELSE shift%=FALSE
IF char%>=ASC("a") AND char%<=ASC("g") THEN char%-=32
LOCAL ERROR
ON ERROR LOCAL ErrorFlag%=TRUE:char%=-1
IF ErrorFlag% THEN
 IF char%=&007F THEN PROCcalc_clear
ELSE
 CASE char% OF
  WHEN &0003:IF shift% THEN PROCcalc_copy(Summary$) ELSE PROCcalc_copy(Entry$)
  WHEN &0013:
   IF CalcSize%=CALC_BIG% THEN
    PROCwimp_settick(ViewMenu%,0,TRUE):PROCwimp_settick(ViewMenu%,1,FALSE)
    Block%!0=CalWin%:SYS "Wimp_GetWindowState",,Block%
    PROCcalwin_resize(Block%!4,Block%!8,460)
   ELSE
    PROCwimp_settick(ViewMenu%,0,FALSE):PROCwimp_settick(ViewMenu%,1,TRUE)
    Block%!0=CalWin%:SYS "Wimp_GetWindowState",,Block%
    PROCcalwin_resize(Block%!4,Block%!8,0)
   ENDIF
  WHEN &0030,&0031:PROCcalc_digit(CHR$(char%))
  WHEN &0032,&0033,&0034,&0035,&0036,&0037:
   IF Base%<>BASE_BIN% THEN PROCcalc_digit(CHR$(char%))
  WHEN &0038,&0039:
   IF Base%=BASE_DEC% OR Base%=BASE_HEX% THEN PROCcalc_digit(CHR$(char%))
  WHEN &0041,&0042,&0043,&0044,&0046:
   IF Base%=BASE_HEX% THEN PROCcalc_digit(CHR$(char%))
  WHEN &0045:
   IF Base%=BASE_DEC% OR Base%=BASE_HEX% THEN PROCcalc_digit("E")
  WHEN &000D,&003D:PROCcalc_binary("=")
  WHEN &002F:
   IF Base%=BASE_DEC% THEN PROCcalc_binary("/") ELSE PROCcalc_binary("DIV")
  WHEN &0028,&0029:
   IF Bracket% THEN PROCcalc_binary(")") ELSE PROCcalc_binary("(")
  WHEN &002A:PROCcalc_binary("×")
  WHEN &002B:PROCcalc_binary("+")
  WHEN &002D:PROCcalc_binary("-")
  WHEN &005E:IF Base%=BASE_DEC% THEN PROCcalc_binary("^")
  WHEN &0025:IF Base%=BASE_DEC% THEN PROCcalc_unary("%")
  WHEN &0021:IF Base%=BASE_DEC% THEN PROCcalc_unary("fact")
  WHEN &0023:PROCcalc_sign
  WHEN &001B,&007F:PROCcalc_clear
  WHEN &0008:PROCcalc_function("CE")
  WHEN &0181:OSCLI "Filer_Run <SciCalc$Dir>.!Help"
  WHEN ASC(DecimalPoint$):
   IF Base%=BASE_DEC% THEN PROCcalc_point ELSE PROCcalc_binary("MOD")
  WHEN &01A2:Block%!0=CalWin%:SYS"Wimp_CloseWindow",,Block%
  OTHERWISE:
   SYS"Wimp_ProcessKey",char%
 ENDCASE
ENDIF
SYS "Wimp_ForceRedraw",CalWin%,0,-124,800,-16
ENDPROC

DEF PROCcalwin_menu (menu%,icon%)
REM Open a menu over Calculator window
LOCAL x%,y%
IF icon%>0 THEN
 Block%!0=CalWin%
 SYS "Wimp_GetWindowState",,Block%
 x%=Block%!4:y%=Block%!16
 Block%!0=CalWin%:Block%!4=icon%
 SYS "Wimp_GetIconState",,Block%
 x%=x%+(Block%!16):y%=y%+Block%!20
ELSE
 SYS "Wimp_GetPointerInfo",,Block%
 x%=Block%!0:y%=Block%!4
ENDIF
SYS "Wimp_CreateMenu",,menu%,x%,y%
MenuOpen%=menu%
ENDPROC

DEF PROCcalwin_firstopen
REM Open Calculator window with correct Start-up options set
LOCAL xmin%,ymin%,xmax%,ymax%,xscroll%
Block%!0=CalWin%:SYS "Wimp_GetWindowState",,Block%
IF Option_WinX%>-1 THEN xmin%=Option_WinX%:ymin%=Option_WinY%
IF Option_WinX%<0 THEN xmin%=Block%!4:ymin%=Block%!8
IF Option_Type%=CALC_BIG% THEN
 CalcSize%=CALC_BIG%:xscroll%=0
 PROCwimp_settick(ViewMenu%,0,FALSE)
 PROCwimp_settick(ViewMenu%,1,TRUE)
 Base%=Option_Base%:Trig%=Option_Trig%
 PROCwimp_selecticon(CalWin%,69+Base%,TRUE)
 PROCwimp_selecticon(CalWin%,75+Trig%,TRUE)
ELSE
 CalcSize%=CALC_SMALL%:xscroll%=CALC_BIG%-CALC_SMALL%
 PROCwimp_settick(ViewMenu%,0,TRUE)
 PROCwimp_settick(ViewMenu%,1,FALSE)
ENDIF
FOR i%=70 TO 73:PROCwimp_selecticon(CalWin%,i%,FALSE):NEXT
PROCwimp_selecticon(CalWin%,Option_Base%+69,TRUE)
FOR i%=76 TO 78:PROCwimp_selecticon(CalWin%,i%,FALSE):NEXT
PROCwimp_selecticon(CalWin%,Option_Base%+75,TRUE)
xmax%=xmin%+CalcSize%:ymax%=ymin%+436
Block%!0=CalWin%
Block%!4=xmin%:Block%!8=ymin%
Block%!12=xmax%:Block%!16=ymax%
Block%!20=xscroll%
Block%!28=-1
SYS "Wimp_OpenWindow",,Block%
FirstClick%=FALSE
PROCwimp_claimcaret(CalWin%,-1,TRUE)
PROCcalwin_refresh(18)
ENDPROC

DEF PROCcalwin_disable (type%)
REM Toggle calculator buttons on/off when error occurs
CASE type% OF
 WHEN TRUE:
  FOR i%=0 TO 73:PROCwimp_shadeicon(CalWin%,i%,TRUE):NEXT
  FOR i%=76 TO 78:PROCwimp_shadeicon(CalWin%,i%,TRUE):NEXT
  PROCwimp_shadeicon(CalWin%,18,FALSE)
 WHEN FALSE:
  FOR i%=0 TO 73:PROCwimp_shadeicon(CalWin%,i%,FALSE):NEXT
  FOR i%=76 TO 78:PROCwimp_shadeicon(CalWin%,i%,FALSE):NEXT
ENDCASE
ENDPROC

DEF PROCcalwin_pos
REM Store the window position
LOCAL obj%,file%,x%,y%
Block%!0=CalWin%
SYS "Wimp_GetWindowState",,Block%
x%=Block%!4
y%=Block%!8
SYS "XOS_File",17,"Choices:SciCalc" TO obj%
IF obj%=0 THEN SYS "XOS_File",8,"<Choices$Write>.SciCalc"
file%=OPENOUT "<Choices$Write>.SciCalc.WinPos"
IF file%<>0 THEN
 BPUT#file%,"# Window Positon choices for SciCalc"
 BPUT#file%,""
 BPUT#file%,"WinX:"+STR$x%
 BPUT#file%,"WinY:"+STR$y%
CLOSE#file%
ENDPROC

REM-----------------------------------------------------------------------------

REM // InfoWin //

REM-----------------------------------------------------------------------------

DEF PROCinfowin_init
REM Initialise Info window
PROCwimp_seticontext(InfoWin%,4,FNmess_get("_Version"))
ENDPROC

REM-----------------------------------------------------------------------------

REM // ChoiceWin //

REM-----------------------------------------------------------------------------

DEF PROCchoicewin_init
REM Initialise Choices window
IF Option_Type%=CALC_SMALL% THEN
 PROCwimp_selecticon(ChoiceWin%,2,TRUE)
 PROCwimp_selecticon(ChoiceWin%,3,FALSE)
 FOR i%=4 TO 9:PROCwimp_shadeicon(ChoiceWin%,i%,TRUE):NEXT
 PROCwimp_seticontext(ChoiceWin%,5,FNmess_get("Dec"))
 PROCwimp_seticontext(ChoiceWin%,8,FNmess_get("Deg"))
ELSE
 PROCwimp_selecticon(ChoiceWin%,2,FALSE)
 PROCwimp_selecticon(ChoiceWin%,3,TRUE)
 FOR i%=4 TO 9:PROCwimp_shadeicon(ChoiceWin%,i%,FALSE):NEXT
 CASE Option_Base% OF
  WHEN BASE_DEC%:PROCwimp_seticontext(ChoiceWin%,5,FNmess_get("Dec"))
  WHEN BASE_BIN%:PROCwimp_seticontext(ChoiceWin%,5,FNmess_get("Bin"))
  WHEN BASE_OCT%:PROCwimp_seticontext(ChoiceWin%,5,FNmess_get("Oct"))
  WHEN BASE_HEX%:PROCwimp_seticontext(ChoiceWin%,5,FNmess_get("Hex"))
 ENDCASE
 FOR i%=0 TO 3:PROCwimp_settick(BaseOptMenu%,i%,FALSE):NEXT
 PROCwimp_settick(BaseOptMenu%,Option_Base%-1,TRUE)
 CASE Option_Trig% OF
  WHEN TRIG_RAD%:PROCwimp_seticontext(ChoiceWin%,8,FNmess_get("Rad"))
  WHEN TRIG_DEG%:PROCwimp_seticontext(ChoiceWin%,8,FNmess_get("Deg"))
  WHEN TRIG_GRAD%:PROCwimp_seticontext(ChoiceWin%,8,FNmess_get("Grad"))
 ENDCASE
 FOR i%=0 TO 2:PROCwimp_settick(TrigOptMenu%,i%,FALSE):NEXT
 PROCwimp_settick(TrigOptMenu%,Option_Trig%-1,TRUE)
ENDIF
IF Option_Theme%=TRUE THEN
 PROCwimp_selecticon(ChoiceWin%,14,TRUE)
 PROCwimp_selecticon(ChoiceWin%,15,FALSE)
ELSE
 PROCwimp_selecticon(ChoiceWin%,14,FALSE)
 PROCwimp_selecticon(ChoiceWin%,15,TRUE)
ENDIF
PROCwimp_selecticon(ChoiceWin%,18,Option_Open%)
SYS "Wimp_GetPointerInfo",,Block%
PROCwimp_openwindow(ChoiceWin%,Block%!0-400,150,Block%!0+178,746+150,0,0,-1,TRUE)
ENDPROC

DEF PROCchoicewin_keypress (char%)
REM Handle keypresses in Choices window
CASE char% OF
 WHEN &001B,&01A2:
  REM Escape and CTRL-F2 is cancel
  PROCchoicewin_click(11,4)
 WHEN &000D:
  REM Return is save and close
  PROCchoicewin_click(10,4)
 OTHERWISE:
  SYS"Wimp_ProcessKey",char%
ENDCASE
ENDPROC

DEF PROCchoicewin_click (icon%,buttons%)
REM Handle clicks in Choices window
LOCAL file%,type$,obj%,theme$,base$,base%,trig$,trig%,open$
CASE icon% OF
 WHEN -1:
  REM Work area
  PROCwimp_claimcaret(ChoiceWin%,-1,FALSE)
 WHEN 2:
  REM Start-up settings 'Standard'
  IF FNwimp_getselect (ChoiceWin%,icon%) THEN
   FOR i%=4 TO 9:PROCwimp_shadeicon(ChoiceWin%,i%,TRUE):NEXT
  ENDIF
 WHEN 3:
  REM Start-up settings 'Scientific'
  IF FNwimp_getselect(ChoiceWin%,icon%) THEN
   FOR i%=4 TO 9:PROCwimp_shadeicon(ChoiceWin%,i%,FALSE):NEXT
  ENDIF
 WHEN 6:PROCchoicewin_menu(BaseOptMenu%,6)
 WHEN 9:PROCchoicewin_menu(TrigOptMenu%,9)
 WHEN 14:
  REM Appearance 'Match' handled by the Wimp
 WHEN 15:
  REM Appearance 'Default' handled by Wimp
 WHEN 18:
  REM Open at start-up handled by Wimp
 WHEN 11:
  REM Action 'Cancel'
  IF (buttons% AND4)=4 THEN Block%!0=ChoiceWin%:SYS "Wimp_CloseWindow",,Block%
 WHEN 10:
  REM Action 'Save'
  IF (buttons% AND5)<>0 THEN
   REM Adjust or select pressed
   IF (buttons% AND4)=4 THEN Block%!0=ChoiceWin%:SYS "Wimp_CloseWindow",,Block%
   IF FNwimp_getselect(ChoiceWin%,14) THEN theme$="Yes"
   IF FNwimp_getselect(ChoiceWin%,15) THEN theme$="No"
   IF FNwimp_getselect(ChoiceWin%,2) THEN type$="Standard"
   IF FNwimp_getselect(ChoiceWin%,3) THEN type$="Scientific"
   IF FNwimp_getselect(ChoiceWin%,18) THEN open$="Yes" ELSE open$="No"
   FOR i%=0 TO 3
    IF FNwimp_gettick(BaseOptMenu%,i%)=TRUE THEN base%=i%
   NEXT
   CASE base% OF
    WHEN 0:base$="Dec"
    WHEN 1:base$="Bin"
    WHEN 2:base$="Oct"
    WHEN 4:base$="Hex"
   ENDCASE
   FOR i%=0 TO 2
    IF FNwimp_gettick(TrigOptMenu%,i%)=TRUE THEN trig%=i%
   NEXT
   CASE trig% OF
    WHEN 0:trig$="Rad"
    WHEN 1:trig$="Deg"
    WHEN 2:trig$="Grad"
   ENDCASE
   SYS "XOS_File",17,"Choices:SciCalc" TO obj%
   IF obj%=0 THEN SYS "XOS_File",8,"<Choices$Write>.SciCalc"
   file%=OPENOUT "<Choices$Write>.SciCalc.Choices"
   IF file%<>0 THEN
    BPUT#file%,"# Choices file for SciCalc"
    BPUT#file%,""
    BPUT#file%,"Type:"+type$
    BPUT#file%,"Base:"+base$
    BPUT#file%,"Trig:"+trig$
    BPUT#file%,"Theme:"+theme$
    BPUT#file%,"Open:"+open$
    CLOSE#file%
   ENDIF
   IF FNwimp_getselect(ChoiceWin%,2) THEN
    Option_Type%=CALC_SMALL%
   ELSE
    Option_Type%=CALC_BIG%
   ENDIF
   Option_Base%=base%+1
   Option_Trig%=trig%+1
   Option_Theme%=FNwimp_getselect(ChoiceWin%,14)
   Option_Open%=FNwimp_getselect(ChoiceWin%,18)
  ENDIF
ENDCASE
ENDPROC

DEF PROCchoicewin_menu (menu%,icon%)
REM Open a menu over Choices window
LOCAL x%,y%
Block%!0=ChoiceWin%
SYS "Wimp_GetWindowState",,Block%
x%=Block%!4:y%=Block%!16
Block%!0=ChoiceWin%:Block%!4=icon%
SYS "Wimp_GetIconState",,Block%
x%=x%+(Block%!16):y%=y%+Block%!20
SYS "Wimp_CreateMenu",,menu%,x%,y%
MenuOpen%=menu%
ENDPROC

REM-----------------------------------------------------------------------------

REM // Calculator //

REM-----------------------------------------------------------------------------

DEF PROCcalc_init
REM Set global calculator variables and check startup options
LOCAL obj%,file%,command$,value$,flags%
BASE_DEC%=1                      :REM Base Constants
BASE_BIN%=2                      :REM Base Constants
BASE_OCT%=3                      :REM Base Constants
BASE_HEX%=4                      :REM Base Constants
TRIG_RAD%=1                      :REM Trig Constants
TRIG_DEG%=2                      :REM Trig Constants
TRIG_GRAD%=3                     :REM Trig Constants
SB_APPEND%=0                     :REM Constant for Summary Bar
SB_REPLACE%=1                    :REM Constant for Summary Bar
SB_CLEAR%=2                      :REM Constant for Summary Bar
SB_DIGIT%=3                      :REM Constant for Summary Bar
SB_CE%=4                         :REM Constant for Summary Bar
SB_ERROR%=5                      :REM Constant for Summary Bar
SB_BASE%=6                       :REM Constant for Summary Bar
CalcSize%=0                      :REM CalWin size variables
CALC_SMALL%=338:CALC_BIG%=796    :REM CalWin size variables
DIM ConvBuf% 33                  :REM Buffer used for number format conversion
ErrorFlag%=FALSE                 :REM Calculator error flag
Base%=BASE_DEC%                  :REM Number Base
OldBase%=BASE_DEC%               :REM Old Number Base (used when converting)
Trig%=TRIG_DEG%                  :REM Trig type
@@%="+G18"+DecimalPoint$+"18"     :REM Display format
Entry=0                          :REM Calculator display value
Entry$=""                        :REM Calculator display string
Summary$=""                      :REM Summary string
NumberComplete%=FALSE            :REM Completed number flag
SummaryComplete%=FALSE           :REM Complete summary string flag
SummaryEntry$=""                 :REM Last atomic summary entry
SummaryBracket%=FALSE            :REM Closing Bracket entered flag
Memory=0                         :REM Value stored in calculator memory
Hyp%=FALSE                       :REM Hyperbolic button is pressed
Bracket%=FALSE                   :REM Brackets are open/closed
LoStack%=0:HiStack%=-1           :REM
OpStack%=FALSE                   :REM
DIM Operator$(20)                :REM
DIM Number(20)                   :REM
REM Constants for mathematical functions
STP=2.50662827465                :REM Constant for factorial calculation
DIM rot% 20
FOR i%=0 TO 2 STEP 2
P%=rot%
[       OPT i%
.rol
        \rol
        RSB     R1, R1, #32
.ror
        \ror
        AND     R1, R1, #31
        MOV     R0, R0, ROR R1
        MOV     PC, R14
]
NEXT i%
DIM cof(6)
cof(1)=76.18009173
cof(2)=-86.50532033
cof(3)=24.01409822
cof(4)=-1.231739516
cof(5)=0.120858003E-2
cof(6)=-0.536382E-5
REM Default start-up Choices
Option_Type%=CALC_SMALL%         :REM Calculator mode to open in
Option_Base%=BASE_DEC%           :REM Calculator base to open with
Option_Trig%=TRIG_DEG%           :REM Calculator trig to open with
Option_WinX%=-1                  :REM Calculator start-up position
Option_WinY%=-1                  :REM Calculator start-up position
Option_Theme%=TRUE               :REM Calculator desktop theme setting
Option_Open%=FALSE               :REM Calculator auto-open setting
REM Read user choices from script in Choices: (if present)
SYS "XOS_Find",%01001111,"Choices:SciCalc.Choices" TO file%;flags%
IF ((flags% AND 1)=0) AND (file%<>0) THEN
 WHILE NOT EOF#file%
  command$=GET$#file%
  IF INSTR(command$,":") THEN
   value$=RIGHT$(command$,LEN(command$)-INSTR(command$,":"))
   command$=LEFT$(command$,INSTR(command$,":")-1)
   CASE command$ OF
    WHEN "Type":
     IF value$="Standard" THEN Option_Type%=CALC_SMALL%
     IF value$="Scientific" THEN Option_Type%=CALC_BIG%
    WHEN "Base":
     IF value$="Dec" THEN Option_Base%=BASE_DEC%
     IF value$="Bin" THEN Option_Base%=BASE_BIN%
     IF value$="Oct" THEN Option_Base%=BASE_OCT%
     IF value$="Hex" THEN Option_Base%=BASE_HEX%
    WHEN "Trig":
     IF value$="Rad" THEN Option_Trig%=TRIG_RAD%
     IF value$="Deg" THEN Option_Trig%=TRIG_DEG%
     IF value$="Grad" THEN Option_Trig%=TRIG_GRAD%
    WHEN "Theme":
     IF value$="Yes" THEN Option_Theme%=TRUE
     IF value$="No" THEN Option_Theme%=FALSE
    WHEN "Open":
     IF value$="Yes" THEN Option_Open%=TRUE
     IF value$="No" THEN Option_Open%=FALSE
   ENDCASE
  ENDIF
 ENDWHILE
 CLOSE#file%
ENDIF
REM Read Window position settings (if present)
SYS "XOS_Find",%01001111,"Choices:SciCalc.WinPos" TO file%;flags%
IF ((flags% AND 1)=0) AND (file%<>0) THEN
 WHILE NOT EOF#file%
  command$=GET$#file%
  IF INSTR(command$,":") THEN
   value$=RIGHT$(command$,LEN(command$)-INSTR(command$,":"))
   command$=LEFT$(command$,INSTR(command$,":")-1)
   CASE command$ OF
    WHEN "WinX":
     IF VAL(value$)>-1 THEN Option_WinX%=VAL(value$)
    WHEN "WinY":
     IF VAL(value$)>-1 THEN Option_WinY%=VAL(value$)
   ENDCASE
  ENDIF
 ENDWHILE
 CLOSE#file%
ENDIF
ENDPROC

DEF PROCcalc_clear
REM Clear calculator display ('C' button)
ErrorFlag%=FALSE
Entry$="0":Entry=0
PROCcalc_summarise("","",SB_CLEAR%)
PROCcalwin_disable(FALSE)
Bracket%=FALSE:PROCwimp_selecticon(CalWin%,48,FALSE)
Hyp%=FALSE:PROCwimp_selecticon(CalWin%,50,FALSE)
NumberComplete%=FALSE:SummaryComplete%=FALSE
LoStack%=0:HiStack%=-1:OpStack%=FALSE
ENDPROC

DEF PROCcalc_error
REM Updates Summary Bar with error information
CASE ERR OF
 WHEN ER_INVALIDOP%:errtext$=FNmess_get("E4"):REM Invalid op
 WHEN ER_NUMBERTOOBIG%:errtext$=FNmess_get("E1"):REM Too big
 WHEN ER_DIVBYZERO%:errtext$=FNmess_get("E5"):REM Divide by zero
 WHEN ER_NUMBERTOOSMALL%:errtext$=FNmess_get("E2"):REM Too small
 WHEN ER_ACCURACYLOST%:errtext$=FNmess_get("E6"):REM Accuracy lost
 OTHERWISE:errtext$=REPORT$
ENDCASE
PROCcalc_summarise(errtext$,"",SB_ERROR%)
PROCcalwin_disable(TRUE)
ENDPROC

DEF PROCcalc_digit (key$)
REM Add a digit to the display
LOCAL exponent%,width%,type%,prefix$
type%=SB_DIGIT%
IF NumberComplete%=TRUE THEN
 Entry$="0"
 IF OpStack%=FALSE AND Bracket%=FALSE THEN type%=SB_REPLACE%
 IF OpStack%=TRUE THEN SummaryEntry$=""
 IF RIGHT$(Summary$,1)="(" AND Bracket%=TRUE THEN SummaryEntry$=""
ENDIF
IF SummaryComplete%=TRUE THEN Summary$="":SummaryEntry$=""
IF Base%=BASE_DEC% THEN
 exponent%=INSTR(Entry$,"E")
 IF exponent%<>0 THEN
  IF key$="E" THEN ENDPROC
  width%=2+exponent%+SGN(INSTR(MID$(Entry$,exponent%),"-"))
 ELSE
  IF key$="E" THEN
   width%=LEN(Entry$)+1
  ELSE
   width%=10+SGN(INSTR(Entry$,"-"))+SGN(INSTR(Entry$,DecimalPoint$))
  ENDIF
 ENDIF
ELSE
 CASE Base% OF
  WHEN BASE_BIN%:width%=32
  WHEN BASE_OCT%:IF VAL(LEFT$(Entry$,1))<4 THEN width%=11 ELSE width%=10
  WHEN BASE_HEX%:width%=8
 ENDCASE
ENDIF
IF LEN(Entry$)<width% THEN
 IF Base%=BASE_DEC% AND Entry$="0" AND key$="E" THEN key$="1E"
 IF Entry$="0" OR Entry$="-0" THEN Entry$=LEFT$(Entry$,LEN(Entry$)-1)
 Entry$+=key$
 Entry=FNformat_getvalue(Entry$)
 NumberComplete%=FALSE:SummaryComplete%=FALSE:OpStack%=FALSE
 IF SummaryEntry$="" THEN key$=FNformat_prefix(key$)
 PROCcalc_summarise("",key$,type%)
ENDIF
ENDPROC

DEF PROCcalc_point
REM Add decimal point to current value
LOCAL zero$
zero$=""
IF Base%<>BASE_DEC% THEN ENDPROC
IF NumberComplete%=TRUE THEN Entry$="0"
IF SummaryComplete%=TRUE THEN Summary$="0":SummaryEntry$="0"
IF NumberComplete%=TRUE AND SummaryComplete%=FALSE THEN
 SummaryEntry$="0"
 zero$="0"
ENDIF
IF INSTR(Entry$,"E") THEN ENDPROC
IF INSTR(Entry$,DecimalPoint$)=0 AND LEN(Entry$)<10 THEN
 Entry$=Entry$+DecimalPoint$
ENDIF
Entry=FNlocale_val(Entry$)
NumberComplete%=FALSE:SummaryComplete%=FALSE:OpStack%=FALSE
PROCcalc_summarise("",zero$+DecimalPoint$,SB_DIGIT%)
ENDPROC

DEF PROCcalc_sign
REM Change the sign of the current value
LOCAL insert%,l$,r$
IF Entry$="0" THEN Entry$=FNformat_tobase(Entry)
IF Base%=BASE_DEC% THEN
 IF (INSTR(Entry$,"E")=0) OR NumberComplete%=TRUE THEN
  IF INSTR(Entry$,"-")=0 THEN
   Entry$="-"+Entry$
  ELSE
   Entry$=RIGHT$(Entry$,LEN(Entry$)-1)
  ENDIF
 ELSE
  insert%=INSTR(Entry$,"E")
  l$=LEFT$(Entry$,insert%)
  r$=MID$(Entry$,insert%+1)
  IF LEFT$(r$,1)="-" THEN
   r$=RIGHT$(r$,LEN(r$)-1)
  ELSE
   r$="-"+r$
  ENDIF
  Entry$=l$+r$
 ENDIF
ELSE
 Entry$=FNformat_tobase(-FNformat_getvalue(Entry$))
ENDIF
IF SummaryComplete%=TRUE THEN Summary$=""
PROCcalc_summarise("",FNformat_prefix(Entry$),SB_REPLACE%)
Entry=FNformat_getvalue(Entry$)
IF OpStack% THEN Number(HiStack%)=Entry
ENDPROC

DEF PROCcalc_unary (key$)
REM Process functions with one argument
IF SummaryComplete%=TRUE THEN
 Summary$=""
 SummaryComplete%=FALSE
ENDIF
CASE key$ OF
 WHEN "sqrt":
  PROCcalc_summarise("sqrt(",Entry$,SB_REPLACE%)
  result=SQR(Entry)
 WHEN "log":
  PROCcalc_summarise("log(",Entry$,SB_REPLACE%)
  result=LOG(Entry)
 WHEN "ln":
  result=LN(Entry)
  PROCcalc_summarise("ln(",Entry$,SB_REPLACE%)
 WHEN "10x":
  result=10^Entry
  PROCcalc_summarise("10^",Entry$,SB_REPLACE%)
 WHEN "ex":
  result=EXP(Entry)
  PROCcalc_summarise("exp(",Entry$,SB_REPLACE%)
 WHEN "reci":
  result=1/Entry
  PROCcalc_summarise("1/",Entry$,SB_REPLACE%)
 WHEN "NOT":
  PROCcalc_summarise("NOT(",FNformat_prefix(Entry$),SB_REPLACE%)
  result=NOT(Entry)
 WHEN "%":
  IF Summary$="" THEN Summary$=Entry$:SummaryEntry$=Entry$
  PROCcalc_summarise("","%",SB_DIGIT%)
  result=Entry/100
  IF HiStack%>=LoStack% THEN result=result*Number(HiStack%)
 WHEN "sqr":
  IF Summary$="" THEN Summary$=Entry$:SummaryEntry$=Entry$
  PROCcalc_summarise("","^2",SB_DIGIT%)
  result=Entry^2
 WHEN "fact":
  IF Entry<0 THEN ERROR 2,FNmess_get("E3"):REM Invalid factorial
  IF Summary$="" THEN Summary$=Entry$:SummaryEntry$=Entry$
  PROCcalc_summarise("","!",SB_DIGIT%)
  IF Entry=INT(Entry) THEN
   factorial=1
   FOR i%=1 TO INT(Entry):factorial=factorial*i%:NEXT
   result=factorial
  ELSE
   result=EXP(FNcalc_factorial(Entry))
  ENDIF
ENDCASE
Entry=result:Entry$=FNformat_tobase(Entry)
Hyp%=FALSE:PROCwimp_selecticon(CalWin%,50,FALSE)
NumberComplete%=TRUE
ENDPROC

DEF PROCcalc_trig (key$)
REM Process trigonometric functions
LOCAL hypsuf$
IF OpStack% THEN ENDPROC
IF SummaryComplete%=TRUE THEN
 Summary$=""
 SummaryComplete%=FALSE
ENDIF
IF Hyp%=TRUE THEN hypsuf$="h" ELSE hypsuf$=""
PROCcalc_summarise(key$+hypsuf$+"(",Entry$,SB_REPLACE%)
CASE key$ OF
 WHEN "sin":
  IF Hyp%=TRUE THEN
   IF ABS(Entry)>1E-3 THEN
    result=EXP(Entry)/2-EXP(-Entry)/2
   ELSE
    result=Entry+Entry^3/6
   ENDIF
  ELSE
   CASE Trig% OF
    WHEN 1:result=SIN(Entry)
    WHEN 2:result=SIN RAD(Entry)
    WHEN 3:result=SIN((PI/200)*Entry)
   ENDCASE
  ENDIF
 WHEN "cos":
  IF Hyp%=TRUE THEN
   result=EXP(Entry)/2+EXP(-Entry)/2
  ELSE
   CASE Trig% OF
    WHEN 1:result=COS(Entry)
    WHEN 2:result=COS RAD(Entry)
    WHEN 3:result=COS((PI/200)*Entry)
   ENDCASE
  ENDIF
 WHEN "tan":
  IF Hyp%=TRUE THEN
   IF ABS(Entry)>37 THEN
    result=SGN(Entry)
   ELSE
    IF ABS(Entry)>1E-3 THEN
     result=EXP(Entry)/2-EXP(-Entry)/2
    ELSE
     result=Entry+Entry^3/6
    ENDIF
    result=result/(EXP(Entry)/2+EXP(-Entry)/2)
   ENDIF
  ELSE
   CASE Trig% OF
    WHEN 1:result=TAN(Entry)
    WHEN 2:result=TAN RAD(Entry)
    WHEN 3:result=TAN((PI/200)*Entry)
   ENDCASE
  ENDIF
 WHEN "arcsin":
  IF Hyp%=TRUE THEN
   IF ABS(Entry)>1E18 THEN result=SGN(Entry)*LN(2*ABS(Entry))
   IF ABS(Entry)<1E-6 THEN result=Entry ELSE result=LN(Entry+SQR(Entry*Entry+1))
  ELSE
   CASE Trig% OF
    WHEN 1:result=ASN(Entry)
    WHEN 2:result=DEG ASN(Entry)
    WHEN 3:result=(200/PI)*ASN(Entry)
   ENDCASE
  ENDIF
 WHEN "arccos":
  IF Hyp%=TRUE THEN
   IF Entry>1E18 THEN
    result=LN(2*Entry)
   ELSE
    result=LN(Entry+SQR(Entry*Entry-1))
   ENDIF
  ELSE
   CASE Trig% OF
    WHEN 1:result=ACS(Entry)
    WHEN 2:result=DEG ACS(Entry)
    WHEN 3:result=(200/PI)*ACS(Entry)
   ENDCASE
  ENDIF
 WHEN "arctan":
  IF Hyp%=TRUE THEN
   IF ABS(Entry)<1E-6 THEN result=Entry ELSE result=LN((1+Entry)/(1-Entry))/2
  ELSE
   CASE Trig% OF
    WHEN 1:result=ATN(Entry)
    WHEN 2:result=DEG ATN(Entry)
    WHEN 3:result=(200/PI)*ATN(Entry)
   ENDCASE
  ENDIF
ENDCASE
Entry=result:Entry$=FNformat_tobase(Entry)
Hyp%=FALSE:PROCwimp_selecticon(CalWin%,50,FALSE)
NumberComplete%=TRUE
ENDPROC

DEF PROCcalc_binary (key$)
REM Process functions with two arguments
IF SummaryComplete%=TRUE THEN
 Summary$=FNformat_prefix(Entry$)
 SummaryComplete%=FALSE
ENDIF
IF Summary$="" THEN Summary$=FNformat_prefix("0")
CASE key$ OF
 WHEN "+","-","/","×":
  IF NOT OpStack% THEN PROCcalc_summarise(" "+key$+" ","",SB_APPEND%)
  IF OpStack% THEN PROCcalc_summarise(" "+key$+" ","",SB_REPLACE%)
  PROCcalc_sum(key$)
 WHEN "AND","OR","EOR","NAND","NOR","EQV","NOR","EQV","NOR","EQV","MOD","DIV","<O","<<",">>",">>>","O>","nCr","nPr":
  IF NOT OpStack% THEN PROCcalc_summarise(" "+key$+" ","",SB_APPEND%)
  IF OpStack% THEN PROCcalc_summarise(" "+key$+" ","",SB_REPLACE%)
  PROCcalc_sum(key$)
 WHEN "root":
  PROCcalc_summarise(" "+key$+" ","",SB_APPEND%)
  PROCcalc_sum(key$)
 WHEN "^":
  PROCcalc_summarise("^","",SB_APPEND%)
  PROCcalc_sum(key$)
 WHEN "(":
  IF Summary$="0" THEN Summary$=""
  PROCcalc_summarise("(","",SB_APPEND%)
  IF NOT OpStack% THEN
   IF HiStack%<0 AND Entry=0 THEN Entry=1
   key$="*":PROCcalc_sum(key$)
  ENDIF
  Bracket%=TRUE
  LoStack%=HiStack%+1:HiStack%=LoStack%-1
  OpStack%=FALSE:result=0
 OTHERWISE:
  PROCcalc_sum(key$)
ENDCASE
Entry=result:Entry$=FNformat_tobase(Entry)
Hyp%=FALSE:PROCwimp_selecticon(CalWin%,50,FALSE)
NumberComplete%=TRUE
ENDPROC

DEF FNcalc_factorial (val)
REM Calculate factorial
LOCAL temp,ser
temp=val+5.5
temp=(val+0.5)*LNtemp-temp
ser=1
FOR i%=1 TO 6
 val+=1
 ser+=cof(i%)/val
NEXT
=temp+LN(STP*ser)

DEF PROCcalc_function (key$)
REM Calculator function keys
LOCAL type%
CASE key$ OF
 WHEN "CE":
  IF OpStack%=FALSE THEN
   Entry=0:Entry$="0"
   IF RIGHT$(Summary$,1)<>"(" THEN
    IF SummaryComplete% THEN Summary$="":SummaryEntry$=""
    SummaryComplete%=FALSE
    PROCcalc_summarise("","",SB_CE%)
   ENDIF
  ENDIF
 WHEN "MC":
  Memory=0
 WHEN "Min":
  Memory=Entry
 WHEN "MR":
  IF OpStack%=TRUE THEN type%=SB_APPEND% ELSE type%=SB_REPLACE%
  IF Bracket%=TRUE THEN type%=SB_APPEND%
  OpStack%=FALSE
  IF Base%<>BASE_DEC% THEN PROCformat_round(Memory) ELSE Entry=Memory
  Entry$=FNformat_tobase(Entry)
  IF SummaryComplete%=TRUE THEN Summary$="":SummaryEntry$=""
  PROCcalc_summarise("",FNformat_prefix(Entry$),type%)
 WHEN "HYP":
  IF FNwimp_getselect(CalWin%,50)=TRUE THEN Hyp%=TRUE ELSE Hyp%=FALSE
 WHEN "RND":
  Entry=RND(1):Entry$=FNformat_tobase(Entry)
  IF OpStack%=TRUE THEN type%=SB_APPEND% ELSE type%=SB_REPLACE%
  IF Bracket%=TRUE THEN type%=SB_APPEND%
  PROCcalc_summarise("RND(1)","",type%)
  SummaryComplete%=FALSE:OpStack%=FALSE
 WHEN "PI":
  Entry=PI:Entry$=FNformat_tobase(Entry)
  IF OpStack%=TRUE THEN type%=SB_APPEND% ELSE type%=SB_REPLACE%
  IF Bracket%=TRUE THEN type%=SB_APPEND%
  IF SummaryComplete%=TRUE THEN Summary$="":SummaryEntry$=""
  PROCcalc_summarise("pi","",type%)
  SummaryComplete%=FALSE:OpStack%=FALSE
ENDCASE
NumberComplete%=TRUE
ENDPROC

DEF PROCcalc_sum (key$)
REM Resolve arithmetic
LOCAL more%,summ$
NumberComplete%=TRUE:summ$=""
IF NOT OpStack% THEN HiStack%+=1
Number(HiStack%)=Entry
IF key$="=" THEN
 Bracket%=FALSE
 PROCwimp_selecticon(CalWin%,48,FALSE)
 LoStack%=0
ENDIF
more%=TRUE
WHILE more%
 IF HiStack%>LoStack% THEN
  more%=(key$="=" OR key$=")" OR FNcalc_position(key$)>=FNcalc_position(Operator$(HiStack%-1)))
 ELSE
  more%=FALSE
 ENDIF
 IF more% THEN
  Number(HiStack%-1)=FNcalc_evaluate(Number(HiStack%-1),Operator$(HiStack%-1),Number(HiStack%))
  HiStack%-=1
 ENDIF
ENDWHILE
result=Number(HiStack%)
CASE key$ OF
 WHEN "=":
  HiStack%=-1:OpStack%=FALSE
  IF NOT SummaryComplete% THEN
   summ$=FNformat_tobase(result)
   IF Base%<>BASE_DEC% THEN
    IF Base%=BASE_BIN% THEN summ$="%"+summ$
    IF Base%=BASE_OCT% THEN summ$="q"+summ$
    IF Base%=BASE_HEX% THEN summ$="&"+summ$
   ENDIF
   PROCcalc_summarise(" = ",summ$,SB_APPEND%)
   SummaryComplete%=TRUE
  ENDIF
 WHEN ")":
  Bracket%=FALSE:PROCwimp_selecticon(CalWin%,48,FALSE)
  HiStack%-=1:OpStack%=FALSE:LoStack%=0
  PROCcalc_summarise(")","",SB_APPEND%)
 OTHERWISE
  Operator$(HiStack%)=key$
  OpStack%=TRUE
ENDCASE
ENDPROC

DEF FNcalc_position (operator$)
REM Get operator priority
LOCAL pos%
CASE operator$ OF
 WHEN "^":pos%=1
 WHEN "nCr","nPr":pos%=2
 WHEN "×","/","DIV","MOD":pos%=3
 WHEN "+","-":pos%=4
 WHEN "<<",">>>",">>","O>","<O":pos%=5
 WHEN "AND","NAND":pos%=6
 WHEN "OR","EOR","NOR","EQV":pos%=7
 OTHERWISE:pos%=0
ENDCASE
=pos%

DEF FNcalc_evaluate (n1,opp$,n2)
REM Evaluate an expression
LOCAL A%,B%,answer
IF opp$="×" THEN opp$="*"
CASE opp$ OF
 WHEN "NAND":answer=NOT(n1 AND n2)
 WHEN "NOR":answer=NOT(n1 OR n2)
 WHEN "EQV":answer=NOT (n1 EOR n2)
 WHEN "root":answer=n1^(1/n2)
 WHEN "O>":A%=n1:B%=n2:answer=USR ror
 WHEN "<O":A%=n1:B%=n2:answer=USR rol
 WHEN "nCr":
  answer=INT(EXP(FNcalc_factorial(n1)-FNcalc_factorial(n2)-FNcalc_factorial(n1-n2))+.5)
 WHEN "nPr":
  answer=INT(EXP(FNcalc_factorial(n1)-FNcalc_factorial(n1-n2))+.5)
 OTHERWISE:answer=EVAL(STR$n1+opp$+STR$n2)
ENDCASE
=answer

DEF PROCcalc_summarise (func$,val$,type%)
REM Adds text to the Summary Bar
LOCAL summlen%,bexp$,bcount%,break%
IF LEN(Summary$)+LEN(func$)+LEN(val$)>255 THEN
 Summary$=RIGHT$(Summary$,LEN(Summary$)-(LEN(func$)+LEN(val$)))
ENDIF
CASE type% OF
 WHEN SB_DIGIT%:
  IF SummaryEntry$="0" OR SummaryEntry$="-0" THEN
   RIGHT$(Summary$,1)=val$
   SummaryEntry$=val$
  ELSE
   Summary$=Summary$+val$
   SummaryEntry$=SummaryEntry$+val$
  ENDIF
  SummaryBracket%=FALSE
 WHEN SB_APPEND%:
  Summary$=Summary$+func$+val$
  SummaryEntry$=func$+val$
  IF func$=")" THEN SummaryBracket%=TRUE ELSE SummaryBracket%=FALSE
 WHEN SB_REPLACE%:
  IF SummaryBracket%=FALSE THEN
   Summary$=LEFT$(Summary$,LEN(Summary$)-LEN(SummaryEntry$))
   summlen%=LEN(func$)+LEN(val$)
   Summary$=Summary$+func$+val$
   IF RIGHT$(func$,1)="(" THEN Summary$=Summary$+")":summlen%+=1
   SummaryEntry$=RIGHT$(Summary$,summlen%)
  ELSE
   bexp$="":bcount%=0:break%=FALSE
   FOR i%=LEN(Summary$) TO 1 STEP -1
    IF break%=FALSE THEN
     IF MID$(Summary$,i%,1)="(" THEN bcount%-=1
     IF MID$(Summary$,i%,1)=")" THEN bcount%+=1
     IF bcount%>0 THEN bexp$=MID$(Summary$,i%,1)+bexp$
     IF bcount%=0 THEN break%=TRUE
    ENDIF
   NEXT
   Summary$=LEFT$(Summary$,LEN(Summary$)-LEN(bexp$)-1)
   Summary$=Summary$+func$+bexp$:SummaryEntry$=func$+bexp$
  ENDIF
  SummaryBracket%=FALSE
 WHEN SB_CE%:
  IF SummaryBracket%=FALSE THEN
   Summary$=LEFT$(Summary$,LEN(Summary$)-LEN(SummaryEntry$))
   SummaryEntry$="":SummaryBracket%=FALSE
  ELSE
   bexp$="":break%=FALSE
   FOR i%=LEN(Summary$) TO 1 STEP -1
    IF MID$(Summary$,i%,1)="(" THEN break%=TRUE
    IF break%=FALSE THEN bexp$=MID$(Summary$,i%,1)+bexp$
   NEXT
   Summary$=LEFT$(Summary$,LEN(Summary$)-LEN(bexp$)-1)
   SummaryEntry$="":SummaryBracket%=FALSE
  ENDIF
 WHEN SB_CLEAR%:
  Summary$="":SummaryEntry$="":SummaryBracket%=FALSE
 WHEN SB_ERROR%:
  Summary$=func$:SummaryEntry$="":SummaryBracket$=""
 WHEN SB_BASE%:
  REM Base/Mode has changed
ENDCASE
PROCwimp_seticontext(CalWin%,75,Summary$)
ENDPROC

DEF PROCcalc_copy (type$)
CopyText$=type$
IF NOT OwnClipboard% THEN
 OwnClipboard%=TRUE
 Block%!0=24
 Block%!12=0
 Block%!16=MESSAGE_CLAIMENTITY%
 Block%!20=4
 SYS "Wimp_SendMessage",17,Block%,0
ENDIF
ENDPROC

REM-----------------------------------------------------------------------------

REM // Format //

REM-----------------------------------------------------------------------------

DEF FNformat_tobin (value$)
REM Convert a value to binary notation
LOCAL dec%,len%,result%
dec%=VAL(value$)
SYS "OS_ConvertBinary4",dec%,ConvBuf%,33 TO ,len%
?len%=13
=FNformat_stripzeros($ConvBuf%)

DEF FNformat_tohex (value$)
REM Convert a value to hexadecimal noation
LOCAL hex%,len%
hex%=VAL(value$)
SYS "OS_ConvertHex8",hex%,ConvBuf%,9 TO ,len%
?len%=13
=FNformat_stripzeros($ConvBuf%)

DEF FNformat_tooct(value$)
REM Convert a value to octal notation
LOCAL buf%,oct%,len%,temp,oct$,i%,temp%
oct%=VAL(value$)
SYS "OS_ConvertBinary4",oct%,ConvBuf%,33 TO ,len%
?len%=13
value$="0"+$ConvBuf%
oct$=""
FOR i%=1 TO 31 STEP 3
 temp%=EVAL("%"+MID$(value$,i%,3))
 oct$+=STR$temp%
NEXT
=FNformat_stripzeros(oct$)

DEF FNformat_todec (base%,value$)
REM Convert a value to decimal notation
LOCAL result%
SYS "OS_ReadUnsigned",base%,value$ TO ,,result%
=result%

DEF FNformat_tobase (decimal)
REM Converts a value to a string formatted to the current base
LOCAL @@%
@@%="+G10"+DecimalPoint$+"10"
IF INSTR(STR$(decimal),"?")<>0 THEN ERROR 1,FNmess_get("E7"):REM FP Exception
IF Base%<>1 AND decimal>&7FFFFFFF THEN ERROR 1,FNmess_get("E1"):REM Too big
IF Base%<>1 AND decimal<&80000000 THEN ERROR 1,FNmess_get("E2"):REM Too small
CASE Base% OF
 WHEN 1:temp$=STR$(decimal)
 WHEN 2:temp$=FNformat_tobin(STR$(decimal))
 WHEN 3:temp$=FNformat_tooct(STR$(decimal))
 WHEN 4:temp$=FNformat_tohex(STR$(decimal))
ENDCASE
=temp$

DEF FNformat_stripzeros (value$)
REM Strip leading zeros from a number string
WHILE LEFT$(value$,1)="0"
 value$=RIGHT$(value$,LEN(value$)-1)
ENDWHILE
IF value$="" THEN value$="0"
=value$

DEF PROCformat_round (temp)
REM Rounds value up/down to make whole number prior to conversion
LOCAL temp%
IF temp<0 THEN temp-=0.5 ELSE IF temp>0 temp+=0.5
IF temp>=2147483648 THEN ERROR 1,FNmess_get("E1"):REM Too big
IF temp<=-2147483649 THEN ERROR 1,FNmess_get("E2"):REM Too small
temp%=temp:Entry=temp%
CASE Base% OF
 WHEN BASE_BIN%:Entry$=FNformat_tobin(STR$(Entry))
 WHEN BASE_OCT%:Entry$=FNformat_tooct(STR$(Entry))
 WHEN BASE_HEX%:Entry$=FNformat_tohex(STR$(Entry))
ENDCASE
IF OpStack% THEN Number(HiStack%)=Entry
ENDPROC

DEF FNformat_getvalue(value$)
REM Gets the value of the Entry string
LOCAL result
CASE Base% OF
 WHEN BASE_DEC%:result=FNlocale_val(value$)
 WHEN BASE_BIN%:result=FNformat_todec(2,value$)
 WHEN BASE_OCT%:result=FNformat_todec(8,value$)
 WHEN BASE_HEX%:result=FNformat_todec(16,value$)
ENDCASE
=result

DEF FNformat_prefix (digit$)
REM Add a Base prefix symbol to digits in the summary bar
CASE Base% OF
 WHEN BASE_BIN%:digit$="%"+digit$
 WHEN BASE_OCT%:digit$="q"+digit$
 WHEN BASE_HEX%:digit$="&"+digit$
ENDCASE
=digit$

REM-----------------------------------------------------------------------------

REM // Locale functions //

REM-----------------------------------------------------------------------------

DEF PROClocale_init
REM Choose suitable decimal point character
LOCAL point%
SYS "Territory_ReadSymbols",-1,0 TO point%
DecimalPoint$=CHR$?point%
ENDPROC

DEF FNlocale_val(number$)
REM Gets value of number$, taking account of decimal point character
LOCAL i%
IF DecimalPoint$=".":=VALnumber$
i%=INSTR(number$,DecimalPoint$)
IF i%<>0:=VAL(LEFT$(number$,i%-1)+"."+MID$(number$,i%+1))
=VALnumber$

REM-----------------------------------------------------------------------------

REM // Messages //

REM-----------------------------------------------------------------------------

DEF PROCmess_load (name$)
REM Loads Message file
LOCAL ERROR
ON ERROR LOCAL RESTORE ERROR:ERROR 3,REPORT$
SYS "MessageTrans_FileInfo",,name$
SYS "OS_Module",6,,,17+LEN(name$) TO ,,MessDesc%
$(MessDesc%+16)=name$
SYS "MessageTrans_OpenFile",MessDesc%,MessDesc%+16
ENDPROC

DEF PROCmess_close
REM Close message file and free memory
SYS "XMessageTrans_CloseFile",MessDesc%
SYS "XOS_Module",7,,MessDesc%
ENDPROC

DEF FNmess_get (tag$)
REM Retrieves a Message string from a tag
=FNmess_getargs(tag$,"","")

DEF FNmess_getargs (tag$,arg1$,arg2$)
REM Retrieves a Message string with arguments
LOCAL flags%,args%
SYS "XMessageTrans_Lookup",MessDesc%,tag$,MessText%,256,arg1$,arg2$ TO ,,,args%;flags%
IF flags% AND 1 THEN args%=0
MessText%?args%=13
=$MessText%

REM-----------------------------------------------------------------------------

REM // Wimp //

REM-----------------------------------------------------------------------------

DEF PROCwimp_init
REM Initialise the task, set global variables and load resources
LOCAL sprite$
WimpVersion%=0                         :REM Wimp Version
DIM Block% &1500                       :REM General Wimp Buffer
DIM ErrorBlock% 1280                   :REM Error Buffer
DIM TaskID% 20:$(TaskID%)="TASK"       :REM Task Name Buffer
DIM MessText% 256                      :REM Messages buffer
MessType%=0                            :REM Message type
DIM WindowName% 12                     :REM Buffer for Window title
DIM WindowFonts% 255                   :REM Buffer for Outline fonts
BootPath$=""                           :REM Pathname for <SciCalc$Dir>
MESSAGE_QUIT%=0                        :REM Message constants
MESSAGE_HELPREQUEST%=&502              :REM Message constants
MESSAGE_HELPREPLY%=&503                :REM Message constants
MESSAGE_CLAIMENTITY%=&F                :REM Message constants
MESSAGE_DATAREQUEST%=&10               :REM Message constants
MESSAGE_DATASAVE%=&1                   :REM Message constants
MESSAGE_DATASAVEACK%=&2                :REM Message constants
MESSAGE_DATALOAD%=&3                   :REM Message constants
MESSAGE_SAVEDESKTOP%=&A                :REM Message constants
ER_INVALIDOP%=&80000200                :REM Error constants
ER_NUMBERTOOBIG%=&80000201             :REM Error constants
ER_DIVBYZERO%=&80000202                :REM Error constants
ER_NUMBERTOOSMALL%=&80000203           :REM Error constants
ER_ACCURACYLOST%=&80000204             :REM Error constants
MenuOpen%=0                            :REM Handle of current menu
AppHandle%=0                           :REM Application Task Handle
IconHandle%=0                          :REM Iconbar icon handle
AppQuit%=FALSE                         :REM Poll release variable
OwnFocus%=FALSE                        :REM Application owns caret
OwnClipboard%=FALSE                    :REM Application owns clipboard
FirstClick%=TRUE                       :REM Logs first click on Iconbar icon
DIM Filename% 255                      :REM Buffer for copied text string
CopyText$=""                           :REM Stores text to be copied
i%=0                                   :REM General counter
DIM endbuf% -1:curbuf%=ErrorBlock%
DIM indbuf% 128
ind=indbuf%
IF VAL STR$(1<<31)<>(1<<31) THEN ERROR EXT 1,FNmess_get("E8"):END:REM Need BASIC 64
Block%!0=&10:Block%!4=&502:Block%!8=&F:Block%!12=&1:Block%!16=&2
Block%!20=&A:Block%!24=0
SYS "Wimp_Initialise",300,!TaskID%,FNmess_get("_TaskName"),Block% TO WimpVersion%,AppHandle%
Block%!0=-1:Block%!4=0:Block%!8=0:Block%!12=68:Block%!16=68
Block%!20=&3002:$(Block%+24)="!scicalc"
SYS "Wimp_CreateIcon",,Block% TO IconHandle%
ON ERROR PROCwimp_error
PROCwimp_sprites
WindowArea%=FNwimp_opentemplates("<SciCalc$Dir>.Templates")
FOR i%=0 TO 255 STEP 4:WindowFonts%!i%=0:NEXT
CalWin%=FNwimp_loadtemplate("Calculator",WindowArea%)
InfoWin%=FNwimp_loadtemplate("Info",WindowArea%)
ChoiceWin%=FNwimp_loadtemplate("Choices",WindowArea%)
PROCwimp_menus
SYS "Font_FindFont",,"Homerton.Medium",12*16,12*16,0,0 TO DisplayFont%
SYS "Font_SetFontColours",DisplayFont%,0,7
IF Option_Type%=0 THEN CalcSize%=CALC_SMALL% ELSE CalcSize%=CALC_BIG%
ENDPROC

DEF PROCwimp_poll
REM Main poll loop
LOCAL reason%
SYS "Wimp_Poll",1,Block% TO reason%
CASE reason% OF
 WHEN 1:REM Window Redraw
  IF Block%!0=CalWin% THEN
   PROCcalwin_redraw
  ENDIF
 WHEN 2:REM Window Open
  PROCwimp_openwindow(Block%!0,Block%!4,Block%!8,Block%!12,Block%!16,Block%!20,Block%!24,Block%!28,FALSE)
 WHEN 3:REM Window Close
  SYS "Wimp_CloseWindow",,Block%
 WHEN 6:REM Mouse Click
  CASE Block%!12 OF
   WHEN CalWin%:
    PROCcalwin_click(Block%!16,Block%!8)
    IF ErrorFlag% THEN PROCcalc_error
   WHEN ChoiceWin%:
    PROCchoicewin_click(Block%!16,Block%!8)
   WHEN -2:
    PROCiconbar_click(Block%!8)
  ENDCASE
 WHEN 8:REM Key pressed
  CASE Block%!0 OF
   WHEN CalWin%:
    PROCcalwin_keypress(Block%!24)
    IF ErrorFlag% THEN PROCcalc_error
   WHEN ChoiceWin%:
    PROCchoicewin_keypress(Block%!24)
  ENDCASE
 WHEN 9:REM Menu selection
  PROCwimp_menuselect(Block%)
 WHEN 17,18:REM Wimp messages
  PROCwimp_messages(Block%)
ENDCASE
ENDPROC

DEF PROCwimp_error
REM Report fatal errors and close
SYS "Wimp_DragBox",,-1
!ErrorBlock%=ERR
$(ErrorBlock%+4)=REPORT$+" "+FNmess_getargs("EL",STR$ ERL,"")+CHR$(0)
SYS "Wimp_ReportError",ErrorBlock%,1,FNmess_get("_TaskName")
SYS "Wimp_CloseDown":END
ENDPROC

DEF PROCwimp_menuselect (Block%)
REM Handle menu selections and tick/untick selections
CASE MenuOpen% OF
 WHEN InfoMenu%:
  IF Block%!0=1 THEN OSCLI "Filer_Run <SciCalc$Dir>.!Help"
  IF Block%!0=2 THEN PROCchoicewin_init
  IF Block%!0=3 THEN AppQuit%=TRUE
 WHEN TrigOptMenu%:
  FOR i%=0 TO 2:PROCwimp_settick(TrigOptMenu%,i%,FALSE):NEXT
  PROCwimp_settick(TrigOptMenu%,Block%!0,TRUE)
  CASE Block%!0 OF
   WHEN 0:PROCwimp_seticontext(ChoiceWin%,8,FNmess_get("Rad"))
   WHEN 1:PROCwimp_seticontext(ChoiceWin%,8,FNmess_get("Deg"))
   WHEN 2:PROCwimp_seticontext(ChoiceWin%,8,FNmess_get("Grad"))
  ENDCASE
 WHEN BaseOptMenu%:
  FOR i%=0 TO 3:PROCwimp_settick(BaseOptMenu%,i%,FALSE):NEXT
  PROCwimp_settick(BaseOptMenu%,Block%!0,TRUE)
  CASE Block%!0 OF
   WHEN 0:PROCwimp_seticontext(ChoiceWin%,5,FNmess_get("Dec"))
   WHEN 1:PROCwimp_seticontext(ChoiceWin%,5,FNmess_get("Bin"))
   WHEN 2:PROCwimp_seticontext(ChoiceWin%,5,FNmess_get("Oct"))
   WHEN 3:PROCwimp_seticontext(ChoiceWin%,5,FNmess_get("Hex"))
  ENDCASE
 WHEN CalcMenu%:
  IF Block%!0=0 AND Block%!4=0 AND CalcSize%=CALC_BIG% THEN
   PROCwimp_settick(ViewMenu%,0,TRUE):PROCwimp_settick(ViewMenu%,1,FALSE)
   Block%!0=CalWin%:SYS "Wimp_GetWindowState",,Block%
   PROCcalwin_resize(Block%!4,Block%!8,460)
  ENDIF
  IF Block%!0=0 AND Block%!4=1 AND CalcSize%=CALC_SMALL% THEN
   PROCwimp_settick(ViewMenu%,0,FALSE):PROCwimp_settick(ViewMenu%,1,TRUE)
   Block%!0=CalWin%:SYS "Wimp_GetWindowState",,Block%
   PROCcalwin_resize(Block%!4,Block%!8,0)
  ENDIF
  IF Block%!0=1 AND Block%!4=0 THEN PROCcalc_copy(Entry$)
  IF Block%!0=1 AND Block%!4=1 THEN PROCcalc_copy(Summary$)
  IF Block%!0=0 AND Block%!4=2 THEN PROCcalwin_pos
  IF Block%!0=2 THEN OSCLI "Filer_Run <SciCalc$Dir>.!Help"
ENDCASE
SYS "Wimp_GetPointerInfo",,Block%
IF Block%!8 AND 1 THEN SYS "Wimp_CreateMenu",,MenuOpen%
ENDPROC

DEF PROCwimp_settick (menu%,item%,type%)
REM Ticks or unticks a menu item
LOCAL menuptr%
menuptr%=menu%+28+(item%*24)
IF type%=TRUE THEN menuptr%?0=menuptr%?0 OR (1<<0)
IF type%=FALSE THEN menuptr%?0=menuptr%?0 AND NOT (1<<0)
ENDPROC

DEF PROCwimp_messages(Block%)
REM Handle Wimp Messages
LOCAL helptext$,target%,file%
CASE Block%!16 OF
 WHEN MESSAGE_QUIT%:
  AppQuit%=TRUE
 WHEN MESSAGE_HELPREQUEST%:
  helptext$=FNwimp_gethelp
  IF LEN(helptext$)>0 THEN
   Block%!0=256
   Block%!12=Block%!8
   Block%!16=MESSAGE_HELPREPLY%
   $(Block%+20)=helptext$+CHR$0
   SYS "Wimp_SendMessage",17,Block%,Block%!4
  ENDIF
 WHEN MESSAGE_CLAIMENTITY%:
  IF Block%!4<>AppHandle% THEN
   IF Block%!20 AND (1<<0) THEN OwnFocus%=FALSE
   IF Block%!20 AND (1<<1) THEN OwnFocus%=FALSE
   IF Block%!20 AND (1<<2) THEN OwnClipboard%=FALSE
  ENDIF
 WHEN MESSAGE_DATAREQUEST%:
  IF (Block%!36 AND (1<<2)) AND OwnClipboard% THEN
   target%=Block%!4
   Block%!12=Block%!8 
   Block%!16=MESSAGE_DATASAVE%
   Block%!36=LEN(CopyText$)
   Block%!40=&FFF
   $(Block%+44)="CopyText"+CHR$(0)
   SYS "Wimp_SendMessage",17,Block%,target%
  ENDIF
 WHEN MESSAGE_DATASAVEACK%:
  $(Filename%)=CopyText$+CHR$(0)
  SYS "OS_File",10,"<Wimp$Scrap>",Block%!40,,Filename%,Filename%+LEN(CopyText$)
  target%=Block%!4
  Block%!12=Block%!8
  Block%!16=MESSAGE_DATALOAD%
  SYS "Wimp_SendMessage",17,Block%,target%
 WHEN MESSAGE_SAVEDESKTOP%:
  file%=Block%!20
  SYS "XOS_ReadVarVal","SciCalc$Dir",Block%,256,0,3 TO ,,len%
  Block%?len%=13
  BPUT#file%,"Run "+$(Block%)
ENDCASE
ENDPROC

DEF FNwimp_gethelp
LOCAL text$
text$=""
CASE Block%!32 OF
 WHEN -2:
  IF Block%!36=IconHandle% THEN text$=FNmess_get("H1")
 WHEN InfoWin%:
  text$=FNmess_get("H2")
 WHEN CalWin%:
  IF ErrorFlag% THEN
   text$=FNmess_get("H6")
  ELSE
   CASE Block%!36 OF
    WHEN 0,1,2,3,4,5,6,7,8,9:
     text$=FNmess_getargs("K"+STR$(Block%!36),STR$(Block%!36),"")
    WHEN 70,71,72,73:
     text$=FNmess_getargs("K"+STR$(Block%!36),FNmess_get("B"+STR$(Base%)),"")
    WHEN 76,77,78:
     text$=FNmess_getargs("K"+STR$(Block%!36),FNmess_get("T"+STR$(Trig%)),"")
    WHEN 48:
     text$=FNmess_get("D"+STR$(-Bracket%))
    WHEN 64,65,66,67,68,69:
     text$=FNmess_getargs("K"+STR$(Block%!36),STR$(Block%!36-54),"")
   OTHERWISE:
     IF Block%!36>0 THEN text$=FNmess_get("K"+STR$(Block%!36))
   ENDCASE
  ENDIF
  IF text$="" THEN text$=FNmess_get("H3")
 WHEN ChoiceWin%:
  CASE Block%!36 OF
   WHEN 2,3,5,6,8,9,14,15,18,11,10:
    text$=FNmess_getargs("C"+STR$(Block%!36),STR$(Block%!36),"")
  ENDCASE
 OTHERWISE:
  SYS "Wimp_GetMenuState",1,ErrorBlock%,Block%!32,Block%!36
  CASE MenuOpen% OF
   WHEN InfoMenu%:
    text$=FNmess_getargs("M"+STR$(!ErrorBlock%),STR$(!ErrorBlock%),"")
   WHEN CalcMenu%:
    IF ErrorBlock%!0>-1 THEN text$=FNmess_getargs("M"+STR$(!ErrorBlock%+4),STR$(!ErrorBlock%+4),"")
    IF ErrorBlock%!4>-1 THEN
     IF ErrorBlock%!0=0 THEN text$=FNmess_getargs("M"+STR$(ErrorBlock%!4+7),STR$(!ErrorBlock%+6),"")
     IF ErrorBlock%!0=1 THEN text$=FNmess_getargs("M"+STR$(ErrorBlock%!4+10),STR$(!ErrorBlock%+6),"")
    ENDIF
   WHEN BaseOptMenu%:
    text$=FNmess_getargs("M"+STR$(!ErrorBlock%+11),STR$(!ErrorBlock%+12),"")
   WHEN TrigOptMenu%:
    text$=FNmess_getargs("M"+STR$(!ErrorBlock%+15),STR$(!ErrorBlock%+16),"")
  ENDCASE
ENDCASE
=text$

DEF PROCwimp_sprites
REM Load application sprites
LOCAL spritefile%,spritesize%,spritepath$,obj%,type%
LOCAL squashsize%,work%,source%,result%
spritepath$="<SciCalc$Dir>.Sprites"
IF Option_Theme%=TRUE THEN
 REM See if there are sprites for the currently configured theme
 SYS "XOS_File",17,"<SciCalc$Dir>.<Wimp$IconTheme>Sprites" TO obj%
 IF obj%=1 THEN spritepath$="<SciCalc$Dir>.<Wimp$IconTheme>Sprites"
ENDIF
SYS "XOS_File",23,spritepath$ TO,,,,,,type%
spritefile%=OPENIN spritepath$
SYS "OS_GBPB",4,spritefile%,Block%,8
IF (type%=&FCA) AND (!Block%=&48535153) THEN
 REM Squashed sprites
 spritesize%=Block%!4
 squashsize%=EXT#spritefile% - 20:REM Omit header
ELSE
 spritesize%=EXT#spritefile%
 CLOSE#spritefile%
ENDIF
DIM SpriteArea% spritesize%+4
!SpriteArea%=spritesize%+4:SpriteArea%!8=1
IF (type%=&FCA) AND (!Block%=&48535153) THEN
 SYS "Squash_Decompress",8,-1 TO work%
 SYS "OS_Module",6,,,work% TO ,,work%
 SYS "OS_Module",6,,,squashsize% TO ,,source%
 REM Load and decompress it in one gulp
 SYS "OS_GBPB",3,spritefile%,source%,squashsize%,20
 SYS "XSquash_Decompress",4,work%,source%,squashsize%,SpriteArea%+4,spritesize% TO result%
 SYS "OS_Module",7,,source%
 SYS "OS_Module",7,,work%
 CLOSE#spritefile%
 IF result%<>0 THEN ERROR EXT 1,FNmess_get("E9"):END:REM Can't unsquash sprites
ELSE
 SYS "OS_SpriteOp",&109,SpriteArea%
 SYS "OS_SpriteOp",&10A,SpriteArea%,spritepath$
ENDIF
ENDPROC

DEF FNwimp_opentemplates (path$)
REM Opens a Template file and creates buffer for total indirected data
LOCAL size%,largest%,next%,indarea%,indsize%,totalindsize%
SYS "Wimp_OpenTemplate",,path$
largest%=0:totalindsize%=0
$WindowName%="*"
SYS "Wimp_LoadTemplate",,0,,,,WindowName%,0 TO ,size%,indsize%,,,,next%
IF size%>largest% THEN largest%=size%
IF indsize%>0 THEN totalindsize%=totalindsize%+indsize%
WHILE next%<>0
 $WindowName%="*"
 SYS "Wimp_LoadTemplate",,0,,,,WindowName%,next% TO ,size%,indsize%,,,,next%
 IF next%<>0 THEN
  IF size%>largest% THEN largest%=size%
  IF indsize%>0 THEN totalindsize%=totalindsize%+indsize%
 ENDIF
ENDWHILE
DIM indarea% totalindsize%+16
DIM WindowBlock% largest%+16
WindowIndPtr%=indarea%
=indarea%

DEF FNwimp_loadtemplate (name$,indarea%)
REM Loads a window definition from a Template file
LOCAL indsize%
$WindowName%=name$
SYS "Wimp_LoadTemplate",,0,,,,WindowName% TO ,,indsize%
SYS "Wimp_LoadTemplate",,WindowBlock%,WindowIndPtr%,WindowIndPtr%+indsize%,WindowFonts%,WindowName% TO ,,WindowIndPtr%
WindowBlock%!64=SpriteArea%
SYS "Wimp_CreateWindow",,WindowBlock% TO window%
=window%

DEF PROCwimp_menus
REM Create menus
DIM InfoMenu% 28+(24*4)
PROCwimp_makemenu(InfoMenu%,FNmess_get("_TaskName"))
PROCwimp_additem(InfoMenu%,0,0,InfoWin%,FNmess_get("Info"))
PROCwimp_additem(InfoMenu%,1,0,-1,FNmess_get("HelpIB")):REM No focus for this menu, so can't accept F1 for help
PROCwimp_additem(InfoMenu%,2,0,-1,FNmess_get("Choices"))
PROCwimp_additem(InfoMenu%,3,128,-1,FNmess_get("Quit"))
DIM BaseOptMenu% 28+(24*4)
PROCwimp_makemenu(BaseOptMenu%,FNmess_get("Base"))
PROCwimp_additem(BaseOptMenu%,0,0,-1,FNmess_get("Dec"))
PROCwimp_additem(BaseOptMenu%,1,0,-1,FNmess_get("Bin"))
PROCwimp_additem(BaseOptMenu%,2,0,-1,FNmess_get("Oct"))
PROCwimp_additem(BaseOptMenu%,3,128,-1,FNmess_get("Hex"))
DIM TrigOptMenu% 28+(24*3)
PROCwimp_makemenu(TrigOptMenu%,FNmess_get("Trig"))
PROCwimp_additem(TrigOptMenu%,0,0,-1,FNmess_get("Rad"))
PROCwimp_additem(TrigOptMenu%,1,0,-1,FNmess_get("Deg"))
PROCwimp_additem(TrigOptMenu%,2,128,-1,FNmess_get("Grad"))
DIM ViewMenu% 28+(24*3)
PROCwimp_makemenu(ViewMenu%,FNmess_get("View"))
PROCwimp_additem(ViewMenu%,0,0,-1,FNmess_get("Standard"))
PROCwimp_additem(ViewMenu%,1,2,-1,FNmess_get("Scientific"))
PROCwimp_additem(ViewMenu%,2,128,-1,FNmess_get("WinPos"))
DIM EditMenu% 28+(24*2)
PROCwimp_makemenu(EditMenu%,FNmess_get("Edit"))
PROCwimp_additem(EditMenu%,0,0,-1,FNmess_get("CopyV"))
PROCwimp_additem(EditMenu%,1,128,-1,FNmess_get("CopyS"))
DIM CalcMenu% 28+(24*3)
PROCwimp_makemenu(CalcMenu%,FNmess_get("_TaskName"))
PROCwimp_additem(CalcMenu%,0,0,ViewMenu%,FNmess_get("View"))
PROCwimp_additem(CalcMenu%,1,2,EditMenu%,FNmess_get("Edit"))
PROCwimp_additem(CalcMenu%,2,128,-1,FNmess_get("Help"))
ENDPROC

DEF PROCwimp_makemenu (menu%,title$)
REM Create a menu
$(menu%)=title$
menu%!12=&00070207:menu%!16=0:menu%!20=44:menu%!24=0
ENDPROC

DEF PROCwimp_additem (menu%,item%,flags%,link%,text$)
LOCAL max%,buf%
REM Add a menu item
menu%!(28+(item%*24))=flags%:menu%!(28+(item%*24)+4)=link%
IF LEN(text$)>12 THEN
 REM Indirected with empty validation
 DIM buf% LEN(text$)+1
 menu%!(28+(item%*24)+8)=&07000121
 menu%!(28+(item%*24)+12)=buf%
 menu%!(28+(item%*24)+16)=buf%+LEN(text$):REM Point at the CR
 menu%!(28+(item%*24)+20)=LEN(text$)+1
 $buf%=text$
ELSE
 menu%!(28+(item%*24)+8)=&07000021
 $(menu%+28+(item%*24)+12)=text$
ENDIF
REM Update max width for old Wimp in system font
max%=16*(1+LEN(text$))
IF menu%!16<max% THEN menu%!16=max%
ENDPROC

DEF PROCwimp_openwindow (window%,xmin%,ymin%,xmax%,ymax%,xscroll%,yscroll%,bhandle%,focus%)
REM Respond to an OpenWindow event from the Desktop
Block%!0=window%
SYS "Wimp_GetWindowState",,Block%
IF window%=CalWin% AND (Block%!32 AND 1<<19) THEN
 xmin%=Block%!4:ymin%=Block%!8
 PROCcalwin_resize(xmin%,ymin%,xscroll%)
ELSE
 IF xmin%<>0 THEN
  Block%!0=window%
  Block%!4=xmin%:Block%!8=ymin%
  Block%!12=xmax%:Block%!16=ymax%
  Block%!20=xscroll%:Block%!24=yscroll%
 ELSE
  Block%!0=window%
  SYS "Wimp_GetWindowState",,Block%
 ENDIF
 Block%!28=bhandle%
 SYS "Wimp_OpenWindow",,Block%
ENDIF
IF focus%=TRUE THEN SYS "Wimp_SetCaretPosition",window%,-1,0,0,-1,-1
ENDPROC

DEF PROCwimp_claimcaret (window%,icon%,visible%)
REM Claim the OS caret
IF visible%=TRUE THEN visible%=1 ELSE visible%=0
SYS "Wimp_SetCaretPosition",window%,icon%,0,0,1<<25
IF OwnFocus%=FALSE THEN
 Block%!0=24:Block%!12=0:Block%!16=MESSAGE_CLAIMENTITY%:Block%!20=3
 SYS "Wimp_SendMessage",17,Block%,0
ENDIF
OwnFocus%=TRUE
ENDPROC

DEF PROCwimp_showicon (window%,icon%)
REM Make an icon visible
PROCwimp_updateicon(window%,icon%,0,&00800080)
ENDPROC

DEF PROCwimp_hideicon (window%,icon%)
REM Make an icon invisible
PROCwimp_updateicon(window%,icon%,&00800080,&00800080)
ENDPROC

DEF PROCwimp_updateicon (window%,icon%,eor%,clr%)
REM Perform an action on an icon block
Block%!0=window%:Block%!4=icon%:Block%!8=eor%:Block%!12=clr%
SYS "Wimp_SetIconState",,Block%
ENDPROC

DEF PROCwimp_seticontext (window%,icon%,text$)
REM Set the indirected text label in an icon
Block%!0=window%:Block%!4=icon%
SYS "Wimp_GetIconState",,Block%
$(Block%!28)=text$
Block%!8=0:Block%!12=0
SYS "Wimp_SetIconState",,Block%
ENDPROC

DEF PROCwimp_selecticon (window%,icon%,action%)
REM Selects icon
Block%!0=window%:Block%!4=icon%
SYS "Wimp_GetIconState",,Block%
CASE action% OF
 WHEN FALSE:IF (Block%!24 AND (1<<21)) THEN
   Block%!8=0:Block%!12=1<<21
   SYS "Wimp_SetIconState",,Block%
  ENDIF
 WHEN TRUE:IF NOT(Block%!24 AND (1<<21)) THEN
   Block%!8=1<<21:Block%!12=1<<21
   SYS "Wimp_SetIconState",,Block%
  ENDIF
ENDCASE
ENDPROC

DEF FNwimp_getselect (window%,icon%)
REM Returns TRUE if icon is selected, FALSE if not
Block%!0=window%:Block%!4=icon%
SYS "Wimp_GetIconState",,Block%
IF (Block%!24 AND (1<<21)) THEN =TRUE ELSE =FALSE

DEF PROCwimp_shadeicon (window%,icon%,action%)
REM Shades icon
Block%!0=window%:Block%!4=icon%
SYS "Wimp_GetIconState",,Block%
CASE action% OF
 WHEN FALSE:IF (Block%!24 AND (1<<22)) THEN
   Block%!8=0:Block%!12=1<<22
   SYS "Wimp_SetIconState",,Block%
  ENDIF
 WHEN TRUE:IF NOT(Block%!24 AND (1<<22)) THEN
   Block%!8=1<<22:Block%!12=1<<22
   SYS "Wimp_SetIconState",,Block%
  ENDIF
ENDCASE
ENDPROC

DEF FNwimp_gettick (menu%,item%)
REM Returns whether a menu item is ticked
LOCAL menuptr%
menuptr%=menu%+28:menuptr%+=item%*24
IF menuptr%?0 AND (1<<0) THEN =TRUE ELSE =FALSE

@


4.15
log
@Handful of SciCalc fixes
Detail:
  Some functions would be executed multiple times as some of the buttons had Click/Drag enabled. Fixes problem reported https://www.riscosopen.org/forum/forums/4/topics/3630.
  Leading zero in negative numbers would propagate during calculations. Fixes problem reported https://www.riscosopen.org/forum/forums/4/topics/3614
  The MR function does not always display correctly. It needs to replace the summary bar text if a sum is complete, and it also needs to retain the number prefix if in a non-decimal base.
  Rounding errors creeping in in some circumstances caused by rogue @@% variables in the wrong places and with the wrong values. Fixes ticket #412.
  UI confusion with a non "sticky" option field in the choices dialogue, moved to the View menu instead. Fixes ticket #413.
  Help updated to reflect the changes described.
  Removed some unused Message translations.
Admin:
  Submission from Chris Wraight.

Version 0.86. Tagged as 'SciCalc-0_86'
@
text
@d567 9
@


4.14
log
@Restore some lost 3.10 compatibility
A handful of trivial mistakes stopped this working properly on RISC OS 3.10 as it always used to.
Messages:
 Correct the justification of Copy value/Copy summary for the system font (the Wimp right justifies when in outline font).
!Runimage:
 Change the redraw rectangle to cover the summary line as well as the result line, otherwise the rubout goes wrong on Wimp 3.16. This is harmless on later Wimps as it just results in a duplicate redraw rectangle when the summary icon is updated.
 Calculate the maximum menu width in system font units rather than just using 80 all the time.
 Change PROCwimp_additem to create indirected icons for text longer than 12 letters, so all the entries use that PROC so the width is calculated properly (indirected icons were written out longhand before).
Tested on an A5000.

Version 0.85. Tagged as 'SciCalc-0_85'
@
text
@d410 18
d480 1
a480 2
PROCwimp_selecticon(ChoiceWin%,20,Option_Open%)
PROCwimp_selecticon(ChoiceWin%,18,FALSE)
d482 1
a482 1
PROCwimp_openwindow(ChoiceWin%,Block%!0-400,150,Block%!0+178,970,0,0,-1,TRUE)
d501 1
a501 1
LOCAL file%,type$,theme$,base$,trig$,base%,trig%,winx%,winy%,obj%,open$
d522 2
d536 1
a536 1
   IF FNwimp_getselect(ChoiceWin%,20) THEN open$="Yes" ELSE open$="No"
a553 6
   IF FNwimp_getselect(ChoiceWin%,18) THEN
    Block%!0=CalWin%:SYS "Wimp_GetWindowState",,Block%
    winx%=Block%!4:winy%=Block%!8
   ELSE
    winx%=Option_WinX%:winy%=Option_WinY%
   ENDIF
a563 2
    BPUT#file%,"WinX:"+STR$winx%
    BPUT#file%,"WinY:"+STR$winy%
d614 1
a614 1
@@%="+G10"+DecimalPoint$+"10"     :REM Display format
d662 1
a662 1
IF((flags% AND1)=0) AND(file%<>0) THEN
d684 17
a704 3
    WHEN "Open":
     IF value$="Yes" THEN Option_Open%=TRUE
     IF value$="No" THEN Option_Open%=FALSE
d770 2
a771 1
 IF Entry$="0" THEN Entry$=key$ ELSE Entry$+=key$
d825 1
a825 1
PROCcalc_summarise("",Entry$,SB_REPLACE%)
a980 2
LOCAL factorial,temp,ser,level%
level%=HiStack%
d1051 1
a1051 1
  NumberComplete%=TRUE:OpStack%=FALSE
d1054 2
a1055 1
  PROCcalc_summarise("",Entry$,type%)
a1139 2
LOCAL @@%
@@%="+G10.10"
d1164 7
a1170 2
  Summary$=Summary$+val$
  SummaryEntry$=SummaryEntry$+val$
d1276 2
a1277 1
LOCAL temp$
a1431 2
LOCAL @@%
@@%="+G10.10"
d1536 1
d1627 1
a1627 1
   WHEN 2,3,5,6,8,9,14,15,20,18,11,10:
d1639 1
a1639 1
     IF ErrorBlock%!0=1 THEN text$=FNmess_getargs("M"+STR$(ErrorBlock%!4+9),STR$(!ErrorBlock%+6),"")
d1642 1
a1642 1
    text$=FNmess_getargs("M"+STR$(!ErrorBlock%+11),STR$(!ErrorBlock%+11),"")
d1644 1
a1644 1
    text$=FNmess_getargs("M"+STR$(!ErrorBlock%+15),STR$(!ErrorBlock%+15),"")
d1731 1
a1731 1
PROCwimp_additem(BaseOptMenu%,0,1,-1,FNmess_get("Dec"))
d1738 1
a1738 1
PROCwimp_additem(TrigOptMenu%,1,1,-1,FNmess_get("Deg"))
d1740 1
a1740 1
DIM ViewMenu% 28+(24*2)
d1742 3
a1744 2
PROCwimp_additem(ViewMenu%,0,1,-1,FNmess_get("Standard"))
PROCwimp_additem(ViewMenu%,1,128,-1,FNmess_get("Scientific"))
d1747 1
a1747 1
PROCwimp_additem(EditMenu%,0,1,-1,FNmess_get("CopyV"))
@


4.13
log
@Clipboard ownership fix
SciCalc would reply to clipboard requests even if someone else owned it, leading to the wrong thing being pasted depending on the order applications were running.
Fix submitted by Chris Wraight.
Makefile changed to use centralised BasCrunch script.

Version 0.84. Tagged as 'SciCalc-0_84'
@
text
@d285 1
a285 1
SYS "Wimp_ForceRedraw",CalWin%,0,-60,800,0
d342 1
a342 1
SYS "Wimp_ForceRedraw",CalWin%,0,-60,800,0
d1716 1
a1716 1
DIM EditMenu% 28+(24*2),mtext% 24,mtext2% 24,mval% 2
d1718 2
a1719 14
$(mtext%)=FNmess_get("CopyV"):$(mval%)=""
EditMenu%!(28)=0
EditMenu%!(28+4)=-1
EditMenu%!(28+8)=&07000121
EditMenu%!(28+12)=mtext%
EditMenu%!(28+16)=mval%
EditMenu%!(28+20)=24
$(mtext2%)=FNmess_get("CopyS"):$(mval%)=""
EditMenu%!(28+24)=128
EditMenu%!(28+24+4)=-1
EditMenu%!(28+24+8)=&07000121
EditMenu%!(28+24+12)=mtext2%
EditMenu%!(28+24+16)=mval%
EditMenu%!(28+24+20)=24
d1730 1
a1730 1
menu%!12=&00070207:menu%!16=80:menu%!20=44:menu%!24=0
d1734 1
d1737 15
a1751 1
menu%!(28+(item%*24)+8)=&07000021:$(menu%+28+(item%*24)+12)=text$
d1805 1
a1805 1
REM Set the text label in an icon
@


4.12
log
@Accept Ctrl-F2 as close in main calculator window, not just the choices dialogue
Style guide page 68.

Version 0.83. Tagged as 'SciCalc-0_83'
@
text
@d381 1
a381 1
FOR i%=70 TO 73:PROCwimp_selecticon(CalWin%,i%,FALSE)
d383 1
a383 1
FOR i%=76 TO 78:PROCwimp_selecticon(CalWin%,i%,FALSE)
d1194 8
a1201 3
Block%!0=24:Block%!12=0
Block%!16=MESSAGE_CLAIMENTITY%:Block%!20=7
SYS "Wimp_SendMessage",17,Block%,0
d1394 2
a1395 1
AppFocus%=FALSE                        :REM Application owns caret/clipboard
d1540 3
a1542 1
   IF Block%!20>0 AND Block%!20<4 THEN AppFocus%=FALSE
d1545 1
a1545 1
  IF Block%!36 AND (1<<2) THEN
d1547 1
a1547 1
   Block%!12=Block%!8
d1778 1
a1778 1
IF AppFocus%=FALSE THEN
d1782 1
a1782 1
AppFocus%=TRUE
@


4.11
log
@Fix to operator precedence for multiply
At the point precedence is evaluated the multiply symbol has not yet been substituted for "*", this change restores that.
Submission from Chris Wraight

Version 0.82. Tagged as 'SciCalc-0_82'
@
text
@d337 1
@


4.10
log
@Add button set for Raspberry theme
Submission from Chris Wraight:
* Button sprites to match Steel window furniture in Raspberry theme
* Missing 'NEXT' statement added (line 191)
* Make some more of the button redraw conditional to reduce flicker
* Pop back in the trig mode/base buttons if selected with the adjust mouse button
* Dead functions grey/ungreyicon deleted
And other minor changes:
* Add support for squashed sprite files now the buttons are a bit bloaty
* Add ellipsis to the "Help..." iconbar menu item
* Program info box resized to match other built in apps
* Recovered 8bpp paletted sprites for the default theme, although the 16bpp ones are smaller, the Wimp can't fade those in the case of a calculation error - but as they can now be squashed the space saving is moot

Version 0.81. Tagged as 'SciCalc-0_81'
@
text
@d1102 1
a1102 1
 WHEN "*","/","DIV","MOD":pos%=3
@


4.9
log
@Addition of button sprites for Ursula and Morris4
Morris4 buttons scraped off a RISC OS 3 disc, missing sprites (for example the base buttons) created or renamed as required.
Ursula buttons generated from Draw file masters.
Code changes
 Icon show/hide code revisited to allow sprite sets to omit the 'p' suffixed versions (previously if these were missing then the button underneath would show through).
 Free any unused memory once the sprites are loaded
 Don't redraw when pressing the mode buttons but not actually changing mode (less flicker)
Templates and default sprites now use expon/exponp and exp/expp for e^x and Exp.

Version 0.80. Tagged as 'SciCalc-0_80'
@
text
@a131 1
   FOR i%=53 TO 63:PROCwimp_showicon(CalWin%,i%):NEXT
d137 1
a146 1
   FOR i%=53 TO 63:PROCwimp_showicon(CalWin%,i%):NEXT
d151 1
a159 1
   FOR i%=53 TO 63:PROCwimp_showicon(CalWin%,i%):NEXT
d165 1
d188 1
a188 1
 FOR i%=71 TO 73:PROCwimp_selecticon(CalWin%,i%,FALSE)
d281 3
d1614 2
a1615 1
LOCAL spritefile%,spritesize%,spritepath$,obj%
d1622 1
d1624 26
a1649 5
spritesize%=EXT#spritefile%+16:CLOSE#spritefile%
DIM SpriteArea% spritesize%
!SpriteArea%=spritesize%:SpriteArea%!8=1
SYS "OS_SpriteOp",&109,SpriteArea%
SYS "OS_SpriteOp",&10A,SpriteArea%,spritepath$
a1785 10
DEF PROCwimp_greyicon (window%,icon%)
REM Hide an icon
PROCwimp_updateicon(window%,icon%,&00400000,&00400002)
ENDPROC

DEF PROCwimp_ungreyicon (window%,icon%)
REM Reveal an icon
PROCwimp_updateicon(window%,icon%,2,&00400002)
ENDPROC

@


4.8
log
@Fix for incorrect results when decimal separator isn't a period

* SciCalc uses a comma (or other local decimal separator) in some locales, as defined by Territory_ReadSymbols. This was being used in calculations as well as the display strings, leading to errors. @@% is now defined locally in PROCcalc_evaluate and PROCwimp_init.
* Previous versions used OS_Heap to allocate space for loading templates. This has been replaced by a DIM, and three functions have been removed.
* SciCalc-0_77 made some changes to the Interactive Help handling. This introduced two glitches: the help text returned for the Iconbar menu entries was incorrect, and the divider in the main menu was returning help text. Minor alterations to the Messages file and PROCwimp_gethelp to fix.

Fixes ticket #326. Changes from Chris Wraight.

Version 0.78. Tagged as 'SciCalc-0_78'
@
text
@d36 1
d123 1
a123 1
   FOR i%=2 TO 10:PROCwimp_showicon(CalWin%,i%):NEXT
d125 1
a125 2
   FOR i%=34 TO 51:PROCwimp_showicon(CalWin%,i%): NEXT
   PROCwimp_showicon(CalWin%,48):PROCwimp_showicon(CalWin%,27)
d133 2
a134 2
   FOR i%=2 TO 10:PROCwimp_hideicon(CalWin%,i%):NEXT
   FOR i%=34 TO 51:PROCwimp_hideicon(CalWin%,i%):NEXT
a136 1
   PROCwimp_hideicon(CalWin%,27)
d146 1
a146 1
   FOR i%=8 TO 10:PROCwimp_hideicon(CalWin%,i%):NEXT
d148 1
a148 1
   FOR i%=34 TO 51:PROCwimp_hideicon(CalWin%,i%):NEXT
a150 1
   PROCwimp_hideicon(CalWin%,27)
d159 1
a159 1
   FOR i%=2 TO 9:PROCwimp_showicon(CalWin%,i%):NEXT
d161 1
a161 1
   FOR i%=34 TO 51:PROCwimp_hideicon(CalWin%,i%):NEXT
d164 1
a164 1
   PROCwimp_hideicon(CalWin%,27):PROCwimp_hideicon(CalWin%,10)
d272 4
a275 4
  WHEN 70:OldBase%=Base%:Base%=BASE_DEC%:PROCcalwin_refresh(0)
  WHEN 71:OldBase%=Base%:Base%=BASE_BIN%:PROCcalwin_refresh(0)
  WHEN 72:OldBase%=Base%:Base%=BASE_OCT%:PROCcalwin_refresh(0)
  WHEN 73:OldBase%=Base%:Base%=BASE_HEX%:PROCcalwin_refresh(0)
@


4.7
log
@Save some space
Regenerate the button sprites as 16bpp, due to the small button size it's actually smaller than a paletted 8bpp one.
Drop the WimpSlot back down a bit.
Abbreviate some message tokens, using comments in the source code (which get stripped anyway).
Fix makefile to clean intermediate properly.
Rename percent button to not use '%' symbol so the sprites can be extracted as valid RISC OS filenames.

Version 0.77. Tagged as 'SciCalc-0_77'
@
text
@d584 3
a586 3
TRIG_RAD%=1                  :REM Trig Constants
TRIG_DEG%=2                  :REM Trig Constants
TRIG_GRAD%=3                 :REM Trig Constants
d600 1
a600 1
Trig%=TRIG_DEG%              :REM Trig type
d1113 2
d1317 2
d1321 2
d1395 2
a1404 1
PROCheap_init
d1598 1
a1598 1
    text$=FNmess_getargs("M"+STR$(!ErrorBlock%+3),STR$(!ErrorBlock%+3),"")
d1600 2
a1601 2
     IF ErrorBlock%!0=0 THEN text$=FNmess_getargs("M"+STR$(ErrorBlock%!4+6),STR$(!ErrorBlock%+6),"")
     IF ErrorBlock%!0=1 THEN text$=FNmess_getargs("M"+STR$(ErrorBlock%!4+8),STR$(!ErrorBlock%+6),"")
d1604 1
a1604 1
    text$=FNmess_getargs("M"+STR$(!ErrorBlock%+10),STR$(!ErrorBlock%+10),"")
d1606 1
a1606 1
    text$=FNmess_getargs("M"+STR$(!ErrorBlock%+14),STR$(!ErrorBlock%+14),"")
d1645 2
a1646 2
indarea%=FNheap_newblock(totalindsize%+16)
WindowBlock%=FNheap_newblock(largest%+16)
a1647 1
IF HeapError% THEN PROCwimp_error
a1830 54
REM-----------------------------------------------------------------------------

REM // Heap //

REM-----------------------------------------------------------------------------

DEF PROCheap_init
REM Initialises global variables
`heap%=0:`heapsize%=0
SYS "OS_ReadMemMapInfo" TO `heappage%
`heapappsize%=HIMEM-&8000
HeapError%=FALSE
ENDPROC

DEF PROCheap_newheap (size%)
REM Sets up a new heap
PROCheap_getmemory (size%,0)
IF NOT HeapError% THEN
 `heap%=HIMEM
 SYS "XOS_Heap",0,`heap%,,`heapsize%
ENDIF
ENDPROC

DEF FNheap_newblock (size%)
REM Creates a new block and returns block pointer
LOCAL pointer%,free%,newblock%
HeapError%=FALSE
IF size%=0 THEN PROCwimp_error
IF `heap%=0 THEN PROCheap_newheap(size%+16)
IF NOT HeapError% THEN
 SYS "XOS_Heap",1,`heap% TO ,,free%
 IF free%<size% THEN PROCheap_getmemory(size%-free%,1)
 IF NOT HeapError% THEN
  SYS "XOS_Heap",2,`heap%,,size% TO ,,pointer%
 ENDIF
ENDIF
IF HeapError% THEN newblock%=0 ELSE newblock%=pointer%
=newblock%

DEF PROCheap_getmemory (memory%,alter%)
REM Claims memory and extends WimpSlot
LOCAL new%
SYS "Wimp_SlotSize",`heapappsize%+memory%,-1 TO new%
IF new%<`heapappsize%+memory% THEN
 HeapError%=TRUE
 PROCwimp_error
 SYS "Wimp_SlotSize",`heapappsize%,-1
ELSE
 IF alter% THEN SYS "XOS_Heap",5,`heap%,,new%-`heapappsize%
 `heapsize%=new%+&8000-HIMEM
 `heapappsize%=new%
ENDIF
ENDPROC

@


4.6
log
@Post submission tidy up calculator
* Removed the masks from '.' '0' and 'A'-'F' sprites (these are no longer needed as the black outline obscures the previously masked pixels).
* Makefile recreated from CApp shared makefile, now inserts version number into message at build time.
* Application name reverted to SciCalc, per the base licence terms this is a derivative of SciCalc (also restored original copyright attributions, and removed ROOL as the author).
* Wimpslot bumped up to account for the larger sprites are there are effectively two complete sets, one pressed and one not.
* A number of missing interactive help messages added, and corrections to the help provided with the new mode/base buttons. Typo 'chnges' fixed.
* Implemented a key pressed handler for the choices window. Previously key presses would be passed to the main calculator window - for example Escape would zero the display rather than dismiss the choices.
* Choices window no longer accepts the MENU mouse button for radio, option, and action buttons. Clicking ADJUST now keeps the window open for cancel/save.
* Removed a 'MOVS pc, r14' should be harmless in user mode, but not necessary as the preceding instructions can't set V anyway. The ROR and ROL could equally be implemented in BASIC.
* Comment in choices file swapped to '#' to match other (non obey file) choices.
* Fix for help on the base and mode menus - 2 undefined variables, presumably from an earlier version.
* Optional themed key top sprites now searched for using central Wimp$IconTheme - previous implementation had confused obey file EVAL syntax with string comparison
Tested new functionality and general robustness, did a few calculations, ROR and ROL checked.


Version 0.76. Tagged as 'SciCalc-0_76'
@
text
@d700 5
a704 5
 WHEN ER_INVALIDOP%:errtext$=FNmess_get("Error_InvalidOp")
 WHEN ER_NUMBERTOOBIG%:errtext$=FNmess_get("Error_NumberTooBig")
 WHEN ER_DIVBYZERO%:errtext$=FNmess_get("Error_DivByZero")
 WHEN ER_NUMBERTOOSMALL%:errtext$=FNmess_get("Error_NumberTooSmall")
 WHEN ER_ACCURACYLOST%:errtext$=FNmess_get("Error_AccuracyLost")
d840 1
a840 1
  IF Entry<0 THEN ERROR 2,FNmess_get("Error_InvalidFactorial")
d1240 3
a1242 3
IF INSTR(STR$(decimal),"?")<>0 THEN ERROR 1,FNmess_get("Error_FPException")
IF Base%<>1 AND decimal>&7FFFFFFF THEN ERROR 1,FNmess_get("Error_NumberTooBig")
IF Base%<>1 AND decimal<&80000000 THEN ERROR 1,FNmess_get("Error_NumberTooSmall")
d1263 2
a1264 2
IF temp>=2147483648 THEN ERROR 1,FNmess_get("Error_NumberTooBig")
IF temp<=-2147483649 THEN ERROR 1,FNmess_get("Error_NumberTooSmall")
d1389 1
a1389 1
IF VAL STR$(1<<31)<>(1<<31) THEN ERROR EXT 1,FNmess_get("Error_BASIC64"):END
d1452 1
a1452 1
$(ErrorBlock%+4)=REPORT$+" at line "+STR$ERL+FNmess_getargs("IntErr",STR$ ERL,"")+CHR$(0)
d1679 1
a1679 1
$(mtext%)=FNmess_get("Copy"):$(mval%)=""
d1686 1
a1686 1
$(mtext2%)=FNmess_get("CopySummary"):$(mval%)=""
@


4.5
log
@Enhancements to calculator
Submission from Chris Wraight.
Abridged changes
 * Adds a setup choices dialogue
 * Calculator display now uses outline fonts
 * Buttons have recessed equivalents to show movement when clicked
 * Optionally enlarge/shrink to scientific/simple mode
 * Intermediate calculation steps shown
 * Extended !Help information
 * Split out DEG/RAD/GRAD BIN/OCT/HEX/DEC buttons
Note, this version is merely for archive purposes and may not work.

Version 0.75. Tagged as 'SciCalc-0_75'
@
text
@a16 1
REM Calc
a29 1

d33 1
a33 1
PROCmess_load("<Calc$Dir>.Messages")
d65 1
a65 1
  SYS "Wimp_CreateMenu",,InfoMenu%,!Block%-64,296
d333 1
a333 1
  WHEN &0181:OSCLI "Filer_Run <Calc$Dir>.!Help"
d416 1
a416 1
PROCwimp_seticontext(InfoWin%,4,FNmess_get("AppVersion"))
d466 15
a480 1
DEF PROCchoicewin_click (icon%)
d484 13
a496 5
 WHEN -1:PROCwimp_claimcaret(ChoiceWin%,-1,FALSE)
 WHEN 2:PROCwimp_selecticon(ChoiceWin%,3,FALSE)
  FOR i%=4 TO 9:PROCwimp_shadeicon(ChoiceWin%,i%,TRUE):NEXT
 WHEN 3:PROCwimp_selecticon(ChoiceWin%,2,FALSE)
  FOR i%=4 TO 9:PROCwimp_shadeicon(ChoiceWin%,i%,FALSE):NEXT
d499 55
a553 30
 WHEN 14:PROCwimp_selecticon(ChoiceWin%,15,FALSE)
 WHEN 15:PROCwimp_selecticon(ChoiceWin%,14,FALSE)
 WHEN 10:Block%!0=ChoiceWin%:SYS "Wimp_CloseWindow",,Block%
  IF FNwimp_getselect(ChoiceWin%,14) THEN theme$="Yes"
  IF FNwimp_getselect(ChoiceWin%,15) THEN theme$="No"
  IF FNwimp_getselect(ChoiceWin%,2) THEN type$="Standard"
  IF FNwimp_getselect(ChoiceWin%,3) THEN type$="Scientific"
  IF FNwimp_getselect(ChoiceWin%,20) THEN open$="Yes" ELSE open$="No"
  FOR i%=0 TO 3
   IF FNwimp_gettick(BaseOptMenu%,i%)=TRUE THEN base%=i%
  NEXT
  CASE base% OF
   WHEN 0:base$="Dec"
   WHEN 1:base$="Bin"
   WHEN 2:base$="Oct"
   WHEN 4:base$="Hex"
  ENDCASE
  FOR i%=0 TO 2
   IF FNwimp_gettick(TrigOptMenu%,i%)=TRUE THEN trig%=i%
  NEXT
  CASE trig% OF
   WHEN 0:trig$="Rad"
   WHEN 1:trig$="Deg"
   WHEN 2:trig$="Grad"
  ENDCASE
  IF FNwimp_getselect(ChoiceWin%,18) THEN
   Block%!0=CalWin%:SYS "Wimp_GetWindowState",,Block%
   winx%=Block%!4:winy%=Block%!8
  ELSE
   winx%=Option_WinX%:winy%=Option_WinY%
a554 14
 SYS "XOS_File",17,"Choices:Calc" TO obj%
 IF obj%=0 THEN SYS "XOS_File",8,"<Choices$Write>.Calc"
 file%=OPENOUT "<Choices$Write>.Calc.Choices"
 BPUT#file%,"| Choices file for Calc"
 BPUT#file%,""
 BPUT#file%,"Type:"+type$
 BPUT#file%,"Base:"+base$
 BPUT#file%,"Trig:"+trig$
 BPUT#file%,"Theme:"+theme$
 BPUT#file%,"WinX:"+STR$winx%
 BPUT#file%,"WinY:"+STR$winy%
 BPUT#file%,"Open:"+open$
 CLOSE#file%
 WHEN 11:Block%!0=ChoiceWin%:SYS "Wimp_CloseWindow",,Block%
d579 1
a579 1
LOCAL obj%,file%,command$,value$
d622 1
d625 1
d629 1
a629 1
        MOVS    PC, R14
a631 1
rol=rot%:ror=rot%+4
d648 2
a649 3
SYS "XOS_File",17,"Choices:Calc.Choices" TO obj%
IF obj%=1 THEN
 file%=OPENIN "Choices:Calc.Choices"
d1362 1
a1362 1
BootPath$=""                           :REM Pathname for <Calc$Dir>
d1392 1
a1392 1
SYS "Wimp_Initialise",300,!TaskID%,FNmess_get("AppTitle"),Block% TO WimpVersion%,AppHandle%
d1394 1
a1394 1
Block%!20=&3002:$(Block%+24)=FNmess_get("AppName")
d1399 1
a1399 1
WindowArea%=FNwimp_opentemplates("<Calc$Dir>.Templates")
d1425 2
a1426 1
   WHEN CalWin%:PROCcalwin_click(Block%!16,Block%!8)
d1428 4
a1431 2
   WHEN ChoiceWin%:PROCchoicewin_click(Block%!16)
   WHEN -2:PROCiconbar_click(Block%!8)
d1434 7
a1440 2
  PROCcalwin_keypress(Block%!24)
  IF ErrorFlag% THEN PROCcalc_error
d1453 1
a1453 1
SYS "Wimp_ReportError",ErrorBlock%,1,FNmess_get("AppTitle")
d1461 1
a1461 1
  IF Block%!0=1 THEN OSCLI "Filer_Run <Calc$Dir>.!Help"
d1494 1
a1494 1
  IF Block%!0=2 THEN OSCLI "Filer_Run <Calc$Dir>.!Help"
d1546 1
a1546 1
  SYS "XOS_ReadVarVal","Calc$Dir",Block%,256,0,3 TO ,,len%
d1567 1
a1567 1
    WHEN 70,71:
d1569 1
a1569 1
    WHEN 72,73:
d1582 1
a1582 1
   WHEN 2,3,5,6,8,9,14,15,18,11,10:
d1596 1
a1596 1
   WHEN BaseMenu%,BaseOptMenu%:
d1598 1
a1598 1
   WHEN TrigMenu%,TrigOptMenu%:
d1607 5
a1611 4
spritepath$="<Calc$Dir>.Sprites"
IF Option_Theme%=TRUE AND "Wimp$ToolTheme"<>"" THEN
 SYS "XOS_File",17,"<Wimp$ToolThemePath>.Apps.Calc.Sprites" TO obj%
 IF obj%=1 THEN spritepath$="<Wimp$ToolThemePath>.Apps.Calc.Sprites"
d1657 1
a1657 1
PROCwimp_makemenu(InfoMenu%,FNmess_get("AppTitle"))
d1659 2
a1660 2
PROCwimp_additem(InfoMenu%,1,0,-1,FNmess_get("Help"))
PROCwimp_additem(InfoMenu%,2,2,-1,FNmess_get("Choices"))
d1694 1
a1694 1
PROCwimp_makemenu(CalcMenu%,FNmess_get("AppTitle"))
@


4.4
log
@  Now gets version number from VersionNum file during build
Detail:
  The build process will add a line to the Messages file which contains
  the major version number and date of the component. This is read by
  the !RunImage at application start up in order to update the relevant
  icon in the Info window.
Admin:
  Tested and seems to work OK.

Version 0.59. Tagged as 'SciCalc-0_59'
@
text
@d17 30
a46 14
REM SciCalc
REM Authors: ASmith, CDean, JCoxhead, SForrest
debug%=FALSE
REM IF debug% TRACE TO "hostvdu:x"
REM IF debug% TRACE ON
PROClocale_initialise
@@%="+G10"+decimal_point$+"10"
PROCms_load("<SciCalc$Dir>.Messages")
IF VALSTR$(1<<31)<>(1<<31) ERROR EXT 1,FNms_0("ver")
DIM Q% &1000,temp% 256,buffer% &500,endbuf% -1: curbuf%=buffer%
DIM taskid% 4: $taskid%="TASK"
DIM indbuf% 128
ind% = indbuf%
!Q%=10: Q%!4=&502: Q%!8=0
d48 3
a50 9
REM Stuff for factorials. Numerical Recipes, Press et al, C U P
DIM cof(6)
cof(1)=76.18009173
cof(2)=-86.50532033
cof(3)=24.01409822
cof(4)=-1.231739516
cof(5)=0.120858003E-2
cof(6)=-0.536382E-5
stp=2.50662827465
d52 1
a52 43
SYS "Wimp_Initialise",300,!taskid%,FNms_0("M3"),Q% TO wimp_version%
`wbcol=10: `tbcol=12: `sco=4: `mbcol=2: `wfcol=&7: `tfcol=7: `sci=&D: `tbcol2=&C
PROCvars
PROCclear
S%=OPENIN"<SciCalc$Dir>.Sprites": Y%=EXT#S%+16: CLOSE#S%
DIM sprites% Y%
!sprites%=Y%: sprites%!8=1
SYS "OS_SpriteOp",&109,sprites%
SYS "OS_SpriteOp",&10A,sprites%,"<SciCalc$Dir>.Sprites"
DIM title% 40: $title% = ""
SYS "Wimp_OpenTemplate",,"<SciCalc$Dir>.Templates"
ON ERROR SYS "Wimp_CloseTemplate": PROCerrorbox
SYS "Wimp_LoadTemplate",,Q%,temp%,temp%+256,-1,"calculator",0 TO ,,,,,,C%
IF C%=0 ERROR 1,FNms_1("Template","calculator")

Q%!72=title%: Q%!64=sprites%
SYS "Wimp_CreateWindow",,Q% TO calc%
SYS "Wimp_LoadTemplate",,Q%,temp%,temp%+256,-1,"Info",0 TO ,,,,,,C%
IF C%=0 ERROR 1,FNms_1("Template","Info")

SYS "Wimp_CreateWindow",,Q% TO info%
SYS "Wimp_CloseTemplate"
ONERROR PROCerrorbox
FOR L%=53 TO 69: PROChide_icon(L%): NEXT
FOR L%=35 TO 51: PROCungrey_icon(L%): NEXT
PROCshow_icon(48): PROCungrey_icon(27)
iccalc%=FNiconbar: PROCclear
vns_icn%=4
PROCset_version(info%, vns_icn%)

SYS "Wimp_DragBox",,-1: PROCstartopts
REPEAT
  SYS "Wimp_Poll",1,Q% TO J%
  CASE J% OF
  WHEN 1: PROCredraw_window(!Q%)
  WHEN 2: PROCopen_window(!Q%,Q%!4,Q%!8,Q%!12,Q%!16,Q%!20,Q%!24,Q%!28,FALSE)
  WHEN 3: PROCcloseawindow(!Q%)
  WHEN 6: PROCcheckmouse(!Q%,Q%!4,Q%!8,Q%!12,Q%!16,Q%!20)
  WHEN 8: PROCkeypressed(!Q%,Q%!24)
  WHEN 9: PROCmenuselect(Q%)
  WHEN 17,18: PROCreceive(Q%)
  ENDCASE
UNTIL FALSE
d54 1
a54 46
DEF PROClocale_initialise
  LOCAL p%
  SYS "Territory_ReadSymbols",-1,0 TO p%
  decimal_point$ = CHR$?p%
ENDPROC

DEF FNlocale_val(n$)
  IF decimal_point$="." : =VALn$
  LOCAL i%
  i%=INSTR(n$,decimal_point$)
  IF i%<>0 : =VAL(LEFT$(n$,i%-1)+"."+MID$(n$,i%+1))
=VALn$

DEF PROCstartopts
LOCAL W%,B%,T%
SYS"OS_ReadVarVal","SciCalc$Dir",buffer%,256,,3 TO ,,W%
buffer%?W%=13: bootpath$=$buffer%
SYS"XOS_ReadVarVal","SciCalc$Options",buffer%,256,,3 TO ,,W%
buffer%?W%=13: options$=$buffer%
SYS"XOS_ReadVarVal","SciCalc$Window",buffer%,256,,3 TO ,,W%
buffer%?W%=13: window$=$buffer%
W%=INSTR(options$,",")
IF W% THEN
  B%=VAL(LEFT$(options$,W%-1)): T%=VAL(MID$(options$,W%+1))
  IF B%>=1 AND B%<=4 AND T%>=0 AND T%<=3 base%=B%: trig%=T%
ENDIF
CASE base% OF
  WHEN 3:
    FOR L%=53 TO 63: PROCshow_icon(L%): NEXT
    FOR L%=8 TO 9: PROCgrey_icon(L%): NEXT
    FOR L%=35 TO 51: PROCgrey_icon(L%): NEXT
    PROCgrey_icon(27): PROChide_icon(48)
  WHEN 4:
    FOR L%=53 TO 63: PROCshow_icon(L%): NEXT
    FOR L%=35 TO 51: PROCgrey_icon(L%): NEXT
    PROCgrey_icon(27): PROChide_icon(48)
ENDCASE
W%=INSTR(window$,",")
IF W% THEN
  xo%=VAL(LEFT$(window$,W%-1)): yo%=VAL(MID$(window$,W%+1))
  PROCreopen(calc%): PROCretitle(calc%,TRUE): open%=TRUE
ELSE
  xo%=24: yo%=160
  PROCretitle(calc%,TRUE): open%=FALSE
ENDIF
ENDPROC
d56 1
a56 2
DEF PROCset_version(window%, RETURN icon%)
  LOCAL x1%, y1%, x2%, y2%, len%, buf%, vsn$
d58 11
a68 43
  REM Get icon information
  !Q%  = window%
  Q%!4 = icon%
  SYS "Wimp_GetIconState",, Q%

  REM Store icon's co-ordinates
  x1% = Q%!8
  y1% = Q%!12
  x2% = Q%!16
  y2% = Q%!20

  REM Store the text somewhere
  vsn$ = FNms_0("VersionNum")
  len% = 1 + LEN(vsn$)
  DIM buf% len%
  $(buf%) = vsn$

  REM Edit the icon details
  IF Q%!36 > len% THEN len% = Q%!36
  Q%!28 = buf%
  Q%!36 = len%

  REM Re-create the icon with the new details
  SYS "Wimp_DeleteIcon",, Q%
  Q%!4 = window%
  SYS "Wimp_CreateIcon", icon%, Q% + 4 TO icon%
  SYS "Wimp_ForceRedraw", window%, x1%, y1%, x2%, y2%
ENDPROC

DEF PROCreceive(Q%)
CASE Q%!16 OF
  WHEN Message_Quit%:
    PROCfinish: END
  WHEN Message_SaveDesktop%:
    IF NOT FNsavedesk(Q%!20) THEN
      Q%!12=Q%!8
      SYS"Wimp_SendMessage",19,Q%,Q%!4
      !buffer%=ERR
      $(buffer%+4)=REPORT$+CHR$0
      SYS"Wimp_ReportError",buffer%,1,FNms_0("M3")
    ENDIF
  WHEN Message_HelpRequest%:
    PROChelpreply(FNhelptext,Q%!8,Q%!4)
d72 3
a74 92
DEF PROCcheckmouse(mousex%,mousey%,K%,handle%,icon%,oK%)
IF K% AND 2 THEN
  CASE handle% OF
  WHEN -2
    PROCdomenu(101,">"+FNms_0("M1")+","+FNms_0("M2"),FNms_0("M3"))
  ENDCASE
ENDIF
IF K% AND 5 THEN
  IF handle%>-1 PROCgetw(handle%)
  CASE handle% OF
  WHEN calc%
    LOCAL ERROR
    ON ERROR LOCAL errorflag%=TRUE: icon%=-1
    IF errorflag% THEN
      IF icon%=18 PROCclear
    ELSE
    CASE icon% OF
      WHEN 0,1,2,3,4,5,6,7,8,9: PROCdigit(CHR$(icon%+ASC"0"))
      WHEN 64,65,66,67,68,69: PROCdigit(CHR$(icon%+1))
      WHEN 10: PROCpoint
      WHEN 11: PROCoperator("/")
      WHEN 12: PROCoperator("*")
      WHEN 13: PROCsign
      WHEN 14: PROCoperator("-")
      WHEN 15: PROCoperator("+")
      WHEN 16: PROCoperator("=")
      WHEN 17: IF K%=4 THEN
                 IF base% > 3 base%=1 ELSE base%+=1
               ELSE
                 IF base% < 2 base%=4 ELSE base%-=1
               ENDIF
               PROCretitle(handle%,K%=4)
      WHEN 18: PROCclear
      WHEN 19: PROCunary("CE")
      WHEN 20: PROCunary("MC")
      WHEN 21: PROCunary("Min")
      WHEN 22: PROCunary("MR")
      WHEN 23: PROCunary("NOT")
      WHEN 24: PROCoperator("AND")
      WHEN 25: PROCoperator("OR")
      WHEN 26: PROCoperator("EOR")
      WHEN 27: PROCoperator("%")
      WHEN 28: PROCunary("RND")
      WHEN 29: PROCunary("COS")
      WHEN 30: PROCunary("TAN")
      WHEN 31: PROCunary("ASN")
      WHEN 32: PROCunary("ACS")
      WHEN 33: PROCunary("ATN")
      WHEN 34: PROCunary("fact")
      WHEN 35: PROCunary("10x")
      WHEN 36: PROCunary("LOG")
      WHEN 37: PROCunary("LN")
      WHEN 38: PROCunary("ex")
      WHEN 39: PROCoperator("nCr")
      WHEN 40: PROCoperator("nPr")
      WHEN 41: PROCunary("root")
      WHEN 42: PROCoperator("xrty")
      WHEN 43: PROCunary("sqrt")
      WHEN 44: PROCoperator("^")
      WHEN 45: PROCunary("reci")
      WHEN 46: PROCdigit("E")
      WHEN 47: IF K%=4 THEN
                 IF trig% > 2 trig%=1 ELSE trig%+=1
               ELSE
                 IF trig% < 2 trig%=3 ELSE trig%-=1
               ENDIF
               PROCretitle(handle%,K%=4)
      WHEN 48: IF NOT bracket% PROCoperator("(") ELSE PROCoperator(")")
      WHEN 49: PROCunary("PI")
      WHEN 50: PROCunary("HYP")
      WHEN 51: PROCunary("SIN")
      WHEN 52: SYS "Wimp_SetCaretPosition",handle%,-1,0,0,1<<25
      WHEN 53: PROCoperator("DIV")
      WHEN 54: PROCoperator("NOR")
      WHEN 55: PROCoperator("MOD")
      WHEN 56: PROCoperator("NAND")
      WHEN 57: PROCoperator("EQV")
      WHEN 58: PROCoperator("<O")
      WHEN 59: PROCoperator("<<")
      WHEN 60: PROCoperator("<<")
      WHEN 61: PROCoperator(">>")
      WHEN 62: PROCoperator(">>>")
      WHEN 63: PROCoperator("O>")
    ENDCASE
    ENDIF
    IF icon%<>50 hyp%=FALSE
    PROCupdate(calc%,50,-40-32,33*16+195,-30): PROCcalc
  WHEN -2:
    IF open% PROCfront(calc%) ELSE PROCreopen(calc%): open%=TRUE
  ENDCASE
ENDIF
ENDPROC
d76 1
a76 83
DEF PROCretitle(handle%,forward%)
LOCAL base$,trig$,L%,temp,temp%,big%
big%=&1FFFFFFF
CASE base% OF
  WHEN 1:
    base$=FNms_0("Dec")
    CASE trig% OF
      WHEN 1: trig$=FNms_0("Rad")
      WHEN 2: trig$=FNms_0("Deg")
      WHEN 3: trig$=FNms_0("Grad")
    OTHERWISE
      trig$=FNms_0("NoIdea")
    ENDCASE
  WHEN 2:
    base$=FNms_0("Bin")
  WHEN 3:
    base$=FNms_0("Oct")
  WHEN 4:
    base$=FNms_0("Hex")
  OTHERWISE
    base$="???"
ENDCASE
IF trig$<>"" trig$="   ("+trig$+")"
$title%=FNms_2("title",base$,trig$)
PROCgetw(handle%)
!Q%=handle%: SYS "Wimp_GetWindowOutline",,Q%
IF Q%!8<y1% Q%!8=y1%
SYS "Wimp_ForceRedraw",-1,Q%!4,Q%!8,Q%!12,Q%!16
CASE base% OF
  WHEN 1:
    IF icon%<>47 THEN
      SYS "Wimp_ForceRedraw",calc%,-big%,-big%,big%,big%
      IF forward% THEN
        FOR L%=53 TO 69: PROChide_icon(L%): NEXT
        FOR L%=35 TO 51: PROCungrey_icon(L%): NEXT
        PROCshow_icon(48): PROCungrey_icon(27)
        entry$=STR$(FNtodec(16,entry$))
      ELSE
        FOR L%=53 TO 63: PROChide_icon(L%): NEXT
        FOR L%=35 TO 51: PROCungrey_icon(L%): NEXT
        PROCshow_icon(48): PROCungrey_icon(27)
        FOR L%=2 TO 9: PROCungrey_icon(L%): NEXT
        entry$=STR$(FNtodec(2,entry$))
      ENDIF
    ENDIF
  WHEN 2:
    SYS "Wimp_ForceRedraw",calc%,-big%,-big%,big%,big%
    IF forward% THEN
      FOR L%=53 TO 63: PROCshow_icon(L%): NEXT
      FOR L%=2 TO 9: PROCgrey_icon(L%): NEXT
      FOR L%=35 TO 51: PROCgrey_icon(L%): NEXT
      PROCgrey_icon(27): PROChide_icon(48)
      PROCround(FNlocale_val(entry$))
    ELSE
      FOR L%=2 TO 7: PROCgrey_icon(L%): NEXT
      temp=FNtodec(8,entry$): entry$=FNtobin(STR$(temp))
    ENDIF
  WHEN 3:
    SYS "Wimp_ForceRedraw",calc%,-big%,-big%,big%,big%
    IF forward% THEN
      FOR L%=2 TO 7: PROCungrey_icon(L%): NEXT
      temp=FNtodec(2,entry$)
    ELSE
      PROCgrey_icon(8): PROCgrey_icon(9)
      FOR L%=64 TO 69: PROChide_icon(L%): NEXT
      temp=FNtodec(16,entry$)
    ENDIF
    entry$=FNtooct(STR$(temp))
  WHEN 4:
    SYS "Wimp_ForceRedraw",calc%,-big%,-big%,big%,big%
    IF forward% THEN
      PROCungrey_icon(8): PROCungrey_icon(9)
      FOR L%=64 TO 69: PROCshow_icon(L%): NEXT
      temp=FNtodec(8,entry$): entry$=FNtohex(STR$(temp))
    ELSE
      FOR L%=53 TO 69: PROCshow_icon(L%): NEXT
      FOR L%=35 TO 51: PROCgrey_icon(L%): NEXT
      PROCgrey_icon(27): PROChide_icon(48)
      PROCround(FNlocale_val(entry$))
    ENDIF
ENDCASE
F%=TRUE
ENDPROC
d78 27
a104 24
DEF PROCround(temp)
LOCAL temp%
IF temp <0 temp-=0.5 ELSE IF temp > 0 temp +=0.5
IF temp >= 2147483648 ERROR 1,FNms_0("E1")
IF temp <= -2147483649 ERROR 1,FNms_0("E2")
temp%=temp: dreg=temp%
CASE base% OF
  WHEN 2: entry$=FNtobin(STR$(dreg))
  WHEN 3: entry$=FNtooct(STR$(dreg))
  WHEN 4: entry$=FNtohex(STR$(dreg))
ENDCASE
IF opstack% num(histack%)=dreg
ENDPROC

DEF PROCcloseawindow(handle%)
PROCgetw(handle%)
xo%=x0%: yo%=y0%: open%=FALSE
PROCclose_window(handle%)
ENDPROC

DEF PROCfinish
ON ERROR SYS "XWimp_CloseDown": END
PROCms_end
SYS "Wimp_CloseDown"
d107 7
a113 12
DEF PROCdomenu(handle%,menu$,menutitle$)
LOCAL max%,width%,indirect%,old%
indirect% = 0
menuhandle%=handle%
menuptr%=buffer%
old% = menuptr%
ind% = indbuf%
I%=0
menuptr%!20=44 :REM **jdl changed to follow style guide
IF wimp_version% < 310 OR LENmenutitle$ <= 12 THEN
  $menuptr%=LEFT$(menutitle$,12)
  max% = LEN(LEFT$(menutitle$,12))
d115 65
a179 36
  menuptr%!0 = ind%
  $ind% = menutitle$
  ind% += LENmenutitle$+1
  max% = LENmenutitle$
  indirect% = 1<<8
ENDIF
menuptr%?12=`tfcol: menuptr%?13=2: menuptr%?14=`wfcol: menuptr%?15=0
menuptr%!24=0
width% = menuptr%+16
menuptr%+=28
REPEAT
  item$=FNpar(",")
  IF LENitem$ > max% THEN
    max% = LENitem$
    IF LEFT$(item$,1) = ">" THEN
      max% -= 1
    ENDIF
  ENDIF
  PROCmenuitem(item$)
UNTIL item$=""
!width% = (max% + 1) * 16
menuptr%!-24=(menuptr%!-24)OR&80
old%!28 = old%!28 OR indirect%
SYS "Wimp_CreateMenu",,buffer%,mousex%-64,96+FNmenusize(buffer%) :REM **jdl changed to follow style guide
ENDPROC

DEF FNmenusize(Menu%)
LOCAL size_item%,y%
size_item% =Menu%!20
y% =size_item%
Menu% +=28
WHILE (!Menu% AND %1<<7) =0
  y% +=size_item%
  Menu% +=24
ENDWHILE
=y%
d181 7
a187 6
DEF PROCmenuitem(text$)
LOCAL item$
IF text$="" ENDPROC
!menuptr%=0
IF LEFT$(text$,1) = ">" THEN
  item$ = MID$(text$,2)
d189 25
a213 1
  item$ = text$
d215 5
a219 9
IF LEFT$(text$,1)=">" menuptr%!4=info% ELSE menuptr%!4=-1
menuptr%!8=&07000021
IF LENitem$ > 12 THEN
  menuptr%!12 = ind%
  menuptr%!16 = -1
  menuptr%!20 = LENitem$
  $ind% = item$
  ind% += LENitem$ + 1
  menuptr%!8 = menuptr%!8 OR 256: REM Make it indirect
d221 63
a283 1
  $(menuptr% + 12) = LEFT$(item$,12)
d285 2
a286 1
menuptr%+=24
d289 55
a343 3
DEF FNpar(sep$)
i1%=I%+1: I%=INSTR(menu$+sep$,sep$,i1%)
=MID$(menu$,i1%,I%-i1%)
d345 16
a360 6
DEF PROCmenuselect(menus%)
SYS "Wimp_DecodeMenu",,buffer%,menus%,STRING$(200," ")TO,,,a$
IF a$="" ENDPROC
CASE menuhandle% OF
  WHEN 101: IF a$=FNms_0("M2"): PROCfinish: END: REM Quit
ENDCASE
d363 13
a375 4
DEF PROCcalc
LOCAL @@%: @@%="+G10"+decimal_point$+"10"
IF errorflag% THEN
  disp$=FNReport: IF debug% disp$+=" at "+STR$ ERL
d377 3
a379 1
  IF NOT F% disp$=entry$ ELSE disp$=FNtobase(dreg)
d381 27
a407 12
REM temp%!0=calc%
REM temp%!4=52: REM Display icon
REM SYS "Wimp_GetIconState",,temp%
WHILE more%
  SYS "Wimp_SetColour",0
  REM RECTANGLE FILL bx%+temp%!8,by%+temp%!12,temp%!16-temp%!8-1,temp%!20-temp%!12-1
  RECTANGLE FILL bx%+50,by%-26,36*16,-40
  SYS "Wimp_SetColour",7
  MOVE bx%+50+16*(36-LEN disp$),by%-36
  PRINT disp$
  SYS "Wimp_GetRectangle",,Q% TO more%
ENDWHILE
d410 3
a412 5
DEF PROCfront(handle%)
IFhandle%=-1THENENDPROC
PROCgetw(handle%)
PROCopen_window(handle%,x0%,y0%,x1%,y1%,scx%,scy%,-1,TRUE)
ENDPROC
d414 1
a414 4
DEF PROCreopen(handle%)
PROCgetw(handle%)
PROCopen_window(handle%,xo%,yo%,x1%-x0%+xo%,y1%-y0%+yo%,scx%,scy%,-1,TRUE)
ENDPROC
d416 3
a418 8
DEF PROCopen_window(handle%,x0%,y0%,x1%,y1%,scx%,scy%,bhandle%,focus%)
IF handle%=-1 ENDPROC
Q%!0=handle%: Q%!28=bhandle%
Q%!4=x0%: Q%!8=y0%: Q%!12=x1%: Q%!16=y1%
Q%!20=scx%: Q%!24=scy%
SYS "Wimp_OpenWindow",,Q%
REM JRC 11th Jan 1994 Claim the focus too
IF focus% SYS "Wimp_SetCaretPosition",handle%,-1,0,0,1<<25
d421 1
a421 4
DEF PROCgetw(handle%)
!Q%=handle%: SYS "Wimp_GetWindowState",,Q%
PROCinfo(Q%+4): bhandle%=Q%!28: flags%=Q%!32
ENDPROC
d423 1
a423 4
DEF PROCinfo(Q%)
x0%=!Q%: y0%=Q%!4: x1%=Q%!8: y1%=Q%!12: scx%=Q%!16: scy%=Q%!20
bx%=x0%-scx%: by%=y1%-scy%
ENDPROC
d425 1
a425 4
DEF PROCupdate(handle%,ux0%,uy0%,ux1%,uy1%)
!Q%=handle%: Q%!4=ux0%: Q%!8=uy0%: Q%!12=ux1%: Q%!16=uy1%
SYS "Wimp_UpdateWindow",,Q% TO more%: PROCinfo(Q%+4)
ENDPROC
d427 34
a460 6
DEF PROCredraw_window(handle%)
IF handle%=calc% THEN
!Q%=handle%
SYS "Wimp_RedrawWindow",,Q% TO more%
PROCinfo(Q%+4)
PROCcalc
d462 63
d527 60
a586 16
DEF PROCclose_window(handle%)
!Q%=handle%: SYS "Wimp_CloseWindow",,Q%
ENDPROC

DEF PROCvars
@@%="G18"+decimal_point$+"18"
memory=0
trig%=2
base%=1
icon%=0
DIM convbuf% 33
DIM op$(20),num(20)
Message_Quit%=0
Message_SaveDesktop%=10
Message_HelpRequest%=&502
Message_HelpReply%=&503
d588 1
a588 1
FOR L%=0 TO 2 STEP 2
d590 1
a590 1
[       OPT L%
d598 54
a651 2
NEXT L%
rol=rot%: ror=rot%+4
d654 45
a698 38
DEF PROCerrorbox
ON ERROR ERROR EXT 1,REPORT$: END
SYS "Wimp_DragBox",,-1
!buffer%=ERR: $(buffer%+4)=REPORT$+FNms_1("IntErr",STR$ERL)+CHR$(0)
SYS "Wimp_ReportError",buffer%,1,FNms_0("M3")
PROCfinish: END
ENDPROC

DEF FNtemplate(a$)
LOCAL C%
SYS "Wimp_LoadTemplate",,Q%,curbuf%,endbuf%,0,a$,0 TO ,,curbuf%,,,,C%
IF C%=0 ERROR 1,"Template '"+a$+"' not found"
SYS "Wimp_CreateWindow",,Q% TO C%
=C%

DEF FNiconbar
!Q%=-1: Q%!4=0: Q%!8=0: Q%!12=63: Q%!16=68: Q%!20=&2102
spname$=FNms_0("Sname")
DIM Q%!24 (LENspname$+1): $(Q%!24)=spname$: Q%!28=1
Q%!32=LENspname$+1
SYS "Wimp_CreateIcon",,Q% TO ic%
=ic%

DEF PROCclear
errorflag%=FALSE
entry$="0": dreg=0
F%=FALSE: hyp%=FALSE: bracket%=FALSE
lostack%=0: histack%=-1: opstack%=FALSE
ENDPROC

DEF PROCdigit(key$)
LOCAL E%
IF F% entry$="0"
IF base%=1 THEN
  E%=INSTR(entry$,"E")
  IF E%<>0 THEN
    IF key$="E" ENDPROC
    W%=2+E%+SGN(INSTR(MID$(entry$,E%),"-"))
d700 1
a700 5
    IF key$="E" THEN
      W%=LEN(entry$)+1
    ELSE
      W%=10+SGN(INSTR(entry$,"-"))+SGN(INSTR(entry$,decimal_point$))
    ENDIF
d702 1
d704 26
a729 5
  CASE base% OF
   WHEN 2: W%=32
   WHEN 3: IF VAL(LEFT$(entry$,1))<4 W%=11 ELSE W%=10
   WHEN 4: W%=8
  ENDCASE
d731 3
a733 4
IF LEN(entry$)<W% THEN
  IF base%=1 AND entry$="0" AND key$="E" key$="1E"
  IF entry$="0" entry$=key$ ELSE entry$+=key$
  dreg=FNconvert(entry$): F%=FALSE: opstack%=FALSE
d735 3
d740 8
a747 14
DEF PROCpoint
IF base% <> 1 ENDPROC
IF F% entry$="0"
IF INSTR(entry$,"E") ENDPROC
IF INSTR(entry$,decimal_point$)=0 AND LENentry$ < 10 entry$=entry$+decimal_point$
dreg=FNlocale_val(entry$)
F%=FALSE: opstack%=FALSE
ENDPROC

DEF PROCsign
IF entry$="0" entry$=FNtobase(dreg)
IF base% = 1 THEN
  IF (INSTR(entry$,"E")=0) OR F% THEN
       IF INSTR(entry$,"-")=0 entry$="-"+entry$ ELSE entry$=RIGHT$(entry$,LEN(entry$)-1)
d749 1
a749 3
       exp=INSTR(entry$,"E"): l$=LEFT$(entry$,exp): r$=MID$(entry$,exp+1)
       IF LEFT$(r$,1)="-" r$=RIGHT$(r$,LEN(r$)-1) ELSE r$="-"+r$
       entry$=l$+r$
d751 11
d763 1
a763 1
  entry$=FNtobase(-FNconvert(entry$))
d765 4
a768 2
dreg=FNconvert(entry$)
IF opstack% num(histack%)=dreg
d771 6
a776 2
DEF PROCunary(key$)
F%=TRUE
d778 41
a818 11
  WHEN "CE": IF NOT opstack% dreg=0: entry$="0"
  WHEN "MC": memory=0
  WHEN "Min": memory=dreg
  WHEN "MR": opstack%=FALSE
             IF base%<>1 PROCround(memory) ELSE dreg=memory
             entry$=FNtobase(dreg)
  WHEN "RND": opstack%=FALSE: dreg=RND(1): entry$=FNtobase(dreg)
  WHEN "PI": opstack%=FALSE: dreg=PI: entry$=FNtobase(dreg)
  WHEN "HYP": hyp%=TRUE
OTHERWISE
  PROCoperator(key$): opstack%=FALSE
d820 3
d825 10
a834 1
DEF PROCoperator(key$)
d836 71
a906 91
  WHEN "SIN": IF hyp% THEN
                ans=FNhypsin(dreg)
              ELSE
                CASE trig% OF
                  WHEN 1: ans=SIN(dreg)
                  WHEN 2: ans=SINRAD(dreg)
                  WHEN 3: ans=SIN((PI/200)*dreg)
                ENDCASE
              ENDIF
  WHEN "COS": IF hyp% THEN
                ans=FNhypcos(dreg)
              ELSE
                CASE trig% OF
                  WHEN 1: ans=COS(dreg)
                  WHEN 2: ans=COSRAD(dreg)
                  WHEN 3: ans=COS((PI/200)*dreg)
                ENDCASE
              ENDIF
  WHEN "TAN": IF hyp% THEN
                ans=FNhyptan(dreg)
              ELSE
                CASE trig% OF
                  WHEN 1: ans=TAN(dreg)
                  WHEN 2: ans=TANRAD(dreg)
                  WHEN 3: ans=TAN((PI/200)*dreg)
                ENDCASE
              ENDIF
  WHEN "ASN": IF hyp% THEN
                ans=FNhypasn(dreg)
              ELSE
                CASE trig% OF
                  WHEN 1: ans=ASN(dreg)
                  WHEN 2: ans=DEGASN(dreg)
                  WHEN 3: ans=(200/PI)*ASN(dreg)
                ENDCASE
              ENDIF
  WHEN "ACS": IF hyp% THEN
                ans=FNhypacs(dreg)
              ELSE
                CASE trig% OF
                  WHEN 1: ans=ACS(dreg)
                  WHEN 2: ans=DEGACS(dreg)
                  WHEN 3: ans=(200/PI)*ACS(dreg)
                ENDCASE
              ENDIF
  WHEN "ATN": IF hyp% THEN
                ans=FNhypatn(dreg)
              ELSE
                CASE trig% OF
                  WHEN 1: ans=ATN(dreg)
                  WHEN 2: ans=DEGATN(dreg)
                  WHEN 3: ans=(200/PI)*ATN(dreg)
                ENDCASE
              ENDIF
  WHEN "%": ans=dreg/100
              IF histack%>=lostack% ans=ans*num(histack%)
  WHEN "(": IF NOT opstack% THEN
                IF histack%<0 AND dreg=0 dreg=1
                key$="*"
                PROCsum
              ENDIF
              bracket%=TRUE
              lostack%=histack%+1: histack%=lostack%-1
              opstack%=FALSE
              ans=0
  WHEN "LOG": ans=LOG(dreg)
  WHEN "LN": ans=LN(dreg)
  WHEN "root": ans=SQR(dreg)
  WHEN "sqrt": ans=dreg^2
  WHEN "reci": ans=1/dreg
  WHEN "NOT": ans=NOT(dreg)
  WHEN "ex": ans=EXP(dreg)
  WHEN "10x": ans=10^dreg
  WHEN "fact": ans=FNfact(dreg)
OTHERWISE
  PROCsum
ENDCASE
dreg=ans: entry$=FNtobase(dreg)
hyp%=FALSE: F%=TRUE
ENDPROC

DEF PROCsum
LOCAL more%
F%=TRUE
IF NOT opstack% histack%+=1
num(histack%)=dreg
IF key$="=" bracket%=FALSE: lostack%=0
more%=TRUE
WHILE more%
  IF histack%>lostack% THEN
    more%=(key$="=" OR key$=")" OR FNpos(key$)>=FNpos(op$(histack%-1)))
d908 5
a912 1
    more%=FALSE
d914 72
a985 3
  IF more% THEN
    num(histack%-1)=FNeval2(num(histack%-1),op$(histack%-1),num(histack%))
    histack%-=1
d987 52
d1040 1
a1040 1
ans=num(histack%)
d1042 19
a1060 10
  WHEN "=":
    histack%=-1
    opstack%=FALSE
  WHEN ")":
    bracket%=FALSE: lostack%=0
    histack%-=1
    opstack%=FALSE
OTHERWISE
  op$(histack%)=key$
  opstack%=TRUE
d1064 12
a1075 11
DEF FNpos(P$)
CASE P$ OF
  WHEN "^": pos%=1
  WHEN "nCr","nPr": pos%=2
  WHEN "*","/","DIV","MOD": pos%=3
  WHEN "+","-": pos%=4
  WHEN "<<",">>>",">>","O>","<O": pos%=5
  WHEN "AND","NAND": pos%=6
  WHEN "OR","EOR","NOR","EQV": pos%=7
OTHERWISE
  pos%=0
d1079 2
a1080 1
DEF FNeval2(n1,op$,n2)
d1082 13
a1094 10
CASE op$ OF
  WHEN "NAND": answer=NOT (n1 AND n2)
  WHEN "NOR": answer=NOT (n1 OR n2)
  WHEN "EQV": answer=NOT (n1 EOR n2)
  WHEN "xrty": answer=n1^(1/n2)
  WHEN "O>": A%=n1: B%=n2: answer=USR ror
  WHEN "<O": A%=n1: B%=n2: answer=USR rol
  WHEN "nCr": answer=INT(EXP(FNln_fact(n1)-FNln_fact(n2)-FNln_fact(n1-n2))+.5)
  WHEN "nPr": answer=INT(EXP(FNln_fact(n1)-FNln_fact(n1-n2))+.5)
  OTHERWISE: answer=EVAL(STR$ n1+op$+STR$ n2)
d1098 5
a1102 47
DEF PROCkeypressed(H%,keychar%)
char%=keychar%: IF char%>=ASC("a") AND char%<=ASC("z") char%-=32
LOCAL ERROR
ON ERROR LOCAL errorflag%=TRUE: char%=-1
IF errorflag% THEN
  IF char%=127 PROCclear
ELSE
  CASE char% OF
    WHEN 48,49:
      PROCdigit(CHR$(char%))
    WHEN 50,51,52,53,54,55:
      IF base% <> 2 PROCdigit(CHR$(char%))
    WHEN 56,57:
      IF base%=1 OR base%=4 PROCdigit(CHR$(char%))
    WHEN 65,66,67,68,70:
      IF base%=4 PROCdigit(CHR$(char%))
    WHEN 69:
      IF base%=1 OR base%=4 PROCdigit("E")
    WHEN 13,61:
      PROCoperator("=")
    WHEN 47:
      IF base%=1 PROCoperator("/") ELSE PROCoperator("DIV")
    WHEN 40:
      IF NOT bracket% PROCoperator("(")
    WHEN 41:
      IF bracket% PROCoperator(")")
    WHEN 42:
      PROCoperator("*")
    WHEN 43:
      PROCoperator("+")
    WHEN 45:
      PROCoperator("-")
    WHEN 94:
      IF base%=1 PROCoperator("^")
    WHEN 37:
      IF base%=1 PROCoperator("%")
    WHEN 33:
      IF base%=1 PROCunary("fact")
    WHEN 35:
      PROCsign
    WHEN 127:
      PROCclear
    WHEN ASCdecimal_point$:
      IF base%=1 PROCpoint ELSE PROCoperator("MOD")
  OTHERWISE:
    SYS"Wimp_ProcessKey",keychar%
  ENDCASE
d1104 49
a1152 48
PROCupdate(calc%,50,-40-32,33*16+195,-30): PROCcalc
ENDPROC

DEF FNhypsin(n)
IF ABS(n) > 1E-3 THEN =EXP(n)/2-EXP(-n)/2 ELSE =n+n^3/6

DEF FNhypcos(n)
=EXP(n)/2+EXP(-n)/2

DEF FNhyptan(n)
IF ABS(n) > 37 THEN
  =SGN(n)
ELSE
  =FNhypsin(n)/FNhypcos(n)
ENDIF

DEF FNhypasn(n)
IF ABS(n) > 1E18 THEN =SGN(n)*LN(2*ABS(n))
IF ABS(n) < 1E-6 THEN =n ELSE =LN(n+SQR(n*n+1))

DEF FNhypacs(n)
IF n > 1E18 THEN =LN(2*n) ELSE =LN(n+SQR(n*n-1))

DEF FNhypatn(n)
IF ABS(n) < 1E-6 THEN =n ELSE =LN((1+n)/(1-n))/2

DEF FNsavedesk(H%)
LOCAL ERROR
ON ERROR LOCAL=FALSE
BPUT#H%,"Set SciCalc$Options "+STR$(base%)+","+STR$(trig%)
IF open% THEN
  PROCgetw(calc%)
  BPUT#H%,"Set SciCalc$Window "+STR$(x0%)+","+STR$(y0%)
ELSE
  BPUT#H%,"Unset SciCalc$Window"
ENDIF
BPUT#H%,"/"+bootpath$
= TRUE

DEF FNReport
CASE ERR OF
  WHEN &80000200: =FNms_0("E4")
  WHEN &80000201: =FNms_0("E1")
  WHEN &80000202: =FNms_0("E5")
  WHEN &80000203: =FNms_0("E2")
  WHEN &80000204: =FNms_0("E6")
OTHERWISE
  =REPORT$
d1154 1
a1154 4

DEF PROCshow_icon(icon%)
PROCupdate_icon(calc%,icon%,0,&00800080)
REM Wimp_IconDeleted OR Wimp_IconNeedsHelp
d1157 5
a1161 3
DEF PROChide_icon(icon%)
PROCupdate_icon(calc%,icon%,&00800080,&00800080)
REM Wimp_IconDeleted OR Wimp_IconNeedsHelp
d1164 1
a1164 16
DEF PROCgrey_icon(icon%)
PROCupdate_icon(calc%,icon%,&00400000,&00400006)
REM Wimp_IconShaded
REM Wimp_IconShaded OR Wimp_IconBorder OR Wimp_IconSprite
ENDPROC

DEF PROCungrey_icon(icon%)
REM IF FNsprite(icon%) THEN
REM All icons are sprites now
  PROCupdate_icon(calc%,icon%,6,&00400006)
REM Wimp_IconBorder OR Wimp_IconSprite
REM Wimp_IconShaded OR Wimp_IconBorder OR Wimp_IconSprite
REM ELSE
REM   PROCupdate_icon(calc%,icon%,5,&00400005)
REM ENDIF
ENDPROC
d1166 1
a1166 5
REM DEF FNsprite(icon%)
REM CASE icon% OF
REM   WHEN 35,38,41,42,44,49: =TRUE
REM ENDCASE
REM =FALSE
d1168 1
a1168 4
DEF PROCupdate_icon(handle%,icon%,eor%,clr%)
Q%!0=handle%: Q%!4=icon%: Q%!8=eor%: Q%!12=clr%
SYS"Wimp_SetIconState",,Q%
ENDPROC
d1170 3
a1172 2
DEF FNtobin(value$)
LOCAL dec%,len%
d1174 1
a1174 1
SYS"OS_ConvertBinary4",dec%,convbuf%,33 TO ,len%
d1176 1
a1176 1
=FNzero($convbuf%)
d1178 2
a1179 1
DEF FNtohex(value$)
d1182 1
a1182 1
SYS"OS_ConvertHex8",hex%,convbuf%,9 TO ,len%
d1184 1
a1184 1
=FNzero($convbuf%)
d1186 3
a1188 2
DEF FNtooct(value$)
LOCAL buf%,oct%,len%,temp,oct$,L%,temp%
d1190 1
a1190 1
SYS"OS_ConvertBinary4",oct%,convbuf%,33 TO ,len%
d1192 1
a1192 1
value$="0"+$convbuf%
d1194 3
a1196 3
FOR L%=1 TO 31 STEP 3
  temp%=EVAL("%"+MID$(value$,L%,3))
  oct$+=STR$ temp%
d1198 1
a1198 1
=FNzero(oct$)
d1200 5
a1204 14
DEF FNtodec(X%,value$)
LOCAL v%
SYS"OS_ReadUnsigned",X%,value$ TO ,,v%
=v%

DEF FNconvert(base$)
LOCAL dec
CASE base% OF
  WHEN 1: dec=FNlocale_val(base$)
  WHEN 2: dec=FNtodec(2,base$)
  WHEN 3: dec=FNtodec(8,base$)
  WHEN 4: dec=FNtodec(16,base$)
ENDCASE
=dec
d1206 2
a1207 1
DEF FNtobase(dec)
d1209 8
a1216 8
IF INSTR(STR$(dec),"?") <> 0  ERROR 1,FNms_0("E7")
IF base%<>1 AND dec>&7FFFFFFF ERROR 1,FNms_0("E1")
IF base%<>1 AND dec<&80000000 ERROR 1,FNms_0("E2")
CASE base% OF
  WHEN 1: temp$=STR$(dec)
  WHEN 2: temp$=FNtobin(STR$(dec))
  WHEN 3: temp$=FNtooct(STR$(dec))
  WHEN 4: temp$=FNtohex(STR$(dec))
d1220 2
a1221 1
DEF FNzero(value$)
d1223 1
a1223 1
  value$=RIGHT$(value$,LEN(value$)-1)
d1225 1
a1225 1
IF value$="" value$="0"
d1228 283
a1510 8
DEF PROChelpreply(help$,ref%,to%)
IF LEN(help$) > 0 THEN
 Q%!0=256
 Q%!12=ref%
 Q%!16=Message_HelpReply%
 $(Q%+20)=help$+CHR$0
 SYS"Wimp_SendMessage",17,Q%,to%
ENDIF
d1513 1
a1513 1
DEF FNhelptext
d1516 1
a1516 1
CASE Q%!32 OF
d1518 6
a1523 6
  IF Q%!36=iccalc% text$=FNms_0("H1")
 WHEN info%:
  text$=FNms_0("H2")
 WHEN calc%:
  IF errorflag% THEN
   text$=FNms_0("H6")
d1525 13
a1537 7
   CASE Q%!36 OF
    WHEN 0,1,2,3,4,5,6,7,8,9: text$=FNms_1("K"+STR$(Q%!36),STR$(Q%!36))
    WHEN 17: text$=FNms_1("K"+STR$(Q%!36),FNms_0("B"+STR$(base%)))
    WHEN 47: text$=FNms_1("K"+STR$(Q%!36),FNms_0("T"+STR$(trig%)))
    WHEN 48: text$=FNms_0("D"+STR$(-bracket%))
    WHEN 64,65,66,67,68,69: text$=FNms_1("K"+STR$(Q%!36),STR$(Q%!36-54))
   OTHERWISE: IF Q%!36 > 0 text$=FNms_0("K"+STR$(Q%!36))
d1540 21
a1560 9
  IF text$="" text$=FNms_0("H3")
OTHERWISE:
 IF wimp_version% >= 217 THEN
  SYS"Wimp_GetMenuState",1,buffer%,Q%!32,Q%!36
  CASE !buffer% OF
   WHEN 0:
    text$=FNms_0("H4")
   WHEN 1:
    text$=FNms_0("H5")
d1562 34
d1597 179
d1777 1
a1777 1
=text$
d1779 28
a1806 7
DEF FNlowercase(S$)
LOCAL I%,C%
FOR I% = 1 TO LEN(S$)
 C% = ASC(MID$(S$,I%,1))
 IF C% >= 65 AND C% <= 90 MID$(S$,I%) = CHR$(C%+32)
NEXT
=S$
d1808 15
a1822 49
DEF PROCms_load(name$)
LOCAL ERROR
ON ERROR LOCAL RESTORE ERROR: ERROR 3,REPORT$
SYS "MessageTrans_FileInfo",,name$
DIM ms_text% 256
SYS "OS_Module",6,,,17+LEN(name$) TO ,,ms_desc%
$(ms_desc%+16)=name$
SYS "MessageTrans_OpenFile",ms_desc%,ms_desc%+16
ENDPROC

DEF PROCms_end
SYS "XMessageTrans_CloseFile",ms_desc%
SYS "XOS_Module",7,,ms_desc%
ENDPROC

DEF FNms_0(tag$)
=FNms_2(tag$,"","")

DEF FNms_1(tag$,arg1$)
=FNms_2(tag$,arg1$,"")

DEF FNms_2(tag$,arg1$,arg2$)
LOCAL F%,L%
SYS "XMessageTrans_Lookup",ms_desc%,tag$,ms_text%,256,arg1$,arg2$ TO ,,,L%;F%
IF F% AND 1 L%=0
ms_text%?L%=13
=$ms_text%

DEF FNms_N(tag$,arg1$,arg2$,arg3$,arg4$)
LOCAL F%,L%
SYS "XMessageTrans_Lookup",ms_desc%,tag$,ms_text%,256,arg1$,arg2$,arg3$,arg4$ TO ,,,L%;F%
IF F% AND 1 L%=0
ms_text%?L%=13
=$ms_text%

DEF FNln_fact(x)
REM Returns the value of ln (x!) for x > -1. Full accuracy is obtained for
REM x > 0. For -1 < x < 0, the reflection formula
REM       x! (-x)! = pi.x/sin (pi.x)
REM could be used first.
LOCAL tmp,ser,j
tmp=x+5.5
tmp=(x+0.5)*LN tmp - tmp
ser=1
FOR j=1 TO 6
  x += 1
  ser += cof(j)/x
NEXT
=tmp+LN(stp*ser)
d1824 8
a1831 9
DEF FNfact(x)
LOCAL n,f
IF x=INT x THEN
  IF x<0 ERROR 2,FNms_0("E3")
  f=1
  FOR n=1 TO INT x
    f=f*n
  NEXT
  =f
d1833 3
a1835 1
  =EXP FNln_fact(x)
d1837 2
@


4.3
log
@  Fixed menu in SciCalc.
Detail:
  The iconbar menu didn't cornform with the RO3 Style Guide.
 
  This has now been fixed. Also removed strange &00000101 param passed to
  Wimp_CreateMenu in R4.
 
  Changed !MkInstall to install into <install$dir>.HardDisc4.Apps rather than
  @@ as before.
Admin:
  Tested on RiscPC RO402.
Notes:
  Changes by James Lampard.

Version 0.58. Tagged as 'SciCalc-0_58'
@
text
@d17 1
a17 1
REM SciCalc Version 0.56 (17-Jul-98)
d69 2
d113 1
a113 1
  WHEN 3: 
d118 1
a118 1
  WHEN 4: 
d133 32
d167 1
a167 1
  WHEN Message_Quit%: 
d169 1
a169 1
  WHEN Message_SaveDesktop%: 
d177 1
a177 1
  WHEN Message_HelpRequest%: 
d269 1
a269 1
  WHEN -2: 
d304 1
a304 1
  WHEN 1: 
d320 1
a320 1
  WHEN 2: 
d332 1
a332 1
  WHEN 3: 
d343 1
a343 1
  WHEN 4: 
d393 1
a393 1
menuptr%!20=44 :REM **jdl changed to follow style guide 
d421 1
a421 1
SYS "Wimp_CreateMenu",,buffer%,mousex%-64,96+FNmenusize(buffer%) :REM **jdl changed to follow style guide 
d430 3
a432 3
  y% +=size_item% 
  Menu% +=24 
ENDWHILE 
d773 1
a773 1
  WHEN "=": 
d776 1
a776 1
  WHEN ")": 
d823 1
a823 1
    WHEN 48,49: 
d825 1
a825 1
    WHEN 50,51,52,53,54,55: 
d827 1
a827 1
    WHEN 56,57: 
d829 1
a829 1
    WHEN 65,66,67,68,70: 
d831 1
a831 1
    WHEN 69: 
d833 1
a833 1
    WHEN 13,61: 
d835 1
a835 1
    WHEN 47: 
d837 1
a837 1
    WHEN 40: 
d839 1
a839 1
    WHEN 41: 
d841 1
a841 1
    WHEN 42: 
d843 1
a843 1
    WHEN 43: 
d845 1
a845 1
    WHEN 45: 
d847 1
a847 1
    WHEN 94: 
d849 1
a849 1
    WHEN 37: 
d851 1
a851 1
    WHEN 33: 
d853 1
a853 1
    WHEN 35: 
d855 1
a855 1
    WHEN 127: 
d857 1
a857 1
    WHEN ASCdecimal_point$: 
d859 1
a859 1
  OTHERWISE: 
d1027 1
a1027 1
 WHEN -2: 
d1029 1
a1029 1
 WHEN info%: 
d1031 1
a1031 1
 WHEN calc%: 
d1045 1
a1045 1
OTHERWISE: 
d1049 1
a1049 1
   WHEN 0: 
d1051 1
a1051 1
   WHEN 1: 
@


4.2
log
@SciCalc 0.56 (17-Jul-98)
========================

Fixed the icon redraw problem in "Bin", "Hex" and "Oct" modes.
Updated the version number to 0.56 to reflect the change.
@
text
@d359 1
a359 1
menuptr%!20=40
d387 1
a387 1
SYS "Wimp_CreateMenu",,buffer%,mousex%-64,96+80,&00000101
d390 11
@


4.1
log
@Initial revision
@
text
@d17 2
a18 2
REM SciCalc Version 0.35 (11-Oct-91)
REM Authors: ASmith, CDean, JCoxhead
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
