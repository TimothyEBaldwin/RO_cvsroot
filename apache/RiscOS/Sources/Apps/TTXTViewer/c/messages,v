head	1.2;
access;
symbols
	TTXTViewer-0_16:1.2
	TTXTViewer-0_15:1.2
	TTXTViewer-0_14:1.2
	TTXTViewer-0_13:1.2
	TTXTViewer-0_12:1.2
	TTXTViewer-0_11:1.2
	TTXTViewer-0_10:1.2
	TTXTViewer-0_09:1.2
	TTXTViewer-0_08:1.1.1.1
	TTXTViewer-0_07:1.1.1.1
	TTXTViewer-0_06:1.1.1.1
	TTXTViewer-0_05:1.1.1.1
	TTXTViewer-0_04:1.1.1.1
	TTXTViewer-0_03:1.1.1.1
	TTXTViewer-0_02:1.1.1.1
	TTXTViewer-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2002.05.27.14.06.42;	author mboura;	state Exp;
branches;
next	1.1;

1.1
date	2001.11.14.15.19.28;	author mboura;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.11.14.15.19.28;	author mboura;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Added the version number to the TaskManger's display
Detail:
  Now when customers talk to us we will be able to find out what version it was
Admin:
  Only tested on the RPC.

Version 0.09. Tagged as 'TTXTViewer-0_09'
@
text
@/* Copyright 2001 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "main.h"
#include "messages.h"

#include "toolbox.h"
#include "swis.h"
#include "wimplib.h"

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "stdbool.h"

static MessagesFD MessageBlock;
static char *MessageFile = NULL;
static bool Initialised = false;

/* ********************************************************** */

_kernel_oserror *messages_initialise()
{
   _kernel_oserror *err = NULL;
   size_t size = 0;

   err = _swix(MessageTrans_FileInfo,

               _IN(1)|_OUT(2),

               APPLICATION_DIRECTORY ".Messages",
               &size);

   if (!err)
   {
      MessageFile = malloc(size);

      if (MessageFile)
      {
         err = _swix(MessageTrans_OpenFile,

                     _INR(0,2),

                     &MessageBlock,
                     APPLICATION_DIRECTORY ".Messages",
                     MessageFile);

         if (!err)
            Initialised = true;
         else
         {
            free(MessageFile);
            MessageFile = NULL;
         }
      }
   }

   return err;
}

void messages_lookup1(char *buffer, size_t size, char const *tag, char const *token0 )
{
   if (!Initialised ||
       _swix( MessageTrans_Lookup, _INR(0,7),
              &MessageBlock, tag, buffer, size, token0, 0, 0, 0
            )
      )      
   { /* message lookup failed so return the part of the tag after a colon
        or the whole tag */
      char *t =  strchr(tag,':');

      strncpy( buffer, t, size );
      buffer[size-1] = 0;
   }
}

char const *messages_simple_lookup(char const *tag)
{
   char const *result;

   if (!Initialised ||
       _swix(MessageTrans_Lookup,
             _INR(0,7) | _OUT(2),

	     &MessageBlock, tag, 0, 0, 0, 0, 0, 0,

             &result) != NULL)
   { /* message lookup failed so return the part of the tag after a colon
        or the whole tag */
      char *t =  strchr(tag,':');

      result = (t) ? t : tag;

   }

   return result;
}

_kernel_oserror *messages_error_lookup(int errnum, char const *tag)
{
   static _kernel_oserror oops = { 0, "Error message lookup failed." };
   _kernel_oserror *err = &oops;

   if (Initialised)
   {
      _kernel_oserror tempError;

      tempError.errnum = errnum;
      strncpy(tempError.errmess,tag,sizeof(tempError.errmess));

      err = _swix(MessageTrans_ErrorLookup,
                  _INR(0,7),

                  &tempError,
                  &MessageBlock,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0);
   }

   return err;
}
@


1.1
log
@Initial revision
@
text
@d72 16
@


1.1.1.1
log
@Initial import of IPTeletext module
Detail:
Takes teletext data from an MPEG stream and processes it for use be !TTXTView
Admin:
Brief testing OK
@
text
@@
