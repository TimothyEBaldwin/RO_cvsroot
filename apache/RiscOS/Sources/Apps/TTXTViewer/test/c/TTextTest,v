head	1.1;
branch	1.1.1;
access;
symbols
	TTXTViewer-0_16:1.1.1.1
	TTXTViewer-0_15:1.1.1.1
	TTXTViewer-0_14:1.1.1.1
	TTXTViewer-0_13:1.1.1.1
	TTXTViewer-0_12:1.1.1.1
	TTXTViewer-0_11:1.1.1.1
	TTXTViewer-0_10:1.1.1.1
	TTXTViewer-0_09:1.1.1.1
	TTXTViewer-0_08:1.1.1.1
	TTXTViewer-0_07:1.1.1.1
	TTXTViewer-0_06:1.1.1.1
	TTXTViewer-0_05:1.1.1.1
	TTXTViewer-0_04:1.1.1.1
	TTXTViewer-0_03:1.1.1.1
	TTXTViewer-0_02:1.1.1.1
	TTXTViewer-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2001.11.14.15.19.28;	author mboura;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.11.14.15.19.28;	author mboura;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 2001 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "^.main.h"

#include "wimplib.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

static _kernel_oserror Error_TeletextCompleted =
{
   0,
   "Teletext viewing completed successfully"
};

static _kernel_oserror Error_MessageBounced =
{
   0,
   "Teletext on message bounced"
};

int main(int argc, char *argv[])
{
   _kernel_oserror *err = NULL;

   int taskHandle = 0;
   bool quit = false;
   WimpPollBlock eventBlock;
   int eventCode;

   static int wimpMessages[] =
   { /* wimp messages that are used */
      TTextAndSubs_On,
      TTextAndSubs_OnAck,
      0
   };

   err = wimp_initialise(310,
                         "TTextTest",
                         wimpMessages,
                         NULL,
                         &taskHandle);

   if (!err)
   {
      WimpMessage mes;
      message_ttextandsubs_on *on = (message_ttextandsubs_on *)&mes.data.words;

      mes.hdr.size = 56;
      mes.hdr.my_ref = 0;
      mes.hdr.your_ref = 0;
      mes.hdr.action_code = TTextAndSubs_On;

      on->flags = TTextAndSubs_On_TeletextMagazine;
      on->data1 = 0;
      on->data2 = 0;

      err = wimp_send_message(Wimp_EUserMessageRecorded,&mes,0,0,NULL);
   }

   while (!err && !quit)
   {
      err = wimp_poll(Wimp_Poll_NullMask | Wimp_Poll_PointerLeavingWindowMask | Wimp_Poll_PointerEnteringWindowMask |
                      Wimp_Poll_LoseCaretMask | Wimp_Poll_GainCaretMask | Wimp_Poll_PollWordNonZeroMask,
                      &eventBlock,
                      NULL,
                      &eventCode);

      if (!err)
      {
         switch (eventCode)
         {
            case Wimp_EUserMessageRecorded:
            case Wimp_EUserMessage:
            {
               switch (eventBlock.user_message.hdr.action_code)
               {
                  case Wimp_MQuit:
                     quit = true;
                     break;

                  case TTextAndSubs_OnAck:
                  {
                     message_ttextandsubs_onack *ack = (message_ttextandsubs_onack *)&eventBlock.user_message.data.words;
                     if (ack->flags & TTextAndSubs_OnAck_ErrorFlag)
                     {
                        err = (_kernel_oserror *)&ack->errorNumber;
                     }
                     else
                        err = &Error_TeletextCompleted;
                  }

               }

               break;
            }

            case Wimp_EUserMessageAcknowledge:
               if (eventBlock.user_message.hdr.action_code == TTextAndSubs_On)
                  err = &Error_MessageBounced;
               break;
         }
      }
   }

   if (err)
      wimp_report_error(err,
                        Wimp_ReportError_Cancel,
                        "TTextTest");

   if (taskHandle != 0)
      wimp_close_down(taskHandle);

   return EXIT_SUCCESS;
}
@


1.1.1.1
log
@Initial import of IPTeletext module
Detail:
Takes teletext data from an MPEG stream and processes it for use be !TTXTView
Admin:
Brief testing OK
@
text
@@
