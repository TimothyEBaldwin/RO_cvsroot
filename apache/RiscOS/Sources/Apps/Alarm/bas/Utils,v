head	1.6;
access;
symbols
	Alarm-2_93:1.6
	Alarm-2_92:1.6
	Alarm-2_91:1.6
	Alarm-2_90:1.6
	Alarm-2_89:1.6
	Alarm-2_88:1.6
	Alarm-2_87:1.5
	Alarm-2_86:1.5
	Alarm-2_86-pre2:1.4
	Alarm-2_86-pre1:1.3
	Alarm-2_85:1.2
	Alarm-2_84:1.1;
locks; strict;
comment	@# @;


1.6
date	2015.06.02.19.30.13;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	EoUYIhqifyEchTny;

1.5
date	2012.06.17.15.55.13;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	BsnCfxXkEymKN49w;

1.4
date	2012.06.17.15.51.15;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	IhrnlwHmwca5M49w;

1.3
date	2012.06.17.15.48.25;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	A9PtRUqPE4xrK49w;

1.2
date	2012.06.17.15.43.27;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	uAPjjXyPkGoJJ49w;

1.1
date	2012.05.31.07.30.44;	author rsprowson;	state Exp;
branches;
next	;
commitid	8zoARW0qjretyQ6w;


desc
@@


1.6
log
@Preserve DST bit when saving !Alarm settings
Alarm was reading the DST flag on startup, and saving that value whenever its own settings were saved, not accounting for the fact that they may have changed in between (eg. by reconfiguring the machine).
Delete that logic, just preserve the DST bit across the 1 place the CMOS is written.
Fix for ticket #409.

Version 2.88. Tagged as 'Alarm-2_88'
@
text
@REM Copyright 2012 Castle Technology Ltd
REM
REM Licensed under the Apache License, Version 2.0 (the "License");
REM you may not use this file except in compliance with the License.
REM You may obtain a copy of the License at
REM
REM     http://www.apache.org/licenses/LICENSE-2.0
REM
REM Unless required by applicable law or agreed to in writing, software
REM distributed under the License is distributed on an "AS IS" BASIS,
REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
REM See the License for the specific language governing permissions and
REM limitations under the License.
REM
REM > Utils

REM *************************************************************************
REM Wimp utilities
REM *************************************************************************

DEFFNicon_set(w%,i%)
 Q%!2000=w%:Q%!2004=i%:SYS"Wimp_GetIconState",,Q%+2000
=((Q%!2024 AND 1<<21)<>0)
:
DEFFNvalid(p%)
 LOCAL flags%,valid%,str$
 REM indirected + text?
 flags% =p%!16
 IF (flags% AND (%1<<8) +1) =(%1<<8) +1 THEN
  valid% =p%!(20 +4)
  IF valid% <> -1 THEN SYS"XOS_GenerateError",valid% TO str$ :=str$
 ENDIF
=""
:
DEFFNlength_icon(H%)
=LEN(FNread_string(a_wind%,H%))

DEF PROCopen_window (handle%)
 LOCAL mc_dx%,mc_dy%,mc_sw%,mc_sh%,scrx%,scry%
 LOCAL x2%, y2%, x1%, y1%

 Q%!0  = handle%

 SYS"Wimp_GetWindowState",, Q%
 IF (Q%!32 AND 65536)=0 THEN
  REM only do this if the window isn't open!
  REM centre the window on the screen
  SYS"OS_ReadModeVariable", -1,  4 TO ,,mc_dx%
  mc_dx% = 1 << mc_dx%
  SYS"OS_ReadModeVariable", -1, 5  TO ,,mc_dy%
  mc_dy% = 1 << mc_dy%
  SYS"OS_ReadModeVariable", -1, 11 TO ,,mc_sw%
  mc_sw% += 1
  SYS"OS_ReadModeVariable", -1, 12 TO ,,mc_sh%
  mc_sh% += 1
  scrx% = mc_sw% * mc_dx%
  scry% = mc_sh% * mc_dy%

  x1% = (scrx% - (Q%!12 - Q%!4 )) DIV 2
  y1% = (scry% - (Q%!8  - Q%!16)) DIV 2
  x2% = x1% + (Q%!12 - Q%!4 )
  y2% = y1% + (Q%!8  - Q%!16)

  Q%!4  = x1%
  Q%!8  = y2%
  Q%!12 = x2%
  Q%!16 = y1%
 ENDIF
 REM but always at the top of the stack ...
 Q%!28 = -1
 REM Open the window...
 SYS"Wimp_OpenWindow",, Q%
ENDPROC
:
DEFPROCtell_pinboard(handle%)
 REM broadcast Message_WindowClosed for the window
 !buffers%=24
 buffers%!12=0
 buffers%!16=&400CB
 buffers%!20=handle%
 SYS"Wimp_SendMessage",17,buffers%,0
ENDPROC
:
DEF PROCforce_onscreen(win%)
 LOCAL caret%
 REM do we have caret, if so preserve info
 SYS"Wimp_GetCaretPosition",,Q% +&100
 caret% =(Q%!&100)=win%
 
 Q%!0 =win%
 SYS"Wimp_CloseWindow",,Q%
 SYS"Wimp_GetWindowState",,Q%
 SYS"Wimp_OpenWindow",,Q%
 
 IF caret% =TRUE THEN
  SYS"Wimp_SetCaretPosition",Q%!&100,Q%!&104,Q%!&108,Q%!&10C,Q%!&110,Q%!&114
 ENDIF
ENDPROC
:
DEF FNoffscreen(win%)
 LOCAL XE%,YE%,X%,Y%
 SYS"OS_ReadModeVariable",-1,4 TO ,,XE%
 SYS"OS_ReadModeVariable",-1,5 TO ,,YE%
 SYS"OS_ReadModeVariable",-1,11 TO ,,X%
 SYS"OS_ReadModeVariable",-1,12 TO ,,Y%
 
 X% =(X% +1) <<XE%
 Y% =(Y% +1) <<YE%
 Q%!0 =win%
 SYS"Wimp_GetWindowOutline",,Q%
 
 IF (Q%!4) <0 THEN =TRUE
 IF (Q%!8) <0 THEN =TRUE
 IF (Q%!12) > X% THEN =TRUE
 IF (Q%!16) > Y% THEN =TRUE
=FALSE
:
DEFPROCgrey_help
 CASE current_action% OF
 WHEN setting%: PROCh("MnuAM6")
 WHEN changing%:PROCh("MnuAM8")
 OTHERWISE:     IFalarm_head%=0 THEN
                 PROCh("MnuAM9")
                ELSE
                 PROCh("MnuAMA")
                ENDIF
 ENDCASE
ENDPROC
:
DEFPROCh(M$)
 LOCAL C%
 M$=FNmsg_0(M$):IFadditional_help$<>"" M$+="|M"+additional_help$
 C%=LENM$+1
 Q%!12=Q%!8:Q%!16=&503:$(Q%+20)=M$+CHR$0
 !Q%=(24+C%) AND NOT3
 SYS"Wimp_SendMessage",17,Q%,Q%!4
ENDPROC
:
DEFFNiconblock_indirect(icon%, window%)
 REM Similar to FNicon_indirect, but returns a pointer to the
 REM iconblock corresponding to icon%
 LOCAL here%, loop%
 loop% = 0
 IF (icon% > window%!84) THEN
  =-1
 ELSE
  here% = window% + 88
  WHILE (loop% <> icon%)
   here% += 32
   loop% += 1
  ENDWHILE
 ENDIF
=here%
:
DEFFNicon_size_indirect(icon%, window%)
 REM Returns the size of an indirected icon.
 LOCAL here%, loop%
 loop% = 0
 IF (icon% > window%!84) THEN
  =-1
 ELSE
  here% = window% + 88
  WHILE (loop% <> icon%)
   here% += 32
   loop% += 1
  ENDWHILE
 ENDIF
=here%!28
:
DEFFNicon_indirect(icon%, window%)
 REM Returns a pointer to the indirected text area of icon icon%
 REM in window window%
 LOCAL here%, loop%
 loop% = 0
 IF (icon% > window%!84) THEN
  =-1
 ELSE
  here% = window% + 88
  WHILE (loop% <> icon%)
   here% += 32
   loop% += 1
  ENDWHILE
 ENDIF
=here%!20
:
DEFPROCset(I%)
 PROCsetstate(a_wind%,I%,1<<21,1<<21)
ENDPROC
:
DEFPROCredraw_icon(H%,I%)
 PROCsetstate(H%,I%,0,0)
ENDPROC
:
DEFPROCsetstate(H%,I%,E%,B%)
 !Q%=H%:Q%!4=I%:Q%!8=E%:Q%!12=B%
 SYS"Wimp_SetIconState",,Q%
ENDPROC
:
DEFPROCset_title(H%,title$)
 !Q%=H%:SYS"Wimp_GetWindowInfo",,Q%
 $(Q%!76)=title$
ENDPROC
:
DEFPROCset_string(H%,I%,s$)
 LOCAL cur_str$
 !Q%=H%:Q%!4=I%:SYS"Wimp_GetIconState",,Q%
 cur_str$ =$(Q%!28)
 IF cur_str$ <>s$ THEN
  $(Q%!28)=s$
  PROCredraw_icon(H%,I%)
 ENDIF
ENDPROC
:
DEFFNread_string(H%,I%)
 !Q2%=H%:Q2%!4=I%:SYS"Wimp_GetIconState",,Q2%
=$(Q2%!28)
:
DEFPROCfront(h%)
 !Q1%=h%:SYS"Wimp_GetWindowState",,Q1%
 Q1%!28=-1:SYS"Wimp_OpenWindow",,Q1%
ENDPROC

REM *************************************************************************
REM Template utilities
REM *************************************************************************

DEFFNtotal_indirect_size
 REM Returns the total size of all indirect fields in a
 REM template file (which must already have been opened)
 LOCAL total%, size%, here%
 LOCAL name%
 
 DIM name% 12
 $name% = "*"
 here%  = 0
 total% = 0
 
 SYS"Wimp_LoadTemplate", ,0,,,,name%,0 TO ,,size%,,,,here%
 WHILE (here% <> 0)
  total% += size%
  $name% = "*"
  SYS"Wimp_LoadTemplate", ,0,,,,name%,here% TO ,,size%,,,,here%
 ENDWHILE
=total%
:
DEFFNsize_indirect(name$)
 LOCAL size%
 SYS"Wimp_LoadTemplate",,0,,,,name$,0 TO ,,size%
=size%
:
DEFFNwinsize_indirect (name$)
 LOCAL size%
 SYS"Wimp_LoadTemplate",,0,,,,name$,0 TO ,size%
=size%
:
DEFPROCopen_templates
 LOCAL a%,n$
 n$="Alarm:Templates"
 SYS"OS_Byte",161,&8C TO ,,a%
 IF (a%AND1)=1 THEN
  REM Newlook 3D bit on
  SYS"OS_File",17,"Alarm:Template3D" TO a%
  IFa%=1 THEN n$="Alarm:Template3D":REM And there's a specific 3D file
 ENDIF
 SYS"Wimp_OpenTemplate",,n$
ENDPROC
:
DEFFNQsize
 LOCAL i%,s%,t%
 s%=3000 : REM Minimum size for buffer Q%
 PROCopen_templates
 i%=0
 REPEAT
  SYS"Wimp_LoadTemplate",,-1,,,-1,"*"+STRING$(11,CHR$(0)),i% TO ,t%,,,,,i%
  IF i%<>0 AND s%<t% s%=t%
 UNTIL i%=0
 SYS"Wimp_CloseTemplate"
=s%
:
DEF FNload_template(temp$)
 LOCAL ind%,ind_space%,win%
 ind% = FNsize_indirect (temp$)
 DIM ind_space% ind%
 SYS"Wimp_LoadTemplate",,Q%,ind_space%,ind_space% + ind%,-1,temp$,0 TO ,,,,,,r6%
 IFr6%=0 ERROR 0, FNmsg_1("Fatal5",temp$)
 SYS"Wimp_CreateWindow",,Q% TO win%
=win%

REM *************************************************************************
REM Message utilities (msglib 0.01)
REM *************************************************************************

DEFPROCmsg_init(N$)
 REM LOCAL ERROR
 REM ON ERROR LOCAL RESTORE ERROR:ERROR 0,"Cannot find messages file"
 DIM msg_text% 256
 SYS"OS_Module",6,,,17+LEN(N$) TO ,,msg_desc%
 $(msg_desc%+16)=N$
 SYS"MessageTrans_OpenFile",msg_desc%,msg_desc%+16,0
ENDPROC
:
DEFFNmsg_0(T$)
=FNmsg_4(T$,"","","","")
:
DEFFNmsg_1(T$,S0$)
=FNmsg_4(T$,S0$,"","","")
:
DEFFNmsg_2(T$,S0$,S1$)
=FNmsg_4(T$,S0$,S1$,"","")
:
DEFFNmsg_3(T$,S0$,S1$,S2$)
=FNmsg_4(T$,S0$,S1$,S2$,"")
:
DEFFNmsg_4(T$,S0$,S1$,S2$,S3$)
 LOCAL F%,L%,eb%
 SYS"XMessageTrans_Lookup",msg_desc%,T$,msg_text%,256,S0$,S1$,S2$,S3$ TO eb%,,,L%;F%
 IF F% AND 1 THEN=T$
 msg_text%?L%=13
=$msg_text%
:
DEFPROCmsg_end
 IFmsg_desc% THEN
  SYS"MessageTrans_CloseFile",msg_desc%
  SYS"OS_Module",7,,msg_desc%
 ENDIF
ENDPROC

REM *************************************************************************
REM Error handling utilities (errlib 0.01)
REM *************************************************************************

DEF PROCerr_report(err%,errortext$,flags%)
 LOCAL OKC%,wimpver%
 SYS"XWimp_DragBox",,-1
 IF err% =&108D5 OR err% =&108D4 THEN ENDPROC
 
 IF err% =errok% THEN flags% =flags% AND NOT %10
 IF err% =errfatal% THEN flags% =(3 <<9) +(%10)
 IF flags% AND %10 THEN flags% =flags% OR (3<<9)
 
 OKC% =flags% AND %11
 IF OKC% =%11 THEN errortext$ =FNmsg_2("Unexp",LEFT$(errortext$,230 -LEN(FNmsg_0("Unexp"))),STR$(ERL))
 IF OKC% =%10 THEN errortext$ =FNmsg_2("Fatal",LEFT$(errortext$,230 -LEN(FNmsg_0("Fatal"))),STR$(ERL))
 
 REM if wimp>350 then replace Cancel with Quit
 SYS"Wimp_ReadSysInfo",7 TO wimpver%
 IF wimpver% >350 AND (flags% AND %10) >0 THEN
  errortext$ =FNmsg_0("ErrBut")+"{"+LEFT$(errortext$,240 -LEN(FNmsg_0("ErrBut")))
 
  flags% =flags% AND NOT %10
 ENDIF
 
 IF FNerr_box(err%,errortext$,flags%) >1 THEN PROCshutdown
ENDPROC
:
REM Error categories (at <<9)
REM 0 as 2 (error)
REM 1 information report (information)= just tell user something
REM 2 error report (warning) = tell user about problem, but app will continue
REM 3 program report (program) = an error that should not occur and may require app to quit
REM 4 question report (question) = ask user question (ie DCS)
REM 5 do not use (user 1)
REM 6 do not use (user 2)
DEF FNerr_box(err%,but_msg$,flags%)
 LOCAL pos%,but$,err$
 pos% =INSTR(but_msg$,"{") :IF pos% THEN pos% -=1
 
 but$ =MID$(but_msg$,0,pos%)
 err$ =MID$(but_msg$,INSTR(but_msg$,"{") +1)
 err$ =CHR$(err%)+CHR$(err% >>8)+CHR$(err% >>16)+CHR$(err% >>24)+LEFT$(err$,251)
 
 IF but$ >"" THEN
  SYS"Wimp_ReportError",err$,(1<<8) +flags%,task_id$,,,but$ TO ,ans%
 ELSE
  SYS"Wimp_ReportError",err$,(1<<8) +flags%,task_id$ TO ,ans%
 ENDIF
=ans%
:
DEFPROCformat_error(e$)
 PROCset_format(3)
 PROCok(FNmsg_1("OkayA8",e$))
ENDPROC
:
DEFPROCok(e$)
 ERROR errok%,e$
ENDPROC
:
DEFPROCfatal(e$)
 REM PROCheap_dump("adfs::4.HeapDump","")
 ERROR errfatal%,e$
ENDPROC
:
DEFPROCwarning(e$)
 LOCAL null%
 IFalarm_warned% ENDPROC
 alarm_warned%=TRUE
 null% =FNerr_box(1,e$,1)
ENDPROC
:
DEFPROCout_of_memory
 REM not a lot we can do except give a 'nice' error and quit
 PROCfatal(FNmsg_0("OkayD3"))
ENDPROC

REM *************************************************************************
REM String utilities
REM *************************************************************************

DEFFNrtoz(P%)
 LOCAL t$
 WHILE ?P%
  t$+=CHR$?P%:P%+=1
 ENDWHILE
=t$
:
DEFFNupper(s$)
 LOCAL I%,j$
 FOR I%=1 TO LENs$
  j$=MID$(s$,I%,1)
  IF j$>="a" AND j$<="z" MID$(s$,I%,1)=CHR$(ASC(j$)-32)
 NEXT
=s$
:
DEFFNconvertextras(f$)
REM expand system variables
REM if we exceed max basic string length then an empty string is returned
SYS"OS_GSTrans",f$,STRING$(255,"*"),254 TO ,f$
=f$
:
DEFFNbuild_alarm_options
 LOCAL s$,q$,form$,fix_form$,c$
 q$ =CHR$(34)
 s$="Set Alarm$Options"
 s$+=" -timeout "+q$+STR$(global_timeout%)+q$
 s$+=" -weekwork "+STR$(global_weekwork%)
 form$ =FNread_string(setup%,ic_setup_user_string%)
 fix_form$ =""
 
 REM we need to change '<' to '|<' to preserve variable names
 WHILE form$ >""
  c$ =LEFT$(form$,1)
  form$ =MID$(form$,2)
  IF c$ ="<" THEN fix_form$ +="|"
  fix_form$ +=c$
 ENDWHILE
 s$+=" -format "+q$+fix_form$+q$
=s$
:
DEFFNread_system_string(v$,default$)
 LOCAL P%
 SYS"XOS_ReadVarVal",v$,Q%,-1,0,3 TO ,,P%
 IF P%=0 :=default$
 SYS"XOS_ReadVarVal",v$,Q%,256,0,3 TO ,,P%
 Q%?P%=13
=$Q%
:
DEFFNleafname_ptr(f1%)
 LOCAL f2%
 REPEAT
  f2%=f1%
  f1%+=INSTR($f1%,":")
 UNTIL f1%=f2%
 REPEAT
  f2%=f1%
  f1%+=INSTR($f1%,".")
 UNTIL f1%=f2%
=f1%
:
DEFFNdigits(size%,val%)
=RIGHT$(STRING$(size%,"0")+STR$(val%),size%)
:
DEFFNchksum_textlen(t$)
 LOCAL check%
 check% =0
 WHILE t$ >""
  c$ =LEFT$(t$,1) :t$ =MID$(t$,2)
 
  CASE c$ OF
  WHEN "0","1","2","3","4","5","6","7","8","9":
   check% +=1
  WHEN "W","X":
   check% +=&100
  WHEN ",",".",":",";":
   check% +=&10000
  OTHERWISE:
   check% +=&1000000
  ENDCASE
 ENDWHILE
=check%

REM *************************************************************************
REM Time utilities (subtime 0.00)
REM *************************************************************************

DEF PROCinit_timediff
 DIM cur_time% 4,copy_first% 7,copy_second% 7,cur_ordinals% 35,first_ordinals% 35,sub_time% 63
 
 P%=sub_time%
 [OPT 2
  LDMIA r0,{r2,r4}
  LDMIA r1,{r3,r5}
  SUBS  r2,r3,r2
  SBC   r4,r5,r4
  STMIA r0,{r2,r4}
  
  CMP   r0,#0 ;clrv
  MOV   pc,r14
 ]
ENDPROC
:
DEF PROCtime_diff(first%,second%,RETURN sign%,RETURN yrs%,RETURN days%,RETURN hrs%,RETURN mins%)
 LOCAL A%,B%
 
 copy_first%!0 =first%!0
 copy_first%!4 =first%?4
 copy_second%!0 =second%!0
 copy_second%!4 =second%?4
 
 A% =copy_first%
 B% =copy_second%
 CALL sub_time%
 
 IF copy_first%?5 =&FF THEN
  REM subtract from 0 to negate
  copy_second%!0 =0
  copy_second%!4 =0
  CALL sub_time%
  sign% =-1
 ELSE
  sign% =0
 ENDIF
 
 SYS"Territory_ConvertTimeToUTCOrdinals",,copy_first%,first_ordinals%
 yrs% =(first_ordinals%!&18) -1900
 days% =(first_ordinals%!&20) -1
 hrs% =(first_ordinals%!&C)
 mins% =(first_ordinals%!&8)
ENDPROC
:
DEFPROCset_timex_for_next_second
SYS"OS_ReadMonotonicTime" TO timeslip%
timeslip%-=timex%
timex%+=timeslip% - (timeslip% MOD 100) + 100
ENDPROC
:
DEFPROCset_format(F%)
 format%=F%
 IF format%=1 THEN format$="~AH:~AM:~AS"
 IF format%=2 THEN format$="~AH:~AM"
 IF format%=3 THEN format$="%24~IN%MI"
 IF format%=4 THEN format$="%24:%MI:%SE"
 IF format%=5 THEN format$=userformat$
 
 secs_used%=FNseconds_used(format$)
 PROCset_timex_for_next_second
ENDPROC

REM *************************************************************************
REM Menu utilities
REM *************************************************************************

DEFFNcrmenu(menu$)
 LOCAL M%,I%,maxlen%
 IF (menufree%+28>menuend%) PROCfatal(FNmsg_0("Fatal2"))
 menuptr%=menufree%
 I%=0
 maxlen%=0
 IF LEFT$(menu$,1)="#" I%=1:menutitle$=FNpar(",") ELSE menutitle$=""
 IF LENmenutitle$ <= 12 THEN
  $menuptr%=LEFT$(menutitle$,12)
 ELSE
  menuptr%!0 = FNworkspace (LEN(menutitle$)+1)
  menuptr%!4 = -1
  menuptr%!8 = LENmenutitle$
  $(menuptr%!0) = menutitle$
 ENDIF
 menuptr%?12=7
 menuptr%?13=2
 menuptr%?14=7
 menuptr%?15=0
 menuptr%!16=196
 menuptr%!20=44
 menuptr%!24=0
 menuptr%+=28
 REPEAT
  item$=FNpar(",")
  IF maxlen% < LEN(item$) THEN
   maxlen% = LENitem$
  ENDIF
  PROCmenuitem(item$)
 UNTIL item$=""
 M%=menufree%
 IF LENmenutitle$ <= 12 THEN
  IF LEN(LEFT$(menutitle$, 12)) > maxlen% THEN
   maxlen% = LEN(LEFT$(menutitle$, 12))
  ENDIF
 ELSE
  M%!28=M%!28 OR 256
  IF LEN(menutitle$) > maxlen% THEN
   maxlen% = LEN(menutitle$)
  ENDIF
 ENDIF
 M%!16=(maxlen% + 1) * 16
 menufree%=menuptr%
=M%
:
DEFPROCmenuitem(text$)
 LOCAL I%,F%,L%
 IF text$="" menuptr%!-24=(menuptr%!-24)OR &80:ENDPROC
 IF (menuptr%+24>menuend%) PROCfatal(FNmsg_0("Fatal2"))
 F%=&00
 IF RIGHT$(text$,1)="#" text$=LEFT$(text$):F%+=&02
 IF RIGHT$(text$,1)="@@" text$=LEFT$(text$):F%+=&08
 menuptr%!0=F%
 menuptr%!4=-1
 menuptr%!8=&07000021
 IF LEFT$(text$,1)="$" THEN
  !menuptr%+=&04
  menuptr%!8+=&100
  menuptr%!16=-1
  text$=STRING$(16, " ")
 ELSE
  IF LENtext$<=12 THEN
   $(menuptr%+12)=text$
  ELSE
   I%=FNworkspace(LEN(text$)+1):$I%=text$
   menuptr%!12=I%:menuptr%!16=-1:menuptr%!20=LENtext$+1
   menuptr%!8=menuptr%!8 OR &100
  ENDIF
 ENDIF
 menuptr%+=24
ENDPROC
:
DEFPROCattach(menu%,item%,ptr%,traverse%)
 menu%+=28+item%*24
 IF traverse% !menu%=!menu% OR (1<<4)
 menu%!4=ptr%
ENDPROC
:
DEFPROCwriteable(menu%,item%,ptr%,size%)
 LOCAL M%,L%
 IF LEN($menu%) <= 12 THEN
  M%=LEN$menu%-3
 ELSE
  M%=LEN$!menu%-3
 ENDIF
 L%=size%:IF L%>16 L%=16
 IF L%>M% M%=L%
 menu%!16=(M%*8+6)*2
 menu%+=28+item%*24
 menu%!12=ptr%
 menu%!20=size%
ENDPROC
:
DEFFNpar(sep$)
 LOCAL L%
 L%=I%+1
 I%=INSTR(menu$+sep$,sep$,L%)
=MID$(menu$,L%,I%-L%)
:
DEFPROCset_shade(menuhandle%,item%,value%)
 IF -((menuhandle%!(28+8+24*item%) AND &400000)=&400000)<>value% THEN
  menuhandle%!(28+8+24*item%)=menuhandle%!(28+8+24*item%)EOR &400000
 ENDIF
ENDPROC
:
DEFPROCtick(menuhandle%,item%)
 menuhandle%!(28+24*item%)=menuhandle%!(28+24*item%)EOR 1
ENDPROC
:
DEFFNworkspace(L%)
 IF menu_curws%+L%>menu_ws%+menu_maxws% PROCfatal(FNmsg_0("Fatal3"))
 menu_curws%+=L%
=menu_curws%-L%

REM *************************************************************************
REM Heap utilities
REM *************************************************************************

DEFFNheap_ident_num(v$)
 LOCAL i%,j%
 FORi%=0 TO 3
  j%=j% OR ASC(MID$(v$,i%+1,1))<<(i%*8)
 NEXT
=j%
:
DEFFNheap_claim(ident$,size%)
 LOCAL p%,f%
 REM need to add 4 extra bytes 'cos if the block needs
 REM extending then the first word gets trampled on
 size%+=4
 f%=TRUE
 WHILE size%>=FNheap_freespace AND f%=TRUE
  f%=FNheap_increase
 ENDWHILE
 REM claim the block and store the ident
 SYS"XOS_Heap",2,heap_start%,,size% TO ,,p%;f%
 IF(f%AND1) :=0
 !p%=FNheap_ident_num(ident$)
 p%+=4
=p%
:
DEFPROCheap_reset
 LOCAL slot%
 IFheap_size%>0 THEN
  SYS"Wimp_SlotSize",-1,-1 TO slot%
  SYS"Wimp_SlotSize",slot%-heap_size%,-1
  heap_size%=0
 ENDIF
ENDPROC
:
DEFFNheap_increase
 LOCAL slot%
 SYS"Wimp_SlotSize",-1,-1 TO slot%
 SYS"Wimp_SlotSize",slot%+heap_psize%,-1
 IFheap_size%=0 THEN
  SYS"XOS_Heap",0,heap_start%,,heap_psize% TO ;slot%
  IF(slot% AND 1) PROCok(FNmsg_1("OkayD2",STR$(heap_psize%/1024)))
 ELSE
  SYS"XOS_Heap",5,heap_start%,,heap_psize% TO ;slot%
  IF(slot% AND 1) :=FALSE
 ENDIF
 heap_size%+=heap_psize%
=TRUE
:
DEFFNheap_freespace
 LOCAL f%
 IFheap_size%=0 THEN =0
 SYS"OS_Heap",1,heap_start% TO ,,f%
=f%
:
DEFPROCheap_free(ident$,block%)
 LOCAL r0%,f%
 IFblock% THEN
  block%-=4
  IF!block%<>FNheap_ident_num(ident$) PROCfatal(FNmsg_1("BNF", ident$))
  SYS"XOS_Heap",3,heap_start%,block% TO r0%;f%
  IF(f% AND 1) PROCfatal(FNmsg_2("ODD1", ident$, FNrtoz(r0%+4)))
  SYS"XOS_Heap",1,heap_start% TO ,,,f%
  IF(f%+16)=heap_size% PROCheap_reset
 ENDIF
ENDPROC
:
DEFFNheap_extend(ident$,block%,size%)
 LOCAL p%,current%,i%,f%
 block%-=4
 IF!block%<>FNheap_ident_num(ident$) PROCfatal(FNmsg_1("BNE", ident$))
 REM find out how big this block is
 SYS"OS_Heap",6,heap_start%,block% TO ,,,current%
 REM check that there is enough space in the heap for a duplicate of this block
 f%=TRUE
 WHILE (current%+size%)>=FNheap_freespace AND f%=TRUE
  f%=FNheap_increase
 ENDWHILE
 SYS"OS_Heap",4,heap_start%,block%,size% TO ,,p%
=p%+4
:
DEFFNws_claim(RETURN ws%, size_required%)
 ws%+=size_required%
=(ws%-size_required%)

REM *************************************************************************
REM Choices utilities
REM *************************************************************************

DEFFNopen(name$,action%)
 LOCAL C%
 LOCAL ERROR
 ON ERROR LOCAL :=-1
 SYS"OS_Find",%1100+action%,name$ TO C%
=C%
:
DEFFNclose(handle%)
 LOCAL ERROR
 ON ERROR LOCAL :=-1
 SYS"OS_Find",0,handle%
=0
:
DEFFNgot_time_setup
 LOCAL ftype%
 REM If boot sequence didn't run it wont have set this variable
 IF FNread_system_string("Boot$OSVersion", "") = "" THEN =FALSE
 REM Look in boot resources for the plugin application
 SYS"XOS_File",23,"BootResources:Configure.!TimeSetup" TO,,,,,,ftype%
=ftype%=8192

DEFPROCsave_config
 LOCAL cmos%,cli$,cli2$,i%,opt_file$,f%

 cli$ =FNbuild_alarm_options
 SYS"OS_CLI",cli$
 
 REM for obey file we must double every % otherwise it will change
 REM "%24" into "4" as it think's %2 is a cli parameter
 cli2$ =""
 WHILE cli$ >""
  IF ASC(cli$) =37 THEN cli2$ +="%"
  cli2$ +=LEFT$(cli$,1)
  cli$ =MID$(cli$,2)
 ENDWHILE
 
 opt_file$ ="<Choices$Write>.Boot.Predesk.Alarm"
 SYS"XOS_Find",&80,opt_file$ TO i%;f%
 IF(f%AND1) THEN
  PROCok(FNrtoz(i%+4))
 ELSE
  BPUT#i%,cli2$
  CLOSE#i%
  SYS"XOS_File",18,opt_file$,&FEB
 ENDIF
 
 SYS"XOS_Byte",161,&DC TO ,,cmos%
 cmos%=(cmos% AND &80) OR format% :REM Preserve DST, mix in display format
 IFalarm_confirm%  cmos%=cmos% OR %1000
 IFalarm_autosave% cmos%=cmos% OR %10000
 IFfivedayweek%    cmos%=cmos% OR %100000
 IFsilent_alarm%   cmos%=cmos% OR %1000000
 SYS"XOS_Byte",162,&DC,cmos% TO i%;f%
 IF(f%AND1) THEN PROCok(FNrtoz(i%+4))
ENDPROC
:
DEFPROCsave_setup(filetype%,filesize%,handle%,icon_name$)
 LOCAL b$
 b$=STR$~(filetype%)
 b$=RIGHT$("000"+b$,3)
 save_filetype%=filetype%
 save_filesize%=filesize%

 REM the handle is used PURELY as a reference by the host program as to
 REM what is being saved (ie the host program could be capable of
 REM producing more than one file and otherwise won't know)
 save_handle%=handle%
 !Q2%=save%:Q2%!4=3:SYS"Wimp_GetIconState",,Q2%
 $(Q2%!32)="sfile_"+b$
 !Q2%=save%:Q2%!4=2:SYS"Wimp_GetIconState",,Q2%
 $(Q2%!28)=icon_name$
ENDPROC
:
DEFPROCsavefile(f%,l$,m%)
 IF f% THEN
  IF INSTR(l$,".")=0 AND INSTR(l$,":")=0 PROCok(FNmsg_0("OkayC1"))
 ENDIF

 CASE save_handle% OF
 WHEN 1:PROCprint_the_alarms_out(l$,TRUE)
 WHEN 2:PROCsave_alarms_to_disc(l$,TRUE,f%,TRUE)
        PROCunset_alarms_selection
 WHEN 3:PROCprint_the_alarms_out(l$,FALSE)
 WHEN 4:PROCsave_alarms_to_disc(l$,FALSE,f%,TRUE)
        PROCunset_alarms_selection
        PROCopen_browser:REM to adjust the title bar
 ENDCASE

 IF m% THEN
  IFmenudata% SYS"Wimp_CreateMenu",,menudata%,menux%,menuy%
 ELSE
  SYS"Wimp_CreateMenu",,-1
 ENDIF

 CASE doing_shutdown% OF
 WHEN 1:PROCshutdown
 WHEN 3:SYS"Wimp_ProcessKey",&1FC
 ENDCASE
ENDPROC
:
DEFPROCdragicon(mousex%,mousey%,handle%,icon%)
 LOCAL bx%,by%,ix0%,ix1%,iy0%,iy1%,f$
 savewind%=handle%
 !Q%=handle%:SYS"Wimp_GetWindowState",,Q%
 bx%=Q%!4-Q%!20
 by%=Q%!16-Q%!24
 !Q%=handle%:Q%!4=icon%:SYS"Wimp_GetIconState",,Q%
 ix0%=Q%!8
 iy0%=Q%!12
 ix1%=Q%!16
 iy1%=Q%!20
 !Q%=handle%
 Q%!4=5
 Q%!8=bx%+ix0%
 Q%!12=by%+iy0%
 Q%!16=bx%+ix1%
 Q%!20=by%+iy1%
 Q%!24=Q%!8-mousex%
 Q%!28=Q%!12-mousey%
 Q%!32=scrx1%+Q%!16-mousex%
 Q%!36=scry1%+Q%!20-mousey%
 IFsave_start%<>-1 THEN
  f$="file_"+RIGHT$("000"+STR$~(save_filetype%),3)
  SYS save_start%,%11000101,1,f$,Q%+8,Q%+24
 ELSE
  SYS"Wimp_DragBox",,Q%
 ENDIF
ENDPROC
:
DEFPROCdrag_savefile(h%,i%,mx%,my%)
 LOCAL f1%,ext%
 f1%=FNleafname_ptr(filename%)
 !Q%=(48+LEN$f1%) AND NOT3
 Q%!12=0
 Q%!16=1
 Q%!20=h%
 Q%!24=i%
 Q%!28=mx%
 Q%!32=my%
 Q%!36=0
 Q%!40=&FFF
 $(Q%+44)=$f1%
 ?(Q%+44+LEN$(Q%+44))=0
 SYS"Wimp_SendMessage",17,Q%,h%,i%
 saveref%=Q%!8
ENDPROC
@


1.5
log
@Assorted refactoring/tidy up
Corrected endianness of error messages from FNerr_box
Minor template tweaks in system font.
Added support for EX/EY0 analogue clock which is actually readable, was defaulting to blocky EX/EY2 before.
When Wimp_TextOp is unavailable the system font is used as a fallback.
Gave icons variable names rather than lots of magic numbers in the code.
Refactored use of nested windows, since the supporting routines only actually apply to 3 windows
 - a_wind% The alarm window always has the caret
 - setup% The setup window now has an invisible caret
 - warning% Never has the input focus anyway so the set/cancel buttons
can simply be placed in the dialogue as normal and the style guide keypresses caught with the normal key handler.
Now runs on RISC OS 3.10 again as a side effect.
Checked the messages file for redundant help, removing those which are now in the configure plugin.
Binary 15kB smaller!

Version 2.86. Tagged as 'Alarm-2_86'
@
text
@d789 1
a789 6
 cmos%=format%
 IFalarm_confirm%  cmos%=cmos% OR %1000
 IFalarm_autosave% cmos%=cmos% OR %10000
 IFfivedayweek%    cmos%=cmos% OR %100000
 IFsilent_alarm%   cmos%=cmos% OR %1000000
 IFalarm_in_dst%   cmos%=cmos% OR %10000000
d812 6
@


1.4
log
@Disabled BST application alarm support, and manual BST setting in the
setup dialogue.
Trimmed a few unused variables reported by 'squish'.
Replaced icon numbers for setup dialogue with variable names.
Correct "Click SELECT to if" grammar from wrong escape code in help.
Checked application alarms still work (Test/TstAppAlrm & Test/CanAppAlrm).
Tagged as 'Alarm-2_86-pre2'
@
text
@a83 24
DEF PROCtoggle_size(win%,flag%)
 LOCAL size_x%,size_y%
 Q%!0 =win%
 SYS"Wimp_GetWindowInfo",,Q% OR 1
 Q%!&100 =win%
 IF flag% =FALSE THEN
  REM Shrink to nothing. The wimp will sort out the mess, by using
  REM the window's minimum size.
  Q%!(4 +8) =0 :REM Visible area maximum X
  Q%!(4 +4) =Q%!(4 +12) :REM Visible area minimum Y = max Y
 ELSE
  size_x% =Q%!(4 +48) -Q%!(4 +40) :REM Work area max X - min X
  size_y% =Q%!(4 +52) -Q%!(4 +44) :REM Work area max Y - min Y
  Q%!(4 +8) = Q%!(4 +0) +size_x% :REM Visible area max X = min X + size_x%
  Q%!(4 +4) = Q%!(4 +12) -size_y% :REM Visible area min Y = max Y - size_y%
 ENDIF
 
 SYS"Wimp_OpenWindow",,Q%
 REM Forcing window on screen by closing & re-opening it will cause
 REM flicker if it's not needed. So we check if it's offscreen
 REM first.
 IF FNoffscreen(win%) THEN PROCforce_onscreen(win%)
ENDPROC
:
d99 1
a99 1

d365 1
a365 1
 LOCAL pos%,but$,err$,taskh%,task$,errf%,v%
d370 1
a370 7
 err$ =CHR$(err% >>24)+CHR$(err% >>16)+CHR$(err% >>8)+CHR$(err%) +LEFT$(err$,251)
 
 SYS"XWimp_ReadSysInfo",5 TO taskh%;errf%
 SYS"XTaskManager_TaskNameFromHandle",taskh% TO task$;v%
 errf% =errf% OR v%
 
 IF errf% AND %1 THEN task$ ="Unknown task"
d373 1
a373 1
  SYS"Wimp_ReportError",err$,(1<<8) +flags%,task$,,,but$ TO ,ans%
d375 1
a375 1
  SYS"Wimp_ReportError",err$,(1<<8) +flags%,task$ TO ,ans%
d548 2
a549 2
 IF format%=1 THEN format$="~AH:~AM:~AS":icon_width%=116:icon_height% =34
 IF format%=2 THEN format$="~AH:~AM":icon_width%=116:icon_height% =34
a551 1
 
a558 247
REM Nested wimp utilities (fixlib 0.00)
REM *************************************************************************

DEF PROCfix_init(num_wins%)
 fix_num% =0
 DIM fix_info%(num_wins% -1,2)
 DIM fix_help$(num_wins% -1,1)
ENDPROC
:
DEF PROCfix_dialogue(RETURN win%,ok_but$,can_but$,ok_help$,can_help$)
 fix_help$(fix_num%,0) =ok_help$
 fix_help$(fix_num%,1) =can_help$
 !Q% =win%
 SYS"Wimp_GetWindowInfo",,Q%
 SYS"Wimp_DeleteWindow",,Q%
 
 bar_size% =100
 Q%!(4 +4) -=bar_size%
 Q%!(4 +44) -=bar_size%
 Q%!(4 +68) +=bar_size% <<16
 
 num_icons% =Q%!(4+84)
 iconp% =Q% +4 +88
 icon_num% =0
 found% =FALSE
 WHILE num_icons% >0
  flags% =iconp%!16
  REM indirected + text?
  IF (flags% AND (%1<<8) +1) =(%1<<8) +1 THEN
   valid% =iconp%!(20 +4)
   IF valid% <> -1 THEN
    SYS"XOS_GenerateError",valid% TO str$
   ELSE
    str$ =""
   ENDIF
 
   IF INSTR(str$,"R5,3") >0 OR INSTR(str$,"R6,3") >0 THEN
    REM delete icon
    iconp%!16 =iconp%!16 OR (%1<<23)
    fix_info%(fix_num%,1) =icon_num%
    found% =TRUE
    num_icons% =1
   ENDIF
  ENDIF
 
  icon_num% +=1
  num_icons% -=1
  iconp% +=32
 ENDWHILE
 IF found% =FALSE THEN ok_but$ =""
 
 SYS"Wimp_CreateWindow",,Q% +4 TO win%
 fix_info%(fix_num%,0) =win%
 
 REM now create embedded window
 REM set maxy, to miny +barsize
 Q%!(4 +12) =(Q%!(4 +4)) +bar_size%
 Q%!(4 +16) =0 :REM scroll x offset
 Q%!(4 +20) =0 :REM scroll y offset
 
 REM window to open behind
 Q%!(4+24) =-1
 
 REM set work area size
 Q%!(4 +44) = -bar_size%
 Q%!(4 +68) = 0:REM(Q%!(4 +68) AND &FFFF) OR bar_size%<<16
 
 REM check for 3d window borders
 IF (Q%!(4+28) AND (%101<<28)) =0 THEN
  REM compensate for 3d border x-coord
  Q%!4 +=4
  Q%!12 -=4:REM-=8
  REM compensate for 3d border y-coord
  Q%!8 +=4
  bar_size% -=4
 ENDIF
 bar_size% +=2
 REM remove black window border
 Q%?(4+32) =&FF
 
 work_width% =Q%!(4 +48)
 REM window flags
 Q%!(4+28) =(1<<4) +(1<<31)
 
 REM icons
 Q%!(4+84) =3 :REM 3 icons
 iconptr% =Q% +4+88
 
 x% =work_width% -24
 PROCbar_divicon(iconptr%,0,0,size_div%)
 bar_size% -=size_div%
 y% =-(size_div% +(bar_size% -54) DIV 2)
 
 PROCbar_icon(iconptr%,x%,y%,ok_but$,"R6,3")
 PROCbar_icon(iconptr%,x%,y%,can_but$,"R5,3")
 
 SYS"Wimp_CreateWindow",,Q% +4 TO bar%
 fix_info%(fix_num%,2) =bar%
 
 !Q% =bar%
 SYS"Wimp_OpenWindow",,Q%,&4B534154,win%,(%010101010101<<16) AND NOT 1
 
 fix_num% +=1
ENDPROC
:
DEF PROCbar_icon(RETURN iconptr%,RETURN x%,y%,text$,valid$)
 LOCAL tx%
 
 IF text$ ="" THEN
  tx% =0
  PROCbar_icon(iconptr%,tx%,0,"!","R3,5")
  ENDPROC
 ENDIF
 
 IF INSTR(valid$,"R6") THEN
  width% =200
  depth% =68
  y% +=8
 ELSE
  width% =184
  depth% =52
 ENDIF
 x% -=width%
 
 iconptr%!0 =x% :REM min x
 iconptr%!4 =y% -depth% :REM min y
 iconptr%!8 =x% +width% :REM max x
 iconptr%!12 =y% :REM max y
 
 iconptr%!16 =(1<<28)+(7<<24) +(3<<12)+(1<<8) +(%1111<<2) + 1
 
 DIM text% 31, valid% LEN(valid$)
 $text% =text$ :$valid% =valid$
 iconptr%!(20 +0) =text%
 iconptr%!(20 +4) =valid%
 iconptr%!(20 +8) =32
 
 iconptr% +=32
 x% -=20 :REM set up for next icon
ENDPROC
:
DEFPROCbar_divicon(RETURN iconptr%,x%,y%,RETURN height%)
 LOCAL mode%,yeig%
 
 REM if divider doesn't exist then height =0
 SYS"XWimp_SpriteOp",40,,"divider" TO ,,,,height%,,mode%
 SYS"XOS_ReadModeVariable",mode%,5 TO ,,yeig%
 height% =height% <<yeig%
 
 iconptr%!0 =x% :REM min x
 iconptr%!4 =y% -height% :REM min y
 iconptr%!8 =1280 :REM max x
 iconptr%!12 =y% :REM max y
 iconptr%!16 =1<<1
 $(iconptr% +20) ="divider"
 iconptr% +=32
ENDPROC
:
DEFPROCfix_click(Q%)
 LOCAL bar_count%,parent%
 
 REM find parent
 REM leave iconbar alone!
 IF (Q%!12) <1 THEN ENDPROC
 
 Q%!20 =Q%!12
 SYS"Wimp_GetWindowState",,Q%+20,&4B534154 TO ,,,parent%
 
 bar_count% =0
 WHILE bar_count% <fix_num%
  IF parent% =fix_info%(bar_count%,0) THEN

   FOR i% =0 TO 16 STEP 4
    Q%!(20+i%) =Q%!i%
   NEXT
   Q%!32 =parent% :REM win h

   REM menu pressed, if so send to parent
   IF Q%!8 =%010 THEN
    Q%!36 =-1    :REM icon h
    SYS"Wimp_SendMessage",6,Q% +20,parent%
   ELSE
    CASE (Q%!16) -1 OF
    WHEN 1:REM if CANCEL, send close message
           SYS"Wimp_SendMessage",3,Q% +20 +12,parent%
    WHEN 0:REM if OKAY
           Q%!36 =fix_info%(bar_count%,1) :REM icon h
           SYS"Wimp_SendMessage",6,Q% +20,parent%
    ENDCASE
   ENDIF

  ENDIF
  bar_count% +=1
 ENDWHILE
ENDPROC
:
DEF PROCfix_help(Q%)
LOCAL pos%,icon%
IF FNfix_trans(Q%!32,2,pos%) THEN
 icon% =(Q%!36) -1
 IF icon% >-1 AND icon% <2 THEN
  help$ =fix_help$(pos%,icon%)
  Q%!(40 +0) =(24 +LEN(help$) +1) AND NOT 3
  Q%!(40 +12) =Q%!8
  Q%!(40 +16) =&503 :REM Message_HelpReply
  $(Q% +40 +20) =help$+CHR$(0)
  SYS"Wimp_SendMessage",17,Q% +40,Q%!4
 ENDIF
ENDIF
ENDPROC
:
DEF PROCfix_sethelp(win%,icon%,help$)
 LOCAL pos%
 IF FNfix_trans(win%,0,pos%) THEN
  fix_help$(pos%,icon%) =help$
 ENDIF
ENDPROC
:
DEF PROCfix_setbutton(win%,icon%,button$)
 LOCAL bar%
 IF FNfix_trans(win%,0,pos%) THEN
  bar% =fix_info%(pos%,2)
  PROCset_string(bar%,icon% +1,button$)
 ENDIF
ENDPROC
:
DEF FNfix_trans(win%,type%,RETURN bar_count%)
 bar_count% =0
 WHILE bar_count% <fix_num%
  IF win% =fix_info%(bar_count%,type%) THEN =TRUE
  bar_count% +=1
 ENDWHILE
=FALSE
:
DEF FNfix_key(Q%)
 IF FNfix_trans(Q%!0,0,null%) THEN
  CASE Q%!24 OF
  WHEN &01B,&1A2
   REM escape or CTRL+f2
   REM close current window
   SYS"Wimp_SendMessage",3,Q%,!Q%
   =TRUE
  ENDCASE
 ENDIF
=FALSE

REM *************************************************************************
@


1.3
log
@Iconbar menu now runs configure plugin to set time and date.
* Alarm was the only (desktop) way to set this central system concept (time) which is out of keeping with the other system settings which are set with !Configure.
* Removed 'Find' alarm option, it's usefulness was limited by only finding a match if the exact time of the alarm was known (to the nearest minute!), in which case just scrolling down the alarm list is simpler.
Eliminated some never used variables as reported by 'squish' as warnings.
Tagged as 'Alarm-2_86-pre1'
@
text
@a38 1
 LOCAL c%,d%
d466 1
a466 1
 form$ =FNread_string(setup%,30)
@


1.2
log
@Minor style guide fixes.
Warning on quitting -> save button should be a default action button.
Removed RISC OS 2 Wimp support: use of territory manager
and ResourceFS (neither of which are in RISC OS 2) make the run time
check for old WindowManager versions futile. For reference, RISC OS 3.10
came with WindowManager 3.16 in ROM.
Fix wrong help lookup on text labels in the setup dialogue due to icon block offset typo.

Version 2.85. Tagged as 'Alarm-2_85'
@
text
@a210 9
DEFFNenum_tasks(RETURN context%,RETURN th%,RETURN taskname$,RETURN slotsize%,RETURN flags%)
 SYS"TaskManager_EnumerateTasks",context%,Q%,16 TO context%
 IF context% <0 THEN =FALSE
 th%       =Q%!0
 taskname$ =FNrtoz(Q%!4)
 slotsize% =Q%!8
 flags%    =Q%!12
=TRUE
:
d330 2
a331 2
DEFFNmsg_1(T$,S$)
=FNmsg_4(T$,S$,"","","")
d842 1
a842 1
 LOCAL M%,m$,I%,maxlen%
d1058 8
@


1.1
log
@Divide up source file into smaller pieces
Correction to !Help
Tested briefly, still runs and alarms still go off.

Version 2.84. Tagged as 'Alarm-2_84'
@
text
@d86 1
a86 1
 LOCAL size_x%,size_y%,offscreen%
d857 1
a857 1
 IF wimpversion% < 316 OR LENmenutitle$ <= 12 THEN
d881 1
a881 1
 IF wimpversion% < 316 OR LENmenutitle$ <= 12 THEN
d930 1
a930 1
 IF wimpversion% < 306 OR (LEN($menu%) <= 12) THEN
@

