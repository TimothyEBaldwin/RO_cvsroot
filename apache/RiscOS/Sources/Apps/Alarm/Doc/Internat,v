head	4.1;
branch	4.1.1;
access;
symbols
	Alarm-2_93:4.1.1.1
	Alarm-2_92:4.1.1.1
	Alarm-2_91:4.1.1.1
	Alarm-2_90:4.1.1.1
	Alarm-2_89:4.1.1.1
	Alarm-2_88:4.1.1.1
	Alarm-2_87:4.1.1.1
	Alarm-2_86:4.1.1.1
	Alarm-2_86-pre2:4.1.1.1
	Alarm-2_86-pre1:4.1.1.1
	Alarm-2_85:4.1.1.1
	Alarm-2_84:4.1.1.1
	Alarm-2_83:4.1.1.1
	Alarm-2_82:4.1.1.1
	Alarm-2_81:4.1.1.1
	Alarm-2_80:4.1.1.1
	Alarm-2_79:4.1.1.1
	Alarm-2_78:4.1.1.1
	Alarm-2_77:4.1.1.1
	Alarm-2_76:4.1.1.1
	Alarm-2_75:4.1.1.1
	RO_5_07:4.1.1.1
	Alarm-2_74:4.1.1.1
	Alarm-2_73:4.1.1.1
	Alarm-2_72:4.1.1.1
	Ursula_merge:4.1.1.1
	Alarm-2_71:4.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.1.1
	Ursula_RiscPC:4.1.1.1.0.6
	rthornb_UrsulaBuild-19Aug1998:4.1.1.1
	UrsulaBuild_FinalSoftload:4.1.1.1
	rthornb_UrsulaBuild-12Aug1998:4.1.1.1
	aglover_UrsulaBuild-05Aug1998:4.1.1.1
	rthornb_UrsulaBuild-29Jul1998:4.1.1.1
	rthornb_UrsulaBuild-22Jul1998:4.1.1.1
	rthornb_UrsulaBuild-15Jul1998:4.1.1.1
	rthornb_UrsulaBuild-07Jul1998:4.1.1.1
	rthornb_UrsulaBuild-17Jun1998:4.1.1.1
	rthornb_UrsulaBuild-10Jun1998:4.1.1.1
	rthornb_UrsulaBuild-03Jun1998:4.1.1.1
	rthornb_UrsulaBuild-27May1998:4.1.1.1
	rthornb_UrsulaBuild-21May1998:4.1.1.1
	rthornb_UrsulaBuild_01May1998:4.1.1.1
	Daytona:4.1.1.1.0.4
	Daytona_bp:4.1.1.1
	Ursula:4.1.1.1.0.2
	Ursula_bp:4.1.1.1
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.17.49;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.17.49;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.13.48;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@* when an alarm is loaded into memory from an alarm file, it is validated to
  ensure that the alarm is falling into a valid day of the week
  (PROCvalidate_alarm). This is achieved by making the alarm go BACKWARDS
  until it is valid.

* when the user manipulates the alarm/clock windows,
  PROCchange_date/month/year are called as appropriate. These all work the
  same way - the five byte time is broken down into its cardinal parts, the
  appropriate cardinal is changed and the five byte time is reconsituted.

* special repeating alarms

* calculating when an alarm repeats:
  PROCincrement_alarm for normal repeating alarms - works by just adding the
  appropriate value to the appropriate cardinal. Possible problems: assumes
  adding 2 will get it into a valid day of the week.
  PROCincrement_special_alarm for special repeating alarms - works by first
  of all seeing if the alarm will go off in this month, if so, we are OK.

* the guts of this system, PROCencode_time, does assume that there are 12
  months in the year. However, if Ran implements an alternative, we may have
  a way out.

* FNvalid_day_of_week needs to know which days are working days.

* deferring alarms works like normal repeating alarms - the appropriate
  offset is added to the appropriate cardinal.

* calculating when an alarm has gone off: this works by turning the
  current five byte time into a string and then comparing that against the
  five byte time of the alarm.
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
