head	1.1;
access;
symbols
	Edit-1_73-1:1.1
	Edit-1_73:1.1
	Edit-1_72:1.1
	Edit-1_71:1.1
	Edit-1_70:1.1;
locks; strict;
comment	@# @;


1.1
date	2014.07.08.08.08.55;	author rsprowson;	state Exp;
branches;
next	;
commitid	0jjt0bI18YC75yHx;


desc
@@


1.1
log
@Eliminate need for EditIntern headers
edit.c:
txtar.h and txtoptmenu.h weren't actually needed since none of their definitions were in use.
txtfile.h was being used for a single function which is now implemented in save_one_txt(), sharing code with the panic file save function.
Accept RISC_OS_PLUS switch (circa RISC OS 3.00) is always true now, and delete some experimental code.
Fix bug in panic file saves to Wimp$ScrapDir, the filetype was being derived from bits 20-31 of the load address rather than 8-19. Panic save also changed to use RISC_OSLib style SWI functions rather than _swi and _swix.
message.c:
Take ownership of the task window defines, same as SrcEdit has for some years.

Tested in a RAM install, printing a 2 line BASIC program out.

Version 1.70. Tagged as 'Edit-1_70'
@
text
@/* Copyright 2014 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -> h.taskwin
 * Title: TaskWindow
 * Purpose: Message protocol definition for task
            communication in task windows.
 * History:
 *   16-May-88: JGT: history started.
 */

#ifndef taskwin_h
#define taskwin_h

#define TaskModuleSWI 0x808C0
typedef enum {
message_input   = TaskModuleSWI,     /* Parent has input for child */
message_output  = TaskModuleSWI + 1, /* Child has output for parent */
message_ego     = TaskModuleSWI + 2, /* Child tells parent its name */
message_morio   = TaskModuleSWI + 3, /* Child dies */
message_morite  = TaskModuleSWI + 4, /* Parent kills child */
message_newtask = TaskModuleSWI + 5, /* External agent requests task window */
message_suspend = TaskModuleSWI + 6, /* Parent halts child */
message_resume  = TaskModuleSWI + 7  /* Parent continues child */
} message_action;
/* This will appear in place of the wimp_msgaction in wimp_msghdr */

typedef struct
{
int    size;
char * data;
} message_data;
/* This will appear in the data field of wimp_msgstr */

extern os_error * message_taskinit(
char *   name,   /* The * comand to start the task, and its parameters */
wimp_t   me);    /* My task handle, passed to the task in STR$~ form */

extern void message_taskwindow(char * comname);

extern void killalltasks(void);

extern void message_init(void);

#endif

/* End taskwin.h */
@
