head	1.2;
access;
symbols
	MakeModes-0_34:1.2
	MakeModes-0_33:1.2
	MakeModes-0_32:1.2
	MakeModes-0_31:1.2
	MakeModes-0_30:1.2
	MakeModes-0_29:1.2
	MakeModes-0_28:1.2
	MakeModes-0_27:1.2
	MakeModes-0_26:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2005.05.19.09.37.41;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.02.13.11.10;	author rsprowson;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.07.02.13.11.10;	author rsprowson;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Rebuildable version of MakeModes.
Detail:
  Application had languished horribly, and seemed to have acquired CR+LF
  line endings everywhere, apart from other ills. I fixed this ages ago
  but forgot to check it in. This should build on an Iyonix under a normal
  build environment and produce a working 32-bit version.
Admin:
  Not tested much - did produce a mode definition or two with it. Seems to
  work as I remember it should on a Risc PC. This does NOT contain Iyonix
  timings - it's still expecting VIDC20.

Version 0.27. Tagged as 'MakeModes-0_27'
@
text
@/* Copyright 2003 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*************************************************
*           Error handling for MakeModes         *
*************************************************/

/* Philip Hazel, August/September 1993 */


#include "makemodes.h"


/* Type for standard error block */

typedef struct {
  int  errnum;
  char errmess[256];
} seb;  


/* List of error messages */

static char *messages[] = {
/*0-4*/
  "Unknown error number %d",
  "Error %d (%s) when calling SWI %X",
  "Internal error: cannot load template %s",
  "Internal error: attempt to set text of unsuitable icon (to %s)",
  "File name must be fully qualified",
/*5-9*/  
  "Two modes have the name \"%s\"",
  "The file \"%s\" could not be opened",
  "MakeModes can only handle one file at a time",
  "Error in mode file \"%s\" at line %d: \"%s\" expected",
  "File \"%s\" contains no mode data",
/*10-14*/  
  "Unexpected end of file \"%s\" after %d line%s",
  "File format %d is not supported",
  "No memory to build menu",
  "Required fields of current mode are not frozen",
  "Timing totals of current mode do not match required fields",
/*15-19*/
  "Cannot delete the only mode",
  "No memory to store new mode",
  "You must choose a unique name for a new mode",
  "The current mode's name is not unique",
  "No memory to store comments",
/*20-24*/
  "Drag comments to the text icon; drag modefiles to the icon bar",
  "A non-empty monitor title is required",
  "The %d%s mode has no name",
  "Drag a text file to the comments icon to replace the modefile comments",
  "No standard modes match the given parameters",
/*25-29*/   
  "Internal error: cannot open monitor types file",
  "No memory to store monitor details",
  "Nonsensical line and/or raster rate values",
  "No monitor types are defined in the MonModes file",
  "Failed to open \"%s\"",
/*30-34*/
  "Internal error: cannot open monitors file"   
};

int maxerror = sizeof(messages)/sizeof(char *);




/*************************************************
*            Generate error message              *
*************************************************/

void error_moan(int n, ...)
{
seb error;
va_list ap;
va_start(ap, n);

if (n > maxerror) n = 0;

error.errnum = n;
vsprintf(error.errmess, messages[n], ap);
va_end(ap);


SWI(Wimp_ReportError, 3, (int)(&error), 1, (int)"MakeModes");
}

/* End of mmerror.c */
@


1.1
log
@Initial revision
@
text
@d15 87
a101 87
/*************************************************
*           Error handling for MakeModes         *
*************************************************/

/* Philip Hazel, August/September 1993 */


#include "makemodes.h"


/* Type for standard error block */

typedef struct {
  int  errnum;
  char errmess[256];
} seb;  


/* List of error messages */

static char *messages[] = {
/*0-4*/
  "Unknown error number %d",
  "Error %d (%s) when calling SWI %X",
  "Internal error: cannot load template %s",
  "Internal error: attempt to set text of unsuitable icon (to %s)",
  "File name must be fully qualified",
/*5-9*/  
  "Two modes have the name \"%s\"",
  "The file \"%s\" could not be opened",
  "MakeModes can only handle one file at a time",
  "Error in mode file \"%s\" at line %d: \"%s\" expected",
  "File \"%s\" contains no mode data",
/*10-14*/  
  "Unexpected end of file \"%s\" after %d line%s",
  "File format %d is not supported",
  "No memory to build menu",
  "Required fields of current mode are not frozen",
  "Timing totals of current mode do not match required fields",
/*15-19*/
  "Cannot delete the only mode",
  "No memory to store new mode",
  "You must choose a unique name for a new mode",
  "The current mode's name is not unique",
  "No memory to store comments",
/*20-24*/
  "Drag comments to the text icon; drag modefiles to the icon bar",
  "A non-empty monitor title is required",
  "The %d%s mode has no name",
  "Drag a text file to the comments icon to replace the modefile comments",
  "No standard modes match the given parameters",
/*25-29*/   
  "Internal error: cannot open monitor types file",
  "No memory to store monitor details",
  "Nonsensical line and/or raster rate values",
  "No monitor types are defined in the MonModes file",
  "Failed to open \"%s\"",
/*30-34*/
  "Internal error: cannot open monitors file"   
};

int maxerror = sizeof(messages)/sizeof(char *);




/*************************************************
*            Generate error message              *
*************************************************/

void error_moan(int n, ...)
{
seb error;
va_list ap;
va_start(ap, n);

if (n > maxerror) n = 0;

error.errnum = n;
vsprintf(error.errmess, messages[n], ap);
va_end(ap);


SWI(Wimp_ReportError, 3, (int)(&error), 1, (int)"MakeModes");
}

/* End of mmerror.c */
@


1.1.1.1
log
@Found under an old piece of carpet - V0.26 of !MakeModes.
To see the original sources (and previous 5 versions) see 2504,066 - this
is a semi tidied up versin.Well,the directories are vaguely right.

@
text
@@
