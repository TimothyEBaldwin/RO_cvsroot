head	4.4;
access;
symbols
	FontEd-0_36:4.4
	FontEd-0_35:4.4
	FontEd-0_34-moved:4.4
	Manager-3_76:4.4
	Manager-3_75:4.4
	Manager-3_74:4.4
	Manager-3_73:4.4
	Manager-3_72:4.4
	Manager-3_71:4.4
	Manager-3_70:4.4
	Manager-3_69:4.4
	Manager-3_68:4.4
	Manager-3_67:4.4
	Manager-3_66:4.4
	Manager-3_65:4.4
	Manager-3_64:4.4
	Manager-3_63:4.4
	Manager-3_62:4.3
	Manager-3_61:4.3
	Manager-3_60:4.3
	RO_5_07:4.3
	Manager-3_59:4.3
	Manager-3_58:4.3
	Manager-3_57:4.3
	Manager-3_56:4.3
	Manager-3_55:4.3
	Manager-3_54:4.3
	Manager-3_53:4.3
	Manager-3_52:4.2
	Manager-3_51:4.2
	Manager-3_50:4.2
	Manager-3_49:4.2
	dellis_autobuild_BaseSW:4.2
	Manager-3_48:4.2
	sbrodie_sedwards_16Mar2000:4.2
	dcotton_autobuild_BaseSW:4.2
	Manager-3_47:4.2
	Manager-3_46:4.2
	Manager-3_45:4.2
	Manager-3_44:4.2
	Manager-3_43:4.2
	Manager-3_42:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Manager-3_41-4_2_2_13:4.1.8.1
	Ursula_RiscPC:4.1.0.10
	Manager-3_41-4_2_2_12:4.1.8.1
	Manager-3_41-4_2_2_11:4.1.8.1
	Manager-3_41-4_2_2_10:4.1.8.1
	Manager-3_41-4_2_2_9:4.1.8.1
	Manager-3_41-4_2_2_8:4.1.8.1
	Manager-3_41-4_2_2_7:4.1.8.1
	Manager-3_41-4_2_2_6:4.1.8.1
	Manager-3_41-4_2_2_5:4.1.8.1
	Manager-3_41-4_2_2_4:4.1
	Manager-3_41-4_2_2_3:4.1
	Manager-3_41-4_2_2_2:4.1
	Manager-3_41-4_2_2_1:4.1
	NRaine:4.1.0.8
	Manager-3_41:4.1
	Ursula_merge:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	bavison_FontManager-3_40:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Manager-3_40-1_1_2_2:4.1.7.1
	smiddle_2Mar1998_Fonts16:4.1.7.1.0.4
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2009.06.11.22.02.49;	author bavison;	state Exp;
branches;
next	4.3;

4.3
date	2002.02.22.13.31.53;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	99.02.18.16.49.24;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.44.02;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1
	4.1.8.1;
next	;

4.1.1.1
date	96.11.05.09.44.02;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.22.51;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.54.25;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.17.07;	author nturton;	state Exp;
branches;
next	;

4.1.8.1
date	98.10.13.12.18.42;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.4
log
@  GET and #include file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both Norcroft and GCC.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 3.62. Not tagged
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*  Title: > c.help
 */

#include "includes.h"
#include "wlink.h"
#include "misc.h"
#include "main.h"

#include "drag.h"
#include "editchar.h"
#include "loadsave.h"
#include "menu.h"
#include "redraw.h"
#include "scaffold.h"
#include "sprites.h"
#include "suspend.h"


/* reply to a help request */

os_error * helprequest(wimp_msgstr *m)
{
  Wind_Link *wlink = findwindlink(m->data.helprequest.m.w);
  char * reply = NULL;

  if (m->data.helprequest.m.w == -2) {
    reply="This is the !FontEd icon.|MClick SELECT to create a new (empty) font.|MDrag a font file here to edit it.";
  } else if (m->data.helprequest.m.w == info_window) {
    reply = "This window gives information about !FontEd.|MA utility which can be used to edit RISC OS font files.|MWritten by Neil Raine and David De Vorchik.";
  } else if (m->data.helprequest.m.w == save_window) {
    reply = "This window allows you to save the font outlines.|MDrag the file icon into a directory viewer to save it, or edit the filename and press Return.";
  } else if (m->data.helprequest.m.w == save_window2) {
    reply = "This window allows you to save the font metrics.|MDrag the file icon into a directory viewer to save it, or edit the filename and press Return.";
  } else if (m->data.helprequest.m.w == origin_window) {
    reply = "This window allows you to experiment by moving the outline origin by fractions of a pixel.";
  } else if (m->data.helprequest.m.w == magnifier_window) {
    reply = "This window allows you to change the zoom factor.|MClick SELECT on the arrows to increase or decrease the numbers, or type in the new numbers and press Return.";
  } else if (m->data.helprequest.m.w == fontsize_window) {
    reply = "This window allows you to create a bitmap font at a certain size.|MPress Return to move between fields.|MPressing Return on the last field starts the operation.";
  } else if (wlink != NULL) {
    switch(wlink->type) {

      case W_FONTINDEX:
           switch (dragbox.type) {
             case DR_NONE:
                  reply = "Double-click SELECT to edit a character.|MDouble-click ADJUST to see it at full size.|MTry dragging with SELECT / ADJUST / Shift / Control and watch the help text.";
                  break;

             case DR_FONT:
                  reply = "Drop the box on another character to replace it with this one.|MDrop it in a skeleton window to view it as a template.|MDrop it on a Draw window to export it.";
                  break;

             case DR_FONTMOVE:
                  reply = "Drop the box on another character to move it to that position.|MAny references (scaffold or composite) to the original character will be relocated.";
                  break;

             case DR_COMPOSITE:
                  reply = "Drop the box on another character to make a composite character.";
                  break;

             case DR_DECOMPOSITE:
                  reply = "Drop the box on a composite character to stop it using this character.";
                  break;

             case DR_BASECHAR:
                  reply = "Drop the box on another character to make it inherit this character's scaffold lines.";
                  break;

             case DR_FILE:
                  reply = "Drop the box in this window to copy the font outlines into it.";
                  break;

             case DR_FILE2:
                  reply = "Drop the box in this window to copy the font metrics into it.";
           }
           break;

      case W_TREE:
           reply = "This window shows how the scaffold lines are inherited.|MDouble-click SELECT to edit a character.|MDrag ADJUST to pass on the character's scaffold lines.";
           break;

      case W_FULL:
           reply = "This window shows what the character looks like at different sizes.|MChange the window height to change the character size.|MClick SELECT to open the skeleton window.";
           break;

      case W_SKELETON:
           switch (dragbox.type) {
             case DR_NONE:
                  {
                    skel_action action;

                    er(getskelaction(&action, wlink, &m->data.helprequest.m));

                    if (action.t != SPB_NONE) {
                      reply = "This is a background sprite handle.|MDrag SELECT to alter the size of the background sprite.|MClick MENU => Display => Handles to allow lines to be drawn.";
                    } else if (action.sel_type != SEL_NONE) {
                      int sctype = (action.scaffindex < 8) ? SEL_SCAFFOLDX : SEL_SCAFFOLDY;
                      if ((action.scaffindex & 7) &&
                          (action.sel_type == sctype) &&
                          (action.scaffindex != thischar->parent->scaffold.index)) {
                        reply = "The red scaffold line is currently selected.|MShift-click SELECT to link this line to the selected one.|MControl-click SELECT to make a linear link.";
                      } else {
                        reply = "The red scaffold line is currently selected.|MClick or drag SELECT to link points to it.|MShift-click SELECT or press Escape to clear the selection.";
                      }
                    } else if (action.edpoint) {
                      switch (action.edpoint->type) {
                        case PT_STRAIGHT:
                             reply = "The pointer is over a control point.|MDrag ADJUST to move it, turning this line into a curve.";
                             break;
                        case PT_CONTROL:
                             reply = "The pointer is over a control point.|MDrag ADJUST to move it.";
                             break;
                        default:
                             if ((action.edpoint->nextpt[0] == NULL) ||
                                 (action.edpoint->nextpt[1] == NULL)) {
                               reply = "The pointer is over an endpoint.|MDrag SELECT to add a new line segment.|MDrag ADJUST to move the point itself.";
                             } else {
                               reply = "The pointer is over a connecting point.|MDrag SELECT to insert a new line segment.|MDrag ADJUST to move the point.";
                             }
                             break;
                      }
                    } else if (action.scaffindex & 7) {
                      reply = "The pointer is over a scaffold control point.|MClick SELECT to select this line.|MDrag SELECT or ADJUST to move the line.";
                    } else if (action.edline) {
                      reply = "The pointer is over a line segment.|MClick ADJUST to select the line, showing its control points.";
                    } else {
                      Char_Block *charptr = wlink->info;
                      if (charptr->backspriteoff) {
                        if (!showsprites) {
                          reply = "Drag SELECT to create a new line segment.|MClick MENU for a list of actions.|MPoint at things to see what they do.|MClick MENU => Display => Bitmap to display the background sprite.";
                        } else {
                          if (!showhandles) {
                          reply = "Drag SELECT to create a new line segment.|MClick MENU for a list of actions.|MPoint at things to see what they do.|MClick MENU => Display => Handles to change the sprite size.";
                          } else {
                          reply = "Drag SELECT to create a new line segment.|MClick MENU for a list of actions.|MPoint at things to see what they do.";
                          }
                        }
                      } else {
                        reply = "Drag SELECT to create a new line segment.|MClick MENU for a list of actions.|MPoint at things to see what they do.|MYou can drag a sprite in here if you like.";
                      }
                    }
                  }
                  break;

             case DR_FONT:
                  reply = "Drop the box in here to display the character as a template.";
                  break;

             case DR_COMPOSITE:
                  reply = "Drop the box in here to add a composite section.";
                  break;

             case DR_DECOMPOSITE:
                  reply = "Drop the box in here to remove a composite section.";
                  break;

             case DR_BASECHAR:
                  reply = "Drop the box in here to inherit the scaffold lines from the ""%s"".";
                  break;

             case DR_POINT:
                  if ((dragbox.d.point.pt->nextpt[0] == NULL) ||
                      (dragbox.d.point.pt->nextpt[1] == NULL)) {
                    reply = "Drop the point when it is in the right position.|MUse the cursor keys to move one pixel at a time.|MIf you drop the point on another endpoint, they will be automatically joined.";
                  } else {
                    reply = "Drop the point when it is in the right position.|MUse the cursor keys to move one pixel at a time.";
                  }
                  break;

             case DR_SCAFFOLDX:
                  {
                    Char_Block *charptr = wlink->info;

                    switch (charptr->scaffold.xwidth[dragbox.d.scaffold.index]) {
                      case WID_LTANGENT:
                           reply = "Drop the line when it is in the right position (on an arc bulging to the left).|MUse the cursor keys to move one pixel at a time.";
                           break;
                      case WID_RTANGENT:
                           reply = "Drop the line when it is in the right position (on an arc bulging to the right).|MUse the cursor keys to move one pixel at a time.";
                           break;
                      default:
                           reply = "Drop the line when it is in the right position (on a vertical stem).|MUse the cursor keys to move one pixel at a time.|MThe black number shows the gap between the lines (maximum 253).";
                    }
                  }
                  break;

             case DR_SCAFFOLDY:
                  {
                    Char_Block *charptr = wlink->info;

                    switch (charptr->scaffold.xwidth[dragbox.d.scaffold.index]) {
                      case WID_LTANGENT:
                           reply = "Drop the line when it is in the right position (on an arc bulging downwards).|MUse the cursor keys to move one pixel at a time.";
                           break;
                      case WID_RTANGENT:
                           reply = "Drop the line when it is in the right position (on an arc bulging upwards).|MUse the cursor keys to move one pixel at a time.";
                           break;
                      default:
                           reply = "Drop the line when it is in the right position (on a horizontal stem).|MUse the cursor keys to move one pixel at a time.|MThe black number shows the gap between the lines (maximum 253).";
                    }
                  }
                  break;

             case DR_RECTSCAFFOLD:
                  reply = "Surround the points you want with the box, then drop it.|MThe enclosed points will be linked to the selected scaffold line.";
                  break;

             case DR_SPRITEBOX:
                  reply = "Drop the handle when it's in the right position.";

           } /* switch */
           break;

      case W_BITMAP:
           reply = "This window shows the pixels making up a bitmap character.|MClick SELECT to make a pixel black.|MClick ADJUST to make it white.";
    }
  }

  if (reply) {
    strcpy(m->data.helpreply.text, reply);
    m->hdr.size = (sizeof(wimp_msghdr) + strlen(m->data.helpreply.text)+1 + 3) & ~3;
    m->hdr.your_ref = m->hdr.my_ref;
    m->hdr.action = wimp_MHELPREPLY;
    er(wimp_sendmessage(wimp_ESEND, m, m->hdr.task));
  }

  return(NULL);
}

@


4.3
log
@* Now handles new "/uXXXXX" identifiers in encoding files.
* 32-bit scaffold table support added (see Doc.BigTables)
* Occasional crash when font cache full fixed (bug introduced at same time
  as, but independently from, Unicode support).

And in FontEd:

* Nice new icon
* 3D look-and-feel
* Solid dragging
* Big table support
* Can now handle more than 15K of scaffolding
* Packing and dependencies fixed - can now reliably load and save our
  Far Eastern fonts (and they load faster, because it doesn't try to
  "correct" the packing)
* Width of font index display now adjustable
* Font index grid now drawn correctly with large fonts
* Font index bitmap generation accelerated

Version 3.53. Tagged as 'Manager-3_53'
@
text
@d18 13
a30 13
#include "h.includes"
#include "h.wlink"
#include "h.misc"
#include "h.main"

#include "h.drag"
#include "h.editchar"
#include "h.loadsave"
#include "h.menu"
#include "h.redraw"
#include "h.scaffold"
#include "h.sprites"
#include "h.suspend"
@


4.2
log
@Unicode Font Manager moved onto trunk.

Version 3.42. Tagged as 'Manager-3_42'
@
text
@d142 1
a142 1
                      if (charptr->backsprite[0]) {
@


4.1
log
@Initial revision
@
text
@d235 1
a235 1
    m->hdr.size = (sizeof(wimp_msghdr) + strlen(m->data.helpreply.text) + 3) & ~3;
@


4.1.8.1
log
@Various changes to cope with large font files (up to 65536 characters).
Loads Encoding files to find character names.
Improved display in 8 or more bpp modes.
@
text
@d235 1
a235 1
    m->hdr.size = (sizeof(wimp_msghdr) + strlen(m->data.helpreply.text)+1 + 3) & ~3;
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
