head	4.4;
access;
symbols
	FontEd-0_36:4.4
	FontEd-0_35:4.4
	FontEd-0_34-moved:4.4
	Manager-3_76:4.4
	Manager-3_75:4.4
	Manager-3_74:4.4
	Manager-3_73:4.4
	Manager-3_72:4.4
	Manager-3_71:4.4
	Manager-3_70:4.4
	Manager-3_69:4.4
	Manager-3_68:4.4
	Manager-3_67:4.4
	Manager-3_66:4.4
	Manager-3_65:4.4
	Manager-3_64:4.4
	Manager-3_63:4.4
	Manager-3_62:4.3
	Manager-3_61:4.3
	Manager-3_60:4.3
	RO_5_07:4.3
	Manager-3_59:4.3
	Manager-3_58:4.3
	Manager-3_57:4.3
	Manager-3_56:4.3
	Manager-3_55:4.3
	Manager-3_54:4.3
	Manager-3_53:4.3
	Manager-3_52:4.2
	Manager-3_51:4.2
	Manager-3_50:4.2
	Manager-3_49:4.2
	dellis_autobuild_BaseSW:4.2
	Manager-3_48:4.2
	sbrodie_sedwards_16Mar2000:4.2
	dcotton_autobuild_BaseSW:4.2
	Manager-3_47:4.2
	Manager-3_46:4.2
	Manager-3_45:4.2
	Manager-3_44:4.2
	Manager-3_43:4.2
	Manager-3_42:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Manager-3_41-4_2_2_13:4.1.8.1
	Ursula_RiscPC:4.1.0.10
	Manager-3_41-4_2_2_12:4.1.8.1
	Manager-3_41-4_2_2_11:4.1.8.1
	Manager-3_41-4_2_2_10:4.1.8.1
	Manager-3_41-4_2_2_9:4.1.8.1
	Manager-3_41-4_2_2_8:4.1.8.1
	Manager-3_41-4_2_2_7:4.1.8.1
	Manager-3_41-4_2_2_6:4.1.8.1
	Manager-3_41-4_2_2_5:4.1.8.1
	Manager-3_41-4_2_2_4:4.1
	Manager-3_41-4_2_2_3:4.1
	Manager-3_41-4_2_2_2:4.1
	Manager-3_41-4_2_2_1:4.1
	NRaine:4.1.0.8
	Manager-3_41:4.1
	Ursula_merge:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	bavison_FontManager-3_40:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Manager-3_40-1_1_2_2:4.1.7.1
	smiddle_2Mar1998_Fonts16:4.1.7.1.0.4
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2009.06.11.22.02.50;	author bavison;	state Exp;
branches;
next	4.3;

4.3
date	2002.02.22.13.31.53;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	99.02.18.16.49.29;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.44.06;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1
	4.1.8.1;
next	;

4.1.1.1
date	96.11.05.09.44.06;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.23.06;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.54.33;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.17.14;	author nturton;	state Exp;
branches;
next	;

4.1.8.1
date	98.10.13.12.18.48;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.4
log
@  GET and #include file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both Norcroft and GCC.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 3.62. Not tagged
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*  Title: > c.misc
 */

#include "includes.h"
#include "misc.h"
#include <signal.h>
#include <kernel.h>

#define sigCLEVER 1
#define sigTRACE 1

/* ---- global variables -------------------------------------------------- */


wimp_w      handle;
int         wimpversion;
int         mousex,mousey;
int         bx,by,
            xsize,ysize,
            gx0,gy0,gx1,gy1,
            x0,y0,x1,y1;
int         minx,miny,maxx,maxy;


/* ---- signal handling (nob off C library) ------------------------------------------- */

typedef void SignalHandler(int);
static SignalHandler *oldhandler;

/* Wimp programs must ignore escape events: they will not happen normally,
   but may happen while (eg) printing is happening; in this case, the
   printer driver will handle the problem, and the wimp program simply
   deals with the returned error */

static void escape_handler(int sig)
{
  (void) signal(sig, &escape_handler);
      /* reinstall ourselves, as SIG_DFL has been restored by the system:
         as defined by the (dumb) ANSI spec! */
}

static void handler(int sig) {
  static char *sigtype[] = { "type = 0",
                                    "abort",
                                    "arithmetic exception",
                                    "illegal instruction",
                                    "escape",
                                    "address exception",
                                    "termination request",
                                    "stack overflow",
                                    "type = 8",
                                    "type = 9" };
  os_error error;
  error.errnum = 0;
  sprintf(
      error.errmess,
      "FontEd has suffered a fatal internal error (%s) and must exit immediately",
      sigtype[sig]);
  wimp_reporterror(&error, 0, "FontEd");
#if sigTRACE
  wimp_closedown();
  bbc_vdu(14);
  oldhandler(sig);    /* get a precious stack backtrace! */
#endif
  cleanexit(0);         /* turns off hourglass */
}


void inithandlers(void)
{
#if sigCLEVER
  oldhandler = signal(SIGABRT, &handler);
  oldhandler = signal(SIGFPE, &handler);
  oldhandler = signal(SIGILL, &handler);
  oldhandler = signal(SIGINT, &escape_handler);
  oldhandler = signal(SIGSEGV, &handler);
  oldhandler = signal(SIGTERM, &handler);
  oldhandler = signal(SIGSTAK, &handler);
#endif
}


os_error * front(wimp_w handle)
{
  wimp_wstate oblk;

  e(return(e),wimp_get_wind_state(handle,&oblk));
  oblk.o.behind = -1;
  return(wimp_open_wind(&oblk.o));
}


os_error * openxy(wimp_w handle, int x, int y)
{
  wimp_wstate oblk;

  e(return(e),wimp_get_wind_state(handle,&oblk));
  oblk.o.behind = -1;
  oblk.o.box.x1 = x + oblk.o.box.x1 - oblk.o.box.x0;
  oblk.o.box.x0 = x;
  oblk.o.box.y0 = y + oblk.o.box.y0 - oblk.o.box.y1;
  oblk.o.box.y1 = y;
  return(wimp_open_wind(&oblk.o));
}


os_error * getwindowstate(wimp_w h)
{
  wimp_wstate oblk;

  e(return(e),wimp_get_wind_state(handle=h,&oblk));
  bx = oblk.o.box.x0 - oblk.o.x;
  by = oblk.o.box.y1 - oblk.o.y;
  xsize = oblk.o.box.x1 - oblk.o.box.x0;
  ysize = oblk.o.box.y1 - oblk.o.box.y0;
  return(NULL);
}


void invalidate(int h,int x0,int y0,int x1,int y1)
{
  wimp_redrawstr rblk;

  rblk.w = h;
  rblk.box.x0 = x0;
  rblk.box.y0 = y0;
  rblk.box.x1 = x1;
  rblk.box.y1 = y1;
  erx(wimp_force_redraw(&rblk));
}


void finish(char *message)
{
  os_error err;

  err.errnum = 1;
  sprintf(err.errmess, "System error: %s", message);
  wimp_reporterror(&err,wimp_ECANCEL | wimp_EHICANCEL,"FontEd");
  cleanexit(0);
}


void errorexit(os_error *e)
{
  os_error err;

  err.errnum = e->errnum;
  sprintf(err.errmess,"System error: %s", e->errmess);
  wimp_reporterror(&err,wimp_ECANCEL | wimp_EHICANCEL,"FontEd");
  cleanexit(0);
}


void cleanexit(int val)
{
  hourglass_off();               /* the hourglass is always on except when Wimp_Poll is called */
  exit(val);
}


os_error *erm(const char *debugmess, os_error *err)
{
  static os_error errbuff;

  if (err != NULL) {
    errbuff.errnum = err->errnum;
    sprintf(errbuff.errmess, "%s: %s", debugmess, err->errmess);
    err = &errbuff;
  }
  return(err);
}


static FILE * tracehandle = NULL;

void mytracef_open(char *filename)
{
  tracehandle = fopen(filename, "w");
}


void mytracef_close(void)
{
  if (tracehandle) fclose(tracehandle);
  tracehandle = NULL;
}


void mytracef(char *format, ...)
{
  va_list args;

  if (tracehandle) {
    va_start(args, format);
    vfprintf(tracehandle, format, args);
    va_end(args);
    fflush(tracehandle);
  }
#if 0
  else
  {
    os_cli("HostVDU");
    bbc_vdu(4);
    va_start(args, format);
    vprintf(format, args);
    va_end(args);
    os_cli("TubeVDU");
  }
#endif
}


void hourglass_on(void) { os_swi0(0x406C0); }
void hourglass_off(void) { os_swi0(0x406C1); }
void hourglass_smash(void) { os_swi0(0x406C2); }
void hourglass_percentage(int p) { os_swi1(0x406C4, p); }


/* Call OS_Find with action:
 *      0x4C    open file for input, must open, not a directory
 *      0x8C    open file for output, must open, not a directory
 *      0xCC    open file for update, must open, not a directory
 */

os_error * osfind(int action, char *filename, int *handlep)
{
  os_regset r;

  r.r[0] = action;
  r.r[1] = (int) filename;
  er(os_swix(OS_Find,&r));
  *handlep = r.r[0];
  return(NULL);
}


/* Call OS_GBPB with action:
 *      1       write data from given pointer
 *      2       write data at current position
 *      3       read data from given pointer
 *      4       read data from current position
 */

os_error * osgbpb(int action, int file_handle, void *data_addr, int buf_len, int ptr)
{
  os_regset r;

  r.r[0] = action;
  r.r[1] = file_handle;
  r.r[2] = (int) data_addr;
  r.r[3] = buf_len;
  r.r[4] = ptr;
  return(os_swix(OS_GBPB,&r));
}


/* Close a file, given the file handle */

os_error * closefile(int h)
{
  os_regset r;

  r.r[0] = 0;
  r.r[1] = h;
  return(os_find(&r));
}


#define wimp_ENOERRORSTRING (1 << 4)
#define wimp_ENOBEEP        (1 << 7)
#define wimp_ENEWERROR      (1 << 8)
#define wimp_EQUESTION      (4 << 9)

int dboxquery(const char *message, const char *buttons)
{
  os_error err;
  _kernel_swi_regs r;

  err.errnum = 1;
  strcpy(err.errmess, message);

  r.r[0] = (int)&err;
  if (wimpversion >= 322) {
    r.r[1] = wimp_ENOERRORSTRING | wimp_ENOBEEP |
             wimp_ENEWERROR | wimp_EQUESTION;
    r.r[3] = (int) "!fonted";
    r.r[4] = (int) wimp_spritearea;
    r.r[5] = (int) buttons;
  }
  else
    r.r[1] = wimp_EOK | wimp_ECANCEL | wimp_ENOERRORSTRING | wimp_ENOBEEP;
  r.r[2] = (int) "Message from Font Editor";
  erx((os_error *)_kernel_swi(Wimp_ReportError,&r,&r));

  return(r.r[1] & 1);
}

void wimp_seteorcolour(int bg, int fg)
{
  wimp_palettestr pal;
  int fgc, bgc;

  wimp_readpalette(&pal);

  colourtran_return_colournumber(pal.c[fg], &fgc);
  colourtran_return_colournumber(pal.c[bg], &bgc);

  os_swi2(OS_SetColour, 3, fgc ^ bgc);
}
@


4.3
log
@* Now handles new "/uXXXXX" identifiers in encoding files.
* 32-bit scaffold table support added (see Doc.BigTables)
* Occasional crash when font cache full fixed (bug introduced at same time
  as, but independently from, Unicode support).

And in FontEd:

* Nice new icon
* 3D look-and-feel
* Solid dragging
* Big table support
* Can now handle more than 15K of scaffolding
* Packing and dependencies fixed - can now reliably load and save our
  Far Eastern fonts (and they load faster, because it doesn't try to
  "correct" the packing)
* Width of font index display now adjustable
* Font index grid now drawn correctly with large fonts
* Font index bitmap generation accelerated

Version 3.53. Tagged as 'Manager-3_53'
@
text
@d18 2
a19 2
#include "h.includes"
#include "h.misc"
@


4.2
log
@Unicode Font Manager moved onto trunk.

Version 3.42. Tagged as 'Manager-3_42'
@
text
@d230 1
@


4.1
log
@Initial revision
@
text
@d30 1
d230 1
d285 2
d288 1
a288 1
int dboxquery(const char *message)
d297 9
a305 1
  r.r[1] = wimp_EOK | wimp_ECANCEL | wimp_ENOERRORSTRING | wimp_ENOBEEP;
d309 1
a309 1
  return(r.r[1]);
d312 12
@


4.1.8.1
log
@Various changes to cope with large font files (up to 65536 characters).
Loads Encoding files to find character names.
Improved display in 8 or more bpp modes.
@
text
@a29 1
int         wimpversion;
a228 1
void hourglass_percentage(int p) { os_swi1(0x406C4, p); }
a282 2
#define wimp_ENEWERROR      (1 << 8)
#define wimp_EQUESTION      (4 << 9)
d284 1
a284 1
int dboxquery(const char *message, const char *buttons)
d293 1
a293 9
  if (wimpversion >= 322) {
    r.r[1] = wimp_ENOERRORSTRING | wimp_ENOBEEP |
             wimp_ENEWERROR | wimp_EQUESTION;
    r.r[3] = (int) "!fonted";
    r.r[4] = (int) wimp_spritearea;
    r.r[5] = (int) buttons;
  }
  else
    r.r[1] = wimp_EOK | wimp_ECANCEL | wimp_ENOERRORSTRING | wimp_ENOBEEP;
d297 1
a297 1
  return(r.r[1] & 1);
a299 12
void wimp_seteorcolour(int bg, int fg)
{
  wimp_palettestr pal;
  int fgc, bgc;

  wimp_readpalette(&pal);

  colourtran_return_colournumber(pal.c[fg], &fgc);
  colourtran_return_colournumber(pal.c[bg], &bgc);

  os_swi2(OS_SetColour, 3, fgc ^ bgc);
}
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
