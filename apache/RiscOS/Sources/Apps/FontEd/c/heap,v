head	4.3;
access;
symbols
	FontEd-0_36:4.3
	FontEd-0_35:4.3
	FontEd-0_34-moved:4.3
	Manager-3_76:4.3
	Manager-3_75:4.3
	Manager-3_74:4.3
	Manager-3_73:4.3
	Manager-3_72:4.3
	Manager-3_71:4.3
	Manager-3_70:4.3
	Manager-3_69:4.3
	Manager-3_68:4.3
	Manager-3_67:4.3
	Manager-3_66:4.3
	Manager-3_65:4.3
	Manager-3_64:4.3
	Manager-3_63:4.3
	Manager-3_62:4.2
	Manager-3_61:4.2
	Manager-3_60:4.2
	RO_5_07:4.2
	Manager-3_59:4.2
	Manager-3_58:4.2
	Manager-3_57:4.2
	Manager-3_56:4.2
	Manager-3_55:4.2
	Manager-3_54:4.2
	Manager-3_53:4.2
	Manager-3_52:4.2
	Manager-3_51:4.2
	Manager-3_50:4.2
	Manager-3_49:4.2
	dellis_autobuild_BaseSW:4.2
	Manager-3_48:4.2
	sbrodie_sedwards_16Mar2000:4.2
	dcotton_autobuild_BaseSW:4.2
	Manager-3_47:4.2
	Manager-3_46:4.2
	Manager-3_45:4.2
	Manager-3_44:4.2
	Manager-3_43:4.2
	Manager-3_42:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Manager-3_41-4_2_2_13:4.1.8.1
	Ursula_RiscPC:4.1.0.10
	Manager-3_41-4_2_2_12:4.1.8.1
	Manager-3_41-4_2_2_11:4.1.8.1
	Manager-3_41-4_2_2_10:4.1.8.1
	Manager-3_41-4_2_2_9:4.1.8.1
	Manager-3_41-4_2_2_8:4.1.8.1
	Manager-3_41-4_2_2_7:4.1.8.1
	Manager-3_41-4_2_2_6:4.1.8.1
	Manager-3_41-4_2_2_5:4.1.8.1
	Manager-3_41-4_2_2_4:4.1
	Manager-3_41-4_2_2_3:4.1
	Manager-3_41-4_2_2_2:4.1
	Manager-3_41-4_2_2_1:4.1
	NRaine:4.1.0.8
	Manager-3_41:4.1
	Ursula_merge:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	bavison_FontManager-3_40:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Manager-3_40-1_1_2_2:4.1.7.1
	smiddle_2Mar1998_Fonts16:4.1.7.1.0.4
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2009.06.11.22.02.49;	author bavison;	state Exp;
branches;
next	4.2;

4.2
date	99.02.18.16.49.24;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.44.01;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1
	4.1.8.1;
next	;

4.1.1.1
date	96.11.05.09.44.01;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.22.50;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.54.24;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.17.06;	author nturton;	state Exp;
branches;
next	;

4.1.8.1
date	98.10.13.12.18.41;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.3
log
@  GET and #include file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both Norcroft and GCC.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 3.62. Not tagged
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Title:    heap.c
 * Purpose:  provide malloc-style heap allocation in a flex block
 * Author:   NR, IDJ
 * Status:   under development
 * History:  20-Mar-89  IDJ created
 *           13-Apr-89  IDJ modified to loop if you can't allocate enough
 *                          space in a single increment to flex block.
 *           14-Apr-89  IDJ applications which repeatedly ask for large
 *                      chunks of memory (without doing much in between) will
 *                      delay events for other applications.
 *            5-May-89  IDJ made slot shrink when doing heap_free()
 *           21-Jun-89  IDJ made shrinking of slot conditional on flag to
 *                      heap_init().
 *           21-Jun-89  IDJ removed different error codes for failures to
 *                      do a heap_alloc.
 *            7-Dec-89  IDJ No need for this stuff anymore. New malloc does
 *                      it all
 *            9-Mar-91  NDR Re-instated separate heap, cos CLib routines
 *                      moving the flex heap is a REAL BAD IDEA!
 *
 */

#include "includes.h"
#include "heap.h"
#include "clib:h.swis"

static int *Heap;
static int heap__initialised=0;
static BOOL heap__shrinkflex = TRUE;

#define heap__BLOCKSIZE 65536

static void heap__check(void)
{
  if(heap__initialised == 0)
    werr(TRUE, msgs_lookup("Heap5:Heap not initialised"));
}

void myheap_init(BOOL heap_shrink)
{
  os_regset r;
  os_error *e;

  /* is the flex block to be shrunk if poss. on heap free */
  heap__shrinkflex = heap_shrink;

  /* create flex block to be used as heap */
  if (!flex_alloc((flex_ptr)&Heap, heap__BLOCKSIZE))
    werr (TRUE, msgs_lookup("heap1:Not enough memory to create heap -- free some application memory"));

  /* initialise heap as being in the flex block we just created */
  r.r[0] = 0;
  r.r[1] = (int) Heap;
  r.r[3] = flex_size((flex_ptr)&Heap);
  if ((e = os_swix(OS_Heap, &r)) != 0)
    werr (TRUE, e->errmess);

  heap__initialised = 1;
}



void *myheap_alloc(unsigned int size)
{
  os_regset r;
  os_error *e;

  heap__check();
  /* see if we can satisfy request in heap as it is */
  r.r[0] = 2;   /* claim block from heap manager */
  r.r[1] = (int) Heap;
  r.r[3] = (int)size;


  while((e = os_swix(OS_Heap, &r)) != 0)
  {
    /* see if failure to allocate block */

    if (e->errnum == 0x0184 /* HeapFail_Alloc */)
    {
      int *oldHeap = Heap;
      if (flex_extend((flex_ptr)&Heap, flex_size((flex_ptr)&Heap)
                                     + heap__BLOCKSIZE))
      {
        if (Heap == oldHeap)    /* heap hasn't moved */
        {
          os_error *ext;

          r.r[0] = 5;
          r.r[1] = (int)Heap;
          r.r[3] = (int)heap__BLOCKSIZE;
          if ((ext = os_swix(OS_Heap, &r)) != 0)
            werr(TRUE, msgs_lookup("heap2:Heap_alloc error: %s"), ext->errmess);

          /*Heap[3] += heap__BLOCKSIZE; Removed - bug fixed in RISCOS */

          r.r[0] = 2;                   /* claim block again */
          r.r[1] = (int) Heap;
          r.r[3] = (int) size;
          /*e = os_swix(OS_Heap, &r);*/
        }
        else
          return (void *)0;  /* flex has moved the heap */
      }
      else
        return (void *)0;  /* the flex area is full (ie. out of memory) */
    }
    else
      werr(1, msgs_lookup("heap3:Fatal internal heap error"));

  }

  if (e == 0)
    return (void *)r.r[2];
  else
    return (void *)0;
}


void myheap_free(void *heapptr)
{
  os_regset r;
  os_error *e;
  static int free_count = 0;
  int change_flex;

  heap__check();
  if(!heap__shrinkflex)
  {
     r.r[0] = 3;   /* release block */
     r.r[1] = (int) Heap;
     r.r[2] = (int) heapptr;
     if((e = os_swix(OS_Heap, &r)) != 0)
       werr(FALSE, msgs_lookup("heap4:Heap_free error: %s"), e->errmess);
  }
  else
  {
    /* examine the size of the block being freed */
    r.r[0] = 6;
    r.r[1] = (int)Heap;
    r.r[2] = (int)heapptr;
    if((e = os_swix(OS_Heap, &r)) != 0)
      werr(FALSE, msgs_lookup("heap4:Heap_free error: %s"), e->errmess);

    /* keep a count of max free space */
    free_count += r.r[3];

    r.r[0] = 3;   /* release block */
    r.r[1] = (int) Heap;
    r.r[2] = (int) heapptr;
    if((e = os_swix(OS_Heap, &r)) != 0)
      werr(FALSE, msgs_lookup("heap4:Heap_free error: %s"), e->errmess);

    r.r[0] = 5;   /* extend heap (with neg. increment to shrink) */
    r.r[1] = (int)Heap;
    r.r[3] = -free_count;
    if((e = os_swix(OS_Heap, &r)) != 0)
      change_flex = r.r[3]; /* a positive value if failed */
    else
      change_flex = -r.r[3]; /* a negative (preserved) value if ok */
    free_count -= change_flex; /* amend count accordingly */
    flex_extend((flex_ptr)&Heap, flex_size((flex_ptr)&Heap)
                                       - change_flex);
  }
}

@


4.2
log
@Unicode Font Manager moved onto trunk.

Version 3.42. Tagged as 'Manager-3_42'
@
text
@d38 2
a39 2
#include "h.includes"
#include "h.heap"
@


4.1
log
@Initial revision
@
text
@d46 1
a46 1
#define heap__BLOCKSIZE 4096
d58 1
a58 1
   
d65 1
a65 1
  
d88 2
a89 2
  
 
d97 1
a97 1
      if (flex_extend((flex_ptr)&Heap, flex_size((flex_ptr)&Heap) 
d100 1
a100 1
        if (Heap == oldHeap)    /* heap hasn't moved */ 
d108 2
a109 2
            werr(TRUE, msgs_lookup("heap2:Heap_alloc error: %s"), ext->errmess); 
            
d111 2
a112 2
 
          r.r[0] = 2;                   /* claim block again */ 
d115 1
a115 1
          /*e = os_swix(OS_Heap, &r);*/  
d125 1
a125 1
   
d177 1
a177 1
    flex_extend((flex_ptr)&Heap, flex_size((flex_ptr)&Heap) 
@


4.1.8.1
log
@Various changes to cope with large font files (up to 65536 characters).
Loads Encoding files to find character names.
Improved display in 8 or more bpp modes.
@
text
@d46 1
a46 1
#define heap__BLOCKSIZE 65536
d58 1
a58 1

d65 1
a65 1

d88 2
a89 2


d97 1
a97 1
      if (flex_extend((flex_ptr)&Heap, flex_size((flex_ptr)&Heap)
d100 1
a100 1
        if (Heap == oldHeap)    /* heap hasn't moved */
d108 2
a109 2
            werr(TRUE, msgs_lookup("heap2:Heap_alloc error: %s"), ext->errmess);

d111 2
a112 2

          r.r[0] = 2;                   /* claim block again */
d115 1
a115 1
          /*e = os_swix(OS_Heap, &r);*/
d125 1
a125 1

d177 1
a177 1
    flex_extend((flex_ptr)&Heap, flex_size((flex_ptr)&Heap)
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
