head	1.6;
access;
symbols
	SrcEdit-1_34:1.6
	SrcEdit-1_33:1.6
	SrcEdit-1_32:1.6
	SrcEdit-1_31:1.5
	SrcEdit-1_30:1.5
	SrcEdit-1_29:1.5
	SrcEdit-1_28:1.5
	SrcEdit-1_27:1.4
	SrcEdit-1_26:1.4
	SrcEdit-1_25:1.4
	SrcEdit-1_24:1.3
	SrcEdit-1_23:1.2
	SrcEdit-0_02:1.1.1.1
	SrcEdit-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2016.05.05.21.36.29;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	c0krZskCq1FV6l5z;

1.5
date	2014.07.08.08.12.36;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	0NnxCAdRQx7p6yHx;

1.4
date	2009.05.31.19.09.25;	author pnaulls;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.15.01.33.38;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	2007.06.10.12.29.42;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.24.17.50.40;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.05.24.17.50.40;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Correction to RMEnsure
The TaskWindow module is not called 'Task' on disc, so in the event that TaskWindow 0.25 was unavailable it'd fail to find it.
Not tested.

Version 1.32. Tagged as 'SrcEdit-1_32'
@
text
@/* Copyright 2007 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -> c.Edit
 * Title: Edit
 * Purpose: main driving program for text editor.
 * History:
 *   13-Mar-88: WRS: history started.
 *    1-Jun-90: NDR: Check for Message_DataOpen with estimated size <= -2, and load untitled
 *   08-Nov-90: IDJ: major surgery to merge sources with SrcEdit (the DDE editor)
 *                   if SRCEDIT is #defined during compilation, then this makes !SrcEdit
 *                   otherwise it is plain old Edit
 *   07-Mar-91: IDJ: use flex_budge on startup
 *
 *   Re-release
 *   12-Nov-91: IDJ: fixed int help message from iconbar (DDE-0812)
 *   14-Nov-91: IDJ: cache mode vars on a mode change (DDE-0859)
 *   11-Jun-07: CGR: Basic Editing added, Create more filetypes and unnamed filetype
 */

#define BOOL int
#define TRUE 1
#define FALSE 0

#define BASIC TRUE


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include "kernel.h"
#include "utils.h"

#include "akbd.h"
#include "flex.h"
#include "os.h"
#include "swis.h"
#include "wimp.h"
#include "sprite.h"
#include "wimpt.h"
#include "werr.h"
#include "win.h"
#include "menu.h"
#include "template.h"
#include "dbox.h"
#include "txt.h"
#include "txtscrap.h"
#include "typdat.h"
#include "txtedit.h"
#include "event.h"
#include "res.h"
#include "resspr.h"
#include "trace.h"
#include "dboxquery.h"
#include "baricon.h"
#include "xferrecv.h"
#include "msgs.h"
#include "help.h"
#include "txtopt.h"
#include <limits.h>

#include "taskwin.h"
#include "editv.h"

#ifdef SRCEDIT

#include "languages.h"
#include "options.h"
#include "bool.h"
#include "multiedit.h"
#include "upcalls.h"
#include "throwback.h"
#include "DDEswis.h"
#include "saveall.h"
#include "langhelp.h"

#endif


/* defines for editors - Edit and SrcEdit main differences are collected here */

static menu edit__iconmenu = 0;

#ifdef SRCEDIT

   #define EDITOR_NAME    "!SrcEdit"
   #define EDITOR_DIR     "<SrcEdit$Dir>"
   #define EDITOR_OBEYDIR "SrcEdit$Dir"
   #define EDITOR_OPTIONS "SrcEdit$Options"
   #define EDITOR_TASK    "SrcEdit"

   #define MProg         1
   #define MSaveAll      2
   #define MSaveOptions  3
   #define MOptions      4
   #define MCreate       5
   #define MQuit         6

   #define MText     1
   #define MData     2
   #define MExec     3
   #define MObey     4
   #define MMake     5
   #define MTask     6
   #define MTaskObey 7
   #define MBasic    8
   #define MWrite    9


#else

   #define EDITOR_NAME    "!Edit"
   #define EDITOR_DIR     "<Edit$Dir>"
   #define EDITOR_OBEYDIR "Edit$Dir"
   #define EDITOR_OPTIONS "Edit$Options"
   #define EDITOR_TASK    "Edit"

   #define MProg   1
   #define MCreate 2
   #define MQuit   3

   #define MText 1
   #define MData 2
   #define MExec 3
   #define MObey 4
   #define MTask 5

#endif

static char filetypebuff[10] = "";

/* -------- Icon Bar Icon. -------- */

static void edit__clickproc(wimp_i i)
{
  i=i;
  txtedit_new("", 0xfff);
}



static void edit__iconmenuproc(void *handle, char *hit)
{
  txtedit_state *s;

  handle=handle;

  switch (hit[0])
  {
     case MProg:
        editv_infoaboutprogram();
        break;

#ifdef SRCEDIT

/* --- main menu entries which only apply to SrcEdit --- */

      case MSaveAll:
        saveall_savethem();
        break;

      case MSaveOptions:
        options_save();
        break;

      case MOptions:
        if (hit[1] != 0)
           options_menu_processor(handle, hit+1);
        break;

#endif

     case MCreate:
        switch (hit[1])
        {
           case MText:
              s = txtedit_new("", 0xfff);
              break;

           case MData:
              s = txtedit_new("", 0xffd);
              break;

           case MExec:
              s = txtedit_new("", 0xffe);
              break;

           case MObey:
              s = txtedit_new("", 0xfeb);
              if (s != 0)
              break;

#ifdef SRCEDIT

           case MMake:
             s = txtedit_new("", 0xfe1);
             break;

#endif

           case MTask:
              if (wimpt_complain(os_cli
#ifdef SRCEDIT
                  ("RMEnsure TaskWindow 0.25 RMLoad System:Modules.TaskWindow")
#else
                  ("RMEnsure TaskWindow 0 RMLoad "EDITOR_DIR".TaskWindow")
#endif
                  ) == 0)
              {
                message_taskwindow("ShellCLI_Task");
              };
              break;
           case MTaskObey:
             s = txtedit_new("", 0xfd7);
             break;
           case MBasic:
             s = txtedit_new("", 0xffb);
             break;
           case MWrite:
             { os_regset r;
               char *p = filetypebuff;

               while (*p >= ' ' && p-filetypebuff < 9) p++;
               *p = 0;

               r.r[0] = 31;
               r.r[1] = (int)filetypebuff;
               if (wimpt_complain(os_swix(OS_FSControl, &r)) == 0) {
                 wimp_create_menu((wimp_menustr*)-1, 0, 0);
                 s = txtedit_new("", r.r[2]);
               }
             }
             break;
       }
       break;

     case MQuit:
       if (txtedit_mayquit()) exit(0);
       break;
  }
}


/* --------------------------- the main menu maker for SrcEdit ------------------------ */

#ifdef SRCEDIT

static menu edit__menu_maker(void *handle)
{
   menu opts = options_menu_maker(handle);
   handle = handle;
   help_register_handler(help_simplehandler, "IHELP");
   if (edit__iconmenu == 0)
   {
       menu create_submenu;
       edit__iconmenu = menu_new(msgs_lookup("srcedit1:SrcEdit"),
                                msgs_lookup("srcedit2:>Info,Save all files        \x8b\x46\x39,Save options,Options,Create,Quit"));
       create_submenu= menu_new(
           msgs_lookup("srcedit3:Create"),
           msgs_lookup("srcedit4:Text file,Data file,Command file,Obey file,Make file,Task window,TaskObey file,BASIC file,example"));
       menu_make_writeable(create_submenu,MWrite,filetypebuff,9,"a~.");
       { wimp_menuhdr *sizemenu;
         wimp_menuitem *sizeitem;

         sizemenu = (wimp_menuhdr*) menu_syshandle(create_submenu);
         sizeitem = (wimp_menuitem*) (sizemenu+1);
         sizeitem += MWrite-1;
         sizeitem->iconflags &= ~wimp_IHCENTRE;
       }
       menu_submenu(edit__iconmenu, MCreate,create_submenu);
       menu_submenu(edit__iconmenu, MOptions, opts);
   }

   return(edit__iconmenu);
}

#else

/* --------------------------- the main menu maker for Edit ------------------------ */

static menu edit__menu_maker(void *handle)
{
   handle = handle;

   help_register_handler(help_simplehandler, "IHELP");

   if (edit__iconmenu == 0)
   {
       edit__iconmenu = menu_new(msgs_lookup("main1"), msgs_lookup("main2"));
       menu_submenu(edit__iconmenu, MCreate, menu_new(msgs_lookup("main3"), msgs_lookup("main4")));
   }

   return(edit__iconmenu);
}

#endif


static void edit__createicon(void)
{
   baricon(EDITOR_NAME, 1, edit__clickproc);
   event_attachmenumaker(win_ICONBAR, edit__menu_maker, edit__iconmenuproc, 0);
}


/* -------- Desktop saving. -------- */

static os_error * save_desktop(int handle)
{
   char buffer[300];
   char buffer2[256];
   char *ptr = buffer;

   os_read_var_val(EDITOR_OPTIONS, buffer2, sizeof(buffer2));
   if (buffer2[0] != 0)
   {
     sprintf(ptr, "Set "EDITOR_OPTIONS" %s\n", buffer2);
     ptr += strlen(ptr);
   }

   os_read_var_val(EDITOR_OBEYDIR,buffer2,sizeof(buffer2));
   sprintf(ptr, "Run %s\n",buffer2);

   for (ptr=buffer; *ptr; ptr++) {
     os_error * error = os_swi2(OS_BPut, *ptr, handle);
     if (error) return(error);
   }

   return NULL;
}

static void save_one_txt(txt t, int handle)
{
  size_t p = 0;
  char  *a;
  int    n;

  do
  {
    /* Not sure where the dot is, so locate each segment in turn */
    txt_arrayseg(t, p, &a, &n);
    if (n) os_swix4(OS_GBPB, 2, handle, a, n);
    p += n;
  } while(n);
}

/* -------- Background sink for all unclaimed events. -------- */

static void edit__bkg_events(wimp_eventstr *e, void *handle)
{
   handle=handle;

   switch(e->e)
   {
      case wimp_ESEND:
      case wimp_ESENDWANTACK:
         if (e->data.msg.hdr.action == wimp_MPREQUIT)
         {
            txtedit_prequit();
         }
         else if (e->data.msg.hdr.action == wimp_MHELPREQUEST
                    && e->data.msg.data.helprequest.m.w == -2
                   )
         {
            e->data.msg.hdr.your_ref = e->data.msg.hdr.my_ref;
            e->data.msg.hdr.action = wimp_MHELPREPLY;
            e->data.msg.hdr.size = 256; /* be generous! */
#ifdef SRCEDIT
            sprintf(e->data.msg.data.helpreply.text, msgs_lookup("srcedit5"));
#else
            sprintf(e->data.msg.data.helpreply.text, msgs_lookup("main5"));
#endif

            wimpt_noerr(
             wimp_sendmessage(wimp_ESEND, &e->data.msg, e->data.msg.hdr.task));

         }
         else if (help_process(e))
         {
            ; /* already done */
         }
         else if (e->data.msg.hdr.action == wimp_SAVEDESK)
         {
           if (wimpt_complain(save_desktop(e->data.msg.data.savedesk.filehandle)) != 0)
           {
              /* Things went wrong (e.g. disc full on file output): ack the message,
              to stop the closedown sequence. */
              e->data.msg.hdr.your_ref = e->data.msg.hdr.my_ref;
              wimpt_complain(wimp_sendmessage(wimp_EACK, &e->data.msg, e->data.msg.hdr.task));
           }

         }

#if BASIC
    else if (e->data.msg.hdr.action == wimp_MPrintTypeOdd) 
    {
       txtedit_state *s = 0;
       BOOL newtext = FALSE;
       os_regset r;

       if (e->data.msg.data.print.type != 0xffb  /* not basic */)
          return;

       /* --- reply --- */
       e->data.msg.hdr.action = wimp_MPrintTypeKnown;
       e->data.msg.hdr.your_ref = e->data.msg.hdr.my_ref;
       if (wimpt_complain(wimp_sendmessage(wimp_ESEND, &e->data.msg, e->data.msg.hdr.task)))
          return;

       /* --- load the file --- */
       /* look for it first */
       s = txtedit_getstates();
       while (s != 0)
       {
          if (s != 0 && !cistrcmp(s->filename, e->data.msg.data.print.name))
             break;
          s = s->next;
       }

       if (s == 0 || (s != 0 && (txt_charoptions(s->t) & txt_UPDATED)))
       {
          if ((s = txtedit_new(e->data.msg.data.print.name, 0xfff)) == 0)
             return;
          txt_hide(s->t);
          newtext = TRUE;
       }

       /* --- save to Printer$Temp --- */
       r.r[0] = 0x83; /* Open out, no path */
       r.r[1] = (int)"<Printer$Temp>";
       if (os_find(&r) == NULL)
       {
         int h = r.r[0];

         save_one_txt(s->t, h);

         r.r[0] = 0; /* Close */
         r.r[1] = h;
         os_find(&r);
         os_swix3(OS_File, 18, "<Printer$Temp>", 0xfff);
       }

       if (newtext) txtedit_dispose(s);
    } 

#endif

#ifdef SRCEDIT

         /* --- request to start a throwback sesh --- */

         else if (e->data.msg.hdr.action == MSG_Throwback_Start)
         {
           throwback_new_session(e->data.msg.hdr.task);
         }

         /* --- mode chanfe (recache mode vars) --- */
         else if (e->data.msg.hdr.action == wimp_MMODECHANGE)
         {
            wimpt_checkmode();
         }
#endif
         else
         {

            int estsize;
            int filetype = xferrecv_checkimport(&estsize);
            if (filetype != -1)
            {
               /* drag icon in-store to icon bar. Create window and insert. */
               txtedit_state *s = txtedit_new("", filetype);
               if (s != 0)
               {  /* 14-Dec-88 WRS: check inserted. */
                  if (! txtedit_doimport(s, filetype, estsize))
                    txtedit_dispose(s);
               }
            }
            else
            {
               char *filename;
               BOOL generalload = wimpt_last_event()->data.msg.hdr.action == wimp_MDATAOPEN;
               BOOL untitledgeneral = generalload && wimpt_last_event()->data.msg.data.dataload.size <= -2;
                    /* note that the Filer in RISC OS 2.00 supplies estsize = -1, so we check for -2 */
               filetype = xferrecv_checkinsert(&filename);
               if (filetype == 0xfff || (filetype != -1 && !generalload))
               {
                  if (xferrecv_file_is_safe() && !untitledgeneral)
                  {  /* it's a "real" file, with estsize > -2 */
                     txtedit_state *s;
#ifdef SRCEDIT
                     multiedit_reset_closeit();
#endif
                     s = txtedit_new(filename, filetype);
                     xferrecv_insertfileok();
#ifdef SRCEDIT
                     /* 28-Feb-90: IDJ: see if edit should be cancelled */
                     if (multiedit_closeit())
                         txtedit_dispose(s);
#endif

                  }
                  else
                  {
                     txtedit_state *s;

#ifdef SRCEDIT
                     multiedit_reset_closeit();
#endif

                     s = txtedit_new("", filetype);
                     if (s != 0)
                     {
                        txtedit_doinsertfile(s, filename, FALSE);
                        xferrecv_insertfileok();
#ifdef SRCEDIT
                        /* 28-Feb-90: IDJ: see if edit should be cancelled */
                        if (multiedit_closeit())
                            txtedit_dispose(s);
#endif
                     }
                  }
               }
            }
         }
         break;
      default:
        tracef1("edit: unrecognised event type %i.\n", e->e);
   }
}


#ifdef SRCEDIT

/* -------- exit handler to stop throwback sent to us --- */
static void unregister_throwback(void)
{
   os_swix1(DDEUtils_ThrowbackUnregister, wimpt_task());
}

#endif

/* -------- Main Program. -------- */

int main(int argc, char *argv[])
{
   char *filename;
   argc=argc;

   wimp_corrupt_fp_state_on_poll();
   wimpt_init(EDITOR_TASK);

   flex_init();
#ifdef SRCEDIT
   /* Not necessary with current RISC_OSLib */
   /* _kernel_register_slotextend(flex_budge); */
#endif
   res_init(EDITOR_TASK);
   msgs_init();
   resspr_init();
   template_init();
   dbox_init();
   dboxquery_close(0); /* init */
   dboxquery_quit(0);
#ifdef SRCEDIT
   txtopt_set_name("SrcEditLib");
   languages_init();
   options_init();
#endif
   txt_init();
   txtedit_init();

   edit__createicon();

#ifdef SRCEDIT

   /* register txtedit_state open/close handlers */
   txtedit_register_open_handler(upcalls_open_handler, 0);
   txtedit_register_close_handler(upcalls_close_handler, 0);

#endif
#if BASIC
  {
    int tok, detok;
    char buff[255];

    os_read_var_val("SrcEdit$Detokenise", buff, 255);
    detok = atoi(buff);
    os_read_var_val("SrcEdit$Tokenise", buff, 255);
    tok = atoi(buff);
    txtedit_setBASICaddresses(tok, detok);
    txtedit_setBASICstrip(options_basicstrip()); /* ensure txtedit is in sync with our flag */
    txtedit_setBASICincrement(options_basicincrm());
  }
#endif

   filename = argv[1];
   if (filename != NULL) txtedit_new(filename, 0);

   win_register_event_handler(win_ICONBARLOAD, edit__bkg_events, 0);
   win_claim_unknown_events(win_ICONBARLOAD);
   message_init();
   atexit(killalltasks);

#ifdef SRCEDIT

   /* register ourselves as a throwback task */
   os_swix1(DDEUtils_ThrowbackRegister, wimpt_task());
   atexit(unregister_throwback);

#endif

   while (TRUE)
     event_process();

   return 0;
}
@


1.5
log
@Eliminate need for EditIntern headers
main.c:
New function save_one_txt() removes the need to reach into the internals of RISC_OSLib for a single use of txtfile_saverange().
Swapped 2 uses of _kernel_swi for the RISC_OSLib SWI function os_swix1.
message.c:
Use renamed task window header.

Built, but not tested. Reflects similar change in Edit-1_70.

Version 1.28. Tagged as 'SrcEdit-1_28'
@
text
@d216 1
a216 1
                  ("RMEnsure TaskWindow 0.25 RMLoad <System$Path>modules.Task")
d218 1
a218 1
                  ("RMEnsure TaskWindow 0 RMLoad "EDITOR_DIR".Task")
@


1.4
log
@Normalise include paths
Detail:
 Use Unix style paths for includes
Admin:
 Part of path changes in all C modules in Apps

Version 1.25. Not tagged
@
text
@d74 1
a74 1
#include "message.h"
a75 1
#include "Editintern/txtfile.h"
d344 15
d411 1
a411 1
       typdat our_ty;
d441 13
a453 2
       our_ty = s->ty;
       our_ty.ld |= 0xfff00;
a454 1
       txtfile_saverange(s->t, "<Printer$Temp>", our_ty, 0, INT_MAX);
d549 1
a549 4
   _kernel_swi_regs r;

   r.r[0] = wimpt_task();
   _kernel_swi(DDEUtils_ThrowbackUnregister, &r, &r);
a558 3
#ifdef SRCEDIT
   _kernel_swi_regs r;
#endif
d619 1
a619 2
   r.r[0] = wimpt_task();
   _kernel_swi(DDEUtils_ThrowbackRegister, &r, &r);
@


1.3
log
@ BASIC editing added so that you can replace !Edit

Detail:
 Changes from Colin Granville:
 * BASIC editing added.
 * BASIC options added and saved with other options.
       s       indicates don't strip line numbers.
       n<num>  sets line number increment to num.
 * Added 'Export' file to !Run which sets SrcEdit$Detokenise and
   SrcEdit$Tokenise for BASIC editing.
 * Added creation of BASIC files, TaskObey files and creation by
   name entries on the Create Menu.
 * Changed sprites to RO5 sprites - versions which came with the Acornc/c++
   distribution.
 * Options read from Choices:SrcEdit
 * Options written to <choices$Write>.srcedit.
 * Read-only documents can be printed.
 * Read-only documents can have selections saved and printed.
 * ctrl A selects whole text (should be done by RiscOSLib).
 * version now set by EditId in Messages file - was from templates file.

Admin:
 Tested on Iyonix RO510

Version 1.24. Tagged as 'SrcEdit-1_24'
@
text
@d76 1
a76 1
#include "h.editintern.txtfile"
@


1.2
log
@  Import of SrcEdit 1.23.
Detail:
  Appears to be substantially more complete than the version previously
  imported. Thanks to Rob Sprowson for bringing this to our attention.
Admin:
  Builds, and tested briefly - seems to fix the more obvious bugs that were
  present in the previous version.

Version 1.23. Tagged as 'SrcEdit-1_23'
@
text
@d29 1
d36 3
d44 1
d72 1
d76 1
d112 9
a120 6
   #define MText 1
   #define MData 2
   #define MExec 3
   #define MObey 4
   #define MMake 5
   #define MTask 6
d143 1
d226 21
d268 1
d270 14
a283 5
                                msgs_lookup("srcedit2:>Info,Save all     \x8b\x46\x39,Save options,Options,Create,Quit"));
       menu_submenu(edit__iconmenu, MCreate,
           menu_new(
                     msgs_lookup("srcedit3:Create"),
                     msgs_lookup("srcedit4:Text file,Data file,Command file,Obey file,Make file,Task window")));
d392 44
d575 14
@


1.1
log
@Initial revision
@
text
@d15 3
a17 3
/*
 * Title: c.main
 * Purpose: main driving program for text editor for the DDE and RISC OS.
d20 5
a24 17
 *   13-Dec-89: WRS: menu interactive help added.
 *   14-Dec-89: WRS: data open with size == -1 discards the title string.
 *   05-Dec-90: WRS: "" added round saved Edit$Options.
 *   ----------------------------------------------------------------------------------
 *   26-Feb-90: IDJ: captured by the DDE project (this now becomes our editor, ha ha ha ha!)
 *   26-Feb-90: IDJ: made all references to olde !Edit into !SrcEdit
 *   26-Feb-90: IDJ: changed messages to suit new editor
 *   26-Feb-90: IDJ: added new menu options Save All, Save Options, Options
 *   27-Feb-90: IDJ: added multiple edit checks when opening file
 *   28-Feb-90: IDJ: made use of open-handler for multiedit checks and shortcuts
 *   28-Feb-90: IDJ: added Load Help to Select submenu
 *   12-Mar-90: IDJ: added dealing with throwback msg
 *   25-Mar-90: IDJ: added save all from main menu (+shortcut sh-f9)
 *   26-Mar-90: IDJ: added call to langhelp_init
 *   02-Jul-90: IDJ: removed ref to edit_handle for throwback
 *   03-Jul-90: IDJ: added SWI throwback_register
 *   31-Jul-90: IDJ: added check that throwback module is running
d26 3
a34 1

a39 1
#include "swis.h"
a41 1
#include "bbc.h"
d44 1
a61 1
#include "srceditv.h"
a62 1
#include "message.h"
d68 5
d83 21
d105 6
a110 13
#define MProg         1
#define MSaveAll      2
#define MSaveOptions  3
#define MOptions      4
#define MCreate       5
#define MQuit         6

#define MText 1
#define MData 2
#define MExec 3
#define MObey 4
#define MMake 5
#define MTask 6
d113 1
a113 2
#define SWI_Throwback_Register   0x42585
#define SWI_Throwback_UnRegister 0x42586
d115 17
a132 1
static menu srcedit__iconmenu = 0;
d136 1
a136 1
static void srcedit__clickproc(wimp_i i) 
d139 1
a139 1
  txtedit_new("",0xfff);
d143 2
a144 1
static void srcedit__iconmenuproc(void *handle, char *hit) 
d146 1
a146 1
   txtedit_state *s;
d148 1
a148 1
   handle=handle;
d150 4
a153 4
   switch (hit[0]) 
   {
      case MProg:
        srceditv_infoaboutprogram();
d156 4
d173 3
a175 1
      case MCreate:
d179 2
a180 2
             s = txtedit_new("",0xfff);
             break;
d183 2
a184 7
             s = txtedit_new("",0xfff);
             if (s != 0)
             {
                s->ty.ld &= 0xfff000ff;
                s->ty.ld |= 0x000ffd00;
             }
             break;
d187 2
a188 7
             s = txtedit_new("",0xfff);
             if (s != 0)
             {
                s->ty.ld &= 0xfff000ff;
                s->ty.ld |= 0x000ffe00;
             }
             break;
d191 5
a195 7
             s = txtedit_new("",0xfff);
             if (s != 0)
             {
                s->ty.ld &= 0xfff000ff;
                s->ty.ld |= 0x000feb00;
             }
             break;
d198 1
a198 6
             s = txtedit_new("",0xfff);
             if (s != 0)
             {
                s->ty.ld &= 0xfff000ff;
                s->ty.ld |= 0x000fe100;
             }
d201 2
d204 24
a227 5
             if (wimpt_complain(os_cli("RMEnsure TaskWindow 0 RMLoad <SrcEdit$Dir>.Task")) == 0) 
                 message_taskwindow("ShellCLI_Task");
             break;
        }
        break;
d229 14
a242 2
      case MQuit:
        if (txtedit_mayquit()) exit(0);
d244 2
d248 1
d250 1
d252 1
a252 1
static menu srcedit__menu_maker(void *handle)
d254 9
a262 13
  menu opts = options_menu_maker(handle);
  handle = handle;
  help_register_handler(help_simplehandler, "IHELP");
  if (srcedit__iconmenu == 0)
  {
      srcedit__iconmenu = menu_new(msgs_lookup("srcedit1:SrcEdit"), 
                               msgs_lookup("srcedit2:>Info,Save all     \x8b\x46\x39,Save options,Options,Create,Quit"));
      menu_submenu(srcedit__iconmenu, MCreate, 
          menu_new(
                    msgs_lookup("srcedit3:Create"),
                    msgs_lookup("srcedit4:Text file,Data file,Command file,Obey file,Make file,Task window")));
      menu_submenu(srcedit__iconmenu, MOptions, opts);
  }
d264 1
a264 1
  return(srcedit__iconmenu);
d267 1
d270 1
a270 1
static void srcedit__createicon(void) 
d272 2
a273 2
   baricon("!SrcEdit", 1, srcedit__clickproc);
   event_attachmenumaker(win_ICONBAR, srcedit__menu_maker, srcedit__iconmenuproc, 0);
a276 1

d281 18
a298 18
  char buffer[300];
  char buffer2[256];
  char *ptr;

  os_read_var_val("SrcEdit$Options", buffer2, sizeof(buffer2));
  if (buffer2[0] != 0) {
    sprintf(buffer, "Set SrcEdit$Options \"%s\"\n", buffer2);
  };

  os_read_var_val("SrcEdit$Dir",buffer2,sizeof(buffer2));
  strcat(buffer, "Run ");
  strcat(buffer, buffer2);
  strcat(buffer, "\n");

  for (ptr=buffer; *ptr; ptr++) {
    os_error * error = os_swi2(OS_BPut, *ptr, handle);
    if (error) return(error);
  }
d300 1
a300 1
  return NULL;
d305 1
a305 1
static void srcedit__bkg_events(wimp_eventstr *e, void *handle) 
d307 22
a328 1
  handle=handle;
d330 2
a331 39
  switch(e->e) 
  {
     case wimp_ESEND:
     case wimp_ESENDWANTACK:
       if (e->data.msg.hdr.action == wimp_MPREQUIT) 
       {
         txtedit_prequit();
       } 
       else if (e->data.msg.hdr.action == wimp_MHELPREQUEST
                  && e->data.msg.data.helprequest.m.w == -2)
       {
         e->data.msg.hdr.your_ref = e->data.msg.hdr.my_ref;
         e->data.msg.hdr.action = wimp_MHELPREPLY;
         e->data.msg.hdr.size = 256;
         sprintf(e->data.msg.data.helpreply.text, 
                 msgs_lookup("srcedit5:This is the SrcEdit icon.|MClick SELECT to create a new Text window."));
 
         wimpt_noerr(wimp_sendmessage(wimp_ESEND, &e->data.msg, e->data.msg.hdr.task));

       } 
       else if (help_process(e)) 
       {
          ; /* already done */
       } 
       else if (e->data.msg.hdr.action == wimp_SAVEDESK) 
       {

         if (wimpt_complain(save_desktop(e->data.msg.data.savedesk.filehandle)) != 0) {
           /* Things went wrong (e.g. disc full on file output): ack the message,
           to stop the closedown sequence. */
           e->data.msg.hdr.your_ref = e->data.msg.hdr.my_ref;
           wimpt_complain(wimp_sendmessage(wimp_EACK, &e->data.msg, e->data.msg.hdr.task));
         };

       } 
       else if (e->data.msg.hdr.action == MSG_Throwback_Start)
       {                       
         throwback_session session;
         throwback_msgstr *msg = (throwback_msgstr *)&e->data.msg;
d333 2
a334 2
         /* start throwback session */
         if ((session = throwback_new_session(msg->id)) != 0)
d336 1
a336 2
            msg->hdr.your_ref = msg->hdr.my_ref; 
            wimpt_noerr(wimp_sendmessage(wimp_EACK, &e->data.msg, e->data.msg.hdr.task));
d338 3
a340 9
       }
       else 
       {
         int estsize;
         int filetype = xferrecv_checkimport(&estsize);
         if (filetype != -1) {
           /* drag icon in-store to icon bar. Create window and insert. */
           txtedit_state *s = txtedit_new("",0xfff);
           if (s != 0) 
d342 4
a345 4
             s->ty.ld &= 0xfff000ff;
             s->ty.ld |= filetype * 256;
             if (! txtedit_doimport(s, filetype, estsize))
               txtedit_dispose(s);
d347 8
a354 2
         } 
         else 
d356 32
a387 23
           char *filename;
           BOOL generalload = wimpt_last_event()->data.msg.hdr.action == wimp_MDATAOPEN;
           filetype = xferrecv_checkinsert(&filename);
           if (filetype == 0xfff || (filetype != -1 && !generalload)) 
           {
             if (xferrecv_file_is_safe())
             {
               txtedit_state *s;
               /* 30-Oct-90: IDJ: reset "closeit" flag */
               multiedit_reset_closeit();
               s = txtedit_new(filename,0xfff);
               xferrecv_insertfileok();
               /* 28-Feb-90: IDJ: see if edit should be cancelled */
               if (multiedit_closeit())
                  txtedit_dispose(s);
             }
             else 
             {
               txtedit_state *s;
               /* 30-Oct-90: IDJ: reset "closeit" flag */
               multiedit_reset_closeit();
               s = txtedit_new("",0xfff);
               if (s != 0) 
d389 35
a423 5
                 txtedit_doinsertfile(s, filename, FALSE);
                 xferrecv_insertfileok();
                 /* 28-Feb-90: IDJ: see if edit should be cancelled */
                 if (multiedit_closeit())
                    txtedit_dispose(s);
d425 1
a425 2
             }
           }
d427 4
a430 5
       }
       break;
     default:
       tracef1("edit: unrecognised event type %i.\n", e->e);
  };
d434 2
d439 2
a440 2
   _kernel_swi_regs r; 
   
d442 1
a442 1
   _kernel_swi(SWI_Throwback_UnRegister, &r, &r);
d445 2
d449 1
a449 1
int main(int argc, char *argv[]) 
d452 1
d454 1
d458 1
a458 2
   wimpt_wimpversion(255);
   wimpt_init("SrcEdit");
d461 5
a465 1
   res_init("SrcEdit");
d470 3
a472 1
   dboxquery(0);
d474 3
a478 2
   languages_init();
   options_init();
d480 1
a480 2
   /* initialise for lang-specific help */
   langhelp_init();
d482 1
a482 1
   srcedit__createicon();
d488 2
d491 1
a491 1
   if (filename != NULL) txtedit_new(filename,0xfff);
d493 1
a493 1
   win_register_event_handler(win_ICONBARLOAD, srcedit__bkg_events, 0);
d498 2
a500 1
   wimpt_complain(wimp_starttask("RMEnsure DDEUtils 0 RMRun System:Modules.DDEUtils"));
d502 1
a502 1
   _kernel_swi(SWI_Throwback_Register, &r, &r);
d505 2
@


1.1.1.1
log
@  Initial import of !SrcEdit, exported from the old SrcFiler repository
  and given a modern build structure.
Detail:
  I'm not convinced these are actually the most recent sources. They didn't
  build as-is against a "modern" RISC_OSLib, and I had to substitute the
  !Run/!Boot/Messages etc from the C/C++ tools release to make it work.
  There are still some issues - some menus are incorrectly created, and one
  source file invokes a compiler bug.
Admin:
  Not particularly thoroughly tested.

Version 0.01. Tagged as 'SrcEdit-0_01'
@
text
@@
