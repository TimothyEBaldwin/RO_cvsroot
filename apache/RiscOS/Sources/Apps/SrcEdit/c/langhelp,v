head	1.2;
access;
symbols
	SrcEdit-1_34:1.2
	SrcEdit-1_33:1.2
	SrcEdit-1_32:1.2
	SrcEdit-1_31:1.2
	SrcEdit-1_30:1.2
	SrcEdit-1_29:1.2
	SrcEdit-1_28:1.2
	SrcEdit-1_27:1.2
	SrcEdit-1_26:1.2
	SrcEdit-1_25:1.2
	SrcEdit-1_24:1.2
	SrcEdit-1_23:1.2
	SrcEdit-0_02:1.1.1.1
	SrcEdit-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2007.06.10.12.29.42;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.24.17.50.40;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.05.24.17.50.40;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Import of SrcEdit 1.23.
Detail:
  Appears to be substantially more complete than the version previously
  imported. Thanks to Rob Sprowson for bringing this to our attention.
Admin:
  Builds, and tested briefly - seems to fix the more obvious bugs that were
  present in the previous version.

Version 1.23. Tagged as 'SrcEdit-1_23'
@
text
@/* Copyright 2007 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:    langhelp.c
 * Purpose:  Giving language specific help
 * Author:   IDJ
 * History:  26-Mar-90: IDJ: Created
 *           28-Nov-90: IDJ: changed to use txt code
 *           15-Mar-91: IDJ: use msgs.h
 *
 */

#include <string.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>

#include "akbd.h"
#include "txt.h"
#include "txtscrap.h"
#include "dbox.h"
#include "werr.h"
#include "msgs.h"
#include "win.h"
#include "wimp.h"
#include "wimpt.h"

#include "bool.h"
#include "languages.h"
#include "slist.h"

#include "langhelp.h"

#define MAXLINELEN   256
#define MAXSELECTION 64

#define langhelp_keych '%'
#define langhelp_commentch '#'

#define langhelp__idrchar(c)  (isalnum(c) || c == '_' \
                                          || c == '$' \
                                          || c == '%' )

typedef enum {IGNORE, KEY, HELPLINE} langhelp_state;


static BOOL langhelp__get_selection(char selection[])
{
   txt owner;

   if ((owner = txtscrap_selectowner()) != 0)
   {
      char *a;
      int segsize;
      int n = 0;
      int size;

      if ((size = txt_selectend(owner) - txt_selectstart(owner)) >= MAXSELECTION)
           return FALSE;

      while (n < size)
      {
          txt_arrayseg(owner, txt_selectstart(owner) + n, &a, &segsize);
          segsize = (segsize < size -n) ? segsize : size - n;
          memcpy(&selection[n], a, segsize);
          n += segsize;
      }

      selection[n] = 0;
      return TRUE;
   }

   return FALSE;
}


static void langhelp__getline(FILE *fp, langhelp_state *state, char *line)
{
   int ch, i=0;

   /* get a line of text from the file */
   while ((ch = fgetc(fp)) != '\n' && !feof(fp) && i < MAXLINELEN)
      line[i++] = ch;
   line[i] = '\0';

   /* set state according to first char of line */
   switch(line[0])
   {
      case langhelp_keych:
        *state = KEY;
        break;

      case langhelp_commentch:
      case '\0':
        *state = IGNORE;
        break;

      default:
        *state = HELPLINE;
        break;
   }
}


static void langhelp__txthandler(txt t, void *handle)
{
   txt_eventcode e;
   handle = handle;

   /* **** NOTE: this handler is here to deal with closing, and
      up/down scrolling only - everything else is either ignored
      or is done in the furthest recesses of RISC_OSLib for us
      (IDJ, 28-Nov-90)
   */

   e = txt_get(t);

   if (e & txt_MOUSECODE)   /* mouse drags etc. on window get reported like this */
   {
      /* do nothing */
   }
   else
   {
      switch(e)
      {
         case txt_EXTRACODE + akbd_Sh + akbd_Ctl + akbd_UpK:
                  /* line up */
                  txt_movevertical(t, -1, 1);
                  break;

         case txt_EXTRACODE + akbd_Sh + akbd_UpK:
                  /* "page" up */
                  txt_movevertical(t, -txt_visiblelinecount(t), 1);
                  break;

         case txt_EXTRACODE + akbd_Sh + akbd_Ctl + akbd_DownK:
                  /* line down */
                  txt_movevertical(t, 1, 1);
                  break;

         case txt_EXTRACODE + akbd_Sh + akbd_DownK:
                  /* "page" down */
                  txt_movevertical(t, txt_visiblelinecount(t), 1);
                  break;

         case txt_EXTRACODE + akbd_Fn + 127:
         case akbd_Fn + akbd_Ctl + 2:
                  /* close icon */
                  txt_dispose(&t);
                  break;

         default:
            break;
      }
   }
}


extern void langhelp_gethelp(void)
{
   char selbuffer[MAXSELECTION], *selection, *selend;
   FILE *fp;
   char line[MAXLINELEN], *help_file;
   langhelp_state state = IGNORE;
   BOOL found = FALSE;
   wimp_caretstr caret;
   txt t;

   /* check there is a selection ! */
   if (txtscrap_selectowner() == 0) return;

   /* get selection from txt */
   if (!langhelp__get_selection(selbuffer))
   {
       werr(FALSE, msgs_lookup("langhelp1:Selection limit for help is %d characters"), MAXSELECTION);
       return;
   }

   /* --- get rid of extraneous rubbish --- */
   selection = selbuffer;
   selend = &selbuffer[strlen(selbuffer)-1];
   while (!langhelp__idrchar(*selection)) selection++;
   while (!langhelp__idrchar(*selend) && selend >= selbuffer) selend--;
   if (selend < selbuffer || *selection == 0)
   {
      werr(FALSE, msgs_lookup("langhelp2:No help found for selection"));
      return;
   }
   *(selend+1) = 0;

   /* --- open help file --- */
   if ((help_file = languages_help_location()) != 0 && help_file[0] != 0)
   {
      if ((fp = fopen(help_file, "r")) == 0)
      {
         werr(FALSE, msgs_lookup("langhelp3:Unable to open help file %s"), help_file);
         return;
      }
   }
   else
      return;

   /* --- find the key field in help file --- */
   while (!feof(fp))
   {
      langhelp__getline(fp, &state, line);
      if (state == KEY && !strcmp(selection, &line[1]))
      {
         found = TRUE;
         break;
      }
   }

   /* --- display help window for this entry --- */
   if (found)
   {
      char title[MAXLINELEN];

      /* --- create a txt object --- */
      sprintf(title, msgs_lookup("langhelp4:Help on %s"), selection);
      if ((t = txt_new(title)) == 0)
      {
         werr(FALSE, msgs_lookup("langhelp5:Failed to open window for help"));
         fclose(fp);
         return;
      }

      /* --- before showing the txt, see where the caret is so we can reset it --- */
      wimp_get_caret_pos(&caret);
      txt_show(t);

      /* --- register event handler so we can scroll/close etc. --- */
      txt_eventhandler(t, langhelp__txthandler, 0);

      /* --- insert help info into it --- */
      langhelp__getline(fp, &state, line);
      while (!feof(fp) && state != KEY)
      {
          if (state == HELPLINE)
          {
             txt_insertstring(t, line);
             txt_setdot(t, txt_dot(t) + strlen(line));
             txt_insertchar(t, '\n');
             txt_setdot(t, txt_dot(t)+1);
             txt_setcharoptions(t, txt_CARET, 0);
          }
          langhelp__getline(fp, &state, line);
      }

      /* --- reset caret pos and dot (cos txt_show grabs it) --- */
      txt_setdot(t, 0);
      wimp_set_caret_pos(&caret);
   }
   else
      werr(FALSE, msgs_lookup("langhelp2:No help found for selection"));

   fclose(fp);
}

@


1.1
log
@Initial revision
@
text
@d19 2
d29 1
d36 2
d45 1
a45 3
#define MAXHELPLINES 4
#define MAXLINELEN   64
#define TABLESIZE    27   /* A-Z and other */
d51 3
a53 1
typedef enum {IGNORE, KEY, HELPLINE} state;
d55 1
a55 16
typedef struct langhelp_state
{
   int line;
   state reading_state;
} langhelp_state;

typedef struct langhelp_entry
{
   struct langhelp_entry *next;
   char *key;
   char *lines[MAXHELPLINES];
} langhelp_entry;

static langhelp_entry *langhelp__table[TABLESIZE] = { 0 };
static langhelp_entry *langhelp__current_entry = 0;
static char langhelp__helpfor[32];
d76 1
a76 1
          memcpy(&selection[n], a, segsize);     
d79 1
a79 1
      
d101 1
a101 2
        state->reading_state = KEY;
        state->line = -1;
d106 1
a106 1
        state->reading_state = IGNORE;
d110 1
a110 2
        state->reading_state = HELPLINE;
        state->line++;
d116 1
a116 1
static BOOL langhelp__readaline(FILE *fp, langhelp_state *state)
d118 2
a119 1
   char line[MAXLINELEN];
d121 5
a125 1
   langhelp__getline(fp, state, line);
d127 1
a127 41
   switch(state->reading_state)
   {
      case IGNORE:
         break;

      case KEY:
         /* create new entry in the table */
         {
            int head = (isalpha(line[1]))?toupper(line[1])-'A':TABLESIZE-1;
            langhelp_entry *new_entry;
            int i;

            if ((new_entry = malloc(sizeof(langhelp_entry))) == 0)
            {
               werr(FALSE, msgs_lookup("langhelp5:Not enough space for help"));
               return FALSE;
            }
            langhelp__current_entry = langhelp__table[head] = slist_add(langhelp__table[head], (void *)new_entry);

            if ((langhelp__current_entry->key = malloc(strlen(line))) == 0)
            {
               werr(FALSE, msgs_lookup("langhelp5:Not enough space for help"));
               return FALSE;
            };
            strcpy(langhelp__current_entry->key, &line[1]);
            for (i = 0; i < MAXHELPLINES; i++) new_entry->lines[i] = 0;
         }
         break;

      case HELPLINE:
         /* create new help line in current entry */
         if (state->line < MAXHELPLINES)
         {
            if ((langhelp__current_entry->lines[state->line] = malloc(strlen(line)+1)) == 0)
            {
                werr(FALSE, msgs_lookup("langhelp5:Not enough space for help"));
                return FALSE;
            }
            strcpy(langhelp__current_entry->lines[state->line], line);
         }
         break;
d129 1
a129 17
      default:
         break;
   }

   return TRUE;
}


static BOOL langhelp__create_table()
{
   FILE *help_fp;
   char *help_file;
   langhelp_state state;
   langhelp_entry *entry, *oldnext;
   int i;

   if ((help_file = languages_help_location()) != 0 && help_file[0] != 0)
d131 1
a131 5
      if ((help_fp = fopen(help_file, "r")) == 0)
      {
           werr(FALSE, msgs_lookup("langhelp4:Unable to open help file %s"), help_file);
           return FALSE;
      }
a133 4
      return FALSE;

   /* first delete the old table */
   for (i = 0; i < TABLESIZE; i++)
d135 1
a135 2
      entry = langhelp__table[i];
      while (entry != 0)
d137 28
a164 3
         oldnext = entry->next;
         langhelp__table[i] = slist_remove((void *)langhelp__table[i], (void *)entry);
         entry = oldnext;
a165 29
      langhelp__table[i] = 0;
   }

   state.line = 0;
   state.reading_state = KEY;
   while (!feof(help_fp))
         if (!langhelp__readaline(help_fp, &state)) break;
   fclose(help_fp);
               
   /* save the language we have help for */
   strcpy(langhelp__helpfor, languages_current_name());

   return TRUE;
}


static langhelp_entry *langhelp__search_for(char *key)
{
   langhelp_entry *entry;

   if (key != 0 && key[0] != 0)
      entry = langhelp__table[(isalpha(key[0]))?toupper(key[0])-'A':TABLESIZE-1];
   else
      return 0;

   while (entry != 0)
   {
      if (!strcmp(key, entry->key)) break;
      else entry = entry->next;
a166 39

   return entry;
}


static void langhelp__dboxevents(dbox d, void *handle)
{
   handle = handle;

   switch(dbox_get(d))
   {
      case dbox_CLOSE:
        dbox_dispose(&d);
        break;

      default:
        break;
   }
}


static void langhelp__showdbox(langhelp_entry *entry)
{
   dbox d;
   char title[MAXSELECTION];
   dbox_field f;

   if ((d = dbox_new("Help")) == 0) return;

   strcpy(title, msgs_lookup("langhelp3:Help on "));
   strcat(title, entry->key);

   dbox_eventhandler(d, langhelp__dboxevents, 0);
   dbox_showstatic(d);

   /* display help */
   for (f = 0; f < MAXHELPLINES; f++)
        dbox_setfield(d, f, (entry->lines[f] == 0)?"":entry->lines[f]);
   win_settitle(dbox_syshandle(d), title);
d172 7
a178 2
   char selection[MAXSELECTION];
   langhelp_entry *entry;
d184 1
a184 1
   if (!langhelp__get_selection(selection))
d190 11
a200 3
   /* see if help list has been created for this language */
   if (strcmp(languages_current_name(), langhelp__helpfor))
       if (!langhelp__create_table()) return;
d202 2
a203 2
   /* search for selection in help table */
   if ((entry = langhelp__search_for(selection)) == 0)
d205 7
a211 1
      werr(FALSE, msgs_lookup("langhelp2:No help found for selection"));
d213 10
d225 13
a237 3
   /* display help dbox for this entry */
   langhelp__showdbox(entry);
}
d239 21
d261 6
a266 3
extern void langhelp_init(void)
{
   int i;
d268 1
a268 2
   for (i = 0; i < TABLESIZE; i++) 
       langhelp__table[i] = 0;
d270 1
@


1.1.1.1
log
@  Initial import of !SrcEdit, exported from the old SrcFiler repository
  and given a modern build structure.
Detail:
  I'm not convinced these are actually the most recent sources. They didn't
  build as-is against a "modern" RISC_OSLib, and I had to substitute the
  !Run/!Boot/Messages etc from the C/C++ tools release to make it work.
  There are still some issues - some menus are incorrectly created, and one
  source file invokes a compiler bug.
Admin:
  Not particularly thoroughly tested.

Version 0.01. Tagged as 'SrcEdit-0_01'
@
text
@@
