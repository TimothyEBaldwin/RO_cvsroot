head	1.2;
access;
symbols
	Browse-2_16:1.2
	Browse-2_15:1.2
	Browse-2_14:1.2
	Browse-2_13:1.2
	Browse-2_12:1.2
	Browse-2_11:1.1
	Browse-2_10:1.1
	Browse-2_09:1.1
	ahodgkin_208_i4_2:1.1
	ahodgkin_208_i4:1.1
	ahodgkin_208_i3:1.1
	ahodgkin_208_i2:1.1
	ahodgkin_208_i1:1.1
	ahodgkin_207release:1.1
	ahodgkin_206release:1.1;
locks; strict;
comment	@# @;


1.2
date	2006.03.13.22.06.18;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	98.07.02.11.10.32;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@-------------------------------------------------------------------------------
History
=======

20/05/1998 (ADH): Created.
01/03/2006 (ADH): Updated list of source files and a couple of other bits,
                  though the document really needs a proper full update.
-------------------------------------------------------------------------------

Contents
========

Overview
Potted development history
Why are there 'c' and 'h' directories?
So what's in the sources?

Startup
Polling
Fetching

Closing notes


Overview
========

Browser documentation exists for a variety of people and approaches to the software. In the browser source distribution's 'Docs' directory, 'Notes', for example, covers the user interface and build options, for those wanting to make customised versions of the browser from source (assuming a RISC OS environment). 'User' is a simpler derivative covering just the user interface.

In contast, this file attempts to document the way that the browser works, starting at a high level and working down. The aim is an informal but nonetheless technical level description. What functions are called and how they relate to other functions is described. Detailed lists of arguments for functions, or detailed lists of what functions are called by parts of the code, is not covered - you can just as well read the source (and / or StrongHelp manuals etc.) for that. As a reminder, if using StrongED on a RISC OS machine, then assuming the relevant manuals are installed you should be able to just press F1 when the caret is over a function name to look up help on that function.

The descriptions herein are for the RISC OS version of the browser. Portable derivatives will differ in ways that should be described either by documentation with those versions aimed at that purpose, or by more automatic methods such as diffs of the sources.

I'll now go on to give a quick development history of the browser. It helps to keep things in perspective. This will mention various bits of sources, but doesn't go into much detail about what the files described contain - that will come later.

Note that the code changes frequently, and it can change a lot. This document will always be updated afterwards. Whilst at the time of writing this paragraph everything is current, if by the time you read it something seems wrong, it's probably because it is out of date! All Details Are Subject To Change Without Notice, as they say.


Potted development history
==========================

Browser 1 was designed outside of Acorn for a Desktop product known as Customer. This was aimed mostly at schools, where a simple, reliable browser was needed. It was certainly simple. HTML 2 was just about covered, though its grasp of spacing rules (both horizontally and vertically) were noticably poor.

In the third quarter of 1996 Acorn decided it needed its own browser. Various options were looked at, and in the end the Customer browser was bought in and development work in-house proceeded apace. To this day, a lot of the original Customer code still remains, though there have been many bug fixes and some reorganisations. In particular, a lot of old source lies in:

 * The HTML parsing library, HTMLLib
 * Bits of the image parsing library, ImageLib
 * The fetcher architecture (largely FetchHTML.c and Fetch.c)
 * The internal page structure, tables excepted (principally Reformat.c,
   Redraw.c)
 * The HTML forms library (Forms.c)

ImageLib, the redraw / reformat routines and fetchers have had a lot of modifications, whereas significant sections of HTMLLib and the forms library haven't changed that much.

One problem with the Customer source was that it used an old RISC OS C library called RISC_OSLib, a notoriously buggy and outdated system. Despite its many faults, though, there was a lot of functionality present in the library and some of the lower level operations, which were not to be replaced by more modern alternatives, had to be carried forward. This is what the file 'FromROSLib.c' is for. It is mostly concerned with low level graphics operations (and there's a small assembler veneer to speed things up in certain areas). It's the kind of file that gets rewritten very early on when you want to port to a non-RISC OS system.

There is another fairly common library called OSLib which is still in use and is updated fairly regularly (it's produced by a third party). This is a completely separate and distinct library with no connections to RISC_OSLib. I mention it as you may find some references to this when looking through the browser sources (e.g. top of ToolAction.h).

A lot of the rewriting of the browser involved two tasks. Firstly, moving it to a standard, up to date, fairly small set of reliable libraries. Secondly, moving it away from the templates system to the Toolbox. Templates files just contain window descriptions. They map very closely to the actual structures and items that the RISC OS window manager uses internally. You can't define custom events or create many automatic user interface features with templates - for example, you can't create a button which when activated will open another window.

The Toolbox provides Res files. Like templates, these describe windows, but in a much higher level way than templates. You can define custom events, keyboard shortcuts, a lot of the UI can work automatically, and there is a much more object orientated approach - you can have standard save, scale or print dialogue boxes with a single object rather than creating a generic window and doing all the hard work manually, as you would with templates.

Having got a reliable variant of the Customer browser running with the Toolbox, which by then included frames support, tables were looked at. Acorn contracted this work out. The contractor had a hard job, which is reflected by the way that tables ended up being implemented. Whilst the parser structures are held as a tree (so recursive scanning methods are required to look at them), I'd have preferred to have kept the page and redraw structures flat. Unfortunately this wasn't the case, and the browser spends a lot of time in recursive calls that scan these structures.

Despite the apparent complexity and inefficiency of the tables code, a great deal of effort has gone into it since the early versions and it currently works surprisingly well. In particular, it's capable of handling deeply nested tables swiftly - Navigator 4 and IE 4, in contrast, will typically die with a nesting depth of over 17 or 20 respectively. With table layouts on web pages being increasingly complex, this low memory, high speed approach is useful.

The current Browser 2 architecture is showing its age. Text flow around images or floating tables are more or less impossible given the line / chunk structure of the page (see later). There isn't much of an object model internally, so DHTML would be very tricky. The redraw routines need to work on flat structures for a variety of reasons. Because of such considerations, significant rewrites of large sections of the code may well be undertaken for the next generation architecture (predictably called Browser 3).

At the time of writing, partial JavaScript support is being implemented in the existing browser architecture, largely as practice for the planned full implementation in the next generation version. In addition, changes to the redraw engine to allow PDF export and better DrawFile export have led to the introduction of "user-points". These are a device independent coordinate system which at 100% scaling are the same size as millipoints. Functions to convert between millipoints and OS units etc. exist in Utils.c; more modern and flexible conversion functions for all kinds of units are in Scale.c, though the overall rollout of use of this file to produce a reformatted structure in user-points and allow a freely scalable view has not been completed yet. The reformatter works in OS units and millipoints; the redraw engine does a lot of on the fly conversions for different output devices (screen, Draw, PDF...).


Why are there 'c' and 'h' directories?
======================================

RISC OS does not use filename extensions; it uses a more subtle system of filetypes - numbers in the range 0 to 4095 associated at the filesystem level with files. A set of system variables, 'File$Type_XXX', provide a textual mapping for the numbers. If you have access to a RISC OS machine, press Ctrl+F12 and type 'Show File$*' and press return - you'll see a list of them. Actions are tied to filetypes with other system variables - you can get an idea by typing 'Show Alias$@@*' (yes, 'Dollar-At-Star').

In addition, RISC OS uses a full stop as a directory name specifier, rather than a forwards or backwards slash.

As a consequence, talking a file with a filename extension under RISC OS can be done with a variety of approaches - you can just keep the filename extension but change the '.' to a character allowed in filenames (such as a forward slash, by convention), maybe map the extension to a filetype, and if that works perhaps strip the extension off. The convention of '.' going to '/' creates a simple mapping between Unix paths and RISC OS paths - swap '.' and '/', though there may be other illegal characters to map one way or the other. Older RISC OS filesystems also have a 10 character filename limit and worse, a 77 object per directory limit. As you can imagine, this muddies the waters somewhat!

The C system in RISC OS takes an unusual approach; instead of messing around with extensions, it puts '.c' files in a 'c' directory, '.h' files in an 'h' directory, and assembler (notionally, '.s' files) in an 's' directory. You'll usually hear people still talk about 'About.c', though they mean '.../c/About' in Unix terminology. In the absence of the RISC OS Desktop Filer having a display sort option for 'by filename extension', this is quite useful, as it clearly separates C source, header and assembler source files.

Incidentally, it's worth knowing that in RISC OS pathnames '$' means 'root' and '@@' means 'currently selected directory'. In addition, if you have an application directory (name preceeded with '!'), e.g. '!Boot', you can view the contents of the application directory by holding down Shift and double-clicking on the item in question (without Shift, the application is launched).


Common terms
============

"The fetcher" is often used to refer to the part of the browser that takes data from the Web, passes it to the HTML library for parsing, then passes the structures it produces (HStream structures, often called "tokens") on to the reformat routines ("the reformatter"). The fetcher has a preprocessor which looks at the tokens and does various things before the reformatter gets to see them - it may start image fetches through code in Images.c, launch plug-ins through Object.c, or, say, set flags in the tokens for various reasons - e.g. a token representing a link may have a bit set to show that this link has been visited (so you only have to search the history in the preprocessor, and just check the bit thereafter).

The browser has two plain text files holding various run-time options. The Choices file is the one which gets changed by user interaction with the Choices dialogue box. When saved from a standard RISC OS Desktop version of Browse, it ends up as '$.!Boot.Choices.WWW.Browse.Choices'. The one inside the !Browse application directory then serves as a set of defaults, only used should the copy in !Boot is missing. The Choices file should not be confused with Choices.c, the source file responsible for handling the Choices dialogue box.

The second text file is called Controls. It holds lower level choices and is not meant to be edited by the end user.

The browser also holds a file called Messages, which is similar in format to Choices and Controls. This holds a set of text file resources for the browser. By editing these messages and the Res file, versions of the browser supporting different languages may be produced. It is possible to have one browser with several copies of Messages and Res following a filename convention that determines what countries the files are for, but this is a function of the way RISC OS applications work, not a function of the browser code.

Finally, note that a RISC OS module refers to a piece of code executing on interrupts. Modules provide various services; most of the OS is implemented through them. The parts of Browse that contact servers and deal with the protocols for getting data from them are implemented as completely separate modules. Module routines are called through SWIs - SoftWare Interrupts. It's a hardware feature of the ARM processor used in the Acorn Desktop machines running RISC OS, but the C functions used to invoke SWIs (_swi, _swix and _kernel_swi) can act as veneers under which alternative implementations are provided for different operating systems, should the browser be ported.


So what's in the sources?
=========================

I'm going to deal with core browser code only here. Suffice to say, HTMLLib and ImageLib, and other sundry libraries, can easily be considered black boxes to do tasks that are fairly obvious from the library names and API.

The effective API of any source file can be found by looking at its header file. All sources have a header file of the same name associated with them. There are other headers which are described after the sources below.


Source file name   Purpose
----------------   -------

  About            Create the page given when a URL of 'about:' is requested
  Arrays           Simple array handling
  Authorise        Handle the authorisation dialogue box
  Browser          Largely browser window content related functions -
                   scrolling, finding items in the page, checking what the
                   pointer is over...
  Choices          Handle the Choices dialogue box
  Cookies          Handle the Cookies dialogue box
  CSIM             Client Side Image Map handling functions
  DragBox          [Unfinished] User drag box code (UI stuff, not used at
                   the moment, unimportant)
  Encoding         Handle character set encoding issues
  EventLogs        Handle the event log dialogue box and related UI elements
  Fetch            Mid level fetch functions - deal with structures from the
                   HTML parser and pass them up to higher level items, but
                   don't do much in the way of talking directly to the
                   parsing library or the data fetcher modules. That's
                   done by FetchHTML...
  FetchHTML        Low level fetch functions; talk to the parser, get data
                   from the data fetcher modules, etc.
  FetchPage        High level fetch functions. Kick off fetches, keep them
                   going, shut them down, etc.
  Find             Handle find dialogue box, implementing a lot of its
                   functionality
  FontManage       Deal with the RISC OS font manager - claiming fonts,
                   releasing fonts, choosing fonts based on an internal
                   naming scheme (see comments in the Choices text file -
                   not Choices.c! - for more details), measuring strings,
                   painting text
  Forms            Handle forms; largely self-contained code
  Frames           Deal with frames; quite a lot of UI work dealt with
                   here
  FromROSLib       As described above - useful bits of RISC_OSLib
  Global           Definitions of variables declared in Global.h, with
                   extensive comments on their usage; more or less all
                   globals should be defined in here
  Handlers         Large source containing event handlers for all manner
                   of events, from low level mouse clicks to very specific
                   menu actions and so-forth
  History          Global and local history manager; no significant UI
                   component
  Hotlist          Client-side hotlist manager, lots of UI code too
  Images           Organise internal handling of images - plotting them
                   after ImageLib has done the appropriate translation;
                   fetching of images, running the data through ImageLib;
                   sharing images across pages; filler functions for
                   transparent and/or animated images; etc.
  ImgHistory       History code for images - remembers the size of images
                   where WIDTH and HEIGHT attributes are missing or not
                   conclusive enough (e.g. WIDTH="50%") to cut down on the
                   amout of reformatting that needs to occur if the page
                   is revisited
  ItemInfo         Handle the Item Information dialogue box
  JavaScript       [Unfinished] High level JavaScript interface
  JSconsts         [Unfinished] Fill in string constants etc. for JavaScript
  JSdocument       [Unfinished] Implement the JavaScript Document object
  JSnavigtr        [Unfinished] Implement the JavaScript Navigator object
  JSscreen         [Unfinished] Implement the JavaScript Screen object
  JSURL            [Unfinished] Implement the JavaScript URL / Location
                   objects
  JSutils          Miscellaneous JavaScript specific support utilities
  JSwindow         [Unfinished] Implement the JavaScript Window object
  List             Handle list user interfaces, for e.g. "don't fetch
                   images", "don't accept cookies" etc. configuration
  Main             Application initialisation, environment configuration,
                   and main polling loop
  Markers          Remember positions on the page (in-page bookmarks)
  Memory           Various memory allocation schemes
  Menus            Handle menu selections
  Meta             Handle the META element
  MimeMap          High level interface to the MimeMap module (translates
                   between RISC OS filetype numbers, filename extensions,
                   and MIME types)
  Mouse            Mouse pointer handling
  Multiuser        Support for the (rather odd) Customer multiuser log in /
                   log out scheme
  Object           Similar to 'Images.c', but for the OBJECT element -
                   this is the point where plug-ins will be fired up
  OpenURL          Handle the Open URL dialogue box
  PlugIn           Implementation of the RISC OS based plug-in interface:
                   http://www.acorn.com/browser/specs/plug-in/funcspec.html
  Printing         Deal with the RISC OS printing protocol, calling the
                   redraw engine as needed. Deals also with the Print
                   dialogue box
  PrintStyle       Handle the Print Style dialogue box (various options
                   for printing of a display nature, e.g. do we print
                   foreground images or not, rather than 'how many copies',
                   which is set in the Print dialogue box - see Printing.c)
  Protocols        RISC OS message protocol support; for file transfer, the
                   message part of plug-ins, and so-on
  Redraw           Redrawing the page
  RedrawCore       Veneers and veneer manipulation functions for the lower
                   level graphics operations used by Redraw; changing this
                   table allows 'redrawing' to a Draw file, PDF etc.
  Reformat         Taking the HTML parser structures and turning them into
                   something the redraw engine can deal with more easily
  RMA              An odd RISC OS specific method of memory allocation that
                   allows easy data sharing between applications but on the
                   flip side needs careful controlling to avoid memory leaks
                   - the memory isn't automatically freed if the application
                   closes down or crashes. Needed for plug-ins
  Save             General interface to saving out data from the browser in
                   various formats
  SaveDraw         Back-end to 'Save.c' for saving a web page as a Draw
                   file. Draw is a RISC OS equivalent of a Windows MetaFile,
                   with slightly more features than a typical .wmf file (e.g.
                   it supports bezier curves and embedded JPEGs)
  SaveFile         Handle the Save File dialogue box - there's only ever
                   one, opened transiently (rather like a Windows modal
                   dialogue box, but closes automatically if the user clicks
                   elsewhere rather than insisting upon being dealt with)
  SaveObject       Handle the Save Object dialogue box - there can be many
                   open at once, and they are persistent (don't automatically
                   close, but they aren't modal either)
  SavePDF          Save page as a PDF file, in conjunction with the printing
                   loop - PDF export is native, rather than run through the
                   printer driver, so document hyperlinks can be preserved
  SaveSHelp        [Unfinished] Save pages as StrongHelp manuals
  SaveText         Back-end to 'Save.c' for saving a web page as a plain
                   text file with a few annotations.
  Scale            Coordinate conversion
  SetPBoxes        Part of the Customer multiuser support code
  Tables           Table reformatting
  TGutils          Support functions to help with the TextGadgets module
  TokenUtils       Mostly concerned with finding where HTML parser structures
                   are inside the redraw engine's page display structures
  Toolbars         Handle the browser window toolbars
  Trace            Various trace functions for debug builds
  Unifont          More support for extended character sets
  URIfile          URI file handling
  URLstat          Basically a linked list handler for a particular structure
                   used heavily during fetching objects from the Web
  URLutils         Mostly, manipulation of URLs in various ways
  URLveneer        Veneer to the URL_Fetcher module, the low level data
                   fetcher
  Utils            Miscellaneous utility functions (see Utils.h for an idea
                   of the wide-ranging functionality)
  Windows          Functions generally concerned with manipulation of
                   the actual browser window. This is also where an instance
                   of a browser window complete with all associated data
                   is created and destroyed.

In addition, there are the following extra header files:


Header file name   Purpose
----------------   -------

  Bitfields        Provide large (256 bit) bitfields, originally to support
                   FontManage.c
  ChoicesDefs      Definitions of values stored in the global choices
                   structure
  CtrlDefs         Definitions of values stored in the global controls
                   structure
  Dialler          Acorn has various pieces of dialler software, including
                   this low level module. This header gives the numbers of
                   the various SWIs and status bits etc. that the module
                   supports
  Filetypes        Definitions of a variety of RISC OS filetype numbers
  Limits           Fundamental application limitations
  MiscDefs         Miscellaneous definitions - magic words, sundry flag
                   bits, etc.
  MiscEvents       Definitions of miscellaneous event codes that may be
                   used in the Res file - e.g. open a window. Not all of
                   the definitions here may be appropriately placed...
  NestWimp         Definitions relating to the extended Window Manager
                   functions in RISC OS 4 or later (or softload to earlier
                   versions) colloquially known as the 'Nested WIMP', due
                   to the introduction of parent/child window relationships
  TBEvents         Heavily commented file mapping out the numberspace
                   conventions used by the browser's user-defined events
  ToolAction       Header giving definitions relating to a particular type
                   of UI gadget known as 'ToolAction'.

Finally, there is a file 'ROSLib.s', which is a small piece of assembly code providing some fast calls for FromROSLib.c.


Startup
=======

To begin with, consider Main.c. Note the header files it pulls in:


Header name        Purpose
-----------        -------

  swis.h           Definitions of most of the RISC OS SWIs

  HTMLLib.h        HTML parser API

  wimp.h           Definitions relating to the RISC OS window manager
  wimplib.h        API to the library that interfaces with the RISC OS
                   window manager (it's little more than a set of SWI
                   veneers)
  event.h          Interface to eventlib - more on eventlib later

  svcprint.h       Only of use in debug builds
  Global.h         A crucial file! This declares all of the globals
                   used in the browser and defines several absolutely
                   critical structures
  Utils.h          Most sources include this as the utility functions in
                   Utils.c have a wide range of uses.


At startup, main() calls various functions to read in the Choices and Controls files, and initialise with the Toolbox by calling toolbox_initialise(). This leads to the opening of the application's Messages file in passing - don't be confused by 'open_messages_file()' in Main.c, which opens either the Choices or Controls files only! Various signal handlers are set up to deal with various exception cases, then finally, the main poll loop is entered.


Polling
=======

First, a bit of background.

RISC OS is a cooperative multitasking system, so an application has to make a system call to release control to other tasks. This call is actually made to the window manager, through a SWI called Wimp_Poll or another called Wimp_PollIdle - the latter specifies a minimum return task, so an application can politely say 'have control, and feel free not to return to me for 'x' centiseconds'.

Wimp_Poll returns to the caller as if, from the caller's point of view, it were an ordinary SWI. The fact that the task was paged out and other tasks run in the mean time is not noticed. The SWI fills in a data block and returns a reason code - the data block contents are determined by the reason code.

An application can filter out reason codes it isn't interested in by passing a mask value as one of the parameters to Wimp_Poll. Many applications don't want reason code 0 (the 'null reason code'). This is 'nothing happened'. If an application only ever responds to specific events - a window needs redrawing and has been flagged as needing application help, or is to be moved, or there was a mouse click, etc., then it doesn't need reason code 0.

If an application wants to do background processing, however, it claims null polls (says it wants reason code 0). The Wimp will return to it as soon as possible (or after the time specified to Wimp_PollIdle, if that was called) with a zero reason code. The application may choose this moment to do something. The browser only ever asks for the null reason code if it has background work to do - fetching or reformatting a page or images, handling some kind of animation, etc.

In the browser, a library called eventlib is used to make the interface to Wimp_Poll easier to deal with. This library:

 * Provides an abstraction on top of the Wimp_Poll reason codes, making a
   distinction between the types of events that the reason codes imply

 * Allows registration of functions that will be called for all objects or
   specific objects when certain events happen to them

Consequently, eventlib is they key to the browser. The browser always calls Wimp_PollIdle (through veneer function event_poll_idle). It never bothers to examine the return values of the call, because handlers registered with eventlib will do all the work automatically. There are three types of handlers:

1) Toolbox event handlers (special Wimp reason code 0x200, with the returned
   block of data holding subreason codes - the subreason codes are the values
   that are used in the registration call to eventlib)

2) Wimp message handlers (reason codes 17, 18 and 19) - applications can send
   messages to each other for various reasons (e.g. with reason codes saying
   'This task has started up', 'please quit now', etc.).

3) Wimp event handlers (other reason codes) - typically low level stuff,
   such as Wimp mouse clicks. At this point you're getting Wimp window
   and icon handle information, rather then the Toolbox's higher level
   self, parent and ancestor Object and Component IDs.

A large number of handlers are registered for all objects in the initialisation section of the browser - see initialise_app() in Main.c. After that, handlers for specific objects are registered and deregistered with eventlib as and when needed. For example, in windows_create_browser() in Windows.c, a selection of Wimp event handlers for redraw, window movement, scroll requests and low-level key events are installed. In windows_close_browser(), same source file, event_deregister_wimp_handlers_for_object() is used to get rid of them.


Fetching
========

First, at this point I'll assume you've had a close look at Global.h as mentioned above. Note the browser_data structure.

Every window containing HTML (of which individual frames are an example) has an associated browser_data structure. Note that with frames, there is always a blank window underneath any given group created from a single FRAMESET element and this also has a browser_data structure. A browser_data structure with a non-zero 'nchildren' field means the associated window has no visible contents (it is always obscured by child frames, even if those frames are empty themselves). A browser_data structure with a non-NULL 'ancestor' field is a child, and will behave a little differently from the ancestor browser - for a start, it'll have no attached toolbars. If a browser_data structure is pointed to by the 'ancestor' field of any other browser_data structure, it will never have any parents or ancestors itself. Note, then, that the code:

  {
    browser_data * b = <some browser>;

    if (b->ancestor)
    {
      <some code>
    }
  }

will execute '<some code>' if 'b' is *not* an ancestor itself (it's 'ancestor' field points to one).

With that in mind, we can consider what happens when a fetch starts.

In the standard Desktop build, when a user clicks SELECT (left hand mouse button) on the icon bar icon, windows_create_browser() is called. The icon bar icon is set to raise event 0x20000, or EOpenNewWindow (MiscEvents.h). In Main.c, initialise_app() registers the Windows.c function windows_new_browser() for any object raising this event; windows_new_browser constructs the Home page URL and calls windows_create_browser for that URL.

The windows_create_browser() function mallocs space for a browser_data structure and associated bits and pieces, and fills most of it in. It creates the associated Toolbox window object, registers handlers for it as mentioned above, and a little futher on, fetchpage_new() is called.

This is in FetchPage.c, and is one of several calls with slightly different interfaces that start off fetches (see also e.g. fetchpage_new_add() and fetchpage_new_raw()). This ends up calling fetchpage_preprocessed(). This is where local anchors are dealt with ('#' in URL), JavaScript URLs are sorted out, internal URLs (go forwards, backwards, etc. - basically, hacks created to implement certain functionalities that were required before JavaScript support was added) are handled, and finally either the URI handler is given the URL or fetchpage_postprocessed() is called.

The URI handler is a RISC OS module which sends URIs around the system to see if any application can handle them. "mailto:" URLs are not handled by the browser, so instead, they're given to the URI handler which asks if there's anything else that can. If a mailer which implements the URI message protocol is around, it answers and deals with the URI.

At the end of the day, if the browser is going to handle the URL, fetchpage_postprocessed() gets called one way or the other. This sets up a few 'last minute' flags, records the fetching URL in the browser_data structure, and calls fetchpage_claim_nulls. This sets the browser up to claim null polls, calling:

 * fetchpage_fetch() - FetchPage.c. Central routine. This is what does most
   of the work. An important function.

 * toolbars_animation() - Toolbars.c. Animates the status bar logo whilst
   the browser is not idle. There's a toolbars_animation_drift() function
   which gets optionally registered when the browser goes idle, which
   returns the animation to its first frame (useful for some animation
   designs). If this is flagged in the browser_data structure as registered
   when fetchpage_claim_nulls() is called, it's deregistered, so that
   toolbars_animation() and toolbars_animation_drift() don't interfere.

RISC OS is a co-operative multitasking environment without threads. The two functions above are the kind of things you'd put on their own threads if porting to a multithreaded environment.

The fetchpage_fetch() function is at the top of Fetch.c. This:

 * Sets some priorities to judge how heavily it should load the machine.
   In a multithreaded system, this wouldn't really be relevant.

 * If not all of the data has been fetched from the server, parsed by
   HTMLLib or run through the preprocessor, fetch_fetcher (in Fetch.c)
   will be called. Note, then, that the return result of the
   'fetch_fetching()' call does not mean 'getting data from the
   server' if it returns 1 - it could mean one of up to three things.

 * If there is data from HTMLLib which the reformatter hasn't dealt
   with yet (reformat_reformatting() in Reformat.c returns 1), the
   reformatter is called again (reformat_reformatter(), Reformat.c).

 * If image_count_specific_pending() in Images.c says there are images to
   fetch, the image fetcher routine is called - image_process_null(),
   Images.c. You'll notice some parallels between this and functions
   related to fetch_fetcher() in Fetch.c.

 * The function also deals with shutting down a fetch, making sure that
   the UI is up to date in various ways. If the fetch has completely
   finished, fetchpage_release_nulls() is called. Thereafter,
   fetchpage_fetch() will not be called.


Closing notes
=============

With the above, you basically have an overview of the process the browser goes through with fetching. The rest of it is just a case of following down the calls made by the code. A lot of the UI is set up through event handlers as described, so a close look through initialise_app() is wise. An important source file, as you'll discover, is Handlers.c, where a great deal of the registered handlers reside.

Function naming is largely constructed from a prefix based on the source file name, so finding things should be relatively easy. If it doesn't appear to make sense that way, it's either in Utils.c or Main.c. In any event, a lookup in the StrongHelp manual or a search through the HTML equivalent, if available, will immediately resolve the question.
@


1.1
log
@By request, an intermediate 2.06 check-in. This is not a "proper" release
and will need some Makefile fiddling etc. to swap between JavaScript and
standard builds and so-forth. The Resources files are not all up to date;
only Phoenix and the testbed Browse are more or less current. Right now,
JavaScript doesn't work, SO COMPILE IT OUT. But to make a JavaScript build
for a larf -

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean
 * Add -DJAVASCRIPT to DFLAGS in MakeFile
 * Strip dynamic dependencies from MakeFile
 * Rebuild Phoenix or the Desktop build of Browse
 * In the exported copy, increase the !Run file WimpSlot value; either
   use the appropriate symbols table in 'syms' or use about 960K for
   non-debug, 4600K for debug builds.
 * If the exported copy has an About resource, edit the HTML file inside
   and uncomment the line about JavaScript.
 * Reverse most of the above to rebuild a non-JavaScript copy! :-O

I hope to have much of the above automated soon (either by a new target,
or preferably hackery with the MakeFile).

Here's the change list:

References to 'Phoenix' removed from Ursula build Res file Choices dialogue
help text (only a couple of them). Cookie value display made taller in the
Cookie Query dialogue (prompt field shrunk to accommodate this).

Yikes - ever since markers, "reformat page to fit paper" hasn't done
anything when printing; the reformatter reset the HTML page limits to
the window size at startup! Fixed. Using markers, you can now also reformat
from the top of the visible area and still reformat to fit the paper; the
print dialogue used to grey out the reformat option in this case. It still
does this when printing to the bottom of the visible area, though.

You can drag text files to form writables (single and multiple line,
but NOT password items (deliberately; it's trivial to add this but I
think it'd be a bad idea)). Normally, data is appended up to the limit
specified by the field (unlimited for multiple line items). Holding
down Ctrl replaces the current value entirely (still, again, limited
by maximum field length). The caret is moved from wherever it currently
is and placed at the end of the added data. Note that you *cannot* insert
in the middle of text by placing the caret and dropping.

Things can get distinctly sluggish when you start dragging many Ks of
text file into a multi-line writable, so the keyboard buffer is cleared
for any input code < 32, equal to 127 (backspace - this one is a little
less clear cut, but I think it's probably worthwhile) and anything
> 255. This way, when typing, you don't lose characters; but when moving
around, you don't find the cursor "running away" from you.

Multi-line writables (text areas) would redraw a vertical column taller,
or horizontal column wider than the element covers itself should the
user scroll enough in any one direction (e.g. Ctrl+Up or Ctrl+Down to
go to the top or end of the area). The code working out how much of
the area to redraw by the number of lines or columns moved didn't ensure
it kept within the area. Because an update rather than force redraw is
done, with background blending turned on text around the area would
"thicken". Now fixed.

Form menu entries have (at long last) a space appended to each one, so
the Wimp doesn't get confused and think something is a keyboard shortcut
when someone expresses "Formula 1" as (say) "F1"... Now fill in the menu
width entry from having read the actual VDU character width and spacing,
not that anyone uses the original RO 3.1 Wimp with Browse any more! (The
code existed elsewhere anyway, so it was trivial to add).

Ctrl+U in a multi-line writable clears the contents of the line the caret
is on, but doesn't delete the line itself. Ctrl+J now does this.

DDFLAGS doesn't set ALIAS_URLS - Customer build has this now.

Tiled images were being plotted in the wrong place in some modes (a '+4'
in the starting y coordinate calculations in the three filler / tile
functions should have been '+wimpt_dy()').

MessageTrans lookup buffer extended from 256 to 320 bytes (Limits_Message
in Limits.h), mostly to support Messages files alterations for the About
page.

Spelling error in URI handler menu for Desktop (also known as Ursula,
though this is now something of a misnomer) build corrected. There was
a missing 'l' in 'handler'). StartProxy setting in Choices was 'no' and
is now 'yes'.

Downloading files of sizes over about 20Mb would cause an overflow in
the % calculating code ("(fetched * 100) / file_size" as opposed to
"100 * (fetched / file_size)" with (float) and (int) casts as required.
Percentages now shown to 1dp; Mb displays to 2dp where the file size is
not known.

Download speed is now indicated in Small Fetch windows. Increased the
delay between progress indicator updates as part of this, and modified
Res files to cope (byte counter needs to be enlarged quite a lot). It
isn't shown in normal browser windows because the enlarged byte counter
looks daft in that context (normally, there's never enough information
to fill even half of it).

Adjust-click on an unlinked part of a client side image map could give an
invalid object ID error from accidentally using the return value of a
previous Toolbox call instead of the return result of a call to a fetcher
routine - because given it had a NULL pointer for the URL, there was no
such call made. Corrected in windows_create_browser() and
handle_link_clicks() won't try to do this in the first place anymore.
fetchpage_fetch_targetted() will also warn of such NULL pointers in
TRACE builds.

Submitting a GET form back to the same URL would lead to the query
string getting appended to the fetch URL over and over. form_build_data
now checks to see if there's already a query string in the submission
URL for GET methods and if so, strips it. fetchpage_new_add will do a
similar thing in the case of the additional data starting with '?'.

When following a link, if RefoKeep was 'yes', the page could sometimes
jump to a pre-stored scroll position; it was down to the resize routines
remembering it, but if windows_check_reformat() or windows_remember_size()
didn't actually do a reformat the position was not forgotten. It is now,
so this jumping should no longer occur.

Single character leafnames (e.g. "a.class") used to be reported just as
"Index" in a save dialogue for the object. Fixed.

<P> elements could fail to work as expected in some circumstances. For
example, there would be no gap above '<p> <b>...' - the <b> text doesn't
have the <p> attached, the tag before it does. However, the white space
on this tag gets stripped so it ends up with a NULL text field. This
means that paragraph space is allocated but the text height for the line
thus far is zero. This has been fixed through special case code in
reformat_check_height.

browser_base_url() function added, which through browser_base_callback
can supply a base URL for the current document.

In-page references (URLs with '#something' in them) would fail if the
page contained a BASE tag which pointed elsewhere (that is, the page
would be fetched from its base URL and references would work thereafter;
not very useful for developing sites on your local hard drive). Fixed.
Fixed also the problem where in-page references would fail once after
a forced reload.

Several ultra-stupid bugs in image cross referencing code within
image_update_image fixed:

 - No longer redraws *every* page with the same background when
   *any* of those backgrounds are updated; just if the page with
   the actual image data attached is updated. Doh!

 - Similarly, no longer updates every copy of an image when asked
   to update any of them, only when the one holding the actual image
   data is updated.

 - In the above cases, image array a scanning is avoided wherever
   possible now, whereas it used to happen for any update.

Animated masked GIFs will no longer flicker briefly when they are first
viewed on a page.

Hacky but useful optimisation in Images.c. Local compilation option
'FAST_TOKEN_REFERENCE' controls whether or not the flags word of each
HStream associated with an image_info struct is used in part to store
the image's array index. If so, there's no array scanning to do - this
signficantly speeds up cross referenced image handling. It's still
rather undertested "but it seems to work". The number of bits used for
the array index is controlled by FAST_TOKEN_REFERENCE_SHIFT, and is
currently 20, giving around a 1 million image limit on the browser
and leaving 12 bits for genuine flags (only 3 currently used).

If an error occurred when Message_PlugIn_Opening was received, Browse
would exit early with the message - before it removed the plug-in from
the queue, thus stopping other launches. The error is now reported and
then the item is still removed, preventing this problem.

The BASEHREF entry in the parameters file used for plug-in launching
will now give the contents of any BASE tag in the document before
looking at the display URL, then the fetch URL.

When a new page is visited or a browser window closed, any in progress
fetches for plug-ins are abandoned. They weren't before, which caused
all sorts of problems later on. In addition, any pending plug-in items
in the queue may not have been correctly flushed (the first item may
have been left behind), which can cause mis-firing of the plug-in
engine as it picks up outdated queue items and attemps to launch them.
This has also been fixed.

Fixed problem with asynchronous delivery and reception of the Stream_New
plug-in protocol messages, which previously would be incorrectly handled -
Browse assumed that, as with plug-in launch, only one fetch would be running
at a time (or the message passing between plug-in and fetch window would
occur synchronously). This is not the case, and a variety of problems could
be seen if the system broke down. The most obvious symptom is in Scrap,
where Browse used to leave behind "BTFxxxxx" files on quit.

Intermittent "Invalid object ID" errors cured; the Find dialogue box
handler wasn't clearing its remembered ID, and since Find is a shared
object, that object could get deleted without the Find code
realising.

Corrected mis-spelling of "Parameters" n comment block at top of
about_copy_info_file(), which fouled up the documentation auto-generation.

BuildSHelp will recognise functions indented by 2 spaces, assume they're
indented because of a wrapping #ifdef, and put 'Conditionally compiled.'
under the name of any such functions. It no longer outputs broken manuals
if no functions are found in a source file. More robust to odd input due
to extra EOF checking.

New utility BuildHTML, to generate HTML pages in the same manner as
BuildSHelp, created from BuildSHelp. This was done to support Ferrotec
who'd like StrongHelp-like documentation but don't want to be tied to
Acorn machines (and haven't got any at the time of writing anyway!).
HTML was agreed as a good, easy format to go for.

Have begun to implement JavaScript support. Updated !Boot and !Run[D]
files to define File$Type_F81 and Alias$@@RunType_F81 (0xf81 is a
JavaScript script file, 'JSScript', MIME type application/x-javascript,
common filename extension '.js'.). !Sprites[22] files have the relevant
file icons added. Messages files extended with various tokens for
miscellaneous error messages, error box buttons etc. Created a Browse
About: page section based on the JavaScript filetype - we at last
credit the use of the JPEG group software, LibPNG, etc.
@
text
@d5 3
a7 1
20/05/98 (ADH): Created.
d69 1
a69 1
At the time of writing, partial JavaScript support is being implemented in the existing browser architecture, largely as practice for the planned full implementation in the next generation version.
d112 1
d123 1
d167 2
d171 1
d173 2
a174 3
  Customer          [Deprecated] Nasty hacks for a specific customer of the
                   browser from some time ago that needed a particular
                   JavaScript site working
d202 3
d225 4
d231 1
a232 6
  svcprint         Debug library that pushes information down a piece of
                   hardware known as a 'TML card', an expansion card that
                   connects to another machine and displays results on that
                   second machine. Has various build options to instead
                   display information on the same machine as the running
                   application
d234 1
d240 1
@

