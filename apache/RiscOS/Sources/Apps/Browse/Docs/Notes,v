head	1.11;
access;
symbols
	Browse-2_16:1.11
	Browse-2_15:1.11
	Browse-2_14:1.11
	Browse-2_13:1.11
	Browse-2_12:1.11
	Browse-2_11:1.10
	Browse-2_10:1.10
	Browse-2_09:1.10
	ahodgkin_208_i4_2:1.10
	ahodgkin_208_i4:1.10
	ahodgkin_208_i3:1.10
	ahodgkin_208_i2:1.10
	ahodgkin_208_i1:1.10
	ahodgkin_207release:1.9
	ahodgkin_206release:1.8
	ahodgkin_205release:1.7
	ahodgkin_204release:1.7
	ahodgkin_202release:1.6
	ahodgkin_201release:1.5
	ahodgkin_200release:1.5
	ahodgkin_133beta:1.5
	ahodgkin_132beta:1.5
	ahodgkin_131beta:1.4
	ahodgkin_130beta:1.3
	ahodgkin_129:1.3
	ahodgkin_128beta:1.3
	ahodgkin_128alpha:1.2
	ahodgkin_127beta2:1.2
	ahodgkin_127beta:1.2
	ahodgkin_126beta:1.1
	ahodgkin_AW97patch:1.1
	ahodgkin_AW97:1.1;
locks; strict;
comment	@# @;


1.11
date	2006.03.13.22.06.18;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	99.09.02.13.10.00;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	98.10.13.16.33.14;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	98.07.02.11.10.33;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	98.04.16.08.13.20;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	98.03.20.12.11.38;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	98.02.06.13.53.48;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	98.02.02.13.22.23;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.12.04.11.20.32;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.11.19.10.28.20;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.10.16.13.23.00;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.11
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@-------------------------------------------------------------------------------
History
=======

NB Don't forget to keep the 'User' version of this file updated in parallel!

02/09/97 (ADH): Created and regularly maintained.

03/09/97 (ADH): Restructured a bit, added Contents; introduction renamed
                to Overview, to match other documentation.

05/09/97 (ADH): Merged in some UI stuff from the another UI notes file.

18/09/97 (ADH): Event code and component ID names and numbers updated to match
                new name and numberspacing scheme. This does mean that some
                sections in this document are now reduced to little more than
                repeated 'read the header file' statements...! Split off the
                Scratchpad to a separate file. Saving and loading section made
                much simpler; refers to PRMs and recommended source file
                starting points.

26/09/97 (ADH): Added 'Choices' and 'Controls' file location information.

11/11/97 (ADH): Added 'Key code behaviour' section.

04/12/97 (ADH): Put in information on using a local proxy server as a cache
                (i.e. basically controlling WebServe from the browser!) and
                added to the descriptions of keyboard modifiers.

13/01/98 (ADH): ARROWS_MOVE_OUT compile time option for Forms.c mentioned.

13/03/98 (ADH): Find dialogue box documented.

27/03/98 (ADH): Key code behaviour section extended. Choices / Controls info
                updated.

15/04/98 (ADH): H_DTS_MULTIPLIER local compile time option documented.

29/04/98 (ADH): JAVASCRIPT global compile time option documented.

29/04/98 (ADH): JS_USING_MEMLIB local compile time option documented.

31/07/98 (ADH): Altered documentation on USE_MALLOC_REPLACEMENT - this is
                now used on a case-by-case basis rather than to redefine
                malloc, realloc etc. to MemLib equivalents, since MemLib
                cannot be used to replace *all* calls.

18/08/98 (ADH): WRITE_DUMP_FILE_ON_ERROR local compile time option documented.

07/09/98 (ADH): ALL_FAST local compile time option documented.

01/03/06 (ADH): Some changes to bring things up to date - CUSTOMER_SPECIAL has
                been removed, the Choices section wasn't useful and has been
                removed, nothing new added as there's nothing particularly
                that has been added over the last few years (!). Needs a
                full overhaul to make sure everything is accurate though.

03/03/06 (ADH): Added warning about use of 'restrict'.
-------------------------------------------------------------------------------

Contents
========

Overview
Key notes for coders (very important)
  Documentation
  Use of 'restrict'
  Hard coded limits
  Compile-time options
  Lines and chunks - referencing
  Tying up loose ends
  Debugging
  Key code behaviour

Multiple application name support - system variable dependencies
Other system variables

Component and event code numberspaces
  Miscellaneous
  Toolbars (Toolbars.h)
  Menus (TBEvents.h, Save.h)
  Save Object dialogue (SaveObject.h)
  Save File dialogue (SaveFile.h)
  Print Style dialogue (PrintStyle.h)
  Open URL writable (OpenURL.h)
  Find dialogue (Find.h)
  The Hotlist (Hotlist.h)
  Authorisation dialogue (Authorise.h)
  Debug functions

Using a local proxy server as a cache

User interface features: Toolbars
  Merging toolbars - an overview
  Operational 'modes'
  Dialler display
  Merged URL writable and status display
  Menu items
User interface features: Keyboard modifiers
  Mouse clicks with Shift held down
  Mouse clicks with Control held down
User interface features: Save dialogues
  Save File
  Save Object
User interface features: Icon scripting

Saving and loading
  Saving
  Loading

External control of the browser
  Starting with a given URL
  Remote hotlists
  Home page


Overview
========

This file contains various general notes about the browser. If anything gets coded that seems obscure or puts some important restriction on something else, it should be mentioned here.

Other notes include information on the user interface controls and so forth, and these will probably get split to another file at some stage.

The text is designed for a dynamic wrap width. Most of it needs only 79 characters or greater, but some needs a wider display and mentions when this is the case.


Key notes for coders (very important)
=====================================

* Documentation
  -------------

All comments and related text files (such as this one) must be kept up to date! It is a fairly arduous task, but without doubt the best approach is to always modify as required at the moment an affecting change is made. Never let this sort of thing build up over time...


* Use of 'restrict'
  -----------------

The C99 qualifier 'restrict' is extremely useful for optimising pointer-based data structure access. Without it, any reference to a field of a structure through a pointer will always go to memory and never be cached in a register. Using the qualifier can lead to some very significant optimisations. When using flex, though, great care must be taken. Any data structure containing a flex anchor - such as a reformat_cell - may be updated by the flex library if the flex heap moves, even though that structure itself stays at the same address. With budging enabled, this may occur even on a simple function call due to a stack extension, regardless of whether or not that function has anything to do with the structure in question.

Qualifying a pointer to such a structure with 'restrict' allows the compiler to cache a flex anchor's value. In reformat cells, this might commonly be a field such as "ldata" - the line array. Should the flex heap move whilst this pointer is cached, obscure faults including aborts at odd but convincing looking addresses will arise, will be intermittent and will disappear in debug builds since the 'restrict' optimisations are turned off. The bottom line is - be very careful with this qualifier in the browser sources.


* Hard coded limits
  -----------------

Coders must be aware that when using any predefined limits from Limits.h, all attempts must be made to ensure buffers currently flagged as (S)afe remain so. If existing (U)nsafe / (P)artly unsafe buffers can be made safe, that's great. For items where this (D)oesn't matter, it is desirable to leave things that way!


* Compile-time options
  --------------------

If altering #defined values inside the compiler options, you *must* then recompile the whole project. Global options (some of which are not fully implemented) currently are:

#define name        Function

ROM                     The ROM build !Mkxxxx files use this.
TRACE                   Enable general debugging.
STRICT_PARSER           Gives more warnings at parse time (including reporting
                        ImageLib errors even in redraw loops).
ALIAS_URLS              E.g. instead of file://...hotlist, just say 'Hotlist'.
HIDE_CGI                Don't show the info after a '?' in URL displays.
ANTI_TWITTER            Use software anti-twitter.
REMOTE_HOTLIST          Use HTML files fetched to the page for hotlists,
                        rather than compiling in the whole hotlist manager.
UNIFONT                 Multilingual support.
USE_MALLOC_REPLACEMENT  Uses the 'MemLib' malloc-in-a-dynamic-area replacement
                        for malloc. Not all mallocs will be replaced with
                        MemLib calls.
JAVASCRIPT              Support JavaScript.

Local options, for which only the mentioned files need recompiling, are:

#define name        Source file(s)   Function

DUMP_HEADERS        FetchHTML.c      Dump HTTP headers.
                    URLveneer.c
INCLUDE_HEAPGRAPH   Main.c           Allow heap graphing.
INCLUDE_HIERPROF    Main.c           Allow hierarchical profiling.
INCLUDE_MEMCHECK    Main.c           Allow memory checking.
TRACE_FETCH_STORE   Images.c         Look at data as it is fetched.
USE_TML             svcprint.c       See 'Debugging' below.
ARROWS_MOVE_OUT     Forms.c          Up/Down arrows jump out of forms fields.
H_DTS_MULTIPLIER    Handlers.c       Fast drag-to-scroll multiplier (affects
                                     relationship between mouse movement and
                                     actual amount jumped by scroll bar).
JS_USING_MEMLIB     Main.c           JavaScript libraries are compiled to use
                                     MemLib, the dynamic-area based malloc
                                     replacement. Browse must thus initialise
                                     MemLib before using any JavaScript
                                     functions. You MUST define this if JSLib
                                     or NSPRLib are compiled to use MemLib.
WRITE_DUMP_FILE_ON_ERROR  Main.c     Create and subsequently append to a
                                     file on drive 4 called "BrowserDump"
                                     containing details of any aborts caught
                                     by the replaced signal handlers. This is
                                     done whether or not TRACE has been
                                     defined globally.
ALL_FAST            Images.c         Process all images as if they were for
                                     backgrounds (for fast redraw, but then
                                     animated GIFs don't animate etc.)
PARANOID_REFORMAT   FetchHTML.c      If defined, always reformat from the
                    Reformat.c       previous line, and completely blank out
                                     the line reformatted from to the end of
                                     the page *before* starting to format.
                                     Ensures no redraw or format errors, but
                                     causes flicker and can be slow (as you
                                     often end up reformatting a line that
                                     doesn't need it).


* Lines and chunks - referencing
  ------------------------------

Lines are referenced only by number, as an array - as in ldata[number]. Line numbers start at 0 and go to nlines - 1.

Lines do not contain a base chunk address, but a base array offset into the chunks. Array indices thus go from ldata[l].chunk to ldata[l].chunks + ldata[l].n - 1.

Chunks are referenced only by number, and through cdata[number]. Numbers are between 0 and nchunks - 1. nchunks can only be worked out by looking at the last line that has some chunks, and doing ldata[lastline].chunks + ldata[lastline].n. (So this gets the number of chunks - subtract one to get the last chunk number).


* Tying up loose ends
  -------------------

One method of tying up the many loose ends is to look for '//' comments. Keeping to this syntax - use '/* */' pairs for normal comments, use '//' comments for anything that needs further attention - is probably a good idea.


* Debugging
  ---------

In TRACE builds, a variety of four letter codes can be specified in a comma separated, case sensitive list after a '-debug' (or '-d' for short) command line parameter, usually placed in the browser !Run file. A summary of these codes is at the top of Global.c. New general areas of code which could require separate debugging should define the next logical code in the sequence, adding the appropriate recognition code to main() in Main.c, documenting the facility in Global.c, and wrapping all debug output in something like:

#ifdef TRACE

  /* (At the time of writing, 29 is the next available */
  /* trace level bit).                                 */

  if (tl & (1u<<29))
  {
    ...
  }

#endif

The standard browser debugging runs through svcprint.c - i.e. uses a TML card (hardware) output to a second terminal with a similar card. It is possible to alter the appropriate compile-time option inside svcprint.c and change this to output to Pipe:$.TMLDebug, which can then be listed in a Task Window whilst the browser runs with something like:

*Basic
REPEAT:OSCLI "Type Pipe:$.TMLDebug":UNTIL FALSE

The loop is needed as the PipeFS file is opened before, and closed after, writing any piece of debug information, so if the Task Window finishes listing the contents at a point where the file is closed it would stop there and PipeFS would remove the file.

This is obviously quite slow, so it's also possible to output to Devices:Parallel by altering line 332 of the code. A second machine connected to the main station with a parallel cable can then be used to dump the information, and is somewhat faster than the PipeFS method, though even more prone to lock-up if one end sends whilst the other isn't listening (or vice versa) than TML cards themselves. Use a program such as:

10 MODE 31
20 x%=OPENIN("Devices:Parallel")
30 IF x%=0 THEN END
40 REPEAT
50 a%=BGET#x%
60 IF a%=10 OR a%=13 PRINT ELSE PRINT CHR$(a%);
70 UNTIL FALSE

Be careful to run this *before* starting the other end with the browser.

The debug function Printf is used to output to TML, which behaves syntactically just like printf, though fewer format specifiers are supported. In particular, %d will only output an int as unsigned. The PipeFS or Parallel debug methods discussed above use vfprintf, and thus support the full range of specifiers - this can be handy now and again even if you have a pair of TML cards. Colour output can be achieved by sending BBC-style VDU codes:

Printf("This is in \0212Green, \0211Red, and \0217white.\n");

Of course, the actual colours depend on the palette of the debug station, though the existing browser debug routines expect a standard BBC-style 16 colour palette (so run TML debug out of a Task Window and the Desktop in, say, mode 31 - 800x600x16).


* Key code behaviour
  ------------------

Certain behavioural aspects of various code components are relied upon throughout the browser code. There are probably more than listed here, but off the top of my head:

1. When a new browser is created, any caller who knows that the function
   called will lead to this result may rely on the global 'last_browser'
   pointing to the new item.

2. When lookup_token or related functions are called, the global buffer
   'tokens' is always used. The return value from the functions will always
   point here and is for convenience only. The token name looked up is put
   into the buffer 'lasttokn'. If for any reason the 'tokens' buffer may be
   out of date or has been modified, it's important to invalidate the
   contents of 'lasttokn' by writing a null character to the first byte;
   otherwise, the lookup functions may think they have no work to do and
   not update the contents of 'tokens'.

3. utils_ancestor() should be used to find the ancestor browser_data struct
   for a given browser_data struct, even if the given browser is itself an
   ancestor. It'll only ever return NULL if given NULL. It is recommeded
   that browser->ancestor is checked to see if a browser is an ancestor (it
   will be NULL if so) rather than testing for equality of return value of
   utils_ancestor() with the parameter passed to it (for speed reasons).
   The code can look a bit odd though ("if (!b->ancestor)" means b *is* an
   ancestor...).

4. TRACE builds don't bother internationalising trace-only error messages,
   they are hard coded. I see no reason to do anything else when putting in
   new debug errors.

5. All local hotlist management code should be wrapped in '#ifndef
   REMOTE_HOTLIST'. To ensure this has been done correctly, periodically
   building a Customer browser (which defines REMOTE_HOTLIST) is
   recommended.


Multiple application name support - system variable dependencies
================================================================

When the browser starts, it reads where it ran from using argv[0]. This means that the actual application name is not important. However, the !Run file *must* execute !RunImage, and not any other binary name. For ROM builds, though, the assumption of 'Resources:$.Resources.Browse' pointing to the resources directory has to be made.

The cases of special system variables - e.g. to point to an alternative choices or controls file, etc. - is a tricky one. In the end, some have to maintain the same name - so they'll be Browse$... regardless of the application name. These are:

Variable name                When it/they is/are used

Browse$IssueDesktopCommand   On startup only, for AcornURI or TaskModule.

Browse$CurrentPage,          Set for every fetch, read only as part of
Browse$CurrentFetch,         post-crash recovery when restarted with an
Browse$PreviousPage          appropriate internal URL.

Browse$CookieFile            The HTTP module uses this, which if set, and a
                             cookie file cannot be found in
                             Choices:WWW.AcornHTTP.Cookies, will be used to
                             load a cookie file.

Browse$CookieFileFormat      HTTP module again; takes '1' or '2', defaults
                             to '2' and best left unset.

Browse$AcceptAllCookies      'on' or 'off', if 'off' the browser is required
                             to notice when cookies are in the pending
                             queue and tell the HTTP module to accept them
                             (perhaps with user intervention). At present,
                             best set to 'on'. It is, once more, the HTTP
                             module that reads this.

Others are prefixed by the application name ('_TaskName' token in the Messages file). These are:

Variable name                When it/they is/are used

<App>$HotlistURL,            Used only if set, to override Choices. The first
<App>$HotlistURIFile;        in the pair is tried to get a URL to fetch a
<App>$HomeURL,               hotlist (REMOTE_HOTLIST builds only) or find the
<App>$HomeURIFile            home page URL; if this is unset, the second is
                             tried to get to a URI file containing the same
                             information. If neither exist, the relevant
                             Choices entry is used instead. These are
                             described in more detail later.

<App>$ChoicesFile,           Used to load Choices or Controls if set, else
<App>$ControlsFile           if unset, use <from argv[0]>.[name].

<App>$ChoicesSave,           Used to save Choices or Controls if set, else
<App>$ControlsSave           if unset, use <from argv[0]>.[name].

So it is safe to have Browse$Dir and Browse$Path unset (or used under a different name), but other variables are needed / will be set as described above. Note, though, that some trace functions may rely on Browse$Dir (see 'Other system variables'). If you do this, though, don't forget to alter any Messages, Controls or Choices entries which might describe paths with those variables (e.g. Hotlist or History file locations), and things such as the IconBar object, which may reference !browse as a sprite.


Other system variables
======================

The scrap file is defined in Save.h (usually, for Wimp$Scrap, but this can, then, be changed, even though it does require recompilation). The DUMP_HEADERS trace build option is hard coded to scrap; specifically, '<Wimp$ScrapDir>.Headers'.

Alias$@@RunType_FFF is used, if set, to launch an external editor to view document source, if one isn't already running. This can be unset without anything bad happening.

Alias$@@PrintType_FF4 must be set for printing to work correctly on RISC OS 3.1 or higher.

The 'svcprint.c' function can be switched to a mode where PipeFS is used for output - slow, but can be useful if you don't have a TML card and really need the debug output. This is hard coded to 'Pipe:$.TMLDebug'.

For the token dump functions in Trace.c, '<Browse$Dir>.Tokens-L' and '<Browse$Dir>.Tokens-S' are used for the by-line and by-stream token dumps respectively. This is #defined in the source, so it is easily changed for an unusually named trace build, if absolutely required.

The browser will of course load a variety of file formats, and the relevant Alias$@@RunType_xxx variables may be set or left alone as required. Files that may be loaded by double-click are URI (0xf91), HTML (0xfaf), GIF (0x695), JPEG (0xc85), PNG (0xb60), and TIFF (0xff0). Text (0xfff) and URL files (0xb28 - from the ANT suite) can be loaded by dragging to the browser. Setting an Alias$@@RunType_B28 for URL files will work; setting an Alias$@@RunType_FFF for Text files will cause big problems with the View Source button, for obvious reasons. Recommended settings are just for HTML and URI files (the latter being used only if the URI handler module is not present).


Component and event code numberspaces
=====================================

This is the numberspace scheme employed for event numbers and component IDs in the various browser dialogues, toolbars and menus. There were some considerably historical complications with conventions therein, which have since been resolved. TBEvents.h contains full details.


* Miscellaneous
  -------------

There is a small collection of miscellaneous event codes with a base number of 0x20000. These are defined in MiscEvents.h. Any event codes which really don't fit in anywhere else should go here, though obviously keeping things meaningfully categorised wherever possible is generally A Good Thing.


* Toolbars (Toolbars.h)
  ---------------------

Toolbars occupy a numberspace between 0x0001 and 0x00fff for event codes
and component IDs. See the header file for more.


* Menus (Menus.h)
  ---------------

Menu items and related events used to be defined across several files, but are now collected in Menus.h. There is the possibility of splitting this in future, if Menus.c itself splits to form separate sources for specific menus or groups of menus.

Menu items rarely raise events themselves, outside of ToBeShown-style events; usually, the dialogues or other objects that they show or alter raise the events themselves (again, usually dialogues raise ToBeShown-style events rather than menu items raising events best described as AboutToShow). It is possible to use default event codes and add code to the menus_item_selected function, but it may be desirable to use custom events within the menu numberspace if the same function may be driven elsewhere. (See the section on using a local proxy server as a cache for an example of this).


* Save Object dialogue (SaveObject.h)
  -----------------------------------

The component ID base is 0x1400. Event codes are tied to component numbers where the two inter-relate or start at the top of the numberspace, 0x15ff, and work down where not connected.


* Save File dialogue (SaveFile.h)
  -------------------------------

Similar to the SaveObject dialogue. The numberspace starts at 0x1200.


* Print Style dialogue (PrintStyle.h)
  -----------------------------------

The numberspace starts at 0x2200.


* Open URL writable (OpenURL.h)
  -----------------------------

The numberspace starts at 0x1800. There is a slight complication with this dialogue, where different events are raised if the dialogue is to be shown from a document menu as opposed to from anywhere else (allows the URL pointed to by a link that the menu was opened over, for example, to be placed in the dialogue).


* Find dialogue (Find.h)
  ----------------------

The numberspace starts at 0x1600.

The Find dialogue box must be opened as a transient. The writable field, component ID FindWrit (0x1601), must be set to generate WritableField_ValueChanged events. OK / Cancel must be done through events EFindOK (0x1607) and EFindCancel (0x1606) respectively. The  dialogue must raise event EFindToBeShown (0x17ff) before it is shown, and EFindHidden (0x17fe) when hidden.

The 'from start', 'forwards', 'backwards' and 'case sensitive' options may all be missing, in which case defaults of 'from start', 'case insensitive' and for subsequent searches of the same string, 'forwards' are assumed. If present, the gadget types must be option button, radio, radio (same group), option button respectively. They have respective component IDs FindFromStart (0x1602), FindForwards (0x1604), FindBackwards (0x1605) and FindCaseSensitive (0x1603).

The writable field label may be omitted, but if present should have component ID FindLabel (0x1600). The OK and Cancel buttons (component IDs FindOK - 0x1606 - and FindCancel - 0x1607) can be missing, and if present can have any gadget type - they are only required to generate events as detailed above.


* The Hotlist (Hotlist.h)
  -----------------------

The Hotlist is relatively independent of the main browser and does not fully fit into the component ID and event code numberspace / namespace conventions established in TBEvents.h, except where core browser interaction is required. Typical 'conformant' event codes are at the top of Hotlist.h, with the more exotic definitions following towards the bottom of the file.


* Authorisation dialogue (Authorise.h)
  ------------------------------------

Component IDs and associated event codes start at 0x1000.


* Debug functions
  ---------------

For TRACE builds, some extra menu items may be included to perform various debug actions. Event codes for these start at 0x30000.


Using a local proxy server as a cache
=====================================

The browser has no local cache in the conventional sense. It instead relies on a local server of some kind to cache for it - the browser is set to proxy to http://127.0.0.1/ (say) and cacheing is done there. This arises originally from its multiuser history, where the proxy server (aka cache) may reside on a central server on the local network, which several clients access. It so happens that this behaviour is also useful for Plug-ins, which can use the same server as a cache - this saves each component implementing a cache independently.

The browser has been designed towards a proxy server called WebServe, and in the absence of the various Messages file tokens described below will default to values suitable for this software. Later versions of WebServe (v0.33 upwards) have the capability to turn on and off their icon bar icon and respond to message Wimp_MAppControl (21) with a reason code of 4 (Wimp_MAppControl_Configure), opening the WebServe configuration dialogue if it is received. The browser can send this message to the server.

The server task name is held in the Messages file, as token 'ProxyName'. This is used by the browser to obtain the task handle of the server (or determine that it is not running). To send the message, raise event 0x10005, or a generic Menu_Selection event from component ID 0x10005. This means a menu item 0x10005 may exist which raises a default event *or* event 0x10005, or alternatively some button may raise the custom event, etc. This is an example of a case where a generic event may be used, but the definition of a custom event increases flexibility considerably. At present, the browser will grey or ungrey menu item component 0x10005 in a menu which raises event 0x101ff before being shown (these numbers are all in the icon bar (main) menu numberspace - see later) depending on whether or not the proxy server seems to be running.

A menu item can thus be used within the browser that seamlessly opens the proxy server's configuration dialogue. Since WebServe may be configured not to show an icon bar icon, WebServe can start up with no icon bar presence and be controlled through the browser, allowing the local proxy server to appear as part of the browser itself. The browser thus seems to have an inbuilt local cache from the user perspective.

As part of this, the Choices file item 'StartProxy' may be set to 'yes'. In this case, if the local proxy server does not seem to be running, the browser will issue a Wimp_StartTask SWI pointing to a command described in the Messages file as token 'ProxyComm' on startup. Errors directly returning from the SWI are not reported but the command itself may of course report an error. The browser may thus automatically start a local proxy server if one is not running already. This behaviour is not really useful for multiuser environments, where the proxy would normally be running continuously on a remote machine.


User interface features: Toolbars
=================================

The browser toollbars are highly configurable, operating as two split bars at the top and bottom of the window or one merged bar at the top. You can also swap the bars around, so that the toolbar at the top of the window goes to the bottom and vice versa. Only a limited control is available at run-time, though different operational modes are permitted in different windows running under the same browser. This is how the 'small fetch' windows for saving out objects with a Shift+Click on a link work - they are browsers with one merged toolbar, to allow the fetch status to sit alongside a stop button.

This section first describes the merged modes (one toolbar holding everything) in overview form, then describes all possible toolbar modes in detail. There then follows a description of more subtle controls that are available.


* Merging toolbars - an overview
  ------------------------------

The browser's normal operational mode is to have an upper and a lower toolbar present. The upper toolbar contains a URL writable, a history menu, a series of buttons and possibly a dialler display; the lower toolbar holds an animation, a status display and a byte counter.

The upper toolbar can be notionally split into a button bar and URL bar. This gives the user the impression of three toolbars, which may be freely switched on and off if the relevant menu items are present in the Res file (see below). This is *not* the same as actually deleting toolbars. The toolbar heights are notionally set by invisible gadgets placed on the bars marking the extent of the bars. The URL bar height is defined by component 0x300 (URLBarSpacer), the button bar height by 0x100 (ButtonBarSpacer), and the status bar height by 0x500 (StatusBarSpacer). The URL bar and button bar markers may overlap to define a commonly visible region between the two (usually for aesthetics). These may be seen in ResEd by selecting all items in the toolbar - the red bounding boxes will highlight where the spacing gadgets are.

Either toolbar may be deleted, remembering to change the attached toolbar settings of the main Browser object to account for the deletion, with this action allowing certain items to be merged into dual action gadgets. This is described further below. At present, a merged toolbar may not be turned off either partially or in full, and only the height marker with component ID 0x300 (URLBarSpacer) is required.

Where references are made to components in upper or lower toolbars, this implicitly means whatever toolbar components are visible when the toolbars are merged.


* Operational 'modes'
  -------------------

1   Normal
2   Reversed
3   Merged upper
4   Merged lower

What they mean and required state of Controls file 'SwapBars' entry:

1   Combined URL/Button bar at top, status bar at bottom   SwapBars=no
2   Combined URL/Button bar at bottom, status bar at top   SwapBars=yes
3   Combined URL/Button/Status bar at top                  SwapBars=no
4   Combined URL/Button/Status bar at bottom               SwapBars=no

To fix the size of a normal or reversed toolbar (1, 2):

    URL bar height by URLBarSpacer (0x300)
    Button bar height by ButtonBarSpacer (0x100) (may overlap URLSpacer)
    Status bar height by StatusBarSpacer (0x500)

To fix the size of a merged upper toolbar (3):

    Whole bar height by URLBarSpacer (0x300)

To fix the size of a merged lower toolbar (4):

    Whole bar height by URLBarSpacer (0x500)

To turn toolbars on/off for normal or reversed toolbar (1, 2):

    Three menu entries for URL, button and status bar
    Component IDs 0x11601, 0x11602 and 0x11603 respectively
    (UtilsURLBar, UtilsButtonBar, UtilsStatusBar)
    Makes assumption that URL and button bars are merged into one. The
        URL bar should be above the button bar; the height and overlap
        of the two is indicated by the components as described above
    The status bar should be a separate item

To turn toolbars on/off for a merged upper toolbar (3):

    Only one menu entry, no assumptions made about toolbar layout
    Component ID 0x11601 (UtilsURLBar)

To turn toolbars on/off for a merged lower toolbar (4);

    Only one menu entry, no assumptions made about toolbar layout
    Component ID 0x11603 (UtilsStatusBar)

Note that a merged toolbar is expected to have a URL writable, though it doesn't have to have any buttons. Small fetch windows, which effectively (usually) have a status line with a stop button merged in, will need to have such a gadget moved out of the visible area on the page. Note also that the Choices file MoveGadgets item is ignored for small fetch windows - nothing is ever moved (as it is assumed that the windows cannot resize).


* Dialler display
  ---------------

If the dialler display field (component ID 0x204, URLBarDiallerStatus) is present in the upper toolbar, it will be used to report the dialler status (provided the dialler module is loaded, of course). It may have an associated border / cover gadget with ID 0x206 (URLBarDiallerStatusCover) and a label 0x205 (URLBarDiallerStatusLabel). The label will have two states to indicate that the associated display is showing dialler status or online time.


* Merged URL writable and status display
  --------------------------------------

If the toolbars are merged, and the URL writable and status bar status display may be merged. To do this, place one exactly over the other. The default state will be to show the status display; clicking on this (or generating event 0xd, EButtonBarGoTo) will swap this to a writable, allowing entry of a URL. Pressing Return (or generating event 0xe, EButtonBarGo) accepts this URL, changes back to a status display and starts a fetch. Generating event 0xf (EButtonBarCancel) cancels the changes and changes back to a status display, without interrupting any current fetch, format or other activity.


* Menu items
  ----------

Certain menu items may instruct the browser to show or hide toolbars as mentioned in the overview. They should be present in a menu which, before being shown, raises event 0x1201 - this queues the browser to tick or untick items in the menu before showing it.

To turn the URL bar on and off, include component 0x11601 (UtilsURLBar).
To turn the button bar on and off, include component 0x11602 (UtilsButtonBar).
To turn the status bar on and off, include component 0x11603 (UtilsStatusBar).

Note that the page display controls (Underline Links, Use Document's Colours, Show Foreground Images, Show Background Images) and the Full Screen control also expect to be in a menu raising event 0x117ff (EUtilsToBeShown) for the same reason as the toolbar controls - ticking of items. However, because the browser is tolerant (in non-TRACE builds) of items being missing in menus, it is quite possible to have these in two separate menus both raising the event, or grouped in one menu.


User interface features: Menu items
===================================

Menu items that define options, such as turning on or off tool bars or toggling page display options, may be deleted (the application will still try to set ticks in them if the submenu they used to be in is opened, but will fail silently).

Binaries compiled with TRACE defined in the compiler, however, will typically be considerably less tolerant of such changes, and will happily raise errors about missing items - purely as a warning. These errors are not fatal.


User interface features: Keyboard modifiers
===========================================

In all cases below, there may be build-local restrictions. For example, a Full Screen browser will not be allowed to conduct external object fetches - it will raise an error explaining this. After all, on a STB-like device, having a little save dialogue pop up when you've got (conceptually) no storage devices or Filer interface to access them does not make a good UI!


* Mouse clicks with Shift held down
  ---------------------------------

On any link, open that link into a save dialogue. This may be done in new windows for multiple concurrent saves by adjust-clicking. If the Choices file item 'UseSmall' is set to 'yes', then any Shift+Click will open a small fetch window and the fetching will go into there, regardless of mouse button used.

Shift+Click on a browser window's toggle size icon will open the window to full size but not obscure the icon bar (or rather, do the reverse of whatever bit 4 of CMOS byte 28 says), as is the expected behaviour under RISC OS.


* Mouse clicks with Control held down
  -----------------------------------

On any image (link or otherwise), show that particular image. This forces the image to override any flags saying images should be hidden. Unfetched images will be fetched by this. (Shift used to give this behaviour, before it was reassigned as above).

Ctrl+Click on a toggle size icon of a browser window will open it to full height, but not full width, with Shift modifying whether or not it obscures the icon bar (as described above).


User interface features: Save dialogues
=======================================


* Save File
  ---------

The Save File dialogue is set to raise event 0x13ff (ESaveFileToBeShown) before it opens. Only one dialogue can be visible at a time (in the Res file, the object has its 'shared object' bit set, and the code assumes that this will always be the case); so no event is raised when closing - there is no need to deregister event handlers and so-forth.

When ESaveFileToBeShown is raised, the saveobject_to_be_shown function will fill in the contents of the dialogue in an appropriate fashion automatically. To do this, it has to know certain methods of generation. First, it expects to have an ancestor ID. This should point to a browser or hotlist window. If a browser window, the component ID of the menu entry generating the item is looked at. This will be (from Save.h):

FileSaveFrame            Save this frame as HTML
FileSaveParent           Save the parent frameset as HTML
FileSaveCurrentLocation  Save the current page location as a URI file
HotlistSaveHotlist       Save the hotlist
MiscHotlistSaveObject    Save an object from the hotlist (URI file, selection, directory)
ExportAsDraw             Export the page as a Drawfile
ExportAsText             Export the page as text
ExportLink               Export the link contents as a URI file
ExportPicture            Export the image as a sprite
ExportBackground         Export background image as a sprite

The use of component IDs rather than menu object IDs allows the various options to migrate around the menu structure. Export items could all be in a different menu, or the same menu, as the HTML save items, for example. The browser window Hotlist submenu can hold a 'Save hotlist' item, or the main hotlist menu could hold it. And so-on.

If a parent component ID of -1 is encountered, then FileSaveFrame is assumed. The ancestor object is used for the source, but if this shows there is a currently selected frame, then that will be used instead.

In trace builds, if it would appear that a given component is inappropriate - e.g. FileSaveFrame when there is no document source - an error will be raised. In non-trace builds, the function will fail silently, so *get it right* in the trace variants - menu items should be greyed if irrelevant!

To add new save types, you need to add to the 'switch' statements in the following places:

savefile_to_be_shown (remember to set 'ok')
savefile_drag_ended
savefile_save_file

Transient dialogues can be opened near the pointer using savefile_show_for. Dialogues should only be forcibly shut with savefile_close or by collapsing the menu tree.


* Save Object
  -----------

This dialogue can exist many times; browser_data structures keep track of whether a dialogue is open for them. These are used entirely for spooling data to disc from a remote source (i.e. through the fetcher). The code is not intended to be especially extensible. A new dialogue may be created for a browser using saveobject_show_for. Ensure that any previous Save Object dialogue attached to the browser wishing to hold a new one is deleted first, using saveobject_close.

The dialogue raises event 0x15ff (ESaveObjectToBeShown) when it opens. It raises no event when closed, as it should not be opened in a transient form and the code should therefore have full control of when it does close. Appropriate action (calling saveobject_close, usually) can therefore be taken directly.



User interface features: Icon scripting
=======================================

To support unusual user interface designs, and given that the Toolbox restricts the 'look and feel' of various items, it is possible for icons which take text values to have 'scripts' (a bit of a grand word for what this actually is) placed in them.

Scripts allow you to change certain icon flags for that icon. So, for example, a display field could be made to be borderless, white, with black text; a writable icon could me made to be borderless, white, with blue text.

Scripts must start with '@@!', to make the chances of clashing with regular text negligable. There then follow, directly, comma separated command letters, some of which take single byte, upper case hex digit parameters. These are:

Command   What it changes

N         No border (forces no border for the icon)
H         Has border (forces a border for the icon)
B         Background colour (follow by Wimp colour, 0-9 and A-F)
F         Foreground colour (follow by Wimp colour, 0-9 and A-F)
C         Click (button) type (follow by button type number, 0-9 and A-F)

If an unrecognised command letter is met, it is skipped. The routine continues if, after reading a letter and possibly a command, if finds a comma; otherwise, it exists. It is this possible to follow a command directly with text of any sort, provided that text does not start with a comma. Note that incorrectly formatted script strings will give undefined results... Here are some examples:

Script         Action

@@!N,B0,F8      No border, white background, blue foreground
@@!H,B1,FF,C1   Has border, light grey background, cyan foreground, button
               type set to 'always' (1).
@@!NHello       No border, and text seen by user will be 'Hello'.

The browser automatically scans for these strings in certain icons and removes the scripting text before showing the dialogue. The dialler status display, URL bar writable, main status display, Save File dialogue writable, Save Object dialogue writable, Open URL dialogue writable and Find dialogue writable fields are all scanned. The number range gadgets in the Print dialogue cannot take anything except numbers, but they can have scripts specified in the Controls file (see the AlterNumRanges and AlterWith entries).


Saving and loading
==================


* Saving
  ------

Although you tend to have to read them several times and in different orders to understand the big picture, the PRM section on application to application transfer is quite good. Pages 3-249 through to 3-256 are the relevant pages.

The best approach here is to read the source files. Protocols.h is a good overview of the main messaging 'centre' for the browser, with SaveFile.c and Save.c feeding into it as the higher level interface. SaveObject uses a slightly different system running largely via. some special case conditions in the same functions.


* Loading
  -------

As with saving, pages 3-249 through to 3-256 describe the messages involved, but note that loading also involves Message_DataOpen, which is stuck out on page 3-265 for some reason (after the iconise and printer protocol information).


External control of the browser
===============================

In the following, there are references to HTML files (which are obvious) and URI files. URI files are dealt with by the Acorn URI handler module or the browser - the former does not have to be present, but if it is, other applications may pick up URI files and either deal with them or modify the contents before passing them on. This, then, allows such things as mailto: to work, even though the browser does not handle such URIs itself. A description of the URI handler and the URI file format is in document 1307,206/FS. Double-clicking on a URI file will always go through the URI handler, not the browser. If the browser is started without the URI handler, however, it will handle double-click events itself.


* Starting with a given URL
  -------------------------

The browser will normally start and install itself on the icon bar. No window will be opened until the user initiates this by actions defined through the Res file. To start the browser and open a window with a given URL in it, there are the following facilities:

1. A command line parameter '-url' followed by a single space and a URL
   to open.

2. A command line parameter '-html' followed by a RISC OS pathname pointing
   to an HTML file to load from local store.

3. A command line parameter '-uri' followed by a RISC OS pathname pointing
   to a URI file to read from local store.

URI and HTML files may be dragged to the icon bar icon, or to a browser window (where they will be loaded into a new window or the window they were dragged to respectively), or can be activated by double-clicking on them (in which case a new window is always opened, with the possible intervention of the URI handler for URI files, as described above).


* Remote hotlists
  ---------------

When the View Hotlist button (component ID 0x6, generating event 0x206, residing in the upper toolbar or a merged toolbar) is activated, the hotlist window is opened. Alternatively, on REMOTE_HOTLIST builds, the hotlist code (which is quite large) is not compiled in. Instead, the hotlist is fetched as an HTML file to be displayed in the browser window containing the button that was activated.

The URL used for this fetch is obtained in three ways:

1. If a system variable 'Browse$HotlistURL' is defined, this is expanded
   and the value within used as the URL to fetch (so it must contain a
   fully specified valid URL).

2. Failing that, if a system variable 'Browse$HotlistURIFile' is defined,
   this will be taken to hold a pathname of a URI file. This variable may
   itself include variable references, e.g. 'HotlistPath:URIfile', to
   allow a search path for the hotlist file if its local location is
   likely to change.

   If this file is not found, the browser will open with no URL (i.e. it
   fails silently).

3. If neither variable is defined, the token 'HotlistPath' is looked up in
   the Choices file. This is taken to contain a RISC OS pathname specifying
   a local HTML file. The pathname is converted to a URL for the File
   module to fetch through, so there are limitations on what may be used
   here; for example, '<Browse$Dir>.User.Hotlist' would fail due to the use
   of angle brackets, but 'BrowseUser:Hotlist' (referencing the variable
   'BrowseUser$Path', equivalent to '<Browse$Dir>.User.'), would work.
   This token must exist in the Choices file, or an error will be raised.


* Home page
  ---------

When a new window is opened, in the absence of any other action (see above) the following scheme is used to determine the starting URL to display in the window - this is very similar to the remote hotlist system described above:

1. If the system variable 'Browse$HomeURL' is defined, this is expanded and
   the URL contained with used for the fetch.

2. Failing that, the system variable 'Browse$HomeURIFile' is examined. It
   will be expanded if defined and taken to hold a pathname pointing to a
   URI file with the hotlist URL inside it. If this file is not found, the
   browser will open with no URL (i.e. a blank window).

3. Lastly, the token 'HomePage' is looked up in the Choices file. This
   should hold a fully specified URL for the home page (rather than, for
   example, a RISC OS path for a local file, as with the third method of
   finding the Hotlist file as described above). Again, this token must
   exist in the Choices file, or an error will be raised.
@


1.10
log
@Long overdue check-in of intermediate browser build, from continued "out
of hours" work. Forgot to add a few files last time too.

List dialogue box handler complete, and exclusion lists implemented
within the main browser code. Full documentation in Choices file.
Save routine knows all about it but is now getting very slow - must
come up with a better scheme; for now, it puts the hourglass on...

StripExtensions option controls auto stripping of filename extensions.

More sensible ancestor / frame selection for keyboard shortcut items
and the save dialogues - having selected a frame won't lock you into
it for F3 and related shortcuts now (input focus in URL writable ->
get ancestor details, input focus in frame -> get frame details). F4
works in frames. F5 now generally present for 'view source' with a
corresponding menu entry in the File menu.

Odd thing in later Res files; there's no action set for Adjust clicks
on the main ToolAction items in the button bar. Very odd. Nothing
appears to be set in v2.07 either, yet adjust-click works. Even
stranger. Anyway, added in the relevant event details (same as for
Select click in all cases) and this fixes the problem.

Background colours in the TABLE tag ignored the "don't print any
backgrounds" Print Style setting. Fixed. Meanwhile, the "black
text with no backgrounds" option wasn't getting this right either;
fixed this also.

Event logging implemented; HTTP errors and script output via.
window.print extension. No internal error output yet.

Faith:Never behaviour extended. If ever a server sends something with
no content type or an unhandleable type, the browser will try and get a
filetype from the URL. If it gets text or HTML, it'll render the file.
Else it'll save it. Hacks around IIS 4's lack of a content type field
in the Marketeye login stuff, and similar other slightly broken sites.
@
text
@d51 8
d67 1
a77 7
Choices file
  Entries in the user choices structure 'choices'
  Entries to read straight from the file or a dialogue box
Controls file
  Entries in the fixed choices structure 'controls'
  Entries to read straight from the file or a dialogue box

d136 8
d159 2
a160 1
STRICT_PARSER           Gives more warnings at parse time.
a165 1
CUSTOMER_SPECIAL        Include hard coded JavaScript for www.customer.net.
a375 205
Choices file
============


* Entries in the user choices structure 'choices'
  -----------------------------------------------

HomePage

BackColour
TextColour
LinkColour
UsedColour
FollColour
SeleColour

SupportTables
TableOuter
TableInner

FontSize
TTAspect
SystemFont
Encoding

UnderlineLinks
UseSourceCols
ShowForeground
ShowBackground

LeftMargin
RightMargin
QuoteMargin
Leading
LeftIndent

MaxImages
ClientPull
SupportFrames
SupportObject
PlugInControl
SeeFetches

HotlistPath

SaveHotlist
AddHotlist
HotlistType

AutoOpenDelay
AutoScrollDelay
AutoScrollMargin

HistoryPath
ImageHistoryPath

MaxSize
ImageMaxSize
ExpiryAge
ImageExpiryAge

ShowURLs
SaveHistory
SaveImageHistory

URLbar
ButtonBar
StatusBar
MoveGadgets

Width
Height
OverrideX
OverrideY
SolidResize
FullScreen
HScroll
VScroll

RefoWait
RefoHang
RefoTime

FixedPtr
HighlightLks
KeyboardCtl

PostIn  (if SINGLE_USER not defined)
PostOut (if SINGLE_USER not defined)

Clone
UseProxy
ProxyAddress
StartProxy

LITimeout

* Entries to read straight from the file or a dialogue
  ----------------------------------------------------

HotlistSave

HistorySave
ImageHistorySave

LoadResources (if SINGLE_USER not defined)
OpenResources (if SINGLE_USER not defined)

PrintCopies  \
PrintStart   |
PrintEnd     | Read by the Print dialogue
PrintReform  |
PrintOrient  /
PrintBack    \ Read by the Print Style dialogue
PrintBlack   /
PrintPlain   - Read by Print for Print Style

DefaultUser  \
DefaultName  | For the Log In dialogue (if SINGLE_USER not defined)
DefaultPass  /


Controls file
=============

* Entries in the fixed choices structure 'controls'
  -------------------------------------------------

AnimSpeed
AnimDrift
DBoxAnims

MinConvergence
DontGrey
SwapBars
BackWindow

ClaimHelp
ShowHelpFor
ShowDStatFor
ShowLinksFor
ShowMiscFor
Quantise
ProgressDelay

AppendStatus
UseBrackets
ColourProgress

MinFrmHeight
MinFrmWidth
KeepHighlight

KeepCaret
ClearFirst
LockToLine
IgnoreAdjust

AppendURLs

BrickWall
StopWebServ
BackOffAt [not implemented, but has entry]
RefoSingle [prototype option, not fully implemented]

PtrLnkActvX
PtrLnkActvY
PtrMapActvX
PtrMapActvY
PtrUDActvX
PtrUDActvY
PtrLRActvX
PtrLRActvY
PtrUDLRActvX
PtrUDLRActvY
PtrNoRActvX
PtrNoRActvY
PtrToSActvX
PtrToSActvY
PtrScrActvX
PtrScrActvY


* Entries to read straight from the file or a dialogue
  ----------------------------------------------------

ProtocolMax
ProtocolM1
ProtocolU1
.
.
. (to Mn and Un where n = ProtocolMax)

ShowFHighFor

AppendWith

AlterNumranges
AlterWith

JumpTo00
.
.
JumpTo7f

@


1.9
log
@Tweaks to export rules in Makefile - ResJ source for JavaScript builds,
all of User dir exported, resources rule exports About as well as User.

Handles images with a width or height of 0 specified in the HTML.
Previously went for a default size placeholder and changes to image
sizes and/or redraw problems could occur before/after subsequent
reformatting (involved trivial changes to image_get_image_size and
image_redraw_area only).

Default parameter HRs now plot properly in rectangular pixel modes.

Choices code updated to cope with the minimum font size, JS support,
watchdog on/off and timeout, Navigator object option added generally
(act even *more* like Navigator), image GC after fetch, and image
GC unused image / free RAM constraints.

Code in JSnavigator.c updated to obey new "act more like Navigator"
option (see above). Currently declares itself as version 3.0.

Resources for all builds are up to date. All links in default hotlist
verified and corrected where necessary, with several new links added.

This is Release v2.07. Not tested very much, sorry; YMMV.
@
text
@d192 8
@


1.8
log
@By request, an intermediate 2.06 check-in. This is not a "proper" release
and will need some Makefile fiddling etc. to swap between JavaScript and
standard builds and so-forth. The Resources files are not all up to date;
only Phoenix and the testbed Browse are more or less current. Right now,
JavaScript doesn't work, SO COMPILE IT OUT. But to make a JavaScript build
for a larf -

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean
 * Add -DJAVASCRIPT to DFLAGS in MakeFile
 * Strip dynamic dependencies from MakeFile
 * Rebuild Phoenix or the Desktop build of Browse
 * In the exported copy, increase the !Run file WimpSlot value; either
   use the appropriate symbols table in 'syms' or use about 960K for
   non-debug, 4600K for debug builds.
 * If the exported copy has an About resource, edit the HTML file inside
   and uncomment the line about JavaScript.
 * Reverse most of the above to rebuild a non-JavaScript copy! :-O

I hope to have much of the above automated soon (either by a new target,
or preferably hackery with the MakeFile).

Here's the change list:

References to 'Phoenix' removed from Ursula build Res file Choices dialogue
help text (only a couple of them). Cookie value display made taller in the
Cookie Query dialogue (prompt field shrunk to accommodate this).

Yikes - ever since markers, "reformat page to fit paper" hasn't done
anything when printing; the reformatter reset the HTML page limits to
the window size at startup! Fixed. Using markers, you can now also reformat
from the top of the visible area and still reformat to fit the paper; the
print dialogue used to grey out the reformat option in this case. It still
does this when printing to the bottom of the visible area, though.

You can drag text files to form writables (single and multiple line,
but NOT password items (deliberately; it's trivial to add this but I
think it'd be a bad idea)). Normally, data is appended up to the limit
specified by the field (unlimited for multiple line items). Holding
down Ctrl replaces the current value entirely (still, again, limited
by maximum field length). The caret is moved from wherever it currently
is and placed at the end of the added data. Note that you *cannot* insert
in the middle of text by placing the caret and dropping.

Things can get distinctly sluggish when you start dragging many Ks of
text file into a multi-line writable, so the keyboard buffer is cleared
for any input code < 32, equal to 127 (backspace - this one is a little
less clear cut, but I think it's probably worthwhile) and anything
> 255. This way, when typing, you don't lose characters; but when moving
around, you don't find the cursor "running away" from you.

Multi-line writables (text areas) would redraw a vertical column taller,
or horizontal column wider than the element covers itself should the
user scroll enough in any one direction (e.g. Ctrl+Up or Ctrl+Down to
go to the top or end of the area). The code working out how much of
the area to redraw by the number of lines or columns moved didn't ensure
it kept within the area. Because an update rather than force redraw is
done, with background blending turned on text around the area would
"thicken". Now fixed.

Form menu entries have (at long last) a space appended to each one, so
the Wimp doesn't get confused and think something is a keyboard shortcut
when someone expresses "Formula 1" as (say) "F1"... Now fill in the menu
width entry from having read the actual VDU character width and spacing,
not that anyone uses the original RO 3.1 Wimp with Browse any more! (The
code existed elsewhere anyway, so it was trivial to add).

Ctrl+U in a multi-line writable clears the contents of the line the caret
is on, but doesn't delete the line itself. Ctrl+J now does this.

DDFLAGS doesn't set ALIAS_URLS - Customer build has this now.

Tiled images were being plotted in the wrong place in some modes (a '+4'
in the starting y coordinate calculations in the three filler / tile
functions should have been '+wimpt_dy()').

MessageTrans lookup buffer extended from 256 to 320 bytes (Limits_Message
in Limits.h), mostly to support Messages files alterations for the About
page.

Spelling error in URI handler menu for Desktop (also known as Ursula,
though this is now something of a misnomer) build corrected. There was
a missing 'l' in 'handler'). StartProxy setting in Choices was 'no' and
is now 'yes'.

Downloading files of sizes over about 20Mb would cause an overflow in
the % calculating code ("(fetched * 100) / file_size" as opposed to
"100 * (fetched / file_size)" with (float) and (int) casts as required.
Percentages now shown to 1dp; Mb displays to 2dp where the file size is
not known.

Download speed is now indicated in Small Fetch windows. Increased the
delay between progress indicator updates as part of this, and modified
Res files to cope (byte counter needs to be enlarged quite a lot). It
isn't shown in normal browser windows because the enlarged byte counter
looks daft in that context (normally, there's never enough information
to fill even half of it).

Adjust-click on an unlinked part of a client side image map could give an
invalid object ID error from accidentally using the return value of a
previous Toolbox call instead of the return result of a call to a fetcher
routine - because given it had a NULL pointer for the URL, there was no
such call made. Corrected in windows_create_browser() and
handle_link_clicks() won't try to do this in the first place anymore.
fetchpage_fetch_targetted() will also warn of such NULL pointers in
TRACE builds.

Submitting a GET form back to the same URL would lead to the query
string getting appended to the fetch URL over and over. form_build_data
now checks to see if there's already a query string in the submission
URL for GET methods and if so, strips it. fetchpage_new_add will do a
similar thing in the case of the additional data starting with '?'.

When following a link, if RefoKeep was 'yes', the page could sometimes
jump to a pre-stored scroll position; it was down to the resize routines
remembering it, but if windows_check_reformat() or windows_remember_size()
didn't actually do a reformat the position was not forgotten. It is now,
so this jumping should no longer occur.

Single character leafnames (e.g. "a.class") used to be reported just as
"Index" in a save dialogue for the object. Fixed.

<P> elements could fail to work as expected in some circumstances. For
example, there would be no gap above '<p> <b>...' - the <b> text doesn't
have the <p> attached, the tag before it does. However, the white space
on this tag gets stripped so it ends up with a NULL text field. This
means that paragraph space is allocated but the text height for the line
thus far is zero. This has been fixed through special case code in
reformat_check_height.

browser_base_url() function added, which through browser_base_callback
can supply a base URL for the current document.

In-page references (URLs with '#something' in them) would fail if the
page contained a BASE tag which pointed elsewhere (that is, the page
would be fetched from its base URL and references would work thereafter;
not very useful for developing sites on your local hard drive). Fixed.
Fixed also the problem where in-page references would fail once after
a forced reload.

Several ultra-stupid bugs in image cross referencing code within
image_update_image fixed:

 - No longer redraws *every* page with the same background when
   *any* of those backgrounds are updated; just if the page with
   the actual image data attached is updated. Doh!

 - Similarly, no longer updates every copy of an image when asked
   to update any of them, only when the one holding the actual image
   data is updated.

 - In the above cases, image array a scanning is avoided wherever
   possible now, whereas it used to happen for any update.

Animated masked GIFs will no longer flicker briefly when they are first
viewed on a page.

Hacky but useful optimisation in Images.c. Local compilation option
'FAST_TOKEN_REFERENCE' controls whether or not the flags word of each
HStream associated with an image_info struct is used in part to store
the image's array index. If so, there's no array scanning to do - this
signficantly speeds up cross referenced image handling. It's still
rather undertested "but it seems to work". The number of bits used for
the array index is controlled by FAST_TOKEN_REFERENCE_SHIFT, and is
currently 20, giving around a 1 million image limit on the browser
and leaving 12 bits for genuine flags (only 3 currently used).

If an error occurred when Message_PlugIn_Opening was received, Browse
would exit early with the message - before it removed the plug-in from
the queue, thus stopping other launches. The error is now reported and
then the item is still removed, preventing this problem.

The BASEHREF entry in the parameters file used for plug-in launching
will now give the contents of any BASE tag in the document before
looking at the display URL, then the fetch URL.

When a new page is visited or a browser window closed, any in progress
fetches for plug-ins are abandoned. They weren't before, which caused
all sorts of problems later on. In addition, any pending plug-in items
in the queue may not have been correctly flushed (the first item may
have been left behind), which can cause mis-firing of the plug-in
engine as it picks up outdated queue items and attemps to launch them.
This has also been fixed.

Fixed problem with asynchronous delivery and reception of the Stream_New
plug-in protocol messages, which previously would be incorrectly handled -
Browse assumed that, as with plug-in launch, only one fetch would be running
at a time (or the message passing between plug-in and fetch window would
occur synchronously). This is not the case, and a variety of problems could
be seen if the system broke down. The most obvious symptom is in Scrap,
where Browse used to leave behind "BTFxxxxx" files on quit.

Intermittent "Invalid object ID" errors cured; the Find dialogue box
handler wasn't clearing its remembered ID, and since Find is a shared
object, that object could get deleted without the Find code
realising.

Corrected mis-spelling of "Parameters" n comment block at top of
about_copy_info_file(), which fouled up the documentation auto-generation.

BuildSHelp will recognise functions indented by 2 spaces, assume they're
indented because of a wrapping #ifdef, and put 'Conditionally compiled.'
under the name of any such functions. It no longer outputs broken manuals
if no functions are found in a source file. More robust to odd input due
to extra EOF checking.

New utility BuildHTML, to generate HTML pages in the same manner as
BuildSHelp, created from BuildSHelp. This was done to support Ferrotec
who'd like StrongHelp-like documentation but don't want to be tied to
Acorn machines (and haven't got any at the time of writing anyway!).
HTML was agreed as a good, easy format to go for.

Have begun to implement JavaScript support. Updated !Boot and !Run[D]
files to define File$Type_F81 and Alias$@@RunType_F81 (0xf81 is a
JavaScript script file, 'JSScript', MIME type application/x-javascript,
common filename extension '.js'.). !Sprites[22] files have the relevant
file icons added. Messages files extended with various tokens for
miscellaneous error messages, error box buttons etc. Created a Browse
About: page section based on the JavaScript filetype - we at last
credit the use of the JPEG group software, LibPNG, etc.
@
text
@d42 9
d158 2
a159 2
                        for malloc. Currently, this will cause various
                        failures within the browser and should not be used.
d183 9
@


1.7
log
@All !Run[D], Choices, Messages, Controls and Res files are up to date.

RefoKeep and RefoHold options added to, respectively, try and maintain
the line at the top of the visible area when reformatting, and not shrink
the vertical extent at the start of a reformat to try and avoid flicker
to the top of the page and back down again when RefoKeep is on. Choices
front-end implemented, which also allows RefoWait and RefoTime to be set.
Unfortunately for various reasons this doesn't help the page jumping when
unsized images come in (but RefoHold can improve matters...) - roll on
the image history.

DragToScroll and NoScrollBars options added for frames; included new
pointer type, Mouse_Shape_DTS, so relevant Controls file entries done
and Sprites[22] files updated as required. Noticed some builds have
a low-res ptr_link with a mask - mask removed.

Named anchor following fixed up somewhat - anchors near the bottom of
the page shouldn't be displayed, and then pulled down when the fetcher
releases null polls and ensures the y extent is correct (this through
implementing the min_height field in the browser_data structure).

RefoHang was never implemented and there seems little point to it now,
so the entry for it has been removed from the global choices structure
and all Choices files.

Markers menus should work properly now (in last check-in they would not
update correctly if Adjust was used on the entries).

URI handler usage now a lot more sensible, with configuration of how the
browser uses the module from both a Utils menu submenu (sic) and the
Choices dialogue.

Slightly dodgy 'hang around waiting for user input' stuff for the Cookies
dialogue box: All fetches are suspended; the fetcher remembers some info
about its state at the time the cookie came in, and restores it later; it
will only do this for one fetch at a time. It's necessary to single-thread
the fetcher at this point anyway, since other fetches may have a
dependency on the cookie that is hanging in mid-air at that point. As part
of this, some of the fetcher code has been split out into separate
functions (to try and 'black box' the code a bit). Anyway, Cookie Query
dialogue box now implemented with appropriate Choices file entry and
UI work in the Choices dialogue box.

Phoenix build Choices rearranged. Can now choose when the image history
is saved from the front end. Added also MSIE 4-style table option menu
for JPEG support (OS only, OS if it can handle it, internal only).

Should be a bit faster at loading the history - though 95% of the time
is spent in SWI URL_ParseURL. URL descriptions are stored more
efficiently as part of this - one malloc block instead of several
small blocks. The minimum block size for malloc blocks typically leads
to a significantly smaller startup wimpslot depending on the visit
history size.

Nasty bug in image system fixed. If an image size came in and a reformat
was to take place, the line the image lies in is found and the reformat
progresses from there. Unforunately, this didn't check to see if the
token can't be found in the line list, so it'd reformat from the top
of the page...! This would happen if, for example, an image halfway down
the page came in whilst a reformat for an image higher up had just begun.

In Choices.c, made choices_set_timetype_field, choices_set_uri_field,
choices_set_plugin_field, choices_set_cookie_field, and
choices_set_jpeg_field static (so they're not declared in Choices.h now).

Two memory leaks plugged in URL comparison routines in URLutils.c
(calling free() url_description instead of urlutils_free_descripton()).

Client pull reload handler was setting the reload flag if reloading
the same page, but forgetting to turn on reload_lock so
fetchpage_postprocessed was clearing the reload state... Similarly,
Ctrl+Shift+SELECT-Click on a link when the Controls file 'UseSmall'
entry is 'no' would not have reloaded as it should. Both fixed.

Frames shouldn't be so keen on acquiring horizontal scroll bars and never
letting them go when their width is decreased now. Frames set up for
'scrolling="yes"' will not start with no scroll bars and then gain them
shortly afterwards, causing flicker and two reformats - they'll start
with, and continue to hold, both scroll bars.

Pointer shouldn't flicker when over a frame border whilst other fetches
are progressing now.
@
text
@d38 4
d151 1
d168 6
@


1.6
log
@Programming warehouse link removed from all hotlists - the page has gone.

Some compile-time hacks in place to use MemLib, a dynamic area based
malloc replacement which shrinks its heap when possible. All builds
have these switched off at the moment. Seemed to work with just Browse,
though there would be problems with message blocks stored in dynamic
areas because of the Wimp's '&3800000' check - however, it failed when
HTMLLib was made to use it, too. Don't know why yet.

ItemInfo.[c/h] source added, with Res file additions for testbed Browse
and Phoenix.

Small fetch windows now work properly regardless of toolbar settings
in the Choices.

Reload now reloads all images too, rather than only reloading them for
as long as the main page was being fetched.

Added a simple 'Find' facility.

Realised that event handlers in eventlib are called in reverse order
of registration, so the miscellaneous event handler is now registered
first rather than last.

Multiuser code added (most only active if SINGLE_USER is undefined). As
part of this, hotlist code now knows about read-only items (done for the
Customer-style 'Resources' file, but works generally anyway).
handle_add_hotlist doesn't try to save the hotlist itself anymore (the
hotlist_add function does all that through hotlist_modified anyway).

Customer build Choices and Controls updated slightly (e.g. ClaimHelp
off, hotlist to save on quit only).

Customer build now uses Phoenix-style buttons. Sprites files which
worked at the time (but will probably be out of date now) and included
most of the original Customer-style sprites are in
'Utils.Icons.Customer'.

Choices, Messages and Res files for all builds now stripped down to only
single user items or single plus multiuser for Customer build and testbed
build. Before, all contained a few multiuser bits in at least the Choices
file if not more.

Grammatical error ("Fetching frames contents" (sic.)) corrected in
default message, Toolbars.c, and all of the Messages files.

Customer build brought back to a servicable level (including
implementation of the Find dialogue box with animation and fixing
up authorisation and 'Stop' state in the tristate). Quite a few
missing #ifndef REMOTE_HOTLIST bits from hotlist code added...

Customer build will not use <Choices$Write> or Boot:Choices for any
file finding now. UseProxy defaults to 'yes', MaxImages to 2. Res
file includes Proxy Address setting (save_save_choices() now writes
the ProxyAddress line).
@
text
@d33 5
d160 3
d235 24
a258 4
   point here and is bordering on deprecated. I may well go through all of
   the code and remove this assumption though, as clearly using the return
   value is the approach which *should* be taken, rather than relying on
   'tokens' (also allows more rational signaling of a failed lookup).
d345 4
d350 1
d367 6
d377 1
d382 8
a389 2
GHistSize
VHistSize
d392 1
d416 3
d421 2
d424 1
d429 7
a435 2
HotlistPath
HistoryPath
d446 3
a448 2
PostIn  [not implemented]
PostOut [not implemented]
d492 1
d529 4
@


1.5
log
@*Don't* try to load FilterManager 0.18 in !Run[D] files. Requires
WindowManager 3.98. Sets URI handler environment variables for
http, ftp and gopher.

Fixed 'doesn't reformat for unsized images' bug - only happens when the
deferred reformatter is enabled, hadn't remembered to check this in my
debug build where this is turned off. Oops.

Caret position in forms could get left behind despite attempts to rectify
this in v1.31 - now fixed (and faster, fortunately).

Hourglass + percentage displayed for History and Image History when
loading - it can take a while for very big histories, though in
practice you only see the visit history loading (has to do a lot
more work, and is thus quite a bit slower than the image history).

POST forms worked when targetted to frames, but were broken when
not targetted! (Forms data inherited from one browser to the same
browser; ended up freeing the flex block...). Fixed.

Now support 303 response code (redirect to GET). Treated as 301, i.e.
not support if STRICT_PARSER is defined, otherwise drops through to
the 302 handling code.

Pointer shouldn't get stuck in odd shapes when going to a new page now;
it gets reset to a standard shape every time the null handler that
checks the position is called, though (whether or not the handler thinks
the pointer is over a different token, if that token is NULL, it sets
the standard shape). A possible work around would be for a browser to
remember the pointer shape too; that's for the future, though.

Early stage table formatting functions could blow themselves apart if
tables_count_table decided there were no rows, columns or both. A
net table size of zero cells is now dealt with; slow, partial table
fetches in multiple windows with image loading turned on will now
*hopefully* be stable, where v1.31 would have bombed out repeatedly.

A nested frameset within one document will now inherit the border
width (frame spacing) and border colour of its parent. This is done
by copying the maxlen and indent fields of the parent token over
the child, and note it's done in the browser (fetch_preprocess_token),
not HTMLLib.

Border colour on a FRAMESET now used, with the first colour on any
FRAME within it overriding, as in NN 4 and MSIE 4.

<LI> bullets really do stick to the text next to them now (I'd done
that in an experimental piece of code and forgotten to merge it back
before the last check-in).

Browse$HotlistURL/URIFile and Browse$HomeURL/URIFile now work from
_TaskName in the Messages file, and are thus of the generic form
<App>$HotlistURL etc. - Docs.Notes and Docs.User updated appropriately.

Event 0x11d00 through to 0x11d7f will make the browser look up Controls
file entries 'JumpTo00' through to 'JumpTo7f' and read a URL from them.
This will be fetched in the ancestor window of the source of the event,
or a new window if such an ancestor can't be found [for Daytona demo].

NB: Nasty frames-related crash at http://www.teledanmark.dk/menu/start.htm
is *not* fixed in this source. NOBR is not supported.
@
text
@d31 2
d66 1
a67 1
  Find dialogue (Find.h)
d129 13
a141 10
ROM                 The ROM build !Mkxxxx files use this.
TRACE               Enable general debugging.
STRICT_PARSER       Gives more warnings at parse time.
ALIAS_URLS          E.g. instead of file://...hotlist, just say 'Hotlist'.
HIDE_CGI            Don't show the info after a '?' in URL displays.
ANTI_TWITTER        Use software anti-twitter.
REMOTE_HOTLIST      Use HTML files fetched to the page for hotlists,
                    rather than compiling in the whole hotlist manager.
CUSTOMER_SPECIAL    Include hard coded JavaScript for www.customer.net.
UNIFONT             Multilingual support.
d521 12
a536 6


* Find dialogue (Find.h) [unimplemented]
  --------------------------------------

The numberspace starts at 0x1600.
@


1.4
log
@...and some updated docs (tag names, error numbers and so-on).
@
text
@d233 1
a233 1
The cases of special system variables - e.g. to point to an alternative choices or controls file, etc. - is a tricky one. In the end, they have to maintain the same name - so they'll be Browse$... regardless of the application name. These are:
d243 4
a246 15
Browse$ChoicesFile,          Used to load Choices or Controls if set, else
Browse$ControlsFile          if unset, use <from argv[0]>.[name].

Browse$HotlistURL,           Used only if set, to override Choices. The first
Browse$HotlistURIFile;       in the pair is tried to get a URL to fetch a
Browse$HomeURL,              hotlist (REMOTE_HOTLIST builds only) or find the
Browse$HomeURIFile           home page URL; if this is unset, the second is
                             tried to get to a URI file containing the same
                             information. If neither exist, the relevant
                             Choices entry is used instead. These are
                             described in more detail later.

Browse$CookieFile            The HTTP module uses this, which if set, will
                             be taken as the full pathname to which any
                             cookies may be written.
d257 19
@


1.3
log
@Fixed some glitches in the modified status bar code (e.g. status inference
wasn't working properly).

Shift+Toggle size always opened to not obscure the icon bar. If CMOS is
set to always show the icon bar, then Shift+Toggle size is meant to
reverse sense and open to absolute full size. It now does this.

!Run[D] files now require URL 0.22, HTTP 0.64, FTP 0.22, Gopher 0.08
and File 0.32.

Minor overhaul of 'Docs.Notes' (with 'Docs.User' similarly updated) to
include a few new bits and pieces.

Timeout values of 0 now mean 'forever'. Plug-in status messages now have
their own timeout setting. New Messages token 'Actv' for extra info when
a status message times out and the status line drops to 'Viewing' or
'Ready' when there is still a Busy state registered by the Plug-in.

Small Fetch windows don't become visible briefly for Plug-in fetches
when the fetch is complete (for SeeFetches:no, where these windows
should be hidden all the time).

WebServe may be controlled through the Browse front-end via.
Wimp_MAppControl reason code 4 (Wimp_MAppControl_Configure). Note the
renaming internally of 'WebServ' or 'WebServe' has been changed to
'Proxy' (with lower case equivalents where relevant); proxy name
and starting details come from the Messages file 'ProxyName' and
'ProxyComm' tokens. More in 'Docs.Notes'.

Res files updated for image history and PRE/TT font aspect ratio
choices. 'Don't expire' labels changed to 'Expire' (oops, didn't
notice the change in the development Browse's Res file when I
updated all of the others until now...).

When printing, Wimp_PlotIcon appears to ignore R4 and R5, plots
'somewhere' on the page, and tries to get the sprite from the global
pool. This latter part normally causes an error to be raised; though
on my machine I just get a corrupted error message. The Desktop font
gets lost at this point too. All have yet to be fixed; as an
interim work around, Wimp_PlotIcon objects are never drawn at all
if the global 'printing' flag is set.
@
text
@d29 2
d149 1
@


1.2
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d5 2
d25 4
d67 2
d478 1
a478 1
Menu items rarely raise events themselves, outside of ToBeShown-style events; usually, the dialogues or other objects that they show or alter raise the events themselves (again, usually dialogues raise ToBeShown-style events rather than menu items raising events best described as AboutToShow).
d529 14
d658 2
d665 2
@


1.1
log
@Now handles PARAM tags. Sorted out Plug-In bug that was related to Java
setting a 0 by 0 graphics window before calling Wimp_Poll (fixed in Java).
Implemented queue for Plug-Ins so multiple broadcasts aren't sent for
several Objects in one data chunk.

Added Docs directory with some documentation in it. More things to keep
checking for stylistic consistency, horray ;-)

Corrected !Run[D] for Ursula build to need AcornURI but not TaskModule
(URI handler needed for !Mail to pick up mailto: links).

Added display_height field to browser_data, analogous to display_width,
to cope with % sized objects by width and height (see how HRs are
handled in Redraw.c for an example of how it was always fairly easy
with width, but not height until this addition). Though you do have
to reload to get a new size; reformat isn't enough. Must see to this
some time...

Fixed bug where basic typefaces were claimed *before* the Choices file
had been read. For unusual Choices settings, this could create some
'interesting' problems now and again. This was part of narrower scope
work in the Choices code to allow font changing without leaking font
handles (now done; fm_shutdown only ditches fonts, it keeps internal
structures - must then call  fm_lose_fonts for all browsers to get the
bitfields up to date, then rewrite the typeface definitions and reclaim
basic fonts). Noticed that fm_claim_basic_typefaces would claim multiple
instances of the same font if there were several cases of the same font
mapped to different typeface styles - fixed.

Implemented PlugInControl settings, but not SupportObject (fully).
@
text
@a4 2
NB Don't forget to keep the 'User' version of this file updated in parallel!

d20 1
a20 1
26/09/97 (ADH): Added Choices and Controls file location information.
d22 1
a22 2
14/10/97 (ADH): Ready for CVS. Note that this is actually a bit out of date.
                I'll sort this out soon, hopefully...
d36 1
d198 17
@
