head	1.14;
access;
symbols
	Browse-2_16:1.14
	Browse-2_15:1.14
	Browse-2_14:1.14
	Browse-2_13:1.14
	Browse-2_12:1.14
	Browse-2_11:1.13
	Browse-2_10:1.13
	Browse-2_09:1.13
	ahodgkin_208_i4_2:1.13
	ahodgkin_208_i4:1.13
	ahodgkin_208_i3:1.13
	ahodgkin_208_i2:1.13
	ahodgkin_208_i1:1.13
	ahodgkin_207release:1.11
	ahodgkin_206release:1.11
	ahodgkin_205release:1.10
	ahodgkin_204release:1.10
	ahodgkin_202release:1.9
	ahodgkin_201release:1.8
	ahodgkin_200release:1.8
	ahodgkin_133beta:1.8
	ahodgkin_132beta:1.8
	ahodgkin_131beta:1.8
	ahodgkin_130beta:1.7
	ahodgkin_129:1.7
	ahodgkin_128beta:1.7
	ahodgkin_128alpha:1.6
	ahodgkin_127beta2:1.5
	ahodgkin_127beta:1.5
	ahodgkin_126beta:1.3
	ahodgkin_AW97patch:1.2
	ahodgkin_AW97:1.1;
locks; strict;
comment	@# @;


1.14
date	2006.03.13.22.06.18;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	99.09.02.13.10.00;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	99.03.30.15.51.06;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	98.07.02.11.10.32;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	98.04.16.08.13.20;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	98.03.20.12.11.38;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	98.02.02.13.22.21;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.12.04.11.20.30;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.11.26.17.10.42;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.11.20.16.03.53;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.11.19.10.28.19;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.10.30.17.10.44;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.10.24.14.08.58;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.10.16.13.22.59;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.14
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@-------------------------------------------------------------------------------
History
=======

Ages Ago (ADH): Created and routinely updated.

08/06/97 (ADH): Added this history. Want to add in the various compile-time
                definable errors (e.g. the STRICT_PARSER) stuff soon, but be
                warned that if this isn't mentioned in any history entries
                below, this information is still missing.

18/06/97 (ADH): Add NoMemTab error.

03/09/97 (ADH): Added contents.

30/04/98 (ADH): NoMemJSc for JavaScript added.

08/06/99 (ADH): Note that history entries are only updated when a major change
                takes place, not just if (say) one new error item is added to
                an existing scheme.
-------------------------------------------------------------------------------


Contents
========

Overview
Mild errors
  NoMemFet
  NoMemRea
  NoMemTab
  NoMemGen
  NoMemImg
  NoMemJSc
More serious errors
  FontMem
  StrNotFd
  BadType
  BadTRef


Overview
========

Some errors can be generated from several places. To signal where they came from, a function name or number can be put after the error message. For mild errors (which the user might see) a 'cryptic' number looks best. For more serious internal errors (which the user should not usually see) a function name is more useful, typically. For very serious errors (which the user should never see) the full details are usually hard coded in the error message itself to prevent any possible complications when argument substitution tries to occur.

This file describes the errors (named by token as in the Messages file) that have extra information given about the caller, and details who the callers are and what the problem is.

Errors which are specific to a single callee are not detailed further than their presence in the Messages file, which should prove self explanatory, as should errors which occur only in trace builds. These are generally hard coded rather than looked up from Messages, since they're only needed in a debug browsers.


Mild errors
===========

* NoMemFet (raise using make_no_fetch_memory_error, Utils.h)
  --------

Reports the generator by a number in brackets after the error. Built through the make_no_fetch_memory_error function. Typically signal a memory allocation failure during early stages of a fetch. Generator numbers are as follows:

Number   Generator                   Reason

1        html_get                    malloc for urlstat structure failed in
         (FetchHTML.c)               early stages of fetch.
2        html_get                    flex alloc for extra forms data failed.
         (FetchHTML.c)
3        html_get                    Call to html_insert_header failed due to
         (FetchHTML.c)               it not being able to claim enough memory.
                                     This was to insert Content-Length string.
4        html_get                    As number 3, but to insert Content-Type
         (FetchHTML.c)               string.
5        html_get                    As number 3, but to insert Mailserv-User
         (FetchHTML.c)               string.
6        html_get                    As number 3, but to insert X-NoProxy
         (FetchHTML.c)               string.
7        fetchpage_new               malloc for URL string failed.
         (FetchPage.c)
8        fetchpage_new_add           malloc for URL string and additional
         (FetchPage.c)               data failed.
9        handle_clicks               malloc for URL string for reloading a
         (Handlers.c)                URL in a new view failed.
10       fetchpage_process_internal  malloc for substitute URL string failed.
         (FetchPage.c)
11       authorise_remember          flex_alloc or flex_extend for authoris-
         (Authorise.c)               ation data failed.
12       fetch_authorisation_proceed flex_alloc or flex_extend for encoded
         (Fetch.c)                   authorisation data failed.
13       image_add_usage             malloc for image_usage structure
         (Images.c)                  failed.
14       fetchpage_postprocess_uri   malloc for URI from URI handler that
         (FetchPage.c)               was to be fetched, failed.
15       urlutils_dispatch           malloc for URI_Queue structure prior
         (URLutils.c)                to sending out a URI failed.
16       browser_inherit             flex_alloc for copy of parent's
         Browser.c                   'extradata' block failed.
17       html_thread_out             malloc for fetcher_state block failed;
         (FetchHTML.c)               this is potentially quite serious...!
18       fetchpage_preprocessed      malloc for copy of url_buffer failed
         (FetchPage.c)               prior to invocation of JavaScript engine.
19       fetchpage_preprocessed      malloc for url_buffer to restore URL from
         (FetchPage.c)               url_copy failed after calling JavaScript
                                     engine.
20       form_click_field            malloc for buffer to hold JavaScript URL
         (Forms.h)                   constructed with 'onclick' info.


* NoMemRea (raise using make_no_cont_memory_error, Utils.h)
  --------

Reports the generator by a number in brackets after the error. Built through the make_no_cont_memory function. Typically signal a memory allocation failure during a fetch. Generator numbers are as follows:

Number   Generator               Reason

1        html_get_next_token     flex_alloc for store for page data from the
         (FetchHTML.c)           URL module failed.
2        form_ensure_free        flex_alloc or flex_extend returned 0 when
         (Forms.c)               trying to ensure 'n' bytes were available.
3        form_create_menu        malloc failed when trying to create space
         (Forms.c)               for a new menu.
4        form_build_data         1st call to form_extend_flex() in Forms.c
         (Forms.c)               failed to extend the flex block.
5        form_build_data         2nd call to form_extend_flex() in Forms.c
         (Forms.c)               failed to extend the flex block.
6        form_build_data         3rd call to form_extend_flex() in Forms.c
         (Forms.c)               failed to extend the flex block.
7        form_build_data         Call to form_encode_flex_data() in Forms.c
         (Forms.c)               failed, indicating it couldn't claim the
                                 memory it required to operate.
8        html_get_next_token     malloc for buffer to fetch data in through
         (FetchHTML.c)           failed.
10       memory_set_chunk_size   flex_alloc or flex_extend returned 0,
         (Memory.c)              i.e. chunk memory claim failed.
11       plugin_setup_stream     Can't allocate a block for a plugin_stream
         (PlugIn.c)              structure.
12       about_build_page        Failure to allocate various blocks for the
                                 'about:' internal page.


* NoMemTab (raise using make_no_table_memory_error, Utils.h)
  --------

Reports the generator by a number in brackets after the error. Built through the make_no_table_memory_error function. Typically signal a memory allocation failure when dealing with tables. Generator numbers are as follows:

Number   Generator                   Reason

1        tables_count_tables         malloc for RowSpill array failed at
         (Tables.c)                  first stage of cell counting.
2        tables_position_table       malloc for RowSpill array failed at
         (Tables.c)                  first stage of cell positioning.
3        tables_width_table          malloc for maxs array failed at
         (Tables.c)                  first stage of cell widthing.
4        tables_width_table          malloc for mins array failed at
         (Tables.c)                  first stage of cell widthing.
5        tables_width_table          malloc for overmaxs array failed at
         (Tables.c)                  first stage of cell widthing.
6        tables_width_table          malloc for overmins array failed at
         (Tables.c)                  first stage of cell widthing.
7        tables_width_table          malloc for pcwidths array failed at
         (Tables.c)                  first stage of cell widthing.
8        tables_width_table          malloc for colmins, colmaxs or
         (Tables.c)                  cellflags arrays failed at the first
                                     stage of cell widthing.
9        reformat_token_width        HtmlMalloc for cell array failed
         (Reformat.c)                after count and position of cells.
10       tables_count_table          HtmlMalloc for column offset array
         (Tables.c)                  failed prior to position of cells.
11       tables_count_table          HtmlMalloc for row offset array failed
         (Tables.c)                  prior to position of cells.

(Numbers 7 and 8 were present in an earlier version of the widthing code but have since been removed).


* NoMemGen (raise using make_no_memory_error, Utils.h)
  --------

Reports the generator by a number in brackets after the error. Built through the make_no_memory_error function. Typically signal a memory allocation failure for some immediate operation. Generator numbers are as follows:

No.  Generator                         What failed

1    tokenutils_line_range_r           malloc for array of token_path structs
     (TokenUtils.c)                    when trying to find a token.
2    hotlist_load_directory            malloc to read a line from the input
     (Hotlist.c)                       file.
3    hotlist_load_directory            malloc to store a directory name from
     (Hotlist.c)                       the input file.
4    hotlist_new_directory             malloc for a new hotlist_item structure.
     (Hotlist.c)
5    hotlist_new_directory             malloc for the name of the new
     (Hotlist.c)                       directory.
6    protocols_atatl_got_data_save     malloc for RAM transfer buffer.
     (Protocols.c)
7    protocols_atatl_got_ram_transmit  malloc or realloc of buffer for loading
     (Protocols.c)                     a URI/URL file.
8    html_get_next_token               Not enough room for GSTrans expansion of
     (FetchHTML.c)                     sysvar when fetching an external image.
9    protocols_atats_data_open_bounced malloc for a command buffer to run
     (Protocols.c)                     an external editor with.
10   save_transfer_uri                 malloc for temporary URI file buffer
     (Save.c)                          during RAM transfer.
11   protocols_atatl_got_data_save     malloc for pending Acknowledge message
     (Protocols.c)                     block.
12   unifont_widefont_init             malloc for font file.
     (Unifont.c)
13   protocols_atats_got_data_save_ack malloc for WimpMessage struct for a
     (Protocols.c)                     pending DataLoad message.
14   save_save_choices                 Various allocations when trying to
     (Save.c)                          save the global Choices.
15   hotlist_newedit_url_handler       malloc for URL or description text.
     (Hotlist.c)
16   hotlist_newren_directoryl_handler malloc for directory name.
     (Hotlist.c)
17   choices_retrieve_text_item        malloc for strings being read from a
     (Choices.c)                       writable field into a Choices item.
18   choices_set_encoding_field        malloc for encoding name.
     (Choices.c)
19   choices_set_save_field            malloc for save type (for hotlist or
     (Choices.c)                       history).
20   Various functions                 malloc for temporary string buffers.
     (Choices.c)
21   plugin_add_queue_entry            malloc for a new structure in the
     (PlugIn.c)                        Plug-In queue.
22   rma_claim                         malloc / realloc for new array item
     (RMA.c)                           or RMA claim itself
23   plugin_add_file_entry             malloc for list item or strings within
     (PlugIn.c)                        that item.
24   plugin_add_instance_entry         malloc for list item recording a
     (PlugIn.c)                        Plug-In instance.
25   history_record and history_load   Various allocations whilst trying to
     (History.c)                       a History structure record.
26   history_add_title                 malloc for title string.
     (History.c)
27   history_load                      Temporary buffer mallocs for loading
     (History.c)                       items.
28   imghistory_record                 malloc for array entry and URL when
     (ImgHistory.c)                    adding an item to the image history.
29   imghistory_load                   malloc for entries array or URLs when
     (ImgHistory.c)                    loading new items to the image history.
30   utils_canonicalise_path           malloc for canonicalised pathname.
     (Utils.c)
31   utils_build_tree                  malloc for local copy of pathname.
     (Utils.c)
32   load_choices                      Various allocations.
     (Main.c)
33   setpboxes_ok                      malloc for post_in and / or post_out
     (SetPBoxes.c)                     pathname.
34   saveshelp_save_draw               malloc for command buffer to create
     (SaveSHelp.c)                     'StrongCreate' command.
35   saveshelp_copy                    malloc for destination pathname.
     (SaveSHelp.c)
36   saveshelp_create                  malloc for safe page filename.
     (SaveSHelp.c)
37   list_scrolllist_event_handler     malloc for list_add_for structure.
     (List.c)
38   list_ok                           malloc for composite string when
     (List.c)                          reading items from ScrollList.
39   save_save_choices                 malloc for small flags array to say
     (Save.c)                          for List dialogue box related items.
40   urifile_parse_uri_file            Various allocations whilst trying to
     (URIfile.c)                       build a command list from a URI file.
41   eventlogs_update_log_structure    malloc for eventlogs_log structure.
     (EventLogs.c)
42   eventlogs_log_message             malloc for message text.
     (EventLogs.c)
43   Various functions                 Attempts to create PDF data arrays.
     (SavePDF.c)
44   Various functions                 Attempts to duplicate strings.
     (SavePDF.c)
45   arrays_extend                     Change of array dimensions.
     (Arrays.c)
46   Various functions                 Allocation of structures or buffers
     (SavePDF.c)                       for PDF file output.
47   fm_putsl                          Allocation of string of requested
     (FontManage.c)                    number of characters plus one.
48   image_to_draw_file                Various internal allocations.
     (Images.c)
49   redraw_read_section               realloc for inferred section text.
     (Redraw.c)

* NoMemImg (raise directly - no Utils.h function available)
  --------

Reports the generator by a number in brackets after the error. Typically signal a browser side (as opposed to image library side) memory allocation failure when dealing with errors. Generator numbers are as follows:

No.  Generator                         Reason

1    image_new_image                   flex_alloc or flex_extend for image_info
     (Images.c)                        structure or image data failed.
2    image_process_null                flex_alloc for data in ddata block
     (Images.c)                        failed during fetching of an image.


* NoMemJSc (raise using make_no_javascript_memory_error, Utils.h)
  --------

Reports the generator by a number in brackets after the error. Signals a probable memory allocation failure when performing some JavaScript operation. Generator numbers are as follows:

No.  Generator                         What failed

1    javascript_gain_context           Attempt to create the global object
     (JavaScript.c)                    within the new parser context.
2    javascript_gain_context           Attempt to initialise standard
     (JavaScript.c)                    classes within global object.
3    javascript_process_script         flex_allocs for source store to place
     (JavaScript.c)                    results of script execution.


More serious errors
===================

* FontMem
  -------

Reports the generator by name. fm_define_typeface_explicit (FontManage.c) is the only generator at present, signalling that its internal call to fm_new_typeface (also in FontManage.c) failed to allocate enough memory for an fm_facelist structure to hold the new typeface.


* StrNotFd
  --------

Reports the generator by name. These are pretty nasty...

Generator                        Reason

html_close                       The urlstat structure that a particular
(FetchHTML.c)                    fetch handle refers to cannot be found in
                                 the list. The handle is thus wrong, or the
                                 urlstat list is corrupted / out of date.
html_get_next_token              As above, for html_close.
(FetchHTML.c)
html_get_next_chunk              As above, for html_close.
(FetchHTML.c)


* BadType
  -------

Reports the generator by name. fm_define_typeface (FontManage.c) is the only generator at present, signalling that a typeface string passed to it has the wrong syntax (in one way or another).


* BadTRef
  -------

Reports the generator by name.

Generator                        Reason

fm_write_descriptor              A name of a typeface couldn't be found by
(FontManage.c)                   fm_find_typeface (also in FontManage.c),
                                 so the decriptor string couldn't be given.
fm_write_name                    Same reason as above for fm_write_descriptor,
(FontManage.c)                   only this time a specific font name
                                 within that descriptor couldn't be given.
fm_read_typeface                 A name of a typeface couldn't be found by
(FontManage.c)                   fm_find_typeface - the name was inside an
                                 fm_typeface structure and the function can't
                                 fill in the rest of the details as it can't
                                 find the typeface.
@


1.13
log
@Long overdue check-in of intermediate browser build, from continued "out
of hours" work. Forgot to add a few files last time too.

List dialogue box handler complete, and exclusion lists implemented
within the main browser code. Full documentation in Choices file.
Save routine knows all about it but is now getting very slow - must
come up with a better scheme; for now, it puts the hourglass on...

StripExtensions option controls auto stripping of filename extensions.

More sensible ancestor / frame selection for keyboard shortcut items
and the save dialogues - having selected a frame won't lock you into
it for F3 and related shortcuts now (input focus in URL writable ->
get ancestor details, input focus in frame -> get frame details). F4
works in frames. F5 now generally present for 'view source' with a
corresponding menu entry in the File menu.

Odd thing in later Res files; there's no action set for Adjust clicks
on the main ToolAction items in the button bar. Very odd. Nothing
appears to be set in v2.07 either, yet adjust-click works. Even
stranger. Anyway, added in the relevant event details (same as for
Select click in all cases) and this fixes the problem.

Background colours in the TABLE tag ignored the "don't print any
backgrounds" Print Style setting. Fixed. Meanwhile, the "black
text with no backgrounds" option wasn't getting this right either;
fixed this also.

Event logging implemented; HTTP errors and script output via.
window.print extension. No internal error output yet.

Faith:Never behaviour extended. If ever a server sends something with
no content type or an unhandleable type, the browser will try and get a
filetype from the URL. If it gets text or HTML, it'll render the file.
Else it'll save it. Hacks around IIS 4's lack of a content type field
in the Marketeye login stuff, and similar other slightly broken sites.
@
text
@d55 1
a55 1
* NoMemFet
d106 1
a106 1
* NoMemRea
d138 1
a138 1
* NoMemTab
d172 1
a172 1
* NoMemGen
d211 2
a212 2
17   choices_get_contents              malloc for Home Page string.
     (Choices.c)
d217 1
a217 1
20   choices_set_display_field         malloc for hotlist display type.
d263 14
d278 1
a278 2

* NoMemImg
d291 1
a291 1
* NoMemJSc
@


1.12
log
@Intermediate check-in; building a browser from this gives you something
between 2.07 and 2.08. Only the Phoenix JavaScript resources are fully
up to date.

I *think* these are the changes since the last check-in:

When saved as a Draw file, horizontal rules were plotted one page width
too far to the right (wonder when that started happening?!). Fixed. In
addition, DrawFiles now accepted as OBJECTs - they weren't in the
recognised filetype list before. Doh.

Table size calculator tables_count_table would overestimate the number
of cells where ROWSPAN was present and there were other rows below the
one spanned. Fixed. In certain odd cases (e.g. optimised image exports
as HTML tables (!!) from the Gimp) this can save vast amounts of RAM.

Fixed problem where printing stops in the middle of a document. Redraw
engine pagination code was written in the days where lines couldn't
have gaps between them; they can now. If a gap fell at the bottom of
a page the engine would look down, see no line straddling or touching
the page edge, and assume there was nothing more. This case is now
correctly handled.

Made sure desktop and testbed Browse Res files had up-to-date Encoding
menus (v2.07 Phoenix has different menus from v2.07 Browse by oversight).

URL auto-completion piggy-backed onto manual completion code; any string
without '.', '/' or ':' in it gets run through completion to see if a
more meaningful item can be produced - "www" special cased out though.

New List dialogue box handler, used for proxy exclusions etc.
(incomplete), complete with appropriate Res file objects.
@
text
@d7 3
a9 4
08/06/97 (ADH): Added this history. Want to add in the various
                compile-time definable errors (e.g. the
                STRICT_PARSER) stuff soon, but be warned that if
                this isn't mentioned in any history entries
d17 4
d253 10
@


1.11
log
@By request, an intermediate 2.06 check-in. This is not a "proper" release
and will need some Makefile fiddling etc. to swap between JavaScript and
standard builds and so-forth. The Resources files are not all up to date;
only Phoenix and the testbed Browse are more or less current. Right now,
JavaScript doesn't work, SO COMPILE IT OUT. But to make a JavaScript build
for a larf -

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean
 * Add -DJAVASCRIPT to DFLAGS in MakeFile
 * Strip dynamic dependencies from MakeFile
 * Rebuild Phoenix or the Desktop build of Browse
 * In the exported copy, increase the !Run file WimpSlot value; either
   use the appropriate symbols table in 'syms' or use about 960K for
   non-debug, 4600K for debug builds.
 * If the exported copy has an About resource, edit the HTML file inside
   and uncomment the line about JavaScript.
 * Reverse most of the above to rebuild a non-JavaScript copy! :-O

I hope to have much of the above automated soon (either by a new target,
or preferably hackery with the MakeFile).

Here's the change list:

References to 'Phoenix' removed from Ursula build Res file Choices dialogue
help text (only a couple of them). Cookie value display made taller in the
Cookie Query dialogue (prompt field shrunk to accommodate this).

Yikes - ever since markers, "reformat page to fit paper" hasn't done
anything when printing; the reformatter reset the HTML page limits to
the window size at startup! Fixed. Using markers, you can now also reformat
from the top of the visible area and still reformat to fit the paper; the
print dialogue used to grey out the reformat option in this case. It still
does this when printing to the bottom of the visible area, though.

You can drag text files to form writables (single and multiple line,
but NOT password items (deliberately; it's trivial to add this but I
think it'd be a bad idea)). Normally, data is appended up to the limit
specified by the field (unlimited for multiple line items). Holding
down Ctrl replaces the current value entirely (still, again, limited
by maximum field length). The caret is moved from wherever it currently
is and placed at the end of the added data. Note that you *cannot* insert
in the middle of text by placing the caret and dropping.

Things can get distinctly sluggish when you start dragging many Ks of
text file into a multi-line writable, so the keyboard buffer is cleared
for any input code < 32, equal to 127 (backspace - this one is a little
less clear cut, but I think it's probably worthwhile) and anything
> 255. This way, when typing, you don't lose characters; but when moving
around, you don't find the cursor "running away" from you.

Multi-line writables (text areas) would redraw a vertical column taller,
or horizontal column wider than the element covers itself should the
user scroll enough in any one direction (e.g. Ctrl+Up or Ctrl+Down to
go to the top or end of the area). The code working out how much of
the area to redraw by the number of lines or columns moved didn't ensure
it kept within the area. Because an update rather than force redraw is
done, with background blending turned on text around the area would
"thicken". Now fixed.

Form menu entries have (at long last) a space appended to each one, so
the Wimp doesn't get confused and think something is a keyboard shortcut
when someone expresses "Formula 1" as (say) "F1"... Now fill in the menu
width entry from having read the actual VDU character width and spacing,
not that anyone uses the original RO 3.1 Wimp with Browse any more! (The
code existed elsewhere anyway, so it was trivial to add).

Ctrl+U in a multi-line writable clears the contents of the line the caret
is on, but doesn't delete the line itself. Ctrl+J now does this.

DDFLAGS doesn't set ALIAS_URLS - Customer build has this now.

Tiled images were being plotted in the wrong place in some modes (a '+4'
in the starting y coordinate calculations in the three filler / tile
functions should have been '+wimpt_dy()').

MessageTrans lookup buffer extended from 256 to 320 bytes (Limits_Message
in Limits.h), mostly to support Messages files alterations for the About
page.

Spelling error in URI handler menu for Desktop (also known as Ursula,
though this is now something of a misnomer) build corrected. There was
a missing 'l' in 'handler'). StartProxy setting in Choices was 'no' and
is now 'yes'.

Downloading files of sizes over about 20Mb would cause an overflow in
the % calculating code ("(fetched * 100) / file_size" as opposed to
"100 * (fetched / file_size)" with (float) and (int) casts as required.
Percentages now shown to 1dp; Mb displays to 2dp where the file size is
not known.

Download speed is now indicated in Small Fetch windows. Increased the
delay between progress indicator updates as part of this, and modified
Res files to cope (byte counter needs to be enlarged quite a lot). It
isn't shown in normal browser windows because the enlarged byte counter
looks daft in that context (normally, there's never enough information
to fill even half of it).

Adjust-click on an unlinked part of a client side image map could give an
invalid object ID error from accidentally using the return value of a
previous Toolbox call instead of the return result of a call to a fetcher
routine - because given it had a NULL pointer for the URL, there was no
such call made. Corrected in windows_create_browser() and
handle_link_clicks() won't try to do this in the first place anymore.
fetchpage_fetch_targetted() will also warn of such NULL pointers in
TRACE builds.

Submitting a GET form back to the same URL would lead to the query
string getting appended to the fetch URL over and over. form_build_data
now checks to see if there's already a query string in the submission
URL for GET methods and if so, strips it. fetchpage_new_add will do a
similar thing in the case of the additional data starting with '?'.

When following a link, if RefoKeep was 'yes', the page could sometimes
jump to a pre-stored scroll position; it was down to the resize routines
remembering it, but if windows_check_reformat() or windows_remember_size()
didn't actually do a reformat the position was not forgotten. It is now,
so this jumping should no longer occur.

Single character leafnames (e.g. "a.class") used to be reported just as
"Index" in a save dialogue for the object. Fixed.

<P> elements could fail to work as expected in some circumstances. For
example, there would be no gap above '<p> <b>...' - the <b> text doesn't
have the <p> attached, the tag before it does. However, the white space
on this tag gets stripped so it ends up with a NULL text field. This
means that paragraph space is allocated but the text height for the line
thus far is zero. This has been fixed through special case code in
reformat_check_height.

browser_base_url() function added, which through browser_base_callback
can supply a base URL for the current document.

In-page references (URLs with '#something' in them) would fail if the
page contained a BASE tag which pointed elsewhere (that is, the page
would be fetched from its base URL and references would work thereafter;
not very useful for developing sites on your local hard drive). Fixed.
Fixed also the problem where in-page references would fail once after
a forced reload.

Several ultra-stupid bugs in image cross referencing code within
image_update_image fixed:

 - No longer redraws *every* page with the same background when
   *any* of those backgrounds are updated; just if the page with
   the actual image data attached is updated. Doh!

 - Similarly, no longer updates every copy of an image when asked
   to update any of them, only when the one holding the actual image
   data is updated.

 - In the above cases, image array a scanning is avoided wherever
   possible now, whereas it used to happen for any update.

Animated masked GIFs will no longer flicker briefly when they are first
viewed on a page.

Hacky but useful optimisation in Images.c. Local compilation option
'FAST_TOKEN_REFERENCE' controls whether or not the flags word of each
HStream associated with an image_info struct is used in part to store
the image's array index. If so, there's no array scanning to do - this
signficantly speeds up cross referenced image handling. It's still
rather undertested "but it seems to work". The number of bits used for
the array index is controlled by FAST_TOKEN_REFERENCE_SHIFT, and is
currently 20, giving around a 1 million image limit on the browser
and leaving 12 bits for genuine flags (only 3 currently used).

If an error occurred when Message_PlugIn_Opening was received, Browse
would exit early with the message - before it removed the plug-in from
the queue, thus stopping other launches. The error is now reported and
then the item is still removed, preventing this problem.

The BASEHREF entry in the parameters file used for plug-in launching
will now give the contents of any BASE tag in the document before
looking at the display URL, then the fetch URL.

When a new page is visited or a browser window closed, any in progress
fetches for plug-ins are abandoned. They weren't before, which caused
all sorts of problems later on. In addition, any pending plug-in items
in the queue may not have been correctly flushed (the first item may
have been left behind), which can cause mis-firing of the plug-in
engine as it picks up outdated queue items and attemps to launch them.
This has also been fixed.

Fixed problem with asynchronous delivery and reception of the Stream_New
plug-in protocol messages, which previously would be incorrectly handled -
Browse assumed that, as with plug-in launch, only one fetch would be running
at a time (or the message passing between plug-in and fetch window would
occur synchronously). This is not the case, and a variety of problems could
be seen if the system broke down. The most obvious symptom is in Scrap,
where Browse used to leave behind "BTFxxxxx" files on quit.

Intermittent "Invalid object ID" errors cured; the Find dialogue box
handler wasn't clearing its remembered ID, and since Find is a shared
object, that object could get deleted without the Find code
realising.

Corrected mis-spelling of "Parameters" n comment block at top of
about_copy_info_file(), which fouled up the documentation auto-generation.

BuildSHelp will recognise functions indented by 2 spaces, assume they're
indented because of a wrapping #ifdef, and put 'Conditionally compiled.'
under the name of any such functions. It no longer outputs broken manuals
if no functions are found in a source file. More robust to odd input due
to extra EOF checking.

New utility BuildHTML, to generate HTML pages in the same manner as
BuildSHelp, created from BuildSHelp. This was done to support Ferrotec
who'd like StrongHelp-like documentation but don't want to be tied to
Acorn machines (and haven't got any at the time of writing anyway!).
HTML was agreed as a good, easy format to go for.

Have begun to implement JavaScript support. Updated !Boot and !Run[D]
files to define File$Type_F81 and Alias$@@RunType_F81 (0xf81 is a
JavaScript script file, 'JSScript', MIME type application/x-javascript,
common filename extension '.js'.). !Sprites[22] files have the relevant
file icons added. Messages files extended with various tokens for
miscellaneous error messages, error box buttons etc. Created a Browse
About: page section based on the JavaScript filetype - we at last
credit the use of the JPEG group software, LibPNG, etc.
@
text
@d248 2
@


1.10
log
@All !Run[D], Choices, Messages, Controls and Res files are up to date.

RefoKeep and RefoHold options added to, respectively, try and maintain
the line at the top of the visible area when reformatting, and not shrink
the vertical extent at the start of a reformat to try and avoid flicker
to the top of the page and back down again when RefoKeep is on. Choices
front-end implemented, which also allows RefoWait and RefoTime to be set.
Unfortunately for various reasons this doesn't help the page jumping when
unsized images come in (but RefoHold can improve matters...) - roll on
the image history.

DragToScroll and NoScrollBars options added for frames; included new
pointer type, Mouse_Shape_DTS, so relevant Controls file entries done
and Sprites[22] files updated as required. Noticed some builds have
a low-res ptr_link with a mask - mask removed.

Named anchor following fixed up somewhat - anchors near the bottom of
the page shouldn't be displayed, and then pulled down when the fetcher
releases null polls and ensures the y extent is correct (this through
implementing the min_height field in the browser_data structure).

RefoHang was never implemented and there seems little point to it now,
so the entry for it has been removed from the global choices structure
and all Choices files.

Markers menus should work properly now (in last check-in they would not
update correctly if Adjust was used on the entries).

URI handler usage now a lot more sensible, with configuration of how the
browser uses the module from both a Utils menu submenu (sic) and the
Choices dialogue.

Slightly dodgy 'hang around waiting for user input' stuff for the Cookies
dialogue box: All fetches are suspended; the fetcher remembers some info
about its state at the time the cookie came in, and restores it later; it
will only do this for one fetch at a time. It's necessary to single-thread
the fetcher at this point anyway, since other fetches may have a
dependency on the cookie that is hanging in mid-air at that point. As part
of this, some of the fetcher code has been split out into separate
functions (to try and 'black box' the code a bit). Anyway, Cookie Query
dialogue box now implemented with appropriate Choices file entry and
UI work in the Choices dialogue box.

Phoenix build Choices rearranged. Can now choose when the image history
is saved from the front end. Added also MSIE 4-style table option menu
for JPEG support (OS only, OS if it can handle it, internal only).

Should be a bit faster at loading the history - though 95% of the time
is spent in SWI URL_ParseURL. URL descriptions are stored more
efficiently as part of this - one malloc block instead of several
small blocks. The minimum block size for malloc blocks typically leads
to a significantly smaller startup wimpslot depending on the visit
history size.

Nasty bug in image system fixed. If an image size came in and a reformat
was to take place, the line the image lies in is found and the reformat
progresses from there. Unforunately, this didn't check to see if the
token can't be found in the line list, so it'd reformat from the top
of the page...! This would happen if, for example, an image halfway down
the page came in whilst a reformat for an image higher up had just begun.

In Choices.c, made choices_set_timetype_field, choices_set_uri_field,
choices_set_plugin_field, choices_set_cookie_field, and
choices_set_jpeg_field static (so they're not declared in Choices.h now).

Two memory leaks plugged in URL comparison routines in URLutils.c
(calling free() url_description instead of urlutils_free_descripton()).

Client pull reload handler was setting the reload flag if reloading
the same page, but forgetting to turn on reload_lock so
fetchpage_postprocessed was clearing the reload state... Similarly,
Ctrl+Shift+SELECT-Click on a link when the Controls file 'UseSmall'
entry is 'no' would not have reloaded as it should. Both fixed.

Frames shouldn't be so keen on acquiring horizontal scroll bars and never
letting them go when their width is decreased now. Frames set up for
'scrolling="yes"' will not start with no scroll bars and then gain them
shortly afterwards, causing flicker and two reformats - they'll start
with, and continue to hold, both scroll bars.

Pointer shouldn't flicker when over a frame border whilst other fetches
are progressing now.
@
text
@d16 2
d31 1
d55 1
a55 1
Report the generator by a number in brackets after the error. Built through the make_no_fetch_memory_error function. Typically signal a memory allocation failure during early stages of a fetch. Generator numbers are as follows:
d94 7
d106 1
a106 1
Report the generator by a number in brackets after the error. Built through the make_no_cont_memory function. Typically signal a memory allocation failure during a fetch. Generator numbers are as follows:
d138 1
a138 1
Report the generator by a number in brackets after the error. Built through the make_no_table_memory_error function. Typically signal a memory allocation failure when dealing with tables. Generator numbers are as follows:
d172 1
a172 1
Report the generator by a number in brackets after the error. Built through the make_no_memory_error function. Typically signal a memory allocation failure for some immediate operation. Generator numbers are as follows:
d184 2
a185 2
5    hotlist_new_directory             malloc for the name of the new directory.
     (Hotlist.c)
d242 6
d253 14
a266 1
Report the generator by a number in brackets after the error. Typically signal a browser side (as opposed to image library side) memory allocation failure when dealing with errors. Generator numbers are as follows:
d268 1
a268 1
Number   Generator               Reason
d270 6
a275 4
1        image_new_image         flex_alloc or flex_extend for image_info
         (Images.c)              structure or image data failed.
2        image_process_null      flex_alloc for data in ddata block failed
         (Images.c)              during fetching of an image.
d284 1
a284 1
Report the generator by name. fm_define_typeface_explicit (FontManage.c) is the only generator at present, signalling that its internal call to fm_new_typeface (also in FontManage.c) failed to allocate enough memory for an fm_facelist structure to hold the new typeface.
d290 1
a290 1
Report the generator by name. These are pretty nasty...
d307 1
a307 1
Report the generator by name. fm_define_typeface (FontManage.c) is the only generator at present, signalling that a typeface string passed to it has the wrong syntax (in one way or another).
d313 1
a313 1
Report the generator by name.
@


1.9
log
@Programming warehouse link removed from all hotlists - the page has gone.

Some compile-time hacks in place to use MemLib, a dynamic area based
malloc replacement which shrinks its heap when possible. All builds
have these switched off at the moment. Seemed to work with just Browse,
though there would be problems with message blocks stored in dynamic
areas because of the Wimp's '&3800000' check - however, it failed when
HTMLLib was made to use it, too. Don't know why yet.

ItemInfo.[c/h] source added, with Res file additions for testbed Browse
and Phoenix.

Small fetch windows now work properly regardless of toolbar settings
in the Choices.

Reload now reloads all images too, rather than only reloading them for
as long as the main page was being fetched.

Added a simple 'Find' facility.

Realised that event handlers in eventlib are called in reverse order
of registration, so the miscellaneous event handler is now registered
first rather than last.

Multiuser code added (most only active if SINGLE_USER is undefined). As
part of this, hotlist code now knows about read-only items (done for the
Customer-style 'Resources' file, but works generally anyway).
handle_add_hotlist doesn't try to save the hotlist itself anymore (the
hotlist_add function does all that through hotlist_modified anyway).

Customer build Choices and Controls updated slightly (e.g. ClaimHelp
off, hotlist to save on quit only).

Customer build now uses Phoenix-style buttons. Sprites files which
worked at the time (but will probably be out of date now) and included
most of the original Customer-style sprites are in
'Utils.Icons.Customer'.

Choices, Messages and Res files for all builds now stripped down to only
single user items or single plus multiuser for Customer build and testbed
build. Before, all contained a few multiuser bits in at least the Choices
file if not more.

Grammatical error ("Fetching frames contents" (sic.)) corrected in
default message, Toolbars.c, and all of the Messages files.

Customer build brought back to a servicable level (including
implementation of the Find dialogue box with animation and fixing
up authorisation and 'Stop' state in the tristate). Quite a few
missing #ifndef REMOTE_HOTLIST bits from hotlist code added...

Customer build will not use <Choices$Write> or Boot:Choices for any
file finding now. UseProxy defaults to 'yes', MaxImages to 2. Res
file includes Proxy Address setting (save_save_choices() now writes
the ProxyAddress line).
@
text
@d89 2
@


1.8
log
@...and some updated docs (tag names, error numbers and so-on).
@
text
@d226 4
@


1.7
log
@Fixed some glitches in the modified status bar code (e.g. status inference
wasn't working properly).

Shift+Toggle size always opened to not obscure the icon bar. If CMOS is
set to always show the icon bar, then Shift+Toggle size is meant to
reverse sense and open to absolute full size. It now does this.

!Run[D] files now require URL 0.22, HTTP 0.64, FTP 0.22, Gopher 0.08
and File 0.32.

Minor overhaul of 'Docs.Notes' (with 'Docs.User' similarly updated) to
include a few new bits and pieces.

Timeout values of 0 now mean 'forever'. Plug-in status messages now have
their own timeout setting. New Messages token 'Actv' for extra info when
a status message times out and the status line drops to 'Viewing' or
'Ready' when there is still a Busy state registered by the Plug-in.

Small Fetch windows don't become visible briefly for Plug-in fetches
when the fetch is complete (for SeeFetches:no, where these windows
should be hidden all the time).

WebServe may be controlled through the Browse front-end via.
Wimp_MAppControl reason code 4 (Wimp_MAppControl_Configure). Note the
renaming internally of 'WebServ' or 'WebServe' has been changed to
'Proxy' (with lower case equivalents where relevant); proxy name
and starting details come from the Messages file 'ProxyName' and
'ProxyComm' tokens. More in 'Docs.Notes'.

Res files updated for image history and PRE/TT font aspect ratio
choices. 'Don't expire' labels changed to 'Expire' (oops, didn't
notice the change in the development Browse's Res file when I
updated all of the others until now...).

When printing, Wimp_PlotIcon appears to ignore R4 and R5, plots
'somewhere' on the page, and tries to get the sprite from the global
pool. This latter part normally causes an error to be raised; though
on my machine I just get a corrupted error message. The Desktop font
gets lost at this point too. All have yet to be fixed; as an
interim work around, Wimp_PlotIcon objects are never drawn at all
if the global 'printing' flag is set.
@
text
@d119 2
d142 5
d222 4
@


1.6
log
@Image history - sizes of images are remembered for future reference (if
the sizes aren't specified in the HTML, they can be looked for in the
image history instead to minimise reformatting requirements). Choices
file options ImageHistoryPath, ImageExpiryAge, ImageMaxSize and
SaveImageHistory added to support this (all have a direct analogy to
the global History items of the same name after removing 'Image').

Text area items are now the correct height for the number of rows
specified in the HTML, don't scroll a line too early, and have the
caret placed at the start of the text when moved into from above
or at the end when moved into from below (rather than always at
the end, which was behaviour inherited from single line writables,
where this is desirable). The top of the text area is aligned to
the top of any line of text on the same line, with the text area
dropping below the text, rather than the bottom of the area matching
the text baseline and extending upwards.

Filename extensions for download files are only stripped if an
attempt to convert to a RISC OS filetype through the Mime Mapper module
does not return an error or Data (0xffd) filetype. '.cgi' is a special
case which is always stripped.

Altered heading styles - all are bold, none are italic, H3 is as big
as H2 was, H2 is a little larger, and others scale down to H6 being
the size as normal text (but, as I say, bold).

Sorted out tables and forms. We can just look for tagno=TAG_FORM, and
get rid of the wobbly form_flag; also discarded the redundant
reprocess_table flag in fetch_preprocess_token. Two separate forms
in consecutive table cells (for example) which used to fail - they
were submitted as one single form - will now work correctly.

Fixed nasty bug in FontManage.c where font size 7 would intermittently
fail. The stupid font sizes that it could ask the Font Manager for may
be responsible for the occasional Font Manager crashes that have been
noticed. Array for font sizes was declared as [Limits_FontSizes], but
indices 1 to Limits_FontSizes are actually used - so needed a '+ 1'
in the declaration... :-/

Replaced the case insensitive string comparison functions in Utils.c
with more efficient versions by S.Brodie.

MAXLENGTH specifier in INPUT tags is now supported. If unspecified or
specifically zero, the browser overrides and allows any length.
@
text
@d88 1
a88 1
         Browser.c                   'extradata' block failed.         
@


1.5
log
@Following the last check-in - all build resources brought up to date.

Adjust-click on forwards/backwards buttons did not work in the intermediate
build, and now does.

Adjust-click on form submission buttons where the submit method is POST
will now work correctly, as the new view inherits the extradata block
of the old. Failure of this is signalled through
make_no_fetch_memory_error, code 16 (see updated Errors file in Docs).
Note the name change of extradata in this context; more details below.

The passing of forms POST data and extra headers for sending in an
HTTP request via. the URL module was all done through pointers into
flex blocks, and was therefore very unsafe. All relevant functions now
use pointers to pointers to the data.

To remove confusion on the umpteen uses of the word 'extradata', the field
in browser_data has been renamed to 'post_data'. The 'extradata' parameters
used within FetchPage.c were all disconnected from the extra header info /
form POST data stuff that extradata is usually associated with, and have
thus also been renamed, in this case to 'appnddata' (Append Data).

As well as X-NoProxy, the browser sends the 'proper' HTTP headers
Pragma:no-cache and Cache-Control:no-cache.

A redirection from a POST request was not handled correctly; despite
what HTTP specs say, you're supposed to use GET for the new URL. The
browser was, but when it chopped off the redundant header data in the
request didn't terminate it and left Content-Type in anyway...! Fixed.

Ctrl+Tab implemented - URL completion. Comes from the hotlist URLs,
hotlist titles, history hosts, paths, full URLs and lastly titles.
See code comments for more (history_find_match, hotlist_find_match).

TableSupport option added to Choices; it is read, can be set by the
front-end, but doesn't actually do anything else yet.

Reversed Choices' semantics on 'don't expire by...' for History. Added
'needs_redraw' flag to choices_get_contents so that, for example, if the
table border types change, browsers get redrawn.
@
text
@d211 4
@


1.4
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d87 2
d205 1
a205 1
25   history_record                    Various allocations whilst trying to
@


1.3
log
@Removed 'The Onion' link from some Hotlist files. Time showed that the
site wasn't entirely Family Friendly (TM)... Removed Shift Control (it's
gone offline now), and corrected the Telegraph URL from ...the-telegraph...
to just ...telegraph...

StrongHelp manual generator now tries to work out the number of lines in
the table on the root page more intelligently.

Plug-in support extended to handle Shockwave. Quite a lot of underlying
work for this, including a pseudo cache system for temporary files.

Bug in redraw routines: they plotted background images within table
cells, when nothing should have been drawn. Oops. When background images
in cells are properly supported, this can get sorted out.

Tweaked vertical plot position of HRs (up to 4 OS units too high before due
to rounding).

Various Res file bits and pieces, Ursula build taken up to v1.26 beta
for release on the Browser site. *Note* not all resources are up to date!
This will be done after AW97.
@
text
@d201 8
@


1.2
log
@Various fixes in the code required for Shockwave support (many invalid
assumptions about the OBJECT tag structure). Not finished yet though.

Played around with signal handling 'n' all that to try and get sensible
errors reported for aborts etc. using code by KBracey. Need a ROM patch
for _swix on RISC OS 3.7 upwards (or a local fixed copy of _swix),
otherwise should sort out most of the problems seen (mostly 'no stack
for trap handler' errors and a distinct lack of a register dump).

Plug-In view on redraw / ASAP choices now work as they should (ASAP
was previously broken).

Version numbers in Messages incremented to 1.25 (23 Oct 1997).

For Plug-In support, created new source file RMA.c/h to handle RMA
claims and releases, in an attempt to ensure leakage never happens.
As such, this source is *slightly* more advanced than that in the 1.25
AW '97 build, though functionally identical. Well, that is, at least
you can confirm zero RMA leakage with '-debug LMem' in TRACE builds now!

Intend to do a consistency check on comment syntax in all sources
shortly - I need to rebuild my StrongHelp manuals; can't keep track
of all of these new functions...
@
text
@d197 4
@


1.1
log
@Now handles PARAM tags. Sorted out Plug-In bug that was related to Java
setting a 0 by 0 graphics window before calling Wimp_Poll (fixed in Java).
Implemented queue for Plug-Ins so multiple broadcasts aren't sent for
several Objects in one data chunk.

Added Docs directory with some documentation in it. More things to keep
checking for stylistic consistency, horray ;-)

Corrected !Run[D] for Ursula build to need AcornURI but not TaskModule
(URI handler needed for !Mail to pick up mailto: links).

Added display_height field to browser_data, analogous to display_width,
to cope with % sized objects by width and height (see how HRs are
handled in Redraw.c for an example of how it was always fairly easy
with width, but not height until this addition). Though you do have
to reload to get a new size; reformat isn't enough. Must see to this
some time...

Fixed bug where basic typefaces were claimed *before* the Choices file
had been read. For unusual Choices settings, this could create some
'interesting' problems now and again. This was part of narrower scope
work in the Choices code to allow font changing without leaking font
handles (now done; fm_shutdown only ditches fonts, it keeps internal
structures - must then call  fm_lose_fonts for all browsers to get the
bitfields up to date, then rewrite the typeface definitions and reclaim
basic fonts). Noticed that fm_claim_basic_typefaces would claim multiple
instances of the same font if there were several cases of the same font
mapped to different typeface styles - fixed.

Implemented PlugInControl settings, but not SupportObject (fully).
@
text
@a15 2

14/10/97 (ADH): Ready for CVS.
d115 2
@
