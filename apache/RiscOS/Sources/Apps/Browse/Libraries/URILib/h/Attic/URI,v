head	1.2;
access;
symbols
	ahodgkin_208_i4_2:1.1
	ahodgkin_208_i4:1.1
	ahodgkin_208_i3:1.1
	ahodgkin_208_i2:1.1
	ahodgkin_208_i1:1.1
	ahodgkin_207release:1.1
	ahodgkin_206release:1.1
	ahodgkin_205release:1.1
	ahodgkin_204release:1.1
	ahodgkin_202release:1.1
	ahodgkin_201release:1.1
	ahodgkin_200release:1.1
	ahodgkin_133beta:1.1
	ahodgkin_132beta:1.1
	ahodgkin_131beta:1.1
	ahodgkin_130beta:1.1
	ahodgkin_129:1.1
	ahodgkin_128beta:1.1
	ahodgkin_128alpha:1.1
	ahodgkin_127beta2:1.1
	ahodgkin_127beta:1.1
	ahodgkin_126beta:1.1
	ahodgkin_AW97patch:1.1
	ahodgkin_AW97:1.1;
locks; strict;
comment	@# @;


1.2
date	2005.04.26.09.42.33;	author ahodgkin;	state dead;
branches;
next	1.1;

1.1
date	97.07.18.15.27.43;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Huge pile of changes bringing relatively ancient sources up to date.
Detail:
  This check-in includes Phoenix version 2.11 (26-Apr-2005); only the
  debug and JavaScript builds of Phoenix have been tested and resources
  will definitely be out of date for other versions. The various "!..."
  scripts have been updated to require a minimum of 2MB with no maximum
  limit for building, as CC 5.60 is quite RAM hungry.
Admin:
  Phoenix 2.11 JS builds OK, works reasonably well. Many outstanding
  issues of course, as this is a very outdated browser now.

Version 2.09. Tagged as 'Browse-2_09'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File    : URI.h
 * Purpose : C interface to URI handler
 * Author  : Ben Laughton
 * History : BAL 16/04/97: Started
 *           ADH 13/06/97: Extended and tidied
 */

#ifndef _uri_h
#define _uri_h

#include "kernel.h"
#include <stddef.h>

/* URI handler SWI numbers */

#define URI_SWIChunkBase                  0x4e380

#define URI_Version                       (URI_SWIChunkBase + 0)
#define URI_Dispatch                      (URI_SWIChunkBase + 1)
#define URI_RequestURI                    (URI_SWIChunkBase + 2)
#define URI_InvalidateURI                 (URI_SWIChunkBase + 3)

/* URI handler service call number and reason codes */
#define Service_URI                       0xa7

#define Service_URI_Started               0
#define Service_URI_Dying                 1
#define Service_URI_Check                 2
#define Service_URI_Process               3

/* URI handler WIMP messages */
#define URI_MStarted                      0x4e380
#define URI_MDying                        0x4e381
#define URI_MCheck                        0x4e382
#define URI_MProcess                      0x4e382
#define URI_MReturnResult                 0x4e383
#define URI_MProcessAck                   0x4e384

/* URI file type */
#define URI_FileType                      0xf91

/* Input flags for SWI URI_Dispatch */
#define URI_Dispatch_Inform               0x00000001
#define URI_Dispatch_Check                0x00000002
#define URI_Dispatch_ActiveOnly           0x00000004

/* Return values for SWI URI_Dispatch */
#define URI_Dispatch_RequestAccepted      0

/* Constants for SWI URI_RequestURI */
#define URI_RequestURI_GetSize            NULL

/* Data structures for URI handler messages */

typedef struct URI_block *URI_handle_t;

typedef struct
{
  union
  {
    struct
    {
      unsigned int not_defined:32; /* No flags defined for this yet */
    }
    bits;

    unsigned int data;
  }
  flags;

} URIStartedMessage;

typedef struct
{
  union
  {
    struct
    {
      unsigned int not_defined:32; /* No flags defined for this yet */
    }
    bits;

    unsigned int data;
  }
  flags;

} URIDyingMessage;

typedef struct
{
  union
  {
    struct
    {
      unsigned int check :1;
    }
    bits;

    unsigned int data;
  }
  flags;

  char         *uri;
  URI_handle_t  uri_handle;

} URIProcessMessage,
  URIProcessAckMessage;

typedef struct
{
  union
  {
    struct
    {
      unsigned int not_claimed :1;
    }
    bits;

    unsigned int data;
  }
  flags;

  URI_handle_t uri_handle;

} URIReturnResultMessage;

/* Function prototypes for URI handler SWIs */

/* uri_version
 *
 * Inquire the version number of the URI handler
 *
 * Inputs
 * flags   : flags word
 *
 * Outputs
 * version : version number of the URI handler (major version * 100) + minor version
 *
 * Returns
 * success : NULL
 * failure : pointer to standard error block
 */
extern _kernel_oserror * uri_version (unsigned int flags, int * version);

/* uri_dispatch
 *
 * Dispatch a URI or check whether URI can be handled
 *
 * Inputs
 * in_flags           : flags word
 * uri                : pointer to 0 terminated URI
 * source_task_handle : source task handle
 *
 * Outputs
 * return_code        : return value
 * uri_task_handle    : task handle of URI handler
 * uri_handle         : URI handle
 *
 * Returns
 * success            : NULL
 * failure            : pointer to standard error block
 */
extern _kernel_oserror * uri_dispatch (unsigned int in_flags, char * uri,
                                       int source_task_handle, unsigned int * return_code,
                                       int * uri_task_handle, URI_handle_t * uri_handle);

/* uri_request_uri
 *
 * Get a URI from the URI handler or check the size of buffer needed to store the URI
 *
 * Inputs
 * flags       : flags word
 * uri         : pointer to buffer to store URI or 0 to inquire size
 * buffer_size : size of buffer
 * uri_handle  : URI handle
 *
 * Outputs
 * uri_length  : offset into buffer of 0 terminator or required size of buffer
 *
 * Returns
 * success     : NULL
 * failure     : pointer to standard error block
 */
extern _kernel_oserror * uri_request_uri (unsigned int flags, char * uri, int buffer_size,
                                          URI_handle_t uri_handle, int * uri_length);


/* uri_invalidate_uri
 *
 * Mark a URI as invalid
 *
 * Inputs
 * flags      : flags word
 * uri_handle : URI handle
 *
 * Returns
 * success    : NULL
 * failure    : pointer to standard error block
 */
extern _kernel_oserror * uri_invalidate_uri (unsigned int flags, URI_handle_t uri_handle);

#endif /* From #ifndef _uri_h */
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@@

