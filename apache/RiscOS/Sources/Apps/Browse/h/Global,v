head	1.54;
access;
symbols
	Browse-2_16:1.54
	Browse-2_15:1.54
	Browse-2_14:1.54
	Browse-2_13:1.54
	Browse-2_12:1.54
	Browse-2_11:1.53
	Browse-2_10:1.53
	Browse-2_09:1.53
	ahodgkin_208_i4_2:1.52
	ahodgkin_208_i4:1.50
	ahodgkin_208_i3:1.50
	ahodgkin_208_i2:1.50
	ahodgkin_208_i1:1.49
	ahodgkin_207release:1.47
	ahodgkin_206release:1.43
	ahodgkin_205release:1.42
	ahodgkin_204release:1.42
	ahodgkin_202release:1.41
	ahodgkin_201release:1.40
	ahodgkin_200release:1.40
	ahodgkin_133beta:1.40
	ahodgkin_132beta:1.39
	ahodgkin_131beta:1.39
	ahodgkin_130beta:1.38
	ahodgkin_129:1.38
	ahodgkin_128beta:1.38
	ahodgkin_128alpha:1.37
	ahodgkin_127beta2:1.34
	ahodgkin_127beta:1.34
	ahodgkin_126beta:1.32
	ahodgkin_AW97patch:1.32
	ahodgkin_AW97:1.28;
locks; strict;
comment	@# @;


1.54
date	2006.03.13.22.06.20;	author ahodgkin;	state Exp;
branches;
next	1.53;

1.53
date	2005.04.26.09.42.35;	author ahodgkin;	state Exp;
branches;
next	1.52;

1.52
date	2000.11.14.08.45.08;	author ahodgkin;	state Exp;
branches;
next	1.51;

1.51
date	2000.05.31.15.58.54;	author ahodgkin;	state Exp;
branches;
next	1.50;

1.50
date	2000.02.25.17.08.57;	author ahodgkin;	state Exp;
branches;
next	1.49;

1.49
date	99.09.02.13.10.39;	author ahodgkin;	state Exp;
branches;
next	1.48;

1.48
date	99.03.30.15.52.11;	author ahodgkin;	state Exp;
branches;
next	1.47;

1.47
date	98.10.13.16.34.10;	author ahodgkin;	state Exp;
branches;
next	1.46;

1.46
date	98.09.23.13.18.19;	author ahodgkin;	state Exp;
branches;
next	1.45;

1.45
date	98.09.07.11.47.10;	author ahodgkin;	state Exp;
branches;
next	1.44;

1.44
date	98.07.23.13.26.50;	author sbrodie;	state Exp;
branches;
next	1.43;

1.43
date	98.07.09.10.28.07;	author ahodgkin;	state Exp;
branches;
next	1.42;

1.42
date	98.04.16.08.14.29;	author ahodgkin;	state Exp;
branches;
next	1.41;

1.41
date	98.03.20.12.13.08;	author ahodgkin;	state Exp;
branches;
next	1.40;

1.40
date	98.02.13.17.32.35;	author ahodgkin;	state Exp;
branches;
next	1.39;

1.39
date	98.01.31.10.55.45;	author ahodgkin;	state Exp;
branches;
next	1.38;

1.38
date	97.12.04.11.23.24;	author ahodgkin;	state Exp;
branches;
next	1.37;

1.37
date	97.12.02.16.14.13;	author ahodgkin;	state Exp;
branches;
next	1.36;

1.36
date	97.11.27.17.50.11;	author ahodgkin;	state Exp;
branches;
next	1.35;

1.35
date	97.11.26.17.11.20;	author ahodgkin;	state Exp;
branches;
next	1.34;

1.34
date	97.11.20.16.04.46;	author ahodgkin;	state Exp;
branches;
next	1.33;

1.33
date	97.11.19.10.29.21;	author ahodgkin;	state Exp;
branches;
next	1.32;

1.32
date	97.10.24.16.15.28;	author ahodgkin;	state Exp;
branches;
next	1.31;

1.31
date	97.10.24.14.09.21;	author ahodgkin;	state Exp;
branches;
next	1.30;

1.30
date	97.10.18.16.42.34;	author ahodgkin;	state Exp;
branches;
next	1.29;

1.29
date	97.10.17.14.16.19;	author dbrown;	state Exp;
branches;
next	1.28;

1.28
date	97.10.16.13.23.23;	author ahodgkin;	state Exp;
branches;
next	1.27;

1.27
date	97.10.13.12.58.02;	author dbrown;	state Exp;
branches;
next	1.26;

1.26
date	97.10.13.07.07.06;	author ahodgkin;	state Exp;
branches;
next	1.25;

1.25
date	97.10.09.10.52.08;	author ahodgkin;	state Exp;
branches;
next	1.24;

1.24
date	97.10.08.11.43.01;	author dbrown;	state Exp;
branches;
next	1.23;

1.23
date	97.10.06.15.18.29;	author ahodgkin;	state Exp;
branches;
next	1.22;

1.22
date	97.10.05.17.16.27;	author ahodgkin;	state Exp;
branches;
next	1.21;

1.21
date	97.10.01.17.18.02;	author ahodgkin;	state Exp;
branches;
next	1.20;

1.20
date	97.09.29.11.24.45;	author dbrown;	state Exp;
branches;
next	1.19;

1.19
date	97.09.22.16.31.23;	author ahodgkin;	state Exp;
branches;
next	1.18;

1.18
date	97.09.22.11.51.17;	author ahodgkin;	state Exp;
branches;
next	1.17;

1.17
date	97.09.22.07.43.30;	author ahodgkin;	state Exp;
branches;
next	1.16;

1.16
date	97.09.18.12.37.28;	author kbracey;	state Exp;
branches;
next	1.15;

1.15
date	97.09.18.08.59.07;	author ahodgkin;	state Exp;
branches;
next	1.14;

1.14
date	97.09.14.19.18.21;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	97.09.12.17.19.36;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	97.09.09.14.13.24;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	97.09.02.15.46.12;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	97.08.31.18.38.26;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	97.08.28.16.08.14;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.08.18.10.00.13;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.08.08.16.39.01;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.08.05.08.43.00;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.07.25.12.52.37;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.07.24.16.12.11;	author kbracey;	state Exp;
branches;
next	1.3;

1.3
date	97.07.24.15.36.35;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.07.24.09.15.09;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.29.35;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.54
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Global.h                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Hold all globals and fundamental structures.      */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 18-Oct-1996 (ADH): Created.                       */
/*          10-Apr-2000 (ADH): 64-wide comments adopted.      */
/*          10-Nov-2000 (ADH): Completed switch to DebugLib.  */
/**************************************************************/

#ifndef Browser_Global__
  #define Browser_Global__

  #include <setjmp.h>
  #include <stdio.h>
  #include <kernel.h>
  #include <tboxlibs/wimp.h>
  #include <tboxlibs/window.h>
  #include <tboxlibs/toolbox.h>
  #include <HTMLLib/HTMLLib.h>

  #ifdef TRACE
    #define DEBUGLIB
  #endif
  #include <debuglib/debuglib.h>

  #include "Bitfields.h"
  #include "Limit.h"

  /* JavaScript support */

  #ifdef JAVASCRIPT

    #include <JSLib/JSLibAPI.h>

    /* Structure to hold information on timeouts in JavaScript. */
    /* Bit of an odd place to keep this, I know, but since this */
    /* isn't something in the JS core API, it may as well go    */
    /* here rather than start putting 'struct' everywhere or    */
    /* trying to include yet more headers from this file.       */

    typedef struct JSTimeout
    {
      int32              ref_count;  /* Reference count to shared usage   */
      char             * expr;       /* The JS expression to evaluate     */
      JSObject         * funobj;     /* or function to call, if !expr     */
      jsval            * argv;       /* Function actual arguments         */
      void             * toid;       /* Identifier, used internally only  */
      uint32             public_id;  /* Returned as value of setTimeout() */
      uint16             argc;       /* and argument count                */
      uint16             spare;      /* Alignment padding                 */
      int32              doc_id;     /* Document this is for              */
      int32              interval;   /* Non-zero if repetitive timeout    */
      int64              when;       /* Nominal time to run this timeout  */
      JSVersion          version;    /* Version of JavaScript to execute  */
      JSPrincipals     * principals; /* Principals with which to execute  */
      char             * filename;   /* Filename of setTimeout call       */
      uint32             lineno;     /* Line number of setTimeout call    */
      struct JSTimeout * next;       /* Next timeout in list              */

    } JSTimeout;

  #endif

  /* For comments on what these actually are, see Global.c */

  #ifdef TRACE

    extern unsigned int   tl;
    extern int            malloccount;
    extern int            flexcount;

  #endif

  extern jmp_buf          env;

  extern int              quit;
  extern int              modechanged;
  extern int              printing;
  extern int              drag_in_progress;
  extern int              authorising;

  extern void           * dialler_pollword_address;

  extern int              wimp_version;
  extern int              nested_wimp;
  extern int              task_handle;
  extern int              sprite_block;

  extern int              taskmodule_ds_registered;
  extern int              uri_module_present;

  extern MessagesFD       meb;
  extern MessagesFD     * chb;
  extern MessagesFD     * cob;
  extern char             tokens[Limits_Message];
  extern char             lasttokn[Limits_Token];

  extern char           * task_dir;

  extern int              messages_list[];
  extern IdBlock          idb;
  extern int              event_code_list[];
  extern WimpPollBlock    b;

  extern char             program_name[Limits_TaskName];

  extern int              null_counter;
  extern int              bullets;
  extern unsigned int     animation_frames;

  #ifdef JAVASCRIPT

    extern JSRuntime    * jsr;
    extern int            jsr_refs;

  #endif

  /* Fetch status */

  typedef enum bs_fetch
  {
    BS_IDLE = 0,  /* Nothing happening                               */
    BS_START,     /* A fetch has just started                        */
    BS_STARTED,   /* Some data has been fetched                      */
    BS_IDENTIFY,  /* Identifying a stream                            */
    BS_FETCHING,  /* Stream identified, HTML being fetched           */
    BS_DATAFETCH, /* Stream being spooled to a file                  */
    BS_PROCESS    /* Fetched stream still being processed by fetcher */

  } bs_fetch;

  /* Defined elsewhere... (easy to work out from naming convention) */

  struct reformat_line;
  struct reformat_line_chunk;

  struct object_info;

  struct plugin_stream;

  /* For tables, holds information required to format a specific table cell */

  typedef struct reformat_cell
  {
    struct reformat_line       * ldata;
    int                          nlines;
    struct reformat_line_chunk * cdata;

    int                          x;           /* Offsets for positioning the contents */
    int                          y;

    int                          minwid;      /* Remembered when reformatting to avoid having to format over and over */
    int                          maxwid;      /* Similarly, remembered when reformatting                              */

    int                          width;       /* Size of content of this 'subwindow' (should help more formatting or  */
    int                          height;      /* clipping); width is maxlen of lines, height from last line's y coord */
    int                          cellwidth;
    int                          cellheight;  /* Full size of subwindow                                               */

    table_stream               * table;       /* Main table definition structure                                      */
  }
  reformat_cell;

  /* These two structures represent lines for display in the browser */
  /* window. A series of reformat_line structures exist as an array  */
  /* pointed to in the browser_data structure (see below). These     */
  /* each have a series of line chunks, as reformat_line_chunk       */
  /* structures, which they point to. The chunks themselves are in   */
  /* a separate block of memory.                                     */

  typedef struct reformat_line
  {
    int x;       /* x coord of left of this line, in window coords   */
    int y;       /* y coord of bottom of this line, in window coords */
    int h;       /* Height of this line in OS units                  */
    int b;       /* y offset of the font base line from the bottom   */
    int n;       /* Number of line chunks on this line               */
    int chunks;  /* Starting array offset into chunks for this line  */

  } reformat_line;

  typedef struct reformat_line_chunk
  {
    HStream       * t; /* The token number the line represents             */
    int             o; /* Offset into the token this chunk starts at       */
    int             l; /* The number of bytes from the token in this chunk */
                       /* (0 = all the rest)                               */
    int             w; /* Width of this chunk in font coords               */

  } reformat_line_chunk;

  /* Bistate / tristate button types */

  typedef enum bistate_type
  {
    BiState_None,             /* No bistate button present */
    BiState_Cancel_Back       /* A Cancel / Back bistate   */

  } bistate_type;

  typedef enum tristate_type
  {
    TriState_None,            /* No tristate button present   */
    TriState_Go_GoTo_Stop     /* A go / go to / stop tristate */

  } tristate_type;

  /* Displayed information */

  typedef enum display_type
  {
    Display_Fetched_Page,     /* A blank page or HTML / text file (externally fetched) is shown in the window */
    Display_External_Image,   /* An internally generated HTML file to show an external image is being shown   */
    Display_Scrap_File,       /* A scrap file is to be loaded in one go, no need to use fetcher modules       */
    Display_Previous_Page,    /* Return to the previous page in the history list                              */
    Display_Next_Page,        /* Return to the next page in the history list                                  */
    Display_Recovered_Page,   /* Go to the page in Browse$CurrentPage                                         */
    Display_Reloaded_Page,    /* Reload the current page                                                      */
    Display_Home_Page,        /* Go to the home page                                                          */
    Display_About_Page,       /* Display 'About' page listing Plug-Ins and so-on                              */
    Display_Embedded_URL,     /* Go to a specific URL                                                         */
    Display_Embedded_Error,   /* Display a specific error message                                             */
    Display_JavaScript_Info   /* Display a JavaScript script result (browser's source store is prebuilt)      */

  } display_type;

  /* Reformat request queueing */

  typedef struct reformat_queue
  {
    int                     line;  /* Start reformatting on the next line after this one        */
    int                     image; /* The image number, if it resized and prompted the reformat */
    struct reformat_queue * next;

  } reformat_queue;

  /* One of these is allocated for each browser window, and holds lots of */
  /* essential information connected with that window and the page it     */
  /* contains.                                                            */
  /*                                                                      */
  /* WARNING: FLEX ANCHORS IN THIS STRUCTURE. You may only use a          */
  /* 'restrict' qualifier for a pointer to a browser_data structure if    */
  /* you do not access any flex related fields. These are:                */
  /*                                                                      */
  /*   source                                                             */
  /*   match_list                                                         */
  /*   odata                                                              */
  /*   post_data                                                          */

  typedef struct browser_data
  {
    struct browser_data    * previous;                    /* Points to previous browser_data structure, or NULL for none.            */
    struct browser_data    * next;                        /* Points to next browser_data structure, or NULL for no more.             */
    ObjectId                 self_id;                     /* The object ID of the browser window the structure is associated with.   */
    int                      window_handle;               /* The Wimp window handle of the browser window.                           */

    /* JavaScript support */

    #ifdef JAVASCRIPT

      JSContext            * bcx;                         /* JavaScript execution context for ancestor windows.                      */
      struct browser_data  * bcx_inherited;               /* Parent browser if context was inherited (so don't destroy it on close). */
      JSObject             * bco_global;                  /* Global object for this context.                                         */
                                                          /*                                                                         */
      JSObject             * window_object;               /* Fundamental JavaScript items. A JSObject is in the JS core API.         */
      JSTimeout            * timeouts;                    /* Note that a JSTimeout is not in the core API; it is defined near the    */
      JSTimeout            * saved_timeouts;              /* top of this file.                                                       */
                                                          /*                                                                         */
      JSObject             * anchor_prototype;            /* Class prototype objects, in alphabetical order. Must be HELD            */
      JSObject             * bar_prototype;               /* (GC roots added) in windows_create_browser and DROPped                  */
      JSObject             * document_prototype;          /* (removed as GC roots) in windows_close_browser, or at least in          */
      JSObject             * event_prototype;             /* functions called from there.                                            */
      JSObject             * event_capturer_prototype;    /*                                                                         */
      JSObject             * event_receiver_prototype;    /*                                                                         */
      JSObject             * form_prototype;              /*                                                                         */
      JSObject             * image_prototype;             /*                                                                         */
      JSObject             * input_prototype;             /*                                                                         */
      JSObject             * layer_prototype;             /*                                                                         */
      JSObject             * option_prototype;            /*                                                                         */
      JSObject             * rect_prototype;              /*                                                                         */
      JSObject             * url_prototype;               /*                                                                         */
                                                          /*                                                                         */
      JSObject             * document;                    /* Window sub-objects. These must also follow the HOLD/DROP                */
      JSObject             * history;                     /* protocol mentioned above.                                               */
      JSObject             * location;                    /*                                                                         */
      JSObject             * navigator;                   /*                                                                         */
      JSObject             * components;                  /*                                                                         */
      JSObject             * screen;                      /*                                                                         */
      JSObject             * hardware;                    /*                                                                         */
      JSObject             * crypto;                      /*                                                                         */
      JSObject             * pkcs11;                      /*                                                                         */
                                                          /*                                                                         */
      JSObject             * event_receiver;              /* Ad-hoc GC roots. Again, HOLD and DROP at window create / destroy time.  */
      JSObject             * opener;                      /*                                                                         */

    #endif

    WindowShowObjectBlock    small_size;                  /* Window details when not toggled to full screen size.                    */
    int                      min_height;                  /* The minimum vertical extent of the browser window.                      */
    int                      display_width;               /* Visible area width, used for reformatting etc.                          */
    int                      display_extent;              /* Visible area extent normally=width but may be forced up by reformatter. */
    int                      display_height;              /* Visible area height, used for % specified height items etc.             */
                                                          /*                                                                         */
    unsigned int             scale;                       /* Scale factor for redraws in this window.                                */
    unsigned int             user_to_os_mul;              /* User-point to OS units multiplier.                                      */
    unsigned int             user_to_web_mul;             /* User-point to Web pixel multiplier.                                     */
    unsigned int             user_to_millipoint_mul;      /* User-point to millipoint multiplier.                                    */
    unsigned int             user_to_pdf_mul;             /* User-point to PDF user space multiplier.                                */
    unsigned int             user_to_draw_mul;            /* User-point to Draw units multiplier.                                    */
    unsigned int             user_to_os_mul_half;         /* Half of the user-point to OS units multiplier, for rounding.            */
    unsigned int             user_to_web_mul_half;        /* Half of the user-point to Web pixel multiplier, for rounding.           */
    unsigned int             user_to_millipoint_mul_half; /* Half of the user-point to millipoint multiplier, for rounding.          */
    unsigned int             user_to_pdf_mul_half;        /* Half of the user-point to PDF user space multiplier, for rounding.      */
    unsigned int             user_to_draw_mul_half;       /* Half of the user-point to Draw units multiplier, for rounding.          */
                                                          /*                                                                         */
    bs_fetch                 fetch_status;                /* To keep track of the current fetch status (see bs_fetch definition).    */
    int                      fetch_handle;                /* The html-lib handle of the document being fetched.                      */
    int                      display_handle;              /* The html-lib handle of the displayed document.                          */
                                                          /*                                                                         */
    unsigned int             current_frame;               /* The currently displayed animation frame.                                */
    unsigned int             current_time;                /* The time at which the currently displayed animation frame was shown.    */
    int                      current_fetches;             /* For frames, counts total still active fetches (so animation continues). */
                                                          /*                                                                         */
    FILE                   * save_file;                   /* File handle for data saves.                                             */
    int                      save_type;                   /* Filetype for data saves.                                                */
    int                      save_transferred;            /* Number of bytes done so far for in-memory transfers.                    */
    ObjectId                 save_dbox;                   /* Object ID of the save dialogue being used.                              */
    int                      save_oldstore;               /* Size of the old fetched store before saving trashed it (if applicable). */
    int                      data_size;                   /* Size of main page data being fetched, or 0 if unknown.                  */
    int                      progress_updated;            /* Monotonic time at which the fetch progress counter was last updated.    */
    unsigned int             last_updated;                /* Time when data was first fetched (for download speed calculation).      */
    char                   * last_modified;               /* From Last-modified header, else will say Thu 01 Jan 1970 00:00 +0000    */
                                                          /*                                                                         */
    int                      dialler_last;                /* Time that the dialler online time was last updated.                     */
    int                      meta_refresh_at;             /* For META tags leading to a refresh, the time to start the fetch.        */
    char                   * meta_refresh_url;            /* For META tags leading to a refresh, the URL to fetch.                   */
                                                          /*                                                                         */
    const char             * onload;                      /* The onLoad attribute specified in the BODY start tag.                   */
    const char             * onunload;                    /* The onUnload attribute specified in the BODY start tag.                 */

    /* Frames fields (though some other  */
    /* frame-related bits and pieces are */
    /* scattered around elsewhere).      */

    char                   * window_name;                 /* Name of this frame / browser window.                                    */
    struct browser_data    * ancestor;                    /* The base browser containing the frames (NULL for the base itself).      */
    struct browser_data    * real_parent;                 /* For any frame pane, this points to the pane below.                      */
    struct browser_data    * parent;                      /* If this is a nested frame in one document, this points to parent.       */
                                                          /*                                                                         */
    int                      nchildren;                   /* Number of children if this window / frame has other children frames.    */
    struct browser_data   ** children;                    /* Pointer to array of pointers to the children's browser_data structs.    */
                                                          /*                                                                         */
    HStream                * frameset;                    /* For a parent with children, pointer to token that defines the frameset. */
    HStream                * frame;                       /* For a child, pointer to a token that defines its characteristics.       */
    int                      nesting_level;               /* For an ancestor, this tracks nesting levels as frames are defined.      */
    int                      filling_frame;               /* For a parent, as it fills in children info it updates this counter.     */
    int                    * frame_widths;                /* The width of the frames, in OS units.                                   */
    int                    * frame_heights;               /* The height of the frames, in OS units.                                  */
    struct browser_data    * selected_frame;              /* For ancestors and keyboard control, the currently selected frame.       */
    ObjectId                 may_scroll;                  /* If scrollbars are turned off, ObjectID of the 'may scroll' window.      */
                                                          /*                                                                         */
    int                      nstatus;                     /* Number of entries in status_contents array.                             */
    void                   * status_contents;             /* Information maintained by toolbars_update_status about frame statuses.  */
    char                   * status_help;                 /* If non-NULL, points to a string of help text for the status line.       */

    /* Memory allocation and management */

    void                   * source;                      /* Pointer to the page source. Allocated with Flex.                        */
    HStream                * stream;                      /* Pointer to linked HStream list, malloced and owned by the HTML library. */
                                                          /*                                                                         */
    HStream                * final_token;                 /* Address of the token last dealt with by the reformatter.                */
    HStream                * display_request;             /* Token to display at top of the window as soon as possible.              */
    int                      display_offset;              /* Offset into token data to display.                                      */
    int                      display_vscroll;             /* Last vertical scroll position when a requested token was displayed.     */
                                                          /*                                                                         */
    void                   * fdata;                       /* Pointer to to forms data, malloc-allocated.                             */
    int                      fdata_size;                  /* Size of forms data.                                                     */
    void                   * post_data;                   /* Pointer to flex-allocated extra data for forms.                         */
    int                      nforms;                      /* Counter for forms.                                                      */
                                                          /*                                                                         */
    struct object_info     * odata;                       /* Object data (for OBJECT, EMBED and APPLET). Allocated with Flex.        */
    int                      nobjects;                    /* Saves time on working out size of odata divided by structure size.      */
                                                          /*                                                                         */
    reformat_cell          * cell;                        /* Pointer to malloced reformat_cell holding redraw information.           */
                                                          /*                                                                         */
    void                   * history_current;             /* A priavte word used by the History to record the history position.      */
                                                          /*                                                                         */
    char                   * urlfdata;                    /* URL being fetched.                                                      */
    char                   * urlddata;                    /* URL being displayed.                                                    */
    const char             * urlbdata;                    /* Base URL for the document, if any (done by HTMLLib callback function).  */
    const char             * targetbdata;                 /* Similarly, base target for the document, if any.                        */
                                                          /*                                                                         */
    char                   * match_list;                  /* List of URLs used for Ctrl+Tab URL completion. Allocated with Flex.     */

    /* Special states */

    tristate_type            tristate;                    /* Type of a tristate button, if one is present.                           */
    int                      tristate_state;              /* Current state of the tristate button.                                   */
    bistate_type             bistate;                     /* Type of a bistate button, if one is present.                            */
    int                      bistate_state;               /* Current state of the bistate button.                                    */
    WimpMessage            * pending_data_load;           /* For saving link contents (Shift+Click), if going app-to-app.            */

    /* Plug-In support, for fetching items */

    struct plugin_stream   * pstream;                     /* For fetching data on behalf of a Plug-In in another browser window.     */
    char                   * plugin_status;               /* May hold a status message the Plug-In asked the browser to show.        */

    /* General page display information */

    int                      background_colour;           /* Background colour.                                                      */
    int                      background_image;            /* The image number of the background image (0..nimages - 1, -1 = none).   */
    int                      text_colour;                 /* Body text default colour.                                               */
    int                      link_colour;                 /* Unfollowed link colour.                                                 */
    int                      used_colour;                 /* Followed link colour.                                                   */
    int                      followed_colour;             /* Following link colour.                                                  */
    int                      selected_colour;             /* Selected (highlighted) object colour.                                   */
    int                      antialias_colour;            /* Colour to anti-alias text to, -1=don't anti-alias.                      */
                                                          /*                                                                         */
    int                      refo_time;                   /* Records time that a pending reformat has been waiting.                  */
    int                      refo_line;                   /* The lowest line number pending for a reformat.                          */
    int                      poll_redraw;                 /* Record of y-coord for redraw during table reformat polling, if active.  */
                                                          /*                                                                         */
    int                      left_margin;                 /* Left hand basic page margin, millipoints.                               */
    int                      right_margin;                /* Right hand basic page margin, millipoints.                              */
    int                      quote_margin;                /* Extra page margin for blockquote chunks, millipoints.                   */
    int                      leading;                     /* Line spacing, OS units.                                                 */
    int                      left_indent;                 /* Multiplier on list etc. indents, millipoints.                           */
                                                          /*                                                                         */
    HStream                * highlight;                   /* Token address of highlighted token (e.g. a pressed button), NULL=none.  */
    HStream                * pointer_over;                /* Token address that the pointer is over, for tokens representing links.  */
    int                      map_x;                       /* If pointer_over is an image map, the x coordinate offset (pixels).      */
    int                      map_y;                       /* Similarly, the y coordinate.                                            */
    HStream                * last_token;                  /* Last token for which reformatting was definitely completed.             */
    HStream                * selected;                    /* Token currently selected (for keyboard navigation).                     */
    struct browser_data    * selected_owner;              /* Owner of the currently selected token (for frames control).             */
    char                   * inferred_section;            /* Used during printing.                                                   */
                                                          /*                                                                         */
    display_type             displayed;                   /* Type of information displayed in the window (see above).                */
                                                          /*                                                                         */
    int                      encoding;                    /* Text encoding.                                                          */
    encoding_priority        encoding_priority;           /* The priority of the encoding (eg user selected / meta specified).       */

    /* Font manager related information */

    bitfield_set             handles;                     /* Used font handles (bit set if handle is used).                          */

    /* Other small data items which may */
    /* pack in above the bitfield       */

    unsigned char            last_char;                   /* Used for smart quotes and other text alteration handling.               */
    unsigned char            progress_colour;             /* Wimp foreground colour of the status bar progress indicator.            */

    /* Flags; generally, local config info */

    unsigned                 button_bar      :1;          /* Button bar flag (0 = not present, 1 = present).                         */
    unsigned                 url_bar         :1;          /* URL writable bar flag (0 = not present, 1 = present).                   */
    unsigned                 status_bar      :1;          /* Status bar flag (0 = not present, 1 = present).                         */
    unsigned                 all_in_top      :1;          /* There is only the top toolbar available.                                */
    unsigned                 all_in_bottom   :1;          /* There is only the bottom toolbar available.                             */
    unsigned                 merged_url      :1;          /* If 1, the URL writable and status display are to be merged.             */
                                                          /*                                                                         */
    unsigned                 anim_handler    :1;          /* Set to 1 if the animation null event handler is registered.             */
    unsigned                 anim_drift      :1;          /* Set to 1 if the animation drift nulll event handler is registered.      */
    unsigned                 plugin_active   :1;          /* Set to 1 if a Plug-In is active for this browser.                       */
    unsigned                 fetch_handler   :1;          /* Set to 1 if the fetch_a_page null event handler is registered.          */
    unsigned                 dialler_status  :1;          /* Set to 1 if the dialler status change message handler is registered.    */
    unsigned                 status_handler  :1;          /* Set to 1 if a handler for timeout on the status messages is registered. */
    unsigned                 watching_resize :1;          /* Zero if there is null events are not being claimed to watch the size of */
                                                          /* the window, or 1 if they are.                                           */
                                                          /*                                                                         */
    unsigned                 dragging        :1;          /* 1 if a drag on the page is in progress, else 0.                         */
    unsigned                 save_link       :1;          /* 1: Save next fetch as data even if parsable, else parse it if possible. */
    unsigned                 page_is_text    :1;          /* 1: Page source is plain text, else it is HTML.                          */
    unsigned                 small_fetch     :1;          /* 1: Browser is a 'small' fetch window, else 0.                           */
                                                          /*                                                                         */
    unsigned                 reloading       :1;          /* 1: This fetch is a reload (so don't use a proxy), else 0: it isn't.     */
    unsigned                 reload_lock     :1;          /* 1: fetchpage_postprocessed should *not* clear reload flag, else do.     */
    unsigned                 base_lock       :1;          /* 1: Don't clear urlbdata on new page, just clear this flag; else do.     */
    unsigned                 tools_lock      :1;          /* 1: Do allow vertical scroll bar to be forced off; else don't.           */
    unsigned                 from_history    :1;          /* 1: This fetch is from a forwards/back action; else 0 (normal fetch).    */
    unsigned                 suspend_format  :1;          /* 1: Reformatting suspended due to error, else 0: Reformatting OK.        */
    unsigned                 table_format    :1;          /* 1: Table format underway, else 0.                                       */
    unsigned                 clear_images    :1;          /* 1: Images have not been garbage collected from the last fetch yet.      */
                                                          /*                                                                         */
    unsigned                 underline_links :1;          /* Underline text links (0 = no, 1 = yes).                                 */
    unsigned                 show_foreground :1;          /* Display images (0  = no, 1 = yes).                                      */
    unsigned                 show_background :1;          /* 1: Don't draw background images 0: Draw them if present in document.    */
    unsigned                 use_source_cols :1;          /* 1: Use source document's colours 0: Ignore them (use default colours).  */
                                                          /*                                                                         */
    unsigned                 full_screen     :1;          /* 1: Browser window fills the screen, 0: window has border tools.         */
    unsigned                 full_size       :1;          /* 1: Browser window toggled Full Size, 0: window is smaller.              */
                                                          /*                                                                         */
    unsigned                 frame_selected  :1;          /* 1: Browser window is selected (for frames), else is not selected.       */
    unsigned                 frame_hscroll   :2;          /* 0: No horiz scroll bar; 1: auto horiz bar; 2: bar always present.       */
    unsigned                 frame_vscroll   :2;          /* As frame_hscroll but for vertical scroll bar.                           */
                                                          /*                                                                         */
    unsigned                 in_image_map    :1;          /* 1: Image map selected for keyboard control, else 0: can move freely.    */
    unsigned                 allow_cancel    :1;          /* 1 if the fetch functions may cancel a previous fetch before proceeding. */
                                                          /*                                                                         */
    unsigned                 force_newline   :1;          /* 1: Force new line when next re-entering reformatter.                    */

  } browser_data;

  extern browser_data   * last_browser;
  extern browser_data   * highlight_frame;

  /* Global choices/preferences structure - user-configurable choices */

  typedef struct global_choices
  {
    char              * home_page;                       /* Default home page.                                                 */
                                                         /*                                                                    */
    unsigned int        background_colour;               /* Default background colour.                                         */
    unsigned int        text_colour;                     /* Default text colour.                                               */
    unsigned int        link_colour;                     /* Default link colour.                                               */
    unsigned int        used_colour;                     /* Default used link colour.                                          */
    unsigned int        followed_colour;                 /* Default following link colour.                                     */
    unsigned int        selected_colour;                 /* Default selected (highlighted) link colour.                        */
                                                         /*                                                                    */
    #ifdef JAVASCRIPT                                    /*                                                                    */
                                                         /*                                                                    */
      unsigned int        js_timeout;                    /* If js_watchdog is 1, centiseconds to wait before asking "stop?".   */
                                                         /*                                                                    */
    #endif                                               /*                                                                    */
                                                         /*                                                                    */
    int                 font_size;                       /* Default font size, 16ths of a point.                               */
    int                 tt_aspect;                       /* Aspect ratio for teletype-style (fixed width) text.                */
    int                 encoding;                        /* Default text encoding (in absence of any specification in page)    */
                                                         /*                                                                    */
    int                 left_margin;                     /* Left hand basic page margin, millipoints.                          */
    int                 right_margin;                    /* Right hand basic page margin, millipoints.                         */
    int                 quote_margin;                    /* Extra page margin for blockquote chunks, millipoints.              */
    int                 leading;                         /* Line spacing, OS units.                                            */
    int                 left_indent;                     /* Multiplier on list etc. indents, millipoints.                      */
                                                         /*                                                                    */
    int                 free_ram_limit;                  /* Value in K below which image garbage collection is done.           */
    int                 unused_image_limit;              /* Number of unused images after which garbage collection is done.    */
                                                         /*                                                                    */
    char              * hotlist_path;                    /* Pathname for saving/loading the hotlist.                           */
    int                 auto_open_delay;                 /* Auto open delay time (centiseconds) for hotlist dirs, or 0 not to. */
    int                 auto_scroll_delay;               /* Auto scroll delay time (centiseconds) for hotlist window.          */
    int                 auto_scroll_margin;              /* Auto scroll margin size (OS units) for hotlist (0 = no scrolling). */
                                                         /*                                                                    */
    char              * history_path;                    /* Pathname for saving/loading the global history.                    */
    int                 max_size;                        /* Maximum total size of history, in bytes (0 = unlimited).           */
    int                 expiry_age;                      /* Maximum age of history entries, in seconds (0 = unlimited).        */
                                                         /*                                                                    */
    char              * image_history_path;              /* Pathname for saving/loading the image history.                     */
    int                 image_max_size;                  /* Maximum total size of image history, in bytes (0 = unlimited).     */
    int                 image_expiry_age;                /* Maximum age of image history entries, in seconds (0 = unlimited).  */
                                                         /*                                                                    */
    int                 width;                           /* Default browser window width.                                      */
    int                 height;                          /* Default browser window height.                                     */
    int                 override_x;                      /* Possible X opening coordinate.                                     */
    int                 override_y;                      /* Possible Y opening coordinate.                                     */
                                                         /*                                                                    */
    int                 print_copies;                    /* Number of copies to print.                                         */
    int                 print_start;                     /* 0 - print from start, -1 - print from visible region.              */
    int                 print_end;                       /* 0 - print to end, -1 - print to end of visible, else no. of pages. */
    int                 print_page_break_hx;             /* Heading level to page break at or 0 for never.                     */
    char              * print_header_left;               /* Left hand header descriptor.                                       */
    char              * print_header_mid;                /* Centred header descriptor.                                         */
    char              * print_header_right;              /* Right hand header descriptor.                                      */
    char              * print_footer_left;               /* Left hand header descriptor.                                       */
    char              * print_footer_mid;                /* Centred header descriptor.                                         */
    char              * print_footer_right;              /* Right hand header descriptor.                                      */
    int                 print_headers_from;              /* Page number (1 = first printed) to start headers at, 0 disables.   */
    int                 print_footers_from;              /* Page number (1 = first printed) to start footers at, 0 disables.   */
    int                 print_hf_scale;                  /* Header & footer font size = base size * this value / 100.          */
    char              * print_date_format;               /* Format for header/footer dates, syntax as Sys$DateFormat.          */
                                                         /*                                                                    */
    int                 refo_time;                       /* Time to queue up reformats in centiseconds, if 'refo_wait' is set. */
                                                         /*                                                                    */
    char              * proxy_address;                   /* The base URL of the proxy server to use, including the protocol.   */

    #ifndef SINGLE_USER

      char              * post_in;                       /* Path of !Post-in for multiuser operation.                          */
      char              * post_out;                      /* Path of !Post-out for multiuser operation.                         */

      int                 log_in_timeout;                /* Time in seconds after which server is deemed to be not responding. */

    #endif

    unsigned char       max_images;                      /* Maximum number of images to fetch simultaneously.                  */
                                                         /*                                                                    */
    unsigned            system_font        :1;           /* 1: Use system font for everything, 0: use outline fonts.           */
    unsigned            minimum_font_size  :3;           /* Minimum allowed <font size="..."> value (e.g. '1' for full range). */
                                                         /*                                                                    */
    unsigned            underline_links    :1;           /* 1: Underline link text, 0: don't.                                  */
    unsigned            use_source_cols    :1;           /* 1: Use document specified colours, 0: use defaults.                */
    unsigned            show_foreground    :1;           /* 1: Delay image loading, 0: Load them immediately.                  */
    unsigned            show_background    :1;           /* 1: Display background images, 0: don't.                            */
                                                         /*                                                                    */
    unsigned            print_reform       :1;           /* 1: Reformat page to fit paper, 0: don't.                           */
    unsigned            print_orient       :1;           /* 0: Landscape, 1: portrait.                                         */
    unsigned            print_back         :2;           /* 0: No backgrounds, 1: tables only, 2: all.                         */
    unsigned            print_black        :2;           /* 0: Use page text colour, 1: black if no background, 2: black only. */
    unsigned            print_plain        :1;           /* 0: Keep background images, 1: turn them all off.                   */
    unsigned            print_facing_pages :2;           /* 0: All pages left, 1: double page spread, 2: odd=right, even=left. */
    unsigned            print_hf_bold      :1;           /* 0: Headers and footers not bold, 1: use bold font.                 */
    unsigned            print_hf_italic    :1;           /* 0: Headers and footers not in italics, 1: use italic font.         */
                                                         /*                                                                    */
    unsigned            support_tables     :1;           /* 0: don't support TABLE and related tags; 1: do.                    */
    unsigned            msie4_style_tables :1;           /* 0: sensible table widthing...! 1: MS(R) IE(TM) 4 style tables.     */
    unsigned            table_outer        :2;           /* 0: 2D outer table borders, 1: Auto, 2: always 3D, 3: never plot.   */
    unsigned            table_inner        :2;           /* 0: 2D inner table borders, 1: Auto, 2: always 3D, 3: never plot.   */
                                                         /*                                                                    */
    #ifdef JAVASCRIPT                                    /*                                                                    */
                                                         /*                                                                    */
      unsigned            support_js       :1;           /* 1: JavaScript is enabled; 0: it is disabled.                       */
      unsigned            js_watchdog      :1;           /* 1: Watchdog timer enabled; 0: it is disabled.                      */
      unsigned            js_nav_as_nav    :1;           /* 1: Navigator object acts just like Navgtr., 0: acts less like it.  */
      unsigned            js_error_boxes   :1;           /* 1: JS interpreter reports errors in error boxes, 0: it doesn't.    */
      unsigned            js_window_open   :2;           /* 0: allow; 1: query; 2: suppress; 3: replace.                       */
      unsigned            js_window_close  :2;           /* 0: always; 1: sometimes; 2: query; 3: suppress.                    */
                                                         /*                                                                    */
    #endif                                               /*                                                                    */
                                                         /*                                                                    */
    unsigned            support_pjpeg      :2;           /* JPEG handling. 0: OS only; 1: OS + internal; 2: internal only.     */
    unsigned            support_frames     :1;           /* 0: don't support frames in documents; 1: do.                       */
    unsigned            support_object     :1;           /* 0: don't support OBJECT, EMBED and APPLET; 1: do.                  */
    unsigned            plugin_control     :2;           /* 0: never start them, 1: start on redraw, 2: start ASAP.            */
    unsigned            client_pull        :1;           /* If 1, client pull is enabled, else disabled.                       */
    unsigned            see_fetches        :1;           /* 0: don't see fetches for Plug-Ins, 1: see small fetch window.      */
    unsigned            faith              :2;           /* 0: never, 1: sometimes, 2: always believe server content-type.     */
                                                         /*                                                                    */
    unsigned            collect_after      :1;           /* 0: Image GC on new page start, else GC on HTML fetch finish.       */
                                                         /*                                                                    */
    unsigned            save_hotlist       :2;           /* 0: never save hotlist, 1: save on quit, 2: save for new URLs.      */
    unsigned            add_hotlist        :1;           /* 0: new items added to top, 1: items added to bottom of the list.   */
    unsigned            hotlist_show       :1;           /* 0: show descriptions, 1: show URLs in the hotlist.                 */
                                                         /*                                                                    */
    unsigned            show_urls          :1;           /* 0: show titles in History menu, else always show URLs.             */
    unsigned            save_history       :2;           /* 0: don't save, 1: save on exit, 2: save on global history add.     */
    unsigned            save_image_history :2;           /* 0: don't save, 1: save on exit, 2: save on image history add.      */
                                                         /*                                                                    */
    unsigned            url_bar            :1;           /* Attach a URL bar to a window upon creation (1 = yes, 0 = no).      */
    unsigned            button_bar         :1;           /* Attach a button bar to a window upon creation (1 = yes, 0 = no).   */
    unsigned            status_bar         :1;           /* Attach a status bar to a window upon creation (1 = yes, 0 = no).   */
    unsigned            move_gadgets       :2;           /* 0: don't move, 1: move after resize, 2 = move during resize.       */
                                                         /*                                                                    */
    unsigned            solid_resize       :2;           /* Frame resizes; 0: dashed, 2: solid, 1: check CMOS resize bit.      */
    unsigned            full_screen        :1;           /* 0: don't start up Full Screen, else 1.                             */
    unsigned            h_scroll           :2;           /* 0: no hscroll in Full Screen, 1: auto add/remove, 2: always.       */
    unsigned            v_scroll           :2;           /* 0: no vscroll in Full Screen, 1: auto add/remove, 2: always.       */
    unsigned            no_scroll_bars     :1;           /* 0: never have scroll bars on frames, 1: have them.                 */
    unsigned            drag_to_scroll     :1;           /* As part of the above, 1: drag page to scroll, 0: don't do it.      */
    unsigned            show_may_scroll    :1;           /* As part of the above, 1: show May Scroll indicator, 0: don't.      */
    unsigned            toggle_on_y_only   :1;           /* 1: Toggle Size only extends vertically; 0: cover whole screen.     */
                                                         /*                                                                    */
    unsigned            refo_wait          :1;           /* 1: Reformat requests are queued for 'refo_time' centiseconds.      */
    unsigned            refo_keep          :1;           /* 1: Try to keep line at top of page the same when reformatting.     */
    unsigned            refo_hold          :1;           /* 1: Hold the y extent when reformatting (best used with refo_keep). */
                                                         /*                                                                    */
    unsigned            fixed_pointer      :1;           /* 1: Pointer must not change shape over page, 1: it can change.      */
    unsigned            highlight_links    :1;           /* 1: Objects are highlighted as the pointer moves over them.         */
    unsigned            keyboard_ctrl      :1;           /* 1: Keyboard control of link selection enabled, else disabled.      */
                                                         /*                                                                    */
    unsigned            clone              :1;           /* 0: use default user agent string, 1 = say Netscape compatible.     */
    unsigned            send_referer       :2;           /* 0: never, 1: always, 2: when value would be an http URL            */
    unsigned            use_proxy          :1;           /* 0: don't use a proxy, 1 = use one at URL in Messages file entry.   */
    unsigned            start_proxy        :1;           /* 0: don't start proxy server, 1 = start it if not running already.  */
    unsigned            uri_usage          :3;           /* See Choices_URI_... definitions in ChoiceDefs.h.                   */
    unsigned            cookies            :2;           /* 0: reject all; 1: prompt; 2: accept all (see ChoiceDefs.h).        */
    unsigned            strip_extensions   :1;           /* 1: strip filename extensions for downloaded objects; 0: don't.     */
                                                         /*                                                                    */
    unsigned            ev_http_messages   :1;           /* 1: log HTTP messages; 0: don't.                                    */
    unsigned            ev_serious_errors  :1;           /* 1: log serious errors where possible; 0: don't.                    */
    unsigned            ev_events          :1;           /* 1: log significant events; 0: don't.                               */
                                                         /*                                                                    */
    #ifdef JAVASCRIPT                                    /*                                                                    */
                                                         /*                                                                    */
      unsigned          ev_scripts         :1;           /* 1: log script errors and support window.print(); 0: don't.         */
                                                         /*                                                                    */
    #endif                                               /*                                                                    */
                                                         /*                                                                    */
    unsigned            ev_enable_master   :1;           /* 1: enable master log; 0: disable (but keep any existing text).     */
    unsigned            ev_display_method  :1;           /* 0: show by window title if known; 1: show by URL always.           */
    unsigned            ev_how_to_log      :1;           /* 0: log on a per-window basis; 1: log on a per-page basis.          */

  } global_choices;

  extern global_choices   choices;
  extern global_choices * new_choices;
  extern ObjectId         choices_windowid;

  /* Global choices/preferences structure - non user-configurable controls */

  typedef struct global_controls
  {
    int                 anim_delay;                      /* Minimum number of centiseconds between being called on nulls.      */
                                                         /*                                                                    */
    int                 minimum_convergence;             /* See Messages file non user-configurable options section.           */
                                                         /*                                                                    */
    int                 show_help_for;                   /* For the status line, show help messages for this long (cs).        */
    int                 show_dstat_for;                  /* For the dialler display, show unusual status for this long (cs).   */
    int                 show_links_for;                  /* For the status line, show link contents for this long (cs).        */
    int                 show_misc_for;                   /* For the status line, show misc messages for this long (cs).        */
    int                 quantise;                        /* Quantise online time display to this many seconds.                 */
    int                 progress_update_delay;           /* Centisecond time between updates of the fetch progress counter.    */
                                                         /*                                                                    */
    int                 minimum_frame_height;            /* Minimum frame height, in OS units.                                 */
    int                 minimum_frame_width;             /* Minimum frame width, in OS units.                                  */
                                                         /*                                                                    */
    int                 back_off_at;                     /* Back off image fetches when this much memory, or less, is free.    */
                                                         /*                                                                    */
    char                ptrlnkactvx;                     /* Active point offsets in pixels from top left (exclusive):          */
    char                ptrlnkactvy;                     /* Link.                                                              */
    char                ptrmapactvx;                     /* Map.                                                               */
    char                ptrmapactvy;                     /*                                                                    */
    char                ptrudactvx;                      /* Up/down frame resize.                                              */
    char                ptrudactvy;                      /*                                                                    */
    char                ptrlractvx;                      /* Left/right frame resize.                                           */
    char                ptrlractvy;                      /*                                                                    */
    char                ptrudlractvx;                    /* Up/down/left/right frame resize.                                   */
    char                ptrudlractvy;                    /*                                                                    */
    char                ptrnoractvx;                     /* Can't resize this frame edge/corner.                               */
    char                ptrnoractvy;                     /*                                                                    */
    char                ptrtosactvx;                     /* Hotlist window about to scroll.                                    */
    char                ptrtosactvy;                     /*                                                                    */
    char                ptrscractvx;                     /* Hotlist window scrolling.                                          */
    char                ptrscractvy;                     /*                                                                    */
    char                ptrdtsactvx;                     /* Drag To Scroll (for dragging a page around).                       */
    char                ptrdtsactvy;                     /*                                                                    */
                                                         /*                                                                    */
    unsigned char       colour_progress;                 /* Either Controls_ColourProgress_NotAColour (CtrlDefs.h) to not      */
                                                         /* colour the progress display when spooling data through the fetcher */
                                                         /* to a file, else a wimp colour.                                     */
                                                         /*                                                                    */
    unsigned            anim_drift      :1;              /* 0 - stop animation as soon as idle, 1 = drift over to 1st frame.   */
    unsigned            dbox_anims      :1;              /* If set, appropriate components in dialogues will be animated.      */
                                                         /*                                                                    */
    unsigned            dont_grey       :2;              /* Controls greying of buttons and the history menu pop.              */
    unsigned            swap_bars       :1;              /* Swap top and bottom toolbars around.                               */
    unsigned            back_window     :1;              /* If full screen, be a Back window to stop others going behind.      */
    unsigned            use_small       :1;              /* If 1, small fetch windows will be used for object saves.           */
                                                         /*                                                                    */
    unsigned            claim_help      :1;              /* Claim Interactive Help messages and display text in status bar.    */
                                                         /*                                                                    */
    unsigned            append_status   :1;              /* In the absence of a byte counter append this info to status field. */
    unsigned            use_brackets    :1;              /* If appending, enclose the value in brackets.                       */
                                                         /*                                                                    */
    unsigned            keep_highlight  :1;              /* 1: Frames will keep (re)highlighting as keyboard navigated.        */
                                                         /*                                                                    */
    unsigned            keep_caret      :1;              /* Grab the caret if it is lost (*use with caution!*).                */
    unsigned            clear_first     :1;              /* 1: If popping up URL writable with key, clear first; else append.  */
    unsigned            lock_to_line    :1;              /* Lock left/right arrows to only select items on the same line.      */
    unsigned            ignore_adjust   :1;              /* Ignore adjust (treat as select) if it would open a second window.  */
                                                         /*                                                                    */
    unsigned            append_urls     :1;              /* Append the current page URL before visiting special locations.     */
                                                         /*                                                                    */
    unsigned            stop_proxy      :1;              /* Broadcast an AppControl Stop reason to web proxy when 'Stop' used. */
    unsigned            brick_wall      :1;              /* 1: Following links halts other fetches on page else they continue. */
    unsigned            refo_single     :1;              /* 1: Hold reformatter for up to 300cs or until page fully formatted. */
    unsigned            table_multi     :1;              /* 1: Conversely, attempt to multitask tables reformats.              */

  } global_controls;

  extern global_controls controls;

  /* Global error block to allow functions to hand back filled in */
  /* custom error blocks, when necessary.                         */

  extern _kernel_oserror erb;

  /* For keeping track of where dynamically created menus came from */

  typedef enum menu_source
  {
    Menu_None,       /* No menu opened / none recorded as being opened. */
    Menu_Form,       /* The menu was from a form.                       */
    Menu_LocalHist,  /* Local history menu.                             */
    Menu_GlobalHist, /* Global history menu.                            */
    Menu_Authorise   /* The 'menu' was an authorisation dialogue.       */

  } menu_source;

  extern char        * authorise;

  extern menu_source   menusrc;
  extern void        * menuhdl;

  #ifndef SINGLE_USER

    typedef struct userdef
    {
      char name               [Limits_Multi_Name];

      char history_path       [Limits_Multi_Pathname];
      char hotlist_path       [Limits_Multi_Pathname];
      char image_history_path [Limits_Multi_Pathname];

    } userdef;

    extern userdef user;
    extern int     logged_in;
    extern int     re_login;

  #endif

#endif /* Browser_Global__ */
@


1.53
log
@  Huge pile of changes bringing relatively ancient sources up to date.
Detail:
  This check-in includes Phoenix version 2.11 (26-Apr-2005); only the
  debug and JavaScript builds of Phoenix have been tested and resources
  will definitely be out of date for other versions. The various "!..."
  scripts have been updated to require a minimum of 2MB with no maximum
  limit for building, as CC 5.60 is quite RAM hungry.
Admin:
  Phoenix 2.11 JS builds OK, works reasonably well. Many outstanding
  issues of course, as this is a very outdated browser now.

Version 2.09. Tagged as 'Browse-2_09'
@
text
@d256 12
a267 3
  /* One of these is allocated for each browser window, */
  /* and holds lots of essential information connected  */
  /* with that window and the page it contains.         */
d271 4
a274 4
    struct browser_data    * previous;                 /* Points to previous browser_data structure, or NULL for none.            */
    struct browser_data    * next;                     /* Points to next browser_data structure, or NULL for no more.             */
    ObjectId                 self_id;                  /* The object ID of the browser window the structure is associated with.   */
    int                      window_handle;            /* The Wimp window handle of the browser window.                           */
d280 34
a313 34
      JSContext            * bcx;                      /* JavaScript execution context for ancestor windows.                      */
      struct browser_data  * bcx_inherited;            /* Parent browser if context was inherited (so don't destroy it on close). */
      JSObject             * bco_global;               /* Global object for this context.                                         */
                                                       /*                                                                         */
      JSObject	           * window_object;            /* Fundamental JavaScript items. A JSObject is in the JS core API.         */
      JSTimeout	           * timeouts;                 /* Note that a JSTimeout is not in the core API; it is defined near the    */
      JSTimeout            * saved_timeouts;           /* top of this file.                                                       */
                                                       /*                                                                         */
      JSObject	           * anchor_prototype;         /* Class prototype objects, in alphabetical order. Must be HELD            */
      JSObject	           * bar_prototype;            /* (GC roots added) in windows_create_browser and DROPped                  */
      JSObject             * document_prototype;       /* (removed as GC roots) in windows_close_browser, or at least in          */
      JSObject	           * event_prototype;          /* functions called from there.                                            */
      JSObject	           * event_capturer_prototype; /*                                                                         */
      JSObject	           * event_receiver_prototype; /*                                                                         */
      JSObject	           * form_prototype;           /*                                                                         */
      JSObject	           * image_prototype;          /*                                                                         */
      JSObject	           * input_prototype;          /*                                                                         */
      JSObject	           * layer_prototype;          /*                                                                         */
      JSObject	           * option_prototype;         /*                                                                         */
      JSObject	           * rect_prototype;           /*                                                                         */
      JSObject	           * url_prototype;            /*                                                                         */
                                                       /*                                                                         */
      JSObject	           * document;                 /* Window sub-objects. These must also follow the HOLD/DROP                */
      JSObject	           * history;                  /* protocol mentioned above.                                               */
      JSObject	           * location;                 /*                                                                         */
      JSObject	           * navigator;                /*                                                                         */
      JSObject	           * components;               /*                                                                         */
      JSObject	           * screen;                   /*                                                                         */
      JSObject	           * hardware;                 /*                                                                         */
      JSObject	           * crypto;                   /*                                                                         */
      JSObject             * pkcs11;                   /*                                                                         */
                                                       /*                                                                         */
      JSObject	           * event_receiver;           /* Ad-hoc GC roots. Again, HOLD and DROP at window create / destroy time.  */
      JSObject	           * opener;                   /*                                                                         */
d317 42
a358 30
    WindowShowObjectBlock    small_size;               /* Window details when not toggled to full screen size.                    */
    int                      min_height;               /* The minimum vertical extent of the browser window.                      */
    int                      display_width;            /* Visible area width, used for reformatting etc.                          */
    int                      display_extent;           /* Visible area extent normally=width but may be forced up by reformatter. */
    int                      display_height;           /* Visible area height, used for % specified height items etc.             */
                                                       /*                                                                         */
    bs_fetch                 fetch_status;             /* To keep track of the current fetch status (see bs_fetch definition).    */
    int                      fetch_handle;             /* The html-lib handle of the document being fetched.                      */
    int                      display_handle;           /* The html-lib handle of the displayed document.                          */
                                                       /*                                                                         */
    unsigned int             current_frame;            /* The currently displayed animation frame.                                */
    unsigned int             current_time;             /* The time at which the currently displayed animation frame was shown.    */
    int                      current_fetches;          /* For frames, counts total still active fetches (so animation continues). */
                                                       /*                                                                         */
    FILE                   * save_file;                /* File handle for data saves.                                             */
    int                      save_type;                /* Filetype for data saves.                                                */
    int                      save_transferred;         /* Number of bytes done so far for in-memory transfers.                    */
    ObjectId                 save_dbox;                /* Object ID of the save dialogue being used.                              */
    int                      save_oldstore;            /* Size of the old fetched store before saving trashed it (if applicable). */
    int                      data_size;                /* Size of main page data being fetched, or 0 if unknown.                  */
    int                      progress_updated;         /* Monotonic time at which the fetch progress counter was last updated.    */
    unsigned int             last_updated;             /* Time when data was first fetched (for download speed calculation).      */
    char                   * last_modified;            /* From Last-modified header, else will say Thu 01 Jan 1970 00:00 +0000    */
                                                       /*                                                                         */
    int                      dialler_last;             /* Time that the dialler online time was last updated.                     */
    int                      meta_refresh_at;          /* For META tags leading to a refresh, the time to start the fetch.        */
    char                   * meta_refresh_url;         /* For META tags leading to a refresh, the URL to fetch.                   */
                                                       /*                                                                         */
    const char             * onload;                   /* The onLoad attribute specified in the BODY start tag.                   */
    const char             * onunload;                 /* The onUnload attribute specified in the BODY start tag.                 */
d364 20
a383 20
    char                   * window_name;              /* Name of this frame / browser window.                                    */
    struct browser_data    * ancestor;                 /* The base browser containing the frames (NULL for the base itself).      */
    struct browser_data    * real_parent;              /* For any frame pane, this points to the pane below.                      */
    struct browser_data    * parent;                   /* If this is a nested frame in one document, this points to parent.       */
                                                       /*                                                                         */
    int                      nchildren;                /* Number of children if this window / frame has other children frames.    */
    struct browser_data   ** children;                 /* Pointer to array of pointers to the children's browser_data structs.    */
                                                       /*                                                                         */
    HStream                * frameset;                 /* For a parent with children, pointer to token that defines the frameset. */
    HStream                * frame;                    /* For a child, pointer to a token that defines its characteristics.       */
    int                      nesting_level;            /* For an ancestor, this tracks nesting levels as frames are defined.      */
    int                      filling_frame;            /* For a parent, as it fills in children info it updates this counter.     */
    int                    * frame_widths;             /* The width of the frames, in OS units.                                   */
    int                    * frame_heights;            /* The height of the frames, in OS units.                                  */
    struct browser_data    * selected_frame;           /* For ancestors and keyboard control, the currently selected frame.       */
    ObjectId                 may_scroll;               /* If scrollbars are turned off, ObjectID of the 'may scroll' window.      */
                                                       /*                                                                         */
    int                      nstatus;                  /* Number of entries in status_contents array.                             */
    void                   * status_contents;          /* Information maintained by toolbars_update_status about frame statuses.  */
    char                   * status_help;              /* If non-NULL, points to a string of help text for the status line.       */
d387 26
a412 25
    void                   * source;                   /* Pointer to the page source.                                             */
    HStream                * stream;                   /* Pointer to linked HStream list, malloced and owned by the HTML library. */
                                                       /*                                                                         */
    HStream                * final_token;              /* Address of the token last dealt with by the reformatter.                */
    HStream                * display_request;          /* Token to display at top of the window as soon as possible.              */
    int                      display_offset;           /* Offset into token data to display.                                      */
    int                      display_vscroll;          /* Last vertical scroll position when a requested token was displayed.     */
                                                       /*                                                                         */
    void                   * fdata;                    /* Pointer to pointer to forms data.                                       */
    void                   * post_data;                /* Pointer to pointer to extra data for forms.                             */
    int                      nforms;                   /* Counter for forms.                                                      */
                                                       /*                                                                         */
    struct object_info     * odata;                    /* Object data (for OBJECT, EMBED and APPLET).                             */
    int                      nobjects;                 /* Saves time on working out size of odata divided by structure size.      */
                                                       /*                                                                         */
    reformat_cell          * cell;                     /* Pointer to malloced reformat_cell holding redraw information.           */
                                                       /*                                                                         */
    void                   * history_current;          /* A priavte word used by the History to record the history position.      */
                                                       /*                                                                         */
    char                   * urlfdata;                 /* URL being fetched.                                                      */
    char                   * urlddata;                 /* URL being displayed.                                                    */
    const char             * urlbdata;                 /* Base URL for the document, if any (done by HTMLLib callback function).  */
    const char             * targetbdata;              /* Similarly, base target for the document, if any.                        */
                                                       /*                                                                         */
    char                   * match_list;               /* List of URLs used for Ctrl+Tab URL completion.                          */
d416 5
a420 5
    tristate_type            tristate;                 /* Type of a tristate button, if one is present.                           */
    int                      tristate_state;           /* Current state of the tristate button.                                   */
    bistate_type             bistate;                  /* Type of a bistate button, if one is present.                            */
    int                      bistate_state;            /* Current state of the bistate button.                                    */
    WimpMessage            * pending_data_load;        /* For saving link contents (Shift+Click), if going app-to-app.            */
d424 2
a425 2
    struct plugin_stream   * pstream;                  /* For fetching data on behalf of a Plug-In in another browser window.     */
    char                   * plugin_status;            /* May hold a status message the Plug-In asked the browser to show.        */
d429 32
a460 32
    int                      background_colour;        /* Background colour.                                                      */
    int                      background_image;         /* The image number of the background image (0..nimages - 1, -1 = none).   */
    int                      text_colour;              /* Body text default colour.                                               */
    int                      link_colour;              /* Unfollowed link colour.                                                 */
    int                      used_colour;              /* Followed link colour.                                                   */
    int                      followed_colour;          /* Following link colour.                                                  */
    int                      selected_colour;          /* Selected (highlighted) object colour.                                   */
    int                      antialias_colour;         /* Colour to anti-alias text to, -1=don't anti-alias.                      */
                                                       /*                                                                         */
    int                      refo_time;                /* Records time that a pending reformat has been waiting.                  */
    int                      refo_line;                /* The lowest line number pending for a reformat.                          */
    int                      poll_redraw;              /* Record of y-coord for redraw during table reformat polling, if active.  */
                                                       /*                                                                         */
    int                      left_margin;              /* Left hand basic page margin, millipoints.                               */
    int                      right_margin;             /* Right hand basic page margin, millipoints.                              */
    int                      quote_margin;             /* Extra page margin for blockquote chunks, millipoints.                   */
    int                      leading;                  /* Line spacing, OS units.                                                 */
    int                      left_indent;              /* Multiplier on list etc. indents, millipoints.                           */
                                                       /*                                                                         */
    HStream                * highlight;                /* Token address of highlighted token (e.g. a pressed button), NULL=none.  */
    HStream                * pointer_over;             /* Token address that the pointer is over, for tokens representing links.  */
    int                      map_x;                    /* If pointer_over is an image map, the x coordinate offset (pixels).      */
    int                      map_y;                    /* Similarly, the y coordinate.                                            */
    HStream                * last_token;               /* Last token for which reformatting was definitely completed.             */
    HStream                * selected;                 /* Token currently selected (for keyboard navigation).                     */
    struct browser_data    * selected_owner;           /* Owner of the currently selected token (for frames control).             */
    char                   * inferred_section;         /* Used during printing.                                                   */
                                                       /*                                                                         */
    display_type             displayed;                /* Type of information displayed in the window (see above).                */
                                                       /*                                                                         */
    int                      encoding;                 /* Text encoding.                                                          */
    encoding_priority        encoding_priority;        /* The priority of the encoding (eg user selected / meta specified).       */
d464 1
a464 1
    bitfield_set             handles;                  /* Used font handles (bit set if handle is used).                          */
d469 2
a470 2
    unsigned char            last_char;                /* Used for smart quotes and other text alteration handling.               */
    unsigned char            progress_colour;          /* Wimp foreground colour of the status bar progress indicator.            */
d474 46
a519 46
    unsigned                 button_bar      :1;       /* Button bar flag (0 = not present, 1 = present).                         */
    unsigned                 url_bar         :1;       /* URL writable bar flag (0 = not present, 1 = present).                   */
    unsigned                 status_bar      :1;       /* Status bar flag (0 = not present, 1 = present).                         */
    unsigned                 all_in_top      :1;       /* There is only the top toolbar available.                                */
    unsigned                 all_in_bottom   :1;       /* There is only the bottom toolbar available.                             */
    unsigned                 merged_url      :1;       /* If 1, the URL writable and status display are to be merged.             */
                                                       /*                                                                         */
    unsigned                 anim_handler    :1;       /* Set to 1 if the animation null event handler is registered.             */
    unsigned                 anim_drift      :1;       /* Set to 1 if the animation drift nulll event handler is registered.      */
    unsigned                 plugin_active   :1;       /* Set to 1 if a Plug-In is active for this browser.                       */
    unsigned                 fetch_handler   :1;       /* Set to 1 if the fetch_a_page null event handler is registered.          */
    unsigned                 dialler_status  :1;       /* Set to 1 if the dialler status change message handler is registered.    */
    unsigned                 status_handler  :1;       /* Set to 1 if a handler for timeout on the status messages is registered. */
    unsigned                 watching_resize :1;       /* Zero if there is null events are not being claimed to watch the size of */
                                                       /* the window, or 1 if they are.                                           */
                                                       /*                                                                         */
    unsigned                 dragging        :1;       /* 1 if a drag on the page is in progress, else 0.                         */
    unsigned                 save_link       :1;       /* 1: Save next fetch as data even if parsable, else parse it if possible. */
    unsigned                 page_is_text    :1;       /* 1: Page source is plain text, else it is HTML.                          */
    unsigned                 small_fetch     :1;       /* 1: Browser is a 'small' fetch window, else 0.                           */
                                                       /*                                                                         */
    unsigned                 reloading       :1;       /* 1: This fetch is a reload (so don't use a proxy), else 0: it isn't.     */
    unsigned                 reload_lock     :1;       /* 1: fetchpage_postprocessed should *not* clear reload flag, else do.     */
    unsigned                 base_lock       :1;       /* 1: Don't clear urlbdata on new page, just clear this flag; else do.     */
    unsigned                 tools_lock      :1;       /* 1: Do allow vertical scroll bar to be forced off; else don't.           */
    unsigned                 from_history    :1;       /* 1: This fetch is from a forwards/back action; else 0 (normal fetch).    */
    unsigned                 suspend_format  :1;       /* 1: Reformatting suspended due to error, else 0: Reformatting OK.        */
    unsigned                 table_format    :1;       /* 1: Table format underway, else 0.                                       */
    unsigned                 clear_images    :1;       /* 1: Images have not been garbage collected from the last fetch yet.      */
                                                       /*                                                                         */
    unsigned                 underline_links :1;       /* Underline text links (0 = no, 1 = yes).                                 */
    unsigned                 show_foreground :1;       /* Display images (0  = no, 1 = yes).                                      */
    unsigned                 show_background :1;       /* 1: Don't draw background images 0: Draw them if present in document.    */
    unsigned                 use_source_cols :1;       /* 1: Use source document's colours 0: Ignore them (use default colours).  */
                                                       /*                                                                         */
    unsigned                 full_screen     :1;       /* 1: Browser window fills the screen, 0: window has border tools.         */
    unsigned                 full_size       :1;       /* 1: Browser window toggled Full Size, 0: window is smaller.              */
                                                       /*                                                                         */
    unsigned                 frame_selected  :1;       /* 1: Browser window is selected (for frames), else is not selected.       */
    unsigned                 frame_hscroll   :2;       /* 0: No horiz scroll bar; 1: auto horiz bar; 2: bar always present.       */
    unsigned                 frame_vscroll   :2;       /* As frame_hscroll but for vertical scroll bar.                           */
                                                       /*                                                                         */
    unsigned                 in_image_map    :1;       /* 1: Image map selected for keyboard control, else 0: can move freely.    */
    unsigned                 allow_cancel    :1;       /* 1 if the fetch functions may cancel a previous fetch before proceeding. */
                                                       /*                                                                         */
    unsigned                 force_newline   :1;       /* 1: Force new line when next re-entering reformatter.                    */
@


1.52
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@d418 1
d479 1
d668 7
a674 1
    unsigned            ev_scripts         :1;           /* 1: log script errors and support window.print(); 0: don't.         */
d753 1
@


1.51
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d26 1
d40 5
d46 1
a46 1
  #include "Limits.h"
d275 2
a276 2
      JSObject	         * window_object;            /* Fundamental JavaScript items. A JSObject is in the JS core API.         */
      JSTimeout	         * timeouts;                 /* Note that a JSTimeout is not in the core API; it is defined near the    */
d279 2
a280 2
      JSObject	         * anchor_prototype;         /* Class prototype objects, in alphabetical order. Must be HELD            */
      JSObject	         * bar_prototype;            /* (GC roots added) in windows_create_browser and DROPped                  */
d282 10
a291 10
      JSObject	         * event_prototype;          /* functions called from there.                                            */
      JSObject	         * event_capturer_prototype; /*                                                                         */
      JSObject	         * event_receiver_prototype; /*                                                                         */
      JSObject	         * form_prototype;           /*                                                                         */
      JSObject	         * image_prototype;          /*                                                                         */
      JSObject	         * input_prototype;          /*                                                                         */
      JSObject	         * layer_prototype;          /*                                                                         */
      JSObject	         * option_prototype;         /*                                                                         */
      JSObject	         * rect_prototype;           /*                                                                         */
      JSObject	         * url_prototype;            /*                                                                         */
d293 8
a300 8
      JSObject	         * document;                 /* Window sub-objects. These must also follow the HOLD/DROP                */
      JSObject	         * history;                  /* protocol mentioned above.                                               */
      JSObject	         * location;                 /*                                                                         */
      JSObject	         * navigator;                /*                                                                         */
      JSObject	         * components;               /*                                                                         */
      JSObject	         * screen;                   /*                                                                         */
      JSObject	         * hardware;                 /*                                                                         */
      JSObject	         * crypto;                   /*                                                                         */
d303 2
a304 2
      JSObject	         * event_receiver;           /* Ad-hoc GC roots. Again, HOLD and DROP at window create / destroy time.  */
      JSObject	         * opener;                   /*                                                                         */
@


1.50
log
@Misecllaneous tweaks and fixes. Major addition is full header and footer
support in the printing system - see the Phoenix Choices file for more
information.

Only the Phoenix resources are up to date currently.
@
text
@d15 26
a40 240
/***************************************************/
/* File   : Global.h                               */
/*                                                 */
/* Purpose: Holds all of the browser's globals.    */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 18-Oct-96: Created.                    */
/***************************************************/

#include <stdio.h>

#include "struct.h"     /* From the HTML library */
#include "tablestruc.h" /* From the HTML library */
#include "imagetrans.h" /* Image library API */

#include "setjmp.h"
#include "window.h"

#include "Bitfields.h"
#include "Limits.h"

/* JavaScript support */

#ifdef JAVASCRIPT

  #include "JSLibAPI.h"

  /* Structure to hold information on timeouts in JavaScript. */
  /* Bit of an odd place to keep this, I know, but since this */
  /* isn't something in the JS core API, it may as well go    */
  /* here rather than start putting 'struct' everywhere or    */
  /* trying to include yet more headers from this file.       */

  typedef struct JSTimeout
  {
    int32              ref_count;  /* Reference count to shared usage   */
    char             * expr;       /* The JS expression to evaluate     */
    JSObject         * funobj;     /* or function to call, if !expr     */
    jsval            * argv;       /* Function actual arguments         */
    void             * toid;       /* Identifier, used internally only  */
    uint32             public_id;  /* Returned as value of setTimeout() */
    uint16             argc;       /* and argument count                */
    uint16             spare;      /* Alignment padding                 */
    int32              doc_id;     /* Document this is for              */
    int32              interval;   /* Non-zero if repetitive timeout    */
    int64              when;       /* Nominal time to run this timeout  */
    JSVersion          version;    /* Version of JavaScript to execute  */
    JSPrincipals     * principals; /* Principals with which to execute  */
    char             * filename;   /* Filename of setTimeout call       */
    uint32             lineno;     /* Line number of setTimeout call    */
    struct JSTimeout * next;       /* Next timeout in list              */

  } JSTimeout;

#endif

/* For comments on what these actually are, see Global.c */

#ifdef TRACE

  extern unsigned int   tl;
  extern int            malloccount;
  extern int            flexcount;

#endif

extern jmp_buf          env;

extern int              quit;
extern int              modechanged;
extern int              printing;
extern int              drag_in_progress;
extern int              authorising;

extern void           * dialler_pollword_address;

extern int              wimp_version;
extern int              nested_wimp;
extern int              task_handle;
extern int              sprite_block;

extern int              taskmodule_ds_registered;
extern int              uri_module_present;

extern MessagesFD       meb;
extern MessagesFD     * chb;
extern MessagesFD     * cob;
extern char             tokens[Limits_Message];
extern char             lasttokn[Limits_Token];

extern char           * task_dir;

extern int              messages_list[];
extern IdBlock          idb;
extern int              event_code_list[];
extern WimpPollBlock    b;

extern char             program_name[Limits_TaskName];

extern int              null_counter;
extern int              bullets;
extern unsigned int     animation_frames;

#ifdef JAVASCRIPT

  extern JSRuntime    * jsr;
  extern int            jsr_refs;

#endif

/* Fetch status */

typedef enum bs_fetch
{
  BS_IDLE = 0,  /* Nothing happening                               */
  BS_START,     /* A fetch has just started                        */
  BS_STARTED,   /* Some data has been fetched                      */
  BS_IDENTIFY,  /* Identifying a stream                            */
  BS_FETCHING,  /* Stream identified, HTML being fetched           */
  BS_DATAFETCH, /* Stream being spooled to a file                  */
  BS_PROCESS    /* Fetched stream still being processed by fetcher */

} bs_fetch;

/* Defined elsewhere... (easy to work out from naming convention) */

struct reformat_line;
struct reformat_line_chunk;

struct object_info;

struct plugin_stream;

/* For tables, holds information required to format a specific table cell */

typedef struct reformat_cell
{
  struct reformat_line       * ldata;
  int                          nlines;
  struct reformat_line_chunk * cdata;

  int                          x;           /* Offsets for positioning the contents */
  int                          y;

  int                          minwid;      /* Remembered when reformatting to avoid having to format over and over */
  int                          maxwid;      /* Similarly, remembered when reformatting                              */

  int                          width;       /* Size of content of this 'subwindow' (should help more formatting or  */
  int                          height;      /* clipping); width is maxlen of lines, height from last line's y coord */
  int                          cellwidth;
  int                          cellheight;  /* Full size of subwindow                                               */

  table_stream               * table;       /* Main table definition structure                                      */
}
reformat_cell;

/* These two structures represent lines for display in the browser */
/* window. A series of reformat_line structures exist as an array  */
/* pointed to in the browser_data structure (see below). These     */
/* each have a series of line chunks, as reformat_line_chunk       */
/* structures, which they point to. The chunks themselves are in   */
/* a separate block of memory.                                     */

typedef struct reformat_line
{
  int x;       /* x coord of left of this line, in window coords   */
  int y;       /* y coord of bottom of this line, in window coords */
  int h;       /* Height of this line in OS units                  */
  int b;       /* y offset of the font base line from the bottom   */
  int n;       /* Number of line chunks on this line               */
  int chunks;  /* Starting array offset into chunks for this line  */

} reformat_line;

typedef struct reformat_line_chunk
{
  HStream       * t; /* The token number the line represents             */
  int             o; /* Offset into the token this chunk starts at       */
  int             l; /* The number of bytes from the token in this chunk */
                     /* (0 = all the rest)                               */
  int             w; /* Width of this chunk in font coords               */

} reformat_line_chunk;

/* Bistate / tristate button types */

typedef enum bistate_type
{
  BiState_None,             /* No bistate button present */
  BiState_Cancel_Back       /* A Cancel / Back bistate   */

} bistate_type;

typedef enum tristate_type
{
  TriState_None,            /* No tristate button present   */
  TriState_Go_GoTo_Stop     /* A go / go to / stop tristate */

} tristate_type;

/* Displayed information */

typedef enum display_type
{
  Display_Fetched_Page,     /* A blank page or HTML / text file (externally fetched) is shown in the window */
  Display_External_Image,   /* An internally generated HTML file to show an external image is being shown   */
  Display_Scrap_File,       /* A scrap file is to be loaded in one go, no need to use fetcher modules       */
  Display_Previous_Page,    /* Return to the previous page in the history list                              */
  Display_Next_Page,        /* Return to the next page in the history list                                  */
  Display_Recovered_Page,   /* Go to the page in Browse$CurrentPage                                         */
  Display_Reloaded_Page,    /* Reload the current page                                                      */
  Display_Home_Page,        /* Go to the home page                                                          */
  Display_About_Page,       /* Display 'About' page listing Plug-Ins and so-on                              */
  Display_Embedded_URL,     /* Go to a specific URL                                                         */
  Display_Embedded_Error,   /* Display a specific error message                                             */
  Display_JavaScript_Info   /* Display a JavaScript script result (browser's source store is prebuilt)      */

} display_type;

/* Reformat request queueing */

typedef struct reformat_queue
{
  int                     line;  /* Start reformatting on the next line after this one        */
  int                     image; /* The image number, if it resized and prompted the reformat */
  struct reformat_queue * next;

} reformat_queue;

/* One of these is allocated for each browser window, */
/* and holds lots of essential information connected  */
/* with that window and the page it contains.         */

typedef struct browser_data
{
  struct browser_data    * previous;                 /* Points to previous browser_data structure, or NULL for none.            */
  struct browser_data    * next;                     /* Points to next browser_data structure, or NULL for no more.             */
  ObjectId                 self_id;                  /* The object ID of the browser window the structure is associated with.   */
  int                      window_handle;            /* The Wimp window handle of the browser window.                           */
d46 28
a73 34
    JSContext            * bcx;                      /* JavaScript execution context for ancestor windows.                      */
    struct browser_data  * bcx_inherited;            /* Parent browser if context was inherited (so don't destroy it on close). */
    JSObject             * bco_global;               /* Global object for this context.                                         */
                                                     /*                                                                         */
    JSObject	         * window_object;            /* Fundamental JavaScript items. A JSObject is in the JS core API.         */
    JSTimeout	         * timeouts;                 /* Note that a JSTimeout is not in the core API; it is defined near the    */
    JSTimeout            * saved_timeouts;           /* top of this file.                                                       */
                                                     /*                                                                         */
    JSObject	         * anchor_prototype;         /* Class prototype objects, in alphabetical order. Must be HELD            */
    JSObject	         * bar_prototype;            /* (GC roots added) in windows_create_browser and DROPped                  */
    JSObject             * document_prototype;       /* (removed as GC roots) in windows_close_browser, or at least in          */
    JSObject	         * event_prototype;          /* functions called from there.                                            */
    JSObject	         * event_capturer_prototype; /*                                                                         */
    JSObject	         * event_receiver_prototype; /*                                                                         */
    JSObject	         * form_prototype;           /*                                                                         */
    JSObject	         * image_prototype;          /*                                                                         */
    JSObject	         * input_prototype;          /*                                                                         */
    JSObject	         * layer_prototype;          /*                                                                         */
    JSObject	         * option_prototype;         /*                                                                         */
    JSObject	         * rect_prototype;           /*                                                                         */
    JSObject	         * url_prototype;            /*                                                                         */
                                                     /*                                                                         */
    JSObject	         * document;                 /* Window sub-objects. These must also follow the HOLD/DROP                */
    JSObject	         * history;                  /* protocol mentioned above.                                               */
    JSObject	         * location;                 /*                                                                         */
    JSObject	         * navigator;                /*                                                                         */
    JSObject	         * components;               /*                                                                         */
    JSObject	         * screen;                   /*                                                                         */
    JSObject	         * hardware;                 /*                                                                         */
    JSObject	         * crypto;                   /*                                                                         */
    JSObject             * pkcs11;                   /*                                                                         */
                                                     /*                                                                         */
    JSObject	         * event_receiver;           /* Ad-hoc GC roots. Again, HOLD and DROP at window create / destroy time.  */
    JSObject	         * opener;                   /*                                                                         */
d77 7
a83 262
  WindowShowObjectBlock    small_size;               /* Window details when not toggled to full screen size.                    */
  int                      min_height;               /* The minimum vertical extent of the browser window.                      */
  int                      display_width;            /* Visible area width, used for reformatting etc.                          */
  int                      display_extent;           /* Visible area extent normally=width but may be forced up by reformatter. */
  int                      display_height;           /* Visible area height, used for % specified height items etc.             */
                                                     /*                                                                         */
  bs_fetch                 fetch_status;             /* To keep track of the current fetch status (see bs_fetch definition).    */
  int                      fetch_handle;             /* The html-lib handle of the document being fetched.                      */
  int                      display_handle;           /* The html-lib handle of the displayed document.                          */
                                                     /*                                                                         */
  unsigned int             current_frame;            /* The currently displayed animation frame.                                */
  unsigned int             current_time;             /* The time at which the currently displayed animation frame was shown.    */
  int                      current_fetches;          /* For frames, counts total still active fetches (so animation continues). */
                                                     /*                                                                         */
  FILE                   * save_file;                /* File handle for data saves.                                             */
  int                      save_type;                /* Filetype for data saves.                                                */
  int                      save_transferred;         /* Number of bytes done so far for in-memory transfers.                    */
  ObjectId                 save_dbox;                /* Object ID of the save dialogue being used.                              */
  int                      save_oldstore;            /* Size of the old fetched store before saving trashed it (if applicable). */
  int                      data_size;                /* Size of main page data being fetched, or 0 if unknown.                  */
  int                      progress_updated;         /* Monotonic time at which the fetch progress counter was last updated.    */
  unsigned int             last_updated;             /* Time when data was first fetched (for download speed calculation).      */
  char                   * last_modified;            /* From Last-modified header, else will say Thu 01 Jan 1970 00:00 +0000    */
                                                     /*                                                                         */
  int                      dialler_last;             /* Time that the dialler online time was last updated.                     */
  int                      meta_refresh_at;          /* For META tags leading to a refresh, the time to start the fetch.        */
  char                   * meta_refresh_url;         /* For META tags leading to a refresh, the URL to fetch.                   */
                                                     /*                                                                         */
  const char             * onload;                   /* The onLoad attribute specified in the BODY start tag.                   */
  const char             * onunload;                 /* The onUnload attribute specified in the BODY start tag.                 */

  /* Frames fields (though some other  */
  /* frame-related bits and pieces are */
  /* scattered around elsewhere).      */

  char                   * window_name;              /* Name of this frame / browser window.                                    */
  struct browser_data    * ancestor;                 /* The base browser containing the frames (NULL for the base itself).      */
  struct browser_data    * real_parent;              /* For any frame pane, this points to the pane below.                      */
  struct browser_data    * parent;                   /* If this is a nested frame in one document, this points to parent.       */
                                                     /*                                                                         */
  int                      nchildren;                /* Number of children if this window / frame has other children frames.    */
  struct browser_data   ** children;                 /* Pointer to array of pointers to the children's browser_data structs.    */
                                                     /*                                                                         */
  HStream                * frameset;                 /* For a parent with children, pointer to token that defines the frameset. */
  HStream                * frame;                    /* For a child, pointer to a token that defines its characteristics.       */
  int                      nesting_level;            /* For an ancestor, this tracks nesting levels as frames are defined.      */
  int                      filling_frame;            /* For a parent, as it fills in children info it updates this counter.     */
  int                    * frame_widths;             /* The width of the frames, in OS units.                                   */
  int                    * frame_heights;            /* The height of the frames, in OS units.                                  */
  struct browser_data    * selected_frame;           /* For ancestors and keyboard control, the currently selected frame.       */
  ObjectId                 may_scroll;               /* If scrollbars are turned off, ObjectID of the 'may scroll' window.      */
                                                     /*                                                                         */
  int                      nstatus;                  /* Number of entries in status_contents array.                             */
  void                   * status_contents;          /* Information maintained by toolbars_update_status about frame statuses.  */
  char                   * status_help;              /* If non-NULL, points to a string of help text for the status line.       */

  /* Memory allocation and management */

  void                   * source;                   /* Pointer to the page source.                                             */
  HStream                * stream;                   /* Pointer to linked HStream list, malloced and owned by the HTML library. */
                                                     /*                                                                         */
  HStream                * final_token;              /* Address of the token last dealt with by the reformatter.                */
  HStream                * display_request;          /* Token to display at top of the window as soon as possible.              */
  int                      display_offset;           /* Offset into token data to display.                                      */
  int                      display_vscroll;          /* Last vertical scroll position when a requested token was displayed.     */
                                                     /*                                                                         */
  void                   * fdata;                    /* Pointer to pointer to forms data.                                       */
  void                   * post_data;                /* Pointer to pointer to extra data for forms.                             */
  int                      nforms;                   /* Counter for forms.                                                      */
                                                     /*                                                                         */
  struct object_info     * odata;                    /* Object data (for OBJECT, EMBED and APPLET).                             */
  int                      nobjects;                 /* Saves time on working out size of odata divided by structure size.      */
                                                     /*                                                                         */
  reformat_cell          * cell;                     /* Pointer to malloced reformat_cell holding redraw information.           */
                                                     /*                                                                         */
  void                   * history_current;          /* A priavte word used by the History to record the history position.      */
                                                     /*                                                                         */
  char                   * urlfdata;                 /* URL being fetched.                                                      */
  char                   * urlddata;                 /* URL being displayed.                                                    */
  const char             * urlbdata;                 /* Base URL for the document, if any (done by HTMLLib callback function).  */
  const char             * targetbdata;              /* Similarly, base target for the document, if any.                        */
                                                     /*                                                                         */
  char                   * match_list;               /* List of URLs used for Ctrl+Tab URL completion.                          */

  /* Special states */

  tristate_type            tristate;                 /* Type of a tristate button, if one is present.                           */
  int                      tristate_state;           /* Current state of the tristate button.                                   */
  bistate_type             bistate;                  /* Type of a bistate button, if one is present.                            */
  int                      bistate_state;            /* Current state of the bistate button.                                    */
  WimpMessage            * pending_data_load;        /* For saving link contents (Shift+Click), if going app-to-app.            */

  /* Plug-In support, for fetching items */

  struct plugin_stream   * pstream;                  /* For fetching data on behalf of a Plug-In in another browser window.     */
  char                   * plugin_status;            /* May hold a status message the Plug-In asked the browser to show.        */

  /* General page display information */

  int                      background_colour;        /* Background colour.                                                      */
  int                      background_image;         /* The image number of the background image (0..nimages - 1, -1 = none).   */
  int                      text_colour;              /* Body text default colour.                                               */
  int                      link_colour;              /* Unfollowed link colour.                                                 */
  int                      used_colour;              /* Followed link colour.                                                   */
  int                      followed_colour;          /* Following link colour.                                                  */
  int                      selected_colour;          /* Selected (highlighted) object colour.                                   */
  int                      antialias_colour;         /* Colour to anti-alias text to, -1=don't anti-alias.                      */
                                                     /*                                                                         */
  int                      refo_time;                /* Records time that a pending reformat has been waiting.                  */
  int                      refo_line;                /* The lowest line number pending for a reformat.                          */
                                                     /*                                                                         */
  int                      left_margin;              /* Left hand basic page margin, millipoints.                               */
  int                      right_margin;             /* Right hand basic page margin, millipoints.                              */
  int                      quote_margin;             /* Extra page margin for blockquote chunks, millipoints.                   */
  int                      leading;                  /* Line spacing, OS units.                                                 */
  int                      left_indent;              /* Multiplier on list etc. indents, millipoints.                           */
                                                     /*                                                                         */
  HStream                * highlight;                /* Token address of highlighted token (e.g. a pressed button), NULL=none.  */
  HStream                * pointer_over;             /* Token address that the pointer is over, for tokens representing links.  */
  int                      map_x;                    /* If pointer_over is an image map, the x coordinate offset (pixels).      */
  int                      map_y;                    /* Similarly, the y coordinate.                                            */
  HStream                * last_token;               /* Last token for which reformatting was definitely completed.             */
  HStream                * selected;                 /* Token currently selected (for keyboard navigation).                     */
  struct browser_data    * selected_owner;           /* Owner of the currently selected token (for frames control).             */
  char                   * inferred_section;         /* Used during printing.                                                   */
                                                     /*                                                                         */
  display_type             displayed;                /* Type of information displayed in the window (see above).                */
                                                     /*                                                                         */
  int                      encoding;                 /* Text encoding.                                                          */
  encoding_priority        encoding_priority;        /* The priority of the encoding (eg user selected / meta specified).       */

  /* Font manager related information */

  bitfield_set             handles;                  /* Used font handles (bit set if handle is used).                          */

  /* Other small data items which may */
  /* pack in above the bitfield       */

  unsigned char            last_char;                /* Used for smart quotes and other text alteration handling.               */
  unsigned char            progress_colour;          /* Wimp foreground colour of the status bar progress indicator.            */

  /* Flags; generally, local config info */

  unsigned                 button_bar      :1;       /* Button bar flag (0 = not present, 1 = present).                         */
  unsigned                 url_bar         :1;       /* URL writable bar flag (0 = not present, 1 = present).                   */
  unsigned                 status_bar      :1;       /* Status bar flag (0 = not present, 1 = present).                         */
  unsigned                 all_in_top      :1;       /* There is only the top toolbar available.                                */
  unsigned                 all_in_bottom   :1;       /* There is only the bottom toolbar available.                             */
  unsigned                 merged_url      :1;       /* If 1, the URL writable and status display are to be merged.             */
                                                     /*                                                                         */
  unsigned                 anim_handler    :1;       /* Set to 1 if the animation null event handler is registered.             */
  unsigned                 anim_drift      :1;       /* Set to 1 if the animation drift nulll event handler is registered.      */
  unsigned                 plugin_active   :1;       /* Set to 1 if a Plug-In is active for this browser.                       */
  unsigned                 fetch_handler   :1;       /* Set to 1 if the fetch_a_page null event handler is registered.          */
  unsigned                 dialler_status  :1;       /* Set to 1 if the dialler status change message handler is registered.    */
  unsigned                 status_handler  :1;       /* Set to 1 if a handler for timeout on the status messages is registered. */
  unsigned                 watching_resize :1;       /* Zero if there is null events are not being claimed to watch the size of */
                                                     /* the window, or 1 if they are.                                           */
                                                     /*                                                                         */
  unsigned                 dragging        :1;       /* 1 if a drag on the page is in progress, else 0.                         */
  unsigned                 save_link       :1;       /* 1: Save next fetch as data even if parsable, else parse it if possible. */
  unsigned                 page_is_text    :1;       /* 1: Page source is plain text, else it is HTML.                          */
  unsigned                 small_fetch     :1;       /* 1: Browser is a 'small' fetch window, else 0.                           */
                                                     /*                                                                         */
  unsigned                 reloading       :1;       /* 1: This fetch is a reload (so don't use a proxy), else 0: it isn't.     */
  unsigned                 reload_lock     :1;       /* 1: fetchpage_postprocessed should *not* clear reload flag, else do.     */
  unsigned                 base_lock       :1;       /* 1: Don't clear urlbdata on new page, just clear this flag; else do.     */
  unsigned                 tools_lock      :1;       /* 1: Do allow vertical scroll bar to be forced off; else don't.           */
  unsigned                 from_history    :1;       /* 1: This fetch is from a forwards/back action; else 0 (normal fetch).    */
  unsigned                 suspend_format  :1;       /* 1: Reformatting suspended due to error, else 0: Reformatting OK.        */
  unsigned                 clear_images    :1;       /* 1: Images have not been garbage collected from the last fetch yet.      */
                                                     /*                                                                         */
  unsigned                 underline_links :1;       /* Underline text links (0 = no, 1 = yes).                                 */
  unsigned                 show_foreground :1;       /* Display images (0  = no, 1 = yes).                                      */
  unsigned                 show_background :1;       /* 1: Don't draw background images 0: Draw them if present in document.    */
  unsigned                 use_source_cols :1;       /* 1: Use source document's colours 0: Ignore them (use default colours).  */
                                                     /*                                                                         */
  unsigned                 full_screen     :1;       /* 1: Browser window fills the screen, 0: window has border tools.         */
  unsigned                 full_size       :1;       /* 1: Browser window toggled Full Size, 0: window is smaller.              */
                                                     /*                                                                         */
  unsigned                 frame_selected  :1;       /* 1: Browser window is selected (for frames), else is not selected.       */
  unsigned                 frame_hscroll   :2;       /* 0: No horiz scroll bar; 1: auto horiz bar; 2: bar always present.       */
  unsigned                 frame_vscroll   :2;       /* As frame_hscroll but for vertical scroll bar.                           */
                                                     /*                                                                         */
  unsigned                 in_image_map    :1;       /* 1: Image map selected for keyboard control, else 0: can move freely.    */
  unsigned                 allow_cancel    :1;       /* 1 if the fetch functions may cancel a previous fetch before proceeding. */
                                                     /*                                                                         */
  unsigned                 force_newline   :1;       /* 1: Force new line when next re-entering reformatter.                    */

} browser_data;

extern browser_data   * last_browser;
extern browser_data   * highlight_frame;

/* Global choices/preferences structure - user-configurable choices */

typedef struct global_choices
{
  char              * home_page;                       /* Default home page.                                                 */
                                                       /*                                                                    */
  unsigned int        background_colour;               /* Default background colour.                                         */
  unsigned int        text_colour;                     /* Default text colour.                                               */
  unsigned int        link_colour;                     /* Default link colour.                                               */
  unsigned int        used_colour;                     /* Default used link colour.                                          */
  unsigned int        followed_colour;                 /* Default following link colour.                                     */
  unsigned int        selected_colour;                 /* Default selected (highlighted) link colour.                        */
                                                       /*                                                                    */
  #ifdef JAVASCRIPT                                    /*                                                                    */
                                                       /*                                                                    */
    unsigned int        js_timeout;                    /* If js_watchdog is 1, centiseconds to wait before asking "stop?".   */
                                                       /*                                                                    */
  #endif                                               /*                                                                    */
                                                       /*                                                                    */
  int                 font_size;                       /* Default font size, 16ths of a point.                               */
  int                 tt_aspect;                       /* Aspect ratio for teletype-style (fixed width) text.                */
  int                 encoding;                        /* Default text encoding (in absence of any specification in page)    */
                                                       /*                                                                    */
  int                 left_margin;                     /* Left hand basic page margin, millipoints.                          */
  int                 right_margin;                    /* Right hand basic page margin, millipoints.                         */
  int                 quote_margin;                    /* Extra page margin for blockquote chunks, millipoints.              */
  int                 leading;                         /* Line spacing, OS units.                                            */
  int                 left_indent;                     /* Multiplier on list etc. indents, millipoints.                      */
                                                       /*                                                                    */
  int                 free_ram_limit;                  /* Value in K below which image garbage collection is done.           */
  int                 unused_image_limit;              /* Number of unused images after which garbage collection is done.    */
                                                       /*                                                                    */
  char              * hotlist_path;                    /* Pathname for saving/loading the hotlist.                           */
  int                 auto_open_delay;                 /* Auto open delay time (centiseconds) for hotlist dirs, or 0 not to. */
  int                 auto_scroll_delay;               /* Auto scroll delay time (centiseconds) for hotlist window.          */
  int                 auto_scroll_margin;              /* Auto scroll margin size (OS units) for hotlist (0 = no scrolling). */
                                                       /*                                                                    */
  char              * history_path;                    /* Pathname for saving/loading the global history.                    */
  int                 max_size;                        /* Maximum total size of history, in bytes (0 = unlimited).           */
  int                 expiry_age;                      /* Maximum age of history entries, in seconds (0 = unlimited).        */
                                                       /*                                                                    */
  char              * image_history_path;              /* Pathname for saving/loading the image history.                     */
  int                 image_max_size;                  /* Maximum total size of image history, in bytes (0 = unlimited).     */
  int                 image_expiry_age;                /* Maximum age of image history entries, in seconds (0 = unlimited).  */
                                                       /*                                                                    */
  int                 width;                           /* Default browser window width.                                      */
  int                 height;                          /* Default browser window height.                                     */
  int                 override_x;                      /* Possible X opening coordinate.                                     */
  int                 override_y;                      /* Possible Y opening coordinate.                                     */
                                                       /*                                                                    */
  int                 print_copies;                    /* Number of copies to print.                                         */
  int                 print_start;                     /* 0 - print from start, -1 - print from visible region.              */
  int                 print_end;                       /* 0 - print to end, -1 - print to end of visible, else no. of pages. */
  int                 print_page_break_hx;             /* Heading level to page break at or 0 for never.                     */
  char              * print_header_left;               /* Left hand header descriptor.                                       */
  char              * print_header_mid;                /* Centred header descriptor.                                         */
  char              * print_header_right;              /* Right hand header descriptor.                                      */
  char              * print_footer_left;               /* Left hand header descriptor.                                       */
  char              * print_footer_mid;                /* Centred header descriptor.                                         */
  char              * print_footer_right;              /* Right hand header descriptor.                                      */
  int                 print_headers_from;              /* Page number (1 = first printed) to start headers at, 0 disables.   */
  int                 print_footers_from;              /* Page number (1 = first printed) to start footers at, 0 disables.   */
  int                 print_hf_scale;                  /* Header & footer font size = base size * this value / 100.          */
  char              * print_date_format;               /* Format for header/footer dates, syntax as Sys$DateFormat.          */
                                                       /*                                                                    */
  int                 refo_time;                       /* Time to queue up reformats in centiseconds, if 'refo_wait' is set. */
                                                       /*                                                                    */
  char              * proxy_address;                   /* The base URL of the proxy server to use, including the protocol.   */
d85 3
a87 1
  #ifndef SINGLE_USER
d89 34
a122 2
    char              * post_in;                       /* Path of !Post-in for multiuser operation.                          */
    char              * post_out;                      /* Path of !Post-out for multiuser operation.                         */
d124 4
a127 1
    int                 log_in_timeout;                /* Time in seconds after which server is deemed to be not responding. */
d131 652
a782 207
  unsigned char       max_images;                      /* Maximum number of images to fetch simultaneously.                  */
                                                       /*                                                                    */
  unsigned            system_font        :1;           /* 1: Use system font for everything, 0: use outline fonts.           */
  unsigned            minimum_font_size  :3;           /* Minimum allowed <font size="..."> value (e.g. '1' for full range). */
                                                       /*                                                                    */
  unsigned            underline_links    :1;           /* 1: Underline link text, 0: don't.                                  */
  unsigned            use_source_cols    :1;           /* 1: Use document specified colours, 0: use defaults.                */
  unsigned            show_foreground    :1;           /* 1: Delay image loading, 0: Load them immediately.                  */
  unsigned            show_background    :1;           /* 1: Display background images, 0: don't.                            */
                                                       /*                                                                    */
  unsigned            print_reform       :1;           /* 1: Reformat page to fit paper, 0: don't.                           */
  unsigned            print_orient       :1;           /* 0: Landscape, 1: portrait.                                         */
  unsigned            print_back         :2;           /* 0: No backgrounds, 1: tables only, 2: all.                         */
  unsigned            print_black        :2;           /* 0: Use page text colour, 1: black if no background, 2: black only. */
  unsigned            print_plain        :1;           /* 0: Keep background images, 1: turn them all off.                   */
  unsigned            print_facing_pages :2;           /* 0: All pages left, 1: double page spread, 2: odd=right, even=left. */
  unsigned            print_hf_bold      :1;           /* 0: Headers and footers not bold, 1: use bold font.                 */
  unsigned            print_hf_italic    :1;           /* 0: Headers and footers not in italics, 1: use italic font.         */
                                                       /*                                                                    */
  unsigned            support_tables     :1;           /* 0: don't support TABLE and related tags; 1: do.                    */
  unsigned            msie4_style_tables :1;           /* 0: sensible table widthing...! 1: MS(R) IE(TM) 4 style tables.     */
  unsigned            table_outer        :2;           /* 0: 2D outer table borders, 1: Auto, 2: always 3D, 3: never plot.   */
  unsigned            table_inner        :2;           /* 0: 2D inner table borders, 1: Auto, 2: always 3D, 3: never plot.   */
                                                       /*                                                                    */
  #ifdef JAVASCRIPT                                    /*                                                                    */
                                                       /*                                                                    */
    unsigned            support_js       :1;           /* 1: JavaScript is enabled; 0: it is disabled.                       */
    unsigned            js_watchdog      :1;           /* 1: Watchdog timer enabled; 0: it is disabled.                      */
    unsigned            js_nav_as_nav    :1;           /* 1: Navigator object acts just like Navgtr., 0: acts less like it.  */
    unsigned            js_error_boxes   :1;           /* 1: JS interpreter reports errors in error boxes, 0: it doesn't.    */
    unsigned            js_window_open   :2;           /* 0: allow; 1: query; 2: suppress; 3: replace.                       */
    unsigned            js_window_close  :2;           /* 0: always; 1: sometimes; 2: query; 3: suppress.                    */
                                                       /*                                                                    */
  #endif                                               /*                                                                    */
                                                       /*                                                                    */
  unsigned            support_pjpeg      :2;           /* JPEG handling. 0: OS only; 1: OS + internal; 2: internal only.     */
  unsigned            support_frames     :1;           /* 0: don't support frames in documents; 1: do.                       */
  unsigned            support_object     :1;           /* 0: don't support OBJECT, EMBED and APPLET; 1: do.                  */
  unsigned            plugin_control     :2;           /* 0: never start them, 1: start on redraw, 2: start ASAP.            */
  unsigned            client_pull        :1;           /* If 1, client pull is enabled, else disabled.                       */
  unsigned            see_fetches        :1;           /* 0: don't see fetches for Plug-Ins, 1: see small fetch window.      */
  unsigned            faith              :2;           /* 0: never, 1: sometimes, 2: always believe server content-type.     */
                                                       /*                                                                    */
  unsigned            collect_after      :1;           /* 0: Image GC on new page start, else GC on HTML fetch finish.       */
                                                       /*                                                                    */
  unsigned            save_hotlist       :2;           /* 0: never save hotlist, 1: save on quit, 2: save for new URLs.      */
  unsigned            add_hotlist        :1;           /* 0: new items added to top, 1: items added to bottom of the list.   */
  unsigned            hotlist_show       :1;           /* 0: show descriptions, 1: show URLs in the hotlist.                 */
                                                       /*                                                                    */
  unsigned            show_urls          :1;           /* 0: show titles in History menu, else always show URLs.             */
  unsigned            save_history       :2;           /* 0: don't save, 1: save on exit, 2: save on global history add.     */
  unsigned            save_image_history :2;           /* 0: don't save, 1: save on exit, 2: save on image history add.      */
                                                       /*                                                                    */
  unsigned            url_bar            :1;           /* Attach a URL bar to a window upon creation (1 = yes, 0 = no).      */
  unsigned            button_bar         :1;           /* Attach a button bar to a window upon creation (1 = yes, 0 = no).   */
  unsigned            status_bar         :1;           /* Attach a status bar to a window upon creation (1 = yes, 0 = no).   */
  unsigned            move_gadgets       :2;           /* 0: don't move, 1: move after resize, 2 = move during resize.       */
                                                       /*                                                                    */
  unsigned            solid_resize       :2;           /* Frame resizes; 0: dashed, 2: solid, 1: check CMOS resize bit.      */
  unsigned            full_screen        :1;           /* 0: don't start up Full Screen, else 1.                             */
  unsigned            h_scroll           :2;           /* 0: no hscroll in Full Screen, 1: auto add/remove, 2: always.       */
  unsigned            v_scroll           :2;           /* 0: no vscroll in Full Screen, 1: auto add/remove, 2: always.       */
  unsigned            no_scroll_bars     :1;           /* 0: never have scroll bars on frames, 1: have them.                 */
  unsigned            drag_to_scroll     :1;           /* As part of the above, 1: drag page to scroll, 0: don't do it.      */
  unsigned            show_may_scroll    :1;           /* As part of the above, 1: show May Scroll indicator, 0: don't.      */
  unsigned            toggle_on_y_only   :1;           /* 1: Toggle Size only extends vertically; 0: cover whole screen.     */
                                                       /*                                                                    */
  unsigned            refo_wait          :1;           /* 1: Reformat requests are queued for 'refo_time' centiseconds.      */
  unsigned            refo_keep          :1;           /* 1: Try to keep line at top of page the same when reformatting.     */
  unsigned            refo_hold          :1;           /* 1: Hold the y extent when reformatting (best used with refo_keep). */
                                                       /*                                                                    */
  unsigned            fixed_pointer      :1;           /* 1: Pointer must not change shape over page, 1: it can change.      */
  unsigned            highlight_links    :1;           /* 1: Objects are highlighted as the pointer moves over them.         */
  unsigned            keyboard_ctrl      :1;           /* 1: Keyboard control of link selection enabled, else disabled.      */
                                                       /*                                                                    */
  unsigned            clone              :1;           /* 0: use default user agent string, 1 = say Netscape compatible.     */
  unsigned            send_referer       :2;           /* 0: never, 1: always, 2: when value would be an http URL            */
  unsigned            use_proxy          :1;           /* 0: don't use a proxy, 1 = use one at URL in Messages file entry.   */
  unsigned            start_proxy        :1;           /* 0: don't start proxy server, 1 = start it if not running already.  */
  unsigned            uri_usage          :3;           /* See Choices_URI_... definitions in ChoiceDefs.h.                   */
  unsigned            cookies            :2;           /* 0: reject all; 1: prompt; 2: accept all (see ChoiceDefs.h).        */
  unsigned            strip_extensions   :1;           /* 1: strip filename extensions for downloaded objects; 0: don't.     */
                                                       /*                                                                    */
  unsigned            ev_http_messages   :1;           /* 1: log HTTP messages; 0: don't.                                    */
  unsigned            ev_serious_errors  :1;           /* 1: log serious errors where possible; 0: don't.                    */
  unsigned            ev_events          :1;           /* 1: log significant events; 0: don't.                               */
  unsigned            ev_scripts         :1;           /* 1: log script errors and support window.print(); 0: don't.         */
  unsigned            ev_enable_master   :1;           /* 1: enable master log; 0: disable (but keep any existing text).     */
  unsigned            ev_display_method  :1;           /* 0: show by window title if known; 1: show by URL always.           */
  unsigned            ev_how_to_log      :1;           /* 0: log on a per-window basis; 1: log on a per-page basis.          */

} global_choices;

extern global_choices   choices;
extern global_choices * new_choices;
extern ObjectId         choices_windowid;

/* Global choices/preferences structure - non user-configurable controls */

typedef struct global_controls
{
  int                 anim_delay;                      /* Minimum number of centiseconds between being called on nulls.      */
                                                       /*                                                                    */
  int                 minimum_convergence;             /* See Messages file non user-configurable options section.           */
                                                       /*                                                                    */
  int                 show_help_for;                   /* For the status line, show help messages for this long (cs).        */
  int                 show_dstat_for;                  /* For the dialler display, show unusual status for this long (cs).   */
  int                 show_links_for;                  /* For the status line, show link contents for this long (cs).        */
  int                 show_misc_for;                   /* For the status line, show misc messages for this long (cs).        */
  int                 quantise;                        /* Quantise online time display to this many seconds.                 */
  int                 progress_update_delay;           /* Centisecond time between updates of the fetch progress counter.    */
                                                       /*                                                                    */
  int                 minimum_frame_height;            /* Minimum frame height, in OS units.                                 */
  int                 minimum_frame_width;             /* Minimum frame width, in OS units.                                  */
                                                       /*                                                                    */
  int                 back_off_at;                     /* Back off image fetches when this much memory, or less, is free.    */
                                                       /*                                                                    */
  char                ptrlnkactvx;                     /* Active point offsets in pixels from top left (exclusive):          */
  char                ptrlnkactvy;                     /* Link.                                                              */
  char                ptrmapactvx;                     /* Map.                                                               */
  char                ptrmapactvy;                     /*                                                                    */
  char                ptrudactvx;                      /* Up/down frame resize.                                              */
  char                ptrudactvy;                      /*                                                                    */
  char                ptrlractvx;                      /* Left/right frame resize.                                           */
  char                ptrlractvy;                      /*                                                                    */
  char                ptrudlractvx;                    /* Up/down/left/right frame resize.                                   */
  char                ptrudlractvy;                    /*                                                                    */
  char                ptrnoractvx;                     /* Can't resize this frame edge/corner.                               */
  char                ptrnoractvy;                     /*                                                                    */
  char                ptrtosactvx;                     /* Hotlist window about to scroll.                                    */
  char                ptrtosactvy;                     /*                                                                    */
  char                ptrscractvx;                     /* Hotlist window scrolling.                                          */
  char                ptrscractvy;                     /*                                                                    */
  char                ptrdtsactvx;                     /* Drag To Scroll (for dragging a page around).                       */
  char                ptrdtsactvy;                     /*                                                                    */
                                                       /*                                                                    */
  unsigned char       colour_progress;                 /* Either Controls_ColourProgress_NotAColour (CtrlDefs.h) to not      */
                                                       /* colour the progress display when spooling data through the fetcher */
                                                       /* to a file, else a wimp colour.                                     */
                                                       /*                                                                    */
  unsigned            anim_drift      :1;              /* 0 - stop animation as soon as idle, 1 = drift over to 1st frame.   */
  unsigned            dbox_anims      :1;              /* If set, appropriate components in dialogues will be animated.      */
                                                       /*                                                                    */
  unsigned            dont_grey       :2;              /* Controls greying of buttons and the history menu pop.              */
  unsigned            swap_bars       :1;              /* Swap top and bottom toolbars around.                               */
  unsigned            back_window     :1;              /* If full screen, be a Back window to stop others going behind.      */
  unsigned            use_small       :1;              /* If 1, small fetch windows will be used for object saves.           */
                                                       /*                                                                    */
  unsigned            claim_help      :1;              /* Claim Interactive Help messages and display text in status bar.    */
                                                       /*                                                                    */
  unsigned            append_status   :1;              /* In the absence of a byte counter append this info to status field. */
  unsigned            use_brackets    :1;              /* If appending, enclose the value in brackets.                       */
                                                       /*                                                                    */
  unsigned            keep_highlight  :1;              /* 1: Frames will keep (re)highlighting as keyboard navigated.        */
                                                       /*                                                                    */
  unsigned            keep_caret      :1;              /* Grab the caret if it is lost (*use with caution!*).                */
  unsigned            clear_first     :1;              /* 1: If popping up URL writable with key, clear first; else append.  */
  unsigned            lock_to_line    :1;              /* Lock left/right arrows to only select items on the same line.      */
  unsigned            ignore_adjust   :1;              /* Ignore adjust (treat as select) if it would open a second window.  */
                                                       /*                                                                    */
  unsigned            append_urls     :1;              /* Append the current page URL before visiting special locations.     */
                                                       /*                                                                    */
  unsigned            stop_proxy      :1;              /* Broadcast an AppControl Stop reason to web proxy when 'Stop' used. */
  unsigned            brick_wall      :1;              /* 1: Following links halts other fetches on page else they continue. */
  unsigned            refo_single     :1;              /* 1: Hold reformatter for up to 300cs or until page fully formatted. */

} global_controls;

extern global_controls controls;

/* Global error block to allow functions to hand back filled in */
/* custom error blocks, when necessary.                         */

extern _kernel_oserror erb;

/* For keeping track of where dynamically created menus came from */

typedef enum menu_source
{
  Menu_None,       /* No menu opened / none recorded as being opened. */
  Menu_Form,       /* The menu was from a form.                       */
  Menu_LocalHist,  /* Local history menu.                             */
  Menu_GlobalHist, /* Global history menu.                            */
  Menu_Authorise   /* The 'menu' was an authorisation dialogue.       */

} menu_source;

extern char        * authorise;

extern menu_source   menusrc;
extern void        * menuhdl;

#ifndef SINGLE_USER

  typedef struct userdef
  {
    char name               [Limits_Multi_Name];

    char history_path       [Limits_Multi_Pathname];
    char hotlist_path       [Limits_Multi_Pathname];
    char image_history_path [Limits_Multi_Pathname];

  } userdef;

  extern userdef user;
  extern int     logged_in;
  extern int     re_login;
d784 1
a784 1
#endif
@


1.49
log
@Long overdue check-in of intermediate browser build, from continued "out
of hours" work. Forgot to add a few files last time too.

List dialogue box handler complete, and exclusion lists implemented
within the main browser code. Full documentation in Choices file.
Save routine knows all about it but is now getting very slow - must
come up with a better scheme; for now, it puts the hourglass on...

StripExtensions option controls auto stripping of filename extensions.

More sensible ancestor / frame selection for keyboard shortcut items
and the save dialogues - having selected a frame won't lock you into
it for F3 and related shortcuts now (input focus in URL writable ->
get ancestor details, input focus in frame -> get frame details). F4
works in frames. F5 now generally present for 'view source' with a
corresponding menu entry in the File menu.

Odd thing in later Res files; there's no action set for Adjust clicks
on the main ToolAction items in the button bar. Very odd. Nothing
appears to be set in v2.07 either, yet adjust-click works. Even
stranger. Anyway, added in the relevant event details (same as for
Select click in all cases) and this fixes the problem.

Background colours in the TABLE tag ignored the "don't print any
backgrounds" Print Style setting. Fixed. Meanwhile, the "black
text with no backgrounds" option wasn't getting this right either;
fixed this also.

Event logging implemented; HTTP errors and script output via.
window.print extension. No internal error output yet.

Faith:Never behaviour extended. If ever a server sends something with
no content type or an unhandleable type, the browser will try and get a
filetype from the URL. If it gets text or HTML, it'll render the file.
Else it'll save it. Hacks around IIS 4's lack of a content type field
in the Marketeye login stuff, and similar other slightly broken sites.
@
text
@d421 1
d483 2
d541 15
d579 11
a589 2
  unsigned            support_tables     :1;           /* 0 - don't support TABLE and related tags; 1 - do.                  */
  unsigned            msie4_style_tables :1;           /* 0 - sensible table widthing...! 1 - MS(R) IE(TM) 4 style tables.   */
d596 1
d598 3
a600 1
    unsigned            js_watchdog      :1;           /* 1: Watchdog timer enabled; 0: it is disabled.                      */
d604 4
a607 4
  unsigned            support_pjpeg      :2;           /* JPEG handling. 0 - OS only; 1 - OS + internal; 2 - internal only.  */
  unsigned            support_frames     :1;           /* 0 - don't support frames in documents; 1 - do.                     */
  unsigned            support_object     :1;           /* 0 - don't support OBJECT, EMBED and APPLET; 1 - do.                */
  unsigned            plugin_control     :2;           /* 0 - never start them, 1 - start on redraw, 2 - start ASAP.         */
d609 2
a610 2
  unsigned            see_fetches        :1;           /* 0 - don't see fetches for Plug-Ins, 1 - see small fetch window.    */
  unsigned            faith              :2;           /* 0 - never, 1 - sometimes, 2 - always believe server content-type.  */
d612 1
a612 1
  unsigned            collect_after      :1;           /* 0 - Image GC on new page start, else GC on HTML fetch finish.      */
d614 7
a620 7
  unsigned            save_hotlist       :2;           /* 0 - never save hotlist, 1 - save on quit, 2 - save for new URLs.   */
  unsigned            add_hotlist        :1;           /* 0 - new items added to top, 1 - items added to bottom of the list. */
  unsigned            hotlist_show       :1;           /* 0 - show descriptions, 1 - show URLs in the hotlist.               */
                                                       /*                                                                    */
  unsigned            show_urls          :1;           /* 0 - show titles in History menu, else always show URLs.            */
  unsigned            save_history       :2;           /* 0 - don't save, 1 - save on exit, 2 - save on global history add.  */
  unsigned            save_image_history :2;           /* 0 - don't save, 1 - save on exit, 2 - save on image history add.   */
d625 1
a625 1
  unsigned            move_gadgets       :2;           /* 0 - don't move, 1 - move after resize, 2 = move during resize.     */
d627 8
a634 8
  unsigned            solid_resize       :2;           /* Frame resizes; 0 - dashed, 2 - solid, 1 - check CMOS resize bit.   */
  unsigned            full_screen        :1;           /* 0 - don't start up Full Screen, else 1.                            */
  unsigned            h_scroll           :2;           /* 0 - no hscroll in Full Screen, 1 - auto add/remove, 2 - always.    */
  unsigned            v_scroll           :2;           /* 0 - no vscroll in Full Screen, 1 - auto add/remove, 2 - always.    */
  unsigned            no_scroll_bars     :1;           /* 0 - never have scroll bars on frames, 1 - have them.               */
  unsigned            drag_to_scroll     :1;           /* As part of the above, 1 - drag page to scroll, 0 - don't do it.    */
  unsigned            show_may_scroll    :1;           /* As part of the above, 1 - show May Scroll indicator, 0 - don't.    */
  unsigned            toggle_on_y_only   :1;           /* 1 - Toggle Size only extends vertically; 0 - cover whole screen.   */
d644 1
a644 1
  unsigned            clone              :1;           /* 0 - use default user agent string, 1 = say Netscape compatible.    */
d646 2
a647 2
  unsigned            use_proxy          :1;           /* 0 - don't use a proxy, 1 = use one at URL in Messages file entry.  */
  unsigned            start_proxy        :1;           /* 0 - don't start proxy server, 1 = start it if not running already. */
d649 10
a658 2
  unsigned            cookies            :2;           /* 0 - reject all; 1 - prompt; 2 - accept all (see ChoiceDefs.h).     */
  unsigned            strip_extensions   :1;           /* 1 - strip filename extensions for downloaded objects; 0 - don't.   */
@


1.48
log
@Intermediate check-in; building a browser from this gives you something
between 2.07 and 2.08. Only the Phoenix JavaScript resources are fully
up to date.

I *think* these are the changes since the last check-in:

When saved as a Draw file, horizontal rules were plotted one page width
too far to the right (wonder when that started happening?!). Fixed. In
addition, DrawFiles now accepted as OBJECTs - they weren't in the
recognised filetype list before. Doh.

Table size calculator tables_count_table would overestimate the number
of cells where ROWSPAN was present and there were other rows below the
one spanned. Fixed. In certain odd cases (e.g. optimised image exports
as HTML tables (!!) from the Gimp) this can save vast amounts of RAM.

Fixed problem where printing stops in the middle of a document. Redraw
engine pagination code was written in the days where lines couldn't
have gaps between them; they can now. If a gap fell at the bottom of
a page the engine would look down, see no line straddling or touching
the page edge, and assume there was nothing more. This case is now
correctly handled.

Made sure desktop and testbed Browse Res files had up-to-date Encoding
menus (v2.07 Phoenix has different menus from v2.07 Browse by oversight).

URL auto-completion piggy-backed onto manual completion code; any string
without '.', '/' or ':' in it gets run through completion to see if a
more meaningful item can be produced - "www" special cased out though.

New List dialogue box handler, used for proxy exclusions etc.
(incomplete), complete with appropriate Res file objects.
@
text
@d580 1
a580 1
  unsigned            faith              :2;           /* 0 - never, 1 - sometimes, 2 - always believe server content-type.  */    
d620 1
@


1.47
log
@Tweaks to export rules in Makefile - ResJ source for JavaScript builds,
all of User dir exported, resources rule exports About as well as User.

Handles images with a width or height of 0 specified in the HTML.
Previously went for a default size placeholder and changes to image
sizes and/or redraw problems could occur before/after subsequent
reformatting (involved trivial changes to image_get_image_size and
image_redraw_area only).

Default parameter HRs now plot properly in rectangular pixel modes.

Choices code updated to cope with the minimum font size, JS support,
watchdog on/off and timeout, Navigator object option added generally
(act even *more* like Navigator), image GC after fetch, and image
GC unused image / free RAM constraints.

Code in JSnavigator.c updated to obey new "act more like Navigator"
option (see above). Currently declares itself as version 3.0.

Resources for all builds are up to date. All links in default hotlist
verified and corrected where necessary, with several new links added.

This is Release v2.07. Not tested very much, sorry; YMMV.
@
text
@d319 1
d580 1
@


1.46
log
@Another intermediate check-in, resources may not be up to date; items
most likely to be buildable are PhoenixJ and BrowseD. Done because I'm
about to make some rather dodgy changes to code otherwise unchanged
since the Customer browser and I may well have to back them out...

In Handlers.c now set the HFlags_HasBeenVisited bit of a token at the point
it is first clicked on. Means the link returns to a "visited" colour after
the highlight flash immediately. This will persist for as long as the browser
window is kept open on that page, though if the URL doesn't end up making it
into the history for whatever reason it would "unhighlight" on reload; fair
enough, really. The highlight is window-local, so there are no redraw worries
for other open windows with links to the same URL (though other same-URL
links on the same page aren't updated either).

All forms submissions force a reload (principally for eudoramail.com, but
many other sites have similar requirements).

!MkClean and !MkClnAll didn't correctly call the utility to strip Makefile
dependencies. Fixed.

On fetch closedown, fetchpage_preprocess_token could be called on a token
which had already been run through the preprocessor. Now checks the flags
word before proceeding.

Image RAM cache and garbage collection system implemented - see new Choices
file entries CollectAfter, FreeRAMLimit and UnusedImageLimit to get an
overview. This contains groundwork for JavaScript image array support.

More JavaScript support improvements. Any one window object will know its
parent, top, this, etc.; frames array working except for a frameset created
via. multiple documents; opener for something created with window.open is
currently not set and don't know why (property is being created, pointer to
valid object is held, but JS engine returns 'null'. Ho hum) - JSChain won't
work yet, then.
@
text
@d568 1
d602 1
a602 1
  unsigned            toggle_on_x_only   :1;           /* 1 - Toggle Size only extends vertically; 0 - cover whole screen.   */
@


1.45
log
@Everyone else seems to be checking lots of stuff in lately, so I've
decided to join in. This is an intermediate check-in and so not all
resources etc. will be up to date. You should be able to make Phoenix
and a debug build out of it. As a reminder, to make a JavaScript build:

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean. This now strips dynamic dependencies from the MakeFile
   automatically, to save you having to do it yourself.
 * Run one of the TaskObey files with the "J" suffix, e.g. !DeskBrwsJ -
   this uses the same .o directory for object files and exports to the
   same position in the Targets directory as the non-JavaScript build,
   but it does produce a unique binary in 'abs' and symbols table in
   'syms'.
 * Sourcing an appropriate !Run (with increased WimpSlot value), !Boot
   and About resource is done automatically.
 * Some, but not all of the !xxxD (debug) TaskObey files will make
   JavaScript versions in passing - check the JSUFFIX value on the Make
   command line parameters in the file.

This'll only work on RISC OS 3.1 due to the use of MemLib.

Here's the change list:

Included MNG icons in sprites files; added Sprites23 for some builds.
Added in ANT URL file icon (b28) derived from URI file icon, because
the Save dialogue can need it.

No, you do *not* need to define the same keyboard shortcuts in each
frame since the ancestor keeps the input focus and we've basically
dropped non-nested Wimp support. Maintaining no less than 4 lists of
identical shortcuts was a pain. Some Res files now only have the
lists in the main browser window and button bar objects (these two
are both required still).

Ursula build Markers button arrangement changed from 1x3 horizontal to
2x2 tilted, as in Phoenix, by popular demand.

Couple of hotlist bugs fixed; dragging an item and deleteing it with
Ctrl+X didn't terminate the drag, and deleteting an item underneath a
menu opened for it didn't close the menu.

'SendReferer' option added to all Choices files, all set to 'always'.
Put just beneath 'Clone' as it refers to header items, though really,
both Clone and SendReferer should probably be in the "Fetch controls"
section rather than "Multiuser environments and proxying"! Front-end
control of this is available.

In image_export_original, save_save_source, save_transfer_source and
save_save_object, flex_set_budge(0) was called to lock the heap but the
return value wasn't stored. flex_set_budge(1) was then used to unlock
the heap. All calls now remember and restore the old value, which is
both safer in case one calls another and allows the flex_set_budge
call in Main.c to have an application-wide meaning, as intended.

Some restructuring to the data load and RAM transfer sections of
Protocols.c; remote hotlist builds wouldn't allow files to be loaded
to browser windows before, and can now drop URL, URI or text files to
the Open URL dialogue.

New option "MinimumFontSize", lets the 'size' attribute of the 'font'
element be overridden. Default value is 1, to allow the full range of
values for the attribute. Setting to 7, for example, would give font
size 7 text at all times. Another new option, "ToggleOnXOnly", to
make Toggle Size only extend the window vertically (with Ctrl then
being used to toggle to genuine full size, rather than vice versa).
All Choices files updated to hold both of these options; only the
first has front-end control available (see debug build Res file).

JavaScript Document object exists; frames array etc. working. Can now
just about use "http://www.acorn.com/~ahodgkin/jschain/" but it does
abort after a bit - problems with frames again, I suspect. Is is pretty
slow, too. Can now press Escape to terminate a script.

Main.c erroneously referred to Controls file entry "StopWebServe" as
"StopWebProxy". Fixed.

Keyboard shortcuts to raise SaveFile are now possible in a general sense;
the code before was in the ToBeShown handler and just checked for a parent
component of -1. It then assumed "save frame HTML source". Now there's the
savefile_raise_from_shortcut function, which together with the seven new
event codes in SaveFile.h allows saving of HTML source and frame location,
export of links, images, backgrounds and the page as text or draw, to all
be invoked by keyboard shortcuts. Some Res files have some of these defined.

In reformat_check_height, the first check to see if setpara should be set
references a field in tpLast without checking if it is NULL. Whilst the
'line > 0' check should mean that tpLast wasn't NULL anyway, a direct
call to the function from outside of the reformatter might have tripped
up on this - the check for tpLast != NULL is now made.

Adjust-click on close icon in window showing file: URL attempts to open
the parent Filer window.

Reformatter used to try and find a selectable token if keyboard control
was enabled in a really stupid place - could make reformatting become
very slow if no selectables were present, especially if the page had a
few tables on it. Preprocessor now does this (since it goes through all
of the tokens anyway), the reformatter just doing a last check to ensure
no frames have obscured the selectable and if so, it tries to move it.
Done in the reformatter as generating a line array implies the data really
is visible.

Ctrl+Tab URL completion now builds a full list of matches from the hotlist
and history and can cycle through them (Ctrl+Shift+Tab stepping backwards).

Will give a real error rather than just "Data Abort" if it goes wrong
now. Someone somewhere is setting bit 30 of the error which confused
the replacement signal handler. Flag bits are now masked off (as they
should've been to start with).
@
text
@a36 2
#include "UseMemLib.h" /* Does nothing unless USE_MALLOC_REPLACEMENT is defined */

d516 3
d578 2
@


1.44
log
@Added capability to send Referer headers, together with new options to
allow this to be sent: a) Always, b) Never, c) when the URL referred to
is an http URL.  Default is c.  There is no frontend editing capability
for this option.  This addition means that various counters and sites
that rely on referer to indicate a resource upon which an operation is
to be carried out will now work (eg. rating a web site on Geocities).
@
text
@a26 15
#ifdef USE_MALLOC_REPLACEMENT

  #define os_error _kernel_oserror

  #include "MemLib/memheap.h"

  #define malloc   MemHeap_malloc
  #define free     MemHeap_free
  #define realloc  MemHeap_realloc
  #define memalign MemHeap_memalign
  #define valloc   MemHeap_valloc
  #define calloc   MemHeap_calloc

#endif

d37 2
d53 2
a54 2
    int32              ref_count;  /* reference count to shared usage   */
    char             * expr;       /* the JS expression to evaluate     */
d56 1
a56 1
    jsval            * argv;       /* function actual arguments         */
d60 2
a61 2
    uint16             spare;      /* alignment padding                 */
    int32              doc_id;     /* document this is for              */
d63 1
a63 1
    int64              when;       /* nominal time to run this timeout  */
d65 4
a68 4
    JSPrincipals     * principals; /* principals with which to execute  */
    char             * filename;   /* filename of setTimeout call       */
    uint32             lineno;     /* line number of setTimeout call    */
    struct JSTimeout * next;       /* next timeout in list              */
d325 3
d379 2
a389 5
  /* JavaScript support */

  const char             * onload;                   /* The onLoad attribute specified in the BODY start tag.                   */
  const char             * onunload;                 /* The onUnload attribute specified in the BODY start tag.                 */

d502 6
d552 1
d564 7
a576 1
  unsigned            send_referer       :2;           /* 0: never, 1: always, 2: when value would be an http URL            */
d592 3
d598 1
a598 3
  unsigned            full_screen        :1;           /* 0 - don't start up Full Screen, else 1.                            */
  unsigned            h_scroll           :2;           /* 0 - no hscroll in Full Screen, 1 - auto add/remove, 2 - always.    */
  unsigned            v_scroll           :2;           /* 0 - no vscroll in Full Screen, 1 - auto add/remove, 2 - always.    */
d609 1
@


1.43
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d576 1
@


1.42
log
@All !Run[D], Choices, Messages, Controls and Res files are up to date.

RefoKeep and RefoHold options added to, respectively, try and maintain
the line at the top of the visible area when reformatting, and not shrink
the vertical extent at the start of a reformat to try and avoid flicker
to the top of the page and back down again when RefoKeep is on. Choices
front-end implemented, which also allows RefoWait and RefoTime to be set.
Unfortunately for various reasons this doesn't help the page jumping when
unsized images come in (but RefoHold can improve matters...) - roll on
the image history.

DragToScroll and NoScrollBars options added for frames; included new
pointer type, Mouse_Shape_DTS, so relevant Controls file entries done
and Sprites[22] files updated as required. Noticed some builds have
a low-res ptr_link with a mask - mask removed.

Named anchor following fixed up somewhat - anchors near the bottom of
the page shouldn't be displayed, and then pulled down when the fetcher
releases null polls and ensures the y extent is correct (this through
implementing the min_height field in the browser_data structure).

RefoHang was never implemented and there seems little point to it now,
so the entry for it has been removed from the global choices structure
and all Choices files.

Markers menus should work properly now (in last check-in they would not
update correctly if Adjust was used on the entries).

URI handler usage now a lot more sensible, with configuration of how the
browser uses the module from both a Utils menu submenu (sic) and the
Choices dialogue.

Slightly dodgy 'hang around waiting for user input' stuff for the Cookies
dialogue box: All fetches are suspended; the fetcher remembers some info
about its state at the time the cookie came in, and restores it later; it
will only do this for one fetch at a time. It's necessary to single-thread
the fetcher at this point anyway, since other fetches may have a
dependency on the cookie that is hanging in mid-air at that point. As part
of this, some of the fetcher code has been split out into separate
functions (to try and 'black box' the code a bit). Anyway, Cookie Query
dialogue box now implemented with appropriate Choices file entry and
UI work in the Choices dialogue box.

Phoenix build Choices rearranged. Can now choose when the image history
is saved from the front end. Added also MSIE 4-style table option menu
for JPEG support (OS only, OS if it can handle it, internal only).

Should be a bit faster at loading the history - though 95% of the time
is spent in SWI URL_ParseURL. URL descriptions are stored more
efficiently as part of this - one malloc block instead of several
small blocks. The minimum block size for malloc blocks typically leads
to a significantly smaller startup wimpslot depending on the visit
history size.

Nasty bug in image system fixed. If an image size came in and a reformat
was to take place, the line the image lies in is found and the reformat
progresses from there. Unforunately, this didn't check to see if the
token can't be found in the line list, so it'd reformat from the top
of the page...! This would happen if, for example, an image halfway down
the page came in whilst a reformat for an image higher up had just begun.

In Choices.c, made choices_set_timetype_field, choices_set_uri_field,
choices_set_plugin_field, choices_set_cookie_field, and
choices_set_jpeg_field static (so they're not declared in Choices.h now).

Two memory leaks plugged in URL comparison routines in URLutils.c
(calling free() url_description instead of urlutils_free_descripton()).

Client pull reload handler was setting the reload flag if reloading
the same page, but forgetting to turn on reload_lock so
fetchpage_postprocessed was clearing the reload state... Similarly,
Ctrl+Shift+SELECT-Click on a link when the Controls file 'UseSmall'
entry is 'no' would not have reloaded as it should. Both fixed.

Frames shouldn't be so keen on acquiring horizontal scroll bars and never
letting them go when their width is decreased now. Frames set up for
'scrolling="yes"' will not start with no scroll bars and then gain them
shortly afterwards, causing flicker and two reformats - they'll start
with, and continue to hold, both scroll bars.

Pointer shouldn't flicker when over a frame border whilst other fetches
are progressing now.
@
text
@d52 35
d90 1
d94 1
d134 7
d245 2
a246 1
  Display_Embedded_Error    /* Display a specific error message                                             */
d266 72
a337 30
  struct browser_data    * previous;               /* Points to previous browser_data structure, or NULL for none.            */
  struct browser_data    * next;                   /* Points to next browser_data structure, or NULL for no more.             */
  ObjectId                 self_id;                /* The object ID of the browser window the structure is associated with.   */
  int                      window_handle;          /* The Wimp window handle of the browser window.                           */
                                                   /*                                                                         */
  WindowShowObjectBlock    small_size;             /* Window details when not toggled to full screen size.                    */
  int                      min_height;             /* The minimum vertical extent of the browser window.                      */
  int                      display_width;          /* Visible area width, used for reformatting etc.                          */
  int                      display_extent;         /* Visible area extent normally=width but may be forced up by reformatter. */
  int                      display_height;         /* Visible area height, used for % specified height items etc.             */
                                                   /*                                                                         */
  bs_fetch                 fetch_status;           /* To keep track of the current fetch status (see bs_fetch definition).    */
  int                      fetch_handle;           /* The html-lib handle of the document being fetched.                      */
  int                      display_handle;         /* The html-lib handle of the displayed document.                          */
                                                   /*                                                                         */
  unsigned int             current_frame;          /* The currently displayed animation frame.                                */
  unsigned int             current_time;           /* The time at which the currently displayed animation frame was shown.    */
  int                      current_fetches;        /* For frames, counts total still active fetches (so animation continues). */
                                                   /*                                                                         */
  FILE                   * save_file;              /* File handle for data saves.                                             */
  int                      save_type;              /* Filetype for data saves.                                                */
  int                      save_transferred;       /* Number of bytes done so far for in-memory transfers.                    */
  ObjectId                 save_dbox;              /* Object ID of the save dialogue being used.                              */
  int                      save_oldstore;          /* Size of the old fetched store before saving trashed it (if applicable). */
  int                      data_size;              /* Size of main page data being fetched, or 0 if unknown.                  */
  int                      progress_updated;       /* Monotonic time at which the fetch progress counter was last updated.    */
                                                   /*                                                                         */
  int                      dialler_last;           /* Time that the dialler online time was last updated.                     */
  int                      meta_refresh_at;        /* For META tags leading to a refresh, the time to start the fetch.        */
  char                   * meta_refresh_url;       /* For META tags leading to a refresh, the URL to fetch.                   */
d343 20
a362 20
  char                   * window_name;            /* Name of this frame / browser window.                                    */
  struct browser_data    * ancestor;               /* The base browser containing the frames (NULL for the base itself).      */
  struct browser_data    * real_parent;            /* For any frame pane, this points to the pane below.                      */
  struct browser_data    * parent;                 /* If this is a nested frame in one document, this points to parent.       */
                                                   /*                                                                         */
  int                      nchildren;              /* Number of children if this window / frame has other children frames.    */
  struct browser_data   ** children;               /* Pointer to array of pointers to the children's browser_data structs.    */
                                                   /*                                                                         */
  HStream                * frameset;               /* For a parent with children, pointer to token that defines the frameset. */
  HStream                * frame;                  /* For a child, pointer to a token that defines its characteristics.       */
  int                      nesting_level;          /* For an ancestor, this tracks nesting levels as frames are defined.      */
  int                      filling_frame;          /* For a parent, as it fills in children info it updates this counter.     */
  int                    * frame_widths;           /* The width of the frames, in OS units.                                   */
  int                    * frame_heights;          /* The height of the frames, in OS units.                                  */
  struct browser_data    * selected_frame;         /* For ancestors and keyboard control, the currently selected frame.       */
  ObjectId                 may_scroll;             /* If scrollbars are turned off, ObjectID of the 'may scroll' window.      */
                                                   /*                                                                         */
  int                      nstatus;                /* Number of entries in status_contents array.                             */
  void                   * status_contents;        /* Information maintained by toolbars_update_status about frame statuses.  */
  char                   * status_help;            /* If non-NULL, points to a string of help text for the status line.       */
d366 23
a388 21
  void                   * source;                 /* Pointer to the page source.                                             */
  HStream                * stream;                 /* Pointer to linked HStream list, malloced and owned by the HTML library. */
                                                   /*                                                                         */
  HStream                * final_token;            /* Address of the token last dealt with by the reformatter.                */
  HStream                * display_request;        /* Token to display at top of the window as soon as possible.              */
  int                      display_offset;         /* Offset into token data to display.                                      */
  int                      display_vscroll;        /* Last vertical scroll position when a requested token was displayed.     */
                                                   /*                                                                         */
  void                   * fdata;                  /* Pointer to pointer to forms data.                                       */
  void                   * post_data;              /* Pointer to pointer to extra data for forms.                             */
  int                      nforms;                 /* Counter for forms.                                                      */
                                                   /*                                                                         */
  struct object_info     * odata;                  /* Object data (for OBJECT, EMBED and APPLET).                             */
  int                      nobjects;               /* Saves time on working out size of odata divided by structure size.      */
                                                   /*                                                                         */
  reformat_cell          * cell;                   /* Pointer to malloced reformat_cell holding redraw information.           */
                                                   /*                                                                         */
  void                   * history_current;        /* A priavte word used by the History to record the history position.      */
                                                   /*                                                                         */
  char                   * urlfdata;               /* URL being fetched.                                                      */
  char                   * urlddata;               /* URL being displayed.                                                    */
d392 5
a396 5
  tristate_type            tristate;               /* Type of a tristate button, if one is present.                           */
  int                      tristate_state;         /* Current state of the tristate button.                                   */
  bistate_type             bistate;                /* Type of a bistate button, if one is present.                            */
  int                      bistate_state;          /* Current state of the bistate button.                                    */
  WimpMessage            * pending_data_load;      /* For saving link contents (Shift+Click), if going app-to-app.            */
d400 2
a401 2
  const char             * onload;                 /* The onLoad attribute specified in the BODY start tag.                   */
  const char             * onunload;               /* The onUnload attribute specified in the BODY start tag.                 */
d405 2
a406 2
  struct plugin_stream   * pstream;                /* For fetching data on behalf of a Plug-In in another browser window.     */
  char                   * plugin_status;          /* May hold a status message the Plug-In asked the browser to show.        */
d410 30
a439 30
  int                      background_colour;      /* Background colour.                                                      */
  int                      background_image;       /* The image number of the background image (0..nimages - 1, -1 = none).   */
  int                      text_colour;            /* Body text default colour.                                               */
  int                      link_colour;            /* Unfollowed link colour.                                                 */
  int                      used_colour;            /* Followed link colour.                                                   */
  int                      followed_colour;        /* Following link colour.                                                  */
  int                      selected_colour;        /* Selected (highlighted) object colour.                                   */
  int                      antialias_colour;       /* Colour to anti-alias text to, -1=don't anti-alias.                      */
                                                   /*                                                                         */
  int                      refo_time;              /* Records time that a pending reformat has been waiting.                  */
  int                      refo_line;              /* The lowest line number pending for a reformat.                          */
                                                   /*                                                                         */
  int                      left_margin;            /* Left hand basic page margin, millipoints.                               */
  int                      right_margin;           /* Right hand basic page margin, millipoints.                              */
  int                      quote_margin;           /* Extra page margin for blockquote chunks, millipoints.                   */
  int                      leading;                /* Line spacing, OS units.                                                 */
  int                      left_indent;            /* Multiplier on list etc. indents, millipoints.                           */
                                                   /*                                                                         */
  HStream                * highlight;              /* Token address of highlighted token (e.g. a pressed button), NULL=none.  */
  HStream                * pointer_over;           /* Token address that the pointer is over, for tokens representing links.  */
  int                      map_x;                  /* If pointer_over is an image map, the x coordinate offset (pixels).      */
  int                      map_y;                  /* Similarly, the y coordinate.                                            */
  HStream                * last_token;             /* Last token for which reformatting was definitely completed.             */
  HStream                * selected;               /* Token currently selected (for keyboard navigation).                     */
  struct browser_data    * selected_owner;         /* Owner of the currently selected token (for frames control).             */
                                                   /*                                                                         */
  display_type             displayed;              /* Type of information displayed in the window (see above).                */
                                                   /*                                                                         */
  int                      encoding;               /* Text encoding.                                                          */
  encoding_priority        encoding_priority;      /* The priority of the encoding (eg user selected / meta specified).       */
d443 1
a443 1
  bitfield_set             handles;                /* Used font handles (bit set if handle is used).                          */
d448 2
a449 2
  unsigned char            last_char;              /* Used for smart quotes and other text alteration handling.               */
  unsigned char            progress_colour;        /* Wimp foreground colour of the status bar progress indicator.            */
d453 43
a495 41
  unsigned                 button_bar      :1;     /* Button bar flag (0 = not present, 1 = present).                         */
  unsigned                 url_bar         :1;     /* URL writable bar flag (0 = not present, 1 = present).                   */
  unsigned                 status_bar      :1;     /* Status bar flag (0 = not present, 1 = present).                         */
  unsigned                 all_in_top      :1;     /* There is only the top toolbar available.                                */
  unsigned                 all_in_bottom   :1;     /* There is only the bottom toolbar available.                             */
  unsigned                 merged_url      :1;     /* If 1, the URL writable and status display are to be merged.             */
                                                   /*                                                                         */
  unsigned                 anim_handler    :1;     /* Set to 1 if the animation null event handler is registered.             */
  unsigned                 anim_drift      :1;     /* Set to 1 if the animation drift nulll event handler is registered.      */
  unsigned                 plugin_active   :1;     /* Set to 1 if a Plug-In is active for this browser.                       */
  unsigned                 fetch_handler   :1;     /* Set to 1 if the fetch_a_page null event handler is registered.          */
  unsigned                 dialler_status  :1;     /* Set to 1 if the dialler status change message handler is registered.    */
  unsigned                 status_handler  :1;     /* Set to 1 if a handler for timeout on the status messages is registered. */
  unsigned                 watching_resize :1;     /* Zero if there is null events are not being claimed to watch the size of */
                                                   /* the window, or 1 if they are.                                           */
                                                   /*                                                                         */
  unsigned                 dragging        :1;     /* 1 if a drag on the page is in progress, else 0.                         */
  unsigned                 save_link       :1;     /* 1: Save next fetch as data even if parsable, else parse it if possible. */
  unsigned                 page_is_text    :1;     /* 1: Page source is plain text, else it is HTML.                          */
  unsigned                 small_fetch     :1;     /* 1: Browser is a 'small' fetch window, else 0.                           */
                                                   /*                                                                         */
  unsigned                 reloading       :1;     /* 1: This fetch is a reload (so don't use a proxy), else 0: it isn't.     */
  unsigned                 reload_lock     :1;     /* 1: fetchpage_postprocessed should *not* clear reload flag, else do.     */
  unsigned                 from_history    :1;     /* 1: This fetch is from a forwards/back action; else 0 (normal fetch).    */
  unsigned                 suspend_format  :1;     /* 1: Reformatting suspended due to error, else 0: Reformatting OK.        */
  unsigned                 clear_images    :1;     /* 1: Images have not been garbage collected from the last fetch yet.      */
                                                   /*                                                                         */
  unsigned                 underline_links :1;     /* Underline text links (0 = no, 1 = yes).                                 */
  unsigned                 show_foreground :1;     /* Display images (0  = no, 1 = yes).                                      */
  unsigned                 show_background :1;     /* 1: Don't draw background images 0: Draw them if present in document.    */
  unsigned                 use_source_cols :1;     /* 1: Use source document's colours 0: Ignore them (use default colours).  */
                                                   /*                                                                         */
  unsigned                 full_screen     :1;     /* 1: Browser window fills the screen, 0: window has border tools.         */
  unsigned                 full_size       :1;     /* 1: Browser window toggled Full Size, 0: window is smaller.              */
                                                   /*                                                                         */
  unsigned                 frame_selected  :1;     /* 1: Browser window is selected (for frames), else is not selected.       */
  unsigned                 frame_hscroll   :2;     /* 0: No horiz scroll bar; 1: auto horiz bar; 2: bar always present.       */
  unsigned                 frame_vscroll   :2;     /* As frame_hscroll but for vertical scroll bar.                           */
                                                   /*                                                                         */
  unsigned                 in_image_map    :1;     /* 1: Image map selected for keyboard control, else 0: can move freely.    */
  unsigned                 allow_cancel    :1;     /* 1 if the fetch functions may cancel a previous fetch before proceeding. */
@


1.41
log
@Programming warehouse link removed from all hotlists - the page has gone.

Some compile-time hacks in place to use MemLib, a dynamic area based
malloc replacement which shrinks its heap when possible. All builds
have these switched off at the moment. Seemed to work with just Browse,
though there would be problems with message blocks stored in dynamic
areas because of the Wimp's '&3800000' check - however, it failed when
HTMLLib was made to use it, too. Don't know why yet.

ItemInfo.[c/h] source added, with Res file additions for testbed Browse
and Phoenix.

Small fetch windows now work properly regardless of toolbar settings
in the Choices.

Reload now reloads all images too, rather than only reloading them for
as long as the main page was being fetched.

Added a simple 'Find' facility.

Realised that event handlers in eventlib are called in reverse order
of registration, so the miscellaneous event handler is now registered
first rather than last.

Multiuser code added (most only active if SINGLE_USER is undefined). As
part of this, hotlist code now knows about read-only items (done for the
Customer-style 'Resources' file, but works generally anyway).
handle_add_hotlist doesn't try to save the hotlist itself anymore (the
hotlist_add function does all that through hotlist_modified anyway).

Customer build Choices and Controls updated slightly (e.g. ClaimHelp
off, hotlist to save on quit only).

Customer build now uses Phoenix-style buttons. Sprites files which
worked at the time (but will probably be out of date now) and included
most of the original Customer-style sprites are in
'Utils.Icons.Customer'.

Choices, Messages and Res files for all builds now stripped down to only
single user items or single plus multiuser for Customer build and testbed
build. Before, all contained a few multiuser bits in at least the Choices
file if not more.

Grammatical error ("Fetching frames contents" (sic.)) corrected in
default message, Toolbars.c, and all of the Messages files.

Customer build brought back to a servicable level (including
implementation of the Find dialogue box with animation and fixing
up authorisation and 'Stop' state in the tristate). Quite a few
missing #ifndef REMOTE_HOTLIST bits from hotlist code added...

Customer build will not use <Choices$Write> or Boot:Choices for any
file finding now. UseProxy defaults to 'yes', MaxImages to 2. Res
file includes Proxy Address setting (save_save_choices() now writes
the ProxyAddress line).
@
text
@d271 1
d465 1
a465 1
  unsigned char       maximages;                       /* Maximum number of images to fetch simultaneously.                  */
d474 2
d479 1
a479 1
  unsigned            client_pull        :1;           /* If 1, client pull is enabled, else disabled.                       */
a481 1
  unsigned            support_tables     :1;           /* 0 - don't support TABLE and related tags; 1 - do.                  */
d483 1
d500 3
d508 2
a509 1
  unsigned            refo_hang          :1;           /* 1: Reformatter will wait to know image sizes before continuing.    */
d518 2
d563 2
@


1.40
log
@RefoSingle option added to Controls.

Precautions taken in table code to avoid divide by zero errors.

Framesets defining more frames than the frameset implies, for whatever
reason, should never cause a crash now - just report a 'Frames definition
is badly nested' error (if STRICT_PARSER defined). Along the same lines,
in a single document defining a set of nested frames, two /FRAMESETs in
succession could cause a fairly nasty crash. Fixed.

TIFFs do not get loaded by double-click now.

If holding down SHIFT to save a link contents to disc, you can also hold
down CTRL to bypass the cache (sets the browser's reloading flag). Noticed
when testing this that windows_create_browser didn't take account of the
Controls file 'UseSmall' entry when adjust-shift-clicking on links. It
does now.

There is now a complete and up to date set of interactive help messages
built into the Ursula, Customer and Phoenix build Res files.
@
text
@d25 16
a40 1
#include "stdio.h"
a51 4
#ifndef SINGLE_USER
  #include "Multiuser.h"
#endif

d195 1
d197 1
d199 3
a201 1
  Display_About_Page        /* Display 'About' page listing Plug-Ins and so-on                              */
d385 1
d459 2
a460 3
                                                       /*                                                                    */
    char              * username;                      /* User name for multiuser operation.                                 */
    char              * password;                      /* Password name for multiuser operation.                             */
d514 3
a516 1
extern global_choices choices;
d606 2
d610 18
@


1.39
log
@Check for WindowManager 3.97 and ensure Unicode$Path is set in all
!Run[D] files, don't set the Alias$@@PrintType_FF4 variable, and updated
Customer build ROM obey file variants. Various other changes to
the Run files for new module versions, updated paths to support
new positions of choices, hotlist and histories (see later), etc.

!Sprites[22] files hold small !app icons for some variants, and
an ic_browse sprite. Some variants now have a Sprites and Sprites22
file instead of just Sprites, with the former containing various
mode 12 or 15 specific sprites.

Text files dragged to the URL writable are treated as ANT URL files. This
relies on URLBarWrit (Toolbars.h) being a unique ID, which it should be,
but beware of the Hotlist and Choices numberspaces...

INPUT TYPE=BUTTON supported. Form items without a FORM tag are now shown
(as MSIE 4, but not NN 4).

'*', '-', '@@', '_' and '.' are not escaped when submitting forms now. The
Web interface to the IMDb now works.

INPUT TYPE=HIDDEN items will not affect the line height anymore - so
http://www.hotmail.com/ now has correctly aligned writable icons, for
example. Similarly, TAG_FORM and TAG_FORM_END items could push up
line height and don't anymore.

HRs with a specified pixel width will now influence the size of a table
cell (they didn't before).

BRs now checked by tagno field when the browser needs to know something
was an actual BR tag rather than just a line break signal, and by the
style bit entry when only the indication of a line break is required.

Table widths of 0 or 0% are ignored.

Trace.c updated to report height and background fields in a table_stream.

fm_putsl() writes a terminator into the string; the Forms.c routines were
calling this for displaying INPUT TYPE=PASSWORD fields using the FE_PassCode
literal string (a line of stars). This write into a read only data area
would make the debugger fault the access. A local char array is now used
instead, to get round this (note the use of var[]=literal rather than
var[sizeof(literal)]; strcpy(var, literal) due to some weird compiler bug
that copies the wrong thing into 'var' under some (undefined...)
circumstances).

Text areas don't scroll back to the top line when clicked in anymore;
single line writables don't scroll back to the left either. When
reentering a text area from 'above', the caret appears at the top line
rather than 'somewhere further down'...

ARROWS_MOVE_OUT compile time option at the top of Forms.c defines whether
you must press Tab/Shift+Tab to move between writable fields in forms or
if up/down will drop out of them, though if keyboard control is on this
is enforced (or you get trapped inside the form!).

urlutils_filetype_from_url now uses MimeMap module.

If fetcher is told a page is text, it'll check for a filename extension and
may choose to use this instead (e.g. it may find it's HTML instead). This
is to try and get around duff servers... (e.g. http://www.batalarms.co.uk/).

Save dialogues shouldn't flicker when options that don't change the
filetype are selected (before, the draggable sprite was always reset for
each selection). Noticed the erroneous setting of a static variable in
SaveFile.c by a call to this by SaveObject.c, and so added a flag to
savefile_set_filetype to deal with this - would have been possible to get
the wrong filetype sent to applications or at best the wrong filetype
sprite in the dialogue without that.

The caret shouldn't jump out of a form back to the URL writable if the page
reformats now.

Table background colours now supported (as in the colour you see in the
border space if the cellspacing is large enough; this is as in MSIE, not
as in Navigator). Drawfile output routines updated accordingly.

Corrected erroneous use of wimpt_dx() / wimpt_dy() in a couple of places
in Images.c, which meant that (say) 1x1 images didn't work correctly in
medium resolution display modes.

Now have support for save as text (component ID and event 0x12) and save
as Draw (component ID and event 0x13) buttons. Dubious conditions for
greying and ungreying the print, save source and view source buttons and
menu options sorted out as part of implementing the same for the two new
buttons; added greying out of their associated menu items in passing.

Turned kerning on in draw file objects (does mean a rather heinous
increase in file size, but this is the only way to ensure the draw file
matches the visible page).

Comments before functions in SaveDraw.c are now complete and up to date.

Image and visit histories now generate a crude hash number to speed up
searching for items. It does give a speed increase, though it's a
disappointingly small one.

Issue of left/right margins and cellpaddings sorted out. Now have
redraw_left/right_margin for finding out the basic gap you must leave.
redraw_left/right_gap then gives any extra indentation for LI, BLOCKQUOTE
or whatever. The last two can be subtracted from the display width to
get an available page width for any section of text. Note that
redraw_left_gap replaces redraw_margin. The redraw_start_x function
uses the above to work out where a line's left hand edge should be,
taking account of left/right/centre alignment. HRs have been fixed now
(they were quite broken in v1.30, I think) based on this new model and
the behaviour of MSIE/NN 4.

Fixed width of cells with no contents - cell padding values wouldn't
have worked properly as the reformatter returns 0 rather than the left
hand margin size if given no stream.

Removed FM_Absolute flags for Font_Paint (spotted by DBrown) - sets bit
2, which is reserved...?

IMG width and height in % terms now works correctly; a % of available
width (after margins and indents) or height on the main page or for
a table cell, if the image lies in one. Because of the chicken-and-egg
problem with the latter, the cell must specify a width and/or height
for things to work properly. If this is not done, you'll usually end
up with a 1:1 scaled image (as in Navigator 4, rather than ending up
with no image or even no cell (!), as in MSIE 4).

HEIGHT attribute on a TABLE tag is supported, but only in a crude
fashion; the extra height (if there is any) is distributed over the
rows in a linear fashion. This is probably all you have to do in
practice, but I haven't checked. To maintain a notion of min/max
height as well as width would of course require a great deal more
work...

If using client pull to reload a page with a fragment ('...#name')
specified, then the reload wouldn't work on the same page; it'd just
jump to the fragment position. This won't happen if b->reloading is
set now (so works in conjunction with client pull on the same page
forcing a non-cached fetch). Similarly, if POSTing to such a URL,
a fetch will proceed (both these fixes done originally for
http://jupiter.beseen.com/chat/rooms/g/1678/).

browser_inherit split to browser_inherit and browser_inherit_post_data;
the code for the latter didn't clear any post_data in the child before
copying from the parent either, and could cause flex errors (now fixed).

Res file for Ursula ('Desktop' Browse) build tweaked - bits in the
font choices dialogue renamed, and button bar rearranged to hold the
new Save As Draw button. Other builds have had Save As Draw and
Save As Text buttons added, or not, depending upon availability of
suitable sprites, required UI simplicity, etc.

Now have:

  Browse$ChoicesFile
  Browse$ControlsFile
  Browse$ChoicesSave
  Browse$ControlsSave

(the last two are new) for loading and saving of the Choices or Controls
files. If unset, <App$Dir>.Choices or <App$Dir>.Controls will be set.
E.g., you could set Browse$ChoicesFile to be:

  <App$Dir>.Choices,Choices:WWW.(app).Choices

for loading and

  <Choices$Write>.WWW.(app).Choices

for saving. (The browser never saves Controls at the moment, so the
relevant variable above isn't effectively implemented, but could be
in future). Similarly, to support asymetric loading/saving of the Hotlist,
there are HotlistSave, HistorySave and ImageHistorySave entries in Choices
to complement HotlistPath, HistoryPath and ImageHistoryPath (which are used
for loading). save_save_choices will create directories as needed to obtain
the given path (and has also been fixed in various areas that hadn't been
tested out until now; e.g. zero termination of the AppName$ChoicesFile
variable expansion...). !Run[D] files updated appropriately.

Table widthing code rewritten. Slower, but a lot better on the whole.
Still has some problems - still needs a final 'make sure nothing is
below minimum width' scan, which it should be possible to do without.
No time to fix this at present!

The reformatter will now 'glue together' an LI token followed by any
non-LI token; so a bullet point followed by an item should not be able to
have a line break inserted after the bullet because of very tight width
constraints (it could before - yuk...).

'about:' brings up a page about the browser and any Plug-Ins, as with
Navigator (for example).

URI files support titles, as per spec. version 8. Saving a current
location to the Hotlist will thus give a sensible title now (unless
you're in a frame, so there's no title to get...). Of course, v1.00
files without a title still work.

Note that NOBR is *not* supported in this build and this combined with
the new table widther may cause problems on some sites (e.g. Microsoft's
home page!).
@
text
@d566 1
@


1.38
log
@Fixed some glitches in the modified status bar code (e.g. status inference
wasn't working properly).

Shift+Toggle size always opened to not obscure the icon bar. If CMOS is
set to always show the icon bar, then Shift+Toggle size is meant to
reverse sense and open to absolute full size. It now does this.

!Run[D] files now require URL 0.22, HTTP 0.64, FTP 0.22, Gopher 0.08
and File 0.32.

Minor overhaul of 'Docs.Notes' (with 'Docs.User' similarly updated) to
include a few new bits and pieces.

Timeout values of 0 now mean 'forever'. Plug-in status messages now have
their own timeout setting. New Messages token 'Actv' for extra info when
a status message times out and the status line drops to 'Viewing' or
'Ready' when there is still a Busy state registered by the Plug-in.

Small Fetch windows don't become visible briefly for Plug-in fetches
when the fetch is complete (for SeeFetches:no, where these windows
should be hidden all the time).

WebServe may be controlled through the Browse front-end via.
Wimp_MAppControl reason code 4 (Wimp_MAppControl_Configure). Note the
renaming internally of 'WebServ' or 'WebServe' has been changed to
'Proxy' (with lower case equivalents where relevant); proxy name
and starting details come from the Messages file 'ProxyName' and
'ProxyComm' tokens. More in 'Docs.Notes'.

Res files updated for image history and PRE/TT font aspect ratio
choices. 'Don't expire' labels changed to 'Expire' (oops, didn't
notice the change in the development Browse's Res file when I
updated all of the others until now...).

When printing, Wimp_PlotIcon appears to ignore R4 and R5, plots
'somewhere' on the page, and tries to get the sprite from the global
pool. This latter part normally causes an error to be raised; though
on my machine I just get a corrupted error message. The Desktop font
gets lost at this point too. All have yet to be fixed; as an
interim work around, Wimp_PlotIcon objects are never drawn at all
if the global 'printing' flag is set.
@
text
@d126 1
a126 1
  int                          cellheight;  /* Full size of subwindow               */
d128 1
a128 1
  table_stream               * table;       /* Main table definition structure      */
d185 2
a186 1
  Display_Home_Page         /* Go to the home page                                                          */
@


1.37
log
@Implemented Message_PlugIn_ReshapeRequest, Message_PlugIn_Status and
Message_PlugIn_Busy. Plug-in code more robust when given invalid
browser instance handles by the plug-in.

Line spacing is now calculated on the basis of the normal style base serif
font, with all other fonts being forced into that line height. This does
mean that an unusually tall (say) sans serif font may get clipped. It
appears to be the only way to get around wildly different baseline
depths returned from the font metrics - you can't work out line spacing
based on each different font style; the line spacing will vary.

Table heighting (as opposed to widthing...) improved considerably; rowspan
can no longer cause very tall cells in odd places. Having trouble getting
rid of the single pixel breaks between vertically adjacent cells, though
I've not tried too hard. Widthing, though, seems fairly badly broken at
present... :-/

Set/clear of page_is_text flag made more robust (it looked as though there
was the potential for this to get stuck in a set state, though I've never
see the front-end behave in a manner which indicates this is the case).
The reformatter will now decrease leading if this flag is set (plain text
pages look daft with a line spacing that is OK for 'rich' text pages).
No reformatting is done if the page width changes by dragging on the
resize icon, though toggle size / full screen will still reformat even
if the contents are only text (browser needs to sort out various width
flags at this point).

Cut down on excessive redrawing when reformatting due to a change in
window dimensions is not done. If display_width hasn't changed, then no
redraw is needed. If this causes redraw problems, then whatever is
changing display_width needs investigating. It shouldn't be kludged
(basically) by forcing a redraw instead of a reformat.

TT/PRE/etc. text can now have a non-100% aspect ratio. 80-90% looks
best (ArcWeb, for example, uses 86%). New option 'TTAspect' in
the Choices files.

Debug builds link to a non-debug Unicode library now; stops stderr
being dumped to the bottom left of the screen if you've not redirected
it in the Run file.

RISC OS 3.1 seems to need more initial WimpSlot than later OS versions.
The 64 deep nested table set gives a 'No stack for trap handler' error
(which it really means in this case!) without 800K, even though 3.71
is happy with just 640K. So, the !Run file checks if Boot$OSVersion
is exactly 300, 310 or 311, and sets the WimpSlot accordingly.

!Run[D] files now require latest fetcher module versions (URL 0.21,
File 0.31, HTTP 0.58).
@
text
@d494 1
d563 1
a563 1
  unsigned            stop_webserve   :1;              /* Broadcast an AppControl Stop reason to WebServe when 'Stop' used.  */
@


1.36
log
@Image history can be emptied from the History menu.

Significant reduction in number of times reformatter is called during
a table widthing session results in a dramatic speed increase for nested
tables (e.g. 64 deep with a paragraph of text in the deepest table takes
about two seconds to load with near-instantaneous subsequent reformats,
as opposed to taking optimistically 28 days for a 32 deep table!).
This code relies on a very big stack of assumptions...

Save as plain text implemented.

Choices, Messages and Res files brought up to date where necessary.
Version number taken to 1.28, 04-Dec-97 (so I don't forget later,
basically...).
@
text
@d300 1
d356 1
d407 1
@


1.35
log
@Image history - sizes of images are remembered for future reference (if
the sizes aren't specified in the HTML, they can be looked for in the
image history instead to minimise reformatting requirements). Choices
file options ImageHistoryPath, ImageExpiryAge, ImageMaxSize and
SaveImageHistory added to support this (all have a direct analogy to
the global History items of the same name after removing 'Image').

Text area items are now the correct height for the number of rows
specified in the HTML, don't scroll a line too early, and have the
caret placed at the start of the text when moved into from above
or at the end when moved into from below (rather than always at
the end, which was behaviour inherited from single line writables,
where this is desirable). The top of the text area is aligned to
the top of any line of text on the same line, with the text area
dropping below the text, rather than the bottom of the area matching
the text baseline and extending upwards.

Filename extensions for download files are only stripped if an
attempt to convert to a RISC OS filetype through the Mime Mapper module
does not return an error or Data (0xffd) filetype. '.cgi' is a special
case which is always stripped.

Altered heading styles - all are bold, none are italic, H3 is as big
as H2 was, H2 is a little larger, and others scale down to H6 being
the size as normal text (but, as I say, bold).

Sorted out tables and forms. We can just look for tagno=TAG_FORM, and
get rid of the wobbly form_flag; also discarded the redundant
reprocess_table flag in fetch_preprocess_token. Two separate forms
in consecutive table cells (for example) which used to fail - they
were submitted as one single form - will now work correctly.

Fixed nasty bug in FontManage.c where font size 7 would intermittently
fail. The stupid font sizes that it could ask the Font Manager for may
be responsible for the occasional Font Manager crashes that have been
noticed. Array for font sizes was declared as [Limits_FontSizes], but
indices 1 to Limits_FontSizes are actually used - so needed a '+ 1'
in the declaration... :-/

Replaced the case insensitive string comparison functions in Utils.c
with more efficient versions by S.Brodie.

MAXLENGTH specifier in INPUT tags is now supported. If unspecified or
specifically zero, the browser overrides and allows any length.
@
text
@d117 1
a117 1
  int                          x;           /* Offsets for positioning all the rest */
d119 3
@


1.34
log
@Following the last check-in - all build resources brought up to date.

Adjust-click on forwards/backwards buttons did not work in the intermediate
build, and now does.

Adjust-click on form submission buttons where the submit method is POST
will now work correctly, as the new view inherits the extradata block
of the old. Failure of this is signalled through
make_no_fetch_memory_error, code 16 (see updated Errors file in Docs).
Note the name change of extradata in this context; more details below.

The passing of forms POST data and extra headers for sending in an
HTTP request via. the URL module was all done through pointers into
flex blocks, and was therefore very unsafe. All relevant functions now
use pointers to pointers to the data.

To remove confusion on the umpteen uses of the word 'extradata', the field
in browser_data has been renamed to 'post_data'. The 'extradata' parameters
used within FetchPage.c were all disconnected from the extra header info /
form POST data stuff that extradata is usually associated with, and have
thus also been renamed, in this case to 'appnddata' (Append Data).

As well as X-NoProxy, the browser sends the 'proper' HTTP headers
Pragma:no-cache and Cache-Control:no-cache.

A redirection from a POST request was not handled correctly; despite
what HTTP specs say, you're supposed to use GET for the new URL. The
browser was, but when it chopped off the redundant header data in the
request didn't terminate it and left Content-Type in anyway...! Fixed.

Ctrl+Tab implemented - URL completion. Comes from the hotlist URLs,
hotlist titles, history hosts, paths, full URLs and lastly titles.
See code comments for more (history_find_match, hotlist_find_match).

TableSupport option added to Choices; it is read, can be set by the
front-end, but doesn't actually do anything else yet.

Reversed Choices' semantics on 'don't expire by...' for History. Added
'needs_redraw' flag to choices_get_contents so that, for example, if the
table border types change, browsers get redrawn.
@
text
@a380 1
  unsigned                 form_flag       :1;     /* 1: Fetcher is in the middle of a form, else 0: normal fetching.         */
d416 6
a421 2
  int                 max_size;                        /* Maximum size of History entries, in bytes (0 = unlimited).         */
  int                 expiry_age;                      /* Maximum age of History entries, in seconds (0 = unlimited).        */
d444 1
a444 1
  unsigned            system_font     :1;              /* 1: Use system font for everything, 0: use outline fonts.           */
d446 39
a484 38
  unsigned            underline_links :1;              /* 1: Underline link text, 0: don't.                                  */
  unsigned            use_source_cols :1;              /* 1: Use document specified colours, 0: use defaults.                */
  unsigned            show_foreground :1;              /* 1: Delay image loading, 0: Load them immediately.                  */
  unsigned            show_background :1;              /* 1: Display background images, 0: don't.                            */
                                                       /*                                                                    */
  unsigned            table_outer     :2;              /* 0: 2D outer table borders, 1: Auto, 2: always 3D, 3: never plot.   */
  unsigned            table_inner     :2;              /* 0: 2D inner table borders, 1: Auto, 2: always 3D, 3: never plot.   */
                                                       /*                                                                    */
  unsigned            client_pull     :1;              /* If 1, client pull is enabled, else disabled.                       */
  unsigned            support_frames  :1;              /* 0 - don't support frames in documents; 1 - do.                     */
  unsigned            support_object  :1;              /* 0 - don't support OBJECT, EMBED and APPLET; 1 - do.                */
  unsigned            support_tables  :1;              /* 0 - don't support TABLE and related tags; 1 - do.                  */
  unsigned            plugin_control  :2;              /* 0 - never start them, 1 - start on redraw, 2 - start ASAP.         */
  unsigned            see_fetches     :1;              /* 0 - don't see fetches for Plug-Ins, 1 - see small fetch window.    */
                                                       /*                                                                    */
  unsigned            save_hotlist    :2;              /* 0 - never save hotlist, 1 - save on quit, 2 - save for new URLs.   */
  unsigned            add_hotlist     :1;              /* 0 - new items added to top, 1 - items added to bottom of the list. */
  unsigned            hotlist_show    :1;              /* 0 - show descriptions, 1 - show URLs in the hotlist.               */
                                                       /*                                                                    */
  unsigned            show_urls       :1;              /* 0 - show titles in History menu, else always show URLs.            */
  unsigned            save_history    :2;              /* 0 - don't save history, 1 - save on exit, 2 - save on each visit.  */
                                                       /*                                                                    */
  unsigned            url_bar         :1;              /* Attach a URL bar to a window upon creation (1 = yes, 0 = no).      */
  unsigned            button_bar      :1;              /* Attach a button bar to a window upon creation (1 = yes, 0 = no).   */
  unsigned            status_bar      :1;              /* Attach a status bar to a window upon creation (1 = yes, 0 = no).   */
  unsigned            move_gadgets    :2;              /* 0 - don't move, 1 - move after resize, 2 = move during resize.     */
                                                       /*                                                                    */
  unsigned            solid_resize    :2;              /* Frame resizes; 0 - dashed, 2 - solid, 1 - check CMOS resize bit.   */
  unsigned            full_screen     :1;              /* 0 - don't start up Full Screen, else 1.                            */
  unsigned            h_scroll        :2;              /* 0 - no hscroll in Full Screen, 1 - auto add/remove, 2 - always.    */
  unsigned            v_scroll        :2;              /* 0 - no vscroll in Full Screen, 1 - auto add/remove, 2 - always.    */
                                                       /*                                                                    */
  unsigned            refo_wait       :1;              /* 1: Reformat requests are queued for 'refo_time' centiseconds.      */
  unsigned            refo_hang       :1;              /* 1: Reformatter will wait to know image sizes before continuing.    */
                                                       /*                                                                    */
  unsigned            fixed_pointer   :1;              /* 1: Pointer must not change shape over page, 1: it can change.      */
  unsigned            highlight_links :1;              /* 1: Objects are highlighted as the pointer moves over them.         */
  unsigned            keyboard_ctrl   :1;              /* 1: Keyboard control of link selection enabled, else disabled.      */
d486 2
a487 2
  unsigned            clone           :1;              /* 0 - use default user agent string, 1 = say Netscape compatible.    */
  unsigned            use_proxy       :1;              /* 0 - don't use a proxy, 1 = use one at URL in Messages file entry.  */
@


1.33
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d268 1
a268 1
  void                   * extradata;              /* Pointer to pointer to extra data for forms.                             */
@


1.32
log
@Forgot to add RMA last time.

Res files sorted out a bit, to add the Proxy option to the Choices dialogues
and fix the position of the menu popup in the Others pane.

Bogus comment in Global.h showed up when trying to build the Customer
variant (SINGLE_USER undefined); fixed.
@
text
@d276 1
a276 3
  char                   * histdata;               /* Pointer to history list (consecutive null terminated URL strings).      */
  int                      hnum;                   /* Number of entries in the history list.                                  */
  int                      hpos;                   /* Position in history list (from 1 to hnum, or 0 = not in history)        */
d320 2
d364 1
d417 2
a418 2
  int                 g_hist_size;                     /* Maximum size of global history, in K.                              */
  int                 v_hist_size;                     /* Maximum size of view history, in entries.                          */
d447 3
@


1.31
log
@Various fixes in the code required for Shockwave support (many invalid
assumptions about the OBJECT tag structure). Not finished yet though.

Played around with signal handling 'n' all that to try and get sensible
errors reported for aborts etc. using code by KBracey. Need a ROM patch
for _swix on RISC OS 3.7 upwards (or a local fixed copy of _swix),
otherwise should sort out most of the problems seen (mostly 'no stack
for trap handler' errors and a distinct lack of a register dump).

Plug-In view on redraw / ASAP choices now work as they should (ASAP
was previously broken).

Version numbers in Messages incremented to 1.25 (23 Oct 1997).

For Plug-In support, created new source file RMA.c/h to handle RMA
claims and releases, in an attempt to ensure leakage never happens.
As such, this source is *slightly* more advanced than that in the 1.25
AW '97 build, though functionally identical. Well, that is, at least
you can confirm zero RMA leakage with '-debug LMem' in TRACE builds now!

Intend to do a consistency check on comment syntax in all sources
shortly - I need to rebuild my StrongHelp manuals; can't keep track
of all of these new functions...
@
text
@d392 1
a392 1
  char              * home_page;                       /* Default home page.                                                 */ 
d427 3
a429 3
                                                       /*                                                                    */
  #ifndef SINGLE_USER                                  /*                                                                    */
                                                       /*                                                                    */
d431 1
a431 1
    char              * post_out;                      /* Path of !Post-out for multiuser operation.                         */                                                                   */
d435 3
a437 3
                                                       /*                                                                    */
  #endif                                               /*                                                                    */
                                                       /*                                                                    */
@


1.30
log
@Sorted out Res files, including fixing position of 'bytes' label in one
of the Choices dialogues (I'd missed it out of a selection when everything
else got moved down a bit). Unfaded Enc_Chinese menu entries, made sure
text labels were wide enough for system font, changed 'Apply' on Choices
dialogue to 'Set', and added ^K to hotlist keyboard shortcut lists.
Print Setup (i.e. Print dialogue) buttons all set to 'local', so the
stupid Toolbox doesn't close the dialogue and lose the caret before I
can see if it was in there to start with...

256 colour hotlist sprites taken back to standard 16 colour versions,
since there's a significant speed penalty on slower machines. The
testbed browser still has the 256 colour versions so the designs aren't
completely lost.

Changed access settings to exported builds to wr/r - lr/r was really getting
on my nerves whenever I wanted to try something temporary out.

View source, save source and print handlers would all try to work if
there was no source to act on - despite the fact that toolbar buttons
would be greyed out form them. This is fixed.

The Navigate menu has components greyed to match the toolbar state,
when opened. It isn't kept up to date dynamically, though this shouldn't
really be a problem (reopen the submenu...). As part of this, finally
sorted out conditions for the Stop button to be greyed, or the
GoTo/Go/Stop tristate to be at 'Stop' versus 'GoTo'.

Deferred reformatting is now disabled for external image fetches.

Browser-local client pull flag removed; hitting the Stop button simply
cancels any null handlers working for it. That way, client pull switches
back on in passing at the next fetch (it was never really switched off).
So to stop client pull, hit the stop button at any point.

Done CELLPADDING attribute; cellpadding field in reformat_cell (Global.h)
is redundant since the table token is accessible from there, and so it has
been removed. CELLSPACING support also added.
@
text
@d107 2
d202 30
a231 30
  struct browser_data    * previous;           /* Points to previous browser_data structure, or NULL for none.            */
  struct browser_data    * next;               /* Points to next browser_data structure, or NULL for no more.             */
  ObjectId                 self_id;            /* The object ID of the browser window the structure is associated with.   */
  int                      window_handle;      /* The Wimp window handle of the browser window.                           */
                                               /*                                                                         */
  WindowShowObjectBlock    small_size;         /* Window details when not toggled to full screen size.                    */
  int                      min_height;         /* The minimum vertical extent of the browser window.                      */
  int                      display_width;      /* Visible area width, used for reformatting etc.                          */
  int                      display_extent;     /* Visible area extent normally=width but may be forced up by reformatter. */
  int                      display_height;     /* Visible area height, used for % specified height items etc.             */
                                               /*                                                                         */
  bs_fetch                 fetch_status;       /* To keep track of the current fetch status (see bs_fetch definition).    */
  int                      fetch_handle;       /* The html-lib handle of the document being fetched.                      */
  int                      display_handle;     /* The html-lib handle of the displayed document.                          */
                                               /*                                                                         */
  unsigned int             current_frame;      /* The currently displayed animation frame.                                */
  unsigned int             current_time;       /* The time at which the currently displayed animation frame was shown.    */
  int                      current_fetches;    /* For frames, counts total still active fetches (so animation continues). */
                                               /*                                                                         */
  FILE                   * save_file;          /* File handle for data saves.                                             */
  int                      save_type;          /* Filetype for data saves.                                                */
  int                      save_transferred;   /* Number of bytes done so far for in-memory transfers.                    */
  ObjectId                 save_dbox;          /* Object ID of the save dialogue being used.                              */
  int                      save_oldstore;      /* Size of the old fetched store before saving trashed it (if applicable). */
  int                      data_size;          /* Size of main page data being fetched, or 0 if unknown.                  */
  int                      progress_updated;   /* Monotonic time at which the fetch progress counter was last updated.    */
                                               /*                                                                         */
  int                      dialler_last;       /* Time that the dialler online time was last updated.                     */
  int                      meta_refresh_at;    /* For META tags leading to a refresh, the time to start the fetch.        */
  char                   * meta_refresh_url;   /* For META tags leading to a refresh, the URL to fetch.                   */
d237 19
a255 19
  char                   * window_name;        /* Name of this frame / browser window.                                    */
  struct browser_data    * ancestor;           /* The base browser containing the frames (NULL for the base itself).      */
  struct browser_data    * real_parent;        /* For any frame pane, this points to the pane below.                      */
  struct browser_data    * parent;             /* If this is a nested frame in one document, this points to parent.       */
                                               /*                                                                         */
  int                      nchildren;          /* Number of children if this window / frame has other children frames.    */
  struct browser_data   ** children;           /* Pointer to array of pointers to the children's browser_data structs.    */
                                               /*                                                                         */
  HStream                * frameset;           /* For a parent with children, pointer to token that defines the frameset. */
  HStream                * frame;              /* For a child, pointer to a token that defines its characteristics.       */
  int                      nesting_level;      /* For an ancestor, this tracks nesting levels as frames are defined.      */
  int                      filling_frame;      /* For a parent, as it fills in children info it updates this counter.     */
  int                    * frame_widths;       /* The width of the frames, in OS units.                                   */
  int                    * frame_heights;      /* The height of the frames, in OS units.                                  */
  struct browser_data    * selected_frame;     /* For ancestors and keyboard control, the currently selected frame.       */
                                               /*                                                                         */
  int                      nstatus;            /* Number of entries in status_contents array.                             */
  void                   * status_contents;    /* Information maintained by toolbars_update_status about frame statuses.  */
  char                   * status_help;        /* If non-NULL, points to a string of help text for the status line.       */
d259 23
a281 23
  void                   * source;             /* Pointer to the page source.                                             */
  HStream                * stream;             /* Pointer to linked HStream list, malloced and owned by the HTML library. */
                                               /*                                                                         */
  HStream                * final_token;        /* Address of the token last dealt with by the reformatter.                */
  HStream                * display_request;    /* Token to display at top of the window as soon as possible.              */
  int                      display_offset;     /* Offset into token data to display.                                      */
  int                      display_vscroll;    /* Last vertical scroll position when a requested token was displayed.     */
                                               /*                                                                         */
  void                   * fdata;              /* Pointer to pointer to forms data.                                       */
  void                   * extradata;          /* Pointer to pointer to extra data for forms.                             */
  int                      nforms;             /* Counter for forms.                                                      */
                                               /*                                                                         */
  struct object_info     * odata;              /* Object data (for OBJECT, EMBED and APPLET).                             */
  int                      nobjects;           /* Saves time on working out size of odata divided by structure size.      */
                                               /*                                                                         */
  reformat_cell          * cell;               /* Pointer to malloced reformat_cell holding redraw information.           */
                                               /*                                                                         */
  char                   * histdata;           /* Pointer to history list (consecutive null terminated URL strings).      */
  int                      hnum;               /* Number of entries in the history list.                                  */
  int                      hpos;               /* Position in history list (from 1 to hnum, or 0 = not in history)        */
                                               /*                                                                         */
  char                   * urlfdata;           /* URL being fetched.                                                      */
  char                   * urlddata;           /* URL being displayed.                                                    */
d285 5
a289 5
  tristate_type            tristate;           /* Type of a tristate button, if one is present.                           */
  int                      tristate_state;     /* Current state of the tristate button.                                   */
  bistate_type             bistate;            /* Type of a bistate button, if one is present.                            */
  int                      bistate_state;      /* Current state of the bistate button.                                    */
  WimpMessage            * pending_data_load;  /* For saving link contents (Shift+Click), if going app-to-app.            */
d293 6
a298 2
  const char             * onload;             /* The onLoad attribute specified in the BODY start tag.                   */
  const char             * onunload;           /* The onUnload attribute specified in the BODY start tag.                 */
d302 28
a329 28
  int                      background_colour;  /* Background colour.                                                      */
  int                      background_image;   /* The image number of the background image (0..nimages - 1, -1 = none).   */
  int                      text_colour;        /* Body text default colour.                                               */
  int                      link_colour;        /* Unfollowed link colour.                                                 */
  int                      used_colour;        /* Followed link colour.                                                   */
  int                      followed_colour;    /* Following link colour.                                                  */
  int                      selected_colour;    /* Selected (highlighted) object colour.                                   */
  int                      antialias_colour;   /* Colour to anti-alias text to, -1=don't anti-alias.                      */
                                               /*                                                                         */
  int                      refo_time;          /* Records time that a pending reformat has been waiting.                  */
  int                      refo_line;          /* The lowest line number pending for a reformat.                          */
                                               /*                                                                         */
  int                      left_margin;        /* Left hand basic page margin, millipoints.                               */
  int                      right_margin;       /* Right hand basic page margin, millipoints.                              */
  int                      quote_margin;       /* Extra page margin for blockquote chunks, millipoints.                   */
  int                      leading;            /* Line spacing, OS units.                                                 */
  int                      left_indent;        /* Multiplier on list etc. indents, millipoints.                           */
                                               /*                                                                         */
  HStream                * highlight;          /* Token address of highlighted token (e.g. a pressed button), NULL=none.  */
  HStream                * pointer_over;       /* Token address that the pointer is over, for tokens representing links.  */
  HStream                * last_token;         /* Last token for which reformatting was definitely completed.             */
  HStream                * selected;           /* Token currently selected (for keyboard navigation).                     */
  struct browser_data    * selected_owner;     /* Owner of the currently selected token (for frames control).             */
                                               /*                                                                         */
  display_type             displayed;          /* Type of information displayed in the window (see above).                */
                                               /*                                                                         */
  int                      encoding;           /* Text encoding.                                                          */
  encoding_priority        encoding_priority;  /* The priority of the encoding (eg user selected / meta specified).       */
d333 1
a333 1
  bitfield_set             handles;            /* Used font handles (bit set if handle is used).                          */
d338 2
a339 2
  unsigned char            last_char;           /* Used for smart quotes and other text alteration handling.               */
  unsigned char            progress_colour;    /* Wimp foreground colour of the status bar progress indicator.            */
d341 1
a341 2
  /* Flags; generally, local   */
  /* configuration information */
d343 39
a381 39
  unsigned                 button_bar      :1; /* Button bar flag (0 = not present, 1 = present).                         */
  unsigned                 url_bar         :1; /* URL writable bar flag (0 = not present, 1 = present).                   */
  unsigned                 status_bar      :1; /* Status bar flag (0 = not present, 1 = present).                         */
  unsigned                 all_in_top      :1; /* There is only the top toolbar available.                                */
  unsigned                 all_in_bottom   :1; /* There is only the bottom toolbar available.                             */
  unsigned                 merged_url      :1; /* If 1, the URL writable and status display are to be merged.             */
                                               /*                                                                         */
  unsigned                 anim_handler    :1; /* Set to 1 if the animation null event handler is registered.             */
  unsigned                 anim_drift      :1; /* Set to 1 if the animation drift nulll event handler is registered.      */
  unsigned                 fetch_handler   :1; /* Set to 1 if the fetch_a_page null event handler is registered.          */
  unsigned                 dialler_status  :1; /* Set to 1 if the dialler status change message handler is registered.    */
  unsigned                 status_handler  :1; /* Set to 1 if a handler for timeout on the status messages is registered. */
  unsigned                 watching_resize :1; /* Zero if there is null events are not being claimed to watch the size of */
                                               /* the window, or 1 if they are.                                           */
                                               /*                                                                         */
  unsigned                 dragging        :1; /* 1 if a drag on the page is in progress, else 0.                         */
  unsigned                 save_link       :1; /* 1: Save next fetch as data even if parsable, else parse it if possible. */
  unsigned                 page_is_text    :1; /* 1: Page source is plain text, else it is HTML.                          */
  unsigned                 small_fetch     :1; /* 1: Browser is a 'small' fetch window, else 0.                           */
                                               /*                                                                         */
  unsigned                 reloading       :1; /* 1: This fetch is a reload (so don't use a proxy), else 0: it isn't.     */
  unsigned                 suspend_format  :1; /* 1: Reformatting suspended due to error, else 0: Reformatting OK.        */
  unsigned                 clear_images    :1; /* 1: Images have not been garbage collected from the last fetch yet.      */
                                               /*                                                                         */
  unsigned                 underline_links :1; /* Underline text links (0 = no, 1 = yes).                                 */
  unsigned                 show_foreground :1; /* Display images (0  = no, 1 = yes).                                      */
  unsigned                 show_background :1; /* 1: Don't draw background images 0: Draw them if present in document.    */
  unsigned                 use_source_cols :1; /* 1: Use source document's colours 0: Ignore them (use default colours).  */
                                               /*                                                                         */
  unsigned                 full_screen     :1; /* 1: Browser window fills the screen, 0: window has border tools.         */
  unsigned                 full_size       :1; /* 1: Browser window toggled Full Size, 0: window is smaller.              */
                                               /*                                                                         */
  unsigned                 frame_selected  :1; /* 1: Browser window is selected (for frames), else is not selected.       */
  unsigned                 frame_hscroll   :2; /* 0: No horiz scroll bar; 1: auto horiz bar; 2: bar always present.       */
  unsigned                 frame_vscroll   :2; /* As frame_hscroll but for vertical scroll bar.                           */
                                               /*                                                                         */
  unsigned                 in_image_map    :1; /* 1: Image map selected for keyboard control, else 0: can move freely.    */
  unsigned                 form_flag       :1; /* 1: Fetcher is in the middle of a form, else 0: normal fetching.         */
  unsigned                 allow_cancel    :1; /* 1 if the fetch functions may cancel a previous fetch before proceeding. */
d392 1
a392 1
  char              * home_page;                       /* Default home page.                                                 */
d450 1
d452 1
@


1.29
log
@Implemented proxy choices.
@
text
@d114 1
d117 1
d122 1
a122 1
  int                          cellpadding; /* Cell padding                         */
a376 1
  unsigned                 client_pull     :1; /* 1 if client pull is enabled, else disabled.                             */
d405 1
d410 1
d421 2
d425 5
a429 2
    char              username[Limits_Multi_UserName]; /* User name for multiuser operation.                                 */
    char              password[Limits_Multi_Password]; /* Password name for multiuser operation.                             */
a472 1
  char              * proxy_address;                   /* The base URL of the proxy server to use, including the protocol.   */
@


1.28
log
@Now handles PARAM tags. Sorted out Plug-In bug that was related to Java
setting a 0 by 0 graphics window before calling Wimp_Poll (fixed in Java).
Implemented queue for Plug-Ins so multiple broadcasts aren't sent for
several Objects in one data chunk.

Added Docs directory with some documentation in it. More things to keep
checking for stylistic consistency, horray ;-)

Corrected !Run[D] for Ursula build to need AcornURI but not TaskModule
(URI handler needed for !Mail to pick up mailto: links).

Added display_height field to browser_data, analogous to display_width,
to cope with % sized objects by width and height (see how HRs are
handled in Redraw.c for an example of how it was always fairly easy
with width, but not height until this addition). Though you do have
to reload to get a new size; reformat isn't enough. Must see to this
some time...

Fixed bug where basic typefaces were claimed *before* the Choices file
had been read. For unusual Choices settings, this could create some
'interesting' problems now and again. This was part of narrower scope
work in the Choices code to allow font changing without leaking font
handles (now done; fm_shutdown only ditches fonts, it keeps internal
structures - must then call  fm_lose_fonts for all browsers to get the
bitfields up to date, then rewrite the typeface definitions and reclaim
basic fonts). Noticed that fm_claim_basic_typefaces would claim multiple
instances of the same font if there were several cases of the same font
mapped to different typeface styles - fixed.

Implemented PlugInControl settings, but not SupportObject (fully).
@
text
@d465 1
@


1.27
log
@Minimal support for font choices added, fixed problem with colour changing with
browsers with no background colour specified.  Options for Objects implemented.
@
text
@d207 1
@


1.26
log
@More reformatter code bugs fixed; this one regarding width of items. Any
kerned string was overestimated (causing redraw bugs and caret position
problems in forms, apart from other minor bits elsewhere) and the default
size of a writable icon wasn't especially clever.

Crude Plug-In support; just about manages Java, but can't fetch on
behalf of Plug-In (for example). Had to change the default file access
URL construction to be 'file:/' instead of 'file://', or local file
fetches that reference Java applets won't work. This is in its very
early stages, and is being checked in mostly so that various Choices
issues can be worked on.
@
text
@d436 1
a436 1
  unsigned            plugin_control  :1;              /* 0 - never start them, 1 - start on redraw, 2 - start ASAP.         */
@


1.25
log
@!Run[D] files updated for new fetchers and GopherFetcher; protocols list
in Controls updated for Gopher. Debug builds now require 2760K rather than
2560K. Font$... variables set if not already, in anticipation of font
Choices work.

Additional bits in Choices section of Res file tidied and some name
changes (e.g. Netscape -> Navigator(TM)). Frames support option added
to Choices.

Grouped 'support_frames' under the Fetch Controls section and added
support_object in Global.h; appropriate entries placed in the Choices
files, and are read at startup. At present, though, only the frames
support flag is implemented.

For some reason, Menu was the button to use on history popups if you
wanted to show URLs instead of descriptions (or vice versa, depending
on Choices settings). Now, Select and Menu will show the Choices
defined setting, and Adjust will show the opposite.

History menus are built backwards, so local histories have the most
recently visited pages at the top. Global history has still no real
order to it, but this may be arranged later.

Customer name changed to Customer by request.

Customer browser now gets its own resources (SYSTEM=Customer), but
otherwise is unchanged, with the Ursula build now giving the
'spinning acorn' with a Bookworm-style toolbar. This is used for the
Desktop !Browse build.

!Sprites[22] files updated to include GIF, JPEG and PNG sprites;
!Run[D] files and !Boot files set appropriate File$Type_xxx variables.
Sprites in all sprites files have been checked for unnecessary palettes,
which have been removed where present.
@
text
@d436 1
@


1.24
log
@Added Client pull, 'Netscape compatiblility' and frames support options.
@
text
@d434 2
a442 2
                                                       /*                                                                    */
  unsigned            support_frames  :1;              /* 0 - don't support frames in documents, 1 - do.                     */
@


1.23
log
@Calling HtmlEndParse at the end of html_get_next_token and setting
up->context to NULL was wrong; fetch_fetcher would end up recalling
html_get_next_token later which would then call HtmlParse even though
the document parse had just finished! The HtmlEndParse call has now
been moved to fetch_stop.

Altered reformatter to claim fonts inside a browser, rather than
claiming them for nothing and losing them afterwards.

Got rid of TAG == TABLE and ISBODY tests, replacing with tagno == TAG_TABLE.
Removed all references to TD, TH, TR and TABLE in the style word.
@
text
@d442 2
@


1.22
log
@Big steps forward in vertical white space handling as a result of
improvements in HTMLLib in this area ( -> all versions now 1.22 beta-2).
As a result, the 'last_space' field in browser_data struct has been
removed. Note that this relies quite heavily on setting of the PCDATA
bit in the 'style' field of an HStream and the automatic collapsing
of (for example) multiple P tags inside HTMLLib.

Trace.c improved to recognise various bits in the 'style' field of an
HStream structure.

Phoenix defaults altered to a more 'standard' set of choices; Trinity
as the serif font, with a slightly larger default font size. This is
because there's a good chance it might get released to a wider audience
than Acorn internal (though the animation and icon bar sprites will
have to change before then...).

MiscDefs updated for new SWI numbers in HTTP module; !Run[D] files thus
updated to require HTTP 0.42 or later. At this point, all earlier
modules are not backwards compatible in terms of direct calls to the
HTTP module, though this only affects cookies_process_cookie at present.
At the same time, checks for System$Path, InetDBase$Path, and setting
of Inet$MimeMappings if not already defined have been added to the Run
files along with RMEnsures of Resolver and MimeMap.

Object and PlugIn c/h pairs created to handle OBJECT, EMBED and APPLET,
and the RISC OS Plug-In interface respectively. Not part of the build
process yet. Addition of 'odata' field in browser_data struct and
definition of chunk CK_OBJB for memory_set_chunk_size() are in support
of this.
@
text
@d100 2
d105 2
d266 2
a267 1
  void                   * odata;              /* Object data (for OBJECT, EMBED and APPLET).                             */
@


1.21
log
@Changed some error handling in Choices, a little bit of reformatting,
removed unnecessary tempstring in Main, and played about with the
choices Res file objects.
@
text
@d262 2
a310 2
                                               /*                                                                         */
  unsigned int             last_space;         /* Total accumulated vertical space between page elements, in OS units.    */
@


1.20
log
@Implemented dialogue based choices.
@
text
@d381 1
@


1.19
log
@All Messages files updated to show version 1.21 beta.

New save choices function with supporting code in Save.c; 'Save choices'
option in the Choices menu is now implemented.
@
text
@d380 1
@


1.18
log
@Choices and Controls files are now loaded into malloc space (use chf and
cof to address them). Previously only in Main.c, task_dir is now globally
visible.

Choices updated to allow 16ths of a point in the font size specification
and the System font face has been removed - it isn't used. The use of
serif and sans serif fonts has been rationalised across builds (e.g. Desktop
builds use what they say, but the Customer build uses Homerton as the
default body (serif, so to speak) font as it matches the box's look and
feel better).

Font loading altered a bit to work properly! Font library defines some
standard startup fonts without using Choices, which Choices can then
override.
@
text
@a69 2
extern char           * chf;
extern char           * cof;
@


1.17
log
@Now working on source merged with Kevin Bracey's internationalisation
support. UNIFONT is undefined in the Make File for now. All Res and
Choices files updated appropriately.

Having sorted out the old Choices and Messages to form Choices, Controls
and Messages, this build has had the same cleaning up done internally.
This includes greater consistency in naming schemes and the removal of
the inconsitent choices items - e.g. Choices file entries saying 'delay
images' and 'plain backgrounds' where internally all the flags say 'show
images' and 'show backgrounds'. ChoiceDefs.h and CtrlDefs.h added to
clarify the meaning of some fields, though usage of these is not 100%
in the source (there are cases where parameters are passed through to
functions as ints, and those functions still check these against hard
coded values rather than the #define stuff).

Fetcher status return bits (connected, sent request, etc.) now reflected
in status bar. Progress during fetchs to files are reported by %, where
the size of the object is known. Exceeding 100% drops back to a byte
counter, in case the estimated size was wrong. The progress counter
may be updated after specific delays, rather than 'as often as possible',
to reduce flicker (as requested by D.Brown some time ago).

I've done a small rewrite of the fetch prioritisation scheme in FetchPage.c;
how well this performs in general use across different processor speeds
remains to be tested, but certainly it has some advantages. For each small
fetch window before the rewrite, a 4cs tight loop was entered - this gave a
noticable and substantial drain to the Desktop performance if more than one
was opened. Now, several can be up at once with little hit. The actual file
fetch is on half the priority it was before, with all others taken back
just a bit - e.g. from 20cs per poll to 15cs per poll for flat out
reformatting. You don't seem to lose much time on the format in practice,
and the Desktop feels quite a bit lighter at the same time. There's the
potential for smoother frameset loading in this scheme, too.

When Shift+Clicking on a link meant you still fetched inside the main
browser window, several fetches could occur in a frameset - one per frame.
However, now that you can only do this by clicking on a link that leads to
non-displayable data - or by turning off the small fetch windows by
setting UseSmall to 'no' in Choices - a bug where fetchpage_preprocessed
would stop such fetches as new ones were started was revealed.
The API to frames_abort_fetching has now been extended to include a
'stop file spooling too' flag, allowing a fix to be made by having
fetchpage_preprocess's calls not set this (and it doesn't check the
savelink flag is unset before proceeding, since frames_abort_fetching
does that implicitly now).

Had left the RAM transfer buffer at 16 bytes (from testing) accidentally...
Oops. Upped it to 4K. In addition, when loading data by RAM transfer,
the browser didn't notice if a RAMFetch bounced during the transfer. It
would be treated as a 'first' RAMFetch bounce, basically, and try to go to
file transfer - oops. Fixed.
@
text
@d70 2
d74 2
@


1.16
log
@Encoding support added: if UNIFONT is defined then the browser will
attempt to use the system font to render Unicode characters (new
International module required). If not defined, the browser will just
handle Acorn Latin-1 characters, but HTMLLib will convert other encodings
into Latin-1. Must keep the UNIFONT define in sync with HTMLLib (if
defined HTMLLib outputs UTF-8, otherwise Acorn Latin-1).

Still needed:

Reverse encoding (converting form input etc back into the server's
character set).
Reparse when encoding changes.
Setting of charset from an attribute on the <A> tag.
@
text
@d192 29
a220 27
  struct browser_data    * previous;          /* Points to previous browser_data structure, or NULL for none.            */
  struct browser_data    * next;              /* Points to next browser_data structure, or NULL for no more.             */
  ObjectId                 self_id;           /* The object ID of the browser window the structure is associated with.   */
  int                      window_handle;     /* The Wimp window handle of the browser window.                           */
                                              /*                                                                         */
  WindowShowObjectBlock    small_size;        /* Window details when not toggled to full screen size.                    */
  int                      min_height;        /* The minimum vertical extent of the browser window.                      */
  int                      display_width;     /* Visible area width, used for reformatting etc.                          */
  int                      display_extent;    /* Visible area extent normally=width but may be forced up by reformatter. */
                                              /*                                                                         */
  bs_fetch                 fetch_status;      /* To keep track of the current fetch status (see bs_fetch definition).    */
  int                      fetch_handle;      /* The html-lib handle of the document being fetched.                      */
  int                      display_handle;    /* The html-lib handle of the displayed document.                          */
                                              /*                                                                         */
  unsigned int             current_frame;     /* The currently displayed animation frame.                                */
  unsigned int             current_time;      /* The time at which the currently displayed animation frame was shown.    */
  int                      current_fetches;   /* For frames, counts total still active fetches (so animation continues). */
                                              /*                                                                         */
  FILE                   * save_file;         /* File handle for data saves.                                             */
  int                      save_type;         /* Filetype for data saves.                                                */
  int                      save_transferred;  /* Number of bytes done so far for in-memory transfers.                    */
  ObjectId                 save_dbox;         /* Object ID of the save dialogue being used.                              */
  int                      save_oldstore;     /* Size of the old fetched store before saving trashed it (if applicable). */
                                              /*                                                                         */
  int                      dialler_last;      /* Time that the dialler online time was last updated.                     */
  int                      meta_refresh_at;   /* For META tags leading to a refresh, the time to start the fetch.        */
  char                   * meta_refresh_url;  /* For META tags leading to a refresh, the URL to fetch.                   */
d226 19
a244 19
  char                   * window_name;       /* Name of this frame / browser window.                                    */
  struct browser_data    * ancestor;          /* The base browser containing the frames (NULL for the base itself).      */
  struct browser_data    * real_parent;       /* For any frame pane, this points to the pane below.                      */
  struct browser_data    * parent;            /* If this is a nested frame in one document, this points to parent.       */
                                              /*                                                                         */
  int                      nchildren;         /* Number of children if this window / frame has other children frames.    */
  struct browser_data   ** children;          /* Pointer to array of pointers to the children's browser_data structs.    */
                                              /*                                                                         */
  HStream                * frameset;          /* For a parent with children, pointer to token that defines the frameset. */
  HStream                * frame;             /* For a child, pointer to a token that defines its characteristics.       */
  int                      nesting_level;     /* For an ancestor, this tracks nesting levels as frames are defined.      */
  int                      filling_frame;     /* For a parent, as it fills in children info it updates this counter.     */
  int                    * frame_widths;      /* The width of the frames, in OS units.                                   */
  int                    * frame_heights;     /* The height of the frames, in OS units.                                  */
  struct browser_data    * selected_frame;    /* For ancestors and keyboard control, the currently selected frame.       */
                                              /*                                                                         */
  int                      nstatus;           /* Number of entries in status_contents array.                             */
  void                   * status_contents;   /* Information maintained by toolbars_update_status about frame statuses.  */
  char                   * status_help;       /* If non-NULL, points to a string of help text for the status line.       */
d248 20
a267 20
  void                   * source;            /* Pointer to the page source.                                             */
  HStream                * stream;            /* Pointer to linked HStream list, malloced and owned by the HTML library. */
                                              /*                                                                         */
  HStream                * finaltoken;        /* Address of the token last dealt with by the reformatter.                */
  HStream                * display_request;   /* Token to display at top of the window as soon as possible.              */
  int                      display_offset;    /* Offset into token data to display.                                      */
  int                      display_vscroll;   /* Last vertical scroll position when a requested token was displayed.     */
                                              /*                                                                         */
  void                   * fdata;             /* Pointer to pointer to forms data.                                       */
  void                   * extradata;         /* Pointer to pointer to extra data for forms.                             */
  int                      nforms;            /* Counter for forms.                                                      */
                                              /*                                                                         */
  reformat_cell          * cell;              /* Pointer to malloced reformat_cell holding redraw information.           */
                                              /*                                                                         */
  char                   * histdata;          /* Pointer to history list (consecutive null terminated URL strings).      */
  int                      hnum;              /* Number of entries in the history list.                                  */
  int                      hpos;              /* Position in history list (from 1 to hnum, or 0 = not in history)        */
                                              /*                                                                         */
  char                   * urlfdata;          /* URL being fetched.                                                      */
  char                   * urlddata;          /* URL being displayed.                                                    */
d271 5
a275 5
  tristate_type            tristate;          /* Type of a tristate button, if one is present.                           */
  int                      tristate_state;    /* Current state of the tristate button.                                   */
  bistate_type             bistate;           /* Type of a bistate button, if one is present.                            */
  int                      bistate_state;     /* Current state of the bistate button.                                    */
  WimpMessage            * pending_data_load; /* For saving link contents (Shift+Click), if going app-to-app.            */
d279 2
a280 2
  const char             * onload;            /* The onLoad attribute specified in the BODY start tag.                   */
  const char             * onunload;          /* The onUnload attribute specified in the BODY start tag.                 */
d284 30
a313 30
  int                      backgroundcol;     /* Background colour.                                                      */
  int                      backimage;         /* The image number of the background image (0..nimages - 1, -1 = none).   */
  int                      textcol;           /* Body text default colour.                                               */
  int                      aacol;             /* Colour to anti-alias text to, -1=don't anti-alias.                      */
  int                      linkcol;           /* Unfollowed link colour.                                                 */
  int                      usedcol;           /* Followed link colour.                                                   */
  int                      follcol;           /* Following link colour.                                                  */
  int                      selecol;           /* Selected (highlighted) object colour.                                   */
                                              /*                                                                         */
  int                      refotime;          /* Records time that a pending reformat has been waiting.                  */
  int                      refoline;          /* The lowest line number pending for a reformat.                          */
                                              /*                                                                         */
  int                      leftmargin;        /* Left hand basic page margin, millipoints.                               */
  int                      rightmargin;       /* Right hand basic page margin, millipoints.                              */
  int                      quotemargin;       /* Extra page margin for blockquote chunks, millipoints.                   */
  int                      leading;           /* Line spacing, OS units.                                                 */
  int                      leftindent;        /* Multiplier on list etc. indents, millipoints.                           */
                                              /*                                                                         */
  HStream                * highlight;         /* Token address of highlighted token (e.g. a pressed button), NULL=none.  */
  HStream                * pointer_over;      /* Token address that the pointer is over, for tokens representing links.  */
  HStream                * last_token;        /* Last token for which reformatting was definitely completed.             */
  HStream                * selected;          /* Token currently selected (for keyboard navigation).                     */
  struct browser_data    * selected_owner;    /* Owner of the currently selected token (for frames control).             */
                                              /*                                                                         */
  unsigned int             lastspace;         /* Total accumulated vertical space between page elements, in OS units.    */
                                              /*                                                                         */
  display_type             displayed;         /* Type of information displayed in the window (see above).                */

  int                      encoding;          /* Text encoding.                                                          */
  encoding_priority        encoding_priority; /* The priority of the encoding (eg user selected / meta specified).       */
d317 1
a317 1
  bitfield_set             handles;           /* Used font handles (bit set if handle is used).                          */
d322 2
a323 2
  unsigned char            lastchar;          /* Used for smart quotes and other text alteration handling.               */
  unsigned char            progress_colour;   /* Wimp foreground colour of the status bar progress indicator.            */
d328 40
a367 39
  unsigned                 button_bar     :1; /* Button bar flag (0 = not present, 1 = present).                         */
  unsigned                 url_bar        :1; /* URL writable bar flag (0 = not present, 1 = present).                   */
  unsigned                 status_bar     :1; /* Status bar flag (0 = not present, 1 = present).                         */
  unsigned                 all_in_top     :1; /* There is only the top toolbar available.                                */
  unsigned                 all_in_bottom  :1; /* There is only the bottom toolbar available.                             */
  unsigned                 merged_url     :1; /* If 1, the URL writable and status display are to be merged.             */
                                              /*                                                                         */
  unsigned                 anim_handler   :1; /* Set to 1 if the animation null event handler is registered.             */
  unsigned                 anim_drift     :1; /* Set to 1 if the animation drift nulll event handler is registered.      */
  unsigned                 fetch_handler  :1; /* Set to 1 if the fetch_a_page null event handler is registered.          */
  unsigned                 dialler_status :1; /* Set to 1 if the dialler status change message handler is registered.    */
  unsigned                 status_handler :1; /* Set to 1 if a handler for timeout on the status messages is registered. */
  unsigned                 watching_resize:1; /* Zero if there is null events are not being claimed to watch the size of */
                                              /* the window, or 1 if they are.                                           */
                                              /*                                                                         */
  unsigned                 dragging       :1; /* 1 if a drag on the page is in progress, else 0.                         */
  unsigned                 savelink       :1; /* 1: Save next fetch as data even if parsable, else parse it if possible. */
  unsigned                 page_is_text   :1; /* 1: Page source is plain text, else it is HTML.                          */
  unsigned                 small_fetch    :1; /* 1: Browser is a 'small' fetch window, else 0.                           */
                                              /*                                                                         */
  unsigned                 reloading      :1; /* 1: This fetch is a reload (so don't use a proxy), else 0: it isn't.     */
  unsigned                 suspend_format :1; /* 1: Reformatting suspended due to error, else 0: Reformatting OK.        */
  unsigned                 clear_images   :1; /* 1: Images have not been garbage collected from the last fetch yet.      */
                                              /*                                                                         */
  unsigned                 underlinelks   :1; /* Underline text links (0 = no, 1 = yes).                                 */
  unsigned                 displayimages  :1; /* Display images (0  = no, 1 = yes).                                      */
  unsigned                 plainback      :1; /* 1: Don't draw background images 0: Draw them if present in document.    */
  unsigned                 sourcecolours  :1; /* 1: Use source document's colours 0: Ignore them (use default colours).  */
                                              /*                                                                         */
  unsigned                 full_screen    :1; /* 1: Browser window fills the screen, 0: window has border tools.         */
  unsigned                 full_size      :1; /* 1: Browser window toggled Full Size, 0: window is smaller.              */
                                              /*                                                                         */
  unsigned                 frame_selected :1; /* 1: Browser window is selected (for frames), else is not selected.       */
  unsigned                 frame_hscroll  :2; /* 0: No horiz scroll bar; 1: auto horiz bar; 2: bar always present.       */
  unsigned                 frame_vscroll  :2; /* As frame_hscroll but for vertical scroll bar.                           */
                                              /*                                                                         */
  unsigned                 in_image_map   :1; /* 1: Image map selected for keyboard control, else 0: can move freely.    */
  unsigned                 formflag       :1; /* 1: Fetcher is in the middle of a form, else 0: normal fetching.         */
  unsigned                 allow_cancel   :1; /* 1 if the fetch functions may cancel a previous fetch before proceeding. */
d374 1
a374 1
/* Global choices/preferences structure */
d378 23
d403 4
a406 2
  int                 overridex;                       /* Possible X opening coordinate.                                     */
  int                 overridey;                       /* Possible Y opening coordinate.                                     */
d415 17
a431 16
  unsigned int        col_back;                        /* Default background colour.                                         */
  unsigned int        col_text;                        /* Default text colour.                                               */
  unsigned int        col_link;                        /* Default link colour.                                               */
  unsigned int        col_used;                        /* Default used link colour.                                          */
  unsigned int        col_foll;                        /* Default following link colour.                                     */
  unsigned int        col_sele;                        /* Default selected (highlighted) link colour.                        */
                                                       /*                                                                    */
  int                 fontsize;                        /* Default font size, 16ths of a point.                               */
                                                       /*                                                                    */
  int                 leftmargin;                      /* Left hand basic page margin, millipoints.                          */
  int                 rightmargin;                     /* Right hand basic page margin, millipoints.                         */
  int                 quotemargin;                     /* Extra page margin for blockquote chunks, millipoints.              */
  int                 leading;                         /* Line spacing, OS units.                                            */
  int                 leftindent;                      /* Multiplier on list etc. indents, millipoints.                      */
  int                 minfrmheight;                    /* Minimum frame height, in OS units.                                 */
  int                 minfrmwidth;                     /* Minimum frame width, in OS units.                                  */
d433 4
a436 1
  int                 refotime;                        /* Time to queue up reformats, in centiseconds, if 'refowait' is set. */
d438 4
a441 4
  int                 maxghistory;                     /* Maximum size of global history, in K.                              */
  int                 maxvhistory;                     /* Maximum size of view history, in entries.                          */
  unsigned char       maximages;                       /* Maximum number of images to fetch simultaneously.                  */
  int                 autoopen_delay;                  /* Auto open delay time (centiseconds) for hotlist dirs, or 0 not to. */
d443 2
a444 1
  int                 encoding;                        /* Default text encoding (in absence of any specification in page)    */
d446 3
a448 34
  unsigned            systemfont    :1;                /* 1: Use system font for everything, 0: use outline fonts.           */
  unsigned            delayimages   :1;                /* 1: Delay image loading, 0: Load them immediately.                  */
  unsigned            displaybgs    :1;                /* 1: Display background images, 0: don't.                            */
  unsigned            underlinelks  :1;                /* 1: Underline link text, 0: don't.                                  */
  unsigned            overridecols  :1;                /* 1: Ignore document specified colours (use defaults), 0: use doc's. */
  unsigned            fixedptr      :1;                /* 1: Pointer must not change shape over page, 1: it can change.      */
  unsigned            highlightlks  :1;                /* 1: Objects are highlighted as the pointer moves over them.         */
  unsigned            keyboardctl   :1;                /* 1: Keyboard control of link selection enabled, else disabled.      */
  unsigned            clearfirst    :1;                /* 1: If popping up URL writable with key, clear first; else append.  */
  unsigned            keephighlight :1;                /* 1: Frames will keep (re)highlighting as keyboard navigated.        */
                                                       /*                                                                    */
  unsigned            refowait      :1;                /* 1: Reformat requests are queued for 'refotime' centiseconds.       */
  unsigned            refohang      :1;                /* 1: Reformatter will wait to know image sizes before continuing.    */
  unsigned            brickwall     :1;                /* 1: Following links halts other fetches on page else they continue. */
                                                       /*                                                                    */
  unsigned            url_bar       :1;                /* Attach a URL bar to a window upon creation (1 = yes, 0 = no).      */
  unsigned            button_bar    :1;                /* Attach a button bar to a window upon creation (1 = yes, 0 = no).   */
  unsigned            status_bar    :1;                /* Attach a status bar to a window upon creation (1 = yes, 0 = no).   */
  unsigned            show_urls     :1;                /* 0 - show titles in History menu, else always show URLs.            */
  unsigned            save_history  :2;                /* 0 - don't save history, 1 - save on exit, 2 - save on each visit.  */
                                                       /*                                                                    */
  unsigned            save_hotlist  :2;                /* 0 - never save hotlist, 1 - save on quit, 2 - save for new URLs.   */
  unsigned            add_hotlist   :1;                /* 0 - new items added to top, 1 - items added to bottom of the list. */
  unsigned            hotlist_show  :1;                /* 0 - show descriptions, 1 - show URLs in the hotlist.               */
                                                       /*                                                                    */
  unsigned            move_gadgets  :2;                /* 0 - don't move, 1 - move after resize, 2 = move during resize.     */
  unsigned            anim_drift    :1;                /* 0 - stop animation as soon as idle, 1 = drift over to 1st frame.   */
  unsigned            solid_resize  :2;                /* Frame resizes; 0 - dashed, 2 - solid, 1 - check CMOS resize bit.   */
  unsigned            use_small     :1;                /* If 1, small fetch windows will be used for object saves.           */
                                                       /*                                                                    */
                                                       /*                                                                    */
  unsigned            full_screen   :1;                /* 0 - don't start up Full Screen, else 1.                            */
  unsigned            h_scroll      :2;                /* 0 - no hscroll in Full Screen, 1 - auto add/remove, 2 - always.    */
  unsigned            v_scroll      :2;                /* 0 - no vscroll in Full Screen, 1 - auto add/remove, 2 - always.    */
d450 2
a451 2
  unsigned            clone         :1;                /* 0 - use default user agent string, 1 = say Netscape compatible.    */
  unsigned            use_proxy     :1;                /* 0 - don't use a proxy, 1 = use one at URL in Messages file entry.  */
d457 3
a459 1
typedef struct fixed_choices
d461 61
a521 43
  int                 anim_delay;             /* Minimum number of centiseconds between being called on nulls.      */
  int                 minimum_convergence;    /* See Messages file non-user configurable options section.           */
  int                 show_dstat_for;         /* For the dialler display, show unusual status for this long (cs).   */
  int                 quantise;               /* Quantise online time display to this many seconds.                 */
                                              /*                                                                    */
  char                ptrlnkactvx;            /* Active point offsets in pixels from top left (exclusive):          */
  char                ptrlnkactvy;            /* Link.                                                              */
  char                ptrmapactvx;            /* Map.                                                               */
  char                ptrmapactvy;            /*                                                                    */
  char                ptrudactvx;             /* Up/down frame resize.                                              */
  char                ptrudactvy;             /*                                                                    */
  char                ptrlractvx;             /* Left/right frame resize.                                           */
  char                ptrlractvy;             /*                                                                    */
  char                ptrudlractvx;           /* Up/down/left/right frame resize.                                   */
  char                ptrudlractvy;           /*                                                                    */
  char                ptrnoractvx;            /* Can't resize this frame edge/corner.                               */
  char                ptrnoractvy;            /*                                                                    */
  char                ptrtosactvx;            /* Hotlist window about to scroll.                                    */
  char                ptrtosactvy;            /*                                                                    */
  char                ptrscractvx;            /* Hotlist window scrolling.                                          */
  char                ptrscractvy;            /*                                                                    */
                                              /*                                                                    */
  int                 backoffat;              /* Back off image fetches when this much memory, or less, is free.    */
                                              /*                                                                    */
  unsigned char       colour_progress;        /* 255 = don't colour progress when file saving, else a wimp colour.  */
                                              /*                                                                    */
  unsigned            dontgrey      :2;       /* Controls greying of buttons and the history menu pop.              */
  unsigned            swapbars      :1;       /* Swap top and bottom toolbars around.                               */
  unsigned            dboxanims     :1;       /* If set, appropriate components in dialogues will be animated.      */
                                              /*                                                                    */
  unsigned            appendstatus  :1;       /* In the absence of a byte counter append this info to status field. */
  unsigned            usebrackets   :1;       /* If appending, enclose the value in brackets.                       */
  unsigned            appendurls    :1;       /* Append the current page URL before visiting special locations.     */
                                              /*                                                                    */
  unsigned            keepcaret     :1;       /* Grab the caret if it is lost (*use with caution!*).                */
  unsigned            claimhelp     :1;       /* Claim Interactive Help messages and display text in status bar.    */
  unsigned            stopwebserv   :1;       /* Broadcast an AppControl Stop reason to WebServ when 'Stop' used.   */
  unsigned            backwindow    :1;       /* If full screen, be a Back window to stop others going behind.      */
                                              /*                                                                    */
  unsigned            use_small     :1;       /* If 1, small fetch windows will be used for object saves.           */
                                              /*                                                                    */
  unsigned            ignoreadjust  :1;       /* Ignore adjust (treat as select) if it would open a second window.  */
  unsigned            locktoline    :1;       /* Lock left/right arrows to only select items on the same line.      */
d523 1
a523 1
} fixed_choices;
d525 1
a525 1
extern fixed_choices fixed;
@


1.15
log
@Support for ANT URL broadcast message added.

Image deletion routines rewritten; nasty animated GIF bug now gone
(it kept trying to update the cross-referenced image in the browser that
no longer existed, and I've no idea how animated GIFs ever managed to *not*
blow up if a cross referencing browser was shut down; and I've tested
this...). There are now as many image structures as there are total images
in the visible browsers, and no more; cross referenced images in the
to-be-deleted browser have their ownership moved to the cross
referencer before the cross referencee is wiped, with any required fetches
being transferred with them.

Reformatter sped up a bit by getting rid of strlen on the main text field
of tokens in all places bar one, where it is called extremely rarely. This
means direct app-to-app transfer of, say, a 359K text file to the browser
won't run like a drain as it tries to do strlen on a 359K string over and
over again! Most of the time the performance benefits won't really be
noticable, but on the above text file, formatting time went down from
290 seconds before the change to just under 7 seconds, a 41 fold speed
increase or thereabouts (SA110 228MHz).

MakeFile changed to force function name compilation on for debug builds
(-fn in the DD...FLAGS); useful for certain functions such as
register_null_handler, which can now output the name of the function
being registered.

...Which helped show up some nasties in the animation handler and animation
drift handler registration/deregistration process, which have been fixed
(callers of fetchpage_release_nulls were unaware that the drift handler
could be installed, and fragments of old code checking choices.anim_drift
had a value other than 1 or 0 were still hanging around - bit tricky for
a single bit item).

Added support for VALIGN in table cells. Spotted a bug or two in the
'what token is the pointer over' routines as a result, and fixed them - the
worst was in browser_line_at_y, which checked the y coordinate was below
the given one [the mouse], but didn't check the line height to see if the
given y coordinate was *within* the line, rather than just above it. Never
used to matter pre-tables, but a definite concern once multiple line
arrays can exist on one page.
@
text
@d310 3
d410 2
@


1.14
log
@Got the deferred reformatter working properly. It doesn't do that 'OK,
the page is fetched and reformatted, but just to annoy you, I'm going
to wait 5 seconds and then suddenly reformat the whole thing again'
trick anymore. The fetcher was calling the reformatter in a delayed
form even when the reformatter was already running, so it would carry
on past the reformat point or from below what had become and invalidated
line, and some time later, get back to the delayed reformat. Now,
reformatting is only delayed by the fetcher when the reformatter is not
running. In practice this means body text reformats as it fetches, but
large tables will show delayed reformatting - which was exactly the
intended behaviour of the feature when it was originally thought of.

fetch_token_data_address removed; it was only needed in two places,
both of which already knew when to read tp->text and when to ignore
it. Its functionality is duplicated in an 'if' involving reformat_istext,
anyway.

!Run[D] files taken back to requiring HTTP 0.33, since 0.36 introduces
many weird and wonderful problems.

Typo in Messages files, 'All current images (sic.) fetches finished' -
'images' is now 'image'.

Shift+Click saving - you could save to an application. No problem. But
the equivalent (just clicking on a link that led to an unknown datatype
and getting the save dialogue that way) didn't work. It does now.
Another problem was saving to an application that didn't support the
datatype - oops, the dialogue would close but the fetch would sit there
waiting to be told where to save. It doesn't close now (as expected).

NB, doing several simultaneous fetches to a text editor may have problems
as the editors are too clever for their own good. Despite receiving
DataLoad messages for <Wimp$Scrap> for files of different types, sizes
and datestamps, the editors can decide it's still the same file and:

Zap      - Hats off, it gets it right, almost. You do get warned 'Multiple
           copies - one on disc is newer' as everything after the first
           text loads, but they do load, and in separate windows.
StrongED - Does not load the subsequent files, so the browser gives 'Data
           transfer failed' errors and opens up Scrap. Turning off 'Don't
           load same file twice' fixes it - each file is loaded in a new
           window with no warnings. At least in the first case, you don't
           lose data, since the files are kept in Scrap.
Edit     - Each time it loads the file, it *replaces* the other one in
           memory, using the same window for each. This is the worst
           behaviour as it isn't configurable (well, I don't know of a way
           to change it...) and results in data loss as successive texts
           get trounced by the new data.

I can't see how I can fix this in the browser as it's basically silly
behaviour on behalf of the editors. Other applications which don't try
to work out if it's a new file or not are fine!

When conducting image fetches, proxying is allowed unless reloading.
When conducting page fetches, proxying was never allowed - so web cache
stuff would have been, er, interesting. It now sets X-NoProxy: in the
request header when reloading, but otherwise this is not included.

AnimSpeed is, at last, independent of browser poll speed. They used to
be tied together. Guess how the animation code used to work ;-)

'Can't handle this datatype' - deprecated now that save dialogues can be
popped up. The 'can't save objects in full screen mode' error would never
be shown due to a bug, anyway; this now replaces 'can't handle', which
has been removed from all Messages files.

RefoWait, RefoHang and RefoTime moved from Controls back to Choices.

Trying to get rid of strlen in the reformatter - it can get very slow
(e.g. strlen of 8K chunks of text, or if a 330K text file is transferred
from a text editor straight to the browser, strlen of a 330K string...).
There will be unfinished bits of code in the reformatter that may seem
unnecessary - they've just not been plugged in yet (since they don't
actually work). Don't remove them!
@
text
@d443 1
@


1.13
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d207 1
d451 1
a451 1
  int                 poll_delay;             /* Minimum number of centiseconds between being called on nulls.      */
@


1.12
log
@First a minor warning - the various Res files are out of sync in this build.
Only the Browse resources are currently valid.

Added Utils.Icons - has a few archives inside containing the resources
(well, some of them) used to build various UI sprites for various builds.
Archived because these are unlikely to change much, and putting them on
CVS was a move to, well, archive the stuff...

SaveDBox objects vanquished and requirements in !Run[D] files removed. The
data save code fits much more neatly in amongst the data load protocol
stuff now (with the slight exception of having to split the SaveObject
source into SaveObject and SaveFile - the former handles multiple persistent
dialogues for Shift+Click on links and the like, the latter handles 'one at
a time' transient dialogues for save source and similar). Export Link is now
supported, too, and writes a 'proper' version URI file. You'll find that
double-clicking on old URI files will work as the URI handler picks them up,
whilst new version ones don't; however, dragging onto the browser will only
work with new version files. Note that support for saving and loading URL
files (ANT suite stuff) is present too, so old URI files can be typed as URL
files if you want to keep them working without modification - the URI
handler itself will hopefully support the defined URI file format soon;
double-clicking on old URI files will stop working at that point. Note
there are *lots* of changes in every Res file to support all this. This may
all seem a bit pointless to some, but the changes do in fact make it very
easy to add new save dialogues all over the place. Certainly much easier
than with the previous system, anyway. In fact, post script, image
'save as sprite' took about half an hour, which I hope proves the worth
of the new system.

Merged in newer hotlist code with support for drag cancelling with Escape
(all relevant Res files appropriately updated) and cancelling scrolling
when you've reached the window scroll limit. Had to move some of the
Wimp message handling stuff to the central Protocols source, as clashes
were occuring, and also the hotlist routines were using independent saving
code - a lot of duplicated effort. This was fair enough as at the time the
Hotlist code was written, the Save code couldn't be used in the way it is
now.

New Save Source and Print buttons on the toolbar of some builds.

Phoenix Sprites file made more efficient - the Acorn base section has been
split from the animated upper region. Browse build has a new grey fade
sprite at the back, which is less grainy than the previous one and only
uses 16 colours (with a 16 greyscale palette).

Not really a bug, bug the routine to start an image fetch for INPUT
TYPE=IMAGE forms items only did so if the src field (or equivalent, for
this tag type) was non-NULL. In fact, you should always call image_new_image
and let that handle the rest, otherwise other sections of the code will fail
as they try to obtain an image number for a given HStream and get -1 back.
This problem only generally manifested itself when loading an HTML file to
the browser straight from an application, as many src fields become NULL
when the relativisation routines find nothing to relativise to...

Authentication got broken somewhere along the line - this has been fixed
(in HTMLLib and the browser).

Ctrl+Click on a cross referenced image updates *all* copies, not just the
one with the image data attached.

Next big step: Rip up TBEvents.h and rebuild that whole approach somewhat.
To all those working on the code, my apologies but this means all Res files
will receive a very large number of alterations and there will be extensive
code changes too (mostly naming convention stuff), in more or less all
source files. I am endeavouring to ensure that the new numberspace
convention does not clash with the work being done by Kevin on
internationalisation.
@
text
@d272 1
@


1.11
log
@This version is being checked in because the Hotlist manager in the test
build provokes a Wimp bug. All the variant resource files are out of sync
and there are several outstanding bugs in the main code, so I'd personally
avoid this build like the plague unless you're mad enough to want to
examine the Wimp problem ;-)
@
text
@a53 1
extern int              printer_message_ref;
@


1.10
log
@Created Protocols source file and moved a lot of message handling from
handle_messages - the latter now serves as a high level distributor to
lower level functions in Protocols. Incidentally, URL files (as used by
the ANT suite) can be loaded by dragging to the browser in the same way
as URI files - Not A Lot Of People Know That, etc.

Merged new hotlist display type Res file to existing resources, added
support for DataSave message so items can be dragged from the hotlist
to a specific window (RAM transfer for URI and URL files; ScrapFile for
HTML and Text but deleted afterwards and there are appropriate guards
to stop Reload just saying 'not found'; images run through ScrapFile and
there is no choice but to leave them there and do a conventional fetch).

All !RunD files now give a WimpSlot of 2304K. Some small changes to
the Argo and Ursula build Res files to make the menu trees more sensible.
Controls files now take 'file:/' instead of 'file://' in Protocols
section. Definitions at top of URLutils.c *not* altered, as then you
end up with invalid URLs - so it will accept 'file:/', but always generate
'file://'. This is because some browsers exports 'file:/'. Sigh.

make_no_[..._]memory_error functions now return a _kernel_oserror * rather
than void. It's always &erb returned, but it enables users to use a more
elegant 'return make_no_memory_error(1);', say, rather than something
like 'make_no_memory_error(1); return &erb;'. I obviously should've written
it like that at the outset, but never mind. All callers have been
appropriately updated.

The urlutils_leafname_from_url function now replaces illegal characters
(A7000 Welcome Guide p54...) in the leaf with legal alternatives.

Internal URL scheme is now a bit cleaner, with everything properly defined
in URLutils.h. All references to http:, file: and ftp:, with or without
a following '//' use the definitions in here now.

More tidying and some reorganising of Hotlist source. Auto-open delay is
now a Choices item. Some dependencies on statics removed (e.g. the
counting functions don't accumulate into the global item_number now).
The redraw functions used Wimp_TextOp - oops, so this has been amended
to use whatever is supported on your Wimp. This is now in a new function
(utils_text_width()), which the History menu routines also use (there was
a bug in the width routine there anyway, which is therefore fixed in
passing). Several other routines used Wimp_TextOp directly too, and
they have been altered to use the new function as well.

In hotlist code, one of the larger changes is in the API to hotlist_draw_r()
(formerly _hotlist_draw()) which now takes item widths and heights as
parameters - discovering these is quite slow, so doing it every time the
function calls itself recursively is a little less efficient than
passing the values in from elsewhere. Note that underscore prefixed
functions are being slowly renamed to _r suffixed functions, to match
the convention established by Tony Cheal with is table routines. This
makes it much more obvious when something is recursive, as the same
naming convention is used in every browser source file.

Finally, note that I intend to ditch SaveDBox and use an alternate window
with manual control of the messaging in Protocols.c. This will allow
various improvements which at present the SaveDBox operational methods
preclude. I'm going to have to do at least an alternate Window object for
the SaveDBox module to use soon in any case. Getting rid of SaveDBox will
help reduce, if only slightly, demands on the RMA.
@
text
@d340 1
d435 2
d455 16
a470 4
  int                 ptrlnkactvx;            /* Link pointer active point X offset.                                */
  int                 ptrlnkactvy;            /* Link pointer active point Y offset.                                */
  int                 ptrmapactvx;            /* Map pointer active point X offset.                                 */
  int                 ptrmapactvy;            /* Map pointer active point Y offset.                                 */
d488 2
@


1.9
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d170 1
d404 1
@


1.8
log
@Odd problem with Entries file meant none got checked in last time...
@
text
@d70 1
d213 1
d312 6
d335 1
a336 1
                                              /*                                                                         */
d338 1
d358 1
a358 9

  #ifdef ANTI_TWITTER
    unsigned               taller_redraw  :1; /* 1: Taller redraw for anti-twitter is in progress, else 0.               */
  #endif

  /* Other small data items which may */
  /* pack in under the bitfield       */

  unsigned char            lastchar;          /* Used for smart quotes and other text alteration handling.               */
d423 5
a427 2
  unsigned            save_history  :1;                /* 0 - don't save global history on exit, else always save it.        */
  unsigned            save_hotlist  :1;                /* 0 - don't save hotlist on exit (losing any changes), else save it. */
d457 2
d490 2
a491 1
  Menu_History,    /* The menu was from a History menu pop-up icon.   */
@


1.7
log
@Checking in mostly because its Friday... Quite a few little bug fixes
(adding up to a greater whole), which include removal of the dastardly
'invalid image number' errors that trace builds would raise from time to
time. Frame highlights are now better controlled (releaseably so).
Generally, this build represents the first genuinely promising version
of the browser for quite some time, despite the known library problems
with comment handling etc.
@
text
@d15 9
a23 6
/*************************************************/
/* File   : Global.h                             */
/* Purpose: Holds all of the app's globals.      */
/* Author : A.D.Hodgkinson                       */
/* History: 18-Oct-96: Created                   */
/*************************************************/
d55 2
d70 2
a71 2
extern char             tokens[MaxMsgLen];
extern char             lasttokn[MaxLstLen];
d78 1
a78 1
extern char             program_name[MaxPrgLen];
d208 4
a211 3
  FILE                   * savefile;          /* File handle for data saves.                                             */
  int                      savetype;          /* Filetype for data saves.                                                */
  int                      savetransferred;   /* Number of bytes done so far for in-memory transfers.                    */
a262 2
                                              /*                                                                         */
  int                      bytes_fetched;     /* Number of bytes fetched so far, including image data.                   */
d327 1
d368 66
a433 71
  int                 width;                  /* Default browser window width.                                      */
  int                 height;                 /* Default browser window height.                                     */
  int                 overridex;              /* Possible X opening coordinate.                                     */
  int                 overridey;              /* Possible Y opening coordinate.                                     */
                                              /*                                                                    */
  char                historyfile[MaxHstLen]; /* Default pathname to store global history.                          */
  char                hotlistfile[MaxHotLen]; /* Default pathname to store hot list.                                */
                                              /*                                                                    */
  #ifndef SINGLE_USER                         /*                                                                    */
                                              /*                                                                    */
    char              username[20];           /* User name for multiuser operation.                                 */
    char              password[11];           /* Password name for multiuser operation.                             */
                                              /*                                                                    */
  #endif                                      /*                                                                    */
                                              /*                                                                    */
  char                post_in [MaxPoILen];    /* Incoming mail path                                                 */
  char                post_out[MaxPoOLen];    /* Outgoing mail path                                                 */
                                              /*                                                                    */
  unsigned int        col_back;               /* Default background colour.                                         */
  unsigned int        col_text;               /* Default text colour.                                               */
  unsigned int        col_link;               /* Default link colour.                                               */
  unsigned int        col_used;               /* Default used link colour.                                          */
  unsigned int        col_foll;               /* Default following link colour.                                     */
  unsigned int        col_sele;               /* Default selected (highlighted) link colour.                        */
                                              /*                                                                    */
  int                 fontsize;               /* Default font size, 16ths of a point.                               */
                                              /*                                                                    */
  int                 leftmargin;             /* Left hand basic page margin, millipoints.                          */
  int                 rightmargin;            /* Right hand basic page margin, millipoints.                         */
  int                 quotemargin;            /* Extra page margin for blockquote chunks, millipoints.              */
  int                 leading;                /* Line spacing, OS units.                                            */
  int                 leftindent;             /* Multiplier on list etc. indents, millipoints.                      */
  int                 minfrmheight;           /* Minimum frame height, in OS units.                                 */
  int                 minfrmwidth;            /* Minimum frame width, in OS units.                                  */
                                              /*                                                                    */
  int                 refotime;               /* Time to queue up reformats, in centiseconds, if 'refowait' is set. */
                                              /*                                                                    */
  int                 maxghistory;            /* Maximum size of global history, in K.                              */
  int                 maxvhistory;            /* Maximum size of view history, in entries.                          */
  unsigned char       maximages;              /* Maximum number of images to fetch simultaneously.                  */
                                              /*                                                                    */
  unsigned            systemfont    :1;       /* 1: Use system font for everything, 0: use outline fonts.           */
  unsigned            delayimages   :1;       /* 1: Delay image loading, 0: Load them immediately.                  */
  unsigned            displaybgs    :1;       /* 1: Display background images, 0: don't.                            */
  unsigned            underlinelks  :1;       /* 1: Underline link text, 0: don't.                                  */
  unsigned            overridecols  :1;       /* 1: Ignore document specified colours (use defaults), 0: use doc's. */
  unsigned            fixedptr      :1;       /* 1: Pointer must not change shape over page, 1: it can change.      */
  unsigned            highlightlks  :1;       /* 1: Objects are highlighted as the pointer moves over them.         */
  unsigned            keyboardctl   :1;       /* 1: Keyboard control of link selection enabled, else disabled.      */
  unsigned            clearfirst    :1;       /* 1: If popping up URL writable with key, clear first; else append.  */
  unsigned            keephighlight :1;       /* 1: Frames will keep (re)highlighting as keyboard navigated.        */
                                              /*                                                                    */
  unsigned            refowait      :1;       /* 1: Reformat requests are queued for 'refotime' centiseconds.       */
  unsigned            refohang      :1;       /* 1: Reformatter will wait to know image sizes before continuing.    */
  unsigned            brickwall     :1;       /* 1: Following links halts other fetches on page else they continue. */
                                              /*                                                                    */
  unsigned            url_bar       :1;       /* Attach a URL bar to a window upon creation (1 = yes, 0 = no).      */
  unsigned            button_bar    :1;       /* Attach a button bar to a window upon creation (1 = yes, 0 = no).   */
  unsigned            status_bar    :1;       /* Attach a status bar to a window upon creation (1 = yes, 0 = no).   */
  unsigned            show_urls     :1;       /* 0 - show titles in History menu, else always show URLs.            */
  unsigned            save_history  :1;       /* 0 - don't save global history on exit, else always save it.        */
  unsigned            save_hotlist  :1;       /* 0 - don't save hotlist on exit (losing any changes), else save it. */
                                              /*                                                                    */
  unsigned            move_gadgets  :2;       /* 0 - don't move, 1 - move after resize, 2 = move during resize.     */
  unsigned            anim_drift    :1;       /* 0 - stop animation as soon as idle, 1 = drift over to 1st frame.   */
                                              /*                                                                    */
  unsigned            full_screen   :1;       /* 0 - don't start up Full Screen, else 1.                            */
  unsigned            h_scroll      :2;       /* 0 - no hscroll in Full Screen, 1 - auto add/remove, 2 - always.    */
  unsigned            v_scroll      :2;       /* 0 - no vscroll in Full Screen, 1 - auto add/remove, 2 - always.    */
                                              /*                                                                    */
  unsigned            use_proxy     :1;       /* 0 - don't use a proxy, 1 = use one at URL in Messages file entry.  */
@


1.6
log
@Fixed problems with unsourced images in tables and a couple of other bugs
here and there - nothing earth shattering... Just wanted to keep the CVS
source up to date.
@
text
@d357 1
@


1.5
log
@Supported client pull, through a generalised handing of the META tag.
@
text
@a284 1
  reformat_queue         * refo_queue_base;   /* Base of the reformat_queue structs for delayed reformat requests.       */
@


1.4
log
@Updated code to extract attributes from BODY tag, including event info.
@
text
@d208 2
a319 1
  unsigned                 dialler_time   :1; /* Set to 1 if the online dialler time null handler is registered.         */
@


1.3
log
@Altered dialler status reporting to be more efficient (only installs the null handler when it needs the online time)
@
text
@d265 5
@


1.2
log
@Added various TaskObey files to make different browser variants (the Makefile
has been updated to support this). At present, TARGET must be set for the
Make file to work (some oddity in AMU causing problems here). Added
Multiuser.h to cope with a non-SINGLE_USER build for Customer.
@
text
@d206 2
d313 2
a314 1
  unsigned                 dialler_handler:1; /* Set to 1 if handlers for watching the dialler status are registered.    */
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d34 4
@
