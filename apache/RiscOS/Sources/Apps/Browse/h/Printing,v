head	1.12;
access;
symbols
	Browse-2_16:1.12
	Browse-2_15:1.12
	Browse-2_14:1.12
	Browse-2_13:1.12
	Browse-2_12:1.12
	Browse-2_11:1.11
	Browse-2_10:1.11
	Browse-2_09:1.11
	ahodgkin_208_i4_2:1.11
	ahodgkin_208_i4:1.9
	ahodgkin_208_i3:1.8
	ahodgkin_208_i2:1.8
	ahodgkin_208_i1:1.7
	ahodgkin_207release:1.5
	ahodgkin_206release:1.5
	ahodgkin_205release:1.5
	ahodgkin_204release:1.5
	ahodgkin_202release:1.5
	ahodgkin_201release:1.5
	ahodgkin_200release:1.5
	ahodgkin_133beta:1.5
	ahodgkin_132beta:1.5
	ahodgkin_131beta:1.5
	ahodgkin_130beta:1.5
	ahodgkin_129:1.5
	ahodgkin_128beta:1.5
	ahodgkin_128alpha:1.5
	ahodgkin_127beta2:1.5
	ahodgkin_127beta:1.5
	ahodgkin_126beta:1.5
	ahodgkin_AW97patch:1.5
	ahodgkin_AW97:1.5;
locks; strict;
comment	@# @;


1.12
date	2006.03.13.22.06.20;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	2000.11.14.08.45.08;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	2000.05.31.15.58.58;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	2000.03.03.09.20.05;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	2000.02.25.17.08.57;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	99.09.10.09.28.10;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	99.03.30.15.52.15;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.09.12.17.19.40;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.09.09.14.13.26;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.08.28.16.08.17;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.08.18.10.00.20;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.29.54;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.12
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Printing.h                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Printing functions for the browser.               */
/*                                                            */
/*          This source is fairly closely tied to             */
/*          PrintStyle.h, as the Print dialogue can open and  */
/*          close the Print Style dialogue.                   */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 27-Jan-1997 (ADH): Created.                       */
/*          25-Aug-1997 (ADH): Definitions imported from      */
/*                             TBEvents.h.                    */
/*          07-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_Printing__
  #define Browser_Printing__

  #include <kernel.h>
  #include <tboxlibs/toolbox.h>
  #include <HTMLLib/HTMLLib.h>

  #include "Global.h"

  /* Print dialogue component IDs */

  #define PStartWhole                     0x02001
  #define PStartVisible                   0x02002
  #define PEndWhole                       0x02003
  #define PEndVisible                     0x02004
  #define PEndMany                        0x02005
  #define PEndManyNum                     0x02006
  #define PEndManyLabel                   0x02007
  #define PReformatToFit                  0x02008
  #define POriUpright                     0x02009
  #define POriSideways                    0x0200a
  #define PCopiesNum                      0x0200b
  #define PCopiesLabel                    0x0200c
  #define POpenPrintStyle                 0x0200d
  #define PGroupFrameOne                  0x0200e
  #define PGroupFrameTwo                  0x0200f
  #define PPrintToPDF                     0x02010
  #define PGroupFrameThree                0x02011

  /* Print dialogue event codes */

  #define EPEnableReformat                0x021ff /* When activating radios that may enable or disable the */
                                                  /* Reformat option in the Print dialogue box.            */
  #define EPCancelPrint                   0x021fe
  #define EPStartPrint                    0x021fd

  /* Message definitions */

  #define Browser_Message_PrintFile       0x80140
  #define Browser_Message_WillPrint       0x80141
  #define Browser_Message_PrintSave       0x80142
  #define Browser_Message_PrintError      0x80144
  #define Browser_Message_PrintTypeOdd    0x80145
  #define Browser_Message_PrintTypeKnown  0x80146

  /* Printer driver features */

  #define Browser_Printer_Colour             (1u<<0)
  #define Browser_Printer_LimitedColours     (1u<<1)
  #define Browser_Printer_DiscreteColours    (1u<<2)
  #define Browser_Printer_OutlinesOnly       (1u<<8)
  #define Browser_Printer_ThinLinesOnly      (1u<<9)
  #define Browser_Printer_NoOverwriting      (1u<<10)
  #define Browser_Printer_TransformsSprites  (1u<<11)
  #define Browser_Printer_TransformsFonts    (1u<<12)
  #define Browser_Printer_PreScansRectangles (1u<<13)
  #define Browser_Printer_ScreenDumps        (1u<<24)
  #define Browser_Printer_TransformsPages    (1u<<25)
  #define Browser_Printer_InsertIllustration (1u<<26)
  #define Browser_Printer_MiscOp             (1u<<27)
  #define Browser_Printer_SetDriver          (1u<<28)
  #define Browser_Printer_DeclareFont        (1u<<29)

  /* Miscellaneous definitions */

  /* If a line won't fit on the bottom of a page and the gap    */
  /* left at the bottom is more than (100/PrintSplitFraction)th */
  /* of the page's height, the line will be split over the page */
  /* boundary.                                                  */

  #define PrintSplitFraction (150)

  /* Multiplier for the minimum header/footer height, x10 */

  #define PrintHeaderAndFooterHeightMultiplier (15)

  /* Function prototypes */

  _kernel_oserror * print_open_for             (browser_data * b, ObjectId parent);

  int               print_set_defaults         (void);

  int               print_to_be_shown          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  _kernel_oserror * print_close                (ObjectId ancestor, int do_not_close);

  _kernel_oserror * print_print                (const char * path);
  void              print_abort_print          (void);

  void              print_return_dialogue_info (ObjectId * self, ObjectId * window, ObjectId * ancestor, browser_data ** ancestor_b);

  HStream         * print_find_splitting_point (const reformat_cell * d, int osyorg, int l, int page_bottom, int page_height, int * split_y, int * store);

#endif /* Browser_Printing__ */
@


1.11
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@d60 2
d119 1
a119 1
  void              print_print                (const char * path);
d124 1
a124 1
  HStream         * print_find_splitting_point (reformat_cell * d, int osyorg, int l, int page_bottom, int page_height, int * split_y, int * store);
@


1.10
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d97 4
a100 3
  /* If a line is more than a (100/PrintSplitFraction)th */
  /* of the page height, it will always be forced to     */
  /* split over the page boundary.                       */
@


1.9
log
@Further printing tweaks. Font colours inside anchors now work (must be
built with the 02-Mar-2000 HTMLLib or later). Event log won't show guts
of internal URLs for just-born browser windows if displaying the list
by URL. Empty Location headers don't redirect down zero page and give a
nasty internal error; raise "no fetcher service found" instead.
@
text
@d16 1
a16 1
/* File   : Printing.h                                        */
d26 1
a26 1
/* Author : A.D.Hodgkinson                                    */
d31 1
a31 3
/*          24-Feb-2000 (ADH): Headers and footers nearly     */
/*                             done, 64-wide comments with    */
/*                             Pace (C) started.              */
d34 2
a35 1
/* Print dialogue component IDs */
d37 3
a39 70
#define PStartWhole                     0x02001
#define PStartVisible                   0x02002
#define PEndWhole                       0x02003
#define PEndVisible                     0x02004
#define PEndMany                        0x02005
#define PEndManyNum                     0x02006
#define PEndManyLabel                   0x02007
#define PReformatToFit                  0x02008
#define POriUpright                     0x02009
#define POriSideways                    0x0200a
#define PCopiesNum                      0x0200b
#define PCopiesLabel                    0x0200c
#define POpenPrintStyle                 0x0200d
#define PGroupFrameOne                  0x0200e
#define PGroupFrameTwo                  0x0200f

/* Print dialogue event codes */

#define EPEnableReformat                0x021ff /* When activating radios that may enable or disable the */
                                                /* Reformat option in the Print dialogue box.            */
#define EPCancelPrint                   0x021fe
#define EPStartPrint                    0x021fd

/* Message definitions */

#define Browser_Message_PrintFile       0x80140
#define Browser_Message_WillPrint       0x80141
#define Browser_Message_PrintSave       0x80142
#define Browser_Message_PrintError      0x80144
#define Browser_Message_PrintTypeOdd    0x80145
#define Browser_Message_PrintTypeKnown  0x80146

/* Printer driver features */

#define Browser_Printer_Colour             (1u<<0)
#define Browser_Printer_LimitedColours     (1u<<1)
#define Browser_Printer_DiscreteColours    (1u<<2)
#define Browser_Printer_OutlinesOnly       (1u<<8)
#define Browser_Printer_ThinLinesOnly      (1u<<9)
#define Browser_Printer_NoOverwriting      (1u<<10)
#define Browser_Printer_TransformsSprites  (1u<<11)
#define Browser_Printer_TransformsFonts    (1u<<12)
#define Browser_Printer_PreScansRectangles (1u<<13)
#define Browser_Printer_ScreenDumps        (1u<<24)
#define Browser_Printer_TransformsPages    (1u<<25)
#define Browser_Printer_InsertIllustration (1u<<26)
#define Browser_Printer_MiscOp             (1u<<27)
#define Browser_Printer_SetDriver          (1u<<28)
#define Browser_Printer_DeclareFont        (1u<<29)

/* Miscellaneous definitions */

/* If a line is more than a (100/PrintSplitFraction)th */
/* of the page height, it will always be forced to     */
/* split over the page boundary.                       */

#define PrintSplitFraction (150)

/* Multiplier for the minimum header/footer height, x10 */

#define PrintHeaderAndFooterHeightMultiplier (15)

/* Function prototypes */

_kernel_oserror * print_open_for             (browser_data * b, ObjectId parent);

int               print_set_defaults         (void);

int               print_to_be_shown          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
_kernel_oserror * print_close                (ObjectId ancestor, int do_not_close);
d41 1
a41 2
void              print_print                (const char * path);
void              print_abort_print          (void);
d43 1
a43 1
void              print_return_dialogue_info (ObjectId * self, ObjectId * window, ObjectId * ancestor, browser_data ** ancestor_b);
d45 79
a123 1
HStream         * print_find_splitting_point (reformat_cell * d, int osyorg, int l, int page_bottom, int page_height, int * split_y, int * store);
@


1.8
log
@Misecllaneous tweaks and fixes. Major addition is full header and footer
support in the printing system - see the Phoenix Choices file for more
information.

Only the Phoenix resources are up to date currently.
@
text
@a99 5
/* Width adjust to avoid oblique fonts falling outside left/right */
/* margins and so-on. OS unit inset from left.                    */

#define PrintHeaderAndFooterWidthAdjust (4)

d113 2
@


1.7
log
@New overview document in Docs, requested by some Pace people.

Printing engine will attempt not to seperate headings from non-heading
items. If the current line is a heading and the next is not, and falls
off the bottom edge of the paper, then both lines will be carried over
to the next page. Similarly for DT and DD items. Maximum line height to
push rather than split is now altered to 2/3 of page height (was 1/2).

JavaScript fix; a URL's "protocol" value should include a ':' at the end.
@
text
@d15 20
a34 16
/***************************************************/
/* File   : Printing.h                             */
/*                                                 */
/* Purpose: Printing functions for the browser.    */
/*                                                 */
/*          This source is fairly closely tied to  */
/*          PrintStyle.h, as the Print dialogue    */
/*          can open and close the Print Style     */
/*          dialogue.                              */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 27-Jan-97: Created.                    */
/*          25-Aug-97: Definitions imported from   */
/*                     TBEvents.h.                 */
/***************************************************/
d72 15
a86 15
#define Browser_Printer_Colour             1 << 0
#define Browser_Printer_LimitedColours     1 << 1
#define Browser_Printer_DiscreteColours    1 << 2
#define Browser_Printer_OutlinesOnly       1 << 8
#define Browser_Printer_ThinLinesOnly      1 << 9
#define Browser_Printer_NoOverwriting      1 << 10
#define Browser_Printer_TransformsSprites  1 << 11
#define Browser_Printer_TransformsFonts    1 << 12
#define Browser_Printer_PreScansRectangles 1 << 13
#define Browser_Printer_ScreenDumps        1 << 24
#define Browser_Printer_TransformsPages    1 << 25
#define Browser_Printer_InsertIllustration 1 << 26
#define Browser_Printer_MiscOp             1 << 27
#define Browser_Printer_SetDriver          1 << 28
#define Browser_Printer_DeclareFont        1 << 29
d94 10
a103 1
#define PrintSplitFraction 150
@


1.6
log
@Intermediate check-in; building a browser from this gives you something
between 2.07 and 2.08. Only the Phoenix JavaScript resources are fully
up to date.

I *think* these are the changes since the last check-in:

When saved as a Draw file, horizontal rules were plotted one page width
too far to the right (wonder when that started happening?!). Fixed. In
addition, DrawFiles now accepted as OBJECTs - they weren't in the
recognised filetype list before. Doh.

Table size calculator tables_count_table would overestimate the number
of cells where ROWSPAN was present and there were other rows below the
one spanned. Fixed. In certain odd cases (e.g. optimised image exports
as HTML tables (!!) from the Gimp) this can save vast amounts of RAM.

Fixed problem where printing stops in the middle of a document. Redraw
engine pagination code was written in the days where lines couldn't
have gaps between them; they can now. If a gap fell at the bottom of
a page the engine would look down, see no line straddling or touching
the page edge, and assume there was nothing more. This case is now
correctly handled.

Made sure desktop and testbed Browse Res files had up-to-date Encoding
menus (v2.07 Phoenix has different menus from v2.07 Browse by oversight).

URL auto-completion piggy-backed onto manual completion code; any string
without '.', '/' or ':' in it gets run through completion to see if a
more meaningful item can be produced - "www" special cased out though.

New List dialogue box handler, used for proxy exclusions etc.
(incomplete), complete with appropriate Res file objects.
@
text
@d86 3
a88 3
/* If a line is more than a (1/PrintSplitFraction)th */
/* of the page height, it will always be forced to   */
/* split over the page boundary.                     */
d90 1
a90 1
#define PrintSplitFraction 2
@


1.5
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d90 1
a90 1
#define PrintSplitFraction 4
@


1.4
log
@First a minor warning - the various Res files are out of sync in this build.
Only the Browse resources are currently valid.

Added Utils.Icons - has a few archives inside containing the resources
(well, some of them) used to build various UI sprites for various builds.
Archived because these are unlikely to change much, and putting them on
CVS was a move to, well, archive the stuff...

SaveDBox objects vanquished and requirements in !Run[D] files removed. The
data save code fits much more neatly in amongst the data load protocol
stuff now (with the slight exception of having to split the SaveObject
source into SaveObject and SaveFile - the former handles multiple persistent
dialogues for Shift+Click on links and the like, the latter handles 'one at
a time' transient dialogues for save source and similar). Export Link is now
supported, too, and writes a 'proper' version URI file. You'll find that
double-clicking on old URI files will work as the URI handler picks them up,
whilst new version ones don't; however, dragging onto the browser will only
work with new version files. Note that support for saving and loading URL
files (ANT suite stuff) is present too, so old URI files can be typed as URL
files if you want to keep them working without modification - the URI
handler itself will hopefully support the defined URI file format soon;
double-clicking on old URI files will stop working at that point. Note
there are *lots* of changes in every Res file to support all this. This may
all seem a bit pointless to some, but the changes do in fact make it very
easy to add new save dialogues all over the place. Certainly much easier
than with the previous system, anyway. In fact, post script, image
'save as sprite' took about half an hour, which I hope proves the worth
of the new system.

Merged in newer hotlist code with support for drag cancelling with Escape
(all relevant Res files appropriately updated) and cancelling scrolling
when you've reached the window scroll limit. Had to move some of the
Wimp message handling stuff to the central Protocols source, as clashes
were occuring, and also the hotlist routines were using independent saving
code - a lot of duplicated effort. This was fair enough as at the time the
Hotlist code was written, the Save code couldn't be used in the way it is
now.

New Save Source and Print buttons on the toolbar of some builds.

Phoenix Sprites file made more efficient - the Acorn base section has been
split from the animated upper region. Browse build has a new grey fade
sprite at the back, which is less grainy than the previous one and only
uses 16 colours (with a 16 greyscale palette).

Not really a bug, bug the routine to start an image fetch for INPUT
TYPE=IMAGE forms items only did so if the src field (or equivalent, for
this tag type) was non-NULL. In fact, you should always call image_new_image
and let that handle the rest, otherwise other sections of the code will fail
as they try to obtain an image number for a given HStream and get -1 back.
This problem only generally manifested itself when loading an HTML file to
the browser straight from an application, as many src fields become NULL
when the relativisation routines find nothing to relativise to...

Authentication got broken somewhere along the line - this has been fixed
(in HTMLLib and the browser).

Ctrl+Click on a cross referenced image updates *all* copies, not just the
one with the image data attached.

Next big step: Rip up TBEvents.h and rebuild that whole approach somewhat.
To all those working on the code, my apologies but this means all Res files
will receive a very large number of alterations and there will be extensive
code changes too (mostly naming convention stuff), in more or less all
source files. I am endeavouring to ensure that the new numberspace
convention does not clash with the work being done by Kevin on
internationalisation.
@
text
@d32 1
a32 1
/* Dialogue definitions */
d34 22
a55 18
#define StartWhole         0x4101
#define StartVisible       0x4102
#define EndWhole           0x4104
#define EndVisible         0x4105
#define EndMany            0x4107
#define EndManyNum         0x4108
#define EndManyLabel       0x4109
#define ReformToFit        0x410c
#define OriUpright         0x410a
#define OriSideways        0x410b
#define CopiesNum          0x410e
#define OpenPrintStyle     0x410f

#define EEnableReformat    0x4100 /* When activating radios that may enable or disable the */
                                  /* Reformat option in the Print dialogue box.            */
#define ECancelPrint       0x4101 /* If using non-standard buttons in the PrintSetup       */
                                  /* dialogue, the Cancel equivalent must send this event. */
#define EStartPrint        0x4102 /* Similarly, a Print equivalent must send this event.   */
d59 6
a64 6
#define Browser_Message_PrintFile      0x80140
#define Browser_Message_WillPrint      0x80141
#define Browser_Message_PrintSave      0x80142
#define Browser_Message_PrintError     0x80144
#define Browser_Message_PrintTypeOdd   0x80145
#define Browser_Message_PrintTypeKnown 0x80146
d90 1
a90 1
#define PrintSplitFraction 8
@


1.3
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d90 2
@


1.2
log
@Odd problem with Entries file meant none got checked in last time...
@
text
@d20 5
d28 2
d32 21
a61 8
/* (RAM transfer not supported in this version of the code) */

#define Browser_Message_DataSave       0x00001
#define Browser_Message_DataSaveAck    0x00002
#define Browser_Message_DataLoad       0x00003
#define Browser_Message_DataLoadAck    0x00004
#define Browser_Message_DataOpen       0x00005

d80 8
d90 7
a96 6
int               print_initiate       (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int               print_to_be_shown    (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int               print_restore        (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
void              print_print          (const char * path);
_kernel_oserror * print_page           (browser_data * b, int copies, int from, int to, int reformat, int orientation, const char * path);
void              print_abort_print    (void);
d98 1
a98 1
int               print_check_contents (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d17 3
a19 1
/* Purpose: Printing functions for the browser     */
d21 2
a22 1
/* History: 27-Jan-97: Created                     */
@
