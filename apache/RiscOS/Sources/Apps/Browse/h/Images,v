head	1.18;
access;
symbols
	Browse-2_16:1.18
	Browse-2_15:1.18
	Browse-2_14:1.18
	Browse-2_13:1.18
	Browse-2_12:1.18
	Browse-2_11:1.17
	Browse-2_10:1.17
	Browse-2_09:1.17
	ahodgkin_208_i4_2:1.17
	ahodgkin_208_i4:1.16
	ahodgkin_208_i3:1.16
	ahodgkin_208_i2:1.16
	ahodgkin_208_i1:1.16
	ahodgkin_207release:1.16
	ahodgkin_206release:1.14
	ahodgkin_205release:1.14
	ahodgkin_204release:1.14
	ahodgkin_202release:1.14
	ahodgkin_201release:1.13
	ahodgkin_200release:1.13
	ahodgkin_133beta:1.13
	ahodgkin_132beta:1.13
	ahodgkin_131beta:1.12
	ahodgkin_130beta:1.12
	ahodgkin_129:1.11
	ahodgkin_128beta:1.10
	ahodgkin_128alpha:1.10
	ahodgkin_127beta2:1.9
	ahodgkin_127beta:1.9
	ahodgkin_126beta:1.8
	ahodgkin_AW97patch:1.8
	ahodgkin_AW97:1.8;
locks; strict;
comment	@# @;


1.18
date	2006.03.13.22.06.20;	author ahodgkin;	state Exp;
branches;
next	1.17;

1.17
date	2000.05.31.15.58.55;	author ahodgkin;	state Exp;
branches;
next	1.16;

1.16
date	98.10.06.09.29.00;	author ahodgkin;	state Exp;
branches;
next	1.15;

1.15
date	98.09.23.13.18.20;	author ahodgkin;	state Exp;
branches;
next	1.14;

1.14
date	98.03.20.12.13.09;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	98.02.06.13.55.38;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	97.12.18.10.07.15;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	97.12.12.11.18.11;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	97.12.02.16.14.14;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	97.11.19.10.29.22;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.10.07.13.52.03;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.09.12.17.19.37;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.09.09.14.13.26;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.08.28.16.08.15;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.08.18.10.00.15;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.08.05.08.43.01;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.07.24.16.12.13;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.29.39;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.18
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Images.h                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Image related functions.                          */
/*                                                            */
/* Author:  A.D.Hodgkinson, including various functions from  */
/*          original Customer browser by Merlyn Kline.       */
/*                                                            */
/* History: 28-Nov-1996 (ADH): Created with dummy function    */
/*                             for temporary use in other     */
/*                             routines.                      */
/*          20-Jan-1997 (ADH): Filled in with most of the     */
/*                             functions present and          */
/*                             converted to the new data      */
/*                             structures where needed.       */
/*          15-Mar-1997 (ADH): Reorganised a bit, putting     */
/*                             functions in a more logical    */
/*                             order to aid legibility.       */
/*          17-Dec-1997 (ADH): Added support for saving as a  */
/*                             Draw file.                     */
/*          10-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_Images__
  #define Browser_Images__

  #include <time.h>
  #include <kernel.h>
  #include <tboxlibs/wimp.h>
  #include <tboxlibs/toolbox.h>
  #include <HTMLLib/HTMLLib.h>
  #include <ImageLib/imagetrans.h>

  #include "Global.h"

  /* Size reported for an image or Object if it's data isn't */
  /* present and no other size information can be found      */

  #define ImageDefaultOSSize_X 48
  #define ImageDefaultOSSize_Y 48

  /* The image_flex structure is used to hold flex anchors. It is  */
  /* attached to image_info (below) in a small malloc block; since */
  /* image_info structs are held in a flex area they cannot hold   */
  /* the flex anchors directly.                                    */

  typedef struct image_flex
  {
    char * urldata;
    void * fetchdata;
  }
  image_flex;

  /* The image_info structure is used for the image handling code, */
  /* where each image has associated data about its size, fetch    */
  /* status and so-on.                                             */

  typedef struct image_info
  {
    unsigned int          handle;         /* URL fetch handle for this image                              */
    Image               * istore;         /* Imagetrans pointer                                           */
    browser_data        * owner;          /* Owner of this structure                                      */

    unsigned int          unique_id;      /* Monotonically rising value used to ID images with no token   */

    int                   x;              /* X position on the page for the owner                         */
    int                   y;              /* Y position on the page for the owner                         */

    image_flex          * flex;           /* For URL data, fetch data etc.                                */
    HStream             * token;          /* Token this image appears in - may be NULL (pending GC)       */
    time_t                last_used;      /* Time when the image was last used (for GC purposes)          */

    int                   currw;          /* Current width of image                                       */
    int                   currh;          /* Current height of image                                      */

    int                   xref;           /* Cross-reference to image record with same url                */

    int                   bytesgot;       /* Total bytes fetched for this image so far                    */

    unsigned int          deleted     :1; /* Image is marked as deleted (so remove it from array ASAP!)   */

    unsigned int          started     :1; /* The fetch has started to happen                              */
    unsigned int          fetched     :1; /* Flag indicating the image is fetched                         */
    unsigned int          delayed     :1; /* Flag indicating the image is delayed (by delayimages option) */
    unsigned int          success     :1; /* This image completed fetching without errors                 */

    unsigned int          fixedsize   :1; /* The size has been fixed in the HTML                          */
    unsigned int          background  :1; /* The image is being used as a page background                 */

    unsigned int          hadfirst    :1; /* 1 = image has had image_update_image called for it           */
    unsigned int          reformat    :1; /* 1 = should reformat on next image update if fixedsize = 0    */
    unsigned int          fromhistory :1; /* 1 = image size came from image history rather than HTML      */
    unsigned int          hadfiller   :1; /* 1 = image has had RegisterFiller called for it               */
    unsigned int          canredraw   :1; /* 1 = image may be redrawn, else is waiting for a reformat     */
    unsigned int          priority    :1; /* 1 = show the image regardless of any global settings         */

    unsigned int          from_js     :1; /* 1 = image was created for JavaScript (don't GC it!)          */

  } image_info;

  /* Function prototypes */

  _kernel_oserror * image_new_image                    (browser_data * b, const char * url, HStream * token, int background, int * handle);
  void              image_abort_fetches                (browser_data * b);
  _kernel_oserror * image_process_null                 (browser_data * b);

  _kernel_oserror * image_discard                      (browser_data * b);
  _kernel_oserror * image_gc                           (browser_data * b, unsigned int uid, int remove_js_too);
  _kernel_oserror * image_gc_js                        (browser_data * b);
  _kernel_oserror * image_maybe_gc                     (browser_data * b);

  void              image_reload                       (browser_data * b, HStream * token);
  void              image_delay_fetches                (browser_data * b);
  void              image_restart_fetches              (browser_data * b, int foreground, int background);

  int               image_animate_images               (int eventcode, WimpPollBlock * block, IdBlock * idb, browser_data * handle);
  _kernel_oserror * image_fill_background              (void * handle, int * i);

  _kernel_oserror * image_redraw_primitive             (const browser_data * restrict b, const unsigned int image, int x, int y, unsigned int width, unsigned int height);
  _kernel_oserror * image_redraw                       (browser_data * restrict b, const HStream * restrict token, int x, int y, const BBox * restrict gfxwin);
  int               image_tile_window                  (const browser_data * restrict b, const WimpRedrawWindowBlock * restrict r, int xorigin, int yorigin);
  void              image_mark_as_redrawable           (browser_data * b, int image);
  void              image_token_reformatted            (browser_data * b, HStream * token);

  _kernel_oserror * image_mode_change                  (void);

  int               image_parent                       (int image);
  int               image_fetching                     (browser_data * b);
  int               image_fetched                      (browser_data * b, int image);
  int               image_token_fetched                (browser_data * b, HStream * token);
  int               image_total_bytes_fetched          (browser_data * b);
  int               image_count_pending                (browser_data * b);
  int               image_count_specific_pending       (browser_data * b);
  int               image_count_delayed                (browser_data * b);
  int               image_plot_started                 (browser_data * b, int image);
  int               image_token_plot_started           (browser_data * b, HStream * token);

  void              image_lock_token_image_size        (browser_data * b, HStream * token);
  void              image_unlock_token_image_size      (browser_data * b, HStream * token);
  _kernel_oserror * image_get_token_image_size         (browser_data * restrict b, const HStream * restrict token, BBox * restrict box);
  _kernel_oserror * image_set_token_image_size         (browser_data * b, HStream * token, BBox * box);
  void              image_get_token_actual_size        (browser_data * b, HStream * token, int * w, int * h);
  _kernel_oserror * image_get_back_image_size          (browser_data * b, BBox * box);
  int               image_get_token_image_position     (const browser_data * restrict b, const HStream * restrict t, int * restrict x, int * restrict y);
  int               image_set_token_image_position     (const browser_data * restrict b, const HStream * restrict t, int x, int y);
  void              image_get_background_image_url     (browser_data * b, char * buffer, int size);

  void              image_convert_to_pixels            (browser_data * b, HStream * token, int * x, int * y);
  _kernel_oserror * image_return_click_offset          (browser_data * b, HStream * t, WimpGetPointerInfoBlock * i, int * x, int * y);

  int               image_token_can_be_saved_as_sprite (browser_data * b, HStream * image);
  _kernel_oserror * image_export_sprite                (char * path, browser_data * b, HStream * image);
  int               image_sprite_size                  (browser_data * b, HStream * image);
  _kernel_oserror * image_export_original              (char * path, browser_data * b, HStream * image);

  _kernel_oserror * image_to_draw_file
                    (
                      const browser_data * restrict b,
                      FILE               * restrict f,
                      int                           image,
                      unsigned int                  width,
                      unsigned int                  height,
                      size_t             * restrict r_size
                    );

  _kernel_oserror * image_draw_to_pdf
                    (
                      const browser_data * restrict b,
                      const unsigned int            image,
                      int                           x,
                      int                           y,
                      unsigned int                  width,
                      unsigned int                  height,
                      int                * restrict ok,

                      size_t             * restrict r_size
                    );

  _kernel_oserror * image_send_to_pdf
                    (
                      const browser_data * restrict b,
                      int                           image,
                      size_t             * restrict r_size
                    );

#endif /* Browser_Images__ */
@


1.17
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d135 3
a137 2
  _kernel_oserror * image_redraw                       (browser_data * b, WimpRedrawWindowBlock * r, HStream * token, int x, int y);
  int               image_tile_window                  (browser_data * b, WimpRedrawWindowBlock * r, int xorigin, int yorigin);
d143 1
d156 1
a156 1
  _kernel_oserror * image_get_token_image_size         (browser_data * b, HStream * token, BBox * box);
d160 2
a161 2
  int               image_get_token_image_position     (browser_data * b, HStream * t, int * x, int * y);
  int               image_set_token_image_position     (browser_data * b, HStream * t, int x, int y);
d167 1
a170 5
  int               image_original_size                (browser_data * b, HStream * image);

  int               image_to_draw_file                 (browser_data * b, WimpRedrawWindowBlock * r, HStream * token, int x, int y, int dont_create);
  int               image_draw_file_size               (browser_data * b, HStream * token, int dont_delete);
  int               image_tile_to_draw                 (browser_data * b, WimpRedrawWindowBlock * r, int xorigin, int yorigin, int * size);
d172 29
a200 1
  int               image_token_can_be_saved_as_sprite (browser_data * b, HStream * image);
@


1.16
log
@Another intermediate version, rather more stable than the last I hope.

Lazy clearing of backgrounds - pages with the same background image or
colour won't be cleared to grey when going from one to the next anymore.

BODY element onLoad script attribute implemented properly (beyond the
Customer hackery).

Images use independent flex blocks for URL and transient fetch data;
greatly improved data throughput in image system as a result. Image
renumbering implemented - speeds up closing of pages / frames with
many images. Image xref is still rather slow though and images with
a 0 width or height specified in the HTML still cause an incorrectly
formatted page to appear.

Have, I think, fixed the "stops anti-aliasing" bug. Noticed that some
background images are not being processed as Fast (e.g. at the
Fibblesnork Lego Guide) - that old problem has reappeared, then.

Background images would cross reference when two pages had the same
background colour set in <body> elements but one was configured to use
document colours and one wasn't (so xref should not occur). Code was
looking at b->background_colour; corrected to call redraw_backcol(b).

Titles were added to the history according to the fetch URL not the
display URL, though the former is more likely to be in the history due
to the code execution order in the fetcher; changed to see whether this
improves upon the rather hit and miss addition of titles.

The 'about:' page now gets entered into the history (makes for much more
sensible behaviour if it is configured as a Home page, for example).
@
text
@d15 158
a172 147
/***************************************************/
/* File   : Images.h                               */
/*                                                 */
/* Purpose: Image related functions.               */
/*                                                 */
/* Author : Merlyn Kline for Customer browser     */
/*          This source adapted by A.D.Hodgkinson  */
/*                                                 */
/* History: 28-Nov-96: Created with dummy function */
/*                     for temporary use in other  */
/*                     routines.                   */
/*          20-Jan-97: Filled in with most of the  */
/*                     functions present and       */
/*                     converted to the new data   */
/*                     structures where needed.    */
/*          15-Mar-97: Reorganised a bit, putting  */
/*                     functions in a more logical */
/*                     order to aid legibility.    */
/*          17-Dec-97: Added support for saving as */
/*                     a Draw file.                */
/***************************************************/

#include <time.h>

/* Size reported for an image or Object if it's data isn't */
/* present and no other size information can be found      */

#define ImageDefaultOSSize_X 48
#define ImageDefaultOSSize_Y 48

/* The image_flex structure is used to hold flex anchors. It is  */
/* attached to image_info (below) in a small malloc block; since */
/* image_info structs are held in a flex area they cannot hold   */
/* the flex anchors directly.                                    */

typedef struct image_flex
{
  char * urldata;
  void * fetchdata;
}
image_flex;

/* The image_info structure is used for the image handling code, */
/* where each image has associated data about its size, fetch    */
/* status and so-on.                                             */

struct browser_data;

typedef struct image_info
{
  unsigned int          handle;         /* URL fetch handle for this image                              */
  Image               * istore;         /* Imagetrans pointer                                           */
  browser_data        * owner;          /* Owner of this structure                                      */

  unsigned int          unique_id;      /* Monotonically rising value used to ID images with no token   */

  int                   x;              /* X position on the page for the owner                         */
  int                   y;              /* Y position on the page for the owner                         */

  image_flex          * flex;           /* For URL data, fetch data etc.                                */
  HStream             * token;          /* Token this image appears in - may be NULL (pending GC)       */
  time_t                last_used;      /* Time when the image was last used (for GC purposes)          */

  int                   currw;          /* Current width of image                                       */
  int                   currh;          /* Current height of image                                      */

  int                   xref;           /* Cross-reference to image record with same url                */

  int                   bytesgot;       /* Total bytes fetched for this image so far                    */

  unsigned int          deleted     :1; /* Image is marked as deleted (so remove it from array ASAP!)   */

  unsigned int          started     :1; /* The fetch has started to happen                              */
  unsigned int          fetched     :1; /* Flag indicating the image is fetched                         */
  unsigned int          delayed     :1; /* Flag indicating the image is delayed (by delayimages option) */
  unsigned int          success     :1; /* This image completed fetching without errors                 */

  unsigned int          fixedsize   :1; /* The size has been fixed in the HTML                          */
  unsigned int          background  :1; /* The image is being used as a page background                 */

  unsigned int          hadfirst    :1; /* 1 = image has had image_update_image called for it           */
  unsigned int          reformat    :1; /* 1 = should reformat on next image update if fixedsize = 0    */
  unsigned int          fromhistory :1; /* 1 = image size came from image history rather than HTML      */
  unsigned int          hadfiller   :1; /* 1 = image has had RegisterFiller called for it               */
  unsigned int          canredraw   :1; /* 1 = image may be redrawn, else is waiting for a reformat     */
  unsigned int          priority    :1; /* 1 = show the image regardless of any global settings         */

  unsigned int          from_js     :1; /* 1 = image was created for JavaScript (don't GC it!)          */

} image_info;

/* Function prototypes */

_kernel_oserror * image_new_image                    (browser_data * b, const char * url, HStream * token, int background, int * handle);
void              image_abort_fetches                (browser_data * b);
_kernel_oserror * image_process_null                 (browser_data * b);

_kernel_oserror * image_discard                      (browser_data * b);
_kernel_oserror * image_gc                           (browser_data * b, unsigned int uid, int remove_js_too);
_kernel_oserror * image_gc_js                        (browser_data * b);
_kernel_oserror * image_maybe_gc                     (browser_data * b);

void              image_reload                       (browser_data * b, HStream * token);
void              image_delay_fetches                (browser_data * b);
void              image_restart_fetches              (browser_data * b, int foreground, int background);

int               image_animate_images               (int eventcode, WimpPollBlock * block, IdBlock * idb, browser_data * handle);
_kernel_oserror * image_fill_background              (void * handle, int * i);

_kernel_oserror * image_redraw                       (browser_data * b, WimpRedrawWindowBlock * r, HStream * token, int x, int y);
int               image_tile_window                  (browser_data * b, WimpRedrawWindowBlock * r, int xorigin, int yorigin);
void              image_mark_as_redrawable           (browser_data * b, int image);
void              image_token_reformatted            (browser_data * b, HStream * token);

_kernel_oserror * image_mode_change                  (void);

int               image_fetching                     (browser_data * b);
int               image_fetched                      (browser_data * b, int image);
int               image_token_fetched                (browser_data * b, HStream * token);
int               image_total_bytes_fetched          (browser_data * b);
int               image_count_pending                (browser_data * b);
int               image_count_specific_pending       (browser_data * b);
int               image_count_delayed                (browser_data * b);
int               image_plot_started                 (browser_data * b, int image);
int               image_token_plot_started           (browser_data * b, HStream * token);

void              image_lock_token_image_size        (browser_data * b, HStream * token);
void              image_unlock_token_image_size      (browser_data * b, HStream * token);
_kernel_oserror * image_get_token_image_size         (browser_data * b, HStream * token, BBox * box);
_kernel_oserror * image_set_token_image_size         (browser_data * b, HStream * token, BBox * box);
void              image_get_token_actual_size        (browser_data * b, HStream * token, int * w, int * h);
_kernel_oserror * image_get_back_image_size          (browser_data * b, BBox * box);
int               image_get_token_image_position     (browser_data * b, HStream * t, int * x, int * y);
int               image_set_token_image_position     (browser_data * b, HStream * t, int x, int y);
void              image_get_background_image_url     (browser_data * b, char * buffer, int size);

void              image_convert_to_pixels            (browser_data * b, HStream * token, int * x, int * y);
_kernel_oserror * image_return_click_offset          (browser_data * b, HStream * t, WimpGetPointerInfoBlock * i, int * x, int * y);

_kernel_oserror * image_export_sprite                (char * path, browser_data * b, HStream * image);
int               image_sprite_size                  (browser_data * b, HStream * image);
_kernel_oserror * image_export_original              (char * path, browser_data * b, HStream * image);
int               image_original_size                (browser_data * b, HStream * image);

int               image_to_draw_file                 (browser_data * b, WimpRedrawWindowBlock * r, HStream * token, int x, int y, int dont_create);
int               image_draw_file_size               (browser_data * b, HStream * token, int dont_delete);
int               image_tile_to_draw                 (browser_data * b, WimpRedrawWindowBlock * r, int xorigin, int yorigin, int * size);
d174 3
a176 1
int               image_token_can_be_saved_as_sprite (browser_data * b, HStream * image);
@


1.15
log
@Another intermediate check-in, resources may not be up to date; items
most likely to be buildable are PhoenixJ and BrowseD. Done because I'm
about to make some rather dodgy changes to code otherwise unchanged
since the Customer browser and I may well have to back them out...

In Handlers.c now set the HFlags_HasBeenVisited bit of a token at the point
it is first clicked on. Means the link returns to a "visited" colour after
the highlight flash immediately. This will persist for as long as the browser
window is kept open on that page, though if the URL doesn't end up making it
into the history for whatever reason it would "unhighlight" on reload; fair
enough, really. The highlight is window-local, so there are no redraw worries
for other open windows with links to the same URL (though other same-URL
links on the same page aren't updated either).

All forms submissions force a reload (principally for eudoramail.com, but
many other sites have similar requirements).

!MkClean and !MkClnAll didn't correctly call the utility to strip Makefile
dependencies. Fixed.

On fetch closedown, fetchpage_preprocess_token could be called on a token
which had already been run through the preprocessor. Now checks the flags
word before proceeding.

Image RAM cache and garbage collection system implemented - see new Choices
file entries CollectAfter, FreeRAMLimit and UnusedImageLimit to get an
overview. This contains groundwork for JavaScript image array support.

More JavaScript support improvements. Any one window object will know its
parent, top, this, etc.; frames array working except for a frameset created
via. multiple documents; opener for something created with window.open is
currently not set and don't know why (property is being created, pointer to
valid object is held, but JS engine returns 'null'. Ho hum) - JSChain won't
work yet, then.
@
text
@d45 12
d74 1
a74 4
  int                   dataoffset;     /* Offset of image data within image data block                 */
  int                   alloc;          /* Total space allocated in flex block                          */
  int                   ualloc;         /* Space allocated to url in flex block                         */
  int                   isize;          /* Size of image storage used                                   */
d84 2
@


1.14
log
@Programming warehouse link removed from all hotlists - the page has gone.

Some compile-time hacks in place to use MemLib, a dynamic area based
malloc replacement which shrinks its heap when possible. All builds
have these switched off at the moment. Seemed to work with just Browse,
though there would be problems with message blocks stored in dynamic
areas because of the Wimp's '&3800000' check - however, it failed when
HTMLLib was made to use it, too. Don't know why yet.

ItemInfo.[c/h] source added, with Res file additions for testbed Browse
and Phoenix.

Small fetch windows now work properly regardless of toolbar settings
in the Choices.

Reload now reloads all images too, rather than only reloading them for
as long as the main page was being fetched.

Added a simple 'Find' facility.

Realised that event handlers in eventlib are called in reverse order
of registration, so the miscellaneous event handler is now registered
first rather than last.

Multiuser code added (most only active if SINGLE_USER is undefined). As
part of this, hotlist code now knows about read-only items (done for the
Customer-style 'Resources' file, but works generally anyway).
handle_add_hotlist doesn't try to save the hotlist itself anymore (the
hotlist_add function does all that through hotlist_modified anyway).

Customer build Choices and Controls updated slightly (e.g. ClaimHelp
off, hotlist to save on quit only).

Customer build now uses Phoenix-style buttons. Sprites files which
worked at the time (but will probably be out of date now) and included
most of the original Customer-style sprites are in
'Utils.Icons.Customer'.

Choices, Messages and Res files for all builds now stripped down to only
single user items or single plus multiuser for Customer build and testbed
build. Before, all contained a few multiuser bits in at least the Choices
file if not more.

Grammatical error ("Fetching frames contents" (sic.)) corrected in
default message, Toolbars.c, and all of the Messages files.

Customer build brought back to a servicable level (including
implementation of the Find dialogue box with animation and fixing
up authorisation and 'Stop' state in the tristate). Quite a few
missing #ifndef REMOTE_HOTLIST bits from hotlist code added...

Customer build will not use <Choices$Write> or Boot:Choices for any
file finding now. UseProxy defaults to 'yes', MaxImages to 2. Res
file includes Proxy Address setting (save_save_choices() now writes
the ProxyAddress line).
@
text
@d37 2
d57 2
d66 2
a67 1
  HStream             * token;          /* Token this image appears in                                  */
d91 2
d97 1
a97 1
_kernel_oserror * image_new_image                    (browser_data * b, const char * url, HStream * token, int background);
d100 1
d102 4
@


1.13
log
@*Don't* try to load FilterManager 0.18 in !Run[D] files. Requires
WindowManager 3.98. Sets URI handler environment variables for
http, ftp and gopher.

Fixed 'doesn't reformat for unsized images' bug - only happens when the
deferred reformatter is enabled, hadn't remembered to check this in my
debug build where this is turned off. Oops.

Caret position in forms could get left behind despite attempts to rectify
this in v1.31 - now fixed (and faster, fortunately).

Hourglass + percentage displayed for History and Image History when
loading - it can take a while for very big histories, though in
practice you only see the visit history loading (has to do a lot
more work, and is thus quite a bit slower than the image history).

POST forms worked when targetted to frames, but were broken when
not targetted! (Forms data inherited from one browser to the same
browser; ended up freeing the flex block...). Fixed.

Now support 303 response code (redirect to GET). Treated as 301, i.e.
not support if STRICT_PARSER is defined, otherwise drops through to
the 302 handling code.

Pointer shouldn't get stuck in odd shapes when going to a new page now;
it gets reset to a standard shape every time the null handler that
checks the position is called, though (whether or not the handler thinks
the pointer is over a different token, if that token is NULL, it sets
the standard shape). A possible work around would be for a browser to
remember the pointer shape too; that's for the future, though.

Early stage table formatting functions could blow themselves apart if
tables_count_table decided there were no rows, columns or both. A
net table size of zero cells is now dealt with; slow, partial table
fetches in multiple windows with image loading turned on will now
*hopefully* be stable, where v1.31 would have bombed out repeatedly.

A nested frameset within one document will now inherit the border
width (frame spacing) and border colour of its parent. This is done
by copying the maxlen and indent fields of the parent token over
the child, and note it's done in the browser (fetch_preprocess_token),
not HTMLLib.

Border colour on a FRAMESET now used, with the first colour on any
FRAME within it overriding, as in NN 4 and MSIE 4.

<LI> bullets really do stick to the text next to them now (I'd done
that in an experimental piece of code and forgotten to merge it back
before the last check-in).

Browse$HotlistURL/URIFile and Browse$HomeURL/URIFile now work from
_TaskName in the Messages file, and are thus of the generic form
<App>$HotlistURL etc. - Docs.Notes and Docs.User updated appropriately.

Event 0x11d00 through to 0x11d7f will make the browser look up Controls
file entries 'JumpTo00' through to 'JumpTo7f' and read a URL from them.
This will be fetched in the ancestor window of the source of the event,
or a new window if such an ancestor can't be found [for Daytona demo].

NB: Nasty frames-related crash at http://www.teledanmark.dk/menu/start.htm
is *not* fixed in this source. NOBR is not supported.
@
text
@d122 1
@


1.12
log
@Not all resources are up to date in this check-in, and documentation
both within source and stuff in 'Docs' is out of date or missing - I
was very pushed for time on this one... Hopefully will do another
'tidy up' check-in before close on Friday; until then, beware of
anything other than the Ursula (Desktop browser) build. Anyway...

Export As Draw done. As part of this, FONT SIZE and SUP / SUB adjustment
of font size is done in fm_token_font_info rather than fm_find_token_font.

Bullets and switches are plotted as indirected sprite items, rather than
indirected text + sprite items - this relied on being in a redraw loop to
pick the sprites up from the local pool (failed during printing).

URI files now have a LF line ending rather than CR... '*' recognised
as an empty field when loading via. RAM transfer now (only worked for
loading from disc before).

Gave placeholder bounding boxes 4 OS units more minimum extra gap
vertically and reduced horizontal addition to this value * 1.5, rather
than * 2 (see reformat_get_placeholder_size).

Background image tiling starts at ymax - h + 4, rather than ymax, so
there isn't the bottom line of pixels from the top tile always present
at the top of the window. The '+4' is for caution's sake.

Can now save a frame's HTML source, that of its parent or its ancestor,
and the same for the URI pointing to those documents - see Menus.h for
the relevant component IDs that should lead to the SaveFile dialogue.

Have hopefully fixed timeout = 0 values (i.e. 'forever') on things
like LinkTo; before, image fetches could override the state (so you'd
only ever see brief flickers of a given URL as the pointer went over
a link).

Save File dialogue will remember the state of option or radio buttons
for a given parent component origin and restore that state when the
dialogue is next opened from the same place (stops turning on saving
as a URL file also turning on 'save background images' for Draw file
export, etc.).

Use of a META tag to reload the *same* page now sets the 'reloading'
flag in the browser so that it doesn't go through a proxy - otherwise
pages which are meant to update periodically through client pull
don't work, as they keep coming out of the cache.

Can now handle images specifying just a width or height in the HTML
(other dimension is scaled accordingly, but note that the placeholder
size must still be 'dumb' until the image data comes in). An image
will now override an image history size entry for the same entry
with a different size.
@
text
@d104 1
a104 1
void              image_token_check_redrawable       (browser_data * b, HStream * token);
d118 2
@


1.11
log
@There are a few known significant problems with this code but it's being
checked in so the Choices can be worked on. Note that Res files etc. are
not up to date across all builds. Progress is as follows...

Bug report prompted me to do this - now ignore <p> tags straight after
<li> tags, so '<ul><li><p>Some text' works as the author (or automatic
generator, more commonly) intended.

A <p> tag before a table will be acted upon now (it was ignored before).
Something like <li><p><table...> will give a line break and paragraph
space after the <li> despite the changes mentioned above, as in other browsers.
Both browsers differ from Navigator, where the table appears alongside
the <li> tag.

Multiple BR tags work as in MSIE / Navigator (they don't collapse to
zero height anymore).

For the above, line height (and so, <br><br> or <p> spacing) is now
calculated inside reformat_text_line_height, and is used with either
a token to get the text height at a given size (e.g. for general line
spacing or multiple BR tags) or NULL for normal size text (e.g. for
P spacing, though this value is in practice later scaled by 7/8ths in
reformat_check_height). Note this behaviour is exhibited by MSIE 4;
v3 gave two BRs the same spacing as one P (i.e. not font size
dependent).

Save dialogues can have an option button or couple of radios to
switch between various formats (e.g. URI or URL, sprite or original
format). See 'Docs.Notes' for more. The back-end to this is now
implemented (i.e. at the moment, save as URI or URL, save as original
image format). Note that when saving background images, a leafname
based on the original fetch URL is now offered rather than a generic
'Background'.

Internal URL scheme changed to be all lower case, so relativisation
through URL_Fetcher still makes sense... :-/

Holding down 'shift' when clicking on stop reverses the interpretation
of the Controls file 'StopWebServe' entry.

Fixed row / column count for exporting tables as text; fixed a few
bits and pieces of internal URL scheme stuff which got broken when
HTMLLib started using URL_Fetcher's relativisation.
@
text
@d33 2
d80 2
d132 4
@


1.10
log
@Implemented Message_PlugIn_ReshapeRequest, Message_PlugIn_Status and
Message_PlugIn_Busy. Plug-in code more robust when given invalid
browser instance handles by the plug-in.

Line spacing is now calculated on the basis of the normal style base serif
font, with all other fonts being forced into that line height. This does
mean that an unusually tall (say) sans serif font may get clipped. It
appears to be the only way to get around wildly different baseline
depths returned from the font metrics - you can't work out line spacing
based on each different font style; the line spacing will vary.

Table heighting (as opposed to widthing...) improved considerably; rowspan
can no longer cause very tall cells in odd places. Having trouble getting
rid of the single pixel breaks between vertically adjacent cells, though
I've not tried too hard. Widthing, though, seems fairly badly broken at
present... :-/

Set/clear of page_is_text flag made more robust (it looked as though there
was the potential for this to get stuck in a set state, though I've never
see the front-end behave in a manner which indicates this is the case).
The reformatter will now decrease leading if this flag is set (plain text
pages look daft with a line spacing that is OK for 'rich' text pages).
No reformatting is done if the page width changes by dragging on the
resize icon, though toggle size / full screen will still reformat even
if the contents are only text (browser needs to sort out various width
flags at this point).

Cut down on excessive redrawing when reformatting due to a change in
window dimensions is not done. If display_width hasn't changed, then no
redraw is needed. If this causes redraw problems, then whatever is
changing display_width needs investigating. It shouldn't be kludged
(basically) by forcing a redraw instead of a reformat.

TT/PRE/etc. text can now have a non-100% aspect ratio. 80-90% looks
best (ArcWeb, for example, uses 86%). New option 'TTAspect' in
the Choices files.

Debug builds link to a non-debug Unicode library now; stops stderr
being dumped to the bottom left of the screen if you've not redirected
it in the Run file.

RISC OS 3.1 seems to need more initial WimpSlot than later OS versions.
The 64 deep nested table set gives a 'No stack for trap handler' error
(which it really means in this case!) without 800K, even though 3.71
is happy with just 640K. So, the !Run file checks if Boot$OSVersion
is exactly 300, 310 or 311, and sets the WimpSlot accordingly.

!Run[D] files now require latest fetcher module versions (URL 0.21,
File 0.31, HTTP 0.58).
@
text
@d119 1
d126 2
@


1.9
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d115 1
@


1.8
log
@Res files had component 0x29fc in frame gadgets for Choices - that's
meant to be the 'fake page' display. Sorted that out.

Got rid of unnecessary #define in Choices.h; the gadget autodetect
for the colour choices took its place.

Unsized objects now default to the same dimensions as unsized images.
@
text
@d78 1
@


1.7
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d35 2
a36 1
/* Size reported for an image if it's data isn't present and no other size information can be found */
@


1.6
log
@First a minor warning - the various Res files are out of sync in this build.
Only the Browse resources are currently valid.

Added Utils.Icons - has a few archives inside containing the resources
(well, some of them) used to build various UI sprites for various builds.
Archived because these are unlikely to change much, and putting them on
CVS was a move to, well, archive the stuff...

SaveDBox objects vanquished and requirements in !Run[D] files removed. The
data save code fits much more neatly in amongst the data load protocol
stuff now (with the slight exception of having to split the SaveObject
source into SaveObject and SaveFile - the former handles multiple persistent
dialogues for Shift+Click on links and the like, the latter handles 'one at
a time' transient dialogues for save source and similar). Export Link is now
supported, too, and writes a 'proper' version URI file. You'll find that
double-clicking on old URI files will work as the URI handler picks them up,
whilst new version ones don't; however, dragging onto the browser will only
work with new version files. Note that support for saving and loading URL
files (ANT suite stuff) is present too, so old URI files can be typed as URL
files if you want to keep them working without modification - the URI
handler itself will hopefully support the defined URI file format soon;
double-clicking on old URI files will stop working at that point. Note
there are *lots* of changes in every Res file to support all this. This may
all seem a bit pointless to some, but the changes do in fact make it very
easy to add new save dialogues all over the place. Certainly much easier
than with the previous system, anyway. In fact, post script, image
'save as sprite' took about half an hour, which I hope proves the worth
of the new system.

Merged in newer hotlist code with support for drag cancelling with Escape
(all relevant Res files appropriately updated) and cancelling scrolling
when you've reached the window scroll limit. Had to move some of the
Wimp message handling stuff to the central Protocols source, as clashes
were occuring, and also the hotlist routines were using independent saving
code - a lot of duplicated effort. This was fair enough as at the time the
Hotlist code was written, the Save code couldn't be used in the way it is
now.

New Save Source and Print buttons on the toolbar of some builds.

Phoenix Sprites file made more efficient - the Acorn base section has been
split from the animated upper region. Browse build has a new grey fade
sprite at the back, which is less grainy than the previous one and only
uses 16 colours (with a 16 greyscale palette).

Not really a bug, bug the routine to start an image fetch for INPUT
TYPE=IMAGE forms items only did so if the src field (or equivalent, for
this tag type) was non-NULL. In fact, you should always call image_new_image
and let that handle the rest, otherwise other sections of the code will fail
as they try to obtain an image number for a given HStream and get -1 back.
This problem only generally manifested itself when loading an HTML file to
the browser straight from an application, as many src fields become NULL
when the relativisation routines find nothing to relativise to...

Authentication got broken somewhere along the line - this has been fixed
(in HTMLLib and the browser).

Ctrl+Click on a cross referenced image updates *all* copies, not just the
one with the image data attached.

Next big step: Rip up TBEvents.h and rebuild that whole approach somewhat.
To all those working on the code, my apologies but this means all Res files
will receive a very large number of alterations and there will be extensive
code changes too (mostly naming convention stuff), in more or less all
source files. I am endeavouring to ensure that the new numberspace
convention does not clash with the work being done by Kevin on
internationalisation.
@
text
@d84 32
a115 32
_kernel_oserror * image_new_image                (browser_data * b, const char * url, HStream * token, int background);
void              image_abort_fetches            (browser_data * b);
_kernel_oserror * image_process_null             (browser_data * b);
_kernel_oserror * image_discard                  (browser_data * b);
void              image_reload                   (browser_data * b, HStream * token);
void              image_delay_fetches            (browser_data * b);
void              image_restart_fetches          (browser_data * b, int foreground, int background);

int               image_animate_images           (int eventcode, WimpPollBlock * block, IdBlock * idb, browser_data * handle);
_kernel_oserror * image_fill_background          (void * handle, int * i);

_kernel_oserror * image_redraw                   (browser_data * b, WimpRedrawWindowBlock * r, HStream * token, int x, int y);
int               image_tile_window              (browser_data * b, WimpRedrawWindowBlock * r, int xorigin, int yorigin);
void              image_mark_as_redrawable       (browser_data * b, int image);
void              image_token_check_redrawable   (browser_data * b, HStream * token);

_kernel_oserror * image_mode_change              (void);

int               image_fetching                 (browser_data * b);
int               image_fetched                  (browser_data * b, int image);
int               image_token_fetched            (browser_data * b, HStream * token);
int               image_total_bytes_fetched      (browser_data * b);
int               image_count_pending            (browser_data * b);
int               image_count_specific_pending   (browser_data * b);
int               image_count_delayed            (browser_data * b);
int               image_plot_started             (browser_data * b, int image);
int               image_token_plot_started       (browser_data * b, HStream * token);

_kernel_oserror * image_get_token_image_size     (browser_data * b, HStream * token, BBox * box);
_kernel_oserror * image_get_back_image_size      (browser_data * b, BBox * box);
int               image_get_token_image_position (browser_data * b, HStream * t, int * x, int * y);
int               image_set_token_image_position (browser_data * b, HStream * t, int x, int y);
d117 2
a118 2
void              image_convert_to_pixels        (browser_data * b, HStream * token, int * x, int * y);
_kernel_oserror * image_return_click_offset      (browser_data * b, HStream * t, WimpGetPointerInfoBlock * i, int * x, int * y);
d120 4
a123 2
_kernel_oserror * image_export_sprite            (char * path, browser_data * b, HStream * image);
int               image_sprite_size              (browser_data * b, HStream * image);
@


1.5
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d119 3
@


1.4
log
@Odd problem with Entries file meant none got checked in last time...
@
text
@d68 1
d72 1
d74 2
a75 2
  unsigned int          started     :1; /* The fetch has started to happen                              */
  unsigned int          priority    :1; /* 1 = show the image regardless of any global settings         */
d78 1
d90 1
a90 1
void              image_restart_fetches          (browser_data * b);
@


1.3
log
@Fixed problems with unsourced images in tables and a couple of other bugs
here and there - nothing earth shattering... Just wanted to keep the CVS
source up to date.
@
text
@d17 3
a19 1
/* Purpose: Image related functions                */
d22 1
d25 1
a25 1
/*                     routines                    */
@


1.2
log
@Updated code to extract attributes from BODY tag, including event info.
@
text
@d112 1
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d78 1
a78 1
_kernel_oserror * image_new_image                (browser_data * b, char * url, HStream * token, int background);
@
