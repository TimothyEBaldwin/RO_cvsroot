head	1.17;
access;
symbols
	Browse-2_16:1.17
	Browse-2_15:1.17
	Browse-2_14:1.17
	Browse-2_13:1.17
	Browse-2_12:1.17
	Browse-2_11:1.17
	Browse-2_10:1.17
	Browse-2_09:1.17
	ahodgkin_208_i4_2:1.17
	ahodgkin_208_i4:1.16
	ahodgkin_208_i3:1.16
	ahodgkin_208_i2:1.16
	ahodgkin_208_i1:1.16
	ahodgkin_207release:1.16
	ahodgkin_206release:1.15
	ahodgkin_205release:1.15
	ahodgkin_204release:1.15
	ahodgkin_202release:1.15
	ahodgkin_201release:1.14
	ahodgkin_200release:1.14
	ahodgkin_133beta:1.14
	ahodgkin_132beta:1.14
	ahodgkin_131beta:1.14
	ahodgkin_130beta:1.14
	ahodgkin_129:1.14
	ahodgkin_128beta:1.14
	ahodgkin_128alpha:1.14
	ahodgkin_127beta2:1.14
	ahodgkin_127beta:1.14
	ahodgkin_126beta:1.13
	ahodgkin_AW97patch:1.13
	ahodgkin_AW97:1.13;
locks; strict;
comment	@# @;


1.17
date	2000.05.31.15.58.55;	author ahodgkin;	state Exp;
branches;
next	1.16;

1.16
date	98.09.07.11.47.11;	author ahodgkin;	state Exp;
branches;
next	1.15;

1.15
date	98.03.20.12.13.09;	author ahodgkin;	state Exp;
branches;
next	1.14;

1.14
date	97.11.20.16.04.47;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	97.09.24.11.14.24;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	97.09.12.17.19.36;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	97.09.09.14.13.25;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	97.09.03.15.48.19;	author dbrown;	state Exp;
branches;
next	1.9;

1.9
date	97.09.03.12.36.14;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.09.03.09.13.52;	author dbrown;	state Exp;
branches;
next	1.7;

1.7
date	97.09.02.15.46.13;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.09.02.12.40.12;	author dbrown;	state Exp;
branches;
next	1.5;

1.5
date	97.08.31.18.38.27;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.08.29.17.27.21;	author dbrown;	state Exp;
branches;
next	1.3;

1.3
date	97.08.29.15.17.47;	author dbrown;	state Exp;
branches;
next	1.2;

1.2
date	97.08.28.10.51.06;	author dbrown;	state Exp;
branches;
next	1.1;

1.1
date	97.08.27.09.05.03;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.17
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Hotlist.h                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Managing a hotlist in the browser.                */
/*                                                            */
/* Author:  D.T.A.Brown.                                      */
/*                                                            */
/* History: 06-Aug-1997 (DTAB): Created.                      */
/*          22-Aug-1997 (ADH / DTAB): Integrated into main    */
/*                             browser code.                  */
/*          25-Aug-1997 (ADH): Definitions imported from      */
/*                             TBEvents.h.                    */
/*          10-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_Hotlist__
  #define Browser_Hotlist__

  #ifndef REMOTE_HOTLIST

    #include <kernel.h>
    #include <flex.h>
    #include <tboxlibs/toolbox.h>

    /* Hotlist dialogue event codes. Reuse of the same dialogue for  */
    /* different actions (e.g. New and Edit URL) make these a little */
    /* unusual.                                                      */

    #define EHotlistShowNewURL               0x025ff
    #define EHotlistShowEditURL              0x025fe
    #define EHotlistShowNewDirectory         0x025fd
    #define EHotlistShowRenameDirectory      0x025fc

    #define EHotlistNewEditURLOK             0x025fb
    #define EHotlistNewEditURLCancel         0x025fa
    #define EHotlistNewRenameDirectoryOK     0x025f9
    #define EHotlistNewRenameDirectoryCancel 0x025f8

    #define EHotlistClose                    0x025f7

    /* Enumerations */

    typedef enum hotlist_type
    {
      hl_directory,
      hl_url,

      /* Special case to allow range checking - must be the last item */

      hl_ALL

    } hotlist_type;

    /* Structures */

    typedef struct hotlist_item
    {
      hotlist_type             type;              /* Item type */
      unsigned int             flags;
      char                   * name;              /* Leaf name (NULL terminated string) */

      union
      {
        char                 * url;               /* Pointer to url (NULL terminated string) */
        struct hotlist_item  * directory_content; /* Pointer to directory contents */
        void                 * generic_data;      /* generic type */

      } data;

      struct hotlist_item    * parent;            /* Points to parent directory or NULL if none      */
      struct hotlist_item    * previous;          /* Points to previous hotlist_item or NULL if none */
      struct hotlist_item    * next;              /* Points to next hotlist_item or NULL if no more  */

    } hotlist_item;

    /* Miscellaneous definitions */

    #define HOTLIST_MAX_TYPE                    hl_url

    #define HOTLIST_G_IS_SELECTED               (1<<0)
    #define HOTLIST_G_REDRAW_NOW                (1<<1)
    #define HOTLIST_G_DRAG_SELECTED             (1<<2)
    #define HOTLIST_G_IS_READ_ONLY              (1<<3)

    #define HOTLIST_D_IS_OPEN                   (1<<16)
    #define HOTLIST_D_IS_HIGHLIGHTED            (1<<17)

    #define DIRECTORY_FLAGS                     HOTLIST_G_REDRAW_NOW

    #define URL_FLAGS                           HOTLIST_G_REDRAW_NOW

    #define HOTLIST_SPRITE_ICON_FLAGS           (WimpIcon_Sprite       |   \
                                                 WimpIcon_HCentred     |   \
                                                 WimpIcon_VCentred     |   \
                                                 WimpIcon_Indirected   |   \
                                                 WimpIcon_FGColour * 7 |   \
                                                 WimpIcon_BGColour * 0)

    #define HOTLIST_TEXT_ICON_FLAGS_SELECTED    (WimpIcon_Text         |   \
                                                 WimpIcon_Filled       |   \
                                                 WimpIcon_VCentred     |   \
                                                 WimpIcon_Indirected   |   \
                                                 WimpIcon_FGColour * 1 |   \
                                                 WimpIcon_BGColour * 7)

    #define HOTLIST_TEXT_ICON_FLAGS_UNSELECTED  (WimpIcon_Text         |   \
                                                 WimpIcon_VCentred     |   \
                                                 WimpIcon_Indirected   |   \
                                                 WimpIcon_FGColour * 7 |   \
                                                 WimpIcon_BGColour * 0)

    #define HOTLIST_TEXT_ICON_FLAGS_DRAG        (WimpIcon_Text         |   \
                                                 WimpIcon_Filled       |   \
                                                 WimpIcon_VCentred     |   \
                                                 WimpIcon_Indirected   |   \
                                                 WimpIcon_FGColour * 7 |   \
                                                 WimpIcon_BGColour * 1)

    #define HOTLIST_POSITION_BEFORE             0 /* before item */
    #define HOTLIST_POSITION_AFTER              1 /* after item  */
    #define HOTLIST_POSITION_BEGINNING          2 /* beginning of directory */
    #define HOTLIST_POSITION_END                3 /* end of directory */

    #define HOTLIST_NOT_DRAGGING                0
    #define HOTLIST_BOX_DRAG                    1
    #define HOTLIST_SOLID_DRAG_OBJECT           2
    #define HOTLIST_SOLID_DRAG_SPRITE           3
    #define HOTLIST_BOX_DRAG_SELECTION          4

    #define HOTLIST_WINDOW_MIN_WIDTH            480
    #define HOTLIST_WINDOW_MIN_HEIGHT           3       /* In items */

    #define HOTLIST_MENUSECTION_NEW             1
    #define HOTLIST_MENUSECTION_ALTER           2

    #define OPEN_DIRECTORY_SPRITE               "small_diro"
    #define CLOSED_DIRECTORY_SPRITE             "small_dir"
    #define INSERT_DIRECTORY_SPRITE             "small_dir+"
    #define OPEN_RESOURCES_DIRECTORY_SPRITE     "small_reso"
    #define CLOSED_RESOURCES_DIRECTORY_SPRITE   "small_res"
    #define URL_SPRITE                          "small_f91"
    #define RESOURCES_URL_SPRITE                "res_f91"
    #define SELECTION_SPRITE                    "package"

    #define HL_MODIFIED_ADD                     0
    #define HL_MODIFIED_DELETE                  1
    #define HL_MODIFIED_MOVE                    2
    #define HL_MODIFIED_COPY                    3
    #define HL_MODIFIED_LOAD                    4
    #define HL_MODIFIED_ALTER                   5
    #define HL_MODIFIED_LOADED_RESOURCES        6

    #define HL_SAVE_NONE                        0
    #define HL_SAVE_URI                         1
    #define HL_SAVE_HTML                        2

    /* Various component IDs */

    #define HOTLIST_URL_MENUITEM                0x05
    #define HOTLIST_SELECTALL_MENUITEM          0x00
    #define HOTLIST_CLEARSELECTION_MENUITEM     0x01
    #define HOTLIST_NEWDIRECTORY_MENUITEM       0x02
    #define HOTLIST_NEWURL_MENUITEM             0x06
    #define HOTLIST_OPENALL_MENUITEM            0x03
    #define HOTLIST_CLOSEALL_MENUITEM           0x04
    #define HOTLIST_DISPLAY_MENUITEM            0x07

    #define HOTLIST_MENU_SHOWDESCRIPTIONS       0x00
    #define HOTLIST_MENU_SHOWURLS               0x01

    /* (Use MiscHotlistSaveObject for all of the submenu 'save' items) */

    #define HOTLIST_RENAME_SUBMENUITEM          0x01
    #define HOTLIST_DELETE_SUBMENUITEM          0x02

    #define HOTLIST_NEWDIRECTORY_NAME           0x01
    #define HOTLIST_NEWDIRECTORY_CANCEL         0x03
    #define HOTLIST_NEWDIRECTORY_NEW            0x02

    #define HOTLIST_NEWURL_NAME                 0x01
    #define HOTLIST_NEWURL_URL                  0x05
    #define HOTLIST_NEWURL_CANCEL               0x03
    #define HOTLIST_NEWURL_NEW                  0x02

    /* Function prototypes */

    _kernel_oserror * hotlist_initialise           (void);

    _kernel_oserror * hotlist_open                 (int show_type, void * type, int show_urls);
    _kernel_oserror * hotlist_close                (void);
    ObjectId          hotlist_return_window_id     (void);

    void              hotlist_discard              (void);

    _kernel_oserror * hotlist_load                 (char * filename);
    _kernel_oserror * hotlist_add_html_file        (int x, int y, char * path);
    _kernel_oserror * hotlist_load_resources       (char * path);
    _kernel_oserror * hotlist_save_hotlist         (char * filename, char * extradata, int type);
    _kernel_oserror * hotlist_save                 (char * filename);

    hotlist_item    * hotlist_find_selected_item   (void);
    unsigned int      hotlist_count_selected_items (void);

    _kernel_oserror * hotlist_add                  (char * description, char * url, int at_bottom);
    _kernel_oserror * hotlist_add_position         (int x, int y, char * description, char * url);

    _kernel_oserror * hotlist_clear_selection      (void);

    int               hotlist_find_match           (flex_ptr match_list, const char * match);

    int               hotlist_empty                (void);

  #endif /* REMOTE_HOTLIST */

#endif /* Browser_Hotlist__ */
@


1.16
log
@Everyone else seems to be checking lots of stuff in lately, so I've
decided to join in. This is an intermediate check-in and so not all
resources etc. will be up to date. You should be able to make Phoenix
and a debug build out of it. As a reminder, to make a JavaScript build:

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean. This now strips dynamic dependencies from the MakeFile
   automatically, to save you having to do it yourself.
 * Run one of the TaskObey files with the "J" suffix, e.g. !DeskBrwsJ -
   this uses the same .o directory for object files and exports to the
   same position in the Targets directory as the non-JavaScript build,
   but it does produce a unique binary in 'abs' and symbols table in
   'syms'.
 * Sourcing an appropriate !Run (with increased WimpSlot value), !Boot
   and About resource is done automatically.
 * Some, but not all of the !xxxD (debug) TaskObey files will make
   JavaScript versions in passing - check the JSUFFIX value on the Make
   command line parameters in the file.

This'll only work on RISC OS 3.1 due to the use of MemLib.

Here's the change list:

Included MNG icons in sprites files; added Sprites23 for some builds.
Added in ANT URL file icon (b28) derived from URI file icon, because
the Save dialogue can need it.

No, you do *not* need to define the same keyboard shortcuts in each
frame since the ancestor keeps the input focus and we've basically
dropped non-nested Wimp support. Maintaining no less than 4 lists of
identical shortcuts was a pain. Some Res files now only have the
lists in the main browser window and button bar objects (these two
are both required still).

Ursula build Markers button arrangement changed from 1x3 horizontal to
2x2 tilted, as in Phoenix, by popular demand.

Couple of hotlist bugs fixed; dragging an item and deleteing it with
Ctrl+X didn't terminate the drag, and deleteting an item underneath a
menu opened for it didn't close the menu.

'SendReferer' option added to all Choices files, all set to 'always'.
Put just beneath 'Clone' as it refers to header items, though really,
both Clone and SendReferer should probably be in the "Fetch controls"
section rather than "Multiuser environments and proxying"! Front-end
control of this is available.

In image_export_original, save_save_source, save_transfer_source and
save_save_object, flex_set_budge(0) was called to lock the heap but the
return value wasn't stored. flex_set_budge(1) was then used to unlock
the heap. All calls now remember and restore the old value, which is
both safer in case one calls another and allows the flex_set_budge
call in Main.c to have an application-wide meaning, as intended.

Some restructuring to the data load and RAM transfer sections of
Protocols.c; remote hotlist builds wouldn't allow files to be loaded
to browser windows before, and can now drop URL, URI or text files to
the Open URL dialogue.

New option "MinimumFontSize", lets the 'size' attribute of the 'font'
element be overridden. Default value is 1, to allow the full range of
values for the attribute. Setting to 7, for example, would give font
size 7 text at all times. Another new option, "ToggleOnXOnly", to
make Toggle Size only extend the window vertically (with Ctrl then
being used to toggle to genuine full size, rather than vice versa).
All Choices files updated to hold both of these options; only the
first has front-end control available (see debug build Res file).

JavaScript Document object exists; frames array etc. working. Can now
just about use "http://www.acorn.com/~ahodgkin/jschain/" but it does
abort after a bit - problems with frames again, I suspect. Is is pretty
slow, too. Can now press Escape to terminate a script.

Main.c erroneously referred to Controls file entry "StopWebServe" as
"StopWebProxy". Fixed.

Keyboard shortcuts to raise SaveFile are now possible in a general sense;
the code before was in the ToBeShown handler and just checked for a parent
component of -1. It then assumed "save frame HTML source". Now there's the
savefile_raise_from_shortcut function, which together with the seven new
event codes in SaveFile.h allows saving of HTML source and frame location,
export of links, images, backgrounds and the page as text or draw, to all
be invoked by keyboard shortcuts. Some Res files have some of these defined.

In reformat_check_height, the first check to see if setpara should be set
references a field in tpLast without checking if it is NULL. Whilst the
'line > 0' check should mean that tpLast wasn't NULL anyway, a direct
call to the function from outside of the reformatter might have tripped
up on this - the check for tpLast != NULL is now made.

Adjust-click on close icon in window showing file: URL attempts to open
the parent Filer window.

Reformatter used to try and find a selectable token if keyboard control
was enabled in a really stupid place - could make reformatting become
very slow if no selectables were present, especially if the page had a
few tables on it. Preprocessor now does this (since it goes through all
of the tokens anyway), the reformatter just doing a last check to ensure
no frames have obscured the selectable and if so, it tries to move it.
Done in the reformatter as generating a line array implies the data really
is visible.

Ctrl+Tab URL completion now builds a full list of matches from the hotlist
and history and can cycle through them (Ctrl+Shift+Tab stepping backwards).

Will give a real error rather than just "Data Abort" if it goes wrong
now. Someone somewhere is setting bit 30 of the error which confused
the replacement signal handler. Flag bits are now masked off (as they
should've been to start with).
@
text
@d15 39
a53 52
/***************************************************/
/* File   : Hotlist.h                              */
/*                                                 */
/* Purpose: Managing a hotlist in the browser.     */
/*                                                 */
/* Author : D.T.A.Brown                            */
/*                                                 */
/* History: 06-Aug-97: Created.                    */
/*          22-Aug-97: (ADH/DTAB) Integrated into  */
/*                     main browser code.          */
/*          25-Aug-97: (ADH) Definitions imported  */
/*                     from TBEvents.h.            */
/***************************************************/

#ifndef REMOTE_HOTLIST

  /* Hotlist dialogue event codes. Reuse of the same dialogue for  */
  /* different actions (e.g. New and Edit URL) make these a little */
  /* unusual.                                                      */

  #define EHotlistShowNewURL               0x025ff
  #define EHotlistShowEditURL              0x025fe
  #define EHotlistShowNewDirectory         0x025fd
  #define EHotlistShowRenameDirectory      0x025fc

  #define EHotlistNewEditURLOK             0x025fb
  #define EHotlistNewEditURLCancel         0x025fa
  #define EHotlistNewRenameDirectoryOK     0x025f9
  #define EHotlistNewRenameDirectoryCancel 0x025f8

  #define EHotlistClose                    0x025f7

  /* Enumerations */

  typedef enum hotlist_type
  {
    hl_directory,
    hl_url,

    /* Special case to allow range checking - must be the last item */

    hl_ALL

  } hotlist_type;

  /* Structures */

  typedef struct hotlist_item
  {
    hotlist_type             type;              /* Item type */
    unsigned int             flags;
    char                   * name;              /* Leaf name (NULL terminated string) */
d55 18
a72 1
    union
d74 11
a84 3
      char                 * url;               /* Pointer to url (NULL terminated string) */
      struct hotlist_item  * directory_content; /* Pointer to directory contents */
      void                 * generic_data;      /* generic type */
d86 3
a88 1
    } data;
d90 1
a90 3
    struct hotlist_item    * parent;            /* Points to parent directory or NULL if none      */
    struct hotlist_item    * previous;          /* Points to previous hotlist_item or NULL if none */
    struct hotlist_item    * next;              /* Points to next hotlist_item or NULL if no more  */
d92 1
a92 1
  } hotlist_item;
d94 1
a94 1
  /* Miscellaneous definitions */
d96 4
a99 1
  #define HOTLIST_MAX_TYPE                    hl_url
d101 2
a102 4
  #define HOTLIST_G_IS_SELECTED               (1<<0)
  #define HOTLIST_G_REDRAW_NOW                (1<<1)
  #define HOTLIST_G_DRAG_SELECTED             (1<<2)
  #define HOTLIST_G_IS_READ_ONLY              (1<<3)
d104 1
a104 2
  #define HOTLIST_D_IS_OPEN                   (1<<16)
  #define HOTLIST_D_IS_HIGHLIGHTED            (1<<17)
d106 1
a106 1
  #define DIRECTORY_FLAGS                     HOTLIST_G_REDRAW_NOW
d108 6
a113 1
  #define URL_FLAGS                           HOTLIST_G_REDRAW_NOW
d115 6
a120 6
  #define HOTLIST_SPRITE_ICON_FLAGS           (WimpIcon_Sprite       |   \
                                               WimpIcon_HCentred     |   \
                                               WimpIcon_VCentred     |   \
                                               WimpIcon_Indirected   |   \
                                               WimpIcon_FGColour * 7 |   \
                                               WimpIcon_BGColour * 0)
d122 5
a126 6
  #define HOTLIST_TEXT_ICON_FLAGS_SELECTED    (WimpIcon_Text         |   \
                                               WimpIcon_Filled       |   \
                                               WimpIcon_VCentred     |   \
                                               WimpIcon_Indirected   |   \
                                               WimpIcon_FGColour * 1 |   \
                                               WimpIcon_BGColour * 7)
d128 6
a133 5
  #define HOTLIST_TEXT_ICON_FLAGS_UNSELECTED  (WimpIcon_Text         |   \
                                               WimpIcon_VCentred     |   \
                                               WimpIcon_Indirected   |   \
                                               WimpIcon_FGColour * 7 |   \
                                               WimpIcon_BGColour * 0)
d135 4
a138 6
  #define HOTLIST_TEXT_ICON_FLAGS_DRAG        (WimpIcon_Text         |   \
                                               WimpIcon_Filled       |   \
                                               WimpIcon_VCentred     |   \
                                               WimpIcon_Indirected   |   \
                                               WimpIcon_FGColour * 7 |   \
                                               WimpIcon_BGColour * 1)
d140 5
a144 4
  #define HOTLIST_POSITION_BEFORE             0 /* before item */
  #define HOTLIST_POSITION_AFTER              1 /* after item  */
  #define HOTLIST_POSITION_BEGINNING          2 /* beginning of directory */
  #define HOTLIST_POSITION_END                3 /* end of directory */
d146 2
a147 5
  #define HOTLIST_NOT_DRAGGING                0
  #define HOTLIST_BOX_DRAG                    1
  #define HOTLIST_SOLID_DRAG_OBJECT           2
  #define HOTLIST_SOLID_DRAG_SPRITE           3
  #define HOTLIST_BOX_DRAG_SELECTION          4
d149 2
a150 2
  #define HOTLIST_WINDOW_MIN_WIDTH            480
  #define HOTLIST_WINDOW_MIN_HEIGHT           3       /* In items */
d152 8
a159 2
  #define HOTLIST_MENUSECTION_NEW             1
  #define HOTLIST_MENUSECTION_ALTER           2
d161 7
a167 8
  #define OPEN_DIRECTORY_SPRITE               "small_diro"
  #define CLOSED_DIRECTORY_SPRITE             "small_dir"
  #define INSERT_DIRECTORY_SPRITE             "small_dir+"
  #define OPEN_RESOURCES_DIRECTORY_SPRITE     "small_reso"
  #define CLOSED_RESOURCES_DIRECTORY_SPRITE   "small_res"
  #define URL_SPRITE                          "small_f91"
  #define RESOURCES_URL_SPRITE                "res_f91"
  #define SELECTION_SPRITE                    "package"
d169 3
a171 7
  #define HL_MODIFIED_ADD                     0
  #define HL_MODIFIED_DELETE                  1
  #define HL_MODIFIED_MOVE                    2
  #define HL_MODIFIED_COPY                    3
  #define HL_MODIFIED_LOAD                    4
  #define HL_MODIFIED_ALTER                   5
  #define HL_MODIFIED_LOADED_RESOURCES        6
d173 1
a173 3
  #define HL_SAVE_NONE                        0
  #define HL_SAVE_URI                         1
  #define HL_SAVE_HTML                        2
d175 8
a182 1
  /* Various component IDs */
d184 2
a185 8
  #define HOTLIST_URL_MENUITEM                0x05
  #define HOTLIST_SELECTALL_MENUITEM          0x00
  #define HOTLIST_CLEARSELECTION_MENUITEM     0x01
  #define HOTLIST_NEWDIRECTORY_MENUITEM       0x02
  #define HOTLIST_NEWURL_MENUITEM             0x06
  #define HOTLIST_OPENALL_MENUITEM            0x03
  #define HOTLIST_CLOSEALL_MENUITEM           0x04
  #define HOTLIST_DISPLAY_MENUITEM            0x07
d187 1
a187 2
  #define HOTLIST_MENU_SHOWDESCRIPTIONS       0x00
  #define HOTLIST_MENU_SHOWURLS               0x01
d189 2
a190 1
  /* (Use MiscHotlistSaveObject for all of the submenu 'save' items) */
d192 3
a194 2
  #define HOTLIST_RENAME_SUBMENUITEM          0x01
  #define HOTLIST_DELETE_SUBMENUITEM          0x02
d196 4
a199 3
  #define HOTLIST_NEWDIRECTORY_NAME           0x01
  #define HOTLIST_NEWDIRECTORY_CANCEL         0x03
  #define HOTLIST_NEWDIRECTORY_NEW            0x02
d201 1
a201 4
  #define HOTLIST_NEWURL_NAME                 0x01
  #define HOTLIST_NEWURL_URL                  0x05
  #define HOTLIST_NEWURL_CANCEL               0x03
  #define HOTLIST_NEWURL_NEW                  0x02
d203 1
a203 1
  /* Function prototypes */
d205 3
a207 1
  _kernel_oserror * hotlist_initialise           (void);
d209 1
a209 3
  _kernel_oserror * hotlist_open                 (int show_type, void * type, int show_urls);
  _kernel_oserror * hotlist_close                (void);
  ObjectId          hotlist_return_window_id     (void);
d211 5
a215 1
  void              hotlist_discard              (void);
d217 2
a218 5
  _kernel_oserror * hotlist_load                 (char * filename);
  _kernel_oserror * hotlist_add_html_file        (int x, int y, char * path);
  _kernel_oserror * hotlist_load_resources       (char * path);
  _kernel_oserror * hotlist_save_hotlist         (char * filename, char * extradata, int type);
  _kernel_oserror * hotlist_save                 (char * filename);
d220 2
a221 2
  hotlist_item    * hotlist_find_selected_item   (void);
  unsigned int      hotlist_count_selected_items (void);
d223 1
a223 2
  _kernel_oserror * hotlist_add                  (char * description, char * url, int at_bottom);
  _kernel_oserror * hotlist_add_position         (int x, int y, char * description, char * url);
d225 1
a225 1
  _kernel_oserror * hotlist_clear_selection      (void);
d227 1
a227 1
  int               hotlist_find_match           (flex_ptr match_list, const char * match);
d229 1
a229 1
  int               hotlist_empty                (void);
d231 1
a231 1
#endif
@


1.15
log
@Programming warehouse link removed from all hotlists - the page has gone.

Some compile-time hacks in place to use MemLib, a dynamic area based
malloc replacement which shrinks its heap when possible. All builds
have these switched off at the moment. Seemed to work with just Browse,
though there would be problems with message blocks stored in dynamic
areas because of the Wimp's '&3800000' check - however, it failed when
HTMLLib was made to use it, too. Don't know why yet.

ItemInfo.[c/h] source added, with Res file additions for testbed Browse
and Phoenix.

Small fetch windows now work properly regardless of toolbar settings
in the Choices.

Reload now reloads all images too, rather than only reloading them for
as long as the main page was being fetched.

Added a simple 'Find' facility.

Realised that event handlers in eventlib are called in reverse order
of registration, so the miscellaneous event handler is now registered
first rather than last.

Multiuser code added (most only active if SINGLE_USER is undefined). As
part of this, hotlist code now knows about read-only items (done for the
Customer-style 'Resources' file, but works generally anyway).
handle_add_hotlist doesn't try to save the hotlist itself anymore (the
hotlist_add function does all that through hotlist_modified anyway).

Customer build Choices and Controls updated slightly (e.g. ClaimHelp
off, hotlist to save on quit only).

Customer build now uses Phoenix-style buttons. Sprites files which
worked at the time (but will probably be out of date now) and included
most of the original Customer-style sprites are in
'Utils.Icons.Customer'.

Choices, Messages and Res files for all builds now stripped down to only
single user items or single plus multiuser for Customer build and testbed
build. Before, all contained a few multiuser bits in at least the Choices
file if not more.

Grammatical error ("Fetching frames contents" (sic.)) corrected in
default message, Toolbars.c, and all of the Messages files.

Customer build brought back to a servicable level (including
implementation of the Find dialogue box with animation and fixing
up authorisation and 'Stop' state in the tristate). Quite a few
missing #ifndef REMOTE_HOTLIST bits from hotlist code added...

Customer build will not use <Choices$Write> or Boot:Choices for any
file finding now. UseProxy defaults to 'yes', MaxImages to 2. Res
file includes Proxy Address setting (save_save_choices() now writes
the ProxyAddress line).
@
text
@d215 1
a215 1
  int               hotlist_find_match           (char * buffer, int buffer_size);
@


1.14
log
@Following the last check-in - all build resources brought up to date.

Adjust-click on forwards/backwards buttons did not work in the intermediate
build, and now does.

Adjust-click on form submission buttons where the submit method is POST
will now work correctly, as the new view inherits the extradata block
of the old. Failure of this is signalled through
make_no_fetch_memory_error, code 16 (see updated Errors file in Docs).
Note the name change of extradata in this context; more details below.

The passing of forms POST data and extra headers for sending in an
HTTP request via. the URL module was all done through pointers into
flex blocks, and was therefore very unsafe. All relevant functions now
use pointers to pointers to the data.

To remove confusion on the umpteen uses of the word 'extradata', the field
in browser_data has been renamed to 'post_data'. The 'extradata' parameters
used within FetchPage.c were all disconnected from the extra header info /
form POST data stuff that extradata is usually associated with, and have
thus also been renamed, in this case to 'appnddata' (Append Data).

As well as X-NoProxy, the browser sends the 'proper' HTTP headers
Pragma:no-cache and Cache-Control:no-cache.

A redirection from a POST request was not handled correctly; despite
what HTTP specs say, you're supposed to use GET for the new URL. The
browser was, but when it chopped off the redundant header data in the
request didn't terminate it and left Content-Type in anyway...! Fixed.

Ctrl+Tab implemented - URL completion. Comes from the hotlist URLs,
hotlist titles, history hosts, paths, full URLs and lastly titles.
See code comments for more (history_find_match, hotlist_find_match).

TableSupport option added to Choices; it is read, can be set by the
front-end, but doesn't actually do anything else yet.

Reversed Choices' semantics on 'don't expire by...' for History. Added
'needs_redraw' flag to choices_get_contents so that, for example, if the
table border types change, browsers get redrawn.
@
text
@d45 2
d89 1
d145 2
d148 1
d157 1
d199 2
d203 2
a204 1
  _kernel_oserror * hotlist_save_hotlist         (char * filename, int type);
d216 2
@


1.13
log
@Tidied up Hotlist source a bit more, mostly so PSI can use the automatic
StrongHelp generator on it. Revealed a spurious toolbox_hide_object call
that would always fault and never do anything, and a few heinous uses
of show_error which have all been removed.

When dragging hotlist items, directories will now be highlighted whenever
the item would be added to them, rather than just over the sprite. In
practice this only changes if the item is open and has contents...

Drag box selections had broken in the hotlist; fixed (uninitialised
variable in hotlist_select_box). Adjust-drags now close the window on
completion. Minor problem with Shift+Drag (copy) reversing order of items
sorted out. Added hotlist_add_html_file and implemented loading of HTML.
DO NOT add broken HTML files, this has not been coded for and URLs of the
form http:///this/that (no host name) will hang the machine (bug in the
cookie code of the HTTP module up to at least version 0.39).

Made SELECT list items only as wide as the widest entry actually appears
(using fm_get_string_width), rather than as wide as the widest character
BBox in the font multiplied by the string length of the longest entry.

Updated !Run[D] files to require HTTP 0.39, FTP 0.12 and File 0.23.
@
text
@d205 2
@


1.12
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d127 1
d193 1
@


1.11
log
@First a minor warning - the various Res files are out of sync in this build.
Only the Browse resources are currently valid.

Added Utils.Icons - has a few archives inside containing the resources
(well, some of them) used to build various UI sprites for various builds.
Archived because these are unlikely to change much, and putting them on
CVS was a move to, well, archive the stuff...

SaveDBox objects vanquished and requirements in !Run[D] files removed. The
data save code fits much more neatly in amongst the data load protocol
stuff now (with the slight exception of having to split the SaveObject
source into SaveObject and SaveFile - the former handles multiple persistent
dialogues for Shift+Click on links and the like, the latter handles 'one at
a time' transient dialogues for save source and similar). Export Link is now
supported, too, and writes a 'proper' version URI file. You'll find that
double-clicking on old URI files will work as the URI handler picks them up,
whilst new version ones don't; however, dragging onto the browser will only
work with new version files. Note that support for saving and loading URL
files (ANT suite stuff) is present too, so old URI files can be typed as URL
files if you want to keep them working without modification - the URI
handler itself will hopefully support the defined URI file format soon;
double-clicking on old URI files will stop working at that point. Note
there are *lots* of changes in every Res file to support all this. This may
all seem a bit pointless to some, but the changes do in fact make it very
easy to add new save dialogues all over the place. Certainly much easier
than with the previous system, anyway. In fact, post script, image
'save as sprite' took about half an hour, which I hope proves the worth
of the new system.

Merged in newer hotlist code with support for drag cancelling with Escape
(all relevant Res files appropriately updated) and cancelling scrolling
when you've reached the window scroll limit. Had to move some of the
Wimp message handling stuff to the central Protocols source, as clashes
were occuring, and also the hotlist routines were using independent saving
code - a lot of duplicated effort. This was fair enough as at the time the
Hotlist code was written, the Save code couldn't be used in the way it is
now.

New Save Source and Print buttons on the toolbar of some builds.

Phoenix Sprites file made more efficient - the Acorn base section has been
split from the animated upper region. Browse build has a new grey fade
sprite at the back, which is less grainy than the previous one and only
uses 16 colours (with a 16 greyscale palette).

Not really a bug, bug the routine to start an image fetch for INPUT
TYPE=IMAGE forms items only did so if the src field (or equivalent, for
this tag type) was non-NULL. In fact, you should always call image_new_image
and let that handle the rest, otherwise other sections of the code will fail
as they try to obtain an image number for a given HStream and get -1 back.
This problem only generally manifested itself when loading an HTML file to
the browser straight from an application, as many src fields become NULL
when the relativisation routines find nothing to relativise to...

Authentication got broken somewhere along the line - this has been fixed
(in HTMLLib and the browser).

Ctrl+Click on a cross referenced image updates *all* copies, not just the
one with the image data attached.

Next big step: Rip up TBEvents.h and rebuild that whole approach somewhat.
To all those working on the code, my apologies but this means all Res files
will receive a very large number of alterations and there will be extensive
code changes too (mostly naming convention stuff), in more or less all
source files. I am endeavouring to ensure that the new numberspace
convention does not clash with the work being done by Kevin on
internationalisation.
@
text
@d31 13
a43 31
  /* Dialogue definitions (event codes) */

  #define HotlistShowEditURL              0x300b
  #define HotlistShowRenameDirectory      0x300c
  #define HotlistShowNewURL               0x300d
  #define HotlistShowNewDirectory         0x300e

  #define HotlistNewEditURLOk             0x300f
  #define HotlistNewRenameDirectoryOk     0x3010
  #define HotlistNewEditURLCancel         0x3011
  #define HotlistNewRenameDirectoryCancel 0x3012

  /* Menu definitions (event codes) */

  #define ShowHotlist        0x3000
  #define AddThisPage        0x3001
  #define RemoveThisPage     0x3002
  #define SaveHotlist        0x3003

  #define HotlistMenuOpened  0x3004
  #define HotlistMenuClosed  0x3005
  #define HotlistSelectAll   0x3006
  #define HotlistClearSelect 0x3007
  #define HotlistOpenAll     0x3008
  #define HotlistCloseAll    0x3009
  #define HotlistDelete      0x300a

  #define HotlistShowDesc    0x3013
  #define HotlistShowURLs    0x3014

  #define HotlistEscape      0x3015
d169 2
a170 1
  #define HOTLIST_SAVE_SUBMENUITEM            0x00
d183 1
d185 1
a185 1
  /* Function prototypes */
d187 3
a189 1
  _kernel_oserror * hotlist_initialise       (void);
d191 3
a193 3
  _kernel_oserror * hotlist_open             (int show_type, void * type, int show_urls);
  _kernel_oserror * hotlist_close            (void);
  ObjectId          hotlist_return_window_id (void);
d195 2
a196 3
  _kernel_oserror * hotlist_load             (char * filename);
  _kernel_oserror * hotlist_save_hotlist     (char * filename, int type);
  _kernel_oserror * hotlist_save             (char * filename);
d198 2
a199 2
  _kernel_oserror * hotlist_add              (char * description, char * url, int at_bottom);
  _kernel_oserror * hotlist_add_position     (int x, int y, char * description, char * url);
d201 1
a201 1
  void              hotlist_clear_selection  (void);
@


1.10
log
@Canceling of drags implemented
@
text
@d210 1
d215 2
@


1.9
log
@File fetches now set DEADDEAD during the fetch, Data if it is aborted, or
an appropriate filetype when finished. If the fetcher routines return a
zero or data filetype, the browser looks at a set of hard coded filename
extensions to try and determine if there's a better filetype to use
(urlutils_filetype_from_url) - since this is a centralised routine it can
use a Mime mapping system (or be removed entirely) as and when one becomes
available.

You can now drag URI / URL files to the Hotlist window to add them to the
list. They are added roughly where dragged to. (NB, note that I renamed
the function to return the window ID - just being picky; it matches other
similar functions now). Oh, and hotlist_add_position actually works now ;-)

The global history will save when titles are added, as well as when a URL
is added. Before, a browser crash could mean a title got dropped out
of the history file even if SaveHistory was set to 'always'.

SaveObject sources have been added but nothing references them or links
them in yet - they're not finished. Mostly checking this one in because
of the hotlist changes.
@
text
@d61 2
@


1.8
log
@Extended API and fixed window opening bug
@
text
@a73 7
  typedef enum hl_opentype
  {
    not_open,
    already_open

  } hl_opentype;

d201 1
a201 5
  _kernel_oserror * hotlist_initialise   (void);

  _kernel_oserror * hotlist_open            (int show_type, void * type, int show_urls);
  _kernel_oserror * hotlist_close           (void);
  ObjectId          hotlist_read_toolbox_id (void);
d203 3
a205 2
  _kernel_oserror * hotlist_load         (char * filename);
  _kernel_oserror * hotlist_save         (char * filename);
d207 2
a208 2
  _kernel_oserror * hotlist_add          (char * description, char * url, int at_bottom);
  _kernel_oserror * hotlist_add_position (int x, int y, char * description, char * url);
d210 2
@


1.7
log
@This version is being checked in because the Hotlist manager in the test
build provokes a Wimp bug. All the variant resource files are out of sync
and there are several outstanding bugs in the main code, so I'd personally
avoid this build like the plague unless you're mad enough to want to
examine the Wimp problem ;-)
@
text
@d208 1
a208 1
  _kernel_oserror * hotlist_initialise (void);
d210 3
a212 2
  _kernel_oserror * hotlist_open       (int show_type, void * type, int show_urls);
  _kernel_oserror * hotlist_close      (void);
d214 5
a218 2
  _kernel_oserror * hotlist_load       (char * filename);
  _kernel_oserror * hotlist_save       (char * filename);
a219 1
  _kernel_oserror * hotlist_add        (char * description, char * url, int at_bottom);
@


1.6
log
@Various bug fixes,new drag selection model and dragndrop compliant autoscroll
@
text
@d164 1
a164 1
  #define URL_SPRITE                          "small_b28"
@


1.5
log
@Created Protocols source file and moved a lot of message handling from
handle_messages - the latter now serves as a high level distributor to
lower level functions in Protocols. Incidentally, URL files (as used by
the ANT suite) can be loaded by dragging to the browser in the same way
as URI files - Not A Lot Of People Know That, etc.

Merged new hotlist display type Res file to existing resources, added
support for DataSave message so items can be dragged from the hotlist
to a specific window (RAM transfer for URI and URL files; ScrapFile for
HTML and Text but deleted afterwards and there are appropriate guards
to stop Reload just saying 'not found'; images run through ScrapFile and
there is no choice but to leave them there and do a conventional fetch).

All !RunD files now give a WimpSlot of 2304K. Some small changes to
the Argo and Ursula build Res files to make the menu trees more sensible.
Controls files now take 'file:/' instead of 'file://' in Protocols
section. Definitions at top of URLutils.c *not* altered, as then you
end up with invalid URLs - so it will accept 'file:/', but always generate
'file://'. This is because some browsers exports 'file:/'. Sigh.

make_no_[..._]memory_error functions now return a _kernel_oserror * rather
than void. It's always &erb returned, but it enables users to use a more
elegant 'return make_no_memory_error(1);', say, rather than something
like 'make_no_memory_error(1); return &erb;'. I obviously should've written
it like that at the outset, but never mind. All callers have been
appropriately updated.

The urlutils_leafname_from_url function now replaces illegal characters
(A7000 Welcome Guide p54...) in the leaf with legal alternatives.

Internal URL scheme is now a bit cleaner, with everything properly defined
in URLutils.h. All references to http:, file: and ftp:, with or without
a following '//' use the definitions in here now.

More tidying and some reorganising of Hotlist source. Auto-open delay is
now a Choices item. Some dependencies on statics removed (e.g. the
counting functions don't accumulate into the global item_number now).
The redraw functions used Wimp_TextOp - oops, so this has been amended
to use whatever is supported on your Wimp. This is now in a new function
(utils_text_width()), which the History menu routines also use (there was
a bug in the width routine there anyway, which is therefore fixed in
passing). Several other routines used Wimp_TextOp directly too, and
they have been altered to use the new function as well.

In hotlist code, one of the larger changes is in the API to hotlist_draw_r()
(formerly _hotlist_draw()) which now takes item widths and heights as
parameters - discovering these is quite slow, so doing it every time the
function calls itself recursively is a little less efficient than
passing the values in from elsewhere. Note that underscore prefixed
functions are being slowly renamed to _r suffixed functions, to match
the convention established by Tony Cheal with is table routines. This
makes it much more obvious when something is recursive, as the same
naming convention is used in every browser source file.

Finally, note that I intend to ditch SaveDBox and use an alternate window
with manual control of the messaging in Protocols.c. This will allow
various improvements which at present the SaveDBox operational methods
preclude. I'm going to have to do at least an alternate Window object for
the SaveDBox module to use soon in any case. Getting rid of SaveDBox will
help reduce, if only slightly, demands on the RMA.
@
text
@d109 1
a165 5

  #define HOTLIST_SCROLL_BOUNDARY_SIZE        32
  #define HOTLIST_SCROLL_SPEED_MIN            8
  #define HOTLIST_SCROLL_SPEED_INC            8
  #define HOTLIST_SCROLL_SPEED_MAX            128
@


1.4
log
@Added support for saving HTML files from hotlist window
@
text
@d170 1
a170 1
  
@


1.3
log
@Added support for saving URI files from hotlist window
@
text
@d180 1
@


1.2
log
@Various bug fixes and support for displaying either URLs or descriptions
@
text
@d110 2
a111 3
  #define HOTLIST_D_HAS_SUBDIRECTORY          (1<<16)
  #define HOTLIST_D_IS_OPEN                   (1<<17)
  #define HOTLIST_D_IS_HIGHLIGHTED            (1<<18)
d177 3
@


1.1
log
@Tidied up Hotlist source a bit
@
text
@d58 3
d171 7
d188 4
d205 1
@
