head	1.7;
access;
symbols
	Browse-2_16:1.7
	Browse-2_15:1.7
	Browse-2_14:1.7
	Browse-2_13:1.7
	Browse-2_12:1.7
	Browse-2_11:1.7
	Browse-2_10:1.7
	Browse-2_09:1.7
	ahodgkin_208_i4_2:1.7
	ahodgkin_208_i4:1.6
	ahodgkin_208_i3:1.6
	ahodgkin_208_i2:1.6
	ahodgkin_208_i1:1.6
	ahodgkin_207release:1.6
	ahodgkin_206release:1.5
	ahodgkin_205release:1.4
	ahodgkin_204release:1.4
	ahodgkin_202release:1.4
	ahodgkin_201release:1.4
	ahodgkin_200release:1.4
	ahodgkin_133beta:1.4
	ahodgkin_132beta:1.4
	ahodgkin_131beta:1.4
	ahodgkin_130beta:1.4
	ahodgkin_129:1.3
	ahodgkin_128beta:1.3
	ahodgkin_128alpha:1.3
	ahodgkin_127beta2:1.3
	ahodgkin_127beta:1.3
	ahodgkin_126beta:1.2
	ahodgkin_AW97patch:1.2
	ahodgkin_AW97:1.2;
locks; strict;
comment	@# @;


1.7
date	2000.05.31.15.59.00;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	98.09.23.13.18.22;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	98.07.09.10.28.12;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.12.18.10.07.17;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.11.20.16.04.47;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.10.03.09.19.09;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.08.18.09.24.12;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.7
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    URLveneer.h                                       */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Veneer to the URL_Fetcher module SWIs.            */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 17-Aug-1997 (ADH): Created from Fetch.h.          */
/*          07-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_URLveneer__
  #define Browser_URLveneer__

  #include <kernel.h>

  /* URL module definitions */

  #define URL_swibase          0x83e00
  #define URL_Register         (URL_swibase+0)
  #define URL_GetURL           (URL_swibase+1)
  #define URL_Status           (URL_swibase+2)
  #define URL_ReadData         (URL_swibase+3)
  #define URL_SetProxy         (URL_swibase+4)
  #define URL_Stop             (URL_swibase+5)
  #define URL_Deregister       (URL_swibase+6)
  #define URL_ParseURL         (URL_swibase+7)
  #define URL_EnumerateSchemes (URL_swibase+8)

  #define URL_Method_http_GET   1
  #define URL_Method_http_HEAD  2
  #define URL_Method_http_POST  4
  #define URL_Method_http_PUT   8

  #define URL_GetURL_AgentGiven   (1u<<0)

  #define URL_Status_Connected  1
  #define URL_Status_SentReq    2
  #define URL_Status_SentData   4
  #define URL_Status_Responded  8
  #define URL_Status_Transfer  16
  #define URL_Status_Done      32
  #define URL_Status_Aborted   64

  #define URL_ParseURL_LengthInR5 (1u<<0)
  #define URL_ParseURL_HexEscape  (1u<<1)

  #define URL_ParseURL_Reason_FindLengths           0
  #define URL_ParseURL_Reason_FillBuffers           1
  #define URL_ParseURL_Reason_ComposeFromComponents 2
  #define URL_ParseURL_Reason_QuickResolve          3

  /* Function prototypes */

  _kernel_oserror * url_register          (unsigned int flags, unsigned int * handle);
  _kernel_oserror * url_deregister        (unsigned int flags, unsigned int handle);
  _kernel_oserror * url_stop              (unsigned int flags, unsigned int handle);
  _kernel_oserror * url_get_url           (unsigned int flags, unsigned int handle, int method, char * url, char ** extradata, unsigned int * status, int mode);
  _kernel_oserror * url_read_data         (unsigned int flags, unsigned int handle, void * buffer, int size, int * status, int * read, int * pending);
  _kernel_oserror * url_status            (unsigned int flags, unsigned int handle, int * status, int * response, int * bytes);
  _kernel_oserror * url_set_proxy         (unsigned int flags, unsigned int session, char * baseurl, char * protocol, int noproxy);
  _kernel_oserror * url_enumerate_schemes (unsigned int flags, int * context, const char ** scheme);

#endif /* Browser_URLveneer__ */
@


1.6
log
@Another intermediate check-in, resources may not be up to date; items
most likely to be buildable are PhoenixJ and BrowseD. Done because I'm
about to make some rather dodgy changes to code otherwise unchanged
since the Customer browser and I may well have to back them out...

In Handlers.c now set the HFlags_HasBeenVisited bit of a token at the point
it is first clicked on. Means the link returns to a "visited" colour after
the highlight flash immediately. This will persist for as long as the browser
window is kept open on that page, though if the URL doesn't end up making it
into the history for whatever reason it would "unhighlight" on reload; fair
enough, really. The highlight is window-local, so there are no redraw worries
for other open windows with links to the same URL (though other same-URL
links on the same page aren't updated either).

All forms submissions force a reload (principally for eudoramail.com, but
many other sites have similar requirements).

!MkClean and !MkClnAll didn't correctly call the utility to strip Makefile
dependencies. Fixed.

On fetch closedown, fetchpage_preprocess_token could be called on a token
which had already been run through the preprocessor. Now checks the flags
word before proceeding.

Image RAM cache and garbage collection system implemented - see new Choices
file entries CollectAfter, FreeRAMLimit and UnusedImageLimit to get an
overview. This contains groundwork for JavaScript image array support.

More JavaScript support improvements. Any one window object will know its
parent, top, this, etc.; frames array working except for a frameset created
via. multiple documents; opener for something created with window.open is
currently not set and don't know why (property is being created, pointer to
valid object is held, but JS engine returns 'null'. Ho hum) - JSChain won't
work yet, then.
@
text
@d15 66
a80 53
/***************************************************/
/* File   : URLveneer.h                            */
/*                                                 */
/* Purpose: Veneer to the URL_Fetcher module SWIs. */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 17-Aug-97: Created from Fetch.h.       */
/***************************************************/

/* URL module definitions */

#define URL_swibase          0x83e00
#define URL_Register         (URL_swibase+0)
#define URL_GetURL           (URL_swibase+1)
#define URL_Status           (URL_swibase+2)
#define URL_ReadData         (URL_swibase+3)
#define URL_SetProxy         (URL_swibase+4)
#define URL_Stop             (URL_swibase+5)
#define URL_Deregister       (URL_swibase+6)
#define URL_ParseURL         (URL_swibase+7)
#define URL_EnumerateSchemes (URL_swibase+8)

#define URL_Method_http_GET   1
#define URL_Method_http_HEAD  2
#define URL_Method_http_POST  4
#define URL_Method_http_PUT   8

#define URL_GetURL_AgentGiven (1u<<0)

#define URL_Status_Connected  1
#define URL_Status_SentReq    2
#define URL_Status_SentData   4
#define URL_Status_Responded  8
#define URL_Status_Transfer  16
#define URL_Status_Done      32
#define URL_Status_Aborted   64

#define URL_ParseURL_Reason_FindLengths           0
#define URL_ParseURL_Reason_FillBuffers           1
#define URL_ParseURL_Reason_ComposeFromComponents 2
#define URL_ParseURL_Reason_QuickResolve          3

/* Function prototypes */

_kernel_oserror * url_register          (unsigned int flags, unsigned int * handle);
_kernel_oserror * url_deregister        (unsigned int flags, unsigned int handle);
_kernel_oserror * url_stop              (unsigned int flags, unsigned int handle);
_kernel_oserror * url_get_url           (unsigned int flags, unsigned int handle, int method, char * url, char ** extradata, unsigned int * status, int mode);
_kernel_oserror * url_read_data         (unsigned int flags, unsigned int handle, void * buffer, int size, int * status, int * read, int * pending);
_kernel_oserror * url_status            (unsigned int flags, unsigned int handle, int * status, int * response, int * bytes);
_kernel_oserror * url_set_proxy         (unsigned int flags, unsigned int session, char * baseurl, char * protocol, int noproxy);
_kernel_oserror * url_enumerate_schemes (unsigned int flags, int * context, const char ** scheme);
@


1.5
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d53 4
a56 2
#define URL_ParseURL_Reason_FindLengths 0
#define URL_ParseURL_Reason_FillBuffers 1
@


1.4
log
@Not all resources are up to date in this check-in, and documentation
both within source and stuff in 'Docs' is out of date or missing - I
was very pushed for time on this one... Hopefully will do another
'tidy up' check-in before close on Friday; until then, beware of
anything other than the Ursula (Desktop browser) build. Anyway...

Export As Draw done. As part of this, FONT SIZE and SUP / SUB adjustment
of font size is done in fm_token_font_info rather than fm_find_token_font.

Bullets and switches are plotted as indirected sprite items, rather than
indirected text + sprite items - this relied on being in a redraw loop to
pick the sprites up from the local pool (failed during printing).

URI files now have a LF line ending rather than CR... '*' recognised
as an empty field when loading via. RAM transfer now (only worked for
loading from disc before).

Gave placeholder bounding boxes 4 OS units more minimum extra gap
vertically and reduced horizontal addition to this value * 1.5, rather
than * 2 (see reformat_get_placeholder_size).

Background image tiling starts at ymax - h + 4, rather than ymax, so
there isn't the bottom line of pixels from the top tile always present
at the top of the window. The '+4' is for caution's sake.

Can now save a frame's HTML source, that of its parent or its ancestor,
and the same for the URI pointing to those documents - see Menus.h for
the relevant component IDs that should lead to the SaveFile dialogue.

Have hopefully fixed timeout = 0 values (i.e. 'forever') on things
like LinkTo; before, image fetches could override the state (so you'd
only ever see brief flickers of a given URL as the pointer went over
a link).

Save File dialogue will remember the state of option or radio buttons
for a given parent component origin and restore that state when the
dialogue is next opened from the same place (stops turning on saving
as a URL file also turning on 'save background images' for Draw file
export, etc.).

Use of a META tag to reload the *same* page now sets the 'reloading'
flag in the browser so that it doesn't go through a proxy - otherwise
pages which are meant to update periodically through client pull
don't work, as they keep coming out of the cache.

Can now handle images specifying just a width or height in the HTML
(other dimension is scaled accordingly, but note that the placeholder
size must still be 'dumb' until the image data comes in). An image
will now override an image history size entry for the same entry
with a different size.
@
text
@d27 10
a36 9
#define URL_swibase    0x83e00
#define URL_Register   (URL_swibase+0)
#define URL_GetURL     (URL_swibase+1)
#define URL_Status     (URL_swibase+2)
#define URL_ReadData   (URL_swibase+3)
#define URL_SetProxy   (URL_swibase+4)
#define URL_Stop       (URL_swibase+5)
#define URL_Deregister (URL_swibase+6)
#define URL_ParseURL   (URL_swibase+7)
d58 8
a65 7
_kernel_oserror * url_register   (unsigned int flags, unsigned int * handle);
_kernel_oserror * url_deregister (unsigned int flags, unsigned int handle);
_kernel_oserror * url_stop       (unsigned int flags, unsigned int handle);
_kernel_oserror * url_get_url    (unsigned int flags, unsigned int handle, int method, char * url, char ** extradata, unsigned int * status, int mode);
_kernel_oserror * url_read_data  (unsigned int flags, unsigned int handle, void * buffer, int size, int * status, int * read, int * pending);
_kernel_oserror * url_status     (unsigned int flags, unsigned int handle, int * status, int * response, int * bytes);
_kernel_oserror * url_set_proxy  (int flags, unsigned int session, char * baseurl, char * protocol, int noproxy);
@


1.3
log
@Following the last check-in - all build resources brought up to date.

Adjust-click on forwards/backwards buttons did not work in the intermediate
build, and now does.

Adjust-click on form submission buttons where the submit method is POST
will now work correctly, as the new view inherits the extradata block
of the old. Failure of this is signalled through
make_no_fetch_memory_error, code 16 (see updated Errors file in Docs).
Note the name change of extradata in this context; more details below.

The passing of forms POST data and extra headers for sending in an
HTTP request via. the URL module was all done through pointers into
flex blocks, and was therefore very unsafe. All relevant functions now
use pointers to pointers to the data.

To remove confusion on the umpteen uses of the word 'extradata', the field
in browser_data has been renamed to 'post_data'. The 'extradata' parameters
used within FetchPage.c were all disconnected from the extra header info /
form POST data stuff that extradata is usually associated with, and have
thus also been renamed, in this case to 'appnddata' (Append Data).

As well as X-NoProxy, the browser sends the 'proper' HTTP headers
Pragma:no-cache and Cache-Control:no-cache.

A redirection from a POST request was not handled correctly; despite
what HTTP specs say, you're supposed to use GET for the new URL. The
browser was, but when it chopped off the redundant header data in the
request didn't terminate it and left Content-Type in anyway...! Fixed.

Ctrl+Tab implemented - URL completion. Comes from the hotlist URLs,
hotlist titles, history hosts, paths, full URLs and lastly titles.
See code comments for more (history_find_match, hotlist_find_match).

TableSupport option added to Choices; it is read, can be set by the
front-end, but doesn't actually do anything else yet.

Reversed Choices' semantics on 'don't expire by...' for History. Added
'needs_redraw' flag to choices_get_contents so that, for example, if the
table border types change, browsers get redrawn.
@
text
@d35 1
d51 3
@


1.2
log
@Version in Messages taken to 1.22 (03 Oct).

Updated Res files in appropriate builds to hold various (similar) Choices
designs.

Choices related menus were flagged as Shared, but none of the dialogues
(including ColourDBox) were - potential future problems, though shouldn't
cause any leaks at present. This has been sorted out anyway.

Encoding function encoding_init no longer returns an error from
toolbox_create_object, so the Encoding menu and all those attached
to it do not have to be present (e.g. the Customer build).

SUB, SUP, STRIKE and U supported. U underlines the baseline of the body text
font, whilst STRIKE will go through roughly the middle of the lower case
chars even if the font is SUP or SUB. Note that Navigator appears to shift
the underline point for SUB and SUP; it may be necessary to copy this
behaviour, but testing on real sites must proceed before that. There could
also be a problem with the automatic lowering of font size, which Navigator
doesn't do, so any FONT SIZE = -n commands could make it too small. Again,
this needs testing on real sites.

'http://' is added to URLs with no protocol specified, unless they start with
'ftp.', in which case the new behaviour is to add 'ftp://'.

Choices code altered to do less error checking on components! They should be
able to be missing without raising errors. Referencing of the subwindow
array changed from *(subwindows + number) to subwindows[number].

Made trace_tag_name code look pretty...

reformat_useless_token now checks tagno is non-zero.

User Agent string setting now done through URL_GetURL, on a per-session
basis.

Ellipsis character removed from all Messages files, replaced with '...'.
There's little difference between the two in an outline font, and in System
font the latter looks much better. Smart quotes left in, as they look
better in all cases.
@
text
@d56 1
a56 1
_kernel_oserror * url_get_url    (unsigned int flags, unsigned int handle, int method, char * url, char * extradata, unsigned int * status, int mode);
@


1.1
log
@Updated Makefile to work better in folding text editors. More or less rewrote
Limits.h, and ensured consistent comment styling throughout all sources.
Fetch.c/h split to Fetch, FetchHTML and URLveneer. URLstat.c/h produced to
cope with this. OpenURL and Find sources created from bits in the Windows
source file that shouldn't have been there... These will get filled out
shortly. Note that a few functions in Fetch are due to be renamed and moved;
probably to Tokenutils.
@
text
@d41 2
@
