head	1.23;
access;
symbols
	Browse-2_16:1.23
	Browse-2_15:1.23
	Browse-2_14:1.23
	Browse-2_13:1.23
	Browse-2_12:1.23
	Browse-2_11:1.22
	Browse-2_10:1.22
	Browse-2_09:1.22
	ahodgkin_208_i4_2:1.22
	ahodgkin_208_i4:1.20
	ahodgkin_208_i3:1.20
	ahodgkin_208_i2:1.20
	ahodgkin_208_i1:1.20
	ahodgkin_207release:1.18
	ahodgkin_206release:1.17
	ahodgkin_205release:1.16
	ahodgkin_204release:1.16
	ahodgkin_202release:1.14
	ahodgkin_201release:1.13
	ahodgkin_200release:1.13
	ahodgkin_133beta:1.13
	ahodgkin_132beta:1.13
	ahodgkin_131beta:1.12
	ahodgkin_130beta:1.11
	ahodgkin_129:1.10
	ahodgkin_128beta:1.10
	ahodgkin_128alpha:1.9
	ahodgkin_127beta2:1.8
	ahodgkin_127beta:1.8
	ahodgkin_126beta:1.7
	ahodgkin_AW97patch:1.7
	ahodgkin_AW97:1.6;
locks; strict;
comment	@# @;


1.23
date	2006.03.13.22.06.20;	author ahodgkin;	state Exp;
branches;
next	1.22;

1.22
date	2000.11.14.08.45.08;	author ahodgkin;	state Exp;
branches;
next	1.21;

1.21
date	2000.05.31.15.58.57;	author ahodgkin;	state Exp;
branches;
next	1.20;

1.20
date	99.09.02.13.10.41;	author ahodgkin;	state Exp;
branches;
next	1.19;

1.19
date	99.03.30.15.52.14;	author ahodgkin;	state Exp;
branches;
next	1.18;

1.18
date	98.09.07.11.47.13;	author ahodgkin;	state Exp;
branches;
next	1.17;

1.17
date	98.07.09.10.28.10;	author ahodgkin;	state Exp;
branches;
next	1.16;

1.16
date	98.04.16.08.14.31;	author ahodgkin;	state Exp;
branches;
next	1.15;

1.15
date	98.03.26.14.21.17;	author ahodgkin;	state Exp;
branches;
next	1.14;

1.14
date	98.03.20.12.13.10;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	98.02.06.13.55.40;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	98.01.31.10.55.46;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	97.12.18.10.07.16;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	97.12.04.11.23.26;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	97.11.27.17.50.12;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.11.19.10.29.25;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.10.18.16.42.35;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.09.18.12.37.29;	author kbracey;	state Exp;
branches;
next	1.5;

1.5
date	97.09.15.12.41.33;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.09.12.17.19.38;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.08.28.16.08.15;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.08.18.10.00.17;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.29.45;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.23
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Menus.h                                           */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Handle browser menus.                             */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 20-Nov-1996 (ADH): Created.                       */
/*          07-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_Menus__
  #define Browser_Menus__

  #include <tboxlibs/toolbox.h>
  #include <HTMLLib/HTMLLib.h>

  #include "Global.h"

  /* Main menu (menu from the icon bar icon) component IDs */

  #define MainInfo                        0x10000 /* Item leading to the Info window            */
  #define MainChoices                     0x10001 /* Item leading to Choices window             */
  #define MainOpenURL                     0x10002 /* Item leading to the Open URL dialogue      */
  #define MainShowHotlist                 0x10003 /* Item leading to the Hotlist                */
  #define MainQuit                        0x10004
  #define MainCache                       0x10005 /* Broadcast appropriate AppControl message   */
  #define MainHelp                        0x10006 /* Item leading to the Help submenu           */
  #define MainLogOut                      0x10007 /* For multiuser builds                       */
  #define MainErrorLogs                   0x10008 /* Item leading to the Error Logs dialogue    */

  /* Main menu event codes */

  #define EMainCache                      0x10005
  #define EMainToBeShown                  0x101ff

  /* Choices menu component IDs - these control what defaults any new */
  /* browser windows will take.                                       */

  #define ChoicesURLBar                   0x10200
  #define ChoicesButtonBar                0x10201
  #define ChoicesStatusBar                0x10202
  #define ChoicesUnderlineLinks           0x10203
  #define ChoicesUseDocumentColours       0x10204
  #define ChoicesShowForegroundImages     0x10205
  #define ChoicesShowBackgroundImages     0x10206
  #define ChoicesFullScreen               0x10207

  #define ChoicesSave                     0x10208 /* Save the choices (with no save dialogue) */

  /* Choices menu event codes */

  #define EChoicesToBeShown               0x103ff

  /* Document menu (main menu from a browser window) component IDs */
  /* - all lead to other submenus.                                 */

  #define DocumentFile                    0x10400
  #define DocumentNavigate                0x10401
  #define DocumentHotlist                 0x10402
  #define DocumentResources               0x10403
  #define DocumentUtilities               0x10404
  #define DocumentDisplay                 0x10405
  #define DocumentHistory                 0x10406
  #define DocumentHelp                    0x10407

  /* Document menu event codes */

  #define EDocumentToBeShown              0x105ff
  #define EDocumentHidden                 0x105fe

  /* File menu component IDs */

  #define FileSaveFrame                   0x10600 /* Leading to Save dialogue for saving frame source      */
  #define FileSaveParent                  0x10601 /* Leading to Save dialogue for saving parent source     */
  #define FileSaveAncestor                0x10607 /* Leading to Save dialogue for saving ancestor source   */
  #define FilePrint                       0x10602 /* Item leading to the Print dialogue                    */
  #define FileExport                      0x10603 /* Item leading to the Export submenu                    */
  #define FileSaveFrameLocation           0x10604 /* Leading to Save dialogue for saving current location  */
  #define FileSaveParentLocation          0x10605 /* Leading to Save dialogue for saving parent location   */
  #define FileSaveAncestorLocation        0x10606 /* Leading to Save dialogue for saving ancestor location */
  #define FileItemInfo                    0x10608 /* Leading to Item Information window                    */
  #define FileViewSource                  0x10609 /* Act as if the View Source toolbar button was pressed  */

  /* File menu event codes */

  #define EFileToBeShown                  0x107ff

  /* Export menu component IDs */

  #define ExportAsDraw                    0x10800 /* Leading to Save dialogue for saving page as Draw     */
  #define ExportAsText                    0x10801 /* Leading to Save dialogue for saving page as Text     */
  #define ExportLink                      0x10802 /* Leading to Save dialogue for saving link             */
  #define ExportPicture                   0x10803 /* Leading to Save dialogue for saving foreground image */
  #define ExportBackground                0x10804 /* Leading to Save dialogue for saving background image */
  #define ExportAsSHelp                   0x10805 /* Leading to Save dialogue for a StrongHelp manual     */

  /* Reserved numberspace item for PDF printing; don't assign to menu */
  /* entries - used within SaveFile.c, see e.g. savefile_open_for()   */

  #define ExportAsPDF                     0x108ff

  /* Export menu event codes */

  #define EExportToBeShown                0x109ff

  /* Oops, thinking in base 10. Where's 0x10a00, 0x10c00 and 0x10e00? */
  /* Reserved for future expansion, of course ;-)                     */
  /*                                                                  */
  /* Encoding (internationalisation) menu event codes                 */

  #define EEncodingSelect                 0x11000 /* Raised when any item in the Encoding menu and its submenus is selected */
  #define EEncodingFromDocument           0x11001 /* The user selected "From document" at the top of the Encoding menu      */

  #define EEncodingToBeShown              0x111ff

  /* Navigate menu component IDs */

  #define NavigateOpenURL                 0x11200 /* Item leading to the Open URL dialogue */
  #define NavigateHome                    0x11201 /* Go to Home page                       */
  #define NavigateBack                    0x11202 /* Go back in local history              */
  #define NavigateForward                 0x11203 /* Go forward in local history           */
  #define NavigateReload                  0x11204 /* Reload this page                      */
  #define NavigateLoadAllImages           0x11205 /* Load all images                       */
  #define NavigateStopAllFetches          0x11206 /* Stop all fetches                      */

  /* Navigate menu event codes */

  #define ENavigateToBeShown              0x113ff

  /* Hotlist menu (from document menu) component IDs */

  #define HotlistShowHotlist              0x11400
  #define HotlistAddThisPage              0x11401
  #define HotlistRemoveThisPage           0x11402
  #define HotlistSaveHotlist              0x11403
  #define HotlistSaveToServer             0x11404 /* For multiuser builds (a.k.a. Save As Default) */

  /* Hotlist menu event codes (NB for showing the hotlist, */
  /* use EButtonBarViewHotlist, and for adding items use   */
  /* EButtonBarAddToHotlist). Registered in Hotlist.c...   */

  #define EHotlistRemoveThisPage          0x11402 /* Not implemented yet */
  #define EHotlistSaveToServer            0x11404 /* For multiuser builds */

  #define EHotlistToBeShown               0x115ff
  #define EHotlistHidden                  0x115fe
  #define EHotlistCancelDrag              0x115fd

  #define EHotlistSelectAll               0x115fc
  #define EHotlistClearSelect             0x115fb
  #define EHotlistOpenAll                 0x115fa
  #define EHotlistCloseAll                0x115f9
  #define EHotlistDelete                  0x115f8
  #define EHotlistShowDescriptions        0x115f7
  #define EHotlistShowURLs                0x115f6

  /* Utilities menu component IDs */

  #define UtilsFindText                   0x11600
  #define UtilsURLBar                     0x11601
  #define UtilsButtonBar                  0x11602
  #define UtilsStatusBar                  0x11603
  #define UtilsUnderlineLinks             0x11604
  #define UtilsUseDocumentColours         0x11605
  #define UtilsShowForegroundImages       0x11606
  #define UtilsShowBackgroundImages       0x11607
  #define UtilsFullScreen                 0x11608
  #define UtilsMarkers                    0x11609
  #define UtilsURIHandler                 0x1160a

  /* Utilities menu event codes */

  #define EUtilsToBeShown                 0x117ff

  /* Main hotlist window - miscellaneous menu component IDs. These */
  /* are largely independent of other browser operation and so     */
  /* only those that absolutely must to be here are included.      */

  #define MiscHotlistSaveObject           0x11800

  /* History menu component IDs */

  #define HistorySaveLocal                0x11a00
  #define HistorySaveGlobal               0x11a01
  #define HistoryEmptyLocal               0x11a02
  #define HistoryEmptyGlobal              0x11a03
  #define HistoryEmptyImage               0x11a04

  /* History menu event codes */

  #define EHistoryToBeShown               0x11bff

  /* Help menu event codes */

  #define EHelpFromHelpString             0x11dff
  #define EHelpReleaseNotes               0x11dfe
  #define EHelpAboutPage                  0x11dfd

  /* The range 0x11d00 to 0x11d7f map to Controls file entries  */
  /* JumpTo00 to JumpTo7f which hold URLs to go to - this event */
  /* may thus be used to command a jump to a specific URL from  */
  /* any source, not just a menu item. This event is trapped    */
  /* through the handle_miscellaneous_event function.           */

  #define EHelpGenericBase                0x11d00
  #define EHelpGenericTop                 0x11d7f

  /* Markers menu - list of actions */

  #define MarkerActionsSetMarker          0x12000
  #define MarkerActionsJumpToMarker       0x12001
  #define MarkerActionsClearMarker        0x12002

  #define EMarkerActionsToBeShown         0x121ff

  /* Markers menu - list of markers. Entries should raise default events. */

  #define MarkerListBase                  0x12200
  #define MarkerListLimit                 MarkerListBase + Limits_Markers - 1

  #define EMarkerListToBeShown            0x123ff

  /* Markers menu - combined entries. Entries should raise default events. */

  #define MarkerCombinedSetBase           0x12400
  #define MarkerCombinedJumpToBase        0x12480
  #define MarkerCombinedClearBase         0x12500
  #define MarkerCombinedSetLimit          MarkerCombinedSetBase    + Limits_Markers - 1
  #define MarkerCombinedJumpToLimit       MarkerCombinedJumpToBase + Limits_Markers - 1
  #define MarkerCombinedClearLimit        MarkerCombinedClearBase  + Limits_Markers - 1

  #define EMarkerCombinedToBeShown        0x125ff

  /* URI handler menu */

  #define URIHandlerNever                 0x12600
  #define URIHandlerRequestsOnly          0x12601
  #define URIHandlerBroadcastUnknowns     0x12602
  #define URIHandlerUnknownsAndRequests   0x12603
  #define URIHandlerEverythingAndRequests 0x12604

  #define EURIHandlerToBeShown            0x127ff

  /* List menu. Clash of namespaces means we call this 'ListMenu' */
  /* to avoid confusion with the List dialogue box (oops).        */

  #define ListMenuSelectAll               0x12800
  #define ListMenuClearSelection          0x12801
  #define ListMenuRemove                  0x12802
  #define ListMenuAdd                     0x12803

  /* The List menu event codes allow keyboard shortcuts to raise the  */
  /* same events. The handlers in this case are all done in List.c... */

  #define EListMenuSelectAll              0x12800
  #define EListMenuClearSelection         0x12801
  #define EListMenuRemove                 0x12802
  #define EListMenuAdd                    0x12803

  #define EListMenuToBeShown              0x129ff

  /* Log menu */

  #define LogSaveLog                      0x12a00
  #define LogClear                        0x12a01
  #define LogBrowser                      0x12a02

  #define ELogToBeShown                   0x12bff

  /* Function prototypes */

  int            menus_item_selected          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int            menus_toggle_tick            (ObjectId o, ComponentId c);

  int            menus_show_main              (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int            menus_show_utils             (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int            menus_show_file              (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int            menus_show_navigate          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int            menus_show_choices           (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int            menus_show_export            (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int            menus_show_document          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int            menus_show_history           (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int            menus_show_marker_actions    (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int            menus_show_marker_list       (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int            menus_show_marker_combined   (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int            menus_show_uri               (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int            menus_show_list_menu         (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int            menus_show_log               (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

  int            menus_hide_document          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int            menus_close_document_if_mine (browser_data * b);

  HStream      * menus_document_opened_over   (void);
  browser_data * menus_document_over_browser  (void);
  void           menus_set_opened_details     (browser_data * b, HStream * t);

  int            menus_help_from_help_string  (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int            menus_help_release_notes     (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int            menus_help_about_page        (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  void           menus_help_miscellaneous     (browser_data * b, int which);

#endif /* Browser_Menus__ */
@


1.22
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@d114 5
@


1.21
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@a34 1
  #include "Limits.h"
@


1.20
log
@Long overdue check-in of intermediate browser build, from continued "out
of hours" work. Forgot to add a few files last time too.

List dialogue box handler complete, and exclusion lists implemented
within the main browser code. Full documentation in Choices file.
Save routine knows all about it but is now getting very slow - must
come up with a better scheme; for now, it puts the hourglass on...

StripExtensions option controls auto stripping of filename extensions.

More sensible ancestor / frame selection for keyboard shortcut items
and the save dialogues - having selected a frame won't lock you into
it for F3 and related shortcuts now (input focus in URL writable ->
get ancestor details, input focus in frame -> get frame details). F4
works in frames. F5 now generally present for 'view source' with a
corresponding menu entry in the File menu.

Odd thing in later Res files; there's no action set for Adjust clicks
on the main ToolAction items in the button bar. Very odd. Nothing
appears to be set in v2.07 either, yet adjust-click works. Even
stranger. Anyway, added in the relevant event details (same as for
Select click in all cases) and this fixes the problem.

Background colours in the TABLE tag ignored the "don't print any
backgrounds" Print Style setting. Fixed. Meanwhile, the "black
text with no backgrounds" option wasn't getting this right either;
fixed this also.

Event logging implemented; HTTP errors and script output via.
window.print extension. No internal error output yet.

Faith:Never behaviour extended. If ever a server sends something with
no content type or an unhandleable type, the browser will try and get a
filetype from the URL. If it gets text or HTML, it'll render the file.
Else it'll save it. Hacks around IIS 4's lack of a content type field
in the Marketeye login stuff, and similar other slightly broken sites.
@
text
@d15 12
a26 9
/***************************************************/
/* File   : Menus.h                                */
/*                                                 */
/* Purpose: Handle browser menus.                  */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 20-Nov-96: Created.                    */
/***************************************************/
d28 2
a29 1
/* Main menu (menu from the icon bar icon) component IDs */
d31 2
a32 9
#define MainInfo                        0x10000 /* Item leading to the Info window            */
#define MainChoices                     0x10001 /* Item leading to Choices window             */
#define MainOpenURL                     0x10002 /* Item leading to the Open URL dialogue      */
#define MainShowHotlist                 0x10003 /* Item leading to the Hotlist                */
#define MainQuit                        0x10004
#define MainCache                       0x10005 /* Broadcast appropriate AppControl message   */
#define MainHelp                        0x10006 /* Item leading to the Help submenu           */
#define MainLogOut                      0x10007 /* For multiuser builds                       */
#define MainErrorLogs                   0x10008 /* Item leading to the Error Logs dialogue    */
d34 2
a35 1
/* Main menu event codes */
d37 1
a37 2
#define EMainCache                      0x10005
#define EMainToBeShown                  0x101ff
d39 9
a47 2
/* Choices menu component IDs - these control what defaults any new */
/* browser windows will take.                                       */
d49 1
a49 8
#define ChoicesURLBar                   0x10200
#define ChoicesButtonBar                0x10201
#define ChoicesStatusBar                0x10202
#define ChoicesUnderlineLinks           0x10203
#define ChoicesUseDocumentColours       0x10204
#define ChoicesShowForegroundImages     0x10205
#define ChoicesShowBackgroundImages     0x10206
#define ChoicesFullScreen               0x10207
d51 2
a52 1
#define ChoicesSave                     0x10208 /* Save the choices (with no save dialogue) */
d54 2
a55 1
/* Choices menu event codes */
d57 8
a64 1
#define EChoicesToBeShown               0x103ff
d66 1
a66 2
/* Document menu (main menu from a browser window) component IDs */
/* - all lead to other submenus.                                 */
d68 1
a68 8
#define DocumentFile                    0x10400
#define DocumentNavigate                0x10401
#define DocumentHotlist                 0x10402
#define DocumentResources               0x10403
#define DocumentUtilities               0x10404
#define DocumentDisplay                 0x10405
#define DocumentHistory                 0x10406
#define DocumentHelp                    0x10407
d70 1
a70 1
/* Document menu event codes */
d72 2
a73 2
#define EDocumentToBeShown              0x105ff
#define EDocumentHidden                 0x105fe
d75 8
a82 1
/* File menu component IDs */
d84 1
a84 10
#define FileSaveFrame                   0x10600 /* Leading to Save dialogue for saving frame source      */
#define FileSaveParent                  0x10601 /* Leading to Save dialogue for saving parent source     */
#define FileSaveAncestor                0x10607 /* Leading to Save dialogue for saving ancestor source   */
#define FilePrint                       0x10602 /* Item leading to the Print dialogue                    */
#define FileExport                      0x10603 /* Item leading to the Export submenu                    */
#define FileSaveFrameLocation           0x10604 /* Leading to Save dialogue for saving current location  */
#define FileSaveParentLocation          0x10605 /* Leading to Save dialogue for saving parent location   */
#define FileSaveAncestorLocation        0x10606 /* Leading to Save dialogue for saving ancestor location */
#define FileItemInfo                    0x10608 /* Leading to Item Information window                    */
#define FileViewSource                  0x10609 /* Act as if the View Source toolbar button was pressed  */
d86 2
a87 1
/* File menu event codes */
d89 1
a89 1
#define EFileToBeShown                  0x107ff
d91 10
a100 1
/* Export menu component IDs */
d102 1
a102 6
#define ExportAsDraw                    0x10800 /* Leading to Save dialogue for saving page as Draw     */
#define ExportAsText                    0x10801 /* Leading to Save dialogue for saving page as Text     */
#define ExportLink                      0x10802 /* Leading to Save dialogue for saving link             */
#define ExportPicture                   0x10803 /* Leading to Save dialogue for saving foreground image */
#define ExportBackground                0x10804 /* Leading to Save dialogue for saving background image */
#define ExportAsSHelp                   0x10805 /* Leading to Save dialogue for a StrongHelp manual     */
d104 1
a104 1
/* Export menu event codes */
d106 1
a106 1
#define EExportToBeShown                0x109ff
d108 6
a113 4
/* Oops, thinking in base 10. Where's 0x10a00, 0x10c00 and 0x10e00? */
/* Reserved for future expansion, of course ;-)                     */
/*                                                                  */
/* Encoding (internationalisation) menu event codes                 */
d115 1
a115 2
#define EEncodingSelect                 0x11000 /* Raised when any item in the Encoding menu and its submenus is selected */
#define EEncodingFromDocument           0x11001 /* The user selected "From document" at the top of the Encoding menu      */
d117 1
a117 1
#define EEncodingToBeShown              0x111ff
d119 4
a122 1
/* Navigate menu component IDs */
d124 2
a125 7
#define NavigateOpenURL                 0x11200 /* Item leading to the Open URL dialogue */
#define NavigateHome                    0x11201 /* Go to Home page                       */
#define NavigateBack                    0x11202 /* Go back in local history              */
#define NavigateForward                 0x11203 /* Go forward in local history           */
#define NavigateReload                  0x11204 /* Reload this page                      */
#define NavigateLoadAllImages           0x11205 /* Load all images                       */
#define NavigateStopAllFetches          0x11206 /* Stop all fetches                      */
d127 1
a127 1
/* Navigate menu event codes */
d129 1
a129 1
#define ENavigateToBeShown              0x113ff
d131 7
a137 1
/* Hotlist menu (from document menu) component IDs */
d139 1
a139 5
#define HotlistShowHotlist              0x11400
#define HotlistAddThisPage              0x11401
#define HotlistRemoveThisPage           0x11402
#define HotlistSaveHotlist              0x11403
#define HotlistSaveToServer             0x11404 /* For multiuser builds (a.k.a. Save As Default) */
d141 1
a141 3
/* Hotlist menu event codes (NB for showing the hotlist, */
/* use EButtonBarViewHotlist, and for adding items use   */
/* EButtonBarAddToHotlist). Registered in Hotlist.c...   */
d143 1
a143 2
#define EHotlistRemoveThisPage          0x11402 /* Not implemented yet */
#define EHotlistSaveToServer            0x11404 /* For multiuser builds */
d145 5
a149 3
#define EHotlistToBeShown               0x115ff
#define EHotlistHidden                  0x115fe
#define EHotlistCancelDrag              0x115fd
d151 3
a153 7
#define EHotlistSelectAll               0x115fc
#define EHotlistClearSelect             0x115fb
#define EHotlistOpenAll                 0x115fa
#define EHotlistCloseAll                0x115f9
#define EHotlistDelete                  0x115f8
#define EHotlistShowDescriptions        0x115f7
#define EHotlistShowURLs                0x115f6
d155 2
a156 1
/* Utilities menu component IDs */
d158 3
a160 11
#define UtilsFindText                   0x11600
#define UtilsURLBar                     0x11601
#define UtilsButtonBar                  0x11602
#define UtilsStatusBar                  0x11603
#define UtilsUnderlineLinks             0x11604
#define UtilsUseDocumentColours         0x11605
#define UtilsShowForegroundImages       0x11606
#define UtilsShowBackgroundImages       0x11607
#define UtilsFullScreen                 0x11608
#define UtilsMarkers                    0x11609
#define UtilsURIHandler                 0x1160a
d162 7
a168 1
/* Utilities menu event codes */
d170 1
a170 1
#define EUtilsToBeShown                 0x117ff
d172 11
a182 3
/* Main hotlist window - miscellaneous menu component IDs. These */
/* are largely independent of other browser operation and so     */
/* only those that absolutely must to be here are included.      */
d184 1
a184 1
#define MiscHotlistSaveObject           0x11800
d186 1
a186 1
/* History menu component IDs */
d188 3
a190 5
#define HistorySaveLocal                0x11a00
#define HistorySaveGlobal               0x11a01
#define HistoryEmptyLocal               0x11a02
#define HistoryEmptyGlobal              0x11a03
#define HistoryEmptyImage               0x11a04
d192 1
a192 1
/* History menu event codes */
d194 1
a194 1
#define EHistoryToBeShown               0x11bff
d196 5
a200 1
/* Help menu event codes */
d202 1
a202 3
#define EHelpFromHelpString             0x11dff
#define EHelpReleaseNotes               0x11dfe
#define EHelpAboutPage                  0x11dfd
d204 1
a204 5
/* The range 0x11d00 to 0x11d7f map to Controls file entries  */
/* JumpTo00 to JumpTo7f which hold URLs to go to - this event */
/* may thus be used to command a jump to a specific URL from  */
/* any source, not just a menu item. This event is trapped    */
/* through the handle_miscellaneous_event function.           */
d206 1
a206 2
#define EHelpGenericBase                0x11d00
#define EHelpGenericTop                 0x11d7f
d208 3
a210 1
/* Markers menu - list of actions */
d212 5
a216 3
#define MarkerActionsSetMarker          0x12000
#define MarkerActionsJumpToMarker       0x12001
#define MarkerActionsClearMarker        0x12002
d218 2
a219 1
#define EMarkerActionsToBeShown         0x121ff
d221 1
a221 1
/* Markers menu - list of markers. Entries should raise default events. */
d223 3
a225 2
#define MarkerListBase                  0x12200
#define MarkerListLimit                 MarkerListBase + Limits_Markers - 1
d227 1
a227 1
#define EMarkerListToBeShown            0x123ff
d229 1
a229 1
/* Markers menu - combined entries. Entries should raise default events. */
d231 2
a232 6
#define MarkerCombinedSetBase           0x12400
#define MarkerCombinedJumpToBase        0x12480
#define MarkerCombinedClearBase         0x12500
#define MarkerCombinedSetLimit          MarkerCombinedSetBase    + Limits_Markers - 1
#define MarkerCombinedJumpToLimit       MarkerCombinedJumpToBase + Limits_Markers - 1
#define MarkerCombinedClearLimit        MarkerCombinedClearBase  + Limits_Markers - 1
d234 1
a234 1
#define EMarkerCombinedToBeShown        0x125ff
d236 1
a236 1
/* URI handler menu */
d238 6
a243 5
#define URIHandlerNever                 0x12600
#define URIHandlerRequestsOnly          0x12601
#define URIHandlerBroadcastUnknowns     0x12602
#define URIHandlerUnknownsAndRequests   0x12603
#define URIHandlerEverythingAndRequests 0x12604
d245 1
a245 1
#define EURIHandlerToBeShown            0x127ff
d247 1
a247 2
/* List menu. Clash of namespaces means we call this 'ListMenu' */
/* to avoid confusion with the List dialogue box (oops).        */
d249 5
a253 4
#define ListMenuSelectAll               0x12800
#define ListMenuClearSelection          0x12801
#define ListMenuRemove                  0x12802
#define ListMenuAdd                     0x12803
d255 1
a255 2
/* The List menu event codes allow keyboard shortcuts to raise the  */
/* same events. The handlers in this case are all done in List.c... */
d257 2
a258 4
#define EListMenuSelectAll              0x12800
#define EListMenuClearSelection         0x12801
#define EListMenuRemove                 0x12802
#define EListMenuAdd                    0x12803
d260 4
a263 1
#define EListMenuToBeShown              0x129ff
d265 2
a266 1
/* Log menu */
d268 4
a271 3
#define LogSaveLog                      0x12a00
#define LogClear                        0x12a01
#define LogBrowser                      0x12a02
d273 1
a273 1
#define ELogToBeShown                   0x12bff
d275 1
a275 1
/* Function prototypes */
d277 3
a279 2
int            menus_item_selected          (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_toggle_tick            (ObjectId o, ComponentId c);
d281 1
a281 14
int            menus_show_main              (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_utils             (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_file              (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_navigate          (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_choices           (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_export            (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_document          (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_history           (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_marker_actions    (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_marker_list       (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_marker_combined   (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_uri               (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_list_menu         (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_log               (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
d283 1
a283 2
int            menus_hide_document          (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_close_document_if_mine (browser_data * b);
d285 2
a286 3
HStream      * menus_document_opened_over   (void);
browser_data * menus_document_over_browser  (void);
void           menus_set_opened_details     (browser_data * b, HStream * t);
d288 28
a315 4
int            menus_help_from_help_string  (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int            menus_help_release_notes     (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int            menus_help_about_page        (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
void           menus_help_miscellaneous     (browser_data * b, int which);
@


1.19
log
@Intermediate check-in; building a browser from this gives you something
between 2.07 and 2.08. Only the Phoenix JavaScript resources are fully
up to date.

I *think* these are the changes since the last check-in:

When saved as a Draw file, horizontal rules were plotted one page width
too far to the right (wonder when that started happening?!). Fixed. In
addition, DrawFiles now accepted as OBJECTs - they weren't in the
recognised filetype list before. Doh.

Table size calculator tables_count_table would overestimate the number
of cells where ROWSPAN was present and there were other rows below the
one spanned. Fixed. In certain odd cases (e.g. optimised image exports
as HTML tables (!!) from the Gimp) this can save vast amounts of RAM.

Fixed problem where printing stops in the middle of a document. Redraw
engine pagination code was written in the days where lines couldn't
have gaps between them; they can now. If a gap fell at the bottom of
a page the engine would look down, see no line straddling or touching
the page edge, and assume there was nothing more. This case is now
correctly handled.

Made sure desktop and testbed Browse Res files had up-to-date Encoding
menus (v2.07 Phoenix has different menus from v2.07 Browse by oversight).

URL auto-completion piggy-backed onto manual completion code; any string
without '.', '/' or ':' in it gets run through completion to see if a
more meaningful item can be produced - "www" special cased out though.

New List dialogue box handler, used for proxy exclusions etc.
(incomplete), complete with appropriate Res file objects.
@
text
@d35 1
d88 1
d260 1
d263 8
d289 1
@


1.18
log
@Everyone else seems to be checking lots of stuff in lately, so I've
decided to join in. This is an intermediate check-in and so not all
resources etc. will be up to date. You should be able to make Phoenix
and a debug build out of it. As a reminder, to make a JavaScript build:

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean. This now strips dynamic dependencies from the MakeFile
   automatically, to save you having to do it yourself.
 * Run one of the TaskObey files with the "J" suffix, e.g. !DeskBrwsJ -
   this uses the same .o directory for object files and exports to the
   same position in the Targets directory as the non-JavaScript build,
   but it does produce a unique binary in 'abs' and symbols table in
   'syms'.
 * Sourcing an appropriate !Run (with increased WimpSlot value), !Boot
   and About resource is done automatically.
 * Some, but not all of the !xxxD (debug) TaskObey files will make
   JavaScript versions in passing - check the JSUFFIX value on the Make
   command line parameters in the file.

This'll only work on RISC OS 3.1 due to the use of MemLib.

Here's the change list:

Included MNG icons in sprites files; added Sprites23 for some builds.
Added in ANT URL file icon (b28) derived from URI file icon, because
the Save dialogue can need it.

No, you do *not* need to define the same keyboard shortcuts in each
frame since the ancestor keeps the input focus and we've basically
dropped non-nested Wimp support. Maintaining no less than 4 lists of
identical shortcuts was a pain. Some Res files now only have the
lists in the main browser window and button bar objects (these two
are both required still).

Ursula build Markers button arrangement changed from 1x3 horizontal to
2x2 tilted, as in Phoenix, by popular demand.

Couple of hotlist bugs fixed; dragging an item and deleteing it with
Ctrl+X didn't terminate the drag, and deleteting an item underneath a
menu opened for it didn't close the menu.

'SendReferer' option added to all Choices files, all set to 'always'.
Put just beneath 'Clone' as it refers to header items, though really,
both Clone and SendReferer should probably be in the "Fetch controls"
section rather than "Multiuser environments and proxying"! Front-end
control of this is available.

In image_export_original, save_save_source, save_transfer_source and
save_save_object, flex_set_budge(0) was called to lock the heap but the
return value wasn't stored. flex_set_budge(1) was then used to unlock
the heap. All calls now remember and restore the old value, which is
both safer in case one calls another and allows the flex_set_budge
call in Main.c to have an application-wide meaning, as intended.

Some restructuring to the data load and RAM transfer sections of
Protocols.c; remote hotlist builds wouldn't allow files to be loaded
to browser windows before, and can now drop URL, URI or text files to
the Open URL dialogue.

New option "MinimumFontSize", lets the 'size' attribute of the 'font'
element be overridden. Default value is 1, to allow the full range of
values for the attribute. Setting to 7, for example, would give font
size 7 text at all times. Another new option, "ToggleOnXOnly", to
make Toggle Size only extend the window vertically (with Ctrl then
being used to toggle to genuine full size, rather than vice versa).
All Choices files updated to hold both of these options; only the
first has front-end control available (see debug build Res file).

JavaScript Document object exists; frames array etc. working. Can now
just about use "http://www.acorn.com/~ahodgkin/jschain/" but it does
abort after a bit - problems with frames again, I suspect. Is is pretty
slow, too. Can now press Escape to terminate a script.

Main.c erroneously referred to Controls file entry "StopWebServe" as
"StopWebProxy". Fixed.

Keyboard shortcuts to raise SaveFile are now possible in a general sense;
the code before was in the ToBeShown handler and just checked for a parent
component of -1. It then assumed "save frame HTML source". Now there's the
savefile_raise_from_shortcut function, which together with the seven new
event codes in SaveFile.h allows saving of HTML source and frame location,
export of links, images, backgrounds and the page as text or draw, to all
be invoked by keyboard shortcuts. Some Res files have some of these defined.

In reformat_check_height, the first check to see if setpara should be set
references a field in tpLast without checking if it is NULL. Whilst the
'line > 0' check should mean that tpLast wasn't NULL anyway, a direct
call to the function from outside of the reformatter might have tripped
up on this - the check for tpLast != NULL is now made.

Adjust-click on close icon in window showing file: URL attempts to open
the parent Filer window.

Reformatter used to try and find a selectable token if keyboard control
was enabled in a really stupid place - could make reformatting become
very slow if no selectables were present, especially if the page had a
few tables on it. Preprocessor now does this (since it goes through all
of the tokens anyway), the reformatter just doing a last check to ensure
no frames have obscured the selectable and if so, it tries to move it.
Done in the reformatter as generating a line array implies the data really
is visible.

Ctrl+Tab URL completion now builds a full list of matches from the hotlist
and history and can cycle through them (Ctrl+Shift+Tab stepping backwards).

Will give a real error rather than just "Data Abort" if it goes wrong
now. Someone somewhere is setting bit 30 of the error which confused
the replacement signal handler. Flag bits are now masked off (as they
should've been to start with).
@
text
@d139 1
a139 1
/* EButtonBarAddToHotlist).                              */
d243 17
d277 1
@


1.17
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d266 1
@


1.16
log
@All !Run[D], Choices, Messages, Controls and Res files are up to date.

RefoKeep and RefoHold options added to, respectively, try and maintain
the line at the top of the visible area when reformatting, and not shrink
the vertical extent at the start of a reformat to try and avoid flicker
to the top of the page and back down again when RefoKeep is on. Choices
front-end implemented, which also allows RefoWait and RefoTime to be set.
Unfortunately for various reasons this doesn't help the page jumping when
unsized images come in (but RefoHold can improve matters...) - roll on
the image history.

DragToScroll and NoScrollBars options added for frames; included new
pointer type, Mouse_Shape_DTS, so relevant Controls file entries done
and Sprites[22] files updated as required. Noticed some builds have
a low-res ptr_link with a mask - mask removed.

Named anchor following fixed up somewhat - anchors near the bottom of
the page shouldn't be displayed, and then pulled down when the fetcher
releases null polls and ensures the y extent is correct (this through
implementing the min_height field in the browser_data structure).

RefoHang was never implemented and there seems little point to it now,
so the entry for it has been removed from the global choices structure
and all Choices files.

Markers menus should work properly now (in last check-in they would not
update correctly if Adjust was used on the entries).

URI handler usage now a lot more sensible, with configuration of how the
browser uses the module from both a Utils menu submenu (sic) and the
Choices dialogue.

Slightly dodgy 'hang around waiting for user input' stuff for the Cookies
dialogue box: All fetches are suspended; the fetcher remembers some info
about its state at the time the cookie came in, and restores it later; it
will only do this for one fetch at a time. It's necessary to single-thread
the fetcher at this point anyway, since other fetches may have a
dependency on the cookie that is hanging in mid-air at that point. As part
of this, some of the fetcher code has been split out into separate
functions (to try and 'black box' the code a bit). Anyway, Cookie Query
dialogue box now implemented with appropriate Choices file entry and
UI work in the Choices dialogue box.

Phoenix build Choices rearranged. Can now choose when the image history
is saved from the front end. Added also MSIE 4-style table option menu
for JPEG support (OS only, OS if it can handle it, internal only).

Should be a bit faster at loading the history - though 95% of the time
is spent in SWI URL_ParseURL. URL descriptions are stored more
efficiently as part of this - one malloc block instead of several
small blocks. The minimum block size for malloc blocks typically leads
to a significantly smaller startup wimpslot depending on the visit
history size.

Nasty bug in image system fixed. If an image size came in and a reformat
was to take place, the line the image lies in is found and the reformat
progresses from there. Unforunately, this didn't check to see if the
token can't be found in the line list, so it'd reformat from the top
of the page...! This would happen if, for example, an image halfway down
the page came in whilst a reformat for an image higher up had just begun.

In Choices.c, made choices_set_timetype_field, choices_set_uri_field,
choices_set_plugin_field, choices_set_cookie_field, and
choices_set_jpeg_field static (so they're not declared in Choices.h now).

Two memory leaks plugged in URL comparison routines in URLutils.c
(calling free() url_description instead of urlutils_free_descripton()).

Client pull reload handler was setting the reload flag if reloading
the same page, but forgetting to turn on reload_lock so
fetchpage_postprocessed was clearing the reload state... Similarly,
Ctrl+Shift+SELECT-Click on a link when the Controls file 'UseSmall'
entry is 'no' would not have reloaded as it should. Both fixed.

Frames shouldn't be so keen on acquiring horizontal scroll bars and never
letting them go when their width is decreased now. Frames set up for
'scrolling="yes"' will not start with no scroll bars and then gain them
shortly afterwards, causing flicker and two reformats - they'll start
with, and continue to hold, both scroll bars.

Pointer shouldn't flicker when over a frame border whilst other fetches
are progressing now.
@
text
@d99 1
@


1.15
log
@This is NOT a 'final' version of anything in particular. I'm checking it
in as I'm about to start playing around with low level window handling
(as part of the thing mentioned at the bottom of this log) - this could
screw things up quite badly if it goes wrong! =8*P

Consequently, I advise you not to check this out over your working sources,
and preferably not to check this out at all.

Markers system - events defined in MiscEvents.h will make Browse remember
where it is on the page. This position can be jumped back to later.
Some builds will have defined keyboard shortcuts Ctrl+Shift+F5 through
F8 to set a marker, and Ctrl+F5 through F8 to jump to a marker.

The front-end for the above now has gadgets 0x80 upwards on the Toolbar or
a set of menus (see Menus.h). Noticed an omission in copy_toolaction_info()
(didn't copy the gadget state) in passing; fixed.

browser_top_line() now works properly, as part of the above, but it'll be
slower than before. If flagged to only find a complete line, it'll do just
that, but whereas before this would require any tables that it looked
inside to be wholly visible, tables can now be partially visible and have
lines inside that are fully visible. This should help the Find function
too. There is a new call, browser_top_line_offset, which works as
browser_top_line but also returns a vertical scroll offset in the found
line (used for more accurate marker position). browser_bottom_line[_r]
turn out to never be used, even by the keyboard control routines, so they
have been removed from Browser.c (rather than spend a lot of time and
effort fixing them).

browser_show_token erroneously subtracted 1 from a particular coordinate
when calculating the y scroll position, which could lead to single pixel
page creep using the markers system. Corrected.

The View Resources button (see Toolbars.h) has been finally implemented,
insofar as it fetches the resources file to the current browser page (or
to a new window if Adjust is used, Controls file settings permitting).

menus_toggle_bars did not take account of the toolbar lower window border
edge correctly. It does now.

The reformatter has a prototype system to keep the vertical page position
when reformatting. This was coded about 5 minutes ago, and is not likely
to be reliable...
@
text
@d166 2
d214 1
a214 3
/* Markers menu - list of markers. Events raised to clear, set */
/* or jump to a marker as per Markers.h are dynamically set by */
/* the EMarkerListToBeShown event handler.                     */
d221 1
a221 1
/* Markers menu - combined entries */
d232 10
d258 1
a258 1

@


1.14
log
@Programming warehouse link removed from all hotlists - the page has gone.

Some compile-time hacks in place to use MemLib, a dynamic area based
malloc replacement which shrinks its heap when possible. All builds
have these switched off at the moment. Seemed to work with just Browse,
though there would be problems with message blocks stored in dynamic
areas because of the Wimp's '&3800000' check - however, it failed when
HTMLLib was made to use it, too. Don't know why yet.

ItemInfo.[c/h] source added, with Res file additions for testbed Browse
and Phoenix.

Small fetch windows now work properly regardless of toolbar settings
in the Choices.

Reload now reloads all images too, rather than only reloading them for
as long as the main page was being fetched.

Added a simple 'Find' facility.

Realised that event handlers in eventlib are called in reverse order
of registration, so the miscellaneous event handler is now registered
first rather than last.

Multiuser code added (most only active if SINGLE_USER is undefined). As
part of this, hotlist code now knows about read-only items (done for the
Customer-style 'Resources' file, but works generally anyway).
handle_add_hotlist doesn't try to save the hotlist itself anymore (the
hotlist_add function does all that through hotlist_modified anyway).

Customer build Choices and Controls updated slightly (e.g. ClaimHelp
off, hotlist to save on quit only).

Customer build now uses Phoenix-style buttons. Sprites files which
worked at the time (but will probably be out of date now) and included
most of the original Customer-style sprites are in
'Utils.Icons.Customer'.

Choices, Messages and Res files for all builds now stripped down to only
single user items or single plus multiuser for Customer build and testbed
build. Before, all contained a few multiuser bits in at least the Choices
file if not more.

Grammatical error ("Fetching frames contents" (sic.)) corrected in
default message, Toolbars.c, and all of the Messages files.

Customer build brought back to a servicable level (including
implementation of the Find dialogue box with animation and fixing
up authorisation and 'Stop' state in the tristate). Quite a few
missing #ifndef REMOTE_HOTLIST bits from hotlist code added...

Customer build will not use <Choices$Write> or Boot:Choices for any
file finding now. UseProxy defaults to 'yes', MaxImages to 2. Res
file includes Proxy Address setting (save_save_choices() now writes
the ProxyAddress line).
@
text
@d195 1
a195 1
/* (The range 0x11d00 to 0x11d7f map to Controls file entries */
d204 28
d245 4
@


1.13
log
@*Don't* try to load FilterManager 0.18 in !Run[D] files. Requires
WindowManager 3.98. Sets URI handler environment variables for
http, ftp and gopher.

Fixed 'doesn't reformat for unsized images' bug - only happens when the
deferred reformatter is enabled, hadn't remembered to check this in my
debug build where this is turned off. Oops.

Caret position in forms could get left behind despite attempts to rectify
this in v1.31 - now fixed (and faster, fortunately).

Hourglass + percentage displayed for History and Image History when
loading - it can take a while for very big histories, though in
practice you only see the visit history loading (has to do a lot
more work, and is thus quite a bit slower than the image history).

POST forms worked when targetted to frames, but were broken when
not targetted! (Forms data inherited from one browser to the same
browser; ended up freeing the flex block...). Fixed.

Now support 303 response code (redirect to GET). Treated as 301, i.e.
not support if STRICT_PARSER is defined, otherwise drops through to
the 302 handling code.

Pointer shouldn't get stuck in odd shapes when going to a new page now;
it gets reset to a standard shape every time the null handler that
checks the position is called, though (whether or not the handler thinks
the pointer is over a different token, if that token is NULL, it sets
the standard shape). A possible work around would be for a browser to
remember the pointer shape too; that's for the future, though.

Early stage table formatting functions could blow themselves apart if
tables_count_table decided there were no rows, columns or both. A
net table size of zero cells is now dealt with; slow, partial table
fetches in multiple windows with image loading turned on will now
*hopefully* be stable, where v1.31 would have bombed out repeatedly.

A nested frameset within one document will now inherit the border
width (frame spacing) and border colour of its parent. This is done
by copying the maxlen and indent fields of the parent token over
the child, and note it's done in the browser (fetch_preprocess_token),
not HTMLLib.

Border colour on a FRAMESET now used, with the first colour on any
FRAME within it overriding, as in NN 4 and MSIE 4.

<LI> bullets really do stick to the text next to them now (I'd done
that in an experimental piece of code and forgotten to merge it back
before the last check-in).

Browse$HotlistURL/URIFile and Browse$HomeURL/URIFile now work from
_TaskName in the Messages file, and are thus of the generic form
<App>$HotlistURL etc. - Docs.Notes and Docs.User updated appropriately.

Event 0x11d00 through to 0x11d7f will make the browser look up Controls
file entries 'JumpTo00' through to 'JumpTo7f' and read a URL from them.
This will be fetched in the ancestor window of the source of the event,
or a new window if such an ancestor can't be found [for Daytona demo].

NB: Nasty frames-related crash at http://www.teledanmark.dk/menu/start.htm
is *not* fixed in this source. NOBR is not supported.
@
text
@d33 2
d86 1
d134 1
d140 2
a141 2
#define EHotlistRemoveThisPage          0x11402
#define EHotlistSaveHotlist             0x11403
a222 1

@


1.12
log
@Check for WindowManager 3.97 and ensure Unicode$Path is set in all
!Run[D] files, don't set the Alias$@@PrintType_FF4 variable, and updated
Customer build ROM obey file variants. Various other changes to
the Run files for new module versions, updated paths to support
new positions of choices, hotlist and histories (see later), etc.

!Sprites[22] files hold small !app icons for some variants, and
an ic_browse sprite. Some variants now have a Sprites and Sprites22
file instead of just Sprites, with the former containing various
mode 12 or 15 specific sprites.

Text files dragged to the URL writable are treated as ANT URL files. This
relies on URLBarWrit (Toolbars.h) being a unique ID, which it should be,
but beware of the Hotlist and Choices numberspaces...

INPUT TYPE=BUTTON supported. Form items without a FORM tag are now shown
(as MSIE 4, but not NN 4).

'*', '-', '@@', '_' and '.' are not escaped when submitting forms now. The
Web interface to the IMDb now works.

INPUT TYPE=HIDDEN items will not affect the line height anymore - so
http://www.hotmail.com/ now has correctly aligned writable icons, for
example. Similarly, TAG_FORM and TAG_FORM_END items could push up
line height and don't anymore.

HRs with a specified pixel width will now influence the size of a table
cell (they didn't before).

BRs now checked by tagno field when the browser needs to know something
was an actual BR tag rather than just a line break signal, and by the
style bit entry when only the indication of a line break is required.

Table widths of 0 or 0% are ignored.

Trace.c updated to report height and background fields in a table_stream.

fm_putsl() writes a terminator into the string; the Forms.c routines were
calling this for displaying INPUT TYPE=PASSWORD fields using the FE_PassCode
literal string (a line of stars). This write into a read only data area
would make the debugger fault the access. A local char array is now used
instead, to get round this (note the use of var[]=literal rather than
var[sizeof(literal)]; strcpy(var, literal) due to some weird compiler bug
that copies the wrong thing into 'var' under some (undefined...)
circumstances).

Text areas don't scroll back to the top line when clicked in anymore;
single line writables don't scroll back to the left either. When
reentering a text area from 'above', the caret appears at the top line
rather than 'somewhere further down'...

ARROWS_MOVE_OUT compile time option at the top of Forms.c defines whether
you must press Tab/Shift+Tab to move between writable fields in forms or
if up/down will drop out of them, though if keyboard control is on this
is enforced (or you get trapped inside the form!).

urlutils_filetype_from_url now uses MimeMap module.

If fetcher is told a page is text, it'll check for a filename extension and
may choose to use this instead (e.g. it may find it's HTML instead). This
is to try and get around duff servers... (e.g. http://www.batalarms.co.uk/).

Save dialogues shouldn't flicker when options that don't change the
filetype are selected (before, the draggable sprite was always reset for
each selection). Noticed the erroneous setting of a static variable in
SaveFile.c by a call to this by SaveObject.c, and so added a flag to
savefile_set_filetype to deal with this - would have been possible to get
the wrong filetype sent to applications or at best the wrong filetype
sprite in the dialogue without that.

The caret shouldn't jump out of a form back to the URL writable if the page
reformats now.

Table background colours now supported (as in the colour you see in the
border space if the cellspacing is large enough; this is as in MSIE, not
as in Navigator). Drawfile output routines updated accordingly.

Corrected erroneous use of wimpt_dx() / wimpt_dy() in a couple of places
in Images.c, which meant that (say) 1x1 images didn't work correctly in
medium resolution display modes.

Now have support for save as text (component ID and event 0x12) and save
as Draw (component ID and event 0x13) buttons. Dubious conditions for
greying and ungreying the print, save source and view source buttons and
menu options sorted out as part of implementing the same for the two new
buttons; added greying out of their associated menu items in passing.

Turned kerning on in draw file objects (does mean a rather heinous
increase in file size, but this is the only way to ensure the draw file
matches the visible page).

Comments before functions in SaveDraw.c are now complete and up to date.

Image and visit histories now generate a crude hash number to speed up
searching for items. It does give a speed increase, though it's a
disappointingly small one.

Issue of left/right margins and cellpaddings sorted out. Now have
redraw_left/right_margin for finding out the basic gap you must leave.
redraw_left/right_gap then gives any extra indentation for LI, BLOCKQUOTE
or whatever. The last two can be subtracted from the display width to
get an available page width for any section of text. Note that
redraw_left_gap replaces redraw_margin. The redraw_start_x function
uses the above to work out where a line's left hand edge should be,
taking account of left/right/centre alignment. HRs have been fixed now
(they were quite broken in v1.30, I think) based on this new model and
the behaviour of MSIE/NN 4.

Fixed width of cells with no contents - cell padding values wouldn't
have worked properly as the reformatter returns 0 rather than the left
hand margin size if given no stream.

Removed FM_Absolute flags for Font_Paint (spotted by DBrown) - sets bit
2, which is reserved...?

IMG width and height in % terms now works correctly; a % of available
width (after margins and indents) or height on the main page or for
a table cell, if the image lies in one. Because of the chicken-and-egg
problem with the latter, the cell must specify a width and/or height
for things to work properly. If this is not done, you'll usually end
up with a 1:1 scaled image (as in Navigator 4, rather than ending up
with no image or even no cell (!), as in MSIE 4).

HEIGHT attribute on a TABLE tag is supported, but only in a crude
fashion; the extra height (if there is any) is distributed over the
rows in a linear fashion. This is probably all you have to do in
practice, but I haven't checked. To maintain a notion of min/max
height as well as width would of course require a great deal more
work...

If using client pull to reload a page with a fragment ('...#name')
specified, then the reload wouldn't work on the same page; it'd just
jump to the fragment position. This won't happen if b->reloading is
set now (so works in conjunction with client pull on the same page
forcing a non-cached fetch). Similarly, if POSTing to such a URL,
a fetch will proceed (both these fixes done originally for
http://jupiter.beseen.com/chat/rooms/g/1678/).

browser_inherit split to browser_inherit and browser_inherit_post_data;
the code for the latter didn't clear any post_data in the child before
copying from the parent either, and could cause flex errors (now fixed).

Res file for Ursula ('Desktop' Browse) build tweaked - bits in the
font choices dialogue renamed, and button bar rearranged to hold the
new Save As Draw button. Other builds have had Save As Draw and
Save As Text buttons added, or not, depending upon availability of
suitable sprites, required UI simplicity, etc.

Now have:

  Browse$ChoicesFile
  Browse$ControlsFile
  Browse$ChoicesSave
  Browse$ControlsSave

(the last two are new) for loading and saving of the Choices or Controls
files. If unset, <App$Dir>.Choices or <App$Dir>.Controls will be set.
E.g., you could set Browse$ChoicesFile to be:

  <App$Dir>.Choices,Choices:WWW.(app).Choices

for loading and

  <Choices$Write>.WWW.(app).Choices

for saving. (The browser never saves Controls at the moment, so the
relevant variable above isn't effectively implemented, but could be
in future). Similarly, to support asymetric loading/saving of the Hotlist,
there are HotlistSave, HistorySave and ImageHistorySave entries in Choices
to complement HotlistPath, HistoryPath and ImageHistoryPath (which are used
for loading). save_save_choices will create directories as needed to obtain
the given path (and has also been fixed in various areas that hadn't been
tested out until now; e.g. zero termination of the AppName$ChoicesFile
variable expansion...). !Run[D] files updated appropriately.

Table widthing code rewritten. Slower, but a lot better on the whole.
Still has some problems - still needs a final 'make sure nothing is
below minimum width' scan, which it should be possible to do without.
No time to fix this at present!

The reformatter will now 'glue together' an LI token followed by any
non-LI token; so a bullet point followed by an item should not be able to
have a line break inserted after the bullet because of very tight width
constraints (it could before - yuk...).

'about:' brings up a page about the browser and any Plug-Ins, as with
Navigator (for example).

URI files support titles, as per spec. version 8. Saving a current
location to the Hotlist will thus give a sensible title now (unless
you're in a frame, so there's no title to get...). Of course, v1.00
files without a title still work.

Note that NOBR is *not* supported in this build and this combined with
the new table widther may cause problems on some sites (e.g. Microsoft's
home page!).
@
text
@d191 9
d224 1
@


1.11
log
@Not all resources are up to date in this check-in, and documentation
both within source and stuff in 'Docs' is out of date or missing - I
was very pushed for time on this one... Hopefully will do another
'tidy up' check-in before close on Friday; until then, beware of
anything other than the Ursula (Desktop browser) build. Anyway...

Export As Draw done. As part of this, FONT SIZE and SUP / SUB adjustment
of font size is done in fm_token_font_info rather than fm_find_token_font.

Bullets and switches are plotted as indirected sprite items, rather than
indirected text + sprite items - this relied on being in a redraw loop to
pick the sprites up from the local pool (failed during printing).

URI files now have a LF line ending rather than CR... '*' recognised
as an empty field when loading via. RAM transfer now (only worked for
loading from disc before).

Gave placeholder bounding boxes 4 OS units more minimum extra gap
vertically and reduced horizontal addition to this value * 1.5, rather
than * 2 (see reformat_get_placeholder_size).

Background image tiling starts at ymax - h + 4, rather than ymax, so
there isn't the bottom line of pixels from the top tile always present
at the top of the window. The '+4' is for caution's sake.

Can now save a frame's HTML source, that of its parent or its ancestor,
and the same for the URI pointing to those documents - see Menus.h for
the relevant component IDs that should lead to the SaveFile dialogue.

Have hopefully fixed timeout = 0 values (i.e. 'forever') on things
like LinkTo; before, image fetches could override the state (so you'd
only ever see brief flickers of a given URL as the pointer went over
a link).

Save File dialogue will remember the state of option or radio buttons
for a given parent component origin and restore that state when the
dialogue is next opened from the same place (stops turning on saving
as a URL file also turning on 'save background images' for Draw file
export, etc.).

Use of a META tag to reload the *same* page now sets the 'reloading'
flag in the browser so that it doesn't go through a proxy - otherwise
pages which are meant to update periodically through client pull
don't work, as they keep coming out of the cache.

Can now handle images specifying just a width or height in the HTML
(other dimension is scaled accordingly, but note that the placeholder
size must still be 'dumb' until the image data comes in). An image
will now override an image history size entry for the same entry
with a different size.
@
text
@d67 1
d185 6
d210 5
@


1.10
log
@Fixed some glitches in the modified status bar code (e.g. status inference
wasn't working properly).

Shift+Toggle size always opened to not obscure the icon bar. If CMOS is
set to always show the icon bar, then Shift+Toggle size is meant to
reverse sense and open to absolute full size. It now does this.

!Run[D] files now require URL 0.22, HTTP 0.64, FTP 0.22, Gopher 0.08
and File 0.32.

Minor overhaul of 'Docs.Notes' (with 'Docs.User' similarly updated) to
include a few new bits and pieces.

Timeout values of 0 now mean 'forever'. Plug-in status messages now have
their own timeout setting. New Messages token 'Actv' for extra info when
a status message times out and the status line drops to 'Viewing' or
'Ready' when there is still a Busy state registered by the Plug-in.

Small Fetch windows don't become visible briefly for Plug-in fetches
when the fetch is complete (for SeeFetches:no, where these windows
should be hidden all the time).

WebServe may be controlled through the Browse front-end via.
Wimp_MAppControl reason code 4 (Wimp_MAppControl_Configure). Note the
renaming internally of 'WebServ' or 'WebServe' has been changed to
'Proxy' (with lower case equivalents where relevant); proxy name
and starting details come from the Messages file 'ProxyName' and
'ProxyComm' tokens. More in 'Docs.Notes'.

Res files updated for image history and PRE/TT font aspect ratio
choices. 'Don't expire' labels changed to 'Expire' (oops, didn't
notice the change in the development Browse's Res file when I
updated all of the others until now...).

When printing, Wimp_PlotIcon appears to ignore R4 and R5, plots
'somewhere' on the page, and tries to get the sprite from the global
pool. This latter part normally causes an error to be raised; though
on my machine I just get a corrupted error message. The Desktop font
gets lost at this point too. All have yet to be fixed; as an
interim work around, Wimp_PlotIcon objects are never drawn at all
if the global 'printing' flag is set.
@
text
@d75 8
a82 5
#define FileSaveFrame                   0x10600 /* Leading to Save dialogue for saving frame source     */
#define FileSaveParent                  0x10601 /* Leading to Save dialogue for saving parent source    */
#define FilePrint                       0x10602 /* Item leading to the Print dialogue                   */
#define FileExport                      0x10603 /* Item leading to the Export submenu                   */
#define FileSaveCurrentLocation         0x10604 /* Leading to Save dialogue for saving current location */
@


1.9
log
@Image history can be emptied from the History menu.

Significant reduction in number of times reformatter is called during
a table widthing session results in a dramatic speed increase for nested
tables (e.g. 64 deep with a paragraph of text in the deepest table takes
about two seconds to load with near-instantaneous subsequent reformats,
as opposed to taking optimistically 28 days for a 32 deep table!).
This code relies on a very big stack of assumptions...

Save as plain text implemented.

Choices, Messages and Res files brought up to date where necessary.
Version number taken to 1.28, 04-Dec-97 (so I don't forget later,
basically...).
@
text
@d32 6
d183 2
a184 2
int            menus_item_selected      (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_toggle_tick        (ObjectId o, ComponentId c);
d186 8
a193 7
int            menus_show_utils         (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_file          (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_navigate      (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_choices       (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_export        (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_main          (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_show_history       (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
d195 2
a196 2
int            menus_hide_main          (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int            menus_close_main_if_mine (browser_data * b);
d198 2
a199 2
HStream      * menus_main_opened_over   (void);
browser_data * menus_main_over_browser  (void);
@


1.8
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d169 1
@


1.7
log
@Sorted out Res files, including fixing position of 'bytes' label in one
of the Choices dialogues (I'd missed it out of a selection when everything
else got moved down a bit). Unfaded Enc_Chinese menu entries, made sure
text labels were wide enough for system font, changed 'Apply' on Choices
dialogue to 'Set', and added ^K to hotlist keyboard shortcut lists.
Print Setup (i.e. Print dialogue) buttons all set to 'local', so the
stupid Toolbox doesn't close the dialogue and lose the caret before I
can see if it was in there to start with...

256 colour hotlist sprites taken back to standard 16 colour versions,
since there's a significant speed penalty on slower machines. The
testbed browser still has the 256 colour versions so the designs aren't
completely lost.

Changed access settings to exported builds to wr/r - lr/r was really getting
on my nerves whenever I wanted to try something temporary out.

View source, save source and print handlers would all try to work if
there was no source to act on - despite the fact that toolbar buttons
would be greyed out form them. This is fixed.

The Navigate menu has components greyed to match the toolbar state,
when opened. It isn't kept up to date dynamically, though this shouldn't
really be a problem (reopen the submenu...). As part of this, finally
sorted out conditions for the Stop button to be greyed, or the
GoTo/Go/Stop tristate to be at 'Stop' versus 'GoTo'.

Deferred reformatting is now disabled for external image fetches.

Browser-local client pull flag removed; hitting the Stop button simply
cancels any null handlers working for it. That way, client pull switches
back on in passing at the next fetch (it was never really switched off).
So to stop client pull, hit the stop button at any point.

Done CELLPADDING attribute; cellpadding field in reformat_cell (Global.h)
is redundant since the table token is accessible from there, and so it has
been removed. CELLSPACING support also added.
@
text
@d60 1
d163 11
d185 1
@


1.6
log
@Encoding support added: if UNIFONT is defined then the browser will
attempt to use the system font to render Unicode characters (new
International module required). If not defined, the browser will just
handle Acorn Latin-1 characters, but HTMLLib will convert other encodings
into Latin-1. Must keep the UNIFONT define in sync with HTMLLib (if
defined HTMLLib outputs UTF-8, otherwise Acorn Latin-1).

Still needed:

Reverse encoding (converting form input etc back into the server's
character set).
Reparse when encoding changes.
Setting of charset from an attribute on the <A> tag.
@
text
@d112 1
a112 1
#define NavigateToBeShown               0x113ff
d169 1
@


1.5
log
@Added 'save current location'. Res files updated appropriately. Version
number taken to Beta-3; next will be 1.21, including K.Bracey's i18n code.
@
text
@d96 1
@


1.4
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d68 5
a72 4
#define FileSaveFrame                   0x10600 /* Leading to Save dialogue for saving frame source  */
#define FileSaveParent                  0x10601 /* Leading to Save dialogue for saving parent source */
#define FilePrint                       0x10602 /* Item leading to the Print dialogue                */
#define FileExport                      0x10603 /* Item leading to the Export submenu                */
@


1.3
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d25 135
d168 1
@


1.2
log
@Odd problem with Entries file meant none got checked in last time...
@
text
@d27 2
a28 2
int menus_item_selected (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int menus_toggle_tick   (ObjectId o, ComponentId c);
d30 10
a39 3
int menus_show_utils    (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int menus_show_file     (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int menus_show_choices  (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d17 3
a19 1
/* Purpose: Menu-related functions for the browser */
d21 2
a22 1
/* History: 20-Nov-96: Created                     */
@
