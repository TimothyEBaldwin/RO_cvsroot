head	1.4;
access;
symbols
	Browse-2_16:1.4
	Browse-2_15:1.4
	Browse-2_14:1.4
	Browse-2_13:1.4
	Browse-2_12:1.4
	Browse-2_11:1.4
	Browse-2_10:1.4
	Browse-2_09:1.4
	ahodgkin_208_i4_2:1.4
	ahodgkin_208_i4:1.2
	ahodgkin_208_i3:1.2
	ahodgkin_208_i2:1.2
	ahodgkin_208_i1:1.2
	ahodgkin_207release:1.2
	ahodgkin_206release:1.2
	ahodgkin_205release:1.2
	ahodgkin_204release:1.2
	ahodgkin_202release:1.2
	ahodgkin_201release:1.2
	ahodgkin_200release:1.2
	ahodgkin_133beta:1.2
	ahodgkin_132beta:1.2
	ahodgkin_131beta:1.2
	ahodgkin_130beta:1.2
	ahodgkin_129:1.2
	ahodgkin_128beta:1.2
	ahodgkin_128alpha:1.2
	ahodgkin_127beta2:1.2
	ahodgkin_127beta:1.2
	ahodgkin_126beta:1.2
	ahodgkin_AW97patch:1.2
	ahodgkin_AW97:1.2;
locks; strict;
comment	@# @;


1.4
date	2000.11.14.08.45.08;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.31.15.58.53;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.08.18.10.00.10;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.29.24;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.4
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Bitfields.h                                       */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: A few macros and definitions to handle large      */
/*          bitfields, created originally for recording used  */
/*          font handles.                                     */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 10-Mar-1997 (ADH): Created.                       */
/*          16-Apr-1997 (ADH): Modified to vary the size of   */
/*                             the bitfield according to      */
/*                             Limits_OS_FontHandles.         */
/*          10-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_Bitfields__
  #define Browser_Bitfields__

  #include "Limit.h"

  #define Bits_In_A_Byte 8
  #define Bitfield_Size  Limits_OS_FontHandles

  typedef long bitfield_mask;

  #define Number_Of_Bits     (sizeof(bitfield_mask) * Bits_In_A_Byte)
  #define How_Many_Bits(x,y) (((x) + ((y) - 1)) / (y))

  typedef struct bitfield_set
  {
    bitfield_mask bitfield_bits[How_Many_Bits(Bitfield_Size, Number_Of_Bits)];

  } bitfield_set;

  #define Bitfield_Set_Bit(p,n)   ((p)->bitfield_bits[(n) / Number_Of_Bits] |=  (1l << ((n) % Number_Of_Bits)))
  #define Bitfield_Clear_Bit(p,n) ((p)->bitfield_bits[(n) / Number_Of_Bits] &= ~(1l << ((n) % Number_Of_Bits)))
  #define Bitfield_Is_Set(p,n)    ((p)->bitfield_bits[(n) / Number_Of_Bits] &   (1l << ((n) % Number_Of_Bits)))

#endif /* Browser_Bitfields__ */
@


1.3
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d36 1
a36 1
  #include "Limits.h"
@


1.2
log
@Odd problem with Entries file meant none got checked in last time...
@
text
@d15 42
a56 35
/***************************************************/
/* File   : Bitfields.h                            */
/*                                                 */
/* Purpose: A few macros and definitions to handle */
/*          large bitfields, created originally    */
/*          for recording used font handles.       */
/*                                                 */
/* Author : A.D.Hodgkinson, adapted from the       */
/*          TCPIPLibs source sys/types.h           */
/*                                                 */
/* History: 10-Mar-97: Created.                    */
/*          16-Apr-97: Modified to vary the size   */
/*                     of the bitfield according   */
/*                     to Limits_OS_FontHandles.   */
/***************************************************/

#include "Limits.h"

#define Bits_In_A_Byte 8
#define Bitfield_Size  Limits_OS_FontHandles

typedef long bitfield_mask;

#define Number_Of_Bits     (sizeof(bitfield_mask) * Bits_In_A_Byte)
#define How_Many_Bits(x,y) (((x) + ((y) - 1)) / (y))

typedef struct bitfield_set
{
  bitfield_mask bitfield_bits[How_Many_Bits(Bitfield_Size, Number_Of_Bits)];

} bitfield_set;

#define Bitfield_Set_Bit(p,n)   ((p)->bitfield_bits[(n) / Number_Of_Bits] |=  (1l << ((n) % Number_Of_Bits)))
#define Bitfield_Clear_Bit(p,n) ((p)->bitfield_bits[(n) / Number_Of_Bits] &= ~(1l << ((n) % Number_Of_Bits)))
#define Bitfield_Is_Set(p,n)    ((p)->bitfield_bits[(n) / Number_Of_Bits] &   (1l << ((n) % Number_Of_Bits)))
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d17 1
d19 3
a21 3
/*          large bitfields (e.g. 256 bits),       */
/*          created originally for recording used  */
/*          font handles.                          */
d23 6
a28 2
/*          TCPIPLibs source sys/types.h.          */
/* History: 10-Mar-97: Created                     */
d31 2
d34 1
a34 1
#define Bitfield_Size  256
@
