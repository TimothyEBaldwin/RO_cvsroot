head	1.14;
access;
symbols
	Browse-2_16:1.14
	Browse-2_15:1.14
	Browse-2_14:1.14
	Browse-2_13:1.14
	Browse-2_12:1.14
	Browse-2_11:1.13
	Browse-2_10:1.13
	Browse-2_09:1.13
	ahodgkin_208_i4_2:1.13
	ahodgkin_208_i4:1.12
	ahodgkin_208_i3:1.12
	ahodgkin_208_i2:1.12
	ahodgkin_208_i1:1.12
	ahodgkin_207release:1.11
	ahodgkin_206release:1.10
	ahodgkin_205release:1.9
	ahodgkin_204release:1.9
	ahodgkin_202release:1.8
	ahodgkin_201release:1.8
	ahodgkin_200release:1.8
	ahodgkin_133beta:1.8
	ahodgkin_132beta:1.8
	ahodgkin_131beta:1.8
	ahodgkin_130beta:1.8
	ahodgkin_129:1.8
	ahodgkin_128beta:1.8
	ahodgkin_128alpha:1.8
	ahodgkin_127beta2:1.8
	ahodgkin_127beta:1.8
	ahodgkin_126beta:1.7
	ahodgkin_AW97patch:1.7
	ahodgkin_AW97:1.7;
locks; strict;
comment	@# @;


1.14
date	2006.03.13.22.06.20;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	2000.05.31.15.58.58;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	99.09.02.13.10.42;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	98.09.07.11.47.14;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	98.07.09.10.28.11;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	98.04.16.08.14.32;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.11.19.10.29.26;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.10.13.07.07.08;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.10.09.10.52.10;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.09.18.08.59.08;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.09.12.17.19.40;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.09.09.14.13.27;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.09.02.15.46.14;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.08.31.18.38.29;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.14
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Protocols.h                                       */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Handle some common protocol stuff, such as        */
/*          inter-application data transfer.                  */
/*                                                            */
/*          Function naming convention is as usual a source   */
/*          leafname derived prefix, then a code based on the */
/*          protocol being dealt with:                        */
/*                                                            */
/*          _atats_  App To App Transfer, Save                */
/*          _atatl_  App To App Transfer, Load                */
/*          _pp_     Printer Protocol                         */
/*          _auh_    Acorn URI Handler                        */
/*          _ih_     Interactive Help                         */
/*          _aub_    ANT URL Broadcast                        */
/*          _multi_  Message is used in more than one message */
/*                   protocol scheme                          */
/*          _util_   A utility function not directly          */
/*                   connected with a specific protocol.      */
/*                                                            */
/*          This is followed by the direction, so to speak -  */
/*          i.e. '_got_' for got a message, '_send_' for      */
/*          sending a message. Alternatively, a prefix        */
/*          '_bounced' is used for messages which return as a */
/*          UserMessage_Acknowledge event.                    */
/*                                                            */
/*          Because the Plug-In message protocol is such a    */
/*          large and self-contained entity, this is kept     */
/*          separate, in PlugIn.h.                            */
/*                                                            */
/*          Do NOT use MemLib here, as you will hit the Wimp  */
/*          bug relating to message blocks stored at high     */
/*          addresses (given an old enough Wimp) if you do.   */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 29-Aug-1997 (ADH): Created.                       */
/*          06-Sep-1997 (ADH): Significant rewriting to stop  */
/*                             various clashes and increase   */
/*                             flexibility.                   */
/*          07-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_Protocols__
  #define Browser_Protocols__

  #include <kernel.h>
  #include <tboxlibs/wimp.h>
  #include <tboxlibs/toolbox.h>

  #include "Global.h"

  /* Enumerations and definitons */

  /* For protocols_atats_send_data_save, the routine must know what sort  */
  /* of object is being saved so it can remember the relevant information */
  /* in the relevant place.                                               */

  typedef enum protocols_saving
  {
    protocols_saving_nothing = 0,        /* For completeness only, really                                                     */
    protocols_saving_document_source,    /* HTML or text document source, must give browser                                   */
    protocols_saving_document_as_text,   /* A page converted to a text file, must give browser                                */
    protocols_saving_document_as_draw,   /* A page converted to a draw file, must give browser                                */
    protocols_saving_document_as_shelp,  /* A page converted to a StrongHelp manual, must give browser                        */
    protocols_saving_document_as_pdf,    /* Printing to a PDF file, must give browser                                         */
    protocols_saving_link,               /* A link as a URI or URL file, must give browser and token                          */
    protocols_saving_frame_location,     /* The current location as a URI or URL file, must give browser                      */
    protocols_saving_log,                /* A log file                                                                        */
    protocols_saving_hotlist_entry,      /* A hotlist link item as a URI or URL file, must give NULL browser and hotlist item */
    protocols_saving_hotlist_selection,  /* A selection of hotlist items as an HTML file, don't need anything else            */
    protocols_saving_entire_hotlist,     /* Save the entire hotlist as an HTML file, don't need anything else                 */
    protocols_saving_image_original,     /* An image in its original form, must give browser and token                        */
    protocols_saving_image_sprite,       /* An image as a sprite, must given browser and token                                */
    protocols_saving_object,             /* A page object through the fetcher, must give browser                              */
    protocols_saving_local_history,      /* A local History save, must give browser                                           */
    protocols_saving_global_history      /* A global History save, don't need anything else                                   */
  }
  protocols_saving;

  /* Function prototypes */

  _kernel_oserror * protocols_atats_send_data_open       (int filetype, char * pathname);
  _kernel_oserror * protocols_atats_data_open_bounced    (WimpMessage * m);
  _kernel_oserror * protocols_atats_send_data_save       (browser_data * b, void * extra, char * leaf, int estimated_size, int filetype, protocols_saving saving, WimpGetPointerInfoBlock * info);
  _kernel_oserror * protocols_atats_data_save_bounced    (WimpMessage * m);
  _kernel_oserror * protocols_atats_got_ram_fetch        (WimpMessage * m);
  _kernel_oserror * protocols_atats_send_ram_transmit    (WimpMessage * m, int transmitted, int last);
  _kernel_oserror * protocols_atats_ram_transmit_bounced (WimpMessage * m);
  _kernel_oserror * protocols_atats_send_data_load       (WimpMessage * m);
  _kernel_oserror * protocols_atats_data_load_bounced    (WimpMessage * m);
  _kernel_oserror * protocols_atats_got_data_load_ack    (WimpMessage * m);
  _kernel_oserror * protocols_atats_send_any_pendings    (browser_data * b);

  _kernel_oserror * protocols_atatl_got_data_open        (WimpMessage * m);
  _kernel_oserror * protocols_atatl_got_data_load        (WimpMessage * m);
  _kernel_oserror * protocols_atatl_send_data_load_ack   (WimpMessage * m);
  _kernel_oserror * protocols_atatl_got_data_save        (WimpMessage * m);
  _kernel_oserror * protocols_atatl_ram_fetch_bounced    (WimpMessage * m);
  _kernel_oserror * protocols_atatl_got_ram_transmit     (WimpMessage * m);

  _kernel_oserror * protocols_pp_send_print_save         (void);
  _kernel_oserror * protocols_pp_print_save_bounced      (WimpMessage * m);
  _kernel_oserror * protocols_pp_got_print_error         (WimpMessage * m);
  _kernel_oserror * protocols_pp_got_print_type_odd      (WimpMessage * m);

  _kernel_oserror * protocols_auh_got_started            (WimpMessage * m);
  _kernel_oserror * protocols_auh_got_dying              (WimpMessage * m);
  _kernel_oserror * protocols_auh_got_process            (WimpMessage * m);
  _kernel_oserror * protocols_auh_got_return_result      (WimpMessage * m);

  int               protocols_ih_send_help_request       (int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle);
  _kernel_oserror * protocols_ih_help_request_bounced    (WimpMessage * m);
  _kernel_oserror * protocols_ih_got_help_reply          (WimpMessage * m);

  _kernel_oserror * protocols_aub_got_open_url           (WimpMessage * m);

  _kernel_oserror * protocols_multi_got_data_save_ack    (WimpMessage * m);

  void              protocols_util_make_unique_name      (char * buffer, int buffer_size);

#endif /* Browser_Protocols__ */
@


1.13
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d83 1
@


1.12
log
@Long overdue check-in of intermediate browser build, from continued "out
of hours" work. Forgot to add a few files last time too.

List dialogue box handler complete, and exclusion lists implemented
within the main browser code. Full documentation in Choices file.
Save routine knows all about it but is now getting very slow - must
come up with a better scheme; for now, it puts the hourglass on...

StripExtensions option controls auto stripping of filename extensions.

More sensible ancestor / frame selection for keyboard shortcut items
and the save dialogues - having selected a frame won't lock you into
it for F3 and related shortcuts now (input focus in URL writable ->
get ancestor details, input focus in frame -> get frame details). F4
works in frames. F5 now generally present for 'view source' with a
corresponding menu entry in the File menu.

Odd thing in later Res files; there's no action set for Adjust clicks
on the main ToolAction items in the button bar. Very odd. Nothing
appears to be set in v2.07 either, yet adjust-click works. Even
stranger. Anyway, added in the relevant event details (same as for
Select click in all cases) and this fixes the problem.

Background colours in the TABLE tag ignored the "don't print any
backgrounds" Print Style setting. Fixed. Meanwhile, the "black
text with no backgrounds" option wasn't getting this right either;
fixed this also.

Event logging implemented; HTTP errors and script output via.
window.print extension. No internal error output yet.

Faith:Never behaviour extended. If ever a server sends something with
no content type or an unhandleable type, the browser will try and get a
filetype from the URL. If it gets text or HTML, it'll render the file.
Else it'll save it. Hacks around IIS 4's lack of a content type field
in the Marketeye login stuff, and similar other slightly broken sites.
@
text
@d15 116
a130 112
/***************************************************/
/* File   : Protocols.h                            */
/*                                                 */
/* Purpose: Handle some common protocol stuff,     */
/*          such as inter-application data         */
/*          transfer.                              */
/*                                                 */
/*          Function naming convention is as usual */
/*          a source leafname derived prefix, then */
/*          a code based on the protocol being     */
/*          dealt with:                            */
/*                                                 */
/*          _atats_  App To App Transfer, Save     */
/*          _atatl_  App To App Transfer, Load     */
/*          _pp_     Printer Protocol              */
/*          _auh_    Acorn URI Handler             */
/*          _ih_     Interactive Help              */
/*          _aub_    ANT URL Broadcast             */
/*          _multi_  Message is used in more than  */
/*                   one message protocol scheme   */
/*          _util_   A utility function not        */
/*                   directly connected with a     */
/*                   specific protocol.            */
/*                                                 */
/*          This is followed by the direction, so  */
/*          to speak - i.e. '_got_' for got a      */
/*          message, '_send_' for sending a        */
/*          message. Alternatively, a prefix       */
/*          '_bounced' is used for messages which  */
/*          return as a UserMessage_Acknowledge    */
/*          event.                                 */
/*                                                 */
/*          Because the Plug-In message protocol   */
/*          is such a large and self-contained     */
/*          entity, this is kept separate, in      */
/*          PlugIn.h.                              */
/*                                                 */
/*          Do NOT use MemLib here, as you will    */
/*          hit the Wimp bug relating to message   */
/*          blocks stored at high addresses (given */
/*          an old enough Wimp) if you do.         */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 29-Aug-97: Created.                    */
/*                                                 */
/*          06-Sep-97: Significant rewriting to    */
/*                     stop various clashes and    */
/*                     increase flexibility.       */
/***************************************************/

/* Enumerations and definitons */

/* For protocols_atats_send_data_save, the routine must know what sort  */
/* of object is being saved so it can remember the relevant information */
/* in the relevant place.                                               */

typedef enum protocols_saving
{
  protocols_saving_nothing = 0,        /* For completeness only, really                                                     */
  protocols_saving_document_source,    /* HTML or text document source, must give browser                                   */
  protocols_saving_document_as_text,   /* A page converted to a text file, must give browser                                */
  protocols_saving_document_as_draw,   /* A page converted to a draw file, must give browser                                */
  protocols_saving_document_as_shelp,  /* A page converted to a StrongHelp manual, must give browser                        */
  protocols_saving_link,               /* A link as a URI or URL file, must give browser and token                          */
  protocols_saving_frame_location,     /* The current location as a URI or URL file, must give browser                      */
  protocols_saving_log,                /* A log file                                                                        */
  protocols_saving_hotlist_entry,      /* A hotlist link item as a URI or URL file, must give NULL browser and hotlist item */
  protocols_saving_hotlist_selection,  /* A selection of hotlist items as an HTML file, don't need anything else            */
  protocols_saving_entire_hotlist,     /* Save the entire hotlist as an HTML file, don't need anything else                 */
  protocols_saving_image_original,     /* An image in its original form, must give browser and token                        */
  protocols_saving_image_sprite,       /* An image as a sprite, must given browser and token                                */
  protocols_saving_object,             /* A page object through the fetcher, must give browser                              */
  protocols_saving_local_history,      /* A local History save, must give browser                                           */
  protocols_saving_global_history      /* A global History save, don't need anything else                                   */
}
protocols_saving;

/* Function prototypes */

_kernel_oserror * protocols_atats_send_data_open       (int filetype, char * pathname);
_kernel_oserror * protocols_atats_data_open_bounced    (WimpMessage * m);
_kernel_oserror * protocols_atats_send_data_save       (browser_data * b, void * extra, char * leaf, int estimated_size, int filetype, protocols_saving saving, WimpGetPointerInfoBlock * info);
_kernel_oserror * protocols_atats_data_save_bounced    (WimpMessage * m);
_kernel_oserror * protocols_atats_got_ram_fetch        (WimpMessage * m);
_kernel_oserror * protocols_atats_send_ram_transmit    (WimpMessage * m, int transmitted, int last);
_kernel_oserror * protocols_atats_ram_transmit_bounced (WimpMessage * m);
_kernel_oserror * protocols_atats_send_data_load       (WimpMessage * m);
_kernel_oserror * protocols_atats_data_load_bounced    (WimpMessage * m);
_kernel_oserror * protocols_atats_got_data_load_ack    (WimpMessage * m);
_kernel_oserror * protocols_atats_send_any_pendings    (browser_data * b);

_kernel_oserror * protocols_atatl_got_data_open        (WimpMessage * m);
_kernel_oserror * protocols_atatl_got_data_load        (WimpMessage * m);
_kernel_oserror * protocols_atatl_send_data_load_ack   (WimpMessage * m);
_kernel_oserror * protocols_atatl_got_data_save        (WimpMessage * m);
_kernel_oserror * protocols_atatl_ram_fetch_bounced    (WimpMessage * m);
_kernel_oserror * protocols_atatl_got_ram_transmit     (WimpMessage * m);

_kernel_oserror * protocols_pp_send_print_save         (void);
_kernel_oserror * protocols_pp_print_save_bounced      (WimpMessage * m);
_kernel_oserror * protocols_pp_got_print_error         (WimpMessage * m);
_kernel_oserror * protocols_pp_got_print_type_odd      (WimpMessage * m);

_kernel_oserror * protocols_auh_got_started            (WimpMessage * m);
_kernel_oserror * protocols_auh_got_dying              (WimpMessage * m);
_kernel_oserror * protocols_auh_got_process            (WimpMessage * m);
_kernel_oserror * protocols_auh_got_return_result      (WimpMessage * m);

int               protocols_ih_send_help_request       (int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle);
_kernel_oserror * protocols_ih_help_request_bounced    (WimpMessage * m);
_kernel_oserror * protocols_ih_got_help_reply          (WimpMessage * m);
d132 1
a132 1
_kernel_oserror * protocols_aub_got_open_url           (WimpMessage * m);
d134 1
a134 1
_kernel_oserror * protocols_multi_got_data_save_ack    (WimpMessage * m);
d136 3
a138 1
void              protocols_util_make_unique_name      (char * buffer, int buffer_size);
@


1.11
log
@Everyone else seems to be checking lots of stuff in lately, so I've
decided to join in. This is an intermediate check-in and so not all
resources etc. will be up to date. You should be able to make Phoenix
and a debug build out of it. As a reminder, to make a JavaScript build:

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean. This now strips dynamic dependencies from the MakeFile
   automatically, to save you having to do it yourself.
 * Run one of the TaskObey files with the "J" suffix, e.g. !DeskBrwsJ -
   this uses the same .o directory for object files and exports to the
   same position in the Targets directory as the non-JavaScript build,
   but it does produce a unique binary in 'abs' and symbols table in
   'syms'.
 * Sourcing an appropriate !Run (with increased WimpSlot value), !Boot
   and About resource is done automatically.
 * Some, but not all of the !xxxD (debug) TaskObey files will make
   JavaScript versions in passing - check the JSUFFIX value on the Make
   command line parameters in the file.

This'll only work on RISC OS 3.1 due to the use of MemLib.

Here's the change list:

Included MNG icons in sprites files; added Sprites23 for some builds.
Added in ANT URL file icon (b28) derived from URI file icon, because
the Save dialogue can need it.

No, you do *not* need to define the same keyboard shortcuts in each
frame since the ancestor keeps the input focus and we've basically
dropped non-nested Wimp support. Maintaining no less than 4 lists of
identical shortcuts was a pain. Some Res files now only have the
lists in the main browser window and button bar objects (these two
are both required still).

Ursula build Markers button arrangement changed from 1x3 horizontal to
2x2 tilted, as in Phoenix, by popular demand.

Couple of hotlist bugs fixed; dragging an item and deleteing it with
Ctrl+X didn't terminate the drag, and deleteting an item underneath a
menu opened for it didn't close the menu.

'SendReferer' option added to all Choices files, all set to 'always'.
Put just beneath 'Clone' as it refers to header items, though really,
both Clone and SendReferer should probably be in the "Fetch controls"
section rather than "Multiuser environments and proxying"! Front-end
control of this is available.

In image_export_original, save_save_source, save_transfer_source and
save_save_object, flex_set_budge(0) was called to lock the heap but the
return value wasn't stored. flex_set_budge(1) was then used to unlock
the heap. All calls now remember and restore the old value, which is
both safer in case one calls another and allows the flex_set_budge
call in Main.c to have an application-wide meaning, as intended.

Some restructuring to the data load and RAM transfer sections of
Protocols.c; remote hotlist builds wouldn't allow files to be loaded
to browser windows before, and can now drop URL, URI or text files to
the Open URL dialogue.

New option "MinimumFontSize", lets the 'size' attribute of the 'font'
element be overridden. Default value is 1, to allow the full range of
values for the attribute. Setting to 7, for example, would give font
size 7 text at all times. Another new option, "ToggleOnXOnly", to
make Toggle Size only extend the window vertically (with Ctrl then
being used to toggle to genuine full size, rather than vice versa).
All Choices files updated to hold both of these options; only the
first has front-end control available (see debug build Res file).

JavaScript Document object exists; frames array etc. working. Can now
just about use "http://www.acorn.com/~ahodgkin/jschain/" but it does
abort after a bit - problems with frames again, I suspect. Is is pretty
slow, too. Can now press Escape to terminate a script.

Main.c erroneously referred to Controls file entry "StopWebServe" as
"StopWebProxy". Fixed.

Keyboard shortcuts to raise SaveFile are now possible in a general sense;
the code before was in the ToBeShown handler and just checked for a parent
component of -1. It then assumed "save frame HTML source". Now there's the
savefile_raise_from_shortcut function, which together with the seven new
event codes in SaveFile.h allows saving of HTML source and frame location,
export of links, images, backgrounds and the page as text or draw, to all
be invoked by keyboard shortcuts. Some Res files have some of these defined.

In reformat_check_height, the first check to see if setpara should be set
references a field in tpLast without checking if it is NULL. Whilst the
'line > 0' check should mean that tpLast wasn't NULL anyway, a direct
call to the function from outside of the reformatter might have tripped
up on this - the check for tpLast != NULL is now made.

Adjust-click on close icon in window showing file: URL attempts to open
the parent Filer window.

Reformatter used to try and find a selectable token if keyboard control
was enabled in a really stupid place - could make reformatting become
very slow if no selectables were present, especially if the page had a
few tables on it. Preprocessor now does this (since it goes through all
of the tokens anyway), the reformatter just doing a last check to ensure
no frames have obscured the selectable and if so, it tries to move it.
Done in the reformatter as generating a line array implies the data really
is visible.

Ctrl+Tab URL completion now builds a full list of matches from the hotlist
and history and can cycle through them (Ctrl+Shift+Tab stepping backwards).

Will give a real error rather than just "Data Abort" if it goes wrong
now. Someone somewhere is setting bit 30 of the error which confused
the replacement signal handler. Flag bits are now masked off (as they
should've been to start with).
@
text
@d74 8
a81 7
  protocols_saving_nothing = 0,        /* For completeness only, really */
  protocols_saving_document_source,    /* HTML or text document source, must give browser */
  protocols_saving_document_as_text,   /* A page converted to a text file, must give browser */
  protocols_saving_document_as_draw,   /* A page converted to a draw file, must give browser */
  protocols_saving_document_as_shelp,  /* A page converted to a StrongHelp manual, must give browser */
  protocols_saving_link,               /* A link as a URI or URL file, must give browser and token */
  protocols_saving_frame_location,     /* The current location as a URI or URL file, must give browser */
d83 7
a89 7
  protocols_saving_hotlist_selection,  /* A selection of hotlist items as an HTML file, don't need anything else */
  protocols_saving_entire_hotlist,     /* Save the entire hotlist as an HTML file, don't need anything else */
  protocols_saving_image_original,     /* An image in its original form, must give browser and token */
  protocols_saving_image_sprite,       /* An image as a sprite, must given browser and token */
  protocols_saving_object,             /* A page object through the fetcher, must give browser */
  protocols_saving_local_history,      /* A local History save, must give browser */
  protocols_saving_global_history      /* A global History save, don't need anything else */
@


1.10
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d52 5
@


1.9
log
@All !Run[D], Choices, Messages, Controls and Res files are up to date.

RefoKeep and RefoHold options added to, respectively, try and maintain
the line at the top of the visible area when reformatting, and not shrink
the vertical extent at the start of a reformat to try and avoid flicker
to the top of the page and back down again when RefoKeep is on. Choices
front-end implemented, which also allows RefoWait and RefoTime to be set.
Unfortunately for various reasons this doesn't help the page jumping when
unsized images come in (but RefoHold can improve matters...) - roll on
the image history.

DragToScroll and NoScrollBars options added for frames; included new
pointer type, Mouse_Shape_DTS, so relevant Controls file entries done
and Sprites[22] files updated as required. Noticed some builds have
a low-res ptr_link with a mask - mask removed.

Named anchor following fixed up somewhat - anchors near the bottom of
the page shouldn't be displayed, and then pulled down when the fetcher
releases null polls and ensures the y extent is correct (this through
implementing the min_height field in the browser_data structure).

RefoHang was never implemented and there seems little point to it now,
so the entry for it has been removed from the global choices structure
and all Choices files.

Markers menus should work properly now (in last check-in they would not
update correctly if Adjust was used on the entries).

URI handler usage now a lot more sensible, with configuration of how the
browser uses the module from both a Utils menu submenu (sic) and the
Choices dialogue.

Slightly dodgy 'hang around waiting for user input' stuff for the Cookies
dialogue box: All fetches are suspended; the fetcher remembers some info
about its state at the time the cookie came in, and restores it later; it
will only do this for one fetch at a time. It's necessary to single-thread
the fetcher at this point anyway, since other fetches may have a
dependency on the cookie that is hanging in mid-air at that point. As part
of this, some of the fetcher code has been split out into separate
functions (to try and 'black box' the code a bit). Anyway, Cookie Query
dialogue box now implemented with appropriate Choices file entry and
UI work in the Choices dialogue box.

Phoenix build Choices rearranged. Can now choose when the image history
is saved from the front end. Added also MSIE 4-style table option menu
for JPEG support (OS only, OS if it can handle it, internal only).

Should be a bit faster at loading the history - though 95% of the time
is spent in SWI URL_ParseURL. URL descriptions are stored more
efficiently as part of this - one malloc block instead of several
small blocks. The minimum block size for malloc blocks typically leads
to a significantly smaller startup wimpslot depending on the visit
history size.

Nasty bug in image system fixed. If an image size came in and a reformat
was to take place, the line the image lies in is found and the reformat
progresses from there. Unforunately, this didn't check to see if the
token can't be found in the line list, so it'd reformat from the top
of the page...! This would happen if, for example, an image halfway down
the page came in whilst a reformat for an image higher up had just begun.

In Choices.c, made choices_set_timetype_field, choices_set_uri_field,
choices_set_plugin_field, choices_set_cookie_field, and
choices_set_jpeg_field static (so they're not declared in Choices.h now).

Two memory leaks plugged in URL comparison routines in URLutils.c
(calling free() url_description instead of urlutils_free_descripton()).

Client pull reload handler was setting the reload flag if reloading
the same page, but forgetting to turn on reload_lock so
fetchpage_postprocessed was clearing the reload state... Similarly,
Ctrl+Shift+SELECT-Click on a link when the Controls file 'UseSmall'
entry is 'no' would not have reloaded as it should. Both fixed.

Frames shouldn't be so keen on acquiring horizontal scroll bars and never
letting them go when their width is decreased now. Frames set up for
'scrolling="yes"' will not start with no scroll bars and then gain them
shortly afterwards, causing flicker and two reformats - they'll start
with, and continue to hold, both scroll bars.

Pointer shouldn't flicker when over a frame border whilst other fetches
are progressing now.
@
text
@d73 1
@


1.8
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d112 2
a115 1
_kernel_oserror * protocols_auh_got_dying              (WimpMessage * m);
@


1.7
log
@More reformatter code bugs fixed; this one regarding width of items. Any
kerned string was overestimated (causing redraw bugs and caret position
problems in forms, apart from other minor bits elsewhere) and the default
size of a writable icon wasn't especially clever.

Crude Plug-In support; just about manages Java, but can't fetch on
behalf of Plug-In (for example). Had to change the default file access
URL construction to be 'file:/' instead of 'file://', or local file
fetches that reference Java applets won't work. This is in its very
early stages, and is being checked in mostly so that various Choices
issues can be worked on.
@
text
@d80 3
a82 1
  protocols_saving_object              /* A page object through the fetcher, must give browser */
@


1.6
log
@!Run[D] files updated for new fetchers and GopherFetcher; protocols list
in Controls updated for Gopher. Debug builds now require 2760K rather than
2560K. Font$... variables set if not already, in anticipation of font
Choices work.

Additional bits in Choices section of Res file tidied and some name
changes (e.g. Netscape -> Navigator(TM)). Frames support option added
to Choices.

Grouped 'support_frames' under the Fetch Controls section and added
support_object in Global.h; appropriate entries placed in the Choices
files, and are read at startup. At present, though, only the frames
support flag is implemented.

For some reason, Menu was the button to use on history popups if you
wanted to show URLs instead of descriptions (or vice versa, depending
on Choices settings). Now, Select and Menu will show the Choices
defined setting, and Adjust will show the opposite.

History menus are built backwards, so local histories have the most
recently visited pages at the top. Global history has still no real
order to it, but this may be arranged later.

Customer name changed to Customer by request.

Customer browser now gets its own resources (SYSTEM=Customer), but
otherwise is unchanged, with the Ursula build now giving the
'spinning acorn' with a Bookworm-style toolbar. This is used for the
Desktop !Browse build.

!Sprites[22] files updated to include GIF, JPEG and PNG sprites;
!Run[D] files and !Boot files set appropriate File$Type_xxx variables.
Sprites in all sprites files have been checked for unnecessary palettes,
which have been removed where present.
@
text
@d121 2
@


1.5
log
@Support for ANT URL broadcast message added.

Image deletion routines rewritten; nasty animated GIF bug now gone
(it kept trying to update the cross-referenced image in the browser that
no longer existed, and I've no idea how animated GIFs ever managed to *not*
blow up if a cross referencing browser was shut down; and I've tested
this...). There are now as many image structures as there are total images
in the visible browsers, and no more; cross referenced images in the
to-be-deleted browser have their ownership moved to the cross
referencer before the cross referencee is wiped, with any required fetches
being transferred with them.

Reformatter sped up a bit by getting rid of strlen on the main text field
of tokens in all places bar one, where it is called extremely rarely. This
means direct app-to-app transfer of, say, a 359K text file to the browser
won't run like a drain as it tries to do strlen on a 359K string over and
over again! Most of the time the performance benefits won't really be
noticable, but on the above text file, formatting time went down from
290 seconds before the change to just under 7 seconds, a 41 fold speed
increase or thereabouts (SA110 228MHz).

MakeFile changed to force function name compilation on for debug builds
(-fn in the DD...FLAGS); useful for certain functions such as
register_null_handler, which can now output the name of the function
being registered.

...Which helped show up some nasties in the animation handler and animation
drift handler registration/deregistration process, which have been fixed
(callers of fetchpage_release_nulls were unaware that the drift handler
could be installed, and fragments of old code checking choices.anim_drift
had a value other than 1 or 0 were still hanging around - bit tricky for
a single bit item).

Added support for VALIGN in table cells. Spotted a bug or two in the
'what token is the pointer over' routines as a result, and fixed them - the
worst was in browser_line_at_y, which checked the y coordinate was below
the given one [the mouse], but didn't check the line height to see if the
given y coordinate was *within* the line, rather than just above it. Never
used to matter pre-tables, but a definite concern once multiple line
arrays can exist on one page.
@
text
@d47 5
@


1.4
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d32 1
d35 3
d112 2
@


1.3
log
@First a minor warning - the various Res files are out of sync in this build.
Only the Browse resources are currently valid.

Added Utils.Icons - has a few archives inside containing the resources
(well, some of them) used to build various UI sprites for various builds.
Archived because these are unlikely to change much, and putting them on
CVS was a move to, well, archive the stuff...

SaveDBox objects vanquished and requirements in !Run[D] files removed. The
data save code fits much more neatly in amongst the data load protocol
stuff now (with the slight exception of having to split the SaveObject
source into SaveObject and SaveFile - the former handles multiple persistent
dialogues for Shift+Click on links and the like, the latter handles 'one at
a time' transient dialogues for save source and similar). Export Link is now
supported, too, and writes a 'proper' version URI file. You'll find that
double-clicking on old URI files will work as the URI handler picks them up,
whilst new version ones don't; however, dragging onto the browser will only
work with new version files. Note that support for saving and loading URL
files (ANT suite stuff) is present too, so old URI files can be typed as URL
files if you want to keep them working without modification - the URI
handler itself will hopefully support the defined URI file format soon;
double-clicking on old URI files will stop working at that point. Note
there are *lots* of changes in every Res file to support all this. This may
all seem a bit pointless to some, but the changes do in fact make it very
easy to add new save dialogues all over the place. Certainly much easier
than with the previous system, anyway. In fact, post script, image
'save as sprite' took about half an hour, which I hope proves the worth
of the new system.

Merged in newer hotlist code with support for drag cancelling with Escape
(all relevant Res files appropriately updated) and cancelling scrolling
when you've reached the window scroll limit. Had to move some of the
Wimp message handling stuff to the central Protocols source, as clashes
were occuring, and also the hotlist routines were using independent saving
code - a lot of duplicated effort. This was fair enough as at the time the
Hotlist code was written, the Save code couldn't be used in the way it is
now.

New Save Source and Print buttons on the toolbar of some builds.

Phoenix Sprites file made more efficient - the Acorn base section has been
split from the animated upper region. Browse build has a new grey fade
sprite at the back, which is less grainy than the previous one and only
uses 16 colours (with a 16 greyscale palette).

Not really a bug, bug the routine to start an image fetch for INPUT
TYPE=IMAGE forms items only did so if the src field (or equivalent, for
this tag type) was non-NULL. In fact, you should always call image_new_image
and let that handle the rest, otherwise other sections of the code will fail
as they try to obtain an image number for a given HStream and get -1 back.
This problem only generally manifested itself when loading an HTML file to
the browser straight from an application, as many src fields become NULL
when the relativisation routines find nothing to relativise to...

Authentication got broken somewhere along the line - this has been fixed
(in HTMLLib and the browser).

Ctrl+Click on a cross referenced image updates *all* copies, not just the
one with the image data attached.

Next big step: Rip up TBEvents.h and rebuild that whole approach somewhat.
To all those working on the code, my apologies but this means all Res files
will receive a very large number of alterations and there will be extensive
code changes too (mostly naming convention stuff), in more or less all
source files. I am endeavouring to ensure that the new numberspace
convention does not clash with the work being done by Kevin on
internationalisation.
@
text
@d68 1
d87 1
a109 2

void              protocols_util_update_reference      (int old_ref, int new_ref);
@


1.2
log
@This version is being checked in because the Hotlist manager in the test
build provokes a Wimp bug. All the variant resource files are out of sync
and there are several outstanding bugs in the main code, so I'd personally
avoid this build like the plague unless you're mad enough to want to
examine the Wimp problem ;-)
@
text
@d27 7
a33 4
/*          _atat_  App To App Transfer            */
/*          _pp_    Printer Protocol               */
/*          _auh_   Acorn URI Handler              */
/*          _ih_    Interactive Help               */
d41 1
a41 3
/*          event. Functions for a given set of    */
/*          messages in a protocol appear in the   */
/*          the order _send_, _got_, _bounced.     */
d46 4
d52 22
d76 34
a109 20
_kernel_oserror * protocols_send_data_open          (int filetype, char * pathname);
_kernel_oserror * protocols_atat_got_data_save      (WimpMessage * m);
_kernel_oserror * protocols_atat_got_data_load      (WimpMessage * m);
_kernel_oserror * protocols_atat_got_data_open      (WimpMessage * m);
_kernel_oserror * protocols_atat_got_ram_transmit   (WimpMessage * m);
_kernel_oserror * protocols_atat_data_open_bounced  (WimpMessage * m);
_kernel_oserror * protocols_atat_ram_fetch_bounced  (WimpMessage * m);

_kernel_oserror * protocols_pp_got_print_error      (WimpMessage * m);
_kernel_oserror * protocols_pp_got_print_type_odd   (WimpMessage * m);
_kernel_oserror * protocols_pp_got_data_save_ack    (WimpMessage * m);
_kernel_oserror * protocols_pp_print_save_bounced   (WimpMessage * m);

_kernel_oserror * protocols_auh_got_process         (WimpMessage * m);
_kernel_oserror * protocols_auh_got_return_result   (WimpMessage * m);
_kernel_oserror * protocols_auh_got_dying           (WimpMessage * m);

int               protocols_ih_send_help_request    (int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle);
_kernel_oserror * protocols_ih_got_help_reply       (WimpMessage * m);
_kernel_oserror * protocols_ih_help_request_bounced (WimpMessage * m);
@


1.1
log
@Created Protocols source file and moved a lot of message handling from
handle_messages - the latter now serves as a high level distributor to
lower level functions in Protocols. Incidentally, URL files (as used by
the ANT suite) can be loaded by dragging to the browser in the same way
as URI files - Not A Lot Of People Know That, etc.

Merged new hotlist display type Res file to existing resources, added
support for DataSave message so items can be dragged from the hotlist
to a specific window (RAM transfer for URI and URL files; ScrapFile for
HTML and Text but deleted afterwards and there are appropriate guards
to stop Reload just saying 'not found'; images run through ScrapFile and
there is no choice but to leave them there and do a conventional fetch).

All !RunD files now give a WimpSlot of 2304K. Some small changes to
the Argo and Ursula build Res files to make the menu trees more sensible.
Controls files now take 'file:/' instead of 'file://' in Protocols
section. Definitions at top of URLutils.c *not* altered, as then you
end up with invalid URLs - so it will accept 'file:/', but always generate
'file://'. This is because some browsers exports 'file:/'. Sigh.

make_no_[..._]memory_error functions now return a _kernel_oserror * rather
than void. It's always &erb returned, but it enables users to use a more
elegant 'return make_no_memory_error(1);', say, rather than something
like 'make_no_memory_error(1); return &erb;'. I obviously should've written
it like that at the outset, but never mind. All callers have been
appropriately updated.

The urlutils_leafname_from_url function now replaces illegal characters
(A7000 Welcome Guide p54...) in the leaf with legal alternatives.

Internal URL scheme is now a bit cleaner, with everything properly defined
in URLutils.h. All references to http:, file: and ftp:, with or without
a following '//' use the definitions in here now.

More tidying and some reorganising of Hotlist source. Auto-open delay is
now a Choices item. Some dependencies on statics removed (e.g. the
counting functions don't accumulate into the global item_number now).
The redraw functions used Wimp_TextOp - oops, so this has been amended
to use whatever is supported on your Wimp. This is now in a new function
(utils_text_width()), which the History menu routines also use (there was
a bug in the width routine there anyway, which is therefore fixed in
passing). Several other routines used Wimp_TextOp directly too, and
they have been altered to use the new function as well.

In hotlist code, one of the larger changes is in the API to hotlist_draw_r()
(formerly _hotlist_draw()) which now takes item widths and heights as
parameters - discovering these is quite slow, so doing it every time the
function calls itself recursively is a little less efficient than
passing the values in from elsewhere. Note that underscore prefixed
functions are being slowly renamed to _r suffixed functions, to match
the convention established by Tony Cheal with is table routines. This
makes it much more obvious when something is recursive, as the same
naming convention is used in every browser source file.

Finally, note that I intend to ditch SaveDBox and use an alternate window
with manual control of the messaging in Protocols.c. This will allow
various improvements which at present the SaveDBox operational methods
preclude. I'm going to have to do at least an alternate Window object for
the SaveDBox module to use soon in any case. Getting rid of SaveDBox will
help reduce, if only slightly, demands on the RMA.
@
text
@d49 1
d54 1
@
