head	1.10;
access;
symbols
	Browse-2_16:1.10
	Browse-2_15:1.10
	Browse-2_14:1.10
	Browse-2_13:1.10
	Browse-2_12:1.10
	Browse-2_11:1.10
	Browse-2_10:1.10
	Browse-2_09:1.10
	ahodgkin_208_i4_2:1.10
	ahodgkin_208_i4:1.9
	ahodgkin_208_i3:1.9
	ahodgkin_208_i2:1.9
	ahodgkin_208_i1:1.9
	ahodgkin_207release:1.9
	ahodgkin_206release:1.8
	ahodgkin_205release:1.8
	ahodgkin_204release:1.8
	ahodgkin_202release:1.6
	ahodgkin_201release:1.6
	ahodgkin_200release:1.6
	ahodgkin_133beta:1.6
	ahodgkin_132beta:1.6
	ahodgkin_131beta:1.5
	ahodgkin_130beta:1.4
	ahodgkin_129:1.4
	ahodgkin_128beta:1.4
	ahodgkin_128alpha:1.4
	ahodgkin_127beta2:1.4
	ahodgkin_127beta:1.4
	ahodgkin_126beta:1.4
	ahodgkin_AW97patch:1.4
	ahodgkin_AW97:1.4;
locks; strict;
comment	@# @;


1.10
date	2000.05.31.15.58.55;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	98.09.07.11.47.10;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	98.04.16.08.14.30;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	98.03.26.14.21.16;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	98.02.06.13.55.37;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	98.01.31.10.55.46;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.09.09.14.13.25;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.08.31.18.38.27;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.08.18.10.00.14;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.29.36;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.10
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Handlers.h                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Event handlers.                                   */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 07-Feb-1997 (ADH): Created.                       */
/*          10-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_Handlers__
  #define Browser_Handlers__

  #include <tboxlibs/wimp.h>
  #include <tboxlibs/toolbox.h>

  #include "Global.h"

  /* Function prototypes */

  int  handle_messages            (WimpMessage * m, void * handle);
  int  handle_ack                 (int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle);

  int  handle_keys                (int eventcode, WimpPollBlock * b, IdBlock * idb, void * handle);
  int  handle_keys_from_browser   (int eventcode, WimpPollBlock * block, IdBlock * idb, browser_data * handle);
  int  handle_menus               (int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle);
  int  handle_scroll_requests     (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
  int  handle_clicks              (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
  int  handle_link_clicks         (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
  int  handle_drags               (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);

  int  handle_close_browser       (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);

  int  handle_home                (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_back                (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_forwards            (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_stop                (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_reload              (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_view_hotlist        (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_add_hotlist         (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_view_resources      (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_load_images         (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_view_source         (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_go_to               (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_go                  (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_cancel              (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_bistate             (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_tristate            (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_save_source         (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_print               (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_save_as_text        (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_save_as_draw        (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

  int  handle_may_scroll          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

  int  handle_set_marker          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_jump_to_marker      (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_clear_marker        (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

  int  handle_clear_url           (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_show_history_menu   (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

  int  handle_show_info           (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int  handle_quit                (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

  int  handle_lose_caret          (int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle);

  int  handle_dialler_display     (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
  int  handle_dialler_service     (WimpMessage * m, void * handle);

  int  handle_miscellaneous_event (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

#endif /* Browser_Handlers__ */
@


1.9
log
@Everyone else seems to be checking lots of stuff in lately, so I've
decided to join in. This is an intermediate check-in and so not all
resources etc. will be up to date. You should be able to make Phoenix
and a debug build out of it. As a reminder, to make a JavaScript build:

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean. This now strips dynamic dependencies from the MakeFile
   automatically, to save you having to do it yourself.
 * Run one of the TaskObey files with the "J" suffix, e.g. !DeskBrwsJ -
   this uses the same .o directory for object files and exports to the
   same position in the Targets directory as the non-JavaScript build,
   but it does produce a unique binary in 'abs' and symbols table in
   'syms'.
 * Sourcing an appropriate !Run (with increased WimpSlot value), !Boot
   and About resource is done automatically.
 * Some, but not all of the !xxxD (debug) TaskObey files will make
   JavaScript versions in passing - check the JSUFFIX value on the Make
   command line parameters in the file.

This'll only work on RISC OS 3.1 due to the use of MemLib.

Here's the change list:

Included MNG icons in sprites files; added Sprites23 for some builds.
Added in ANT URL file icon (b28) derived from URI file icon, because
the Save dialogue can need it.

No, you do *not* need to define the same keyboard shortcuts in each
frame since the ancestor keeps the input focus and we've basically
dropped non-nested Wimp support. Maintaining no less than 4 lists of
identical shortcuts was a pain. Some Res files now only have the
lists in the main browser window and button bar objects (these two
are both required still).

Ursula build Markers button arrangement changed from 1x3 horizontal to
2x2 tilted, as in Phoenix, by popular demand.

Couple of hotlist bugs fixed; dragging an item and deleteing it with
Ctrl+X didn't terminate the drag, and deleteting an item underneath a
menu opened for it didn't close the menu.

'SendReferer' option added to all Choices files, all set to 'always'.
Put just beneath 'Clone' as it refers to header items, though really,
both Clone and SendReferer should probably be in the "Fetch controls"
section rather than "Multiuser environments and proxying"! Front-end
control of this is available.

In image_export_original, save_save_source, save_transfer_source and
save_save_object, flex_set_budge(0) was called to lock the heap but the
return value wasn't stored. flex_set_budge(1) was then used to unlock
the heap. All calls now remember and restore the old value, which is
both safer in case one calls another and allows the flex_set_budge
call in Main.c to have an application-wide meaning, as intended.

Some restructuring to the data load and RAM transfer sections of
Protocols.c; remote hotlist builds wouldn't allow files to be loaded
to browser windows before, and can now drop URL, URI or text files to
the Open URL dialogue.

New option "MinimumFontSize", lets the 'size' attribute of the 'font'
element be overridden. Default value is 1, to allow the full range of
values for the attribute. Setting to 7, for example, would give font
size 7 text at all times. Another new option, "ToggleOnXOnly", to
make Toggle Size only extend the window vertically (with Ctrl then
being used to toggle to genuine full size, rather than vice versa).
All Choices files updated to hold both of these options; only the
first has front-end control available (see debug build Res file).

JavaScript Document object exists; frames array etc. working. Can now
just about use "http://www.acorn.com/~ahodgkin/jschain/" but it does
abort after a bit - problems with frames again, I suspect. Is is pretty
slow, too. Can now press Escape to terminate a script.

Main.c erroneously referred to Controls file entry "StopWebServe" as
"StopWebProxy". Fixed.

Keyboard shortcuts to raise SaveFile are now possible in a general sense;
the code before was in the ToBeShown handler and just checked for a parent
component of -1. It then assumed "save frame HTML source". Now there's the
savefile_raise_from_shortcut function, which together with the seven new
event codes in SaveFile.h allows saving of HTML source and frame location,
export of links, images, backgrounds and the page as text or draw, to all
be invoked by keyboard shortcuts. Some Res files have some of these defined.

In reformat_check_height, the first check to see if setpara should be set
references a field in tpLast without checking if it is NULL. Whilst the
'line > 0' check should mean that tpLast wasn't NULL anyway, a direct
call to the function from outside of the reformatter might have tripped
up on this - the check for tpLast != NULL is now made.

Adjust-click on close icon in window showing file: URL attempts to open
the parent Filer window.

Reformatter used to try and find a selectable token if keyboard control
was enabled in a really stupid place - could make reformatting become
very slow if no selectables were present, especially if the page had a
few tables on it. Preprocessor now does this (since it goes through all
of the tokens anyway), the reformatter just doing a last check to ensure
no frames have obscured the selectable and if so, it tries to move it.
Done in the reformatter as generating a line array implies the data really
is visible.

Ctrl+Tab URL completion now builds a full list of matches from the hotlist
and history and can cycle through them (Ctrl+Shift+Tab stepping backwards).

Will give a real error rather than just "Data Abort" if it goes wrong
now. Someone somewhere is setting bit 30 of the error which confused
the replacement signal handler. Flag bits are now masked off (as they
should've been to start with).
@
text
@d15 67
a81 57
/***************************************************/
/* File   : Handlers.h                             */
/*                                                 */
/* Purpose: Event handlers for driving the browser */
/*          front-end.                             */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 07-Feb-97: Created from Main.h.        */
/***************************************************/

/* Function prototypes */

int  handle_messages            (WimpMessage * m, void * handle);
int  handle_ack                 (int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle);

int  handle_keys                (int eventcode, WimpPollBlock * b, IdBlock * idb, void * handle);
int  handle_keys_from_browser   (int eventcode, WimpPollBlock * block, IdBlock * idb, browser_data * handle);
int  handle_menus               (int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle);
int  handle_scroll_requests     (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
int  handle_clicks              (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
int  handle_link_clicks         (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
int  handle_drags               (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);

int  handle_close_browser       (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);

int  handle_home                (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_back                (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_forwards            (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_stop                (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_reload              (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_view_hotlist        (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_add_hotlist         (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_view_resources      (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_load_images         (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_view_source         (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_go_to               (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_go                  (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_cancel              (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_bistate             (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_tristate            (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_save_source         (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_print               (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_save_as_text        (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_save_as_draw        (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

int  handle_may_scroll          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

int  handle_set_marker          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_jump_to_marker      (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_clear_marker        (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

int  handle_clear_url           (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_show_history_menu   (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

int  handle_show_info           (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  handle_quit                (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
d83 1
a83 1
int  handle_lose_caret          (int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle);
d85 2
a86 2
int  handle_dialler_display     (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
int  handle_dialler_service     (WimpMessage * m, void * handle);
d88 3
a90 1
int  handle_miscellaneous_event (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
@


1.8
log
@All !Run[D], Choices, Messages, Controls and Res files are up to date.

RefoKeep and RefoHold options added to, respectively, try and maintain
the line at the top of the visible area when reformatting, and not shrink
the vertical extent at the start of a reformat to try and avoid flicker
to the top of the page and back down again when RefoKeep is on. Choices
front-end implemented, which also allows RefoWait and RefoTime to be set.
Unfortunately for various reasons this doesn't help the page jumping when
unsized images come in (but RefoHold can improve matters...) - roll on
the image history.

DragToScroll and NoScrollBars options added for frames; included new
pointer type, Mouse_Shape_DTS, so relevant Controls file entries done
and Sprites[22] files updated as required. Noticed some builds have
a low-res ptr_link with a mask - mask removed.

Named anchor following fixed up somewhat - anchors near the bottom of
the page shouldn't be displayed, and then pulled down when the fetcher
releases null polls and ensures the y extent is correct (this through
implementing the min_height field in the browser_data structure).

RefoHang was never implemented and there seems little point to it now,
so the entry for it has been removed from the global choices structure
and all Choices files.

Markers menus should work properly now (in last check-in they would not
update correctly if Adjust was used on the entries).

URI handler usage now a lot more sensible, with configuration of how the
browser uses the module from both a Utils menu submenu (sic) and the
Choices dialogue.

Slightly dodgy 'hang around waiting for user input' stuff for the Cookies
dialogue box: All fetches are suspended; the fetcher remembers some info
about its state at the time the cookie came in, and restores it later; it
will only do this for one fetch at a time. It's necessary to single-thread
the fetcher at this point anyway, since other fetches may have a
dependency on the cookie that is hanging in mid-air at that point. As part
of this, some of the fetcher code has been split out into separate
functions (to try and 'black box' the code a bit). Anyway, Cookie Query
dialogue box now implemented with appropriate Choices file entry and
UI work in the Choices dialogue box.

Phoenix build Choices rearranged. Can now choose when the image history
is saved from the front end. Added also MSIE 4-style table option menu
for JPEG support (OS only, OS if it can handle it, internal only).

Should be a bit faster at loading the history - though 95% of the time
is spent in SWI URL_ParseURL. URL descriptions are stored more
efficiently as part of this - one malloc block instead of several
small blocks. The minimum block size for malloc blocks typically leads
to a significantly smaller startup wimpslot depending on the visit
history size.

Nasty bug in image system fixed. If an image size came in and a reformat
was to take place, the line the image lies in is found and the reformat
progresses from there. Unforunately, this didn't check to see if the
token can't be found in the line list, so it'd reformat from the top
of the page...! This would happen if, for example, an image halfway down
the page came in whilst a reformat for an image higher up had just begun.

In Choices.c, made choices_set_timetype_field, choices_set_uri_field,
choices_set_plugin_field, choices_set_cookie_field, and
choices_set_jpeg_field static (so they're not declared in Choices.h now).

Two memory leaks plugged in URL comparison routines in URLutils.c
(calling free() url_description instead of urlutils_free_descripton()).

Client pull reload handler was setting the reload flag if reloading
the same page, but forgetting to turn on reload_lock so
fetchpage_postprocessed was clearing the reload state... Similarly,
Ctrl+Shift+SELECT-Click on a link when the Controls file 'UseSmall'
entry is 'no' would not have reloaded as it should. Both fixed.

Frames shouldn't be so keen on acquiring horizontal scroll bars and never
letting them go when their width is decreased now. Frames set up for
'scrolling="yes"' will not start with no scroll bars and then gain them
shortly afterwards, causing flicker and two reformats - they'll start
with, and continue to hold, both scroll bars.

Pointer shouldn't flicker when over a frame border whilst other fetches
are progressing now.
@
text
@d28 2
a29 2
int handle_messages            (WimpMessage * m, void * handle);
int handle_ack                 (int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle);
d31 41
a71 41
int handle_keys                (int eventcode, WimpPollBlock * b, IdBlock * idb, void * handle);
int handle_keys_from_browser   (int eventcode, WimpPollBlock * block, IdBlock * idb, browser_data * handle);
int handle_menus               (int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle);
int handle_scroll_requests     (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
int handle_clicks              (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
int handle_link_clicks         (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
int handle_drags               (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);

int handle_close_browser       (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);

int handle_home                (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_back                (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_forwards            (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_stop                (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_reload              (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_view_hotlist        (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_add_hotlist         (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_view_resources      (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_load_images         (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_view_source         (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_go_to               (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_go                  (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_cancel              (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_bistate             (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_tristate            (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_save_source         (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_print               (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_save_as_text        (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_save_as_draw        (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

int handle_may_scroll          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

int handle_set_marker          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_jump_to_marker      (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_clear_marker        (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

int handle_clear_url           (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_show_history_menu   (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

int handle_show_info           (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_quit                (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
d73 1
a73 1
int handle_lose_caret          (int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle);
d75 2
a76 2
int handle_dialler_display     (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
int handle_dialler_service     (WimpMessage * m, void * handle);
d78 1
a78 1
int handle_miscellaneous_event (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
@


1.7
log
@This is NOT a 'final' version of anything in particular. I'm checking it
in as I'm about to start playing around with low level window handling
(as part of the thing mentioned at the bottom of this log) - this could
screw things up quite badly if it goes wrong! =8*P

Consequently, I advise you not to check this out over your working sources,
and preferably not to check this out at all.

Markers system - events defined in MiscEvents.h will make Browse remember
where it is on the page. This position can be jumped back to later.
Some builds will have defined keyboard shortcuts Ctrl+Shift+F5 through
F8 to set a marker, and Ctrl+F5 through F8 to jump to a marker.

The front-end for the above now has gadgets 0x80 upwards on the Toolbar or
a set of menus (see Menus.h). Noticed an omission in copy_toolaction_info()
(didn't copy the gadget state) in passing; fixed.

browser_top_line() now works properly, as part of the above, but it'll be
slower than before. If flagged to only find a complete line, it'll do just
that, but whereas before this would require any tables that it looked
inside to be wholly visible, tables can now be partially visible and have
lines inside that are fully visible. This should help the Find function
too. There is a new call, browser_top_line_offset, which works as
browser_top_line but also returns a vertical scroll offset in the found
line (used for more accurate marker position). browser_bottom_line[_r]
turn out to never be used, even by the keyboard control routines, so they
have been removed from Browser.c (rather than spend a lot of time and
effort fixing them).

browser_show_token erroneously subtracted 1 from a particular coordinate
when calculating the y scroll position, which could lead to single pixel
page creep using the markers system. Corrected.

The View Resources button (see Toolbars.h) has been finally implemented,
insofar as it fetches the resources file to the current browser page (or
to a new window if Adjust is used, Controls file settings permitting).

menus_toggle_bars did not take account of the toolbar lower window border
edge correctly. It does now.

The reformatter has a prototype system to keep the vertical page position
when reformatting. This was coded about 5 minutes ago, and is not likely
to be reliable...
@
text
@d61 2
@


1.6
log
@*Don't* try to load FilterManager 0.18 in !Run[D] files. Requires
WindowManager 3.98. Sets URI handler environment variables for
http, ftp and gopher.

Fixed 'doesn't reformat for unsized images' bug - only happens when the
deferred reformatter is enabled, hadn't remembered to check this in my
debug build where this is turned off. Oops.

Caret position in forms could get left behind despite attempts to rectify
this in v1.31 - now fixed (and faster, fortunately).

Hourglass + percentage displayed for History and Image History when
loading - it can take a while for very big histories, though in
practice you only see the visit history loading (has to do a lot
more work, and is thus quite a bit slower than the image history).

POST forms worked when targetted to frames, but were broken when
not targetted! (Forms data inherited from one browser to the same
browser; ended up freeing the flex block...). Fixed.

Now support 303 response code (redirect to GET). Treated as 301, i.e.
not support if STRICT_PARSER is defined, otherwise drops through to
the 302 handling code.

Pointer shouldn't get stuck in odd shapes when going to a new page now;
it gets reset to a standard shape every time the null handler that
checks the position is called, though (whether or not the handler thinks
the pointer is over a different token, if that token is NULL, it sets
the standard shape). A possible work around would be for a browser to
remember the pointer shape too; that's for the future, though.

Early stage table formatting functions could blow themselves apart if
tables_count_table decided there were no rows, columns or both. A
net table size of zero cells is now dealt with; slow, partial table
fetches in multiple windows with image loading turned on will now
*hopefully* be stable, where v1.31 would have bombed out repeatedly.

A nested frameset within one document will now inherit the border
width (frame spacing) and border colour of its parent. This is done
by copying the maxlen and indent fields of the parent token over
the child, and note it's done in the browser (fetch_preprocess_token),
not HTMLLib.

Border colour on a FRAMESET now used, with the first colour on any
FRAME within it overriding, as in NN 4 and MSIE 4.

<LI> bullets really do stick to the text next to them now (I'd done
that in an experimental piece of code and forgotten to merge it back
before the last check-in).

Browse$HotlistURL/URIFile and Browse$HomeURL/URIFile now work from
_TaskName in the Messages file, and are thus of the generic form
<App>$HotlistURL etc. - Docs.Notes and Docs.User updated appropriately.

Event 0x11d00 through to 0x11d7f will make the browser look up Controls
file entries 'JumpTo00' through to 'JumpTo7f' and read a URL from them.
This will be fetched in the ancestor window of the source of the event,
or a new window if such an ancestor can't be found [for Daytona demo].

NB: Nasty frames-related crash at http://www.teledanmark.dk/menu/start.htm
is *not* fixed in this source. NOBR is not supported.
@
text
@d61 4
@


1.5
log
@Check for WindowManager 3.97 and ensure Unicode$Path is set in all
!Run[D] files, don't set the Alias$@@PrintType_FF4 variable, and updated
Customer build ROM obey file variants. Various other changes to
the Run files for new module versions, updated paths to support
new positions of choices, hotlist and histories (see later), etc.

!Sprites[22] files hold small !app icons for some variants, and
an ic_browse sprite. Some variants now have a Sprites and Sprites22
file instead of just Sprites, with the former containing various
mode 12 or 15 specific sprites.

Text files dragged to the URL writable are treated as ANT URL files. This
relies on URLBarWrit (Toolbars.h) being a unique ID, which it should be,
but beware of the Hotlist and Choices numberspaces...

INPUT TYPE=BUTTON supported. Form items without a FORM tag are now shown
(as MSIE 4, but not NN 4).

'*', '-', '@@', '_' and '.' are not escaped when submitting forms now. The
Web interface to the IMDb now works.

INPUT TYPE=HIDDEN items will not affect the line height anymore - so
http://www.hotmail.com/ now has correctly aligned writable icons, for
example. Similarly, TAG_FORM and TAG_FORM_END items could push up
line height and don't anymore.

HRs with a specified pixel width will now influence the size of a table
cell (they didn't before).

BRs now checked by tagno field when the browser needs to know something
was an actual BR tag rather than just a line break signal, and by the
style bit entry when only the indication of a line break is required.

Table widths of 0 or 0% are ignored.

Trace.c updated to report height and background fields in a table_stream.

fm_putsl() writes a terminator into the string; the Forms.c routines were
calling this for displaying INPUT TYPE=PASSWORD fields using the FE_PassCode
literal string (a line of stars). This write into a read only data area
would make the debugger fault the access. A local char array is now used
instead, to get round this (note the use of var[]=literal rather than
var[sizeof(literal)]; strcpy(var, literal) due to some weird compiler bug
that copies the wrong thing into 'var' under some (undefined...)
circumstances).

Text areas don't scroll back to the top line when clicked in anymore;
single line writables don't scroll back to the left either. When
reentering a text area from 'above', the caret appears at the top line
rather than 'somewhere further down'...

ARROWS_MOVE_OUT compile time option at the top of Forms.c defines whether
you must press Tab/Shift+Tab to move between writable fields in forms or
if up/down will drop out of them, though if keyboard control is on this
is enforced (or you get trapped inside the form!).

urlutils_filetype_from_url now uses MimeMap module.

If fetcher is told a page is text, it'll check for a filename extension and
may choose to use this instead (e.g. it may find it's HTML instead). This
is to try and get around duff servers... (e.g. http://www.batalarms.co.uk/).

Save dialogues shouldn't flicker when options that don't change the
filetype are selected (before, the draggable sprite was always reset for
each selection). Noticed the erroneous setting of a static variable in
SaveFile.c by a call to this by SaveObject.c, and so added a flag to
savefile_set_filetype to deal with this - would have been possible to get
the wrong filetype sent to applications or at best the wrong filetype
sprite in the dialogue without that.

The caret shouldn't jump out of a form back to the URL writable if the page
reformats now.

Table background colours now supported (as in the colour you see in the
border space if the cellspacing is large enough; this is as in MSIE, not
as in Navigator). Drawfile output routines updated accordingly.

Corrected erroneous use of wimpt_dx() / wimpt_dy() in a couple of places
in Images.c, which meant that (say) 1x1 images didn't work correctly in
medium resolution display modes.

Now have support for save as text (component ID and event 0x12) and save
as Draw (component ID and event 0x13) buttons. Dubious conditions for
greying and ungreying the print, save source and view source buttons and
menu options sorted out as part of implementing the same for the two new
buttons; added greying out of their associated menu items in passing.

Turned kerning on in draw file objects (does mean a rather heinous
increase in file size, but this is the only way to ensure the draw file
matches the visible page).

Comments before functions in SaveDraw.c are now complete and up to date.

Image and visit histories now generate a crude hash number to speed up
searching for items. It does give a speed increase, though it's a
disappointingly small one.

Issue of left/right margins and cellpaddings sorted out. Now have
redraw_left/right_margin for finding out the basic gap you must leave.
redraw_left/right_gap then gives any extra indentation for LI, BLOCKQUOTE
or whatever. The last two can be subtracted from the display width to
get an available page width for any section of text. Note that
redraw_left_gap replaces redraw_margin. The redraw_start_x function
uses the above to work out where a line's left hand edge should be,
taking account of left/right/centre alignment. HRs have been fixed now
(they were quite broken in v1.30, I think) based on this new model and
the behaviour of MSIE/NN 4.

Fixed width of cells with no contents - cell padding values wouldn't
have worked properly as the reformatter returns 0 rather than the left
hand margin size if given no stream.

Removed FM_Absolute flags for Font_Paint (spotted by DBrown) - sets bit
2, which is reserved...?

IMG width and height in % terms now works correctly; a % of available
width (after margins and indents) or height on the main page or for
a table cell, if the image lies in one. Because of the chicken-and-egg
problem with the latter, the cell must specify a width and/or height
for things to work properly. If this is not done, you'll usually end
up with a 1:1 scaled image (as in Navigator 4, rather than ending up
with no image or even no cell (!), as in MSIE 4).

HEIGHT attribute on a TABLE tag is supported, but only in a crude
fashion; the extra height (if there is any) is distributed over the
rows in a linear fashion. This is probably all you have to do in
practice, but I haven't checked. To maintain a notion of min/max
height as well as width would of course require a great deal more
work...

If using client pull to reload a page with a fragment ('...#name')
specified, then the reload wouldn't work on the same page; it'd just
jump to the fragment position. This won't happen if b->reloading is
set now (so works in conjunction with client pull on the same page
forcing a non-cached fetch). Similarly, if POSTing to such a URL,
a fetch will proceed (both these fixes done originally for
http://jupiter.beseen.com/chat/rooms/g/1678/).

browser_inherit split to browser_inherit and browser_inherit_post_data;
the code for the latter didn't clear any post_data in the child before
copying from the parent either, and could cause flex errors (now fixed).

Res file for Ursula ('Desktop' Browse) build tweaked - bits in the
font choices dialogue renamed, and button bar rearranged to hold the
new Save As Draw button. Other builds have had Save As Draw and
Save As Text buttons added, or not, depending upon availability of
suitable sprites, required UI simplicity, etc.

Now have:

  Browse$ChoicesFile
  Browse$ControlsFile
  Browse$ChoicesSave
  Browse$ControlsSave

(the last two are new) for loading and saving of the Choices or Controls
files. If unset, <App$Dir>.Choices or <App$Dir>.Controls will be set.
E.g., you could set Browse$ChoicesFile to be:

  <App$Dir>.Choices,Choices:WWW.(app).Choices

for loading and

  <Choices$Write>.WWW.(app).Choices

for saving. (The browser never saves Controls at the moment, so the
relevant variable above isn't effectively implemented, but could be
in future). Similarly, to support asymetric loading/saving of the Hotlist,
there are HotlistSave, HistorySave and ImageHistorySave entries in Choices
to complement HotlistPath, HistoryPath and ImageHistoryPath (which are used
for loading). save_save_choices will create directories as needed to obtain
the given path (and has also been fixed in various areas that hadn't been
tested out until now; e.g. zero termination of the AppName$ChoicesFile
variable expansion...). !Run[D] files updated appropriately.

Table widthing code rewritten. Slower, but a lot better on the whole.
Still has some problems - still needs a final 'make sure nothing is
below minimum width' scan, which it should be possible to do without.
No time to fix this at present!

The reformatter will now 'glue together' an LI token followed by any
non-LI token; so a bullet point followed by an item should not be able to
have a line break inserted after the bullet because of very tight width
constraints (it could before - yuk...).

'about:' brings up a page about the browser and any Plug-Ins, as with
Navigator (for example).

URI files support titles, as per spec. version 8. Saving a current
location to the Hotlist will thus give a sensible title now (unless
you're in a frame, so there's no title to get...). Of course, v1.00
files without a title still work.

Note that NOBR is *not* supported in this build and this combined with
the new table widther may cause problems on some sites (e.g. Microsoft's
home page!).
@
text
@d28 2
a29 2
int handle_messages          (WimpMessage * m, void * handle);
int handle_ack               (int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle);
d31 35
a65 32
int handle_keys              (int eventcode, WimpPollBlock * b, IdBlock * idb, void * handle);
int handle_keys_from_browser (int eventcode, WimpPollBlock * block, IdBlock * idb, browser_data * handle);
int handle_menus             (int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle);
int handle_scroll_requests   (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
int handle_clicks            (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
int handle_link_clicks       (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
int handle_drags             (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);

int handle_close_browser     (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);

int handle_home              (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_back              (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_forwards          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_stop              (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_reload            (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_view_hotlist      (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_add_hotlist       (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_view_resources    (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_load_images       (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_view_source       (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_go_to             (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_go                (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_cancel            (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_bistate           (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_tristate          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_save_source       (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_print             (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_save_as_text      (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_save_as_draw      (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

int handle_clear_url         (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_show_history_menu (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
d67 1
a67 2
int handle_show_info         (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int handle_quit              (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
d69 2
a70 1
int handle_lose_caret        (int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle);
d72 1
a72 2
int handle_dialler_display   (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
int handle_dialler_service   (WimpMessage * m, void * handle);
@


1.4
log
@First a minor warning - the various Res files are out of sync in this build.
Only the Browse resources are currently valid.

Added Utils.Icons - has a few archives inside containing the resources
(well, some of them) used to build various UI sprites for various builds.
Archived because these are unlikely to change much, and putting them on
CVS was a move to, well, archive the stuff...

SaveDBox objects vanquished and requirements in !Run[D] files removed. The
data save code fits much more neatly in amongst the data load protocol
stuff now (with the slight exception of having to split the SaveObject
source into SaveObject and SaveFile - the former handles multiple persistent
dialogues for Shift+Click on links and the like, the latter handles 'one at
a time' transient dialogues for save source and similar). Export Link is now
supported, too, and writes a 'proper' version URI file. You'll find that
double-clicking on old URI files will work as the URI handler picks them up,
whilst new version ones don't; however, dragging onto the browser will only
work with new version files. Note that support for saving and loading URL
files (ANT suite stuff) is present too, so old URI files can be typed as URL
files if you want to keep them working without modification - the URI
handler itself will hopefully support the defined URI file format soon;
double-clicking on old URI files will stop working at that point. Note
there are *lots* of changes in every Res file to support all this. This may
all seem a bit pointless to some, but the changes do in fact make it very
easy to add new save dialogues all over the place. Certainly much easier
than with the previous system, anyway. In fact, post script, image
'save as sprite' took about half an hour, which I hope proves the worth
of the new system.

Merged in newer hotlist code with support for drag cancelling with Escape
(all relevant Res files appropriately updated) and cancelling scrolling
when you've reached the window scroll limit. Had to move some of the
Wimp message handling stuff to the central Protocols source, as clashes
were occuring, and also the hotlist routines were using independent saving
code - a lot of duplicated effort. This was fair enough as at the time the
Hotlist code was written, the Save code couldn't be used in the way it is
now.

New Save Source and Print buttons on the toolbar of some builds.

Phoenix Sprites file made more efficient - the Acorn base section has been
split from the animated upper region. Browse build has a new grey fade
sprite at the back, which is less grainy than the previous one and only
uses 16 colours (with a 16 greyscale palette).

Not really a bug, bug the routine to start an image fetch for INPUT
TYPE=IMAGE forms items only did so if the src field (or equivalent, for
this tag type) was non-NULL. In fact, you should always call image_new_image
and let that handle the rest, otherwise other sections of the code will fail
as they try to obtain an image number for a given HStream and get -1 back.
This problem only generally manifested itself when loading an HTML file to
the browser straight from an application, as many src fields become NULL
when the relativisation routines find nothing to relativise to...

Authentication got broken somewhere along the line - this has been fixed
(in HTMLLib and the browser).

Ctrl+Click on a cross referenced image updates *all* copies, not just the
one with the image data attached.

Next big step: Rip up TBEvents.h and rebuild that whole approach somewhat.
To all those working on the code, my apologies but this means all Res files
will receive a very large number of alterations and there will be extensive
code changes too (mostly naming convention stuff), in more or less all
source files. I am endeavouring to ensure that the new numberspace
convention does not clash with the work being done by Kevin on
internationalisation.
@
text
@d56 1
a56 1
int handle_save_src          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
d58 2
@


1.3
log
@Created Protocols source file and moved a lot of message handling from
handle_messages - the latter now serves as a high level distributor to
lower level functions in Protocols. Incidentally, URL files (as used by
the ANT suite) can be loaded by dragging to the browser in the same way
as URI files - Not A Lot Of People Know That, etc.

Merged new hotlist display type Res file to existing resources, added
support for DataSave message so items can be dragged from the hotlist
to a specific window (RAM transfer for URI and URL files; ScrapFile for
HTML and Text but deleted afterwards and there are appropriate guards
to stop Reload just saying 'not found'; images run through ScrapFile and
there is no choice but to leave them there and do a conventional fetch).

All !RunD files now give a WimpSlot of 2304K. Some small changes to
the Argo and Ursula build Res files to make the menu trees more sensible.
Controls files now take 'file:/' instead of 'file://' in Protocols
section. Definitions at top of URLutils.c *not* altered, as then you
end up with invalid URLs - so it will accept 'file:/', but always generate
'file://'. This is because some browsers exports 'file:/'. Sigh.

make_no_[..._]memory_error functions now return a _kernel_oserror * rather
than void. It's always &erb returned, but it enables users to use a more
elegant 'return make_no_memory_error(1);', say, rather than something
like 'make_no_memory_error(1); return &erb;'. I obviously should've written
it like that at the outset, but never mind. All callers have been
appropriately updated.

The urlutils_leafname_from_url function now replaces illegal characters
(A7000 Welcome Guide p54...) in the leaf with legal alternatives.

Internal URL scheme is now a bit cleaner, with everything properly defined
in URLutils.h. All references to http:, file: and ftp:, with or without
a following '//' use the definitions in here now.

More tidying and some reorganising of Hotlist source. Auto-open delay is
now a Choices item. Some dependencies on statics removed (e.g. the
counting functions don't accumulate into the global item_number now).
The redraw functions used Wimp_TextOp - oops, so this has been amended
to use whatever is supported on your Wimp. This is now in a new function
(utils_text_width()), which the History menu routines also use (there was
a bug in the width routine there anyway, which is therefore fixed in
passing). Several other routines used Wimp_TextOp directly too, and
they have been altered to use the new function as well.

In hotlist code, one of the larger changes is in the API to hotlist_draw_r()
(formerly _hotlist_draw()) which now takes item widths and heights as
parameters - discovering these is quite slow, so doing it every time the
function calls itself recursively is a little less efficient than
passing the values in from elsewhere. Note that underscore prefixed
functions are being slowly renamed to _r suffixed functions, to match
the convention established by Tony Cheal with is table routines. This
makes it much more obvious when something is recursive, as the same
naming convention is used in every browser source file.

Finally, note that I intend to ditch SaveDBox and use an alternate window
with manual control of the messaging in Protocols.c. This will allow
various improvements which at present the SaveDBox operational methods
preclude. I'm going to have to do at least an alternate Window object for
the SaveDBox module to use soon in any case. Getting rid of SaveDBox will
help reduce, if only slightly, demands on the RMA.
@
text
@d56 2
@


1.2
log
@Odd problem with Entries file meant none got checked in last time...
@
text
@a29 1
int handle_send_helpreq      (int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle);
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d17 1
d20 1
d22 2
a23 1
/* History: 07-Feb-97: Created from Main.h source  */
d38 1
@
