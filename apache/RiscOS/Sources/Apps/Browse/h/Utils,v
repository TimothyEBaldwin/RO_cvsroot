head	1.21;
access;
symbols
	Browse-2_16:1.21
	Browse-2_15:1.21
	Browse-2_14:1.21
	Browse-2_13:1.21
	Browse-2_12:1.21
	Browse-2_11:1.20
	Browse-2_10:1.20
	Browse-2_09:1.20
	ahodgkin_208_i4_2:1.20
	ahodgkin_208_i4:1.19
	ahodgkin_208_i3:1.19
	ahodgkin_208_i2:1.19
	ahodgkin_208_i1:1.18
	ahodgkin_207release:1.18
	ahodgkin_206release:1.17
	ahodgkin_205release:1.16
	ahodgkin_204release:1.16
	ahodgkin_202release:1.16
	ahodgkin_201release:1.16
	ahodgkin_200release:1.16
	ahodgkin_133beta:1.16
	ahodgkin_132beta:1.16
	ahodgkin_131beta:1.16
	ahodgkin_130beta:1.15
	ahodgkin_129:1.14
	ahodgkin_128beta:1.13
	ahodgkin_128alpha:1.12
	ahodgkin_127beta2:1.12
	ahodgkin_127beta:1.12
	ahodgkin_126beta:1.11
	ahodgkin_AW97patch:1.11
	ahodgkin_AW97:1.10;
locks; strict;
comment	@# @;


1.21
date	2006.03.13.22.06.20;	author ahodgkin;	state Exp;
branches;
next	1.20;

1.20
date	2000.05.31.15.59.00;	author ahodgkin;	state Exp;
branches;
next	1.19;

1.19
date	2000.02.25.17.08.58;	author ahodgkin;	state Exp;
branches;
next	1.18;

1.18
date	98.09.23.13.18.22;	author ahodgkin;	state Exp;
branches;
next	1.17;

1.17
date	98.07.09.10.28.12;	author ahodgkin;	state Exp;
branches;
next	1.16;

1.16
date	98.01.31.10.55.50;	author ahodgkin;	state Exp;
branches;
next	1.15;

1.15
date	97.12.18.10.07.18;	author ahodgkin;	state Exp;
branches;
next	1.14;

1.14
date	97.12.12.11.18.14;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	97.12.04.11.23.27;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	97.11.05.15.26.03;	author kbracey;	state Exp;
branches;
next	1.11;

1.11
date	97.10.18.16.42.38;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	97.10.03.09.19.09;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	97.09.18.08.59.08;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.09.12.17.19.44;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.08.31.18.38.30;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.08.28.16.08.19;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.08.18.10.00.25;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.08.08.16.39.01;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.07.30.12.39.15;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.07.25.12.52.37;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.30.14;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.21
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Utils.h                                           */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Infrequently altered utilities.                   */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 18-Oct-1996 (ADH): Created.                       */
/*          07-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_Utils__
  #define Browser_Utils__

  #include <kernel.h>
  #include <tboxlibs/wimp.h>
  #include <tboxlibs/toolbox.h>
  #include <tboxlibs/event.h>

  #include "Global.h"

  /* Known error numbers */

  #define Utils_Error_OS_Escape      17              /* Offers only 'Continue'       */
  #define Utils_Error_Custom_Normal  (1u<<30)        /* Offers 'Continue' and 'Quit' */
  #define Utils_Error_Custom_Fatal   ((1u<<30) + 1)  /* Offers only 'Quit'           */
  #define Utils_Error_Custom_Message ((1u<<30) + 2)  /* Offers only 'Continue'       */

  /* Useful macros */

  #define Beep          (_swi(0x107,0))
  #define Swap(a,b)     { (a) ^= (b); (b) ^= (a); (a) ^= (b); }
  #define StrNCpy0(x,y) {strncpy(x,y,sizeof(x)-1); x[sizeof(x)-1]=0;}
  #define WordAlign(a)  (void *) ((((unsigned int) (a)) + (sizeof(int) - 1)) & (~(sizeof(int) - 1)))

  #define ChkError(e)   (show_error_cont(e))
  #define RetError(fn)  do {_kernel_oserror * e = (fn); if (e) return e;} while (0)
  #define StrLastE      do {(void) utils_kernel_last_error();} while (0)
  #define RetLastE      do {return utils_kernel_last_error();} while (0)
  #define RetWarnE(e)   do {if (&erb != (e)) erb = *(e); erb.errnum = Utils_Error_Custom_Message; return &erb;} while (0)

  /* Function prototypes */

  char              * lookup_token                     (const char * s, int flag, const char * arg);
  char              * lookup_choice                    (const char * s, int flag, const char * arg);
  char              * lookup_control                   (const char * s, int flag, const char * arg);

  void                show_error                       (_kernel_oserror * e);
  void                show_error_cont                  (_kernel_oserror * e);
  void                show_error_ret                   (_kernel_oserror * e);
  int                 show_error_ask                   (_kernel_oserror * e, const char * buttons);
  int                 report_toolbox_error             (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

  #ifdef JAVASCRIPT

    _kernel_oserror * make_no_javascript_memory_error  (int stage);

  #endif

  _kernel_oserror   * make_no_fetch_memory_error       (int stage);
  _kernel_oserror   * make_no_cont_memory_error        (int stage);
  _kernel_oserror   * make_no_table_memory_error       (int stage);
  _kernel_oserror   * make_no_memory_error             (int stage);
  _kernel_oserror   * make_general_error               (const char * token, const char * param);
  _kernel_oserror   * utils_kernel_last_error          (void);

  void                show_centred                     (ObjectId o);
  _kernel_oserror   * set_corrected_extent             (unsigned int f, ObjectId o, BBox * w);
  int                 find_behind                      (int w);
  _kernel_oserror   * find_tool_sizes                  (int * theight, int * hheight, int * vwidth);

  void                register_null_claimant           (int eventcode, WimpEventHandler * handler, browser_data * handle);
  void                deregister_null_claimant         (int eventcode, WimpEventHandler * handler, browser_data * handle);

  int                 utils_intersection               (const BBox * restrict a, const BBox * restrict b, BBox * restrict intersection);
  int                 utils_set_graphics_window        (const BBox * restrict rbox, const BBox * restrict cbox, BBox * restrict ibox);
  void                utils_restore_graphics_window    (const BBox * restrict cbox);

  void                read_os_to_points                (void);
  void                convert_pair_to_os               (int x, int y, int * restrict osx, int * restrict osy);
  void                convert_pair_to_points           (int x, int y, int * restrict mpx, int * restrict mpy);
  void                convert_to_os                    (int x, int * restrict osx);
  void                convert_to_points                (int x, int * restrict mpx);
  void                convert_box_to_os                (const BBox * restrict mp, BBox * restrict os);
  void                convert_box_to_points            (const BBox * restrict os, BBox * restrict mp);

  _kernel_oserror   * utils_read_sprite_size           (const char * restrict name, int * restrict width, int * restrict height);
  _kernel_oserror   * utils_text_width                 (char * text, int * width, int scan);
  _kernel_oserror   * set_gadget_state                 (ObjectId o, ComponentId c, int grey_state);

  void                anti_twitter                     (WimpRedrawWindowBlock * r);

  int                 adjust                           (void);

  int                 hide_gadget                      (ObjectId o, ComponentId c);
  int                 show_gadget                      (ObjectId o, ComponentId c);
  int                 gadget_hidden                    (ObjectId o, ComponentId c);
  void                slab_gadget                      (ObjectId o, ComponentId c);
  void                slab_gadget_in                   (ObjectId o, ComponentId c);
  void                slab_gadget_out                  (ObjectId o, ComponentId c);

  ObjectId            utils_check_caret_restoration    (ObjectId window_id);
  _kernel_oserror   * utils_restore_caret              (ObjectId window_id);

  _kernel_oserror   * copy_toolaction_info             (ObjectId src_o, ComponentId src_c, ObjectId dst_o, ComponentId dst_c);
  _kernel_oserror   * set_window_flags                 (int window_handle, unsigned int clear_word, unsigned int eor_word);

  int                 debounce_keypress                (void);

  int                 utils_task_from_window           (int window_handle);
  _kernel_oserror   * utils_browser_from_window        (int window_handle, browser_data ** browser);
  int                 is_known_browser                 (const browser_data * restrict b);

  browser_data      * utils_parent                     (const browser_data * restrict b);
  browser_data      * utils_flat_parent                (const browser_data * b);
  browser_data      * utils_ancestor                   (const browser_data * restrict b);

  int                 utils_encode_base64              (const char * in, int len, char * out);
  int                 utils_strcasecmp                 (const char * a, const char * b);
  int                 utils_strncasecmp                (const char * a, const char * b, unsigned int n);
  int                 utils_strnullcmp                 (const char * a, const char * b);
  char              * utils_strdup                     (const char * s1);
  int                 utils_len_printf                 (const char * format, ...);
  int                 utils_number_length              (int number);
  unsigned int        utils_return_hash                (const char * s);

  _kernel_oserror   * utils_get_task_handle            (const char * task_to_get, unsigned int * found_handle);
  _kernel_oserror   * utils_stop_proxy                 (void);
  void                utils_build_user_agent_string    (int netscape, char * buffer, int buffer_size);

  int                 utils_check_scrap                (void);
  _kernel_oserror   * utils_canonicalise_path          (const char * in, char ** out);
  _kernel_oserror   * utils_build_tree                 (const char * path);

  void                utils_hourglass_percent          (unsigned int current, unsigned int max);

#endif /* Browser_Utils__ */
@


1.20
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d40 4
a43 4
  #define Utils_Error_OS_Escape      17              /* Offers only 'Continue'      */
  #define Utils_Error_Custom_Normal  (1u<<30)        /* Offers 'Continue' and 'Quit */
  #define Utils_Error_Custom_Fatal   ((1u<<30) + 1)  /* Offers only 'Quit'          */
  #define Utils_Error_Custom_Message ((1u<<30) + 2)  /* Offers only 'Continue'      */
d54 2
a55 2
  #define StrLastE      do {erb = *_kernel_last_oserror(); erb.errnum = Utils_Error_Custom_Message;} while (0)
  #define RetLastE      do {erb = *_kernel_last_oserror(); erb.errnum = Utils_Error_Custom_Message; return &erb;} while (0)
a69 5
  _kernel_oserror   * make_no_fetch_memory_error       (int stage);
  _kernel_oserror   * make_no_cont_memory_error        (int stage);
  _kernel_oserror   * make_no_table_memory_error       (int stage);
  _kernel_oserror   * make_no_memory_error             (int stage);

d76 7
d91 3
a93 3
  BBox              * intersection                     (BBox * a, BBox * b);
  BBox              * set_graphics_intersection        (BBox * rbox, BBox * cbox);
  void                restore_graphics_intersection    (BBox * cbox);
d96 6
a101 6
  void                convert_pair_to_os               (int x, int y, int * osx, int * osy);
  void                convert_pair_to_points           (int x, int y, int * mpx, int * mpy);
  void                convert_to_os                    (int x, int * osx);
  void                convert_to_points                (int x, int * mpx);
  void                convert_box_to_os                (const BBox * mp, BBox * os);
  void                convert_box_to_points            (const BBox * os, BBox * mp);
d103 1
a103 1
  _kernel_oserror   * read_sprite_size                 (char * name, int * width, int * height);
d128 1
a128 1
  int                 is_known_browser                 (browser_data * b);
d130 3
a132 3
  browser_data      * utils_parent                     (browser_data * b);
  browser_data      * utils_flat_parent                (browser_data * b);
  browser_data      * utils_ancestor                   (browser_data * b);
d137 1
d151 2
@


1.19
log
@Misecllaneous tweaks and fixes. Major addition is full header and footer
support in the printing system - see the Phoenix Choices file for more
information.

Only the Phoenix resources are up to date currently.
@
text
@d15 134
a148 119
/***************************************************/
/* File   : Utils.h                                */
/*                                                 */
/* Purpose: Infrequently altered utilities.        */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 18-Oct-96: Created.                    */
/***************************************************/

/* Known error numbers */

#define Utils_Error_OS_Escape      17              /* Offers only 'Continue'      */
#define Utils_Error_Custom_Normal  (1u<<30)        /* Offers 'Continue' and 'Quit */
#define Utils_Error_Custom_Fatal   ((1u<<30) + 1)  /* Offers only 'Quit'          */
#define Utils_Error_Custom_Message ((1u<<30) + 2)  /* Offers only 'Continue'      */

/* Useful macros */

#define Beep          (_swi(0x107,0))
#define Swap(a,b)     { (a) ^= (b); (b) ^= (a); (a) ^= (b); }
#define StrNCpy0(x,y) {strncpy(x,y,sizeof(x)-1); x[sizeof(x)-1]=0;}
#define WordAlign(a)  (void *) ((((unsigned int) (a)) + (sizeof(int) - 1)) & (~(sizeof(int) - 1)))

#define ChkError(e)   (show_error_cont(e))
#define RetError(fn)  do {_kernel_oserror * e = (fn); if (e) return e;} while (0)
#define StrLastE      do {erb = *_kernel_last_oserror(); erb.errnum = Utils_Error_Custom_Message;} while (0)
#define RetLastE      do {erb = *_kernel_last_oserror(); erb.errnum = Utils_Error_Custom_Message; return &erb;} while (0)
#define RetWarnE(e)   do {if (&erb != (e)) erb = *(e); erb.errnum = Utils_Error_Custom_Message; return &erb;} while (0)

/* Function prototypes */

char              * lookup_token                     (const char * s, int flag, const char * arg);
char              * lookup_choice                    (const char * s, int flag, const char * arg);
char              * lookup_control                   (const char * s, int flag, const char * arg);

void                show_error                       (_kernel_oserror * e);
void                show_error_cont                  (_kernel_oserror * e);
void                show_error_ret                   (_kernel_oserror * e);
int                 show_error_ask                   (_kernel_oserror * e, const char * buttons);
int                 report_toolbox_error             (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

_kernel_oserror   * make_no_fetch_memory_error       (int stage);
_kernel_oserror   * make_no_cont_memory_error        (int stage);
_kernel_oserror   * make_no_table_memory_error       (int stage);
_kernel_oserror   * make_no_memory_error             (int stage);

#ifdef JAVASCRIPT

  _kernel_oserror * make_no_javascript_memory_error  (int stage);

#endif

void                show_centred                     (ObjectId o);
_kernel_oserror   * set_corrected_extent             (unsigned int f, ObjectId o, BBox * w);
int                 find_behind                      (int w);
_kernel_oserror   * find_tool_sizes                  (int * theight, int * hheight, int * vwidth);

void                register_null_claimant           (int eventcode, WimpEventHandler * handler, browser_data * handle);
void                deregister_null_claimant         (int eventcode, WimpEventHandler * handler, browser_data * handle);

BBox              * intersection                     (BBox * a, BBox * b);
BBox              * set_graphics_intersection        (BBox * rbox, BBox * cbox);
void                restore_graphics_intersection    (BBox * cbox);

void                read_os_to_points                (void);
void                convert_pair_to_os               (int x, int y, int * osx, int * osy);
void                convert_pair_to_points           (int x, int y, int * mpx, int * mpy);
void                convert_to_os                    (int x, int * osx);
void                convert_to_points                (int x, int * mpx);
void                convert_box_to_os                (const BBox * mp, BBox * os);
void                convert_box_to_points            (const BBox * os, BBox * mp);

_kernel_oserror   * read_sprite_size                 (char * name, int * width, int * height);
_kernel_oserror   * utils_text_width                 (char * text, int * width, int scan);
_kernel_oserror   * set_gadget_state                 (ObjectId o, ComponentId c, int grey_state);

void                anti_twitter                     (WimpRedrawWindowBlock * r);

int                 adjust                           (void);

int                 hide_gadget                      (ObjectId o, ComponentId c);
int                 show_gadget                      (ObjectId o, ComponentId c);
int                 gadget_hidden                    (ObjectId o, ComponentId c);
void                slab_gadget                      (ObjectId o, ComponentId c);
void                slab_gadget_in                   (ObjectId o, ComponentId c);
void                slab_gadget_out                  (ObjectId o, ComponentId c);

ObjectId            utils_check_caret_restoration    (ObjectId window_id);
_kernel_oserror   * utils_restore_caret              (ObjectId window_id);

_kernel_oserror   * copy_toolaction_info             (ObjectId src_o, ComponentId src_c, ObjectId dst_o, ComponentId dst_c);
_kernel_oserror   * set_window_flags                 (int window_handle, unsigned int clear_word, unsigned int eor_word);

int                 debounce_keypress                (void);

int                 task_from_window                 (int window_handle);
_kernel_oserror   * utils_browser_from_window        (int window_handle, browser_data ** browser);
int                 is_known_browser                 (browser_data * b);

browser_data      * utils_parent                     (browser_data * b);
browser_data      * utils_flat_parent                (browser_data * b);
browser_data      * utils_ancestor                   (browser_data * b);

int                 encode_base64                    (const char * in, int len, char * out);
int                 utils_strcasecmp                 (const char * a, const char * b);
int                 utils_strncasecmp                (const char * a, const char * b, unsigned int n);
char              * utils_strdup                     (const char * s1);
int                 utils_len_printf                 (const char * format, ...);
int                 utils_number_length              (int number);
unsigned int        utils_return_hash                (const char * s);

_kernel_oserror   * utils_get_task_handle            (const char * task_to_get, unsigned int * found_handle);
_kernel_oserror   * utils_stop_proxy                 (void);
void                utils_build_user_agent_string    (int netscape, char * buffer, int buffer_size);

int                 utils_check_scrap                (void);
_kernel_oserror   * utils_canonicalise_path          (const char * in, char ** out);
_kernel_oserror   * utils_build_tree                 (const char * path);
@


1.18
log
@Another intermediate check-in, resources may not be up to date; items
most likely to be buildable are PhoenixJ and BrowseD. Done because I'm
about to make some rather dodgy changes to code otherwise unchanged
since the Customer browser and I may well have to back them out...

In Handlers.c now set the HFlags_HasBeenVisited bit of a token at the point
it is first clicked on. Means the link returns to a "visited" colour after
the highlight flash immediately. This will persist for as long as the browser
window is kept open on that page, though if the URL doesn't end up making it
into the history for whatever reason it would "unhighlight" on reload; fair
enough, really. The highlight is window-local, so there are no redraw worries
for other open windows with links to the same URL (though other same-URL
links on the same page aren't updated either).

All forms submissions force a reload (principally for eudoramail.com, but
many other sites have similar requirements).

!MkClean and !MkClnAll didn't correctly call the utility to strip Makefile
dependencies. Fixed.

On fetch closedown, fetchpage_preprocess_token could be called on a token
which had already been run through the preprocessor. Now checks the flags
word before proceeding.

Image RAM cache and garbage collection system implemented - see new Choices
file entries CollectAfter, FreeRAMLimit and UnusedImageLimit to get an
overview. This contains groundwork for JavaScript image array support.

More JavaScript support improvements. Any one window object will know its
parent, top, this, etc.; frames array working except for a frameset created
via. multiple documents; opener for something created with window.open is
currently not set and don't know why (property is being created, pointer to
valid object is held, but JS engine returns 'null'. Ho hum) - JSChain won't
work yet, then.
@
text
@d47 3
a49 3
char              * lookup_token                     (char * s, int flag, char * arg);
char              * lookup_choice                    (char * s, int flag, char * arg);
char              * lookup_control                   (char * s, int flag, char * arg);
@


1.17
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d122 1
@


1.16
log
@Check for WindowManager 3.97 and ensure Unicode$Path is set in all
!Run[D] files, don't set the Alias$@@PrintType_FF4 variable, and updated
Customer build ROM obey file variants. Various other changes to
the Run files for new module versions, updated paths to support
new positions of choices, hotlist and histories (see later), etc.

!Sprites[22] files hold small !app icons for some variants, and
an ic_browse sprite. Some variants now have a Sprites and Sprites22
file instead of just Sprites, with the former containing various
mode 12 or 15 specific sprites.

Text files dragged to the URL writable are treated as ANT URL files. This
relies on URLBarWrit (Toolbars.h) being a unique ID, which it should be,
but beware of the Hotlist and Choices numberspaces...

INPUT TYPE=BUTTON supported. Form items without a FORM tag are now shown
(as MSIE 4, but not NN 4).

'*', '-', '@@', '_' and '.' are not escaped when submitting forms now. The
Web interface to the IMDb now works.

INPUT TYPE=HIDDEN items will not affect the line height anymore - so
http://www.hotmail.com/ now has correctly aligned writable icons, for
example. Similarly, TAG_FORM and TAG_FORM_END items could push up
line height and don't anymore.

HRs with a specified pixel width will now influence the size of a table
cell (they didn't before).

BRs now checked by tagno field when the browser needs to know something
was an actual BR tag rather than just a line break signal, and by the
style bit entry when only the indication of a line break is required.

Table widths of 0 or 0% are ignored.

Trace.c updated to report height and background fields in a table_stream.

fm_putsl() writes a terminator into the string; the Forms.c routines were
calling this for displaying INPUT TYPE=PASSWORD fields using the FE_PassCode
literal string (a line of stars). This write into a read only data area
would make the debugger fault the access. A local char array is now used
instead, to get round this (note the use of var[]=literal rather than
var[sizeof(literal)]; strcpy(var, literal) due to some weird compiler bug
that copies the wrong thing into 'var' under some (undefined...)
circumstances).

Text areas don't scroll back to the top line when clicked in anymore;
single line writables don't scroll back to the left either. When
reentering a text area from 'above', the caret appears at the top line
rather than 'somewhere further down'...

ARROWS_MOVE_OUT compile time option at the top of Forms.c defines whether
you must press Tab/Shift+Tab to move between writable fields in forms or
if up/down will drop out of them, though if keyboard control is on this
is enforced (or you get trapped inside the form!).

urlutils_filetype_from_url now uses MimeMap module.

If fetcher is told a page is text, it'll check for a filename extension and
may choose to use this instead (e.g. it may find it's HTML instead). This
is to try and get around duff servers... (e.g. http://www.batalarms.co.uk/).

Save dialogues shouldn't flicker when options that don't change the
filetype are selected (before, the draggable sprite was always reset for
each selection). Noticed the erroneous setting of a static variable in
SaveFile.c by a call to this by SaveObject.c, and so added a flag to
savefile_set_filetype to deal with this - would have been possible to get
the wrong filetype sent to applications or at best the wrong filetype
sprite in the dialogue without that.

The caret shouldn't jump out of a form back to the URL writable if the page
reformats now.

Table background colours now supported (as in the colour you see in the
border space if the cellspacing is large enough; this is as in MSIE, not
as in Navigator). Drawfile output routines updated accordingly.

Corrected erroneous use of wimpt_dx() / wimpt_dy() in a couple of places
in Images.c, which meant that (say) 1x1 images didn't work correctly in
medium resolution display modes.

Now have support for save as text (component ID and event 0x12) and save
as Draw (component ID and event 0x13) buttons. Dubious conditions for
greying and ungreying the print, save source and view source buttons and
menu options sorted out as part of implementing the same for the two new
buttons; added greying out of their associated menu items in passing.

Turned kerning on in draw file objects (does mean a rather heinous
increase in file size, but this is the only way to ensure the draw file
matches the visible page).

Comments before functions in SaveDraw.c are now complete and up to date.

Image and visit histories now generate a crude hash number to speed up
searching for items. It does give a speed increase, though it's a
disappointingly small one.

Issue of left/right margins and cellpaddings sorted out. Now have
redraw_left/right_margin for finding out the basic gap you must leave.
redraw_left/right_gap then gives any extra indentation for LI, BLOCKQUOTE
or whatever. The last two can be subtracted from the display width to
get an available page width for any section of text. Note that
redraw_left_gap replaces redraw_margin. The redraw_start_x function
uses the above to work out where a line's left hand edge should be,
taking account of left/right/centre alignment. HRs have been fixed now
(they were quite broken in v1.30, I think) based on this new model and
the behaviour of MSIE/NN 4.

Fixed width of cells with no contents - cell padding values wouldn't
have worked properly as the reformatter returns 0 rather than the left
hand margin size if given no stream.

Removed FM_Absolute flags for Font_Paint (spotted by DBrown) - sets bit
2, which is reserved...?

IMG width and height in % terms now works correctly; a % of available
width (after margins and indents) or height on the main page or for
a table cell, if the image lies in one. Because of the chicken-and-egg
problem with the latter, the cell must specify a width and/or height
for things to work properly. If this is not done, you'll usually end
up with a 1:1 scaled image (as in Navigator 4, rather than ending up
with no image or even no cell (!), as in MSIE 4).

HEIGHT attribute on a TABLE tag is supported, but only in a crude
fashion; the extra height (if there is any) is distributed over the
rows in a linear fashion. This is probably all you have to do in
practice, but I haven't checked. To maintain a notion of min/max
height as well as width would of course require a great deal more
work...

If using client pull to reload a page with a fragment ('...#name')
specified, then the reload wouldn't work on the same page; it'd just
jump to the fragment position. This won't happen if b->reloading is
set now (so works in conjunction with client pull on the same page
forcing a non-cached fetch). Similarly, if POSTing to such a URL,
a fetch will proceed (both these fixes done originally for
http://jupiter.beseen.com/chat/rooms/g/1678/).

browser_inherit split to browser_inherit and browser_inherit_post_data;
the code for the latter didn't clear any post_data in the child before
copying from the parent either, and could cause flex errors (now fixed).

Res file for Ursula ('Desktop' Browse) build tweaked - bits in the
font choices dialogue renamed, and button bar rearranged to hold the
new Save As Draw button. Other builds have had Save As Draw and
Save As Text buttons added, or not, depending upon availability of
suitable sprites, required UI simplicity, etc.

Now have:

  Browse$ChoicesFile
  Browse$ControlsFile
  Browse$ChoicesSave
  Browse$ControlsSave

(the last two are new) for loading and saving of the Choices or Controls
files. If unset, <App$Dir>.Choices or <App$Dir>.Controls will be set.
E.g., you could set Browse$ChoicesFile to be:

  <App$Dir>.Choices,Choices:WWW.(app).Choices

for loading and

  <Choices$Write>.WWW.(app).Choices

for saving. (The browser never saves Controls at the moment, so the
relevant variable above isn't effectively implemented, but could be
in future). Similarly, to support asymetric loading/saving of the Hotlist,
there are HotlistSave, HistorySave and ImageHistorySave entries in Choices
to complement HotlistPath, HistoryPath and ImageHistoryPath (which are used
for loading). save_save_choices will create directories as needed to obtain
the given path (and has also been fixed in various areas that hadn't been
tested out until now; e.g. zero termination of the AppName$ChoicesFile
variable expansion...). !Run[D] files updated appropriately.

Table widthing code rewritten. Slower, but a lot better on the whole.
Still has some problems - still needs a final 'make sure nothing is
below minimum width' scan, which it should be possible to do without.
No time to fix this at present!

The reformatter will now 'glue together' an LI token followed by any
non-LI token; so a bullet point followed by an item should not be able to
have a line break inserted after the bullet because of very tight width
constraints (it could before - yuk...).

'about:' brings up a page about the browser and any Plug-Ins, as with
Navigator (for example).

URI files support titles, as per spec. version 8. Saving a current
location to the Hotlist will thus give a sensible title now (unless
you're in a frame, so there's no title to get...). Of course, v1.00
files without a title still work.

Note that NOBR is *not* supported in this build and this combined with
the new table widther may cause problems on some sites (e.g. Microsoft's
home page!).
@
text
@d40 4
a43 3
#define RetError(fn)  {_kernel_oserror * e = (fn); if (e) return e;}
#define RetLastE      {erb = *_kernel_last_oserror(); return &erb;}
#define RetWarnE(e)   {if (&erb != (e)) erb = *(e); erb.errnum = Utils_Error_Custom_Message; return &erb;}
d47 86
a132 78
char            * lookup_token                     (char * s, int flag, char * arg);
char            * lookup_choice                    (char * s, int flag, char * arg);
char            * lookup_control                   (char * s, int flag, char * arg);

void              show_error                       (_kernel_oserror * e);
void              show_error_cont                  (_kernel_oserror * e);
void              show_error_ret                   (_kernel_oserror * e);
int               report_toolbox_error             (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

_kernel_oserror * make_no_fetch_memory_error       (int stage);
_kernel_oserror * make_no_cont_memory_error        (int stage);
_kernel_oserror * make_no_table_memory_error       (int stage);
_kernel_oserror * make_no_memory_error             (int stage);

void              show_centred                     (ObjectId o);
_kernel_oserror * set_corrected_extent             (unsigned int f, ObjectId o, BBox * w);
int               find_behind                      (int w);
_kernel_oserror * find_tool_sizes                  (int * theight, int * hheight, int * vwidth);

void              register_null_claimant           (int eventcode, WimpEventHandler * handler, browser_data * handle);
void              deregister_null_claimant         (int eventcode, WimpEventHandler * handler, browser_data * handle);

BBox            * intersection                     (BBox * a, BBox * b);
BBox            * set_graphics_intersection        (BBox * rbox, BBox * cbox);
void              restore_graphics_intersection    (BBox * cbox);

void              read_os_to_points                (void);
void              convert_pair_to_os               (int x, int y, int * osx, int * osy);
void              convert_pair_to_points           (int x, int y, int * mpx, int * mpy);
void              convert_to_os                    (int x, int * osx);
void              convert_to_points                (int x, int * mpx);
void              convert_box_to_os                (const BBox * mp, BBox * os);
void              convert_box_to_points            (const BBox * os, BBox * mp);

_kernel_oserror * read_sprite_size                 (char * name, int * width, int * height);
_kernel_oserror * utils_text_width                 (char * text, int * width, int scan);
_kernel_oserror * set_gadget_state                 (ObjectId o, ComponentId c, int grey_state);

void              anti_twitter                     (WimpRedrawWindowBlock * r);

int               adjust                           (void);

int               hide_gadget                      (ObjectId o, ComponentId c);
int               show_gadget                      (ObjectId o, ComponentId c);
int               gadget_hidden                    (ObjectId o, ComponentId c);
void              slab_gadget                      (ObjectId o, ComponentId c);
void              slab_gadget_in                   (ObjectId o, ComponentId c);
void              slab_gadget_out                  (ObjectId o, ComponentId c);

ObjectId          utils_check_caret_restoration    (ObjectId window_id);
_kernel_oserror * utils_restore_caret              (ObjectId window_id);

_kernel_oserror * copy_toolaction_info             (ObjectId src_o, ComponentId src_c, ObjectId dst_o, ComponentId dst_c);
_kernel_oserror * set_window_flags                 (int window_handle, unsigned int clear_word, unsigned int eor_word);

int               debounce_keypress                (void);

int               task_from_window                 (int window_handle);
_kernel_oserror * utils_browser_from_window        (int window_handle, browser_data ** browser);
int               is_known_browser                 (browser_data * b);

browser_data    * utils_parent                     (browser_data * b);
browser_data    * utils_ancestor                   (browser_data * b);

int               encode_base64                    (const char * in, int len, char * out);
int               utils_strcasecmp                 (const char * a, const char * b);
int               utils_strncasecmp                (const char * a, const char * b, unsigned int n);
int               utils_len_printf                 (const char * format, ...);
int               utils_number_length              (int number);
unsigned int      utils_return_hash                (const char * s);

_kernel_oserror * utils_get_task_handle            (const char * task_to_get, unsigned int * found_handle);
_kernel_oserror * utils_stop_proxy                 (void);
void              utils_build_user_agent_string    (int netscape, char * buffer, int buffer_size);

int               utils_check_scrap                (void);
_kernel_oserror * utils_canonicalise_path          (const char * in, char ** out);
_kernel_oserror * utils_build_tree                 (const char * path);
@


1.15
log
@Not all resources are up to date in this check-in, and documentation
both within source and stuff in 'Docs' is out of date or missing - I
was very pushed for time on this one... Hopefully will do another
'tidy up' check-in before close on Friday; until then, beware of
anything other than the Ursula (Desktop browser) build. Anyway...

Export As Draw done. As part of this, FONT SIZE and SUP / SUB adjustment
of font size is done in fm_token_font_info rather than fm_find_token_font.

Bullets and switches are plotted as indirected sprite items, rather than
indirected text + sprite items - this relied on being in a redraw loop to
pick the sprites up from the local pool (failed during printing).

URI files now have a LF line ending rather than CR... '*' recognised
as an empty field when loading via. RAM transfer now (only worked for
loading from disc before).

Gave placeholder bounding boxes 4 OS units more minimum extra gap
vertically and reduced horizontal addition to this value * 1.5, rather
than * 2 (see reformat_get_placeholder_size).

Background image tiling starts at ymax - h + 4, rather than ymax, so
there isn't the bottom line of pixels from the top tile always present
at the top of the window. The '+4' is for caution's sake.

Can now save a frame's HTML source, that of its parent or its ancestor,
and the same for the URI pointing to those documents - see Menus.h for
the relevant component IDs that should lead to the SaveFile dialogue.

Have hopefully fixed timeout = 0 values (i.e. 'forever') on things
like LinkTo; before, image fetches could override the state (so you'd
only ever see brief flickers of a given URL as the pointer went over
a link).

Save File dialogue will remember the state of option or radio buttons
for a given parent component origin and restore that state when the
dialogue is next opened from the same place (stops turning on saving
as a URL file also turning on 'save background images' for Draw file
export, etc.).

Use of a META tag to reload the *same* page now sets the 'reloading'
flag in the browser so that it doesn't go through a proxy - otherwise
pages which are meant to update periodically through client pull
don't work, as they keep coming out of the cache.

Can now handle images specifying just a width or height in the HTML
(other dimension is scaled accordingly, but note that the placeholder
size must still be 'dumb' until the image data comes in). An image
will now override an image history size entry for the same entry
with a different size.
@
text
@d115 1
d122 2
@


1.14
log
@There are a few known significant problems with this code but it's being
checked in so the Choices can be worked on. Note that Res files etc. are
not up to date across all builds. Progress is as follows...

Bug report prompted me to do this - now ignore <p> tags straight after
<li> tags, so '<ul><li><p>Some text' works as the author (or automatic
generator, more commonly) intended.

A <p> tag before a table will be acted upon now (it was ignored before).
Something like <li><p><table...> will give a line break and paragraph
space after the <li> despite the changes mentioned above, as in other browsers.
Both browsers differ from Navigator, where the table appears alongside
the <li> tag.

Multiple BR tags work as in MSIE / Navigator (they don't collapse to
zero height anymore).

For the above, line height (and so, <br><br> or <p> spacing) is now
calculated inside reformat_text_line_height, and is used with either
a token to get the text height at a given size (e.g. for general line
spacing or multiple BR tags) or NULL for normal size text (e.g. for
P spacing, though this value is in practice later scaled by 7/8ths in
reformat_check_height). Note this behaviour is exhibited by MSIE 4;
v3 gave two BRs the same spacing as one P (i.e. not font size
dependent).

Save dialogues can have an option button or couple of radios to
switch between various formats (e.g. URI or URL, sprite or original
format). See 'Docs.Notes' for more. The back-end to this is now
implemented (i.e. at the moment, save as URI or URL, save as original
image format). Note that when saving background images, a leafname
based on the original fetch URL is now offered rather than a generic
'Background'.

Internal URL scheme changed to be all lower case, so relativisation
through URL_Fetcher still makes sense... :-/

Holding down 'shift' when clicking on stop reverses the interpretation
of the Controls file 'StopWebServe' entry.

Fixed row / column count for exporting tables as text; fixed a few
bits and pieces of internal URL scheme stuff which got broken when
HTMLLib started using URL_Fetcher's relativisation.
@
text
@d106 2
@


1.13
log
@Fixed some glitches in the modified status bar code (e.g. status inference
wasn't working properly).

Shift+Toggle size always opened to not obscure the icon bar. If CMOS is
set to always show the icon bar, then Shift+Toggle size is meant to
reverse sense and open to absolute full size. It now does this.

!Run[D] files now require URL 0.22, HTTP 0.64, FTP 0.22, Gopher 0.08
and File 0.32.

Minor overhaul of 'Docs.Notes' (with 'Docs.User' similarly updated) to
include a few new bits and pieces.

Timeout values of 0 now mean 'forever'. Plug-in status messages now have
their own timeout setting. New Messages token 'Actv' for extra info when
a status message times out and the status line drops to 'Viewing' or
'Ready' when there is still a Busy state registered by the Plug-in.

Small Fetch windows don't become visible briefly for Plug-in fetches
when the fetch is complete (for SeeFetches:no, where these windows
should be hidden all the time).

WebServe may be controlled through the Browse front-end via.
Wimp_MAppControl reason code 4 (Wimp_MAppControl_Configure). Note the
renaming internally of 'WebServ' or 'WebServe' has been changed to
'Proxy' (with lower case equivalents where relevant); proxy name
and starting details come from the Messages file 'ProxyName' and
'ProxyComm' tokens. More in 'Docs.Notes'.

Res files updated for image history and PRE/TT font aspect ratio
choices. 'Don't expire' labels changed to 'Expire' (oops, didn't
notice the change in the development Browse's Res file when I
updated all of the others until now...).

When printing, Wimp_PlotIcon appears to ignore R4 and R5, plots
'somewhere' on the page, and tries to get the sprite from the global
pool. This latter part normally causes an error to be raised; though
on my machine I just get a corrupted error message. The Desktop font
gets lost at this point too. All have yet to be fixed; as an
interim work around, Wimp_PlotIcon objects are never drawn at all
if the global 'printing' flag is set.
@
text
@d25 7
d40 1
a40 1
#define RetError(fn)  {e = (fn); if (e) return e;} /* Assumes '_kernel_oserror * e' already declared */
d42 1
a42 7

/* Known error numbers */

#define Utils_Error_OS_Escape      17              /* Offers only 'Continue'      */
#define Utils_Error_Custom_Normal  (1u<<30)        /* Offers 'Continue' and 'Quit */
#define Utils_Error_Custom_Fatal   ((1u<<30) + 1)  /* Offers only 'Quit'          */
#define Utils_Error_Custom_Message ((1u<<30) + 2)  /* Offers only 'Continue'      */
@


1.12
log
@Added system font option to choices.
Stopped UNIFONT forcing system font use and added calls to Font_WideFormat.
Made sure the system font option is read before fm_init is called!

User agent string now set if Netscape faking is disabled (format used is
"Acorn Browse/1.26 (RISC OS 3.71)".
@
text
@d113 2
a114 1
_kernel_oserror * utils_stop_webserv               (void);
@


1.11
log
@Sorted out Res files, including fixing position of 'bytes' label in one
of the Choices dialogues (I'd missed it out of a selection when everything
else got moved down a bit). Unfaded Enc_Chinese menu entries, made sure
text labels were wide enough for system font, changed 'Apply' on Choices
dialogue to 'Set', and added ^K to hotlist keyboard shortcut lists.
Print Setup (i.e. Print dialogue) buttons all set to 'local', so the
stupid Toolbox doesn't close the dialogue and lose the caret before I
can see if it was in there to start with...

256 colour hotlist sprites taken back to standard 16 colour versions,
since there's a significant speed penalty on slower machines. The
testbed browser still has the 256 colour versions so the designs aren't
completely lost.

Changed access settings to exported builds to wr/r - lr/r was really getting
on my nerves whenever I wanted to try something temporary out.

View source, save source and print handlers would all try to work if
there was no source to act on - despite the fact that toolbar buttons
would be greyed out form them. This is fixed.

The Navigate menu has components greyed to match the toolbar state,
when opened. It isn't kept up to date dynamically, though this shouldn't
really be a problem (reopen the submenu...). As part of this, finally
sorted out conditions for the Stop button to be greyed, or the
GoTo/Go/Stop tristate to be at 'Stop' versus 'GoTo'.

Deferred reformatting is now disabled for external image fetches.

Browser-local client pull flag removed; hitting the Stop button simply
cancels any null handlers working for it. That way, client pull switches
back on in passing at the next fetch (it was never really switched off).
So to stop client pull, hit the stop button at any point.

Done CELLPADDING attribute; cellpadding field in reformat_cell (Global.h)
is redundant since the table token is accessible from there, and so it has
been removed. CELLSPACING support also added.
@
text
@d114 1
a114 1
void              utils_build_user_agent_string    (char * buffer, int buffer_size);
@


1.10
log
@Version in Messages taken to 1.22 (03 Oct).

Updated Res files in appropriate builds to hold various (similar) Choices
designs.

Choices related menus were flagged as Shared, but none of the dialogues
(including ColourDBox) were - potential future problems, though shouldn't
cause any leaks at present. This has been sorted out anyway.

Encoding function encoding_init no longer returns an error from
toolbox_create_object, so the Encoding menu and all those attached
to it do not have to be present (e.g. the Customer build).

SUB, SUP, STRIKE and U supported. U underlines the baseline of the body text
font, whilst STRIKE will go through roughly the middle of the lower case
chars even if the font is SUP or SUB. Note that Navigator appears to shift
the underline point for SUB and SUP; it may be necessary to copy this
behaviour, but testing on real sites must proceed before that. There could
also be a problem with the automatic lowering of font size, which Navigator
doesn't do, so any FONT SIZE = -n commands could make it too small. Again,
this needs testing on real sites.

'http://' is added to URLs with no protocol specified, unless they start with
'ftp.', in which case the new behaviour is to add 'ftp://'.

Choices code altered to do less error checking on components! They should be
able to be missing without raising errors. Referencing of the subwindow
array changed from *(subwindows + number) to subwindows[number].

Made trace_tag_name code look pretty...

reformat_useless_token now checks tagno is non-zero.

User Agent string setting now done through URL_GetURL, on a per-session
basis.

Ellipsis character removed from all Messages files, replaced with '...'.
There's little difference between the two in an outline font, and in System
font the latter looks much better. Smart quotes left in, as they look
better in all cases.
@
text
@d94 3
@


1.9
log
@Support for ANT URL broadcast message added.

Image deletion routines rewritten; nasty animated GIF bug now gone
(it kept trying to update the cross-referenced image in the browser that
no longer existed, and I've no idea how animated GIFs ever managed to *not*
blow up if a cross referencing browser was shut down; and I've tested
this...). There are now as many image structures as there are total images
in the visible browsers, and no more; cross referenced images in the
to-be-deleted browser have their ownership moved to the cross
referencer before the cross referencee is wiped, with any required fetches
being transferred with them.

Reformatter sped up a bit by getting rid of strlen on the main text field
of tokens in all places bar one, where it is called extremely rarely. This
means direct app-to-app transfer of, say, a 359K text file to the browser
won't run like a drain as it tries to do strlen on a 359K string over and
over again! Most of the time the performance benefits won't really be
noticable, but on the above text file, formatting time went down from
290 seconds before the change to just under 7 seconds, a 41 fold speed
increase or thereabouts (SA110 228MHz).

MakeFile changed to force function name compilation on for debug builds
(-fn in the DD...FLAGS); useful for certain functions such as
register_null_handler, which can now output the name of the function
being registered.

...Which helped show up some nasties in the animation handler and animation
drift handler registration/deregistration process, which have been fixed
(callers of fetchpage_release_nulls were unaware that the drift handler
could be installed, and fragments of old code checking choices.anim_drift
had a value other than 1 or 0 were still hanging around - bit tricky for
a single bit item).

Added support for VALIGN in table cells. Spotted a bug or two in the
'what token is the pointer over' routines as a result, and fixed them - the
worst was in browser_line_at_y, which checked the y coordinate was below
the given one [the mouse], but didn't check the line height to see if the
given y coordinate was *within* the line, rather than just above it. Never
used to matter pre-tables, but a definite concern once multiple line
arrays can exist on one page.
@
text
@d111 1
a111 1
_kernel_oserror * utils_set_http_agent             (int flags, unsigned int session);
@


1.8
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d111 1
a111 1
_kernel_oserror * utils_set_http_agent             (void);
@


1.7
log
@Created Protocols source file and moved a lot of message handling from
handle_messages - the latter now serves as a high level distributor to
lower level functions in Protocols. Incidentally, URL files (as used by
the ANT suite) can be loaded by dragging to the browser in the same way
as URI files - Not A Lot Of People Know That, etc.

Merged new hotlist display type Res file to existing resources, added
support for DataSave message so items can be dragged from the hotlist
to a specific window (RAM transfer for URI and URL files; ScrapFile for
HTML and Text but deleted afterwards and there are appropriate guards
to stop Reload just saying 'not found'; images run through ScrapFile and
there is no choice but to leave them there and do a conventional fetch).

All !RunD files now give a WimpSlot of 2304K. Some small changes to
the Argo and Ursula build Res files to make the menu trees more sensible.
Controls files now take 'file:/' instead of 'file://' in Protocols
section. Definitions at top of URLutils.c *not* altered, as then you
end up with invalid URLs - so it will accept 'file:/', but always generate
'file://'. This is because some browsers exports 'file:/'. Sigh.

make_no_[..._]memory_error functions now return a _kernel_oserror * rather
than void. It's always &erb returned, but it enables users to use a more
elegant 'return make_no_memory_error(1);', say, rather than something
like 'make_no_memory_error(1); return &erb;'. I obviously should've written
it like that at the outset, but never mind. All callers have been
appropriately updated.

The urlutils_leafname_from_url function now replaces illegal characters
(A7000 Welcome Guide p54...) in the leaf with legal alternatives.

Internal URL scheme is now a bit cleaner, with everything properly defined
in URLutils.h. All references to http:, file: and ftp:, with or without
a following '//' use the definitions in here now.

More tidying and some reorganising of Hotlist source. Auto-open delay is
now a Choices item. Some dependencies on statics removed (e.g. the
counting functions don't accumulate into the global item_number now).
The redraw functions used Wimp_TextOp - oops, so this has been amended
to use whatever is supported on your Wimp. This is now in a new function
(utils_text_width()), which the History menu routines also use (there was
a bug in the width routine there anyway, which is therefore fixed in
passing). Several other routines used Wimp_TextOp directly too, and
they have been altered to use the new function as well.

In hotlist code, one of the larger changes is in the API to hotlist_draw_r()
(formerly _hotlist_draw()) which now takes item widths and heights as
parameters - discovering these is quite slow, so doing it every time the
function calls itself recursively is a little less efficient than
passing the values in from elsewhere. Note that underscore prefixed
functions are being slowly renamed to _r suffixed functions, to match
the convention established by Tony Cheal with is table routines. This
makes it much more obvious when something is recursive, as the same
naming convention is used in every browser source file.

Finally, note that I intend to ditch SaveDBox and use an alternate window
with manual control of the messaging in Protocols.c. This will allow
various improvements which at present the SaveDBox operational methods
preclude. I'm going to have to do at least an alternate Window object for
the SaveDBox module to use soon in any case. Getting rid of SaveDBox will
help reduce, if only slightly, demands on the RMA.
@
text
@d34 1
@


1.6
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d53 4
a56 4
void              make_no_fetch_memory_error       (int stage);
void              make_no_cont_memory_error        (int stage);
void              make_no_table_memory_error       (int stage);
void              make_no_memory_error             (int stage);
d79 1
d99 1
d111 2
@


1.5
log
@Odd problem with Entries file meant none got checked in last time...
@
text
@d28 1
d33 1
a33 7
#define RetError(fn)  {_kernel_oserror * utils_error = (fn); if (utils_error) return utils_error;}

#ifdef TRACE
  #define ChkTrace(e) (show_error_cont(e))
#else
  #define ChkTrace(e) (e)
#endif
d46 1
d105 1
@


1.4
log
@Checking in mostly because its Friday... Quite a few little bug fixes
(adding up to a greater whole), which include removal of the dastardly
'invalid image number' errors that trace builds would raise from time to
time. Frame highlights are now better controlled (releaseably so).
Generally, this build represents the first genuinely promising version
of the browser for quite some time, despite the known library problems
with comment handling etc.
@
text
@d15 9
a23 6
/*************************************************/
/* File   : Utils.h                              */
/* Purpose: Infrequently altered utilities       */
/* Author : A.D.Hodgkinson                       */
/* History: 18-Oct-96: Created                   */
/*************************************************/
d47 1
a47 1
/* Miscellaneous function prototypes */
d108 1
@


1.3
log
@In the middle of customer support work.
@
text
@d100 1
@


1.2
log
@Supported client pull, through a generalised handing of the META tag.
@
text
@d102 1
d106 1
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d102 1
@
