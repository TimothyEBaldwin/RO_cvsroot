head	1.4;
access;
symbols
	Browse-2_16:1.4
	Browse-2_15:1.4
	Browse-2_14:1.4
	Browse-2_13:1.4
	Browse-2_12:1.4
	Browse-2_11:1.4
	Browse-2_10:1.4
	Browse-2_09:1.4
	ahodgkin_208_i4_2:1.4
	ahodgkin_208_i4:1.3
	ahodgkin_208_i3:1.3
	ahodgkin_208_i2:1.3
	ahodgkin_208_i1:1.3
	ahodgkin_207release:1.3
	ahodgkin_206release:1.3
	ahodgkin_205release:1.3
	ahodgkin_204release:1.3
	ahodgkin_202release:1.3
	ahodgkin_201release:1.3
	ahodgkin_200release:1.3
	ahodgkin_133beta:1.3
	ahodgkin_132beta:1.3
	ahodgkin_131beta:1.3
	ahodgkin_130beta:1.3
	ahodgkin_129:1.3
	ahodgkin_128beta:1.3
	ahodgkin_128alpha:1.3
	ahodgkin_127beta2:1.3
	ahodgkin_127beta:1.3
	ahodgkin_126beta:1.3
	ahodgkin_AW97patch:1.3
	ahodgkin_AW97:1.3;
locks; strict;
comment	@# @;


1.4
date	2000.05.31.15.58.58;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.09.22.07.43.31;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.09.12.17.19.39;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.08.28.16.08.16;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    PrintStyle.h                                      */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Change print style options with the PrintStyle    */
/*          dialogue box.                                     */
/*                                                            */
/*          This source is fairly closely tied to Print.h, as */
/*          the Print Style dialogue is typically opened from */
/*          the Print dialogue.                               */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 24-Aug-1997 (ADH): Created.                       */
/*          07-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_PrintStyle__
  #define Browser_PrintStyle__

  #include <kernel.h>
  #include <tboxlibs/toolbox.h>

  /* Print Style dialogue component IDs */

  #define PSUnderlineLinks                0x02200
  #define PSUseDocumentColours            0x02201
  #define PSShowForegroundImages          0x02202
  #define PSShowBackgroundImages          0x02203
  #define PSAllBackgrounds                0x02204
  #define PSTablesOnly                    0x02205
  #define PSNoBackgrounds                 0x02206
  #define PSBlackIfNoBackground           0x02207
  #define PSAlwaysUseBlack                0x02208
  #define PSOK                            0x02209
  #define PSCancel                        0x0220a
  #define PSGroupFrameOne                 0x0220b
  #define PSGroupFrameTwo                 0x0220c

  /* Print Style dialogue event codes */

  #define EPSOK                           0x02209
  #define EPSCancel                       0x0220a

  #define EPSToBeShown                    0x023ff
  #define EPSOG1                          0x023fe /* Raised by any of the option buttons in option group 1. */

  /* Function prototypes */

  int               printstyle_set_defaults         (void);

  int               printstyle_to_be_shown          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int               printstyle_ok                   (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  _kernel_oserror * printstyle_close                (ObjectId ancestor, int do_not_close);

  _kernel_oserror * printstyle_set_look             (ObjectId source, ObjectId browser, int underline_links, int use_source_cols, int show_foreground, int show_background);

  int               printstyle_show_none            (void);
  int               printstyle_show_in_tables_only  (void);
  int               printstyle_show_all             (void);
  int               printstyle_black_no_background  (void);
  int               printstyle_always_use_black     (void);

  void              printstyle_return_dialogue_info (ObjectId * window, ObjectId * ancestor);

#endif /* Browser_PrintStyle__ */
@


1.3
log
@Now working on source merged with Kevin Bracey's internationalisation
support. UNIFONT is undefined in the Make File for now. All Res and
Choices files updated appropriately.

Having sorted out the old Choices and Messages to form Choices, Controls
and Messages, this build has had the same cleaning up done internally.
This includes greater consistency in naming schemes and the removal of
the inconsitent choices items - e.g. Choices file entries saying 'delay
images' and 'plain backgrounds' where internally all the flags say 'show
images' and 'show backgrounds'. ChoiceDefs.h and CtrlDefs.h added to
clarify the meaning of some fields, though usage of these is not 100%
in the source (there are cases where parameters are passed through to
functions as ints, and those functions still check these against hard
coded values rather than the #define stuff).

Fetcher status return bits (connected, sent request, etc.) now reflected
in status bar. Progress during fetchs to files are reported by %, where
the size of the object is known. Exceeding 100% drops back to a byte
counter, in case the estimated size was wrong. The progress counter
may be updated after specific delays, rather than 'as often as possible',
to reduce flicker (as requested by D.Brown some time ago).

I've done a small rewrite of the fetch prioritisation scheme in FetchPage.c;
how well this performs in general use across different processor speeds
remains to be tested, but certainly it has some advantages. For each small
fetch window before the rewrite, a 4cs tight loop was entered - this gave a
noticable and substantial drain to the Desktop performance if more than one
was opened. Now, several can be up at once with little hit. The actual file
fetch is on half the priority it was before, with all others taken back
just a bit - e.g. from 20cs per poll to 15cs per poll for flat out
reformatting. You don't seem to lose much time on the format in practice,
and the Desktop feels quite a bit lighter at the same time. There's the
potential for smoother frameset loading in this scheme, too.

When Shift+Clicking on a link meant you still fetched inside the main
browser window, several fetches could occur in a frameset - one per frame.
However, now that you can only do this by clicking on a link that leads to
non-displayable data - or by turning off the small fetch windows by
setting UseSmall to 'no' in Choices - a bug where fetchpage_preprocessed
would stop such fetches as new ones were started was revealed.
The API to frames_abort_fetching has now been extended to include a
'stop file spooling too' flag, allowing a fix to be made by having
fetchpage_preprocess's calls not set this (and it doesn't check the
savelink flag is unset before proceeding, since frames_abort_fetching
does that implicitly now).

Had left the RAM transfer buffer at 16 bytes (from testing) accidentally...
Oops. Upped it to 4K. In addition, when loading data by RAM transfer,
the browser didn't notice if a RAMFetch bounced during the transfer. It
would be treated as a 'first' RAMFetch bounce, basically, and try to go to
file transfer - oops. Fixed.
@
text
@d15 63
a77 55
/***************************************************/
/* File   : PrintStyle.h                           */
/*                                                 */
/* Purpose: Change print style options with the    */
/*          PrintStyle dialogue.                   */
/*                                                 */
/*          This source is fairly closely tied to  */
/*          Print.h, as the Print Style dialogue   */
/*          is typically opened from the Print     */
/*          dialogue.                              */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 24-Aug-97: Created.                    */
/***************************************************/

/* Print Style dialogue component IDs */

#define PSUnderlineLinks                0x02200
#define PSUseDocumentColours            0x02201
#define PSShowForegroundImages          0x02202
#define PSShowBackgroundImages          0x02203
#define PSAllBackgrounds                0x02204
#define PSTablesOnly                    0x02205
#define PSNoBackgrounds                 0x02206
#define PSBlackIfNoBackground           0x02207
#define PSAlwaysUseBlack                0x02208
#define PSOK                            0x02209
#define PSCancel                        0x0220a
#define PSGroupFrameOne                 0x0220b
#define PSGroupFrameTwo                 0x0220c

/* Print Style dialogue event codes */

#define EPSOK                           0x02209
#define EPSCancel                       0x0220a

#define EPSToBeShown                    0x023ff
#define EPSOG1                          0x023fe /* Raised by any of the option buttons in option group 1. */

/* Function prototypes */

int               printstyle_set_defaults         (void);

int               printstyle_to_be_shown          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int               printstyle_ok                   (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
_kernel_oserror * printstyle_close                (ObjectId ancestor, int do_not_close);

_kernel_oserror * printstyle_set_look             (ObjectId source, ObjectId browser, int underline_links, int use_source_cols, int show_foreground, int show_background);

int               printstyle_show_none            (void);
int               printstyle_show_in_tables_only  (void);
int               printstyle_show_all             (void);
int               printstyle_black_no_background  (void);
int               printstyle_always_use_black     (void);
d79 3
a81 1
void              printstyle_return_dialogue_info (ObjectId * window, ObjectId * ancestor);
@


1.2
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d63 1
a63 1
_kernel_oserror * printstyle_set_look             (ObjectId source, ObjectId browser, int underlinelks, int sourcecolours, int displayimages, int plainback);
d68 1
a68 1
int               printstyle_black_no_backgd      (void);
@


1.1
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d31 1
a31 1
/* Dialogue definitions */
d33 13
a45 11
#define PSUnderlineLinks   0x6100
#define PSUseDocumentCols  0x6101
#define PSShowForeground   0x6102
#define PSShowBackground   0x6103
#define PSAllBackgrounds   0x6104
#define PSTablesOnly       0x6105
#define PSNoBackgrounds    0x6106
#define PSBlackNoBackgd    0x6107
#define PSAlwaysUseBlack   0x610a
#define PSOK               0x6108
#define PSCancel           0x6109
d47 1
a47 3
#define EPSOK              0x6108
#define EPSCancel          0x6109
#define EPSOG1             0x61fe
d49 5
a53 1
#define EOpenPrintStyle    0x61ff /* (Generated before the dialogue is shown) */
@
