head	1.10;
access;
symbols
	Browse-2_16:1.10
	Browse-2_15:1.10
	Browse-2_14:1.10
	Browse-2_13:1.10
	Browse-2_12:1.10
	Browse-2_11:1.10
	Browse-2_10:1.10
	Browse-2_09:1.10
	ahodgkin_208_i4_2:1.10
	ahodgkin_208_i4:1.9
	ahodgkin_208_i3:1.9
	ahodgkin_208_i2:1.9
	ahodgkin_208_i1:1.8
	ahodgkin_207release:1.7
	ahodgkin_206release:1.5
	ahodgkin_205release:1.5
	ahodgkin_204release:1.5
	ahodgkin_202release:1.4
	ahodgkin_201release:1.4
	ahodgkin_200release:1.4
	ahodgkin_133beta:1.4
	ahodgkin_132beta:1.4
	ahodgkin_131beta:1.4
	ahodgkin_130beta:1.4
	ahodgkin_129:1.4
	ahodgkin_128beta:1.4
	ahodgkin_128alpha:1.4
	ahodgkin_127beta2:1.3
	ahodgkin_127beta:1.3
	ahodgkin_126beta:1.2
	ahodgkin_AW97patch:1.2
	ahodgkin_AW97:1.2;
locks; strict;
comment	@# @;


1.10
date	2000.05.31.15.58.53;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	2000.02.25.17.08.57;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	99.03.30.15.52.10;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	98.09.07.11.47.08;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	98.07.23.13.26.49;	author sbrodie;	state Exp;
branches;
next	1.5;

1.5
date	98.04.16.08.14.28;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.11.26.17.11.19;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.11.19.10.29.20;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.10.13.07.07.05;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.09.22.07.43.29;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.10
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    ChoiceDefs.h                                      */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Definitions for Choices items which take a small  */
/*          number of specific values which have a meaning    */
/*          other than 'yes' or 'no' in the context of the    */
/*          item's name.                                      */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 21-Sep-1997 (ADH): Created.                       */
/*          10-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_ChoiceDefs__
  #define Browser_ChoiceDefs__

  /* Printing */

  #define Choices_PrintOrient_Upright       0
  #define Choices_PrintOrient_Sideways      1

  #define Choices_PrintBack_None            0
  #define Choices_PrintBack_Tables          1
  #define Choices_PrintBack_Always          2

  #define Choices_PrintBlack_None           0
  #define Choices_PrintBlack_BG             1
  #define Choices_PrintBlack_All            2

  #define Choices_PrintFacingPages_No       0
  #define Choices_PrintFacingPages_Spread   1
  #define Choices_PrintFacingPages_Page     2

  /* Table rendering */

  #define Choices_TableOuter_Always2D       0
  #define Choices_TableOuter_Auto           1
  #define Choices_TableOuter_Always3D       2
  #define Choices_TableOuter_Never          3

  #define Choices_TableInner_Always2D       0
  #define Choices_TableInner_Auto           1
  #define Choices_TableInner_Always3D       2
  #define Choices_TableInner_Never          3

  /* Hotlist */

  #define Choices_SaveHotlist_Never         0
  #define Choices_SaveHotlist_Once          1
  #define Choices_SaveHotlist_Always        2

  #define Choices_AddHotlist_Top            0
  #define Choices_AddHotlist_Bottom         1

  #define Choices_HotlistType_Descriptions  0
  #define Choices_HotlistType_URLs          1

  /* History */

  #define Choices_SaveHistory_Never         0
  #define Choices_SaveHistory_Once          1
  #define Choices_SaveHistory_Always        2

  #define Choices_SaveImageHistory_Never    0
  #define Choices_SaveImageHistory_Once     1
  #define Choices_SaveImageHistory_Always   2

  /* Toolbars */

  #define Choices_MoveGadgets_Never         0
  #define Choices_MoveGadgets_AtEnd         1
  #define Choices_MoveGadgets_During        2

  /* Windows */

  #define Choices_SolidResize_No            0
  #define Choices_SolidResize_Yes           1
  #define Choices_SolidResize_Always        2

  #define Choices_VScroll_No                0
  #define Choices_VScroll_Auto              1
  #define Choices_VScroll_Yes               2

  #define Choices_HScroll_No                0
  #define Choices_HScroll_Auto              1
  #define Choices_HScroll_Yes               2

  /* Plug-ins */

  #define Choices_PlugIns_Never             0
  #define Choices_PlugIns_Viewed            1
  #define Choices_PlugIns_ASAP              2

  /* URI handler usage */

  #define Choices_URI_Never                 0
  #define Choices_URI_RequestsOnly          1
  #define Choices_URI_BroadcastUnknowns     2
  #define Choices_URI_UnknownsAndRequests   3
  #define Choices_URI_EverythingAndRequests 4

  /* Cookies */

  #define Choices_Cookies_Reject            0
  #define Choices_Cookies_Prompt            1
  #define Choices_Cookies_Accept            2

  /* PJPEG support */

  #define Choices_SupportPJPEG_OS           0
  #define Choices_SupportPJPEG_Both         1
  #define Choices_SupportPJPEG_Internal     2

  /* Sending a Referer: header */

  #define Choices_SendReferer_Never         0
  #define Choices_SendReferer_Always        1
  #define Choices_SendReferer_WhenHTTP      2

  /* Faith in server content-type responses */

  #define Choices_Faith_Never               0
  #define Choices_Faith_Sometimes           1
  #define Choices_Faith_Always              2

  /* Behaviour when scripts try to open and close windows */

  #define Choices_JSWindowOpen_Allow        0
  #define Choices_JSWindowOpen_Query        1
  #define Choices_JSWindowOpen_Suppress     2
  #define Choices_JSWindowOpen_Replace      3

  #define Choices_JSWindowClose_Always      0
  #define Choices_JSWindowClose_Sometimes   1
  #define Choices_JSWindowClose_Query       2
  #define Choices_JSWindowClose_Suppress    3

  /* Event logging */

  #define Choices_EVDisplayMethod_Title     0
  #define Choices_EVDisplayMethod_URL       1

  #define Choices_EVHowToLog_Window         0
  #define Choices_EVHowToLog_Page           1

#endif /* Browser_ChoiceDefs__ */
@


1.9
log
@Misecllaneous tweaks and fixes. Major addition is full header and footer
support in the printing system - see the Phoenix Choices file for more
information.

Only the Phoenix resources are up to date currently.
@
text
@d15 15
a29 13
/***************************************************/
/* File   : ChoiceDefs.h                           */
/*                                                 */
/* Purpose: Definitions for Choices items which    */
/*          take a small number of specific        */
/*          values which have a meaning other than */
/*          'yes' or 'no' in the context of the    */
/*          item's name.                           */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 21-Sep-97: Created.                    */
/***************************************************/
d31 2
a32 1
/* Printing */
d34 1
a34 2
#define Choices_PrintOrient_Upright       0
#define Choices_PrintOrient_Sideways      1
d36 2
a37 3
#define Choices_PrintBack_None            0
#define Choices_PrintBack_Tables          1
#define Choices_PrintBack_Always          2
d39 3
a41 3
#define Choices_PrintBlack_None           0
#define Choices_PrintBlack_BG             1
#define Choices_PrintBlack_All            2
d43 3
a45 3
#define Choices_PrintFacingPages_No       0
#define Choices_PrintFacingPages_Spread   1
#define Choices_PrintFacingPages_Page     2
d47 3
a49 1
/* Table rendering */
d51 1
a51 4
#define Choices_TableOuter_Always2D       0
#define Choices_TableOuter_Auto           1
#define Choices_TableOuter_Always3D       2
#define Choices_TableOuter_Never          3
d53 4
a56 4
#define Choices_TableInner_Always2D       0
#define Choices_TableInner_Auto           1
#define Choices_TableInner_Always3D       2
#define Choices_TableInner_Never          3
d58 4
a61 1
/* Hotlist */
d63 1
a63 3
#define Choices_SaveHotlist_Never         0
#define Choices_SaveHotlist_Once          1
#define Choices_SaveHotlist_Always        2
d65 3
a67 2
#define Choices_AddHotlist_Top            0
#define Choices_AddHotlist_Bottom         1
d69 2
a70 2
#define Choices_HotlistType_Descriptions  0
#define Choices_HotlistType_URLs          1
d72 2
a73 1
/* History */
d75 1
a75 3
#define Choices_SaveHistory_Never         0
#define Choices_SaveHistory_Once          1
#define Choices_SaveHistory_Always        2
d77 3
a79 3
#define Choices_SaveImageHistory_Never    0
#define Choices_SaveImageHistory_Once     1
#define Choices_SaveImageHistory_Always   2
d81 3
a83 1
/* Toolbars */
d85 1
a85 3
#define Choices_MoveGadgets_Never         0
#define Choices_MoveGadgets_AtEnd         1
#define Choices_MoveGadgets_During        2
d87 3
a89 1
/* Windows */
d91 1
a91 3
#define Choices_SolidResize_No            0
#define Choices_SolidResize_Yes           1
#define Choices_SolidResize_Always        2
d93 3
a95 3
#define Choices_VScroll_No                0
#define Choices_VScroll_Auto              1
#define Choices_VScroll_Yes               2
d97 3
a99 3
#define Choices_HScroll_No                0
#define Choices_HScroll_Auto              1
#define Choices_HScroll_Yes               2
d101 3
a103 1
/* Plug-ins */
d105 1
a105 3
#define Choices_PlugIns_Never             0
#define Choices_PlugIns_Viewed            1
#define Choices_PlugIns_ASAP              2
d107 3
a109 1
/* URI handler usage */
d111 1
a111 5
#define Choices_URI_Never                 0
#define Choices_URI_RequestsOnly          1
#define Choices_URI_BroadcastUnknowns     2
#define Choices_URI_UnknownsAndRequests   3
#define Choices_URI_EverythingAndRequests 4
d113 5
a117 1
/* Cookies */
d119 1
a119 3
#define Choices_Cookies_Reject            0
#define Choices_Cookies_Prompt            1
#define Choices_Cookies_Accept            2
d121 3
a123 1
/* PJPEG support */
d125 1
a125 3
#define Choices_SupportPJPEG_OS           0
#define Choices_SupportPJPEG_Both         1
#define Choices_SupportPJPEG_Internal     2
d127 3
a129 1
/* Sending a Referer: header */
d131 1
a131 3
#define Choices_SendReferer_Never         0
#define Choices_SendReferer_Always        1
#define Choices_SendReferer_WhenHTTP      2
d133 3
a135 1
/* Faith in server content-type responses */
d137 1
a137 3
#define Choices_Faith_Never               0
#define Choices_Faith_Sometimes           1
#define Choices_Faith_Always              2
d139 3
a141 1
/* Behaviour when scripts try to open and close windows */
d143 1
a143 4
#define Choices_JSWindowOpen_Allow        0
#define Choices_JSWindowOpen_Query        1
#define Choices_JSWindowOpen_Suppress     2
#define Choices_JSWindowOpen_Replace      3
d145 4
a148 4
#define Choices_JSWindowClose_Always      0
#define Choices_JSWindowClose_Sometimes   1
#define Choices_JSWindowClose_Query       2
#define Choices_JSWindowClose_Suppress    3
d150 4
a153 1
/* Event logging */
d155 1
a155 2
#define Choices_EVDisplayMethod_Title     0
#define Choices_EVDisplayMethod_URL       1
d157 7
a163 2
#define Choices_EVHowToLog_Window         0
#define Choices_EVHowToLog_Page           1
@


1.8
log
@Intermediate check-in; building a browser from this gives you something
between 2.07 and 2.08. Only the Phoenix JavaScript resources are fully
up to date.

I *think* these are the changes since the last check-in:

When saved as a Draw file, horizontal rules were plotted one page width
too far to the right (wonder when that started happening?!). Fixed. In
addition, DrawFiles now accepted as OBJECTs - they weren't in the
recognised filetype list before. Doh.

Table size calculator tables_count_table would overestimate the number
of cells where ROWSPAN was present and there were other rows below the
one spanned. Fixed. In certain odd cases (e.g. optimised image exports
as HTML tables (!!) from the Gimp) this can save vast amounts of RAM.

Fixed problem where printing stops in the middle of a document. Redraw
engine pagination code was written in the days where lines couldn't
have gaps between them; they can now. If a gap fell at the bottom of
a page the engine would look down, see no line straddling or touching
the page edge, and assume there was nothing more. This case is now
correctly handled.

Made sure desktop and testbed Browse Res files had up-to-date Encoding
menus (v2.07 Phoenix has different menus from v2.07 Browse by oversight).

URL auto-completion piggy-backed onto manual completion code; any string
without '.', '/' or ':' in it gets run through completion to see if a
more meaningful item can be produced - "www" special cased out though.

New List dialogue box handler, used for proxy exclusions etc.
(incomplete), complete with appropriate Res file objects.
@
text
@d29 17
d137 20
@


1.7
log
@Everyone else seems to be checking lots of stuff in lately, so I've
decided to join in. This is an intermediate check-in and so not all
resources etc. will be up to date. You should be able to make Phoenix
and a debug build out of it. As a reminder, to make a JavaScript build:

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean. This now strips dynamic dependencies from the MakeFile
   automatically, to save you having to do it yourself.
 * Run one of the TaskObey files with the "J" suffix, e.g. !DeskBrwsJ -
   this uses the same .o directory for object files and exports to the
   same position in the Targets directory as the non-JavaScript build,
   but it does produce a unique binary in 'abs' and symbols table in
   'syms'.
 * Sourcing an appropriate !Run (with increased WimpSlot value), !Boot
   and About resource is done automatically.
 * Some, but not all of the !xxxD (debug) TaskObey files will make
   JavaScript versions in passing - check the JSUFFIX value on the Make
   command line parameters in the file.

This'll only work on RISC OS 3.1 due to the use of MemLib.

Here's the change list:

Included MNG icons in sprites files; added Sprites23 for some builds.
Added in ANT URL file icon (b28) derived from URI file icon, because
the Save dialogue can need it.

No, you do *not* need to define the same keyboard shortcuts in each
frame since the ancestor keeps the input focus and we've basically
dropped non-nested Wimp support. Maintaining no less than 4 lists of
identical shortcuts was a pain. Some Res files now only have the
lists in the main browser window and button bar objects (these two
are both required still).

Ursula build Markers button arrangement changed from 1x3 horizontal to
2x2 tilted, as in Phoenix, by popular demand.

Couple of hotlist bugs fixed; dragging an item and deleteing it with
Ctrl+X didn't terminate the drag, and deleteting an item underneath a
menu opened for it didn't close the menu.

'SendReferer' option added to all Choices files, all set to 'always'.
Put just beneath 'Clone' as it refers to header items, though really,
both Clone and SendReferer should probably be in the "Fetch controls"
section rather than "Multiuser environments and proxying"! Front-end
control of this is available.

In image_export_original, save_save_source, save_transfer_source and
save_save_object, flex_set_budge(0) was called to lock the heap but the
return value wasn't stored. flex_set_budge(1) was then used to unlock
the heap. All calls now remember and restore the old value, which is
both safer in case one calls another and allows the flex_set_budge
call in Main.c to have an application-wide meaning, as intended.

Some restructuring to the data load and RAM transfer sections of
Protocols.c; remote hotlist builds wouldn't allow files to be loaded
to browser windows before, and can now drop URL, URI or text files to
the Open URL dialogue.

New option "MinimumFontSize", lets the 'size' attribute of the 'font'
element be overridden. Default value is 1, to allow the full range of
values for the attribute. Setting to 7, for example, would give font
size 7 text at all times. Another new option, "ToggleOnXOnly", to
make Toggle Size only extend the window vertically (with Ctrl then
being used to toggle to genuine full size, rather than vice versa).
All Choices files updated to hold both of these options; only the
first has front-end control available (see debug build Res file).

JavaScript Document object exists; frames array etc. working. Can now
just about use "http://www.acorn.com/~ahodgkin/jschain/" but it does
abort after a bit - problems with frames again, I suspect. Is is pretty
slow, too. Can now press Escape to terminate a script.

Main.c erroneously referred to Controls file entry "StopWebServe" as
"StopWebProxy". Fixed.

Keyboard shortcuts to raise SaveFile are now possible in a general sense;
the code before was in the ToBeShown handler and just checked for a parent
component of -1. It then assumed "save frame HTML source". Now there's the
savefile_raise_from_shortcut function, which together with the seven new
event codes in SaveFile.h allows saving of HTML source and frame location,
export of links, images, backgrounds and the page as text or draw, to all
be invoked by keyboard shortcuts. Some Res files have some of these defined.

In reformat_check_height, the first check to see if setpara should be set
references a field in tpLast without checking if it is NULL. Whilst the
'line > 0' check should mean that tpLast wasn't NULL anyway, a direct
call to the function from outside of the reformatter might have tripped
up on this - the check for tpLast != NULL is now made.

Adjust-click on close icon in window showing file: URL attempts to open
the parent Filer window.

Reformatter used to try and find a selectable token if keyboard control
was enabled in a really stupid place - could make reformatting become
very slow if no selectables were present, especially if the page had a
few tables on it. Preprocessor now does this (since it goes through all
of the tokens anyway), the reformatter just doing a last check to ensure
no frames have obscured the selectable and if so, it tries to move it.
Done in the reformatter as generating a line array implies the data really
is visible.

Ctrl+Tab URL completion now builds a full list of matches from the hotlist
and history and can cycle through them (Ctrl+Shift+Tab stepping backwards).

Will give a real error rather than just "Data Abort" if it goes wrong
now. Someone somewhere is setting bit 30 of the error which confused
the replacement signal handler. Flag bits are now masked off (as they
should've been to start with).
@
text
@d114 6
@


1.6
log
@Added capability to send Referer headers, together with new options to
allow this to be sent: a) Always, b) Never, c) when the URL referred to
is an http URL.  Default is c.  There is no frontend editing capability
for this option.  This addition means that various counters and sites
that rely on referer to indicate a resource upon which an operation is
to be carried out will now work (eg. rating a web site on Geocities).
@
text
@d109 1
a109 1
/* Referer support */
@


1.5
log
@All !Run[D], Choices, Messages, Controls and Res files are up to date.

RefoKeep and RefoHold options added to, respectively, try and maintain
the line at the top of the visible area when reformatting, and not shrink
the vertical extent at the start of a reformat to try and avoid flicker
to the top of the page and back down again when RefoKeep is on. Choices
front-end implemented, which also allows RefoWait and RefoTime to be set.
Unfortunately for various reasons this doesn't help the page jumping when
unsized images come in (but RefoHold can improve matters...) - roll on
the image history.

DragToScroll and NoScrollBars options added for frames; included new
pointer type, Mouse_Shape_DTS, so relevant Controls file entries done
and Sprites[22] files updated as required. Noticed some builds have
a low-res ptr_link with a mask - mask removed.

Named anchor following fixed up somewhat - anchors near the bottom of
the page shouldn't be displayed, and then pulled down when the fetcher
releases null polls and ensures the y extent is correct (this through
implementing the min_height field in the browser_data structure).

RefoHang was never implemented and there seems little point to it now,
so the entry for it has been removed from the global choices structure
and all Choices files.

Markers menus should work properly now (in last check-in they would not
update correctly if Adjust was used on the entries).

URI handler usage now a lot more sensible, with configuration of how the
browser uses the module from both a Utils menu submenu (sic) and the
Choices dialogue.

Slightly dodgy 'hang around waiting for user input' stuff for the Cookies
dialogue box: All fetches are suspended; the fetcher remembers some info
about its state at the time the cookie came in, and restores it later; it
will only do this for one fetch at a time. It's necessary to single-thread
the fetcher at this point anyway, since other fetches may have a
dependency on the cookie that is hanging in mid-air at that point. As part
of this, some of the fetcher code has been split out into separate
functions (to try and 'black box' the code a bit). Anyway, Cookie Query
dialogue box now implemented with appropriate Choices file entry and
UI work in the Choices dialogue box.

Phoenix build Choices rearranged. Can now choose when the image history
is saved from the front end. Added also MSIE 4-style table option menu
for JPEG support (OS only, OS if it can handle it, internal only).

Should be a bit faster at loading the history - though 95% of the time
is spent in SWI URL_ParseURL. URL descriptions are stored more
efficiently as part of this - one malloc block instead of several
small blocks. The minimum block size for malloc blocks typically leads
to a significantly smaller startup wimpslot depending on the visit
history size.

Nasty bug in image system fixed. If an image size came in and a reformat
was to take place, the line the image lies in is found and the reformat
progresses from there. Unforunately, this didn't check to see if the
token can't be found in the line list, so it'd reformat from the top
of the page...! This would happen if, for example, an image halfway down
the page came in whilst a reformat for an image higher up had just begun.

In Choices.c, made choices_set_timetype_field, choices_set_uri_field,
choices_set_plugin_field, choices_set_cookie_field, and
choices_set_jpeg_field static (so they're not declared in Choices.h now).

Two memory leaks plugged in URL comparison routines in URLutils.c
(calling free() url_description instead of urlutils_free_descripton()).

Client pull reload handler was setting the reload flag if reloading
the same page, but forgetting to turn on reload_lock so
fetchpage_postprocessed was clearing the reload state... Similarly,
Ctrl+Shift+SELECT-Click on a link when the Controls file 'UseSmall'
entry is 'no' would not have reloaded as it should. Both fixed.

Frames shouldn't be so keen on acquiring horizontal scroll bars and never
letting them go when their width is decreased now. Frames set up for
'scrolling="yes"' will not start with no scroll bars and then gain them
shortly afterwards, causing flicker and two reformats - they'll start
with, and continue to hold, both scroll bars.

Pointer shouldn't flicker when over a frame border whilst other fetches
are progressing now.
@
text
@d108 6
@


1.4
log
@Image history - sizes of images are remembered for future reference (if
the sizes aren't specified in the HTML, they can be looked for in the
image history instead to minimise reformatting requirements). Choices
file options ImageHistoryPath, ImageExpiryAge, ImageMaxSize and
SaveImageHistory added to support this (all have a direct analogy to
the global History items of the same name after removing 'Image').

Text area items are now the correct height for the number of rows
specified in the HTML, don't scroll a line too early, and have the
caret placed at the start of the text when moved into from above
or at the end when moved into from below (rather than always at
the end, which was behaviour inherited from single line writables,
where this is desirable). The top of the text area is aligned to
the top of any line of text on the same line, with the text area
dropping below the text, rather than the bottom of the area matching
the text baseline and extending upwards.

Filename extensions for download files are only stripped if an
attempt to convert to a RISC OS filetype through the Mime Mapper module
does not return an error or Data (0xffd) filetype. '.cgi' is a special
case which is always stripped.

Altered heading styles - all are bold, none are italic, H3 is as big
as H2 was, H2 is a little larger, and others scale down to H6 being
the size as normal text (but, as I say, bold).

Sorted out tables and forms. We can just look for tagno=TAG_FORM, and
get rid of the wobbly form_flag; also discarded the redundant
reprocess_table flag in fetch_preprocess_token. Two separate forms
in consecutive table cells (for example) which used to fail - they
were submitted as one single form - will now work correctly.

Fixed nasty bug in FontManage.c where font size 7 would intermittently
fail. The stupid font sizes that it could ask the Font Manager for may
be responsible for the occasional Font Manager crashes that have been
noticed. Array for font sizes was declared as [Limits_FontSizes], but
indices 1 to Limits_FontSizes are actually used - so needed a '+ 1'
in the declaration... :-/

Replaced the case insensitive string comparison functions in Utils.c
with more efficient versions by S.Brodie.

MAXLENGTH specifier in INPUT tags is now supported. If unspecified or
specifically zero, the browser overrides and allows any length.
@
text
@d31 9
a39 9
#define Choices_TableOuter_Always2D      0
#define Choices_TableOuter_Auto          1
#define Choices_TableOuter_Always3D      2
#define Choices_TableOuter_Never         3

#define Choices_TableInner_Always2D      0
#define Choices_TableInner_Auto          1
#define Choices_TableInner_Always3D      2
#define Choices_TableInner_Never         3
d43 3
a45 3
#define Choices_SaveHotlist_Never        0
#define Choices_SaveHotlist_Once         1
#define Choices_SaveHotlist_Always       2
d47 2
a48 2
#define Choices_AddHotlist_Top           0
#define Choices_AddHotlist_Bottom        1
d50 2
a51 2
#define Choices_HotlistType_Descriptions 0
#define Choices_HotlistType_URLs         1
d55 7
a61 7
#define Choices_SaveHistory_Never        0
#define Choices_SaveHistory_Once         1
#define Choices_SaveHistory_Always       2

#define Choices_SaveImageHistory_Never   0
#define Choices_SaveImageHistory_Once    1
#define Choices_SaveImageHistory_Always  2
d65 3
a67 3
#define Choices_MoveGadgets_Never        0
#define Choices_MoveGadgets_AtEnd        1
#define Choices_MoveGadgets_During       2
d71 11
a81 11
#define Choices_SolidResize_No           0
#define Choices_SolidResize_Yes          1
#define Choices_SolidResize_Always       2

#define Choices_VScroll_No               0
#define Choices_VScroll_Auto             1
#define Choices_VScroll_Yes              2

#define Choices_HScroll_No               0
#define Choices_HScroll_Auto             1
#define Choices_HScroll_Yes              2
d85 23
a107 3
#define Choices_PlugIns_Never            0
#define Choices_PlugIns_Viewed           1
#define Choices_PlugIns_ASAP             2
@


1.3
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d59 4
@


1.2
log
@More reformatter code bugs fixed; this one regarding width of items. Any
kerned string was overestimated (causing redraw bugs and caret position
problems in forms, apart from other minor bits elsewhere) and the default
size of a writable icon wasn't especially clever.

Crude Plug-In support; just about manages Java, but can't fetch on
behalf of Plug-In (for example). Had to change the default file access
URL construction to be 'file:/' instead of 'file://', or local file
fetches that reference Java applets won't work. This is in its very
early stages, and is being checked in mostly so that various Choices
issues can be worked on.
@
text
@d29 12
@


1.1
log
@Now working on source merged with Kevin Bracey's internationalisation
support. UNIFONT is undefined in the Make File for now. All Res and
Choices files updated appropriately.

Having sorted out the old Choices and Messages to form Choices, Controls
and Messages, this build has had the same cleaning up done internally.
This includes greater consistency in naming schemes and the removal of
the inconsitent choices items - e.g. Choices file entries saying 'delay
images' and 'plain backgrounds' where internally all the flags say 'show
images' and 'show backgrounds'. ChoiceDefs.h and CtrlDefs.h added to
clarify the meaning of some fields, though usage of these is not 100%
in the source (there are cases where parameters are passed through to
functions as ints, and those functions still check these against hard
coded values rather than the #define stuff).

Fetcher status return bits (connected, sent request, etc.) now reflected
in status bar. Progress during fetchs to files are reported by %, where
the size of the object is known. Exceeding 100% drops back to a byte
counter, in case the estimated size was wrong. The progress counter
may be updated after specific delays, rather than 'as often as possible',
to reduce flicker (as requested by D.Brown some time ago).

I've done a small rewrite of the fetch prioritisation scheme in FetchPage.c;
how well this performs in general use across different processor speeds
remains to be tested, but certainly it has some advantages. For each small
fetch window before the rewrite, a 4cs tight loop was entered - this gave a
noticable and substantial drain to the Desktop performance if more than one
was opened. Now, several can be up at once with little hit. The actual file
fetch is on half the priority it was before, with all others taken back
just a bit - e.g. from 20cs per poll to 15cs per poll for flat out
reformatting. You don't seem to lose much time on the format in practice,
and the Desktop feels quite a bit lighter at the same time. There's the
potential for smoother frameset loading in this scheme, too.

When Shift+Clicking on a link meant you still fetched inside the main
browser window, several fetches could occur in a frameset - one per frame.
However, now that you can only do this by clicking on a link that leads to
non-displayable data - or by turning off the small fetch windows by
setting UseSmall to 'no' in Choices - a bug where fetchpage_preprocessed
would stop such fetches as new ones were started was revealed.
The API to frames_abort_fetching has now been extended to include a
'stop file spooling too' flag, allowing a fix to be made by having
fetchpage_preprocess's calls not set this (and it doesn't check the
savelink flag is unset before proceeding, since frames_abort_fetching
does that implicitly now).

Had left the RAM transfer buffer at 16 bytes (from testing) accidentally...
Oops. Upped it to 4K. In addition, when loading data by RAM transfer,
the browser didn't notice if a RAMFetch bounced during the transfer. It
would be treated as a 'first' RAMFetch bounce, basically, and try to go to
file transfer - oops. Fixed.
@
text
@d66 6
@
