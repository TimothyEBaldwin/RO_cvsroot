head	1.13;
access;
symbols
	Browse-2_16:1.13
	Browse-2_15:1.13
	Browse-2_14:1.13
	Browse-2_13:1.13
	Browse-2_12:1.13
	Browse-2_11:1.12
	Browse-2_10:1.12
	Browse-2_09:1.12
	ahodgkin_208_i4_2:1.12
	ahodgkin_208_i4:1.11
	ahodgkin_208_i3:1.11
	ahodgkin_208_i2:1.10
	ahodgkin_208_i1:1.9
	ahodgkin_207release:1.9
	ahodgkin_206release:1.8
	ahodgkin_205release:1.8
	ahodgkin_204release:1.8
	ahodgkin_202release:1.8
	ahodgkin_201release:1.8
	ahodgkin_200release:1.8
	ahodgkin_133beta:1.8
	ahodgkin_132beta:1.8
	ahodgkin_131beta:1.8
	ahodgkin_130beta:1.7
	ahodgkin_129:1.7
	ahodgkin_128beta:1.7
	ahodgkin_128alpha:1.7
	ahodgkin_127beta2:1.7
	ahodgkin_127beta:1.7
	ahodgkin_126beta:1.7
	ahodgkin_AW97patch:1.7
	ahodgkin_AW97:1.6;
locks; strict;
comment	@# @;


1.13
date	2006.03.13.22.06.20;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	2000.05.31.15.58.58;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	2000.03.01.08.45.36;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	2000.02.25.17.08.58;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	98.09.07.11.47.15;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	98.01.31.10.55.47;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.10.22.13.16.04;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.10.06.15.18.31;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.09.14.19.18.21;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.08.18.10.00.21;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.08.05.08.43.01;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.08.01.09.00.59;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.29.58;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.13
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Reformat.h                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Functions to handle page reformatting.            */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 03-Dec-1996 (ADH): Created.                       */
/*          16-Apr-1997 (ADH): First merge with T.Cheal's     */
/*                             table code...                  */
/*          22-May-1997 (ADH): Amazingly, *still* trying to   */
/*                             get this to work.              */
/*          18-Jun-1997 (ADH): Hpmh; works, but very slow.    */
/*                             Will need to rewrite at some   */
/*                             stage; for the moment, moved a */
/*                             few bits over to Tables.c as   */
/*                             they fitted in better there.   */
/*          07-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_Reformat__
  #define Browser_Reformat__

  #include <kernel.h>
  #include <tboxlibs/wimp.h>
  #include <HTMLLib/HTMLLib.h>

  #include "Global.h"

  /* Line break position definitions */

  #define LINEBREAK    (P | BR | LI)      /* Tags that force linebreaks at the  */
                                          /* point where they are encountered   */

  #define LINEBREAKSW  (PRE | BLOCKQUOTE) /* Tags that force linebreaks when    */
                                          /* they are encountered in the source */
                                          /* whilst the effect is turned on     */

  #define LINEBREAKON  (DT | ADDRESS)     /* Tags that force a line break at    */
                                          /* the point when they turn on        */

  #define LINEBREAKOFF (H_MASK | ADDRESS) /* Tags that force a line break at    */
                                          /* the point when they turn off       */

  /* Other tag classification masks */

  #define VISUALDATA   (HR | IMG | INPUT) /* Does the tag contain displayable data, despite */
                                          /* having no text inside it? If the tag's style   */
                                          /* word contains the bit(s) defined here, it is   */
                                          /* deemed to contain such data.                   */

  /* Formatting definitions */

  #define Reformat_AsWideAsPossible_OS           0x8000000  /* OS unit 'very very wide' value */
  #define Reformat_AsWideAsPossible_MP           0x40000000 /* Millipoint 'very wide' value   */
  #define Reformat_UnrealisticallyHighLineNumber 0x40000000 /* For the deferred reformatter */

  /* Reformatter flags */

  #define Reformatter_KeepGoingToEnd  (1u<<1) /* Tell reformatter to keep going until it runs out of data, regardless of how long it takes */
  #define Reformatter_ReturnMinimum   (1u<<2) /* Tell reformatter to return the minimum width that the stream could have fitted in         */
  #define Reformatter_FindingWidest   (1u<<3) /* Tell reformatter we're trying to find the greatest width the page could occupy            */
  #define Reformatter_FindingSmallest (1u<<4) /* Tell reformatter we're trying to find the smallest width the page could occupy            */
  #define Reformatter_FromStreamStart (1u<<5) /* Tell reformatter to ignore last_token fields in browser_data and use streambase instead   */
  #define Reformatter_Virtual         (1u<<6) /* Tell reformatter not to actually allocate lines/chunks (for finding widths of things)     */

  /* The CENTRED macro returns 1 when passed an HStream pointer if that HStream */
  /* has the Style flag saying it is centred, or if the general alignment field */
  /* says that the tag should be centred; else it returns 0.                    */

  #define CENTRED(x)   (((x->style & CENTER) || ((x->type & TYPE_ALIGN_MASK) == TYPE_CENTRE)) != 0)

  /* Local structures */

  typedef struct reformat_width_data
  {
    browser_data  * b;
    reformat_cell * d;
    HStream       * tp;     /* Pointer to the token this structure represents           */
    char          * data;   /* Pointer to the token's data                              */
    int             offset; /* The offset into the data to start at                     */
    int             maxwid; /* The width to try and fit the token into                  */
                           /*                                                          */
    int             bytes;  /* (Returned) The number of bytes that will (might) fit     */
    int             width;  /* (Returned) The actual width of the given number of bytes */

  } reformat_width_data;

  /* Function prototypes */

  int                   reformat_formatting           (browser_data * b);
  _kernel_oserror     * reformat_stop                 (browser_data * b);

  int                   reformat_istext               (const HStream * restrict tp);
  int                   reformat_newline              (HStream * current, HStream * last, int offset);

  _kernel_oserror     * reformat_shift_vertically     (browser_data * b, int start, int end, int y_shift);
  _kernel_oserror     * reformat_format_from          (browser_data * b, int lastline, int immediate, int image);
  int                   reformat_format_timer         (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
  void                  reformat_stop_pending         (browser_data * b);

  _kernel_oserror     * reformat_get_image_size       (browser_data * restrict b, const HStream * restrict tp, BBox * restrict box);
  _kernel_oserror     * reformat_get_object_size      (browser_data * restrict b, const HStream * restrict tp, BBox * restrict box);
  void                  reformat_get_placeholder_size (browser_data * restrict b, const HStream * restrict tp, const char * restrict text, BBox * restrict box);
  int                   reformat_bullet_width         (int bullet);
  int                   reformat_bullet_height        (int bullet);
  int                   reformat_y_offset             (browser_data * b);
  _kernel_oserror     * reformat_text_line_height     (browser_data * b, HStream * tp, int * top, int * bot);

  _kernel_oserror     * reformat_check_extent         (browser_data * b);
  int                   reformat_return_extent        (browser_data * b, reformat_cell * cell);
  _kernel_oserror     * reformat_set_extent           (browser_data * b, int y_extent);
  int                   reformat_return_width         (browser_data * b, reformat_cell * cell);

  void                  reformat_reformatter          (browser_data * b);
  int                   reformat_format_cell          (int toplevel, browser_data * b, HStream * streambase, table_stream * table, reformat_cell * cellarray, int ColWidth, int Row, int Column);
  void                  reformat_find_cell_limits     (int toplevel, browser_data * b, HStream * streambase, table_stream * table, reformat_cell * cellarray, int Row, int Column, int * retmin, int * retmax);

  void                  reformat_change_text          (browser_data * b, HStream * tp);

#endif /* Browser_Reformat__ */
@


1.12
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d110 1
a110 1
  int                   reformat_istext               (HStream * tp);
d118 3
a120 3
  _kernel_oserror     * reformat_get_image_size       (browser_data * b, HStream * tp, BBox * box);
  _kernel_oserror     * reformat_get_object_size      (browser_data * b, HStream * tp, BBox * box);
  void                  reformat_get_placeholder_size (browser_data * b, HStream * tp, const char * text, BBox * box);
@


1.11
log
@Header and footer support working a lot better than in the previous
release. Could do with some code tidying, but little else to do.
Fixed a typo in JavaScript.c that stopped debug builds compiling,
and updated Trace.c to know about all current HStream flags bits.
@
text
@d15 119
a133 110
/***************************************************/
/* File   : Reformat.h                             */
/*                                                 */
/* Purpose: Functions to handle page reformatting. */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 03-Dec-96: Created.                    */
/*          16-Apr-97: First merge with T.Cheal's  */
/*                     table code...               */
/*          22-May-97: Amazingly, *still* trying   */
/*                     to get this to work.        */
/*          18-Jun-97: Hpmh; works, but very slow. */
/*                     Will need to rewrite at     */
/*                     some stage; for the moment, */
/*                     moved a few bits over to    */
/*                     Tables.c as they fitted in  */
/*                     better over there.          */
/***************************************************/

#include "HTMLLib.h" /* From the HTML library; the definitions below rely on this */

/* Line break position definitions */

#define LINEBREAK    (P | BR | LI)      /* Tags that force linebreaks at the  */
                                        /* point where they are encountered   */

#define LINEBREAKSW  (PRE | BLOCKQUOTE) /* Tags that force linebreaks when    */
                                        /* they are encountered in the source */
                                        /* whilst the effect is turned on     */

#define LINEBREAKON  (DT | ADDRESS)     /* Tags that force a line break at    */
                                        /* the point when they turn on        */

#define LINEBREAKOFF (H_MASK | ADDRESS) /* Tags that force a line break at    */
                                        /* the point when they turn off       */

/* Other tag classification masks */

#define VISUALDATA   (HR | IMG | INPUT) /* Does the tag contain displayable data, despite */
                                        /* having no text inside it? If the tag's style   */
                                        /* word contains the bit(s) defined here, it is   */
                                        /* deemed to contain such data.                   */

/* Formatting definitions */

#define Reformat_AsWideAsPossible_OS           0x8000000  /* OS unit 'very very wide' value */
#define Reformat_AsWideAsPossible_MP           0x40000000 /* Millipoint 'very wide' value   */
#define Reformat_UnrealisticallyHighLineNumber 0x40000000 /* For the deferred reformatter */

/* Reformatter flags */

#define Reformatter_KeepGoingToEnd  (1u<<1) /* Tell reformatter to keep going until it runs out of data, regardless of how long it takes */
#define Reformatter_ReturnMinimum   (1u<<2) /* Tell reformatter to return the minimum width that the stream could have fitted in         */
#define Reformatter_FindingWidest   (1u<<3) /* Tell reformatter we're trying to find the greatest width the page could occupy            */
#define Reformatter_FindingSmallest (1u<<4) /* Tell reformatter we're trying to find the smallest width the page could occupy            */
#define Reformatter_FromStreamStart (1u<<5) /* Tell reformatter to ignore last_token fields in browser_data and use streambase instead   */
#define Reformatter_Virtual         (1u<<6) /* Tell reformatter not to actually allocate lines/chunks (for finding widths of things)     */

/* The CENTRED macro returns 1 when passed an HStream pointer if that HStream */
/* has the Style flag saying it is centred, or if the general alignment field */
/* says that the tag should be centred; else it returns 0.                    */

#define CENTRED(x)   (((x->style & CENTER) || ((x->type & TYPE_ALIGN_MASK) == TYPE_CENTRE)) != 0)

/* Local structures */

typedef struct reformat_width_data
{
  browser_data  * b;
  reformat_cell * d;
  HStream       * tp;     /* Pointer to the token this structure represents           */
  char          * data;   /* Pointer to the token's data                              */
  int             offset; /* The offset into the data to start at                     */
  int             maxwid; /* The width to try and fit the token into                  */
                         /*                                                          */
  int             bytes;  /* (Returned) The number of bytes that will (might) fit     */
  int             width;  /* (Returned) The actual width of the given number of bytes */

} reformat_width_data;

/* Function prototypes */

int                   reformat_formatting           (browser_data * b);
_kernel_oserror     * reformat_stop                 (browser_data * b);

int                   reformat_istext               (HStream * tp);
int                   reformat_newline              (HStream * current, HStream * last, int offset);

_kernel_oserror     * reformat_shift_vertically     (browser_data * b, int start, int end, int y_shift);
_kernel_oserror     * reformat_format_from          (browser_data * b, int lastline, int immediate, int image);
int                   reformat_format_timer         (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
void                  reformat_stop_pending         (browser_data * b);

_kernel_oserror     * reformat_get_image_size       (browser_data * b, HStream * tp, BBox * box);
_kernel_oserror     * reformat_get_object_size      (browser_data * b, HStream * tp, BBox * box);
void                  reformat_get_placeholder_size (browser_data * b, HStream * tp, const char * text, BBox * box);
int                   reformat_bullet_width         (int bullet);
int                   reformat_bullet_height        (int bullet);
int                   reformat_y_offset             (browser_data * b);
_kernel_oserror     * reformat_text_line_height     (browser_data * b, HStream * tp, int * top, int * bot);

_kernel_oserror     * reformat_check_extent         (browser_data * b);
int                   reformat_return_extent        (browser_data * b, reformat_cell * cell);
_kernel_oserror     * reformat_set_extent           (browser_data * b, int y_extent);
int                   reformat_return_width         (browser_data * b, reformat_cell * cell);

void                  reformat_reformatter          (browser_data * b);
int                   reformat_format_cell          (int toplevel, browser_data * b, HStream * streambase, table_stream * table, reformat_cell * cellarray, int ColWidth, int Row, int Column);
void                  reformat_find_cell_limits     (int toplevel, browser_data * b, HStream * streambase, table_stream * table, reformat_cell * cellarray, int Row, int Column, int * retmin, int * retmax);
d135 3
a137 1
void                  reformat_change_text          (browser_data * b, HStream * tp);
@


1.10
log
@Misecllaneous tweaks and fixes. Major addition is full header and footer
support in the printing system - see the Phoenix Choices file for more
information.

Only the Phoenix resources are up to date currently.
@
text
@d101 1
@


1.9
log
@Everyone else seems to be checking lots of stuff in lately, so I've
decided to join in. This is an intermediate check-in and so not all
resources etc. will be up to date. You should be able to make Phoenix
and a debug build out of it. As a reminder, to make a JavaScript build:

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean. This now strips dynamic dependencies from the MakeFile
   automatically, to save you having to do it yourself.
 * Run one of the TaskObey files with the "J" suffix, e.g. !DeskBrwsJ -
   this uses the same .o directory for object files and exports to the
   same position in the Targets directory as the non-JavaScript build,
   but it does produce a unique binary in 'abs' and symbols table in
   'syms'.
 * Sourcing an appropriate !Run (with increased WimpSlot value), !Boot
   and About resource is done automatically.
 * Some, but not all of the !xxxD (debug) TaskObey files will make
   JavaScript versions in passing - check the JSUFFIX value on the Make
   command line parameters in the file.

This'll only work on RISC OS 3.1 due to the use of MemLib.

Here's the change list:

Included MNG icons in sprites files; added Sprites23 for some builds.
Added in ANT URL file icon (b28) derived from URI file icon, because
the Save dialogue can need it.

No, you do *not* need to define the same keyboard shortcuts in each
frame since the ancestor keeps the input focus and we've basically
dropped non-nested Wimp support. Maintaining no less than 4 lists of
identical shortcuts was a pain. Some Res files now only have the
lists in the main browser window and button bar objects (these two
are both required still).

Ursula build Markers button arrangement changed from 1x3 horizontal to
2x2 tilted, as in Phoenix, by popular demand.

Couple of hotlist bugs fixed; dragging an item and deleteing it with
Ctrl+X didn't terminate the drag, and deleteting an item underneath a
menu opened for it didn't close the menu.

'SendReferer' option added to all Choices files, all set to 'always'.
Put just beneath 'Clone' as it refers to header items, though really,
both Clone and SendReferer should probably be in the "Fetch controls"
section rather than "Multiuser environments and proxying"! Front-end
control of this is available.

In image_export_original, save_save_source, save_transfer_source and
save_save_object, flex_set_budge(0) was called to lock the heap but the
return value wasn't stored. flex_set_budge(1) was then used to unlock
the heap. All calls now remember and restore the old value, which is
both safer in case one calls another and allows the flex_set_budge
call in Main.c to have an application-wide meaning, as intended.

Some restructuring to the data load and RAM transfer sections of
Protocols.c; remote hotlist builds wouldn't allow files to be loaded
to browser windows before, and can now drop URL, URI or text files to
the Open URL dialogue.

New option "MinimumFontSize", lets the 'size' attribute of the 'font'
element be overridden. Default value is 1, to allow the full range of
values for the attribute. Setting to 7, for example, would give font
size 7 text at all times. Another new option, "ToggleOnXOnly", to
make Toggle Size only extend the window vertically (with Ctrl then
being used to toggle to genuine full size, rather than vice versa).
All Choices files updated to hold both of these options; only the
first has front-end control available (see debug build Res file).

JavaScript Document object exists; frames array etc. working. Can now
just about use "http://www.acorn.com/~ahodgkin/jschain/" but it does
abort after a bit - problems with frames again, I suspect. Is is pretty
slow, too. Can now press Escape to terminate a script.

Main.c erroneously referred to Controls file entry "StopWebServe" as
"StopWebProxy". Fixed.

Keyboard shortcuts to raise SaveFile are now possible in a general sense;
the code before was in the ToBeShown handler and just checked for a parent
component of -1. It then assumed "save frame HTML source". Now there's the
savefile_raise_from_shortcut function, which together with the seven new
event codes in SaveFile.h allows saving of HTML source and frame location,
export of links, images, backgrounds and the page as text or draw, to all
be invoked by keyboard shortcuts. Some Res files have some of these defined.

In reformat_check_height, the first check to see if setpara should be set
references a field in tpLast without checking if it is NULL. Whilst the
'line > 0' check should mean that tpLast wasn't NULL anyway, a direct
call to the function from outside of the reformatter might have tripped
up on this - the check for tpLast != NULL is now made.

Adjust-click on close icon in window showing file: URL attempts to open
the parent Filer window.

Reformatter used to try and find a selectable token if keyboard control
was enabled in a really stupid place - could make reformatting become
very slow if no selectables were present, especially if the page had a
few tables on it. Preprocessor now does this (since it goes through all
of the tokens anyway), the reformatter just doing a last check to ensure
no frames have obscured the selectable and if so, it tries to move it.
Done in the reformatter as generating a line array implies the data really
is visible.

Ctrl+Tab URL completion now builds a full list of matches from the hotlist
and history and can cycle through them (Ctrl+Shift+Tab stepping backwards).

Will give a real error rather than just "Data Abort" if it goes wrong
now. Someone somewhere is setting bit 30 of the error which confused
the replacement signal handler. Flag bits are now masked off (as they
should've been to start with).
@
text
@d114 1
@


1.8
log
@Check for WindowManager 3.97 and ensure Unicode$Path is set in all
!Run[D] files, don't set the Alias$@@PrintType_FF4 variable, and updated
Customer build ROM obey file variants. Various other changes to
the Run files for new module versions, updated paths to support
new positions of choices, hotlist and histories (see later), etc.

!Sprites[22] files hold small !app icons for some variants, and
an ic_browse sprite. Some variants now have a Sprites and Sprites22
file instead of just Sprites, with the former containing various
mode 12 or 15 specific sprites.

Text files dragged to the URL writable are treated as ANT URL files. This
relies on URLBarWrit (Toolbars.h) being a unique ID, which it should be,
but beware of the Hotlist and Choices numberspaces...

INPUT TYPE=BUTTON supported. Form items without a FORM tag are now shown
(as MSIE 4, but not NN 4).

'*', '-', '@@', '_' and '.' are not escaped when submitting forms now. The
Web interface to the IMDb now works.

INPUT TYPE=HIDDEN items will not affect the line height anymore - so
http://www.hotmail.com/ now has correctly aligned writable icons, for
example. Similarly, TAG_FORM and TAG_FORM_END items could push up
line height and don't anymore.

HRs with a specified pixel width will now influence the size of a table
cell (they didn't before).

BRs now checked by tagno field when the browser needs to know something
was an actual BR tag rather than just a line break signal, and by the
style bit entry when only the indication of a line break is required.

Table widths of 0 or 0% are ignored.

Trace.c updated to report height and background fields in a table_stream.

fm_putsl() writes a terminator into the string; the Forms.c routines were
calling this for displaying INPUT TYPE=PASSWORD fields using the FE_PassCode
literal string (a line of stars). This write into a read only data area
would make the debugger fault the access. A local char array is now used
instead, to get round this (note the use of var[]=literal rather than
var[sizeof(literal)]; strcpy(var, literal) due to some weird compiler bug
that copies the wrong thing into 'var' under some (undefined...)
circumstances).

Text areas don't scroll back to the top line when clicked in anymore;
single line writables don't scroll back to the left either. When
reentering a text area from 'above', the caret appears at the top line
rather than 'somewhere further down'...

ARROWS_MOVE_OUT compile time option at the top of Forms.c defines whether
you must press Tab/Shift+Tab to move between writable fields in forms or
if up/down will drop out of them, though if keyboard control is on this
is enforced (or you get trapped inside the form!).

urlutils_filetype_from_url now uses MimeMap module.

If fetcher is told a page is text, it'll check for a filename extension and
may choose to use this instead (e.g. it may find it's HTML instead). This
is to try and get around duff servers... (e.g. http://www.batalarms.co.uk/).

Save dialogues shouldn't flicker when options that don't change the
filetype are selected (before, the draggable sprite was always reset for
each selection). Noticed the erroneous setting of a static variable in
SaveFile.c by a call to this by SaveObject.c, and so added a flag to
savefile_set_filetype to deal with this - would have been possible to get
the wrong filetype sent to applications or at best the wrong filetype
sprite in the dialogue without that.

The caret shouldn't jump out of a form back to the URL writable if the page
reformats now.

Table background colours now supported (as in the colour you see in the
border space if the cellspacing is large enough; this is as in MSIE, not
as in Navigator). Drawfile output routines updated accordingly.

Corrected erroneous use of wimpt_dx() / wimpt_dy() in a couple of places
in Images.c, which meant that (say) 1x1 images didn't work correctly in
medium resolution display modes.

Now have support for save as text (component ID and event 0x12) and save
as Draw (component ID and event 0x13) buttons. Dubious conditions for
greying and ungreying the print, save source and view source buttons and
menu options sorted out as part of implementing the same for the two new
buttons; added greying out of their associated menu items in passing.

Turned kerning on in draw file objects (does mean a rather heinous
increase in file size, but this is the only way to ensure the draw file
matches the visible page).

Comments before functions in SaveDraw.c are now complete and up to date.

Image and visit histories now generate a crude hash number to speed up
searching for items. It does give a speed increase, though it's a
disappointingly small one.

Issue of left/right margins and cellpaddings sorted out. Now have
redraw_left/right_margin for finding out the basic gap you must leave.
redraw_left/right_gap then gives any extra indentation for LI, BLOCKQUOTE
or whatever. The last two can be subtracted from the display width to
get an available page width for any section of text. Note that
redraw_left_gap replaces redraw_margin. The redraw_start_x function
uses the above to work out where a line's left hand edge should be,
taking account of left/right/centre alignment. HRs have been fixed now
(they were quite broken in v1.30, I think) based on this new model and
the behaviour of MSIE/NN 4.

Fixed width of cells with no contents - cell padding values wouldn't
have worked properly as the reformatter returns 0 rather than the left
hand margin size if given no stream.

Removed FM_Absolute flags for Font_Paint (spotted by DBrown) - sets bit
2, which is reserved...?

IMG width and height in % terms now works correctly; a % of available
width (after margins and indents) or height on the main page or for
a table cell, if the image lies in one. Because of the chicken-and-egg
problem with the latter, the cell must specify a width and/or height
for things to work properly. If this is not done, you'll usually end
up with a 1:1 scaled image (as in Navigator 4, rather than ending up
with no image or even no cell (!), as in MSIE 4).

HEIGHT attribute on a TABLE tag is supported, but only in a crude
fashion; the extra height (if there is any) is distributed over the
rows in a linear fashion. This is probably all you have to do in
practice, but I haven't checked. To maintain a notion of min/max
height as well as width would of course require a great deal more
work...

If using client pull to reload a page with a fragment ('...#name')
specified, then the reload wouldn't work on the same page; it'd just
jump to the fragment position. This won't happen if b->reloading is
set now (so works in conjunction with client pull on the same page
forcing a non-cached fetch). Similarly, if POSTing to such a URL,
a fetch will proceed (both these fixes done originally for
http://jupiter.beseen.com/chat/rooms/g/1678/).

browser_inherit split to browser_inherit and browser_inherit_post_data;
the code for the latter didn't clear any post_data in the child before
copying from the parent either, and could cause flex errors (now fixed).

Res file for Ursula ('Desktop' Browse) build tweaked - bits in the
font choices dialogue renamed, and button bar rearranged to hold the
new Save As Draw button. Other builds have had Save As Draw and
Save As Text buttons added, or not, depending upon availability of
suitable sprites, required UI simplicity, etc.

Now have:

  Browse$ChoicesFile
  Browse$ControlsFile
  Browse$ChoicesSave
  Browse$ControlsSave

(the last two are new) for loading and saving of the Choices or Controls
files. If unset, <App$Dir>.Choices or <App$Dir>.Controls will be set.
E.g., you could set Browse$ChoicesFile to be:

  <App$Dir>.Choices,Choices:WWW.(app).Choices

for loading and

  <Choices$Write>.WWW.(app).Choices

for saving. (The browser never saves Controls at the moment, so the
relevant variable above isn't effectively implemented, but could be
in future). Similarly, to support asymetric loading/saving of the Hotlist,
there are HotlistSave, HistorySave and ImageHistorySave entries in Choices
to complement HotlistPath, HistoryPath and ImageHistoryPath (which are used
for loading). save_save_choices will create directories as needed to obtain
the given path (and has also been fixed in various areas that hadn't been
tested out until now; e.g. zero termination of the AppName$ChoicesFile
variable expansion...). !Run[D] files updated appropriately.

Table widthing code rewritten. Slower, but a lot better on the whole.
Still has some problems - still needs a final 'make sure nothing is
below minimum width' scan, which it should be possible to do without.
No time to fix this at present!

The reformatter will now 'glue together' an LI token followed by any
non-LI token; so a bullet point followed by an item should not be able to
have a line break inserted after the bullet because of very tight width
constraints (it could before - yuk...).

'about:' brings up a page about the browser and any Plug-Ins, as with
Navigator (for example).

URI files support titles, as per spec. version 8. Saving a current
location to the Hotlist will thus give a sensible title now (unless
you're in a frame, so there's no title to get...). Of course, v1.00
files without a title still work.

Note that NOBR is *not* supported in this build and this combined with
the new table widther may cause problems on some sites (e.g. Microsoft's
home page!).
@
text
@d118 1
@


1.7
log
@fetch_get_raw_data will notice if up->fetching is zero and return a
'finished' status rather than trying to continue reading data for the
fetch. Fetches should never fall through that far but at least it
will cope if they do.

3D table borders are now supported. 2D borders are used if the
inter-cell spacing is too small to fit the borders in (display resolution
dependent) - the external table border is 2D if the internal borders are,
else 3D. For cellspacing of 0, internal table borders must plot over the
outer edge of pixels inside the cell; for all greater spacings, the
borders take up all or part of the gap between them. The external border
will always fit around the outside of the cells, including the
cellspacing value in the gap between the outer cells and the border.

Anti-alias colour for placeholder ALT text was incorrect. Fixed.

I'd changed 'point' to 'points' in some of the Font Choices dialogues;
now changed back to 'point'.

The routine to find out how large an otherwise unsized object or image
placeholder based on its ALT text has been centralised in Reformat.c,
so that the image and object routines can both access it without
code duplication (this means non-image objects will now have the correct
size if they contain ALT text, rather than assuming a standard default
size as before). ALT text in images that were also objects was never
plotted either, though the placeholder size would have been correct.
This has been fixed.
@
text
@d84 6
a89 5
  browser_data * b;
  HStream      * tp;     /* Pointer to the token this structure represents           */
  char         * data;   /* Pointer to the token's data                              */
  int            offset; /* The offset into the data to start at                     */
  int            maxwid; /* The width to try and fit the token into                  */
d91 2
a92 2
  int            bytes;  /* (Returned) The number of bytes that will (might) fit     */
  int            width;  /* (Returned) The actual width of the given number of bytes */
@


1.6
log
@Calling HtmlEndParse at the end of html_get_next_token and setting
up->context to NULL was wrong; fetch_fetcher would end up recalling
html_get_next_token later which would then call HtmlParse even though
the document parse had just finished! The HtmlEndParse call has now
been moved to fetch_stop.

Altered reformatter to claim fonts inside a browser, rather than
claiming them for nothing and losing them afterwards.

Got rid of TAG == TABLE and ISBODY tests, replacing with tagno == TAG_TABLE.
Removed all references to TD, TH, TR and TABLE in the style word.
@
text
@d97 2
a98 2
int                   reformat_formatting         (browser_data * b);
_kernel_oserror     * reformat_stop               (browser_data * b);
d100 1
a100 1
int                   reformat_newline            (HStream * current, HStream * last, int offset);
d102 19
a120 18
_kernel_oserror     * reformat_shift_vertically   (browser_data * b, int start, int end, int y_shift);
_kernel_oserror     * reformat_format_from        (browser_data * b, int lastline, int immediate, int image);
int                   reformat_format_timer       (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
void                  reformat_stop_pending       (browser_data * b);

_kernel_oserror     * reformat_get_image_size     (browser_data * b, HStream * tp, BBox * box);
_kernel_oserror     * reformat_get_object_size    (browser_data * b, HStream * tp, BBox * box);
int                   reformat_bullet_width       (int bullet);
int                   reformat_bullet_height      (int bullet);
int                   reformat_y_offset           (browser_data * b);

_kernel_oserror     * reformat_check_extent       (browser_data * b);
int                   reformat_return_extent      (browser_data * b, reformat_cell * cell);
_kernel_oserror     * reformat_set_extent         (browser_data * b, int y_extent);

void                  reformat_reformatter        (browser_data * b);
int                   reformat_format_cell        (int toplevel, browser_data * b, HStream * streambase, table_stream * table, reformat_cell * cellarray, int ColWidth, int Row, int Column);
void                  reformat_find_cell_limits   (int toplevel, browser_data * b, HStream * streambase, table_stream * table, reformat_cell * cellarray, int Row, int Column, int * retmin, int * retmax);
d122 1
a122 1
void                  reformat_change_text        (browser_data * b, HStream * tp);
@


1.5
log
@Got the deferred reformatter working properly. It doesn't do that 'OK,
the page is fetched and reformatted, but just to annoy you, I'm going
to wait 5 seconds and then suddenly reformat the whole thing again'
trick anymore. The fetcher was calling the reformatter in a delayed
form even when the reformatter was already running, so it would carry
on past the reformat point or from below what had become and invalidated
line, and some time later, get back to the delayed reformat. Now,
reformatting is only delayed by the fetcher when the reformatter is not
running. In practice this means body text reformats as it fetches, but
large tables will show delayed reformatting - which was exactly the
intended behaviour of the feature when it was originally thought of.

fetch_token_data_address removed; it was only needed in two places,
both of which already knew when to read tp->text and when to ignore
it. Its functionality is duplicated in an 'if' involving reformat_istext,
anyway.

!Run[D] files taken back to requiring HTTP 0.33, since 0.36 introduces
many weird and wonderful problems.

Typo in Messages files, 'All current images (sic.) fetches finished' -
'images' is now 'image'.

Shift+Click saving - you could save to an application. No problem. But
the equivalent (just clicking on a link that led to an unknown datatype
and getting the save dialogue that way) didn't work. It does now.
Another problem was saving to an application that didn't support the
datatype - oops, the dialogue would close but the fetch would sit there
waiting to be told where to save. It doesn't close now (as expected).

NB, doing several simultaneous fetches to a text editor may have problems
as the editors are too clever for their own good. Despite receiving
DataLoad messages for <Wimp$Scrap> for files of different types, sizes
and datestamps, the editors can decide it's still the same file and:

Zap      - Hats off, it gets it right, almost. You do get warned 'Multiple
           copies - one on disc is newer' as everything after the first
           text loads, but they do load, and in separate windows.
StrongED - Does not load the subsequent files, so the browser gives 'Data
           transfer failed' errors and opens up Scrap. Turning off 'Don't
           load same file twice' fixes it - each file is loaded in a new
           window with no warnings. At least in the first case, you don't
           lose data, since the files are kept in Scrap.
Edit     - Each time it loads the file, it *replaces* the other one in
           memory, using the same window for each. This is the worst
           behaviour as it isn't configurable (well, I don't know of a way
           to change it...) and results in data loss as successive texts
           get trounced by the new data.

I can't see how I can fix this in the browser as it's basically silly
behaviour on behalf of the editors. Other applications which don't try
to work out if it's a new file or not are fine!

When conducting image fetches, proxying is allowed unless reloading.
When conducting page fetches, proxying was never allowed - so web cache
stuff would have been, er, interesting. It now sets X-NoProxy: in the
request header when reloading, but otherwise this is not included.

AnimSpeed is, at last, independent of browser poll speed. They used to
be tied together. Guess how the animation code used to work ;-)

'Can't handle this datatype' - deprecated now that save dialogues can be
popped up. The 'can't save objects in full screen mode' error would never
be shown due to a bug, anyway; this now replaces 'can't handle', which
has been removed from all Messages files.

RefoWait, RefoHang and RefoTime moved from Controls back to Choices.

Trying to get rid of strlen in the reformatter - it can get very slow
(e.g. strlen of 8K chunks of text, or if a 330K text file is transferred
from a text editor straight to the browser, strlen of a 330K string...).
There will be unfinished bits of code in the reformatter that may seem
unnecessary - they've just not been plugged in yet (since they don't
actually work). Don't remove them!
@
text
@d108 1
@


1.4
log
@Odd problem with Entries file meant none got checked in last time...
@
text
@d61 3
a63 2
#define Reformat_AsWideAsPossible_OS 0x8000000  /* OS unit 'very very wide' value */
#define Reformat_AsWideAsPossible_MP 0x40000000 /* Millipoint 'very wide' value   */
@


1.3
log
@Fixed problems with unsourced images in tables and a couple of other bugs
here and there - nothing earth shattering... Just wanted to keep the CVS
source up to date.
@
text
@d17 3
a19 1
/* Purpose: Reformatting functions for the browser */
d21 12
a32 1
/* History: 03-Dec-96: Created                     */
@


1.2
log
@Made INPUT type=image work
@
text
@d91 1
a91 1
void                  reformat_free_queue         (browser_data * b);
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d41 1
a41 1
#define VISUALDATA   (HR | IMG)         /* Does the tag contain displayable data, despite */
@
