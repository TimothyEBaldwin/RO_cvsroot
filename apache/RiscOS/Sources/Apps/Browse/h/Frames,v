head	1.12;
access;
symbols
	Browse-2_16:1.12
	Browse-2_15:1.12
	Browse-2_14:1.12
	Browse-2_13:1.12
	Browse-2_12:1.12
	Browse-2_11:1.11
	Browse-2_10:1.11
	Browse-2_09:1.11
	ahodgkin_208_i4_2:1.11
	ahodgkin_208_i4:1.10
	ahodgkin_208_i3:1.10
	ahodgkin_208_i2:1.10
	ahodgkin_208_i1:1.10
	ahodgkin_207release:1.10
	ahodgkin_206release:1.9
	ahodgkin_205release:1.8
	ahodgkin_204release:1.8
	ahodgkin_202release:1.8
	ahodgkin_201release:1.8
	ahodgkin_200release:1.8
	ahodgkin_133beta:1.8
	ahodgkin_132beta:1.8
	ahodgkin_131beta:1.8
	ahodgkin_130beta:1.8
	ahodgkin_129:1.8
	ahodgkin_128beta:1.8
	ahodgkin_128alpha:1.8
	ahodgkin_127beta2:1.8
	ahodgkin_127beta:1.8
	ahodgkin_126beta:1.8
	ahodgkin_AW97patch:1.8
	ahodgkin_AW97:1.8;
locks; strict;
comment	@# @;


1.12
date	2006.03.13.22.06.20;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	2000.05.31.15.58.54;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	98.09.07.11.47.09;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	98.07.09.10.28.06;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.10.16.13.23.22;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.09.22.07.43.30;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.08.28.16.08.13;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.08.18.10.00.12;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.08.12.09.26.43;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.08.08.16.39.00;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.08.05.08.43.00;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.29.32;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.12
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Frames.h                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Frame handling functions for the browser.         */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 19-Mar-1997 (ADH): Created.                       */
/*          10-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_Frames__
  #define Browser_Frames__

  #include <kernel.h>
  #include <tboxlibs/wimp.h>
  #include <HTMLLib/HTMLLib.h>

  #include "Global.h"

  /* Function prototypes */

  _kernel_oserror * frames_define_frameset               (browser_data * b, HStream * token);
  _kernel_oserror * frames_define_frame                  (browser_data * b, HStream * token);
  _kernel_oserror * frames_resize_frameset               (browser_data * b, BBox * new_outline);
  _kernel_oserror * frames_resize_frame                  (browser_data * b, BBox * new_outline);
  void              frames_lock_frameset                 (browser_data * b);

  void              frames_get_rc_info                   (const browser_data * restrict parent, int child, int * retrows, int * retcols, int * retrow, int * retcol);
  _kernel_oserror * frames_find_pointer_in_frameset      (browser_data * handle, int x, int y, int * retrow, int * retcol, int * offset_left, int * offset_top, int constrain);

  int               frames_can_resize_top                (const browser_data * restrict parent, int child);
  int               frames_can_resize_bottom             (const browser_data * restrict parent, int child);
  int               frames_can_resize_left               (const browser_data * restrict parent, int child);
  int               frames_can_resize_right              (const browser_data * restrict parent, int child);

  void              frames_redraw_borders                (const browser_data * restrict b, const WimpRedrawWindowBlock * restrict r);

  int               frames_fetching                      (browser_data * b);
  int               frames_dragging                      (browser_data * b);
  void              frames_abort_fetching                (browser_data * b, int stop_images, int stop_spools);
  void              frames_collapse_set                  (browser_data * b);

  browser_data    * frames_find_named                    (browser_data * parent, char * name);
  browser_data    * frames_find_target                   (browser_data * b, const char * target);
  browser_data    * frames_find_named_visible_same_index (browser_data * parent, char * name, int * index);
  browser_data    * frames_find_browser_from_index       (browser_data * parent, int index);

  browser_data    * frames_find_another_frame            (browser_data * current, int dir);

  _kernel_oserror * frames_highlight_frame               (browser_data * b);
  _kernel_oserror * frames_remove_highlight              (void);
  _kernel_oserror * frames_remove_highlight_if_present   (browser_data * b);

#endif /* Browser_Frames__ */
@


1.11
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d45 1
a45 1
  void              frames_get_rc_info                   (browser_data * parent, int child, int * retrows, int * retcols, int * retrow, int * retcol);
d48 4
a51 4
  int               frames_can_resize_top                (browser_data * parent, int child);
  int               frames_can_resize_bottom             (browser_data * parent, int child);
  int               frames_can_resize_left               (browser_data * parent, int child);
  int               frames_can_resize_right              (browser_data * parent, int child);
d53 1
a53 1
  void              frames_redraw_borders                (browser_data * b, WimpRedrawWindowBlock * r);
@


1.10
log
@Everyone else seems to be checking lots of stuff in lately, so I've
decided to join in. This is an intermediate check-in and so not all
resources etc. will be up to date. You should be able to make Phoenix
and a debug build out of it. As a reminder, to make a JavaScript build:

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean. This now strips dynamic dependencies from the MakeFile
   automatically, to save you having to do it yourself.
 * Run one of the TaskObey files with the "J" suffix, e.g. !DeskBrwsJ -
   this uses the same .o directory for object files and exports to the
   same position in the Targets directory as the non-JavaScript build,
   but it does produce a unique binary in 'abs' and symbols table in
   'syms'.
 * Sourcing an appropriate !Run (with increased WimpSlot value), !Boot
   and About resource is done automatically.
 * Some, but not all of the !xxxD (debug) TaskObey files will make
   JavaScript versions in passing - check the JSUFFIX value on the Make
   command line parameters in the file.

This'll only work on RISC OS 3.1 due to the use of MemLib.

Here's the change list:

Included MNG icons in sprites files; added Sprites23 for some builds.
Added in ANT URL file icon (b28) derived from URI file icon, because
the Save dialogue can need it.

No, you do *not* need to define the same keyboard shortcuts in each
frame since the ancestor keeps the input focus and we've basically
dropped non-nested Wimp support. Maintaining no less than 4 lists of
identical shortcuts was a pain. Some Res files now only have the
lists in the main browser window and button bar objects (these two
are both required still).

Ursula build Markers button arrangement changed from 1x3 horizontal to
2x2 tilted, as in Phoenix, by popular demand.

Couple of hotlist bugs fixed; dragging an item and deleteing it with
Ctrl+X didn't terminate the drag, and deleteting an item underneath a
menu opened for it didn't close the menu.

'SendReferer' option added to all Choices files, all set to 'always'.
Put just beneath 'Clone' as it refers to header items, though really,
both Clone and SendReferer should probably be in the "Fetch controls"
section rather than "Multiuser environments and proxying"! Front-end
control of this is available.

In image_export_original, save_save_source, save_transfer_source and
save_save_object, flex_set_budge(0) was called to lock the heap but the
return value wasn't stored. flex_set_budge(1) was then used to unlock
the heap. All calls now remember and restore the old value, which is
both safer in case one calls another and allows the flex_set_budge
call in Main.c to have an application-wide meaning, as intended.

Some restructuring to the data load and RAM transfer sections of
Protocols.c; remote hotlist builds wouldn't allow files to be loaded
to browser windows before, and can now drop URL, URI or text files to
the Open URL dialogue.

New option "MinimumFontSize", lets the 'size' attribute of the 'font'
element be overridden. Default value is 1, to allow the full range of
values for the attribute. Setting to 7, for example, would give font
size 7 text at all times. Another new option, "ToggleOnXOnly", to
make Toggle Size only extend the window vertically (with Ctrl then
being used to toggle to genuine full size, rather than vice versa).
All Choices files updated to hold both of these options; only the
first has front-end control available (see debug build Res file).

JavaScript Document object exists; frames array etc. working. Can now
just about use "http://www.acorn.com/~ahodgkin/jschain/" but it does
abort after a bit - problems with frames again, I suspect. Is is pretty
slow, too. Can now press Escape to terminate a script.

Main.c erroneously referred to Controls file entry "StopWebServe" as
"StopWebProxy". Fixed.

Keyboard shortcuts to raise SaveFile are now possible in a general sense;
the code before was in the ToBeShown handler and just checked for a parent
component of -1. It then assumed "save frame HTML source". Now there's the
savefile_raise_from_shortcut function, which together with the seven new
event codes in SaveFile.h allows saving of HTML source and frame location,
export of links, images, backgrounds and the page as text or draw, to all
be invoked by keyboard shortcuts. Some Res files have some of these defined.

In reformat_check_height, the first check to see if setpara should be set
references a field in tpLast without checking if it is NULL. Whilst the
'line > 0' check should mean that tpLast wasn't NULL anyway, a direct
call to the function from outside of the reformatter might have tripped
up on this - the check for tpLast != NULL is now made.

Adjust-click on close icon in window showing file: URL attempts to open
the parent Filer window.

Reformatter used to try and find a selectable token if keyboard control
was enabled in a really stupid place - could make reformatting become
very slow if no selectables were present, especially if the page had a
few tables on it. Preprocessor now does this (since it goes through all
of the tokens anyway), the reformatter just doing a last check to ensure
no frames have obscured the selectable and if so, it tries to move it.
Done in the reformatter as generating a line array implies the data really
is visible.

Ctrl+Tab URL completion now builds a full list of matches from the hotlist
and history and can cycle through them (Ctrl+Shift+Tab stepping backwards).

Will give a real error rather than just "Data Abort" if it goes wrong
now. Someone somewhere is setting bit 30 of the error which confused
the replacement signal handler. Flag bits are now masked off (as they
should've been to start with).
@
text
@d15 57
a71 44
/***************************************************/
/* File   : Frames.h                               */
/*                                                 */
/* Purpose: Frame handling functions for the       */
/*          browser.                               */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 19-Mar-97: Created.                    */
/***************************************************/

/* Function prototypes */

_kernel_oserror * frames_define_frameset               (browser_data * b, HStream * token);
_kernel_oserror * frames_define_frame                  (browser_data * b, HStream * token);
_kernel_oserror * frames_resize_frameset               (browser_data * b, BBox * new_outline);
_kernel_oserror * frames_resize_frame                  (browser_data * b, BBox * new_outline);
void              frames_lock_frameset                 (browser_data * b);

void              frames_get_rc_info                   (browser_data * parent, int child, int * retrows, int * retcols, int * retrow, int * retcol);
_kernel_oserror * frames_find_pointer_in_frameset      (browser_data * handle, int x, int y, int * retrow, int * retcol, int * offset_left, int * offset_top, int constrain);

int               frames_can_resize_top                (browser_data * parent, int child);
int               frames_can_resize_bottom             (browser_data * parent, int child);
int               frames_can_resize_left               (browser_data * parent, int child);
int               frames_can_resize_right              (browser_data * parent, int child);

void              frames_redraw_borders                (browser_data * b, WimpRedrawWindowBlock * r);

int               frames_fetching                      (browser_data * b);
int               frames_dragging                      (browser_data * b);
void              frames_abort_fetching                (browser_data * b, int stop_images, int stop_spools);
void              frames_collapse_set                  (browser_data * b);

browser_data    * frames_find_named                    (browser_data * parent, char * name);
browser_data    * frames_find_target                   (browser_data * b, const char * target);
browser_data    * frames_find_named_visible_same_index (browser_data * parent, char * name, int * index);
browser_data    * frames_find_browser_from_index       (browser_data * parent, int index);

browser_data    * frames_find_another_frame            (browser_data * current, int dir);

_kernel_oserror * frames_highlight_frame               (browser_data * b);
_kernel_oserror * frames_remove_highlight              (void);
_kernel_oserror * frames_remove_highlight_if_present   (browser_data * b);
@


1.9
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d33 1
a33 1
  
d36 1
a36 1
  
d41 1
a41 1
  
d43 1
a43 1
  
d45 1
d48 1
a48 1
  
@


1.8
log
@Now handles PARAM tags. Sorted out Plug-In bug that was related to Java
setting a 0 by 0 graphics window before calling Wimp_Poll (fixed in Java).
Implemented queue for Plug-Ins so multiple broadcasts aren't sent for
several Objects in one data chunk.

Added Docs directory with some documentation in it. More things to keep
checking for stylistic consistency, horray ;-)

Corrected !Run[D] for Ursula build to need AcornURI but not TaskModule
(URI handler needed for !Mail to pick up mailto: links).

Added display_height field to browser_data, analogous to display_width,
to cope with % sized objects by width and height (see how HRs are
handled in Redraw.c for an example of how it was always fairly easy
with width, but not height until this addition). Though you do have
to reload to get a new size; reformat isn't enough. Must see to this
some time...

Fixed bug where basic typefaces were claimed *before* the Choices file
had been read. For unusual Choices settings, this could create some
'interesting' problems now and again. This was part of narrower scope
work in the Choices code to allow font changing without leaking font
handles (now done; fm_shutdown only ditches fonts, it keeps internal
structures - must then call  fm_lose_fonts for all browsers to get the
bitfields up to date, then rewrite the typeface definitions and reclaim
basic fonts). Noticed that fm_claim_basic_typefaces would claim multiple
instances of the same font if there were several cases of the same font
mapped to different typeface styles - fixed.

Implemented PlugInControl settings, but not SupportObject (fully).
@
text
@d28 30
a57 28
_kernel_oserror * frames_define_frameset             (browser_data * b, HStream * token);
_kernel_oserror * frames_define_frame                (browser_data * b, HStream * token);
_kernel_oserror * frames_resize_frameset             (browser_data * b, BBox * new_outline);
_kernel_oserror * frames_resize_frame                (browser_data * b, BBox * new_outline);
void              frames_lock_frameset               (browser_data * b);

void              frames_get_rc_info                 (browser_data * parent, int child, int * retrows, int * retcols, int * retrow, int * retcol);
_kernel_oserror * frames_find_pointer_in_frameset    (browser_data * handle, int x, int y, int * retrow, int * retcol, int * offset_left, int * offset_top, int constrain);

int               frames_can_resize_top              (browser_data * parent, int child);
int               frames_can_resize_bottom           (browser_data * parent, int child);
int               frames_can_resize_left             (browser_data * parent, int child);
int               frames_can_resize_right            (browser_data * parent, int child);

void              frames_redraw_borders              (browser_data * b, WimpRedrawWindowBlock * r);

int               frames_fetching                    (browser_data * b);
void              frames_abort_fetching              (browser_data * b, int stop_images, int stop_spools);
void              frames_collapse_set                (browser_data * b);

browser_data    * frames_find_named                  (browser_data * parent, char * name);
browser_data    * frames_find_target                 (browser_data * b, const char * target);

browser_data    * frames_find_another_frame          (browser_data * current, int dir);

_kernel_oserror * frames_highlight_frame             (browser_data * b);
_kernel_oserror * frames_remove_highlight            (void);
_kernel_oserror * frames_remove_highlight_if_present (browser_data * b);
@


1.7
log
@Now working on source merged with Kevin Bracey's internationalisation
support. UNIFONT is undefined in the Make File for now. All Res and
Choices files updated appropriately.

Having sorted out the old Choices and Messages to form Choices, Controls
and Messages, this build has had the same cleaning up done internally.
This includes greater consistency in naming schemes and the removal of
the inconsitent choices items - e.g. Choices file entries saying 'delay
images' and 'plain backgrounds' where internally all the flags say 'show
images' and 'show backgrounds'. ChoiceDefs.h and CtrlDefs.h added to
clarify the meaning of some fields, though usage of these is not 100%
in the source (there are cases where parameters are passed through to
functions as ints, and those functions still check these against hard
coded values rather than the #define stuff).

Fetcher status return bits (connected, sent request, etc.) now reflected
in status bar. Progress during fetchs to files are reported by %, where
the size of the object is known. Exceeding 100% drops back to a byte
counter, in case the estimated size was wrong. The progress counter
may be updated after specific delays, rather than 'as often as possible',
to reduce flicker (as requested by D.Brown some time ago).

I've done a small rewrite of the fetch prioritisation scheme in FetchPage.c;
how well this performs in general use across different processor speeds
remains to be tested, but certainly it has some advantages. For each small
fetch window before the rewrite, a 4cs tight loop was entered - this gave a
noticable and substantial drain to the Desktop performance if more than one
was opened. Now, several can be up at once with little hit. The actual file
fetch is on half the priority it was before, with all others taken back
just a bit - e.g. from 20cs per poll to 15cs per poll for flat out
reformatting. You don't seem to lose much time on the format in practice,
and the Desktop feels quite a bit lighter at the same time. There's the
potential for smoother frameset loading in this scheme, too.

When Shift+Clicking on a link meant you still fetched inside the main
browser window, several fetches could occur in a frameset - one per frame.
However, now that you can only do this by clicking on a link that leads to
non-displayable data - or by turning off the small fetch windows by
setting UseSmall to 'no' in Choices - a bug where fetchpage_preprocessed
would stop such fetches as new ones were started was revealed.
The API to frames_abort_fetching has now been extended to include a
'stop file spooling too' flag, allowing a fix to be made by having
fetchpage_preprocess's calls not set this (and it doesn't check the
savelink flag is unset before proceeding, since frames_abort_fetching
does that implicitly now).

Had left the RAM transfer buffer at 16 bytes (from testing) accidentally...
Oops. Upped it to 4K. In addition, when loading data by RAM transfer,
the browser didn't notice if a RAMFetch bounced during the transfer. It
would be treated as a 'first' RAMFetch bounce, basically, and try to go to
file transfer - oops. Fixed.
@
text
@d49 1
a49 1
browser_data    * frames_find_target                 (browser_data * b, HStream * t);
@


1.6
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d45 1
a45 1
void              frames_abort_fetching              (browser_data * b, int stop_images);
@


1.5
log
@Odd problem with Entries file meant none got checked in last time...
@
text
@d42 2
@


1.4
log
@Quite a few general source changes throughout many files to sort out swapped
toolbars. There will be more work on this shortly. svcprint.c has been
modified to allow it to output to a file in PipeFS, so TML-less machines
can still use the standard browser debug routines (albeit in a less than
elegant fashion). Comments in that source file give more details. Plus a
few more bug fixes.
@
text
@d17 1
d20 1
d22 2
a23 1
/* History: 19-Mar-97: Created                     */
d30 3
a32 1
_kernel_oserror * frames_resize_frameset             (browser_data * b, WimpOpenWindowBlock * o);
d35 1
@


1.3
log
@Checking in mostly because its Friday... Quite a few little bug fixes
(adding up to a greater whole), which include removal of the dastardly
'invalid image number' errors that trace builds would raise from time to
time. Frame highlights are now better controlled (releaseably so).
Generally, this build represents the first genuinely promising version
of the browser for quite some time, despite the known library problems
with comment handling etc.
@
text
@d25 3
a27 3
_kernel_oserror * frames_define_frameset    (browser_data * b, HStream * token);
_kernel_oserror * frames_define_frame       (browser_data * b, HStream * token);
_kernel_oserror * frames_resize_frameset    (browser_data * b, WimpOpenWindowBlock * o);
d29 1
a29 1
void              frames_get_rc_info        (browser_data * parent, int child, int * retrows, int * retcols, int * retrow, int * retcol);
d31 4
a34 4
int               frames_can_resize_top     (browser_data * parent, int child);
int               frames_can_resize_bottom  (browser_data * parent, int child);
int               frames_can_resize_left    (browser_data * parent, int child);
int               frames_can_resize_right   (browser_data * parent, int child);
d36 3
a38 3
int               frames_fetching           (browser_data * b);
void              frames_abort_fetching     (browser_data * b, int stop_images);
void              frames_collapse_set       (browser_data * b);
d40 2
a41 2
browser_data    * frames_find_named         (browser_data * parent, char * name);
browser_data    * frames_find_target        (browser_data * b, HStream * t);
d43 1
a43 1
browser_data    * frames_find_another_frame (browser_data * current, int dir);
d45 3
a47 2
_kernel_oserror * frames_highlight_frame    (browser_data * b);
_kernel_oserror * frames_remove_highlight   (void);
@


1.2
log
@Fixed problems with unsourced images in tables and a couple of other bugs
here and there - nothing earth shattering... Just wanted to keep the CVS
source up to date.
@
text
@d36 1
d46 1
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d36 1
a36 1
void              frames_abort_fetching     (browser_data * b);
@
