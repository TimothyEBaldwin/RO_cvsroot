head	1.16;
access;
symbols
	ahodgkin_208_i4:1.14
	ahodgkin_208_i3:1.14
	ahodgkin_208_i2:1.14
	ahodgkin_208_i1:1.14
	ahodgkin_207release:1.12
	ahodgkin_206release:1.12
	ahodgkin_205release:1.11
	ahodgkin_204release:1.11
	ahodgkin_202release:1.10
	ahodgkin_201release:1.9
	ahodgkin_200release:1.9
	ahodgkin_133beta:1.9
	ahodgkin_132beta:1.9
	ahodgkin_131beta:1.9
	ahodgkin_130beta:1.9
	ahodgkin_129:1.9
	ahodgkin_128beta:1.8
	ahodgkin_128alpha:1.8
	ahodgkin_127beta2:1.8
	ahodgkin_127beta:1.8
	ahodgkin_126beta:1.7
	ahodgkin_AW97patch:1.7
	ahodgkin_AW97:1.7;
locks; strict;
comment	@# @;


1.16
date	2000.11.14.08.45.08;	author ahodgkin;	state dead;
branches;
next	1.15;

1.15
date	2000.05.31.15.58.56;	author ahodgkin;	state Exp;
branches;
next	1.14;

1.14
date	99.09.02.13.10.40;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	99.03.30.15.52.13;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	98.07.09.10.28.09;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	98.03.26.14.21.16;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	98.03.20.12.13.10;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	97.12.12.11.18.12;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.11.19.10.29.24;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.10.09.10.52.10;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.09.24.11.14.24;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.09.12.17.19.37;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.08.31.18.38.27;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.08.28.16.08.15;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.08.18.10.00.16;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.29.40;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.16
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Limits.h                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Definitions relating to fundamental limitations   */
/*          of the application.                               */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 13-Nov-1996 (ADH): Created.                       */
/*          16-Aug-1997 (ADH): Ensured that the lengths *did* */
/*                             include terminators (they were */
/*                             not supposed to previously).   */
/*          07-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_Limits__
  #define Browser_Limits__

  /***************************************************************************************/
  /*                                                                                     */
  /* Hard coded application limits                                                       */
  /* =============================                                                       */
  /*                                                                                     */
  /* Many of these are hard coded limits required since C won't let you do things like:  */
  /*                                                                                     */
  /* {                                                                                   */
  /*   char buffer[strlen(struct->path) + extralen];                                     */
  /*                                                                                     */
  /*   ...                                                                               */
  /* }                                                                                   */
  /*                                                                                     */
  /* Others are OS limits, or derived from OS limits; they may be related to the scope   */
  /* of values in related HTML; and so-on.                                               */
  /*                                                                                     */
  /* In the lists below, a description of what the limit represents is given. Where      */
  /* these are used can be worked out by loading all source / header files and doing a   */
  /* global List Of Found. The description is followed by a single digit code:           */
  /*                                                                                     */
  /* D  The size is arbitrary, though changing the value may have unpredictable effects  */
  /*    and so every case must be considered in light of the code relevant to the limit  */
  /*    in question. For example, no errors will be raised if the number of items        */
  /*    allowed in a <SELECT> list is reduced to 64 - menus would simply be truncated.   */
  /*                                                                                     */
  /*    The next three are generally relevant to string buffers:                         */
  /*                                                                                     */
  /* S  The buffer is 'safe', i.e. it can be reduced in size and should not be overrun   */
  /*    if something too big to fit in it is generated. Errors may be raised in this     */
  /*    case though (e.g. Buffer Too Short complaints from the Toolbox). Correct         */
  /*    behaviour is not guaranteed at sizes of 2 bytes or less.                         */
  /*                                                                                     */
  /* U  The buffer is 'unsafe', i.e. code assumes that whatever is to fit in the buffer  */
  /*    will always do so. The sizes defined here must thus be chosen with careful       */
  /*    consideration of the code involved. Some of these may have guards on them for    */
  /*    TRACE builds, though.                                                            */
  /*                                                                                     */
  /* P  Some buffers may be unsafe to an extent in one place but safe elsewhere, in      */
  /*    which case they generally have to be treated as unsafe. It may be possible to    */
  /*    modify code at some future time and make all usages safe though, so the          */
  /*    distinction is made.                                                             */
  /*                                                                                     */
  /* Where buffers are related to string lengths, any relevant terminators are included  */
  /* in the length.                                                                      */
  /*                                                                                     */
  /***************************************************************************************/

  /* First, Messages file related limits. */

  #define Limits_Token                    32   /* Length of any given Messages file token       S */
  #define Limits_Message                  512  /* Length of any given Messages file message     S */
  #define Limits_TaskName                 64   /* Length of the _TaskName message (U) - used    P */
                                               /* also for enumerating task names from the        */
                                               /* Task Manager and for the flex library (S)       */
  #define Limits_StatusFormat             50   /* Length of the Page, Fetch, Process, Format,   S */
                                               /* and LinkTo messages                             */

  /* Resource (Res) file determined limits (Res files must be kept in  */
  /* sync with these - that is, any Res file buffer which has an entry */
  /* here should be exactly the size that the entry defines).          */

  #define Limits_Help                     256  /* Maximum length of help text for any gadget    S */

  #define Limits_Title                    999  /* Browser window title bar                      S */
  #define Limits_URLBarWrit               999  /* URL bar or Open URL dialogue writable         S */
  #define Limits_ShortURL                 128  /* 'Short' URL, where not all may be needed      S */
  #define Limits_StatusBarStatus          999  /* Main status display field                     S */
  #define Limits_StatusBarProgress        20   /* Status byte counter display field             S */
  #define Limits_URLBarDiallerStatus      16   /* Online time and dialler status messages       S */
  #define Limits_URLBarDiallerStatusLabel 16   /* Label on the dialler status display           S */
  #define Limits_StatusBarStatusLabel     16   /* Label on the main status display              S */
  #define Limits_ToolActionIdent          256  /* ToolAction ident strings in the Toolbar       S */

  #define Limits_NRangeIcons              10   /* For get_icon_list on a Number Range gadget    U */
  #define Limits_PEndManyLabel            64   /* PEndManyLabel button text in Print dialogue   S */

  #define Limits_AuthPrompt               256  /* Authorisation dialogue main display panel     S */
  #define Limits_AuthUserWrit             256  /* Authorisation dialogue user name writable     S */
  #define Limits_AuthPassWrit             256  /* Authorisation dialogue password writable      S */

  #define Limits_FindWrit                 128  /* Find dialogue main writable field             S */

  #define Limits_Lower_Sheets             1    /* Limits on the Number Range gadgets for        D */
  #define Limits_Upper_Sheets             100  /* filling in 'n' sheets or printing 'n' copies  D */
  #define Limits_Lower_Copies             1    /* of a page, in the Print dialogue.             D */
  #define Limits_Upper_Copies             1000 /*                                               D */

  #define Limits_Hotlist_ItemName         32   /* Item name (e.g. "URL 'Acorn'") in main menu   S */

  #define Limits_SaveFile_Option          24   /* Optional option button label text in SaveFile S */
  #define Limits_SaveFile_Radios          24   /* Optional radio button label texts in SaveFile S */

  #define Limits_List_Item                300  /* Must be shorter than Limits_Message.          S */

  /* OS defined limits (these may not necessarily be actual OS limits,   */
  /* but OS related limits which the browser has to enforce internally). */

  #define Limits_OS_SpriteName            13   /* Sprite name (plus terminator)                 U */
  #define Limits_OS_FontHandles           256  /* Maximum number of active font handles         D */
  #define Limits_OS_Pathname              8192 /* Maximum length of any given pathname, e.g.    P */
                                               /* the Choices file (U) or save dialogue           */
                                               /* pathnames (S).                                  */

  /* Source file or function local limits for any build... */

  #define Limits_URL                      6144 /* Length of a URL (or URI) string               S */
  #define Limits_Leafname                 64   /* Length of a leaf name for app to app saves    S */

  #define Limits_UserAgent                256  /* User agent string                             S */

  #define Limits_FetchProgress            32   /* Fetch progress, if appending to status        U */

  #define Limits_NamedAnchor              256  /* The string after a '#' in a URL               S */
  #define Limits_Target                   256  /* Window target name                            S */
  #define Limits_EventLogs                1024 /* Event log messages (EventLogs.c)              S */

  #define Limits_FontName                 128  /* The length of a RISC OS font name             S */
  #define Limits_FaceName                 64   /* The length of a browser typeface name         S */
  #define Limits_FontSizes                7    /* The 7 font sizes for <FONT SIZE=...>          D */

  #define Limits_SelectItems              1024 /* Number of items in a <SELECT> list            D */

  #define Limits_Realm                    192  /* The realm for authorisation                   S */
  #define Limits_HostName                 192  /* The host name for authorisation               S */

  #define Limits_HistoryMenuItemSize      60   /* Max. width of history menus, in characters    D */

  #define Limits_Markers                  10   /* No. markers (Less than &80, see MiscEvents.h) P */

  /* ...and a few more for multiuser builds (SINGLE_USER not defined). */

  #define Limits_Multi_UserName           20   /* User name for login                           S */
  #define Limits_Multi_Password           12   /* Password for login                            S */
  #define Limits_Multi_Encoded            64   /* Encoded password                              S */
  #define Limits_Multi_HomePage           256  /* Home page URL for user                        S */
  #define Limits_Multi_Name               32   /* User's actual name                            S */
  #define Limits_Multi_Pathname           256  /* Pathnames (history, hotlist, post in, etc.)   S */

  /* Miscellaneous limits - limitation definitions that don't */
  /* easily fit into another category.                        */

  #define Limits_Misc_AnimFrames          1024 /* The number of animation sprites allowed       D */
  #define Limits_Misc_Bullets             128  /* The number of bullet sprites allowed          D */

#endif /* Browser_Limits__ */
@


1.15
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@@


1.14
log
@Long overdue check-in of intermediate browser build, from continued "out
of hours" work. Forgot to add a few files last time too.

List dialogue box handler complete, and exclusion lists implemented
within the main browser code. Full documentation in Choices file.
Save routine knows all about it but is now getting very slow - must
come up with a better scheme; for now, it puts the hourglass on...

StripExtensions option controls auto stripping of filename extensions.

More sensible ancestor / frame selection for keyboard shortcut items
and the save dialogues - having selected a frame won't lock you into
it for F3 and related shortcuts now (input focus in URL writable ->
get ancestor details, input focus in frame -> get frame details). F4
works in frames. F5 now generally present for 'view source' with a
corresponding menu entry in the File menu.

Odd thing in later Res files; there's no action set for Adjust clicks
on the main ToolAction items in the button bar. Very odd. Nothing
appears to be set in v2.07 either, yet adjust-click works. Even
stranger. Anyway, added in the relevant event details (same as for
Select click in all cases) and this fixes the problem.

Background colours in the TABLE tag ignored the "don't print any
backgrounds" Print Style setting. Fixed. Meanwhile, the "black
text with no backgrounds" option wasn't getting this right either;
fixed this also.

Event logging implemented; HTTP errors and script output via.
window.print extension. No internal error output yet.

Faith:Never behaviour extended. If ever a server sends something with
no content type or an unhandleable type, the browser will try and get a
filetype from the URL. If it gets text or HTML, it'll render the file.
Else it'll save it. Hacks around IIS 4's lack of a content type field
in the Marketeye login stuff, and similar other slightly broken sites.
@
text
@d15 157
a171 153
/***************************************************/
/* File   : Limits.h                               */
/*                                                 */
/*                                                 */
/* Purpose: Definitions relating to fundamental    */
/*          limitations of the application.        */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 13-Nov-96: Created.                    */
/*          16-Aug-97: Ensured that the lengths    */
/*                     *did* include terminators   */
/*                     (previously, they weren't   */
/*                     supposed to).               */
/***************************************************/

/***************************************************************************************/
/*                                                                                     */
/* Hard coded application limits                                                       */
/* =============================                                                       */
/*                                                                                     */
/* Many of these are hard coded limits required since C won't let you do things like:  */
/*                                                                                     */
/* {                                                                                   */
/*   char buffer[strlen(struct->path) + extralen];                                     */
/*                                                                                     */
/*   ...                                                                               */
/* }                                                                                   */
/*                                                                                     */
/* Others are OS limits, or derived from OS limits; they may be related to the scope   */
/* of values in related HTML; and so-on.                                               */
/*                                                                                     */
/* In the lists below, a description of what the limit represents is given. Where      */
/* these are used can be worked out by loading all source / header files and doing a   */
/* global List Of Found. The description is followed by a single digit code:           */
/*                                                                                     */
/* D  The size is arbitrary, though changing the value may have unpredictable effects  */
/*    and so every case must be considered in light of the code relevant to the limit  */
/*    in question. For example, no errors will be raised if the number of items        */
/*    allowed in a <SELECT> list is reduced to 64 - menus would simply be truncated.   */
/*                                                                                     */
/*    The next three are generally relevant to string buffers:                         */
/*                                                                                     */
/* S  The buffer is 'safe', i.e. it can be reduced in size and should not be overrun   */
/*    if something too big to fit in it is generated. Errors may be raised in this     */
/*    case though (e.g. Buffer Too Short complaints from the Toolbox). Correct         */
/*    behaviour is not guaranteed at sizes of 2 bytes or less.                         */
/*                                                                                     */
/* U  The buffer is 'unsafe', i.e. code assumes that whatever is to fit in the buffer  */
/*    will always do so. The sizes defined here must thus be chosen with careful       */
/*    consideration of the code involved. Some of these may have guards on them for    */
/*    TRACE builds, though.                                                            */
/*                                                                                     */
/* P  Some buffers may be unsafe to an extent in one place but safe elsewhere, in      */
/*    which case they generally have to be treated as unsafe. It may be possible to    */
/*    modify code at some future time and make all usages safe though, so the          */
/*    distinction is made.                                                             */
/*                                                                                     */
/* Where buffers are related to string lengths, any relevant terminators are included  */
/* in the length.                                                                      */
/*                                                                                     */
/***************************************************************************************/

/* First, Messages file related limits. */

#define Limits_Token                    32   /* Length of any given Messages file token       S */
#define Limits_Message                  512  /* Length of any given Messages file message     S */
#define Limits_TaskName                 64   /* Length of the _TaskName message (U) - used    P */
                                             /* also for enumerating task names from the        */
                                             /* Task Manager and for the flex library (S)       */
#define Limits_StatusFormat             50   /* Length of the Page, Fetch, Process, Format,   S */
                                             /* and LinkTo messages                             */

/* Resource (Res) file determined limits (Res files must be kept in  */
/* sync with these - that is, any Res file buffer which has an entry */
/* here should be exactly the size that the entry defines).          */

#define Limits_Help                     256  /* Maximum length of help text for any gadget    S */

#define Limits_Title                    999  /* Browser window title bar                      S */
#define Limits_URLBarWrit               999  /* URL bar or Open URL dialogue writable         S */
#define Limits_ShortURL                 128  /* 'Short' URL, where not all may be needed      S */
#define Limits_StatusBarStatus          999  /* Main status display field                     S */
#define Limits_StatusBarProgress        20   /* Status byte counter display field             S */
#define Limits_URLBarDiallerStatus      16   /* Online time and dialler status messages       S */
#define Limits_URLBarDiallerStatusLabel 16   /* Label on the dialler status display           S */
#define Limits_StatusBarStatusLabel     16   /* Label on the main status display              S */
#define Limits_ToolActionIdent          256  /* ToolAction ident strings in the Toolbar       S */

#define Limits_NRangeIcons              10   /* For get_icon_list on a Number Range gadget    U */
#define Limits_PEndManyLabel            64   /* PEndManyLabel button text in Print dialogue   S */

#define Limits_AuthPrompt               256  /* Authorisation dialogue main display panel     S */
#define Limits_AuthUserWrit             256  /* Authorisation dialogue user name writable     S */
#define Limits_AuthPassWrit             256  /* Authorisation dialogue password writable      S */

#define Limits_FindWrit                 128  /* Find dialogue main writable field             S */

#define Limits_Lower_Sheets             1    /* Limits on the Number Range gadgets for        D */
#define Limits_Upper_Sheets             100  /* filling in 'n' sheets or printing 'n' copies  D */
#define Limits_Lower_Copies             1    /* of a page, in the Print dialogue.             D */
#define Limits_Upper_Copies             1000 /*                                               D */

#define Limits_Hotlist_ItemName         32   /* Item name (e.g. "URL 'Acorn'") in main menu   S */

#define Limits_SaveFile_Option          24   /* Optional option button label text in SaveFile S */
#define Limits_SaveFile_Radios          24   /* Optional radio button label texts in SaveFile S */

#define Limits_List_Item                300  /* Must be shorter than Limits_Message.          S */

/* OS defined limits (these may not necessarily be actual OS limits,   */
/* but OS related limits which the browser has to enforce internally). */

#define Limits_OS_SpriteName            13   /* Sprite name (plus terminator)                 U */
#define Limits_OS_FontHandles           256  /* Maximum number of active font handles         D */
#define Limits_OS_Pathname              8192 /* Maximum length of any given pathname, e.g.    P */
                                             /* the Choices file (U) or save dialogue           */
                                             /* pathnames (S).                                  */

/* Source file or function local limits for any build... */

#define Limits_URL                      6144 /* Length of a URL (or URI) string               S */
#define Limits_Leafname                 64   /* Length of a leaf name for app to app saves    S */

#define Limits_UserAgent                256  /* User agent string                             S */

#define Limits_FetchProgress            32   /* Fetch progress, if appending to status        U */

#define Limits_NamedAnchor              256  /* The string after a '#' in a URL               S */
#define Limits_Target                   256  /* Window target name                            S */
#define Limits_EventLogs                1024 /* Event log messages (EventLogs.c)              S */

#define Limits_FontName                 128  /* The length of a RISC OS font name             S */
#define Limits_FaceName                 64   /* The length of a browser typeface name         S */
#define Limits_FontSizes                7    /* The 7 font sizes for <FONT SIZE=...>          D */

#define Limits_SelectItems              1024 /* Number of items in a <SELECT> list            D */

#define Limits_Realm                    192  /* The realm for authorisation                   S */
#define Limits_HostName                 192  /* The host name for authorisation               S */

#define Limits_HistoryMenuItemSize      60   /* Max. width of history menus, in characters    D */

#define Limits_Markers                  10   /* No. markers (Less than &80, see MiscEvents.h) P */

/* ...and a few more for multiuser builds (SINGLE_USER not defined). */

#define Limits_Multi_UserName           20   /* User name for login                           S */
#define Limits_Multi_Password           12   /* Password for login                            S */
#define Limits_Multi_Encoded            64   /* Encoded password                              S */
#define Limits_Multi_HomePage           256  /* Home page URL for user                        S */
#define Limits_Multi_Name               32   /* User's actual name                            S */
#define Limits_Multi_Pathname           256  /* Pathnames (history, hotlist, post in, etc.)   S */
d173 2
a174 2
/* Miscellaneous limits - limitation definitions that don't */
/* easily fit into another category.                        */
d176 4
a179 2
#define Limits_Misc_AnimFrames          1024 /* The number of animation sprites allowed       D */
#define Limits_Misc_Bullets             128  /* The number of bullet sprites allowed          D */
@


1.13
log
@Intermediate check-in; building a browser from this gives you something
between 2.07 and 2.08. Only the Phoenix JavaScript resources are fully
up to date.

I *think* these are the changes since the last check-in:

When saved as a Draw file, horizontal rules were plotted one page width
too far to the right (wonder when that started happening?!). Fixed. In
addition, DrawFiles now accepted as OBJECTs - they weren't in the
recognised filetype list before. Doh.

Table size calculator tables_count_table would overestimate the number
of cells where ROWSPAN was present and there were other rows below the
one spanned. Fixed. In certain odd cases (e.g. optimised image exports
as HTML tables (!!) from the Gimp) this can save vast amounts of RAM.

Fixed problem where printing stops in the middle of a document. Redraw
engine pagination code was written in the days where lines couldn't
have gaps between them; they can now. If a gap fell at the bottom of
a page the engine would look down, see no line straddling or touching
the page edge, and assume there was nothing more. This case is now
correctly handled.

Made sure desktop and testbed Browse Res files had up-to-date Encoding
menus (v2.07 Phoenix has different menus from v2.07 Browse by oversight).

URL auto-completion piggy-backed onto manual completion code; any string
without '.', '/' or ':' in it gets run through completion to see if a
more meaningful item can be produced - "www" special cased out though.

New List dialogue box handler, used for proxy exclusions etc.
(incomplete), complete with appropriate Res file objects.
@
text
@d81 1
a81 1
#define Limits_Message                  320  /* Length of any given Messages file message     S */
d123 1
a123 1
#define Limits_List_Item                300  /* Must be shorter than Limits_Message.          S */ 
d145 1
@


1.12
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d123 2
@


1.11
log
@This is NOT a 'final' version of anything in particular. I'm checking it
in as I'm about to start playing around with low level window handling
(as part of the thing mentioned at the bottom of this log) - this could
screw things up quite badly if it goes wrong! =8*P

Consequently, I advise you not to check this out over your working sources,
and preferably not to check this out at all.

Markers system - events defined in MiscEvents.h will make Browse remember
where it is on the page. This position can be jumped back to later.
Some builds will have defined keyboard shortcuts Ctrl+Shift+F5 through
F8 to set a marker, and Ctrl+F5 through F8 to jump to a marker.

The front-end for the above now has gadgets 0x80 upwards on the Toolbar or
a set of menus (see Menus.h). Noticed an omission in copy_toolaction_info()
(didn't copy the gadget state) in passing; fixed.

browser_top_line() now works properly, as part of the above, but it'll be
slower than before. If flagged to only find a complete line, it'll do just
that, but whereas before this would require any tables that it looked
inside to be wholly visible, tables can now be partially visible and have
lines inside that are fully visible. This should help the Find function
too. There is a new call, browser_top_line_offset, which works as
browser_top_line but also returns a vertical scroll offset in the found
line (used for more accurate marker position). browser_bottom_line[_r]
turn out to never be used, even by the keyboard control routines, so they
have been removed from Browser.c (rather than spend a lot of time and
effort fixing them).

browser_show_token erroneously subtracted 1 from a particular coordinate
when calculating the y scroll position, which could lead to single pixel
page creep using the markers system. Corrected.

The View Resources button (see Toolbars.h) has been finally implemented,
insofar as it fetches the resources file to the current browser page (or
to a new window if Adjust is used, Controls file settings permitting).

menus_toggle_bars did not take account of the toolbar lower window border
edge correctly. It does now.

The reformatter has a prototype system to keep the vertical page position
when reformatting. This was coded about 5 minutes ago, and is not likely
to be reliable...
@
text
@d81 1
a81 1
#define Limits_Message                  256  /* Length of any given Messages file message     S */
@


1.10
log
@Programming warehouse link removed from all hotlists - the page has gone.

Some compile-time hacks in place to use MemLib, a dynamic area based
malloc replacement which shrinks its heap when possible. All builds
have these switched off at the moment. Seemed to work with just Browse,
though there would be problems with message blocks stored in dynamic
areas because of the Wimp's '&3800000' check - however, it failed when
HTMLLib was made to use it, too. Don't know why yet.

ItemInfo.[c/h] source added, with Res file additions for testbed Browse
and Phoenix.

Small fetch windows now work properly regardless of toolbar settings
in the Choices.

Reload now reloads all images too, rather than only reloading them for
as long as the main page was being fetched.

Added a simple 'Find' facility.

Realised that event handlers in eventlib are called in reverse order
of registration, so the miscellaneous event handler is now registered
first rather than last.

Multiuser code added (most only active if SINGLE_USER is undefined). As
part of this, hotlist code now knows about read-only items (done for the
Customer-style 'Resources' file, but works generally anyway).
handle_add_hotlist doesn't try to save the hotlist itself anymore (the
hotlist_add function does all that through hotlist_modified anyway).

Customer build Choices and Controls updated slightly (e.g. ClaimHelp
off, hotlist to save on quit only).

Customer build now uses Phoenix-style buttons. Sprites files which
worked at the time (but will probably be out of date now) and included
most of the original Customer-style sprites are in
'Utils.Icons.Customer'.

Choices, Messages and Res files for all builds now stripped down to only
single user items or single plus multiuser for Customer build and testbed
build. Before, all contained a few multiuser bits in at least the Choices
file if not more.

Grammatical error ("Fetching frames contents" (sic.)) corrected in
default message, Toolbars.c, and all of the Messages files.

Customer build brought back to a servicable level (including
implementation of the Find dialogue box with animation and fixing
up authorisation and 'Stop' state in the tristate). Quite a few
missing #ifndef REMOTE_HOTLIST bits from hotlist code added...

Customer build will not use <Choices$Write> or Boot:Choices for any
file finding now. UseProxy defaults to 'yes', MaxImages to 2. Res
file includes Proxy Address setting (save_save_choices() now writes
the ProxyAddress line).
@
text
@d155 2
@


1.9
log
@There are a few known significant problems with this code but it's being
checked in so the Choices can be worked on. Note that Res files etc. are
not up to date across all builds. Progress is as follows...

Bug report prompted me to do this - now ignore <p> tags straight after
<li> tags, so '<ul><li><p>Some text' works as the author (or automatic
generator, more commonly) intended.

A <p> tag before a table will be acted upon now (it was ignored before).
Something like <li><p><table...> will give a line break and paragraph
space after the <li> despite the changes mentioned above, as in other browsers.
Both browsers differ from Navigator, where the table appears alongside
the <li> tag.

Multiple BR tags work as in MSIE / Navigator (they don't collapse to
zero height anymore).

For the above, line height (and so, <br><br> or <p> spacing) is now
calculated inside reformat_text_line_height, and is used with either
a token to get the text height at a given size (e.g. for general line
spacing or multiple BR tags) or NULL for normal size text (e.g. for
P spacing, though this value is in practice later scaled by 7/8ths in
reformat_check_height). Note this behaviour is exhibited by MSIE 4;
v3 gave two BRs the same spacing as one P (i.e. not font size
dependent).

Save dialogues can have an option button or couple of radios to
switch between various formats (e.g. URI or URL, sprite or original
format). See 'Docs.Notes' for more. The back-end to this is now
implemented (i.e. at the moment, save as URI or URL, save as original
image format). Note that when saving background images, a leafname
based on the original fetch URL is now offered rather than a generic
'Background'.

Internal URL scheme changed to be all lower case, so relativisation
through URL_Fetcher still makes sense... :-/

Holding down 'shift' when clicking on stop reverses the interpretation
of the Controls file 'StopWebServe' entry.

Fixed row / column count for exporting tables as text; fixed a few
bits and pieces of internal URL scheme stuff which got broken when
HTMLLib started using URL_Fetcher's relativisation.
@
text
@d96 1
d158 2
a159 1
#define Limits_Multi_Password           11   /* Password for login                            S */
d162 1
a162 2
#define Limits_Multi_History            256  /* Pathname to save/load history file            S */
#define Limits_Multi_Hotlist            256  /* Pathname to save/load hotlist file            S */
@


1.8
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d119 3
@


1.7
log
@!Run[D] files updated for new fetchers and GopherFetcher; protocols list
in Controls updated for Gopher. Debug builds now require 2760K rather than
2560K. Font$... variables set if not already, in anticipation of font
Choices work.

Additional bits in Choices section of Res file tidied and some name
changes (e.g. Netscape -> Navigator(TM)). Frames support option added
to Choices.

Grouped 'support_frames' under the Fetch Controls section and added
support_object in Global.h; appropriate entries placed in the Choices
files, and are read at startup. At present, though, only the frames
support flag is implemented.

For some reason, Menu was the button to use on history popups if you
wanted to show URLs instead of descriptions (or vice versa, depending
on Choices settings). Now, Select and Menu will show the Choices
defined setting, and Adjust will show the opposite.

History menus are built backwards, so local histories have the most
recently visited pages at the top. Global history has still no real
order to it, but this may be arranged later.

Customer name changed to Customer by request.

Customer browser now gets its own resources (SYSTEM=Customer), but
otherwise is unchanged, with the Ursula build now giving the
'spinning acorn' with a Bookworm-style toolbar. This is used for the
Desktop !Browse build.

!Sprites[22] files updated to include GIF, JPEG and PNG sprites;
!Run[D] files and !Boot files set appropriate File$Type_xxx variables.
Sprites in all sprites files have been checked for unnecessary palettes,
which have been removed where present.
@
text
@d149 1
a149 1
#define Limits_HistoryMenuItemSize      60   /* Max. width of history menus, in characters    D */ 
@


1.6
log
@Tidied up Hotlist source a bit more, mostly so PSI can use the automatic
StrongHelp generator on it. Revealed a spurious toolbox_hide_object call
that would always fault and never do anything, and a few heinous uses
of show_error which have all been removed.

When dragging hotlist items, directories will now be highlighted whenever
the item would be added to them, rather than just over the sprite. In
practice this only changes if the item is open and has contents...

Drag box selections had broken in the hotlist; fixed (uninitialised
variable in hotlist_select_box). Adjust-drags now close the window on
completion. Minor problem with Shift+Drag (copy) reversing order of items
sorted out. Added hotlist_add_html_file and implemented loading of HTML.
DO NOT add broken HTML files, this has not been coded for and URLs of the
form http:///this/that (no host name) will hang the machine (bug in the
cookie code of the HTTP module up to at least version 0.39).

Made SELECT list items only as wide as the widest entry actually appears
(using fm_get_string_width), rather than as wide as the widest character
BBox in the font multiplied by the string length of the longest entry.

Updated !Run[D] files to require HTTP 0.39, FTP 0.12 and File 0.23.
@
text
@d149 2
@


1.5
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d117 2
@


1.4
log
@Created Protocols source file and moved a lot of message handling from
handle_messages - the latter now serves as a high level distributor to
lower level functions in Protocols. Incidentally, URL files (as used by
the ANT suite) can be loaded by dragging to the browser in the same way
as URI files - Not A Lot Of People Know That, etc.

Merged new hotlist display type Res file to existing resources, added
support for DataSave message so items can be dragged from the hotlist
to a specific window (RAM transfer for URI and URL files; ScrapFile for
HTML and Text but deleted afterwards and there are appropriate guards
to stop Reload just saying 'not found'; images run through ScrapFile and
there is no choice but to leave them there and do a conventional fetch).

All !RunD files now give a WimpSlot of 2304K. Some small changes to
the Argo and Ursula build Res files to make the menu trees more sensible.
Controls files now take 'file:/' instead of 'file://' in Protocols
section. Definitions at top of URLutils.c *not* altered, as then you
end up with invalid URLs - so it will accept 'file:/', but always generate
'file://'. This is because some browsers exports 'file:/'. Sigh.

make_no_[..._]memory_error functions now return a _kernel_oserror * rather
than void. It's always &erb returned, but it enables users to use a more
elegant 'return make_no_memory_error(1);', say, rather than something
like 'make_no_memory_error(1); return &erb;'. I obviously should've written
it like that at the outset, but never mind. All callers have been
appropriately updated.

The urlutils_leafname_from_url function now replaces illegal characters
(A7000 Welcome Guide p54...) in the leaf with legal alternatives.

Internal URL scheme is now a bit cleaner, with everything properly defined
in URLutils.h. All references to http:, file: and ftp:, with or without
a following '//' use the definitions in here now.

More tidying and some reorganising of Hotlist source. Auto-open delay is
now a Choices item. Some dependencies on statics removed (e.g. the
counting functions don't accumulate into the global item_number now).
The redraw functions used Wimp_TextOp - oops, so this has been amended
to use whatever is supported on your Wimp. This is now in a new function
(utils_text_width()), which the History menu routines also use (there was
a bug in the width routine there anyway, which is therefore fixed in
passing). Several other routines used Wimp_TextOp directly too, and
they have been altered to use the new function as well.

In hotlist code, one of the larger changes is in the API to hotlist_draw_r()
(formerly _hotlist_draw()) which now takes item widths and heights as
parameters - discovering these is quite slow, so doing it every time the
function calls itself recursively is a little less efficient than
passing the values in from elsewhere. Note that underscore prefixed
functions are being slowly renamed to _r suffixed functions, to match
the convention established by Tony Cheal with is table routines. This
makes it much more obvious when something is recursive, as the same
naming convention is used in every browser source file.

Finally, note that I intend to ditch SaveDBox and use an alternate window
with manual control of the messaging in Protocols.c. This will allow
various improvements which at present the SaveDBox operational methods
preclude. I'm going to have to do at least an alternate Window object for
the SaveDBox module to use soon in any case. Getting rid of SaveDBox will
help reduce, if only slightly, demands on the RMA.
@
text
@d80 7
a86 7
#define Limits_Token           32   /* Length of any given Messages file token       S */
#define Limits_Message         256  /* Length of any given Messages file message     S */
#define Limits_TaskName        64   /* Length of the _TaskName message (U) - used    P */
                                    /* also for enumerating task names from the        */
                                    /* Task Manager and for the flex library (S)       */
#define Limits_StatusFormat    50   /* Length of the Page, Fetch, Process, Format,   S */
                                    /* and LinkTo messages                             */
d92 1
a92 1
#define Limits_Help            256  /* Maximum length of help text for any gadget    S */
d94 22
a115 22
#define Limits_Title           999  /* Browser window title bar                      S */
#define Limits_DisplayURL      999  /* URL bar or Open URL dialogue writable         S */
#define Limits_DisplayStats    999  /* Main status display field                     S */
#define Limits_DisplayBytes    20   /* Status byte counter display field             S */
#define Limits_DiallerStatus   16   /* Online time and dialler status messages       S */
#define Limits_DiallerLabel    16   /* Label on the dialler status display           S */
#define Limits_StatusLabel     16   /* Label on the main status display              S */
#define Limits_ToolActionIdent 256  /* ToolAction ident strings in the Toolbar       S */

#define Limits_NRangeIcons     10   /* For get_icon_list on a Number Range gadget    U */
#define Limits_EndManyLabel    64   /* EndManyLabel button text in Print dialogue    S */

#define Limits_AuthPrompt      256  /* Authorisation dialogue main display panel     S */
#define Limits_AuthUserWrit    256  /* Authorisation dialogue user name writable     S */
#define Limits_AuthPassWrit    256  /* Authorisation dialogue password writable      S */

#define Limits_FindWrit        128  /* Find dialogue main writable field             S */

#define Limits_Lower_Sheets    1    /* Limits on the Number Range gadgets for        D */
#define Limits_Upper_Sheets    100  /* filling in 'n' sheets or printing 'n' copies  D */
#define Limits_Lower_Copies    1    /* of a page, in the Print dialogue.             D */
#define Limits_Upper_Copies    1000 /*                                               D */
d120 5
a124 5
#define Limits_OS_SpriteName   13   /* Sprite name (plus terminator)                 U */
#define Limits_OS_FontHandles  256  /* Maximum number of active font handles         D */
#define Limits_OS_Pathname     8192 /* Maximum length of any given pathname, e.g.    P */
                                    /* the Choices file (U) or save dialogue           */
                                    /* pathnames (S).                                  */
d128 2
a129 2
#define Limits_URL             6144 /* Length of a URL (or URI) string               S */
#define Limits_Leafname        64   /* Length of a leaf name for app to app saves    S */
d131 1
a131 1
#define Limits_UserAgent       256  /* User agent string                             S */
d133 1
a133 1
#define Limits_FetchProgress   32   /* Fetch progress, if appending to status        U */
d135 2
a136 2
#define Limits_NamedAnchor     256  /* The string after a '#' in a URL               S */
#define Limits_Target          256  /* Window target name                            S */
d138 3
a140 3
#define Limits_FontName        128  /* The length of a RISC OS font name             S */
#define Limits_FaceName        64   /* The length of a browser typeface name         S */
#define Limits_FontSizes       7    /* The 7 font sizes for <FONT SIZE=...>          D */
d142 1
a142 4
#define Limits_SelectItems     1024 /* Number of items in a <SELECT> list            D */

#define Limits_Realm           192  /* The realm for authorisation                   S */
#define Limits_HostName        192  /* The host name for authorisation               S */
d144 2
d149 6
a154 6
#define Limits_Multi_UserName  20   /* User name for login                           S */
#define Limits_Multi_Password  11   /* Password for login                            S */
#define Limits_Multi_HomePage  256  /* Home page URL for user                        S */
#define Limits_Multi_Name      32   /* User's actual name                            S */
#define Limits_Multi_History   256  /* Pathname to save/load history file            S */
#define Limits_Multi_Hotlist   256  /* Pathname to save/load hotlist file            S */
d159 2
a160 2
#define Limits_Misc_AnimFrames 1024 /* The number of animation sprites allowed       D */
#define Limits_Misc_Bullets    128  /* The number of bullet sprites allowed          D */
@


1.3
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d129 1
@


1.2
log
@Odd problem with Entries file meant none got checked in last time...
@
text
@d97 1
a97 1
#define Limits_DisplayBytes    20   /* Status byte counter display field             U */
d111 5
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d15 135
a149 44
/*************************************************/
/* File   : Limits.h                             */
/* Purpose: Definitions relating to fundamental  */
/*          compile-time limitations of the app. */
/* Author : A.D.Hodgkinson                       */
/* History: 13-Nov-96: Created                   */
/*************************************************/

/* Footnote - where these define maximum string lengths; that */
/* length does not include the zero terminator, unless stated */
/* otherwise.                                                 */

#define MaxLstLen   32   /* Maximum length of a token in the Messages file    */
#define MaxMsgLen   480  /* Maximum length of the text returned by a          */
                         /* MessageTrans lookup in the Messages file          */

#define MaxPrgLen   40   /* Maximum length of the app's name for flex library */

#define MaxUrlLen   999  /* Maximum length of entries in the URL bar writable */
                         /* or Open URL dialogue box writable                 */
#define MaxDiaLen   16   /* Maximum length of dialler status display          */
#define MaxStaLen   999  /* Maximum length of status bar status display       */
#define MaxBytLen   20   /* Maximum length of status bar bytes display        */
#define UrlLabLen   16   /* Maximum length of URL writable label              */
#define DiaLabLen   16   /* Maximum length of dialler status label            */
#define StaLabLen   16   /* Maximum length of status display label            */
#define BytLabLen   16   /* Maximum length of byte counter label              */

#define MaxHelpLen  256  /* Maximum length of a help text message for gadgets */
                         /* where this text must be dynamically altered       */

#define MaxTiBLen   999  /* Maximum length of title bar string                */

#define MaxHstLen   256  /* History file default save pathname max length     */
#define MaxHotLen   256  /* As MaxHstLen but for the hotlist                  */
#define MaxPoILen   256  /* As MaxHstLen but for the post-in pathname         */
#define MaxPoOLen   256  /* As MaxPoILen but for post-out                     */

#define FontNameLen 64   /* Typeface name maximum length in FontManage.c      */
#define TypeNameLen 20   /* RISC OS font name maximum length in FontManage.c  */

#define MaxAuthDisp 256  /* Max length of display panel in authorisation dbox */
#define MaxAuthUser 256  /* Max length of user name in authorisation dbox     */
#define MaxAuthPass 256  /* Max length of password in authorisation dbox      */
d151 5
a155 1
#define MaxFindLen  128  /* Max length of entires in the Find dialogue box    */
@
