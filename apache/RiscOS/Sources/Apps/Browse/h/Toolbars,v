head	1.13;
access;
symbols
	Browse-2_16:1.13
	Browse-2_15:1.13
	Browse-2_14:1.13
	Browse-2_13:1.13
	Browse-2_12:1.13
	Browse-2_11:1.12
	Browse-2_10:1.12
	Browse-2_09:1.12
	ahodgkin_208_i4_2:1.12
	ahodgkin_208_i4:1.11
	ahodgkin_208_i3:1.11
	ahodgkin_208_i2:1.11
	ahodgkin_208_i1:1.11
	ahodgkin_207release:1.11
	ahodgkin_206release:1.11
	ahodgkin_205release:1.11
	ahodgkin_204release:1.11
	ahodgkin_202release:1.10
	ahodgkin_201release:1.10
	ahodgkin_200release:1.10
	ahodgkin_133beta:1.10
	ahodgkin_132beta:1.10
	ahodgkin_131beta:1.10
	ahodgkin_130beta:1.9
	ahodgkin_129:1.9
	ahodgkin_128beta:1.9
	ahodgkin_128alpha:1.9
	ahodgkin_127beta2:1.8
	ahodgkin_127beta:1.8
	ahodgkin_126beta:1.8
	ahodgkin_AW97patch:1.8
	ahodgkin_AW97:1.8;
locks; strict;
comment	@# @;


1.13
date	2006.03.13.22.06.20;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	2000.05.31.15.59.00;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	98.03.26.14.21.18;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	98.01.31.10.55.49;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	97.12.02.16.14.16;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.09.22.07.43.31;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.09.12.17.19.42;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.09.09.14.13.28;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.08.28.16.08.18;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.08.18.10.00.23;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.08.08.16.39.01;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.07.24.15.36.35;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.30.10;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.13
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Toolbars.h                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Toolbar related functions for the browser.        */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 21-Nov-1996 (ADH): Created.                       */
/*          25-Aug-1997 (ADH): Definitions imported from      */
/*                             TBEvents.h.                    */
/*          07-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_Toolbars__
  #define Browser_Toolbars__

  #include <kernel.h>
  #include <tboxlibs/wimp.h>
  #include <tboxlibs/toolbox.h>

  #include "Global.h"

  /* Button bar component IDs */

  #define ButtonBarHome                   0x00001 /* Go to home page                                     */
  #define ButtonBarBack                   0x00002 /* Return to previous page in history (if available)   */
  #define ButtonBarReload                 0x00003 /* Reload page                                         */
  #define ButtonBarStop                   0x00004 /* Stop any current fetch                              */
  #define ButtonBarForward                0x00005 /* Go to next page in history list (if available)      */
  #define ButtonBarAddToHotlist           0x00006 /* Add the URL to the Hotlist                          */
  #define ButtonBarViewHotlist            0x00007 /* View the hotlist                                    */
  #define ButtonBarViewResources          0x00008 /* View the resource list                              */
  #define ButtonBarLoadImages             0x00009 /* Load images (if they weren't loaded automatically)  */
  #define ButtonBarViewSource             0x0000a /* View the page source                                */
  #define ButtonBarSaveSource             0x0000b /* Save ancestor document source                       */
  #define ButtonBarPrint                  0x0000c /* Print the selected frame contents                   */
  #define ButtonBarGoTo                   0x0000d /* Go To button (allows entry of a URL)                */
  #define ButtonBarGo                     0x0000e /* Go (companion to above, jumps to URL)               */
  #define ButtonBarCancel                 0x0000f /* Cancel a current action                             */
  #define ButtonBarSaveAsText             0x00012 /* Save page as plain text                             */
  #define ButtonBarSaveAsDraw             0x00013 /* Save page as a Draw file                            */

  #define ButtonBarBistate                0x00010 /* The working gadget of a bistate group of 3 gadgets  */
  #define ButtonBarTristate               0x00011 /* The working gadget of a tristate group of 4 gadgets */

  #define ButtonBarMarkerBase             0x00080 /* Marker button component ID base number              */
  #define ButtonBarMarkerLimit            0x000ff /* Component ID limit (see Markers.h, MiscEvents.h)    */

  #define ButtonBarSpacer                 0x00100 /* Invisible gadget to mark height of bar              */
  #define ButtonBarBackground             0x00101 /* Background sprite gadget behind button bar          */

  /* Button bar event codes (keep in sync with any associated */
  /* component IDs - that way things are easier to remember). */

  #define EButtonBarHome                  0x00001
  #define EButtonBarBack                  0x00002
  #define EButtonBarReload                0x00003
  #define EButtonBarStop                  0x00004
  #define EButtonBarForward               0x00005
  #define EButtonBarAddToHotlist          0x00006
  #define EButtonBarViewHotlist           0x00007
  #define EButtonBarViewResources         0x00008
  #define EButtonBarLoadImages            0x00009
  #define EButtonBarViewSource            0x0000a
  #define EButtonBarSaveSource            0x0000b
  #define EButtonBarPrint                 0x0000c
  #define EButtonBarGoTo                  0x0000d
  #define EButtonBarGo                    0x0000e
  #define EButtonBarCancel                0x0000f
  #define EButtonBarSaveAsText            0x00012
  #define EButtonBarSaveAsDraw            0x00013

  #define EButtonBarBistate               0x00010
  #define EButtonBarTristate              0x00011

  /* URL bar component IDs */

  #define URLBarWrit                      0x00200 /* Writable gadget in the URL bar             */
  #define URLBarLabel                     0x00201 /* Label on writable gadget in URL bar        */
  #define URLBarHistoryMenuR              0x00202 /* History menu button (open to the right)    */
  #define URLBarHistoryMenuL              0x00203 /* History menu button (open to the left)     */
  #define URLBarDiallerStatus             0x00204 /* Dialler status display                     */
  #define URLBarDiallerStatusLabel        0x00205 /* Dialler status label button                */
  #define URLBarDiallerStatusCover        0x00206 /* Gadget covering the dialler status display */

  #define URLBarSpacer                    0x00300 /* Invisible gadget to mark height of bar     */
  #define URLBarBackground                0x00301 /* Background sprite gadget behind URL bar    */

  /* URL bar event codes */

  #define EURLBarToggleHistory            0x00201 /* Acts as if the history menu popup was clicked on; checks to see if */
                                                  /* the MenuR gadget is there, then the MenuL, defaults to MenuR. Will */
                                                  /* close the menu if it is already open.                              */
  #define EURLBarClearURL                 0x003ff /* Clear the URL writable - as with Ctrl+U (must have input focus).   */

  /* Status bar component IDs (there are no event codes) */

  #define StatusBarAnimBase               0x00400 /* Static component of status bar animation   */
  #define StatusBarAnimAnim               0x00401 /* Animated component of status bar animation */
  #define StatusBarStatus                 0x00402 /* Main status line                           */
  #define StatusBarStatusCover            0x00403 /* Gadget covering the status line            */
  #define StatusBarStatusLabel            0x00404 /* Main status line label                     */
  #define StatusBarProgress               0x00405 /* Fetch progress display                     */
  #define StatusBarProgressCover          0x00406 /* Gadget covering the progress display       */

  #define StatusBarSpacer                 0x00500 /* Invisible gadget to mark height of bar     */

  /* Magic number definitions */

  #define InternalBottomLeft 1
  #define InternalTopLeft    2
  #define ExternalBottomLeft 4
  #define ExternalTopLeft    8

  /* The range of messages that can be in the status bar. */
  /* These are defined in order of priority, the first    */
  /* having the lowest. Items which decay are not worked  */
  /* out by toolbars_update_status, and must be set       */
  /* explicitly with toolbars_update_specific_status.     */

  typedef enum status_type
  {
    Toolbars_Status_NoType = -1, /* To indicate no current status at all */
    Toolbars_Status_Ready,       /* Just 'ready', no other info          */
    Toolbars_Status_Viewing,     /* Viewing '(URL / title)'              */
    Toolbars_Status_Formatting,  /* Formatting '(URL)'                   */
    Toolbars_Status_Processing,  /* Processing '(URL)'                   */
    Toolbars_Status_GetPics,     /* Number of images being fetched       */
    Toolbars_Status_Fetching,    /* Fetching '(URL)'                     */
    Toolbars_Status_Connected,   /* Have just connected to server        */
    Toolbars_Status_SentReq,     /* Have sent request to server          */
    Toolbars_Status_Responded,   /* Server's initial response received   */
    Toolbars_Status_Redirected,  /* Browser redirected to new location   */
    Toolbars_Status_Connecting,  /* Trying to connect to a server        */
    Toolbars_Status_PlugIn,      /* Showing a Plug-In message            */
    Toolbars_Status_LinkTo,      /* Showing a link to something (decays) */
    Toolbars_Status_Help         /* Showing interactive help (decays)    */
  }
  status_type;

  /* Function prototypes */

  ObjectId          toolbars_get_upper              (const browser_data * restrict b);
  ObjectId          toolbars_get_lower              (const browser_data * restrict b);

  void              toolbars_set_presence           (browser_data * b, unsigned int flags);
  void              toolbars_move_gadgets           (browser_data * p);

  int               toolbars_animation              (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
  int               toolbars_animation_drift        (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
  int               toolbars_animate_slow           (int eventcode, WimpPollBlock * b, IdBlock * idb, void * handle);

  void              toolbars_hide_cgi               (char * url);
  void              toolbars_hide_internal          (char * iurl);

  _kernel_oserror * toolbars_update_status          (browser_data * b, status_type type);
  _kernel_oserror * toolbars_cancel_status          (browser_data * b, status_type type);
  _kernel_oserror * toolbars_cancel_all             (browser_data * b);
  int               toolbars_timeout_status         (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
  _kernel_oserror * toolbars_remove_status_item     (browser_data * b, browser_data * ancestor);

  void              toolbars_update_progress        (browser_data * b);
  void              toolbars_update_url             (browser_data * b);
  _kernel_oserror * toolbars_update_dialler_time    (browser_data * b);
  _kernel_oserror * toolbars_update_dialler_status  (browser_data * b);

  int               toolbars_button_height          (const browser_data * restrict b);
  int               toolbars_url_height             (const browser_data * restrict b);
  int               toolbars_status_height          (const browser_data * restrict b);

  _kernel_oserror * toolbars_set_button_states      (browser_data * b);
  _kernel_oserror * toolbars_set_all_button_states  (void);

  void              toolbars_merged_to_status       (browser_data * b, ObjectId t);
  void              toolbars_merged_to_url          (browser_data * b, ObjectId t);
  void              toolbars_set_bistate_state      (browser_data * b, ObjectId t, int state);
  void              toolbars_set_tristate_state     (browser_data * b, ObjectId t, int state);

#endif /* Browser_Toolbars__ */
@


1.12
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d159 2
a160 2
  ObjectId          toolbars_get_upper              (browser_data * b);
  ObjectId          toolbars_get_lower              (browser_data * b);
d183 3
a185 3
  int               toolbars_button_height          (browser_data * b);
  int               toolbars_url_height             (browser_data * b);
  int               toolbars_status_height          (browser_data * b);
@


1.11
log
@This is NOT a 'final' version of anything in particular. I'm checking it
in as I'm about to start playing around with low level window handling
(as part of the thing mentioned at the bottom of this log) - this could
screw things up quite badly if it goes wrong! =8*P

Consequently, I advise you not to check this out over your working sources,
and preferably not to check this out at all.

Markers system - events defined in MiscEvents.h will make Browse remember
where it is on the page. This position can be jumped back to later.
Some builds will have defined keyboard shortcuts Ctrl+Shift+F5 through
F8 to set a marker, and Ctrl+F5 through F8 to jump to a marker.

The front-end for the above now has gadgets 0x80 upwards on the Toolbar or
a set of menus (see Menus.h). Noticed an omission in copy_toolaction_info()
(didn't copy the gadget state) in passing; fixed.

browser_top_line() now works properly, as part of the above, but it'll be
slower than before. If flagged to only find a complete line, it'll do just
that, but whereas before this would require any tables that it looked
inside to be wholly visible, tables can now be partially visible and have
lines inside that are fully visible. This should help the Find function
too. There is a new call, browser_top_line_offset, which works as
browser_top_line but also returns a vertical scroll offset in the found
line (used for more accurate marker position). browser_bottom_line[_r]
turn out to never be used, even by the keyboard control routines, so they
have been removed from Browser.c (rather than spend a lot of time and
effort fixing them).

browser_show_token erroneously subtracted 1 from a particular coordinate
when calculating the y scroll position, which could lead to single pixel
page creep using the markers system. Corrected.

The View Resources button (see Toolbars.h) has been finally implemented,
insofar as it fetches the resources file to the current browser page (or
to a new window if Adjust is used, Controls file settings permitting).

menus_toggle_bars did not take account of the toolbar lower window border
edge correctly. It does now.

The reformatter has a prototype system to keep the vertical page position
when reformatting. This was coded about 5 minutes ago, and is not likely
to be reliable...
@
text
@d15 181
a195 168
/***************************************************/
/* File   : Toolbars.h                             */
/*                                                 */
/* Purpose: Toolbar-related functions for the      */
/*          browser.                               */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 21-Nov-96: Created.                    */
/*          25-Aug-97: Definitions imported from   */
/*                     TBEvents.h.                 */
/***************************************************/

/* Button bar component IDs */

#define ButtonBarHome                   0x00001 /* Go to home page                                     */
#define ButtonBarBack                   0x00002 /* Return to previous page in history (if available)   */
#define ButtonBarReload                 0x00003 /* Reload page                                         */
#define ButtonBarStop                   0x00004 /* Stop any current fetch                              */
#define ButtonBarForward                0x00005 /* Go to next page in history list (if available)      */
#define ButtonBarAddToHotlist           0x00006 /* Add the URL to the Hotlist                          */
#define ButtonBarViewHotlist            0x00007 /* View the hotlist                                    */
#define ButtonBarViewResources          0x00008 /* View the resource list                              */
#define ButtonBarLoadImages             0x00009 /* Load images (if they weren't loaded automatically)  */
#define ButtonBarViewSource             0x0000a /* View the page source                                */
#define ButtonBarSaveSource             0x0000b /* Save ancestor document source                       */
#define ButtonBarPrint                  0x0000c /* Print the selected frame contents                   */
#define ButtonBarGoTo                   0x0000d /* Go To button (allows entry of a URL)                */
#define ButtonBarGo                     0x0000e /* Go (companion to above, jumps to URL)               */
#define ButtonBarCancel                 0x0000f /* Cancel a current action                             */
#define ButtonBarSaveAsText             0x00012 /* Save page as plain text                             */
#define ButtonBarSaveAsDraw             0x00013 /* Save page as a Draw file                            */

#define ButtonBarBistate                0x00010 /* The working gadget of a bistate group of 3 gadgets  */
#define ButtonBarTristate               0x00011 /* The working gadget of a tristate group of 4 gadgets */

#define ButtonBarMarkerBase             0x00080 /* Marker button component ID base number              */
#define ButtonBarMarkerLimit            0x000ff /* Component ID limit (see Markers.h, MiscEvents.h)    */

#define ButtonBarSpacer                 0x00100 /* Invisible gadget to mark height of bar              */
#define ButtonBarBackground             0x00101 /* Background sprite gadget behind button bar          */

/* Button bar event codes (keep in sync with any associated */
/* component IDs - that way things are easier to remember). */

#define EButtonBarHome                  0x00001
#define EButtonBarBack                  0x00002
#define EButtonBarReload                0x00003
#define EButtonBarStop                  0x00004
#define EButtonBarForward               0x00005
#define EButtonBarAddToHotlist          0x00006
#define EButtonBarViewHotlist           0x00007
#define EButtonBarViewResources         0x00008
#define EButtonBarLoadImages            0x00009
#define EButtonBarViewSource            0x0000a
#define EButtonBarSaveSource            0x0000b
#define EButtonBarPrint                 0x0000c
#define EButtonBarGoTo                  0x0000d
#define EButtonBarGo                    0x0000e
#define EButtonBarCancel                0x0000f
#define EButtonBarSaveAsText            0x00012
#define EButtonBarSaveAsDraw            0x00013

#define EButtonBarBistate               0x00010
#define EButtonBarTristate              0x00011

/* URL bar component IDs */

#define URLBarWrit                      0x00200 /* Writable gadget in the URL bar             */
#define URLBarLabel                     0x00201 /* Label on writable gadget in URL bar        */
#define URLBarHistoryMenuR              0x00202 /* History menu button (open to the right)    */
#define URLBarHistoryMenuL              0x00203 /* History menu button (open to the left)     */
#define URLBarDiallerStatus             0x00204 /* Dialler status display                     */
#define URLBarDiallerStatusLabel        0x00205 /* Dialler status label button                */
#define URLBarDiallerStatusCover        0x00206 /* Gadget covering the dialler status display */

#define URLBarSpacer                    0x00300 /* Invisible gadget to mark height of bar     */
#define URLBarBackground                0x00301 /* Background sprite gadget behind URL bar    */

/* URL bar event codes */

#define EURLBarToggleHistory            0x00201 /* Acts as if the history menu popup was clicked on; checks to see if */
                                                /* the MenuR gadget is there, then the MenuL, defaults to MenuR. Will */
                                                /* close the menu if it is already open.                              */
#define EURLBarClearURL                 0x003ff /* Clear the URL writable - as with Ctrl+U (must have input focus).   */

/* Status bar component IDs (there are no event codes) */

#define StatusBarAnimBase               0x00400 /* Static component of status bar animation   */
#define StatusBarAnimAnim               0x00401 /* Animated component of status bar animation */
#define StatusBarStatus                 0x00402 /* Main status line                           */
#define StatusBarStatusCover            0x00403 /* Gadget covering the status line            */
#define StatusBarStatusLabel            0x00404 /* Main status line label                     */
#define StatusBarProgress               0x00405 /* Fetch progress display                     */
#define StatusBarProgressCover          0x00406 /* Gadget covering the progress display       */

#define StatusBarSpacer                 0x00500 /* Invisible gadget to mark height of bar     */

/* Magic number definitions */

#define InternalBottomLeft 1
#define InternalTopLeft    2
#define ExternalBottomLeft 4
#define ExternalTopLeft    8

/* The range of messages that can be in the status bar. */
/* These are defined in order of priority, the first    */
/* having the lowest. Items which decay are not worked  */
/* out by toolbars_update_status, and must be set       */
/* explicitly with toolbars_update_specific_status.     */

typedef enum status_type
{
  Toolbars_Status_NoType = -1, /* To indicate no current status at all */
  Toolbars_Status_Ready,       /* Just 'ready', no other info          */
  Toolbars_Status_Viewing,     /* Viewing '(URL / title)'              */
  Toolbars_Status_Formatting,  /* Formatting '(URL)'                   */
  Toolbars_Status_Processing,  /* Processing '(URL)'                   */
  Toolbars_Status_GetPics,     /* Number of images being fetched       */
  Toolbars_Status_Fetching,    /* Fetching '(URL)'                     */
  Toolbars_Status_Connected,   /* Have just connected to server        */
  Toolbars_Status_SentReq,     /* Have sent request to server          */
  Toolbars_Status_Responded,   /* Server's initial response received   */
  Toolbars_Status_Redirected,  /* Browser redirected to new location   */
  Toolbars_Status_Connecting,  /* Trying to connect to a server        */
  Toolbars_Status_PlugIn,      /* Showing a Plug-In message            */
  Toolbars_Status_LinkTo,      /* Showing a link to something (decays) */
  Toolbars_Status_Help         /* Showing interactive help (decays)    */
}
status_type;

/* Function prototypes */

ObjectId          toolbars_get_upper              (browser_data * b);
ObjectId          toolbars_get_lower              (browser_data * b);

void              toolbars_set_presence           (browser_data * b, unsigned int flags);
void              toolbars_move_gadgets           (browser_data * p);

int               toolbars_animation              (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
int               toolbars_animation_drift        (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
int               toolbars_animate_slow           (int eventcode, WimpPollBlock * b, IdBlock * idb, void * handle);

void              toolbars_hide_cgi               (char * url);
void              toolbars_hide_internal          (char * iurl);

_kernel_oserror * toolbars_update_status          (browser_data * b, status_type type);
_kernel_oserror * toolbars_cancel_status          (browser_data * b, status_type type);
_kernel_oserror * toolbars_cancel_all             (browser_data * b);
int               toolbars_timeout_status         (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
_kernel_oserror * toolbars_remove_status_item     (browser_data * b, browser_data * ancestor);

void              toolbars_update_progress        (browser_data * b);
void              toolbars_update_url             (browser_data * b);
_kernel_oserror * toolbars_update_dialler_time    (browser_data * b);
_kernel_oserror * toolbars_update_dialler_status  (browser_data * b);

int               toolbars_button_height          (browser_data * b);
int               toolbars_url_height             (browser_data * b);
int               toolbars_status_height          (browser_data * b);

_kernel_oserror * toolbars_set_button_states      (browser_data * b);
_kernel_oserror * toolbars_set_all_button_states  (void);

void              toolbars_merged_to_status       (browser_data * b, ObjectId t);
void              toolbars_merged_to_url          (browser_data * b, ObjectId t);
void              toolbars_set_bistate_state      (browser_data * b, ObjectId t, int state);
void              toolbars_set_tristate_state     (browser_data * b, ObjectId t, int state);
@


1.10
log
@Check for WindowManager 3.97 and ensure Unicode$Path is set in all
!Run[D] files, don't set the Alias$@@PrintType_FF4 variable, and updated
Customer build ROM obey file variants. Various other changes to
the Run files for new module versions, updated paths to support
new positions of choices, hotlist and histories (see later), etc.

!Sprites[22] files hold small !app icons for some variants, and
an ic_browse sprite. Some variants now have a Sprites and Sprites22
file instead of just Sprites, with the former containing various
mode 12 or 15 specific sprites.

Text files dragged to the URL writable are treated as ANT URL files. This
relies on URLBarWrit (Toolbars.h) being a unique ID, which it should be,
but beware of the Hotlist and Choices numberspaces...

INPUT TYPE=BUTTON supported. Form items without a FORM tag are now shown
(as MSIE 4, but not NN 4).

'*', '-', '@@', '_' and '.' are not escaped when submitting forms now. The
Web interface to the IMDb now works.

INPUT TYPE=HIDDEN items will not affect the line height anymore - so
http://www.hotmail.com/ now has correctly aligned writable icons, for
example. Similarly, TAG_FORM and TAG_FORM_END items could push up
line height and don't anymore.

HRs with a specified pixel width will now influence the size of a table
cell (they didn't before).

BRs now checked by tagno field when the browser needs to know something
was an actual BR tag rather than just a line break signal, and by the
style bit entry when only the indication of a line break is required.

Table widths of 0 or 0% are ignored.

Trace.c updated to report height and background fields in a table_stream.

fm_putsl() writes a terminator into the string; the Forms.c routines were
calling this for displaying INPUT TYPE=PASSWORD fields using the FE_PassCode
literal string (a line of stars). This write into a read only data area
would make the debugger fault the access. A local char array is now used
instead, to get round this (note the use of var[]=literal rather than
var[sizeof(literal)]; strcpy(var, literal) due to some weird compiler bug
that copies the wrong thing into 'var' under some (undefined...)
circumstances).

Text areas don't scroll back to the top line when clicked in anymore;
single line writables don't scroll back to the left either. When
reentering a text area from 'above', the caret appears at the top line
rather than 'somewhere further down'...

ARROWS_MOVE_OUT compile time option at the top of Forms.c defines whether
you must press Tab/Shift+Tab to move between writable fields in forms or
if up/down will drop out of them, though if keyboard control is on this
is enforced (or you get trapped inside the form!).

urlutils_filetype_from_url now uses MimeMap module.

If fetcher is told a page is text, it'll check for a filename extension and
may choose to use this instead (e.g. it may find it's HTML instead). This
is to try and get around duff servers... (e.g. http://www.batalarms.co.uk/).

Save dialogues shouldn't flicker when options that don't change the
filetype are selected (before, the draggable sprite was always reset for
each selection). Noticed the erroneous setting of a static variable in
SaveFile.c by a call to this by SaveObject.c, and so added a flag to
savefile_set_filetype to deal with this - would have been possible to get
the wrong filetype sent to applications or at best the wrong filetype
sprite in the dialogue without that.

The caret shouldn't jump out of a form back to the URL writable if the page
reformats now.

Table background colours now supported (as in the colour you see in the
border space if the cellspacing is large enough; this is as in MSIE, not
as in Navigator). Drawfile output routines updated accordingly.

Corrected erroneous use of wimpt_dx() / wimpt_dy() in a couple of places
in Images.c, which meant that (say) 1x1 images didn't work correctly in
medium resolution display modes.

Now have support for save as text (component ID and event 0x12) and save
as Draw (component ID and event 0x13) buttons. Dubious conditions for
greying and ungreying the print, save source and view source buttons and
menu options sorted out as part of implementing the same for the two new
buttons; added greying out of their associated menu items in passing.

Turned kerning on in draw file objects (does mean a rather heinous
increase in file size, but this is the only way to ensure the draw file
matches the visible page).

Comments before functions in SaveDraw.c are now complete and up to date.

Image and visit histories now generate a crude hash number to speed up
searching for items. It does give a speed increase, though it's a
disappointingly small one.

Issue of left/right margins and cellpaddings sorted out. Now have
redraw_left/right_margin for finding out the basic gap you must leave.
redraw_left/right_gap then gives any extra indentation for LI, BLOCKQUOTE
or whatever. The last two can be subtracted from the display width to
get an available page width for any section of text. Note that
redraw_left_gap replaces redraw_margin. The redraw_start_x function
uses the above to work out where a line's left hand edge should be,
taking account of left/right/centre alignment. HRs have been fixed now
(they were quite broken in v1.30, I think) based on this new model and
the behaviour of MSIE/NN 4.

Fixed width of cells with no contents - cell padding values wouldn't
have worked properly as the reformatter returns 0 rather than the left
hand margin size if given no stream.

Removed FM_Absolute flags for Font_Paint (spotted by DBrown) - sets bit
2, which is reserved...?

IMG width and height in % terms now works correctly; a % of available
width (after margins and indents) or height on the main page or for
a table cell, if the image lies in one. Because of the chicken-and-egg
problem with the latter, the cell must specify a width and/or height
for things to work properly. If this is not done, you'll usually end
up with a 1:1 scaled image (as in Navigator 4, rather than ending up
with no image or even no cell (!), as in MSIE 4).

HEIGHT attribute on a TABLE tag is supported, but only in a crude
fashion; the extra height (if there is any) is distributed over the
rows in a linear fashion. This is probably all you have to do in
practice, but I haven't checked. To maintain a notion of min/max
height as well as width would of course require a great deal more
work...

If using client pull to reload a page with a fragment ('...#name')
specified, then the reload wouldn't work on the same page; it'd just
jump to the fragment position. This won't happen if b->reloading is
set now (so works in conjunction with client pull on the same page
forcing a non-cached fetch). Similarly, if POSTing to such a URL,
a fetch will proceed (both these fixes done originally for
http://jupiter.beseen.com/chat/rooms/g/1678/).

browser_inherit split to browser_inherit and browser_inherit_post_data;
the code for the latter didn't clear any post_data in the child before
copying from the parent either, and could cause flex errors (now fixed).

Res file for Ursula ('Desktop' Browse) build tweaked - bits in the
font choices dialogue renamed, and button bar rearranged to hold the
new Save As Draw button. Other builds have had Save As Draw and
Save As Text buttons added, or not, depending upon availability of
suitable sprites, required UI simplicity, etc.

Now have:

  Browse$ChoicesFile
  Browse$ControlsFile
  Browse$ChoicesSave
  Browse$ControlsSave

(the last two are new) for loading and saving of the Choices or Controls
files. If unset, <App$Dir>.Choices or <App$Dir>.Controls will be set.
E.g., you could set Browse$ChoicesFile to be:

  <App$Dir>.Choices,Choices:WWW.(app).Choices

for loading and

  <Choices$Write>.WWW.(app).Choices

for saving. (The browser never saves Controls at the moment, so the
relevant variable above isn't effectively implemented, but could be
in future). Similarly, to support asymetric loading/saving of the Hotlist,
there are HotlistSave, HistorySave and ImageHistorySave entries in Choices
to complement HotlistPath, HistoryPath and ImageHistoryPath (which are used
for loading). save_save_choices will create directories as needed to obtain
the given path (and has also been fixed in various areas that hadn't been
tested out until now; e.g. zero termination of the AppName$ChoicesFile
variable expansion...). !Run[D] files updated appropriately.

Table widthing code rewritten. Slower, but a lot better on the whole.
Still has some problems - still needs a final 'make sure nothing is
below minimum width' scan, which it should be possible to do without.
No time to fix this at present!

The reformatter will now 'glue together' an LI token followed by any
non-LI token; so a bullet point followed by an item should not be able to
have a line break inserted after the bullet because of very tight width
constraints (it could before - yuk...).

'about:' brings up a page about the browser and any Plug-Ins, as with
Navigator (for example).

URI files support titles, as per spec. version 8. Saving a current
location to the Hotlist will thus give a sensible title now (unless
you're in a frame, so there's no title to get...). Of course, v1.00
files without a title still work.

Note that NOBR is *not* supported in this build and this combined with
the new table widther may cause problems on some sites (e.g. Microsoft's
home page!).
@
text
@d51 3
@


1.9
log
@Implemented Message_PlugIn_ReshapeRequest, Message_PlugIn_Status and
Message_PlugIn_Busy. Plug-in code more robust when given invalid
browser instance handles by the plug-in.

Line spacing is now calculated on the basis of the normal style base serif
font, with all other fonts being forced into that line height. This does
mean that an unusually tall (say) sans serif font may get clipped. It
appears to be the only way to get around wildly different baseline
depths returned from the font metrics - you can't work out line spacing
based on each different font style; the line spacing will vary.

Table heighting (as opposed to widthing...) improved considerably; rowspan
can no longer cause very tall cells in odd places. Having trouble getting
rid of the single pixel breaks between vertically adjacent cells, though
I've not tried too hard. Widthing, though, seems fairly badly broken at
present... :-/

Set/clear of page_is_text flag made more robust (it looked as though there
was the potential for this to get stuck in a set state, though I've never
see the front-end behave in a manner which indicates this is the case).
The reformatter will now decrease leading if this flag is set (plain text
pages look daft with a line spacing that is OK for 'rich' text pages).
No reformatting is done if the page width changes by dragging on the
resize icon, though toggle size / full screen will still reformat even
if the contents are only text (browser needs to sort out various width
flags at this point).

Cut down on excessive redrawing when reformatting due to a change in
window dimensions is not done. If display_width hasn't changed, then no
redraw is needed. If this causes redraw problems, then whatever is
changing display_width needs investigating. It shouldn't be kludged
(basically) by forcing a redraw instead of a reformat.

TT/PRE/etc. text can now have a non-100% aspect ratio. 80-90% looks
best (ArcWeb, for example, uses 86%). New option 'TTAspect' in
the Choices files.

Debug builds link to a non-debug Unicode library now; stops stderr
being dumped to the bottom left of the screen if you've not redirected
it in the Run file.

RISC OS 3.1 seems to need more initial WimpSlot than later OS versions.
The 64 deep nested table set gives a 'No stack for trap handler' error
(which it really means in this case!) without 800K, even though 3.71
is happy with just 640K. So, the !Run file checks if Boot$OSVersion
is exactly 300, 310 or 311, and sets the WimpSlot accordingly.

!Run[D] files now require latest fetcher module versions (URL 0.21,
File 0.31, HTTP 0.58).
@
text
@d45 2
d72 2
@


1.8
log
@Now working on source merged with Kevin Bracey's internationalisation
support. UNIFONT is undefined in the Make File for now. All Res and
Choices files updated appropriately.

Having sorted out the old Choices and Messages to form Choices, Controls
and Messages, this build has had the same cleaning up done internally.
This includes greater consistency in naming schemes and the removal of
the inconsitent choices items - e.g. Choices file entries saying 'delay
images' and 'plain backgrounds' where internally all the flags say 'show
images' and 'show backgrounds'. ChoiceDefs.h and CtrlDefs.h added to
clarify the meaning of some fields, though usage of these is not 100%
in the source (there are cases where parameters are passed through to
functions as ints, and those functions still check these against hard
coded values rather than the #define stuff).

Fetcher status return bits (connected, sent request, etc.) now reflected
in status bar. Progress during fetchs to files are reported by %, where
the size of the object is known. Exceeding 100% drops back to a byte
counter, in case the estimated size was wrong. The progress counter
may be updated after specific delays, rather than 'as often as possible',
to reduce flicker (as requested by D.Brown some time ago).

I've done a small rewrite of the fetch prioritisation scheme in FetchPage.c;
how well this performs in general use across different processor speeds
remains to be tested, but certainly it has some advantages. For each small
fetch window before the rewrite, a 4cs tight loop was entered - this gave a
noticable and substantial drain to the Desktop performance if more than one
was opened. Now, several can be up at once with little hit. The actual file
fetch is on half the priority it was before, with all others taken back
just a bit - e.g. from 20cs per poll to 15cs per poll for flat out
reformatting. You don't seem to lose much time on the format in practice,
and the Desktop feels quite a bit lighter at the same time. There's the
potential for smoother frameset loading in this scheme, too.

When Shift+Clicking on a link meant you still fetched inside the main
browser window, several fetches could occur in a frameset - one per frame.
However, now that you can only do this by clicking on a link that leads to
non-displayable data - or by turning off the small fetch windows by
setting UseSmall to 'no' in Choices - a bug where fetchpage_preprocessed
would stop such fetches as new ones were started was revealed.
The API to frames_abort_fetching has now been extended to include a
'stop file spooling too' flag, allowing a fix to be made by having
fetchpage_preprocess's calls not set this (and it doesn't check the
savelink flag is unset before proceeding, since frames_abort_fetching
does that implicitly now).

Had left the RAM transfer buffer at 16 bytes (from testing) accidentally...
Oops. Upped it to 4K. In addition, when loading data by RAM transfer,
the browser didn't notice if a RAMFetch bounced during the transfer. It
would be treated as a 'first' RAMFetch bounce, basically, and try to go to
file transfer - oops. Fixed.
@
text
@d133 1
@


1.7
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d128 5
d155 1
@


1.6
log
@First a minor warning - the various Res files are out of sync in this build.
Only the Browse resources are currently valid.

Added Utils.Icons - has a few archives inside containing the resources
(well, some of them) used to build various UI sprites for various builds.
Archived because these are unlikely to change much, and putting them on
CVS was a move to, well, archive the stuff...

SaveDBox objects vanquished and requirements in !Run[D] files removed. The
data save code fits much more neatly in amongst the data load protocol
stuff now (with the slight exception of having to split the SaveObject
source into SaveObject and SaveFile - the former handles multiple persistent
dialogues for Shift+Click on links and the like, the latter handles 'one at
a time' transient dialogues for save source and similar). Export Link is now
supported, too, and writes a 'proper' version URI file. You'll find that
double-clicking on old URI files will work as the URI handler picks them up,
whilst new version ones don't; however, dragging onto the browser will only
work with new version files. Note that support for saving and loading URL
files (ANT suite stuff) is present too, so old URI files can be typed as URL
files if you want to keep them working without modification - the URI
handler itself will hopefully support the defined URI file format soon;
double-clicking on old URI files will stop working at that point. Note
there are *lots* of changes in every Res file to support all this. This may
all seem a bit pointless to some, but the changes do in fact make it very
easy to add new save dialogues all over the place. Certainly much easier
than with the previous system, anyway. In fact, post script, image
'save as sprite' took about half an hour, which I hope proves the worth
of the new system.

Merged in newer hotlist code with support for drag cancelling with Escape
(all relevant Res files appropriately updated) and cancelling scrolling
when you've reached the window scroll limit. Had to move some of the
Wimp message handling stuff to the central Protocols source, as clashes
were occuring, and also the hotlist routines were using independent saving
code - a lot of duplicated effort. This was fair enough as at the time the
Hotlist code was written, the Save code couldn't be used in the way it is
now.

New Save Source and Print buttons on the toolbar of some builds.

Phoenix Sprites file made more efficient - the Acorn base section has been
split from the animated upper region. Browse build has a new grey fade
sprite at the back, which is less grainy than the previous one and only
uses 16 colours (with a 16 greyscale palette).

Not really a bug, bug the routine to start an image fetch for INPUT
TYPE=IMAGE forms items only did so if the src field (or equivalent, for
this tag type) was non-NULL. In fact, you should always call image_new_image
and let that handle the rest, otherwise other sections of the code will fail
as they try to obtain an image number for a given HStream and get -1 back.
This problem only generally manifested itself when loading an HTML file to
the browser straight from an application, as many src fields become NULL
when the relativisation routines find nothing to relativise to...

Authentication got broken somewhere along the line - this has been fixed
(in HTMLLib and the browser).

Ctrl+Click on a cross referenced image updates *all* copies, not just the
one with the image data attached.

Next big step: Rip up TBEvents.h and rebuild that whole approach somewhat.
To all those working on the code, my apologies but this means all Res files
will receive a very large number of alterations and there will be extensive
code changes too (mostly naming convention stuff), in more or less all
source files. I am endeavouring to ensure that the new numberspace
convention does not clash with the work being done by Kevin on
internationalisation.
@
text
@d28 1
a28 1
/* URL bar definitions */
d30 75
a104 61
#define DisplayURL         0x000b /* URL display / writable                             */
#define DisplayMenu        0x000c /* History menu next to URL writable                  */
#define DisplayMLeft       0x3201 /* History menu button object, to pop menu up to left */
#define URLSpacer          0x000d /* Invisible icon to mark height of bar               */
#define DiallerStatus      0x0012 /* Display field for dialler status (optional gadget) */
#define DiallerCover       0x0013 /* Gadget covering dialler display                    */
#define DiallerLabel       0x0014 /* Label on dialler display                           */

/* Button bar definitions */

#define ButtonHome         0x0000 /* Go to home page                                    */
#define ButtonBack         0x0001 /* Return to previous page in history (if available)  */
#define ButtonReload       0x0002 /* Reload page                                        */
#define ButtonStop         0x0003 /* Stop any current fetch                             */
#define ButtonForward      0x0004 /* Go to next page in history list (if available)     */
#define ButtonAddHot       0x0005 /* Add the URL to the Hotlist                         */
#define ButtonViewHot      0x0006 /* View the hotlist                                   */
#define ButtonViewRes      0x0007 /* View the resource list                             */
#define ButtonLoadImg      0x0008 /* Load images (if they weren't loaded automatically) */
#define ButtonViewSrc      0x0009 /* View the page source                               */
#define ButtonSpacer       0x000E /* Invisible icon to mark height of bar               */
#define ButtonGoTo         0x000F /* Go To button (allows entry of a URL)               */
#define ButtonGo           0x0010 /* Go (companion to above, jumps to URL)              */
#define ButtonCancel       0x0011 /* Cancel a current action                            */
#define ButtonBi           0x0015 /* The working gadget of a bistate group of 3         */
#define ButtonTri          0x0016 /* The working gadget of a tristate group of 4        */
#define ButtonSaveSrc      0x0017 /* Save ancestor document source                      */
#define ButtonPrint        0x0018 /* Print the selected frame contents                  */

/* (Button bar events) */

#define EButtonHome        0x0200
#define EButtonBack        0x0201
#define EButtonReload      0x0202
#define EButtonStop        0x0203
#define EButtonForward     0x0204
#define EButtonAddHot      0x0205
#define EButtonViewHot     0x0206
#define EButtonViewRes     0x0207
#define EButtonLoadImg     0x0208
#define EButtonViewSrc     0x0209
#define EButtonGoTo        0x020A /* Go To button (allows entry of a URL).            */
#define EButtonGo          0x020B /* Go (companion to above, jumps to URL).           */
#define EButtonCancel      0x020C /* Cancel a current action.                         */

#define EBiStateKeyed      0x020D /* Bistate button to be activated [from keyboard].  */
#define ETriStateKeyed     0x020E /* Tristate button to be activated [from keyboard]. */

#define EButtonSaveSrc     0x020F
#define EButtonPrint       0x0210

/* Status bar definitions */

#define DisplayBase        0x3100 /* Animation base (static) sprite       */
#define DisplayAnim        0x3101 /* Animation main (moving) sprite       */
#define DisplayStats       0x3102 /* Main status display field            */
#define DisplayBytes       0x3103 /* Byte counter display field           */
#define StatusSpacer       0x3104 /* Invisible icon to mark height of bar */
#define StatsCover         0x3105 /* Gadget covering status display       */
#define BytesCover         0x3106 /* Gadget covering bytes display        */
#define StatusLabel        0x3107 /* Label on status display              */
@


1.5
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d54 4
a57 2
#define ButtonBi           0x0015 /* The working gadget of a bistate group of 3.        */
#define ButtonTri          0x0016 /* The working gadget of a tristate group of 4.       */
d77 3
@


1.4
log
@Odd problem with Entries file meant none got checked in last time...
@
text
@d24 2
d27 59
@


1.3
log
@Checking in mostly because its Friday... Quite a few little bug fixes
(adding up to a greater whole), which include removal of the dastardly
'invalid image number' errors that trace builds would raise from time to
time. Frame highlights are now better controlled (releaseably so).
Generally, this build represents the first genuinely promising version
of the browser for quite some time, despite the known library problems
with comment handling etc.
@
text
@d17 1
d19 2
a20 1
/*          browser                                */
d22 2
a23 1
/* History: 21-Nov-96: Created                     */
@


1.2
log
@Altered dialler status reporting to be more efficient (only installs the null handler when it needs the online time)
@
text
@d55 1
a55 1
void              toolbars_set_presence           (ObjectId o, unsigned int flags);
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d72 2
a73 1
_kernel_oserror * toolbars_update_dialler         (browser_data * b);
@
