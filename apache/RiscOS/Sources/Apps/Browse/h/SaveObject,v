head	1.4;
access;
symbols
	Browse-2_16:1.4
	Browse-2_15:1.4
	Browse-2_14:1.4
	Browse-2_13:1.4
	Browse-2_12:1.4
	Browse-2_11:1.4
	Browse-2_10:1.4
	Browse-2_09:1.4
	ahodgkin_208_i4_2:1.4
	ahodgkin_208_i4:1.3
	ahodgkin_208_i3:1.3
	ahodgkin_208_i2:1.3
	ahodgkin_208_i1:1.3
	ahodgkin_207release:1.3
	ahodgkin_206release:1.3
	ahodgkin_205release:1.3
	ahodgkin_204release:1.3
	ahodgkin_202release:1.3
	ahodgkin_201release:1.3
	ahodgkin_200release:1.3
	ahodgkin_133beta:1.3
	ahodgkin_132beta:1.3
	ahodgkin_131beta:1.3
	ahodgkin_130beta:1.3
	ahodgkin_129:1.3
	ahodgkin_128beta:1.3
	ahodgkin_128alpha:1.3
	ahodgkin_127beta2:1.3
	ahodgkin_127beta:1.3
	ahodgkin_126beta:1.3
	ahodgkin_AW97patch:1.3
	ahodgkin_AW97:1.3;
locks; strict;
comment	@# @;


1.4
date	2000.05.31.15.58.59;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.09.12.17.19.41;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.09.09.14.13.28;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.09.03.12.36.14;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    SaveObject.h                                      */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Handle the Save Object dialogue (actually object  */
/*          saving is done in Save.c).                        */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 03-Sep-1997 (ADH): Created.                       */
/*          05-Sep-1999 (ADH): Split so the bulk became the   */
/*                             SaveFile source and the small  */
/*                             fetch saving stayed in here.   */
/*          07-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_SaveObject__
  #define Browser_SaveObject__

  #include <kernel.h>
  #include <tboxlibs/toolbox.h>

  #include "Global.h"

  /* Save Object dialogue component IDs */

  #define SaveObjectDrag                  0x01400
  #define SaveObjectWrit                  0x01401
  #define SaveObjectCancel                0x01402
  #define SaveObjectOK                    0x01403

  /* Save Object dialogue event codes */

  #define ESaveObjectOK                   0x01403
  #define ESaveObjectCancel               0x01402

  #define ESaveObjectToBeShown            0x015ff

  /* Function prototypes */

  _kernel_oserror * saveobject_open_for    (browser_data * b);
  int               saveobject_to_be_shown (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

  _kernel_oserror * saveobject_close       (browser_data * b);

#endif /* Browser_SaveObject__ */
@


1.3
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d15 16
a30 28
/***************************************************/
/* File   : SaveObject.h                           */
/*                                                 */
/* Purpose: Handle the Save Object dialogue        */
/*          (actual object saving is done in       */
/*          Save.c).                               */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 03-Sep-97: Created.                    */
/*                                                 */
/*          05-Sep-97: Split so bulk became the    */
/*                     SaveFile source, and the    */
/*                     small fetch saving stayed   */
/*                     in here.                    */
/***************************************************/

/* Save Object dialogue component IDs */

#define SaveObjectDrag                  0x01400
#define SaveObjectWrit                  0x01401
#define SaveObjectCancel                0x01402
#define SaveObjectOK                    0x01403

/* Save Object dialogue event codes */

#define ESaveObjectOK                   0x01403
#define ESaveObjectCancel               0x01402
d32 2
a33 1
#define ESaveObjectToBeShown            0x015ff
d35 2
a36 1
/* Function prototypes */
d38 1
a38 2
_kernel_oserror * saveobject_open_for    (browser_data * b);
int               saveobject_to_be_shown (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
d40 22
a61 1
_kernel_oserror * saveobject_close       (browser_data * b);
@


1.2
log
@First a minor warning - the various Res files are out of sync in this build.
Only the Browse resources are currently valid.

Added Utils.Icons - has a few archives inside containing the resources
(well, some of them) used to build various UI sprites for various builds.
Archived because these are unlikely to change much, and putting them on
CVS was a move to, well, archive the stuff...

SaveDBox objects vanquished and requirements in !Run[D] files removed. The
data save code fits much more neatly in amongst the data load protocol
stuff now (with the slight exception of having to split the SaveObject
source into SaveObject and SaveFile - the former handles multiple persistent
dialogues for Shift+Click on links and the like, the latter handles 'one at
a time' transient dialogues for save source and similar). Export Link is now
supported, too, and writes a 'proper' version URI file. You'll find that
double-clicking on old URI files will work as the URI handler picks them up,
whilst new version ones don't; however, dragging onto the browser will only
work with new version files. Note that support for saving and loading URL
files (ANT suite stuff) is present too, so old URI files can be typed as URL
files if you want to keep them working without modification - the URI
handler itself will hopefully support the defined URI file format soon;
double-clicking on old URI files will stop working at that point. Note
there are *lots* of changes in every Res file to support all this. This may
all seem a bit pointless to some, but the changes do in fact make it very
easy to add new save dialogues all over the place. Certainly much easier
than with the previous system, anyway. In fact, post script, image
'save as sprite' took about half an hour, which I hope proves the worth
of the new system.

Merged in newer hotlist code with support for drag cancelling with Escape
(all relevant Res files appropriately updated) and cancelling scrolling
when you've reached the window scroll limit. Had to move some of the
Wimp message handling stuff to the central Protocols source, as clashes
were occuring, and also the hotlist routines were using independent saving
code - a lot of duplicated effort. This was fair enough as at the time the
Hotlist code was written, the Save code couldn't be used in the way it is
now.

New Save Source and Print buttons on the toolbar of some builds.

Phoenix Sprites file made more efficient - the Acorn base section has been
split from the animated upper region. Browse build has a new grey fade
sprite at the back, which is less grainy than the previous one and only
uses 16 colours (with a 16 greyscale palette).

Not really a bug, bug the routine to start an image fetch for INPUT
TYPE=IMAGE forms items only did so if the src field (or equivalent, for
this tag type) was non-NULL. In fact, you should always call image_new_image
and let that handle the rest, otherwise other sections of the code will fail
as they try to obtain an image number for a given HStream and get -1 back.
This problem only generally manifested itself when loading an HTML file to
the browser straight from an application, as many src fields become NULL
when the relativisation routines find nothing to relativise to...

Authentication got broken somewhere along the line - this has been fixed
(in HTMLLib and the browser).

Ctrl+Click on a cross referenced image updates *all* copies, not just the
one with the image data attached.

Next big step: Rip up TBEvents.h and rebuild that whole approach somewhat.
To all those working on the code, my apologies but this means all Res files
will receive a very large number of alterations and there will be extensive
code changes too (mostly naming convention stuff), in more or less all
source files. I am endeavouring to ensure that the new numberspace
convention does not clash with the work being done by Kevin on
internationalisation.
@
text
@d32 1
a32 1
/* Dialogue definitions */
d34 4
a37 4
#define SaveObjectDrag         0x9100
#define SaveObjectWrit         0x9101
#define SaveObjectCancel       0x9102
#define SaveObjectOK           0x9103
d39 6
a44 3
#define ESaveObjectOK          0x9103
#define ESaveObjectCancel      0x9102
#define ESaveObjectToBeShown   0x91ff
@


1.1
log
@File fetches now set DEADDEAD during the fetch, Data if it is aborted, or
an appropriate filetype when finished. If the fetcher routines return a
zero or data filetype, the browser looks at a set of hard coded filename
extensions to try and determine if there's a better filetype to use
(urlutils_filetype_from_url) - since this is a centralised routine it can
use a Mime mapping system (or be removed entirely) as and when one becomes
available.

You can now drag URI / URL files to the Hotlist window to add them to the
list. They are added roughly where dragged to. (NB, note that I renamed
the function to return the window ID - just being picky; it matches other
similar functions now). Oh, and hotlist_add_position actually works now ;-)

The global history will save when titles are added, as well as when a URL
is added. Before, a browser crash could mean a title got dropped out
of the history file even if SaveHistory was set to 'always'.

SaveObject sources have been added but nothing references them or links
them in yet - they're not finished. Mostly checking this one in because
of the hotlist changes.
@
text
@d25 5
d34 8
a41 9
#define SaveAsDrag         0x8100
#define SaveAsWrit         0x8101
#define SaveAsCancel       0x8102
#define SaveAsOK           0x8103

#define ESaveAsOK          0x8102
#define ESaveAsCancel      0x8103
#define ESaveAsHidden      0x81fe
#define ESaveAsToBeShown   0x81ff
d45 2
a46 2
int               saveobject_to_be_shown          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int               saveobject_hidden               (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
d48 1
a48 3
_kernel_oserror * saveobject_close                (ObjectId ancestor, int do_not_close);

void              saveobject_return_dialogue_info (ObjectId * window, ObjectId * ancestor);
@
