head	1.14;
access;
symbols
	Browse-2_16:1.14
	Browse-2_15:1.14
	Browse-2_14:1.14
	Browse-2_13:1.14
	Browse-2_12:1.14
	Browse-2_11:1.13
	Browse-2_10:1.13
	Browse-2_09:1.13
	ahodgkin_208_i4_2:1.13
	ahodgkin_208_i4:1.12
	ahodgkin_208_i3:1.12
	ahodgkin_208_i2:1.12
	ahodgkin_208_i1:1.12
	ahodgkin_207release:1.12
	ahodgkin_206release:1.11
	ahodgkin_205release:1.10
	ahodgkin_204release:1.10
	ahodgkin_202release:1.10
	ahodgkin_201release:1.10
	ahodgkin_200release:1.10
	ahodgkin_133beta:1.10
	ahodgkin_132beta:1.10
	ahodgkin_131beta:1.10
	ahodgkin_130beta:1.10
	ahodgkin_129:1.10
	ahodgkin_128beta:1.10
	ahodgkin_128alpha:1.10
	ahodgkin_127beta2:1.9
	ahodgkin_127beta:1.9
	ahodgkin_126beta:1.9
	ahodgkin_AW97patch:1.8
	ahodgkin_AW97:1.6;
locks; strict;
comment	@# @;


1.14
date	2006.03.13.22.06.20;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	2000.05.31.15.58.58;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	98.09.07.11.47.14;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	98.07.09.10.28.10;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	97.12.02.16.14.15;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	97.10.30.17.11.25;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.10.24.14.09.23;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.10.22.13.16.04;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.10.16.13.23.24;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.10.13.07.08.45;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.10.13.07.07.07;	author ahodgkin;	state dead;
branches;
next	1.3;

1.3
date	97.10.09.10.52.10;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.10.06.15.18.30;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.10.05.17.16.28;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.14
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    PlugIn.h                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Supporting the generic RISC OS plug-in interface. */
/*                                                            */
/*          Unusual allocation schemes may be used to replace */
/*          malloc here, so do NOT malloc a message block and */
/*          try to send it; you'll hit the Wimp bug regarding */
/*          message blocks at high addresses with older       */
/*          versions.                                         */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 20-Sep-1997 (ADH): Created.                       */
/*          05-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_PlugIn__
  #define Browser_PlugIn__

  #include <kernel.h>
  #include <tboxlibs/wimp.h>
  #include <HTMLLib/HTMLLib.h>

  #include "Global.h"
  #include "MiscDefs.h"

  /* Structures - queue of ready-to-launch Plug-Ins */

  typedef struct plugin_queue
  {
    struct plugin_queue * next;

    browser_data        * browser;
    const HStream       * token;
    BBox                  position;
  }
  plugin_queue;

  /* For the Plug-In streaming protocol, where quite a lot of */
  /* information needs to be retained for a long time.        */

  typedef struct plugin_stream
  {
    unsigned int    browser_instance_handle; /* The browser owning the Object   */
    const HStream * token;                   /* HStream representing the Object */

    unsigned int    plugin_instance_handle;
    unsigned int    plugin_stream_handle;
    unsigned int    plugin_task_handle;      /* ...So we know who to talk to later */
    unsigned int    plugin_message_ref;      /* To check we know about any replies */

    unsigned int    stream_flags;            /* From flags word of Message_PlugIn_StreamNew */

    string_value    url;                     /* These will be allocated in RMA, */
    string_value    mime;                    /* so great care must be taken to  */
    string_value    target;                  /* ensure they're always freed up. */
    string_value    filename;

    int             eos;
    int             last_modified;
    int             notify;                  /* From a Message_PlugIn_URLAccess */

    unsigned int    active            :1;    /* 1 if the stream is open, else 0 (e.g. waiting for message protocol to complete) */
    unsigned int    will_close_itself :1;    /* 1 if the stream will close itself, else close it (e.g. at window close time)    */
    unsigned int    abandoned         :1;    /* 1 if the stream fetch was closed forcibly (abandoned), else 0.                  */
  }
  plugin_stream;

  /* Message definitions - needs string_value to be known, */
  /* found in MiscDefs.h.                                  */
  /*                                                       */
  /* These definitions are uncommented, as it is assumed   */
  /* that the reader is completely familiar with the       */
  /* Plug-In specification already.                        */

  #define Message_PlugIn_Open                        0x4d540

  #define MPlugIn_Open_OpenAsHelperNotPlugIn         (1<<0);

  typedef struct MPlugIn_Open
  {
    unsigned int flags;
    unsigned int reserved;

    int          browser_instance_handle;
    int          parent_window_handle;

    BBox         parent_area;

    int          file_type;
    string_value file_name;
  }
  MPlugIn_Open;

  /* Plug-In opening */

  #define Message_PlugIn_Opening                     0x4d541

  #define MPlugIn_Opening_CanAcceptInputFocus        (1u<<0)
  #define MPlugIn_Opening_WantsCodeResourceFetched   (1u<<1)
  #define MPlugIn_Opening_WantsDataResourceFetched   (1u<<2)
  #define MPlugIn_Opening_WillDeleteParamsItself     (1u<<3)
  #define MPlugIn_Opening_PlugInHasMoreWorkToDo      (1u<<4)
  #define MPlugIn_Opening_ActionBeyondStop           (1u<<5)
  #define MPlugIn_Opening_OpenedAsHelperNotPlugIn    (1u<<6)

  typedef struct MPlugIn_Opening
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;
  }
  MPlugIn_Opening;

  /* Request Plug-In to close */

  #define Message_PlugIn_Close                       0x4d542

  #define MPlugIn_Close_WouldLikePlugInToExit        (1u<<0)

  typedef struct MPlugIn_Close
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;
  }
  MPlugIn_Close;

  /* Plug-In closing */

  #define Message_PlugIn_Closed                      0x4d543

  #define MPlugIn_Closed_PlugInWillExitAfterThis     (1u<<0)
  #define MPlugIn_Closed_NotAReply                   (1u<<1)
  #define MPlugIn_Closed_ErrorHeldInMessageBlock     (1u<<2)

  typedef struct MPlugIn_Closed
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;

    int          errnum;
    char         errmess[sizeof(WimpMessage) - 36];
  }
  MPlugIn_Closed;

  /* Request Plug-In moves */

  #define Message_PlugIn_Reshape                     0x4d544

  typedef struct MPlugIn_Reshape
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;

    int          parent_window_handle;
    BBox         parent_area;
  }
  MPlugIn_Reshape;

  /* Plug-In requesting that it be resized */

  #define Message_PlugIn_ReshapeRequest              0x4d545

  typedef struct MPlugIn_ReshapeRequest
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;

    unsigned int width;
    unsigned int height;
  }
  MPlugIn_ReshapeRequest;

  #define MPlugIn_StreamNew_StreamTypeMask           (3u<<0)
  #define MPlugIn_StreamNew_StreamTypeNormal         (0u<<0)
  #define MPlugIn_StreamNew_StreamTypeSeekOnly       (1u<<0)
  #define MPlugIn_StreamNew_StreamTypeAsFile         (2u<<0)
  #define MPlugIn_StreamNew_StreamTypeAsFileOnly     (3u<<0)
  #define MPlugIn_StreamNew_StreamIsSeekable         (1u<<4)

  /* Open a new stream */

  #define Message_PlugIn_StreamNew                   0x4d548

  typedef struct MPlugIn_StreamNew
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;

    int          plugin_stream_instance_handle;
    int          browser_stream_instance_handle;

    string_value url;

    int          eos;
    int          last_modified;
    int          notify;

    string_value mime_type;
    string_value window_target;
  }
  MPlugIn_StreamNew;

  /* Close a stream */

  #define Message_PlugIn_StreamDestroy               0x4d549

  #define MPlugIn_StreamDestroy_Reason_Success       0
  #define MPlugIn_StreamDestroy_Reason_Error         1
  #define MPlugIn_StreamDestroy_Reason_User          2

  typedef struct MPlugIn_StreamDestroy
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;

    int          plugin_stream_instance_handle;
    int          browser_stream_instance_handle;

    string_value url;

    int          eos;
    int          last_modified;
    int          notify;

    int          reason;
  }
  MPlugIn_StreamDestroy;

  /* Confirm file has been written */

  #define Message_PlugIn_StreamAsFile                0x4d54c

  typedef struct MPlugIn_StreamAsFile
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;

    int          plugin_stream_instance_handle;
    int          browser_stream_instance_handle;

    string_value url;

    int          eos;
    int          last_modified;
    int          notify;

    string_value pathname;
  }
  MPlugIn_StreamAsFile;

  /* Plug-In URL request */

  #define Message_PlugIn_URLAccess                   0x4d54d

  #define MPlugIn_URLAccess_ReturnNotifyWhenComplete (1u<<0);
  #define MPlugIn_URLAccess_POSTToURL                (1u<<1);
  #define MPlugIn_URLAccess_POSTAFile                (1u<<2);

  typedef struct MPlugIn_URLAccess
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;

    string_value url;
    string_value target;

    int          notify_data;
    int          data_length;
    string_value data_pointer;
  }
  MPlugIn_URLAccess;

  /* Plug-In status message */

  #define Message_PlugIn_Status                      0x4d54f

  typedef struct MPlugIn_Status
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;

    string_value status;
  }
  MPlugIn_Status;

  /* Plug-In busy / idle indication */

  #define Message_PlugIn_Busy                        0x4d550

  #define MPlugIn_Busy_IsBusy                        (1u<<0);
  #define MPlugIn_Busy_StatusWordIsValid             (1u<<1);

  #define MPlugIn_Busy_State_Stop                    0;
  #define MPlugIn_Busy_State_Play                    1;
  #define MPlugIn_Busy_State_Pause                   2;
  #define MPlugIn_Busy_State_FastForward             3;
  #define MPlugIn_Busy_State_Rewind                  4;
  #define MPlugIn_Busy_State_Record                  5;

  typedef struct MPlugIn_Busy
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;

    unsigned int state;
  }
  MPlugIn_Busy;

  /* Parameters file definitions */

  #define PlugIn_ParamType_Terminator      0
  #define PlugIn_ParamType_DataFromPARAM   1
  #define PlugIn_ParamType_URLFromPARAM    2
  #define PlugIn_ParamType_ObjectFromPARAM 3
  #define PlugIn_ParamType_BrowserSpecial  4
  #define PlugIn_ParamType_DataFromOBJECT  5
  #define PlugIn_ParamType_URLFromOBJECT   6
  #define PlugIn_ParamType_DataFromAPPLET  5
  #define PlugIn_ParamType_URLFromAPPLET   6

  /* Function prototypes */

  const char      * plugin_return_string                (WimpMessage * m, string_value * sv);
  _kernel_oserror * plugin_write_params                 (const browser_data * restrict b, const HStream * restrict t, char * restrict buffer, const size_t buffer_size, const BBox * restrict position);

  _kernel_oserror * plugin_add_queue_item               (browser_data * restrict b, const HStream * restrict t, const BBox * restrict position);
  _kernel_oserror * plugin_remove_item                  (plugin_queue * remove);
  _kernel_oserror * plugin_flush_queue                  (browser_data * b, int start_now);

  _kernel_oserror * plugin_open_bounced                 (WimpMessage * m);
  _kernel_oserror * plugin_got_opening                  (WimpMessage * m);
  _kernel_oserror * plugin_send_close                   (unsigned int b, unsigned int task, unsigned int instance);

  _kernel_oserror * plugin_got_reshape_request          (WimpMessage * m);
  _kernel_oserror * plugin_send_original_reshape        (unsigned int b, unsigned int task, unsigned int instance, BBox * position);

  _kernel_oserror * plugin_got_url_access               (WimpMessage * m);

  _kernel_oserror * plugin_got_status                   (WimpMessage * m);
  _kernel_oserror * plugin_got_busy                     (WimpMessage * m);

  _kernel_oserror * plugin_setup_stream                 (unsigned int owner, browser_data * fetcher, const char * url);
  _kernel_oserror * plugin_start_new_stream             (unsigned int b, const char * data, unsigned int instance, unsigned int task);
  _kernel_oserror * plugin_send_original_stream_new     (browser_data * b);
  _kernel_oserror * plugin_got_stream_new               (WimpMessage * m);
  _kernel_oserror * plugin_stream_new_bounced           (WimpMessage * m);
  _kernel_oserror * plugin_send_original_stream_destroy (browser_data * b, int reason);
  _kernel_oserror * plugin_abort_stream                 (browser_data * b);
  _kernel_oserror * plugin_fetch_completed              (browser_data * b);

  _kernel_oserror * plugin_obtain_instance              (const browser_data * restrict b, const HStream * restrict t, unsigned int * restrict instance);
  void              plugin_flush_instance_entries       (const browser_data * restrict b);

  void              plugin_shutdown                     (void);

#endif /* Browser_PlugIn__ */
@


1.13
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d51 1
a51 1
    HStream             * token;
d61 2
a62 2
    unsigned int   browser_instance_handle; /* The browser owning the Object   */
    HStream      * token;                   /* HStream representing the Object */
d64 19
a82 19
    unsigned int   plugin_instance_handle;
    unsigned int   plugin_stream_handle;
    unsigned int   plugin_task_handle;      /* ...So we know who to talk to later */
    unsigned int   plugin_message_ref;      /* To check we know about any replies */

    unsigned int   stream_flags;            /* From flags word of Message_PlugIn_StreamNew */

    string_value   url;                     /* These will be allocated in RMA, */
    string_value   mime;                    /* so great care must be taken to  */
    string_value   target;                  /* ensure they're always freed up. */
    string_value   filename;

    int            eos;
    int            last_modified;
    int            notify;                  /* From a Message_PlugIn_URLAccess */

    unsigned int   active            :1;    /* 1 if the stream is open, else 0 (e.g. waiting for message protocol to complete) */
    unsigned int   will_close_itself :1;    /* 1 if the stream will close itself, else close it (e.g. at window close time)    */
    unsigned int   abandoned         :1;    /* 1 if the stream fetch was closed forcibly (abandoned), else 0.                  */
d363 1
a363 1
  _kernel_oserror * plugin_write_params                 (browser_data * b, HStream * t, char * buffer, int buffer_size, BBox * position);
d365 1
a365 1
  _kernel_oserror * plugin_add_queue_item               (browser_data * b, HStream * t, BBox * position);
d390 2
a391 2
  _kernel_oserror * plugin_obtain_instance              (browser_data * b, HStream * t, unsigned int * instance);
  void              plugin_flush_instance_entries       (browser_data * b);
@


1.12
log
@Everyone else seems to be checking lots of stuff in lately, so I've
decided to join in. This is an intermediate check-in and so not all
resources etc. will be up to date. You should be able to make Phoenix
and a debug build out of it. As a reminder, to make a JavaScript build:

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean. This now strips dynamic dependencies from the MakeFile
   automatically, to save you having to do it yourself.
 * Run one of the TaskObey files with the "J" suffix, e.g. !DeskBrwsJ -
   this uses the same .o directory for object files and exports to the
   same position in the Targets directory as the non-JavaScript build,
   but it does produce a unique binary in 'abs' and symbols table in
   'syms'.
 * Sourcing an appropriate !Run (with increased WimpSlot value), !Boot
   and About resource is done automatically.
 * Some, but not all of the !xxxD (debug) TaskObey files will make
   JavaScript versions in passing - check the JSUFFIX value on the Make
   command line parameters in the file.

This'll only work on RISC OS 3.1 due to the use of MemLib.

Here's the change list:

Included MNG icons in sprites files; added Sprites23 for some builds.
Added in ANT URL file icon (b28) derived from URI file icon, because
the Save dialogue can need it.

No, you do *not* need to define the same keyboard shortcuts in each
frame since the ancestor keeps the input focus and we've basically
dropped non-nested Wimp support. Maintaining no less than 4 lists of
identical shortcuts was a pain. Some Res files now only have the
lists in the main browser window and button bar objects (these two
are both required still).

Ursula build Markers button arrangement changed from 1x3 horizontal to
2x2 tilted, as in Phoenix, by popular demand.

Couple of hotlist bugs fixed; dragging an item and deleteing it with
Ctrl+X didn't terminate the drag, and deleteting an item underneath a
menu opened for it didn't close the menu.

'SendReferer' option added to all Choices files, all set to 'always'.
Put just beneath 'Clone' as it refers to header items, though really,
both Clone and SendReferer should probably be in the "Fetch controls"
section rather than "Multiuser environments and proxying"! Front-end
control of this is available.

In image_export_original, save_save_source, save_transfer_source and
save_save_object, flex_set_budge(0) was called to lock the heap but the
return value wasn't stored. flex_set_budge(1) was then used to unlock
the heap. All calls now remember and restore the old value, which is
both safer in case one calls another and allows the flex_set_budge
call in Main.c to have an application-wide meaning, as intended.

Some restructuring to the data load and RAM transfer sections of
Protocols.c; remote hotlist builds wouldn't allow files to be loaded
to browser windows before, and can now drop URL, URI or text files to
the Open URL dialogue.

New option "MinimumFontSize", lets the 'size' attribute of the 'font'
element be overridden. Default value is 1, to allow the full range of
values for the attribute. Setting to 7, for example, would give font
size 7 text at all times. Another new option, "ToggleOnXOnly", to
make Toggle Size only extend the window vertically (with Ctrl then
being used to toggle to genuine full size, rather than vice versa).
All Choices files updated to hold both of these options; only the
first has front-end control available (see debug build Res file).

JavaScript Document object exists; frames array etc. working. Can now
just about use "http://www.acorn.com/~ahodgkin/jschain/" but it does
abort after a bit - problems with frames again, I suspect. Is is pretty
slow, too. Can now press Escape to terminate a script.

Main.c erroneously referred to Controls file entry "StopWebServe" as
"StopWebProxy". Fixed.

Keyboard shortcuts to raise SaveFile are now possible in a general sense;
the code before was in the ToBeShown handler and just checked for a parent
component of -1. It then assumed "save frame HTML source". Now there's the
savefile_raise_from_shortcut function, which together with the seven new
event codes in SaveFile.h allows saving of HTML source and frame location,
export of links, images, backgrounds and the page as text or draw, to all
be invoked by keyboard shortcuts. Some Res files have some of these defined.

In reformat_check_height, the first check to see if setpara should be set
references a field in tpLast without checking if it is NULL. Whilst the
'line > 0' check should mean that tpLast wasn't NULL anyway, a direct
call to the function from outside of the reformatter might have tripped
up on this - the check for tpLast != NULL is now made.

Adjust-click on close icon in window showing file: URL attempts to open
the parent Filer window.

Reformatter used to try and find a selectable token if keyboard control
was enabled in a really stupid place - could make reformatting become
very slow if no selectables were present, especially if the page had a
few tables on it. Preprocessor now does this (since it goes through all
of the tokens anyway), the reformatter just doing a last check to ensure
no frames have obscured the selectable and if so, it tries to move it.
Done in the reformatter as generating a line array implies the data really
is visible.

Ctrl+Tab URL completion now builds a full list of matches from the hotlist
and history and can cycle through them (Ctrl+Shift+Tab stepping backwards).

Will give a real error rather than just "Data Abort" if it goes wrong
now. Someone somewhere is setting bit 30 of the error which confused
the replacement signal handler. Flag bits are now masked off (as they
should've been to start with).
@
text
@d15 18
a32 17
/***************************************************/
/* File   : PlugIn.h                               */
/*                                                 */
/* Purpose: Supporting the generic RISC OS browser */
/*          Plug-In interface.                     */
/*                                                 */
/*          MemLib may be used to replace malloc   */
/*          here, so do NOT malloc a message block */
/*          and try to send it (you'll hit the     */
/*          Wimp bug regarding message blocks at   */
/*          high addresses if you have an old      */
/*          enough version of the Wimp).           */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 28-Sep-97: Created.                    */
/***************************************************/
d34 2
a35 1
/* Structures - queue of ready-to-launch Plug-Ins */
d37 3
a39 3
typedef struct plugin_queue
{
  struct plugin_queue * next;
d41 2
a42 5
  browser_data        * browser;
  HStream             * token;
  BBox                  position;
}
plugin_queue;
d44 1
a44 2
/* For the Plug-In streaming protocol, where quite a lot of */
/* information needs to be retained for a long time.        */
d46 3
a48 4
typedef struct plugin_stream
{
  unsigned int   browser_instance_handle; /* The browser owning the Object   */
  HStream      * token;                   /* HStream representing the Object */
d50 5
a54 4
  unsigned int   plugin_instance_handle;
  unsigned int   plugin_stream_handle;
  unsigned int   plugin_task_handle;      /* ...So we know who to talk to later */
  unsigned int   plugin_message_ref;      /* To check we know about any replies */
d56 2
a57 1
  unsigned int   stream_flags;            /* From flags word of Message_PlugIn_StreamNew */
d59 4
a62 4
  string_value   url;                     /* These will be allocated in RMA, */
  string_value   mime;                    /* so great care must be taken to  */
  string_value   target;                  /* ensure they're always freed up. */
  string_value   filename;
d64 4
a67 3
  int            eos;
  int            last_modified;
  int            notify;                  /* From a Message_PlugIn_URLAccess */
d69 1
a69 5
  unsigned int   active            :1;    /* 1 if the stream is open, else 0 (e.g. waiting for message protocol to complete) */
  unsigned int   will_close_itself :1;    /* 1 if the stream will close itself, else close it (e.g. at window close time)    */
  unsigned int   abandoned         :1;    /* 1 if the stream fetch was closed forcibly (abandoned), else 0.                  */
}
plugin_stream;
d71 4
a74 6
/* Message definitions - needs string_value to be known, */
/* found in MiscDefs.h.                                  */
/*                                                       */
/* These definitions are uncommented, as it is assumed   */
/* that the reader is completely familiar with the       */
/* Plug-In specification already.                        */
d76 3
a78 1
#define Message_PlugIn_Open                        0x4d540
d80 5
a84 1
#define MPlugIn_Open_OpenAsHelperNotPlugIn         (1<<0);
d86 6
a91 4
typedef struct MPlugIn_Open
{
  unsigned int flags;
  unsigned int reserved;
d93 1
a93 2
  int          browser_instance_handle;
  int          parent_window_handle;
d95 1
a95 1
  BBox         parent_area;
d97 4
a100 4
  int          file_type;
  string_value file_name;
}
MPlugIn_Open;
d102 2
a103 1
/* Plug-In opening */
d105 1
a105 1
#define Message_PlugIn_Opening                     0x4d541
d107 4
a110 7
#define MPlugIn_Opening_CanAcceptInputFocus        (1u<<0)
#define MPlugIn_Opening_WantsCodeResourceFetched   (1u<<1)
#define MPlugIn_Opening_WantsDataResourceFetched   (1u<<2)
#define MPlugIn_Opening_WillDeleteParamsItself     (1u<<3)
#define MPlugIn_Opening_PlugInHasMoreWorkToDo      (1u<<4)
#define MPlugIn_Opening_ActionBeyondStop           (1u<<5)
#define MPlugIn_Opening_OpenedAsHelperNotPlugIn    (1u<<6)
d112 1
a112 3
typedef struct MPlugIn_Opening
{
  unsigned int flags;
d114 1
a114 4
  int          plugin_instance_handle;
  int          browser_instance_handle;
}
MPlugIn_Opening;
d116 7
a122 1
/* Request Plug-In to close */
d124 3
a126 1
#define Message_PlugIn_Close                       0x4d542
d128 4
a131 1
#define MPlugIn_Close_WouldLikePlugInToExit        (1u<<0)
d133 1
a133 3
typedef struct MPlugIn_Close
{
  unsigned int flags;
d135 1
a135 4
  int          plugin_instance_handle;
  int          browser_instance_handle;
}
MPlugIn_Close;
d137 1
a137 1
/* Plug-In closing */
d139 3
a141 1
#define Message_PlugIn_Closed                      0x4d543
d143 4
a146 3
#define MPlugIn_Closed_PlugInWillExitAfterThis     (1u<<0)
#define MPlugIn_Closed_NotAReply                   (1u<<1)
#define MPlugIn_Closed_ErrorHeldInMessageBlock     (1u<<2)
d148 1
a148 3
typedef struct MPlugIn_Closed
{
  unsigned int flags;
d150 1
a150 2
  int          plugin_instance_handle;
  int          browser_instance_handle;
d152 3
a154 4
  int          errnum;
  char         errmess[sizeof(WimpMessage) - 36];
}
MPlugIn_Closed;
d156 3
a158 1
/* Request Plug-In moves */
d160 2
a161 1
#define Message_PlugIn_Reshape                     0x4d544
d163 4
a166 3
typedef struct MPlugIn_Reshape
{
  unsigned int flags;
d168 1
a168 2
  int          plugin_instance_handle;
  int          browser_instance_handle;
d170 1
a170 4
  int          parent_window_handle;
  BBox         parent_area;
}
MPlugIn_Reshape;
d172 3
a174 1
/* Plug-In requesting that it be resized */
d176 2
a177 1
#define Message_PlugIn_ReshapeRequest              0x4d545
d179 4
a182 3
typedef struct MPlugIn_ReshapeRequest
{
  unsigned int flags;
d184 1
a184 2
  int          plugin_instance_handle;
  int          browser_instance_handle;
d186 1
a186 4
  unsigned int width;
  unsigned int height;
}
MPlugIn_ReshapeRequest;
d188 3
a190 6
#define MPlugIn_StreamNew_StreamTypeMask           (3u<<0)
#define MPlugIn_StreamNew_StreamTypeNormal         (0u<<0)
#define MPlugIn_StreamNew_StreamTypeSeekOnly       (1u<<0)
#define MPlugIn_StreamNew_StreamTypeAsFile         (2u<<0)
#define MPlugIn_StreamNew_StreamTypeAsFileOnly     (3u<<0)
#define MPlugIn_StreamNew_StreamIsSeekable         (1u<<4)
d192 2
a193 1
/* Open a new stream */
d195 4
a198 1
#define Message_PlugIn_StreamNew                   0x4d548
d200 6
a205 3
typedef struct MPlugIn_StreamNew
{
  unsigned int flags;
d207 1
a207 2
  int          plugin_instance_handle;
  int          browser_instance_handle;
d209 1
a209 2
  int          plugin_stream_instance_handle;
  int          browser_stream_instance_handle;
d211 3
a213 1
  string_value url;
d215 2
a216 3
  int          eos;
  int          last_modified;
  int          notify;
d218 2
a219 4
  string_value mime_type;
  string_value window_target;
}
MPlugIn_StreamNew;
d221 1
a221 1
/* Close a stream */
d223 3
a225 1
#define Message_PlugIn_StreamDestroy               0x4d549
d227 4
a230 3
#define MPlugIn_StreamDestroy_Reason_Success       0
#define MPlugIn_StreamDestroy_Reason_Error         1
#define MPlugIn_StreamDestroy_Reason_User          2
d232 1
a232 3
typedef struct MPlugIn_StreamDestroy
{
  unsigned int flags;
d234 1
a234 2
  int          plugin_instance_handle;
  int          browser_instance_handle;
d236 3
a238 2
  int          plugin_stream_instance_handle;
  int          browser_stream_instance_handle;
d240 3
a242 1
  string_value url;
d244 2
a245 3
  int          eos;
  int          last_modified;
  int          notify;
d247 2
a248 3
  int          reason;
}
MPlugIn_StreamDestroy;
d250 1
a250 1
/* Confirm file has been written */
d252 3
a254 1
#define Message_PlugIn_StreamAsFile                0x4d54c
d256 3
a258 3
typedef struct MPlugIn_StreamAsFile
{
  unsigned int flags;
d260 1
a260 2
  int          plugin_instance_handle;
  int          browser_instance_handle;
d262 1
a262 2
  int          plugin_stream_instance_handle;
  int          browser_stream_instance_handle;
d264 3
a266 1
  string_value url;
d268 2
a269 3
  int          eos;
  int          last_modified;
  int          notify;
d271 2
a272 3
  string_value pathname;
}
MPlugIn_StreamAsFile;
d274 1
a274 1
/* Plug-In URL request */
d276 3
a278 1
#define Message_PlugIn_URLAccess                   0x4d54d
d280 3
a282 3
#define MPlugIn_URLAccess_ReturnNotifyWhenComplete (1u<<0);
#define MPlugIn_URLAccess_POSTToURL                (1u<<1);
#define MPlugIn_URLAccess_POSTAFile                (1u<<2);
d284 1
a284 3
typedef struct MPlugIn_URLAccess
{
  unsigned int flags;
d286 1
a286 2
  int          plugin_instance_handle;
  int          browser_instance_handle;
d288 3
a290 2
  string_value url;
  string_value target;
d292 3
a294 5
  int          notify_data;
  int          data_length;
  string_value data_pointer;
}
MPlugIn_URLAccess;
d296 2
a297 1
/* Plug-In status message */
d299 2
a300 1
#define Message_PlugIn_Status                      0x4d54f
d302 5
a306 3
typedef struct MPlugIn_Status
{
  unsigned int flags;
d308 1
a308 2
  int          plugin_instance_handle;
  int          browser_instance_handle;
d310 1
a310 3
  string_value status;
}
MPlugIn_Status;
d312 3
a314 1
/* Plug-In busy / idle indication */
d316 2
a317 1
#define Message_PlugIn_Busy                        0x4d550
d319 3
a321 2
#define MPlugIn_Busy_IsBusy                        (1u<<0);
#define MPlugIn_Busy_StatusWordIsValid             (1u<<1);
d323 1
a323 6
#define MPlugIn_Busy_State_Stop                    0;
#define MPlugIn_Busy_State_Play                    1;
#define MPlugIn_Busy_State_Pause                   2;
#define MPlugIn_Busy_State_FastForward             3;
#define MPlugIn_Busy_State_Rewind                  4;
#define MPlugIn_Busy_State_Record                  5;
d325 1
a325 3
typedef struct MPlugIn_Busy
{
  unsigned int flags;
d327 2
a328 2
  int          plugin_instance_handle;
  int          browser_instance_handle;
d330 6
a335 3
  unsigned int state;
}
MPlugIn_Busy;
d337 3
a339 1
/* Parameters file definitions */
d341 2
a342 9
#define PlugIn_ParamType_Terminator      0
#define PlugIn_ParamType_DataFromPARAM   1
#define PlugIn_ParamType_URLFromPARAM    2
#define PlugIn_ParamType_ObjectFromPARAM 3
#define PlugIn_ParamType_BrowserSpecial  4
#define PlugIn_ParamType_DataFromOBJECT  5
#define PlugIn_ParamType_URLFromOBJECT   6
#define PlugIn_ParamType_DataFromAPPLET  5
#define PlugIn_ParamType_URLFromAPPLET   6
d344 3
a346 1
/* Function prototypes */
d348 1
a348 2
const char      * plugin_return_string                (WimpMessage * m, string_value * sv);
_kernel_oserror * plugin_write_params                 (browser_data * b, HStream * t, char * buffer, int buffer_size, BBox * position);
d350 9
a358 3
_kernel_oserror * plugin_add_queue_item               (browser_data * b, HStream * t, BBox * position);
_kernel_oserror * plugin_remove_item                  (plugin_queue * remove);
_kernel_oserror * plugin_flush_queue                  (browser_data * b, int start_now);
d360 1
a360 3
_kernel_oserror * plugin_open_bounced                 (WimpMessage * m);
_kernel_oserror * plugin_got_opening                  (WimpMessage * m);
_kernel_oserror * plugin_send_close                   (unsigned int b, unsigned int task, unsigned int instance);
d362 2
a363 2
_kernel_oserror * plugin_got_reshape_request          (WimpMessage * m);
_kernel_oserror * plugin_send_original_reshape        (unsigned int b, unsigned int task, unsigned int instance, BBox * position);
d365 3
a367 1
_kernel_oserror * plugin_got_url_access               (WimpMessage * m);
d369 3
a371 2
_kernel_oserror * plugin_got_status                   (WimpMessage * m);
_kernel_oserror * plugin_got_busy                     (WimpMessage * m);
d373 2
a374 8
_kernel_oserror * plugin_setup_stream                 (unsigned int owner, browser_data * fetcher, const char * url);
_kernel_oserror * plugin_start_new_stream             (unsigned int b, const char * data, unsigned int instance, unsigned int task);
_kernel_oserror * plugin_send_original_stream_new     (browser_data * b);
_kernel_oserror * plugin_got_stream_new               (WimpMessage * m);
_kernel_oserror * plugin_stream_new_bounced           (WimpMessage * m);
_kernel_oserror * plugin_send_original_stream_destroy (browser_data * b, int reason);
_kernel_oserror * plugin_abort_stream                 (browser_data * b);
_kernel_oserror * plugin_fetch_completed              (browser_data * b);
d376 1
a376 2
_kernel_oserror * plugin_obtain_instance              (browser_data * b, HStream * t, unsigned int * instance);
void              plugin_flush_instance_entries       (browser_data * b);
d378 18
a395 1
void              plugin_shutdown                     (void);
@


1.11
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d21 7
@


1.10
log
@Implemented Message_PlugIn_ReshapeRequest, Message_PlugIn_Status and
Message_PlugIn_Busy. Plug-in code more robust when given invalid
browser instance handles by the plug-in.

Line spacing is now calculated on the basis of the normal style base serif
font, with all other fonts being forced into that line height. This does
mean that an unusually tall (say) sans serif font may get clipped. It
appears to be the only way to get around wildly different baseline
depths returned from the font metrics - you can't work out line spacing
based on each different font style; the line spacing will vary.

Table heighting (as opposed to widthing...) improved considerably; rowspan
can no longer cause very tall cells in odd places. Having trouble getting
rid of the single pixel breaks between vertically adjacent cells, though
I've not tried too hard. Widthing, though, seems fairly badly broken at
present... :-/

Set/clear of page_is_text flag made more robust (it looked as though there
was the potential for this to get stuck in a set state, though I've never
see the front-end behave in a manner which indicates this is the case).
The reformatter will now decrease leading if this flag is set (plain text
pages look daft with a line spacing that is OK for 'rich' text pages).
No reformatting is done if the page width changes by dragging on the
resize icon, though toggle size / full screen will still reformat even
if the contents are only text (browser needs to sort out various width
flags at this point).

Cut down on excessive redrawing when reformatting due to a change in
window dimensions is not done. If display_width hasn't changed, then no
redraw is needed. If this causes redraw problems, then whatever is
changing display_width needs investigating. It shouldn't be kludged
(basically) by forcing a redraw instead of a reformat.

TT/PRE/etc. text can now have a non-100% aspect ratio. 80-90% looks
best (ArcWeb, for example, uses 86%). New option 'TTAspect' in
the Choices files.

Debug builds link to a non-debug Unicode library now; stops stderr
being dumped to the bottom left of the screen if you've not redirected
it in the Run file.

RISC OS 3.1 seems to need more initial WimpSlot than later OS versions.
The 64 deep nested table set gives a 'No stack for trap handler' error
(which it really means in this case!) without 800K, even though 3.71
is happy with just 640K. So, the !Run file checks if Boot$OSVersion
is exactly 300, 310 or 311, and sets the WimpSlot accordingly.

!Run[D] files now require latest fetcher module versions (URL 0.21,
File 0.31, HTTP 0.58).
@
text
@d49 1
@


1.9
log
@Removed 'The Onion' link from some Hotlist files. Time showed that the
site wasn't entirely Family Friendly (TM)... Removed Shift Control (it's
gone offline now), and corrected the Telegraph URL from ...the-telegraph...
to just ...telegraph...

StrongHelp manual generator now tries to work out the number of lines in
the table on the root page more intelligently.

Plug-in support extended to handle Shockwave. Quite a lot of underlying
work for this, including a pseudo cache system for temporary files.

Bug in redraw routines: they plotted background images within table
cells, when nothing should have been drawn. Oops. When background images
in cells are properly supported, this can get sorted out.

Tweaked vertical plot position of HRs (up to 4 OS units too high before due
to rounding).

Various Res file bits and pieces, Ursula build taken up to v1.26 beta
for release on the Browser site. *Note* not all resources are up to date!
This will be done after AW97.
@
text
@d165 16
d289 40
d354 1
d358 3
@


1.8
log
@Various fixes in the code required for Shockwave support (many invalid
assumptions about the OBJECT tag structure). Not finished yet though.

Played around with signal handling 'n' all that to try and get sensible
errors reported for aborts etc. using code by KBracey. Need a ROM patch
for _swix on RISC OS 3.7 upwards (or a local fixed copy of _swix),
otherwise should sort out most of the problems seen (mostly 'no stack
for trap handler' errors and a distinct lack of a register dump).

Plug-In view on redraw / ASAP choices now work as they should (ASAP
was previously broken).

Version numbers in Messages incremented to 1.25 (23 Oct 1997).

For Plug-In support, created new source file RMA.c/h to handle RMA
claims and releases, in an attempt to ensure leakage never happens.
As such, this source is *slightly* more advanced than that in the 1.25
AW '97 build, though functionally identical. Well, that is, at least
you can confirm zero RMA leakage with '-debug LMem' in TRACE builds now!

Intend to do a consistency check on comment syntax in all sources
shortly - I need to rebuild my StrongHelp manuals; can't keep track
of all of these new functions...
@
text
@d57 7
a63 1
  int            notify_data;             /* From a Message_PlugIn_URLAccess */
d165 1
a289 7
_kernel_oserror * plugin_plugin_open_bounced          (WimpMessage * m);
_kernel_oserror * plugin_got_plugin_opening           (WimpMessage * m);
_kernel_oserror * plugin_send_plugin_close            (browser_data * b, unsigned int instance, unsigned int task);
_kernel_oserror * plugin_send_original_reshape        (browser_data * b, unsigned int instance, unsigned int task, BBox * position);
_kernel_oserror * plugin_send_original_stream_new     (browser_data * b, HStream * t, unsigned int instance, unsigned int task);
_kernel_oserror * plugin_got_url_access               (WimpMessage * m);

d293 20
@


1.7
log
@fetch_get_raw_data will notice if up->fetching is zero and return a
'finished' status rather than trying to continue reading data for the
fetch. Fetches should never fall through that far but at least it
will cope if they do.

3D table borders are now supported. 2D borders are used if the
inter-cell spacing is too small to fit the borders in (display resolution
dependent) - the external table border is 2D if the internal borders are,
else 3D. For cellspacing of 0, internal table borders must plot over the
outer edge of pixels inside the cell; for all greater spacings, the
borders take up all or part of the gap between them. The external border
will always fit around the outside of the cells, including the
cellspacing value in the gap between the outer cells and the border.

Anti-alias colour for placeholder ALT text was incorrect. Fixed.

I'd changed 'point' to 'points' in some of the Font Choices dialogues;
now changed back to 'point'.

The routine to find out how large an otherwise unsized object or image
placeholder based on its ALT text has been centralised in Reformat.c,
so that the image and object routines can both access it without
code duplication (this means non-image objects will now have the correct
size if they contain ALT text, rather than assuming a standard default
size as before). ALT text in images that were also objects was never
plotted either, though the placeholder size would have been correct.
This has been fixed.
@
text
@d38 23
d286 2
a287 1
_kernel_oserror * plugin_send_original_plugin_reshape (browser_data * b, unsigned int instance, unsigned int task, BBox * position);
@


1.6
log
@Now handles PARAM tags. Sorted out Plug-In bug that was related to Java
setting a 0 by 0 graphics window before calling Wimp_Poll (fixed in Java).
Implemented queue for Plug-Ins so multiple broadcasts aren't sent for
several Objects in one data chunk.

Added Docs directory with some documentation in it. More things to keep
checking for stylistic consistency, horray ;-)

Corrected !Run[D] for Ursula build to need AcornURI but not TaskModule
(URI handler needed for !Mail to pick up mailto: links).

Added display_height field to browser_data, analogous to display_width,
to cope with % sized objects by width and height (see how HRs are
handled in Redraw.c for an example of how it was always fairly easy
with width, but not height until this addition). Though you do have
to reload to get a new size; reformat isn't enough. Must see to this
some time...

Fixed bug where basic typefaces were claimed *before* the Choices file
had been read. For unusual Choices settings, this could create some
'interesting' problems now and again. This was part of narrower scope
work in the Choices code to allow font changing without leaking font
handles (now done; fm_shutdown only ditches fonts, it keeps internal
structures - must then call  fm_lose_fonts for all browsers to get the
bitfields up to date, then rewrite the typeface definitions and reclaim
basic fonts). Noticed that fm_claim_basic_typefaces would claim multiple
instances of the same font if there were several cases of the same font
mapped to different typeface styles - fixed.

Implemented PlugInControl settings, but not SupportObject (fully).
@
text
@d40 4
d45 1
a45 1
#define MPlugIn_Open_OpenAsHelperNotPlugin       (1<<0);
d47 1
a47 1
#define Message_PlugIn_Open    0x4d540
d64 1
a64 1
#define Message_PlugIn_Opening 0x4d541
d66 9
a74 3
#define MPlugIn_Opening_CanAcceptInputFocus      (1u<<0)
#define MPlugIn_Opening_WantsCodeResourceFetched (1u<<1)
#define MPlugIn_Opening_WillDeleteParamsItself   (1u<<2)
d85 3
a87 1
#define Message_PlugIn_Close   0x4d542
d89 1
a89 1
#define MPlugIn_Close_WouldLikePlugInToExit      (1u<<0)
d100 7
a106 1
#define Message_PlugIn_Closed  0x4d543
d120 3
a122 1
#define Message_PlugIn_Reshape 0x4d544
d136 86
a221 1
#define Message_PlugIn_URLAccess 0x4d54d
d243 1
a243 1
/* Other definitions */
@


1.5
log
@Huh? CVS removed PlugIn.c and .h (not completely without reason, BTW)...
So I added it again.
@
text
@d26 12
d116 22
d140 9
a148 9
#define PlugIn_ParamType_Terminator     0
#define PlugIn_ParamType_DataFromPARAM  1
#define PlugIn_ParamType_URLFromPARAM   2
#define PlugIn_ParamType_ObjectRefPARAM 3
#define PlugIn_ParamType_BrowserSpecial 4
#define PlugIn_ParamType_DataFromOBJECT 5
#define PlugIn_ParamType_URLFromOBJECT  6
#define PlugIn_ParamType_DataFromAPPLET 5
#define PlugIn_ParamType_URLFromAPPLET  6
d153 1
a153 1
_kernel_oserror * plugin_write_params                 (browser_data * b, HStream * t, char * buffer, int buffer_size);
a154 1
_kernel_oserror * plugin_broadcast_plugin_open        (browser_data * b, HStream * t, BBox * position);
d159 7
@


1.4
log
@More reformatter code bugs fixed; this one regarding width of items. Any
kerned string was overestimated (causing redraw bugs and caret position
problems in forms, apart from other minor bits elsewhere) and the default
size of a writable icon wasn't especially clever.

Crude Plug-In support; just about manages Java, but can't fetch on
behalf of Plug-In (for example). Had to change the default file access
URL construction to be 'file:/' instead of 'file://', or local file
fetches that reference Java applets won't work. This is in its very
early stages, and is being checked in mostly so that various Choices
issues can be worked on.
@
text
@d29 2
d65 2
d90 26
d118 8
a125 1
const char * plugin_return_string (WimpMessage * m, string_value * sv);
@


1.3
log
@!Run[D] files updated for new fetchers and GopherFetcher; protocols list
in Controls updated for Gopher. Debug builds now require 2760K rather than
2560K. Font$... variables set if not already, in anticipation of font
Choices work.

Additional bits in Choices section of Res file tidied and some name
changes (e.g. Netscape -> Navigator(TM)). Frames support option added
to Choices.

Grouped 'support_frames' under the Fetch Controls section and added
support_object in Global.h; appropriate entries placed in the Choices
files, and are read at startup. At present, though, only the frames
support flag is implemented.

For some reason, Menu was the button to use on history popups if you
wanted to show URLs instead of descriptions (or vice versa, depending
on Choices settings). Now, Select and Menu will show the Choices
defined setting, and Adjust will show the opposite.

History menus are built backwards, so local histories have the most
recently visited pages at the top. Global history has still no real
order to it, but this may be arranged later.

Customer name changed to Customer by request.

Customer browser now gets its own resources (SYSTEM=Customer), but
otherwise is unchanged, with the Ursula build now giving the
'spinning acorn' with a Bookworm-style toolbar. This is used for the
Desktop !Browse build.

!Sprites[22] files updated to include GIF, JPEG and PNG sprites;
!Run[D] files and !Boot files set appropriate File$Type_xxx variables.
Sprites in all sprites files have been checked for unnecessary palettes,
which have been removed where present.
@
text
@@


1.2
log
@Calling HtmlEndParse at the end of html_get_next_token and setting
up->context to NULL was wrong; fetch_fetcher would end up recalling
html_get_next_token later which would then call HtmlParse even though
the document parse had just finished! The HtmlEndParse call has now
been moved to fetch_stop.

Altered reformatter to claim fonts inside a browser, rather than
claiming them for nothing and losing them afterwards.

Got rid of TAG == TABLE and ISBODY tests, replacing with tagno == TAG_TABLE.
Removed all references to TD, TH, TR and TABLE in the style word.
@
text
@d85 4
@


1.1
log
@Big steps forward in vertical white space handling as a result of
improvements in HTMLLib in this area ( -> all versions now 1.22 beta-2).
As a result, the 'last_space' field in browser_data struct has been
removed. Note that this relies quite heavily on setting of the PCDATA
bit in the 'style' field of an HStream and the automatic collapsing
of (for example) multiple P tags inside HTMLLib.

Trace.c improved to recognise various bits in the 'style' field of an
HStream structure.

Phoenix defaults altered to a more 'standard' set of choices; Trinity
as the serif font, with a slightly larger default font size. This is
because there's a good chance it might get released to a wider audience
than Acorn internal (though the animation and icon bar sprites will
have to change before then...).

MiscDefs updated for new SWI numbers in HTTP module; !Run[D] files thus
updated to require HTTP 0.42 or later. At this point, all earlier
modules are not backwards compatible in terms of direct calls to the
HTTP module, though this only affects cookies_process_cookie at present.
At the same time, checks for System$Path, InetDBase$Path, and setting
of Inet$MimeMappings if not already defined have been added to the Run
files along with RMEnsures of Resolver and MimeMap.

Object and PlugIn c/h pairs created to handle OBJECT, EMBED and APPLET,
and the RISC OS Plug-In interface respectively. Not part of the build
process yet. Addition of 'odata' field in browser_data struct and
definition of chunk CK_OBJB for memory_set_chunk_size() are in support
of this.
@
text
@d80 3
d84 1
@
