head	1.6;
access;
symbols
	Browse-2_16:1.6
	Browse-2_15:1.6
	Browse-2_14:1.6
	Browse-2_13:1.6
	Browse-2_12:1.6
	Browse-2_11:1.6
	Browse-2_10:1.6
	Browse-2_09:1.6
	ahodgkin_208_i4_2:1.6
	ahodgkin_208_i4:1.5
	ahodgkin_208_i3:1.5
	ahodgkin_208_i2:1.5
	ahodgkin_208_i1:1.5
	ahodgkin_207release:1.5
	ahodgkin_206release:1.5
	ahodgkin_205release:1.5
	ahodgkin_204release:1.5
	ahodgkin_202release:1.5
	ahodgkin_201release:1.5
	ahodgkin_200release:1.5
	ahodgkin_133beta:1.5
	ahodgkin_132beta:1.5
	ahodgkin_131beta:1.5
	ahodgkin_130beta:1.5
	ahodgkin_129:1.5
	ahodgkin_128beta:1.5
	ahodgkin_128alpha:1.5
	ahodgkin_127beta2:1.5
	ahodgkin_127beta:1.5
	ahodgkin_126beta:1.5
	ahodgkin_AW97patch:1.5
	ahodgkin_AW97:1.5;
locks; strict;
comment	@# @;


1.6
date	2000.05.31.15.58.53;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.10.01.17.18.01;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.09.29.11.24.44;	author dbrown;	state Exp;
branches;
next	1.3;

1.3
date	97.09.26.12.36.07;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.09.22.07.43.30;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.09.18.12.37.27;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.6
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Encoding.h                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Routines to handle the encoding menu.             */
/*                                                            */
/* Author:  K.J.Bracey.                                       */
/*                                                            */
/* History: 05-Sep-1997 (KJB): Created.                       */
/*          10-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_Encoding__
  #define Browser_Encoding__

  #include <kernel.h>
  #include <tboxlibs/toolbox.h>

  #include "Global.h"

  /* Function prototypes */

  int               encoding_select               (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int               encoding_from_document_select (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int               encoding_show_menu            (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

  void              encoding_changed_by_meta      (int encoding, void * handle);

  void              encoding_update_menus         (browser_data * d);
  void              encoding_prepare_menu         (ObjectId o, encoding_priority encoding_priority, int encoding);

  int               encoding_get_encoding_item    (int encoding, ObjectId * encobjid, ComponentId * enccompid);

  ObjectId          encoding_get_menuid           (void);

  _kernel_oserror * encoding_init                 (void);

#endif /* Browser_Encoding__ */
@


1.5
log
@Changed some error handling in Choices, a little bit of reformatting,
removed unnecessary tempstring in Main, and played about with the
choices Res file objects.
@
text
@d15 12
a26 9
/***************************************************/
/* File   : Encoding.h                             */
/*                                                 */
/* Purpose: Routines to handle the encoding menus. */
/*                                                 */
/* Author : K.J.Bracey                             */
/*                                                 */
/* History: 05-Sep-97: Created.                    */
/***************************************************/
d28 2
a29 1
/* Function prototypes */
d31 2
a32 3
int               encoding_select               (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int               encoding_from_document_select (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int               encoding_show_menu            (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
d34 1
a34 1
void              encoding_changed_by_meta      (int encoding, void * handle);
d36 1
a36 2
void              encoding_update_menus         (browser_data *d);
void              encoding_prepare_menu         (ObjectId o, encoding_priority encoding_priority, int encoding);
d38 3
a40 1
int               encoding_get_encoding_item    (int encoding, ObjectId *encobjid, ComponentId *enccompid);
d42 1
a42 1
ObjectId          encoding_get_menuid           (void);
d44 10
a53 1
_kernel_oserror * encoding_init                 (void);
@


1.4
log
@Implemented dialogue based choices.
@
text
@d27 3
a29 3
int  encoding_select               (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  encoding_from_document_select (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
int  encoding_show_menu            (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
d31 1
a31 1
void encoding_changed_by_meta      (int encoding, void * handle);
d33 2
a34 1
void encoding_update_menus         (browser_data *d);
d36 1
a36 1
void encoding_prepare_menu         (ObjectId o, encoding_priority encoding_priority, int encoding);
d38 1
a38 5
int encoding_get_encoding_item     (int encoding, ObjectId *encobjid, ComponentId *enccompid);

ObjectId encoding_get_menuid       (void);

_kernel_oserror * encoding_init    (void);
d40 1
@


1.3
log
@Added support for HTMLLib HttpEndParse call.

Text items with no VALUE specified in the HTML were not cleared on
hitting a Reset button as the text field of the token is NULL; fixed.
SELECT lists with no default selection item were not being changed
on hitting a Reset button; fixed. In radio groups with no default
selection specified, no item will be selected. This goes against
the HTML 2 spec but allows broken Navigator-esque forms behaviour.
In consequence, radios can be deselected by clicking on the same
one twice. I'd fixed the flickering experienced when doing this
recently, but that, now, is irrelevant, since the state of a radio
must always change.

Reformatter's new 'find width of a SELECT field' didn't account for
the width of <none> and <many> items, and now does (particularly
important for broken items with no OPTION contents).

Under certain circumstances, illegally named targets would open in the
ancestor rather than a new window - a deliberate decision in the code,
but now reversed due to a test suite failure; they'll open in a new
window instead.

Altered the left hand indent handling for lists so that headings and
body text follow the Navigator 48 pixel indent and the bullet point
items drop to the left of the left hand margin, rather than sitting
on the margin with the text indented to the right.

Tightened up the hotlist_load_directory checking of URLs, so that
only those with '://' in - i.e. look fully specified - are accepted.
HTML files are loaded into a new directory now.

Items without a descriptive title in hotlist_new_url will have the URL
substituted in instead. White space before and after descriptions and
after URLs is stripped. Directories with zero length names or null
strings (after white space is stripped) will still be created, with a
generic name (see Messages, token 'HotlistUntitled').
@
text
@d33 10
a42 1
void encoding_update_menus         (browser_data * b);
@


1.2
log
@Now working on source merged with Kevin Bracey's internationalisation
support. UNIFONT is undefined in the Make File for now. All Res and
Choices files updated appropriately.

Having sorted out the old Choices and Messages to form Choices, Controls
and Messages, this build has had the same cleaning up done internally.
This includes greater consistency in naming schemes and the removal of
the inconsitent choices items - e.g. Choices file entries saying 'delay
images' and 'plain backgrounds' where internally all the flags say 'show
images' and 'show backgrounds'. ChoiceDefs.h and CtrlDefs.h added to
clarify the meaning of some fields, though usage of these is not 100%
in the source (there are cases where parameters are passed through to
functions as ints, and those functions still check these against hard
coded values rather than the #define stuff).

Fetcher status return bits (connected, sent request, etc.) now reflected
in status bar. Progress during fetchs to files are reported by %, where
the size of the object is known. Exceeding 100% drops back to a byte
counter, in case the estimated size was wrong. The progress counter
may be updated after specific delays, rather than 'as often as possible',
to reduce flicker (as requested by D.Brown some time ago).

I've done a small rewrite of the fetch prioritisation scheme in FetchPage.c;
how well this performs in general use across different processor speeds
remains to be tested, but certainly it has some advantages. For each small
fetch window before the rewrite, a 4cs tight loop was entered - this gave a
noticable and substantial drain to the Desktop performance if more than one
was opened. Now, several can be up at once with little hit. The actual file
fetch is on half the priority it was before, with all others taken back
just a bit - e.g. from 20cs per poll to 15cs per poll for flat out
reformatting. You don't seem to lose much time on the format in practice,
and the Desktop feels quite a bit lighter at the same time. There's the
potential for smoother frameset loading in this scheme, too.

When Shift+Clicking on a link meant you still fetched inside the main
browser window, several fetches could occur in a frameset - one per frame.
However, now that you can only do this by clicking on a link that leads to
non-displayable data - or by turning off the small fetch windows by
setting UseSmall to 'no' in Choices - a bug where fetchpage_preprocessed
would stop such fetches as new ones were started was revealed.
The API to frames_abort_fetching has now been extended to include a
'stop file spooling too' flag, allowing a fix to be made by having
fetchpage_preprocess's calls not set this (and it doesn't check the
savelink flag is unset before proceeding, since frames_abort_fetching
does that implicitly now).

Had left the RAM transfer buffer at 16 bytes (from testing) accidentally...
Oops. Upped it to 4K. In addition, when loading data by RAM transfer,
the browser didn't notice if a RAMFetch bounced during the transfer. It
would be treated as a 'first' RAMFetch bounce, basically, and try to go to
file transfer - oops. Fixed.
@
text
@d27 3
a29 3
int  encoding_select               (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int  encoding_from_document_select (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int  encoding_show_menu            (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
d33 1
a33 1
void encoding_update_menus         (browser_data *d);
@


1.1
log
@Encoding support added: if UNIFONT is defined then the browser will
attempt to use the system font to render Unicode characters (new
International module required). If not defined, the browser will just
handle Acorn Latin-1 characters, but HTMLLib will convert other encodings
into Latin-1. Must keep the UNIFONT define in sync with HTMLLib (if
defined HTMLLib outputs UTF-8, otherwise Acorn Latin-1).

Still needed:

Reverse encoding (converting form input etc back into the server's
character set).
Reparse when encoding changes.
Setting of charset from an attribute on the <A> tag.
@
text
@d27 3
a29 3
int encoding_select              (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int encoding_from_document_select(int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
int encoding_show_menu           (int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle);
d31 1
a31 1
void encoding_changed_by_meta    (int encoding, void * handle);
d33 1
a33 1
void encoding_update_menus       (browser_data *d);
@
