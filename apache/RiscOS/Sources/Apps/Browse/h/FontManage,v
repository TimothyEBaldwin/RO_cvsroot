head	1.13;
access;
symbols
	Browse-2_16:1.13
	Browse-2_15:1.13
	Browse-2_14:1.13
	Browse-2_13:1.13
	Browse-2_12:1.13
	Browse-2_11:1.12
	Browse-2_10:1.12
	Browse-2_09:1.12
	ahodgkin_208_i4_2:1.11
	ahodgkin_208_i4:1.10
	ahodgkin_208_i3:1.10
	ahodgkin_208_i2:1.10
	ahodgkin_208_i1:1.10
	ahodgkin_207release:1.10
	ahodgkin_206release:1.10
	ahodgkin_205release:1.10
	ahodgkin_204release:1.10
	ahodgkin_202release:1.10
	ahodgkin_201release:1.10
	ahodgkin_200release:1.10
	ahodgkin_133beta:1.10
	ahodgkin_132beta:1.10
	ahodgkin_131beta:1.10
	ahodgkin_130beta:1.9
	ahodgkin_129:1.8
	ahodgkin_128beta:1.8
	ahodgkin_128alpha:1.8
	ahodgkin_127beta2:1.7
	ahodgkin_127beta:1.7
	ahodgkin_126beta:1.7
	ahodgkin_AW97patch:1.7
	ahodgkin_AW97:1.6;
locks; strict;
comment	@# @;


1.13
date	2006.03.13.22.06.20;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.26.09.42.35;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	2000.05.31.15.58.54;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	98.01.31.10.55.44;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	97.12.18.10.07.14;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.12.02.16.14.12;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.10.17.11.08.37;	author dbrown;	state Exp;
branches;
next	1.6;

1.6
date	97.10.16.13.23.22;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.10.15.15.10.26;	author dbrown;	state Exp;
branches;
next	1.4;

1.4
date	97.10.13.07.07.06;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.08.18.10.00.12;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.08.01.09.00.58;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.29.30;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.13
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    FontManage.h                                      */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: A range of font management veneers.               */
/*                                                            */
/* Author:  A.D.Hodgkinson, including various functions from  */
/*          original Customer browser by Merlyn Kline.       */
/*                                                            */
/* History: 05-Dec-1996 (ADH): Created.                       */
/*          10-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_FontManage__
  #define Browser_FontManage__

  #include <kernel.h>
  #include <tboxlibs/wimp.h>
  #include <HTMLLib/HTMLLib.h>

  #include "Global.h"

  /* General definitions */

  #define FM_Standard_Size (205) /* Standard system font size. See Merlyn's  */
                                 /* comments at the top of FontManage.c.     */

  #define FM_OSUnits     (1<<4)  /* X and Y are OS units flag for Font_Paint */
  #define FM_GivenBuffer (1<<5)  /* Buffer given for Font_ScanString         */
  #define FM_GivenLength (1<<7)  /* String length given in Font_ScanString   */
  #define FM_GivenHandle (1<<8)  /* Font handle passed to Font_Paint         */
  #define FM_Kern        (1<<9)  /* Use autokerning if font data supports it */
  #define FM_Blend       (1<<11) /* Use font blending (if font manager can!) */

  #define FM_System_Handle(x,y) (0x80000000 | ((x)<<14) | (y))
  #define FM_System_Size_X(h)   (((h) >> 14) & 0x3FFF)
  #define FM_System_Size_Y(h)   ((h) & 0x3FFF)

  /* Local structures */

  typedef struct fm_typeface
  {
    char name            [Limits_FaceName]; /* Typeface name, in lower case */
    char fontnames   [4] [Limits_FontName]; /* RO fonts for normal, italic, bold & bold-italic */
    char alternative     [Limits_FaceName]; /* Name of the alternative typeface */

  } fm_typeface;

  typedef struct fm_facelist
  {
    struct fm_facelist * next; /* Point to next item in typeface list */
    fm_typeface          face; /* A typeface entry (see above)        */

  } fm_facelist;

  typedef int fm_face; /* Makes the code less ambiguous to have this */

  /* Function prototypes */

  fm_typeface     * fm_find_typeface             (const char * restrict name);

  _kernel_oserror * fm_define_typeface_explicit  (fm_typeface * f);
  _kernel_oserror * fm_define_typeface           (const char * description);
  _kernel_oserror * fm_define_default_typefaces  (void);
  void              fm_claim_basic_typefaces     (int base_size);

  int               fm_size                      (int size);

  fm_face           fm_find_font                 (browser_data * restrict b, const char * restrict name, int xsize, int ysize, int italic, int bold);
  void              fm_lose_font                 (browser_data * restrict b, fm_face h);
  void              fm_lose_fonts                (browser_data * restrict b);
  _kernel_oserror * fm_rescale_fonts             (browser_data * restrict b);

  _kernel_oserror * fm_font_box                  (fm_face h, BBox * restrict box);
  _kernel_oserror * fm_char_box                  (fm_face h, char c, BBox * restrict box);
  _kernel_oserror * fm_set_font_colour           (fm_face h, unsigned int fore, unsigned int back);
  _kernel_oserror * fm_puts                      (fm_face h, int x, int y, const char * restrict s, int os, int blend);
  _kernel_oserror * fm_putsl                     (fm_face h, int x, int y, const char * restrict s, size_t numbytes, int os, int blend);

  _kernel_oserror * fm_write_descriptor          (const char * restrict name, char * restrict buffer);
  _kernel_oserror * fm_write_name                (int number, char * restrict buffer, int italic, int bold);
  int               fm_find_font_index_by_handle (fm_face handle, int * r_xsize, int * r_ysize);
  _kernel_oserror * fm_read_typeface             (fm_typeface * restrict face);

  void              fm_destroy_typefaces         (void);
  void              fm_set_system_font           (int systemfont);
  int               fm_system_font               (void);

  void              fm_init                      (int systemfont, int base_size);
  void              fm_init_sizes                (int base_size);
  void              fm_shutdown                  (void);

  _kernel_oserror * fm_get_string_width          (fm_face h, const char * s, int maxwid, int maxbytes, int split, int * restrict bytes, int * restrict width);

  void              fm_token_font_info           (const HStream * restrict t, int * restrict facenum, int * restrict size, int * restrict italic, int * restrict bold);
  fm_face           fm_find_token_font           (browser_data * restrict b, const HStream * restrict t, int ignore_styles);

#endif /* Browser_FontManage__ */
@


1.12
log
@  Huge pile of changes bringing relatively ancient sources up to date.
Detail:
  This check-in includes Phoenix version 2.11 (26-Apr-2005); only the
  debug and JavaScript builds of Phoenix have been tested and resources
  will definitely be out of date for other versions. The various "!..."
  scripts have been updated to require a minimum of 2MB with no maximum
  limit for building, as CC 5.60 is quite RAM hungry.
Admin:
  Phoenix 2.11 JS builds OK, works reasonably well. Many outstanding
  issues of course, as this is a very outdated browser now.

Version 2.09. Tagged as 'Browse-2_09'
@
text
@d75 1
a75 1
  fm_typeface     * fm_find_typeface            (char * name);
d77 30
a106 29
  _kernel_oserror * fm_define_typeface_explicit (fm_typeface * f);
  _kernel_oserror * fm_define_typeface          (char * description);
  _kernel_oserror * fm_define_default_typefaces (void);
  void              fm_claim_basic_typefaces    (int base_size);

  int               fm_size                     (int size);

  fm_face           fm_find_font                (browser_data * b, char * name, int xsize, int ysize, int italic, int bold);
  void              fm_lose_font                (browser_data * b, fm_face h);
  void              fm_lose_fonts               (browser_data * b);
  _kernel_oserror * fm_rescale_fonts            (browser_data * b);

  _kernel_oserror * fm_font_box                 (fm_face h, BBox * box);
  _kernel_oserror * fm_char_box                 (fm_face h, char c, BBox * box);
  _kernel_oserror * fm_set_font_colour          (fm_face h, unsigned int fore, unsigned int back);
  _kernel_oserror * fm_puts                     (fm_face h, int x, int y, const char * s, int os, int blend);
  _kernel_oserror * fm_putsl                    (fm_face handle,int x, int y, char * s, int chars, int os, int blend);

  _kernel_oserror * fm_write_descriptor         (char * name, char * buffer);
  _kernel_oserror * fm_write_name               (int number, char * buffer, int italic, int bold);
  _kernel_oserror * fm_read_typeface            (fm_typeface * face);

  void              fm_destroy_typefaces        (void);
  void              fm_set_system_font          (int systemfont);
  int               fm_system_font              (void);

  void              fm_init                     (int systemfont, int base_size);
  void              fm_init_sizes               (int base_size);
  void              fm_shutdown                 (void);
d108 1
a108 1
  _kernel_oserror * fm_get_string_width         (fm_face h, const char * s, int maxwid, int maxbytes, int split, int * bytes, int * width);
d110 2
a111 2
  void              fm_token_font_info          (HStream * t, int * facenum, int * size, int * italic, int * bold);
  fm_face           fm_find_token_font          (browser_data * b, HStream * t, int ignore_styles);
@


1.11
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d91 1
a91 1
  _kernel_oserror * fm_set_font_colour          (fm_face h, int fore, int back);
@


1.10
log
@Check for WindowManager 3.97 and ensure Unicode$Path is set in all
!Run[D] files, don't set the Alias$@@PrintType_FF4 variable, and updated
Customer build ROM obey file variants. Various other changes to
the Run files for new module versions, updated paths to support
new positions of choices, hotlist and histories (see later), etc.

!Sprites[22] files hold small !app icons for some variants, and
an ic_browse sprite. Some variants now have a Sprites and Sprites22
file instead of just Sprites, with the former containing various
mode 12 or 15 specific sprites.

Text files dragged to the URL writable are treated as ANT URL files. This
relies on URLBarWrit (Toolbars.h) being a unique ID, which it should be,
but beware of the Hotlist and Choices numberspaces...

INPUT TYPE=BUTTON supported. Form items without a FORM tag are now shown
(as MSIE 4, but not NN 4).

'*', '-', '@@', '_' and '.' are not escaped when submitting forms now. The
Web interface to the IMDb now works.

INPUT TYPE=HIDDEN items will not affect the line height anymore - so
http://www.hotmail.com/ now has correctly aligned writable icons, for
example. Similarly, TAG_FORM and TAG_FORM_END items could push up
line height and don't anymore.

HRs with a specified pixel width will now influence the size of a table
cell (they didn't before).

BRs now checked by tagno field when the browser needs to know something
was an actual BR tag rather than just a line break signal, and by the
style bit entry when only the indication of a line break is required.

Table widths of 0 or 0% are ignored.

Trace.c updated to report height and background fields in a table_stream.

fm_putsl() writes a terminator into the string; the Forms.c routines were
calling this for displaying INPUT TYPE=PASSWORD fields using the FE_PassCode
literal string (a line of stars). This write into a read only data area
would make the debugger fault the access. A local char array is now used
instead, to get round this (note the use of var[]=literal rather than
var[sizeof(literal)]; strcpy(var, literal) due to some weird compiler bug
that copies the wrong thing into 'var' under some (undefined...)
circumstances).

Text areas don't scroll back to the top line when clicked in anymore;
single line writables don't scroll back to the left either. When
reentering a text area from 'above', the caret appears at the top line
rather than 'somewhere further down'...

ARROWS_MOVE_OUT compile time option at the top of Forms.c defines whether
you must press Tab/Shift+Tab to move between writable fields in forms or
if up/down will drop out of them, though if keyboard control is on this
is enforced (or you get trapped inside the form!).

urlutils_filetype_from_url now uses MimeMap module.

If fetcher is told a page is text, it'll check for a filename extension and
may choose to use this instead (e.g. it may find it's HTML instead). This
is to try and get around duff servers... (e.g. http://www.batalarms.co.uk/).

Save dialogues shouldn't flicker when options that don't change the
filetype are selected (before, the draggable sprite was always reset for
each selection). Noticed the erroneous setting of a static variable in
SaveFile.c by a call to this by SaveObject.c, and so added a flag to
savefile_set_filetype to deal with this - would have been possible to get
the wrong filetype sent to applications or at best the wrong filetype
sprite in the dialogue without that.

The caret shouldn't jump out of a form back to the URL writable if the page
reformats now.

Table background colours now supported (as in the colour you see in the
border space if the cellspacing is large enough; this is as in MSIE, not
as in Navigator). Drawfile output routines updated accordingly.

Corrected erroneous use of wimpt_dx() / wimpt_dy() in a couple of places
in Images.c, which meant that (say) 1x1 images didn't work correctly in
medium resolution display modes.

Now have support for save as text (component ID and event 0x12) and save
as Draw (component ID and event 0x13) buttons. Dubious conditions for
greying and ungreying the print, save source and view source buttons and
menu options sorted out as part of implementing the same for the two new
buttons; added greying out of their associated menu items in passing.

Turned kerning on in draw file objects (does mean a rather heinous
increase in file size, but this is the only way to ensure the draw file
matches the visible page).

Comments before functions in SaveDraw.c are now complete and up to date.

Image and visit histories now generate a crude hash number to speed up
searching for items. It does give a speed increase, though it's a
disappointingly small one.

Issue of left/right margins and cellpaddings sorted out. Now have
redraw_left/right_margin for finding out the basic gap you must leave.
redraw_left/right_gap then gives any extra indentation for LI, BLOCKQUOTE
or whatever. The last two can be subtracted from the display width to
get an available page width for any section of text. Note that
redraw_left_gap replaces redraw_margin. The redraw_start_x function
uses the above to work out where a line's left hand edge should be,
taking account of left/right/centre alignment. HRs have been fixed now
(they were quite broken in v1.30, I think) based on this new model and
the behaviour of MSIE/NN 4.

Fixed width of cells with no contents - cell padding values wouldn't
have worked properly as the reformatter returns 0 rather than the left
hand margin size if given no stream.

Removed FM_Absolute flags for Font_Paint (spotted by DBrown) - sets bit
2, which is reserved...?

IMG width and height in % terms now works correctly; a % of available
width (after margins and indents) or height on the main page or for
a table cell, if the image lies in one. Because of the chicken-and-egg
problem with the latter, the cell must specify a width and/or height
for things to work properly. If this is not done, you'll usually end
up with a 1:1 scaled image (as in Navigator 4, rather than ending up
with no image or even no cell (!), as in MSIE 4).

HEIGHT attribute on a TABLE tag is supported, but only in a crude
fashion; the extra height (if there is any) is distributed over the
rows in a linear fashion. This is probably all you have to do in
practice, but I haven't checked. To maintain a notion of min/max
height as well as width would of course require a great deal more
work...

If using client pull to reload a page with a fragment ('...#name')
specified, then the reload wouldn't work on the same page; it'd just
jump to the fragment position. This won't happen if b->reloading is
set now (so works in conjunction with client pull on the same page
forcing a non-cached fetch). Similarly, if POSTing to such a URL,
a fetch will proceed (both these fixes done originally for
http://jupiter.beseen.com/chat/rooms/g/1678/).

browser_inherit split to browser_inherit and browser_inherit_post_data;
the code for the latter didn't clear any post_data in the child before
copying from the parent either, and could cause flex errors (now fixed).

Res file for Ursula ('Desktop' Browse) build tweaked - bits in the
font choices dialogue renamed, and button bar rearranged to hold the
new Save As Draw button. Other builds have had Save As Draw and
Save As Text buttons added, or not, depending upon availability of
suitable sprites, required UI simplicity, etc.

Now have:

  Browse$ChoicesFile
  Browse$ControlsFile
  Browse$ChoicesSave
  Browse$ControlsSave

(the last two are new) for loading and saving of the Choices or Controls
files. If unset, <App$Dir>.Choices or <App$Dir>.Controls will be set.
E.g., you could set Browse$ChoicesFile to be:

  <App$Dir>.Choices,Choices:WWW.(app).Choices

for loading and

  <Choices$Write>.WWW.(app).Choices

for saving. (The browser never saves Controls at the moment, so the
relevant variable above isn't effectively implemented, but could be
in future). Similarly, to support asymetric loading/saving of the Hotlist,
there are HotlistSave, HistorySave and ImageHistorySave entries in Choices
to complement HotlistPath, HistoryPath and ImageHistoryPath (which are used
for loading). save_save_choices will create directories as needed to obtain
the given path (and has also been fixed in various areas that hadn't been
tested out until now; e.g. zero termination of the AppName$ChoicesFile
variable expansion...). !Run[D] files updated appropriately.

Table widthing code rewritten. Slower, but a lot better on the whole.
Still has some problems - still needs a final 'make sure nothing is
below minimum width' scan, which it should be possible to do without.
No time to fix this at present!

The reformatter will now 'glue together' an LI token followed by any
non-LI token; so a bullet point followed by an item should not be able to
have a line break inserted after the bullet because of very tight width
constraints (it could before - yuk...).

'about:' brings up a page about the browser and any Plug-Ins, as with
Navigator (for example).

URI files support titles, as per spec. version 8. Saving a current
location to the Hotlist will thus give a sensible title now (unless
you're in a frame, so there's no title to get...). Of course, v1.00
files without a title still work.

Note that NOBR is *not* supported in this build and this combined with
the new table widther may cause problems on some sites (e.g. Microsoft's
home page!).
@
text
@d15 13
a27 79
/***************************************************/
/* File   : FontManage.h                           */
/*                                                 */
/* Purpose: A range of font management veneers.    */
/*                                                 */
/* Author : Merlyn Kline for Customer browser     */
/*          This source adapted by A.D.Hodgkinson  */
/*                                                 */
/* History: 05-Dec-96: Created.                    */
/***************************************************/

/* General definitions */

#define FM_Standard_Size (205) /* Standard system font size. See Merlyn's  */
                               /* comments at the top of FontManage.c.     */

#define FM_OSUnits     (1<<4)  /* X and Y are OS units flag for Font_Paint */
#define FM_GivenBuffer (1<<5)  /* Buffer given for Font_ScanString         */
#define FM_GivenLength (1<<7)  /* String length given in Font_ScanString   */
#define FM_GivenHandle (1<<8)  /* Font handle passed to Font_Paint         */
#define FM_Kern        (1<<9)  /* Use autokerning if font data supports it */
#define FM_Blend       (1<<11) /* Use font blending (if font manager can!) */

#define FM_System_Handle(x,y) (0x80000000 | ((x)<<14) | (y))
#define FM_System_Size_X(h)   (((h) >> 14) & 0x3FFF)
#define FM_System_Size_Y(h)   ((h) & 0x3FFF)

/* Local structures */

typedef struct fm_typeface
{
  char name            [Limits_FaceName]; /* Typeface name, in lower case */
  char fontnames   [4] [Limits_FontName]; /* RO fonts for normal, italic, bold & bold-italic */
  char alternative     [Limits_FaceName]; /* Name of the alternative typeface */

} fm_typeface;

typedef struct fm_facelist
{
  struct fm_facelist * next; /* Point to next item in typeface list */
  fm_typeface          face; /* A typeface entry (see above)        */

} fm_facelist;

typedef int fm_face; /* Makes the code less ambiguous to have this */

/* Function prototypes */

fm_typeface     * fm_find_typeface            (char * name);

_kernel_oserror * fm_define_typeface_explicit (fm_typeface * f);
_kernel_oserror * fm_define_typeface          (char * description);
_kernel_oserror * fm_define_default_typefaces (void);
void              fm_claim_basic_typefaces    (int base_size);

int               fm_size                     (int size);

fm_face           fm_find_font                (browser_data * b, char * name, int xsize, int ysize, int italic, int bold);
void              fm_lose_font                (browser_data * b, fm_face h);
void              fm_lose_fonts               (browser_data * b);
_kernel_oserror * fm_rescale_fonts            (browser_data * b);

_kernel_oserror * fm_font_box                 (fm_face h, BBox * box);
_kernel_oserror * fm_char_box                 (fm_face h, char c, BBox * box);
_kernel_oserror * fm_set_font_colour          (fm_face h, int fore, int back);
_kernel_oserror * fm_puts                     (fm_face h, int x, int y, const char * s, int os, int blend);
_kernel_oserror * fm_putsl                    (fm_face handle,int x, int y, char * s, int chars, int os, int blend);

_kernel_oserror * fm_write_descriptor         (char * name, char * buffer);
_kernel_oserror * fm_write_name               (int number, char * buffer, int italic, int bold);
_kernel_oserror * fm_read_typeface            (fm_typeface * face);

void              fm_destroy_typefaces        (void);
void              fm_set_system_font          (int systemfont);
int               fm_system_font              (void);

void              fm_init                     (int systemfont, int base_size);
void              fm_init_sizes               (int base_size);
void              fm_shutdown                 (void);
d29 2
a30 1
_kernel_oserror * fm_get_string_width         (fm_face h, const char * s, int maxwid, int maxbytes, int split, int * bytes, int * width);
d32 81
a112 2
void              fm_token_font_info          (HStream * t, int * facenum, int * size, int * italic, int * bold);
fm_face           fm_find_token_font          (browser_data * b, HStream * t, int ignore_styles);
@


1.9
log
@Not all resources are up to date in this check-in, and documentation
both within source and stuff in 'Docs' is out of date or missing - I
was very pushed for time on this one... Hopefully will do another
'tidy up' check-in before close on Friday; until then, beware of
anything other than the Ursula (Desktop browser) build. Anyway...

Export As Draw done. As part of this, FONT SIZE and SUP / SUB adjustment
of font size is done in fm_token_font_info rather than fm_find_token_font.

Bullets and switches are plotted as indirected sprite items, rather than
indirected text + sprite items - this relied on being in a redraw loop to
pick the sprites up from the local pool (failed during printing).

URI files now have a LF line ending rather than CR... '*' recognised
as an empty field when loading via. RAM transfer now (only worked for
loading from disc before).

Gave placeholder bounding boxes 4 OS units more minimum extra gap
vertically and reduced horizontal addition to this value * 1.5, rather
than * 2 (see reformat_get_placeholder_size).

Background image tiling starts at ymax - h + 4, rather than ymax, so
there isn't the bottom line of pixels from the top tile always present
at the top of the window. The '+4' is for caution's sake.

Can now save a frame's HTML source, that of its parent or its ancestor,
and the same for the URI pointing to those documents - see Menus.h for
the relevant component IDs that should lead to the SaveFile dialogue.

Have hopefully fixed timeout = 0 values (i.e. 'forever') on things
like LinkTo; before, image fetches could override the state (so you'd
only ever see brief flickers of a given URL as the pointer went over
a link).

Save File dialogue will remember the state of option or radio buttons
for a given parent component origin and restore that state when the
dialogue is next opened from the same place (stops turning on saving
as a URL file also turning on 'save background images' for Draw file
export, etc.).

Use of a META tag to reload the *same* page now sets the 'reloading'
flag in the browser so that it doesn't go through a proxy - otherwise
pages which are meant to update periodically through client pull
don't work, as they keep coming out of the cache.

Can now handle images specifying just a width or height in the HTML
(other dimension is scaled accordingly, but note that the placeholder
size must still be 'dumb' until the image data comes in). An image
will now override an image history size entry for the same entry
with a different size.
@
text
@a30 1
#define FM_Absolute    (1<<2)  /* Absolute coordinates flag for Font_Paint */
@


1.8
log
@Implemented Message_PlugIn_ReshapeRequest, Message_PlugIn_Status and
Message_PlugIn_Busy. Plug-in code more robust when given invalid
browser instance handles by the plug-in.

Line spacing is now calculated on the basis of the normal style base serif
font, with all other fonts being forced into that line height. This does
mean that an unusually tall (say) sans serif font may get clipped. It
appears to be the only way to get around wildly different baseline
depths returned from the font metrics - you can't work out line spacing
based on each different font style; the line spacing will vary.

Table heighting (as opposed to widthing...) improved considerably; rowspan
can no longer cause very tall cells in odd places. Having trouble getting
rid of the single pixel breaks between vertically adjacent cells, though
I've not tried too hard. Widthing, though, seems fairly badly broken at
present... :-/

Set/clear of page_is_text flag made more robust (it looked as though there
was the potential for this to get stuck in a set state, though I've never
see the front-end behave in a manner which indicates this is the case).
The reformatter will now decrease leading if this flag is set (plain text
pages look daft with a line spacing that is OK for 'rich' text pages).
No reformatting is done if the page width changes by dragging on the
resize icon, though toggle size / full screen will still reformat even
if the contents are only text (browser needs to sort out various width
flags at this point).

Cut down on excessive redrawing when reformatting due to a change in
window dimensions is not done. If display_width hasn't changed, then no
redraw is needed. If this causes redraw problems, then whatever is
changing display_width needs investigating. It shouldn't be kludged
(basically) by forcing a redraw instead of a reformat.

TT/PRE/etc. text can now have a non-100% aspect ratio. 80-90% looks
best (ArcWeb, for example, uses 86%). New option 'TTAspect' in
the Choices files.

Debug builds link to a non-debug Unicode library now; stops stderr
being dumped to the bottom left of the screen if you've not redirected
it in the Run file.

RISC OS 3.1 seems to need more initial WimpSlot than later OS versions.
The 64 deep nested table set gives a 'No stack for trap handler' error
(which it really means in this case!) without 800K, even though 3.71
is happy with just 640K. So, the !Run file checks if Boot$OSVersion
is exactly 300, 310 or 311, and sets the WimpSlot accordingly.

!Run[D] files now require latest fetcher module versions (URL 0.21,
File 0.31, HTTP 0.58).
@
text
@d78 1
a78 1
_kernel_oserror * fm_font_box                 (fm_face h,BBox * box);
d80 3
a82 3
_kernel_oserror * fm_set_font_colour          (fm_face h,int fore,int back);
_kernel_oserror * fm_puts                     (fm_face h,int x,int y,const char * s,int os,int blend);
_kernel_oserror * fm_putsl                    (fm_face handle,int x,int y,char * s,int chars,int os,int blend);
d84 2
a85 2
_kernel_oserror * fm_write_descriptor         (char * name,char * buffer);
_kernel_oserror * fm_write_name               (char * name,char * buffer,int italic,int bold);
@


1.7
log
@Implemented font size choices.
@
text
@d99 1
a99 1
fm_face           fm_find_token_font          (browser_data * b, HStream * t);
@


1.6
log
@Now handles PARAM tags. Sorted out Plug-In bug that was related to Java
setting a 0 by 0 graphics window before calling Wimp_Poll (fixed in Java).
Implemented queue for Plug-Ins so multiple broadcasts aren't sent for
several Objects in one data chunk.

Added Docs directory with some documentation in it. More things to keep
checking for stylistic consistency, horray ;-)

Corrected !Run[D] for Ursula build to need AcornURI but not TaskModule
(URI handler needed for !Mail to pick up mailto: links).

Added display_height field to browser_data, analogous to display_width,
to cope with % sized objects by width and height (see how HRs are
handled in Redraw.c for an example of how it was always fairly easy
with width, but not height until this addition). Though you do have
to reload to get a new size; reformat isn't enough. Must see to this
some time...

Fixed bug where basic typefaces were claimed *before* the Choices file
had been read. For unusual Choices settings, this could create some
'interesting' problems now and again. This was part of narrower scope
work in the Choices code to allow font changing without leaking font
handles (now done; fm_shutdown only ditches fonts, it keeps internal
structures - must then call  fm_lose_fonts for all browsers to get the
bitfields up to date, then rewrite the typeface definitions and reclaim
basic fonts). Noticed that fm_claim_basic_typefaces would claim multiple
instances of the same font if there were several cases of the same font
mapped to different typeface styles - fixed.

Implemented PlugInControl settings, but not SupportObject (fully).
@
text
@d93 1
@


1.5
log
@Font choices added (currently doesn't free old browser fonts).
@
text
@d64 2
a98 7

fm_typeface     * fm_find_typeface            (char * name);

/* These are declared as static inside FontManage.c: */

/* fm_typeface * fm_new_typeface  (void);                                                    */
/* fm_face       fm_sub_find_font (fm_typeface * f,int xsize,int ysize,int italic,int bold); */
@


1.4
log
@More reformatter code bugs fixed; this one regarding width of items. Any
kerned string was overestimated (causing redraw bugs and caret position
problems in forms, apart from other minor bits elsewhere) and the default
size of a writable icon wasn't especially clever.

Crude Plug-In support; just about manages Java, but can't fetch on
behalf of Plug-In (for example). Had to change the default file access
URL construction to be 'file:/' instead of 'file://', or local file
fetches that reference Java applets won't work. This is in its very
early stages, and is being checked in mostly so that various Choices
issues can be worked on.
@
text
@d98 2
a101 1
/* fm_typeface * fm_find_typeface (char * name);                                             */
@


1.3
log
@Odd problem with Entries file meant none got checked in last time...
@
text
@d33 2
d77 1
@


1.2
log
@Made INPUT type=image work
@
text
@d17 3
a19 1
/* Purpose: A range of veneers for font management */
d22 2
a23 1
/* History: 05-Dec-96: Created                     */
d45 3
a47 3
  char name            [TypeNameLen]; /* Typeface name, in lower case */
  char fontnames   [4] [FontNameLen]; /* RO fonts for normal, italic, bold & bold-italic */
  char alternative     [TypeNameLen]; /* Name of the alternative typeface */
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d73 1
a73 1
_kernel_oserror * fm_puts                     (fm_face h,int x,int y,char * s,int os,int blend);
d87 1
a87 1
_kernel_oserror * fm_get_string_width         (fm_face h, char * s, int maxwid, int maxbytes, int split, int * bytes, int * width);
@
