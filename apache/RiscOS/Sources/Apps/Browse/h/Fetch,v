head	1.10;
access;
symbols
	Browse-2_16:1.10
	Browse-2_15:1.10
	Browse-2_14:1.10
	Browse-2_13:1.10
	Browse-2_12:1.10
	Browse-2_11:1.9
	Browse-2_10:1.9
	Browse-2_09:1.9
	ahodgkin_208_i4_2:1.9
	ahodgkin_208_i4:1.8
	ahodgkin_208_i3:1.8
	ahodgkin_208_i2:1.8
	ahodgkin_208_i1:1.8
	ahodgkin_207release:1.8
	ahodgkin_206release:1.8
	ahodgkin_205release:1.8
	ahodgkin_204release:1.8
	ahodgkin_202release:1.7
	ahodgkin_201release:1.6
	ahodgkin_200release:1.6
	ahodgkin_133beta:1.6
	ahodgkin_132beta:1.6
	ahodgkin_131beta:1.6
	ahodgkin_130beta:1.6
	ahodgkin_129:1.6
	ahodgkin_128beta:1.5
	ahodgkin_128alpha:1.5
	ahodgkin_127beta2:1.5
	ahodgkin_127beta:1.5
	ahodgkin_126beta:1.5
	ahodgkin_AW97patch:1.4
	ahodgkin_AW97:1.4;
locks; strict;
comment	@# @;


1.10
date	2006.03.13.22.06.20;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	2000.05.31.15.58.54;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	98.03.26.14.21.15;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	98.03.20.12.13.05;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.12.12.11.18.11;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.10.30.17.11.21;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.10.08.12.17.29;	author kbracey;	state Exp;
branches;
next	1.3;

1.3
date	97.09.14.19.18.20;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.08.18.10.00.11;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.29.27;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.10
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Fetch.h                                           */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Mid-level fetch functions, concerned mostly with  */
/*          HStreams but not low level HTMLLib interfacing.   */
/*          Compare with FetchPage.h, which provides a much   */
/*          higher level interface.                           */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 25-Nov-1996 (ADH): Created.                       */
/*          17-Aug-1997 (ADH): Split up to form URLveneer.c   */
/*                             and FetchHTML.c.               */
/*          10-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_Fetch__
  #define Browser_Fetch__

  #include <kernel.h>
  #include <HTMLLib/HTMLLib.h>

  #include "Global.h"
  #include "URLstat.h"

  /* General definitions */

  #define DISPLAY_NAMED ((HStream *) 0x1) /* Anything which can never be an address, and not NULL */
  #define ISBULLET(p)   ((((p)->style) & LI) && !((p)->text))
  #define ISLINK(p)     ((((p)->style) & A) && ((p)->anchor))
  #define ISOBJECT(p)   ((((p)->tagno) == TAG_OBJECT) && !((p)->flags & HFlags_IgnoreObject))
  #define ISTABLE(p)    ((((p)->tagno) == TAG_TABLE) && (((table_stream *) (p))->cells) != NULL)

  #define ISINPUT(p)    (((p)->tagno) == TAG_INPUT)
  #define ISTEXTAREA(p) (((p)->tagno) == TAG_TEXTAREA)
  #define ISSELECT(p)   (((p)->tagno) == TAG_SELECT)

  /* Function prototypes */

  _kernel_oserror * fetch_start                 (browser_data * b);
  int               fetch_fetching              (browser_data * b);
  char            * fetch_find_name_tag         (char * url);
  HStream         * fetch_find_anchor_token     (browser_data * b, char * anchor);
  HStream         * fetch_find_text_token       (browser_data * b, char * text, HStream * last_t, int last_o, int * offset, int cs, int forwards);
  void              fetch_preprocess_token      (browser_data * b, HStream * tptr);
  void              fetch_fetcher               (browser_data * b);
  int               fetch_chkerror              (browser_data * b, _kernel_oserror * e);
  _kernel_oserror * fetch_cancel                (browser_data * b);
  void              fetch_stop                  (browser_data * b, int keep_source);
  void              fetch_authorisation_proceed (browser_data * b, urlstat * context, char * realm, char * url);
  void              fetch_authorisation_fail    (browser_data * b);
  _kernel_oserror * fetch_get_raw_data          (browser_data * b, unsigned int handle, char * buffer, int size, int * done, int * bytes);

#endif /* Browser_Fetch__ */
@


1.9
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d48 5
@


1.8
log
@This is NOT a 'final' version of anything in particular. I'm checking it
in as I'm about to start playing around with low level window handling
(as part of the thing mentioned at the bottom of this log) - this could
screw things up quite badly if it goes wrong! =8*P

Consequently, I advise you not to check this out over your working sources,
and preferably not to check this out at all.

Markers system - events defined in MiscEvents.h will make Browse remember
where it is on the page. This position can be jumped back to later.
Some builds will have defined keyboard shortcuts Ctrl+Shift+F5 through
F8 to set a marker, and Ctrl+F5 through F8 to jump to a marker.

The front-end for the above now has gadgets 0x80 upwards on the Toolbar or
a set of menus (see Menus.h). Noticed an omission in copy_toolaction_info()
(didn't copy the gadget state) in passing; fixed.

browser_top_line() now works properly, as part of the above, but it'll be
slower than before. If flagged to only find a complete line, it'll do just
that, but whereas before this would require any tables that it looked
inside to be wholly visible, tables can now be partially visible and have
lines inside that are fully visible. This should help the Find function
too. There is a new call, browser_top_line_offset, which works as
browser_top_line but also returns a vertical scroll offset in the found
line (used for more accurate marker position). browser_bottom_line[_r]
turn out to never be used, even by the keyboard control routines, so they
have been removed from Browser.c (rather than spend a lot of time and
effort fixing them).

browser_show_token erroneously subtracted 1 from a particular coordinate
when calculating the y scroll position, which could lead to single pixel
page creep using the markers system. Corrected.

The View Resources button (see Toolbars.h) has been finally implemented,
insofar as it fetches the resources file to the current browser page (or
to a new window if Adjust is used, Controls file settings permitting).

menus_toggle_bars did not take account of the toolbar lower window border
edge correctly. It does now.

The reformatter has a prototype system to keep the vertical page position
when reformatting. This was coded about 5 minutes ago, and is not likely
to be reliable...
@
text
@d15 51
a65 41
/***************************************************/
/* File   : Fetch.h                                */
/*                                                 */
/* Purpose: Mid-level fetch functions, concerned   */
/*          mostly with HStreams but not low level */
/*          HTMLLib interfacing. Compare with      */
/*          FetchPage.h, which provides a much     */
/*          higher level interface.                */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 25-Nov-96: Created.                    */
/*          17-Aug-97: Split up to form the        */
/*                     URLveneer.c and FetchHTML.c */
/*                     sources.                    */
/***************************************************/

#include "URLstat.h"

/* General definitions */

#define DISPLAY_NAMED ((HStream *) 0x1) /* Anything which can never be an address, and not NULL */
#define ISBULLET(p)   ((((p)->style) & LI) && !((p)->text))
#define ISLINK(p)     ((((p)->style) & A) && ((p)->anchor))
#define ISOBJECT(p)   ((((p)->tagno) == TAG_OBJECT) && !((p)->flags & HFlags_IgnoreObject))

/* Function prototypes */

_kernel_oserror * fetch_start                 (browser_data * b);
int               fetch_fetching              (browser_data * b);
char            * fetch_find_name_tag         (char * url);
HStream         * fetch_find_anchor_token     (browser_data * b, char * anchor);
HStream         * fetch_find_text_token       (browser_data * b, char * text, HStream * last_t, int last_o, int * offset, int cs, int forwards);
void              fetch_preprocess_token      (browser_data * b, HStream * tptr);
void              fetch_fetcher               (browser_data * b);
int               fetch_chkerror              (browser_data * b, _kernel_oserror * e);
_kernel_oserror * fetch_cancel                (browser_data * b);
void              fetch_stop                  (browser_data * b, int keep_source);
void              fetch_authorisation_proceed (browser_data * b, urlstat * context, char * realm, char * url);
void              fetch_authorisation_fail    (browser_data * b);
_kernel_oserror * fetch_get_raw_data          (browser_data * b, unsigned int handle, char * buffer, int size, int * done, int * bytes);
@


1.7
log
@Programming warehouse link removed from all hotlists - the page has gone.

Some compile-time hacks in place to use MemLib, a dynamic area based
malloc replacement which shrinks its heap when possible. All builds
have these switched off at the moment. Seemed to work with just Browse,
though there would be problems with message blocks stored in dynamic
areas because of the Wimp's '&3800000' check - however, it failed when
HTMLLib was made to use it, too. Don't know why yet.

ItemInfo.[c/h] source added, with Res file additions for testbed Browse
and Phoenix.

Small fetch windows now work properly regardless of toolbar settings
in the Choices.

Reload now reloads all images too, rather than only reloading them for
as long as the main page was being fetched.

Added a simple 'Find' facility.

Realised that event handlers in eventlib are called in reverse order
of registration, so the miscellaneous event handler is now registered
first rather than last.

Multiuser code added (most only active if SINGLE_USER is undefined). As
part of this, hotlist code now knows about read-only items (done for the
Customer-style 'Resources' file, but works generally anyway).
handle_add_hotlist doesn't try to save the hotlist itself anymore (the
hotlist_add function does all that through hotlist_modified anyway).

Customer build Choices and Controls updated slightly (e.g. ClaimHelp
off, hotlist to save on quit only).

Customer build now uses Phoenix-style buttons. Sprites files which
worked at the time (but will probably be out of date now) and included
most of the original Customer-style sprites are in
'Utils.Icons.Customer'.

Choices, Messages and Res files for all builds now stripped down to only
single user items or single plus multiuser for Customer build and testbed
build. Before, all contained a few multiuser bits in at least the Choices
file if not more.

Grammatical error ("Fetching frames contents" (sic.)) corrected in
default message, Toolbars.c, and all of the Messages files.

Customer build brought back to a servicable level (including
implementation of the Find dialogue box with animation and fixing
up authorisation and 'Stop' state in the tristate). Quite a few
missing #ifndef REMOTE_HOTLIST bits from hotlist code added...

Customer build will not use <Choices$Write> or Boot:Choices for any
file finding now. UseProxy defaults to 'yes', MaxImages to 2. Res
file includes Proxy Address setting (save_save_choices() now writes
the ProxyAddress line).
@
text
@d36 1
a36 1
#define DISPLAY_NAMED ((HStream *) 0x40000000) /* Large enough not to be a token address */
@


1.6
log
@There are a few known significant problems with this code but it's being
checked in so the Choices can be worked on. Note that Res files etc. are
not up to date across all builds. Progress is as follows...

Bug report prompted me to do this - now ignore <p> tags straight after
<li> tags, so '<ul><li><p>Some text' works as the author (or automatic
generator, more commonly) intended.

A <p> tag before a table will be acted upon now (it was ignored before).
Something like <li><p><table...> will give a line break and paragraph
space after the <li> despite the changes mentioned above, as in other browsers.
Both browsers differ from Navigator, where the table appears alongside
the <li> tag.

Multiple BR tags work as in MSIE / Navigator (they don't collapse to
zero height anymore).

For the above, line height (and so, <br><br> or <p> spacing) is now
calculated inside reformat_text_line_height, and is used with either
a token to get the text height at a given size (e.g. for general line
spacing or multiple BR tags) or NULL for normal size text (e.g. for
P spacing, though this value is in practice later scaled by 7/8ths in
reformat_check_height). Note this behaviour is exhibited by MSIE 4;
v3 gave two BRs the same spacing as one P (i.e. not font size
dependent).

Save dialogues can have an option button or couple of radios to
switch between various formats (e.g. URI or URL, sprite or original
format). See 'Docs.Notes' for more. The back-end to this is now
implemented (i.e. at the moment, save as URI or URL, save as original
image format). Note that when saving background images, a leafname
based on the original fetch URL is now offered rather than a generic
'Background'.

Internal URL scheme changed to be all lower case, so relativisation
through URL_Fetcher still makes sense... :-/

Holding down 'shift' when clicking on stop reverses the interpretation
of the Controls file 'StopWebServe' entry.

Fixed row / column count for exporting tables as text; fixed a few
bits and pieces of internal URL scheme stuff which got broken when
HTMLLib started using URL_Fetcher's relativisation.
@
text
@d47 1
@


1.5
log
@Removed 'The Onion' link from some Hotlist files. Time showed that the
site wasn't entirely Family Friendly (TM)... Removed Shift Control (it's
gone offline now), and corrected the Telegraph URL from ...the-telegraph...
to just ...telegraph...

StrongHelp manual generator now tries to work out the number of lines in
the table on the root page more intelligently.

Plug-in support extended to handle Shockwave. Quite a lot of underlying
work for this, including a pseudo cache system for temporary files.

Bug in redraw routines: they plotted background images within table
cells, when nothing should have been drawn. Oops. When background images
in cells are properly supported, this can get sorted out.

Tweaked vertical plot position of HRs (up to 4 OS units too high before due
to rounding).

Various Res file bits and pieces, Ursula build taken up to v1.26 beta
for release on the Browser site. *Note* not all resources are up to date!
This will be done after AW97.
@
text
@a40 3
#define Internal_URL "!INTRNL!" /* Special string (i.e. hack...) to mark a URL as internal only. */
#define Int_URL_Len  8          /* Saves having to strlen(Internal_URL) in various places.       */

@


1.4
log
@Increased WimpSlot of debug !Browse by 200K.

FRAMES_SUPPORT #define removed.

Optimised fm_token_font_info().

Added support for LI tokens with text (for ordered lists).

Now outdents bullets from indent value, rather than indenting bullets by
the indent value and further indenting text. May need to look at default
Choices files because of this.

Limited the margin to always be non-negative.
@
text
@d39 1
@


1.3
log
@Got the deferred reformatter working properly. It doesn't do that 'OK,
the page is fetched and reformatted, but just to annoy you, I'm going
to wait 5 seconds and then suddenly reformat the whole thing again'
trick anymore. The fetcher was calling the reformatter in a delayed
form even when the reformatter was already running, so it would carry
on past the reformat point or from below what had become and invalidated
line, and some time later, get back to the delayed reformat. Now,
reformatting is only delayed by the fetcher when the reformatter is not
running. In practice this means body text reformats as it fetches, but
large tables will show delayed reformatting - which was exactly the
intended behaviour of the feature when it was originally thought of.

fetch_token_data_address removed; it was only needed in two places,
both of which already knew when to read tp->text and when to ignore
it. Its functionality is duplicated in an 'if' involving reformat_istext,
anyway.

!Run[D] files taken back to requiring HTTP 0.33, since 0.36 introduces
many weird and wonderful problems.

Typo in Messages files, 'All current images (sic.) fetches finished' -
'images' is now 'image'.

Shift+Click saving - you could save to an application. No problem. But
the equivalent (just clicking on a link that led to an unknown datatype
and getting the save dialogue that way) didn't work. It does now.
Another problem was saving to an application that didn't support the
datatype - oops, the dialogue would close but the fetch would sit there
waiting to be told where to save. It doesn't close now (as expected).

NB, doing several simultaneous fetches to a text editor may have problems
as the editors are too clever for their own good. Despite receiving
DataLoad messages for <Wimp$Scrap> for files of different types, sizes
and datestamps, the editors can decide it's still the same file and:

Zap      - Hats off, it gets it right, almost. You do get warned 'Multiple
           copies - one on disc is newer' as everything after the first
           text loads, but they do load, and in separate windows.
StrongED - Does not load the subsequent files, so the browser gives 'Data
           transfer failed' errors and opens up Scrap. Turning off 'Don't
           load same file twice' fixes it - each file is loaded in a new
           window with no warnings. At least in the first case, you don't
           lose data, since the files are kept in Scrap.
Edit     - Each time it loads the file, it *replaces* the other one in
           memory, using the same window for each. This is the worst
           behaviour as it isn't configurable (well, I don't know of a way
           to change it...) and results in data loss as successive texts
           get trounced by the new data.

I can't see how I can fix this in the browser as it's basically silly
behaviour on behalf of the editors. Other applications which don't try
to work out if it's a new file or not are fine!

When conducting image fetches, proxying is allowed unless reloading.
When conducting page fetches, proxying was never allowed - so web cache
stuff would have been, er, interesting. It now sets X-NoProxy: in the
request header when reloading, but otherwise this is not included.

AnimSpeed is, at last, independent of browser poll speed. They used to
be tied together. Guess how the animation code used to work ;-)

'Can't handle this datatype' - deprecated now that save dialogues can be
popped up. The 'can't save objects in full screen mode' error would never
be shown due to a bug, anyway; this now replaces 'can't handle', which
has been removed from all Messages files.

RefoWait, RefoHang and RefoTime moved from Controls back to Choices.

Trying to get rid of strlen in the reformatter - it can get very slow
(e.g. strlen of 8K chunks of text, or if a 330K text file is transferred
from a text editor straight to the browser, strlen of a 330K string...).
There will be unfinished bits of code in the reformatter that may seem
unnecessary - they've just not been plugged in yet (since they don't
actually work). Don't remove them!
@
text
@d37 1
a37 1
#define ISBULLET(p)   (((p)->style) & LI)
@


1.2
log
@Odd problem with Entries file meant none got checked in last time...
@
text
@a48 1
void            * fetch_token_data_address    (browser_data * b, HStream * token);
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d17 7
a23 3
/* Purpose: Low-level page fetch related functions */
/*          functions (as opposed to fetch.c where */
/*          all the higher level stuff goes on)    */
d25 5
a29 1
/* History: 25-Nov-96: Created                     */
d32 1
a32 3
/* Globals */

extern int authorising;
a42 44
/* URL module definitions */

#define URL_swibase    0x83e00
#define URL_Register   (URL_swibase+0)
#define URL_GetURL     (URL_swibase+1)
#define URL_Status     (URL_swibase+2)
#define URL_ReadData   (URL_swibase+3)
#define URL_SetProxy   (URL_swibase+4)
#define URL_Stop       (URL_swibase+5)
#define URL_Deregister (URL_swibase+6)

#define URL_Method_http_GET   1
#define URL_Method_http_HEAD  2
#define URL_Method_http_POST  4
#define URL_Method_http_PUT   8

#define URL_Status_Connected  1
#define URL_Status_SentReq    2
#define URL_Status_SentData   4
#define URL_Status_Responded  8
#define URL_Status_Transfer  16
#define URL_Status_Done      32
#define URL_Status_Aborted   64

/* Local structures */

typedef struct     urlstat
{
  int              session;      /* the fetch session handle                            */
  int              fetched;      /* flag indicates we have got at least one byte so far */
  void           * context;      /* parser context pointer                              */
  HStream        * stream;       /* pointer to the token stream                         */
  HStream        * lasttoken;    /* pointer to the last token returned                  */
  unsigned int     fetching:1;   /* flag indicates we are still fetching                */
  unsigned int     identified:1; /* the stream has been identified                      */
  unsigned int     authorised:2; /* authorise: 0=not done, 1=doing, 2=done              */
  unsigned int     allowparse:1; /* whether to allow HTMLLib to parse this URL          */
  int              method;       /* the method used to fetch                            */
  char           * extradata;    /* the extra data associated with this url             */
  int              type;         /* type from HtmlIdentify                              */
  struct urlstat * next;

} urlstat;

d57 1
a57 14

_kernel_oserror * html_get                    (char * url, char * extradata, int * handle, int method, char * user, int allowparse, int proxy);
int               html_insert_header          (char * header, flex_ptr data);
_kernel_oserror * html_close                  (unsigned int handle);
_kernel_oserror * html_get_next_token         (browser_data * b, unsigned int handle, int * remaining, int * size, HStream ** token, int * waiting, flex_ptr store, char * url, int image);
_kernel_oserror * html_get_next_chunk         (browser_data * b, unsigned int handle, char * buffer, int size, int * done, int * bytes);

_kernel_oserror * url_register                (unsigned int flags, unsigned int * handle);
_kernel_oserror * url_deregister              (unsigned int flags, unsigned int handle);
_kernel_oserror * url_stop                    (unsigned int flags, unsigned int handle);
_kernel_oserror * url_get_url                 (unsigned int flags, unsigned int handle, int method, char * url, char * extradata, unsigned int * status, int mode);
_kernel_oserror * url_read_data               (unsigned int flags, unsigned int handle, void * buffer, int size, int * status, int * read, int * pending);
_kernel_oserror * url_status                  (unsigned int flags, unsigned int handle, int * status, int * response, int * bytes);
_kernel_oserror * url_set_proxy               (int flags, unsigned int session, char * baseurl, char * protocol, int noproxy);
@
