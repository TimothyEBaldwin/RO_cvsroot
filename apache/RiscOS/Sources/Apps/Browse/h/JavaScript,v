head	1.10;
access;
symbols
	Browse-2_16:1.10
	Browse-2_15:1.10
	Browse-2_14:1.10
	Browse-2_13:1.10
	Browse-2_12:1.10
	Browse-2_11:1.10
	Browse-2_10:1.10
	Browse-2_09:1.10
	ahodgkin_208_i4_2:1.10
	ahodgkin_208_i4:1.9
	ahodgkin_208_i3:1.9
	ahodgkin_208_i2:1.9
	ahodgkin_208_i1:1.9
	ahodgkin_207release:1.7
	ahodgkin_206release:1.5
	ahodgkin_205release:1.4
	ahodgkin_204release:1.4
	ahodgkin_202release:1.4
	ahodgkin_201release:1.4
	ahodgkin_200release:1.4
	ahodgkin_133beta:1.4
	ahodgkin_132beta:1.4
	ahodgkin_131beta:1.4
	ahodgkin_130beta:1.4
	ahodgkin_129:1.4
	ahodgkin_128beta:1.4
	ahodgkin_128alpha:1.4
	ahodgkin_127beta2:1.4
	ahodgkin_127beta:1.4
	ahodgkin_126beta:1.4
	ahodgkin_AW97patch:1.4
	ahodgkin_AW97:1.4;
locks; strict;
comment	@# @;


1.10
date	2000.05.31.15.58.56;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	99.09.02.13.10.40;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	99.03.30.15.52.13;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	98.09.23.13.18.21;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	98.09.07.11.47.13;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	98.07.09.10.28.09;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.08.18.10.00.15;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.07.31.14.50.17;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.07.30.12.39.14;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.25.13.12.32;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.10
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    JavaScript.h                                      */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: JavaScript support.                               */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 24-Jul-1997 (ADH): Created.                       */
/*          07-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_JavaScript__
  #define Browser_JavaScript__

  #include <kernel.h>
  #include <HTMLLib/HTMLLib.h>

  #include "Global.h"

  /* Useful definitions, types and enumerations */

  #define JavaScript_URL_Alternative1  "javascript:"
  #define JavaScript_URL_Alternative2  "mocha:"
  #define JavaScript_MIME_Alternative1 "application/x-javascript"
  #define JavaScript_MIME_Alternative2 "text/javascript"
  #define JavaScript_Language_Name     "JavaScript"

  #define JavaScript_Context_StackSize 8192
  #define JavaScript_HeapBeforeAutoGC  256 * 1024

  /* Types for javascript_register_post_exec_action */

  #define JavaScript_PostExec_Close    1

  /* Source from which a script was run */

  typedef enum javascript_source
  {
    JavaScript_Source_Unknown,
    JavaScript_Source_URLWritable,
    JavaScript_Source_LinkInPage,
    JavaScript_Source_ScriptFile,
    JavaScript_Source_ScriptInPage,
    JavaScript_Source_MiscEvent

  } javascript_source;

  /* Function prototypes */

  _kernel_oserror   * javascript_body_onload                   (browser_data * b);
  _kernel_oserror   * javascript_href_onclick                  (browser_data * b, HStream * t, int * ignore);

  _kernel_oserror   * javascript_window_open                   (browser_data * b, int must_find, int record, char * url, char * target);

  #ifdef JAVASCRIPT

    /* Interfaces to JavaScript interpreter */

    int                javascript_url                           (const char * url);

    _kernel_oserror  * javascript_configure_environment         (void);
    _kernel_oserror  * javascript_startup                       (void);
    _kernel_oserror  * javascript_shutdown                      (void);

    _kernel_oserror  * javascript_gain_context                  (browser_data * b, browser_data * parent);
    _kernel_oserror  * javascript_lose_context                  (browser_data * b);
    _kernel_oserror  * javascript_define_window                 (browser_data * b);
    _kernel_oserror  * javascript_destroy_window                (browser_data * b);

    void               javascript_set_source                    (javascript_source s);
    _kernel_oserror  * javascript_process_script                (browser_data * b, const char * script);
    char             * javascript_script_callback               (void * stream, HStream * script_element, void * handle);

    char            ** javascript_allocate_document_write_block (int len, int * offset);
    void               javascript_free_document_write_block     (void);

    void               javascript_set_doc_write_used            (void);
    int                javascript_fetch_should_proceed          (void);
    void               javascript_set_pending_fetch             (browser_data * b, const char * url, int record, int stop);
    int                javascript_fetch_is_pending              (browser_data * b);
    _kernel_oserror  * javascript_do_pending_fetch              (browser_data * b);

    int                javascript_fix_invalid_date_format       (char * date);

    _kernel_oserror  * javascript_reread_window_details         (browser_data * b);

    _kernel_oserror  * javascript_register_post_exec_action     (browser_data * b, unsigned int type);

  #endif

#endif /* Browser_JavaScript__ */
@


1.9
log
@Long overdue check-in of intermediate browser build, from continued "out
of hours" work. Forgot to add a few files last time too.

List dialogue box handler complete, and exclusion lists implemented
within the main browser code. Full documentation in Choices file.
Save routine knows all about it but is now getting very slow - must
come up with a better scheme; for now, it puts the hourglass on...

StripExtensions option controls auto stripping of filename extensions.

More sensible ancestor / frame selection for keyboard shortcut items
and the save dialogues - having selected a frame won't lock you into
it for F3 and related shortcuts now (input focus in URL writable ->
get ancestor details, input focus in frame -> get frame details). F4
works in frames. F5 now generally present for 'view source' with a
corresponding menu entry in the File menu.

Odd thing in later Res files; there's no action set for Adjust clicks
on the main ToolAction items in the button bar. Very odd. Nothing
appears to be set in v2.07 either, yet adjust-click works. Even
stranger. Anyway, added in the relevant event details (same as for
Select click in all cases) and this fixes the problem.

Background colours in the TABLE tag ignored the "don't print any
backgrounds" Print Style setting. Fixed. Meanwhile, the "black
text with no backgrounds" option wasn't getting this right either;
fixed this also.

Event logging implemented; HTTP errors and script output via.
window.print extension. No internal error output yet.

Faith:Never behaviour extended. If ever a server sends something with
no content type or an unhandleable type, the browser will try and get a
filetype from the URL. If it gets text or HTML, it'll render the file.
Else it'll save it. Hacks around IIS 4's lack of a content type field
in the Marketeye login stuff, and similar other slightly broken sites.
@
text
@d15 12
a26 9
/***************************************************/
/* File   : JavaScript.h                           */
/*                                                 */
/* Purpose: JavaScript support.                    */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 24-Jul-97: Created.                    */
/***************************************************/
d28 2
a29 1
/* The JavaScript system frequently references 'uint' */
d31 2
a32 1
#include "sys/types.h"
d34 1
a34 1
/* Useful definitions, types and enumerations */
d36 1
a36 5
#define JavaScript_URL_Alternative1  "javascript:"
#define JavaScript_URL_Alternative2  "mocha:"
#define JavaScript_MIME_Alternative1 "application/x-javascript"
#define JavaScript_MIME_Alternative2 "text/javascript"
#define JavaScript_Language_Name     "JavaScript"
d38 5
a42 2
#define JavaScript_Context_StackSize 8192
#define JavaScript_HeapBeforeAutoGC  256 * 1024
d44 2
a45 1
/* Types for javascript_register_post_exec_action */
d47 1
a47 1
#define JavaScript_PostExec_Close    1
d49 1
a49 1
/* Source from which a script was run */
d51 1
a51 8
typedef enum javascript_source
{
  JavaScript_Source_Unknown,
  JavaScript_Source_URLWritable,
  JavaScript_Source_LinkInPage,
  JavaScript_Source_ScriptFile,
  JavaScript_Source_ScriptInPage,
  JavaScript_Source_MiscEvent
d53 8
a60 1
} javascript_source;
d62 1
a62 1
/* Function prototypes */
d64 1
a64 2
_kernel_oserror   * javascript_body_onload                   (browser_data * b);
_kernel_oserror   * javascript_href_onclick                  (browser_data * b, HStream * t, int * ignore);
d66 2
a67 1
_kernel_oserror   * javascript_window_open                   (browser_data * b, int must_find, int record, char * url, char * target);
d69 1
a69 1
#ifdef JAVASCRIPT
d71 1
a71 1
  /* Interfaces to JavaScript interpreter */
d73 1
a73 1
  int                javascript_url                           (const char * url);
d75 1
a75 3
  _kernel_oserror  * javascript_configure_environment         (void);
  _kernel_oserror  * javascript_startup                       (void);
  _kernel_oserror  * javascript_shutdown                      (void);
d77 3
a79 4
  _kernel_oserror  * javascript_gain_context                  (browser_data * b, browser_data * parent);
  _kernel_oserror  * javascript_lose_context                  (browser_data * b);
  _kernel_oserror  * javascript_define_window                 (browser_data * b);
  _kernel_oserror  * javascript_destroy_window                (browser_data * b);
d81 4
a84 3
  void               javascript_set_source                    (javascript_source s);
  _kernel_oserror  * javascript_process_script                (browser_data * b, const char * script);
  char             * javascript_script_callback               (void * stream, HStream * script_element, void * handle);
d86 3
a88 2
  char            ** javascript_allocate_document_write_block (int len, int * offset);
  void               javascript_free_document_write_block     (void);
d90 2
a91 5
  void               javascript_set_doc_write_used            (void);
  int                javascript_fetch_should_proceed          (void);
  void               javascript_set_pending_fetch             (browser_data * b, const char * url, int record, int stop);
  int                javascript_fetch_is_pending              (browser_data * b);
  _kernel_oserror  * javascript_do_pending_fetch              (browser_data * b);
d93 5
a97 1
  int                javascript_fix_invalid_date_format       (char * date);
d99 1
a99 1
  _kernel_oserror  * javascript_reread_window_details         (browser_data * b);
d101 1
a101 1
  _kernel_oserror  * javascript_register_post_exec_action     (browser_data * b, unsigned int type);
d103 5
a107 1
#endif
@


1.8
log
@Intermediate check-in; building a browser from this gives you something
between 2.07 and 2.08. Only the Phoenix JavaScript resources are fully
up to date.

I *think* these are the changes since the last check-in:

When saved as a Draw file, horizontal rules were plotted one page width
too far to the right (wonder when that started happening?!). Fixed. In
addition, DrawFiles now accepted as OBJECTs - they weren't in the
recognised filetype list before. Doh.

Table size calculator tables_count_table would overestimate the number
of cells where ROWSPAN was present and there were other rows below the
one spanned. Fixed. In certain odd cases (e.g. optimised image exports
as HTML tables (!!) from the Gimp) this can save vast amounts of RAM.

Fixed problem where printing stops in the middle of a document. Redraw
engine pagination code was written in the days where lines couldn't
have gaps between them; they can now. If a gap fell at the bottom of
a page the engine would look down, see no line straddling or touching
the page edge, and assume there was nothing more. This case is now
correctly handled.

Made sure desktop and testbed Browse Res files had up-to-date Encoding
menus (v2.07 Phoenix has different menus from v2.07 Browse by oversight).

URL auto-completion piggy-backed onto manual completion code; any string
without '.', '/' or ':' in it gets run through completion to see if a
more meaningful item can be produced - "www" special cased out though.

New List dialogue box handler, used for proxy exclusions etc.
(incomplete), complete with appropriate Res file objects.
@
text
@d40 6
d52 2
a53 1
  JavaScript_Source_ScriptInPage
d95 2
@


1.7
log
@Another intermediate check-in, resources may not be up to date; items
most likely to be buildable are PhoenixJ and BrowseD. Done because I'm
about to make some rather dodgy changes to code otherwise unchanged
since the Customer browser and I may well have to back them out...

In Handlers.c now set the HFlags_HasBeenVisited bit of a token at the point
it is first clicked on. Means the link returns to a "visited" colour after
the highlight flash immediately. This will persist for as long as the browser
window is kept open on that page, though if the URL doesn't end up making it
into the history for whatever reason it would "unhighlight" on reload; fair
enough, really. The highlight is window-local, so there are no redraw worries
for other open windows with links to the same URL (though other same-URL
links on the same page aren't updated either).

All forms submissions force a reload (principally for eudoramail.com, but
many other sites have similar requirements).

!MkClean and !MkClnAll didn't correctly call the utility to strip Makefile
dependencies. Fixed.

On fetch closedown, fetchpage_preprocess_token could be called on a token
which had already been run through the preprocessor. Now checks the flags
word before proceeding.

Image RAM cache and garbage collection system implemented - see new Choices
file entries CollectAfter, FreeRAMLimit and UnusedImageLimit to get an
overview. This contains groundwork for JavaScript image array support.

More JavaScript support improvements. Any one window object will know its
parent, top, this, etc.; frames array working except for a frameset created
via. multiple documents; opener for something created with window.open is
currently not set and don't know why (property is being created, pointer to
valid object is held, but JS engine returns 'null'. Ho hum) - JSChain won't
work yet, then.
@
text
@d85 2
@


1.6
log
@Everyone else seems to be checking lots of stuff in lately, so I've
decided to join in. This is an intermediate check-in and so not all
resources etc. will be up to date. You should be able to make Phoenix
and a debug build out of it. As a reminder, to make a JavaScript build:

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean. This now strips dynamic dependencies from the MakeFile
   automatically, to save you having to do it yourself.
 * Run one of the TaskObey files with the "J" suffix, e.g. !DeskBrwsJ -
   this uses the same .o directory for object files and exports to the
   same position in the Targets directory as the non-JavaScript build,
   but it does produce a unique binary in 'abs' and symbols table in
   'syms'.
 * Sourcing an appropriate !Run (with increased WimpSlot value), !Boot
   and About resource is done automatically.
 * Some, but not all of the !xxxD (debug) TaskObey files will make
   JavaScript versions in passing - check the JSUFFIX value on the Make
   command line parameters in the file.

This'll only work on RISC OS 3.1 due to the use of MemLib.

Here's the change list:

Included MNG icons in sprites files; added Sprites23 for some builds.
Added in ANT URL file icon (b28) derived from URI file icon, because
the Save dialogue can need it.

No, you do *not* need to define the same keyboard shortcuts in each
frame since the ancestor keeps the input focus and we've basically
dropped non-nested Wimp support. Maintaining no less than 4 lists of
identical shortcuts was a pain. Some Res files now only have the
lists in the main browser window and button bar objects (these two
are both required still).

Ursula build Markers button arrangement changed from 1x3 horizontal to
2x2 tilted, as in Phoenix, by popular demand.

Couple of hotlist bugs fixed; dragging an item and deleteing it with
Ctrl+X didn't terminate the drag, and deleteting an item underneath a
menu opened for it didn't close the menu.

'SendReferer' option added to all Choices files, all set to 'always'.
Put just beneath 'Clone' as it refers to header items, though really,
both Clone and SendReferer should probably be in the "Fetch controls"
section rather than "Multiuser environments and proxying"! Front-end
control of this is available.

In image_export_original, save_save_source, save_transfer_source and
save_save_object, flex_set_budge(0) was called to lock the heap but the
return value wasn't stored. flex_set_budge(1) was then used to unlock
the heap. All calls now remember and restore the old value, which is
both safer in case one calls another and allows the flex_set_budge
call in Main.c to have an application-wide meaning, as intended.

Some restructuring to the data load and RAM transfer sections of
Protocols.c; remote hotlist builds wouldn't allow files to be loaded
to browser windows before, and can now drop URL, URI or text files to
the Open URL dialogue.

New option "MinimumFontSize", lets the 'size' attribute of the 'font'
element be overridden. Default value is 1, to allow the full range of
values for the attribute. Setting to 7, for example, would give font
size 7 text at all times. Another new option, "ToggleOnXOnly", to
make Toggle Size only extend the window vertically (with Ctrl then
being used to toggle to genuine full size, rather than vice versa).
All Choices files updated to hold both of these options; only the
first has front-end control available (see debug build Res file).

JavaScript Document object exists; frames array etc. working. Can now
just about use "http://www.acorn.com/~ahodgkin/jschain/" but it does
abort after a bit - problems with frames again, I suspect. Is is pretty
slow, too. Can now press Escape to terminate a script.

Main.c erroneously referred to Controls file entry "StopWebServe" as
"StopWebProxy". Fixed.

Keyboard shortcuts to raise SaveFile are now possible in a general sense;
the code before was in the ToBeShown handler and just checked for a parent
component of -1. It then assumed "save frame HTML source". Now there's the
savefile_raise_from_shortcut function, which together with the seven new
event codes in SaveFile.h allows saving of HTML source and frame location,
export of links, images, backgrounds and the page as text or draw, to all
be invoked by keyboard shortcuts. Some Res files have some of these defined.

In reformat_check_height, the first check to see if setpara should be set
references a field in tpLast without checking if it is NULL. Whilst the
'line > 0' check should mean that tpLast wasn't NULL anyway, a direct
call to the function from outside of the reformatter might have tripped
up on this - the check for tpLast != NULL is now made.

Adjust-click on close icon in window showing file: URL attempts to open
the parent Filer window.

Reformatter used to try and find a selectable token if keyboard control
was enabled in a really stupid place - could make reformatting become
very slow if no selectables were present, especially if the page had a
few tables on it. Preprocessor now does this (since it goes through all
of the tokens anyway), the reformatter just doing a last check to ensure
no frames have obscured the selectable and if so, it tries to move it.
Done in the reformatter as generating a line array implies the data really
is visible.

Ctrl+Tab URL completion now builds a full list of matches from the hotlist
and history and can cycle through them (Ctrl+Shift+Tab stepping backwards).

Will give a real error rather than just "Data Abort" if it goes wrong
now. Someone somewhere is setting bit 30 of the error which confused
the replacement signal handler. Flag bits are now masked off (as they
should've been to start with).
@
text
@d64 2
d81 3
@


1.5
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d33 3
d38 1
d52 2
a53 2
_kernel_oserror   * javascript_body_onload           (browser_data * b);
_kernel_oserror   * javascript_href_onclick          (browser_data * b, HStream * t, int * ignore);
d55 1
a55 1
_kernel_oserror   * javascript_window_open           (browser_data * b, int must_find, int record, char * url, char * target);
d61 1
a61 1
  int               javascript_url                   (const char * url);
d63 1
a63 1
  _kernel_oserror * javascript_configure_environment (void);
d65 4
a68 4
  _kernel_oserror * javascript_gain_context          (browser_data * b, browser_data * parent);
  _kernel_oserror * javascript_lose_context          (browser_data * b);
  _kernel_oserror * javascript_define_window         (browser_data * b);
  _kernel_oserror * javascript_destroy_window        (browser_data * b);
d70 3
a72 3
  void              javascript_set_source            (javascript_source s);
  _kernel_oserror * javascript_process_script        (browser_data * b, const char * script);
  char            * javascript_script_callback       (void * stream, HStream * script_element, void * handle);
d74 2
a75 2
  void              javascript_set_doc_write_used    (void);
  int               javascript_fetch_should_proceed  (void);
d77 4
a80 1
  _kernel_oserror * javascript_reread_window_details (browser_data * b);
@


1.4
log
@Odd problem with Entries file meant none got checked in last time...
@
text
@d25 21
d48 26
a73 2
_kernel_oserror * javascript_body_onload  (browser_data * b);
_kernel_oserror * javascript_href_onclick (browser_data * b, HStream * t, int * ignore);
d75 1
a75 1
_kernel_oserror * javascript_window_open  (browser_data * b, int must_find, int record, char * url, char * target);
@


1.3
log
@Customer work complete, and this version just shipped. Had to comment out
the code in Main.c that sets the user agent string to fake Netscape, as the
persistent problems with forms in tables showed up much more on a modem
link - net result was that the customer's log in page at didn't work. Not
faking Netscape gives an authorisation dialogue instead, allowing access
to the site even if not by the most elegant of methods.
@
text
@d17 3
a19 1
/* Purpose: JavaScript support                     */
d21 2
a22 1
/* History: 24-Jul-97: Created                     */
d24 2
@


1.2
log
@In the middle of customer support work.
@
text
@d23 1
a23 1
_kernel_oserror * javascript_href_onclick (browser_data * b, HStream * t);
@


1.1
log
@Forgot to add the JavaScript, Customer and Meta source files at last
check in...! Put in a few utilities in a new Utils directory also, which
includes a TaskObey script that will take a backup of the Makefile, strip
out the dependencies list, and (assuming the CVS call doesn't crash),
restore the Makefile with dependencies intact from the backup.
@
text
@d22 4
a25 1
_kernel_oserror * javascript_body_onload (browser_data * b);
@
