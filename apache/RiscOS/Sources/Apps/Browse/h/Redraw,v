head	1.11;
access;
symbols
	Browse-2_16:1.11
	Browse-2_15:1.11
	Browse-2_14:1.11
	Browse-2_13:1.11
	Browse-2_12:1.11
	Browse-2_11:1.10
	Browse-2_10:1.10
	Browse-2_09:1.10
	ahodgkin_208_i4_2:1.9
	ahodgkin_208_i4:1.8
	ahodgkin_208_i3:1.8
	ahodgkin_208_i2:1.8
	ahodgkin_208_i1:1.7
	ahodgkin_207release:1.7
	ahodgkin_206release:1.7
	ahodgkin_205release:1.7
	ahodgkin_204release:1.7
	ahodgkin_202release:1.7
	ahodgkin_201release:1.7
	ahodgkin_200release:1.7
	ahodgkin_133beta:1.7
	ahodgkin_132beta:1.7
	ahodgkin_131beta:1.7
	ahodgkin_130beta:1.6
	ahodgkin_129:1.6
	ahodgkin_128beta:1.6
	ahodgkin_128alpha:1.6
	ahodgkin_127beta2:1.6
	ahodgkin_127beta:1.6
	ahodgkin_126beta:1.5
	ahodgkin_AW97patch:1.5
	ahodgkin_AW97:1.5;
locks; strict;
comment	@# @;


1.11
date	2006.03.13.22.06.20;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	2005.04.26.09.42.35;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	2000.05.31.15.58.58;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	2000.02.25.17.08.58;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	98.01.31.10.55.47;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.11.19.10.29.26;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.10.16.13.23.24;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.10.13.07.07.08;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.08.28.16.08.17;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.08.18.10.00.20;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.29.56;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.11
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Redraw.h                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Redraw functions for the browser.                 */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 29-Nov-1996 (ADH): Created.                       */
/*          07-Apr-2000 (ADH): 64-wide comments adopted.      */
/*          11-Feb-2006 (ADH): Replaceable function table     */
/*                             introduced.                    */
/**************************************************************/

#ifndef Browser_Redraw__
  #define Browser_Redraw__

  #include <kernel.h>
  #include <tboxlibs/wimp.h>
  #include <HTMLLib/HTMLLib.h>

  #include "FontManage.h" /* For fm_face */
  #include "RedrawCore.h"

  #include "Global.h"

  /* Definitions */

  #define Redraw_Colour_White       0xffffff00
  #define Redraw_Colour_AlmostWhite 0xeeeeee00
  #define Redraw_Colour_BackGrey    0xdddddd00
  #define Redraw_Colour_WNGrey      0xbbbbbb00
  #define Redraw_Colour_MidGrey     0x99999900
  #define Redraw_Colour_PlinthGrey  0x77777700
  #define Redraw_Colour_Black       0x00000000

  #define Redraw_SelectedBorder_OS  4

  /* Redraw jump table functions */

  _kernel_oserror * redraw_jmptbl_line
                    (
                      const browser_data * restrict b,
                      const BBox         * restrict ends,
                      unsigned int                  colour,

                      size_t             * restrict r_size
                    );

  _kernel_oserror * redraw_jmptbl_rectangle
                    (
                      const browser_data * restrict b,
                      const BBox         * restrict rect,
                      unsigned int                  colour,
                      unsigned int                  border,

                      size_t             * restrict r_size
                    );

  _kernel_oserror * redraw_jmptbl_triangle
                    (
                      const browser_data * restrict b,
                      int                           x1,
                      int                           y1,
                      int                           x2,
                      int                           y2,
                      int                           x3,
                      int                           y3,
                      unsigned int                  colour,

                      size_t             * restrict r_size
                    );

  _kernel_oserror * redraw_jmptbl_circle
                    (
                      const browser_data * restrict b,
                      int                           x,
                      int                           y,
                      unsigned int                  radius,
                      unsigned int                  colour,

                      size_t             * restrict r_size
                    );


  _kernel_oserror * redraw_jmptbl_text
                    (
                      const browser_data * restrict b,
                      fm_face                       handle,
                      int                           x,
                      int                           y,
                      const char         * restrict string,
                      unsigned int                  numbytes,
                      unsigned int                  fgcolour,
                      unsigned int                  bgcolour,
                      unsigned int                  blend,

                      size_t             * restrict r_size
                    );


  _kernel_oserror * redraw_jmptbl_image
                    (
                      const browser_data * restrict b,
                      unsigned int                  image,
                      int                           x,
                      int                           y,
                      unsigned int                  width,
                      unsigned int                  height,

                      size_t             * restrict r_size
                    );

  _kernel_oserror * redraw_jmptbl_sprite
                    (
                      const browser_data * restrict b,
                      const char         * restrict name,
                      int                           x,
                      int                           y,

                      size_t             * restrict r_size
                    );

  _kernel_oserror * redraw_jmptbl_clipping
                    (
                      const browser_data * restrict b,
                      const BBox         * restrict desired,

                      size_t             * restrict r_size
                    );

  /* Other function prototypes */

  unsigned int      redraw_header            (unsigned int flags);

  unsigned int      redraw_backcol           (const browser_data * restrict b);
  void              redraw_set_colour        (unsigned int colour);
  unsigned int      redraw_background_colour (const browser_data * restrict b, const unsigned int foregroundcolour);
  unsigned int      redraw_token_colour      (const browser_data * restrict b, const HStream * restrict t);

  int               redraw_display_width     (const browser_data * restrict b, const reformat_cell * d);
  int               redraw_display_height    (const browser_data * restrict b, const reformat_cell * d);
  int               redraw_left_margin       (const browser_data * restrict b, const reformat_cell * d);
  int               redraw_right_margin      (const browser_data * restrict b, const reformat_cell * d);
  int               redraw_left_gap          (const browser_data * restrict b, const reformat_cell * d, const HStream * restrict t);
  int               redraw_right_gap         (const browser_data * restrict b, const reformat_cell * d, const HStream * restrict t);

  int               redraw_start_x           (const browser_data * restrict b, const reformat_cell * cell, const HStream * restrict t, const unsigned int line);
  int               redraw_token_x           (const browser_data * restrict b, const reformat_cell * cell, const HStream * restrict t, const unsigned int line);
  int               redraw_chunk_x           (const browser_data * restrict b, const reformat_cell * cell, const unsigned int chunk, const unsigned int line);

  unsigned int      redraw_selected          (const browser_data * restrict b, const HStream * restrict t);
  _kernel_oserror * redraw_border_around_box (const browser_data * restrict b, const BBox * box, const unsigned int colour);

  _kernel_oserror * redraw_draw_placeholder  (browser_data * restrict b, const BBox * restrict gfxwin, const BBox * restrict holder, const HStream * restrict token, const char * restrict text);
  _kernel_oserror * redraw_draw              (browser_data * restrict b, WimpRedrawWindowBlock * restrict r, int * restrict nextline, unsigned int noback, const HStream * restrict nocontent);

#endif /* Browser_Redraw__ */
@


1.10
log
@  Huge pile of changes bringing relatively ancient sources up to date.
Detail:
  This check-in includes Phoenix version 2.11 (26-Apr-2005); only the
  debug and JavaScript builds of Phoenix have been tested and resources
  will definitely be out of date for other versions. The various "!..."
  scripts have been updated to require a minimum of 2MB with no maximum
  limit for building, as CC 5.60 is quite RAM hungry.
Admin:
  Phoenix 2.11 JS builds OK, works reasonably well. Many outstanding
  issues of course, as this is a very outdated browser now.

Version 2.09. Tagged as 'Browse-2_09'
@
text
@d26 2
d37 3
d52 96
a147 1
  /* Function prototypes */
d151 1
a151 1
  unsigned int      redraw_backcol           (browser_data * b);
d153 2
a154 2
  unsigned int      redraw_background_colour (browser_data * b, unsigned int foregroundcolour);
  unsigned int      redraw_token_colour      (browser_data * b, HStream * t);
d156 10
a165 10
  int               redraw_display_width     (browser_data * b, reformat_cell * d);
  int               redraw_display_height    (browser_data * b, reformat_cell * d);
  int               redraw_left_margin       (browser_data * b, reformat_cell * d);
  int               redraw_right_margin      (browser_data * b, reformat_cell * d);
  int               redraw_left_gap          (browser_data * b, reformat_cell * d, HStream * t);
  int               redraw_right_gap         (browser_data * b, reformat_cell * d, HStream * t);

  int               redraw_start_x           (browser_data * b, reformat_cell * d, HStream * t, unsigned int line);
  int               redraw_token_x           (browser_data * b, reformat_cell * d, HStream * t, unsigned int line);
  int               redraw_chunk_x           (browser_data * b, reformat_cell * d, unsigned int chunk, unsigned int line);
d167 2
a168 2
  unsigned int      redraw_selected          (browser_data * b, HStream * token);
  void              redraw_border_around_box (BBox * rbox, unsigned int colour);
d170 2
a171 2
  void              redraw_draw_placeholder  (browser_data * b, WimpRedrawWindowBlock * r, BBox * holder, HStream * token, const char * text);
  _kernel_oserror * redraw_draw              (browser_data * b, WimpRedrawWindowBlock * r, unsigned int noback, HStream * nocontent);
@


1.9
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d49 1
a49 1
  int               redraw_header            (unsigned int flags);
d51 4
a54 4
  int               redraw_backcol           (browser_data *b);
  void              redraw_set_colour        (int colour);
  int               redraw_background_colour (browser_data * b,int foregroundcolour);
  int               redraw_token_colour      (browser_data * b, HStream * t);
d63 3
a65 3
  int               redraw_start_x           (browser_data * b, reformat_cell * d, HStream * t, int line);
  int               redraw_token_x           (browser_data * b, reformat_cell * d, HStream * t, int line);
  int               redraw_chunk_x           (browser_data * b, reformat_cell * d, int chunk, int line);
d67 2
a68 2
  int               redraw_selected          (browser_data * b, HStream * token);
  void              redraw_border_around_box (BBox * rbox, int colour);
d71 1
a71 1
  _kernel_oserror * redraw_draw              (browser_data * b, WimpRedrawWindowBlock * r, int noback, HStream * nocontent);
@


1.8
log
@Misecllaneous tweaks and fixes. Major addition is full header and footer
support in the printing system - see the Phoenix Choices file for more
information.

Only the Phoenix resources are up to date currently.
@
text
@d16 1
a16 1
/* File   : Redraw.h                                          */
d22 1
a22 1
/* Author : A.D.Hodgkinson                                    */
d25 1
a25 3
/*          24-Feb-2000 (ADH): Headers and footers nearly     */
/*                             done, 64-wide comments with    */
/*                             Pace (C) started.              */
d28 2
a29 1
/* Definitions */
d31 3
a33 27
#define Redraw_Colour_White       0xffffff00
#define Redraw_Colour_AlmostWhite 0xeeeeee00
#define Redraw_Colour_BackGrey    0xdddddd00
#define Redraw_Colour_WNGrey      0xbbbbbb00
#define Redraw_Colour_MidGrey     0x99999900
#define Redraw_Colour_PlinthGrey  0x77777700
#define Redraw_Colour_Black       0x00000000

/* Function prototypes */

int               redraw_header            (unsigned int flags);

int               redraw_backcol           (browser_data *b);
void              redraw_set_colour        (int colour);
int               redraw_background_colour (browser_data * b,int foregroundcolour);
int               redraw_token_colour      (browser_data * b, HStream * t);

int               redraw_display_width     (browser_data * b, reformat_cell * d);
int               redraw_display_height    (browser_data * b, reformat_cell * d);
int               redraw_left_margin       (browser_data * b, reformat_cell * d);
int               redraw_right_margin      (browser_data * b, reformat_cell * d);
int               redraw_left_gap          (browser_data * b, reformat_cell * d, HStream * t);
int               redraw_right_gap         (browser_data * b, reformat_cell * d, HStream * t);

int               redraw_start_x           (browser_data * b, reformat_cell * d, HStream * t, int line);
int               redraw_token_x           (browser_data * b, reformat_cell * d, HStream * t, int line);
int               redraw_chunk_x           (browser_data * b, reformat_cell * d, int chunk, int line);
d35 1
a35 2
int               redraw_selected          (browser_data * b, HStream * token);
void              redraw_border_around_box (BBox * rbox, int colour);
d37 37
a73 2
void              redraw_draw_placeholder  (browser_data * b, WimpRedrawWindowBlock * r, BBox * holder, HStream * token, const char * text);
_kernel_oserror * redraw_draw              (browser_data * b, WimpRedrawWindowBlock * r, int noback, HStream * nocontent);
@


1.7
log
@Check for WindowManager 3.97 and ensure Unicode$Path is set in all
!Run[D] files, don't set the Alias$@@PrintType_FF4 variable, and updated
Customer build ROM obey file variants. Various other changes to
the Run files for new module versions, updated paths to support
new positions of choices, hotlist and histories (see later), etc.

!Sprites[22] files hold small !app icons for some variants, and
an ic_browse sprite. Some variants now have a Sprites and Sprites22
file instead of just Sprites, with the former containing various
mode 12 or 15 specific sprites.

Text files dragged to the URL writable are treated as ANT URL files. This
relies on URLBarWrit (Toolbars.h) being a unique ID, which it should be,
but beware of the Hotlist and Choices numberspaces...

INPUT TYPE=BUTTON supported. Form items without a FORM tag are now shown
(as MSIE 4, but not NN 4).

'*', '-', '@@', '_' and '.' are not escaped when submitting forms now. The
Web interface to the IMDb now works.

INPUT TYPE=HIDDEN items will not affect the line height anymore - so
http://www.hotmail.com/ now has correctly aligned writable icons, for
example. Similarly, TAG_FORM and TAG_FORM_END items could push up
line height and don't anymore.

HRs with a specified pixel width will now influence the size of a table
cell (they didn't before).

BRs now checked by tagno field when the browser needs to know something
was an actual BR tag rather than just a line break signal, and by the
style bit entry when only the indication of a line break is required.

Table widths of 0 or 0% are ignored.

Trace.c updated to report height and background fields in a table_stream.

fm_putsl() writes a terminator into the string; the Forms.c routines were
calling this for displaying INPUT TYPE=PASSWORD fields using the FE_PassCode
literal string (a line of stars). This write into a read only data area
would make the debugger fault the access. A local char array is now used
instead, to get round this (note the use of var[]=literal rather than
var[sizeof(literal)]; strcpy(var, literal) due to some weird compiler bug
that copies the wrong thing into 'var' under some (undefined...)
circumstances).

Text areas don't scroll back to the top line when clicked in anymore;
single line writables don't scroll back to the left either. When
reentering a text area from 'above', the caret appears at the top line
rather than 'somewhere further down'...

ARROWS_MOVE_OUT compile time option at the top of Forms.c defines whether
you must press Tab/Shift+Tab to move between writable fields in forms or
if up/down will drop out of them, though if keyboard control is on this
is enforced (or you get trapped inside the form!).

urlutils_filetype_from_url now uses MimeMap module.

If fetcher is told a page is text, it'll check for a filename extension and
may choose to use this instead (e.g. it may find it's HTML instead). This
is to try and get around duff servers... (e.g. http://www.batalarms.co.uk/).

Save dialogues shouldn't flicker when options that don't change the
filetype are selected (before, the draggable sprite was always reset for
each selection). Noticed the erroneous setting of a static variable in
SaveFile.c by a call to this by SaveObject.c, and so added a flag to
savefile_set_filetype to deal with this - would have been possible to get
the wrong filetype sent to applications or at best the wrong filetype
sprite in the dialogue without that.

The caret shouldn't jump out of a form back to the URL writable if the page
reformats now.

Table background colours now supported (as in the colour you see in the
border space if the cellspacing is large enough; this is as in MSIE, not
as in Navigator). Drawfile output routines updated accordingly.

Corrected erroneous use of wimpt_dx() / wimpt_dy() in a couple of places
in Images.c, which meant that (say) 1x1 images didn't work correctly in
medium resolution display modes.

Now have support for save as text (component ID and event 0x12) and save
as Draw (component ID and event 0x13) buttons. Dubious conditions for
greying and ungreying the print, save source and view source buttons and
menu options sorted out as part of implementing the same for the two new
buttons; added greying out of their associated menu items in passing.

Turned kerning on in draw file objects (does mean a rather heinous
increase in file size, but this is the only way to ensure the draw file
matches the visible page).

Comments before functions in SaveDraw.c are now complete and up to date.

Image and visit histories now generate a crude hash number to speed up
searching for items. It does give a speed increase, though it's a
disappointingly small one.

Issue of left/right margins and cellpaddings sorted out. Now have
redraw_left/right_margin for finding out the basic gap you must leave.
redraw_left/right_gap then gives any extra indentation for LI, BLOCKQUOTE
or whatever. The last two can be subtracted from the display width to
get an available page width for any section of text. Note that
redraw_left_gap replaces redraw_margin. The redraw_start_x function
uses the above to work out where a line's left hand edge should be,
taking account of left/right/centre alignment. HRs have been fixed now
(they were quite broken in v1.30, I think) based on this new model and
the behaviour of MSIE/NN 4.

Fixed width of cells with no contents - cell padding values wouldn't
have worked properly as the reformatter returns 0 rather than the left
hand margin size if given no stream.

Removed FM_Absolute flags for Font_Paint (spotted by DBrown) - sets bit
2, which is reserved...?

IMG width and height in % terms now works correctly; a % of available
width (after margins and indents) or height on the main page or for
a table cell, if the image lies in one. Because of the chicken-and-egg
problem with the latter, the cell must specify a width and/or height
for things to work properly. If this is not done, you'll usually end
up with a 1:1 scaled image (as in Navigator 4, rather than ending up
with no image or even no cell (!), as in MSIE 4).

HEIGHT attribute on a TABLE tag is supported, but only in a crude
fashion; the extra height (if there is any) is distributed over the
rows in a linear fashion. This is probably all you have to do in
practice, but I haven't checked. To maintain a notion of min/max
height as well as width would of course require a great deal more
work...

If using client pull to reload a page with a fragment ('...#name')
specified, then the reload wouldn't work on the same page; it'd just
jump to the fragment position. This won't happen if b->reloading is
set now (so works in conjunction with client pull on the same page
forcing a non-cached fetch). Similarly, if POSTing to such a URL,
a fetch will proceed (both these fixes done originally for
http://jupiter.beseen.com/chat/rooms/g/1678/).

browser_inherit split to browser_inherit and browser_inherit_post_data;
the code for the latter didn't clear any post_data in the child before
copying from the parent either, and could cause flex errors (now fixed).

Res file for Ursula ('Desktop' Browse) build tweaked - bits in the
font choices dialogue renamed, and button bar rearranged to hold the
new Save As Draw button. Other builds have had Save As Draw and
Save As Text buttons added, or not, depending upon availability of
suitable sprites, required UI simplicity, etc.

Now have:

  Browse$ChoicesFile
  Browse$ControlsFile
  Browse$ChoicesSave
  Browse$ControlsSave

(the last two are new) for loading and saving of the Choices or Controls
files. If unset, <App$Dir>.Choices or <App$Dir>.Controls will be set.
E.g., you could set Browse$ChoicesFile to be:

  <App$Dir>.Choices,Choices:WWW.(app).Choices

for loading and

  <Choices$Write>.WWW.(app).Choices

for saving. (The browser never saves Controls at the moment, so the
relevant variable above isn't effectively implemented, but could be
in future). Similarly, to support asymetric loading/saving of the Hotlist,
there are HotlistSave, HistorySave and ImageHistorySave entries in Choices
to complement HotlistPath, HistoryPath and ImageHistoryPath (which are used
for loading). save_save_choices will create directories as needed to obtain
the given path (and has also been fixed in various areas that hadn't been
tested out until now; e.g. zero termination of the AppName$ChoicesFile
variable expansion...). !Run[D] files updated appropriately.

Table widthing code rewritten. Slower, but a lot better on the whole.
Still has some problems - still needs a final 'make sure nothing is
below minimum width' scan, which it should be possible to do without.
No time to fix this at present!

The reformatter will now 'glue together' an LI token followed by any
non-LI token; so a bullet point followed by an item should not be able to
have a line break inserted after the bullet because of very tight width
constraints (it could before - yuk...).

'about:' brings up a page about the browser and any Plug-Ins, as with
Navigator (for example).

URI files support titles, as per spec. version 8. Saving a current
location to the Hotlist will thus give a sensible title now (unless
you're in a frame, so there's no title to get...). Of course, v1.00
files without a title still work.

Note that NOBR is *not* supported in this build and this combined with
the new table widther may cause problems on some sites (e.g. Microsoft's
home page!).
@
text
@d15 14
a28 9
/***************************************************/
/* File   : Redraw.h                               */
/*                                                 */
/* Purpose: Redraw functions for the browser.      */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 29-Nov-96: Created.                    */
/***************************************************/
@


1.6
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d48 2
a50 1
int               redraw_margin            (browser_data * b, reformat_cell * d, HStream * t);
@


1.5
log
@Now handles PARAM tags. Sorted out Plug-In bug that was related to Java
setting a 0 by 0 graphics window before calling Wimp_Poll (fixed in Java).
Implemented queue for Plug-Ins so multiple broadcasts aren't sent for
several Objects in one data chunk.

Added Docs directory with some documentation in it. More things to keep
checking for stylistic consistency, horray ;-)

Corrected !Run[D] for Ursula build to need AcornURI but not TaskModule
(URI handler needed for !Mail to pick up mailto: links).

Added display_height field to browser_data, analogous to display_width,
to cope with % sized objects by width and height (see how HRs are
handled in Redraw.c for an example of how it was always fairly easy
with width, but not height until this addition). Though you do have
to reload to get a new size; reformat isn't enough. Must see to this
some time...

Fixed bug where basic typefaces were claimed *before* the Choices file
had been read. For unusual Choices settings, this could create some
'interesting' problems now and again. This was part of narrower scope
work in the Choices code to allow font changing without leaking font
handles (now done; fm_shutdown only ditches fonts, it keeps internal
structures - must then call  fm_lose_fonts for all browsers to get the
bitfields up to date, then rewrite the typeface definitions and reclaim
basic fonts). Noticed that fm_claim_basic_typefaces would claim multiple
instances of the same font if there were several cases of the same font
mapped to different typeface styles - fixed.

Implemented PlugInControl settings, but not SupportObject (fully).
@
text
@d55 1
@


1.4
log
@More reformatter code bugs fixed; this one regarding width of items. Any
kerned string was overestimated (causing redraw bugs and caret position
problems in forms, apart from other minor bits elsewhere) and the default
size of a writable icon wasn't especially clever.

Crude Plug-In support; just about manages Java, but can't fetch on
behalf of Plug-In (for example). Had to change the default file access
URL construction to be 'file:/' instead of 'file://', or local file
fetches that reference Java applets won't work. This is in its very
early stages, and is being checked in mostly so that various Choices
issues can be worked on.
@
text
@d45 1
@


1.3
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d55 1
@


1.2
log
@Odd problem with Entries file meant none got checked in last time...
@
text
@d33 1
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d17 3
a19 1
/* Purpose: Redraw functions for the browser       */
d21 2
a22 1
/* History: 29-Nov-96: Created                     */
@
