head	1.2;
access;
symbols
	Browse-2_16:1.2
	Browse-2_15:1.2
	Browse-2_14:1.2
	Browse-2_13:1.2
	Browse-2_12:1.2
	Browse-2_11:1.2
	Browse-2_10:1.2
	Browse-2_09:1.2
	ahodgkin_208_i4_2:1.2
	ahodgkin_208_i4:1.1
	ahodgkin_208_i3:1.1
	ahodgkin_208_i2:1.1
	ahodgkin_208_i1:1.1;
locks; strict;
comment	@# @;


1.2
date	2000.05.31.15.59.00;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	99.09.02.13.19.43;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@/* Copyright 1999 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    URIfile.h                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Deal with URI files.                              */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 09-Apr-1999 (ADH): Created.                       */
/*          07-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_URIfile__
  #define Browser_URIfile__

  #include <kernel.h>

  /* Various definitions                                */
  /*                                                    */
  /* An enumeration listing the known URI file commands */

  typedef enum
  {
    urifile_none = 0,
    urifile_open,
    urifile_run

  } urifile_commands;

  /* The urifile_command structure is used to hold details  */
  /* of an individual command, and may be in a list of many */
  /* commands for a single URI file.                        */

  typedef struct urifile_command
  {
    struct
    {
      /* Usual header stuff */

      struct urifile_command * previous;
      struct urifile_command * next;

      urifile_commands         type;   /* So you know which part of the union to look at.     */

    } hdr;

    /* Command data*/

    union
    {
      /* No command - simple file with a URL and title string */

      struct
      {
        char     * url;                /* URL to fetch in a malloc allocated buffer.          */
        char     * title;              /* Title of the URL in a malloc allocated buffer.      */
      }
      none;

      /* The urifile_open command - open a URL with display setting flags */

      struct
      {
        char     * url;                /* URL to fetch in a malloc allocated buffer.          */
        unsigned   show_foreground :1; /* 1: Delay image loading, 0: Load them immediately.   */
        unsigned   show_background :1; /* 1: Display background images, 0: don't.             */
        unsigned   use_source_cols :1; /* 1: Use document specified colours, 0: use defaults. */
      }
      open;

      /* The urifile_run command - run a specified file */

      struct
      {
        char     * filename;           /* Filename of file to run in malloc allocated buffer. */
      }
      run;

    } data;

  } urifile_command;

  /* Function prototypes */

  _kernel_oserror * urifile_parse_uri_file       (const char * filename, urifile_command ** rethead);

  _kernel_oserror * urifile_execute_command_item (urifile_command * item, int discard_after);
  _kernel_oserror * urifile_execute_command_list (urifile_command * list, int discard_after);

  void              urifile_free_command_item    (urifile_command * item);
  void              urifile_free_command_list    (urifile_command * list);

#endif /* Browser_URIfile__ */
@


1.1
log
@Oh yeah, you'll probably need these too :-)
@
text
@d15 23
a37 29
/***************************************************/
/* File   : URIfile.h                              */
/*                                                 */
/* Purpose: Deal with URI files.                   */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 09-Apr-99: Created.                    */
/***************************************************/

/* Various definitions                                */
/*                                                    */
/* An enumeration listing the known URI file commands */

typedef enum
{
  urifile_none = 0,
  urifile_open,
  urifile_run

} urifile_commands;

/* The urifile_command structure is used to hold details  */
/* of an individual command, and may be in a list of many */
/* commands for a single URI file.                        */

typedef struct urifile_command
{
  struct
d39 3
a41 1
    /* Usual header stuff */
d43 1
a43 2
    struct urifile_command * previous;
    struct urifile_command * next;
d45 3
a47 1
    urifile_commands         type;       /* So you know which part of the union to look at.     */
d49 5
a53 1
  } hdr;
d55 2
a56 1
  /* Command data*/
d58 5
a62 3
  union
  {
    /* No command - simple file with a URL and title string */
d64 1
a64 1
    struct
d66 8
a73 4
      char     * url;                /* URL to fetch in a malloc allocated buffer.          */
      char     * title;              /* Title of the URL in a malloc allocated buffer.      */
    }
    none;
d75 1
a75 1
    /* The urifile_open command - open a URL with display setting flags */
d77 10
a86 8
    struct
    {
      char     * url;                /* URL to fetch in a malloc allocated buffer.          */
      unsigned   show_foreground :1; /* 1: Delay image loading, 0: Load them immediately.   */
      unsigned   show_background :1; /* 1: Display background images, 0: don't.             */
      unsigned   use_source_cols :1; /* 1: Use document specified colours, 0: use defaults. */
    }
    open;
d88 5
a92 1
    /* The urifile_run command - run a specified file */
d94 1
a94 5
    struct
    {
      char     * filename;           /* Filename of file to run in malloc allocated buffer. */
    }
    run;
d96 1
a96 1
  } data;
d98 1
a98 1
} urifile_command;
d100 1
a100 1
/* Function prototypes */
d102 2
a103 1
_kernel_oserror * urifile_parse_uri_file       (const char * filename, urifile_command ** rethead);
d105 2
a106 2
_kernel_oserror * urifile_execute_command_item (urifile_command * item, int discard_after);
_kernel_oserror * urifile_execute_command_list (urifile_command * list, int discard_after);
d108 1
a108 2
void              urifile_free_command_item    (urifile_command * item);
void              urifile_free_command_list    (urifile_command * list);
@

