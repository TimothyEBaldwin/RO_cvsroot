head	1.5;
access;
symbols
	Browse-2_16:1.5
	Browse-2_15:1.5
	Browse-2_14:1.5
	Browse-2_13:1.5
	Browse-2_12:1.5
	Browse-2_11:1.4
	Browse-2_10:1.4
	Browse-2_09:1.4
	ahodgkin_208_i4_2:1.3
	ahodgkin_208_i4:1.2
	ahodgkin_208_i3:1.2
	ahodgkin_208_i2:1.2
	ahodgkin_208_i1:1.2
	ahodgkin_207release:1.2
	ahodgkin_206release:1.2
	ahodgkin_205release:1.2
	ahodgkin_204release:1.2
	ahodgkin_202release:1.2
	ahodgkin_201release:1.2
	ahodgkin_200release:1.2
	ahodgkin_133beta:1.2
	ahodgkin_132beta:1.2
	ahodgkin_131beta:1.2
	ahodgkin_130beta:1.1;
locks; strict;
comment	@# @;


1.5
date	2006.03.13.22.06.20;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.26.09.42.35;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.31.15.58.59;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	98.01.31.10.55.48;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.12.18.10.07.16;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.5
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    SaveDraw.h                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Save a web page as a Draw file.                   */
/*                                                            */
/* Author:  A.D.Hodgkinson, including various functions from  */
/*          original Customer browser by Merlyn Kline.       */
/*                                                            */
/* History: 13-Nov-1997 (ADH): Created.                       */
/*          07-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_SaveDraw__
  #define Browser_SaveDraw__

  #include <kernel.h>

  #include "Global.h"

  /* General bits and pieces */

  typedef enum
  {
    draw_OBJFONTLIST = 0,
    draw_OBJTEXT     = 1,
    draw_OBJPATH     = 2,
    draw_OBJSPRITE   = 5,
    draw_OBJGROUP    = 6,
    draw_OBJTEXTAREA = 9,
    draw_OBJTEXTCOL  = 10,
    draw_OBJTEXTTRFM = 12,
    draw_OBJSPRITRFM = 13,
    draw_OBJJPEG     = 16
  }
  draw_tagtyp;

  typedef int  draw_sizetyp;
  typedef BBox draw_bboxtyp;
  typedef int  draw_coltyp;

  /* For paths */

  typedef int draw_pathwidth;

  /* Use these for path styles described as a 32-bit number */

  #define DRAW_JOINSTYLE_MASK       (3u)
  #define DRAW_JOINSTYLE_MITRED     (0)
  #define DRAW_JOINSTYLE_ROUND      (1u)
  #define DRAW_JOINSTYLE_BEVELLED   (2u)

  #define DRAW_ENDCAP_MASK          (12u)
  #define DRAW_ENDCAP_BUTT          (0)
  #define DRAW_ENDCAP_ROUND         (1u<<2)
  #define DRAW_ENDCAP_SQUARE        (2u<<2)
  #define DRAW_ENDCAP_TRIANGLE      (3u<<2)

  #define DRAW_STARTCAP_MASK        (48u)
  #define DRAW_STARTCAP_BUTT        (0)
  #define DRAW_STARTCAP_ROUND       (1u<<4)
  #define DRAW_STARTCAP_SQUARE      (2u<<4)
  #define DRAW_STARTCAP_TRIANGLE    (3u<<4)

  #define DRAW_WINDRULE_MASK        (64u)
  #define DRAW_WINDRULE_NONZERO     (0)
  #define DRAW_WINDRULE_EVENODD     (1u<<6)

  #define DRAW_DASHFLAG_MASK        (128u)
  #define DRAW_DASHFLAG_NONE        (0)
  #define DRAW_DASHFLAG_PRESENT     (1u<<7)

  #define DRAW_TRIANGLEWIDTH_MASK   (0xff0000u)
  #define DRAW_TRIANGLEWIDTH_SHIFT  (16)
  #define DRAW_TRIANGLELENGTH_MASK  (0xff000000u)
  #define DRAW_TRIANGLELENGTH_SHIFT (24)

  /* Alternatively, break the word down into this structure */

  typedef struct
  {
    unsigned char joincapwind; /* 1 byte  */ /* bit 0..1 join         */
                                             /* bit 2..3 end cap      */
                                             /* bit 4..5 start cap    */
                                             /* bit 6    winding rule */
                                             /* bit 7    dashed       */
    unsigned char reserved8;   /* 1 byte  */
    unsigned char tricapwid;   /* 1 byte  */ /* 1/16th of line width */
    unsigned char tricaphei;   /* 1 byte  */ /* 1/16th of line width */
  }
  draw_pathstyle;

  #define DRAW_TAGID_MASK          (0xffu)

  typedef enum
  {
     draw_PathTERM       = 0, /* end of path                                   */
     draw_PathPTR        = 1, /* pointer to continuation of path               */
     draw_PathMOVE       = 2, /* move to (x,y), starts new subpath             */
     draw_PathMOVENOWIND = 3, /* move to (x,y) without affecting winding       */
     draw_PathCLOSEGAP   = 4, /* close current subpath with a gap              */
     draw_PathCLOSE      = 5, /* close current subpath with a line             */
     draw_PathCURVE      = 6, /* bezier curve to (x3,y3) with 2 control points */
     draw_PathGAP        = 7, /* gap to (x,y) without starting new subpath     */
     draw_PathLINE       = 8  /* line to (x,y)                                 */
  }
  draw_path_tagtype;

  /* For text */

  typedef char draw_fontref;

  typedef struct
  {
    draw_fontref fontref;    /* 1 byte  */
    char         reserved8;  /* 1 byte  */
    short        reserved16; /* 2 bytes */
  }
  draw_textstyle;

  typedef unsigned int draw_fontsize;

  typedef struct
  {
    int         typeface;   /* Index into fontname table */
    int         typesizex;
    int         typesizey;
    draw_coltyp textcolour; /* Text colour RGB */
    draw_coltyp background; /* Hint for anti-aliased printing RGB */
  }
  fontrec;


  /* Path structure header item */

  typedef struct
  {
    draw_tagtyp     tag;         /* 1 word  */
    draw_sizetyp    size;        /* 1 word  */
    draw_bboxtyp    bbox;        /* 4 words */
    draw_coltyp     fillcolour;  /* 1 word  */
    draw_coltyp     pathcolour;  /* 1 word  */
    draw_pathwidth  pathwidth;   /* 1 word  */
    draw_pathstyle  pathstyle;   /* 1 word  */
  }
  draw_pathstrhdr;

  /* Sprite header */

  typedef struct
  {
    draw_tagtyp  tag;  /* 1 word  */
    draw_sizetyp size; /* 1 word  */
    draw_bboxtyp bbox; /* 4 words */
  }
  draw_spristrhdr;

  /* A line of text (maybe transformed) */

  typedef struct
  {
    int x;
    int y;
  }
  draw_objcoord;

  typedef struct
  {
    draw_tagtyp    tag;        /* 1 word  */
    draw_sizetyp   size;       /* 1 word  */
    draw_bboxtyp   bbox;       /* 4 words */
    draw_coltyp    textcolour; /* 1 word  */
    draw_coltyp    background; /* 1 word  */
    draw_textstyle textstyle;  /* 1 word  */
    draw_fontsize  fsizex;     /* 1 word, unsigned */
    draw_fontsize  fsizey;     /* 1 word, unsigned */
    draw_objcoord  coord;      /* 2 words */
  }
  draw_textstrhdr;

  #define SaveDraw_FontFlags_Kerned      (1u<<0)
  #define SaveDraw_FontFlags_RightToLeft (1u<<1)

  typedef struct
  {
    draw_tagtyp    tag;        /* 1 word  */
    draw_sizetyp   size;       /* 1 word  */
    draw_bboxtyp   bbox;       /* 4 words */
    int            matrix[6];
    unsigned int   fontflags;
    draw_coltyp    textcolour; /* 1 word  */
    draw_coltyp    background; /* 1 word  */
    draw_textstyle textstyle;  /* 1 word  */
    draw_fontsize  fsizex;     /* 1 word, unsigned */
    draw_fontsize  fsizey;     /* 1 word, unsigned */
    draw_objcoord  coord;      /* 2 words */
  }
  draw_trfmtextstrhdr;

  /* File header */

  typedef struct
  {
    char         title[4];

    int          majorstamp;
    int          minorstamp;
    char         progident[12];

    draw_bboxtyp bbox;
  }
  draw_fileheader;

  /* General header for graphic objects */

  typedef struct
  {
    draw_tagtyp  tag;  /* 1 word  */
    draw_sizetyp size; /* 1 word  */
    draw_bboxtyp bbox; /* 4 words */
  }
  draw_objhdr;

  /* A font list */

  typedef struct
  {
    draw_tagtyp  tag;  /* 1 word  */
    draw_sizetyp size; /* 1 word  */
  }
  draw_fontliststrhdr;

  typedef struct
  {
    draw_tagtyp  tag;
    draw_sizetyp size;

    draw_fontref fontref;
    char         fontname[1]; /* String, null terminated */
  }
  draw_fontliststr;

  /* For sprites */

  typedef struct /* Format of a sprite header */
  {
    int  next;      /*  Offset to next sprite                */
    char name[12];  /*  Sprite name                          */
    int  width;     /*  Width in words-1      (0..639)       */
    int  height;    /*  Height in scanlines-1 (0..255/511)   */
    int  lbit;      /*  First bit used (left end of row)     */
    int  rbit;      /*  Last bit used (right end of row)     */
    int  image;     /*  Offset to sprite image               */
    int  mask;      /*  Offset to transparency mask          */
    int  mode;      /*  Mode sprite was defined in           */
                    /*  Palette data optionally follows this */
                    /*  in memory                            */
  }
  sprite_header;

  typedef struct
  {
   int width;
   int height;
   int mask;
   int mode;
  }
  sprite_info;

  /* We're going to fix scale factors for OS units and points */
  /* to Draw units.                                           */

  #define PTD(x) (((x)*16)/25) /* Convert millipoints to draw units */
  #define OTD(x) ((x)*256)     /* Convert OS units to draw units    */

  /* Some miscellaneous useful definitions */

  #define DSIZE_FLINE (sizeof(draw_pathstrhdr)+2*12+4)
  #define DSIZE_FRECT (sizeof(draw_pathstrhdr)+5*12+4)
  #define DSIZE_FTRIA (sizeof(draw_pathstrhdr)+4*12+4)

  /* Function prototypes */

  _kernel_oserror * savedraw_write_bytes    (const char * restrict s, size_t n);

  _kernel_oserror * savedraw_save_draw      (browser_data * b, const char * pathname, int bgimages);
  unsigned int      savedraw_draw_size      (browser_data * b, int bgimages);

#endif /* Browser_SaveDraw__ */
@


1.4
log
@  Huge pile of changes bringing relatively ancient sources up to date.
Detail:
  This check-in includes Phoenix version 2.11 (26-Apr-2005); only the
  debug and JavaScript builds of Phoenix have been tested and resources
  will definitely be out of date for other versions. The various "!..."
  scripts have been updated to require a minimum of 2MB with no maximum
  limit for building, as CC 5.60 is quite RAM hungry.
Admin:
  Phoenix 2.11 JS builds OK, works reasonably well. Many outstanding
  issues of course, as this is a very outdated browser now.

Version 2.09. Tagged as 'Browse-2_09'
@
text
@d20 1
a20 1
/* Purpose: Save a web page as text.                          */
d47 3
a49 1
    draw_OBJTEXTTRFM = 12
d61 34
d108 2
d112 9
a120 5
     draw_PathTERM  = 0, /* end of path                                   */
     draw_PathMOVE  = 2, /* move to (x,y), starts new subpath             */
     draw_PathLINE  = 8, /* line to (x,y)                                 */
     draw_PathCURVE = 6, /* bezier curve to (x3,y3) with 2 control points */
     draw_PathCLOSE = 5  /* close current subpath with a line             */
d293 1
d299 1
a299 2
  int               savedraw_write_bytes    (const char * s, unsigned int n);
  int               savedraw_rectangle_fill (int x, int y, int w, int h, unsigned int c);
@


1.3
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d257 1
a257 1
  int               savedraw_rectangle_fill (int x, int y, int w, int h, int c);
d260 1
a260 1
  int               savedraw_draw_size      (browser_data * b, int bgimages);
@


1.2
log
@Check for WindowManager 3.97 and ensure Unicode$Path is set in all
!Run[D] files, don't set the Alias$@@PrintType_FF4 variable, and updated
Customer build ROM obey file variants. Various other changes to
the Run files for new module versions, updated paths to support
new positions of choices, hotlist and histories (see later), etc.

!Sprites[22] files hold small !app icons for some variants, and
an ic_browse sprite. Some variants now have a Sprites and Sprites22
file instead of just Sprites, with the former containing various
mode 12 or 15 specific sprites.

Text files dragged to the URL writable are treated as ANT URL files. This
relies on URLBarWrit (Toolbars.h) being a unique ID, which it should be,
but beware of the Hotlist and Choices numberspaces...

INPUT TYPE=BUTTON supported. Form items without a FORM tag are now shown
(as MSIE 4, but not NN 4).

'*', '-', '@@', '_' and '.' are not escaped when submitting forms now. The
Web interface to the IMDb now works.

INPUT TYPE=HIDDEN items will not affect the line height anymore - so
http://www.hotmail.com/ now has correctly aligned writable icons, for
example. Similarly, TAG_FORM and TAG_FORM_END items could push up
line height and don't anymore.

HRs with a specified pixel width will now influence the size of a table
cell (they didn't before).

BRs now checked by tagno field when the browser needs to know something
was an actual BR tag rather than just a line break signal, and by the
style bit entry when only the indication of a line break is required.

Table widths of 0 or 0% are ignored.

Trace.c updated to report height and background fields in a table_stream.

fm_putsl() writes a terminator into the string; the Forms.c routines were
calling this for displaying INPUT TYPE=PASSWORD fields using the FE_PassCode
literal string (a line of stars). This write into a read only data area
would make the debugger fault the access. A local char array is now used
instead, to get round this (note the use of var[]=literal rather than
var[sizeof(literal)]; strcpy(var, literal) due to some weird compiler bug
that copies the wrong thing into 'var' under some (undefined...)
circumstances).

Text areas don't scroll back to the top line when clicked in anymore;
single line writables don't scroll back to the left either. When
reentering a text area from 'above', the caret appears at the top line
rather than 'somewhere further down'...

ARROWS_MOVE_OUT compile time option at the top of Forms.c defines whether
you must press Tab/Shift+Tab to move between writable fields in forms or
if up/down will drop out of them, though if keyboard control is on this
is enforced (or you get trapped inside the form!).

urlutils_filetype_from_url now uses MimeMap module.

If fetcher is told a page is text, it'll check for a filename extension and
may choose to use this instead (e.g. it may find it's HTML instead). This
is to try and get around duff servers... (e.g. http://www.batalarms.co.uk/).

Save dialogues shouldn't flicker when options that don't change the
filetype are selected (before, the draggable sprite was always reset for
each selection). Noticed the erroneous setting of a static variable in
SaveFile.c by a call to this by SaveObject.c, and so added a flag to
savefile_set_filetype to deal with this - would have been possible to get
the wrong filetype sent to applications or at best the wrong filetype
sprite in the dialogue without that.

The caret shouldn't jump out of a form back to the URL writable if the page
reformats now.

Table background colours now supported (as in the colour you see in the
border space if the cellspacing is large enough; this is as in MSIE, not
as in Navigator). Drawfile output routines updated accordingly.

Corrected erroneous use of wimpt_dx() / wimpt_dy() in a couple of places
in Images.c, which meant that (say) 1x1 images didn't work correctly in
medium resolution display modes.

Now have support for save as text (component ID and event 0x12) and save
as Draw (component ID and event 0x13) buttons. Dubious conditions for
greying and ungreying the print, save source and view source buttons and
menu options sorted out as part of implementing the same for the two new
buttons; added greying out of their associated menu items in passing.

Turned kerning on in draw file objects (does mean a rather heinous
increase in file size, but this is the only way to ensure the draw file
matches the visible page).

Comments before functions in SaveDraw.c are now complete and up to date.

Image and visit histories now generate a crude hash number to speed up
searching for items. It does give a speed increase, though it's a
disappointingly small one.

Issue of left/right margins and cellpaddings sorted out. Now have
redraw_left/right_margin for finding out the basic gap you must leave.
redraw_left/right_gap then gives any extra indentation for LI, BLOCKQUOTE
or whatever. The last two can be subtracted from the display width to
get an available page width for any section of text. Note that
redraw_left_gap replaces redraw_margin. The redraw_start_x function
uses the above to work out where a line's left hand edge should be,
taking account of left/right/centre alignment. HRs have been fixed now
(they were quite broken in v1.30, I think) based on this new model and
the behaviour of MSIE/NN 4.

Fixed width of cells with no contents - cell padding values wouldn't
have worked properly as the reformatter returns 0 rather than the left
hand margin size if given no stream.

Removed FM_Absolute flags for Font_Paint (spotted by DBrown) - sets bit
2, which is reserved...?

IMG width and height in % terms now works correctly; a % of available
width (after margins and indents) or height on the main page or for
a table cell, if the image lies in one. Because of the chicken-and-egg
problem with the latter, the cell must specify a width and/or height
for things to work properly. If this is not done, you'll usually end
up with a 1:1 scaled image (as in Navigator 4, rather than ending up
with no image or even no cell (!), as in MSIE 4).

HEIGHT attribute on a TABLE tag is supported, but only in a crude
fashion; the extra height (if there is any) is distributed over the
rows in a linear fashion. This is probably all you have to do in
practice, but I haven't checked. To maintain a notion of min/max
height as well as width would of course require a great deal more
work...

If using client pull to reload a page with a fragment ('...#name')
specified, then the reload wouldn't work on the same page; it'd just
jump to the fragment position. This won't happen if b->reloading is
set now (so works in conjunction with client pull on the same page
forcing a non-cached fetch). Similarly, if POSTing to such a URL,
a fetch will proceed (both these fixes done originally for
http://jupiter.beseen.com/chat/rooms/g/1678/).

browser_inherit split to browser_inherit and browser_inherit_post_data;
the code for the latter didn't clear any post_data in the child before
copying from the parent either, and could cause flex errors (now fixed).

Res file for Ursula ('Desktop' Browse) build tweaked - bits in the
font choices dialogue renamed, and button bar rearranged to hold the
new Save As Draw button. Other builds have had Save As Draw and
Save As Text buttons added, or not, depending upon availability of
suitable sprites, required UI simplicity, etc.

Now have:

  Browse$ChoicesFile
  Browse$ControlsFile
  Browse$ChoicesSave
  Browse$ControlsSave

(the last two are new) for loading and saving of the Choices or Controls
files. If unset, <App$Dir>.Choices or <App$Dir>.Controls will be set.
E.g., you could set Browse$ChoicesFile to be:

  <App$Dir>.Choices,Choices:WWW.(app).Choices

for loading and

  <Choices$Write>.WWW.(app).Choices

for saving. (The browser never saves Controls at the moment, so the
relevant variable above isn't effectively implemented, but could be
in future). Similarly, to support asymetric loading/saving of the Hotlist,
there are HotlistSave, HistorySave and ImageHistorySave entries in Choices
to complement HotlistPath, HistoryPath and ImageHistoryPath (which are used
for loading). save_save_choices will create directories as needed to obtain
the given path (and has also been fixed in various areas that hadn't been
tested out until now; e.g. zero termination of the AppName$ChoicesFile
variable expansion...). !Run[D] files updated appropriately.

Table widthing code rewritten. Slower, but a lot better on the whole.
Still has some problems - still needs a final 'make sure nothing is
below minimum width' scan, which it should be possible to do without.
No time to fix this at present!

The reformatter will now 'glue together' an LI token followed by any
non-LI token; so a bullet point followed by an item should not be able to
have a line break inserted after the bullet because of very tight width
constraints (it could before - yuk...).

'about:' brings up a page about the browser and any Plug-Ins, as with
Navigator (for example).

URI files support titles, as per spec. version 8. Saving a current
location to the Hotlist will thus give a sensible title now (unless
you're in a frame, so there's no title to get...). Of course, v1.00
files without a title still work.

Note that NOBR is *not* supported in this build and this combined with
the new table widther may cause problems on some sites (e.g. Microsoft's
home page!).
@
text
@d15 240
a254 229
/***************************************************/
/* File   : SaveDraw.h                             */
/*                                                 */
/* Purpose: Save a web page as a Draw file.        */
/*                                                 */
/* Author : Merlyn Kline for Customer browser;    */
/*          This source adapted by A.D.Hodgkinson  */
/*          including bits from RISC_OSLib.        */
/*                                                 */
/* History: 13-Nov-97: Created.                    */
/***************************************************/

/* General bits and pieces */

typedef enum
{
  draw_OBJFONTLIST = 0,
  draw_OBJTEXT     = 1,
  draw_OBJPATH     = 2,
  draw_OBJSPRITE   = 5,
  draw_OBJGROUP    = 6,
  draw_OBJTEXTAREA = 9,
  draw_OBJTEXTCOL  = 10,
  draw_OBJTEXTTRFM = 12
}
draw_tagtyp;

typedef int  draw_sizetyp;
typedef BBox draw_bboxtyp;
typedef int  draw_coltyp;

/* For paths */

typedef int draw_pathwidth;

typedef struct
{
  unsigned char joincapwind; /* 1 byte  */ /* bit 0..1 join         */
                                           /* bit 2..3 end cap      */
                                           /* bit 4..5 start cap    */
                                           /* bit 6    winding rule */
                                           /* bit 7    dashed       */
  unsigned char reserved8;   /* 1 byte  */
  unsigned char tricapwid;   /* 1 byte  */ /* 1/16th of line width */
  unsigned char tricaphei;   /* 1 byte  */ /* 1/16th of line width */
}
draw_pathstyle;

typedef enum
{
   draw_PathTERM  = 0, /* end of path                                   */
   draw_PathMOVE  = 2, /* move to (x,y), starts new subpath             */
   draw_PathLINE  = 8, /* line to (x,y)                                 */
   draw_PathCURVE = 6, /* bezier curve to (x3,y3) with 2 control points */
   draw_PathCLOSE = 5  /* close current subpath with a line             */
}
draw_path_tagtype;

/* For text */

typedef char draw_fontref;

typedef struct
{
  draw_fontref fontref;    /* 1 byte  */
  char         reserved8;  /* 1 byte  */
  short        reserved16; /* 2 bytes */
}
draw_textstyle;

typedef unsigned int draw_fontsize;

typedef struct
{
  int         typeface;   /* Index into fontname table */
  int         typesizex;
  int         typesizey;
  draw_coltyp textcolour; /* Text colour RGB */
  draw_coltyp background; /* Hint for anti-aliased printing RGB */
}
fontrec;


/* Path structure header item */

typedef struct
{
  draw_tagtyp     tag;         /* 1 word  */
  draw_sizetyp    size;        /* 1 word  */
  draw_bboxtyp    bbox;        /* 4 words */
  draw_coltyp     fillcolour;  /* 1 word  */
  draw_coltyp     pathcolour;  /* 1 word  */
  draw_pathwidth  pathwidth;   /* 1 word  */
  draw_pathstyle  pathstyle;   /* 1 word  */
}
draw_pathstrhdr;

/* Sprite header */

typedef struct
{
  draw_tagtyp  tag;  /* 1 word  */
  draw_sizetyp size; /* 1 word  */
  draw_bboxtyp bbox; /* 4 words */
}
draw_spristrhdr;

/* A line of text (maybe transformed) */

typedef struct
{
  int x;
  int y;
}
draw_objcoord;

typedef struct
{
  draw_tagtyp    tag;        /* 1 word  */
  draw_sizetyp   size;       /* 1 word  */
  draw_bboxtyp   bbox;       /* 4 words */
  draw_coltyp    textcolour; /* 1 word  */
  draw_coltyp    background; /* 1 word  */
  draw_textstyle textstyle;  /* 1 word  */
  draw_fontsize  fsizex;     /* 1 word, unsigned */
  draw_fontsize  fsizey;     /* 1 word, unsigned */
  draw_objcoord  coord;      /* 2 words */
}
draw_textstrhdr;

#define SaveDraw_FontFlags_Kerned      (1u<<0)
#define SaveDraw_FontFlags_RightToLeft (1u<<1)

typedef struct
{
  draw_tagtyp    tag;        /* 1 word  */
  draw_sizetyp   size;       /* 1 word  */
  draw_bboxtyp   bbox;       /* 4 words */
  int            matrix[6];
  unsigned int   fontflags;
  draw_coltyp    textcolour; /* 1 word  */
  draw_coltyp    background; /* 1 word  */
  draw_textstyle textstyle;  /* 1 word  */
  draw_fontsize  fsizex;     /* 1 word, unsigned */
  draw_fontsize  fsizey;     /* 1 word, unsigned */
  draw_objcoord  coord;      /* 2 words */
}
draw_trfmtextstrhdr;

/* File header */

typedef struct
{
  char         title[4];

  int          majorstamp;
  int          minorstamp;
  char         progident[12];

  draw_bboxtyp bbox;
}
draw_fileheader;

/* General header for graphic objects */

typedef struct
{
  draw_tagtyp  tag;  /* 1 word  */
  draw_sizetyp size; /* 1 word  */
  draw_bboxtyp bbox; /* 4 words */
}
draw_objhdr;

/* A font list */

typedef struct
{
  draw_tagtyp  tag;  /* 1 word  */
  draw_sizetyp size; /* 1 word  */
}
draw_fontliststrhdr;

typedef struct
{
  draw_tagtyp  tag;
  draw_sizetyp size;

  draw_fontref fontref;
  char         fontname[1]; /* String, null terminated */
}
draw_fontliststr;

/* For sprites */

typedef struct /* Format of a sprite header */
{
  int  next;      /*  Offset to next sprite                */
  char name[12];  /*  Sprite name                          */
  int  width;     /*  Width in words-1      (0..639)       */
  int  height;    /*  Height in scanlines-1 (0..255/511)   */
  int  lbit;      /*  First bit used (left end of row)     */
  int  rbit;      /*  Last bit used (right end of row)     */
  int  image;     /*  Offset to sprite image               */
  int  mask;      /*  Offset to transparency mask          */
  int  mode;      /*  Mode sprite was defined in           */
                  /*  Palette data optionally follows this */
                  /*  in memory                            */
}
sprite_header;

typedef struct
{
 int width;
 int height;
 int mask;
 int mode;
}
sprite_info;

/* We're going to fix scale factors for OS units and points */
/* to Draw units.                                           */

#define PTD(x) (((x)*16)/25) /* Convert millipoints to draw units */
#define OTD(x) ((x)*256)     /* Convert OS units to draw units    */

/* Some miscellaneous useful definitions */

#define DSIZE_FRECT (sizeof(draw_pathstrhdr)+5*12+4)
#define DSIZE_FTRIA (sizeof(draw_pathstrhdr)+4*12+4)
d256 2
a257 1
/* Function prototypes */
d259 2
a260 2
int               savedraw_write_bytes    (const char * s, unsigned int n);
int               savedraw_rectangle_fill (int x, int y, int w, int h, int c);
d262 1
a262 2
_kernel_oserror * savedraw_save_draw      (browser_data * b, const char * pathname, int bgimages);
int               savedraw_draw_size      (browser_data * b, int bgimages);
@


1.1
log
@Not all resources are up to date in this check-in, and documentation
both within source and stuff in 'Docs' is out of date or missing - I
was very pushed for time on this one... Hopefully will do another
'tidy up' check-in before close on Friday; until then, beware of
anything other than the Ursula (Desktop browser) build. Anyway...

Export As Draw done. As part of this, FONT SIZE and SUP / SUB adjustment
of font size is done in fm_token_font_info rather than fm_find_token_font.

Bullets and switches are plotted as indirected sprite items, rather than
indirected text + sprite items - this relied on being in a redraw loop to
pick the sprites up from the local pool (failed during printing).

URI files now have a LF line ending rather than CR... '*' recognised
as an empty field when loading via. RAM transfer now (only worked for
loading from disc before).

Gave placeholder bounding boxes 4 OS units more minimum extra gap
vertically and reduced horizontal addition to this value * 1.5, rather
than * 2 (see reformat_get_placeholder_size).

Background image tiling starts at ymax - h + 4, rather than ymax, so
there isn't the bottom line of pixels from the top tile always present
at the top of the window. The '+4' is for caution's sake.

Can now save a frame's HTML source, that of its parent or its ancestor,
and the same for the URI pointing to those documents - see Menus.h for
the relevant component IDs that should lead to the SaveFile dialogue.

Have hopefully fixed timeout = 0 values (i.e. 'forever') on things
like LinkTo; before, image fetches could override the state (so you'd
only ever see brief flickers of a given URL as the pointer went over
a link).

Save File dialogue will remember the state of option or radio buttons
for a given parent component origin and restore that state when the
dialogue is next opened from the same place (stops turning on saving
as a URL file also turning on 'save background images' for Draw file
export, etc.).

Use of a META tag to reload the *same* page now sets the 'reloading'
flag in the browser so that it doesn't go through a proxy - otherwise
pages which are meant to update periodically through client pull
don't work, as they keep coming out of the cache.

Can now handle images specifying just a width or height in the HTML
(other dimension is scaled accordingly, but note that the placeholder
size must still be 'dumb' until the image data comes in). An image
will now override an image history size entry for the same entry
with a different size.
@
text
@d37 2
a38 1
  draw_OBJTEXTCOL  = 10
d122 1
a122 1
/* A line of text */
d144 19
@
