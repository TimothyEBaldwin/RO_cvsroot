head	1.10;
access;
symbols
	Browse-2_16:1.10
	Browse-2_15:1.10
	Browse-2_14:1.10
	Browse-2_13:1.10
	Browse-2_12:1.10
	Browse-2_11:1.9
	Browse-2_10:1.9
	Browse-2_09:1.9
	ahodgkin_208_i4_2:1.9
	ahodgkin_208_i4:1.8
	ahodgkin_208_i3:1.8
	ahodgkin_208_i2:1.8
	ahodgkin_208_i1:1.8
	ahodgkin_207release:1.8
	ahodgkin_206release:1.8
	ahodgkin_205release:1.7
	ahodgkin_204release:1.7
	ahodgkin_202release:1.7
	ahodgkin_201release:1.6
	ahodgkin_200release:1.6
	ahodgkin_133beta:1.6
	ahodgkin_132beta:1.6
	ahodgkin_131beta:1.5
	ahodgkin_130beta:1.4
	ahodgkin_129:1.3
	ahodgkin_128beta:1.3
	ahodgkin_128alpha:1.3
	ahodgkin_127beta2:1.3
	ahodgkin_127beta:1.3
	ahodgkin_126beta:1.3
	ahodgkin_AW97patch:1.3
	ahodgkin_AW97:1.3;
locks; strict;
comment	@# @;


1.10
date	2006.03.13.22.06.20;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	2000.05.31.15.58.54;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	98.07.09.10.28.06;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	98.03.20.12.13.07;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	98.02.06.13.55.35;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	98.01.31.10.55.44;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.12.18.10.07.15;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.08.18.10.00.12;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.08.01.09.00.59;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.29.31;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.10
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Forms.h                                           */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Functions to manage HTML forms.                   */
/*                                                            */
/* Author:  A.D.Hodgkinson, including various functions from  */
/*          original Customer browser by Merlyn Kline.       */
/*                                                            */
/* History: 20-Jan-1997 (ADH): Created.                       */
/*          10-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_Forms__
  #define Browser_Forms__

  #include <kernel.h>
  #include <tboxlibs/wimp.h>
  #include <HTMLLib/HTMLLib.h>

  #include "FontManage.h"

  #include "Global.h"

  /* Various definitions */

  typedef enum form_fieldtype
  {
    form_text,
    form_password,
    form_checkbox,
    form_radio,
    form_select,
    form_textarea,
    form_image,
    form_submit,
    form_reset,
    form_button,
    form_file,
    form_hidden

  } form_fieldtype;

  typedef struct fv_select
  {
    int  scroll;
    char selection[4];

  } fv_select;

  typedef union
  {
    char      text[4];
    int       checked;
    fv_select select;

  } form_field_value;

  /* Miscellaneous definitions */

  #define FE_PassCode "****************************************"

  /* Function prototypes */

  _kernel_oserror  * form_new_form                   (browser_data * b, HStream * token);
  _kernel_oserror  * form_discard                    (browser_data * b);
  _kernel_oserror  * form_put_field                  (browser_data * b, HStream * token, char * value, int update);
  _kernel_oserror  * form_new_field                  (browser_data * b, HStream * token, form_fieldtype type, char * value);

  form_field_value * form_get_field                  (browser_data * b, HStream * token);
  char             * form_get_field_text             (const browser_data * restrict b, const HStream * restrict token);
  void               form_get_linesize               (BBox * fontbox, int * lh, int * lb);
  void               form_abandon_menu               (void);

  int                form_give_focus                 (browser_data * b);

  const char       * form_submission_information     (browser_data * b, HStream * token, int * post);
  int                form_could_load_text_at_pointer (browser_data * b, const char * filename);

  _kernel_oserror  * form_click_field                (browser_data * b, HStream * token, int mode, int x, int y);
  _kernel_oserror  * form_cancel_edit                (browser_data * b);
  _kernel_oserror  * form_finish_edit                (browser_data * b);
  const char       * form_button_text                (HStream * tp);
  int                form_token_cursor_editable      (browser_data * b, HStream * token);
  _kernel_oserror  * form_process_key                (browser_data * b, int * key);
  void               form_select_menu_event          (WimpPollBlock * e);
  void               form_check_caret                (browser_data * b);
  void               form_caret_may_need_moving      (browser_data * b);

  _kernel_oserror  * form_textarea_redraw
                     (
                       const browser_data * restrict b,
                       const HStream      * restrict token,
                       const BBox         * restrict box,
                       const BBox         * gw,
                       fm_face              fh,
                       int                  multiline,
                       int                  password,
                       unsigned int         text_foreground,
                       unsigned int         text_background
                     );

#endif /* Browser_Forms__ */
@


1.9
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d36 2
d86 1
a86 1
  char             * form_get_field_text             (browser_data * b, HStream * token);
d105 12
a116 1
  void               form_textarea_redraw            (browser_data * b, HStream * token, BBox * box, BBox * gw, int fh, int multiline, int password);
@


1.8
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d15 87
a101 75
/***************************************************/
/* File   : Forms.h                                */
/*                                                 */
/* Purpose: Functions to manage HTML forms.        */
/*                                                 */
/* Author : Merlyn Kline for Customer browser     */
/*          This source adapted by A.D.Hodgkinson  */
/*                                                 */
/* History: 28-Jan-97: Created.                    */
/***************************************************/

/* Various definitions */

typedef enum form_fieldtype
{
  form_text,
  form_password,
  form_checkbox,
  form_radio,
  form_select,
  form_textarea,
  form_image,
  form_submit,
  form_reset,
  form_button,
  form_file,
  form_hidden

} form_fieldtype;

typedef struct fv_select
{
  int  scroll;
  char selection[4];

} fv_select;

typedef union
{
  char      text[4];
  int       checked;
  fv_select select;

} form_field_value;

/* Miscellaneous definitions */

#define FE_PassCode "****************************************"

/* Function prototypes */

_kernel_oserror  * form_new_form                   (browser_data * b, HStream * token);
_kernel_oserror  * form_discard                    (browser_data * b);
_kernel_oserror  * form_put_field                  (browser_data * b, HStream * token, char * value, int update);
_kernel_oserror  * form_new_field                  (browser_data * b, HStream * token, form_fieldtype type, char * value);

form_field_value * form_get_field                  (browser_data * b, HStream * token);
char             * form_get_field_text             (browser_data * b, HStream * token);
void               form_get_linesize               (BBox * fontbox, int * lh, int * lb);
void               form_abandon_menu               (void);

int                form_give_focus                 (browser_data * b);

const char       * form_submission_information     (browser_data * b, HStream * token, int * post);
int                form_could_load_text_at_pointer (browser_data * b, const char * filename);

_kernel_oserror  * form_click_field                (browser_data * b, HStream * token, int mode, int x, int y);
_kernel_oserror  * form_cancel_edit                (browser_data * b);
_kernel_oserror  * form_finish_edit                (browser_data * b);
const char       * form_button_text                (HStream * tp);
int                form_token_cursor_editable      (browser_data * b, HStream * token);
_kernel_oserror  * form_process_key                (browser_data * b, int * key);
void               form_select_menu_event          (WimpPollBlock * e);
void               form_check_caret                (browser_data * b);
void               form_caret_may_need_moving      (browser_data * b);
d103 3
a105 1
void               form_textarea_redraw            (browser_data * b, HStream * token, BBox * box, BBox * gw, int fh, int multiline, int password);
@


1.7
log
@Programming warehouse link removed from all hotlists - the page has gone.

Some compile-time hacks in place to use MemLib, a dynamic area based
malloc replacement which shrinks its heap when possible. All builds
have these switched off at the moment. Seemed to work with just Browse,
though there would be problems with message blocks stored in dynamic
areas because of the Wimp's '&3800000' check - however, it failed when
HTMLLib was made to use it, too. Don't know why yet.

ItemInfo.[c/h] source added, with Res file additions for testbed Browse
and Phoenix.

Small fetch windows now work properly regardless of toolbar settings
in the Choices.

Reload now reloads all images too, rather than only reloading them for
as long as the main page was being fetched.

Added a simple 'Find' facility.

Realised that event handlers in eventlib are called in reverse order
of registration, so the miscellaneous event handler is now registered
first rather than last.

Multiuser code added (most only active if SINGLE_USER is undefined). As
part of this, hotlist code now knows about read-only items (done for the
Customer-style 'Resources' file, but works generally anyway).
handle_add_hotlist doesn't try to save the hotlist itself anymore (the
hotlist_add function does all that through hotlist_modified anyway).

Customer build Choices and Controls updated slightly (e.g. ClaimHelp
off, hotlist to save on quit only).

Customer build now uses Phoenix-style buttons. Sprites files which
worked at the time (but will probably be out of date now) and included
most of the original Customer-style sprites are in
'Utils.Icons.Customer'.

Choices, Messages and Res files for all builds now stripped down to only
single user items or single plus multiuser for Customer build and testbed
build. Before, all contained a few multiuser bits in at least the Choices
file if not more.

Grammatical error ("Fetching frames contents" (sic.)) corrected in
default message, Toolbars.c, and all of the Messages files.

Customer build brought back to a servicable level (including
implementation of the Find dialogue box with animation and fixing
up authorisation and 'Stop' state in the tristate). Quite a few
missing #ifndef REMOTE_HOTLIST bits from hotlist code added...

Customer build will not use <Choices$Write> or Boot:Choices for any
file finding now. UseProxy defaults to 'yes', MaxImages to 2. Res
file includes Proxy Address setting (save_save_choices() now writes
the ProxyAddress line).
@
text
@d66 4
a69 4
_kernel_oserror  * form_new_form               (browser_data * b, HStream * token);
_kernel_oserror  * form_discard                (browser_data * b);
_kernel_oserror  * form_put_field              (browser_data * b, HStream * token, char * value, int update);
_kernel_oserror  * form_new_field              (browser_data * b, HStream * token, form_fieldtype type, char * value);
d71 4
a74 4
form_field_value * form_get_field              (browser_data * b, HStream * token);
char             * form_get_field_text         (browser_data * b, HStream * token);
void               form_get_linesize           (BBox * fontbox, int * lh, int * lb);
void               form_abandon_menu           (void);
d76 1
a76 1
int                form_give_focus             (browser_data * b);
d78 2
a79 1
const char       * form_submission_information (browser_data * b, HStream * token, int * post);
d81 9
a89 9
_kernel_oserror  * form_click_field            (browser_data * b, HStream * token, int mode, int x, int y);
_kernel_oserror  * form_cancel_edit            (browser_data * b);
_kernel_oserror  * form_finish_edit            (browser_data * b);
const char       * form_button_text            (HStream * tp);
int                form_token_cursor_editable  (browser_data * b, HStream * token);
_kernel_oserror  * form_process_key            (browser_data * b, int * key);
void               form_select_menu_event      (WimpPollBlock * e);
void               form_check_caret            (browser_data * b);
void               form_caret_may_need_moving  (browser_data * b);
d91 1
a91 1
void               form_textarea_redraw        (browser_data * b, HStream * token, BBox * box, BBox * gw, int fh, int multiline, int password);
@


1.6
log
@*Don't* try to load FilterManager 0.18 in !Run[D] files. Requires
WindowManager 3.98. Sets URI handler environment variables for
http, ftp and gopher.

Fixed 'doesn't reformat for unsized images' bug - only happens when the
deferred reformatter is enabled, hadn't remembered to check this in my
debug build where this is turned off. Oops.

Caret position in forms could get left behind despite attempts to rectify
this in v1.31 - now fixed (and faster, fortunately).

Hourglass + percentage displayed for History and Image History when
loading - it can take a while for very big histories, though in
practice you only see the visit history loading (has to do a lot
more work, and is thus quite a bit slower than the image history).

POST forms worked when targetted to frames, but were broken when
not targetted! (Forms data inherited from one browser to the same
browser; ended up freeing the flex block...). Fixed.

Now support 303 response code (redirect to GET). Treated as 301, i.e.
not support if STRICT_PARSER is defined, otherwise drops through to
the 302 handling code.

Pointer shouldn't get stuck in odd shapes when going to a new page now;
it gets reset to a standard shape every time the null handler that
checks the position is called, though (whether or not the handler thinks
the pointer is over a different token, if that token is NULL, it sets
the standard shape). A possible work around would be for a browser to
remember the pointer shape too; that's for the future, though.

Early stage table formatting functions could blow themselves apart if
tables_count_table decided there were no rows, columns or both. A
net table size of zero cells is now dealt with; slow, partial table
fetches in multiple windows with image loading turned on will now
*hopefully* be stable, where v1.31 would have bombed out repeatedly.

A nested frameset within one document will now inherit the border
width (frame spacing) and border colour of its parent. This is done
by copying the maxlen and indent fields of the parent token over
the child, and note it's done in the browser (fetch_preprocess_token),
not HTMLLib.

Border colour on a FRAMESET now used, with the first colour on any
FRAME within it overriding, as in NN 4 and MSIE 4.

<LI> bullets really do stick to the text next to them now (I'd done
that in an experimental piece of code and forgotten to merge it back
before the last check-in).

Browse$HotlistURL/URIFile and Browse$HomeURL/URIFile now work from
_TaskName in the Messages file, and are thus of the generic form
<App>$HotlistURL etc. - Docs.Notes and Docs.User updated appropriately.

Event 0x11d00 through to 0x11d7f will make the browser look up Controls
file entries 'JumpTo00' through to 'JumpTo7f' and read a URL from them.
This will be fetched in the ancestor window of the source of the event,
or a new window if such an ancestor can't be found [for Daytona demo].

NB: Nasty frames-related crash at http://www.teledanmark.dk/menu/start.htm
is *not* fixed in this source. NOBR is not supported.
@
text
@d66 4
a69 4
_kernel_oserror  * form_new_form              (browser_data * b, HStream * token);
_kernel_oserror  * form_discard               (browser_data * b);
_kernel_oserror  * form_put_field             (browser_data * b, HStream * token, char * value, int update);
_kernel_oserror  * form_new_field             (browser_data * b, HStream * token, form_fieldtype type, char * value);
d71 4
a74 4
form_field_value * form_get_field             (browser_data * b, HStream * token);
char             * form_get_field_text        (browser_data * b, HStream * token);
void               form_get_linesize          (BBox * fontbox, int * lh, int * lb);
void               form_abandon_menu          (void);
d76 1
a76 1
int                form_give_focus            (browser_data * b);
d78 1
a78 9
_kernel_oserror  * form_click_field           (browser_data * b, HStream * token, int mode, int x, int y);
_kernel_oserror  * form_cancel_edit           (browser_data * b);
_kernel_oserror  * form_finish_edit           (browser_data * b);
const char       * form_button_text           (HStream * tp);
int                form_token_cursor_editable (browser_data * b, HStream * token);
_kernel_oserror  * form_process_key           (browser_data * b, int * key);
void               form_select_menu_event     (WimpPollBlock * e);
void               form_check_caret           (browser_data * b);
void               form_caret_may_need_moving (browser_data * b);
d80 11
a90 1
void               form_textarea_redraw       (browser_data * b, HStream * token, BBox * box, BBox * gw, int fh, int multiline, int password);
@


1.5
log
@Check for WindowManager 3.97 and ensure Unicode$Path is set in all
!Run[D] files, don't set the Alias$@@PrintType_FF4 variable, and updated
Customer build ROM obey file variants. Various other changes to
the Run files for new module versions, updated paths to support
new positions of choices, hotlist and histories (see later), etc.

!Sprites[22] files hold small !app icons for some variants, and
an ic_browse sprite. Some variants now have a Sprites and Sprites22
file instead of just Sprites, with the former containing various
mode 12 or 15 specific sprites.

Text files dragged to the URL writable are treated as ANT URL files. This
relies on URLBarWrit (Toolbars.h) being a unique ID, which it should be,
but beware of the Hotlist and Choices numberspaces...

INPUT TYPE=BUTTON supported. Form items without a FORM tag are now shown
(as MSIE 4, but not NN 4).

'*', '-', '@@', '_' and '.' are not escaped when submitting forms now. The
Web interface to the IMDb now works.

INPUT TYPE=HIDDEN items will not affect the line height anymore - so
http://www.hotmail.com/ now has correctly aligned writable icons, for
example. Similarly, TAG_FORM and TAG_FORM_END items could push up
line height and don't anymore.

HRs with a specified pixel width will now influence the size of a table
cell (they didn't before).

BRs now checked by tagno field when the browser needs to know something
was an actual BR tag rather than just a line break signal, and by the
style bit entry when only the indication of a line break is required.

Table widths of 0 or 0% are ignored.

Trace.c updated to report height and background fields in a table_stream.

fm_putsl() writes a terminator into the string; the Forms.c routines were
calling this for displaying INPUT TYPE=PASSWORD fields using the FE_PassCode
literal string (a line of stars). This write into a read only data area
would make the debugger fault the access. A local char array is now used
instead, to get round this (note the use of var[]=literal rather than
var[sizeof(literal)]; strcpy(var, literal) due to some weird compiler bug
that copies the wrong thing into 'var' under some (undefined...)
circumstances).

Text areas don't scroll back to the top line when clicked in anymore;
single line writables don't scroll back to the left either. When
reentering a text area from 'above', the caret appears at the top line
rather than 'somewhere further down'...

ARROWS_MOVE_OUT compile time option at the top of Forms.c defines whether
you must press Tab/Shift+Tab to move between writable fields in forms or
if up/down will drop out of them, though if keyboard control is on this
is enforced (or you get trapped inside the form!).

urlutils_filetype_from_url now uses MimeMap module.

If fetcher is told a page is text, it'll check for a filename extension and
may choose to use this instead (e.g. it may find it's HTML instead). This
is to try and get around duff servers... (e.g. http://www.batalarms.co.uk/).

Save dialogues shouldn't flicker when options that don't change the
filetype are selected (before, the draggable sprite was always reset for
each selection). Noticed the erroneous setting of a static variable in
SaveFile.c by a call to this by SaveObject.c, and so added a flag to
savefile_set_filetype to deal with this - would have been possible to get
the wrong filetype sent to applications or at best the wrong filetype
sprite in the dialogue without that.

The caret shouldn't jump out of a form back to the URL writable if the page
reformats now.

Table background colours now supported (as in the colour you see in the
border space if the cellspacing is large enough; this is as in MSIE, not
as in Navigator). Drawfile output routines updated accordingly.

Corrected erroneous use of wimpt_dx() / wimpt_dy() in a couple of places
in Images.c, which meant that (say) 1x1 images didn't work correctly in
medium resolution display modes.

Now have support for save as text (component ID and event 0x12) and save
as Draw (component ID and event 0x13) buttons. Dubious conditions for
greying and ungreying the print, save source and view source buttons and
menu options sorted out as part of implementing the same for the two new
buttons; added greying out of their associated menu items in passing.

Turned kerning on in draw file objects (does mean a rather heinous
increase in file size, but this is the only way to ensure the draw file
matches the visible page).

Comments before functions in SaveDraw.c are now complete and up to date.

Image and visit histories now generate a crude hash number to speed up
searching for items. It does give a speed increase, though it's a
disappointingly small one.

Issue of left/right margins and cellpaddings sorted out. Now have
redraw_left/right_margin for finding out the basic gap you must leave.
redraw_left/right_gap then gives any extra indentation for LI, BLOCKQUOTE
or whatever. The last two can be subtracted from the display width to
get an available page width for any section of text. Note that
redraw_left_gap replaces redraw_margin. The redraw_start_x function
uses the above to work out where a line's left hand edge should be,
taking account of left/right/centre alignment. HRs have been fixed now
(they were quite broken in v1.30, I think) based on this new model and
the behaviour of MSIE/NN 4.

Fixed width of cells with no contents - cell padding values wouldn't
have worked properly as the reformatter returns 0 rather than the left
hand margin size if given no stream.

Removed FM_Absolute flags for Font_Paint (spotted by DBrown) - sets bit
2, which is reserved...?

IMG width and height in % terms now works correctly; a % of available
width (after margins and indents) or height on the main page or for
a table cell, if the image lies in one. Because of the chicken-and-egg
problem with the latter, the cell must specify a width and/or height
for things to work properly. If this is not done, you'll usually end
up with a 1:1 scaled image (as in Navigator 4, rather than ending up
with no image or even no cell (!), as in MSIE 4).

HEIGHT attribute on a TABLE tag is supported, but only in a crude
fashion; the extra height (if there is any) is distributed over the
rows in a linear fashion. This is probably all you have to do in
practice, but I haven't checked. To maintain a notion of min/max
height as well as width would of course require a great deal more
work...

If using client pull to reload a page with a fragment ('...#name')
specified, then the reload wouldn't work on the same page; it'd just
jump to the fragment position. This won't happen if b->reloading is
set now (so works in conjunction with client pull on the same page
forcing a non-cached fetch). Similarly, if POSTing to such a URL,
a fetch will proceed (both these fixes done originally for
http://jupiter.beseen.com/chat/rooms/g/1678/).

browser_inherit split to browser_inherit and browser_inherit_post_data;
the code for the latter didn't clear any post_data in the child before
copying from the parent either, and could cause flex errors (now fixed).

Res file for Ursula ('Desktop' Browse) build tweaked - bits in the
font choices dialogue renamed, and button bar rearranged to hold the
new Save As Draw button. Other builds have had Save As Draw and
Save As Text buttons added, or not, depending upon availability of
suitable sprites, required UI simplicity, etc.

Now have:

  Browse$ChoicesFile
  Browse$ControlsFile
  Browse$ChoicesSave
  Browse$ControlsSave

(the last two are new) for loading and saving of the Choices or Controls
files. If unset, <App$Dir>.Choices or <App$Dir>.Controls will be set.
E.g., you could set Browse$ChoicesFile to be:

  <App$Dir>.Choices,Choices:WWW.(app).Choices

for loading and

  <Choices$Write>.WWW.(app).Choices

for saving. (The browser never saves Controls at the moment, so the
relevant variable above isn't effectively implemented, but could be
in future). Similarly, to support asymetric loading/saving of the Hotlist,
there are HotlistSave, HistorySave and ImageHistorySave entries in Choices
to complement HotlistPath, HistoryPath and ImageHistoryPath (which are used
for loading). save_save_choices will create directories as needed to obtain
the given path (and has also been fixed in various areas that hadn't been
tested out until now; e.g. zero termination of the AppName$ChoicesFile
variable expansion...). !Run[D] files updated appropriately.

Table widthing code rewritten. Slower, but a lot better on the whole.
Still has some problems - still needs a final 'make sure nothing is
below minimum width' scan, which it should be possible to do without.
No time to fix this at present!

The reformatter will now 'glue together' an LI token followed by any
non-LI token; so a bullet point followed by an item should not be able to
have a line break inserted after the bullet because of very tight width
constraints (it could before - yuk...).

'about:' brings up a page about the browser and any Plug-Ins, as with
Navigator (for example).

URI files support titles, as per spec. version 8. Saving a current
location to the Hotlist will thus give a sensible title now (unless
you're in a frame, so there's no title to get...). Of course, v1.00
files without a title still work.

Note that NOBR is *not* supported in this build and this combined with
the new table widther may cause problems on some sites (e.g. Microsoft's
home page!).
@
text
@d86 1
a86 1
void               form_caret_may_be_moving   (browser_data * b, HStream * token);
@


1.4
log
@Not all resources are up to date in this check-in, and documentation
both within source and stuff in 'Docs' is out of date or missing - I
was very pushed for time on this one... Hopefully will do another
'tidy up' check-in before close on Friday; until then, beware of
anything other than the Ursula (Desktop browser) build. Anyway...

Export As Draw done. As part of this, FONT SIZE and SUP / SUB adjustment
of font size is done in fm_token_font_info rather than fm_find_token_font.

Bullets and switches are plotted as indirected sprite items, rather than
indirected text + sprite items - this relied on being in a redraw loop to
pick the sprites up from the local pool (failed during printing).

URI files now have a LF line ending rather than CR... '*' recognised
as an empty field when loading via. RAM transfer now (only worked for
loading from disc before).

Gave placeholder bounding boxes 4 OS units more minimum extra gap
vertically and reduced horizontal addition to this value * 1.5, rather
than * 2 (see reformat_get_placeholder_size).

Background image tiling starts at ymax - h + 4, rather than ymax, so
there isn't the bottom line of pixels from the top tile always present
at the top of the window. The '+4' is for caution's sake.

Can now save a frame's HTML source, that of its parent or its ancestor,
and the same for the URI pointing to those documents - see Menus.h for
the relevant component IDs that should lead to the SaveFile dialogue.

Have hopefully fixed timeout = 0 values (i.e. 'forever') on things
like LinkTo; before, image fetches could override the state (so you'd
only ever see brief flickers of a given URL as the pointer went over
a link).

Save File dialogue will remember the state of option or radio buttons
for a given parent component origin and restore that state when the
dialogue is next opened from the same place (stops turning on saving
as a URL file also turning on 'save background images' for Draw file
export, etc.).

Use of a META tag to reload the *same* page now sets the 'reloading'
flag in the browser so that it doesn't go through a proxy - otherwise
pages which are meant to update periodically through client pull
don't work, as they keep coming out of the cache.

Can now handle images specifying just a width or height in the HTML
(other dimension is scaled accordingly, but note that the placeholder
size must still be 'dumb' until the image data comes in). An image
will now override an image history size entry for the same entry
with a different size.
@
text
@d39 2
d86 1
@


1.3
log
@Odd problem with Entries file meant none got checked in last time...
@
text
@d58 4
@


1.2
log
@Made INPUT type=image work
@
text
@d17 1
d19 1
d22 2
a23 1
/* History: 28-Jan-97: Created                     */
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d69 1
a69 1
_kernel_oserror  * form_click_field           (browser_data * b, HStream * token, int mode);
d72 1
a72 1
char             * form_button_text           (HStream * tp);
@
