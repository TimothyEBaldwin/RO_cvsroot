head	1.1;
access;
symbols
	Browse-2_16:1.1
	Browse-2_15:1.1
	Browse-2_14:1.1
	Browse-2_13:1.1
	Browse-2_12:1.1;
locks; strict;
comment	@# @;


1.1
date	2006.03.13.22.06.17;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.1
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@-------------------------------------------------------------------------------
History
=======

02-Mar-2006 (ADH): Created, replacing old, outdated ReadMe.
-------------------------------------------------------------------------------

Contents
========

  Contents
  How to build the browser
  Notes on supported variants
  More information on each variant
  Cleaning
  Further reading


How to build the browser
========================

In the past, a large number of TaskObey files sat in the root directory of
the browser and built all sorts of variants. This became impractical so these
files have been replaced. They're still available in Resources.Scripts, but
are possibly in a poor state of repair; changes to the Makefile made since the
scripts were tested may not have been reflected in updates to those scripts.

The replacement is the FrontEnd-based !MkBrowse application. It offers a set
of basic choices of the main variant of browser (e.g. Phoenix, Customer build)
along with some build options (JavaScript, Unicode, debug). Some variants
dictates certain build options. When these variants are selected, options that
cannot be user-modified are set up to reflect the values required by the
variant but greyed out so they cannot be changed.

!MkBrowse drives the Makefile using these principle elements:

  SYSTEM     The name of the build to create
  INSTDIR    By default "Targets.<SYSTEM>.!<SYSTEM>", but can be overridden
  SUFFIX     A sequence of letters indicating the variant
  DEBUGFLAG  A letter indicating debugging is switched on
  install    Rule used to build the variant into INSTDIR

SYSTEM and INSTDIR values can be set to whatever you like. The Makefile will
assume application resources for installation are present in directory
"Resources.UK.<SYSTEM>". SUFFIX values are limited as follows:

  Empty      A non-Unicode, non-Javascript ("simple") build
  j          JavaScript only
  u          Unicode only
  ju         JavaScript and Unicode - must be in the order "ju", not "uj"

The DEBUGFLAG is either empty, or the letter 'd'. It is used just in front of
SUFFIX inside the Makefile to create names of executable images and object
directories. For example, objects are placed in directories called "o", "oj",
"ou" or "oju" for non-debug versions of the four types listed above; or "od",
"odj", "odu" and "odju" for debug versions. Executable files are placed in
directory "abs" under the name "!RI" followed by letters as just described for
the object directories (e.g. "!RId", "!RIju" etc.) before being copied into the
installation directory derived from SYSTEM or explicitly given in INSTDIR.

Throwback during compilation will be disabled unless "THROWBACK=-throwback" is
given on the AMU command line.

As usual the build process writes dependency information back to the Makefile
so it is imperative that you do not attempt to build more than one thing at
any given time.


Notes on supported variants
===========================

Browse, Phoenix, Ursula and Customer variants may be built in any of the four
combinations of simple, JavaScript, Unicode or JavaScript plus Unicode. There
can be debug versions too. Object files for each of these 8 "flavours" sit in
independent directories so complete browser rebuilds can be avoided whilst
switching between them. All of these variants share the resulting eight object
directories, since they differ only by the resources that they use.

Customer and Customer versions are different. Customer builds are JavaScript
plus Unicode capable, but have no local hotlist support, using server based
hotlists only. Object directories to allow a debug and non-debug version will
be used; if you want to change other compilation options you will need to do a
complete rebuild. Customer builds are non-Unicode JavaScript versions with
multiuser support - they will expect the PostIn/PostOut user management system
of Customer to be available. Again, only standard and debug versions can
coexist.


More information on each variant
================================

See the !Help for !MkBrowse for a bit more information on each variant's
characteristics.


Cleaning
========

!MkClean deletes all object files but leaves any built targets intact.
!MkClnAll deletes all object files and targets, resetting the build to
a completely clean state.


Further reading
===============

Additional documentation can be found in the "Docs" directory.

-- 
Andrew Hodgkinson, for Endurance Technology / Tematic
@
