head	1.10;
access;
symbols
	Browse-2_16:1.10
	Browse-2_15:1.10
	Browse-2_14:1.10
	Browse-2_13:1.10
	Browse-2_12:1.10
	Browse-2_11:1.10
	Browse-2_10:1.10
	Browse-2_09:1.10
	ahodgkin_208_i4_2:1.9
	ahodgkin_208_i4:1.8
	ahodgkin_208_i3:1.8
	ahodgkin_208_i2:1.8
	ahodgkin_208_i1:1.8
	ahodgkin_207release:1.8
	ahodgkin_206release:1.8
	ahodgkin_205release:1.8
	ahodgkin_204release:1.8
	ahodgkin_202release:1.8
	ahodgkin_201release:1.8
	ahodgkin_200release:1.8
	ahodgkin_133beta:1.8
	ahodgkin_132beta:1.8
	ahodgkin_131beta:1.8
	ahodgkin_130beta:1.8
	ahodgkin_129:1.8
	ahodgkin_128beta:1.8
	ahodgkin_128alpha:1.8
	ahodgkin_127beta2:1.7
	ahodgkin_127beta:1.7
	ahodgkin_126beta:1.7
	ahodgkin_AW97patch:1.7
	ahodgkin_AW97:1.7;
locks; strict;
comment	@# @;


1.10
date	2005.04.26.09.42.34;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	2000.05.31.15.58.30;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.11.28.15.35.46;	author kbracey;	state Exp;
branches;
next	1.7;

1.7
date	97.10.03.09.19.00;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.10.03.09.06.55;	author dbrown;	state Exp;
branches;
next	1.5;

1.5
date	97.10.01.17.17.55;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.09.29.11.24.11;	author dbrown;	state Exp;
branches;
next	1.3;

1.3
date	97.09.26.12.35.54;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.09.22.07.43.09;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.09.18.12.37.08;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.10
log
@  Huge pile of changes bringing relatively ancient sources up to date.
Detail:
  This check-in includes Phoenix version 2.11 (26-Apr-2005); only the
  debug and JavaScript builds of Phoenix have been tested and resources
  will definitely be out of date for other versions. The various "!..."
  scripts have been updated to require a minimum of 2MB with no maximum
  limit for building, as CC 5.60 is quite RAM hungry.
Admin:
  Phoenix 2.11 JS builds OK, works reasonably well. Many outstanding
  issues of course, as this is a very outdated browser now.

Version 2.09. Tagged as 'Browse-2_09'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Encoding.c                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Routines to handle the encoding menu.             */
/*                                                            */
/* Author:  K.J.Bracey.                                       */
/*                                                            */
/* History: 05-Sep-1997 (KJB): Created.                       */
/*          25-May-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

#include <kernel.h>
#include <swis.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/toolbox.h>
#include <tboxlibs/menu.h>
#include <tboxlibs/event.h>

#include <Unicode/iso10646.h>

#include "Global.h"
#include "Utils.h"

#include "Choices.h"
#include "Encoding.h"

/* Statics */

static ObjectId menu_id         = NULL_ObjectId;
static int      ticked_encoding = (int) 0xffffffff;
static int      entries_faded;

static int encoding_get_encoding_item_r(ObjectId o, int encoding, ObjectId *encobjid, ComponentId *enccompid);

/**************************************************************/
/* encoding_fade_unusable_entries()                           */
/*                                                            */
/* Scan the Encoding menu, fading out encodings that aren't   */
/* supported.                                                 */
/*                                                            */
/* Parameters: The object ID of the Encoding menu.            */
/**************************************************************/

static int encoding_fade_unusable_entries(ObjectId o)
{
  /* How do we do this without an enumerate call? */

  return 0;
}

/**************************************************************/
/* encoding_tick_entry()                                      */
/*                                                            */
/* Select or deselect the entry corresponding to a specified  */
/* encoding. Parent menu items are also selected/deselected.  */
/*                                                            */
/* Parameters: The object ID of the Encoding menu;            */
/*                                                            */
/*             The number of the encoding;                    */
/*                                                            */
/*             0 to untick, 1 to tick.                        */
/*                                                            */
/* Returns:    1 if entry found, 0 if not.                    */
/*                                                            */
/* Assumes:    Parent menu items have consecutive component   */
/*             IDs starting at 0x11000 in each menu;          */
/*                                                            */
/*             The component ID of an encoding item is the    */
/*             number of the encoding it represents;          */
/*                                                            */
/*             A given encoding is only represented once in   */
/*             the menu tree.                                 */
/**************************************************************/

static int encoding_tick_entry(ObjectId o, int enc, int state)
{
  ComponentId c;
  _kernel_oserror *e;

  e = menu_set_tick(0, o, enc, state);

  if (!e) return 1;

  /* The encoding isn't in this menu, so scan the submenus. */

  for (c = 0x11000; ; c++)
  {
    ObjectId sub;

    e = menu_get_sub_menu_show(0, o, c, &sub);

    /* If an error - component not found - end of submenus */

    if (e) return 0;

    if (sub == NULL_ObjectId) continue;

    if (encoding_tick_entry(sub, enc, state))
    {
      ChkError(menu_set_tick(0, o, c, state));
      return 1;
    }
  }
}

/**************************************************************/
/* encoding_prepare_menu()                                    */
/*                                                            */
/* Ensure that the state of the Encoding menu is correct for  */
/* a supplied encoding_priority and encoding type.            */
/*                                                            */
/* Parameters: Object ID of the Encoding menu;                */
/*                                                            */
/*             The encoding priority                          */
/*                                                            */
/*             The encoding number                            */
/*                                                            */
/* Assumes:    The "From document" item is component 0x11FFF  */
/*             in the top- level menu;                        */
/*                                                            */
/*             The Encoding menu is a shared object.          */
/**************************************************************/

void encoding_prepare_menu(ObjectId o, encoding_priority encoding_priority, int encoding)
{
  menu_set_tick(0, o, 0x11FFF, encoding_priority != priority_user);

  if (ticked_encoding != encoding)
  {
    if (ticked_encoding) encoding_tick_entry(o, ticked_encoding, 0);

    encoding_tick_entry(o, encoding, 1);
    ticked_encoding = encoding;
  }
}

/**************************************************************/
/* encoding_select()                                          */
/*                                                            */
/* Event handler for the selection of an encoding             */
/* (EEncoding_Select).                                        */
/*                                                            */
/* Parameters are as for a standard Toolbox event handler.    */
/*                                                            */
/* Assumes: The top-level Encoding menu is an ancestor        */
/* object;                                                    */
/*                                                            */
/*          The component ID is the number of the encoding to */
/* select.                                                    */
/**************************************************************/

int encoding_select(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data * b;
  _kernel_oserror *e;

  ChkError(toolbox_get_client_handle(0, idb->ancestor_id, (void *) &b));

  if (!is_known_browser(b))
  {
    ObjectId ancestor;

    e = toolbox_get_ancestor(0, menu_id, &ancestor, NULL);

    if (!e && ancestor == choices_windowid && new_choices)
    {
      new_choices->encoding = idb->self_component;
      choices_set_encoding_field();
      encoding_prepare_menu(menu_id, priority_default, new_choices->encoding);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    b->encoding          = idb->self_component;
    b->encoding_priority = priority_user;

    encoding_prepare_menu(menu_id, b->encoding_priority, b->encoding);
  }

  return 1;
}

/**************************************************************/
/* encoding_from_document_select()                            */
/*                                                            */
/* Handle the selection of the "From document" menu entry.    */
/*                                                            */
/* Parameters are as for a standard Toolbox event handler.    */
/**************************************************************/

int encoding_from_document_select(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data * b;

  ChkError(toolbox_get_client_handle(0, idb->ancestor_id, (void *) &b));

  if (!is_known_browser(b)) return 0;

  if (b->encoding_priority == priority_user)
  {
    b->encoding_priority = priority_default;
  }
  else
  {
    b->encoding_priority = priority_user;
  }

  encoding_prepare_menu(menu_id, b->encoding_priority, b->encoding);

  return 1;
}

/**************************************************************/
/* encoding_show_menu()                                       */
/*                                                            */
/* Set up the Encoding menu before it is shown.               */
/*                                                            */
/* Parameters are as for a standard Toolbox event handler.    */
/*                                                            */
/* Assumes:    The "From document" item is component 0x11FFF  */
/*             in the top- level menu;                        */
/**************************************************************/

int encoding_show_menu(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data * b;

  ChkError(toolbox_get_client_handle(0, idb->ancestor_id, (void *) &b));

  if (!is_known_browser(b))
  {
    if (idb->ancestor_id == choices_windowid && new_choices)
    {
      /* Fade "From document" item as it is not relevant to choices */

      menu_set_fade(0, idb->self_id, 0x11FFF, 1);
      encoding_prepare_menu(menu_id, priority_default, new_choices->encoding);

      toolbox_set_client_handle(0, idb->self_id, NULL);

      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    /* Unfade "From document" item as it is relevant to browser windows */

    menu_set_fade(0, idb->self_id, 0x11FFF, 0);

    if (!entries_faded)
    {
      encoding_fade_unusable_entries(idb->self_id);
      entries_faded = 1;
    }

    toolbox_set_client_handle(0, idb->self_id, b);

    encoding_prepare_menu(menu_id, b->encoding_priority, b->encoding);
  }

  return 1;
}

/**************************************************************/
/* encoding_changed_by_meta()                                 */
/*                                                            */
/* Called by HTMLLib when a META tag that changes encoding is */
/* found. Update the browser_data struct and the menu         */
/* accordingly.                                               */
/*                                                            */
/* This routine is registered with HTMLLib in                 */
/* html_get_next_token() when the parse starts.               */
/*                                                            */
/* Parameters: The number of the new encoding;                */
/*                                                            */
/*             Pointer to the relevant browser_data struct.   */
/**************************************************************/

void encoding_changed_by_meta(int encoding, void * handle)
{
  browser_data * b = (browser_data *) handle;

  b->encoding          = encoding;
  b->encoding_priority = priority_meta;

  encoding_update_menus(b);
}

/**************************************************************/
/* encoding_update_menus()                                    */
/*                                                            */
/* Update the Encoding menu if it is currently open for the   */
/* specified browser.                                         */
/*                                                            */
/* Parameters: Pointer to the browser_data whose encoding has */
/*             changed.                                       */
/**************************************************************/

void encoding_update_menus(browser_data * b)
{
  if (menu_id != NULL_ObjectId)
  {
    browser_data * b2;

    if (toolbox_get_client_handle(0, menu_id, (void *) &b2)) return;

    if (b2 == b) encoding_prepare_menu(menu_id, b->encoding_priority, b->encoding);
  }
}

/**************************************************************/
/* encoding_get_encoding_item()                               */
/*                                                            */
/* Finds the menu item containing the name of the specified   */
/* encoding.                                                  */
/*                                                            */
/* Parameters: the required encoding                          */
/*                                                            */
/*             Pointer to the objectid to return information  */
/*             in                                             */
/*                                                            */
/*             Pointer to the componentid to return the       */
/*             information in.                                */
/*                                                            */
/* Returns:    1 if the encoding was found 0 if it was not    */
/*                                                            */
/* Assumes:    Parent menu items have consecutive component   */
/*             IDs starting at 0x11000 in each menu;          */
/*                                                            */
/*             The component ID of an encoding item is the    */
/*             number of the encoding it represents;          */
/**************************************************************/

int encoding_get_encoding_item(int encoding, ObjectId * encobjid, ComponentId * enccompid)
{
  return encoding_get_encoding_item_r(menu_id, encoding, encobjid, enccompid);
}

/**************************************************************/
/* encoding_get_encoding_item_r()                             */
/*                                                            */
/* Recursive backend to encoding_get_encoding_item            */
/**************************************************************/

static int encoding_get_encoding_item_r(ObjectId o, int encoding, ObjectId * encobjid, ComponentId * enccompid)
{
  _kernel_oserror *e;
  ComponentId c;
  int state;

  /* We don't really want to know if this item is ticked, we just want to see if the item exists */

  e = menu_get_tick(0, o, encoding, &state);

  if (!e)
  {
    *encobjid  = o;
    *enccompid = encoding;
    return 1;
  }

  for (c = 0x11000; ; c++)
  {
    ObjectId sub;

    e = menu_get_sub_menu_show(0, o, c, &sub);

    /* If an error - component not found - end of submenus */

    if (e) return 0;

    if (sub == NULL_ObjectId) continue;

    if (encoding_get_encoding_item_r(sub, encoding, encobjid, enccompid)) return 1;
  }
}

/**************************************************************/
/* encoding_init()                                            */
/*                                                            */
/* Initialises the encoding system - basically, creates the   */
/* menu now (rather than letting it autocreate later - it's a */
/* shared object) so that the Object ID is known.             */
/**************************************************************/

_kernel_oserror *encoding_init(void)
{
  /* Encoding menu may not be there, so this should be able to */
  /* fail silently.                                            */

  toolbox_create_object(0, "Encoding", &menu_id);

  return NULL;
}

/**************************************************************/
/* encoding_get_menuid()                                      */
/*                                                            */
/* Returns the ObjectId of the main encoding menu.            */
/**************************************************************/

ObjectId encoding_get_menuid(void)
{
  return menu_id;
}
@


1.9
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d53 1
a53 1
static int      ticked_encoding = 0xffffffff;
@


1.8
log
@Modified to use external Unicode resource directory and UnicodeLib.
@
text
@d15 12
a26 9
/***************************************************/
/* File   : Encoding.c                             */
/*                                                 */
/* Purpose: Routines to handle the encoding menus. */
/*                                                 */
/* Author : K.J.Bracey                             */
/*                                                 */
/* History: 05-Sep-97: Created.                    */
/***************************************************/
d34 2
a35 1
#include "swis.h"
d37 4
a40 4
#include "wimp.h"
#include "toolbox.h"
#include "menu.h"
#include "event.h"
d42 1
a42 1
#include "Unicode/iso10646.h"
d58 8
a65 9
/*************************************************/
/* encoding_fade_unusable_entries()              */
/*                                               */
/* Scan the Encoding menu, fading out encodings  */
/* that aren't supported.                        */
/*                                               */
/* Parameters: The object ID of the Encoding     */
/*             menu.                             */
/*************************************************/
d74 23
a96 28
/*************************************************/
/* encoding_tick_entry()                         */
/*                                               */
/* Select or deselect the entry corresponding    */
/* to a specified encoding. Parent menu items    */
/* are also selected/deselected.                 */
/*                                               */
/* Parameters: The object ID of the Encoding     */
/*             menu;                             */
/*                                               */
/*             The number of the encoding;       */
/*                                               */
/*             0 to untick, 1 to tick.           */
/*                                               */
/* Returns:    1 if entry found, 0 if not.       */
/*                                               */
/* Assumes:    Parent menu items have            */
/*             consecutive component IDs         */
/*             starting at 0x11000 in each menu; */
/*                                               */
/*             The component ID of an encoding   */
/*             item is the number of the         */
/*             encoding it represents;           */
/*                                               */
/*             A given encoding is only          */
/*             represented once in the menu      */
/*             tree.                             */
/*************************************************/
d129 17
a145 20
/*************************************************/
/* encoding_prepare_menu()                       */
/*                                               */
/* Ensure that the state of the Encoding menu    */
/* is correct for a supplied encoding_priority   */
/* and encoding type.                            */
/*                                               */
/* Parameters: Object ID of the Encoding menu;   */
/*                                               */
/*             The encoding priority             */
/*                                               */
/*             The encoding number               */
/*                                               */
/* Assumes:    The "From document" item is       */
/*             component 0x11FFF in the top-     */
/*             level menu;                       */
/*                                               */
/*             The Encoding menu is a shared     */
/*             object.                           */
/*************************************************/
d160 14
a173 15
/*************************************************/
/* encoding_select()                             */
/*                                               */
/* Event handler for the selection of an         */
/* encoding (EEncoding_Select).                  */
/*                                               */
/* Parameters are as for a standard Toolbox      */
/* event handler.                                */
/*                                               */
/* Assumes: The top-level Encoding menu is an    */
/*          ancestor object;                     */
/*                                               */
/*          The component ID is the number of    */
/*          the encoding to select.              */
/*************************************************/
d211 7
a217 9
/*************************************************/
/* encoding_from_document_select()               */
/*                                               */
/* Handle the selection of the "From document"   */
/* menu entry.                                   */
/*                                               */
/* Parameters are as for a standard Toolbox      */
/* event handler.                                */
/*************************************************/
d241 10
a250 12
/*************************************************/
/* encoding_show_menu()                          */
/*                                               */
/* Set up the Encoding menu before it is shown.  */
/*                                               */
/* Parameters are as for a standard Toolbox      */
/* event handler.                                */
/*                                               */
/* Assumes:    The "From document" item is       */
/*             component 0x11FFF in the top-     */
/*             level menu;                       */
/*************************************************/
d296 14
a309 15
/*************************************************/
/* encoding_changed_by_meta()                    */
/*                                               */
/* Called by HTMLLib when a META tag that        */
/* changes encoding is found. Update the         */
/* browser_data struct and the menu accordingly. */
/*                                               */
/* This routine is registered with HTMLLib in    */
/* html_get_next_token() when the parse starts.  */
/*                                               */
/* Parameters: The number of the new encoding;   */
/*                                               */
/*             Pointer to the relevant           */
/*             browser_data struct.              */
/*************************************************/
d321 9
a329 9
/*************************************************/
/* encoding_update_menus()                       */
/*                                               */
/* Update the Encoding menu if it is currently   */
/* open for the specified browser.               */
/*                                               */
/* Parameters: Pointer to the browser_data       */
/*             whose encoding has changed.       */
/*************************************************/
d343 22
a364 25
/*************************************************/
/* encoding_get_encoding_item()                  */
/*                                               */
/* Finds the menu item containing the name       */
/* of the specified encoding.                    */
/*                                               */
/* Parameters: the required encoding             */
/*                                               */
/*             Pointer to the objectid to return */
/*             information in                    */
/*                                               */
/*             Pointer to the componentid to     */
/*             return the information in.        */
/*                                               */
/* Returns:    1 if the encoding was found       */
/*             0 if it was not                   */
/*                                               */
/* Assumes:    Parent menu items have            */
/*             consecutive component IDs         */
/*             starting at 0x11000 in each menu; */
/*                                               */
/*             The component ID of an encoding   */
/*             item is the number of the         */
/*             encoding it represents;           */
/*************************************************/
d371 5
a375 6
/*************************************************/
/* encoding_get_encoding_item_r()                */
/*                                               */
/* Recursive backend to                          */
/* encoding_get_encoding_item                    */
/*************************************************/
d410 7
a416 8
/*************************************************/
/* encoding_init()                               */
/*                                               */
/* Initialises the encoding system - basically,  */
/* creates the menu now (rather than letting it  */
/* autocreate later - it's a shared object) so   */
/* that the Object ID is known.                  */
/*************************************************/
d428 5
a432 6
/*************************************************/
/* encoding_get_menuid(void)                     */
/*                                               */
/* Returns the ObjectId of the main encoding     */
/* menu.                                         */
/*************************************************/
@


1.7
log
@Version in Messages taken to 1.22 (03 Oct).

Updated Res files in appropriate builds to hold various (similar) Choices
designs.

Choices related menus were flagged as Shared, but none of the dialogues
(including ColourDBox) were - potential future problems, though shouldn't
cause any leaks at present. This has been sorted out anyway.

Encoding function encoding_init no longer returns an error from
toolbox_create_object, so the Encoding menu and all those attached
to it do not have to be present (e.g. the Customer build).

SUB, SUP, STRIKE and U supported. U underlines the baseline of the body text
font, whilst STRIKE will go through roughly the middle of the lower case
chars even if the font is SUP or SUB. Note that Navigator appears to shift
the underline point for SUB and SUP; it may be necessary to copy this
behaviour, but testing on real sites must proceed before that. There could
also be a problem with the automatic lowering of font size, which Navigator
doesn't do, so any FONT SIZE = -n commands could make it too small. Again,
this needs testing on real sites.

'http://' is added to URLs with no protocol specified, unless they start with
'ftp.', in which case the new behaviour is to add 'ftp://'.

Choices code altered to do less error checking on components! They should be
able to be missing without raising errors. Referencing of the subwindow
array changed from *(subwindows + number) to subwindows[number].

Made trace_tag_name code look pretty...

reformat_useless_token now checks tagno is non-zero.

User Agent string setting now done through URL_GetURL, on a per-session
basis.

Ellipsis character removed from all Messages files, replaced with '...'.
There's little difference between the two in an outline font, and in System
font the latter looks much better. Smart quotes left in, as they look
better in all cases.
@
text
@d38 1
a38 1
#include "iso10646.h"
@


1.6
log
@Fixed problems with selecting encodings in the parent encoding menu.
@
text
@d230 1
d428 4
a431 1
/* Creates the encoding menu.                    */
d436 6
a441 1
  return toolbox_create_object(0, "Encoding", &menu_id);
@


1.5
log
@Changed some error handling in Choices, a little bit of reformatting,
removed unnecessary tempstring in Main, and played about with the
choices Res file objects.
@
text
@d192 1
a192 1
    e = toolbox_get_ancestor(0, idb->ancestor_id, &ancestor, NULL);
d198 1
a198 1
      encoding_prepare_menu(idb->ancestor_id, priority_default, new_choices->encoding);
d211 1
a211 1
    encoding_prepare_menu(idb->ancestor_id, b->encoding_priority, b->encoding);
d243 1
a243 1
  encoding_prepare_menu(idb->self_id, b->encoding_priority, b->encoding);
d272 1
a272 1
      encoding_prepare_menu(idb->self_id, priority_default, new_choices->encoding);
d274 4
d299 1
a299 1
    encoding_prepare_menu(idb->self_id, b->encoding_priority, b->encoding);
@


1.4
log
@Implemented dialogue based choices.
@
text
@d48 1
a48 1
static ObjectId menu_id = NULL_ObjectId;
d52 1
a52 1
int encoding_get_encoding_item_r(ObjectId o, int encoding, ObjectId *encobjid, ComponentId *enccompid);
d188 1
a188 1
  if (!is_known_browser(b)) 
d191 1
a191 1
    
d193 1
a193 1
    
d210 1
a210 1
    
d284 1
a284 1
    
d286 1
a286 1
    
d375 1
a375 1
int encoding_get_encoding_item(int encoding, ObjectId *encobjid, ComponentId *enccompid)
d387 1
a387 1
int encoding_get_encoding_item_r(ObjectId o, int encoding, ObjectId *encobjid, ComponentId *enccompid)
d392 1
a392 1
  
d394 1
a394 1
  
d403 1
a403 1
  
@


1.3
log
@Added support for HTMLLib HttpEndParse call.

Text items with no VALUE specified in the HTML were not cleared on
hitting a Reset button as the text field of the token is NULL; fixed.
SELECT lists with no default selection item were not being changed
on hitting a Reset button; fixed. In radio groups with no default
selection specified, no item will be selected. This goes against
the HTML 2 spec but allows broken Navigator-esque forms behaviour.
In consequence, radios can be deselected by clicking on the same
one twice. I'd fixed the flickering experienced when doing this
recently, but that, now, is irrelevant, since the state of a radio
must always change.

Reformatter's new 'find width of a SELECT field' didn't account for
the width of <none> and <many> items, and now does (particularly
important for broken items with no OPTION contents).

Under certain circumstances, illegally named targets would open in the
ancestor rather than a new window - a deliberate decision in the code,
but now reversed due to a test suite failure; they'll open in a new
window instead.

Altered the left hand indent handling for lists so that headings and
body text follow the Navigator 48 pixel indent and the bullet point
items drop to the left of the left hand margin, rather than sitting
on the margin with the text indented to the right.

Tightened up the hotlist_load_directory checking of URLs, so that
only those with '://' in - i.e. look fully specified - are accepted.
HTML files are loaded into a new directory now.

Items without a descriptive title in hotlist_new_url will have the URL
substituted in instead. White space before and after descriptions and
after URLs is stripped. Directories with zero length names or null
strings (after white space is stripped) will still be created, with a
generic name (see Messages, token 'HotlistUntitled').
@
text
@d43 1
d49 2
d52 1
a52 3
static int      ticked_encoding;
static int      delete_handler_registered;
static int      entries_faded;
d135 2
a136 1
/* is correct for a given browser.               */
d140 3
a142 2
/*             Pointer to a browser_data struct  */
/*             owning the menu.                  */
d152 1
a152 1
static void encoding_prepare_menu(ObjectId o, browser_data * b)
d154 1
a154 1
  menu_set_tick(0, o, 0x11FFF, b->encoding_priority != priority_user);
d156 1
a156 1
  if (ticked_encoding != b->encoding)
d160 2
a161 2
    encoding_tick_entry(o, b->encoding, 1);
    ticked_encoding = b->encoding;
a162 1

d184 1
d188 25
a212 6
  if (!is_known_browser(b)) return 0;

  b->encoding          = idb->self_component;
  b->encoding_priority = priority_user;

  encoding_prepare_menu(idb->ancestor_id, b);
d243 1
a243 26
  encoding_prepare_menu(idb->self_id, b);

  return 1;
}

/*************************************************/
/* encoding_menu_deleted()                       */
/*                                               */
/* Note the deletion of the Encoding menu        */
/* (ticked entry no longer ticked, etc.)         */
/*                                               */
/* Parameters are as for a standard Toolbox      */
/* event handler.                                */
/*************************************************/

static int encoding_menu_deleted(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  menu_id                   = NULL_ObjectId;
  ticked_encoding           = 0;
  delete_handler_registered = 0;
  entries_faded             = 0;

  ChkError(event_deregister_toolbox_handler(idb->self_id,
                                            Toolbox_ObjectDeleted,
                                            encoding_menu_deleted,
                                            NULL));
d255 4
d267 1
a267 3
  if (!is_known_browser(b)) return 0;

  if (!delete_handler_registered)
d269 11
a279 6
    delete_handler_registered = 1;

    ChkError(event_register_toolbox_handler(idb->self_id,
                                            Toolbox_ObjectDeleted,
                                            encoding_menu_deleted,
                                            NULL));
d281 1
a281 2

  if (!entries_faded)
d283 9
a291 3
    encoding_fade_unusable_entries(idb->self_id);
    entries_faded = 1;
  }
d293 1
a293 1
  menu_id = idb->self_id;
d295 2
a296 3
  toolbox_set_client_handle(0, idb->self_id, b);

  encoding_prepare_menu(idb->self_id, b);
d345 72
a416 1
    if (b2 == b) encoding_prepare_menu(menu_id, b);
d418 23
@


1.2
log
@Now working on source merged with Kevin Bracey's internationalisation
support. UNIFONT is undefined in the Make File for now. All Res and
Choices files updated appropriately.

Having sorted out the old Choices and Messages to form Choices, Controls
and Messages, this build has had the same cleaning up done internally.
This includes greater consistency in naming schemes and the removal of
the inconsitent choices items - e.g. Choices file entries saying 'delay
images' and 'plain backgrounds' where internally all the flags say 'show
images' and 'show backgrounds'. ChoiceDefs.h and CtrlDefs.h added to
clarify the meaning of some fields, though usage of these is not 100%
in the source (there are cases where parameters are passed through to
functions as ints, and those functions still check these against hard
coded values rather than the #define stuff).

Fetcher status return bits (connected, sent request, etc.) now reflected
in status bar. Progress during fetchs to files are reported by %, where
the size of the object is known. Exceeding 100% drops back to a byte
counter, in case the estimated size was wrong. The progress counter
may be updated after specific delays, rather than 'as often as possible',
to reduce flicker (as requested by D.Brown some time ago).

I've done a small rewrite of the fetch prioritisation scheme in FetchPage.c;
how well this performs in general use across different processor speeds
remains to be tested, but certainly it has some advantages. For each small
fetch window before the rewrite, a 4cs tight loop was entered - this gave a
noticable and substantial drain to the Desktop performance if more than one
was opened. Now, several can be up at once with little hit. The actual file
fetch is on half the priority it was before, with all others taken back
just a bit - e.g. from 20cs per poll to 15cs per poll for flat out
reformatting. You don't seem to lose much time on the format in practice,
and the Desktop feels quite a bit lighter at the same time. There's the
potential for smoother frameset loading in this scheme, too.

When Shift+Clicking on a link meant you still fetched inside the main
browser window, several fetches could occur in a frameset - one per frame.
However, now that you can only do this by clicking on a link that leads to
non-displayable data - or by turning off the small fetch windows by
setting UseSmall to 'no' in Choices - a bug where fetchpage_preprocessed
would stop such fetches as new ones were started was revealed.
The API to frames_abort_fetching has now been extended to include a
'stop file spooling too' flag, allowing a fix to be made by having
fetchpage_preprocess's calls not set this (and it doesn't check the
savelink flag is unset before proceeding, since frames_abort_fetching
does that implicitly now).

Had left the RAM transfer buffer at 16 bytes (from testing) accidentally...
Oops. Upped it to 4K. In addition, when loading data by RAM transfer,
the browser didn't notice if a RAMFetch bounced during the transfer. It
would be treated as a 'first' RAMFetch bounce, basically, and try to go to
file transfer - oops. Fixed.
@
text
@d149 1
a149 1
static void encoding_prepare_menu(ObjectId o, browser_data *b)
@


1.1
log
@Encoding support added: if UNIFONT is defined then the browser will
attempt to use the system font to render Unicode characters (new
International module required). If not defined, the browser will just
handle Acorn Latin-1 characters, but HTMLLib will convert other encodings
into Latin-1. Must keep the UNIFONT define in sync with HTMLLib (if
defined HTMLLib outputs UTF-8, otherwise Acorn Latin-1).

Still needed:

Reverse encoding (converting form input etc back into the server's
character set).
Reparse when encoding changes.
Setting of charset from an attribute on the <A> tag.
@
text
@d45 2
d48 4
a51 3
static int ticked_encoding;
static int delete_handler_registered;
static int entries_faded;
d65 3
a67 2
    /* How do we do this without an enumerate call? */
    return 0;
d105 2
a106 2
  if (!e)
    return 1;
d109 1
a116 2
    if (e)
      return 0;
d118 3
a120 2
    if (sub == NULL_ObjectId)
      continue;
d155 1
a155 2
    if (ticked_encoding)
      encoding_tick_entry(o, ticked_encoding, 0);
d179 1
a179 1
int encoding_select(int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle)
d187 1
a187 1
  b->encoding = idb->self_component;
d205 1
a205 1
int encoding_from_document_select(int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle)
d213 1
d215 1
d217 1
d219 1
d231 3
d236 1
a236 1
static int encoding_menu_deleted(int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle)
d238 2
a239 2
  menu_id = NULL_ObjectId;
  ticked_encoding = 0;
d241 1
a241 1
  entries_faded = 0;
d260 1
a260 1
int encoding_show_menu(int eventcode,ToolboxEvent * event,IdBlock * idb,void * handle)
d271 1
d329 1
a329 1
void encoding_update_menus(browser_data *b)
d335 1
a335 2
    if (toolbox_get_client_handle(0, menu_id, (void *) &b2))
      return;
d337 1
a337 2
    if (b2 == b)
      encoding_prepare_menu(menu_id, b);
@
