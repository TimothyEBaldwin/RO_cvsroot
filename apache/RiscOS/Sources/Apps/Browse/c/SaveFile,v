head	1.22;
access;
symbols
	Browse-2_16:1.22
	Browse-2_15:1.22
	Browse-2_14:1.22
	Browse-2_13:1.22
	Browse-2_12:1.22
	Browse-2_11:1.21
	Browse-2_10:1.21
	Browse-2_09:1.21
	ahodgkin_208_i4_2:1.20
	ahodgkin_208_i4:1.18
	ahodgkin_208_i3:1.18
	ahodgkin_208_i2:1.18
	ahodgkin_208_i1:1.18
	ahodgkin_207release:1.17
	ahodgkin_206release:1.16
	ahodgkin_205release:1.15
	ahodgkin_204release:1.15
	ahodgkin_202release:1.15
	ahodgkin_201release:1.14
	ahodgkin_200release:1.13
	ahodgkin_133beta:1.13
	ahodgkin_132beta:1.13
	ahodgkin_131beta:1.13
	ahodgkin_130beta:1.12
	ahodgkin_129:1.11
	ahodgkin_128beta:1.10
	ahodgkin_128alpha:1.9
	ahodgkin_127beta2:1.8
	ahodgkin_127beta:1.8
	ahodgkin_126beta:1.7
	ahodgkin_AW97patch:1.6
	ahodgkin_AW97:1.6;
locks; strict;
comment	@# @;


1.22
date	2006.03.13.22.06.19;	author ahodgkin;	state Exp;
branches;
next	1.21;

1.21
date	2005.04.26.09.42.34;	author ahodgkin;	state Exp;
branches;
next	1.20;

1.20
date	2000.11.14.08.45.08;	author ahodgkin;	state Exp;
branches;
next	1.19;

1.19
date	2000.05.31.15.58.47;	author ahodgkin;	state Exp;
branches;
next	1.18;

1.18
date	99.09.02.13.10.34;	author ahodgkin;	state Exp;
branches;
next	1.17;

1.17
date	98.09.07.11.47.01;	author ahodgkin;	state Exp;
branches;
next	1.16;

1.16
date	98.07.09.10.27.24;	author ahodgkin;	state Exp;
branches;
next	1.15;

1.15
date	98.03.20.12.12.59;	author ahodgkin;	state Exp;
branches;
next	1.14;

1.14
date	98.02.23.12.06.15;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	98.01.31.10.55.33;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	97.12.18.10.07.09;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	97.12.12.11.18.05;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	97.12.04.11.23.09;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	97.11.27.17.50.07;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.11.19.10.29.12;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.10.30.17.11.17;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.10.16.13.23.20;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.10.07.17.03.46;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.09.22.07.43.25;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.09.15.12.41.32;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.09.12.17.19.31;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.09.09.14.13.21;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.22
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    SaveFile.c                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Handle the Save File dialogue (actual file saving */
/*          is done in Save.c). Relies on there being only    */
/*          one Save File dialogue open at a time (it is a    */
/*          shared object).                                   */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 03-Sep-1997 (ADH): Created.                       */
/*          08-Dec-1997 (ADH): Added code for option or radio */
/*                             buttons and auto-widthing of   */
/*                             the dialogue box.              */
/*          24-May-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#include <stdlib.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#include <HTMLLib/HTMLLib.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <tboxlibs/event.h>

#include <tboxlibs/toolbox.h>
#include <tboxlibs/window.h>
#include <tboxlibs/gadgets.h>

#include "Global.h"
#include "MiscDefs.h"
#include "Utils.h"

#include "Browser.h"
#include "EventLogs.h"
#include "Fetch.h"  /* (For ISLINK macro) */
#include "Filetypes.h"
#include "History.h"
#include "Hotlist.h"
#include "Images.h"
#include "Menus.h"
#include "MimeMap.h"
#include "Object.h"
#include "Printing.h"
#include "Protocols.h"
#include "Save.h"
#include "SaveDraw.h"
#include "SaveSHelp.h"
#include "SaveText.h"
#include "Toolbars.h"
#include "URLutils.h"
#include "Windows.h"

#include "SaveFile.h"

/* Local statics */

static browser_data         * savefile_browser = NULL;
static HStream              * savefile_token   = NULL;
static const eventlogs_log  * savefile_log     = NULL;
static int                    savefile_type    = 0x000;
static savefile_open_reason   savefile_reason  = save_as_html;

static ObjectId               window_id        = 0;
static ComponentId            parent_component = -1;
static ObjectId               ancestor_id      = 0;

/* These are to remember the state of the 'alternative'  */
/* selector (option button or radio buttons) for when    */
/* the Save File dialogue is opened for a particular     */
/* parent component. The 'mhso' etc. represent the first */
/* letters of the component name from Menus.h (so in the */
/* above example, mhso = MiscHotlistSaveObject). Where   */
/* several components lead to the same section of code   */
/* in a 'switch' statement, the name of the first        */
/* as appearing in savefile_to_be_shown is used.         */

#ifndef REMOTE_HOTLIST

  static int alt_mhso = 0; /* MiscHotlistSaveObject  */

#endif

static   int alt_ead  = 0; /* ExportAsDraw           */
static   int alt_eat  = 0; /* ExportAsText           */
static   int alt_fsfl = 0; /* FrameSaveFrameLocation */
static   int alt_el   = 0; /* ExportLink             */
static   int alt_ep   = 0; /* ExportPicture          */
static   int alt_eb   = 0; /* ExportBackground       */
static   int alt_log  = 0; /* LogSaveLog             */

/* Static function prototypes */

static _kernel_oserror * savefile_set_leafname_and_extension           (ObjectId object, ComponentId component, const char * leaf, const char * extension);
static _kernel_oserror * savefile_set_leafname_from_url_with_extension (ObjectId object, ComponentId component, const char * url,  const char * extension);

static int               savefile_drag_ended                           (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int               savefile_ok                                   (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int               savefile_cancel                               (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

static _kernel_oserror * savefile_switch_to_normal                     (ObjectId window);
static _kernel_oserror * savefile_switch_to_option                     (ObjectId window);
static _kernel_oserror * savefile_switch_to_radios                     (ObjectId window);

static _kernel_oserror * savefile_set_items                            (ObjectId window, int selected);

static int               savefile_option_changed                       (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int               savefile_radio_changed                        (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int               savefile_item_changed                         (IdBlock * idb);

static _kernel_oserror * savefile_text_uri_or_url                      (ObjectId window);
static _kernel_oserror * savefile_toggle_uri_or_url                    (ObjectId window);
static _kernel_oserror * savefile_text_all_or_selection                (ObjectId window);
static _kernel_oserror * savefile_toggle_all_or_selection              (ObjectId window);
static _kernel_oserror * savefile_text_sprite_or_original              (ObjectId window);
static _kernel_oserror * savefile_toggle_sprite_or_original            (ObjectId window, const char * src);
static _kernel_oserror * savefile_text_without_backgrounds_or_with     (ObjectId window);
static _kernel_oserror * savefile_toggle_without_backgrounds_or_with   (ObjectId window);
static _kernel_oserror * savefile_text_embelished_or_not               (ObjectId window);
static _kernel_oserror * savefile_toggle_embelished_or_not             (ObjectId window);

static _kernel_oserror * savefile_set_correct_extent                   (ObjectId window, BBox * ra1);
static _kernel_oserror * savefile_auto_width                           (ObjectId window);

/**************************************************************/
/* savefile_open_for()                                        */
/*                                                            */
/* Creates and opens a Save File dialogue for a given         */
/* browser, opening near the pointer.                         */
/*                                                            */
/* Parameters: Pointer to a browser_data struct which is the  */
/*             ancestor of the dialogue;                      */
/*                                                            */
/*             A savefile_open_reason describing why the      */
/*             dialogue is being opened (see SaveFile.h).     */
/**************************************************************/

_kernel_oserror * savefile_open_for(browser_data * b, savefile_open_reason reason)
{
  ObjectId    id;
  ComponentId pc;

  /* Create the dialogue - as this is shared object it */
  /* will not be recreated if it already exists, but   */
  /* it's more efficient to not bother even trying!    */

  if (!window_id)
  {
    RetError(toolbox_create_object(0,
                                   "SaveFile",
                                   &id));
  }
  else id = window_id;

  /* Remember the reason we're being opened here */

  savefile_reason = reason;

  /* Work out which parent object and component IDs */
  /* we want to set                                 */

  switch (savefile_reason)
  {
    default:
    case save_as_html: pc = FileSaveFrame; break;
    case save_as_draw: pc = ExportAsDraw;  break;
    case save_as_text: pc = ExportAsText;  break;
    case save_as_pdf:  pc = ExportAsPDF;   break;
  }

  /* Show the dialogue */

  RetError(toolbox_show_object(Toolbox_ShowObject_AsMenu,
                               id,
                               Toolbox_ShowObject_AtPointer,
                               NULL,
                               b->self_id,
                               pc));
  return NULL;
}

/**************************************************************/
/* savefile_raise_from_shortcut()                             */
/*                                                            */
/* For several event codes, open the Save File dialogue box   */
/* with parent object and component ID set up accordingly.    */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int savefile_raise_from_shortcut(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  WimpGetPointerInfoBlock   info;
  browser_data            * b;
  ComponentId               pc;
  ObjectId                  this;
  ObjectId                  source;

  /* Useful for some items */

  if (wimp_get_pointer_info(&info)) return 0;

  /* This'll be from a toolbar or ancestor window because of the way */
  /* shortcuts work. If we've no ancestor object, the shortcut was   */
  /* raised from a browser window, so use the selected frame of that */
  /* ancestor browser. Otherwise it's from the toolbar, so go to the */
  /* ancestor instead.                                               */

  /* Need to know what browser to refer to */

  if (idb->ancestor_id != NULL_ObjectId)    source = idb->ancestor_id;
  else if (idb->self_id != NULL_ObjectId)   source = idb->self_id;
  else return 0; /* (with a surprised look on your face) */

  /* Where did we come from? */

  if (
       toolbox_get_client_handle(0,
                                 source,
                                 (void *) &b)
       ||
       (!b && eventcode != ESaveFileShortcutSaveLog)
     )
     return 0;

  /* First, deal with cases where we want to look at the selected */
  /* frame or ancestor depending on what the save type is         */

  switch (eventcode)
  {
    case ESaveFileShortcutSaveHTML:
    case ESaveFileShortcutSaveLocation:
    case ESaveFileShortcutExportDraw:
    case ESaveFileShortcutExportText:
    case ESaveFileShortcutExportLink:
    case ESaveFileShortcutExportPicture:
    case ESaveFileShortcutExportBackground:
    {
      if (
           idb->ancestor_id == NULL_ObjectId &&
           b->selected_frame
         )
         b = b->selected_frame;
    }
    break;
  }

  /* Now deal with the parent component for the benefit of */
  /* savefile_to_be_shown. In addition, some sanity checks */
  /* made when (e.g.) menus are opened or whatever, to do  */
  /* things like greying out components so dialogues could */
  /* not be opened in the first place, are not made when   */
  /* a keyboard shortcut is activated; must do those here. */

  switch (eventcode)
  {
    case ESaveFileShortcutSaveHTML:
    {
      if (!b->source) return 0;
      else pc = FileSaveFrame;
    }
    break;

    case ESaveFileShortcutSaveLocation:
    {
      if (!browser_current_url(b) && !browser_fetch_url(b)) return 0;
      else pc = FileSaveFrameLocation;
    }
    break;

    case ESaveFileShortcutExportDraw:
    {
      if (b->nchildren || !b->cell || !b->cell->nlines) return 0;
      else pc = ExportAsDraw;
    }
    break;

    case ESaveFileShortcutExportText:
    {
      if (b->nchildren || !b->cell || !b->cell->nlines) return 0;
      else pc = ExportAsText;
    }
    break;

    case ESaveFileShortcutExportLink:
    {
      HStream * link = browser_get_pointer_token(b, &info, NULL, NULL);

      if (!link || !ISLINK(link)) return 0;

      menus_set_opened_details(b, link);
      pc = ExportLink;
    }
    break;

    case ESaveFileShortcutExportPicture:
    {
      HStream * image = browser_get_pointer_token(b, &info, NULL, NULL);

      /* Is this an image, which has been fetched? Need to */
      /* allow the "save as sprite" option in the save     */
      /* dialogue as there is no way of greying this out   */
      /* at present, so it must have sprite data.          */

      if (
           !image ||
           !
           (
             (image->style & IMG) ||
             (
               image->tagno == TAG_INPUT &&
               HtmlINPUTtype(image) == inputtype_IMAGE
             )
             ||
             (
               ISOBJECT(image) &&
               object_token_is_image(b, image)
             )
           )
           || !image_token_can_be_saved_as_sprite(b, image)
         )
         return 0;

      menus_set_opened_details(b, image);
      pc = ExportPicture;
    }
    break;

    case ESaveFileShortcutExportBackground:
    {
      if (b->background_image == -1) return 0;

      menus_set_opened_details(b, NULL);
      pc = ExportBackground;
    }
    break;

    case ESaveFileShortcutSaveLog:
    {
      pc = LogSaveLog;
    }
    break;

    default: return 0; break;
  }

  /* Show the object next to the pointer, which (assuming the Res */
  /* file isn't broken!) leads to calling of savefile_to_be_shown */
  /* - since the object is shared, creating it just returns the   */
  /* ID of the existing item if it has been created before.       */

  ChkError(toolbox_create_object(0,
                                 "SaveFile",
                                 &this));

  ChkError(toolbox_show_object(Toolbox_ShowObject_AsMenu,
                               this,
                               Toolbox_ShowObject_AtPointer,
                               NULL,
                               b ? b->self_id : idb->self_id,
                               pc));
  return 1;
}

/**************************************************************/
/* savefile_to_be_shown()                                     */
/*                                                            */
/* Fills in the Save File dialogue prior to being shown, on   */
/* the basis of the parent component ID and ancestor object   */
/* ID in the event.                                           */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int savefile_to_be_shown(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  char           text[Limits_OS_Pathname];
  browser_data * b;
  int            first_time = !window_id;
  int            ok         = 0;
  ObjectId       pc         = idb->parent_component;
  ObjectId       source;

  /* If this is the first time we've been opened, do a few */
  /* initialisation bits and pieces                        */

  if (first_time)
  {
    /* Process the writable icon text */

    ChkError(windows_process_component_text(idb->self_id, SaveFileWrit, text, sizeof(text), 0, 1));

    /* The following ensures that we increment the usage */
    /* count for the dialogue so it is never deleted.    */
    /* Otherwise, we have to start keeping track of when */
    /* it goes and deal with event handlers etc. as      */
    /* appropriate. Creating the object like this only   */
    /* gives back the existing ID of what is already     */
    /* there, so this works out as taking up less time   */
    /* and less code than an alternative approach.       */

    ChkError(toolbox_create_object(0, "SaveFile", NULL));
  }

  /* Where did we come from? */

  if (idb->ancestor_id != NULL_ObjectId)    source = idb->ancestor_id;
  else if (idb->parent_id != NULL_ObjectId) source = idb->parent_id;
  else return 0;

  ChkError(toolbox_get_client_handle(0,
                                     source,
                                     (void *) &b));

  /* Deal with each parent menu item case */

  switch (pc)
  {
    case -1:
    {
      /* -1 implies a keyboard shortcut raised the dialogue. This is an */
      /* outdated interface (should now use events that are registered  */
      /* to call savefile_raise_from_shortcut, see Main.c) but we       */
      /* support it to avoid changing existing Res files where only the */
      /* one type of Save File shortcut is required.                    */

      pc = FileSaveFrame;

      /* Slight complication is that only an ancestor browser ever   */
      /* has the input focus, so we need to find the actual selected */
      /* frame that the user is going to think the dialogue is for.  */

      if (b->selected_frame) b = b->selected_frame;

      /* Can't rely on any earlier sanity checks in this case, as this will */
      /* be the first and only function called before the dialogue opens.   */

      if (!b || !b->source) return 0;

      /* No 'break' - let this drop through... */
    }

    /* Save a page's source */

    case FileSaveFrame:
    case FileSaveParent:
    case FileSaveAncestor:
    {
      browser_data * alt = b;

      /* For saving a frameset, work out the required browser_data struct */

      if (pc == FileSaveParent)
      {
        alt = utils_parent(b);
        if (!alt) alt = utils_ancestor(b);
      }

      else if (pc == FileSaveAncestor) alt = utils_ancestor(b);

      b = alt;

      ChkError(savefile_switch_to_normal(idb->self_id));

      /* Reset the transferred data counter */

      b->save_transferred = 0;

      ChkError(savefile_set_leafname_from_url(idb->self_id, SaveFileWrit, browser_current_url(b)));

      /* Set the draggable sprite */

      ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, b->page_is_text ? FileType_TEXT : FileType_HTML, 0));

      /* Ensure the width is correct */

      ChkError(savefile_auto_width(idb->self_id));

      /* Remember various details about the dialogue's source */

      savefile_browser = b;
      savefile_token   = NULL;
      savefile_log     = NULL;
      ok               = 1;
    }
    break;

    case LogSaveLog:
    {
      ChkError(savefile_switch_to_option(idb->self_id));
      ChkError(savefile_set_items(idb->self_id, alt_log));
      ChkError(savefile_set_leafname(idb->self_id, SaveFileWrit, lookup_token("LogLeafname:Log",0,0)));
      ChkError(savefile_text_all_or_selection(idb->self_id));
      ChkError(savefile_toggle_all_or_selection(idb->self_id));
      ChkError(savefile_auto_width(idb->self_id));

      savefile_browser = NULL;
      savefile_token   = NULL;
      savefile_log     = eventlogs_find_from_id(idb->ancestor_id);
      ok               = 1;
    }
    break;

    #ifndef REMOTE_HOTLIST

      case HotlistSaveHotlist:
      {
        ChkError(savefile_switch_to_normal(idb->self_id));
        ChkError(savefile_set_leafname(idb->self_id, SaveFileWrit, lookup_token("HotlistLeafname:Hotlist",0,0)));
        ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, FileType_HTML, 0));
        ChkError(savefile_auto_width(idb->self_id));

        savefile_browser = NULL;
        savefile_token   = NULL;
        savefile_log     = NULL;
        ok               = 1;
      }
      break;

      /* Save an object from the hotlist - a URL, directory, */
      /* or general selection                                */

      case MiscHotlistSaveObject:
      {
        hotlist_item * source = hotlist_find_selected_item();
        unsigned int   items  = hotlist_count_selected_items();

        if (items && source)
        {
          if (items == 1 && source->type == hl_url)
          {
            ChkError(savefile_switch_to_option(idb->self_id));
            ChkError(savefile_set_items(idb->self_id, alt_mhso));
            ChkError(savefile_set_leafname_from_url(idb->self_id, SaveFileWrit, source->data.url));
            ChkError(savefile_text_uri_or_url(idb->self_id));
            ChkError(savefile_toggle_uri_or_url(idb->self_id));
            ChkError(savefile_auto_width(idb->self_id));
          }
          else
          {
            ChkError(savefile_switch_to_normal(idb->self_id));
            ChkError(savefile_set_leafname(idb->self_id, SaveFileWrit, lookup_token("HotlistLeafname:Hotlist",0,0)));
            ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, FileType_HTML, 0));
            ChkError(savefile_auto_width(idb->self_id));
          }

          savefile_browser = NULL;
          savefile_token   = NULL;
          savefile_log     = NULL;
          ok               = 1;
        }

        #ifdef TRACE

          else
          {
            erb.errnum = Utils_Error_Custom_Normal;

            sprintf(erb.errmess,
                    "Should have more than a selected hotlist item %p and item count %d in savefile_to_be_shown",
                    source,
                    items);

            ChkError(&erb);
          }

        #endif
      }
      break;

    #endif

    case HistorySaveLocal:
    case HistorySaveGlobal:
    {
      ChkError(savefile_switch_to_normal(idb->self_id));
      ChkError(savefile_set_leafname(idb->self_id, SaveFileWrit, lookup_token("HistoryLeafname:History",0,0)));
      ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, FileType_HTML, 0));

      savefile_browser = b;
      savefile_token   = NULL;
      savefile_log     = NULL;
      ok               = 1;
    }
    break;

    case ExportAsDraw:
    {
      ChkError(savefile_switch_to_option(idb->self_id));
      ChkError(savefile_set_items(idb->self_id, alt_ead));
      ChkError(savefile_set_leafname_from_url_with_extension(idb->self_id, SaveFileWrit, browser_current_url(b), "draw"));
      ChkError(savefile_text_without_backgrounds_or_with(idb->self_id));
      ChkError(savefile_toggle_without_backgrounds_or_with(idb->self_id));
      ChkError(savefile_auto_width(idb->self_id));

      savefile_browser = b;
      savefile_token   = NULL;
      savefile_log     = NULL;
      ok               = 1;
    }
    break;

    case ExportAsPDF:
    {
      ChkError(savefile_switch_to_normal(idb->self_id));
      ChkError(savefile_set_leafname_from_url_with_extension(idb->self_id, SaveFileWrit, browser_current_url(b), "pdf"));
      ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, FileType_PDF, 0));
      ChkError(savefile_auto_width(idb->self_id));

      savefile_browser = b;
      savefile_token   = NULL;
      savefile_log     = NULL;
      ok               = 1;
    }
    break;

    case ExportAsText:
    {
      ChkError(savefile_switch_to_option(idb->self_id));
      ChkError(savefile_set_items(idb->self_id, alt_eat));
      ChkError(savefile_set_leafname_from_url_with_extension(idb->self_id, SaveFileWrit, browser_current_url(b), "txt"));
      ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, FileType_TEXT, 0));
      ChkError(savefile_text_embelished_or_not(idb->self_id));
      ChkError(savefile_toggle_embelished_or_not(idb->self_id));
      ChkError(savefile_auto_width(idb->self_id));

      savefile_browser = b;
      savefile_token   = NULL;
      savefile_log     = NULL;
      ok               = 1;
    }
    break;

    case ExportAsSHelp:
    {
      ChkError(savefile_switch_to_normal(idb->self_id));
      ChkError(savefile_set_leafname_from_url_with_extension(idb->self_id, SaveFileWrit, browser_current_url(b), "help"));
      ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, FileType_STRH, 0));
      ChkError(savefile_auto_width(idb->self_id));

      savefile_browser = b;
      savefile_token   = NULL;
      savefile_log     = NULL;
      ok               = 1;
    }
    break;

    /* Save a location as a URI file */

    case FileSaveFrameLocation:
    case FileSaveParentLocation:
    case FileSaveAncestorLocation:
    {
      browser_data * alt = b;
      char         * url;

      /* For saving a frameset, work out the required browser_data struct */

      if (pc == FileSaveParentLocation)
      {
        alt = utils_parent(b);
        if (!alt) alt = utils_ancestor(b);
      }

      else if (pc == FileSaveAncestorLocation) alt = utils_ancestor(b);

      b   = alt;
      url = browser_current_url(b);

      if (!url) url = browser_fetch_url(b);
      if (!url) url = " ";

      ChkError(savefile_switch_to_option(idb->self_id));
      ChkError(savefile_set_items(idb->self_id, alt_fsfl));
      ChkError(savefile_set_leafname_from_url_with_extension(idb->self_id, SaveFileWrit, url, ""));
      ChkError(savefile_text_uri_or_url(idb->self_id));
      ChkError(savefile_toggle_uri_or_url(idb->self_id));
      ChkError(savefile_auto_width(idb->self_id));

      savefile_browser = b;
      savefile_token   = NULL;
      savefile_log     = NULL;
      ok               = 1;
    }
    break;

    /* Export the link the pointer was over when the menu opened */

    case ExportLink:
    {
      HStream * link = menus_document_opened_over();

      if (!link || !ISLINK(link))
      {
        #ifndef TRACE

          return 0;

        #else

          erb.errnum = Utils_Error_Custom_Normal;

          sprintf(erb.errmess,
                  "Menu token %p is not a link or has no anchor text in savefile_to_be_shown",
                  link);

          show_error_ret(&erb);

          return 0;

        #endif
      }

      /* Set the leafname and filetype */

      ChkError(savefile_switch_to_option(idb->self_id));
      ChkError(savefile_set_items(idb->self_id, alt_el));
      ChkError(savefile_set_leafname_from_url_with_extension(idb->self_id, SaveFileWrit, link->anchor, ""));
      ChkError(savefile_text_uri_or_url(idb->self_id));
      ChkError(savefile_toggle_uri_or_url(idb->self_id));
      ChkError(savefile_auto_width(idb->self_id));

      /* Remember various details about the dialogue's source */

      savefile_browser = b;
      savefile_token   = link;
      savefile_log     = NULL;
      ok               = 1;
    }
    break;

    case ExportPicture:
    {
      HStream    * image = menus_document_opened_over();
      const char * src   = NULL;

      ChkError(savefile_switch_to_radios(idb->self_id));
      ChkError(savefile_set_items(idb->self_id, alt_ep));

      if (
           !image ||
           !
           (
             (image->style & IMG) ||
             (
               image->tagno == TAG_INPUT &&
               HtmlINPUTtype(image) == inputtype_IMAGE
             )
             ||
             (
               ISOBJECT(image) &&
               object_token_is_image(b, image)
             )
           )
         )
      {
        #ifndef TRACE

          return 0;

        #else

          erb.errnum = Utils_Error_Custom_Normal;

          sprintf(erb.errmess,
                  "Menu token %p is not an image in savefile_to_be_shown",
                  image);

          show_error_ret(&erb);

          return 0;

        #endif
      }
      else
      {
        if (!image_token_can_be_saved_as_sprite(b, image))
        {
          #ifndef TRACE

            return 0;

          #else

            erb.errnum = Utils_Error_Custom_Normal;

            sprintf(erb.errmess,
                    "Image represented by token %p cannot be saved as a sprite savefile_to_be_shown",
                    image);

            show_error_ret(&erb);

            return 0;

          #endif
        }
      }

      if (image->style & IMG)             src = image->src;
      else if (image->tagno == TAG_INPUT) src = HtmlINPUTsrc(image);
      else                                src = HtmlOBJECTdata(image);

      ChkError(savefile_set_leafname_from_url(idb->self_id, SaveFileWrit, (char *) src));
      ChkError(savefile_text_sprite_or_original(idb->self_id));
      ChkError(savefile_toggle_sprite_or_original(idb->self_id, src));
      ChkError(savefile_auto_width(idb->self_id));

      /* Remember various details about the dialogue's source */

      savefile_browser = b;
      savefile_token   = image;
      savefile_log     = NULL;
      ok               = 1;
    }
    break;

    case ExportBackground:
    {
      char src[Limits_URL];

      ChkError(savefile_switch_to_radios(idb->self_id));
      ChkError(savefile_set_items(idb->self_id, alt_eb));

      if (b->background_image == -1)
      {
        #ifndef TRACE

          return 0;

        #else

          erb.errnum = Utils_Error_Custom_Normal;

          StrNCpy0(erb.errmess,
                   "There is no background image on this page in savefile_to_be_shown");

          show_error_ret(&erb);

          return 0;

        #endif
      }

      *src = 0;
      image_get_background_image_url(b, src, sizeof(src));

      if (!*src) ChkError(savefile_set_leafname         (idb->self_id, SaveFileWrit, lookup_token("BackName:Background",0,0)));
      else       ChkError(savefile_set_leafname_from_url(idb->self_id, SaveFileWrit, src));

      ChkError(savefile_text_sprite_or_original(idb->self_id));
      ChkError(savefile_toggle_sprite_or_original(idb->self_id, src));
      ChkError(savefile_auto_width(idb->self_id));

      savefile_browser = b;
      savefile_token   = NULL;
      savefile_log     = NULL;
      ok               = 1;
    }
    break;

    #ifdef TRACE

      default:
      {
        erb.errnum = 0;
        StrNCpy0(erb.errmess,
                 "Save dialogue origin not understood in savefile_to_be_shown");

        show_error_ret(&erb);

        return 0;
      }
      break;

    #endif
  }

  /* If we were successful, install relevant event handlers etc., assuming */
  /* this is the first time the dialogue was opened.                       */

  if (ok)
  {
    parent_component   = pc;
    ancestor_id        = b->self_id;

    if (first_time)
    {
      window_id = idb->self_id;

      ChkError(event_register_toolbox_handler(window_id, Draggable_DragEnded, savefile_drag_ended,     NULL));
      ChkError(event_register_toolbox_handler(window_id, ESaveFileOK,         savefile_ok,             NULL));
      ChkError(event_register_toolbox_handler(window_id, ESaveFileCancel,     savefile_cancel,         NULL));
      ChkError(event_register_toolbox_handler(window_id, ESaveFileOption,     savefile_option_changed, NULL));
      ChkError(event_register_toolbox_handler(window_id, ESaveFileRadio,      savefile_radio_changed,  NULL));
    }
  }

  return 1;
}

/**************************************************************/
/* savefile_set_leafname_and_extension()                      */
/*                                                            */
/* Back-end to savefile_set_leafname.                         */
/*                                                            */
/* Sets the leafname in the Save File dialogue to a given     */
/* value, preserving whatever path component may already have */
/* been present. Any last save path recorded by the save      */
/* routines in Save.c will take precedence over an existing   */
/* dialogue path, though.                                     */
/*                                                            */
/* Parameters: Object ID of the dialogue;                     */
/*                                                            */
/*             Component ID of the writable gadget;           */
/*                                                            */
/*             Pointer to a null terminated leaf to work      */
/*             with;                                          */
/*                                                            */
/*             Pointer to a filename extension which will be  */
/*             used instead of /x, /xx, /xxx, /xxxx if this   */
/*             appears at the end of the leafname provided;   */
/*             pass NULL for no change to the provided name.  */
/*             The extension must be between 1 and 4 chars    */
/*             long without any leading "/" or ".". An empty  */
/*             string will result in any existing leaf        */
/*             extension of 4 or less characters being        */
/*             removed.                                       */
/**************************************************************/

static _kernel_oserror * savefile_set_leafname_and_extension
                         (
                           ObjectId      object,
                           ComponentId   component,
                           const char  * leaf,
                           const char  * extension
                         )
{
  char       * dot;
  char       * leaf_copy = NULL;
  size_t       leaf_len;
  char         path[Limits_OS_Pathname];
  const char * last;

  if (!leaf) return NULL;
  else leaf_len = strlen(leaf);

  /* Is there an existing last pathname we should use? */

  last = save_return_last_path();

  if (last && *last)
  {
    StrNCpy0(path, last);
  }
  else
  {
    /* See what filename is already in the dialogue */

    path[0] = 0; /* Important so that when we strcat the leafname later, */
                 /* things will work even if the writable holds no text. */

    RetError(writablefield_get_value(0,
                                     object,
                                     component,
                                     path,
                                     sizeof(path),
                                     NULL));
    path[sizeof(path) - 1] = 0;
  }

  /* If there's a leafname here, force a terminator in place of the '.' */
  /* - otherwise, want to only have the leaf, so clear the string.      */

  dot = strrchr(path, '.');

  if (dot) *(++dot) = 0;
  else *path = 0;

  /* Copy the leafname if doing extension substitution */

  if (extension != NULL)
  {
    /* Allow for "/x" extending up to "/xxxx", plus the terminator */

    leaf_copy = malloc(leaf_len + 4);

    /* Not enough RAM, so don't substitute? */

    if (leaf_copy == NULL) extension = NULL;
    else
    {
      size_t find;

      strcpy(leaf_copy, leaf);

      /* Search backwards for a "/" in the 2nd to last character */
      /* through to the 5th to last character, giving room for   */
      /* extension lengths of 1 to 4 characters.                 */

      for (find = 2; find < 6; find++)
      {
        if (leaf_copy[leaf_len - find] == '/') break;
      }

      /* Did we find anything? If so, overwrite with the new extension, */
      /* taking care to enforce the 4 character limit.                  */

      if (find < 6)
      {
        size_t ext_len = strlen(extension);

        if (ext_len == 0)
        {
          /* Strip the extension */

          leaf_copy[leaf_len - find] = '\0';
        }
        else if (ext_len < 5)
        {
          /* Copy in the whole new extension */

          strcpy(leaf_copy + leaf_len - find + 1, extension);
        }
        else
        {
          /* Copy in the first 4 characters of the new extension and */
          /* force a NUL terminator at the end of the whole string.  */

          strncpy(leaf_copy + leaf_len - find + 1, extension, 4);
          leaf_copy[leaf_len - find + 5] = '\0';
        }
      }
    }
  }

  /* If we didn't get any leaf copy made above, just refer */
  /* to it directly (grotty - have to cast away 'const').  */

  if (extension == NULL) leaf_copy = (char *) leaf;

  /* Can we fit the leaf in? */

  if (strlen(path) + strlen(leaf_copy) + 1 > sizeof(path))
  {
    /* No, can we just fit in the leaf? If not, leave */
    /* everything alone...                            */

    if (strlen(leaf_copy) + 1 <= sizeof(path)) strcpy(path, leaf_copy);
  }
  else strcat(path, leaf_copy);

  /* Free the leaf copy, if one was made */

  if (extension != NULL) free(leaf_copy);

  /* Set the value. Ignore any errors about buffer overflows */
  /* because as much of the string as can be written will    */
  /* have been.                                              */

  writablefield_set_value(0,
                          object,
                          component,
                          path);

  return NULL;
}

/**************************************************************/
/* savefile_set_leafname()                                    */
/*                                                            */
/* Sets the leafname in the Save File dialogue to a given     */
/* value, preserving whatever path component may already have */
/* been present. Any last save path recorded by the save      */
/* routines in Save.c will take precedence over an existing   */
/* dialogue path, though.                                     */
/*                                                            */
/* Parameters: Object ID of the dialogue;                     */
/*                                                            */
/*             Component ID of the writable gadget;           */
/*                                                            */
/*             Pointer to a null terminated leaf to work      */
/*             with.                                          */
/**************************************************************/

_kernel_oserror * savefile_set_leafname(ObjectId object, ComponentId component, char * leaf)
{
  return savefile_set_leafname_and_extension(object,
                                             component,
                                             leaf,
                                             NULL);
}

/**************************************************************/
/* savefile_set_leafname_from_url_with_extension()            */
/*                                                            */
/* As savefile_set_leafname_and_extension, but works out the  */
/* leaf from a given URL.                                     */
/*                                                            */
/* Parameters: Object ID of the dialogue;                     */
/*                                                            */
/*             Component ID of the writable gadget;           */
/*                                                            */
/*             Pointer to a null terminated URL to work with; */
/*                                                            */
/*             Pointer to a filename extension which will be  */
/*             used instead of /x, /xx, /xxx, /xxxx if this   */
/*             appears at the end of the leafname provided;   */
/*             pass NULL for no change to the provided name.  */
/*             The extension must be between 1 and 4 chars    */
/*             long without any leading "/" or ".". An empty  */
/*             string will result in any existing leaf        */
/*             extension of 4 or less characters being        */
/*             removed.                                       */
/**************************************************************/

static _kernel_oserror * savefile_set_leafname_from_url_with_extension
                         (
                           ObjectId      object,
                           ComponentId   component,
                           const char  * url,
                           const char  * extension
                         )
{
  char leaf[Limits_OS_Pathname];

  /* Get a leafname */

  urlutils_leafname_from_url((char *) url, leaf, sizeof(leaf));

  /* Use it */

  return savefile_set_leafname_and_extension(object,
                                             component,
                                             leaf,
                                             extension);
}

/**************************************************************/
/* savefile_set_leafname_from_url()                           */
/*                                                            */
/* As savefile_set_leafname, but works out the leaf from a    */
/* given URL.                                                 */
/*                                                            */
/* Parameters: Object ID of the dialogue;                     */
/*                                                            */
/*             Component ID of the writable gadget;           */
/*                                                            */
/*             Pointer to a null terminated URL to work with. */
/**************************************************************/

_kernel_oserror * savefile_set_leafname_from_url(ObjectId object, ComponentId component, char * url)
{
  return savefile_set_leafname_from_url_with_extension(object,
                                                       component,
                                                       url,
                                                       NULL);
}

/**************************************************************/
/* savefile_set_filetype()                                    */
/*                                                            */
/* Sets the sprite of the draggable object in the Save File   */
/* dialogue according to the given filetype, and records that */
/* filetype in savefile_type (unless asked not to).           */
/*                                                            */
/* If the sprite cannot be found in the Wimp sprite pool,     */
/* 'file_xxx' is used instead.                                */
/*                                                            */
/* Parameters: Object ID of the dialogue;                     */
/*                                                            */
/*             Component ID of the draggable gadget;          */
/*                                                            */
/*             The filetype;                                  */
/*                                                            */
/*             1 to *not* set savefile_type to the filetype - */
/*             this would be used if (for example) this       */
/*             function was being called for a dialogue       */
/*             similar to, but not the same as the Save File  */
/*             dialogue (e.g. Save Object, where several can  */
/*             exist at once); if for a 'genuine' Save File   */
/*             dialogue, you *must* pass zero here.           */
/**************************************************************/

_kernel_oserror * savefile_set_filetype(ObjectId object, ComponentId component, int type, int dont_record)
{
  char sprite[Limits_OS_SpriteName];
  int  len;

  if (dont_record || savefile_type != type)
  {
    if (!dont_record) savefile_type = type;

    /* Will it fit in the buffer? */

    len = utils_len_printf("file_%03x", type);

    /* If so, build the sprite name and tell the gadget to use that sprite */

    if (len < sizeof(sprite))
    {
      sprintf(sprite, "file_%03x", type);

      if (
           !_swix(Wimp_SpriteOp,
                  _IN(0) | _IN(2),

                  0x18, /* Select sprite */
                  sprite)
         )
      {
        /* If it has been found, use this sprite */

        return draggable_set_sprite(0,
                                    object,
                                    component,
                                    sprite);
      }
      else
      {
        /* Otherwise use the generic 'file_xxx' instead */

        return draggable_set_sprite(0,
                                    object,
                                    component,
                                    "file_xxx");
      }
    }
  }

  return NULL;
}

/**************************************************************/
/* savefile_drag_ended()                                      */
/*                                                            */
/* Handle Draggable_DragEnded events from the Save File       */
/* dialogue draggable sprite gadget.                          */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

static int savefile_drag_ended(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  DraggableDragEndedEvent * drag   = (DraggableDragEndedEvent *) event;
  protocols_saving          saving = protocols_saving_nothing;
  int                       size   = 4096; /* More or less arbitrary */
  int                       alt    = savefile_alternative_selected();
  WimpGetPointerInfoBlock   info;
  int                       window_handle;
  char                      path[Limits_OS_Pathname];
  char                    * leaf;
  void                    * extra  = savefile_token;

  /* If the user dragged back to the save dialogue, do nothing */

  ChkError(window_get_wimp_handle(0,
                                  window_id,
                                  &window_handle));

  if (window_handle == drag->window_handle) return 1;

  /* Get the pathname from the Save File dialogue. */

  ChkError(writablefield_get_value(0,
                                   window_id,
                                   SaveFileWrit,
                                   path,
                                   sizeof(path),
                                   NULL));

  path[sizeof(path) - 1] = 0;

  /* Point to the leafname component */

  leaf = strrchr(path, '.');
  if (!leaf) leaf = path;
  else       leaf ++;

  /* Work out the estimated data size */

  switch (parent_component)
  {
    /* Size of an HTML file */

    case FileSaveFrame:
    case FileSaveParent:
    case FileSaveAncestor:
    {
      saving = protocols_saving_document_source;

      if (is_known_browser(savefile_browser)) size = save_source_size(savefile_browser);
      else                                    size = 0;
    }
    break;

    /* Size of a URI file for a location */

    case FileSaveFrameLocation:
    case FileSaveParentLocation:
    case FileSaveAncestorLocation:
    {
      char * url   = browser_current_url  (savefile_browser);
      char * title = browser_current_title(savefile_browser);

      if (!url) url = browser_fetch_url(savefile_browser);
      if (!url) url = " ";

      saving = protocols_saving_frame_location;
      size   = save_uri_size(url, title, alt);
    }
    break;

    /* Size of a text file */

    case ExportAsText:
    {
      saving = protocols_saving_document_as_text;

      if (is_known_browser(savefile_browser)) size = savetext_text_size(savefile_browser, alt);
      else                                    size = 0;
    }
    break;

    /* Size of a Draw file */

    case ExportAsDraw:
    {
      saving = protocols_saving_document_as_draw;

      if (is_known_browser(savefile_browser)) size = savedraw_draw_size(savefile_browser, alt);
      else                                    size = 0;
    }
    break;

    /* Size of a StrongHelp manual */

    case ExportAsSHelp:
    {
      saving = protocols_saving_document_as_shelp;

      if (is_known_browser(savefile_browser)) size = saveshelp_manual_size(savefile_browser);
      else                                    size = 0;
    }
    break;

    /* Size of a PDF file */

    case ExportAsPDF:
    {
      saving = protocols_saving_document_as_pdf;

      if (is_known_browser(savefile_browser)) size = 4096; // UNKNOWN! savespdf_pdf_size(savefile_browser);
      else                                    size = 0;
    }
    break;

    /* Size of a URI file */

    case ExportLink:
    {
      saving = protocols_saving_link;

      if (savefile_token && savefile_token->anchor) size = save_uri_size(savefile_token->anchor, NULL, alt);
      else                                          size = 0;
    }
    break;

    /* Size of an image to export */

    case ExportPicture:
    {
      saving = protocols_saving_image_sprite;

      if (savefile_token && is_known_browser(savefile_browser))
      {
        if (!alt) size = image_sprite_size(savefile_browser, savefile_token);
      }
      else size = 0;
    }
    break;

    /* Save a background image */

    case ExportBackground:
    {
      saving = protocols_saving_image_sprite;

      if (is_known_browser(savefile_browser))
      {
        if (!alt) size = image_sprite_size(savefile_browser, NULL);
      }
      else size = 0;
    }
    break;

    /* Save a log file */

    case LogSaveLog:
    {
      saving = protocols_saving_log;

      if (savefile_log)
      {
        size  = save_log_size(savefile_log, alt, NULL);
        extra = (void *) savefile_log;
      }
      else size = 0;
    }
    break;

    #ifndef REMOTE_HOTLIST

      /* File size of the entire hotlist */

      case HotlistSaveHotlist:
      {
        saving = protocols_saving_entire_hotlist;
      }
      break;

      /* Size of an object from the hotlist - a URL, directory, */
      /* or general selection                                   */

      case MiscHotlistSaveObject:
      {
        hotlist_item * source = hotlist_find_selected_item();
        unsigned int   items  = hotlist_count_selected_items();

        if (items && source)
        {
          if (items == 1 && source->type == hl_url)
          {
            saving = protocols_saving_hotlist_entry;
            extra  = (void *) source;
            size   = save_uri_size(source->data.url, source->name, alt);
          }
          else saving = protocols_saving_hotlist_selection;
        }
      }
      break;

    #endif

    case HistorySaveLocal:
    {
      saving = protocols_saving_local_history;
      size   = 0;
    }
    break;

    case HistorySaveGlobal:
    {
      saving = protocols_saving_global_history;
      size   = 0;
    }
    break;

    /* For others, could leave size as 4096 - *but must set 'saving' appropriately* */
  }

  /* Send out the DataSave message */

  info.x             = drag->x;
  info.y             = drag->y;
  info.window_handle = drag->window_handle;
  info.icon_handle   = drag->icon_handle;

  ChkError(protocols_atats_send_data_save(savefile_browser,
                                          extra,
                                          leaf,
                                          size,
                                          savefile_type,
                                          saving,
                                          &info));
  return 1;
}

/**************************************************************/
/* savefile_ok()                                              */
/*                                                            */
/* Handles clicks on the 'OK' button in the Save File         */
/* dialogue.                                                  */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

static int savefile_ok(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  _kernel_oserror * e   = NULL;
  int               alt = savefile_alternative_selected();
  char            * leaf;
  char              path[Limits_OS_Pathname];

  /* Get the pathname from the Save File dialogue. */

  ChkError(writablefield_get_value(0,
                                   window_id,
                                   SaveFileWrit,
                                   path,
                                   sizeof(path),
                                   NULL));

  path[sizeof(path) - 1] = 0;

  /* Is this fully specified? */

  leaf            = strchr(path, '.');
  if (!leaf) leaf = strchr(path, ':');

  if (!leaf)
  {
    StrNCpy0(erb.errmess,
             lookup_token("GivePath:To save, drag the file icon to a directory viewer",
                          0,
                          0));

    erb.errnum = Utils_Error_Custom_Message;

    ChkError(&erb);
  }

  /* Save the file */

  switch (parent_component)
  {
    /* Save as HTML */

    case FileSaveFrame:
    case FileSaveParent:
    case FileSaveAncestor:
    {
      if (is_known_browser(savefile_browser))
      {
        e = save_save_source(path, savefile_browser);
      }
    }
    break;

    /* Save as text */

    case ExportAsText:
    {
      if (is_known_browser(savefile_browser))
      {
        e = savetext_save_text(savefile_browser, path, alt);
      }
    }
    break;

    /* Save as Draw */

    case ExportAsDraw:
    {
      if (is_known_browser(savefile_browser))
      {
        e = savedraw_save_draw(savefile_browser, path, alt);
      }
    }
    break;

    /* Save as PDF file */

    case ExportAsPDF:
    {
      if (is_known_browser(savefile_browser))
      {
        /* Ignore errors; any errors will already have been reported */
        /* and leaving 'e' set will result in the menu tree being    */
        /* left open (see below) which we don't want to happen.      */

        (void) print_print(path);
        e = NULL;
      }
    }
    break;

    /* Save as a StrongHelp manual */

    case ExportAsSHelp:
    {
      if (is_known_browser(savefile_browser))
      {
        e = saveshelp_save_manual(savefile_browser, path);
      }
    }
    break;

    /* Save the current location or a link as a URI or URL file */

    case ExportLink:
    case FileSaveFrameLocation:
    case FileSaveParentLocation:
    case FileSaveAncestorLocation:
    {
      if (is_known_browser(savefile_browser))
      {
        if (savefile_token)
        {
          char * title = browser_current_title(savefile_browser);

          /* Save a link as a URI file */

          e = save_save_uri(path, savefile_token->anchor, title, alt);
        }
        else
        {
          /* Save the current location as a URI file */

          char * url   = browser_current_url  (savefile_browser);
          char * title = browser_current_title(savefile_browser);

          if (!url) url = browser_fetch_url(savefile_browser);
          if (!url) url = " ";

          e = save_save_uri(path, url, title, alt);
        }
      }
    }
    break;

    /* Export a foreground image */

    case ExportPicture:
    {
      if (is_known_browser(savefile_browser))
      {
        if (!alt) e = image_export_sprite  (path, savefile_browser, savefile_token);
        else      e = image_export_original(path, savefile_browser, savefile_token);
      }
    }
    break;

    /* Export a background image */

    case ExportBackground:
    {
      if (is_known_browser(savefile_browser))
      {
        if (!alt) e = image_export_sprite  (path, savefile_browser, NULL);
        else      e = image_export_original(path, savefile_browser, NULL);
      }
    }
    break;

    /* Export a log file */

    case LogSaveLog:
    {
      if (savefile_log)
      {
        e = save_save_log(path, savefile_log, alt);
      }
    }
    break;

    #ifndef REMOTE_HOTLIST

      /* Save the hotlist */

      case HotlistSaveHotlist:
      {
        e = hotlist_save_hotlist(path, NULL, 0);
      }
      break;

      /* Save an object from the hotlist - a URL, directory, */
      /* or general selection                                */

      case MiscHotlistSaveObject:
      {
        hotlist_item * source = hotlist_find_selected_item();
        unsigned int   items  = hotlist_count_selected_items();

        if (items && source)
        {
          if (items == 1 && source->type == hl_url)
          {
            e = save_save_uri(path, source->data.url, source->name, alt);

            if (!e)
            {
              e = hotlist_clear_selection();
            }
          }
          else
          {
            e = hotlist_save_hotlist(path, NULL, 1);

            if (!e)
            {
              e = hotlist_clear_selection();
            }
          }
        }
      }
      break;

    #endif

    case HistorySaveLocal:
    {
      browser_data * local_browser = savefile_browser;

      if (!is_known_browser(savefile_browser)) local_browser = NULL;

      e = history_save_as_html(path, local_browser);
    }
    break;

    case HistorySaveGlobal:
    {
      e = history_save_as_html(path, NULL);
    }
    break;
  }

  /* If everything is OK, close the menu */

  if (!e)
  {
    ChkError(savefile_close(0,1)); /* Make sure we've tidied up */

    _swix(Wimp_CreateMenu,
          _IN(1),

          -1);
  }

  /* Finished */

  if (e) ChkError(e);

  return 1;
}

/**************************************************************/
/* savefile_cancel()                                          */
/*                                                            */
/* Handles clicks on the 'Cancel' button in the Save File     */
/* dialogue                                                   */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

static int savefile_cancel(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  /* If we were fetching, stop the fetch */

  if (savefile_browser && is_known_browser(savefile_browser))
  {
    if (savefile_browser->save_link) fetch_stop(savefile_browser, 0);
  }

  /* We don't do anything sophisticated, like */
  /* restoring previous options here, as the  */
  /* dialogue is too simple for it to be      */
  /* worthwhile. Therefore, just close it.    */

  ChkError(savefile_close(0,0));

  return 1;
}

/**************************************************************/
/* savefile_close()                                           */
/*                                                            */
/* If the Save File dialogue is opened, this will close it.   */
/*                                                            */
/* Parameters: An object ID, or 0. If not zero, the ID must   */
/*             match the ancestor recorded when the dialogue  */
/*             was opened or no action is taken.              */
/*                                                            */
/*             0 to close the dialogue, 1 to do everything    */
/*             except that.                                   */
/**************************************************************/

_kernel_oserror * savefile_close(ObjectId ancestor, int do_not_close)
{
  _kernel_oserror * e = NULL;

  if (!window_id) return NULL;
  if (ancestor && ancestor != ancestor_id) return NULL;

  /* If required, close the dialogue */

  if (!do_not_close && !e)
  {
    /* If the dialogue came from a menu tree, collapse the tree */

    if (parent_component != -1) e = _swix(Wimp_CreateMenu, _IN(1), -1);

    /* Close the dialogue */

    if (!e) e = toolbox_hide_object(0, window_id);
  }

  parent_component = -1;
  ancestor_id      = 0;

  savefile_browser = NULL;
  savefile_token   = NULL;
  savefile_log     = NULL;
  savefile_type    = 0x000;

  return e;
}

/**************************************************************/
/* savefile_return_dialogue_info()                            */
/*                                                            */
/* Returns information on the Save File dialogue and its      */
/* ancestor.                                                  */
/*                                                            */
/* Parameters: Pointer to an ObjectId, in which the ID of the */
/*             dialogue is placed;                            */
/*                                                            */
/*             Pointer to an ObjectId, in which the ID of the */
/*             ancestor window is placed.                     */
/*                                                            */
/* Returns:    See parameters list, and note that the         */
/*             returned values will be 0 and 0 if the Save    */
/*             File dialogue is closed.                       */
/*                                                            */
/* Assumes:    Either pointer may be NULL.                    */
/**************************************************************/

void savefile_return_dialogue_info(ObjectId * window, ObjectId * ancestor)
{
  if (window)   *window   = window_id;
  if (ancestor) *ancestor = ancestor_id;
}

/**************************************************************/
/* savefile_switch_to_normal()                                */
/*                                                            */
/* Move the radio buttons or option buttons from view in the  */
/* Save File dialogue, if either is present.                  */
/*                                                            */
/* Parameters: Object ID of the dialogue.                     */
/**************************************************************/

static _kernel_oserror * savefile_switch_to_normal(ObjectId window)
{
  BBox opt, ra1, ra2;
  int  showing = 0;
  int  noopt   = 0;
  int  norad   = 0;
  int  moveby;

  /* Find the option button and/or radio gadgets */

  if (gadget_get_bbox(0, window, SaveFileOption, &opt)) noopt = 1;
  if (gadget_get_bbox(0, window, SaveFileRadio1, &ra1)) norad = 1;
  if (gadget_get_bbox(0, window, SaveFileRadio2, &ra2)) norad = 1;

  if      (!noopt && opt.xmin < opt.xmax - opt.xmin) showing = 1;
  else if (!norad && ra1.xmin < ra1.xmax - ra1.xmin) showing = 2;

  /* If 'showing' is zero, we're on the normal display already */

  if (!showing) goto savefile_switch_to_normal_set_extent;

  /* Otherwise, need to move things about a bit */

  if (showing == 1)
  {
    /* We're on the option button display */

    moveby = (opt.xmax - opt.xmin) * 2;

    opt.xmin += moveby;
    opt.xmax += moveby;

    RetError(gadget_move_gadget(0, window, SaveFileOption, &opt));
  }
  else
  {
    /* We're on the radio buttons display */

    moveby = (ra1.xmax - ra1.xmin) * 2;

    ra1.xmin += moveby;
    ra1.xmax += moveby;
    ra2.xmin += moveby;
    ra2.xmax += moveby;

    RetError(gadget_move_gadget(0, window, SaveFileRadio1, &ra1));
    RetError(gadget_move_gadget(0, window, SaveFileRadio2, &ra2));
  }

  /* Move the Y coordinates of the Cancel and Save buttons back */
  /* to the normal position. First, Cancel.                     */

  RetError(gadget_get_bbox(0, window, SaveFileCancel,           &ra1));
  RetError(gadget_get_bbox(0, window, SaveFileCancelMarkNormal, &ra2));

  ra1.ymin = ra2.ymin;
  ra1.ymax = ra2.ymax;

  RetError(gadget_move_gadget(0, window, SaveFileCancel, &ra1));

savefile_switch_to_normal_set_extent:

  /* Now, OK (or 'Save' or whatever) */

  RetError(gadget_get_bbox(0, window, SaveFileOK,           &ra1));
  RetError(gadget_get_bbox(0, window, SaveFileOKMarkNormal, &ra2));

  ra1.ymin = ra2.ymin;
  ra1.ymax = ra2.ymax;

  RetError(gadget_move_gadget(0, window, SaveFileOK, &ra1));

  /* Set the extent */

  RetError(savefile_set_correct_extent(window, &ra1));

  /* Finished */

  return NULL;
}

/**************************************************************/
/* savefile_switch_to_option()                                */
/*                                                            */
/* Move the option button into the Save File dialogue, moving */
/* out the radio buttons if present.                          */
/*                                                            */
/* Parameters: Object ID of the dialogue.                     */
/**************************************************************/

static _kernel_oserror * savefile_switch_to_option(ObjectId window)
{
  BBox opt, ra1, ra2, wri;
  int  showing = 0;
  int  noopt   = 0;
  int  norad   = 0;
  int  moveby;

  /* Find the writable gadget */

  RetError(gadget_get_bbox(0, window, SaveFileWrit, &wri));

  /* Find the option button and/or radio gadgets */

  if (gadget_get_bbox(0, window, SaveFileOption, &opt)) noopt = 1;
  if (gadget_get_bbox(0, window, SaveFileRadio1, &ra1)) norad = 1;
  if (gadget_get_bbox(0, window, SaveFileRadio2, &ra2)) norad = 1;

  /* If there are no option buttons, try switching to the */
  /* radios instead.                                      */

  if (noopt)
  {
    if (norad) return NULL;
    else       return savefile_switch_to_radios(window);
  }

  if      (!noopt && opt.xmin < opt.xmax - opt.xmin) showing = 1;
  else if (!norad && ra1.xmin < ra1.xmax - ra1.xmin) showing = 2;

  /* If 'showing' is 1, we're on the option display already */

  if (showing == 1) goto savefile_switch_to_option_set_extent;

  /* Move back to the normal display as a starting point */

  RetError(savefile_switch_to_normal(window));

  /* Move the option button to the same xmin as the writable */

  moveby = opt.xmin - wri.xmin;

  opt.xmin -= moveby;
  opt.xmax -= moveby;

  RetError(gadget_move_gadget(0, window, SaveFileOption, &opt));

  /* Move the Y coordinates of the Cancel and Save buttons */
  /* to the option position. First, Cancel.                */

  RetError(gadget_get_bbox(0, window, SaveFileCancel,           &ra1));
  RetError(gadget_get_bbox(0, window, SaveFileCancelMarkOption, &ra2));

  ra1.ymin = ra2.ymin;
  ra1.ymax = ra2.ymax;

  RetError(gadget_move_gadget(0, window, SaveFileCancel, &ra1));

savefile_switch_to_option_set_extent:

  /* Now, OK (or 'Save' or whatever) */

  RetError(gadget_get_bbox(0, window, SaveFileOK,           &ra1));
  RetError(gadget_get_bbox(0, window, SaveFileOKMarkOption, &ra2));

  ra1.ymin = ra2.ymin;
  ra1.ymax = ra2.ymax;

  RetError(gadget_move_gadget(0, window, SaveFileOK, &ra1));

  /* Set the extent */

  RetError(savefile_set_correct_extent(window, &ra1));

  /* Finished */

  return NULL;
}

/**************************************************************/
/* savefile_switch_to_radios()                                */
/*                                                            */
/* Move the radio buttons into the Save File dialogue, moving */
/* out the option button if present.                          */
/*                                                            */
/* Parameters: Object ID of the dialogue.                     */
/**************************************************************/

static _kernel_oserror * savefile_switch_to_radios(ObjectId window)
{
  BBox opt, ra1, ra2, wri;
  int  showing = 0;
  int  noopt   = 0;
  int  norad   = 0;
  int  moveby;

  /* Find the writable gadget */

  RetError(gadget_get_bbox(0, window, SaveFileWrit, &wri));

  /* Find the option button and/or radio gadgets */

  if (gadget_get_bbox(0, window, SaveFileOption, &opt)) noopt = 1;
  if (gadget_get_bbox(0, window, SaveFileRadio1, &ra1)) norad = 1;
  if (gadget_get_bbox(0, window, SaveFileRadio2, &ra2)) norad = 1;

  /* If there are no radio buttons, try switching to the option */
  /* button instead.                                            */

  if (norad)
  {
    if (noopt) return NULL;
    else       return savefile_switch_to_option(window);
  }

  if      (!noopt && opt.xmin < opt.xmax - opt.xmin) showing = 1;
  else if (!norad && ra1.xmin < ra1.xmax - ra1.xmin) showing = 2;

  /* If 'showing' is 2, we're on the radios display already */

  if (showing == 2) goto savefile_switch_to_radios_set_extent;

  /* Move back to the normal display as a starting point */

  RetError(savefile_switch_to_normal(window));

  /* Move the radio buttons to the same xmin as the writable */

  moveby = ra1.xmin - wri.xmin;

  ra1.xmin -= moveby;
  ra1.xmax -= moveby;

  moveby = ra2.xmin - wri.xmin;

  ra2.xmin -= moveby;
  ra2.xmax -= moveby;

  RetError(gadget_move_gadget(0, window, SaveFileRadio1, &ra1));
  RetError(gadget_move_gadget(0, window, SaveFileRadio2, &ra2));

  /* Move the Y coordinates of the Cancel and Save buttons */
  /* to the radios position. First, Cancel.                */

  RetError(gadget_get_bbox(0, window, SaveFileCancel,           &ra1));
  RetError(gadget_get_bbox(0, window, SaveFileCancelMarkRadios, &ra2));

  ra1.ymin = ra2.ymin;
  ra1.ymax = ra2.ymax;

  RetError(gadget_move_gadget(0, window, SaveFileCancel, &ra1));

savefile_switch_to_radios_set_extent:

  /* Now, OK (or 'Save' or whatever) */

  RetError(gadget_get_bbox(0, window, SaveFileOK,           &ra1));
  RetError(gadget_get_bbox(0, window, SaveFileOKMarkRadios, &ra2));

  ra1.ymin = ra2.ymin;
  ra1.ymax = ra2.ymax;

  RetError(gadget_move_gadget(0, window, SaveFileOK, &ra1));

  /* Set the extent */

  RetError(savefile_set_correct_extent(window, &ra1));

  /* Finished */

  return NULL;
}

/**************************************************************/
/* savefile_set_items()                                       */
/*                                                            */
/* Set the radio buttons or option button in a Save File      */
/* dialogue, if present, to the given state.                  */
/*                                                            */
/* Parameters: Object ID of the dialogue;                     */
/*                                                            */
/*             1 to tick the option box or select the second  */
/*             of the two radios - 0 to untick the option box */
/*             or select the first of the two radios.         */
/**************************************************************/

static _kernel_oserror * savefile_set_items(ObjectId window, int selected)
{
  optionbutton_set_state(0, window, SaveFileOption, selected);

  radiobutton_set_state (0, window, SaveFileRadio1, !selected);
  radiobutton_set_state (0, window, SaveFileRadio2, selected);

  return NULL;
}

/**************************************************************/
/* savefile_option_changed()                                  */
/*                                                            */
/* Called when the option button in a Save File dialogue (if  */
/* any) is toggled.                                           */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

static int savefile_option_changed(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  return savefile_item_changed(idb);
}

/**************************************************************/
/* savefile_radio_changed()                                   */
/*                                                            */
/* Called when the radio buttons in a Save File dialogue (if  */
/* any) are toggled.                                          */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

static int savefile_radio_changed(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  return savefile_item_changed(idb);
}

/**************************************************************/
/* savefile_item_changed()                                    */
/*                                                            */
/* Called when either one of the two radios that can appear   */
/* in a Save File dialogue, or the option button that can     */
/* appear, is used.                                           */
/*                                                            */
/* Parameters: Pointer an IdBlock from the Toolbox event that */
/*             was raised by the button(s).                   */
/**************************************************************/

static int savefile_item_changed(IdBlock * idb)
{
  browser_data * b;
  ComponentId    pc  = idb->parent_component;
  int            alt = savefile_alternative_selected();

  /* Where did we come from? */

  ChkError(toolbox_get_client_handle(0, idb->ancestor_id, (void *) &b));

//  /* If the parent ID is the same as a toolbar, this was */
//  /* from a toolbar button - in which case, use a parent */
//  /* ID of FileSaveParent, as that is what we actually    */
//  /* want to do.                                         */
//
//  if (
//       idb->parent_id == toolbars_get_upper(b) ||
//       idb->parent_id == toolbars_get_lower(b)
//     )
//     pc = FileSaveParent;

  /* Actions will vary according to the parent component */

  switch (pc)
  {
    case FileSaveFrame:
    case FileSaveParent:
    case FileSaveAncestor:
    case HotlistSaveHotlist:
    case HistorySaveLocal:
    case HistorySaveGlobal:
    case ExportAsSHelp:
    {
      /* Nothing to do at the moment, shouldn't be able to access */
      /* the option button gadget anyway...                       */

#ifndef REMOTE_HOTLIST

  savefile_item_changed_gripe:

#endif

      #ifdef TRACE

        erb.errnum = Utils_Error_Custom_Normal;

        sprintf(erb.errmess,
                "Shouldn't be using the option button in SaveFile dialogue for parent component 0x%x in savefile_item_changed!",
                pc);

        show_error_ret(&erb);

      #endif

      return 1;
    }
    break;

    #ifndef REMOTE_HOTLIST

      case MiscHotlistSaveObject:
      {
        hotlist_item * source = hotlist_find_selected_item();
        unsigned int   items  = hotlist_count_selected_items();

        alt_mhso = alt;

        if (items && source)
        {
          if (items == 1 && source->type == hl_url)
          {
            /* Saving a single hotlist item, so can do this as */
            /* a URI or ANT URL file.                          */

            ChkError(savefile_toggle_uri_or_url(idb->self_id));
          }
          else
          {
            /* Saving multiple items as HTML - no defined action */
            /* for the option button.                            */

            goto savefile_item_changed_gripe;
          }
        }
      }
      break;

    #endif

    case ExportAsDraw:
    {
      alt_ead = alt;

      ChkError(savefile_toggle_without_backgrounds_or_with(idb->self_id));
    }
    break;

    case ExportAsText:
    {
      alt_eat = alt;

      ChkError(savefile_toggle_embelished_or_not(idb->self_id));
    }
    break;

    case FileSaveFrameLocation:
    case FileSaveParentLocation:
    case FileSaveAncestorLocation:
    case ExportLink:
    {
      if (pc == ExportLink) alt_el   = alt;
      else                  alt_fsfl = alt;

      ChkError(savefile_toggle_uri_or_url(idb->self_id));
    }
    break;

    case ExportPicture:
    {
      HStream    * image = menus_document_opened_over();
      const char * src   = NULL;

      alt_ep = alt;

      if (image->style & IMG)             src = image->src;
      else if (image->tagno == TAG_INPUT) src = HtmlINPUTsrc(image);
      else                                src = HtmlOBJECTdata(image);

      ChkError(savefile_toggle_sprite_or_original(idb->self_id, src));
    }
    break;

    case ExportBackground:
    {
      char src[Limits_URL];

      alt_eb = alt;

      if (b->background_image == -1)
      {
        #ifndef TRACE

          return 0;

        #else

          erb.errnum = Utils_Error_Custom_Normal;

          StrNCpy0(erb.errmess,
                   "There is no background image on this page in savefile_item_changed.");

          show_error_ret(&erb);

          return 0;

        #endif
      }

      *src = 0;
      image_get_background_image_url(b, src, sizeof(src));

      ChkError(savefile_toggle_sprite_or_original(idb->self_id, src));
    }
    break;

    case LogSaveLog:
    {
      alt_log = alt;

      ChkError(savefile_toggle_all_or_selection(idb->self_id));
    }
    break;

    #ifdef TRACE

      default:
      {
        erb.errnum = 0;
        StrNCpy0(erb.errmess,
                 "Save dialogue origin not understood in savefile_item_changed.");

        show_error_ret(&erb);

        return 0;
      }
      break;

    #endif
  }

  return 1;
}

/**************************************************************/
/* savefile_alternative_selected()                            */
/*                                                            */
/* If the second of the two radios in a Save File dialogue is */
/* selected, or if there is an option button present instead  */
/* and it is itself selected, returns 1. Otherwise returns 0. */
/*                                                            */
/* Returns:    See above.                                     */
/*                                                            */
/* Assumes:    window_id holds the Object ID of a relevant    */
/*             Save file dialogue.                            */
/**************************************************************/

int savefile_alternative_selected(void)
{
  int  alt_set    = 0;
  int  try_radios = 0;
  BBox box;

  if (!window_id) return 0;

  /* Need to work out whether the option button or radio buttons */
  /* are present, and if so, which is visible at the moment and  */
  /* use that.                                                   */

  if (!gadget_get_bbox(0, window_id, SaveFileOption, &box))
  {
    /* If we can get the BBox, is it visible right now? */

    if (box.xmin >= box.xmax - box.xmin) try_radios = 1; /* No, so signal we should try the radios */
    else
    {
      /* Get the option button state */

      if (optionbutton_get_state(0, window_id, SaveFileOption, &alt_set)) alt_set = 0;
    }
  }

  /* Couldn't get the option button BBox, so try the radios */

  else try_radios = 1;

  /* If required, do similar things to the above with the radio buttons */

  if (try_radios)
  {
    if (!gadget_get_bbox(0, window_id, SaveFileRadio2, &box))
    {
      if (box.xmin < box.xmax - box.xmin)
      {
        if (radiobutton_get_state(0, window_id, SaveFileRadio2, &alt_set, NULL)) alt_set = 0;
      }
    }
  }

  return alt_set;
}

/**************************************************************/
/* savefile_text_uri_or_url()                                 */
/*                                                            */
/* Set the text in the radio buttons or option button of a    */
/* Save File dialogue giving the choice of saving a URL as a  */
/* URI or ANT URL file.                                       */
/*                                                            */
/* Parameters: Object ID of the relevant Save File dialogue.  */
/**************************************************************/

static _kernel_oserror * savefile_text_uri_or_url(ObjectId window)
{
  /* These can all fail silently if the gadget isn't present */

  optionbutton_set_label(0,
                         window,
                         SaveFileOption,
                         lookup_token("SaveFileOpURL:Save URL file",0,0));

  radiobutton_set_label (0,
                         window,
                         SaveFileRadio1,
                         lookup_token("SaveFileRaURI:URI format",0,0));

  radiobutton_set_label (0,
                         window,
                         SaveFileRadio2,
                         lookup_token("SaveFileRaURL:URL format",0,0));

  return 0;
}

/**************************************************************/
/* savefile_toggle_uri_or_url()                               */
/*                                                            */
/* Called when the option to save a URL as a URI or ANT URL   */
/* file is changed.                                           */
/*                                                            */
/* Parameters: Object ID of the relevant Save File dialogue.  */
/**************************************************************/

static _kernel_oserror * savefile_toggle_uri_or_url(ObjectId window)
{
  int set_url = savefile_alternative_selected();

  if (set_url) return savefile_set_filetype(window, SaveFileDrag, FileType_URL, 0);
  else         return savefile_set_filetype(window, SaveFileDrag, FileType_URI, 0);
}

/**************************************************************/
/* savefile_text_all_or_selection()                           */
/*                                                            */
/* Set the text in the radio buttons or option button of a    */
/* Save File dialogue giving the choice of saving either      */
/* everything or a selection.                                 */
/*                                                            */
/* Parameters: Object ID of the relevant Save File dialogue.  */
/**************************************************************/

static _kernel_oserror * savefile_text_all_or_selection(ObjectId window)
{
  /* These can all fail silently if the gadget isn't present */

  optionbutton_set_label(0,
                         window,
                         SaveFileOption,
                         lookup_token("SaveFileOpSel:Selection",0,0));

  radiobutton_set_label (0,
                         window,
                         SaveFileRadio1,
                         lookup_token("SaveFileRaAll:All",0,0));

  radiobutton_set_label (0,
                         window,
                         SaveFileRadio2,
                         lookup_token("SaveFileRaSel:Selection",0,0));

  return 0;
}

/**************************************************************/
/* savefile_toggle_all_or_selection()                         */
/*                                                            */
/* Called when the option to save a whole log file or a       */
/* selection is changed.                                      */
/*                                                            */
/* Parameters: Object ID of the relevant Save File dialogue.  */
/**************************************************************/

static _kernel_oserror * savefile_toggle_all_or_selection(ObjectId window)
{
  /* Really nothing to do here - set the file type just to make sure... */

  return savefile_set_filetype(window, SaveFileDrag, FileType_TEXT, 0);
}

/**************************************************************/
/* savefile_text_sprite_or_original()                         */
/*                                                            */
/* Set the text in the radio buttons or option button of a    */
/* Save File dialogue giving the choice of saving an image as */
/* a sprite or in its original format.                        */
/*                                                            */
/* Parameters: Object ID of the relevant Save File dialogue.  */
/**************************************************************/

static _kernel_oserror * savefile_text_sprite_or_original(ObjectId window)
{
  /* These can all fail silently if the gadget isn't present */

  optionbutton_set_label(0,
                         window,
                         SaveFileOption,
                         lookup_token("SaveFileOpOriginal:Save original image",0,0));

  radiobutton_set_label (0,
                         window,
                         SaveFileRadio1,
                         lookup_token("SaveFileRaSprite:Sprite format",0,0));

  radiobutton_set_label (0,
                         window,
                         SaveFileRadio2,
                         lookup_token("SaveFileRaOriginal:Original format",0,0));

  return 0;
}

/**************************************************************/
/* savefile_toggle_sprite_or_original()                       */
/*                                                            */
/* Called when the option to save an image as a sprite or in  */
/* its original format is changed.                            */
/*                                                            */
/* Parameters: Object ID of the relevant Save File dialogue.  */
/**************************************************************/

static _kernel_oserror * savefile_toggle_sprite_or_original(ObjectId window, const char * src)
{
  int set_original = savefile_alternative_selected();

  if (!set_original) return savefile_set_filetype(window, SaveFileDrag, FileType_SPR, 0);
  else
  {
    const char * dot = NULL;
    int          filetype;

    /* Try and determine the filetype from the URL of the image */

    if (src) dot = strrchr(src, '.');

    if (dot)
    {
      if (mimemap_extension_to_riscos(dot, &filetype)) filetype = FileType_DATA;
    }
    else filetype = FileType_DATA;

    return savefile_set_filetype(window, SaveFileDrag, filetype, 0);
  }
}

/**************************************************************/
/* savefile_text_without_backgrounds_or_with()                */
/*                                                            */
/* Set the text in the radio buttons or option button of a    */
/* Save File dialogue giving the choice of saving a Draw file */
/* with or without a background image.                        */
/*                                                            */
/* Parameters: Object ID of the relevant Save File dialogue.  */
/**************************************************************/

static _kernel_oserror * savefile_text_without_backgrounds_or_with(ObjectId window)
{
  /* These can all fail silently if the gadget isn't present */

  optionbutton_set_label(0,
                         window,
                         SaveFileOption,
                         lookup_token("SaveFileOpBack:With background",0,0));

  radiobutton_set_label (0,
                         window,
                         SaveFileRadio1,
                         lookup_token("SaveFileRaNoBack:No background",0,0));

  radiobutton_set_label (0,
                         window,
                         SaveFileRadio2,
                         lookup_token("SaveFileRaBack:With background",0,0));

  return 0;
}

/**************************************************************/
/* savefile_toggle_without_backgrounds_or_with()              */
/*                                                            */
/* Called when the option to save as a Draw file with or      */
/* without a background image is changed.                     */
/*                                                            */
/* Parameters: Object ID of the relevant Save File dialogue.  */
/**************************************************************/

static _kernel_oserror * savefile_toggle_without_backgrounds_or_with(ObjectId window)
{
  /* There's very little to do here presently */

  return savefile_set_filetype(window, SaveFileDrag, FileType_DRAW, 0);
}

/**************************************************************/
/* savefile_text_embelished_or_not()                          */
/*                                                            */
/* Set the text in the radio buttons or option button of a    */
/* Save File dialogue giving the choice of saving a text file */
/* with or without embelishments (references etc.).           */
/*                                                            */
/* Parameters: Object ID of the relevant Save File dialogue.  */
/**************************************************************/

static _kernel_oserror * savefile_text_embelished_or_not(ObjectId window)
{
  /* These can all fail silently if the gadget isn't present */

  optionbutton_set_label(0,
                         window,
                         SaveFileOption,
                         lookup_token("SaveFileOpEmbe:With embelishments",0,0));

  radiobutton_set_label (0,
                         window,
                         SaveFileRadio1,
                         lookup_token("SaveFileRaNoEmbe:No embelishments",0,0));

  radiobutton_set_label (0,
                         window,
                         SaveFileRadio2,
                         lookup_token("SaveFileRaEmbe:With embelishments",0,0));

  return 0;
}

/**************************************************************/
/* savefile_toggle_embelished_or_not()                        */
/*                                                            */
/* Called when the option to save as a text file with or      */
/* without embelishments is changed.                          */
/*                                                            */
/* Parameters: Object ID of the relevant Save File dialogue.  */
/**************************************************************/

static _kernel_oserror * savefile_toggle_embelished_or_not(ObjectId window)
{
  /* There's very little to do here presently */

  return savefile_set_filetype(window, SaveFileDrag, FileType_TEXT, 0);
}

/**************************************************************/
/* savefile_set_correct_extent()                              */
/*                                                            */
/* Ensure the width and height (in terms of the visible area  */
/* and actual extent) is correct according to the presence    */
/* of:                                                        */
/*                                                            */
/* SaveFileRightGapMarker SaveFileBottomGapMarker             */
/*                                                            */
/* Parameters: Object ID of the dialogue to alter;            */
/*                                                            */
/*             Pointer to a BBox describing the new size      */
/*             (xmax - xmin, ymax - ymin).                    */
/**************************************************************/

static _kernel_oserror * savefile_set_correct_extent(ObjectId window, BBox * ra1)
{
  WimpGetWindowStateBlock state;
  int                     open;
  BBox                    opt, ra2;

  /* Find out what the window extent should be */

  RetError(window_get_extent(0, window, &opt));

  /* Set the window extent ymin to the extent ymax minus the  */
  /* height; the height being the ymin of the OK button minus */
  /* the height of the SaveFileBottomGapMarker gadget. Set    */
  /* the width on a similar basis.                            */

  RetError(gadget_get_bbox(0, window, SaveFileBottomGapMarker, &ra2));
  opt.ymin = opt.ymax + ra1->ymin - (ra2.ymax - ra2.ymin);

  RetError(gadget_get_bbox(0, window, SaveFileRightGapMarker, &ra2));
  opt.xmax = opt.xmin + ra1->xmax + (ra2.xmax - ra2.xmin);

  RetError(window_set_extent(0, window, &opt));

  /* We need to ensure the window is opened to full size, but it may be */
  /* already open - so get the state first.                             */

  RetError(window_get_wimp_handle(0, window, &state.window_handle));
  RetError(wimp_get_window_state(&state));

  /* Remember if it is open or not */

  open = state.flags & WimpWindow_Open;

  /* Set the visible area to match the extent, extending */
  /* it to the right and downwards.                      */

  state.visible_area.xmax = state.visible_area.xmin + opt.xmax - opt.xmin;
  state.visible_area.ymin = state.visible_area.ymax - opt.ymax + opt.ymin;

  /* Show the window with these coordinates */

  RetError(wimp_open_window((WimpOpenWindowBlock *) &state));

  /* If it wasn't already open, close the window */

  if (!open) RetError(wimp_close_window(&state.window_handle));

  /* Finished. */

  return NULL;
}

/**************************************************************/
/* savefile_auto_width()                                      */
/*                                                            */
/* If the SaveFileAutoWidthMarker gadget (SaveFile.h) is      */
/* present, check the width of various text items in the Save */
/* File dialogue and auto-width other components to make the  */
/* dialogue fit the widest. The following components are      */
/* assumed to be present:                                     */
/*                                                            */
/* SaveFileRightGapMarker SaveFileBottomGapMarker             */
/*                                                            */
/* Parameters: Object ID of the dialogue to auto-width.       */
/**************************************************************/

static _kernel_oserror * savefile_auto_width(ObjectId window)
{
  BBox min,    max;
  BBox optbox, ra1box, ra2box, miscbox;

  char opt[Limits_SaveFile_Option];
  char ra1[Limits_SaveFile_Radios];
  char ra2[Limits_SaveFile_Radios];

  int  showing = 0;
  int  noopt   = 0;
  int  norad   = 0;

  int  width;
  int  margin;

  /* If we haven't got the auto width marker, we shouldn't resize */

  if (gadget_get_bbox(0, window, SaveFileAutoWidthMarker, &min)) return NULL;

  /* Use the right hand gap marker as a margin indicator */

  RetError(gadget_get_bbox(0, window, SaveFileRightGapMarker, &max));
  margin = (max.xmax - max.xmin) * 2;

  /* Use the bottom gap marker as a maximum width indicator */

  RetError(gadget_get_bbox(0, window, SaveFileBottomGapMarker, &max));

  /* Get the option and radio button label texts */

  if (
       optionbutton_get_label(0,
                              window,
                              SaveFileOption,
                              opt,
                              sizeof(opt),
                              NULL)
     )
     *opt = '\0';

  else opt[sizeof(opt) - 1] = '\0';

  if (
       radiobutton_get_label (0,
                              window,
                              SaveFileRadio1,
                              ra1,
                              sizeof(ra1),
                              NULL)
     )
     *ra1 = '\0';

  else ra1[sizeof(ra1) - 1] = '\0';

  if (
       radiobutton_get_label (0,
                              window,
                              SaveFileRadio2,
                              ra2,
                              sizeof(ra2),
                              NULL)
     )
     *ra2 = '\0';

  else ra2[sizeof(ra2) - 1] = '\0';

  /* Find the bounding boxes of the option and radio */
  /* button gadgets to see what is visible right now */

  if (gadget_get_bbox(0, window, SaveFileOption, &optbox)) noopt = 1;
  if (gadget_get_bbox(0, window, SaveFileRadio1, &ra1box)) norad = 1;
  if (gadget_get_bbox(0, window, SaveFileRadio2, &ra2box)) norad = 1;

  if      (!noopt && optbox.xmin < optbox.xmax - optbox.xmin) showing = 1;
  else if (!norad && ra1box.xmin < ra1box.xmax - ra1box.xmin) showing = 2;

  /* Minimum width comes from the auto width marker,  */
  /* but this includes the margin width which we want */
  /* to exclude for the moment.                       */

  width = min.xmax - min.xmin - margin;

  if (showing == 1)
  {
    int text;

    /* Showing the option button, so work out width of it */

    RetError(utils_text_width(opt, &text, 0));

    text += 64; /* Hack :-) - overestimate of the option button size itself plus gap between button and label */

    if (text > width) width = text;
  }
  else if (showing == 2)
  {
    int text1, text2;

    /* Showing the radio buttons, so work out width of them */

    RetError(utils_text_width(ra1, &text1, 0));
    RetError(utils_text_width(ra2, &text2, 0));

    text1 += 64; /* Magic number as for 'showing == 1' case above */
    text2 += 64;

    if (text1 > width) width = text1;
    if (text2 > width) width = text2;
  }

  if (width > max.xmax - max.xmin - margin) width = max.xmax - max.xmin - margin;

  /* We now know how wide things are to be. The writable gadget   */
  /* and option or radio buttons should be 'width', the draggable */
  /* icon should just move to stay centred, to start with.        */

  if (!noopt)
  {
    optbox.xmax = optbox.xmin + width;

    RetError(gadget_move_gadget(0, window, SaveFileOption, &optbox));
  }

  if (!norad)
  {
    ra1box.xmax = ra1box.xmin + width;
    ra2box.xmax = ra2box.xmin + width;

    RetError(gadget_move_gadget(0, window, SaveFileRadio1, &ra1box));
    RetError(gadget_move_gadget(0, window, SaveFileRadio2, &ra2box));
  }

  RetError(gadget_get_bbox(0, window, SaveFileWrit, &miscbox));

  miscbox.xmax = miscbox.xmin + width;

  RetError(gadget_move_gadget(0, window, SaveFileWrit, &miscbox));

  {
    int drag;

    RetError(gadget_get_bbox(0, window, SaveFileDrag, &miscbox));

    drag = miscbox.xmax - miscbox.xmin;

    miscbox.xmin = (width + margin - drag) / 2;
    miscbox.xmax = miscbox.xmin + drag;

    RetError(gadget_move_gadget(0, window, SaveFileDrag, &miscbox));
  }

  /* The OK and Cancel buttons - these have a 'margin' gap between */
  /* them, and the OK button should be 8 wider than Cancel (it's   */
  /* the default action button, and has a thicker border). 16 is   */
  /* the technically correct value, but it doesn't look good!      */

  {
    int button;

    button = (width - margin - 8) / 2;

    RetError(gadget_get_bbox(0, window, SaveFileCancel, &ra1box));
    RetError(gadget_get_bbox(0, window, SaveFileOK,     &ra2box));

    ra1box.xmax = ra1box.xmin + button;

    ra2box.xmin = ra1box.xmax + margin;
    ra2box.xmax = ra2box.xmin + button + 8;

    RetError(gadget_move_gadget(0, window, SaveFileCancel, &ra1box));
    RetError(gadget_move_gadget(0, window, SaveFileOK,     &ra2box));
  }

  /* Finally, set the window width */

  {
    WimpGetWindowStateBlock state;
    int                     open;

    /* Find out what the window vertical extent should be */

    RetError(window_get_extent(0, window, &miscbox));

    /* Set the width */

    miscbox.xmax = miscbox.xmin + width + margin;

    RetError(window_set_extent(0, window, &miscbox));

    /* We need to ensure the window is opened to full size, but it may be */
    /* already open - so get the state first.                             */

    RetError(window_get_wimp_handle(0, window, &state.window_handle));
    RetError(wimp_get_window_state(&state));

    /* Remember if it is open or not */

    open = state.flags & WimpWindow_Open;

    /* Set the visible area to match the extent, extending */
    /* it to the right and downwards.                      */

    state.visible_area.xmax = state.visible_area.xmin + miscbox.xmax - miscbox.xmin;
    state.visible_area.ymin = state.visible_area.ymax - miscbox.ymax + miscbox.ymin;

    /* Show the window with these coordinates */

    RetError(wimp_open_window((WimpOpenWindowBlock *) &state));

    /* If it wasn't already open, close the window */

    if (!open) RetError(wimp_close_window(&state.window_handle));
  }

  /* Finished. */

  return NULL;
}
@


1.21
log
@  Huge pile of changes bringing relatively ancient sources up to date.
Detail:
  This check-in includes Phoenix version 2.11 (26-Apr-2005); only the
  debug and JavaScript builds of Phoenix have been tested and resources
  will definitely be out of date for other versions. The various "!..."
  scripts have been updated to require a minimum of 2MB with no maximum
  limit for building, as CC 5.60 is quite RAM hungry.
Admin:
  Phoenix 2.11 JS builds OK, works reasonably well. Many outstanding
  issues of course, as this is a very outdated browser now.

Version 2.09. Tagged as 'Browse-2_09'
@
text
@d64 1
d114 2
a115 24
static int               savefile_drag_ended                         (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int               savefile_ok                                 (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int               savefile_cancel                             (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

static _kernel_oserror * savefile_switch_to_normal                   (ObjectId window);
static _kernel_oserror * savefile_switch_to_option                   (ObjectId window);
static _kernel_oserror * savefile_switch_to_radios                   (ObjectId window);

static _kernel_oserror * savefile_set_items                          (ObjectId window, int selected);

static int               savefile_option_changed                     (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int               savefile_radio_changed                      (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int               savefile_item_changed                       (IdBlock * idb);

static _kernel_oserror * savefile_text_uri_or_url                    (ObjectId window);
static _kernel_oserror * savefile_toggle_uri_or_url                  (ObjectId window);
static _kernel_oserror * savefile_text_all_or_selection              (ObjectId window);
static _kernel_oserror * savefile_toggle_all_or_selection            (ObjectId window);
static _kernel_oserror * savefile_text_sprite_or_original            (ObjectId window);
static _kernel_oserror * savefile_toggle_sprite_or_original          (ObjectId window, const char * src);
static _kernel_oserror * savefile_text_without_backgrounds_or_with   (ObjectId window);
static _kernel_oserror * savefile_toggle_without_backgrounds_or_with (ObjectId window);
static _kernel_oserror * savefile_text_embelished_or_not             (ObjectId window);
static _kernel_oserror * savefile_toggle_embelished_or_not           (ObjectId window);
d117 27
a143 2
static _kernel_oserror * savefile_set_correct_extent                 (ObjectId window, BBox * ra1);
static _kernel_oserror * savefile_auto_width                         (ObjectId window);
d188 1
d611 1
a611 1
      ChkError(savefile_set_leafname_from_url(idb->self_id, SaveFileWrit, browser_current_url(b)));
d623 14
d641 1
a641 1
      ChkError(savefile_set_leafname_from_url(idb->self_id, SaveFileWrit, browser_current_url(b)));
d657 1
a657 1
      ChkError(savefile_set_leafname_from_url(idb->self_id, SaveFileWrit, browser_current_url(b)));
d695 1
a695 1
      ChkError(savefile_set_leafname_from_url(idb->self_id, SaveFileWrit, url));
d738 1
a738 1
      ChkError(savefile_set_leafname_from_url(idb->self_id, SaveFileWrit, link->anchor));
d922 3
a924 1
/* savefile_set_leafname()                                    */
d937 20
a956 4
/*             with.                                          */
/**************************************************************/

_kernel_oserror * savefile_set_leafname(ObjectId object, ComponentId component, char * leaf)
d959 2
d965 1
d999 62
d1063 1
a1063 1
  if (strlen(path) + strlen(leaf) + 1 > sizeof(path))
d1068 1
a1068 1
    if (strlen(leaf) + 1 <= sizeof(path)) strcpy(path, leaf);
d1070 5
a1074 1
  else strcat(path, leaf);
d1089 1
a1089 1
/* savefile_set_leafname_from_url()                           */
d1091 5
a1095 2
/* As savefile_set_leafname, but works out the leaf from a    */
/* given URL.                                                 */
d1101 2
a1102 1
/*             Pointer to a null terminated URL to work with. */
d1105 38
a1142 1
_kernel_oserror * savefile_set_leafname_from_url(ObjectId object, ComponentId component, char * url)
d1148 1
a1148 1
  urlutils_leafname_from_url(url, leaf, sizeof(leaf));
d1152 25
a1176 1
  return savefile_set_leafname(object, component, leaf);
d1366 11
a1509 1
  int               ok  = 0;
a1554 1
        if (!e) ok = 1;
a1565 1
        if (!e) ok = 1;
d1577 16
a1592 1
        if (!e) ok = 1;
a1603 1
        if (!e) ok = 1;
a1623 1
          if (!e) ok = 1;
a1635 1
          if (!e) ok = 1;
a1648 2

        if (!e) ok = 1;
a1660 2

        if (!e) ok = 1;
a1671 1
        if (!e) ok = 1;
a1682 1
        if (!e) ok = 1;
a1701 1
              ok = 1;
a1710 1
              ok = 1;
a1726 1
      if (!e) ok = 1;
a1732 1
      if (!e) ok = 1;
@


1.20
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@d1242 1
a1242 1
        size  = save_log_size(savefile_log, alt);
@


1.19
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@a49 5
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

@


1.18
log
@Long overdue check-in of intermediate browser build, from continued "out
of hours" work. Forgot to add a few files last time too.

List dialogue box handler complete, and exclusion lists implemented
within the main browser code. Full documentation in Choices file.
Save routine knows all about it but is now getting very slow - must
come up with a better scheme; for now, it puts the hourglass on...

StripExtensions option controls auto stripping of filename extensions.

More sensible ancestor / frame selection for keyboard shortcut items
and the save dialogues - having selected a frame won't lock you into
it for F3 and related shortcuts now (input focus in URL writable ->
get ancestor details, input focus in frame -> get frame details). F4
works in frames. F5 now generally present for 'view source' with a
corresponding menu entry in the File menu.

Odd thing in later Res files; there's no action set for Adjust clicks
on the main ToolAction items in the button bar. Very odd. Nothing
appears to be set in v2.07 either, yet adjust-click works. Even
stranger. Anyway, added in the relevant event details (same as for
Select click in all cases) and this fixes the problem.

Background colours in the TABLE tag ignored the "don't print any
backgrounds" Print Style setting. Fixed. Meanwhile, the "black
text with no backgrounds" option wasn't getting this right either;
fixed this also.

Event logging implemented; HTTP errors and script output via.
window.print extension. No internal error output yet.

Faith:Never behaviour extended. If ever a server sends something with
no content type or an unhandleable type, the browser will try and get a
filetype from the URL. If it gets text or HTML, it'll render the file.
Else it'll save it. Hacks around IIS 4's lack of a content type field
in the Marketeye login stuff, and similar other slightly broken sites.
@
text
@d15 18
a32 17
/***************************************************/
/* File   : SaveFile.c                             */
/*                                                 */
/* Purpose: Handle the Save File dialogue (actual  */
/*          file saving is done in Save.c). Relies */
/*          on there being only one Save File      */
/*          dialogue open at a time (it is a       */
/*          shared object).                        */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 03-Sep-97: Created.                    */
/*                                                 */
/*          08-Dec-97: Added code for option or    */
/*                     radio buttons and auto      */
/*                     widthing of the dialogue.   */
/***************************************************/
d37 2
a38 1
#include "swis.h"
d40 1
a40 1
#include "HTMLLib.h" /* HTML library API, Which will include html2_ext.h, tags.h and struct.h */
d42 3
a44 3
#include "wimp.h"
#include "wimplib.h"
#include "event.h"
d46 8
a53 3
#include "toolbox.h"
#include "window.h"
#include "gadgets.h"
a54 1
#include "svcprint.h"
d146 12
a157 14
/*************************************************/
/* savefile_open_for()                           */
/*                                               */
/* Creates and opens a Save File dialogue for a  */
/* given browser, opening near the pointer.      */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             which is the ancestor of the      */
/*             dialogue;                         */
/*                                               */
/*             A savefile_open_reason describing */
/*             why the dialogue is being opened  */
/*             (see SaveFile.h).                 */
/*************************************************/
d202 8
a209 10
/*************************************************/
/* savefile_raise_from_shortcut()                */
/*                                               */
/* For several event codes, open the Save File   */
/* dialogue box with parent object and component */
/* ID set up accordingly.                        */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d385 9
a393 11
/*************************************************/
/* savefile_to_be_shown()                        */
/*                                               */
/* Fills in the Save File dialogue prior to      */
/* being shown, on the basis of the parent       */
/* component ID and ancestor object ID in the    */
/* event.                                        */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d907 16
a922 18
/*************************************************/
/* savefile_set_leafname()                       */
/*                                               */
/* Sets the leafname in the Save File dialogue   */
/* to a given value, preserving whatever path    */
/* component may already have been present.      */
/* Any last save path recorded by the save       */
/* routines in Save.c will take precedence over  */
/* an existing dialogue path, though.            */
/*                                               */
/* Parameters: Object ID of the dialogue;        */
/*                                               */
/*             Component ID of the writable      */
/*             gadget;                           */
/*                                               */
/*             Pointer to a null terminated leaf */
/*             to work with.                     */
/*************************************************/
d987 12
a998 14
/*************************************************/
/* savefile_set_leafname_from_url()              */
/*                                               */
/* As savefile_set_leafname, but works out the   */
/* leaf from a given URL.                        */
/*                                               */
/* Parameters: Object ID of the dialogue;        */
/*                                               */
/*             Component ID of the writable      */
/*             gadget;                           */
/*                                               */
/*             Pointer to a null terminated URL  */
/*             to work with.                     */
/*************************************************/
d1013 24
a1036 29
/*************************************************/
/* savefile_set_filetype()                       */
/*                                               */
/* Sets the sprite of the draggable object in    */
/* the Save File dialogue according to the given */
/* filetype, and records that filetype in        */
/* savefile_type (unless asked not to).          */
/*                                               */
/* If the sprite cannot be found in the Wimp     */
/* sprite pool, 'file_xxx' is used instead.      */
/*                                               */
/* Parameters: Object ID of the dialogue;        */
/*                                               */
/*             Component ID of the draggable     */
/*             gadget;                           */
/*                                               */
/*             The filetype;                     */
/*                                               */
/*             1 to *not* set savefile_type to   */
/*             the filetype - this would be used */
/*             if (for example) this function    */
/*             was being called for a dialogue   */
/*             similar to, but not the same as   */
/*             the Save File dialogue (e.g. Save */
/*             Object, where several can exist   */
/*             at once); if for a 'genuine' Save */
/*             File dialogue, you *must* pass    */
/*             zero here.                        */
/*************************************************/
d1087 8
a1094 9
/*************************************************/
/* savefile_drag_ended()                         */
/*                                               */
/* Handle Draggable_DragEnded events from the    */
/* Save File dialogue draggable sprite gadget.   */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d1321 8
a1328 9
/*************************************************/
/* savefile_ok()                                 */
/*                                               */
/* Handles clicks on the 'OK' button in the      */
/* Save File dialogue.                           */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d1580 8
a1587 9
/*************************************************/
/* savefile_cancel()                             */
/*                                               */
/* Handles clicks on the 'Cancel' button in the  */
/* Save File dialogue                            */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d1608 12
a1619 14
/*************************************************/
/* savefile_close()                              */
/*                                               */
/* If the Save File dialogue is opened, this     */
/* will close it.                                */
/*                                               */
/* Parameters: An object ID, or 0. If not zero,  */
/*             the ID must match the ancestor    */
/*             recorded when the dialogue was    */
/*             opened or no action is taken.     */
/*                                               */
/*             0 to close the dialogue, 1 to do  */
/*             everything except that.           */
/*************************************************/
d1652 18
a1669 20
/*************************************************/
/* savefile_return_dialogue_info()               */
/*                                               */
/* Returns information on the Save File dialogue */
/* and its ancestor.                             */
/*                                               */
/* Parameters: Pointer to an ObjectId, in which  */
/*             the ID of the dialogue is placed; */
/*                                               */
/*             Pointer to an ObjectId, in which  */
/*             the ID of the ancestor window is  */
/*             placed.                           */
/*                                               */
/* Returns:    See parameters list, and note     */
/*             that the returned values will be  */
/*             0 and 0 if the Save File dialogue */
/*             is closed.                        */
/*                                               */
/* Assumes:    Either pointer may be NULL.       */
/*************************************************/
d1677 8
a1684 9
/*************************************************/
/* savefile_switch_to_normal()                   */
/*                                               */
/* Move the radio buttons or option buttons from */
/* view in the Save File dialogue, if either is  */
/* present.                                      */
/*                                               */
/* Parameters: Object ID of the dialogue.        */
/*************************************************/
d1767 8
a1774 9
/*************************************************/
/* savefile_switch_to_option()                   */
/*                                               */
/* Move the option button into the Save File     */
/* dialogue, moving out the radio buttons if     */
/* present.                                      */
/*                                               */
/* Parameters: Object ID of the dialogue.        */
/*************************************************/
d1855 8
a1862 9
/*************************************************/
/* savefile_switch_to_radios()                   */
/*                                               */
/* Move the radio buttons into the Save File     */
/* dialogue, moving out the option button if     */
/* present.                                      */
/*                                               */
/* Parameters: Object ID of the dialogue.        */
/*************************************************/
d1949 12
a1960 15
/*************************************************/
/* savefile_set_items()                          */
/*                                               */
/* Set the radio buttons or option button in a   */
/* Save File dialogue, if present, to the given  */
/* state.                                        */
/*                                               */
/* Parameters: Object ID of the dialogue;        */
/*                                               */
/*             1 to tick the option box or       */
/*             select the second of the two      */
/*             radios - 0 to untick the option   */
/*             box or select the first of the    */
/*             two radios.                       */
/*************************************************/
d1972 8
a1979 9
/*************************************************/
/* savefile_option_changed()                     */
/*                                               */
/* Called when the option button in a Save File  */
/* dialogue (if any) is toggled.                 */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d1986 8
a1993 9
/*************************************************/
/* savefile_radio_changed()                      */
/*                                               */
/* Called when the radio buttons in a Save File  */
/* dialogue (if any) are toggled.                */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d2000 10
a2009 11
/*************************************************/
/* savefile_item_changed()                       */
/*                                               */
/* Called when either one of the two radios that */
/* can appear in a Save File dialogue, or the    */
/* option button that can appear, is used.       */
/*                                               */
/* Parameters: Pointer an IdBlock from the       */
/*             Toolbox event that was raised by  */
/*             the button(s).                    */
/*************************************************/
d2204 12
a2215 14
/*************************************************/
/* savefile_alternative_selected()               */
/*                                               */
/* If the second of the two radios in a Save     */
/* File dialogue is selected, or if there is     */
/* an option button present instead and it is    */
/* itself selected, returns 1. Otherwise returns */
/* 0.                                            */
/*                                               */
/* Returns:    See above.                        */
/*                                               */
/* Assumes:    window_id holds the Object ID of  */
/*             a relevant Save file dialogue.    */
/*************************************************/
d2262 9
a2270 11
/*************************************************/
/* savefile_text_uri_or_url()                    */
/*                                               */
/* Set the text in the radio buttons or option   */
/* button of a Save File dialogue giving the     */
/* choice of saving a URL as a URI or ANT URL    */
/* file.                                         */
/*                                               */
/* Parameters: Object ID of the relevant Save    */
/*             File dialogue.                    */
/*************************************************/
d2294 8
a2301 9
/*************************************************/
/* savefile_toggle_uri_or_url()                  */
/*                                               */
/* Called when the option to save a URL as a URI */
/* or ANT URL file is changed.                   */
/*                                               */
/* Parameters: Object ID of the relevant Save    */
/*             File dialogue.                    */
/*************************************************/
d2311 9
a2319 11
/*************************************************/
/* savefile_text_all_or_selection()              */
/*                                               */
/* Set the text in the radio buttons or option   */
/* button of a Save File dialogue giving the     */
/* choice of saving either everything or a       */
/* selection.                                    */
/*                                               */
/* Parameters: Object ID of the relevant Save    */
/*             File dialogue.                    */
/*************************************************/
d2343 8
a2350 9
/*************************************************/
/* savefile_toggle_all_or_selection()            */
/*                                               */
/* Called when the option to save a whole log    */
/* file or a selection is changed.               */
/*                                               */
/* Parameters: Object ID of the relevant Save    */
/*             File dialogue.                    */
/*************************************************/
d2359 9
a2367 11
/*************************************************/
/* savefile_text_sprite_or_original()            */
/*                                               */
/* Set the text in the radio buttons or option   */
/* button of a Save File dialogue giving the     */
/* choice of saving an image as a sprite or in   */
/* its original format.                          */
/*                                               */
/* Parameters: Object ID of the relevant Save    */
/*             File dialogue.                    */
/*************************************************/
d2391 8
a2398 9
/*************************************************/
/* savefile_toggle_sprite_or_original()          */
/*                                               */
/* Called when the option to save an image as a  */
/* sprite or in its original format is changed.  */
/*                                               */
/* Parameters: Object ID of the relevant Save    */
/*             File dialogue.                    */
/*************************************************/
d2424 9
a2432 11
/*************************************************/
/* savefile_text_without_backgrounds_or_with()   */
/*                                               */
/* Set the text in the radio buttons or option   */
/* button of a Save File dialogue giving the     */
/* choice of saving a Draw file with or without  */
/* a background image.                           */
/*                                               */
/* Parameters: Object ID of the relevant Save    */
/*             File dialogue.                    */
/*************************************************/
d2456 8
a2463 10
/*************************************************/
/* savefile_toggle_without_backgrounds_or_with() */
/*                                               */
/* Called when the option to save as a Draw file */
/* with or without a background image is         */
/* changed.                                      */
/*                                               */
/* Parameters: Object ID of the relevant Save    */
/*             File dialogue.                    */
/*************************************************/
d2472 9
a2480 11
/*************************************************/
/* savefile_text_embelished_or_not()             */
/*                                               */
/* Set the text in the radio buttons or option   */
/* button of a Save File dialogue giving the     */
/* choice of saving a text file with or without  */
/* embelishments (references etc.).              */
/*                                               */
/* Parameters: Object ID of the relevant Save    */
/*             File dialogue.                    */
/*************************************************/
d2504 8
a2511 9
/*************************************************/
/* savefile_toggle_embelished_or_not()           */
/*                                               */
/* Called when the option to save as a text file */
/* with or without embelishments is changed.     */
/*                                               */
/* Parameters: Object ID of the relevant Save    */
/*             File dialogue.                    */
/*************************************************/
d2520 14
a2533 17
/*************************************************/
/* savefile_set_correct_extent()                 */
/*                                               */
/* Ensure the width and height (in terms of the  */
/* visible area and actual extent) is correct    */
/* according to the presence of:                 */
/*                                               */
/* SaveFileRightGapMarker                        */
/* SaveFileBottomGapMarker                       */
/*                                               */
/* Parameters: Object ID of the dialogue to      */
/*             alter;                            */
/*                                               */
/*             Pointer to a BBox describing the  */
/*             new size (xmax - xmin, ymax -     */
/*             ymin).                            */
/*************************************************/
d2587 13
a2599 16
/*************************************************/
/* savefile_auto_width()                         */
/*                                               */
/* If the SaveFileAutoWidthMarker gadget         */
/* (SaveFile.h) is present, check the width of   */
/* various text items in the Save File dialogue  */
/* and auto-width other components to make the   */
/* dialogue fit the widest. The following        */
/* components are assumed to be present:         */
/*                                               */
/* SaveFileRightGapMarker                        */
/* SaveFileBottomGapMarker                       */
/*                                               */
/* Parameters: Object ID of the dialogue to      */
/*             auto-width.                       */
/*************************************************/
@


1.17
log
@Everyone else seems to be checking lots of stuff in lately, so I've
decided to join in. This is an intermediate check-in and so not all
resources etc. will be up to date. You should be able to make Phoenix
and a debug build out of it. As a reminder, to make a JavaScript build:

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean. This now strips dynamic dependencies from the MakeFile
   automatically, to save you having to do it yourself.
 * Run one of the TaskObey files with the "J" suffix, e.g. !DeskBrwsJ -
   this uses the same .o directory for object files and exports to the
   same position in the Targets directory as the non-JavaScript build,
   but it does produce a unique binary in 'abs' and symbols table in
   'syms'.
 * Sourcing an appropriate !Run (with increased WimpSlot value), !Boot
   and About resource is done automatically.
 * Some, but not all of the !xxxD (debug) TaskObey files will make
   JavaScript versions in passing - check the JSUFFIX value on the Make
   command line parameters in the file.

This'll only work on RISC OS 3.1 due to the use of MemLib.

Here's the change list:

Included MNG icons in sprites files; added Sprites23 for some builds.
Added in ANT URL file icon (b28) derived from URI file icon, because
the Save dialogue can need it.

No, you do *not* need to define the same keyboard shortcuts in each
frame since the ancestor keeps the input focus and we've basically
dropped non-nested Wimp support. Maintaining no less than 4 lists of
identical shortcuts was a pain. Some Res files now only have the
lists in the main browser window and button bar objects (these two
are both required still).

Ursula build Markers button arrangement changed from 1x3 horizontal to
2x2 tilted, as in Phoenix, by popular demand.

Couple of hotlist bugs fixed; dragging an item and deleteing it with
Ctrl+X didn't terminate the drag, and deleteting an item underneath a
menu opened for it didn't close the menu.

'SendReferer' option added to all Choices files, all set to 'always'.
Put just beneath 'Clone' as it refers to header items, though really,
both Clone and SendReferer should probably be in the "Fetch controls"
section rather than "Multiuser environments and proxying"! Front-end
control of this is available.

In image_export_original, save_save_source, save_transfer_source and
save_save_object, flex_set_budge(0) was called to lock the heap but the
return value wasn't stored. flex_set_budge(1) was then used to unlock
the heap. All calls now remember and restore the old value, which is
both safer in case one calls another and allows the flex_set_budge
call in Main.c to have an application-wide meaning, as intended.

Some restructuring to the data load and RAM transfer sections of
Protocols.c; remote hotlist builds wouldn't allow files to be loaded
to browser windows before, and can now drop URL, URI or text files to
the Open URL dialogue.

New option "MinimumFontSize", lets the 'size' attribute of the 'font'
element be overridden. Default value is 1, to allow the full range of
values for the attribute. Setting to 7, for example, would give font
size 7 text at all times. Another new option, "ToggleOnXOnly", to
make Toggle Size only extend the window vertically (with Ctrl then
being used to toggle to genuine full size, rather than vice versa).
All Choices files updated to hold both of these options; only the
first has front-end control available (see debug build Res file).

JavaScript Document object exists; frames array etc. working. Can now
just about use "http://www.acorn.com/~ahodgkin/jschain/" but it does
abort after a bit - problems with frames again, I suspect. Is is pretty
slow, too. Can now press Escape to terminate a script.

Main.c erroneously referred to Controls file entry "StopWebServe" as
"StopWebProxy". Fixed.

Keyboard shortcuts to raise SaveFile are now possible in a general sense;
the code before was in the ToBeShown handler and just checked for a parent
component of -1. It then assumed "save frame HTML source". Now there's the
savefile_raise_from_shortcut function, which together with the seven new
event codes in SaveFile.h allows saving of HTML source and frame location,
export of links, images, backgrounds and the page as text or draw, to all
be invoked by keyboard shortcuts. Some Res files have some of these defined.

In reformat_check_height, the first check to see if setpara should be set
references a field in tpLast without checking if it is NULL. Whilst the
'line > 0' check should mean that tpLast wasn't NULL anyway, a direct
call to the function from outside of the reformatter might have tripped
up on this - the check for tpLast != NULL is now made.

Adjust-click on close icon in window showing file: URL attempts to open
the parent Filer window.

Reformatter used to try and find a selectable token if keyboard control
was enabled in a really stupid place - could make reformatting become
very slow if no selectables were present, especially if the page had a
few tables on it. Preprocessor now does this (since it goes through all
of the tokens anyway), the reformatter just doing a last check to ensure
no frames have obscured the selectable and if so, it tries to move it.
Done in the reformatter as generating a line array implies the data really
is visible.

Ctrl+Tab URL completion now builds a full list of matches from the hotlist
and history and can cycle through them (Ctrl+Shift+Tab stepping backwards).

Will give a real error rather than just "Data Abort" if it goes wrong
now. Someone somewhere is setting bit 30 of the error which confused
the replacement signal handler. Flag bits are now masked off (as they
should've been to start with).
@
text
@d54 1
d78 1
d108 1
d128 2
d221 6
a229 1
  else if (idb->parent_id != NULL_ObjectId) source = idb->parent_id;
d239 2
a240 1
       || !b
a248 2
    default: return 0; break;

d257 5
a261 1
      if (b->selected_frame) b = b->selected_frame;
d356 1
a356 1
    default:
d358 1
a358 1
      pc = NULL_ObjectId;
d361 2
d378 1
a378 1
                               b->self_id,
d503 13
d517 4
a520 1
      ok = 1;
d533 4
a536 1
        ok = 1;
d567 4
a570 1
          ok = 1;
d601 2
d618 2
a619 2

      ok = 1;
d635 2
a636 2

      ok = 1;
d649 2
a650 2

      ok = 1;
d688 2
a689 2

      ok = 1;
d733 2
a734 2

      ok = 1;
d818 2
a819 2

      ok = 1;
d862 2
a863 2

      ok = 1;
d1249 15
d1494 12
d1660 1
d2201 8
d2339 51
@


1.16
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d194 175
d387 1
d412 7
a418 1
  ChkError(toolbox_get_client_handle(0, idb->ancestor_id, (void *) &b));
d426 5
a430 3
      /* If the dialogue was raised directly from a keyboard shortcut, */
      /* (hmm, preferable to go through an event...) want to save the  */
      /* current page source.                                          */
d637 1
d742 23
d1130 1
d1402 1
@


1.15
log
@Programming warehouse link removed from all hotlists - the page has gone.

Some compile-time hacks in place to use MemLib, a dynamic area based
malloc replacement which shrinks its heap when possible. All builds
have these switched off at the moment. Seemed to work with just Browse,
though there would be problems with message blocks stored in dynamic
areas because of the Wimp's '&3800000' check - however, it failed when
HTMLLib was made to use it, too. Don't know why yet.

ItemInfo.[c/h] source added, with Res file additions for testbed Browse
and Phoenix.

Small fetch windows now work properly regardless of toolbar settings
in the Choices.

Reload now reloads all images too, rather than only reloading them for
as long as the main page was being fetched.

Added a simple 'Find' facility.

Realised that event handlers in eventlib are called in reverse order
of registration, so the miscellaneous event handler is now registered
first rather than last.

Multiuser code added (most only active if SINGLE_USER is undefined). As
part of this, hotlist code now knows about read-only items (done for the
Customer-style 'Resources' file, but works generally anyway).
handle_add_hotlist doesn't try to save the hotlist itself anymore (the
hotlist_add function does all that through hotlist_modified anyway).

Customer build Choices and Controls updated slightly (e.g. ClaimHelp
off, hotlist to save on quit only).

Customer build now uses Phoenix-style buttons. Sprites files which
worked at the time (but will probably be out of date now) and included
most of the original Customer-style sprites are in
'Utils.Icons.Customer'.

Choices, Messages and Res files for all builds now stripped down to only
single user items or single plus multiuser for Customer build and testbed
build. Before, all contained a few multiuser bits in at least the Choices
file if not more.

Grammatical error ("Fetching frames contents" (sic.)) corrected in
default message, Toolbars.c, and all of the Messages files.

Customer build brought back to a servicable level (including
implementation of the Find dialogue box with animation and fixing
up authorisation and 'Stop' state in the tristate). Quite a few
missing #ifndef REMOTE_HOTLIST bits from hotlist code added...

Customer build will not use <Choices$Write> or Boot:Choices for any
file finding now. UseProxy defaults to 'yes', MaxImages to 2. Res
file includes Proxy Address setting (save_save_choices() now writes
the ProxyAddress line).
@
text
@d65 1
d101 1
d129 2
d402 17
d421 1
a421 1
      ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, FileType_TEXT, 0));
d730 8
a737 1
  /* Set the value */
d739 1
a739 4
  return writablefield_set_value(0,
                                 object,
                                 component,
                                 path);
d935 1
a935 1
      if (is_known_browser(savefile_browser)) size = savetext_text_size(savefile_browser);
d951 11
d1099 2
a1100 1
  leaf = strrchr(path, '.');
d1138 1
a1138 1
        e = savetext_save_text(savefile_browser, path);
d1156 12
d1790 1
a1790 1
    case ExportAsText:
d1856 8
d2174 51
@


1.14
log
@The '3F6C0' abort fixed; reformat_left_margin didn't cope with a NULL
cell pointer. This only happened if the image library tried to deal with
an image in a table cell which wasn't properly dealt with by the table
systems yet, for whatever reason. Rare, but persistent once it started
happening because it depended on the value of the FIQ vector!

Put function header comments in SaveFile.c, at last.

Messages files now read version 2.01, 23 Feb 1998.
@
text
@d93 11
a103 6
static int alt_mhso = 0; /* MiscHotlistSaveObject  */
static int alt_ead  = 0; /* ExportAsDraw           */
static int alt_fsfl = 0; /* FrameSaveFrameLocation */
static int alt_el   = 0; /* ExportLink             */
static int alt_ep   = 0; /* ExportPicture          */
static int alt_eb   = 0; /* ExportBackground       */
d1187 1
a1187 1
        e = hotlist_save_hotlist(path, 0);
d1214 1
a1214 1
            e = hotlist_save_hotlist(path, 1);
d1746 5
a1750 1
savefile_item_changed_gripe:
d1768 6
a1773 4
    case MiscHotlistSaveObject:
    {
      hotlist_item * source = hotlist_find_selected_item();
      unsigned int   items  = hotlist_count_selected_items();
d1775 1
a1775 1
      alt_mhso = alt;
d1777 1
a1777 3
      if (items && source)
      {
        if (items == 1 && source->type == hl_url)
d1779 4
a1782 2
          /* Saving a single hotlist item, so can do this as */
          /* a URI or ANT URL file.                          */
d1784 6
a1789 6
          ChkError(savefile_toggle_uri_or_url(idb->self_id));
        }
        else
        {
          /* Saving multiple items as HTML - no defined action */
          /* for the option button.                            */
d1791 2
a1792 1
          goto savefile_item_changed_gripe;
d1795 3
a1797 2
    }
    break;
@


1.13
log
@Check for WindowManager 3.97 and ensure Unicode$Path is set in all
!Run[D] files, don't set the Alias$@@PrintType_FF4 variable, and updated
Customer build ROM obey file variants. Various other changes to
the Run files for new module versions, updated paths to support
new positions of choices, hotlist and histories (see later), etc.

!Sprites[22] files hold small !app icons for some variants, and
an ic_browse sprite. Some variants now have a Sprites and Sprites22
file instead of just Sprites, with the former containing various
mode 12 or 15 specific sprites.

Text files dragged to the URL writable are treated as ANT URL files. This
relies on URLBarWrit (Toolbars.h) being a unique ID, which it should be,
but beware of the Hotlist and Choices numberspaces...

INPUT TYPE=BUTTON supported. Form items without a FORM tag are now shown
(as MSIE 4, but not NN 4).

'*', '-', '@@', '_' and '.' are not escaped when submitting forms now. The
Web interface to the IMDb now works.

INPUT TYPE=HIDDEN items will not affect the line height anymore - so
http://www.hotmail.com/ now has correctly aligned writable icons, for
example. Similarly, TAG_FORM and TAG_FORM_END items could push up
line height and don't anymore.

HRs with a specified pixel width will now influence the size of a table
cell (they didn't before).

BRs now checked by tagno field when the browser needs to know something
was an actual BR tag rather than just a line break signal, and by the
style bit entry when only the indication of a line break is required.

Table widths of 0 or 0% are ignored.

Trace.c updated to report height and background fields in a table_stream.

fm_putsl() writes a terminator into the string; the Forms.c routines were
calling this for displaying INPUT TYPE=PASSWORD fields using the FE_PassCode
literal string (a line of stars). This write into a read only data area
would make the debugger fault the access. A local char array is now used
instead, to get round this (note the use of var[]=literal rather than
var[sizeof(literal)]; strcpy(var, literal) due to some weird compiler bug
that copies the wrong thing into 'var' under some (undefined...)
circumstances).

Text areas don't scroll back to the top line when clicked in anymore;
single line writables don't scroll back to the left either. When
reentering a text area from 'above', the caret appears at the top line
rather than 'somewhere further down'...

ARROWS_MOVE_OUT compile time option at the top of Forms.c defines whether
you must press Tab/Shift+Tab to move between writable fields in forms or
if up/down will drop out of them, though if keyboard control is on this
is enforced (or you get trapped inside the form!).

urlutils_filetype_from_url now uses MimeMap module.

If fetcher is told a page is text, it'll check for a filename extension and
may choose to use this instead (e.g. it may find it's HTML instead). This
is to try and get around duff servers... (e.g. http://www.batalarms.co.uk/).

Save dialogues shouldn't flicker when options that don't change the
filetype are selected (before, the draggable sprite was always reset for
each selection). Noticed the erroneous setting of a static variable in
SaveFile.c by a call to this by SaveObject.c, and so added a flag to
savefile_set_filetype to deal with this - would have been possible to get
the wrong filetype sent to applications or at best the wrong filetype
sprite in the dialogue without that.

The caret shouldn't jump out of a form back to the URL writable if the page
reformats now.

Table background colours now supported (as in the colour you see in the
border space if the cellspacing is large enough; this is as in MSIE, not
as in Navigator). Drawfile output routines updated accordingly.

Corrected erroneous use of wimpt_dx() / wimpt_dy() in a couple of places
in Images.c, which meant that (say) 1x1 images didn't work correctly in
medium resolution display modes.

Now have support for save as text (component ID and event 0x12) and save
as Draw (component ID and event 0x13) buttons. Dubious conditions for
greying and ungreying the print, save source and view source buttons and
menu options sorted out as part of implementing the same for the two new
buttons; added greying out of their associated menu items in passing.

Turned kerning on in draw file objects (does mean a rather heinous
increase in file size, but this is the only way to ensure the draw file
matches the visible page).

Comments before functions in SaveDraw.c are now complete and up to date.

Image and visit histories now generate a crude hash number to speed up
searching for items. It does give a speed increase, though it's a
disappointingly small one.

Issue of left/right margins and cellpaddings sorted out. Now have
redraw_left/right_margin for finding out the basic gap you must leave.
redraw_left/right_gap then gives any extra indentation for LI, BLOCKQUOTE
or whatever. The last two can be subtracted from the display width to
get an available page width for any section of text. Note that
redraw_left_gap replaces redraw_margin. The redraw_start_x function
uses the above to work out where a line's left hand edge should be,
taking account of left/right/centre alignment. HRs have been fixed now
(they were quite broken in v1.30, I think) based on this new model and
the behaviour of MSIE/NN 4.

Fixed width of cells with no contents - cell padding values wouldn't
have worked properly as the reformatter returns 0 rather than the left
hand margin size if given no stream.

Removed FM_Absolute flags for Font_Paint (spotted by DBrown) - sets bit
2, which is reserved...?

IMG width and height in % terms now works correctly; a % of available
width (after margins and indents) or height on the main page or for
a table cell, if the image lies in one. Because of the chicken-and-egg
problem with the latter, the cell must specify a width and/or height
for things to work properly. If this is not done, you'll usually end
up with a 1:1 scaled image (as in Navigator 4, rather than ending up
with no image or even no cell (!), as in MSIE 4).

HEIGHT attribute on a TABLE tag is supported, but only in a crude
fashion; the extra height (if there is any) is distributed over the
rows in a linear fashion. This is probably all you have to do in
practice, but I haven't checked. To maintain a notion of min/max
height as well as width would of course require a great deal more
work...

If using client pull to reload a page with a fragment ('...#name')
specified, then the reload wouldn't work on the same page; it'd just
jump to the fragment position. This won't happen if b->reloading is
set now (so works in conjunction with client pull on the same page
forcing a non-cached fetch). Similarly, if POSTing to such a URL,
a fetch will proceed (both these fixes done originally for
http://jupiter.beseen.com/chat/rooms/g/1678/).

browser_inherit split to browser_inherit and browser_inherit_post_data;
the code for the latter didn't clear any post_data in the child before
copying from the parent either, and could cause flex errors (now fixed).

Res file for Ursula ('Desktop' Browse) build tweaked - bits in the
font choices dialogue renamed, and button bar rearranged to hold the
new Save As Draw button. Other builds have had Save As Draw and
Save As Text buttons added, or not, depending upon availability of
suitable sprites, required UI simplicity, etc.

Now have:

  Browse$ChoicesFile
  Browse$ControlsFile
  Browse$ChoicesSave
  Browse$ControlsSave

(the last two are new) for loading and saving of the Choices or Controls
files. If unset, <App$Dir>.Choices or <App$Dir>.Controls will be set.
E.g., you could set Browse$ChoicesFile to be:

  <App$Dir>.Choices,Choices:WWW.(app).Choices

for loading and

  <Choices$Write>.WWW.(app).Choices

for saving. (The browser never saves Controls at the moment, so the
relevant variable above isn't effectively implemented, but could be
in future). Similarly, to support asymetric loading/saving of the Hotlist,
there are HotlistSave, HistorySave and ImageHistorySave entries in Choices
to complement HotlistPath, HistoryPath and ImageHistoryPath (which are used
for loading). save_save_choices will create directories as needed to obtain
the given path (and has also been fixed in various areas that hadn't been
tested out until now; e.g. zero termination of the AppName$ChoicesFile
variable expansion...). !Run[D] files updated appropriately.

Table widthing code rewritten. Slower, but a lot better on the whole.
Still has some problems - still needs a final 'make sure nothing is
below minimum width' scan, which it should be possible to do without.
No time to fix this at present!

The reformatter will now 'glue together' an LI token followed by any
non-LI token; so a bullet point followed by an item should not be able to
have a line break inserted after the bullet because of very tight width
constraints (it could before - yuk...).

'about:' brings up a page about the browser and any Plug-Ins, as with
Navigator (for example).

URI files support titles, as per spec. version 8. Saving a current
location to the Hotlist will thus give a sensible title now (unless
you're in a frame, so there's no title to get...). Of course, v1.00
files without a title still work.

Note that NOBR is *not* supported in this build and this combined with
the new table widther may cause problems on some sites (e.g. Microsoft's
home page!).
@
text
@d1365 5
d1456 5
d1545 5
d1640 11
d1666 5
d1681 5
d1696 7
d1877 10
d1937 7
d1971 5
d1989 7
d2023 5
d2057 7
d2091 6
d2109 13
d2179 12
@


1.12
log
@Not all resources are up to date in this check-in, and documentation
both within source and stuff in 'Docs' is out of date or missing - I
was very pushed for time on this one... Hopefully will do another
'tidy up' check-in before close on Friday; until then, beware of
anything other than the Ursula (Desktop browser) build. Anyway...

Export As Draw done. As part of this, FONT SIZE and SUP / SUB adjustment
of font size is done in fm_token_font_info rather than fm_find_token_font.

Bullets and switches are plotted as indirected sprite items, rather than
indirected text + sprite items - this relied on being in a redraw loop to
pick the sprites up from the local pool (failed during printing).

URI files now have a LF line ending rather than CR... '*' recognised
as an empty field when loading via. RAM transfer now (only worked for
loading from disc before).

Gave placeholder bounding boxes 4 OS units more minimum extra gap
vertically and reduced horizontal addition to this value * 1.5, rather
than * 2 (see reformat_get_placeholder_size).

Background image tiling starts at ymax - h + 4, rather than ymax, so
there isn't the bottom line of pixels from the top tile always present
at the top of the window. The '+4' is for caution's sake.

Can now save a frame's HTML source, that of its parent or its ancestor,
and the same for the URI pointing to those documents - see Menus.h for
the relevant component IDs that should lead to the SaveFile dialogue.

Have hopefully fixed timeout = 0 values (i.e. 'forever') on things
like LinkTo; before, image fetches could override the state (so you'd
only ever see brief flickers of a given URL as the pointer went over
a link).

Save File dialogue will remember the state of option or radio buttons
for a given parent component origin and restore that state when the
dialogue is next opened from the same place (stops turning on saving
as a URL file also turning on 'save background images' for Draw file
export, etc.).

Use of a META tag to reload the *same* page now sets the 'reloading'
flag in the browser so that it doesn't go through a proxy - otherwise
pages which are meant to update periodically through client pull
don't work, as they keep coming out of the cache.

Can now handle images specifying just a width or height in the HTML
(other dimension is scaled accordingly, but note that the placeholder
size must still be 'dumb' until the image data comes in). An image
will now override an image history size entry for the same entry
with a different size.
@
text
@d74 8
a81 7
static browser_data * savefile_browser = NULL;
static HStream      * savefile_token   = NULL;
static int            savefile_type    = 0x000;

static ObjectId       window_id        = 0;
static ComponentId    parent_component = -1;
static ObjectId       ancestor_id      = 0;
d136 3
a138 2
/*             Object ID to use as a parent, or  */
/*             0 for none.                       */
d141 1
a141 1
_kernel_oserror * savefile_open_for(browser_data * b, ObjectId parent)
d143 2
a144 1
  ObjectId id;
d158 16
a173 1
  /* Show it - the ToBeShown event does the rest */
d179 2
a180 2
                               parent,
                               -1));
a228 11
  /* If the parent ID is the same as a toolbar, this was */
  /* from a toolbar button - in which case, use a parent */
  /* ID of FileSaveAncestor, as that is what we actually */
  /* want to do.                                         */

  if (
       idb->parent_id == toolbars_get_upper(b) ||
       idb->parent_id == toolbars_get_lower(b)
     )
     pc = FileSaveAncestor;

d235 3
a237 2
      /* We came from a keyboard shortcut, so want to save the */
      /* current page source.                                  */
d247 5
d285 1
a285 1
      ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, b->page_is_text ? FileType_TEXT : FileType_HTML));
d306 1
a306 1
        ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, FileType_HTML));
d336 1
a336 1
            ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, FileType_HTML));
d368 1
a368 1
      ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, FileType_HTML));
d395 1
a395 1
      ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, FileType_TEXT));
d746 1
a746 1
/* savefile_type.                                */
d756 12
a767 1
/*             The filetype.                     */
d770 1
a770 1
_kernel_oserror * savefile_set_filetype(ObjectId object, ComponentId component, int type)
d775 3
a777 1
  savefile_type = type;
d779 1
a779 1
  /* Will it fit in the buffer? */
d781 1
a781 1
  len = utils_len_printf("file_%03x", type);
d783 1
a783 1
  /* If so, build the sprite name and tell the gadget to use that sprite */
d785 3
a787 3
  if (len < sizeof(sprite))
  {
    sprintf(sprite, "file_%03x", type);
d789 3
a791 3
    if (
         !_swix(Wimp_SpriteOp,
                _IN(0) | _IN(2),
d793 5
a797 5
                0x18, /* Select sprite */
                sprite)
       )
    {
      /* If it has been found, use this sprite */
d799 8
a806 8
      return draggable_set_sprite(0,
                                  object,
                                  component,
                                  sprite);
    }
    else
    {
      /* Otherwise use the generic 'file_xxx' instead */
d808 5
a812 4
      return draggable_set_sprite(0,
                                  object,
                                  component,
                                  "file_xxx");
d889 2
a890 1
      char * url = browser_current_url(savefile_browser);
d895 1
a895 1
      size   = save_uri_size(url, alt);
d927 1
a927 1
      if (savefile_token && savefile_token->anchor) size = save_uri_size(savefile_token->anchor, alt);
d984 1
a984 1
            size   = save_uri_size(source->data.url, alt);
d1125 2
d1129 1
a1129 1
          e = save_save_uri(path, savefile_token->anchor, alt);
d1136 2
a1137 1
          char * url = browser_current_url(savefile_browser);
d1141 1
a1141 1
          e = save_save_uri(path, url, alt);
d1199 1
a1199 1
            e = save_save_uri(path, source->data.url, alt);
d1672 10
a1681 10
  /* If the parent ID is the same as a toolbar, this was */
  /* from a toolbar button - in which case, use a parent */
  /* ID of FileSaveParent, as that is what we actually    */
  /* want to do.                                         */

  if (
       idb->parent_id == toolbars_get_upper(b) ||
       idb->parent_id == toolbars_get_lower(b)
     )
     pc = FileSaveParent;
d1917 2
a1918 2
  if (set_url) return savefile_set_filetype(window, SaveFileDrag, FileType_URL);
  else         return savefile_set_filetype(window, SaveFileDrag, FileType_URI);
d1957 1
a1957 1
  if (!set_original) return savefile_set_filetype(window, SaveFileDrag, FileType_SPR);
d1973 1
a1973 1
    return savefile_set_filetype(window, SaveFileDrag, filetype);
d2013 1
a2013 1
  return savefile_set_filetype(window, SaveFileDrag, FileType_DRAW);
@


1.11
log
@There are a few known significant problems with this code but it's being
checked in so the Choices can be worked on. Note that Res files etc. are
not up to date across all builds. Progress is as follows...

Bug report prompted me to do this - now ignore <p> tags straight after
<li> tags, so '<ul><li><p>Some text' works as the author (or automatic
generator, more commonly) intended.

A <p> tag before a table will be acted upon now (it was ignored before).
Something like <li><p><table...> will give a line break and paragraph
space after the <li> despite the changes mentioned above, as in other browsers.
Both browsers differ from Navigator, where the table appears alongside
the <li> tag.

Multiple BR tags work as in MSIE / Navigator (they don't collapse to
zero height anymore).

For the above, line height (and so, <br><br> or <p> spacing) is now
calculated inside reformat_text_line_height, and is used with either
a token to get the text height at a given size (e.g. for general line
spacing or multiple BR tags) or NULL for normal size text (e.g. for
P spacing, though this value is in practice later scaled by 7/8ths in
reformat_check_height). Note this behaviour is exhibited by MSIE 4;
v3 gave two BRs the same spacing as one P (i.e. not font size
dependent).

Save dialogues can have an option button or couple of radios to
switch between various formats (e.g. URI or URL, sprite or original
format). See 'Docs.Notes' for more. The back-end to this is now
implemented (i.e. at the moment, save as URI or URL, save as original
image format). Note that when saving background images, a leafname
based on the original fetch URL is now offered rather than a generic
'Background'.

Internal URL scheme changed to be all lower case, so relativisation
through URL_Fetcher still makes sense... :-/

Holding down 'shift' when clicking on stop reverses the interpretation
of the Controls file 'StopWebServe' entry.

Fixed row / column count for exporting tables as text; fixed a few
bits and pieces of internal URL scheme stuff which got broken when
HTMLLib started using URL_Fetcher's relativisation.
@
text
@d27 4
d64 1
d82 17
d101 20
a120 16
static int               savefile_drag_ended                (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int               savefile_ok                        (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int               savefile_cancel                    (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

static _kernel_oserror * savefile_switch_to_normal          (ObjectId window);
static _kernel_oserror * savefile_switch_to_option          (ObjectId window);
static _kernel_oserror * savefile_switch_to_radios          (ObjectId window);

static int               savefile_option_changed            (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int               savefile_radio_changed             (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int               savefile_item_changed              (IdBlock * idb);

static _kernel_oserror * savefile_text_uri_or_url           (ObjectId window);
static _kernel_oserror * savefile_toggle_uri_or_url         (ObjectId window);
static _kernel_oserror * savefile_text_sprite_or_original   (ObjectId window);
static _kernel_oserror * savefile_toggle_sprite_or_original (ObjectId window, const char * src);
d122 2
a123 2
static _kernel_oserror * savefile_set_correct_extent        (ObjectId window, BBox * ra1);
static _kernel_oserror * savefile_auto_width                (ObjectId window);
d213 1
a213 1
  /* ID of FileSaveParent, as that is what we actually    */
d220 1
a220 1
     pc = FileSaveParent;
d242 1
a242 1
    /* Save the page source */
d244 1
a244 1
    case FileSaveFrame: /* Fall through to FileSaveParent */
d246 1
d248 1
a248 1
      ChkError(savefile_switch_to_normal(idb->self_id));
d254 2
a255 3
        if      (b->parent      && b->parent     ->source) b = b->parent;
        else if (b->real_parent && b->real_parent->source) b = b->real_parent;
        else if (b->ancestor    && b->ancestor   ->source) b = b->ancestor;
d258 6
d313 1
d364 5
a368 3
      ChkError(savefile_switch_to_normal(idb->self_id));
      ChkError(writablefield_set_value(0, idb->self_id, SaveFileWrit, "(NotDone!)"));
      ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, FileType_DRAW));
d370 5
d392 1
a392 1
    /* Save the current location as a URI file */
d394 3
a396 1
    case FileSaveCurrentLocation:
d398 15
a412 1
      char * url = browser_current_url(b);
d417 1
d460 1
d481 1
d542 1
d847 1
d856 1
a856 1
    /* Size of a URI file for the current location */
d858 3
a860 1
    case FileSaveCurrentLocation:
d882 11
d1052 1
d1074 12
d1089 3
a1091 1
    case FileSaveCurrentLocation:
d1331 4
a1334 2


d1417 5
d1501 5
d1591 20
d1616 5
d1626 5
d1634 2
a1635 1
  ComponentId    pc = idb->parent_component;
d1658 1
a1661 1
    case ExportAsDraw:
d1690 2
d1712 11
a1722 1
    case FileSaveCurrentLocation:
d1725 3
d1737 2
d1751 2
d1800 5
d1850 5
d1877 5
d1890 5
d1917 5
d1946 44
d2041 5
@


1.10
log
@Fixed some glitches in the modified status bar code (e.g. status inference
wasn't working properly).

Shift+Toggle size always opened to not obscure the icon bar. If CMOS is
set to always show the icon bar, then Shift+Toggle size is meant to
reverse sense and open to absolute full size. It now does this.

!Run[D] files now require URL 0.22, HTTP 0.64, FTP 0.22, Gopher 0.08
and File 0.32.

Minor overhaul of 'Docs.Notes' (with 'Docs.User' similarly updated) to
include a few new bits and pieces.

Timeout values of 0 now mean 'forever'. Plug-in status messages now have
their own timeout setting. New Messages token 'Actv' for extra info when
a status message times out and the status line drops to 'Viewing' or
'Ready' when there is still a Busy state registered by the Plug-in.

Small Fetch windows don't become visible briefly for Plug-in fetches
when the fetch is complete (for SeeFetches:no, where these windows
should be hidden all the time).

WebServe may be controlled through the Browse front-end via.
Wimp_MAppControl reason code 4 (Wimp_MAppControl_Configure). Note the
renaming internally of 'WebServ' or 'WebServe' has been changed to
'Proxy' (with lower case equivalents where relevant); proxy name
and starting details come from the Messages file 'ProxyName' and
'ProxyComm' tokens. More in 'Docs.Notes'.

Res files updated for image history and PRE/TT font aspect ratio
choices. 'Don't expire' labels changed to 'Expire' (oops, didn't
notice the change in the development Browse's Res file when I
updated all of the others until now...).

When printing, Wimp_PlotIcon appears to ignore R4 and R5, plots
'somewhere' on the page, and tries to get the sprite from the global
pool. This latter part normally causes an error to be raised; though
on my machine I just get a corrupted error message. The Desktop font
gets lost at this point too. All have yet to be fixed; as an
interim work around, Wimp_PlotIcon objects are never drawn at all
if the global 'printing' flag is set.
@
text
@d56 1
d79 19
a97 3
static int savefile_drag_ended (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int savefile_ok         (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int savefile_cancel     (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
d115 1
a115 2
  _kernel_oserror * e;
  ObjectId          id;
d221 2
d242 4
d259 1
d262 1
d280 1
d282 3
a284 1
            ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, FileType_URI));
d288 1
d291 1
d320 1
d331 1
d334 1
d340 1
d343 1
d360 1
d362 3
a364 1
      ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, FileType_URI));
d402 1
d404 3
a406 1
      ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, FileType_URI));
d419 4
a422 1
      HStream * image = menus_document_opened_over();
d460 8
a467 14
      if (image->style & IMG)
      {
        ChkError(savefile_set_leafname_from_url(idb->self_id, SaveFileWrit, image->src));
      }
      else if (image->tagno == TAG_INPUT)
      {
        ChkError(savefile_set_leafname_from_url(idb->self_id, SaveFileWrit, (char *) HtmlINPUTsrc(image)));
      }
      else
      {
        ChkError(savefile_set_leafname_from_url(idb->self_id, SaveFileWrit, (char *) HtmlOBJECTdata(image)));
      }

      ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, FileType_SPR));
d480 4
d504 9
a512 2
      ChkError(savefile_set_leafname(idb->self_id, SaveFileWrit, lookup_token("BackName:Background",0,0)));
      ChkError(savefile_set_filetype(idb->self_id, SaveFileDrag, FileType_SPR));
d550 5
a554 3
      ChkError(event_register_toolbox_handler(window_id, Draggable_DragEnded, savefile_drag_ended, NULL));
      ChkError(event_register_toolbox_handler(window_id, ESaveFileOK,         savefile_ok,         NULL));
      ChkError(event_register_toolbox_handler(window_id, ESaveFileCancel,     savefile_cancel,     NULL));
d582 3
a584 4
  _kernel_oserror * e;
  char            * dot;
  char              path[Limits_OS_Pathname];
  const char      * last;
d747 1
d803 2
a804 2
      saving = protocols_saving_link;
      size   = save_uri_size(url, 0);
d825 1
a825 1
      if (savefile_token && savefile_token->anchor) size = save_uri_size(savefile_token->anchor, 0);
d836 5
a840 2
      if (savefile_token && is_known_browser(savefile_browser)) size = image_sprite_size(savefile_browser, savefile_token);
      else                                                      size = 0;
d850 5
a854 2
      if (is_known_browser(savefile_browser)) size = image_sprite_size(savefile_browser, NULL);
      else                                    size = 0;
d882 1
a882 1
            size   = save_uri_size(source->data.url, 0);
d937 3
a939 2
  _kernel_oserror * e  = NULL;
  int               ok = 0;
d1010 1
a1010 1
          e = save_save_uri(path, savefile_token->anchor, 0);
d1021 1
a1021 1
          e = save_save_uri(path, url, 0);
d1034 3
a1036 1
        e = image_export_sprite(path, savefile_browser, savefile_token);
d1048 3
a1050 1
        e = image_export_sprite(path, savefile_browser, NULL);
d1079 1
a1079 1
            e = save_save_uri(path, source->data.url, 0);
d1240 800
@


1.9
log
@Image history can be emptied from the History menu.

Significant reduction in number of times reformatter is called during
a table widthing session results in a dramatic speed increase for nested
tables (e.g. 64 deep with a paragraph of text in the deepest table takes
about two seconds to load with near-instantaneous subsequent reformats,
as opposed to taking optimistically 28 days for a 32 deep table!).
This code relies on a very big stack of assumptions...

Save as plain text implemented.

Choices, Messages and Res files brought up to date where necessary.
Version number taken to 1.28, 04-Dec-97 (so I don't forget later,
basically...).
@
text
@d340 1
a340 1
      HStream * link = menus_main_opened_over();
d379 1
a379 1
      HStream * image = menus_main_opened_over();
@


1.8
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d59 1
d308 1
a308 1
      ChkError(writablefield_set_value(0, idb->self_id, SaveFileWrit, "(NotDone!)"));
d310 5
d758 11
d925 12
@


1.7
log
@Removed 'The Onion' link from some Hotlist files. Time showed that the
site wasn't entirely Family Friendly (TM)... Removed Shift Control (it's
gone offline now), and corrected the Telegraph URL from ...the-telegraph...
to just ...telegraph...

StrongHelp manual generator now tries to work out the number of lines in
the table on the root page more intelligently.

Plug-in support extended to handle Shockwave. Quite a lot of underlying
work for this, including a pseudo cache system for temporary files.

Bug in redraw routines: they plotted background images within table
cells, when nothing should have been drawn. Oops. When background images
in cells are properly supported, this can get sorted out.

Tweaked vertical plot position of HRs (up to 4 OS units too high before due
to rounding).

Various Res file bits and pieces, Ursula build taken up to v1.26 beta
for release on the Browser site. *Note* not all resources are up to date!
This will be done after AW97.
@
text
@d52 1
d236 1
a236 1
        ChkError(writablefield_set_value(0, idb->self_id, SaveFileWrit, lookup_token("HotlistLeafname:Hotlist",0,0)));
d260 1
a260 1
            ChkError(writablefield_set_value(0, idb->self_id, SaveFileWrit, lookup_token("HotlistLeafname:Hotlist",0,0)));
d287 11
d457 1
a457 1
      ChkError(writablefield_set_value(0, idb->self_id, SaveFileWrit, "Background"));
d506 1
a506 1
/* savefile_set_leafname_from_url()              */
d509 5
a513 2
/* from the given URL, preserving whatever       */
/* path component may already have been present. */
d520 1
a520 1
/*             Pointer to a null terminated URL  */
d524 1
a524 1
_kernel_oserror * savefile_set_leafname_from_url(ObjectId object, ComponentId component, char * url)
d529 5
d535 1
a535 1
  /* See what filename is already in the dialogue */
d537 7
a543 2
  path[0] = 0; /* Important so that when we strcat the leafname later, */
               /* things will work even if the writable holds no text. */
d545 11
a555 7
  RetError(writablefield_get_value(0,
                                   object,
                                   component,
                                   path,
                                   sizeof(path),
                                   NULL));
  path[sizeof(path) - 1] = 0;
d558 1
d563 1
a563 1
  else dot = path;
d565 1
a565 1
  /* So 'dot' points somewhere inside 'path' - tag on the leafname */
d567 8
a574 1
  urlutils_leafname_from_url(url, dot, sizeof(path) - ((int) path - (int) dot));
d585 28
d787 1
a787 1
      /* Saving the entire hotlist */
d795 2
a796 2
      /* Save an object from the hotlist - a URL, directory, */
      /* or general selection                                */
d818 14
d864 184
@


1.6
log
@Now handles PARAM tags. Sorted out Plug-In bug that was related to Java
setting a 0 by 0 graphics window before calling Wimp_Poll (fixed in Java).
Implemented queue for Plug-Ins so multiple broadcasts aren't sent for
several Objects in one data chunk.

Added Docs directory with some documentation in it. More things to keep
checking for stylistic consistency, horray ;-)

Corrected !Run[D] for Ursula build to need AcornURI but not TaskModule
(URI handler needed for !Mail to pick up mailto: links).

Added display_height field to browser_data, analogous to display_width,
to cope with % sized objects by width and height (see how HRs are
handled in Redraw.c for an example of how it was always fairly easy
with width, but not height until this addition). Though you do have
to reload to get a new size; reformat isn't enough. Must see to this
some time...

Fixed bug where basic typefaces were claimed *before* the Choices file
had been read. For unusual Choices settings, this could create some
'interesting' problems now and again. This was part of narrower scope
work in the Choices code to allow font changing without leaking font
handles (now done; fm_shutdown only ditches fonts, it keeps internal
structures - must then call  fm_lose_fonts for all browsers to get the
bitfields up to date, then rewrite the typeface definitions and reclaim
basic fonts). Noticed that fm_claim_basic_typefaces would claim multiple
instances of the same font if there were several cases of the same font
mapped to different typeface styles - fixed.

Implemented PlugInControl settings, but not SupportObject (fully).
@
text
@d46 1
d374 1
a374 1
               image->tagno == TAG_OBJECT &&
@


1.5
log
@Added MimeMap module support. OBJECT routines now use this to determine
if the item is an inline image, and if so pass it to the image routines.
At present, support relies on a (correct) content type.
@
text
@d371 5
a375 1
             || object_token_is_image(b, image)
@


1.4
log
@Now working on source merged with Kevin Bracey's internationalisation
support. UNIFONT is undefined in the Make File for now. All Res and
Choices files updated appropriately.

Having sorted out the old Choices and Messages to form Choices, Controls
and Messages, this build has had the same cleaning up done internally.
This includes greater consistency in naming schemes and the removal of
the inconsitent choices items - e.g. Choices file entries saying 'delay
images' and 'plain backgrounds' where internally all the flags say 'show
images' and 'show backgrounds'. ChoiceDefs.h and CtrlDefs.h added to
clarify the meaning of some fields, though usage of these is not 100%
in the source (there are cases where parameters are passed through to
functions as ints, and those functions still check these against hard
coded values rather than the #define stuff).

Fetcher status return bits (connected, sent request, etc.) now reflected
in status bar. Progress during fetchs to files are reported by %, where
the size of the object is known. Exceeding 100% drops back to a byte
counter, in case the estimated size was wrong. The progress counter
may be updated after specific delays, rather than 'as often as possible',
to reduce flicker (as requested by D.Brown some time ago).

I've done a small rewrite of the fetch prioritisation scheme in FetchPage.c;
how well this performs in general use across different processor speeds
remains to be tested, but certainly it has some advantages. For each small
fetch window before the rewrite, a 4cs tight loop was entered - this gave a
noticable and substantial drain to the Desktop performance if more than one
was opened. Now, several can be up at once with little hit. The actual file
fetch is on half the priority it was before, with all others taken back
just a bit - e.g. from 20cs per poll to 15cs per poll for flat out
reformatting. You don't seem to lose much time on the format in practice,
and the Desktop feels quite a bit lighter at the same time. There's the
potential for smoother frameset loading in this scheme, too.

When Shift+Clicking on a link meant you still fetched inside the main
browser window, several fetches could occur in a frameset - one per frame.
However, now that you can only do this by clicking on a link that leads to
non-displayable data - or by turning off the small fetch windows by
setting UseSmall to 'no' in Choices - a bug where fetchpage_preprocessed
would stop such fetches as new ones were started was revealed.
The API to frames_abort_fetching has now been extended to include a
'stop file spooling too' flag, allowing a fix to be made by having
fetchpage_preprocess's calls not set this (and it doesn't check the
savelink flag is unset before proceeding, since frames_abort_fetching
does that implicitly now).

Had left the RAM transfer buffer at 16 bytes (from testing) accidentally...
Oops. Upped it to 4K. In addition, when loading data by RAM transfer,
the browser didn't notice if a RAMFetch bounced during the transfer. It
would be treated as a 'first' RAMFetch bounce, basically, and try to go to
file transfer - oops. Fixed.
@
text
@d54 1
d371 1
d398 4
d404 1
a404 1
        ChkError(savefile_set_leafname_from_url(idb->self_id, SaveFileWrit, (char *) HtmlINPUTsrc(image)));
@


1.3
log
@Added 'save current location'. Res files updated appropriately. Version
number taken to Beta-3; next will be 1.21, including K.Bracey's i18n code.
@
text
@d414 1
a414 1
      if (b->backimage == -1)
d793 1
a793 1
    if (savefile_browser->savelink) fetch_stop(savefile_browser, 0);
@


1.2
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d298 18
d660 13
@


1.1
log
@First a minor warning - the various Res files are out of sync in this build.
Only the Browse resources are currently valid.

Added Utils.Icons - has a few archives inside containing the resources
(well, some of them) used to build various UI sprites for various builds.
Archived because these are unlikely to change much, and putting them on
CVS was a move to, well, archive the stuff...

SaveDBox objects vanquished and requirements in !Run[D] files removed. The
data save code fits much more neatly in amongst the data load protocol
stuff now (with the slight exception of having to split the SaveObject
source into SaveObject and SaveFile - the former handles multiple persistent
dialogues for Shift+Click on links and the like, the latter handles 'one at
a time' transient dialogues for save source and similar). Export Link is now
supported, too, and writes a 'proper' version URI file. You'll find that
double-clicking on old URI files will work as the URI handler picks them up,
whilst new version ones don't; however, dragging onto the browser will only
work with new version files. Note that support for saving and loading URL
files (ANT suite stuff) is present too, so old URI files can be typed as URL
files if you want to keep them working without modification - the URI
handler itself will hopefully support the defined URI file format soon;
double-clicking on old URI files will stop working at that point. Note
there are *lots* of changes in every Res file to support all this. This may
all seem a bit pointless to some, but the changes do in fact make it very
easy to add new save dialogues all over the place. Certainly much easier
than with the previous system, anyway. In fact, post script, image
'save as sprite' took about half an hour, which I hope proves the worth
of the new system.

Merged in newer hotlist code with support for drag cancelling with Escape
(all relevant Res files appropriately updated) and cancelling scrolling
when you've reached the window scroll limit. Had to move some of the
Wimp message handling stuff to the central Protocols source, as clashes
were occuring, and also the hotlist routines were using independent saving
code - a lot of duplicated effort. This was fair enough as at the time the
Hotlist code was written, the Save code couldn't be used in the way it is
now.

New Save Source and Print buttons on the toolbar of some builds.

Phoenix Sprites file made more efficient - the Acorn base section has been
split from the animated upper region. Browse build has a new grey fade
sprite at the back, which is less grainy than the previous one and only
uses 16 colours (with a 16 greyscale palette).

Not really a bug, bug the routine to start an image fetch for INPUT
TYPE=IMAGE forms items only did so if the src field (or equivalent, for
this tag type) was non-NULL. In fact, you should always call image_new_image
and let that handle the rest, otherwise other sections of the code will fail
as they try to obtain an image number for a given HStream and get -1 back.
This problem only generally manifested itself when loading an HTML file to
the browser straight from an application, as many src fields become NULL
when the relativisation routines find nothing to relativise to...

Authentication got broken somewhere along the line - this has been fixed
(in HTMLLib and the browser).

Ctrl+Click on a cross referenced image updates *all* copies, not just the
one with the image data attached.

Next big step: Rip up TBEvents.h and rebuild that whole approach somewhat.
To all those working on the code, my apologies but this means all Res files
will receive a very large number of alterations and there will be extensive
code changes too (mostly naming convention stuff), in more or less all
source files. I am endeavouring to ensure that the new numberspace
convention does not clash with the work being done by Kevin on
internationalisation.
@
text
@d51 1
d140 2
a141 1
  /* Process the writable icon text */
d143 3
a145 1
  ChkError(windows_process_component_text(idb->self_id, SaveFileWrit, text, sizeof(text), 0, 1));
d147 1
a147 1
  /* Where did we come from? */
d149 8
a156 1
  ChkError(toolbox_get_client_handle(0, idb->ancestor_id, (void *) &b));
d158 2
a159 1
  #ifndef TRACE
d161 1
a161 1
    if (!b || (b && !is_known_browser(b)) || (b && !b->source)) return 0;
d163 1
a163 15
  #else

    if (!b || (b && !is_known_browser(b)) || (b && !b->source))
    {
      erb.errnum = 0;
      sprintf(erb.errmess,
              "Save dialogue origin of SaveAsHTML inappropriate; browser is %p, source NULL, in savefile_to_be_shown",
              b);

      show_error_ret(&erb);

      return 0;
    }

  #endif
d167 1
a167 1
  /* ID of SaveSetAsHTML, as that is what we actually    */
d174 1
a174 1
     pc = SaveSetAsHTML;
d185 1
a185 1
      pc = SaveAsHTML;
d198 2
a199 2
    case SaveAsHTML: /* Fall through to SaveSetAsHTML */
    case SaveSetAsHTML:
d203 1
a203 1
      if (pc == SaveSetAsHTML)
d229 55
d304 1
a304 1
      if (!link || !ISLINK(link) || !link->anchor)
d339 1
a339 1
    case ExportSprite:
d394 1
a394 1
    case ExportBack:
d396 21
a416 1
      ChkError(writablefield_set_value(0, idb->self_id, SaveFileWrit, "(NotDone!)"));
d418 5
d597 1
a597 1
  int                       size   = -1;
d602 1
d635 2
a636 2
    case SaveAsHTML:
    case SaveSetAsHTML:
d658 1
a658 1
    case ExportSprite:
d665 45
d711 1
a711 1
    /* For others, could leave size as -1 - but must set 'saving' appropriately */
d722 1
a722 1
                                          savefile_token,
d779 1
a779 2
/* will close it, deregistering any associated   */
/* event handlers.                               */
@
