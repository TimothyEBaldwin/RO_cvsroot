head	1.4;
access;
symbols
	Browse-2_16:1.4
	Browse-2_15:1.4
	Browse-2_14:1.4
	Browse-2_13:1.4
	Browse-2_12:1.4
	Browse-2_11:1.3
	Browse-2_10:1.3
	Browse-2_09:1.3
	ahodgkin_208_i4_2:1.3
	ahodgkin_208_i4:1.1
	ahodgkin_208_i3:1.1
	ahodgkin_208_i2:1.1
	ahodgkin_208_i1:1.1
	ahodgkin_207release:1.1
	ahodgkin_206release:1.1
	ahodgkin_205release:1.1
	ahodgkin_204release:1.1
	ahodgkin_202release:1.1
	ahodgkin_201release:1.1
	ahodgkin_200release:1.1
	ahodgkin_133beta:1.1
	ahodgkin_132beta:1.1
	ahodgkin_131beta:1.1
	ahodgkin_130beta:1.1
	ahodgkin_129:1.1
	ahodgkin_128beta:1.1
	ahodgkin_128alpha:1.1
	ahodgkin_127beta2:1.1
	ahodgkin_127beta:1.1;
locks; strict;
comment	@# @;


1.4
date	2006.03.13.22.06.19;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.14.08.45.05;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.31.15.58.28;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.11.19.10.28.45;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    CSIM.c                                            */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Client-side image map support.                    */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 13-Nov-1997 (ADH): Created.                       */
/*          25-May-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#include <HTMLLib/HTMLLib.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <tboxlibs/event.h>

#include "Global.h"
#include "FromROSLib.h"
#include "MiscDefs.h"
#include "Utils.h"

#include "Fetch.h"
#include "Redraw.h"

#include "CSIM.h"

/* Local structures */

typedef struct csim_polygon_vertex
{
  int x;
  int y;
}
csim_polygon_vertex;

/**************************************************************/
/* csim_within()                                              */
/*                                                            */
/* Given a token representing an A tag with associated        */
/* AREA-like information and x and y coordinates in the same  */
/* coordinate space as the A tag, works out if those          */
/* coordinates lie within the area the A tag describes.       */
/*                                                            */
/* Parameters: Pointer to the token;                          */
/*                                                            */
/*             X coordinate;                                  */
/*                                                            */
/*             Y coordinate.                                  */
/*                                                            */
/* Returns:    1 if the coordinates lie within the area       */
/*             described by the token, 2 if they lie within   */
/*             it because the item is the DEFAULT area, and 0 */
/*             if the coordinates do not lie within the area. */
/*                                                            */
/* Assumes:    The token represents an anchor with associated */
/*             coordinate info.                               */
/**************************************************************/

int csim_within(HStream * t, int relx, int rely)
{
  areashape type;
  int       n;

  if (!t->coords) return 0;

  /* Find the shape type and number of coordinates */

  type = (areashape) t->coords[0];
  n    = t->coords[1];

  /* Deal with each type */

  switch (type)
  {
    /* Rectangles must have four coordinates */

    case areashape_RECT:
    {
      if (n != 4) return 0;

      return (
               relx >= t->coords[2] && /* xmin */
               rely >= t->coords[3] && /* ymin */
               relx <= t->coords[4] && /* xmax */
               rely <= t->coords[5]    /* ymax */
             );
    }
    break;

    /* Circles need 3 coordinates (x, y, r) */

    case areashape_CIRCLE:
    {
      if (n != 3) return 0;

      relx -= t->coords[2];
      rely -= t->coords[3];

      return (
               relx         * relx         +
               rely         * rely         <
               t->coords[4] * t->coords[4]
             );
    }
    break;

    /* A polygon needs at least 3 coordinate pairs, and we must */
    /* have an even number of them.                             */

    case areashape_POLY:
    {
      /* Check we've the right number of coordinates */

      if (n < 6 || n % 2) return 0;
      else
      {
        /* Adapted from clientmaps.c (S.Brodie), which was in */
        /* turn from imagemap.c, (Rob McCool).                */

        int                               crossings = 0;
        int                               xflag0;
        int                               y;

        const csim_polygon_vertex * const v0        = (csim_polygon_vertex *) (&(t->coords[2]));
        const csim_polygon_vertex * const vlast     = (csim_polygon_vertex *) (&(t->coords[n])); /* (Since coord 1 starts at array index 2) */

        const int                 *       stop      = ((int *) v0) + n;
        const int                 *       p;

        y = vlast->y;
        p = &v0->y;

        /* Does the given y coordinate lie between the first and last vertex y positions? */

        if ((y >= rely) != (*p >= rely))
        {
          /* Set xflag0 if the given x coordinate is left of the last vertex x position */

          xflag0 = vlast->x >= relx;

          /* Compare whether this against whether or not the given x coordinate is left */
          /* of the first vertex x position.                                            */

          if (xflag0 == (v0->x >= relx))
          {
            /* If xflag0 is set here, the given x coordinate is left of both the first */
            /* and last vertex x positions - increment 'crossings'. Else it is right   */
            /* of them both.                                                           */

            if (xflag0) ++crossings;
          }
          else
          {
            /* If we reach here, the given x coordinate is neither wholly to the left */
            /* of the first and last vertex x positions, or to the right; so it must  */
            /* lie between them.                                                      */

            crossings += (
                           vlast->x -
                           (
                             ((y - rely) * (v0->x - vlast->x)) / (*p - y)
                           )
                         )
                         >= relx;
          }
        }

        /* Start with y pointing to the first vertex y coordinate, */
        /* then increment p to point to the next y coordinate.     */
        /* We can thus go round the polygon comparing coordinate   */
        /* pairs (sides of the polygon) against the given coords.  */

        for (y = *p, p += 2; p < stop; y = *p, p += 2)
        {
          if (y >= rely)
          {
            /* If the given y coordinate lies left of the current vertex */
            /* y coordinate, skip 'p' along until it points to another   */
            /* y coordinate right of the given one.                      */

            while (p < stop && (*p >= rely)) p += 2;
          }
          else
          {
            /* ...Or if the given y coordinate lies to the right of the */
            /* current vertex, skip 'p' long until it points to a y     */
            /* coordinate right of the given one.                       */

            while (p < stop && (*p < rely)) p += 2;
          }

          /* If p is no longer in the vertex array, then there is no vertex */
          /* to the right of the given y coordinate and the given point     */
          /* cannot lie in the polygon.                                     */

          if (p >= stop) break;

          /* So 'p' points to the second y coordinate of a pair of vertices; */
          /* 'p - 3' thus points to the first x coordinate, and so-on. So,   */
          /* set xflag0 if the first vertex x coordinate is right of the     */
          /* given x coordinate.                                             */

          xflag0 = (*(p - 3) >= relx);

          /* Compare this against whether or not the second vertex x coordinate */
          /* is in the same position relative to (i.e. left or right of) the    */
          /* given x coordinate.                                                */

          if (xflag0 == (*(p - 1) >= relx))
          {
            /* If xflag0 is set, then, then the given x coordinate lies to the left of */
            /* both of the vertices (increment crossings). Else it's to the right.     */

            if (xflag0) ++crossings;
          }
          else
          {
            /* If we reach here, the given x coordinate is between the two vertices' */
            /* x coordinates.                                                        */

            crossings += (
                           *(p - 3) -
                           (
                             ((*(p - 2) - rely) * (*(p - 1) - *(p - 3))) / (*p - *(p - 2))
                           )
                         )
                         >= relx;
          }
        }

        return (crossings & 1);
      }
    }
    break;

    /* For DEFAULT areas, the coordinates always lie in it... */

    case areashape_DEFAULT:
    {
      return 2;
    }
    break;
  }

  return 0;
}

/**************************************************************/
/* csim_return_info                                           */
/*                                                            */
/* The high level interface. Given a browser, token and       */
/* relative coordinates from the top left of the image the    */
/* token represents, returns a URL and target - the token     */
/* must represent an Object, which is an image with image map */
/* details attached.                                          */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the map;                                       */
/*                                                            */
/*             Pointer to an HStream struct representing an   */
/*             Object, which is an image with an attached     */
/*             client side map;                               */
/*                                                            */
/*             X offset from the top left of the image in     */
/*             pixels to look up in the map;                  */
/*                                                            */
/*             Similarly, Y offset (positive downwards);      */
/*                                                            */
/*             Pointer to a char *, in which a pointer to the */
/*             URL to fetch will be placed;                   */
/*                                                            */
/*             Pointer to a char *, in which a pointer to a   */
/*             target window name for the fetch will be       */
/*             placed;                                        */
/*                                                            */
/*             Pointer to a char *, in which a pointer to     */
/*             alternative text to display in place of the    */
/*             URL will be placed.                            */
/*                                                            */
/* Returns:    See parameters; note that any of the values    */
/*             returned may be NULL. If the URL is NULL, then */
/*             the token didn't represent an image map or the */
/*             coordinates didn't lie within a region the map */
/*             defines.                                       */
/*                                                            */
/* Assumes:    Any of the char * pointers may be NULL.        */
/**************************************************************/

void csim_return_info(browser_data * b, HStream * t, int relx, int rely,
                      char ** url, char ** target, char ** alt)
{
  HStream * item;
  char    * defurl    = NULL;
  char    * deftarget = NULL;
  char    * defalt    = NULL;

  /* Start with everything pointing nowhere */

  if (url)    *url    = NULL;
  if (target) *target = NULL;
  if (alt)    *alt    = NULL;

  /* Initial sanity checks */

  if (!b || !t) return;

  if (!(t->type & TYPE_ISCLIENTMAP)) return;

  /* Now start looking at what area the coordinates are over */

  if (ISOBJECT(t) & HtmlOBJECTshapes(t)) item = HtmlOBJECTstream(t);
  else                                   item = HtmlOBJECTmapstream(t);

  if (!item) return;

  /* Go through the Object's token stream */

  while (item)
  {
    /* Is this an A tag with associated URL? */

    if (ISLINK(item))
    {
      int result = csim_within(item, relx, rely);

      if (result == 1)
      {
        /* Found it (remember, if areas overlap, we */
        /* are supposed to take the first).         */

        if (url)    *url    = item->anchor;
        if (target) *target = item->target;
        if (alt)    *alt    = item->text;

        return;
      }

      if (result == 2)
      {
        /* Found the default details, to use if all else fails */

        defurl    = item->anchor;
        deftarget = item->target;
        defalt    = item->text;
      }
    }

    /* Try the next HStream structure */

    item = item->next;
  }

  /* Finished - return whatever defaults were specified in */
  /* the map, or NULL if there were none.                  */

  if (url)    *url    = defurl;
  if (target) *target = deftarget;
  if (alt)    *alt    = defalt;

  return;
}

/**************************************************************/
/* csim_highlight_region()                                    */
/*                                                            */
/* Draw a border around whatever region the map_x and map_y   */
/* fields of a browser_data structure indicate.               */
/*                                                            */
/* Parameters: Pointer to the browser_data struct holding     */
/*             info on the token representing the map and the */
/*             offset x and y coordinates indicating what     */
/*             part of the map is to be highlighted;          */
/*                                                            */
/*             Colour to use for the region highlight (see    */
/*             redraw_set_colour in Redraw.c for the format   */
/*             of the colour number);                         */
/*                                                            */
/*             Left hand x coordinate (screen coords) that    */
/*             the image is plotted at;                       */
/*                                                            */
/*             Similarly the top y coordinate that the image  */
/*             is plotted at.                                 */
/**************************************************************/

void csim_highlight_region(browser_data * b, int colour, int left_x, int top_y)
{
  HStream * t;
  HStream * item;

  /* Initial sanity checks */

  if (!b) return;

  t = b->pointer_over;

  if (!t || !(t->type & TYPE_ISCLIENTMAP)) return;

  /* Now start looking at what area the coordinates are over */

  if (ISOBJECT(t) & HtmlOBJECTshapes(t)) item = HtmlOBJECTstream(t);
  else                                   item = HtmlOBJECTmapstream(t);

  if (!item) return;

  /* Go through the Object's token stream */

  while (item)
  {
    /* Is this an A tag with associated URL? */

    if (ISLINK(item))
    {
      if (csim_within(item, b->map_x, b->map_y))
      {
        /* Found it (remember, if areas overlap, we */
        /* are supposed to take the first).         */

        areashape type;
        int       n;

        if (!item->coords) return;

        /* Find the shape type and number of coordinates */

        type = (areashape) item->coords[0];
        n    = item->coords[1];

        /* Deal with each type */

        switch (type)
        {
          case areashape_RECT:
          {
            BBox rect;

            if (n != 4) return;

            rect.xmin = left_x + item->coords[2] * 2; /* 1 'web pixel' = 2 OS units */
            rect.ymin = top_y  - item->coords[5] * 2;
            rect.xmax = left_x + item->coords[4] * 2;
            rect.ymax = top_y  - item->coords[3] * 2;

            redraw_border_around_box(b, &rect, colour);
          }
          break;

          case areashape_CIRCLE:
          {
            if (n != 3) return;

            redraw_set_colour(colour);

            /* Draw the main circle around the outside     */
            /* of the area, then 'blur' around a 1 OS unit */
            /* centre point to get a thicker outline.      */

            bbc_circle(left_x + item->coords[2] * 2, /* 1 'web pixel' = 2 OS units */
                       top_y  - item->coords[3] * 2,
                       item->coords[4] * 2 + 2);

            bbc_circle(left_x + item->coords[2] * 2 + 1,
                       top_y  - item->coords[3] * 2 + 1,
                       item->coords[4] * 2 + 2);

            bbc_circle(left_x + item->coords[2] * 2 + 1,
                       top_y  - item->coords[3] * 2 - 1,
                       item->coords[4] * 2 + 2);

            bbc_circle(left_x + item->coords[2] * 2 - 1,
                       top_y  - item->coords[3] * 2 + 1,
                       item->coords[4] * 2 + 2);

            bbc_circle(left_x + item->coords[2] * 2 - 1,
                       top_y  - item->coords[3] * 2 - 1,
                       item->coords[4] * 2 + 2);
          }
          break;

          case areashape_POLY:
          {
            int coord;
            int vx, vy;
            int lx, ly;

            if (n < 6 || n % 2) return;

            redraw_set_colour(colour);

            lx = left_x + item->coords[2] * 2; /* 1 'web pixel' = 2 OS units */
            ly = top_y  - item->coords[3] * 2;

            for (
                  coord = 2,
                  vx    = left_x + item->coords[coord + 2] * 2,
                  vy    = top_y  - item->coords[coord + 3] * 2;

                  coord < n;

                  coord += 2,
                  vx    = left_x + item->coords[coord + 2] * 2,
                  vy    = top_y  - item->coords[coord + 3] * 2
                )
            {
              /* Draw the outline at the exact border coordinates  */
              /* and 'blur' 1 OS unit in NE/NW/SE/SW directions to */
              /* make the border thicker.                          */

              bbc_move(lx,     ly);
              bbc_draw(vx,     vy);
              bbc_move(lx + 1, ly + 1);
              bbc_draw(vx + 1, vy + 1);
              bbc_move(lx + 1, ly - 1);
              bbc_draw(vx + 1, vy - 1);
              bbc_move(lx - 1, ly + 1);
              bbc_draw(vx - 1, vy + 1);
              bbc_move(lx - 1, ly - 1);
              bbc_draw(vx - 1, vy - 1);

              lx = vx, ly = vy;
            }
          }
          break;
        }

        /* Finished */

        return;
      }
    }

    /* Try the next HStream structure */

    item = item->next;
  }

  /* Finished */

  return;
}
@


1.3
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@d467 1
a467 1
            redraw_border_around_box(&rect, colour);
@


1.2
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@a40 5
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

@


1.1
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d15 12
a26 9
/***************************************************/
/* File   : CSIM.c                                 */
/*                                                 */
/* Purpose: Client-side image map support.         */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 13-Nov-97: Created.                    */
/***************************************************/
d32 2
a33 1
#include "swis.h"
d35 1
a35 1
#include "HTMLLib.h" /* HTML library API, Which will include html2_ext.h, tags.h and struct.h */
d37 8
a44 3
#include "wimp.h"
#include "wimplib.h"
#include "event.h"
a45 1
#include "svcprint.h"
d65 22
a86 25
/*************************************************/
/* csim_within()                                 */
/*                                               */
/* Given a token representing an A tag with      */
/* associated AREA-like information and x and y  */
/* coordinates in the same coordinate space as   */
/* the A tag, works out if those coordinates lie */
/* within the area the A tag describes.          */
/*                                               */
/* Parameters: Pointer to the token;             */
/*                                               */
/*             X coordinate;                     */
/*                                               */
/*             Y coordinate.                     */
/*                                               */
/* Returns:    1 if the coordinates lie within   */
/*             the area described by the token,  */
/*             2 if they lie within it because   */
/*             the item is the DEFAULT area, and */
/*             0 if the coordinates do not lie   */
/*             within the area.                  */
/*                                               */
/* Assumes:    The token represents an anchor    */
/*             with associated coordinate info.  */
/*************************************************/
d277 40
a316 48
/*************************************************/
/* csim_return_info                              */
/*                                               */
/* The high level interface. Given a browser,    */
/* token and relative coordinates from the top   */
/* left of the image the token represents,       */
/* returns a URL and target - the token must     */
/* represent an Object, which is an image with   */
/* image map details attached.                   */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the map;              */
/*                                               */
/*             Pointer to an HStream struct      */
/*             representing an Object, which is  */
/*             an image with an attached client  */
/*             side map;                         */
/*                                               */
/*             X offset from the top left of the */
/*             image in pixels to look up in the */
/*             map;                              */
/*                                               */
/*             Similarly, Y offset (positive     */
/*             downwards);                       */
/*                                               */
/*             Pointer to a char *, in which a   */
/*             pointer to the URL to fetch will  */
/*             be placed;                        */
/*                                               */
/*             Pointer to a char *, in which a   */
/*             pointer to a target window name   */
/*             for the fetch will be placed;     */
/*                                               */
/*             Pointer to a char *, in which a   */
/*             pointer to alternative text       */
/*             to display in place of the        */
/*             URL will be placed.               */
/*                                               */
/* Returns:    See parameters; note that any of  */
/*             the values returned may be NULL.  */
/*             If the URL is NULL, then the      */
/*             token didn't represent an image   */
/*             map or the coordinates didn't lie */
/*             within a region the map defines.  */
/*                                               */
/* Assumes:    Any of the char * pointers may be */
/*             NULL.                             */
/*************************************************/
d392 21
a412 26
/*************************************************/
/* csim_highlight_region()                       */
/*                                               */
/* Draw a border around whatever region the      */
/* map_x and map_y fields of a browser_data      */
/* structure indicate.                           */
/*                                               */
/* Parameters: Pointer to the browser_data       */
/*             struct holding info on the token  */
/*             representing the map and the      */
/*             offset x and y coordinates        */
/*             indicating what part of the map   */
/*             is to be highlighted;             */
/*                                               */
/*             Colour to use for the region      */
/*             highlight (see redraw_set_colour  */
/*             in Redraw.c for the format of     */
/*             the colour number);               */
/*                                               */
/*             Left hand x coordinate (screen    */
/*             coords) that the image is plotted */
/*             at;                               */
/*                                               */
/*             Similarly the top y coordinate    */
/*             that the image is plotted at.     */
/*************************************************/
@

