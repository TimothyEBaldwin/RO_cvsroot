head	1.24;
access;
symbols
	Browse-2_16:1.24
	Browse-2_15:1.24
	Browse-2_14:1.24
	Browse-2_13:1.24
	Browse-2_12:1.24
	Browse-2_11:1.23
	Browse-2_10:1.23
	Browse-2_09:1.23
	ahodgkin_208_i4_2:1.22
	ahodgkin_208_i4:1.20
	ahodgkin_208_i3:1.20
	ahodgkin_208_i2:1.20
	ahodgkin_208_i1:1.20
	ahodgkin_207release:1.20
	ahodgkin_206release:1.18
	ahodgkin_205release:1.17
	ahodgkin_204release:1.17
	ahodgkin_202release:1.16
	ahodgkin_201release:1.16
	ahodgkin_200release:1.16
	ahodgkin_133beta:1.16
	ahodgkin_132beta:1.15
	ahodgkin_131beta:1.14
	ahodgkin_130beta:1.14
	ahodgkin_129:1.14
	ahodgkin_128beta:1.14
	ahodgkin_128alpha:1.13
	ahodgkin_127beta2:1.13
	ahodgkin_127beta:1.13
	ahodgkin_126beta:1.12
	ahodgkin_AW97patch:1.12
	ahodgkin_AW97:1.11;
locks; strict;
comment	@# @;


1.24
date	2006.03.13.22.06.19;	author ahodgkin;	state Exp;
branches;
next	1.23;

1.23
date	2005.04.26.09.42.34;	author ahodgkin;	state Exp;
branches;
next	1.22;

1.22
date	2000.11.14.08.45.06;	author ahodgkin;	state Exp;
branches;
next	1.21;

1.21
date	2000.05.31.15.58.33;	author ahodgkin;	state Exp;
branches;
next	1.20;

1.20
date	98.10.06.09.28.50;	author ahodgkin;	state Exp;
branches;
next	1.19;

1.19
date	98.09.07.11.46.45;	author ahodgkin;	state Exp;
branches;
next	1.18;

1.18
date	98.07.09.10.27.06;	author ahodgkin;	state Exp;
branches;
next	1.17;

1.17
date	98.04.16.08.14.11;	author ahodgkin;	state Exp;
branches;
next	1.16;

1.16
date	98.02.13.17.32.06;	author ahodgkin;	state Exp;
branches;
next	1.15;

1.15
date	98.02.06.13.55.07;	author ahodgkin;	state Exp;
branches;
next	1.14;

1.14
date	97.12.04.11.22.38;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	97.11.19.10.28.54;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	97.10.18.16.42.24;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	97.10.16.13.23.09;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	97.09.26.12.35.59;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	97.09.22.07.43.13;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.08.28.16.07.55;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.08.18.09.23.55;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.08.12.09.26.34;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.08.08.16.38.50;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.08.05.08.42.55;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.07.30.12.39.05;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.07.24.11.39.32;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.28.35;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.24
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Frames.c                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Frame handling functions for the browser.         */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 19-Mar-1997 (ADH): Created.                       */
/*          24-May-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include <kernel.h>
#include <swis.h>
#include <tboxlibs/flex.h>

#include <HTMLLib/HTMLLib.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <tboxlibs/event.h>

#include <tboxlibs/toolbox.h>
#include <tboxlibs/window.h>

#include "NestWimp.h"

#include "Global.h"
#include "FromROSLib.h"
#include "Utils.h"

#include "Browser.h"
#include "Fetch.h" /* (Which itself includes URLstat.h) */
#include "FetchPage.h"
#include "Images.h"
#include "Memory.h"
#include "Mouse.h"
#include "Redraw.h"
#include "Reformat.h"
#include "Toolbars.h"
#include "URLutils.h"
#include "Windows.h"

#include "Frames.h"

/* Locals */

static int            highlight_timer  = 0;
static int            highlight_for    = 0;
static ObjectId       highlight_top    = 0;
static ObjectId       highlight_bottom = 0;
static ObjectId       highlight_left   = 0;
static ObjectId       highlight_right  = 0;

/* Static function prototypes */

static _kernel_oserror * frames_find_widths                     (browser_data * b, int available);
static _kernel_oserror * frames_find_heights                    (browser_data * b, int available);
static int               frames_check_recursion                 (browser_data * parent, browser_data * child, HStream * token);
static _kernel_oserror * frames_reopen_frame                    (browser_data * cb, browser_data * parent, BBox * frame_box);
static void              frames_collapse_child_tree             (browser_data * base, browser_data * real_parent, browser_data * close);

static browser_data    * frames_find_named_visible_same_index_r (browser_data * parent, char * name, int * index);
static browser_data    * frames_find_browser_from_index_r       (browser_data * parent, int index, int * count);

static browser_data    * frames_find_next_frame                 (browser_data * check, browser_data * current, int * found);
static browser_data    * frames_find_previous_frame             (browser_data * check, browser_data * current, int * found);

static int               frames_remove_highlight_timer          (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);

/**************************************************************/
/* frames_find_widths()                                       */
/*                                                            */
/* Constructs an array pointed to by the frame_widths field   */
/* of a browser_data struct, containing the widths of frames  */
/* described by the token pointed to in the frameset field of */
/* the browser_data structure.                                */
/*                                                            */
/* These frame widths are set to occupy the entire space      */
/* given to the function; any border and scroll bar size      */
/* considerations must therefore be done externally.          */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the frameset;                                  */
/*                                                            */
/*             The available width the frameset must fit      */
/*             inside, in OS units.                           */
/**************************************************************/

static _kernel_oserror * frames_find_widths(browser_data * b, int available)
{
  _kernel_oserror * e;
  int               tw, units;
  int               col, cols, left, stars;

  cols = b->frameset->cols;
  if (!cols) cols = 1;

  /* Allocate memory for the array */

  e = memory_set_chunk_size(b, NULL, CK_FWID, cols * sizeof(int));
  if (e) return e;

  /* Ensure 'available' is a whole number of pixels */

  available &= ~(wimpt_dx() - 1);

  /* Fast simple case - only one column */

  if (cols == 1)
  {
    b->frame_widths[0] = available;
    return NULL;
  }

  /* Initial conditions */

  left  = available;
  stars = 0;

  /* First pass; subtract from the overall width, */
  /* the width of percentage specified frames     */
  /* and absolute pixel size specified frames.    */

  for (col = 0; col < cols; col ++)
  {
    tw     = ((int *) (b->frameset->value))[col];
    units  = tw & ~ROWCOL_VALUE;
    tw    &= ROWCOL_VALUE;

    if (units & ROWCOL_PERCENT)
    {
      tw    = ((available * tw) / 100) & ~(wimpt_dx() - 1);
      left -= tw;

      b->frame_widths[col] = tw;
    }
    else if (units & ROWCOL_STAR)
    {
      stars += tw;
    }
    else
    {
      tw    = (tw * 2) & ~(wimpt_dx() - 1);
      left -= tw;

      b->frame_widths[col] = tw;
    }
  }

  /* Second pass; allocate a fraction of the   */
  /* remaining space to star specified frames. */

  if (stars)
  {
    int remaining;
    int rem_stars = stars;

    remaining = left;

    for (col = 0; col < cols; col ++)
    {
      tw     = ((int *) (b->frameset->value))[col];
      units  = tw & ~ROWCOL_VALUE;
      tw    &= ROWCOL_VALUE;

      if (units & ROWCOL_STAR)
      {
        rem_stars -= tw;

        if (rem_stars) tw = (remaining * tw / stars) & ~(wimpt_dx() - 1);
        else           tw = left;

        if (tw < controls.minimum_frame_width) tw = controls.minimum_frame_width;

        left -= tw;

        b->frame_widths[col] = tw;
      }
    }
  }

  /* Third pass; simple scale to fit all the frames in the */
  /* available space (scaling up or down). 'left' holds,   */
  /* in OS units, the amount left / overshot in the        */
  /* available width.                                      */

  if (left != 0)
  {
    int basic, remainder, left2 = available;

    if (available == left) left = available + 1;

    for (col = 0; col < cols; col ++)
    {
      left2                 -=
      b->frame_widths[col]  =

      (b->frame_widths[col] * available / (available - left)) & ~(wimpt_dx() - 1);
    }

    /* 'left2' is in OS units, but represents a whole number of */
    /* pixels due to careful use of wimpt_dx above. To cope     */
    /* with rounding correctly during rescaling the widths      */
    /* (see below), want this now in pixel values.              */

    left = left2 / wimpt_dx();

    basic     = left / cols;
    remainder = left - (basic * cols);

    basic *= wimpt_dx();

    for (col = 0; col < cols; col ++)
    {
      if (remainder < 0)
      {
        b->frame_widths[col] += basic - wimpt_dx();
        remainder ++;
      }
      else if (remainder > 0)
      {
        b->frame_widths[col] += basic + wimpt_dx();
        remainder --;
      }
      else b->frame_widths[col] += basic;
    }
  }

  return NULL;
}

/**************************************************************/
/* frames_find_heights()                                      */
/*                                                            */
/* Constructs an array pointed to by the frame_heights field  */
/* of a browser_data struct, containing the heights of frames */
/* described by the token pointed to in the frameset field of */
/* the browser_data structure.                                */
/*                                                            */
/* These frame heights are set to occupy the entire space     */
/* given to the function; any border and scroll bar size      */
/* considerations must therefore be done externally.          */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the frameset;                                  */
/*                                                            */
/*             The available height the frameset must fit     */
/*             inside, in OS units.                           */
/**************************************************************/

static _kernel_oserror * frames_find_heights(browser_data * b, int available)
{
  _kernel_oserror * e;
  int               th, units;
  int               row, rows, left, stars;

  rows = b->frameset->rows;
  if (!rows) rows = 1;

  /* Allocate memory for the array */

  e = memory_set_chunk_size(b, NULL, CK_FHEI, rows * sizeof(int));
  if (e) return e;

  /* Ensure 'available' is a whole number of pixels */

  available &= ~(wimpt_dy() - 1);

  /* Fast simple case - only one row */

  if (rows == 1)
  {
    b->frame_heights[0] = available;
    return NULL;
  }

  /* Initial conditions */

  left  = available;
  stars = 0;

  /* First pass; subtract from the overall height, */
  /* the height of percentage specified frames     */
  /* and absolute pixel size specified frames.     */

  for (row = 0; row < rows; row ++)
  {
    th     = ((int *) (b->frameset->name))[row];
    units  = th & ~ROWCOL_VALUE;
    th    &= ROWCOL_VALUE;

    if (units & ROWCOL_PERCENT)
    {
      th    = ((available * th) / 100) & ~(wimpt_dy() - 1);
      left -= th;

      b->frame_heights[row] = th;
    }
    else if (units & ROWCOL_STAR)
    {
      stars += th;
    }
    else
    {
      th    = (th * 2) & ~(wimpt_dy() - 1);
      left -= th;

      b->frame_heights[row] = th;
    }
  }

  /* Second pass; allocate a fraction of the   */
  /* remaining space to star specified frames. */

  if (stars)
  {
    int remaining;
    int rem_stars = stars;

    remaining = left;

    for (row = 0; row < rows; row ++)
    {
      th     = ((int *) (b->frameset->name))[row];
      units  = th & ~ROWCOL_VALUE;
      th    &= ROWCOL_VALUE;

      if (units & ROWCOL_STAR)
      {
        rem_stars -= th;

        if (rem_stars) th = (remaining * th / stars) & ~(wimpt_dy() - 1);
        else           th = left;

        if (th < controls.minimum_frame_height) th = controls.minimum_frame_height;

        left -= th;

        b->frame_heights[row] = th;
      }
    }
  }

  /* Third pass; simple scale to fit all the frames in the */
  /* available space (scaling up or down). 'left' holds,   */
  /* in OS units, the amount left / overshot in the        */
  /* available height.                                     */

  if (left != 0)
  {
    int basic, remainder, left2 = available;

    if (available == left) left = available + 1;

    for (row = 0; row < rows; row ++)
    {
      left2                 -=
      b->frame_heights[row]  =

      (b->frame_heights[row] * available / (available - left)) & ~(wimpt_dy() - 1);
    }

    /* 'left2' is in OS units, but represents a whole number of */
    /* pixels due to careful use of wimpt_dy above. To cope     */
    /* with rounding correctly during rescaling the heights     */
    /* (see below), want this now in pixel values.              */

    left = left2 / wimpt_dy();

    basic     = left / rows;
    remainder = left - (basic * rows);

    basic *= wimpt_dy();

    for (row = 0; row < rows; row ++)
    {
      if (remainder < 0)
      {
        b->frame_heights[row] += basic - wimpt_dy();
        remainder ++;
      }
      else if (remainder > 0)
      {
        b->frame_heights[row] += basic + wimpt_dy();
        remainder --;
      }
      else b->frame_heights[row] += basic;
    }
  }

  return NULL;
}

/**************************************************************/
/* frames_get_rc_info()                                       */
/*                                                            */
/* Returns the number of rows and columns in a frameset, and  */
/* the row and column that a specific child lies in.          */
/*                                                            */
/* Parameters: Pointer to a browser_data struct which is the  */
/*             parent of the set of frames in question;       */
/*                                                            */
/*             The child number, or -1 if not interested in   */
/*             this info;                                     */
/*                                                            */
/*             Pointer to an int, into which the number of    */
/*             rows is placed;                                */
/*                                                            */
/*             Pointer to an int, into which the number of    */
/*             columns is placed;                             */
/*                                                            */
/*             Pointer to an int, into which the row the      */
/*             child lies in is placed;                       */
/*                                                            */
/*             Pointer to an int, into which the column the   */
/*             child lies in is placed.                       */
/*                                                            */
/* Assumes:    Any of the four int pointers may be NULL.      */
/**************************************************************/

void frames_get_rc_info(const browser_data * restrict parent, int child,
                        int * retrows, int * retcols, int * retrow, int * retcol)
{
  int rows = 0, row = 0, cols = 0, col = 0;

  if (parent->nchildren)
  {
    rows = parent->frameset->rows;
    cols = parent->frameset->cols;

    if (!rows) rows = 1;
    if (!cols) cols = 1;

    if (child >= 0)
    {
      row = child / rows;
      col = child % cols;

      if (row <  0)    row = 0;
      if (row >= rows) row = rows - 1;
      if (col <  0)    col = 0;
      if (col >= cols) col = cols - 1;
    }
  }

  if (retrows) *retrows = rows;
  if (retcols) *retcols = cols;
  if (retrow)  *retrow  = row;
  if (retcol)  *retcol  = col;
}

/**************************************************************/
/* frames_find_pointer_in_frameset()                          */
/*                                                            */
/* Works out where in a frameset a given screen coordinate    */
/* is. The returned row and column values are -1 if the       */
/* coordinate lies within a row or column, or are the row     */
/* below, or column to the right of the coordinate if it lies */
/* in the border between two rows or columns. So the value 0  */
/* would never be returned for either.                        */
/*                                                            */
/* In the event that the pointer lies between a row or column */
/* but that row or column edge cannot be resized due to       */
/* specifiers in the HTML source for the frameset, -2 will be */
/* returned.                                                  */
/*                                                            */
/* Given that this is likely to be called by routines         */
/* handling border-driven resizing of frames, the routine can */
/* constrain the pointer to a bounding box appropriate to the */
/* frames surrounding it if required. This may be done via. a */
/* mouse_rectangle or Wimp_DragBox.                           */
/*                                                            */
/* Parameters: Pointer to a browser_data struct representing  */
/*             the parent frame;                              */
/*                                                            */
/*             X screen coordinate to check;                  */
/*                                                            */
/*             Y screen coordinate to check;                  */
/*                                                            */
/*             Pointer to an int, into which the row number   */
/*             (see above) will be written;                   */
/*                                                            */
/*             Pointer to an int, into which the column       */
/*             number (see above) will be written;            */
/*                                                            */
/*             Pointer to an int, into which the pointer's x  */
/*             offset from the left edge of the frame left of */
/*             it, if applicable, is returned;                */
/*                                                            */
/*             Pointer to an int, into which the pointer's y  */
/*             offset from the top edge of the frame below    */
/*             it, if applicable, is returned;                */
/*                                                            */
/*             1 to constrain the pointer (again see above    */
/*             for more details) with Wimp_DragBox, 2 to      */
/*             constrain with mouse_rectangle, 0 to not do    */
/*             any pointer constraint.                        */
/*                                                            */
/* Assumes:    Either of the four int pointers may be NULL.   */
/**************************************************************/

_kernel_oserror * frames_find_pointer_in_frameset(browser_data * handle, int x, int y, int * retrow, int * retcol,
                                                  int * offset_left, int * offset_top, int constrain)
{
  _kernel_oserror           * e;
  browser_data              * child;
  WimpGetWindowOutlineBlock   co;
  int                         oft,  ofl;
  int                         rows, cols;
  int                         row,  col;
  int                         i,    c;
  BBox                        span;

  if (offset_left) *offset_left = 0;
  if (offset_top)  *offset_top  = 0;

  oft = ofl = 0;

  /* Find the number of rows and columns */

  rows = handle->frameset->rows;
  cols = handle->frameset->cols;

  if (!rows) rows = 1;
  if (!cols) cols = 1;

  /* First find the row that the pointer lies between */

  row = -1, col = -1;

  for (i = 0; i < rows; i++)
  {
    /* What child number are we on? */

    c = i * cols;

    if (c < handle->nchildren)
    {
      /* Get this child frame's outline coordinates */

      child            = handle->children[c];
      co.window_handle = child->window_handle;

      e = wimp_get_window_outline(&co);
      if (e) return e;

      /* First case - pointer y coord lies within the bounding y */
      /* coords of the window, so it lies in this row. In this   */
      /* case, we've a column-only drag, so don't care about the */
      /* row. We can just exit, leaving row at -1.               */

      if (co.outline.ymax > y && co.outline.ymin < y) break;

      /* Second case - pointer y coord lies above the top of the */
      /* frame. So we've gone past it; in that case, the pointer */
      /* must lie between this row and the previous one.         */

      if (co.outline.ymax <= y)
      {
        row = i; /* So row points to the row below the pointer */
        oft = y - co.outline.ymax;

        if (offset_top) *offset_top = oft;

        break;
      }
    }
  }

  /* Right, next find the column the pointer lies between */

  for (i = 0; i < cols; i++)
  {
    if (i < handle->nchildren)
    {
      /* Get this child frame's outline coordinates */

      child            = handle->children[i];
      co.window_handle = child->window_handle;

      e = wimp_get_window_outline(&co);
      if (e) return e;

      /* As for rows, first case is the x coord lying within the */
      /* bounding x coords of the window.                        */

      if (co.outline.xmin < x && co.outline.xmax > x) break;

      /* Second case, the pointer x coord lies left of the left  */
      /* hand side of the frame, so we've gone past it.          */

      if (co.outline.xmin >= x)
      {
        col = i;
        ofl = co.outline.xmin - x;

        if (offset_left) *offset_left = ofl;

        break;
      }
    }
  }

  /* At this point, row holds -1 if the pointer lies within a  */
  /* particular row, or holds the row number below the pointer */
  /* if it lies between two rows. Similarly, col holds -1 if   */
  /* the pointer lies within a particular column, or holds the */
  /* column number to the right of the pointer if it lies      */
  /* between two columns.                                      */

  if (
       row == 0    ||
       col == 0    ||
       row >= rows ||
       col >= cols
     )
  {
    if (retrow) *retrow = -1;
    if (retcol) *retcol = -1;

    return NULL;
  }

  /* Are we allowed to resize this edge? */

  if (row > 0 && !frames_can_resize_top(handle, row * cols)) row = -2;
  if (col > 0 && !frames_can_resize_left(handle, col))       col = -2;

  /* Set the return values */

  if (retrow) *retrow = row;
  if (retcol) *retcol = col;

  /* If required, constrain the pointer */

  if (constrain)
  {
    int th, hh, vw;

    /* Find the tool sizes; we reduce the size of the bounding box */
    /* for the pointer by the relevant tool size times two to make */
    /* sure the frames don't get squashed too small, as well as    */
    /* considering the border width and original drag position.    */

    windows_return_tool_sizes(&th, &hh, &vw);

    span.xmin = span.xmax = x;
    span.ymin = span.ymax = y;

    /* Finding the outlines again for four frames  */
    /* may duplicate some, or even all of the work */
    /* done above but this keeps the code clear    */
    /* and easy to understand. This is a very      */
    /* infrequent operation (only at the start of  */
    /* a drag, for example) so it doesn't need to  */
    /* be that fast.                               */

    if (row > 0)
    {
      /* Get the top frame outline coordinates */

      c = (row - 1) * cols;

      if (c < handle->nchildren)
      {
        child            = handle->children[c];
        co.window_handle = child->window_handle;

        e = wimp_get_window_outline(&co);
        if (e) return e;

        span.ymax = y + co.outline.ymax - co.outline.ymin - hh * 2;
      }

      /* Get the bottom frame outline coordinates */

      c = row * cols;

      if (c < handle->nchildren)
      {
        child            = handle->children[c];
        co.window_handle = child->window_handle;

        e = wimp_get_window_outline(&co);
        if (e) return e;

        span.ymin = y - (co.outline.ymax - co.outline.ymin - hh * 2);
      }

      if (span.ymax < span.ymin) span.ymax = span.ymin = y;
    }

    if (col > 0)
    {
      /* Get the left frame outline coordinates */

      c = col - 1;

      if (c < handle->nchildren)
      {
        child            = handle->children[c];
        co.window_handle = child->window_handle;

        e = wimp_get_window_outline(&co);
        if (e) return e;

        span.xmin = x - (co.outline.xmax - co.outline.xmin - vw * 2);
      }

      /* Get the right hand frame outline coordinates */

      c = col;

      if (c < handle->nchildren)
      {
        child            = handle->children[c];
        co.window_handle = child->window_handle;

        e = wimp_get_window_outline(&co);
        if (e) return e;

        span.xmax = x + co.outline.xmax - co.outline.xmin - vw * 2;
      }

      if (span.xmax < span.xmin) span.xmax = span.xmin = x;
    }

    /* Set the bounding box */

    if (constrain == 1)
    {
      WimpDragBox drag;

      drag.wimp_window       = handle->window_handle;
      drag.drag_type         = Wimp_DragBox_DragPoint;

      drag.dragging_box.xmin = 0;
      drag.dragging_box.ymin = 0;
      drag.dragging_box.xmax = 0;
      drag.dragging_box.ymax = 0;
      drag.parent_box        = span;

      drag.workspace         = NULL;
      drag.draw              = NULL;
      drag.remove            = NULL;
      drag.move              = NULL;

      wimp_drag_box(&drag);
    }
    else if (constrain == 2) mouse_rectangle(&span, 1);
  }

  /* Finished */

  return NULL;
}

/**************************************************************/
/* frames_can_resize_top()                                    */
/*                                                            */
/* Returns 1 if the top edge of a given frame may be dragged  */
/* to resize the frame.                                       */
/*                                                            */
/* Parameters: Pointer to a browser_data struct which is the  */
/*             parent of the set of frames in question;       */
/*                                                            */
/*             Number of the child to check.                  */
/*                                                            */
/* Returns:    1 if the frame's top edge can be dragged to    */
/*             resize it, else 0 (due to NORESIZE specified   */
/*             on that frame or frames surrounding it).       */
/**************************************************************/

int frames_can_resize_top(const browser_data * restrict parent, int child)
{
  int            row, rows, col, cols;
  int            checkcol, checkchild;
  browser_data * checkc;
  int            canresize = 1;
  HStream      * frametoken;

  if (!parent->nchildren) return 0;

  frametoken = parent->children[child]->frame;

  if (frametoken && (frametoken->type & TYPE_NORESIZE)) return 0;

  /* Find out the number of rows and columns, and the */
  /* row and column number the given child falls in.  */

  frames_get_rc_info(parent, child, &rows, &cols, &row, &col);

  for (checkcol = 0; checkcol < cols; checkcol ++)
  {
    /* Check all columns in the row the child is in for NORESIZE frames */

    checkchild = row * cols + checkcol;
    checkc     = parent->children[checkchild];
    frametoken = checkc->frame;

    if (frametoken && (frametoken->type & TYPE_NORESIZE))
    {
      canresize = 0;
      break;
    }

    /* If not already on row 0, check the row above for NORESIZE frames */

    if (row)
    {
      checkchild = (row - 1) * cols + checkcol;
      checkc     = parent->children[checkchild];
      frametoken = checkc->frame;

      if (frametoken && (frametoken->type & TYPE_NORESIZE))
      {
        canresize = 0;
        break;
      }
    }
  }

  return canresize;
}

/**************************************************************/
/* frames_can_resize_bottom()                                 */
/*                                                            */
/* Returns 1 if the bottom edge of a given frame may be       */
/* dragged to resize the frame.                               */
/*                                                            */
/* Parameters: Pointer to a browser_data struct which is the  */
/*             parent of the set of frames in question;       */
/*                                                            */
/*             Number of the child to check.                  */
/*                                                            */
/* Returns:    1 if the frame's bottom edge can be dragged to */
/*             resize it, else 0 (due to NORESIZE specified   */
/*             on that frame or frames surrounding it).       */
/**************************************************************/

int frames_can_resize_bottom(const browser_data * restrict parent, int child)
{
  int            row, rows, col, cols;
  int            checkcol, checkchild;
  browser_data * checkc;
  int            canresize = 1;
  HStream      * frametoken;

  if (!parent->nchildren) return 0;

  frametoken = parent->children[child]->frame;

  if (frametoken && (frametoken->type & TYPE_NORESIZE)) return 0;

  /* Find out the number of rows and columns, and the */
  /* row and column number the given child falls in.  */

  frames_get_rc_info(parent, child, &rows, &cols, &row, &col);

  for (checkcol = 0; checkcol < cols; checkcol ++)
  {
    /* Check all columns in the row the child is in for NORESIZE frames */

    checkchild = row * cols + checkcol;
    checkc     = parent->children[checkchild];
    frametoken = checkc->frame;

    if (frametoken && (frametoken->type & TYPE_NORESIZE))
    {
      canresize = 0;
      break;
    }

    /* If not already on the last row, check the row below for NORESIZE frames */

    if (row < rows - 1)
    {
      checkchild = (row + 1) * cols + checkcol;
      checkc     = parent->children[checkchild];
      frametoken = checkc->frame;

      if (frametoken && (frametoken->type & TYPE_NORESIZE))
      {
        canresize = 0;
        break;
      }
    }
  }

  return canresize;
}

/**************************************************************/
/* frames_can_resize_left()                                   */
/*                                                            */
/* Returns 1 if the left edge of a given frame may be dragged */
/* to resize the frame.                                       */
/*                                                            */
/* Parameters: Pointer to a browser_data struct which is the  */
/*             parent of the set of frames in question;       */
/*                                                            */
/*             Number of the child to check.                  */
/*                                                            */
/* Returns:    1 if the frame's left edge can be dragged to   */
/*             resize it, else 0 (due to NORESIZE specified   */
/*             on that frame or frames surrounding it).       */
/**************************************************************/

int frames_can_resize_left(const browser_data * restrict parent, int child)
{
  int            row, rows, col, cols;
  int            checkrow, checkchild;
  browser_data * checkc;
  int            canresize = 1;
  HStream      * frametoken;

  if (!parent->nchildren) return 0;

  frametoken = parent->children[child]->frame;

  if (frametoken && (frametoken->type & TYPE_NORESIZE)) return 0;

  /* Find out the number of rows and columns, and the */
  /* row and column number the given child falls in.  */

  frames_get_rc_info(parent, child, &rows, &cols, &row, &col);

  for (checkrow = 0; checkrow < rows; checkrow ++)
  {
    /* Check all rows in the column the child is in for NORESIZE frames */

    checkchild = col + checkrow * cols;
    checkc     = parent->children[checkchild];
    frametoken = checkc->frame;

    if (frametoken && (frametoken->type & TYPE_NORESIZE))
    {
      canresize = 0;
      break;
    }

    /* If not already on column 0, check the column to the left for NORESIZE frames */

    if (col)
    {
      checkchild = col - 1 + checkrow * cols;
      checkc     = parent->children[checkchild];
      frametoken = checkc->frame;

      if (frametoken && (frametoken->type & TYPE_NORESIZE))
      {
        canresize = 0;
        break;
      }
    }
  }

  return canresize;
}

/**************************************************************/
/* frames_can_resize_right()                                  */
/*                                                            */
/* Returns 1 if the right edge of a given frame may be        */
/* dragged to resize the frame.                               */
/*                                                            */
/* Parameters: Pointer to a browser_data struct which is the  */
/*             parent of the set of frames in question;       */
/*                                                            */
/*             Number of the child to check.                  */
/*                                                            */
/* Returns:    1 if the frame's right edge can be dragged to  */
/*             resize it, else 0 (due to NORESIZE specified   */
/*             on that frame or frames surrounding it).       */
/**************************************************************/

int frames_can_resize_right(const browser_data * restrict parent, int child)
{
  int            row, rows, col, cols;
  int            checkrow, checkchild;
  browser_data * checkc;
  int            canresize = 1;
  HStream      * frametoken;

  if (!parent->nchildren) return 0;

  frametoken = parent->children[child]->frame;

  if (frametoken && (frametoken->type & TYPE_NORESIZE)) return 0;

  /* Find out the number of rows and columns, and the */
  /* row and column number the given child falls in.  */

  frames_get_rc_info(parent, child, &rows, &cols, &row, &col);

  for (checkrow = 0; checkrow < rows; checkrow ++)
  {
    /* Check all rows in the column the child is in for NORESIZE frames */

    checkchild = col + checkrow * cols;
    checkc     = parent->children[checkchild];
    frametoken = checkc->frame;

    if (frametoken && (frametoken->type & TYPE_NORESIZE))
    {
      canresize = 0;
      break;
    }

    /* If not already on the last column, check the column to the right for NORESIZE frames */

    if (col < cols - 1)
    {
      checkchild = col + 1 + checkrow * cols;
      checkc     = parent->children[checkchild];
      frametoken = checkc->frame;

      if (frametoken && (frametoken->type & TYPE_NORESIZE))
      {
        canresize = 0;
        break;
      }
    }
  }

  return canresize;
}

/**************************************************************/
/* frames_redraw_borders()                                    */
/*                                                            */
/* Redraws plinth borders and a resize sprite indicator       */
/* around frames in a given parent.                           */
/*                                                            */
/* Parameters: Pointer to a parent browser_data struct;       */
/*                                                            */
/*             A WimpRedrawWindow block describing the redraw */
/*             region.                                        */
/**************************************************************/

void frames_redraw_borders
     (
       const browser_data          * restrict b,
       const WimpRedrawWindowBlock * restrict r
     )
{
  int                         child;
  unsigned int                colour;
  BBox                        sbox;
  browser_data              * c;
  WimpGetWindowOutlineBlock   co;

  sbox = r->redraw_area;

  /* The bottom bit of the colour field is set to indicate */
  /* that a colour is present, as opposed to having no     */
  /* colour set. In the latter case default to background  */
  /* grey, in the former strip off the set bit. Then set   */
  /* that colour. Remember, we try to find a colour in the */
  /* FRAME tags, then failing that look in the FRAMESET    */
  /* (as in NN or MSIE 4).                                 */

  colour = 0;

  for (child = 0; child < b->nchildren && !(colour & 1); child ++)
  {
    c = b->children[child];
    if (c->frame) colour = c->frame->maxlen;
  }

  if (!(colour & 1)) colour = b->frameset->maxlen;

  if (!(colour & 1)) colour = Redraw_Colour_WNGrey;
  else               colour &= ~1;

  redraw_set_colour(colour);

  bbc_rectanglefill(sbox.xmin,
                    sbox.ymin,
                    sbox.xmax - sbox.xmin + 4,
                    sbox.ymax - sbox.ymin + 4);

  #ifdef TRACE

    if (tl & (1u<<23))
    {
      redraw_set_colour(0xff884400);
      bbc_rectangle(sbox.xmin,
                    sbox.ymin,
                    sbox.xmax - sbox.xmin - 1,
                    sbox.ymax - sbox.ymin - 1);

      redraw_set_colour(0xffaa6600);
      bbc_rectangle(sbox.xmin + 2,
                    sbox.ymin + 2,
                    sbox.xmax - sbox.xmin - 5,
                    sbox.ymax - sbox.ymin - 5);

      redraw_set_colour(0xffcc8800);
      bbc_rectangle(sbox.xmin + 4,
                    sbox.ymin + 4,
                    sbox.xmax - sbox.xmin - 9,
                    sbox.ymax - sbox.ymin - 9);
    }

  #endif

  /* Now loop round the children, drawing a 3D border around them */
  /* for border spacings >= 2, a black line for spacing 1, or     */
  /* nothing for spacing 0 (shouldn't then get redraw events for  */
  /* the parent, but you never know - e.g. user could have got a  */
  /* patch that allowed the frames to be moved by dragging on     */
  /* their work area).                                            */

  if (b->frameset->indent) /* Holds frame spacing (equiv. to border width) */
  {
    for (child = 0; child < b->nchildren; child ++)
    {
      c                = b->children[child];
      co.window_handle = c->window_handle;

      if (!wimp_get_window_outline(&co))
      {
        if (b->frameset->indent >= 2) redraw_set_colour(Redraw_Colour_AlmostWhite);
        else                          redraw_set_colour(0);

        /* Bottom edge */

        bbc_rectanglefill(co.outline.xmin,
                          co.outline.ymin - 2,
                          co.outline.xmax - co.outline.xmin + 1,
                          1);

        bbc_rectanglefill(co.outline.xmax,
                          co.outline.ymin,
                          1,
                          co.outline.ymax - co.outline.ymin - 1);

        /* Right hand edge */

        if (b->frameset->indent >= 2) redraw_set_colour(Redraw_Colour_PlinthGrey);

        /* Top edge */

        bbc_rectanglefill(co.outline.xmin - 2,
                          co.outline.ymax,
                          co.outline.xmax - co.outline.xmin + 3,
                          1);

        /* Left hand edge */

        bbc_rectanglefill(co.outline.xmin - 2,
                          co.outline.ymin - 2,
                          1,
                          co.outline.ymax - co.outline.ymin + 1);

        /* If the edges are draggable - for frame resizing - plot icons */
        /* indicate this.                                               */

        {
          int  width, height;
          BBox icon;

          /* Get the sprite size, work out a bounding box and plot */
          /* this as a virtual icon.                               */

          utils_read_sprite_size("resizeframe", &width, &height);

          /* Can only plot sprites if there's room... The additions to width and */
          /* height account for the border plotted above.                        */

          if (
               width  + 4 <= b->frameset->indent * wimpt_dx() &&
               height + 4 <= b->frameset->indent * wimpt_dy()
             )
          {
            WimpPlotIconBlock block;

            block.flags = 0x1700311B;
            block.data.ist.buffer = "";
            block.data.ist.validation = "Sresizeframe";
            block.data.ist.buffer_size = 4;

            if (frames_can_resize_right(b, child) && !printing)
            {
              /* Plot to right of frame */

              icon.xmin = co.outline.xmax + b->frameset->indent - width / 2;
              icon.ymin = co.outline.ymin + (co.outline.ymax - co.outline.ymin - height) / 2;
              icon.xmax = icon.xmin + width;
              icon.ymax = icon.ymin + height;

              coords_box_toworkarea(&icon, r);
              block.bbox  = icon;

              _swix(Wimp_PlotIcon,
                    _IN(1) | _INR(4,5),

                    &block,
                    0,
                    0);
            }

            if (frames_can_resize_bottom(b, child) && !printing)
            {
              /* Plot below the frame */

              icon.xmin = co.outline.xmin + (co.outline.xmax - co.outline.xmin - width) / 2;
              icon.ymin = co.outline.ymin - height / 2 - b->frameset->indent;
              icon.xmax = icon.xmin + width;
              icon.ymax = icon.ymin + height;

              coords_box_toworkarea(&icon, r);
              block.bbox  = icon;

              _swix(Wimp_PlotIcon,
                    _IN(1) | _INR(4,5),

                    &block,
                    0,
                    0);
            }

          /* Closure of long 'if' checking that there is room to plot */
          /* a resize handle for this frame, given that the frame     */
          /* itself doesn't have noresize specified. The code above   */
          /* executes if noresize is not specified and there's room   */
          /* to do the plot.                                          */
          }

        /* Closure of code block dealing with resize handle plotting */
        }

      /* Closure of long 'if' ensuring a wimp_get_window_outline */
      /* call didn't return an error - the code above executes   */
      /* if there was no error.                                  */
      }

    /* Closure of 'for' looping round all children */
    }

  /* Closure of long 'if' checking that the frameset has spacing */
  /* between frames. The code above executes if so.              */
  }
}

/**************************************************************/
/* frames_define_frameset()                                   */
/*                                                            */
/* For a given parent browser_data structure, sets up a       */
/* frameset within it. Frame details for each of the children */
/* thus generated are filled in later, when getting each      */
/* frame token from the HTML library.                         */
/*                                                            */
/* Parameters: Pointer to a browser_data struct representing  */
/*             the parent;                                    */
/*                                                            */
/*             Pointer to a token defining the frameset.      */
/*                                                            */
/* Assumes:    If the window already has a frameset defined,  */
/*             this set and all nested sets above it will be  */
/*             destroyed before the new one is created.       */
/**************************************************************/

_kernel_oserror * frames_define_frameset(browser_data * b, HStream * token)
{
  _kernel_oserror         * e;
  WimpGetWindowStateBlock   s;
  BBox                      frame_box;
  int                       rows, cols;
  int                       num_rows, num_cols;
  int                       width, height;
  int                       htop, hbot;
  int                       available_w, available_h;
  int                       start_x, start_y, accum_x, accum_y;
  int                       th, hh, vw;

  dprintf(("Fram", "frames_define_frameset: Called with browser_data %p\n",b));

  /* For ancestor windows, need to get the whole window */
  /* state and use the visible area, thus taking        */
  /* account of scrollbar presence etc.                 */

  if (!b->ancestor || !nested_wimp)
  {
    s.window_handle = b->window_handle;
    e = wimp_get_window_state(&s);
    if (e) return e;
  }

  /* However, for frames with frames about to be defined */
  /* inside them, we know that the scrollbars in this    */
  /* frame will disappear (if the nested wimp is in use) */
  /* and so need to use the window outline, not the      */
  /* visible area, as the latter may not be up to date.  */

  else
  {
    WimpGetWindowOutlineBlock o;

    o.window_handle = b->window_handle;
    e = wimp_get_window_outline(&o);
    if (e) return e;

    s.window_handle = o.window_handle;
    s.visible_area  = o.outline;
  }

  windows_return_tool_sizes(&th, &hh, &vw);

  /* Destroy any existing frameset */

  frames_collapse_set(b);

  /* Set up the basic starting parameters */

  b->nchildren = 0;
  b->frameset  = token;

  /* Work out the amount of visible area that toolbars are consuming */

  if (!controls.swap_bars)
  {
    htop = toolbars_url_height(b) + toolbars_button_height(b); /* Physically, the button bar and URL bar are just one real toolbar */
    hbot = toolbars_status_height(b);
  }
  else
  {
    htop = toolbars_status_height(b);
    hbot = toolbars_url_height(b) + toolbars_button_height(b);
  }

  if (htop) htop += wimpt_dy(); /* Account for lower border of upper toolbar, if present */
  if (hbot) hbot += wimpt_dy(); /* Account for upper border of lower toolbar, if present */

  /* Work out the available frame space width and height */

  available_w = s.visible_area.xmax - s.visible_area.xmin;
  available_h = s.visible_area.ymax - s.visible_area.ymin - htop - hbot;

  /* Start defining frames from the top left hand side of the visible area */

  start_x = s.visible_area.xmin;
  start_y = s.visible_area.ymax - htop;

  /* Work out the number of rows / columns */

  num_rows = token->rows;
  if (!num_rows) num_rows = 1;

  num_cols = token->cols;
  if (!num_cols) num_cols = 1;

  /* Account for frame spacing */

  available_w -= token->indent * 2 * (num_cols - 1); /* Scale to 2 OS units/pixel */
  available_h -= token->indent * 2 * (num_rows - 1);

  dprintf(("Fram", "frames_define_frameset: avail_w %d\n"
                   "                        avail_h %d\n"
                   "                        start_x %d\n"
                   "                        start_y %d\n"
                   "                        rows    %d\n"
                   "                        cols    %d\n\n",

                   available_w, available_h,
                   start_x,     start_y,
                   num_rows,    num_cols));

  #ifdef TRACE
    {
      int i;

      dprintf(("Fram", "frames_define_frameset: Size enumeration:\n\n"));

      for (i = 0; i < num_rows; i++)
      {
        if (token->name) dprintf(("Fram", "Row %d = &%08X\n",i,((int *) token->name)[i]));
        else             dprintf(("Fram", "Row %d = undefined\n",i));
      }

      dprintf(("Fram", "\n"));

      for (i = 0; i < num_cols; i++)
      {
        if (token->value) dprintf(("Fram", "Col %d = &%08X\n",i,((int *) token->value)[i]));
        else              dprintf(("Fram", "Col %d = undefined\n",i));
      }

      dprintf(("Fram", "\nframes_define_frameset: Proceeding\n"));
    }
  #endif

  /* Get all the sizes */

  frames_find_widths (b, available_w);
  frames_find_heights(b, available_h);

  /* Loop round defining each child */

  frame_box.ymax = start_y;
  accum_y        = 0;

  for (rows = 0; rows < num_rows; rows ++)
  {
    frame_box.xmin = start_x;
    accum_x        = 0;
    height         = b->frame_heights[rows];

    accum_y += height;

    if (rows == num_rows - 1)
    {
      /* For the last row, ensure it fills up the height - rounding errors in scaling */
      /* for the find_height calls often make this necessary.                         */

      if (accum_y != available_h) height -= accum_y - available_h, accum_y = available_h;
    }

    for (cols = 0; cols < num_cols; cols ++)
    {
      width = b->frame_widths[cols];

      accum_x += width;

      if (cols == num_cols - 1)
      {
        /* For the last column, ensure it fills up the width - rounding errors in scaling */
        /* for the find_width calls often make this necessary.                            */

        if (accum_x != available_w) width -= accum_x - available_w, accum_x = available_w;
      }

      /* Adjust the open coordinates to account for the scroll bars */
      /* present in the Res file. If these are not present, the     */
      /* reformatter will try to use the horizontal space a         */
      /* vertical bar normally occupies and things will get worse   */
      /* from there...                                              */

      frame_box.xmax = frame_box.xmin + width  - vw;
      frame_box.ymin = frame_box.ymax - height + hh;

      windows_create_browser("", b, &frame_box, NULL, Windows_CreateBrowser_Normal);

      windows_check_tools(last_browser, &frame_box);

      /* Make the child inherit some of the parent's characteristics */

      last_browser->underline_links = b->underline_links;
      last_browser->use_source_cols = b->use_source_cols;
      last_browser->show_foreground = b->show_foreground;
      last_browser->show_background = b->show_background;

      /* If this is the first frame for the ancestor, make it selected */

      if (last_browser->ancestor->nchildren == 1) last_browser->frame_selected = 1;

      /* Increment the position counters and loop round again */

      frame_box.xmin += width + token->indent * 2; /* Scale to 2 OS units/pixel */
    }

    frame_box.ymax -= height + token->indent * 2;
  }

  /* Finally, do a redraw of the parent to ensure borders are */
  /* up to date.                                              */

  coords_box_toworkarea(&s.visible_area, (WimpRedrawWindowBlock *) &s);

  e = wimp_force_redraw(b->window_handle,
                        s.visible_area.xmin,
                        s.visible_area.ymin,
                        s.visible_area.xmax,
                        s.visible_area.ymax);
  if (e) return e;

  dprintf(("Fram", "frames_define_frameset: Successful\n"));

  return NULL;
}

/**************************************************************/
/* frames_check_recursion()                                   */
/*                                                            */
/* Checks to see if a frameset is defining itself             */
/* recursively.                                               */
/*                                                            */
/* Parameters: Pointer to a browser_data struct which is the  */
/*             parent of the frame being checked;             */
/*                                                            */
/*             Pointer to a browser_data struct which         */
/*             represents the frame being checked;            */
/*                                                            */
/*             Pointer to an HStream struct that represents   */
/*             the <FRAME...> tag which is filling in the     */
/*             frame being checked.                           */
/*                                                            */
/* Returns:    1 if the definition is recursive, else 0.      */
/**************************************************************/

static int frames_check_recursion(browser_data * parent, browser_data * child, HStream * token)
{
  if (!token->src || !*token->src) return 0;

  while (parent)
  {
    char * fetch   = browser_fetch_url(parent);
    char * current = browser_current_url(parent);

    if (fetch   && *fetch   && !strcmp(fetch,   token->src)) return 1;
    if (current && *current && !strcmp(current, token->src)) return 1;

    parent = parent->real_parent;
  }

  return 0;
}

/**************************************************************/
/* frames_define_frame()                                      */
/*                                                            */
/* For a given parent browser_data structure, fills in the    */
/* next unfilled frame.                                       */
/*                                                            */
/* Parameters: Pointer to a browser_data struct representing  */
/*             the parent;                                    */
/*                                                            */
/*             Pointer to the token that is to define the     */
/*             child characteristics.                         */
/*                                                            */
/* Assumes:    If the parent has no children, the routine     */
/*             silently fails; If the parent's children are   */
/*             all defined (i.e. there appear to be more      */
/*             <frame> tags than defined by the initial       */
/*             <frameset> the routine, again, silently fails. */
/**************************************************************/

_kernel_oserror * frames_define_frame(browser_data * b, HStream * token)
{
  browser_data    * child;
  _kernel_oserror * e;

  dprintf(("Fram", "frames_define_frame: Called with browser_data %p\n",b));

  if (b->nchildren < b->filling_frame)
  {
    dprintf(("Fram", "frames_define_frame: nchildren %d, filling_frame %d - exitting!",b->nchildren,b->filling_frame));

    return NULL;
  }

  dprintf(("Fram", "frames_define_frame: Have not defined all children, so proceeding\n"));

  child = (browser_data *) b->children[b->filling_frame - 1];

  child->frame = token;

  if (token->name && *token->name)
  {
    e = memory_set_chunk_size(child, NULL, CK_NAME, strlen(token->name) + 1);
    if (e) return e;

    strcpy(child->window_name, token->name);
  }

  /* Set scrolling details */

  if (choices.no_scroll_bars)
  {
    child->frame_vscroll = child->frame_hscroll = 0;
  }
  else
  {
    int scroll;

    scroll = token->type & TYPE_SCROLLING_MASK;

    if      (scroll == TYPE_SCROLLING_NO)   child->frame_hscroll = 0;
    else if (scroll == TYPE_SCROLLING_AUTO) child->frame_hscroll = 1;
    else if (scroll == TYPE_SCROLLING_YES)  child->frame_hscroll = 2;

    child->frame_vscroll = child->frame_hscroll;
  }

  /* About to try and fetch the URL defined for the frame, */
  /* but need to first check it's not recursive.           */

  if (frames_check_recursion(b, child, token))
  {
    dprintf(("Fram", "frames_define_frame: Exitting with no fetch (recursive frameset)\n"));

    #ifdef STRICT_PARSER

      erb.errnum = Utils_Error_Custom_Message;

      StrNCpy0(erb.errmess,
               lookup_token("FramRcrs:Frames definition references itself recursively; could not proceed with the frames layout.",
                            0,0));

      show_error_ret(&erb);

    #endif

    return NULL;
  }

  dprintf(("Fram", "frames_define_frame: Exitting through fetchpage_new()\n"));

  return fetchpage_new(child, token->src, 1, 0, 0);
}

/**************************************************************/
/* frames_reopen_frame()                                      */
/*                                                            */
/* Reopens a given frame to a given outline size.             */
/*                                                            */
/* Parameters: Pointer to a browser_data struct representing  */
/*             the frame;                                     */
/*                                                            */
/*             Pointer to a browser_data struct representing  */
/*             the parent, or NULL if not known;              */
/*                                                            */
/*             Pointer to a BBox describing the new outline   */
/*             (screen coordinates) for the frame.            */
/**************************************************************/

static _kernel_oserror * frames_reopen_frame(browser_data * cb, browser_data * parent, BBox * frame_box)
{
  _kernel_oserror         * e = NULL;
  WimpGetWindowStateBlock   frame_state;
  IdBlock                   idb;
  WimpPollBlock             block;
  int                       title_height, hscroll_height, vscroll_width;

  if (!cb) return NULL;
  if (!parent) parent = cb->parent;
  if (!parent) parent = cb->real_parent;
  if (!parent) parent = cb->ancestor;
  if (!parent) return NULL;

  /* Get the tool sizes */

  windows_return_tool_sizes(&title_height, &hscroll_height, &vscroll_width);

  /* Get the frame's window details */

  frame_state.window_handle = cb->window_handle;

  e = wimp_get_window_state(&frame_state);
  if (e) return e;

  /* Fill in the open window request block with the new size */
  /* details, etc.                                           */

  block.open_window_request.window_handle = frame_state.window_handle;

  if (frame_state.flags & WimpWindow_VScroll) frame_box->xmax -= vscroll_width;
  if (frame_state.flags & WimpWindow_HScroll) frame_box->ymin += hscroll_height;

  block.open_window_request.visible_area = *frame_box;
  block.open_window_request.xscroll      = frame_state.xscroll;
  block.open_window_request.yscroll      = frame_state.yscroll;

  /* Sort out the window to open behind. */

  block.open_window_request.behind = find_behind(block.open_window_request.window_handle);

  /* Fill in the ID block and call the open window function */

  idb.self_id   = cb->self_id;
  idb.parent_id = parent->self_id;

  windows_open_browser(0, &block, &idb, cb);

  /* If the frame was highlighted, move the highlight too */

  if (cb == highlight_frame)
  {
    e = frames_highlight_frame(cb);
    if (e) return e;
  }

  return NULL;
}

/**************************************************************/
/* frames_resize_frameset()                                   */
/*                                                            */
/* For a given parent browser_data structure, resize a        */
/* frameset within its window. Compare with                   */
/* frames_resize_frame, which also resizes the parent (which  */
/* is useful when the natural progression of a calling        */
/* function would not include this itself).                   */
/*                                                            */
/* Parameters: Pointer to a browser_data struct representing  */
/*             the parent;                                    */
/*                                                            */
/*             Pointer to a BBox describing the required new  */
/*             window outline (in screen coordinates) of the  */
/*             parent frame.                                  */
/**************************************************************/

_kernel_oserror * frames_resize_frameset(browser_data * b, BBox * new_outline)
{
  _kernel_oserror         * e;
  WimpGetWindowStateBlock   s;
  BBox                      frame_box;
  HStream                 * token;
  int                       rows, cols;
  int                       num_rows, num_cols;
  int                       width, height;
  int                       htop, hbot;
  int                       available_w, available_h;
  int                       start_x, start_y, accum_x, accum_y;
  int                       th, hh, vw;
  int                       child;

  dprintf(("Fram", "frames_resize_frameset: Called with browser_data %p\n",b));

  /* Nothing to resize if there are no children */

  if (!b->nchildren) return NULL;

  /* Get the frame window details and tool sizes */

  s.window_handle = b->window_handle;
  e = wimp_get_window_state(&s);
  if (e) return e;

  s.visible_area = *new_outline;

  windows_return_tool_sizes(&th, &hh, &vw);

  /* Work out the amount of visible area that toolbars are consuming */

  if (!controls.swap_bars)
  {
    htop = toolbars_url_height(b) + toolbars_button_height(b); /* Physically, the button bar and URL bar are just one real toolbar */
    hbot = toolbars_status_height(b);
  }
  else
  {
    htop = toolbars_status_height(b);
    hbot = toolbars_url_height(b) + toolbars_button_height(b);
  }

  if (htop) htop += wimpt_dy(); /* Account for lower border of upper toolbar, if present */
  if (hbot) hbot += wimpt_dy(); /* Account for upper border of lower toolbar, if present */

  /* Work out the available frame space width and height */

  available_w = s.visible_area.xmax - s.visible_area.xmin;

  available_h = s.visible_area.ymax - s.visible_area.ymin
                - htop
                - hbot;

  /* Start resizing frames from the top left hand side of the visible area */

  start_x = s.visible_area.xmin;
  start_y = s.visible_area.ymax - htop;

  /* Work out the number of rows / columns */

  token = b->frameset;

  num_rows = token->rows;
  num_cols = token->cols;

  if (!num_rows) num_rows = 1;
  if (!num_cols) num_cols = 1;

  /* Account for frame spacing */

  available_w -= token->indent * 2 * (num_cols - 1); /* Scale to 2 OS units/pixel */
  available_h -= token->indent * 2 * (num_rows - 1);

  dprintf(("Fram", "frames_resize_frameset: avail_w %d\n"
                   "                        avail_h %d\n"
                   "                        start_x %d\n"
                   "                        start_y %d\n"
                   "                        rows    %d\n"
                   "                        cols    %d\n\n",

                   available_w, available_h,
                   start_x,     start_y,
                   num_rows,    num_cols));

  #ifdef TRACE
    {
      int i;

      dprintf(("Fram", "frames_resize_frameset: Size enumeration:\n\n"));

      for (i = 0; i < num_rows; i++)
      {
        if (token->name) dprintf(("Fram", "Row %d = &%08X\n",i,((int *) token->name)[i]));
        else             dprintf(("Fram", "Row %d = undefined\n",i));
      }

      dprintf(("Fram", "\n"));

      for (i = 0; i < num_cols; i++)
      {
        if (token->value) dprintf(("Fram", "Col %d = &%08X\n",i,((int *) token->value)[i]));
        else              dprintf(("Fram", "Col %d = undefined\n",i));
      }

      dprintf(("Fram", "\nframes_resize_frameset: Proceeding\n"));
    }
  #endif

  /* Get all the sizes */

  frames_find_widths (b, available_w);
  frames_find_heights(b, available_h);

  /* Loop round resizing each child */

  frame_box.ymax = start_y;
  accum_y        = 0;
  child          = 0;

  for (rows = 0; rows < num_rows; rows ++)
  {
    frame_box.xmin = start_x;
    accum_x        = 0;
    height         = b->frame_heights[rows];

    accum_y += height;

    if (rows == num_rows - 1)
    {
      /* For the last row, ensure it fills up the height - rounding errors in scaling */
      /* for the find_height calls often make this necessary.                         */

      if (accum_y != available_h) height -= accum_y - available_h, accum_y = available_h;
    }

    for (cols = 0; cols < num_cols; cols ++)
    {
      width = b->frame_widths[cols];

      accum_x += width;

      if (cols == num_cols - 1)
      {
        /* For the last column, ensure it fills up the width - rounding errors in scaling */
        /* for the find_width calls often make this necessary.                            */

        if (accum_x != available_w) width -= accum_x - available_w, accum_x = available_w;
      }

      frame_box.xmax = frame_box.xmin + width;
      frame_box.ymin = frame_box.ymax - height;

      /* Handle reopening the frame */

      e = frames_reopen_frame(b->children[child], b, &frame_box);
      if (e) return e;

      /* Prepare for the next frame */

      frame_box.xmin += width + token->indent * 2; /* Scale to 2 OS units/pixel */
      child++;
    }

    frame_box.ymax -= height + token->indent * 2;
  }

  /* Now do a redraw of the parent, to ensure that borders are up to date */

  coords_box_toworkarea(&s.visible_area, (WimpRedrawWindowBlock *) &s);

  e = wimp_force_redraw(b->window_handle,
                        s.visible_area.xmin,
                        s.visible_area.ymin,
                        s.visible_area.xmax,
                        s.visible_area.ymax);
  if (e) return e;

  dprintf(("Fram", "frames_resize_frameset: Successful\n"));

  return NULL;
}

/**************************************************************/
/* frames_resize_frame()                                      */
/*                                                            */
/* Resizes a given frame and its contents (e.g. any nested    */
/* frames). Compare with frames_resize_frameset, which        */
/* doesn't resize the parent - just the contents (which is    */
/* useful when the natural progression of a calling function  */
/* would resize the parent anyway).                           */
/*                                                            */
/* Parameters: Pointer to a browser_data struct representing  */
/*             the frame;                                     */
/*                                                            */
/*             Pointer to a BBox describing the required new  */
/*             frame outline (in screen coordinates).         */
/**************************************************************/

_kernel_oserror * frames_resize_frame(browser_data * b, BBox * new_outline)
{
  _kernel_oserror * e;

  /* Update any child frames first, if needed */

  if (b->nchildren)
  {
    e = frames_resize_frameset(b, new_outline);
    if (e) return e;
  }

  /* Now resize the given frame */

  return frames_reopen_frame(b, NULL, new_outline);
}

/**************************************************************/
/* frames_lock_frameset()                                     */
/*                                                            */
/* Examines the window sizes of a collection of frames in a   */
/* frameset, and rewrites the size descriptions in the        */
/* frameset representing HStream structures. This, then,      */
/* would mean that for example, subsequent resizes of the     */
/* ancestor window would maintain that new relative layout,   */
/* rather than 'snapping back' to values specified in the     */
/* HStream structure.                                         */
/*                                                            */
/* Where possible, the nature of the value is maintained -    */
/* e.g. a pixel value will stay as such, as will a percentage */
/* value (they don't all become pixel sizes). At present, all */
/* units are preserved though note that significant rounding  */
/* errors can occur with percentage values.                   */
/*                                                            */
/* Parameters: Pointer to a browser_data struct representing  */
/*             the parent for the frameset to lock.           */
/**************************************************************/

void frames_lock_frameset(browser_data * b)
{
  browser_data              * child;
  WimpGetWindowOutlineBlock   co;
  int                         units;
  int                         av_w, av_h;
  int                         wid,  hei;
  int                         col,  cols;
  int                         row,  rows;
  int                         tw,   th;

  if (!b->nchildren) return;

  rows = b->frameset->rows;
  cols = b->frameset->cols;

  /* Get the parent width/height to find available space. */

  co.window_handle = b->window_handle;
  if (wimp_get_window_outline(&co)) return;

  av_w = co.outline.xmax - co.outline.xmin;
  av_h = co.outline.ymax - co.outline.ymin;

  /* Now go through the columns. */

  for (col = 0; col < cols; col++)
  {
    tw    = ((int *) (b->frameset->value))[col];
    units = tw & ~ROWCOL_VALUE;

    /* Find the child and get information on it */

    child            = b->children[col];
    co.window_handle = child->window_handle;

    if (!wimp_get_window_outline(&co))
    {
      wid = co.outline.xmax - co.outline.xmin;

      /* Work out what the widths should be in the */
      /* given units.                              */

      if (units & ROWCOL_PERCENT)
      {
        tw = (100 * wid) / av_w;
      }
      else if (units & ROWCOL_STAR)
      {
        /* This works as 2*,* is the same as 422*,211*; */
        /* it's just fractions. So we can maintain the  */
        /* units but keep full accuracy here.           */

        tw = wid;
      }
      else
      {
        tw = wid / wimpt_dx();
      }

      /* Put the units field back in */

      tw |= units;

      /* Write the value to the token */

      ((int *) (b->frameset->value))[col] = tw;
    }
  }

  /* Now do rows - code is directly analogous to the  */
  /* columns stuff above, hence the lack of comments. */

  for (row = 0; row < rows; row++)
  {
    th    = ((int *) (b->frameset->name))[row];
    units = th & ~ROWCOL_VALUE;

    child            = b->children[row * (cols ? cols : 1)];
    co.window_handle = child->window_handle;

    if (!wimp_get_window_outline(&co))
    {
      hei = co.outline.ymax - co.outline.ymin;

      if (units & ROWCOL_PERCENT)
      {
        th = (100 * hei) / av_h;
      }
      else if (units & ROWCOL_STAR)
      {
        th = hei;
      }
      else
      {
        th = hei / wimpt_dy();
      }

      th |= units;

      ((int *) (b->frameset->name))[row] = th;
    }
  }

  /* ...and that's it. */
}

/**************************************************************/
/* frames_fetching()                                          */
/*                                                            */
/* Equivalent to fetch_fetching() in Fetch.c, but returns 1   */
/* if any of the frames in a frameset are fetching, else 0.   */
/*                                                            */
/* Parameters: Pointer to a browser_data struct which is the  */
/*             parent of any frames to check (so for an       */
/*             entire frameset, pass the ancestor in).        */
/*                                                            */
/* Returns:    1 if any of the frames are fetching, else 0.   */
/**************************************************************/

int frames_fetching(browser_data * b)
{
  int i;

  /* Recurse for child frames */

  if (b->nchildren)
  {
    for (i = 0; i < b->nchildren; i++)
    {
      if (frames_fetching(b->children[i])) return 1;
    }
  }

  if (fetch_fetching(b)) return 1;

  return 0;
}

/**************************************************************/
/* frames_dragging()                                          */
/*                                                            */
/* Returns 1 if any of the frames in a frameset are being     */
/* dragged around (their 'dragging' field in the representing */
/* browser_data struct is non-zero), else 0.                  */
/*                                                            */
/* Parameters: Pointer to a browser_data struct which is the  */
/*             parent of any frames to check (so for an       */
/*             entire frameset, pass the ancestor in).        */
/*                                                            */
/* Returns:    1 if any of the frames are dragging, else 0.   */
/**************************************************************/

int frames_dragging(browser_data * b)
{
  int i;

  /* Recurse for child frames */

  if (b->nchildren)
  {
    for (i = 0; i < b->nchildren; i++)
    {
      if (frames_dragging(b->children[i])) return 1;
    }
  }

  if (b->dragging) return 1;

  return 0;
}

/**************************************************************/
/* frames_abort_fetching()                                    */
/*                                                            */
/* Stops any page or image fetching, and stops any current    */
/* reformatting, in the given frame and all of its children   */
/* (if it has any). For ancestor browser_data structures, if  */
/* the relevant Choices and Messages file options have been   */
/* set, WebServe will be instructed to stop all fetching and  */
/* ditch any objects that are half fetched.                   */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the fetches to abort;                          */
/*                                                            */
/*             1 to also stop image fetching, else 0 to let   */
/*             image fetches continue;                        */
/*                                                            */
/*             1 to also stop file spooling (i.e. the         */
/*             save_link flag is set), else 0 to allow it to  */
/*             continue.                                      */
/**************************************************************/

void frames_abort_fetching(browser_data * b, int stop_images, int stop_spools)
{
  int i;

  /* Recurse for child frames */

  if (b->nchildren)
  {
    for (i = 0; i < b->nchildren; i++)
    {
      frames_abort_fetching(b->children[i], stop_images, stop_spools);
    }
  }

  /* May not want to stop file saves */

  if (!stop_spools && b->save_link) return;

  /* Stop the main fetch, stop any reformatting, and */
  /* stop image fetching.                            */

  fetch_cancel(b);
  reformat_stop(b);

  if (stop_images) image_abort_fetches(b);

  /* If this is the ancestor, tell WebServe to stop all activity */
  /* as well (if we're running full screen). Can't do this if    */
  /* targetting a frame as we may still want the other frames    */
  /* to keep fetching (e.g. the images in a navigation panel     */
  /* may still be coming in whilst that panel is used to open a  */
  /* link in some other frame).                                  */

  if (controls.stop_proxy && choices.full_screen && !b->ancestor) utils_stop_proxy();
}

/**************************************************************/
/* frames_collapse_child_tree()                               */
/*                                                            */
/* Used during traversal of the child tree to close down      */
/* unwanted frames. See the parameter list for the three      */
/* browser_data structs required.                             */
/*                                                            */
/* If the third browser has children the function will call   */
/* itself with the given base browser until the browser to    */
/* close has no children. It then closes it (unless it's the  */
/* same as the base browser, in which case the final exit     */
/* condition is reached) and decrements the parent's child    */
/* counter. Recursion then collapses a level.                 */
/*                                                            */
/* Parameters: Pointer to a browser_data struct for the base  */
/*             browser - that is, the one that won't be       */
/*             closed;                                        */
/*                                                            */
/*             Pointer to a browser_data struct that has the  */
/*             entry in its array of children for the browser */
/*             given in the next parameter, i.e. the parent   */
/*             browser;                                       */
/*                                                            */
/*             Pointer to a browser_data struct that may have */
/*             children, which is one of those that will be   */
/*             closed (unless it's the same as the base       */
/*             structure, which will tend to be the case on   */
/*             first call of the function).                   */
/**************************************************************/

static void frames_collapse_child_tree(browser_data * base, browser_data * real_parent, browser_data * close)
{
  if (!base || !close) return;

  while (close->nchildren) frames_collapse_child_tree(base, close, (browser_data *) close->children[close->nchildren - 1]);

  /* At this stage, might have called ourselves many times or */
  /* not at all. In any event, we've reached a browser with   */
  /* no children - it's at the end of the tree. So if this    */
  /* isn't the base browser - at which point the tree must be */
  /* closed down - close this browser.                        */

  if (close != base)
  {
    windows_close_browser(close);

    if (real_parent)
    {
      real_parent->nchildren --;

      if (!real_parent->nchildren) memory_set_chunk_size(real_parent, NULL, CK_CHIL, 0);
    }
  }

  close->frameset = NULL;

  return;
}

/**************************************************************/
/* frames_collapse_set()                                      */
/*                                                            */
/* Given a parent browser, close all children.                */
/*                                                            */
/* Parameters: Pointer to parent browser_data struct.         */
/**************************************************************/

void frames_collapse_set(browser_data * b)
{
  _swix(Hourglass_Start, _IN(0), 10);

  frames_collapse_child_tree(b, NULL, b);

  _swix(Hourglass_Off, 0);
}

/**************************************************************/
/* frames_find_named()                                        */
/*                                                            */
/* If a given name is found attached to the given window or   */
/* one of its children, return the browser_data struct for    */
/* that window (else NULL). The check is case insensitive.    */
/*                                                            */
/* Parameters: Pointer to a browser_data struct representing  */
/*             the parent (it and all its children are        */
/*             searched for the name);                        */
/*                                                            */
/*             Pointer to the name.                           */
/*                                                            */
/* Returns:    Pointer to the browser_data struct of that     */
/*             name, or NULL if not found.                    */
/**************************************************************/

browser_data * frames_find_named(browser_data * parent, char * name)
{
  int child = 0;

  if (!parent || !name || (name && !*name)) return NULL;

  /* If the parent matches the given name, return it */

  if (parent->window_name && *parent->window_name && !utils_strcasecmp(parent->window_name, name)) return parent;

  /* Otherwise, go through the list of children */

  if (parent->nchildren)
  {
    for (child = 0; child < parent->nchildren; child ++)
    {
      browser_data * found;

      found = frames_find_named((browser_data *) parent->children[child], name);

      if (found) return found;
    }
  }

  return NULL;
}

/**************************************************************/
/* frames_find_target()                                       */
/*                                                            */
/* Given a base browser and a frame target name, returns the  */
/* browser to which the target refers.                        */
/*                                                            */
/* Parameters: Pointer to a browser_data struct that the tag  */
/*             lies in;                                       */
/*                                                            */
/*             Pointer to the target string.                  */
/*                                                            */
/* Returns:    Pointer to the targetted browser, or NULL to   */
/*             create a new window. Note that if a new window */
/*             is not to be opened, NULL will *never* be      */
/*             passed, even if the target field of the given  */
/*             token is (say) NULL itself. I.e., the caller   */
/*             doesn't need to worry about such cases.        */
/*                                                            */
/* Assumes:    In the case of named target windows where the  */
/*             name cannot be found, NULL is returned - the   */
/*             caller is expected to then open a new window   */
/*             named after the target given to this function. */
/**************************************************************/

browser_data * frames_find_target(browser_data * b, const char * target)
{
  browser_data * ancestor;

  dprintf(("Fram", "frames_find_target: Called for %p, target %p\n",b,target));

  /* Only proceed if there's a browser, a token, and that */
  /* token has a target which isn't a null string.        */

  if (b && target && *target)
  {
    dprintf(("Fram", "frames_find_target: Target = '%s'\n",target));

    if (!utils_strcasecmp(target, "_top")) /* Open in the top level window */
    {
      ancestor = b->ancestor;
      if (!ancestor) ancestor = b->real_parent;
      if (!ancestor) ancestor = b;

      return ancestor;
    }
    else if (!utils_strcasecmp(target, "_self")) /* Open within the frame */
    {
      return b;
    }
    else if (!utils_strcasecmp(target, "_blank")) /* Open in a new, blank window */
    {
      return NULL;
    }
    else if (!utils_strcasecmp(target, "_parent")) /* Open in the frame's parent */
    {
      browser_data * parent = b->real_parent;

      /* _parent is taken by most page authors to mean the complete parent document, */
      /* not the parent frame. That is, if one document defines within itself a      */
      /* nested frameset, then _parent does not refer to any of those nested frames; */
      /* it refers to the frame holding the orignal document.                        */
      /*                                                                             */
      /* Consequently, we need to follow real_parent pointers until we reach a child */
      /* frame which has a non-NULL display URL field, i.e. a frame which has frames */
      /* but has got them by fetching a document.                                    */

      while (parent->real_parent && !parent->urlddata) parent = parent->real_parent;

      if (!parent) parent = b->parent;
      if (!parent) parent = b->ancestor;
      if (!parent) parent = b;

      return parent;
    }
    else
    {
      /* According to the frame spec at the time of writing, */
      /* names must start with an alphanumeric character.    */

      if (isalnum(*target)) /* Named window */
      {
        browser_data * named;

        ancestor = utils_ancestor(b);

        named = frames_find_named(ancestor, (char *) target);

        /* If the name isn't found, try all windows, rather */
        /* than just children of the specified one.         */

        if (!named)
        {
          browser_data * found = NULL;

          named = last_browser;

          while (named && !found)
          {
            if (
                 named->window_name                               &&
                 *named->window_name                              &&
                 !utils_strcasecmp(named->window_name, target)
               )
               found = named;

            else named = named->previous;
          }

          /* If the name still isn't there, supposed to open a */
          /* new window with this name. Flag this by returning */
          /* NULL.                                             */

          if (!found) return NULL;
          else        return found;
        }

        return named;
      }
    }
  }

  /* For null/unspecified targets, use the same frame */

  if (!target || !*target) return b;

  /* If all else fails, we don't recognise the name or it is */
  /* illegal. Safest to open in a new window, leaving the    */
  /* original document intact.                               */

  return NULL;
}

/**************************************************************/
/* frames_find_named_visible_same_index()                     */
/*                                                            */
/* If a given name is found attached to the given window or   */
/* one of its children, return the browser_data struct for    */
/* that window (else NULL). The check is case insensitive.    */
/*                                                            */
/* Only frames defined by one or more FRAMESET tags within    */
/* the *same* document are searched. Frames nested by one     */
/* frame loading a separate piece of HTML that defines        */
/* further frames itself do not have those children searched. */
/* In addition, only frames which have no children themselves */
/* will be searched (so the frame must be visible).           */
/*                                                            */
/* An index value is returned for the found child, if any. If */
/* the name matches the parent browser passed, the value will */
/* be invalid and must be ignored. For any other child        */
/* browsers it will be >= 0.                                  */
/*                                                            */
/* You can convert an index back to a pointer to the relevant */
/* browser_data structure with                                */
/* frames_find_browser_from_index.                            */
/*                                                            */
/* Parameters: Pointer to a browser_data struct representing  */
/*             the parent (it and all its children are        */
/*             searched for the name);                        */
/*                                                            */
/*             Pointer to the name to find;                   */
/*                                                            */
/*             Pointer to an int, in which the index value is */
/*             written.                                       */
/*                                                            */
/* Returns:    Pointer to the browser_data struct of that     */
/*             name, or NULL if not found; the int pointer is */
/*             updated with an index value as described above */
/*             (or may be left alone, or given an invalid     */
/*             value, if NULL or a pointer back to the given  */
/*             parent is returned directly).                  */
/**************************************************************/

browser_data * frames_find_named_visible_same_index(browser_data * parent, char * name, int * index)
{
  if (!parent || !index || !name || !*name) return NULL;

  *index = -1;

  return frames_find_named_visible_same_index_r(parent, name, index);
}

/**************************************************************/
/* frames_find_named_visible_same_index_r()                   */
/*                                                            */
/* Recursive back-end to                                      */
/* frames_find_named_visible_same_index.                      */
/*                                                            */
/* Parameters: As f_f_n_v_s_i :-)                             */
/*                                                            */
/* Returns:    As f_f_n_v_s_i.                                */
/**************************************************************/

static browser_data * frames_find_named_visible_same_index_r(browser_data * parent, char * name, int * index)
{
  int child;

  /* If the parent matches the given name and has no children, return it */

  if (
       !parent->nchildren                           &&
       parent->window_name                          &&
       *parent->window_name                         &&
       !utils_strcasecmp(parent->window_name, name)
     )
     return parent;

  /* Otherwise, go through the list of children */

  if (parent->nchildren)
  {
    for (child = 0; child < parent->nchildren; child ++)
    {
      browser_data * found;

      /* Only look at items which are related to this window directly. */
      /* If [...]->parent is NULL, the frame was defined not by nested */
      /* FRAMESET tags in one document but by individual FRAMESETs in  */
      /* separate documents - so we shouldn't look at those.           */

      if (parent->children[child]->parent)
      {
        /* If this child has no children, increment the index counter */

        if (!parent->children[child]->nchildren) *index = (*index) + 1;

        found = frames_find_named_visible_same_index_r(parent->children[child], name, index);

        if (found) return found;
      }
    }
  }

  return NULL;
}

/**************************************************************/
/* frames_find_browser_from_index()                           */
/*                                                            */
/* frames_find_named_visible_same_index gives an index value  */
/* for a given name frame if it is found according to various */
/* search parameters. This function will take an index value  */
/* and return the browser_data pointer that it corresponds    */
/* to.                                                        */
/*                                                            */
/* Parameters: Parent browser_data struct given to            */
/*             f_f_n_v_s_i;                                   */
/*                                                            */
/*             Index number from f_f_n_v_s_i.                 */
/*                                                            */
/* Returns:    Pointer to browser_data struct for given index */
/*             number, or NULL if nothing matches that index. */
/**************************************************************/

browser_data * frames_find_browser_from_index(browser_data * parent, int index)
{
  int count;

  count = -1;

  return frames_find_browser_from_index_r(parent, index, &count);
}

/**************************************************************/
/* frames_find_browser_from_index_r()                         */
/*                                                            */
/* Recursive back-end to frames_find_browser_from_index.      */
/*                                                            */
/* Parameters: Parent browser_data struct given to            */
/*             f_f_n_v_s_i;                                   */
/*                                                            */
/*             Index number from f_f_n_v_s_i;                 */
/*                                                            */
/*             Pointer to an int, which must be initialised   */
/*             to 0 to start with and will be updated by this */
/*             function.                                      */
/*                                                            */
/* Returns:    Same as frames_find_browser_from_index.        */
/*                                                            */
/* Assumes:    int pointer must not be NULL.                  */
/**************************************************************/

static browser_data * frames_find_browser_from_index_r(browser_data * parent, int index, int * count)
{
  int child;

  /* Does this parent match the required index number? */

  if (
       !parent->nchildren &&
       *count == index
     )
     return parent;

  /* Look through any children */

  if (parent->nchildren)
  {
    for (child = 0; child < parent->nchildren; child ++)
    {
      browser_data * found;

      if (parent->children[child]->parent)
      {
        if (!parent->children[child]->nchildren) *count = (*count) + 1;

        found = frames_find_browser_from_index_r(parent->children[child], index, count);

        if (found) return found;
      }
    }
  }

  return NULL;
}

/**************************************************************/
/* frames_find_another_frame()                                */
/*                                                            */
/* Given a browser_data structure which is a child frame,     */
/* finds the next structure in the frame layout - intended    */
/* for keyboard navigation through frames.                    */
/*                                                            */
/* Parameters: Pointer to a browser_data struct which is the  */
/*             current child frame;                           */
/*                                                            */
/*             Direction - 0 to find the logical next frame   */
/*             in the set, 1 to find the logical previous.    */
/*                                                            */
/* Returns:    Pointer to a browser_data struct which is the  */
/*             next child frame.                              */
/**************************************************************/

browser_data * frames_find_another_frame(browser_data * current, int dir)
{
  browser_data * ancestor;
  int            found = 0;

  if (!current) return NULL;

  ancestor = utils_ancestor(current);

  /* Finding the logical next frame */

  if (!dir)
  {
    browser_data * next;

    next = frames_find_next_frame(ancestor, current, &found);

    /* If 'next' is NULL, it could be because the current frame is  */
    /* the last one in the group. So try searching again from the   */
    /* ancestor (the routine will have updated 'found' so that it   */
    /* knows not to wait until it's got the current frame anymore). */

    if (!next) return frames_find_next_frame(ancestor, current, &found);

    return next;
  }
  else
  {
    browser_data * previous;

    previous = frames_find_previous_frame(ancestor, current, &found);

    if (!previous) return frames_find_previous_frame(ancestor, current, &found);

    return previous;
  }

  return NULL;
}

/**************************************************************/
/* frames_find_next_frame()                                   */
/*                                                            */
/* Recursive back-end to frames_find_another_frame, for       */
/* finding the logical next frame.                            */
/*                                                            */
/* Parameters: Pointer to the browser_data struct to compare  */
/*             with the current one;                          */
/*                                                            */
/*             Pointer to the browser_data struct which is    */
/*             the current one;                               */
/*                                                            */
/*             Pointer to an int which should contain 0 on    */
/*             entry and will be written to by the function.  */
/*                                                            */
/* Returns:    As frames_find_next_frame.                     */
/**************************************************************/

static browser_data * frames_find_next_frame(browser_data * check, browser_data * current, int * found)
{
  browser_data * b = NULL;
  int            c = 0;

  while (!b && c < check->nchildren)
  {
    if (check->children[c]->nchildren)
    {
      /* Recursive call, if the child has children */

      b = frames_find_next_frame(check->children[c], current, found);
    }
    else
    {
      /* 'found' is set to 1 if the 'current' browser_data struct */
      /* has been found. If so, we can use the next struct that   */
      /* has no children. If not, and the struct being examined   */
      /* is the same as 'current', set 'found'.                   */

      if (*found)
      {
        if (check->children[c] != current) return check->children[c];
      }
      else
      {
        if (check->children[c] == current) *found = 1;
      }
    }

    c++;
  }

  return b;
}

/**************************************************************/
/* frames_find_previous_frame()                               */
/*                                                            */
/* Recursive back-end to frames_find_another_frame, for       */
/* finding the logical previous frame.                        */
/*                                                            */
/* Parameters: Pointer to the browser_data struct to compare  */
/*             with the current one;                          */
/*                                                            */
/*             Pointer to the browser_data struct which is    */
/*             the current one;                               */
/*                                                            */
/*             Pointer to an int which should contain 0 on    */
/*             entry and will be written to by the function.  */
/*                                                            */
/* Returns:    As frames_find_next_frame.                     */
/**************************************************************/

static browser_data * frames_find_previous_frame(browser_data * check, browser_data * current, int * found)
{
  browser_data * b = NULL;
  int            c = check->nchildren - 1;

  while (!b && c >= 0)
  {
    if (check->children[c]->nchildren)
    {
      /* Recursive call, if the child has children */

      b = frames_find_previous_frame(check->children[c], current, found);
    }
    else
    {
      /* 'found' is set to 1 if the 'current' browser_data struct */
      /* has been found. If so, we can use the next struct that   */
      /* has no children. If not, and the struct being examined   */
      /* is the same as 'current', set 'found'.                   */

      if (*found)
      {
        if (check->children[c] != current) return check->children[c];
      }
      else
      {
        if (check->children[c] == current) *found = 1;
      }
    }

    c--;
  }

  return b;
}

/**************************************************************/
/* frames_highlight_frame()                                   */
/*                                                            */
/* Highlights a frame by showing a border around it, made of  */
/* 'Highlight' borderless window objects in the Res file. The */
/* highlight is removed by a NULL poll timer.                 */
/*                                                            */
/* Won't highlight ancestor windows, and only highlights if   */
/* keyboard control is enabled.                               */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the frame to be highlighted.                   */
/**************************************************************/

_kernel_oserror * frames_highlight_frame(browser_data * b)
{
  browser_data            * ancestor;
  WimpGetWindowStateBlock   s;
  WindowShowObjectBlock     show;
  _kernel_oserror         * e;
  BBox                      top, bottom, left, right;

  /* Don't do anything if not using keyboard control */

  if (!choices.keyboard_ctrl) return NULL;

  /* Don't do anything if an ancestor */

  if (!b->ancestor) return NULL;

  /* Otherwise, proceed */

  ancestor = utils_ancestor(b);

  s.window_handle = b->window_handle;

  e = wimp_get_window_state(&s);
  if (e) return e;

  /* If not already present, create the highlight window objects */

  if (!highlight_top)
  {
    e = toolbox_create_object(0, "Highlight", &highlight_top);
    if (e) return e;

    e = toolbox_create_object(0, "Highlight", &highlight_bottom);
    if (e) return e;

    e = toolbox_create_object(0, "Highlight", &highlight_left);
    if (e) return e;

    e = toolbox_create_object(0, "Highlight", &highlight_right);
    if (e) return e;

    /* Work out how long to leave the highlight visible */

    highlight_for = atoi(lookup_control("ShowFHighFor:30",0,0));

    if (highlight_for < 5)    highlight_for = 5;
    if (highlight_for > 1000) highlight_for = 3000;

    /* Register a null claimant to get rid of the objects shortly */

    register_null_claimant(Wimp_ENull, (WimpEventHandler *) frames_remove_highlight_timer, b);
  }

  /* Reset the highlight removal timer */

  e = _swix(OS_ReadMonotonicTime,
            _OUT(0),

            &highlight_timer);

  if (e) return e;

  /* Adjust the visible area coordinates for toolbars */

  {
    int htop, hbot;

    if (!controls.swap_bars)
    {
      htop = toolbars_url_height(b) + toolbars_button_height(b); /* Physically, the button bar and URL bar are just one real toolbar */
      hbot = toolbars_status_height(b);
    }
    else
    {
      htop = toolbars_status_height(b);
      hbot = toolbars_url_height(b) + toolbars_button_height(b);
    }

    if (htop) htop += wimpt_dy();
    if (hbot) hbot += wimpt_dy();

    s.visible_area.ymax -= htop;
    s.visible_area.ymin += hbot;
  }

  /* Work out the visible areas that the highlight windows should take */

  top.xmin    = s.visible_area.xmin + 2;  /**************************************/
  top.ymin    = s.visible_area.ymax - 6;  /* If a lower case letter shows where */
  top.xmax    = s.visible_area.xmax - 2;  /* the appropriate box covers pixels, */
  top.ymax    = s.visible_area.ymax - 2;  /* and the upper case letters show    */
                                          /* the actual pixels referenced by    */
  bottom.xmin = s.visible_area.xmin + 6;  /* (xmin, ymin) and (xmax, ymax),     */
  bottom.ymin = s.visible_area.ymin + 2;  /* then we are calculating:           */
  bottom.xmax = s.visible_area.xmax - 2;  /*                         S          */
  bottom.ymax = s.visible_area.ymin + 6;  /*           ssssssssssssss           */
                                          /*           s         T Rs           */
  left.xmin   = s.visible_area.xmin + 2;  /*           s ttttttttrr s           */
  left.ymin   = s.visible_area.ymin + 2;  /*           s TtLtttttrr s           */
  left.xmax   = s.visible_area.xmin + 6;  /*           s ll      RrBs           */
  left.ymax   = s.visible_area.ymax - 6;  /*           s llbbbbbbbb s           */
                                          /*           s LlBbbbbbbb s           */
  right.xmin  = s.visible_area.xmax - 6;  /*           s            s           */
  right.ymin  = s.visible_area.ymin + 6;  /*           Ssssssssssssss           */
  right.xmax  = s.visible_area.xmax - 2;  /*                                    */
  right.ymax  = s.visible_area.ymax - 2;  /**************************************/

  /* Show the objects */

  show.xscroll              = 0;
  show.yscroll              = 0;
  show.behind               = -1;
  show.visible_area         = top;
  show.parent_window_handle = ancestor->window_handle;
  show.alignment_flags      = 0;


  e = toolbox_show_object(Toolbox_ShowObject_AsSubWindow, highlight_top,    Toolbox_ShowObject_FullSpec, &show, ancestor->self_id, NULL_ComponentId);
  if (e) return e;

  /* The show call above can modify the contents of the 'show' */
  /* block passed to it, so need to fill in the values again   */
  /* for each call.                                            */

  show.xscroll              = 0;
  show.yscroll              = 0;
  show.behind               = -1;
  show.visible_area         = bottom;
  show.parent_window_handle = ancestor->window_handle;
  show.alignment_flags      = 0;

  e = toolbox_show_object(Toolbox_ShowObject_AsSubWindow, highlight_bottom, Toolbox_ShowObject_FullSpec, &show, ancestor->self_id, NULL_ComponentId);
  if (e) return e;

  /* Show them */

  show.xscroll              = 0;
  show.yscroll              = 0;
  show.behind               = -1;
  show.visible_area         = left;
  show.parent_window_handle = ancestor->window_handle;
  show.alignment_flags      = 0;

  e = toolbox_show_object(Toolbox_ShowObject_AsSubWindow, highlight_left,   Toolbox_ShowObject_FullSpec, &show, ancestor->self_id, NULL_ComponentId);
  if (e) return e;

  show.xscroll              = 0;
  show.yscroll              = 0;
  show.behind               = -1;
  show.visible_area         = right;
  show.parent_window_handle = ancestor->window_handle;
  show.alignment_flags      = 0;

  e = toolbox_show_object(Toolbox_ShowObject_AsSubWindow, highlight_right,  Toolbox_ShowObject_FullSpec, &show, ancestor->self_id, NULL_ComponentId);
  if (e) return e;

  /* Remember the highlighted frame, for functions other than */
  /* the null handler that removes the highlight (which gets  */
  /* passed the value directly).                              */

  highlight_frame = b;

  /* Finished */

  return NULL;
}

/**************************************************************/
/* frames_remove_highlight_timer()                            */
/*                                                            */
/* A NULL event handler which times how long the frame        */
/* highlight objects have been visible and removes them after */
/* a time defined by the Choices file 'ShowFHighFor' entry.   */
/*                                                            */
/* Registered by frames_highlight_frame.                      */
/*                                                            */
/* Parameters as standard for a Wimp event handler.           */
/**************************************************************/

static int frames_remove_highlight_timer(int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle)
{
  int time;

  if (_swix(OS_ReadMonotonicTime,
            _OUT(0),

            &time)) return 0;

  if (time - highlight_timer > highlight_for)
  {
    /* Delete the objects (so removing the highlight) */

    if (highlight_top)    toolbox_delete_object(0, highlight_top);
    if (highlight_bottom) toolbox_delete_object(0, highlight_bottom);
    if (highlight_left)   toolbox_delete_object(0, highlight_left);
    if (highlight_right)  toolbox_delete_object(0, highlight_right);

    /* Reset the Object IDs, so that the highlight routine knows it needs */
    /* to recreate the objects and reinstall this handler                 */

    highlight_top = highlight_bottom = highlight_left = highlight_right = 0;

    /* Clear the internal record of the highlighted frame */

    highlight_frame = NULL;

    /* Remove the handler */

    deregister_null_claimant(Wimp_ENull, (WimpEventHandler *) frames_remove_highlight_timer, handle);
  }

  return 0;
}

/**************************************************************/
/* frames_remove_highlight()                                  */
/*                                                            */
/* Removes the highlight objects from around a frame,         */
/* regardless of which frame is highlighted.                  */
/**************************************************************/

_kernel_oserror * frames_remove_highlight(void)
{
  _kernel_oserror * e;

  /* Delete the objects (so removing the highlight) */

  if (highlight_top)
  {
    e = toolbox_delete_object(0, highlight_top);
    if (e) return e;
  }

  if (highlight_bottom)
  {
    e = toolbox_delete_object(0, highlight_bottom);
    if (e) return e;
  }

  if (highlight_left)
  {
    e = toolbox_delete_object(0, highlight_left);
    if (e) return e;
  }

  if (highlight_right)
  {
    e = toolbox_delete_object(0, highlight_right);
    if (e) return e;
  }

  /* Reset the Object IDs, so that the highlight routine knows it needs */
  /* to recreate the objects and reinstall this handler                 */

  highlight_top = highlight_bottom = highlight_left = highlight_right = 0;

  /* Clear the internal record of the highlighted frame */

  highlight_frame = NULL;

  return NULL;
}

/**************************************************************/
/* frames_remove_highlight_if_present()                       */
/*                                                            */
/* Removes the highlight objects from around a given frame,   */
/* if that frame is highlighted.                              */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the highlight.                                 */
/**************************************************************/

_kernel_oserror * frames_remove_highlight_if_present(browser_data * b)
{
  if (b && b == highlight_frame) return frames_remove_highlight();

  return NULL;
}
@


1.23
log
@  Huge pile of changes bringing relatively ancient sources up to date.
Detail:
  This check-in includes Phoenix version 2.11 (26-Apr-2005); only the
  debug and JavaScript builds of Phoenix have been tested and resources
  will definitely be out of date for other versions. The various "!..."
  scripts have been updated to require a minimum of 2MB with no maximum
  limit for building, as CC 5.60 is quite RAM hungry.
Admin:
  Phoenix 2.11 JS builds OK, works reasonably well. Many outstanding
  issues of course, as this is a very outdated browser now.

Version 2.09. Tagged as 'Browse-2_09'
@
text
@d441 1
a441 1
void frames_get_rc_info(browser_data * parent, int child,
d794 1
a794 1
int frames_can_resize_top(browser_data * parent, int child)
d862 1
a862 1
int frames_can_resize_bottom(browser_data * parent, int child)
d930 1
a930 1
int frames_can_resize_left(browser_data * parent, int child)
d998 1
a998 1
int frames_can_resize_right(browser_data * parent, int child)
d1062 5
a1066 1
void frames_redraw_borders(browser_data * b, WimpRedrawWindowBlock * r)
d1188 1
a1188 1
          read_sprite_size("resizeframe", &width, &height);
@


1.22
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@d1627 1
a1627 1
  return fetchpage_new(child, token->src, 1, 0);
@


1.21
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@a46 5
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

d1295 1
a1295 3
  #ifdef TRACE
    if (tl & (1u<<17)) Printf("frames_define_frameset: Called with browser_data %p\n",b);
  #endif
d1376 11
a1387 1
    if (tl & (1u<<17))
d1389 1
a1389 14
      Printf("frames_define_frameset: avail_w %d\n"
             "                        avail_h %d\n"
             "                        start_x %d\n"
             "                        start_y %d\n"
             "                        rows    %d\n"
             "                        cols    %d\n\n",
             available_w,
             available_h,
             start_x,
             start_y,
             num_rows,
             num_cols);
      {
        int i;
d1391 1
a1391 1
        Printf("frames_define_frameset: Size enumeration:\n\n");
d1393 5
a1397 5
        for (i = 0; i < num_rows; i++)
        {
          if (token->name) Printf("Row %d = %p\n",i,((int *) token->name)[i]);
          else             Printf("Row %d = undefined\n",i);
        }
d1399 1
a1399 1
        Printf("\n");
d1401 5
a1405 5
        for (i = 0; i < num_cols; i++)
        {
          if (token->value) Printf("Col %d = %p\n",i,((int *) token->value)[i]);
          else              Printf("Col %d = undefined\n",i);
        }
d1407 1
a1407 2
        Printf("\nframes_define_frameset: Proceeding\n");
      }
d1495 1
a1495 3
  #ifdef TRACE
    if (tl & (1u<<17)) Printf("frames_define_frameset: Successful\n");
  #endif
d1561 1
a1561 3
  #ifdef TRACE
    if (tl & (1u<<17)) Printf("frames_define_frame: Called with browser_data %p\n",b);
  #endif
d1565 1
a1565 3
    #ifdef TRACE
      if (tl & (1u<<17)) Printf("frames_define_frame: nchildren %d, filling_frame %d - exitting!",b->nchildren,b->filling_frame);
    #endif
d1570 1
a1570 3
  #ifdef TRACE
    if (tl & (1u<<17)) Printf("frames_define_frame: Have not defined all children, so proceeding\n",b);
  #endif
d1608 1
a1608 3
    #ifdef TRACE
      if (tl & (1u<<17)) Printf("frames_define_frame: Exitting with no fetch (recursive frameset)\n");
    #endif
d1625 1
a1625 3
  #ifdef TRACE
    if (tl & (1u<<17)) Printf("frames_define_frame: Exitting through fetchpage_new()\n",b);
  #endif
d1736 1
a1736 3
  #ifdef TRACE
    if (tl & (1u<<17)) Printf("frames_resize_frameset: Called with browser_data %p\n",b);
  #endif
d1796 11
a1807 1
    if (tl & (1u<<17))
d1809 1
a1809 14
      Printf("frames_resize_frameset: avail_w %d\n"
             "                        avail_h %d\n"
             "                        start_x %d\n"
             "                        start_y %d\n"
             "                        rows    %d\n"
             "                        cols    %d\n\n",
             available_w,
             available_h,
             start_x,
             start_y,
             num_rows,
             num_cols);
      {
        int i;
d1811 1
a1811 1
        Printf("frames_resize_frameset: Size enumeration:\n\n");
d1813 5
a1817 5
        for (i = 0; i < num_rows; i++)
        {
          if (token->name) Printf("Row %d = %p\n",i,((int *) token->name)[i]);
          else             Printf("Row %d = undefined\n",i);
        }
d1819 1
a1819 1
        Printf("\n");
d1821 5
a1825 5
        for (i = 0; i < num_cols; i++)
        {
          if (token->value) Printf("Col %d = %p\n",i,((int *) token->value)[i]);
          else              Printf("Col %d = undefined\n",i);
        }
d1827 1
a1827 2
        Printf("\nframes_resize_frameset: Proceeding\n");
      }
d1900 1
a1900 3
  #ifdef TRACE
    if (tl & (1u<<17)) Printf("frames_resize_frameset: Successful\n");
  #endif
d2336 1
a2336 3
  #ifdef TRACE
    if (tl & (1u<<17)) Printf("frames_find_target: Called for %p, target %p\n",b,target);
  #endif
d2343 1
a2343 3
    #ifdef TRACE
      if (tl & (1u<<17)) Printf("frames_find_target: Target = '%s'\n",target);
    #endif
@


1.20
log
@Another intermediate version, rather more stable than the last I hope.

Lazy clearing of backgrounds - pages with the same background image or
colour won't be cleared to grey when going from one to the next anymore.

BODY element onLoad script attribute implemented properly (beyond the
Customer hackery).

Images use independent flex blocks for URL and transient fetch data;
greatly improved data throughput in image system as a result. Image
renumbering implemented - speeds up closing of pages / frames with
many images. Image xref is still rather slow though and images with
a 0 width or height specified in the HTML still cause an incorrectly
formatted page to appear.

Have, I think, fixed the "stops anti-aliasing" bug. Noticed that some
background images are not being processed as Fast (e.g. at the
Fibblesnork Lego Guide) - that old problem has reappeared, then.

Background images would cross reference when two pages had the same
background colour set in <body> elements but one was configured to use
document colours and one wasn't (so xref should not occur). Code was
looking at b->background_colour; corrected to call redraw_backcol(b).

Titles were added to the history according to the fetch URL not the
display URL, though the former is more likely to be in the history due
to the code execution order in the fetcher; changed to see whether this
improves upon the rather hit and miss addition of titles.

The 'about:' page now gets entered into the history (makes for much more
sensible behaviour if it is configured as a Home page, for example).
@
text
@d15 12
a26 10
/***************************************************/
/* File   : Frames.c                               */
/*                                                 */
/* Purpose: Frame handling functions for the       */
/*          browser.                               */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 19-Mar-97: Created.                    */
/***************************************************/
d32 9
a40 2
#include "swis.h"
#include "flex.h"
d42 2
a43 1
#include "HTMLLib.h" /* HTML library API, Which will include html2_ext.h, tags.h and struct.h */
d45 1
a45 6
#include "wimp.h"
#include "wimplib.h"
#include "event.h"

#include "toolbox.h"
#include "window.h"
d47 4
a50 1
#include "NestWimp.h"
a51 1
#include "svcprint.h"
d95 18
a112 20
/*************************************************/
/* frames_find_widths()                          */
/*                                               */
/* Constructs an array pointed to by the         */
/* frame_widths field of a browser_data struct,  */
/* containing the widths of frames described by  */
/* the token pointed to in the frameset field of */
/* the browser_data structure.                   */
/*                                               */
/* These frame widths are set to occupy the      */
/* entire space given to the function; any       */
/* border and scroll bar size considerations     */
/* must therefore be done externally.            */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the frameset;         */
/*                                               */
/*             The available width the frameset  */
/*             must fit inside, in OS units.     */
/*************************************************/
d257 18
a274 20
/*************************************************/
/* frames_find_heights()                         */
/*                                               */
/* Constructs an array pointed to by the         */
/* frame_heights field of a browser_data struct, */
/* containing the heights of frames described by */
/* the token pointed to in the frameset field of */
/* the browser_data structure.                   */
/*                                               */
/* These frame heights are set to occupy the     */
/* entire space given to the function; any       */
/* border and scroll bar size considerations     */
/* must therefore be done externally.            */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the frameset;         */
/*                                               */
/*             The available height the frameset */
/*             must fit inside, in OS units.     */
/*************************************************/
d419 26
a444 30
/*************************************************/
/* frames_get_rc_info()                          */
/*                                               */
/* Returns the number of rows and columns in a   */
/* frameset, and the row and column that a       */
/* specific child lies in.                       */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             which is the parent of the set of */
/*             frames in question;               */
/*                                               */
/*             The child number, or -1 if not    */
/*             interested in this info;          */
/*                                               */
/*             Pointer to an int, into which the */
/*             number of rows is placed;         */
/*                                               */
/*             Pointer to an int, into which the */
/*             number of columns is placed;      */
/*                                               */
/*             Pointer to an int, into which the */
/*             row the child lies in is placed;  */
/*                                               */
/*             Pointer to an int, into which the */
/*             column the child lies in is       */
/*             placed.                           */
/*                                               */
/* Assumes:    Any of the four int pointers may  */
/*             be NULL.                          */
/*************************************************/
d477 49
a525 59
/*************************************************/
/* frames_find_pointer_in_frameset()             */
/*                                               */
/* Works out where in a frameset a given screen  */
/* coordinate is. The returned row and column    */
/* values are -1 if the coordinate lies within   */
/* a row or column, or are the row below, or     */
/* column to the right of the coordinate if it   */
/* lies in the border between two rows or        */
/* columns. So the value 0 would never be        */
/* returned for either.                          */
/*                                               */
/* In the event that the pointer lies between a  */
/* row or column but that row or column edge     */
/* cannot be resized due to specifiers in the    */
/* HTML source for the frameset, -2 will be      */
/* returned.                                     */
/*                                               */
/* Given that this is likely to be called by     */
/* routines handling border-driven resizing of   */
/* frames, the routine can constrain the pointer */
/* to a bounding box appropriate to the frames   */
/* surrounding it if required. This may be done  */
/* via. a mouse_rectangle or Wimp_DragBox.       */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             representing the parent frame;    */
/*                                               */
/*             X screen coordinate to check;     */
/*                                               */
/*             Y screen coordinate to check;     */
/*                                               */
/*             Pointer to an int, into which the */
/*             row number (see above) will be    */
/*             written;                          */
/*                                               */
/*             Pointer to an int, into which the */
/*             column number (see above) will be */
/*             written;                          */
/*                                               */
/*             Pointer to an int, into which the */
/*             pointer's x offset from the left  */
/*             edge of the frame left of it, if  */
/*             applicable, is returned;          */
/*                                               */
/*             Pointer to an int, into which the */
/*             pointer's y offset from the top   */
/*             edge of the frame below it, if    */
/*             applicable, is returned;          */
/*                                               */
/*             1 to constrain the pointer (again */
/*             see above for more details) with  */
/*             Wimp_DragBox, 2 to constrain with */
/*             mouse_rectangle, 0 to not do any  */
/*             pointer constraint.               */
/*                                               */
/* Assumes:    Either of the four int pointers   */
/*             may be NULL.                      */
/*************************************************/
d783 15
a797 17
/*************************************************/
/* frames_can_resize_top()                       */
/*                                               */
/* Returns 1 if the top edge of a given frame    */
/* may be dragged to resize the frame.           */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             which is the parent of the set of */
/*             frames in question;               */
/*                                               */
/*             Number of the child to check.     */
/*                                               */
/* Returns:    1 if the frame's top edge can be  */
/*             dragged to resize it, else 0 (due */
/*             to NORESIZE specified on that     */
/*             frame or frames surrounding it).  */
/*************************************************/
d851 15
a865 18
/*************************************************/
/* frames_can_resize_bottom()                    */
/*                                               */
/* Returns 1 if the bottom edge of a given frame */
/* may be dragged to resize the frame.           */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             which is the parent of the set of */
/*             frames in question;               */
/*                                               */
/*             Number of the child to check.     */
/*                                               */
/* Returns:    1 if the frame's bottom edge can  */
/*             be dragged to resize it, else 0   */
/*             (due to NORESIZE specified on     */
/*             that frame or frames surrounding  */
/*             it).                              */
/*************************************************/
d919 15
a933 17
/*************************************************/
/* frames_can_resize_left()                      */
/*                                               */
/* Returns 1 if the left edge of a given frame   */
/* may be dragged to resize the frame.           */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             which is the parent of the set of */
/*             frames in question;               */
/*                                               */
/*             Number of the child to check.     */
/*                                               */
/* Returns:    1 if the frame's left edge can be */
/*             dragged to resize it, else 0 (due */
/*             to NORESIZE specified on that     */
/*             frame or frames surrounding it).  */
/*************************************************/
d987 15
a1001 18
/*************************************************/
/* frames_can_resize_right()                     */
/*                                               */
/* Returns 1 if the right edge of a given frame  */
/* may be dragged to resize the frame.           */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             which is the parent of the set of */
/*             frames in question;               */
/*                                               */
/*             Number of the child to check.     */
/*                                               */
/* Returns:    1 if the frame's right edge can   */
/*             be dragged to resize it, else 0   */
/*             (due to NORESIZE specified on     */
/*             that frame or frames surrounding  */
/*             it).                              */
/*************************************************/
d1055 11
a1065 12
/*************************************************/
/* frames_redraw_borders()                       */
/*                                               */
/* Redraws plinth borders and a resize sprite    */
/* indicator around frames in a given parent.    */
/*                                               */
/* Parameters: Pointer to a parent browser_data  */
/*             struct;                           */
/*                                               */
/*             A WimpRedrawWindow block          */
/*             describing the redraw region.     */
/*************************************************/
d1269 17
a1285 21
/*************************************************/
/* frames_define_frameset()                      */
/*                                               */
/* For a given parent browser_data structure,    */
/* sets up a frameset within it. Frame details   */
/* for each of the children thus generated are   */
/* filled in later, when getting each frame      */
/* token from the HTML library.                  */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             representing the parent;          */
/*                                               */
/*             Pointer to a token defining the   */
/*             frameset.                         */
/*                                               */
/* Assumes:    If the window already has a       */
/*             frameset defined, this set and    */
/*             all nested sets above it will be  */
/*             destroyed before the new one is   */
/*             created.                          */
/*************************************************/
d1513 18
a1530 22
/*************************************************/
/* frames_check_recursion()                      */
/*                                               */
/* Checks to see if a frameset is defining       */
/* itself recursively.                           */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             which is the parent of the frame  */
/*             being checked;                    */
/*                                               */
/*             Pointer to a browser_data struct  */
/*             which represents the frame being  */
/*             checked;                          */
/*                                               */
/*             Pointer to an HStream struct that */
/*             represents the <FRAME...> tag     */
/*             which is filling in the frame     */
/*             being checked.                    */
/*                                               */
/* Returns:    1 if the definition is recursive, */
/*             else 0.                           */
/*************************************************/
d1550 18
a1567 20
/*************************************************/
/* frames_define_frame()                         */
/*                                               */
/* For a given parent browser_data structure,    */
/* fills in the next unfilled frame.             */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             representing the parent;          */
/*                                               */
/*             Pointer to the token that is to   */
/*             define the child characteristics. */
/*                                               */
/* Assumes:    If the parent has no children,    */
/*             the routine silently fails;       */
/*             If the parent's children are all  */
/*             defined (i.e. there appear to be  */
/*             more <frame> tags than defined by */
/*             the initial <frameset> the        */
/*             routine, again, silently fails.   */
/*************************************************/
d1653 14
a1666 17
/*************************************************/
/* frames_reopen_frame()                         */
/*                                               */
/* Reopens a given frame to a given outline      */
/* size.                                         */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             representing the frame;           */
/*                                               */
/*             Pointer to a browser_data struct  */
/*             representing the parent, or NULL  */
/*             if not known;                     */
/*                                               */
/*             Pointer to a BBox describing the  */
/*             new outline (screen coordinates)  */
/*             for the frame.                    */
/*************************************************/
d1727 16
a1742 18
/*************************************************/
/* frames_resize_frameset()                      */
/*                                               */
/* For a given parent browser_data structure,    */
/* resize a frameset within its window. Compare  */
/* with frames_resize_frame, which also resizes  */
/* the parent (which is useful when the natural  */
/* progression of a calling function would not   */
/* include this itself).                         */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             representing the parent;          */
/*                                               */
/*             Pointer to a BBox describing the  */
/*             required new window outline (in   */
/*             screen coordinates) of the parent */
/*             frame.                            */
/*************************************************/
d1936 15
a1950 18
/*************************************************/
/* frames_resize_frame()                         */
/*                                               */
/* Resizes a given frame and its contents (e.g.  */
/* any nested frames). Compare with              */
/* frames_resize_frameset, which doesn't resize  */
/* the parent - just the contents (which is      */
/* useful when the natural progression of a      */
/* calling function would resize the parent      */
/* anyway).                                      */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             representing the frame;           */
/*                                               */
/*             Pointer to a BBox describing the  */
/*             required new frame outline (in    */
/*             screen coordinates).              */
/*************************************************/
d1969 20
a1988 24
/*************************************************/
/* frames_lock_frameset()                        */
/*                                               */
/* Examines the window sizes of a collection of  */
/* frames in a frameset, and rewrites the size   */
/* descriptions in the frameset representing     */
/* HStream structures. This, then, would mean    */
/* that for example, subsequent resizes of the   */
/* ancestor window would maintain that new       */
/* relative layout, rather than 'snapping back'  */
/* to values specified in the HStream structure. */
/*                                               */
/* Where possible, the nature of the value is    */
/* maintained - e.g. a pixel value will stay     */
/* as such, as will a percentage value (they     */
/* don't all become pixel sizes). At present,    */
/* all units are preserved though note that      */
/* significant rounding errors can occur with    */
/* percentage values.                            */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             representing the parent for the   */
/*             frameset to lock.                 */
/*************************************************/
d2097 12
a2108 15
/*************************************************/
/* frames_fetching()                             */
/*                                               */
/* Equivalent to fetch_fetching() in Fetch.c,    */
/* but returns 1 if any of the frames in a       */
/* frameset are fetching, else 0.                */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             which is the parent of any frames */
/*             to check (so for an entire        */
/*             frameset, pass the ancestor in).  */
/*                                               */
/* Returns:    1 if any of the frames are        */
/*             fetching, else 0.                 */
/*************************************************/
d2129 13
a2141 16
/*************************************************/
/* frames_dragging()                             */
/*                                               */
/* Returns 1 if any of the frames in a frameset  */
/* are being dragged around (their 'dragging'    */
/* field in the representing browser_data struct */
/* is non-zero), else 0.                         */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             which is the parent of any frames */
/*             to check (so for an entire        */
/*             frameset, pass the ancestor in).  */
/*                                               */
/* Returns:    1 if any of the frames are        */
/*             dragging, else 0.                 */
/*************************************************/
d2162 20
a2181 23
/*************************************************/
/* frames_abort_fetching()                       */
/*                                               */
/* Stops any page or image fetching, and stops   */
/* any current reformatting, in the given frame  */
/* and all of its children (if it has any). For  */
/* ancestor browser_data structures, if the      */
/* relevant Choices and Messages file options    */
/* have been set, WebServe will be instructed to */
/* stop all fetching and ditch any objects that  */
/* are half fetched.                             */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the fetches to abort; */
/*                                               */
/*             1 to also stop image fetching,    */
/*             else 0 to let image fetches       */
/*             continue;                         */
/*                                               */
/*             1 to also stop file spooling      */
/*             (i.e. the save_link flag is set), */
/*             else 0 to allow it to continue.   */
/*************************************************/
d2219 29
a2247 35
/*************************************************/
/* frames_collapse_child_tree()                  */
/*                                               */
/* Used during traversal of the child tree to    */
/* close down unwanted frames. See the parameter */
/* list for the three browser_data structs       */
/* required.                                     */
/*                                               */
/* If the third browser has children the         */
/* function will call itself with the given base */
/* browser until the browser to close has no     */
/* children. It then closes it (unless it's the  */
/* same as the base browser, in which case the   */
/* final exit condition is reached) and          */
/* decrements the parent's child counter.        */
/* Recursion then collapses a level.             */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             for the base browser - that is,   */
/*             the one that won't be closed;     */
/*                                               */
/*             Pointer to a browser_data struct  */
/*             that has the entry in its array   */
/*             of children for the browser given */
/*             in the next parameter, i.e. the   */
/*             parent browser;                   */
/*                                               */
/*             Pointer to a browser_data struct  */
/*             that may have children, which     */
/*             is one of those that will be      */
/*             closed (unless it's the same as   */
/*             the base structure, which will    */
/*             tend to be the case on first      */
/*             call of the function).            */
/*************************************************/
d2278 7
a2284 8
/*************************************************/
/* frames_collapse_set()                         */
/*                                               */
/* Given a parent browser, close all children.   */
/*                                               */
/* Parameters: Pointer to parent browser_data    */
/*             struct.                           */
/*************************************************/
d2295 16
a2310 19
/*************************************************/
/* frames_find_named()                           */
/*                                               */
/* If a given name is found attached to the      */
/* given window or one of its children, return   */
/* the browser_data struct for that window (else */
/* NULL). The check is case insensitive.         */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             representing the parent (it and   */
/*             all its children are searched for */
/*             the name);                        */
/*                                               */
/*             Pointer to the name.              */
/*                                               */
/* Returns:    Pointer to the browser_data       */
/*             struct of that name, or NULL if   */
/*             not found.                        */
/*************************************************/
d2339 23
a2361 29
/*************************************************/
/* frames_find_target()                          */
/*                                               */
/* Given a base browser and a frame target name, */
/* returns the browser to which the target       */
/* refers.                                       */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             that the tag lies in;             */
/*                                               */
/*             Pointer to the target string.     */
/*                                               */
/* Returns:    Pointer to the targetted browser, */
/*             or NULL to create a new window.   */
/*             Note that if a new window is not  */
/*             to be opened, NULL will *never*   */
/*             be passed, even if the target     */
/*             field of the given token is (say) */
/*             NULL itself. I.e., the caller     */
/*             doesn't need to worry about such  */
/*             cases.                            */
/*                                               */
/* Assumes:    In the case of named target       */
/*             windows where the name cannot be  */
/*             found, NULL is returned - the     */
/*             caller is expected to then open a */
/*             new window named after the target */
/*             given to this function.           */
/*************************************************/
d2475 39
a2513 47
/*************************************************/
/* frames_find_named_visible_same_index()        */
/*                                               */
/* If a given name is found attached to the      */
/* given window or one of its children, return   */
/* the browser_data struct for that window (else */
/* NULL). The check is case insensitive.         */
/*                                               */
/* Only frames defined by one or more FRAMESET   */
/* tags within the *same* document are searched. */
/* Frames nested by one frame loading a separate */
/* piece of HTML that defines further frames     */
/* itself do not have those children searched.   */
/* In addition, only frames which have no        */
/* children themselves will be searched (so the  */
/* frame must be visible).                       */
/*                                               */
/* An index value is returned for the found      */
/* child, if any. If the name matches the parent */
/* browser passed, the value will be invalid and */
/* must be ignored. For any other child browsers */
/* it will be >= 0.                              */
/*                                               */
/* You can convert an index back to a pointer to */
/* the relevant browser_data structure with      */
/* frames_find_browser_from_index.               */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             representing the parent (it and   */
/*             all its children are searched for */
/*             the name);                        */
/*                                               */
/*             Pointer to the name to find;      */
/*                                               */
/*             Pointer to an int, in which the   */
/*             index value is written.           */
/*                                               */
/* Returns:    Pointer to the browser_data       */
/*             struct of that name, or NULL if   */
/*             not found; the int pointer is     */
/*             updated with an index value as    */
/*             described above (or may be left   */
/*             alone, or given an invalid value, */
/*             if NULL or a pointer back to the  */
/*             given parent is returned          */
/*             directly).                        */
/*************************************************/
d2524 10
a2533 10
/*************************************************/
/* frames_find_named_visible_same_index_r()      */
/*                                               */
/* Recursive back-end to                         */
/* frames_find_named_visible_same_index.         */
/*                                               */
/* Parameters: As f_f_n_v_s_i :-)                */
/*                                               */
/* Returns:    As f_f_n_v_s_i.                   */
/*************************************************/
d2578 17
a2594 19
/*************************************************/
/* frames_find_browser_from_index()              */
/*                                               */
/* frames_find_named_visible_same_index gives an */
/* index value for a given name frame if it is   */
/* found according to various search parameters. */
/* This function will take an index value and    */
/* return the browser_data pointer that it       */
/* corresponds to.                               */
/*                                               */
/* Parameters: Parent browser_data struct given  */
/*             to f_f_n_v_s_i;                   */
/*                                               */
/*             Index number from f_f_n_v_s_i.    */
/*                                               */
/* Returns:    Pointer to browser_data struct    */
/*             for given index number, or NULL   */
/*             if nothing matches that index.    */
/*************************************************/
d2605 18
a2622 21
/*************************************************/
/* frames_find_browser_from_index_r()            */
/*                                               */
/* Recursive back-end to                         */
/* frames_find_browser_from_index.               */
/*                                               */
/* Parameters: Parent browser_data struct given  */
/*             to f_f_n_v_s_i;                   */
/*                                               */
/*             Index number from f_f_n_v_s_i;    */
/*                                               */
/*             Pointer to an int, which must be  */
/*             initialised to 0 to start with    */
/*             and will be updated by this       */
/*             function.                         */
/*                                               */
/* Returns:    Same as                           */
/*             frames_find_browser_from_index.   */
/*                                               */
/* Assumes:    int pointer must not be NULL.     */
/*************************************************/
d2658 16
a2673 18
/*************************************************/
/* frames_find_another_frame()                   */
/*                                               */
/* Given a browser_data structure which is a     */
/* child frame, finds the next structure in the  */
/* frame layout - intended for keyboard          */
/* navigation through frames.                    */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             which is the current child frame; */
/*                                               */
/*             Direction - 0 to find the logical */
/*             next frame in the set, 1 to find  */
/*             the logical previous.             */
/*                                               */
/* Returns:    Pointer to a browser_data struct  */
/*             which is the next child frame.    */
/*************************************************/
d2715 17
a2731 20
/*************************************************/
/* frames_find_next_frame()                      */
/*                                               */
/* Recursive back-end to                         */
/* frames_find_another_frame, for finding the    */
/* logical next frame.                           */
/*                                               */
/* Parameters: Pointer to the browser_data       */
/*             struct to compare with the        */
/*             current one;                      */
/*                                               */
/*             Pointer to the browser_data       */
/*             struct which is the current one;  */
/*                                               */
/*             Pointer to an int which should    */
/*             contain 0 on entry and will be    */
/*             written to by the function.       */
/*                                               */
/* Returns:    As frames_find_next_frame.        */
/*************************************************/
d2769 17
a2785 20
/*************************************************/
/* frames_find_previous_frame()                  */
/*                                               */
/* Recursive back-end to                         */
/* frames_find_another_frame, for finding the    */
/* logical previous frame.                       */
/*                                               */
/* Parameters: Pointer to the browser_data       */
/*             struct to compare with the        */
/*             current one;                      */
/*                                               */
/*             Pointer to the browser_data       */
/*             struct which is the current one;  */
/*                                               */
/*             Pointer to an int which should    */
/*             contain 0 on entry and will be    */
/*             written to by the function.       */
/*                                               */
/* Returns:    As frames_find_next_frame.        */
/*************************************************/
d2823 13
a2835 15
/*************************************************/
/* frames_highlight_frame()                      */
/*                                               */
/* Highlights a frame by showing a border around */
/* it, made of 'Highlight' borderless window     */
/* objects in the Res file. The highlight is     */
/* removed by a NULL poll timer.                 */
/*                                               */
/* Won't highlight ancestor windows, and only    */
/* highlights if keyboard control is enabled.    */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the frame to be       */
/*             highlighted.                      */
/*************************************************/
d3004 11
a3014 13
/*************************************************/
/* frames_remove_highlight_timer()               */
/*                                               */
/* A NULL event handler which times how long the */
/* frame highlight objects have been visible     */
/* and removes them after a time defined by the  */
/* Choices file 'ShowFHighFor' entry.            */
/*                                               */
/* Registered by frames_highlight_frame.         */
/*                                               */
/* Parameters as standard for a Wimp event       */
/* handler.                                      */
/*************************************************/
d3051 6
a3056 7
/*************************************************/
/* frames_remove_highlight()                     */
/*                                               */
/* Removes the highlight objects from around a   */
/* frame, regardless of which frame is           */
/* highlighted.                                  */
/*************************************************/
d3100 9
a3108 9
/*************************************************/
/* frames_remove_highlight_if_present()          */
/*                                               */
/* Removes the highlight objects from around a   */
/* given frame, if that frame is highlighted.    */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the highlight.        */
/*************************************************/
@


1.19
log
@Everyone else seems to be checking lots of stuff in lately, so I've
decided to join in. This is an intermediate check-in and so not all
resources etc. will be up to date. You should be able to make Phoenix
and a debug build out of it. As a reminder, to make a JavaScript build:

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean. This now strips dynamic dependencies from the MakeFile
   automatically, to save you having to do it yourself.
 * Run one of the TaskObey files with the "J" suffix, e.g. !DeskBrwsJ -
   this uses the same .o directory for object files and exports to the
   same position in the Targets directory as the non-JavaScript build,
   but it does produce a unique binary in 'abs' and symbols table in
   'syms'.
 * Sourcing an appropriate !Run (with increased WimpSlot value), !Boot
   and About resource is done automatically.
 * Some, but not all of the !xxxD (debug) TaskObey files will make
   JavaScript versions in passing - check the JSUFFIX value on the Make
   command line parameters in the file.

This'll only work on RISC OS 3.1 due to the use of MemLib.

Here's the change list:

Included MNG icons in sprites files; added Sprites23 for some builds.
Added in ANT URL file icon (b28) derived from URI file icon, because
the Save dialogue can need it.

No, you do *not* need to define the same keyboard shortcuts in each
frame since the ancestor keeps the input focus and we've basically
dropped non-nested Wimp support. Maintaining no less than 4 lists of
identical shortcuts was a pain. Some Res files now only have the
lists in the main browser window and button bar objects (these two
are both required still).

Ursula build Markers button arrangement changed from 1x3 horizontal to
2x2 tilted, as in Phoenix, by popular demand.

Couple of hotlist bugs fixed; dragging an item and deleteing it with
Ctrl+X didn't terminate the drag, and deleteting an item underneath a
menu opened for it didn't close the menu.

'SendReferer' option added to all Choices files, all set to 'always'.
Put just beneath 'Clone' as it refers to header items, though really,
both Clone and SendReferer should probably be in the "Fetch controls"
section rather than "Multiuser environments and proxying"! Front-end
control of this is available.

In image_export_original, save_save_source, save_transfer_source and
save_save_object, flex_set_budge(0) was called to lock the heap but the
return value wasn't stored. flex_set_budge(1) was then used to unlock
the heap. All calls now remember and restore the old value, which is
both safer in case one calls another and allows the flex_set_budge
call in Main.c to have an application-wide meaning, as intended.

Some restructuring to the data load and RAM transfer sections of
Protocols.c; remote hotlist builds wouldn't allow files to be loaded
to browser windows before, and can now drop URL, URI or text files to
the Open URL dialogue.

New option "MinimumFontSize", lets the 'size' attribute of the 'font'
element be overridden. Default value is 1, to allow the full range of
values for the attribute. Setting to 7, for example, would give font
size 7 text at all times. Another new option, "ToggleOnXOnly", to
make Toggle Size only extend the window vertically (with Ctrl then
being used to toggle to genuine full size, rather than vice versa).
All Choices files updated to hold both of these options; only the
first has front-end control available (see debug build Res file).

JavaScript Document object exists; frames array etc. working. Can now
just about use "http://www.acorn.com/~ahodgkin/jschain/" but it does
abort after a bit - problems with frames again, I suspect. Is is pretty
slow, too. Can now press Escape to terminate a script.

Main.c erroneously referred to Controls file entry "StopWebServe" as
"StopWebProxy". Fixed.

Keyboard shortcuts to raise SaveFile are now possible in a general sense;
the code before was in the ToBeShown handler and just checked for a parent
component of -1. It then assumed "save frame HTML source". Now there's the
savefile_raise_from_shortcut function, which together with the seven new
event codes in SaveFile.h allows saving of HTML source and frame location,
export of links, images, backgrounds and the page as text or draw, to all
be invoked by keyboard shortcuts. Some Res files have some of these defined.

In reformat_check_height, the first check to see if setpara should be set
references a field in tpLast without checking if it is NULL. Whilst the
'line > 0' check should mean that tpLast wasn't NULL anyway, a direct
call to the function from outside of the reformatter might have tripped
up on this - the check for tpLast != NULL is now made.

Adjust-click on close icon in window showing file: URL attempts to open
the parent Filer window.

Reformatter used to try and find a selectable token if keyboard control
was enabled in a really stupid place - could make reformatting become
very slow if no selectables were present, especially if the page had a
few tables on it. Preprocessor now does this (since it goes through all
of the tokens anyway), the reformatter just doing a last check to ensure
no frames have obscured the selectable and if so, it tries to move it.
Done in the reformatter as generating a line array implies the data really
is visible.

Ctrl+Tab URL completion now builds a full list of matches from the hotlist
and history and can cycle through them (Ctrl+Shift+Tab stepping backwards).

Will give a real error rather than just "Data Abort" if it goes wrong
now. Someone somewhere is setting bit 30 of the error which confused
the replacement signal handler. Flag bits are now masked off (as they
should've been to start with).
@
text
@a2570 1
/*                                               */
@


1.18
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d648 2
a649 2
       row == 0        ||
       col == 0        ||
d1367 2
a1368 3
  b->nchildren     = 0;
  b->filling_frame = 0;
  b->frameset      = token;
d1564 2
d1568 5
a1572 2
    if (browser_fetch_url(parent)   && !strcmp(browser_fetch_url(parent),   token->src)) return 1;
    if (browser_current_url(parent) && !strcmp(browser_current_url(parent), token->src)) return 1;
d1610 1
a1610 1
  if (b->nchildren <= b->filling_frame)
d1623 1
a1623 1
  child = (browser_data *) b->children[b->filling_frame++];
d2172 36
@


1.17
log
@All !Run[D], Choices, Messages, Controls and Res files are up to date.

RefoKeep and RefoHold options added to, respectively, try and maintain
the line at the top of the visible area when reformatting, and not shrink
the vertical extent at the start of a reformat to try and avoid flicker
to the top of the page and back down again when RefoKeep is on. Choices
front-end implemented, which also allows RefoWait and RefoTime to be set.
Unfortunately for various reasons this doesn't help the page jumping when
unsized images come in (but RefoHold can improve matters...) - roll on
the image history.

DragToScroll and NoScrollBars options added for frames; included new
pointer type, Mouse_Shape_DTS, so relevant Controls file entries done
and Sprites[22] files updated as required. Noticed some builds have
a low-res ptr_link with a mask - mask removed.

Named anchor following fixed up somewhat - anchors near the bottom of
the page shouldn't be displayed, and then pulled down when the fetcher
releases null polls and ensures the y extent is correct (this through
implementing the min_height field in the browser_data structure).

RefoHang was never implemented and there seems little point to it now,
so the entry for it has been removed from the global choices structure
and all Choices files.

Markers menus should work properly now (in last check-in they would not
update correctly if Adjust was used on the entries).

URI handler usage now a lot more sensible, with configuration of how the
browser uses the module from both a Utils menu submenu (sic) and the
Choices dialogue.

Slightly dodgy 'hang around waiting for user input' stuff for the Cookies
dialogue box: All fetches are suspended; the fetcher remembers some info
about its state at the time the cookie came in, and restores it later; it
will only do this for one fetch at a time. It's necessary to single-thread
the fetcher at this point anyway, since other fetches may have a
dependency on the cookie that is hanging in mid-air at that point. As part
of this, some of the fetcher code has been split out into separate
functions (to try and 'black box' the code a bit). Anyway, Cookie Query
dialogue box now implemented with appropriate Choices file entry and
UI work in the Choices dialogue box.

Phoenix build Choices rearranged. Can now choose when the image history
is saved from the front end. Added also MSIE 4-style table option menu
for JPEG support (OS only, OS if it can handle it, internal only).

Should be a bit faster at loading the history - though 95% of the time
is spent in SWI URL_ParseURL. URL descriptions are stored more
efficiently as part of this - one malloc block instead of several
small blocks. The minimum block size for malloc blocks typically leads
to a significantly smaller startup wimpslot depending on the visit
history size.

Nasty bug in image system fixed. If an image size came in and a reformat
was to take place, the line the image lies in is found and the reformat
progresses from there. Unforunately, this didn't check to see if the
token can't be found in the line list, so it'd reformat from the top
of the page...! This would happen if, for example, an image halfway down
the page came in whilst a reformat for an image higher up had just begun.

In Choices.c, made choices_set_timetype_field, choices_set_uri_field,
choices_set_plugin_field, choices_set_cookie_field, and
choices_set_jpeg_field static (so they're not declared in Choices.h now).

Two memory leaks plugged in URL comparison routines in URLutils.c
(calling free() url_description instead of urlutils_free_descripton()).

Client pull reload handler was setting the reload flag if reloading
the same page, but forgetting to turn on reload_lock so
fetchpage_postprocessed was clearing the reload state... Similarly,
Ctrl+Shift+SELECT-Click on a link when the Controls file 'UseSmall'
entry is 'no' would not have reloaded as it should. Both fixed.

Frames shouldn't be so keen on acquiring horizontal scroll bars and never
letting them go when their width is decreased now. Frames set up for
'scrolling="yes"' will not start with no scroll bars and then gain them
shortly afterwards, causing flicker and two reformats - they'll start
with, and continue to hold, both scroll bars.

Pointer shouldn't flicker when over a frame border whilst other fetches
are progressing now.
@
text
@d74 5
a78 5
static _kernel_oserror * frames_find_widths            (browser_data * b, int available);
static _kernel_oserror * frames_find_heights           (browser_data * b, int available);
static int               frames_check_recursion        (browser_data * parent, browser_data * child, HStream * token);
static _kernel_oserror * frames_reopen_frame           (browser_data * cb, browser_data * parent, BBox * frame_box);
static void              frames_collapse_child_tree    (browser_data * base, browser_data * real_parent, browser_data * close);
d80 2
a81 2
static browser_data    * frames_find_next_frame        (browser_data * check, browser_data * current, int * found);
static browser_data    * frames_find_previous_frame    (browser_data * check, browser_data * current, int * found);
d83 4
a86 1
static int               frames_remove_highlight_timer (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
d2500 197
@


1.16
log
@RefoSingle option added to Controls.

Precautions taken in table code to avoid divide by zero errors.

Framesets defining more frames than the frameset implies, for whatever
reason, should never cause a crash now - just report a 'Frames definition
is badly nested' error (if STRICT_PARSER defined). Along the same lines,
in a single document defining a set of nested frames, two /FRAMESETs in
succession could cause a fairly nasty crash. Fixed.

TIFFs do not get loaded by double-click now.

If holding down SHIFT to save a link contents to disc, you can also hold
down CTRL to bypass the cache (sets the browser's reloading flag). Noticed
when testing this that windows_create_browser didn't take account of the
Controls file 'UseSmall' entry when adjust-shift-clicking on links. It
does now.

There is now a complete and up to date set of interactive help messages
built into the Ursula, Customer and Phoenix build Res files.
@
text
@d1496 2
a1497 1
      windows_set_tools(last_browser, &frame_box, 0, 0, 0, 0);
d1629 6
d1760 4
a1763 4
/* with frames_resize_frame(), which also        */
/* resizes the parent (which is useful when the  */
/* natural progression of a calling function     */
/* would not include this itself).               */
d1971 3
a1973 3
/* frames_resize_frameset(), which doesn't       */
/* resize the parent - just the contents (which  */
/* is useful when the natural progression of a   */
d2807 1
a2807 1
  e = toolbox_show_object(Toolbox_ShowObject_AsSubWindow, highlight_top,    Toolbox_ShowObject_FullSpec, &show, ancestor->self_id, -1);
d2821 1
a2821 1
  e = toolbox_show_object(Toolbox_ShowObject_AsSubWindow, highlight_bottom, Toolbox_ShowObject_FullSpec, &show, ancestor->self_id, -1);
d2833 1
a2833 1
  e = toolbox_show_object(Toolbox_ShowObject_AsSubWindow, highlight_left,   Toolbox_ShowObject_FullSpec, &show, ancestor->self_id, -1);
d2843 1
a2843 1
  e = toolbox_show_object(Toolbox_ShowObject_AsSubWindow, highlight_right,  Toolbox_ShowObject_FullSpec, &show, ancestor->self_id, -1);
@


1.15
log
@*Don't* try to load FilterManager 0.18 in !Run[D] files. Requires
WindowManager 3.98. Sets URI handler environment variables for
http, ftp and gopher.

Fixed 'doesn't reformat for unsized images' bug - only happens when the
deferred reformatter is enabled, hadn't remembered to check this in my
debug build where this is turned off. Oops.

Caret position in forms could get left behind despite attempts to rectify
this in v1.31 - now fixed (and faster, fortunately).

Hourglass + percentage displayed for History and Image History when
loading - it can take a while for very big histories, though in
practice you only see the visit history loading (has to do a lot
more work, and is thus quite a bit slower than the image history).

POST forms worked when targetted to frames, but were broken when
not targetted! (Forms data inherited from one browser to the same
browser; ended up freeing the flex block...). Fixed.

Now support 303 response code (redirect to GET). Treated as 301, i.e.
not support if STRICT_PARSER is defined, otherwise drops through to
the 302 handling code.

Pointer shouldn't get stuck in odd shapes when going to a new page now;
it gets reset to a standard shape every time the null handler that
checks the position is called, though (whether or not the handler thinks
the pointer is over a different token, if that token is NULL, it sets
the standard shape). A possible work around would be for a browser to
remember the pointer shape too; that's for the future, though.

Early stage table formatting functions could blow themselves apart if
tables_count_table decided there were no rows, columns or both. A
net table size of zero cells is now dealt with; slow, partial table
fetches in multiple windows with image loading turned on will now
*hopefully* be stable, where v1.31 would have bombed out repeatedly.

A nested frameset within one document will now inherit the border
width (frame spacing) and border colour of its parent. This is done
by copying the maxlen and indent fields of the parent token over
the child, and note it's done in the browser (fetch_preprocess_token),
not HTMLLib.

Border colour on a FRAMESET now used, with the first colour on any
FRAME within it overriding, as in NN 4 and MSIE 4.

<LI> bullets really do stick to the text next to them now (I'd done
that in an experimental piece of code and forgotten to merge it back
before the last check-in).

Browse$HotlistURL/URIFile and Browse$HomeURL/URIFile now work from
_TaskName in the Messages file, and are thus of the generic form
<App>$HotlistURL etc. - Docs.Notes and Docs.User updated appropriately.

Event 0x11d00 through to 0x11d7f will make the browser look up Controls
file entries 'JumpTo00' through to 'JumpTo7f' and read a URL from them.
This will be fetched in the ancestor window of the source of the event,
or a new window if such an ancestor can't be found [for Daytona demo].

NB: Nasty frames-related crash at http://www.teledanmark.dk/menu/start.htm
is *not* fixed in this source. NOBR is not supported.
@
text
@d1602 5
a1606 1
  if (!b->nchildren) return NULL;
d1608 2
a1609 5
  #ifdef TRACE
    if (tl & (1u<<17)) Printf("frames_define_frame: Do have children, so proceeding\n",b);
  #endif

  if (b->nchildren <= b->filling_frame) return NULL;
d1612 1
a1612 1
    if (tl & (1u<<17)) Printf("frames_define_frame: Have not defined all characteristics, so proceeding\n",b);
@


1.14
log
@Fixed some glitches in the modified status bar code (e.g. status inference
wasn't working properly).

Shift+Toggle size always opened to not obscure the icon bar. If CMOS is
set to always show the icon bar, then Shift+Toggle size is meant to
reverse sense and open to absolute full size. It now does this.

!Run[D] files now require URL 0.22, HTTP 0.64, FTP 0.22, Gopher 0.08
and File 0.32.

Minor overhaul of 'Docs.Notes' (with 'Docs.User' similarly updated) to
include a few new bits and pieces.

Timeout values of 0 now mean 'forever'. Plug-in status messages now have
their own timeout setting. New Messages token 'Actv' for extra info when
a status message times out and the status line drops to 'Viewing' or
'Ready' when there is still a Busy state registered by the Plug-in.

Small Fetch windows don't become visible briefly for Plug-in fetches
when the fetch is complete (for SeeFetches:no, where these windows
should be hidden all the time).

WebServe may be controlled through the Browse front-end via.
Wimp_MAppControl reason code 4 (Wimp_MAppControl_Configure). Note the
renaming internally of 'WebServ' or 'WebServe' has been changed to
'Proxy' (with lower case equivalents where relevant); proxy name
and starting details come from the Messages file 'ProxyName' and
'ProxyComm' tokens. More in 'Docs.Notes'.

Res files updated for image history and PRE/TT font aspect ratio
choices. 'Don't expire' labels changed to 'Expire' (oops, didn't
notice the change in the development Browse's Res file when I
updated all of the others until now...).

When printing, Wimp_PlotIcon appears to ignore R4 and R5, plots
'somewhere' on the page, and tries to get the sprite from the global
pool. This latter part normally causes an error to be raised; though
on my machine I just get a corrupted error message. The Desktop font
gets lost at this point too. All have yet to be fixed; as an
interim work around, Wimp_PlotIcon objects are never drawn at all
if the global 'printing' flag is set.
@
text
@d1100 3
a1102 1
  /* that colour.                                          */
d1104 1
a1104 1
  colour = b->frameset->maxlen;
d1106 9
a1114 1
  if (!(colour & 1)) colour  = Redraw_Colour_WNGrey;
@


1.13
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d1215 1
a1215 1
            if (frames_can_resize_right(b, child))
d1235 1
a1235 1
            if (frames_can_resize_bottom(b, child))
d2159 1
a2159 1
/* have been set, WebServ will be instructed to  */
d2201 6
a2206 6
  /* If this is the ancestor, tell WebServ to stop all activity */
  /* as well (if we're running full screen). Can't do this if   */
  /* targetting a frame as we may still want the other frames   */
  /* to keep fetching (e.g. the images in a navigation panel    */
  /* may still be coming in whilst that panel is used to open a */
  /* link in some other frame).                                 */
d2208 1
a2208 1
  if (controls.stop_webserve && choices.full_screen && !b->ancestor) utils_stop_webserv();
@


1.12
log
@Sorted out Res files, including fixing position of 'bytes' label in one
of the Choices dialogues (I'd missed it out of a selection when everything
else got moved down a bit). Unfaded Enc_Chinese menu entries, made sure
text labels were wide enough for system font, changed 'Apply' on Choices
dialogue to 'Set', and added ^K to hotlist keyboard shortcut lists.
Print Setup (i.e. Print dialogue) buttons all set to 'local', so the
stupid Toolbox doesn't close the dialogue and lose the caret before I
can see if it was in there to start with...

256 colour hotlist sprites taken back to standard 16 colour versions,
since there's a significant speed penalty on slower machines. The
testbed browser still has the 256 colour versions so the designs aren't
completely lost.

Changed access settings to exported builds to wr/r - lr/r was really getting
on my nerves whenever I wanted to try something temporary out.

View source, save source and print handlers would all try to work if
there was no source to act on - despite the fact that toolbar buttons
would be greyed out form them. This is fixed.

The Navigate menu has components greyed to match the toolbar state,
when opened. It isn't kept up to date dynamically, though this shouldn't
really be a problem (reopen the submenu...). As part of this, finally
sorted out conditions for the Stop button to be greyed, or the
GoTo/Go/Stop tristate to be at 'Stop' versus 'GoTo'.

Deferred reformatting is now disabled for external image fetches.

Browser-local client pull flag removed; hitting the Stop button simply
cancels any null handlers working for it. That way, client pull switches
back on in passing at the next fetch (it was never really switched off).
So to stop client pull, hit the stop button at any point.

Done CELLPADDING attribute; cellpadding field in reformat_cell (Global.h)
is redundant since the table token is accessible from there, and so it has
been removed. CELLSPACING support also added.
@
text
@d1485 1
a1485 1
      windows_create_browser("", b, &frame_box, NULL, 0);
@


1.11
log
@Now handles PARAM tags. Sorted out Plug-In bug that was related to Java
setting a 0 by 0 graphics window before calling Wimp_Poll (fixed in Java).
Implemented queue for Plug-Ins so multiple broadcasts aren't sent for
several Objects in one data chunk.

Added Docs directory with some documentation in it. More things to keep
checking for stylistic consistency, horray ;-)

Corrected !Run[D] for Ursula build to need AcornURI but not TaskModule
(URI handler needed for !Mail to pick up mailto: links).

Added display_height field to browser_data, analogous to display_width,
to cope with % sized objects by width and height (see how HRs are
handled in Redraw.c for an example of how it was always fairly easy
with width, but not height until this addition). Though you do have
to reload to get a new size; reformat isn't enough. Must see to this
some time...

Fixed bug where basic typefaces were claimed *before* the Choices file
had been read. For unusual Choices settings, this could create some
'interesting' problems now and again. This was part of narrower scope
work in the Choices code to allow font changing without leaking font
handles (now done; fm_shutdown only ditches fonts, it keeps internal
structures - must then call  fm_lose_fonts for all browsers to get the
bitfields up to date, then rewrite the typeface definitions and reclaim
basic fonts). Noticed that fm_claim_basic_typefaces would claim multiple
instances of the same font if there were several cases of the same font
mapped to different typeface styles - fixed.

Implemented PlugInControl settings, but not SupportObject (fully).
@
text
@a1494 2
      last_browser->client_pull     = b->client_pull;

@


1.10
log
@Added support for HTMLLib HttpEndParse call.

Text items with no VALUE specified in the HTML were not cleared on
hitting a Reset button as the text field of the token is NULL; fixed.
SELECT lists with no default selection item were not being changed
on hitting a Reset button; fixed. In radio groups with no default
selection specified, no item will be selected. This goes against
the HTML 2 spec but allows broken Navigator-esque forms behaviour.
In consequence, radios can be deselected by clicking on the same
one twice. I'd fixed the flickering experienced when doing this
recently, but that, now, is irrelevant, since the state of a radio
must always change.

Reformatter's new 'find width of a SELECT field' didn't account for
the width of <none> and <many> items, and now does (particularly
important for broken items with no OPTION contents).

Under certain circumstances, illegally named targets would open in the
ancestor rather than a new window - a deliberate decision in the code,
but now reversed due to a test suite failure; they'll open in a new
window instead.

Altered the left hand indent handling for lists so that headings and
body text follow the Navigator 48 pixel indent and the bullet point
items drop to the left of the left hand margin, rather than sitting
on the margin with the text indented to the right.

Tightened up the hotlist_load_directory checking of URLs, so that
only those with '://' in - i.e. look fully specified - are accepted.
HTML files are loaded into a new directory now.

Items without a descriptive title in hotlist_new_url will have the URL
substituted in instead. White space before and after descriptions and
after URLs is stripped. Directories with zero length names or null
strings (after white space is stripped) will still be created, with a
generic name (see Messages, token 'HotlistUntitled').
@
text
@d2346 2
a2347 3
/* Examines the 'target' field of a tag (token)  */
/* and returns, given the browser that the tag   */
/* lies in, the browser to which the target      */
a2349 6
/* If you want to pass in a specific target      */
/* string, just throw an HStream on the stack    */
/* and make the 'target' field point to the      */
/* string - the function doesn't look at any     */
/* other field in the HStream.                   */
/*                                               */
d2353 1
a2353 1
/*             Address of the token.             */
d2365 6
a2370 6
/* Assumes:    None of the parameter pointers    */
/*             are NULL. In the case of named    */
/*             target windows where the name     */
/*             can't be found, NULL is returned; */
/*             the caller should then open a new */
/*             window with the given name.       */
d2373 1
a2373 1
browser_data * frames_find_target(browser_data * b, HStream * t)
d2378 1
a2378 1
    if (tl & (1u<<17)) Printf("frames_find_target: Called for %p, token %p\n",b,t);
d2384 1
a2384 1
  if (b && t && t->target && *t->target)
d2387 1
a2387 1
      if (tl & (1u<<17)) Printf("frames_find_target: Target='%s'\n",t->target);
d2390 1
a2390 1
    if (!utils_strcasecmp(t->target, "_top")) /* Open in the top level window */
d2398 1
a2398 1
    else if (!utils_strcasecmp(t->target, "_self")) /* Open within the frame */
d2402 1
a2402 1
    else if (!utils_strcasecmp(t->target, "_blank")) /* Open in a new, blank window */
d2406 1
a2406 1
    else if (!utils_strcasecmp(t->target, "_parent")) /* Open in the frame's parent */
d2432 1
a2432 1
      if (isalnum(*t->target)) /* Named window */
d2438 1
a2438 1
        named = frames_find_named(ancestor, t->target);
d2454 1
a2454 1
                 !utils_strcasecmp(named->window_name, t->target)
d2476 1
a2476 11
  if (
       t &&
       (
         !t->target ||
         (
           t->target   &&
           !*t->target
         )
       )
     )
     return b;
@


1.9
log
@Now working on source merged with Kevin Bracey's internationalisation
support. UNIFONT is undefined in the Make File for now. All Res and
Choices files updated appropriately.

Having sorted out the old Choices and Messages to form Choices, Controls
and Messages, this build has had the same cleaning up done internally.
This includes greater consistency in naming schemes and the removal of
the inconsitent choices items - e.g. Choices file entries saying 'delay
images' and 'plain backgrounds' where internally all the flags say 'show
images' and 'show backgrounds'. ChoiceDefs.h and CtrlDefs.h added to
clarify the meaning of some fields, though usage of these is not 100%
in the source (there are cases where parameters are passed through to
functions as ints, and those functions still check these against hard
coded values rather than the #define stuff).

Fetcher status return bits (connected, sent request, etc.) now reflected
in status bar. Progress during fetchs to files are reported by %, where
the size of the object is known. Exceeding 100% drops back to a byte
counter, in case the estimated size was wrong. The progress counter
may be updated after specific delays, rather than 'as often as possible',
to reduce flicker (as requested by D.Brown some time ago).

I've done a small rewrite of the fetch prioritisation scheme in FetchPage.c;
how well this performs in general use across different processor speeds
remains to be tested, but certainly it has some advantages. For each small
fetch window before the rewrite, a 4cs tight loop was entered - this gave a
noticable and substantial drain to the Desktop performance if more than one
was opened. Now, several can be up at once with little hit. The actual file
fetch is on half the priority it was before, with all others taken back
just a bit - e.g. from 20cs per poll to 15cs per poll for flat out
reformatting. You don't seem to lose much time on the format in practice,
and the Desktop feels quite a bit lighter at the same time. There's the
potential for smoother frameset loading in this scheme, too.

When Shift+Clicking on a link meant you still fetched inside the main
browser window, several fetches could occur in a frameset - one per frame.
However, now that you can only do this by clicking on a link that leads to
non-displayable data - or by turning off the small fetch windows by
setting UseSmall to 'no' in Choices - a bug where fetchpage_preprocessed
would stop such fetches as new ones were started was revealed.
The API to frames_abort_fetching has now been extended to include a
'stop file spooling too' flag, allowing a fix to be made by having
fetchpage_preprocess's calls not set this (and it doesn't check the
savelink flag is unset before proceeding, since frames_abort_fetching
does that implicitly now).

Had left the RAM transfer buffer at 16 bytes (from testing) accidentally...
Oops. Upped it to 4K. In addition, when loading data by RAM transfer,
the browser didn't notice if a RAMFetch bounced during the transfer. It
would be treated as a 'first' RAMFetch bounce, basically, and try to go to
file transfer - oops. Fixed.
@
text
@d2495 3
a2497 3
  /* If all else fails, want to try getting to the highest possible */
  /* level - after all, accidentally opening what was meant to be a */
  /* full size page inside some tiny frame would be pretty bad...!  */
d2499 1
a2499 5
  ancestor = b->ancestor;
  if (!ancestor) ancestor = b->real_parent;
  if (!ancestor) ancestor = b;

  return ancestor;
@


1.8
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d190 1
a190 1
        if (tw < choices.minfrmwidth) tw = choices.minfrmwidth;
d354 1
a354 1
        if (th < choices.minfrmheight) th = choices.minfrmheight;
d1360 1
a1360 1
  if (!fixed.swapbars)
d1488 1
a1488 1
      /* Make the child inherit the parent's display characteristics */
d1490 6
a1495 4
      last_browser->underlinelks  = b->underlinelks;
      last_browser->displayimages = b->displayimages;
      last_browser->plainback     = b->plainback;
      last_browser->sourcecolours = b->sourcecolours;
d1793 1
a1793 1
  if (!fixed.swapbars)
d2170 5
a2174 1
/*             continue.                         */
d2177 1
a2177 1
void frames_abort_fetching(browser_data * b, int stop_images)
d2187 1
a2187 1
      frames_abort_fetching(b->children[i], stop_images);
d2191 4
d2210 1
a2210 1
  if (fixed.stopwebserv && choices.full_screen && !b->ancestor) utils_stop_webserv();
d2705 1
a2705 1
  if (!choices.keyboardctl) return NULL;
d2762 1
a2762 1
    if (!fixed.swapbars)
@


1.7
log
@Updated Makefile to work better in folding text editors. More or less rewrote
Limits.h, and ensured consistent comment styling throughout all sources.
Fetch.c/h split to Fetch, FetchHTML and URLveneer. URLstat.c/h produced to
cope with this. OpenURL and Find sources created from bits in the Windows
source file that shouldn't have been there... These will get filled out
shortly. Note that a few functions in Fetch are due to be renamed and moved;
probably to Tokenutils.
@
text
@a46 1
#include "TBEvents.h"
d55 1
a671 1
    int bx, by;
d680 2
a681 9
    span.xmin = x;
    span.xmax = x + 1;
    span.ymin = y;
    span.ymax = y + 1;

    bx = by = handle->frameset->indent; /* Not *2 - we want half for top left and half for bottom right */

    bx -= ofl;
    by -= oft;
d705 1
a705 1
        span.ymax = co.outline.ymax - hh * 2 - by;
d720 1
a720 1
        span.ymin = co.outline.ymin + hh * 2 - by;
d740 1
a740 1
        span.xmin = co.outline.xmin + vw * 2 + bx;
d755 1
a755 1
        span.xmax = co.outline.xmax - vw * 2 + bx;
d783 1
a783 7

    /* Whether or not a drag has been started by the above, need */
    /* to also set the constraint this way as Wimp_DragBox won't */
    /* allow (say) a zero width rectangle; so the pointer can    */
    /* 'wobble' from side to side.                               */

    if (constrain) mouse_rectangle(&span, 1);
d1074 205
d2728 1
a2728 1
    highlight_for = atoi(lookup_choice("ShowFHighFor:30",0,0));
@


1.6
log
@Quite a few general source changes throughout many files to sort out swapped
toolbars. There will be more work on this shortly. svcprint.c has been
modified to allow it to output to a file in PipeFS, so TML-less machines
can still use the standard browser debug routines (albeit in a less than
elegant fashion). Comments in that source file give more details. Plus a
few more bug fixes.
@
text
@d17 1
d20 1
d22 2
a23 1
/* History: 19-Mar-97: Created                     */
d51 1
a51 1
#include "Fetch.h"
d55 1
d77 1
a98 1
/*                                               */
d101 1
d156 1
a156 1
      stars ++;
d173 1
d185 5
a189 1
        tw = (remaining * tw / stars) & ~(wimpt_dx() - 1);
d219 1
a219 1
    /* pixels due to careful use of wimpt_dx() above. To cope   */
a262 1
/*                                               */
d265 1
d320 1
a320 1
      stars ++;
d337 1
d349 5
a353 1
        th = (remaining * th / stars) & ~(wimpt_dy() - 1);
d383 1
a383 1
    /* pixels due to careful use of wimpt_dy() above. To cope   */
a439 2
/* Returns:    See parameters list.              */
/*                                               */
d476 330
d884 1
d955 1
d1025 1
a1027 1
/*                                               */
d1098 1
d1203 2
a1204 2
  available_w -= token->indent * wimpt_dx() * (num_cols - 1);
  available_h -= token->indent * wimpt_dy() * (num_rows - 1);
d1294 1
a1294 1
      windows_create_browser("", b, &frame_box, NULL);
d1310 1
a1310 1
      frame_box.xmin += width + token->indent * wimpt_dx();
d1313 1
a1313 1
    frame_box.ymax -= height + token->indent * wimpt_dy();
d1343 1
a1343 1
/*             being checked.                    */
d1379 1
d1470 77
d1550 5
a1554 1
/* resize a frameset within its window.          */
d1559 4
a1562 3
/*             A WimpOpenWindowBlock pointer,    */
/*             with the block holding the new    */
/*             BBox of the parent.               */
d1565 1
a1565 1
_kernel_oserror * frames_resize_frameset(browser_data * b, WimpOpenWindowBlock * o)
d1590 1
a1590 1
  s.window_handle = o->window_handle;
d1594 1
a1594 1
  s.visible_area = o->visible_area;
d1632 2
a1634 2

  num_cols = token->cols;
d1639 2
a1640 2
  available_w -= token->indent * wimpt_dx() * (num_cols - 1);
  available_h -= token->indent * wimpt_dy() * (num_rows - 1);
d1727 65
a1791 5
      {
        browser_data            * cb;
        WimpGetWindowStateBlock   frame_state;
        IdBlock                   idb;
        WimpPollBlock             block;
d1793 24
a1816 1
        cb = b->children[child];
d1818 10
a1827 1
        frame_state.window_handle = cb->window_handle;
d1829 1
a1829 2
        e = wimp_get_window_state(&frame_state);
        if (e) return e;
d1831 2
a1832 2
        /* Fill in the open window request block with the new size */
        /* details, etc.                                           */
d1834 1
a1834 1
        block.open_window_request.window_handle = frame_state.window_handle;
d1836 2
a1837 2
        if (frame_state.flags & WimpWindow_VScroll) frame_box.xmax -= vw;
        if (frame_state.flags & WimpWindow_HScroll) frame_box.ymin += hh;
d1839 2
a1840 3
        block.open_window_request.visible_area = frame_box;
        block.open_window_request.xscroll      = frame_state.xscroll;
        block.open_window_request.yscroll      = frame_state.yscroll;
d1842 1
a1842 1
        /* Sort out the window to open behind. */
d1844 4
a1847 1
        block.open_window_request.behind = find_behind(block.open_window_request.window_handle);
d1849 1
a1849 1
        /* Fill in the ID block and call the open window function */
d1851 2
a1852 2
        idb.self_id   = cb->self_id;
        idb.parent_id = b->self_id;
d1854 3
a1856 1
        windows_open_browser(0, &block, &idb, cb);
d1858 2
a1859 1
        /* If the frame was highlighted, move the highlight too */
d1861 3
a1863 1
        if (cb == highlight_frame) frames_highlight_frame(cb);
d1865 5
d1871 12
a1882 1
      /* Prepare for the next frame */
d1884 1
a1884 2
      frame_box.xmin += width + token->indent * wimpt_dx();
      child++;
d1886 4
d1891 7
a1897 2
    frame_box.ymax -= height + token->indent * wimpt_dy();
  }
d1899 3
a1901 1
  /* Now do a redraw of the parent, to ensure that borders are up to date */
d1903 12
a1914 1
  coords_box_toworkarea(&s.visible_area, (WimpRedrawWindowBlock *) &s);
d1916 1
a1916 6
  e = wimp_force_redraw(b->window_handle,
                        s.visible_area.xmin,
                        s.visible_area.ymin,
                        s.visible_area.xmax,
                        s.visible_area.ymax);
  if (e) return e;
d1918 3
a1920 3
  #ifdef TRACE
    if (tl & (1u<<17)) Printf("frames_resize_frameset: Successful\n");
  #endif
d1922 1
a1922 1
  return NULL;
d2016 12
a2027 1
/* close down unwanted frames.                   */
d2032 1
d2036 3
a2038 1
/*             in the next parameter;            */
a2045 9
/*                                               */
/* If the second browser has children the        */
/* function will call itself with the given base */
/* browser until the browser to close has no     */
/* children. It then closes it (unless it's the  */
/* same as the base browser, in which case the   */
/* final exit condition is reached) and          */
/* decrements the parent's child counter.        */
/* Recursion then collapses a level.             */
d2107 1
d2486 2
a2487 3
/* Currently, the highlight will not move with   */
/* the parent browser window and will only show  */
/* if keyboard control is enabled.               */
d2506 4
a2775 2

/*************************************************/
@


1.5
log
@Checking in mostly because its Friday... Quite a few little bug fixes
(adding up to a greater whole), which include removal of the dastardly
'invalid image number' errors that trace builds would raise from time to
time. Frame highlights are now better controlled (releaseably so).
Generally, this build represents the first genuinely promising version
of the browser for quite some time, despite the known library problems
with comment handling etc.
@
text
@d771 1
a771 1
  int                       topbar_height, bottombar_height;
d823 10
a832 2
  topbar_height    = toolbars_url_height(b) + toolbars_button_height(b); /* Physically, the button bar and URL bar are just one real toolbar */
  bottombar_height = toolbars_status_height(b);
d834 2
a835 2
  if (topbar_height)    topbar_height    += wimpt_dy(); /* Account for lower border of upper toolbar, if present */
  if (bottombar_height) bottombar_height += wimpt_dy(); /* Account for upper border of lower toolbar, if present */
d840 1
a840 4

  available_h = s.visible_area.ymax - s.visible_area.ymin
                - topbar_height
                - bottombar_height;
d845 1
a845 1
  start_y = s.visible_area.ymax - topbar_height;
d1145 1
a1145 1
  int                       topbar_height, bottombar_height;
d1171 10
a1180 2
  topbar_height    = toolbars_url_height(b) + toolbars_button_height(b); /* Physically, the button bar and URL bar are just one real toolbar */
  bottombar_height = toolbars_status_height(b);
d1182 2
a1183 2
  if (topbar_height)    topbar_height    += wimpt_dy(); /* Account for lower border of upper toolbar, if present */
  if (bottombar_height) bottombar_height += wimpt_dy(); /* Account for upper border of lower toolbar, if present */
d1190 2
a1191 2
                - topbar_height
                - bottombar_height;
d1196 1
a1196 1
  start_y = s.visible_area.ymax - topbar_height;
d1991 1
a1991 1
    int toph, both;
d1993 10
a2002 2
    toph = toolbars_button_height(b) + toolbars_url_height(b);
    both = toolbars_status_height(b);
d2004 2
a2005 2
    if (toph) toph += wimpt_dy();
    if (both) both += wimpt_dy();
d2007 2
a2008 2
    s.visible_area.ymax -= toph;
    s.visible_area.ymin += both;
d2146 2
a2147 1
/* given frame.                                  */
d2188 17
@


1.4
log
@Fixed problems with unsourced images in tables and a couple of other bugs
here and there - nothing earth shattering... Just wanted to keep the CVS
source up to date.
@
text
@d61 6
a66 7
static ObjectId highlight_top    = 0;
static ObjectId highlight_bottom = 0;
static ObjectId highlight_left   = 0;
static ObjectId highlight_right  = 0;

static int      highlight_timer  = 0;
static int      highlight_for    = 0;
d70 4
a73 4
static _kernel_oserror * frames_find_widths         (browser_data * b, int available);
static _kernel_oserror * frames_find_heights        (browser_data * b, int available);
static int               frames_check_recursion     (browser_data * parent, browser_data * child, HStream * token);
static void              frames_collapse_child_tree (browser_data * base, browser_data * real_parent, browser_data * close);
d75 2
a76 2
static browser_data    * frames_find_next_frame     (browser_data * check, browser_data * current, int * found);
static browser_data    * frames_find_previous_frame (browser_data * check, browser_data * current, int * found);
d78 1
a78 1
static int               frames_remove_highlight    (int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle);
d1114 1
a1114 1
  return fetchpage_new(child, token->src, 1);
d1146 4
d1154 1
a1154 3
  #ifdef TRACE
    if (tl & (1u<<17)) Printf("frames_resize_frameset: Called with browser_data %p\n",b);
  #endif
d1320 4
d1354 35
d1664 1
a1664 2
        ancestor = b->ancestor;
        if (!ancestor) ancestor = b;
d1753 1
a1753 2
  ancestor = current->ancestor;
  if (!ancestor) ancestor = current;
d1919 1
a1919 1
  browser_data            * ancestor = b->ancestor;
d1931 1
a1931 1
  if (!ancestor) ancestor = b;
d1963 1
a1963 2
    register_null_claimant(Wimp_ENull, (WimpEventHandler *) frames_remove_highlight, b);

d2012 1
a2012 1
  /* Now show the objects */
d2021 1
d2039 2
d2061 6
d2073 1
a2073 1
/* frames_remove_highlight()                     */
d2086 1
a2086 1
static int frames_remove_highlight(int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle)
d2109 4
d2115 1
a2115 1
    deregister_null_claimant(Wimp_ENull, (WimpEventHandler *) frames_remove_highlight, handle);
d2119 49
@


1.3
log
@In the middle of customer support work.
@
text
@d1361 5
a1365 1
/*             relevant to the fetches to abort. */
d1368 1
a1368 1
void frames_abort_fetching(browser_data * b)
d1378 1
a1378 1
      frames_abort_fetching(b->children[i]);
d1387 2
a1388 1
  image_abort_fetches(b);
@


1.2
log
@Made frames_highlight_frame only work if KeyboardCtl=yes
@
text
@a29 2
#include "unixlib.h" /* For case insensitive strcmps only */

a1495 2
  /* Can't proceed with this browser window if it hasn't got a name */

d1500 1
a1500 1
  if (parent->window_name && *parent->window_name && !strcasecmp(parent->window_name, name)) return parent;
d1527 6
d1573 1
a1573 1
    if (!strcasecmp(t->target, "_top")) /* Open in the top level window */
d1581 1
a1581 1
    else if (!strcasecmp(t->target, "_self")) /* Open within the frame */
d1585 1
a1585 1
    else if (!strcasecmp(t->target, "_blank")) /* Open in a new, blank window */
d1589 1
a1589 1
    else if (!strcasecmp(t->target, "_parent")) /* Open in the frame's parent */
d1636 3
a1638 3
                 named->window_name                         &&
                 *named->window_name                        &&
                 !strcasecmp(named->window_name, t->target)
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d1864 2
a1865 1
/* the parent browser window.                    */
d1879 6
@
