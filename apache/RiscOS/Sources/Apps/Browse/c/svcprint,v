head	1.9;
access;
symbols
	Browse-2_16:1.9
	Browse-2_15:1.9
	Browse-2_14:1.9
	Browse-2_13:1.9
	Browse-2_12:1.9
	Browse-2_11:1.9
	Browse-2_10:1.9
	Browse-2_09:1.9
	ahodgkin_208_i4_2:1.9
	ahodgkin_208_i4:1.8
	ahodgkin_208_i3:1.8
	ahodgkin_208_i2:1.8
	ahodgkin_208_i1:1.7
	ahodgkin_207release:1.5
	ahodgkin_206release:1.5
	ahodgkin_205release:1.5
	ahodgkin_204release:1.5
	ahodgkin_202release:1.5
	ahodgkin_201release:1.5
	ahodgkin_200release:1.5
	ahodgkin_133beta:1.5
	ahodgkin_132beta:1.5
	ahodgkin_131beta:1.5
	ahodgkin_130beta:1.5
	ahodgkin_129:1.5
	ahodgkin_128beta:1.5
	ahodgkin_128alpha:1.5
	ahodgkin_127beta2:1.5
	ahodgkin_127beta:1.5
	ahodgkin_126beta:1.5
	ahodgkin_AW97patch:1.5
	ahodgkin_AW97:1.5;
locks; strict;
comment	@# @;


1.9
date	2000.05.31.15.58.52;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	2000.02.25.17.08.56;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	99.09.02.13.14.51;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	99.09.02.13.10.38;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.09.18.08.59.06;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.08.12.09.26.42;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.07.25.12.52.36;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.07.24.09.15.08;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.29.19;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.9
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//#ifdef TRACE

  /* Undef USE_TML to use a debug file 'TMLDebug' in PipeFS rather */
  /* than the TML card output routines.                            */

  #define USE_TML

  #ifdef USE_TML

    /* -*-C-*-
     *
     * Copyright(c) 1994 Acorn Computers Ltd., Cambridge, England
     *
     * svcprint.c
     *
     * print debugging information down the TML tube link.
     *
     * provides:
     *         %s - string
     *         %C - character in range 20->7F (space printed if outside range)
     *         %c - any character
     *         %X - reverses order of bytes if >2 (or >4) specified as width
     *         %x - hex
     *         %B - reverses order of bytes if >2 (or >4) specified as width
     *         %b - binary
     *         %D - reverses order of bytes if >2 (or >4) specified as width
     *         %d - decimal
     *         %p - pointer ("@@xxxxxxxx")
     *
     * field width can be specified by placing a decimal number after the "%"
     * character... if the width is started by a "0" then numbers are padded
     * with "0"...
     *
     * standard format specifiers o,u,e,f and g are NOT supported
     *
     */

    #include <kernel.h>
    #include <swis.h>
    #ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>


    #include "inetlib.h"

    #ifndef NULL
    # define NULL ((void *)0)
    #endif

    #ifdef DEBUG
    /*int debug = 1;*/
    #endif

    /**********************************************************************/

    /*
     * call processor mode independant character output routine
     */
    static void oswrch(unsigned char ch)
    {
        _kernel_swi_regs regset;

        /*
         * use HostFS_WriteC (SWI 0x40102) to print the character
         */
        regset.r[0] = ch;
        (void)_kernel_swi(0x40102, &regset, &regset);
    }

    /**********************************************************************/

    /*
     * Printn prints a number n in base b, minimum width w adding pad chars
     * if needed.
     */
    static void printn(unsigned n, unsigned b, int w, char pad)
    {
        if( n >= b )
        {
          printn(n / b, b, --w, pad);
          oswrch("0123456789abcdef"[n % b]);
        }
        else
        {
          while (--w > 0)
              oswrch(pad);

          oswrch("0123456789abcdef"[n]);
        }
    }

    /**********************************************************************/

    static void prf(char *format, unsigned *argp, ...)
    {
        register int b; /* base to be used when displaying numbers */
        register int c; /* current character read from format string */
        register int w; /* field width */
        char pad;     /* field padding character */
        unsigned val;   /* value of argument */

      loop:
        val = *argp;
        w = 0;
        pad = ' ';

        while( (c = *format++) != '%' )
        {
          if( c == '\0' )
              return;
          if( c == '\n' )
              oswrch('\r');
          oswrch(c);
        }

      again:
        /*
         * we have a special format command
         */
        c = *format++;
        switch( c )
        {
          case 's':
          {
              /* string */
              char *p = (char *)*argp++;
              int  width = 0;

              if (p != NULL)
              {
                  /* NOT a NULL pointer */
                  while (*p)
                  {
                      oswrch(*p++);
                      width++;
                  }
              }

              while( width++ < w )
                  oswrch(' ');
              goto loop;
          }

          case 'C':
          if( (*argp < ' ') || (*argp > '~') )
          {
              oswrch(' ');
              argp++;
              goto loop;
          }

          case 'c':
          /* character */
          oswrch(*argp++);
          goto loop;

          case '0':
          if (w == 0)
              pad = '0';

          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          /* field width */
          w = (w * 10) + ((int) c - '0');
          goto again;

          case 'X':
          /* hex number */
          if (w > 4)
              val = (unsigned)ntohl(val);
          else
          {
              if (w > 2)
                  val = (unsigned)ntohs(val);
          }

          /*
           * NB
           *
           * fall through to set base
           */

          case 'x':
          /* hex number */
          b = 16;
          goto number;

          case 'p':
                  /* pointer */
                  oswrch('@@');
                  w = 8;
                  pad = '0';
                  b = 16;
                  goto number;

          case 'B':
          /* binary number */
          if (w > 4)
              val = (unsigned)ntohl(val);
          else
          {
              if( w > 2 )
                  val = (unsigned)ntohs(val);
          }

          /*
           * NB
           *
           * fall through to set base
           */

          case 'b':
          /* binary number */
          b = 2;
          goto number;

          case 'D':
          /* decimal number */
          if (w > 4)
              val = (unsigned)ntohl(val);
          else
          {
              if (w > 2)
                  val = (unsigned)ntohs(val);
          }

          /*
           * NB
           *
           * fall through to set base
           */

          case 'd':
          b = 10;
          /*
           * NB
           *
           * fall through to write number
           */

          number:
          printn(val,b,w,pad);
          argp++;

          break;
        } /* switch */

        goto loop;
    }


    /**********************************************************************/

    #if 0
    # define USETUBE
    #endif /* 0/1 */

    void Printf(char *format, ...)
    {
        unsigned *argp = (unsigned *)&format;
        static int inprf;

    #ifdef USETUBE
        _kernel_swi_regs reglist;
        _kernel_oserror *err;
    /*     int s = splhi(); */

        if( (err = _kernel_swi(0x40100, &reglist, &reglist)) != NULL )
        {
          prf("HostVDU: ", 0);
          prf(err->errmess, 0);
    /*    splx(s); */
          return;
        }
    #endif /* USETUBE */

        /*int s = splhi();*/
        if (inprf)
            return;

        inprf=1;
        prf(format, (argp + 1));
        inprf=0;
        /*splx(s);*/

    #ifdef USETUBE
        if( (err = _kernel_swi(0x40101, &reglist, &reglist)) != NULL )
        {
          prf("TubeVDU: ", 0);
          prf(err->errmess, 0);
    /*    splx(s); */
          return;
        }
    /*    splx(s); */
    #endif /* USETUBE */
    }

    /**********************************************************************/

    /* EOF svcprint.c */

  #else

    /* Make Printf use a PipeFS file instead of outputting to a TML card. */
    /* Because the routine calls fopen then fclose to avoid needing any   */
    /* initialisation or finalisation calls, do something like:           */
    /*                                                                    */
    /* REPEAT:OSCLI "Type Pipe:$.TMLDebug":UNTIL FALSE                    */
    /*                                                                    */
    /* in a Task Window to list the output during run-time (assuming this */
    /* was for a multitasking Wimp application). It isn't ideal, but it   */
    /* works out as better than nothing.                                  */
    /*                                                                    */
    /* History:                                                           */
    /*                                                                    */
    /* 11/08/97 (ADH): Created                                            */

    #include <stdlib.h>
    #include <stdarg.h>
    #include <stdio.h>

    void Printf(char * format, ...)
    {
      va_list   ptr;
      FILE    * fp;

      #define Debug_FileName "Devices:Parallel"

      fp = fopen(Debug_FileName, "wab");
      if (!fp) fp = fopen(Debug_FileName, "wb");
      if (!fp) return;

      setvbuf(fp, NULL, _IONBF, 0);

      va_start(ptr, format);
      vfprintf(fp, format, ptr);
      va_end(ptr);

      fclose(fp);
    }

  #endif

//#else
//
//  static void svcprint_keep_compiler_happy(void)
//  {
//    int a;
//    a = 0;
//  }
//
//#endif
@


1.8
log
@Misecllaneous tweaks and fixes. Major addition is full header and footer
support in the printing system - see the Phoenix Choices file for more
information.

Only the Phoenix resources are up to date currently.
@
text
@d52 7
a58 3
    #include "kernel.h"
    #include "swis.h"
    #include "svcprint.h"
@


1.7
log
@Removed svcprint fron objects list of non-debug files and put svcprint.c
back to its conditional compilation behaviour.

Note that as usual, this check-in gives an incomplete set of resources.
Only the Phoenix build will be reasonably up to date.
@
text
@d15 1
a15 1
#ifdef TRACE
d363 9
a371 9
#else

  static void svcprint_keep_compiler_happy(void)
  {
    int a;
    a = 0;
  }

#endif
@


1.6
log
@Long overdue check-in of intermediate browser build, from continued "out
of hours" work. Forgot to add a few files last time too.

List dialogue box handler complete, and exclusion lists implemented
within the main browser code. Full documentation in Choices file.
Save routine knows all about it but is now getting very slow - must
come up with a better scheme; for now, it puts the hourglass on...

StripExtensions option controls auto stripping of filename extensions.

More sensible ancestor / frame selection for keyboard shortcut items
and the save dialogues - having selected a frame won't lock you into
it for F3 and related shortcuts now (input focus in URL writable ->
get ancestor details, input focus in frame -> get frame details). F4
works in frames. F5 now generally present for 'view source' with a
corresponding menu entry in the File menu.

Odd thing in later Res files; there's no action set for Adjust clicks
on the main ToolAction items in the button bar. Very odd. Nothing
appears to be set in v2.07 either, yet adjust-click works. Even
stranger. Anyway, added in the relevant event details (same as for
Select click in all cases) and this fixes the problem.

Background colours in the TABLE tag ignored the "don't print any
backgrounds" Print Style setting. Fixed. Meanwhile, the "black
text with no backgrounds" option wasn't getting this right either;
fixed this also.

Event logging implemented; HTTP errors and script output via.
window.print extension. No internal error output yet.

Faith:Never behaviour extended. If ever a server sends something with
no content type or an unhandleable type, the browser will try and get a
filetype from the URL. If it gets text or HTML, it'll render the file.
Else it'll save it. Hacks around IIS 4's lack of a content type field
in the Marketeye login stuff, and similar other slightly broken sites.
@
text
@d15 1
a15 1
//#ifdef TRACE
d363 9
a371 9
//#else
//
//  static void svcprint_keep_compiler_happy(void)
//  {
//    int a;
//    a = 0;
//  }
//
//#endif
@


1.5
log
@Support for ANT URL broadcast message added.

Image deletion routines rewritten; nasty animated GIF bug now gone
(it kept trying to update the cross-referenced image in the browser that
no longer existed, and I've no idea how animated GIFs ever managed to *not*
blow up if a cross referencing browser was shut down; and I've tested
this...). There are now as many image structures as there are total images
in the visible browsers, and no more; cross referenced images in the
to-be-deleted browser have their ownership moved to the cross
referencer before the cross referencee is wiped, with any required fetches
being transferred with them.

Reformatter sped up a bit by getting rid of strlen on the main text field
of tokens in all places bar one, where it is called extremely rarely. This
means direct app-to-app transfer of, say, a 359K text file to the browser
won't run like a drain as it tries to do strlen on a 359K string over and
over again! Most of the time the performance benefits won't really be
noticable, but on the above text file, formatting time went down from
290 seconds before the change to just under 7 seconds, a 41 fold speed
increase or thereabouts (SA110 228MHz).

MakeFile changed to force function name compilation on for debug builds
(-fn in the DD...FLAGS); useful for certain functions such as
register_null_handler, which can now output the name of the function
being registered.

...Which helped show up some nasties in the animation handler and animation
drift handler registration/deregistration process, which have been fixed
(callers of fetchpage_release_nulls were unaware that the drift handler
could be installed, and fragments of old code checking choices.anim_drift
had a value other than 1 or 0 were still hanging around - bit tricky for
a single bit item).

Added support for VALIGN in table cells. Spotted a bug or two in the
'what token is the pointer over' routines as a result, and fixed them - the
worst was in browser_line_at_y, which checked the y coordinate was below
the given one [the mouse], but didn't check the line height to see if the
given y coordinate was *within* the line, rather than just above it. Never
used to matter pre-tables, but a definite concern once multiple line
arrays can exist on one page.
@
text
@d15 1
a15 1
#ifdef TRACE
d363 9
a371 9
#else

  static void svcprint_keep_compiler_happy(void)
  {
    int a;
    a = 0;
  }

#endif
@


1.4
log
@Quite a few general source changes throughout many files to sort out swapped
toolbars. There will be more work on this shortly. svcprint.c has been
modified to allow it to output to a file in PipeFS, so TML-less machines
can still use the standard browser debug routines (albeit in a less than
elegant fashion). Comments in that source file give more details. Plus a
few more bug fixes.
@
text
@d346 4
a349 2
      fp = fopen("Pipe:$.TMLDebug", "wab");
      if (!fp) fp = fopen("Pipe:$.TMLDebug", "wb");
d351 2
@


1.3
log
@Supported client pull, through a generalised handing of the META tag.
@
text
@d17 2
a18 31
  /* -*-C-*-
   *
   * Copyright(c) 1994 Acorn Computers Ltd., Cambridge, England
   *
   * svcprint.c
   *
   * print debugging information down the TML tube link.
   *
   * provides:
   *	     %s - string
   *	     %C - character in range 20->7F (space printed if outside range)
   *	     %c - any character
   *	     %X - reverses order of bytes if >2 (or >4) specified as width
   *	     %x - hex
   *	     %B - reverses order of bytes if >2 (or >4) specified as width
   *	     %b - binary
   *	     %D - reverses order of bytes if >2 (or >4) specified as width
   *	     %d - decimal
   *	     %p - pointer ("@@xxxxxxxx")
   *
   * field width can be specified by placing a decimal number after the "%"
   * character... if the width is started by a "0" then numbers are padded
   * with "0"...
   *
   * standard format specifiers o,u,e,f and g are NOT supported
   *
   */

  #include "kernel.h"
  #include "swis.h"
  #include "svcprint.h"
d20 1
a20 1
  #include "inetlib.h"
d22 1
a22 3
  #ifndef NULL
  # define NULL	((void *)0)
  #endif
d24 271
a294 5
  #ifdef DEBUG
  /*int debug = 1;*/
  #endif

  /**********************************************************************/
d296 15
a310 230
  /*
   * call processor mode independant character output routine
   */
  static void oswrch(unsigned char ch)
  {
      _kernel_swi_regs regset;

      /*
       * use HostFS_WriteC (SWI 0x40102) to print the character
       */
      regset.r[0] = ch;
      (void)_kernel_swi(0x40102, &regset, &regset);
  }

  /**********************************************************************/

  /*
   * Printn prints a number n in base b, minimum width w adding pad chars
   * if needed.
   */
  static void printn(unsigned n, unsigned b, int w, char pad)
  {
      if( n >= b )
      {
  	printn(n / b, b, --w, pad);
  	oswrch("0123456789abcdef"[n % b]);
      }
      else
      {
  	while (--w > 0)
  	    oswrch(pad);

  	oswrch("0123456789abcdef"[n]);
      }
  }

  /**********************************************************************/

  static void prf(char *format, unsigned *argp, ...)
  {
      register int b; /* base to be used when displaying numbers */
      register int c; /* current character read from format string */
      register int w; /* field width */
      char pad;	    /* field padding character */
      unsigned val;   /* value of argument */

    loop:
      val = *argp;
      w = 0;
      pad = ' ';

      while( (c = *format++) != '%' )
      {
  	if( c == '\0' )
  	    return;
  	if( c == '\n' )
  	    oswrch('\r');
  	oswrch(c);
      }

    again:
      /*
       * we have a special format command
       */
      c = *format++;
      switch( c )
      {
        case 's':
  	{
  	    /* string */
  	    char *p = (char *)*argp++;
  	    int	 width = 0;

  	    if (p != NULL)
  	    {
  		/* NOT a NULL pointer */
  		while (*p)
  		{
  		    oswrch(*p++);
  		    width++;
  		}
  	    }

  	    while( width++ < w )
  		oswrch(' ');
  	    goto loop;
  	}

        case 'C':
  	if( (*argp < ' ') || (*argp > '~') )
  	{
  	    oswrch(' ');
  	    argp++;
  	    goto loop;
  	}

        case 'c':
  	/* character */
  	oswrch(*argp++);
  	goto loop;

        case '0':
  	if (w == 0)
  	    pad = '0';

        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
  	/* field width */
  	w = (w * 10) + ((int) c - '0');
  	goto again;

        case 'X':
  	/* hex number */
  	if (w > 4)
  	    val = (unsigned)ntohl(val);
  	else
  	{
  	    if (w > 2)
  		val = (unsigned)ntohs(val);
  	}

  	/*
  	 * NB
  	 *
  	 * fall through to set base
  	 */

        case 'x':
  	/* hex number */
  	b = 16;
  	goto number;

        case 'p':
        	/* pointer */
        	oswrch('@@');
        	w = 8;
        	pad = '0';
        	b = 16;
        	goto number;

        case 'B':
  	/* binary number */
  	if (w > 4)
  	    val = (unsigned)ntohl(val);
  	else
  	{
  	    if( w > 2 )
  		val = (unsigned)ntohs(val);
  	}

  	/*
  	 * NB
  	 *
  	 * fall through to set base
  	 */

        case 'b':
  	/* binary number */
  	b = 2;
  	goto number;

        case 'D':
  	/* decimal number */
  	if (w > 4)
  	    val = (unsigned)ntohl(val);
  	else
  	{
  	    if (w > 2)
  		val = (unsigned)ntohs(val);
  	}

  	/*
  	 * NB
  	 *
  	 * fall through to set base
  	 */

        case 'd':
  	b = 10;
  	/*
  	 * NB
  	 *
  	 * fall through to write number
  	 */

        number:
  	printn(val,b,w,pad);
  	argp++;

  	break;
      } /* switch */

      goto loop;
  }


  /**********************************************************************/

  #if 0
  # define USETUBE
  #endif /* 0/1 */

  void Printf(char *format, ...)
  {
      unsigned *argp = (unsigned *)&format;
      static int inprf;

  #ifdef USETUBE
      _kernel_swi_regs reglist;
      _kernel_oserror *err;
  /*     int s = splhi(); */

      if( (err = _kernel_swi(0x40100, &reglist, &reglist)) != NULL )
      {
  	prf("HostVDU: ", 0);
  	prf(err->errmess, 0);
  /*	splx(s); */
  	return;
      }
  #endif /* USETUBE */

      /*int s = splhi();*/
      if (inprf)
d312 41
d354 2
a355 16
      inprf=1;
      prf(format, (argp + 1));
      inprf=0;
      /*splx(s);*/

  #ifdef USETUBE
      if( (err = _kernel_swi(0x40101, &reglist, &reglist)) != NULL )
      {
  	prf("TubeVDU: ", 0);
  	prf(err->errmess, 0);
  /*	splx(s); */
  	return;
      }
  /*    splx(s); */
  #endif /* USETUBE */
  }
d357 1
a357 4

  /**********************************************************************/

  /* EOF svcprint.c */
@


1.2
log
@Added various TaskObey files to make different browser variants (the Makefile
has been updated to support this). At present, TARGET must be set for the
Make file to work (some oddity in AMU causing problems here). Added
Multiuser.h to cope with a non-SINGLE_USER build for Customer.
@
text
@d317 1
a317 1
  void svcprint_keep_compiler_happy(void)
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@a18 3
   * $Header: /ax/networking:Internet/build/svcprint.c:networking  1.2  $
   * $Source: /ax/networking:Internet/build/svcprint.c: $
   *
a41 7
   *
   * $Log:	svcprint.c,v $
   * Revision 1.2  95/03/31  11:36:04  kwelton
   * Added new debugging function ctosym().
   *
   * Revision 1.1  94/12/02  09:57:20  kwelton
   * Initial revision
@
