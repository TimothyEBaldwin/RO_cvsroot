head	1.45;
access;
symbols
	Browse-2_16:1.45
	Browse-2_15:1.45
	Browse-2_14:1.45
	Browse-2_13:1.45
	Browse-2_12:1.45
	Browse-2_11:1.44
	Browse-2_10:1.44
	Browse-2_09:1.44
	ahodgkin_208_i4_2:1.43
	ahodgkin_208_i4:1.41
	ahodgkin_208_i3:1.40
	ahodgkin_208_i2:1.39
	ahodgkin_208_i1:1.38
	ahodgkin_207release:1.35
	ahodgkin_206release:1.34
	ahodgkin_205release:1.33
	ahodgkin_204release:1.33
	ahodgkin_202release:1.32
	ahodgkin_201release:1.32
	ahodgkin_200release:1.31
	ahodgkin_133beta:1.31
	ahodgkin_132beta:1.31
	ahodgkin_131beta:1.31
	ahodgkin_130beta:1.30
	ahodgkin_129:1.29
	ahodgkin_128beta:1.29
	ahodgkin_128alpha:1.28
	ahodgkin_127beta2:1.25
	ahodgkin_127beta:1.25
	ahodgkin_126beta:1.24
	ahodgkin_AW97patch:1.23
	ahodgkin_AW97:1.19;
locks; strict;
comment	@# @;


1.45
date	2006.03.13.22.06.19;	author ahodgkin;	state Exp;
branches;
next	1.44;

1.44
date	2005.04.26.09.42.34;	author ahodgkin;	state Exp;
branches;
next	1.43;

1.43
date	2000.11.14.08.45.07;	author ahodgkin;	state Exp;
branches;
next	1.42;

1.42
date	2000.05.31.15.58.44;	author ahodgkin;	state Exp;
branches;
next	1.41;

1.41
date	2000.03.03.09.20.04;	author ahodgkin;	state Exp;
branches;
next	1.40;

1.40
date	2000.03.01.08.45.34;	author ahodgkin;	state Exp;
branches;
next	1.39;

1.39
date	2000.02.25.17.08.54;	author ahodgkin;	state Exp;
branches;
next	1.38;

1.38
date	99.09.10.09.28.09;	author ahodgkin;	state Exp;
branches;
next	1.37;

1.37
date	99.09.02.13.10.29;	author ahodgkin;	state Exp;
branches;
next	1.36;

1.36
date	99.03.30.15.51.58;	author ahodgkin;	state Exp;
branches;
next	1.35;

1.35
date	98.10.13.16.34.05;	author ahodgkin;	state Exp;
branches;
next	1.34;

1.34
date	98.07.09.10.27.21;	author ahodgkin;	state Exp;
branches;
next	1.33;

1.33
date	98.04.16.08.14.21;	author ahodgkin;	state Exp;
branches;
next	1.32;

1.32
date	98.02.23.12.06.14;	author ahodgkin;	state Exp;
branches;
next	1.31;

1.31
date	98.01.31.10.55.29;	author ahodgkin;	state Exp;
branches;
next	1.30;

1.30
date	97.12.18.10.07.04;	author ahodgkin;	state Exp;
branches;
next	1.29;

1.29
date	97.12.04.11.23.00;	author ahodgkin;	state Exp;
branches;
next	1.28;

1.28
date	97.12.02.16.13.58;	author ahodgkin;	state Exp;
branches;
next	1.27;

1.27
date	97.11.28.15.35.50;	author kbracey;	state Exp;
branches;
next	1.26;

1.26
date	97.11.26.17.11.08;	author ahodgkin;	state Exp;
branches;
next	1.25;

1.25
date	97.11.19.10.29.09;	author ahodgkin;	state Exp;
branches;
next	1.24;

1.24
date	97.10.30.17.11.14;	author ahodgkin;	state Exp;
branches;
next	1.23;

1.23
date	97.10.24.14.09.19;	author ahodgkin;	state Exp;
branches;
next	1.22;

1.22
date	97.10.22.13.16.41;	author ahodgkin;	state Exp;
branches;
next	1.21;

1.21
date	97.10.22.13.15.58;	author ahodgkin;	state Exp;
branches;
next	1.20;

1.20
date	97.10.18.16.42.29;	author ahodgkin;	state Exp;
branches;
next	1.19;

1.19
date	97.10.16.13.23.18;	author ahodgkin;	state Exp;
branches;
next	1.18;

1.18
date	97.10.13.07.07.01;	author ahodgkin;	state Exp;
branches;
next	1.17;

1.17
date	97.10.08.12.17.27;	author kbracey;	state Exp;
branches;
next	1.16;

1.16
date	97.10.07.13.52.00;	author ahodgkin;	state Exp;
branches;
next	1.15;

1.15
date	97.10.06.15.18.23;	author ahodgkin;	state Exp;
branches;
next	1.14;

1.14
date	97.10.03.10.58.12;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	97.10.03.09.19.04;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	97.09.26.12.36.06;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	97.09.22.07.43.24;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	97.09.18.12.37.21;	author kbracey;	state Exp;
branches;
next	1.9;

1.9
date	97.09.14.19.18.16;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.08.28.16.08.05;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.08.18.16.15.42;	author kbracey;	state Exp;
branches;
next	1.6;

1.6
date	97.08.18.09.24.03;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.08.12.09.26.38;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.08.08.16.38.55;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.08.01.09.00.54;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	97.07.24.11.38.56;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.28.55;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.45
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File   : Redraw.c                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Redraw functions for the browser.                 */
/*                                                            */
/* Author : A.D.Hodgkinson                                    */
/*                                                            */
/* History: 29-Nov-1996 (ADH): Created.                       */
/*          24-Feb-2000 (ADH): Headers and footers nearly     */
/*                             done, 64-wide comments with    */
/*                             Pace (C) started.              */
/*          24-May-2000 (ADH): 64-wide comments finished.     */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>
#include <tboxlibs/flex.h>

#include <HTMLLib/HTMLLib.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <tboxlibs/event.h>

#include "Global.h"
#include "FromROSLib.h"
#include "MiscDefs.h"
#include "Utils.h"

#include "Browser.h"
#include "ChoiceDefs.h"
#include "CSIM.h"
#include "Fetch.h" /* (Which itself includes URLstat.h) */
#include "FontManage.h"
#include "Forms.h"
#include "Frames.h"
#include "Images.h"
#include "Object.h"
#include "Printing.h" /* Only for the PrintSplitFraction definition at present */
#include "PrintStyle.h"
#include "Reformat.h"
#include "Scale.h"
#include "Tables.h"
#include "TokenUtils.h"
#include "Toolbars.h"

#ifdef UNIFONT
  #include <Unicode/iso10646.h>
  #include "Unifont.h"
#endif

#include "Redraw.h"

/* Static function prototypes */

static _kernel_oserror * redraw_read_section
                         (
                           browser_data                * restrict b,
                           const HStream               * restrict t
                         );

static _kernel_oserror * redraw_plinth_border
                         (
                           const browser_data          * restrict b,
                           const BBox                  * restrict user_box,
                           unsigned int                           border,
                           const unsigned int                     topleft_colour,
                           const unsigned int                     bottomright_colour
                         );

static _kernel_oserror * redraw_page_background
                         (
                           browser_data                * restrict b,
                           const WimpRedrawWindowBlock * restrict r
                         );

static _kernel_oserror * redraw_input_field
                         (
                           const browser_data          * restrict b,
                           const HStream               * restrict t,
                           const BBox                  * restrict box,
                           unsigned int                           colour
                         );

static _kernel_oserror * redraw_menu_field
                         (
                           const browser_data          * restrict b,
                           const HStream               * restrict t,
                           const BBox                  * restrict box
                         );

static _kernel_oserror * redraw_button
                         (
                           const browser_data          * restrict b,
                           const HStream               * restrict t,
                           const BBox                  * restrict box,
                           const unsigned int                     in
                         );

static _kernel_oserror * redraw_switch
                         (
                           const browser_data          * restrict b,
                           const HStream               * restrict t,
                           int                                    x,
                           int                                    y,
                           const char                  * restrict name
                         );

static _kernel_oserror * redraw_bullet
                         (
                           const browser_data          * restrict b,
                           int                                    x,
                           int                                    y,
                           unsigned int                           bullet
                         );

static _kernel_oserror * redraw_image_and_border
                         (
                           browser_data                * restrict b,
                           const HStream               * restrict tp,
                           const HStream               * restrict nocontent,
                           const WimpRedrawWindowBlock *          r,
                           int                                    mp_x,
                           int                                    mp_y
                         );

static _kernel_oserror * redraw_object_and_border
                         (
                           browser_data                * restrict b,
                           const HStream               * restrict tp,
                           const HStream               * restrict nocontent,
                           const WimpRedrawWindowBlock *          r,
                           int                                    mp_x,
                           int                                    mp_y
                         );

static _kernel_oserror * redraw_empty_message
                         (
                           unsigned int                           toplevel,
                           browser_data                * restrict b,
                           const WimpRedrawWindowBlock * restrict r
                         );

/* Used for printing. Needed because redraw_token_colour takes no "noback" flag. */
/* Could add it, but it'd hit efficiency to add a parameter to such a commonly   */
/* called function - a static is hacky but faster and means far fewer changes.   */

static unsigned int use_noback = 0;

/* Internal recursive functions. These do the actual work that their */
/* similarly named and oft externally visible counterparts claim to  */
/* do, but are part of the recursive code needed for e.g. tables.    */
/* Everything is driven by redraw_draw_r, which calls upon the other */
/* various service functions as black boxes that just break things   */
/* up into more manageable units for maintenance.                    */

static _kernel_oserror * redraw_table
                         (
                           browser_data                * restrict b,
                           const table_stream          * restrict table,
                           const WimpRedrawWindowBlock * restrict r,
                           int                                    mp_line_win_x,
                           int                                    mp_line_win_y,
                           int                                    mp_line_scr_x,
                           int                                    mp_line_scr_y,
                           unsigned int                           os_line_height,
                           int                         * restrict nextline,
                           unsigned int                           noback,
                           const HStream               * restrict nocontent
                         );

static _kernel_oserror * redraw_draw_r
                         (
                           unsigned int                           toplevel,
                           int                                    mp_origin_win_x,
                           int                                    mp_origin_win_y,
                           browser_data                * restrict b,
                           const reformat_cell         *          d,
                           WimpRedrawWindowBlock       * restrict r,
                           int                         * restrict nextline,
                           unsigned int                           noback,
                           const HStream               * restrict nocontent
                         );

static _kernel_oserror * redraw_content_stream
                         (
                           unsigned int                           toplevel,
                           int                                    mp_origin_win_x,
                           int                                    mp_origin_win_y,
                           browser_data                * restrict b,
                           const reformat_cell         *          d,
                           const WimpRedrawWindowBlock * restrict r,
                           int                         * restrict nextline,
                           int                         * restrict earlyexit,
                           unsigned int                           noback,
                           const HStream               * restrict nocontent
                         );


/**************************************************************/
/* redraw_jmptbl_line()                                       */
/*                                                            */
/* Veneer function for the redraw table. Draws to the screen  */
/* converting user-points to OS units.                        */
/*                                                            */
/* Parameters: See redraw_line_fn_ptr_t, Redraw.h.            */
/*                                                            */
/* Returns:    See redraw_line_fn_ptr_t, Redraw.h.            */
/**************************************************************/

_kernel_oserror * redraw_jmptbl_line
                  (
                    const browser_data * restrict b,
                    const BBox         * restrict ends,
                    unsigned int                  colour,

                    size_t             * restrict r_size
                  )
{
  if (r_size == NULL)
  {
    BBox os;

    scale_box_user_to_os(b, ends, &os);

    redraw_set_colour(colour);

    (void) bbc_move(os.xmin, os.ymin);
    return bbc_draw(os.xmax, os.ymax);
  }
  else
  {
    *r_size = 0;
    return NULL;
  }
}

/**************************************************************/
/* redraw_jmptbl_rectangle()                                  */
/*                                                            */
/* Veneer function for the redraw table. Draws to the screen  */
/* converting user-points to OS units.                        */
/*                                                            */
/* Parameters: See redraw_rectangle_fn_ptr_t, Redraw.h.       */
/*                                                            */
/* Returns:    See redraw_rectangle_fn_ptr_t, Redraw.h.       */
/**************************************************************/

_kernel_oserror * redraw_jmptbl_rectangle
                  (
                    const browser_data * restrict b,
                    const BBox         * restrict rect,
                    unsigned int         colour,
                    unsigned int         border,

                    size_t             * restrict r_size
                  )
{
  if (r_size == NULL)
  {
    BBox         os;
    unsigned int width, height;
    int          dx = wimpt_dx() - 1;
    int          dy = wimpt_dy() - 1;

    scale_box_user_to_os(b, rect, &os);
    redraw_set_colour(colour);

    /* Worry about pixels! Suppose the left hand edge rounds to a given   */
    /* pixel and when the border thickness is added it rounds to the same */
    /* pixel; but the right hand edge rounds to the rightmost edge of a   */
    /* given pixel, so with the border thickness added it spills to the   */
    /* adjacent pixel too. One edge will appear thicker than the other.   */
    /* Always round down; table border routines rely on it.               */

    os.xmin &= ~dx;
    os.ymin &= ~dy;
    os.xmax &= ~dx;
    os.ymax &= ~dy;

    /* The VDU routines take bottom left X and Y plus width and height, */
    /* but this is used to produce the top right *inclusive* coordinate */
    /* - so we calculate width, height and border thickness minus 1.    */

    width  = os.xmax - os.xmin - 1;
    height = os.ymax - os.ymin - 1;

    if (border != 0)
    {
      unsigned int thickness;

      thickness = scale_user_to_os(b, border);

      if (dx > dy) thickness &= ~dx;
      else         thickness &= ~dy;

      if (thickness > 0) thickness--;
      else thickness = 1;

      RetError(bbc_rectanglefill(os.xmin,                 os.ymin,                 width,     thickness));
      RetError(bbc_rectanglefill(os.xmin,                 os.ymin,                 thickness, height));
      RetError(bbc_rectanglefill(os.xmin,                 os.ymax - thickness - 1, width,     thickness));
      return   bbc_rectanglefill(os.xmax - thickness - 1, os.ymin,                 thickness, height);
    }
    else
    {
      return   bbc_rectanglefill(os.xmin, os.ymin, width, height);
    }
  }
  else
  {
    *r_size = 0;
    return NULL;
  }
}

/**************************************************************/
/* redraw_jmptbl_triangle()                                   */
/*                                                            */
/* Veneer function for the redraw table. Draws to the screen  */
/* converting user-points to OS units.                        */
/*                                                            */
/* Parameters: See redraw_triangle_fn_ptr_t, Redraw.h.        */
/*                                                            */
/* Returns:    See redraw_triangle_fn_ptr_t, Redraw.h.        */
/**************************************************************/

_kernel_oserror * redraw_jmptbl_triangle
                  (
                    const browser_data * restrict b,
                    int                           x1,
                    int                           y1,
                    int                           x2,
                    int                           y2,
                    int                           x3,
                    int                           y3,
                    unsigned int                  colour,

                    size_t             * restrict r_size
                  )
{
  if (r_size == NULL)
  {
    int os_x1, os_y1;
    int os_x2, os_y2;
    int os_x3, os_y3;

    scale_pair_user_to_os(b, x1, y1, &os_x1, &os_y1);
    scale_pair_user_to_os(b, x2, y2, &os_x2, &os_y2);
    scale_pair_user_to_os(b, x3, y3, &os_x3, &os_y3);

    redraw_set_colour(colour);

    return bbc_trianglefill(os_x1, os_y1,
                            os_x2, os_y2,
                            os_x3, os_y3);
  }
  else
  {
    *r_size = 0;
    return NULL;
  }
}

/**************************************************************/
/* redraw_jmptbl_circle()                                     */
/*                                                            */
/* Veneer function for the redraw table. Draws to the screen  */
/* converting user-points to OS units.                        */
/*                                                            */
/* Parameters: See redraw_circle_fn_ptr_t, Redraw.h.          */
/*                                                            */
/* Returns:    See redraw_circle_fn_ptr_t, Redraw.h.          */
/**************************************************************/

_kernel_oserror * redraw_jmptbl_circle
                  (
                    const browser_data * restrict b,
                    int                           x,
                    int                           y,
                    unsigned int                  radius,
                    unsigned int                  colour,

                    size_t             * restrict r_size
                  )
{
  if (r_size == NULL)
  {
    int os_x, os_y, os_radius;

    scale_pair_user_to_os(b, x, y, &os_x, &os_y);
    os_radius = scale_user_to_os(b, radius);

    redraw_set_colour(colour);

    return bbc_circlefill(os_x, os_y, os_radius);
  }
  else
  {
    *r_size = 0;
    return NULL;
  }
}

/**************************************************************/
/* redraw_jmptbl_text()                                       */
/*                                                            */
/* Veneer function for the redraw table. Draws to the screen  */
/* converting user-points to millipoints.                     */
/*                                                            */
/* Parameters: See redraw_text_fn_ptr_t, Redraw.h.            */
/*                                                            */
/* Returns:    See redraw_text_fn_ptr_t, Redraw.h.            */
/**************************************************************/

_kernel_oserror * redraw_jmptbl_text
                  (
                    const browser_data * restrict b,
                    fm_face                       handle,
                    int                           x,
                    int                           y,
                    const char         * restrict string,
                    unsigned int                  numbytes,
                    unsigned int                  fgcolour,
                    unsigned int                  bgcolour,
                    unsigned int                  blend,

                    size_t             * restrict r_size
                  )
{
  if (r_size == NULL)
  {
    int mp_x, mp_y;

    scale_pair_user_to_millipoints(b, x, y, &mp_x, &mp_y);

    RetError(fm_set_font_colour(handle,
                                fgcolour,
                                bgcolour));

    return fm_putsl(handle,
                    mp_x,
                    mp_y,
                    string,
                    numbytes,
                    0,
                    blend);
  }
  else
  {
    *r_size = 0;
    return NULL;
  }
}

/**************************************************************/
/* redraw_jmptbl_image()                                      */
/*                                                            */
/* Veneer function for the redraw table. Draws to the screen  */
/* converting user-points to OS units.                        */
/*                                                            */
/* Parameters: See redraw_image_fn_ptr_t, Redraw.h.           */
/*                                                            */
/* Returns:    See redraw_image_fn_ptr_t, Redraw.h.           */
/**************************************************************/

_kernel_oserror * redraw_jmptbl_image
                  (
                    const browser_data * restrict b,
                    const unsigned int            image,
                    int                           x,
                    int                           y,
                    unsigned int                  width,
                    unsigned int                  height,

                    size_t             * restrict r_size
                  )
{
  if (r_size == NULL)
  {
    int os_x, os_y, os_width, os_height;

    scale_pair_user_to_os(b, x,     y,      &os_x,     &os_y);
    scale_pair_user_to_os(b, width, height, &os_width, &os_height);

    return image_redraw_primitive(b,
                                  image,
                                  os_x,
                                  os_y,
                                  os_width,
                                  os_height);
  }
  else
  {
    *r_size = 0;
    return NULL;
  }
}

/**************************************************************/
/* redraw_jmptbl_sprite()                                     */
/*                                                            */
/* Veneer function for the redraw table. Draws to the screen  */
/* converting user-points to OS units.                        */
/*                                                            */
/* Parameters: See redraw_sprite_fn_ptr_t, Redraw.h.          */
/*                                                            */
/* Returns:    See redraw_sprite_fn_ptr_t, Redraw.h.          */
/**************************************************************/

_kernel_oserror * redraw_jmptbl_sprite
                  (
                    const browser_data * restrict b,
                    const char         * restrict name,
                    int                           x,
                    int                           y,

                    size_t             * restrict r_size
                  )
{
  if (r_size == NULL)
  {
    _kernel_oserror * e;

    int             * address;
    unsigned char   * translation = NULL;

    unsigned int      flags;
    unsigned int      type, sprite_type;
    unsigned int      size, log2bpp, mask;
    int               w, h;

    unsigned int      sca [4];
    unsigned char     trp [256];

    /* Convert the plot coordinates into OS units */

    scale_pair_user_to_os(b, x, y, &x, &y);

    /* Get the address of the sprite. */

    RetError(_swix(OS_SpriteOp,
                   _INR(0,2) | _OUT(2),

                   256 + 24,
                   sprite_block,
                   name,

                   &address));

    /* Work out the number of colours as log2bpp */

    RetError(_swix(OS_SpriteOp,
                   _INR(0,2) | _OUTR(3,6),

                   512 + 40,
                   sprite_block,
                   address,

                   &w, &h,
                   &mask,
                   &type));

    convert_pair_to_points(w, h, &w, &h);

    sprite_type = (type & 0xf8000000) >> 27;

    /* If the lower bit is set, this is either a mode number, or new type word */
    /* - bit 27-31 hold the sprite type in the latter case; if these are all   */
    /* zero, it's a mode number. Delightful interface.                         */

    if ((type & (1u<<0)) != 0 && sprite_type != 0)
    {
      switch (sprite_type)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6: log2bpp = sprite_type - 1; break;

        default: return NULL;
      }
    }

    /* OK, the above test failed so 'type' holds a mode number or selector */

    else
    {
      unsigned int colours;

      RetError(_swix(OS_ReadModeVariable,
                     _INR(0,1) | _OUT(2),

                     type,
                     3,

                     &colours));

      switch (colours)
      {
        case 1:     log2bpp = 0; break;
        case 3:     log2bpp = 1; break;
        case 15:    log2bpp = 2; break;
        case 63:
        case 255:   log2bpp = 3; break;
        case 65535: log2bpp = 4; break;

        default:    log2bpp = 5; break;
      }
    }

    /* Scaling details */

    RetError(_swix(Wimp_ReadPixTrans,
                   _INR(0,2) | _INR(6,7),

                   512,
                   sprite_block,
                   address,
                   sca,
                   trp));

    /* Work out the colour translation stuff for >= 8bpp */

    if (log2bpp > 2)
    {
      flags = (1u<<0) || (1u<<1) ; /* Sprite address in R1; use current palette (rather than default) if sprite doesn't have one */

      RetError(_swix(ColourTrans_SelectTable,
                     _INR(0,5) | _OUT(4),

                     sprite_block,
                     address,
                     -1, -1, 0,
                     flags,

                     &size));

      translation = malloc(size);
      if (translation == NULL) return make_no_memory_error(5);

      e = _swix(ColourTrans_SelectTable,
                _INR(0,5),

                sprite_block,
                address,
                -1,
                -1,
                translation,
                flags);

      if (e != NULL)
      {
        free(translation);
        return e;
      }
    }
    else translation = trp;

    /* Plot the sprite */

    e = _swix(OS_SpriteOp,
              _INR(0,7),

              564,
              sprite_block,
              address,
              x,
              y,
              mask == 0 ? 0 : 8, /* Plot mode 0 = overwrite, 8 = use mask */
              sca,
              translation);

    if (log2bpp > 2) free(translation);
    return e;
  }
  else
  {
    *r_size = 0;
    return NULL;
  }
}

/**************************************************************/
/* redraw_jmptbl_clipping()                                   */
/*                                                            */
/* Veneer function for the redraw table. Draws to the screen  */
/* converting user-points to OS units.                        */
/*                                                            */
/* Parameters: See redraw_clipping_fn_ptr_t, Redraw.h.        */
/*                                                            */
/* Returns:    See redraw_clipping_fn_ptr_t, Redraw.h.        */
/**************************************************************/

_kernel_oserror * redraw_jmptbl_clipping
                  (
                    const browser_data * restrict b,
                    const BBox         * restrict desired,

                    size_t             * restrict r_size
                  )
{
  if (r_size == NULL)
  {
    BBox os_desired;

    scale_box_user_to_os(b, desired, &os_desired);

    RetError(bbc_gwindow(os_desired.xmin,
                         os_desired.ymin,
                         os_desired.xmax - 1,
                         os_desired.ymax - 1));

    return NULL;
  }
  else
  {
    *r_size = 0;
    return NULL;
  }
}

/**************************************************************/
/* redraw_header()                                            */
/*                                                            */
/* Returns the header type (<H1>, <H2> etc. as a number from  */
/* 1 - 7) extracted from the flags bits of an HStream         */
/* structure.                                                 */
/*                                                            */
/* Parameters: The 'style' field of an HStream.               */
/*                                                            */
/* Returns:    A number from 1-7 for the heading level, or 0  */
/*             if the flags are not for a heading item. Note  */
/*             that flags from table stream structures should */
/*             not be passed in.                              */
/**************************************************************/

unsigned int redraw_header(unsigned int flags)
{
  /* H_MASK and H_SHIFT are defined in HTMLLib/tags.h */

  flags &= H_MASK;
  flags = (flags >> H_SHIFT);

  return flags;
}

/**************************************************************/
/* redraw_read_section()                                      */
/*                                                            */
/* Read a section heading into the given browser_data         */
/* structure's inferred_section field, from a heading line.   */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the section heading in question;               */
/*                                                            */
/*             Pointer to a token representing the first of   */
/*             one or many forming a single heading line.     */
/*                                                            */
/* Returns:    Fills in the inferred_section field of the     */
/*             given browser with the section text. Returns   */
/*             error indications directly.                    */
/**************************************************************/

static _kernel_oserror * redraw_read_section
                         (
                           browser_data  * restrict b,
                           const HStream * restrict t
                         )
{
  unsigned int h2 = redraw_header(t->style);
  unsigned int ln = 0;

  /* Store inferred section */

  free (b->inferred_section), b->inferred_section = NULL;

  while (
          t != NULL                     &&
          reformat_istext(t)            &&
          redraw_header(t->style) == h2 &&
          t->tagno != TAG_BR
        )
  {
    if (t->text != NULL && *t->text != '\0')
    {
      char * isec;

      ln += strlen(t->text);
      isec = realloc(b->inferred_section, ln + 1);

      if (isec != NULL)
      {
        if (b->inferred_section == NULL) strcpy(isec, t->text);
        else                             strcat(isec, t->text);

        b->inferred_section = isec;
      }
      else return make_no_memory_error(49);
    }

    t = t->next;
  }

  /* Inform interested parties by callback */

  return redrawcore_section_cb(b, b->inferred_section);
}

/**************************************************************/
/* redraw_backcol()                                           */
/*                                                            */
/* Small function to return the actual background colour of a */
/* browser window.                                            */
/*                                                            */
/* Parameters: A pointer to a browser_data structure          */
/*             associated with the window in question.        */
/**************************************************************/

unsigned int redraw_backcol(const browser_data * restrict b)
{
  /* If the background colour isn't set or the Choices say  */
  /* to override document colours, return the default; else */
  /* return the document-specified background colour.       */

  dprintf(("Redr", "redraw_backcol: Called with choices.background_colour = %p\n",(void *) choices.background_colour));

  return (((b->background_colour == -1) || (!b->use_source_cols)) ? (choices.background_colour) : (b->background_colour));
}

/**************************************************************/
/* redraw_background_colour()                                 */
/*                                                            */
/* Returns a background colour hint for text of a given       */
/* foreground colour.                                         */
/*                                                            */
/* Parameters: Pointer to a browser_data struct holding the   */
/*             background info;                               */
/*                                                            */
/*             A foreground colour (as a palette entry, for   */
/*             more details see redraw_set_colour()).         */
/*                                                            */
/* Returns:    A background colour.                           */
/**************************************************************/

unsigned int redraw_background_colour
             (
               const browser_data * restrict b,
               const unsigned int            foregroundcolour
             )
{
  if (!b->show_background) return redraw_backcol(b);

  switch (b->antialias_colour)
  {
    /* Defeat anti-aliasing by giving the same background colour */
    /* as the foreground if antialias_colour is -1.              */

    case -1: return foregroundcolour;

    /* If antialias_colour is -2, return the background colour from the */
    /* browser_data struct unless this is -1, in which case return the  */
    /* foreground colour again.                                         */

    case -2: return (b->background_colour == -1 ? foregroundcolour : b->background_colour);
  }

  /* Return either the default background colour or the anti-alias */
  /* colour, depending on whether document colour overriding is    */
  /* on or off respectively.                                       */

  return (!b->use_source_cols ? choices.background_colour : b->antialias_colour);
}

/**************************************************************/
/* redraw_token_colour()                                      */
/*                                                            */
/* Returns the colour to plot a token in, on the assumption   */
/* that it contains some sort of text                         */
/*                                                            */
/* Parameters: Pointer to a browser_data struct with details  */
/*             of the token stream within it;                 */
/*                                                            */
/*             Pointer to the token.                          */
/*                                                            */
/* Returns:    The colour to plot in, as a palette entry (see */
/*             redraw_set_colour()).                          */
/**************************************************************/

unsigned int redraw_token_colour
             (
               const browser_data * restrict b,
               const HStream      * restrict t
             )
{
  if (t->tagno == TAG_INPUT || t->tagno == TAG_TEXTAREA || t->tagno == TAG_SELECT) return 0;

  /* If we're printing, see if the Print Style dictates that any */
  /* text should be black.                                       */

  if (printing)
  {
    if (printstyle_always_use_black()) return Redraw_Colour_Black;

    if (
         printstyle_black_no_background() &&
         use_noback                       &&
         tokenutils_background_colour(b, t) == -1
       )
       return Redraw_Colour_Black;
  }

  /* If the token represents a link, use different colours according */
  /* to the state of that link (followed, unfollowed etc).           */

  if (ISLINK(t))
  {
    /* If tokens are selected, return the appropriate colour */

    if (redraw_selected(b, t)) return (b->use_source_cols ? b->selected_colour : choices.selected_colour);

    /* If the token has attached specific colour information, return that */

    if ((t->type & TYPE_COLOURED) && b->use_source_cols) return (t->colour << 8);

    /* If tokens are highlighted, return the appropriate colour */

    if (b->highlight) return (b->use_source_cols ? b->followed_colour : choices.followed_colour);

    /* If the token has been followed in the past, give the used colour */
    /* - otherwise give the unfollowed link colour.                     */

    if (!printing && (t->flags & HFlags_LinkVisited)) return (b->use_source_cols ? b->used_colour : choices.used_colour);

    return (b->use_source_cols ? b->link_colour : choices.link_colour);
  }

  /* If the token has attached specific colour information, return that */

  if ((t->type & TYPE_COLOURED) && b->use_source_cols) return (t->colour << 8);

  /* If the token is just text, return the normal text colour */

  return (b->use_source_cols ? b->text_colour : choices.text_colour);
}

/**************************************************************/
/* redraw_set_colour()                                        */
/*                                                            */
/* Sets the foreground colour for future plots.               */
/*                                                            */
/* Parameters: A 32-bit colour number in the form BBGGRRcc    */
/*             where cc = GCOL, or BBGGRR are blue, green and */
/*             red components.                                */
/**************************************************************/

void redraw_set_colour(unsigned int colour)
{
  dprintf(("Redr", "redraw_set_colour: Called with colour = %p\n",(void *) colour));

  /* Don't use dithering if anti-twittering redraws */

  #ifdef ANTI_TWITTER

    _swix(ColourTrans_SetGCOL,
          _IN(0) | _INR(3,4),

          colour, /* Colour to change to */
          0,      /* No dithering        */
          0);     /* GCOL action 0       */

  #else

    _swix(ColourTrans_SetGCOL,
          _IN(0) | _INR(3,4),

          colour, /* Colour to change to                            */
          1<<8,   /* Use ECFs (dithering) for better representation */
          0);     /* GCOL action 0                                  */

  #endif
}

/**************************************************************/
/* redraw_display_width()                                     */
/*                                                            */
/* Returns the available display width for a given browser    */
/* redraw cell, in OS units.                                  */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the cell;                                      */
/*                                                            */
/*             Pointer to a reformat_cell struct representing */
/*             the redraw cell.                               */
/*                                                            */
/* Returns:    The display width, in OS units.                */
/**************************************************************/

int redraw_display_width
    (
      const browser_data  * restrict b,
      const reformat_cell *          d
    )
{
  if (!d || !d->table) return b->display_width;
  else
  {
    int osw;

    convert_to_os(d->cellwidth, &osw);

    return osw;
  }
}

/**************************************************************/
/* redraw_display_height()                                    */
/*                                                            */
/* Returns the available display height for a given browser   */
/* redraw cell, in OS units; for a base browser window, it    */
/* will subtract the toolbar heights as required.             */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the cell;                                      */
/*                                                            */
/*             Pointer to a reformat_cell struct representing */
/*             the redraw cell.                               */
/*                                                            */
/* Returns:    The display width, in OS units.                */
/**************************************************************/

int redraw_display_height
    (
      const browser_data  * restrict b,
      const reformat_cell *          d
    )
{
  if (!d || !d->table)
  {
    /* Subtract a bit for aesthetics and to account for the */
    /* amount a line might naturally be overheight, so that */
    /* (say) images scaled to 100% height don't lead to a   */
    /* vertically scrollable page.                          */

    return b->display_height - b->leading * 3;
  }
  else
  {
    int osh;

    convert_to_os(d->cellheight, &osh);

    return osh;
  }
}

/**************************************************************/
/* redraw_left_margin()                                       */
/*                                                            */
/* Returns the left hand margin width for a given browser     */
/* redraw cell, in millipoints.                               */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the cell;                                      */
/*                                                            */
/*             Pointer to a reformat_cell struct representing */
/*             the redraw cell.                               */
/*                                                            */
/* Returns:    The left hand margin, in millipoints.          */
/**************************************************************/

int redraw_left_margin
    (
      const browser_data  * restrict b,
      const reformat_cell *          d
    )
{
  if (!d || !d->table) return b->left_margin;
  else
  {
    /* Left margin -> cellpadding for a table cell */

    int cellpadmp = d->table->cellpadding * 2; /* 1 'web pixel' = 2 OS units */

    convert_to_points(cellpadmp, &cellpadmp);

    return cellpadmp;
  }
}

/**************************************************************/
/* redraw_right_margin()                                      */
/*                                                            */
/* Returns the right hand margin width for a given browser    */
/* redraw cell, in millipoints.                               */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the cell;                                      */
/*                                                            */
/*             Pointer to a reformat_cell struct representing */
/*             the redraw cell.                               */
/*                                                            */
/* Returns:    The right hand margin, in millipoints.         */
/**************************************************************/

int redraw_right_margin
    (
      const browser_data  * restrict b,
      const reformat_cell *          d
    )
{
  if (!d || !d->table) return b->right_margin;
  else
  {
    /* Left margin -> cellpadding for a table cell */

    int cellpadmp = d->table->cellpadding * 2; /* 1 'web pixel' = 2 OS units */

    convert_to_points(cellpadmp, &cellpadmp);

    return cellpadmp;
  }
}

/**************************************************************/
/* redraw_left_gap()                                          */
/*                                                            */
/* Works out the left hand indented margin for a given        */
/* browser redraw cell, in millipoints. This will be          */
/* redraw_left_margin plus a value dependent upon the given   */
/* token (to allow e.g. list items to be indented).           */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the cell;                                      */
/*                                                            */
/*             Pointer to a reformat_cell struct representing */
/*             the redraw cell;                               */
/*                                                            */
/*             Pointer to a token holding indentation         */
/*             information.                                   */
/*                                                            */
/* Returns:    The left hand margin, taking account of list   */
/*             indentations etc., in millipoints.             */
/**************************************************************/

int redraw_left_gap
    (
      const browser_data  * restrict b,
      const reformat_cell *          d,
      const HStream       * restrict t
    )
{
  int s, i;

  s = t->style;
  i = t->indent * b->left_indent;

  /* Play about outdenting bullets and numbered list items. */

  if (t->tagno == TAG_LI)
  {
    if (t->text)
    {
      _kernel_oserror * e;
      fm_face           h;
      int               width, bytes;

      /* We need to right-align the text. Find out its width... */

      h = fm_find_token_font(NULL, t, 0);

      e = fm_get_string_width(h,
                              t->text,
                              0x40000000,
                              0x40000000,
                              -1,
                              &bytes,
                              &width);

      if (!e) i -= width;

      fm_lose_font(NULL, h);
    }
    else
    {
      int bullet_width;

      /* Outdent the bullet */

      convert_to_points(reformat_bullet_width(t->indent), &bullet_width);

      i -= bullet_width;
    }
  }

  /* Add an amount for block quote or address text */

  if (s & (BLOCKQUOTE | ADDRESS)) i += b->quote_margin;

  /* Return the calculated left indent plus the left */
  /* margin value.                                   */

  i += redraw_left_margin(b, d);

  return i > 0 ? i : 0;
}

/**************************************************************/
/* redraw_right_gap()                                         */
/*                                                            */
/* As redraw_left_gap, but for the right hand edge of a given */
/* redraw browser cell.                                       */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the cell;                                      */
/*                                                            */
/*             Pointer to a reformat_cell struct representing */
/*             the redraw cell;                               */
/*                                                            */
/*             Pointer to a token holding indentation         */
/*             information.                                   */
/*                                                            */
/* Returns:    The right hand margin, taking account of block */
/*             quote indents etc., in millipoints.            */
/**************************************************************/

int redraw_right_gap
    (
      const browser_data  * restrict b,
      const reformat_cell *          d,
      const HStream       * restrict t
    )
{
  int i = 0;

  /* Add an amount for block quote text */

  if (t->style & BLOCKQUOTE) i += b->quote_margin;

  /* Return the calculated right indent plus the right */
  /* margin value.                                     */

  i += redraw_right_margin(b, d);

  return i > 0 ? i : 0;
}

/**************************************************************/
/* redraw_start_x()                                           */
/*                                                            */
/* Examines current token and line structure information      */
/* within a redraw cell to return an indent from the left     */
/* edge of the page at which something should be drawn -      */
/* handles centre and right aligning of lines.                */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the cell;                                      */
/*                                                            */
/*             Pointer to a reformat_cell struct representing */
/*             the redraw cell;                               */
/*                                                            */
/*             Pointer to an HStream (token) so that a margin */
/*             can be found;                                  */
/*                                                            */
/*             Line number which the x offset needs to be     */
/*             found for.                                     */
/*                                                            */
/* Returns:    The x offset to plot at, in OS units.          */
/**************************************************************/

int redraw_start_x
    (
      const browser_data  * restrict b,
      const reformat_cell *          cell,
      const HStream       * restrict t,
      const unsigned int             line
    )
{
  int          x, align = 0;
  unsigned int cn;

  if (!cell) cell = b->cell;

  cn = cell->ldata[line].chunks;

  /* If the token isn't centred just return the margin value; */
  /* else work out centre or right alignment indentation.     */

  if      ((t->style & CENTER) || (t->type & TYPE_ALIGN_MASK) == TYPE_CENTRE) align = 1;
  else if ((t->style & RIGHT)  || (t->type & TYPE_ALIGN_MASK) == TYPE_RIGHT)  align = 2;

  if (align)
  {
    unsigned int i;
    int          left  = redraw_left_gap (b, cell, t);
    int          right = redraw_right_gap(b, cell, t);

    /* Get the window's display width in millipoints */

    convert_to_points(redraw_display_width(b, cell), &x);

    /* Subtract the width of each chunk from this value */

    for (i = 0; i < cell->ldata[line].n; x -= cell->cdata[cn].w, i++, cn++);

    /* Subtract the right hand gap value */

    x -= right;

    /* For centred objects, center between the margins */

    if (align == 1) x = left + ((x - left) / 2);

    /* Sanity check */

    if (x < left) x = left;

    /* Convert back to OS units */

    convert_to_os(x, &x);

    return x;
  }

  convert_to_os(redraw_left_gap(b, cell, t), &x);

  return x;
}

/**************************************************************/
/* redraw_token_x()                                           */
/*                                                            */
/* Examines current token and line structure information      */
/* within a redraw cell to return an indent from the left     */
/* edge of the page at which a specific token should be       */
/* drawn.                                                     */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the cell;                                      */
/*                                                            */
/*             Pointer to a reformat_cell struct representing */
/*             the redraw cell;                               */
/*                                                            */
/*             Pointer to the token;                          */
/*                                                            */
/*             Line number which the token lies in;           */
/*                                                            */
/* Returns:    The x offset from the left of the page that    */
/*             the token starts at, in OS units.              */
/**************************************************************/

int redraw_token_x
    (
      const browser_data  * restrict b,
      const reformat_cell *          cell,
      const HStream       * restrict t,
      const unsigned int             line
    )
{
  int          x;
  unsigned int chunk, mchunk;

  if (!cell) cell = b->cell;

  /* Find the starting left hand edge */

  convert_to_points(redraw_start_x(b,
                                   cell,
                                   cell->cdata[cell->ldata[line].chunks].t,
                                   line),
                    &x);

  /* Add up chunk widths */

  chunk  = cell->ldata[line].chunks;
  mchunk = cell->ldata[line].n + chunk;

  while (
          chunk < mchunk         &&
          cell->cdata[chunk].t != t
        )
        x += cell->cdata[chunk].w, chunk++;

  convert_to_os(x, &x);

  /* Return the total */

  return x;
}

/**************************************************************/
/* redraw_chunk_x()                                           */
/*                                                            */
/* Examines current token and line structure information      */
/* within a redraw cell to return an indent from the left     */
/* edge of the page at which a specific chunk should be drawn */
/* (i.e. as redraw_token_x, but you supply a chunk number     */
/* rather than a token).                                      */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the cell;                                      */
/*                                                            */
/*             Pointer to a reformat_cell struct representing */
/*             the redraw cell;                               */
/*                                                            */
/*             The chunk number;                              */
/*                                                            */
/*             Line number the chunk lies in.                 */
/*                                                            */
/* Returns:    The x offset from the left of the page that    */
/*             the chunk starts at, in OS units.              */
/*                                                            */
/* Assumes:    That the given line does indeed include the    */
/*             given chunk.                                   */
/**************************************************************/

int redraw_chunk_x
    (
      const browser_data  * restrict b,
      const reformat_cell *          cell,
      const unsigned int             chunk,
      const unsigned int             line
    )
{
  int          x;
  unsigned int cchunk, mchunk;

  if (!cell) cell = b->cell;

  /* Find the starting left hand edge */

  convert_to_points(redraw_start_x(b,
                                   cell,
                                   cell->cdata[cell->ldata[line].chunks].t,
                                   line),
                    &x);

  /* Add up chunk widths */

  cchunk = cell->ldata[line].chunks;
  mchunk = cchunk + cell->ldata[line].n;

  while (
          cchunk < mchunk &&
          cchunk < chunk
        )
        x += cell->cdata[cchunk].w, cchunk++;

  convert_to_os(x, &x);

  /* Return the total */

  return x;
}

/**************************************************************/
/* redraw_selected()                                          */
/*                                                            */
/* Looks at the 'selected' field for the given browser_data   */
/* struct, and returns 1 if the given token should be part of */
/* the selection that 'selected' lies in.                     */
/*                                                            */
/* This is for whole token selection, e.g. when keyboard      */
/* navigating a page - it isn't part of a more general        */
/* mouse-driven text selection model.                         */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the selection; Pointer to the token to         */
/*             compare.                                       */
/*                                                            */
/* Returns:    1 if the token is part of the selection, else  */
/*             0.                                             */
/**************************************************************/

unsigned int redraw_selected
             (
               const browser_data * restrict b,
               const HStream      * restrict t
             )
{
  HStream            * top;
  HStream            * end;
  const browser_data * owner;
  const browser_data * ancestor = utils_ancestor(b);
  int                  found    = 0;

  /* If printing, don't want to show anything as selected */

  if (printing) return 0;

  /* Otherwise, find out if the token is part of a selection. */

  owner = ancestor->selected_owner;

  if (!ancestor->selected) return 0;
  if (ancestor->selected == t) return 1;

  tokenutils_anchor_range(owner,
                          ancestor->selected,
                          &top,
                          &end);

  if (top && end)
  {
    do
    {
      if (t == top) found = 1;
      else top = top->next;
    }
    while (top && top != end->next && !found);
  }

  return found;
}

/**************************************************************/
/* redraw_border_around_box()                                 */
/*                                                            */
/* Draws a 2 pixel thick border around a given bounding box,  */
/* in a given colour. Usually used for selection highlights.  */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the data being redrawn;                        */
/*                                                            */
/*             Pointer to the BBox (inclusive bottom left,    */
/*             exclusive top right, OS units);                */
/*                                                            */
/*             Colour to use, as a palette entry (for more    */
/*             details see redraw_set_colour()).              */
/**************************************************************/

_kernel_oserror * redraw_border_around_box
                  (
                    const browser_data * restrict b,
                    const BBox         * restrict os_box,
                    const unsigned int            colour
                  )
{
  int  user_border;
  BBox user_box;

  /* Usual assumption is 1 pixel = 2 OS units, so get a 2 pixel border */

  user_border = scale_os_to_user(b, 4);
  scale_box_os_to_user(b, os_box, &user_box);

  /* Want the border drawn *around* the box */

  user_box.xmin -= user_border;
  user_box.ymin -= user_border;
  user_box.xmax += user_border;
  user_box.ymax += user_border;

  /* OK, draw it */

  return redrawcore_rectangle(b,
                              &user_box,
                              colour,
                              user_border);
}

/**************************************************************/
/* redraw_plinth_border()                                     */
/*                                                            */
/* Draw a 3D-style plinth border just inside the given        */
/* bounding box.                                              */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the data being redrawn;                        */
/*                                                            */
/*             Bounding box coordinates in user-points,       */
/*             (xmin,ymin) bottom left inclusive, (xmax,ymax) */
/*             top right exclusive;                           */
/*                                                            */
/*             Border width in user points;                   */
/*                                                            */
/*             Top and left edge colour;                      */
/*                                                            */
/*             Bottom and right edge colour.                  */
/**************************************************************/

static _kernel_oserror * redraw_plinth_border
                         (
                           const browser_data * restrict b,
                           const BBox         * restrict user_box,
                           unsigned int                  border,
                           const unsigned int            topleft_colour,
                           const unsigned int            bottomright_colour
                         )
{
  BBox rounded_box;
  int  rounded_border = scale_user_to_os(b, border);
  int  x[4], y[4];
  int  dx = wimpt_dx() - 1;
  int  dy = wimpt_dy() - 1;

  /* To ensure a reliable fit to the visible pixel grid, we do lots of rounding */
  /* here - for more accurate output devices, output will be quantised.         */

  scale_box_user_to_os(b, user_box, &rounded_box);

  rounded_box.xmin &= ~dx;
  rounded_box.ymin &= ~dy;
  rounded_box.xmax &= ~dx;
  rounded_box.ymax &= ~dy;

  border &= ~(dx > dy ? dx : dy);
  if (border == 0) border = 1;

  /* There are 8 corners to a plinth,  6------4  */
  /* we draw using 8 triangles. Work   |\    /|  */
  /* these out first in the arrays     | 7--5 |  */
  /* declared above to make the        | |  | |  */
  /* plotting code tidier and avoid    | 1--3 |  */
  /* unnecessary recalculation of      |/    \|  */
  /* corner coordinates.               0------2  */
  /*                                             */
  /* Note how there are only 4 unique x or y     */
  /* values, so that's all we need to work out.  */

  x[0] = rounded_box.xmin;
  x[1] = rounded_box.xmin + rounded_border - 1;
  x[2] = rounded_box.xmax - rounded_border;
  x[3] = rounded_box.xmax - 1;

  y[0] = rounded_box.ymin;
  y[1] = rounded_box.ymin + rounded_border - 1;
  y[2] = rounded_box.ymax - rounded_border;
  y[3] = rounded_box.ymax - 1;

  scale_pair_os_to_user(b, x[0], y[0], &x[0], &y[0]);
  scale_pair_os_to_user(b, x[1], y[1], &x[1], &y[1]);
  scale_pair_os_to_user(b, x[2], y[2], &x[2], &y[2]);
  scale_pair_os_to_user(b, x[3], y[3], &x[3], &y[3]);

  /* OK, now do the drawing. We need to be careful about  */
  /* the direction that the drawing occurs to ensure that */
  /* adjacent diagonal lines meet up correctly.           */

  /* Bottom edge */

  RetError(redrawcore_triangle(b, x[0], y[0], x[1], y[1], x[3], y[0], bottomright_colour)); /* 0 -> 1 -> 2 */
  RetError(redrawcore_triangle(b, x[1], y[1], x[3], y[0], x[2], y[1], bottomright_colour)); /* 1 -> 2 -> 3 */

  /* Right edge */

  RetError(redrawcore_triangle(b, x[3], y[0], x[2], y[1], x[3], y[3], bottomright_colour)); /* 2 -> 3 -> 4 */
  RetError(redrawcore_triangle(b, x[2], y[1], x[3], y[3], x[2], y[2], bottomright_colour)); /* 3 -> 4 -> 5 */

  /* Top edge */

  RetError(redrawcore_triangle(b, x[3], y[3], x[2], y[2], x[0], y[3], topleft_colour));     /* 4 -> 5 -> 6 */
  RetError(redrawcore_triangle(b, x[2], y[2], x[0], y[3], x[1], y[2], topleft_colour));     /* 5 -> 6 -> 7 */

  /* Left edge */

  RetError(redrawcore_triangle(b, x[0], y[3], x[1], y[2], x[0], y[0], topleft_colour));     /* 6 -> 7 -> 0 */
  return   redrawcore_triangle(b, x[1], y[2], x[0], y[0], x[1], y[1], topleft_colour);      /* 7 -> 0 -> 1 */
}

/**************************************************************/
/* redraw_page_background()                                   */
/*                                                            */
/* Redraw a page background's images or solid region.         */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the page being redrawn;                        */
/*                                                            */
/*             Pointer to a fully initialised Wimp redraw     */
/*             block. Tiling is carried out over the redraw   */
/*             area (graphics window) with the origin of the  */
/*             tile worked out from the visible area and      */
/*             scroll information.                            */
/**************************************************************/

static _kernel_oserror * redraw_page_background
                         (
                           browser_data                * restrict b,
                           const WimpRedrawWindowBlock * restrict r
                         )
{
  unsigned int htop;

  /* Calculate toolbar height including the toolbar's window border */

  if (!controls.swap_bars) htop = toolbars_button_height(b) + toolbars_url_height(b);
  else                     htop = toolbars_status_height(b);

  if (htop) htop += wimpt_dy();

  /* If background images are not to be shown, or there's no image */
  /* to tile on the background, set the background to a uniform    */
  /* colour. The 'if' statement implicitly calls the background    */
  /* image tiler.                                                  */

  if (
       !b->show_background ||
       !image_tile_window(b,
                          r,
                          0,
                          -htop)
     )
  {
    BBox user_box;

    scale_box_os_to_user(b, &r->redraw_area, &user_box);

    return redrawcore_rectangle(b,
                                &user_box,
                                redraw_backcol(b),
                                0);
  }

  return NULL;
}

/**************************************************************/
/* redraw_input_field()                                       */
/*                                                            */
/* For forms, redraws an input field element.                 */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the element;                                   */
/*                                                            */
/*             Pointer to the token representing this         */
/*             element;                                       */
/*                                                            */
/*             BBox of the field, in window coords (and thus  */
/*             OS units);                                     */
/*                                                            */
/*             Border colour (as a palette entry, for more    */
/*             details see redraw_set_colour());              */
/**************************************************************/

static _kernel_oserror * redraw_input_field
                         (
                           const browser_data * restrict b,
                           const HStream      * restrict t,
                           const BBox         * restrict box,
                           unsigned int                  colour
                         )
{
  int  user_border;
  BBox user_box;

  /* If the token is selected, draw the border in the selection colour */

  if (redraw_selected(b, t)) colour = b->selected_colour;

  /* Usual assumption is 1 pixel = 2 OS units, so get a 2 pixel border */

  user_border = scale_os_to_user(b, 4);
  scale_box_os_to_user(b, box, &user_box);

  /* Redraw the inside in white */

  RetError(redrawcore_rectangle(b,
                                &user_box,
                                Redraw_Colour_White,
                                0));

  /* Redraw the border */

  return redrawcore_rectangle(b,
                              &user_box,
                              colour,
                              user_border);

// This might need bringing back if the browser ever supports changing the
// border colour of an INPUT/TEXTAREA element at a token level; at the time
// of writing it would always be black, so changing to the selection colour
// to highlight input fields makes a lot of sense.
//
//  /* Selection border */
//
//  if (redraw_selected(b, t)) return redraw_border_around_box(b, box, b->selected_colour);
//  else                       return NULL;
}

/**************************************************************/
/* redraw_menu_field()                                        */
/*                                                            */
/* For forms, redraws a menu (SELECT) field element.          */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the element;                                   */
/*                                                            */
/*             Pointer to the token representing this         */
/*             element;                                       */
/*                                                            */
/*             BBox of the field, in window coords (and thus  */
/*             OS units).                                     */
/**************************************************************/

static _kernel_oserror * redraw_menu_field
                         (
                           const browser_data * restrict b,
                           const HStream      * restrict t,
                           const BBox         * restrict box
                         )
{
  int  sw, sh, offset;
  BBox shorter;

  shorter = *box;

  RetError(utils_read_sprite_size("fgright", &sw, &sh));

  shorter.xmax -= (sw + 8);

  if (shorter.xmax < shorter.xmin) shorter.xmax = shorter.xmin + sw;

  /* Redraw the display region as a slabbed button */

  RetError(redraw_button(b, t, &shorter, 2));

  /* Allow for a border or gap around the sprite - 2 OS units */
  /* each side.                                               */

  sw += 4;
  sh += 4;

  /* Work out the vertical offset and from that the bounding box */

  offset = (box->ymax - box->ymin - sh) / 2;

  shorter.xmin = box->xmax - sw;
  shorter.ymin = box->ymin + offset;
  shorter.xmax = box->xmax;
  shorter.ymax = box->ymin + offset + sh;

  RetError(redrawcore_sprite(b,
                             "fgright",
                             scale_os_to_user(b, shorter.xmin + 2),
                             scale_os_to_user(b, shorter.ymin + 2)));

  /* Thin black border */

  RetError(redrawcore_rectangle(b,
                                &shorter,
                                Redraw_Colour_Black,
                                scale_os_to_user(b, 2)));

  /* Navigation selection border */

  if (redraw_selected(b, t)) return redraw_border_around_box(b, &shorter, b->selected_colour);
  else                       return NULL;
}

/**************************************************************/
/* redraw_button()                                            */
/*                                                            */
/* For forms, redraws a button element.                       */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the element;                                   */
/*                                                            */
/*             Pointer to the token representing this         */
/*             element;                                       */
/*                                                            */
/*             BBox of the field, in window coords (and thus  */
/*             OS units);                                     */
/*                                                            */
/*             1 to be slabbed in, 2 to be slabbed in but     */
/*             with a light grey background rather than dark, */
/*             else 0.                                        */
/**************************************************************/

static _kernel_oserror * redraw_button
                         (
                           const browser_data * restrict b,
                           const HStream      * restrict t,
                           const BBox         * restrict box,
                           const unsigned int            in
                         )
{
  unsigned int colour;
  int          border;
  BBox         user_box;

  /* Usual assumption is 1 pixel = 2 OS units, so get a 2 pixel border */

  border = scale_os_to_user(b, 4);
  scale_box_os_to_user(b, box, &user_box);

  /* Draw the background */

  colour = (in == 1) ? Redraw_Colour_MidGrey : Redraw_Colour_BackGrey;

  RetError(redrawcore_rectangle(b,
                                &user_box,
                                colour,
                                0));

  /* Border */

  RetError(redraw_plinth_border(b,
                                &user_box,
                                border,
                                in ? Redraw_Colour_PlinthGrey : Redraw_Colour_AlmostWhite,
                                in ? Redraw_Colour_AlmostWhite : Redraw_Colour_PlinthGrey));

  /* Selection border */

  if (redraw_selected(b, t)) return redraw_border_around_box(b, box, b->selected_colour);
  else                       return NULL;
}

/**************************************************************/
/* redraw_switch()                                            */
/*                                                            */
/* For forms, redraws a switch (radio or option) element.     */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the element;                                   */
/*                                                            */
/*             Pointer to the token representing this         */
/*             element;                                       */
/*                                                            */
/*             x coordinate (points, in screen coords) of     */
/*             left hand edge;                                */
/*                                                            */
/*             y coordinate (points, in screen coords) of     */
/*             bottom edge;                                   */
/*                                                            */
/*             Pointer to sprite name to use.                 */
/**************************************************************/

static _kernel_oserror * redraw_switch
                         (
                           const browser_data * restrict b,
                           const HStream      * restrict t,
                           int                           x,
                           int                           y,
                           const char         * restrict name
                         )
{
  int ox, oy, ux, uy;

  /* Convert the plot position to user-points then to OS units, */
  /* so we have the plot position in both coordinate spaces.    */

  scale_pair_millipoints_to_user (b, x,  y,  &ux, &uy);
  scale_pair_user_to_os          (b, ux, uy, &ox, &oy);

  /* Correct the Y offset (aesthetics). */

  oy -= 8;

  /* Convert the updated corner coordinates back to user-points */
  /* for the plot function.                                     */

  scale_pair_os_to_user(b, ox, oy, &ux, &uy);

  /* Plot the sprite */

  RetError(redrawcore_sprite(b, name, ux, uy));

  /* If this token is selected, draw a border around the sprite. */

  if (redraw_selected(b, t))
  {
    BBox sprite;
    int  w, h;

    /* Make a sprite bounding box in OS units - needed for the */
    /* border plot below.                                      */

    if (utils_read_sprite_size(name, &w, &h)) w = h = 44;

    sprite.xmin = ox;
    sprite.ymin = oy;
    sprite.xmax = sprite.xmin + w;
    sprite.ymax = sprite.ymin + h;

    return redraw_border_around_box(b, &sprite, b->selected_colour);
  }

  return NULL;
}

/**************************************************************/
/* redraw_bullet()                                            */
/*                                                            */
/* Redraws a bullet point.                                    */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the bullet;                                    */
/*                                                            */
/*             x coordinate (points, in screen coords) of     */
/*             left hand edge;                                */
/*                                                            */
/*             y coordinate (points, in screen coords) of     */
/*             bottom edge;                                   */
/*                                                            */
/*             The bullet number.                             */
/**************************************************************/

static _kernel_oserror * redraw_bullet
                         (
                           const browser_data * restrict b,
                           int                           x,
                           int                           y,
                           unsigned int                  bullet
                         )
{
  char name[32];

  /* Convert the coordinates to user-points */

  scale_pair_millipoints_to_user(b, x, y, &x, &y);

  /* Build the name of the sprite */

  if (printing)
  {
    int w,h;

    /* Try a higher resolution bullet point, but revert back */
    /* to the normal one if it's not present.                */

    sprintf(name, "b%dp", (bullet + bullets - 1) % bullets);

    if (utils_read_sprite_size(name, &w, &h))
    {
      sprintf(name, "b%d", (bullet + bullets - 1) % bullets);
    }
  }
  else
  {
    sprintf(name, "b%d", (bullet + bullets - 1) % bullets);
  }

  /* Plot the sprite, ignoring errors. */

  return redrawcore_sprite(b, name, x, y);
}

/**************************************************************/
/* redraw_image_and_border()                                  */
/*                                                            */
/* Redraw an item containing an image (an IMG tag or INPUT    */
/* TYPE="image" item) including any HTML-specified border and */
/* navigation selection border.                               */
/*                                                            */
/* The token image position information in the image store    */
/* may be updated.                                            */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the image being redrawn - font handle data may */
/*             be updated;                                    */
/*                                                            */
/*             Pointer to the token representing the image;   */
/*                                                            */
/*             Pointer to the "no content" token for drawing  */
/*             navigation selection borders without redrawing */
/*             the selected item again - if same as the       */
/*             previous token pointer, only a selection       */
/*             border will be drawn;                          */
/*                                                            */
/*             A WimpRedrawWindowBlock pointer, used to       */
/*             convert the screen coordinates given below     */
/*             into work area coordinates;                    */
/*                                                            */
/*             Bottom left X coordinate, millipoints, screen  */
/*             origin;                                        */
/*                                                            */
/*             Bottom left Y coordinate, millipoints, screen  */
/*             origin.                                        */
/**************************************************************/

static _kernel_oserror * redraw_image_and_border
                         (
                           browser_data                * restrict b,
                           const HStream               * restrict tp,
                           const HStream               * restrict nocontent,
                           const WimpRedrawWindowBlock *          r,
                           int                                    mp_x,
                           int                                    mp_y
                         )
{
  BBox box;

  /* The function returns an image bounding box that includes its */
  /* border and hspace/vspace allocation.                         */

  if (!reformat_get_image_size(b, tp, &box))
  {
    int user_imagex, user_imagey, user_hspace, user_vspace, user_border;
    int os_imagex,   os_imagey,   os_hspace,   os_vspace,   os_border;

    /* Correct coordinates for plotting, H/V space and border. The */
    /* box returned from the above call includes all of these, so  */
    /* the actual image sits offset by the border/spacing amount.  */

    user_imagex = scale_millipoints_to_user (b, mp_x);
    user_imagey = scale_millipoints_to_user (b, mp_y);
    user_hspace = scale_web_to_user         (b, HtmlIMGhspace(tp));
    user_vspace = scale_web_to_user         (b, HtmlIMGvspace(tp));
    user_border = scale_web_to_user         (b, (tp->style & IMG) != 0 ? HtmlIMGborder(tp) : 0);

    os_imagex   = scale_user_to_os          (b, user_imagex);
    os_imagey   = scale_user_to_os          (b, user_imagey);
    os_hspace   = scale_user_to_os          (b, user_hspace);
    os_vspace   = scale_user_to_os          (b, user_vspace);
    os_border   = scale_user_to_os          (b, user_border);

    /* Borders and selection highlights want to be inside spacing, */
    /* rather than outside it, so correct for that as well as      */
    /* shifting the bounding box to produce redraw coordinates.    */

    box.xmin   += os_imagex + os_hspace;
    box.ymin   += os_imagey + os_vspace;
    box.xmax   += os_imagex - os_hspace;
    box.ymax   += os_imagey - os_vspace;

    /* Finally get the corner of the image within its border area. */

    os_imagex   = box.xmin + os_border;
    os_imagey   = box.ymin + os_border;

    /* Ensure the image has the plotting position recorded within  */
    /* its associated image_info structure so that update routines */
    /* elsewhere will know where to plot it.                       */

    image_set_token_image_position(b,
                                   tp,
                                   coords_x_toworkarea(os_imagex, r),
                                   coords_y_toworkarea(os_imagey, r));

    /* Draw the border if required */

    if (user_border != 0 && nocontent != tp)
    {
      BBox user_box;

      scale_box_os_to_user(b, &box, &user_box);

      /* Box and therefore user_box is already set up to be the exterior */
      /* bounding box of image plus border.                              */

      RetError(redrawcore_rectangle(b,
                                    &user_box,
                                    redraw_token_colour(b, tp),
                                    user_border));
    }

    /* Draw the selection highlight outside the image boundary */

    if (redraw_selected(b, tp))
    {
      RetError(redraw_border_around_box(b, &box, b->selected_colour));

// Hmm. Need to find a
// way of invoking this
// reliably, and clearing
// the highlight without
// flicking horribly.
//
//    /* Things get rather more complicated for client side maps, if */
//    /* the pointer is over them.                                   */
//
//    if (b->pointer_over == tp && (tp->type & TYPE_ISCLIENTMAP))
//    {
//      /* Ask the client side map handler to do this bit */
//
//      csim_highlight_region(b, b->selected_colour, box.xmin + o, box.ymax - o);
//    }
   }

    /* Redraw the image itself */

    if (nocontent != tp) RetError(image_redraw(b,
                                               tp,
                                               os_imagex,
                                               os_imagey,
                                               &r->redraw_area));
  }

  return NULL;
}

/**************************************************************/
/* redraw_object_and_border()                                 */
/*                                                            */
/* Redraw an item containing an OBJECT including any HTML-    */
/* specified border and navigation selection border.          */
/*                                                            */
/* The token object position information in the object store  */
/* may be updated.                                            */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the object being redrawn - font handle data    */
/*             may be updated;                                */
/*                                                            */
/*             Pointer to the token representing the object;  */
/*                                                            */
/*             Pointer to the "no content" token for drawing  */
/*             navigation selection borders without redrawing */
/*             the selected item again - if same as the       */
/*             previous token pointer, only a selection       */
/*             border will be drawn;                          */
/*                                                            */
/*             A WimpRedrawWindowBlock pointer, used to       */
/*             convert the screen coordinates given below     */
/*             into work area coordinates;                    */
/*                                                            */
/*             Bottom left X coordinate, millipoints, screen  */
/*             origin;                                        */
/*                                                            */
/*             Bottom left Y coordinate, millipoints, screen  */
/*             origin.                                        */
/**************************************************************/

static _kernel_oserror * redraw_object_and_border
                         (
                           browser_data                * restrict b,
                           const HStream               * restrict tp,
                           const HStream               * restrict nocontent,
                           const WimpRedrawWindowBlock *          r,
                           int                                    mp_x,
                           int                                    mp_y
                         )
{
  BBox box;

  /* The function returns an image bounding box that includes its */
  /* border and hspace/vspace allocation.                         */

  if (!reformat_get_object_size(b, tp, &box))
  {
    int user_objectx, user_objecty, user_hspace, user_vspace, user_border;
    int os_objectx,   os_objecty,   os_hspace,   os_vspace,   os_border;

    /* Correct coordinates for plotting, H/V space and border. The */
    /* box returned from the above call includes all of these, so  */
    /* the actual object sits offset by the border/spacing amount. */

    user_objectx = scale_millipoints_to_user (b, mp_x);
    user_objecty = scale_millipoints_to_user (b, mp_y);
    user_hspace  = scale_web_to_user         (b, HtmlOBJECThspace(tp));
    user_vspace  = scale_web_to_user         (b, HtmlOBJECTvspace(tp));
    user_border  = scale_web_to_user         (b, HtmlOBJECTborder(tp));

    os_objectx   = scale_user_to_os          (b, user_objectx);
    os_objecty   = scale_user_to_os          (b, user_objecty);
    os_hspace    = scale_user_to_os          (b, user_hspace);
    os_vspace    = scale_user_to_os          (b, user_vspace);
    os_border    = scale_user_to_os          (b, user_border);

    /* Borders and selection highlights want to be inside spacing, */
    /* rather than outside it, so correct for that as well as      */
    /* shifting the bounding box to produce redraw coordinates.    */

    box.xmin    += os_objectx + os_hspace;
    box.ymin    += os_objecty + os_vspace;
    box.xmax    += os_objectx - os_hspace;
    box.ymax    += os_objecty - os_vspace;

    /* Finally get the corner of the object within its border area. */

    os_objectx   = box.xmin + os_border;
    os_objecty   = box.ymin + os_border;

    /* Ensure the object has the plotting position recorded within  */
    /* its associated object_info structure so that update routines */
    /* elsewhere will know where to plot it.                        */

    object_set_token_object_position(b,
                                     tp,
                                     coords_x_toworkarea(os_objectx, r),
                                     coords_y_toworkarea(os_objecty, r));

    /* Draw the border if required */

    if (user_border != 0 && nocontent != tp)
    {
      BBox user_box;

      scale_box_os_to_user(b, &box, &user_box);

      /* Box and therefore user_box is already set up to be the exterior */
      /* bounding box of object plus border.                              */

      RetError(redrawcore_rectangle(b,
                                    &user_box,
                                    redraw_token_colour(b, tp),
                                    user_border));
    }

    /* Draw the selection highlight outside the object boundary */

    if (redraw_selected(b, tp))
    {
      RetError(redraw_border_around_box(b, &box, b->selected_colour));
   }

    /* Redraw the object itself */

    if (nocontent != tp) RetError(object_redraw(b,
                                                tp,
                                                os_objectx,
                                                os_objecty,
                                                &r->redraw_area));
  }

  return NULL;
}

/**************************************************************/
/* redraw_draw_placeholder()                                  */
/*                                                            */
/* Redraws a slabbed in place holder (unless the item is very */
/* small, in which case just at thin black border is plotted) */
/* for a given token, with optional text inside.              */
/*                                                            */
/* Parameters: A pointer to a browser_data structure relevant */
/*             to the redraw;                                 */
/*                                                            */
/*             Pointer to a BBox conventionally initialised   */
/*             to describe the current graphics window or     */
/*             redraw area in OS units (e.g. from the         */
/*             'redraw_area' field of a Wimp redraw block);   */
/*                                                            */
/*             Pointer to a BBox in which xmin and ymin hold  */
/*             the screen coords for the bottom left hand     */
/*             corner, and xmax and ymax hold the width and   */
/*             height of the placeholder in OS units;         */
/*                                                            */
/*             Pointer to the HStream struct the placeholder  */
/*             is to represent;                               */
/*                                                            */
/*             Pointer to a null-terminated piece of to plot  */
/*             inside, or NULL.                               */
/**************************************************************/

_kernel_oserror * redraw_draw_placeholder
                  (
                    browser_data  * restrict b,
                    const BBox    * restrict gfxwin,
                    const BBox    * restrict holder,
                    const HStream * restrict token,
                    const char    * restrict text
                  )
{
  BBox os_box = *holder;
  BBox user_box;
  int  os_border, user_border;
  int  os_adjust, user_adjust;

  /* Zero width/height items are invisible */

  if (!os_box.xmax || !os_box.ymax) return NULL;

  /* Get the bounding box in user-points */

  scale_box_os_to_user(b, holder, &user_box);

  /* The original OS unit input box has width and height in the max */
  /* fields. Convert into exclusive corner ooordinates.             */

  user_box.xmax += user_box.xmin;
  user_box.ymax += user_box.ymin;

  /* A slabbed box if the size is great enough */

  if (os_box.xmax > 8 && os_box.ymax > 30)
  {
    BBox user_shrink = user_box;

    /* Border will be 4 OS units (2 pixels) wide - a standard plinth. */
    /* Shrink the bounding box by the equivalent of 2 OS units in all */
    /* directions. Keeping the 3D border just inside its bounding box */
    /* looks much better when placeholders abut each other.           */

    os_border   = 4;
    os_adjust   = 2;
    user_border = scale_os_to_user(b, os_border);
    user_adjust = scale_os_to_user(b, os_adjust);

    user_shrink.xmin += user_adjust;
    user_shrink.ymin += user_adjust;
    user_shrink.xmax -= user_adjust;
    user_shrink.ymax -= user_adjust;

    RetError(redraw_plinth_border(b,
                                  &user_shrink,
                                  user_border,
                                  Redraw_Colour_MidGrey,
                                  Redraw_Colour_AlmostWhite));
  }

  /* Otherwise a thin black frame */

  else
  {
    /* Border will be 4 OS units (2 pixels) wide with no adjustment */
    /* for items which abut each other.                             */

    os_border   = 2;
    os_adjust   = 0;
    user_border = scale_os_to_user(b, os_border);
    user_adjust = 0;

    RetError(redrawcore_rectangle(b,
                                  &user_box,
                                  Redraw_Colour_Black,
                                  user_border));
  }

  /* Plot any text that there is */

  if (text && *text)
  {
    /* Find out the bounding box needed to contain the text */

    int          h, xpos, vcent, stringwidth;
    int          user_offset, user_pad, user_total;
    unsigned int stringheight, size;
    BBox         fbox;

    fbox.xmin = fbox.ymin = 0;

    /* Claim the font */

    size = (fm_size(token->fontsize) * 80) / 100;
    h    = fm_find_font(b,
                        "sans",
                        size,
                        size,
                        0,
                        0);

    /* Find the string width of the ALT text */

    fm_get_string_width(h,
                        text,
                        Reformat_AsWideAsPossible_MP,
                        strlen(text),
                        -1,
                        NULL,
                        &stringwidth);

    stringwidth = scale_millipoints_to_user(b, stringwidth);

    /* Find the font height */

    fm_font_box(h, &fbox);

    scale_box_os_to_user(b, &fbox, &fbox);
    stringheight = fbox.ymax - fbox.ymin;

    /* Set xpos to the horizontal offset to plot at. */
    /* Remember that 'box' contains the bottom       */
    /* left coordinates of the image, then the width */
    /* and height in OS units in xmax and ymax.      */

    /* Similarly, centre vertically */

    user_offset = scale_os_to_user(b, 10); /* Minimum distance       */
    user_pad    = scale_os_to_user(b, 2);  /* Padding inside borders */

    vcent = (user_box.ymax - user_box.ymin - stringheight + 1) / 2 - fbox.ymin;
    if (vcent < user_offset) vcent = user_offset;
    vcent += user_box.ymin;

    xpos = (user_box.xmax - user_box.xmin - stringwidth + 1) / 2;
    if (xpos < user_offset) xpos = user_offset;
    xpos += user_box.xmin;

    /* Now set the graphics window to the image bounding box,    */
    /* taking account of the slabbed border already drawn above. */
    /* Need to set this to the intersection of the current       */
    /* graphics window though, or could end up scribbling over   */
    /* things that aren't meant to be touched.                   */

    user_total = user_border + user_adjust + user_pad;

    fbox.xmin = user_box.xmin + user_total;
    fbox.xmax = user_box.xmax - user_total;
    fbox.ymin = user_box.ymin + user_total;
    fbox.ymax = user_box.ymax - user_total;

    /* If the max coordinates are less than the min, the image BBox */
    /* is too small to fit anything in. Don't proceed, as the       */
    /* attempt to set the graphics rectangle would fail, default to */
    /* the whole screen, and then random bits of ALT text would get */
    /* scribbled all over the place...                              */

    if (fbox.xmin < fbox.xmax && fbox.ymin < fbox.ymax)
    {
      BBox user_gfxwin;
      BBox user_intersect;

      scale_box_os_to_user(b, gfxwin, &user_gfxwin);

      /* Need to ensure a graphics window is set up for the plot, as  */
      /* text may be clipped, but this needs to take the current      */
      /* redraw rectangle into account too - hence the function call. */

      if (utils_intersection(&fbox, &user_gfxwin, &user_intersect))
      {
        unsigned int colour = redraw_token_colour(b, token);

        RetError(redrawcore_clipping(b, &user_intersect));

        RetError(redrawcore_text(b,
                                 h,
                                 xpos,   vcent,
                                 text,
                                 0,
                                 colour, redraw_background_colour(b, colour),
                                 1));

        /* Underline text if it's a link and the browser is set to underline links */

        if (b->underline_links && ISLINK(token))
        {
          BBox ends;
          int  user_offset = scale_os_to_user(b, 7);

          ends.xmin             = xpos;
          ends.xmax             = xpos + stringwidth - 1; /* Endpoints are inclusive coordinates */
          ends.ymin = ends.ymax = vcent - user_offset;

          if (ends.xmax >= user_intersect.xmax) ends.xmax = user_intersect.xmax - 1;
          if (ends.ymin >= user_intersect.ymin)
          {
            RetError(redrawcore_line(b,
                                     &ends,
                                     colour));
          }
        }

        RetError(redrawcore_clipping(b, &user_gfxwin));
      }
    }
  }

  return NULL;
}

/**************************************************************/
/* redraw_empty_message()                                     */
/*                                                            */
/* Draw a "this page is empty" message in a browser window.   */
/*                                                            */
/* Parameters: 1 for a top level call, else 0 if being called */
/*             as part of a recursive redraw invocation;      */
/*                                                            */
/*             Pointer to a browser_data struct with the      */
/*             empty document;                                */
/*                                                            */
/*             A WimpRedrawWindowBlock pointer, with window   */
/*             area and redraw rectangle details filled in.   */
/**************************************************************/

static _kernel_oserror * redraw_empty_message
                         (
                           unsigned int                           toplevel,
                           browser_data                * restrict b,
                           const WimpRedrawWindowBlock * restrict r
                         )
{
  if (!printing || !toplevel)
  {
    /* Set the graphics background colour to the default  */
    /* and clear the graphics rectangle [to this colour]. */

    redraw_set_colour(choices.background_colour);

    bbc_rectanglefill(r->redraw_area.xmin,
                      r->redraw_area.ymin,
                      r->redraw_area.xmax - r->redraw_area.xmin,
                      r->redraw_area.ymax - r->redraw_area.ymin);
  }

  /* If there's a fetch URL but no stream, the document was empty */

  if (browser_current_url(b) && !fetch_fetching(b))
  {
    fm_face h;
    int     x, y, htop;
    BBox    size;

    /* Claim a font */

    h = fm_find_font(b,
                     "sans",
                     (int) (choices.font_size * 1.5),
                     (int) (choices.font_size * 1.5),
                     0,
                     1);

    /* Find the height of the tallest character */

    fm_font_box(h, &size);

    /* Use that height, and the toolbar sizes to work out the y coordinate to plot at */

    if (!controls.swap_bars) htop = toolbars_button_height(b) + toolbars_url_height(b);
    else                     htop = toolbars_status_height(b);

    if (htop) htop += wimpt_dy();

    y = coords_y_toscreen(htop - size.ymax - size.ymin - 40, r); /* -40 = arbitrary constant, aesthetic consideration */

    /* The x coordinate has a fixed offset from the left */

    x = coords_x_toscreen(32, r);

    dprintf(("Redr", "redraw_empty_message_r: Empty page, claimed font %p\n"
                     "                        Plotting x,y %d,%d\n",

                                              (void *) h,
                                              x, y));

    /* Set a black-on-grey font colour */

    fm_set_font_colour(h,
                       choices.text_colour,
                       choices.background_colour);

    /* Write the string */

    fm_puts(h,
            x,
            y,
            lookup_token("NoData:The server returned a blank page.",
                         0,
                         0),
            1,
            1);
  }

  return NULL;
}

/**************************************************************/
/* redraw_table()                                             */
/*                                                            */
/* Redraw a table, including inner and outer borders and the  */
/* contents - the latter involving a call to redraw_draw_r,   */
/* which is at the time of writing always a recursive call.   */
/*                                                            */
/* Parameters: Pointer to the browser_data struct relevant to */
/*             the table being drawn;                         */
/*                                                            */
/*             Pointer to a table_stream representing the     */
/*             table - usually a cast HStream pointer;        */
/*                                                            */
/*             Pointer to a Wimp redraw block containing the  */
/*             information on the current redraw environment; */
/*                                                            */
/*             X offset of the table's bottom left corner in  */
/*             millipoints relative to the window/outer cell; */
/*                                                            */
/*             Y offset of the table's bottom left corner in  */
/*             millipoints relative to the window/outer cell; */
/*                                                            */
/*             X offset of the table's bottom left corner in  */
/*             millipoints relative to the screen origin;     */
/*                                                            */
/*             Y offset of the table's bottom left corner in  */
/*             millipoints relative to the screen origin;     */
/*                                                            */
/*             Height of line containing the table in OS      */
/*             units;                                         */
/*                                                            */
/*             Pointer to an int, updated on exit during      */
/*             printing (global "printing" flag is set) with  */
/*             the y-coordinate of the top of the line that   */
/*             is to be printed next, in OS units, or zero if */
/*             there are no more lines - may be NULL if not   */
/*             interested;                                    */
/*                                                            */
/*             1 to plot no backgrounds at all, else they     */
/*             will be shown;                                 */
/*                                                            */
/*             0 for normal redraw, else pointer to a token   */
/*             where no content is to be drawn - only the     */
/*             elements that are needed to indicate selection */
/*             should be shown. This is used mostly for       */
/*             things like removing borders around images; if */
/*             bits of the image have to be redrawn this can  */
/*             make the removal slow. Only one token is       */
/*             allowed as any adjacent images must be redrawn */
/*             if the border was plotted over them, or redraw */
/*             anomalies will be seen as 'holes' are left     */
/*             behind. There is some intelligence to give     */
/*             different behaviour if selecting or            */
/*             deselecting things.                            */
/**************************************************************/

static _kernel_oserror * redraw_table
                         (
                           browser_data                * restrict b,
                           const table_stream          * restrict table,
                           const WimpRedrawWindowBlock * restrict r,
                           int                                    mp_line_win_x,
                           int                                    mp_line_win_y,
                           int                                    mp_line_scr_x,
                           int                                    mp_line_scr_y,
                           unsigned int                           os_line_height,
                           int                         * restrict nextline,
                           unsigned int                           noback,
                           const HStream               * restrict nocontent
                         )
{
  reformat_cell  * cellarray = table->cells;
  reformat_cell  * cell;
  table_row      * row;
  table_headdata * head;

  unsigned int     cellindex;
  unsigned int     cellcount;
  unsigned int     cellmax    = table->ColSpan * table->RowSpan;

  BBox user_cellbox,  mp_cellbox;
  BBox user_tablebox, mp_tablebox;
  BBox user_gfxwin;

  int              user_cellspacing, mp_cellspacing;
  int              user_h,           mp_h;

  unsigned int     border_2d  = 0;
  int              dx         = wimpt_dx();
  int              dy         = wimpt_dy();
  int              max;
  int              user_border;

  unsigned int     oldback    = 0;
  unsigned int     oldaa      = 0;
  int              oldbgimage = -1;
  unsigned int     t_noback;

  /* Redraw block copy used for table cell rectangle redraws */

  WimpRedrawWindowBlock local_r = *r;

  /* Get the line height in user-points and millipoints */

  user_h = scale_os_to_user          (b, os_line_height);
  mp_h   = scale_user_to_millipoints (b, user_h);

  /* Get the graphics window (redraw area) in user-points */

  scale_box_os_to_user(b, &r->redraw_area, &user_gfxwin);

  /* Find out the overall bounding box of the table, and put this in */
  /* 'mp_tablebox'.                                                  */

  mp_tablebox.xmin = mp_tablebox.ymin = 0x7fffffff;
  mp_tablebox.xmax = mp_tablebox.ymax = 0;

  cellcount = 0;
  row       = table->List;

  while (row && cellcount < cellmax)
  {
    head = row->List;

    while (head && cellcount < cellmax)
    {
      switch (head->Tag)
      {
        case TagTableData:
        case TagTableHead:
        {
          cellindex = head->RowOffs * table->ColSpan + head->ColOffs;

          if (cellindex < cellmax)
          {
            BBox cbox;

            cell = &cellarray[cellindex];

            /* Calculate the coordinates of the cell corners */

            cbox.xmin = mp_line_scr_x + cell->x;
            cbox.xmax = cbox.xmin + cell->cellwidth;

            cbox.ymax = mp_line_scr_y + cell->y + mp_h;
            cbox.ymin = cbox.ymax - cell->cellheight;

            /* Update the table bounding box as required */

            if (cbox.xmin < mp_tablebox.xmin) mp_tablebox.xmin = cbox.xmin;
            if (cbox.ymin < mp_tablebox.ymin) mp_tablebox.ymin = cbox.ymin;
            if (cbox.xmax > mp_tablebox.xmax) mp_tablebox.xmax = cbox.xmax;
            if (cbox.ymax > mp_tablebox.ymax) mp_tablebox.ymax = cbox.ymax;

          /* Closure of 'if (cellindex < cellmax)' */
          }

        /* Closure of specific 'case' item */
        }
        break;

      /* Closure of 'switch (head->Tag)' */
      }

      cellcount ++;
      head = head->Next;

    /* Closure of 'while (head && ...)' */
    }

    row = row->Next;

  /* Closure of 'while (row && ...)' */
  }

  /* Interior cell spacing is included above because the X and Y */
  /* coordinates of cells have already been set up with spacing  */
  /* included. Must include the spacing between the outer cells  */
  /* and the outer table border, though.                         */
  /*                                                             */
  /* Note that mp_tablebox now contains a bounding box of the    */
  /* table contents, with the table border going *outside* this. */

  user_cellspacing = scale_web_to_user         (b, table->cellspacing);
  mp_cellspacing   = scale_user_to_millipoints (b, user_cellspacing);

  mp_tablebox.xmin -= mp_cellspacing;
  mp_tablebox.ymin -= mp_cellspacing;
  mp_tablebox.xmax += mp_cellspacing;
  mp_tablebox.ymax += mp_cellspacing;

  scale_box_millipoints_to_user (b, &mp_tablebox, &user_tablebox);

  /* Work out the border width for cell borders. This needs to be */
  /* 1 pixel wide in normal 90DPI screen modes, or 2 OS units, or */
  /* the equivalent for higher resolution output.                 */

  if (dx > dy) max = dx;
  else         max = dy;

  if (max < 2 || printing) max = 2;

  user_border = scale_os_to_user(b, max);

  /* If the table has a background colour, draw this */

  if (TABLE_HAS_BGCOL(table) && !noback && b->use_source_cols)
  {
    RetError(redrawcore_rectangle(b,
                                  &user_tablebox,
                                  TABLE_BGCOL(table),
                                  0));
  }

  /* Now redraw the table cells */

  cellcount = 0;
  row       = table->List;

  while (row && cellcount < cellmax)
  {
    head = row->List;

    while (head && cellcount < cellmax)
    {
      switch (head->Tag)
      {
        case TagTableData:
        case TagTableHead:
        {
          cellindex = head->RowOffs * table->ColSpan + head->ColOffs;

          if (cellindex < cellmax)
          {
            BBox user_intersect;

            cell = &cellarray[cellindex];

            if (TD_HAS_BGCOL(head))
            {
              oldback              = b->background_colour;
              oldaa                = b->antialias_colour;
              oldbgimage           = b->background_image;
              b->background_colour = TD_BGCOL(head);
              b->antialias_colour  = b->background_colour;
              b->background_image  = -1; /* For now, no background images in table cells. */

              t_noback = 0;
            }
            else t_noback = 1;

            /* Set the graphics rectangle up for the redraw */

            mp_cellbox.xmin = mp_line_scr_x + cell->x;
            mp_cellbox.xmax = mp_cellbox.xmin + cell->cellwidth;

            mp_cellbox.ymax = mp_line_scr_y + cell->y + mp_h;
            mp_cellbox.ymin = mp_cellbox.ymax - cell->cellheight;

            /* Get the box in user-points and OS units */

            scale_box_millipoints_to_user(b, &mp_cellbox, &user_cellbox);

            /* See if the cell redraw box has non-zero dimensions and   */
            /* intersects the overall redraw rectangle. If so, draw it. */

            if (
                 user_cellbox.xmin != user_cellbox.xmax &&
                 user_cellbox.ymin != user_cellbox.ymax &&

                 utils_intersection(&user_cellbox,
                                    &user_gfxwin,
                                    &user_intersect) != 0
               )
            {
              /* Other routines that set the graphics window do it the same way as */
              /* here - they assume the redraw rectangle = the graphics window, as */
              /* during printing it's not possible to read the VDU variables to    */
              /* obtain the actual window. To ensure that this holds true, before  */
              /* recursively calling the redraw functions, the redraw rectangle    */
              /* must be set to match the graphics rectangle using a local copy of */
              /* the redraw block.                                                 */

              scale_box_user_to_os(b, &user_intersect, &local_r.redraw_area);

              /* Recursive call to redraw the cell contents */

              RetError(redrawcore_clipping(b, &user_intersect));

              RetError(redraw_draw_r(0, /* 0 = recursive rather than top-level call */
                                     mp_line_win_x + cell->x,
                                     mp_line_win_y + cell->y + mp_h,
                                     b,
                                     cell,
                                     &local_r,
                                     nextline,
                                     t_noback,
                                     nocontent));

              /* Restore print loop noback flag. Since noback is a parameter it stacks and */
              /* unstacks as we call the redraw function recursively, but the static       */
              /* use_noback doesn't. So we have to ensure it is kept in step with noback   */
              /* after any recursive redraw calls.                                         */

              use_noback = noback;

              RetError(redrawcore_clipping(b, &user_gfxwin));
            }

            #ifdef TRACE
              if (tl & (1u<<11))
              {
                /* Outline the cell BBox. Note that this will draw with *unrounded* */
                /* coordinates so the boxes may not exactly match the normal table  */
                /* borders, which run through the rounded coord rectangle routines. */

                BBox os_cellbox;

                scale_box_user_to_os(b, &user_cellbox, &os_cellbox);

                redraw_set_colour(0xff00aa00);
                bbc_rectangle(os_cellbox.xmin, os_cellbox.ymin, os_cellbox.xmax - os_cellbox.xmin - 1, os_cellbox.ymax - os_cellbox.ymin - 1);

                redraw_set_colour(0xff22cc00);
                bbc_rectangle(os_cellbox.xmin + 2, os_cellbox.ymin + 2, os_cellbox.xmax - os_cellbox.xmin - 5, os_cellbox.ymax - os_cellbox.ymin - 5);
              }
            #endif

            /* Restore any data altered in b */

            if (!t_noback)
            {
              b->background_colour = oldback;
              b->antialias_colour  = oldaa;
              b->background_image  = oldbgimage;
            }

            /* Draw the slabbed in cell border. */

            if (TABLE_BORDER(table) && choices.table_inner != Choices_TableInner_Never)
            {
              BBox user_cellborder;

              /* Obtain a rectangle including the cell plus its border, for borders  */
              /* drawn outside the cell contents (i.e. whenever cell spacing permits */
              /* this).                                                              */

              user_cellborder.xmin = user_cellbox.xmin - user_border;
              user_cellborder.ymin = user_cellbox.ymin - user_border;
              user_cellborder.xmax = user_cellbox.xmax + user_border;
              user_cellborder.ymax = user_cellbox.ymax + user_border;

              /* For tables with a cell spacing wide enough to fit in two lots */
              /* of border at least, so preferably with a gap (3D plinths must */
              /* not overlap, unlike the 2D borders), use the 3D plinth. Allow */
              /* Choices settings to override this.                            */

              if (
                   choices.table_inner != Choices_TableInner_Always2D &&
                   (
                     user_cellspacing > user_border * 2 ||
                     choices.table_inner == Choices_TableInner_Always3D
                   )
                 )
              {
                border_2d = 0; /* Flag is used for table outer border too */

                RetError(redraw_plinth_border(b,
                                              user_cellspacing >= user_border * 2 ? &user_cellborder
                                                                                  : &user_cellbox,
                                              user_border,
                                              Redraw_Colour_PlinthGrey,
                                              Redraw_Colour_AlmostWhite));
              }

              /* Otherwise use a black 2D border. If cell spacing permits, put this in */
              /* the user_cellborder box - outside the cell contents. Otherwise we use */
              /* the cell bounding box, drawing over the outer edge of the contents.   */

              else
              {
                border_2d = 1; /* Flag is used for table outer border too */

                RetError(redrawcore_rectangle(b,
                                              user_cellspacing >= user_border ? &user_cellborder
                                                                              : &user_cellbox,
                                              Redraw_Colour_Black,
                                              user_border));
              }
            }

          /* Closure of 'if (cellindex < cellmax)' */
          }

        /* Closure of specific 'case' item */
        }
        break;

      /* Closure of 'switch (head->Tag)' */
      }

      cellcount ++;

      head = head->Next;

    /* Closure of 'while (head && ...)' */
    }

    row = row->Next;

  /* Closure of 'while (row && ...)' */
  }

  /* Right, now redraw the slabbed out outer table border */

  if (TABLE_BORDER(table) && choices.table_outer != Choices_TableOuter_Never)
  {
    int user_border = scale_web_to_user(b, TABLE_BORDER(table));

    /* The existing table box doesn't account for the exterior border */

    user_tablebox.xmin -= user_border;
    user_tablebox.ymin -= user_border;
    user_tablebox.xmax += user_border;
    user_tablebox.ymax += user_border;

    /* Use the same 2D/3D style as we used for the cells, unless */
    /* the Choices settings override it.                         */

    if (border_2d == 0 || choices.table_outer == Choices_TableOuter_Always3D)
    {
      RetError(redraw_plinth_border(b,
                                    &user_tablebox,
                                    user_border,
                                    Redraw_Colour_AlmostWhite,
                                    Redraw_Colour_PlinthGrey));
    }
    else
    {
      RetError(redrawcore_rectangle(b,
                                    &user_tablebox,
                                    Redraw_Colour_Black,
                                    user_border));
    }
  }

  return NULL;
}

/**************************************************************/
/* redraw_draw()                                              */
/*                                                            */
/* The main browser redraw engine.                            */
/*                                                            */
/* Parameters: A pointer to a browser_data structure relevant */
/*             to the redraw;                                 */
/*                                                            */
/*             A WimpRedrawWindowBlock pointer, with window   */
/*             area and redraw rectangle details filled in;   */
/*                                                            */
/*             Pointer to an int, updated on exit during      */
/*             printing (global "printing" flag is set) with  */
/*             the y-coordinate of the top of the line that   */
/*             is to be printed next, in OS units, or zero if */
/*             there are no more lines - may be NULL if not   */
/*             interested;                                    */
/*                                                            */
/*             1 to plot no backgrounds at all, else they     */
/*             will be shown;                                 */
/*                                                            */
/*             0 for normal redraw, else pointer to a token   */
/*             where no content is to be drawn - only the     */
/*             elements that are needed to indicate selection */
/*             should be shown. This is used mostly for       */
/*             things like removing borders around images; if */
/*             bits of the image have to be redrawn this can  */
/*             make the removal slow. Only one token is       */
/*             allowed as any adjacent images must be redrawn */
/*             if the border was plotted over them, or redraw */
/*             anomalies will be seen as 'holes' are left     */
/*             behind. There is some intelligence to give     */
/*             different behaviour if selecting or            */
/*             deselecting things.                            */
/**************************************************************/

_kernel_oserror * redraw_draw
                  (
                    browser_data          * restrict b,
                    WimpRedrawWindowBlock * restrict r,
                    int                   * restrict nextline,
                    unsigned int                     noback,
                    const HStream         * restrict nocontent
                  )
{
  use_noback = noback;

  return redraw_draw_r(1, /* 1 for top level, 0 for recursive call */
                       0, /* X origin, millipoints in window space */
                       0, /* Y origin, millipoints in window space */
                       b,
                       b->cell,
                       r,
                       nextline,
                       noback,
                       nocontent);
}

/**************************************************************/
/* redraw_draw_r()                                            */
/*                                                            */
/* Recursive back-end to redraw_draw.                         */
/*                                                            */
/* Parameters: 1 for a top level call, else 0 if being called */
/*             recursively;                                   */
/*                                                            */
/*             X origin for plotting (window coords but in    */
/*             millipoints) - usually used for cell contents  */
/*             that are offset relative to a parent cell;     */
/*                                                            */
/*             Y origin for plotting (window coords but in    */
/*             millipoints);                                  */
/*                                                            */
/*             A pointer to a browser_data structure relevant */
/*             to the redraw;                                 */
/*                                                            */
/*             Pointer to a reformat_cell struct holding the  */
/*             lines and chunks to redraw;                    */
/*                                                            */
/*             A WimpRedrawWindowBlock pointer, with window   */
/*             area and redraw rectangle details filled in;   */
/*                                                            */
/*             Pointer to an int, updated on exit during      */
/*             printing (global "printing" flag is set) with  */
/*             the y-coordinate of the top of the line that   */
/*             is to be printed next, in OS units, or zero if */
/*             there are no more lines - may be NULL if not   */
/*             interested;                                    */
/*                                                            */
/*             1 to plot no backgrounds at all, else they     */
/*             will be shown;                                 */
/*                                                            */
/*             0 for normal redraw, else pointer to a token   */
/*             where no content is to be drawn - only the     */
/*             elements that are needed to indicate selection */
/*             should be shown. This is used mostly for       */
/*             things like removing borders around images; if */
/*             bits of the image have to be redrawn this can  */
/*             make the removal slow. Only one token is       */
/*             allowed as any adjacent images must be redrawn */
/*             if the border was plotted over them, or redraw */
/*             anomalies will be seen as 'holes' are left     */
/*             behind. There is some intelligence to give     */
/*             different behaviour if selecting or            */
/*             deselecting things.                            */
/*                                                            */
/* Assumes:    Pointers to items may NOT be NULL unless       */
/*             explicitly stated above.                       */
/**************************************************************/

static _kernel_oserror * redraw_draw_r
                         (
                           unsigned int                     toplevel,
                           int                              mp_origin_win_x,
                           int                              mp_origin_win_y,
                           browser_data          * restrict b,
                           const reformat_cell   *          d,
                           WimpRedrawWindowBlock * restrict r,
                           int                   * restrict nextline,
                           unsigned int                     noback,
                           const HStream         * restrict nocontent
                         )
{
  int more = 0;

  dprintf(("Redr", "\nredraw_draw_r: Called\n"));

  /* Start redraw */

  do
  {
    if (b->nchildren)
    {
      /* If this browser has children, it has no directly redrawable content;  */
      /* however, the frames it contains may need borders drawing around them. */

      dprintf(("Redr", "redraw_draw_r: Have children\n"));

      frames_redraw_borders(b, r);
    }
    else
    {
      /* If the browser doesn't have child frames, want to draw */
      /* the document it holds instead.                         */

      dprintf(("Redr", "redraw_draw_r: Have no children\n"));

      if (b->stream)
      {
        int earlyexit = 0;

        /* There is a non-empty document - draw the contents */

        RetError(redraw_content_stream(toplevel,
                                       mp_origin_win_x,
                                       mp_origin_win_y,
                                       b,
                                       d,
                                       r,
                                       nextline,
                                       &earlyexit,
                                       noback,
                                       nocontent));

        /* If we're working in a paginated context the exit flag  */
        /* tells us when to bail out sooner than the redraw block */
        /* might otherwise indicate.                              */

        if (earlyexit != 0) return NULL;
      }
      else
      {
        /* The document is empty - draw an appropriate warning */

        RetError(redraw_empty_message(toplevel,
                                      b,
                                      r));

        if (printing)
        {
          if (nextline != NULL) *nextline = 0;
          return NULL;
        }
      }
    }

    if (!printing && toplevel)
    {
      #ifdef ANTI_TWITTER
        anti_twitter(r);
      #endif

      wimp_get_rectangle(r, &more);
    }
  }
  while (more);

  /* Finished... */

  return NULL;
}

/**************************************************************/
/* redraw_content_stream()                                    */
/*                                                            */
/* Redraw an actual content stream. Assumes b->stream is not  */
/* NULL and b->nchildren is zero.                             */
/*                                                            */
/* Parameters: 1 for a top level call, else 0 if being called */
/*             as part of a recursive redraw invocation;      */
/*                                                            */
/*             X origin for plotting (window coords but in    */
/*             millipoints) - usually used for cell contents  */
/*             that are offset relative to a parent cell;     */
/*                                                            */
/*             Y origin for plotting (window coords but in    */
/*             millipoints);                                  */
/*                                                            */
/*             A pointer to a browser_data structure relevant */
/*             to the redraw;                                 */
/*                                                            */
/*             Pointer to a reformat_cell struct holding the  */
/*             lines and chunks to redraw;                    */
/*                                                            */
/*             A WimpRedrawWindowBlock pointer, with window   */
/*             area and redraw rectangle details filled in;   */
/*                                                            */
/*             Pointer to an int, updated on exit during      */
/*             printing (global "printing" flag is set) with  */
/*             the y-coordinate of the top of the line that   */
/*             is to be printed next, in OS units, or zero if */
/*             there are no more lines - may be NULL if not   */
/*             interested;                                    */
/*                                                            */
/*             Pointer to a related int, the int set to zero  */
/*             before calling, which will be updated to non-  */
/*             zero on exit if the function believes a higher */
/*             level redraw loop should exit prematurely      */
/*             because a split point has been found - may be  */
/*             NULL if not interested;                        */
/*                                                            */
/*             1 to plot no backgrounds at all, else they     */
/*             will be shown;                                 */
/*                                                            */
/*             0 for normal redraw, else pointer to a token   */
/*             where no content is to be drawn - only the     */
/*             elements that are needed to indicate selection */
/*             should be shown. This is used mostly for       */
/*             things like removing borders around images; if */
/*             bits of the image have to be redrawn this can  */
/*             make the removal slow. Only one token is       */
/*             allowed as any adjacent images must be redrawn */
/*             if the border was plotted over them, or redraw */
/*             anomalies will be seen as 'holes' are left     */
/*             behind. There is some intelligence to give     */
/*             different behaviour if selecting or            */
/*             deselecting things.                            */
/*                                                            */
/* Assumes:    Pointers to items may NOT be NULL unless       */
/*             explicitly stated above.                       */
/**************************************************************/

static _kernel_oserror * redraw_content_stream
                         (
                           unsigned int                           toplevel,
                           int                                    mp_origin_win_x,
                           int                                    mp_origin_win_y,
                           browser_data                * restrict b,
                           const reformat_cell         *          d,
                           const WimpRedrawWindowBlock * restrict r,
                           int                         * restrict nextline,
                           int                         * restrict earlyexit,
                           unsigned int                           noback,
                           const HStream               * restrict nocontent
                         )
{
  browser_data * ancestor = utils_ancestor(b);
  unsigned int   l        = 0;

  int            page_bottom, page_height;

  int            user_origin_win_x, os_origin_win_x;
  int            user_origin_win_y, os_origin_win_y;
  int            user_bgap,         os_bgap,         mp_bgap;
  BBox           user_gfxwin,       os_gfxwin,       mp_gfxwin;

  BBox           os_workarea;

  /* There is an HTML stream, so there is something to redraw. Put */
  /* the x and y origin in OS units into os_xorg and os_yorg and   */
  /* user-points in user_origin_win_x and user_origin_win_y.       */

  scale_pair_millipoints_to_user (b, mp_origin_win_x,    mp_origin_win_y,    &user_origin_win_x, &user_origin_win_y);
  scale_pair_user_to_os          (b, user_origin_win_x,  user_origin_win_y,  &os_origin_win_x,   &os_origin_win_y);

  /* Do the same thing for the graphics window, held to start with */
  /* in OS screen coordinates in the redraw_area field of 'r'.     */

  os_gfxwin = r->redraw_area;

  scale_box_os_to_user           (b, &os_gfxwin,    &user_gfxwin);
  scale_box_user_to_millipoints  (b, &user_gfxwin,  &mp_gfxwin);

  /* Get a work area coordinate equivalent of r->redraw_area */

  os_workarea = os_gfxwin;
  coords_box_toworkarea(&os_workarea, r);

  /* When redrawing objects with a navigation selection border, the  */
  /* border often falls outside the strict bounding box of the token */
  /* so if the line and chunk scanning loops worked purely off the   */
  /* redraw coordinates they'd only redraw a border if the redraw    */
  /* region happened to intersect with the object inside - so you    */
  /* could "rub out" the border by dragging (say) a menu carefully   */
  /* over just the border region without touching the interior.      */
  /*                                                                 */
  /* We could just hack the redraw area to make it wider - instead,  */
  /* if there is a selected token and we're not printing, calculate  */
  /* a gap to take into account equal to the border width.           */

  if (!printing && (utils_ancestor(b))->selected != NULL)
  {
    user_bgap = scale_os_to_user          (b, Redraw_SelectedBorder_OS);
    os_bgap   = scale_user_to_os          (b, user_bgap);
    mp_bgap   = scale_user_to_millipoints (b, user_bgap);
  }
  else
  {
    user_bgap = os_bgap = mp_bgap = 0;
  }

  /* Get the page bottom in work area coordinates, and the page height. */
  /* This is really a printing only concept, where the visible_area     */
  /* BBox will in fact hold the entire page bounding box. The variables */
  /* aren't used for anything else (at present, hence no 'if' wrapper). */

  page_bottom = coords_y_toworkarea(r->visible_area.ymin, r);
  page_height = r->visible_area.ymax - r->visible_area.ymin;

  /* If printing, handle display style override for backgrounds */

  if (printing)
  {
    /* Force background off for some cases... */

    if      (printstyle_show_none()) noback = 1;
    else if (printstyle_show_in_tables_only)
    {
      if (toplevel) noback = 1;
      else
      {
        /* Need to work out if this table cell has a background colour */

        if (d->cdata && d->cdata[0].t->parent)
        {
          if (TD_HAS_BGCOL(d->cdata[0].t->parent)) noback = 0;
          else                                     noback = 1;
        }
      }
    }

    /* ...and on for others */

    if (printstyle_show_all() && toplevel) noback = 0;
  }

  use_noback = noback;

  /* If we've *not* been told *not* to plot any backgrounds... */

  if (!noback)
  {
    /* For cells, browser legacy code made it really difficult to change all  */
    /* points where background colours were read to get it from a cell rather */
    /* than a browser. Many years ago, the hacky solution which still exists  */
    /* today was to update the browser_data structure's background and anti-  */
    /* alias colour records with the values from each table cell just before  */
    /* the recursive redraw call for that cell, then restore them after. This */
    /* call below, then, redraws both page backgrounds and cell backgrounds.  */

    RetError(redraw_page_background(b, r));
  }

  #ifdef TRACE

    if (tl & (1u<<23))
    {
      BBox rectangle = r->redraw_area;

      redraw_set_colour(0xff884400);
      bbc_rectangle(rectangle.xmin,rectangle.ymin,rectangle.xmax-rectangle.xmin-1,rectangle.ymax-rectangle.ymin-1);

      redraw_set_colour(0xffaa6600);
      bbc_rectangle(rectangle.xmin+2,rectangle.ymin+2,rectangle.xmax-rectangle.xmin-5,rectangle.ymax-rectangle.ymin-5);

      redraw_set_colour(0xffcc8800);
      bbc_rectangle(rectangle.xmin+4,rectangle.ymin+4,rectangle.xmax-rectangle.xmin-9,rectangle.ymax-rectangle.ymin-9);
    }

  #endif

  /* Loop over every line in this cell. */

  for (l = 0; l < d->nlines; l++)
  {
    /* If there are line chunks for this line, and the bounding box y */
    /* coordinates lie within the redraw rectangle, process the line. */

    if (
         d->ldata[l].n                                                                &&
         os_origin_win_y + d->ldata[l].y                 < os_workarea.ymax + os_bgap &&
         os_origin_win_y + d->ldata[l].y + d->ldata[l].h > os_workarea.ymin - os_bgap
       )
    {
      HStream      * tp;                           /* Token pointer */
      fm_face        h;
      int            mp_line_scr_x, mp_line_scr_y; /* Line's bottom left corner, screen origin, millipoints */
      int            mp_line_win_x, mp_line_win_y; /* Line's bottom left corner, window origin, millipoints */
      int            mp_line_base;                 /* Line's baseline offset in millipoints                 */
      int            mp_line_base_scr_y;           /* Bottom edge plus baseline, screen origin, millipoints */
      unsigned int   i;                            /* Line iterator                                         */
      unsigned int   cn;                           /* Chunk Number                                          */
      char         * dp;                           /* Data Pointer                                          */

      if (printing == 1 && toplevel) /* 1 = may force page break, 2 = don't */
      {
        /* If printing = 1, it signals that we're not to split lines */
        /* over the bottom of the page. So if this line will drop    */
        /* off the bottom, we need to be careful. This gets a bit    */
        /* hacky now...                                              */
        /*                                                           */
        /* To signal to the printing loop that a line was about to   */
        /* be split but wasn't drawn, the top coord of the line is   */
        /* returned in the nextline integer. The printing routines   */
        /* use this to work out from where to start the next redraw. */
        /*                                                           */
        /* If you add code here, remember that nextline must be      */
        /* filled in eventually or the printing loop will exit,      */
        /* assuming there's no more page to draw.                    */

        HStream * split_token;
        int       split_y;
        int       store;

        split_token = print_find_splitting_point(d,
                                                 os_origin_win_y,
                                                 l,
                                                 page_bottom,
                                                 page_height,
                                                 &split_y,
                                                 &store);

        if (split_token != NULL)
        {
          if (nextline  != NULL) *nextline  = split_y;
          if (earlyexit != NULL) *earlyexit = 1;

          if (store == 1) RetError(redraw_read_section(b, split_token));

          return NULL;
        }
      }

      /* Put the base address of the line's chunks into cp, */
      /* and point to the first associated token in tp.     */

      cn = d->ldata[l].chunks;
      tp = d->cdata[cn].t;

      /* Get the x and y coordinates of the bottom left of the line in   */
      /* millipoints into mp_line_win_x and mp_line_win_y. This means we */
      /* have the line position in millipoints relative to the cell      */
      /* origin in workarea-style coordinates.                           */

      convert_pair_to_points(redraw_start_x(b, d, tp, l),
                             d->ldata[l].y,
                             &mp_line_win_x,
                             &mp_line_win_y);

      /* Offset the line x and y coordinates by the location of the cell */
      /* being redrawn, to get the line origin in window coordinates, in */
      /* milli-points.                                                   */

      mp_line_win_x += mp_origin_win_x;
      mp_line_win_y += mp_origin_win_y;

      /* Find the window origin (0,0) in screen coordinates, convert into  */
      /* points, and add the line X and Y coordinate calculated above to   */
      /* get the screen X and Y coordinates of its bottom left corner.     */

      convert_pair_to_points(coords_x_toscreen(0, r),
                             coords_y_toscreen(0, r),
                             &mp_line_scr_x,
                             &mp_line_scr_y);

      mp_line_scr_x += mp_line_win_x;
      mp_line_scr_y += mp_line_win_y;

      /* Set 'mp_line_base' to hold the baseline offset in millipoints */

      convert_to_points(d->ldata[l].b, &mp_line_base);

      /* The Y coordinate offset by the baseline is used a lot, so */
      /* calculate it up-front to avoid doing it many times below. */

      mp_line_base_scr_y = mp_line_scr_y + mp_line_base;

      /* Loop round for up to all the line chunks whilst staying */
      /* within the redraw rectangle horizontally.               */

      for (
            i = 0;

            i < d->ldata[l].n &&
            mp_line_scr_x < mp_gfxwin.xmax + mp_bgap;

            mp_line_scr_x += d->cdata[cn].w, i++, cn++
          )
      {
        /* If this chunk is to the left of the redraw area, move on */
        /* to the next one.                                         */

        if (mp_line_scr_x + d->cdata[cn].w <= mp_gfxwin.xmin - mp_bgap) continue;

        /* If we reach here, the chunk is visible. Get its token address. */

        tp = d->cdata[cn].t;

        /* If the token represents a link, inform others by callback; if  */
        /* it represents a named anchor, use another callback.            */
        /*                                                                */
        /* The 'printing' check is a way of determining whether or not    */
        /* the redraw is 'paginated', in accordance with RedrawCore.h's   */
        /* description of how the callbacks are used. Besides, at the     */
        /* moment, there are no callbacks for any redraw tables used out  */
        /* of print loops, so there's no point calling them.              */

        if (printing && (ISLINK(tp) || ((tp->style & A) && tp->name)))
        {
          BBox bounds;
          int  height;

          convert_to_points(d->ldata[l].h, &height);

          bounds.xmin = mp_line_scr_x;
          bounds.xmax = mp_line_scr_x + d->cdata[cn].w;
          bounds.ymin = mp_line_scr_y;
          bounds.ymax = mp_line_scr_y + height;

          scale_box_millipoints_to_user(b, &bounds, &bounds);

          /* A single token can include both a link and a name */

          if (ISLINK(tp))
          {
            RetError(redrawcore_link_cb(b,
                                        tp->anchor,
                                        &bounds));
          }

          if ((tp->style & A) && tp->name)
          {
            RetError(redrawcore_name_cb(b,
                                        tp->name,
                                        &bounds));
          }
        }

        /* If 'selected' is not NULL, and nocontent is specifying th at a */
        /* token shouldn't have its contents drawn, then a borders-only   */
        /* redraw is in progress. For removing a border, when 'selected'  */
        /* *is* NULL, want to not draw the contents of the given token    */
        /* but must redraw all others fully, else edge effects will occur */
        /* where tokens directly abut the given one (bits can get knocked */
        /* out as the border goes but the tokens it was plotted over are  */
        /* not redraw).                                                   */
        /*                                                                */
        /* However, for a borders-only redraw when something is being     */
        /* selected, don't want to draw the contents of *anything* as the */
        /* border wants to overplot it. To effect this, set the nocontent */
        /* token to always be the same as the current one.                */

        if (ancestor->selected && nocontent) nocontent = tp;

        /* Deal with tables with at least 1 cell (ISTABLE - Fetch.h - ensures */
        /* this condition).                                                   */

        if (ISTABLE(tp))
        {
          RetError(redraw_table(b,
                                (table_stream *) tp,
                                r,
                                mp_line_win_x, mp_line_win_y,
                                mp_line_scr_x, mp_line_scr_y,
                                d->ldata[l].h,
                                nextline,
                                noback,
                                nocontent));
        }

        /* Forms elements */

        else if (ISINPUT(tp) || ISTEXTAREA(tp) || ISSELECT(tp))
        {
          /* A text-based element - SELECTs, TEXTAREAs or certain */
          /* INPUT types.                                         */

          if (
               ISTEXTAREA(tp)                          ||
               ISSELECT(tp)                            ||
               HtmlINPUTtype(tp) == inputtype_TEXT     ||
               HtmlINPUTtype(tp) == inputtype_PASSWORD
             )
          {
            BBox    box;
            int     ox, oy;
            fm_face fh;

            convert_pair_to_os(mp_line_scr_x,
                               mp_line_base_scr_y,
                               &ox,
                               &oy);

            fh = fm_find_token_font(b, tp, 0);
            fm_font_box(fh, &box);

            /* Set up the bounding box for a text area, with a minimum of 2 rows */

            if (tp->tagno == TAG_TEXTAREA)
            {
              unsigned int r;
              int          lh, lb;

              form_get_linesize(&box, &lh, &lb);

              r = tp->rows;
              if (r < 2) r = 2;

              box.ymin -= lh * (r - 1); /* ymin is already below the first line, so want to drop it by (rows - 1) more */
            }

            /* Account for the borders */

            box.ymin = box.ymin + oy - 8;
            box.ymax = box.ymax + oy + 8;
            box.xmin = ox + 4;

            convert_to_os(mp_line_scr_x + d->cdata[cn].w, &box.xmax);

            /* Account for a border */

            box.xmax -= 4;

            if (nocontent != tp)
            {
              if (tp->tagno == TAG_SELECT) RetError(redraw_menu_field  (b, tp, &box));
              else                         RetError(redraw_input_field (b, tp, &box, redraw_token_colour(b, tp)));

              RetError(form_textarea_redraw(b,
                                            d->cdata[cn].t,
                                            &box,
                                            &r->redraw_area,
                                            fh,
                                            tp->tagno == TAG_TEXTAREA,
                                            tp->tagno == TAG_INPUT && HtmlINPUTtype(tp) == inputtype_PASSWORD,
                                            redraw_token_colour(b, tp),
                                            (tp->tagno == TAG_SELECT) ? Redraw_Colour_BackGrey : Redraw_Colour_White));
            }
          }
          else switch(HtmlINPUTtype(tp))
          {
            /* Graphics-based forms elements */

            case inputtype_CHECKBOX:
            {
              if (nocontent != tp) RetError(redraw_switch(b,
                                                          tp,
                                                          mp_line_scr_x,
                                                          mp_line_base_scr_y,
                                                          form_get_field(b, d->cdata[cn].t) -> checked ? "fopton" : "foptoff"));
            }
            break;

            case inputtype_RADIO:
            {
              if (nocontent != tp) RetError(redraw_switch(b,
                                                          tp,
                                                          mp_line_scr_x,
                                                          mp_line_base_scr_y,
                                                          form_get_field(b, d->cdata[cn].t) -> checked ? "fradioon" : "fradiooff"));
            }
            break;

            case inputtype_IMAGE:
            {
              RetError(redraw_image_and_border(b,
                                               tp,
                                               nocontent,
                                               r,
                                               mp_line_scr_x,
                                               mp_line_base_scr_y));
            }
            break;

            case inputtype_HIDDEN: break;

            case inputtype_SUBMIT: /* SUBMIT same as RESET: no break */
            case inputtype_BUTTON: /* Again, no break                */
            case inputtype_RESET:
            {
              BBox           box;
              int            fh, ox, oy;
              unsigned int   back_colour;
              const char   * p;

              p = form_button_text(tp);

              convert_pair_to_os(mp_line_scr_x,
                                 mp_line_base_scr_y,
                                 &ox,
                                 &oy);

              fh = fm_find_token_font(b, tp, 0);

              fm_font_box(fh,&box);

              box.ymin = box.ymin + oy - 8;
              box.ymax = box.ymax + oy + 8;
              box.xmin = ox + 4;

              convert_to_os(mp_line_scr_x + d->cdata[cn].w,&box.xmax);

              /* Account for a border */

              box.xmax -= 4;

              /* Draw the button's plinth */

              if (b->highlight == tp)
              {
                RetError(redraw_button(b, tp, &box, 1));
                back_colour = Redraw_Colour_MidGrey;
              }
              else
              {
                RetError(redraw_button(b, tp, &box, 0));
                back_colour = Redraw_Colour_BackGrey;
              }

              /* Plot the text, centred horizontally */

              if (p)
              {
                unsigned int length, end;
                int          width;

                length = strlen(p);
                end    = 0;

                while(end < length && p[end] != '\n') end++;

                RetError(fm_get_string_width(fh,
                                             p,
                                             0x1000000,
                                             end - d->cdata[cn].o,
                                             -1,
                                             NULL,
                                             &width));

                width = (d->cdata[cn].w - width) / 2 + 4;
                if (width < 0) width = 0;

                RetError(redrawcore_text(b, fh,
                                         scale_millipoints_to_user(b, mp_line_scr_x + width),
                                         scale_millipoints_to_user(b, mp_line_base_scr_y),
                                         p, end - d->cdata[cn].o,
                                         redraw_token_colour(b, tp),
                                         back_colour,
                                         1));
              }
            }
            break;
          }
        }

        /* Plot an image */

        else if (tp->style & IMG) /* IMG or INPUT TYPE="IMAGE" */
        {
          RetError(redraw_image_and_border(b,
                                           tp,
                                           nocontent,
                                           r,
                                           mp_line_scr_x,
                                           mp_line_base_scr_y));
        }

        /* Plot an OBJECT, EMBED or APPLET tag */

        else if (ISOBJECT(tp))
        {
          RetError(redraw_object_and_border(b,
                                            tp,
                                            nocontent,
                                            r,
                                            mp_line_scr_x,
                                            mp_line_base_scr_y));
        }

        /* Plot a horizontal rule */

        else if (tp->style & HR)
        {
          int  ox, oy = 0;
          int  w,  h;
          int  lmarg;
          int  dx = wimpt_dx() - 1;
          int  dy = wimpt_dy() - 1;
          BBox user_box;

          lmarg = redraw_start_x(b, d, tp, l);

          convert_to_os(mp_line_scr_y,  &oy);
          convert_to_os(d->cdata[cn].w, &w);

          /* Round width to evenn pixels and limit check it.   */
          /* Allow sizes greater than the available width, in  */
          /* which case align to the left and draw to whatever */
          /* width was requested.                              */

          if (w < 2) w = 2;
          w = w & ~dx;

          /* Deal with a size (height) specifier */

          if (HR_HAS_SIZE(tp))
          {
            /* Currently only recognise pixels */

            switch (HR_SIZE_UNITS(tp))
            {
              case UNITS_PIXELS: h = HR_SIZE(tp); break;
              default:           h = 2; break;
            }
          }
          else h = 2;

          /* Limit the height and convert to OS units */

          if (h < 1) h = 1;

          h = scale_web_to_user(b, h);
          h = scale_user_to_os(b, h);

          /* Sort out the horizontal and vertical plotting offsets; */
          /* centre vertically, and align horizontally as specified */
          /* in the token.                                          */

          oy += ((d->ldata[l].h - h) / 2) & ~dy - 4;
          oy += 6;

          ox = (coords_x_toscreen(lmarg + os_origin_win_x, r) & ~dx);

          /* Get the HR bounding box in user-points, with all rounding */
          /* and deductions done in OS units first.                    */

          scale_pair_os_to_user(b, ox,     oy,     &user_box.xmin, &user_box.ymin);
          scale_pair_os_to_user(b, ox + w, oy + h, &user_box.xmax, &user_box.ymax);

          /* Plot a black rule if NOSHADE is specified or the height */
          /* or width are less than 2 pixels, else plot a '3D' rule. */

          if (HR_NOSHADE(tp) || h < (dy + 1) * 2 || w < (dx + 1) * 2)
          {
            RetError(redrawcore_rectangle(b,
                                          &user_box,
                                          Redraw_Colour_Black,
                                          0));
          }
          else
          {
            RetError(redraw_plinth_border(b,
                                          &user_box,
                                          scale_os_to_user(b, 2), /* 2 OS unit thick border */
                                          Redraw_Colour_MidGrey,
                                          Redraw_Colour_AlmostWhite));
          }
        }

        /* Plot a bullet point */

        else if(ISBULLET(tp))
        {
          RetError(redraw_bullet(b,
                                 mp_line_scr_x,
                                 mp_line_base_scr_y,
                                 tp->indent));
        }

        /* Plot some text */

        else
        {
          dp = d->cdata[cn].t->text;

          if (dp)
          {
            BBox         size;
            unsigned int c;
            int          yofs, height;
            int          user_x, user_y;

            /* Find the font handle for the token, and its colour */

            h = fm_find_token_font  (b, tp, 0);
            c = redraw_token_colour (b, tp);

            /* Find the text height in OS units */

            fm_font_box(h, &size);
            height = size.ymax - size.ymin;

            /* Work out the y offset to plot at */

            if (ISSUP(tp))
            {
              /* Shift baseline up for superscript text. The following */
              /* will be for the SUP size text, remember...            */

              convert_to_points(height, &yofs);

              /* SUP height = normht * 3 / 5, so to get normal  */
              /* height from SUP do height * 5 / 3. Then want   */
              /* to get the height remaining and use this as an */
              /* addition for the y positioning, so need to add */
              /* (normht - hormht * 3 / 5) = normht * 2 / 5.    */
              /* This all simplifies out to height * 2 / 3, but */
              /* this looks too high in practice, so it's taken */
              /* down a bit from that!                          */

              yofs = mp_line_base_scr_y + (yofs / 2);
            }
            else if (ISSUB(tp))
            {
              /* Shift the baseline down a bit for subscript text */

              yofs = mp_line_scr_y + (mp_line_base * 4) / 5;
            }
            else yofs = mp_line_base_scr_y;

            /* Set the font colour and plot the text */

            scale_pair_millipoints_to_user(b, mp_line_scr_x, yofs, &user_x, &user_y);

            RetError(redrawcore_text(b,
                                     h,
                                     user_x, user_y,
                                     dp + d->cdata[cn].o,
                                     d->cdata[cn].l,
                                     c, redraw_background_colour(b, c),
                                     b->background_image >= 0 && b->show_background));

            /* Deal with underlining. The position should not be affected */
            /* by SUB or SUP text.                                        */

            if (
                 (
                   (
                     ISLINK(tp) &&
                     b->underline_links
                   )
                   || ISUNDERLINE(tp)
                 )
                 && !(tp->tagno == TAG_TABLE)
               )
            {
              BBox user_ends;

              /* Work out the coordinates  */

              scale_pair_millipoints_to_user(b,
                                             mp_line_scr_x,
                                             mp_line_base_scr_y,
                                             &user_ends.xmin,
                                             &user_ends.ymin);

              user_ends.ymin -= scale_os_to_user(b, 7); /* A 7 OS unit gap looks about right */

              /* Finish point includes the width */

              user_ends.xmax = user_ends.xmin + scale_millipoints_to_user(b, d->cdata[cn].w);
              user_ends.ymax = user_ends.ymin;

              /* Draw the line */

              RetError(redrawcore_line(b,
                                       &user_ends,
                                       redraw_token_colour(b, tp)));
            }

            /* Deal with STRIKE text. This needs to have the strikethrough */
            /* line through the text middle, as opposed to following the   */
            /* body text font baseline (so SUB and SUP *will* have an      */
            /* effect on the positioning).                                 */

            if (ISSTRIKE(tp) && !(tp->tagno == TAG_TABLE))
            {
              BBox user_ends;
              int  ox, oy;
              int  hs;

              convert_pair_to_os(mp_line_scr_x, yofs, &ox, &oy);
              hs = height / 4;
              oy += hs;

              scale_pair_os_to_user(b, ox, oy, &user_ends.xmin, &user_ends.ymin);
              user_ends.xmax = scale_millipoints_to_user(b, mp_line_scr_x + d->cdata[cn].w);
              user_ends.ymax = user_ends.ymin;

              /* Draw the line */

              RetError(redrawcore_line(b,
                                       &user_ends,
                                       redraw_token_colour(b, tp)));
            }
          }
        }

        // Plot the bounding box of any object; green to
        // mark an image, else red

        #ifdef TRACE

          if ((tl & (1u<<11)) || (tl & (1u<<19)))
          {
            int ox, oy, ow, oh;

            convert_pair_to_os(mp_line_scr_x,
                               mp_line_scr_y,
                               &ox,
                               &oy);

            convert_to_os(d->cdata[cn].w, &ow);

            oh = d->ldata[l].h;

            if (tl & (1u<<11))
            {
              _swix(Wimp_SetColour,
                    _IN(0),

                    (tp->style & IMG) ? 10 : 11);

              bbc_rectangle(ox, oy, ow - 1, oh - 1);
            }

            // Mark tokens with no lower bits set in the type word
            // (so not head, body, frameset etc.) and a NULL text
            // field, with a magenta dot in the bottom *right* of
            // the token BBox and a cyan dot in the top right of the
            // BBox respectively.

            if (tl & (1u<<19))
            {
              if (!(tp->type & 0xff))
              {
                redraw_set_colour(0xff00ff00);
                bbc_circlefill(ox + ow - 1, oy, 6);
                redraw_set_colour(0);
                bbc_circle(ox + ow - 1, oy, 6);
              }

              if (!tp->text)
              {
                redraw_set_colour(0xffff0000);
                bbc_circlefill(ox + ow - 1, oy + oh - 1, 6);
                redraw_set_colour(0);
                bbc_circle(ox + ow - 1, oy + oh - 1, 6);
              }
            }
          }
        #endif

      /* Closure of 'for' looping round chunks on a given line */
      /* that lies partially or entirely within the redraw     */
      /* area.                                                 */
      }

      /* For printing, tell the print routines where we were up to. */
      /* This would be quite straightforward, except we have to     */
      /* account for gaps between lines.                            */

      if (
           printing != 0 &&
           toplevel
         )
      {
        int bottom = os_origin_win_y + d->ldata[l].y;

        /* Correct for a possible gap */

        if (l + 1 < d->nlines)
        {
          bottom -= d->ldata[l].y -
                    (
                      d->ldata[l + 1].y +
                      d->ldata[l + 1].h
                    );
        }

        if (bottom < page_bottom && nextline != NULL)
        {
          *nextline = os_origin_win_y + page_bottom;
        }
      }

    /* Closure of long 'if' checking if the current line lies */
    /* partially or entirely within the redraw area. The code */
    /* above executes if it does.                             */
    }

  /* Closure of 'for' looping for all lines in the document. */
  }

  return NULL;
}
@


1.44
log
@  Huge pile of changes bringing relatively ancient sources up to date.
Detail:
  This check-in includes Phoenix version 2.11 (26-Apr-2005); only the
  debug and JavaScript builds of Phoenix have been tested and resources
  will definitely be out of date for other versions. The various "!..."
  scripts have been updated to require a minimum of 2MB with no maximum
  limit for building, as CC 5.60 is quite RAM hungry.
Admin:
  Phoenix 2.11 JS builds OK, works reasonably well. Many outstanding
  issues of course, as this is a very outdated browser now.

Version 2.09. Tagged as 'Browse-2_09'
@
text
@d62 1
d76 80
a155 1
static void redraw_read_section (browser_data * b, HStream * t2);
d157 6
a162 4
static void redraw_input_field  (browser_data * b, HStream * t, BBox * box, unsigned int colour, unsigned int menu);
static void redraw_button       (browser_data * b, HStream * t, BBox * box, unsigned int in);
static void redraw_switch       (browser_data * b, HStream * t, int x, int y, char * spr, WimpRedrawWindowBlock * r);
static void redraw_bullet       (int x, int y, unsigned int bullet, WimpRedrawWindowBlock * r);
d173 462
d636 108
a743 1
static _kernel_oserror * redraw_draw_r (unsigned int toplevel, int xorg, int yorg, browser_data * b, reformat_cell * d, WimpRedrawWindowBlock * r, unsigned int noback,  HStream * nocontent);
d773 2
a774 2
/* Read a section heading into inferred_section from a        */
/* heading line.                                              */
d782 3
a784 3
/* Returns:    Nothing, but fills in the inferred_section     */
/*             field of the given browser with the section    */
/*             text (memory and token validity permitting).   */
d787 5
a791 1
static void redraw_read_section(browser_data * b, HStream * t2)
d793 1
a793 1
  unsigned int h2 = redraw_header(t2->style);
d798 1
a798 1
  free(b->inferred_section), b->inferred_section = NULL;
d801 4
a804 4
          t2 != NULL                     &&
          reformat_istext(t2)            &&
          redraw_header(t2->style) == h2 &&
          t2->tagno != TAG_BR
d807 1
a807 1
    if (t2->text != NULL && *t2->text != '\0')
d811 1
a811 1
      ln += strlen(t2->text);
d816 2
a817 2
        if (b->inferred_section == NULL) strcpy(isec, t2->text);
        else                             strcat(isec, t2->text);
d821 1
d824 1
a824 1
    t2 = t2->next;
d826 4
d842 1
a842 1
unsigned int redraw_backcol(browser_data * b)
d868 5
a872 1
unsigned int redraw_background_colour(browser_data * b, unsigned int foregroundcolour)
d912 5
a916 1
unsigned int redraw_token_colour(browser_data * b, HStream * t)
d1021 5
a1025 1
int redraw_display_width(browser_data * b, reformat_cell * d)
d1054 5
a1058 1
int redraw_display_height(browser_data * b, reformat_cell * d)
d1094 5
a1098 1
int redraw_left_margin(browser_data * b, reformat_cell * d)
d1128 5
a1132 1
int redraw_right_margin(browser_data * b, reformat_cell * d)
d1168 6
a1173 1
int redraw_left_gap(browser_data * b, reformat_cell * d, HStream * t)
d1187 2
a1188 1
      int               h, width, bytes;
d1192 1
a1192 1
      h = fm_find_token_font(b, t, 0);
d1203 2
d1249 6
a1254 1
int redraw_right_gap(browser_data * b, reformat_cell * d, HStream * t)
d1293 7
a1299 1
int redraw_start_x(browser_data * b, reformat_cell * cell, HStream * t, unsigned int line)
d1374 7
a1380 1
int redraw_token_x(browser_data * b, reformat_cell * cell, HStream * t, unsigned int line)
d1439 7
a1445 1
int redraw_chunk_x(browser_data * b, reformat_cell * cell, unsigned int chunk, unsigned int line)
d1497 5
a1501 1
unsigned int redraw_selected(browser_data * b, HStream * token)
d1503 5
a1507 5
  HStream      * top;
  HStream      * end;
  browser_data * owner;
  browser_data * ancestor = utils_ancestor(b);
  int            found    = 0;
d1518 1
a1518 1
  if (ancestor->selected == token) return 1;
d1520 4
a1523 1
  tokenutils_anchor_range(owner, ancestor->selected, &top, &end);
d1529 1
a1529 1
      if (token == top) found = 1;
d1542 4
a1545 1
/* in a given colour.                                         */
d1547 2
a1548 1
/* Parameters: Pointer to the BBox;                           */
d1554 6
a1559 1
void redraw_border_around_box(BBox * rbox, unsigned int colour)
d1561 7
a1567 1
  BBox box;
d1569 1
a1569 1
  box = *rbox;
d1571 4
a1574 4
  box.xmin &= ~(wimpt_dx() - 1);
  box.ymin &= ~(wimpt_dy() - 1);
  box.xmax &= ~(wimpt_dx() - 1);
  box.ymax &= ~(wimpt_dy() - 1);
d1576 1
a1576 1
  redraw_set_colour(colour);
d1578 4
a1581 2
  bbc_rectangle(box.xmin - 4, box.ymin - 4, box.xmax - box.xmin + 7, box.ymax - box.ymin + 7);
  bbc_rectangle(box.xmin - 2, box.ymin - 2, box.xmax - box.xmin + 3, box.ymax - box.ymin + 3);
d1585 1
a1585 1
/* redraw_input_field()                                       */
d1587 2
a1588 1
/* For forms, redraws an input field element.                 */
d1591 1
a1591 1
/*             the element;                                   */
d1593 3
a1595 2
/*             Pointer to the token representing this         */
/*             element;                                       */
d1597 1
a1597 2
/*             BBox of the field, in window coords (and thus  */
/*             OS units);                                     */
d1599 1
a1599 2
/*             Border colour (as a palette entry, for more    */
/*             details see redraw_set_colour());              */
d1601 95
a1695 3
/*             1 if this is a display field, i.e. it has a    */
/*             menu icon, and the border colour is ignored;   */
/*             else 0.                                        */
d1698 5
a1702 1
static void redraw_input_field(browser_data * b, HStream * t, BBox * box, unsigned int colour, unsigned int menu)
d1704 6
a1709 1
  int w, h;
d1711 1
a1711 2
  w = box->xmax - box->xmin - 1;
  h = box->ymax - box->ymin - 1;
d1713 12
a1724 1
  if (menu)
d1726 90
a1815 2
    int  sw;
    BBox shorter;
d1817 11
a1827 1
    shorter = *box;
d1829 1
a1829 1
    if (read_sprite_size("fgright", &sw, NULL)) sw = 44;
d1831 1
a1831 1
    shorter.xmax -= (sw + 8);
d1833 1
a1833 1
    if (shorter.xmax < shorter.xmin) shorter.xmax = shorter.xmin + sw;
d1835 1
a1835 1
    /* Redraw the display region as a slabbed button */
d1837 9
a1845 5
    redraw_button(b, t, &shorter, 2);
  }
  else
  {
    /* Redraw the inside in white */
d1847 1
a1847 1
    redraw_set_colour(Redraw_Colour_White);
d1849 4
a1852 1
    bbc_rectanglefill(box->xmin, box->ymin, w, h);
d1854 4
a1857 1
    /* Redraw the border */
d1859 1
a1859 1
    redraw_set_colour(colour);
d1861 4
a1864 4
    bbc_rectanglefill(box->xmin,     box->ymin,     3,     h);
    bbc_rectanglefill(box->xmax - 4, box->ymin,     3,     h);
    bbc_rectanglefill(box->xmin + 4, box->ymin,     w - 8, 3);
    bbc_rectanglefill(box->xmin + 4, box->ymax - 4, w - 8, 3);
d1866 1
a1866 1
    /* Draw a wider border if selected */
d1868 2
a1869 2
    if (redraw_selected(b, t)) redraw_border_around_box(box, b->selected_colour);
  }
d1891 7
a1897 1
static void redraw_button(browser_data * b, HStream * t, BBox * box, unsigned int in)
d1899 3
a1901 1
  int w, h;
d1903 1
a1903 2
  w = box->xmax - box->xmin - 1;
  h = box->ymax - box->ymin - 1;
d1905 2
a1906 1
  redraw_set_colour((in == 1) ? Redraw_Colour_MidGrey : Redraw_Colour_BackGrey);
d1908 1
a1908 1
  bbc_rectanglefill(box->xmin, box->ymin, w, h);
d1910 1
a1910 1
  redraw_set_colour(in ? Redraw_Colour_PlinthGrey : Redraw_Colour_AlmostWhite);
d1912 4
a1915 4
  bbc_rectanglefill(box->xmin,     box->ymin,     1,     h);
  bbc_rectanglefill(box->xmin + 2, box->ymin + 2, 1,     h - 2);
  bbc_rectanglefill(box->xmin + 4, box->ymax - 2, w - 4, 1);
  bbc_rectanglefill(box->xmin + 4, box->ymax - 4, w - 6, 1);
d1917 1
a1917 1
  redraw_set_colour(in ? Redraw_Colour_AlmostWhite : Redraw_Colour_PlinthGrey);
d1919 5
a1923 4
  bbc_rectanglefill(box->xmin + 2, box->ymin,     w - 2, 1);
  bbc_rectanglefill(box->xmin + 4, box->ymin + 2, w - 4, 1);
  bbc_rectanglefill(box->xmax - 4, box->ymin + 4, 1,     h - 8);
  bbc_rectanglefill(box->xmax - 2, box->ymin + 4, 1,     h - 6);
d1925 4
a1928 1
  if (redraw_selected(b, t)) redraw_border_around_box(box, b->selected_colour);
d1946 1
a1946 3
/*             right hand edge;                               */
/*                                                            */
/*             Pointer to sprite name to use;                 */
d1948 1
a1948 3
/*             A WimpRedrawWindowBlock pointer, if in a       */
/*             redraw loop (can be NULL if not in a redraw    */
/*             loop).                                         */
d1951 8
a1958 1
static void redraw_switch(browser_data * b, HStream * t, int x, int y, char * spr, WimpRedrawWindowBlock * r)
d1960 7
a1966 3
  int               ox, oy, w, h;
  WimpPlotIconBlock block;
  BBox              icon;
d1968 1
a1968 1
  convert_pair_to_os(x, y, &ox, &oy);
d1972 2
a1973 1
  if (read_sprite_size(spr, &w, &h)) w = h = 44;
d1975 7
a1981 19
  icon.xmin = ox;
  icon.ymin = oy;
  icon.xmax = icon.xmin + w;
  icon.ymax = icon.ymin + h;

  if (r) coords_box_toworkarea(&icon, r);

  block.bbox                       = icon;
  block.flags                      = 0x1700311A;
  block.data.is.sprite             = spr;
  block.data.is.sprite_area        = (void *) sprite_block;
  block.data.is.sprite_name_length = strlen(spr);

  _swix(Wimp_PlotIcon,
        _IN(1) | _INR(4,5),

        &block,
        0,
        0);
d1985 14
a1998 2
    if (r) coords_box_toscreen(&icon, r);
    redraw_border_around_box(&icon, b->selected_colour);
d2000 2
d2009 4
a2012 1
/* Parameters: x coordinate (points, in screen coords) of     */
d2016 197
a2212 1
/*             right hand edge;                               */
d2214 15
a2228 1
/*             The bullet number;                             */
d2230 5
a2234 3
/*             A WimpRedrawWindowBlock pointer, if in a       */
/*             redraw loop (can be NULL if not in a redraw    */
/*             loop).                                         */
d2237 9
a2245 1
static void redraw_bullet(int x, int y, unsigned int bullet, WimpRedrawWindowBlock * r)
d2247 56
a2302 4
  char              spr[32];
  int               w, h;
  BBox              icon;
  WimpPlotIconBlock block;
d2304 2
a2305 1
  sprintf(spr, "b%d", (bullet + bullets - 1) % bullets);
d2307 5
a2311 1
  if (read_sprite_size(spr, &w, &h)) w = h = 32;
d2313 1
a2313 4
  icon.xmin = x;
  icon.ymin = y;
  icon.xmax = icon.xmin + w;
  icon.ymax = icon.ymin + h;
d2315 4
a2318 1
  if (r) coords_box_toworkarea(&icon, r);
d2320 1
a2320 5
  block.bbox                       = icon;
  block.flags                      = 0x1700311A; /* 11a */
  block.data.is.sprite             = spr;
  block.data.is.sprite_area        = (void *) sprite_block;
  block.data.is.sprite_name_length = strlen(spr);
d2322 6
a2327 2
  _swix(Wimp_PlotIcon,
        _IN(1) | _INR(4,5),
d2329 1
a2329 3
        &block,
        0,
        0);
d2342 4
a2345 2
/*             A WimpRedrawWindowBlock pointer, with window   */
/*             area and redraw rectangle details filled in;   */
d2359 8
a2366 1
void redraw_draw_placeholder(browser_data * b, WimpRedrawWindowBlock * r, BBox * holder, HStream * token, const char * text)
d2368 4
a2371 2
  BBox ph     = *holder; // In case we want to adjust it later, e.g. for H/VSPACE
  int  adjust = 0;
d2375 11
a2385 1
  if (!ph.xmax || !ph.ymax) return;
d2389 1
a2389 1
  if (ph.xmax > 8 && ph.ymax > 30)
d2391 22
a2412 29
    /* xmin, ymin hold the bottom left hand corner coordinates, whilst */
    /* xmax, ymax hold the width and height. The adjustments are to    */
    /* account for the way the bbc_rectanglefill function works; e.g., */
    /* to get a width of 4 OS units, ask for 3 (as it adds this to the */
    /* x coordinate and treats it as an inclusive x coordinate max).   */
    /* There are corrections to plot 2 OS units inside of the real     */
    /* bounding box (looks better when images touch each other) and to */
    /* get the darker sides of the 'slabbed in' box overlapping the    */
    /* lighter sides by the right amount.                              */

    redraw_set_colour(Redraw_Colour_AlmostWhite);
    bbc_rectanglefill(ph.xmin + 2,
                      ph.ymin + 2,
                      ph.xmax - 5,
                      3);
    bbc_rectanglefill(ph.xmax + ph.xmin - 6,
                      ph.ymin + 2,
                      3,
                      ph.ymax - 5);

    redraw_set_colour(Redraw_Colour_MidGrey);
    bbc_rectanglefill(ph.xmin + 2,
                      ph.ymax + ph.ymin - 6,
                      ph.xmax - 7,
                      3);
    bbc_rectanglefill(ph.xmin + 2,
                      ph.ymin + 4,
                      3,
                      ph.ymax - 7);
d2419 2
a2420 6
    /* 'Adjust' is used to tweak the graphics rectangle used for plotting */
    /* the text - because we're using a 1 pixel wide black frame rather   */
    /* than 2 pixel wide 3D border, we can increase the size of this by   */
    /* 2 OS units in all directions.                                      */

    adjust = 2;
d2422 9
a2430 5
    if (ph.xmax < 2) ph.xmax = 2;
    if (ph.ymax < 2) ph.ymax = 2;

    redraw_set_colour(0);
    bbc_rectangle(ph.xmin,ph.ymin,ph.xmax - 1,ph.ymax - 1);
d2439 4
a2442 4
    int            h, xpos, vcent, stringwidth;
    unsigned int   stringheight, size;
    BBox           fbox;
    BBox         * ibox = NULL;
d2449 6
a2454 7

    h = fm_find_font(b,
                     "sans",
                     size,
                     size,
                     0,
                     0);
d2466 1
a2466 1
    convert_to_os(stringwidth, &stringwidth);
d2472 1
d2482 10
a2491 7
    vcent = (ph.ymax - stringheight) / 2 - fbox.ymin;
    if (vcent <= 0) vcent = 10;
    vcent += ph.ymin;

    xpos = (ph.xmax - stringwidth) / 2;
    if (xpos <= 0) xpos = 10;
    xpos += ph.xmin;
d2499 6
a2504 4
    fbox.xmin = ph.xmin + 8           - adjust;
    fbox.xmax = ph.xmin + ph.xmax - 9 + adjust;
    fbox.ymin = ph.ymin + 8           - adjust;
    fbox.ymax = ph.ymin + ph.ymax - 9 + adjust;
d2514 5
d2523 1
a2523 3
      ibox = set_graphics_intersection(&fbox, &r->redraw_area);

      if (ibox)
d2525 1
a2525 1
        unsigned int colour;
d2527 1
a2527 1
        colour = redraw_token_colour(b, token);
d2529 7
a2535 9
        fm_set_font_colour(h,
                           colour,
                           redraw_background_colour(b, colour));
        fm_puts(h,
                xpos,
                vcent,
                text,
                1,
                b->background_image >= 0 && b->show_background);
d2541 14
a2554 3
          redraw_set_colour(colour);
          bbc_move(xpos, vcent - 7);
          bbc_draw(xpos + stringwidth, vcent - 7);
d2557 1
a2557 3
        /* Put the old graphics window back again. */

        restore_graphics_intersection(&r->redraw_area);
d2561 2
d2566 3
a2568 1
/* redraw_draw()                                              */
d2570 2
a2571 1
/* The main browser redraw engine.                            */
d2573 2
a2574 2
/* Parameters: A pointer to a browser_data structure relevant */
/*             to the redraw;                                 */
d2577 1
a2577 18
/*             area and redraw rectangle details filled in;   */
/*                                                            */
/*             1 to plot no backgrounds at all, else they     */
/*             will be shown;                                 */
/*                                                            */
/*             0 for normal redraw, else pointer to a token   */
/*             where no content is to be drawn - only the     */
/*             elements that are needed to indicate selection */
/*             should be shown. This is used mostly for       */
/*             things like removing borders around images; if */
/*             bits of the image have to be redrawn this can  */
/*             make the removal slow. Only one token is       */
/*             allowed as any adjacent images must be redrawn */
/*             if the border was plotted over them, or redraw */
/*             anomalies will be seen as 'holes' are left     */
/*             behind. There is some intelligence to give     */
/*             different behaviour if selecting or            */
/*             deselecting things.                            */
d2580 6
a2585 1
_kernel_oserror * redraw_draw(browser_data * b, WimpRedrawWindowBlock * r, unsigned int noback, HStream * nocontent)
d2587 4
a2590 1
  #ifdef UNIFONT
d2592 1
a2592 2
    /* Somewhat horrible code for the system font Unicode stuff. */
    /* Should be able to lose this eventually.                   */
d2594 5
a2598 1
    _kernel_oserror * e;
d2600 1
a2600 2
    e = unifont_start_redraw();
    if (e) return e;
d2602 5
a2606 1
    use_noback = noback;
d2608 1
a2608 1
    e = redraw_draw_r(1, 0, 0, b, b->cell, r, noback, nocontent);
d2610 6
a2615 5
    if (e)
    {
      unifont_end_redraw();
      return e;
    }
d2617 1
a2617 1
    return unifont_end_redraw();
d2619 26
a2644 1
  #else
d2646 1
a2646 1
    use_noback = noback;
d2648 9
a2656 1
    return redraw_draw_r(1, 0, 0, b, b->cell, r, noback, nocontent);
d2658 1
a2658 1
  #endif
d2662 8
a2669 1
/* redraw_draw_r()                                            */
d2671 2
a2672 3
/* MAINTENANCE WARNING - ANY ALTERATIONS HERE WILL NEED       */
/* ECHOING IN PRINT_FAKE_REDRAW IF IN AN ANALOGOUS CODE       */
/* SECTION.                                                   */
d2674 2
a2675 1
/* Recursive back-end to redraw_draw.                         */
d2677 2
a2678 2
/* Parameters: 1 for a top level call, else 0 if being called */
/*             recursively;                                   */
d2680 2
a2681 1
/*             X origin for plotting (window coords);         */
d2683 2
a2684 1
/*             Y origin for plotting (window coords);         */
d2686 2
a2687 2
/*             A pointer to a browser_data structure relevant */
/*             to the redraw;                                 */
d2689 2
a2690 2
/*             Pointer to a reformat_cell struct holding the  */
/*             lines and chunks to redraw;                    */
d2692 6
a2697 2
/*             A WimpRedrawWindowBlock pointer, with window   */
/*             area and redraw rectangle details filled in;   */
a2714 3
/*                                                            */
/* Assumes:    Pointers to items may NOT be NULL unless       */
/*             explicitly stated above.                       */
d2717 14
a2730 1
_kernel_oserror * redraw_draw_r(unsigned int toplevel, int xorg, int yorg, browser_data * b, reformat_cell * d, WimpRedrawWindowBlock * r, unsigned int noback, HStream * nocontent)
d2732 4
a2735 7
  _kernel_oserror * e;
  browser_data    * ancestor = utils_ancestor(b);
  unsigned int      l        = 0;
  int               more;
  int               page_bottom, page_height;
  int               osxorg, osyorg;
  BBox              wbox, fbox, sbox;
d2737 3
a2739 1
  dprintf(("Redr", "\nredraw_draw_r: Called\n"));
d2741 3
a2743 1
   /* Place the x and y origin in OS units into osxorg and osyorg */
d2745 2
a2746 1
  convert_pair_to_os(xorg, yorg, &osxorg, &osyorg);
d2748 5
a2752 1
  /* Start redraw */
d2754 4
a2757 3
  do
  {
    /* There is an HTML stream, so there is something to redraw. */
d2759 1
a2759 1
    sbox = r->redraw_area; /* Set sbox to hold the redraw rectangle details */
d2761 1
a2761 12
    /* These corrections are to ensure everything is fully redrawn.   */
    /* In particular, Font_StringWidth returns widths based on the    */
    /* distances between adjacent characters. In kerned or italicised */
    /* fonts, one character will typically have a leftmost x coord    */
    /* less than the rightmost point of the previous character. The   */
    /* reformatter uses StringWidth boxes to maintain correct char    */
    /* spacing, but then the redraw routines can go wrong, as part of */
    /* the (say) rightmost letter may fall outside of the StringWidth */
    /* box. Rather than keep two width indications, it's easier just  */
    /* to add a general correction factor to ensure that all line     */
    /* chunks are redrawn within a certain 'tolerance' / distance of  */
    /* the actual redraw rectangle.                                   */
d2763 1
a2763 1
    sbox.xmin -= 12, sbox.xmax += 12;
d2765 2
a2766 1
    /* ...but don't overestimate vertically if printing */
d2768 1
a2768 1
    if (printing == 0) sbox.ymin -= 2, sbox.ymax += 2;
d2770 1
a2770 1
    /* Convert the screen coord redraw rectangle into millipoints */
d2772 2
a2773 1
    convert_box_to_points(&sbox, &fbox);
d2775 2
a2776 2
    /* Convert the screen coord redraw region into work */
    /* area coords, putting the result in wbox.         */
d2778 2
a2779 2
    wbox = sbox;
    coords_box_toworkarea(&wbox, r);
d2781 3
a2783 14
    /* Get the page bottom in work area coordinates, and the page height. */
    /* This is really a printing only concept, where the visible_area     */
    /* BBox will in fact hold the entire page bounding box. The variables */
    /* aren't used for anything else (at present, hence no 'if' wrapper). */

    page_bottom = coords_y_toworkarea(r->visible_area.ymin, r);
    page_height = r->visible_area.ymax - r->visible_area.ymin;

    /* Now the main redraw section. */

    if (b->nchildren)
    {
      /* If this browser has children, it has no directly redrawable content;  */
      /* however, the frames it contains may need borders drawing around them. */
d2785 1
a2785 5
      dprintf(("Redr", "redraw_draw_r: Have children\n"));

      frames_redraw_borders(b, r);
    }
    else
d2787 1
a2787 6
      /* If the browser doesn't have child frames, want to draw */
      /* the document it holds instead.                         */

      dprintf(("Redr", "redraw_draw_r: Have no children\n"));

      if (b->stream)
d2789 2
a2790 5
        dprintf(("Redr", "redraw_draw_r: Have a document\n"));

        /* If printing, handle display style override for backgrounds */

        if (printing)
d2792 1
a2792 1
          /* Force background off for some cases... */
d2794 1
a2794 2
          if      (printstyle_show_none()) noback = 1;
          else if (printstyle_show_in_tables_only)
d2796 1
a2796 14
            if (toplevel) noback = 1;
            else
            {
              /* Need to work out if this table cell has a background colour */

              if (d->cdata && d->cdata[0].t->parent)
              {
                if (TD_HAS_BGCOL(d->cdata[0].t->parent)) noback = 0;
                else                                     noback = 1;
              }
            }
          }

          /* ...and on for others */
d2798 1
a2798 2
          if (printstyle_show_all() && toplevel) noback = 0;
        }
d2800 1
a2800 1
        use_noback = noback;
d2802 2
a2803 1
        /* If we've *not* been told *not* to plot any backgrounds... */
d2805 2
a2806 3
        if (!noback)
        {
          unsigned int htop;
d2808 1
a2808 2
          if (!controls.swap_bars) htop = toolbars_button_height(b) + toolbars_url_height(b);
          else                     htop = toolbars_status_height(b);
d2810 4
a2813 1
          if (htop) htop += wimpt_dy();
d2815 2
a2816 4
          /* If background images are not to be shown, or there's no image */
          /* to tile on the background, set the background to a uniform    */
          /* colour. The 'if' statement implicitly calls the background    */
          /* image tiler.                                                  */
d2818 1
a2818 13
          if (
               !b->show_background ||
               (
                 !image_tile_window(b,
                                    r,
                                    0,
                                    -htop)
               )
             )
          {
            redraw_set_colour(redraw_backcol(b));
            bbc_rectanglefill(sbox.xmin, sbox.ymin, sbox.xmax - sbox.xmin + 4, sbox.ymax - sbox.ymin + 4);
          }
d2820 1
d2822 2
a2823 1
        #ifdef TRACE
d2825 2
a2826 3
          if (tl & (1u<<23))
          {
            BBox rectangle = r->redraw_area;
d2828 2
a2829 2
            redraw_set_colour(0xff884400);
            bbc_rectangle(rectangle.xmin,rectangle.ymin,rectangle.xmax-rectangle.xmin-1,rectangle.ymax-rectangle.ymin-1);
d2831 1
a2831 2
            redraw_set_colour(0xffaa6600);
            bbc_rectangle(rectangle.xmin+2,rectangle.ymin+2,rectangle.xmax-rectangle.xmin-5,rectangle.ymax-rectangle.ymin-5);
d2833 2
a2834 3
            redraw_set_colour(0xffcc8800);
            bbc_rectangle(rectangle.xmin+4,rectangle.ymin+4,rectangle.xmax-rectangle.xmin-9,rectangle.ymax-rectangle.ymin-9);
          }
d2836 7
a2842 1
        #endif
d2844 2
a2845 1
        /* Loop over every line in this cell. */
d2847 4
a2850 4
        for (l = 0; l < d->nlines; l++)
        {
          /* If there are line chunks for this line, and the bounding box y */
          /* coordinates lie within the redraw rectangle, process the line. */
d2852 1
a2852 14
          if (
               d->ldata[l].n                                      &&
               osyorg + d->ldata[l].y < wbox.ymax                 &&
               osyorg + d->ldata[l].y + d->ldata[l].h > wbox.ymin
             )
          {
            HStream      * tp;            /* Token Pointer */
            fm_face        h;
            int            x, y;          /* Plotting origin */
            int            keepx, keepy;  /* Line's bottom left corner */
            int            base;
            unsigned int   i;
            unsigned int   cn;            /* Chunk Number */
            char         * dp;            /* Data Pointer */
d2854 3
a2856 28
            if (printing == 1 && toplevel) /* 1 = may force page break, 2 = don't */
            {
              /* If printing = 1, it signals that we're not to split lines */
              /* over the bottom of the page. So if this line will drop    */
              /* off the bottom, we need to be careful. This gets a bit    */
              /* hacky now...                                              */
              /*                                                           */
              /* To signal to the printing loop that a line was about to   */
              /* be split but wasn't drawn, the top coord of the line is   */
              /* returned in the xscroll field of the redraw block passed  */
              /* to the function. The printing routines use this to work   */
              /* out where to start the next redraw from.                  */
              /*                                                           */
              /* If you add code here, remember that xscroll must be       */
              /* filled in eventually or the printing loop will exit,      */
              /* assuming there's no more page to draw.                    */

              HStream * split_token;
              int       split_y;
              int       store;

              split_token = print_find_splitting_point(d,
                                                       osyorg,
                                                       l,
                                                       page_bottom,
                                                       page_height,
                                                       &split_y,
                                                       &store);
d2858 2
a2859 3
              if (split_token != NULL)
              {
                r->xscroll = split_y;
d2861 1
a2861 1
                if (store == 1) redraw_read_section(b, split_token);
d2863 1
a2863 3
                return NULL;
              }
            }
d2865 1
a2865 2
            /* Put the base address of the line's chunks into cp, */
            /* and point to its associated token in tp.           */
d2867 7
a2873 2
            cn = d->ldata[l].chunks;
            tp = d->cdata[cn].t;
d2875 1
a2875 3
            /* Get the x and y coordinates of the bottom left of the line in */
            /* millipoints into keepx and keepy, and the x and y coordinates */
            /* of the window origin in millipoints into x and y.             */
d2877 2
a2878 2
            keepy = d->ldata[l].y;
            keepx = redraw_start_x(b, d, tp, l);
d2880 3
a2882 1
            convert_pair_to_points(keepx, keepy, &keepx, &keepy);
d2884 8
a2891 2
            x = coords_x_toscreen(0, r);
            y = coords_y_toscreen(0, r);
d2893 3
a2895 1
            convert_pair_to_points(x, y, &x, &y);
d2897 1
a2897 3
            /* Offset the line x and y coordinates by the origin passed into the */
            /* function, and thus get the actual screen coordinates, in milli-   */
            /* points, into x and y.                                             */
d2899 8
a2906 2
            keepx += xorg;
            keepy += yorg;
d2908 3
a2910 2
            x += keepx;
            y += keepy;
d2912 1
a2912 1
            /* Set 'base' to hold the baseline offset in millipoints */
d2914 2
a2915 1
            convert_to_points(d->ldata[l].b, &base);
d2917 2
a2918 2
            /* Loop round for up to all the line chunks whilst staying */
            /* within the redraw rectangle horizontally.               */
d2920 1
a2920 9
            for (
                  i = 0;
                  i < d->ldata[l].n && x < fbox.xmax;
                  x += d->cdata[cn].w, i++, cn++
                )
            {
              if (x + d->cdata[cn].w > fbox.xmin)
              {
                /* Get the token address for this line chunk */
d2922 1
a2922 1
                tp = d->cdata[cn].t;
d2924 2
a2925 13
                /* If 'selected' is not NULL, and nocontent is specifying th at a */
                /* token shouldn't have its contents drawn, then a borders-only   */
                /* redraw is in progress. For removing a border, when 'selected'  */
                /* *is* NULL, want to not draw the contents of the given token    */
                /* but must redraw all others fully, else edge effects will occur */
                /* where tokens directly abut the given one (bits can get knocked */
                /* out as the border goes but the tokens it was plotted over are  */
                /* not redraw).                                                   */
                /*                                                                */
                /* However, for a borders-only redraw when something is being     */
                /* selected, don't want to draw the contents of *anything* as the */
                /* border wants to overplot it. To effect this, set the nocontent */
                /* token to always be the same as the current one.                */
d2927 3
a2929 1
                if (ancestor->selected && nocontent) nocontent = tp;
d2931 33
a2963 1
                /* Deal with table tags */
d2965 1
a2965 3
                if (tp->tagno == TAG_TABLE)
                {
                  int oh;
d2967 2
a2968 1
                  convert_to_points(d->ldata[l].h, &oh);
d2970 6
a2975 3
                  /* Use of recursion for redraw... So need to keep this code block */
                  /* as a code block, don't try to collapse it down a level and     */
                  /* merge in 'oh' above, etc.                                      */
d2977 1
a2977 2
                  {
                    /* In this case there are table streams hung from d->cdata */
d2979 1
a2979 5
                    table_stream   * table      = (table_stream *) tp;
                    table_row      * row        = NULL;
                    table_headdata * head       = NULL;
                    reformat_cell  * cellarray  = table->cells;
                    reformat_cell  * cell;
d2981 2
a2982 4
                    unsigned int     oldback    = 0;
                    unsigned int     oldaa      = 0;
                    int              oldbgimage = -1;
                    unsigned int     t_noback;
d2984 4
a2987 3
                    BBox             rbox;
                    BBox           * ibox;
                    BBox             tbox;
d2989 1
a2989 3
                    unsigned int     cellindex;
                    unsigned int     cellcount;
                    unsigned int     cellmax = table->ColSpan * table->RowSpan;
d2991 6
a2996 1
                    unsigned int     swap;
d2998 1
a2998 2
                    tbox.xmin = tbox.ymin = 0x1000000;
                    tbox.xmax = tbox.ymax = 0;
d3000 3
a3002 2
                    /* Find out the overall bounding box of the table, and put this in */
                    /* 'tbox'.                                                         */
d3004 23
a3026 1
                    cellcount = 0;
d3028 7
a3034 4
                    if (cellarray)
                    {
                      cellcount = 0;
                      row       = table->List;
d3036 3
a3038 3
                      while (row && cellcount < cellmax)
                      {
                        head = row->List;
d3040 3
a3042 8
                        while (head && cellcount < cellmax)
                        {
                          switch (head->Tag)
                          {
                            case TagTableData:
                            case TagTableHead:
                            {
                              cellindex = head->RowOffs * table->ColSpan + head->ColOffs;
d3044 7
a3050 3
                              if (cellindex < cellmax)
                              {
                                BBox cbox;
d3052 2
a3053 1
                                cell = &cellarray[cellindex];
d3055 3
a3057 1
                                /* Set the graphics rectangle up for the redraw */
d3059 2
a3060 4
                                cbox.xmin = x + cell->x;
                                cbox.ymin = y + cell->y + oh - cell->cellheight;
                                cbox.xmax = cbox.xmin + cell->cellwidth;
                                cbox.ymax = cbox.ymin + cell->cellheight;
d3062 1
a3062 1
                                convert_box_to_os(&cbox, &cbox);
d3064 1
a3064 1
                                /* Update the table bounding box as required */
d3066 2
a3067 4
                                if (cbox.xmin < tbox.xmin) tbox.xmin = cbox.xmin;
                                if (cbox.ymin < tbox.ymin) tbox.ymin = cbox.ymin;
                                if (cbox.xmax > tbox.xmax) tbox.xmax = cbox.xmax;
                                if (cbox.ymax > tbox.ymax) tbox.ymax = cbox.ymax;
d3069 1
a3069 2
                              /* Closure of 'if (cellindex < cellmax)' */
                              }
d3071 2
a3072 3
                            /* Closure of specific 'case' item */
                            }
                            break;
d3074 1
a3074 2
                          /* Closure of 'switch (head->Tag)' */
                          }
d3076 3
a3078 1
                          cellcount ++;
d3080 1
a3080 1
                          head = head->Next;
d3082 4
a3085 2
                        /* Closure of 'while (head && ...)' */
                        }
d3087 2
a3088 1
                        row = row->Next;
d3090 16
a3105 2
                      /* Closure of 'while (row && ...)' */
                      }
d3107 2
a3108 2
                      /* tbox doesn't take account of cell spacing yet - correct */
                      /* for this now.                                           */
d3110 35
a3144 4
                      tbox.xmin -= table->cellspacing * 2;
                      tbox.ymin -= table->cellspacing * 2;
                      tbox.xmax += table->cellspacing * 2;
                      tbox.ymax += table->cellspacing * 2;
d3146 10
a3155 1
                      /* If the table has a background colour, draw this */
d3157 10
a3166 4
                      if (TABLE_HAS_BGCOL(table) && !noback && b->use_source_cols)
                      {
                        int tx, ty;
                        int tw, th;
d3168 51
a3218 3
                        /* Work out the x and y coordinates of the lower left hand pixel */
                        /* of the table border, and the width and height of the table    */
                        /* including the border.                                         */
d3220 14
a3233 4
                        tx = tbox.xmin;
                        ty = tbox.ymin;
                        tw = tbox.xmax - tbox.xmin;
                        th = tbox.ymax - tbox.ymin;
d3235 1
a3235 1
                        /* Draw the background */
d3237 1
a3237 1
                        redraw_set_colour(TABLE_BGCOL(table));
d3239 6
a3244 2
                        bbc_rectanglefill(tx, ty, tw - 1, th - 1);
                      }
d3246 1
a3246 1
                      /* Now redraw the table cells */
d3248 6
a3253 2
                      cellcount = 0;
                      row       = table->List;
d3255 1
a3255 3
                      while (row && cellcount < cellmax)
                      {
                        head = row->List;
d3257 3
a3259 8
                        while (head && cellcount < cellmax)
                        {
                          switch (head->Tag)
                          {
                            case TagTableData:
                            case TagTableHead:
                            {
                              cellindex = head->RowOffs * table->ColSpan + head->ColOffs;
d3261 1
a3261 3
                              if (cellindex < cellmax)
                              {
                                cell = &cellarray[cellindex];
d3263 14
a3276 1
                                dprintf(("Tabl", "redraw_draw call: %d -%d\n", keepx + cell->x, -(keepy + cell->y)));
d3278 5
a3282 8
                                if (TD_HAS_BGCOL(head))
                                {
                                  oldback              = b->background_colour;
                                  oldaa                = b->antialias_colour;
                                  oldbgimage           = b->background_image;
                                  b->background_colour = TD_BGCOL(head);
                                  b->antialias_colour  = b->background_colour;
                                  b->background_image  = -1; /* For now, no background images in table cells. */
d3284 3
a3286 3
                                  t_noback = 0;
                                }
                                else t_noback = 1;
d3288 7
a3294 1
                                /* Set the graphics rectangle up for the redraw */
d3296 5
a3300 4
                                rbox.xmin = x + cell->x;
                                rbox.ymin = y + cell->y + oh - cell->cellheight;
                                rbox.xmax = rbox.xmin + cell->cellwidth;
                                rbox.ymax = rbox.ymin + cell->cellheight;
d3302 4
a3305 1
                                convert_box_to_os(&rbox, &rbox);
d3307 1
a3307 1
                                /* (rbox's max coords should be inclusive, not exclusive) */
d3309 2
a3310 2
                                rbox.xmax--;
                                rbox.ymax--;
d3312 59
a3370 1
                                /* If necessary, swap min and max coords */
d3372 16
a3387 2
                                if (rbox.xmax < rbox.xmin) swap = rbox.xmax, rbox.xmax = rbox.xmin, rbox.xmin = swap;
                                if (rbox.ymax < rbox.ymin) swap = rbox.ymax, rbox.ymax = rbox.ymin, rbox.ymin = swap;
d3389 1
a3389 1
                                /* See if the cell redraw box intersects the overall redraw rectangle */
d3391 4
a3394 2
                                if (rbox.xmin == rbox.xmax || rbox.ymin == rbox.ymax) ibox = NULL;
                                else                                                  ibox = set_graphics_intersection(&rbox, &r->redraw_area);
d3396 1
a3396 3
                                if (ibox)
                                {
                                  BBox oldrect;
d3398 3
a3400 7
                                  /* Other routines that set the graphics window do it the same way as */
                                  /* here - they assume the redraw rectangle = the graphics window, as */
                                  /* during printing it's not possible to read the VDU variables to    */
                                  /* obtain the actual window. To ensure that this holds true, before  */
                                  /* recursively calling the redraw functions, the redraw rectangle    */
                                  /* must be set to match the graphics rectangle (and then restored    */
                                  /* afterwards).                                                      */
d3402 2
a3403 2
                                  oldrect        = r->redraw_area;
                                  r->redraw_area = *ibox;
d3405 2
a3406 2
                                  /* All coords in ibox are inclusive; the max coords in a redraw rectangle */
                                  /* need to be exclusive.                                                  */
d3408 1
a3408 2
                                  r->redraw_area.xmax ++;
                                  r->redraw_area.ymax ++;
d3410 2
a3411 1
                                  /* Recursive call to redraw the cell contents */
d3413 1
a3413 8
                                  redraw_draw_r(0,
                                                keepx + cell->x,
                                                keepy + cell->y + oh,
                                                b,
                                                cell,
                                                r,
                                                t_noback,
                                                nocontent);
d3415 2
a3416 4
                                  /* Restore print loop noback flag. Since noback is a parameter it stacks and */
                                  /* unstacks as we call the redraw function recursively, but the static       */
                                  /* use_noback doesn't. So we have to ensure it is kept in step with noback   */
                                  /* after any recursive redraw calls.                                         */
d3418 11
a3428 1
                                  use_noback = noback;
d3430 10
a3439 1
                                  /* Restore the WimpRedrawWindowBlock redraw rectangle */
d3441 4
a3444 1
                                  r->redraw_area = oldrect;
d3446 2
a3447 1
                                  /* Restore the actual graphics rectangle */
d3449 1
a3449 2
                                  restore_graphics_intersection(&oldrect);
                                }
d3451 3
a3453 4
                                #ifdef TRACE
                                  if (tl & (1u<<11))
                                  {
                                    /* Outline the cell BBox */
d3455 7
a3461 2
                                    redraw_set_colour(0xff00aa00);
                                    bbc_rectangle(rbox.xmin, rbox.ymin, rbox.xmax - rbox.xmin - 1, rbox.ymax - rbox.ymin - 1);
d3463 7
a3469 4
                                    redraw_set_colour(0xff22cc00);
                                    bbc_rectangle(rbox.xmin + 2, rbox.ymin + 2, rbox.xmax - rbox.xmin - 5, rbox.ymax - rbox.ymin - 5);
                                  }
                                #endif
d3471 1
a3471 1
                                /* Restore any data altered in b */
d3473 2
a3474 6
                                if (!t_noback)
                                {
                                  b->background_colour = oldback;
                                  b->antialias_colour  = oldaa;
                                  b->background_image  = oldbgimage;
                                }
d3476 1
a3476 1
                                /* Draw the slabbed in cell border. */
d3478 1
a3478 6
                                if (TABLE_BORDER(table))
                                {
                                  int dx = wimpt_dx();
                                  int dy = wimpt_dy();
                                  int hx = dx - 1;
                                  int hy = dy - 1;
d3480 9
a3488 1
                                  int max;
d3490 2
a3491 2
                                  int cx, cy;
                                  int cw, ch;
d3493 1
a3493 5
                                  /* Get the cell x,y and w,h in OS units from the redraw box. We want to */
                                  /* use this information rather than cell->x etc. as the redraw box is   */
                                  /* the item that any internal redraws will have adhered to, including   */
                                  /* plotting cell backgrounds (if present). Thus, we want any table      */
                                  /* borders to be based on those same coordinates.                       */
d3495 3
a3497 4
                                  cx = rbox.xmin;
                                  cy = rbox.ymin;
                                  cw = rbox.xmax - rbox.xmin + 1;
                                  ch = rbox.ymax - rbox.ymin + 1;
d3499 2
a3500 2
                                  /* Get the maximum horizontal OS to pixel scaling values, as this is */
                                  /* used as a threshold for the 2D border / 3D border switching.      */
d3502 2
a3503 2
                                  if (dy > dx) max = dy;
                                  else         max = dx;
d3505 3
a3507 1
                                  dprintf(("Tabl", "cell box at %d %d %d %d\n",cx,cy,cw,ch));
d3509 1
a3509 4
                                  /* Don't do any actual drawing if the Choices don't say so. We have to */
                                  /* do the calculation stuff above (well, most of it...!) so that the   */
                                  /* outer border plotter code (below) will work, whether inner borders  */
                                  /* are plotted or not.                                                 */
d3511 1
a3511 5
                                  if (choices.table_inner != Choices_TableInner_Never)
                                  {
                                    /* For tables with a cell spacing greater than the OS unit */
                                    /* to pixel scaling value, use a 3D border (depending on   */
                                    /* what is specified in the Choices).                      */
d3513 4
a3516 9
                                    if (
                                         choices.table_inner != Choices_TableInner_Always2D &&
                                         (
                                           table->cellspacing > max ||
                                           choices.table_inner == Choices_TableInner_Always3D
                                         )
                                       )
                                    {
                                      redraw_set_colour(Redraw_Colour_AlmostWhite);
d3518 15
a3532 2
                                      bbc_rectanglefill(cx,      cy - dy, cw - hx, hy);
                                      bbc_rectanglefill(cx + cw, cy - dy, hx,      ch + hy);
d3534 27
a3560 1
                                      redraw_set_colour(Redraw_Colour_PlinthGrey);
d3562 4
a3565 3
                                      bbc_rectanglefill(cx - dx, cy - dy,      hx, ch + dy + hy);
                                      bbc_rectanglefill(cx,      cy + ch, cw + hx, hy);
                                    }
d3567 1
a3567 4
                                    /* Otherwise use a black 2D border. If we've got half of the OS unit to */
                                    /* pixel spacing available, then there'll be at least 1 pixel between   */
                                    /* all cells so we can draw in that gap. Otherwise, we must plot over   */
                                    /* the cell contents.                                                   */
d3569 3
a3571 3
                                    else if (table->cellspacing >= (max >> 1))
                                    {
                                      redraw_set_colour(Redraw_Colour_Black);
d3573 2
a3574 8
                                      bbc_rectanglefill(cx - dx, cy - dy, cw + hx, hy);
                                      bbc_rectanglefill(cx + cw, cy - dy, hx,      ch + hy);
                                      bbc_rectanglefill(cx - dx, cy,      hx,      ch + hy);
                                      bbc_rectanglefill(cx,      cy + ch, cw + hx, hy);
                                    }
                                    else
                                    {
                                      redraw_set_colour(Redraw_Colour_Black);
d3576 2
a3577 7
                                      bbc_rectanglefill(cx,           cy,           cw - hx, hy);
                                      bbc_rectanglefill(cx + cw - dx, cy,           hx,      ch - hy);
                                      bbc_rectanglefill(cx,           cy,           hx,      ch - hy);
                                      bbc_rectanglefill(cx,           cy + ch - dy, cw - hx, hy);
                                    }
                                  }
                                }
d3579 4
a3582 2
                              /* Closure of 'if (cellindex < cellmax)' */
                              }
d3584 4
a3587 3
                            /* Closure of specific 'case' item */
                            }
                            break;
d3589 3
a3591 2
                          /* Closure of 'switch (head->Tag)' */
                          }
d3593 2
a3594 1
                          cellcount ++;
d3596 3
a3598 1
                          head = head->Next;
d3600 4
a3603 2
                        /* Closure of 'while (head && ...)' */
                        }
d3605 2
a3606 1
                        row = row->Next;
d3608 1
a3608 2
                      /* Closure of 'while (row && ...)' */
                      }
d3610 1
a3610 1
                      /* Right, now redraw the slabbed out outer table border */
d3612 2
a3613 4
                      if (TABLE_BORDER(table) && choices.table_outer != Choices_TableOuter_Never)
                      {
                        int dx = wimpt_dx();
                        int dy = wimpt_dy();
d3615 1
a3615 1
                        int max;
d3617 2
a3618 3
                        int tx, ty;
                        int tw, th;
                        int tb;
d3620 2
a3621 1
                        tb = TABLE_BORDER(table) * 2; /* 1 'web pixel' = 2 OS */
d3623 2
a3624 3
                        /* Work out the x and y coordinates of the lower left hand pixel */
                        /* of the table border, and the width and height of the table    */
                        /* including the border.                                         */
d3626 5
a3630 4
                        tx = tbox.xmin - tb;
                        ty = tbox.ymin - tb;
                        tw = tbox.xmax - tbox.xmin + tb * 2;
                        th = tbox.ymax - tbox.ymin + tb * 2;
d3632 1
a3632 2
                        /* Get the maximum horizontal OS to pixel scaling values, as this is */
                        /* used as a threshold for the 2D border / 3D border switching.      */
d3634 1
a3634 2
                        if (dy > dx) max = dy;
                        else         max = dx;
d3636 1
a3636 1
                        /* Use the same threshold value on the border as for internal cell borders */
d3638 8
a3645 9
                        if (
                             choices.table_outer != Choices_TableOuter_Always2D &&
                             (
                               table->cellspacing > max ||
                               choices.table_outer == Choices_TableOuter_Always3D
                             )
                           )
                        {
                          int x[4], y[4];
d3647 4
a3650 10
                          /* There are 8 corners to a plinth,  6------4  */
                          /* we draw using 8 triangles. Work   |\    /|  */
                          /* these out first in the arrays     | 7--5 |  */
                          /* declared above to make the        | |  | |  */
                          /* plotting code tidier and avoid    | 1--3 |  */
                          /* unnecessary recalculation of      |/    \|  */
                          /* corner coordinates.               0------2  */
                          /*                                             */
                          /* Note how there are only 4 unique x or y     */
                          /* values, so that's all we need to work out.  */
d3652 1
a3652 4
                          x[0] = tx;
                          x[1] = tx + tb - 1;
                          x[2] = tx + tw - tb;
                          x[3] = tx + tw - 1;
d3654 4
a3657 4
                          y[0] = ty;
                          y[1] = ty + tb - 1;
                          y[2] = ty + th - tb;
                          y[3] = ty + th - 1;
d3659 1
a3659 3
                          /* OK, now do the drawing. We need to be careful about  */
                          /* the direction that the drawing occurs to ensure that */
                          /* adjacent diagonal lines meet up correctly.           */
d3661 1
a3661 1
                          redraw_set_colour(Redraw_Colour_PlinthGrey);
d3663 6
a3668 1
                          /* Bottom edge */
d3670 7
a3676 2
                          bbc_trianglefill(x[0], y[0], x[1], y[1], x[3], y[0]); /* 0 -> 1 -> 2 */
                          bbc_trianglefill(x[1], y[1], x[3], y[0], x[2], y[1]); /* 1 -> 2 -> 3 */
d3678 13
a3690 1
                          /* Right hand edge */
d3692 1
a3692 2
                          bbc_trianglefill(x[3], y[0], x[2], y[1], x[3], y[3]); /* 2 -> 3 -> 4 */
                          bbc_trianglefill(x[2], y[1], x[3], y[3], x[2], y[2]); /* 3 -> 4 -> 5 */
d3694 2
a3695 1
                          /* Now the lighter section */
d3697 12
a3708 1
                          redraw_set_colour(Redraw_Colour_AlmostWhite);
d3710 1
a3710 1
                          /* Top edge */
d3712 4
a3715 2
                          bbc_trianglefill(x[3], y[3], x[2], y[2], x[0], y[3]); /* 4 -> 5 -> 6 */
                          bbc_trianglefill(x[2], y[2], x[0], y[3], x[1], y[2]); /* 5 -> 6 -> 7 */
d3717 10
a3726 1
                          /* Finally, the left hand edge. */
d3728 4
a3731 3
                          bbc_trianglefill(x[0], y[3], x[1], y[2], x[0], y[0]); /* 6 -> 7 -> 0 */
                          bbc_trianglefill(x[1], y[2], x[0], y[0], x[1], y[1]); /* 7 -> 0 -> 1 */
                        }
d3733 2
a3734 1
                        /* Otherwise, use a 2D outer border. */
d3736 1
a3736 3
                        else
                        {
                          redraw_set_colour(Redraw_Colour_Black);
d3738 4
a3741 6
                          bbc_rectanglefill(tx,           ty,           tw - 1, tb - 1);
                          bbc_rectanglefill(tx,           ty + th - tb, tw - 1, tb - 1);
                          bbc_rectanglefill(tx,           ty,           tb - 1, th - 1);
                          bbc_rectanglefill(tx + tw - tb, ty,           tb - 1, th - 1);
                        }
                      }
d3743 1
a3743 2
                    /* Closure of 'if (cellarray)' */
                    }
d3745 2
a3746 4
                  /* Closure of unconditional code block dealing with redrawing */
                  /* the body of a table.                                       */
                  }
                }
d3748 2
a3749 1
                /* Deal with forms elements */
d3751 1
a3751 3
                else if (tp->tagno == TAG_INPUT || tp->tagno == TAG_TEXTAREA || tp->tagno == TAG_SELECT)
                {
                  /* A text-based element */
d3753 3
a3755 10
                  if (
                       tp->tagno == TAG_TEXTAREA               ||
                       tp->tagno == TAG_SELECT                 ||
                       HtmlINPUTtype(tp) == inputtype_TEXT     ||
                       HtmlINPUTtype(tp) == inputtype_PASSWORD
                     )
                  {
                    BBox    box;
                    int     ox, oy;
                    fm_face fh;
d3757 1
a3757 1
                    convert_pair_to_os(x, y + base, &ox, &oy);
d3759 1
a3759 2
                    fh = fm_find_token_font(b, tp, 0);
                    fm_font_box(fh, &box);
d3761 1
a3761 1
                    /* Set up the bounding box for a text area, with a minimum of 2 rows */
d3763 4
a3766 4
                    if (tp->tagno == TAG_TEXTAREA)
                    {
                      unsigned int r;
                      int          lh, lb;
d3768 14
a3781 1
                      form_get_linesize(&box, &lh, &lb);
d3783 9
a3791 2
                      r = tp->rows;
                      if (r < 2) r = 2;
d3793 9
a3801 2
                      box.ymin -= lh * (r - 1); /* ymin is already below the first line, so want to drop it by (rows - 1) more */
                    }
d3803 10
a3812 1
                    /* Account for the borders */
d3814 1
a3814 3
                    box.ymin = box.ymin + oy - 8;
                    box.ymax = box.ymax + oy + 8;
                    box.xmin = ox + 4;
d3816 8
a3823 13
                    convert_to_os(x + d->cdata[cn].w, &box.xmax);

                    /* Account for a border */

                    box.xmax -= 4;

                    if (nocontent != tp)
                    {
                      redraw_input_field(b, tp, &box, redraw_token_colour(b, tp), tp->tagno == TAG_SELECT);

                      fm_set_font_colour(fh,
                                         redraw_token_colour(b, tp),
                                         (tp->tagno == TAG_SELECT) ? Redraw_Colour_BackGrey : Redraw_Colour_White);
d3825 1
a3825 230
                      form_textarea_redraw(b,
                                           d->cdata[cn].t,
                                           &box,
                                           &r->redraw_area,
                                           fh,
                                           tp->tagno == TAG_TEXTAREA,
                                           tp->tagno == TAG_INPUT && HtmlINPUTtype(tp) == inputtype_PASSWORD);
                    }

                    /* If the element is a SELECT field, it needs a menu icon too */

                    if (tp->tagno == TAG_SELECT)
                    {
                      int  width, height, offset;
                      BBox icon;

                      /* Get the sprite size, work out a bounding box and plot */
                      /* this as a virtual icon.                               */

                      read_sprite_size("fgright", &width, &height);

                      /* Allow for the border */

                      width  += 4;
                      height += 4;

                      /* Work out the vertical offset */

                      offset = (box.ymax - box.ymin - height) / 2;

                      icon.xmin = box.xmax - width;
                      icon.ymin = box.ymin + offset;
                      icon.xmax = box.xmax;
                      icon.ymax = box.ymin + offset + height;

                      if (redraw_selected(b, tp)) redraw_border_around_box(&icon, b->selected_colour);

                      coords_box_toworkarea(&icon, r);

                      if (nocontent != tp)
                      {
                        WimpPlotIconBlock block;

                        block.bbox  = icon;
                        block.flags = 0x1700311A;

                        if (redraw_backcol(b) != Redraw_Colour_BackGrey) block.flags |= (1<<2); /* Border if not using Wimp grey background */

                        block.data.is.sprite             = "fgright";
                        block.data.is.sprite_area        = (void *) sprite_block;
                        block.data.is.sprite_name_length = sizeof("fgright") - 1;

                        wimp_plot_icon(&block);
                      }
                    }
                  }
                  else switch(HtmlINPUTtype(tp))
                  {
                    /* Graphics-based forms elements */

                    case inputtype_CHECKBOX:
                    {
                      if (nocontent != tp) redraw_switch(b,
                                                         tp,
                                                         x,
                                                         y + base,
                                                         form_get_field(b, d->cdata[cn].t) -> checked ? "fopton" : "foptoff",
                                                         r);
                    }
                    break;

                    case inputtype_RADIO:
                    {
                      if (nocontent != tp) redraw_switch(b,
                                                         tp,
                                                         x,
                                                         y + base,
                                                         form_get_field(b, d->cdata[cn].t) -> checked ? "fradioon" : "fradiooff",
                                                         r);
                    }
                    break;

                    case inputtype_IMAGE: goto do_image; /* See a short distance below */

                    case inputtype_HIDDEN: break;

                    case inputtype_SUBMIT: /* SUBMIT same as RESET: no break */
                    case inputtype_BUTTON: /* Again, no break                */
                    case inputtype_RESET:
                    {
                      BBox           box;
                      int            fh, ox, oy;
                      unsigned int   colour;
                      const char   * p;

                      p = form_button_text(tp);

                      convert_pair_to_os(x, y + base, &ox, &oy);

                      fh = fm_find_token_font(b, tp, 0);

                      fm_font_box(fh,&box);

                      box.ymin = box.ymin + oy - 8;
                      box.ymax = box.ymax + oy + 8;
                      box.xmin = ox + 4;

                      convert_to_os(x + d->cdata[cn].w,&box.xmax);

                      /* Account for a border */

                      box.xmax -= 4;

                      /* Draw the button's plinth */

                      colour = redraw_token_colour(b, tp);

                      if (b->highlight == tp)
                      {
                        if (nocontent != tp)
                        {
                          redraw_button(b, tp, &box, 1);
                          fm_set_font_colour(fh, colour, Redraw_Colour_MidGrey);
                        }
                      }
                      else
                      {
                        if (nocontent != tp)
                        {
                          redraw_button(b, tp, &box, 0);
                          fm_set_font_colour(fh, colour, Redraw_Colour_BackGrey);
                        }
                      }

                      /* Plot the text, centred horizontally */

                      if (p && nocontent != tp)
                      {
                        unsigned int length, end;
                        int          width;

                        length = strlen(p);
                        end    = 0;

                        while(end < length && p[end] != '\n') end++;

                        e = fm_get_string_width(fh,
                                                p,
                                                0x1000000,
                                                end - d->cdata[cn].o,
                                                -1,
                                                NULL,
                                                &width);

                        width = (d->cdata[cn].w - width) / 2 + 4;
                        if (width < 0) width = 0;

                        fm_puts(fh, x + width, y + base, p, 0, 0);
                      }
                    }
                    break;
                  }
                }

                /* Plot an image */

                else if (tp->style & IMG)
                {
                  BBox box;
                  int  ox, oy, o;

do_image: /* (This code is also used for form INPUT TYPE=IMAGE tags; see above) */

                  convert_pair_to_os(x, y + base, &ox, &oy);

                  if (!reformat_get_image_size(b, tp, &box))
                  {
                    /* Correct the coordinates for plotting */

                    ox -= box.xmin;

                    box.xmin += ox;
                    box.ymin += oy;
                    box.xmax += ox;
                    box.ymax += oy;

                    /* Account for HSPACE / VSPACE; OBJECT calls work for IMGs too, */
                    /* and the multpliers are for 1 'web pixel' = 2 OS units.       */

                    box.xmin += HtmlOBJECThspace(tp) * 2;
                    box.ymin += HtmlOBJECTvspace(tp) * 2;
                    box.xmax -= HtmlOBJECThspace(tp) * 2;
                    box.ymax -= HtmlOBJECTvspace(tp) * 2;

                    /* Find the border width (if any) */

                    o = (tp->style & IMG) ? tp->maxlen * 2 : 0;

                    /* Ensure the image has the plotting position recorded within */
                    /* it's associated image_info structure, so that update       */
                    /* routines elsewhere will know where to plot it              */

                    image_set_token_image_position(b,
                                                   tp,
                                                   coords_x_toworkarea(box.xmin + o, r),
                                                   coords_y_toworkarea(box.ymin + o, r));

                    /* Draw a border of tp->maxlen * 2 OS units width around an image. */
                    /* This comes from the image's BORDER attribute. Links default to  */
                    /* a 2 pixel (4 OS unit) border in HTMLLib, whereas non-link       */
                    /* images default to no colour.                                    */

                    if (tp->tagno == TAG_INPUT && redraw_selected(b, tp))
                    {
                      redraw_border_around_box(&box, b->selected_colour);
                    }
                    else
                    {
                      if (o)
                      {
                        redraw_set_colour(redraw_token_colour(b, tp));

                        bbc_rectanglefill(box.xmin,     box.ymin,     box.xmax - box.xmin - 1, o - 1);
                        bbc_rectanglefill(box.xmin,     box.ymin,     o - 1,                   box.ymax - box.ymin - 1);
                        bbc_rectanglefill(box.xmin,     box.ymax - o, box.xmax - box.xmin - 1, o - 1);
                        bbc_rectanglefill(box.xmax - o, box.ymin,     o - 1,                   box.ymax - box.ymin - 1);
                      }
                      else if (redraw_selected(b, tp))
                      {
                        redraw_border_around_box(&box, b->selected_colour);
d3827 4
a3830 17
// Hmm. Need to find a
// way of invoking this
// reliably, and clearing
// the highlight without
// flicking horribly.
//
//                        /* Things get rather more complicated for client side maps, if */
//                        /* the pointer is over them.                                   */
//
//                        if (b->pointer_over == tp && (tp->type & TYPE_ISCLIENTMAP))
//                        {
//                          /* Ask the client side map handler to do this bit */
//
//                          csim_highlight_region(b, b->selected_colour, box.xmin + o, box.ymax - o);
//                        }
                      }
                    }
d3832 1
a3832 1
                    /* Redraw the image itself */
d3834 1
a3834 3
                    if (nocontent != tp) RetError(image_redraw(b, r, d->cdata[cn].t, o + box.xmin, o + box.ymin));
                  }
                }
d3836 3
a3838 1
                /* Plot an OBJECT, EMBED or APPLET tag */
d3840 1
a3840 4
                else if (ISOBJECT(tp))
                {
                  BBox box;
                  int  ox, oy, o;
d3842 1
a3842 1
                  convert_pair_to_os(x, y + base, &ox, &oy);
d3844 1
a3844 3
                  if (!reformat_get_object_size(b, tp, &box))
                  {
                    o = HtmlOBJECTborder(tp) * 2;
d3846 1
a3846 1
                    ox -= box.xmin;
d3848 10
a3857 4
                    box.xmin += ox;
                    box.ymin += oy;
                    box.xmax += ox;
                    box.ymax += oy;
d3859 1
a3859 4
                    object_set_token_object_position(b,
                                                     tp,
                                                     coords_x_toworkarea(box.xmin + o, r),
                                                     coords_y_toworkarea(box.ymin + o, r));
d3861 4
a3864 1
                    /* Draw a border, if required */
d3866 2
a3867 5
                    if (HtmlOBJECTborder(tp))
                    {
                      if (o)
                      {
                        redraw_set_colour(redraw_token_colour(b, tp));
d3869 1
a3869 10
                        bbc_rectanglefill(box.xmin,     box.ymin,     box.xmax - box.xmin - 1, o - 1);
                        bbc_rectanglefill(box.xmin,     box.ymin,     o - 1,                   box.ymax - box.ymin - 1);
                        bbc_rectanglefill(box.xmin,     box.ymax - o, box.xmax - box.xmin - 1, o - 1);
                        bbc_rectanglefill(box.xmax - o, box.ymin,     o - 1,                   box.ymax - box.ymin - 1);
                      }
                      else if (redraw_selected(b, tp))
                      {
                        redraw_border_around_box(&box, b->selected_colour);
                      }
                    }
d3871 23
a3893 3
                    if (nocontent != tp) RetError(object_redraw(b, r, d->cdata[cn].t, o + box.xmin, o + box.ymin));
                  }
                }
d3895 1
a3895 1
                /* Plot a horizontal rule */
d3897 9
a3905 3
                else if (tp->style & HR)
                {
                  int w, h, lmarg, ox, oy = 0;
d3907 1
a3907 1
                  convert_to_os(y, &oy);
d3909 9
a3917 1
                  lmarg = redraw_start_x(b, d, tp, l);
d3919 1
a3919 1
                  convert_to_os(d->cdata[cn].w, &w);
d3921 8
a3928 4
                  /* Round width to a multiple of 2 and limit check it. */
                  /* Allow sizes greater than the available width, in   */
                  /* which case align to the left and draw to whatever  */
                  /* width was requested.                               */
d3930 1
a3930 2
                  w = w &~ 1;
                  if (w < 2) w = 2;
d3932 2
a3933 1
                  /* Deal with a size (height) specifier */
d3935 4
a3938 3
                  if (HR_HAS_SIZE(tp))
                  {
                    /* Currently only recognise pixels */
d3940 2
a3941 3
                    switch (HR_SIZE_UNITS(tp))
                    {
                      case UNITS_PIXELS: h = HR_SIZE(tp) * 2; break;
d3943 1
a3943 1
                      /* (IMPORTANT: If adding extra units, ensure h ends up a multiple of 2) */
d3945 3
a3947 4
                      default: h = 4; break;
                    }
                  }
                  else h = 4;
d3949 7
a3955 1
                  /* Limit check the height */
d3957 1
a3957 1
                  if (h < 2) h = 2;
d3959 1
a3959 3
                  /* Sort out the horizontal and vertical plotting offsets; */
                  /* centre vertically, and align horizontally as specified */
                  /* in the token.                                          */
d3961 2
a3962 2
                  oy += ((d->ldata[l].h - h) / 2) &~3 - 4;
                  oy += 6;
d3964 3
a3966 1
                  ox = (coords_x_toscreen(lmarg + osxorg, r) &~1);
d3968 2
a3969 3
                  /* Plot a black rule if NOSHADE is specified or the height */
                  /* or width are less than 4 OS units, else plot a '3D'     */
                  /* rule.                                                   */
d3971 1
a3971 10
                  if (HR_NOSHADE(tp) || h < 4 || w < 4)
                  {
                    redraw_set_colour(0);
                    bbc_rectanglefill(ox, oy, w - 1, h - 1);
                  }
                  else
                  {
                    if (h == wimpt_dy() * 2)
                    {
                      /* Simple 'groove' rule */
d3973 2
a3974 1
                      h = h / 2;
d3976 2
a3977 8
                      redraw_set_colour(Redraw_Colour_MidGrey);
                      bbc_rectanglefill(ox, oy, w - 1, h - 1);
                      redraw_set_colour(Redraw_Colour_AlmostWhite);
                      bbc_rectanglefill(ox, oy - h, w - 1, h - 1);
                    }
                    else
                    {
                      /* 3D 'box' rule */
d3979 2
a3980 9
                      redraw_set_colour(Redraw_Colour_AlmostWhite);
                      bbc_rectanglefill(ox, oy, w - 1, 1);
                      bbc_rectanglefill(ox + w - 2, oy, 1, h - 1);
                      redraw_set_colour(Redraw_Colour_MidGrey);
                      bbc_rectanglefill(ox, oy + h - 2, w - 1, 1);
                      bbc_rectanglefill(ox, oy, 1, h - 1);
                    }
                  }
                }
d3982 16
a3997 1
                /* Plot a bullet point */
d3999 1
a3999 3
                else if(ISBULLET(tp))
                {
                  int ox,oy;
d4001 7
a4007 3
                  convert_pair_to_os(x, y + base, &ox, &oy);
                  redraw_bullet(ox, oy, tp->indent, r);
                }
d4009 1
a4009 1
                /* Plot some text */
d4011 3
a4013 3
                else
                {
                  dp = d->cdata[cn].t->text;
d4015 6
a4020 5
                  if (dp)
                  {
                    BBox         size;
                    unsigned int c;
                    int          yofs, height;
d4022 1
a4022 1
                    /* Find the font handle for the token, and its colour */
d4024 2
a4025 2
                    h = fm_find_token_font(b, tp, 0);
                    c = redraw_token_colour(b, tp);
d4027 1
a4027 1
                    /* Find the text height in OS units */
d4029 2
a4030 2
                    fm_font_box(h, &size);
                    height = size.ymax - size.ymin;
d4032 1
a4032 1
                    /* Work out the y offset to plot at */
d4034 4
a4037 4
                    if (ISSUP(tp))
                    {
                      /* Shift baseline up for superscript text. The following */
                      /* will be for the SUP size text, remember...            */
d4039 1
a4039 1
                      convert_to_points(height, &yofs);
d4041 8
a4048 8
                      /* SUP height = normht * 3 / 5, so to get normal  */
                      /* height from SUP do height * 5 / 3. Then want   */
                      /* to get the height remaining and use this as an */
                      /* addition for the y positioning, so need to add */
                      /* (normht - hormht * 3 / 5) = normht * 2 / 5.    */
                      /* This all simplifies out to height * 2 / 3, but */
                      /* this looks too high in practice, so it's taken */
                      /* down a bit from that!                          */
d4050 5
a4054 5
                      yofs = y + base + (yofs / 2);
                    }
                    else if (ISSUB(tp))
                    {
                      /* Shift the baseline down a bit for subscript text */
d4056 3
a4058 3
                      yofs = y + (base * 4) / 5;
                    }
                    else yofs = y + base;
d4060 1
a4060 1
                    /* Set the font colour and plot the text */
d4062 1
a4062 1
                    fm_set_font_colour(h,c,redraw_background_colour(b,c));
d4064 3
a4066 3
                    if (dp) fm_putsl(h,
                                     x,
                                     yofs,
d4069 2
a4070 2
                                     0,
                                     b->background_image >= 0 && b->show_background);
d4072 2
a4073 2
                    /* Deal with underlining. The position should not be affected */
                    /* by SUB or SUP text.                                        */
d4075 12
a4086 12
                    if (
                         (
                           (
                             ISLINK(tp) &&
                             b->underline_links
                           )
                           || ISUNDERLINE(tp)
                         )
                         && !(tp->tagno == TAG_TABLE)
                       )
                    {
                      /* Underline the item - set the colour, and start at the item's x coordinate... */
d4088 1
a4088 1
                      int ox,oy;
d4090 5
a4094 1
                      /* Set the colour */
d4096 1
a4096 1
                      redraw_set_colour(redraw_token_colour(b, tp));
d4098 1
a4098 1
                      /* Work out the coordinates (in OS units) */
d4100 2
a4101 2
                      convert_pair_to_os(x, y + base, &ox, &oy);
                      oy -= 7;
d4103 1
a4103 1
                      /* Move to the start point */
d4105 4
a4108 1
                      bbc_move(ox, oy);
d4110 4
a4113 1
                      /* ...finish at x plus its width. */
d4115 22
a4136 1
                      convert_to_os(x + d->cdata[cn].w, &ox);
d4138 2
a4139 2
                      bbc_draw(ox, oy);
                    }
d4141 1
a4141 4
                    /* Deal with STRIKE text. This needs to have the strikethrough */
                    /* line through the text middle, as opposed to following the   */
                    /* body text font baseline (so SUB and SUP *will* have an      */
                    /* effect on the positioning).                                 */
d4143 3
a4145 4
                    if (ISSTRIKE(tp) && !(tp->tagno == TAG_TABLE))
                    {
                      int ox, oy;
                      int hs;
d4147 4
a4150 1
                      redraw_set_colour(redraw_token_colour(b, tp));
d4152 1
a4152 3
                      convert_pair_to_os(x, yofs, &ox, &oy);
                      hs = height / 4;
                      oy += hs;
d4154 1
a4154 1
                      bbc_move(ox, oy);
d4156 4
a4159 9
                      convert_to_os(x + d->cdata[cn].w, &ox);

                      bbc_draw(ox, oy);
                    }
                  }
                }

                // Plot the bounding box of any object; green to
                // mark an image, else red
d4161 1
a4161 1
                #ifdef TRACE
d4163 1
a4163 55
                  if ((tl & (1u<<11)) || (tl & (1u<<19)))
                  {
                    int ox, oy, ow, oh;

                    convert_pair_to_os(x, y, &ox, &oy);

                    convert_to_os(d->cdata[cn].w, &ow);

                    oh = d->ldata[l].h;

                    if (tl & (1u<<11))
                    {
                      _swix(Wimp_SetColour,
                            _IN(0),

                            (tp->style & IMG) ? 10 : 11);

                      bbc_rectangle(ox, oy, ow - 1, oh - 1);
                    }

                    // Mark tokens with no lower bits set in the type word
                    // (so not head, body, frameset etc.) and a NULL text
                    // field, with a magenta dot in the bottom *right* of
                    // the token BBox and a cyan dot in the top right of the
                    // BBox respectively.

                    if (tl & (1u<<19))
                    {
                      if (!(tp->type & 0xff))
                      {
                        redraw_set_colour(0xff00ff00);
                        bbc_circlefill(ox + ow - 1, oy, 6);
                        redraw_set_colour(0);
                        bbc_circle(ox + ow - 1, oy, 6);
                      }

                      if (!tp->text)
                      {
                        redraw_set_colour(0xffff0000);
                        bbc_circlefill(ox + ow - 1, oy + oh - 1, 6);
                        redraw_set_colour(0);
                        bbc_circle(ox + ow - 1, oy + oh - 1, 6);
                      }
                    }
                  }
                #endif

              /* Closure of long 'if' checking if the current chunk */
              /* lies partially or entirely within the redraw area. */
              /* If it does, the code above executes.               */
              }

            /* Closure of 'for' looping round chunks on a given line */
            /* that lies partially or entirely within the redraw     */
            /* area.                                                 */
d4166 5
a4170 3
            /* For printing, tell the print routines where we were up to. */
            /* This would be quite straightforward, except we have to     */
            /* account for gaps between lines.                            */
d4172 1
a4172 4
            if (
                 printing != 0 &&
                 toplevel
               )
d4174 7
a4180 1
              int bottom = osyorg + d->ldata[l].y;
d4182 1
a4182 3
              /* Correct for a possible gap */

              if (l + 1 < d->nlines)
d4184 4
a4187 5
                bottom -= d->ldata[l].y -
                          (
                            d->ldata[l + 1].y +
                            d->ldata[l + 1].h
                          );
a4188 2

              if (bottom < page_bottom) r->xscroll = osyorg + page_bottom;
a4189 4

          /* Closure of long 'if' checking if the current line lies */
          /* partially or entirely within the redraw area. The code */
          /* above executes if it does.                             */
d4191 1
d4193 3
a4195 6
        /* Closure of 'for' looping for all lines in the document. */
        }

      /* Closure of long 'if' checking if b->stream was not NULL. */
      /* If not, then there is a document to plot; so execute the */
      /* above code. Else, execute the code below.                */
d4198 8
a4205 1
      else
d4207 1
a4207 4
        if (!printing || !toplevel)
        {
          /* Set the graphics background colour to the default  */
          /* and clear the graphics rectangle [to this colour]. */
d4209 1
a4209 1
          redraw_set_colour(choices.background_colour);
d4211 7
a4217 4
          bbc_rectanglefill(r->redraw_area.xmin,
                            r->redraw_area.ymin,
                            r->redraw_area.xmax - r->redraw_area.xmin,
                            r->redraw_area.ymax - r->redraw_area.ymin);
d4220 1
a4220 3
        /* If there's a fetch URL but no stream, the document was empty */

        if (browser_current_url(b) && !fetch_fetching(b))
d4222 1
a4222 51
          fm_face h;
          int     x, y, htop;
          BBox    size;

          /* Claim a font */

          h = fm_find_font(b, "sans", (int) (choices.font_size * 1.5), (int) (choices.font_size * 1.5), 0, 1);

          /* Find the height of the tallest character */

          fm_font_box(h, &size);

          /* Use that height, and the toolbar sizes to work out the y coordinate to plot at */

          if (!controls.swap_bars) htop = toolbars_button_height(b) + toolbars_url_height(b);
          else                     htop = toolbars_status_height(b);

          if (htop) htop += wimpt_dy();

          y = coords_y_toscreen(htop - size.ymax - size.ymin - 40, r); /* -40 = arbitrary constant, aesthetic consideration */

          /* The x coordinate has a fixed offset from the left */

          x = coords_x_toscreen(32,r);

          dprintf(("Redr", "redraw_draw_r: Empty page, claimed font %p\n"
                           "               Plotting x,y %d,%d\n",

                                           (void *) h,
                                           x, y));

          /* Set a black-on-grey font colour */

          fm_set_font_colour(h, choices.text_colour, choices.background_colour);

          /* Write the string */

          fm_puts(h,
                  x,
                  y,
                  lookup_token("NoData:The server returned a blank page.",
                               0,
                               0),
                  1,
                  1);

          if (printing)
          {
            r->xscroll = 0;
            return NULL;
          }
d4226 3
a4228 4
    /* Closure of long 'if' checking if the browser window had */
    /* children. If not, the code immediately above - normal   */
    /* redraw - may be run, else special frame border redraw   */
    /* code is run.                                            */
d4231 1
a4231 9
    if (!printing && toplevel)
    {
      #ifdef ANTI_TWITTER
        anti_twitter(r);
      #endif

      wimp_get_rectangle(r, &more);
    }
    else more = 0;
a4232 3
  while (more);

  /* Finished... */
@


1.43
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@d77 2
a78 2
static void redraw_input_field  (browser_data * b, HStream * t, BBox * box, int colour, int menu);
static void redraw_button       (browser_data * b, HStream * t, BBox * box, int in);
d80 1
a80 1
static void redraw_bullet       (int x, int y, int bullet, WimpRedrawWindowBlock * r);
d86 1
a86 1
static int use_noback = 0;
d92 1
a92 1
static _kernel_oserror * redraw_draw_r (int toplevel, int xorg, int yorg, browser_data * b, reformat_cell * d, WimpRedrawWindowBlock * r, int noback,  HStream * nocontent);
d109 1
a109 1
int redraw_header(unsigned int flags)
d138 2
a139 2
  int h2 = redraw_header(t2->style);
  int ln = 0;
d182 1
a182 1
int redraw_backcol(browser_data * b)
d208 1
a208 1
int redraw_background_colour(browser_data * b, int foregroundcolour)
d248 1
a248 1
int redraw_token_colour(browser_data * b, HStream * t)
d311 1
a311 1
void redraw_set_colour(int colour)
d596 1
a596 1
int redraw_start_x(browser_data * b, reformat_cell * cell, HStream * t, int line)
d598 2
a599 2
  int x, cn;
  int align = 0;
d613 3
a615 3
    int i;
    int left  = redraw_left_gap (b, cell, t);
    int right = redraw_right_gap(b, cell, t);
d671 1
a671 1
int redraw_token_x(browser_data * b, reformat_cell * cell, HStream * t, int line)
d673 2
a674 1
  int x, chunk, mchunk;
d730 1
a730 1
int redraw_chunk_x(browser_data * b, reformat_cell * cell, int chunk, int line)
d732 2
a733 1
  int x, cchunk, mchunk;
d782 1
a782 1
int redraw_selected(browser_data * b, HStream * token)
d828 1
a828 1
void redraw_border_around_box(BBox * rbox, int colour)
d867 1
a867 1
static void redraw_input_field(browser_data * b, HStream * t, BBox * box, int colour, int menu)
d933 1
a933 1
static void redraw_button(browser_data * b, HStream * t, BBox * box, int in)
d1042 1
a1042 1
static void redraw_bullet(int x, int y, int bullet, WimpRedrawWindowBlock * r)
d1167 4
a1170 3
    int    h, xpos, vcent, stringwidth, stringheight, size;
    BBox   fbox;
    BBox * ibox = NULL;
d1245 1
a1245 1
        int colour;
d1305 1
a1305 1
_kernel_oserror * redraw_draw(browser_data * b, WimpRedrawWindowBlock * r, int noback, HStream * nocontent)
d1384 1
a1384 1
_kernel_oserror * redraw_draw_r(int toplevel, int xorg, int yorg, browser_data * b, reformat_cell * d, WimpRedrawWindowBlock * r, int noback, HStream * nocontent)
d1388 1
a1389 1
  int               l = 0;
d1500 1
a1500 1
          int htop;
d1558 8
a1565 7
            HStream * tp;            /* Token Pointer */
            fm_face   h;
            int       x, y;          /* Plotting origin */
            int       keepx, keepy;  /* Line's bottom left corner */
            int       base, i;
            char    * dp;            /* Data Pointer */
            int       cn;            /* Chunk Number */
d1675 1
a1675 1
                  int  oh;
d1692 2
a1693 2
                    int              oldback    = 0;
                    int              oldaa      = 0;
d1695 1
a1695 1
                    int              t_noback;
d1701 3
a1703 3
                    int              cellindex;
                    int              cellcount;
                    int              cellmax = table->ColSpan * table->RowSpan;
d1705 1
a1705 1
                    int              swap;
d2191 2
a2192 2
                      int r;
                      int lh, lb;
d2312 4
a2315 3
                      BBox         box;
                      int          fh, ox, oy, colour;
                      const char * p;
d2360 2
a2361 1
                        int length, end, width;
d2629 3
a2631 2
                    BBox size;
                    int  c, yofs, height;
d2931 1
a2931 1
      wimp_get_rectangle(r,&more);
@


1.42
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@a44 5
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

d188 1
a188 3
  #ifdef TRACE
    if (tl & (1u<<9)) Printf("redraw_backcol: Called with choices.background_colour = %p\n",(void *) choices.background_colour);
  #endif
d313 1
a313 3
  #ifdef TRACE
    if (tl & (1u<<9)) Printf("redraw_set_colour: Called with colour = %p\n",(void *) colour);
  #endif
d1391 1
a1391 3
  #ifdef TRACE
    if (tl & (1u<<9)) Printf("\nredraw_draw_r: Called\n");
  #endif
d1449 1
a1449 3
      #ifdef TRACE
        if (tl & (1u<<9)) Printf("redraw_draw_r: Have children\n");
      #endif
d1458 1
a1458 3
      #ifdef TRACE
        if (tl & (1u<<9)) Printf("redraw_draw_r: Have no children\n");
      #endif
d1462 1
a1462 3
        #ifdef TRACE
          if (tl &512) Printf("redraw_draw_r: Have a document\n");
        #endif
d1783 1
a1783 1
                      if (TABLE_HAS_BGCOL(table) && !noback)
d1826 1
a1826 3
                                #ifdef TRACE
                                  if (tl & (1u<<20)) Printf("redraw_draw call: %d -%d\n", keepx + cell->x, -(keepy + cell->y));
                                #endif
d1966 1
a1966 3
                                  #ifdef TRACE
                                    if (tl & (1u<<20)) Printf("cell box at %d %d %d %d\n",cx,cy,cw,ch);
                                  #endif
d2883 5
a2887 7
          #ifdef TRACE
            if (tl & (1u<<9))
            {
              Printf("redraw_draw_r: Empty page, claimed font %p\n",(void *) h);
              Printf("               Plotting x,y %d,%d\n",x,y);
            }
          #endif
@


1.41
log
@Further printing tweaks. Font colours inside anchors now work (must be
built with the 02-Mar-2000 HTMLLib or later). Event log won't show guts
of internal URLs for just-born browser windows if displaying the list
by URL. Empty Location headers don't redirect down zero page and give a
nasty internal error; raise "no fetcher service found" instead.
@
text
@d28 1
d35 9
a43 2
#include "swis.h"
#include "flex.h"
d45 4
a48 5
#include "HTMLLib.h" /* HTML library API, Which will include html2_ext.h, tags.h and struct.h */

#include "wimp.h"
#include "wimplib.h"
#include "event.h"
a49 1
#include "svcprint.h"
d72 1
a72 1
  #include "Unicode/iso10646.h"
d116 1
a116 1
  /* H_MASK and H_SHIFT are defined in HTMLLib:tags.h */
d177 9
a185 10
/*************************************************/
/* redraw_backcol()                              */
/*                                               */
/* Small function to return the actual           */
/* background colour of a browser window.        */
/*                                               */
/* Parameters: A pointer to a browser_data       */
/*             structure associated with the     */
/*             window in question.               */
/*************************************************/
d200 14
a213 15
/*************************************************/
/* redraw_background_colour()                    */
/*                                               */
/* Returns a background colour hint for text of  */
/* a given foreground colour.                    */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             holding the background info;      */
/*                                               */
/*             A foreground colour (as a palette */
/*             entry, for more details see       */
/*             redraw_set_colour()).             */
/*                                               */
/* Returns:    A background colour.              */
/*************************************************/
d240 14
a253 16
/*************************************************/
/* redraw_token_colour()                         */
/*                                               */
/* Returns the colour to plot a token in, on the */
/* assumption that it contains some sort of text */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             with details of the token stream  */
/*             within it;                        */
/*                                               */
/*             Pointer to the token.             */
/*                                               */
/* Returns:    The colour to plot in, as a       */
/*             palette entry (see                */
/*             redraw_set_colour()).             */
/*************************************************/
d308 9
a316 10
/*************************************************/
/* redraw_set_colour()                           */
/*                                               */
/* Sets the foreground colour for future plots.  */
/*                                               */
/* Parameters: A 32-bit colour number in the     */
/*             form BBGGRRcc where cc = GCOL,    */
/*             or BBGGRR are blue, green and     */
/*             red components.                   */
/*************************************************/
d347 14
a360 14
/*************************************************/
/* redraw_display_width()                        */
/*                                               */
/* Returns the available display width for a     */
/* given browser redraw cell, in OS units.       */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the cell;             */
/*                                               */
/*             Pointer to a reformat_cell struct */
/*             representing the redraw cell.     */
/*                                               */
/* Returns:    The display width, in OS units.   */
/*************************************************/
d375 15
a389 16
/*************************************************/
/* redraw_display_height()                       */
/*                                               */
/* Returns the available display height for a    */
/* given browser redraw cell, in OS units; for a */
/* base browser window, it will subtract the     */
/* toolbar heights as required.                  */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the cell;             */
/*                                               */
/*             Pointer to a reformat_cell struct */
/*             representing the redraw cell.     */
/*                                               */
/* Returns:    The display width, in OS units.   */
/*************************************************/
d412 14
a425 15
/*************************************************/
/* redraw_left_margin()                          */
/*                                               */
/* Returns the left hand margin width for a      */
/* given browser redraw cell, in millipoints.    */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the cell;             */
/*                                               */
/*             Pointer to a reformat_cell struct */
/*             representing the redraw cell.     */
/*                                               */
/* Returns:    The left hand margin, in          */
/*             millipoints.                      */
/*************************************************/
d442 14
a455 15
/*************************************************/
/* redraw_right_margin()                         */
/*                                               */
/* Returns the right hand margin width for a     */
/* given browser redraw cell, in millipoints.    */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the cell;             */
/*                                               */
/*             Pointer to a reformat_cell struct */
/*             representing the redraw cell.     */
/*                                               */
/* Returns:    The right hand margin, in         */
/*             millipoints.                      */
/*************************************************/
d472 20
a491 22
/*************************************************/
/* redraw_left_gap()                             */
/*                                               */
/* Works out the left hand indented margin for a */
/* given browser redraw cell, in millipoints.    */
/* This will be redraw_left_margin plus a value  */
/* dependent upon the given token (to allow e.g. */
/* list items to be indented).                   */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the cell;             */
/*                                               */
/*             Pointer to a reformat_cell struct */
/*             representing the redraw cell;     */
/*                                               */
/*             Pointer to a token holding        */
/*             indentation information.          */
/*                                               */
/* Returns:    The left hand margin, taking      */
/*             account of list indentations      */
/*             etc., in millipoints.             */
/*************************************************/
d547 18
a564 19
/*************************************************/
/* redraw_right_gap()                            */
/*                                               */
/* As redraw_left_gap, but for the right hand    */
/* edge of a given redraw browser cell.          */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the cell;             */
/*                                               */
/*             Pointer to a reformat_cell struct */
/*             representing the redraw cell;     */
/*                                               */
/*             Pointer to a token holding        */
/*             indentation information.          */
/*                                               */
/* Returns:    The right hand margin, taking     */
/*             account of block quote indents    */
/*             etc., in millipoints.             */
/*************************************************/
d582 22
a603 24
/*************************************************/
/* redraw_start_x()                              */
/*                                               */
/* Examines current token and line structure     */
/* information within a redraw cell to return an */
/* indent from the left edge of the page at      */
/* which something should be drawn - handles     */
/* centre and right aligning of lines.           */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the cell;             */
/*                                               */
/*             Pointer to a reformat_cell struct */
/*             representing the redraw cell;     */
/*                                               */
/*             Pointer to an HStream (token)     */
/*             so that a margin can be found;    */
/*                                               */
/*             Line number which the x offset    */
/*             needs to be found for.            */
/*                                               */
/* Returns:    The x offset to plot at, in OS    */
/*             units.                            */
/*************************************************/
d658 21
a678 23
/*************************************************/
/* redraw_token_x()                              */
/*                                               */
/* Examines current token and line structure     */
/* information within a redraw cell to return an */
/* indent from the left edge of the page at      */
/* which a specific token should be drawn.       */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the cell;             */
/*                                               */
/*             Pointer to a reformat_cell struct */
/*             representing the redraw cell;     */
/*                                               */
/*             Pointer to the token;             */
/*                                               */
/*             Line number which the token lies  */
/*             in;                               */
/*                                               */
/* Returns:    The x offset from the left of the */
/*             page that the token starts at, in */
/*             OS units.                         */
/*************************************************/
d712 25
a736 27
/*************************************************/
/* redraw_chunk_x()                              */
/*                                               */
/* Examines current token and line structure     */
/* information within a redraw cell to return an */
/* indent from the left edge of the page at      */
/* which a specific chunk should be drawn (i.e.  */
/* as redraw_token_x, but you supply a chunk     */
/* number rather than a token).                  */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the cell;             */
/*                                               */
/*             Pointer to a reformat_cell struct */
/*             representing the redraw cell;     */
/*                                               */
/*             The chunk number;                 */
/*                                               */
/*             Line number the chunk lies in.    */
/*                                               */
/* Returns:    The x offset from the left of the */
/*             page that the chunk starts at, in */
/*             OS units.                         */
/*                                               */
/* Assumes:    That the given line does indeed   */
/*             include the given chunk.          */
/*************************************************/
d770 18
a787 20
/*************************************************/
/* redraw_selected()                             */
/*                                               */
/* Looks at the 'selected' field for the given   */
/* browser_data struct, and returns 1 if the     */
/* given token should be part of the selection   */
/* that 'selected' lies in.                      */
/*                                               */
/* This is for whole token selection, e.g. when  */
/* keyboard navigating a page - it isn't part of */
/* a more general mouse-driven text selection    */
/* model.                                        */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the selection;        */
/*             Pointer to the token to compare.  */
/*                                               */
/* Returns:    1 if the token is part of the     */
/*             selection, else 0.                */
/*************************************************/
d823 11
a833 12
/*************************************************/
/* redraw_border_around_box()                    */
/*                                               */
/* Draws a 2 pixel thick border around a given   */
/* bounding box, in a given colour.              */
/*                                               */
/* Parameters: Pointer to the BBox;              */
/*                                               */
/*             Colour to use, as a palette entry */
/*             (for more details see             */
/*             redraw_set_colour()).             */
/*************************************************/
d852 21
a872 22
/*************************************************/
/* redraw_input_field()                          */
/*                                               */
/* For forms, redraws an input field element.    */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the element;          */
/*                                               */
/*             Pointer to the token representing */
/*             this element;                     */
/*                                               */
/*             BBox of the field, in window      */
/*             coords (and thus OS units);       */
/*                                               */
/*             Border colour (as a palette       */
/*             entry, for more details see       */
/*             redraw_set_colour());             */
/*                                               */
/*             1 if this is a display field,     */
/*             i.e. it has a menu icon, and the  */
/*             border colour is ignored; else 0. */
/*************************************************/
d921 18
a938 19
/*************************************************/
/* redraw_button()                               */
/*                                               */
/* For forms, redraws a button element.          */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the element;          */
/*                                               */
/*             Pointer to the token representing */
/*             this element;                     */
/*                                               */
/*             BBox of the field, in window      */
/*             coords (and thus OS units);       */
/*                                               */
/*             1 to be slabbed in, 2 to be       */
/*             slabbed in but with a light grey  */
/*             background rather than dark, else */
/*             0.                                */
/*************************************************/
d968 23
a990 24
/*************************************************/
/* redraw_switch()                               */
/*                                               */
/* For forms, redraws a switch (radio or option) */
/* element.                                      */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the element;          */
/*                                               */
/*             Pointer to the token representing */
/*             this element;                     */
/*                                               */
/*             x coordinate (points, in screen   */
/*             coords) of left hand edge;        */
/*                                               */
/*             y coordinate (points, in screen   */
/*             coords) of right hand edge;       */
/*                                               */
/*             Pointer to sprite name to use;    */
/*                                               */
/*             A WimpRedrawWindowBlock pointer,  */
/*             if in a redraw loop (can be NULL  */
/*             if not in a redraw loop).         */
/*************************************************/
d1031 17
a1047 17
/*************************************************/
/* redraw_bullet()                               */
/*                                               */
/* Redraws a bullet point.                       */
/*                                               */
/* Parameters: x coordinate (points, in screen   */
/*             coords) of left hand edge;        */
/*                                               */
/*             y coordinate (points, in screen   */
/*             coords) of right hand edge;       */
/*                                               */
/*             The bullet number;                */
/*                                               */
/*             A WimpRedrawWindowBlock pointer,  */
/*             if in a redraw loop (can be NULL  */
/*             if not in a redraw loop).         */
/*************************************************/
d1081 24
a1104 28
/*************************************************/
/* redraw_draw_placeholder()                     */
/*                                               */
/* Redraws a slabbed in place holder (unless the */
/* item is very small, in which case just at     */
/* thin black border is plotted) for a given     */
/* token, with optional text inside.             */
/*                                               */
/* Parameters: A pointer to a browser_data       */
/*             structure relevant to the redraw; */
/*                                               */
/*             A WimpRedrawWindowBlock pointer,  */
/*             with window area and redraw       */
/*             rectangle details filled in;      */
/*                                               */
/*             Pointer to a BBox in which xmin   */
/*             and ymin hold the screen coords   */
/*             for the bottom left hand corner,  */
/*             and xmax and ymax hold the width  */
/*             and height of the placeholder in  */
/*             OS units;                         */
/*                                               */
/*             Pointer to the HStream struct the */
/*             placeholder is to represent;      */
/*                                               */
/*             Pointer to a null-terminated      */
/*             piece of to plot inside, or NULL. */
/*************************************************/
d1282 28
a1309 33
/*************************************************/
/* redraw_draw()                                 */
/*                                               */
/* The main browser redraw engine.               */
/*                                               */
/* Parameters: A pointer to a browser_data       */
/*             structure relevant to the redraw; */
/*                                               */
/*             A WimpRedrawWindowBlock pointer,  */
/*             with window area and redraw       */
/*             rectangle details filled in;      */
/*                                               */
/*             1 to plot no backgrounds at all,  */
/*             else they will be shown;          */
/*                                               */
/*             0 for normal redraw, else pointer */
/*             to a token where no content is to */
/*             be drawn - only the elements that */
/*             are needed to indicate selection  */
/*             should be shown. This is used     */
/*             mostly for things like removing   */
/*             borders around images; if bits of */
/*             the image have to be redrawn this */
/*             can make the removal slow. Only   */
/*             one token is allowed as any       */
/*             adjacent images must be redrawn   */
/*             if the border was plotted over    */
/*             them, or redraw anomalies will be */
/*             seen as 'holes' are left behind.  */
/*             There is some intelligence to     */
/*             give different behaviour if       */
/*             selecting or deselecting things.  */
/*************************************************/
d1344 45
a1388 53
/*************************************************/
/* redraw_draw_r()                               */
/*                                               */
/* MAINTENANCE WARNING - ANY ALTERATIONS HERE    */
/* WILL NEED ECHOING IN PRINT_FAKE_REDRAW IF IN  */
/* AN ANALOGOUS CODE SECTION.                    */
/*                                               */
/* Recursive back-end to redraw_draw.            */
/*                                               */
/* Parameters: 1 for a top level call, else 0 if */
/*             being called recursively;         */
/*                                               */
/*             X origin for plotting (window     */
/*             coords);                          */
/*                                               */
/*             Y origin for plotting (window     */
/*             coords);                          */
/*                                               */
/*             A pointer to a browser_data       */
/*             structure relevant to the redraw; */
/*                                               */
/*             Pointer to a reformat_cell struct */
/*             holding the lines and chunks to   */
/*             redraw;                           */
/*                                               */
/*             A WimpRedrawWindowBlock pointer,  */
/*             with window area and redraw       */
/*             rectangle details filled in;      */
/*                                               */
/*             1 to plot no backgrounds at all,  */
/*             else they will be shown;          */
/*                                               */
/*             0 for normal redraw, else pointer */
/*             to a token where no content is to */
/*             be drawn - only the elements that */
/*             are needed to indicate selection  */
/*             should be shown. This is used     */
/*             mostly for things like removing   */
/*             borders around images; if bits of */
/*             the image have to be redrawn this */
/*             can make the removal slow. Only   */
/*             one token is allowed as any       */
/*             adjacent images must be redrawn   */
/*             if the border was plotted over    */
/*             them, or redraw anomalies will be */
/*             seen as 'holes' are left behind.  */
/*             There is some intelligence to     */
/*             give different behaviour if       */
/*             selecting or deselecting things.  */
/*                                               */
/* Assumes:    Pointers to items may NOT be NULL */
/*             unless explicitly stated above.   */
/*************************************************/
@


1.40
log
@Header and footer support working a lot better than in the previous
release. Could do with some code tidying, but little else to do.
Fixed a typo in JavaScript.c that stopped debug builds compiling,
and updated Trace.c to know about all current HStream flags bits.
@
text
@d81 3
a83 1
/* Used for printing */
d277 8
a288 4
    /* If tokens are selected, return the appropriate colour */

    if (redraw_selected(b, t)) return (b->use_source_cols ? b->selected_colour : choices.selected_colour);

a1626 6
              /* However, for large lines - e.g. very big images, tables,  */
              /* or lines taller than the whole page - we either should,   */
              /* or in the latter case must, split that line. So, if the   */
              /* line is taller than 1/PrintSplitFraction of the page      */
              /* height, will indeed be split over the page boundary.      */
              /*                                                           */
d1631 11
a1641 27
              if (osyorg + d->ldata[l].y < page_bottom)
              {
                if (d->ldata[l].h <= ((page_height * 100) / PrintSplitFraction)) /* (See Print.h) */
                {
                  HStream * t1 = d->cdata[d->ldata[l].chunks].t;

                  r->xscroll = osyorg + d->ldata[l].y + d->ldata[l].h;

                  /* Possibly store inferred section */

                  if (
                       choices.print_page_break_hx > 0 &&
                       reformat_istext(t1)             &&
                       redraw_header(t1->style) > 0    &&
                       redraw_header(t1->style) <= choices.print_page_break_hx
                     )
                     redraw_read_section(b, t1);

                  return NULL;
                }

                /* The effective 'else' case here has to be handled at the end */
                /* of printing, or you've just scrolled the page a long way to */
                /* right...                                                    */
              }

              /* The unusual one-off case where the line exactly fits on the page */
d1643 1
a1643 4
              else if (
                        osyorg + d->ldata[l].y == page_bottom &&
                        l + 1 < d->nlines
                      )
d1645 1
a1645 3
                HStream * t1 = d->cdata[d->ldata[l + 1].chunks].t;

                r->xscroll = osyorg + d->ldata[l + 1].y + d->ldata[l + 1].h;
d1647 1
a1647 9
                /* Possibly store inferred section */

                if (
                     choices.print_page_break_hx > 0 &&
                     reformat_istext(t1)             &&
                     redraw_header(t1->style) > 0    &&
                     redraw_header(t1->style) <= choices.print_page_break_hx
                   )
                   redraw_read_section(b, t1);
a1650 111

              /* Trying to get clever now. Here we look one line ahead, and see if */
              /* this line would fall off the page. If so, then should we allow it */
              /* to get seperated from the current line, or should we put *both*   */
              /* onto the next side? (Above caveat on fraction of page height of   */
              /* the line we're looking ahead to applies).                         */

              if (
                   (l + 1 < d->nlines)                                               &&
                   osyorg + d->ldata[l + 1].y < page_bottom                          &&
                   (d->ldata[l + 1].h <= ((page_height * 100) / PrintSplitFraction))
                 )
              {
                HStream * t1 = d->cdata[d->ldata[l].chunks].t;
                HStream * t2 = d->cdata[d->ldata[l + 1].chunks].t;

                /* If current line is a heading and next line isn't, or current line */
                /* is a definition list term (heading) and the next line is data,    */
                /* then don't split up the two lines.                                */

                if (
                     reformat_istext(t1) &&
                     (
                       (
                         ((t1->style & H_MASK) != 0) &&
                         (
                           (t2->style & H_MASK) == 0 ||
                           !reformat_istext(t2)
                         )
                       )
                       ||
                       (
                         reformat_istext(t2)     &&
                         ((t1->style & DT) != 0) &&
                         ((t2->style & DD) != 0)
                       )
                     )
                   )
                {
                  r->xscroll = osyorg + d->ldata[l].y + d->ldata[l].h;

                  /* Possibly store inferred section */
                  /* Possibly store inferred section */

                  if (
                       choices.print_page_break_hx > 0 &&
                       reformat_istext(t1)             &&
                       redraw_header(t1->style) > 0    &&
                       redraw_header(t1->style) <= choices.print_page_break_hx
                     )
                     redraw_read_section(b, t1);

                  return NULL;
                }
              }

              /* There's also a case for look-behind. If this line is heading 1 or 2 */
              /* and the previous wasn't, start a new page here.                     */

              if (l > 0 && choices.print_page_break_hx != 0)
              {
                int       scan = l - 1;

                HStream * t1   = d->cdata[d->ldata[scan].chunks].t;
                HStream * t2   = d->cdata[d->ldata[l].chunks].t;

                int       h1;
                int       h2;

                if (reformat_istext(t2))
                {
                  /* The previous line might not be useful (e.g. two H2s in a row */
                  /* would have a dummy tag in between occuping a zero height     */
                  /* line of its own). So we need to scan backwards to get a      */
                  /* useful token.                                                */

                  while (
                          t1 != NULL &&
                          (
                            reformat_istext(t1) &&
                            t1->text == NULL
                          )
                          && --scan >= 0
                        )
                        t1 = d->cdata[d->ldata[scan].chunks].t;

                  h1 = reformat_istext(t1) ? redraw_header(t1->style) : 0;
                  h2 = redraw_header(t2->style);

                  if (
                       osyorg + d->ldata[scan].y < wbox.ymax &&
                       osyorg + d->ldata[scan].y + d->ldata[scan].h <= wbox.ymax
                       &&
                       (
                         h1 > choices.print_page_break_hx ||
                         h1 == 0
                       )
                       && h2 <= choices.print_page_break_hx
                       && h2 > 0
                     )
                  {
                    r->xscroll = osyorg + d->ldata[l].y + d->ldata[l].h;

                    /* Store inferred section */

                    redraw_read_section(b, t2);

                    return NULL;
                  }
                }
              }
d1949 7
@


1.39
log
@Misecllaneous tweaks and fixes. Major addition is full header and footer
support in the printing system - see the Phoenix Choices file for more
information.

Only the Phoenix resources are up to date currently.
@
text
@d143 4
a146 3
          t2 != NULL             &&
          t2->tagno != TAG_TABLE &&
          redraw_header(t2->style) == h2
d1641 7
a1647 1
                  if ((t1->style & H_MASK) != 0 && choices.print_page_break_hx != 0) redraw_read_section(b, t1);
d1657 24
d1701 1
a1701 1
                     t1->tagno != TAG_TABLE &&
d1705 4
a1708 1
                         ((t2->style & H_MASK) == 0)
d1712 1
d1722 1
d1724 7
a1730 1
                  if ((t1->style & H_MASK) != 0 && choices.print_page_break_hx != 0) redraw_read_section(b, t1);
d1749 1
a1749 1
                if (t2->tagno != TAG_TABLE)
d1757 6
a1762 4
                          t1->tagno != TAG_TABLE &&
                          !t1->text              &&
                          scan >= 0              &&
                          --scan
d1766 1
a1766 3
                  if (t1->tagno == TAG_TABLE) h1 = 0;
                  else                        h1 = redraw_header(t1->style);

d1770 2
a1771 6
                       (
                         t1->tagno == TAG_TABLE ||
                         t1->text
                       )
                       && osyorg + d->ldata[scan].y < wbox.ymax
                       && osyorg + d->ldata[scan].y + d->ldata[scan].h <= wbox.ymax
d3108 5
a3112 1
    #ifdef ANTI_TWITTER
d3114 2
a3115 5
      if (!printing && toplevel) anti_twitter(r);

    #endif

    if (!printing && toplevel) wimp_get_rectangle(r,&more);
@


1.38
log
@New overview document in Docs, requested by some Pace people.

Printing engine will attempt not to seperate headings from non-heading
items. If the current line is a heading and the next is not, and falls
off the bottom edge of the paper, then both lines will be carried over
to the next page. Similarly for DT and DD items. Maximum line height to
push rather than split is now altered to 2/3 of page height (was 1/2).

JavaScript fix; a URL's "protocol" value should include a ':' at the end.
@
text
@d15 14
a28 9
/***************************************************/
/* File   : Redraw.c                               */
/*                                                 */
/* Purpose: Redraw functions for the browser.      */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 29-Nov-96: Created.                    */
/***************************************************/
d74 6
a79 4
static void redraw_input_field (browser_data * b, HStream * t, BBox * box, int colour, int menu);
static void redraw_button      (browser_data * b, HStream * t, BBox * box, int in);
static void redraw_switch      (browser_data * b, HStream * t, int x, int y, char * spr, WimpRedrawWindowBlock * r);
static void redraw_bullet      (int x, int y, int bullet, WimpRedrawWindowBlock * r);
d91 14
a104 9
/*************************************************/
/* redraw_header()                               */
/*                                               */
/* Returns the header type (<H1>, <H2> etc. as   */
/* a number from 1 - 7) extracted from the flags */
/* bits of an HStream structure.                 */
/*                                               */
/* Parameters: The 'style' field of an HStream.  */
/*************************************************/
d116 52
d1366 4
d1457 4
a1460 1
    sbox.ymin -=  2, sbox.ymax +=  2;
d1607 1
a1607 1
            if (printing == 1 && toplevel)
d1634 2
d1637 5
d1661 92
a1752 24
               {
                 HStream * t1 = d->cdata[d->ldata[l].chunks].t;
                 HStream * t2 = d->cdata[d->ldata[l + 1].chunks].t;

                 /* If current line is a heading and next line isn't, or current line */
                 /* is a definition list term (heading) and the next line is data,    */
                 /* then don't split up the two lines.                                */

                 if (
                      (
                        ((t1->style & H_MASK) != 0) &&
                        ((t2->style & H_MASK) == 0)
                      )
                      ||
                      (
                        ((t1->style & DT) != 0) &&
                        ((t2->style & DD) != 0)
                      )
                    )
                 {
                   r->xscroll = osyorg + d->ldata[l].y + d->ldata[l].h;
                   return NULL;
                 }
               }
d2956 1
a2956 1
                 printing == 1 &&
d2984 1
a2984 1
      /* Closure of long 'if' checking if d->stream was not NULL. */
@


1.37
log
@Long overdue check-in of intermediate browser build, from continued "out
of hours" work. Forgot to add a few files last time too.

List dialogue box handler complete, and exclusion lists implemented
within the main browser code. Full documentation in Choices file.
Save routine knows all about it but is now getting very slow - must
come up with a better scheme; for now, it puts the hourglass on...

StripExtensions option controls auto stripping of filename extensions.

More sensible ancestor / frame selection for keyboard shortcut items
and the save dialogues - having selected a frame won't lock you into
it for F3 and related shortcuts now (input focus in URL writable ->
get ancestor details, input focus in frame -> get frame details). F4
works in frames. F5 now generally present for 'view source' with a
corresponding menu entry in the File menu.

Odd thing in later Res files; there's no action set for Adjust clicks
on the main ToolAction items in the button bar. Very odd. Nothing
appears to be set in v2.07 either, yet adjust-click works. Even
stranger. Anyway, added in the relevant event details (same as for
Select click in all cases) and this fixes the problem.

Background colours in the TABLE tag ignored the "don't print any
backgrounds" Print Style setting. Fixed. Meanwhile, the "black
text with no backgrounds" option wasn't getting this right either;
fixed this also.

Event logging implemented; HTTP errors and script output via.
window.print extension. No internal error output yet.

Faith:Never behaviour extended. If ever a server sends something with
no content type or an unhandleable type, the browser will try and get a
filetype from the URL. If it gets text or HTML, it'll render the file.
Else it'll save it. Hacks around IIS 4's lack of a content type field
in the Marketeye login stuff, and similar other slightly broken sites.
@
text
@d1561 1
a1561 1
                if (d->ldata[l].h <= page_height / PrintSplitFraction) /* (See Print.h) */
d1571 36
@


1.36
log
@Intermediate check-in; building a browser from this gives you something
between 2.07 and 2.08. Only the Phoenix JavaScript resources are fully
up to date.

I *think* these are the changes since the last check-in:

When saved as a Draw file, horizontal rules were plotted one page width
too far to the right (wonder when that started happening?!). Fixed. In
addition, DrawFiles now accepted as OBJECTs - they weren't in the
recognised filetype list before. Doh.

Table size calculator tables_count_table would overestimate the number
of cells where ROWSPAN was present and there were other rows below the
one spanned. Fixed. In certain odd cases (e.g. optimised image exports
as HTML tables (!!) from the Gimp) this can save vast amounts of RAM.

Fixed problem where printing stops in the middle of a document. Redraw
engine pagination code was written in the days where lines couldn't
have gaps between them; they can now. If a gap fell at the bottom of
a page the engine would look down, see no line straddling or touching
the page edge, and assume there was nothing more. This case is now
correctly handled.

Made sure desktop and testbed Browse Res files had up-to-date Encoding
menus (v2.07 Phoenix has different menus from v2.07 Browse by oversight).

URL auto-completion piggy-backed onto manual completion code; any string
without '.', '/' or ':' in it gets run through completion to see if a
more meaningful item can be produced - "www" special cased out though.

New List dialogue box handler, used for proxy exclusions etc.
(incomplete), complete with appropriate Res file objects.
@
text
@d195 8
a202 2
    if (printstyle_always_use_black())                  return Redraw_Colour_Black;
    if (printstyle_black_no_background() && use_noback) return Redraw_Colour_Black;
d1754 1
a1754 1
                      if (TABLE_HAS_BGCOL(table))
@


1.35
log
@Tweaks to export rules in Makefile - ResJ source for JavaScript builds,
all of User dir exported, resources rule exports About as well as User.

Handles images with a width or height of 0 specified in the HTML.
Previously went for a default size placeholder and changes to image
sizes and/or redraw problems could occur before/after subsequent
reformatting (involved trivial changes to image_get_image_size and
image_redraw_area only).

Default parameter HRs now plot properly in rectangular pixel modes.

Choices code updated to cope with the minimum font size, JS support,
watchdog on/off and timeout, Navigator object option added generally
(act even *more* like Navigator), image GC after fetch, and image
GC unused image / free RAM constraints.

Code in JSnavigator.c updated to obey new "act more like Navigator"
option (see above). Currently declares itself as version 3.0.

Resources for all builds are up to date. All links in default hotlist
verified and corrected where necessary, with several new links added.

This is Release v2.07. Not tested very much, sorry; YMMV.
@
text
@d2763 3
a2765 1
            /* For printing, tell the print routines where we were up to */
d2769 1
a2769 2
                 toplevel      &&
                 osyorg + d->ldata[l].y < page_bottom
d2771 16
a2786 1
               r->xscroll = osyorg + page_bottom;
@


1.34
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d1055 4
d2542 1
a2542 1
                    if (h == 4)
@


1.33
log
@All !Run[D], Choices, Messages, Controls and Res files are up to date.

RefoKeep and RefoHold options added to, respectively, try and maintain
the line at the top of the visible area when reformatting, and not shrink
the vertical extent at the start of a reformat to try and avoid flicker
to the top of the page and back down again when RefoKeep is on. Choices
front-end implemented, which also allows RefoWait and RefoTime to be set.
Unfortunately for various reasons this doesn't help the page jumping when
unsized images come in (but RefoHold can improve matters...) - roll on
the image history.

DragToScroll and NoScrollBars options added for frames; included new
pointer type, Mouse_Shape_DTS, so relevant Controls file entries done
and Sprites[22] files updated as required. Noticed some builds have
a low-res ptr_link with a mask - mask removed.

Named anchor following fixed up somewhat - anchors near the bottom of
the page shouldn't be displayed, and then pulled down when the fetcher
releases null polls and ensures the y extent is correct (this through
implementing the min_height field in the browser_data structure).

RefoHang was never implemented and there seems little point to it now,
so the entry for it has been removed from the global choices structure
and all Choices files.

Markers menus should work properly now (in last check-in they would not
update correctly if Adjust was used on the entries).

URI handler usage now a lot more sensible, with configuration of how the
browser uses the module from both a Utils menu submenu (sic) and the
Choices dialogue.

Slightly dodgy 'hang around waiting for user input' stuff for the Cookies
dialogue box: All fetches are suspended; the fetcher remembers some info
about its state at the time the cookie came in, and restores it later; it
will only do this for one fetch at a time. It's necessary to single-thread
the fetcher at this point anyway, since other fetches may have a
dependency on the cookie that is hanging in mid-air at that point. As part
of this, some of the fetcher code has been split out into separate
functions (to try and 'black box' the code a bit). Anyway, Cookie Query
dialogue box now implemented with appropriate Choices file entry and
UI work in the Choices dialogue box.

Phoenix build Choices rearranged. Can now choose when the image history
is saved from the front end. Added also MSIE 4-style table option menu
for JPEG support (OS only, OS if it can handle it, internal only).

Should be a bit faster at loading the history - though 95% of the time
is spent in SWI URL_ParseURL. URL descriptions are stored more
efficiently as part of this - one malloc block instead of several
small blocks. The minimum block size for malloc blocks typically leads
to a significantly smaller startup wimpslot depending on the visit
history size.

Nasty bug in image system fixed. If an image size came in and a reformat
was to take place, the line the image lies in is found and the reformat
progresses from there. Unforunately, this didn't check to see if the
token can't be found in the line list, so it'd reformat from the top
of the page...! This would happen if, for example, an image halfway down
the page came in whilst a reformat for an image higher up had just begun.

In Choices.c, made choices_set_timetype_field, choices_set_uri_field,
choices_set_plugin_field, choices_set_cookie_field, and
choices_set_jpeg_field static (so they're not declared in Choices.h now).

Two memory leaks plugged in URL comparison routines in URLutils.c
(calling free() url_description instead of urlutils_free_descripton()).

Client pull reload handler was setting the reload flag if reloading
the same page, but forgetting to turn on reload_lock so
fetchpage_postprocessed was clearing the reload state... Similarly,
Ctrl+Shift+SELECT-Click on a link when the Controls file 'UseSmall'
entry is 'no' would not have reloaded as it should. Both fixed.

Frames shouldn't be so keen on acquiring horizontal scroll bars and never
letting them go when their width is decreased now. Frames set up for
'scrolling="yes"' will not start with no scroll bars and then gain them
shortly afterwards, causing flicker and two reformats - they'll start
with, and continue to hold, both scroll bars.

Pointer shouldn't flicker when over a frame border whilst other fetches
are progressing now.
@
text
@d91 1
a91 1
/* Parameters: The flags word.                   */
d1052 2
a1053 1
  BBox ph = *holder; // In case we want to adjust it later, e.g. for H/VSPACE
d1057 1
a1057 1
  if (ph.xmax > 8 && ph.ymax > 8)
d1094 7
d1170 4
a1173 4
    fbox.xmin = ph.xmin + 8;
    fbox.xmax = ph.xmin + ph.xmax - 9;
    fbox.ymin = ph.ymin + 8;
    fbox.ymax = ph.ymin + ph.ymax - 9;
d2359 8
@


1.32
log
@The '3F6C0' abort fixed; reformat_left_margin didn't cope with a NULL
cell pointer. This only happened if the image library tried to deal with
an image in a table cell which wasn't properly dealt with by the table
systems yet, for whatever reason. Rare, but persistent once it started
happening because it depended on the value of the FIQ vector!

Put function header comments in SaveFile.c, at last.

Messages files now read version 2.01, 23 Feb 1998.
@
text
@a394 1
//  else           return 0; /* No margin on table cells - cellpadding/spacing handled separately by reformatter */
@


1.31
log
@Check for WindowManager 3.97 and ensure Unicode$Path is set in all
!Run[D] files, don't set the Alias$@@PrintType_FF4 variable, and updated
Customer build ROM obey file variants. Various other changes to
the Run files for new module versions, updated paths to support
new positions of choices, hotlist and histories (see later), etc.

!Sprites[22] files hold small !app icons for some variants, and
an ic_browse sprite. Some variants now have a Sprites and Sprites22
file instead of just Sprites, with the former containing various
mode 12 or 15 specific sprites.

Text files dragged to the URL writable are treated as ANT URL files. This
relies on URLBarWrit (Toolbars.h) being a unique ID, which it should be,
but beware of the Hotlist and Choices numberspaces...

INPUT TYPE=BUTTON supported. Form items without a FORM tag are now shown
(as MSIE 4, but not NN 4).

'*', '-', '@@', '_' and '.' are not escaped when submitting forms now. The
Web interface to the IMDb now works.

INPUT TYPE=HIDDEN items will not affect the line height anymore - so
http://www.hotmail.com/ now has correctly aligned writable icons, for
example. Similarly, TAG_FORM and TAG_FORM_END items could push up
line height and don't anymore.

HRs with a specified pixel width will now influence the size of a table
cell (they didn't before).

BRs now checked by tagno field when the browser needs to know something
was an actual BR tag rather than just a line break signal, and by the
style bit entry when only the indication of a line break is required.

Table widths of 0 or 0% are ignored.

Trace.c updated to report height and background fields in a table_stream.

fm_putsl() writes a terminator into the string; the Forms.c routines were
calling this for displaying INPUT TYPE=PASSWORD fields using the FE_PassCode
literal string (a line of stars). This write into a read only data area
would make the debugger fault the access. A local char array is now used
instead, to get round this (note the use of var[]=literal rather than
var[sizeof(literal)]; strcpy(var, literal) due to some weird compiler bug
that copies the wrong thing into 'var' under some (undefined...)
circumstances).

Text areas don't scroll back to the top line when clicked in anymore;
single line writables don't scroll back to the left either. When
reentering a text area from 'above', the caret appears at the top line
rather than 'somewhere further down'...

ARROWS_MOVE_OUT compile time option at the top of Forms.c defines whether
you must press Tab/Shift+Tab to move between writable fields in forms or
if up/down will drop out of them, though if keyboard control is on this
is enforced (or you get trapped inside the form!).

urlutils_filetype_from_url now uses MimeMap module.

If fetcher is told a page is text, it'll check for a filename extension and
may choose to use this instead (e.g. it may find it's HTML instead). This
is to try and get around duff servers... (e.g. http://www.batalarms.co.uk/).

Save dialogues shouldn't flicker when options that don't change the
filetype are selected (before, the draggable sprite was always reset for
each selection). Noticed the erroneous setting of a static variable in
SaveFile.c by a call to this by SaveObject.c, and so added a flag to
savefile_set_filetype to deal with this - would have been possible to get
the wrong filetype sent to applications or at best the wrong filetype
sprite in the dialogue without that.

The caret shouldn't jump out of a form back to the URL writable if the page
reformats now.

Table background colours now supported (as in the colour you see in the
border space if the cellspacing is large enough; this is as in MSIE, not
as in Navigator). Drawfile output routines updated accordingly.

Corrected erroneous use of wimpt_dx() / wimpt_dy() in a couple of places
in Images.c, which meant that (say) 1x1 images didn't work correctly in
medium resolution display modes.

Now have support for save as text (component ID and event 0x12) and save
as Draw (component ID and event 0x13) buttons. Dubious conditions for
greying and ungreying the print, save source and view source buttons and
menu options sorted out as part of implementing the same for the two new
buttons; added greying out of their associated menu items in passing.

Turned kerning on in draw file objects (does mean a rather heinous
increase in file size, but this is the only way to ensure the draw file
matches the visible page).

Comments before functions in SaveDraw.c are now complete and up to date.

Image and visit histories now generate a crude hash number to speed up
searching for items. It does give a speed increase, though it's a
disappointingly small one.

Issue of left/right margins and cellpaddings sorted out. Now have
redraw_left/right_margin for finding out the basic gap you must leave.
redraw_left/right_gap then gives any extra indentation for LI, BLOCKQUOTE
or whatever. The last two can be subtracted from the display width to
get an available page width for any section of text. Note that
redraw_left_gap replaces redraw_margin. The redraw_start_x function
uses the above to work out where a line's left hand edge should be,
taking account of left/right/centre alignment. HRs have been fixed now
(they were quite broken in v1.30, I think) based on this new model and
the behaviour of MSIE/NN 4.

Fixed width of cells with no contents - cell padding values wouldn't
have worked properly as the reformatter returns 0 rather than the left
hand margin size if given no stream.

Removed FM_Absolute flags for Font_Paint (spotted by DBrown) - sets bit
2, which is reserved...?

IMG width and height in % terms now works correctly; a % of available
width (after margins and indents) or height on the main page or for
a table cell, if the image lies in one. Because of the chicken-and-egg
problem with the latter, the cell must specify a width and/or height
for things to work properly. If this is not done, you'll usually end
up with a 1:1 scaled image (as in Navigator 4, rather than ending up
with no image or even no cell (!), as in MSIE 4).

HEIGHT attribute on a TABLE tag is supported, but only in a crude
fashion; the extra height (if there is any) is distributed over the
rows in a linear fashion. This is probably all you have to do in
practice, but I haven't checked. To maintain a notion of min/max
height as well as width would of course require a great deal more
work...

If using client pull to reload a page with a fragment ('...#name')
specified, then the reload wouldn't work on the same page; it'd just
jump to the fragment position. This won't happen if b->reloading is
set now (so works in conjunction with client pull on the same page
forcing a non-cached fetch). Similarly, if POSTing to such a URL,
a fetch will proceed (both these fixes done originally for
http://jupiter.beseen.com/chat/rooms/g/1678/).

browser_inherit split to browser_inherit and browser_inherit_post_data;
the code for the latter didn't clear any post_data in the child before
copying from the parent either, and could cause flex errors (now fixed).

Res file for Ursula ('Desktop' Browse) build tweaked - bits in the
font choices dialogue renamed, and button bar rearranged to hold the
new Save As Draw button. Other builds have had Save As Draw and
Save As Text buttons added, or not, depending upon availability of
suitable sprites, required UI simplicity, etc.

Now have:

  Browse$ChoicesFile
  Browse$ControlsFile
  Browse$ChoicesSave
  Browse$ControlsSave

(the last two are new) for loading and saving of the Choices or Controls
files. If unset, <App$Dir>.Choices or <App$Dir>.Controls will be set.
E.g., you could set Browse$ChoicesFile to be:

  <App$Dir>.Choices,Choices:WWW.(app).Choices

for loading and

  <Choices$Write>.WWW.(app).Choices

for saving. (The browser never saves Controls at the moment, so the
relevant variable above isn't effectively implemented, but could be
in future). Similarly, to support asymetric loading/saving of the Hotlist,
there are HotlistSave, HistorySave and ImageHistorySave entries in Choices
to complement HotlistPath, HistoryPath and ImageHistoryPath (which are used
for loading). save_save_choices will create directories as needed to obtain
the given path (and has also been fixed in various areas that hadn't been
tested out until now; e.g. zero termination of the AppName$ChoicesFile
variable expansion...). !Run[D] files updated appropriately.

Table widthing code rewritten. Slower, but a lot better on the whole.
Still has some problems - still needs a final 'make sure nothing is
below minimum width' scan, which it should be possible to do without.
No time to fix this at present!

The reformatter will now 'glue together' an LI token followed by any
non-LI token; so a bullet point followed by an item should not be able to
have a line break inserted after the bullet because of very tight width
constraints (it could before - yuk...).

'about:' brings up a page about the browser and any Plug-Ins, as with
Navigator (for example).

URI files support titles, as per spec. version 8. Saving a current
location to the Hotlist will thus give a sensible title now (unless
you're in a frame, so there's no title to get...). Of course, v1.00
files without a title still work.

Note that NOBR is *not* supported in this build and this combined with
the new table widther may cause problems on some sites (e.g. Microsoft's
home page!).
@
text
@d353 1
a353 1
  if (!d->table) return b->left_margin;
d384 1
a384 1
  if (!d->table) return b->right_margin;
d538 1
a538 1
  int x, cn = cell->ldata[line].chunks;
d541 4
d617 2
d677 2
d1327 3
@


1.30
log
@Not all resources are up to date in this check-in, and documentation
both within source and stuff in 'Docs' is out of date or missing - I
was very pushed for time on this one... Hopefully will do another
'tidy up' check-in before close on Friday; until then, beware of
anything other than the Ursula (Desktop browser) build. Anyway...

Export As Draw done. As part of this, FONT SIZE and SUP / SUB adjustment
of font size is done in fm_token_font_info rather than fm_find_token_font.

Bullets and switches are plotted as indirected sprite items, rather than
indirected text + sprite items - this relied on being in a redraw loop to
pick the sprites up from the local pool (failed during printing).

URI files now have a LF line ending rather than CR... '*' recognised
as an empty field when loading via. RAM transfer now (only worked for
loading from disc before).

Gave placeholder bounding boxes 4 OS units more minimum extra gap
vertically and reduced horizontal addition to this value * 1.5, rather
than * 2 (see reformat_get_placeholder_size).

Background image tiling starts at ymax - h + 4, rather than ymax, so
there isn't the bottom line of pixels from the top tile always present
at the top of the window. The '+4' is for caution's sake.

Can now save a frame's HTML source, that of its parent or its ancestor,
and the same for the URI pointing to those documents - see Menus.h for
the relevant component IDs that should lead to the SaveFile dialogue.

Have hopefully fixed timeout = 0 values (i.e. 'forever') on things
like LinkTo; before, image fetches could override the state (so you'd
only ever see brief flickers of a given URL as the pointer went over
a link).

Save File dialogue will remember the state of option or radio buttons
for a given parent component origin and restore that state when the
dialogue is next opened from the same place (stops turning on saving
as a URL file also turning on 'save background images' for Draw file
export, etc.).

Use of a META tag to reload the *same* page now sets the 'reloading'
flag in the browser so that it doesn't go through a proxy - otherwise
pages which are meant to update periodically through client pull
don't work, as they keep coming out of the cache.

Can now handle images specifying just a width or height in the HTML
(other dimension is scaled accordingly, but note that the placeholder
size must still be 'dumb' until the image data comes in). An image
will now override an image history size entry for the same entry
with a different size.
@
text
@d286 1
a286 1
  if (!d->table) return b->display_width;
d316 1
a316 1
  if (!d->table)
d318 4
a321 1
    int htop, hbot;
d323 1
a323 13
    /* Find the toolbar heights */

    htop = toolbars_button_height(b) + toolbars_url_height(b);
    hbot = toolbars_status_height(b);

    if (htop) htop += wimpt_dy();
    if (hbot) hbot += wimpt_dy();

    /* Subtract those plus leading * 2, for safety - don't */
    /* want a single 100% height object to make the page   */
    /* scroll vertically!                                  */

    return b->display_height - htop - hbot - b->leading * 2;
d385 11
a395 1
  else           return 0; /* No margin on table cells - cellpadding/spacing handled separately by reformatter */
d399 1
a399 1
/* redraw_margin()                               */
d403 3
d421 1
a421 1
int redraw_margin(browser_data * b, reformat_cell * d, HStream * t)
a427 9
//  if (redraw_header(s)) return i + redraw_left_margin(b, d);
//
//  /* Indent more depending on the header type, if the */
//  /* HStream represents a header.                     */
//
//  if (redraw_header(s) == 1 || redraw_header(s) == 2) return (i + 4);
//  if (redraw_header(s) == 3)                          return (i + 16 + 4);
//  if (redraw_header(s) == 4 || redraw_header(s) == 5) return (i + 32 + 4);

d449 1
a449 2
      if (!e)
          i -= width;
d453 1
a453 1
       int bullet_width;
d455 1
a455 1
       /* Outdent the bullet */
d457 1
a457 1
       convert_to_points(reformat_bullet_width(t->indent), &bullet_width);
d459 1
a459 1
       i -= bullet_width;
d463 1
a463 2
  /* Add an amount for block quote or address text; the */
  /* constants are defined in HTMLLib:tags.h            */
d467 2
a468 2
  /* Return a general indent based on the total summed so */
  /* far plus an extra amount for lists etc.              */
d476 36
d518 1
a518 1
/* centre positioning of lines.                  */
a540 5
  /* If the chunk is a horizontal rule, want to be able to have this */
  /* starting at the far left hand edge.                             */

  if (t->style & HR) return 0;

d550 2
d561 3
a563 1
    /* For centred objects, divide by 2 to get the indent in millipoints */
d565 3
a567 1
    if (align == 1) x /= 2;
d571 1
a571 1
    if (x < 0) x = redraw_left_margin(b, cell);
d580 1
a580 1
  convert_to_os(redraw_margin(b, cell, t), &x);
d645 3
a647 1
/* which a specific chunk should be drawn.       */
d1636 3
a1638 3
                    BBox             rbox; /* Redraw box - i.e. the cell BBox in window coordintes */
                    BBox           * ibox; /* Used for intersection between cell BBox and current graphics rectangle */
                    BBox             tbox; /* Used to plot the table outer border */
d1641 2
a1642 2
                    int              cellcount  = 0;
                    int              cellmax    = table->ColSpan * table->RowSpan;
d1649 4
a1652 1
                    /* Only proceed if there are table cells to redraw */
d1656 95
a1750 1
                      row = table->List;
d1770 1
a1770 1
                                  if (tl & (1u<<20)) Printf("redraw_draw call: %d %d\n", keepx + cell->x,keepy + cell->y);
a1897 7
                                  /* Update the table bounding box as required */

                                  if (cx      < tbox.xmin) tbox.xmin = cx;
                                  if (cy      < tbox.ymin) tbox.ymin = cy;
                                  if (cx + cw > tbox.xmax) tbox.xmax = cx + cw;
                                  if (cy + ch > tbox.ymax) tbox.ymax = cy + ch;

a2000 7
                        /* tbox doesn't take account of cell spacing */

                        tbox.xmin -= table->cellspacing * 2;
                        tbox.ymin -= table->cellspacing * 2;
                        tbox.xmax += table->cellspacing * 2;
                        tbox.ymax += table->cellspacing * 2;

d2245 1
d2455 1
a2455 1
                  int w, h, available, ox, rmarg, lmarg, oy = 0;
d2459 1
a2459 3
                  available = redraw_display_width(b, d);

                  /* Work out margins */
d2461 1
a2461 34
                  lmarg = redraw_margin(b, d, tp);

                  if (tp->style & BLOCKQUOTE) rmarg = lmarg;
                  else                        rmarg = redraw_right_margin(b, d);

                  convert_pair_to_os(lmarg, rmarg, &lmarg, &rmarg);

                  /* Left margin already takes account of cellpadding in tables, */
                  /* but right margin doesn't; so we need to do that now.        */

                  if (d->table) rmarg += d->table->cellpadding * 2; /* 1 'web pixel' = 2 OS units */

                  /* In (for example) Netscape Navigator (TM), a 100% width HR */
                  /* will only span between the left and right margins. So     */
                  /* want to reduce apparent available space by this amount.   */

                  available -= (lmarg + rmarg);
                  if (available < 0) available = 0;

                  /* Deal with a width specifier */

                  if (HR_HAS_WIDTH(tp))
                  {
                    /* Currently recognise pixels and percentages */

                    switch (HR_WIDTH_UNITS(tp))
                    {
                      case UNITS_PIXELS:  w = HR_WIDTH(tp) * 2;               break;
                      case UNITS_PERCENT: w = available * HR_WIDTH(tp) / 100; break;

                      default: w = available; break;
                    }
                  }
                  else w = available;
d2499 1
a2499 5
                  if (HR_ALIGN(tp) == ALIGN_LEFT || w > available) ox = lmarg;
                  else if (HR_ALIGN(tp) == ALIGN_RIGHT)            ox = redraw_display_width(b, d) - rmarg - w;
                  else                                             ox = ((redraw_display_width(b, d) - w) >> 1);

                  ox = (coords_x_toscreen(ox + osxorg, r) &~1);
@


1.29
log
@Fixed some glitches in the modified status bar code (e.g. status inference
wasn't working properly).

Shift+Toggle size always opened to not obscure the icon bar. If CMOS is
set to always show the icon bar, then Shift+Toggle size is meant to
reverse sense and open to absolute full size. It now does this.

!Run[D] files now require URL 0.22, HTTP 0.64, FTP 0.22, Gopher 0.08
and File 0.32.

Minor overhaul of 'Docs.Notes' (with 'Docs.User' similarly updated) to
include a few new bits and pieces.

Timeout values of 0 now mean 'forever'. Plug-in status messages now have
their own timeout setting. New Messages token 'Actv' for extra info when
a status message times out and the status line drops to 'Viewing' or
'Ready' when there is still a Busy state registered by the Plug-in.

Small Fetch windows don't become visible briefly for Plug-in fetches
when the fetch is complete (for SeeFetches:no, where these windows
should be hidden all the time).

WebServe may be controlled through the Browse front-end via.
Wimp_MAppControl reason code 4 (Wimp_MAppControl_Configure). Note the
renaming internally of 'WebServ' or 'WebServe' has been changed to
'Proxy' (with lower case equivalents where relevant); proxy name
and starting details come from the Messages file 'ProxyName' and
'ProxyComm' tokens. More in 'Docs.Notes'.

Res files updated for image history and PRE/TT font aspect ratio
choices. 'Don't expire' labels changed to 'Expire' (oops, didn't
notice the change in the development Browse's Res file when I
updated all of the others until now...).

When printing, Wimp_PlotIcon appears to ignore R4 and R5, plots
'somewhere' on the page, and tries to get the sprite from the global
pool. This latter part normally causes an error to be raised; though
on my machine I just get a corrupted error message. The Desktop font
gets lost at this point too. All have yet to be fixed; as an
interim work around, Wimp_PlotIcon objects are never drawn at all
if the global 'printing' flag is set.
@
text
@d763 1
d842 1
a842 1
  int w,h;
a897 3
  char              validation[32];

  if (printing) return;
d907 2
a908 2
  icon.xmax = ox + w;
  icon.ymax = oy + h;
d912 5
a916 7
  sprintf(validation,"S%s\0",spr);

  block.bbox  = icon;
  block.flags = 0x1700311B;
  block.data.ist.buffer = "";
  block.data.ist.validation = validation;
  block.data.ist.buffer_size = 4;
d957 1
a957 3
  if (printing) return;

  sprintf(spr, "Sb%d\0", (bullet + bullets - 1) % bullets);
d959 1
a959 1
  if (read_sprite_size(spr + 1, &w, &h)) w = h = 32;
d963 2
a964 2
  icon.xmax = x + w;
  icon.ymax = y + h;
d968 5
a972 5
  block.bbox  = icon;
  block.flags = 0x1700311B;
  block.data.ist.buffer = "";
  block.data.ist.validation = spr;
  block.data.ist.buffer_size = 4;
d1313 1
a1313 1
    sbox = r->redraw_area; /* Set wbox to hold the redraw rectangle details */
d1433 1
a1433 1
            bbc_rectanglefill(sbox.xmin, sbox.ymin, sbox.xmax - sbox.xmin + 4,sbox.ymax - sbox.ymin + 4);
d1528 1
a1529 1
            x = coords_x_toscreen(0, r);
d1988 1
a1988 1
                if (tp->tagno == TAG_INPUT || tp->tagno == TAG_TEXTAREA || tp->tagno == TAG_SELECT)
d2087 2
a2088 1
                        block.flags = 0x1700311B;
d2090 4
a2093 3
                        block.data.ist.buffer = "";
                        block.data.ist.validation = "Sfgright";
                        block.data.ist.buffer_size = 4;
d2507 1
a2507 1
                      /* down a bit from that.                          */
a2575 2
                      /* Underline the item - set the colour, and start at the item's x coordinate... */

@


1.28
log
@Implemented Message_PlugIn_ReshapeRequest, Message_PlugIn_Status and
Message_PlugIn_Busy. Plug-in code more robust when given invalid
browser instance handles by the plug-in.

Line spacing is now calculated on the basis of the normal style base serif
font, with all other fonts being forced into that line height. This does
mean that an unusually tall (say) sans serif font may get clipped. It
appears to be the only way to get around wildly different baseline
depths returned from the font metrics - you can't work out line spacing
based on each different font style; the line spacing will vary.

Table heighting (as opposed to widthing...) improved considerably; rowspan
can no longer cause very tall cells in odd places. Having trouble getting
rid of the single pixel breaks between vertically adjacent cells, though
I've not tried too hard. Widthing, though, seems fairly badly broken at
present... :-/

Set/clear of page_is_text flag made more robust (it looked as though there
was the potential for this to get stuck in a set state, though I've never
see the front-end behave in a manner which indicates this is the case).
The reformatter will now decrease leading if this flag is set (plain text
pages look daft with a line spacing that is OK for 'rich' text pages).
No reformatting is done if the page width changes by dragging on the
resize icon, though toggle size / full screen will still reformat even
if the contents are only text (browser needs to sort out various width
flags at this point).

Cut down on excessive redrawing when reformatting due to a change in
window dimensions is not done. If display_width hasn't changed, then no
redraw is needed. If this causes redraw problems, then whatever is
changing display_width needs investigating. It shouldn't be kludged
(basically) by forcing a redraw instead of a reformat.

TT/PRE/etc. text can now have a non-100% aspect ratio. 80-90% looks
best (ArcWeb, for example, uses 86%). New option 'TTAspect' in
the Choices files.

Debug builds link to a non-debug Unicode library now; stops stderr
being dumped to the bottom left of the screen if you've not redirected
it in the Run file.

RISC OS 3.1 seems to need more initial WimpSlot than later OS versions.
The 64 deep nested table set gives a 'No stack for trap handler' error
(which it really means in this case!) without 800K, even though 3.71
is happy with just 640K. So, the !Run file checks if Boot$OSVersion
is exactly 300, 310 or 311, and sets the WimpSlot accordingly.

!Run[D] files now require latest fetcher module versions (URL 0.21,
File 0.31, HTTP 0.58).
@
text
@d899 2
d960 2
@


1.27
log
@Modified to use external Unicode resource directory and UnicodeLib.
@
text
@d444 1
a444 1
      h = fm_find_token_font(b, t);
d2007 1
a2007 1
                    fh = fm_find_token_font(b, tp);
d2140 1
a2140 1
                      fh = fm_find_token_font(b, tp);
d2483 1
a2483 1
                    h = fm_find_token_font(b, tp);
@


1.26
log
@Image history - sizes of images are remembered for future reference (if
the sizes aren't specified in the HTML, they can be looked for in the
image history instead to minimise reformatting requirements). Choices
file options ImageHistoryPath, ImageExpiryAge, ImageMaxSize and
SaveImageHistory added to support this (all have a direct analogy to
the global History items of the same name after removing 'Image').

Text area items are now the correct height for the number of rows
specified in the HTML, don't scroll a line too early, and have the
caret placed at the start of the text when moved into from above
or at the end when moved into from below (rather than always at
the end, which was behaviour inherited from single line writables,
where this is desirable). The top of the text area is aligned to
the top of any line of text on the same line, with the text area
dropping below the text, rather than the bottom of the area matching
the text baseline and extending upwards.

Filename extensions for download files are only stripped if an
attempt to convert to a RISC OS filetype through the Mime Mapper module
does not return an error or Data (0xffd) filetype. '.cgi' is a special
case which is always stripped.

Altered heading styles - all are bold, none are italic, H3 is as big
as H2 was, H2 is a little larger, and others scale down to H6 being
the size as normal text (but, as I say, bold).

Sorted out tables and forms. We can just look for tagno=TAG_FORM, and
get rid of the wobbly form_flag; also discarded the redundant
reprocess_table flag in fetch_preprocess_token. Two separate forms
in consecutive table cells (for example) which used to fail - they
were submitted as one single form - will now work correctly.

Fixed nasty bug in FontManage.c where font size 7 would intermittently
fail. The stupid font sizes that it could ask the Font Manager for may
be responsible for the occasional Font Manager crashes that have been
noticed. Array for font sizes was declared as [Limits_FontSizes], but
indices 1 to Limits_FontSizes are actually used - so needed a '+ 1'
in the declaration... :-/

Replaced the case insensitive string comparison functions in Utils.c
with more efficient versions by S.Brodie.

MAXLENGTH specifier in INPUT tags is now supported. If unspecified or
specifically zero, the browser overrides and allows any length.
@
text
@d61 1
a61 1
  #include "iso10646.h"
@


1.25
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d2010 1
a2010 1
                    /* Set up the bounding box for a text area, with a minimum of 3 rows */
d2015 3
d2021 2
a2022 1
                      box.ymax = (box.ymax - box.ymin + 4) * r + box.ymin;
d2024 2
@


1.24
log
@Removed 'The Onion' link from some Hotlist files. Time showed that the
site wasn't entirely Family Friendly (TM)... Removed Shift Control (it's
gone offline now), and corrected the Telegraph URL from ...the-telegraph...
to just ...telegraph...

StrongHelp manual generator now tries to work out the number of lines in
the table on the root page more intelligently.

Plug-in support extended to handle Shockwave. Quite a lot of underlying
work for this, including a pseudo cache system for temporary files.

Bug in redraw routines: they plotted background images within table
cells, when nothing should have been drawn. Oops. When background images
in cells are properly supported, this can get sorted out.

Tweaked vertical plot position of HRs (up to 4 OS units too high before due
to rounding).

Various Res file bits and pieces, Ursula build taken up to v1.26 beta
for release on the Browser site. *Note* not all resources are up to date!
This will be done after AW97.
@
text
@d45 2
d69 4
a72 5
static void redraw_border_around_box (BBox * box, int colour);
static void redraw_input_field       (browser_data * b, HStream * t, BBox * box, int colour, int menu);
static void redraw_button            (browser_data * b, HStream * t, BBox * box, int in);
static void redraw_switch            (browser_data * b, HStream * t, int x, int y, char * spr, WimpRedrawWindowBlock * r);
static void redraw_bullet            (int x, int y, int bullet, WimpRedrawWindowBlock * r);
d733 1
a733 1
static void redraw_border_around_box(BBox * rbox, int colour)
d739 4
a742 4
  box.xmin &= ~1;
  box.ymin &= ~1;
  box.xmax &= ~1;
  box.ymax &= ~1;
a1213 6
  /* Somewhat horrible code for the system font Unicode stuff.
   * Should be able to lose this eventually.
   */
  _kernel_oserror * e;
  e = unifont_start_redraw();
  if (e) return e;
d1215 11
a1225 1
  use_noback = noback;
d1227 2
a1228 3
  e = redraw_draw_r(1, 0, 0, b, b->cell, r, noback, nocontent);
  if (e)
  {
d1231 3
a1233 1
  }
a1234 1
  return unifont_end_redraw();
a1235 1
  use_noback = noback;
d1237 4
a1240 1
  return redraw_draw_r(1, 0, 0, b, b->cell, r, noback, nocontent);
d1788 4
a1791 2
                                  /* For tables with a cell spacing greater than the OS unit */
                                  /* to pixel scaling value, use a 3D border                 */
d1793 1
a1793 1
                                  if (table->cellspacing > max)
d1795 46
a1840 33
                                    redraw_set_colour(Redraw_Colour_AlmostWhite);

                                    bbc_rectanglefill(cx,      cy - dy, cw - hx, hy);
                                    bbc_rectanglefill(cx + cw, cy - dy, hx,      ch + hy);

                                    redraw_set_colour(Redraw_Colour_PlinthGrey);

                                    bbc_rectanglefill(cx - dx, cy - dy,      hx, ch + dy + hy);
                                    bbc_rectanglefill(cx,      cy + ch, cw + hx, hy);
                                  }

                                  /* Otherwise use a black 2D border. If we've got half of the OS unit to */
                                  /* pixel spacing available, then there'll be at least 1 pixel between   */
                                  /* all cells so we can draw in that gap. Otherwise, we must plot over   */
                                  /* the cell contents.                                                   */

                                  else if (table->cellspacing >= (max >> 1))
                                  {
                                    redraw_set_colour(Redraw_Colour_Black);

                                    bbc_rectanglefill(cx - dx, cy - dy, cw + hx, hy);
                                    bbc_rectanglefill(cx + cw, cy - dy, hx,      ch + hy);
                                    bbc_rectanglefill(cx - dx, cy,      hx,      ch + hy);
                                    bbc_rectanglefill(cx,      cy + ch, cw + hx, hy);
                                  }
                                  else
                                  {
                                    redraw_set_colour(Redraw_Colour_Black);

                                    bbc_rectanglefill(cx,           cy,           cw - hx, hy);
                                    bbc_rectanglefill(cx + cw - dx, cy,           hx,      ch - hy);
                                    bbc_rectanglefill(cx,           cy,           hx,      ch - hy);
                                    bbc_rectanglefill(cx,           cy + ch - dy, cw - hx, hy);
d1868 1
a1868 1
                      if (TABLE_BORDER(table))
d1905 7
a1911 1
                        if (table->cellspacing > max)
a1985 29

//                  /* Draw the slabbed out table border */
//
//                  {
//                    int cx, cy, cw, ch;
//
//                    convert_pair_to_os(x, y, &cx, &cy);
//  //                  x -= 2;
//
//                    convert_to_os(d->cdata[cn].w, &cw);
//                    ch = d->ldata[l].h;
//
//                    #ifdef TRACE
//                      if (tl & (1u<<20)) Printf("table box at %d %d %d %d\n",cx,cy,cw,ch);
//                    #endif
//
//                    if (TABLE_BORDER((table_stream *) tp))
//                    {
//                      redraw_set_colour(Redraw_Colour_AlmostWhite);
//
//                      bbc_rectanglefill(cx, cy + ch, cw - 1, 1);
//                      bbc_rectanglefill(cx, cy,      1,      ch - 1);
//
//                      redraw_set_colour(Redraw_Colour_PlinthGrey);
//
//                      bbc_rectanglefill(cx,      cy, cw - 1, 1);
//                      bbc_rectanglefill(cx + cw, cy, 1,      ch - 1);
//                    }
//                  }
a2206 2
                  o = 0;

a2208 9
                  /* Ensure the image has the plotting position recorded within */
                  /* it's associated image_info structure, so that update       */
                  /* routines elsewhere will know where to plot it              */

                  image_set_token_image_position(b,
                                                 tp,
                                                 coords_x_toworkarea(ox, r),
                                                 coords_y_toworkarea(oy, r));

d2211 2
d2220 13
a2243 2
                      o = (tp->style & IMG) ? tp->maxlen * 2 : 0;

d2256 16
a2287 2
                  o = 0;

a2289 5
                  object_set_token_object_position(b,
                                                   tp,
                                                   coords_x_toworkarea(ox, r),
                                                   coords_y_toworkarea(oy, r));

d2292 2
d2301 5
a2309 2
                      o = HtmlOBJECTborder(tp) * 2;

d2319 5
d2325 1
a2325 7
                      // A selection mode for Objects...?
                      //
                      // else if (redraw_selected(b, tp))
                      // {
                      //   redraw_border_around_box(&box, b->selected_colour);
                      // }
                    }
a2326 2

                  if (nocontent != tp) RetError(object_redraw(b, r, d->cdata[cn].t, o + box.xmin, o + box.ymin));
@


1.23
log
@Various fixes in the code required for Shockwave support (many invalid
assumptions about the OBJECT tag structure). Not finished yet though.

Played around with signal handling 'n' all that to try and get sensible
errors reported for aborts etc. using code by KBracey. Need a ROM patch
for _swix on RISC OS 3.7 upwards (or a local fixed copy of _swix),
otherwise should sort out most of the problems seen (mostly 'no stack
for trap handler' errors and a distinct lack of a register dump).

Plug-In view on redraw / ASAP choices now work as they should (ASAP
was previously broken).

Version numbers in Messages incremented to 1.25 (23 Oct 1997).

For Plug-In support, created new source file RMA.c/h to handle RMA
claims and releases, in an attempt to ensure leakage never happens.
As such, this source is *slightly* more advanced than that in the 1.25
AW '97 build, though functionally identical. Well, that is, at least
you can confirm zero RMA leakage with '-debug LMem' in TRACE builds now!

Intend to do a consistency check on comment syntax in all sources
shortly - I need to rebuild my StrongHelp manuals; can't keep track
of all of these new functions...
@
text
@d1419 6
a1424 4
               !image_tile_window(b,
                                  r,
                                  0,
                                  toplevel ? -htop : 0)
d1597 1
a1597 1
                    int              noback     = 1;
d1648 1
a1648 1
                                  noback = 0;
d1650 1
d1705 1
a1705 1
                                                noback,
d1732 1
a1732 1
                                if (!noback)
d2266 1
a2266 1
                else if (tp->tagno == TAG_OBJECT)
d2397 1
a2397 1
                  oy += ((d->ldata[l].h - h) / 2) &~3;
@


1.22
log
@Oops - left unconditional TML output in Redraw.c.
@
text
@d1014 2
d1018 1
a1018 1
  if (holder->xmax > 8 && holder->ymax > 8)
d1031 3
a1033 3
    bbc_rectanglefill(holder->xmin + 2,
                      holder->ymin + 2,
                      holder->xmax - 5,
d1035 2
a1036 2
    bbc_rectanglefill(holder->xmax + holder->xmin - 6,
                      holder->ymin + 2,
d1038 1
a1038 1
                      holder->ymax - 5);
d1041 3
a1043 3
    bbc_rectanglefill(holder->xmin + 2,
                      holder->ymax + holder->ymin - 6,
                      holder->xmax - 7,
d1045 2
a1046 2
    bbc_rectanglefill(holder->xmin + 2,
                      holder->ymin + 4,
d1048 1
a1048 1
                      holder->ymax - 7);
d1055 2
a1056 2
    if (holder->xmax < 2) holder->xmax = 2;
    if (holder->ymax < 2) holder->ymax = 2;
d1059 1
a1059 1
    bbc_rectangle(holder->xmin,holder->ymin,holder->xmax - 1,holder->ymax - 1);
d1110 1
a1110 1
    vcent = (holder->ymax - stringheight) / 2 - fbox.ymin;
d1112 1
a1112 1
    vcent += holder->ymin;
d1114 1
a1114 1
    xpos = (holder->xmax - stringwidth) / 2;
d1116 1
a1116 1
    xpos += holder->xmin;
d1124 4
a1127 4
    fbox.xmin = holder->xmin + 8;
    fbox.xmax = holder->xmin + holder->xmax - 9;
    fbox.ymin = holder->ymin + 8;
    fbox.ymax = holder->ymin + holder->ymax - 9;
@


1.21
log
@fetch_get_raw_data will notice if up->fetching is zero and return a
'finished' status rather than trying to continue reading data for the
fetch. Fetches should never fall through that far but at least it
will cope if they do.

3D table borders are now supported. 2D borders are used if the
inter-cell spacing is too small to fit the borders in (display resolution
dependent) - the external table border is 2D if the internal borders are,
else 3D. For cellspacing of 0, internal table borders must plot over the
outer edge of pixels inside the cell; for all greater spacings, the
borders take up all or part of the gap between them. The external border
will always fit around the outside of the cells, including the
cellspacing value in the gap between the outer cells and the border.

Anti-alias colour for placeholder ALT text was incorrect. Fixed.

I'd changed 'point' to 'points' in some of the Font Choices dialogues;
now changed back to 'point'.

The routine to find out how large an otherwise unsized object or image
placeholder based on its ALT text has been centralised in Reformat.c,
so that the image and object routines can both access it without
code duplication (this means non-image objects will now have the correct
size if they contain ALT text, rather than assuming a standard default
size as before). ALT text in images that were also objects was never
plotted either, though the placeholder size would have been correct.
This has been fixed.
@
text
@d1015 1
a1015 1
Printf("text: '%s'\n",text);
@


1.20
log
@Sorted out Res files, including fixing position of 'bytes' label in one
of the Choices dialogues (I'd missed it out of a selection when everything
else got moved down a bit). Unfaded Enc_Chinese menu entries, made sure
text labels were wide enough for system font, changed 'Apply' on Choices
dialogue to 'Set', and added ^K to hotlist keyboard shortcut lists.
Print Setup (i.e. Print dialogue) buttons all set to 'local', so the
stupid Toolbox doesn't close the dialogue and lose the caret before I
can see if it was in there to start with...

256 colour hotlist sprites taken back to standard 16 colour versions,
since there's a significant speed penalty on slower machines. The
testbed browser still has the 256 colour versions so the designs aren't
completely lost.

Changed access settings to exported builds to wr/r - lr/r was really getting
on my nerves whenever I wanted to try something temporary out.

View source, save source and print handlers would all try to work if
there was no source to act on - despite the fact that toolbar buttons
would be greyed out form them. This is fixed.

The Navigate menu has components greyed to match the toolbar state,
when opened. It isn't kept up to date dynamically, though this shouldn't
really be a problem (reopen the submenu...). As part of this, finally
sorted out conditions for the Stop button to be greyed, or the
GoTo/Go/Stop tristate to be at 'Stop' versus 'GoTo'.

Deferred reformatting is now disabled for external image fetches.

Browser-local client pull flag removed; hitting the Stop button simply
cancels any null handlers working for it. That way, client pull switches
back on in passing at the next fetch (it was never really switched off).
So to stop client pull, hit the stop button at any point.

Done CELLPADDING attribute; cellpadding field in reformat_cell (Global.h)
is redundant since the table token is accessible from there, and so it has
been removed. CELLSPACING support also added.
@
text
@d143 1
a143 1
int redraw_background_colour(browser_data * b,int foregroundcolour)
d1015 1
a1015 1

d1149 1
a1149 1
                           redraw_backcol(b));
d1573 1
a1573 1
                  int oh;
d1589 1
a1589 2
                    int              cx, cy;
                    int              cw, ch;
d1594 5
a1598 2
                    BBox             rbox;
                    BBox           * ibox;
d1602 1
d1605 3
a1660 7
//                                /* Rounding errors - give some tolerance in all directions */
//
//                                rbox.xmin -= 4;
//                                rbox.ymin -= 4;
//                                rbox.xmax += 3; /* (- 1 to make the coordinate inclusive, then + 2) */
//                                rbox.ymax += 3;
//
d1734 1
a1734 1
                                /* Convert back to OS units ready for drawing the border */
d1736 6
a1741 2
                                convert_pair_to_os(x + cell->x,
                                                   y + cell->y + oh - cell->cellheight,
d1743 1
a1743 2
                                                   &cx,
                                                   &cy);
d1745 2
a1746 2
        //                        cx += 2;
        //                        cy -= 2;
d1748 5
a1752 2
                                convert_pair_to_os(cell->cellwidth,
                                                   cell->cellheight,
d1754 28
a1781 2
                                                   &cw,
                                                   &ch);
d1783 2
d1786 10
a1795 3
                                #ifdef TRACE
                                  if (tl & (1u<<20)) Printf("cell box at %d %d %d %d\n",cx,cy,cw,ch);
                                #endif
d1797 3
d1801 8
a1808 1
                                /* Draw the slabbed in cell border */
d1810 6
a1815 12
//                                if (TABLE_BORDER(table))
//                                {
//                                  redraw_set_colour(Redraw_Colour_PlinthGrey);
//
//                                  bbc_rectanglefill(cx, cy + ch, cw - 1, 1);
//                                  bbc_rectanglefill(cx, cy,      1,      ch - 1);
//
//                                  redraw_set_colour(Redraw_Colour_AlmostWhite);
//
//                                  bbc_rectanglefill(cx,      cy, cw - 1, 1);
//                                  bbc_rectanglefill(cx + cw, cy, 1,      ch - 1);
//                                }
d1837 108
@


1.19
log
@Now handles PARAM tags. Sorted out Plug-In bug that was related to Java
setting a 0 by 0 graphics window before calling Wimp_Poll (fixed in Java).
Implemented queue for Plug-Ins so multiple broadcasts aren't sent for
several Objects in one data chunk.

Added Docs directory with some documentation in it. More things to keep
checking for stylistic consistency, horray ;-)

Corrected !Run[D] for Ursula build to need AcornURI but not TaskModule
(URI handler needed for !Mail to pick up mailto: links).

Added display_height field to browser_data, analogous to display_width,
to cope with % sized objects by width and height (see how HRs are
handled in Redraw.c for an example of how it was always fairly easy
with width, but not height until this addition). Though you do have
to reload to get a new size; reformat isn't enough. Must see to this
some time...

Fixed bug where basic typefaces were claimed *before* the Choices file
had been read. For unusual Choices settings, this could create some
'interesting' problems now and again. This was part of narrower scope
work in the Choices code to allow font changing without leaking font
handles (now done; fm_shutdown only ditches fonts, it keeps internal
structures - must then call  fm_lose_fonts for all browsers to get the
bitfields up to date, then rewrite the typeface definitions and reclaim
basic fonts). Noticed that fm_claim_basic_typefaces would claim multiple
instances of the same font if there were several cases of the same font
mapped to different typeface styles - fixed.

Implemented PlugInControl settings, but not SupportObject (fully).
@
text
@d362 10
a371 1
  else           return 0; /* Cell margins (cellpaddings) are handled in the tables routines */
d393 1
a393 1
  else           return 0; /* Cell margins (cellpaddings) are handled in the tables routines */
a1594 1
                    int              padding;
d1623 1
a1623 2
                                cell    = &cellarray[cellindex];
                                padding = tables_cell_padding(b, cell);
d1696 2
a1697 2
                                                keepx + cell->x      + padding,
                                                keepy + cell->y + oh - padding,
d2178 5
@


1.18
log
@More reformatter code bugs fixed; this one regarding width of items. Any
kerned string was overestimated (causing redraw bugs and caret position
problems in forms, apart from other minor bits elsewhere) and the default
size of a writable icon wasn't especially clever.

Crude Plug-In support; just about manages Java, but can't fetch on
behalf of Plug-In (for example). Had to change the default file access
URL construction to be 'file:/' instead of 'file://', or local file
fetches that reference Java applets won't work. This is in its very
early stages, and is being checked in mostly so that various Choices
issues can be worked on.
@
text
@d297 47
d2066 4
a2069 4
                    /* Draw a border of tp->maxlen * 2 OS units width around an */
                    /* image, if it represents a link. (I.e. if 'border="3"'    */
                    /* was specified in the document source, a 3 pixel wide     */
                    /* border would be drawn in mode 20, say).                  */
d2071 5
a2075 1
                    if (ISLINK(tp))
d2077 1
a2077 1
                      o = (tp->style & IMG) ? tp->maxlen * 2 : 4;
a2091 4
                    }
                    else if (tp->tagno == TAG_INPUT && redraw_selected(b, tp))
                    {
                      redraw_border_around_box(&box, b->selected_colour);
@


1.17
log
@Increased WimpSlot of debug !Browse by 200K.

FRAMES_SUPPORT #define removed.

Optimised fm_token_font_info().

Added support for LI tokens with text (for ordered lists).

Now outdents bullets from indent value, rather than indenting bullets by
the indent value and further indenting text. May need to look at default
Choices files because of this.

Limited the margin to always be non-negative.
@
text
@d377 1
d382 2
a383 2
      _kernel_oserror *e;
      int h, width, bytes;
d388 1
d402 3
a404 1
        int bullet_width;
d406 1
a406 2
        /* Outdent the bullet */
        convert_to_points(reformat_bullet_width(t->indent), &bullet_width);
d408 1
a408 1
        i -= bullet_width;
d928 191
d1963 1
a1963 1
                        int length, end, temp, width;
d1975 1
a1975 1
                                                &temp,
a2076 17

// Printf("declare : %d\n", HtmlOBJECTdeclare(tp));
// Printf("shapes  : %d\n", HtmlOBJECTshapes(tp));
// Printf("tabindex: %d\n", HtmlOBJECTtabindex(tp));
// Printf("type    : '%s'\n", HtmlOBJECTtype(tp));
// Printf("usemap  : '%s'\n", HtmlOBJECTusemap(tp));
// Printf("vspace  : %d\n", HtmlOBJECTvspace(tp));
// Printf("hspace  : %d\n", HtmlOBJECThspace(tp));
// Printf("align   : %d\n", HtmlOBJECTalign(tp));
// Printf("archive : '%s'\n", HtmlOBJECTarchive(tp));
// Printf("border  : %d\n", HtmlOBJECTborder(tp));
// Printf("classid : '%s'\n", HtmlOBJECTclassid(tp));
// Printf("codebase: '%s'\n", HtmlOBJECTcodebase(tp));
// Printf("codetype: '%s'\n", HtmlOBJECTcodetype(tp));
// Printf("data    : '%s'\n", HtmlOBJECTdata(tp));
// Printf("stream  : %p\n", HtmlOBJECTstream(tp));
// Printf("parent  : %p\n\n", HtmlOBJECTparent(tp));
@


1.16
log
@Res files had component 0x29fc in frame gadgets for Choices - that's
meant to be the 'fake page' display. Sorted that out.

Got rid of unnecessary #define in Choices.h; the gadget autodetect
for the colour choices took its place.

Unsized objects now default to the same dimensions as unsized images.
@
text
@d376 2
a377 4
  /* Add an appropriate amount for a bullet point; the */
  /* ISBULLET macro is defined in Fetch.h              */

  if (t->indent && !ISBULLET(t))
d379 22
a400 1
    int width;
d402 2
a403 1
    convert_to_points(reformat_bullet_width(t->indent), &width);
d405 2
a406 1
    i += width;
d412 1
a412 1
  if (s & (BLOCKQUOTE | ADDRESS)) return i + redraw_left_margin(b, d) + b->quote_margin;
d417 3
a419 1
  return i + redraw_left_margin(b, d);
@


1.15
log
@Calling HtmlEndParse at the end of html_get_next_token and setting
up->context to NULL was wrong; fetch_fetcher would end up recalling
html_get_next_token later which would then call HtmlParse even though
the document parse had just finished! The HtmlEndParse call has now
been moved to fetch_stop.

Altered reformatter to claim fonts inside a browser, rather than
claiming them for nothing and losing them afterwards.

Got rid of TAG == TABLE and ISBODY tests, replacing with tagno == TAG_TABLE.
Removed all references to TD, TH, TR and TABLE in the style word.
@
text
@d1797 5
a1806 5
                    box.xmin += ox;
                    box.ymin += oy;
                    box.xmax += ox;
                    box.ymax += oy;

d1847 5
d1856 45
a1900 2
                    // Can you have borders on Objects? If so, draw them here in
                    // the same way as for images above.
@


1.14
log
@!Run[D] files updated to require HTTP 0.41 and FTP 0.13.

Redraw routines now allow tables to be indented with body text. Some page
layouts rely on this.
@
text
@d50 1
d1298 1
a1298 1
                if (tp->tag == TABLE && ISBODY(tp))
d1832 21
a1852 5
                    if (nocontent != tp)
                    {
                      e = image_redraw(b, r, d->cdata[cn].t, o + box.xmin, o + box.ymin);
                      if (e) return e;
                    }
d1854 2
d2060 1
a2060 1
                         && !(tp->tag == TABLE && ISBODY(tp))
d2092 1
a2092 1
                    if (ISSTRIKE(tp) && !(tp->tag == TABLE && ISBODY(tp)))
@


1.13
log
@Version in Messages taken to 1.22 (03 Oct).

Updated Res files in appropriate builds to hold various (similar) Choices
designs.

Choices related menus were flagged as Shared, but none of the dialogues
(including ColourDBox) were - potential future problems, though shouldn't
cause any leaks at present. This has been sorted out anyway.

Encoding function encoding_init no longer returns an error from
toolbox_create_object, so the Encoding menu and all those attached
to it do not have to be present (e.g. the Customer build).

SUB, SUP, STRIKE and U supported. U underlines the baseline of the body text
font, whilst STRIKE will go through roughly the middle of the lower case
chars even if the font is SUP or SUB. Note that Navigator appears to shift
the underline point for SUB and SUP; it may be necessary to copy this
behaviour, but testing on real sites must proceed before that. There could
also be a problem with the automatic lowering of font size, which Navigator
doesn't do, so any FONT SIZE = -n commands could make it too small. Again,
this needs testing on real sites.

'http://' is added to URLs with no protocol specified, unless they start with
'ftp.', in which case the new behaviour is to add 'ftp://'.

Choices code altered to do less error checking on components! They should be
able to be missing without raising errors. Referencing of the subwindow
array changed from *(subwindows + number) to subwindows[number].

Made trace_tag_name code look pretty...

reformat_useless_token now checks tagno is non-zero.

User Agent string setting now done through URL_GetURL, on a per-session
basis.

Ellipsis character removed from all Messages files, replaced with '...'.
There's little difference between the two in an outline font, and in System
font the latter looks much better. Smart quotes left in, as they look
better in all cases.
@
text
@a365 2
  if (t->tag == TABLE && ISBODY(t)) return redraw_left_margin(b, d);

@


1.12
log
@Added support for HTMLLib HttpEndParse call.

Text items with no VALUE specified in the HTML were not cleared on
hitting a Reset button as the text field of the token is NULL; fixed.
SELECT lists with no default selection item were not being changed
on hitting a Reset button; fixed. In radio groups with no default
selection specified, no item will be selected. This goes against
the HTML 2 spec but allows broken Navigator-esque forms behaviour.
In consequence, radios can be deselected by clicking on the same
one twice. I'd fixed the flickering experienced when doing this
recently, but that, now, is irrelevant, since the state of a radio
must always change.

Reformatter's new 'find width of a SELECT field' didn't account for
the width of <none> and <many> items, and now does (particularly
important for broken items with no OPTION contents).

Under certain circumstances, illegally named targets would open in the
ancestor rather than a new window - a deliberate decision in the code,
but now reversed due to a test suite failure; they'll open in a new
window instead.

Altered the left hand indent handling for lists so that headings and
body text follow the Navigator 48 pixel indent and the bullet point
items drop to the left of the left hand margin, rather than sitting
on the margin with the text indented to the right.

Tightened up the hotlist_load_directory checking of URLs, so that
only those with '://' in - i.e. look fully specified - are accepted.
HTML files are loaded into a new directory now.

Items without a descriptive title in hotlist_new_url will have the URL
substituted in instead. White space before and after descriptions and
after URLs is stripped. Directories with zero length names or null
strings (after white space is stripped) will still be created, with a
generic name (see Messages, token 'HotlistUntitled').
@
text
@d1979 2
a1980 1
                    int c;
d1987 33
d2026 1
a2026 1
                                     y + base,
d2032 13
a2044 1
                    if (ISLINK(tp) && !(tp->tag == TABLE && ISBODY(tp)))
d2050 1
a2050 3
                      if (b->underline_links)
                      {
                        redraw_set_colour(redraw_token_colour(b, tp));
d2052 1
a2052 1
                        convert_pair_to_os(x, y + base, &ox, &oy);
d2054 1
a2054 1
                        bbc_move(ox,oy - 7);
d2056 2
a2057 1
                        /* ...finish at x plus its width. */
d2059 1
a2059 1
                        convert_pair_to_os(x + d->cdata[cn].w, y + base, &ox, &oy);
d2061 7
a2067 2
                        bbc_draw(ox,oy - 7);
                      }
d2070 24
a2093 1
  //                  fm_lose_font(b, h);
@


1.11
log
@Now working on source merged with Kevin Bracey's internationalisation
support. UNIFONT is undefined in the Make File for now. All Res and
Choices files updated appropriately.

Having sorted out the old Choices and Messages to form Choices, Controls
and Messages, this build has had the same cleaning up done internally.
This includes greater consistency in naming schemes and the removal of
the inconsitent choices items - e.g. Choices file entries saying 'delay
images' and 'plain backgrounds' where internally all the flags say 'show
images' and 'show backgrounds'. ChoiceDefs.h and CtrlDefs.h added to
clarify the meaning of some fields, though usage of these is not 100%
in the source (there are cases where parameters are passed through to
functions as ints, and those functions still check these against hard
coded values rather than the #define stuff).

Fetcher status return bits (connected, sent request, etc.) now reflected
in status bar. Progress during fetchs to files are reported by %, where
the size of the object is known. Exceeding 100% drops back to a byte
counter, in case the estimated size was wrong. The progress counter
may be updated after specific delays, rather than 'as often as possible',
to reduce flicker (as requested by D.Brown some time ago).

I've done a small rewrite of the fetch prioritisation scheme in FetchPage.c;
how well this performs in general use across different processor speeds
remains to be tested, but certainly it has some advantages. For each small
fetch window before the rewrite, a 4cs tight loop was entered - this gave a
noticable and substantial drain to the Desktop performance if more than one
was opened. Now, several can be up at once with little hit. The actual file
fetch is on half the priority it was before, with all others taken back
just a bit - e.g. from 20cs per poll to 15cs per poll for flat out
reformatting. You don't seem to lose much time on the format in practice,
and the Desktop feels quite a bit lighter at the same time. There's the
potential for smoother frameset loading in this scheme, too.

When Shift+Clicking on a link meant you still fetched inside the main
browser window, several fetches could occur in a frameset - one per frame.
However, now that you can only do this by clicking on a link that leads to
non-displayable data - or by turning off the small fetch windows by
setting UseSmall to 'no' in Choices - a bug where fetchpage_preprocessed
would stop such fetches as new ones were started was revealed.
The API to frames_abort_fetching has now been extended to include a
'stop file spooling too' flag, allowing a fix to be made by having
fetchpage_preprocess's calls not set this (and it doesn't check the
savelink flag is unset before proceeding, since frames_abort_fetching
does that implicitly now).

Had left the RAM transfer buffer at 16 bytes (from testing) accidentally...
Oops. Upped it to 4K. In addition, when loading data by RAM transfer,
the browser didn't notice if a RAMFetch bounced during the transfer. It
would be treated as a 'first' RAMFetch bounce, basically, and try to go to
file transfer - oops. Fixed.
@
text
@d368 5
a372 5
  /* Indent more depending on the header type, if the */
  /* HStream represents a header.                     */

  if (redraw_header(s)) return i + redraw_left_margin(b, d);

@


1.10
log
@Encoding support added: if UNIFONT is defined then the browser will
attempt to use the system font to render Unicode characters (new
International module required). If not defined, the browser will just
handle Acorn Latin-1 characters, but HTMLLib will convert other encodings
into Latin-1. Must keep the UNIFONT define in sync with HTMLLib (if
defined HTMLLib outputs UTF-8, otherwise Acorn Latin-1).

Still needed:

Reverse encoding (converting form input etc back into the server's
character set).
Reparse when encoding changes.
Setting of charset from an attribute on the <A> tag.
@
text
@d58 2
a59 2
#include "iso10646.h"
#include "Unifont.h"
d120 1
a120 1
    if (tl & (1u<<9)) Printf("redraw_backcol: Called with choices.col_back = %p\n",(void *) choices.col_back);
d123 1
a123 1
  return (((b->backgroundcol == -1) || (!b->sourcecolours)) ? (choices.col_back) : (b->backgroundcol));
d144 1
a144 1
  if (b->plainback) return redraw_backcol(b);
d146 1
a146 1
  switch (b->aacol)
d149 1
a149 1
    /* as the foreground if aacol is -1.                         */
d153 3
a155 3
    /* If aacol is -2, return the background colour from the */
    /* browser_data struct unless this is -1, in which case  */
    /* return the foreground colour again.                   */
d157 1
a157 1
    case -2: return (b->backgroundcol == -1 ? foregroundcolour : b->backgroundcol);
d164 1
a164 1
  return (!b->sourcecolours ? choices.col_back : b->aacol);
d193 2
a194 2
    if (printstyle_always_use_black())              return Redraw_Colour_Black;
    if (printstyle_black_no_backgd() && use_noback) return Redraw_Colour_Black;
d204 1
a204 1
    if (b->highlight) return (b->sourcecolours ? b->follcol : choices.col_foll);
d208 1
a208 1
    if (redraw_selected(b, t)) return (b->sourcecolours ? b->selecol : choices.col_sele);
d213 1
a213 1
    if (!printing && (t->flags & HFlags_LinkVisited)) return (b->sourcecolours ? b->usedcol : choices.col_used);
d215 1
a215 1
    return (b->sourcecolours ? b->linkcol : choices.col_link);
d220 1
a220 1
  if ((t->type & TYPE_COLOURED) && b->sourcecolours) return (t->colour << 8);
d224 1
a224 1
  return (b->sourcecolours ? b->textcol : choices.col_text);
d313 1
a313 1
  if (!d->table) return b->leftmargin;
d335 1
a335 1
  if (!d->table) return b->rightmargin;
d364 1
a364 1
  i = t->indent * b->leftindent;
d392 1
a392 1
  if (s & (BLOCKQUOTE | ADDRESS)) return i + redraw_left_margin(b, d) + b->quotemargin;
d733 1
a733 1
    if (redraw_selected(b, t)) redraw_border_around_box(box, b->selecol);
d782 1
a782 1
  if (redraw_selected(b, t)) redraw_border_around_box(box, b->selecol);
d848 1
a848 1
    redraw_border_around_box(&icon, b->selecol);
d1133 2
a1134 2
          if (!fixed.swapbars) htop = toolbars_button_height(b) + toolbars_url_height(b);
          else                 htop = toolbars_status_height(b);
d1138 1
a1138 1
          /* Then if the plain background flag is set, or there's no image */
d1144 1
a1144 1
               b->plainback ||
d1361 6
a1366 6
                                  oldback          = b->backgroundcol;
                                  oldaa            = b->aacol;
                                  oldbgimage       = b->backimage;
                                  b->backgroundcol = TD_BGCOL(head);
                                  b->aacol         = b->backgroundcol;
                                  b->backimage     = -1; /* For now, no background images in table cells. */
d1460 3
a1462 3
                                  b->backgroundcol = oldback;
                                  b->aacol         = oldaa;
                                  b->backimage     = oldbgimage;
d1648 1
a1648 1
                      if (redraw_selected(b, tp)) redraw_border_around_box(&icon, b->selecol);
d1823 1
a1823 1
                        redraw_border_around_box(&box, b->selecol);
d1828 1
a1828 1
                      redraw_border_around_box(&box, b->selecol);
a1985 2
  // Printf("h: %d, c: %d, string: '%s'\n",h,c,dp + d->cdata[cn].o);

a1989 2
  // Printf("x: %d, y: %d, base: %d\n",x,y,base);

d1996 1
a1996 1
                                     b->backimage >= 0 && !b->plainback);
d2004 1
a2004 1
                      if (b->underlinelks)
d2115 1
a2115 1
          redraw_set_colour(choices.col_back);
d2133 1
a2133 1
          h = fm_find_font(b, "sans", (int) (choices.fontsize * 1.5), (int) (choices.fontsize * 1.5), 0, 1);
d2141 2
a2142 2
          if (!fixed.swapbars) htop = toolbars_button_height(b) + toolbars_url_height(b);
          else                 htop = toolbars_status_height(b);
d2162 1
a2162 1
          fm_set_font_colour(h, choices.col_text, choices.col_back);
@


1.9
log
@Got the deferred reformatter working properly. It doesn't do that 'OK,
the page is fetched and reformatted, but just to annoy you, I'm going
to wait 5 seconds and then suddenly reformat the whole thing again'
trick anymore. The fetcher was calling the reformatter in a delayed
form even when the reformatter was already running, so it would carry
on past the reformat point or from below what had become and invalidated
line, and some time later, get back to the delayed reformat. Now,
reformatting is only delayed by the fetcher when the reformatter is not
running. In practice this means body text reformats as it fetches, but
large tables will show delayed reformatting - which was exactly the
intended behaviour of the feature when it was originally thought of.

fetch_token_data_address removed; it was only needed in two places,
both of which already knew when to read tp->text and when to ignore
it. Its functionality is duplicated in an 'if' involving reformat_istext,
anyway.

!Run[D] files taken back to requiring HTTP 0.33, since 0.36 introduces
many weird and wonderful problems.

Typo in Messages files, 'All current images (sic.) fetches finished' -
'images' is now 'image'.

Shift+Click saving - you could save to an application. No problem. But
the equivalent (just clicking on a link that led to an unknown datatype
and getting the save dialogue that way) didn't work. It does now.
Another problem was saving to an application that didn't support the
datatype - oops, the dialogue would close but the fetch would sit there
waiting to be told where to save. It doesn't close now (as expected).

NB, doing several simultaneous fetches to a text editor may have problems
as the editors are too clever for their own good. Despite receiving
DataLoad messages for <Wimp$Scrap> for files of different types, sizes
and datestamps, the editors can decide it's still the same file and:

Zap      - Hats off, it gets it right, almost. You do get warned 'Multiple
           copies - one on disc is newer' as everything after the first
           text loads, but they do load, and in separate windows.
StrongED - Does not load the subsequent files, so the browser gives 'Data
           transfer failed' errors and opens up Scrap. Turning off 'Don't
           load same file twice' fixes it - each file is loaded in a new
           window with no warnings. At least in the first case, you don't
           lose data, since the files are kept in Scrap.
Edit     - Each time it loads the file, it *replaces* the other one in
           memory, using the same window for each. This is the worst
           behaviour as it isn't configurable (well, I don't know of a way
           to change it...) and results in data loss as successive texts
           get trounced by the new data.

I can't see how I can fix this in the browser as it's basically silly
behaviour on behalf of the editors. Other applications which don't try
to work out if it's a new file or not are fine!

When conducting image fetches, proxying is allowed unless reloading.
When conducting page fetches, proxying was never allowed - so web cache
stuff would have been, er, interesting. It now sets X-NoProxy: in the
request header when reloading, but otherwise this is not included.

AnimSpeed is, at last, independent of browser poll speed. They used to
be tied together. Guess how the animation code used to work ;-)

'Can't handle this datatype' - deprecated now that save dialogues can be
popped up. The 'can't save objects in full screen mode' error would never
be shown due to a bug, anyway; this now replaces 'can't handle', which
has been removed from all Messages files.

RefoWait, RefoHang and RefoTime moved from Controls back to Choices.

Trying to get rid of strlen in the reformatter - it can get very slow
(e.g. strlen of 8K chunks of text, or if a 330K text file is transferred
from a text editor straight to the browser, strlen of a 330K string...).
There will be unfinished bits of code in the reformatter that may seem
unnecessary - they've just not been plugged in yet (since they don't
actually work). Don't remove them!
@
text
@d57 5
d938 19
d960 1
@


1.8
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@a1639 16

//                      sprite_id   sid;
//                      sprite_info info;
//
//                      sid.tag=sprite_id_name;
//                      sid.s.name="fgright";
//                      if(!sprite_readsize(resspr_area(),&sid,&info))
//                      {
//                        int w,h;
//
//                        w=info.width<<bbc_modevar(info.mode,bbc_XEigFactor);
//                        h=info.height<<bbc_modevar(info.mode,bbc_YEigFactor);
//                        wimp_setcolour(7);
//                        bbc_rectanglefill(box.xmax-w-8,box.ymin+4,w+8-1,h+4-1);
//                        plotspr_plot(resspr_area(),&sid,8,box.xmax-w-4,box.ymin+4,NULL);
//                      }
d1647 8
a1654 7
                      if (nocontent != tp)
                        redraw_switch(b,
                                      tp,
                                      x,
                                      y + base,
                                      form_get_field(b, d->cdata[cn].t) -> checked ? "fopton" : "foptoff",
                                      r);
d1658 8
a1665 7
                      if (nocontent != tp)
                        redraw_switch(b,
                                      tp,
                                      x,
                                      y + base,
                                      form_get_field(b, d->cdata[cn].t) -> checked ? "fradioon" : "fradiooff",
                                      r);
d1668 1
a1668 2
                    case inputtype_IMAGE:
                         goto do_image;
d1754 1
a1754 1
              do_image:
d1950 1
a1950 1
                  dp = fetch_token_data_address(b,d->cdata[cn].t);
@


1.7
log
@Modified to cope with withdrawal of #defines SELECT, INPUT etc.
Added right-align support.
@
text
@d50 2
d67 4
d183 9
d431 1
a431 2
  /* else work out the centre alignment indentation.          */

d433 2
a434 2
       if ((t->style & CENTER) || ((t->type & TYPE_ALIGN_MASK) == TYPE_CENTRE)) align = 1;
  else if ((t->style & RIGHT)  || (t->type & TYPE_ALIGN_MASK) == TYPE_RIGHT) align = 2;
d607 6
a824 21
  #ifdef TRACE

    {
      int len = utils_len_printf("S%s\0",spr);

      if (len > sizeof(validation))
      {
        erb.errnum = Utils_Error_Custom_Normal;
        sprintf(erb.errmess,
                "Would have overflowed validation string buffer in redraw_switch (needed %d bytes, had %d)",
                sizeof(validation),
                len);

        show_error_ret(&erb);

        return;
      }
    }

  #endif

d867 1
a867 1
  char              spr[20];
a871 21
  #ifdef TRACE

    {
      int len = utils_len_printf("Sb%d\0", (bullet + bullets - 1) % bullets);

      if (len > sizeof(spr))
      {
        erb.errnum = Utils_Error_Custom_Normal;
        sprintf(erb.errmess,
                "Would have overflowed sprite name string buffer in redraw_bullet (needed %d bytes, had %d)",
                sizeof(spr),
                len);

        show_error_ret(&erb);

        return;
      }
    }

  #endif

d933 2
d987 3
d991 1
a991 2
  int               more, page_bottom = 0;
  BBox              wbox,fbox,sbox;
d993 1
a993 2
  _kernel_oserror * e;
  browser_data    * ancestor = utils_ancestor(b);
d996 1
a996 1
    if (tl & (1u<<9)) Printf("\nredraw_draw: Called\n");
d1009 1
a1009 1
    wbox = r->redraw_area; /* Set wbox to hold the redraw rectangle details */
d1024 2
a1025 2
    wbox.xmin -= 12, wbox.xmax += 12;
    wbox.ymin -=  2, wbox.ymax +=  2;
d1027 1
a1027 6
    /* Retain the screen coord version of the redraw rectangle in sbox */
    /* (wbox holds it now, but this is converted to work area coords   */
    /* in a moment). Put the screen coordinate version in fbox, with   */
    /* the OS unit coords converted to millipoints.                    */

    sbox = wbox;
d1031 2
a1032 2
    /* Convert the visible area of the window to work area */
    /* coords, putting the result in wbox.                 */
d1034 2
a1035 1
    coords_box_toworkarea(&wbox,r);
d1037 4
a1040 3
    /* Get the page bottom in work area coordinates. This is a printing only */
    /* concept, where the visible_area BBox will in fact hold the entire     */
    /* page bounding box.                                                    */
d1043 1
d1045 1
a1045 18
// if (b->nlines)
// {
//   Printf("\n*** LINE ENUMERATION ***\n\nNumber of lines: %d\n\n",b->nlines);
//
//   for (l = 0; l < b->nlines; l++)
//   {
//     Printf("Line %d\n-y    : %d\nh     : %d\nb     : %d\nn      : %d\nchunks: %d\n\n",
//             l,
//             -d->ldata[l].y,
//             d->ldata[l].h,
//             d->ldata[l].b,
//             d->ldata[l].n,
//             d->ldata[l].chunks);
//   }
//
//   Printf("\n************************\n\n");
// }
// else Printf("\n******* NO LINES *******\n\n");
d1049 2
a1050 7
      int                         child;
      unsigned int                colour;
      browser_data              * c;
      WimpGetWindowOutlineBlock   co;

      /* If the window has children, want to draw frame borders, not */
      /* any document content.                                       */
d1053 1
a1053 1
        if (tl & (1u<<9)) Printf("redraw_draw: Have children\n");
d1056 6
a1061 11
      /* The bottom bit of the colour field is set to indicate */
      /* that a colour is present, as opposed to having no     */
      /* colour set. In the latter case default to background  */
      /* grey, in the former strip off the set bit. Then set   */
      /* that colour.                                          */

      colour = b->frameset->maxlen;
      if (!(colour & 1)) colour  = Redraw_Colour_WNGrey;
      else               colour &= ~1;
      redraw_set_colour(colour);
      bbc_rectanglefill(sbox.xmin, sbox.ymin, sbox.xmax - sbox.xmin + 4,sbox.ymax - sbox.ymin + 4);
d1064 2
d1067 5
a1071 15
        if (tl & (1u<<23))
        {
          BBox rectangle = r->redraw_area;

          redraw_set_colour(0xff884400);
          bbc_rectangle(rectangle.xmin,rectangle.ymin,rectangle.xmax-rectangle.xmin-1,rectangle.ymax-rectangle.ymin-1);

          redraw_set_colour(0xffaa6600);
          bbc_rectangle(rectangle.xmin+2,rectangle.ymin+2,rectangle.xmax-rectangle.xmin-5,rectangle.ymax-rectangle.ymin-5);

          redraw_set_colour(0xffcc8800);
          bbc_rectangle(rectangle.xmin+4,rectangle.ymin+4,rectangle.xmax-rectangle.xmin-9,rectangle.ymax-rectangle.ymin-9);
        }

      #endif
d1073 1
a1073 6
      /* Now loop round the children, drawing a 3D border around them */
      /* for border spacings >= 2, a black line for spacing 1, or     */
      /* nothing for spacing 0 (shouldn't then get redraw events for  */
      /* the parent, but you never know - e.g. user could have got a  */
      /* patch that allowed the frames to be moved by dragging on     */
      /* their work area).                                            */
d1075 1
a1075 3
      if (b->frameset->indent) /* Holds frame spacing (equiv. to border width) */
      {
        for (child = 0; child < b->nchildren; child ++)
d1077 1
a1077 2
          c                = b->children[child];
          co.window_handle = c->window_handle;
d1079 2
a1080 1
          if (!wimp_get_window_outline(&co))
d1082 2
a1083 36
            if (b->frameset->indent >= 2) redraw_set_colour(Redraw_Colour_AlmostWhite);
            else                          redraw_set_colour(0);

            /* Bottom edge */

            bbc_rectanglefill(co.outline.xmin,
                              co.outline.ymin - 2,
                              co.outline.xmax - co.outline.xmin + 1,
                              1);

            bbc_rectanglefill(co.outline.xmax,
                              co.outline.ymin,
                              1,
                              co.outline.ymax - co.outline.ymin - 1);

            /* Right hand edge */

            if (b->frameset->indent >= 2) redraw_set_colour(Redraw_Colour_PlinthGrey);

            /* Top edge */

            bbc_rectanglefill(co.outline.xmin - 2,
                              co.outline.ymax,
                              co.outline.xmax - co.outline.xmin + 3,
                              1);

            /* Left hand edge */

            bbc_rectanglefill(co.outline.xmin - 2,
                              co.outline.ymin - 2,
                              1,
                              co.outline.ymax - co.outline.ymin + 1);

            /* If the edges are draggable - for frame resizing - plot icons */
            /* indicate this.                                               */

d1085 1
a1085 10
              int  width, height;
              BBox icon;

              /* Get the sprite size, work out a bounding box and plot */
              /* this as a virtual icon.                               */

              read_sprite_size("resizeframe", &width, &height);

              /* Can only plot sprites if there's room... The additions to width and */
              /* height account for the border plotted above.                        */
d1087 1
a1087 4
              if (
                   width  + 4 <= b->frameset->indent * wimpt_dx() &&
                   height + 4 <= b->frameset->indent * wimpt_dy()
                 )
d1089 2
a1090 52
                WimpPlotIconBlock block;

                block.flags = 0x1700311B;
                block.data.ist.buffer = "";
                block.data.ist.validation = "Sresizeframe";
                block.data.ist.buffer_size = 4;

                if (frames_can_resize_right(b, child))
                {
                  /* Plot to right of frame */

                  icon.xmin = co.outline.xmax + b->frameset->indent - width / 2;
                  icon.ymin = co.outline.ymin + (co.outline.ymax - co.outline.ymin - height) / 2;
                  icon.xmax = icon.xmin + width;
                  icon.ymax = icon.ymin + height;

                  coords_box_toworkarea(&icon, r);
                  block.bbox  = icon;

                  _swix(Wimp_PlotIcon,
                        _IN(1) | _INR(4,5),

                        &block,
                        0,
                        0);
                }

                if (frames_can_resize_bottom(b, child))
                {
                  /* Plot below the frame */

                  icon.xmin = co.outline.xmin + (co.outline.xmax - co.outline.xmin - width) / 2;
                  icon.ymin = co.outline.ymin - height / 2 - b->frameset->indent;
                  icon.xmax = icon.xmin + width;
                  icon.ymax = icon.ymin + height;

                  coords_box_toworkarea(&icon, r);
                  block.bbox  = icon;

                  _swix(Wimp_PlotIcon,
                        _IN(1) | _INR(4,5),

                        &block,
                        0,
                        0);
                }

              /* Closure of long 'if' checking that there is room to plot */
              /* a resize handle for this frame, given that the frame     */
              /* itself doesn't have noresize specified. The code above   */
              /* executes if noresize is not specified and there's room   */
              /* to do the plot.                                          */
a1091 2

            /* Closure of code block dealing with resize handle plotting */
d1093 1
d1095 1
a1095 4
          /* Closure of long 'if' ensuring a wimp_get_window_outline */
          /* call didn't return an error - the code above executes   */
          /* if there was no error.                                  */
          }
d1097 1
a1097 1
        /* Closure of 'for' looping round all children */
d1100 1
a1100 10
      /* Closure of long 'if' checking that the frameset has spacing */
      /* between frames. The code above executes if so.              */
      }

    /* Closure of first part of long 'if' checking if the browser */
    /* has children. The code above executes if so, the code      */
    /* below executes if not.                                     */
    }

    /* If the browser doesn't have child frames, want to draw the document it holds. */
d1102 1
a1102 13
    else
    {
      #ifdef TRACE
        if (tl & (1u<<9)) Printf("redraw_draw: Have no children\n");
      #endif

      if (b->stream)
      {
        #ifdef TRACE
          if (tl &512) Printf("redraw_draw: Have a document\n");
        #endif

        /* If we've not been told not to plot any backgrounds... */
d1149 1
a1149 14
  //      else
  //      {
  //        /* If plotting no specific backgrounds, show the default one. */
  //        /* If printing, assume we want to plot no background at all.  */
  //
  //        if (!printing)
  //        {
  //          if (b->sourcecolours) redraw_set_colour(redraw_backcol(b));
  //          else redraw_set_colour(choices.col_back);
  //          bbc_rectanglefill(sbox.xmin, sbox.ymin, sbox.xmax - sbox.xmin + 4,sbox.ymax - sbox.ymin + 4);
  //        }
  //      }

        /* For each line that is present in the browser window... */
d1151 1
a1151 1
        for (l = 0; l < (d->nlines); l++)
d1170 1
a1170 1
            if (printing == 1)
d1172 20
a1191 5
              /* If the line would only partially fit on the page, and */
              /* we're printing, return it's top coordinate (i.e., if  */
              /* it falls off the bottom). Note that if printing = 2,  */
              /* this will not be done (so the printing routine can    */
              /* signal not to split the line in this way).            */
d1195 9
a1203 2
                r->xscroll = osyorg + d->ldata[l].y + d->ldata[l].h;
                return NULL;
d1811 4
a1814 1
                      else if (redraw_selected(b, tp)) redraw_border_around_box(&box, b->selecol);
d1817 1
d1819 1
d2080 9
d2104 1
a2104 1
        if (!printing)
d2149 2
a2150 2
              Printf("redraw_draw: Empty page, claimed font %p\n",(void *) h);
              Printf("             Plotting x,y %d,%d\n",x,y);
d2194 1
@


1.6
log
@Updated Makefile to work better in folding text editors. More or less rewrote
Limits.h, and ensured consistent comment styling throughout all sources.
Fetch.c/h split to Fetch, FetchHTML and URLveneer. URLstat.c/h produced to
cope with this. OpenURL and Find sources created from bits in the Windows
source file that shouldn't have been there... These will get filled out
shortly. Note that a few functions in Fetch are due to be renamed and moved;
probably to Tokenutils.
@
text
@d175 1
a175 1
  if (t->style & (INPUT | TEXTAREA | SELECT)) return 0;
d419 2
a420 2
  if ((t->style & CENTER) || ((t->type & TYPE_ALIGN_MASK) == TYPE_CENTRE)) align = 1;
  if ((t->type & TYPE_ALIGN_MASK) == TYPE_RIGHT) align = 2;
d1714 1
a1714 1
                if (tp->style & (INPUT | TEXTAREA | SELECT))
d1719 2
a1720 1
                       (tp->style & (TEXTAREA | SELECT))       ||
d1736 1
a1736 1
                    if (tp->style & TEXTAREA)
d1757 1
a1757 1
                      redraw_input_field(b, tp, &box, redraw_token_colour(b, tp), !!(tp->style & SELECT));
d1761 1
a1761 1
                                         (tp->style & SELECT) ? Redraw_Colour_BackGrey : Redraw_Colour_White);
d1768 2
a1769 2
                                           !!(tp->style & TEXTAREA),
                                           (tp->style & INPUT) && HtmlINPUTtype(tp) == inputtype_PASSWORD);
d1774 1
a1774 1
                    if (tp->style & SELECT)
d1988 1
a1988 1
                    else if ((tp->style & INPUT) && redraw_selected(b, tp))
@


1.5
log
@Quite a few general source changes throughout many files to sort out swapped
toolbars. There will be more work on this shortly. svcprint.c has been
modified to allow it to output to a file in PipeFS, so TML-less machines
can still use the standard browser debug routines (albeit in a less than
elegant fashion). Comments in that source file give more details. Plus a
few more bug fixes.
@
text
@d17 3
a19 1
/* Purpose: Redraw functions for the browser       */
d21 2
a22 1
/* History: 29-Nov-96: Created                     */
d45 1
a45 1
#include "Fetch.h"
d123 1
d165 1
d620 1
d650 1
d653 1
d659 1
d719 1
d722 1
d725 1
d768 1
d771 1
d774 1
d777 1
d779 1
d805 22
a826 1
  sprintf(validation,"S%s",spr);
d855 1
d858 1
d860 1
d873 22
a894 1
  sprintf(spr, "Sb%d",(bullet + bullets - 1) % bullets);
a2328 2
  //        fm_lose_font(b, h);

a2356 2

/*************************************************/
@


1.4
log
@Checking in mostly because its Friday... Quite a few little bug fixes
(adding up to a greater whole), which include removal of the dastardly
'invalid image number' errors that trace builds would raise from time to
time. Frame highlights are now better controlled (releaseably so).
Generally, this build represents the first genuinely promising version
of the browser for quite some time, despite the known library problems
with comment handling etc.
@
text
@d1228 7
d1245 1
a1245 1
                                  toplevel ? -toolbars_button_height(b) - toolbars_url_height(b) : 0)
d2220 1
a2220 1
          int     x,y;
d2233 6
a2238 1
          y = coords_y_toscreen(-toolbars_button_height(b) - toolbars_url_height(b) - size.ymax - size.ymin - 40, r);
@


1.3
log
@Made INPUT type=image work
@
text
@d585 1
a585 1
  browser_data * ancestor = b->ancestor;
a587 1
  if (!ancestor) ancestor = b;
d796 6
a801 1
  wimp_plot_icon(&block);
d849 6
a854 1
  wimp_plot_icon(&block);
d950 1
a950 3
  browser_data    * ancestor = b->ancestor;

  if (!ancestor) ancestor = b;
d1154 7
a1160 1
                  wimp_plot_icon(&block);
d1174 7
a1180 1
                  wimp_plot_icon(&block);
d1410 1
d1461 1
a1461 4
//                                /* (rbox's max coords should be inclusive, not exclusive) */
//
//                                rbox.xmax--;
//                                rbox.ymax--;
d1463 2
a1464 1
                                /* Rounding errors - give some tolerance in all directions */
d1466 8
a1473 4
                                rbox.xmin -= 4;
                                rbox.ymin -= 4;
                                rbox.xmax += 3; /* (- 1 to make the coordinate inclusive, then + 2) */
                                rbox.ymax += 3;
d1475 2
a1476 2
                                {
                                  int swap;
d1478 1
a1478 2
                                  if (rbox.xmax < rbox.xmin) swap = rbox.xmax, rbox.xmax = rbox.xmin, rbox.xmin = swap;
                                  if (rbox.ymax < rbox.ymin) swap = rbox.ymax, rbox.ymax = rbox.ymin, rbox.ymin = swap;
d1480 2
a1481 3
                                  if (rbox.xmin == rbox.xmax || rbox.ymin == rbox.ymax) ibox = NULL;
                                  else                                                  ibox = set_graphics_intersection(&rbox, &r->redraw_area);
                                }
@


1.2
log
@Fixed font background colour for select display fields
@
text
@d1630 3
a1632 3
                       (tp->type & TYPE_RESET) == TYPE_TEXT     ||
                       (tp->type & TYPE_RESET) == TYPE_PASSWORD ||
                       (tp->style & (TEXTAREA | SELECT))
d1679 1
a1679 1
                                           (tp->type & TYPE_RESET) == TYPE_PASSWORD);
d1743 1
a1743 1
                  else switch(tp->type & TYPE_RESET)
d1747 8
a1754 7
                    case TYPE_CHECKBOX: if (nocontent != tp) redraw_switch(b,
                                                                           tp,
                                                                           x,
                                                                           y + base,
                                                                           form_get_field(b,
                                                                                          d->cdata[cn].t) -> checked ? "fopton" : "foptoff",
                                                                           r);
d1757 8
a1764 7
                    case TYPE_RADIO:    if (nocontent != tp) redraw_switch(b,
                                                                           tp,
                                                                           x,
                                                                           y + base,
                                                                           form_get_field(b,
                                                                                          d->cdata[cn].t) -> checked ? "fradioon" : "fradiooff",
                                                                           r);
d1767 4
a1770 2
                    case TYPE_IMAGE:
                    case TYPE_HIDDEN: break;
d1772 2
a1773 2
                    case TYPE_SUBMIT: /* SUBMIT same as RESET: no break */
                    case TYPE_RESET:
d1775 3
a1777 3
                      BBox   box;
                      int    fh, ox, oy, colour;
                      char * p;
d1852 5
a1856 1
                  int  ox, oy, o = 0;
d1885 1
a1885 1
                      o = tp->maxlen * 2;
d1898 2
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d1671 1
a1671 1
                                         Redraw_Colour_White);
@
