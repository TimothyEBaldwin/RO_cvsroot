head	1.22;
access;
symbols
	Browse-2_16:1.22
	Browse-2_15:1.22
	Browse-2_14:1.22
	Browse-2_13:1.22
	Browse-2_12:1.22
	Browse-2_11:1.22
	Browse-2_10:1.22
	Browse-2_09:1.22
	ahodgkin_208_i4_2:1.21
	ahodgkin_208_i4:1.19
	ahodgkin_208_i3:1.19
	ahodgkin_208_i2:1.19
	ahodgkin_208_i1:1.19
	ahodgkin_207release:1.18
	ahodgkin_206release:1.16
	ahodgkin_205release:1.15
	ahodgkin_204release:1.15
	ahodgkin_202release:1.15
	ahodgkin_201release:1.14
	ahodgkin_200release:1.14
	ahodgkin_133beta:1.14
	ahodgkin_132beta:1.14
	ahodgkin_131beta:1.14
	ahodgkin_130beta:1.14
	ahodgkin_129:1.14
	ahodgkin_128beta:1.13
	ahodgkin_128alpha:1.12
	ahodgkin_127beta2:1.12
	ahodgkin_127beta:1.11
	ahodgkin_126beta:1.9
	ahodgkin_AW97patch:1.8
	ahodgkin_AW97:1.8;
locks; strict;
comment	@# @;


1.22
date	2005.04.26.09.42.34;	author ahodgkin;	state Exp;
branches;
next	1.21;

1.21
date	2000.11.14.08.45.07;	author ahodgkin;	state Exp;
branches;
next	1.20;

1.20
date	2000.05.31.15.58.42;	author ahodgkin;	state Exp;
branches;
next	1.19;

1.19
date	99.03.30.15.51.56;	author ahodgkin;	state Exp;
branches;
next	1.18;

1.18
date	98.10.13.16.34.04;	author ahodgkin;	state Exp;
branches;
next	1.17;

1.17
date	98.09.07.11.46.56;	author ahodgkin;	state Exp;
branches;
next	1.16;

1.16
date	98.07.09.10.27.17;	author ahodgkin;	state Exp;
branches;
next	1.15;

1.15
date	98.03.20.12.12.52;	author ahodgkin;	state Exp;
branches;
next	1.14;

1.14
date	97.12.12.11.17.56;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	97.12.04.11.22.56;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	97.11.21.16.08.56;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	97.11.20.16.04.39;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	97.11.19.10.29.06;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	97.10.30.17.11.09;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.10.16.13.23.16;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.10.09.10.52.06;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.10.07.17.03.45;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.09.22.07.43.20;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.09.14.19.18.15;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.09.12.17.19.28;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.08.28.16.08.03;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.08.18.09.24.02;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.22
log
@  Huge pile of changes bringing relatively ancient sources up to date.
Detail:
  This check-in includes Phoenix version 2.11 (26-Apr-2005); only the
  debug and JavaScript builds of Phoenix have been tested and resources
  will definitely be out of date for other versions. The various "!..."
  scripts have been updated to require a minimum of 2MB with no maximum
  limit for building, as CC 5.60 is quite RAM hungry.
Admin:
  Phoenix 2.11 JS builds OK, works reasonably well. Many outstanding
  issues of course, as this is a very outdated browser now.

Version 2.09. Tagged as 'Browse-2_09'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    OpenURL.c                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Functions relating to the Open URL dialogue box.  */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 17-Apr-1997 (ADH): Created.                       */
/*          24-May-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#include <stdlib.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#include <HTMLLib/HTMLLib.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <tboxlibs/event.h>

#include <tboxlibs/toolbox.h>
#include <tboxlibs/window.h>

#include "Global.h"
#include "FromROSLib.h"
#include "MiscDefs.h"
#include "Utils.h"

#include "Browser.h"
#include "Fetch.h" /* (For ISLINK macro) */
#include "FetchPage.h"
#include "History.h"
#include "Hotlist.h"
#include "JavaScript.h"
#include "Menus.h"
#include "URLutils.h"
#include "Windows.h"

#include "OpenURL.h"

/* Local structures */

typedef struct openurl_contents
{
  char         url[Limits_URLBarWrit];

  /* Where to open the URL to */

  unsigned int in_this   :1;
  unsigned int save_link :1;
  unsigned int in_new    :1;
  unsigned int in_parent :1;

} openurl_contents;

/* Local statics */

// We *really* want to be mallocing this...
static openurl_contents   contents;           /* Remember the old dialogue contents so the Cancel button can work */

static ObjectId           window_id   = 0;    /* Remember the ID in case it needs closing 'out of the blue'. */
static ObjectId           ancestor_id = 0;    /* Remember the ancestor ID in case the ancestor closes. */

static HStream          * open_hst    = NULL; /* See openurl_to_show_from_menu */

#ifndef REMOTE_HOTLIST
  static char           * match_list  = NULL; /* For Ctrl+Tab URL completion */
#endif

/* Static function prototypes */

static _kernel_oserror * openurl_read_contents   (ObjectId dialogue, openurl_contents * contents);
static _kernel_oserror * openurl_set_contents    (ObjectId dialogue, openurl_contents * contents);

static int               openurl_ok              (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int               openurl_cancel          (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int               openurl_radio_group_one (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int               openurl_click           (int eventcode, WimpPollBlock * b, IdBlock * idb, void * handle);
static int               openurl_key_handler     (int eventcode, WimpPollBlock * b, IdBlock * idb, void * handle);

static unsigned int      openurl_url_completion  (char * url, unsigned int size, int key);
static unsigned int      openurl_protocol_cycle  (ObjectId o, int key);

/**************************************************************/
/* openurl_read_contents()                                    */
/*                                                            */
/* Reads the contents of the Open URL dialogue into an        */
/* openurl_contents structure.                                */
/*                                                            */
/* Parameters: Object ID of the dialogue;                     */
/*                                                            */
/*             Pointer to the structure to write to.          */
/**************************************************************/

static _kernel_oserror * openurl_read_contents(ObjectId dialogue, openurl_contents * contents)
{
  _kernel_oserror * e;
  int               state;

  /* Read the URL string */

  *contents->url = 0;

  e = writablefield_get_value(0,
                              dialogue,
                              OpenWrit,
                              contents->url,
                              sizeof(contents->url),
                              NULL);

  contents->url[sizeof(contents->url) - 1] = 0; /* (Ensure termination) */

  if (e) return e;

  /* Read radio group 1 - where to open the URL */

  RetError(radiobutton_get_state(0, dialogue, OpenInThis,   &state, NULL)); contents->in_this   = !!state;
  RetError(radiobutton_get_state(0, dialogue, OpenSaveLink, &state, NULL)); contents->save_link = !!state;
  RetError(radiobutton_get_state(0, dialogue, OpenInNew,    &state, NULL)); contents->in_new    = !!state;
  RetError(radiobutton_get_state(0, dialogue, OpenInParent, &state, NULL)); contents->in_parent = !!state;

  /* Finished */

  return NULL;
}

/**************************************************************/
/* openurl_set_contents()                                     */
/*                                                            */
/* Sets the contents of the Open URL dialogue from an         */
/* openurl_contents structure.                                */
/*                                                            */
/* Parameters: Object ID of the dialogue;                     */
/*                                                            */
/*             Pointer to the structure to read from.         */
/**************************************************************/

static _kernel_oserror * openurl_set_contents(ObjectId dialogue, openurl_contents * contents)
{
  /* The URL entry field */

  RetError(writablefield_set_value(0,
                                   dialogue,
                                   OpenWrit,
                                   contents->url));

  /* Radio group 1 - where to open the URL */

  RetError(radiobutton_set_state(0, dialogue, OpenInThis,   contents->in_this));
  RetError(radiobutton_set_state(0, dialogue, OpenSaveLink, contents->save_link));
  RetError(radiobutton_set_state(0, dialogue, OpenInNew,    contents->in_new));
  return   radiobutton_set_state(0, dialogue, OpenInParent, contents->in_parent);
}

/**************************************************************/
/* openurl_fill_in_url()                                      */
/*                                                            */
/* If an external function wants to set the URL in the        */
/* writable field of the Open URL dialogue, this is the       */
/* function to use.                                           */
/*                                                            */
/* Parameters: Pointer to the null terminated URL string.     */
/**************************************************************/

_kernel_oserror * openurl_fill_in_url(char * url)
{
  if (!url || !window_id) return NULL;

  return writablefield_set_value(0,
                                 window_id,
                                 OpenWrit,
                                 url);
}

/**************************************************************/
/* openurl_to_be_shown()                                      */
/*                                                            */
/* Called when the EOpenToBeShownMisc event is generated,     */
/* typically when the Open URL window is about to be shown.   */
/* Handles any icon processing commands in the writable,      */
/* registers event handlers, etc.                             */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int openurl_to_be_shown(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  char text[Limits_URLBarWrit];

  /* In multiuser builds, must be logged in... */

  #ifndef SINGLE_USER

    if (!logged_in)
    {
      toolbox_hide_object(0, idb->self_id);
      return 1;
    }

  #endif

  /* If the stored dialogue ID is non-zero on entry, the dialogue */
  /* was reopened without closing - so get rid of the various     */
  /* event handlers before we reregister them.                    */

  if (window_id) openurl_close(0, 1);

  /* Read the window ID and ancestor ID from the ID block */

  window_id   = idb->self_id;
  ancestor_id = idb->ancestor_id;

  /* Process the icon text */

  ChkError(windows_process_component_text(idb->self_id, OpenWrit, text, sizeof(text), 0, 1));

  /* Attach handlers for the various actions the window can perform */

  ChkError(event_register_toolbox_handler(idb->self_id, EOpenOK,     openurl_ok,              NULL));
  ChkError(event_register_toolbox_handler(idb->self_id, EOpenCancel, openurl_cancel,          NULL));
  ChkError(event_register_toolbox_handler(idb->self_id, EOpenRG1,    openurl_radio_group_one, NULL));

  ChkError(event_register_wimp_handler(idb->self_id,
                                       Wimp_EKeyPressed,
                                       openurl_key_handler,
                                       NULL));

  ChkError(event_register_wimp_handler(idb->self_id,
                                       Wimp_EMouseClick,
                                       openurl_click,
                                       NULL));

  /* Make sure the radios are up to date */

  openurl_radio_group_one(eventcode, event, idb, handle);

  /* Read the existing contents into the static openurl_contents block */

  ChkError(openurl_read_contents(idb->self_id, &contents));

  /* Do we have a History? */

  if (history_empty(NULL)) set_gadget_state(idb->self_id, OpenHistory, 1);
  else                     set_gadget_state(idb->self_id, OpenHistory, 0);

  /* Was the menu that generated this dialogue - if any - opened */
  /* over a link? If so, write the URL to the dialogue.          */
  /*                                                             */
  /* See openurl_to_show_from_menu for more details.             */

  if (open_hst)
  {
    if (ISLINK(open_hst))
    {
      /* Don't put internal URLs in there! */

      if (!urlutils_internal_extra(open_hst->anchor))
      {
        StrNCpy0(contents.url, open_hst->anchor);
        ChkError(openurl_set_contents(idb->self_id, &contents));
      }
    }
    else if (
              open_hst->style & IMG ||
              (
                open_hst->tagno         == TAG_INPUT &&
                HtmlINPUTtype(open_hst) == inputtype_IMAGE
              )
            )
    {
      /* If it is an image, write the image source URL to the dialogue */

      StrNCpy0(contents.url, open_hst->src);
      ChkError(openurl_set_contents(idb->self_id, &contents));
    }
    else if (ISOBJECT(open_hst))
    {
      const char   * data;
      const char   * current;
      browser_data * b = NULL;

      if (ancestor_id) toolbox_get_client_handle(0, idb->self_id, (void *) &b);
      if (b && !is_known_browser(b)) b = NULL;

      /* If it is an Object, write an appropriate URL in there, */
      /* remembering to relativise it where possible.           */

      data            = HtmlOBJECTdata(open_hst);
      if (!data) data = HtmlOBJECTcodebase(open_hst);

      if (b)
      {
        current = browser_fetch_url(b);
        if (!current) current = browser_current_url(b);

        if (current)
        {
          const char * newdata;

          newdata = HtmlRelativiseURL(current, data, open_hst);

          if (newdata) data = newdata;
        }
      }

      StrNCpy0(contents.url, data);
      ChkError(openurl_set_contents(idb->self_id, &contents));
    }

    /* Clear the value */

    open_hst = NULL;
  }

  return 1;
}

/**************************************************************/
/* openurl_to_show_from_menu()                                */
/*                                                            */
/* Called when the EOpenToBeShownMenu event is generated,     */
/* typically when the Open URL window is about to be shown    */
/* from a menu item.                                          */
/*                                                            */
/* To be able to show the URL of a link in the window, menu   */
/* functions have to read the token the pointer is over and   */
/* remember it. But to ensure this doesn't get out of date,   */
/* the value is cleared when the menu is hidden.              */
/*                                                            */
/* Unhelpfully, the Toolbox sends events out in an order that */
/* means the value is cleared before the EOpenToBeShownMisc   */
/* event is raised.                                           */
/*                                                            */
/* To get round that, the menu entry itself raises            */
/* EOpenToBeShownMenu, so this function is called. It reads   */
/* the value and stores it locally - great... Two copies      */
/* hanging around. Anyway, when the EOpenToBeShownMisc event  */
/* finally arrives, openurl_to_be_shown is called, reads the  */
/* value set here, acts on it, and clears the value to ensure */
/* correct behaviour on future calls.                         */
/*                                                            */
/* All this because the events arrive in a silly order. Sigh. */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int openurl_to_show_from_menu(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  open_hst = menus_document_opened_over();

  return 1;
}

/**************************************************************/
/* openurl_update_popup()                                     */
/*                                                            */
/* Ensures that the greyed/ungreyed state of the History menu */
/* popup in the Open URL dialogue is up to date.              */
/**************************************************************/

void openurl_update_popup(void)
{
  if (!window_id) return;

  if (history_empty(NULL)) set_gadget_state(window_id, OpenHistory, 1);
  else                     set_gadget_state(window_id, OpenHistory, 0);
}

/**************************************************************/
/* openurl_ok()                                               */
/*                                                            */
/* Handles clicks on the 'OK' button in the Open URL          */
/* dialogue.                                                  */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

static int openurl_ok(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  openurl_contents          localcontents;
  WimpGetPointerInfoBlock   info;
  browser_data            * b;
  browser_data            * ancestor;

  /* Work out where the dialogue came from */

  ChkError(wimp_get_pointer_info(&info));

  if (!idb->ancestor_id) b = ancestor = NULL;
  else
  {
    ChkError(toolbox_get_client_handle(0, idb->ancestor_id, (void *) &b));

    if (is_known_browser(b)) ancestor = b->ancestor;
    else                     ancestor = b = NULL;
  }

  /* Read the dialogue contents */

  ChkError(openurl_read_contents(idb->self_id, &localcontents));

  /* If the URL lacks a '.', '/' or ':', try auto-completion (as if Ctrl+Tab */
  /* had been pressed).                                                      */

  if (
       !strchr(localcontents.url, ':') &&
       !strchr(localcontents.url, '.') &&
       !strchr(localcontents.url, '/')
     )
     openurl_url_completion(localcontents.url, sizeof(localcontents.url), akbd_TabK + akbd_Ctl);

  /* If Select was pressed, the dialogue will close, so */
  /* remember the current contents for future reference */
  /* (no button => Return was pressed)                  */

  if ((info.button_state & Wimp_MouseButtonSelect) || !info.button_state) contents = localcontents;

  /* Fetch the indicated URL */

  if (*localcontents.url)
  {
    #ifdef JAVASCRIPT

      /* If this is a JavaScript URL, the script will end up    */
      /* being executed. Tell the JavaScript interface routines */
      /* that it came from the Open URL dialogue's writable.    */

      if (javascript_url(localcontents.url)) javascript_set_source(JavaScript_Source_URLWritable);

    #endif

    /* If asked to open in a new window or saving the object, */
    /* open a new window (this will be a small fetch window   */
    /* in the latter case).                                   */

    if (localcontents.in_new || localcontents.save_link || !b)
    {
      ChkError(windows_create_browser(localcontents.url,
                                      NULL,
                                      NULL,
                                      NULL,
                                      localcontents.save_link ? Windows_CreateBrowser_SaveToFile : Windows_CreateBrowser_Normal));
    }

    /* Otherwise, open the URL in the browser window from which */
    /* the dialogue was obtained in the first place.            */

    else
    {
      browser_data * fetch;

      /* Work out which existing window to fetch to */

      if (localcontents.in_this || localcontents.save_link) fetch = b;
      else                                                  fetch = ancestor;

      /* Set that window's save_link and allow_cancel */
      /* flags according to the dialogue contents     */

      fetch->save_link = localcontents.save_link;
      if (fetch->save_link) b->allow_cancel = 0;

      /* Initiate the fetch */

      ChkError(fetchpage_new(fetch, localcontents.url, 1, 1, 0));
    }
  }

  if ((info.button_state & Wimp_MouseButtonSelect) || !info.button_state)
  {
    ChkError(openurl_close(0, 0));
  }

  return 1;
}

/**************************************************************/
/* openurl_cancel()                                           */
/*                                                            */
/* Handles clicks on the 'Cancel' button in the Open URL      */
/* dialogue.                                                  */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

static int openurl_cancel(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  WimpGetPointerInfoBlock info;

  /* Restore the old contents */

  ChkError(openurl_set_contents(window_id, &contents));

  /* If Select was pressed, the dialogue should close. */
  /* (No button => Escape was pressed).                */

  ChkError(wimp_get_pointer_info(&info));

  if ((info.button_state & Wimp_MouseButtonSelect) || !info.button_state)
  {
    ChkError(openurl_close(0, 0));
  }

  return 1;
}

/**************************************************************/
/* openurl_close()                                            */
/*                                                            */
/* If the Open URL dialogue is opened, this will close it,    */
/* deregistering any associated event handlers.               */
/*                                                            */
/* Parameters: An object ID, or 0. If not zero, the ID must   */
/*             match the ancestor recorded when the dialogue  */
/*             was opened or no action is taken.              */
/*                                                            */
/*             0 to close the dialogue, 1 to do everything    */
/*             except that.                                   */
/**************************************************************/

_kernel_oserror * openurl_close(ObjectId ancestor, int do_not_close)
{
  _kernel_oserror * e = NULL;

  if (ancestor && ancestor != ancestor_id) return NULL;

  if (window_id)
  {
    /* Deregister associated event handlers */

    e = event_deregister_toolbox_handlers_for_object(window_id);
    if (e) goto openurl_close_exit;

    e = event_deregister_wimp_handlers_for_object(window_id);
    if (e) goto openurl_close_exit;

    /* Restore the old contents */

    e = openurl_set_contents(window_id, &contents);
    if (e) goto openurl_close_exit;

    /* Close the dialogue */

    if (!do_not_close) e = toolbox_hide_object(0, window_id);
  }

openurl_close_exit:

  ancestor_id = window_id = 0;
  return e;
}

/**************************************************************/
/* openurl_radio_group_one()                                  */
/*                                                            */
/* Looks at radio group one and greys or ungreys items as     */
/* required. Usually used as a handler for when the selection */
/* therein changes, but can be used in a more general purpose */
/* way.                                                       */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

static int openurl_radio_group_one(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  _kernel_oserror * e;
  browser_data    * b;
  browser_data    * ancestor;
  int               state;

  /* Note that few errors are reported here - this allows items to be */
  /* removed from the window without causing errors to appear.        */

  if (!idb->ancestor_id) b = ancestor = NULL;
  else
  {
    ChkError(toolbox_get_client_handle(0, idb->ancestor_id, (void *) &b));

    if (is_known_browser(b)) ancestor = b->ancestor;
    else                     ancestor = b = NULL;
  }

  /* If b is NULL, this was not opened from a browser window */

  if (!b)
  {
    /* Grey out the gadget. Try to read its state, and, if this */
    /* succeds and the gadget was selected, then select the     */
    /* 'Open in new window' gadget instead - this will never be */
    /* greyed out.                                              */

    gadget_set_flags(0,
                     idb->self_id,
                     OpenInThis,
                     Gadget_Faded);

    e = radiobutton_get_state(0,
                              idb->self_id,
                              OpenInThis,
                              &state,
                              NULL);

    if (!e && state) radiobutton_set_state(0,
                                           idb->self_id,
                                           OpenInNew,
                                           1);
  }
  else gadget_set_flags(0,
                        idb->self_id,
                        OpenInThis,
                        0);

  /* If ancestor is NULL, this was not opened from a frame */

  if (!ancestor)
  {
    gadget_set_flags(0,
                     idb->self_id,
                     OpenInParent,
                     Gadget_Faded);

    e = radiobutton_get_state(0,
                              idb->self_id,
                              OpenInParent,
                              &state,
                              NULL);

    if (!e && state) radiobutton_set_state(0,
                                           idb->self_id,
                                           OpenInNew,
                                           1);
  }
  else gadget_set_flags(0,
                        idb->self_id,
                        OpenInParent,
                        0);
  return 1;
}

/**************************************************************/
/* openurl_click()                                            */
/*                                                            */
/* Handles Wimp mouse click events in the Open URL dialogue.  */
/*                                                            */
/* Parameters are as standard for a Wimp event handler.       */
/**************************************************************/

static int openurl_click(int eventcode, WimpPollBlock * b, IdBlock * idb, void * handle)
{
  int used = 0;

  switch (idb->self_component)
  {
    case OpenHistory:
    {
      ChkError(history_menu_popup(NULL,
                                  idb->self_id,
                                  idb->self_component,
                                  1,
                                  b->mouse_click.buttons & Wimp_MouseButtonAdjust ? !choices.show_urls : choices.show_urls));
      used = 1;
    }
    break;
  }

  return used;
}

/**************************************************************/
/* openurl_url_completion()                                   */
/*                                                            */
/* Take a partial URL string and look through the hotlist     */
/* then history titles then URLs for a match.                 */
/*                                                            */
/* Once one match is found successive calls may be made to    */
/* cycle through the list generated by the first search.      */
/*                                                            */
/* Parameters: Pointer to the URL to begin with;              */
/*                                                            */
/*             Size of the buffer the URL is in;              */
/*                                                            */
/*             Key number used - Ctrl+Tab will search         */
/*             forwards, add Shift to search backwards.       */
/*                                                            */
/* Returns:    1 if a URL was written back to the dialogue    */
/*             box, else 0.                                   */
/**************************************************************/

static unsigned int openurl_url_completion(char * url, unsigned int size, int key)
{
  #ifndef REMOTE_HOTLIST

    if (!url || size < 2) return 0;

    /* Try and find something appropriate in the hotlist, */
    /* then the history.                                  */

    if (key == akbd_TabK + akbd_Ctl)
    {
      if (browser_find_matching_url((flex_ptr) &match_list, url, size))
      {
        return 1;
      }
    }
    else
    {
      if (browser_find_match_backwards((flex_ptr) &match_list, url, size))
      {
        return 1;
      }
    }

  #endif

  return 0;
}

/**************************************************************/
/* openurl_protocol_cycle()                                   */
/*                                                            */
/* Cycle the protocol string at the front of a URL through    */
/* the known protocols. The URL string is assumed to be in    */
/* the Open URL dialogue box and will be written back there.  */
/*                                                            */
/* Parameters: ObjectID of dialogue box to use (component     */
/*             used is the predefined 'OpenWrit');            */
/*                                                            */
/*             Key number used - currently always akbd_TabK + */
/*             akbd_Sh.                                       */
/*                                                            */
/* Returns:    1 if the URL was changed, else zero.           */
/**************************************************************/

static unsigned int openurl_protocol_cycle(ObjectId o, int key)
{
  _kernel_oserror * e;
  char              url[Limits_URLBarWrit];
  int               changed = 0;

  /* Read whatever is in the URL bar writable */

  *url = 0;

  e = writablefield_get_value(0,
                              o,
                              OpenWrit,
                              url,
                              sizeof(url),
                              NULL);

  if (!e)
  {
    url[sizeof(url) - 1] = 0; /* (Ensure termination) */

    /* Cycle the protocol specifier (adding one in if not already present) */

    changed = urlutils_cycle_protocol(url, sizeof(url));

    if (changed)
    {
      /* Update the URL writable */

      writablefield_set_value(0,
                              o,
                              OpenWrit,
                              url);
    }
  }

  return changed;
}

/**************************************************************/
/* openurl_key_handler()                                      */
/*                                                            */
/* Handles a few key pressed events in the Open URL dialogue. */
/*                                                            */
/* Parameters are as standard for a Wimp event handler.       */
/**************************************************************/

static int openurl_key_handler(int eventcode, WimpPollBlock * b, IdBlock * idb, void * handle)
{
  int key;

  key = ((WimpKeyPressedEvent *) b)->key_code;

  switch (key)
  {
    case akbd_TabK + akbd_Ctl:
    case akbd_TabK + akbd_Ctl + akbd_Sh:
    {
      _kernel_oserror * e;
      char              url[Limits_URLBarWrit];

      #ifndef REMOTE_HOTLIST

        *url = '\0';

        e = writablefield_get_value(0,
                                    idb->self_id,
                                    OpenWrit,
                                    url,
                                    sizeof(url),
                                    NULL);

        if (!e)
        {
          url[sizeof(url) - 1] = '\0'; /* (Ensure termination) */

          if (openurl_url_completion(url, sizeof(url), key))
          {
            writablefield_set_value(0,
                                    idb->self_id,
                                    OpenWrit,
                                    url);
          }
        }

        key = 0;

      #else

        (void) url;
        (void) e;

      #endif
    }
    break;

    case akbd_TabK + akbd_Sh:
    {
      openurl_protocol_cycle(idb->self_id, key);
      key = 0;
    }
    break;
  }

  if (key) wimp_process_key(key);

  return 1;
}
@


1.21
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@d484 1
a484 1
      ChkError(fetchpage_new(fetch, localcontents.url, 1, 1));
@


1.20
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@a42 5
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

@


1.19
log
@Intermediate check-in; building a browser from this gives you something
between 2.07 and 2.08. Only the Phoenix JavaScript resources are fully
up to date.

I *think* these are the changes since the last check-in:

When saved as a Draw file, horizontal rules were plotted one page width
too far to the right (wonder when that started happening?!). Fixed. In
addition, DrawFiles now accepted as OBJECTs - they weren't in the
recognised filetype list before. Doh.

Table size calculator tables_count_table would overestimate the number
of cells where ROWSPAN was present and there were other rows below the
one spanned. Fixed. In certain odd cases (e.g. optimised image exports
as HTML tables (!!) from the Gimp) this can save vast amounts of RAM.

Fixed problem where printing stops in the middle of a document. Redraw
engine pagination code was written in the days where lines couldn't
have gaps between them; they can now. If a gap fell at the bottom of
a page the engine would look down, see no line straddling or touching
the page edge, and assume there was nothing more. This case is now
correctly handled.

Made sure desktop and testbed Browse Res files had up-to-date Encoding
menus (v2.07 Phoenix has different menus from v2.07 Browse by oversight).

URL auto-completion piggy-backed onto manual completion code; any string
without '.', '/' or ':' in it gets run through completion to see if a
more meaningful item can be produced - "www" special cased out though.

New List dialogue box handler, used for proxy exclusions etc.
(incomplete), complete with appropriate Res file objects.
@
text
@d15 12
a26 10
/***************************************************/
/* File   : OpenURL.c                              */
/*                                                 */
/* Purpose: Functions relating to the Open URL     */
/*          dialogue box.                          */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 17-Apr-97: Created.                    */
/***************************************************/
d31 2
a32 1
#include "swis.h"
d34 1
a34 1
#include "HTMLLib.h" /* HTML library API, Which will include html2_ext.h, tags.h and struct.h */
d36 3
a38 3
#include "wimp.h"
#include "wimplib.h"
#include "event.h"
d40 7
a46 2
#include "toolbox.h"
#include "window.h"
a47 1
#include "svcprint.h"
d108 10
a117 11
/*************************************************/
/* openurl_read_contents()                       */
/*                                               */
/* Reads the contents of the Open URL dialogue   */
/* into an openurl_contents structure.           */
/*                                               */
/* Parameters: Object ID of the dialogue;        */
/*                                               */
/*             Pointer to the structure to write */
/*             to.                               */
/*************************************************/
d151 10
a160 11
/*************************************************/
/* openurl_set_contents()                        */
/*                                               */
/* Sets the contents of the Open URL dialogue    */
/* from an openurl_contents structure.           */
/*                                               */
/* Parameters: Object ID of the dialogue;        */
/*                                               */
/*             Pointer to the structure to read  */
/*             from.                             */
/*************************************************/
d179 9
a187 10
/*************************************************/
/* openurl_fill_in_url()                         */
/*                                               */
/* If an external function wants to set the URL  */
/* in the writable field of the Open URL         */
/* dialogue, this is the function to use.        */
/*                                               */
/* Parameters: Pointer to the null terminated    */
/*             URL string.                       */
/*************************************************/
d199 10
a208 12
/*************************************************/
/* openurl_to_be_shown()                         */
/*                                               */
/* Called when the EOpenToBeShownMisc event is   */
/* generated, typically when the Open URL window */
/* is about to be shown. Handles any icon        */
/* processing commands in the writable,          */
/* registers event handlers, etc.                */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d342 28
a369 34
/*************************************************/
/* openurl_to_show_from_menu()                   */
/*                                               */
/* Called when the EOpenToBeShownMenu event is   */
/* generated, typically when the Open URL window */
/* is about to be shown from a menu item.        */
/*                                               */
/* To be able to show the URL of a link in the   */
/* window, menu functions have to read the       */
/* token the pointer is over and remember it.    */
/* But to ensure this doesn't get out of date,   */
/* the value is cleared when the menu is hidden. */
/*                                               */
/* Unhelpfully, the Toolbox sends events out in  */
/* an order that means the value is cleared      */
/* before the EOpenToBeShownMisc event is        */
/* raised.                                       */
/*                                               */
/* To get round that, the menu entry itself      */
/* raises EOpenToBeShownMenu, so this function   */
/* is called. It reads the value and stores it   */
/* locally - great... Two copies hanging around. */
/* Anyway, when the EOpenToBeShownMisc event     */
/* finally arrives, openurl_to_be_shown is       */
/* called, reads the value set here, acts on it, */
/* and clears the value to ensure correct        */
/* behaviour on future calls.                    */
/*                                               */
/* All this because the events arrive in a silly */
/* order. Sigh.                                  */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d378 6
a383 7
/*************************************************/
/* openurl_update_popup()                        */
/*                                               */
/* Ensures that the greyed/ungreyed state of the */
/* History menu popup in the Open URL dialogue   */
/* is up to date.                                */
/*************************************************/
d393 8
a400 9
/*************************************************/
/* openurl_ok()                                  */
/*                                               */
/* Handles clicks on the 'OK' button in the      */
/* Open URL dialogue.                            */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d501 8
a508 9
/*************************************************/
/* openurl_cancel()                              */
/*                                               */
/* Handles clicks on the 'Cancel' button in the  */
/* Open URL dialogue.                            */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d531 13
a543 15
/*************************************************/
/* openurl_close()                               */
/*                                               */
/* If the Open URL dialogue is opened, this will */
/* close it, deregistering any associated event  */
/* handlers.                                     */
/*                                               */
/* Parameters: An object ID, or 0. If not zero,  */
/*             the ID must match the ancestor    */
/*             recorded when the dialogue was    */
/*             opened or no action is taken.     */
/*                                               */
/*             0 to close the dialogue, 1 to do  */
/*             everything except that.           */
/*************************************************/
d577 10
a586 11
/*************************************************/
/* openurl_radio_group_one()                     */
/*                                               */
/* Looks at radio group one and greys or ungreys */
/* items as required. Usually used as a handler  */
/* for when the selection therein changes, but   */
/* can be used in a more general purpose way.    */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d664 7
a670 9
/*************************************************/
/* openurl_click()                               */
/*                                               */
/* Handles Wimp mouse click events in the Open   */
/* URL dialogue.                                 */
/*                                               */
/* Parameters are as standard for a Wimp event   */
/* handler.                                      */
/*************************************************/
d693 19
a711 22
/*************************************************/
/* openurl_url_completion()                      */
/*                                               */
/* Take a partial URL string and look through    */
/* the hotlist then history titles then URLs for */
/* a match.                                      */
/*                                               */
/* Once one match is found successive calls may  */
/* be made to cycle through the list generated   */
/* by the first search.                          */
/*                                               */
/* Parameters: Pointer to the URL to begin with; */
/*                                               */
/*             Size of the buffer the URL is in; */
/*                                               */
/*             Key number used - Ctrl+Tab will   */
/*             search forwards, add Shift to     */
/*             search backwards.                 */
/*                                               */
/* Returns:    1 if a URL was written back to    */
/*             the dialogue box, else 0.         */
/*************************************************/
d742 15
a756 18
/*************************************************/
/* openurl_protocol_cycle()                      */
/*                                               */
/* Cycle the protocol string at the front of a   */
/* URL through the known protocols. The URL      */
/* string is assumed to be in the Open URL       */
/* dialogue box and will be written back there.  */
/*                                               */
/* Parameters: ObjectID of dialogue box to use   */
/*             (component used is the predefined */
/*             'OpenWrit');                      */
/*                                               */
/*             Key number used - currently       */
/*             always akbd_TabK + akbd_Sh.       */
/*                                               */
/* Returns:    1 if the URL was changed, else    */
/*             zero.                             */
/*************************************************/
d797 7
a803 9
/*************************************************/
/* openurl_key_handler()                         */
/*                                               */
/* Handles a few key pressed events in the Open  */
/* URL dialogue.                                 */
/*                                               */
/* Parameters are as standard for a Wimp event   */
/* handler.                                      */
/*************************************************/
d844 5
@


1.18
log
@Tweaks to export rules in Makefile - ResJ source for JavaScript builds,
all of User dir exported, resources rule exports About as well as User.

Handles images with a width or height of 0 specified in the HTML.
Previously went for a default size placeholder and changes to image
sizes and/or redraw problems could occur before/after subsequent
reformatting (involved trivial changes to image_get_image_size and
image_redraw_area only).

Default parameter HRs now plot properly in rectangular pixel modes.

Choices code updated to cope with the minimum font size, JS support,
watchdog on/off and timeout, Navigator object option added generally
(act even *more* like Navigator), image GC after fetch, and image
GC unused image / free RAM constraints.

Code in JSnavigator.c updated to obey new "act more like Navigator"
option (see above). Currently declares itself as version 3.0.

Resources for all builds are up to date. All links in default hotlist
verified and corrected where necessary, with several new links added.

This is Release v2.07. Not tested very much, sorry; YMMV.
@
text
@d98 3
d432 10
d706 110
d827 1
a827 2
  _kernel_oserror * e;
  int               key;
d836 3
d841 1
a841 5
        char url[Limits_URLBarWrit];

        /* Read whatever is in the URL bar writable */

        *url = 0;
d852 1
a852 1
          url[sizeof(url) - 1] = 0; /* (Ensure termination) */
d854 1
a854 4
          /* Try and find something appropriate in the hotlist, */
          /* then the history.                                  */

          if (key == akbd_TabK + akbd_Ctl)
d856 4
a859 21
            if (browser_find_matching_url((flex_ptr) &match_list, url, sizeof(url)))
            {
              /* Update the URL writable */

              writablefield_set_value(0,
                                      idb->self_id,
                                      OpenWrit,
                                      url);
            }
          }
          else
          {
            if (browser_find_match_backwards((flex_ptr) &match_list, url, sizeof(url)))
            {
              /* Update the URL writable */

              writablefield_set_value(0,
                                      idb->self_id,
                                      OpenWrit,
                                      url);
            }
d871 1
a871 33
      char url[Limits_URLBarWrit];
      int  changed;

      /* Read whatever is in the URL bar writable */

      *url = 0;

      e = writablefield_get_value(0,
                                  idb->self_id,
                                  OpenWrit,
                                  url,
                                  sizeof(url),
                                  NULL);

      if (!e)
      {
        url[sizeof(url) - 1] = 0; /* (Ensure termination) */

        /* Cycle the protocol specifier (adding one in if not already present) */

        changed = urlutils_cycle_protocol(url, sizeof(url));

        if (changed)
        {
          /* Update the URL writable */

          writablefield_set_value(0,
                                  idb->self_id,
                                  OpenWrit,
                                  url);
        }
      }

@


1.17
log
@Everyone else seems to be checking lots of stuff in lately, so I've
decided to join in. This is an intermediate check-in and so not all
resources etc. will be up to date. You should be able to make Phoenix
and a debug build out of it. As a reminder, to make a JavaScript build:

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean. This now strips dynamic dependencies from the MakeFile
   automatically, to save you having to do it yourself.
 * Run one of the TaskObey files with the "J" suffix, e.g. !DeskBrwsJ -
   this uses the same .o directory for object files and exports to the
   same position in the Targets directory as the non-JavaScript build,
   but it does produce a unique binary in 'abs' and symbols table in
   'syms'.
 * Sourcing an appropriate !Run (with increased WimpSlot value), !Boot
   and About resource is done automatically.
 * Some, but not all of the !xxxD (debug) TaskObey files will make
   JavaScript versions in passing - check the JSUFFIX value on the Make
   command line parameters in the file.

This'll only work on RISC OS 3.1 due to the use of MemLib.

Here's the change list:

Included MNG icons in sprites files; added Sprites23 for some builds.
Added in ANT URL file icon (b28) derived from URI file icon, because
the Save dialogue can need it.

No, you do *not* need to define the same keyboard shortcuts in each
frame since the ancestor keeps the input focus and we've basically
dropped non-nested Wimp support. Maintaining no less than 4 lists of
identical shortcuts was a pain. Some Res files now only have the
lists in the main browser window and button bar objects (these two
are both required still).

Ursula build Markers button arrangement changed from 1x3 horizontal to
2x2 tilted, as in Phoenix, by popular demand.

Couple of hotlist bugs fixed; dragging an item and deleteing it with
Ctrl+X didn't terminate the drag, and deleteting an item underneath a
menu opened for it didn't close the menu.

'SendReferer' option added to all Choices files, all set to 'always'.
Put just beneath 'Clone' as it refers to header items, though really,
both Clone and SendReferer should probably be in the "Fetch controls"
section rather than "Multiuser environments and proxying"! Front-end
control of this is available.

In image_export_original, save_save_source, save_transfer_source and
save_save_object, flex_set_budge(0) was called to lock the heap but the
return value wasn't stored. flex_set_budge(1) was then used to unlock
the heap. All calls now remember and restore the old value, which is
both safer in case one calls another and allows the flex_set_budge
call in Main.c to have an application-wide meaning, as intended.

Some restructuring to the data load and RAM transfer sections of
Protocols.c; remote hotlist builds wouldn't allow files to be loaded
to browser windows before, and can now drop URL, URI or text files to
the Open URL dialogue.

New option "MinimumFontSize", lets the 'size' attribute of the 'font'
element be overridden. Default value is 1, to allow the full range of
values for the attribute. Setting to 7, for example, would give font
size 7 text at all times. Another new option, "ToggleOnXOnly", to
make Toggle Size only extend the window vertically (with Ctrl then
being used to toggle to genuine full size, rather than vice versa).
All Choices files updated to hold both of these options; only the
first has front-end control available (see debug build Res file).

JavaScript Document object exists; frames array etc. working. Can now
just about use "http://www.acorn.com/~ahodgkin/jschain/" but it does
abort after a bit - problems with frames again, I suspect. Is is pretty
slow, too. Can now press Escape to terminate a script.

Main.c erroneously referred to Controls file entry "StopWebServe" as
"StopWebProxy". Fixed.

Keyboard shortcuts to raise SaveFile are now possible in a general sense;
the code before was in the ToBeShown handler and just checked for a parent
component of -1. It then assumed "save frame HTML source". Now there's the
savefile_raise_from_shortcut function, which together with the seven new
event codes in SaveFile.h allows saving of HTML source and frame location,
export of links, images, backgrounds and the page as text or draw, to all
be invoked by keyboard shortcuts. Some Res files have some of these defined.

In reformat_check_height, the first check to see if setpara should be set
references a field in tpLast without checking if it is NULL. Whilst the
'line > 0' check should mean that tpLast wasn't NULL anyway, a direct
call to the function from outside of the reformatter might have tripped
up on this - the check for tpLast != NULL is now made.

Adjust-click on close icon in window showing file: URL attempts to open
the parent Filer window.

Reformatter used to try and find a selectable token if keyboard control
was enabled in a really stupid place - could make reformatting become
very slow if no selectables were present, especially if the page had a
few tables on it. Preprocessor now does this (since it goes through all
of the tokens anyway), the reformatter just doing a last check to ensure
no frames have obscured the selectable and if so, it tries to move it.
Done in the reformatter as generating a line array implies the data really
is visible.

Ctrl+Tab URL completion now builds a full list of matches from the hotlist
and history and can cycle through them (Ctrl+Shift+Tab stepping backwards).

Will give a real error rather than just "Data Abort" if it goes wrong
now. Someone somewhere is setting bit 30 of the error which confused
the replacement signal handler. Flag bits are now masked off (as they
should've been to start with).
@
text
@a80 1
static char             * match_list  = NULL; /* For Ctrl+Tab URL completion */
d82 4
@


1.16
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d76 1
a76 1
static openurl_contents   contents;        /* Remember the old dialogue contents so the Cancel button can work */
d78 2
a79 2
static ObjectId           window_id   = 0; /* Remember the ID in case it needs closing 'out of the blue'. */
static ObjectId           ancestor_id = 0; /* Remember the ancestor ID in case the ancestor closes. */
d81 2
a82 1
static HStream          * open_hst = NULL; /* See openurl_to_show_from_menu */
d709 1
d711 1
a711 2
      char url[Limits_URLBarWrit];
      int  changed = 0;
d713 1
a713 1
      /* Read whatever is in the URL bar writable */
d715 1
a715 1
      *url = 0;
d717 1
a717 6
      e = writablefield_get_value(0,
                                  idb->self_id,
                                  OpenWrit,
                                  url,
                                  sizeof(url),
                                  NULL);
d719 6
a724 3
      if (!e)
      {
        url[sizeof(url) - 1] = 0; /* (Ensure termination) */
d726 3
a728 2
        /* Try and find something appropriate in the hotlist, */
        /* then the history.                                  */
d730 2
a731 3
        #ifndef REMOTE_HOTLIST
          changed = hotlist_find_match(url, sizeof(url));
        #endif
d733 25
a757 1
        if (!changed) changed = history_find_match(url, sizeof(url));
d759 1
a759 10
        if (changed)
        {
          /* Update the URL writable */

          writablefield_set_value(0,
                                  idb->self_id,
                                  OpenWrit,
                                  url);
        }
      }
d761 1
a761 1
      key = 0;
@


1.15
log
@Programming warehouse link removed from all hotlists - the page has gone.

Some compile-time hacks in place to use MemLib, a dynamic area based
malloc replacement which shrinks its heap when possible. All builds
have these switched off at the moment. Seemed to work with just Browse,
though there would be problems with message blocks stored in dynamic
areas because of the Wimp's '&3800000' check - however, it failed when
HTMLLib was made to use it, too. Don't know why yet.

ItemInfo.[c/h] source added, with Res file additions for testbed Browse
and Phoenix.

Small fetch windows now work properly regardless of toolbar settings
in the Choices.

Reload now reloads all images too, rather than only reloading them for
as long as the main page was being fetched.

Added a simple 'Find' facility.

Realised that event handlers in eventlib are called in reverse order
of registration, so the miscellaneous event handler is now registered
first rather than last.

Multiuser code added (most only active if SINGLE_USER is undefined). As
part of this, hotlist code now knows about read-only items (done for the
Customer-style 'Resources' file, but works generally anyway).
handle_add_hotlist doesn't try to save the hotlist itself anymore (the
hotlist_add function does all that through hotlist_modified anyway).

Customer build Choices and Controls updated slightly (e.g. ClaimHelp
off, hotlist to save on quit only).

Customer build now uses Phoenix-style buttons. Sprites files which
worked at the time (but will probably be out of date now) and included
most of the original Customer-style sprites are in
'Utils.Icons.Customer'.

Choices, Messages and Res files for all builds now stripped down to only
single user items or single plus multiuser for Customer build and testbed
build. Before, all contained a few multiuser bits in at least the Choices
file if not more.

Grammatical error ("Fetching frames contents" (sic.)) corrected in
default message, Toolbars.c, and all of the Messages files.

Customer build brought back to a servicable level (including
implementation of the Find dialogue box with animation and fixing
up authorisation and 'Stop' state in the tristate). Quite a few
missing #ifndef REMOTE_HOTLIST bits from hotlist code added...

Customer build will not use <Choices$Write> or Boot:Choices for any
file finding now. UseProxy defaults to 'yes', MaxImages to 2. Res
file includes Proxy Address setting (save_save_choices() now writes
the ProxyAddress line).
@
text
@d51 1
d435 10
@


1.14
log
@There are a few known significant problems with this code but it's being
checked in so the Choices can be worked on. Note that Res files etc. are
not up to date across all builds. Progress is as follows...

Bug report prompted me to do this - now ignore <p> tags straight after
<li> tags, so '<ul><li><p>Some text' works as the author (or automatic
generator, more commonly) intended.

A <p> tag before a table will be acted upon now (it was ignored before).
Something like <li><p><table...> will give a line break and paragraph
space after the <li> despite the changes mentioned above, as in other browsers.
Both browsers differ from Navigator, where the table appears alongside
the <li> tag.

Multiple BR tags work as in MSIE / Navigator (they don't collapse to
zero height anymore).

For the above, line height (and so, <br><br> or <p> spacing) is now
calculated inside reformat_text_line_height, and is used with either
a token to get the text height at a given size (e.g. for general line
spacing or multiple BR tags) or NULL for normal size text (e.g. for
P spacing, though this value is in practice later scaled by 7/8ths in
reformat_check_height). Note this behaviour is exhibited by MSIE 4;
v3 gave two BRs the same spacing as one P (i.e. not font size
dependent).

Save dialogues can have an option button or couple of radios to
switch between various formats (e.g. URI or URL, sprite or original
format). See 'Docs.Notes' for more. The back-end to this is now
implemented (i.e. at the moment, save as URI or URL, save as original
image format). Note that when saving background images, a leafname
based on the original fetch URL is now offered rather than a generic
'Background'.

Internal URL scheme changed to be all lower case, so relativisation
through URL_Fetcher still makes sense... :-/

Holding down 'shift' when clicking on stop reverses the interpretation
of the Controls file 'StopWebServe' entry.

Fixed row / column count for exporting tables as text; fixed a few
bits and pieces of internal URL scheme stuff which got broken when
HTMLLib started using URL_Fetcher's relativisation.
@
text
@d204 12
@


1.13
log
@Fixed some glitches in the modified status bar code (e.g. status inference
wasn't working properly).

Shift+Toggle size always opened to not obscure the icon bar. If CMOS is
set to always show the icon bar, then Shift+Toggle size is meant to
reverse sense and open to absolute full size. It now does this.

!Run[D] files now require URL 0.22, HTTP 0.64, FTP 0.22, Gopher 0.08
and File 0.32.

Minor overhaul of 'Docs.Notes' (with 'Docs.User' similarly updated) to
include a few new bits and pieces.

Timeout values of 0 now mean 'forever'. Plug-in status messages now have
their own timeout setting. New Messages token 'Actv' for extra info when
a status message times out and the status line drops to 'Viewing' or
'Ready' when there is still a Busy state registered by the Plug-in.

Small Fetch windows don't become visible briefly for Plug-in fetches
when the fetch is complete (for SeeFetches:no, where these windows
should be hidden all the time).

WebServe may be controlled through the Browse front-end via.
Wimp_MAppControl reason code 4 (Wimp_MAppControl_Configure). Note the
renaming internally of 'WebServ' or 'WebServe' has been changed to
'Proxy' (with lower case equivalents where relevant); proxy name
and starting details come from the Messages file 'ProxyName' and
'ProxyComm' tokens. More in 'Docs.Notes'.

Res files updated for image history and PRE/TT font aspect ratio
choices. 'Don't expire' labels changed to 'Expire' (oops, didn't
notice the change in the development Browse's Res file when I
updated all of the others until now...).

When printing, Wimp_PlotIcon appears to ignore R4 and R5, plots
'somewhere' on the page, and tries to get the sprite from the global
pool. This latter part normally causes an error to be raised; though
on my machine I just get a corrupted error message. The Desktop font
gets lost at this point too. All have yet to be fixed; as an
interim work around, Wimp_PlotIcon objects are never drawn at all
if the global 'printing' flag is set.
@
text
@a150 2
  _kernel_oserror * e;

@


1.12
log
@All hotlist_find_match calls wrapped in '#ifndef REMOTE_HOTLIST' compile
time option, for Customer builds.

Cross referencing of images when the background colour is different - should
not do it for backgrounds, for e.g. alpha transparent PNGs would then fail.
This was implemented, but it turns out it affects *all* cross referencing!
Fixed for just background images.

As described in Docs.TagNames, the tag name "ahodgkin_127beta2" associated
with this checkin applies to everything *except* Choices.c. v1.27 beta 2
was build with the Choices file tagged "ahodgkin_127beta". The confusion
arises because Choices.c got independently updated and checked back in
before I checked in the v1.27 beta 2 changes myself.
@
text
@d280 1
a280 1
    else if (!ISOBJECT(open_hst))
d359 1
a359 1
  open_hst = menus_main_opened_over();
@


1.11
log
@Following the last check-in - all build resources brought up to date.

Adjust-click on forwards/backwards buttons did not work in the intermediate
build, and now does.

Adjust-click on form submission buttons where the submit method is POST
will now work correctly, as the new view inherits the extradata block
of the old. Failure of this is signalled through
make_no_fetch_memory_error, code 16 (see updated Errors file in Docs).
Note the name change of extradata in this context; more details below.

The passing of forms POST data and extra headers for sending in an
HTTP request via. the URL module was all done through pointers into
flex blocks, and was therefore very unsafe. All relevant functions now
use pointers to pointers to the data.

To remove confusion on the umpteen uses of the word 'extradata', the field
in browser_data has been renamed to 'post_data'. The 'extradata' parameters
used within FetchPage.c were all disconnected from the extra header info /
form POST data stuff that extradata is usually associated with, and have
thus also been renamed, in this case to 'appnddata' (Append Data).

As well as X-NoProxy, the browser sends the 'proper' HTTP headers
Pragma:no-cache and Cache-Control:no-cache.

A redirection from a POST request was not handled correctly; despite
what HTTP specs say, you're supposed to use GET for the new URL. The
browser was, but when it chopped off the redundant header data in the
request didn't terminate it and left Content-Type in anyway...! Fixed.

Ctrl+Tab implemented - URL completion. Comes from the hotlist URLs,
hotlist titles, history hosts, paths, full URLs and lastly titles.
See code comments for more (history_find_match, hotlist_find_match).

TableSupport option added to Choices; it is read, can be set by the
front-end, but doesn't actually do anything else yet.

Reversed Choices' semantics on 'don't expire by...' for History. Added
'needs_redraw' flag to choices_get_contents so that, for example, if the
table border types change, browsers get redrawn.
@
text
@d689 1
a689 1
      int  changed;
d709 4
a712 1
        changed               = hotlist_find_match(url, sizeof(url));
@


1.10
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d50 1
d688 36
a723 1
      // Want to have history path completion here...
@


1.9
log
@Removed 'The Onion' link from some Hotlist files. Time showed that the
site wasn't entirely Family Friendly (TM)... Removed Shift Control (it's
gone offline now), and corrected the Telegraph URL from ...the-telegraph...
to just ...telegraph...

StrongHelp manual generator now tries to work out the number of lines in
the table on the root page more intelligently.

Plug-in support extended to handle Shockwave. Quite a lot of underlying
work for this, including a pseudo cache system for temporary files.

Bug in redraw routines: they plotted background images within table
cells, when nothing should have been drawn. Oops. When background images
in cells are properly supported, this can get sorted out.

Tweaked vertical plot position of HRs (up to 4 OS units too high before due
to rounding).

Various Res file bits and pieces, Ursula build taken up to v1.26 beta
for release on the Browser site. *Note* not all resources are up to date!
This will be done after AW97.
@
text
@d42 1
d90 1
d227 5
d244 5
d364 16
d433 1
a433 1
                                      localcontents.save_link));
d664 70
@


1.8
log
@Now handles PARAM tags. Sorted out Plug-In bug that was related to Java
setting a 0 by 0 graphics window before calling Wimp_Poll (fixed in Java).
Implemented queue for Plug-Ins so multiple broadcasts aren't sent for
several Objects in one data chunk.

Added Docs directory with some documentation in it. More things to keep
checking for stylistic consistency, horray ;-)

Corrected !Run[D] for Ursula build to need AcornURI but not TaskModule
(URI handler needed for !Mail to pick up mailto: links).

Added display_height field to browser_data, analogous to display_width,
to cope with % sized objects by width and height (see how HRs are
handled in Redraw.c for an example of how it was always fairly easy
with width, but not height until this addition). Though you do have
to reload to get a new size; reformat isn't enough. Must see to this
some time...

Fixed bug where basic typefaces were claimed *before* the Choices file
had been read. For unusual Choices settings, this could create some
'interesting' problems now and again. This was part of narrower scope
work in the Choices code to allow font changing without leaking font
handles (now done; fm_shutdown only ditches fonts, it keeps internal
structures - must then call  fm_lose_fonts for all browsers to get the
bitfields up to date, then rewrite the typeface definitions and reclaim
basic fonts). Noticed that fm_claim_basic_typefaces would claim multiple
instances of the same font if there were several cases of the same font
mapped to different typeface styles - fixed.

Implemented PlugInControl settings, but not SupportObject (fully).
@
text
@d42 1
d267 1
a267 1
    else if (open_hst->tagno == TAG_OBJECT)
@


1.7
log
@!Run[D] files updated for new fetchers and GopherFetcher; protocols list
in Controls updated for Gopher. Debug builds now require 2760K rather than
2560K. Font$... variables set if not already, in anticipation of font
Choices work.

Additional bits in Choices section of Res file tidied and some name
changes (e.g. Netscape -> Navigator(TM)). Frames support option added
to Choices.

Grouped 'support_frames' under the Fetch Controls section and added
support_object in Global.h; appropriate entries placed in the Choices
files, and are read at startup. At present, though, only the frames
support flag is implemented.

For some reason, Menu was the button to use on history popups if you
wanted to show URLs instead of descriptions (or vice versa, depending
on Choices settings). Now, Select and Menu will show the Choices
defined setting, and Adjust will show the opposite.

History menus are built backwards, so local histories have the most
recently visited pages at the top. Global history has still no real
order to it, but this may be arranged later.

Customer name changed to Customer by request.

Customer browser now gets its own resources (SYSTEM=Customer), but
otherwise is unchanged, with the Ursula build now giving the
'spinning acorn' with a Bookworm-style toolbar. This is used for the
Desktop !Browse build.

!Sprites[22] files updated to include GIF, JPEG and PNG sprites;
!Run[D] files and !Boot files set appropriate File$Type_xxx variables.
Sprites in all sprites files have been checked for unnecessary palettes,
which have been removed where present.
@
text
@d44 1
d268 3
a270 1
      const char * data;
d272 5
a276 1
      /* If it is an Object, write an appropriate URL in there */
d280 15
@


1.6
log
@Added MimeMap module support. OBJECT routines now use this to determine
if the item is an inline image, and if so pass it to the image routines.
At present, support relies on a (correct) content type.
@
text
@d606 1
a606 1
                                  b->mouse_click.buttons & Wimp_MouseButtonMenu ? !choices.show_urls : choices.show_urls));
@


1.5
log
@Now working on source merged with Kevin Bracey's internationalisation
support. UNIFONT is undefined in the Make File for now. All Res and
Choices files updated appropriately.

Having sorted out the old Choices and Messages to form Choices, Controls
and Messages, this build has had the same cleaning up done internally.
This includes greater consistency in naming schemes and the removal of
the inconsitent choices items - e.g. Choices file entries saying 'delay
images' and 'plain backgrounds' where internally all the flags say 'show
images' and 'show backgrounds'. ChoiceDefs.h and CtrlDefs.h added to
clarify the meaning of some fields, though usage of these is not 100%
in the source (there are cases where parameters are passed through to
functions as ints, and those functions still check these against hard
coded values rather than the #define stuff).

Fetcher status return bits (connected, sent request, etc.) now reflected
in status bar. Progress during fetchs to files are reported by %, where
the size of the object is known. Exceeding 100% drops back to a byte
counter, in case the estimated size was wrong. The progress counter
may be updated after specific delays, rather than 'as often as possible',
to reduce flicker (as requested by D.Brown some time ago).

I've done a small rewrite of the fetch prioritisation scheme in FetchPage.c;
how well this performs in general use across different processor speeds
remains to be tested, but certainly it has some advantages. For each small
fetch window before the rewrite, a 4cs tight loop was entered - this gave a
noticable and substantial drain to the Desktop performance if more than one
was opened. Now, several can be up at once with little hit. The actual file
fetch is on half the priority it was before, with all others taken back
just a bit - e.g. from 20cs per poll to 15cs per poll for flat out
reformatting. You don't seem to lose much time on the format in practice,
and the Desktop feels quite a bit lighter at the same time. There's the
potential for smoother frameset loading in this scheme, too.

When Shift+Clicking on a link meant you still fetched inside the main
browser window, several fetches could occur in a frameset - one per frame.
However, now that you can only do this by clicking on a link that leads to
non-displayable data - or by turning off the small fetch windows by
setting UseSmall to 'no' in Choices - a bug where fetchpage_preprocessed
would stop such fetches as new ones were started was revealed.
The API to frames_abort_fetching has now been extended to include a
'stop file spooling too' flag, allowing a fix to be made by having
fetchpage_preprocess's calls not set this (and it doesn't check the
savelink flag is unset before proceeding, since frames_abort_fetching
does that implicitly now).

Had left the RAM transfer buffer at 16 bytes (from testing) accidentally...
Oops. Upped it to 4K. In addition, when loading data by RAM transfer,
the browser didn't notice if a RAMFetch bounced during the transfer. It
would be treated as a 'first' RAMFetch bounce, basically, and try to go to
file transfer - oops. Fixed.
@
text
@d265 12
@


1.4
log
@Got the deferred reformatter working properly. It doesn't do that 'OK,
the page is fetched and reformatted, but just to annoy you, I'm going
to wait 5 seconds and then suddenly reformat the whole thing again'
trick anymore. The fetcher was calling the reformatter in a delayed
form even when the reformatter was already running, so it would carry
on past the reformat point or from below what had become and invalidated
line, and some time later, get back to the delayed reformat. Now,
reformatting is only delayed by the fetcher when the reformatter is not
running. In practice this means body text reformats as it fetches, but
large tables will show delayed reformatting - which was exactly the
intended behaviour of the feature when it was originally thought of.

fetch_token_data_address removed; it was only needed in two places,
both of which already knew when to read tp->text and when to ignore
it. Its functionality is duplicated in an 'if' involving reformat_istext,
anyway.

!Run[D] files taken back to requiring HTTP 0.33, since 0.36 introduces
many weird and wonderful problems.

Typo in Messages files, 'All current images (sic.) fetches finished' -
'images' is now 'image'.

Shift+Click saving - you could save to an application. No problem. But
the equivalent (just clicking on a link that led to an unknown datatype
and getting the save dialogue that way) didn't work. It does now.
Another problem was saving to an application that didn't support the
datatype - oops, the dialogue would close but the fetch would sit there
waiting to be told where to save. It doesn't close now (as expected).

NB, doing several simultaneous fetches to a text editor may have problems
as the editors are too clever for their own good. Despite receiving
DataLoad messages for <Wimp$Scrap> for files of different types, sizes
and datestamps, the editors can decide it's still the same file and:

Zap      - Hats off, it gets it right, almost. You do get warned 'Multiple
           copies - one on disc is newer' as everything after the first
           text loads, but they do load, and in separate windows.
StrongED - Does not load the subsequent files, so the browser gives 'Data
           transfer failed' errors and opens up Scrap. Turning off 'Don't
           load same file twice' fixes it - each file is loaded in a new
           window with no warnings. At least in the first case, you don't
           lose data, since the files are kept in Scrap.
Edit     - Each time it loads the file, it *replaces* the other one in
           memory, using the same window for each. This is the worst
           behaviour as it isn't configurable (well, I don't know of a way
           to change it...) and results in data loss as successive texts
           get trounced by the new data.

I can't see how I can fix this in the browser as it's basically silly
behaviour on behalf of the editors. Other applications which don't try
to work out if it's a new file or not are fine!

When conducting image fetches, proxying is allowed unless reloading.
When conducting page fetches, proxying was never allowed - so web cache
stuff would have been, er, interesting. It now sets X-NoProxy: in the
request header when reloading, but otherwise this is not included.

AnimSpeed is, at last, independent of browser poll speed. They used to
be tied together. Guess how the animation code used to work ;-)

'Can't handle this datatype' - deprecated now that save dialogues can be
popped up. The 'can't save objects in full screen mode' error would never
be shown due to a bug, anyway; this now replaces 'can't handle', which
has been removed from all Messages files.

RefoWait, RefoHang and RefoTime moved from Controls back to Choices.

Trying to get rid of strlen in the reformatter - it can get very slow
(e.g. strlen of 8K chunks of text, or if a 330K text file is transferred
from a text editor straight to the browser, strlen of a 330K string...).
There will be unfinished bits of code in the reformatter that may seem
unnecessary - they've just not been plugged in yet (since they don't
actually work). Don't remove them!
@
text
@d385 2
a386 2
      /* Set that window's savelink and allow_cancel */
      /* flags according to the dialogue contents    */
d388 2
a389 2
      fetch->savelink = localcontents.save_link;
      if (fetch->savelink) b->allow_cancel = 0;
@


1.3
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d360 5
a364 1
    if (localcontents.in_new || !b)
d372 4
@


1.2
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d57 1
a57 1
  char         url[Limits_DisplayURL];
d187 5
a191 5
/* Called when the EOpenOpen event is generated, */
/* typically when the Open URL window is about   */
/* to be shown. Handles any icon processing      */
/* commands in the writable, registers event     */
/* handlers, etc.                                */
d199 1
a199 1
  char text[Limits_DisplayURL];
d277 1
a277 1
/* Called when the EOpenOpenFromMenu event is    */
d289 2
a290 1
/* before the EOpenOpen event is raised.         */
d293 1
a293 1
/* raises EOpenOpenFromMenu, so this function    */
d296 5
a300 5
/* Anyway, when the EOpenOpen event finally      */
/* arrives, openurl_to_be_shown is called, reads */
/* the value set here, acts on it, and clears    */
/* the value to ensure correct behaviour on      */
/* future calls.                                 */
@


1.1
log
@Updated Makefile to work better in folding text editors. More or less rewrote
Limits.h, and ensured consistent comment styling throughout all sources.
Fetch.c/h split to Fetch, FetchHTML and URLveneer. URLstat.c/h produced to
cope with this. OpenURL and Find sources created from bits in the Windows
source file that shouldn't have been there... These will get filled out
shortly. Note that a few functions in Fetch are due to be renamed and moved;
probably to Tokenutils.
@
text
@d31 2
a41 1
#include "TBEvents.h"
d44 5
d53 131
d185 1
a185 1
/* openurl_to_be_shown                           */
d187 5
a191 4
/* Called when the EOpenURLWindow event is       */
/* generated, typically when the Open URL window */
/* is about to be shown. Handles any icon        */
/* processing commands in the writable.          */
d201 13
d216 96
d313 279
@
