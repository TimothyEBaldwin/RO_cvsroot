head	1.3;
access;
symbols
	Browse-2_16:1.3
	Browse-2_15:1.3
	Browse-2_14:1.3
	Browse-2_13:1.3
	Browse-2_12:1.3
	Browse-2_11:1.3
	Browse-2_10:1.3
	Browse-2_09:1.3
	ahodgkin_208_i4_2:1.3
	ahodgkin_208_i4:1.1
	ahodgkin_208_i3:1.1
	ahodgkin_208_i2:1.1
	ahodgkin_208_i1:1.1
	ahodgkin_207release:1.1;
locks; strict;
comment	@# @;


1.3
date	2000.11.14.08.45.06;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.31.15.58.39;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	98.09.10.12.45.54;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    JSscreen.c                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: JavaScript support - Screen objects. Based in     */
/*          part on source in libmocha from the Mozilla       */
/*          browser sources.                                  */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 10-Aug-1998 (ADH): Created.                       */
/*          24-May-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include <kernel.h>
#include <swis.h>

#include <HTMLLib/HTMLLib.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <tboxlibs/event.h>

#include "Global.h"
#include "FromROSLib.h"
#include "Utils.h"

#include "JavaScript.h"

#ifdef JAVASCRIPT

  #include "JSconsts.h"
  #include "JSutils.h"

  #include "JSscreen.h"

  /* Static function prototypes */

  PR_STATIC_CALLBACK(JSBool)   jsscreen_get_property (JSContext * cx, JSObject * obj, jsval id, jsval * vp);

  PR_STATIC_CALLBACK(JSBool)   jsscreen_constructor  (JSContext * cx, JSObject * obj, uintN argc, jsval * argv, jsval *rval);
  PR_STATIC_CALLBACK(void)     jsscreen_finalise     (JSContext * cx, JSObject * obj);

  /* Internal representation */

  typedef struct JSScreen
  {
    browser_data * decoder;
  }
  JSScreen;

  /* Object property IDs */

  enum jsscreen_tinyid
  {
    SCREEN_WIDTH        = -1,
    SCREEN_HEIGHT       = -2,
    SCREEN_PIXEL_DEPTH  = -3,
    SCREEN_COLOR_DEPTH  = -4,
    SCREEN_AVAIL_WIDTH  = -5,
    SCREEN_AVAIL_HEIGHT = -6,
    SCREEN_AVAIL_LEFT   = -7,
    SCREEN_AVAIL_TOP    = -8
  };

  /* Object properties */

  static JSPropertySpec jsscreen_properties[] =
  {
    { "width",       SCREEN_WIDTH,        JSPROP_ENUMERATE | JSPROP_READONLY },
    { "height",      SCREEN_HEIGHT,       JSPROP_ENUMERATE | JSPROP_READONLY },
    { "pixelDepth",  SCREEN_PIXEL_DEPTH,  JSPROP_ENUMERATE | JSPROP_READONLY },
    { "colorDepth",  SCREEN_COLOR_DEPTH,  JSPROP_ENUMERATE | JSPROP_READONLY },
    { "availWidth",  SCREEN_AVAIL_WIDTH,  JSPROP_ENUMERATE | JSPROP_READONLY },
    { "availHeight", SCREEN_AVAIL_HEIGHT, JSPROP_ENUMERATE | JSPROP_READONLY },
    { "availLeft",   SCREEN_AVAIL_LEFT,   JSPROP_ENUMERATE | JSPROP_READONLY },
    { "availTop",    SCREEN_AVAIL_TOP,    JSPROP_ENUMERATE | JSPROP_READONLY },

    { 0 }
  };

  /* Class description for object. We can't set any properties, and since all */
  /* Set operations should return the new value, we instead point at the Get  */
  /* function - so any attempts to set a value just return the existing one.  */

  JSClass jsscreen_class =
  {
    "Screen", JSCLASS_HAS_PRIVATE,
    JS_PropertyStub,  JS_PropertyStub, jsscreen_get_property, jsscreen_get_property,
    JS_EnumerateStub, JS_ResolveStub,  JS_ConvertStub,        jsscreen_finalise
  };

  /**************************************************************/
  /* jsscreen_define_screen()                                   */
  /*                                                            */
  /* Set up the Screen object for a given browser.              */
  /*                                                            */
  /* Parameters: Pointer to a browser_data struct in which the  */
  /*             Screen object is to be set up;                 */
  /*                                                            */
  /*             Pointer to a JSObject which acts as a parent   */
  /*             for this Screen object.                        */
  /*                                                            */
  /* Returns:    Pointer to the new object, or NULL if function */
  /*             fails.                                         */
  /**************************************************************/

  JSObject * jsscreen_define_screen(browser_data * decoder, JSObject * parent)
  {
    JSObject  * obj;
    JSContext * cx;
    JSScreen  * screen;

    if (parent == decoder->window_object)
    {
      obj = decoder->screen;
      if (obj) return obj;
    }

    cx = decoder->bcx;

    screen = JS_malloc(cx, sizeof(JSScreen));
    if (!screen) return NULL;

    screen->decoder = NULL; /* in case of error below */

    /* Initialise the class */

    obj = JS_InitClass(cx,
                       decoder->window_object,
                       NULL,
                       &jsscreen_class,
                       jsscreen_constructor,
                       0,
                       jsscreen_properties,
                       NULL,
                       NULL,
                       NULL);

    if (!obj || !JS_SetPrivate(cx, obj, screen))
    {
      JS_free(cx, screen);
      return NULL;
    }

    /* Define the "screen" property in the parent */

    if (
         !JS_DefineProperty(cx,
                            parent,
                            "screen",
                            OBJECT_TO_JSVAL(obj),
                            NULL,
                            NULL,
                            JSPROP_ENUMERATE | JSPROP_READONLY)
       )
       return NULL;

//    screen->decoder = HOLD_BACK_COUNT(decoder);

    if (parent == decoder->window_object) decoder->screen = obj;

    return obj;
  }

  /**************************************************************/
  /* jsscreen_get_property()                                    */
  /*                                                            */
  /* Called when the interpreter is getting the value of a      */
  /* property in a Screen object.                               */
  /*                                                            */
  /* Parameters as standard for an interpreter handler          */
  /* (callback) function.                                       */
  /**************************************************************/

  PR_STATIC_CALLBACK(JSBool) jsscreen_get_property(JSContext * cx, JSObject * obj, jsval id, jsval * vp)
  {
    JSScreen * scr;
    jsint      slot;
    int        value, shift;

    dprintf(("JScr", "jsscreen_get_property: Called\n"));

    /* 'id' should be a JS int, which holds the tinyid of the */
    /* property that is being obtained.                       */

    if (!JSVAL_IS_INT(id)) return JS_TRUE;
    slot = JSVAL_TO_INT(id);

    dprintf(("JScr", "jsscreen_get_property: Slot %d\n", slot));

    scr = JS_GetInstancePrivate(cx,
                                obj,
                                &jsscreen_class,
                                NULL);

    if (!scr) return JS_TRUE;

    /* This is not as complex as libmocha, which gets an MWContext from */
    /* screen->decoder->window_context and passes it to the functions   */
    /* returning the required screen display properties; in our case,   */
    /* several Screen object properties mean the same thing.            */

    switch (slot)
    {
      case SCREEN_WIDTH:
      case SCREEN_AVAIL_WIDTH:
      {
        _swix(OS_ReadModeVariable, _INR(0,1) | _OUT(2), -1, 11, &value);
        _swix(OS_ReadModeVariable, _INR(0,1) | _OUT(2), -1, 4,  &shift);

        value = ((value + 1) << shift) / 2;

        *vp= INT_TO_JSVAL(value);
      }
      break;

      case SCREEN_HEIGHT:
      case SCREEN_AVAIL_HEIGHT:
      {
        _swix(OS_ReadModeVariable, _INR(0,1) | _OUT(2), -1, 12, &value);
        _swix(OS_ReadModeVariable, _INR(0,1) | _OUT(2), -1, 5,  &shift);

        value = ((value + 1) << shift) / 2;

        *vp= INT_TO_JSVAL(value);
      }
      break;

      case SCREEN_PIXEL_DEPTH:
      case SCREEN_COLOR_DEPTH:
      {
        _swix(OS_ReadModeVariable, _INR(0,1) | _OUT(2), -1, 9, &value);

        value = 1 << value;

        *vp= INT_TO_JSVAL(value);
      }
      break;

      case SCREEN_AVAIL_LEFT:
      case SCREEN_AVAIL_TOP:
      {
        /* Always sero, since WIDTH and AVAIL_WIDTH etc. are the same */

        *vp = INT_TO_JSVAL(0);
      }
      break;


      default:
      {
        /* Don't mess with user-defined or method properties. */

        return JS_TRUE;
      }
    }

    return JS_TRUE;
  }

  /**************************************************************/
  /* jsscreen_constructor()                                     */
  /*                                                            */
  /* Constructor function for JS_InitClass for the Screen       */
  /* object class.                                              */
  /*                                                            */
  /* Parameters are as standard for a constructor function.     */
  /**************************************************************/

  PR_STATIC_CALLBACK(JSBool) jsscreen_constructor(JSContext * cx, JSObject * obj,
                                                    uintN argc, jsval * argv, jsval *rval)
  {
    return JS_TRUE;
  }

  /**************************************************************/
  /* jsscreen_finalise()                                        */
  /*                                                            */
  /* Get rid of a Screen object.                                */
  /*                                                            */
  /* Parameters are as standard for an interpreter object       */
  /* finalisation callback function.                            */
  /**************************************************************/

  PR_STATIC_CALLBACK(void) jsscreen_finalise(JSContext * cx, JSObject * obj)
  {
    JSScreen * scr;

    dprintf(("JScr", "jsscreen_finalise: Called\n"));

    scr = JS_GetPrivate(cx, obj);

    if (!scr)
    {
      dprintf(("JScr", "jsscreen_finalise: Can't get Screen structure; exitting\n"));

      return;
    }

//    DROP_BACK_COUNT(screen->decoder);

    /* Throw away the object */

    JS_free(cx, scr);

    dprintf(("JScr", "jsscreen_finalise: Successful\n"));

    return;
  }

#endif
@


1.2
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@a43 5
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

d202 1
a202 3
    #ifdef TRACE
      if (tl & (1u<<24)) Printf("jsscreen_get_property: Called\n");
    #endif
d210 1
a210 3
    #ifdef TRACE
      if (tl & (1u<<24)) Printf("jsscreen_get_property: Slot %d\n", slot);
    #endif
d310 1
a310 3
    #ifdef TRACE
      if (tl & (1u<<24)) Printf("jsscreen_finalise: Called\n");
    #endif
d316 1
a316 3
      #ifdef TRACE
        if (tl & (1u<<24)) Printf("jsscreen_finalise: Can't get Screen structure; exitting\n");
      #endif
d327 1
a327 3
    #ifdef TRACE
      if (tl & (1u<<24)) Printf("jsscreen_finalise: Successful\n");
    #endif
@


1.1
log
@Forgot to add these files at last check-in.
@
text
@d15 14
a28 11
/***************************************************/
/* File   : JSscreen.c                             */
/*                                                 */
/* Purpose: JavaScript support - Screen objects.   */
/*          Based in part on source in libmocha    */
/*          from the Mozilla browser sources.      */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 10-Aug-98: Created.                    */
/***************************************************/
d35 2
a36 1
#include "swis.h"
d38 1
a38 1
#include "HTMLLib.h" /* HTML library API, Which will include html2_ext.h, tags.h and struct.h */
d40 8
a47 3
#include "wimp.h"
#include "wimplib.h"
#include "event.h"
a48 1
#include "svcprint.h"
d66 1
a66 1
  PR_STATIC_CALLBACK(JSBool)   jsscreen_constructor  (JSContext * cx, JSObject * obj, uint argc, jsval * argv, jsval *rval);
d118 14
a131 16
  /*************************************************/
  /* jsscreen_define_screen()                      */
  /*                                               */
  /* Set up the Screen object for a given browser. */
  /*                                               */
  /* Parameters: Pointer to a browser_data struct  */
  /*             in which the Screen object is to  */
  /*             be set up;                        */
  /*                                               */
  /*             Pointer to a JSObject which acts  */
  /*             as a parent for this Screen       */
  /*             object.                           */
  /*                                               */
  /* Returns:    Pointer to the new object, or     */
  /*             NULL if function fails.           */
  /*************************************************/
d191 9
a199 9
  /*************************************************/
  /* jsscreen_get_property()                       */
  /*                                               */
  /* Called when the interpreter is getting the    */
  /* value of a property in a Screen object.       */
  /*                                               */
  /* Parameters as standard for an interpreter     */
  /* handler (callback) function.                  */
  /*************************************************/
d291 8
a298 9
  /*************************************************/
  /* jsscreen_constructor()                        */
  /*                                               */
  /* Constructor function for JS_InitClass for the */
  /* Screen object class.                          */
  /*                                               */
  /* Parameters are as standard for a constructor  */
  /* function.                                     */
  /*************************************************/
d301 1
a301 1
                                                    uint argc, jsval * argv, jsval *rval)
d306 8
a313 8
  /*************************************************/
  /* jsscreen_finalise()                           */
  /*                                               */
  /* Get rid of a Screen object.                   */
  /*                                               */
  /* Parameters are as standard for an interpreter */
  /* object finalisation callback function.        */
  /*************************************************/
@

