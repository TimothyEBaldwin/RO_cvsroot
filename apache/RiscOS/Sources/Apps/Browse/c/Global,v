head	1.19;
access;
symbols
	Browse-2_16:1.19
	Browse-2_15:1.19
	Browse-2_14:1.19
	Browse-2_13:1.19
	Browse-2_12:1.19
	Browse-2_11:1.19
	Browse-2_10:1.19
	Browse-2_09:1.19
	ahodgkin_208_i4_2:1.18
	ahodgkin_208_i4:1.16
	ahodgkin_208_i3:1.16
	ahodgkin_208_i2:1.16
	ahodgkin_208_i1:1.16
	ahodgkin_207release:1.15
	ahodgkin_206release:1.15
	ahodgkin_205release:1.14
	ahodgkin_204release:1.14
	ahodgkin_202release:1.14
	ahodgkin_201release:1.13
	ahodgkin_200release:1.13
	ahodgkin_133beta:1.13
	ahodgkin_132beta:1.13
	ahodgkin_131beta:1.13
	ahodgkin_130beta:1.13
	ahodgkin_129:1.13
	ahodgkin_128beta:1.13
	ahodgkin_128alpha:1.13
	ahodgkin_127beta2:1.13
	ahodgkin_127beta:1.13
	ahodgkin_126beta:1.13
	ahodgkin_AW97patch:1.13
	ahodgkin_AW97:1.13;
locks; strict;
comment	@# @;


1.19
date	2005.04.26.09.42.34;	author ahodgkin;	state Exp;
branches;
next	1.18;

1.18
date	2000.11.14.08.45.06;	author ahodgkin;	state Exp;
branches;
next	1.17;

1.17
date	2000.05.31.15.58.34;	author ahodgkin;	state Exp;
branches;
next	1.16;

1.16
date	99.09.02.13.10.19;	author ahodgkin;	state Exp;
branches;
next	1.15;

1.15
date	98.07.09.10.27.07;	author ahodgkin;	state Exp;
branches;
next	1.14;

1.14
date	98.03.20.12.12.35;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	97.10.13.07.06.55;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	97.10.01.17.17.55;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	97.09.22.16.31.18;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	97.09.22.11.51.08;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	97.09.22.07.43.13;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.09.09.14.13.12;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.08.31.18.38.15;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.08.28.16.07.57;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.08.18.09.23.56;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.08.08.16.38.50;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.07.30.12.39.06;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.07.24.09.15.08;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.28.38;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.19
log
@  Huge pile of changes bringing relatively ancient sources up to date.
Detail:
  This check-in includes Phoenix version 2.11 (26-Apr-2005); only the
  debug and JavaScript builds of Phoenix have been tested and resources
  will definitely be out of date for other versions. The various "!..."
  scripts have been updated to require a minimum of 2MB with no maximum
  limit for building, as CC 5.60 is quite RAM hungry.
Admin:
  Phoenix 2.11 JS builds OK, works reasonably well. Many outstanding
  issues of course, as this is a very outdated browser now.

Version 2.09. Tagged as 'Browse-2_09'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Global.c                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Hold all globals and fundamental structures.      */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 18-Oct-1996 (ADH): Created.                       */
/*          24-May-2000 (ADH): 64-wide comments adopted.      */
/*          10-Nov-2000 (ADH): Completed switch to DebugLib.  */
/**************************************************************/

#include <setjmp.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/event.h>

#include "Global.h"
#include "Utils.h"

#ifdef TRACE

  /************************************************************************/
  /*                                                                      */
  /* Trace level for debug builds                                         */
  /* ============================                                         */
  /*                                                                      */
  /* All debug output in the browser is done through DebugLib's dprintf() */
  /* function. Area specifiers are used to control what parts of the      */
  /* browser give output. For historical reasons, these are all four      */
  /* letter codes, aside from "All", which activates the whole lot, if    */
  /* main() has been kept up to date anyway. Be warned - this will create */
  /* a huge amount of output.                                             */
  /*                                                                      */
  /* The codes are specified by putting '-debug' or '-d' on the command   */
  /* line for !RunImage, followed by the codes, comma separated, with no  */
  /* spaces. This MUST be the first argument on the command line.         */
  /*                                                                      */
  /* The debug device is specified in main() in Main.c - search for       */
  /* "dev =".                                                             */
  /*                                                                      */
  /* Some debug output uses control codes designed to take advantage of   */
  /* 16 colour modes on a possible target debug machine; it sends VDU     */
  /* codes to change the text colour. This of course may not always be    */
  /* ideal if the output device doesn't understand the VDU sequences.     */
  /*                                                                      */
  /* Some extra error messages (such as missing component IDs) will be    */
  /* raised in TRACE builds. Even more may be raised by defining          */
  /* STRICT_PARSER in the compiler; this ensures any image processing     */
  /* errors are reported and (e.g.) badly nested framesets will generate  */
  /* an appropriate complaint. STRICT_PARSER browser-owned errors are     */
  /* defined in the Messages file; TRACE errors are hard coded. There are */
  /* some other debug-related switches but these are covered in the local */
  /* source files that they influence.                                    */
  /*                                                                      */
  /* The four letter codes for DebugLib are as follows:                   */
  /*                                                                      */
  /* -------------------------------------------------------------------- */
  /* Purpose                                                         Code */
  /* -------------------------------------------------------------------- */
  /* MessageTrans related messages                                   MsgT */
  /* Toolbar handler messages                                        TBar */
  /* Null claim/release messages                                     Null */
  /* Browser window created/deleted                                  Wind */
  /* Menu handler messages                                           Menu */
  /* Routine start, poll, exit                                       Rout */
  /* Fetcher functions                                               Fetc */
  /* Memory handling function calls                                  Memo */
  /* Reformatter functions                                           Refo */
  /* Redraw functions                                                Redr */
  /* Font library functions                                          Font */
  /* Low level memory tracing                                        LMem */
  /* Running malloc/free count                                       CMal */
  /* Running flex alloc/free count                                   CFle */
  /* Image handling code                                             Imag */
  /* History (both local and global)                                 Hist */
  /* Image history                                                   ImgH */
  /* Frames                                                          Fram */
  /* Stream and memcpy/memmove trace                                 Stre */
  /* Table parsing information                                       Tabl */
  /* URI handler interfacing                                         URIH */
  /* Keyboard control functions                                      KeyC */
  /* JavaScript functions                                            JScr */
  /* Hotlist manager                                                 Hotl */
  /* Save functions & self-test                                      Save */
  /* Dragging (for dashed outlines etc.)                             Drag */
  /* Choices dialogue functions                                      Choi */
  /* Plug-In protocol / Object handling                              Plug */
  /* -------------------------------------------------------------------- */
  /*                                                                      */
  /* In addition, a global variable "tl" (Trace Level) exists in debug    */
  /* builds. This is used for some non-DebugLib stuff such as bounding    */
  /* box highlighting in redraws. Again, this is activated by four letter */
  /* codes, or by using "All":                                            */
  /*                                                                      */
  /* -------------------------------------------------------------------- */
  /* Purpose                                               'tl' bit  Code */
  /* -------------------------------------------------------------------- */
  /* Highlight user graphics windows with magenta                11  BBox */
  /* rectangles (this means table cell bounding boxes),                   */
  /* bounding boxes of images with green rectangles, and                  */
  /* bounding boxes of other objects with red rectangles.                 */
  /*                                                                      */
  /* Circles drawn to indicate special tags (no bits set         19  Circ */
  /* in the lower byte of the type word -> magenta dot in                 */
  /* bottom right of bounding box; NULL text field -> cyan                */
  /* dot in top left of bounding box).                                    */
  /*                                                                      */
  /* Highlight redraw bounding boxes with cyan rectangles.       23  RBox */
  /*                                                                      */
  /* RAM file transfer analysis through trace_dump_buffer        28  RAMT */
  /* (this function outputs debug text unconditionally).                  */
  /* -------------------------------------------------------------------- */
  /*                                                                      */
  /* If you only want to DebugLib stuff and not the other routines, use   */
  /* "Most". Note that "None" is reserved.                                */
  /*                                                                      */
  /* Examples:                                                            */
  /*                                                                      */
  /*   Run !RunImage -d MsgT,Menu,Rout %%*0                               */
  /*   Run !RunImage -d Most,Circ %%*0                                    */
  /*   Run !RunImage -d All %%*0                                          */
  /*   Run !RunImage -d Memo,LMem,CMal,CFle %%*0                          */
  /*                                                                      */
  /************************************************************************/

  unsigned int    tl;
  int             malloccount               = 0;
  int             flexcount                 = 0;

#endif

jmp_buf           env;                                         /* Used for error handler, so it can jump back to poll look if  */
                                                               /* the user selects OK rather than Cancel                       */

int               quit;                                        /* Set to 1 to indicate a successful exit should occur          */
int               modechanged;                                 /* Set to 1 immediately after a mode change                     */
int               printing;                                    /* Set to 1 during a printing loop, else 0                      */
int               drag_in_progress;                            /* Somebody somewhere in the browser is doing a drag operation  */
int               authorising;                                 /* Set to 1 during authorisation of a fetch (all fetches stop)  */

int               wimp_version;
int               nested_wimp;                                 /* Wimp version, flag to say the nested window manager is       */
int               task_handle;                                 /* present, Wimp task handle, pointer to sprite block.          */
int               sprite_block;

int               taskmodule_ds_registered;                    /* Set to 1 if the dialler status service call is being watched */
int               uri_module_present;                          /* Set to 1 if the URI module is present and may be used        */

_kernel_oserror   erb;                                         /* Global error block for custom errors                         */

MessagesFD        meb;                                         /* MessageTrans Messages file control block                     */
MessagesFD      * chb                       = NULL;            /* MessageTrans Choices file control block allocated in RMA     */
MessagesFD      * cob                       = NULL;            /* Similarly, control block for the Controls file               */
char              tokens                    [Limits_Message];  /* lookup_token/choice puts looked up data in here              */
char              lasttokn                  [Limits_Token];    /* The last token looked up is stored here for future reference */

char              program_name              [Limits_TaskName]; /* _TaskName token contents put in here, for the flex library   */
char            * task_dir                  = NULL;            /* Application path, recorded at startup (in Main.c).           */

int               messages_list             [] = {0};
int               event_code_list           [] = {0};
IdBlock           idb;                                         /* For all Toolbox-registered event handlers                    */
WimpPollBlock     b;                                           /* For Toolbox-registered Wimp event handlers                   */

int               bullets;                                     /* Number of bullet sprites available                           */
unsigned int      animation_frames;                            /* Holds the number of animation frames in the Sprites file     */
int               null_counter;                                /* When zero, null events will be disabled, else enabled. For   */
                                                               /* each time something wants to claim nulls, it increments this */
                                                               /* and decrements it when finished                              */


browser_data    * highlight_frame           = NULL;            /* The currently highlighted frame (if any)                     */
browser_data    * last_browser;                                /* Points to the last browser_data structure in the linked list */
                                                               /* of structures associated with all browser windows, or NULL   */
                                                               /* there are no browser windows. The structure is defined in    */
                                                               /* Global.h                                                     */

global_choices    choices;                                     /* To store user-configurable choices (from Choices file)       */
global_controls   controls;                                    /* To store non user-configurable controls (from Controls file) */
global_choices  * new_choices               = NULL;            /* Temporary store for Choices dialogue                         */
ObjectId          choices_windowid          = NULL_ObjectId;   /* Choices dialogue main window object ID                       */

menu_source       menusrc                   = Menu_None;       /* For Wimp menus - opened from forms, from history icons, etc. */
void            * menuhdl;                                     /* For any extra info needed with a menu                        */

char            * authorise                 = NULL;            /* Flex block to hold authorisation data                        */

#ifndef SINGLE_USER

  userdef         user;                                        /* For multiuser builds, holds details of the current user      */
  int             logged_in;                                   /* Flags for the front-end - user is logged in.                 */
  int             re_login;                                    /* Flags for the front-end - need to re-prompt for login        */

#endif

#ifdef JAVASCRIPT

  JSRuntime     * jsr;                                         /* Runtime structure for JavaScript interpreter.                */
  int             jsr_refs;                                    /* Reference (usage) count for JavaScript interpreter.          */

#endif
@


1.18
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@d16 1
a16 1
/* File:    Global.h                                          */
d93 1
@


1.17
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d26 1
a33 5
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

d39 102
a140 66
  /**************************************************************/
  /* Trace level, for debug purposes only.                      */
  /*                                                            */
  /* All trace output is done through the Printf function which */
  /* has an identical API to printf. This is commonly used for  */
  /* TML card output but any debug library can be linked in     */
  /* provided it provides the Printf interface.                 */
  /*                                                            */
  /* Some debug output takes advantage of 16 colour modes on    */
  /* the debug machine and sends VDU codes to change the text   */
  /* colour. This may influence the approach taken if authoring */
  /* an alternative debugging library.                          */
  /*                                                            */
  /* Debug output is only available if the entire project is    */
  /* compiled with TRACE defined in the compiler.               */
  /*                                                            */
  /* Some extra error messages (such as missing component IDs)  */
  /* will be raised in TRACE builds. Even more may be raised by */
  /* defining STRICT_PARSER in the compiler; this ensures any   */
  /* image processing errors are reported and (e.g.) badly      */
  /* nested framesets will generate an appropriate complaint.   */
  /* STRICT_PARSER browser-owned errors are defined in the      */
  /* Messages file; TRACE errors are hard coded.                */
  /*                                                            */
  /* Bit  Purpose                                          Arg  */
  /*                                                            */
  /* 0    MessageTrans related messages                    MsgT */
  /* 1    Toolbar handler messages                         TBar */
  /* 2    Null claim/release messages                      Null */
  /* 3    Browser window created/deleted                   Wind */
  /* 4    Menu handler messages                            Menu */
  /* 5    Routine start, poll, exit                        Rout */
  /* 6    Fetcher functions                                Fetc */
  /* 7    Memory handling function calls                   Memo */
  /* 8    Reformatter functions                            Refo */
  /* 9    Redraw functions                                 Redr */
  /* 10   Font library functions                           Font */
  /* 11   Bounding box info for redraws                    BBox */
  /* 12   Low level memory tracing                         LMem */
  /* 13   Running malloc/free count                        CMal */
  /* 14   Running flex alloc/free count                    CFle */
  /* 15   Image handling code                              Imag */
  /* 16   History (both local and global)                  Hist */
  /* 17   Frames                                           Fram */
  /* 18   Stream and memcpy/memmove trace                  Stre */
  /* 19   Indications of special tags                      Circ */
  /* 20   Table parsing information                        Tabl */
  /* 21   URI handler interfacing                          URIH */
  /* 22   Keyboard control functions                       KeyC */
  /* 23   Redraw rectangle display                         RBox */
  /* 24   JavaScript functions                             JScr */
  /* 25   Hotlist manager                                  Hotl */
  /* 26   Save functions & self-test                       Save */
  /* 27   Dragging (for dashed outlines etc.)              Drag */
  /* 28   Message protocol tracing                         MsgP */
  /* 29   Choices dialogue functions                       Choi */
  /* 30   Plug-In protocol / Object handling               Plug */
  /*                                                            */
  /* To use, put -debug or -d into the command line args for    */
  /* running !RunImage, followed by a series of comma separated */
  /* values which are as given above. Use 'All' for everything, */
  /* though with caution (large amounts of output will be       */
  /* generated!). For example:                                  */
  /*                                                            */
  /*         Run !RunImage -d MsgT,Menu,Rout %%*0               */
  /**************************************************************/
@


1.16
log
@Long overdue check-in of intermediate browser build, from continued "out
of hours" work. Forgot to add a few files last time too.

List dialogue box handler complete, and exclusion lists implemented
within the main browser code. Full documentation in Choices file.
Save routine knows all about it but is now getting very slow - must
come up with a better scheme; for now, it puts the hourglass on...

StripExtensions option controls auto stripping of filename extensions.

More sensible ancestor / frame selection for keyboard shortcut items
and the save dialogues - having selected a frame won't lock you into
it for F3 and related shortcuts now (input focus in URL writable ->
get ancestor details, input focus in frame -> get frame details). F4
works in frames. F5 now generally present for 'view source' with a
corresponding menu entry in the File menu.

Odd thing in later Res files; there's no action set for Adjust clicks
on the main ToolAction items in the button bar. Very odd. Nothing
appears to be set in v2.07 either, yet adjust-click works. Even
stranger. Anyway, added in the relevant event details (same as for
Select click in all cases) and this fixes the problem.

Background colours in the TABLE tag ignored the "don't print any
backgrounds" Print Style setting. Fixed. Meanwhile, the "black
text with no backgrounds" option wasn't getting this right either;
fixed this also.

Event logging implemented; HTTP errors and script output via.
window.print extension. No internal error output yet.

Faith:Never behaviour extended. If ever a server sends something with
no content type or an unhandleable type, the browser will try and get a
filetype from the URL. If it gets text or HTML, it'll render the file.
Else it'll save it. Hacks around IIS 4's lack of a content type field
in the Marketeye login stuff, and similar other slightly broken sites.
@
text
@d15 12
a26 9
/***************************************************/
/* File   : Global.c                               */
/*                                                 */
/* Purpose: Holds all of the browser's globals.    */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 12-Nov-96: Created.                    */
/***************************************************/
d28 1
a28 1
#include "setjmp.h"
d30 7
a36 2
#include "wimp.h"
#include "event.h"
a37 1
#include "svcprint.h"
d43 66
a108 68
  /********************************************************/
  /* Trace level, for debug purposes only.                */
  /*                                                      */
  /* All trace output is done through the Printf function */
  /* which has an identical API to printf. This is        */
  /* commonly used for TML card output but any debug      */
  /* library can be linked in provided it provides the    */
  /* Printf interface.                                    */
  /*                                                      */
  /* Some debug output takes advantage of 16 colour modes */
  /* on the debug machine and sends VDU codes to change   */
  /* the text colour. This may influence the approach     */
  /* taken if authoring an alternative debugging library. */
  /*                                                      */
  /* Debug output is only available if the entire project */
  /* is compiled with TRACE defined in the compiler.      */
  /*                                                      */
  /* Some extra error messages (such as missing component */
  /* IDs) will be raised in TRACE builds. Even more may   */
  /* be raised by defining STRICT_PARSER in the compiler; */
  /* this ensures any image processing errors are         */
  /* reported and (e.g.) badly nested framesets will      */
  /* generate an appropriate complaint. STRICT_PARSER     */
  /* browser-owned errors are defined in the Messages     */
  /* file; TRACE errors are hard coded.                   */
  /*                                                      */
  /* Bit  Purpose                                    Arg  */
  /*                                                      */
  /* 0    MessageTrans related messages              MsgT */
  /* 1    Toolbar handler messages                   TBar */
  /* 2    Null claim/release messages                Null */
  /* 3    Browser window created/deleted             Wind */
  /* 4    Menu handler messages                      Menu */
  /* 5    Routine start, poll, exit                  Rout */
  /* 6    Fetcher functions                          Fetc */
  /* 7    Memory handling function calls             Memo */
  /* 8    Reformatter functions                      Refo */
  /* 9    Redraw functions                           Redr */
  /* 10   Font library functions                     Font */
  /* 11   Bounding box info for redraws              BBox */
  /* 12   Low level memory tracing                   LMem */
  /* 13   Running malloc/free count                  CMal */
  /* 14   Running flex alloc/free count              CFle */
  /* 15   Image handling code                        Imag */
  /* 16   History (both local and global)            Hist */
  /* 17   Frames                                     Fram */
  /* 18   Stream and memcpy/memmove trace            Stre */
  /* 19   Indications of special tags                Circ */
  /* 20   Table parsing information                  Tabl */
  /* 21   URI handler interfacing                    URIH */
  /* 22   Keyboard control functions                 KeyC */
  /* 23   Redraw rectangle display                   RBox */
  /* 24   JavaScript functions                       JScr */
  /* 25   Hotlist manager                            Hotl */
  /* 26   Save functions & self-test                 Save */
  /* 27   Dragging (for dashed outlines etc.)        Drag */
  /* 28   Message protocol tracing                   MsgP */
  /* 29   Choices dialogue functions                 Choi */
  /* 30   Plug-In protocol / Object handling         Plug */
  /*                                                      */
  /* To use, put -debug or -d into the command line args  */
  /* for running !RunImage, followed by a series of comma */
  /* separated values which are as given above. Use 'All' */
  /* for everything, though with caution (large amounts   */
  /* of output will be generated!). For example:          */
  /*                                                      */
  /*         Run !RunImage -d MsgT,Menu,Rout %%*0         */
  /********************************************************/
@


1.15
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d90 1
a90 1
  /* 26   Save functions                             Save */
@


1.14
log
@Programming warehouse link removed from all hotlists - the page has gone.

Some compile-time hacks in place to use MemLib, a dynamic area based
malloc replacement which shrinks its heap when possible. All builds
have these switched off at the moment. Seemed to work with just Browse,
though there would be problems with message blocks stored in dynamic
areas because of the Wimp's '&3800000' check - however, it failed when
HTMLLib was made to use it, too. Don't know why yet.

ItemInfo.[c/h] source added, with Res file additions for testbed Browse
and Phoenix.

Small fetch windows now work properly regardless of toolbar settings
in the Choices.

Reload now reloads all images too, rather than only reloading them for
as long as the main page was being fetched.

Added a simple 'Find' facility.

Realised that event handlers in eventlib are called in reverse order
of registration, so the miscellaneous event handler is now registered
first rather than last.

Multiuser code added (most only active if SINGLE_USER is undefined). As
part of this, hotlist code now knows about read-only items (done for the
Customer-style 'Resources' file, but works generally anyway).
handle_add_hotlist doesn't try to save the hotlist itself anymore (the
hotlist_add function does all that through hotlist_modified anyway).

Customer build Choices and Controls updated slightly (e.g. ClaimHelp
off, hotlist to save on quit only).

Customer build now uses Phoenix-style buttons. Sprites files which
worked at the time (but will probably be out of date now) and included
most of the original Customer-style sprites are in
'Utils.Icons.Customer'.

Choices, Messages and Res files for all builds now stripped down to only
single user items or single plus multiuser for Customer build and testbed
build. Before, all contained a few multiuser bits in at least the Choices
file if not more.

Grammatical error ("Fetching frames contents" (sic.)) corrected in
default message, Toolbars.c, and all of the Messages files.

Customer build brought back to a servicable level (including
implementation of the Find dialogue box with animation and fixing
up authorisation and 'Stop' state in the tristate). Quite a few
missing #ifndef REMOTE_HOTLIST bits from hotlist code added...

Customer build will not use <Choices$Write> or Boot:Choices for any
file finding now. UseProxy defaults to 'yes', MaxImages to 2. Res
file includes Proxy Address setting (save_save_choices() now writes
the ProxyAddress line).
@
text
@d174 7
@


1.13
log
@More reformatter code bugs fixed; this one regarding width of items. Any
kerned string was overestimated (causing redraw bugs and caret position
problems in forms, apart from other minor bits elsewhere) and the default
size of a writable icon wasn't especially clever.

Crude Plug-In support; just about manages Java, but can't fetch on
behalf of Plug-In (for example). Had to change the default file access
URL construction to be 'file:/' instead of 'file://', or local file
fetches that reference Java applets won't work. This is in its very
early stages, and is being checked in mostly so that various Choices
issues can be worked on.
@
text
@d105 3
a107 3
  unsigned int tl;
  int          malloccount;
  int          flexcount = 0;
d111 2
a112 2
jmp_buf         env;                           /* Used for error handler, so it can jump back to poll look if  */
                                               /* the user selects OK rather than Cancel                       */
d114 47
a160 5
int             quit;                          /* Set to 1 to indicate a successful exit should occur          */
int             modechanged;                   /* Set to 1 immediately after a mode change                     */
int             printing;                      /* Set to 1 during a printing loop, else 0                      */
int             drag_in_progress;              /* Somebody somewhere in the browser is doing a drag operation  */
int             authorising;                   /* Set to 1 during authorisation of a fetch (all fetches stop)  */
d162 2
a163 4
int             wimp_version;
int             nested_wimp;                   /* Wimp version, flag to say the nested window manager is       */
int             task_handle;                   /* present, Wimp task handle, pointer to sprite block.          */
int             sprite_block;
d165 1
a165 2
int             taskmodule_ds_registered;      /* Set to 1 if the dialler status service call is being watched */
int             uri_module_present;            /* Set to 1 if the URI module is present and may be used        */
d167 1
a167 20
MessagesFD      meb;                           /* MessageTrans Messages file control block                     */
MessagesFD    * chb = NULL;                    /* MessageTrans Choices file control block allocated in RMA     */
MessagesFD    * cob = NULL;                    /* Similarly, control block for the Controls file               */
char            tokens   [Limits_Message];     /* lookup_token/choice puts looked up data in here              */
char            lasttokn [Limits_Token];       /* The last token looked up is stored here for future reference */

char          * task_dir = NULL;               /* Application path, recorded at startup (in Main.c).           */

int             messages_list [] = {0};

IdBlock         idb;                           /* For all Toolbox-registered event handlers                    */
int             event_code_list [] = {0};

WimpPollBlock   b;                             /* For Toolbox-registered Wimp event handlers                   */

int             null_counter;                  /* When zero, null events will be disabled, else enabled. For   */
                                               /* each time something wants to claim nulls, it increments this */
                                               /* and decrements it when finished                              */
int             bullets;                       /* Number of bullet sprites available                           */
unsigned int    animation_frames;              /* Holds the number of animation frames in the Sprites file     */
d169 3
a171 5
browser_data  * last_browser;                  /* Points to the last browser_data structure in the linked list */
                                               /* of structures associated with all browser windows, or NULL   */
                                               /* there are no browser windows. The structure is defined in    */
                                               /* Global.h                                                     */
browser_data  * highlight_frame = NULL;        /* The currently highlighted frame (if any)                     */
a172 12
global_choices  choices;                       /* To store user-configurable choices (from Choices file)       */
global_controls controls;                      /* To store non user-configurable controls (from Controls file) */

char            program_name[Limits_TaskName]; /* _TaskName token contents put in here, for the flex library   */

_kernel_oserror erb;                           /* Global error block for custom errors                         */

menu_source     menusrc = Menu_None;           /* For Wimp menus - opened from forms, from history icons, etc. */
void          * menuhdl;                       /* For any extra info needed with a menu                        */

#ifndef SINGLE_USER
  userdef       user;                          /* For multiuser builds, holds details of the current user      */
@


1.12
log
@Changed some error handling in Choices, a little bit of reformatting,
removed unnecessary tempstring in Main, and played about with the
choices Res file objects.
@
text
@d62 1
a62 1
  /* Bit  Purpose                          Arg      Value */
d64 31
a94 30
  /* 0    MessageTrans related messages    MsgT         1 */
  /* 1    Toolbar handler messages         TBar         2 */
  /* 2    Null claim/release messages      Null         4 */
  /* 3    Browser window created/deleted   Wind         8 */
  /* 4    Menu handler messages            Menu        16 */
  /* 5    Routine start, poll, exit        Rout        32 */
  /* 6    Fetcher functions                Fetc        64 */
  /* 7    Memory handling function calls   Memo       128 */
  /* 8    Reformatter functions            Refo       256 */
  /* 9    Redraw functions                 Redr       512 */
  /* 10   Font library functions           Font      1024 */
  /* 11   Bounding box info for redraws    BBox      2048 */
  /* 12   Low level memory tracing         LMem      4096 */
  /* 13   Running malloc/free count        CMal      8192 */
  /* 14   Running flex alloc/free count    CFle     16384 */
  /* 15   Image handling code              Imag     32768 */
  /* 16   History (local and global)       Hist     65536 */
  /* 17   Frames                           Fram    131072 */
  /* 18   Stream and memcpy/memmove trace  Stre    262144 */
  /* 19   Indications of special tags      Circ    524288 */
  /* 20   Table parsing information        Tabl   1048576 */
  /* 21   URI handler interfacing          URIH   2097152 */
  /* 22   Keyboard control functions       KeyC   4194304 */
  /* 23   Redraw rectangle display         RBox   8388608 */
  /* 24   JavaScript functions             JScr  16777216 */
  /* 25   Hotlist manager                  Hotl  33554432 */
  /* 26   Save functions                   Save  67108864 */
  /* 27   Dragging (dashed outlines etc.)  Drag 134217728 */
  /* 28   Message protocol tracing         MsgP 268435456 */
  /* 29   Choices dialogue functions       Choi 536870912 */
@


1.11
log
@All Messages files updated to show version 1.21 beta.

New save choices function with supporting code in Save.c; 'Save choices'
option in the Choices menu is now implemented.
@
text
@d93 1
@


1.10
log
@Choices and Controls files are now loaded into malloc space (use chf and
cof to address them). Previously only in Main.c, task_dir is now globally
visible.

Choices updated to allow 16ths of a point in the font size specification
and the System font face has been removed - it isn't used. The use of
serif and sans serif fonts has been rationalised across builds (e.g. Desktop
builds use what they say, but the Customer build uses Homerton as the
default body (serif, so to speak) font as it matches the box's look and
feel better).

Font loading altered a bit to work properly! Font library defines some
standard startup fonts without using Choices, which Choices can then
override.
@
text
@a128 2
char          * chf = NULL;                    /* Points to the Choices file if loaded in application space    */
char          * cof = NULL;                    /* Similarly, points to the Controls file                       */
@


1.9
log
@Now working on source merged with Kevin Bracey's internationalisation
support. UNIFONT is undefined in the Make File for now. All Res and
Choices files updated appropriately.

Having sorted out the old Choices and Messages to form Choices, Controls
and Messages, this build has had the same cleaning up done internally.
This includes greater consistency in naming schemes and the removal of
the inconsitent choices items - e.g. Choices file entries saying 'delay
images' and 'plain backgrounds' where internally all the flags say 'show
images' and 'show backgrounds'. ChoiceDefs.h and CtrlDefs.h added to
clarify the meaning of some fields, though usage of these is not 100%
in the source (there are cases where parameters are passed through to
functions as ints, and those functions still check these against hard
coded values rather than the #define stuff).

Fetcher status return bits (connected, sent request, etc.) now reflected
in status bar. Progress during fetchs to files are reported by %, where
the size of the object is known. Exceeding 100% drops back to a byte
counter, in case the estimated size was wrong. The progress counter
may be updated after specific delays, rather than 'as often as possible',
to reduce flicker (as requested by D.Brown some time ago).

I've done a small rewrite of the fetch prioritisation scheme in FetchPage.c;
how well this performs in general use across different processor speeds
remains to be tested, but certainly it has some advantages. For each small
fetch window before the rewrite, a 4cs tight loop was entered - this gave a
noticable and substantial drain to the Desktop performance if more than one
was opened. Now, several can be up at once with little hit. The actual file
fetch is on half the priority it was before, with all others taken back
just a bit - e.g. from 20cs per poll to 15cs per poll for flat out
reformatting. You don't seem to lose much time on the format in practice,
and the Desktop feels quite a bit lighter at the same time. There's the
potential for smoother frameset loading in this scheme, too.

When Shift+Clicking on a link meant you still fetched inside the main
browser window, several fetches could occur in a frameset - one per frame.
However, now that you can only do this by clicking on a link that leads to
non-displayable data - or by turning off the small fetch windows by
setting UseSmall to 'no' in Choices - a bug where fetchpage_preprocessed
would stop such fetches as new ones were started was revealed.
The API to frames_abort_fetching has now been extended to include a
'stop file spooling too' flag, allowing a fix to be made by having
fetchpage_preprocess's calls not set this (and it doesn't check the
savelink flag is unset before proceeding, since frames_abort_fetching
does that implicitly now).

Had left the RAM transfer buffer at 16 bytes (from testing) accidentally...
Oops. Upped it to 4K. In addition, when loading data by RAM transfer,
the browser didn't notice if a RAMFetch bounced during the transfer. It
would be treated as a 'first' RAMFetch bounce, basically, and try to go to
file transfer - oops. Fixed.
@
text
@d127 4
a130 2
MessagesFD    * chb;                           /* MessageTrans Choices file control block allocated in RMA     */
MessagesFD    * cob;                           /* MessageTrans Control file control block allocated in RMA     */
d133 2
@


1.8
log
@First a minor warning - the various Res files are out of sync in this build.
Only the Browse resources are currently valid.

Added Utils.Icons - has a few archives inside containing the resources
(well, some of them) used to build various UI sprites for various builds.
Archived because these are unlikely to change much, and putting them on
CVS was a move to, well, archive the stuff...

SaveDBox objects vanquished and requirements in !Run[D] files removed. The
data save code fits much more neatly in amongst the data load protocol
stuff now (with the slight exception of having to split the SaveObject
source into SaveObject and SaveFile - the former handles multiple persistent
dialogues for Shift+Click on links and the like, the latter handles 'one at
a time' transient dialogues for save source and similar). Export Link is now
supported, too, and writes a 'proper' version URI file. You'll find that
double-clicking on old URI files will work as the URI handler picks them up,
whilst new version ones don't; however, dragging onto the browser will only
work with new version files. Note that support for saving and loading URL
files (ANT suite stuff) is present too, so old URI files can be typed as URL
files if you want to keep them working without modification - the URI
handler itself will hopefully support the defined URI file format soon;
double-clicking on old URI files will stop working at that point. Note
there are *lots* of changes in every Res file to support all this. This may
all seem a bit pointless to some, but the changes do in fact make it very
easy to add new save dialogues all over the place. Certainly much easier
than with the previous system, anyway. In fact, post script, image
'save as sprite' took about half an hour, which I hope proves the worth
of the new system.

Merged in newer hotlist code with support for drag cancelling with Escape
(all relevant Res files appropriately updated) and cancelling scrolling
when you've reached the window scroll limit. Had to move some of the
Wimp message handling stuff to the central Protocols source, as clashes
were occuring, and also the hotlist routines were using independent saving
code - a lot of duplicated effort. This was fair enough as at the time the
Hotlist code was written, the Save code couldn't be used in the way it is
now.

New Save Source and Print buttons on the toolbar of some builds.

Phoenix Sprites file made more efficient - the Acorn base section has been
split from the animated upper region. Browse build has a new grey fade
sprite at the back, which is less grainy than the previous one and only
uses 16 colours (with a 16 greyscale palette).

Not really a bug, bug the routine to start an image fetch for INPUT
TYPE=IMAGE forms items only did so if the src field (or equivalent, for
this tag type) was non-NULL. In fact, you should always call image_new_image
and let that handle the rest, otherwise other sections of the code will fail
as they try to obtain an image number for a given HStream and get -1 back.
This problem only generally manifested itself when loading an HTML file to
the browser straight from an application, as many src fields become NULL
when the relativisation routines find nothing to relativise to...

Authentication got broken somewhere along the line - this has been fixed
(in HTMLLib and the browser).

Ctrl+Click on a cross referenced image updates *all* copies, not just the
one with the image data attached.

Next big step: Rip up TBEvents.h and rebuild that whole approach somewhat.
To all those working on the code, my apologies but this means all Res files
will receive a very large number of alterations and there will be extensive
code changes too (mostly naming convention stuff), in more or less all
source files. I am endeavouring to ensure that the new numberspace
convention does not clash with the work being done by Kevin on
internationalisation.
@
text
@d151 2
a152 2
global_choices  choices;                       /* To store [temporary] global choices (from the Choices file)  */
fixed_choices   fixed;                         /* To store fixed choices (from the Messages file)              */
@


1.7
log
@Created Protocols source file and moved a lot of message handling from
handle_messages - the latter now serves as a high level distributor to
lower level functions in Protocols. Incidentally, URL files (as used by
the ANT suite) can be loaded by dragging to the browser in the same way
as URI files - Not A Lot Of People Know That, etc.

Merged new hotlist display type Res file to existing resources, added
support for DataSave message so items can be dragged from the hotlist
to a specific window (RAM transfer for URI and URL files; ScrapFile for
HTML and Text but deleted afterwards and there are appropriate guards
to stop Reload just saying 'not found'; images run through ScrapFile and
there is no choice but to leave them there and do a conventional fetch).

All !RunD files now give a WimpSlot of 2304K. Some small changes to
the Argo and Ursula build Res files to make the menu trees more sensible.
Controls files now take 'file:/' instead of 'file://' in Protocols
section. Definitions at top of URLutils.c *not* altered, as then you
end up with invalid URLs - so it will accept 'file:/', but always generate
'file://'. This is because some browsers exports 'file:/'. Sigh.

make_no_[..._]memory_error functions now return a _kernel_oserror * rather
than void. It's always &erb returned, but it enables users to use a more
elegant 'return make_no_memory_error(1);', say, rather than something
like 'make_no_memory_error(1); return &erb;'. I obviously should've written
it like that at the outset, but never mind. All callers have been
appropriately updated.

The urlutils_leafname_from_url function now replaces illegal characters
(A7000 Welcome Guide p54...) in the leaf with legal alternatives.

Internal URL scheme is now a bit cleaner, with everything properly defined
in URLutils.h. All references to http:, file: and ftp:, with or without
a following '//' use the definitions in here now.

More tidying and some reorganising of Hotlist source. Auto-open delay is
now a Choices item. Some dependencies on statics removed (e.g. the
counting functions don't accumulate into the global item_number now).
The redraw functions used Wimp_TextOp - oops, so this has been amended
to use whatever is supported on your Wimp. This is now in a new function
(utils_text_width()), which the History menu routines also use (there was
a bug in the width routine there anyway, which is therefore fixed in
passing). Several other routines used Wimp_TextOp directly too, and
they have been altered to use the new function as well.

In hotlist code, one of the larger changes is in the API to hotlist_draw_r()
(formerly _hotlist_draw()) which now takes item widths and heights as
parameters - discovering these is quite slow, so doing it every time the
function calls itself recursively is a little less efficient than
passing the values in from elsewhere. Note that underscore prefixed
functions are being slowly renamed to _r suffixed functions, to match
the convention established by Tony Cheal with is table routines. This
makes it much more obvious when something is recursive, as the same
naming convention is used in every browser source file.

Finally, note that I intend to ditch SaveDBox and use an alternate window
with manual control of the messaging in Protocols.c. This will allow
various improvements which at present the SaveDBox operational methods
preclude. I'm going to have to do at least an alternate Window object for
the SaveDBox module to use soon in any case. Getting rid of SaveDBox will
help reduce, if only slightly, demands on the RMA.
@
text
@a114 1
int             printer_message_ref;           /* Set when a PrintSave is send, so DataSaveAck is recognised   */
@


1.6
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d88 1
a88 1
  /* 24   JavaScript functinos             JScr  16777216 */
d92 1
@


1.5
log
@Updated Makefile to work better in folding text editors. More or less rewrote
Limits.h, and ensured consistent comment styling throughout all sources.
Fetch.c/h split to Fetch, FetchHTML and URLveneer. URLstat.c/h produced to
cope with this. OpenURL and Find sources created from bits in the Windows
source file that shouldn't have been there... These will get filled out
shortly. Note that a few functions in Fetch are due to be renamed and moved;
probably to Tokenutils.
@
text
@d91 1
d127 2
a128 1
MessagesFD    * chb;                           /* MessageTrans Choices file control block                      */
@


1.4
log
@Checking in mostly because its Friday... Quite a few little bug fixes
(adding up to a greater whole), which include removal of the dastardly
'invalid image number' errors that trace builds would raise from time to
time. Frame highlights are now better controlled (releaseably so).
Generally, this build represents the first genuinely promising version
of the browser for quite some time, despite the known library problems
with comment handling etc.
@
text
@d15 9
a23 6
/*************************************************/
/* File   : Global.c                             */
/* Purpose: Holds all of the Browser's globals   */
/* Author : A.D.Hodgkinson                       */
/* History: 12-Nov-96: Created                   */
/*************************************************/
d90 1
d107 2
a108 2
jmp_buf         env;                      /* Used for error handler, so it can jump back to poll look if  */
                                          /* the user selects OK rather than Cancel                       */
d110 6
a115 4
int             quit;                     /* Set to 1 to indicate a successful exit should occur          */
int             modechanged;              /* Set to 1 immediately after a mode change                     */
int             printing;                 /* Set to 1 during a printing loop, else 0                      */
int             printer_message_ref;      /* Set when a PrintSave is send, so DataSaveAck is recognised   */
d118 2
a119 2
int             nested_wimp;              /* Wimp version, flag to say the nested window manager is       */
int             task_handle;              /* present, Wimp task handle, pointer to sprite block.          */
d122 2
a123 2
int             taskmodule_ds_registered; /* Set to 1 if the dialler status service call is being watched */
int             uri_module_present;       /* Set to 1 if the URI module is present and may be used        */
d125 4
a128 4
MessagesFD      meb;                      /* MessageTrans Messages file control block                     */
MessagesFD    * chb;                      /* MessageTrans Choices file control block                      */
char            tokens[MaxMsgLen];        /* lookup_token/choice() puts looked up data in here            */
char            lasttokn[MaxLstLen];      /* The last token looked up is stored here for future reference */
d130 1
a130 1
int             messages_list[]   = {0};
d132 2
a133 2
IdBlock         idb;                      /* For all Toolbox-registered event handlers                    */
int             event_code_list[] = {0};
d135 1
a135 1
WimpPollBlock   b;                        /* For Toolbox-registered Wimp event handlers                   */
d137 5
a141 5
int             null_counter;             /* When zero, null events will be disabled, else enabled. For   */
                                          /* each time something wants to claim nulls, it increments this */
                                          /* and decrements it when finished                              */
int             bullets;                  /* Number of bullet sprites available                           */
unsigned int    animation_frames;         /* Holds the number of animation frames in the Sprites file     */
d143 5
a147 5
browser_data  * last_browser;             /* Points to the last browser_data structure in the linked list */
                                          /* of structures associated with all browser windows, or NULL   */
                                          /* there are no browser windows. The structure is defined in    */
                                          /* Global.h                                                     */
browser_data  * highlight_frame = NULL;   /* The currently highlighted frame (if any)                     */
d149 2
a150 2
global_choices  choices;                  /* To store [temporary] global choices (from the Choices file)  */
fixed_choices   fixed;                    /* To store fixed choices (from the Messages file)              */
d152 1
a152 1
char            program_name[MaxPrgLen];  /* _TaskName token contents put in here, for the flex library   */
d154 1
a154 1
_kernel_oserror erb;                      /* Global error block for custom errors                         */
d156 2
a157 2
menu_source     menusrc = Menu_None;      /* For Wimp menus - opened from forms, from history icons, etc. */
void          * menuhdl;                  /* For any extra info needed with a menu                        */
d160 1
a160 1
  userdef       user;                     /* For multiuser builds, holds details of the current user      */
@


1.3
log
@In the middle of customer support work.
@
text
@d86 1
d124 1
a124 1
int             messages_list[]={0};
d127 1
a127 1
int             event_code_list[]={0};
a133 1

a134 1

d141 1
@


1.2
log
@Added various TaskObey files to make different browser variants (the Makefile
has been updated to support this). At present, TARGET must be set for the
Make file to work (some oddity in AMU causing problems here). Added
Multiuser.h to cope with a non-SINGLE_USER build for Customer.
@
text
@d85 1
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d151 4
@
