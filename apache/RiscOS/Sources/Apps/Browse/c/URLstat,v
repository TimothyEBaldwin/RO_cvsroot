head	1.6;
access;
symbols
	Browse-2_16:1.6
	Browse-2_15:1.6
	Browse-2_14:1.6
	Browse-2_13:1.6
	Browse-2_12:1.6
	Browse-2_11:1.6
	Browse-2_10:1.6
	Browse-2_09:1.6
	ahodgkin_208_i4_2:1.6
	ahodgkin_208_i4:1.4
	ahodgkin_208_i3:1.4
	ahodgkin_208_i2:1.4
	ahodgkin_208_i1:1.4
	ahodgkin_207release:1.4
	ahodgkin_206release:1.4
	ahodgkin_205release:1.4
	ahodgkin_204release:1.4
	ahodgkin_202release:1.4
	ahodgkin_201release:1.4
	ahodgkin_200release:1.4
	ahodgkin_133beta:1.4
	ahodgkin_132beta:1.4
	ahodgkin_131beta:1.4
	ahodgkin_130beta:1.4
	ahodgkin_129:1.4
	ahodgkin_128beta:1.4
	ahodgkin_128alpha:1.4
	ahodgkin_127beta2:1.4
	ahodgkin_127beta:1.4
	ahodgkin_126beta:1.2
	ahodgkin_AW97patch:1.2
	ahodgkin_AW97:1.2;
locks; strict;
comment	@# @;


1.6
date	2000.11.14.08.45.08;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	2000.05.31.15.58.50;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.11.20.16.04.41;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.11.19.10.29.15;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.08.31.18.38.24;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.08.18.09.24.07;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    URLstat.c                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Small source file to cope with the fetch status   */
/*          structures, 'urlstat'. Historically created when  */
/*          Fetch.c was split up on 17-Aug-1997, and more     */
/*          than one source file suddenly needed to be able   */
/*          to deal with the structures.                      */
/*                                                            */
/* Author:  A.D.Hodgkinson, including various functions from  */
/*          original Customer browser by Merlyn Kline.       */
/*                                                            */
/* History: 17-Aug-1997 (ADH): Created.                       */
/*          23-May-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#include <stdlib.h>
#include <string.h>

#include <tboxlibs/flex.h>

#include <HTMLLib/HTMLLib.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/event.h>

#include "Global.h"
#include "Utils.h"

#include "URLstat.h"

/* Statics */

static urlstat * fetch_list = NULL; /* Points to the base of the linked list of structures */

/**************************************************************/
/* urlstat_add_entry()                                        */
/*                                                            */
/* Adds a fetch status (urlstat) structure to the list of     */
/* structures.                                                */
/*                                                            */
/* Initialises the contents with zero, and fills in the       */
/* 'next' field (but nothing else).                           */
/*                                                            */
/* Parameters: A number to use in make_no_fetch_memory_error  */
/*             (see Utils.c) if the malloc for the structure  */
/*             fails;                                         */
/*                                                            */
/*             Pointer to a urlstat pointer, in which the     */
/*             address of the new structure is written (this  */
/*             is not touched if the malloc fails).           */
/*                                                            */
/* Assumes:    The urlstat address pointer may be NULL.       */
/**************************************************************/

_kernel_oserror * urlstat_add_entry(int report_num, urlstat ** new_urlstat)
{
  urlstat * up = NULL;

  dprintf(("LMem", "urlstat_add_entry: malloc %d for 'urlstat' structure\n",sizeof(urlstat)));

  /* Allocate memory for the fetch */

  up = calloc(1, sizeof(urlstat));

  /* If the allocation failed, generate an error */

  if (!up) return make_no_fetch_memory_error(report_num);

  #ifdef TRACE
    malloccount += sizeof(urlstat);
    dprintf(("CMal", "** malloccount (urlstat_add_entry): \0211%d\0217\n",malloccount));
  #endif

  /* Otherwise, return the new structure's address */

  if (new_urlstat) *new_urlstat = up;

  /* Link in the new structure */

  up->next   = fetch_list;
  fetch_list = up;

  return NULL;
}

/**************************************************************/
/* urlstat_remove_entry()                                     */
/*                                                            */
/* Removes an entry from the list of urlstat structures,      */
/* freeing memory allocated for it.                           */
/*                                                            */
/* Parameters: Pointer to the urlstat structure to remove.    */
/*                                                            */
/* Returns:    1 if successful, else 0.                       */
/**************************************************************/

int urlstat_remove_entry(urlstat * remove)
{
  urlstat *  up;
  urlstat ** pup;

  /* Point 'up' to the first item, and make 'pup' a pointer */
  /* to the pointer to the first item.                      */

  up  = fetch_list;
  pup = &fetch_list;

  /* Find the structure, but remember where the 'next' */
  /* pointer for the previous one was in 'pup'.        */

  while (up && up != remove) pup = &up->next, up = up->next;

  if (!up) return 0;

  /* Make the previous item - be that a urlstat's 'next' */
  /* pointer or the 'fetch_list' pointer - point to the  */
  /* structure after the current one. This, then, deals  */
  /* with the removed structure being first, middle,     */
  /* last, or the only structure in the list in passing. */

  *pup = up->next;

  /* If there is extra flex data attched, free it */

  #ifdef TRACE
    if (up->extradata)
    {
      dprintf(("LMem", "urlstat_remove_entry: flex_free block %p for 'extradata' field of 'urlstat' structure\n",&up->extradata));
      flexcount -= flex_size((flex_ptr) &up->extradata);
      dprintf(("CFle", "**   flexcount: %d\n",flexcount));
    }
  #endif

  if (up->extradata) flex_free((flex_ptr) &up->extradata);

  /* Free the block and exit */

  #ifdef TRACE
    dprintf(("LMem", "urlstat_remove_entry: free block %p holding 'urlstat' structure\n",up));
    malloccount -= sizeof(urlstat);
    dprintf(("CMal", "** malloccount (urlstat_remove_entry): \0212%d\0217\n",malloccount));
  #endif

  free(up);

  return 1;
}

/**************************************************************/
/* urlstat_find_entry()                                       */
/*                                                            */
/* Returns the address of an entry in the list of urlstat     */
/* structures corresponding to a given fetch session handle,  */
/* or NULL if none is found.                                  */
/*                                                            */
/* Parameters: The session handle.                            */
/*                                                            */
/* Returns:    Pointer to a urlstat structure relevant to the */
/*             session handle, or NULL if no relevant         */
/*             structure is found in the list.                */
/**************************************************************/

urlstat * urlstat_find_entry(int session)
{
  urlstat * up = fetch_list;

  while (up && up->session != session) up = up->next;

  return up;
}
@


1.5
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@a42 5
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

d76 1
a76 3
  #ifdef TRACE
    if (tl & (1u<<12)) Printf("urlstat_add_entry: malloc %d for 'urlstat' structure\n",sizeof(urlstat));
  #endif
d88 1
a88 1
    if (tl & (1u<<13)) Printf("** malloccount (urlstat_add_entry): \0211%d\0217\n",malloccount);
d145 1
a145 1
      if (tl & (1u<<12)) Printf("urlstat_remove_entry: flex_free block %p for 'extradata' field of 'urlstat' structure\n",&up->extradata);
d147 1
a147 1
      if (tl & (1u<<14)) Printf("**   flexcount: %d\n",flexcount);
d156 1
a156 1
    if (tl & (1u<<12)) Printf("urlstat_remove_entry: free block %p holding 'urlstat' structure\n",up);
d158 1
a158 1
    if (tl & (1u<<13)) Printf("** malloccount (urlstat_remove_entry): \0212%d\0217\n",malloccount);
@


1.4
log
@Following the last check-in - all build resources brought up to date.

Adjust-click on forwards/backwards buttons did not work in the intermediate
build, and now does.

Adjust-click on form submission buttons where the submit method is POST
will now work correctly, as the new view inherits the extradata block
of the old. Failure of this is signalled through
make_no_fetch_memory_error, code 16 (see updated Errors file in Docs).
Note the name change of extradata in this context; more details below.

The passing of forms POST data and extra headers for sending in an
HTTP request via. the URL module was all done through pointers into
flex blocks, and was therefore very unsafe. All relevant functions now
use pointers to pointers to the data.

To remove confusion on the umpteen uses of the word 'extradata', the field
in browser_data has been renamed to 'post_data'. The 'extradata' parameters
used within FetchPage.c were all disconnected from the extra header info /
form POST data stuff that extradata is usually associated with, and have
thus also been renamed, in this case to 'appnddata' (Append Data).

As well as X-NoProxy, the browser sends the 'proper' HTTP headers
Pragma:no-cache and Cache-Control:no-cache.

A redirection from a POST request was not handled correctly; despite
what HTTP specs say, you're supposed to use GET for the new URL. The
browser was, but when it chopped off the redundant header data in the
request didn't terminate it and left Content-Type in anyway...! Fixed.

Ctrl+Tab implemented - URL completion. Comes from the hotlist URLs,
hotlist titles, history hosts, paths, full URLs and lastly titles.
See code comments for more (history_find_match, hotlist_find_match).

TableSupport option added to Choices; it is read, can be set by the
front-end, but doesn't actually do anything else yet.

Reversed Choices' semantics on 'don't expire by...' for History. Added
'needs_redraw' flag to choices_get_contents so that, for example, if the
table border types change, browsers get redrawn.
@
text
@d15 17
a31 14
/***************************************************/
/* File   : URLstat.c                              */
/*                                                 */
/* Purpose: Small source file to cope with the     */
/*          fetch status structures, 'urlstat'.    */
/*          Historically created when Fetch.c was  */
/*          split up on 17-Aug-97, and more than   */
/*          one source file suddenly needed to be  */
/*          able to deal with the structures.      */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 17-Aug-97: Created.                    */
/***************************************************/
d36 1
a36 1
#include "HTMLLib.h" /* HTML library API, Which will include html2_ext.h, tags.h and struct.h */
d38 9
a46 2
#include "wimp.h"
#include "event.h"
a47 1
#include "svcprint.h"
d57 19
a75 22
/*************************************************/
/* urlstat_add_entry()                           */
/*                                               */
/* Adds a fetch status (urlstat) structure to    */
/* the list of structures.                       */
/*                                               */
/* Initialises the contents with zero, and fills */
/* in the 'next' field (but nothing else).       */
/*                                               */
/* Parameters: A number to use in                */
/*             make_no_fetch_memory_error (see   */
/*             Utils.c) if the malloc for the    */
/*             structure fails;                  */
/*                                               */
/*             Pointer to a urlstat pointer, in  */
/*             which the address of the new      */
/*             structure is written (this is not */
/*             touched if the malloc fails).     */
/*                                               */
/* Assumes:    The urlstat address pointer may   */
/*             be NULL.                          */
/*************************************************/
d110 10
a119 11
/*************************************************/
/* urlstat_remove_entry()                        */
/*                                               */
/* Removes an entry from the list of urlstat     */
/* structures, freeing memory allocated for it.  */
/*                                               */
/* Parameters: Pointer to the urlstat structure  */
/*             to remove.                        */
/*                                               */
/* Returns:    1 if successful, else 0.          */
/*************************************************/
d173 13
a185 15
/*************************************************/
/* urlstat_find_entry()                          */
/*                                               */
/* Returns the address of an entry in the list   */
/* of urlstat structures corresponding to a      */
/* given fetch session handle, or NULL if none   */
/* is found.                                     */
/*                                               */
/* Parameters: The session handle.               */
/*                                               */
/* Returns:    Pointer to a urlstat structure    */
/*             relevant to the session handle,   */
/*             or NULL if no relevant structure  */
/*             is found in the list.             */
/*************************************************/
@


1.3
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d76 1
a76 1
    if (tl & (1u<<12)) Printf("html_get: malloc %d for 'urlstat' structure\n",sizeof(urlstat));
d141 13
@


1.2
log
@Created Protocols source file and moved a lot of message handling from
handle_messages - the latter now serves as a high level distributor to
lower level functions in Protocols. Incidentally, URL files (as used by
the ANT suite) can be loaded by dragging to the browser in the same way
as URI files - Not A Lot Of People Know That, etc.

Merged new hotlist display type Res file to existing resources, added
support for DataSave message so items can be dragged from the hotlist
to a specific window (RAM transfer for URI and URL files; ScrapFile for
HTML and Text but deleted afterwards and there are appropriate guards
to stop Reload just saying 'not found'; images run through ScrapFile and
there is no choice but to leave them there and do a conventional fetch).

All !RunD files now give a WimpSlot of 2304K. Some small changes to
the Argo and Ursula build Res files to make the menu trees more sensible.
Controls files now take 'file:/' instead of 'file://' in Protocols
section. Definitions at top of URLutils.c *not* altered, as then you
end up with invalid URLs - so it will accept 'file:/', but always generate
'file://'. This is because some browsers exports 'file:/'. Sigh.

make_no_[..._]memory_error functions now return a _kernel_oserror * rather
than void. It's always &erb returned, but it enables users to use a more
elegant 'return make_no_memory_error(1);', say, rather than something
like 'make_no_memory_error(1); return &erb;'. I obviously should've written
it like that at the outset, but never mind. All callers have been
appropriately updated.

The urlutils_leafname_from_url function now replaces illegal characters
(A7000 Welcome Guide p54...) in the leaf with legal alternatives.

Internal URL scheme is now a bit cleaner, with everything properly defined
in URLutils.h. All references to http:, file: and ftp:, with or without
a following '//' use the definitions in here now.

More tidying and some reorganising of Hotlist source. Auto-open delay is
now a Choices item. Some dependencies on statics removed (e.g. the
counting functions don't accumulate into the global item_number now).
The redraw functions used Wimp_TextOp - oops, so this has been amended
to use whatever is supported on your Wimp. This is now in a new function
(utils_text_width()), which the History menu routines also use (there was
a bug in the width routine there anyway, which is therefore fixed in
passing). Several other routines used Wimp_TextOp directly too, and
they have been altered to use the new function as well.

In hotlist code, one of the larger changes is in the API to hotlist_draw_r()
(formerly _hotlist_draw()) which now takes item widths and heights as
parameters - discovering these is quite slow, so doing it every time the
function calls itself recursively is a little less efficient than
passing the values in from elsewhere. Note that underscore prefixed
functions are being slowly renamed to _r suffixed functions, to match
the convention established by Tony Cheal with is table routines. This
makes it much more obvious when something is recursive, as the same
naming convention is used in every browser source file.

Finally, note that I intend to ditch SaveDBox and use an alternate window
with manual control of the messaging in Protocols.c. This will allow
various improvements which at present the SaveDBox operational methods
preclude. I'm going to have to do at least an alternate Window object for
the SaveDBox module to use soon in any case. Getting rid of SaveDBox will
help reduce, if only slightly, demands on the RMA.
@
text
@d81 1
a81 1
  up = malloc(sizeof(urlstat));
d92 1
a92 3
  /* Otherwise, fill the space with zeros and return the address */

  memset(up, 0, sizeof(urlstat));
@


1.1
log
@Updated Makefile to work better in folding text editors. More or less rewrote
Limits.h, and ensured consistent comment styling throughout all sources.
Fetch.c/h split to Fetch, FetchHTML and URLveneer. URLstat.c/h produced to
cope with this. OpenURL and Find sources created from bits in the Windows
source file that shouldn't have been there... These will get filled out
shortly. Note that a few functions in Fetch are due to be renamed and moved;
probably to Tokenutils.
@
text
@d85 1
a85 6
  if (!up)
  {
    make_no_fetch_memory_error(report_num);

    return &erb;
  }
d89 1
a89 1
    if (tl & (1u<<13)) Printf("** malloccount (urlstat_add_entry): \0216%d\0217\n",malloccount);
d149 1
a149 1
    if (tl & (1u<<13)) Printf("** malloccount (urlstat_remove_entry): \0216%d\0217\n",malloccount);
@
