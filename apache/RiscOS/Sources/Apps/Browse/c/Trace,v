head	1.26;
access;
symbols
	Browse-2_16:1.26
	Browse-2_15:1.26
	Browse-2_14:1.26
	Browse-2_13:1.26
	Browse-2_12:1.26
	Browse-2_11:1.26
	Browse-2_10:1.26
	Browse-2_09:1.26
	ahodgkin_208_i4_2:1.26
	ahodgkin_208_i4:1.24
	ahodgkin_208_i3:1.24
	ahodgkin_208_i2:1.23
	ahodgkin_208_i1:1.23
	ahodgkin_207release:1.23
	ahodgkin_206release:1.21
	ahodgkin_205release:1.20
	ahodgkin_204release:1.20
	ahodgkin_202release:1.20
	ahodgkin_201release:1.20
	ahodgkin_200release:1.20
	ahodgkin_133beta:1.20
	ahodgkin_132beta:1.20
	ahodgkin_131beta:1.20
	ahodgkin_130beta:1.19
	ahodgkin_129:1.19
	ahodgkin_128beta:1.19
	ahodgkin_128alpha:1.19
	ahodgkin_127beta2:1.18
	ahodgkin_127beta:1.18
	ahodgkin_126beta:1.17
	ahodgkin_AW97patch:1.16
	ahodgkin_AW97:1.15;
locks; strict;
comment	@# @;


1.26
date	2000.11.14.08.45.08;	author ahodgkin;	state Exp;
branches;
next	1.25;

1.25
date	2000.05.31.15.58.49;	author ahodgkin;	state Exp;
branches;
next	1.24;

1.24
date	2000.03.01.08.45.35;	author ahodgkin;	state Exp;
branches;
next	1.23;

1.23
date	98.09.07.11.47.02;	author ahodgkin;	state Exp;
branches;
next	1.22;

1.22
date	98.07.10.10.31.08;	author kbracey;	state Exp;
branches;
next	1.21;

1.21
date	98.07.09.10.27.27;	author ahodgkin;	state Exp;
branches;
next	1.20;

1.20
date	98.01.31.10.55.40;	author ahodgkin;	state Exp;
branches;
next	1.19;

1.19
date	97.11.26.17.11.14;	author ahodgkin;	state Exp;
branches;
next	1.18;

1.18
date	97.11.19.10.29.15;	author ahodgkin;	state Exp;
branches;
next	1.17;

1.17
date	97.10.30.17.11.17;	author ahodgkin;	state Exp;
branches;
next	1.16;

1.16
date	97.10.22.14.16.27;	author kbracey;	state Exp;
branches;
next	1.15;

1.15
date	97.10.16.09.25.22;	author kbracey;	state Exp;
branches;
next	1.14;

1.14
date	97.10.06.15.18.27;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	97.10.05.17.16.25;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	97.10.03.16.15.14;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	97.10.02.16.19.26;	author kbracey;	state Exp;
branches;
next	1.10;

1.10
date	97.10.02.14.54.48;	author kbracey;	state Exp;
branches;
next	1.9;

1.9
date	97.10.01.17.18.00;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.09.30.14.21.42;	author kbracey;	state Exp;
branches;
next	1.7;

1.7
date	97.09.12.17.19.33;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.09.09.14.13.22;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.08.31.18.38.23;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.08.28.16.08.08;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.08.18.09.24.07;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.07.31.14.50.16;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.29.09;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.26
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Trace.c                                           */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Trace build only debugging functions.             */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 02-Jul-1997 (ADH): Created.                       */
/*          23-May-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifdef TRACE

  #include <stdlib.h>
  #include <stdio.h>
  #include <string.h>

  #include <swis.h>

  #include <HTMLLib/HTMLLib.h>

  #include <tboxlibs/wimp.h>
  #include <tboxlibs/wimplib.h>
  #include <tboxlibs/event.h>

  #define DEBUGLIB
  #include <debuglib/debuglib.h>


#include "Global.h"
  #include "MiscDefs.h"
  #include "Utils.h"

  #include "Trace.h"

  /* Local definitions */

  #define Trace_DumpTokens_Filename_L "<Browse$Dir>.Tokens-L"
  #define Trace_DumpTokens_Filename_S "<Browse$Dir>.Tokens-S"

  #define TrOut(f, d, p) {                                                       \
                           int temp_debug;                                       \
                                                                                 \
                           for (temp_debug = 0; temp_debug < (d); temp_debug ++) \
                           {                                                     \
                             if (fprintf((f), "\t") < 0) return 1;               \
                           }                                                     \
                                                                                 \
                           if (fprintf p < 0) return 1;                          \
                         }                                                       \

  /* Static function prototypes */

  static int          trace_dump_tokens_by_line_r   (browser_data * b, reformat_cell * cell, FILE * file, int depth);
  static int          trace_dump_tokens_by_stream_r (browser_data * b, HStream * streambase, FILE * file, int depth);
  static int          trace_dump_hstream            (FILE * file, HStream * token, int depth);
  static int          trace_dump_tstream            (FILE * file, table_stream * table, int depth);
  static int          trace_dump_row                (FILE * file, table_row * row, int depth);
  static int          trace_dump_head               (FILE * file, table_headdata * head, int depth);
  static const char * trace_tag_name                (tag_no tagno);
  static char       * trace_add_description         (char * list, const char * description);
  static char       * trace_style_bits              (HStream * t);

  /**************************************************************/
  /* trace_dump_tokens_by_line()                                */
  /*                                                            */
  /* Outputs a diagnostic description of the token list of a    */
  /* browser. The browser is obtained by getting the client     */
  /* handle of the ancestor of whatever object raised the       */
  /* ETraceTokenDumpByLine event (see TBEvents.h).              */
  /*                                                            */
  /* This function follows line arrays to get the tokens (so    */
  /* not every token output by the library will be included,    */
  /* but those that the browser is actually using will be).     */
  /*                                                            */
  /* Parameters are as standard for a Toolbox event handler.    */
  /**************************************************************/

  int trace_dump_tokens_by_line(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
  {
    FILE            * tfile;
    browser_data    * b;
    _kernel_oserror * e;

    /* Try to open out the file */

    tfile = fopen(Trace_DumpTokens_Filename_L, "w");

    if (!tfile)
    {
      erb.errnum = Utils_Error_Custom_Message;
      StrNCpy0(erb.errmess,
               "trace_dump_tokens: Error trying to open output file");

      show_error_ret(&erb);

      return 0;
    }

    /* Try to get the browser_data structure */

    e = toolbox_get_client_handle(0, idb->ancestor_id, (void *) &b);
    if (e)
    {
      show_error_ret(e);
      return 0;
    }

    if (!is_known_browser(b))
    {
      erb.errnum = Utils_Error_Custom_Message;
      sprintf(erb.errmess,
              "trace_dump_tokens: Can't determine what token list to use ('%08x' is not a known browser)",
              (int) b);

      show_error_ret(&erb);
      return 0;
    }

    /* OK, can proceed */

    if (fprintf(tfile, "Token dump list for browser %08x\n\n\n\n", (int) b) < 0) goto tdtbl_fo_err;

    if (trace_dump_tokens_by_line_r(b, b->cell, tfile, 0)) goto tdtbl_fo_err;

    /* Finished */

    fclose(tfile);

    _swix(OS_CLI, _IN(0), "Filer_Run " Trace_DumpTokens_Filename_L);

    return 1;

    /* Now some special case code */

tdtbl_fo_err: /* If there's an error whilst writing to the file */

    fclose(tfile);

    erb.errnum = Utils_Error_Custom_Message;
    StrNCpy0(erb.errmess,
             "trace_dump_tokens: Error whilst writing token dump file");

    show_error_ret(e);

    return 0;
  }

  /**************************************************************/
  /* trace_dump_tokens_by_line_r()                              */
  /*                                                            */
  /* Recursive back-end to trace_dump_tokens_by_line.           */
  /*                                                            */
  /* Parameters: Pointer to a browser_data struct relevant to   */
  /*             the overall stream;                            */
  /*                                                            */
  /*             Pointer to a reformat_cell struct holding the  */
  /*             lines to examine;                              */
  /*                                                            */
  /*             Pointer to a FILE structure for outputting the */
  /*             information;                                   */
  /*                                                            */
  /*             Nesting depth.                                 */
  /*                                                            */
  /* Returns:    1 if there was an error, else 0.               */
  /**************************************************************/

  static int trace_dump_tokens_by_line_r(browser_data * b, reformat_cell * cell, FILE * file, int depth)
  {
    int               line, chunk, chunkmax;
    unsigned int      valid;
    HStream         * token = NULL;
    HStream         * last  = NULL;
    _kernel_oserror * e;

    TrOut(file, depth, (file, "Browser %08x, cell %08x:\n\n\n\n", (int) b, (int) cell));

    /* If no lines, is there apparently line or chunk data allocated? */

    if (!cell->nlines)
    {
      TrOut(file, depth, (file, "This cell has no lines.\n\n"));

      if (cell->ldata || cell->cdata)
      {
        TrOut(file, depth, (file,
                    "The cell appears corrupt; nlines = 0, but ldata = %08x and cdata = %08x.\n\n",
                    (int) cell->ldata,
                    (int) cell->cdata));
      }

      return 0;
    }

    /* If there is line data, but nlines is non-zero, the cell is broken */

    if (!cell->ldata)
    {
      TrOut(file, depth, (file,
                  "This cell appears corrupted - nlines = %d, but ldata = NULL.\n\n",
                  cell->nlines));

      return 0;
    }

    /* If we get here, there are lines and line data. If there's no chunk data, */
    /* the cell isn't necessarily broken but we should flag a warning - various */
    /* areas of the browser won't be able to handle this.                       */

    if (!cell->cdata)
    {
      TrOut(file, depth, (file,
                  "Warning: nlines = %d, ldata = %08x, but cdata = NULL.\n\n",
                  cell->nlines,
                  (int) cell->ldata));
    }

    for (line = 0; line < cell->nlines; line ++)
    {
      chunk    = cell->ldata[line].chunks;
      chunkmax = cell->ldata[line].n + chunk;

      for (/* 'chunk' is already initialised */ ; chunk < chunkmax; chunk ++)
      {
        token = cell->cdata[chunk].t;

        if (token != last)
        {
          last = token;

          /* Output info on the token as an HStream */

          TrOut(file, depth, (file,
                      "Line %d chunk %d, new token %08x:\n\n",
                      line,
                      chunk,
                      (int) token));

          /* Deal with tables */

          if (token->tagno == TAG_TABLE)
          {
            TrOut(file, depth, (file, "This token represents a table. As a table_stream struct:\n\n"));

            if (trace_dump_tstream(file, (table_stream *) token, depth)) return 1;

            {
              table_stream   * table     = (table_stream *) token;
              table_row      * row       = table->List;
              table_headdata * head      = NULL;
              reformat_cell  * c         = NULL;
              reformat_cell  * cellarray = table->cells;
              int              cellmax   = table->ColSpan * table->RowSpan;
              int              cellindex;

              if (cellarray)
              {
                {
                  int i;

                  TrOut(file, depth, (file, "Cell array contents:\n\n"));

                  for (i = 0; i < cellmax; i ++)
                  {
                    TrOut(file, depth, (file, "[%d]\t%08x\n", (int) i, (int) &cellarray[i]));
                  }

                  TrOut(file, depth, (file, "\n"));
                }

                while (row)
                {
                  head = row->List;

                  while (
                          head                           &&
                          head->RowOffs < table->RowSpan &&
                          head->ColOffs < table->ColSpan
                        )
                  {
                    switch (head->Tag)
                    {
                      case TagTableData:
                      case TagTableHead:
                      {
                        /* Find the reformat_cell structure for this table cell */

                        cellindex = head->RowOffs * table->ColSpan + head->ColOffs;

                        if (cellindex < cellmax)
                        {
                          c = &cellarray[cellindex];

                          TrOut(file, 0, (file, "\n\n"));

                          if (c)
                          {
                            if (trace_dump_tokens_by_line_r(b, c, file, depth + 1)) return 1;
                          }
                          else
                          {
                            TrOut(file, depth, (file, "Warning: Entry %d in cellarray is NULL\n", cellindex));
                          }
                        }
                      }
                    }

                    if (head->Next)
                    {
                      /* Check the 'next' pointer is valid */

                      e = _swix(OS_ValidateAddress,
                                _INR(0,1) | _OUT(_FLAGS),

                                head->Next,
                                head->Next + 1,

                                &valid);

                      if (e || (valid & _C))
                      {
                        fprintf(file, "Warning: This table_headdata has an invalid 'Next' pointer - aborting list here\n");

                        return 1;
                      }
                    }

                    /* Get next item */

                    head = head->Next;
                  }

                  if (row->Next)
                  {
                    /* Check the 'next' pointer is valid */

                    e = _swix(OS_ValidateAddress,
                              _INR(0,1) | _OUT(_FLAGS),

                              row->Next,
                              row->Next + 1,

                              &valid);

                    if (e || (valid & _C))
                    {
                      fprintf(file, "Warning: This table_row has an invalid 'Next' pointer - aborting list here\n");

                      return 1;
                    }
                  }

                  /* Get next item */

                  row = row->Next;
                }
              }
              else
              {
                TrOut(file, depth, (file, "Warning: No cellarray - can't scan the lines inside the table.\n"));
              }
            }
          }
          else
          {
            /* Normal tokens */

            if (trace_dump_hstream(file, token, depth)) return 1;
          }
        }
        else
        {
          TrOut(file, depth, (file,
                      "Line %d chunk %d, same token (%08x) as last chunk.\n\n",
                      line,
                      chunk,
                      (int) token));
        }
      }
    }

    return 0;
  }

  /**************************************************************/
  /* trace_dump_tokens_by_stream()                              */
  /*                                                            */
  /* Outputs a diagnostic description of the token list of a    */
  /* browser. The browser is obtained by getting the client     */
  /* handle of the ancestor of whatever object raised the       */
  /* ETraceTokenDumpByStream event (see TBEvents.h).            */
  /*                                                            */
  /* This function follows the raw stream to get each token, so */
  /* everything output by the library should be included, even  */
  /* if the browser isn't actually using it.                    */
  /*                                                            */
  /* Parameters are as standard for a Toolbox event handler.    */
  /**************************************************************/

  int trace_dump_tokens_by_stream(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
  {
    FILE            * tfile;
    browser_data    * b;
    _kernel_oserror * e;

    /* Try to open out the file */

    tfile = fopen(Trace_DumpTokens_Filename_S, "w");

    if (!tfile)
    {
      erb.errnum = Utils_Error_Custom_Message;
      StrNCpy0(erb.errmess,
               "trace_dump_tokens: Error trying to open output file");

      show_error_ret(&erb);

      return 0;
    }

    /* Try to get the browser_data structure */

    e = toolbox_get_client_handle(0, idb->ancestor_id, (void *) &b);
    if (e)
    {
      show_error_ret(e);
      return 0;
    }

    if (!is_known_browser(b))
    {
      erb.errnum = Utils_Error_Custom_Message;
      sprintf(erb.errmess,
              "trace_dump_tokens: Can't determine what token list to use ('%08x' is not a known browser)",
              (int) b);

      show_error_ret(&erb);
      return 0;
    }

    /* OK, can proceed */

    if (fprintf(tfile, "Token dump list for browser %08x\n\n\n\n", (int) b) < 0) goto tdtbs_fo_err;

    if (trace_dump_tokens_by_stream_r(b, b->stream, tfile, 0)) goto tdtbs_fo_err;

    /* Finished */

    fclose(tfile);

    _swix(OS_CLI, _IN(0), "Filer_Run " Trace_DumpTokens_Filename_S);

    return 1;

    /* Now some special case code */

tdtbs_fo_err: /* If there's an error whilst writing to the file */

    fclose(tfile);

    erb.errnum = Utils_Error_Custom_Message;
    StrNCpy0(erb.errmess,
             "trace_dump_tokens: Error whilst writing token dump file");

    show_error_ret(e);

    return 0;
  }

  /**************************************************************/
  /* trace_dump_tokens_by_stream_r()                            */
  /*                                                            */
  /* Recursive back-end to trace_dump_tokens_by_stream.         */
  /*                                                            */
  /* Parameters: Pointer to a browser_data struct relevant to   */
  /*             the overall stream;                            */
  /*                                                            */
  /*             Pointer to the first HStream struct to         */
  /*             examine;                                       */
  /*                                                            */
  /*             Pointer to a FILE structure for outputting the */
  /*             information.                                   */
  /*                                                            */
  /*             Nesting depth.                                 */
  /*                                                            */
  /* Returns:    1 if there was an error, else 0.               */
  /**************************************************************/

  static int trace_dump_tokens_by_stream_r(browser_data * b, HStream * streambase, FILE * file, int depth)
  {
    HStream         * token = streambase;
    unsigned int      valid;
    _kernel_oserror * e;

    TrOut(file, depth, (file, "Browser %08x, stream base %08x:\n\n\n\n", (int) b, (int) streambase));

    while (token)
    {
      TrOut(file, depth, (file, "Token %08x:\n\n", (int) token));

      /* Deal with tables */

      if (token->tagno == TAG_TABLE)
      {
        TrOut(file, depth, (file, "This token represents a table. As a table_stream struct:\n\n"));

        if (trace_dump_tstream(file, (table_stream *) token, depth)) return 1;

        /* Recursive table scan */

        {
          table_stream   * table = (table_stream *) token;
          table_row      * row   = table->List;
          table_headdata * head  = NULL;

          while (row)
          {
            TrOut(file, depth, (file, "Table %08x: Row %08x\n\n", (int) table, (int) row));

            if (trace_dump_row(file, row, depth + 1)) return 1;

            head = row->List;

            while (head)
            {
              HStream * base = (HStream *) head->List;

              TrOut(file, depth, (file, "Table %08x, row %08x: Head %08x\n\n", (int) table, (int) row, (int) head));

              if (trace_dump_head(file, head, depth + 1)) return 1;

              TrOut(file, 0, (file, "\n\n"));

              if (trace_dump_tokens_by_stream_r(b, base, file, depth + 1)) return 1;

              if (head->Next)
              {
                /* Check the 'next' pointer is valid */

                e = _swix(OS_ValidateAddress,
                          _INR(0,1) | _OUT(_FLAGS),

                          head->Next,
                          head->Next + 1,

                          &valid);

                if (e || (valid & _C))
                {
                  fprintf(file, "Warning: This table_headdata has an invalid 'Next' pointer - aborting list here\n");

                  return 1;
                }
              }

              /* Get next item */

              head = head->Next;
            }

            if (row->Next)
            {
              /* Check the 'next' pointer is valid */

              e = _swix(OS_ValidateAddress,
                        _INR(0,1) | _OUT(_FLAGS),

                        row->Next,
                        row->Next + 1,

                        &valid);

              if (e || (valid & _C))
              {
                fprintf(file, "Warning: This table_row has an invalid 'Next' pointer - aborting list here\n");

                return 1;
              }
            }

            /* Get next item */

            row = row->Next;
          }
        }
      }
      else if (token->tagno == TAG_OBJECT)
      {
        /* Deal with objects */
        TrOut(file, depth, (file, "This token represents an object.\n\n"));

        if (trace_dump_hstream(file, token, depth)) return 1;

        TrOut(file, depth, (file, "Object %08x:\n\n", (int) token));

        if (trace_dump_tokens_by_stream_r(b, HtmlOBJECTstream(token), file, depth + 1)) return 1;
      }
      else
      {
        /* Normal tokens */

        if (trace_dump_hstream(file, token, depth)) return 1;
      }

      if (token->next)
      {
        /* Check the 'next' pointer is valid */

        e = _swix(OS_ValidateAddress,
                  _INR(0,1) | _OUT(_FLAGS),

                  token->next,
                  token->next + 1,

                  &valid);

        if (e || (valid & _C))
        {
          fprintf(file, "Warning: This token has an invalid 'next' pointer - aborting list here\n");

          return 1;
        }
      }

      /* Follow the list */

      token = token->next;
    }

    return 0;
  }

  /**************************************************************/
  /* trace_dump_hstream()                                       */
  /*                                                            */
  /* Output the contents of an HStream in a readable form to    */
  /* the given file.                                            */
  /*                                                            */
  /* Parameters: Pointer to a FILE structure for the file to    */
  /*             write to;                                      */
  /*                                                            */
  /*             Pointer to the HStream struct;                 */
  /*                                                            */
  /*             Nesting depth.                                 */
  /*                                                            */
  /* Returns:    0 for success, 1 for failure (an error,        */
  /*             usually when writing to the file).             */
  /**************************************************************/

  static int trace_dump_hstream(FILE * file, HStream * token, int depth)
  {
    unsigned int   mask;
    char         * style_info;

    /* Display the known values in the flags word */

    TrOut(file, depth, (file, "flags\t\t0x%x\n",        (int) token->flags));

    if (token->flags & HFlags_DealtWithToken)
    {
      TrOut(file, depth, (file, "\t\tHFlags_DealtWithToken\n"));
    }

    if (token->flags & HFlags_LinkVisited)
    {
      TrOut(file, depth, (file, "\t\tHFlags_LinkVisited\n"));
    }

    if (token->flags & HFlags_IgnoreObject)
    {
      TrOut(file, depth, (file, "\t\tHFlags_IgnoreObject\n"));
    }

    if (token->flags & HFlags_MarksParaSpace)
    {
      TrOut(file, depth, (file, "\t\tHFlags_MarksParaSpace\n"));
    }

    mask = HFlags_DealtWithToken |
           HFlags_LinkVisited    |
           HFlags_IgnoreObject   |
           HFlags_MarksParaSpace;

    if (token->flags & ~mask)
    {
      TrOut(file, depth, (file, "\t\tWarning: undefined flags bits set\n"));
    }

    TrOut(file, depth, (file, "parent\t\t0x%x\n",       (int) token->parent));

    /* Deal with known 'type' field values */

    TrOut(file, depth, (file, "type\t\t%08x\n",         (int) token->type));

    if (ISHEAD(token))
    {
      TrOut(file, depth, (file, "\t\tISHEAD\n"));
    }

    if (ISBODY(token))
    {
      TrOut(file, depth, (file, "\t\tISBODY\n"));
    }

    if (ISNULL(token))
    {
      TrOut(file, depth, (file, "\t\tISNULL\n"));
    }

    if (ISFRAMESET(token))
    {
      TrOut(file, depth, (file, "\t\tISFRAMESET\n"));
    }

    /* General info */

    style_info = trace_style_bits(token);

    if (style_info)
    {
      TrOut(file, depth, (file, "style\t\t%08x: %s\n", (int) token->style, style_info));

      free(style_info);
    }
    else
    {
      if (!token->style)
      {
        TrOut(file, depth, (file, "style\t\t%08x: (NULL)\n",    (int) token->style));
      }
      else
      {
        TrOut(file, depth, (file, "style\t\t%08x: (Can't generate description)\n", (int) token->style));
      }
    }

    // TrOut(file, depth, (file, "style2\t\t%08x\n",       (int) token->style2));

    TrOut(file, depth, (file, "indent\t\t0x%x\n",       (int) token->indent));

    TrOut(file, depth, (file, "anchor\t\t%08x: '%s'\n", (int) token->anchor, token->anchor   ? token->anchor  : "(NULL)"));
    TrOut(file, depth, (file, "text\t\t%08x: '%s'\n",   (int) token->text,   token->text     ? token->text    : "(NULL)"));

    TrOut(file, depth, (file, "tag\t\t%08x\n",          (int) token->tag));
    TrOut(file, depth, (file, "tagno\t\t%d\t: <%s>\n",        token->tagno,  trace_tag_name(token->tagno)));

    TrOut(file, depth, (file, "src\t\t%08x: '%s'\n",    (int) token->src,    token->src      ? token->src     : "(NULL)"));

    TrOut(file, depth, (file, "next\t\t%08x\n",         (int) token->next));
    TrOut(file, depth, (file, "prev\t\t%08x\n",         (int) token->prev));

    TrOut(file, depth, (file, "enctype\t\t%08x: '%s'\n",(int) token->enctype, token->enctype ? token->enctype : "(NULL)"));
    TrOut(file, depth, (file, "name\t\t%08x: '%s'\n",   (int) token->name,    token->name    ? token->name    : "(NULL)"));
    TrOut(file, depth, (file, "value\t\t%08x: '%s'\n",  (int) token->value,   token->value   ? token->value   : "(NULL)"));
    TrOut(file, depth, (file, "target\t\t%08x: '%s'\n", (int) token->target,  token->target  ? token->target  : "(NULL)"));

    TrOut(file, depth, (file, "coords\t\t0x%08x: ",     (int) token->coords));

    /* Deal with coordinates - i.e. image map areas */

    if (token->coords)
    {
      areashape type;
      int       n;

      type = (areashape) token->coords[0];
      n    = token->coords[1];

      switch (type)
      {
        case areashape_RECT:
        {
          if (fprintf(file, "RECT (%d coords): ", n) < 0) return 1;

          if (n != 4)
          {
            if (fprintf(file, "Illegal\n") < 0) return 1;
          }
          else
          {
            if (fprintf(file, "lx %d, ty %d, rx %d, by %d\n", token->coords[2], token->coords[3], token->coords[4], token->coords[5]) < 0) return 1;
          }
        }
        break;

        case areashape_CIRCLE:
        {
          if (fprintf(file, "CIRCLE (%d coords): ", n) < 0) return 1;

          if (n != 3)
          {
            if (fprintf(file, "Illegal\n") < 0) return 1;
          }
          else
          {
            if (fprintf(file, "x %d, y %d, r %d\n", token->coords[2], token->coords[3], token->coords[4]) < 0) return 1;
          }
        }
        break;

        case areashape_POLY:
        {
          if (fprintf(file, "POLY (%d coords)", n) < 0) return 1;

          if (n < 6 || n % 2)
          {
            if (fprintf(file, ": Illegal\n") < 0) return 1;
          }
          else
          {
            int vc;

            if (fprintf(file, "\n\n") < 0) return 1;

            TrOut(file, depth, (file, "\t\t\t       x       y\n"));

            for (vc = 0; vc < n; vc += 2)
            {
              TrOut(file, depth, (file, "\t\t\t%8d%8d\n", token->coords[vc + 2], token->coords[vc + 3]));
            }
          }
        }
        break;

        case areashape_DEFAULT:
        {
          if (fprintf(file, "DEFAULT\n") < 0) return 1;
        }
        break;
      }
    }
    else if (fprintf(file, "(NULL)\n") < 0) return 1;

    /* Continue on with other fields */

    TrOut(file, depth, (file, "size\t\t0x%x\n",         (int) token->size));
    TrOut(file, depth, (file, "maxlen\t\t0x%x\n",       (int) token->maxlen));
    TrOut(file, depth, (file, "rows\t\t0x%x\n",         (int) token->rows));
    TrOut(file, depth, (file, "cols\t\t0x%x\n",         (int) token->cols));
    TrOut(file, depth, (file, "colour\t\t0x%06xxx\n",   (int) token->colour));
    TrOut(file, depth, (file, "fontsize\t%d\n",         (int) token->fontsize));

    switch (token->tagno)
    {
      case TAG_PARAM:
      {
        const char *valuetypename[3] = { "DATA", "REF", "OBJECT" };

        TrOut(file, depth, (file, "NAME\t\t'%s'\n",  HtmlPARAMname(token)  ? HtmlPARAMname(token)  : "(NULL)"));
        TrOut(file, depth, (file, "VALUE\t\t'%s'\n", HtmlPARAMvalue(token) ? HtmlPARAMvalue(token) : "(NULL)"));
        TrOut(file, depth, (file, "VALUETYPE\t%s\n", valuetypename[HtmlPARAMvaluetype(token)]));
        TrOut(file, depth, (file, "TYPE\t\t'%s'\n",  HtmlPARAMtype(token)  ? HtmlPARAMtype(token)  : "(NULL)"));
      }
      break;

      case TAG_FORM:
      {
        TrOut(file, depth, (file, "METHOD\t\t%d\n",  HtmlFORMmethod(token)));
        TrOut(file, depth, (file, "ACTION\t\t%s\n",  HtmlFORMaction(token) ? HtmlFORMaction(token) : "(NULL)"));
        TrOut(file, depth, (file, "TARGET\t\t%s\n",  HtmlFORMtarget(token) ? HtmlFORMtarget(token) : "(NULL)"));
      }
      break;

      case TAG_INPUT:
      {
        TrOut(file, depth, (file, "NAME\t\t%s\n",    HtmlINPUTname(token)  ? HtmlINPUTname(token)  : "(NULL)"));
        TrOut(file, depth, (file, "VALUE\t\t%s\n",   HtmlINPUTvalue(token) ? HtmlINPUTvalue(token) : "(NULL)"));
        TrOut(file, depth, (file, "SRC\t\t%s\n",     HtmlINPUTsrc(token)   ? HtmlINPUTsrc(token)   : "(NULL)"));
        TrOut(file, depth, (file, "ALT\t\t%s\n",     HtmlINPUTalt(token)   ? HtmlINPUTalt(token)   : "(NULL)"));
      }
    }

    TrOut(file, depth, (file, "\n"));

    return 0;
  }

  /**************************************************************/
  /* trace_dump_tstream()                                       */
  /*                                                            */
  /* Output the contents of a table_stream in a readable form   */
  /* to the given file.                                         */
  /*                                                            */
  /* Parameters: Pointer to a FILE structure for the file to    */
  /*             write to;                                      */
  /*                                                            */
  /*             Pointer to the table_stream structure;         */
  /*                                                            */
  /*             Nesting depth.                                 */
  /*                                                            */
  /* Returns:    0 for success, 1 for failure (an error,        */
  /*             usually when writing to the file).             */
  /**************************************************************/

  static int trace_dump_tstream(FILE * file, table_stream * table, int depth)
  {
    unsigned int   mask;
    char         * style_info;

    /* Display the flags */

    TrOut(file, depth, (file, "flags\t\t0x%x\n", (int) table->flags));

    if (table->flags & HFlags_DealtWithToken)
    {
      TrOut(file, depth, (file, "\t\tHFlags_DealtWithToken\n"));
    }

    if (table->flags & HFlags_LinkVisited)
    {
      TrOut(file, depth, (file, "\t\tHFlags_LinkVisited\n"));
    }

    if (table->flags & HFlags_IgnoreObject)
    {
      TrOut(file, depth, (file, "\t\tHFlags_IgnoreObject\n"));
    }

    if (table->flags & HFlags_MarksParaSpace)
    {
      TrOut(file, depth, (file, "\t\tHFlags_MarksParaSpace\n"));
    }

    mask = HFlags_DealtWithToken |
           HFlags_LinkVisited    |
           HFlags_IgnoreObject   |
           HFlags_MarksParaSpace;

    if (table->flags & ~mask)
    {
      TrOut(file, depth, (file, "\t\tWarning: undefined flags bits set\n"));
    }

    TrOut(file, depth, (file, "parent\t\t0x%x\n",  (int) table->parent));

    /* Deal with known cases of the 'type' field */

    TrOut(file, depth, (file, "type\t\t%08x\n",    (int) table->type));

    if (ISHEAD(table))
    {
      TrOut(file, depth, (file, "\t\tISHEAD\n"));
    }

    if (ISBODY(table))
    {
      TrOut(file, depth, (file, "\t\tISBODY\n"));
    }

    if (ISNULL(table))
    {
      TrOut(file, depth, (file, "\t\tISNULL\n"));
    }

    if (ISFRAMESET(table))
    {
      TrOut(file, depth, (file, "\t\tISFRAMESET\n"));
    }

    style_info = trace_style_bits((HStream *) table);

    if (style_info)
    {
      TrOut(file, depth, (file, "style\t\t%08x: %s\n", (int) table->style, style_info));

      free(style_info);
    }
    else
    {
      if (!table->style)
      {
        TrOut(file, depth, (file, "style\t\t%08x: (NULL)\n",    (int) table->style));
      }
      else
      {
        TrOut(file, depth, (file, "style\t\t%08x: (Can't generate description)\n", (int) table->style));
      }
    }

    // TrOut(file, depth, (file, "style2\t\t%08x\n",  (int) table->style2));

    TrOut(file, depth, (file, "Tag\t\t%08x\n",     (int) table->Tag));

    TrOut(file, depth, (file, "ColSpan\t\t%d\n",   (int) table->ColSpan));
    TrOut(file, depth, (file, "RowSpan\t\t%d\n",   (int) table->RowSpan));

    /* Display the arrays of row and column offsets, if possible */

    TrOut(file, depth, (file, "ColOffs\t\t%08x\n", (int) table->ColOffs));

    if (table->ColOffs)
    {
      int col, limit;

      /* Try to use the table_stream's record of number of rows/cols - only */
      /* filled in if the browser has parsed the table. If this is zero,    */
      /* use 16 (more or less arbitrary); otherwise, output as many as      */
      /* indicated plus 4 to check that the array wasn't overshot (should   */
      /* commonly see silly values in those extra 4). Don't do more than 64 */
      /* though, or we'll be here all day... (Potentially, a corrupted or   */
      /* uninitialised ColSpan/RowSpan could indicate a *very* large number */
      /* of rows or columns!).                                              */

      limit = table->ColSpan;

      if (limit == 0) limit = 16;
      else            limit += 4;

      if (limit > 64) limit = 64;

      for (col = 0; col < limit; col ++)
      {
        TrOut(file, depth, (file, "\t\t[%d]\t%08x (%08x)\n", col, (int) table->ColOffs[col], (int) table->ColOffs[col]/400));

        if (table->ColSpan && col == table->ColSpan - 1)
        {
          TrOut(file, depth, (file, "\t\t(This is probably the last entry)\n"));
        }
      }
    }

    TrOut(file, depth, (file, "RowOffs\t\t%08x\n", (int) table->RowOffs));

    /* Same as above, for rows */

    if (table->RowOffs)
    {
      int row, limit;

      limit = table->RowSpan;

      if (limit == 0) limit = 16;
      else            limit += 4;

      if (limit > 64) limit = 64;

      for (row = 0; row < limit; row ++)
      {
        TrOut(file, depth, (file, "\t\t[%d]\t%08x (%08x)\n", row, (int) table->RowOffs[row], (int) table->RowOffs[row]/400));

        if (table->RowSpan && row == table->RowSpan - 1)
        {
          TrOut(file, depth, (file, "\t\t(This is probably the last entry)\n"));
        }
      }
    }

    /* General info */

    TrOut(file, depth, (file, "Next\t\t%08x\n",           (int) table->Next));
    TrOut(file, depth, (file, "Prev\t\t%08x\n",           (int) table->Prev));
    TrOut(file, depth, (file, "List\t\t%08x\n",           (int) table->List));

    TrOut(file, depth, (file, "bgcol\t\t%08x\n",          (int) table->bgcol));
    TrOut(file, depth, (file, "background\t%08x: '%s'\n", (int) table->background, table->background ? table->background : "(NULL)"));

    TrOut(file, depth, (file, "cols\t\t%d\n",             (int) table->cols));
    TrOut(file, depth, (file, "width\t\t%d\n",            (int) table->width));
    TrOut(file, depth, (file, "height\t\t%d\n",           (int) table->height));
    TrOut(file, depth, (file, "border\t\t%d\n",           (int) table->border));

    TrOut(file, depth, (file, "cellspacing\t%d\n",        (int) table->cellspacing));
    TrOut(file, depth, (file, "cellpadding\t%d\n",        (int) table->cellpadding));

    TrOut(file, depth, (file, "stackedstyle\t%08x\n",     (int) table->stackedstyle));
    TrOut(file, depth, (file, "cells\t\t%08x\n",          (int) table->cells));

    TrOut(file, depth, (file, "Align\t\t0x%x\n",          (int) table->Align));

    /* Deal with specific bitfield flags */

    if (table->awaiting_tr)
    {
      TrOut(file, depth, (file, "awaiting_tr\tyes\n"));
    }
    else
    {
      TrOut(file, depth, (file, "awaiting_tr\tno\n"));
    }

    if (table->finished)
    {
      TrOut(file, depth, (file, "finished\tyes\n\n"));
    }
    else
    {
      TrOut(file, depth, (file, "finished\tno\n\n"));
    }

    return 0;
  }

  /**************************************************************/
  /* trace_dump_row()                                           */
  /*                                                            */
  /* Output the contents of a table_row in a readable form to   */
  /* the given file.                                            */
  /*                                                            */
  /* Parameters: Pointer to a FILE structure for the file to    */
  /*             write to;                                      */
  /*                                                            */
  /*             Pointer to the table_row struct;               */
  /*                                                            */
  /*             Nesting depth.                                 */
  /*                                                            */
  /* Returns:    0 for success, 1 for failure (an error,        */
  /*             usually when writing to the file).             */
  /**************************************************************/

  static int trace_dump_row(FILE * file, table_row * row, int depth)
  {
    /* General info */

    TrOut(file, depth, (file, "Next\t\t%08x\n",   (int) row->Next));
    TrOut(file, depth, (file, "Prev\t\t%08x\n",   (int) row->Prev));
    TrOut(file, depth, (file, "parent\t\t%08x\n", (int) row->parent));
    TrOut(file, depth, (file, "List\t\t%08x\n",   (int) row->List));

    /* 8 bit values */

    TrOut(file, depth, (file, "align\t\t%d\n",    (int) row->align));
    TrOut(file, depth, (file, "valign\t\t%d\n",   (int) row->valign));

    /* Background colour (inherited by cells on the row) */

    TrOut(file, depth, (file, "bgcol\t\t%08x\n\n",(int) row->bgcol));

    return 0;
  }

  /**************************************************************/
  /* trace_dump_head()                                          */
  /*                                                            */
  /* Output the contents of a table_headdata in a readable form */
  /* to the given file.                                         */
  /*                                                            */
  /* Parameters: Pointer to a FILE structure for the file to    */
  /*             write to;                                      */
  /*                                                            */
  /*             Pointer to the table_headdata structure;       */
  /*                                                            */
  /*             Nesting depth.                                 */
  /*                                                            */
  /* Returns:    0 for success, 1 for failure (an error,        */
  /*             usually when writing to the file).             */
  /**************************************************************/

  static int trace_dump_head(FILE * file, table_headdata * head, int depth)
  {
    TrOut(file, depth, (file, "ColSpan\t\t%d\n",   (int) head->ColSpan));
    TrOut(file, depth, (file, "RowSpan\t\t%d\n",   (int) head->RowSpan));
    TrOut(file, depth, (file, "ColOffs\t\t%d\n",   (int) head->ColOffs));
    TrOut(file, depth, (file, "RowOffs\t\t%d\n",   (int) head->RowOffs));

    TrOut(file, depth, (file, "Tag\t\t0x%x\n",     (int) head->Tag));

    switch (head->Tag)
    {
      case TagTableHead:
      {
        TrOut(file, depth, (file, "\t\tTagTableHead\n"));
      }
      break;

      case TagTableData:
      {
        TrOut(file, depth, (file, "\t\tTagTableData\n"));
      }
      break;

      default:
      {
        TrOut(file, depth, (file, "\t\tWarning: Unrecognised Tag type\n"));
      }
      break;
    }

    /* General info */

    TrOut(file, depth, (file, "parent\t\t%08x\n",   (int) head->parent));
    TrOut(file, depth, (file, "Next\t\t%08x\n",     (int) head->Next));
    TrOut(file, depth, (file, "Prev\t\t%08x\n",     (int) head->Prev));
    TrOut(file, depth, (file, "List\t\t%08x\n",     (int) head->List));

    /* 8 bit values */

    TrOut(file, depth, (file, "Align\t\t%d\n",      (int) head->Align));
    TrOut(file, depth, (file, "VAlign\t\t%d\n",     (int) head->VAlign));

    /* Background image */

    TrOut(file, depth, (file, "background\t%08x: '%s'\n", (int) head->background, head->background ? head->background : "(NULL)"));

    /* More general info */

    TrOut(file, depth, (file, "width\t\t%d (%d)\n", (int) head->width,  (int) head->width  / 400));
    TrOut(file, depth, (file, "height\t\t%d (%d)\n",(int) head->height, (int) head->height / 400));

    /* Background colour */

    TrOut(file, depth, (file, "bgcol\t\t%08x\n\n",  (int) head->bgcol));

    return 0;
  }

  /**************************************************************/
  /* trace_dump_buffer()                                        */
  /*                                                            */
  /* Outputs a given buffer's contents over TML, with           */
  /* unprintable chars shown in green (well, this depends on    */
  /* the buffer type - see below) as '[xx]', where xx is the    */
  /* character's ASCII code in hex.                             */
  /*                                                            */
  /* For clarity at the output terminal, it is possible to      */
  /* specify the type of buffer - a buffer for data             */
  /* transmission, reception, or a miscellaneous buffer.        */
  /* Control code colours will change for this; green for       */
  /* transmission, red for reception, cyan for others.          */
  /*                                                            */
  /* Parameters: Pointer to the buffer;                         */
  /*                                                            */
  /*             Size of the buffer;                            */
  /*                                                            */
  /*             1 for a transmit buffer, 2 for a receive       */
  /*             buffer, else 'other'.                          */
  /**************************************************************/

  void trace_dump_buffer(void * buffer, int buffer_size, int type)
  {
    int  i;
    char c;

    /* Is the buffer empty (well, zero bytes long or less...)? */

    if (buffer_size < 1)
    {
      if      (type == 1) dprintf(("", "\nTransmission buffer %p empty\n\n", buffer));
      else if (type == 2) dprintf(("", "\nReception buffer %p empty\n\n", buffer));
      else                dprintf(("", "\nGeneral buffer %p empty\n\n", buffer));

      return;
    }

    /* If not, dump the contents - first, a header message */

    if      (type == 1) dprintf(("", "\nTransmission buffer %p contents:\n\n", buffer));
    else if (type == 2) dprintf(("", "\nReception buffer %p contents:\n\n", buffer));
    else                dprintf(("", "\nGeneral buffer %p contents:\n\n", buffer));

    /* Now, the body of the buffer */

    for (i = 0; i < buffer_size; i++)
    {
      c = *((char *) buffer + i);

      if (type == 1)
      {
        if (c < 32 || c == 127) dprintf(("", "\0212[%02x]\0217", (int) c));
        else dprintf(("", "%c", c));
      }
      else if (type == 2)
      {
        if (c < 32 || c == 127) dprintf(("", "\0211[%02x]\0217", (int) c));
        else dprintf(("", "%c", c));
      }
      else
      {
        if (c < 32 || c == 127) dprintf(("", "\0216[%02x]\0217", (int) c));
        else dprintf(("", "%c", c));
      }
    }

    /* Ensure the next output item is one blank line after the buffer */
    /* contents (aesthetics and clarity)                              */

    dprintf(("", "\n\n"));
  }

  /**************************************************************/
  /* trace_tag_name()                                           */
  /*                                                            */
  /* Converts a tag number (enum tag_no) to textual form (why   */
  /* isn't there a built in function to do this?).              */
  /*                                                            */
  /* Parameters: Tag number.                                    */
  /*                                                            */
  /* Returns:    Pointer to a statically allocated name.        */
  /**************************************************************/

  static const char * trace_tag_name(tag_no tagno)
  {
    switch (tagno)
    {
      case TAG_NONE:       return "none";
      case TAG_A:          return "A";
      case TAG_ADDRESS:    return "ADDRESS";
      case TAG_BOLD:       return "BOLD";
      case TAG_BASE:       return "BASE";
      case TAG_BASEFONT:   return "BASEFONT";
      case TAG_BLOCKQUOTE: return "BLOCKQUOTE";
      case TAG_BR:         return "BR";
      case TAG_CENTER:     return "CENTER";
      case TAG_CITE:       return "CITE";
      case TAG_CODE:       return "CODE";
      case TAG_DD:         return "DD";
      case TAG_DIR:        return "DIR";
      case TAG_DIV:        return "DIV";
      case TAG_DL:         return "DL";
      case TAG_DT:         return "DT";
      case TAG_DUMMY:      return "DUMMY";
      case TAG_EM:         return "EM";
      case TAG_FONT:       return "FONT";
      case TAG_FORM:       return "FORM";
      case TAG_H1:         return "H1";
      case TAG_H2:         return "H2";
      case TAG_H3:         return "H3";
      case TAG_H4:         return "H4";
      case TAG_H5:         return "H5";
      case TAG_H6:         return "H6";
      case TAG_HR:         return "HR";
      case TAG_ITALIC:     return "ITALIC";
      case TAG_IMG:        return "IMG";
      case TAG_INPUT:      return "INPUT";
      case TAG_ISINDEX:    return "ISINDEX";
      case TAG_KBD:        return "KBD";
      case TAG_LI:         return "LI";
      case TAG_LINK:       return "LINK";
      case TAG_MENU:       return "MENU";
      case TAG_META:       return "META";
      case TAG_NOSCRIPT:   return "NOSCRIPT";
      case TAG_OL:         return "OL";
      case TAG_OPTION:     return "OPTION";
      case TAG_P:          return "P";
      case TAG_PRE:        return "PRE";
      case TAG_SAMP:       return "SAMP";
      case TAG_SCRIPT:     return "SCRIPT";
      case TAG_SELECT:     return "SELECT";
      case TAG_STRIKE:     return "STRIKE";
      case TAG_STRONG:     return "STRONG";
      case TAG_STYLE:      return "STYLE";
      case TAG_TABLE:      return "TABLE";
      case TAG_TD:         return "TD";
      case TAG_TEXTAREA:   return "TEXTAREA";
      case TAG_TITLE:      return "TITLE";
      case TAG_TH:         return "TH";
      case TAG_TR:         return "TR";
      case TAG_TT:         return "TT";
      case TAG_U:          return "U";
      case TAG_UL:         return "UL";
      case TAG_VAR:        return "VAR";
      case TAG_XMP:        return "XMP";
      case TAG_FRAME:      return "FRAME";
      case TAG_BODY:       return "BODY";
      case TAG_FRAMESET:   return "FRAMESET";
      case TAG_HEAD:       return "HEAD";
      case TAG_NOFRAMES:   return "NOFRAMES";
      case TAG_SUB:        return "SUB";
      case TAG_SUP:        return "SUP";
      case TAG_AREA:       return "AREA";
      case TAG_MAP:        return "MAP";
      case TAG_OBJECT:     return "OBJECT";
      case TAG_PARAM:      return "PARAM";
      case TAG_BIG:        return "BIG";
      case TAG_SMALL:      return "SMALL";
      case TAG_APPLET:     return "APPLET";
      case TAG_FORM_END:   return "/FORM";

      default: return "unknown";
    }
  }

  /**************************************************************/
  /* trace_add_description()                                    */
  /*                                                            */
  /* Used to add a description to a list of other descriptions. */
  /* If the first item, the text is merely placed in a new      */
  /* block; subsequent items are concatenated onto the existing */
  /* list preceeded by a comma and a space.                     */
  /*                                                            */
  /* Parameters: Pointer to the malloc block, or NULL if        */
  /*             nothing has been allocated yet;                */
  /*                                                            */
  /*             Pointer to a statically allocated description  */
  /*             string.                                        */
  /*                                                            */
  /* Returns:    Pointer to the malloc block, which may have    */
  /*             moved.                                         */
  /**************************************************************/

  static char * trace_add_description(char * list, const char * description)
  {
    if (list)
    {
      char * new = realloc(list, strlen(list) + 3); /* 3 = comma, space, terminator */

      if (new)
      {
        list = new;
        strcat(list, ", ");

        new = realloc(list, strlen(list) + strlen(description) + 1);

        if (new)
        {
          list = new;
          strcat(list, description);
        }
      }
    }
    else
    {
      list = malloc(strlen(description) + 1);

      if (list) strcpy(list, description);
    }

    return list;
  }

  /**************************************************************/
  /* trace_style_bits()                                         */
  /*                                                            */
  /* Converts a style word to textual form.                     */
  /*                                                            */
  /* Parameters: Pointer to the token to examine.               */
  /*                                                            */
  /* Returns:    Pointer to a comma separated list of names, in */
  /*             a malloced block which the caller is           */
  /*             responsible for freeing. NULL may be returned  */
  /*             if the initial malloc fails.                   */
  /**************************************************************/

  static char * trace_style_bits(HStream * t)
  {
    char         * list = NULL;
    unsigned int   rems = t->style;

    if (ISHEAD(t))
    {
      if (t->style & LINK)           rems &= (~LINK),       list = trace_add_description(list, "<LIST>");
      if (t->style & ISINDEX)        rems &= (~ISINDEX),    list = trace_add_description(list, "<ISINDEX>");
      if (t->style & META)           rems &= (~META),       list = trace_add_description(list, "<META>");

      if (rems)
      {
        char desc[32];

        sprintf(desc, "Unknown remainder 0x%08x", (int) rems);

        list = trace_add_description(list, desc);
      }
    }
    else if (ISFRAMESET(t))
    {
      if (t->style & FRAME)          rems &= (~FRAME),      list = trace_add_description(list, "<FRAME>");

      if (rems)
      {
        char desc[32];

        sprintf(desc, "Unknown remainder 0x%08x", (int) rems);

        list = trace_add_description(list, desc);
      }
    }
    else if (ISBODY(t))
    {
      /* General flags */

      if (t->style & BOLD)           rems &= (~BOLD),       list = trace_add_description(list, "<BOLD>");
      if (t->style & ITALIC)         rems &= (~ITALIC),     list = trace_add_description(list, "<ITALIC>");
      if (t->style & TT)             rems &= (~TT),         list = trace_add_description(list, "<TT>");
      if (t->style & A)              rems &= (~A),          list = trace_add_description(list, "<A>");
      if (t->style & IMG)            rems &= (~IMG),        list = trace_add_description(list, "<IMG>");
      if (t->style & P)              rems &= (~P),          list = trace_add_description(list, "<P>");
      if (t->style & BR)             rems &= (~BR),         list = trace_add_description(list, "<BR>");
      if (t->style & HR)             rems &= (~HR),         list = trace_add_description(list, "<HR>");
      if (t->style & PRE)            rems &= (~PRE),        list = trace_add_description(list, "<PRE>");
      if (t->style & DL)             rems &= (~DL),         list = trace_add_description(list, "<DL>");
      if (t->style & DT)             rems &= (~DT),         list = trace_add_description(list, "<DT>");
      if (t->style & DD)             rems &= (~DD),         list = trace_add_description(list, "<DD>");
      if (t->style & UL)             rems &= (~UL),         list = trace_add_description(list, "<UL>");
      if (t->style & LI)             rems &= (~LI),         list = trace_add_description(list, "<LI>");
      if (t->style & BLOCKQUOTE)     rems &= (~BLOCKQUOTE), list = trace_add_description(list, "<BLOCKQUOTE>");
      if (t->style & ADDRESS)        rems &= (~ADDRESS),    list = trace_add_description(list, "<ADDRESS>");
      if (t->style & CENTER)         rems &= (~CENTER),     list = trace_add_description(list, "<CENTER>");
      if (t->style & FONT)           rems &= (~FONT),       list = trace_add_description(list, "<FONT>");
      if (t->style & UNDERLINE)      rems &= (~UNDERLINE),  list = trace_add_description(list, "<UNDERLINE>");
      if (t->style & STRIKE)         rems &= (~STRIKE),     list = trace_add_description(list, "<STRIKE>");
      if (t->style & FORM)           rems &= (~FORM),       list = trace_add_description(list, "<FORM>");
      if (t->style & RIGHT)          rems &= (~RIGHT),      list = trace_add_description(list, "<RIGHT>");
      if (t->style & SUB)            rems &= (~SUB),        list = trace_add_description(list, "<SUB>");
      if (t->style & SUP)            rems &= (~SUP),        list = trace_add_description(list, "<SUP>");
      if (t->style & NOBR)           rems &= (~NOBR),       list = trace_add_description(list, "<NOBR>");

      /* This area has got fairly messy due to various table */
      /* implementations and so forth                        */

      if (t->style & PCDATA)         rems &= (~PCDATA),     list = trace_add_description(list, "(PCDATA)");

      /* Heading items */

      if ((t->style & H_MASK) == H1) rems &= (~H_MASK),     list = trace_add_description(list, "<H1>");
      if ((t->style & H_MASK) == H2) rems &= (~H_MASK),     list = trace_add_description(list, "<H2>");
      if ((t->style & H_MASK) == H3) rems &= (~H_MASK),     list = trace_add_description(list, "<H3>");
      if ((t->style & H_MASK) == H4) rems &= (~H_MASK),     list = trace_add_description(list, "<H4>");
      if ((t->style & H_MASK) == H5) rems &= (~H_MASK),     list = trace_add_description(list, "<H5>");
      if ((t->style & H_MASK) == H6) rems &= (~H_MASK),     list = trace_add_description(list, "<H6>");

      if (rems)
      {
        char desc[32];

        sprintf(desc, "Unknown remainder 0x%08x", (int) rems);

        list = trace_add_description(list, desc);
      }

      /* These currently map back to existing items so they don't need including */
      /* separately (as every TT item would say TT, CODE, SAMP... etc. - they    */
      /* are left here to make it easier to add them to the above code should a  */
      /* distinct bit get allocated.                                             */

      // if (t->style & EM)           rems &= (~EM),         list = trace_add_description(list, "<EM -> ITALIC>");
      // if (t->style & STRONG)       rems &= (~STRONG),     list = trace_add_description(list, "<STRONG -> BOLD>");
      // if (t->style & CODE)         rems &= (~CODE),       list = trace_add_description(list, "<CODE -> TT>");
      // if (t->style & SAMP)         rems &= (~SAMP),       list = trace_add_description(list, "<SAMP -> TT>");
      // if (t->style & KBD)          rems &= (~KBD),        list = trace_add_description(list, "<KBD -> TT>");
      // if (t->style & VAR)          rems &= (~VAR),        list = trace_add_description(list, "<VAR -> TT>");
      // if (t->style & CITE)         rems &= (~CITE),       list = trace_add_description(list, "<CITE -> ITALIC>");
    }
    else list = trace_add_description(list, "(Not HEAD or BODY)");

    return list;
  }

#else

  /* This'll work, but it is more efficient not to link to  */
  /* Trace.o at all for non-debug builds, as if TRACE is    */
  /* undefined, absolutely nothing within Trace.o will be   */
  /* referenced (and nothing will #include Trace.h either). */

  void trace_keep_compiler_happy(void)
  {
    int a;

    a = 0;
  }

#endif
@


1.25
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d45 2
a46 1
  #include "Global.h"
d1253 3
a1255 3
      if      (type == 1) Printf("\nTransmission buffer %p empty\n\n", buffer);
      else if (type == 2) Printf("\nReception buffer %p empty\n\n", buffer);
      else                Printf("\nGeneral buffer %p empty\n\n", buffer);
d1262 3
a1264 3
    if      (type == 1) Printf("\nTransmission buffer %p contents:\n\n", buffer);
    else if (type == 2) Printf("\nReception buffer %p contents:\n\n", buffer);
    else                Printf("\nGeneral buffer %p contents:\n\n", buffer);
d1274 2
a1275 2
        if (c < 32 || c == 127) Printf("\0212[%02x]\0217", (int) c);
        else Printf("%c", c);
d1279 2
a1280 2
        if (c < 32 || c == 127) Printf("\0211[%02x]\0217", (int) c);
        else Printf("%c", c);
d1284 2
a1285 2
        if (c < 32 || c == 127) Printf("\0216[%02x]\0217", (int) c);
        else Printf("%c", c);
d1292 1
a1292 1
    Printf("\n\n");
@


1.24
log
@Header and footer support working a lot better than in the previous
release. Could do with some code tidying, but little else to do.
Fixed a typo in JavaScript.c that stopped debug builds compiling,
and updated Trace.c to know about all current HStream flags bits.
@
text
@d15 12
a26 14
/***************************************************/
/* File   : Trace.c                                */
/*                                                 */
/* Purpose: Trace build only debugging functions   */
/*          - not the sort of thing that hacks     */
/*          up some text display or whatever; that */
/*          is the domain of TML. These functions  */
/*          are for principally file-based output  */
/*          of things like token list dumps.       */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 02-Jul-97: Created.                    */
/***************************************************/
d34 1
a34 1
  #include "swis.h"
d36 1
a36 1
  #include "HTMLLib.h" /* HTML library API, Which will include html2_ext.h, tags.h and struct.h */
d38 6
a43 3
  #include "wimp.h"
  #include "wimplib.h"
  #include "event.h"
a44 1
  #include "svcprint.h"
d79 14
a92 17
  /*************************************************/
  /* trace_dump_tokens_by_line()                   */
  /*                                               */
  /* Outputs a diagnostic description of the       */
  /* token list of a browser. The browser is       */
  /* obtained by getting the client handle of the  */
  /* ancestor of whatever object raised the        */
  /* ETraceTokenDumpByLine event (see TBEvents.h). */
  /*                                               */
  /* This function follows line arrays to get the  */
  /* tokens (so not every token output by the      */
  /* library will be included, but those that the  */
  /* browser is actually using will be).           */
  /*                                               */
  /* Parameters are as standard for a Toolbox      */
  /* event handler.                                */
  /*************************************************/
d164 18
a181 19
  /*************************************************/
  /* trace_dump_tokens_by_line_r()                 */
  /*                                               */
  /* Recursive back-end to                         */
  /* trace_dump_tokens_by_line.                    */
  /*                                               */
  /* Parameters: Pointer to a browser_data struct  */
  /*             relevant to the overall stream;   */
  /*                                               */
  /*             Pointer to a reformat_cell struct */
  /*             holding the lines to examine;     */
  /*                                               */
  /*             Pointer to a FILE structure for   */
  /*             outputting the information;       */
  /*                                               */
  /*             Nesting depth.                    */
  /*                                               */
  /* Returns:    1 if there was an error, else 0.  */
  /*************************************************/
d400 14
a413 18
  /*************************************************/
  /* trace_dump_tokens_by_stream()                 */
  /*                                               */
  /* Outputs a diagnostic description of the       */
  /* token list of a browser. The browser is       */
  /* obtained by getting the client handle of the  */
  /* ancestor of whatever object raised the        */
  /* ETraceTokenDumpByStream event (see            */
  /* TBEvents.h).                                  */
  /*                                               */
  /* This function follows the raw stream to get   */
  /* each token, so everything output by the       */
  /* library should be included, even if the       */
  /* browser isn't actually using it.              */
  /*                                               */
  /* Parameters are as standard for a Toolbox      */
  /* event handler.                                */
  /*************************************************/
d485 18
a502 19
  /*************************************************/
  /* trace_dump_tokens_by_stream_r()               */
  /*                                               */
  /* Recursive back-end to                         */
  /* trace_dump_tokens_by_stream.                  */
  /*                                               */
  /* Parameters: Pointer to a browser_data struct  */
  /*             relevant to the overall stream;   */
  /*                                               */
  /*             Pointer to the first HStream      */
  /*             struct to examine;                */
  /*                                               */
  /*             Pointer to a FILE structure for   */
  /*             outputting the information.       */
  /*                                               */
  /*             Nesting depth.                    */
  /*                                               */
  /* Returns:    1 if there was an error, else 0.  */
  /*************************************************/
d648 16
a663 17
  /*************************************************/
  /* trace_dump_hstream()                          */
  /*                                               */
  /* Output the contents of an HStream in a        */
  /* readable form to the given file.              */
  /*                                               */
  /* Parameters: Pointer to a FILE structure for   */
  /*             the file to write to;             */
  /*                                               */
  /*             Pointer to the HStream struct;    */
  /*                                               */
  /*             Nesting depth.                    */
  /*                                               */
  /* Returns:    0 for success, 1 for failure (an  */
  /*             error, usually when writing to    */
  /*             the file).                        */
  /*************************************************/
d893 16
a908 18
  /*************************************************/
  /* trace_dump_tstream()                          */
  /*                                               */
  /* Output the contents of a table_stream in a    */
  /* readable form to the given file.              */
  /*                                               */
  /* Parameters: Pointer to a FILE structure for   */
  /*             the file to write to;             */
  /*                                               */
  /*             Pointer to the table_stream       */
  /*             structure;                        */
  /*                                               */
  /*             Nesting depth.                    */
  /*                                               */
  /* Returns:    0 for success, 1 for failure (an  */
  /*             error, usually when writing to    */
  /*             the file).                        */
  /*************************************************/
d1108 16
a1123 17
  /*************************************************/
  /* trace_dump_row()                              */
  /*                                               */
  /* Output the contents of a table_row in a       */
  /* readable form to the given file.              */
  /*                                               */
  /* Parameters: Pointer to a FILE structure for   */
  /*             the file to write to;             */
  /*                                               */
  /*             Pointer to the table_row struct;  */
  /*                                               */
  /*             Nesting depth.                    */
  /*                                               */
  /* Returns:    0 for success, 1 for failure (an  */
  /*             error, usually when writing to    */
  /*             the file).                        */
  /*************************************************/
d1146 16
a1161 18
  /*************************************************/
  /* trace_dump_head()                             */
  /*                                               */
  /* Output the contents of a table_headdata in a  */
  /* readable form to the given file.              */
  /*                                               */
  /* Parameters: Pointer to a FILE structure for   */
  /*             the file to write to;             */
  /*                                               */
  /*             Pointer to the table_headdata     */
  /*             structure;                        */
  /*                                               */
  /*             Nesting depth.                    */
  /*                                               */
  /* Returns:    0 for success, 1 for failure (an  */
  /*             error, usually when writing to    */
  /*             the file).                        */
  /*************************************************/
d1221 21
a1241 23
  /*************************************************/
  /* trace_dump_buffer()                           */
  /*                                               */
  /* Outputs a given buffer's contents over TML,   */
  /* with unprintable chars shown in green (well,  */
  /* this depends on the buffer type - see below)  */
  /* as '[xx]', where xx is the character's ASCII  */
  /* code in hex.                                  */
  /*                                               */
  /* For clarity at the output terminal, it is     */
  /* possible to specify the type of buffer - a    */
  /* buffer for data transmission, reception, or   */
  /* a miscellaneous buffer. Control code colours  */
  /* will change for this; green for transmission, */
  /* red for reception, cyan for others.           */
  /*                                               */
  /* Parameters: Pointer to the buffer;            */
  /*                                               */
  /*             Size of the buffer;               */
  /*                                               */
  /*             1 for a transmit buffer, 2 for a  */
  /*             receive buffer, else 'other'.     */
  /*************************************************/
d1294 10
a1303 12
  /*************************************************/
  /* trace_tag_name()                              */
  /*                                               */
  /* Converts a tag number (enum tag_no) to        */
  /* textual form (why isn't there a built in      */
  /* function to do this?).                        */
  /*                                               */
  /* Parameters: Tag number.                       */
  /*                                               */
  /* Returns:    Pointer to a statically allocated */
  /*             name.                             */
  /*************************************************/
d1387 17
a1403 19
  /*************************************************/
  /* trace_add_description()                       */
  /*                                               */
  /* Used to add a description to a list of other  */
  /* descriptions. If the first item, the text is  */
  /* merely placed in a new block; subsequent      */
  /* items are concatenated onto the existing list */
  /* preceeded by a comma and a space.             */
  /*                                               */
  /* Parameters: Pointer to the malloc block, or   */
  /*             NULL if nothing has been          */
  /*             allocated yet;                    */
  /*                                               */
  /*             Pointer to a statically allocated */
  /*             description string.               */
  /*                                               */
  /* Returns:    Pointer to the malloc block,      */
  /*             which may have moved.             */
  /*************************************************/
d1435 12
a1446 13
  /*************************************************/
  /* trace_style_bits()                            */
  /*                                               */
  /* Converts a style word to textual form.        */
  /*                                               */
  /* Parameters: Pointer to the token to examine.  */
  /*                                               */
  /* Returns:    Pointer to a comma separated list */
  /*             of names, in a malloced block     */
  /*             which the caller is responsible   */
  /*             for freeing. NULL may be returned */
  /*             if the initial malloc fails.      */
  /*************************************************/
@


1.23
log
@Everyone else seems to be checking lots of stuff in lately, so I've
decided to join in. This is an intermediate check-in and so not all
resources etc. will be up to date. You should be able to make Phoenix
and a debug build out of it. As a reminder, to make a JavaScript build:

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean. This now strips dynamic dependencies from the MakeFile
   automatically, to save you having to do it yourself.
 * Run one of the TaskObey files with the "J" suffix, e.g. !DeskBrwsJ -
   this uses the same .o directory for object files and exports to the
   same position in the Targets directory as the non-JavaScript build,
   but it does produce a unique binary in 'abs' and symbols table in
   'syms'.
 * Sourcing an appropriate !Run (with increased WimpSlot value), !Boot
   and About resource is done automatically.
 * Some, but not all of the !xxxD (debug) TaskObey files will make
   JavaScript versions in passing - check the JSUFFIX value on the Make
   command line parameters in the file.

This'll only work on RISC OS 3.1 due to the use of MemLib.

Here's the change list:

Included MNG icons in sprites files; added Sprites23 for some builds.
Added in ANT URL file icon (b28) derived from URI file icon, because
the Save dialogue can need it.

No, you do *not* need to define the same keyboard shortcuts in each
frame since the ancestor keeps the input focus and we've basically
dropped non-nested Wimp support. Maintaining no less than 4 lists of
identical shortcuts was a pain. Some Res files now only have the
lists in the main browser window and button bar objects (these two
are both required still).

Ursula build Markers button arrangement changed from 1x3 horizontal to
2x2 tilted, as in Phoenix, by popular demand.

Couple of hotlist bugs fixed; dragging an item and deleteing it with
Ctrl+X didn't terminate the drag, and deleteting an item underneath a
menu opened for it didn't close the menu.

'SendReferer' option added to all Choices files, all set to 'always'.
Put just beneath 'Clone' as it refers to header items, though really,
both Clone and SendReferer should probably be in the "Fetch controls"
section rather than "Multiuser environments and proxying"! Front-end
control of this is available.

In image_export_original, save_save_source, save_transfer_source and
save_save_object, flex_set_budge(0) was called to lock the heap but the
return value wasn't stored. flex_set_budge(1) was then used to unlock
the heap. All calls now remember and restore the old value, which is
both safer in case one calls another and allows the flex_set_budge
call in Main.c to have an application-wide meaning, as intended.

Some restructuring to the data load and RAM transfer sections of
Protocols.c; remote hotlist builds wouldn't allow files to be loaded
to browser windows before, and can now drop URL, URI or text files to
the Open URL dialogue.

New option "MinimumFontSize", lets the 'size' attribute of the 'font'
element be overridden. Default value is 1, to allow the full range of
values for the attribute. Setting to 7, for example, would give font
size 7 text at all times. Another new option, "ToggleOnXOnly", to
make Toggle Size only extend the window vertically (with Ctrl then
being used to toggle to genuine full size, rather than vice versa).
All Choices files updated to hold both of these options; only the
first has front-end control available (see debug build Res file).

JavaScript Document object exists; frames array etc. working. Can now
just about use "http://www.acorn.com/~ahodgkin/jschain/" but it does
abort after a bit - problems with frames again, I suspect. Is is pretty
slow, too. Can now press Escape to terminate a script.

Main.c erroneously referred to Controls file entry "StopWebServe" as
"StopWebProxy". Fixed.

Keyboard shortcuts to raise SaveFile are now possible in a general sense;
the code before was in the ToBeShown handler and just checked for a parent
component of -1. It then assumed "save frame HTML source". Now there's the
savefile_raise_from_shortcut function, which together with the seven new
event codes in SaveFile.h allows saving of HTML source and frame location,
export of links, images, backgrounds and the page as text or draw, to all
be invoked by keyboard shortcuts. Some Res files have some of these defined.

In reformat_check_height, the first check to see if setpara should be set
references a field in tpLast without checking if it is NULL. Whilst the
'line > 0' check should mean that tpLast wasn't NULL anyway, a direct
call to the function from outside of the reformatter might have tripped
up on this - the check for tpLast != NULL is now made.

Adjust-click on close icon in window showing file: URL attempts to open
the parent Filer window.

Reformatter used to try and find a selectable token if keyboard control
was enabled in a really stupid place - could make reformatting become
very slow if no selectables were present, especially if the page had a
few tables on it. Preprocessor now does this (since it goes through all
of the tokens anyway), the reformatter just doing a last check to ensure
no frames have obscured the selectable and if so, it tries to move it.
Done in the reformatter as generating a line array implies the data really
is visible.

Ctrl+Tab URL completion now builds a full list of matches from the hotlist
and history and can cycle through them (Ctrl+Shift+Tab stepping backwards).

Will give a real error rather than just "Data Abort" if it goes wrong
now. Someone somewhere is setting bit 30 of the error which confused
the replacement signal handler. Flag bits are now masked off (as they
should've been to start with).
@
text
@d699 5
d706 2
a707 1
           HFlags_IgnoreObject;
d941 10
d952 3
a954 1
           HFlags_LinkVisited;
@


1.22
log
@Save trace files as text, rather than saving them as data and manually
setting their type to text.
@
text
@d1346 1
@


1.21
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d105 1
a105 1
    tfile = fopen(Trace_DumpTokens_Filename_L, "wb");
d148 1
a148 11
    _swix(OS_CLI,
          _IN(0),

          "SetType "
          Trace_DumpTokens_Filename_L
          " fff");

    _swix(OS_CLI,
          _IN(0),

          "Filer_Run " Trace_DumpTokens_Filename_L);
d431 1
a431 1
    tfile = fopen(Trace_DumpTokens_Filename_S, "wb");
d474 1
a474 11
    _swix(OS_CLI,
          _IN(0),

          "SetType "
          Trace_DumpTokens_Filename_S
          " fff");

    _swix(OS_CLI,
          _IN(0),

          "Filer_Run " Trace_DumpTokens_Filename_S);
@


1.20
log
@Check for WindowManager 3.97 and ensure Unicode$Path is set in all
!Run[D] files, don't set the Alias$@@PrintType_FF4 variable, and updated
Customer build ROM obey file variants. Various other changes to
the Run files for new module versions, updated paths to support
new positions of choices, hotlist and histories (see later), etc.

!Sprites[22] files hold small !app icons for some variants, and
an ic_browse sprite. Some variants now have a Sprites and Sprites22
file instead of just Sprites, with the former containing various
mode 12 or 15 specific sprites.

Text files dragged to the URL writable are treated as ANT URL files. This
relies on URLBarWrit (Toolbars.h) being a unique ID, which it should be,
but beware of the Hotlist and Choices numberspaces...

INPUT TYPE=BUTTON supported. Form items without a FORM tag are now shown
(as MSIE 4, but not NN 4).

'*', '-', '@@', '_' and '.' are not escaped when submitting forms now. The
Web interface to the IMDb now works.

INPUT TYPE=HIDDEN items will not affect the line height anymore - so
http://www.hotmail.com/ now has correctly aligned writable icons, for
example. Similarly, TAG_FORM and TAG_FORM_END items could push up
line height and don't anymore.

HRs with a specified pixel width will now influence the size of a table
cell (they didn't before).

BRs now checked by tagno field when the browser needs to know something
was an actual BR tag rather than just a line break signal, and by the
style bit entry when only the indication of a line break is required.

Table widths of 0 or 0% are ignored.

Trace.c updated to report height and background fields in a table_stream.

fm_putsl() writes a terminator into the string; the Forms.c routines were
calling this for displaying INPUT TYPE=PASSWORD fields using the FE_PassCode
literal string (a line of stars). This write into a read only data area
would make the debugger fault the access. A local char array is now used
instead, to get round this (note the use of var[]=literal rather than
var[sizeof(literal)]; strcpy(var, literal) due to some weird compiler bug
that copies the wrong thing into 'var' under some (undefined...)
circumstances).

Text areas don't scroll back to the top line when clicked in anymore;
single line writables don't scroll back to the left either. When
reentering a text area from 'above', the caret appears at the top line
rather than 'somewhere further down'...

ARROWS_MOVE_OUT compile time option at the top of Forms.c defines whether
you must press Tab/Shift+Tab to move between writable fields in forms or
if up/down will drop out of them, though if keyboard control is on this
is enforced (or you get trapped inside the form!).

urlutils_filetype_from_url now uses MimeMap module.

If fetcher is told a page is text, it'll check for a filename extension and
may choose to use this instead (e.g. it may find it's HTML instead). This
is to try and get around duff servers... (e.g. http://www.batalarms.co.uk/).

Save dialogues shouldn't flicker when options that don't change the
filetype are selected (before, the draggable sprite was always reset for
each selection). Noticed the erroneous setting of a static variable in
SaveFile.c by a call to this by SaveObject.c, and so added a flag to
savefile_set_filetype to deal with this - would have been possible to get
the wrong filetype sent to applications or at best the wrong filetype
sprite in the dialogue without that.

The caret shouldn't jump out of a form back to the URL writable if the page
reformats now.

Table background colours now supported (as in the colour you see in the
border space if the cellspacing is large enough; this is as in MSIE, not
as in Navigator). Drawfile output routines updated accordingly.

Corrected erroneous use of wimpt_dx() / wimpt_dy() in a couple of places
in Images.c, which meant that (say) 1x1 images didn't work correctly in
medium resolution display modes.

Now have support for save as text (component ID and event 0x12) and save
as Draw (component ID and event 0x13) buttons. Dubious conditions for
greying and ungreying the print, save source and view source buttons and
menu options sorted out as part of implementing the same for the two new
buttons; added greying out of their associated menu items in passing.

Turned kerning on in draw file objects (does mean a rather heinous
increase in file size, but this is the only way to ensure the draw file
matches the visible page).

Comments before functions in SaveDraw.c are now complete and up to date.

Image and visit histories now generate a crude hash number to speed up
searching for items. It does give a speed increase, though it's a
disappointingly small one.

Issue of left/right margins and cellpaddings sorted out. Now have
redraw_left/right_margin for finding out the basic gap you must leave.
redraw_left/right_gap then gives any extra indentation for LI, BLOCKQUOTE
or whatever. The last two can be subtracted from the display width to
get an available page width for any section of text. Note that
redraw_left_gap replaces redraw_margin. The redraw_start_x function
uses the above to work out where a line's left hand edge should be,
taking account of left/right/centre alignment. HRs have been fixed now
(they were quite broken in v1.30, I think) based on this new model and
the behaviour of MSIE/NN 4.

Fixed width of cells with no contents - cell padding values wouldn't
have worked properly as the reformatter returns 0 rather than the left
hand margin size if given no stream.

Removed FM_Absolute flags for Font_Paint (spotted by DBrown) - sets bit
2, which is reserved...?

IMG width and height in % terms now works correctly; a % of available
width (after margins and indents) or height on the main page or for
a table cell, if the image lies in one. Because of the chicken-and-egg
problem with the latter, the cell must specify a width and/or height
for things to work properly. If this is not done, you'll usually end
up with a 1:1 scaled image (as in Navigator 4, rather than ending up
with no image or even no cell (!), as in MSIE 4).

HEIGHT attribute on a TABLE tag is supported, but only in a crude
fashion; the extra height (if there is any) is distributed over the
rows in a linear fashion. This is probably all you have to do in
practice, but I haven't checked. To maintain a notion of min/max
height as well as width would of course require a great deal more
work...

If using client pull to reload a page with a fragment ('...#name')
specified, then the reload wouldn't work on the same page; it'd just
jump to the fragment position. This won't happen if b->reloading is
set now (so works in conjunction with client pull on the same page
forcing a non-cached fetch). Similarly, if POSTing to such a URL,
a fetch will proceed (both these fixes done originally for
http://jupiter.beseen.com/chat/rooms/g/1678/).

browser_inherit split to browser_inherit and browser_inherit_post_data;
the code for the latter didn't clear any post_data in the child before
copying from the parent either, and could cause flex errors (now fixed).

Res file for Ursula ('Desktop' Browse) build tweaked - bits in the
font choices dialogue renamed, and button bar rearranged to hold the
new Save As Draw button. Other builds have had Save As Draw and
Save As Text buttons added, or not, depending upon availability of
suitable sprites, required UI simplicity, etc.

Now have:

  Browse$ChoicesFile
  Browse$ControlsFile
  Browse$ChoicesSave
  Browse$ControlsSave

(the last two are new) for loading and saving of the Choices or Controls
files. If unset, <App$Dir>.Choices or <App$Dir>.Controls will be set.
E.g., you could set Browse$ChoicesFile to be:

  <App$Dir>.Choices,Choices:WWW.(app).Choices

for loading and

  <Choices$Write>.WWW.(app).Choices

for saving. (The browser never saves Controls at the moment, so the
relevant variable above isn't effectively implemented, but could be
in future). Similarly, to support asymetric loading/saving of the Hotlist,
there are HotlistSave, HistorySave and ImageHistorySave entries in Choices
to complement HotlistPath, HistoryPath and ImageHistoryPath (which are used
for loading). save_save_choices will create directories as needed to obtain
the given path (and has also been fixed in various areas that hadn't been
tested out until now; e.g. zero termination of the AppName$ChoicesFile
variable expansion...). !Run[D] files updated appropriately.

Table widthing code rewritten. Slower, but a lot better on the whole.
Still has some problems - still needs a final 'make sure nothing is
below minimum width' scan, which it should be possible to do without.
No time to fix this at present!

The reformatter will now 'glue together' an LI token followed by any
non-LI token; so a bullet point followed by an item should not be able to
have a line break inserted after the bullet because of very tight width
constraints (it could before - yuk...).

'about:' brings up a page about the browser and any Plug-Ins, as with
Navigator (for example).

URI files support titles, as per spec. version 8. Saving a current
location to the Hotlist will thus give a sensible title now (unless
you're in a frame, so there's no title to get...). Of course, v1.00
files without a title still work.

Note that NOBR is *not* supported in this build and this combined with
the new table widther may cause problems on some sites (e.g. Microsoft's
home page!).
@
text
@d155 5
d490 5
@


1.19
log
@Image history - sizes of images are remembered for future reference (if
the sizes aren't specified in the HTML, they can be looked for in the
image history instead to minimise reformatting requirements). Choices
file options ImageHistoryPath, ImageExpiryAge, ImageMaxSize and
SaveImageHistory added to support this (all have a direct analogy to
the global History items of the same name after removing 'Image').

Text area items are now the correct height for the number of rows
specified in the HTML, don't scroll a line too early, and have the
caret placed at the start of the text when moved into from above
or at the end when moved into from below (rather than always at
the end, which was behaviour inherited from single line writables,
where this is desirable). The top of the text area is aligned to
the top of any line of text on the same line, with the text area
dropping below the text, rather than the bottom of the area matching
the text baseline and extending upwards.

Filename extensions for download files are only stripped if an
attempt to convert to a RISC OS filetype through the Mime Mapper module
does not return an error or Data (0xffd) filetype. '.cgi' is a special
case which is always stripped.

Altered heading styles - all are bold, none are italic, H3 is as big
as H2 was, H2 is a little larger, and others scale down to H6 being
the size as normal text (but, as I say, bold).

Sorted out tables and forms. We can just look for tagno=TAG_FORM, and
get rid of the wobbly form_flag; also discarded the redundant
reprocess_table flag in fetch_preprocess_token. Two separate forms
in consecutive table cells (for example) which used to fail - they
were submitted as one single form - will now work correctly.

Fixed nasty bug in FontManage.c where font size 7 would intermittently
fail. The stupid font sizes that it could ask the Font Manager for may
be responsible for the occasional Font Manager crashes that have been
noticed. Array for font sizes was declared as [Limits_FontSizes], but
indices 1 to Limits_FontSizes are actually used - so needed a '+ 1'
in the declaration... :-/

Replaced the case insensitive string comparison functions in Utils.c
with more efficient versions by S.Brodie.

MAXLENGTH specifier in INPUT tags is now supported. If unspecified or
specifically zero, the browser overrides and allows any length.
@
text
@d1069 3
a1071 10
    TrOut(file, depth, (file, "Next\t\t%08x\n",      (int) table->Next));
    TrOut(file, depth, (file, "Prev\t\t%08x\n",      (int) table->Prev));
    TrOut(file, depth, (file, "List\t\t%08x\n",      (int) table->List));

    TrOut(file, depth, (file, "bgcol\t\t%08x\n",     (int) table->bgcol));
    TrOut(file, depth, (file, "cols\t\t%d\n",        (int) table->cols));
    TrOut(file, depth, (file, "width\t\t%d\n",       (int) table->width));
    TrOut(file, depth, (file, "border\t\t%d\n",      (int) table->border));
    TrOut(file, depth, (file, "cellspacing\t%d\n",   (int) table->cellspacing));
    TrOut(file, depth, (file, "cellpadding\t%d\n",   (int) table->cellpadding));
d1073 2
a1074 2
    TrOut(file, depth, (file, "stackedstyle\t%08x\n",(int) table->stackedstyle));
    TrOut(file, depth, (file, "cells\t\t%08x\n",     (int) table->cells));
d1076 12
a1087 1
    TrOut(file, depth, (file, "Align\t\t0x%x\n",     (int) table->Align));
d1391 1
a1509 1
      if (t->style & OL)             rems &= (~OL),         list = trace_add_description(list, "<OL>");
d1522 1
@


1.18
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d878 2
a879 2
        TrOut(file, depth, (file, "NAME\t\t'%s'\n",    HtmlPARAMname(token)  ? HtmlPARAMname(token)  : "(NULL)"));
        TrOut(file, depth, (file, "VALUE\t\t'%s'\n",   HtmlPARAMvalue(token) ? HtmlPARAMvalue(token) : "(NULL)"));
d881 18
a898 1
        TrOut(file, depth, (file, "TYPE\t\t'%s'\n",    HtmlPARAMtype(token)  ? HtmlPARAMtype(token)  : "(NULL)"));
@


1.17
log
@Removed 'The Onion' link from some Hotlist files. Time showed that the
site wasn't entirely Family Friendly (TM)... Removed Shift Control (it's
gone offline now), and corrected the Telegraph URL from ...the-telegraph...
to just ...telegraph...

StrongHelp manual generator now tries to work out the number of lines in
the table on the root page more intelligently.

Plug-in support extended to handle Shockwave. Quite a lot of underlying
work for this, including a pseudo cache system for temporary files.

Bug in redraw routines: they plotted background images within table
cells, when nothing should have been drawn. Oops. When background images
in cells are properly supported, this can get sorted out.

Tweaked vertical plot position of HRs (up to 4 OS units too high before due
to rounding).

Various Res file bits and pieces, Ursula build taken up to v1.26 beta
for release on the Browser site. *Note* not all resources are up to date!
This will be done after AW97.
@
text
@d786 79
@


1.16
log
@Extended Trace.c to dump OBJECT contents and PARAM info
@
text
@d704 5
d710 2
a711 1
           HFlags_LinkVisited;
@


1.15
log
@Places where ModeChange should be called in image_fill_background marked,
but commented out (because of problems with flex moving when redirected
to a sprite).
A few more tags added to Trace.
@
text
@d621 11
d785 16
a800 1
    TrOut(file, depth, (file, "fontsize\t%d\n\n",       (int) token->fontsize));
@


1.14
log
@Calling HtmlEndParse at the end of html_get_next_token and setting
up->context to NULL was wrong; fetch_fetcher would end up recalling
html_get_next_token later which would then call HtmlParse even though
the document parse had just finished! The HtmlEndParse call has now
been moved to fetch_stop.

Altered reformatter to claim fonts inside a browser, rather than
claiming them for nothing and losing them afterwards.

Got rid of TAG == TABLE and ISBODY tests, replacing with tagno == TAG_TABLE.
Removed all references to TD, TH, TR and TABLE in the style word.
@
text
@d1255 4
@


1.13
log
@Big steps forward in vertical white space handling as a result of
improvements in HTMLLib in this area ( -> all versions now 1.22 beta-2).
As a result, the 'last_space' field in browser_data struct has been
removed. Note that this relies quite heavily on setting of the PCDATA
bit in the 'style' field of an HStream and the automatic collapsing
of (for example) multiple P tags inside HTMLLib.

Trace.c improved to recognise various bits in the 'style' field of an
HStream structure.

Phoenix defaults altered to a more 'standard' set of choices; Trinity
as the serif font, with a slightly larger default font size. This is
because there's a good chance it might get released to a wider audience
than Acorn internal (though the animation and icon bar sprites will
have to change before then...).

MiscDefs updated for new SWI numbers in HTTP module; !Run[D] files thus
updated to require HTTP 0.42 or later. At this point, all earlier
modules are not backwards compatible in terms of direct calls to the
HTTP module, though this only affects cookies_process_cookie at present.
At the same time, checks for System$Path, InetDBase$Path, and setting
of Inet$MimeMappings if not already defined have been added to the Run
files along with RMEnsures of Resolver and MimeMap.

Object and PlugIn c/h pairs created to handle OBJECT, EMBED and APPLET,
and the RISC OS Plug-In interface respectively. Not part of the build
process yet. Addition of 'odata' field in browser_data struct and
definition of chunk CK_OBJB for memory_set_chunk_size() are in support
of this.
@
text
@d265 1
a265 1
          if (token->tag == TABLE && ISBODY(token))
d537 1
a537 1
      if (token->tag == TABLE && ISBODY(token))
d772 1
d1390 1
a1390 4
      if (t->style & TR)             rems &= (~TR),         list = trace_add_description(list, "Deprecated <TR)");
      if (t->style & TD)             rems &= (~TD),         list = trace_add_description(list, "Deprecated <TD>");
      if (t->style & PCDATA)         rems &= (~TH),         list = trace_add_description(list, "<PCDATA>");
      if (t->style & TABLE)          rems &= (~TABLE),      list = trace_add_description(list, "<TABLE>");
@


1.12
log
@!Run[D] files updated to require FTP 0.14, and ensure that the Resolver
and MimeMap modules are present. Paragraph tags can now affect images
and other such objects - previously they only worked on text (this was
noticed for a DIV element containing one image, which was preceeded by
a P element but didn't have any white space above it).

This is the source that will be released to PSI, and builds the Customer
!Customer and internal !Phoenix releases at about 5:00pm on 10/03/97.
@
text
@d76 2
d676 2
a677 1
    unsigned int mask;
d729 22
a750 2
    TrOut(file, depth, (file, "style\t\t%08x\n",        (int) token->style));
  /*TrOut(file, depth, (file, "style2\t\t%08x\n",       (int) token->style2));*/
d799 2
a800 1
    unsigned int mask;
d850 22
a871 2
    TrOut(file, depth, (file, "style\t\t%08x\n",   (int) table->style));
  /*TrOut(file, depth, (file, "style2\t\t%08x\n",  (int) table->style2));*/
d1259 171
d1440 1
@


1.11
log
@Removed another style2 reference
@
text
@d1143 6
a1148 6
      case TAG_NONE: return "none";
      case TAG_A: return "A";
      case TAG_ADDRESS: return "ADDRESS";
      case TAG_BOLD: return "BOLD";
      case TAG_BASE: return "BASE";
      case TAG_BASEFONT: return "BASEFONT";
d1150 60
a1209 56
      case TAG_BR: return "BR";
      case TAG_CENTER: return "CENTER";
      case TAG_CITE: return "CITE";
      case TAG_CODE: return "CODE";
      case TAG_DD: return "DD";
      case TAG_DIR: return "DIR";
      case TAG_DL: return "DL";
      case TAG_DT: return "DT";
      case TAG_EM: return "EM";
      case TAG_FONT: return "FONT";
      case TAG_FORM: return "FORM";
      case TAG_H1: return "H1";
      case TAG_H2: return "H2";
      case TAG_H3: return "H3";
      case TAG_H4: return "H4";
      case TAG_H5: return "H5";
      case TAG_H6: return "H6";
      case TAG_HR: return "HR";
      case TAG_ITALIC: return "ITALIC";
      case TAG_IMG: return "IMG";
      case TAG_INPUT: return "INPUT";
      case TAG_ISINDEX: return "ISINDEX";
      case TAG_KBD: return "KBD";
      case TAG_LI: return "LI";
      case TAG_LINK: return "LINK";
      case TAG_MENU: return "MENU";
      case TAG_META: return "META";
      case TAG_OL: return "OL";
      case TAG_OPTION: return "OPTION";
      case TAG_P: return "P";
      case TAG_PRE: return "PRE";
      case TAG_SAMP: return "SAMP";
      case TAG_SCRIPT: return "SCRIPT";
      case TAG_SELECT: return "SELECT";
      case TAG_STRONG: return "STRONG";
      case TAG_STYLE: return "STYLE";
      case TAG_TABLE: return "TABLE";
      case TAG_TD: return "TD";
      case TAG_TEXTAREA: return "TEXTAREA";
      case TAG_TITLE: return "TITLE";
      case TAG_TH: return "TH";
      case TAG_TR: return "TR";
      case TAG_TT: return "TT";
      case TAG_UL: return "UL";
      case TAG_VAR: return "VAR";
      case TAG_XMP: return "XMP";
      case TAG_FRAME: return "FRAME";
      case TAG_BODY: return "BODY";
      case TAG_FRAMESET: return "FRAMESET";
      case TAG_HEAD: return "HEAD";
      case TAG_NOFRAMES: return "NOFRAMES";
      case TAG_SUB: return "SUB";
      case TAG_SUP: return "SUP";
      case TAG_AREA: return "AREA";
      case TAG_MAP: return "MAP";
      case TAG_OBJECT: return "OBJECT";
@


1.10
log
@Commented out reference to second style word.
@
text
@d827 1
a827 1
    TrOut(file, depth, (file, "style2\t\t%08x\n",  (int) table->style2));
@


1.9
log
@Changed some error handling in Choices, a little bit of reformatting,
removed unnecessary tempstring in Main, and played about with the
choices Res file objects.
@
text
@d727 1
a727 1
    TrOut(file, depth, (file, "style2\t\t%08x\n",       (int) token->style2));
@


1.8
log
@Added Choices.c to Browse and BrowseD builds (David forgot).
Renamed Symbols to syms and ensured it is CDir'ed.
Made Trace.c show tag_no field textually.
Ungreyed CJK entries in Encoding menu.
@
text
@d69 7
a75 7
  static int trace_dump_tokens_by_line_r   (browser_data * b, reformat_cell * cell, FILE * file, int depth);
  static int trace_dump_tokens_by_stream_r (browser_data * b, HStream * streambase, FILE * file, int depth);
  static int trace_dump_hstream            (FILE * file, HStream * token, int depth);
  static int trace_dump_tstream            (FILE * file, table_stream * table, int depth);
  static int trace_dump_row                (FILE * file, table_row * row, int depth);
  static int trace_dump_head               (FILE * file, table_headdata * head, int depth);
  static const char *trace_tag_name        (tag_no tagno);
d1138 2
a1139 1
  static const char *trace_tag_name(tag_no tagno)
d1210 1
@


1.7
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d75 1
d734 1
d1126 83
@


1.6
log
@First a minor warning - the various Res files are out of sync in this build.
Only the Browse resources are currently valid.

Added Utils.Icons - has a few archives inside containing the resources
(well, some of them) used to build various UI sprites for various builds.
Archived because these are unlikely to change much, and putting them on
CVS was a move to, well, archive the stuff...

SaveDBox objects vanquished and requirements in !Run[D] files removed. The
data save code fits much more neatly in amongst the data load protocol
stuff now (with the slight exception of having to split the SaveObject
source into SaveObject and SaveFile - the former handles multiple persistent
dialogues for Shift+Click on links and the like, the latter handles 'one at
a time' transient dialogues for save source and similar). Export Link is now
supported, too, and writes a 'proper' version URI file. You'll find that
double-clicking on old URI files will work as the URI handler picks them up,
whilst new version ones don't; however, dragging onto the browser will only
work with new version files. Note that support for saving and loading URL
files (ANT suite stuff) is present too, so old URI files can be typed as URL
files if you want to keep them working without modification - the URI
handler itself will hopefully support the defined URI file format soon;
double-clicking on old URI files will stop working at that point. Note
there are *lots* of changes in every Res file to support all this. This may
all seem a bit pointless to some, but the changes do in fact make it very
easy to add new save dialogues all over the place. Certainly much easier
than with the previous system, anyway. In fact, post script, image
'save as sprite' took about half an hour, which I hope proves the worth
of the new system.

Merged in newer hotlist code with support for drag cancelling with Escape
(all relevant Res files appropriately updated) and cancelling scrolling
when you've reached the window scroll limit. Had to move some of the
Wimp message handling stuff to the central Protocols source, as clashes
were occuring, and also the hotlist routines were using independent saving
code - a lot of duplicated effort. This was fair enough as at the time the
Hotlist code was written, the Save code couldn't be used in the way it is
now.

New Save Source and Print buttons on the toolbar of some builds.

Phoenix Sprites file made more efficient - the Acorn base section has been
split from the animated upper region. Browse build has a new grey fade
sprite at the back, which is less grainy than the previous one and only
uses 16 colours (with a 16 greyscale palette).

Not really a bug, bug the routine to start an image fetch for INPUT
TYPE=IMAGE forms items only did so if the src field (or equivalent, for
this tag type) was non-NULL. In fact, you should always call image_new_image
and let that handle the rest, otherwise other sections of the code will fail
as they try to obtain an image number for a given HStream and get -1 back.
This problem only generally manifested itself when loading an HTML file to
the browser straight from an application, as many src fields become NULL
when the relativisation routines find nothing to relativise to...

Authentication got broken somewhere along the line - this has been fixed
(in HTMLLib and the browser).

Ctrl+Click on a cross referenced image updates *all* copies, not just the
one with the image data attached.

Next big step: Rip up TBEvents.h and rebuild that whole approach somewhat.
To all those working on the code, my apologies but this means all Res files
will receive a very large number of alterations and there will be extensive
code changes too (mostly naming convention stuff), in more or less all
source files. I am endeavouring to ensure that the new numberspace
convention does not clash with the work being done by Kevin on
internationalisation.
@
text
@d83 1
a83 1
  /* Trace_TokenDumpByLine event (see TBEvents.h). */
d413 1
a413 1
  /* Trace_TokenDumpByStream event (see            */
@


1.5
log
@Created Protocols source file and moved a lot of message handling from
handle_messages - the latter now serves as a high level distributor to
lower level functions in Protocols. Incidentally, URL files (as used by
the ANT suite) can be loaded by dragging to the browser in the same way
as URI files - Not A Lot Of People Know That, etc.

Merged new hotlist display type Res file to existing resources, added
support for DataSave message so items can be dragged from the hotlist
to a specific window (RAM transfer for URI and URL files; ScrapFile for
HTML and Text but deleted afterwards and there are appropriate guards
to stop Reload just saying 'not found'; images run through ScrapFile and
there is no choice but to leave them there and do a conventional fetch).

All !RunD files now give a WimpSlot of 2304K. Some small changes to
the Argo and Ursula build Res files to make the menu trees more sensible.
Controls files now take 'file:/' instead of 'file://' in Protocols
section. Definitions at top of URLutils.c *not* altered, as then you
end up with invalid URLs - so it will accept 'file:/', but always generate
'file://'. This is because some browsers exports 'file:/'. Sigh.

make_no_[..._]memory_error functions now return a _kernel_oserror * rather
than void. It's always &erb returned, but it enables users to use a more
elegant 'return make_no_memory_error(1);', say, rather than something
like 'make_no_memory_error(1); return &erb;'. I obviously should've written
it like that at the outset, but never mind. All callers have been
appropriately updated.

The urlutils_leafname_from_url function now replaces illegal characters
(A7000 Welcome Guide p54...) in the leaf with legal alternatives.

Internal URL scheme is now a bit cleaner, with everything properly defined
in URLutils.h. All references to http:, file: and ftp:, with or without
a following '//' use the definitions in here now.

More tidying and some reorganising of Hotlist source. Auto-open delay is
now a Choices item. Some dependencies on statics removed (e.g. the
counting functions don't accumulate into the global item_number now).
The redraw functions used Wimp_TextOp - oops, so this has been amended
to use whatever is supported on your Wimp. This is now in a new function
(utils_text_width()), which the History menu routines also use (there was
a bug in the width routine there anyway, which is therefore fixed in
passing). Several other routines used Wimp_TextOp directly too, and
they have been altered to use the new function as well.

In hotlist code, one of the larger changes is in the API to hotlist_draw_r()
(formerly _hotlist_draw()) which now takes item widths and heights as
parameters - discovering these is quite slow, so doing it every time the
function calls itself recursively is a little less efficient than
passing the values in from elsewhere. Note that underscore prefixed
functions are being slowly renamed to _r suffixed functions, to match
the convention established by Tony Cheal with is table routines. This
makes it much more obvious when something is recursive, as the same
naming convention is used in every browser source file.

Finally, note that I intend to ditch SaveDBox and use an alternate window
with manual control of the messaging in Protocols.c. This will allow
various improvements which at present the SaveDBox operational methods
preclude. I'm going to have to do at least an alternate Window object for
the SaveDBox module to use soon in any case. Getting rid of SaveDBox will
help reduce, if only slightly, demands on the RMA.
@
text
@d1053 3
a1055 2
  /* with unprintable chars shown in green as      */
  /* '[xx]', where xx is the character's ASCII     */
d1058 7
d1067 4
a1070 1
  /*             Size of the buffer.               */
d1073 1
a1073 1
  void trace_dump_buffer(void * buffer, int buffer_size)
d1078 18
a1095 1
    Printf("\nBuffer %p contents:\n\n", buffer);
d1101 15
a1115 2
      if (c < 32 || c == 127) Printf("\0212[%02x]\0217", (int) c);
      else Printf("%c", c);
d1117 3
@


1.4
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d1049 31
@


1.3
log
@Updated Makefile to work better in folding text editors. More or less rewrote
Limits.h, and ensured consistent comment styling throughout all sources.
Fetch.c/h split to Fetch, FetchHTML and URLveneer. URLstat.c/h produced to
cope with this. OpenURL and Find sources created from bits in the Windows
source file that shouldn't have been there... These will get filled out
shortly. Note that a few functions in Fetch are due to be renamed and moved;
probably to Tokenutils.
@
text
@d561 1
a561 1
              if (trace_dump_head(file, head, depth)) return 1;
@


1.2
log
@Customer work complete, and this version just shipped. Had to comment out
the code in Main.c that sets the user agent string to fake Netscape, as the
persistent problems with forms in tables showed up much more on a modem
link - net result was that the customer's log in page didn't work. Not
faking Netscape gives an authorisation dialogue instead, allowing access
to the site even if not by the most elegant of methods.
@
text
@d17 1
d24 1
d26 2
a27 1
/* History: 02-Jul-97: Created                     */
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d74 1
a74 1
  /* trace_dump_tokens_by_line                     */
d404 1
a404 1
  /* trace_dump_tokens_by_stream                   */
@
