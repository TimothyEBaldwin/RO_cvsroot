head	1.6;
access;
symbols
	Browse-2_16:1.6
	Browse-2_15:1.6
	Browse-2_14:1.6
	Browse-2_13:1.6
	Browse-2_12:1.6
	Browse-2_11:1.5
	Browse-2_10:1.5
	Browse-2_09:1.5
	ahodgkin_208_i4_2:1.5
	ahodgkin_208_i4:1.4
	ahodgkin_208_i3:1.4
	ahodgkin_208_i2:1.4
	ahodgkin_208_i1:1.4
	ahodgkin_207release:1.4
	ahodgkin_206release:1.4
	ahodgkin_205release:1.4
	ahodgkin_204release:1.4
	ahodgkin_202release:1.4
	ahodgkin_201release:1.4
	ahodgkin_200release:1.4
	ahodgkin_133beta:1.4
	ahodgkin_132beta:1.4
	ahodgkin_131beta:1.4
	ahodgkin_130beta:1.4
	ahodgkin_129:1.4
	ahodgkin_128beta:1.4
	ahodgkin_128alpha:1.4
	ahodgkin_127beta2:1.4
	ahodgkin_127beta:1.4
	ahodgkin_126beta:1.4
	ahodgkin_AW97patch:1.4
	ahodgkin_AW97:1.3;
locks; strict;
comment	@# @;


1.6
date	2006.03.13.22.06.19;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	2000.05.31.15.58.34;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.10.22.13.15.53;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.08.28.16.07.56;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.08.18.09.23.55;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.28.36;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.6
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    FromROSLib.c                                      */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: The original Customer browser sources used       */
/*          RISC_OSLib heavily and some of the functions used */
/*          are handy to have around. This source file        */
/*          contains a variety of functions from RISC_OSLib   */
/*          with modifications where necessary both to fit    */
/*          into the browser more naturally, and to function  */
/*          better under C release 5.                         */
/*                                                            */
/* Author:  Various for original RISC_OSLib source. This      */
/*          code adapted by A.D.Hodgkinson.                   */
/*                                                            */
/* History: 06-Dec-1996 (ADH): Created.                       */
/*          24-May-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#include <stdlib.h>
#include <stdarg.h>

#include <kernel.h>
#include <swis.h>

#include <wimp.h>

#include "FromROSLib.h"

/* Statics */

/* Array of length of sequence for vdu codes, */
/* used by the VDU call-based functions.      */

static char Qlen[32] =
{

  1,   /* VDU 0                          */
  2,   /* Next character to printer only */
  1,   /* Printer on                     */
  1,   /* Printer off                    */
  1,   /* Print at text cursor           */
  1,   /* Print at graphics cursor       */
  1,   /* Enable VDU driver              */
  1,   /* Beep                           */
  1,   /* Backspace                      */
  1,   /* Forward space (horizontal tab) */
  1,   /* Line feed                      */
  1,   /* Up a line                      */
  1,   /* Clear (text) screen            */
  1,   /* Carriage return                */
  1,   /* Page mode on                   */
  1,   /* Page mode off                  */
  1,   /* Clear graphics window          */
  2,   /* Define text colour             */
  3,   /* Define graphics colour         */
  6,   /* Define logical colour          */
  1,   /* Restore default palette        */
  1,   /* Disable VDU drivers            */
  2,   /* Select screen mode             */
  10,  /* VDU 23,..                      */
  9,   /* Set graphics window            */
  6,   /* PLOT ...                       */
  1,   /* Restore default windows        */
  1,   /* ESCAPE char - no effect        */
  5,   /* Define text window             */
  5,   /* Define graphics origin         */
  1,   /* Home cursor                    */
  3    /* Tab cursor                     */

};       /* ...and all the rest are 1. */

/* Cached eigen values */

static int wimpt_xeig = 2;
static int wimpt_yeig = 2;

/**************************************************************/
/* bbc_modevar()                                              */
/*                                                            */
/* Returns the value of a mode variable, or -1 if there was   */
/* some error.                                                */
/*                                                            */
/* Parameters: A mode number or -1 for current;               */
/*                                                            */
/*             A mode variable (for the SWI call              */
/*             OS_ReadModeVariable).                          */
/*                                                            */
/* Returns:    The value of the variable, or -1 if an error   */
/*             occurs.                                        */
/**************************************************************/

int bbc_modevar(int mode, int varno)
{
  int result;

  if (_swix(OS_ReadModeVariable,
            _INR(0,1) | _OUT (2),
            mode,
            varno,
            &result)) return -1;

  return result;
}

/**************************************************************/
/* bbc_vduvar()                                               */
/*                                                            */
/* Returns the value of a VDU variable, or -1 to flag an      */
/* error - therefore, if the variable may hold -1 as a valid  */
/* value, you need to use bbc_vduvars() instead.              */
/*                                                            */
/* Parameters: A VDU variable number for the SWI call         */
/*             OS_ReadVduVariables.                           */
/*                                                            */
/* Returns:    The value of the variable, or -1 if an error   */
/*             occurs.                                        */
/**************************************************************/

int bbc_vduvar(int varno)
{
   int vars[2];
   int result;

   vars[0] = varno;
   vars[1] = -1; /* terminator */

   return _swix(OS_ReadVduVariables,
                _INR(0,1),
                vars,
                &result)
                != NULL ? -1 : result; /* relies on -1 never being valid */
}

/**************************************************************/
/* bbc_vduvars()                                              */
/*                                                            */
/* Returns values of any number of VDU variables              */
/*                                                            */
/* Parameters: A pointer to a block holding a list of         */
/*             variable numbers, termianted by -1;            */
/*                                                            */
/*             A pointer to a block into which the            */
/*             corresponding variable values will be placed.  */
/*             This may be the same block as the one holding  */
/*             the variable numbers.                          */
/*                                                            */
/* Returns:    The block holding the variable numbers is      */
/*             updated with the variable values, assuming the */
/*             call doesn't return an error.                  */
/**************************************************************/

_kernel_oserror * bbc_vduvars(int * vars, int * values)
{
   return _swix(OS_ReadVduVariables,
                _INR(0,1),

                (int) vars,
                (int) values);
}

/**************************************************************/
/* bbc_vduq()                                                 */
/*                                                            */
/* Output multiple characters. Runs through an assembler      */
/* routine bbc_vdu for speed.                                 */
/*                                                            */
/* Parameters: A control character - the number of further    */
/*             characters to expect is defined in the static  */
/*             'Qlen', defined at the top of this file, and   */
/*             depends on the char given.                     */
/**************************************************************/

_kernel_oserror * bbc_vduq(int c,...)
{
   _kernel_oserror * e;
   va_list           ap;
   int               n;

   e = bbc_vdu(c); /* See FromROSLib.s */

   if ((c >= ' ') || e) return(e);

   va_start(ap, c);
   n = Qlen[c];

   while ((--n) && (!e)) e = bbc_vdu(va_arg(ap,int));

   va_end(ap);

   return(e);
}

/**************************************************************/
/* bbc_clg()                                                  */
/*                                                            */
/* Clears the current graphics window.                        */
/**************************************************************/

_kernel_oserror * bbc_clg(void)
{
  return (bbc_vdu(BBC_ClearGraph));
}

/**************************************************************/
/* bbc_gwindow()                                              */
/*                                                            */
/* Defines a graphics window.                                 */
/*                                                            */
/* Parameters: X coordinate of bottom left hand corner of     */
/*             graphics window in OS units, inclusive;        */
/*                                                            */
/*             Y coordinate for the same;                     */
/*                                                            */
/*             X coordinate of top right hand corner of       */
/*             graphics window in OS units, INCLUSIVE;        */
/*                                                            */
/*             Y coordinate for the same.                     */
/**************************************************************/

_kernel_oserror * bbc_gwindow(int xmin, int ymin, int xmax, int ymax)
{
  _kernel_oserror * e = bbc_vdu(BBC_DefGraphWindow);

  if (!e) e = bbc_vduw(xmin);
  if (!e) e = bbc_vduw(ymin);
  if (!e) e = bbc_vduw(xmax);
  if (!e) e = bbc_vduw(ymax);

  return e;
}

/**************************************************************/
/* bbc_origin()                                               */
/*                                                            */
/* Sets the graphics plotting origin.                         */
/*                                                            */
/* Parameters: X coordinate of origin, in OS units;           */
/*                                                            */
/*             Y coordinate for the same.                     */
/**************************************************************/

_kernel_oserror * bbc_origin(int x, int y)
{
   _kernel_oserror * e = bbc_vdu(BBC_DefGraphOrigin);

   if (!e) e = bbc_vduw(x);
   if (!e) e = bbc_vduw(y);

   return e;
}

/**************************************************************/
/* bbc_gcol()                                                 */
/*                                                            */
/* Sets a graphics colour and plotting action.                */
/*                                                            */
/* Graphics plotting actions:                                 */
/*                                                            */
/* P is pixel on screen.                                      */
/* N is new colour.                                           */
/*                                                            */
/* Action  Behaviour                                          */
/*                                                            */
/* 0       P = N                                              */
/* 1       P |= N (OR)                                        */
/* 2       P &= N (AND)                                       */
/* 3       P = P ^ N (XOR)                                    */
/* 4       P = !P (NOT)                                       */
/* 5       P = P (no change to screen colour)                 */
/* 6       P &= (!N) (AND NOT)                                */
/* 7       P |= (!N) (OR NOT)                                 */
/* 8 -15   As 0-7 but background is transparent               */
/* 16-31   Pattern 1, with action 0 - 15                      */
/* 32-47   Pattern 2, with action 0 - 15                      */
/* 48-63   Pattern 3, with action 0 - 15                      */
/* 64-79   Pattern 4, with action 0 - 15                      */
/* 80-95   Large pattern, with action 0 - 15                  */
/*                                                            */
/* Parameters: Plotting action (see above);                   */
/*                                                            */
/*             Graphics colour (0-127 for the foreground,     */
/*             else background is set to colour - 128). The   */
/*             colour used is ANDed with the maximum number   */
/*             of colours for the screen mode (1,3, 15 or 63  */
/*             for 2, 4, 16 or >=256 colour modes).           */
/**************************************************************/

_kernel_oserror * bbc_gcol(int a, int b)
{
   _kernel_oserror * e = bbc_vdu(BBC_DefGraphColour);

   if (!e) e = bbc_vdu(a);
   if (!e) e = bbc_vdu(b);

   return e;
}

/**************************************************************/
/* bbc_plot()                                                 */
/*                                                            */
/* Plot something on the screen with OS_Plot. See PRM volume  */
/* 1 page 607 for full details.                               */
/*                                                            */
/* Parameters: Plot number;                                   */
/*                                                            */
/*             X coordinate;                                  */
/*                                                            */
/*             Y coordinate.                                  */
/**************************************************************/

_kernel_oserror * bbc_plot(int n, int x, int y)
{
  return _swix(OS_Plot,
               _INR(0,2),
               n,
               x,
               y);
}

/**************************************************************/
/* bbc_move()                                                 */
/*                                                            */
/* Move the graphics cursor to absolute coords.               */
/*                                                            */
/* Parameters: X coordinate to move to, in OS units;          */
/*                                                            */
/*             Y coordinate for the same.                     */
/**************************************************************/

_kernel_oserror * bbc_move(int x, int y)
{
   return bbc_plot(BBC_MoveCursorAbs, x, y);
}

/**************************************************************/
/* bbc_moveby()                                               */
/*                                                            */
/* Move the graphics cursor to absolute coords.               */
/*                                                            */
/* Parameters: X offset to move by, in OS units;              */
/*                                                            */
/*             Y coordinate for the same.                     */
/**************************************************************/

_kernel_oserror * bbc_moveby(int x, int y)
{
   return bbc_plot(BBC_MoveCursorRel, x, y);
}

/**************************************************************/
/* bbc_draw()                                                 */
/*                                                            */
/* Draws a solid line including both end points to absolute   */
/* coordinates, starting the line at the current graphics     */
/* cursor position.                                           */
/*                                                            */
/* Parameters: X coordinate to draw to, in OS units;          */
/*                                                            */
/*             Y coordinate for the same.                     */
/**************************************************************/

_kernel_oserror * bbc_draw(int x, int y)
{
   return bbc_plot(BBC_SolidBoth + BBC_DrawAbsFore, x, y);
}

/**************************************************************/
/* bbc_drawby()                                               */
/*                                                            */
/* Draws a solid line including both end points to relative   */
/* coordinates, starting the line at the current graphics     */
/* cursor position.                                           */
/*                                                            */
/* Parameters: X offset to draw by, in OS units;              */
/*                                                            */
/*             Y coordinate for the same.                     */
/**************************************************************/

_kernel_oserror * bbc_drawby(int x, int y)
{
   return bbc_plot(BBC_SolidBoth + BBC_DrawRelFore, x, y);
}

/**************************************************************/
/* bbc_rectangle()                                            */
/*                                                            */
/* Plots a rectangle outline.                                 */
/*                                                            */
/* Parameters: X coordinate of bottom left hand corner, in OS */
/*             units;                                         */
/*                                                            */
/*             Y coordinate for the same;                     */
/*                                                            */
/*             Rectangle width minus one, in OS units - this  */
/*             is added to the X value to produce an          */
/*             *inclusive* top right hand corner coordinate,  */
/*             hence for an 8 OS unit wide rectangle, say,    */
/*             you'd pass in 7;                               */
/*                                                            */
/*             Similarly, the rectangle height minus 1.       */
/**************************************************************/

_kernel_oserror * bbc_rectangle(int x, int y, int w, int h)
{
   _kernel_oserror * e = bbc_move(x,y);

   if (!e) e = bbc_plot(BBC_SolidExFinal + BBC_DrawRelFore,  0,  h);
   if (!e) e = bbc_plot(BBC_SolidExFinal + BBC_DrawRelFore,  w,  0);
   if (!e) e = bbc_plot(BBC_SolidExFinal + BBC_DrawRelFore,  0, -h);
   if (!e) e = bbc_plot(BBC_SolidExFinal + BBC_DrawRelFore, -w,  0);

   return e;
}

/**************************************************************/
/* bbc_rectanglefill()                                        */
/*                                                            */
/* Plots a filled rectangle.                                  */
/*                                                            */
/* Parameters: As bbc_rectangle.                              */
/**************************************************************/

_kernel_oserror * bbc_rectanglefill(int x, int y, int w, int h)
{
   _kernel_oserror * e = bbc_move(x,y);

   if (!e) e = bbc_plot(BBC_RectangleFill + BBC_DrawRelFore, w, h);

   return e;
}

/**************************************************************/
/* bbc_circle()                                               */
/*                                                            */
/* Plots a circle outline.                                    */
/*                                                            */
/* Parameters: X coordinate of midpoint, in OS units;         */
/*                                                            */
/*             Y coordinate for the same;                     */
/*                                                            */
/*             Radius, in OS units.                           */
/**************************************************************/

_kernel_oserror * bbc_circle(int x, int y, int r)
{
   _kernel_oserror * e = bbc_move(x,y);

   if (!e) e = bbc_plot(BBC_Circle + BBC_DrawAbsFore, x + r, y);

   return e;
}

/**************************************************************/
/* bbc_circlefill()                                           */
/*                                                            */
/* Plots a filled circle.                                     */
/*                                                            */
/* Parameters: As bbc_circle.                                 */
/**************************************************************/

_kernel_oserror * bbc_circlefill(int x, int y, int r)
{
   _kernel_oserror * e = bbc_move(x,y);

   if (!e) e = bbc_plot(BBC_CircleFill + BBC_DrawAbsFore, x + r, y);

   return e;
}

/**************************************************************/
/* bbc_trianglefill()                                         */
/*                                                            */
/* Plots a filled triangle.                                   */
/*                                                            */
/* Parameters: X coordinate of one corner, in OS units;       */
/*                                                            */
/*             Y coordinate of one corner, in OS units;       */
/*                                                            */
/*             X coordinate of another corner, in OS units;   */
/*                                                            */
/*             Y coordinate of another corner, in OS units;   */
/*                                                            */
/*             X coordinate of the last corner, in OS units;  */
/*                                                            */
/*             Y coordinate of the last corner, in OS units.  */
/**************************************************************/

_kernel_oserror * bbc_trianglefill(int x1, int y1, int x2, int y2, int x3, int y3)
{
   _kernel_oserror * e = bbc_move(x1, y1);

   if (!e) e = bbc_move(x2, y2);
   if (!e) e = bbc_plot(BBC_TriangleFill + BBC_DrawAbsFore, x3, y3);

   return e;
}

/**************************************************************/
/* bbc_fill()                                                 */
/*                                                            */
/* Flood-fill an area from absolute                           */
/*                                                            */
/* Parameters: X coordinate to start fill at, in OS units;    */
/*                                                            */
/*             Y coordinate for the same.                     */
/**************************************************************/

_kernel_oserror * bbc_fill(int x, int y)
{
   return bbc_plot(BBC_FloodToBack + BBC_DrawAbsFore, x, y);
}

/**************************************************************/
/* wimpt_read()                                               */
/*                                                            */
/* Finds out the current X and Y eigen values (desktop        */
/* scaling). Screen resolution in dots per inch is thus 180 / */
/* eigen value.                                               */
/*                                                            */
/* This function is typically called on receipt of a          */
/* ModeChange message.                                        */
/**************************************************************/

void wimpt_read(void)
{
  wimpt_xeig = 1 << bbc_vduvar(BBC_XEigFactor);
  wimpt_yeig = 1 << bbc_vduvar(BBC_YEigFactor);
}

/**************************************************************/
/* wimpt_dx()                                                 */
/*                                                            */
/* Returns the current X eigen value (Desktop scaling).       */
/* Screen X resolution in dots per inch is thus 180/XEig.     */
/**************************************************************/

int wimpt_dx(void)
{
  return wimpt_xeig;
}

/**************************************************************/
/* wimpt_dy()                                                 */
/*                                                            */
/* Returns the current Y eigen value (Desktop scaling).       */
/* Screen Y resolution in dots per inch is thus 180/YEig.     */
/**************************************************************/

int wimpt_dy(void)
{
  return wimpt_yeig;
}

/**************************************************************/
/* coords_x_toscreen()                                        */
/*                                                            */
/* Converts a work area X coordinate (0,0 is at the top left  */
/* of the window) to a screen coordinate (0,0 is at the       */
/* bottom left of the screen).                                */
/*                                                            */
/* Parameters: The work area X coordinate;                    */
/*                                                            */
/*             Pointer to WimpRedrawWindowBlock holding       */
/*             details about the window that the X coordinate */
/*             lies in.                                       */
/*                                                            */
/* Returns:    The given value converted to a screen          */
/*             coordinate.                                    */
/**************************************************************/

int coords_x_toscreen(int x, const WimpRedrawWindowBlock * restrict r)
{
  return (x - r->xscroll + r->visible_area.xmin);
}

/**************************************************************/
/* coords_y_toscreen()                                        */
/*                                                            */
/* Converts a work area Y coordinate to a screen coordinate.  */
/*                                                            */
/* Parameters: The work area Y coordinate;                    */
/*                                                            */
/*             Pointer to WimpRedrawWindowBlock holding       */
/*             details about the window that the Y coordinate */
/*             lies in.                                       */
/*                                                            */
/* Returns:    The given value converted to a screen          */
/*             coordinate.                                    */
/**************************************************************/

int coords_y_toscreen(int y, const WimpRedrawWindowBlock * restrict r)
{
  return (y - r->yscroll + r->visible_area.ymax);
}

/**************************************************************/
/* coords_box_toscreen()                                      */
/*                                                            */
/* Converts the contents of a BBox representing a rectangle   */
/* in the work area of a window to screen coordinates.        */
/*                                                            */
/* Parameters: Pointer to the BBox;                           */
/*                                                            */
/*             Pointer to WimpRedrawWindowBlock holding       */
/*             details about the window that the BBox         */
/*             retangle lies in.                              */
/*                                                            */
/* Returns:    The contents of the BBox are updated to hold   */
/*             screen coordinates.                            */
/**************************************************************/

void coords_box_toscreen(BBox * restrict b, const WimpRedrawWindowBlock * restrict r)
{
  b->xmax = coords_x_toscreen(b->xmax, r);
  b->xmin = coords_x_toscreen(b->xmin, r);
  b->ymin = coords_y_toscreen(b->ymin, r);
  b->ymax = coords_y_toscreen(b->ymax, r);
}

/**************************************************************/
/* coords_x_toworkarea()                                      */
/*                                                            */
/* Converts a screen X coordinate (0,0 is at the bottom left  */
/* of the screen) to a work area coordinate (0,0 is at the    */
/* top left of the window).                                   */
/*                                                            */
/* Parameters: The screen X coordinate;                       */
/*                                                            */
/*             Pointer to WimpRedrawWindowBlock holding       */
/*             details about the window that the coordinate   */
/*             is to be transformed to lie in.                */
/*                                                            */
/* Returns:    The given value converted to a work area       */
/*             coordinate.                                    */
/**************************************************************/

int coords_x_toworkarea(int x, const WimpRedrawWindowBlock * restrict r)
{
  return (x + r->xscroll - r->visible_area.xmin);
}

/**************************************************************/
/* coords_y_toworkarea()                                      */
/*                                                            */
/* Converts a screen Y coordinate to a work area coordinate.  */
/*                                                            */
/* Parameters: The screen Y coordinate;                       */
/*                                                            */
/*             Pointer to WimpRedrawWindowBlock holding       */
/*             details about the window that the coordinate   */
/*             is to be transformed to lie in.                */
/*                                                            */
/* Returns:    The given value converted to a work area       */
/*             coordinate.                                    */
/**************************************************************/

int coords_y_toworkarea(int y, const WimpRedrawWindowBlock * restrict r)
{
  return (y + r->yscroll - r->visible_area.ymax);
}

/**************************************************************/
/* coords_box_toworkarea()                                    */
/*                                                            */
/* Converts the contents of a BBox representing a rectangle   */
/* in screen coords to hold work area coordinates.            */
/*                                                            */
/* Parameters: Pointer to the BBox;                           */
/*                                                            */
/*             Pointer to WimpRedrawWindowBlock holding       */
/*             details about the window that the BBox         */
/*             coordinates are to be transformed to lie in.   */
/*                                                            */
/* Returns:    The contents of the BBox are updated to hold   */
/*             work area coordinates.                         */
/**************************************************************/

void coords_box_toworkarea(BBox * restrict b, const WimpRedrawWindowBlock * restrict r)
{
  b->xmax = coords_x_toworkarea(b->xmax, r);
  b->xmin = coords_x_toworkarea(b->xmin, r);
  b->ymin = coords_y_toworkarea(b->ymin, r);
  b->ymax = coords_y_toworkarea(b->ymax, r);
}
@


1.5
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d231 1
a231 1
/*             graphics window in OS units, exclusive;        */
d412 1
a412 1
/*             *exclusive* top right hand corner coordinate,  */
d416 1
a416 1
/*             Similarly, the rectangle height.               */
d587 1
a587 1
int coords_x_toscreen(int x, WimpRedrawWindowBlock * r)
d607 1
a607 1
int coords_y_toscreen(int y, WimpRedrawWindowBlock * r)
d628 1
a628 1
void coords_box_toscreen(BBox * b, WimpRedrawWindowBlock * r)
d653 1
a653 1
int coords_x_toworkarea(int x, WimpRedrawWindowBlock * r)
d673 1
a673 1
int coords_y_toworkarea(int y, WimpRedrawWindowBlock * r)
d694 1
a694 1
void coords_box_toworkarea(BBox * b, WimpRedrawWindowBlock * r)
@


1.4
log
@fetch_get_raw_data will notice if up->fetching is zero and return a
'finished' status rather than trying to continue reading data for the
fetch. Fetches should never fall through that far but at least it
will cope if they do.

3D table borders are now supported. 2D borders are used if the
inter-cell spacing is too small to fit the borders in (display resolution
dependent) - the external table border is 2D if the internal borders are,
else 3D. For cellspacing of 0, internal table borders must plot over the
outer edge of pixels inside the cell; for all greater spacings, the
borders take up all or part of the gap between them. The external border
will always fit around the outside of the cells, including the
cellspacing value in the gap between the outer cells and the border.

Anti-alias colour for placeholder ALT text was incorrect. Fixed.

I'd changed 'point' to 'points' in some of the Font Choices dialogues;
now changed back to 'point'.

The routine to find out how large an otherwise unsized object or image
placeholder based on its ALT text has been centralised in Reformat.c,
so that the image and object routines can both access it without
code duplication (this means non-image objects will now have the correct
size if they contain ALT text, rather than assuming a standard default
size as before). ALT text in images that were also objects was never
plotted either, though the placeholder size would have been correct.
This has been fixed.
@
text
@d15 19
a33 18
/***************************************************/
/* File   : FromROSLib.c                           */
/*                                                 */
/* Purpose: The original Customer browser sources */
/*          used RISC_OSLib heavily and some of    */
/*          the functions used are handy to have   */
/*          around. This source file contains      */
/*          a variety of functions from RISC_OSLib */
/*          with modifications where necessary     */
/*          both to fit into the browser more      */
/*          naturally, and to function better      */
/*          under C release 5.                     */
/*                                                 */
/* Authors: Various for original RISC_OSLib source */
/*          This source adapted by A.D.Hodgkinson  */
/*                                                 */
/* History: 06-Dec-96: Created.                    */
/***************************************************/
d38 2
a39 1
#include "swis.h"
d41 1
a41 1
#include "wimp.h"
d93 14
a106 14
/*************************************************/
/* bbc_modevar()                                 */
/*                                               */
/* Returns the value of a mode variable, or -1   */
/* if there was some error.                      */
/*                                               */
/* Parameters: A mode number or -1 for current;  */
/*                                               */
/*             A mode variable (for the SWI call */
/*             OS_ReadModeVariable).             */
/*                                               */
/* Returns:    The value of the variable, or -1  */
/*             if an error occurs.               */
/*************************************************/
d121 13
a133 14
/*************************************************/
/* bbc_vduvar()                                  */
/*                                               */
/* Returns the value of a VDU variable, or -1 to */
/* flag an error - therefore, if the variable    */
/* may hold -1 as a valid value, you need to use */
/* bbc_vduvars() instead.                        */
/*                                               */
/* Parameters: A VDU variable number for the     */
/*             SWI call OS_ReadVduVariables.     */
/*                                               */
/* Returns:    The value of the variable, or -1  */
/*             if an error occurs.               */
/*************************************************/
d150 17
a166 20
/*************************************************/
/* bbc_vduvars()                                 */
/*                                               */
/* Returns values of any number of VDU variables */
/*                                               */
/* Parameters: A pointer to a block holding a    */
/*             list of variable numbers,         */
/*             termianted by -1;                 */
/*                                               */
/*             A pointer to a block into which   */
/*             the corresponding variable values */
/*             will be placed. This may be the   */
/*             same block as the one holding the */
/*             variable numbers.                 */
/*                                               */
/* Returns:    The block holding the variable    */
/*             numbers is updated with the       */
/*             variable values, assuming the     */
/*             call doesn't return an error.     */
/*************************************************/
d177 11
a187 12
/*************************************************/
/* bbc_vduq()                                    */
/*                                               */
/* Output multiple characters. Runs through an   */
/* assembler routine bbc_vdu for speed.          */
/*                                               */
/* Parameters: A control character - the number  */
/*             of further characters to expect   */
/*             is defined in the static 'Qlen',  */
/*             defined at the top of this file,  */
/*             and depends on the char given.    */
/*************************************************/
d209 5
a213 5
/*************************************************/
/* bbc_clg()                                     */
/*                                               */
/* Clears the current graphics window.           */
/*************************************************/
d220 15
a234 17
/*************************************************/
/* bbc_gwindow()                                 */
/*                                               */
/* Defines a graphics window.                    */
/*                                               */
/* Parameters: X coordinate of bottom left hand  */
/*             corner of graphics window in OS   */
/*             units, inclusive;                 */
/*                                               */
/*             Y coordinate for the same;        */
/*                                               */
/*             X coordinate of top right hand    */
/*             corner of graphics window in OS   */
/*             units, exclusive;                 */
/*                                               */
/*             Y coordinate for the same.        */
/*************************************************/
d248 9
a256 10
/*************************************************/
/* bbc_origin()                                  */
/*                                               */
/* Sets the graphics plotting origin.            */
/*                                               */
/* Parameters: X coordinate of origin, in OS     */
/*             units;                            */
/*                                               */
/*             Y coordinate for the same.        */
/*************************************************/
d268 35
a302 37
/*************************************************/
/* bbc_gcol()                                    */
/*                                               */
/* Sets a graphics colour and plotting action.   */
/*                                               */
/* Graphics plotting actions:                    */
/*                                               */
/* P is pixel on screen.                         */
/* N is new colour.                              */
/*                                               */
/* Action  Behaviour                             */
/*                                               */
/* 0       P = N                                 */
/* 1       P |= N (OR)                           */
/* 2       P &= N (AND)                          */
/* 3       P = P ^ N (XOR)                       */
/* 4       P = !P (NOT)                          */
/* 5       P = P (no change to screen colour)    */
/* 6       P &= (!N) (AND NOT)                   */
/* 7       P |= (!N) (OR NOT)                    */
/* 8 -15   As 0-7 but background is transparent  */
/* 16-31   Pattern 1, with action 0 - 15         */
/* 32-47   Pattern 2, with action 0 - 15         */
/* 48-63   Pattern 3, with action 0 - 15         */
/* 64-79   Pattern 4, with action 0 - 15         */
/* 80-95   Large pattern, with action 0 - 15     */
/*                                               */
/* Parameters: Plotting action (see above);      */
/*                                               */
/*             Graphics colour (0-127 for the    */
/*             foreground, else background is    */
/*             set to colour - 128). The colour  */
/*             used is ANDed with the maximum    */
/*             number of colours for the screen  */
/*             mode (1,3, 15 or 63 for 2, 4, 16  */
/*             or >=256 colour modes).           */
/*************************************************/
d314 12
a325 12
/*************************************************/
/* bbc_plot()                                    */
/*                                               */
/* Plot something on the screen with OS_Plot.    */
/* See PRM volume 1 page 607 for full details.   */
/*                                               */
/* Parameters: Plot number;                      */
/*                                               */
/*             X coordinate;                     */
/*                                               */
/*             Y coordinate.                     */
/*************************************************/
d336 9
a344 10
/*************************************************/
/* bbc_move()                                    */
/*                                               */
/* Move the graphics cursor to absolute coords.  */
/*                                               */
/* Parameters: X coordinate to move to, in OS    */
/*             units;                            */
/*                                               */
/*             Y coordinate for the same.        */
/*************************************************/
d351 9
a359 9
/*************************************************/
/* bbc_moveby()                                  */
/*                                               */
/* Move the graphics cursor to absolute coords.  */
/*                                               */
/* Parameters: X offset to move by, in OS units; */
/*                                               */
/*             Y coordinate for the same.        */
/*************************************************/
d366 11
a376 12
/*************************************************/
/* bbc_draw()                                    */
/*                                               */
/* Draws a solid line including both end points  */
/* to absolute coordinates, starting the line at */
/* the current graphics cursor position.         */
/*                                               */
/* Parameters: X coordinate to draw to, in OS    */
/*             units;                            */
/*                                               */
/*             Y coordinate for the same.        */
/*************************************************/
d383 11
a393 11
/*************************************************/
/* bbc_drawby()                                  */
/*                                               */
/* Draws a solid line including both end points  */
/* to relative coordinates, starting the line at */
/* the current graphics cursor position.         */
/*                                               */
/* Parameters: X offset to draw by, in OS units; */
/*                                               */
/*             Y coordinate for the same.        */
/*************************************************/
d400 18
a417 19
/*************************************************/
/* bbc_rectangle()                               */
/*                                               */
/* Plots a rectangle outline.                    */
/*                                               */
/* Parameters: X coordinate of bottom left hand  */
/*             corner, in OS units;              */
/*                                               */
/*             Y coordinate for the same;        */
/*                                               */
/*             Rectangle width plus one, in OS   */
/*             units - this is added to the X    */
/*             value to produce an *exclusive*   */
/*             top right hand corner coordinate, */
/*             hence for an 8 OS unit wide       */
/*             rectangle, say, you'd pass in 7;  */
/*                                               */
/*             Similarly, the rectangle height.  */
/*************************************************/
d431 7
a437 7
/*************************************************/
/* bbc_rectanglefill()                           */
/*                                               */
/* Plots a filled rectangle.                     */
/*                                               */
/* Parameters: As bbc_rectangle.                 */
/*************************************************/
d448 11
a458 12
/*************************************************/
/* bbc_circle()                                  */
/*                                               */
/* Plots a circle outline.                       */
/*                                               */
/* Parameters: X coordinate of midpoint, in OS   */
/*             units;                            */
/*                                               */
/*             Y coordinate for the same;        */
/*                                               */
/*             Radius, in OS units.              */
/*************************************************/
d469 7
a475 7
/*************************************************/
/* bbc_circlefill()                              */
/*                                               */
/* Plots a filled circle.                        */
/*                                               */
/* Parameters: As bbc_circle.                    */
/*************************************************/
d486 17
a502 23
/*************************************************/
/* bbc_trianglefill()                            */
/*                                               */
/* Plots a filled triangle.                      */
/*                                               */
/* Parameters: X coordinate of one corner, in    */
/*             OS units;                         */
/*                                               */
/*             Y coordinate of one corner, in    */
/*             OS units;                         */
/*                                               */
/*             X coordinate of another corner,   */
/*             in OS units;                      */
/*                                               */
/*             Y coordinate of another corner,   */
/*             in OS units;                      */
/*                                               */
/*             X coordinate of the last corner,  */
/*             in OS units;                      */
/*                                               */
/*             Y coordinate of the last corner,  */
/*             in OS units.                      */
/*************************************************/
d514 9
a522 10
/*************************************************/
/* bbc_fill()                                    */
/*                                               */
/* Flood-fill an area from absolute              */
/*                                               */
/* Parameters: X coordinate to start fill at, in */
/*             OS units;                         */
/*                                               */
/*             Y coordinate for the same.        */
/*************************************************/
d529 10
a538 10
/*************************************************/
/* wimpt_read()                                  */
/*                                               */
/* Finds out the current X and Y eigen values    */
/* (desktop scaling). Screen resolution in dots  */
/* per inch is thus 180 / eigen value.           */
/*                                               */
/* This function is typically called on receipt  */
/* of a ModeChange message.                      */
/*************************************************/
d546 6
a551 7
/*************************************************/
/* wimpt_dx()                                    */
/*                                               */
/* Returns the current X eigen value (Desktop    */
/* scaling). Screen X resolution in dots per     */
/* inch is thus 180/XEig.                        */
/*************************************************/
d558 6
a563 7
/*************************************************/
/* wimpt_dy()                                    */
/*                                               */
/* Returns the current Y eigen value (Desktop    */
/* scaling). Screen Y resolution in dots per     */
/* inch is thus 180/YEig.                        */
/*************************************************/
d570 16
a585 17
/*************************************************/
/* coords_x_toscreen()                           */
/*                                               */
/* Converts a work area X coordinate (0,0 is at  */
/* the top left of the window) to a screen       */
/* coordinate (0,0 is at the bottom left of the  */
/* screen).                                      */
/*                                               */
/* Parameters: The work area X coordinate;       */
/*                                               */
/*             Pointer to WimpRedrawWindowBlock  */
/*             holding details about the window  */
/*             that the X coordinate lies in.    */
/*                                               */
/* Returns:    The given value converted to a    */
/*             screen coordinate.                */
/*************************************************/
d592 14
a605 15
/*************************************************/
/* coords_y_toscreen()                           */
/*                                               */
/* Converts a work area Y coordinate to a screen */
/* coordinate.                                   */
/*                                               */
/* Parameters: The work area Y coordinate;       */
/*                                               */
/*             Pointer to WimpRedrawWindowBlock  */
/*             holding details about the window  */
/*             that the Y coordinate lies in.    */
/*                                               */
/* Returns:    The given value converted to a    */
/*             screen coordinate.                */
/*************************************************/
d612 15
a626 17
/*************************************************/
/* coords_box_toscreen()                         */
/*                                               */
/* Converts the contents of a BBox representing  */
/* a rectangle in the work area of a window to   */
/* screen coordinates.                           */
/*                                               */
/* Parameters: Pointer to the BBox;              */
/*                                               */
/*             Pointer to WimpRedrawWindowBlock  */
/*             holding details about the window  */
/*             that the BBox retangle lies in.   */
/*                                               */
/* Returns:    The contents of the BBox are      */
/*             updated to hold screen            */
/*             coordinates.                      */
/*************************************************/
d636 16
a651 18
/*************************************************/
/* coords_x_toworkarea()                         */
/*                                               */
/* Converts a screen X coordinate (0,0 is at the */
/* bottom left of the screen) to a work area     */
/* coordinate (0,0 is at the top left of the     */
/* window).                                      */
/*                                               */
/* Parameters: The screen X coordiante;          */
/*                                               */
/*             Pointer to WimpRedrawWindowBlock  */
/*             holding details about the window  */
/*             that the coordinate is to be      */
/*             transformed to lie in.            */
/*                                               */
/* Returns:    The given value converted to      */
/*             a work area coordinate.           */
/*************************************************/
d658 14
a671 16
/*************************************************/
/* coords_y_toworkarea()                         */
/*                                               */
/* Converts a screen Y coordinate to a work area */
/* coordinate.                                   */
/*                                               */
/* Parameters: The screen Y coordiante;          */
/*                                               */
/*             Pointer to WimpRedrawWindowBlock  */
/*             holding details about the window  */
/*             that the coordinate is to be      */
/*             transformed to lie in.            */
/*                                               */
/* Returns:    The given value converted to      */
/*             a work area coordinate.           */
/*************************************************/
d678 15
a692 18
/*************************************************/
/* coords_box_toworkarea()                       */
/*                                               */
/* Converts the contents of a BBox representing  */
/* a rectangle in screen coords to hold work     */
/* area coordinates.                             */
/*                                               */
/* Parameters: Pointer to the BBox;              */
/*                                               */
/*             Pointer to WimpRedrawWindowBlock  */
/*             holding details about the window  */
/*             that the BBox coordinates are to  */
/*             be transformed to lie in.         */
/*                                               */
/* Returns:    The contents of the BBox are      */
/*             updated to hold work area         */
/*             coordinates.                      */
/*************************************************/
@


1.3
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d499 34
@


1.2
log
@Updated Makefile to work better in folding text editors. More or less rewrote
Limits.h, and ensured consistent comment styling throughout all sources.
Fetch.c/h split to Fetch, FetchHTML and URLveneer. URLstat.c/h produced to
cope with this. OpenURL and Find sources created from bits in the Windows
source file that shouldn't have been there... These will get filled out
shortly. Note that a few functions in Fetch are due to be renamed and moved;
probably to Tokenutils.
@
text
@d138 1
d174 1
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d17 1
d27 1
d30 2
a31 1
/* History: 06-Dec-96: Created                     */
d97 7
a103 5
/* Parameters: a mode number or -1 for 'current' */
/*             a mode variable (for the SWI call */
/*             OS_ReadModeVariable)              */
/* Returns: Value of the variable or -1 to flag  */
/*          some error condition in the call     */
d127 5
a131 4
/* Parameters: A VDU variable number (for the    */
/*             SWI call OS_ReadVduVariables)     */
/* Returns: Value of the variable, or -1 to flag */
/*          some error condition in the call     */
d155 2
a156 1
/*             termianted by -1                  */
d162 5
a166 5
/* Returns: A pointer to a _kernel_oserror       */
/*          structure if there was an error, or  */
/*          NULL. The variable values are put    */
/*          into the block passed as a parameter */
/*          (see above).                         */
d183 5
a187 5
/* Parameters: c is a control character; the     */
/*             number of further characters to   */
/*             expect is defined in the static   */
/*             Qlen defined at the top of this   */
/*             file, and depends on c.           */
d226 11
a236 3
/* Parameters: xmin, ymin, xmax and ymax coords, */
/*             in OS units. x/ymin are inclusive */
/*             whilst x/ymax are exclusive.      */
d256 4
a259 2
/* Parameters: X and Y coordinates of origin, in */
/*             OS units.                         */
a276 9
/* Parameters: Plotting action (see below)       */
/*             Graphics colour (0-127 for the    */
/*             foreground, else background is    */
/*             set to colour - 128). The colour  */
/*             used is ANDed with the maximum    */
/*             number of colours for the screen  */
/*             mode (1,3, 15 or 63 for 2, 4, 16  */
/*             or >=256 colour modes).           */
/*                                               */
d298 10
d323 4
a326 1
/* Plot something on the screen.                 */
d328 3
a330 5
/* Parameters: Plot number, X and Y. For more    */
/*             details see PRMs vol 1 p607, but  */
/*             also check any revisions brought  */
/*             about in later OS versions than   */
/*             RISC OS 3.1.                      */
d347 4
a350 2
/* Parameters: X and Y coords to move cursor to, */
/*             in OS units.                      */
d363 3
a365 3
/* Parameters: X and Y offsets to move cursor to */
/*             from its current position, in OS  */
/*             units.                            */
d380 4
a383 2
/* Parameters: X and Y coords to draw to, in OS  */
/*             units.                            */
d398 3
a400 2
/* Parameters: X and Y offsets from the graphics */
/*             cursor, in OS units.              */
d413 13
a425 2
/* Parameters: Left X, bottom Y, width, height   */
/*             (absolute coords in OS units)     */
d445 1
a445 2
/* Parameters: Left X, bottom Y, width, height   */
/*             (absolute coords in OS units)     */
d462 6
a467 2
/* Parameters: Left X, bottom Y, radius (absolu- */
/*             te coords in OS units)            */
d484 1
a484 2
/* Parameters: Left X, bottom Y, radius (absolu- */
/*             te coords in OS units)            */
d501 4
a504 2
/* Parameters: X and Y coords to start fill at   */
/*             (absolute coords in OS units)     */
d558 6
a563 2
/* Converts a work area x coordinate to a screen */
/* coordinate.                                   */
a564 1
/* Parameters: The x work area coordinate        */
d567 4
a570 2
/*             that the x coordinate lies in     */
/* Returns: The x coord as a screen coordinate.  */
d581 1
a581 1
/* Converts a work area y coordinate to a screen */
d584 2
a585 1
/* Parameters: The y work area coordinate        */
d588 4
a591 2
/*             that the y coordinate lies in     */
/* Returns: The y coord as a screen coordinate.  */
d606 2
a607 1
/* Parameters: Pointer to the BBox               */
d611 4
a614 1
/* Returns: The contents of the BBox are updated */
d628 6
a633 2
/* Converts a screen x coordinate to a work area */
/* coordinate.                                   */
a634 1
/* Parameters: The x screen coordinate           */
d639 3
a641 1
/* Returns: x as a work area coordinate.         */
d652 1
a652 1
/* Converts a screen y coordinate to a work area */
d655 2
a656 1
/* Parameters: The y screen coordinate           */
d661 3
a663 1
/* Returns: y as a work area coordinate.         */
d678 2
a679 1
/* Parameters: Pointer to the BBox               */
d684 4
a687 1
/* Returns: The contents of the BBox are updated */
a696 2

/*************************************************/
@
