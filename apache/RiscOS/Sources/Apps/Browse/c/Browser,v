head	1.31;
access;
symbols
	Browse-2_16:1.31
	Browse-2_15:1.31
	Browse-2_14:1.31
	Browse-2_13:1.31
	Browse-2_12:1.31
	Browse-2_11:1.30
	Browse-2_10:1.30
	Browse-2_09:1.30
	ahodgkin_208_i4_2:1.29
	ahodgkin_208_i4:1.27
	ahodgkin_208_i3:1.27
	ahodgkin_208_i2:1.27
	ahodgkin_208_i1:1.27
	ahodgkin_207release:1.27
	ahodgkin_206release:1.25
	ahodgkin_205release:1.24
	ahodgkin_204release:1.24
	ahodgkin_202release:1.22
	ahodgkin_201release:1.22
	ahodgkin_200release:1.21
	ahodgkin_133beta:1.21
	ahodgkin_132beta:1.21
	ahodgkin_131beta:1.20
	ahodgkin_130beta:1.19
	ahodgkin_129:1.19
	ahodgkin_128beta:1.18
	ahodgkin_128alpha:1.18
	ahodgkin_127beta2:1.17
	ahodgkin_127beta:1.17
	ahodgkin_126beta:1.15
	ahodgkin_AW97patch:1.14
	ahodgkin_AW97:1.14;
locks; strict;
comment	@# @;


1.31
date	2006.03.13.22.06.19;	author ahodgkin;	state Exp;
branches;
next	1.30;

1.30
date	2005.04.26.09.42.34;	author ahodgkin;	state Exp;
branches;
next	1.29;

1.29
date	2000.11.14.08.45.05;	author ahodgkin;	state Exp;
branches;
next	1.28;

1.28
date	2000.05.31.15.58.27;	author ahodgkin;	state Exp;
branches;
next	1.27;

1.27
date	98.10.13.16.33.58;	author ahodgkin;	state Exp;
branches;
next	1.26;

1.26
date	98.09.07.11.46.38;	author ahodgkin;	state Exp;
branches;
next	1.25;

1.25
date	98.07.09.10.27.01;	author ahodgkin;	state Exp;
branches;
next	1.24;

1.24
date	98.04.16.08.14.04;	author ahodgkin;	state Exp;
branches;
next	1.23;

1.23
date	98.03.26.14.20.58;	author ahodgkin;	state Exp;
branches;
next	1.22;

1.22
date	98.02.23.12.06.11;	author ahodgkin;	state Exp;
branches;
next	1.21;

1.21
date	98.02.06.13.51.07;	author ahodgkin;	state Exp;
branches;
next	1.20;

1.20
date	98.01.31.10.55.10;	author ahodgkin;	state Exp;
branches;
next	1.19;

1.19
date	97.12.12.11.17.41;	author ahodgkin;	state Exp;
branches;
next	1.18;

1.18
date	97.11.26.17.10.48;	author ahodgkin;	state Exp;
branches;
next	1.17;

1.17
date	97.11.20.16.04.25;	author ahodgkin;	state Exp;
branches;
next	1.16;

1.16
date	97.11.19.10.28.44;	author ahodgkin;	state Exp;
branches;
next	1.15;

1.15
date	97.10.30.17.10.57;	author ahodgkin;	state Exp;
branches;
next	1.14;

1.14
date	97.10.07.17.03.41;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	97.10.06.15.18.20;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	97.09.22.07.43.07;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	97.09.18.08.58.55;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	97.09.12.17.19.16;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	97.08.28.16.07.49;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.08.18.16.15.34;	author kbracey;	state Exp;
branches;
next	1.7;

1.7
date	97.08.18.09.23.49;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.08.12.09.26.31;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.08.08.16.38.45;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.08.05.08.42.52;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.08.01.09.00.44;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	97.07.31.14.50.09;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.28.21;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.31
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Browser.c                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Browser window services.                          */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 15-Mar-1997 (ADH): Created from Windows.h.        */
/*          25-May-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#include <stdlib.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>
#include <tboxlibs/flex.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <tboxlibs/event.h>

#include <tboxlibs/toolbox.h>
#include <tboxlibs/window.h>

#include "NestWimp.h"

#include "Global.h"
#include "FromROSLib.h"
#include "MiscDefs.h"
#include "Utils.h"

#include "CSIM.h"
#include "Fetch.h" /* (Which itself includes URLstat.h) */
#include "Frames.h"
#include "Forms.h"
#include "History.h"
#include "Hotlist.h"
#include "Images.h"
#include "Mouse.h"
#include "PrintStyle.h"
#include "Redraw.h"
#include "Reformat.h"
#include "Scale.h"
#include "TokenUtils.h"
#include "Toolbars.h"

#include "Browser.h"

/* Static function prototypes */

static HStream         * browser_find_selectable_top_r (browser_data * b, reformat_cell * cell, HStream ** current, int y_origin, WimpGetWindowStateBlock * s);
static HStream         * browser_find_selectable_bot_r (browser_data * b, reformat_cell * cell, HStream ** current, int y_origin, WimpGetWindowStateBlock * s);
static int               browser_navigate_map          (browser_data * b, int key);

static _kernel_oserror * browser_redraw_border         (browser_data * b, HStream * token);
static HStream         * browser_get_pointer_token_r   (browser_data * b, reformat_cell * cell, WimpGetPointerInfoBlock * p, WimpGetWindowStateBlock * state, int * ox, int * oy);
static int               browser_top_line_r            (browser_data * b, reformat_cell * cell, reformat_cell ** ret_cell, int * offset_y, int y, int fully_visible);
static _kernel_oserror * browser_update_token_r
                         (
                           browser_data        * restrict b,
                           const reformat_cell *          cell,
                           const HStream       * restrict token,
                           int                            first,
                           int                            chunk,
                           int                            last,
                           int                            base_x,
                           int                            base_y,
                           int                            noback,
                           const HStream       * restrict nocontent
                         );

static _kernel_oserror * browser_set_look_r            (browser_data * b, ObjectId source, int underline_links, int use_source_cols, int show_foreground, int show_background);

/* Local statics */

static ObjectId pointer_is_over = 0; /* Object that the pointer is over, if any */

/**************************************************************/
/* browser_scroll_page_v()                                    */
/*                                                            */
/* Scrolls a page vertically by a given amount.               */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the page;                                      */
/*                                                            */
/*             A WimpOpenWindowBlock pointer, holding the     */
/*             window's current details (e.g. visible area)   */
/*             or NULL if this is not known;                  */
/*                                                            */
/*             1 to scroll up, else down;                     */
/*                                                            */
/*             1 to page up/down, else 0;                     */
/*                                                            */
/*             1 to move one line, else 0;                    */
/*                                                            */
/*             An amount to scroll by, ignored unless the     */
/*             above two parameters are zero;                 */
/*                                                            */
/*             Pointer to an int, in which 1 is written if    */
/*             the window didn't shift scroll position as it  */
/*             was at the limit of its work area, else 0 is   */
/*             written.                                       */
/**************************************************************/

_kernel_oserror * browser_scroll_page_v(browser_data * b, WimpOpenWindowBlock * o, int dir, int page, int line, int amount, int * limit)
{
  int                       scrollby;
  WimpGetWindowStateBlock   open;
  _kernel_oserror         * e;

  /* Work out the WimpOpenWindowBlock if NULL was passed in */

  if (!o)
  {
    open.window_handle = b->window_handle;

    e = wimp_get_window_state(&open);
    if (e) return e;

    o = (WimpOpenWindowBlock *) &open;
  }

  if (limit)
  {
    /* If required, see if we're at the limit of the scroll position */

    BBox extent;
    int  scrollmax;

    e = window_get_extent(0, b->self_id, &extent);
    if (e) return e;

    scrollmax = !dir ? extent.ymin + (o->visible_area.ymax - o->visible_area.ymin) : 0;

    if (scrollmax == o->yscroll) *limit = 1;
    else                         *limit = 0;
  }

  /* Work out how much to scroll by */

  if      (page) scrollby = o->visible_area.ymax - o->visible_area.ymin - toolbars_url_height(b) - toolbars_button_height(b) - toolbars_status_height(b) - wimpt_dy();
  else if (line) scrollby = 42;
  else           scrollby = amount;

  /* If greater than zero, move the page */

  if (scrollby > 0)
  {
    if (!dir) scrollby = -scrollby;

    o->yscroll += scrollby;

    return wimp_open_window(o);
  }

  return NULL;
}

/**************************************************************/
/* browser_scroll_page_h()                                    */
/*                                                            */
/* Scrolls a page horizontally a given amount.                */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the page;                                      */
/*                                                            */
/*             A WimpOpenWindowBlock pointer, holding the     */
/*             window's current details (e.g. visible area)   */
/*             or NULL if this is not known;                  */
/*                                                            */
/*             1 to scroll left, else right;                  */
/*                                                            */
/*             1 to page left/right, else 0;                  */
/*                                                            */
/*             1 to move one line, else 0;                    */
/*                                                            */
/*             An amount to scroll by, ignored unless the     */
/*             above two parameters are zero;                 */
/*                                                            */
/*             Pointer to an int, in which 1 is written if    */
/*             the window didn't shift scroll position as it  */
/*             was at the limit of its work area, else 0 is   */
/*             written.                                       */
/**************************************************************/

_kernel_oserror * browser_scroll_page_h(browser_data * b, WimpOpenWindowBlock * o, int dir, int page, int line, int amount, int * limit)
{
  int                       scrollby;
  WimpGetWindowStateBlock   open;
  _kernel_oserror         * e;

  /* Work out the WimpOpenWindowBlock if NULL was passed in */

  if (!o)
  {
    open.window_handle = b->window_handle;

    e = wimp_get_window_state(&open);
    if (e) return e;

    o = (WimpOpenWindowBlock *) &open;
  }

  if (limit)
  {
    /* If required, see if we're at the limit of the scroll position */

    BBox extent;
    int  scrollmax;

    e = window_get_extent(0, b->self_id, &extent);
    if (e) return e;

    scrollmax = !dir ? extent.xmin - (o->visible_area.xmax - o->visible_area.xmin) : 0;

    if (scrollmax == o->xscroll) *limit = 1;
    else                         *limit = 0;
  }

  /* Work out how much to scroll by */

  if      (page) scrollby = o->visible_area.ymax - o->visible_area.ymin;
  else if (line) scrollby = 42;
  else           scrollby = amount;

  /* If greater than zero, move the page */

  if (scrollby > 0)
  {
    if (dir) scrollby = -scrollby;

    o->xscroll += scrollby;

    return wimp_open_window(o);
  }

  return NULL;
}

/**************************************************************/
/* browser_scroll_page_by_key()                               */
/*                                                            */
/* Scrolls a page according to a given key code.              */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the page;                                      */
/*                                                            */
/*             Key code from the Wimp (to define left /       */
/*             right, page movement or line movement, etc.);  */
/*                                                            */
/*             Pointer to an int, in which 1 is written if    */
/*             the window didn't shift scroll position as it  */
/*             was at the limit of its work area, else 0 is   */
/*             written (this only applies for vertical        */
/*             scrolling - the written value will always be 0 */
/*             if moving horizontally).                       */
/**************************************************************/

_kernel_oserror * browser_scroll_page_by_key(browser_data * b, int key, int * limit)
{
  int                       page = 0, line = 0, dir = 0;
  WimpGetWindowStateBlock   s;
  _kernel_oserror         * e;

  s.window_handle = b->window_handle;
  e = wimp_get_window_state(&s);
  if (e) return e;

  if (
       key == akbd_UpK                         ||
       key == akbd_PageUpK                     ||
       key == akbd_LeftK                       ||
       key == akbd_HomeK                       ||
       key == akbd_UpK   + akbd_Ctl            ||
       key == akbd_UpK   + akbd_Ctl + akbd_Sh  ||
       key == akbd_LeftK + akbd_Ctl            ||
       key == akbd_LeftK + akbd_Ctl + akbd_Sh
     )
     dir = 1;

  if (
       key == akbd_PageUpK                     ||
       key == akbd_PageDownK
     )
     page = 1;

  if (
       key == akbd_UpK                         ||
       key == akbd_DownK                       ||
       key == akbd_LeftK                       ||
       key == akbd_RightK                      ||
       key == akbd_UpK    + akbd_Ctl + akbd_Sh ||
       key == akbd_DownK  + akbd_Ctl + akbd_Sh ||
       key == akbd_LeftK  + akbd_Ctl + akbd_Sh ||
       key == akbd_RightK + akbd_Ctl + akbd_Sh
     )
     line = 1;

  if (
       key == akbd_LeftK                       ||
       key == akbd_RightK                      ||
       key == akbd_LeftK  + akbd_Ctl           ||
       key == akbd_LeftK  + akbd_Ctl + akbd_Sh ||
       key == akbd_RightK + akbd_Ctl           ||
       key == akbd_RightK + akbd_Ctl + akbd_Sh
     )
  {
    /* For left/right key presses, want to make sure as */
    /* the caller that the input focus is not in a      */
    /* writable icon, or if it is, the effect of having */
    /* the page scroll as the caret tries to move has   */
    /* been taken into account (e.g. the caret is known */
    /* to be at the start/end of the writable's text).  */

    if (limit) *limit = 0;

    return browser_scroll_page_h(b,
                                 (WimpOpenWindowBlock *) &s,
                                 dir,
                                 page,
                                 line,
                                 (!(page + line) ? 0x1000000 : 0),
                                 NULL);
  }
  else
  {
    e = browser_scroll_page_v(b,
                              (WimpOpenWindowBlock *) &s,
                              dir,
                              page,
                              line,
                              (!(page + line) ? 0x1000000 : 0),
                              limit);
    if (e) return e;

    /* For Home, make sure the page is scrolled to the far left */

    if (!page && !line && dir) return browser_scroll_page_h(b,
                                                            (WimpOpenWindowBlock *) &s,
                                                            1,
                                                            0,
                                                            0,
                                                            0x1000000,
                                                            NULL);

// This seems generally undesirable...
//
//    /* For End, make sure the page is scrolled to the far right */
//
//    if (!page && !line && !dir) return browser_scroll_page_h(b,
//                                                             (WimpOpenWindowBlock *) &s,
//                                                             0,
//                                                             0,
//                                                             0,
//                                                             0x1000000,
//                                                             NULL);

  }

  return NULL;
}

/**************************************************************/
/* browser_find_first_selectable()                            */
/*                                                            */
/* Examines the visible area of a given browser window to see */
/* if a selectable token is present in it, and returns the    */
/* address of the token if so. The token returned may not be  */
/* fully visible - the caller must use browser_check_visible  */
/* on the returned token if the token must be fully visible.  */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the window;                                    */
/*                                                            */
/*             A WimpGetWindowStateBlock pointer holding      */
/*             details of the window (if NULL because the     */
/*             caller doesn't have this information to hand,  */
/*             the function will work it out);                */
/*                                                            */
/*             Direction to search in; 1 for bottom right to  */
/*             top left, 0 for top left to bottom right.      */
/*                                                            */
/* Returns:    Pointer to the token to select, or NULL if     */
/*             none are visible.                              */
/**************************************************************/

HStream * browser_find_first_selectable(browser_data * b, WimpGetWindowStateBlock * s, int dir)
{
  HStream                 * token_null = NULL;
  WimpGetWindowStateBlock   state;

  if (!b) return NULL;

  /* Get the window state if it wasn't given */

  if (!s)
  {
    state.window_handle = b->window_handle;

    if (wimp_get_window_state(&state)) return NULL;

    s = &state;
  }

  /* Find the selectable, marking that nothing is to be */
  /* skipped (*(&token_null) = NULL).                   */

  if (!dir) return browser_find_selectable_top_r(b, b->cell, &token_null, 0, s);
  else      return browser_find_selectable_bot_r(b, b->cell, &token_null, 0, s);
}

/**************************************************************/
/* browser_find_another_selectable()                          */
/*                                                            */
/* Takes a given selected token, and finds the previous or    */
/* next selectable, optionally constraining the search to     */
/* moving to a new line, rather than allowing to stay on the  */
/* same one.                                                  */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the window;                                    */
/*                                                            */
/*             Pointer to the currently selected token;       */
/*                                                            */
/*             Direction to search in; 1 for bottom right to  */
/*             top left, 0 for top left to bottom right;      */
/*                                                            */
/*             Constraint (1 to allow tokens on the same      */
/*             line, else must go to a new line).             */
/*                                                            */
/* Returns:    Pointer to the new token that should be        */
/*             selected, or NULL for none.                    */
/**************************************************************/

HStream * browser_find_another_selectable(browser_data * b, HStream * current, int dir, int constrain)
{
  WimpGetWindowStateBlock   state;
  HStream                 * current_rec = current;

  /* Get the browser window's state */

  if (!b) return NULL;

  state.window_handle = b->window_handle;

  if (wimp_get_window_state(&state)) return NULL;

  /* Ensure that the selected token in current_rec is */
  /* at the top of the tokens representing the same   */
  /* selectable.                                      */

  tokenutils_anchor_range(b, current_rec, &current_rec, NULL);

  /* Call the relevant function to find the item */

  if (!dir) return browser_find_selectable_top_r(b, b->cell, &current_rec, 0, &state);
  else      return browser_find_selectable_bot_r(b, b->cell, &current_rec, 0, &state);
}

/**************************************************************/
/* browser_find_selectable_top_r()                            */
/*                                                            */
/* Recursive back-end to the 'from top-left' call to          */
/* browser_find_another_selectable and                        */
/* browser_find_first_selectable.                             */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the window;                                    */
/*                                                            */
/*             Pointer to a reformat_cell struct holding the  */
/*             lines to scan;                                 */
/*                                                            */
/*             Pointer to a pointer to the currently selected */
/*             token (this will be written to) - if there is  */
/*             no such token, this should point to a word     */
/*             holding NULL;                                  */
/*                                                            */
/*             y origin of that cell, in OS units from the    */
/*             top left of the whole page;                    */
/*                                                            */
/*             A WimpGetWindowStateBlock pointer holding      */
/*             details of the window;                         */
/*                                                            */
/* Returns:    As browser_find_first_selectable.              */
/**************************************************************/

HStream * browser_find_selectable_top_r(browser_data * b, reformat_cell * cell, HStream ** current, int y_origin, WimpGetWindowStateBlock * s)
{
  HStream * t    = NULL;
  HStream * last = NULL;
  int       exit;
  int       ytop, ybot, htop, hbot;
  int       line, chunk, chunkmax;

  if (!cell || !cell->nlines || !cell->ldata || !cell->cdata) return NULL;

  dprintf(("KeyC", "browser_find_selectable_top_r: Proceeding for %p, cell %p\n", b, cell));

  /* Work out where the visible page region starts and ends */

  if (!controls.swap_bars)
  {
    htop = toolbars_button_height(b) + toolbars_url_height(b);
    hbot = toolbars_status_height(b);
  }
  else
  {
    htop = toolbars_status_height(b);
    hbot = toolbars_button_height(b) + toolbars_url_height(b);
  }

  if (htop) htop += wimpt_dy();
  if (hbot) hbot += wimpt_dy();

  ytop = s->yscroll - htop;
  ybot = s->yscroll - (s->visible_area.ymax - s->visible_area.ymin) + hbot;

  dprintf(("KeyC", "browser_find_selectable_top_r: ytop, ybot: -%d, -%d\n",-ytop,-ybot));

  /* Go through the cell's chunks, getting tokens for as long */
  /* as the chunk holding lines are in the visible area.      */

  line = 0;
  exit = 0;

  /* Find the line visible at the top of the window. This can be slow if */
  /* there are a lot of lines, so use a Cunning Plan - divide the window */
  /* extent (take the y coordinate of the last line) by the number of    */
  /* lines to get the average line height, use this and the ytop coord   */
  /* to have a good guess at the line, then move a short distance up or  */
  /* down to get the actual correct line.                                */
  /*                                                                     */
  /* Of course, this only works for the main line list. It could be      */
  /* adjusted for tables, but there's no time to do it right now...      */
  /* Tables are rarely large enough to need it anyway.                   */

  if (cell != b->cell)
  {
    while (line < cell->nlines && y_origin + cell->ldata[line].y > ytop) line ++;
  }
  else
  {
    int extent  = cell->ldata[cell->nlines - 1].y;
    int average = extent / cell->nlines;
    int startat;

    if (average) startat = ytop / average;
    else         startat =0;

    if (startat < 0)             startat = 0;
    if (startat >= cell->nlines) startat = cell->nlines - 1;

    if (y_origin + cell->ldata[startat].y > ytop)
    {
      int lastline = -1;

      line = startat;
      while (line < cell->nlines && y_origin + cell->ldata[line].y > ytop) lastline = line, line ++;

      if (lastline >= 0) line = lastline;
      else               line = startat;
    }
    else
    {
      line = startat;
      while (line >= 0 && y_origin + cell->ldata[line].y <= ytop) line --;

      if (line < 0) line = 0;
    }
  }

  /* Proceed until the line visible at the bottom */

  while (line < cell->nlines && y_origin + cell->ldata[line].y + cell->ldata[line].h > ybot && !exit)
  {
    dprintf(("KeyC", "browser_find_selectable_top_r: Line %d\n",line));

    chunk    = cell->ldata[line].chunks;
    chunkmax = cell->ldata[line].n + chunk;

    while (chunk < chunkmax && !exit)
    {
      /* Find the token represented by this chunk */

      t = cell->cdata[chunk].t;
      if (!t) break;

      #ifdef TRACE
        dprintf(("KeyC", "browser_find_selectable_top_r: Chunk %d of %d, token %p\n", chunk, chunkmax, t));
        if (t == last) dprintf(("KeyC", "browser_find_selectable_top_r: t = last, so won't deal with this chunk\n"));
      #endif

      /* Several chunks can represent the same token - don't want to */
      /* deal with it multiple times, though.                        */

      if (t != last)
      {
        last = t;

        /* Exit successfully (exit = 1, t != NULL) if the token can be */
        /* selected and is visible.                                    */

        if (!*current && CanBeSelected(t) && browser_check_visible(b, s, t))
        {
          dprintf(("KeyC", "browser_find_selectable_top_r: ** Found %p **\n", t));

          exit = 1;
          break;
        }

        /* If we're supposed to select the token after *current - i.e. *current */
        /* is still not NULL - then find the first token making up that same    */
        /* link. If this matches *current, we've found that link - so, clear    */
        /* *current and skip past the link.                                     */

        if (*current && CanBeSelected(t))
        {
          HStream * top, * bot;

          tokenutils_anchor_range(b, t, &top, &bot);

          if (top == *current)
          {
            *current = NULL;

            tokenutils_find_token(b, cell, bot, NULL, NULL, &line, &chunk);
          }
        }

        /* Deal with tables */

        if (t->tagno == TAG_TABLE)
        {
          table_stream   * table     = (table_stream *) t;
          table_row      * row       = table->List;
          table_headdata * head      = NULL;
          HStream        * found     = NULL;
          reformat_cell  * c         = NULL;
          reformat_cell  * cellarray = table->cells;
          int              cellmax   = table->ColSpan * table->RowSpan;
          int              cellindex;
          int              xorg, yorg;

          dprintf(("KeyC", "browser_find_selectable_top_r: Dealing with table\n"));

          /* Proceed if the cell array can be found */

          if (cellarray)
          {
            while (row && !found)
            {
              head = row->List;

              while (
                      head                           &&
                      !found                         &&
                      head->RowOffs < table->RowSpan &&
                      head->ColOffs < table->ColSpan
                    )
              {
                switch (head->Tag)
                {
                  case TagTableData:
                  case TagTableHead:
                  {
                    /* Find the reformat_cell structure for this table cell */

                    cellindex = head->RowOffs * table->ColSpan + head->ColOffs;

                    if (cellindex < cellmax)
                    {
                      c = &cellarray[cellindex];

                      dprintf(("KeyC", "browser_find_selectable_top_r: Cell index %d, cell %p\n",cellindex,cellarray));

                      convert_pair_to_os(c->x, c->y, &xorg, &yorg);

                      /* Recursive call to look at cell contents */

                      found = browser_find_selectable_top_r(b,
                                                            c,
                                                            current,
                                                            cell->ldata[line].y + cell->ldata[line].h + y_origin + yorg,
                                                            s);

                      dprintf(("KeyC", "browser_find_selectable_top_r: Cell index %d, cell %p - Found: %p\n",cellindex, cellarray, found));
                    }
                  }

                /* Closure of 'switch (head->Tag)' */
                }

                head = head->Next;

              /* Closure of 'while (head && ...)' */
              }

              row = row->Next;

            /* Closure of 'while (row && ...)' */
            }

          /* Closure of 'if (cellarray)' */
          }

          if (found)
          {
            t    = found;
            exit = 1;

            dprintf(("KeyC", "browser_find_selectable_top_r: ** Found %p in table, exitting **\n",t));

            break;
          }
          #ifdef TRACE

            else dprintf(("KeyC", "browser_find_selectable_top_r: Nothing found in table\n"));

          #endif
        }

      /* Closure of 'if (t != last)' */
      }

      chunk ++;

    /* Closure of 'while' loop scanning chunks */
    }

    line ++;

  /* Closure of 'while' loop scanning the lines */
  }

  /* If exit wasn't forced, we scanned the whole of the visible line list */
  /* for this cell and didn't find a visible, selectable token.           */

  if (!exit) t = NULL;

  /* Return the found value, be it NULL or a valid selectable token */

  dprintf(("KeyC", "browser_find_selectable_top_r: -- Returning %p --\n", t));

  return t;
}

/**************************************************************/
/* browser_find_selectable_bot_r()                            */
/*                                                            */
/* Recursive back-end to the 'from bottom-right' call to      */
/* browser_find_another_selectable and                        */
/* browser_find_first_selectable.                             */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the window;                                    */
/*                                                            */
/*             Pointer to a reformat_cell struct holding the  */
/*             lines to scan;                                 */
/*                                                            */
/*             Pointer to a pointer to the currently selected */
/*             token (this will be written to) - if there is  */
/*             no such token, this should point to a word     */
/*             holding NULL;                                  */
/*                                                            */
/*             y origin of that cell, in OS units from the    */
/*             top left of the whole page;                    */
/*                                                            */
/*             A WimpGetWindowStateBlock pointer holding      */
/*             details of the window.                         */
/*                                                            */
/* Returns:    As browser_find_first_selectable.              */
/**************************************************************/

HStream * browser_find_selectable_bot_r(browser_data * b, reformat_cell * cell, HStream ** current, int y_origin, WimpGetWindowStateBlock * s)
{
  HStream * t    = NULL;
  HStream * last = NULL;
  int       exit;
  int       ytop, ybot, htop, hbot;
  int       line, chunk, chunkmin;

  if (!cell || !cell->nlines || !cell->ldata || !cell->cdata) return NULL;

  dprintf(("KeyC", "browser_find_selectable_bot_r: Proceeding for %p, cell %p\n", b, cell));

  /* Work out where the visible page region starts and ends */

  if (!controls.swap_bars)
  {
    htop = toolbars_button_height(b) + toolbars_url_height(b);
    hbot = toolbars_status_height(b);
  }
  else
  {
    htop = toolbars_status_height(b);
    hbot = toolbars_button_height(b) + toolbars_url_height(b);
  }

  if (htop) htop += wimpt_dy();
  if (hbot) hbot += wimpt_dy();

  ytop = s->yscroll - htop;
  ybot = s->yscroll - (s->visible_area.ymax - s->visible_area.ymin) + hbot;

  dprintf(("KeyC", "browser_find_selectable_bot_r: ytop, ybot: -%d, -%d\n",-ytop,-ybot));

  /* Go through the cell's chunks, getting tokens for as long */
  /* as the chunk holding lines are in the visible area.      */

  line = cell->nlines - 1;
  exit = 0;

  /* Find the line visible at the top of the window. This can be slow if */
  /* there are a lot of lines, so use a Cunning Plan - divide the window */
  /* extent (take the y coordinate of the last line) by the number of    */
  /* lines to get the average line height, use this and the ybot coord   */
  /* to have a good guess at the line, then move a short distance up or  */
  /* down to get the actual correct line.                                */
  /*                                                                     */
  /* Of course, this only works for the main line list. It could be      */
  /* adjusted for tables, but there's no time to do it right now...      */
  /* Tables are rarely large enough to need it anyway.                   */

  if (cell != b->cell)
  {
    while (line >= 0 && y_origin + cell->ldata[line].y + cell->ldata[line].h < ybot) line --;
  }
  else
  {
    int extent  = cell->ldata[cell->nlines - 1].y;
    int average = extent / cell->nlines;
    int startat = ybot / average + 1;

    if (startat < 0)             startat = 0;
    if (startat >= cell->nlines) startat = cell->nlines - 1;

    if (y_origin + cell->ldata[startat].y + cell->ldata[startat].h < ybot)
    {
      int lastline = -1;

      line = startat;
      while (line >= 0 && y_origin + cell->ldata[line].y + cell->ldata[line].h < ybot) lastline = line, line --;

      if (lastline >= 0) line = lastline;
      else               line = startat;
    }
    else
    {
      line = startat;
      while (line < cell->nlines && y_origin + cell->ldata[line].y + cell->ldata[line].h >= ybot) line ++;

      if (line >= cell->nlines) line = cell->nlines - 1;
    }
  }

  /* Proceed until the line visible at the top */

  while (line >= 0 && y_origin + cell->ldata[line].y < ytop && !exit)
  {
    dprintf(("KeyC", "browser_find_selectable_bot_r: Line %d\n",line));

    chunkmin = cell->ldata[line].chunks;
    chunk    = cell->ldata[line].n + chunkmin - 1;

    while (chunk >= chunkmin && !exit)
    {
      /* Find the token represented by this chunk */

      t = cell->cdata[chunk].t;
      if (!t) break;

      #ifdef TRACE
        dprintf(("KeyC", "browser_find_selectable_bot_r: Chunk %d of %d minimum, token %p\n", chunk, chunkmin, t));
        if (t == last) dprintf(("KeyC", "browser_find_selectable_bot_r: t = last, so won't deal with this chunk\n"));
      #endif

      /* Several chunks can represent the same token - don't want to */
      /* deal with it multiple times, though.                        */

      if (t != last)
      {
        last = t;

        /* Exit successfully (exit = 1, t != NULL) if the token can be */
        /* selected and is visible.                                    */

        if (!*current && CanBeSelected(t) && browser_check_visible(b, s, t))
        {
          dprintf(("KeyC", "browser_find_selectable_bot_r: ** Found %p **\n", t));

          exit = 1;
          break;
        }

        /* If we're supposed to select the token after *current - i.e. *current */
        /* is still not NULL - then, having made sure that the current token    */
        /* 't' represents an anchor, find the first token making up that same   */
        /* link. If this matches *current, we've found that link - so, clear    */
        /* *current and skip over the link.                                     */

        if (*current && CanBeSelected(t))
        {
          HStream * top, * bot;

          tokenutils_anchor_range(b, t, &top, &bot);

          if (top == *current)
          {
            *current = NULL;

            tokenutils_find_token(b, cell, top, &line, &chunk, NULL, NULL);
          }
        }

        /* Deal with tables */

        if (t->tagno == TAG_TABLE)
        {
          table_stream   * table     = (table_stream *) t;
          table_row      * row       = NULL;
          table_headdata * head      = NULL;
          HStream        * found     = NULL;
          reformat_cell  * c         = NULL;
          reformat_cell  * cellarray = table->cells;
          int              cellmax   = table->ColSpan * table->RowSpan;
          int              cellindex;
          int              xorg, yorg;

          dprintf(("KeyC", "browser_find_selectable_bot_r: Dealing with table\n"));

          /* Proceed if the cell array can be found */

          if (cellarray)
          {
            /* Start on the last row and work backwards */

            row = table->List;

            while (row && row->Next) row = row->Next;

            while (row && !found)
            {
              head = row->List;

              /* Start on the last cell and work backwards */

              while (head && head->Next) head = head->Next;

              while (
                      head                           &&
                      !found                         &&
                      head->RowOffs < table->RowSpan &&
                      head->ColOffs < table->ColSpan
                    )
              {
                switch (head->Tag)
                {
                  case TagTableData:
                  case TagTableHead:
                  {
                    /* Find the reformat_cell structure for this table cell */

                    cellindex = head->RowOffs * table->ColSpan + head->ColOffs;

                    if (cellindex < cellmax)
                    {
                      c = &cellarray[cellindex];

                      dprintf(("KeyC", "browser_find_selectable_bot_r: Cell index %d, cell %p\n",cellindex,cellarray));

                      convert_pair_to_os(c->x, c->y, &xorg, &yorg);

                      /* Recursive call to look at cell contents */

                      found = browser_find_selectable_bot_r(b,
                                                            c,
                                                            current,
                                                            cell->ldata[line].y + cell->ldata[line].h + y_origin + yorg,
                                                            s);

                      dprintf(("KeyC", "browser_find_selectable_bot_r: Cell index %d, cell %p - Found: %p\n",cellindex, cellarray, found));
                    }
                  }

                /* Closure of 'switch (head->Tag)' */
                }

                head = head->Prev;

              /* Closure of 'while (head && ...)' */
              }

              row = row->Prev;

            /* Closure of 'while (row && ...)' */
            }

          /* Closure of 'if (cellarray)' */
          }

          if (found)
          {
            t    = found;
            exit = 1;

            dprintf(("KeyC", "browser_find_selectable_bot_r: ** Found %p in table, exitting **\n",t));

            break;
          }
          #ifdef TRACE

            else dprintf(("KeyC", "browser_find_selectable_bot_r: Nothing found in table\n"));

          #endif
        }

      /* Closure of 'if (t != last)' */
      }

      chunk --;

    /* Closure of 'while' loop scanning chunks */
    }

    line --;

  /* Closure of 'while' loop scanning the lines */
  }

  /* If exit wasn't forced, we scanned the whole of the visible line list */
  /* for this cell and didn't find a visible, selectable token.           */

  if (!exit) t = NULL;

  /* Return the found value, be it NULL or a valid selectable token */

  dprintf(("KeyC", "browser_find_selectable_bot_r: -- Returning %p --\n", t));

  return t;
}

/**************************************************************/
/* browser_move_selection()                                   */
/*                                                            */
/* Moves the selected item up or down (to a previous link,    */
/* picture or forms item, or to a next item).                 */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the selected item;                             */
/*                                                            */
/*             Key press from a keyboard handler (used to     */
/*             determine the direction and distance of        */
/*             motion).                                       */
/*                                                            */
/* Returns:    1 if the keypress was used for something, else */
/*             0 (e.g. there are no more objects to select).  */
/**************************************************************/

int browser_move_selection(browser_data * b, int key)
{
  int                       page = 0, line = 0, dir = 0, horiz = 0;
  WimpGetWindowStateBlock   s;
  HStream                 * new            = NULL;
  HStream                 * first_selected = NULL;
  HStream                 * last_selected  = NULL;
  browser_data            * ancestor       = utils_ancestor(b);
  browser_data            * owner;

  owner             = ancestor->selected_owner;
  if (!owner) owner = b;

  if (!choices.keyboard_ctrl) return 0;

  if (ancestor->in_image_map || b->in_image_map)
  {
    /* If browser_navigate_map returns a non-zero value, */
    /* drop the keypress through.                        */

    key = browser_navigate_map(b, key);
    if (!key) return 1;
  }

  s.window_handle = b->window_handle;
  if (wimp_get_window_state(&s)) return 0;

  /* Ctrl+Shift+Arrows nudges the page scroll position, */
  /* it doesn't move any selections.                    */

  if (
       key == akbd_UpK    + akbd_Ctl + akbd_Sh  ||
       key == akbd_DownK  + akbd_Ctl + akbd_Sh  ||
       key == akbd_LeftK  + akbd_Ctl + akbd_Sh  ||
       key == akbd_RightK + akbd_Ctl + akbd_Sh
     )
     return 0;

  /* Otherwise, work out which direction to move in, is this line or */
  /* page movement, etc.                                             */

  if (
       key == akbd_UpK               ||
       key == akbd_PageUpK           ||
       key == akbd_LeftK             ||
       key == akbd_HomeK             ||
       key == akbd_UpK   + akbd_Ctl  ||
       key == akbd_LeftK + akbd_Ctl
     )
     dir = 1;

  if (
       key == akbd_PageUpK           ||
       key == akbd_PageDownK
     )
     page = 1;

  if (
       key == akbd_UpK               ||
       key == akbd_DownK             ||
       key == akbd_LeftK             ||
       key == akbd_RightK
     )
     line = 1;

  if (
       key == akbd_LeftK             ||
       key == akbd_RightK            ||
       key == akbd_LeftK  + akbd_Ctl ||
       key == akbd_RightK + akbd_Ctl
     )
     horiz = 1;

  /* If there's no selected token, or there is but it's not visible, */
  /* then reselect as appropriate from the tokens (if any) currently */
  /* visible on the page.                                            */

  if (ancestor->selected) tokenutils_anchor_range(owner,
                                                  ancestor->selected,

                                                  &first_selected,
                                                  &last_selected);
  else first_selected = last_selected = NULL;

  if (
       line &&
       (
         !ancestor->selected ||
         (
           ancestor->selected                                &&
           !browser_check_visible(owner, &s, first_selected) &&
           !browser_check_visible(owner, &s, last_selected)
         )
       )
     )
  {
    ancestor->selected       = NULL; /* No redraw problems as the conditions above ensure selected token is not in visible area now */
    ancestor->selected_owner = NULL;
    new                      = browser_find_first_selectable(owner, &s, dir);
  }

  /* Alternatively, if there's a selected token, move up or down from it */

  else if (line && ancestor->selected)
  {
    new = browser_find_another_selectable(owner, ancestor->selected, dir, horiz);

    /* If up/down is used but the next item is not visible on screen so */
    /* the page would scroll, want to first ensure that everything on   */
    /* the current line is selected - i.e. try moving horizontally.     */

    if (
         new                                   &&
         !horiz                                &&
         !browser_check_visible(owner, &s, new)
       )
       new = browser_find_another_selectable(owner, ancestor->selected, dir, 1);
  }

  if (new)
  {
//    if (
//         tokenutils_within_distance(owner,
//                                    new,
//                                    ancestor->selected,
//                                    s.visible_area.ymax -
//                                    s.visible_area.ymin -
//                                    toolbars_status_height(b) -
//                                    toolbars_url_height(b) -
//                                    toolbars_button_height(b))
//       )

    if (browser_check_visible(owner, &s, new))
    {
      /* If there are any forms menus open, close them */

      if (menusrc == Menu_Form) form_abandon_menu();

      browser_ensure_visible(owner, &s, new);
      browser_select_token(owner, new, 0);

      /* Update the status bar */

      toolbars_update_status(owner, Toolbars_Status_LinkTo);

      /* Move inside writable elements */

      if (
           form_token_cursor_editable(owner, new)
         )
         form_click_field(owner,
                          new,
                          ((key == akbd_DownK || key == akbd_RightK) ? 0 : 2),
                          0, 0);

      /* Turn the pointer off, and reset the check to see if */
      /* the user has moved it manually.                     */

      mouse_pointer_off();
      mouse_force_unused();

      return 1;
    }
    else
    {
      /* This is so that if there's another selectable, but it's off screen, */
      /* the user doesn't suddenly start scrolling left / right, only up or  */
      /* down to reach the next selectable.                                  */

      if (horiz) return 1;
    }
  }

  return 0;
}

/**************************************************************/
/* browser_navigate_map()                                     */
/*                                                            */
/* Moves around an image map by keyboard control with the     */
/* machine single tasking during a key autorepeat.            */
/*                                                            */
/* To exit this 'mode', drop off the image map or follow a    */
/* link with Return.                                          */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the browser the image map lies in;             */
/*                                                            */
/*             Wimp keycode used to move in it.               */
/*                                                            */
/* Returns:    0 if the pointer is still in the map, else a   */
/*             Wimp key code saying which way it fell off.    */
/**************************************************************/

static int browser_navigate_map(browser_data * b, int key)
{
  HStream                 * tp;
  int                       map_x  = -1;
  int                       map_y  = -1;
  WimpGetPointerInfoBlock   p;

  if (!wimp_get_pointer_info(&p))
  {
    tp = browser_get_pointer_token(b, &p, NULL, NULL);

    if (
         tp                     &&
         redraw_selected(b, tp) &&
         (
           (
             (tp->style & IMG) &&
             (tp->type  & TYPE_ISMAP)
           )
           ||
           (
             tp->tagno         == TAG_INPUT &&
             HtmlINPUTtype(tp) == inputtype_IMAGE
           )
           ||
           (
             tp->type & TYPE_ISCLIENTMAP
           )
         )
       )
    {
      int       last_move = 4;
      int       last_key, start_key;
      int       time_delay, time_now;
      int       repeat_delay, repeat_rate;
      HStream * current;

      _swix(OS_Byte,
            _INR(0,1) | _OUT(1),

            121, /* Keyboard scan */
            0,   /* Scan all keys */

            &start_key); /* Record the key(s) being pressed (not the Wimp keycode) */

      mouse_watch_pointer_control(0);
      mouse_pointer_on();
      b->pointer_over = NULL;
      browser_pointer_check(0, NULL,NULL, b);

      /* Get the keyboard repeat rate and delay */

      _swix(OS_Byte,
            _INR(0, 2) | _OUTR(1, 2),

            196, /* Read auto-repeat delay */
            0,
            255,

            &repeat_delay,
            &repeat_rate);

      /* Read the current time into time_delay and set it negative, */
      /* to flag that the repeat delay part of autorepeat is active */

      _swix(OS_ReadMonotonicTime, _OUT(0), &time_delay);
      time_delay = -time_delay + 1; /* +1 as a '>' is used in the comparisson later, not '>='. */

      do
      {
        /* Move according to key used */

        if (key == akbd_UpK)    p.y += last_move;
        if (key == akbd_DownK)  p.y -= last_move;
        if (key == akbd_LeftK)  p.x -= last_move;
        if (key == akbd_RightK) p.x += last_move;

        if (key == akbd_Sh + akbd_UpK)    p.y += last_move * 3;
        if (key == akbd_Sh + akbd_DownK)  p.y -= last_move * 3;
        if (key == akbd_Sh + akbd_LeftK)  p.x -= last_move * 3;
        if (key == akbd_Sh + akbd_RightK) p.x += last_move * 3;

        map_x = p.x, map_y = p.y;

        mouse_to(p.x, p.y, 1);

        /* Loop round waiting for the keyboard repeat delay or rate */

        do
        {
          _swix(OS_Byte,
                _INR(0,1) | _OUT(1),

                121, /* Keyboard scan */
                0,   /* Scan all keys */

                &last_key);

          _swix(OS_ReadMonotonicTime, _OUT(0), &time_now);

          /* If time_delay is negative, wait for the repeat delay */

          if (time_delay < 0)
          {
            if (time_now + time_delay > repeat_delay) time_delay = time_now;
          }

          /* Otherwise, wait for the repeat rate */

          else
          {
            if (time_now - time_delay > repeat_rate) time_delay = time_now, last_move += 1;
          }
        }
        while (time_now != time_delay && last_key != 255 && last_key == start_key);

        /* Make sure that next time round the loop, the exit condition above doesn't */
        /* immediately activate, giving about 1 centisecond of very fast repeats...  */

        time_delay = time_now - 1; /* Hence the use of '>' rather than '>=' above */

        _swix(OS_Byte, _INR(0,1), 21, 0); /* Flush keyboard buffer */

        current = browser_get_pointer_token(b, &p, NULL, NULL);

        /* Keep going whilst we're over the same token and keys are being pressed */
      }
      while (tp == current && last_key != 255 && last_key == start_key);

      /* If we're on the same token, exit, claiming the key press. */
      /* Else, allow the press to drop through (so you'll go on to */
      /* select the next/previous token if running off the edge of */
      /* the image).                                               */

      if (tp == current) return 0;

      /* Otherwise, reenable pointer watching etc. and allow the */
      /* key press to drop to through.                           */
    }

    /* (This code also executes if the pointer isn't */
    /* over an image map any more - e.g. the user    */
    /* moved the mouse away).                        */

    mouse_set_pointer_shape(Mouse_Shape_Normal);
    debounce_keypress();

    /* Clear the flag saying an image map is selected */
    /* and sort out mouse pointer issues              */

    {
      browser_data * ancestor = utils_ancestor(b);

      mouse_pointer_off();
      b->in_image_map = ancestor->in_image_map = 0;
      b->pointer_over = ancestor->pointer_over = NULL;
      browser_pointer_check(0, NULL,NULL, b);
      mouse_watch_pointer_control(1);
    }

    return key;
  }

  return 0;
}

/**************************************************************/
/* browser_fetch_url()                                        */
/*                                                            */
/* Looks in the browser_data structure given to the function  */
/* and returns the URL that is currently being fetched, or    */
/* NULL for none. It'll try the URL writeable if it can't     */
/* find a fetch URL or a display URL.                         */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the fetch.                                     */
/*                                                            */
/* Returns:    Pointer to the URL string or NULL if there is  */
/*             no fetch URL present.                          */
/**************************************************************/

char * browser_fetch_url(const browser_data * restrict b)
{
  if (!b->urlfdata || !*b->urlfdata)
  {
    ObjectId t;

    /* If we're displaying a URL but fetching nothing, return nothing */

    if (b->urlddata) return NULL;

    /* Must be a very early browser window - no data fetched yet, but */
    /* stopped (so not currently fetching). Try to use the URL        */
    /* writeable. "Who Owns What" problems mean we need a static      */
    /* buffer here. Sigh.                                             */

    t = toolbars_get_upper(b);

    if (t != NULL_ObjectId)
    {
      static char wurl[Limits_URLBarWrit];

      if (
           writablefield_get_value(0,
                                   t,
                                   URLBarWrit,
                                   wurl,
                                   sizeof(wurl),
                                   NULL)
         )
         *wurl = '\0';

      if (*wurl != '\0') return wurl;
    }

    return NULL;
  }
  else return b->urlfdata;
}

/**************************************************************/
/* browser_current_url()                                      */
/*                                                            */
/* Returns a pointer to the current URL being displayed in a  */
/* browser window. There may not be one, of course, if a new  */
/* window is open and no data has been fetched yet - in this  */
/* case, NULL is returned.                                    */
/*                                                            */
/* Parameters: A pointer to a browser_data structure relevant */
/*             to the window.                                 */
/*                                                            */
/* Returns:    Pointer to the displayed URL, or NULL if       */
/*             nothing is displayed.                          */
/**************************************************************/

char * browser_current_url(const browser_data * restrict b)
{
  /* NB, should this function ever become more complex than this, */
  /* note that external callers rely on it NOT corrupting the     */
  /* 'tokens' buffer used by lookup_token or lookup_choice - i.e. */
  /* this function may not call these.                            */

  return b->urlddata;
}

/**************************************************************/
/* browser_base_url()                                         */
/*                                                            */
/* Returns a pointer to the current URL being displayed in a  */
/* browser window, unless there is none, in which case the    */
/* fetch URL is given. The pointer may still be NULL though.  */
/* If there is a base URL for the document, this will be      */
/* returned instead of the actual URL from which the page was */
/* fetched.                                                   */
/*                                                            */
/* The base URL is recorded through an HTMLLib callback       */
/* function, browser_base_callback.                           */
/*                                                            */
/* Parameters: A pointer to a browser_data structure relevant */
/*             to the window.                                 */
/*                                                            */
/* Returns:    Pointer to the displayed URL, or the fetch URL */
/*             if none is displayed.                          */
/**************************************************************/

const char * browser_base_url(const browser_data * restrict b)
{
  /* As with browser_current_url, take care not to corrupt the */
  /* 'tokens' lookup buffer if modifying this function.        */

  if (b->urlbdata && *b->urlbdata) return b->urlbdata;
  if (b->urlddata && *b->urlddata) return b->urlddata;

  return b->urlfdata;
}

/**************************************************************/
/* browser_current_title()                                    */
/*                                                            */
/* Examines an HStream list for a given browser trying to     */
/* find a TITLE tag; if it finds it, a pointer to the title   */
/* text is returned.                                          */
/*                                                            */
/* Parameters: A pointer to a browser_data structure relevant */
/*             to the HStream list.                           */
/*                                                            */
/* Returns:    Pointer to the page title, or NULL if none is  */
/*             found.                                         */
/**************************************************************/

char * browser_current_title(const browser_data * restrict b)
{
  const HStream * current = b->stream;

  while (current)
  {
    if (ISHEAD(current) && current->tagno == TAG_TITLE && current->text) return current->text;

    current = current->next;
  }

  return NULL;
}

/**************************************************************/
/* browser_base_callback()                                    */
/*                                                            */
/* When HTMLLib encounters a BASE tag, it will call this      */
/* function to let it know what the base URL is. The function */
/* is registered in html_get_next_token (FetchHTML.c).        */
/*                                                            */
/* Parameters: See HTMLLib "htmllib.h".                       */
/*                                                            */
/* Returns:    See HTMLLib "htmllib.h".                       */
/**************************************************************/

void browser_base_callback(void * stream, const char * url, const char * target, void * handle)
{
  browser_data * b = (browser_data *) handle;

  b->urlbdata    = url;
  b->targetbdata = target;

  /* When the Fetcher starts to display a new page, it will clear all */
  /* fields. Because this callback function may be called *before*    */
  /* the Fetcher gets any data, we need to tell it not to clear the   */
  /* new base information.                                            */

  b->base_lock = 1;
}

/**************************************************************/
/* browser_destroy_source()                                   */
/*                                                            */
/* Pass a browser_data structure pointer, and if this points  */
/* to a block of memory holding fetched HTML source, free up  */
/* that block.                                                */
/*                                                            */
/* Parameters: A pointer to a browser_data structure relevant */
/*             to the source.                                 */
/**************************************************************/

void browser_destroy_source(browser_data * b)
{
  if (b->source)
  {
    #ifdef TRACE
      dprintf(("LMem", "browser_destroy_source: flex_free block %p which held page source\n",&b->source));
      flexcount -= flex_size((flex_ptr) &b->source);
      dprintf(("CFle", "**   flexcount: %d\n",flexcount));
    #endif

    flex_free((flex_ptr) &b->source);
    b->source = NULL;
  }
}

/**************************************************************/
/* browser_find_matching_url()                                */
/*                                                            */
/* Given a string in a buffer, look for this string within    */
/* any entry in the hotlist and in addition, the global visit */
/* history using both titles and URLs. The search is case     */
/* sensitive. The buffer is updated with the found item, if   */
/* any. Calling with that updated buffer contents will return */
/* the next item matching the original search criterion,      */
/* assuming there is more than one match, if you've kept the  */
/* block with the list of found items in it (see parameters   */
/* list).                                                     */
/*                                                            */
/* Parameters: A flex_ptr which will be used to hold a block  */
/*             with all found matches - e.g. &b->match_list;  */
/*                                                            */
/*             Pointer to the buffer holding the search       */
/*             string;                                        */
/*                                                            */
/*             Length of the buffer.                          */
/*                                                            */
/* Returns:    1 if an item was found (the buffer contents    */
/*             will be updated), else 0.                      */
/**************************************************************/

int browser_find_matching_url(flex_ptr match_list, char * buffer, int buffer_size)
{
  #ifndef REMOTE_HOTLIST

    int changed = 0;
    int look    = 1;

    if (!match_list) return 0;
    if (buffer_size < 2) return 0;

    /* Do we already have a list of URLs to match to? */

    if (*((char **) match_list))
    {
      int offset = 0;

      /* Does the URL writeable exactly match an entry? */

      while ((*((char **) match_list))[offset])
      {
        int len = strlen((*((char **) match_list)) + offset) + 1;

        if (!strcmp((*((char **) match_list)) + offset, buffer))
        {
          int old_offset = offset;

          /* We have a match; jump to the next entry */

          offset += len;
          if (!(*((char **) match_list))[offset]) offset = 0;

          if (old_offset != offset)
          {
            /* Update the URL */

            strncpy(buffer, (*((char **) match_list)) + offset, buffer_size - 1);
            buffer[buffer_size - 1] = '\0';

            changed = 1;
          }

          look = 0;

          break;
        }
        else
        {
          offset += len;
        }
      }
    }

    if (look)
    {
      int found;

      /* We need to build a list of matches; free any */
      /* existing list first                          */

      if (*((char **) match_list)) flex_free(match_list);

      /* Try and find something appropriate in the hotlist, */
      /* then the history.                                  */

      found  = hotlist_find_match(match_list, buffer);
      found += history_find_match(match_list, buffer);

      /* If we found something, use the first entry */

      if (found != 0)
      {
        strncpy(buffer, *((char **) match_list), buffer_size - 1);
        buffer[buffer_size - 1] = '\0';

        changed = 1;
      }
    }

    return changed;

  #else

    return 0;

  #endif
}

/**************************************************************/
/* browser_find_match_backwards()                             */
/*                                                            */
/* Once browser_find_matching_url() has made a list of hits   */
/* in the match_list block you gave it a flex anchor for, you */
/* can step backwards through the list by giving a URL from   */
/* the block in a buffer.                                     */
/*                                                            */
/* Parameters: A flex_ptr pointing to a block with the match  */
/*             list in it;                                    */
/*                                                            */
/*             Pointer to the buffer holding the search       */
/*             string - a URL already in the match buffer;    */
/*                                                            */
/*             Length of the buffer.                          */
/*                                                            */
/* Returns:    1 if the item was found (the buffer contents   */
/*             will be updated), else 0.                      */
/**************************************************************/

int browser_find_match_backwards(flex_ptr match_list, char * buffer, int buffer_size)
{
  if (match_list)
  {
    int offset = 0;
    int found  = 0;
    int last   = 0;

    /* Going backwards is tricky. Find the item in the URL */
    /* writeable in the match_list for the browser (if     */
    /* present). Remember the previous item at all times.  */
    /* If we find it, break out of the loop.               */

    while ((*((char **) match_list))[offset])
    {
      if (!strcmp((*((char **) match_list)) + offset, buffer))
      {
        found = 1;

        break;
      }

      last    = offset;
      offset += strlen((*((char **) match_list)) + offset) + 1;
    }

    /* If we found the URL writable contents in the match list... */

    if (found)
    {
      /* ...then either we have a last entry, or the thing we found */
      /* was right at the start of the match list.                  */

      if (offset > 0)
      {
        strncpy(buffer, (*((char **) match_list)) + last, buffer_size - 1);
        buffer[buffer_size - 1] = '\0';
      }
      else
      {
        /* If the item was at the start of the match list, we want to */
        /* put last match list entry into the URL writable - so skip  */
        /* forward to find it.                                        */

        offset = 0;

        while ((*((char **) match_list))[offset])
        {
          last    = offset;
          offset += strlen((*((char **) match_list)) + offset) + 1;
        }

        /* Only one item in the block */

        if (last == 0) return 0;

        strncpy(buffer, (*((char **) match_list)) + last, buffer_size - 1);
        buffer[buffer_size - 1] = '\0';
      }

      return 1;
    }
  }

  return 0;
}

/**************************************************************/
/* browser_add_match_list_entry()                             */
/*                                                            */
/* A browser can have a match_list field filled with a        */
/* pointer to a concatenated series of zero terminated        */
/* strings. The final entry in this (flex allocated) block is */
/* a zero length string. This block was originally created to */
/* store a list of matches for Ctrl+Tab URL completion.       */
/*                                                            */
/* Call this function to add an entry to the end of the       */
/* block.                                                     */
/*                                                            */
/* If the match_list block does not exist on entry then the   */
/* terminating entry will automatically be written before the */
/* string is added.                                           */
/*                                                            */
/* NULL or empty strings are ignored (except for possibly     */
/* creating the terminating entry as described above) - the   */
/* function will return claiming success, unless, of course,  */
/* the allocation for the terminating entry itself should     */
/* fail.                                                      */
/*                                                            */
/* Parameters: A flex_ptr for the match_list list to be hung  */
/*             off, typically (flex_ptr) &b->match_list;      */
/*                                                            */
/*             Pointer to the string to add.                  */
/*                                                            */
/* Returns:    1 for success, else 0. If it fails, the        */
/*             match_list list may have been destroyed (any   */
/*             entries present on entry might be lost).       */
/**************************************************************/

int browser_add_match_list_entry(flex_ptr match_list, const char * add)
{
  int old_budge;
  int old_size;
  int ulen;

  if (!match_list) return 0;

  /* If we've no match list, add a terminating zero length */
  /* string to start with                                  */

  if (!*((char **) match_list))
  {
    if (!flex_alloc(match_list, 1)) return 0;
    else (*((char **) match_list))[0] = '\0';

    #ifdef TRACE
      dprintf(("LMem", "browser_add_match_list_entry: flex_alloc match_list block for first (terminating) entry"));
      flexcount += 1;
      dprintf(("CFle", "**   flexcount: %d\n",flexcount));
    #endif
  }

  /* Exit flagging success for empty strings or NULL pointers */

  if (!add || !*add) return 1;

  /* Right, we must have a valid string to add */

  ulen = strlen(add) + 1; /* Include space for terminating byte */

  old_size = flex_size(match_list);

  if (
       !flex_extend(match_list,
                    old_size + ulen)
     )
  {
    dprintf(("LMem", "browser_add_match_list_entry: flex_extend of match_list failed!\n"));

    return 0;
  }

  #ifdef TRACE
    dprintf(("LMem", "browser_add_match_list_entry: flex_extend of match_list block to %d bytes successful", old_size + ulen));
    flexcount += ulen;
    dprintf(("CFle", "**   flexcount: %d\n",flexcount));
  #endif

  /* Lock flex whilst copying in the entry */

  old_budge = flex_set_budge(0);

  strcpy( (*((char **) match_list)) + old_size - 1, add);
  (*((char **) match_list))[old_size + ulen - 1] = '\0';

  /* Restore flex and exit, flagging success */

  flex_set_budge(old_budge);

  return 1;
}

/*************************************************/
/* browser_empty_match_list()                    */
/*                                               */
/* Free a match_list list of strings - this is   */
/* basically a flex_free, but it updates debug   */
/* information too.                              */
/*                                               */
/* Parameters: A flex_ptr that the match_list is */
/*             hung off, typically               */
/*             (flex_ptr) &b->match_list.        */
/*************************************************/

void browser_empty_match_list(flex_ptr match_list)
{
  if (match_list && *((char **) match_list))
  {
    #ifdef TRACE
      dprintf(("LMem", "browser_empty_match_list: flex_free block %p\n",match_list));
      flexcount -= flex_size(match_list);
      dprintf(("CMal", "**   flexcount: %d\n",flexcount));
    #endif

    flex_free(match_list);
  }

  return;
}

/**************************************************************/
/* browser_pointer_entering()                                 */
/*                                                            */
/* Called when the pointer goes over a browser window.        */
/* Installs a null event handler to watch over the pointer's  */
/* position relative to links on the page.                    */
/*                                                            */
/* Parameters are as standard for a Wimp event handler.       */
/**************************************************************/

int browser_pointer_entering(int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle)
{
  browser_data * b = NULL;

  /* If dragging, don't want to know about this at all (at least */
  /* for now, when drags only correspond to resizing frames)     */

  if (drag_in_progress) return 0;

  /* Quick sanity check (this can and does happen - Toolbox oddities) */

  if (!idb->self_id) return 0;

  /* Is this a browser we know about? */

  ChkError(toolbox_get_client_handle(0, idb->self_id, (void *) &b));

  if (is_known_browser(b)) register_null_claimant(Wimp_ENull, (WimpEventHandler *) browser_pointer_check, b);

  pointer_is_over = idb->self_id;

  return 0;
}

/**************************************************************/
/* browser_pointer_leaving()                                  */
/*                                                            */
/* Called when the pointer goes out of a browser window.      */
/* Deinstalls a null event handler that watched over the      */
/* pointer's position relative to links on the page.          */
/*                                                            */
/* Note that objects may be deleted and this function         */
/* wouldn't be called, so anything that goes in here should   */
/* be echoed somewhere in windows_close_browser.              */
/*                                                            */
/* Parameters are as standard for a Wimp event handler, but   */
/* only the 'self_id' field of the ID block is used, to work  */
/* out what browser the pointer has left.                     */
/**************************************************************/

int browser_pointer_leaving(int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle)
{
  browser_data * b = NULL;

  /* Quick sanity check (as for browser_pointer_entering) */

  if (!idb->self_id) return 0;

  #ifdef TRACE

    /* If the pointer is leaving, we should know what it was over */

    // (Or should we? It often claims there's a mismatch, but this could
    // be just down to the Wimp's unreliable Pointer Entering / Pointer
    // Leaving event delivery).

    if (idb->self_id != pointer_is_over)
    {
      erb.errnum = Utils_Error_Custom_Normal;
      sprintf(erb.errmess,
              "Existing pointer_is_over ID %08x doesn't match ID %08x given to browser_pointer_leaving",
              pointer_is_over,
              idb->self_id);

      show_error_ret(&erb);
    }

  #endif

  ChkError(toolbox_get_client_handle(0, idb->self_id, (void *) &b));

  if (is_known_browser(b))
  {
    deregister_null_claimant(Wimp_ENull, (WimpEventHandler *) browser_pointer_check, b);

    if (!drag_in_progress)
    {
      mouse_set_pointer_shape(Mouse_Shape_Normal);
      if (mouse_pointer_is_on()) toolbars_cancel_status(b, Toolbars_Status_LinkTo);

      b->pointer_over = NULL;
    }

    pointer_is_over = NULL_ObjectId;

    return 1;
  }

  pointer_is_over = NULL_ObjectId;

  return 0;
}

/**************************************************************/
/* browser_pointer_over_deleted()                             */
/*                                                            */
/* Checks to see if the pointer is over an object that has    */
/* just been deleted, and if so, deregisters any              */
/* pointer-related event handlers associated with it.         */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the window / object.                           */
/**************************************************************/

void browser_pointer_over_deleted(browser_data * b)
{
  if (pointer_is_over && pointer_is_over == b->self_id)
  {
    deregister_null_claimant(Wimp_ENull, (WimpEventHandler *) browser_pointer_check, b);
    mouse_set_pointer_shape(Mouse_Shape_Normal);
  }
}

/**************************************************************/
/* browser_pointer_check()                                    */
/*                                                            */
/* Checks the pointer position relative to any links on the   */
/* page; if it is over one, the pointer shape is changed and  */
/* the status bar updated. Alternatively, it is changed back  */
/* to the normal pointer shape and the status bar put back to */
/* its Ready state.                                           */
/*                                                            */
/* This function will also change the pointer to a shape      */
/* indicating frame borders may be dragged to resize them,    */
/* where appropriate.                                         */
/*                                                            */
/* Parameters are as for a standard Wimp event handler,       */
/* though only browser_data * handle is of interest (it       */
/* points to a browser_data struct relevant to the window in  */
/* question).                                                 */
/*                                                            */
/* The function may be used as a NULL handler, so never       */
/* return 1 from it (you'll claim the null event - this is    */
/* Bad).                                                      */
/**************************************************************/

int browser_pointer_check(int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle)
{
  int                       changed;
  HStream                 * tp = NULL;
  WimpGetPointerInfoBlock   p;

  /* If we're dragging, Wimp_GetPointerInfo returns an error or the */
  /* browser we're checking the pointer for isn't the same window   */
  /* that the pointer is over, exit.                                */

  if (drag_in_progress)                         return 0;
  if (wimp_get_pointer_info(&p))                return 0;
  if (p.window_handle != handle->window_handle) return 0;

  /* If this browser has children, we must be over frame borders */

  if (handle->nchildren && !choices.fixed_pointer)
  {
    int row, col;

    if (!frames_find_pointer_in_frameset(handle,
                                         p.x,
                                         p.y,
                                         &row,
                                         &col,
                                         NULL,
                                         NULL,
                                         0))
    {
      if      (row > 0   && col < 0)   mouse_set_pointer_shape(Mouse_Shape_UD);
      else if (row < 0   && col > 0)   mouse_set_pointer_shape(Mouse_Shape_LR);
      else if (row > 0   && col > 0)   mouse_set_pointer_shape(Mouse_Shape_UDLR);
      else if (row == -2 || col == -2) mouse_set_pointer_shape(Mouse_Shape_NoResize);
      else                             mouse_set_pointer_shape(Mouse_Shape_Normal);
    }

    return 0;
  }

  /* Find the token that the pointer is over */

  tp = browser_get_pointer_token(handle,&p,NULL,NULL);

  if (
       choices.highlight_links      &&
       tp                           &&
       CanBeSelected(tp)            &&
       mouse_pointer_is_on()        &&
       !redraw_selected(handle, tp)
     )
  {
    browser_clear_selection(handle, 0);
    browser_select_token(handle, tp, 0);
  }

  /* Is this an image map? If so, have the coordinates of the pointer */
  /* over the map changed?                                            */

  if (tp && (tp->type & (TYPE_ISCLIENTMAP | TYPE_ISMAP)))
  {
    int nx, ny;

    /* Find out which pixel the pointer is over */

    ChkError(image_return_click_offset(handle, tp, &p, &nx, &ny));

    if (nx != handle->map_x || ny != handle->map_y)
    {
      handle->map_x = nx;
      handle->map_y = ny;
      changed       = 1;
    }
    else changed = 0;
  }

  /* Otherwise, work out if we've changed from the token address. */

  else changed = (tp != handle->pointer_over);

  /* Sometimes pointer_over has to be zeroed because a token */
  /* list is getting freed, e.g. at the beginning of a new   */
  /* fetch. In this case, we need to always restore the      */
  /* pointer shape if tp is NULL.                            */

  if (tp == NULL) changed = 1;

  /* If this isn't the same as the token the pointer */
  /* was last recorded as being over...              */

  if (changed)
  {
    handle->pointer_over = tp;

    if (!choices.fixed_pointer)
    {
      /* If the Choices say the pointer can change shape, */
      /* and the pointer is over an identified token,     */
      /* set the pointer to ptr_link. Else restore the    */
      /* pointer to its normal shape.                     */

      if (
           tp &&
           (
             (tp->type & TYPE_ISCLIENTMAP) ||
             (ISLINK(tp))
           )
         )
      {
        int dealt_with = 0;

        /* Client side map */

        if (tp->type & TYPE_ISCLIENTMAP)
        {
          char * url;

          /* Find out what we're over - affects the pointer shape, you see... */

          csim_return_info(handle,
                           tp,
                           handle->map_x,
                           handle->map_y,
                           &url,
                           NULL,
                           NULL);

          /* Use a Link pointer for areas defined in the map */

          if (url && *url)
          {
            mouse_set_pointer_shape(Mouse_Shape_Link);
            dealt_with = 1;
          }
        }

        /* For anything which isn't a client side map, we must have */
        /* an anchor.                                               */

        if (!dealt_with && tp->anchor && *tp->anchor)
        {
          /* If this is a server side map, use the Map pointer */

          if (tp->type & TYPE_ISMAP)
          {
            mouse_set_pointer_shape(Mouse_Shape_Map);
          }

          /* Otherwise, use the normal Link pointer */

          else
          {
            mouse_set_pointer_shape(Mouse_Shape_Link);
          }

          dealt_with = 1;
        }

        /* If we've still not worked out what this is, cancel any */
        /* LinkTo message (e.g. over a client side image map with */
        /* no alternative URLs and not on any area defined by the */
        /* map itself).                                           */

        if (!dealt_with)
        {
          if (handle->pointer_over != NULL)
          {
            handle->pointer_over = NULL;
            mouse_set_pointer_shape(Mouse_Shape_Normal);
          }
        }
      }

      else if (
                tp                     &&
                tp->tagno == TAG_INPUT &&
                HtmlINPUTtype(tp) == inputtype_IMAGE
              )
              mouse_set_pointer_shape(Mouse_Shape_Link);
      else
      {
        if (handle->pointer_over != NULL)
        {
          mouse_set_pointer_shape(Mouse_Shape_Normal);
          handle->pointer_over = NULL;
        }
      }
    }

    /* If the mouse pointer is on, then update the status bar */
    /* to reflect the link it is over (or cancel a LinkTo     */
    /* message if it has moved off a link),                   */

    if (mouse_pointer_is_on())
    {
      if (handle->pointer_over) toolbars_update_status(handle, Toolbars_Status_LinkTo);
      else                      toolbars_cancel_status(handle, Toolbars_Status_LinkTo);
    }
  }

  return 0;
}

/**************************************************************/
/* browser_get_pointer_token()                                */
/*                                                            */
/* Returns the token number that the pointer is over (if any) */
/* and an X and Y offset into the line chunk representing     */
/* that token.                                                */
/*                                                            */
/* Parameters: Pointer to a browser_data struct for the       */
/*             window the pointer is over;                    */
/*                                                            */
/*             Pointer to a block describing the pointer      */
/*             condition;                                     */
/*                                                            */
/*             Pointer to an int, in which the X offset into  */
/*             the chunk is placed;                           */
/*                                                            */
/*             Same for the Y offset.                         */
/*                                                            */
/* Returns:    Address of the token the pointer is over, or   */
/*             NULL for unknown / none.                       */
/*                                                            */
/* Assumes:    The pointers to the ints for the X and Y       */
/*             offsets *can* be NULL.                         */
/**************************************************************/

HStream * browser_get_pointer_token(browser_data * b, WimpGetPointerInfoBlock * p, int * ox, int * oy)
{
  WimpGetWindowStateBlock   state;
  reformat_cell           * cell = b->cell;

  /* If we're dragging, return NULL */

  if (drag_in_progress) return NULL;

  /* No point proceeding if there are no lines */

  if (!cell->ldata) return NULL;

  /* No point searching the tokens if we're not over the right window and */
  /* then only in the display area of that window.                        */

  if (b->window_handle != p->window_handle || p->icon_handle < -1) return NULL;

  /* Return 0 if there's an error getting the window's state information */

  state.window_handle = p->window_handle;
  if (wimp_get_window_state(&state)) return NULL;

  return browser_get_pointer_token_r(b, cell, p, &state, ox, oy);
}

/**************************************************************/
/* browser_get_pointer_token_r()                              */
/*                                                            */
/* Recursive back-end to browser_get_pointer_token.           */
/*                                                            */
/* Parameters: Pointer to a browser_data struct for the       */
/*             window the pointer is over;                    */
/*                                                            */
/*             Pointer to a reformat_cell struct holding the  */
/*             line/chunk data to check against the pointer   */
/*             position;                                      */
/*                                                            */
/*             Pointer to a block describing the pointer      */
/*             condition;                                     */
/*                                                            */
/*             A WimpGetWindowStateBlock pointer where the    */
/*             block contains details of the browser window;  */
/*                                                            */
/*             Pointer to an int, in which the X offset into  */
/*             the chunk is placed;                           */
/*                                                            */
/*             Same for the Y offset.                         */
/*                                                            */
/* Returns:    As browser_get_pointer_token.                  */
/*                                                            */
/* Assumes:    As browser_get_pointer_token.                  */
/**************************************************************/

static HStream * browser_get_pointer_token_r(browser_data * b, reformat_cell * cell, WimpGetPointerInfoBlock * p,
                                             WimpGetWindowStateBlock * state, int * ox, int * oy)
{
  int x, y, line;

  /* Convert the pointer's screen x and y coordinates to window coordinatess */

  x = coords_x_toworkarea(p->x, (WimpRedrawWindowBlock *) state);
  y = coords_y_toworkarea(p->y, (WimpRedrawWindowBlock *) state);

  /* Find the line that the pointer is over */

  line = browser_line_at_y(b, cell, y);
  if (line < 0) return 0;

  /* Convert the x coordinate to millipoints */

  convert_to_points(x, &x);

  if (ox) *ox = 0;
  if (oy) *oy = 0;

  /* Proceed only if the line has some chunks associated with it */

  if (cell->ldata[line].n)
  {
    int       cx, n, i;
    HStream * tp;

    /* Find the token's address for the first chunk on the line, */
    /* work out where its X coordinate should be and compare     */
    /* this to the pointer X. If the pointer X is less than the  */
    /* line X, the pointer lies to the left of all the chunks so */
    /* exit here with 0.                                         */

    tp = cell->cdata[cell->ldata[line].chunks].t;

    cx = redraw_start_x(b,
                        cell,
                        tp,
                        line);

    convert_to_points(cx, &cx);

    if (x < cx) return 0;

    /* For each chunk, take the calculated left hand coordinate */
    /* for the whole line and add the width of each chunk until */
    /* the pointer X lies to the left of the calculated coord.  */

    n = 0;
    i = cell->ldata[line].n - 1;

    while (i >= 0 && x > (cx + cell->cdata[cell->ldata[line].chunks + n].w))
    {
      cx += cell->cdata[cell->ldata[line].chunks + n].w;
      n++;
      i--;
    }

    /* If a chunk was found that the pointer is over... */

    if (i >= 0)
    {
      BBox box;

      /* Get the address of the token corresponding to the chunk */

      tp = cell->cdata[cell->ldata[line].chunks + n].t;

      #ifdef TRACE

        {
          static int tracelastchunk = -1;

          if (tracelastchunk != cell->ldata[line].chunks + n)
          {
            dprintf(("Wind", "Chunk : %d, token: &%08X\n",cell->ldata[line].chunks + n, (int) cell->cdata[cell->ldata[line].chunks + n].t));
            dprintf(("Wind", "Text  : '%s'\n",tp->text));
            dprintf(("Wind", "Style : %p\n",(void *) tp->style));

            if (ISLINK(tp))
            {
              dprintf(("Wind", "Link  : '%s'\n",tp->anchor));
              dprintf(("Wind", "Target: '%s'\n",tp->target));
            }

            tracelastchunk = cell->ldata[line].chunks + n;
          }
        }

      #endif

      /* If the token represents a table... */

      if (tp->tagno == TAG_TABLE)
      {
        /* In this case there are table streams hung from d->cdata */

        table_stream            * table     = (table_stream *) tp;
        table_row               * row       = NULL;
        table_headdata          * head      = NULL;
        reformat_cell           * cellarray = table->cells;
        reformat_cell           * c;
        WimpGetWindowStateBlock   s         = *state;
        HStream                 * over      = NULL;
        int                       tablx, tably;
        int                       lineh;
        int                       cellindex;
        int                       cellcount = 0;
        int                       cellmax   = table->ColSpan * table->RowSpan;

        /* Only proceed if there are table cells to redraw */

        if (cellarray)
        {
          /* Get the bottom left of the table in tablx, tably, */
          /* in window coords, units of millipoints.           */

          tablx = cx;
          convert_to_points(cell->ldata[line].y, &tably);

          /* Get the line height in millipoints */

          convert_to_points(cell->ldata[line].h, &lineh);

          /* Table cells aren't scrolled! */

          s.xscroll = s.yscroll = 0;

          /* Start going through the rows */

          row = table->List;

          while (row && !over && cellcount < cellmax)
          {
            head = row->List;

            while (head && !over && cellcount < cellmax)
            {
              switch (head->Tag)
              {
                case TagTableData:
                case TagTableHead:
                {
                  cellindex = head->RowOffs * table->ColSpan + head->ColOffs;

                  if (cellindex < cellmax)
                  {
                    c = &cellarray[cellindex];

                    /* No point proceeding without lines to scan */

                    if (c->nlines)
                    {
                      /* Set the visible area BBox to be that of the current cell */
                      /* (this will be in millipoint window coords)               */

                      s.visible_area.xmin = tablx + c->x;
                      s.visible_area.ymin = tably + c->y + lineh - c->cellheight;
                      s.visible_area.xmax = s.visible_area.xmin + c->cellwidth  - 1;
                      s.visible_area.ymax = s.visible_area.ymin + c->cellheight - 1;

                      /* Convert the above to OS units, then to screen coords */

                      convert_box_to_os(&s.visible_area, &s.visible_area);
                      coords_box_toscreen(&s.visible_area, (WimpRedrawWindowBlock *) state);

                      /* Recursive call */

                      over = browser_get_pointer_token_r(b, c, p, &s, ox, oy);

                      /* If something has been found, may need to fill in ox and oy */

                      if (over)
                      {
                        /* If an address of an int to return Y information to was given... */

                        if (oy)
                        {
                          /* Set the int to hold the distance from the top of the line */
                          /* that the pointer was at.                                  */

                          convert_to_os(lineh, oy);
                          *oy -= (p->y - s.visible_area.ymin);

                          if (*oy < 0) *oy = 0;
                          if (*oy > s.visible_area.ymax) *oy = s.visible_area.ymax;
                        }

                        /* Similarly for X information, get the X offset into the chunk */

                        if (ox)
                        {
                          *ox = p->x - s.visible_area.xmin;

                          if (ISLINK(over)) *ox -= over->maxlen * 2;

                          if (*ox < 0) *ox = 0;
                          if (*ox > s.visible_area.xmax) *ox = s.visible_area.xmax;
                        }
                      }

                    /* Closure of 'if (c->nlines)' */
                    }

                  /* Closure of 'if (cellindex < cellmax)' */
                  }

                /* Closure of specific 'case' item */
                }
                break;

              /* Closure of 'switch (head->Tag)' */
              }

              cellcount++;

              head = head->Next;

            /* Closure of 'while (head)' */
            }

            row = row->Next;

          /* Closure of 'while (row)' */
          }

        /* Closure of 'if (cellarray)' */
        }

        return over;

      /* Closure of 'if (tp->tagno == TAG_TABLE)' */
      }

      /* If the token represents an image... */

      else if (
                (tp->style & IMG) ||
                (ISOBJECT(tp))    ||
                (
                  tp->tagno == TAG_INPUT &&
                  HtmlINPUTtype(tp) == inputtype_IMAGE
                )
              )
      {
        int brdr = 0;
        int lox;
        int loy;

        if (ISOBJECT(tp)) reformat_get_object_size(b, tp, &box);
        else              reformat_get_image_size (b, tp, &box);

        /* Correct for HSPACE / VSPACE */

        box.xmin += HtmlOBJECThspace(tp) * 2; /* 1 'web pixel' = 2 OS units */
        box.ymin += HtmlOBJECTvspace(tp) * 2;
        box.xmax -= HtmlOBJECThspace(tp) * 2;
        box.ymax -= HtmlOBJECTvspace(tp) * 2;

        /* Correct for the border size if the image is a link, */
        /* or if this is an Object.                            */

        if (ISLINK(tp) && (tp->style & IMG)) brdr = tp->maxlen * 2;
        else if (ISOBJECT(tp))               brdr = HtmlOBJECTborder(tp) * 2;

        if (brdr)
        {
          box.xmin += brdr;
          box.ymin += brdr;
          box.xmax -= brdr;
          box.ymax -= brdr;
        }

        /* Because of space around image maps, we MUST have the pointer */
        /* inside the actual image, not over its border or h/vspace, as */
        /* otherwise we can get invalid coordinates for the image map.  */

        loy = (cell->ldata[line].y + cell->ldata[line].b + box.ymax) - y;

        if (loy < 0 || loy >= (box.ymax - box.ymin)) return NULL;

        lox = x - cx;
        convert_to_os(lox, &lox);
        lox -= box.xmin;

        if (ISLINK(tp)) lox -= tp->maxlen * 2;
        if (lox < 0 || lox >= (box.xmax - box.xmin)) return NULL;
      }
      else
      {
        /* The token does not represent an image, and so is text. */

        box.xmin = 0;

        /* Convert the width of the line chunk to OS units */

        convert_to_os(cell->cdata[cell->ldata[line].chunks + n].w, &box.xmax);

        /* Set the Y coordinates of the BBox structure to the base */
        /* line and base line plus height of the chunk.            */

        box.ymin = -cell->ldata[line].b;
        box.ymax =  cell->ldata[line].h - cell->ldata[line].b;
      }

      /* If an address of an int to return Y information to was given... */

      if (oy)
      {
        /* Set the int to hold the distance from the bottom of the line */
        /* that the pointer was at.                                     */

        *oy = (cell->ldata[line].y + cell->ldata[line].b + box.ymax) - y;

        if (*oy < 0) *oy = 0;
        if (*oy >= (box.ymax - box.ymin)) *oy = box.ymax - box.ymin - 1;
      }

      /* Similarly for X information, get the X offset into the chunk */

      if (ox)
      {
        *ox = x - cx;
        convert_to_os(*ox, ox);
        *ox = *ox - box.xmin;

        if (ISLINK(tp)) *ox -= tp->maxlen * 2;
        if (*ox < 0) *ox = 0;
        if (*ox >= (box.xmax - box.xmin)) *ox = box.xmax - box.xmin - 1;
      }

      /* Return the token address */

      return cell->cdata[cell->ldata[line].chunks + n].t;
    }
  }

  return NULL;
}

/**************************************************************/
/* browser_line_at_y()                                        */
/*                                                            */
/* Returns the line number for a given y window coordinate.   */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the window;                                    */
/*                                                            */
/*             Pointer to a reformat_cell struct holding the  */
/*             line information;                              */
/*                                                            */
/*             The y coordinate.                              */
/*                                                            */
/* Returns:    The line number in which the Y coordinate      */
/*             lives, or -1 for none / an error.              */
/**************************************************************/

int browser_line_at_y(browser_data * b, reformat_cell * cell, int y)
{
  int l;

  if (!cell) cell = b->cell;

  /* Find a line who's y coordinate is lower than the given one, */
  /* i.e. its baseline is the first one of all lines in th cell  */
  /* that lies below that coordinate.                            */

  for (l = 0; (l <= cell->nlines) && (cell->ldata[l].y > y); l++);

  /* Either we have run out of lines, or the top of the line we    */
  /* found also lies below the given coordinate, in which case the */
  /* coordinate does not lie within that line and we should not    */
  /* return its number.                                            */

  if (l >= cell->nlines || cell->ldata[l].y + cell->ldata[l].h < y) return -1;

  return l;
}

/**************************************************************/
/* browser_top_line()                                         */
/*                                                            */
/* Returns the line number displayed at the top of the        */
/* visible area of the browser window.                        */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the window;                                    */
/*                                                            */
/*             Pointer to a word into which the address of a  */
/*             reformat_cell will be returned - the given     */
/*             line lies in this cell;                        */
/*                                                            */
/*             A WimpGetWindowStateBlock pointer holding      */
/*             details of the browser window;                 */
/*                                                            */
/*             1 if the line must be wholly visible, else 0   */
/*             if it may be just partially visible.           */
/*                                                            */
/* Returns:    Directly, the number of the line displayed at  */
/*             the top of the window, or -1 for none / an     */
/*             error.                                         */
/*                                                            */
/* Assumes:    That *none* of the parameter pointers are      */
/*             NULL.                                          */
/**************************************************************/

int browser_top_line(browser_data * b, reformat_cell ** ret_cell,
                     WimpGetWindowStateBlock * s, int fully_visible)
{
  int offset_y, y, htop;

  if (!ret_cell) return -1;

  *ret_cell = NULL;

  if (!controls.swap_bars) htop = toolbars_button_height(b) + toolbars_url_height(b);
  else                     htop = toolbars_status_height(b);

  if (htop) htop += wimpt_dy();

  y = s->yscroll - htop;

  return browser_top_line_r(b, b->cell, ret_cell, &offset_y, y, fully_visible);
}

/**************************************************************/
/* browser_top_line_offset()                                  */
/*                                                            */
/* Returns the line number displayed at the top of the        */
/* visible area of the browser window, coupled with a y       */
/* offset into that line.                                     */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the window;                                    */
/*                                                            */
/*             Pointer to a word into which the address of a  */
/*             reformat_cell will be returned - the given     */
/*             line lies in this cell;                        */
/*                                                            */
/*             Pointer to an int, into which the offset, in   */
/*             OS coordinates, of the top of the line from    */
/*             the top of the visible area is given (if the   */
/*             line is fully visible this will be <= 0, else  */
/*             if part of the line is hidden off the top of   */
/*             the window it will be positive);               */
/*                                                            */
/*             A WimpGetWindowStateBlock pointer holding      */
/*             details of the browser window.                 */
/*                                                            */
/* Returns:    Directly, the number of the line displayed at  */
/*             the top of the window, or -1 for none / an     */
/*             error.                                         */
/*                                                            */
/* Assumes:    That *none* of the parameter pointers are      */
/*             NULL.                                          */
/**************************************************************/

int browser_top_line_offset(browser_data * b, reformat_cell ** ret_cell, int * offset_y, WimpGetWindowStateBlock * s)
{
  int y, htop;

  if (!ret_cell) return -1;

  *ret_cell = NULL;
  *offset_y = 0;

  if (!controls.swap_bars) htop = toolbars_button_height(b) + toolbars_url_height(b);
  else                     htop = toolbars_status_height(b);

  if (htop) htop += wimpt_dy();

  y = s->yscroll - htop;

  return browser_top_line_r(b, b->cell, ret_cell, offset_y, y, 0);
}

/**************************************************************/
/* browser_top_line_r()                                       */
/*                                                            */
/* Recursive back-end to browser_top_line.                    */
/*                                                            */
/* NOTE! This function RELIES on a table being in a line of   */
/* its own at all times. Were the reformatter to generate     */
/* tables with chunks before them in the line list, the       */
/* routine will fail to scan the table contents in that line  */
/* (so it may not find the top line as requested).            */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the window;                                    */
/*                                                            */
/*             Pointer to a reformat_cell struct holding the  */
/*             cells to scan;                                 */
/*                                                            */
/*             Pointer to a word into which the address of a  */
/*             reformat_cell will be returned - the given     */
/*             line lies in this cell;                        */
/*                                                            */
/*             Pointer to an int, into which the offset, in   */
/*             OS coordinates, of the top of the line from    */
/*             the top of the visible area is given (if the   */
/*             line is fully visible this will be <= 0, else  */
/*             if part of the line is hidden off the top of   */
/*             the window it will be positive);               */
/*                                                            */
/*             Page y coordinate at top of window (taking     */
/*             into account the scroll position, any          */
/*             toolbars, and so forth);                       */
/*                                                            */
/*             1 if the line must be wholly visible, else 0   */
/*             if it may be just partially visible.           */
/*                                                            */
/* Assumes:    As browser_top_line.                           */
/**************************************************************/

static int browser_top_line_r(browser_data * b, reformat_cell * cell, reformat_cell ** ret_cell,
                              int * offset_y, int y, int fully_visible)
{
  int l;

  if (!cell) cell = b->cell;

  if (!cell->nlines || !cell->ldata || !cell->cdata) return -1;

  l = 0;

  /* Find the line. Don't worry about the fully_visible flag yet. */

  while (
          l < cell->nlines &&
          cell->ldata[l].y > y
        )
        l++;

  /* If l >= number of lines, nothing was found */

  if (l >= cell->nlines) return -1;
  else
  {
    HStream * first_token = cell->cdata[cell->ldata[l].chunks].t;

    *ret_cell = cell;

    /* Otherwise, does the line hold a table? (This is the check that */
    /* relies on tables sitting alone in their own lines as described */
    /* in the comments at the top of the function definition). If not */
    /* then check the fully_visible flag and make sure the current    */
    /* line is wholly visible if the flag requires it. If not, the    */
    /* next line must be - if there is one.                           */

    if (first_token->tagno != TAG_TABLE)
    {
      if (fully_visible)
      {
        if (cell->ldata[l].y + cell->ldata[l].h > y)
        {
          /* This line isn't wholly visible, but we already know from the */
          /* 'while' loop above that the bottom edge is in the visible    */
          /* area. So the next line must be wholly visible.               */

          l++;

          if (l >= cell->nlines) return -1;
          else
          {
            *offset_y = y - cell->ldata[l].y - cell->ldata[l].h;
            return l;
          }
        }
      }
    }
    else
    {
      table_stream   * table     = (table_stream *) first_token;
      table_row      * row       = NULL;
      table_headdata * head      = NULL;
      reformat_cell  * c         = NULL;
      reformat_cell  * cellarray = table->cells;
      int              cellmax   = table->ColSpan * table->RowSpan;
      int              cellcount = 0;
      int              cellindex;

      /* Proceed if the cell array can be found */

      if (cellarray)
      {
        row = table->List;

        while (row && cellcount < cellmax)
        {
          head = row->List;

          while (head && cellcount < cellmax)
          {
            switch (head->Tag)
            {
              case TagTableData:
              case TagTableHead:
              {
                /* Find the reformat_cell structure for this table cell */

                cellindex = head->RowOffs * table->ColSpan + head->ColOffs;

                if (cellindex < cellmax)
                {
                  c = &cellarray[cellindex];

                  /* If it has lines, recursively call this function to find the */
                  /* cell line at the top of the window.                         */

                  if (c->nlines)
                  {
                    int cell_y, inner_l;

                    /* Lines in the cell have y coordinates relative to the cell's */
                    /* top edge. So first work out where that is.                  */

                    convert_to_os(c->y, &cell_y);
                    cell_y += cell->ldata[l].y + cell->ldata[l].h;

                    /* We must, in effect, offset all line y coordinates within this */
                    /* cell by this amount.                                          */

                    inner_l = browser_top_line_r(b, c, ret_cell, offset_y, y - cell_y, fully_visible);

                    /* If a line can be found inside this cell then return it immediately, */
                    /* rather than worrying about the other cells. Otherwise, continue     */
                    /* scanning cells. Since table cells are arranged left right, top to   */
                    /* bottom, and we are looking for the top line, this will work OK.     */

                    if (inner_l >= 0) return inner_l;
                  }
                }
              }
              break;
            }

            cellcount ++;

            head = head->Next;

          /* Closure of 'while (head && ...)' */
          }

          row = row->Next;

        /* Closure of 'while (row && ...)' */
        }

      /* Closure of 'if (cellarray)' */
      }

    /* Closure of 'if (first_token->tagno == TAG_TABLE)' */
    }

  /* Closure of 'else' case for 'if (l >= cell->nlines)' */
  }

  *offset_y = y - cell->ldata[l].y - cell->ldata[l].h;
  return l;
}

/**************************************************************/
/* browser_redraw_border()                                    */
/*                                                            */
/* Does a series of Wimp_ForceRedraw calls that cause a       */
/* border of 4 OS units around a given image to be redrawn.   */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the image;                                     */
/*                                                            */
/*             Pointer to a token representing the image.     */
/**************************************************************/

static _kernel_oserror * browser_redraw_border(browser_data * b, HStream * token)
{
  BBox                    box;
  int                     more, x, y;
  WimpGetWindowStateBlock state;
  WimpRedrawWindowBlock   redraw;
  int                     user_hspace, user_vspace, user_border;
  int                     os_hspace,   os_vspace,   os_border;

  /* Get the current window state */

  state.window_handle = redraw.window_handle = b->window_handle;
  RetError(wimp_get_window_state(&state));

  /* Find the bounding box of the image including the border */
  /* specified in HTML, if any.                              */

  RetError(reformat_get_image_size(b, token, &box));

  /* Find the x and y coordinates of the image's bottom left hand corner */

  if (image_get_token_image_position(b, token, &x, &y)) return NULL;

  /* Correct for HSPACE / VSPACE, the bottom left corner and the width */
  /* of the selection border.                                          */

  if (token->style & IMG)
  {
    user_hspace = scale_web_to_user (b, HtmlIMGhspace(token));
    user_vspace = scale_web_to_user (b, HtmlIMGvspace(token));
  }
  else /* INPUT TYPE="image" */
  {
    user_hspace = 0;
    user_vspace = 0;
  }

  user_border = scale_os_to_user (b, Redraw_SelectedBorder_OS);
  os_hspace   = scale_user_to_os (b, user_hspace);
  os_vspace   = scale_user_to_os (b, user_vspace);
  os_border   = scale_user_to_os (b, user_border);

  /* X and Y were set by redraw_image_and_border() in Redraw.c, and */
  /* included any baseline or horizontal offsets in the output from */
  /* reformat_get_image_size() (see above) already. So we need to   */
  /* move the bounding box back to an origin of (0,0) to avoid      */
  /* including the offsets twice, achieving the wrong result.       */

  box.ymax -= box.ymin;
  box.ymin = 0;
  box.xmax -= box.xmin;
  box.xmin = 0;

  /* Now offset by X and Y, move inside the spacers and expand a bit for */
  /* the selection highlight border.                                     */

  box.xmin   += x + os_hspace - os_border;
  box.ymin   += y + os_vspace - os_border;
  box.xmax   += x - os_hspace + os_border;
  box.ymax   += y - os_vspace + os_border;

  /* Get ready for the redraw loops */

  redraw.window_handle = state.window_handle;
  redraw.xscroll       = state.xscroll;
  redraw.yscroll       = state.yscroll;

  /* Bottom edge */

  redraw.visible_area.xmin = box.xmin, redraw.visible_area.ymin = box.ymin;
  redraw.visible_area.xmax = box.xmax, redraw.visible_area.ymax = box.ymin + os_border;

  RetError(wimp_update_window(&redraw, &more));
  if (more) RetError(redraw_draw(b, &redraw, NULL, 0, token)); /* Calls Wimp_GetRectangle for us */

  /* Left edge */

  redraw.visible_area.xmin = box.xmin,             redraw.visible_area.ymin = box.ymin;
  redraw.visible_area.xmax = box.xmin + os_border, redraw.visible_area.ymax = box.ymax;

  RetError(wimp_update_window(&redraw, &more));
  if (more) RetError(redraw_draw(b, &redraw, NULL, 0, token));

  /* Top edge */

  redraw.visible_area.xmin = box.xmin, redraw.visible_area.ymin = box.ymax - os_border;
  redraw.visible_area.xmax = box.xmax, redraw.visible_area.ymax = box.ymax;

  RetError(wimp_update_window(&redraw, &more));
  if (more) RetError(redraw_draw(b, &redraw, NULL, 0, token));

  /* Right edge */

  redraw.visible_area.xmin = box.xmax - os_border, redraw.visible_area.ymin = box.ymin;
  redraw.visible_area.xmax = box.xmax,             redraw.visible_area.ymax = box.ymax;

  RetError(wimp_update_window(&redraw, &more));

  if (more) return redraw_draw(b, &redraw, NULL, 0, token);
  else      return NULL;
}

/**************************************************************/
/* browser_update()                                           */
/*                                                            */
/* Updates a window contents, using calls to                  */
/* Wimp_UpdateWindow (so this can be used for animations,     */
/* etc., as the Wimp won't clear the redraw area first).      */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the window;                                    */
/*                                                            */
/*             Pointer to a RedrawWindow block, with details  */
/*             of the area to redraw within it;               */
/*                                                            */
/*             1 to not draw backgrounds, or 0 to allow them  */
/*             to be drawn;                                   */
/*                                                            */
/*             0 to draw tokens normally, else a pointer to a */
/*             token which is not to have its contents        */
/*             redrawn, except as a selection indicator (see  */
/*             redraw_draw for more).                         */
/**************************************************************/

_kernel_oserror * browser_update
                  (
                    browser_data          * restrict b,
                    WimpRedrawWindowBlock * restrict r,
                    int                              noback,
                    const HStream         * restrict nocontent
                  )
{
  int more;

  r->window_handle = b->window_handle;

  wimp_update_window(r, &more);

  if (more) return redraw_draw(b, r, NULL, noback, nocontent);

  return NULL;
}

/**************************************************************/
/* browser_update_token()                                     */
/*                                                            */
/* Redraws a given token, trying to minimise any flicker as   */
/* the redraw is done.                                        */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the token to redraw;                           */
/*                                                            */
/*             The token address;                             */
/*                                                            */
/*             1 to not draw backgrounds, or 0 to allow them  */
/*             to be drawn;                                   */
/*                                                            */
/*             0 to draw tokens normally, else a pointer to a */
/*             token which is not to have its contents        */
/*             redrawn, except as a selection indicator (see  */
/*             redraw_draw for more).                         */
/*                                                            */
/* Returns:    Pointer to a _kernel_oserror struct, which is  */
/*             NULL unless the actual redraw call fails - so  */
/*             if the given token does not appear to be       */
/*             represented by any line, the routine fails     */
/*             silently.                                      */
/**************************************************************/

_kernel_oserror * browser_update_token
                  (
                    browser_data  * restrict b,
                    const HStream * restrict token,
                    int                      noback,
                    const HStream * restrict nocontent
                  )
{
  token_path          * path  = NULL;
  int                   first = -1;
  int                   fchnk = -1;
  int                   last  = -1;
  int                   depth;
  const reformat_cell * cell  = NULL;
  _kernel_oserror     * e     = NULL;
  int                   x, y;

  /* Find the range of lines the token spans */

  depth = tokenutils_line_range(b, token, &first, &fchnk, &last, NULL, &path);

  /* Find out the x and y offset of the cell the */
  /* token lies in.                              */

  tokenutils_token_offset(b, path, &x, &y);

  /* If there are valid entries in the token_path structure, */
  /* need to find out what line list browser_update_token_r  */
  /* should be called on. Otherwise, it's the main line      */
  /* list.                                                   */

  cell = tokenutils_find_cell(b->cell, depth, path);

  if (path) free (path);

  if (cell)
  {
    e = browser_update_token_r(b, cell, token, first, fchnk, last, x, y, noback, nocontent);
  }
  else
  {
    e = browser_update_token_r(b, b->cell, token, first, fchnk, last, 0, 0, noback, nocontent);
  }

  return e;
}

/**************************************************************/
/* browser_update_token_r()                                   */
/*                                                            */
/* Recursive back-end to browser_update_token.                */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the token to redraw;                           */
/*                                                            */
/*             Pointer to a reformat_cell struct which holds  */
/*             the token or a table holding the token;        */
/*                                                            */
/*             First line to check in the cell;               */
/*                                                            */
/*             First chunk on the first line;                 */
/*                                                            */
/*             Last line to check in the cell;                */
/*                                                            */
/*             The token address;                             */
/*                                                            */
/*             Cell origin x (window coords);                 */
/*                                                            */
/*             Cell origin y (window coords);                 */
/*                                                            */
/*             1 to not draw backgrounds, or 0 to allow them  */
/*             to be drawn;                                   */
/*                                                            */
/*             0 to draw tokens normally, else a pointer to a */
/*             token which is not to have its contents        */
/*             redrawn, except as a selection indicator (see  */
/*             redraw_draw for more).                         */
/*                                                            */
/* Returns:    As browser_update_token.                       */
/**************************************************************/

static _kernel_oserror * browser_update_token_r
                         (
                           browser_data        * restrict b,
                           const reformat_cell *          cell,
                           const HStream       * restrict token,
                           int                            first,
                           int                            chunk,
                           int                            last,
                           int                            base_x,
                           int                            base_y,
                           int                            noback,
                           const HStream       * restrict nocontent
                         )
{
  int                     l, widen;
  WimpRedrawWindowBlock   r;
  _kernel_oserror       * e;
  int                     x, y;

  if (!cell) cell = b->cell;

  /* Items that may have borders drawn around them need to have */
  /* the redraw area widened to cope with that.                 */

  if ((token->style & FORM) || (token->style & IMG)) widen = 4;
  else                                               widen = 0;

  if (first >= 0)
  {
    for (l = first; l <= last; l++)
    {
      /* Get the y coordinate of the bottom of the line into y */

      y = base_y + cell->ldata[l].y;

      /* Get the left hand x coordinate in x - the given token for the */
      /* first line, or the left hand edge for subsequent ones.        */

      if (l == first) x = base_x + redraw_token_x(b, cell, token, l);
      else            x = base_x + redraw_start_x(b, cell, cell->cdata[cell->ldata[l].chunks].t, l);

      /* Fill in the redraw block's visible area field */

      r.visible_area.xmin = x - 4;
      r.visible_area.ymin = y - widen;

      /* xmax is up to the last chunk's right hand edge for anything but */
      /* the last line, when we go as far as chunks that use this token. */

      if (l == last)
      {
        int w = 0, c, mc;

        /* For the first line, the chunk to start counting on will be  */
        /* defined by the given token; otherwise, it will be the first */
        /* one on the line.                                            */

        if (l == first) c = chunk;
        else            c = cell->ldata[l].chunks;

        /* Count up to either a chunk which doesn't use the given token */
        /* or is the last chunk on the line                             */

        mc = cell->ldata[l].chunks + cell->ldata[l].n;

        while (c < mc && cell->cdata[c].t == token) w += cell->cdata[c].w, c++;

        /* Convert to OS units and add to the left hand edge */

        convert_to_os(w, &w);

        r.visible_area.xmax = w + r.visible_area.xmin + 8;
      }
      else
      {
        /* Width of the last chunk */

        convert_to_os(cell->cdata[cell->ldata[l].chunks + cell->ldata[l].n - 1].w, &r.visible_area.xmax);

        /* Add the left hand edge of that chunk */

        r.visible_area.xmax += base_x + redraw_chunk_x(b, cell, cell->ldata[l].chunks + cell->ldata[l].n - 1, l) + 8;
      }

      /* ymax is the bottom line plus the line height */

      r.visible_area.ymax = r.visible_area.ymin + cell->ldata[l].h + widen * 2 - (widen == 0);

      e = browser_update(b, &r, noback, nocontent);
      if (e) return e;
    }
  }

  return NULL;
}

/**************************************************************/
/* browser_update_bottom()                                    */
/*                                                            */
/* Redraws the browser window, from a given work area y       */
/* coordinate downwards.                                      */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the window to redraw;                          */
/*                                                            */
/*             The y coordinate to redraw from.               */
/**************************************************************/

_kernel_oserror * browser_update_bottom(browser_data * b, int top_y)
{
  int                       more;
  _kernel_oserror         * e;
  WimpRedrawWindowBlock     r;

  dprintf(("Redr", "\nbrowser_update_bottom: Called, -top_y = %d\n",-top_y));

  /* Fill in the visible area and scroll info from the */
  /* GetWindowState call                               */

  r.window_handle = b->window_handle;

  /* Due to the way the veneer works and the structure is defined, */
  /* the visible_area here is actually the redraw block. The call  */
  /* to wimp_update_window will exit eventually through the        */
  /* Wimp_GetRectangle SWI, which fills in 'r' properly.           */

  r.visible_area.xmin = -0x1000001; /* Big numbers to ensure the whole */
  r.visible_area.xmax = 0x1000000;  /* work area width is redrawn      */

  r.visible_area.ymin = -0x1000001; /* Go right to the bottom          */
  r.visible_area.ymax = top_y;

  /* The redraw loop itself */

  wimp_update_window(&r,&more);

  /* 'r' now holds information that more sensibly relates to its field names... */

  if (more)
  {
    e = redraw_draw(b, &r, NULL, 0, 0);

    if (e) return e;
  }

  #ifdef TRACE

    else dprintf(("Redr", "\nbrowser_update_bottom: Nothing to redraw\n"));

    dprintf(("Redr", "\nbrowser_update_bottom: Successful\n"));

  #endif

  return NULL;
}

/**************************************************************/
/* browser_highlight_token()                                  */
/*                                                            */
/* Redraws a given token in a highlighted state; see          */
/* redraw_token_colour in Redraw.c for the colour it will be  */
/* drawn as.                                                  */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the token;                                     */
/*                                                            */
/*             The token address.                             */
/**************************************************************/

void browser_highlight_token(browser_data * b, HStream * token)
{
  int noback = 0;

  /* Ensure all current highlighting is cleared and remember  */
  /* that this token has been highlighted in the browser_data */
  /* structure.                                               */

  browser_clear_highlight(b, 1);
  b->highlight=token;

  /* If the token represents a link, that link may be made of several */
  /* tokens (e.g. a heading where font sizes were used to make the    */
  /* first letters bigger, or where there is a style change in the    */
  /* middle to highlight some search result for a Web search engine,  */
  /* say). So need to find the first of the list of tokens with the   */
  /* same anchor, and the last.                                       */

  if ((token->style & A) && token->anchor)
  {
    HStream * top = NULL;
    HStream * end = NULL;

    tokenutils_anchor_range(b, token, &top, &end);

    /* Now redraw between those two tokens */

    if (top && end)
    {
      while (top != end->next)
      {
        #ifndef ANTI_TWITTER
          if (
               b->background_image < 0 ||
               (
                 (top->style & IMG) &&
                 (
                   (
                     b->show_foreground               &&
                     image_token_plot_started(b, top)
                   )
                   || b->displayed == Display_External_Image
                 )
               )
             )
             noback = 1;

          else noback = 0;
        #endif

        b->highlight = top;
        browser_update_token(b, top, noback, 0);
        top = top->next;
      }
    }
    else
    {
      /* Something went wrong above, or there is only one token  */
      /* for this link - so use quicker redraw code.             */

      browser_update_token(b, token, noback, 0);
    }
  }

  /* If the token is not a link, just redraw it, as asked. */

  else browser_update_token(b, token, noback, 0);
}

/**************************************************************/
/* browser_clear_highlight()                                  */
/*                                                            */
/* Removes a highlight shown using the                        */
/* browser_highlight_token function, with an optional delay   */
/* before doing so.                                           */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the token;                                     */
/*                                                            */
/*             1 to wait first, else 0.                       */
/**************************************************************/

void browser_clear_highlight(browser_data * b, int wait)
{
  int noback = 0;

  /* If nothing's highlighted, don't need to do anything else! */

  if (b->highlight)
  {
    HStream * token;

    /* Clear the highlight, possibly waiting 20 centiseconds first. */

    token = b->highlight;
    b->highlight = NULL;

    if (wait)
    {
      int start_time, now;

      _swix(OS_ReadMonotonicTime, _OUT(0), &start_time);
      now = start_time;

      while (now - start_time <= 20) _swix(OS_ReadMonotonicTime, _OUT(0), &now);
    }

    /* For details on this, see browser_highlight_token. Basically, */
    /* may need to redraw several tokens if the highlighted one was */
    /* a link, if they all represent the same link.                 */

    if ((token->style & A) && token->anchor)
    {
      HStream * top = NULL;
      HStream * end = NULL;

      tokenutils_anchor_range(b, token, &top, &end);

      /* Now redraw between those two tokens */

      if (top && end)
      {
        while (top != end->next)
        {
          #ifndef ANTI_TWITTER
            if (
                 b->background_image < 0 ||
                 (
                   (top->style & IMG) &&
                   (
                     (
                       b->show_foreground               &&
                       image_token_plot_started(b, top)
                     )
                     || b->displayed == Display_External_Image
                   )
                 )
               )
               noback = 1;

            else noback = 0;
          #endif

          browser_update_token(b, top, noback, 0);
          top = top->next;
        }
      }
      else
      {
        /* Something went wrong above, or there is only one token  */
        /* for this link - so use quicker redraw code.             */

        browser_update_token(b, token, noback, 0);
      }
    }
    else browser_update_token(b, token, noback, 0);
  }
}

/**************************************************************/
/* browser_flash_token()                                      */
/*                                                            */
/* 'Flashes' a token, by highlighting it with                 */
/* browser_highlight_token and then clearing the highlight    */
/* after a short delay.                                       */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the token;                                     */
/*                                                            */
/*             The token address.                             */
/**************************************************************/

void browser_flash_token(browser_data * b, HStream * token)
{
  browser_highlight_token(b, token);
  browser_clear_highlight(b, 1);
}

/**************************************************************/
/* browser_select_token()                                     */
/*                                                            */
/* Redraws a given token in a selected state.                 */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the token;                                     */
/*                                                            */
/*             The token address;                             */
/*                                                            */
/*             1 to scroll the window if needed to keep the   */
/*             token in the visible area, else 0.             */
/**************************************************************/

void browser_select_token(browser_data * b, HStream * token, int visible)
{
  int            noback   = 0;
  browser_data * ancestor = utils_ancestor(b);

  /* Ensure any selected token is deselected, and remember */
  /* that this token has been marked as selected in the    */
  /* browse_data structure.                                */

  if (ancestor->selected_owner) browser_clear_selection(ancestor->selected_owner, 0);

  ancestor->selected       = token;
  ancestor->selected_owner = b;

  /* The selected frame is always the one with the highlighted token in it */

  if (ancestor->selected_frame != b)
  {
    frames_highlight_frame(b);

    ancestor->selected_frame = b;
  }

  /* If asked to, ensure the token is visible */

  if (visible)
  {
    WimpGetWindowStateBlock s;

    s.window_handle = b->window_handle;

    if (!wimp_get_window_state(&s)) browser_ensure_visible(b, &s, token);
  }

  /* If the token represents a link, that link may be made of several */
  /* tokens (e.g. a heading where font sizes were used to make the    */
  /* first letters bigger, or where there is a style change in the    */
  /* middle to highlight some search result for a Web search engine,  */
  /* say). So need to find the first of the list of tokens with the   */
  /* same anchor, and the last.                                       */

  if ((token->style & A) && token->anchor)
  {
    HStream * top = NULL;
    HStream * end = NULL;

    tokenutils_anchor_range(b, token, &top, &end);

    /* Now redraw between those two tokens */

    if (top && end)
    {
      while (top != end->next)
      {
        #ifndef ANTI_TWITTER
          if (
               b->background_image < 0 ||
               (
                 (top->style & IMG) &&
                 (
                   (
                     b->show_foreground               &&
                     image_token_plot_started(b, top)
                   )
                   || b->displayed == Display_External_Image
                 )
               )
             )
             noback = 1;

          else noback = 0;
        #endif

        b->selected = top;

        if (
             b->show_foreground               &&
             (top->style & IMG)               &&
             (ISLINK(top))                    &&
             !top->maxlen                     && /* maxlen=0 means there's no border already there */
             image_token_plot_started(b, top)
           )
           browser_redraw_border(b, top);

        else browser_update_token(b, top, noback, 0);

        top = top->next;
      }
    }
    else
    {
      /* Something went wrong above, or there is only one token  */
      /* for this link - so use quicker redraw code.             */

      if (
           b->show_foreground                 &&
           (token->style & IMG)               &&
           (ISLINK(token))                    &&
           !top->maxlen                       && /* maxlen=0 means there's no border already there */
           image_token_plot_started(b, token)
         )
         browser_redraw_border(b, token);

      else browser_update_token(b, token, noback, 0);
    }
  }

  /* If the token is not a link, just redraw it, as asked. */

  else browser_update_token(b, token, noback, 0);

  return;
}

/**************************************************************/
/* browser_clear_selection()                                  */
/*                                                            */
/* Removes a selection shown using the browser_select_token   */
/* function, with an delay before doing so.                   */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the token;                                     */
/*                                                            */
/*             1 to wait first, else 0.                       */
/**************************************************************/

void browser_clear_selection(browser_data * b, int wait)
{
  int            noback   = 0;
  browser_data * ancestor = utils_ancestor(b);
  browser_data * owner;

  if (!ancestor) return;

  /* If nothing's selected, don't need to do anything else! */

  if (ancestor->selected)
  {
    HStream * token;

    /* Clear the selection, possibly waiting 20 centiseconds first. */

    token = ancestor->selected;
    owner = ancestor->selected_owner;

    ancestor->selected       = NULL;
    ancestor->selected_owner = NULL;

    if (wait)
    {
      int start_time, now;

      _swix(OS_ReadMonotonicTime, _OUT(0), &start_time);
      now = start_time;

      while (now - start_time <= 20) _swix(OS_ReadMonotonicTime, _OUT(0), &now);
    }

    /* For details on this, see browser_select_token. Basically, may */
    /* need to redraw several tokens if the selected one was a link, */
    /* if they all represent the same link.                          */

    if ((token->style & A) && token->anchor)
    {
      HStream * top = NULL;
      HStream * end = NULL;

      tokenutils_anchor_range(owner, token, &top, &end);

      /* Now redraw between those two tokens */

      if (top && end)
      {
        while (top != end->next)
        {
          #ifndef ANTI_TWITTER
            /* If using anti-twitter redraws, always redraw the background.   */
            /* Otherwise, redraw it unless this is a text item (well, neither */
            /* an image nor a form element) as for text items, can just       */
            /* replot the text.                                               */

            if (
                 !(top->style & IMG)  &&
                 !(top->style & FORM) &&
                 owner->background_image < 0
               )
               noback = 1;

            else noback = 0;
          #endif

          /* Images which are links and are having only the selection marker */
          /* redrawn go through a special routine.                           */

          if (
               owner->show_foreground               &&
               (top->style & IMG)                   &&
               (ISLINK(top))                        &&
               !top->maxlen                         && /* maxlen=0 means there's no border already there */
               image_token_plot_started(owner, top)
             )
             browser_redraw_border(owner, top);

          else browser_update_token(owner, top, noback, 0);

          top = top->next;
        }
      }
      else
      {
        /* Something went wrong above, or there is only one token  */
        /* for this link - so use quicker redraw code.             */

        if (
             owner->show_foreground                 &&
             (token->style & IMG)                   &&
             (ISLINK(token))                        &&
             !top->maxlen                           && /* maxlen=0 means there's no border already there */
             image_token_plot_started(owner, token)
           )
           browser_redraw_border(owner, token);

        else browser_update_token(owner, token, noback, 0);
      }
    }
    else browser_update_token(owner, token, noback, 0);
  }

  return;
}

/**************************************************************/
/* browser_show_token()                                       */
/*                                                            */
/* Shows a given token at the top of the browser window.      */
/*                                                            */
/* If the token is near the bottom of the page, then the page */
/* extent is increased so that the window may still be        */
/* scrolled to show the token at the top. Despite introducing */
/* some dead space at the page base, it gets very confusing - */
/* particularly with Find functions - to not be able to rely  */
/* on the token being actually moved to the top of the        */
/* window.                                                    */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the window - the min_height field may be       */
/*             updated;                                       */
/*                                                            */
/*             The token address;                             */
/*                                                            */
/*             Offset into the token data which the chunk     */
/*             representing the token must straddle - i.e.,   */
/*             it must start at less than or equal to this    */
/*             offset and end at greater than it;             */
/*                                                            */
/*             y shift, in OS units, to move after showing    */
/*             the token - if positive, the page will be      */
/*             scrolled so that items move vertically         */
/*             upwards, if negative it will be scrolled       */
/*             downwards.                                     */
/*                                                            */
/* Returns:    1 for success, 0 for failure.                  */
/**************************************************************/

int browser_show_token
    (
      browser_data  * restrict b,
      const HStream * restrict token,
      int                      offset,
      int                      y_shift
    )
{
  WimpGetWindowStateBlock   s;
  token_path              * path = NULL;
  const reformat_cell     * cell = NULL;
  int                       orx, ory;
  int                       c, l, topy, htop, fy;
  int                       found;
  int                       depth;

  if (!token) return 0;

  /* Find the range of lines the token spans */

  depth = tokenutils_line_range(b, token, &l, NULL, NULL, NULL, &path);

  /* Find out the x and y offset of the cell the */
  /* token lies in.                              */

  tokenutils_token_offset(b, path, &orx, &ory);

  /* If there are valid entries in the token_path structure, */
  /* need to find out what line list browser_update_token_r  */
  /* should be called on. Otherwise, it's the main line      */
  /* list.                                                   */

  cell = tokenutils_find_cell(b->cell, depth, path);

  if (path) free (path);

  if (!cell)
  {
    cell = b->cell;
    orx  = 0;
    ory  = 0;
  }

  /* Can't do anything if there are no lines in the cell */

  if (!cell->nlines || !cell->ldata || !cell->cdata) return 0;

  /* Start by checking the token isn't already at the top of the window */

  s.window_handle = b->window_handle;
  if (wimp_get_window_state(&s)) return 0;

  if (!controls.swap_bars) htop = toolbars_button_height(b) + toolbars_url_height(b);
  else                     htop = toolbars_status_height(b);

  if (htop) htop += wimpt_dy();

  topy = s.yscroll - htop;

  l = 0;
  while (l < cell->nlines && cell->ldata[l].y + cell->ldata[l].h + ory > topy) l++;

//  if (l < cell->nlines)
//  {
//    for (c = 0; c < cell->ldata[l].n; c++);
//    {
//      /* If the chunk represents the given token,                          */
//      /* its data offset is less than or equal to the offset specified, or */
//      /* its data offset plus length is greater than the offset specified, */
//      /* then we've found the token, it's already at the top so just exit  */
//      /* but flag that the routine was successful.                         */
//
//      if (
//           cell->cdata[cell->ldata[l].chunks + c].t == token &&
//           cell->cdata[cell->ldata[l].chunks + c].o <= offset &&
//           cell->cdata[cell->ldata[l].chunks + c].l + cell->cdata[cell->ldata[l].chunks + c].o > offset
//         )
//         return 1;
//    }
//  }
//
//  /* It wasn't at the top, so need to do a bit more work. */

  l  = topy  = 0;
  fy = found = 0;

  /* Loop through all the lines */

  while (l < cell->nlines && !found)
  {
    /* Set y to the coordinate of the bottom of the line above this one */

    topy = cell->ldata[l].y + cell->ldata[l].h + ory;

    /* Loop through this line's chunks */

    for (c = 0; c < cell->ldata[l].n && !found; c++)
    {
      /* Again, if the chunk represents the given token,                         */
      /* has an offset below or equal to the given offset, or                    */
      /* either has a data offset plus length greater than the offset specified  */
      /* or has zero data length,                                                */
      /* then flag that we've found the token and get the y coordinate of the    */
      /* top of this line into fy.                                               */

      if (
           cell->cdata[cell->ldata[l].chunks + c].t == token &&
           cell->cdata[cell->ldata[l].chunks + c].o <= offset &&
           (
             cell->cdata[cell->ldata[l].chunks + c].l + cell->cdata[cell->ldata[l].chunks + c].o > offset ||
             cell->cdata[cell->ldata[l].chunks + c].l == 0
           )
         )
         fy = topy, found = 1;
    }

    l++;
  }

  /* If found = 0, the loop didn't find the requested token, */
  /* so exit, flagging failure.                              */

  if (!found) return 0;

  /* Jump to the scroll position recorded in fy. */

  s.yscroll = fy + htop + y_shift + (y_shift == 0 ? 4 : 0); /* 4 -> aesthetics */

  /* Is the window extent great enough? */

  {
    BBox extent;
    int  bottom_coord;

    window_get_extent(0, b->self_id, &extent);

    bottom_coord = s.yscroll - (s.visible_area.ymax - s.visible_area.ymin);

    /* If the extent is not great enough, increase it */

    if (extent.ymin >= bottom_coord)
    {
      extent.ymin = bottom_coord;

      b->min_height = -bottom_coord;

      if (window_set_extent(0, b->self_id, &extent)) return 0;
    }
  }

  if (wimp_open_window((WimpOpenWindowBlock *) &s)) return 0;

  return 1;
}

/**************************************************************/
/* browser_ensure_visible()                                   */
/*                                                            */
/* Ensures that a given token is wholly visible in the        */
/* browser window, scrolling down or up if needed.            */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the token;                                     */
/*                                                            */
/*             A WimpGetWindowStateBlock pointer for the      */
/*             browser window;                                */
/*                                                            */
/*             Pointer to the token itself.                   */
/*                                                            */
/* Returns:    1 if the window was scrolled, else 0. If there */
/*             is an error internally, 2 is returned.         */
/**************************************************************/

int browser_ensure_visible
    (
      const browser_data      * restrict b,
      WimpGetWindowStateBlock * restrict state,
      const HStream           * restrict token
    )
{
  int                   lfir, llas, ltop, lbot;
  int                   ytop, ybot, htop, hbot;
  HStream             * ttop;
  HStream             * tend;
  const reformat_cell * cell_s  = NULL;
  const reformat_cell * cell_e  = NULL;
  token_path          * path_s  = NULL;
  token_path          * path_e  = NULL;
  int                   depth_s = 0;
  int                   depth_e = 0;
  int                   orx_s, ory_s;
  int                   orx_e, ory_e;

  if (!token) return 0;

  /* Find the first and last lines to include this token range */

  tokenutils_anchor_range(b, token, &ttop, &tend);

  if (!ttop || !tend) depth_s = tokenutils_line_range(b, token, &lfir, NULL, &llas, NULL, &path_s);
  else
  {
    depth_s = tokenutils_line_range(b, ttop, &lfir, NULL, NULL, NULL, &path_s);
    depth_e = tokenutils_line_range(b, tend, NULL, NULL, &llas, NULL, &path_e);
  }

  /* If the first line can't be found, can't proceed */

  if (lfir < 0) return 0;

  /* Find the start/end origin offset */

  tokenutils_token_offset(b, path_s, &orx_s, &ory_s);
  tokenutils_token_offset(b, path_s, &orx_e, &ory_e);

  /* Find the start/end cell (*should* be the same...) */

  cell_s = tokenutils_find_cell(b->cell, depth_s, path_s);
  cell_e = tokenutils_find_cell(b->cell, depth_e, path_e);

  if (!cell_s)
  {
    cell_s = b->cell;
    orx_s  = 0;
    ory_s  = 0;
  }

  if (!cell_e)
  {
    cell_e = b->cell;
    orx_e  = 0;
    ory_e  = 0;
  }

  /* Free the token_path arrays */

  if (path_s) free (path_s);
  if (path_e) free (path_e);

  /* If the last line couldn't be found, the token only */
  /* spans the one line.                                */

  if (llas < 0) llas = lfir, cell_e = cell_s;

  /* Work out the top and bottom y coordinates that the token spans */

  ltop = ory_s + cell_s->ldata[lfir].y + cell_s->ldata[lfir].h - 1; /* '-1' as we want this to be an inclusive coord */
  lbot = ory_e + cell_e->ldata[llas].y;

  /* Work out where the visible page region starts and ends */
  /* (affected by window scrolling and toolbar presence).   */

  if (!controls.swap_bars)
  {
    htop = toolbars_button_height(b) + toolbars_url_height(b);
    hbot = toolbars_status_height(b);
  }
  else
  {
    htop = toolbars_status_height(b);
    hbot = toolbars_button_height(b) + toolbars_url_height(b);
  }

  if (htop) htop += wimpt_dy();
  if (hbot) hbot += wimpt_dy();

  ytop = state->yscroll - htop;
  ybot = state->yscroll - (state->visible_area.ymax - state->visible_area.ymin) + hbot;

  /* It would be possible for the token to be big, or the window to be small, */
  /* and both the bottom and top of it be off the window. In this case, take  */
  /* the case where the top is not visible over the case where the bottom is  */
  /* not visible.                                                             */

  if (ltop > ytop)
  {
    state->yscroll = ltop + htop + 8; /* '+8' = aesthetics */
    if (wimp_open_window((WimpOpenWindowBlock *) state)) return 2;
    else return 1;
  }
  else if (lbot < ybot)
  {
    state->yscroll = lbot + (state->visible_area.ymax - state->visible_area.ymin) - hbot - 8; /* '-8 = aesthetics */
    if (wimp_open_window((WimpOpenWindowBlock *) state)) return 2;
    else return 1;
  }

  return 0;
}

/**************************************************************/
/* browser_check_visible()                                    */
/*                                                            */
/* Checks to see if a given token is wholly or partially      */
/* visible in a given browser window.                         */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the token;                                     */
/*                                                            */
/*             A WimpGetWindowStateBlock pointer for the      */
/*             browser window (may be NULL);                  */
/*                                                            */
/*             Pointer to the token itself.                   */
/*                                                            */
/* Returns:    1 if the token is wholly visible, 2 if it is   */
/*             partially visible, else 0. If there is an      */
/*             error internally, 0 is returned.               */
/*                                                            */
/* Assumes:    If the WimpGetWindowStateBlock pointer is      */
/*             NULL, the function will find the information   */
/*             out itself. The block pointer can be passed in */
/*             as calling functions may well already have     */
/*             this block available, so it makes sense to     */
/*             avoid finding it out again.                    */
/**************************************************************/

int browser_check_visible
    (
      const browser_data      * restrict b,
      WimpGetWindowStateBlock * restrict state,
      const HStream           * restrict token
    )
{
  WimpGetWindowStateBlock   s;
  int                       lfir, llas, ltop, lbot;
  int                       ytop, ybot, htop, hbot;
  HStream                 * ttop;
  HStream                 * tend;
  const reformat_cell     * cell_s  = NULL;
  const reformat_cell     * cell_e  = NULL;
  token_path              * path_s  = NULL;
  token_path              * path_e  = NULL;
  int                       depth_s = 0;
  int                       depth_e = 0;
  int                       orx_s, ory_s;
  int                       orx_e, ory_e;

  if (!token) return 0;

  /* Get the window state, if necessary */

  if (!state)
  {
    s.window_handle = b->window_handle;
    if (wimp_get_window_state(&s)) return 0;

    state = &s;
  }

  /* Find the first and last lines to include this token range */

  tokenutils_anchor_range(b, token, &ttop, &tend);

  if (!ttop || !tend) depth_s = tokenutils_line_range(b, token, &lfir, NULL, &llas, NULL, &path_s);
  else
  {
    depth_s = tokenutils_line_range(b, ttop, &lfir, NULL, NULL, NULL, &path_s);
    depth_e = tokenutils_line_range(b, tend, NULL, NULL, &llas, NULL, &path_e);
  }

  /* If the first line can't be found, can't proceed */

  if (lfir < 0) return 0;

  /* Find the start/end origin offset */

  tokenutils_token_offset(b, path_s, &orx_s, &ory_s);
  tokenutils_token_offset(b, path_s, &orx_e, &ory_e);

  /* Find the start/end cell (*should* be the same...) */

  cell_s = tokenutils_find_cell(b->cell, depth_s, path_s);
  cell_e = tokenutils_find_cell(b->cell, depth_e, path_e);

  if (!cell_s)
  {
    cell_s = b->cell;
    orx_s  = 0;
    ory_s  = 0;
  }

  if (!cell_e)
  {
    cell_e = b->cell;
    orx_e  = 0;
    ory_e  = 0;
  }

  /* Free the token_path arrays */

  if (path_s) free (path_s);
  if (path_e) free (path_e);

  /* If the last line couldn't be found, the token only */
  /* spans the one line.                                */

  if (llas < 0) llas = lfir, cell_e = cell_s;

  /* Work out where the visible page region starts and ends */
  /* (affected by window scrolling and toolbar presence).   */

  if (!controls.swap_bars)
  {
    htop = toolbars_button_height(b) + toolbars_url_height(b);
    hbot = toolbars_status_height(b);
  }
  else
  {
    htop = toolbars_status_height(b);
    hbot = toolbars_button_height(b) + toolbars_url_height(b);
  }

  if (htop) htop += wimpt_dy();
  if (hbot) hbot += wimpt_dy();

  ytop = state->yscroll - htop;
  ybot = state->yscroll - (state->visible_area.ymax - state->visible_area.ymin) + hbot;

  /* Work out the top and bottom y coordinates that the token spans */

  ltop = ory_s + cell_s->ldata[lfir].y + cell_s->ldata[lfir].h - 1; /* '-1' as we want this to be an inclusive coord */
  lbot = ory_e + cell_e->ldata[llas].y;

  /* Is the token fully visible? */

  if (ltop <= ytop && lbot >= ybot) return 1;

  /* Work out the top and bottom to check for partial visibility */

  ltop = ory_s + cell_s->ldata[lfir].y;
  lbot = ory_e + cell_e->ldata[llas].y + cell_e->ldata[llas].h - 1;

  /* Is the token partially visible? */

  if (ltop <= ytop && lbot >= ybot) return 2;

  /* The token is not in the visible area */

  return 0;
}

/**************************************************************/
/* browser_show_named_anchor()                                */
/*                                                            */
/* Given an anchor name, ensures that the window is scrolled  */
/* to show the token associated with that anchor name. If no  */
/* match can be found between the given name and the names of */
/* the tokens, the routine gives an appropriate error message */
/* back to the user.                                          */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the window;                                    */
/*                                                            */
/*             Pointer to the anchor name;                    */
/*                                                            */
/*             1 to suppress warnings if the anchor is not    */
/*             found on the page, else 0.                     */
/**************************************************************/

void browser_show_named_anchor(browser_data * b, char * anchor, int suppress_error)
{
  char name[Limits_NamedAnchor];

  memset(name, 0, sizeof(name));
  strncpy(name, anchor, sizeof(name) - 2);
  name[sizeof(name) - 2] = '\0';

  if (
       !browser_show_token(b,
                           fetch_find_anchor_token(b, name),
                           0,
                           0)
     )
  {
    /* Some broken pages specify the names with a hash in front, */
    /* and still expect them to work. Try to deal with that.     */

    memmove(name + 1, name, strlen(name));
    name[0] = '#';

    if (
         !browser_show_token(b,
                             fetch_find_anchor_token(b, name),
                             0,
                             0)

         && suppress_error == 0
       )
    {
      erb.errnum = Utils_Error_Custom_Message;

      /* Give a different message if still fetching */

      if (fetch_fetching(b))
      {
        StrNCpy0(erb.errmess,
                 lookup_token("NoLabelF:The label '%0' cannot be found, but the page is still fetching - try again when the page fetch has finished.",
                              0,
                              anchor))
      }
      else
      {
        StrNCpy0(erb.errmess,
                 lookup_token("NoLabel:The label '%0' cannot be found on this page.",
                              0,
                              anchor))
      }

      /* Report the error and continue from here */

      show_error_ret(&erb);
    }
  }

  return;
}

/**************************************************************/
/* browser_check_local_reference()                            */
/*                                                            */
/* Check a new URL against a current URL examining every part */
/* except a local reference fragment (i.e. "...#name"). If    */
/* the two are identical, or differ only by that fragment, a  */
/* URL descriptor for the new URL is returned. The caller can */
/* extract the local reference from this and must then free   */
/* the descriptor with urlutils_free_description. If the URLs */
/* differ too much, NULL will be returned.                    */
/*                                                            */
/* Parameters: Pointer to the requested URL which may contain */
/*             the local reference;                           */
/*                                                            */
/*             Pointer to the base URL against which the      */
/*             first is compared.                             */
/*                                                            */
/* Returns:    Pointer to a URL description if the reference  */
/*             should be taken from the current page, else    */
/*             NULL. In the former case the caller must       */
/*             eventually free the URL description by calling */
/*             urlutils_free_description.                     */
/**************************************************************/

url_description * browser_check_local_reference
                  (
                    const char * restrict url_requested,
                    const char * restrict url_current
                  )
{
  url_description * requested;
  url_description * current;

  /* Can't do anything if null pointers are given */

  if (!url_requested || !url_current) return NULL;

  /* Get the URI handler module to parse the URLs */

  requested = urlutils_return_description(url_requested);
  if (requested == NULL) return NULL;

  current   = urlutils_return_description(url_current);
  if (current == NULL)
  {
    urlutils_free_description(requested);
    return NULL;
  }

  /* If the URLs are identical in every way except for the */
  /* fragment (anchor section), this is a local reference. */

  if (
       requested->fragment  != NULL                              &&
       *requested->fragment != '\0'                              &&

       !utils_strnullcmp(requested->protocol, current->protocol) &&
       !utils_strnullcmp(requested->host,     current->host)     &&
       !utils_strnullcmp(requested->port,     current->port)     &&

       !utils_strnullcmp(requested->user,     current->user)     &&
       !utils_strnullcmp(requested->password, current->password) &&
       !utils_strnullcmp(requested->account,  current->account)  &&

       !utils_strnullcmp(requested->path,     current->path)     &&

       !utils_strnullcmp(requested->query,    current->query)
     )
  {
    /* This is a local reference (which may be identical to the */
    /* current local reference, but is local nonetheless).      */

    urlutils_free_description(current);
    return requested;
  }

  /* Part of the URLs did not match, so it's necessary to fetch */
  /* the page anew.                                             */

  urlutils_free_description(current);
  urlutils_free_description(requested);

  return NULL;
}

/**************************************************************/
/* browser_display_local_reference()                          */
/*                                                            */
/* Checks a given URL against a given base URL, and if it     */
/* contains a local reference (i.e. has '#<name>' at the end) */
/* but otherwise matches the base URL, will try to find and   */
/* subsequently display the reference on the page.            */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the page;                                      */
/*                                                            */
/*             Pointer to the requested URL which may contain */
/*             the reference;                                 */
/*                                                            */
/*             Pointer to the base URL against which the      */
/*             first is compared;                             */
/*                                                            */
/*             1 to suppress warnings if the anchor is not    */
/*             found on the page, else 0.                     */
/*                                                            */
/* Returns:    1 if the reference is to be shown (though if   */
/*             the reference may not actually be found on the */
/*             page) or 0 if the reference will not be shown, */
/*             because the base URL does not match the        */
/*             requested URL.                                 */
/*                                                            */
/* Assumes:    Either pointer may be NULL, though this will   */
/*             ensure that 0 is returned and thus it's not    */
/*             much use giving null pointers. The application */
/*             must be able to write to the URL data.         */
/**************************************************************/

int browser_display_local_reference(browser_data * b, char * url_requested, char * url_current, int suppress_error)
{
  url_description * requested = browser_check_local_reference(url_requested, url_current);

  /* Was this local? Return 0 if not. */

  if (requested == NULL) return 0;

  /* Otherwise, show the reference. */

  browser_show_named_anchor(b,
                            requested->fragment,
                            suppress_error);

  /* Don't forget to free the description. */

  urlutils_free_description(requested);

  return 1;
}

/**************************************************************/
/* browser_check_for_request()                                */
/*                                                            */
/* Looks at the display_request field of the given browser    */
/* and sees if the page should be scrolled down to meet any   */
/* request this implies. Intended for use for markers and     */
/* named in-page anchors during reformatter loops.            */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the page.                                      */
/**************************************************************/

void browser_check_for_request(browser_data * handle)
{
  if (handle->display_request == DISPLAY_NAMED)
  {
    char    * p;
    HStream * t;

    t = 0;

    p = fetch_find_name_tag(browser_current_url(handle)) + 1;
    t = fetch_find_anchor_token(handle, p);

    if (t)
    {
      handle->display_request = t;
      handle->display_offset  = 0;
      handle->display_vscroll = 0;
    }
  }

  if (handle->display_request && handle->display_request != DISPLAY_NAMED)
  {
    if (
         handle->display_request &&
         browser_show_token(handle,
                            handle->display_request,
                            handle->display_offset,
                            handle->display_vscroll)
       )
    {
      handle->display_request = NULL;
      handle->display_offset  = 0;
      handle->display_vscroll = 0;
    }
  }

  return;
}

/**************************************************************/
/* browser_set_look()                                         */
/*                                                            */
/* Sets the 'look' of a browser window - i.e. underlined      */
/* links, using document or default colour schemes, etc.      */
/*                                                            */
/* Parameters: Pointer to a browser_data struct to alter (any */
/*             in a frameset will do, as all frames are       */
/*             updated);                                      */
/*                                                            */
/*             Object ID of the item generating this change,  */
/*             if appropriate (or zero if not);               */
/*                                                            */
/*             1 to underline links, 0 not to, -1 to not      */
/*             change this state;                             */
/*                                                            */
/*             1 to use document colours, 0 to use defaults,  */
/*             -1 to not change this state;                   */
/*                                                            */
/*             1 to show foreground images, 0 not to (any     */
/*             pending image fetches are started up again if  */
/*             1 is given), or -1 to not change this state;   */
/*                                                            */
/*             1 to show background images, 0 not to (any     */
/*             pending image fetch for this is started if 1   */
/*             is given), or -1 to not change this state.     */
/**************************************************************/

_kernel_oserror * browser_set_look(browser_data * b, ObjectId source, int underline_links,
                                   int use_source_cols, int show_foreground, int show_background)
{
  /* Check the browser_data pointer is valid */

  if (!b || !is_known_browser(b)) return NULL;

  /* Find the ancestor and call the recursive back-end with it */

  return browser_set_look_r(utils_ancestor(b),
                            source,
                            underline_links,
                            use_source_cols,
                            show_foreground,
                            show_background);
}

/**************************************************************/
/* browser_set_look_r()                                       */
/*                                                            */
/* Recursive back-end to browser_set_look.                    */
/*                                                            */
/* Note that if open, the Print Style dialogue is updated     */
/* with these changes, if they apply to the browser to which  */
/* it is relevant (if any).                                   */
/*                                                            */
/* Parameters: As for browser_set_look. All children of the   */
/*             browser_data struct, along with that given     */
/*             struct, will be updated.                       */
/**************************************************************/

static _kernel_oserror * browser_set_look_r(browser_data * b, ObjectId source, int underline_links,
                                            int use_source_cols, int show_foreground, int show_background)
{
  int child;
  int redraw = 0;

  /* Scan the child tree */

  if (b->nchildren)
  {
    for (child = 0; child < b->nchildren; child ++)
    {
      RetError(browser_set_look_r(b->children[child],
                                  source,
                                  underline_links,
                                  use_source_cols,
                                  show_foreground,
                                  show_background));
    }
  }

  /* Work through the four options, updating the browser if they */
  /* seem to have changed.                                       */

  if (underline_links >= 0 && underline_links != b->underline_links)
  {
    b->underline_links = underline_links;
    redraw             = 1;
  }

  if (use_source_cols >= 0 && use_source_cols != b->use_source_cols)
  {
    b->use_source_cols = use_source_cols;
    redraw             = 1;
  }

  if (show_foreground >= 0 && show_foreground != b->show_foreground)
  {
    b->show_foreground = show_foreground;
    redraw             = 1;

    /* Restart fetches if required */

    if (show_foreground) image_restart_fetches(b, 1, 0);
  }

  if (show_background >= 0 && show_background != b->show_background)
  {
    b->show_background = show_background;

    /* No need to redraw if there's no background image to show or remove */

    redraw = b->background_image >= 0 ? 1 : 0;

    /* Again restart fetches if required */

    if (show_background) image_restart_fetches(b, 0, 1);
  }

  /* If required, redraw the browser to reflect the changes */

  if (redraw)
  {
    WimpGetWindowStateBlock s;

    s.window_handle = b->window_handle;
    RetError(wimp_get_window_state(&s));

    coords_box_toworkarea(&s.visible_area, (WimpRedrawWindowBlock *) &s);

    RetError(wimp_force_redraw(b->window_handle,
                               s.visible_area.xmin,
                               s.visible_area.ymin,
                               s.visible_area.xmax,
                               s.visible_area.ymax));
  }

  /* If there's a Print Style dialogue opened for this browser, the */
  /* following call will update it appropriately.                   */

  return printstyle_set_look(source,
                             b->self_id,
                             underline_links,
                             use_source_cols,
                             show_foreground,
                             show_background);
}

/**************************************************************/
/* browser_give_general_focus()                               */
/*                                                            */
/* Places the caret in a browser window, but in no particular */
/* icon - it will appear in the URL bar if one is visible,    */
/* else the main window will gain the input focus but the     */
/* caret will not be visible.                                 */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the window.                                    */
/**************************************************************/

_kernel_oserror * browser_give_general_focus(browser_data * b)
{
  _kernel_oserror * e;
  ObjectId          t;

  if (!b) return NULL;

  /* Try to put the caret in a form - exit with NULL if it succeeds */

  if (form_give_focus(b)) return NULL;

  /* OK, put the focus in the URL bar, or if not there, in the main */
  /* window (the caret will be invisible in this latter case).      */
  /*                                                                */
  /* In the special case of the URL bar and status display being    */
  /* merged, the focus is given to the URL writable only if it is   */
  /* currently visible in the window.                               */

  t = toolbars_get_upper(b);

  if (
       t          &&
       b->url_bar &&
       !gadget_hidden(t, URLBarWrit)
     )
     return gadget_set_focus(0, t, URLBarWrit);

  else
  {
    browser_data * ancestor = utils_ancestor(b);

    /* Only give input focus to the ancestor */

    e = wimp_set_caret_position(ancestor->window_handle, -1, 0, 0, -1, -1);
    if (e) return e;

    /* May need to select a new object */

    if (!ancestor->selected && choices.keyboard_ctrl)
    {
      browser_data * next = frames_find_another_frame(ancestor, 0);

      if (next)
      {
        ancestor->selected = browser_find_first_selectable(next, NULL, 0);

        if (ancestor->selected)
        {
          ancestor->selected_owner = next;
          ancestor->selected_frame = b;

          frames_highlight_frame(b);
        }
      }
    }
  }

  return NULL;
}

/**************************************************************/
/* browser_inherit()                                          */
/*                                                            */
/* Makes a given child browser inherit some of the            */
/* characteristics of a given parent.                         */
/*                                                            */
/* The post_data field is handled specially. Please see       */
/* browser_inherit_post_data for details.                     */
/*                                                            */
/* Parameters: Pointer to a browser_data struct representing  */
/*             the parent;                                    */
/*                                                            */
/*             Pointer to a browser_data struct representing  */
/*             the child.                                     */
/**************************************************************/

_kernel_oserror * browser_inherit(browser_data * parent, browser_data * child)
{
  /* Be very cautious! */

  if (!is_known_browser(parent) || !is_known_browser(child)) return NULL;

  /* The local History */

  RetError(history_inherit(parent, child));

  /* Some display flags */

  child->underline_links = parent->underline_links;
  child->show_foreground = parent->show_foreground;
  child->show_background = parent->show_background;
  child->use_source_cols = parent->use_source_cols;

  /* To finish, deal with post_data information */

  return browser_inherit_post_data(parent, child);
}

/**************************************************************/
/* browser_inherit_post_data()                                */
/*                                                            */
/* Part of browser_inherit which needs to be used sometimes   */
/* for windows that already exist but are being targetted by  */
/* a POST form submission.                                    */
/*                                                            */
/* If there is a flex block attached through the post_data    */
/* field of the parent, the contents will be copied into a    */
/* flex block attached to the child's post_data field and     */
/* then *freed* in the parent.                                */
/*                                                            */
/* This is because at present, the only time the parent will  */
/* have such a block is if either an a button that submits a  */
/* POST request was clicked upon, or if that button targets   */
/* another browser window. In this case, you don't want to    */
/* leave the data attached to the parent or the next fetch it */
/* does will erroneously be sent as POST itself...!           */
/*                                                            */
/* NB If the child which is to receive the flex data from the */
/* parent (assuming the parent has any to give!) already had  */
/* stuff attached to post_data, this will obviously be freed  */
/* first.                                                     */
/*                                                            */
/* Parameters: Pointer to a browser_data struct representing  */
/*             the parent;                                    */
/*                                                            */
/*             Pointer to a browser_data struct representing  */
/*             the child.                                     */
/**************************************************************/

_kernel_oserror * browser_inherit_post_data(browser_data * parent, browser_data * child)
{
  /* Once more, because we may be called from anywhere, */
  /* be very cautious.                                  */

  if (!is_known_browser(parent) || !is_known_browser(child)) return NULL;

  /* If the parent had extra data, we should carry that forward (this */
  /* may have been an adjust-click on a Submit button for a POST form */
  /* for example).                                                    */

  if (parent->post_data)
  {
    int success;
    int size = flex_size(&parent->post_data);

    if (size)
    {
      /* Clear any data in the child */

      if (child->post_data) flex_free(&child->post_data);

      /* Allocate an appropriate chunk of memory in the child */

      success = flex_alloc(&child->post_data, size);

      /* If the allocation succeeded, so switch off flex budging and */
      /* copy the block contents to the child browser                */

      if (success)
      {
        int oldstate = flex_set_budge(0);

        memcpy(child->post_data, parent->post_data, size);

        /* Restore flex's budge state */

        flex_set_budge(oldstate);
      }

      /* At this point, whether the new flex allocation worked */
      /* or not, free the parent's block (see the comments at  */
      /* the top of the function for more details).            */

      flex_free(&parent->post_data);

      /* If the flex allocation failed, return an error */

      if (!success) return make_no_fetch_memory_error(16);
    }
  }

  return NULL;
}
@


1.30
log
@  Huge pile of changes bringing relatively ancient sources up to date.
Detail:
  This check-in includes Phoenix version 2.11 (26-Apr-2005); only the
  debug and JavaScript builds of Phoenix have been tested and resources
  will definitely be out of date for other versions. The various "!..."
  scripts have been updated to require a minimum of 2MB with no maximum
  limit for building, as CC 5.60 is quite RAM hungry.
Admin:
  Phoenix 2.11 JS builds OK, works reasonably well. Many outstanding
  issues of course, as this is a very outdated browser now.

Version 2.09. Tagged as 'Browse-2_09'
@
text
@d60 1
d75 13
a87 1
static _kernel_oserror * browser_update_token_r        (browser_data * b, reformat_cell * cell, HStream * token, int first, int last, int chunk, int base_x, int base_y, int noback, HStream * nocontent);
d1451 1
a1451 1
char * browser_fetch_url(browser_data * b)
d1505 1
a1505 1
char * browser_current_url(browser_data * b)
d1535 1
a1535 1
const char * browser_base_url(browser_data * b)
d1560 1
a1560 1
char * browser_current_title(browser_data * b)
d1562 1
a1562 1
  HStream * current = b->stream;
d3053 6
a3058 5
  BBox                      r1;
  int                       more, x, y, w, h;
  _kernel_oserror         * e;
  WimpGetWindowStateBlock   state;
  WimpRedrawWindowBlock     redraw;
d3060 1
a3060 1
  /* Find the position of the image */
d3062 2
a3063 2
  e = reformat_get_image_size(b, token, &r1);
  if (e) return e;
d3065 2
a3066 1
  /* Correct for HSPACE / VSPACE */
d3068 1
a3068 4
  r1.xmin += HtmlOBJECThspace(token) * 2; /* 1 'web pixel' = 2 OS units */
  r1.ymin += HtmlOBJECTvspace(token) * 2;
  r1.xmax -= HtmlOBJECThspace(token) * 2;
  r1.ymax -= HtmlOBJECTvspace(token) * 2;
d3070 1
a3070 1
  /* Work out width and height */
d3072 1
a3072 2
  w = r1.xmax - r1.xmin;
  h = r1.ymax - r1.ymin;
d3074 24
a3097 3
  state.window_handle = redraw.window_handle = b->window_handle;
  e = wimp_get_window_state(&state);
  if (e) return e;
d3099 4
a3102 1
  /* Find the x and y coordinates of the image's bottom left hand corner */
d3104 2
a3105 1
  if (image_get_token_image_position(b, token, &x, &y)) return NULL;
d3107 4
a3110 2
  /* Work out the screen coordinates of the image, with an extra */
  /* amount account for the selection border.                    */
d3112 1
a3112 4
  r1.xmin = x - 4;
  r1.ymin = y - 4;
  r1.xmax = r1.xmin + w + 8;
  r1.ymax = r1.ymin + h + 8;
d3114 3
a3116 2
  redraw.xscroll = state.xscroll;
  redraw.yscroll = state.yscroll;
d3120 2
a3121 2
  redraw.visible_area.xmin = r1.xmin, redraw.visible_area.ymin = r1.ymin;
  redraw.visible_area.xmax = r1.xmax, redraw.visible_area.ymax = r1.ymin + 4;
d3123 2
a3124 8
  e = wimp_update_window(&redraw, &more);
  if (e) return e;

  if (more)
  {
    e = redraw_draw(b, &redraw, 0, token);
    if (e) return e;
  }
d3128 2
a3129 2
  redraw.visible_area.xmin = r1.xmin,     redraw.visible_area.ymin = r1.ymin;
  redraw.visible_area.xmax = r1.xmin + 4, redraw.visible_area.ymax = r1.ymax;
d3131 2
a3132 8
  e = wimp_update_window(&redraw, &more);
  if (e) return e;

  if (more)
  {
    e = redraw_draw(b, &redraw, 0, token);
    if (e) return e;
  }
d3136 2
a3137 5
  redraw.visible_area.xmin = r1.xmin, redraw.visible_area.ymin = r1.ymax - 4;
  redraw.visible_area.xmax = r1.xmax, redraw.visible_area.ymax = r1.ymax;

  e = wimp_update_window(&redraw, &more);
  if (e) return e;
d3139 2
a3140 5
  if (more)
  {
    e = redraw_draw(b, &redraw, 0, token);
    if (e) return e;
  }
d3144 2
a3145 5
  redraw.visible_area.xmin = r1.xmax - 4, redraw.visible_area.ymin = r1.ymin;
  redraw.visible_area.xmax = r1.xmax,     redraw.visible_area.ymax = r1.ymax;

  e = wimp_update_window(&redraw, &more);
  if (e) return e;
d3147 1
a3147 1
  if (more) return redraw_draw(b, &redraw, 0, token);
d3149 2
a3150 1
  return NULL;
d3175 7
a3181 1
_kernel_oserror * browser_update(browser_data * b, WimpRedrawWindowBlock * r, int noback, HStream * nocontent)
d3189 1
a3189 1
  if (more) return redraw_draw(b, r, noback, nocontent);
d3220 16
a3235 10
_kernel_oserror * browser_update_token(browser_data * b, HStream * token, int noback, HStream * nocontent)
{
  token_path      * path  = NULL;
  int               first = -1;
  int               fchnk = -1;
  int               last  = -1;
  int               depth;
  reformat_cell   * cell  = NULL;
  _kernel_oserror * e     = NULL;
  int               x, y;
d3301 13
a3313 3
static _kernel_oserror * browser_update_token_r(browser_data * b, reformat_cell * cell, HStream * token,
                                                int first, int chunk, int last, int base_x, int base_y,
                                                int noback, HStream * nocontent)
d3441 1
a3441 1
    e = redraw_draw(b, &r, 0, 0);
d3907 2
a3908 1
/*             the window;                                    */
d3926 7
a3932 1
int browser_show_token(browser_data * b, HStream * token, int offset, int y_shift)
d3936 1
a3936 1
  reformat_cell           * cell = NULL;
d4099 19
a4117 12
int browser_ensure_visible(browser_data * b, WimpGetWindowStateBlock * state, HStream * token)
{
  int             lfir, llas, ltop, lbot;
  int             ytop, ybot, htop, hbot;
  HStream       * ttop;
  HStream       * tend;
  reformat_cell * cell_s  = NULL, * cell_e = NULL;
  token_path    * path_s  = NULL, * path_e = NULL;
  int             depth_s = 0;
  int             depth_e = 0;
  int             orx_s, ory_s;
  int             orx_e, ory_e;
d4242 6
a4247 1
int browser_check_visible(browser_data * b, WimpGetWindowStateBlock * state, HStream * token)
d4254 4
a4257 2
  reformat_cell           * cell_s  = NULL, * cell_e = NULL;
  token_path              * path_s  = NULL, * path_e = NULL;
d4444 85
d4562 1
a4562 5
  char * p1, * p2;

  /* Can't do anything if null pointers are given */

  if (!url_requested || !url_current) return 0;
d4564 1
a4564 1
  /* Can't do anything if the requested URL doesn't have a local reference in it */
d4566 1
a4566 2
  p1 = fetch_find_name_tag(url_requested);
  if (!p1) return 0;
d4568 1
a4568 3
  /* If the base URL contains a reference then point p2 to the first */
  /* character after the main URL (i.e. the '#'), else point p2 to   */
  /* the end of the string.                                          */
d4570 3
a4572 11
  p2 = fetch_find_name_tag(url_current);
  if (!p2) p2 = strchr(url_current, 0);

  /* If the two URLs don't match, return 0 */

  if (
       utils_strncasecmp(url_requested,
                         url_current,
                         (int) p1 - (int) url_requested)
     )
     return 0;
d4574 1
a4574 1
  /* Otherwise, show the reference */
d4576 1
a4576 1
  browser_show_named_anchor(b, p1 + 1, suppress_error);
@


1.29
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@d2144 1
a2144 1
    /* Find out which pixel we clicked on */
d2246 5
a2250 2
          handle->pointer_over = NULL;
          mouse_set_pointer_shape(Mouse_Shape_Normal);
d2262 5
a2266 2
        handle->pointer_over = NULL;
        mouse_set_pointer_shape(Mouse_Shape_Normal);
d2436 1
a2436 1
          static tracelastchunk = -1;
d4320 4
a4323 1
/*             Pointer to the anchor name.                    */
d4326 1
a4326 1
void browser_show_named_anchor(browser_data * b, char * anchor)
d4332 1
d4352 2
d4399 4
a4402 1
/*             first is compared.                             */
d4416 1
a4416 1
int browser_display_local_reference(browser_data * b, char * url_requested, char * url_current)
d4447 1
a4447 1
  browser_show_named_anchor(b, p1 + 1);
@


1.28
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@a43 5
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

d501 1
a501 3
  #ifdef TRACE
    if (tl & (1u<<22)) Printf("browser_find_selectable_top_r: Proceeding for %p, cell %p\n", b, cell);
  #endif
d522 1
a522 3
  #ifdef TRACE
    if (tl & (1u<<22)) Printf("browser_find_selectable_top_r: ytop, ybot: -%d, -%d\n",-ytop,-ybot);
  #endif
d580 1
a580 3
    #ifdef TRACE
      if (tl & (1u<<22)) Printf("browser_find_selectable_top_r: Line %d\n",line);
    #endif
d593 2
a594 5
        if (tl & (1u<<22))
        {
          Printf("browser_find_selectable_top_r: Chunk %d of %d, token %p\n", chunk, chunkmax, t);
          if (t == last) Printf("browser_find_selectable_top_r: t = last, so won't deal with this chunk\n");
        }
d609 1
a609 3
          #ifdef TRACE
            if (tl & (1u<<22)) Printf("browser_find_selectable_top_r: ** Found %p **\n", t);
          #endif
d648 1
a648 3
          #ifdef TRACE
            if (tl & (1u<<22)) Printf("browser_find_selectable_top_r: Dealing with table\n");
          #endif
d678 1
a678 3
                      #ifdef TRACE
                        if (tl & (1u<<22)) Printf("browser_find_selectable_top_r: Cell index %d, cell %p\n",cellindex,cellarray);
                      #endif
d690 1
a690 3
                      #ifdef TRACE
                        if (tl & (1u<<22)) Printf("browser_find_selectable_top_r: Cell index %d, cell %p - Found: %p\n",cellindex, cellarray, found);
                      #endif
d715 1
a715 3
            #ifdef TRACE
              if (tl & (1u<<22)) Printf("browser_find_selectable_top_r: ** Found %p in table, exitting **\n",t);
            #endif
d721 1
a721 1
            else if (tl & (1u<<22)) Printf("browser_find_selectable_top_r: Nothing found in table\n");
d746 1
a746 3
  #ifdef TRACE
    if (tl & (1u<<22)) Printf("browser_find_selectable_top_r: -- Returning %p --\n", t);
  #endif
d788 1
a788 3
  #ifdef TRACE
    if (tl & (1u<<22)) Printf("browser_find_selectable_bot_r: Proceeding for %p, cell %p\n", b, cell);
  #endif
d809 1
a809 3
  #ifdef TRACE
    if (tl & (1u<<22)) Printf("browser_find_selectable_bot_r: ytop, ybot: -%d, -%d\n",-ytop,-ybot);
  #endif
d864 1
a864 3
    #ifdef TRACE
      if (tl & (1u<<22)) Printf("browser_find_selectable_bot_r: Line %d\n",line);
    #endif
d877 2
a878 5
        if (tl & (1u<<22))
        {
          Printf("browser_find_selectable_bot_r: Chunk %d of %d minimum, token %p\n", chunk, chunkmin, t);
          if (t == last) Printf("browser_find_selectable_bot_r: t = last, so won't deal with this chunk\n");
        }
d893 1
a893 3
          #ifdef TRACE
            if (tl & (1u<<22)) Printf("browser_find_selectable_bot_r: ** Found %p **\n", t);
          #endif
d933 1
a933 3
          #ifdef TRACE
            if (tl & (1u<<22)) Printf("browser_find_selectable_bot_r: Dealing with table\n");
          #endif
d973 1
a973 3
                      #ifdef TRACE
                        if (tl & (1u<<22)) Printf("browser_find_selectable_bot_r: Cell index %d, cell %p\n",cellindex,cellarray);
                      #endif
d985 1
a985 3
                      #ifdef TRACE
                        if (tl & (1u<<22)) Printf("browser_find_selectable_bot_r: Cell index %d, cell %p - Found: %p\n",cellindex, cellarray, found);
                      #endif
d1010 1
a1010 3
            #ifdef TRACE
              if (tl & (1u<<22)) Printf("browser_find_selectable_bot_r: ** Found %p in table, exitting **\n",t);
            #endif
d1016 1
a1016 1
            else if (tl & (1u<<22)) Printf("browser_find_selectable_bot_r: Nothing found in table\n");
d1041 1
a1041 3
  #ifdef TRACE
    if (tl & (1u<<22)) Printf("browser_find_selectable_bot_r: -- Returning %p --\n", t);
  #endif
d1604 1
a1604 1
      if (tl & (1u<<12)) Printf("browser_destroy_source: flex_free block %p which held page source\n",&b->source);
d1606 1
a1606 1
      if (tl & (1u<<14)) Printf("**   flexcount: %d\n",flexcount);
d1862 1
a1862 1
      if (tl & (1u<<12)) Printf("browser_add_match_list_entry: flex_alloc match_list block for first (terminating) entry");
d1864 1
a1864 1
      if (tl & (1u<<14)) Printf("**   flexcount: %d\n",flexcount);
d1883 1
a1883 3
    #ifdef TRACE
      if (tl & (1u<<12)) Printf("browser_add_match_list_entry: flex_extend of match_list failed!\n");
    #endif
d1889 1
a1889 1
    if (tl & (1u<<12)) Printf("browser_add_match_list_entry: flex_extend of match_list block to %d bytes successful", old_size + ulen);
d1891 1
a1891 1
    if (tl & (1u<<14)) Printf("**   flexcount: %d\n",flexcount);
d1925 1
a1925 1
      if (tl & (1u<<12)) Printf("browser_empty_match_list: flex_free block %p\n",match_list);
d1927 1
a1927 1
      if (tl & (1u<<13)) Printf("**   flexcount: %d\n",flexcount);
d2428 1
a2428 1
        if (tl & (1u<<3))
d2434 3
a2436 3
            Printf("Chunk : %d, token: %d\n",cell->ldata[line].chunks + n,cell->cdata[cell->ldata[line].chunks + n].t);
            Printf("Text  : '%s'\n",tp->text);
            Printf("Style : %p\n",(void *) tp->style);
d2440 2
a2441 2
              Printf("Link  : '%s'\n",tp->anchor);
              Printf("Target: '%s'\n",tp->target);
d2447 1
d3371 1
a3371 3
  #ifdef TRACE
    if (tl & (1u<<9)) Printf("\nbrowser_update_bottom: Called, -top_y = %d\n",-top_y);
  #endif
a3402 1
    else if (tl & (1u<<9)) Printf("\nbrowser_update_bottom: Nothing to redraw\n");
d3404 4
a3407 1
    if (tl & (1u<<9)) Printf("\nbrowser_update_bottom: Successful\n");
@


1.27
log
@Tweaks to export rules in Makefile - ResJ source for JavaScript builds,
all of User dir exported, resources rule exports About as well as User.

Handles images with a width or height of 0 specified in the HTML.
Previously went for a default size placeholder and changes to image
sizes and/or redraw problems could occur before/after subsequent
reformatting (involved trivial changes to image_get_image_size and
image_redraw_area only).

Default parameter HRs now plot properly in rectangular pixel modes.

Choices code updated to cope with the minimum font size, JS support,
watchdog on/off and timeout, Navigator object option added generally
(act even *more* like Navigator), image GC after fetch, and image
GC unused image / free RAM constraints.

Code in JSnavigator.c updated to obey new "act more like Navigator"
option (see above). Currently declares itself as version 3.0.

Resources for all builds are up to date. All links in default hotlist
verified and corrected where necessary, with several new links added.

This is Release v2.07. Not tested very much, sorry; YMMV.
@
text
@d15 12
a26 9
/***************************************************/
/* File   : Browser.c                              */
/*                                                 */
/* Purpose: Browser window services.               */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 15-Mar-97: Created from Windows.c.     */
/***************************************************/
d31 7
a37 2
#include "swis.h"
#include "flex.h"
d39 2
a40 3
#include "wimp.h"
#include "wimplib.h"
#include "event.h"
d42 1
a42 2
#include "toolbox.h"
#include "window.h"
d44 4
a47 2
#include "Dialler.h"
#include "NestWimp.h"
a48 1
#include "svcprint.h"
d87 26
a112 29
/*************************************************/
/* browser_scroll_page_v()                       */
/*                                               */
/* Scrolls a page vertically by a given amount.  */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the page;             */
/*                                               */
/*             A WimpOpenWindowBlock pointer,    */
/*             holding the window's current      */
/*             details (e.g. visible area) or    */
/*             NULL if this is not known;        */
/*                                               */
/*             1 to scroll up, else down;        */
/*                                               */
/*             1 to page up/down, else 0;        */
/*                                               */
/*             1 to move one line, else 0;       */
/*                                               */
/*             An amount to scroll by, ignored   */
/*             unless the above two parameters   */
/*             are zero;                         */
/*                                               */
/*             Pointer to an int, in which 1 is  */
/*             written if the window didn't      */
/*             shift scroll position as it was   */
/*             at the limit of its work area,    */
/*             else 0 is written.                */
/*************************************************/
d168 26
a193 29
/*************************************************/
/* browser_scroll_page_h()                       */
/*                                               */
/* Scrolls a page horizontally a given amount.   */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the page;             */
/*                                               */
/*             A WimpOpenWindowBlock pointer,    */
/*             holding the window's current      */
/*             details (e.g. visible area) or    */
/*             NULL if this is not known;        */
/*                                               */
/*             1 to scroll left, else right;     */
/*                                               */
/*             1 to page left/right, else 0;     */
/*                                               */
/*             1 to move one line, else 0;       */
/*                                               */
/*             An amount to scroll by, ignored   */
/*             unless the above two parameters   */
/*             are zero;                         */
/*                                               */
/*             Pointer to an int, in which 1 is  */
/*             written if the window didn't      */
/*             shift scroll position as it was   */
/*             at the limit of its work area,    */
/*             else 0 is written.                */
/*************************************************/
d249 18
a266 21
/*************************************************/
/* browser_scroll_page_by_key()                  */
/*                                               */
/* Scrolls a page according to a given key code. */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the page;             */
/*                                               */
/*             Key code from the Wimp (to define */
/*             left / right, page movement or    */
/*             line movement, etc.);             */
/*                                               */
/*             Pointer to an int, in which 1 is  */
/*             written if the window didn't      */
/*             shift scroll position as it was   */
/*             at the limit of its work area,    */
/*             else 0 is written (this only      */
/*             applies for vertical scrolling -  */
/*             the written value will always be  */
/*             0 if moving horizontally).        */
/*************************************************/
d372 23
a394 28
/*************************************************/
/* browser_find_first_selectable()               */
/*                                               */
/* Examines the visible area of a given browser  */
/* window to see if a selectable token is        */
/* present in it, and returns the address of the */
/* token if so. The token returned may not be    */
/* fully visible - the caller must use           */
/* browser_check_visible on the returned token   */
/* if the token must be fully visible.           */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the window;           */
/*                                               */
/*             A WimpGetWindowStateBlock pointer */
/*             holding details of the window     */
/*             (if NULL because the caller       */
/*             doesn't have this information to  */
/*             hand, the function will work it   */
/*             out);                             */
/*                                               */
/*             Direction to search in; 1 for     */
/*             bottom right to top left, 0 for   */
/*             top left to bottom right.         */
/*                                               */
/* Returns:    Pointer to the token to select,   */
/*             or NULL if none are visible.      */
/*************************************************/
d421 22
a442 27
/*************************************************/
/* browser_find_another_selectable()             */
/*                                               */
/* Takes a given selected token, and finds the   */
/* previous or next selectable, optionally       */
/* constraining the search to moving to a new    */
/* line, rather than allowing to stay on the     */
/* same one.                                     */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the window;           */
/*                                               */
/*             Pointer to the currently selected */
/*             token;                            */
/*                                               */
/*             Direction to search in; 1 for     */
/*             bottom right to top left, 0 for   */
/*             top left to bottom right;         */
/*                                               */
/*             Constraint (1 to allow tokens on  */
/*             the same line, else must go to a  */
/*             new line).                        */
/*                                               */
/* Returns:    Pointer to the new token that     */
/*             should be selected, or NULL for   */
/*             none.                             */
/*************************************************/
d469 26
a494 28
/*************************************************/
/* browser_find_selectable_top_r()               */
/*                                               */
/* Recursive back-end to the 'from top-left'     */
/* call to browser_find_another_selectable and   */
/* browser_find_first_selectable.                */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the window;           */
/*                                               */
/*             Pointer to a reformat_cell struct */
/*             holding the lines to scan;        */
/*                                               */
/*             Pointer to a pointer to the       */
/*             currently selected token (this    */
/*             will be written to) - if there is */
/*             no such token, this should point  */
/*             to a word holding NULL;           */
/*                                               */
/*             y origin of that cell, in OS      */
/*             units from the top left of the    */
/*             whole page;                       */
/*                                               */
/*             A WimpGetWindowStateBlock pointer */
/*             holding details of the window;    */
/*                                               */
/* Returns:    As browser_find_first_selectable. */
/*************************************************/
d777 26
a802 28
/*************************************************/
/* browser_find_selectable_bot_r()               */
/*                                               */
/* Recursive back-end to the 'from bottom-right' */
/* call to browser_find_another_selectable and   */
/* browser_find_first_selectable.                */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the window;           */
/*                                               */
/*             Pointer to a reformat_cell struct */
/*             holding the lines to scan;        */
/*                                               */
/*             Pointer to a pointer to the       */
/*             currently selected token (this    */
/*             will be written to) - if there is */
/*             no such token, this should point  */
/*             to a word holding NULL;           */
/*                                               */
/*             y origin of that cell, in OS      */
/*             units from the top left of the    */
/*             whole page;                       */
/*                                               */
/*             A WimpGetWindowStateBlock pointer */
/*             holding details of the window.    */
/*                                               */
/* Returns:    As browser_find_first_selectable. */
/*************************************************/
d1093 16
a1108 18
/*************************************************/
/* browser_move_selection()                      */
/*                                               */
/* Moves the selected item up or down (to a      */
/* previous link, picture or forms item, or to a */
/* next item).                                   */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the selected item;    */
/*                                               */
/*             Key press from a keyboard handler */
/*             (used to determine the direction  */
/*             and distance of motion).          */
/*                                               */
/* Returns:    1 if the keypress was used for    */
/*             something, else 0 (e.g. there are */
/*             no more objects to select).       */
/*************************************************/
d1286 17
a1302 20
/*************************************************/
/* browser_navigate_map()                        */
/*                                               */
/* Moves around an image map by keyboard control */
/* with the machine single tasking during a key  */
/* autorepeat.                                   */
/*                                               */
/* To exit this 'mode', drop off the image map   */
/* or follow a link with Return.                 */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the browser the image */
/*             map lies in;                      */
/*                                               */
/*             Wimp keycode used to move in it.  */
/*                                               */
/* Returns:    0 if the pointer is still in the  */
/*             map, else a Wimp key code saying  */
/*             which way it fell off.            */
/*************************************************/
d1470 14
a1483 15
/*************************************************/
/* browser_fetch_url()                           */
/*                                               */
/* Looks in the browser_data structure given to  */
/* the function and returns the URL that is      */
/* currently being fetched, or NULL for none.    */
/* It'll try the URL writeable if it can't find  */
/* a fetch URL or a display URL.                 */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the fetch.            */
/*                                               */
/* Returns:    Pointer to the URL string or NULL */
/*             if there is no fetch URL present. */
/*************************************************/
d1524 14
a1537 15
/*************************************************/
/* browser_current_url()                         */
/*                                               */
/* Returns a pointer to the current URL being    */
/* displayed in a browser window. There may not  */
/* be one, of course, if a new window is open    */
/* and no data has been fetched yet - in this    */
/* case, NULL is returned.                       */
/*                                               */
/* Parameters: A pointer to a browser_data       */
/*             structure relevant to the window. */
/*                                               */
/* Returns:    Pointer to the displayed URL, or  */
/*             NULL if nothing is displayed.     */
/*************************************************/
d1549 19
a1567 21
/*************************************************/
/* browser_base_url()                            */
/*                                               */
/* Returns a pointer to the current URL being    */
/* displayed in a browser window, unless there   */
/* is none, in which case the fetch URL is       */
/* given. The pointer may still be NULL though.  */
/* If there is a base URL for the document, this */
/* will be returned instead of the actual URL    */
/* from which the page was fetched.              */
/*                                               */
/* The base URL is recorded through an HTMLLib   */
/* callback function, browser_base_callback.     */
/*                                               */
/* Parameters: A pointer to a browser_data       */
/*             structure relevant to the window. */
/*                                               */
/* Returns:    Pointer to the displayed URL, or  */
/*             the fetch URL if none is          */
/*             displayed.                        */
/*************************************************/
d1580 13
a1592 14
/*************************************************/
/* browser_current_title()                       */
/*                                               */
/* Examines an HStream list for a given browser  */
/* trying to find a TITLE tag; if it finds it,   */
/* a pointer to the title text is returned.      */
/*                                               */
/* Parameters: A pointer to a browser_data       */
/*             structure relevant to the HStream */
/*             list.                             */
/*                                               */
/* Returns:    Pointer to the page title, or     */
/*             NULL if none is found.            */
/*************************************************/
d1608 11
a1618 12
/*************************************************/
/* browser_base_callback()                       */
/*                                               */
/* When HTMLLib encounters a BASE tag, it will   */
/* call this function to let it know what the    */
/* base URL is. The function is registered in    */
/* html_get_next_token (FetchHTML.c).            */
/*                                               */
/* Parameters: See HTMLLib "htmllib.h".          */
/*                                               */
/* Returns:    See HTMLLib "htmllib.h".          */
/*************************************************/
d1635 10
a1644 10
/*************************************************/
/* browser_destroy_source()                      */
/*                                               */
/* Pass a browser_data structure pointer, and if */
/* this points to a block of memory holding      */
/* fetched HTML source, free up that block.      */
/*                                               */
/* Parameters: A pointer to a browser_data       */
/*             structure relevant to the source. */
/*************************************************/
d1661 24
a1684 28
/*************************************************/
/* browser_find_matching_url()                   */
/*                                               */
/* Given a string in a buffer, look for this     */
/* string within any entry in the hotlist and in */
/* addition, the global visit history using      */
/* both titles and URLs. The search is case      */
/* sensitive. The buffer is updated with the     */
/* found item, if any. Calling with that updated */
/* buffer contents will return the next item     */
/* matching the original search criterion,       */
/* assuming there is more than one match, if     */
/* you've kept the block with the list of found  */
/* items in it (see parameters list).            */
/*                                               */
/* Parameters: A flex_ptr which will be used to  */
/*             hold a block with all found       */
/*             matches - e.g. &b->match_list;    */
/*                                               */
/*             Pointer to the buffer holding the */
/*             search string;                    */
/*                                               */
/*             Length of the buffer.             */
/*                                               */
/* Returns:    1 if an item was found (the       */
/*             buffer contents will be updated), */
/*             else 0.                           */
/*************************************************/
d1773 19
a1791 22
/*************************************************/
/* browser_find_match_backwards()                */
/*                                               */
/* Once browser_find_matching_url() has made a   */
/* list of hits in the match_list block you gave */
/* it a flex anchor for, you can step backwards  */
/* through the list by giving a URL from the     */
/* block in a buffer.                            */
/*                                               */
/* Parameters: A flex_ptr pointing to a block    */
/*             with the match list in it;        */
/*                                               */
/*             Pointer to the buffer holding the */
/*             search string - a URL already in  */
/*             the match buffer;                 */
/*                                               */
/*             Length of the buffer.             */
/*                                               */
/* Returns:    1 if the item was found (the      */
/*             buffer contents will be updated), */
/*             else 0.                           */
/*************************************************/
d1860 31
a1890 37
/*************************************************/
/* browser_add_match_list_entry()                */
/*                                               */
/* A browser can have a match_list field filled  */
/* with a pointer to a concatenated series of    */
/* zero terminated strings. The final entry in   */
/* this (flex allocated) block is a zero length  */
/* string. This block was originally created to  */
/* store a list of matches for Ctrl+Tab URL      */
/* completion.                                   */
/*                                               */
/* Call this function to add an entry to the     */
/* end of the block.                             */
/*                                               */
/* If the match_list block does not exist on     */
/* entry then the terminating entry will         */
/* automatically be written before the string is */
/* added.                                        */
/*                                               */
/* NULL or empty strings are ignored (except for */
/* possibly creating the terminating entry as    */
/* described above) - the function will return   */
/* claiming success, unless, of course, the      */
/* allocation for the terminating entry itself   */
/* should fail.                                  */
/*                                               */
/* Parameters: A flex_ptr for the match_list     */
/*             list to be hung off, typically    */
/*             (flex_ptr) &b->match_list;        */
/*                                               */
/*             Pointer to the string to add.     */
/*                                               */
/* Returns:    1 for success, else 0. If it      */
/*             fails, the match_list list may    */
/*             have been destroyed (any entries  */
/*             present on entry might be lost).  */
/*************************************************/
d1985 9
a1993 11
/*************************************************/
/* browser_pointer_entering()                    */
/*                                               */
/* Called when the pointer goes over a browser   */
/* window. Installs a null event handler to      */
/* watch over the pointer's position relative to */
/* links on the page.                            */
/*                                               */
/* Parameters are as standard for a Wimp event   */
/* handler.                                      */
/*************************************************/
d2019 15
a2033 18
/*************************************************/
/* browser_pointer_leaving()                     */
/*                                               */
/* Called when the pointer goes out of a browser */
/* window. Deinstalls a null event handler that  */
/* watched over the pointer's position relative  */
/* to links on the page.                         */
/*                                               */
/* Note that objects may be deleted and this     */
/* function wouldn't be called, so anything that */
/* goes in here should be echoed somewhere in    */
/* windows_close_browser.                        */
/*                                               */
/* Parameters are as standard for a Wimp event   */
/* handler, but only the 'self_id' field of the  */
/* ID block is used, to work out what browser    */
/* the pointer has left.                         */
/*************************************************/
d2088 10
a2097 11
/*************************************************/
/* browser_pointer_over_deleted()                */
/*                                               */
/* Checks to see if the pointer is over an       */
/* object that has just been deleted, and if     */
/* so, deregisters any pointer-related event     */
/* handlers associated with it.                  */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the window / object.  */
/*************************************************/
d2108 22
a2129 23
/*************************************************/
/* browser_pointer_check()                       */
/*                                               */
/* Checks the pointer position relative to any   */
/* links on the page; if it is over one,         */
/* the pointer shape is changed and the status   */
/* bar updated. Alternatively, it is changed     */
/* back to the normal pointer shape and the      */
/* status bar put back to its Ready state.       */
/*                                               */
/* This function will also change the pointer to */
/* a shape indicating frame borders may be       */
/* dragged to resize them, where appropriate.    */
/*                                               */
/* Parameters are as for a standard Wimp event   */
/* handler, though only browser_data * handle is */
/* of interest (it points to a browser_data      */
/* struct relevant to the window in question).   */
/*                                               */
/* The function may be used as a NULL handler,   */
/* so never return 1 from it (you'll claim the   */
/* null event - this is Bad).                    */
/*************************************************/
d2327 24
a2350 26
/*************************************************/
/* browser_get_pointer_token()                   */
/*                                               */
/* Returns the token number that the pointer is  */
/* over (if any) and an X and Y offset into      */
/* the line chunk representing that token.       */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             for the window the pointer is     */
/*             over;                             */
/*                                               */
/*             Pointer to a block describing     */
/*             the pointer condition;            */
/*                                               */
/*             Pointer to an int, in which the X */
/*             offset into the chunk is placed;  */
/*                                               */
/*             Same for the Y offset.            */
/*                                               */
/* Returns:    Address of the token the pointer  */
/*             is over, or NULL for unknown /    */
/*             none.                             */
/*                                               */
/* Assumes:    The pointers to the ints for the  */
/*             X and Y offsets *can* be NULL.    */
/*************************************************/
d2378 27
a2404 31
/*************************************************/
/* browser_get_pointer_token_r()                 */
/*                                               */
/* Recursive back-end to                         */
/* browser_get_pointer_token.                    */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             for the window the pointer is     */
/*             over;                             */
/*                                               */
/*             Pointer to a reformat_cell struct */
/*             holding the line/chunk data to    */
/*             check against the pointer         */
/*             position;                         */
/*                                               */
/*             Pointer to a block describing     */
/*             the pointer condition;            */
/*                                               */
/*             A WimpGetWindowStateBlock pointer */
/*             where the block contains details  */
/*             of the browser window;            */
/*                                               */
/*             Pointer to an int, in which the X */
/*             offset into the chunk is placed;  */
/*                                               */
/*             Same for the Y offset.            */
/*                                               */
/* Returns:    As browser_get_pointer_token.     */
/*                                               */
/* Assumes:    As browser_get_pointer_token.     */
/*************************************************/
d2747 16
a2762 18
/*************************************************/
/* browser_line_at_y()                           */
/*                                               */
/* Returns the line number for a given y window  */
/* coordinate.                                   */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the window;           */
/*                                               */
/*             Pointer to a reformat_cell struct */
/*             holding the line information;     */
/*                                               */
/*             The y coordinate.                 */
/*                                               */
/* Returns:    The line number in which the Y    */
/*             coordinate lives, or -1 for none  */
/*             / an error.                       */
/*************************************************/
d2786 26
a2811 30
/*************************************************/
/* browser_top_line()                            */
/*                                               */
/* Returns the line number displayed at the top  */
/* of the visible area of the browser window.    */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the window;           */
/*                                               */
/*             Pointer to a word into which the  */
/*             address of a reformat_cell will   */
/*             be returned - the given line lies */
/*             in this cell;                     */
/*                                               */
/*             A WimpGetWindowStateBlock pointer */
/*             holding details of the browser    */
/*             window;                           */
/*                                               */
/*             1 if the line must be wholly      */
/*             visible, else 0 if it may be just */
/*             partially visible.                */
/*                                               */
/* Returns:    Directly, the number of the line  */
/*             displayed at the top of the       */
/*             window, or -1 for none / an       */
/*             error.                            */
/*                                               */
/* Assumes:    That *none* of the parameter      */
/*             pointers are NULL.                */
/*************************************************/
d2832 31
a2862 36
/*************************************************/
/* browser_top_line_offset()                     */
/*                                               */
/* Returns the line number displayed at the top  */
/* of the visible area of the browser window,    */
/* coupled with a y offset into that line.       */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the window;           */
/*                                               */
/*             Pointer to a word into which the  */
/*             address of a reformat_cell will   */
/*             be returned - the given line lies */
/*             in this cell;                     */
/*                                               */
/*             Pointer to an int, into which the */
/*             offset, in OS coordinates, of the */
/*             top of the line from the top of   */
/*             the visible area is given (if     */
/*             the line is fully visible this    */
/*             will be <= 0, else if part of the */
/*             line is hidden off the top of the */
/*             window it will be positive);      */
/*                                               */
/*             A WimpGetWindowStateBlock pointer */
/*             holding details of the browser    */
/*             window.                           */
/*                                               */
/* Returns:    Directly, the number of the line  */
/*             displayed at the top of the       */
/*             window, or -1 for none / an       */
/*             error.                            */
/*                                               */
/* Assumes:    That *none* of the parameter      */
/*             pointers are NULL.                */
/*************************************************/
d2883 37
a2919 44
/*************************************************/
/* browser_top_line_r()                          */
/*                                               */
/* Recursive back-end to browser_top_line.       */
/*                                               */
/* NOTE! This function RELIES on a table being   */
/* in a line of its own at all times. Were the   */
/* reformatter to generate tables with chunks    */
/* before them in the line list, the routine     */
/* will fail to scan the table contents in that  */
/* line (so it may not find the top line as      */
/* requested).                                   */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the window;           */
/*                                               */
/*             Pointer to a reformat_cell struct */
/*             holding the cells to scan;        */
/*                                               */
/*             Pointer to a word into which the  */
/*             address of a reformat_cell will   */
/*             be returned - the given line lies */
/*             in this cell;                     */
/*                                               */
/*             Pointer to an int, into which the */
/*             offset, in OS coordinates, of the */
/*             top of the line from the top of   */
/*             the visible area is given (if     */
/*             the line is fully visible this    */
/*             will be <= 0, else if part of the */
/*             line is hidden off the top of the */
/*             window it will be positive);      */
/*                                               */
/*             Page y coordinate at top of       */
/*             window (taking into account the   */
/*             scroll position, any toolbars,    */
/*             and so forth);                    */
/*                                               */
/*             1 if the line must be wholly      */
/*             visible, else 0 if it may be just */
/*             partially visible.                */
/*                                               */
/* Assumes:    As browser_top_line.              */
/*************************************************/
d3068 11
a3078 13
/*************************************************/
/* browser_redraw_border()                       */
/*                                               */
/* Does a series of Wimp_ForceRedraw calls that  */
/* cause a border of 4 OS units around a given   */
/* image to be redrawn.                          */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the image;            */
/*                                               */
/*             Pointer to a token representing   */
/*             the image.                        */
/*************************************************/
d3179 21
a3199 24
/*************************************************/
/* browser_update()                              */
/*                                               */
/* Updates a window contents, using calls to     */
/* Wimp_UpdateWindow (so this can be used for    */
/* animations, etc., as the Wimp won't clear     */
/* the redraw area first).                       */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the window;           */
/*                                               */
/*             Pointer to a RedrawWindow block,  */
/*             with details of the area to       */
/*             redraw within it;                 */
/*                                               */
/*             1 to not draw backgrounds, or 0   */
/*             to allow them to be drawn;        */
/*                                               */
/*             0 to draw tokens normally, else a */
/*             pointer to a token which is not   */
/*             to have its contents redrawn,     */
/*             except as a selection indicator   */
/*             (see redraw_draw for more).       */
/*************************************************/
d3214 25
a3238 27
/*************************************************/
/* browser_update_token()                        */
/*                                               */
/* Redraws a given token, trying to minimise any */
/* flicker as the redraw is done.                */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the token to redraw;  */
/*                                               */
/*             The token address;                */
/*                                               */
/*             1 to not draw backgrounds, or 0   */
/*             to allow them to be drawn;        */
/*                                               */
/*             0 to draw tokens normally, else a */
/*             pointer to a token which is not   */
/*             to have its contents redrawn,     */
/*             except as a selection indicator   */
/*             (see redraw_draw for more).       */
/*                                               */
/* Returns:    Pointer to a _kernel_oserror      */
/*             struct, which is NULL unless the  */
/*             actual redraw call fails - so if  */
/*             the given token does not appear   */
/*             to be represented by any line,    */
/*             the routine fails silently.       */
/*************************************************/
d3281 33
a3313 35
/*************************************************/
/* browser_update_token_r()                      */
/*                                               */
/* Recursive back-end to browser_update_token.   */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the token to redraw;  */
/*                                               */
/*             Pointer to a reformat_cell struct */
/*             which holds the token or a table  */
/*             holding the token;                */
/*                                               */
/*             First line to check in the cell;  */
/*                                               */
/*             First chunk on the first line;    */
/*                                               */
/*             Last line to check in the cell;   */
/*                                               */
/*             The token address;                */
/*                                               */
/*             Cell origin x (window coords);    */
/*                                               */
/*             Cell origin y (window coords);    */
/*                                               */
/*             1 to not draw backgrounds, or 0   */
/*             to allow them to be drawn;        */
/*                                               */
/*             0 to draw tokens normally, else a */
/*             pointer to a token which is not   */
/*             to have its contents redrawn,     */
/*             except as a selection indicator   */
/*             (see redraw_draw for more).       */
/*                                               */
/* Returns:    As browser_update_token.          */
/*************************************************/
d3401 11
a3411 11
/*************************************************/
/* browser_update_bottom()                       */
/*                                               */
/* Redraws the browser window, from a given      */
/* work area y coordinate downwards.             */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the window to redraw; */
/*                                               */
/*             The y coordinate to redraw from.  */
/*************************************************/
d3461 12
a3472 12
/*************************************************/
/* browser_highlight_token()                     */
/*                                               */
/* Redraws a given token in a highlighted state; */
/* see redraw_token_colour in Redraw.c for the   */
/* colour it will be drawn as.                   */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the token;            */
/*                                               */
/*             The token address.                */
/*************************************************/
d3543 12
a3554 12
/*************************************************/
/* browser_clear_highlight()                     */
/*                                               */
/* Removes a highlight shown using the           */
/* browser_highlight_token function, with an     */
/* optional delay before doing so.               */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the token;            */
/*                                               */
/*             1 to wait first, else 0.          */
/*************************************************/
d3633 12
a3644 12
/*************************************************/
/* browser_flash_token()                         */
/*                                               */
/* 'Flashes' a token, by highlighting it with    */
/* browser_highlight_token and then clearing     */
/* the highlight after a short delay.            */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the token;            */
/*                                               */
/*             The token address.                */
/*************************************************/
d3652 13
a3664 14
/*************************************************/
/* browser_select_token()                        */
/*                                               */
/* Redraws a given token in a selected state.    */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the token;            */
/*                                               */
/*             The token address;                */
/*                                               */
/*             1 to scroll the window if needed  */
/*             to keep the token in the visible  */
/*             area, else 0.                     */
/*************************************************/
d3780 11
a3790 12
/*************************************************/
/* browser_clear_selection()                     */
/*                                               */
/* Removes a selection shown using the           */
/* browser_select_token function, with an        */
/* delay before doing so.                        */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the token;            */
/*                                               */
/*             1 to wait first, else 0.          */
/*************************************************/
d3897 31
a3927 36
/*************************************************/
/* browser_show_token()                          */
/*                                               */
/* Shows a given token at the top of the browser */
/* window.                                       */
/*                                               */
/* If the token is near the bottom of the page,  */
/* then the page extent is increased so that the */
/* window may still be scrolled to show the      */
/* token at the top. Despite introducing some    */
/* dead space at the page base, it gets very     */
/* confusing - particularly with Find functions  */
/* - to not be able to rely on the token being   */
/* actually moved to the top of the window.      */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the window;           */
/*                                               */
/*             The token address;                */
/*                                               */
/*             Offset into the token data which  */
/*             the chunk representing the token  */
/*             must straddle - i.e., it must     */
/*             start at less than or equal to    */
/*             this offset and end at greater    */
/*             than it;                          */
/*                                               */
/*             y shift, in OS units, to move     */
/*             after showing the token - if      */
/*             positive, the page will be        */
/*             scrolled so that items move       */
/*             vertically upwards, if negative   */
/*             it will be scrolled downwards.    */
/*                                               */
/* Returns:    1 for success, 0 for failure.     */
/*************************************************/
d4078 17
a4094 19
/*************************************************/
/* browser_ensure_visible()                      */
/*                                               */
/* Ensures that a given token is wholly visible  */
/* in the browser window, scrolling down or up   */
/* if needed.                                    */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the token;            */
/*                                               */
/*             A WimpGetWindowStateBlock pointer */
/*             for the browser window;           */
/*                                               */
/*             Pointer to the token itself.      */
/*                                               */
/* Returns:    1 if the window was scrolled,     */
/*             else 0. If there is an error      */
/*             internally, 2 is returned.        */
/*************************************************/
d4206 25
a4230 29
/*************************************************/
/* browser_check_visible()                       */
/*                                               */
/* Checks to see if a given token is wholly or   */
/* partially visible in a given browser window.  */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the token;            */
/*                                               */
/*             A WimpGetWindowStateBlock pointer */
/*             for the browser window (may be    */
/*             NULL);                            */
/*                                               */
/*             Pointer to the token itself.      */
/*                                               */
/* Returns:    1 if the token is wholly visible, */
/*             2 if it is partially visible,     */
/*             else 0. If there is an error      */
/*             internally, 0 is returned.        */
/*                                               */
/* Assumes:    If the WimpGetWindowStateBlock    */
/*             pointer is NULL, the function     */
/*             will find the information out     */
/*             itself. The block pointer can be  */
/*             passed in as calling functions    */
/*             may well already have this block  */
/*             available, so it makes sense to   */
/*             avoid finding it out again.       */
/*************************************************/
d4350 14
a4363 15
/*************************************************/
/* browser_show_named_anchor()                   */
/*                                               */
/* Given an anchor name, ensures that the window */
/* is scrolled to show the token associated      */
/* with that anchor name. If no match can be     */
/* found between the given name and the names of */
/* the tokens, the routine gives an appropriate  */
/* error message back to the user.               */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the window;           */
/*                                               */
/*             Pointer to the anchor name.       */
/*************************************************/
d4420 28
a4447 33
/*************************************************/
/* browser_display_local_reference()             */
/*                                               */
/* Checks a given URL against a given base URL,  */
/* and if it contains a local reference (i.e.    */
/* has '#<name>' at the end) but otherwise       */
/* matches the base URL, will try to find and    */
/* subsequently display the reference on the     */
/* page.                                         */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the page;             */
/*                                               */
/*             Pointer to the requested URL      */
/*             which may contain the reference;  */
/*                                               */
/*             Pointer to the base URL against   */
/*             which the first is compared.      */
/*                                               */
/* Returns:    1 if the reference is to be shown */
/*             (though if the reference may not  */
/*             actually be found on the page) or */
/*             0 if the reference will not be    */
/*             shown, because the base URL does  */
/*             not match the requested URL.      */
/*                                               */
/* Assumes:    Either pointer may be NULL,       */
/*             though this will ensure that 0 is */
/*             returned and thus it's not much   */
/*             use giving null pointers.         */
/*             The application must be able to   */
/*             write to the URL data.            */
/*************************************************/
d4485 11
a4495 13
/*************************************************/
/* browser_check_for_request()                   */
/*                                               */
/* Looks at the display_request field of the     */
/* given browser and sees if the page should be  */
/* scrolled down to meet any request this        */
/* implies. Intended for use for markers and     */
/* named in-page anchors during reformatter      */
/* loops.                                        */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the page.             */
/*************************************************/
d4536 27
a4562 34
/*************************************************/
/* browser_set_look()                            */
/*                                               */
/* Sets the 'look' of a browser window - i.e.    */
/* underlined links, using document or default   */
/* colour schemes, etc.                          */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             to alter (any in a frameset will  */
/*             do, as all frames are updated);   */
/*                                               */
/*             Object ID of the item generating  */
/*             this change, if appropriate (or   */
/*             zero if not);                     */
/*                                               */
/*             1 to underline links, 0 not to,   */
/*             -1 to not change this state;      */
/*                                               */
/*             1 to use document colours, 0 to   */
/*             use defaults, -1 to not change    */
/*             this state;                       */
/*                                               */
/*             1 to show foreground images, 0    */
/*             not to (any pending image fetches */
/*             are started up again if 1 is      */
/*             given), or -1 to not change this  */
/*             state;                            */
/*                                               */
/*             1 to show background images, 0    */
/*             not to (any pending image fetch   */
/*             for this is started if 1 is       */
/*             given), or -1 to not change this  */
/*             state.                            */
/*************************************************/
d4581 13
a4593 15
/*************************************************/
/* browser_set_look_r()                          */
/*                                               */
/* Recursive back-end to browser_set_look.       */
/*                                               */
/* Note that if open, the Print Style dialogue   */
/* is updated with these changes, if they apply  */
/* to the browser to which it is relevant (if    */
/* any).                                         */
/*                                               */
/* Parameters: As for browser_set_look. All      */
/*             children of the browser_data      */
/*             struct, along with that given     */
/*             struct, will be updated.          */
/*************************************************/
d4683 11
a4693 12
/*************************************************/
/* browser_give_general_focus()                  */
/*                                               */
/* Places the caret in a browser window, but in  */
/* no particular icon - it will appear in the    */
/* URL bar if one is visible, else the main      */
/* window will gain the input focus but the      */
/* caret will not be visible.                    */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the window.           */
/*************************************************/
d4755 15
a4769 16
/*************************************************/
/* browser_inherit()                             */
/*                                               */
/* Makes a given child browser inherit some of   */
/* the characteristics of a given parent.        */
/*                                               */
/* The post_data field is handled specially.     */
/* Please see browser_inherit_post_data for      */
/* details.                                      */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             representing the parent;          */
/*                                               */
/*             Pointer to a browser_data struct  */
/*             representing the child.           */
/*************************************************/
d4793 30
a4822 35
/*************************************************/
/* browser_inherit_post_data()                   */
/*                                               */
/* Part of browser_inherit which needs to be     */
/* used sometimes for windows that already exist */
/* but are being targetted by a POST form        */
/* submission.                                   */
/*                                               */
/* If there is a flex block attached through the */
/* post_data field of the parent, the contents   */
/* will be copied into a flex block attached to  */
/* the child's post_data field and then *freed*  */
/* in the parent.                                */
/*                                               */
/* This is because at present, the only time the */
/* parent will have such a block is if either an */
/* a button that submits a POST request was      */
/* clicked upon, or if that button targets       */
/* another browser window. In this case, you     */
/* don't want to leave the data attached to the  */
/* parent or the next fetch it does will         */
/* erroneously be sent as POST itself...!        */
/*                                               */
/* NB If the child which is to receive the flex  */
/* data from the parent (assuming the parent has */
/* any to give!) already had stuff attached to   */
/* post_data, this will obviously be freed       */
/* first.                                        */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             representing the parent;          */
/*                                               */
/*             Pointer to a browser_data struct  */
/*             representing the child.           */
/*************************************************/
@


1.26
log
@Everyone else seems to be checking lots of stuff in lately, so I've
decided to join in. This is an intermediate check-in and so not all
resources etc. will be up to date. You should be able to make Phoenix
and a debug build out of it. As a reminder, to make a JavaScript build:

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean. This now strips dynamic dependencies from the MakeFile
   automatically, to save you having to do it yourself.
 * Run one of the TaskObey files with the "J" suffix, e.g. !DeskBrwsJ -
   this uses the same .o directory for object files and exports to the
   same position in the Targets directory as the non-JavaScript build,
   but it does produce a unique binary in 'abs' and symbols table in
   'syms'.
 * Sourcing an appropriate !Run (with increased WimpSlot value), !Boot
   and About resource is done automatically.
 * Some, but not all of the !xxxD (debug) TaskObey files will make
   JavaScript versions in passing - check the JSUFFIX value on the Make
   command line parameters in the file.

This'll only work on RISC OS 3.1 due to the use of MemLib.

Here's the change list:

Included MNG icons in sprites files; added Sprites23 for some builds.
Added in ANT URL file icon (b28) derived from URI file icon, because
the Save dialogue can need it.

No, you do *not* need to define the same keyboard shortcuts in each
frame since the ancestor keeps the input focus and we've basically
dropped non-nested Wimp support. Maintaining no less than 4 lists of
identical shortcuts was a pain. Some Res files now only have the
lists in the main browser window and button bar objects (these two
are both required still).

Ursula build Markers button arrangement changed from 1x3 horizontal to
2x2 tilted, as in Phoenix, by popular demand.

Couple of hotlist bugs fixed; dragging an item and deleteing it with
Ctrl+X didn't terminate the drag, and deleteting an item underneath a
menu opened for it didn't close the menu.

'SendReferer' option added to all Choices files, all set to 'always'.
Put just beneath 'Clone' as it refers to header items, though really,
both Clone and SendReferer should probably be in the "Fetch controls"
section rather than "Multiuser environments and proxying"! Front-end
control of this is available.

In image_export_original, save_save_source, save_transfer_source and
save_save_object, flex_set_budge(0) was called to lock the heap but the
return value wasn't stored. flex_set_budge(1) was then used to unlock
the heap. All calls now remember and restore the old value, which is
both safer in case one calls another and allows the flex_set_budge
call in Main.c to have an application-wide meaning, as intended.

Some restructuring to the data load and RAM transfer sections of
Protocols.c; remote hotlist builds wouldn't allow files to be loaded
to browser windows before, and can now drop URL, URI or text files to
the Open URL dialogue.

New option "MinimumFontSize", lets the 'size' attribute of the 'font'
element be overridden. Default value is 1, to allow the full range of
values for the attribute. Setting to 7, for example, would give font
size 7 text at all times. Another new option, "ToggleOnXOnly", to
make Toggle Size only extend the window vertically (with Ctrl then
being used to toggle to genuine full size, rather than vice versa).
All Choices files updated to hold both of these options; only the
first has front-end control available (see debug build Res file).

JavaScript Document object exists; frames array etc. working. Can now
just about use "http://www.acorn.com/~ahodgkin/jschain/" but it does
abort after a bit - problems with frames again, I suspect. Is is pretty
slow, too. Can now press Escape to terminate a script.

Main.c erroneously referred to Controls file entry "StopWebServe" as
"StopWebProxy". Fixed.

Keyboard shortcuts to raise SaveFile are now possible in a general sense;
the code before was in the ToBeShown handler and just checked for a parent
component of -1. It then assumed "save frame HTML source". Now there's the
savefile_raise_from_shortcut function, which together with the seven new
event codes in SaveFile.h allows saving of HTML source and frame location,
export of links, images, backgrounds and the page as text or draw, to all
be invoked by keyboard shortcuts. Some Res files have some of these defined.

In reformat_check_height, the first check to see if setpara should be set
references a field in tpLast without checking if it is NULL. Whilst the
'line > 0' check should mean that tpLast wasn't NULL anyway, a direct
call to the function from outside of the reformatter might have tripped
up on this - the check for tpLast != NULL is now made.

Adjust-click on close icon in window showing file: URL attempts to open
the parent Filer window.

Reformatter used to try and find a selectable token if keyboard control
was enabled in a really stupid place - could make reformatting become
very slow if no selectables were present, especially if the page had a
few tables on it. Preprocessor now does this (since it goes through all
of the tokens anyway), the reformatter just doing a last check to ensure
no frames have obscured the selectable and if so, it tries to move it.
Done in the reformatter as generating a line array implies the data really
is visible.

Ctrl+Tab URL completion now builds a full list of matches from the hotlist
and history and can cycle through them (Ctrl+Shift+Tab stepping backwards).

Will give a real error rather than just "Data Abort" if it goes wrong
now. Someone somewhere is setting bit 30 of the error which confused
the replacement signal handler. Flag bits are now masked off (as they
should've been to start with).
@
text
@d1719 1
a1719 2
  int changed = 0;
  int look    = 1;
d1721 2
a1722 2
  if (!match_list) return 0;
  if (buffer_size < 2) return 0;
d1724 2
a1725 1
  /* Do we already have a list of URLs to match to? */
d1727 1
a1727 3
  if (*((char **) match_list))
  {
    int offset = 0;
d1729 3
a1731 1
    /* Does the URL writeable exactly match an entry? */
d1733 1
a1733 3
    while ((*((char **) match_list))[offset])
    {
      int len = strlen((*((char **) match_list)) + offset) + 1;
d1735 1
a1735 1
      if (!strcmp((*((char **) match_list)) + offset, buffer))
d1737 1
a1737 1
        int old_offset = offset;
d1739 3
a1741 1
        /* We have a match; jump to the next entry */
d1743 1
a1743 2
        offset += len;
        if (!(*((char **) match_list))[offset]) offset = 0;
d1745 6
a1750 3
        if (old_offset != offset)
        {
          /* Update the URL */
d1752 2
a1753 2
          strncpy(buffer, (*((char **) match_list)) + offset, buffer_size - 1);
          buffer[buffer_size - 1] = '\0';
d1755 2
a1756 2
          changed = 1;
        }
d1758 1
a1758 1
        look = 0;
d1760 6
a1765 5
        break;
      }
      else
      {
        offset += len;
a1767 1
  }
d1769 3
a1771 3
  if (look)
  {
    int found;
d1773 2
a1774 2
    /* We need to build a list of matches; free any */
    /* existing list first                          */
d1776 1
a1776 1
    if (*((char **) match_list)) flex_free(match_list);
d1778 2
a1779 2
    /* Try and find something appropriate in the hotlist, */
    /* then the history.                                  */
d1781 2
a1782 2
    found  = hotlist_find_match(match_list, buffer);
    found += history_find_match(match_list, buffer);
d1784 1
a1784 1
    /* If we found something, use the first entry */
d1786 4
a1789 4
    if (found != 0)
    {
      strncpy(buffer, *((char **) match_list), buffer_size - 1);
      buffer[buffer_size - 1] = '\0';
d1791 2
a1792 1
      changed = 1;
a1793 1
  }
d1795 7
a1801 1
  return changed;
@


1.25
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d52 1
d1497 2
d1509 35
a1543 1
  return b->urlfdata;
d1689 329
d2067 3
a2069 1
/* handler.                                      */
d2115 1
a2115 1
    pointer_is_over = 0;
d2120 1
a2120 1
  pointer_is_over = 0;
@


1.24
log
@All !Run[D], Choices, Messages, Controls and Res files are up to date.

RefoKeep and RefoHold options added to, respectively, try and maintain
the line at the top of the visible area when reformatting, and not shrink
the vertical extent at the start of a reformat to try and avoid flicker
to the top of the page and back down again when RefoKeep is on. Choices
front-end implemented, which also allows RefoWait and RefoTime to be set.
Unfortunately for various reasons this doesn't help the page jumping when
unsized images come in (but RefoHold can improve matters...) - roll on
the image history.

DragToScroll and NoScrollBars options added for frames; included new
pointer type, Mouse_Shape_DTS, so relevant Controls file entries done
and Sprites[22] files updated as required. Noticed some builds have
a low-res ptr_link with a mask - mask removed.

Named anchor following fixed up somewhat - anchors near the bottom of
the page shouldn't be displayed, and then pulled down when the fetcher
releases null polls and ensures the y extent is correct (this through
implementing the min_height field in the browser_data structure).

RefoHang was never implemented and there seems little point to it now,
so the entry for it has been removed from the global choices structure
and all Choices files.

Markers menus should work properly now (in last check-in they would not
update correctly if Adjust was used on the entries).

URI handler usage now a lot more sensible, with configuration of how the
browser uses the module from both a Utils menu submenu (sic) and the
Choices dialogue.

Slightly dodgy 'hang around waiting for user input' stuff for the Cookies
dialogue box: All fetches are suspended; the fetcher remembers some info
about its state at the time the cookie came in, and restores it later; it
will only do this for one fetch at a time. It's necessary to single-thread
the fetcher at this point anyway, since other fetches may have a
dependency on the cookie that is hanging in mid-air at that point. As part
of this, some of the fetcher code has been split out into separate
functions (to try and 'black box' the code a bit). Anyway, Cookie Query
dialogue box now implemented with appropriate Choices file entry and
UI work in the Choices dialogue box.

Phoenix build Choices rearranged. Can now choose when the image history
is saved from the front end. Added also MSIE 4-style table option menu
for JPEG support (OS only, OS if it can handle it, internal only).

Should be a bit faster at loading the history - though 95% of the time
is spent in SWI URL_ParseURL. URL descriptions are stored more
efficiently as part of this - one malloc block instead of several
small blocks. The minimum block size for malloc blocks typically leads
to a significantly smaller startup wimpslot depending on the visit
history size.

Nasty bug in image system fixed. If an image size came in and a reformat
was to take place, the line the image lies in is found and the reformat
progresses from there. Unforunately, this didn't check to see if the
token can't be found in the line list, so it'd reformat from the top
of the page...! This would happen if, for example, an image halfway down
the page came in whilst a reformat for an image higher up had just begun.

In Choices.c, made choices_set_timetype_field, choices_set_uri_field,
choices_set_plugin_field, choices_set_cookie_field, and
choices_set_jpeg_field static (so they're not declared in Choices.h now).

Two memory leaks plugged in URL comparison routines in URLutils.c
(calling free() url_description instead of urlutils_free_descripton()).

Client pull reload handler was setting the reload flag if reloading
the same page, but forgetting to turn on reload_lock so
fetchpage_postprocessed was clearing the reload state... Similarly,
Ctrl+Shift+SELECT-Click on a link when the Controls file 'UseSmall'
entry is 'no' would not have reloaded as it should. Both fixed.

Frames shouldn't be so keen on acquiring horizontal scroll bars and never
letting them go when their width is decreased now. Frames set up for
'scrolling="yes"' will not start with no scroll bars and then gain them
shortly afterwards, causing flicker and two reformats - they'll start
with, and continue to hold, both scroll bars.

Pointer shouldn't flicker when over a frame border whilst other fetches
are progressing now.
@
text
@d1513 4
a1516 3
/* displayed in a browser window, unless there   */
/* is none, in which case the fetch URL is       */
/* given; the pointer may still be NULL though.  */
d1522 1
a1522 2
/*             the fetch URL if none is          */
/*             displayed.                        */
d1536 33
d1598 28
d2014 1
d2330 2
d2336 7
d2356 15
a2406 1

d2408 1
d2412 1
a2412 2
        if (*ox >= box.xmax) *ox = box.xmax - 1;

d2790 9
d4206 53
@


1.23
log
@This is NOT a 'final' version of anything in particular. I'm checking it
in as I'm about to start playing around with low level window handling
(as part of the thing mentioned at the bottom of this log) - this could
screw things up quite badly if it goes wrong! =8*P

Consequently, I advise you not to check this out over your working sources,
and preferably not to check this out at all.

Markers system - events defined in MiscEvents.h will make Browse remember
where it is on the page. This position can be jumped back to later.
Some builds will have defined keyboard shortcuts Ctrl+Shift+F5 through
F8 to set a marker, and Ctrl+F5 through F8 to jump to a marker.

The front-end for the above now has gadgets 0x80 upwards on the Toolbar or
a set of menus (see Menus.h). Noticed an omission in copy_toolaction_info()
(didn't copy the gadget state) in passing; fixed.

browser_top_line() now works properly, as part of the above, but it'll be
slower than before. If flagged to only find a complete line, it'll do just
that, but whereas before this would require any tables that it looked
inside to be wholly visible, tables can now be partially visible and have
lines inside that are fully visible. This should help the Find function
too. There is a new call, browser_top_line_offset, which works as
browser_top_line but also returns a vertical scroll offset in the found
line (used for more accurate marker position). browser_bottom_line[_r]
turn out to never be used, even by the keyboard control routines, so they
have been removed from Browser.c (rather than spend a lot of time and
effort fixing them).

browser_show_token erroneously subtracted 1 from a particular coordinate
when calculating the y scroll position, which could lead to single pixel
page creep using the markers system. Corrected.

The View Resources button (see Toolbars.h) has been finally implemented,
insofar as it fetches the resources file to the current browser page (or
to a new window if Adjust is used, Controls file settings permitting).

menus_toggle_bars did not take account of the toolbar lower window border
edge correctly. It does now.

The reformatter has a prototype system to keep the vertical page position
when reformatting. This was coded about 5 minutes ago, and is not likely
to be reliable...
@
text
@d1655 4
a1683 1

d1747 7
a1753 5
  /* If we're dragging, exit */

  if (drag_in_progress) return 0;

  if (wimp_get_pointer_info(&p)) return 0;
d3683 2
@


1.22
log
@The '3F6C0' abort fixed; reformat_left_margin didn't cope with a NULL
cell pointer. This only happened if the image library tried to deal with
an image in a table cell which wasn't properly dealt with by the table
systems yet, for whatever reason. Rare, but persistent once it started
happening because it depended on the value of the FIQ vector!

Put function header comments in SaveFile.c, at last.

Messages files now read version 2.01, 23 Feb 1998.
@
text
@d70 1
a70 2
static int               browser_top_line_r            (browser_data * b, reformat_cell * cell, reformat_cell ** ret_cell, WimpGetWindowStateBlock * s, int fully_visible);
static int               browser_bottom_line_r         (browser_data * b, reformat_cell * cell, reformat_cell ** ret_cell, WimpGetWindowStateBlock * s, int fully_visible);
d2409 2
a2414 41
  return browser_top_line_r(b, b->cell, ret_cell, s, fully_visible);
}

/*************************************************/
/* browser_top_line_r()                          */
/*                                               */
/* Recursive back-end to browser_top_line.       */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the window;           */
/*                                               */
/*             Pointer to a reformat_cell struct */
/*             holding the cells to scan;        */
/*                                               */
/*             Pointer to a word into which the  */
/*             address of a reformat_cell will   */
/*             be returned - the given line lies */
/*             in this cell;                     */
/*                                               */
/*             A WimpGetWindowStateBlock pointer */
/*             holding details of the browser    */
/*             window;                           */
/*                                               */
/*             1 if the line must be wholly      */
/*             visible, else 0 if it may be just */
/*             partially visible.                */
/*                                               */
/* Returns:    As browser_top_line.              */
/*                                               */
/* Assumes:    As browser_top_line.              */
/*************************************************/

static int browser_top_line_r(browser_data * b, reformat_cell * cell, reformat_cell ** ret_cell,
                              WimpGetWindowStateBlock * s, int fully_visible)
{
  int y, l, htop;

  if (!cell) cell = b->cell;

  if (!cell->nlines || !cell->ldata || !cell->cdata) return -1;

d2422 1
a2422 98
  l = 0;

  /* Find the line */

  while (
          l < cell->nlines &&
          cell->ldata[l].y + (fully_visible ? cell->ldata[l].h : 0) > y
        )
        l++;

  /* If l >= number of lines, nothing was found */

  if (l >= cell->nlines) return -1;
  else
  {
    HStream * first_token = cell->cdata[cell->ldata[l].chunks].t;

    *ret_cell = cell;

    /* Otherwise, is there a table in the line? */

    if (first_token->tagno == TAG_TABLE)
    {
      table_stream   * table     = (table_stream *) first_token;
      table_row      * row       = NULL;
      table_headdata * head      = NULL;
      reformat_cell  * c         = NULL;
      reformat_cell  * cellarray = table->cells;
      int              cellmax   = table->ColSpan * table->RowSpan;
      int              cellcount = 0;
      int              cellindex;

      /* Proceed if the cell array can be found */

      if (cellarray)
      {
        row = table->List;

        while (row && cellcount < cellmax)
        {
          head = row->List;

          while (head && cellcount < cellmax)
          {
            switch (head->Tag)
            {
              case TagTableData:
              case TagTableHead:
              {
                /* Find the reformat_cell structure for this table cell */

                cellindex = head->RowOffs * table->ColSpan + head->ColOffs;

                if (cellindex < cellmax)
                {
                  c = &cellarray[cellindex];

                  /* If it has lines, recursively call this function to find the */
                  /* cell line at the top of the window.                         */

                  if (c->nlines)
                  {
                    l = browser_top_line_r(b, c, ret_cell, s, fully_visible);

                    /* If a line can be found inside this cell then return it immediately, */
                    /* rather than worrying about the other cells. Otherwise, continue     */
                    /* scanning cells. Since table cells are arranged left right, top to   */
                    /* bottom, and we are looking for the top line, this will work OK.     */

                    if (l >= 0) return l;
                  }
                }
              }
              break;
            }

            cellcount ++;

            head = head->Next;

          /* Closure of 'while (head && ...)' */
          }

          row = row->Next;

        /* Closure of 'while (row && ...)' */
        }

      /* Closure of 'if (cellarray)' */
      }

    /* Closure of 'if (first_token->tagno == TAG_TABLE)' */
    }

  /* Closure of 'else' case for 'if (l >= cell->nlines)' */
  }

  return l;
d2426 1
a2426 1
/* browser_bottom_line()                         */
d2428 3
a2430 3
/* Returns the line number displayed at the      */
/* bottom of the visible area of the browser     */
/* window.                                       */
d2440 9
d2451 1
a2451 5
/*             window;                           */
/*                                               */
/*             1 if the line must be wholly      */
/*             visible, else 0 if it may be just */
/*             partially visible.                */
d2454 1
a2454 1
/*             displayed at the bottom of the    */
d2458 1
a2458 1
/* Assumes:    That none of the parameter        */
d2462 1
a2462 2
int browser_bottom_line(browser_data * b, reformat_cell ** ret_cell,
                        WimpGetWindowStateBlock * s, int fully_visible)
d2464 2
d2469 8
d2478 1
a2478 1
  return browser_bottom_line_r(b, b->cell, ret_cell, s, fully_visible);
d2482 3
a2484 1
/* browser_bottom_line_r()                       */
d2486 7
a2492 1
/* Recursive back-end to browser_bottom_line.    */
d2505 13
a2517 3
/*             A WimpGetWindowStateBlock pointer */
/*             holding details of the browser    */
/*             window;                           */
d2523 1
a2523 3
/* Returns:    As browser_bottom_line.           */
/*                                               */
/* Assumes:    As browser_bottom_line.           */
d2526 2
a2527 2
static int browser_bottom_line_r(browser_data * b, reformat_cell * cell, reformat_cell ** ret_cell,
                                 WimpGetWindowStateBlock * s, int fully_visible)
d2529 1
a2529 1
  int y, l, hbot;
d2535 1
a2535 4
  if (!controls.swap_bars) hbot = toolbars_status_height(b);
  else                     hbot = toolbars_button_height(b) + toolbars_url_height(b);

  if (hbot) hbot += wimpt_dy();
d2537 1
a2537 7
  y = s->yscroll                                    -
      (s->visible_area.ymax - s->visible_area.ymin) -
      hbot;

  l = cell->nlines - 1;

  /* Find the line */
d2540 2
a2541 2
          l >= 0 &&
          cell->ldata[l].y + (fully_visible ? 0 : cell->ldata[l].h) < y
d2543 1
a2543 1
        l--;
d2545 1
a2545 1
  /* If l < 0, nothing was found */
d2547 1
a2547 1
  if (l < 0) return -1;
d2554 18
a2571 1
    /* Otherwise, is there a table in the line? */
d2573 10
a2582 1
    if (first_token->tagno == TAG_TABLE)
a2596 4
        /* Since we're finding the bottom line and table cells are arranged */
        /* left to right, top to bottom, we need to start at the last row   */
        /* of the last column.                                              */

a2598 2
        while (row && row->Next) row = row->Next;

a2602 2
          while (head && head->Next) head = head->Next;

d2623 12
a2634 1
                    l = browser_bottom_line_r(b, c, ret_cell, s, fully_visible);
d2641 1
a2641 1
                    if (l >= 0) return l;
d2650 1
a2650 1
//            head = head->Prev;
d2655 1
a2655 1
//          row = row->Prev;
d2669 1
d3529 8
a3536 1
/*             than it.                          */
d3541 1
a3541 1
int browser_show_token(browser_data * b, HStream * token, int offset)
d3597 20
a3616 20
  if (l < cell->nlines)
  {
    for (c = 0; c < cell->ldata[l].n; c++);
    {
      /* If the chunk represents the given token,                          */
      /* its data offset is less than or equal to the offset specified, or */
      /* its data offset plus length is greater than the offset specified, */
      /* then we've found the token, it's already at the top so just exit  */
      /* but flag that the routine was successful.                         */

      if (
           cell->cdata[cell->ldata[l].chunks + c].t == token &&
           cell->cdata[cell->ldata[l].chunks + c].o <= offset &&
           cell->cdata[cell->ldata[l].chunks + c].l + cell->cdata[cell->ldata[l].chunks + c].o > offset
         )
         return 1;
    }
  }

  /* It wasn't at the top, so need to do a bit more work. */
d3625 1
a3625 1
    /* Set y to the coordinate of the topmost part of this line (hence the '-1') */
d3627 1
a3627 1
    topy = cell->ldata[l].y + cell->ldata[l].h + ory - 1;
d3661 1
a3661 1
  s.yscroll = fy + htop;
d3992 1
d4005 1
@


1.21
log
@*Don't* try to load FilterManager 0.18 in !Run[D] files. Requires
WindowManager 3.98. Sets URI handler environment variables for
http, ftp and gopher.

Fixed 'doesn't reformat for unsized images' bug - only happens when the
deferred reformatter is enabled, hadn't remembered to check this in my
debug build where this is turned off. Oops.

Caret position in forms could get left behind despite attempts to rectify
this in v1.31 - now fixed (and faster, fortunately).

Hourglass + percentage displayed for History and Image History when
loading - it can take a while for very big histories, though in
practice you only see the visit history loading (has to do a lot
more work, and is thus quite a bit slower than the image history).

POST forms worked when targetted to frames, but were broken when
not targetted! (Forms data inherited from one browser to the same
browser; ended up freeing the flex block...). Fixed.

Now support 303 response code (redirect to GET). Treated as 301, i.e.
not support if STRICT_PARSER is defined, otherwise drops through to
the 302 handling code.

Pointer shouldn't get stuck in odd shapes when going to a new page now;
it gets reset to a standard shape every time the null handler that
checks the position is called, though (whether or not the handler thinks
the pointer is over a different token, if that token is NULL, it sets
the standard shape). A possible work around would be for a browser to
remember the pointer shape too; that's for the future, though.

Early stage table formatting functions could blow themselves apart if
tables_count_table decided there were no rows, columns or both. A
net table size of zero cells is now dealt with; slow, partial table
fetches in multiple windows with image loading turned on will now
*hopefully* be stable, where v1.31 would have bombed out repeatedly.

A nested frameset within one document will now inherit the border
width (frame spacing) and border colour of its parent. This is done
by copying the maxlen and indent fields of the parent token over
the child, and note it's done in the browser (fetch_preprocess_token),
not HTMLLib.

Border colour on a FRAMESET now used, with the first colour on any
FRAME within it overriding, as in NN 4 and MSIE 4.

<LI> bullets really do stick to the text next to them now (I'd done
that in an experimental piece of code and forgotten to merge it back
before the last check-in).

Browse$HotlistURL/URIFile and Browse$HomeURL/URIFile now work from
_TaskName in the Messages file, and are thus of the generic form
<App>$HotlistURL etc. - Docs.Notes and Docs.User updated appropriately.

Event 0x11d00 through to 0x11d7f will make the browser look up Controls
file entries 'JumpTo00' through to 'JumpTo7f' and read a URL from them.
This will be fetched in the ancestor window of the source of the event,
or a new window if such an ancestor can't be found [for Daytona demo].

NB: Nasty frames-related crash at http://www.teledanmark.dk/menu/start.htm
is *not* fixed in this source. NOBR is not supported.
@
text
@d2358 2
d2451 2
d2638 2
d3014 2
@


1.20
log
@Check for WindowManager 3.97 and ensure Unicode$Path is set in all
!Run[D] files, don't set the Alias$@@PrintType_FF4 variable, and updated
Customer build ROM obey file variants. Various other changes to
the Run files for new module versions, updated paths to support
new positions of choices, hotlist and histories (see later), etc.

!Sprites[22] files hold small !app icons for some variants, and
an ic_browse sprite. Some variants now have a Sprites and Sprites22
file instead of just Sprites, with the former containing various
mode 12 or 15 specific sprites.

Text files dragged to the URL writable are treated as ANT URL files. This
relies on URLBarWrit (Toolbars.h) being a unique ID, which it should be,
but beware of the Hotlist and Choices numberspaces...

INPUT TYPE=BUTTON supported. Form items without a FORM tag are now shown
(as MSIE 4, but not NN 4).

'*', '-', '@@', '_' and '.' are not escaped when submitting forms now. The
Web interface to the IMDb now works.

INPUT TYPE=HIDDEN items will not affect the line height anymore - so
http://www.hotmail.com/ now has correctly aligned writable icons, for
example. Similarly, TAG_FORM and TAG_FORM_END items could push up
line height and don't anymore.

HRs with a specified pixel width will now influence the size of a table
cell (they didn't before).

BRs now checked by tagno field when the browser needs to know something
was an actual BR tag rather than just a line break signal, and by the
style bit entry when only the indication of a line break is required.

Table widths of 0 or 0% are ignored.

Trace.c updated to report height and background fields in a table_stream.

fm_putsl() writes a terminator into the string; the Forms.c routines were
calling this for displaying INPUT TYPE=PASSWORD fields using the FE_PassCode
literal string (a line of stars). This write into a read only data area
would make the debugger fault the access. A local char array is now used
instead, to get round this (note the use of var[]=literal rather than
var[sizeof(literal)]; strcpy(var, literal) due to some weird compiler bug
that copies the wrong thing into 'var' under some (undefined...)
circumstances).

Text areas don't scroll back to the top line when clicked in anymore;
single line writables don't scroll back to the left either. When
reentering a text area from 'above', the caret appears at the top line
rather than 'somewhere further down'...

ARROWS_MOVE_OUT compile time option at the top of Forms.c defines whether
you must press Tab/Shift+Tab to move between writable fields in forms or
if up/down will drop out of them, though if keyboard control is on this
is enforced (or you get trapped inside the form!).

urlutils_filetype_from_url now uses MimeMap module.

If fetcher is told a page is text, it'll check for a filename extension and
may choose to use this instead (e.g. it may find it's HTML instead). This
is to try and get around duff servers... (e.g. http://www.batalarms.co.uk/).

Save dialogues shouldn't flicker when options that don't change the
filetype are selected (before, the draggable sprite was always reset for
each selection). Noticed the erroneous setting of a static variable in
SaveFile.c by a call to this by SaveObject.c, and so added a flag to
savefile_set_filetype to deal with this - would have been possible to get
the wrong filetype sent to applications or at best the wrong filetype
sprite in the dialogue without that.

The caret shouldn't jump out of a form back to the URL writable if the page
reformats now.

Table background colours now supported (as in the colour you see in the
border space if the cellspacing is large enough; this is as in MSIE, not
as in Navigator). Drawfile output routines updated accordingly.

Corrected erroneous use of wimpt_dx() / wimpt_dy() in a couple of places
in Images.c, which meant that (say) 1x1 images didn't work correctly in
medium resolution display modes.

Now have support for save as text (component ID and event 0x12) and save
as Draw (component ID and event 0x13) buttons. Dubious conditions for
greying and ungreying the print, save source and view source buttons and
menu options sorted out as part of implementing the same for the two new
buttons; added greying out of their associated menu items in passing.

Turned kerning on in draw file objects (does mean a rather heinous
increase in file size, but this is the only way to ensure the draw file
matches the visible page).

Comments before functions in SaveDraw.c are now complete and up to date.

Image and visit histories now generate a crude hash number to speed up
searching for items. It does give a speed increase, though it's a
disappointingly small one.

Issue of left/right margins and cellpaddings sorted out. Now have
redraw_left/right_margin for finding out the basic gap you must leave.
redraw_left/right_gap then gives any extra indentation for LI, BLOCKQUOTE
or whatever. The last two can be subtracted from the display width to
get an available page width for any section of text. Note that
redraw_left_gap replaces redraw_margin. The redraw_start_x function
uses the above to work out where a line's left hand edge should be,
taking account of left/right/centre alignment. HRs have been fixed now
(they were quite broken in v1.30, I think) based on this new model and
the behaviour of MSIE/NN 4.

Fixed width of cells with no contents - cell padding values wouldn't
have worked properly as the reformatter returns 0 rather than the left
hand margin size if given no stream.

Removed FM_Absolute flags for Font_Paint (spotted by DBrown) - sets bit
2, which is reserved...?

IMG width and height in % terms now works correctly; a % of available
width (after margins and indents) or height on the main page or for
a table cell, if the image lies in one. Because of the chicken-and-egg
problem with the latter, the cell must specify a width and/or height
for things to work properly. If this is not done, you'll usually end
up with a 1:1 scaled image (as in Navigator 4, rather than ending up
with no image or even no cell (!), as in MSIE 4).

HEIGHT attribute on a TABLE tag is supported, but only in a crude
fashion; the extra height (if there is any) is distributed over the
rows in a linear fashion. This is probably all you have to do in
practice, but I haven't checked. To maintain a notion of min/max
height as well as width would of course require a great deal more
work...

If using client pull to reload a page with a fragment ('...#name')
specified, then the reload wouldn't work on the same page; it'd just
jump to the fragment position. This won't happen if b->reloading is
set now (so works in conjunction with client pull on the same page
forcing a non-cached fetch). Similarly, if POSTing to such a URL,
a fetch will proceed (both these fixes done originally for
http://jupiter.beseen.com/chat/rooms/g/1678/).

browser_inherit split to browser_inherit and browser_inherit_post_data;
the code for the latter didn't clear any post_data in the child before
copying from the parent either, and could cause flex errors (now fixed).

Res file for Ursula ('Desktop' Browse) build tweaked - bits in the
font choices dialogue renamed, and button bar rearranged to hold the
new Save As Draw button. Other builds have had Save As Draw and
Save As Text buttons added, or not, depending upon availability of
suitable sprites, required UI simplicity, etc.

Now have:

  Browse$ChoicesFile
  Browse$ControlsFile
  Browse$ChoicesSave
  Browse$ControlsSave

(the last two are new) for loading and saving of the Choices or Controls
files. If unset, <App$Dir>.Choices or <App$Dir>.Controls will be set.
E.g., you could set Browse$ChoicesFile to be:

  <App$Dir>.Choices,Choices:WWW.(app).Choices

for loading and

  <Choices$Write>.WWW.(app).Choices

for saving. (The browser never saves Controls at the moment, so the
relevant variable above isn't effectively implemented, but could be
in future). Similarly, to support asymetric loading/saving of the Hotlist,
there are HotlistSave, HistorySave and ImageHistorySave entries in Choices
to complement HotlistPath, HistoryPath and ImageHistoryPath (which are used
for loading). save_save_choices will create directories as needed to obtain
the given path (and has also been fixed in various areas that hadn't been
tested out until now; e.g. zero termination of the AppName$ChoicesFile
variable expansion...). !Run[D] files updated appropriately.

Table widthing code rewritten. Slower, but a lot better on the whole.
Still has some problems - still needs a final 'make sure nothing is
below minimum width' scan, which it should be possible to do without.
No time to fix this at present!

The reformatter will now 'glue together' an LI token followed by any
non-LI token; so a bullet point followed by an item should not be able to
have a line break inserted after the bullet because of very tight width
constraints (it could before - yuk...).

'about:' brings up a page about the browser and any Plug-Ins, as with
Navigator (for example).

URI files support titles, as per spec. version 8. Saving a current
location to the Hotlist will thus give a sensible title now (unless
you're in a frame, so there's no title to get...). Of course, v1.00
files without a title still work.

Note that NOBR is *not* supported in this build and this combined with
the new table widther may cause problems on some sites (e.g. Microsoft's
home page!).
@
text
@d1816 7
@


1.19
log
@There are a few known significant problems with this code but it's being
checked in so the Choices can be worked on. Note that Res files etc. are
not up to date across all builds. Progress is as follows...

Bug report prompted me to do this - now ignore <p> tags straight after
<li> tags, so '<ul><li><p>Some text' works as the author (or automatic
generator, more commonly) intended.

A <p> tag before a table will be acted upon now (it was ignored before).
Something like <li><p><table...> will give a line break and paragraph
space after the <li> despite the changes mentioned above, as in other browsers.
Both browsers differ from Navigator, where the table appears alongside
the <li> tag.

Multiple BR tags work as in MSIE / Navigator (they don't collapse to
zero height anymore).

For the above, line height (and so, <br><br> or <p> spacing) is now
calculated inside reformat_text_line_height, and is used with either
a token to get the text height at a given size (e.g. for general line
spacing or multiple BR tags) or NULL for normal size text (e.g. for
P spacing, though this value is in practice later scaled by 7/8ths in
reformat_check_height). Note this behaviour is exhibited by MSIE 4;
v3 gave two BRs the same spacing as one P (i.e. not font size
dependent).

Save dialogues can have an option button or couple of radios to
switch between various formats (e.g. URI or URL, sprite or original
format). See 'Docs.Notes' for more. The back-end to this is now
implemented (i.e. at the moment, save as URI or URL, save as original
image format). Note that when saving background images, a leafname
based on the original fetch URL is now offered rather than a generic
'Background'.

Internal URL scheme changed to be all lower case, so relativisation
through URL_Fetcher still makes sense... :-/

Holding down 'shift' when clicking on stop reverses the interpretation
of the Controls file 'StopWebServe' entry.

Fixed row / column count for exporting tables as text; fixed a few
bits and pieces of internal URL scheme stuff which got broken when
HTMLLib started using URL_Fetcher's relativisation.
@
text
@d1537 29
d4156 3
a4158 3
       strncmp(url_requested,
               url_current,
               (int) p1 - (int) url_requested)
d4404 3
a4406 12
/* The post_data field is handled specially. If  */
/* there is a flex block attached through this   */
/* to the parent, the contents will be copied    */
/* into a flex block attached to the child's     */
/* post_data field and then *freed* in the       */
/* parent. This is because at present, the only  */
/* time the parent will have such a block is if  */
/* an adjust-click on a button that submits a    */
/* POST request is done. In this case, you don't */
/* want to leave the data attached to the parent */
/* or the next fetch it does will erroneously be */
/* sent as POST itself.                          */
d4432 48
d4491 4
a4523 2

  /* Finished */
@


1.18
log
@Image history - sizes of images are remembered for future reference (if
the sizes aren't specified in the HTML, they can be looked for in the
image history instead to minimise reformatting requirements). Choices
file options ImageHistoryPath, ImageExpiryAge, ImageMaxSize and
SaveImageHistory added to support this (all have a direct analogy to
the global History items of the same name after removing 'Image').

Text area items are now the correct height for the number of rows
specified in the HTML, don't scroll a line too early, and have the
caret placed at the start of the text when moved into from above
or at the end when moved into from below (rather than always at
the end, which was behaviour inherited from single line writables,
where this is desirable). The top of the text area is aligned to
the top of any line of text on the same line, with the text area
dropping below the text, rather than the bottom of the area matching
the text baseline and extending upwards.

Filename extensions for download files are only stripped if an
attempt to convert to a RISC OS filetype through the Mime Mapper module
does not return an error or Data (0xffd) filetype. '.cgi' is a special
case which is always stripped.

Altered heading styles - all are bold, none are italic, H3 is as big
as H2 was, H2 is a little larger, and others scale down to H6 being
the size as normal text (but, as I say, bold).

Sorted out tables and forms. We can just look for tagno=TAG_FORM, and
get rid of the wobbly form_flag; also discarded the redundant
reprocess_table flag in fetch_preprocess_token. Two separate forms
in consecutive table cells (for example) which used to fail - they
were submitted as one single form - will now work correctly.

Fixed nasty bug in FontManage.c where font size 7 would intermittently
fail. The stupid font sizes that it could ask the Font Manager for may
be responsible for the occasional Font Manager crashes that have been
noticed. Array for font sizes was declared as [Limits_FontSizes], but
indices 1 to Limits_FontSizes are actually used - so needed a '+ 1'
in the declaration... :-/

Replaced the case insensitive string comparison functions in Utils.c
with more efficient versions by S.Brodie.

MAXLENGTH specifier in INPUT tags is now supported. If unspecified or
specifically zero, the browser overrides and allows any length.
@
text
@d4211 2
a4212 3
  _kernel_oserror * e;
  int               child;
  int               redraw = 0;
d4397 1
a4397 3
  _kernel_oserror * e;

  /* Be very cautious */
@


1.17
log
@Following the last check-in - all build resources brought up to date.

Adjust-click on forwards/backwards buttons did not work in the intermediate
build, and now does.

Adjust-click on form submission buttons where the submit method is POST
will now work correctly, as the new view inherits the extradata block
of the old. Failure of this is signalled through
make_no_fetch_memory_error, code 16 (see updated Errors file in Docs).
Note the name change of extradata in this context; more details below.

The passing of forms POST data and extra headers for sending in an
HTTP request via. the URL module was all done through pointers into
flex blocks, and was therefore very unsafe. All relevant functions now
use pointers to pointers to the data.

To remove confusion on the umpteen uses of the word 'extradata', the field
in browser_data has been renamed to 'post_data'. The 'extradata' parameters
used within FetchPage.c were all disconnected from the extra header info /
form POST data stuff that extradata is usually associated with, and have
thus also been renamed, in this case to 'appnddata' (Append Data).

As well as X-NoProxy, the browser sends the 'proper' HTTP headers
Pragma:no-cache and Cache-Control:no-cache.

A redirection from a POST request was not handled correctly; despite
what HTTP specs say, you're supposed to use GET for the new URL. The
browser was, but when it chopped off the redundant header data in the
request didn't terminate it and left Content-Type in anyway...! Fixed.

Ctrl+Tab implemented - URL completion. Comes from the hotlist URLs,
hotlist titles, history hosts, paths, full URLs and lastly titles.
See code comments for more (history_find_match, hotlist_find_match).

TableSupport option added to Choices; it is read, can be set by the
front-end, but doesn't actually do anything else yet.

Reversed Choices' semantics on 'don't expire by...' for History. Added
'needs_redraw' flag to choices_get_contents so that, for example, if the
table border types change, browsers get redrawn.
@
text
@a1248 1

d1280 1
a1280 1
                          key == akbd_RightK ? 1 : 2,
@


1.16
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d2735 1
a2735 1
  int                       more, x, y;
d2745 3
d2756 2
a2757 2
  /* Add in the offsets to the image size, with an extra */
  /* amount accounting for the selection border.         */
d2759 4
a2762 4
  r1.xmin += x - 4;
  r1.ymin += y - 4;
  r1.xmax += x + 4;
  r1.ymax += y + 4;
d4377 13
d4415 41
@


1.15
log
@Removed 'The Onion' link from some Hotlist files. Time showed that the
site wasn't entirely Family Friendly (TM)... Removed Shift Control (it's
gone offline now), and corrected the Telegraph URL from ...the-telegraph...
to just ...telegraph...

StrongHelp manual generator now tries to work out the number of lines in
the table on the root page more intelligently.

Plug-in support extended to handle Shockwave. Quite a lot of underlying
work for this, including a pseudo cache system for temporary files.

Bug in redraw routines: they plotted background images within table
cells, when nothing should have been drawn. Oops. When background images
in cells are properly supported, this can get sorted out.

Tweaked vertical plot position of HRs (up to 4 OS units too high before due
to rounding).

Various Res file bits and pieces, Ursula build taken up to v1.26 beta
for release on the Browser site. *Note* not all resources are up to date!
This will be done after AW97.
@
text
@d47 1
d51 1
d1350 4
d1713 1
d1764 24
d1791 1
a1791 1
  if (tp != handle->pointer_over)
d1802 7
a1808 1
      if (tp && ISLINK(tp))
d1810 59
a1868 2
        if ((tp->style & IMG) && (tp->type & TYPE_ISMAP)) mouse_set_pointer_shape(Mouse_Shape_Map);
        else                                              mouse_set_pointer_shape(Mouse_Shape_Link);
d1870 1
d4364 37
@


1.14
log
@Added MimeMap module support. OBJECT routines now use this to determine
if the item is an inline image, and if so pass it to the image routines.
At present, support relies on a (correct) content type.
@
text
@d44 1
d2125 2
a2126 2
                (tp->style & IMG)         ||
                (tp->tagno == TAG_OBJECT) ||
d2135 2
a2136 2
        if (tp->tagno == TAG_OBJECT) reformat_get_object_size(b, tp, &box);
        else                         reformat_get_image_size (b, tp, &box);
d2142 1
a2142 1
        else if (tp->tagno == TAG_OBJECT)    brdr = HtmlOBJECTborder(tp) * 2;
@


1.13
log
@Calling HtmlEndParse at the end of html_get_next_token and setting
up->context to NULL was wrong; fetch_fetcher would end up recalling
html_get_next_token later which would then call HtmlParse even though
the document parse had just finished! The HtmlEndParse call has now
been moved to fetch_stop.

Altered reformatter to claim fonts inside a browser, rather than
claiming them for nothing and losing them afterwards.

Got rid of TAG == TABLE and ISBODY tests, replacing with tagno == TAG_TABLE.
Removed all references to TD, TH, TR and TABLE in the style word.
@
text
@d2124 2
a2125 1
                (tp->style & IMG) ||
d2132 1
a2132 1
        reformat_get_image_size(b, tp, &box);
d2134 2
a2135 1
        /* Correct for the border size, if the image is a link */
d2137 2
a2138 3
        if (ISLINK(tp) && (tp->style & IMG))
        {
          int b;
d2140 2
a2141 1
          b = tp->maxlen * 2;
d2143 6
a2148 4
          box.xmin += b;
          box.ymin += b;
          box.xmax -= b;
          box.ymax -= b;
@


1.12
log
@Now working on source merged with Kevin Bracey's internationalisation
support. UNIFONT is undefined in the Make File for now. All Res and
Choices files updated appropriately.

Having sorted out the old Choices and Messages to form Choices, Controls
and Messages, this build has had the same cleaning up done internally.
This includes greater consistency in naming schemes and the removal of
the inconsitent choices items - e.g. Choices file entries saying 'delay
images' and 'plain backgrounds' where internally all the flags say 'show
images' and 'show backgrounds'. ChoiceDefs.h and CtrlDefs.h added to
clarify the meaning of some fields, though usage of these is not 100%
in the source (there are cases where parameters are passed through to
functions as ints, and those functions still check these against hard
coded values rather than the #define stuff).

Fetcher status return bits (connected, sent request, etc.) now reflected
in status bar. Progress during fetchs to files are reported by %, where
the size of the object is known. Exceeding 100% drops back to a byte
counter, in case the estimated size was wrong. The progress counter
may be updated after specific delays, rather than 'as often as possible',
to reduce flicker (as requested by D.Brown some time ago).

I've done a small rewrite of the fetch prioritisation scheme in FetchPage.c;
how well this performs in general use across different processor speeds
remains to be tested, but certainly it has some advantages. For each small
fetch window before the rewrite, a 4cs tight loop was entered - this gave a
noticable and substantial drain to the Desktop performance if more than one
was opened. Now, several can be up at once with little hit. The actual file
fetch is on half the priority it was before, with all others taken back
just a bit - e.g. from 20cs per poll to 15cs per poll for flat out
reformatting. You don't seem to lose much time on the format in practice,
and the Desktop feels quite a bit lighter at the same time. There's the
potential for smoother frameset loading in this scheme, too.

When Shift+Clicking on a link meant you still fetched inside the main
browser window, several fetches could occur in a frameset - one per frame.
However, now that you can only do this by clicking on a link that leads to
non-displayable data - or by turning off the small fetch windows by
setting UseSmall to 'no' in Choices - a bug where fetchpage_preprocessed
would stop such fetches as new ones were started was revealed.
The API to frames_abort_fetching has now been extended to include a
'stop file spooling too' flag, allowing a fix to be made by having
fetchpage_preprocess's calls not set this (and it doesn't check the
savelink flag is unset before proceeding, since frames_abort_fetching
does that implicitly now).

Had left the RAM transfer buffer at 16 bytes (from testing) accidentally...
Oops. Upped it to 4K. In addition, when loading data by RAM transfer,
the browser didn't notice if a RAMFetch bounced during the transfer. It
would be treated as a 'first' RAMFetch bounce, basically, and try to go to
file transfer - oops. Fixed.
@
text
@d663 1
a663 1
        if (t->tag == TABLE && ISBODY(t))
d971 1
a971 1
        if (t->tag == TABLE && ISBODY(t))
d1980 1
a1980 1
      if (tp->tag == TABLE && ISBODY(tp))
d2118 1
a2118 1
      /* Closure of 'if (tp->tag == TABLE && ISBODY(tp))' */
d2344 1
a2344 1
    if (first_token->tag == TABLE && ISBODY(first_token))
d2414 1
a2414 1
    /* Closure of 'if (first_token->tag == TABLE && ISBODY(first_token))' */
d2531 1
a2531 1
    if (first_token->tag == TABLE && ISBODY(first_token))
d2609 1
a2609 1
    /* Closure of 'if (first_token->tag == TABLE && ISBODY(first_token))' */
@


1.11
log
@Support for ANT URL broadcast message added.

Image deletion routines rewritten; nasty animated GIF bug now gone
(it kept trying to update the cross-referenced image in the browser that
no longer existed, and I've no idea how animated GIFs ever managed to *not*
blow up if a cross referencing browser was shut down; and I've tested
this...). There are now as many image structures as there are total images
in the visible browsers, and no more; cross referenced images in the
to-be-deleted browser have their ownership moved to the cross
referencer before the cross referencee is wiped, with any required fetches
being transferred with them.

Reformatter sped up a bit by getting rid of strlen on the main text field
of tokens in all places bar one, where it is called extremely rarely. This
means direct app-to-app transfer of, say, a 359K text file to the browser
won't run like a drain as it tries to do strlen on a 359K string over and
over again! Most of the time the performance benefits won't really be
noticable, but on the above text file, formatting time went down from
290 seconds before the change to just under 7 seconds, a 41 fold speed
increase or thereabouts (SA110 228MHz).

MakeFile changed to force function name compilation on for debug builds
(-fn in the DD...FLAGS); useful for certain functions such as
register_null_handler, which can now output the name of the function
being registered.

...Which helped show up some nasties in the animation handler and animation
drift handler registration/deregistration process, which have been fixed
(callers of fetchpage_release_nulls were unaware that the drift handler
could be installed, and fragments of old code checking choices.anim_drift
had a value other than 1 or 0 were still hanging around - bit tricky for
a single bit item).

Added support for VALIGN in table cells. Spotted a bug or two in the
'what token is the pointer over' routines as a result, and fixed them - the
worst was in browser_line_at_y, which checked the y coordinate was below
the given one [the mouse], but didn't check the line height to see if the
given y coordinate was *within* the line, rather than just above it. Never
used to matter pre-tables, but a definite concern once multiple line
arrays can exist on one page.
@
text
@d71 1
a71 1
static _kernel_oserror * browser_set_look_r            (browser_data * b, ObjectId source, int underlinelks, int sourcecolours, int displayimages, int plainback);
d523 1
a523 1
  if (!fixed.swapbars)
d833 1
a833 1
  if (!fixed.swapbars)
d1138 1
a1138 1
  if (!choices.keyboardctl) return 0;
d1717 1
a1717 1
  if (handle->nchildren && !choices.fixedptr)
d1745 1
a1745 1
       choices.highlightlks         &&
d1763 1
a1763 1
    if (!choices.fixedptr)
d2316 2
a2317 2
  if (!fixed.swapbars) htop = toolbars_button_height(b) + toolbars_url_height(b);
  else                 htop = toolbars_status_height(b);
d2501 2
a2502 2
  if (!fixed.swapbars) hbot = toolbars_status_height(b);
  else                 hbot = toolbars_button_height(b) + toolbars_url_height(b);
d3052 1
a3052 1
               b->backimage < 0 ||
d3057 1
a3057 1
                     b->displayimages                 &&
d3145 1
a3145 1
                 b->backimage < 0 ||
d3150 1
a3150 1
                       b->displayimages                 &&
d3268 1
a3268 1
               b->backimage < 0 ||
d3273 1
a3273 1
                     b->displayimages                 &&
d3288 1
a3288 1
             b->displayimages                 &&
d3307 1
a3307 1
           b->displayimages                   &&
d3397 1
a3397 1
                 owner->backimage < 0
d3408 1
a3408 1
               owner->displayimages                 &&
d3427 1
a3427 1
             owner->displayimages                   &&
d3520 2
a3521 2
  if (!fixed.swapbars) htop = toolbars_button_height(b) + toolbars_url_height(b);
  else                 htop = toolbars_status_height(b);
d3713 1
a3713 1
  if (!fixed.swapbars)
d3859 1
a3859 1
  if (!fixed.swapbars)
d4060 11
a4070 11
/*             1 to show images, 0 not to (any   */
/*             pending image fetches are started */
/*             up again if 1 is given), or -1 to */
/*             not change this state;            */
/*                                               */
/*             1 to display plain backgrounds, 0 */
/*             to allow background images (and   */
/*             here too, any pending image       */
/*             fetches for background images are */
/*             restarted if 0 is given), or -1   */
/*             to not change this state.         */
d4073 2
a4074 2
_kernel_oserror * browser_set_look(browser_data * b, ObjectId source, int underlinelks,
                                   int sourcecolours, int displayimages, int plainback)
d4084 4
a4087 4
                            underlinelks,
                            sourcecolours,
                            displayimages,
                            plainback);
d4106 2
a4107 2
static _kernel_oserror * browser_set_look_r(browser_data * b, ObjectId source, int underlinelks,
                                            int sourcecolours, int displayimages, int plainback)
d4121 4
a4124 4
                                  underlinelks,
                                  sourcecolours,
                                  displayimages,
                                  plainback));
d4131 1
a4131 1
  if (underlinelks >= 0 && underlinelks != b->underlinelks)
d4133 2
a4134 2
    b->underlinelks = underlinelks;
    redraw          = 1;
d4137 1
a4137 1
  if (sourcecolours >= 0 && sourcecolours != b->sourcecolours)
d4139 2
a4140 2
    b->sourcecolours = sourcecolours;
    redraw           = 1;
d4143 1
a4143 1
  if (displayimages >= 0 && displayimages != b->displayimages)
d4145 2
a4146 2
    b->displayimages = displayimages;
    redraw           = 1;
d4150 1
a4150 1
    if (displayimages) image_restart_fetches(b, 1, 0);
d4153 1
a4153 1
  if (plainback >= 0 && plainback != b->plainback)
d4155 1
a4155 1
    b->plainback = plainback;
d4159 1
a4159 1
    redraw       = b->backimage >= 0 ? 1 : 0;
d4163 1
a4163 1
    if (!plainback) image_restart_fetches(b, 0, 1);
d4189 4
a4192 4
                             underlinelks,
                             sourcecolours,
                             displayimages,
                             plainback);
d4246 1
a4246 1
    if (!ancestor->selected && choices.keyboardctl)
@


1.10
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d711 1
a711 1
                      convert_pair_to_os(c->x, c->y , &xorg, &yorg);
d1029 1
a1029 1
                      convert_pair_to_os(c->x, c->y , &xorg, &yorg);
d2223 4
d2229 6
a2234 1
  if (l >= cell->nlines) return -1;
d2580 1
a2580 1
                    l = browser_top_line_r(b, c, ret_cell, s, fully_visible);
d4156 4
a4159 1
    redraw       = 1;
@


1.9
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d4219 1
a4219 1
       !gadget_hidden(t, DisplayURL)
d4221 1
a4221 1
     return gadget_set_focus(0, t, DisplayURL);
@


1.8
log
@Modified to cope with withdrawal of #defines SELECT, INPUT etc.
Added right-align support.
@
text
@a43 1
#include "TBEvents.h"
d51 1
d71 2
d1334 15
a1348 3
    if (tp && redraw_selected(b, tp) &&
        (((tp->style & IMG) && (tp->type & TYPE_ISMAP)) ||
         (tp->tagno == TAG_INPUT && HtmlINPUTtype(tp) == inputtype_IMAGE)))
d4027 154
@


1.7
log
@Updated Makefile to work better in folding text editors. More or less rewrote
Limits.h, and ensured consistent comment styling throughout all sources.
Fetch.c/h split to Fetch, FetchHTML and URLveneer. URLstat.c/h produced to
cope with this. OpenURL and Find sources created from bits in the Windows
source file that shouldn't have been there... These will get filled out
shortly. Note that a few functions in Fetch are due to be renamed and moved;
probably to Tokenutils.
@
text
@d1334 1
a1334 1
         ((tp->style & INPUT) && HtmlINPUTtype(tp) == inputtype_IMAGE)))
d1762 2
a1763 2
                tp                  &&
                (tp->style & INPUT) &&
d2112 1
a2112 1
                  (tp->style & INPUT) &&
@


1.6
log
@Quite a few general source changes throughout many files to sort out swapped
toolbars. There will be more work on this shortly. svcprint.c has been
modified to allow it to output to a file in PipeFS, so TML-less machines
can still use the standard browser debug routines (albeit in a less than
elegant fashion). Comments in that source file give more details. Plus a
few more bug fixes.
@
text
@d17 1
d19 1
d21 2
a22 1
/* History: 15-Mar-97: Created from Windows.c      */
d47 1
a47 1
#include "Fetch.h"
a102 2
/*                                               */
/* Returns:    See parameters list.              */
a186 2
/*                                               */
/* Returns:    See parameters list.              */
d260 1
a260 1
/*             applies for vertical scrolling;   */
a262 2
/*                                               */
/* Returns:    See parameters list.              */
d1113 1
d1313 1
d1501 3
a1503 2
/* Returns: Pointer to the displayed URL, or the */
/*          fetch URL if none is displayed.      */
d1556 8
a1563 3
  browser_data * b     = NULL;
  browser_data * check = last_browser;
  int            found = 0;
d1571 1
a1571 7
  while (b && check && !found)
  {
    if (check == b) found = 1;
    else check = check->previous;
  }

  if (found) register_null_claimant(Wimp_ENull, (WimpEventHandler *) browser_pointer_check, b);
d1586 5
d1597 3
a1599 3
  browser_data * b     = NULL;
  browser_data * check = last_browser;
  int            found = 0;
d1603 17
d1622 1
a1622 1
  while (b && check && !found)
d1624 6
a1629 3
    if (check == b) found = 1;
    else check = check->previous;
  }
d1631 1
a1631 3
  if (found)
  {
    deregister_null_claimant(Wimp_ENull, (WimpEventHandler *) browser_pointer_check, b);
d1633 1
a1633 2
    mouse_set_pointer_shape(Mouse_Shape_Normal);
    if (mouse_pointer_is_on()) toolbars_cancel_status(b, Toolbars_Status_LinkTo);
a1634 1
    b->pointer_over = NULL;
d1676 4
d1684 4
d1695 30
a1724 1
  wimp_get_pointer_info(&p);
d1819 4
d2238 1
a2238 3
/* Returns:    See parameters list;              */
/*                                               */
/*             Directly, the number of the line  */
d2423 1
a2423 3
/* Returns:    See parameters list;              */
/*                                               */
/*             Directly, the number of the line  */
d2604 1
d2931 1
d2952 1
a2952 1
  /* to wimp_update_window() will exit eventually through the      */
d2987 1
a2987 1
/* see redraw_token_colour() in Redraw.c for the */
d2992 1
d3069 2
a3070 2
/* browser_highlight_token() function (above),   */
/* with an optional delay before doing so.       */
d3074 1
d3103 3
a3105 3
    /* For details on this, see browser_highlight_token(). Basically, */
    /* may need to redraw several tokens if the highlighted one was a */
    /* link, if they all represent the same link.                     */
d3159 2
a3160 2
/* browser_highlight_token() (above) and then    */
/* clearing the highlight after a short delay.   */
d3164 1
d3181 1
d3183 1
d3307 2
a3308 2
/* browser_select_token() function (above), with */
/* an optional delay before doing so.            */
d3312 1
d3348 3
a3350 3
    /* For details on this, see browser_select_token(). Basically, may */
    /* need to redraw several tokens if the selected one was a link,   */
    /* if they all represent the same link.                            */
d3438 1
d3440 1
d3607 1
d3610 1
d3888 1
d3894 1
a3894 1
  char name[256];
d3957 1
d3960 1
d3966 1
a3966 1
/*             actually be found on the page);   */
d3968 2
a3969 2
/*             shown (because the base URL does  */
/*             not match the requested URL).     */
a4086 2

/*************************************************/
@


1.5
log
@Checking in mostly because its Friday... Quite a few little bug fixes
(adding up to a greater whole), which include removal of the dastardly
'invalid image number' errors that trace builds would raise from time to
time. Frame highlights are now better controlled (releaseably so).
Generally, this build represents the first genuinely promising version
of the browser for quite some time, despite the known library problems
with comment handling etc.
@
text
@d140 1
a140 1
  if      (page) scrollby = o->visible_area.ymax - o->visible_area.ymin - toolbars_url_height(b) - toolbars_button_height(b) - toolbars_status_height(b) - 4;
d513 1
a513 1
  int       ytop, ybot;
d524 16
a539 2
  ytop = s->yscroll - toolbars_button_height(b) - toolbars_url_height(b);
  ybot = s->yscroll - (s->visible_area.ymax - s->visible_area.ymin) + toolbars_status_height(b);
d823 1
a823 1
  int       ytop, ybot;
d834 16
a849 2
  ytop = s->yscroll - toolbars_button_height(b) - toolbars_url_height(b);
  ybot = s->yscroll - (s->visible_area.ymax - s->visible_area.ymin) + toolbars_status_height(b);
a1684 2
  if (tp && !(ISLINK(tp))) tp = NULL;

d1704 11
a1714 3
      else if ((tp->style & INPUT) &&
               HtmlINPUTtype(tp) == inputtype_IMAGE)      mouse_set_pointer_shape(Mouse_Shape_Link);
      else                                                mouse_set_pointer_shape(Mouse_Shape_Normal);
d2230 1
a2230 1
  int y, l;
d2234 2
a2235 4
  y = s->yscroll                -
      toolbars_button_height(b) -
      toolbars_url_height(b)    -
      4;
d2237 3
a2239 1
      /* -4 (over)accounts for window borders */
d2417 1
a2417 1
  int y, l;
d2421 5
d2427 2
a2428 5
      (s->visible_area.ymax - s->visible_area.ymin) +
      toolbars_status_height(b)                     +
      4;

      /* +4 (over)accounts for window borders */
d3390 1
a3390 1
  int                       c, l, topy, fy;
d3430 6
a3435 1
  topy = s.yscroll - toolbars_button_height(b) - toolbars_url_height(b) - 4; /* -4 (over)accounts for window borders */
d3504 1
a3504 1
  s.yscroll = fy + toolbars_url_height(b) + toolbars_button_height(b) + 4;
d3552 1
a3552 1
  int             ytop, ybot;
d3621 16
a3636 2
  ytop = state->yscroll - toolbars_button_height(b) - toolbars_url_height(b);
  ybot = state->yscroll - (state->visible_area.ymax - state->visible_area.ymin) + toolbars_status_height(b);
d3645 1
a3645 1
    state->yscroll = ltop + toolbars_button_height(b) + toolbars_url_height(b) + 12; /* '+12' = aesthetics */
d3651 1
a3651 1
    state->yscroll = lbot + (state->visible_area.ymax - state->visible_area.ymin) - toolbars_status_height(b) - 8; /* '-8 = aesthetics */
d3693 1
a3693 1
  int                       ytop, ybot;
d3767 16
a3782 2
  ytop = state->yscroll - toolbars_button_height(b) - toolbars_url_height(b);
  ybot = state->yscroll - (state->visible_area.ymax - state->visible_area.ymin) + toolbars_status_height(b);
@


1.4
log
@Fixed problems with unsourced images in tables and a couple of other bugs
here and there - nothing earth shattering... Just wanted to keep the CVS
source up to date.
@
text
@d1104 1
a1104 1
  browser_data            * ancestor       = b->ancestor;
a1106 2
  if (!ancestor) ancestor = b;

d1429 1
a1429 3
      browser_data * ancestor = b->ancestor;

      if (!ancestor) ancestor = b;
d3092 1
a3092 3
  browser_data * ancestor = b->ancestor;

  if (!ancestor) ancestor = b;
d3218 1
a3218 1
  browser_data * ancestor = b->ancestor;
a3220 1
  if (!ancestor) ancestor = b;
d3916 1
a3916 1
    browser_data * ancestor = b->ancestor;
a3918 2

    if (!ancestor) ancestor = b;
@


1.3
log
@Made INPUT type=image work
@
text
@d2018 7
a2024 2
      else if ((tp->style & IMG) ||
               ((tp->style & INPUT) && HtmlINPUTtype(tp) == inputtype_IMAGE))
@


1.2
log
@Customer work complete, and this version just shipped. Had to comment out
the code in Main.c that sets the user agent string to fake Netscape, as the
persistent problems with forms in tables showed up much more on a modem
link - net result was that the customer's log in page didn't work. Not
faking Netscape gives an authorisation dialogue instead, allowing access
to the site even if not by the most elegant of methods.
@
text
@d1252 2
a1253 1
                          key == akbd_RightK ? 1 : 2);
d1307 3
a1309 1
    if (tp && redraw_selected(b, tp) && (tp->style & IMG) && (tp->type & TYPE_ISMAP))
d1682 3
a1684 1
      else mouse_set_pointer_shape(Mouse_Shape_Normal);
d2018 2
a2019 1
      else if (tp->style & IMG)
d2025 1
a2025 1
        if (ISLINK(tp))
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d556 4
a559 1
    int startat = ytop / average;
@
