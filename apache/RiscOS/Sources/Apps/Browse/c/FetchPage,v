head	1.34;
access;
symbols
	Browse-2_16:1.34
	Browse-2_15:1.34
	Browse-2_14:1.34
	Browse-2_13:1.34
	Browse-2_12:1.34
	Browse-2_11:1.34
	Browse-2_10:1.34
	Browse-2_09:1.34
	ahodgkin_208_i4_2:1.33
	ahodgkin_208_i4:1.31
	ahodgkin_208_i3:1.31
	ahodgkin_208_i2:1.31
	ahodgkin_208_i1:1.31
	ahodgkin_207release:1.30
	ahodgkin_206release:1.29
	ahodgkin_205release:1.28
	ahodgkin_204release:1.28
	ahodgkin_202release:1.26
	ahodgkin_201release:1.25
	ahodgkin_200release:1.25
	ahodgkin_133beta:1.25
	ahodgkin_132beta:1.24
	ahodgkin_131beta:1.23
	ahodgkin_130beta:1.22
	ahodgkin_129:1.21
	ahodgkin_128beta:1.20
	ahodgkin_128alpha:1.20
	ahodgkin_127beta2:1.18
	ahodgkin_127beta:1.18
	ahodgkin_126beta:1.16
	ahodgkin_AW97patch:1.15
	ahodgkin_AW97:1.14;
locks; strict;
comment	@# @;


1.34
date	2005.04.26.09.42.34;	author ahodgkin;	state Exp;
branches;
next	1.33;

1.33
date	2000.11.14.08.45.05;	author ahodgkin;	state Exp;
branches;
next	1.32;

1.32
date	2000.05.31.15.58.32;	author ahodgkin;	state Exp;
branches;
next	1.31;

1.31
date	99.09.02.13.10.18;	author ahodgkin;	state Exp;
branches;
next	1.30;

1.30
date	98.09.23.13.18.03;	author ahodgkin;	state Exp;
branches;
next	1.29;

1.29
date	98.07.09.10.27.04;	author ahodgkin;	state Exp;
branches;
next	1.28;

1.28
date	98.04.16.08.14.10;	author ahodgkin;	state Exp;
branches;
next	1.27;

1.27
date	98.03.26.14.21.02;	author ahodgkin;	state Exp;
branches;
next	1.26;

1.26
date	98.03.20.12.12.30;	author ahodgkin;	state Exp;
branches;
next	1.25;

1.25
date	98.02.13.17.32.02;	author ahodgkin;	state Exp;
branches;
next	1.24;

1.24
date	98.02.06.13.55.02;	author ahodgkin;	state Exp;
branches;
next	1.23;

1.23
date	98.01.31.10.55.14;	author ahodgkin;	state Exp;
branches;
next	1.22;

1.22
date	97.12.18.10.06.55;	author ahodgkin;	state Exp;
branches;
next	1.21;

1.21
date	97.12.12.11.17.47;	author ahodgkin;	state Exp;
branches;
next	1.20;

1.20
date	97.12.02.16.13.44;	author ahodgkin;	state Exp;
branches;
next	1.19;

1.19
date	97.11.27.17.50.01;	author ahodgkin;	state Exp;
branches;
next	1.18;

1.18
date	97.11.20.16.04.31;	author ahodgkin;	state Exp;
branches;
next	1.17;

1.17
date	97.11.19.10.28.51;	author ahodgkin;	state Exp;
branches;
next	1.16;

1.16
date	97.10.30.17.11.02;	author ahodgkin;	state Exp;
branches;
next	1.15;

1.15
date	97.10.20.07.09.18;	author ahodgkin;	state Exp;
branches;
next	1.14;

1.14
date	97.09.22.07.43.11;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	97.09.18.08.58.57;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	97.09.14.19.18.14;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	97.09.12.17.19.19;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	97.09.09.14.13.11;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	97.09.02.15.45.56;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.08.31.18.38.13;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.08.28.16.07.53;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.08.18.09.23.52;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.08.08.16.38.48;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.08.05.08.42.53;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.07.30.12.07.59;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	97.07.25.12.52.30;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.28.26;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.34
log
@  Huge pile of changes bringing relatively ancient sources up to date.
Detail:
  This check-in includes Phoenix version 2.11 (26-Apr-2005); only the
  debug and JavaScript builds of Phoenix have been tested and resources
  will definitely be out of date for other versions. The various "!..."
  scripts have been updated to require a minimum of 2MB with no maximum
  limit for building, as CC 5.60 is quite RAM hungry.
Admin:
  Phoenix 2.11 JS builds OK, works reasonably well. Many outstanding
  issues of course, as this is a very outdated browser now.

Version 2.09. Tagged as 'Browse-2_09'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    FetchPage.c                                       */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: High-level fetch functions; the main interface    */
/*          for initiating and controlling full page fetches. */
/*          Compare with lower level Fetch.h and FetchHTML.h. */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 25-Nov-1996 (ADH): Created.                       */
/*          24-May-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <tboxlibs/flex.h>

#include <kernel.h>
#include <swis.h>

#include <URI.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <tboxlibs/event.h>

#include <tboxlibs/toolbox.h>
#include <tboxlibs/window.h>
#include <tboxlibs/gadgets.h>

#include "Global.h"
#include "FromROSLib.h"
#include "MiscDefs.h"
#include "Utils.h"

#include "Browser.h"
#include "ChoiceDefs.h"
#include "EventLogs.h"
#include "Fetch.h" /* (Which itself includes URLstat.h) */
#include "Frames.h"
#include "Handlers.h"
#include "History.h"
#include "Images.h"
#include "JavaScript.h"
#include "Memory.h"
#include "PlugIn.h"
#include "Protocols.h"
#include "Reformat.h"
#include "SaveDraw.h"
#include "SaveText.h"
#include "Toolbars.h"
#include "URLutils.h"
#include "Windows.h"

#include "FetchPage.h"

/* Locals */

static char * url_buffer = NULL;

/* Static function prototypes */

static _kernel_oserror * fetchpage_process_internal (browser_data * b);
static _kernel_oserror * fetchpage_preprocessed     (browser_data * b, int record, int stop, int no_anchor_errors);
static _kernel_oserror * fetchpage_postprocessed    (browser_data * b, int record);

/**************************************************************/
/* fetchpage_fetch()                                          */
/*                                                            */
/* Handles the initiation of a fetch and the display of the   */
/* result in a browser window.                                */
/*                                                            */
/* Parameters are as standard for a Wimp event handler (this  */
/* is called on null events).                                 */
/**************************************************************/

int fetchpage_fetch(int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle)
{
  _kernel_oserror * e;
  int               tf_start, tf_now, priority;
  int               fetching, formatting;

  #ifdef TRACE
    {
      static bs_fetch oldstatus;

      if (handle->fetch_status != oldstatus)
      {
        dprintf(("Fetc", "\nfetchpage_fetch: Called with new status %d\n",handle->fetch_status));
        oldstatus = handle->fetch_status;
      }
    }
  #endif

  /* Are we in a polled table cell format? */

  if (handle->table_format) return 0;

  /* Otherwise... */

  if (handle->fetch_status == BS_START)
  {
    e = fetch_start(handle);

    if (e)
    {
      handle->save_link = 0;
      show_error_cont(e);
    }
  }

  /* Call the fetcher / reformatter, allowing a certain */
  /* amount of time inside each only.                   */

  _swix(OS_ReadMonotonicTime, _OUT(0), &tf_start);
  tf_now = tf_start;

  /* The main fetch/reformat loop */

  fetching   = fetch_fetching(handle);
  formatting = reformat_formatting(handle);

  /* Some fairly crude load balancing. If the fetcher is idle, */
  /* but this function is being called, chances are we're      */
  /* formatting. Otherwise, we may be processing tokens - so   */
  /* the actual fetch is complete but the fetcher is still     */
  /* working on the data from HTMLLib. Otherwise, it may be    */
  /* that the main fetch is active; or we could be spooling    */
  /* data to a file.                                           */

  if (formatting && controls.refo_single) priority = 300;
  else
  {
    if      (handle->fetch_status == BS_IDLE)                           priority = 15; /* Not fetching, may be solid formatting    */
    else if (handle->fetch_status == BS_PROCESS)                        priority = 8;  /* Processing tokens, but fetch is complete */
    else if (handle->fetch_status == BS_FETCHING)                       priority = 3;  /* Fetching tokens (so fetch is incomplete) */
    else if (handle->fetch_status == BS_DATAFETCH && handle->save_file) priority = 2;  /* Saving data to a file (fetch incomplete) */
    else                                                                priority = 0;
  }

  do
  {
    /* If fetching, call the reformatter. */

    if (fetching) fetch_fetcher(handle);

    /* If reformatting, call the reformatter. */

    if (formatting)
    {
      reformat_reformatter(handle);
      ChkError(windows_check_tools(handle, NULL));
    }

    fetching   = fetch_fetching(handle);
    formatting = reformat_formatting(handle);

    /* Re-read the time, and keep going whilst we're   */
    /* inside the maximum time specified by 'priority' */
    /* and fetching and/or formatting.                 */

    _swix(OS_ReadMonotonicTime, _OUT(0), &tf_now);
  }
  while (
          tf_now - tf_start < priority &&
          (fetching || formatting)
        );

  /* Process images on a lower priority */

  if (image_count_specific_pending(handle))
  {
    e = image_process_null(handle);

    /* Force all errors to be warnings only */

    if (e)
    {
      if (&erb != e) erb = *e;
      erb.errnum = Utils_Error_Custom_Message;

      ChkError(&erb);
    }
  }

  /* Handle jumping to any specified named anchors */

  browser_check_for_request(handle);

  /* Various actions as things become inactive... */

  if (!fetch_fetching(handle))
  {
    /* If we have a JavaScript onLoad command, deal with it */

    if (handle->onload) ChkError(javascript_body_onload(handle));

    /* Garbage collect images if the main page fetch has finished */

    if (handle->clear_images)
    {
      image_maybe_gc(handle);
    }

    if (
         !reformat_formatting          (handle) &&
         !image_count_specific_pending (handle)
       )
    {
      /* There are no pending images, so we seem to have finished - */
      /* but is there a reformat pending?                           */

      if (handle->refo_time)
      {
        /* Yes, so flush the queue */

        reformat_format_from(handle, handle->refo_line, 1, -1);
      }
      else
      {
        /* No; get rid of null claimants (the call will *install* a new */
        /* animation drift handler if the Controls require it).         */

        if (handle->fetch_handler) fetchpage_release_nulls(handle);

        /* If flagged to do so, call the image garbage collector */
        /* again - after fetching everything free memory may be  */
        /* getting low.                                          */

        if (handle->clear_images)
        {
          image_maybe_gc(handle);
          handle->clear_images = 0;
        }

        /* We may have a pending messages to send */

        e = protocols_atats_send_any_pendings(handle);

        /* If this is a small fetch window, close it */

        if (handle->small_fetch)
        {
          int close = 1;

          /* If this is a fetch for a Plug-In, tell the Plug-In about it */

          if (
               handle->pstream             &&
               handle->pstream->active     &&
               !handle->pstream->abandoned
             )
          {
            plugin_fetch_completed(handle);

            /* Only close the window if the stream won't close itself */

            if (handle->pstream->will_close_itself) close = 0;
          }

          /* Close the window *afterwards* - or you've  */
          /* just freed up message structures etc. that */
          /* need to be dealt with first.               */

          if (close) windows_close_browser(handle);
        }

        /* Otherwise, proceed as normal */

        else
        {
          /* Check the page's vertical extent is correct */

          ChkError(reformat_check_extent(handle));

          /* Update the status bar */

          toolbars_cancel_all(handle);
          toolbars_update_status(handle, Toolbars_Status_Viewing);
        }

        /* Report any errors from the pending message sends */

        ChkError(e);
      }

      /* Sort out window tool presence */

      ChkError(windows_check_tools(handle, NULL));
    }
  }

  /* Keep the buttons as up to date as possible throughout the fetch */

  toolbars_set_button_states(handle);

  return 0;
}

/**************************************************************/
/* fetchpage_fetch_targetted()                                */
/*                                                            */
/* Fetch a given URL, possibly appending some given extra     */
/* data, into a given target window, an ancestor browser, or  */
/* a new view.                                                */
/*                                                            */
/* Parameters: Pointer to a browser_data struct which acts as */
/*             a parent;                                      */
/*                                                            */
/*             Pointer to the URL to fetch;                   */
/*                                                            */
/*             Pointer to a window target name, or NULL to    */
/*             open in the parent - if full screen, note that */
/*             any target names which would otherwise have    */
/*             opened a new window will not do so;            */
/*                                                            */
/*             Pointer to any extra data to append to the     */
/*             URL, or NULL;                                  */
/*                                                            */
/*             1 to open the URL in a new window (with no     */
/*             name) regardless of the targetting, else 0     */
/*             (this will not be overridden when running full */
/*             screen);                                       */
/*                                                            */
/*             1 to suppress errors from in-page anchors      */
/*             which are not found, else 0.                   */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the fetch.                                     */
/**************************************************************/

_kernel_oserror * fetchpage_fetch_targetted(browser_data * parent, const char * url, const char * target, const char * appnddata, int new_window, int no_anchor_errors)
{
  browser_data * ancestor;
  browser_data * targetted;

  #ifdef TRACE

    /* Trace builds will warn about a NULL URL (but not an empty string) */

    if (!url)
    {
      erb.errnum = Utils_Error_Custom_Normal;

      StrNCpy0(erb.errmess,
               "NB: Pointer to URL is NULL in fetchpage_fetch_targetted()");

      show_error_ret(&erb);
    }

  #endif

  /* If we've been asked to open a new window, only the extra data */
  /* parameter matters.                                            */

  if (new_window)
  {
    if (appnddata) return fetchpage_new_add(NULL,
                                            url,
                                            1,
                                            1,
                                            no_anchor_errors,
                                            appnddata,
                                            1,
                                            NULL);
    else
    {
      RetError(windows_create_browser(url,
                                      NULL,
                                      NULL,
                                      NULL,
                                      Windows_CreateBrowser_Normal));

      RetError(browser_inherit(parent, last_browser));

      return NULL;
    }
  }

  /* Otherwise, have a bit more thinking to do */

  else
  {
    if (!parent) return NULL;

    ancestor = utils_ancestor(parent);

    /* Deal with the targetted window case first */

    if (target && *target)
    {
      targetted = frames_find_target(parent, target);

      if (targetted)
      {
        if (parent != targetted) RetError(browser_inherit_post_data(parent, targetted));

        /* We have a specific browser to open the URL in */

        if (appnddata)
        {
          return fetchpage_new_add(targetted,
                                   url,
                                   1,
                                   1,
                                   no_anchor_errors,
                                   appnddata,
                                   0,
                                   NULL);

        }
        else
        {
          return fetchpage_new(targetted,
                               url,
                               1,
                               1,
                               no_anchor_errors);
        }
      }
      else
      {
        /* Nothing was found with that name, so create a new window */
        /* with the given target name instead.                      */

        if (appnddata)
        {
          return fetchpage_new_add(parent,
                                   url,
                                   1,
                                   1,
                                   no_anchor_errors,
                                   appnddata,
                                   1,
                                   target);
        }
        else
        {
          RetError(windows_create_browser(url,
                                          NULL,
                                          NULL,
                                          target,
                                          Windows_CreateBrowser_Normal));

          RetError(browser_inherit(parent, last_browser));

          return NULL;
        }
      }
    }

    /* Now the untargetted case - open in the parent */

    else
    {
      if (appnddata) return fetchpage_new_add(parent,
                                              url,
                                              1,
                                              1,
                                              no_anchor_errors,
                                              appnddata,
                                              0,
                                              NULL);

      else           return fetchpage_new(parent,
                                          url,
                                          1,
                                          1,
                                          no_anchor_errors);
    }
  }
}

/**************************************************************/
/* fetchpage_process_internal()                               */
/*                                                            */
/* Some internal URLs involve just substituting the internal  */
/* URL for some known or easily discoverable alternative      */
/* early in the fetch stage. This function handles such       */
/* changes.                                                   */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the fetch.                                     */
/**************************************************************/

static _kernel_oserror * fetchpage_process_internal(browser_data * b)
{
  if (
       b->displayed == Display_Recovered_Page ||
       b->displayed == Display_Home_Page      ||
       b->displayed == Display_Embedded_URL
     )
  {
    char alt_url[Limits_URL];

    memset(alt_url, 0, sizeof(alt_url));

    if (b->displayed == Display_Recovered_Page)
    {
      /* For a recovered page, try to get back to the page detailed  */
      /* in Browse$PreviousPage.                                     */
      /*                                                             */
      /* If the variable is unset / can't be read, can't load a page */
      /* so set the buffer to hold a null string.                    */
      /*                                                             */
      /* The call is quivalent to getenv, but the RISC OS            */
      /* implementation evaluates the system variable as an          */
      /* expression which we don't want; hence the direct use of the */
      /* SWI call.                                                   */

      if (
           _swix(OS_ReadVarVal,
                 _INR(0,4),

                 "Browse$PreviousPage",
                 alt_url,
                 sizeof(alt_url),
                 0,
                 4)

         )
         *alt_url = 0;
    }
    else if (b->displayed == Display_Embedded_URL)
    {
      char * fetch = url_buffer;

      if (!fetch) fetch = "";

      /* There may be a specific URL embedded in the item */

      strncpy(alt_url, fetch, sizeof(alt_url) - 1);
      alt_url[sizeof(alt_url) - 1] = 0;

      /* Find the URL fragment */

      fetch = strstr(alt_url, "?url=");

      if (!fetch) *alt_url = 0;
      else
      {
        char * copy = alt_url;

        fetch += sizeof("?url=") - 1;

        /* Copy the URL to the start of the buffer, */
        /* unescaping any escaped characters.       */

        while (*fetch)
        {
          if (*fetch == '%' && *(fetch + 1) && *(fetch + 2))
          {
            char number[3];

            number[0] = *(fetch + 1);
            number[1] = *(fetch + 2);
            number[2] = '\0';

            *(copy ++) = (char) strtoul(number, NULL, 16);

            fetch += 3;
          }
          else *(copy ++) = *(fetch ++);
        }

        *copy = '\0';
      }
    }
    else
    {
      /* Alternatively, get the Home Page URL */

      urlutils_create_home_url(alt_url, sizeof(alt_url));
    }

    /* Ensure the URL is terminated */

    alt_url[sizeof(alt_url) - 1] = 0;

    /* Reallocate URL buffer space */

    if (url_buffer)
    {
      #ifdef TRACE
        malloccount -= strlen(url_buffer) + 128;
        dprintf(("CMal", "** malloccount (fetchpage_process_internal): \0212%d\0217\n",malloccount));
      #endif

      free(url_buffer);
    }

    url_buffer = malloc(strlen(alt_url) + 128);

    if (!url_buffer) return make_no_fetch_memory_error(10);

    #ifdef TRACE
      malloccount += (strlen(alt_url) + 128);
      dprintf(("CMal", "** malloccount (fetchpage_process_internal): \0211%d\0217\n",malloccount));
    #endif

    /* Copy the new URL into the buffer */

    strcpy(url_buffer, alt_url);
  }

  return NULL;
}

/**************************************************************/
/* fetchpage_preprocessed()                                   */
/*                                                            */
/* Fetches a URL, which must be in the 'url_buffer' malloced  */
/* block of memory. Intended to be called from functions such */
/* as fetchpage_new or fetchpage_new_add.                     */
/*                                                            */
/* If using the URI handler, the URL will be sent through     */
/* that and won't actually fetch at this stage, therefore.    */
/*                                                            */
/* Parameters: Pointer to a browser_data struct to which the  */
/*             new URL refers;                                */
/*                                                            */
/*             1 to record the previous URL in the history    */
/*             list, else 0;                                  */
/*                                                            */
/*             1 to stop other page fetches in any other      */
/*             frames related to this document, 0 to only     */
/*             stop those in this frame;                      */
/*                                                            */
/*             1 to suppress errors from in-page anchors      */
/*             which are not found, else 0.                   */
/**************************************************************/

static _kernel_oserror * fetchpage_preprocessed(browser_data * b, int record, int stop, int no_anchor_errors)
{
  _kernel_oserror * e;

  /* Can we just display a local reference? Must do the fetch if a POST form is being sent */
  /* or we're forcing a reload (if reload_lock is still on, the fetch is just starting     */
  /* page-wide - otherwise, a link has been followed even though a reload may still be in  */
  /* progress, and in that case, we *do* want to try showing the local reference).         */

  if (
       !b->save_link &&
       !b->post_data &&
       (
         !b->reloading ||
         !b->reload_lock
       )
       &&
       (
         (
           browser_display_local_reference(b,
                                           url_buffer,
                                           (char *) browser_current_url(b),
                                           no_anchor_errors)
         )
         ||
         (
           b->urlbdata &&
           browser_display_local_reference(b,
                                           url_buffer,
                                           (char *) browser_base_url(b),
                                           no_anchor_errors)
         )
       )
     )
  {
    // Huh? This just causes redraw glitches... Why was it ever put here?
    //
    // if (choices.keyboard_ctrl) browser_move_selection(b, akbd_RightK);

    return NULL;
  }

  /* Deal with JavaScript if necessary */

  #ifdef JAVASCRIPT

    /* Is this a JavaScript URL? */

    if (javascript_url(url_buffer))
    {
      char * url_copy = malloc(strlen(url_buffer) + 1);

      dprintf(("JScr", "fetchpage_preprocessed: JavaScript URL found:\n'\0216%s\0217'\n", url_buffer));

      /* The script may well open a new window, which could run through these */
      /* very fetch routines. They aren't multithreaded! So, we need to take  */
      /* a copy of all relevant details first, and restore the info after.    */
      /*                                                                      */
      /* Yes. I **know** this is grim. But it is simple, fast, and works.     */
      /* Just make sure that no-one is using ChkError or similar (i.e. avoid  */
      /* longjmp!) inside the code this calls...                              */

      if (!url_copy) RetError(make_no_fetch_memory_error(18));
      else strcpy(url_copy, url_buffer);

      /* Process the script */

      e = javascript_process_script(b, url_copy);

      /* Did it succeed? Should we proceed with the fetch if so? */

      if (e || !javascript_fetch_should_proceed())
      {
        free(url_copy);
        return e;
      }

      /* Restore whatever we stored above */

      free(url_buffer);
      url_buffer = malloc(strlen(url_copy) + 1);

      if (!url_buffer) RetError(make_no_fetch_memory_error(19));
      else strcpy(url_buffer, url_copy);

      free(url_copy);
    }

  #endif

  /* Last chance to modify any passing URLs... */

  if (!strcmp(url_buffer, AboutMethod))
  {
    char * alt_url = Internal_URL ForAbout AboutMethod AboutMethod; /* (sic) */

    #ifdef TRACE
      malloccount -= strlen(url_buffer) + 128;
      dprintf(("CMal", "** malloccount (fetchpage_preprocessed): \0212%d\0217\n",malloccount));
    #endif

    free(url_buffer);

    url_buffer = malloc(strlen(alt_url) + 128);

    if (!url_buffer) return make_no_fetch_memory_error(10);

    #ifdef TRACE
      malloccount += (strlen(alt_url) + 128);
      dprintf(("CMal", "** malloccount (fetchpage_preprocessed): \0211%d\0217\n",malloccount));
    #endif

    /* Copy the new URL into the buffer */

    strcpy(url_buffer, alt_url);
  }

  /* Only cancel stuff if we're allowed to */

  if (b->allow_cancel)
  {
    e = fetch_cancel(b);
    if (e) return e;

    /* If required, stop all fetching in all frames, else leave */
    /* images but stop everything else. Note that we don't      */
    /* touch file fetching - clicking on links will allow those */
    /* to continue, so several frames in a frameset could fetch */
    /* to a file simultaneously (the progress display in the    */
    /* status bar is aware of this, and will alter its display  */
    /* appropriately).                                          */

    if (stop)
    {
      if (controls.brick_wall) frames_abort_fetching(utils_ancestor(b), 1, 0);
      else                     frames_abort_fetching(utils_ancestor(b), 0, 0);
    }
  }

  /* Set the allow_cancel flag back to 1 for future fetches */

  b->allow_cancel = 1;

  /* Set the displayed type for internal / normal URLs, and */
  /* carry out any required special actions for the former. */

  if (!b->save_link)
  {
    /* Before we reset the display type, check if we're displaying */
    /* a temporary file. If so, force the 'record' flag off, as    */
    /* there's no way this can make a meaningful History entry.    */

    if (b->displayed == Display_Scrap_File) record = 0;

    /* Right, now go ahead and set the display type */

    urlutils_set_displayed(b, url_buffer);

    if (b->displayed == Display_Previous_Page) return history_fetch_backwards(b, 0);
    if (b->displayed == Display_Next_Page)     return history_fetch_forwards(b, 0);

    if (b->displayed == Display_Reloaded_Page)
    {
      IdBlock id;

      id.ancestor_id = b->self_id;

      handle_reload(0, NULL, &id, NULL);

      return NULL;
    }
  }

  e = fetchpage_process_internal(b);
  if (e) return e;

  /* If merging the URL writable and status display, put */
  /* it back to status.                                  */

  if (b->merged_url)
  {
    toolbars_merged_to_status(b, toolbars_get_upper(b));
    browser_give_general_focus(b);
  }

  if (
       uri_module_present                             &&
       strncmp(url_buffer, Internal_URL, Int_URL_Len) &&
       (
         choices.uri_usage == Choices_URI_EverythingAndRequests ||
         (
           !urlutils_check_protocols(url_buffer) &&
           (
             choices.uri_usage == Choices_URI_UnknownsAndRequests ||
             choices.uri_usage == Choices_URI_BroadcastUnknowns
           )
         )
       )
     )
  {
    /* Send the URL through the URI handler if the module is present */
    /* and the URL isn't an internal one, and the URI Handler menu   */
    /* choices say we should.                                        */

    return urlutils_dispatch(b,
                             url_buffer,
                             record ? URIQueue_RecordInHistory : 0);
  }
  else
  {
    /* Without the URI handler, deal with the URL immediately */

    return fetchpage_postprocessed(b, record);
  }
}

/**************************************************************/
/* fetchpage_postprocessed()                                  */
/*                                                            */
/* Working end to fetchpage_preprocessed, which will fetch    */
/* the url in the url_buffer block.                           */
/*                                                            */
/* Parameters: Pointer to a browser_data struct to which the  */
/*             new URL refers;                                */
/*                                                            */
/*             1 to record the previous URL in the history    */
/*             list, else 0.                                  */
/**************************************************************/

static _kernel_oserror * fetchpage_postprocessed(browser_data * b, int record)
{
  _kernel_oserror * e;

  dprintf(("LMem", "fetchpage_postprocessed: Chunk CK_FURL set to %d\n",strlen(url_buffer) + 128));

  e = memory_set_chunk_size(b, NULL, CK_FURL, strlen(url_buffer) + 128);
  if (e) return e;

  strcpy(b->urlfdata, url_buffer);

  /* Make sure the URL bar is updated with the current URL. */

  toolbars_update_url(b);

  /* Set the fetch status */

  b->fetch_status = BS_START;

  /* Sort out the reloading flag */

  if (b->reload_lock) b->reload_lock = 0;
  else                b->reloading   = 0;

  /* Record the start of the fetch, for a parent browser window. */

  if (!b->ancestor)
  {
    _swix(OS_SetVarVal,
          _INR(0,4),

          "Browse$CurrentFetch",
          url_buffer,
          strlen(url_buffer),
          0,
          4);
  }

  /* Update the event log list */

  eventlogs_url_changed(b, 1);

  /* Register event handlers to start off the new fetch */

  if (!b->fetch_handler) fetchpage_claim_nulls(b);

  return NULL;
}

/**************************************************************/
/* fetchpage_postprocess_uri()                                */
/*                                                            */
/* If the URI handler comes back with a URI_MProcess message  */
/* and we can handle the URI it details, then that URI may be */
/* fetched through this function - it is first copied locally */
/* and then passed over to fetchpage_postprocessed.           */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the URI;                                       */
/*                                                            */
/*             Pointer to the URI string;                     */
/*                                                            */
/*             1 to record the previous URL in the history    */
/*             list, else 0.                                  */
/**************************************************************/

_kernel_oserror * fetchpage_postprocess_uri(browser_data * b, char * uri, int record)
{
  /* Reallocate URL buffer space */

  if (url_buffer)
  {
    #ifdef TRACE
      malloccount -= strlen(url_buffer) + 128;
      dprintf(("CMal", "** malloccount (fetchpage_postprocess_uri): \0212%d\0217\n",malloccount));
    #endif

    free(url_buffer);
  }

  url_buffer = malloc(strlen(uri) + 128);

  if (!url_buffer) return make_no_fetch_memory_error(14);

  #ifdef TRACE
    malloccount += (strlen(uri) + 128);
    dprintf(("CMal", "** malloccount (fetchpage_postprocess_uri): \0211%d\0217\n",malloccount));
  #endif

  /* Copy the URI over and fetch it */

  strcpy(url_buffer, uri);

  return fetchpage_postprocessed(b, record);
}

/**************************************************************/
/* fetchpage_new()                                            */
/*                                                            */
/* Cancels any old fetch and starts a new one the given URL.  */
/*                                                            */
/* The URL is copied to a malloc buffer before being used, so */
/* the pointer to it can be from pretty much anything (though */
/* beware of flex blocks shifting over the actual function    */
/* call boundary...).                                         */
/*                                                            */
/* Parameters: Pointer to a browser_data struct to which the  */
/*             new URL refers;                                */
/*                                                            */
/*             Pointer to the new URL string;                 */
/*                                                            */
/*             1 to record the previous URL in the history    */
/*             list, else 0;                                  */
/*                                                            */
/*             1 to stop other page fetches in any other      */
/*             frames related to this document, 0 to only     */
/*             stop those in this frame;                      */
/*                                                            */
/*             1 to suppress errors from in-page anchors      */
/*             which are not found, else 0.                   */
/**************************************************************/

_kernel_oserror * fetchpage_new(browser_data * b, const char * url, int record, int stop, int no_anchor_errors)
{
  /* Don't proceed unless there's something to fetch */

  if (!url || !(*url)) return fetch_cancel(b);

  /* The URL may have been passed in from the 'tokens' buffer, */
  /* and fetch cancels etc. might corrupt it. So take a copy   */
  /* of it before proceeding further, if the URL didn't come   */
  /* from this buffer already...!                              */

  if (url != url_buffer)
  {
    if (url_buffer)
    {
      #ifdef TRACE
        malloccount -= strlen(url_buffer) + 128;
        dprintf(("CMal", "** malloccount (fetchpage_new): \0212%d\0217\n",malloccount));
      #endif

      free(url_buffer);
    }

    url_buffer = malloc(strlen(url) + 128);

    if (!url_buffer) return make_no_fetch_memory_error(7);

    #ifdef TRACE
      malloccount += (strlen(url) + 128);
      dprintf(("CMal", "** malloccount (fetchpage_new): \0211%d\0217\n",malloccount));
    #endif

    strcpy(url_buffer, url);
  }

  #ifdef TRACE

    else
    {
      erb.errnum = Utils_Error_Custom_Normal;
      strcpy(erb.errmess, "Used same buffer in fetchpage_new!");
      show_error_ret(&erb);
    }

  #endif

  urlutils_fix_url(url_buffer, strlen(url_buffer) + 128);

  return fetchpage_preprocessed(b, record, stop, no_anchor_errors);
}

/**************************************************************/
/* fetchpage_new_add()                                        */
/*                                                            */
/* As fetchpage_new, but takes a second string, which is data */
/* to be concatenated onto the end of the given URL. This may */
/* be useful for image maps or forms data. You may also       */
/* specify whether this URL is to be fetched in a new browser */
/* window or not.                                             */
/*                                                            */
/* If the additional string starts with a '?' and the given   */
/* URL contains a '?' already, the '?' and everything after   */
/* it is stripped off before the new data is added.           */
/*                                                            */
/* Restrictions as for fetchpage_new.                         */
/*                                                            */
/* Parameters: Pointer to a browser_data struct to which the  */
/*             new URL refers;                                */
/*                                                            */
/*             Pointer to the new URL string;                 */
/*                                                            */
/*             1 to record the previous URL in the history    */
/*             list, else 0;                                  */
/*                                                            */
/*             1 to stop other page fetches in any other      */
/*             frames related to this document, 0 to only     */
/*             stop those in this frame;                      */
/*                                                            */
/*             1 to suppress errors from in-page anchors      */
/*             which are not found, else 0;                   */
/*                                                            */
/*             Pointer to the data to add onto the end of the */
/*             URL string;                                    */
/*                                                            */
/*             1 to fetch the URL in a new window, else 0;    */
/*                                                            */
/*             If opening in a new window, pointer to the     */
/*             window name (if wanted), or NULL.              */
/**************************************************************/

_kernel_oserror * fetchpage_new_add(browser_data * b, const char * url, int record, int stop, int no_anchor_errors, const char * add, int new_window, const char * name)
{
  /* Don't proceed unless there's something to fetch */

  if (!url) return fetch_cancel(b);

  /* The URL may have been passed in from the 'tokens' buffer, */
  /* and fetch cancels etc. might corrupt it. So take a copy   */
  /* of it before proceeding further, if the URL didn't come   */
  /* from this buffer already.                                 */

  if (url != url_buffer)
  {
    if (url_buffer)
    {
      #ifdef TRACE
        malloccount -= strlen(url_buffer) + 128;
        dprintf(("CMal", "** malloccount (fetchpage_new_add): \0212%d\0217\n",malloccount));
      #endif

      free(url_buffer);
    }

    url_buffer = malloc(strlen(url) + strlen(add) + 128);

    if (!url_buffer) return make_no_fetch_memory_error(7);

    #ifdef TRACE
      malloccount += (strlen(url) + strlen(add) + 128);
      dprintf(("CMal", "** malloccount (fetchpage_new_add): \0211%d\0217\n",malloccount));
    #endif

    strcpy(url_buffer, url);

    /* See if there's a query string to strip */

    if (*add == '?')
    {
      char * query = strchr(url_buffer, '?');

      if (query) *query = '\0';
    }

    /* Append the given data */

    strcat(url_buffer, add);
  }

  #ifdef TRACE

    else
    {
      erb.errnum = Utils_Error_Custom_Normal;
      strcpy(erb.errmess, "Used same buffer in fetchpage_new_add!");
      show_error_ret(&erb);
    }

  #endif

  urlutils_fix_url(url_buffer, strlen(url_buffer) + 128);

  if (!new_window || b->full_screen) return fetchpage_preprocessed(b, record, stop, no_anchor_errors);
  else
  {
    RetError(windows_create_browser(url_buffer,
                                    NULL,
                                    NULL,
                                    name,
                                    Windows_CreateBrowser_Normal));

    RetError(browser_inherit(b, last_browser));

    return NULL;
  }
}

/**************************************************************/
/* fetchpage_new_raw()                                        */
/*                                                            */
/* Starts a fetch of a given URL, without doing anything to   */
/* that URL at all except copying it over to a malloc buffer  */
/* (to ensure it doesn't move around, as it would in a flex   */
/* block).                                                    */
/*                                                            */
/* Parameters: Pointer to a browser_data struct to which the  */
/*             new URL refers;                                */
/*                                                            */
/*             Pointer to the new URL string;                 */
/*                                                            */
/*             1 to record the previous URL in the history    */
/*             list, else 0;                                  */
/*                                                            */
/*             1 to stop other page fetches in any other      */
/*             frames related to this document, 0 to only     */
/*             stop those in this frame;                      */
/*                                                            */
/*             1 to suppress errors from in-page anchors      */
/*             which are not found, else 0.                   */
/**************************************************************/

_kernel_oserror * fetchpage_new_raw(browser_data * b, const char * url, int record, int stop, int no_anchor_errors)
{
  /* Don't proceed unless there's something to fetch */

  if (!url || !(*url)) return fetch_cancel(b);

  /* The URL may have been passed in from the 'tokens' buffer, */
  /* and fetch cancels etc. might corrupt it. So take a copy   */
  /* of it before proceeding further, if the URL didn't come   */
  /* from this buffer already...!                              */

  if (url != url_buffer)
  {
    if (url_buffer)
    {
      #ifdef TRACE
        malloccount -= strlen(url_buffer) + 128;
        dprintf(("CMal", "** malloccount (fetchpage_new_raw): \0212%d\0217\n",malloccount));
      #endif

      free(url_buffer);
    }

    url_buffer = malloc(strlen(url) + 128);

    if (!url_buffer) return make_no_fetch_memory_error(7);

    #ifdef TRACE
      malloccount += (strlen(url) + 128);
      dprintf(("CMal", "** malloccount (fetchpage_new_raw): \0211%d\0217\n",malloccount));
    #endif

    strcpy(url_buffer, url);
  }

  #ifdef TRACE

    else
    {
      erb.errnum = Utils_Error_Custom_Normal;
      strcpy(erb.errmess, "Used same buffer in fetchpage_new_raw!");
      show_error_ret(&erb);
    }

  #endif

  return fetchpage_preprocessed(b, record, stop, no_anchor_errors);
}

/**************************************************************/
/* fetchpage_claim_nulls()                                    */
/*                                                            */
/* Installs the relevant null event handlers so that a fetch  */
/* may proceed in the Desktop.                                */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the fetch.                                     */
/**************************************************************/

void fetchpage_claim_nulls(browser_data * b)
{
  /* Don't register the same handler twice... */

  if (!b->fetch_handler)
  {
    register_null_claimant(Wimp_ENull,(WimpEventHandler *) fetchpage_fetch,b);
    b->fetch_handler = 1;
  }

  /* Animations only apply to an ancestor window, not frames */

  b = utils_ancestor(b);

  /* If the 'drift' handler, to advance the animation to the */
  /* first frame and then stop, is active, remove it as the  */
  /* full-time animation handler is about to take over.      */

  if (b->anim_drift)
  {
    deregister_null_claimant(Wimp_ENull,(WimpEventHandler *) toolbars_animation_drift,b);
    b->anim_drift = 0;
  }

  /* Register the full time animation handler */

  if (!b->anim_handler && !b->plugin_active)
  {
    /* Is there an appropriate gadget in the status bar? */

    ObjectId lower = toolbars_get_lower(b);
    BBox     box;

    if (!gadget_get_bbox(0, lower, StatusBarAnimAnim, &box))
    {
      /* Yes, so install an animation handler. */

      register_null_claimant(Wimp_ENull,(WimpEventHandler *) toolbars_animation,b);
      b->anim_handler = 1;
    }
  }

  /* Update the button bar */

  toolbars_set_button_states(b);

  /* Record the usage of the animation handler. This will increment */
  /* once in the ancestor object for every child fetch, so that     */
  /* the animation handler can finally be released when all the     */
  /* child fetches have stopped.                                    */

  b->current_fetches++;
}

/**************************************************************/
/* fetchpage_release_nulls()                                  */
/*                                                            */
/* Releases all relevant null event handlers used for a fetch */
/* in the Desktop, *EXCEPT* for an animation drift handler,   */
/* which, if the Controls dictate it, will be installed.      */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the fetch.                                     */
/**************************************************************/

void fetchpage_release_nulls(browser_data * b)
{
  /* Don't register the same handler twice... */

  if (b->fetch_handler)
  {
    deregister_null_claimant(Wimp_ENull,(WimpEventHandler *) fetchpage_fetch,b);
    b->fetch_handler = 0;
  }

  /* Animations only apply to an ancestor window, not frames */

  b = utils_ancestor(b);

  /* Only remove the handlers if there are no fetches in any */
  /* children, etc. (see fetchpage_claim_nulls comments).    */

  b->current_fetches--;

  if (!b->current_fetches)
  {
    /* Deregister the full time animation handler */

    if (b->anim_handler && !b->plugin_active)
    {
      deregister_null_claimant(Wimp_ENull,(WimpEventHandler *) toolbars_animation,b);
      b->anim_handler = 0;
    }

    /* If the Controls say to install the 'drift' handler to ensure   */
    /* the animation finishes on the first frame, and that handler is */
    /* not already installed, install it.                             */

    if (controls.anim_drift && !b->anim_drift && !b->plugin_active)
    {
      register_null_claimant(Wimp_ENull,(WimpEventHandler *) toolbars_animation_drift,b);
      b->anim_drift = 1;
    }
  }

  /* Abandon any token searching (e.g. for named anchors) */

  b->display_request = NULL;
  b->display_offset  = 0;
  b->display_vscroll = 0;

  /* Update the button bar */

  toolbars_set_button_states(b);
}
@


1.33
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@d82 1
a82 1
static _kernel_oserror * fetchpage_preprocessed     (browser_data * b, int record, int stop);
d103 1
a103 1
      static oldstatus;
d113 6
d159 1
a159 1
//  do
d182 4
a185 4
//  while (
//          tf_now - tf_start < priority &&
//          (fetching || formatting)
//        );
d341 4
a344 1
/*             screen).                                       */
d350 1
a350 1
_kernel_oserror * fetchpage_fetch_targetted(browser_data * parent, const char * url, const char * target, const char * appnddata, int new)
d374 1
a374 1
  if (new)
d380 1
d424 1
d435 2
a436 1
                               1);
d450 1
d478 1
d486 2
a487 1
                                          1);
d645 4
a648 1
/*             stop those in this frame.                      */
d651 1
a651 1
static _kernel_oserror * fetchpage_preprocessed(browser_data * b, int record, int stop)
d672 2
a673 1
                                           (char *) browser_current_url(b))
d680 2
a681 1
                                           (char *) browser_base_url(b))
d996 4
a999 1
/*             stop those in this frame.                      */
d1002 1
a1002 1
_kernel_oserror * fetchpage_new(browser_data * b, const char * url, int record, int stop)
d1050 1
a1050 1
  return fetchpage_preprocessed(b, record, stop);
d1080 3
d1092 1
a1092 1
_kernel_oserror * fetchpage_new_add(browser_data * b, const char * url, int record, int stop, const char * add, int new_window, const char * name)
d1153 1
a1153 1
  if (!new_window || b->full_screen) return fetchpage_preprocessed(b, record, stop);
d1186 4
a1189 1
/*             stop those in this frame.                      */
d1192 1
a1192 1
_kernel_oserror * fetchpage_new_raw(browser_data * b, const char * url, int record, int stop)
d1238 1
a1238 1
  return fetchpage_preprocessed(b, record, stop);
@


1.32
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@a48 5
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

d105 1
a105 1
      if ((tl & (1u<<6)) && (handle->fetch_status != oldstatus))
d107 1
a107 1
        Printf("\nfetchpage_fetch: Called with new status %d\n",handle->fetch_status);
d153 1
a153 1
  do
d176 4
a179 4
  while (
          tf_now - tf_start < priority &&
          (fetching || formatting)
        );
d217 4
a220 1
    if (!reformat_formatting(handle))
d222 10
a231 1
      if (!image_count_specific_pending(handle))
d233 4
a236 2
        /* There are no pending images, so we seem to have finished - */
        /* but is there a reformat pending?                           */
d238 5
a242 1
        if (handle->refo_time)
d244 2
a245 3
          /* Yes, so flush the queue */

          reformat_format_from(handle, handle->refo_line, 1, -1);
a246 4
        else
        {
          /* No; get rid of null claimants (the call will *install* a new */
          /* animation drift handler if the Controls require it).         */
d248 1
a248 1
          if (handle->fetch_handler) fetchpage_release_nulls(handle);
d250 1
a250 3
          /* If flagged to do so, call the image garbage collector */
          /* again - after fetching everything free memory may be  */
          /* getting low.                                          */
d252 1
a252 5
          if (handle->clear_images)
          {
            image_maybe_gc(handle);
            handle->clear_images = 0;
          }
d254 3
a256 3
          /* We may have a pending messages to send */

          e = protocols_atats_send_any_pendings(handle);
d258 1
a258 1
          /* If this is a small fetch window, close it */
d260 5
a264 1
          if (handle->small_fetch)
d266 1
a266 1
            int close = 1;
d268 1
a268 1
            /* If this is a fetch for a Plug-In, tell the Plug-In about it */
d270 2
a271 7
            if (
                 handle->pstream             &&
                 handle->pstream->active     &&
                 !handle->pstream->abandoned
               )
            {
              plugin_fetch_completed(handle);
d273 3
a275 1
              /* Only close the window if the stream won't close itself */
d277 2
a278 2
              if (handle->pstream->will_close_itself) close = 0;
            }
d280 1
a280 3
            /* Close the window *afterwards* - or you've  */
            /* just freed up message structures etc. that */
            /* need to be dealt with first.               */
d282 3
a284 2
            if (close) windows_close_browser(handle);
          }
d286 1
a286 1
          /* Otherwise, proceed as normal */
d288 1
a288 3
          else
          {
            /* Check the page's vertical extent is correct */
d290 3
a292 1
            ChkError(reformat_check_extent(handle));
d294 1
a294 1
            /* Update the status bar */
d296 1
a296 8
            toolbars_cancel_all(handle);
            toolbars_update_status(handle, Toolbars_Status_Viewing);
          }

          /* Report any errors from the pending message sends */

          ChkError(e);
        }
d589 1
a589 1
        if (tl & (1u<<13)) Printf("** malloccount (fetchpage_process_internal): \0212%d\0217\n",malloccount);
d601 1
a601 1
      if (tl & (1u<<13)) Printf("** malloccount (fetchpage_process_internal): \0211%d\0217\n",malloccount);
d683 1
a683 3
      #ifdef TRACE
        if (tl & (1u<<24)) Printf("fetchpage_preprocessed: JavaScript URL found:\n'\0216%s\0217'\n", url_buffer);
      #endif
d729 1
a729 1
      if (tl & (1u<<13)) Printf("** malloccount (fetchpage_preprocessed): \0212%d\0217\n",malloccount);
d740 1
a740 1
      if (tl & (1u<<13)) Printf("** malloccount (fetchpage_preprocessed): \0211%d\0217\n",malloccount);
d864 1
a864 3
  #ifdef TRACE
    if (tl & (1u<<12)) Printf("fetchpage_postprocessed: Chunk CK_FURL set to %d\n",strlen(url_buffer) + 128);
  #endif
d934 1
a934 1
      if (tl & (1u<<13)) Printf("** malloccount (fetchpage_postprocess_uri): \0212%d\0217\n",malloccount);
d946 1
a946 1
    if (tl & (1u<<13)) Printf("** malloccount (fetchpage_postprocess_uri): \0211%d\0217\n",malloccount);
d996 1
a996 1
        if (tl & (1u<<13)) Printf("** malloccount (fetchpage_new): \0212%d\0217\n",malloccount);
d1008 1
a1008 1
      if (tl & (1u<<13)) Printf("** malloccount (fetchpage_new): \0211%d\0217\n",malloccount);
d1083 1
a1083 1
        if (tl & (1u<<13)) Printf("** malloccount (fetchpage_new_add): \0212%d\0217\n",malloccount);
d1095 1
a1095 1
      if (tl & (1u<<13)) Printf("** malloccount (fetchpage_new_add): \0211%d\0217\n",malloccount);
d1180 1
a1180 1
        if (tl & (1u<<13)) Printf("** malloccount (fetchpage_new_raw): \0212%d\0217\n",malloccount);
d1192 1
a1192 1
      if (tl & (1u<<13)) Printf("** malloccount (fetchpage_new_raw): \0211%d\0217\n",malloccount);
@


1.31
log
@Long overdue check-in of intermediate browser build, from continued "out
of hours" work. Forgot to add a few files last time too.

List dialogue box handler complete, and exclusion lists implemented
within the main browser code. Full documentation in Choices file.
Save routine knows all about it but is now getting very slow - must
come up with a better scheme; for now, it puts the hourglass on...

StripExtensions option controls auto stripping of filename extensions.

More sensible ancestor / frame selection for keyboard shortcut items
and the save dialogues - having selected a frame won't lock you into
it for F3 and related shortcuts now (input focus in URL writable ->
get ancestor details, input focus in frame -> get frame details). F4
works in frames. F5 now generally present for 'view source' with a
corresponding menu entry in the File menu.

Odd thing in later Res files; there's no action set for Adjust clicks
on the main ToolAction items in the button bar. Very odd. Nothing
appears to be set in v2.07 either, yet adjust-click works. Even
stranger. Anyway, added in the relevant event details (same as for
Select click in all cases) and this fixes the problem.

Background colours in the TABLE tag ignored the "don't print any
backgrounds" Print Style setting. Fixed. Meanwhile, the "black
text with no backgrounds" option wasn't getting this right either;
fixed this also.

Event logging implemented; HTTP errors and script output via.
window.print extension. No internal error output yet.

Faith:Never behaviour extended. If ever a server sends something with
no content type or an unhandleable type, the browser will try and get a
filetype from the URL. If it gets text or HTML, it'll render the file.
Else it'll save it. Hacks around IIS 4's lack of a content type field
in the Marketeye login stuff, and similar other slightly broken sites.
@
text
@d15 14
a28 12
/***************************************************/
/* File   : FetchPage.c                            */
/*                                                 */
/* Purpose: High-level fetch functions; the main   */
/*          interface for initiating and control-  */
/*          ling full page fetches. Compare with   */
/*          lower level Fetch.c and FetchHTML.c.   */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 25-Nov-96: Created.                    */
/***************************************************/
d34 1
a34 1
#include "flex.h"
d36 2
a37 1
#include "swis.h"
d39 1
a39 1
#include "URI.h"     /* URI handler API, in URILib:h */
d41 3
a43 3
#include "wimp.h"
#include "wimplib.h"
#include "event.h"
d45 8
a52 3
#include "toolbox.h"
#include "window.h"
#include "gadgets.h"
a53 1
#include "svcprint.h"
d90 9
a98 9
/*************************************************/
/* fetchpage_fetch()                             */
/*                                               */
/* Handles the initiation of a fetch and the     */
/* display of the result in a browser window.    */
/*                                               */
/* Parameters are as standard for a Wimp event   */
/* handler (this is called on null events).      */
/*************************************************/
d317 28
a344 31
/*************************************************/
/* fetchpage_fetch_targetted()                   */
/*                                               */
/* Fetch a given URL, possibly appending some    */
/* given extra data, into a given target window, */
/* an ancestor browser, or a new view.           */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             which acts as a parent;           */
/*                                               */
/*             Pointer to the URL to fetch;      */
/*                                               */
/*             Pointer to a window target name,  */
/*             or NULL to open in the parent -   */
/*             if full screen, note that any     */
/*             target names which would          */
/*             otherwise have opened a new       */
/*             window will not do so;            */
/*                                               */
/*             Pointer to any extra data to      */
/*             append to the URL, or NULL;       */
/*                                               */
/*             1 to open the URL in a new window */
/*             (with no name) regardless of the  */
/*             targetting, else 0 (this will not */
/*             be overridden when running full   */
/*             screen).                          */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the fetch.            */
/*************************************************/
d482 11
a492 11
/*************************************************/
/* fetchpage_process_internal()                  */
/*                                               */
/* Some internal URLs involve just substituting  */
/* the internal URL for some known or easily     */
/* discoverable alternative early in the fetch   */
/* stage. This function handles such changes.    */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the fetch.            */
/*************************************************/
d617 20
a636 23
/*************************************************/
/* fetchpage_preprocessed()                      */
/*                                               */
/* Fetches a URL, which must be in the           */
/* 'url_buffer' malloced block of memory.        */
/* Intended to be called from functions such     */
/* as fetchpage_new or fetchpage_new_add.        */
/*                                               */
/* If using the URI handler, the URL will be     */
/* sent through that and won't actually fetch    */
/* at this stage, therefore.                     */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             to which the new URL refers;      */
/*                                               */
/*             1 to record the previous URL in   */
/*             the history list, else 0;         */
/*                                               */
/*             1 to stop other page fetches in   */
/*             any other frames related to this  */
/*             document, 0 to only stop those in */
/*             this frame.                       */
/*************************************************/
d854 12
a865 12
/*************************************************/
/* fetchpage_postprocessed()                     */
/*                                               */
/* Working end to fetchpage_preprocessed, which  */
/* will fetch the url in the url_buffer block.   */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             to which the new URL refers;      */
/*                                               */
/*             1 to record the previous URL in   */
/*             the history list, else 0.         */
/*************************************************/
d918 16
a933 18
/*************************************************/
/* fetchpage_postprocess_uri()                   */
/*                                               */
/* If the URI handler comes back with a          */
/* URI_MProcess message and we can handle the    */
/* URI it details, then that URI may be fetched  */
/* through this function - it is first copied    */
/* locally and then passed over to               */
/* fetchpage_postprocessed.                      */
/*                                               */
/* Parameters: Pointer to a browser_data         */
/*             struct relevant to the URI;       */
/*                                               */
/*             Pointer to the URI string;        */
/*                                               */
/*             1 to record the previous URL in   */
/*             the history list, else 0.         */
/*************************************************/
d965 22
a986 25
/*************************************************/
/* fetchpage_new()                               */
/*                                               */
/* Cancels any old fetch and starts a new one    */
/* the given URL.                                */
/*                                               */
/* The URL is copied to a malloc buffer before   */
/* being used, so the pointer to it can be from  */
/* pretty much anything (though beware of flex   */
/* blocks shifting over the actual function call */
/* boundary...).                                 */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             to which the new URL refers;      */
/*                                               */
/*             Pointer to the new URL string;    */
/*                                               */
/*             1 to record the previous URL in   */
/*             the history list, else 0;         */
/*                                               */
/*             1 to stop other page fetches in   */
/*             any other frames related to this  */
/*             document, 0 to only stop those in */
/*             this frame.                       */
/*************************************************/
d1039 35
a1073 40
/*************************************************/
/* fetchpage_new_add()                           */
/*                                               */
/* As fetchpage_new, but takes a second string,  */
/* which is data to be concatenated onto the end */
/* of the given URL. This may be useful for      */
/* image maps or forms data. You may also        */
/* specify whether this URL is to be fetched in  */
/* a new browser window or not.                  */
/*                                               */
/* If the additional string starts with a '?'    */
/* and the given URL contains a '?' already,     */
/* the '?' and everything after it is stripped   */
/* off before the new data is added.             */
/*                                               */
/* Restrictions as for fetchpage_new.            */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             to which the new URL refers;      */
/*                                               */
/*             Pointer to the new URL string;    */
/*                                               */
/*             1 to record the previous URL in   */
/*             the history list, else 0;         */
/*                                               */
/*             1 to stop other page fetches in   */
/*             any other frames related to this  */
/*             document, 0 to only stop those in */
/*             this frame;                       */
/*                                               */
/*             Pointer to the data to add onto   */
/*             the end of the URL string;        */
/*                                               */
/*             1 to fetch the URL in a new       */
/*             window, else 0;                   */
/*                                               */
/*             If opening in a new window,       */
/*             pointer to the window name (if    */
/*             wanted), or NULL.                 */
/*************************************************/
d1151 20
a1170 21
/*************************************************/
/* fetchpage_new_raw()                           */
/*                                               */
/* Starts a fetch of a given URL, without doing  */
/* anything to that URL at all except copying it */
/* over to a malloc buffer (to ensure it doesn't */
/* move around, as it would in a flex block).    */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             to which the new URL refers;      */
/*                                               */
/*             Pointer to the new URL string;    */
/*                                               */
/*             1 to record the previous URL in   */
/*             the history list, else 0;         */
/*                                               */
/*             1 to stop other page fetches in   */
/*             any other frames related to this  */
/*             document, 0 to only stop those in */
/*             this frame.                       */
/*************************************************/
d1221 9
a1229 9
/*************************************************/
/* fetchpage_claim_nulls()                       */
/*                                               */
/* Installs the relevant null event handlers so  */
/* that a fetch may proceed in the Desktop.      */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the fetch.            */
/*************************************************/
d1285 10
a1294 11
/*************************************************/
/* fetchpage_release_nulls()                     */
/*                                               */
/* Releases all relevant null event handlers     */
/* used for a fetch in the Desktop, *EXCEPT* for */
/* an animation drift handler, which, if the     */
/* Controls dictate it, will be installed.       */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the fetch.            */
/*************************************************/
@


1.30
log
@Another intermediate check-in, resources may not be up to date; items
most likely to be buildable are PhoenixJ and BrowseD. Done because I'm
about to make some rather dodgy changes to code otherwise unchanged
since the Customer browser and I may well have to back them out...

In Handlers.c now set the HFlags_HasBeenVisited bit of a token at the point
it is first clicked on. Means the link returns to a "visited" colour after
the highlight flash immediately. This will persist for as long as the browser
window is kept open on that page, though if the URL doesn't end up making it
into the history for whatever reason it would "unhighlight" on reload; fair
enough, really. The highlight is window-local, so there are no redraw worries
for other open windows with links to the same URL (though other same-URL
links on the same page aren't updated either).

All forms submissions force a reload (principally for eudoramail.com, but
many other sites have similar requirements).

!MkClean and !MkClnAll didn't correctly call the utility to strip Makefile
dependencies. Fixed.

On fetch closedown, fetchpage_preprocess_token could be called on a token
which had already been run through the preprocessor. Now checks the flags
word before proceeding.

Image RAM cache and garbage collection system implemented - see new Choices
file entries CollectAfter, FreeRAMLimit and UnusedImageLimit to get an
overview. This contains groundwork for JavaScript image array support.

More JavaScript support improvements. Any one window object will know its
parent, top, this, etc.; frames array working except for a frameset created
via. multiple documents; opener for something created with window.open is
currently not set and don't know why (property is being created, pointer to
valid object is held, but JS engine returns 'null'. Ho hum) - JSChain won't
work yet, then.
@
text
@d54 1
d905 4
@


1.29
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d211 1
a211 2
//      image_discard_unused(handle);
      handle->clear_images = 0;
d233 10
@


1.28
log
@All !Run[D], Choices, Messages, Controls and Res files are up to date.

RefoKeep and RefoHold options added to, respectively, try and maintain
the line at the top of the visible area when reformatting, and not shrink
the vertical extent at the start of a reformat to try and avoid flicker
to the top of the page and back down again when RefoKeep is on. Choices
front-end implemented, which also allows RefoWait and RefoTime to be set.
Unfortunately for various reasons this doesn't help the page jumping when
unsized images come in (but RefoHold can improve matters...) - roll on
the image history.

DragToScroll and NoScrollBars options added for frames; included new
pointer type, Mouse_Shape_DTS, so relevant Controls file entries done
and Sprites[22] files updated as required. Noticed some builds have
a low-res ptr_link with a mask - mask removed.

Named anchor following fixed up somewhat - anchors near the bottom of
the page shouldn't be displayed, and then pulled down when the fetcher
releases null polls and ensures the y extent is correct (this through
implementing the min_height field in the browser_data structure).

RefoHang was never implemented and there seems little point to it now,
so the entry for it has been removed from the global choices structure
and all Choices files.

Markers menus should work properly now (in last check-in they would not
update correctly if Adjust was used on the entries).

URI handler usage now a lot more sensible, with configuration of how the
browser uses the module from both a Utils menu submenu (sic) and the
Choices dialogue.

Slightly dodgy 'hang around waiting for user input' stuff for the Cookies
dialogue box: All fetches are suspended; the fetcher remembers some info
about its state at the time the cookie came in, and restores it later; it
will only do this for one fetch at a time. It's necessary to single-thread
the fetcher at this point anyway, since other fetches may have a
dependency on the cookie that is hanging in mid-air at that point. As part
of this, some of the fetcher code has been split out into separate
functions (to try and 'black box' the code a bit). Anyway, Cookie Query
dialogue box now implemented with appropriate Choices file entry and
UI work in the Choices dialogue box.

Phoenix build Choices rearranged. Can now choose when the image history
is saved from the front end. Added also MSIE 4-style table option menu
for JPEG support (OS only, OS if it can handle it, internal only).

Should be a bit faster at loading the history - though 95% of the time
is spent in SWI URL_ParseURL. URL descriptions are stored more
efficiently as part of this - one malloc block instead of several
small blocks. The minimum block size for malloc blocks typically leads
to a significantly smaller startup wimpslot depending on the visit
history size.

Nasty bug in image system fixed. If an image size came in and a reformat
was to take place, the line the image lies in is found and the reformat
progresses from there. Unforunately, this didn't check to see if the
token can't be found in the line list, so it'd reformat from the top
of the page...! This would happen if, for example, an image halfway down
the page came in whilst a reformat for an image higher up had just begun.

In Choices.c, made choices_set_timetype_field, choices_set_uri_field,
choices_set_plugin_field, choices_set_cookie_field, and
choices_set_jpeg_field static (so they're not declared in Choices.h now).

Two memory leaks plugged in URL comparison routines in URLutils.c
(calling free() url_description instead of urlutils_free_descripton()).

Client pull reload handler was setting the reload flag if reloading
the same page, but forgetting to turn on reload_lock so
fetchpage_postprocessed was clearing the reload state... Similarly,
Ctrl+Shift+SELECT-Click on a link when the Controls file 'UseSmall'
entry is 'no' would not have reloaded as it should. Both fixed.

Frames shouldn't be so keen on acquiring horizontal scroll bars and never
letting them go when their width is decreased now. Frames set up for
'scrolling="yes"' will not start with no scroll bars and then gain them
shortly afterwards, causing flicker and two reformats - they'll start
with, and continue to hold, both scroll bars.

Pointer shouldn't flicker when over a frame border whilst other fetches
are progressing now.
@
text
@d74 1
a74 1
char * url_buffer = NULL;
a151 1

d197 1
a197 33
  if (handle->display_request == DISPLAY_NAMED)
  {
    char    * p;
    HStream * t;

    t = 0;

    p = fetch_find_name_tag(browser_current_url(handle)) + 1;
    t = fetch_find_anchor_token(handle, p);

    if (t)
    {
      handle->display_request = t;
      handle->display_offset  = 0;
      handle->display_vscroll = 0;
    }
  }

  if (handle->display_request && handle->display_request != DISPLAY_NAMED)
  {
    if (
         handle->display_request &&
         browser_show_token(handle,
                            handle->display_request,
                            handle->display_offset,
                            handle->display_vscroll)
       )
    {
      handle->display_request = NULL;
      handle->display_offset  = 0;
      handle->display_vscroll = 0;
    }
  }
d337 16
d631 5
d638 20
a657 5
       !b->post_data && /* Must do the fetch even if we could just jump to a named anchor, if a POST */
       !b->reloading && /* form is being sent or if we're deliberately force reloading something.    */
       browser_display_local_reference(b,
                                       url_buffer,
                                       browser_current_url(b))
d667 50
d1039 5
d1103 12
@


1.27
log
@This is NOT a 'final' version of anything in particular. I'm checking it
in as I'm about to start playing around with low level window handling
(as part of the thing mentioned at the bottom of this log) - this could
screw things up quite badly if it goes wrong! =8*P

Consequently, I advise you not to check this out over your working sources,
and preferably not to check this out at all.

Markers system - events defined in MiscEvents.h will make Browse remember
where it is on the page. This position can be jumped back to later.
Some builds will have defined keyboard shortcuts Ctrl+Shift+F5 through
F8 to set a marker, and Ctrl+F5 through F8 to jump to a marker.

The front-end for the above now has gadgets 0x80 upwards on the Toolbar or
a set of menus (see Menus.h). Noticed an omission in copy_toolaction_info()
(didn't copy the gadget state) in passing; fixed.

browser_top_line() now works properly, as part of the above, but it'll be
slower than before. If flagged to only find a complete line, it'll do just
that, but whereas before this would require any tables that it looked
inside to be wholly visible, tables can now be partially visible and have
lines inside that are fully visible. This should help the Find function
too. There is a new call, browser_top_line_offset, which works as
browser_top_line but also returns a vertical scroll offset in the found
line (used for more accurate marker position). browser_bottom_line[_r]
turn out to never be used, even by the keyboard control routines, so they
have been removed from Browser.c (rather than spend a lot of time and
effort fixing them).

browser_show_token erroneously subtracted 1 from a particular coordinate
when calculating the y scroll position, which could lead to single pixel
page creep using the markers system. Corrected.

The View Resources button (see Toolbars.h) has been finally implemented,
insofar as it fetches the resources file to the current browser page (or
to a new window if Adjust is used, Controls file settings permitting).

menus_toggle_bars did not take account of the toolbar lower window border
edge correctly. It does now.

The reformatter has a prototype system to keep the vertical page position
when reformatting. This was coded about 5 minutes ago, and is not likely
to be reliable...
@
text
@d53 1
d759 14
a772 1
  if (uri_module_present && strncmp(url_buffer, Internal_URL, Int_URL_Len))
d775 2
a776 1
    /* and the URL isn't an internal one.                            */
d1262 6
@


1.26
log
@Programming warehouse link removed from all hotlists - the page has gone.

Some compile-time hacks in place to use MemLib, a dynamic area based
malloc replacement which shrinks its heap when possible. All builds
have these switched off at the moment. Seemed to work with just Browse,
though there would be problems with message blocks stored in dynamic
areas because of the Wimp's '&3800000' check - however, it failed when
HTMLLib was made to use it, too. Don't know why yet.

ItemInfo.[c/h] source added, with Res file additions for testbed Browse
and Phoenix.

Small fetch windows now work properly regardless of toolbar settings
in the Choices.

Reload now reloads all images too, rather than only reloading them for
as long as the main page was being fetched.

Added a simple 'Find' facility.

Realised that event handlers in eventlib are called in reverse order
of registration, so the miscellaneous event handler is now registered
first rather than last.

Multiuser code added (most only active if SINGLE_USER is undefined). As
part of this, hotlist code now knows about read-only items (done for the
Customer-style 'Resources' file, but works generally anyway).
handle_add_hotlist doesn't try to save the hotlist itself anymore (the
hotlist_add function does all that through hotlist_modified anyway).

Customer build Choices and Controls updated slightly (e.g. ClaimHelp
off, hotlist to save on quit only).

Customer build now uses Phoenix-style buttons. Sprites files which
worked at the time (but will probably be out of date now) and included
most of the original Customer-style sprites are in
'Utils.Icons.Customer'.

Choices, Messages and Res files for all builds now stripped down to only
single user items or single plus multiuser for Customer build and testbed
build. Before, all contained a few multiuser bits in at least the Choices
file if not more.

Grammatical error ("Fetching frames contents" (sic.)) corrected in
default message, Toolbars.c, and all of the Messages files.

Customer build brought back to a servicable level (including
implementation of the Find dialogue box with animation and fixing
up authorisation and 'Stop' state in the tristate). Quite a few
missing #ifndef REMOTE_HOTLIST bits from hotlist code added...

Customer build will not use <Choices$Write> or Boot:Choices for any
file finding now. UseProxy defaults to 'yes', MaxImages to 2. Res
file includes Proxy Address setting (save_save_choices() now writes
the ProxyAddress line).
@
text
@d211 1
d214 2
a215 1
  else
d221 2
a222 1
                            handle->display_offset)
d225 3
a227 7
      WimpGetWindowStateBlock s;

      s.window_handle = handle->window_handle;
      wimp_get_window_state(&s);

      if (s.yscroll != handle->display_vscroll) handle->display_vscroll = s.yscroll;
      else handle->display_request = 0, handle->display_vscroll = 0;
@


1.25
log
@RefoSingle option added to Controls.

Precautions taken in table code to avoid divide by zero errors.

Framesets defining more frames than the frameset implies, for whatever
reason, should never cause a crash now - just report a 'Frames definition
is badly nested' error (if STRICT_PARSER defined). Along the same lines,
in a single document defining a set of nested frames, two /FRAMESETs in
succession could cause a fairly nasty crash. Fixed.

TIFFs do not get loaded by double-click now.

If holding down SHIFT to save a link contents to disc, you can also hold
down CTRL to bypass the cache (sets the browser's reloading flag). Noticed
when testing this that windows_create_browser didn't take account of the
Controls file 'UseSmall' entry when adjust-shift-clicking on links. It
does now.

There is now a complete and up to date set of interactive help messages
built into the Ursula, Customer and Phoenix build Res files.
@
text
@d55 1
d501 2
a502 1
       b->displayed == Display_Home_Page
d535 45
d733 12
d810 5
a1252 1

@


1.24
log
@*Don't* try to load FilterManager 0.18 in !Run[D] files. Requires
WindowManager 3.98. Sets URI handler environment variables for
http, ftp and gopher.

Fixed 'doesn't reformat for unsized images' bug - only happens when the
deferred reformatter is enabled, hadn't remembered to check this in my
debug build where this is turned off. Oops.

Caret position in forms could get left behind despite attempts to rectify
this in v1.31 - now fixed (and faster, fortunately).

Hourglass + percentage displayed for History and Image History when
loading - it can take a while for very big histories, though in
practice you only see the visit history loading (has to do a lot
more work, and is thus quite a bit slower than the image history).

POST forms worked when targetted to frames, but were broken when
not targetted! (Forms data inherited from one browser to the same
browser; ended up freeing the flex block...). Fixed.

Now support 303 response code (redirect to GET). Treated as 301, i.e.
not support if STRICT_PARSER is defined, otherwise drops through to
the 302 handling code.

Pointer shouldn't get stuck in odd shapes when going to a new page now;
it gets reset to a standard shape every time the null handler that
checks the position is called, though (whether or not the handler thinks
the pointer is over a different token, if that token is NULL, it sets
the standard shape). A possible work around would be for a browser to
remember the pointer shape too; that's for the future, though.

Early stage table formatting functions could blow themselves apart if
tables_count_table decided there were no rows, columns or both. A
net table size of zero cells is now dealt with; slow, partial table
fetches in multiple windows with image loading turned on will now
*hopefully* be stable, where v1.31 would have bombed out repeatedly.

A nested frameset within one document will now inherit the border
width (frame spacing) and border colour of its parent. This is done
by copying the maxlen and indent fields of the parent token over
the child, and note it's done in the browser (fetch_preprocess_token),
not HTMLLib.

Border colour on a FRAMESET now used, with the first colour on any
FRAME within it overriding, as in NN 4 and MSIE 4.

<LI> bullets really do stick to the text next to them now (I'd done
that in an experimental piece of code and forgotten to merge it back
before the last check-in).

Browse$HotlistURL/URIFile and Browse$HomeURL/URIFile now work from
_TaskName in the Messages file, and are thus of the generic form
<App>$HotlistURL etc. - Docs.Notes and Docs.User updated appropriately.

Event 0x11d00 through to 0x11d7f will make the browser look up Controls
file entries 'JumpTo00' through to 'JumpTo7f' and read a URL from them.
This will be fetched in the ancestor window of the source of the event,
or a new window if such an ancestor can't be found [for Daytona demo].

NB: Nasty frames-related crash at http://www.teledanmark.dk/menu/start.htm
is *not* fixed in this source. NOBR is not supported.
@
text
@d125 5
d138 9
a146 10
  if      (handle->fetch_status == BS_IDLE)                           priority = 15; /* Not fetching, may be solid formatting    */
  else if (handle->fetch_status == BS_PROCESS)                        priority = 8;  /* Processing tokens, but fetch is complete */
  else if (handle->fetch_status == BS_FETCHING)                       priority = 3;  /* Fetching tokens (so fetch is incomplete) */
  else if (handle->fetch_status == BS_DATAFETCH && handle->save_file) priority = 2;  /* Saving data to a file (fetch incomplete) */
  else                                                                priority = 0;

  /* The main fetch/reformat loop */

  fetching   = fetch_fetching(handle);
  formatting = reformat_formatting(handle);
@


1.23
log
@Check for WindowManager 3.97 and ensure Unicode$Path is set in all
!Run[D] files, don't set the Alias$@@PrintType_FF4 variable, and updated
Customer build ROM obey file variants. Various other changes to
the Run files for new module versions, updated paths to support
new positions of choices, hotlist and histories (see later), etc.

!Sprites[22] files hold small !app icons for some variants, and
an ic_browse sprite. Some variants now have a Sprites and Sprites22
file instead of just Sprites, with the former containing various
mode 12 or 15 specific sprites.

Text files dragged to the URL writable are treated as ANT URL files. This
relies on URLBarWrit (Toolbars.h) being a unique ID, which it should be,
but beware of the Hotlist and Choices numberspaces...

INPUT TYPE=BUTTON supported. Form items without a FORM tag are now shown
(as MSIE 4, but not NN 4).

'*', '-', '@@', '_' and '.' are not escaped when submitting forms now. The
Web interface to the IMDb now works.

INPUT TYPE=HIDDEN items will not affect the line height anymore - so
http://www.hotmail.com/ now has correctly aligned writable icons, for
example. Similarly, TAG_FORM and TAG_FORM_END items could push up
line height and don't anymore.

HRs with a specified pixel width will now influence the size of a table
cell (they didn't before).

BRs now checked by tagno field when the browser needs to know something
was an actual BR tag rather than just a line break signal, and by the
style bit entry when only the indication of a line break is required.

Table widths of 0 or 0% are ignored.

Trace.c updated to report height and background fields in a table_stream.

fm_putsl() writes a terminator into the string; the Forms.c routines were
calling this for displaying INPUT TYPE=PASSWORD fields using the FE_PassCode
literal string (a line of stars). This write into a read only data area
would make the debugger fault the access. A local char array is now used
instead, to get round this (note the use of var[]=literal rather than
var[sizeof(literal)]; strcpy(var, literal) due to some weird compiler bug
that copies the wrong thing into 'var' under some (undefined...)
circumstances).

Text areas don't scroll back to the top line when clicked in anymore;
single line writables don't scroll back to the left either. When
reentering a text area from 'above', the caret appears at the top line
rather than 'somewhere further down'...

ARROWS_MOVE_OUT compile time option at the top of Forms.c defines whether
you must press Tab/Shift+Tab to move between writable fields in forms or
if up/down will drop out of them, though if keyboard control is on this
is enforced (or you get trapped inside the form!).

urlutils_filetype_from_url now uses MimeMap module.

If fetcher is told a page is text, it'll check for a filename extension and
may choose to use this instead (e.g. it may find it's HTML instead). This
is to try and get around duff servers... (e.g. http://www.batalarms.co.uk/).

Save dialogues shouldn't flicker when options that don't change the
filetype are selected (before, the draggable sprite was always reset for
each selection). Noticed the erroneous setting of a static variable in
SaveFile.c by a call to this by SaveObject.c, and so added a flag to
savefile_set_filetype to deal with this - would have been possible to get
the wrong filetype sent to applications or at best the wrong filetype
sprite in the dialogue without that.

The caret shouldn't jump out of a form back to the URL writable if the page
reformats now.

Table background colours now supported (as in the colour you see in the
border space if the cellspacing is large enough; this is as in MSIE, not
as in Navigator). Drawfile output routines updated accordingly.

Corrected erroneous use of wimpt_dx() / wimpt_dy() in a couple of places
in Images.c, which meant that (say) 1x1 images didn't work correctly in
medium resolution display modes.

Now have support for save as text (component ID and event 0x12) and save
as Draw (component ID and event 0x13) buttons. Dubious conditions for
greying and ungreying the print, save source and view source buttons and
menu options sorted out as part of implementing the same for the two new
buttons; added greying out of their associated menu items in passing.

Turned kerning on in draw file objects (does mean a rather heinous
increase in file size, but this is the only way to ensure the draw file
matches the visible page).

Comments before functions in SaveDraw.c are now complete and up to date.

Image and visit histories now generate a crude hash number to speed up
searching for items. It does give a speed increase, though it's a
disappointingly small one.

Issue of left/right margins and cellpaddings sorted out. Now have
redraw_left/right_margin for finding out the basic gap you must leave.
redraw_left/right_gap then gives any extra indentation for LI, BLOCKQUOTE
or whatever. The last two can be subtracted from the display width to
get an available page width for any section of text. Note that
redraw_left_gap replaces redraw_margin. The redraw_start_x function
uses the above to work out where a line's left hand edge should be,
taking account of left/right/centre alignment. HRs have been fixed now
(they were quite broken in v1.30, I think) based on this new model and
the behaviour of MSIE/NN 4.

Fixed width of cells with no contents - cell padding values wouldn't
have worked properly as the reformatter returns 0 rather than the left
hand margin size if given no stream.

Removed FM_Absolute flags for Font_Paint (spotted by DBrown) - sets bit
2, which is reserved...?

IMG width and height in % terms now works correctly; a % of available
width (after margins and indents) or height on the main page or for
a table cell, if the image lies in one. Because of the chicken-and-egg
problem with the latter, the cell must specify a width and/or height
for things to work properly. If this is not done, you'll usually end
up with a 1:1 scaled image (as in Navigator 4, rather than ending up
with no image or even no cell (!), as in MSIE 4).

HEIGHT attribute on a TABLE tag is supported, but only in a crude
fashion; the extra height (if there is any) is distributed over the
rows in a linear fashion. This is probably all you have to do in
practice, but I haven't checked. To maintain a notion of min/max
height as well as width would of course require a great deal more
work...

If using client pull to reload a page with a fragment ('...#name')
specified, then the reload wouldn't work on the same page; it'd just
jump to the fragment position. This won't happen if b->reloading is
set now (so works in conjunction with client pull on the same page
forcing a non-cached fetch). Similarly, if POSTing to such a URL,
a fetch will proceed (both these fixes done originally for
http://jupiter.beseen.com/chat/rooms/g/1678/).

browser_inherit split to browser_inherit and browser_inherit_post_data;
the code for the latter didn't clear any post_data in the child before
copying from the parent either, and could cause flex errors (now fixed).

Res file for Ursula ('Desktop' Browse) build tweaked - bits in the
font choices dialogue renamed, and button bar rearranged to hold the
new Save As Draw button. Other builds have had Save As Draw and
Save As Text buttons added, or not, depending upon availability of
suitable sprites, required UI simplicity, etc.

Now have:

  Browse$ChoicesFile
  Browse$ControlsFile
  Browse$ChoicesSave
  Browse$ControlsSave

(the last two are new) for loading and saving of the Choices or Controls
files. If unset, <App$Dir>.Choices or <App$Dir>.Controls will be set.
E.g., you could set Browse$ChoicesFile to be:

  <App$Dir>.Choices,Choices:WWW.(app).Choices

for loading and

  <Choices$Write>.WWW.(app).Choices

for saving. (The browser never saves Controls at the moment, so the
relevant variable above isn't effectively implemented, but could be
in future). Similarly, to support asymetric loading/saving of the Hotlist,
there are HotlistSave, HistorySave and ImageHistorySave entries in Choices
to complement HotlistPath, HistoryPath and ImageHistoryPath (which are used
for loading). save_save_choices will create directories as needed to obtain
the given path (and has also been fixed in various areas that hadn't been
tested out until now; e.g. zero termination of the AppName$ChoicesFile
variable expansion...). !Run[D] files updated appropriately.

Table widthing code rewritten. Slower, but a lot better on the whole.
Still has some problems - still needs a final 'make sure nothing is
below minimum width' scan, which it should be possible to do without.
No time to fix this at present!

The reformatter will now 'glue together' an LI token followed by any
non-LI token; so a bullet point followed by an item should not be able to
have a line break inserted after the bullet because of very tight width
constraints (it could before - yuk...).

'about:' brings up a page about the browser and any Plug-Ins, as with
Navigator (for example).

URI files support titles, as per spec. version 8. Saving a current
location to the Hotlist will thus give a sensible title now (unless
you're in a frame, so there's no title to get...). Of course, v1.00
files without a title still work.

Note that NOBR is *not* supported in this build and this combined with
the new table widther may cause problems on some sites (e.g. Microsoft's
home page!).
@
text
@d407 1
a407 1
        RetError(browser_inherit_post_data(parent, targetted));
@


1.22
log
@Not all resources are up to date in this check-in, and documentation
both within source and stuff in 'Docs' is out of date or missing - I
was very pushed for time on this one... Hopefully will do another
'tidy up' check-in before close on Friday; until then, beware of
anything other than the Ursula (Desktop browser) build. Anyway...

Export As Draw done. As part of this, FONT SIZE and SUP / SUB adjustment
of font size is done in fm_token_font_info rather than fm_find_token_font.

Bullets and switches are plotted as indirected sprite items, rather than
indirected text + sprite items - this relied on being in a redraw loop to
pick the sprites up from the local pool (failed during printing).

URI files now have a LF line ending rather than CR... '*' recognised
as an empty field when loading via. RAM transfer now (only worked for
loading from disc before).

Gave placeholder bounding boxes 4 OS units more minimum extra gap
vertically and reduced horizontal addition to this value * 1.5, rather
than * 2 (see reformat_get_placeholder_size).

Background image tiling starts at ymax - h + 4, rather than ymax, so
there isn't the bottom line of pixels from the top tile always present
at the top of the window. The '+4' is for caution's sake.

Can now save a frame's HTML source, that of its parent or its ancestor,
and the same for the URI pointing to those documents - see Menus.h for
the relevant component IDs that should lead to the SaveFile dialogue.

Have hopefully fixed timeout = 0 values (i.e. 'forever') on things
like LinkTo; before, image fetches could override the state (so you'd
only ever see brief flickers of a given URL as the pointer went over
a link).

Save File dialogue will remember the state of option or radio buttons
for a given parent component origin and restore that state when the
dialogue is next opened from the same place (stops turning on saving
as a URL file also turning on 'save background images' for Draw file
export, etc.).

Use of a META tag to reload the *same* page now sets the 'reloading'
flag in the browser so that it doesn't go through a proxy - otherwise
pages which are meant to update periodically through client pull
don't work, as they keep coming out of the cache.

Can now handle images specifying just a width or height in the HTML
(other dimension is scaled accordingly, but note that the placeholder
size must still be 'dumb' until the image data comes in). An image
will now override an image history size entry for the same entry
with a different size.
@
text
@d407 2
d411 9
a419 12
        if (appnddata) return fetchpage_new_add(targetted,
                                                url,
                                                1,
                                                1,
                                                appnddata,
                                                0,
                                                NULL);

        else           return fetchpage_new(targetted,
                                            url,
                                            1,
                                            1);
d421 8
d435 10
a444 7
        if (appnddata) return fetchpage_new_add(parent,
                                                url,
                                                1,
                                                1,
                                                appnddata,
                                                1,
                                                target);
d599 2
d611 27
@


1.21
log
@There are a few known significant problems with this code but it's being
checked in so the Choices can be worked on. Note that Res files etc. are
not up to date across all builds. Progress is as follows...

Bug report prompted me to do this - now ignore <p> tags straight after
<li> tags, so '<ul><li><p>Some text' works as the author (or automatic
generator, more commonly) intended.

A <p> tag before a table will be acted upon now (it was ignored before).
Something like <li><p><table...> will give a line break and paragraph
space after the <li> despite the changes mentioned above, as in other browsers.
Both browsers differ from Navigator, where the table appears alongside
the <li> tag.

Multiple BR tags work as in MSIE / Navigator (they don't collapse to
zero height anymore).

For the above, line height (and so, <br><br> or <p> spacing) is now
calculated inside reformat_text_line_height, and is used with either
a token to get the text height at a given size (e.g. for general line
spacing or multiple BR tags) or NULL for normal size text (e.g. for
P spacing, though this value is in practice later scaled by 7/8ths in
reformat_check_height). Note this behaviour is exhibited by MSIE 4;
v3 gave two BRs the same spacing as one P (i.e. not font size
dependent).

Save dialogues can have an option button or couple of radios to
switch between various formats (e.g. URI or URL, sprite or original
format). See 'Docs.Notes' for more. The back-end to this is now
implemented (i.e. at the moment, save as URI or URL, save as original
image format). Note that when saving background images, a leafname
based on the original fetch URL is now offered rather than a generic
'Background'.

Internal URL scheme changed to be all lower case, so relativisation
through URL_Fetcher still makes sense... :-/

Holding down 'shift' when clicking on stop reverses the interpretation
of the Controls file 'StopWebServe' entry.

Fixed row / column count for exporting tables as text; fixed a few
bits and pieces of internal URL scheme stuff which got broken when
HTMLLib started using URL_Fetcher's relativisation.
@
text
@d62 1
@


1.20
log
@Implemented Message_PlugIn_ReshapeRequest, Message_PlugIn_Status and
Message_PlugIn_Busy. Plug-in code more robust when given invalid
browser instance handles by the plug-in.

Line spacing is now calculated on the basis of the normal style base serif
font, with all other fonts being forced into that line height. This does
mean that an unusually tall (say) sans serif font may get clipped. It
appears to be the only way to get around wildly different baseline
depths returned from the font metrics - you can't work out line spacing
based on each different font style; the line spacing will vary.

Table heighting (as opposed to widthing...) improved considerably; rowspan
can no longer cause very tall cells in odd places. Having trouble getting
rid of the single pixel breaks between vertically adjacent cells, though
I've not tried too hard. Widthing, though, seems fairly badly broken at
present... :-/

Set/clear of page_is_text flag made more robust (it looked as though there
was the potential for this to get stuck in a set state, though I've never
see the front-end behave in a manner which indicates this is the case).
The reformatter will now decrease leading if this flag is set (plain text
pages look daft with a line spacing that is OK for 'rich' text pages).
No reformatting is done if the page width changes by dragging on the
resize icon, though toggle size / full screen will still reformat even
if the contents are only text (browser needs to sort out various width
flags at this point).

Cut down on excessive redrawing when reformatting due to a change in
window dimensions is not done. If display_width hasn't changed, then no
redraw is needed. If this causes redraw problems, then whatever is
changing display_width needs investigating. It shouldn't be kludged
(basically) by forcing a redraw instead of a reformat.

TT/PRE/etc. text can now have a non-100% aspect ratio. 80-90% looks
best (ArcWeb, for example, uses 86%). New option 'TTAspect' in
the Choices files.

Debug builds link to a non-debug Unicode library now; stops stderr
being dumped to the bottom left of the screen if you've not redirected
it in the Run file.

RISC OS 3.1 seems to need more initial WimpSlot than later OS versions.
The 64 deep nested table set gives a 'No stack for trap handler' error
(which it really means in this case!) without 800K, even though 3.71
is happy with just 640K. So, the !Run file checks if Boot$OSVersion
is exactly 300, 310 or 311, and sets the WimpSlot accordingly.

!Run[D] files now require latest fetcher module versions (URL 0.21,
File 0.31, HTTP 0.58).
@
text
@d174 14
a187 1
  if (image_count_specific_pending(handle)) ChkError(image_process_null(handle));
d361 2
a362 3
  _kernel_oserror * e;
  browser_data    * ancestor;
  browser_data    * targetted;
a941 2
    _kernel_oserror * e;

@


1.19
log
@Image history can be emptied from the History menu.

Significant reduction in number of times reformatter is called during
a table widthing session results in a dramatic speed increase for nested
tables (e.g. 64 deep with a paragraph of text in the deepest table takes
about two seconds to load with near-instantaneous subsequent reformats,
as opposed to taking optimistically 28 days for a 32 deep table!).
This code relies on a very big stack of assumptions...

Save as plain text implemented.

Choices, Messages and Res files brought up to date where necessary.
Version number taken to 1.28, 04-Dec-97 (so I don't forget later,
basically...).
@
text
@d1051 1
a1051 1
  if (!b->anim_handler)
d1114 1
a1114 1
    if (b->anim_handler)
d1124 1
a1124 1
    if (controls.anim_drift && !b->anim_drift)
@


1.18
log
@Following the last check-in - all build resources brought up to date.

Adjust-click on forwards/backwards buttons did not work in the intermediate
build, and now does.

Adjust-click on form submission buttons where the submit method is POST
will now work correctly, as the new view inherits the extradata block
of the old. Failure of this is signalled through
make_no_fetch_memory_error, code 16 (see updated Errors file in Docs).
Note the name change of extradata in this context; more details below.

The passing of forms POST data and extra headers for sending in an
HTTP request via. the URL module was all done through pointers into
flex blocks, and was therefore very unsafe. All relevant functions now
use pointers to pointers to the data.

To remove confusion on the umpteen uses of the word 'extradata', the field
in browser_data has been renamed to 'post_data'. The 'extradata' parameters
used within FetchPage.c were all disconnected from the extra header info /
form POST data stuff that extradata is usually associated with, and have
thus also been renamed, in this case to 'appnddata' (Append Data).

As well as X-NoProxy, the browser sends the 'proper' HTTP headers
Pragma:no-cache and Cache-Control:no-cache.

A redirection from a POST request was not handled correctly; despite
what HTTP specs say, you're supposed to use GET for the new URL. The
browser was, but when it chopped off the redundant header data in the
request didn't terminate it and left Content-Type in anyway...! Fixed.

Ctrl+Tab implemented - URL completion. Comes from the hotlist URLs,
hotlist titles, history hosts, paths, full URLs and lastly titles.
See code comments for more (history_find_match, hotlist_find_match).

TableSupport option added to Choices; it is read, can be set by the
front-end, but doesn't actually do anything else yet.

Reversed Choices' semantics on 'don't expire by...' for History. Added
'needs_redraw' flag to choices_get_contents so that, for example, if the
table border types change, browsers get redrawn.
@
text
@d62 1
@


1.17
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d345 1
a345 1
_kernel_oserror * fetchpage_fetch_targetted(browser_data * parent, const char * url, const char * target, const char * extradata, int new)
d356 1
a356 1
    if (extradata) return fetchpage_new_add(NULL,
d360 1
a360 1
                                            extradata,
d395 1
a395 1
        if (extradata) return fetchpage_new_add(targetted,
d399 1
a399 1
                                                extradata,
d414 1
a414 1
        if (extradata) return fetchpage_new_add(parent,
d418 1
a418 1
                                                extradata,
d440 1
a440 1
      if (extradata) return fetchpage_new_add(parent,
d444 1
a444 1
                                              extradata,
d580 3
a582 1
    if (choices.keyboard_ctrl) browser_move_selection(b, akbd_RightK);
@


1.16
log
@Removed 'The Onion' link from some Hotlist files. Time showed that the
site wasn't entirely Family Friendly (TM)... Removed Shift Control (it's
gone offline now), and corrected the Telegraph URL from ...the-telegraph...
to just ...telegraph...

StrongHelp manual generator now tries to work out the number of lines in
the table on the root page more intelligently.

Plug-in support extended to handle Shockwave. Quite a lot of underlying
work for this, including a pseudo cache system for temporary files.

Bug in redraw routines: they plotted background images within table
cells, when nothing should have been drawn. Oops. When background images
in cells are properly supported, this can get sorted out.

Tweaked vertical plot position of HRs (up to 4 OS units too high before due
to rounding).

Various Res file bits and pieces, Ursula build taken up to v1.26 beta
for release on the Browser site. *Note* not all resources are up to date!
This will be done after AW97.
@
text
@d314 143
a683 11
  if (
       record &&
       browser_current_url(b) &&
       strcmp(url_buffer, browser_current_url(b))
     )

     /* NULL means add browser_current_url. We're also ignoring any */
     /* errors from this call.                                      */

     history_record_local(b, NULL);

d868 5
a872 1
/*             window, else 0.                   */
d875 1
a875 1
_kernel_oserror * fetchpage_new_add(browser_data * b, const char * url, int record, int stop, char * add, int new_window)
d925 14
a938 1
  else                               return windows_create_browser(url_buffer, NULL, NULL, NULL, 0);
@


1.15
log
@Weird - the line registering the ENavigateToBeShown event disappeared from
Main.c, so the last log was incorrect; Navigate menu items wouldn't have
been greyed out. Probably a(nother?) CVS update screw up on my part; now
fixed. This sort of thing is happening far too often...

Font manager would crash in system font or if a font face was not found
in the previous release - that hacky business of returning weird font
handles when system font is to be used instead ensured a rather less than
valid array reference on behalf of fm_claim_basic_typefaces.

Added in a few more calls to the 'check the button bar' routines, to
ensure that things like Stop are greyed/ungreyed when needed.

Cellpadding code could lead to rmarg overlapping lmarg, or the sum
being greater than dwidth, or something like that (!) in the reformatter.
Anyway the results were unpleasant; this has been sorted out by range
checking right and left margins w.r.t. display width in the relevant
section of the code.

People who specify 'td width = 2000' in tables expecting to get something
sensible now do, though I was half inclined to leave it alone... I can
only assume that they don't know about % specification or it didn't
work in their browser at authorship time, and the huge width served as
an attempt to get the table to fill the available window width. Anyway,
the table reformatter spots when the maximum width a cell requires is
less than half of what it asks for, and ignores the width specifier if
this is the case.
@
text
@d49 1
d59 1
d243 2
a244 2
          /* Nope - so get rid of null claimants (the call will *install* a new */
          /* animation drift handler if the Controls require it).               */
d256 1
a256 3
            /* Close the window *afterwards* - or you've */
            /* just freed up the message structure that  */
            /* you want to send...                       */
d258 20
a277 1
            windows_close_browser(handle);
@


1.14
log
@Now working on source merged with Kevin Bracey's internationalisation
support. UNIFONT is undefined in the Make File for now. All Res and
Choices files updated appropriately.

Having sorted out the old Choices and Messages to form Choices, Controls
and Messages, this build has had the same cleaning up done internally.
This includes greater consistency in naming schemes and the removal of
the inconsitent choices items - e.g. Choices file entries saying 'delay
images' and 'plain backgrounds' where internally all the flags say 'show
images' and 'show backgrounds'. ChoiceDefs.h and CtrlDefs.h added to
clarify the meaning of some fields, though usage of these is not 100%
in the source (there are cases where parameters are passed through to
functions as ints, and those functions still check these against hard
coded values rather than the #define stuff).

Fetcher status return bits (connected, sent request, etc.) now reflected
in status bar. Progress during fetchs to files are reported by %, where
the size of the object is known. Exceeding 100% drops back to a byte
counter, in case the estimated size was wrong. The progress counter
may be updated after specific delays, rather than 'as often as possible',
to reduce flicker (as requested by D.Brown some time ago).

I've done a small rewrite of the fetch prioritisation scheme in FetchPage.c;
how well this performs in general use across different processor speeds
remains to be tested, but certainly it has some advantages. For each small
fetch window before the rewrite, a 4cs tight loop was entered - this gave a
noticable and substantial drain to the Desktop performance if more than one
was opened. Now, several can be up at once with little hit. The actual file
fetch is on half the priority it was before, with all others taken back
just a bit - e.g. from 20cs per poll to 15cs per poll for flat out
reformatting. You don't seem to lose much time on the format in practice,
and the Desktop feels quite a bit lighter at the same time. There's the
potential for smoother frameset loading in this scheme, too.

When Shift+Clicking on a link meant you still fetched inside the main
browser window, several fetches could occur in a frameset - one per frame.
However, now that you can only do this by clicking on a link that leads to
non-displayable data - or by turning off the small fetch windows by
setting UseSmall to 'no' in Choices - a bug where fetchpage_preprocessed
would stop such fetches as new ones were started was revealed.
The API to frames_abort_fetching has now been extended to include a
'stop file spooling too' flag, allowing a fix to be made by having
fetchpage_preprocess's calls not set this (and it doesn't check the
savelink flag is unset before proceeding, since frames_abort_fetching
does that implicitly now).

Had left the RAM transfer buffer at 16 bytes (from testing) accidentally...
Oops. Upped it to 4K. In addition, when loading data by RAM transfer,
the browser didn't notice if a RAMFetch bounced during the transfer. It
would be treated as a 'first' RAMFetch bounce, basically, and try to go to
file transfer - oops. Fixed.
@
text
@d896 4
d959 4
@


1.13
log
@Support for ANT URL broadcast message added.

Image deletion routines rewritten; nasty animated GIF bug now gone
(it kept trying to update the cross-referenced image in the browser that
no longer existed, and I've no idea how animated GIFs ever managed to *not*
blow up if a cross referencing browser was shut down; and I've tested
this...). There are now as many image structures as there are total images
in the visible browsers, and no more; cross referenced images in the
to-be-deleted browser have their ownership moved to the cross
referencer before the cross referencee is wiped, with any required fetches
being transferred with them.

Reformatter sped up a bit by getting rid of strlen on the main text field
of tokens in all places bar one, where it is called extremely rarely. This
means direct app-to-app transfer of, say, a 359K text file to the browser
won't run like a drain as it tries to do strlen on a 359K string over and
over again! Most of the time the performance benefits won't really be
noticable, but on the above text file, formatting time went down from
290 seconds before the change to just under 7 seconds, a 41 fold speed
increase or thereabouts (SA110 228MHz).

MakeFile changed to force function name compilation on for debug builds
(-fn in the DD...FLAGS); useful for certain functions such as
register_null_handler, which can now output the name of the function
being registered.

...Which helped show up some nasties in the animation handler and animation
drift handler registration/deregistration process, which have been fixed
(callers of fetchpage_release_nulls were unaware that the drift handler
could be installed, and fragments of old code checking choices.anim_drift
had a value other than 1 or 0 were still hanging around - bit tricky for
a single bit item).

Added support for VALIGN in table cells. Spotted a bug or two in the
'what token is the pointer over' routines as a result, and fixed them - the
worst was in browser_line_at_y, which checked the y coordinate was below
the given one [the mouse], but didn't check the line height to see if the
given y coordinate was *within* the line, rather than just above it. Never
used to matter pre-tables, but a definite concern once multiple line
arrays can exist on one page.
@
text
@d90 1
d110 1
a110 1
      handle->savelink = 0;
d116 1
a116 5
  /* amount of time inside each only. Whilst still      */
  /* fetching data, relax the timing as there's no      */
  /* point hanging here waiting for stuff; otherwise,   */
  /* be somewhat more aggressive as the reformat can    */
  /* progress a lot faster.                             */
d121 13
a133 1
  /* Some fairly crude load balancing */
d135 1
a135 3
  if (!fetch_fetching(handle)) priority = 20;
  else if (handle->fetch_status != BS_PROCESS) priority = 4;
  else priority = 10;
d137 4
a140 1
  while ((tf_now - tf_start < priority) && (fetch_fetching(handle) || reformat_formatting(handle)))
d142 1
d145 1
a145 1
    if (fetch_fetching(handle)) fetch_fetcher(handle);
d149 12
a160 2
    if (reformat_formatting(handle)) reformat_reformatter(handle);
    ChkError(windows_check_tools(handle, NULL));
d164 4
d233 1
a233 1
        if (handle->refotime)
d237 1
a237 1
          reformat_format_from(handle, handle->refoline, 1, -1);
d269 1
a269 1
            /* Ensure the status bar is up to date */
d271 1
d412 1
a412 1
       !b->savelink &&
d418 1
a418 1
    if (choices.keyboardctl) browser_move_selection(b, akbd_RightK);
d425 1
a425 1
  if (b->allow_cancel && !b->savelink)
d431 6
a436 1
    /* images but stop everything else.                         */
d440 2
a441 2
      if (choices.brickwall) frames_abort_fetching(utils_ancestor(b), 1);
      else                   frames_abort_fetching(utils_ancestor(b), 0);
d452 1
a452 1
  if (!b->savelink)
d949 1
a949 1
    if (choices.anim_drift && !b->anim_drift)
@


1.12
log
@Got the deferred reformatter working properly. It doesn't do that 'OK,
the page is fetched and reformatted, but just to annoy you, I'm going
to wait 5 seconds and then suddenly reformat the whole thing again'
trick anymore. The fetcher was calling the reformatter in a delayed
form even when the reformatter was already running, so it would carry
on past the reformat point or from below what had become and invalidated
line, and some time later, get back to the delayed reformat. Now,
reformatting is only delayed by the fetcher when the reformatter is not
running. In practice this means body text reformats as it fetches, but
large tables will show delayed reformatting - which was exactly the
intended behaviour of the feature when it was originally thought of.

fetch_token_data_address removed; it was only needed in two places,
both of which already knew when to read tp->text and when to ignore
it. Its functionality is duplicated in an 'if' involving reformat_istext,
anyway.

!Run[D] files taken back to requiring HTTP 0.33, since 0.36 introduces
many weird and wonderful problems.

Typo in Messages files, 'All current images (sic.) fetches finished' -
'images' is now 'image'.

Shift+Click saving - you could save to an application. No problem. But
the equivalent (just clicking on a link that led to an unknown datatype
and getting the save dialogue that way) didn't work. It does now.
Another problem was saving to an application that didn't support the
datatype - oops, the dialogue would close but the fetch would sit there
waiting to be told where to save. It doesn't close now (as expected).

NB, doing several simultaneous fetches to a text editor may have problems
as the editors are too clever for their own good. Despite receiving
DataLoad messages for <Wimp$Scrap> for files of different types, sizes
and datestamps, the editors can decide it's still the same file and:

Zap      - Hats off, it gets it right, almost. You do get warned 'Multiple
           copies - one on disc is newer' as everything after the first
           text loads, but they do load, and in separate windows.
StrongED - Does not load the subsequent files, so the browser gives 'Data
           transfer failed' errors and opens up Scrap. Turning off 'Don't
           load same file twice' fixes it - each file is loaded in a new
           window with no warnings. At least in the first case, you don't
           lose data, since the files are kept in Scrap.
Edit     - Each time it loads the file, it *replaces* the other one in
           memory, using the same window for each. This is the worst
           behaviour as it isn't configurable (well, I don't know of a way
           to change it...) and results in data loss as successive texts
           get trounced by the new data.

I can't see how I can fix this in the browser as it's basically silly
behaviour on behalf of the editors. Other applications which don't try
to work out if it's a new file or not are fine!

When conducting image fetches, proxying is allowed unless reloading.
When conducting page fetches, proxying was never allowed - so web cache
stuff would have been, er, interesting. It now sets X-NoProxy: in the
request header when reloading, but otherwise this is not included.

AnimSpeed is, at last, independent of browser poll speed. They used to
be tied together. Guess how the animation code used to work ;-)

'Can't handle this datatype' - deprecated now that save dialogues can be
popped up. The 'can't save objects in full screen mode' error would never
be shown due to a bug, anyway; this now replaces 'can't handle', which
has been removed from all Messages files.

RefoWait, RefoHang and RefoTime moved from Controls back to Choices.

Trying to get rid of strlen in the reformatter - it can get very slow
(e.g. strlen of 8K chunks of text, or if a 330K text file is transferred
from a text editor straight to the browser, strlen of a 330K string...).
There will be unfinished bits of code in the reformatter that may seem
unnecessary - they've just not been plugged in yet (since they don't
actually work). Don't remove them!
@
text
@d216 2
a217 1
          /* Nope - so get rid of null claimants */
d877 3
a879 1
/* used for a fetch in the Desktop.              */
d904 1
a904 1
  if (!b->current_fetches && choices.anim_drift != 2)
d914 1
a914 1
    /* If the choices say to do install the 'drift' handler to ensure */
@


1.11
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d220 4
a227 4
            /* We may have a pending DataLoad to send */

            e = protocols_atats_send_any_pendings(handle);

a232 4

            /* Report any errors */

            ChkError(e);
d247 4
@


1.10
log
@First a minor warning - the various Res files are out of sync in this build.
Only the Browse resources are currently valid.

Added Utils.Icons - has a few archives inside containing the resources
(well, some of them) used to build various UI sprites for various builds.
Archived because these are unlikely to change much, and putting them on
CVS was a move to, well, archive the stuff...

SaveDBox objects vanquished and requirements in !Run[D] files removed. The
data save code fits much more neatly in amongst the data load protocol
stuff now (with the slight exception of having to split the SaveObject
source into SaveObject and SaveFile - the former handles multiple persistent
dialogues for Shift+Click on links and the like, the latter handles 'one at
a time' transient dialogues for save source and similar). Export Link is now
supported, too, and writes a 'proper' version URI file. You'll find that
double-clicking on old URI files will work as the URI handler picks them up,
whilst new version ones don't; however, dragging onto the browser will only
work with new version files. Note that support for saving and loading URL
files (ANT suite stuff) is present too, so old URI files can be typed as URL
files if you want to keep them working without modification - the URI
handler itself will hopefully support the defined URI file format soon;
double-clicking on old URI files will stop working at that point. Note
there are *lots* of changes in every Res file to support all this. This may
all seem a bit pointless to some, but the changes do in fact make it very
easy to add new save dialogues all over the place. Certainly much easier
than with the previous system, anyway. In fact, post script, image
'save as sprite' took about half an hour, which I hope proves the worth
of the new system.

Merged in newer hotlist code with support for drag cancelling with Escape
(all relevant Res files appropriately updated) and cancelling scrolling
when you've reached the window scroll limit. Had to move some of the
Wimp message handling stuff to the central Protocols source, as clashes
were occuring, and also the hotlist routines were using independent saving
code - a lot of duplicated effort. This was fair enough as at the time the
Hotlist code was written, the Save code couldn't be used in the way it is
now.

New Save Source and Print buttons on the toolbar of some builds.

Phoenix Sprites file made more efficient - the Acorn base section has been
split from the animated upper region. Browse build has a new grey fade
sprite at the back, which is less grainy than the previous one and only
uses 16 colours (with a 16 greyscale palette).

Not really a bug, bug the routine to start an image fetch for INPUT
TYPE=IMAGE forms items only did so if the src field (or equivalent, for
this tag type) was non-NULL. In fact, you should always call image_new_image
and let that handle the rest, otherwise other sections of the code will fail
as they try to obtain an image number for a given HStream and get -1 back.
This problem only generally manifested itself when loading an HTML file to
the browser straight from an application, as many src fields become NULL
when the relativisation routines find nothing to relativise to...

Authentication got broken somewhere along the line - this has been fixed
(in HTMLLib and the browser).

Ctrl+Click on a cross referenced image updates *all* copies, not just the
one with the image data attached.

Next big step: Rip up TBEvents.h and rebuild that whole approach somewhat.
To all those working on the code, my apologies but this means all Res files
will receive a very large number of alterations and there will be extensive
code changes too (mostly naming convention stuff), in more or less all
source files. I am endeavouring to ensure that the new numberspace
convention does not clash with the work being done by Kevin on
internationalisation.
@
text
@d58 1
d88 2
a89 1
  int tf_start, tf_now, priority;
a104 2
    _kernel_oserror * e;

d220 1
a220 1
          /* If this is a small fetch window, do we close it? */
d224 8
d233 4
d238 3
d855 1
a855 1
    if (!gadget_get_bbox(0, lower, DisplayAnim, &box))
@


1.9
log
@This version is being checked in because the Hotlist manager in the test
build provokes a Wimp bug. All the variant resource files are out of sync
and there are several outstanding bugs in the main code, so I'd personally
avoid this build like the plague unless you're mad enough to want to
examine the Wimp problem ;-)
@
text
@d835 12
a846 2
    register_null_claimant(Wimp_ENull,(WimpEventHandler *) toolbars_animation,b);
    b->anim_handler = 1;
@


1.8
log
@Created Protocols source file and moved a lot of message handling from
handle_messages - the latter now serves as a high level distributor to
lower level functions in Protocols. Incidentally, URL files (as used by
the ANT suite) can be loaded by dragging to the browser in the same way
as URI files - Not A Lot Of People Know That, etc.

Merged new hotlist display type Res file to existing resources, added
support for DataSave message so items can be dragged from the hotlist
to a specific window (RAM transfer for URI and URL files; ScrapFile for
HTML and Text but deleted afterwards and there are appropriate guards
to stop Reload just saying 'not found'; images run through ScrapFile and
there is no choice but to leave them there and do a conventional fetch).

All !RunD files now give a WimpSlot of 2304K. Some small changes to
the Argo and Ursula build Res files to make the menu trees more sensible.
Controls files now take 'file:/' instead of 'file://' in Protocols
section. Definitions at top of URLutils.c *not* altered, as then you
end up with invalid URLs - so it will accept 'file:/', but always generate
'file://'. This is because some browsers exports 'file:/'. Sigh.

make_no_[..._]memory_error functions now return a _kernel_oserror * rather
than void. It's always &erb returned, but it enables users to use a more
elegant 'return make_no_memory_error(1);', say, rather than something
like 'make_no_memory_error(1); return &erb;'. I obviously should've written
it like that at the outset, but never mind. All callers have been
appropriately updated.

The urlutils_leafname_from_url function now replaces illegal characters
(A7000 Welcome Guide p54...) in the leaf with legal alternatives.

Internal URL scheme is now a bit cleaner, with everything properly defined
in URLutils.h. All references to http:, file: and ftp:, with or without
a following '//' use the definitions in here now.

More tidying and some reorganising of Hotlist source. Auto-open delay is
now a Choices item. Some dependencies on statics removed (e.g. the
counting functions don't accumulate into the global item_number now).
The redraw functions used Wimp_TextOp - oops, so this has been amended
to use whatever is supported on your Wimp. This is now in a new function
(utils_text_width()), which the History menu routines also use (there was
a bug in the width routine there anyway, which is therefore fixed in
passing). Several other routines used Wimp_TextOp directly too, and
they have been altered to use the new function as well.

In hotlist code, one of the larger changes is in the API to hotlist_draw_r()
(formerly _hotlist_draw()) which now takes item widths and heights as
parameters - discovering these is quite slow, so doing it every time the
function calls itself recursively is a little less efficient than
passing the values in from elsewhere. Note that underscore prefixed
functions are being slowly renamed to _r suffixed functions, to match
the convention established by Tony Cheal with is table routines. This
makes it much more obvious when something is recursive, as the same
naming convention is used in every browser source file.

Finally, note that I intend to ditch SaveDBox and use an alternate window
with manual control of the messaging in Protocols.c. This will allow
various improvements which at present the SaveDBox operational methods
preclude. I'm going to have to do at least an alternate Window object for
the SaveDBox module to use soon in any case. Getting rid of SaveDBox will
help reduce, if only slightly, demands on the RMA.
@
text
@d220 1
a220 1
          /* Check the page's vertical extent is correct */
d222 7
a228 1
          ChkError(reformat_check_extent(handle));
d230 1
a230 1
          /* Ensure the status bar is up to date */
d232 4
a235 1
          toolbars_update_status(handle, Toolbars_Status_Viewing);
@


1.7
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d309 1
a309 1
        if (tl & (1u<<13)) Printf("** malloccount (fetchpage_process_internal): \0216%d\0217\n",malloccount);
d317 1
a317 5
    if (!url_buffer)
    {
      make_no_fetch_memory_error(10);
      return &erb;
    }
d321 1
a321 1
      if (tl & (1u<<13)) Printf("** malloccount (fetchpage_process_internal): \0216%d\0217\n",malloccount);
d398 8
d533 1
a533 1
      if (tl & (1u<<13)) Printf("** malloccount (fetchpage_postprocess_uri): \0216%d\0217\n",malloccount);
d541 1
a541 5
  if (!url_buffer)
  {
    make_no_fetch_memory_error(14);
    return &erb;
  }
d545 1
a545 1
    if (tl & (1u<<13)) Printf("** malloccount (fetchpage_postprocess_uri): \0216%d\0217\n",malloccount);
d598 1
a598 1
        if (tl & (1u<<13)) Printf("** malloccount (fetchpage_new): \0216%d\0217\n",malloccount);
d606 1
a606 5
    if (!url_buffer)
    {
      make_no_fetch_memory_error(7);
      return &erb;
    }
d610 1
a610 1
      if (tl & (1u<<13)) Printf("** malloccount (fetchpage_new): \0216%d\0217\n",malloccount);
d681 1
a681 1
        if (tl & (1u<<13)) Printf("** malloccount (fetchpage_new_add): \0216%d\0217\n",malloccount);
d689 1
a689 5
    if (!url_buffer)
    {
      make_no_fetch_memory_error(7);
      return &erb;
    }
d693 1
a693 1
      if (tl & (1u<<13)) Printf("** malloccount (fetchpage_new_add): \0216%d\0217\n",malloccount);
d756 1
a756 1
        if (tl & (1u<<13)) Printf("** malloccount (fetchpage_new_raw): \0216%d\0217\n",malloccount);
d764 1
a764 5
    if (!url_buffer)
    {
      make_no_fetch_memory_error(7);
      return &erb;
    }
d768 1
a768 1
      if (tl & (1u<<13)) Printf("** malloccount (fetchpage_new_raw): \0216%d\0217\n",malloccount);
@


1.6
log
@Updated Makefile to work better in folding text editors. More or less rewrote
Limits.h, and ensured consistent comment styling throughout all sources.
Fetch.c/h split to Fetch, FetchHTML and URLveneer. URLstat.c/h produced to
cope with this. OpenURL and Find sources created from bits in the Windows
source file that shouldn't have been there... These will get filled out
shortly. Note that a few functions in Fetch are due to be renamed and moved;
probably to Tokenutils.
@
text
@a48 1
#include "TBEvents.h"
d90 2
a91 1
    static oldstatus;
d93 5
a97 4
    if ((tl & (1u<<6)) && (handle->fetch_status != oldstatus))
    {
      Printf("\nfetchpage_fetch: Called with new status %d\n",handle->fetch_status);
      oldstatus = handle->fetch_status;
d101 12
a112 1
  if (handle->fetch_status == BS_START) ChkError(fetch_start(handle));
d376 1
a376 2
  e = fetch_cancel(b);
  if (e) return e;
d378 7
a384 2
  /* If required, stop all fetching in all frames, else leave */
  /* images but stop everything else.                         */
d386 5
a390 4
  if (stop)
  {
    if (choices.brickwall) frames_abort_fetching(utils_ancestor(b), 1);
    else                   frames_abort_fetching(utils_ancestor(b), 0);
d393 4
d400 3
a402 1
  urlutils_set_displayed(b, url_buffer);
d404 2
a405 1
  if (b->displayed == Display_Previous_Page) return history_fetch_backwards(b, 0);
@


1.5
log
@Checking in mostly because its Friday... Quite a few little bug fixes
(adding up to a greater whole), which include removal of the dastardly
'invalid image number' errors that trace builds would raise from time to
time. Frame highlights are now better controlled (releaseably so).
Generally, this build represents the first genuinely promising version
of the browser for quite some time, despite the known library problems
with comment handling etc.
@
text
@d17 6
a22 3
/* Purpose: High-level page fetch related          */
/*          functions (as opposed to Fetch.c where */
/*          all the lower level stuff goes on).    */
d24 2
a25 1
/* History: 25-Nov-96: Created                     */
d53 1
a53 1
#include "Fetch.h"
d250 1
a250 1
    char alt_url[4096];
d296 2
a297 2
        malloccount -= (strlen(url_buffer) + 128);
        if (tl & (1u<<13)) Printf("** malloccount: %d\n",malloccount);
d313 1
a313 1
      if (tl & (1u<<13)) Printf("** malloccount: %d\n",malloccount);
d430 1
a430 1
    if (tl & (1u<<12)) Printf("fetchpage_postprocessed: Chunk CK_FURL set to %d\n",strlen(url_buffer) + 1);
d433 1
a433 1
  e = memory_set_chunk_size(b, NULL, CK_FURL, strlen(url_buffer) + 1);
d457 13
a469 13
//  /* Record the start of the fetch, for a parent browser window. */
//
//  if (!b->ancestor)
//  {
//    _swix(OS_SetVarVal,
//          _INR(0,4),
//
//          "Browse$CurrentFetch",
//          url_buffer,
//          strlen(url_buffer),
//          0,
//          4);
//  }
a474 18
// (Re. the comments at the head of this code)... - No, we don't!
//
//  /* The extent settings may change or not; either way, want to */
//  /* start off scrolled to the top of the page.                 */
//
//  {
//    WimpGetWindowStateBlock s;
//
//    e = window_get_wimp_handle(0, b->self_id, &s.window_handle);
//    if (e) return e;
//
//    e = wimp_get_window_state(&s);
//    if (e) return e;
//
//    s.yscroll = s.xscroll = 0;
//    e = wimp_open_window((WimpOpenWindowBlock *) &s);
//  }

d504 2
a505 2
      malloccount -= (strlen(url_buffer) + 128);
      if (tl & (1u<<13)) Printf("** malloccount: %d\n",malloccount);
d511 1
a511 1
  url_buffer = malloc(strlen(uri) + 1);
d519 5
d573 2
a574 2
        malloccount -= (strlen(url_buffer) + 128);
        if (tl & (1u<<13)) Printf("** malloccount: %d\n",malloccount);
d590 1
a590 1
      if (tl & (1u<<13)) Printf("** malloccount: %d\n",malloccount);
d595 1
d597 8
a604 1
    else Printf("WARNING, used same buffer in fetchpage_new\n");
d615 4
a618 4
/* As fetchpage_new(), but takes a second        */
/* string, which is data to be concatenated onto */
/* the end of the given URL. This may be useful  */
/* for imagemaps or forms data. You may also     */
d622 1
a622 1
/* Restrictions as for fetchpage_new().          */
a631 1
/*                                               */
d660 2
a661 2
        malloccount -= (strlen(url_buffer) + 128);
        if (tl & (1u<<13)) Printf("** malloccount: %d\n",malloccount);
d677 1
a677 1
      if (tl & (1u<<13)) Printf("** malloccount: %d\n",malloccount);
d683 1
d685 8
a692 1
    else Printf("WARNING, used same buffer in fetchpage_new_add\n");
d698 1
a698 1
  else                               return windows_create_browser(url_buffer, NULL, NULL, NULL);
d739 2
a740 2
        malloccount -= (strlen(url_buffer) + 128);
        if (tl & (1u<<13)) Printf("** malloccount: %d\n",malloccount);
d756 1
a756 1
      if (tl & (1u<<13)) Printf("** malloccount: %d\n",malloccount);
d761 1
d763 8
a770 1
    else Printf("WARNING, used same buffer in fetchpage_new_raw\n");
a876 1
/*************************************************/
@


1.4
log
@Fixed problems with unsourced images in tables and a couple of other bugs
here and there - nothing earth shattering... Just wanted to keep the CVS
source up to date.
@
text
@d69 1
a69 1
static _kernel_oserror * fetchpage_preprocessed     (browser_data * b, int record);
d257 5
d336 6
a341 1
/*             the history list, else 0.         */
d344 1
a344 1
static _kernel_oserror * fetchpage_preprocessed(browser_data * b, int record)
d366 5
a370 2
  if (choices.brickwall) frames_abort_fetching(b, 1);
  else                   frames_abort_fetching(b, 0);
d558 6
a563 1
/*             the history list, else 0.         */
d566 1
a566 1
_kernel_oserror * fetchpage_new(browser_data * b, const char * url, int record)
d610 1
a610 1
  return fetchpage_preprocessed(b, record);
d633 6
d646 1
a646 1
_kernel_oserror * fetchpage_new_add(browser_data * b, const char * url, int record, char * add, int new_window)
d691 1
a691 1
  if (!new_window || b->full_screen) return fetchpage_preprocessed(b, record);
d709 6
a714 1
/*             the history list, else 0.         */
d717 1
a717 1
_kernel_oserror * fetchpage_new_raw(browser_data * b, const char * url, int record)
d759 1
a759 1
  return fetchpage_preprocessed(b, record);
d784 1
a784 1
  if (b->ancestor) b = b->ancestor;
d834 1
a834 1
  if (b->ancestor) b = b->ancestor;
@


1.3
log
@Changed FORM handling to process HTMLLib tokens using new interface.
@
text
@d353 2
a354 1
  /* If required, stop fetching in all child frames of this browser */
d356 2
a357 1
  if (choices.brickwall) frames_abort_fetching(b);
@


1.2
log
@Supported client pull, through a generalised handing of the META tag.
@
text
@d175 1
a175 1
    if (handle->onload) ChkError(javascript_body_onload(handle)); 
d546 1
a546 1
_kernel_oserror * fetchpage_new(browser_data * b, char * url, int record)
d620 1
a620 1
_kernel_oserror * fetchpage_new_add(browser_data * b, char * url, int record, char * add, int new_window)
d686 1
a686 1
_kernel_oserror * fetchpage_new_raw(browser_data * b, char * url, int record)
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d53 1
d173 4
@
