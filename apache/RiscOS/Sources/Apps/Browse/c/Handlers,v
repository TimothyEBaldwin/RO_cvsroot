head	1.43;
access;
symbols
	Browse-2_16:1.43
	Browse-2_15:1.43
	Browse-2_14:1.43
	Browse-2_13:1.43
	Browse-2_12:1.43
	Browse-2_11:1.43
	Browse-2_10:1.43
	Browse-2_09:1.43
	ahodgkin_208_i4_2:1.42
	ahodgkin_208_i4:1.40
	ahodgkin_208_i3:1.40
	ahodgkin_208_i2:1.40
	ahodgkin_208_i1:1.40
	ahodgkin_207release:1.38
	ahodgkin_206release:1.36
	ahodgkin_205release:1.35
	ahodgkin_204release:1.35
	ahodgkin_202release:1.33
	ahodgkin_201release:1.32
	ahodgkin_200release:1.32
	ahodgkin_133beta:1.32
	ahodgkin_132beta:1.31
	ahodgkin_131beta:1.30
	ahodgkin_130beta:1.29
	ahodgkin_129:1.28
	ahodgkin_128beta:1.27
	ahodgkin_128alpha:1.26
	ahodgkin_127beta2:1.25
	ahodgkin_127beta:1.24
	ahodgkin_126beta:1.22
	ahodgkin_AW97patch:1.21
	ahodgkin_AW97:1.20;
locks; strict;
comment	@# @;


1.43
date	2005.04.26.09.42.34;	author ahodgkin;	state Exp;
branches;
next	1.42;

1.42
date	2000.11.14.08.45.06;	author ahodgkin;	state Exp;
branches;
next	1.41;

1.41
date	2000.05.31.15.58.34;	author ahodgkin;	state Exp;
branches;
next	1.40;

1.40
date	99.09.02.13.10.20;	author ahodgkin;	state Exp;
branches;
next	1.39;

1.39
date	99.03.30.15.51.42;	author ahodgkin;	state Exp;
branches;
next	1.38;

1.38
date	98.09.23.13.18.06;	author ahodgkin;	state Exp;
branches;
next	1.37;

1.37
date	98.09.07.11.46.46;	author ahodgkin;	state Exp;
branches;
next	1.36;

1.36
date	98.07.09.10.27.08;	author ahodgkin;	state Exp;
branches;
next	1.35;

1.35
date	98.04.16.08.14.12;	author ahodgkin;	state Exp;
branches;
next	1.34;

1.34
date	98.03.26.14.21.06;	author ahodgkin;	state Exp;
branches;
next	1.33;

1.33
date	98.03.20.12.12.36;	author ahodgkin;	state Exp;
branches;
next	1.32;

1.32
date	98.02.13.17.32.10;	author ahodgkin;	state Exp;
branches;
next	1.31;

1.31
date	98.02.06.13.55.10;	author ahodgkin;	state Exp;
branches;
next	1.30;

1.30
date	98.01.31.10.55.17;	author ahodgkin;	state Exp;
branches;
next	1.29;

1.29
date	97.12.18.10.06.59;	author ahodgkin;	state Exp;
branches;
next	1.28;

1.28
date	97.12.12.11.17.49;	author ahodgkin;	state Exp;
branches;
next	1.27;

1.27
date	97.12.04.11.22.43;	author ahodgkin;	state Exp;
branches;
next	1.26;

1.26
date	97.12.02.16.13.49;	author ahodgkin;	state Exp;
branches;
next	1.25;

1.25
date	97.11.21.16.08.52;	author ahodgkin;	state Exp;
branches;
next	1.24;

1.24
date	97.11.20.16.04.34;	author ahodgkin;	state Exp;
branches;
next	1.23;

1.23
date	97.11.19.10.28.56;	author ahodgkin;	state Exp;
branches;
next	1.22;

1.22
date	97.10.30.17.11.03;	author ahodgkin;	state Exp;
branches;
next	1.21;

1.21
date	97.10.18.16.42.25;	author ahodgkin;	state Exp;
branches;
next	1.20;

1.20
date	97.10.16.13.23.10;	author ahodgkin;	state Exp;
branches;
next	1.19;

1.19
date	97.10.13.07.06.56;	author ahodgkin;	state Exp;
branches;
next	1.18;

1.18
date	97.10.09.10.52.03;	author ahodgkin;	state Exp;
branches;
next	1.17;

1.17
date	97.10.07.10.41.21;	author dbrown;	state Exp;
branches;
next	1.16;

1.16
date	97.09.22.07.43.14;	author ahodgkin;	state Exp;
branches;
next	1.15;

1.15
date	97.09.18.08.58.58;	author ahodgkin;	state Exp;
branches;
next	1.14;

1.14
date	97.09.12.17.19.21;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	97.09.09.14.13.13;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	97.09.02.15.45.58;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	97.08.31.18.38.16;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	97.08.28.16.07.58;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	97.08.18.16.15.39;	author kbracey;	state Exp;
branches;
next	1.8;

1.8
date	97.08.18.09.23.56;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.08.08.16.38.51;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.08.05.08.42.55;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.08.01.09.00.50;	author kbracey;	state Exp;
branches;
next	1.4;

1.4
date	97.07.31.14.50.12;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.07.30.12.39.07;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.07.24.15.36.31;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.28.41;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.43
log
@  Huge pile of changes bringing relatively ancient sources up to date.
Detail:
  This check-in includes Phoenix version 2.11 (26-Apr-2005); only the
  debug and JavaScript builds of Phoenix have been tested and resources
  will definitely be out of date for other versions. The various "!..."
  scripts have been updated to require a minimum of 2MB with no maximum
  limit for building, as CC 5.60 is quite RAM hungry.
Admin:
  Phoenix 2.11 JS builds OK, works reasonably well. Many outstanding
  issues of course, as this is a very outdated browser now.

Version 2.09. Tagged as 'Browse-2_09'
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Handlers.c                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Event handlers.                                   */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 07-Feb-1997 (ADH): Created.                       */
/*          24-May-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include <kernel.h>
#include <swis.h>
#include <Global/Services.h>
#include <tboxlibs/flex.h>

#include <HTMLLib/HTMLLib.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <tboxlibs/event.h>

#include <tboxlibs/toolbox.h>
#include <tboxlibs/quit.h>
#include <tboxlibs/proginfo.h>

#include "ToolAction.h" /* Local copy that doesn't use OSLib */

#include "Global.h"
#include "FromROSLib.h"
#include "Utils.h"

#include "Browser.h"
#include "ChoiceDefs.h"
#include "Choices.h"
#include "CSIM.h"
#include "Fetch.h" /* (For ISOBJECT macro) */
#include "FetchPage.h"
#include "Filetypes.h"
#include "FontManage.h"
#include "Forms.h"
#include "Frames.h"
#include "History.h"
#include "Hotlist.h"
#include "Images.h"
#include "JavaScript.h"
#include "Markers.h"
#include "Menus.h"
#include "Meta.h"
#include "MiscDefs.h"
#include "MiscEvents.h"
#include "Mouse.h"
#include "PlugIn.h"
#include "Printing.h"
#include "Protocols.h"
#include "Redraw.h"
#include "Reformat.h"
#include "Save.h"
#include "SaveFile.h"
#include "SetPBoxes.h"
#include "TokenUtils.h"
#include "Toolbars.h"
#include "URLutils.h"
#include "Windows.h"

#include "Handlers.h"

/* Local statics */

static int  last_click_x;
static int  last_click_y;

/* Local compilation options */

#define H_DTS_MULTIPLIER 4

/* Static function prototypes */

static int            handle_menu_or_toolbar (IdBlock * idb);
static void           handle_get_call_info   (browser_data ** bp, ObjectId * op, IdBlock * idb, ComponentId button);

#ifndef REMOTE_HOTLIST

  static unsigned int handle_url_completion  (browser_data * b, char * url, unsigned int size, int key);

#endif

static unsigned int   handle_protocol_cycle  (browser_data * b, int key);
static void           handle_url_submission  (browser_data * b, int key);

static void           handle_go_to_with_key  (browser_data * b, char c, int clear);

/**************************************************************/
/* handle_menu_or_toolbar()                                   */
/*                                                            */
/* Returns 1 if an event came from a menu, else 0 if it was a */
/* toolbar (only call this where these are the only two       */
/* possibilities!).                                           */
/*                                                            */
/* Parameters: Pointer to the event ID block.                 */
/*                                                            */
/* Returns:    1 if the event came from a menu, else 0.       */
/**************************************************************/

static int handle_menu_or_toolbar(IdBlock * idb)
{
  _kernel_oserror * e;
  ObjectId          tt, tb, sw;

  /* If we can't get toolbars on the ancestor, there are no */
  /* toolbars so the event certainly isn't from one! So if  */
  /* the call gives an error, return 1.                     */

  e = window_get_tool_bars(InternalTopLeft | InternalBottomLeft,
                           idb->ancestor_id,
                           &tb,
                           &tt,
                           NULL,
                           NULL);
  if (e) return 1;

  if (controls.swap_bars) sw = tt, tt = tb, tb = sw;

  /* If the object ID of the event generator matches either toolbar  */
  /* object ID, the event came from that toolbar; else, from a menu. */

  if (idb->self_id == tt || idb->self_id == tb) return 0;
  else                                          return 1;
}

/**************************************************************/
/* handle_get_call_info()                                     */
/*                                                            */
/* For button handlers, a standard set of calls is used for   */
/* each handler - find out the browser_data struct and        */
/* toolbar, debounce any keypress and if this had to be done  */
/* slab the button manually.                                  */
/*                                                            */
/* Parameters: Pointer to a pointer to a browser_data struct  */
/*             which will be filled with a browser_data * for */
/*             the event's underlying browser window;         */
/*                                                            */
/*             Pointer to an ObjectId into which the object   */
/*             ID of the toolbar from which the event came is */
/*             placed; Pointer to the event's ID block;       */
/*                                                            */
/*             ComponentId of the button.                     */
/*                                                            */
/* Assumes:    Any pointer may be NULL, but the caller should */
/*             check that returned values are sensible.       */
/**************************************************************/

static void handle_get_call_info(browser_data ** bp, ObjectId * op, IdBlock * idb, ComponentId button)
{
  browser_data * b;
  ObjectId       t;
  int            key;

  _swix(OS_Byte, _INR(0,1) | _OUT(1), 121, 0, &key);

  /* Events can come from two places; a browser window, which may be a frame, */
  /* or a toolbar. In the latter case there will be an object ID set for the  */
  /* ancestor; in the former there will not (though there may be a parent ID  */
  /* present).                                                                */
  /*                                                                          */
  /* In the case of a toolbar, use the ancestor for finding the associated    */
  /* browser_data structure.                                                  */
  /*                                                                          */
  /* In any other case, use 'self_id' for the browser_data structure and find */
  /* the ancestor. If this has a selected frame, use that instead, otherwise  */
  /* use what we found in the first place. This way we stand the greatest     */
  /* chance of success with keyboard shortcuts...                             */

  if (idb->ancestor_id != NULL_ObjectId)
  {
    ChkError(toolbox_get_client_handle(0, idb->ancestor_id, (void *) &b));
  }
  else
  {
    browser_data * ancestor;

    ChkError(toolbox_get_client_handle(0, idb->self_id, (void *) &b));

    ancestor = utils_ancestor(b);
    if (ancestor && ancestor->selected_frame) b = ancestor->selected_frame;
  }

  /* Now we've got the browser, get the toolbar and do any required debouncing */
  /* - note that with 'key' being filled via. OS_Byte 121, mouse button clicks */
  /* will be 'debounced' by this too.                                          */

  t = toolbars_get_upper(b);

  if (key != 255)
  {
    slab_gadget_in(t, button);
    debounce_keypress();
    slab_gadget_out(t, button);
  }

  /* Return the data to finish */

  if (op) *op = t;
  if (bp) *bp = b;
}

/**************************************************************/
/* handle_messages()                                          */
/*                                                            */
/* Deal with Wimp messages for reason codes 17 and 18 (type   */
/* 19, acknowledges, are handled in handle_ack below).        */
/* Parameters are as standard for a Wimp message handler.     */
/*                                                            */
/* This function farms off a lot of its responsibilities to   */
/* functions in Protocols.c.                                  */
/**************************************************************/

int handle_messages(WimpMessage * m, void * handle)
{
  #ifndef SINGLE_USER

    /* Multiuser builds will refuse to handle various message types */

    int complain = 0;

    #define ChkLogin if (!logged_in) {complain = 1; break;} else

  #else

    #define ChkLogin {}

  #endif

  switch (m->hdr.action_code)
  {
    case Wimp_MQuit: quit = 1;
    break;

    case Wimp_MMenusDeleted: menusrc = Menu_None;
    break;

    case Wimp_MHelpReply:
    {
      ChkError(protocols_ih_got_help_reply(m));
    }
    break;

    case Wimp_MModeChange:
    {
      browser_data * b;

      modechanged = 1;

      ChkError(image_mode_change());

      if (!printing) wimpt_read();

      read_os_to_points(); /* Handles the 'printing' flag internally */

      b = last_browser;

      while (b)
      {
        ChkError(fm_rescale_fonts(b));
        b = b->previous;
      }

      ChkError(windows_initialise_tool_sizes());
      ChkError(choices_mode_change());
    }
    break;

    case Wimp_MAppControl:
    {
      /* AppControl message - stop all activity */

      if (
           m->data.app_control.reason == Wimp_MAppControl_Stop &&
           m->hdr.sender != task_handle
         )
      {
        browser_data * b;
        IdBlock        idb;

        b = last_browser;

        while (b)
        {
          idb.ancestor_id = 0;
          idb.self_id     = b->self_id;

          handle_stop(0, NULL, &idb, NULL);

          b = b->previous;
        }
      }
    }
    break;

    /* App to app transfer (Message_DataSaveAck is in the multiple source section) */

    case Wimp_MDataLoadAck:             ChkLogin ChkError(protocols_atats_got_data_load_ack(m));  break;
    case Wimp_MRAMFetch:                ChkLogin ChkError(protocols_atats_got_ram_fetch(m));      break;

    case Wimp_MDataOpen:                         ChkError(protocols_atatl_got_data_open(m));      break;
    case Wimp_MDataLoad:
    {
      /* Allow certain browser systems to get a look at the message first */

      #ifndef SINGLE_USER

        if (setpboxes_check_message(m)) break;

      #endif

      ChkLogin ChkError(protocols_atatl_got_data_load(m));
    }
    break;

    case Wimp_MDataSave:                ChkLogin ChkError(protocols_atatl_got_data_save(m));      break;
    case Wimp_MRAMTransmit:             ChkLogin ChkError(protocols_atatl_got_ram_transmit(m));   break;

    /* Printing protocol (Message_DataSaveAck is in the multiple source section) */

    case Browser_Message_PrintError:    ChkLogin ChkError(protocols_pp_got_print_error(m));       break;
    case Browser_Message_PrintTypeOdd:  ChkLogin ChkError(protocols_pp_got_print_type_odd(m));    break;

    /* Multiple source messages */

    case Wimp_MDataSaveAck:             ChkLogin ChkError(protocols_multi_got_data_save_ack(m));  break;

    /* URI handler */

    case URI_MStarted:                           ChkError(protocols_auh_got_started(m));          break;
    case URI_MDying:                             ChkError(protocols_auh_got_dying(m));            break;
    case URI_MProcess:                           ChkError(protocols_auh_got_process(m));          break;
    case URI_MReturnResult:                      ChkError(protocols_auh_got_return_result(m));    break;

    /* ANT URL broadcast protocol */

    case Message_ANTOpenURL:            ChkLogin ChkError(protocols_aub_got_open_url(m));         break;

    /* Plug-In protocol */

    case Message_PlugIn_Opening:        ChkLogin ChkError(plugin_got_opening(m));                 break;
    case Message_PlugIn_URLAccess:      ChkLogin ChkError(plugin_got_url_access(m));              break;
    case Message_PlugIn_StreamNew:      ChkLogin ChkError(plugin_got_stream_new(m));              break;
    case Message_PlugIn_ReshapeRequest: ChkLogin ChkError(plugin_got_reshape_request(m));         break;
    case Message_PlugIn_Status:         ChkLogin ChkError(plugin_got_status(m));                  break;
    case Message_PlugIn_Busy:           ChkLogin ChkError(plugin_got_busy(m));                    break;

// For debugging. This should only ever bounce, i.e. go through handle_ack.
//
//    case Message_PlugIn_Open:
//    {
//      MPlugIn_Open * open = (MPlugIn_Open *) &m->data;
//
//      dprintf(("Plug", "PlugIn_Open filename: '%s'\n", plugin_return_string(m, &open->file_name)));
//
//      {
//        char combuf[4096];
//
//        sprintf(combuf, "Copy %s ADFS::4.$.ParamsFile ~Q~V~C~NF", plugin_return_string(m, &open->file_name));
//
//        _swix(OS_CLI,
//              _IN(0),
//
//              combuf);
//      }
//    }
//    break;

    default: return 0; break;
  }

  #ifndef SINGLE_USER

    if (complain)
    {
      erb.errnum = Utils_Error_Custom_Message;

      StrNCpy0(erb.errmess,
               lookup_token("MustLogIn:The browser cannot fetch Web pages until you log in.",
                            0,
                            0));

      show_error_ret(&erb);
    }

  #endif

  return 1;
}

/**************************************************************/
/* handle_ack()                                               */
/*                                                            */
/* Handles UserMessage_Acknowledge from the Wimp (message     */
/* bouncing, etc.).                                           */
/*                                                            */
/* Parameters are as standard for a Wimp event handler.       */
/**************************************************************/

int handle_ack(int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle)
{
  WimpMessage * m = &block->user_message_acknowledge;

  switch (m->hdr.action_code)
  {
    case Browser_Message_PrintSave: ChkError(protocols_pp_print_save_bounced(m));      break;

    case Wimp_MHelpRequest:         ChkError(protocols_ih_help_request_bounced(m));    break;

    case Wimp_MDataLoad:            ChkError(protocols_atats_data_load_bounced(m));    break;
    case Wimp_MDataOpen:            ChkError(protocols_atats_data_open_bounced(m));    break;
    case Wimp_MRAMTransmit:         ChkError(protocols_atats_ram_transmit_bounced(m)); break;

    case Wimp_MRAMFetch:            ChkError(protocols_atatl_ram_fetch_bounced(m));    break;

    case Message_PlugIn_Open:       ChkError(plugin_open_bounced(m));                  break;
    case Message_PlugIn_StreamNew:  ChkError(plugin_stream_new_bounced(m));            break;

    default:
    {
      return 0;
    }
    break;
  }

  return 1;
}

#ifndef REMOTE_HOTLIST

  /**************************************************************/
  /* handle_url_completion()                                    */
  /*                                                            */
  /* Take a partial URL string and look through the hotlist     */
  /* then history titles then URLs for a match. The URL string  */
  /* is assumed to be in the browser URL bar and will be        */
  /* written back there.                                        */
  /*                                                            */
  /* Once one match is found successive calls may be made to    */
  /* cycle through the list generated by the first search on a  */
  /* per-browser basis.                                         */
  /*                                                            */
  /* Parameters: Pointer to a browser_data struct relevant to   */
  /*             the URL bar;                                   */
  /*                                                            */
  /*             Pointer to the URL to begin with;              */
  /*                                                            */
  /*             Size of the buffer the URL is in;              */
  /*                                                            */
  /*             Key number used - Ctrl+Tab will search         */
  /*             forwards, add Shift to search backwards.       */
  /*                                                            */
  /* Returns:    1 if a URL was written back to the URL bar,    */
  /*             else 0.                                        */
  /**************************************************************/

  static unsigned int handle_url_completion(browser_data * b, char * url, unsigned int size, int key)
  {
      /* For Ctrl+Tab, do URL completion on the URL bar */
      /* writeble contents or cycle through previously  */
      /* found matches. For Ctrl+Shift+Tab, cycle       */
      /* backwards through matches, if found.           */

      if (key == akbd_TabK + akbd_Ctl)
      {
        if (
             b &&
             browser_find_matching_url((flex_ptr) &b->match_list,
                                       url,
                                       size)
           )
           return 1;
      }
      else
      {
        if (
             b &&
             browser_find_match_backwards((flex_ptr) &b->match_list,
                                          url,
                                          size)
           )
           return 1;
      }

    return 0;
  }

#endif

/**************************************************************/
/* handle_protocol_cycle()                                    */
/*                                                            */
/* Cycle the protocol string at the front of a URL through    */
/* the known protocols. The URL string is assumed to be in    */
/* the browser URL bar and will be written back there.        */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the URL bar;                                   */
/*                                                            */
/*             Key number used - currently always akbd_TabK + */
/*             akbd_Sh.                                       */
/*                                                            */
/* Returns:    1 if the URL was changed, else zero.           */
/**************************************************************/

static unsigned int handle_protocol_cycle(browser_data * b, int key)
{
  char     url[Limits_URLBarWrit];
  int      changed;

  ObjectId i = toolbars_get_upper(b);

  /* Read whatever is in the URL bar writable */

  *url = 0;
  ChkError(writablefield_get_value(0, i, URLBarWrit, url, sizeof(url), NULL));
  url[sizeof(url) - 1] = 0; /* (Ensure termination) */

  /* Cycle the protocol specifier (adding one in if not already present) */

  changed = urlutils_cycle_protocol(url, sizeof(url));

  if (changed)
  {
    /* Update the URL writable */

    writablefield_set_value(0, i, URLBarWrit, url);

    return 1;
  }

  return 0;
}

/**************************************************************/
/* handle_url_submission()                                    */
/*                                                            */
/* Take necessary actions to submit a URL typed into the      */
/* browser URL bar. This may include expanding it through a   */
/* match search, adding best guess protocol specifiers, etc.  */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the URL bar;                                   */
/*                                                            */
/*             Key number used - currently always 0x00d.      */
/**************************************************************/

static void handle_url_submission(browser_data * b, int key)
{
  char     url[Limits_URLBarWrit];
  ObjectId i = toolbars_get_upper(b);

  /* Read the new URL from the URL bar writable */

  *url = 0;
  ChkError(writablefield_get_value(0, i, URLBarWrit, url, sizeof(url), NULL));
  url[sizeof(url) - 1] = 0; /* (Ensure termination) */

  #ifdef ALIAS_URLS
  // Not implemented yet...
  #endif

  /* If we're displaying a temporary file and the URL hasn't changed, */
  /* treat this as an attempt to reload the page.                     */

  if (
       b->displayed == Display_Scrap_File   &&
       !strcmp(browser_current_url(b), url)
     )
  {
    erb.errnum = Utils_Error_Custom_Message;

    StrNCpy0(erb.errmess,
             lookup_token("CantReload:This page cannot be reloaded, as it was sent directly from another application.",
                          0,
                          0));

    show_error_ret(&erb);
  }
  else
  {
    #ifdef JAVASCRIPT

      /* If this is a JavaScript URL, the script will end up    */
      /* being executed. Tell the JavaScript interface routines */
      /* that it came from the URL writable.                    */

      if (javascript_url(url)) javascript_set_source(JavaScript_Source_URLWritable);

    #endif

    #ifdef HIDE_CGI

      /* If HIDE_CGI is defined, the URL bar may have only part of    */
      /* the URL in it - the CGI information could be stripped off.   */
      /* In that case, check if the URL matches the browser's current */
      /* one with the exception of the CGI stuff, and only do the     */
      /* fetch if not.                                                */

      if (
           browser_current_url(b) &&                               /* If there *is* a current URL, and            */
           !strncmp(browser_current_url(b), url, strlen(url)) &&   /* the URL bar matches the start of it...      */
           strlen(browser_current_url(b)) > strlen(url) &&         /* ...but there's more of the current URL left */
           browser_current_url(b)[strlen(url)] == '?'              /* ...and the first extra character is a '?',  */

         )
         ChkError(fetchpage_new(b, browser_current_url(b), 1, 1, 0)); /* ...then fetch the current URL instead.      */

      else ChkError(fetchpage_new(b, url, 1, 1, 0)); /* Otherwise do what the user asked! */

    #else

      #ifndef REMOTE_HOTLIST

        /* One last check - auto Ctrl+Tab; if there's no '.', '/' or ':'   */
        /* in the given URL, jump to the Ctrl+Tab routine.                 */

        if (
             !strchr(url, ':') &&
             !strchr(url, '.') &&
             !strchr(url, '/')
           )
           handle_url_completion(b, url, sizeof(url), akbd_TabK + akbd_Ctl);

      #endif

      /* Start the new fetch */

      ChkError(fetchpage_new(b, url, 1, 1, 0));

    #endif
  }
}

/**************************************************************/
/* handle_keys()                                              */
/*                                                            */
/* Deal with keyboard pressed events from the Wimp.           */
/* Parameters are as standard for a Wimp event handler.       */
/**************************************************************/

int handle_keys(int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle)
{
  browser_data    * b        = NULL;
  browser_data    * ancestor = NULL;
  browser_data    * curframe = NULL;
  _kernel_oserror * e;
  int               key;

  /* Get the browser_data structure associated with either this object's */
  /* ancestor, if it has one, or this object directly, if not. If either */
  /* call fails this isn't a keypress from an ancestor object obtained   */
  /* from a browser window and it isn't from a browser window directly.  */

  if (idb->ancestor_id) e = toolbox_get_client_handle(0, idb->ancestor_id, (void *) &b);
  else                  e = toolbox_get_client_handle(0, idb->self_id,     (void *) &b);

  /* Some key presses may come from windows that have non-zero */
  /* client handles which aren't browser_data struct pointers, */
  /* e.g. a print dialogue with an animation in it will        */
  /* return an animation frame. So if b is non-zero but not a  */
  /* known browser_data struct pointer, set it to NULL so that */
  /* later routines can quickly know there is no valid pointer */
  /* available.                                                */

  if (b && !is_known_browser(b)) b = NULL;

  if (b)
  {
    ancestor = utils_ancestor(b);
    curframe = ancestor->selected_frame;

    if (!curframe) curframe = b;
  }

  key = ((WimpKeyPressedEvent *) block)->key_code;

  /* Is this from a URL bar? To find out, get the toolbar ID of */
  /* this object, if possible.                                  */

  if (!e && idb->ancestor_id)
  {
    ObjectId i;

    i = toolbars_get_upper(b);

    if (!e && i == idb->self_id)
    {
      /* Make sure we have a client handle for the underlying browser */
      /* window before attempting to proceed                          */

      if (b)
      {
        switch (key)
        {
          /* Scrolling the page. Remember, keypresses trapped here */
          /* are from a toolbar object (probably the URL writable) */
          /* so certain key presses - such as Copy / End to go to  */
          /* the bottom of the page - should *not* be trapped, as  */
          /* they have other meanings (e.g. in the above example,  */
          /* delete character to the right).                       */

          case akbd_UpK:
          case akbd_DownK:
          case akbd_PageUpK:
          case akbd_PageDownK:
          case akbd_HomeK:
          case akbd_UpK + akbd_Ctl:
          case akbd_UpK + akbd_Ctl + akbd_Sh:
          case akbd_DownK + akbd_Ctl:
          case akbd_DownK + akbd_Ctl + akbd_Sh:
          {
            if (!browser_scroll_page_by_key(curframe, key, NULL))
            {
              key = 0;
              _swix(OS_Byte, _INR(0,1), 21, 0); /* Flush keyboard buffer */
            }
          }
          break;

          case akbd_LeftK:
          case akbd_LeftK + akbd_Sh:
          case akbd_LeftK + akbd_Ctl:
          case akbd_LeftK + akbd_Sh + akbd_Ctl:
          {
            /* For left, only scroll when the caret is at the start of the */
            /* string in the URL writable.                                 */

            if (((WimpKeyPressedEvent *) block)->caret.index == 0)
            {
              if (!browser_scroll_page_by_key(curframe, key, NULL))
              {
                key = 0;
                _swix(OS_Byte, _INR(0,1), 21, 0); /* Flush keyboard buffer */
              }
            }
          }
          break;

          case akbd_RightK:
          case akbd_RightK + akbd_Sh:
          case akbd_RightK + akbd_Ctl:
          case akbd_RightK + akbd_Sh + akbd_Ctl:
          {
            /* For right, only scroll when the caret is at the end of the */
            /* string in the URL writable.                                */

            char writable[Limits_URLBarWrit];
            int  len;

            *writable = 0;
            writablefield_get_value(0, idb->self_id, URLBarWrit, writable, sizeof(writable), &len);
            writable[sizeof(writable) - 1] = 0; /* (Ensure termination) */

            if (((WimpKeyPressedEvent *) block)->caret.index >= len)
            {
              if (!browser_scroll_page_by_key(curframe, key, NULL))
              {
                key = 0;
                _swix(OS_Byte, _INR(0,1), 21, 0); /* Flush keyboard buffer */
              }
            }
          }
          break;

          case akbd_TabK:
          {
            if (choices.keyboard_ctrl)
            {
              wimp_set_caret_position(ancestor->window_handle, -1, 0, 0, -1, -1);

              /* If there's no selected token, select one */

              if (!ancestor->selected || !ancestor->selected_owner)
              {
                /* Ensure *both* values are NULL (sanity check) */

                ancestor->selected       = NULL;
                ancestor->selected_owner = NULL;

                /* Select a token */

                browser_move_selection(curframe, akbd_DownK);
              }
              else
              {
                /* If there's a selected token, does it belong to this */
                /* window?                                             */

                if (ancestor->selected_owner == curframe)
                {
                  WimpGetWindowStateBlock s;

                  /* If it belongs to this window but it's not visible, */
                  /* find a new token that is.                          */

                  s.window_handle = curframe->window_handle;

                  if (!wimp_get_window_state(&s) && !browser_check_visible(b, &s, ancestor->selected))
                  {
                    browser_clear_selection(curframe, 0);
                    browser_move_selection(curframe, akbd_DownK);
                  }
                }
//                else
//                {
//                  /* The selected token doesn't belong to this window, */
//                  /* so select a new one here.                         */
//
//                  browser_move_selection(b, akbd_DownK);
//                }
              }
            }

// This is unfinished - it only works if the form has already
// had an input focus at least once, and won't scroll the page
// if the focus should drop off it.

            else form_give_focus(curframe);

            key = 0;
          }
          break;

          case akbd_TabK + akbd_Ctl:
          case akbd_TabK + akbd_Ctl + akbd_Sh:
          {
            #ifndef REMOTE_HOTLIST

              char url[Limits_URLBarWrit];

              *url = 0;
              ChkError(writablefield_get_value(0, i, URLBarWrit, url, sizeof(url), NULL));
              url[sizeof(url) - 1] = 0; /* (Ensure termination) */

              if (handle_url_completion(b, url, sizeof(url), key)) writablefield_set_value(0, i, URLBarWrit, url);

              key = 0;

            #endif
          }
          break;

          case akbd_TabK + akbd_Sh:
          {
            handle_protocol_cycle(b, key);
            key = 0;
          }
          break;

          case 0x00d:
          {
            handle_url_submission(b, key);
            key = 0;
          }
          break;
        }
      }
    }
  }

  if (key) wimp_process_key(key);

  return 1;
}

/**************************************************************/
/* handle_keys_from_browser()                                 */
/*                                                            */
/* Called when a Wimp key pressed event is generated for a    */
/* specific browser window. Parameters are as standard for a  */
/* Wimp event handler.                                        */
/**************************************************************/

int handle_keys_from_browser(int eventcode, WimpPollBlock * block, IdBlock * idb, browser_data * handle)
{
  int            key = ((WimpKeyPressedEvent *) block)->key_code;
  browser_data * ancestor;
  browser_data * curframe;

  if (!handle) return 0;

  ancestor = utils_ancestor(handle);
  curframe = ancestor->selected_frame;

  if (!curframe) curframe = handle;

  form_process_key(handle, &key);

  /* If 'key' is non-zero, the forms library couldn't handle it */

  switch (key)
  {
    /* Scrolling the page. Here, unlike the code above, the */
    /* keypress is straight off the browser page, so unless */
    /* the forms library has trapped the key, things such   */
    /* as left/right and copy/end can be used to move the   */
    /* page around as well as up/down etc.                  */

    case akbd_PageUpK:
    case akbd_PageDownK:

    case akbd_HomeK:
    case akbd_CopyK: /* Or 'End' */

    case akbd_UpK:
    case akbd_UpK    + akbd_Ctl:
    case akbd_UpK    + akbd_Ctl + akbd_Sh:

    case akbd_DownK:
    case akbd_DownK  + akbd_Ctl:
    case akbd_DownK  + akbd_Ctl + akbd_Sh:

    case akbd_LeftK:
    case akbd_LeftK  + akbd_Sh:
    case akbd_LeftK  + akbd_Ctl:
    case akbd_LeftK  + akbd_Ctl + akbd_Sh:

    case akbd_RightK:
    case akbd_RightK + akbd_Sh:
    case akbd_RightK + akbd_Ctl:
    case akbd_RightK + akbd_Ctl + akbd_Sh:
    {
      int limit;

      if (browser_move_selection(curframe, key))
      {
        key = 0;
        _swix(OS_Byte, _INR(0,1), 21, 0); /* Flush keyboard buffer */

        /* Rehighlight the frame if required */

        if (controls.keep_highlight) frames_highlight_frame(curframe);
      }
      else
      {
        if (!browser_scroll_page_by_key(curframe, key, &limit))
        {
          /* If limit is set, the window is scrolled as far as it */
          /* will go - can we jump to another frame, then? (Only  */
          /* jumping out for certain key presses, though).        */

          if (
               limit &&
               (
                 key == akbd_UpK ||
                 key == akbd_DownK
               )
             )
          {
            browser_data * next = frames_find_another_frame(curframe, key == akbd_UpK ? 1 : 0);

            if (next)
            {
              /* Another frame has been identified */

              browser_clear_selection(curframe, 0);

              /* Scroll the frame appropriately */

              browser_scroll_page_v(next,
                                    NULL,
                                    key == akbd_UpK ? 0 : 1,
                                    0,
                                    0,
                                    0x1000000,
                                    NULL);

              /* Make sure the ancestor(s) are updated */

              ancestor->selected_frame = NULL;

              ancestor = utils_ancestor(next);

              ancestor->selected_frame = curframe = next;

              /* Find a selectable */

              browser_move_selection(curframe, key);

              /* Highlight the frame */

              frames_highlight_frame(curframe);
            }
          }
          else
          {
            /* Scrolled page - rehighlight the frame if required */

            if (controls.keep_highlight) frames_highlight_frame(curframe);
          }
        }

        key = 0;
        _swix(OS_Byte, _INR(0,1), 21, 0);
      }
    }
    break;

    case akbd_TabK: if (!browser_give_general_focus(curframe)) key = 0;
    break;

    case 0x00d:
    {
      browser_data * owner;

      owner = ancestor->selected_owner;

      if (ancestor->selected && browser_check_visible(owner, NULL, ancestor->selected))
      {
        /* If an item is selected and at least partially visible, */
        /* act as if it were clicked upon with Select             */

        // Optimise this? Lose the check for IMG, and rely on
        // HTMLLib returning valid information?

        if (
             (
               (
                 (ancestor->selected->style & IMG)       &&
                 (ancestor->selected->type & TYPE_ISMAP)
               )
               ||
               (
                 ancestor->selected->type & TYPE_ISCLIENTMAP
               )
             )
             && !ancestor->in_image_map
           )
        {
          /* For image maps, if not already selected, start keyboard */
          /* navigation of the map.                                  */

          BBox      box;
          HStream * map  = ancestor->selected;

          if (!image_get_token_image_size(owner, map, &box))
          {
            WimpGetWindowStateBlock s;
            int                     x, y;

            s.window_handle = owner->window_handle;
            ChkError(wimp_get_window_state(&s));

            if (!image_get_token_image_position(owner, map, &x, &y))
            {
              x = coords_x_toscreen(x, (WimpRedrawWindowBlock *) &s);
              y = coords_y_toscreen(y, (WimpRedrawWindowBlock *) &s);

              box.xmin += x + 2;
              box.ymin += y + 2;
              box.xmax += x - 4;
              box.ymax += y - 4;

              // Re: Next line of code.
              //
              // Why? Can't easily force rectangle constraint, as
              // whenever the pointer changes shape it is unconstrained.
              // So the navigation function has to handle being called
              // with the pointer moved off the map (and it does); so
              // this isn't wanted, really...
              //
              // Still, left in just in case it's needed for something!
              //
              // /* Constrain the pointer to the image map rectangle */
              //
              // mouse_rectangle(&box, 1);

              /* Move x and y to the middle of the image map */

              x += (box.xmax - box.xmin) / 2, y += (box.ymax - box.ymin) / 2;

              /* Move pointer, and update internal details of what pointer is over */

              mouse_to(x, y, 0);

              owner->pointer_over = ancestor->pointer_over = map;
              browser_pointer_check(0, NULL,NULL, owner);
              mouse_set_pointer_shape(Mouse_Shape_Map);
              mouse_watch_pointer_control(0);
              mouse_pointer_on();

              owner->in_image_map = ancestor->in_image_map = 1;

              return 1;
            }
          }
        }
        else
        {
          /* Not an image map, or a selected map - so follow the link. */

          owner->pointer_over = NULL;
          browser_pointer_check(0, NULL,NULL, owner);

          if (choices.keyboard_ctrl)
          {
            mouse_pointer_off();
            mouse_watch_pointer_control(1);
          }

          handle_link_clicks(-1, NULL, NULL, owner);
        }
      }
    }
    break;

    default:
    {
      /* In merged status bar situations, want alphanumeric characters */
      /* to pop up the URL writable with that key in it.               */

      if (isalnum(key)) /* Wimp_ProcessKey numbers are equal to ASCII codes for alphanumerics */
      {
        handle_go_to_with_key(handle, (char) key, controls.clear_first);
        key = 0;
      }
    }
  }

  if (key) ChkError(wimp_process_key(key));

  return 1;
}

/**************************************************************/
/* handle_menus()                                             */
/*                                                            */
/* Deal with menu selection events from the Wimp (for forms   */
/* etc.). Parameters are as standard for a Wimp event         */
/* handler.                                                   */
/**************************************************************/

int handle_menus(int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle)
{
  switch (menusrc)
  {

    case Menu_Form:
    {
      form_select_menu_event(block);
    }
    break;

    case Menu_LocalHist: /* Same as for global, so no break */
    case Menu_GlobalHist:
    {
      ChkError(history_menu_selection((browser_data *) menuhdl, block));
    }
    break;

    default: return 0;
  }

  return 1;
}

/**************************************************************/
/* handle_scroll_requests()                                   */
/*                                                            */
/* Deal with Scroll Request events from the Wimp (e.g. for    */
/* page up/down). Parameters are as standard for a Wimp event */
/* handler.                                                   */
/**************************************************************/

int handle_scroll_requests(int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle)
{
  if (b->scroll_request.yscroll)
  {
    ChkError(browser_scroll_page_v(handle,
                                   &b->scroll_request.open,
                                   b->scroll_request.yscroll > 0,
                                   b->scroll_request.yscroll == 2 || b->scroll_request.yscroll == -2,
                                   b->scroll_request.yscroll == 1 || b->scroll_request.yscroll == -1,
                                   0,
                                   NULL));
  }

  if (b->scroll_request.xscroll)
  {
    ChkError(browser_scroll_page_h(handle,
                                   &b->scroll_request.open,
                                   b->scroll_request.xscroll < 0,
                                   b->scroll_request.xscroll == 2 || b->scroll_request.xscroll == -2,
                                   b->scroll_request.xscroll == 1 || b->scroll_request.xscroll == -1,
                                   0,
                                   NULL));
  }

  return 1;
}

/**************************************************************/
/* handle_clicks()                                            */
/*                                                            */
/* Deal with mouse click events from the wimp, for specific   */
/* object IDs. Parameters are as standard for a Wimp event    */
/* handler.                                                   */
/**************************************************************/

int handle_clicks(int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle)
{
  int shift;

  /* Is Shift being pressed? */

  _swix(OS_Byte,
        _INR(0,1) | _OUT(1),

        121,
        128,

        &shift);

  /* Process the event only if the browser_data structure contents */
  /* match the ancestor ID of the item clicked upon - i.e. if a    */
  /* toolbar has been clicked upon.                                */

  if (idb->ancestor_id == handle->self_id)
  {
    /* If the toolbox hasn't filled in the component ID, e.g. because */
    /* icon flags were forced to change to give a button type the     */
    /* Toolbox didn't expect, fill it in now.                         */

    if (idb->self_component == -1)
    {
      if (
           window_wimp_to_toolbox(0,
                                  b->mouse_click.window_handle,
                                  b->mouse_click.icon_handle,
                                  &idb->self_id,
                                  &idb->self_component)
         )
         return 0;
    }

    switch (idb->self_component)
    {
      case StatusBarStatusCover:  /* Clicking on a covering gadget is equivalent  */
      case StatusBarStatus:       /* to clicking on the underlying gadget instead */
      {
        /* If the URL writable and status display are merged, want to */
        /* now swap the display for the writable and put the caret in */
        /* the field.                                                 */

        if (handle->merged_url)
        {
          toolbars_merged_to_url(handle, idb->self_id);
          gadget_set_focus(0, idb->self_id, URLBarWrit);
        }
      }
      break;

      case URLBarHistoryMenuL: /* Drop through to URLBarHistoryMenuR case */
      case URLBarHistoryMenuR:
      {
        ChkError(history_menu_popup(handle,
                                    idb->self_id,
                                    idb->self_component,
                                    shift,
                                    b->mouse_click.buttons & Wimp_MouseButtonAdjust ? !choices.show_urls : choices.show_urls));
      }
      break;
    }

    /* Grey / ungrey buttons, as the state may change as */
    /* a result of being selected.                       */

    toolbars_set_button_states(handle);

    return 1;
  }

  return 0;
}

/**************************************************************/
/* handle_link_clicks()                                       */
/*                                                            */
/* Deal with mouse click events from the wimp, on gadgets in  */
/* the browser window. Parameters are as standard for a Wimp  */
/* event handler.                                             */
/**************************************************************/

int handle_link_clicks(int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle)
{
  HStream                 * p = NULL;
  int                       ox, oy, adj, used = 0;
  int                       shift, ctrl;
  WimpGetPointerInfoBlock   i;
  browser_data            * ancestor = utils_ancestor(handle);
  browser_data            * owner;

  owner = ancestor->selected_owner;

  /* Is Shift held down? (Do this very early to minimise the */
  /* changes of missing the keypress).                       */

  _swix(OS_Byte,
        _INR(0,1) | _OUT(1),

        121,
        128,

        &shift);

  /* Similarly, for Control */

  _swix(OS_Byte,
        _INR(0,1) | _OUT(1),

        121,
        129,

        &ctrl);

  /* Remember where the click was so other functions can find this  */
  /* without calling Wimp_GetPointerInfo, by which time the pointer */
  /* may have moved a bit.                                          */

  last_click_x = b->mouse_click.mouse_x;
  last_click_y = b->mouse_click.mouse_y;

  /* There are circumstances under which pointer watching, to see if */
  /* the mouse pointer should be turned off, is disabled but should  */
  /* be enabled at this stage. If this is so, turn it back on.       */

  if (choices.keyboard_ctrl && ancestor->selected)
  {
    owner->pointer_over = NULL;
    browser_pointer_check(0, NULL, NULL, owner);
    mouse_watch_pointer_control(1);
  }

  /* If this is entered with an event code of -1, this signals that */
  /* the keyboard handler is calling the function. In that case,    */
  /* the routine will treat the item in handle->selected as if it   */
  /* were clicked on with Select.                                   */
  /*                                                                */
  /* Otherwise, the token that was clicked on is discovered         */
  /* from the pointer position, and the mouse button used from the  */
  /* actual mouse button state.                                     */

  if (eventcode >= 0 && b->mouse_click.buttons & Wimp_MouseButtonMenu) return 0;

  /* Use the 'adjust' function as this may return special information if running Full Screen. */

  adj = (controls.ignore_adjust || eventcode < 0) ? 0 : adjust();

  /* This may be a drag, not a click; also, if the browser has */
  /* children, this must be a frame border resize event.       */

  if (
       b->mouse_click.buttons == 16 || /* (Adjust-drag) */
       b->mouse_click.buttons == 64    /* (Select-drag) */
     )
  {
    /* For now, we have no defined action for drags */

    return 1;
  }

  /* For dragging borders, don't do this on the drag event (i.e. keep */
  /* this code in a position to execute after the check for a drag).  */
  /* Otherwise, when the routine calls Wimp_GetPointerInfo, it'll get */
  /* the original starting coordinates just after the drag begins.    */
  /* This makes the frames 'twitch' briefly back to their starting    */
  /* position.                                                        */

  if (handle->nchildren)
  {
    drag_in_progress = 1;
    handle->dragging = 1;

    register_null_claimant(Wimp_ENull, (WimpEventHandler *) handle_drags, handle);

    /* Call it now to minimise the time during which the pointer */
    /* could wander when it's meant to be constrained            */

    handle_drags(0, NULL, NULL, handle);

    return 1;
  }

  /* Get the token that was clicked upon, if any. */

  ChkError(wimp_get_pointer_info(&i));

  if (eventcode >= 0) p = browser_get_pointer_token(handle, &i, &ox, &oy);
  else                p = ancestor->selected, handle = owner;

  if (p)
  {
    /* First - forms. */

    if (
         (p->style & FORM) &&
         (
           (p->tagno == TAG_INPUT)    ||
           (p->tagno == TAG_TEXTAREA) ||
           (p->tagno == TAG_SELECT)
         )
       )
    {
      int x = 0, y = 0;

      /* Get the offset into an IMAGE button type */

      if (p->tagno == TAG_INPUT && HtmlINPUTtype(p) == inputtype_IMAGE && eventcode >= 0)
      {
        ChkError(image_return_click_offset(handle, p, &i, &x, &y));
      }

      ChkError(form_click_field(handle, p, 0, x, y));
      used = 1;
    }
    else
    {
      /* If the token is an anchor, flash it briefly. This isn't done */
      /* for images unless they're turned off and the image has ALT   */
      /* text, which would show the highlight.                        */

      if (
           p->anchor &&
           (
             !(p->style & IMG) ||
             (
               (p->style & IMG)                            &&
               p->text                                     &&
               handle->displayed != Display_External_Image &&
               !image_token_fetched(handle, p)
             )
           )
         )
      {
        HStream * link_start;
        HStream * link_end;

        /* It's useful for a page to show when links have been followed */
        /* even if they don't end up in the history and on a subsequent */
        /* reload they become "unfollowed"! So set the relevant flag in */
        /* the HStream before making the link flash.                    */
        /*                                                              */
        /* Because only this browser's tokens are being touched, we     */
        /* avoid problems of having to update this link in all of the   */
        /* other open windows.                                          */

        tokenutils_anchor_range(handle, p, &link_start, &link_end);

        do
        {
          link_start->flags |= HFlags_LinkVisited;
          link_start = link_start->next;
        }
        while (link_start != link_end->next);

        /* Right, now make the link flash */

        browser_flash_token(handle, p);
      }

      /* If shift and control are not held down, and we have a link, follow the link */

      if (!shift && !ctrl)
      {
        if (p->anchor || (p->type & TYPE_ISCLIENTMAP)) /* An anchor or client-side map */
        {
          int ignore           = 0;
          int no_anchor_errors = 0;

          /* First, do we have JavaScript code to deal with? */

          if (p->onclick != NULL && *p->onclick != '\0')
          {
            #ifdef JAVASCRIPT
              javascript_set_source(JavaScript_Source_LinkInPage);
            #endif

            ChkError(javascript_href_onclick(handle, p, &ignore));

            #ifdef JAVASCRIPT

              /* 'ignore' will always be set in JS builds but what we actually want */
              /* to do is just suppress errors from unrecognised local anchors.     */

              ignore           = 0;
              no_anchor_errors = 1;

            #endif
          }

          /* If ignore is zero, we're supposed to deal with the HREF attribute */
          /* on the link - otherwise, ignore it.                               */

          if (!ignore)
          {
            /* Client-side image maps */

            if (p->type & TYPE_ISCLIENTMAP)
            {
              char * url;
              char * target;
              char * alt;

              /* Find out which pixel we clicked on */

              ChkError(image_return_click_offset(handle, p, &i, &ox, &oy));

              csim_return_info(handle,
                               p,
                               ox,
                               oy,
                               &url,
                               &target,
                               &alt);

              if (url && *url)
              {
                #ifdef JAVASCRIPT
                  if (javascript_url(url)) javascript_set_source(JavaScript_Source_LinkInPage);
                #endif

                ChkError(fetchpage_fetch_targetted(handle,
                                                   url,
                                                   target,
                                                   NULL,
                                                   adj,
                                                   no_anchor_errors));

                used = 1;
              }
            }

            /* Server-side image maps */

            if (
                 !used            &&
                 (p->style & IMG) &&
                 (p->type & TYPE_ISMAP)
               )
            {
              char coords[64];

              if (eventcode < 0)
              {
                ChkError(wimp_get_pointer_info(&i));
                p = browser_get_pointer_token(handle, &i, NULL, NULL);
                if (!p) return 0;
              }

              /* Find out which pixel we clicked on */

              ChkError(image_return_click_offset(handle, p, &i, &ox, &oy));

              if (ox >= 0 && oy >= 0)
              {
                #ifdef JAVASCRIPT
                  if (javascript_url(p->anchor)) javascript_set_source(JavaScript_Source_LinkInPage);
                #endif

                /* Build an appropriate CGI string including this information. */

                sprintf(coords, "?%d,%d", ox, oy);

                ChkError(fetchpage_fetch_targetted(handle,
                                                   p->anchor,
                                                   p->target,
                                                   coords,
                                                   adj,
                                                   no_anchor_errors));
              }

              used = 1;
            }

            /* Otherwise, a simple link */

            if (!used && p->anchor && *p->anchor)
            {
              #ifdef JAVASCRIPT
                if (javascript_url(p->anchor)) javascript_set_source(JavaScript_Source_LinkInPage);
              #endif

              /* Note that running full screen will cause non-targetted links */

              ChkError(fetchpage_fetch_targetted(handle,
                                                 p->anchor,
                                                 p->target,
                                                 NULL,
                                                 adj,
                                                 no_anchor_errors));

              used = 1;
            }
          }
          else
          {
            /* The JavaScript routines said that the HREF contents of the link */
            /* should be ignored; so just flag that we've dealt with this, but */
            /* do nothing else.                                                */

            used = 1;
          }
        }
      }
      else
      {
        /* If Shift is held down, open the object into a save dialogue. */
        /* Always do this through a new window, if the Choices say so;  */
        /* this will be a 'small fetch' window rather than a full,      */
        /* large browser.                                               */

        if (shift)
        {
          if (p->anchor)
          {
            #ifdef JAVASCRIPT
              if (javascript_url(p->anchor)) javascript_set_source(JavaScript_Source_LinkInPage);
            #endif

            if (!adj && !controls.use_small)
            {
              if (!handle->save_oldstore && handle->source)
              {
                /* If there is store and its size hasn't already been remembered, */
                /* keep a record of the old source store size before the new file */
                /* save clears the data away.                                     */

                handle->save_oldstore = flex_size((flex_ptr) &handle->source);
              }

              /* Set the save_link flag and start the fetch */

              handle->save_link = 1;

              /* If control is held down, set the reloading flag to bypass the cache */

              if (ctrl) handle->reload_lock = 1, handle->reloading = 1;

              /* Do the fetch */

              ChkError(fetchpage_new(handle,
                                     p->anchor,
                                     0,
                                     1,
                                     0));
            }
            else
            {
              /* Open the link in a new window */

              ChkError(windows_create_browser(p->anchor,
                                              NULL,
                                              NULL,
                                              NULL,
                                              Windows_CreateBrowser_SaveToFile));

              /* Again, if control is held down, set the reloading flag to bypass the cache */

              if (ctrl) last_browser->reloading = 1;
            }

            used = 1;
          }
        }
        else
        {
          /* For Control, if it's an image, show it. This overrides */
          /* any 'don't show images' flags and will load the image  */
          /* if it isn't already fetched.                           */

          if ((p->style & IMG) || (ISOBJECT(p)))
          {
            image_reload(handle, p); /* (Slightly misleading function name) */
            used = 1;
          }
        }
      }
    }
  }

  /* For mouse clicks, if nothing has flagged that the click was used */
  /* in some way, place the input focus generally into the ancestor   */
  /* window and mark the frame as selected.                           */

  if (eventcode >= 0 && !used)
  {
    wimp_set_caret_position(ancestor->window_handle, -1, 0, 0, -1, -1);

    ancestor->selected_frame = handle;
    frames_highlight_frame(handle);

    /* If there's an object selected in another frame, must move */
    /* the selection to this one - otherwise, keyboard movement  */
    /* would jump back to the other one.                         */

    if (ancestor->selected && ancestor->selected_owner != handle)
    {
      if (ancestor->selected_owner) browser_clear_selection(ancestor->selected_owner, 0);

      ancestor->selected_owner = NULL; /* Make sure these */
      ancestor->selected       = NULL; /* are cleared...  */

      browser_move_selection(handle, akbd_DownK);
    }

    /* Handle drag-to-scroll */

    if (!handle->nchildren)
    {
      drag_in_progress = 1;
      handle->dragging = 1;

      register_null_claimant(Wimp_ENull, (WimpEventHandler *) handle_drags, handle);

      /* Call it now to minimise the time during which the pointer */
      /* could wander when it's meant to be constrained            */

      handle_drags(0, NULL, NULL, handle);

      return 1;
    }
  }

  return 1;
}

/**************************************************************/
/* handle_drags()                                             */
/*                                                            */
/* A null event handler to handle dragging on the page.       */
/* Parameters are as standard for a Wimp event handler,       */
/* though only the last parameter, a pointer to the           */
/* browser_data struct for which the drag applies, is used.   */
/**************************************************************/

int handle_drags(int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle)
{
  static browser_data     * browser_resizing = NULL;
  static browser_data     * browser_scrolled = NULL;

  static int                resizing_row     = -1;
  static int                resizing_col     = -1;
  static int                resizing_ofsleft = 0;
  static int                resizing_ofstop  = 0;

  WimpGetPointerInfoBlock   info;
  WimpGetWindowStateBlock   state;
  int                       wx, wy;

  /* If handle is NULL, this was called for a Wimp_EUserDrag */
  /* event from the Wimp. In that case, cancel the global    */
  /* drag handling flag and allow various event handlers     */
  /* elsewhere to now progress normally but wait until the   */
  /* null event handler calls this function to deregister    */
  /* any browser-specific stuff.                             */

  if (!handle)
  {
    drag_in_progress = 0;
    return 0;
  }

  /* Get the pointer position and browser window state */

  if (wimp_get_pointer_info(&info)) return 0;

  state.window_handle = handle->window_handle;
  if (wimp_get_window_state(&state)) return 0;

  if (!info.button_state)
  {
    /* No button being pressed - the drag has ended */

    if (handle->dragging)
    {
      drag_in_progress = 0;
      handle->dragging = 0;
      deregister_null_claimant(Wimp_ENull, (WimpEventHandler *) handle_drags, handle);

      if (browser_scrolled)
      {
        /* Make sure the pointer is the correct shape if we're no */
        /* longer over the original window or if the pointer is   */
        /* over any of the window border tools. Otherwise make    */
        /* sure it's a relevant shape for any token it is over.   */

        if (
             info.window_handle != browser_scrolled->window_handle ||
             info.icon_handle   < -1
           )
        {
          browser_data * new_b;

          if (
               utils_browser_from_window(info.window_handle, &new_b) != NULL ||
               new_b == NULL
             )
             mouse_set_pointer_shape(Mouse_Shape_Normal);

          else browser_pointer_check(0, NULL, NULL, new_b);
        }
        else
        {
          browser_pointer_check(0, NULL, NULL, browser_scrolled);
        }

        /* If there's an attached MayScroll indicator, make sure it's */
        /* turned off.                                                */

        if (browser_scrolled->may_scroll != NULL_ObjectId)
        {
          /* Set the state to 'off' */

          _swix(Toolbox_ObjectMiscOp,
                _INR(0,4),

                0,
                browser_scrolled->may_scroll,
                ToolAction_SetState,
                0, /* (Assume component ID is zero) */
                0);

        }
      }

      if (browser_resizing)
      {
        /* If we were resizing a frameset, lock the new positions in place */

        frames_lock_frameset(browser_resizing);
      }

      /* Reset the various state variables ready for the next drag */

      browser_resizing = NULL;
      browser_scrolled = NULL;
      resizing_row     = -1;
      resizing_col     = -1;

      return 0;
    }
  }

  /* Work out where the pointer is relative to the window work area */

  wx = coords_x_toworkarea(info.x, (WimpRedrawWindowBlock *) &state);
  wy = coords_y_toworkarea(info.y, (WimpRedrawWindowBlock *) &state);

  /* The mouse button is still held down. So what are we doing? */

  if (handle->nchildren)
  {
    /* If the frame has children, then the pointer must be over a blank bit  */
    /* - i.e. a border between frames. In that case, this is a frame resize. */

    browser_data              * child;
    WimpGetWindowOutlineBlock   co;
    int                         delta_x = 0, delta_y = 0;
    int                         num_rows, num_cols;
    int                         i, c;
    BBox                        span;

    num_rows = handle->frameset->rows;
    num_cols = handle->frameset->cols;

    if (!num_rows) num_rows = 1;
    if (!num_cols) num_cols = 1;

    /* If browser_resizing is NULL, this is the initiation of the drag; */
    /* set up various state variables which will be relevant during the */
    /* drag and are cleared when it ends.                               */

    if (!browser_resizing)
    {
      _kernel_oserror * e;

      e = frames_find_pointer_in_frameset(handle,
                                          last_click_x,
                                          last_click_y,
                                          &resizing_row,
                                          &resizing_col,
                                          &resizing_ofsleft,
                                          &resizing_ofstop,
                                          1);

      if (e || (resizing_row < 0 && resizing_col < 0))
      {
        browser_resizing = NULL;
        resizing_row     = -1;
        resizing_col     = -1;

        return 0;
      }

      browser_resizing = handle;

    /* Closure of 'if (!browser_resizing)' */
    }

    /* Whether or not we had to work out the initial drag */
    /* conditions above, deal with moving the frames now. */

    c = (resizing_row > 0 ? resizing_row : 0) * num_cols + (resizing_col > 0 ? resizing_col : 0);
    if (c >= handle->nchildren) return 0;

    child            = handle->children[c];
    co.window_handle = child->window_handle;

    if (wimp_get_window_outline(&co)) return 0;

    if (resizing_row > 0) delta_y = (info.y - co.outline.ymax) - resizing_ofstop;
    if (resizing_col > 0) delta_x = resizing_ofsleft - (co.outline.xmin - info.x);

    /* Deal with resizing rows first. */

    span.xmin = span.ymin = 0x1000000; /* Very big to start with */
    span.xmax = span.ymax = -1;        /* Small to start with    */

    if (delta_y)
    {
      /* Resize the row above the pointer */

      for (i = 0; i < num_cols; i++)
      {
        /* What child number are we on? */

        c = i + (resizing_row - 1) * num_cols;

        if (c < handle->nchildren)
        {
          /* Get this child frame's outline coordinates */

          child            = handle->children[c];
          co.window_handle = child->window_handle;

          if (!wimp_get_window_outline(&co))
          {
            /* Alter its visible area appropriately */

            co.outline.ymin += delta_y;

            /* Keep a record of the region over which */
            /* things have moved for redraw purposes  */

            if (co.outline.xmin < span.xmin) span.xmin = co.outline.xmin;
            if (co.outline.ymin < span.ymin) span.ymin = co.outline.ymin;
            if (co.outline.xmax > span.xmax) span.xmax = co.outline.xmax;
            if (co.outline.ymax > span.ymax) span.ymax = co.outline.ymax;

            /* Resize any child frames */

            ChkError(frames_resize_frame(child, &co.outline));
          }
        }
      }

      /* Same again for the row below */

      for (i = 0; i < num_cols; i++)
      {
        c = i + resizing_row * num_cols;

        if (c < handle->nchildren)
        {
          child            = handle->children[c];
          co.window_handle = child->window_handle;

          if (!wimp_get_window_outline(&co))
          {
            co.outline.ymax += delta_y;

            if (co.outline.xmin < span.xmin) span.xmin = co.outline.xmin;
            if (co.outline.ymin < span.ymin) span.ymin = co.outline.ymin;
            if (co.outline.xmax > span.xmax) span.xmax = co.outline.xmax;
            if (co.outline.ymax > span.ymax) span.ymax = co.outline.ymax;

            ChkError(frames_resize_frame(child, &co.outline));
          }
        }
      }

    /* Closure of 'if (delta_y)' */
    }

    /* Now do columns; first, to the left of the pointer */

    if (delta_x)
    {
      for (i = 0; i < num_rows; i++)
      {
        c = i * num_cols + resizing_col - 1;

        if (c < handle->nchildren)
        {
          child            = handle->children[c];
          co.window_handle = child->window_handle;

          if (!wimp_get_window_outline(&co))
          {
            co.outline.xmax += delta_x;

            if (co.outline.xmin < span.xmin) span.xmin = co.outline.xmin;
            if (co.outline.ymin < span.ymin) span.ymin = co.outline.ymin;
            if (co.outline.xmax > span.xmax) span.xmax = co.outline.xmax;
            if (co.outline.ymax > span.ymax) span.ymax = co.outline.ymax;

            ChkError(frames_resize_frame(child, &co.outline));
          }
        }
      }

      /* Next, columns to the right of the pointer */

      for (i = 0; i < num_rows; i++)
      {
        c = i * num_cols + resizing_col;

        if (c < handle->nchildren)
        {
          child            = handle->children[c];
          co.window_handle = child->window_handle;

          if (!wimp_get_window_outline(&co))
          {
            co.outline.xmin += delta_x;

            if (co.outline.xmin < span.xmin) span.xmin = co.outline.xmin;
            if (co.outline.ymin < span.ymin) span.ymin = co.outline.ymin;
            if (co.outline.xmax > span.xmax) span.xmax = co.outline.xmax;
            if (co.outline.ymax > span.ymax) span.ymax = co.outline.ymax;

            ChkError(frames_resize_frame(child, &co.outline));
          }
        }
      }

    /* Closure of 'if (delta_x)' */
    }

    /* Now redraw the parent to ensure borders are correctly plotted */

    if (
         span.xmin >= 0 &&
         span.ymin >= 0 &&
         span.xmax >= 0 &&
         span.ymax >= 0
       )
    {
      coords_box_toworkarea(&span, (WimpRedrawWindowBlock *) &state);

      ChkError(wimp_force_redraw(state.window_handle,
                                 span.xmin,
                                 span.ymin,
                                 span.xmax,
                                 span.ymax));
    }

  /* Closure of 'if (handle->nchildren)' */
  }
  else
  {
    /* If we reach here, a drag is happening inside a displaying */
    /* browser window; in that case, we're doing drag-to-scroll. */

    if (choices.drag_to_scroll)
    {
      static int start_xpos;
      static int start_ypos;

      static int start_xscr;
      static int start_yscr;

      static int start_ctrl;

      /* If browser_scrolled is NULL, this is the initiation of the drag; */
      /* set up various state variables which will be relevant during the */
      /* drag and are cleared when it ends.                               */

      if (!browser_scrolled)
      {
        BBox        extent;
        int         exh, exw;
        int         vih, viw;
        WimpDragBox drag;

        /* Holding down Control speeds up the mouse step / drag */
        /* relationship by a factor of H_DTS_MULTIPLIER.        */

        _swix(OS_Byte,
              _INR(0,1) | _OUT(1),

              121,
              129,

              &start_ctrl);

        browser_scrolled = handle;

        start_xpos       = info.x;
        start_ypos       = info.y;
        start_xscr       = state.xscroll;
        start_yscr       = state.yscroll;

        /* Work out the extent and visible area width and height */

        ChkError(window_get_extent(0, browser_scrolled->self_id, &extent));

        exw = extent.xmax - extent.xmin;
        exh = extent.ymax - extent.ymin;

        viw = state.visible_area.xmax - state.visible_area.xmin;
        vih = state.visible_area.ymax - state.visible_area.ymin;

        /* Set up a drag box */

        drag.wimp_window       = browser_scrolled->window_handle;
        drag.drag_type         = Wimp_DragBox_DragPoint;

        drag.dragging_box.xmin = 0;
        drag.dragging_box.ymin = 0;
        drag.dragging_box.xmax = 0;
        drag.dragging_box.ymax = 0;

        if (!start_ctrl)
        {
          drag.parent_box.xmin = start_xscr + start_xpos - (exw - viw);
          drag.parent_box.ymin = start_yscr + start_ypos;
          drag.parent_box.xmax = start_xscr + start_xpos;
          drag.parent_box.ymax = start_yscr + start_ypos + (exh - vih);
        }
        else
        {
          drag.parent_box.xmin = start_xscr / H_DTS_MULTIPLIER + start_xpos - (exw - viw) / H_DTS_MULTIPLIER;
          drag.parent_box.ymin = start_yscr / H_DTS_MULTIPLIER + start_ypos;
          drag.parent_box.xmax = start_xscr / H_DTS_MULTIPLIER + start_xpos;
          drag.parent_box.ymax = start_yscr / H_DTS_MULTIPLIER + start_ypos + (exh - vih) / H_DTS_MULTIPLIER;
        }

        drag.workspace         = NULL;
        drag.draw              = NULL;
        drag.remove            = NULL;
        drag.move              = NULL;

        /* Call the Wimp so that the pointer gets appropriately constrained. */
        /* This is a null handler, so window extent might change due to a    */
        /* reformat etc.; if so, the constraing rectangle is *not* altered.  */
        /* You need to restart the drag to get a new rectangle. Attempting   */
        /* to change the rectangle can let Pointer Leaving events leak       */
        /* through, which causes havok when the pointer leaves the window    */
        /* during the drag.                                                  */

        wimp_drag_box(&drag);

        /* Set the pointer shape */

        mouse_set_pointer_shape(Mouse_Shape_DTS);
      }

      if (!start_ctrl)
      {
        state.xscroll = start_xscr - (info.x - start_xpos);
        state.yscroll = start_yscr - (info.y - start_ypos);
      }
      else
      {
        state.xscroll = start_xscr - (info.x - start_xpos) * H_DTS_MULTIPLIER;
        state.yscroll = start_yscr - (info.y - start_ypos) * H_DTS_MULTIPLIER;
      }

      ChkError(wimp_open_window((WimpOpenWindowBlock *) &state));

    /* Closure of 'if (choices.drag_to_scroll)' */
    }

  /* Closure of 'else' case to 'if (handle->nchildren)' */
  }

  return 0;
}

/**************************************************************/
/* handle_close_browser()                                     */
/*                                                            */
/* Close a browser window, and frames within it.              */
/*                                                            */
/* Parameters are as standard for a Wimp event handler.       */
/* However, only the fourth parameter is actually needed;     */
/* this should be a pointer to the browser_data struct for    */
/* the browser window that is closing. It must be an          */
/* ancestor. If a WimpPollBlock is pointed to, it is used to  */
/* determine if this was a "real" window close and if so      */
/* whether there's a parent Filer window (for 'file:/' URLs)  */
/* that should be opened if Adjust was used.                  */
/**************************************************************/

int handle_close_browser(int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle)
{
  /* Reformatting a table? */

  if (handle->table_format != 0 && b != NULL)
  {
    IdBlock        idb;

    idb.ancestor_id = 0;
    idb.self_id     = handle->self_id;

    handle_stop(0, NULL, &idb, NULL);
  }

  /* If this was a 'file:/' URL, open the parent window - */
  /* provided Adjust was used. If Shift was held down too */
  /* we don't even close the window...                    */

  if (b && b->close_window_request.window_handle == handle->window_handle)
  {
    WimpGetPointerInfoBlock info;
    int                     shift;

    _swix(OS_Byte,
          _INR(0,1) | _OUT(1),

          121,
          128,

          &shift);

    wimp_get_pointer_info(&info);

    if (info.button_state == Wimp_MouseButtonAdjust)
    {
      windows_open_parent_filer(handle);

      if (shift) return 1;
    }
  }
  else
  {
    /* Called directly or a keyboard shortcut, say. Want to    */
    /* make sure we aren't dragging the page - if so, refuse   */
    /* to close (it's very hard to recover properly otherwise, */
    /* too much state info in Handlers.c).                     */

    if (frames_dragging(utils_ancestor(handle)))
    {
      Beep; /* :-) */

      return 0;
    }
  }

  frames_collapse_set(handle);
  windows_close_browser(handle);

  return 1;
}

/**************************************************************/
/* handle_home()                                              */
/*                                                            */
/* Handles clicks on the Home button. Parameters are as       */
/* standard for a Toolbox event handler.                      */
/**************************************************************/

int handle_home(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  int            from_menu = 0;
  browser_data * b;
  char           home[Limits_URL];

  handle_get_call_info(&b, NULL, idb, ButtonBarHome);
  from_menu = handle_menu_or_toolbar(idb);

  urlutils_create_home_url(home, sizeof(home));

  #ifdef JAVASCRIPT

    /* The URL will effectively be fetched as if it were typed */
    /* into the URL writable.                                  */

    if (javascript_url(home)) javascript_set_source(JavaScript_Source_URLWritable);

  #endif

  if (from_menu || controls.ignore_adjust || !adjust()) ChkError(fetchpage_new(b, home, 1, 1, 0));
  else
  {
    ChkError(windows_create_browser(home,
                                    NULL,
                                    NULL,
                                    NULL,
                                    Windows_CreateBrowser_Normal));

    ChkError(browser_inherit(b, last_browser));
  }

  /* Grey / ungrey buttons, as the state may change as */
  /* a result of being selected.                       */

  ChkError(toolbars_set_button_states(b));

  return 1;
}

/**************************************************************/
/* handle_back()                                              */
/*                                                            */
/* Handles clicks on the Back button. Parameters are as       */
/* standard for a Toolbox event handler.                      */
/**************************************************************/

int handle_back(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  int            from_menu = 0;
  browser_data * b;

  handle_get_call_info(&b, NULL, idb, ButtonBarBack);
  from_menu = handle_menu_or_toolbar(idb);

  #ifdef JAVASCRIPT

    /* The URL will effectively be fetched as if it were typed */
    /* into the URL writable.                                  */

    javascript_set_source(JavaScript_Source_URLWritable);

  #endif

  ChkError(history_fetch_backwards(b, (from_menu || controls.ignore_adjust) ? 0 : adjust()));

  /* Grey / ungrey buttons, as the state may change as */
  /* a result of being selected.                       */

  ChkError(toolbars_set_button_states(b));

  return 1;
}

/**************************************************************/
/* handle_forwards()                                          */
/*                                                            */
/* Handles clicks on the Forward button. Parameters are as    */
/* standard for a Toolbox event handler.                      */
/**************************************************************/

int handle_forwards(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  int            from_menu = 0;
  browser_data * b;

  handle_get_call_info(&b, NULL, idb, ButtonBarForward);
  from_menu = handle_menu_or_toolbar(idb);

  #ifdef JAVASCRIPT

    /* The URL will effectively be fetched as if it were typed */
    /* into the URL writable.                                  */

    javascript_set_source(JavaScript_Source_URLWritable);

  #endif

  ChkError(history_fetch_forwards(b, (from_menu || controls.ignore_adjust) ? 0 : adjust()));

  /* Grey / ungrey buttons, as the state may change as */
  /* a result of being selected.                       */

  ChkError(toolbars_set_button_states(b));

  return 1;
}

/**************************************************************/
/* handle_stop()                                              */
/*                                                            */
/* Handles clicks on the Stop button. Parameters are as       */
/* standard for a Toolbox event handler.                      */
/**************************************************************/

int handle_stop(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data * b;

  #ifdef SINGLE_USER

    int shift;

    /* Is Shift being pressed? */

    _swix(OS_Byte,
          _INR(0,1) | _OUT(1),

          121,
          128,

          &shift);

  #endif

  /* Find out where we were called from */

  handle_get_call_info(&b, NULL, idb, ButtonBarStop);

  /* If using the tristate TriState_Go_GoTo_Stop, */
  /* then stop kills everything first time. Else, */
  /* it stops everything except image fetches,    */
  /* then stops image fetches too.                */

  if (b->tristate != TriState_Go_GoTo_Stop)
  {
    if (frames_fetching(b)) frames_abort_fetching(utils_ancestor(b), 0, 1);
    else frames_abort_fetching(utils_ancestor(b), 1, 1);
  }
  else frames_abort_fetching(utils_ancestor(b), 1, 1);

  /* Clear the flag saying this is a History based fetch */

  b->from_history = 0;

  /* Cancel local client pull */

  meta_cancel_refresh(b);

  /* Grey / ungrey buttons, as the state may change as */
  /* a result of being selected.                       */

  ChkError(toolbars_set_button_states(b));

  /* Ensure everything is up to date in the toolbars */

  toolbars_update_progress(b);

  #ifdef SINGLE_USER

    /* Broadcast an AppControl message to stop any further     */
    /* activity in WebServe - this will eventually be directed */
    /* straight at WebServe rather than broadcast...           */

//  if (controls.stop_proxy && !b->ancestor) ChkError(utils_stop_proxy());

    if (
         (
           controls.stop_proxy &&
           !shift
         )
         ||
         (
           !controls.stop_proxy &&
           shift
         )
       )
       ChkError(utils_stop_proxy());

  #endif

  return 1;
}

/**************************************************************/
/* handle_reload()                                            */
/*                                                            */
/* Handles clicks on the Reload button. Parameters are as     */
/* standard for a Toolbox event handler.                      */
/**************************************************************/

int handle_reload(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  _kernel_oserror * e;
  browser_data    * b;
  ObjectId          t;
  int               new_view;
  int               from_menu = 0;

  handle_get_call_info(&b, &t, idb, ButtonBarReload);

  /* If the browser is displaying a temporary file, can't reload it */

  if (b->displayed == Display_Scrap_File)
  {
    erb.errnum = Utils_Error_Custom_Message;

    StrNCpy0(erb.errmess,
             lookup_token("CantReload:This page cannot be reloaded, as it was sent directly from another application.",
                          0,
                          0));

    show_error_ret(&erb);

    return 0;
  }

  from_menu = handle_menu_or_toolbar(idb);
  new_view  = (from_menu || controls.ignore_adjust) ? 0 : adjust();

  #ifdef JAVASCRIPT

    /* The URL will effectively be fetched as if it were typed */
    /* into the URL writable.                                  */

    javascript_set_source(JavaScript_Source_URLWritable);

  #endif

  /* If there's a displayed URL already, reload it */

  if (b->urlddata)
  {
    /* If not going to a new view, set the reloading flag */
    /* and get the URL.                                   */

    if (!new_view)
    {
      b->reloading   = 1;
      b->reload_lock = 1;

      e = fetchpage_new(b, b->urlddata, 0, 1, 0);

      if (e) show_error_ret(e);
    }

    /* Otherwise, just fetch the URL in a new window. */

    else
    {
      ChkError(windows_create_browser(b->urlddata,
                                      NULL,
                                      NULL,
                                      NULL,
                                      Windows_CreateBrowser_Normal));

      ChkError(browser_inherit(b, last_browser));
    }
  }
  else
  {
    /* Otherwise, get a URL string from the URL bar and do */
    /* a fresh load of that.                               */

    char url[Limits_URLBarWrit];

    *url = 0;
    writablefield_get_value(0, t, URLBarWrit, url, sizeof(url), NULL);
    url[sizeof(url) - 1] = 0; /* (Ensure termination) */

    if (*url)
    {
      if (!new_view) ChkError(fetchpage_new(b, url, 1, 1, 0));
      else
      {
        ChkError(windows_create_browser(url,
                                        NULL,
                                        NULL,
                                        NULL,
                                        Windows_CreateBrowser_Normal));

        ChkError(browser_inherit(b, last_browser));
      }
    }
  }

  /* Grey / ungrey buttons, as the state may change as */
  /* a result of being selected.                       */

  ChkError(toolbars_set_button_states(b));

  return 1;
}

/**************************************************************/
/* handle_view_hotlist()                                      */
/*                                                            */
/* Handles clicks on the View Hotlist button. Parameters are  */
/* as standard for a Toolbox event handler.                   */
/**************************************************************/

int handle_view_hotlist(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  #ifndef REMOTE_HOTLIST

    int from_menu = handle_menu_or_toolbar(idb);
    int adjust    = 0;

  #else

    browser_data * b;
    char           path[Limits_URL];
    int            from_menu = 0;

  #endif

  #ifndef SINGLE_USER

    /* In multiuser builds, if not logged in, claim the event */
    /* but don't do anything with it.                         */

    if (!logged_in) return 1;

  #endif

  #ifndef REMOTE_HOTLIST

    /* If not from a menu, allow Adjust to toggle the display type */
    /* at open time to the opposite of that specified by the       */
    /* HotlistShow option in the Choices file.                     */

    if (!from_menu)
    {
      WimpGetPointerInfoBlock info;

      ChkError(wimp_get_pointer_info(&info));

      if (info.button_state & Wimp_MouseButtonAdjust) adjust = 1;
    }

    /* Open the hotlist */

    ChkError(hotlist_open(Toolbox_ShowObject_Centre,
                          NULL,

                          adjust
                          ?
                          choices.hotlist_show == Choices_HotlistType_Descriptions
                          :
                          choices.hotlist_show == Choices_HotlistType_URLs));

  #else

    handle_get_call_info(&b, NULL, idb, ButtonBarViewHotlist);
    from_menu = handle_menu_or_toolbar(idb);

    /* Create the hotlist URL */

    urlutils_create_hotlist_url(path, sizeof(path));

    /* Deal with appending the current URL, if necessary */

  // For future implementation:
  //
  //  if (controls.append_urls)
  //  {
  //    char url[Limits_URL];
  //
  //    if (browser_current_url(b))
  //    {
  //      StrNCpy0(url, browser_current_url(b));
  //      history_record_local(b, url);
  //    }
  //
  //    history_pull_local_last(b, url, sizeof(url));
  //
  // Then do the rest on url, instead of browser_current_url.

    if (controls.append_urls && browser_current_url(b))
    {
      int len;

      lookup_control("AppendWith:?url=",0,0);

      /* Need to translate some chars, so working out the length of the final */
      /* string is a little complex.                                          */

      len = strlen(path) + strlen(tokens);

      if (len + 1 < sizeof(path))
      {
        char * p = browser_current_url(b);

        strcat(path, tokens);

        while (*p && len + 4 < sizeof(path)) /* +4 = +1 for terminator, +3 for maximum step size within loop */
        {
          if (isalnum(*p)) path[len] = *p, len++;
          else
          {
            sprintf(path + len, "%%%02X", *p);
            len += 3;
          }

          p++;
        }

        if (len >= sizeof(path)) len = sizeof(path) - 1;
        path[len] = 0;
      }
    }

    /* Finally, fetch the required hotlist */

    if (adjust() && !from_menu && !controls.ignore_adjust)
    {
      ChkError(windows_create_browser(path,
                                      NULL,
                                      NULL,
                                      NULL,
                                      Windows_CreateBrowser_Normal));

      ChkError(browser_inherit(b, last_browser));
    }
    else ChkError(fetchpage_new(b, path, 1, 1, 0));

  #endif

  return 1;
}

/**************************************************************/
/* handle_add_hotlist()                                       */
/*                                                            */
/* Handles clicks on the Add To Hotlist button. Parameters    */
/* are as standard for a Toolbox event handler.               */
/**************************************************************/

int handle_add_hotlist(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  #ifndef REMOTE_HOTLIST

    browser_data * b;
    int            from_menu = 0;
    int            adjust    = 0;

    handle_get_call_info(&b, NULL, idb, ButtonBarAddToHotlist);
    from_menu = handle_menu_or_toolbar(idb);

    /* If not from a menu, allow Adjust to add to the other end of the */
    /* hotlist compared to that specified in the AddHotlist Choices    */
    /* file item.                                                      */

    if (!from_menu)
    {
      WimpGetPointerInfoBlock info;

      ChkError(wimp_get_pointer_info(&info));

      if (info.button_state & Wimp_MouseButtonAdjust) adjust = 1;
    }

    /* Can't proceed if we don't have a URL */

    if (b && browser_current_url(b) && *browser_current_url)
    {
      char title[Limits_Title];

      ChkError(window_get_title(0,
                                b->self_id,
                                title,
                                sizeof(title),
                                NULL));

      title[sizeof(title) - 1] = 0;

      ChkError(hotlist_add(title,
                           browser_current_url(b),

                           adjust
                           ?
                           choices.add_hotlist == Choices_AddHotlist_Top
                           :
                           choices.add_hotlist == Choices_AddHotlist_Bottom));
    }

  #else

    #ifdef TRACE

      erb.errnum = Utils_Error_Custom_Normal;
      strcpy(erb.errmess, "There is no defined action for Add To Hotlist in REMOTE_HOTLIST builds");
      show_error_ret(&erb);

    #endif

  #endif

  return 0;
}

/**************************************************************/
/* handle_view_resources()                                    */
/*                                                            */
/* Handles clicks on the View Resources button. Parameters    */
/* are as standard for a Toolbox event handler.               */
/**************************************************************/

int handle_view_resources(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  #ifdef SINGLE_USER

    /* No action in single user builds, it shouldn't be in the UI */

    #ifdef TRACE

      erb.errnum = Utils_Error_Custom_Normal;
      strcpy(erb.errmess, "There is no defined action for View Resources in SINGLE_USER builds");
      show_error_ret(&erb);

    #else

      Beep;

    #endif

    return 0;

  #else

    browser_data * b;
    ObjectId       t;
    int            from_menu = handle_menu_or_toolbar(idb);

    handle_get_call_info(&b, &t, idb, ButtonBarViewResources);

    if (is_known_browser(b))
    {
      #ifdef JAVASCRIPT

        /* The resources will effectively be fetched via. a URL as if */
        /* it were typed into the URL writable.                       */

        javascript_set_source(JavaScript_Source_URLWritable);

      #endif

      /* Yucky fixed length buffers, as in multiuser_check_login... Added */
      /* some extra length for 'file:/' or defined equivalent.            */

      char temp[Limits_Multi_Pathname + sizeof(FileMethod ProtocolSepShort) - 1];

      /* Yummy - no overrun checking! */

      sprintf(temp, "%s.Web.Resources", choices.post_in);

      /* Convert this to a URL and fetch it */

      urlutils_pathname_to_url(temp, sizeof(temp));

      if (adjust() && !from_menu && !controls.ignore_adjust)
      {
        ChkError(windows_create_browser(temp,
                                        NULL,
                                        NULL,
                                        NULL,
                                        Windows_CreateBrowser_Normal));

        ChkError(browser_inherit(b, last_browser));
      }
      else ChkError(fetchpage_new(b, temp, 1, 1, 0));
    }
    else return 0;

    return 1;

  #endif
}

/**************************************************************/
/* handle_load_images()                                       */
/*                                                            */
/* Handles clicks on the Load Images button. Parameters are   */
/* as standard for a Toolbox event handler.                   */
/**************************************************************/

int handle_load_images(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data * b;
  ObjectId       t;

  handle_get_call_info(&b, &t, idb, ButtonBarLoadImages);

  ChkError(browser_set_look(b, 0, -1, -1, 1, 1));

  return 1;
}

/**************************************************************/
/* handle_view_source()                                       */
/*                                                            */
/* Handles clicks on the View Source button. Parameters are   */
/* as standard for a Toolbox event handler.                   */
/**************************************************************/

int handle_view_source(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  char           path[Limits_URL]; /* Generated from a URL, but can't be any longer than one */
  browser_data * b;
  ObjectId       t;
  FILE         * file;
  int            len, bytes;

  handle_get_call_info(&b, &t, idb, ButtonBarViewSource);
  if (!is_known_browser(b) || !b->source) return 1;

  /* If the item is loaded from a file (not a scrap file, */
  /* or image, obviously), then load from there. Else, go */
  /* via. Scrap.                                          */

  if (
       browser_current_url(b)                                           &&
       b->displayed == Display_Fetched_Page                             &&
       !strncmp(browser_current_url(b), FileMethod, strlen(FileMethod))
     )
  {
    StrNCpy0(path, browser_current_url(b));

    urlutils_url_to_pathname(path, sizeof(path));
  }
  else
  {
    /* Save the source to a scrap file */

    file = fopen(Save_ScrapFile, "wb");

    if (!file) goto handle_view_source_exit;

    len   = flex_size((flex_ptr) &b->source);
    bytes = fwrite(b->source,
                   1,
                   len,
                   file);

    fclose(file);

    if (len < bytes) goto handle_view_source_exit;

    /* Set the filetype */

    ChkError(_swix(OS_File,
                   _INR(0,2),

                   18,
                   Save_ScrapFile,
                   b->page_is_text ? FileType_TEXT : FileType_HTML));

    /* Record that we've used a scrap file */

    StrNCpy0(path, Save_ScrapFile);
  }

  /* Broadcast a Message_DataOpen for the file, claiming the */
  /* filetype is text (which is what the Filer does...).     */

  ChkError(protocols_atats_send_data_open(FileType_TEXT, path));

  return 1;

  /* Exit for errors whilst writing the scrap file */

handle_view_source_exit:

  erb.errnum = Utils_Error_Custom_Message;

  StrNCpy0(erb.errmess,
           lookup_token("CannotShow:Can't show the source this way (problem with the scrap file).",
                        0,0));

  show_error_ret(&erb);

  return 1;
}

/**************************************************************/
/* handle_go_to()                                             */
/*                                                            */
/* Handles clicks on the Go To button. Parameters are as      */
/* standard for a Toolbox event handler.                      */
/**************************************************************/

int handle_go_to(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data * b;
  ObjectId       t;

  handle_get_call_info(&b, &t, idb, ButtonBarGoTo);

  /* Ensure the URL bar is up to date, if the URL writable and */
  /* status displays are merged then change to the URL display */
  /* and finally give the window the input focus.              */

  toolbars_update_url(b);
  if (b->merged_url) toolbars_merged_to_url(b, t);
  if (t) gadget_set_focus(0, t, URLBarWrit);

  /* Update the buttons and exit */

  ChkError(toolbars_set_button_states(b));

  return 1;
}

/**************************************************************/
/* handle_go_to_with_key()                                    */
/*                                                            */
/* Handles going to a 'go to' state (merged toolbar showing   */
/* the URL writable instead of the status display) with a     */
/* given character entered into that writable.                */
/*                                                            */
/* Parameters: Pointer to a browser_data struct relevant to   */
/*             the toolbar;                                   */
/*                                                            */
/*             The character to append to the writable        */
/*             field's contents;                              */
/*                                                            */
/*             1 to in fact clear the writable before putting */
/*             the character in, else 0 to append to existing */
/*             contents.                                      */
/**************************************************************/

static void handle_go_to_with_key(browser_data * b, char c, int clear)
{
  ObjectId t;
  char     url[Limits_URLBarWrit];
  char     cat[2];

  t = toolbars_get_upper(b);

  /* Ensure the URL bar is up to date, if the URL writable and */
  /* status displays are merged then change to the URL display */
  /* and finally give the window the input focus.              */

  toolbars_update_url(b);

  /* (Append the given character) */

  if (clear)
  {
    url[0] = c;
    url[1] = 0;
  }
  else
  {
    *url = 0;
    writablefield_get_value(0, t, URLBarWrit, url, sizeof(url), NULL);
    url[sizeof(url) - 1] = 0;

    if (strlen(url) < sizeof(url))
    {
      cat[0] = c;
      cat[1] = 0;
      strcat(url, cat);
    }
  }

  writablefield_set_value(0, t, URLBarWrit, url);

  /* (Show the writable / give the input focus) */

  if (b->merged_url) toolbars_merged_to_url(b, t);
  if (t) gadget_set_focus(0, t, URLBarWrit);

  /* Update the buttons and exit. */

  ChkError(toolbars_set_button_states(b));

  return;
}

/**************************************************************/
/* handle_go()                                                */
/*                                                            */
/* Handles clicks on the Go button. Parameters are as         */
/* standard for a Toolbox event handler.                      */
/**************************************************************/

int handle_go(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data        * b;
  WimpKeyPressedEvent   keys;
  IdBlock               id;

  handle_get_call_info(&b, NULL, idb, ButtonBarGo);

  // Nasty... But then robust, as quite a lot goes on in the key handler
  // and duplicating the code would lead to problems if it gets out of
  // sync.

  /* Fake a keyboard pressed event from the URL bar for the key handler */

  keys.key_code     = 0x00d;
  id.ancestor_id    = b->self_id;
  id.self_id        = toolbars_get_upper(b);
  id.self_component = URLBarWrit;

  return handle_keys(eventcode, (WimpPollBlock *) &keys, &id, NULL);
}

/**************************************************************/
/* handle_cancel()                                            */
/*                                                            */
/* Handles clicks on the Cancel button. Parameters are as     */
/* standard for a Toolbox event handler.                      */
/**************************************************************/

int handle_cancel(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data * b;

  handle_get_call_info(&b, NULL, idb, ButtonBarCancel);

  /* If the URL writable and status display are merged, switch to */
  /* status display. Update the URL bar with the original text,   */
  /* cancelling any changes made by the user, and set the caret   */
  /* position by the general method (so focus may go to a form,   */
  /* the URL writable, or the page generally).                    */

  if (b->merged_url) toolbars_merged_to_status(b, toolbars_get_upper(b));
  toolbars_update_url(b);
  browser_give_general_focus(b);

  /* Update the buttons and exit */

  ChkError(toolbars_set_button_states(b));

  return 1;
}

/**************************************************************/
/* handle_bistate()                                           */
/*                                                            */
/* Handles the EButtonBarBistate event, which says that the   */
/* bistate button should be activated.                        */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int handle_bistate(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data * b;

  handle_get_call_info(&b, NULL, idb, ButtonBarBistate);

  /* Deal with each button type individually */

  switch (b->bistate)
  {
    case BiState_Cancel_Back:
    {
      if (!b->bistate_state) return handle_cancel(eventcode, event, idb, handle);
      else                   return handle_back(eventcode, event, idb, handle);
    }
    break;
  }

  return 0;
}

/**************************************************************/
/* handle_tristate()                                          */
/*                                                            */
/* Handles the EButtonBarTristate event, which says that the  */
/* tristate button should be activated.                       */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int handle_tristate(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data * b;

  handle_get_call_info(&b, NULL, idb, ButtonBarTristate);

  /* Deal with each button type individually */

  switch (b->tristate)
  {
    case TriState_Go_GoTo_Stop:
    {
      switch (b->tristate_state)
      {
        case 0: return handle_go(eventcode, event, idb, handle);
        break;
        case 1: return handle_go_to(eventcode, event, idb, handle);
        break;
        case 2: return handle_stop(eventcode, event, idb, handle);
        break;
      }
    }
    break;
  }

  return 0;
}

/**************************************************************/
/* handle_save_source()                                       */
/*                                                            */
/* Handles clicks on the Save button. Parameters are as       */
/* standard for a Toolbox event handler.                      */
/**************************************************************/

int handle_save_source(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data * b;

  handle_get_call_info(&b, NULL, idb, ButtonBarSaveSource);

  if (is_known_browser(b) && b->source) ChkError(savefile_open_for(b, save_as_html));

  return 1;
}

/**************************************************************/
/* handle_print()                                             */
/*                                                            */
/* Handles clicks on the Print button in the toolbar of       */
/* browser windows. Parameters are as standard for a Toolbox  */
/* event handler.                                             */
/**************************************************************/

int handle_print(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data * b;

  handle_get_call_info(&b, NULL, idb, ButtonBarPrint);

  if (is_known_browser(b) && b->cell && b->cell->nlines) ChkError(print_open_for(b, idb->self_id));

  return 1;
}

/**************************************************************/
/* handle_save_as_text()                                      */
/*                                                            */
/* Handles clicks on the Save As Text button. Parameters are  */
/* as standard for a Toolbox event handler.                   */
/**************************************************************/

int handle_save_as_text(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data * b;

  handle_get_call_info(&b, NULL, idb, ButtonBarSaveAsText);

  if (is_known_browser(b) && b->cell && b->cell->nlines) ChkError(savefile_open_for(b, save_as_text));

  return 1;
}

/**************************************************************/
/* handle_save_as_draw()                                      */
/*                                                            */
/* Handles clicks on the Save As Draw button.                 */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int handle_save_as_draw(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data * b;

  handle_get_call_info(&b, NULL, idb, ButtonBarSaveAsDraw);

  if (is_known_browser(b) && b->cell && b->cell->nlines) ChkError(savefile_open_for(b, save_as_draw));

  return 1;
}

/**************************************************************/
/* handle_may_scroll()                                        */
/*                                                            */
/* Handles clicks on a MayScroll indicator.                   */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int handle_may_scroll(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data * ancestor;

  /* Can't do anything if there's already a drag in progress */

  if (drag_in_progress) return 0;

  /* Find out the browser the MayScroll indicator is attached to */

  if (toolbox_get_client_handle(0, idb->ancestor_id, (void *) &ancestor)) return 0;
  if (!is_known_browser(ancestor))                                        return 0;
  if (ancestor->may_scroll != idb->self_id)                               return 0;

  /* The association is valid - call the drag handler */

  drag_in_progress = 1;
  ancestor->dragging = 1;

  register_null_claimant(Wimp_ENull, (WimpEventHandler *) handle_drags, ancestor);

  /* Turn the indicator on */

  _swix(Toolbox_ObjectMiscOp,
        _INR(0,4),

        0,
        idb->self_id,
        ToolAction_SetState,
        0, /* (Assume component ID is zero) */
        1);

  /* Call it now to minimise the time during which the pointer */
  /* could wander when it's meant to be constrained            */

  handle_drags(0, NULL, NULL, ancestor);

  return 1;
}

/**************************************************************/
/* handle_set_marker()                                        */
/*                                                            */
/* Remember the token and data offset of the information      */
/* displayed at the top of the visible area for the ancestor  */
/* browser.                                                   */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* 'void * handle' should contain 0 to Limits_Markers - 1to   */
/* set the relevant marker number.                            */
/**************************************************************/

int handle_set_marker(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  int            marker = (int) handle;
  browser_data * b;

  /* Is the marker number in range? */

  if (marker < 0 || marker >= Limits_Markers)
  {
    #ifdef TRACE

      erb.errnum = Utils_Error_Custom_Normal;

      sprintf(erb.errmess,
              "Invalid marker number '%d' in handle_set_marker",
              marker);

      show_error_ret(&erb);

    #endif

    return 0;
  }

  /* Can we find out what browser this relates to? */

  if (toolbox_get_client_handle(0, idb->ancestor_id, (void *) &b))
  {
    if (toolbox_get_client_handle(0, idb->self_id, (void *) &b)) b = NULL;
  }

  if (!is_known_browser(b))
  {
    #ifdef TRACE

      erb.errnum = Utils_Error_Custom_Normal;

      sprintf(erb.errmess,
              "Invalid browser_data pointer 0x%08x in handle_set_marker",
              (unsigned int) b);

      show_error_ret(&erb);

    #endif

    return 0;
  }

  /* If this is an ancestor browser and it has frames, try using the */
  /* highlighted frame instead.                                      */

  if (!b->ancestor && b->nchildren)
  {
    if (is_known_browser(b->selected_frame)) b = b->selected_frame;
    else
    {
      Beep;

      return 1;
    }
  }

  /* Set the marker */

  ChkError(markers_set_marker(b, marker));

  return 1;
}

/**************************************************************/
/* handle_jump_to_marker()                                    */
/*                                                            */
/* Jump to a given marker.                                    */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* 'void * handle' should contain 0 to Limits_Markers - 1 to  */
/* set the relevant marker number.                            */
/**************************************************************/

int handle_jump_to_marker(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  int            marker = (int) handle;
  browser_data * b;

  /* Is the marker number in range? */

  if (marker < 0 || marker >= Limits_Markers)
  {
    #ifdef TRACE

      erb.errnum = Utils_Error_Custom_Normal;

      sprintf(erb.errmess,
              "Invalid marker number '%d' in handle_jump_to_marker",
              marker);

      show_error_ret(&erb);

    #endif

    return 0;
  }

  /* Can we find out what browser this relates to? */

  if (toolbox_get_client_handle(0, idb->ancestor_id, (void *) &b))
  {
    if (toolbox_get_client_handle(0, idb->self_id, (void *) &b)) b = NULL;
  }

  if (!is_known_browser(b))
  {
    /* Jump to it, bringing the window to the front */

    ChkError(markers_jump_to_marker(NULL, marker));
  }
  else
  {
    /* Known browser, so jump to the marker hinting where we came from */

    ChkError(markers_jump_to_marker(b, marker));
  }

  return 1;
}

/**************************************************************/
/* handle_clear_marker()                                      */
/*                                                            */
/* Clear the remembered token and data offset of information  */
/* displayed at the top of the visible area for the ancestor  */
/* browser.                                                   */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* 'void * handle' should contain 0 to Limits_Markers - 1 to  */
/* set the relevant marker number.                            */
/**************************************************************/

int handle_clear_marker(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  int            marker = (int) handle;
  browser_data * b;

  /* Is the marker number in range? */

  if (marker < 0 || marker >= Limits_Markers)
  {
    #ifdef TRACE

      erb.errnum = Utils_Error_Custom_Normal;

      sprintf(erb.errmess,
              "Invalid marker number '%d' in handle_clear_marker",
              marker);

      show_error_ret(&erb);

    #endif

    return 0;
  }

  /* Can we find out what browser this relates to? */

  if (toolbox_get_client_handle(0, idb->ancestor_id, (void *) &b))
  {
    if (toolbox_get_client_handle(0, idb->self_id, (void *) &b)) b = NULL;
  }

  if (!is_known_browser(b))
  {
    #ifdef TRACE

      erb.errnum = Utils_Error_Custom_Normal;

      sprintf(erb.errmess,
              "Invalid browser_data pointer 0x%08x in handle_clear_marker",
              (unsigned int) b);

      show_error_ret(&erb);

    #endif

    return 0;
  }

  /* If this is an ancestor browser and it has frames, try using the */
  /* highlighted frame instead.                                      */

  if (!b->ancestor && b->nchildren)
  {
    if (is_known_browser(b->selected_frame)) b = b->selected_frame;
    else
    {
      Beep;

      return 1;
    }
  }

  /* Clear the marker */

  ChkError(markers_clear_marker_if_owned(b, marker));

  return 1;
}

/**************************************************************/
/* handle_clear_url()                                         */
/*                                                            */
/* Clears the URL writable (like Ctrl+U), assuming the input  */
/* focus is in the relevant place...                          */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int handle_clear_url(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  WimpGetCaretPositionBlock   caret;
  browser_data              * b;
  ObjectId                    t;
  char                        url[2];

  ChkError(wimp_get_caret_position(&caret));

  if (caret.icon_handle < 0 || caret.height < 0 || caret.index < 0) return 0;

  ChkError(toolbox_get_client_handle(0, idb->ancestor_id, (void *) &b));

  if (!b) return 0;

  t = toolbars_get_upper(b);

  /* Ensure the URL bar is up to date, if the URL writable and */
  /* status displays are merged then change to the URL display */
  /* and finally give the window the input focus.              */

  toolbars_update_url(b);

  /* (Append the given character) */

  url[0] = 0;
  url[1] = 0;

  writablefield_set_value(0, t, URLBarWrit, url);

  /* (Show the writable / give the input focus) */

  if (b->merged_url) toolbars_merged_to_url(b, t);
  if (t) gadget_set_focus(0, t, URLBarWrit);

  /* Update the buttons and exit. */

  ChkError(toolbars_set_button_states(b));

  return 1;
}

/**************************************************************/
/* handle_show_history_menu()                                 */
/*                                                            */
/* Opens the history menu near the menu popup gadget (acts as */
/* if that were clicked upon). If the gadget doesn't exist,   */
/* the opening position is undefined.                         */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int handle_show_history_menu(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data * b;
  ObjectId       t;
  BBox           test;
  int            which;
  int            shift;

  /* Is Shift being pressed? */

  _swix(OS_Byte,
        _INR(0,1) | _OUT(1),

        121,
        128,

        &shift);

  /* Which browser is this for? */

  ChkError(toolbox_get_client_handle(0,
                                     idb->ancestor_id ? idb->ancestor_id : idb->self_id,
                                     (void *) &b));
  if (!b) return 0;

  t = toolbars_get_upper(b);

  /* Is the popup present (either the 'to the left' or */
  /* the 'to the right' version)?                      */

  if      (!gadget_get_bbox(0, t, URLBarHistoryMenuR,   &test)) which = 1;
  else if (!gadget_get_bbox(0, t, URLBarHistoryMenuL,   &test)) which = 2;
  else                                                          which = 0;

  if (which)
  {
    /* Show the menu */

    ChkError(history_menu_popup(b,
                                t,
                                which == 1 ? URLBarHistoryMenuR : URLBarHistoryMenuL,
                                shift,
                                choices.show_urls));
    return 1;
  }

  /* Gadget isn't present, so can't open the menu */

  return 0;
}

/**************************************************************/
/* handle_show_info()                                         */
/*                                                            */
/* Put version number in program info window; called on a     */
/* ProgInfo_AboutToBeShown event. Parameters are as standard  */
/* for a Toolbox event handler.                               */
/**************************************************************/

int handle_show_info(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  #ifndef SINGLE_USER

    /* Make sure that the tokens buffer is invalidated, */
    /* or we could end up appending multiple '(M)'s to  */
    /* the string if lookup_token thinks it has no      */
    /* reason to look up the token again.               */

    *lasttokn = 0;

  #endif

  lookup_token("Version:(Unknown!)",1,0);

  #ifndef SINGLE_USER

    strcat(tokens, " (M)");

  #endif

  ChkError(proginfo_set_version(0,
                                idb->self_id,
                                tokens));

  return 1;
}

/**************************************************************/
/* handle_quit()                                              */
/*                                                            */
/* Deal with a Quit_Quit event from any source; parameters    */
/* are as standard for a Toolbox event handler.               */
/**************************************************************/

int handle_quit(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data * b;

  /* Ensure the pointer is visible */

  mouse_pointer_on();

  /* Close all open windows, thereby freeing memory and terminating */
  /* any open connections. This may take some time, so put up an    */
  /* hourglass.                                                     */

  _swix(Hourglass_Start, _IN(0), 10);

  while (last_browser)
  {
    b = last_browser;

    while (b && b->ancestor) b = b->previous;

    if (b && !b->ancestor) handle_close_browser(0, NULL, NULL, b);
  }

  _swix(Hourglass_Off, 0);

  /* Signal that the application should exit through setting 'quit'. */

  quit = 1;

  return 1;
}

/**************************************************************/
/* handle_lose_caret()                                        */
/*                                                            */
/* Call to drag the input focus back to the window in case it */
/* is lost.                                                   */
/*                                                            */
/* Parameters are as standard for a Wimp event handler.       */
/**************************************************************/

int handle_lose_caret(int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle)
{
  if (controls.keep_caret)
  {
    WimpGetPointerInfoBlock i;
    int                     handle;

    /* Only grab the caret if this task owns the window */
    /* the pointer is currently over.                   */

    ChkError(wimp_get_pointer_info(&i));

    handle = utils_task_from_window(i.window_handle);

    if (handle == task_handle)
    {
      WimpGetCaretPositionBlock caret;

      /* The pointer is over a browser-owned window, but if the */
      /* caret is also in a browser-owned window, don't want to */
      /* move it right now.                                     */

      if (wimp_get_caret_position(&caret)) return 0;

      handle = utils_task_from_window(caret.window_handle);

      /* If we don't own the window the caret has moved to, */
      /* grab it back into the browser window.              */

      if (handle != task_handle) browser_give_general_focus(last_browser);

      return 1;
    }
  }

  return 0;
}

/**************************************************************/
/* handle_dialler_display()                                   */
/*                                                            */
/* A null event handler to update the dialler status display  */
/* field, if present.                                         */
/*                                                            */
/* Parameters are as standard for a Wimp event handler.       */
/**************************************************************/

int handle_dialler_display(int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle)
{
  if (handle->url_bar) ChkError(toolbars_update_dialler_time(handle));

  return 0;
}

/**************************************************************/
/* handle_dialler_service()                                   */
/*                                                            */
/* Handles Message_Service messages from the TaskModule       */
/* module, which may be (for example) watching out for        */
/* 'status changed' service calls from the Dialler.           */
/*                                                            */
/* Parameters are as standard for a Wimp message handler.     */
/**************************************************************/

int handle_dialler_service(WimpMessage * m, void * handle)
{
  browser_data     * b = (browser_data *) handle;
  _kernel_swi_regs * r;

  if (!is_known_browser(b)) return 0;

  if (m->hdr.action_code != Message_Service) return 0;

  r = (_kernel_swi_regs *) &m->data;

  if (r->r[1] == Service_Dialler)
  {
    if (b->url_bar) ChkError(toolbars_update_dialler_status(b));

    return 1;
  }

  return 0;
}

/**************************************************************/
/* handle_miscellaneous_event()                               */
/*                                                            */
/* Handle any other user event not already covered by other   */
/* functions, passing it on if we don't know what to do with  */
/* it.                                                        */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* Only the event code and ID block are of direct use here,   */
/* though the functions that this calls may use other items - */
/* these must be checked individually if this may be          */
/* important.                                                 */
/**************************************************************/

int handle_miscellaneous_event(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  /* 'Jump to' menu items */

  if (eventcode >= EHelpGenericBase && eventcode <= EHelpGenericTop)
  {
    browser_data * b;

    if (toolbox_get_client_handle(0, idb->ancestor_id, (void *) &b))
    {
      ChkError(toolbox_get_client_handle(0, idb->self_id, (void *) &b));
    }

    if (!is_known_browser(b)) b = NULL;

    menus_help_miscellaneous(b, eventcode - EHelpGenericBase);

    return 1;
  }

  /* Set a marker */

  else if (eventcode >= ESetMarkerBase && eventcode <= ESetMarkerLimit)
  {
    int marker = eventcode - ESetMarkerBase;

    /* (Range checking is done in handle_set_marker) */

    return handle_set_marker(eventcode, event, idb, (void *) marker);
  }

  /* Jump to a marker */

  else if (eventcode >= EJumpToMarkerBase && eventcode <= EJumpToMarkerLimit)
  {
    int marker = eventcode - EJumpToMarkerBase;

    /* (Range checking is done in handle_set_marker) */

    return handle_jump_to_marker(eventcode, event, idb, (void *) marker);
  }

  /* Clear a marker */

  else if (eventcode >= EClearMarkerBase && eventcode <= EClearMarkerLimit)
  {
    int marker = eventcode - EClearMarkerBase;

    /* (Range checking is done in handle_set_marker) */

    return handle_clear_marker(eventcode, event, idb, (void *) marker);
  }


  return 0;
}
@


1.42
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@d632 1
a632 1
         ChkError(fetchpage_new(b, browser_current_url(b), 1, 1)); /* ...then fetch the current URL instead.      */
d634 1
a634 1
      else ChkError(fetchpage_new(b, url, 1, 1)); /* Otherwise do what the user asked! */
d654 1
a654 1
      ChkError(fetchpage_new(b, url, 1, 1));
d1493 2
a1494 1
          int ignore = 0;
d1498 18
a1515 1
          if (p->onclick && *p->onclick) ChkError(javascript_href_onclick(handle, p, &ignore));
d1552 2
a1553 1
                                                   adj));
d1594 2
a1595 1
                                                   adj));
d1615 2
a1616 1
                                                 adj));
d1670 2
a1671 1
                                     1));
d1810 2
a1811 1
        /* over any of the window border tools.                   */
d1817 15
a1831 1
           mouse_set_pointer_shape(Mouse_Shape_Normal);
d2224 12
d2310 1
a2310 1
  if (from_menu || controls.ignore_adjust || !adjust()) ChkError(fetchpage_new(b, home, 1, 1));
d2541 1
a2541 1
      e = fetchpage_new(b, b->urlddata, 0, 1);
d2572 1
a2572 1
      if (!new_view) ChkError(fetchpage_new(b, url, 1, 1));
d2724 1
a2724 1
    else ChkError(fetchpage_new(b, path, 1, 1));
d2870 1
a2870 1
      else ChkError(fetchpage_new(b, temp, 1, 1));
d3186 1
a3186 1
  switch (b->bistate)
@


1.41
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@a49 5
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

d379 1
a379 1
//      Printf("PlugIn_Open filename: '%s'\n", plugin_return_string(m, &open->file_name));
d2906 1
a2906 1
                   FileType_HTML));
@


1.40
log
@Long overdue check-in of intermediate browser build, from continued "out
of hours" work. Forgot to add a few files last time too.

List dialogue box handler complete, and exclusion lists implemented
within the main browser code. Full documentation in Choices file.
Save routine knows all about it but is now getting very slow - must
come up with a better scheme; for now, it puts the hourglass on...

StripExtensions option controls auto stripping of filename extensions.

More sensible ancestor / frame selection for keyboard shortcut items
and the save dialogues - having selected a frame won't lock you into
it for F3 and related shortcuts now (input focus in URL writable ->
get ancestor details, input focus in frame -> get frame details). F4
works in frames. F5 now generally present for 'view source' with a
corresponding menu entry in the File menu.

Odd thing in later Res files; there's no action set for Adjust clicks
on the main ToolAction items in the button bar. Very odd. Nothing
appears to be set in v2.07 either, yet adjust-click works. Even
stranger. Anyway, added in the relevant event details (same as for
Select click in all cases) and this fixes the problem.

Background colours in the TABLE tag ignored the "don't print any
backgrounds" Print Style setting. Fixed. Meanwhile, the "black
text with no backgrounds" option wasn't getting this right either;
fixed this also.

Event logging implemented; HTTP errors and script output via.
window.print extension. No internal error output yet.

Faith:Never behaviour extended. If ever a server sends something with
no content type or an unhandleable type, the browser will try and get a
filetype from the URL. If it gets text or HTML, it'll render the file.
Else it'll save it. Hacks around IIS 4's lack of a content type field
in the Marketeye login stuff, and similar other slightly broken sites.
@
text
@d15 12
a26 10
/***************************************************/
/* File   : Handlers.c                             */
/*                                                 */
/* Purpose: Event handlers for driving the browser */
/*          front-end.                             */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 07-Feb-97: Created from Main.h.        */
/***************************************************/
d33 21
a53 3
#include "swis.h"
#include "kernel.h"
#include "flex.h"
a54 15
#include "HTMLLib.h" /* HTML library API, Which will include html2_ext.h, tags.h and struct.h */

#include "wimp.h"
#include "wimplib.h"
#include "event.h"

#include "toolbox.h"
#include "quit.h"
#include "proginfo.h"

#include "ToolAction.h" /* NOT the proper Toolbox header, as this needed OSLib... */

#include "Dialler.h"

#include "svcprint.h"
d105 2
a106 2
static int          handle_menu_or_toolbar (IdBlock * idb);
static void         handle_get_call_info   (browser_data ** bp, ObjectId * op, IdBlock * idb, ComponentId button);
d108 22
a129 18
static unsigned int handle_url_completion  (browser_data * b, char * url, unsigned int size, int key);
static unsigned int handle_protocol_cycle  (browser_data * b, int key);
static void         handle_url_submission  (browser_data * b, int key);

static void         handle_go_to_with_key  (browser_data * b, char c, int clear);

/*************************************************/
/* handle_menu_or_toolbar()                      */
/*                                               */
/* Returns 1 if an event came from a menu, else  */
/* 0 if it was a toolbar (only call this where   */
/* these are the only two possibilities!).       */
/*                                               */
/* Parameters: Pointer to the event ID block.    */
/*                                               */
/* Returns:    1 if the event came from a menu,  */
/*             else 0.                           */
/*************************************************/
d157 21
a177 26
/*************************************************/
/* handle_get_call_info()                        */
/*                                               */
/* For button handlers, a standard set of calls  */
/* is used for each handler - find out the       */
/* browser_data struct and toolbar, debounce any */
/* keypress and if this had to be done slab the  */
/* button manually.                              */
/*                                               */
/* Parameters: Pointer to a pointer to a         */
/*             browser_data struct which will be */
/*             filled with a browser_data * for  */
/*             the event's underlying browser    */
/*             window;                           */
/*                                               */
/*             Pointer to an ObjectId into which */
/*             the object ID of the toolbar from */
/*             which the event came is placed;   */
/*             Pointer to the event's ID block;  */
/*                                               */
/*             ComponentId of the button.        */
/*                                               */
/* Assumes:    Any pointer may be NULL, but the  */
/*             caller should check that returned */
/*             values are sensible.              */
/*************************************************/
d233 10
a242 11
/*************************************************/
/* handle_messages()                             */
/*                                               */
/* Deal with Wimp messages for reason codes 17   */
/* and 18 (type 19, acknowledges, are handled in */
/* handle_ack below). Parameters are as standard */
/* for a Wimp message handler.                   */
/*                                               */
/* This function farms off a lot of its          */
/* responsibilities to functions in Protocols.c. */
/*************************************************/
d421 8
a428 9
/*************************************************/
/* handle_ack()                                  */
/*                                               */
/* Handles UserMessage_Acknowledge from the      */
/* Wimp (message bouncing, etc.).                */
/*                                               */
/* Parameters are as standard for a Wimp event   */
/* handler.                                      */
/*************************************************/
d459 1
a459 27
/*************************************************/
/* handle_url_completion()                       */
/*                                               */
/* Take a partial URL string and look through    */
/* the hotlist then history titles then URLs for */
/* a match. The URL string is assumed to be in   */
/* the browser URL bar and will be written back  */
/* there.                                        */
/*                                               */
/* Once one match is found successive calls may  */
/* be made to cycle through the list generated   */
/* by the first search on a per-browser basis.   */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the URL bar;          */
/*                                               */
/*             Pointer to the URL to begin with; */
/*                                               */
/*             Size of the buffer the URL is in; */
/*                                               */
/*             Key number used - Ctrl+Tab will   */
/*             search forwards, add Shift to     */
/*             search backwards.                 */
/*                                               */
/* Returns:    1 if a URL was written back to    */
/*             the URL bar, else 0.              */
/*************************************************/
d461 32
a492 3
static unsigned int handle_url_completion(browser_data * b, char * url, unsigned int size, int key)
{
  #ifndef REMOTE_HOTLIST
d494 20
a513 4
    /* For Ctrl+Tab, do URL completion on the URL bar */
    /* writeble contents or cycle through previously  */
    /* found matches. For Ctrl+Shift+Tab, cycle       */
    /* backwards through matches, if found.           */
d515 2
a516 20
    if (key == akbd_TabK + akbd_Ctl)
    {
      if (
           b &&
           browser_find_matching_url((flex_ptr) &b->match_list,
                                     url,
                                     size)
         )
         return 1;
    }
    else
    {
      if (
           b &&
           browser_find_match_backwards((flex_ptr) &b->match_list,
                                        url,
                                        size)
         )
         return 1;
    }
d518 1
a518 4
  #endif

  return 0;
}
d520 15
a534 17
/*************************************************/
/* handle_protocol_cycle()                       */
/*                                               */
/* Cycle the protocol string at the front of a   */
/* URL through the known protocols. The URL      */
/* string is assumed to be in the browser URL    */
/* bar and will be written back there.           */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the URL bar;          */
/*                                               */
/*             Key number used - currently       */
/*             always akbd_TabK + akbd_Sh.       */
/*                                               */
/* Returns:    1 if the URL was changed, else    */
/*             zero.                             */
/*************************************************/
d565 12
a576 14
/*************************************************/
/* handle_url_submission()                       */
/*                                               */
/* Take necessary actions to submit a URL typed  */
/* into the browser URL bar. This may include    */
/* expanding it through a match search, adding   */
/* best guess protocol specifiers, etc.          */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the URL bar;          */
/*                                               */
/*             Key number used - currently       */
/*             always 0x00d.                     */
/*************************************************/
d665 6
a670 7
/*************************************************/
/* handle_keys()                                 */
/*                                               */
/* Deal with keyboard pressed events from the    */
/* Wimp. Parameters are as standard for a Wimp   */
/* event handler.                                */
/*************************************************/
d897 7
a903 8
/*************************************************/
/* handle_keys_from_browser()                    */
/*                                               */
/* Called when a Wimp key pressed event is       */
/* generated for a specific browser window.      */
/* Parameters are as standard for a Wimp event   */
/* handler.                                      */
/*************************************************/
d1156 7
a1162 7
/*************************************************/
/* handle_menus()                                */
/*                                               */
/* Deal with menu selection events from the Wimp */
/* (for forms etc.). Parameters are as standard  */
/* for a Wimp event handler.                     */
/*************************************************/
d1188 7
a1194 7
/*************************************************/
/* handle_scroll_requests()                      */
/*                                               */
/* Deal with Scroll Request events from the Wimp */
/* (e.g. for page up/down). Parameters are as    */
/* standard for a Wimp event handler.            */
/*************************************************/
d1223 7
a1229 7
/*************************************************/
/* handle_clicks()                               */
/*                                               */
/* Deal with mouse click events from the wimp,   */
/* for specific object IDs. Parameters are as    */
/* standard for a Wimp event handler.            */
/*************************************************/
d1307 7
a1313 7
/*************************************************/
/* handle_link_clicks()                          */
/*                                               */
/* Deal with mouse click events from the wimp,   */
/* on gadgets in the browser window. Parameters  */
/* are as standard for a Wimp event handler.     */
/*************************************************/
d1736 8
a1743 9
/*************************************************/
/* handle_drags()                                */
/*                                               */
/* A null event handler to handle dragging on    */
/* the page. Parameters are as standard for a    */
/* Wimp event handler, though only the last      */
/* parameter, a pointer to the browser_data      */
/* struct for which the drag applies, is used.   */
/*************************************************/
d2175 14
a2188 16
/*************************************************/
/* handle_close_browser()                        */
/*                                               */
/* Close a browser window, and frames within it. */
/*                                               */
/* Parameters are as standard for a Wimp event   */
/* handler. However, only the fourth parameter   */
/* is actually needed; this should be a pointer  */
/* to the browser_data struct for the browser    */
/* window that is closing. It must be an         */
/* ancestor. If a WimpPollBlock is pointed to,   */
/* it is used to determine if this was a "real"  */
/* window close and if so whether there's a      */
/* parent Filer window (for 'file:/' URLs) that  */
/* should be opened if Adjust was used.          */
/*************************************************/
d2239 6
a2244 6
/*************************************************/
/* handle_home()                                 */
/*                                               */
/* Handles clicks on the Home button. Parameters */
/* are as standard for a Toolbox event handler.  */
/*************************************************/
d2286 6
a2291 6
/*************************************************/
/* handle_back()                                 */
/*                                               */
/* Handles clicks on the Back button. Parameters */
/* are as standard for a Toolbox event handler.  */
/*************************************************/
d2320 6
a2325 7
/*************************************************/
/* handle_forwards()                             */
/*                                               */
/* Handles clicks on the Forward button.         */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d2354 6
a2359 6
/*************************************************/
/* handle_stop()                                 */
/*                                               */
/* Handles clicks on the Stop button. Parameters */
/* are as standard for a Toolbox event handler.  */
/*************************************************/
d2440 6
a2445 7
/*************************************************/
/* handle_reload()                               */
/*                                               */
/* Handles clicks on the Reload button.          */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d2550 6
a2555 7
/*************************************************/
/* handle_view_hotlist()                         */
/*                                               */
/* Handles clicks on the View Hotlist button.    */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d2687 6
a2692 7
/*************************************************/
/* handle_add_hotlist()                          */
/*                                               */
/* Handles clicks on the Add To Hotlist button.  */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d2757 6
a2762 7
/*************************************************/
/* handle_view_resources()                       */
/*                                               */
/* Handles clicks on the View Resources button.  */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d2835 6
a2840 7
/*************************************************/
/* handle_load_images()                          */
/*                                               */
/* Handles clicks on the Load Images button.     */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d2854 6
a2859 7
/*************************************************/
/* handle_view_source()                          */
/*                                               */
/* Handles clicks on the View Source button.     */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d2940 6
a2945 7
/*************************************************/
/* handle_go_to()                                */
/*                                               */
/* Handles clicks on the Go To button.           */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d2969 17
a2985 19
/*************************************************/
/* handle_go_to_with_key()                       */
/*                                               */
/* Handles going to a 'go to' state (merged      */
/* toolbar showing the URL writable instead of   */
/* the status display) with a given character    */
/* entered into that writable.                   */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the toolbar;          */
/*                                               */
/*             The character to append to the    */
/*             writable field's contents;        */
/*                                               */
/*             1 to in fact clear the writable   */
/*             before putting the character in,  */
/*             else 0 to append to existing      */
/*             contents.                         */
/*************************************************/
d3036 6
a3041 6
/*************************************************/
/* handle_go()                                   */
/*                                               */
/* Handles clicks on the Go button. Parameters   */
/* are as standard for a Toolbox event handler.  */
/*************************************************/
d3065 6
a3070 7
/*************************************************/
/* handle_cancel()                               */
/*                                               */
/* Handles clicks on the Cancel button.          */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d3095 8
a3102 10
/*************************************************/
/* handle_bistate()                              */
/*                                               */
/* Handles the EButtonBarBistate event, which    */
/* says that the bistate button should be        */
/* activated.                                    */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d3125 8
a3132 10
/*************************************************/
/* handle_tristate()                             */
/*                                               */
/* Handles the EButtonBarTristate event, which   */
/* says that the tristate button should be       */
/* activated.                                    */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d3162 6
a3167 6
/*************************************************/
/* handle_save_source()                          */
/*                                               */
/* Handles clicks on the Save button. Parameters */
/* are as standard for a Toolbox event handler.  */
/*************************************************/
d3180 7
a3186 7
/*************************************************/
/* handle_print()                                */
/*                                               */
/* Handles clicks on the Print button in the     */
/* toolbar of browser windows. Parameters are as */
/* standard for a Toolbox event handler.          */
/*************************************************/
d3199 6
a3204 7
/*************************************************/
/* handle_save_as_text()                         */
/*                                               */
/* Handles clicks on the Save As Text button.    */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d3217 7
a3223 8
/*************************************************/
/* handle_save_as_draw()                         */
/*                                               */
/* Handles clicks on the Save As Draw button.    */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d3236 7
a3242 8
/*************************************************/
/* handle_may_scroll()                           */
/*                                               */
/* Handles clicks on a MayScroll indicator.      */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d3284 11
a3294 12
/*************************************************/
/* handle_set_marker()                           */
/*                                               */
/* Remember the token and data offset of the     */
/* information displayed at the top of the       */
/* visible area for the ancestor browser.        */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler. 'void * handle' should contain */
/* 0 to Limits_Markers - 1to set the relevant    */
/* marker number.                                */
/*************************************************/
d3365 9
a3373 10
/*************************************************/
/* handle_jump_to_marker()                       */
/*                                               */
/* Jump to a given marker.                       */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler. 'void * handle' should contain */
/* 0 to Limits_Markers - 1 to set the relevant   */
/* marker number.                                */
/*************************************************/
d3422 11
a3432 12
/*************************************************/
/* handle_clear_marker()                         */
/*                                               */
/* Clear the remembered token and data offset of */
/* information displayed at the top of the       */
/* visible area for the ancestor browser.        */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler. 'void * handle' should contain */
/* 0 to Limits_Markers - 1 to set the relevant   */
/* marker number.                                */
/*************************************************/
d3503 8
a3510 10
/*************************************************/
/* handle_clear_url()                            */
/*                                               */
/* Clears the URL writable (like Ctrl+U),        */
/* assuming the input focus is in the relevant   */
/* place...                                      */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d3554 9
a3562 11
/*************************************************/
/* handle_show_history_menu()                    */
/*                                               */
/* Opens the history menu near the menu popup    */
/* gadget (acts as if that were clicked upon).   */
/* If the gadget doesn't exist, the opening      */
/* position is undefined.                        */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d3615 7
a3621 8
/*************************************************/
/* handle_show_info()                            */
/*                                               */
/* Put version number in program info window;    */
/* called on a ProgInfo_AboutToBeShown event.    */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d3651 6
a3656 7
/*************************************************/
/* handle_quit()                                 */
/*                                               */
/* Deal with a Quit_Quit event from any source;  */
/* parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d3690 8
a3697 9
/*************************************************/
/* handle_lose_caret()                           */
/*                                               */
/* Call to drag the input focus back to the      */
/* window in case it is lost.                    */
/*                                               */
/* Parameters are as standard for a Wimp event   */
/* handler.                                      */
/*************************************************/
d3711 1
a3711 1
    handle = task_from_window(i.window_handle);
d3723 1
a3723 1
      handle = task_from_window(caret.window_handle);
d3737 8
a3744 9
/*************************************************/
/* handle_dialler_display()                      */
/*                                               */
/* A null event handler to update the dialler    */
/* status display field, if present.             */
/*                                               */
/* Parameters are as standard for a Wimp event   */
/* handler.                                      */
/*************************************************/
d3753 9
a3761 11
/*************************************************/
/* handle_dialler_service()                      */
/*                                               */
/* Handles Message_Service messages from the     */
/* TaskModule module, which may be (for example) */
/* watching out for 'status changed' service     */
/* calls from the Dialler.                       */
/*                                               */
/* Parameters are as standard for a Wimp message */
/* handler.                                      */
/*************************************************/
d3774 1
a3774 1
  if (r->r[1] == Service_DiallerStatus)
d3784 13
a3796 14
/*************************************************/
/* handle_miscellaneous_event()                  */
/*                                               */
/* Handle any other user event not already       */
/* covered by other functions, passing it on if  */
/* we don't know what to do with it.             */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler. Only the event code and        */
/* ID block are of direct use here, though the   */
/* functions that this calls may use other items */
/* - these must be checked individually if this  */
/* may be important.                             */
/*************************************************/
@


1.39
log
@Intermediate check-in; building a browser from this gives you something
between 2.07 and 2.08. Only the Phoenix JavaScript resources are fully
up to date.

I *think* these are the changes since the last check-in:

When saved as a Draw file, horizontal rules were plotted one page width
too far to the right (wonder when that started happening?!). Fixed. In
addition, DrawFiles now accepted as OBJECTs - they weren't in the
recognised filetype list before. Doh.

Table size calculator tables_count_table would overestimate the number
of cells where ROWSPAN was present and there were other rows below the
one spanned. Fixed. In certain odd cases (e.g. optimised image exports
as HTML tables (!!) from the Gimp) this can save vast amounts of RAM.

Fixed problem where printing stops in the middle of a document. Redraw
engine pagination code was written in the days where lines couldn't
have gaps between them; they can now. If a gap fell at the bottom of
a page the engine would look down, see no line straddling or touching
the page edge, and assume there was nothing more. This case is now
correctly handled.

Made sure desktop and testbed Browse Res files had up-to-date Encoding
menus (v2.07 Phoenix has different menus from v2.07 Browse by oversight).

URL auto-completion piggy-backed onto manual completion code; any string
without '.', '/' or ':' in it gets run through completion to see if a
more meaningful item can be produced - "www" special cased out though.

New List dialogue box handler, used for proxy exclusions etc.
(incomplete), complete with appropriate Res file objects.
@
text
@d128 2
a129 2
  /* toolbars so the event certainly isn't from a toolbar.  */
  /* So if the call gives an error, return 1.               */
d181 1
a181 3
  /* If the object has an ancestor, the event was from a toolbar, */
  /* else it was from the window itself (e.g. due to a keyboard   */
  /* shortcut being activated).                                   */
d183 12
a194 1
  _swix(OS_Byte, _INR(0,1) | _OUT(1), 121, 0, &key);
d196 5
a200 1
  if (toolbox_get_client_handle(0, idb->ancestor_id, (void *) &b))
d202 2
d206 9
a214 1
    t = toolbars_get_upper(b);
d216 5
a220 6
    if (key != 255)
    {
      slab_gadget_in(t, button);
      debounce_keypress();
      slab_gadget_out(t, button);
    }
a221 3
  else
  {
    t = toolbars_get_upper(b);
d223 1
a223 7
    if (key != 255)
    {
      slab_gadget_in(t, button);
      debounce_keypress();
      slab_gadget_out(t, button);
    }
  }
a2885 1

@


1.38
log
@Another intermediate check-in, resources may not be up to date; items
most likely to be buildable are PhoenixJ and BrowseD. Done because I'm
about to make some rather dodgy changes to code otherwise unchanged
since the Customer browser and I may well have to back them out...

In Handlers.c now set the HFlags_HasBeenVisited bit of a token at the point
it is first clicked on. Means the link returns to a "visited" colour after
the highlight flash immediately. This will persist for as long as the browser
window is kept open on that page, though if the URL doesn't end up making it
into the history for whatever reason it would "unhighlight" on reload; fair
enough, really. The highlight is window-local, so there are no redraw worries
for other open windows with links to the same URL (though other same-URL
links on the same page aren't updated either).

All forms submissions force a reload (principally for eudoramail.com, but
many other sites have similar requirements).

!MkClean and !MkClnAll didn't correctly call the utility to strip Makefile
dependencies. Fixed.

On fetch closedown, fetchpage_preprocess_token could be called on a token
which had already been run through the preprocessor. Now checks the flags
word before proceeding.

Image RAM cache and garbage collection system implemented - see new Choices
file entries CollectAfter, FreeRAMLimit and UnusedImageLimit to get an
overview. This contains groundwork for JavaScript image array support.

More JavaScript support improvements. Any one window object will know its
parent, top, this, etc.; frames array working except for a frameset created
via. multiple documents; opener for something created with window.open is
currently not set and don't know why (property is being created, pointer to
valid object is held, but JS engine returns 'null'. Ho hum) - JSChain won't
work yet, then.
@
text
@d100 8
a107 3
static void handlers_get_call_info   (browser_data ** bp, ObjectId * op, IdBlock * idb, ComponentId button);
static int  handlers_menu_or_toolbar (IdBlock * idb);
static void handle_go_to_with_key    (browser_data * b, char c, int clear);
d110 1
a110 1
/* handlers_menu_or_toolbar()                    */
d122 1
a122 1
static int handlers_menu_or_toolbar(IdBlock * idb)
d149 1
a149 1
/* handlers_get_call_info()                      */
d175 1
a175 1
static void handlers_get_call_info(browser_data ** bp, ObjectId * op, IdBlock * idb, ComponentId button)
d445 212
a849 5
            /* For Ctrl+Tab, do URL completion on the URL bar */
            /* writeble contents or cycle through previously  */
            /* found matches. For Ctrl+Shift+Tab, cycle       */
            /* backwards through matches, if found.           */

a853 2
              /* Read whatever is in the URL bar writable */

d858 1
a858 24
              if (key == akbd_TabK + akbd_Ctl)
              {
                if (
                     b &&
                     browser_find_matching_url((flex_ptr) &b->match_list,
                                               url,
                                               sizeof(url))
                   )
                {
                  writablefield_set_value(0, i, URLBarWrit, url);
                }
              }
              else
              {
                if (
                     b &&
                     browser_find_match_backwards((flex_ptr) &b->match_list,
                                                  url,
                                                  sizeof(url))
                   )
                {
                  writablefield_set_value(0, i, URLBarWrit, url);
                }
              }
d868 1
a868 20
            char url[Limits_URLBarWrit];
            int  changed;

            /* Read whatever is in the URL bar writable */

            *url = 0;
            ChkError(writablefield_get_value(0, i, URLBarWrit, url, sizeof(url), NULL));
            url[sizeof(url) - 1] = 0; /* (Ensure termination) */

            /* Cycle the protocol specifier (adding one in if not already present) */

            changed = urlutils_cycle_protocol(url, sizeof(url));

            if (changed)
            {
              /* Update the URL writable */

              writablefield_set_value(0, i, URLBarWrit, url);
            }

d875 1
a875 69
            char url[Limits_URLBarWrit];

            /* Read the new URL from the URL bar writable */

            *url = 0;
            ChkError(writablefield_get_value(0, i, URLBarWrit, url, sizeof(url), NULL));
            url[sizeof(url) - 1] = 0; /* (Ensure termination) */

            #ifdef ALIAS_URLS
            // Not implemented yet...
            #endif

            /* If we're displaying a temporary file and the URL hasn't changed, */
            /* treat this as an attempt to reload the page.                     */

            if (
                 b->displayed == Display_Scrap_File   &&
                 !strcmp(browser_current_url(b), url)
               )
            {
              erb.errnum = Utils_Error_Custom_Message;

              StrNCpy0(erb.errmess,
                       lookup_token("CantReload:This page cannot be reloaded, as it was sent directly from another application.",
                                    0,
                                    0));

              show_error_ret(&erb);
            }
            else
            {
              #ifdef JAVASCRIPT

                /* If this is a JavaScript URL, the script will end up    */
                /* being executed. Tell the JavaScript interface routines */
                /* that it came from the URL writable.                    */

                if (javascript_url(url)) javascript_set_source(JavaScript_Source_URLWritable);

              #endif

              #ifdef HIDE_CGI

                /* If HIDE_CGI is defined, the URL bar may have only part of    */
                /* the URL in it - the CGI information could be stripped off.   */
                /* In that case, check if the URL matches the browser's current */
                /* one with the exception of the CGI stuff, and only do the     */
                /* fetch if not.                                                */

                if (
                     browser_current_url(b) &&                               /* If there *is* a current URL, and            */
                     !strncmp(browser_current_url(b), url, strlen(url)) &&   /* the URL bar matches the start of it...      */
                     strlen(browser_current_url(b)) > strlen(url) &&         /* ...but there's more of the current URL left */
                     browser_current_url(b)[strlen(url)] == '?'              /* ...and the first extra character is a '?',  */

                   )
                   ChkError(fetchpage_new(b, browser_current_url(b), 1, 1)); /* ...then fetch the current URL instead.      */

                else ChkError(fetchpage_new(b, url, 1, 1)); /* Otherwise do what the user asked! */

              #else

                /* Start the new fetch */

                ChkError(fetchpage_new(b, url, 1, 1));

              #endif
            }

d2248 2
a2249 2
  handlers_get_call_info(&b, NULL, idb, ButtonBarHome);
  from_menu = handlers_menu_or_toolbar(idb);
d2294 2
a2295 2
  handlers_get_call_info(&b, NULL, idb, ButtonBarBack);
  from_menu = handlers_menu_or_toolbar(idb);
d2329 2
a2330 2
  handlers_get_call_info(&b, NULL, idb, ButtonBarForward);
  from_menu = handlers_menu_or_toolbar(idb);
d2380 1
a2380 1
  handlers_get_call_info(&b, NULL, idb, ButtonBarStop);
d2453 1
a2453 1
  handlers_get_call_info(&b, &t, idb, ButtonBarReload);
d2471 1
a2471 1
  from_menu = handlers_menu_or_toolbar(idb);
d2560 1
a2560 1
    int from_menu = handlers_menu_or_toolbar(idb);
d2608 2
a2609 2
    handlers_get_call_info(&b, NULL, idb, ButtonBarViewHotlist);
    from_menu = handlers_menu_or_toolbar(idb);
d2702 2
a2703 2
    handlers_get_call_info(&b, NULL, idb, ButtonBarAddToHotlist);
    from_menu = handlers_menu_or_toolbar(idb);
d2789 1
a2789 1
    int            from_menu = handlers_menu_or_toolbar(idb);
d2791 1
a2791 1
    handlers_get_call_info(&b, &t, idb, ButtonBarViewResources);
d2849 1
a2849 1
  handlers_get_call_info(&b, &t, idb, ButtonBarLoadImages);
d2872 1
a2872 1
  handlers_get_call_info(&b, &t, idb, ButtonBarViewSource);
d2957 1
a2957 1
  handlers_get_call_info(&b, &t, idb, ButtonBarGoTo);
d3056 1
a3056 1
  handlers_get_call_info(&b, NULL, idb, ButtonBarGo);
d3084 1
a3084 1
  handlers_get_call_info(&b, NULL, idb, ButtonBarCancel);
d3118 1
a3118 1
  handlers_get_call_info(&b, NULL, idb, ButtonBarBistate);
d3150 1
a3150 1
  handlers_get_call_info(&b, NULL, idb, ButtonBarTristate);
d3185 1
a3185 1
  handlers_get_call_info(&b, NULL, idb, ButtonBarSaveSource);
d3204 1
a3204 1
  handlers_get_call_info(&b, NULL, idb, ButtonBarPrint);
d3223 1
a3223 1
  handlers_get_call_info(&b, NULL, idb, ButtonBarSaveAsText);
d3243 1
a3243 1
  handlers_get_call_info(&b, NULL, idb, ButtonBarSaveAsDraw);
@


1.37
log
@Everyone else seems to be checking lots of stuff in lately, so I've
decided to join in. This is an intermediate check-in and so not all
resources etc. will be up to date. You should be able to make Phoenix
and a debug build out of it. As a reminder, to make a JavaScript build:

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean. This now strips dynamic dependencies from the MakeFile
   automatically, to save you having to do it yourself.
 * Run one of the TaskObey files with the "J" suffix, e.g. !DeskBrwsJ -
   this uses the same .o directory for object files and exports to the
   same position in the Targets directory as the non-JavaScript build,
   but it does produce a unique binary in 'abs' and symbols table in
   'syms'.
 * Sourcing an appropriate !Run (with increased WimpSlot value), !Boot
   and About resource is done automatically.
 * Some, but not all of the !xxxD (debug) TaskObey files will make
   JavaScript versions in passing - check the JSUFFIX value on the Make
   command line parameters in the file.

This'll only work on RISC OS 3.1 due to the use of MemLib.

Here's the change list:

Included MNG icons in sprites files; added Sprites23 for some builds.
Added in ANT URL file icon (b28) derived from URI file icon, because
the Save dialogue can need it.

No, you do *not* need to define the same keyboard shortcuts in each
frame since the ancestor keeps the input focus and we've basically
dropped non-nested Wimp support. Maintaining no less than 4 lists of
identical shortcuts was a pain. Some Res files now only have the
lists in the main browser window and button bar objects (these two
are both required still).

Ursula build Markers button arrangement changed from 1x3 horizontal to
2x2 tilted, as in Phoenix, by popular demand.

Couple of hotlist bugs fixed; dragging an item and deleteing it with
Ctrl+X didn't terminate the drag, and deleteting an item underneath a
menu opened for it didn't close the menu.

'SendReferer' option added to all Choices files, all set to 'always'.
Put just beneath 'Clone' as it refers to header items, though really,
both Clone and SendReferer should probably be in the "Fetch controls"
section rather than "Multiuser environments and proxying"! Front-end
control of this is available.

In image_export_original, save_save_source, save_transfer_source and
save_save_object, flex_set_budge(0) was called to lock the heap but the
return value wasn't stored. flex_set_budge(1) was then used to unlock
the heap. All calls now remember and restore the old value, which is
both safer in case one calls another and allows the flex_set_budge
call in Main.c to have an application-wide meaning, as intended.

Some restructuring to the data load and RAM transfer sections of
Protocols.c; remote hotlist builds wouldn't allow files to be loaded
to browser windows before, and can now drop URL, URI or text files to
the Open URL dialogue.

New option "MinimumFontSize", lets the 'size' attribute of the 'font'
element be overridden. Default value is 1, to allow the full range of
values for the attribute. Setting to 7, for example, would give font
size 7 text at all times. Another new option, "ToggleOnXOnly", to
make Toggle Size only extend the window vertically (with Ctrl then
being used to toggle to genuine full size, rather than vice versa).
All Choices files updated to hold both of these options; only the
first has front-end control available (see debug build Res file).

JavaScript Document object exists; frames array etc. working. Can now
just about use "http://www.acorn.com/~ahodgkin/jschain/" but it does
abort after a bit - problems with frames again, I suspect. Is is pretty
slow, too. Can now press Escape to terminate a script.

Main.c erroneously referred to Controls file entry "StopWebServe" as
"StopWebProxy". Fixed.

Keyboard shortcuts to raise SaveFile are now possible in a general sense;
the code before was in the ToBeShown handler and just checked for a parent
component of -1. It then assumed "save frame HTML source". Now there's the
savefile_raise_from_shortcut function, which together with the seven new
event codes in SaveFile.h allows saving of HTML source and frame location,
export of links, images, backgrounds and the page as text or draw, to all
be invoked by keyboard shortcuts. Some Res files have some of these defined.

In reformat_check_height, the first check to see if setpara should be set
references a field in tpLast without checking if it is NULL. Whilst the
'line > 0' check should mean that tpLast wasn't NULL anyway, a direct
call to the function from outside of the reformatter might have tripped
up on this - the check for tpLast != NULL is now made.

Adjust-click on close icon in window showing file: URL attempts to open
the parent Filer window.

Reformatter used to try and find a selectable token if keyboard control
was enabled in a really stupid place - could make reformatting become
very slow if no selectables were present, especially if the page had a
few tables on it. Preprocessor now does this (since it goes through all
of the tokens anyway), the reformatter just doing a last check to ensure
no frames have obscured the selectable and if so, it tries to move it.
Done in the reformatter as generating a line array implies the data really
is visible.

Ctrl+Tab URL completion now builds a full list of matches from the hotlist
and history and can cycle through them (Ctrl+Shift+Tab stepping backwards).

Will give a real error rather than just "Data Abort" if it goes wrong
now. Someone somewhere is setting bit 30 of the error which confused
the replacement signal handler. Flag bits are now masked off (as they
should've been to start with).
@
text
@d1358 26
a1383 1
         browser_flash_token(handle, p);
@


1.36
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d631 1
d633 4
a636 2
            char url[Limits_URLBarWrit];
            int  changed = 0;
d638 1
a638 1
            /* Read whatever is in the URL bar writable */
d640 1
a640 3
            *url = 0;
            ChkError(writablefield_get_value(0, i, URLBarWrit, url, sizeof(url), NULL));
            url[sizeof(url) - 1] = 0; /* (Ensure termination) */
d642 1
a642 2
            /* Try and find something appropriate in the hotlist, */
            /* then the history.                                  */
d644 3
a646 3
            #ifndef REMOTE_HOTLIST
              changed = hotlist_find_match(url, sizeof(url));
            #endif
d648 24
a671 1
            if (!changed) changed = history_find_match(url, sizeof(url));
d673 1
a673 3
            if (changed)
            {
              /* Update the URL writable */
d675 1
a675 4
              writablefield_set_value(0, i, URLBarWrit, url);
            }

            key = 0;
d2051 8
a2058 3
/* is used; this should be a pointer to the      */
/* browser_data struct for the browser window    */
/* that is closing. It must be an ancestor.      */
d2063 41
@


1.35
log
@All !Run[D], Choices, Messages, Controls and Res files are up to date.

RefoKeep and RefoHold options added to, respectively, try and maintain
the line at the top of the visible area when reformatting, and not shrink
the vertical extent at the start of a reformat to try and avoid flicker
to the top of the page and back down again when RefoKeep is on. Choices
front-end implemented, which also allows RefoWait and RefoTime to be set.
Unfortunately for various reasons this doesn't help the page jumping when
unsized images come in (but RefoHold can improve matters...) - roll on
the image history.

DragToScroll and NoScrollBars options added for frames; included new
pointer type, Mouse_Shape_DTS, so relevant Controls file entries done
and Sprites[22] files updated as required. Noticed some builds have
a low-res ptr_link with a mask - mask removed.

Named anchor following fixed up somewhat - anchors near the bottom of
the page shouldn't be displayed, and then pulled down when the fetcher
releases null polls and ensures the y extent is correct (this through
implementing the min_height field in the browser_data structure).

RefoHang was never implemented and there seems little point to it now,
so the entry for it has been removed from the global choices structure
and all Choices files.

Markers menus should work properly now (in last check-in they would not
update correctly if Adjust was used on the entries).

URI handler usage now a lot more sensible, with configuration of how the
browser uses the module from both a Utils menu submenu (sic) and the
Choices dialogue.

Slightly dodgy 'hang around waiting for user input' stuff for the Cookies
dialogue box: All fetches are suspended; the fetcher remembers some info
about its state at the time the cookie came in, and restores it later; it
will only do this for one fetch at a time. It's necessary to single-thread
the fetcher at this point anyway, since other fetches may have a
dependency on the cookie that is hanging in mid-air at that point. As part
of this, some of the fetcher code has been split out into separate
functions (to try and 'black box' the code a bit). Anyway, Cookie Query
dialogue box now implemented with appropriate Choices file entry and
UI work in the Choices dialogue box.

Phoenix build Choices rearranged. Can now choose when the image history
is saved from the front end. Added also MSIE 4-style table option menu
for JPEG support (OS only, OS if it can handle it, internal only).

Should be a bit faster at loading the history - though 95% of the time
is spent in SWI URL_ParseURL. URL descriptions are stored more
efficiently as part of this - one malloc block instead of several
small blocks. The minimum block size for malloc blocks typically leads
to a significantly smaller startup wimpslot depending on the visit
history size.

Nasty bug in image system fixed. If an image size came in and a reformat
was to take place, the line the image lies in is found and the reformat
progresses from there. Unforunately, this didn't check to see if the
token can't be found in the line list, so it'd reformat from the top
of the page...! This would happen if, for example, an image halfway down
the page came in whilst a reformat for an image higher up had just begun.

In Choices.c, made choices_set_timetype_field, choices_set_uri_field,
choices_set_plugin_field, choices_set_cookie_field, and
choices_set_jpeg_field static (so they're not declared in Choices.h now).

Two memory leaks plugged in URL comparison routines in URLutils.c
(calling free() url_description instead of urlutils_free_descripton()).

Client pull reload handler was setting the reload flag if reloading
the same page, but forgetting to turn on reload_lock so
fetchpage_postprocessed was clearing the reload state... Similarly,
Ctrl+Shift+SELECT-Click on a link when the Controls file 'UseSmall'
entry is 'no' would not have reloaded as it should. Both fixed.

Frames shouldn't be so keen on acquiring horizontal scroll bars and never
letting them go when their width is decreased now. Frames set up for
'scrolling="yes"' will not start with no scroll bars and then gain them
shortly afterwards, causing flicker and two reformats - they'll start
with, and continue to hold, both scroll bars.

Pointer shouldn't flicker when over a frame border whilst other fetches
are progressing now.
@
text
@d720 10
d1381 4
d1418 4
d1438 1
a1438 1
            if (!used)
d1440 4
d1476 4
d1499 2
d1643 2
a1644 1
        /* longer over the original window.                       */
d1647 2
a1648 2
             info.window_handle != browser_scrolled->window_handle &&
             info.icon_handle   >= -1
d2030 1
d2032 4
a2035 1
/* handler.                                      */
d2064 9
d2108 9
d2128 1
a2128 1
/* handle_forward()                              */
d2143 9
d2285 9
d2606 9
@


1.34
log
@This is NOT a 'final' version of anything in particular. I'm checking it
in as I'm about to start playing around with low level window handling
(as part of the thing mentioned at the bottom of this log) - this could
screw things up quite badly if it goes wrong! =8*P

Consequently, I advise you not to check this out over your working sources,
and preferably not to check this out at all.

Markers system - events defined in MiscEvents.h will make Browse remember
where it is on the page. This position can be jumped back to later.
Some builds will have defined keyboard shortcuts Ctrl+Shift+F5 through
F8 to set a marker, and Ctrl+F5 through F8 to jump to a marker.

The front-end for the above now has gadgets 0x80 upwards on the Toolbar or
a set of menus (see Menus.h). Noticed an omission in copy_toolaction_info()
(didn't copy the gadget state) in passing; fixed.

browser_top_line() now works properly, as part of the above, but it'll be
slower than before. If flagged to only find a complete line, it'll do just
that, but whereas before this would require any tables that it looked
inside to be wholly visible, tables can now be partially visible and have
lines inside that are fully visible. This should help the Find function
too. There is a new call, browser_top_line_offset, which works as
browser_top_line but also returns a vertical scroll offset in the found
line (used for more accurate marker position). browser_bottom_line[_r]
turn out to never be used, even by the keyboard control routines, so they
have been removed from Browser.c (rather than spend a lot of time and
effort fixing them).

browser_show_token erroneously subtracted 1 from a particular coordinate
when calculating the y scroll position, which could lead to single pixel
page creep using the markers system. Corrected.

The View Resources button (see Toolbars.h) has been finally implemented,
insofar as it fetches the resources file to the current browser page (or
to a new window if Adjust is used, Controls file settings permitting).

menus_toggle_bars did not take account of the toolbar lower window border
edge correctly. It does now.

The reformatter has a prototype system to keep the vertical page position
when reformatting. This was coded about 5 minutes ago, and is not likely
to be reliable...
@
text
@d45 2
d94 4
d339 2
a342 1
    case URI_MDying:                             ChkError(protocols_auh_got_dying(m));            break;
d1471 1
a1471 1
              if (ctrl) handle->reloading = 1;
d1536 17
d1571 2
d1612 30
d1647 1
d1649 1
a1649 1
        /* Reset the various state variables ready for the next drag */
d1651 4
a1654 4
        browser_resizing = NULL;
        resizing_row     = -1;
        resizing_col     = -1;
      }
d1685 3
a1687 2
    /* A parent frame has got the click, so it must be in the border between */
    /* other frames in its defined frameset.                                 */
d1876 117
d2984 49
d3093 14
d3233 14
d3553 5
a3557 1
/* event handler.                                */
@


1.33
log
@Programming warehouse link removed from all hotlists - the page has gone.

Some compile-time hacks in place to use MemLib, a dynamic area based
malloc replacement which shrinks its heap when possible. All builds
have these switched off at the moment. Seemed to work with just Browse,
though there would be problems with message blocks stored in dynamic
areas because of the Wimp's '&3800000' check - however, it failed when
HTMLLib was made to use it, too. Don't know why yet.

ItemInfo.[c/h] source added, with Res file additions for testbed Browse
and Phoenix.

Small fetch windows now work properly regardless of toolbar settings
in the Choices.

Reload now reloads all images too, rather than only reloading them for
as long as the main page was being fetched.

Added a simple 'Find' facility.

Realised that event handlers in eventlib are called in reverse order
of registration, so the miscellaneous event handler is now registered
first rather than last.

Multiuser code added (most only active if SINGLE_USER is undefined). As
part of this, hotlist code now knows about read-only items (done for the
Customer-style 'Resources' file, but works generally anyway).
handle_add_hotlist doesn't try to save the hotlist itself anymore (the
hotlist_add function does all that through hotlist_modified anyway).

Customer build Choices and Controls updated slightly (e.g. ClaimHelp
off, hotlist to save on quit only).

Customer build now uses Phoenix-style buttons. Sprites files which
worked at the time (but will probably be out of date now) and included
most of the original Customer-style sprites are in
'Utils.Icons.Customer'.

Choices, Messages and Res files for all builds now stripped down to only
single user items or single plus multiuser for Customer build and testbed
build. Before, all contained a few multiuser bits in at least the Choices
file if not more.

Grammatical error ("Fetching frames contents" (sic.)) corrected in
default message, Toolbars.c, and all of the Messages files.

Customer build brought back to a servicable level (including
implementation of the Find dialogue box with animation and fixing
up authorisation and 'Stop' state in the tristate). Quite a few
missing #ifndef REMOTE_HOTLIST bits from hotlist code added...

Customer build will not use <Choices$Write> or Boot:Choices for any
file finding now. UseProxy defaults to 'yes', MaxImages to 2. Res
file includes Proxy Address setting (save_save_choices() now writes
the ProxyAddress line).
@
text
@d66 1
d70 1
d2334 58
a2391 1
  return 0;
d2792 1
d2809 194
d3306 2
d3323 34
@


1.32
log
@RefoSingle option added to Controls.

Precautions taken in table code to avoid divide by zero errors.

Framesets defining more frames than the frameset implies, for whatever
reason, should never cause a crash now - just report a 'Frames definition
is badly nested' error (if STRICT_PARSER defined). Along the same lines,
in a single document defining a set of nested frames, two /FRAMESETs in
succession could cause a fairly nasty crash. Fixed.

TIFFs do not get loaded by double-click now.

If holding down SHIFT to save a link contents to disc, you can also hold
down CTRL to bypass the cache (sets the browser's reloading flag). Noticed
when testing this that windows_create_browser didn't take account of the
Controls file 'UseSmall' entry when adjust-shift-clicking on links. It
does now.

There is now a complete and up to date set of interactive help messages
built into the Ursula, Customer and Phoenix build Res files.
@
text
@d77 1
d217 14
d299 17
a315 2
    case Wimp_MDataLoadAck:  ChkError(protocols_atats_got_data_load_ack(m));  break;
    case Wimp_MRAMFetch:     ChkError(protocols_atats_got_ram_fetch(m));      break;
d317 2
a318 4
    case Wimp_MDataOpen:     ChkError(protocols_atatl_got_data_open(m));      break;
    case Wimp_MDataLoad:     ChkError(protocols_atatl_got_data_load(m));      break;
    case Wimp_MDataSave:     ChkError(protocols_atatl_got_data_save(m));      break;
    case Wimp_MRAMTransmit:  ChkError(protocols_atatl_got_ram_transmit(m));   break;
d322 2
a323 2
    case Browser_Message_PrintError:   ChkError(protocols_pp_got_print_error(m));    break;
    case Browser_Message_PrintTypeOdd: ChkError(protocols_pp_got_print_type_odd(m)); break;
d327 1
a327 1
    case Wimp_MDataSaveAck:  ChkError(protocols_multi_got_data_save_ack(m)); break;
d331 3
a333 3
    case URI_MProcess:       ChkError(protocols_auh_got_process(m));         break;
    case URI_MReturnResult:  ChkError(protocols_auh_got_return_result(m));   break;
    case URI_MDying:         ChkError(protocols_auh_got_dying(m));           break;
d337 1
a337 1
    case Message_ANTOpenURL: ChkError(protocols_aub_got_open_url(m));        break;
d341 6
a346 6
    case Message_PlugIn_Opening:        ChkError(plugin_got_opening(m));         break;
    case Message_PlugIn_URLAccess:      ChkError(plugin_got_url_access(m));      break;
    case Message_PlugIn_StreamNew:      ChkError(plugin_got_stream_new(m));      break;
    case Message_PlugIn_ReshapeRequest: ChkError(plugin_got_reshape_request(m)); break;
    case Message_PlugIn_Status:         ChkError(plugin_got_status(m));          break;
    case Message_PlugIn_Busy:           ChkError(plugin_got_busy(m));
d372 16
a1934 1
  int            shift;
d1938 2
d2052 2
a2053 4
    /* If not going to a new view, set the reloading flag and */
    /* get the URL; if this is fails for whatever reason,     */
    /* don't forget to clear the reloadng flag before         */
    /* reporting the error.                                   */
d2057 3
a2059 1
      b->reloading = 1;
d2062 1
a2062 5
      if (e)
      {
        b->reloading = 0;
        show_error_ret(e);
      }
d2128 19
a2172 4
    browser_data * b;
    char           path[Limits_URL];
    int            from_menu = 0;

a2304 7

      /* If required, save the hotlist */

      if (choices.save_hotlist == Choices_SaveHotlist_Always)
      {
        show_error_ret(hotlist_save(lookup_choice("HotlistSave:Browse:User.Hotlist",0,0)));
      }
d2875 19
d2896 2
a2897 1
                                lookup_token("Version:(Unknown!)",1,0)));
@


1.31
log
@*Don't* try to load FilterManager 0.18 in !Run[D] files. Requires
WindowManager 3.98. Sets URI handler environment variables for
http, ftp and gopher.

Fixed 'doesn't reformat for unsized images' bug - only happens when the
deferred reformatter is enabled, hadn't remembered to check this in my
debug build where this is turned off. Oops.

Caret position in forms could get left behind despite attempts to rectify
this in v1.31 - now fixed (and faster, fortunately).

Hourglass + percentage displayed for History and Image History when
loading - it can take a while for very big histories, though in
practice you only see the visit history loading (has to do a lot
more work, and is thus quite a bit slower than the image history).

POST forms worked when targetted to frames, but were broken when
not targetted! (Forms data inherited from one browser to the same
browser; ended up freeing the flex block...). Fixed.

Now support 303 response code (redirect to GET). Treated as 301, i.e.
not support if STRICT_PARSER is defined, otherwise drops through to
the 302 handling code.

Pointer shouldn't get stuck in odd shapes when going to a new page now;
it gets reset to a standard shape every time the null handler that
checks the position is called, though (whether or not the handler thinks
the pointer is over a different token, if that token is NULL, it sets
the standard shape). A possible work around would be for a browser to
remember the pointer shape too; that's for the future, though.

Early stage table formatting functions could blow themselves apart if
tables_count_table decided there were no rows, columns or both. A
net table size of zero cells is now dealt with; slow, partial table
fetches in multiple windows with image loading turned on will now
*hopefully* be stable, where v1.31 would have bombed out repeatedly.

A nested frameset within one document will now inherit the border
width (frame spacing) and border colour of its parent. This is done
by copying the maxlen and indent fields of the parent token over
the child, and note it's done in the browser (fetch_preprocess_token),
not HTMLLib.

Border colour on a FRAMESET now used, with the first colour on any
FRAME within it overriding, as in NN 4 and MSIE 4.

<LI> bullets really do stick to the text next to them now (I'd done
that in an experimental piece of code and forgotten to merge it back
before the last check-in).

Browse$HotlistURL/URIFile and Browse$HomeURL/URIFile now work from
_TaskName in the Messages file, and are thus of the generic form
<App>$HotlistURL etc. - Docs.Notes and Docs.User updated appropriately.

Event 0x11d00 through to 0x11d7f will make the browser look up Controls
file entries 'JumpTo00' through to 'JumpTo7f' and read a URL from them.
This will be fetched in the ancestor window of the source of the event,
or a new window if such an ancestor can't be found [for Daytona demo].

NB: Nasty frames-related crash at http://www.teledanmark.dk/menu/start.htm
is *not* fixed in this source. NOBR is not supported.
@
text
@d1416 4
d1425 14
a1438 5
            else ChkError(windows_create_browser(p->anchor,
                                                 NULL,
                                                 NULL,
                                                 NULL,
                                                 Windows_CreateBrowser_SaveToFile));
@


1.30
log
@Check for WindowManager 3.97 and ensure Unicode$Path is set in all
!Run[D] files, don't set the Alias$@@PrintType_FF4 variable, and updated
Customer build ROM obey file variants. Various other changes to
the Run files for new module versions, updated paths to support
new positions of choices, hotlist and histories (see later), etc.

!Sprites[22] files hold small !app icons for some variants, and
an ic_browse sprite. Some variants now have a Sprites and Sprites22
file instead of just Sprites, with the former containing various
mode 12 or 15 specific sprites.

Text files dragged to the URL writable are treated as ANT URL files. This
relies on URLBarWrit (Toolbars.h) being a unique ID, which it should be,
but beware of the Hotlist and Choices numberspaces...

INPUT TYPE=BUTTON supported. Form items without a FORM tag are now shown
(as MSIE 4, but not NN 4).

'*', '-', '@@', '_' and '.' are not escaped when submitting forms now. The
Web interface to the IMDb now works.

INPUT TYPE=HIDDEN items will not affect the line height anymore - so
http://www.hotmail.com/ now has correctly aligned writable icons, for
example. Similarly, TAG_FORM and TAG_FORM_END items could push up
line height and don't anymore.

HRs with a specified pixel width will now influence the size of a table
cell (they didn't before).

BRs now checked by tagno field when the browser needs to know something
was an actual BR tag rather than just a line break signal, and by the
style bit entry when only the indication of a line break is required.

Table widths of 0 or 0% are ignored.

Trace.c updated to report height and background fields in a table_stream.

fm_putsl() writes a terminator into the string; the Forms.c routines were
calling this for displaying INPUT TYPE=PASSWORD fields using the FE_PassCode
literal string (a line of stars). This write into a read only data area
would make the debugger fault the access. A local char array is now used
instead, to get round this (note the use of var[]=literal rather than
var[sizeof(literal)]; strcpy(var, literal) due to some weird compiler bug
that copies the wrong thing into 'var' under some (undefined...)
circumstances).

Text areas don't scroll back to the top line when clicked in anymore;
single line writables don't scroll back to the left either. When
reentering a text area from 'above', the caret appears at the top line
rather than 'somewhere further down'...

ARROWS_MOVE_OUT compile time option at the top of Forms.c defines whether
you must press Tab/Shift+Tab to move between writable fields in forms or
if up/down will drop out of them, though if keyboard control is on this
is enforced (or you get trapped inside the form!).

urlutils_filetype_from_url now uses MimeMap module.

If fetcher is told a page is text, it'll check for a filename extension and
may choose to use this instead (e.g. it may find it's HTML instead). This
is to try and get around duff servers... (e.g. http://www.batalarms.co.uk/).

Save dialogues shouldn't flicker when options that don't change the
filetype are selected (before, the draggable sprite was always reset for
each selection). Noticed the erroneous setting of a static variable in
SaveFile.c by a call to this by SaveObject.c, and so added a flag to
savefile_set_filetype to deal with this - would have been possible to get
the wrong filetype sent to applications or at best the wrong filetype
sprite in the dialogue without that.

The caret shouldn't jump out of a form back to the URL writable if the page
reformats now.

Table background colours now supported (as in the colour you see in the
border space if the cellspacing is large enough; this is as in MSIE, not
as in Navigator). Drawfile output routines updated accordingly.

Corrected erroneous use of wimpt_dx() / wimpt_dy() in a couple of places
in Images.c, which meant that (say) 1x1 images didn't work correctly in
medium resolution display modes.

Now have support for save as text (component ID and event 0x12) and save
as Draw (component ID and event 0x13) buttons. Dubious conditions for
greying and ungreying the print, save source and view source buttons and
menu options sorted out as part of implementing the same for the two new
buttons; added greying out of their associated menu items in passing.

Turned kerning on in draw file objects (does mean a rather heinous
increase in file size, but this is the only way to ensure the draw file
matches the visible page).

Comments before functions in SaveDraw.c are now complete and up to date.

Image and visit histories now generate a crude hash number to speed up
searching for items. It does give a speed increase, though it's a
disappointingly small one.

Issue of left/right margins and cellpaddings sorted out. Now have
redraw_left/right_margin for finding out the basic gap you must leave.
redraw_left/right_gap then gives any extra indentation for LI, BLOCKQUOTE
or whatever. The last two can be subtracted from the display width to
get an available page width for any section of text. Note that
redraw_left_gap replaces redraw_margin. The redraw_start_x function
uses the above to work out where a line's left hand edge should be,
taking account of left/right/centre alignment. HRs have been fixed now
(they were quite broken in v1.30, I think) based on this new model and
the behaviour of MSIE/NN 4.

Fixed width of cells with no contents - cell padding values wouldn't
have worked properly as the reformatter returns 0 rather than the left
hand margin size if given no stream.

Removed FM_Absolute flags for Font_Paint (spotted by DBrown) - sets bit
2, which is reserved...?

IMG width and height in % terms now works correctly; a % of available
width (after margins and indents) or height on the main page or for
a table cell, if the image lies in one. Because of the chicken-and-egg
problem with the latter, the cell must specify a width and/or height
for things to work properly. If this is not done, you'll usually end
up with a 1:1 scaled image (as in Navigator 4, rather than ending up
with no image or even no cell (!), as in MSIE 4).

HEIGHT attribute on a TABLE tag is supported, but only in a crude
fashion; the extra height (if there is any) is distributed over the
rows in a linear fashion. This is probably all you have to do in
practice, but I haven't checked. To maintain a notion of min/max
height as well as width would of course require a great deal more
work...

If using client pull to reload a page with a fragment ('...#name')
specified, then the reload wouldn't work on the same page; it'd just
jump to the fragment position. This won't happen if b->reloading is
set now (so works in conjunction with client pull on the same page
forcing a non-cached fetch). Similarly, if POSTing to such a URL,
a fetch will proceed (both these fixes done originally for
http://jupiter.beseen.com/chat/rooms/g/1678/).

browser_inherit split to browser_inherit and browser_inherit_post_data;
the code for the latter didn't clear any post_data in the child before
copying from the parent either, and could cause flex errors (now fixed).

Res file for Ursula ('Desktop' Browse) build tweaked - bits in the
font choices dialogue renamed, and button bar rearranged to hold the
new Save As Draw button. Other builds have had Save As Draw and
Save As Text buttons added, or not, depending upon availability of
suitable sprites, required UI simplicity, etc.

Now have:

  Browse$ChoicesFile
  Browse$ControlsFile
  Browse$ChoicesSave
  Browse$ControlsSave

(the last two are new) for loading and saving of the Choices or Controls
files. If unset, <App$Dir>.Choices or <App$Dir>.Controls will be set.
E.g., you could set Browse$ChoicesFile to be:

  <App$Dir>.Choices,Choices:WWW.(app).Choices

for loading and

  <Choices$Write>.WWW.(app).Choices

for saving. (The browser never saves Controls at the moment, so the
relevant variable above isn't effectively implemented, but could be
in future). Similarly, to support asymetric loading/saving of the Hotlist,
there are HotlistSave, HistorySave and ImageHistorySave entries in Choices
to complement HotlistPath, HistoryPath and ImageHistoryPath (which are used
for loading). save_save_choices will create directories as needed to obtain
the given path (and has also been fixed in various areas that hadn't been
tested out until now; e.g. zero termination of the AppName$ChoicesFile
variable expansion...). !Run[D] files updated appropriately.

Table widthing code rewritten. Slower, but a lot better on the whole.
Still has some problems - still needs a final 'make sure nothing is
below minimum width' scan, which it should be possible to do without.
No time to fix this at present!

The reformatter will now 'glue together' an LI token followed by any
non-LI token; so a bullet point followed by an item should not be able to
have a line break inserted after the bullet because of very tight width
constraints (it could before - yuk...).

'about:' brings up a page about the browser and any Plug-Ins, as with
Navigator (for example).

URI files support titles, as per spec. version 8. Saving a current
location to the Hotlist will thus give a sensible title now (unless
you're in a frame, so there's no title to get...). Of course, v1.00
files without a title still work.

Note that NOBR is *not* supported in this build and this combined with
the new table widther may cause problems on some sites (e.g. Microsoft's
home page!).
@
text
@d2956 32
@


1.29
log
@Not all resources are up to date in this check-in, and documentation
both within source and stuff in 'Docs' is out of date or missing - I
was very pushed for time on this one... Hopefully will do another
'tidy up' check-in before close on Friday; until then, beware of
anything other than the Ursula (Desktop browser) build. Anyway...

Export As Draw done. As part of this, FONT SIZE and SUP / SUB adjustment
of font size is done in fm_token_font_info rather than fm_find_token_font.

Bullets and switches are plotted as indirected sprite items, rather than
indirected text + sprite items - this relied on being in a redraw loop to
pick the sprites up from the local pool (failed during printing).

URI files now have a LF line ending rather than CR... '*' recognised
as an empty field when loading via. RAM transfer now (only worked for
loading from disc before).

Gave placeholder bounding boxes 4 OS units more minimum extra gap
vertically and reduced horizontal addition to this value * 1.5, rather
than * 2 (see reformat_get_placeholder_size).

Background image tiling starts at ymax - h + 4, rather than ymax, so
there isn't the bottom line of pixels from the top tile always present
at the top of the window. The '+4' is for caution's sake.

Can now save a frame's HTML source, that of its parent or its ancestor,
and the same for the URI pointing to those documents - see Menus.h for
the relevant component IDs that should lead to the SaveFile dialogue.

Have hopefully fixed timeout = 0 values (i.e. 'forever') on things
like LinkTo; before, image fetches could override the state (so you'd
only ever see brief flickers of a given URL as the pointer went over
a link).

Save File dialogue will remember the state of option or radio buttons
for a given parent component origin and restore that state when the
dialogue is next opened from the same place (stops turning on saving
as a URL file also turning on 'save background images' for Draw file
export, etc.).

Use of a META tag to reload the *same* page now sets the 'reloading'
flag in the browser so that it doesn't go through a proxy - otherwise
pages which are meant to update periodically through client pull
don't work, as they keep coming out of the cache.

Can now handle images specifying just a width or height in the HTML
(other dimension is scaled accordingly, but note that the placeholder
size must still be 'dumb' until the image data comes in). An image
will now override an image history size entry for the same entry
with a different size.
@
text
@d66 1
d877 1
a877 1
          HStream * map = ancestor->selected;
d1880 6
a1885 1
  /* Is Shift being pressed? */
d1887 2
a1888 2
  _swix(OS_Byte,
        _INR(0,1) | _OUT(1),
d1890 1
a1890 2
        121,
        128,
d1892 1
a1892 1
        &shift);
d1927 5
a1931 3
  /* Broadcast an AppControl message to stop any further     */
  /* activity in WebServe - this will eventually be directed */
  /* straight at WebServe rather than broadcast...           */
d1935 10
a1944 4
  if (
       (
         controls.stop_proxy &&
         !shift
d1946 3
a1948 7
       ||
       (
         !controls.stop_proxy &&
         shift
       )
     )
     ChkError(utils_stop_proxy());
d2241 1
a2241 1
        show_error_ret(hotlist_save(lookup_choice("HotlistPath:Browse:User.Hotlist",0,0)));
d2612 1
a2612 1
/* handle_save_src()                             */
d2618 1
a2618 1
int handle_save_src(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
d2624 1
a2624 1
  if (is_known_browser(b) && b->source) ChkError(savefile_open_for(b, idb->self_id));
d2643 39
a2681 1
  if (is_known_browser(b)) ChkError(print_open_for(b, idb->self_id));
@


1.28
log
@There are a few known significant problems with this code but it's being
checked in so the Choices can be worked on. Note that Res files etc. are
not up to date across all builds. Progress is as follows...

Bug report prompted me to do this - now ignore <p> tags straight after
<li> tags, so '<ul><li><p>Some text' works as the author (or automatic
generator, more commonly) intended.

A <p> tag before a table will be acted upon now (it was ignored before).
Something like <li><p><table...> will give a line break and paragraph
space after the <li> despite the changes mentioned above, as in other browsers.
Both browsers differ from Navigator, where the table appears alongside
the <li> tag.

Multiple BR tags work as in MSIE / Navigator (they don't collapse to
zero height anymore).

For the above, line height (and so, <br><br> or <p> spacing) is now
calculated inside reformat_text_line_height, and is used with either
a token to get the text height at a given size (e.g. for general line
spacing or multiple BR tags) or NULL for normal size text (e.g. for
P spacing, though this value is in practice later scaled by 7/8ths in
reformat_check_height). Note this behaviour is exhibited by MSIE 4;
v3 gave two BRs the same spacing as one P (i.e. not font size
dependent).

Save dialogues can have an option button or couple of radios to
switch between various formats (e.g. URI or URL, sprite or original
format). See 'Docs.Notes' for more. The back-end to this is now
implemented (i.e. at the moment, save as URI or URL, save as original
image format). Note that when saving background images, a leafname
based on the original fetch URL is now offered rather than a generic
'Background'.

Internal URL scheme changed to be all lower case, so relativisation
through URL_Fetcher still makes sense... :-/

Holding down 'shift' when clicking on stop reverses the interpretation
of the Controls file 'StopWebServe' entry.

Fixed row / column count for exporting tables as text; fixed a few
bits and pieces of internal URL scheme stuff which got broken when
HTMLLib started using URL_Fetcher's relativisation.
@
text
@d2634 1
a2634 1
  if (is_known_browser(b) && b->source)ChkError(print_open_for(b, idb->self_id));
@


1.27
log
@Fixed some glitches in the modified status bar code (e.g. status inference
wasn't working properly).

Shift+Toggle size always opened to not obscure the icon bar. If CMOS is
set to always show the icon bar, then Shift+Toggle size is meant to
reverse sense and open to absolute full size. It now does this.

!Run[D] files now require URL 0.22, HTTP 0.64, FTP 0.22, Gopher 0.08
and File 0.32.

Minor overhaul of 'Docs.Notes' (with 'Docs.User' similarly updated) to
include a few new bits and pieces.

Timeout values of 0 now mean 'forever'. Plug-in status messages now have
their own timeout setting. New Messages token 'Actv' for extra info when
a status message times out and the status line drops to 'Viewing' or
'Ready' when there is still a Busy state registered by the Plug-in.

Small Fetch windows don't become visible briefly for Plug-in fetches
when the fetch is complete (for SeeFetches:no, where these windows
should be hidden all the time).

WebServe may be controlled through the Browse front-end via.
Wimp_MAppControl reason code 4 (Wimp_MAppControl_Configure). Note the
renaming internally of 'WebServ' or 'WebServe' has been changed to
'Proxy' (with lower case equivalents where relevant); proxy name
and starting details come from the Messages file 'ProxyName' and
'ProxyComm' tokens. More in 'Docs.Notes'.

Res files updated for image history and PRE/TT font aspect ratio
choices. 'Don't expire' labels changed to 'Expire' (oops, didn't
notice the change in the development Browse's Res file when I
updated all of the others until now...).

When printing, Wimp_PlotIcon appears to ignore R4 and R5, plots
'somewhere' on the page, and tries to get the sprite from the global
pool. This latter part normally causes an error to be raised; though
on my machine I just get a corrupted error message. The Desktop font
gets lost at this point too. All have yet to be fixed; as an
interim work around, Wimp_PlotIcon objects are never drawn at all
if the global 'printing' flag is set.
@
text
@d1877 13
d1926 14
a1939 1
  if (controls.stop_proxy && !b->ancestor) ChkError(utils_stop_proxy());
@


1.26
log
@Implemented Message_PlugIn_ReshapeRequest, Message_PlugIn_Status and
Message_PlugIn_Busy. Plug-in code more robust when given invalid
browser instance handles by the plug-in.

Line spacing is now calculated on the basis of the normal style base serif
font, with all other fonts being forced into that line height. This does
mean that an unusually tall (say) sans serif font may get clipped. It
appears to be the only way to get around wildly different baseline
depths returned from the font metrics - you can't work out line spacing
based on each different font style; the line spacing will vary.

Table heighting (as opposed to widthing...) improved considerably; rowspan
can no longer cause very tall cells in odd places. Having trouble getting
rid of the single pixel breaks between vertically adjacent cells, though
I've not tried too hard. Widthing, though, seems fairly badly broken at
present... :-/

Set/clear of page_is_text flag made more robust (it looked as though there
was the potential for this to get stuck in a set state, though I've never
see the front-end behave in a manner which indicates this is the case).
The reformatter will now decrease leading if this flag is set (plain text
pages look daft with a line spacing that is OK for 'rich' text pages).
No reformatting is done if the page width changes by dragging on the
resize icon, though toggle size / full screen will still reformat even
if the contents are only text (browser needs to sort out various width
flags at this point).

Cut down on excessive redrawing when reformatting due to a change in
window dimensions is not done. If display_width hasn't changed, then no
redraw is needed. If this causes redraw problems, then whatever is
changing display_width needs investigating. It shouldn't be kludged
(basically) by forcing a redraw instead of a reformat.

TT/PRE/etc. text can now have a non-100% aspect ratio. 80-90% looks
best (ArcWeb, for example, uses 86%). New option 'TTAspect' in
the Choices files.

Debug builds link to a non-debug Unicode library now; stops stderr
being dumped to the bottom left of the screen if you've not redirected
it in the Run file.

RISC OS 3.1 seems to need more initial WimpSlot than later OS versions.
The 64 deep nested table set gives a 'No stack for trap handler' error
(which it really means in this case!) without 800K, even though 3.71
is happy with just 640K. So, the !Run file checks if Boot$OSVersion
is exactly 300, 310 or 311, and sets the WimpSlot accordingly.

!Run[D] files now require latest fetcher module versions (URL 0.21,
File 0.31, HTTP 0.58).
@
text
@d1909 3
a1911 3
  /* Broadcast an AppControl message to stop any further    */
  /* activity in WebServ - this will eventually be directed */
  /* straight at WebServ rather than broadcast...           */
d1913 1
a1913 1
  if (controls.stop_webserve && !b->ancestor) ChkError(utils_stop_webserv());
@


1.25
log
@All hotlist_find_match calls wrapped in '#ifndef REMOTE_HOTLIST' compile
time option, for Customer builds.

Cross referencing of images when the background colour is different - should
not do it for backgrounds, for e.g. alpha transparent PNGs would then fail.
This was implemented, but it turns out it affects *all* cross referencing!
Fixed for just background images.

As described in Docs.TagNames, the tag name "ahodgkin_127beta2" associated
with this checkin applies to everything *except* Choices.c. v1.27 beta 2
was build with the Choices file tagged "ahodgkin_127beta". The confusion
arises because Choices.c got independently updated and checked back in
before I checked in the v1.27 beta 2 changes myself.
@
text
@d312 6
a317 3
    case Message_PlugIn_Opening:   ChkError(plugin_got_opening(m));    break;
    case Message_PlugIn_URLAccess: ChkError(plugin_got_url_access(m)); break;
    case Message_PlugIn_StreamNew: ChkError(plugin_got_stream_new(m)); break;
@


1.24
log
@Following the last check-in - all build resources brought up to date.

Adjust-click on forwards/backwards buttons did not work in the intermediate
build, and now does.

Adjust-click on form submission buttons where the submit method is POST
will now work correctly, as the new view inherits the extradata block
of the old. Failure of this is signalled through
make_no_fetch_memory_error, code 16 (see updated Errors file in Docs).
Note the name change of extradata in this context; more details below.

The passing of forms POST data and extra headers for sending in an
HTTP request via. the URL module was all done through pointers into
flex blocks, and was therefore very unsafe. All relevant functions now
use pointers to pointers to the data.

To remove confusion on the umpteen uses of the word 'extradata', the field
in browser_data has been renamed to 'post_data'. The 'extradata' parameters
used within FetchPage.c were all disconnected from the extra header info /
form POST data stuff that extradata is usually associated with, and have
thus also been renamed, in this case to 'appnddata' (Append Data).

As well as X-NoProxy, the browser sends the 'proper' HTTP headers
Pragma:no-cache and Cache-Control:no-cache.

A redirection from a POST request was not handled correctly; despite
what HTTP specs say, you're supposed to use GET for the new URL. The
browser was, but when it chopped off the redundant header data in the
request didn't terminate it and left Content-Type in anyway...! Fixed.

Ctrl+Tab implemented - URL completion. Comes from the hotlist URLs,
hotlist titles, history hosts, paths, full URLs and lastly titles.
See code comments for more (history_find_match, hotlist_find_match).

TableSupport option added to Choices; it is read, can be set by the
front-end, but doesn't actually do anything else yet.

Reversed Choices' semantics on 'don't expire by...' for History. Added
'needs_redraw' flag to choices_get_contents so that, for example, if the
table border types change, browsers get redrawn.
@
text
@d576 1
a576 1
            int  changed;
d587 4
a590 1
            changed               = hotlist_find_match(url, sizeof(url));
@


1.23
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d575 23
a597 1
            // Want to have history path completion here...
d1152 3
a1154 3
  /* Remember where the click was so other functions can find this */
  /* without calling GetPointerInfo, by which time the pointer may */
  /* have moved a bit.                                             */
d1222 4
a1225 6
  if (eventcode >= 0)
  {
    ChkError(wimp_get_pointer_info(&i));
    p = browser_get_pointer_token(handle, &i, &ox, &oy);
  }
  else p = ancestor->selected, handle = owner;
@


1.22
log
@Removed 'The Onion' link from some Hotlist files. Time showed that the
site wasn't entirely Family Friendly (TM)... Removed Shift Control (it's
gone offline now), and corrected the Telegraph URL from ...the-telegraph...
to just ...telegraph...

StrongHelp manual generator now tries to work out the number of lines in
the table on the root page more intelligently.

Plug-in support extended to handle Shockwave. Quite a lot of underlying
work for this, including a pseudo cache system for temporary files.

Bug in redraw routines: they plotted background images within table
cells, when nothing should have been drawn. Oops. When background images
in cells are properly supported, this can get sorted out.

Tweaked vertical plot position of HRs (up to 4 OS units too high before due
to rounding).

Various Res file bits and pieces, Ursula build taken up to v1.26 beta
for release on the Browser site. *Note* not all resources are up to date!
This will be done after AW97.
@
text
@d55 1
d573 32
d666 1
a666 1
            return 1;
d827 3
d831 11
a841 3
             (ancestor->selected->style & IMG)       &&
             (ancestor->selected->type & TYPE_ISMAP) &&
             !ancestor->in_image_map
d1250 1
a1250 5
      {
        history_record_global(p->anchor);
        browser_flash_token(handle, p);
        used = 1;
      }
d1256 1
a1256 1
        if (p->anchor)
d1269 1
a1269 1
            /* Image maps */
d1271 1
a1271 1
            if ((p->style & IMG) && (p->type & TYPE_ISMAP))
d1273 37
a1309 2
              char           coords[64];
              browser_data * targetted;
d1328 5
a1332 28
                history_record_global(p->anchor);
                targetted = frames_find_target(handle, p->target);

                if (targetted || choices.full_screen)
                {
                  /* If a named target was found, open in that. Otherwise we must */
                  /* be running full screen, so can't open a new window; in this  */
                  /* case, open in the ancestor.                                  */

                  ChkError(fetchpage_new_add(targetted ? targetted : ancestor,
                                             p->anchor,
                                             1,
                                             1,
                                             coords,
                                             adj));
                }
                else
                {
                  /* If we've reached here, a named target wasn't found but the */
                  /* browser isn't running full screen either, so open a new    */
                  /* window with the name specified in the link.                */

                  ChkError(windows_create_browser(p->anchor,
                                                  NULL,
                                                  NULL,
                                                  p->target,
                                                  0));
                }
d1340 1
a1340 1
            else
d1342 1
a1342 3
              if (!adj)
              {
                browser_data * targetted;
d1344 5
a1348 42
                history_record_global(p->anchor);
                targetted = frames_find_target(handle, p->target);

                /* Don't want to ever open a new window if configured */
                /* to run full screen.                                */

                if (targetted || choices.full_screen)
                {
                  /* If a named target was found, open in that. Otherwise we must */
                  /* be running full screen, so can't open a new window; in this  */
                  /* case, open in the ancestor.                                  */

                  ChkError(fetchpage_new(targetted ? targetted : ancestor,
                                         p->anchor,
                                         1,
                                         1));
                }
                else
                {
                  /* If we've reached here, a named target wasn't found but the */
                  /* browser isn't running full screen either, so open a new    */
                  /* window with the name specified in the link.                */

                  ChkError(windows_create_browser(p->anchor,
                                                  NULL,
                                                  NULL,
                                                  p->target,
                                                  0));
                }
              }

              /* Yes, this 'else' would mean that even if running     */
              /* full screen, an Adjust click would open a new window */
              /* but note the controls.ignore_adjust choices option,  */
              /* which disables the use of adjust and can be used in  */
              /* conjunction with the full screen option.             */

              else ChkError(windows_create_browser(p->anchor,
                            NULL,
                            NULL,
                            NULL,
                            0));
d1398 1
a1398 1
                                                 1));
d1771 10
a1780 1
  else                                                  ChkError(windows_create_browser(home, NULL, NULL, NULL, 0));
d1866 4
d1952 10
a1961 1
    else ChkError(windows_create_browser(b->urlddata, NULL, NULL, NULL, 0));
d1977 10
a1986 1
      else           ChkError(windows_create_browser(url, NULL, NULL, NULL, 0));
d2104 11
a2114 2
    if (adjust() && !from_menu && !controls.ignore_adjust) ChkError(windows_create_browser(path, NULL, NULL, NULL, 0));
    else                                                   ChkError(fetchpage_new(b, path, 1, 1));
d2178 4
a2181 1
      if (choices.save_hotlist == Choices_SaveHotlist_Always) show_error_ret(hotlist_save(lookup_choice("HotlistPath:Browse:User.Hotlist",0,0)));
@


1.21
log
@Sorted out Res files, including fixing position of 'bytes' label in one
of the Choices dialogues (I'd missed it out of a selection when everything
else got moved down a bit). Unfaded Enc_Chinese menu entries, made sure
text labels were wide enough for system font, changed 'Apply' on Choices
dialogue to 'Set', and added ^K to hotlist keyboard shortcut lists.
Print Setup (i.e. Print dialogue) buttons all set to 'local', so the
stupid Toolbox doesn't close the dialogue and lose the caret before I
can see if it was in there to start with...

256 colour hotlist sprites taken back to standard 16 colour versions,
since there's a significant speed penalty on slower machines. The
testbed browser still has the 256 colour versions so the designs aren't
completely lost.

Changed access settings to exported builds to wr/r - lr/r was really getting
on my nerves whenever I wanted to try something temporary out.

View source, save source and print handlers would all try to work if
there was no source to act on - despite the fact that toolbar buttons
would be greyed out form them. This is fixed.

The Navigate menu has components greyed to match the toolbar state,
when opened. It isn't kept up to date dynamically, though this shouldn't
really be a problem (reopen the submenu...). As part of this, finally
sorted out conditions for the Stop button to be greyed, or the
GoTo/Go/Stop tristate to be at 'Stop' versus 'GoTo'.

Deferred reformatting is now disabled for external image fetches.

Browser-local client pull flag removed; hitting the Stop button simply
cancels any null handlers working for it. That way, client pull switches
back on in passing at the next fetch (it was never really switched off).
So to stop client pull, hit the stop button at any point.

Done CELLPADDING attribute; cellpadding field in reformat_cell (Global.h)
is redundant since the table token is accessible from there, and so it has
been removed. CELLSPACING support also added.
@
text
@d55 1
d311 3
a313 2
    case Message_PlugIn_Opening:   ChkError(plugin_got_plugin_opening(m)); break;
    case Message_PlugIn_URLAccess: ChkError(plugin_got_url_access(m));     break;
d368 2
a369 1
    case Message_PlugIn_Open:       ChkError(plugin_plugin_open_bounced(m));           break;
d1396 1
a1396 1
          if ((p->style & IMG) || (p->tagno == TAG_OBJECT))
@


1.20
log
@Now handles PARAM tags. Sorted out Plug-In bug that was related to Java
setting a 0 by 0 graphics window before calling Wimp_Poll (fixed in Java).
Implemented queue for Plug-Ins so multiple broadcasts aren't sent for
several Objects in one data chunk.

Added Docs directory with some documentation in it. More things to keep
checking for stylistic consistency, horray ;-)

Corrected !Run[D] for Ursula build to need AcornURI but not TaskModule
(URI handler needed for !Mail to pick up mailto: links).

Added display_height field to browser_data, analogous to display_width,
to cope with % sized objects by width and height (see how HRs are
handled in Redraw.c for an example of how it was always fairly easy
with width, but not height until this addition). Though you do have
to reload to get a new size; reformat isn't enough. Must see to this
some time...

Fixed bug where basic typefaces were claimed *before* the Choices file
had been read. For unusual Choices settings, this could create some
'interesting' problems now and again. This was part of narrower scope
work in the Choices code to allow font changing without leaking font
handles (now done; fm_shutdown only ditches fonts, it keeps internal
structures - must then call  fm_lose_fonts for all browsers to get the
bitfields up to date, then rewrite the typeface definitions and reclaim
basic fonts). Noticed that fm_claim_basic_typefaces would claim multiple
instances of the same font if there were several cases of the same font
mapped to different typeface styles - fixed.

Implemented PlugInControl settings, but not SupportObject (fully).
@
text
@d64 1
d1841 4
d2191 2
d2504 1
a2504 1
  ChkError(savefile_open_for(b, idb->self_id));
d2523 1
a2523 1
  ChkError(print_open_for(b, idb->self_id));
@


1.19
log
@More reformatter code bugs fixed; this one regarding width of items. Any
kerned string was overestimated (causing redraw bugs and caret position
problems in forms, apart from other minor bits elsewhere) and the default
size of a writable icon wasn't especially clever.

Crude Plug-In support; just about manages Java, but can't fetch on
behalf of Plug-In (for example). Had to change the default file access
URL construction to be 'file:/' instead of 'file://', or local file
fetches that reference Java applets won't work. This is in its very
early stages, and is being checked in mostly so that various Choices
issues can be worked on.
@
text
@d309 2
a310 1
    case Message_PlugIn_Opening: ChkError(plugin_got_plugin_opening(m)); break;
d1250 1
a1250 1
                targetted = frames_find_target(handle, p);
d1291 1
a1291 1
                targetted = frames_find_target(handle, p);
d1392 1
a1392 1
          if (p->style & IMG)
@


1.18
log
@!Run[D] files updated for new fetchers and GopherFetcher; protocols list
in Controls updated for Gopher. Debug builds now require 2760K rather than
2560K. Font$... variables set if not already, in anticipation of font
Choices work.

Additional bits in Choices section of Res file tidied and some name
changes (e.g. Netscape -> Navigator(TM)). Frames support option added
to Choices.

Grouped 'support_frames' under the Fetch Controls section and added
support_object in Global.h; appropriate entries placed in the Choices
files, and are read at startup. At present, though, only the frames
support flag is implemented.

For some reason, Menu was the button to use on history popups if you
wanted to show URLs instead of descriptions (or vice versa, depending
on Choices settings). Now, Select and Menu will show the Choices
defined setting, and Adjust will show the opposite.

History menus are built backwards, so local histories have the most
recently visited pages at the top. Global history has still no real
order to it, but this may be arranged later.

Customer name changed to Customer by request.

Customer browser now gets its own resources (SYSTEM=Customer), but
otherwise is unchanged, with the Ursula build now giving the
'spinning acorn' with a Bookworm-style toolbar. This is used for the
Desktop !Browse build.

!Sprites[22] files updated to include GIF, JPEG and PNG sprites;
!Run[D] files and !Boot files set appropriate File$Type_xxx variables.
Sprites in all sprites files have been checked for unnecessary palettes,
which have been removed where present.
@
text
@d305 1
a305 3
    case Message_ANTOpenURL:
    {
//      Printf("Hello?\n");
d307 1
a307 2
      ChkError(protocols_aub_got_open_url(m));        break;
    }
d309 1
a309 1
    /* Plug-In protocol */
d311 20
a330 7
    case Message_PlugIn_Open:
    {
      MPlugIn_Open * open = (MPlugIn_Open *) &m->data;

//      Printf("PlugIn_Open filename: '%s'", plugin_return_string(m, &open->file_name));
    }
    break;
d363 2
@


1.17
log
@Choices 'fakepage' display added.
@
text
@d66 1
d305 16
a320 1
    case Message_ANTOpenURL: ChkError(protocols_aub_got_open_url(m));        break;
d1013 1
a1013 1
                                    b->mouse_click.buttons & Wimp_MouseButtonMenu ? !choices.show_urls : choices.show_urls));
d2565 3
a2567 2
/* gadget (acts as if that were clicked upon),   */
/* presuming that gadget exists.                 */
@


1.16
log
@Now working on source merged with Kevin Bracey's internationalisation
support. UNIFONT is undefined in the Make File for now. All Res and
Choices files updated appropriately.

Having sorted out the old Choices and Messages to form Choices, Controls
and Messages, this build has had the same cleaning up done internally.
This includes greater consistency in naming schemes and the removal of
the inconsitent choices items - e.g. Choices file entries saying 'delay
images' and 'plain backgrounds' where internally all the flags say 'show
images' and 'show backgrounds'. ChoiceDefs.h and CtrlDefs.h added to
clarify the meaning of some fields, though usage of these is not 100%
in the source (there are cases where parameters are passed through to
functions as ints, and those functions still check these against hard
coded values rather than the #define stuff).

Fetcher status return bits (connected, sent request, etc.) now reflected
in status bar. Progress during fetchs to files are reported by %, where
the size of the object is known. Exceeding 100% drops back to a byte
counter, in case the estimated size was wrong. The progress counter
may be updated after specific delays, rather than 'as often as possible',
to reduce flicker (as requested by D.Brown some time ago).

I've done a small rewrite of the fetch prioritisation scheme in FetchPage.c;
how well this performs in general use across different processor speeds
remains to be tested, but certainly it has some advantages. For each small
fetch window before the rewrite, a 4cs tight loop was entered - this gave a
noticable and substantial drain to the Desktop performance if more than one
was opened. Now, several can be up at once with little hit. The actual file
fetch is on half the priority it was before, with all others taken back
just a bit - e.g. from 20cs per poll to 15cs per poll for flat out
reformatting. You don't seem to lose much time on the format in practice,
and the Desktop feels quite a bit lighter at the same time. There's the
potential for smoother frameset loading in this scheme, too.

When Shift+Clicking on a link meant you still fetched inside the main
browser window, several fetches could occur in a frameset - one per frame.
However, now that you can only do this by clicking on a link that leads to
non-displayable data - or by turning off the small fetch windows by
setting UseSmall to 'no' in Choices - a bug where fetchpage_preprocessed
would stop such fetches as new ones were started was revealed.
The API to frames_abort_fetching has now been extended to include a
'stop file spooling too' flag, allowing a fix to be made by having
fetchpage_preprocess's calls not set this (and it doesn't check the
savelink flag is unset before proceeding, since frames_abort_fetching
does that implicitly now).

Had left the RAM transfer buffer at 16 bytes (from testing) accidentally...
Oops. Upped it to 4K. In addition, when loading data by RAM transfer,
the browser didn't notice if a RAMFetch bounced during the transfer. It
would be treated as a 'first' RAMFetch bounce, basically, and try to go to
file transfer - oops. Fixed.
@
text
@d54 1
d246 1
@


1.15
log
@Support for ANT URL broadcast message added.

Image deletion routines rewritten; nasty animated GIF bug now gone
(it kept trying to update the cross-referenced image in the browser that
no longer existed, and I've no idea how animated GIFs ever managed to *not*
blow up if a cross referencing browser was shut down; and I've tested
this...). There are now as many image structures as there are total images
in the visible browsers, and no more; cross referenced images in the
to-be-deleted browser have their ownership moved to the cross
referencer before the cross referencee is wiped, with any required fetches
being transferred with them.

Reformatter sped up a bit by getting rid of strlen on the main text field
of tokens in all places bar one, where it is called extremely rarely. This
means direct app-to-app transfer of, say, a 359K text file to the browser
won't run like a drain as it tries to do strlen on a 359K string over and
over again! Most of the time the performance benefits won't really be
noticable, but on the above text file, formatting time went down from
290 seconds before the change to just under 7 seconds, a 41 fold speed
increase or thereabouts (SA110 228MHz).

MakeFile changed to force function name compilation on for debug builds
(-fn in the DD...FLAGS); useful for certain functions such as
register_null_handler, which can now output the name of the function
being registered.

...Which helped show up some nasties in the animation handler and animation
drift handler registration/deregistration process, which have been fixed
(callers of fetchpage_release_nulls were unaware that the drift handler
could be installed, and fragments of old code checking choices.anim_drift
had a value other than 1 or 0 were still hanging around - bit tricky for
a single bit item).

Added support for VALIGN in table cells. Spotted a bug or two in the
'what token is the pointer over' routines as a result, and fixed them - the
worst was in browser_line_at_y, which checked the y coordinate was below
the given one [the mouse], but didn't check the line height to see if the
given y coordinate was *within* the line, rather than just above it. Never
used to matter pre-tables, but a definite concern once multiple line
arrays can exist on one page.
@
text
@d53 1
d119 1
a119 1
  if (fixed.swapbars) sw = tt, tt = tb, tb = sw;
d480 1
a480 1
            if (choices.keyboardctl)
d678 1
a678 1
        if (choices.keephighlight) frames_highlight_frame(curframe);
d735 1
a735 1
            if (choices.keephighlight) frames_highlight_frame(curframe);
d830 1
a830 1
          if (choices.keyboardctl)
d849 1
a849 1
        handle_go_to_with_key(handle, (char) key, choices.clearfirst);
d1062 1
a1062 1
  if (choices.keyboardctl && ancestor->selected)
d1082 1
a1082 1
  adj = (fixed.ignoreadjust || eventcode < 0) ? 0 : adjust();
d1290 5
a1294 6
              /* Yes, this 'else' would mean that even if running */
              /* full screen, an Adjust click would open a new    */
              /* window - but note the fixed.ignoreadjust choices */
              /* option, which disables the use of adjust and can */
              /* be used in conjunction with the full screen      */
              /* option.                                          */
d1326 1
a1326 1
            if (!adj && !choices.use_small)
d1337 1
a1337 1
              /* Set the savelink flag and start the fetch */
d1339 1
a1339 1
              handle->savelink = 1;
d1722 2
a1723 2
  if (from_menu || fixed.ignoreadjust || !adjust()) ChkError(fetchpage_new(b, home, 1, 1));
  else                                              ChkError(windows_create_browser(home, NULL, NULL, NULL, 0));
d1748 1
a1748 1
  ChkError(history_fetch_backwards(b, (from_menu || fixed.ignoreadjust) ? 0 : adjust()));
d1774 1
a1774 1
  ChkError(history_fetch_forwards(b, (from_menu || fixed.ignoreadjust) ? 0 : adjust()));
d1804 2
a1805 2
    if (frames_fetching(b)) frames_abort_fetching(utils_ancestor(b), 0);
    else frames_abort_fetching(utils_ancestor(b), 1);
d1807 1
a1807 1
  else frames_abort_fetching(utils_ancestor(b), 1);
d1822 1
a1822 1
  if (fixed.stopwebserv && !b->ancestor) ChkError(utils_stop_webserv());
d1862 1
a1862 1
  new_view  = (from_menu || fixed.ignoreadjust) ? 0 : adjust();
d1945 8
a1952 1
    ChkError(hotlist_open(Toolbox_ShowObject_Centre, NULL, adjust ? !choices.hotlist_show : choices.hotlist_show));
d1971 1
a1971 1
  //  if (fixed.appendurls)
d1985 1
a1985 1
    if (fixed.appendurls && browser_current_url(b))
d2021 2
a2022 2
    if (adjust() && !from_menu && !fixed.ignoreadjust) ChkError(windows_create_browser(path, NULL, NULL, NULL, 0));
    else                                               ChkError(fetchpage_new(b, path, 1, 1));
d2075 8
a2082 1
      ChkError(hotlist_add(title, browser_current_url(b), adjust ? !choices.add_hotlist : choices.add_hotlist));
d2086 1
a2086 1
      if (choices.save_hotlist == 2) show_error_ret(hotlist_save(lookup_choice("HotlistPath:Browse:User.Hotlist",0,0)));
d2132 1
a2132 1
  ChkError(browser_set_look(b, 0, -1, -1, 1, 0));
d2674 1
a2674 1
  if (fixed.keepcaret)
@


1.14
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d276 2
a277 2
    case Wimp_MDataLoadAck: ChkError(protocols_atats_got_data_load_ack(m));  break;
    case Wimp_MRAMFetch:    ChkError(protocols_atats_got_ram_fetch(m));      break;
d279 4
a282 4
    case Wimp_MDataOpen:    ChkError(protocols_atatl_got_data_open(m));      break;
    case Wimp_MDataLoad:    ChkError(protocols_atatl_got_data_load(m));      break;
    case Wimp_MDataSave:    ChkError(protocols_atatl_got_data_save(m));      break;
    case Wimp_MRAMTransmit: ChkError(protocols_atatl_got_ram_transmit(m));   break;
d291 1
a291 1
    case Wimp_MDataSaveAck: ChkError(protocols_multi_got_data_save_ack(m)); break;
d295 7
a301 3
    case URI_MProcess:      ChkError(protocols_auh_got_process(m));         break;
    case URI_MReturnResult: ChkError(protocols_auh_got_return_result(m));   break;
    case URI_MDying:        ChkError(protocols_auh_got_dying(m));           break;
a1313 14
//        else
//        {
//          WimpDragBox box;
//
//          box.wimp_window = handle->window_handle;
//          box.drag_type   = 12; /* Horizontal and vertical drag to scroll */
//
//          box.dragging_box.xmin = b->mouse_click.mouse_x;
//          box.dragging_box.ymin = b->mouse_click.mouse_y;
//          box.dragging_box.xmax = b->mouse_click.mouse_x;
//          box.dragging_box.ymax = b->mouse_click.mouse_y;
//
//          wimp_drag_box(&box);
//        }
@


1.13
log
@First a minor warning - the various Res files are out of sync in this build.
Only the Browse resources are currently valid.

Added Utils.Icons - has a few archives inside containing the resources
(well, some of them) used to build various UI sprites for various builds.
Archived because these are unlikely to change much, and putting them on
CVS was a move to, well, archive the stuff...

SaveDBox objects vanquished and requirements in !Run[D] files removed. The
data save code fits much more neatly in amongst the data load protocol
stuff now (with the slight exception of having to split the SaveObject
source into SaveObject and SaveFile - the former handles multiple persistent
dialogues for Shift+Click on links and the like, the latter handles 'one at
a time' transient dialogues for save source and similar). Export Link is now
supported, too, and writes a 'proper' version URI file. You'll find that
double-clicking on old URI files will work as the URI handler picks them up,
whilst new version ones don't; however, dragging onto the browser will only
work with new version files. Note that support for saving and loading URL
files (ANT suite stuff) is present too, so old URI files can be typed as URL
files if you want to keep them working without modification - the URI
handler itself will hopefully support the defined URI file format soon;
double-clicking on old URI files will stop working at that point. Note
there are *lots* of changes in every Res file to support all this. This may
all seem a bit pointless to some, but the changes do in fact make it very
easy to add new save dialogues all over the place. Certainly much easier
than with the previous system, anyway. In fact, post script, image
'save as sprite' took about half an hour, which I hope proves the worth
of the new system.

Merged in newer hotlist code with support for drag cancelling with Escape
(all relevant Res files appropriately updated) and cancelling scrolling
when you've reached the window scroll limit. Had to move some of the
Wimp message handling stuff to the central Protocols source, as clashes
were occuring, and also the hotlist routines were using independent saving
code - a lot of duplicated effort. This was fair enough as at the time the
Hotlist code was written, the Save code couldn't be used in the way it is
now.

New Save Source and Print buttons on the toolbar of some builds.

Phoenix Sprites file made more efficient - the Acorn base section has been
split from the animated upper region. Browse build has a new grey fade
sprite at the back, which is less grainy than the previous one and only
uses 16 colours (with a 16 greyscale palette).

Not really a bug, bug the routine to start an image fetch for INPUT
TYPE=IMAGE forms items only did so if the src field (or equivalent, for
this tag type) was non-NULL. In fact, you should always call image_new_image
and let that handle the rest, otherwise other sections of the code will fail
as they try to obtain an image number for a given HStream and get -1 back.
This problem only generally manifested itself when loading an HTML file to
the browser straight from an application, as many src fields become NULL
when the relativisation routines find nothing to relativise to...

Authentication got broken somewhere along the line - this has been fixed
(in HTMLLib and the browser).

Ctrl+Click on a cross referenced image updates *all* copies, not just the
one with the image data attached.

Next big step: Rip up TBEvents.h and rebuild that whole approach somewhat.
To all those working on the code, my apologies but this means all Res files
will receive a very large number of alterations and there will be extensive
code changes too (mostly naming convention stuff), in more or less all
source files. I am endeavouring to ensure that the new numberspace
convention does not clash with the work being done by Kevin on
internationalisation.
@
text
@d455 1
a455 1
            char writable[Limits_DisplayURL];
d459 1
a459 1
            writablefield_get_value(0, idb->self_id, DisplayURL, writable, sizeof(writable), &len);
d534 1
a534 1
            char url[Limits_DisplayURL];
d539 1
a539 1
            ChkError(writablefield_get_value(0, i, DisplayURL, url, sizeof(url), NULL));
d968 2
a969 2
      case StatsCover:   /* Clicking on a covering gadget is equivalent  */
      case DisplayStats: /* to clicking on the underlying gadget instead */
d978 1
a978 1
          gadget_set_focus(0, idb->self_id, DisplayURL);
d983 2
a984 2
      case DisplayMLeft: /* Drop through to DisplayMenu case */
      case DisplayMenu:
d1727 1
a1727 1
  handlers_get_call_info(&b, NULL, idb, ButtonHome);
d1755 1
a1755 1
  handlers_get_call_info(&b, NULL, idb, ButtonBack);
d1781 1
a1781 1
  handlers_get_call_info(&b, NULL, idb, ButtonForward);
d1805 1
a1805 1
  handlers_get_call_info(&b, NULL, idb, ButtonStop);
d1853 1
a1853 1
  handlers_get_call_info(&b, &t, idb, ButtonReload);
d1904 1
a1904 1
    char url[Limits_DisplayURL];
d1907 1
a1907 1
    writablefield_get_value(0, t, DisplayURL, url, sizeof(url), NULL);
d1963 1
a1963 1
    handlers_get_call_info(&b, NULL, idb, ButtonViewHot);
d2048 1
a2048 1
    handlers_get_call_info(&b, NULL, idb, ButtonAddHot);
d2126 1
a2126 1
  handlers_get_call_info(&b, &t, idb, ButtonLoadImg);
d2149 1
a2149 1
  handlers_get_call_info(&b, &t, idb, ButtonViewSrc);
d2232 1
a2232 1
  handlers_get_call_info(&b, &t, idb, ButtonGoTo);
d2240 1
a2240 1
  if (t) gadget_set_focus(0, t, DisplayURL);
d2272 1
a2272 1
  char     url[Limits_DisplayURL];
d2293 1
a2293 1
    writablefield_get_value(0, t, DisplayURL, url, sizeof(url), NULL);
d2304 1
a2304 1
  writablefield_set_value(0, t, DisplayURL, url);
d2309 1
a2309 1
  if (t) gadget_set_focus(0, t, DisplayURL);
d2331 1
a2331 1
  handlers_get_call_info(&b, NULL, idb, ButtonGo);
d2342 1
a2342 1
  id.self_component = DisplayURL;
d2359 1
a2359 1
  handlers_get_call_info(&b, NULL, idb, ButtonCancel);
d2381 4
a2384 2
/* Handles the EBiStateKeyed event, which says   */
/* that the bistate button should be actioned.   */
d2393 1
a2393 1
  handlers_get_call_info(&b, NULL, idb, ButtonBi);
d2413 4
a2416 2
/* Handles the ETriStateKeyed event, which says  */
/* that the tristate button should be actioned.  */
d2425 1
a2425 1
  handlers_get_call_info(&b, NULL, idb, ButtonTri);
d2460 1
a2460 1
  handlers_get_call_info(&b, NULL, idb, ButtonSaveSrc);
d2479 1
a2479 1
  handlers_get_call_info(&b, NULL, idb, ButtonPrint);
d2525 1
a2525 1
  writablefield_set_value(0, t, DisplayURL, url);
d2530 1
a2530 1
  if (t) gadget_set_focus(0, t, DisplayURL);
d2580 3
a2582 3
  if      (!gadget_get_bbox(0, t, DisplayMenu,   &test)) which = 1;
  else if (!gadget_get_bbox(0, t, DisplayMLeft,  &test)) which = 2;
  else                                                   which = 0;
d2590 1
a2590 1
                                which == 1 ? DisplayMenu : DisplayMLeft,
@


1.12
log
@This version is being checked in because the Hotlist manager in the test
build provokes a Wimp bug. All the variant resource files are out of sync
and there are several outstanding bugs in the main code, so I'd personally
avoid this build like the plague unless you're mad enough to want to
examine the Wimp problem ;-)
@
text
@d54 1
d69 1
d211 1
a211 1
    case Wimp_MQuit:quit=1;
d214 1
a214 1
    case Wimp_MMenusDeleted:menusrc = Menu_None;
d274 1
a274 1
    /* App to app transfer */
d276 2
a277 4
    case Wimp_MDataSave:    ChkError(protocols_atat_got_data_save(m));    break;
    case Wimp_MDataLoad:    ChkError(protocols_atat_got_data_load(m));    break;
    case Wimp_MDataOpen:    ChkError(protocols_atat_got_data_open(m));    break;
    case Wimp_MRAMTransmit: ChkError(protocols_atat_got_ram_transmit(m)); break;
d279 6
a284 1
    /* Printing protocol */
d289 1
a289 3
    case Wimp_MDataSaveAck:
    {
      /* If this is for a print job, use the print protocol routine */
d291 1
a291 3
      if (m->hdr.your_ref == printer_message_ref) ChkError(protocols_pp_got_data_save_ack(m));
    }
    break;
d295 3
a297 3
    case URI_MProcess:      ChkError(protocols_auh_got_process(m));       break;
    case URI_MReturnResult: ChkError(protocols_auh_got_return_result(m)); break;
    case URI_MDying:        ChkError(protocols_auh_got_dying(m));         break;
d319 1
a319 1
  switch (block->user_message_acknowledge.hdr.action_code)
d321 3
a323 5
    case Browser_Message_PrintSave:
    {
      ChkError(protocols_pp_print_save_bounced(m));
    }
    break;
d325 3
a327 5
    case Wimp_MHelpRequest:
    {
      ChkError(protocols_ih_help_request_bounced(m));
    }
    break;
d329 1
a329 4
    case Wimp_MDataOpen:
    {
      ChkError(protocols_atat_data_open_bounced(m));
    }
d331 1
a331 1
    case Wimp_MRAMFetch:
d333 1
a333 1
      ChkError(protocols_atat_ram_fetch_bounced(m));
a335 2

    default: return 0; break;
d2200 1
a2200 1
  ChkError(protocols_send_data_open(FileType_TEXT, path));
d2446 37
d2610 1
a2610 1
                                lookup_token("Version:Unknown!",1,0)));
@


1.11
log
@Created Protocols source file and moved a lot of message handling from
handle_messages - the latter now serves as a high level distributor to
lower level functions in Protocols. Incidentally, URL files (as used by
the ANT suite) can be loaded by dragging to the browser in the same way
as URI files - Not A Lot Of People Know That, etc.

Merged new hotlist display type Res file to existing resources, added
support for DataSave message so items can be dragged from the hotlist
to a specific window (RAM transfer for URI and URL files; ScrapFile for
HTML and Text but deleted afterwards and there are appropriate guards
to stop Reload just saying 'not found'; images run through ScrapFile and
there is no choice but to leave them there and do a conventional fetch).

All !RunD files now give a WimpSlot of 2304K. Some small changes to
the Argo and Ursula build Res files to make the menu trees more sensible.
Controls files now take 'file:/' instead of 'file://' in Protocols
section. Definitions at top of URLutils.c *not* altered, as then you
end up with invalid URLs - so it will accept 'file:/', but always generate
'file://'. This is because some browsers exports 'file:/'. Sigh.

make_no_[..._]memory_error functions now return a _kernel_oserror * rather
than void. It's always &erb returned, but it enables users to use a more
elegant 'return make_no_memory_error(1);', say, rather than something
like 'make_no_memory_error(1); return &erb;'. I obviously should've written
it like that at the outset, but never mind. All callers have been
appropriately updated.

The urlutils_leafname_from_url function now replaces illegal characters
(A7000 Welcome Guide p54...) in the leaf with legal alternatives.

Internal URL scheme is now a bit cleaner, with everything properly defined
in URLutils.h. All references to http:, file: and ftp:, with or without
a following '//' use the definitions in here now.

More tidying and some reorganising of Hotlist source. Auto-open delay is
now a Choices item. Some dependencies on statics removed (e.g. the
counting functions don't accumulate into the global item_number now).
The redraw functions used Wimp_TextOp - oops, so this has been amended
to use whatever is supported on your Wimp. This is now in a new function
(utils_text_width()), which the History menu routines also use (there was
a bug in the width routine there anyway, which is therefore fixed in
passing). Several other routines used Wimp_TextOp directly too, and
they have been altered to use the new function as well.

In hotlist code, one of the larger changes is in the API to hotlist_draw_r()
(formerly _hotlist_draw()) which now takes item widths and heights as
parameters - discovering these is quite slow, so doing it every time the
function calls itself recursively is a little less efficient than
passing the values in from elsewhere. Note that underscore prefixed
functions are being slowly renamed to _r suffixed functions, to match
the convention established by Tony Cheal with is table routines. This
makes it much more obvious when something is recursive, as the same
naming convention is used in every browser source file.

Finally, note that I intend to ditch SaveDBox and use an alternate window
with manual control of the messaging in Protocols.c. This will allow
various improvements which at present the SaveDBox operational methods
preclude. I'm going to have to do at least an alternate Window object for
the SaveDBox module to use soon in any case. Getting rid of SaveDBox will
help reduce, if only slightly, demands on the RMA.
@
text
@d332 5
d1336 3
d1344 1
a1344 1
            if (!adj)
d2131 8
a2138 1
  return 0;
d2151 74
a2224 1
  return 0;
@


1.10
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@a35 1
#include "URI.h"     /* URI handler API, in URILib:h */
a51 1
#include "Authorise.h"
d64 1
a76 1
static char last_help[Limits_DisplayStats];
d200 3
d217 1
a217 55
      if (fixed.claimhelp)
      {
        ObjectId                  o, a = 0;
        browser_data            * b = NULL;
        WimpGetPointerInfoBlock   i;

        wimp_get_pointer_info(&i);
        if (window_wimp_to_toolbox(0, i.window_handle, i.icon_handle, &o, NULL)) break;

        /* If we can get an ancestor, the pointer is over e.g. a toolbar */
        /* - otherwise, assume it is over a browser window.              */

        toolbox_get_ancestor(0, o, &a, NULL);

        if (a)
        {
          toolbox_get_client_handle(0, a, (void *) &b);
        }
        else toolbox_get_client_handle(0, o, (void *) &b);

        /* If we haven't got a valid client handle, exit. */

        if (!is_known_browser(b)) break;

        /* If the text is empty, there was no help for that item, */
        /* so restore the old status display, if there was a      */
        /* help display already there.                            */

        if (!*m->data.help_reply.text)
        {
          if (b->status_help != NULL)
          {
            b->status_help = NULL;
            toolbars_cancel_status(b, Toolbars_Status_Help);
          }
        }
        else
        {
          /* Otherwise update the status bar with the help text, */
          /* if the text has changed.                            */

          if (
               !b->status_help ||
               (
                 b->status_help                                  &&
                 strcmp(b->status_help, m->data.help_reply.text)
               )
             )
          {
            StrNCpy0(last_help, m->data.help_reply.text);
            b->status_help = last_help;
            toolbars_update_status(b, Toolbars_Status_Help);
          }
        }
      }
d272 1
a272 30
    case Browser_Message_PrintError:
    {
      if (m->hdr.size == 20)
      {
        /* RISC OS 2 printer manager's PrintBusy response */

        erb.errnum = Utils_Error_Custom_Message;

        StrNCpy0(erb.errmess,
                 lookup_token("PrintBusy:The printer is currently busy.",
                              0,
                              0));

        show_error_ret(&erb);
      }

      /* RISC OS 3 !Printers general error response */

      else show_error_ret((_kernel_oserror *) &m->data);
    }
    break;

    case Browser_Message_PrintTypeOdd:
    {
      WimpMessage ptk;

      if (m->hdr.your_ref && m->hdr.your_ref == printer_message_ref)
      {
        /* The printer manager sent PrintTypeOdd as a reply to this */
        /* task (not a broadcast), so go ahead and print.           */
d274 4
a277 1
        printer_message_ref = 0;
d279 1
a279 1
        /* Send PrintTypeKnown */
d281 2
a282 42
        ptk.hdr.size        = 20;
        ptk.hdr.your_ref    = m->hdr.my_ref;
        ptk.hdr.action_code = Browser_Message_PrintTypeKnown;

        ChkError(wimp_send_message(Wimp_EUserMessage, &ptk, m->hdr.sender, 0, NULL));

        print_print(NULL);
      }

// Commented out as the Alias$@@PrintType_FF4 system variable does this job
// anyway, and if we don't claim this message then anything else which may
// have a better idea of what to do at least gets a chance to try.
//
// This currently doesn't work, incidentally; the conditions on the 'if'
// are wrong (printer_message_ref has probably been set to 0, but I never
// got the chance to properly debug this before removing it due to time
// constraints...).
//
//      else if (printer_message_ref && m->data.data_save.file_type == FileType_POUT)
//      {
//        /* If the printer doesn't understand PrintOut files, then */
//        /* it may be broken (!) / PostScript. So reply, and copy  */
//        /* the file to the printer device directly.               */
//
//        printer_message_ref = 0;
//
//        ptk.hdr.size        = 20;
//        ptk.hdr.your_ref    = m->hdr.my_ref;
//        ptk.hdr.action_code = Browser_Message_PrintTypeKnown;
//
//        ChkError(wimp_send_message(Wimp_EUserMessage, &ptk, m->hdr.sender, 0, NULL));
//
//        _swix(OS_FSControl,
//              _INR(0,3),
//
//              26,
//              m->data.data_save.leaf_name,
//              "printer:",
//              2); /* Flags - 'Force' set, but no others. */
//      }
    }
    break;
d286 1
a286 11
      if (m->hdr.your_ref == printer_message_ref)
      {
        WimpMessage dl;
        int         file_size;

        /* Print to a file in Printer$Temp, then send a */
        /* DataLoad to the printer manager.             */

        printer_message_ref = 0;

        print_print(m->data.data_save.leaf_name);
d288 1
a288 28
        _swix(OS_File,
              _INR(0,1) | _OUT(4),

              23,
              m->data.data_save.leaf_name,

              &file_size);

        dl.hdr.size        = 64;
        dl.hdr.your_ref    = m->hdr.my_ref;
        dl.hdr.action_code = Wimp_MDataLoad;

        dl.data.data_load.destination_window = m->data.data_save.destination_window;
        dl.data.data_load.destination_icon   = m->data.data_save.destination_icon;
        dl.data.data_load.estimated_size     = file_size;
        dl.data.data_load.file_type          = FileType_POUT;

        _swix(OS_File,
              _INR(0,2),

              18,
              m->data.data_save.leaf_name,
              FileType_POUT);

        strcpy(dl.data.data_load.leaf_name, m->data.data_save.leaf_name);

        ChkError(wimp_send_message(Wimp_EUserMessage, &dl, m->hdr.sender, 0, NULL));
      }
d292 1
a292 90
    case Wimp_MDataOpen:
    {
      /* Don't want to load a text file from double-clicking, */
      /* only by dragging to a window or the icon bar icon.   */
      /* Similarly, ANT's URL files should only be loaded if  */
      /* dragged on, and the same is true of URI files if we  */
      /* are using the URI handler.                           */

      if (
           m->data.data_open.file_type == FileType_TEXT ||
           m->data.data_open.file_type == FileType_URL  ||
           (
             m->data.data_open.file_type == FileType_URI &&
             uri_module_present
           )
         )
         break;

      /* Now treat as a DataLoad message ready to drop */
      /* through to the Wimp_MDataLoad case statement. */
      /* This avoids duplicating the loader code.      */

      m->data.data_load.destination_window = 0; /* Force a new window to open */
      m->data.data_load.destination_icon   = -1;
      m->data.data_load.estimated_size     = 0;
    }

    /* So let the above fall through to Wimp_MDataLoad... */

    case Wimp_MDataLoad:
    {
      /* Proceed only if it's a filetype we can handle */

      if (
           m->data.data_load.file_type == FileType_HTML ||
           m->data.data_load.file_type == FileType_TEXT ||
           m->data.data_load.file_type == FileType_GIF  ||
           m->data.data_load.file_type == FileType_JPEG ||
           m->data.data_load.file_type == FileType_PNG  ||
           m->data.data_load.file_type == FileType_TIFF ||
           m->data.data_load.file_type == FileType_URL  ||
           m->data.data_load.file_type == FileType_URI
         )
      {
        if (m->hdr.action_code == Wimp_MDataOpen)
        {
          /* If we've fallen into the DataLoad code from the DataOpen */
          /* code above, need to send a DataLoadAck message now.      */

          WimpMessage dla = *m;

          dla.hdr.sender      = task_handle;
          dla.hdr.your_ref    = m->hdr.my_ref;
          dla.hdr.action_code = Wimp_MDataLoadAck;

          ChkError(wimp_send_message(Wimp_EUserMessage, &dla, m->hdr.sender, 0, NULL));
        }

        if (m->data.data_load.destination_window <= 0)
        {
          /* Load file to icon bar - i.e. open a new window. */

          char url[Limits_URL];

          if (
               m->data.data_load.file_type != FileType_URI &&
               m->data.data_load.file_type != FileType_URL
             )
          {
            StrNCpy0(url, m->data.data_load.leaf_name);
            urlutils_pathname_to_url(url, sizeof(url));
          }
          else urlutils_load_uri_file(url, sizeof(url), m->data.data_load.leaf_name);

          ChkError(windows_create_browser(url, NULL, NULL, NULL, 0));
        }
        else
        {
          /* Load file to a browser window. Need to find it's */
          /* browser_data structure.                          */

          char           url[Limits_URL];
          ObjectId       o;
          browser_data * b;

          ChkError(window_wimp_to_toolbox(0,
                                          m->data.data_load.destination_window,
                                          m->data.data_load.destination_icon,
                                          &o,
                                          NULL));
d294 3
a296 24
          ChkError(toolbox_get_client_handle(0, o, (void *) &b));

          /* Is the client handle a known browser_data structure? */

          if (is_known_browser(b))
          {
            /* It is, so deal with the file */

            if (
                 m->data.data_load.file_type != FileType_URI &&
                 m->data.data_load.file_type != FileType_URL
               )
            {
              StrNCpy0(url, m->data.data_load.leaf_name);
              urlutils_pathname_to_url(url, sizeof(url));
            }
            else urlutils_load_uri_file(url, sizeof(url), m->data.data_load.leaf_name);

            ChkError(fetchpage_new(b, url, 1, 0));
          }
        }
      }
    }
    break;
d298 1
a298 85
    case URI_MProcess:
    {
      URIProcessMessage * uri    = (URIProcessMessage *) &m->data;
      int                 ok;
      unsigned int        sender = m->hdr.sender;

      /* Can we handle this URI? */

      ok = urlutils_check_protocols(uri->uri);

      #ifdef TRACE
        if (tl & (1u<<21)) Printf("handle_messages: URI_MProcess '%s', ok = %d\n",uri->uri,ok);
      #endif

      /* If so, reply to the message and possibly start a fetch */

      if (ok)
      {
        /* Only fetch if the flags bits don't say we're to just */
        /* check the URI could be handled.                      */

        if (!uri->flags.bits.check)
        {
          uri_queue * entry = urlutils_find_queue_entry(uri->uri_handle);

          if (entry)
          {
            ChkError(fetchpage_postprocess_uri(entry->b,
                                               uri  ->uri,
                                               entry->flags & URIQueue_RecordInHistory ? 1 : 0));

            /* Don't remove it from the queue of uri_queue structures yet - */
            /* wait for the ReturnResult message for that.                  */
          }

          else ChkError(windows_create_browser(uri->uri, NULL, NULL, NULL, 0));
        }

        /* Now reply, saying that we've handled the message */

        m->hdr.sender      = task_handle;
        m->hdr.your_ref    = m->hdr.my_ref;
        m->hdr.action_code = URI_MProcessAck;

        ChkError(wimp_send_message(Wimp_EUserMessage, m, sender, 0, NULL));
      }
    }
    break;

    case URI_MReturnResult:
    {
      URIReturnResultMessage * uri = (URIReturnResultMessage *) &m->data;

      #ifdef TRACE
        if (tl & (1u<<21)) Printf("handle_messages: URI_MReturnResult, not_claimed = %d\n",uri->flags.bits.not_claimed);
      #endif

      /* Remove the entry from the queue */

      ChkError(urlutils_remove_from_queue(uri->uri_handle));

      /* If the URI was not claimed by anyone, give an appropriate error */

      if (uri->flags.bits.not_claimed)
      {
        erb.errnum = Utils_Error_Custom_Message;

        StrNCpy0(erb.errmess,
                 lookup_token("CannotFetch:The browser does not have a method of fetching the requested site.",
                              0,0));

        show_error_ret(&erb);
      }
    }
    break;

    case URI_MDying:
    {
      /* If the URI handler is dying, don't try and use it anymore... */

      uri_module_present = 0;
    }
    break;

    default: return 0;
d316 2
d322 1
a322 4
      /* The PrintSave bounced, so the printer driver must not be loaded. */
      /* Since we're not printing text, the PRMs say 'go for it'...       */

      print_print(NULL);
d328 3
a330 2
      /* If a HelpRequest bounces, there's no help on the item the pointer */
      /* is over so allow the status display to go back to status again.   */
d332 3
a334 32
      if (fixed.claimhelp)
      {
        ObjectId                  o, a = -1;
        browser_data            * b = NULL;
        WimpGetPointerInfoBlock   i;

        wimp_get_pointer_info(&i);
        if (window_wimp_to_toolbox(0, i.window_handle, i.icon_handle, &o, NULL)) break;

        /* If we can get an ancestor, the pointer is over e.g. a toolbar */
        /* - otherwise, assume it is over a browser window.              */

        toolbox_get_ancestor(0, o, &a, NULL);

        if (a)
        {
          toolbox_get_client_handle(0, a, (void *) &b);
        }
        else toolbox_get_client_handle(0, o, (void *) &b);

        /* If we haven't got a valid client handle, exit */

        if (!is_known_browser(b)) break;

        /* Update the status line */

        if (b->status_help != NULL)
        {
          b->status_help = NULL;
          toolbars_cancel_status(b, Toolbars_Status_Help);
        }
      }
d336 1
d338 1
a338 1
    default: return 0;
a344 71
/* handle_send_helpreq()                         */
/*                                               */
/* Sends out HelpRequest messages for the item   */
/* the mouse pointer is currently over, every    */
/* 20 centiseconds or so.                        */
/*                                               */
/* Parameters are as standard for a Wimp event   */
/* handler.                                      */
/*************************************************/

int handle_send_helpreq(int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle)
{
  int        time_now;
  static int last_time   = 0;
  static int last_window = 0;
  static int last_icon   = 0;

  /* Only proceed if the fixed choices say to do so */

  if (fixed.claimhelp)
  {
    /* Don't sent out requests too often */

    _swix(OS_ReadMonotonicTime, _OUT(0), &time_now);

    if (time_now - last_time > 20)
    {
      WimpGetPointerInfoBlock i;
      WimpMessage             m;

      last_time = time_now;

      wimp_get_pointer_info(&i);

      /* Don't send a request if the pointer isn't over a */
      /* browser-owned window.                            */

      if (task_handle == task_from_window(i.window_handle))
      {
        /* Don't send out multiple requests for the same window/icon. */

        if (i.icon_handle != last_icon || i.window_handle != last_window)
        {
          last_icon   = i.icon_handle;
          last_window = i.window_handle;
        }
        else return 0;

        /* Build the message block and send the request */

        m.hdr.size        = 40;
        m.hdr.sender      = task_handle;
        m.hdr.my_ref      = 0;
        m.hdr.your_ref    = 0;
        m.hdr.action_code = Wimp_MHelpRequest;

        m.data.help_request.mouse_x       = i.x;
        m.data.help_request.mouse_y       = i.y;
        m.data.help_request.buttons       = i.button_state;
        m.data.help_request.window_handle = i.window_handle;
        m.data.help_request.icon_handle   = i.icon_handle;

        ChkError(wimp_send_message(Wimp_EUserMessageRecorded, &m, i.window_handle, i.icon_handle, NULL));
      }
    }
  }

  return 0;
}

/*************************************************/
d549 20
a568 1
            #ifdef HIDE_CGI
d570 5
a574 5
              /* If HIDE_CGI is defined, the URL bar may have only part of    */
              /* the URL in it - the CGI information could be stripped off.   */
              /* In that case, check if the URL matches the browser's current */
              /* one with the exception of the CGI stuff, and only do the     */
              /* fetch if not.                                                */
d576 5
a580 5
              if (
                   browser_current_url(b) &&                             /* If there *is* a current URL, and            */
                   !strncmp(browser_current_url(b), url, strlen(url)) && /* the URL bar matches the start of it...      */
                   strlen(browser_current_url(b)) > strlen(url) &&       /* ...but there's more of the current URL left */
                   browser_current_url(b)[strlen(url)] == '?'            /* ...and the first extra character is a '?',  */
d582 2
a583 2
                 )
                 ChkError(fetchpage_new(b, browser_current_url(b), 1, 1));  /* ...then fetch the current URL instead.      */
d585 1
a585 1
              else ChkError(fetchpage_new(b, url, 1, 1)); /* Otherwise do what the user asked! */
d587 1
a587 1
            #else
d589 1
a589 1
              /* Start the new fetch */
d591 1
a591 1
              ChkError(fetchpage_new(b, url, 1, 1));
d593 2
a594 1
            #endif
d1854 17
@


1.9
log
@Modified to cope with withdrawal of #defines SELECT, INPUT etc.
Added right-align support.
@
text
@a50 1
#include "TBEvents.h"
d60 1
d84 3
a86 4
static void              handlers_get_call_info    (browser_data ** bp, ObjectId * op, IdBlock * idb, ComponentId button);
static int               handlers_menu_or_toolbar  (IdBlock * idb);
static _kernel_oserror * handle_history_menu_popup (browser_data * b, ObjectId toolbar, ComponentId left_or_right, int show_urls);
static void              handle_go_to_with_key     (browser_data * b, char c, int clear);
a1030 54

    /* Keypress wasn't from a URL bar, but was from something obtained */
    /* within a browser window since we could get that window's tool   */
    /* bars from an ancestor object, which a main window doesn't have. */

    else
    {
      /* Proceed if the keypress wasn't from an authorisation dialogue */
      /* or a save dialogue                                            */

      if (
           idb                                            &&
           idb->self_id != authorise_return_dialogue_id() &&
           idb->self_id != save_return_dialogue_id()
         )
      {
        if (key == 0x00d && b)
        {
          // Assume it was from an Open URL dialogue for now...

          char c[Limits_DisplayURL];

          *c = 0;
          writablefield_get_value(0, idb->self_id, OpenWrit, c, sizeof(c), NULL);
          c[sizeof(c) - 1] = 0; /* (Ensure termination) */

          ChkError(fetchpage_new(b, c, 1, 1));

          key = 0;
        }
      }
    }
  }

  /* Keypress was not from an object obtained from a browser window, */
  /* and if we couldn't find a client handle isn't from a browser    */
  /* window either.                                                  */

  else
  {
    if (!b && key == 0x00d)
    {
      /* Not a browser window; must be a URL dialogue from the icon bar */

      char c[Limits_DisplayURL];

      *c = 0;
      writablefield_get_value(0, idb->self_id, OpenWrit, c, sizeof(c), NULL);
      c[sizeof(c) - 1] = 0; /* (Ensure termination) */

      ChkError(windows_create_browser(c, NULL, NULL, NULL, 0));

      key = 0;
    }
d1300 4
a1303 1
    case Menu_Form: form_select_menu_event(block);
d1306 5
a1310 1
    case Menu_History: ChkError(history_menu_selection((browser_data *) menuhdl, block));
d1355 1
a1355 1
/* handle_history_menu_popup()                   */
d1357 3
a1359 14
/* Handles clicks on a history menu popup item.  */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the history to show;  */
/*                                               */
/*             Object ID of the toolbar holding  */
/*             the popup;                        */
/*                                               */
/*             Component ID of the item that was */
/*             clicked on (DisplayMLeft or       */
/*             DisplayMenu - see TBEvents.h);    */
/*                                               */
/*             1 to show the URLs, 0 to show     */
/*             page titles where available.      */
d1362 1
a1362 1
static _kernel_oserror * handle_history_menu_popup(browser_data * b, ObjectId toolbar, ComponentId left_or_right, int show_urls)
d1364 1
a1364 3
  _kernel_oserror         * e;
  WimpGetWindowStateBlock   state;
  BBox                      menu;
d1366 1
a1366 2
  /* If there's already a menu open, close it */
  /* (so the action is to toggle the menu).   */
d1368 2
a1369 4
  if (menusrc == Menu_History && menuhdl == b)
  {
    menusrc = Menu_None;
    menuhdl = NULL;
d1371 2
a1372 2
    return wimp_create_menu((void *) -1, 0, 0);
  }
d1374 1
a1374 56
  /* Get the Wimp handle for the tool bar and get the window state */

  e = window_get_wimp_handle(0, toolbar, &state.window_handle);
  if (e) return e;

  e = wimp_get_window_state(&state);
  if (e) return e;

  /* Get the bounding box of the popup icon that was used */

  e = gadget_get_bbox(0, toolbar, left_or_right, &menu);
  if (e) return e;

  /* Convert that to screen coords ready for opening the menu */
  /* next to it.                                              */

  coords_box_toscreen(&menu, (WimpRedrawWindowBlock *) &state);

  /* The menu about to be shown is a History list, from the browser */
  /* window tool bar. Ask the History code to build the menu.       */

  if (left_or_right == DisplayMenu)
  {
    /* Build and show menu to right of menu icon for DisplayMenu object */

    e = (history_build_menu(b,
                            menu.xmax - 2,
                            menu.ymax,

                            show_urls,
                            0));
    if (e) return e;
  }
  else
  {
    /* Otherwise, show it to the left of the icon */

    e = history_build_menu(b,
                           menu.xmin - 4,
                           menu.ymin + 4,

                           show_urls,
                           1);
    if (e) return e;
  }

  return NULL;
}

/*************************************************/
/* handle_clicks()                               */
/*                                               */
/* Deal with mouse click events from the wimp,   */
/* for specific object IDs. Parameters are as    */
/* standard for a Wimp event handler.            */
/*************************************************/
a1375 2
int handle_clicks(int eventcode, WimpPollBlock * b, IdBlock * idb, browser_data * handle)
{
d1418 5
a1422 4
        ChkError(handle_history_menu_popup(handle,
                                           idb->self_id,
                                           idb->self_component,
                                           b->mouse_click.buttons & Wimp_MouseButtonMenu ? !choices.show_urls : choices.show_urls));
d1767 11
d1782 1
a1782 1
                                     1,
d2253 4
d2347 17
a2363 3
  browser_data * b;
  char           path[Limits_URL];
  int            from_menu = 0;
d2365 1
a2365 2
  handlers_get_call_info(&b, NULL, idb, ButtonViewHot);
  from_menu = handlers_menu_or_toolbar(idb);
d2367 1
a2367 1
  /* Create the hotlist URL */
d2369 1
a2369 1
  urlutils_create_hotlist_url(path, sizeof(path));
d2371 3
a2373 1
  /* Deal with appending the current URL, if necessary */
d2375 2
a2376 15
// For future implementation:
//
//  if (fixed.appendurls)
//  {
//    char url[Limits_URL];
//
//    if (browser_current_url(b))
//    {
//      StrNCpy0(url, browser_current_url(b));
//      history_record_local(b, url);
//    }
//
//    history_pull_local_last(b, url, sizeof(url));
//
// Then do the rest on url, instead of browser_current_url.
d2378 1
a2378 3
  if (fixed.appendurls && browser_current_url(b))
  {
    int len;
d2380 1
a2380 1
    lookup_token("AppendWith:?url=",0,0);
d2382 1
a2382 2
    /* Need to translate some chars, so working out the length of the final */
    /* string is a little complex.                                          */
d2384 15
a2398 1
    len = strlen(path) + strlen(tokens);
d2400 1
a2400 1
    if (len + 1 < sizeof(path))
d2402 1
a2402 1
      char * p = browser_current_url(b);
d2404 1
a2404 1
      strcat(path, tokens);
d2406 6
a2411 1
      while (*p && len + 4 < sizeof(path)) /* +4 = +1 for terminator, +3 for maximum step size within loop */
d2413 5
a2417 2
        if (isalnum(*p)) path[len] = *p, len++;
        else
d2419 8
a2426 2
          sprintf(path + len, "%%%02X", *p);
          len += 3;
d2429 2
a2430 1
        p++;
d2432 1
d2434 1
a2434 4
      if (len >= sizeof(path)) len = sizeof(path) - 1;
      path[len] = 0;
    }
  }
d2436 2
a2437 1
  /* Finally, fetch the required hotlist */
d2439 1
a2439 2
  if (adjust() && !from_menu && !fixed.ignoreadjust) ChkError(windows_create_browser(path, NULL, NULL, NULL, 0));
  else                                               ChkError(fetchpage_new(b, path, 1, 1));
d2454 55
d2847 13
d2879 5
a2883 4
    ChkError(handle_history_menu_popup(b,
                                       t,
                                       which == 1 ? DisplayMenu : DisplayMLeft,
                                       choices.show_urls));
@


1.8
log
@Updated Makefile to work better in folding text editors. More or less rewrote
Limits.h, and ensured consistent comment styling throughout all sources.
Fetch.c/h split to Fetch, FetchHTML and URLveneer. URLstat.c/h produced to
cope with this. OpenURL and Find sources created from bits in the Windows
source file that shouldn't have been there... These will get filled out
shortly. Note that a few functions in Fetch are due to be renamed and moved;
probably to Tokenutils.
@
text
@d1682 3
a1684 3
           (p->style & INPUT)    ||
           (p->style & TEXTAREA) ||
           (p->style & SELECT)
d1692 1
a1692 1
      if ((p->style & INPUT) && HtmlINPUTtype(p) == inputtype_IMAGE && eventcode >= 0)
@


1.7
log
@Checking in mostly because its Friday... Quite a few little bug fixes
(adding up to a greater whole), which include removal of the dastardly
'invalid image number' errors that trace builds would raise from time to
time. Frame highlights are now better controlled (releaseably so).
Generally, this build represents the first genuinely promising version
of the browser for quite some time, despite the known library problems
with comment handling etc.
@
text
@d17 1
d20 1
d22 2
a23 1
/* History: 07-Feb-97: Created from Main.h source  */
a55 1
#include "Fetch.h"
d78 3
a80 1
static char last_help[MaxStaLen];
d142 1
d147 1
d201 2
a202 2
/* handle_ack(), below). Parameters are as       */
/* standard for a Wimp message handler.          */
d453 3
d457 9
a465 1
      if (m->data.data_open.file_type == FileType_TEXT) break;
d485 5
d511 1
a511 1
          char url[2048];
d513 4
a516 1
          if (m->data.data_load.file_type != FileType_URI)
d523 1
a523 1
          ChkError(windows_create_browser(url, NULL, NULL, NULL));
d530 1
a530 1
          char           url[2048];
d548 4
a551 1
            if (m->data.data_load.file_type != FileType_URI)
d600 1
a600 1
          else ChkError(windows_create_browser(uri->uri, NULL, NULL, NULL));
d908 1
a908 1
            char writable[MaxUrlLen];
d911 1
a911 2
            writable[0] = 0;

d913 1
d987 1
a987 1
            char url[MaxUrlLen + 1];
d991 3
a993 1
            ChkError(writablefield_get_value(0, i, DisplayURL, url, MaxUrlLen + 1, NULL));
d1052 5
a1056 1
          char c[MaxUrlLen + 1];
a1057 1
          writablefield_get_value(0, idb->self_id, OpenWritable, c, MaxUrlLen + 1, NULL);
d1076 1
a1076 1
      char c[MaxUrlLen + 1];
d1078 3
a1080 1
      writablefield_get_value(0, idb->self_id, OpenWritable, c, MaxUrlLen + 1, NULL);
d1082 1
a1082 1
      ChkError(windows_create_browser(c, NULL, NULL, NULL));
d1570 1
d1577 28
d1627 1
a1627 1
  /* Use adjust() as this may return special information if running Full Screen. */
d1631 35
a1676 6
    int shift;

    /* Is shift held down? */

    _swix(OS_Byte,_INR(0,1)|_OUT(1),121,128,&shift);

d1724 1
a1724 1
      /* If shift is not held down, and we have a link, follow the link */
d1726 1
a1726 1
      if (!shift)
d1745 2
a1746 2
              char                      coords[64];
              browser_data            * targetted;
d1790 2
a1791 1
                                                  p->target));
d1832 2
a1833 1
                                                  p->target));
d1847 2
a1848 1
                            NULL));
d1879 1
a1879 6
        /* If shift is held down but this isn't an image, and it's */
        /* a link, then again, follow that link.                   */
        /*                                                         */
        /* This behaviour is due to change (save link contents).   */
        /* Note that JavaScript onClick events are not activated   */
        /* if you shift+click (this is deliberate!).               */
d1881 1
a1881 1
        if (p->anchor && !(p->style & IMG))
d1883 5
a1887 4
          if (!adj) ChkError(fetchpage_new(handle,
                                           p->anchor,
                                           1,
                                           1));
d1889 10
a1898 4
          else      ChkError(windows_create_browser(p->anchor,
                                                    NULL,
                                                    NULL,
                                                    NULL));
d1900 2
a1901 1
          used = 1;
d1903 5
d1909 5
a1913 7
        /* If it's an image, reload it (this may load the image for */
        /* the first time if image loading had been suspended).     */

        else if (p->style & IMG)
        {
          image_reload(handle, p);
          used = 1;
d1949 288
d2263 1
a2263 1
  char           home[2048];
d2271 1
a2271 1
  else                                              ChkError(windows_create_browser(home, NULL, NULL, NULL));
d2414 1
a2414 1
    else ChkError(windows_create_browser(b->urlddata, NULL, NULL, NULL));
d2421 1
a2421 1
    char url[MaxUrlLen];
d2423 3
a2425 3
    memset(url, 0, sizeof(url));

    writablefield_get_value(0, t, DisplayURL, url, MaxUrlLen, NULL);
d2430 1
a2430 1
      else           ChkError(windows_create_browser(url, NULL, NULL, NULL));
d2453 1
a2453 1
  char           path[2048];
d2469 1
a2469 1
//    char url[2048];
d2517 1
a2517 1
  if (adjust() && !from_menu && !fixed.ignoreadjust) ChkError(windows_create_browser(path, NULL, NULL, NULL));
d2628 1
a2628 1
  char     url[MaxUrlLen + 1];
d2648 1
d2650 3
a2652 1
    if (strlen(url) < MaxUrlLen)
d2824 1
d2908 1
a2908 1
/* event handler                                 */
d2924 1
a2924 1
/* event handler                                 */
a3055 2

/*************************************************/
@


1.6
log
@Fixed problems with unsourced images in tables and a couple of other bugs
here and there - nothing earth shattering... Just wanted to keep the CVS
source up to date.
@
text
@d101 1
a101 1
  ObjectId          tt, tb;
d115 2
d530 1
a530 1
            ChkError(fetchpage_new(b, url, 1));
d802 2
a803 2
    ancestor = b->ancestor;
    if (!ancestor) ancestor = b;
a804 1
    curframe = ancestor->selected_frame;
d984 1
a984 1
                 ChkError(fetchpage_new(b, browser_current_url(b), 1));  /* ...then fetch the current URL instead.      */
d986 1
a986 1
              else ChkError(fetchpage_new(b, url, 1)); /* Otherwise do what the user asked! */
d992 1
a992 1
              ChkError(fetchpage_new(b, url, 1));
d1025 1
a1025 1
          ChkError(fetchpage_new(b, c, 1));
d1075 2
a1076 2
  ancestor = handle->ancestor;
  if (!ancestor) ancestor = handle;
a1077 1
  curframe = ancestor->selected_frame;
d1165 1
a1165 2
              ancestor = next->ancestor;
              if (!ancestor) ancestor = next;
d1536 1
a1536 1
  browser_data            * ancestor = handle->ancestor;
a1538 2
  if (!ancestor) ancestor = handle;

d1684 1
d1726 1
d1794 1
d1880 1
a1880 1
  if (from_menu || fixed.ignoreadjust || !adjust()) ChkError(fetchpage_new(b, home, 1));
d1962 2
a1963 2
    if (fetch_fetching(b)) frames_abort_fetching(b, 0);
    else frames_abort_fetching(b, 1);
d1965 1
a1965 1
  else frames_abort_fetching(b, 1);
d2013 1
a2013 1
      e = fetchpage_new(b, b->urlddata, 0);
d2039 1
a2039 1
      if (!new_view) ChkError(fetchpage_new(b, url, 1));
d2128 1
a2128 1
  else                                               ChkError(fetchpage_new(b, path, 1));
@


1.5
log
@Made INPUT type=image work
@
text
@a1524 36
/* handle_calc_image_click_coords()              */
/*                                               */
/* Calculate the coordinates of a click on an    */
/* image  in pixels from the top left corner, as */
/* required by image maps and image input        */
/* fields.                                       */
/*************************************************/
int handle_calc_image_click_coords(HStream * p, WimpGetPointerInfoBlock * i, int * x, int * y, browser_data * handle)
{
    WimpGetWindowStateBlock   s;
    BBox                      box;

    /* Get the image's size and position on screen */

    s.window_handle = handle->window_handle;
    if (wimp_get_window_state(&s)) return 0;

    if (image_get_token_image_size(handle, p, &box)) return 0;
    if (image_get_token_image_position(handle, p, x, y)) return 0;

    *x = coords_x_toscreen(*x, (WimpRedrawWindowBlock *) &s);
    *y = coords_y_toscreen(*y, (WimpRedrawWindowBlock *) &s);

    /* Get the offset of the pointer position from the top left */
    /* of the image in ox and oy                                */

    *x = i->x - *x;
    *y = *y + (box.ymax - box.ymin) - i->y;

    image_convert_to_pixels(handle, p, x, y);

    return 1;
}


/*************************************************/
d1600 2
d1603 3
a1605 1
          handle_calc_image_click_coords(p, &i, &x, &y, handle);
d1666 2
a1667 1
              handle_calc_image_click_coords(p, &i, &ox, &oy, handle);
a1672 1
                image_convert_to_pixels(handle, p, &ox, &oy);
d1957 2
a1958 2
  /* it kills the fetch, then the format, then    */
  /* the image loading each time it's used.       */
d1962 2
a1963 11
    if (fetch_fetching(b)) fetch_cancel(b);
    else
    {
      fetch_cancel(b);
      if (reformat_formatting(b)) reformat_stop(b);
      else if (image_fetching(b)) image_delay_fetches(b);
    }
  }
  else
  {
    frames_abort_fetching(b);
d1965 1
@


1.4
log
@Customer work complete, and this version just shipped. Had to comment out
the code in Main.c that sets the user agent string to fake Netscape, as the
persistent problems with forms in tables showed up much more on a modem
link - net result was that the customer's log in page didn't work. Not
faking Netscape gives an authorisation dialogue instead, allowing access
to the site even if not by the most elegant of methods.
@
text
@d1525 36
d1634 6
a1639 1
      ChkError(form_click_field(handle, p, 0));
a1686 1
              WimpGetWindowStateBlock   s;
a1688 2
              BBox                      box;
              int                       x, y;
d1697 2
a1698 16
              /* Get the image's size and position on screen */

              s.window_handle = handle->window_handle;
              if (wimp_get_window_state(&s)) return 0;

              if (image_get_token_image_size(handle, p, &box)) return 0;
              if (image_get_token_image_position(handle, p, &x, &y)) return 0;

              x = coords_x_toscreen(x, (WimpRedrawWindowBlock *) &s);
              y = coords_y_toscreen(y, (WimpRedrawWindowBlock *) &s);

              /* Get the offset of the pointer position from the top left */
              /* of the image in ox and oy                                */

              ox = i.x - x;
              oy = y + (box.ymax - box.ymin) - i.y;
d1702 1
a1702 2
                /* Convert the coordinate to pixels and build an appropriate */
                /* CGI string including this information.                    */
@


1.3
log
@In the middle of customer support work.
@
text
@d1631 2
d1635 1
a1635 1
          if (p->onclick && *p->onclick) ChkError(javascript_href_onclick(handle, p));
d1637 2
a1638 1
          /* Image maps */
d1640 1
a1640 1
          if ((p->style & IMG) && (p->type & TYPE_ISMAP))
d1642 1
a1642 5
            WimpGetWindowStateBlock   s;
            char                      coords[64];
            browser_data            * targetted;
            BBox                      box;
            int                       x, y;
d1644 1
a1644 1
            if (eventcode < 0)
d1646 12
a1657 4
              ChkError(wimp_get_pointer_info(&i));
              p = browser_get_pointer_token(handle, &i, NULL, NULL);
              if (!p) return 0;
            }
d1659 1
a1659 1
            /* Get the image's size and position on screen */
d1661 2
a1662 2
            s.window_handle = handle->window_handle;
            if (wimp_get_window_state(&s)) return 0;
d1664 2
a1665 2
            if (image_get_token_image_size(handle, p, &box)) return 0;
            if (image_get_token_image_position(handle, p, &x, &y)) return 0;
d1667 2
a1668 2
            x = coords_x_toscreen(x, (WimpRedrawWindowBlock *) &s);
            y = coords_y_toscreen(y, (WimpRedrawWindowBlock *) &s);
d1670 2
a1671 2
            /* Get the offset of the pointer position from the top left */
            /* of the image in ox and oy                                */
d1673 2
a1674 2
            ox = i.x - x;
            oy = y + (box.ymax - box.ymin) - i.y;
d1676 4
a1679 4
            if (ox >= 0 && oy >= 0)
            {
              /* Convert the coordinate to pixels and build an appropriate */
              /* CGI string including this information.                    */
d1681 2
a1682 2
              image_convert_to_pixels(handle, p, &ox, &oy);
              sprintf(coords, "?%d,%d", ox, oy);
d1684 2
a1685 2
              history_record_global(p->anchor);
              targetted = frames_find_target(handle, p);
d1687 23
a1709 22
              if (targetted || choices.full_screen)
              {
                /* If a named target was found, open in that. Otherwise we must */
                /* be running full screen, so can't open a new window; in this  */
                /* case, open in the ancestor.                                  */

                ChkError(fetchpage_new_add(targetted ? targetted : ancestor,
                                           p->anchor,
                                           1,
                                           coords,
                                           adj));
              }
              else
              {
                /* If we've reached here, a named target wasn't found but the */
                /* browser isn't running full screen either, so open a new    */
                /* window with the name specified in the link.                */

                ChkError(windows_create_browser(p->anchor,
                                                NULL,
                                                NULL,
                                                p->target));
d1711 2
d1715 1
a1715 4
            used = 1;
          }

          /* Otherwise, a simple link */
d1717 1
a1717 3
          else
          {
            if (!adj)
d1719 3
a1721 1
              browser_data * targetted;
d1723 2
a1724 2
              history_record_global(p->anchor);
              targetted = frames_find_target(handle, p);
d1726 2
a1727 2
              /* Don't want to ever open a new window if configured */
              /* to run full screen.                                */
d1729 21
a1749 20
              if (targetted || choices.full_screen)
              {
                /* If a named target was found, open in that. Otherwise we must */
                /* be running full screen, so can't open a new window; in this  */
                /* case, open in the ancestor.                                  */

                ChkError(fetchpage_new(targetted ? targetted : ancestor,
                                       p->anchor,
                                       1));
              }
              else
              {
                /* If we've reached here, a named target wasn't found but the */
                /* browser isn't running full screen either, so open a new    */
                /* window with the name specified in the link.                */

                ChkError(windows_create_browser(p->anchor,
                                                NULL,
                                                NULL,
                                                p->target));
d1751 14
d1766 6
a1771 12

            /* Yes, this 'else' would mean that even if running */
            /* full screen, an Adjust click would open a new    */
            /* window - but note the fixed.ignoreadjust choices */
            /* option, which disables the use of adjust and can */
            /* be used in conjunction with the full screen      */
            /* option.                                          */

            else ChkError(windows_create_browser(p->anchor,
                          NULL,
                          NULL,
                          NULL));
@


1.2
log
@Altered dialler status reporting to be more efficient (only installs the null handler when it needs the online time)
@
text
@a31 2
#include "unixlib.h" /* For case insensitive strcmps only */

d60 1
d1631 4
d1781 2
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d2621 1
a2621 1
  if (handle->url_bar) ChkError(toolbars_update_dialler(handle));
d2651 2
a2652 1
    handle_dialler_display(0, NULL, NULL, b);
@
