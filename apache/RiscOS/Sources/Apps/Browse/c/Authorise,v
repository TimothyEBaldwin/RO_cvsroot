head	1.12;
access;
symbols
	Browse-2_16:1.12
	Browse-2_15:1.12
	Browse-2_14:1.12
	Browse-2_13:1.12
	Browse-2_12:1.12
	Browse-2_11:1.12
	Browse-2_10:1.12
	Browse-2_09:1.12
	ahodgkin_208_i4_2:1.12
	ahodgkin_208_i4:1.9
	ahodgkin_208_i3:1.9
	ahodgkin_208_i2:1.9
	ahodgkin_208_i1:1.9
	ahodgkin_207release:1.9
	ahodgkin_206release:1.9
	ahodgkin_205release:1.8
	ahodgkin_204release:1.8
	ahodgkin_202release:1.8
	ahodgkin_201release:1.7
	ahodgkin_200release:1.7
	ahodgkin_133beta:1.7
	ahodgkin_132beta:1.7
	ahodgkin_131beta:1.7
	ahodgkin_130beta:1.7
	ahodgkin_129:1.7
	ahodgkin_128beta:1.6
	ahodgkin_128alpha:1.6
	ahodgkin_127beta2:1.6
	ahodgkin_127beta:1.6
	ahodgkin_126beta:1.6
	ahodgkin_AW97patch:1.6
	ahodgkin_AW97:1.6;
locks; strict;
comment	@# @;


1.12
date	2000.11.14.08.45.05;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	2000.05.31.15.58.26;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	2000.03.03.11.11.32;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	98.07.09.10.27.01;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	98.03.20.12.12.24;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	97.12.12.11.17.40;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.09.22.07.43.07;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.09.12.17.19.16;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.08.31.18.38.11;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.08.28.16.07.48;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.08.18.09.23.48;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.28.19;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.12
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Authorise.c                                       */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Browser remote authorisation services.            */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 24-Apr-1997 (ADH): Created.                       */
/*          25-May-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#include <stdlib.h>
#include <string.h>

#include <tboxlibs/flex.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <tboxlibs/event.h>

#include <tboxlibs/toolbox.h>
#include <tboxlibs/window.h>
#include <tboxlibs/gadgets.h>

#include "Global.h"
#include "Utils.h"

#include "Browser.h"
#include "Fetch.h" /* (Which itself includes URLstat.h) */
#include "Toolbars.h"
#include "URLutils.h"
#include "Windows.h"

#include "Authorise.h"

/* Locals */

static ObjectId authorise_dbox = 0;
static char     current_realm[Limits_Realm];

/**************************************************************/
/* authorise_create_dialogue()                                */
/*                                                            */
/* Creates an authorisation dialogue and installs relevant    */
/* event handlers with a given client handle. If the dialogue */
/* already exists then old handlers are removed and new ones  */
/* installed.                                                 */
/*                                                            */
/* Parameters: The client handle to pass to the event         */
/*             handlers, as a void *;                         */
/*                                                            */
/*             Pointer to an ObjectId, in which the ObjectId  */
/*             of the dialogue will be written (may be NULL). */
/**************************************************************/

_kernel_oserror * authorise_create_dialogue(void * handle, ObjectId * id)
{
  if (authorise_dbox)
  {
    /* If there's already a dialogue, remove event handlers that */
    /* are already present prior to installing new ones. This is */
    /* to allow the client handle to change.                     */

    RetError(event_deregister_toolbox_handlers_for_object(authorise_dbox));
  }
  else
  {
    /* Otherwise, create the dialogue */

    RetError(toolbox_create_object(0, "Authorise", &authorise_dbox));

    /* Set a client handle of 0 for now. If, when we come to proceed with */
    /* authorisation, we find this is still zero, then a browser page     */
    /* fetch is assumed. Otherwise, the fetch handle (URLStat.c) for the  */
    /* image is in there (and lasttoken points us to the token the image  */
    /* represents, which leads us to the fetch URL, which leads us to the */
    /* host to associate with the user name and password).                */

    RetError(toolbox_set_client_handle(0, authorise_dbox, NULL));

    /* Modify writables if necessary */

    {
      char username[Limits_AuthUserWrit];
      char password[Limits_AuthPassWrit];

      /* First, the user name writable */

      RetError(windows_process_component_text(authorise_dbox, AuthUserWrit, username, sizeof(username), 0, 1));

      /* Next, the password writable */

      RetError(windows_process_component_text(authorise_dbox, AuthPassWrit, password, sizeof(password), 0, 1));
    }
  }

  if (id) *id = authorise_dbox;

  /* Install the event handlers and exit */

  RetError(event_register_toolbox_handler(authorise_dbox,
                                          Window_HasBeenHidden,
                                          authorise_cancel,
                                          handle));

  RetError(event_register_toolbox_handler(authorise_dbox,
                                          EAuthAuthorise,
                                          authorise_authorise,
                                          handle));

  /* Animation handler if there's an appropriate gadget */

  {
    int temp_type;

    if (
         controls.dbox_anims &&
         !gadget_get_type(0, authorise_dbox, StatusBarAnimAnim, &temp_type)
       )
       register_null_claimant(Wimp_ENull,
                              toolbars_animate_slow,
                              (void *) authorise_dbox);
  }

  return event_register_toolbox_handler(authorise_dbox,
                                        EAuthCancel,
                                        authorise_cancel,
                                        handle);
}

/**************************************************************/
/* authorise_return_dialogue_id()                             */
/*                                                            */
/* Returns the ID of the current authorisation dialogue (will */
/* be 0 if there is no dialogue present at the moment).       */
/*                                                            */
/* Returns: Object ID of the authorisation dbox.              */
/**************************************************************/

ObjectId authorise_return_dialogue_id(void)
{
  return authorise_dbox;
}

/**************************************************************/
/* authorise_authorise()                                      */
/*                                                            */
/* Accepts changes in an authorisation dialogue and proceeds  */
/* with the authorisation request.                            */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int authorise_authorise(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  char              host     [Limits_HostName];
  char              username [Limits_AuthUserWrit];
  char              password [Limits_AuthPassWrit];
  unsigned int      h;
  urlstat         * up;
  _kernel_oserror * e;
  browser_data    * b = (browser_data *) handle;
  char            * url;

  /* Check for a client handle */

  ChkError(toolbox_get_client_handle(0, authorise_dbox, (void *) &h));

  /* Read the user name and password from the authorisation dialogue */

  ChkError(writablefield_get_value(0, authorise_dbox, AuthUserWrit, username, sizeof(username), NULL));
  ChkError(writablefield_get_value(0, authorise_dbox, AuthPassWrit, password, sizeof(password), NULL));

  username[sizeof(username) - 1] = 0;
  password[sizeof(password) - 1] = 0;

  /* Work out the host name */

  if (h == 0) up = NULL;
  else        up = urlstat_find_entry(h);

  if (up == NULL || up->lasttoken == NULL || up->lasttoken->src == NULL)
  {
    url = browser_fetch_url(b);
  }
  else
  {
    url = up->lasttoken->src;
  }

  urlutils_host_name_from_url(url, host, sizeof(host));

  /* Try to remember the authentication details. Note that the current_realm */
  /* contents are taken to be correct as the realm for this request; this    */
  /* will always be OK at the time of writing the code as only one request   */
  /* can ever be in progress, but if this should change the code will need   */
  /* to be altered to cope. Can't see why it would though; the user only has */
  /* the one pair of hands and (usually) the one keyboard. Programming for   */
  /* aliens, perhaps...?                                                     */

  ChkError(authorise_remember(host, current_realm, username, password));

  /* Can get rid of the authorisation dialogue now */

  ChkError(event_deregister_toolbox_handlers_for_object(authorise_dbox));

  /* If there was a null handler for the dialogue, remove it */

  {
    int temp_type;

    if (
         controls.dbox_anims &&
         !gadget_get_type(0, authorise_dbox, StatusBarAnimAnim, &temp_type)
       )
       deregister_null_claimant(Wimp_ENull,
                                toolbars_animate_slow,
                                (browser_data *) authorise_dbox);
  }

  /* Can't use ChkError now; instead must run through fetch_authorisation_fail, */
  /* or the user could be left stuck in authentication mode.                    */

  e = toolbox_delete_object(0, authorise_dbox);

  if (e)
  {
    fetch_authorisation_fail(b);
    return 1;
  }

  authorise_dbox = 0;

  /* Call the fetcher's routines to proceed, and exit */

  fetch_authorisation_proceed(b, up, current_realm, url);

  return 1;
}

/**************************************************************/
/* authorise_cancel()                                         */
/*                                                            */
/* Discards any changes in an authorisation dialogue,         */
/* deleting it if Adjust isn't being used at the time. If the */
/* dialogue is deleted the appropriate steps are taken to     */
/* indicate authorisation failure to the user.                */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int authorise_cancel(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  WimpGetPointerInfoBlock info;

  if (!authorise_dbox) return 0;

  ChkError(wimp_get_pointer_info(&info));

  if (eventcode == EAuthCancel && (info.button_state & Wimp_MouseButtonAdjust))
  {
    /* Clear the password and user name writables */

    ChkError(writablefield_set_value(0, authorise_dbox, AuthPassWrit, ""));
    ChkError(writablefield_set_value(0, authorise_dbox, AuthUserWrit, ""));
  }
  else
  {
    /* Deregister event handlers and delete the dialogue. Note */
    /* the use of authorise_dbox rather than idb->self_id; if  */
    /* this handler managed to get called on some odd ID or    */
    /* or with a null ID block it'll still work.               */

    ChkError(event_deregister_toolbox_handlers_for_object(authorise_dbox));

    /* If there was a null handler for the dialogue, remove it */

    {
      int temp_type;

      if (
           controls.dbox_anims &&
           !gadget_get_type(0, authorise_dbox, StatusBarAnimAnim, &temp_type)
         )
         deregister_null_claimant(Wimp_ENull,
                                  toolbars_animate_slow,
                                  (void *) authorise_dbox);
    }

    /* No error check; want to drop through to the fail routine */
    /* regardless.                                              */

    toolbox_delete_object(0, authorise_dbox);
    authorise_dbox = 0;

    fetch_authorisation_fail((void *) handle);
  }

  return 1;
}

/**************************************************************/
/* authorise_read_realm()                                     */
/*                                                            */
/* Given a pointer to a string holding an appropriate part of */
/* an HTTP response header detailing the realm for an         */
/* authentication request, extract the realm and put it into  */
/* the local static char array 'current_realm'.               */
/*                                                            */
/* Parameters: Pointer to the header entry string.            */
/*                                                            */
/* Returns:    Pointer to the current_realm string.           */
/**************************************************************/

char * authorise_read_realm(char * header_entry)
{
  char * p = header_entry;

  /* The realm lies between two double quotes */

  while (*p && *p != '"') p++;
  if (*p) p++;

  StrNCpy0(current_realm, p);

  p = current_realm;

  while(*p && *p != '"') p++;

  *p = 0;

  return current_realm;
}

/**************************************************************/
/* authorise_find_offset()                                    */
/*                                                            */
/* Returns the offset of the authorisation data for a given   */
/* realm and host, or -1 if none is present / can be found.   */
/*                                                            */
/* Parameters: Pointer to the host string;                    */
/*                                                            */
/*             Pointer to the realm string.                   */
/*                                                            */
/* Returns:    Offset into the 'authorise' flex block that    */
/*             the given entry lies at, or -1 if not found.   */
/**************************************************************/

int authorise_find_offset(char * host, char * realm)
{
  int o, s, l;

  /* Only proceed if there's allocated data to look at! */

  if (authorise)
  {
    o = 0;
    s = flex_size((flex_ptr) &authorise);

    while (o < s)
    {
      l = strlen(authorise + o) + 1; /* Length of host string  */

      /* If the host and realm match, return the current offset */

      if (!strcmp(authorise + o, host) && !strcmp(authorise + o + l, realm)) return o;

      /* Skip o past the host string and find the length of the realm string */

      o += l;
      l = strlen(authorise + o) + 1;

      /* Skip o past the realm string and find the length of the user name string */

      o += l;
      l = strlen(authorise + o) + 1;

      /* Skip o past the realm string and find the length of the password string */

      o += l;
      l = strlen(authorise + o) + 1;

      /* Skip o past the password string to get to the next entry */

      o += l;
    }
  }

  /* Failed to find the given host / realm, so return -1 */

  return -1;
}

/**************************************************************/
/* authorise_find_user_name()                                 */
/*                                                            */
/* Returns an offset into the 'authorise' flex block at which */
/* the user name for a given host and realm lies, or -1 for   */
/* not found.                                                 */
/*                                                            */
/* Parameters: Pointer to the host string;                    */
/*                                                            */
/*             Pointer to the realm string.                   */
/*                                                            */
/* Returns:    Offset into the 'authorise' flex block that    */
/*             the user name lies at, or -1 if not found.     */
/**************************************************************/

int authorise_find_user_name(char * host, char * realm)
{
  int o;

  o = authorise_find_offset(host, realm);
  if (o < 0) return -1;

  o += strlen(authorise + o) + 1; /* Skip over host  */
  o += strlen(authorise + o) + 1; /* Skip over realm */

  return o;
}

/**************************************************************/
/* authorise_find_password()                                  */
/*                                                            */
/* Returns an offset into the 'authorise' flex block at which */
/* the password for a given host and realm lies, or -1 for    */
/* not found.                                                 */
/*                                                            */
/* Parameters: Pointer to the host string;                    */
/*                                                            */
/*             Pointer to the realm string.                   */
/*                                                            */
/* Returns:    Offset into the 'authorise' flex block that    */
/*             the password list at, or -1 if not found.      */
/**************************************************************/

int authorise_find_password(char * host, char * realm)
{
  int o;

  o = authorise_find_offset(host, realm);
  if (o < 0) return -1;

  o += strlen(authorise + o) + 1; /* Skip over host      */
  o += strlen(authorise + o) + 1; /* Skip over realm     */
  o += strlen(authorise + o) + 1; /* Skip over user name */

  return o;
}

/**************************************************************/
/* authorise_remember()                                       */
/*                                                            */
/* Stores authorisation data in the 'authorise' flex block.   */
/*                                                            */
/* Parameters: Pointer to the host string;                    */
/*                                                            */
/*             Pointer to the realm string;                   */
/*                                                            */
/*             Pointer to the user name string;               */
/*                                                            */
/*             Pointer to the password string.                */
/**************************************************************/

_kernel_oserror * authorise_remember(char * host, char * realm, char * username, char * password)
{
  int s, n, ok;

  /* Don't want to store something twice... */

  authorise_forget(host, realm);

  /* n is the entry length for the data, including terminators */

  n = strlen(host) + 1 + strlen(realm) + 1 + strlen(username) + 1 +strlen(password) + 1;

  /* Allocate memory for the entry */

  if (authorise) s = flex_size((flex_ptr) &authorise);
  else           s = 0;

  if (s) ok = flex_extend((flex_ptr) &authorise, s + n);
  else   ok = flex_alloc ((flex_ptr) &authorise, n);

  if (!ok) return make_no_fetch_memory_error(11);

  /* Copy the data in place */

  strcpy(authorise + s, host);     s += strlen(authorise + s) + 1;
  strcpy(authorise + s, realm);    s += strlen(authorise + s) + 1;
  strcpy(authorise + s, username); s += strlen(authorise + s) + 1;
  strcpy(authorise + s, password);

  return(NULL);
}

/**************************************************************/
/* authorise_forget()                                         */
/*                                                            */
/* Discards remembered user name and password data for a      */
/* given host and realm.                                      */
/*                                                            */
/* Parameters: Pointer to the host string;                    */
/*                                                            */
/*             Pointer to the realm string.                   */
/**************************************************************/

void authorise_forget(char * host, char * realm)
{
  int o;

  o = authorise_find_offset(host, realm);

  /* Only proceed if there does seem to be an entry for this host and realm */

  if (o >= 0)
  {
    int l, s, n;

    s = flex_size((flex_ptr) &authorise);
    n = 0;

    l = strlen(authorise + o) + 1; n += l; o += l; /* Skip host      */
    l = strlen(authorise + o) + 1; n += l; o += l; /* Skip realm     */
    l = strlen(authorise + o) + 1; n += l; o += l; /* Skip user name */
    l = strlen(authorise + o) + 1; n += l; o += l; /* Skip password  */

    /* If the entry above was as long or apparently longer than the flex block */
    /* itself, free the whole block.                                           */

    if (n >= s)
    {
      flex_free((flex_ptr) &authorise);
      authorise = NULL;
    }

    /* Otherwise, move data above the entry down over it and shrink the flex block */

    else
    {
      memmove(authorise + o, authorise + o + n, s - o - n);
      flex_extend((flex_ptr) &authorise, s - n);
    }
  }
}
@


1.11
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@a40 5
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

@


1.10
log
@
Authorisation works for image fetches. Previously authorise_authorise
assumed any check was for a browser page. Now looks at the dialogue box
client handle, which is 0 for the page or a fetch handle for an image.
The urlstat structure this relates to now has lasttoken filled in for
the token the image represents, which gives the URL to which the
user name and password relate.
@
text
@d15 12
a26 10
/***************************************************/
/* File   : Authorise.c                            */
/*                                                 */
/* Purpose: Browser remote authorisation services  */
/*          (aka. authentication).                 */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 24-Apr-97: Created.                    */
/***************************************************/
d31 1
a31 1
#include "flex.h"
d33 12
a44 3
#include "wimp.h"
#include "wimplib.h"
#include "event.h"
a45 5
#include "toolbox.h"
#include "window.h"
#include "gadgets.h"

#include "svcprint.h"
d62 14
a75 16
/*************************************************/
/* authorise_create_dialogue()                   */
/*                                               */
/* Creates an authorisation dialogue and         */
/* installs relevant event handlers with a given */
/* client handle. If the dialogue already exists */
/* then old handlers are removed and new ones    */
/* installed.                                    */
/*                                               */
/* Parameters: The client handle to pass to the  */
/*             event handlers, as a void *;      */
/*                                               */
/*             Pointer to an ObjectId, in which  */
/*             the ObjectId of the dialogue will */
/*             be written (may be NULL).         */
/*************************************************/
d152 8
a159 9
/*************************************************/
/* authorise_return_dialogue_id()                */
/*                                               */
/* Returns the ID of the current authorisation   */
/* dialogue (will be 0 if there is no dialogue   */
/* present at the moment).                       */
/*                                               */
/* Returns: Object ID of the authorisation dbox. */
/*************************************************/
d166 8
a173 9
/*************************************************/
/* authorise_authorise()                         */
/*                                               */
/* Accepts changes in an authorisation dialogue  */
/* and proceeds with the authorisation request.  */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d262 10
a271 12
/*************************************************/
/* authorise_cancel()                            */
/*                                               */
/* Discards any changes in an authorisation      */
/* dialogue, deleting it if Adjust isn't being   */
/* used at the time. If the dialogue is deleted  */
/* the appropriate steps are taken to indicate   */
/* authorisation failure to the user.            */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/
d323 12
a334 15
/*************************************************/
/* authorise_read_realm()                        */
/*                                               */
/* Given a pointer to a string holding an        */
/* appropriate part of an HTTP response header   */
/* detailing the realm for an authentication     */
/* request, extract the realm and put it into    */
/* the local static char array 'current_realm'.  */
/*                                               */
/* Parameters: Pointer to the header entry       */
/*             string.                           */
/*                                               */
/* Returns:    Pointer to the current_realm      */
/*             string.                           */
/*************************************************/
d356 13
a368 15
/*************************************************/
/* authorise_find_offset()                       */
/*                                               */
/* Returns the offset of the authorisation data  */
/* for a given realm and host, or -1 if none is  */
/* present / can be found.                       */
/*                                               */
/* Parameters: Pointer to the host string;       */
/*                                               */
/*             Pointer to the realm string.      */
/*                                               */
/* Returns:    Offset into the 'authorise' flex  */
/*             block that the given entry lies   */
/*             at, or -1 if not found.           */
/*************************************************/
d415 14
a428 15
/*************************************************/
/* authorise_find_user_name()                    */
/*                                               */
/* Returns an offset into the 'authorise' flex   */
/* block at which the user name for a given host */
/* and realm lies, or -1 for not found.          */
/*                                               */
/* Parameters: Pointer to the host string;       */
/*                                               */
/*             Pointer to the realm string.      */
/*                                               */
/* Returns:    Offset into the 'authorise' flex  */
/*             block that the user name lies at, */
/*             or -1 if not found.               */
/*************************************************/
d443 14
a456 15
/*************************************************/
/* authorise_find_password()                     */
/*                                               */
/* Returns an offset into the 'authorise' flex   */
/* block at which the password for a given host  */
/* and realm lies, or -1 for not found.          */
/*                                               */
/* Parameters: Pointer to the host string;       */
/*                                               */
/*             Pointer to the realm string.      */
/*                                               */
/* Returns:    Offset into the 'authorise' flex  */
/*             block that the password list at,  */
/*             or -1 if not found.               */
/*************************************************/
d472 13
a484 14
/*************************************************/
/* authorise_remember()                          */
/*                                               */
/* Stores authorisation data in the 'authorise'  */
/* flex block.                                   */
/*                                               */
/* Parameters: Pointer to the host string;       */
/*                                               */
/*             Pointer to the realm string;      */
/*                                               */
/*             Pointer to the user name string;  */
/*                                               */
/*             Pointer to the password string.   */
/*************************************************/
d518 10
a527 10
/*************************************************/
/* authorise_forget()                            */
/*                                               */
/* Discards remembered user name and password    */
/* data for a given host and realm.              */
/*                                               */
/* Parameters: Pointer to the host string;       */
/*                                               */
/*             Pointer to the realm string.      */
/*************************************************/
@


1.9
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d89 6
a94 1
    /* Set a client handle of 0 for now */
d178 2
d182 5
d198 13
a210 1
  urlutils_host_name_from_url(browser_fetch_url(b), host, sizeof(host));
d244 1
d255 1
a255 1
  fetch_authorisation_proceed(b, NULL, current_realm, browser_fetch_url(b));
@


1.8
log
@Programming warehouse link removed from all hotlists - the page has gone.

Some compile-time hacks in place to use MemLib, a dynamic area based
malloc replacement which shrinks its heap when possible. All builds
have these switched off at the moment. Seemed to work with just Browse,
though there would be problems with message blocks stored in dynamic
areas because of the Wimp's '&3800000' check - however, it failed when
HTMLLib was made to use it, too. Don't know why yet.

ItemInfo.[c/h] source added, with Res file additions for testbed Browse
and Phoenix.

Small fetch windows now work properly regardless of toolbar settings
in the Choices.

Reload now reloads all images too, rather than only reloading them for
as long as the main page was being fetched.

Added a simple 'Find' facility.

Realised that event handlers in eventlib are called in reverse order
of registration, so the miscellaneous event handler is now registered
first rather than last.

Multiuser code added (most only active if SINGLE_USER is undefined). As
part of this, hotlist code now knows about read-only items (done for the
Customer-style 'Resources' file, but works generally anyway).
handle_add_hotlist doesn't try to save the hotlist itself anymore (the
hotlist_add function does all that through hotlist_modified anyway).

Customer build Choices and Controls updated slightly (e.g. ClaimHelp
off, hotlist to save on quit only).

Customer build now uses Phoenix-style buttons. Sprites files which
worked at the time (but will probably be out of date now) and included
most of the original Customer-style sprites are in
'Utils.Icons.Customer'.

Choices, Messages and Res files for all builds now stripped down to only
single user items or single plus multiuser for Customer build and testbed
build. Before, all contained a few multiuser bits in at least the Choices
file if not more.

Grammatical error ("Fetching frames contents" (sic.)) corrected in
default message, Toolbars.c, and all of the Messages files.

Customer build brought back to a servicable level (including
implementation of the Find dialogue box with animation and fixing
up authorisation and 'Stop' state in the tristate). Quite a few
missing #ifndef REMOTE_HOTLIST bits from hotlist code added...

Customer build will not use <Choices$Write> or Boot:Choices for any
file finding now. UseProxy defaults to 'yes', MaxImages to 2. Res
file includes Proxy Address setting (save_save_choices() now writes
the ProxyAddress line).
@
text
@d57 1
a57 1
/* authorise_create_dialogue                     */
d256 1
a256 1
  if (info.button_state & Wimp_MouseButtonAdjust)
@


1.7
log
@There are a few known significant problems with this code but it's being
checked in so the Choices can be worked on. Note that Res files etc. are
not up to date across all builds. Progress is as follows...

Bug report prompted me to do this - now ignore <p> tags straight after
<li> tags, so '<ul><li><p>Some text' works as the author (or automatic
generator, more commonly) intended.

A <p> tag before a table will be acted upon now (it was ignored before).
Something like <li><p><table...> will give a line break and paragraph
space after the <li> despite the changes mentioned above, as in other browsers.
Both browsers differ from Navigator, where the table appears alongside
the <li> tag.

Multiple BR tags work as in MSIE / Navigator (they don't collapse to
zero height anymore).

For the above, line height (and so, <br><br> or <p> spacing) is now
calculated inside reformat_text_line_height, and is used with either
a token to get the text height at a given size (e.g. for general line
spacing or multiple BR tags) or NULL for normal size text (e.g. for
P spacing, though this value is in practice later scaled by 7/8ths in
reformat_check_height). Note this behaviour is exhibited by MSIE 4;
v3 gave two BRs the same spacing as one P (i.e. not font size
dependent).

Save dialogues can have an option button or couple of radios to
switch between various formats (e.g. URI or URL, sprite or original
format). See 'Docs.Notes' for more. The back-end to this is now
implemented (i.e. at the moment, save as URI or URL, save as original
image format). Note that when saving background images, a leafname
based on the original fetch URL is now offered rather than a generic
'Background'.

Internal URL scheme changed to be all lower case, so relativisation
through URL_Fetcher still makes sense... :-/

Holding down 'shift' when clicking on stop reverses the interpretation
of the Controls file 'StopWebServe' entry.

Fixed row / column count for exporting tables as text; fixed a few
bits and pieces of internal URL scheme stuff which got broken when
HTMLLib started using URL_Fetcher's relativisation.
@
text
@a50 4
/* Globals */

char * authorise = NULL; /* Flex block to hold authorisation data */

@


1.6
log
@Now working on source merged with Kevin Bracey's internationalisation
support. UNIFONT is undefined in the Make File for now. All Res and
Choices files updated appropriately.

Having sorted out the old Choices and Messages to form Choices, Controls
and Messages, this build has had the same cleaning up done internally.
This includes greater consistency in naming schemes and the removal of
the inconsitent choices items - e.g. Choices file entries saying 'delay
images' and 'plain backgrounds' where internally all the flags say 'show
images' and 'show backgrounds'. ChoiceDefs.h and CtrlDefs.h added to
clarify the meaning of some fields, though usage of these is not 100%
in the source (there are cases where parameters are passed through to
functions as ints, and those functions still check these against hard
coded values rather than the #define stuff).

Fetcher status return bits (connected, sent request, etc.) now reflected
in status bar. Progress during fetchs to files are reported by %, where
the size of the object is known. Exceeding 100% drops back to a byte
counter, in case the estimated size was wrong. The progress counter
may be updated after specific delays, rather than 'as often as possible',
to reduce flicker (as requested by D.Brown some time ago).

I've done a small rewrite of the fetch prioritisation scheme in FetchPage.c;
how well this performs in general use across different processor speeds
remains to be tested, but certainly it has some advantages. For each small
fetch window before the rewrite, a 4cs tight loop was entered - this gave a
noticable and substantial drain to the Desktop performance if more than one
was opened. Now, several can be up at once with little hit. The actual file
fetch is on half the priority it was before, with all others taken back
just a bit - e.g. from 20cs per poll to 15cs per poll for flat out
reformatting. You don't seem to lose much time on the format in practice,
and the Desktop feels quite a bit lighter at the same time. There's the
potential for smoother frameset loading in this scheme, too.

When Shift+Clicking on a link meant you still fetched inside the main
browser window, several fetches could occur in a frameset - one per frame.
However, now that you can only do this by clicking on a link that leads to
non-displayable data - or by turning off the small fetch windows by
setting UseSmall to 'no' in Choices - a bug where fetchpage_preprocessed
would stop such fetches as new ones were started was revealed.
The API to frames_abort_fetching has now been extended to include a
'stop file spooling too' flag, allowing a fix to be made by having
fetchpage_preprocess's calls not set this (and it doesn't check the
savelink flag is unset before proceeding, since frames_abort_fetching
does that implicitly now).

Had left the RAM transfer buffer at 16 bytes (from testing) accidentally...
Oops. Upped it to 4K. In addition, when loading data by RAM transfer,
the browser didn't notice if a RAMFetch bounced during the transfer. It
would be treated as a 'first' RAMFetch bounce, basically, and try to go to
file transfer - oops. Fixed.
@
text
@a78 2
  _kernel_oserror * e;

@


1.5
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d135 1
a135 1
         fixed.dboxanims &&
d214 1
a214 1
         fixed.dboxanims                                              &&
d284 1
a284 1
           fixed.dboxanims                                              &&
@


1.4
log
@Created Protocols source file and moved a lot of message handling from
handle_messages - the latter now serves as a high level distributor to
lower level functions in Protocols. Incidentally, URL files (as used by
the ANT suite) can be loaded by dragging to the browser in the same way
as URI files - Not A Lot Of People Know That, etc.

Merged new hotlist display type Res file to existing resources, added
support for DataSave message so items can be dragged from the hotlist
to a specific window (RAM transfer for URI and URL files; ScrapFile for
HTML and Text but deleted afterwards and there are appropriate guards
to stop Reload just saying 'not found'; images run through ScrapFile and
there is no choice but to leave them there and do a conventional fetch).

All !RunD files now give a WimpSlot of 2304K. Some small changes to
the Argo and Ursula build Res files to make the menu trees more sensible.
Controls files now take 'file:/' instead of 'file://' in Protocols
section. Definitions at top of URLutils.c *not* altered, as then you
end up with invalid URLs - so it will accept 'file:/', but always generate
'file://'. This is because some browsers exports 'file:/'. Sigh.

make_no_[..._]memory_error functions now return a _kernel_oserror * rather
than void. It's always &erb returned, but it enables users to use a more
elegant 'return make_no_memory_error(1);', say, rather than something
like 'make_no_memory_error(1); return &erb;'. I obviously should've written
it like that at the outset, but never mind. All callers have been
appropriately updated.

The urlutils_leafname_from_url function now replaces illegal characters
(A7000 Welcome Guide p54...) in the leaf with legal alternatives.

Internal URL scheme is now a bit cleaner, with everything properly defined
in URLutils.h. All references to http:, file: and ftp:, with or without
a following '//' use the definitions in here now.

More tidying and some reorganising of Hotlist source. Auto-open delay is
now a Choices item. Some dependencies on statics removed (e.g. the
counting functions don't accumulate into the global item_number now).
The redraw functions used Wimp_TextOp - oops, so this has been amended
to use whatever is supported on your Wimp. This is now in a new function
(utils_text_width()), which the History menu routines also use (there was
a bug in the width routine there anyway, which is therefore fixed in
passing). Several other routines used Wimp_TextOp directly too, and
they have been altered to use the new function as well.

In hotlist code, one of the larger changes is in the API to hotlist_draw_r()
(formerly _hotlist_draw()) which now takes item widths and heights as
parameters - discovering these is quite slow, so doing it every time the
function calls itself recursively is a little less efficient than
passing the values in from elsewhere. Note that underscore prefixed
functions are being slowly renamed to _r suffixed functions, to match
the convention established by Tony Cheal with is table routines. This
makes it much more obvious when something is recursive, as the same
naming convention is used in every browser source file.

Finally, note that I intend to ditch SaveDBox and use an alternate window
with manual control of the messaging in Protocols.c. This will allow
various improvements which at present the SaveDBox operational methods
preclude. I'm going to have to do at least an alternate Window object for
the SaveDBox module to use soon in any case. Getting rid of SaveDBox will
help reduce, if only slightly, demands on the RMA.
@
text
@d135 2
a136 2
         fixed.dboxanims                                              &&
         !gadget_get_type(0, authorise_dbox, DisplayAnim, &temp_type)
d215 1
a215 1
         !gadget_get_type(0, authorise_dbox, DisplayAnim, &temp_type)
d285 1
a285 1
           !gadget_get_type(0, authorise_dbox, DisplayAnim, &temp_type)
@


1.3
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d495 1
a495 5
  if (!ok)
  {
    make_no_fetch_memory_error(11);
    return &erb;
  }
@


1.2
log
@Updated Makefile to work better in folding text editors. More or less rewrote
Limits.h, and ensured consistent comment styling throughout all sources.
Fetch.c/h split to Fetch, FetchHTML and URLveneer. URLstat.c/h produced to
cope with this. OpenURL and Find sources created from bits in the Windows
source file that shouldn't have been there... These will get filled out
shortly. Note that a few functions in Fetch are due to be renamed and moved;
probably to Tokenutils.
@
text
@a40 1
#include "TBEvents.h"
d87 1
a87 2
    e = event_deregister_toolbox_handlers_for_object(authorise_dbox);
    if (e) return e;
d93 1
a93 2
    e = toolbox_create_object(0, "Authorise", &authorise_dbox);
    if (e) return e;
d97 1
a97 2
    e = toolbox_set_client_handle(0, authorise_dbox, NULL);
    if (e) return e;
d107 1
a107 2
      e = windows_process_component_text(authorise_dbox, AuthUserWrit, username, sizeof(username), 0, 1);
      if (e) return e;
d111 1
a111 2
      e = windows_process_component_text(authorise_dbox, AuthPassWrit, password, sizeof(password), 0, 1);
      if (e) return e;
d119 9
a127 11
  e = event_register_toolbox_handler(authorise_dbox,
                                     Window_HasBeenHidden,
                                     authorise_cancel,
                                     handle);
  if (e) return e;

  e = event_register_toolbox_handler(authorise_dbox,
                                     EAuthAuthorise,
                                     authorise_authorise,
                                     handle);
  if (e) return e;
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d17 4
a20 3
/* Purpose: Browser remote authorisation services. */
/*          Not called Authenticate.c as this is   */
/*          more than 10 chars...!                 */
d22 1
d45 1
a45 1
#include "Fetch.h"
d59 1
a59 1
static char     current_realm[128];
d106 2
a107 2
      char username[MaxAuthUser];
      char password[MaxAuthPass];
d184 4
a187 3
  char              host    [128];
  char              username[MaxAuthUser];
  char              password[MaxAuthUser];
a188 1
  _kernel_oserror * e;
d195 3
a567 2

/*************************************************/
@
