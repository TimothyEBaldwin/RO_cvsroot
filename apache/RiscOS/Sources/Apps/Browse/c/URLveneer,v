head	1.8;
access;
symbols
	Browse-2_16:1.8
	Browse-2_15:1.8
	Browse-2_14:1.8
	Browse-2_13:1.8
	Browse-2_12:1.8
	Browse-2_11:1.8
	Browse-2_10:1.8
	Browse-2_09:1.8
	ahodgkin_208_i4_2:1.8
	ahodgkin_208_i4:1.6
	ahodgkin_208_i3:1.6
	ahodgkin_208_i2:1.6
	ahodgkin_208_i1:1.6
	ahodgkin_207release:1.6
	ahodgkin_206release:1.6
	ahodgkin_205release:1.5
	ahodgkin_204release:1.5
	ahodgkin_202release:1.5
	ahodgkin_201release:1.5
	ahodgkin_200release:1.5
	ahodgkin_133beta:1.5
	ahodgkin_132beta:1.5
	ahodgkin_131beta:1.5
	ahodgkin_130beta:1.5
	ahodgkin_129:1.5
	ahodgkin_128beta:1.5
	ahodgkin_128alpha:1.5
	ahodgkin_127beta2:1.5
	ahodgkin_127beta:1.5
	ahodgkin_126beta:1.3
	ahodgkin_AW97patch:1.3
	ahodgkin_AW97:1.3;
locks; strict;
comment	@# @;


1.8
date	2000.11.14.08.45.08;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	2000.05.31.15.58.50;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	98.07.09.10.27.29;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.11.20.16.04.41;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.11.05.15.25.57;	author kbracey;	state Exp;
branches;
next	1.3;

1.3
date	97.10.03.18.30.55;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.10.03.09.19.07;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.08.18.09.24.08;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.8
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    URLveneer.c                                       */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Veneer to the URL_Fetcher module SWIs.            */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 17-Aug-1997 (ADH): Created from Fetch.h.          */
/*          23-May-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/event.h>

#include "Global.h"
#include "Utils.h"

#include "JavaScript.h"
#include "URLutils.h"

#include "URLveneer.h"

/**************************************************************/
/* url_register()                                             */
/*                                                            */
/* Registers a requirement to fetch a URL with the URL        */
/* module.                                                    */
/*                                                            */
/* Parameters: Flags (must be 0 at present);                  */
/*                                                            */
/*             Pointer to int into which the session handle   */
/*             is placed. May be NULL.                        */
/**************************************************************/

_kernel_oserror * url_register(unsigned int flags, unsigned int * handle)
{
  _kernel_oserror * e;
  unsigned int      h;

  /* If there's a pointer to put the handle into, set it to zero initially */

  if (handle) *handle = 0;

  e = _swix(URL_Register,
            _IN(0) | _OUT(1),

            flags,

            &h);

  /* If the call didn't return an error, store the session handle */

  if ((!e) && (handle)) *handle = h;

  #ifdef TRACE

    if (!e) dprintf(("Fetc", "url_register: Registered ID %d\n",*handle));
    else    dprintf(("Fetc", "url_register: Exitting with error\n"));

  #endif

  return e;
}

/**************************************************************/
/* url_deregister()                                           */
/*                                                            */
/* Deregisters a requirement to fetch a URL with the URL      */
/* module.                                                    */
/*                                                            */
/* Parameters: Flags (must be 0 at present);                  */
/*                                                            */
/*             The session handle.                            */
/**************************************************************/

_kernel_oserror * url_deregister(unsigned int flags, unsigned int handle)
{
  dprintf(("Fetc", "url_deregister: Deregistering ID %d\n",handle));

  /* Abort any current action */

  url_stop(flags,handle);

  /* Deregister the session */

  return _swix(URL_Deregister,
               _INR(0,1),

               flags,
               handle);
}

/**************************************************************/
/* url_stop()                                                 */
/*                                                            */
/* Interrupts a fetch if one is going on.                     */
/*                                                            */
/* Parameters: Flags (must be 0 at present);                  */
/*                                                            */
/*             The session handle.                            */
/**************************************************************/

_kernel_oserror * url_stop(unsigned int flags, unsigned int handle)
{
  dprintf(("Fetc", "url_stop: Stop with ID %d\n",handle));

  return _swix(URL_Stop,
               _INR(0,1),

               flags,
               handle);
}

/**************************************************************/
/* url_get_url()                                              */
/*                                                            */
/* Starts fetching data from a URL.                           */
/*                                                            */
/* Parameters: Flags - if URL_GetURL_AgentGiven (see          */
/*             URLveneer.h) is set, this function works out   */
/*             the agent string so you don't need to pass it  */
/*             in externally;                                 */
/*                                                            */
/*             The session handle;                            */
/*                                                            */
/*             The fetch method, as in html_get in            */
/*             FetchHTML.c;                                   */
/*                                                            */
/*             Pointer to URL to fetch;                       */
/*                                                            */
/*             Pointer to a pointer to any extra data to send */
/*             for POST etc. (this allows such data to be     */
/*             stored in a flex block - you'd pass the        */
/*             pointer to the flex anchor);                   */
/*                                                            */
/*             Pointer to an int into which a status flag is  */
/*             placed (this may be NULL);                     */
/*                                                            */
/*             The fetch mode:                                */
/*                                                            */
/*             0: Get data only,                              */
/*             1: Get header only,                            */
/*             2: Get both.                                   */
/**************************************************************/

_kernel_oserror * url_get_url(unsigned int flags, unsigned int handle, int method, char * url,
                              char ** extradata, unsigned int * status, int mode)
{
  char              agent[Limits_UserAgent];
  _kernel_oserror * e = NULL;
  int               s;

  agent[0] = '\0';

  dprintf(("Fetc", "url_get_url: Called with ID %d\n",handle));

  /* If a pointer to the int in which status information can be written */
  /* is not NULL, set the current status to 0                           */

  if (status) *status = 0;

  /* Only proceed if we have a URL, and it's not an internal */
  /* or JavaScript URL.                                      */

  if (
       url &&
       strncmp(url, Internal_URL, strlen(Internal_URL))

       #ifdef JAVASCRIPT

         && !javascript_url(url)

       #endif
     )
  {
    #ifdef DUMP_HEADERS
      {
        FILE * file;

        file = fopen("<Wimp$ScrapDir>.Headers", "ab");

        if (!extradata || !*extradata || !**extradata) fprintf(file, "Fetch URL '%s'; sending standard header\r\n\r\n", url);
        else
        {
          fprintf(file, "Fetch URL '%s'; sending standard header plus:\r\n\r\n%s\r\n", url, *extradata);
          if ((*extradata)[strlen(*extradata) - 1] != '\n') fprintf(file, "\r\n");
        }

        fclose(file);
      }
    #endif

    /* We may need to work out the user agent string */

    if (flags & URL_GetURL_AgentGiven)
    {
      utils_build_user_agent_string(choices.clone, agent, sizeof(agent));
    }

    /* Now call the SWI - it can take a while to complete, */
    /* so turn the hourglass on.                           */

    _swix(Hourglass_Start, _IN(0), 50);

    e = _swix(URL_GetURL,
              _INR(0,6) | _OUT(0),

              flags,
              handle,
              method,
              url,
              *extradata,
              mode,
              agent,

              &s);

    _swix(Hourglass_Off, 0);

    /* If the GetURL call didn't return an error, write the new status */

    if (status && !e) *status = s;
  }

  #ifdef TRACE

    if (!e) dprintf(("Fetc", "url_get_url: Successful\n"));
    else    dprintf(("Fetc", "url_get_url: Exitting with error\n"));

  #endif

  return e;
}

/**************************************************************/
/* url_read_data()                                            */
/*                                                            */
/* Asks the URL module to copy some of the data it has        */
/* fetched over into a buffer.                                */
/*                                                            */
/* Parameters: Flags (must be 0 at present);                  */
/*                                                            */
/*             The session handle;                            */
/*                                                            */
/*             Pointer to buffer into which the data is       */
/*             transferred, or NULL to just get a Pending     */
/*             state;                                         */
/*                                                            */
/*             The size of the buffer;                        */
/*                                                            */
/*             Pointer to an int, into which a status word is */
/*             placed;                                        */
/*                                                            */
/*             Pointer to int, into which the number of bytes */
/*             read (and put in the bufrer) is placed;        */
/*                                                            */
/*             Pointer to int, into which the number of bytes */
/*             that are still to be fetched s placed.         */
/**************************************************************/

_kernel_oserror * url_read_data(unsigned int flags, unsigned int handle, void * buffer,
                                int size, int * status, int * read, int * pending)
{

  _kernel_oserror * e;
  int               s, r, p = 0;

  dprintf(("Fetc", "url_read_data: Called with ID %d\n",handle));

  /* Ensure all returned data is set to a sensible default to start with */

  if (status)  * status  = 0;
  if (read)    * read    = 0;
  if (pending) * pending = 0;

  /* Call the URL module */

  e = _swix(URL_ReadData,
            _INR(0,3) | _OUT(0) | _OUTR(4,5),

            flags,
            handle,
            buffer,
            size,

            &s,
            &r,
            &p);

  dprintf(("Fetc", "url_read_data: Status &%08X, error &%08X returned\n", s, (int) e));

  /* In the absence of any errors, fill in the relevant returned data */

  if (!e)
  {
    if (status)  *status  = s;
    if (read)    *read    = r;
    if (pending) *pending = p;
  }

  #ifdef TRACE

    if (!e) dprintf(("Fetc", "url_read_data: Successful\n"));
    else    dprintf(("Fetc", "url_read_data: Exitting with error\n"));

  #endif

  return e;
}

/**************************************************************/
/* url_status()                                               */
/*                                                            */
/* Returns the status of a fetch.                             */
/*                                                            */
/* Parameters: Flags (must be 0 at present);                  */
/*                                                            */
/*             The session handle;                            */
/*                                                            */
/*             Pointer to an int, into which a status word is */
/*             placed;                                        */
/*                                                            */
/*             Pointer to an int, into which the server's     */
/*             response is placed;                            */
/*                                                            */
/*             Pointer to an int, into which the number of    */
/*             bytes transferred so far is placed.            */
/**************************************************************/

_kernel_oserror * url_status(unsigned int flags, unsigned int handle,
                             int * status, int * response, int * bytes)
{
  _kernel_oserror * e;
  int               s, r, b;

  dprintf(("Fetc", "url_status: Called with ID %d\n",handle));

  /* Set returned data to zero to begin with */

  if (status)   *status   = 0;
  if (response) *response = 0;
  if (bytes)    *bytes    = 0;

  e = _swix(URL_Status,
            _INR(0,1) | _OUT(0) | _OUTR(2,3),

            flags,
            handle,

            &s,
            &r,
            &b);

  /* In the absence of an error, fill in the returned data */

  if (!e)
  {
    if (status)   *status   = s;
    if (response) *response = r;
    if (bytes)    *bytes    = b;
  }

  #ifdef TRACE

    if (!e) dprintf(("Fetc", "url_status: Successful\n"));
    else    dprintf(("Fetc", "url_status: Exitting with error\n"));

  #endif

  return e;
}

/**************************************************************/
/* url_set_proxy()                                            */
/*                                                            */
/* Instructs the URL module to fetch through a proxy (or      */
/* not).                                                      */
/*                                                            */
/* Parameters: Flags (must be 0 at present);                  */
/*                                                            */
/*             The session handle;                            */
/*                                                            */
/*             Pointer to the base URL of the proxy server,   */
/*             e.g. for a local proxy, "http://127.0.0.1/";   */
/*                                                            */
/*             Pointer to a string holding the protocol to    */
/*             use, e.g. "http:" or "ftp:";                   */
/*                                                            */
/*             1 to disable proxying, 0 to enable it with the */
/*             above data.                                    */
/**************************************************************/

_kernel_oserror * url_set_proxy(unsigned int flags, unsigned int session, char * baseurl,
                                char * protocol, int noproxy)
{
  return _swix(URL_SetProxy,
               _INR(0,4),

               flags,
               session,
               baseurl,
               protocol,
               noproxy);
}

/**************************************************************/
/* url_enumerate_schemes()                                    */
/*                                                            */
/* Ask for a scheme the URL module currently has available.   */
/*                                                            */
/* Parameters: Flags (must be 0 at present);                  */
/*                                                            */
/*             Pointer to an int to contain the context - the */
/*             int must hold 0 for the first call, and if on  */
/*             exit it holds -1 no scheme could be found for  */
/*             the given context on entry (e.g. all schemes   */
/*             have been listed);                             */
/*                                                            */
/*             Pointer to a const char *, which is filled in  */
/*             to point to the scheme name, unless the        */
/*             context int (see above) is -1 on exit, in      */
/*             which case the value should be ignored.        */
/**************************************************************/

_kernel_oserror * url_enumerate_schemes(unsigned int flags, int * context, const char ** scheme)
{
  return _swix(URL_EnumerateSchemes,
         _INR(0,1) | _OUTR(1,2),

         0,
         *context,

         context,
         scheme);
}
@


1.7
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@a37 5
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

d79 4
a82 5
    if (tl & (1u<<6))
    {
      if (!e) Printf("url_register: Registered ID %d\n",*handle);
      else Printf("url_register: Exitting with error\n");
    }
d101 1
a101 3
  #ifdef TRACE
    if (tl & (1u<<6)) Printf("url_deregister: Deregistering ID %d\n",handle);
  #endif
d128 1
a128 3
  #ifdef TRACE
    if (tl & (1u<<6)) Printf("url_stop: Stop with ID %d\n",handle);
  #endif
d178 1
a178 3
  #ifdef TRACE
    if (tl & (1u<<6)) Printf("url_get_url: Called with ID %d\n",handle);
  #endif
d249 4
a252 5
    if (tl & (1u<<6))
    {
      if (!e) Printf("url_get_url: Successful\n");
      else Printf("url_get_url: Exitting with error\n");
    }
d291 1
a291 3
  #ifdef TRACE
    if (tl & (1u<<6)) Printf("url_read_data: Called with ID %d\n",handle);
  #endif
d313 1
a313 3
  #ifdef TRACE
    if (tl & (1u<<6)) Printf("url_read_data: Status %p, error %p returned\n",s,e);
  #endif
d325 4
a328 5
    if (tl & (1u<<6))
    {
      if (!e) Printf("url_read_data: Successful\n");
      else Printf("url_read_data: Exitting with error\n");
    }
d359 1
a359 3
  #ifdef TRACE
    if (tl & (1u<<6)) Printf("url_status: Called with ID %d\n",handle);
  #endif
d387 4
a390 5
    if (tl & (1u<<6))
    {
      if (!e) Printf("url_status: Successful\n");
      else Printf("url_status: Exitting with error\n");
    }
@


1.6
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d15 12
a26 9
/***************************************************/
/* File   : URLveneer.c                            */
/*                                                 */
/* Purpose: Veneer to the URL_Fetcher module SWIs. */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 17-Aug-97: Created from Fetch.c.       */
/***************************************************/
d32 2
a33 1
#include "swis.h"
d35 7
a41 2
#include "wimp.h"
#include "event.h"
a42 1
#include "svcprint.h"
d51 11
a61 12
/*************************************************/
/* url_register()                                */
/*                                               */
/* Registers a requirement to fetch a URL with   */
/* the URL module.                               */
/*                                               */
/* Parameters: Flags (must be 0 at present);     */
/*                                               */
/*             Pointer to int into which the     */
/*             session handle is placed. May be  */
/*             NULL.                             */
/*************************************************/
d94 10
a103 10
/*************************************************/
/* url_deregister()                              */
/*                                               */
/* Deregisters a requirement to fetch a URL with */
/* the URL module.                               */
/*                                               */
/* Parameters: Flags (must be 0 at present);     */
/*                                               */
/*             The session handle.               */
/*************************************************/
d124 9
a132 9
/*************************************************/
/* url_stop()                                    */
/*                                               */
/* Interrupts a fetch if one is going on.        */
/*                                               */
/* Parameters: Flags (must be 0 at present);     */
/*                                               */
/*             The session handle.               */
/*************************************************/
d147 31
a177 34
/*************************************************/
/* url_get_url()                                 */
/*                                               */
/* Starts fetching data from a URL.              */
/*                                               */
/* Parameters: Flags - if URL_GetURL_AgentGiven  */
/*             (see URLveneer.h) is set, this    */
/*             function works out the agent      */
/*             string so you don't need to pass  */
/*             it in externally;                 */
/*                                               */
/*             The session handle;               */
/*                                               */
/*             The fetch method, as in html_get  */
/*             in FetchHTML.c;                   */
/*                                               */
/*             Pointer to URL to fetch;          */
/*                                               */
/*             Pointer to a pointer to any extra */
/*             data to send for POST etc. (this  */
/*             allows such data to be stored in  */
/*             a flex block - you'd pass the     */
/*             pointer to the flex anchor);      */
/*                                               */
/*             Pointer to an int into which a    */
/*             status flag is placed (this may   */
/*             be NULL);                         */
/*                                               */
/*             The fetch mode:                   */
/*                                               */
/*             0: Get data only,                 */
/*             1: Get header only,               */
/*             2: Get both.                      */
/*************************************************/
d271 25
a295 27
/*************************************************/
/* url_read_data()                               */
/*                                               */
/* Asks the URL module to copy some of the data  */
/* it has fetched over into a buffer.            */
/*                                               */
/* Parameters: Flags (must be 0 at present);     */
/*                                               */
/*             The session handle;               */
/*                                               */
/*             Pointer to buffer into which the  */
/*             data is transferred, or NULL to   */
/*             just get a Pending state;         */
/*                                               */
/*             The size of the buffer;           */
/*                                               */
/*             Pointer to an int, into which a   */
/*             status word is placed;            */
/*                                               */
/*             Pointer to int, into which the    */
/*             number of bytes read (and put in  */
/*             the bufrer) is placed;            */
/*                                               */
/*             Pointer to int, into which the    */
/*             number of bytes that are still to */
/*             be fetched s placed.              */
/*************************************************/
d352 18
a369 19
/*************************************************/
/* url_status()                                  */
/*                                               */
/* Returns the status of a fetch.                */
/*                                               */
/* Parameters: Flags (must be 0 at present);     */
/*                                               */
/*             The session handle;               */
/*                                               */
/*             Pointer to an int, into which a   */
/*             status word is placed;            */
/*                                               */
/*             Pointer to an int, into which the */
/*             server's response is placed;      */
/*                                               */
/*             Pointer to an int, into which the */
/*             number of bytes transferred so    */
/*             far is placed.                    */
/*************************************************/
d417 19
a435 21
/*************************************************/
/* url_set_proxy()                               */
/*                                               */
/* Instructs the URL module to fetch through a   */
/* proxy (or not).                               */
/*                                               */
/* Parameters: Flags (must be 0 at present);     */
/*                                               */
/*             The session handle;               */
/*                                               */
/*             Pointer to the base URL of the    */
/*             proxy server, e.g. for a local    */
/*             proxy, "http://127.0.0.1/";       */
/*                                               */
/*             Pointer to a string holding the   */
/*             protocol to use, e.g. "http:" or  */
/*             "ftp:";                           */
/*                                               */
/*             1 to disable proxying, 0 to       */
/*             enable it with the above data.    */
/*************************************************/
d450 18
a467 23
/*************************************************/
/* url_enumerate_schemes()                       */
/*                                               */
/* Ask for a scheme the URL module currently has */
/* available.                                    */
/*                                               */
/* Parameters: Flags (must be 0 at present);     */
/*                                               */
/*             Pointer to an int to contain the  */
/*             context - the int must hold 0 for */
/*             the first call, and if on exit it */
/*             holds -1 no scheme could be found */
/*             for the given context on entry    */
/*             (e.g. all schemes have been       */
/*             listed);                          */
/*                                               */
/*             Pointer to a const char *, which  */
/*             is filled in to point to the      */
/*             scheme name, unless the context   */
/*             int (see above) is -1 on exit,    */
/*             in which case the value should be */
/*             ignored.                          */
/*************************************************/
@


1.5
log
@Following the last check-in - all build resources brought up to date.

Adjust-click on forwards/backwards buttons did not work in the intermediate
build, and now does.

Adjust-click on form submission buttons where the submit method is POST
will now work correctly, as the new view inherits the extradata block
of the old. Failure of this is signalled through
make_no_fetch_memory_error, code 16 (see updated Errors file in Docs).
Note the name change of extradata in this context; more details below.

The passing of forms POST data and extra headers for sending in an
HTTP request via. the URL module was all done through pointers into
flex blocks, and was therefore very unsafe. All relevant functions now
use pointers to pointers to the data.

To remove confusion on the umpteen uses of the word 'extradata', the field
in browser_data has been renamed to 'post_data'. The 'extradata' parameters
used within FetchPage.c were all disconnected from the extra header info /
form POST data stuff that extradata is usually associated with, and have
thus also been renamed, in this case to 'appnddata' (Append Data).

As well as X-NoProxy, the browser sends the 'proper' HTTP headers
Pragma:no-cache and Cache-Control:no-cache.

A redirection from a POST request was not handled correctly; despite
what HTTP specs say, you're supposed to use GET for the new URL. The
browser was, but when it chopped off the redundant header data in the
request didn't terminate it and left Content-Type in anyway...! Fixed.

Ctrl+Tab implemented - URL completion. Comes from the hotlist URLs,
hotlist titles, history hosts, paths, full URLs and lastly titles.
See code comments for more (history_find_match, hotlist_find_match).

TableSupport option added to Choices; it is read, can be set by the
front-end, but doesn't actually do anything else yet.

Reversed Choices' semantics on 'don't expire by...' for History. Added
'needs_redraw' flag to choices_get_contents so that, for example, if the
table border types change, browsers get redrawn.
@
text
@d38 1
d193 2
a194 1
  /* Only proceed if we have a URL, and it's not an internal one */
d196 10
a205 1
  if (url && strncmp(url, Internal_URL, strlen(Internal_URL)))
d438 1
a438 1
_kernel_oserror * url_set_proxy(int flags, unsigned int session, char * baseurl,
d449 36
@


1.4
log
@Added system font option to choices.
Stopped UNIFONT forcing system font use and added calls to Font_WideFormat.
Made sure the system font option is read before fm_init is called!

User agent string now set if Netscape faking is disabled (format used is
"Acorn Browse/1.26 (RISC OS 3.71)".
@
text
@d152 2
a153 2
/*             The fetch method, as in the       */
/*             html_get function above;          */
d157 5
a161 2
/*             Pointer to any extra data to send */
/*             for POST etc.;                    */
d175 1
a175 1
                              char * extradata, unsigned int * status, int mode)
d202 1
a202 1
        if (!extradata || (extradata && extradata[0] == 0)) fprintf(file, "Fetch URL '%s'; sending standard header\r\n\r\n", url);
d205 2
a206 2
          fprintf(file, "Fetch URL '%s'; sending standard header plus:\r\n\r\n%s\r\n", url, extradata);
          if (extradata[strlen(extradata) - 1] != '\n') fprintf(file, "\r\n");
d232 1
a232 1
              extradata,
@


1.3
log
@Fixed problem that affected some internal URLs, most noticably loading
external images, where up->fetching was set to zero when it should have
been left at 1 (see fetch shutdown code at about line 1670 in FetchHTML.c).

*This* is the source that will be sent to PSI, not the previous release as
stated in the log, though Customer were sent a browser based on this
previous code.
@
text
@d212 1
a212 1
    if ((flags & URL_GetURL_AgentGiven) && (choices.clone))
d214 1
a214 1
      utils_build_user_agent_string(agent, sizeof(agent));
@


1.2
log
@Version in Messages taken to 1.22 (03 Oct).

Updated Res files in appropriate builds to hold various (similar) Choices
designs.

Choices related menus were flagged as Shared, but none of the dialogues
(including ColourDBox) were - potential future problems, though shouldn't
cause any leaks at present. This has been sorted out anyway.

Encoding function encoding_init no longer returns an error from
toolbox_create_object, so the Encoding menu and all those attached
to it do not have to be present (e.g. the Customer build).

SUB, SUP, STRIKE and U supported. U underlines the baseline of the body text
font, whilst STRIKE will go through roughly the middle of the lower case
chars even if the font is SUP or SUB. Note that Navigator appears to shift
the underline point for SUB and SUP; it may be necessary to copy this
behaviour, but testing on real sites must proceed before that. There could
also be a problem with the automatic lowering of font size, which Navigator
doesn't do, so any FONT SIZE = -n commands could make it too small. Again,
this needs testing on real sites.

'http://' is added to URLs with no protocol specified, unless they start with
'ftp.', in which case the new behaviour is to add 'ftp://'.

Choices code altered to do less error checking on components! They should be
able to be missing without raising errors. Referencing of the subwindow
array changed from *(subwindows + number) to subwindows[number].

Made trace_tag_name code look pretty...

reformat_useless_token now checks tagno is non-zero.

User Agent string setting now done through URL_GetURL, on a per-session
basis.

Ellipsis character removed from all Messages files, replaced with '...'.
There's little difference between the two in an outline font, and in System
font the latter looks much better. Smart quotes left in, as they look
better in all cases.
@
text
@d189 1
a189 3
  if (url && !strncmp(url, Internal_URL, strlen(Internal_URL)))
  {
    /* For an internal URL, don't try to actually use the URL module... */
d191 1
a191 3
    if (status) *status = 0;
  }
  else
@


1.1
log
@Updated Makefile to work better in folding text editors. More or less rewrote
Limits.h, and ensured consistent comment styling throughout all sources.
Fetch.c/h split to Fetch, FetchHTML and URLveneer. URLstat.c/h produced to
cope with this. OpenURL and Find sources created from bits in the Windows
source file that shouldn't have been there... These will get filled out
shortly. Note that a few functions in Fetch are due to be renamed and moved;
probably to Tokenutils.
@
text
@d144 5
a148 1
/* Parameters: Flags (must be 0 at present);     */
d174 1
d178 2
d214 10
d227 1
a227 1
              _INR(0,5) | _OUT(0),
d235 1
@
