head	1.63;
access;
symbols
	Browse-2_16:1.63
	Browse-2_15:1.63
	Browse-2_14:1.63
	Browse-2_13:1.62
	Browse-2_12:1.62
	Browse-2_11:1.61
	Browse-2_10:1.60
	Browse-2_09:1.60
	ahodgkin_208_i4_2:1.59
	ahodgkin_208_i4:1.57
	ahodgkin_208_i3:1.57
	ahodgkin_208_i2:1.56
	ahodgkin_208_i1:1.55
	ahodgkin_207release:1.53
	ahodgkin_206release:1.49
	ahodgkin_205release:1.48
	ahodgkin_204release:1.48
	ahodgkin_202release:1.46
	ahodgkin_201release:1.45
	ahodgkin_200release:1.45
	ahodgkin_133beta:1.45
	ahodgkin_132beta:1.44
	ahodgkin_131beta:1.43
	ahodgkin_130beta:1.41
	ahodgkin_129:1.41
	ahodgkin_128beta:1.41
	ahodgkin_128alpha:1.40
	ahodgkin_127beta2:1.37
	ahodgkin_127beta:1.37
	ahodgkin_126beta:1.34
	ahodgkin_AW97patch:1.32
	ahodgkin_AW97:1.27;
locks; strict;
comment	@# @;


1.63
date	2007.10.18.11.19.37;	author ahodgkin;	state Exp;
branches;
next	1.62;

1.62
date	2006.03.13.22.06.19;	author ahodgkin;	state Exp;
branches;
next	1.61;

1.61
date	2005.09.16.18.32.49;	author ahodgkin;	state Exp;
branches;
next	1.60;

1.60
date	2005.04.26.09.42.34;	author ahodgkin;	state Exp;
branches;
next	1.59;

1.59
date	2000.11.14.08.45.06;	author ahodgkin;	state Exp;
branches;
next	1.58;

1.58
date	2000.05.31.15.58.40;	author ahodgkin;	state Exp;
branches;
next	1.57;

1.57
date	2000.03.01.08.45.33;	author ahodgkin;	state Exp;
branches;
next	1.56;

1.56
date	2000.02.25.17.08.53;	author ahodgkin;	state Exp;
branches;
next	1.55;

1.55
date	99.09.02.13.10.25;	author ahodgkin;	state Exp;
branches;
next	1.54;

1.54
date	99.03.30.15.51.52;	author ahodgkin;	state Exp;
branches;
next	1.53;

1.53
date	98.10.13.16.34.03;	author ahodgkin;	state Exp;
branches;
next	1.52;

1.52
date	98.09.23.13.18.11;	author ahodgkin;	state Exp;
branches;
next	1.51;

1.51
date	98.09.07.11.46.54;	author ahodgkin;	state Exp;
branches;
next	1.50;

1.50
date	98.07.23.13.26.41;	author sbrodie;	state Exp;
branches;
next	1.49;

1.49
date	98.07.09.10.27.15;	author ahodgkin;	state Exp;
branches;
next	1.48;

1.48
date	98.04.16.08.14.16;	author ahodgkin;	state Exp;
branches;
next	1.47;

1.47
date	98.03.26.14.21.08;	author ahodgkin;	state Exp;
branches;
next	1.46;

1.46
date	98.03.20.12.12.48;	author ahodgkin;	state Exp;
branches;
next	1.45;

1.45
date	98.02.13.17.32.14;	author ahodgkin;	state Exp;
branches;
next	1.44;

1.44
date	98.02.06.13.55.20;	author ahodgkin;	state Exp;
branches;
next	1.43;

1.43
date	98.01.31.10.55.24;	author ahodgkin;	state Exp;
branches;
next	1.42;

1.42
date	98.01.05.11.33.55;	author dbrown;	state Exp;
branches;
next	1.41;

1.41
date	97.12.04.11.22.47;	author ahodgkin;	state Exp;
branches;
next	1.40;

1.40
date	97.12.02.16.13.54;	author ahodgkin;	state Exp;
branches;
next	1.39;

1.39
date	97.11.28.15.35.49;	author kbracey;	state Exp;
branches;
next	1.38;

1.38
date	97.11.26.17.11.06;	author ahodgkin;	state Exp;
branches;
next	1.37;

1.37
date	97.11.20.16.04.38;	author ahodgkin;	state Exp;
branches;
next	1.36;

1.36
date	97.11.19.10.29.03;	author ahodgkin;	state Exp;
branches;
next	1.35;

1.35
date	97.11.05.15.25.56;	author kbracey;	state Exp;
branches;
next	1.34;

1.34
date	97.10.30.17.11.06;	author ahodgkin;	state Exp;
branches;
next	1.33;

1.33
date	97.10.30.16.35.28;	author kbracey;	state Exp;
branches;
next	1.32;

1.32
date	97.10.24.14.09.16;	author ahodgkin;	state Exp;
branches;
next	1.31;

1.31
date	97.10.22.13.15.55;	author ahodgkin;	state Exp;
branches;
next	1.30;

1.30
date	97.10.20.07.09.21;	author ahodgkin;	state Exp;
branches;
next	1.29;

1.29
date	97.10.17.14.15.56;	author dbrown;	state Exp;
branches;
next	1.28;

1.28
date	97.10.17.11.08.18;	author dbrown;	state Exp;
branches;
next	1.27;

1.27
date	97.10.16.13.23.15;	author ahodgkin;	state Exp;
branches;
next	1.26;

1.26
date	97.10.13.07.06.58;	author ahodgkin;	state Exp;
branches;
next	1.25;

1.25
date	97.10.09.10.52.05;	author ahodgkin;	state Exp;
branches;
next	1.24;

1.24
date	97.10.05.17.16.22;	author ahodgkin;	state Exp;
branches;
next	1.23;

1.23
date	97.10.01.17.17.56;	author ahodgkin;	state Exp;
branches;
next	1.22;

1.22
date	97.09.29.11.24.13;	author dbrown;	state Exp;
branches;
next	1.21;

1.21
date	97.09.26.12.36.05;	author ahodgkin;	state Exp;
branches;
next	1.20;

1.20
date	97.09.22.16.34.28;	author ahodgkin;	state Exp;
branches;
next	1.19;

1.19
date	97.09.22.16.31.19;	author ahodgkin;	state Exp;
branches;
next	1.18;

1.18
date	97.09.22.11.51.12;	author ahodgkin;	state Exp;
branches;
next	1.17;

1.17
date	97.09.22.07.43.18;	author ahodgkin;	state Exp;
branches;
next	1.16;

1.16
date	97.09.18.12.37.19;	author kbracey;	state Exp;
branches;
next	1.15;

1.15
date	97.09.18.08.59.01;	author ahodgkin;	state Exp;
branches;
next	1.14;

1.14
date	97.09.14.19.18.14;	author ahodgkin;	state Exp;
branches;
next	1.13;

1.13
date	97.09.12.17.19.26;	author ahodgkin;	state Exp;
branches;
next	1.12;

1.12
date	97.09.09.14.13.17;	author ahodgkin;	state Exp;
branches;
next	1.11;

1.11
date	97.09.02.15.46.00;	author ahodgkin;	state Exp;
branches;
next	1.10;

1.10
date	97.08.31.18.38.19;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	97.08.28.16.08.02;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	97.08.18.13.17.00;	author kbracey;	state Exp;
branches;
next	1.7;

1.7
date	97.08.18.09.24.00;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	97.08.08.16.38.53;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	97.08.05.08.42.58;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	97.07.31.14.50.14;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.07.30.12.39.10;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.07.25.12.52.32;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.15.28.46;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.63
log
@  Multiple application fixes to work in Batch Two environment.
Detail:
  As summary.
Admin:
  Tested in prototype Batch Two build environment on an Iyonix.
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Main.c                                            */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: To run.                                           */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 12-Nov-1996 (ADH): Created.                       */
/*          24-May-2000 (ADH): 64-wide comments adopted.      */
/*          10-Nov-2000 (ADH): Completed switch to DebugLib.  */
/**************************************************************/

#include <setjmp.h>
#include <signal.h>

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

#include <kernel.h>
#include <swis.h>
#include <tboxlibs/flex.h>

#include <HTMLLib/HTMLLib.h>
#include <URI.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <tboxlibs/event.h>

#include <tboxlibs/toolbox.h>
#include <tboxlibs/quit.h>
#include <tboxlibs/proginfo.h>
#include <tboxlibs/window.h>
#include <tboxlibs/menu.h>
#include <tboxlibs/saveas.h>
#include <tboxlibs/printdbox.h>
#include <tboxlibs/gadgets.h>

#include <ImageLib/imagetrans.h>

#include "Global.h"
#include "FromROSLib.h"
#include "TBEvents.h" /* Which includes loads of stuff... */
#include "Utils.h"

#include "Browser.h"
#include "ChoiceDefs.h"
#include "CtrlDefs.h"
#include "Encoding.h"
#include "EventLogs.h"
#include "FontManage.h"
#include "Handlers.h"
#include "History.h"
#include "ImgHistory.h"
#include "JavaScript.h"
#include "Markers.h"
#include "MiscDefs.h"
#include "Mouse.h"
#include "PlugIn.h"
#include "Protocols.h"
#include "RedrawCore.h"
#include "RMA.h"
#include "Save.h"
#include "URLutils.h"
#include "Windows.h"

/* Local compile-time options */

#undef INCLUDE_HEAPGRAPH
#undef INCLUDE_HIERPROF
#undef INCLUDE_MEMCHECK
#undef JS_USING_MEMLIB
#undef WRITE_DUMP_FILE_ON_ERROR

// /* Because parts of this source will be running right at the very   */
// /* start of program execution, we must be careful not to use any    */
// /* malloc replacements of any sort before the heap is set up.       */
// /*                                                                  */
// /* To this end, define routes back to the standard malloc() family. */
//
// #define real_malloc(size)       (malloc)(size)
// #define real_free(ptr)          (free)(ptr)
// #define real_realloc(ptr, size) (realloc)(ptr, size)
// #define real_calloc(n, size)    (calloc)(n, size)

/* JavaScript builds may use the reregisterable functions for */
/* malloc() etc. in NSPRLib. If this browser is built with    */
/* JAVASCRIPT and JS_USING_MEMLIB defined it will register    */
/* new functions, assuming NSPRLib was built to provide the   */
/* reregisterable malloc() support. These functions come from */
/* MemLib, so we need the header file.                        */
/*                                                            */
/* In addition to just NSPRLib using reregisterable functions */
/* building the browser with USE_NSPRLIB_ALLOC_REGISTRATION   */
/* defined activates a set of #defines in an NSPRLib header   */
/* file. These make all malloc etc. calls in the browser work */
/* through NSPRLib's reregisterable functions too. If not     */
/* doing this, we need to bring in the ROSallocs.h header     */
/* from NSPRLib to be able to at least reregister allocation  */
/* functions within NSPRLib itself.                           */

#ifdef JAVASCRIPT

  #ifdef JS_USING_MEMLIB

    #define os_error _kernel_oserror
    #include <MemLib/memheap.h>

    #ifndef USE_NSPRLIB_ALLOC_REGISTRATION
      #include <NSPRLib/ROSallocs.h>
    #endif

  #endif

#endif

/* Profilers, memory checkers, etc. */

#ifdef INCLUDE_HEAPGRAPH
  #include "HeapGraph.HeapGraph.h"
#endif

#ifdef INCLUDE_HIERPROF
  #define HierProf_PROFILE
  #include "HierProf:HierProf.h"
#endif

#ifdef INCLUDE_MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif

/* Finally, Main.h itself */

#include "Main.h"

/* A PRM-documented function that isn't exported in header files */

extern const char * _clib_version(void);

/* Static function prototypes */

static void              initialise_app      (void);

static _kernel_oserror * open_messages_file  (int which);
static void              close_messages_file (void * control);
static void              load_choices        (void);

#ifdef TRACE
  static void            self_test           (void);
#endif

static void              termination         (void);
static void              tidy_errors         (void);
static void              catch_errors        (int signum);

/* Make sure the stack starts at a reasonable size to prevent frequent */
/* stack extensions - this is a directive to the C run time system and */
/* can be removed on other systems which have no equivalent.           */

int __root_stack_size = 16384;

// /*************************************************/
// /* attach_event_handlers()                       */
// /*                                               */
// /* Called when an object is autocreated by the   */
// /* toolbox (see initialise_app). Used to get at  */
// /* the ObjectID of things without needing a      */
// /* specifically generated event to deliver it.   */
// /*************************************************/
//
// int attach_event_handlers(int eventcode,ToolboxEvent *event,IdBlock *idb,void *handle)
// {
//   ObjectId temp;
//
//   ToolboxObjectAutoCreatedEvent *c=(ToolboxObjectAutoCreatedEvent *) event;
//
//   /* We extract the relevant object Id by comparing the template name */
//   /* given in the event structure with something we know about and    */
//   /* proceeding as is relevant.                                       */
//
//   if (!strcmp(c->template_name,"Browser"))
//   {
//     main_window_id = idb->self_id;
//     show_centred(main_window_id);
//   }
//   else if (!strcmp(c->template_name,"ButtonBar"))
//   {
//     temp = idb->self_id;
//     {
//       BBox b;
//       b.xmin=0;
//       b.ymin=-144;
//       b.xmax=16384;
//       b.ymax=0;
//       set_corrected_extent(0,temp,&b);
//     }
//   }
//
//   return 1;
// }

/**************************************************************/
/* initialise_app()                                           */
/*                                                            */
/* Initialises application as a Toolbox task.                 */
/**************************************************************/

static void initialise_app(void)
{
  int module_version;
  int area_number;

  show_error(event_initialise(&idb));

  /* First handler registered is called last. This is a net to catch */
  /* miscellaneous events that might occur. Useful when there is a   */
  /* range of event codes defined for something, rather than just    */
  /* one code, for example.                                          */

  show_error(event_register_toolbox_handler(-1, -1, handle_miscellaneous_event, NULL));

  /* Register fundamental handlers and initialise as a Toolbox task */

  show_error(event_register_message_handler(Wimp_MQuit, handle_messages, NULL));
  show_error(event_register_toolbox_handler(-1, Toolbox_Error, report_toolbox_error, NULL));

  /* Check the Wimp version; for window managers of 3.8 and above, */
  /* declare a minimum version of 3.80 so borderless windows can   */
  /* still have tools. Otherwise, only ask for 3.1.                */

  _swix(Wimp_ReadSysInfo, _IN(0) | _OUT(0), 7, &module_version);

  if (module_version >= 387) nested_wimp = 1;
  else                       nested_wimp = 0;

  show_error(toolbox_initialise(0,
                                nested_wimp ? WIMPMINH : WIMPMINL,
                                messages_list,
                                event_code_list,
                                task_dir,
                                &meb,
                                &idb,
                                &wimp_version,
                                &task_handle,
                                (void *) &sprite_block));

  /* Remember the application name */

  StrNCpy0(program_name,
           lookup_token("_TaskName",1,0));

  /* Wake up flex */

  {
    static char main_da_name[128];

    StrNCpy0(main_da_name, program_name);

    lookup_token("DAGen:general store",0,0);

    if (strlen(main_da_name) + strlen(tokens) + 1 < sizeof(main_da_name))
    {
      strcat(main_da_name, " ");
      strcat(main_da_name, tokens);
    }

    area_number = flex_init(main_da_name, NULL, 0x8000000);
  }

  flex_set_budge(0);
  flex_set_deferred_compaction(1);

  /* Get MemLib running, giving an appropriate heap name */
  /* for the currently set build options.                */

  #ifdef JAVASCRIPT

    #ifdef JS_USING_MEMLIB

      /* If using JavaScript, bring up MemLib with a dynamic area */
      /* name based on the task name - e.g. 'Browse JavaScript'.  */

      /* First, register the functions */

      if (area_number != 0)
      {
        rosallocs_allocs r;

        r.rosallocs_free    = MemHeap_free;
        r.rosallocs_malloc  = MemHeap_malloc;
        r.rosallocs_calloc  = MemHeap_calloc;
        r.rosallocs_realloc = MemHeap_realloc;

        rosallocs_register(&r);
      }
      else
      {
        rosallocs_allocs r;

        r.rosallocs_free    = free;
        r.rosallocs_malloc  = malloc;
        r.rosallocs_calloc  = calloc;
        r.rosallocs_realloc = realloc;

        rosallocs_register(&r);
      }

      /* Now set up the dynamic area */

      {
        char da[128];

        StrNCpy0(da, program_name);

        lookup_token("DAJSc:JavaScript",0,0);

        if (strlen(da) + strlen(tokens) + 1 < sizeof(da))
        {
          strcat(da, " ");
          strcat(da, tokens);
        }

        MemHeap_Initialise(da);
      }

    #endif

// Right now, there is no 'else' case.
//
//  #else
//
//    /* We're using MemLib for general work, not just JavaScript */
//    /* (or not at all!)                                         */
//
//    MemHeap_Initialise2(flex_alloc,
//                        flex_extend);

  #endif

  /* Open the Choices and Controls files */

  cob = NULL;
  chb = NULL;

  show_error(open_messages_file(0));
  show_error(open_messages_file(1));

  /* If either failed, bomb out. Can't raise a custom error as we have no */
  /* messages file to read it from...                                     */

  if (!cob || !chb) exit(EXIT_FAILURE);

  /* If the system variable 'Browse$IssueDesktopCommand' is set to 'yes', */
  /* then the AcornURI and/or TaskModule modules were started in !Run and */
  /* we must issue a *Desktop command to start their task components.     */

  {
    char combuf[96];

    sprintf(combuf, "If \"<Browse$IssueDesktopCommand>\" = \"yes\" Then WimpTask Desktop\r\n");

    _swix(OS_CLI, /* Don't want to hear about any errors */
          _IN(0),

          combuf);
  }

  /* Quit menu items are set to give the Quit_Quit event type, as */
  /* well as this event possibly being delivered by the Toolbox   */
  /* from elsewhere.                                              */

  show_error(event_register_toolbox_handler(-1, Quit_Quit, handle_quit, NULL));

  /* Called before the application's Info box is shown */

  show_error(event_register_toolbox_handler(-1, ProgInfo_AboutToBeShown, handle_show_info, NULL));

  /* Opening and closing windows */

  show_error(event_register_toolbox_handler(-1, EOpenNewWindow, windows_new_browser,  NULL));
  show_error(event_register_toolbox_handler(-1, ECloseWindow,   windows_shut_browser, NULL));

  /* MayScroll indicator */

  show_error(event_register_toolbox_handler(-1, EScrollWindow, handle_may_scroll, NULL));

  /* Opening the Open URL dialogue */

  show_error(event_register_toolbox_handler(-1, EOpenToBeShownMisc, openurl_to_be_shown,       NULL));
  show_error(event_register_toolbox_handler(-1, EOpenToBeShownMenu, openurl_to_show_from_menu, NULL));

  /* Opening and closing the Choices dialogue */

  show_error(event_register_toolbox_handler(-1, ECDToBeShown, choices_to_be_shown, NULL));
  show_error(event_register_toolbox_handler(-1, ECDHidden,    choices_hidden,      NULL));

  /* Opening and closing the Event Logs / Event Log dialogues */

  show_error(event_register_toolbox_handler(-1, EEventLogsToBeShown, eventlogs_to_be_shown, NULL));
  show_error(event_register_toolbox_handler(-1, EEventLogToBeShown,  eventlog_to_be_shown,  NULL));

  /* For the Find dialogue */

  show_error(event_register_toolbox_handler(-1, EFindToBeShown, find_to_be_shown, NULL));
  show_error(event_register_toolbox_handler(-1, EFindHidden,    find_hidden,      NULL));

  /* Print and Print Style dialogues */

  show_error(event_register_toolbox_handler(-1, EPSToBeShown,             printstyle_to_be_shown, NULL));
  show_error(event_register_toolbox_handler(-1, PrintDbox_AboutToBeShown, print_to_be_shown,      NULL));

  /* List and List Add dialogues */

  show_error(event_register_toolbox_handler(-1, EListToBeShown,    list_to_be_shown,     NULL));
  show_error(event_register_toolbox_handler(-1, EListAddToBeShown, list_add_to_be_shown, NULL));

  /* Called whenever a menu item is selected */

  show_error(event_register_toolbox_handler(-1, Menu_Selection, menus_item_selected, NULL));

  /* Support the Help menu */

  show_error(event_register_toolbox_handler(-1, EHelpFromHelpString, menus_help_from_help_string, NULL));
  show_error(event_register_toolbox_handler(-1, EHelpReleaseNotes,   menus_help_release_notes,    NULL));
  show_error(event_register_toolbox_handler(-1, EHelpAboutPage,      menus_help_about_page,       NULL));

  /* Before showing and (in some cases) after closing menus */

  show_error(event_register_toolbox_handler(-1, EMainToBeShown,           menus_show_main,            NULL));
  show_error(event_register_toolbox_handler(-1, EUtilsToBeShown,          menus_show_utils,           NULL));
  show_error(event_register_toolbox_handler(-1, EExportToBeShown,         menus_show_export,          NULL));
  show_error(event_register_toolbox_handler(-1, EChoicesToBeShown,        menus_show_choices,         NULL));
  show_error(event_register_toolbox_handler(-1, EFileToBeShown,           menus_show_file,            NULL));
  show_error(event_register_toolbox_handler(-1, ENavigateToBeShown,       menus_show_navigate,        NULL));
  show_error(event_register_toolbox_handler(-1, EDocumentToBeShown,       menus_show_document,        NULL));
  show_error(event_register_toolbox_handler(-1, EDocumentHidden,          menus_hide_document,        NULL));
  show_error(event_register_toolbox_handler(-1, EEncodingToBeShown,       encoding_show_menu,         NULL));
  show_error(event_register_toolbox_handler(-1, EHistoryToBeShown,        menus_show_history,         NULL));
  show_error(event_register_toolbox_handler(-1, EMarkerActionsToBeShown,  menus_show_marker_actions,  NULL));
  show_error(event_register_toolbox_handler(-1, EMarkerListToBeShown,     menus_show_marker_list,     NULL));
  show_error(event_register_toolbox_handler(-1, EMarkerCombinedToBeShown, menus_show_marker_combined, NULL));
  show_error(event_register_toolbox_handler(-1, EURIHandlerToBeShown,     menus_show_uri,             NULL));
  show_error(event_register_toolbox_handler(-1, EListMenuToBeShown,       menus_show_list_menu,       NULL));
  show_error(event_register_toolbox_handler(-1, ELogToBeShown,            menus_show_log,             NULL));

  /* Called when the 'Cache' option is chosen from the main menu. */

  show_error(event_register_toolbox_handler(-1, EMainCache, menus_item_selected, NULL));

  /* Called when a selection is made from the Encoding menu. */

  show_error(event_register_toolbox_handler(-1, EEncodingSelect, encoding_select, NULL));

  /* Called when the user selects "From document" in the */
  /* Encoding menu.                                      */

  show_error(event_register_toolbox_handler(-1, EEncodingFromDocument, encoding_from_document_select, NULL));

  /* General key press handler */

  show_error(event_register_wimp_handler(-1, Wimp_EKeyPressed, handle_keys, NULL));

  /* Wimp handler for menu selections in forms etc. */

  show_error(event_register_wimp_handler(-1, Wimp_EMenuSelection, handle_menus, NULL));

  /* LoseCaret event handler for grabbing the caret back */

  show_error(event_register_wimp_handler(-1, Wimp_ELoseCaret, handle_lose_caret, NULL));

  /* Pointer checking */

  show_error(event_register_wimp_handler(-1, Wimp_EPointerEnteringWindow, browser_pointer_entering, NULL));
  show_error(event_register_wimp_handler(-1, Wimp_EPointerLeavingWindow,  browser_pointer_leaving,  NULL));

  /* Related to that, end of drag handling */

  show_error(event_register_wimp_handler(-1, Wimp_EUserDrag, (WimpEventHandler *) handle_drags, NULL));

  /* General Wimp message handling */

  show_error(event_register_message_handler(Wimp_MModeChange,   handle_messages, NULL));
  show_error(event_register_message_handler(Wimp_MDataLoad,     handle_messages, NULL));
  show_error(event_register_message_handler(Wimp_MDataLoadAck,  handle_messages, NULL));
  show_error(event_register_message_handler(Wimp_MDataSave,     handle_messages, NULL));
  /* (DataSaveAck is registered in the Printing section below) */
  show_error(event_register_message_handler(Wimp_MDataOpen,     handle_messages, NULL));
  show_error(event_register_message_handler(Wimp_MRAMFetch,     handle_messages, NULL));
  show_error(event_register_message_handler(Wimp_MRAMTransmit,  handle_messages, NULL));
  show_error(event_register_message_handler(Wimp_MMenusDeleted, handle_messages, NULL));

  /* ANT protocols */

  show_error(event_register_message_handler(Message_ANTOpenURL, handle_messages, NULL));

  /* Plug-In protocol */

  show_error(event_register_message_handler(Message_PlugIn_Open,           handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_Opening,        handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_Close,          handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_Closed,         handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_URLAccess,      handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_StreamNew,      handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_ReshapeRequest, handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_Status,         handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_Busy,           handle_messages, NULL));

  /* URI handler message handling */

  show_error(event_register_message_handler(URI_MStarted,      handle_messages, NULL));
  show_error(event_register_message_handler(URI_MDying,        handle_messages, NULL));
  show_error(event_register_message_handler(URI_MProcess,      handle_messages, NULL));
  show_error(event_register_message_handler(URI_MReturnResult, handle_messages, NULL));

  /* AppControl message handling */

  show_error(event_register_message_handler(Wimp_MAppControl, handle_messages, NULL));

  /* Printing related message handlers */

  show_error(event_register_message_handler(Browser_Message_PrintError,   handle_messages, NULL));
  show_error(event_register_message_handler(Browser_Message_PrintSave,    handle_messages, NULL));
  show_error(event_register_message_handler(Browser_Message_PrintTypeOdd, handle_messages, NULL));

  show_error(event_register_message_handler(Wimp_MDataSaveAck,            handle_messages, NULL));

  /* For message bounces */

  show_error(event_register_wimp_handler(-1, Wimp_EUserMessageAcknowledge, handle_ack, NULL));

  /* Debug build event handlers */

  #ifdef TRACE

    show_error(event_register_toolbox_handler(-1, ETraceTokenDumpByLine,   trace_dump_tokens_by_line,   NULL));
    show_error(event_register_toolbox_handler(-1, ETraceTokenDumpByStream, trace_dump_tokens_by_stream, NULL));

  #endif

  /* Event handlers for menu items that relate to toolbar buttons. */
  /* This list needs to be kept in sync with the specific list in  */
  /* Windows.c, which allows buttons in specific windows to use    */
  /* the same event codes.                                         */

  show_error(event_register_toolbox_handler(-1, EButtonBarHome,          handle_home,           NULL));
  show_error(event_register_toolbox_handler(-1, EButtonBarBack,          handle_back,           NULL));
  show_error(event_register_toolbox_handler(-1, EButtonBarForward,       handle_forwards,       NULL));
  show_error(event_register_toolbox_handler(-1, EButtonBarReload,        handle_reload,         NULL));
  show_error(event_register_toolbox_handler(-1, EButtonBarStop,          handle_stop,           NULL));
  show_error(event_register_toolbox_handler(-1, EButtonBarViewHotlist,   handle_view_hotlist,   NULL));
  show_error(event_register_toolbox_handler(-1, EButtonBarAddToHotlist,  handle_add_hotlist,    NULL));
  show_error(event_register_toolbox_handler(-1, EButtonBarViewResources, handle_view_resources, NULL));
  show_error(event_register_toolbox_handler(-1, EButtonBarLoadImages,    handle_load_images,    NULL));
  show_error(event_register_toolbox_handler(-1, EButtonBarViewSource,    handle_view_source,    NULL));
  show_error(event_register_toolbox_handler(-1, EButtonBarGoTo,          handle_go_to,          NULL));
  show_error(event_register_toolbox_handler(-1, EButtonBarGo,            handle_go,             NULL));
  show_error(event_register_toolbox_handler(-1, EButtonBarCancel,        handle_cancel,         NULL));

  show_error(event_register_toolbox_handler(-1, EButtonBarBistate,       handle_bistate,        NULL));
  show_error(event_register_toolbox_handler(-1, EButtonBarTristate,      handle_tristate,       NULL));

  show_error(event_register_toolbox_handler(-1, EButtonBarSaveSource,    handle_save_source,    NULL));
  show_error(event_register_toolbox_handler(-1, EButtonBarPrint,         handle_print,          NULL));
  show_error(event_register_toolbox_handler(-1, EButtonBarSaveAsText,    handle_save_as_text,   NULL));
  show_error(event_register_toolbox_handler(-1, EButtonBarSaveAsDraw,    handle_save_as_draw,   NULL));

  /* Miscellaneous event handlers for keyboard control of some functions */

  show_error(event_register_toolbox_handler(-1, EURLBarClearURL,      handle_clear_url,         NULL));
  show_error(event_register_toolbox_handler(-1, EURLBarToggleHistory, handle_show_history_menu, NULL));

  /* Event handlers for saving data */

  show_error(event_register_toolbox_handler(-1, ESaveFileToBeShown,                savefile_to_be_shown,         NULL));
  show_error(event_register_toolbox_handler(-1, ESaveObjectToBeShown,              saveobject_to_be_shown,       NULL));

  show_error(event_register_toolbox_handler(-1, ESaveFileShortcutSaveHTML,         savefile_raise_from_shortcut, NULL));
  show_error(event_register_toolbox_handler(-1, ESaveFileShortcutSaveLocation,     savefile_raise_from_shortcut, NULL));
  show_error(event_register_toolbox_handler(-1, ESaveFileShortcutExportDraw,       savefile_raise_from_shortcut, NULL));
  show_error(event_register_toolbox_handler(-1, ESaveFileShortcutExportText,       savefile_raise_from_shortcut, NULL));
  show_error(event_register_toolbox_handler(-1, ESaveFileShortcutExportLink,       savefile_raise_from_shortcut, NULL));
  show_error(event_register_toolbox_handler(-1, ESaveFileShortcutExportPicture,    savefile_raise_from_shortcut, NULL));
  show_error(event_register_toolbox_handler(-1, ESaveFileShortcutExportBackground, savefile_raise_from_shortcut, NULL));
  show_error(event_register_toolbox_handler(-1, ESaveFileShortcutSaveLog,          savefile_raise_from_shortcut, NULL));

  /* Event handlers for the Item Information dialogue */

  show_error(event_register_toolbox_handler(-1, EIIToBeShown,  iteminfo_to_be_shown, NULL));
  show_error(event_register_toolbox_handler(-1, EIIFollowLink, iteminfo_follow_link, NULL));
  show_error(event_register_toolbox_handler(-1, EIIExportItem, iteminfo_export_item, NULL));

  /* Initialise the HTML library. This is to set up some initial */
  /* data which can't be initialised in headers due to ROM build */
  /* considerations.                                             */

  HtmlInit();

  /* Similarly, initialise ImageLib */

  ImageLib_Init();
  ImageLib_SetInternalJPEG(1);

  /* Set up a default screen-based redraw table */

  redrawcore_default_table();

  /* Initialise FromROSLib routines */

  wimpt_read();

  /* Initialise Utils routines */

  read_os_to_points();

  #ifndef REMOTE_HOTLIST

    /* Initialise the hotlist */

    show_error(hotlist_initialise());

  #endif

  /* Initialise the encoding menu handler */

  show_error(encoding_init());

  /* Initialise the document position marker system */

  markers_init();

  /* Find the total number of animation frames for the status bar */

  animation_frames = 0;
  {
    char v[10];

    /* SpriteOp 40 is Read Info; it's just something that will give   */
    /* an error if the sprite doesn't exist.                          */

    do
    {
      sprintf(v, "a%d\0", animation_frames ++);
    }
    while (
            animation_frames < Limits_Misc_AnimFrames &&
            !(_swix(OS_SpriteOp,
                    _INR(0,2),

                    296,
                    sprite_block,
                    v))
          );

    /* animation_frames is incremented for every sprite looked at, */
    /* including the last one, which must not be found. So need to */
    /* subtract 1 now, to make it equal the number of frames.      */

    animation_frames --;
  }

  /* Similarly, find the number of bullets available */

  bullets = 0;
  {
    char v[10];

    do
    {
      sprintf(v,"b%d\0",bullets++);
    }
    while (
            bullets < Limits_Misc_Bullets &&
            !(_swix(OS_SpriteOp,
                    _INR(0,2),

                    296,
                    sprite_block,
                    v))
          );

    bullets --;
  }

  /* Is the URI handler available? */

  {
    int version;

    if (uri_version(0, &version)) uri_module_present = 0;
    else if (version >= 5)        uri_module_present = 1;
  }

  /* Find out window tool sizes */

  show_error(windows_initialise_tool_sizes());

  /* Wake up JavaScript */

  #ifdef JAVASCRIPT

    show_error(javascript_configure_environment());

  #endif
}

/**************************************************************/
/* open_messages_file()                                       */
/*                                                            */
/* Asks MessageTrans to open a Messages file. Looks through a */
/* system variable for the path to find the file in before    */
/* going to a default - see the code comments for more        */
/* information.                                               */
/*                                                            */
/* Parameters: 0 to load the Choices file, or 1 to load the   */
/*             Controls file.                                 */
/**************************************************************/

static _kernel_oserror * open_messages_file(int which)
{
  _kernel_oserror * e;
  MessagesFD      * control;
  char            * path = NULL;

  /* Work out what to open. */

  path = save_build_messages_path(which);

  if (!path) goto open_messages_file_no_memory;

  /* Claim RMA for the control block and pathname */

  e = rma_claim(NULL, sizeof(MessagesFD) + strlen(path) + 1, (void *) &control);

  if (e)
  {
    free(path);

    return e;
  }

  /* Update the relevant global. No need for a default case as */
  /* save_build_messages_path will have caught that.           */

  switch (which)
  {
    case 0: chb = control; break;
    case 1: cob = control; break;
  }

  /* Register the block with MemCheck if required, and copy */
  /* the pathname into it.                                  */

  #ifdef INCLUDE_MEMCHECK
    MemCheck_RegisterMiscBlock((void *) control, sizeof(MessagesFD) + strlen(path) + 1);
  #endif

  strcpy((char *) ((int) control + sizeof(MessagesFD)), path);

  /* Don't need the path now */

  free(path);
  path = NULL;

  /* Open the file */

  return _swix(MessageTrans_OpenFile,
               _INR(0,2),

               control,                            /* Pointer to control block */
               (int) control + sizeof(MessagesFD), /* Filename                 */
               0);                                 /* Buffer in RMA            */

  /* Error condition exit */

open_messages_file_no_memory:

  if (control) rma_release(NULL, control);

  if (path) free(path);

  return NULL;
}

/**************************************************************/
/* close_messages_file()                                      */
/*                                                            */
/* Closes a messges file and releases the RMA space claimed   */
/* for it.                                                    */
/*                                                            */
/* Parameters: Pointer to the allocated chunk of RMA space    */
/*             holding the MessageTrans control block and     */
/*             Messages file pathname.                        */
/**************************************************************/

static void close_messages_file(void * control)
{
  /* If the file won't close for some reason, */
  /* MessageTrans may still want to access it */
  /* - so safest *not* to release the RMA     */
  /* holding the control block and filename.  */

  if (
       _swix(MessageTrans_CloseFile,
             _IN(0),

             control)
     )
     return;

  /* Release the claimed RMA space holding the */
  /* control block and messages file name.     */

  rma_release(NULL, control);
}

/**************************************************************/
/* colour_table_leaf_to_path()                                */
/*                                                            */
/* Called by ImageLib. Print a full lookup table file         */
/* pathname into path given the leafname.                     */
/*                                                            */
/* Parameters: Pointer to output buffer for full pathname;    */
/*                                                            */
/*             Pointer to leaf name.                          */
/*                                                            */
/* Assumes:    Output buffer big enough :)                    */
/**************************************************************/

void colour_table_leaf_to_path(char *path, const char *leaf)
{
  sprintf(path, "%s.%s", task_dir, leaf);
}

/**************************************************************/
/* load_choices()                                             */
/*                                                            */
/* Reads in the choices from the Messages file, filling in    */
/* the global_choices structure, 'choices' (see Global.c and  */
/* Global.h).                                                 */
/**************************************************************/

static void load_choices(void)
{
  int temp;

  /* First, the user-configurable options from the Choices file. */

  /* Set the default home page */

  choices.home_page = malloc(strlen(lookup_choice("HomePage:http://www.acorn.co.uk/", 0, 0)) + 1);

  if (choices.home_page) strcpy(choices.home_page, tokens);
  else show_error(make_no_memory_error(32));

  /* Get the visit history, image history and hotlist paths */
  /* by a similar mechanism.                                */

  /* Image history */

  choices.image_history_path = malloc(strlen(lookup_choice("ImageHistoryPath:Browse:User.Images", 0, 0)) + 1);

  if (choices.image_history_path) strcpy(choices.image_history_path, tokens);
  else show_error(make_no_memory_error(32));

  /* Visit history */

  choices.history_path = malloc(strlen(lookup_choice("HistoryPath:Browse:User.History", 0, 0)) + 1);

  if (choices.history_path) strcpy(choices.history_path, tokens);
  else show_error(make_no_memory_error(32));

  /* Hotlist */

  choices.hotlist_path = malloc(strlen(lookup_choice("HotlistPath:Browse:User.Hotlist",0,0)) + 1);

  if (choices.hotlist_path) strcpy(choices.hotlist_path, tokens);
  else show_error(make_no_memory_error(32));

  /* Set the various default colours */

  choices.background_colour = (unsigned int) strtoul(lookup_choice("BackColour:0xdddddd00", 0, 0), NULL, 16);
  choices.text_colour       = (unsigned int) strtoul(lookup_choice("TextColour:0x00000000", 0, 0), NULL, 16);
  choices.link_colour       = (unsigned int) strtoul(lookup_choice("LinkColour:0xff000000", 0, 0), NULL, 16);
  choices.used_colour       = (unsigned int) strtoul(lookup_choice("UsedColour:0xbb008800", 0, 0), NULL, 16);
  choices.followed_colour   = (unsigned int) strtoul(lookup_choice("FollColour:0x0000ff00", 0, 0), NULL, 16);
  choices.selected_colour   = (unsigned int) strtoul(lookup_choice("SeleColour:0x00bb0000", 0, 0), NULL, 16);

  /* Tables */

  if      (!strcmp(lookup_choice("SupportTables:yes"   , 0, 0), "yes"))   choices.support_tables     = 1;
  if      (!strcmp(lookup_choice("MSIE4StyleTables:yes", 0, 0), "yes"))   choices.msie4_style_tables = 1;

  if      (!strcmp(lookup_choice("TableOuter",           0, 0), "2d"))    choices.table_outer        = Choices_TableOuter_Always2D;
  else if (!strcmp(lookup_choice("TableOuter",           0, 0), "3d"))    choices.table_outer        = Choices_TableOuter_Always3D;
  else if (!strcmp(lookup_choice("TableOuter",           0, 0), "never")) choices.table_outer        = Choices_TableOuter_Never;
  else                                                                    choices.table_outer        = Choices_TableOuter_Auto;

  if      (!strcmp(lookup_choice("TableInner",           0, 0), "2d"))    choices.table_inner        = Choices_TableInner_Always2D;
  else if (!strcmp(lookup_choice("TableInner",           0, 0), "3d"))    choices.table_inner        = Choices_TableInner_Always3D;
  else if (!strcmp(lookup_choice("TableInner",           0, 0), "never")) choices.table_inner        = Choices_TableInner_Never;
  else                                                                    choices.table_inner        = Choices_TableInner_Auto;

  /* JavaScript */

  #ifdef JAVASCRIPT

    if (!strcmp(lookup_choice("SupportJS:yes",    0, 0), "yes")) choices.support_js     = 1;
    if (!strcmp(lookup_choice("JSNavAsNav:no",    0, 0), "yes")) choices.js_nav_as_nav  = 1;
    if (!strcmp(lookup_choice("JSErrorBoxes:yes", 0, 0), "yes")) choices.js_error_boxes = 1;
    if (!strcmp(lookup_choice("JSWatchdog:yes",   0, 0), "yes")) choices.js_watchdog    = 1;

    choices.js_timeout = atoi(lookup_choice("JSTimeout:500", 0, 0));

    if      (choices.js_timeout < 50)     choices.js_timeout = 50;
    else if (choices.js_timeout > 100000) choices.js_timeout = 100000;

    if      (!strcmp(lookup_choice("JSWindowOpen",  0, 0), "query"))    choices.js_window_open  = Choices_JSWindowOpen_Query;
    else if (!strcmp(lookup_choice("JSWindowOpen",  0, 0), "suppress")) choices.js_window_open  = Choices_JSWindowOpen_Suppress;
    else if (!strcmp(lookup_choice("JSWindowOpen",  0, 0), "replace"))  choices.js_window_open  = Choices_JSWindowOpen_Replace;
    else                                                                choices.js_window_open  = Choices_JSWindowOpen_Allow;
    if      (!strcmp(lookup_choice("JSWindowClose", 0, 0), "always"))   choices.js_window_close = Choices_JSWindowClose_Always;
    else if (!strcmp(lookup_choice("JSWindowClose", 0, 0), "query"))    choices.js_window_close = Choices_JSWindowClose_Query;
    else if (!strcmp(lookup_choice("JSWindowClose", 0, 0), "suppress")) choices.js_window_close = Choices_JSWindowClose_Suppress;
    else                                                                choices.js_window_close = Choices_JSWindowClose_Sometimes;

  #endif

  /* Event logging */

  if (!strcmp(lookup_choice("EVHTTPMessages:no",  0, 0), "yes"))    choices.ev_http_messages  = 1;
  if (!strcmp(lookup_choice("EVSeriousErrors:no", 0, 0), "yes"))    choices.ev_serious_errors = 1;
  if (!strcmp(lookup_choice("EVEvents:yes",       0, 0), "yes"))    choices.ev_events         = 1;
  #ifdef JAVASCRIPT
    if (!strcmp(lookup_choice("EVScripts:no",     0, 0), "yes"))    choices.ev_scripts        = 1;
  #endif
  if (!strcmp(lookup_choice("EVEnableMaster:no",  0, 0), "yes"))    choices.ev_enable_master  = 1;

  if (!strcmp(lookup_choice("EVDisplayMethod",    0, 0), "url"))    choices.ev_display_method = Choices_EVDisplayMethod_URL;
  else                                                              choices.ev_display_method = Choices_EVDisplayMethod_Title;
  if (!strcmp(lookup_choice("EVHowToLog",         0, 0), "window")) choices.ev_how_to_log     = Choices_EVHowToLog_Window;
  else                                                              choices.ev_how_to_log     = Choices_EVHowToLog_Page;


  /* Font usage */

  choices.font_size = atoi(lookup_choice("FontSize:12", 0, 0));

  if (choices.font_size < 6  * 16) choices.font_size = 6  * 16;
  if (choices.font_size > 24 * 16) choices.font_size = 24 * 16;

  choices.tt_aspect = atoi(lookup_choice("TTAspect:90", 0, 0));

  if (choices.tt_aspect < 50)  choices.tt_aspect = 50;
  if (choices.tt_aspect > 150) choices.tt_aspect = 150;

  if (!strcmp(lookup_choice("SystemFont:no", 0, 0),"yes")) choices.system_font = 1;
  if (choices.system_font) choices.font_size = FM_Standard_Size;

  temp = atoi(lookup_choice("MinimumFontSize:1", 0, 0));

  if (temp < 1) temp = 1;
  if (temp > 7) temp = 7;

  choices.minimum_font_size = temp;

  /* Wake up the font library */

  fm_init(choices.system_font, choices.font_size);

  show_error(fm_define_default_typefaces());

  /* Look up the typeface definitions */

  {
    int  face;
    char tokenname[12];

    /* Arbitrary limit... Typeface1 to Typeface99 */

    for (face = 1; face < 100; face ++)
    {
      sprintf(tokenname, "Typeface%d", face);

      /* Look up the token, exit if it fails */

      lookup_choice(tokenname, 0, 0);
      if (*tokens == '!') break;

      /* Otherwise, define the typeface */

      show_error(fm_define_typeface(tokens));
    }
  }

  /* Claim basic typefaces based on the above */

  fm_claim_basic_typefaces(choices.font_size);

  /* Default document encoding */

  choices.encoding = atoi(lookup_choice("Encoding:4",  0, 0));

  /* Page display */

  if (!strcmp(lookup_choice("UnderlineLinks:yes", 0, 0), "yes")) choices.underline_links = 1;
  if (!strcmp(lookup_choice("UseSourceCols:yes",  0, 0), "yes")) choices.use_source_cols = 1;
  if (!strcmp(lookup_choice("ShowForeground:yes", 0, 0), "yes")) choices.show_foreground = 1;
  if (!strcmp(lookup_choice("ShowBackground:yes", 0, 0), "yes")) choices.show_background = 1;

  /* Page layout */

  choices.left_margin  = atoi(lookup_choice("LeftMargin:1600",   0, 0));
  choices.right_margin = atoi(lookup_choice("RightMargin:6400",  0, 0));
  choices.quote_margin = atoi(lookup_choice("QuoteMargin:19200", 0, 0));
  choices.leading      = atoi(lookup_choice("Leading:4",         0, 0));
  choices.left_indent  = atoi(lookup_choice("LeftIndent:12800",  0, 0));

  /* Printing */

  choices.print_copies = atoi(lookup_choice("PrintCopies:1", 0, 0));
  if (choices.print_copies < Limits_Lower_Copies) choices.print_copies = Limits_Lower_Copies;
  if (choices.print_copies > Limits_Upper_Copies) choices.print_copies = Limits_Upper_Copies;

  lookup_choice("PrintStart:start", 0, 0);

  if      (!strcmp(tokens, "start"))   choices.print_start = 0;
  else if (!strcmp(tokens, "visible")) choices.print_start = -1;
  else                                 choices.print_start = 0;

  lookup_choice("PrintEnd:end", 0, 0);

  if      (!strcmp(tokens, "end"))     choices.print_end = 0;
  else if (!strcmp(tokens, "visible")) choices.print_end = -1;
  else                                 choices.print_end = atoi(tokens);

  choices.print_page_break_hx = atoi(lookup_choice("PrintPageBreakHx:0", 0, 0));

  if      (choices.print_page_break_hx < 0) choices.print_page_break_hx = 0;
  else if (choices.print_page_break_hx > 7) choices.print_page_break_hx = 7;

  choices.print_header_left  = utils_strdup(lookup_choice("PrintHeaderLeft:",  0, 0));
  choices.print_header_mid   = utils_strdup(lookup_choice("PrintHeaderMid:",   0, 0));
  choices.print_header_right = utils_strdup(lookup_choice("PrintHeaderRight:", 0, 0));
  choices.print_footer_left  = utils_strdup(lookup_choice("PrintFooterLeft:",  0, 0));
  choices.print_footer_mid   = utils_strdup(lookup_choice("PrintFooterMid:",   0, 0));
  choices.print_footer_right = utils_strdup(lookup_choice("PrintFooterRight:", 0, 0));

  if (
       choices.print_header_left  == NULL |
       choices.print_header_mid   == NULL |
       choices.print_header_right == NULL |
       choices.print_footer_left  == NULL |
       choices.print_footer_mid   == NULL |
       choices.print_footer_right == NULL
     )
     show_error(make_no_memory_error(32));

  choices.print_headers_from = atoi(lookup_choice("PrintHeadersFrom:0", 0, 0));
  choices.print_footers_from = atoi(lookup_choice("PrintFootersFrom:0", 0, 0));
  choices.print_hf_scale     = atoi(lookup_choice("PrintHFScale:80",    0, 0));

  if (!strcmp(lookup_choice("PrintHFBold:no",    0, 0), "yes")) choices.print_hf_bold   = 1;
  if (!strcmp(lookup_choice("PrintHFItalic:yes", 0, 0), "yes")) choices.print_hf_italic = 1;

  choices.print_date_format = utils_strdup(lookup_choice("PrintDateFormat:!24:!mi:!se !dy-!m3-!ce!yr", 0, 0));
  if (choices.print_date_format == NULL) show_error(make_no_memory_error(32));

  if (!strcmp(lookup_choice("PrintReform:yes", 0, 0), "yes")) choices.print_reform = 1;

  /* Backwards compatible unusual dual-meaning. Upright is a synonym of portrait, */
  /* and sideways of landscape. The browser always *saves* upright or sideways.   */

  if      (!strcmp(lookup_choice("PrintOrient:upright", 0, 0), "upright"))  choices.print_orient = Choices_PrintOrient_Upright;
  else if (!strcmp(lookup_choice("PrintOrient:upright", 0, 0), "portrait")) choices.print_orient = Choices_PrintOrient_Upright;
  else                                                                      choices.print_orient = Choices_PrintOrient_Sideways;

  if      (!strcmp(lookup_choice("PrintBack:tables", 0, 0), "always")) choices.print_back = Choices_PrintBack_Always;
  else if (!strcmp(lookup_choice("PrintBack:tables", 0, 0), "none"))   choices.print_back = Choices_PrintBack_None;
  else                                                                 choices.print_back = Choices_PrintBack_Tables;

  if      (!strcmp(lookup_choice("PrintBlack:bg", 0, 0), "all"))  choices.print_black = Choices_PrintBlack_All;
  else if (!strcmp(lookup_choice("PrintBlack:bg", 0, 0), "none")) choices.print_black = Choices_PrintBlack_None;
  else                                                            choices.print_black = Choices_PrintBlack_BG;

  if (!strcmp(lookup_choice("PrintPlain:yes", 0, 0), "yes")) choices.print_plain = 1;

  if      (!strcmp(lookup_choice("PrintFacingPages:no", 0, 0), "page"))   choices.print_facing_pages = Choices_PrintFacingPages_Page;
  else if (!strcmp(lookup_choice("PrintFacingPages:no", 0, 0), "spread")) choices.print_facing_pages = Choices_PrintFacingPages_Spread;
  else                                                                    choices.print_facing_pages = Choices_PrintFacingPages_No;

  /* Fetch controls */

  /* Limit the number of simultaneous image fetches (I recommend */
  /* a minimum of 2, rather than 1, as most efficient).          */

  choices.max_images = atoi(lookup_choice("MaxImages:5", 0, 0));
  if (choices.max_images <= 0) choices.max_images = 1;

  if (!strcmp(lookup_choice("ClientPull:yes",    0, 0), "yes")) choices.client_pull    = 1;
  if (!strcmp(lookup_choice("SupportFrames:yes", 0, 0), "yes")) choices.support_frames = 1;
  if (!strcmp(lookup_choice("SupportObject:yes", 0, 0), "yes")) choices.support_object = 1;

  if      (!strcmp(lookup_choice("SupportPJPEG", 0, 0), "os"))       choices.support_pjpeg = Choices_SupportPJPEG_OS;
  else if (!strcmp(lookup_choice("SupportPJPEG", 0, 0), "internal")) choices.support_pjpeg = Choices_SupportPJPEG_Internal;
  else                                                               choices.support_pjpeg = Choices_SupportPJPEG_Both;

  if      (!strcmp(lookup_choice("PlugInControl", 0, 0), "never"))  choices.plugin_control = Choices_PlugIns_Never;
  else if (!strcmp(lookup_choice("PlugInControl", 0, 0), "viewed")) choices.plugin_control = Choices_PlugIns_Viewed;
  else                                                              choices.plugin_control = Choices_PlugIns_ASAP;

  if      (!strcmp(lookup_choice("SendReferer", 0, 0), "never"))  choices.send_referer = Choices_SendReferer_Never;
  else if (!strcmp(lookup_choice("SendReferer", 0, 0), "always")) choices.send_referer = Choices_SendReferer_Always;
  else                                                            choices.send_referer = Choices_SendReferer_WhenHTTP;

  if (!strcmp(lookup_choice("SeeFetches:no", 0, 0), "yes")) choices.see_fetches = 1;

  if      (!strcmp(lookup_choice("Faith", 0, 0), "never"))  choices.faith = Choices_Faith_Never;
  else if (!strcmp(lookup_choice("Faith", 0, 0), "always")) choices.faith = Choices_Faith_Always;
  else                                                      choices.faith = Choices_Faith_Sometimes;

  /* Tell ImageLib how to handle JPEGs based on the choices just loaded */

  ImageLib_SetInternalJPEG(choices.support_pjpeg);

  /* Image garbage collection */

  if (!strcmp(lookup_choice("CollectAfter:no", 0, 0), "yes")) choices.collect_after = 1;

  choices.free_ram_limit     = atoi(lookup_choice("FreeRAMLimit:2097512", 0, 0));
  choices.unused_image_limit = atoi(lookup_choice("UnusedImageLimit:0",   0, 0));

  /* Hotlist controls */

  if      (!strcmp(lookup_choice("SaveHotlist", 0, 0), "never"))  choices.save_hotlist = Choices_SaveHotlist_Never;
  else if (!strcmp(lookup_choice("SaveHotlist", 0, 0), "always")) choices.save_hotlist = Choices_SaveHotlist_Always;
  else                                                            choices.save_hotlist = Choices_SaveHotlist_Once;

  if (!strcmp(lookup_choice("AddHotlist", 0, 0), "bottom")) choices.add_hotlist  = Choices_AddHotlist_Bottom;
  else                                                      choices.add_hotlist  = Choices_AddHotlist_Top;

  if (!strcmp(lookup_choice("HotlistType", 0, 0), "urls"))  choices.hotlist_show = Choices_HotlistType_URLs;
  else                                                      choices.hotlist_show = Choices_HotlistType_Descriptions;

  choices.auto_open_delay = atoi(lookup_choice("AutoOpenDelay:100", 0, 0));
  if (choices.auto_open_delay > 1000) choices.auto_open_delay = 1000;
  if (choices.auto_open_delay < 0)    choices.auto_open_delay = 0;

  choices.auto_scroll_delay = atoi(lookup_choice("AutoScrollDelay:50", 0, 0));
  if (choices.auto_scroll_delay > 1000) choices.auto_scroll_delay = 1000;
  if (choices.auto_scroll_delay < 0)    choices.auto_scroll_delay = 0;

  choices.auto_scroll_margin = atoi(lookup_choice("AutoScrollMargin:48", 0, 0));
  if (choices.auto_scroll_margin > 256) choices.auto_scroll_margin = 256;
  if (choices.auto_scroll_margin < 0)   choices.auto_scroll_margin = 0;

  /* History limits */

  choices.max_size         = atoi(lookup_choice("MaxSize:16",             0, 0));
  choices.image_max_size   = atoi(lookup_choice("ImageMaxSize:0",         0, 0));
  choices.expiry_age       = atoi(lookup_choice("ExpiryAge:604800",       0, 0));
  choices.image_expiry_age = atoi(lookup_choice("ImageExpiryAge:1209600", 0, 0));

  choices.max_size         *= 1024; /* (Convert K to bytes)       */
  choices.image_max_size   *= 1024;

  if (choices.max_size   < 2048 && choices.max_size)   choices.max_size   = 2048; /* (NB, Note that there's no lower limit placed on image history details) */
  if (choices.expiry_age < 60   && choices.expiry_age) choices.expiry_age = 60;

  if (!strcmp(lookup_choice("ShowURLs:no", 0, 0), "yes")) choices.show_urls = 1;

  if      (!strcmp(lookup_choice("SaveHistory", 0, 0), "never"))  choices.save_history = Choices_SaveHistory_Never;
  else if (!strcmp(lookup_choice("SaveHistory", 0, 0), "always")) choices.save_history = Choices_SaveHistory_Always;
  else                                                            choices.save_history = Choices_SaveHistory_Once;

  if      (!strcmp(lookup_choice("SaveImageHistory", 0, 0), "never"))  choices.save_image_history = Choices_SaveImageHistory_Never;
  else if (!strcmp(lookup_choice("SaveImageHistory", 0, 0), "always")) choices.save_image_history = Choices_SaveImageHistory_Always;
  else                                                                 choices.save_image_history = Choices_SaveImageHistory_Once;

  /* Toolbar controls */

  if (!strcmp(lookup_choice("URLbar:yes",    0, 0), "yes")) choices.url_bar    = 1;
  if (!strcmp(lookup_choice("ButtonBar:yes", 0, 0), "yes")) choices.button_bar = 1;
  if (!strcmp(lookup_choice("StatusBar:yes", 0, 0), "yes")) choices.status_bar = 1;

  if      (!strcmp(lookup_choice("MoveGadgets", 0, 0), "never"))  choices.move_gadgets = Choices_MoveGadgets_Never;
  else if (!strcmp(lookup_choice("MoveGadgets", 0, 0), "at end")) choices.move_gadgets = Choices_MoveGadgets_AtEnd;
  else                                                            choices.move_gadgets = Choices_MoveGadgets_During;

  /* Window controls */

  choices.width      = atoi(lookup_choice("Width:1024",  0, 0));
  choices.height     = atoi(lookup_choice("Height:1280", 0, 0));
  choices.override_x = atoi(lookup_choice("OverrideX:0",    0, 0));
  choices.override_y = atoi(lookup_choice("OverrideY:0",    0, 0));

  if      (!strcmp(lookup_choice("SolidResize", 0, 0), "no"))     choices.solid_resize = Choices_SolidResize_No;
  else if (!strcmp(lookup_choice("SolidResize", 0, 0), "always")) choices.solid_resize = Choices_SolidResize_Always;
  else                                                            choices.solid_resize = Choices_SolidResize_Yes;

  if (!strcmp(lookup_choice("FullScreen:no", 0, 0), "yes")) choices.full_screen = 1;

  if      (!strcmp(lookup_choice("HScroll", 0, 0), "no"))  choices.h_scroll = Choices_HScroll_No;
  else if (!strcmp(lookup_choice("HScroll", 0, 0), "yes")) choices.h_scroll = Choices_HScroll_Yes;
  else                                                     choices.h_scroll = Choices_HScroll_Auto;

  if      (!strcmp(lookup_choice("VScroll", 0, 0), "no"))  choices.v_scroll = Choices_HScroll_No;
  else if (!strcmp(lookup_choice("VScroll", 0, 0), "yes")) choices.v_scroll = Choices_HScroll_Yes;
  else                                                     choices.v_scroll = Choices_HScroll_Auto;

  if (!strcmp(lookup_choice("NoScrollBars:no",  0, 0), "yes")) choices.no_scroll_bars   = 1;
  if (!strcmp(lookup_choice("DragToScroll:yes", 0, 0), "yes")) choices.drag_to_scroll   = 1;
  if (!strcmp(lookup_choice("ShowMayScroll:no", 0, 0), "yes")) choices.show_may_scroll  = 1;
  if (!strcmp(lookup_choice("ToggleOnYOnly:no", 0, 0), "yes")) choices.toggle_on_y_only = 1;

  /* Reformatter controls */

  if (!strcmp(lookup_choice("RefoWait:no",  0, 0), "yes")) choices.refo_wait = 1;
  if (!strcmp(lookup_choice("RefoKeep:yes", 0, 0), "yes")) choices.refo_keep = 1;
  if (!strcmp(lookup_choice("RefoHold:no",  0, 0), "yes")) choices.refo_hold = 1;

  choices.refo_time = atoi(lookup_choice("RefoTime:500", 0, 0));
  if (choices.refo_time < 25)   choices.refo_time = 25;
  if (choices.refo_time > 2000) choices.refo_time = 2000;

  /* Input device controls */

  if (!strcmp(lookup_choice("FixedPtr:yes",    0, 0), "yes")) choices.fixed_pointer   = 1;
  if (!strcmp(lookup_choice("HighlightLks:no", 0, 0), "yes")) choices.highlight_links = 1;
  if (!strcmp(lookup_choice("KeyboardCtl:no",  0, 0), "yes")) choices.keyboard_ctrl   = 1;

  /* Multiuser environments and proxying */

  if (!strcmp(lookup_choice("UseProxy:no",   0, 0), "yes")) choices.use_proxy   = 1;
  if (!strcmp(lookup_choice("StartProxy:no", 0, 0), "yes")) choices.start_proxy = 1;

  choices.proxy_address = utils_strdup(lookup_choice("ProxyAddress:http://127.0.0.1/", 0, 0));
  if (choices.proxy_address == NULL) show_error(make_no_memory_error(32));

  if (!strcmp(lookup_choice("Clone:yes",   0, 0), "yes")) choices.clone     = 1;

  #ifndef SINGLE_USER

    /* If compiling for a multiuser environment, set up */
    /* a post_in and a post_out path.                   */

    choices.post_in = utils_strdup(lookup_choice("PostIn:<none>", 0, 0));
    if (choices.post_in == NULL) show_error(make_no_memory_error(32));

    choices.post_out = utils_strdup(lookup_choice("PostOut:<none>", 0, 0));
    if (choices.post_out == NULL) show_error(make_no_memory_error(32));

    /* Set also the server timeout */

    choices.log_in_timeout = atoi(lookup_choice("LITimeout:30", 0, 0));

    if (choices.log_in_timeout < 20)  choices.log_in_timeout = 20;
    if (choices.log_in_timeout > 120) choices.log_in_timeout = 120;

  #endif

  /* Non user-configurable options from the Controls file */

  /* Animation controls */

  controls.anim_delay = atoi(lookup_control("AnimSpeed:4", 0, 0));

  if (!strcmp(lookup_control("AnimDrift:no", 0, 0), "yes")) controls.anim_drift = 1;
  if (!strcmp(lookup_control("DBoxAnims:no", 0, 0), "yes")) controls.dbox_anims = 1;

  /* Main window and general toolbar controls */

  controls.minimum_convergence = atoi(lookup_control("MinConvergence:480", 0, 0));

  if      (!strcmp(lookup_control("DontGrey", 0, 0), "none"))    controls.dont_grey = Controls_DontGrey_GreyNone;
  else if (!strcmp(lookup_control("DontGrey", 0, 0), "history")) controls.dont_grey = Controls_DontGrey_GreyHistoryOnly;
  else                                                           controls.dont_grey = Controls_DontGrey_GreyAll;

  if (!strcmp(lookup_control("SwapBars:no",   0, 0), "yes")) controls.swap_bars   = 1;
  if (!strcmp(lookup_control("BackWindow:no", 0, 0), "yes")) controls.back_window = 1;
  if (!strcmp(lookup_control("UseSmall:yes",  0, 0), "yes")) controls.use_small   = 1;

  /* Main and dialler status controls */

  if (!strcmp(lookup_control("ClaimHelp:no", 0, 0), "yes")) controls.claim_help = 1;

  controls.show_help_for         = atoi(lookup_control("ShowHelpFor:600",   0, 0));
  controls.show_dstat_for        = atoi(lookup_control("ShowDStatFor:300",  0, 0));
  controls.show_links_for        = atoi(lookup_control("ShowLinksFor:200",  0, 0));
  controls.show_misc_for         = atoi(lookup_control("ShowMiscFor:50",    0, 0));
  controls.quantise              = atoi(lookup_control("Quantise:5",        0, 0));
  controls.progress_update_delay = atoi(lookup_control("ProgressDelay:50",  0, 0));

  /* Progress indicator controls */

  if (!strcmp(lookup_control("AppendStatus:no", 0, 0), "yes")) controls.append_status = 1;
  if (!strcmp(lookup_control("UseBrackets:yes", 0, 0), "yes")) controls.use_brackets  = 1;

  /* The ColourProgress option in Controls is a little unusual; it holds */
  /* 'no' (NotAColour, see CtrlDefs.h) or a Wimp colour number. Default  */
  /* to 11 (red, in the standard Wimp palette).                          */

  if (!strcmp(lookup_control("ColourProgress:11", 0, 0), "no")) controls.colour_progress = Controls_ColourProgress_NotAColour;
  else
  {
    controls.colour_progress = atoi(lookup_control("ColourProgress:11", 0, 0));
    if (controls.colour_progress > 15) controls.colour_progress = 11;
  }

  /* Frame controls */

  controls.minimum_frame_height = atoi(lookup_control("MinFrmHeight:48", 0, 0));
  controls.minimum_frame_width  = atoi(lookup_control("MinFrmWidth:48",  0, 0));

  if (!strcmp(lookup_control("KeepHighlight:no", 0, 0), "yes")) controls.keep_highlight = 1;

  /* Input device controls */

  if (!strcmp(lookup_control("KeepCaret:no",    0, 0), "yes")) controls.keep_caret    = 1;
  if (!strcmp(lookup_control("ClearFirst:yes",  0, 0), "yes")) controls.clear_first   = 1;
  if (!strcmp(lookup_control("LockToLine:no",   0, 0), "yes")) controls.lock_to_line  = 1;
  if (!strcmp(lookup_control("IgnoreAdjust:no", 0, 0), "yes")) controls.ignore_adjust = 1;

  /* Remote hotlist support */

  if (!strcmp(lookup_control("AppendURLs:no", 0, 0), "yes")) controls.append_urls = 1;

  /* Fetch controls (general) */

  if (!strcmp(lookup_control("BrickWall:no",    0, 0), "yes")) controls.brick_wall  = 1;
  if (!strcmp(lookup_control("StopWebServe:no", 0, 0), "yes")) controls.stop_proxy  = 1;
  if (!strcmp(lookup_control("RefoSingle:no",   0, 0), "yes")) controls.refo_single = 1;
  if (!strcmp(lookup_control("TableMulti:no",   0, 0), "yes")) controls.table_multi = 1;

  controls.back_off_at = atoi(lookup_control("BackOffAt:128", 0, 0));

  /* Fetch controls (URI handler) */

  if      (!strcmp(lookup_choice("URIUsage:unknowns and requests", 0, 0), "never"))                 choices.uri_usage = Choices_URI_Never;
  else if (!strcmp(lookup_choice("URIUsage:unknowns and requests", 0, 0), "requests only"))         choices.uri_usage = Choices_URI_RequestsOnly;
  else if (!strcmp(lookup_choice("URIUsage:unknowns and requests", 0, 0), "unknowns only"))         choices.uri_usage = Choices_URI_BroadcastUnknowns;
  else if (!strcmp(lookup_choice("URIUsage:unknowns and requests", 0, 0), "unknowns and requests")) choices.uri_usage = Choices_URI_UnknownsAndRequests;
  else                                                                                              choices.uri_usage = Choices_URI_EverythingAndRequests;

  /* Fetch controls (cookies) */

  if      (!strcmp(lookup_choice("Cookies:accept", 0, 0), "reject")) choices.cookies = Choices_Cookies_Reject;
  else if (!strcmp(lookup_choice("Cookies:accept", 0, 0), "prompt")) choices.cookies = Choices_Cookies_Prompt;
  else                                                               choices.cookies = Choices_Cookies_Accept;

  /* Fetch controls (filename extension stripping) */

  if (!strcmp(lookup_choice("StripExtensions:yes", 0, 0), "yes")) choices.strip_extensions = 1;

  /* Mouse pointer active point offsets */

  {
    int offset;

    offset = atoi(lookup_control("PtrLnkActvX:5", 0,0)); controls.ptrlnkactvx  = (char) offset;
    offset = atoi(lookup_control("PtrLnkActvY:1", 0,0)); controls.ptrlnkactvy  = (char) offset;
    offset = atoi(lookup_control("PtrMapActvX:7", 0,0)); controls.ptrmapactvx  = (char) offset;
    offset = atoi(lookup_control("PtrMapActvY:7", 0,0)); controls.ptrmapactvy  = (char) offset;
    offset = atoi(lookup_control("PtrUDActvX:5",  0,0)); controls.ptrudactvx   = (char) offset;
    offset = atoi(lookup_control("PtrUDActvY:8",  0,0)); controls.ptrudactvy   = (char) offset;
    offset = atoi(lookup_control("PtrLRActvX:8",  0,0)); controls.ptrlractvx   = (char) offset;
    offset = atoi(lookup_control("PtrLRActvY:5",  0,0)); controls.ptrlractvy   = (char) offset;
    offset = atoi(lookup_control("PtrUDLRActvX:8",0,0)); controls.ptrudlractvx = (char) offset;
    offset = atoi(lookup_control("PtrUDLRActvY:5",0,0)); controls.ptrudlractvy = (char) offset;
    offset = atoi(lookup_control("PtrNoRActvX:7", 0,0)); controls.ptrnoractvx  = (char) offset;
    offset = atoi(lookup_control("PtrNoRActvY:7", 0,0)); controls.ptrnoractvy  = (char) offset;
    offset = atoi(lookup_control("PtrToSActvX:0", 0,0)); controls.ptrtosactvx  = (char) offset;
    offset = atoi(lookup_control("PtrToSActvY:0", 0,0)); controls.ptrtosactvy  = (char) offset;
    offset = atoi(lookup_control("PtrScrActvX:8", 0,0)); controls.ptrscractvx  = (char) offset;
    offset = atoi(lookup_control("PtrScrActvY:8", 0,0)); controls.ptrscractvy  = (char) offset;
    offset = atoi(lookup_control("PtrDTSActvX:8", 0,0)); controls.ptrdtsactvx  = (char) offset;
    offset = atoi(lookup_control("PtrDTSActvY:1", 0,0)); controls.ptrdtsactvy  = (char) offset;
  }

  #ifdef TRACE
    self_test();
  #endif

  /* Install any general handlers that might be needed as a */
  /* result of the choices just loaded.                     */

  show_error(event_register_wimp_handler(-1, Wimp_ELoseCaret, handle_lose_caret, NULL));

  if (controls.claim_help)
  {
    /* Interactive help support for showing help in the status bar */

    register_null_claimant(Wimp_ENull, protocols_ih_send_help_request, NULL);
    show_error(event_register_message_handler(Wimp_MHelpReply, handle_messages, NULL));
  }
}

#ifdef TRACE

  /**************************************************************/
  /* self_test()                                                */
  /*                                                            */
  /* Run through a few standard startup trace build output      */
  /* routines.                                                  */
  /**************************************************************/

  static void self_test(void)
  {
    /* This list is somewhat out of date...! Still, it served */
    /* its purpose in the early days of the above routines,   */
    /* and gives a useful overview for the Rout debug option  */
    /* during startup.                                        */

    dprintf(("Rout", "\nWidth: %d\n"
                     "Height: %d\n",

                      choices.width,
                      choices.height));

    dprintf(("Rout", "\nBack colour: %p\n"
                     "Text colour: %p\n"
                     "Link colour: %p\n"
                     "Used colour: %p\n",

                     (void *) choices.background_colour,
                     (void *) choices.text_colour,
                     (void *) choices.link_colour,
                     (void *) choices.used_colour));

    dprintf(("Rout", "\nSystem font: %d\n"          "Show foreground images: %d\n" "Show background images: %d\n"
                     "Fixed pointer: %d\n"          "Underline links: %d\n"        "Use document colours: %d\n"
                     "URL bar: %d\n"                "Button bar: %d\n"             "Status bar: %d\n"
                     "Move gadgets: %d\n"           "Use a proxy: %d\n\n",

                     choices.system_font,           choices.show_foreground,       choices.show_background,
                     choices.fixed_pointer,         choices.underline_links,       choices.use_source_cols,
                     choices.url_bar,               choices.button_bar,            choices.status_bar,
                     choices.move_gadgets,          choices.use_proxy));

    /* Test URL to leafname translation */

    {
      char   leafname[1024];
      char * canonicalised = NULL;

      #define TestLeaf(str) {urlutils_leafname_from_url((str), leafname, sizeof(leafname)); dprintf(("Save", "%s ", leafname));}

      dprintf(("Save", "\nChecking URL to Leafname translation\n"));
      dprintf(("Save", "====================================\n\n"));

      /* First, with protocols */

      TestLeaf("http://www.acorn.com/");
      TestLeaf("http://www.acorn.com");
      TestLeaf("http:/www.acorn.com/");
      TestLeaf("http:www.acorn.com/");
      TestLeaf("http:www.acorn.com");
      TestLeaf("http://www.acorn.com:80/");
      TestLeaf("http://www.acorn.com:80");
      TestLeaf("http:/www.acorn.com:80/");
      TestLeaf("http:www.acorn.com:80/");
      TestLeaf("http:www.acorn.com:80");

      dprintf(("Save", "\n"));

      TestLeaf("http://www.acorn.com/thing1.html");
      TestLeaf("http:/www.acorn.com/thing2.html");
      TestLeaf("http:www.acorn.com/thing3.html");
      TestLeaf("http://www.acorn.com:80/thing4.html");
      TestLeaf("http:/www.acorn.com:80/thing5.html");
      TestLeaf("http:www.acorn.com:80/thing6.html");

      dprintf(("Save", "\n"));

      TestLeaf("http://www.acorn.com/dir/dthing1.html");
      TestLeaf("http:/www.acorn.com/dir/dthing2.html");
      TestLeaf("http:www.acorn.com/dir/dthing3.html");
      TestLeaf("http://www.acorn.com:80/dir/dthing4.html");
      TestLeaf("http:/www.acorn.com:80/dir/dthing5.html");
      TestLeaf("http:www.acorn.com:80/dir/dthing6.html");

      dprintf(("Save", "\n"));

      TestLeaf("http://www.acorn.com/dir/dthing1.tz.html");
      TestLeaf("http:/www.acorn.com/dir/dthing2.tz.html");
      TestLeaf("http:www.acorn.com/dir/dthing3.tz.html");
      TestLeaf("http://www.acorn.com:80/dir/dthing4.tz.html");
      TestLeaf("http:/www.acorn.com:80/dir/dthing5.tz.html");
      TestLeaf("http:www.acorn.com:80/dir/dthing6.tz.html");

      dprintf(("Save", "\n"));

      TestLeaf("http://www.acorn.com/dir1/");
      TestLeaf("http:/www.acorn.com/dir2/");
      TestLeaf("http:www.acorn.com/dir3/");
      TestLeaf("http://www.acorn.com:80/dir4/");
      TestLeaf("http:/www.acorn.com:80/dir5/");
      TestLeaf("http:www.acorn.com:80/dir6/");

      dprintf(("Save", "\n"));

      TestLeaf("http://www.acorn.com/dirs1");
      TestLeaf("http:/www.acorn.com/dirs2");
      TestLeaf("http:www.acorn.com/dirs3");
      TestLeaf("http://www.acorn.com:80/dirs4");
      TestLeaf("http:/www.acorn.com:80/dirs5");
      TestLeaf("http:www.acorn.com:80/dirs6");

      dprintf(("Save", "\n"));

      TestLeaf("http://www.acorn.com/dirs1#anc1");
      TestLeaf("http:/www.acorn.com/dirs2#anc2");
      TestLeaf("http:www.acorn.com/dirs3#anc3");
      TestLeaf("http://www.acorn.com:80/dirs4#anc4");
      TestLeaf("http:/www.acorn.com:80/dirs5#anc5");
      TestLeaf("http:www.acorn.com:80/dirs6#anc6");

      dprintf(("Save", "\n"));

      TestLeaf("http://www.acorn.com/d/irs1#danc1");
      TestLeaf("http:/www.acorn.com/d/irs2#danc2");
      TestLeaf("http:www.acorn.com/d/irs3#danc3");
      TestLeaf("http://www.acorn.com:80/d/irs4#danc4");
      TestLeaf("http:/www.acorn.com:80/d/irs5#danc5");
      TestLeaf("http:www.acorn.com:80/d/irs6#danc6");

      dprintf(("Save", "\n\n"));

      /* Now without protocols */

      TestLeaf("//www.acorn.com/");
      TestLeaf("//www.acorn.com");
      TestLeaf("/www.acorn.com/");
      TestLeaf("www.acorn.com/");
      TestLeaf("www.acorn.com");
      TestLeaf("//www.acorn.com:80/");
      TestLeaf("//www.acorn.com:80");
      TestLeaf("/www.acorn.com:80/");
      TestLeaf("www.acorn.com:80/");
      TestLeaf("www.acorn.com:80");

      dprintf(("Save", "\n"));

      TestLeaf("//www.acorn.com/thing1.html");
      TestLeaf("/www.acorn.com/thing2.html");
      TestLeaf("www.acorn.com/thing3.html");
      TestLeaf("//www.acorn.com:80/thing4.html");
      TestLeaf("/www.acorn.com:80/thing5.html");
      TestLeaf("www.acorn.com:80/thing6.html");

      dprintf(("Save", "\n"));

      TestLeaf("//www.acorn.com/dir/dthing1.html");
      TestLeaf("/www.acorn.com/dir/dthing2.html");
      TestLeaf("www.acorn.com/dir/dthing3.html");
      TestLeaf("//www.acorn.com:80/dir/dthing4.html");
      TestLeaf("/www.acorn.com:80/dir/dthing5.html");
      TestLeaf("www.acorn.com:80/dir/dthing6.html");

      dprintf(("Save", "\n"));

      TestLeaf("//www.acorn.com/dir/dthing1.tz.html");
      TestLeaf("/www.acorn.com/dir/dthing2.tz.html");
      TestLeaf("www.acorn.com/dir/dthing3.tz.html");
      TestLeaf("//www.acorn.com:80/dir/dthing4.tz.html");
      TestLeaf("/www.acorn.com:80/dir/dthing5.tz.html");
      TestLeaf("www.acorn.com:80/dir/dthing6.tz.html");

      dprintf(("Save", "\n"));

      TestLeaf("//www.acorn.com/dir1/");
      TestLeaf("/www.acorn.com/dir2/");
      TestLeaf("www.acorn.com/dir3/");
      TestLeaf("//www.acorn.com:80/dir4/");
      TestLeaf("/www.acorn.com:80/dir5/");
      TestLeaf("www.acorn.com:80/dir6/");

      dprintf(("Save", "\n"));

      TestLeaf("//www.acorn.com/dirs1");
      TestLeaf("/www.acorn.com/dirs2");
      TestLeaf("www.acorn.com/dirs3");
      TestLeaf("//www.acorn.com:80/dirs4");
      TestLeaf("/www.acorn.com:80/dirs5");
      TestLeaf("www.acorn.com:80/dirs6");

      dprintf(("Save", "\n"));

      TestLeaf("//www.acorn.com/dirs1#anc1");
      TestLeaf("/www.acorn.com/dirs2#anc2");
      TestLeaf("www.acorn.com/dirs3#anc3");
      TestLeaf("//www.acorn.com:80/dirs4#anc4");
      TestLeaf("/www.acorn.com:80/dirs5#anc5");
      TestLeaf("www.acorn.com:80/dirs6#anc6");

      dprintf(("Save", "\n"));

      TestLeaf("//www.acorn.com/d/irs1#danc1");
      TestLeaf("/www.acorn.com/d/irs2#danc2");
      TestLeaf("www.acorn.com/d/irs3#danc3");
      TestLeaf("//www.acorn.com:80/d/irs4#danc4");
      TestLeaf("/www.acorn.com:80/d/irs5#danc5");
      TestLeaf("www.acorn.com:80/d/irs6#danc6");

      dprintf(("Save", "\n\n"));

      /* Minimal URLs */

      TestLeaf("www");
      TestLeaf("www/dirs");
      TestLeaf("www:80/dirs");
      TestLeaf("http:www");
      TestLeaf("http:www/dirs");
      TestLeaf("http:www:80/dirs");
      TestLeaf("http:/www");
      TestLeaf("http:/www/dirs");
      TestLeaf("http:/www:80/dirs");

      dprintf(("Save", "\n"));

      TestLeaf("www/");
      TestLeaf("www/dirs/");
      TestLeaf("www:80/dirs/");
      TestLeaf("http:www/");
      TestLeaf("http:www/dirs/");
      TestLeaf("http:www:80/dirs/");
      TestLeaf("http:/www/");
      TestLeaf("http:/www/dirs/");
      TestLeaf("http:/www:80/dirs/");

      dprintf(("Save", "\n"));

      TestLeaf("http:///notahost");
      TestLeaf("http:///notahost/");
      TestLeaf("http:///notahost2.html");
      TestLeaf("http:///notahost2.dir/");
      TestLeaf("http:///notahost3/find");

      dprintf(("Save", "\n\n"));

      /* Mixed and broken anchor specifications */

      TestLeaf("http://www.acorn.com/#d/irs1#danc1");
      TestLeaf("http:/www.acorn.com/#d/irs2#danc2");
      TestLeaf("http:www.acorn.com/#d/irs3#danc3");
      TestLeaf("http://www.acorn.com:80/#d/irs4#danc4");
      TestLeaf("http:/www.acorn.com:80/#d/irs5#danc5");
      TestLeaf("http:www.acorn.com:80/#d/irs6#danc6");

      dprintf(("Save", "\n"));

      TestLeaf("http://www.acorn.com/#canc1");
      TestLeaf("http:/www.acorn.com/#canc2");
      TestLeaf("http:www.acorn.com/#canc3");
      TestLeaf("http://www.acorn.com:80/#canc4");
      TestLeaf("http:/www.acorn.com:80/#canc5");
      TestLeaf("http:www.acorn.com:80/#canc6");

      dprintf(("Save", "\n"));

      TestLeaf("http://www.acorn.com/#");
      TestLeaf("http:/www.acorn.com/#");
      TestLeaf("http:www.acorn.com/#");
      TestLeaf("http://www.acorn.com:80/#");
      TestLeaf("http:/www.acorn.com:80/#");
      TestLeaf("http:www.acorn.com:80/#");

      dprintf(("Save", "\n"));

      TestLeaf("http://www.acorn.com/pre1#");
      TestLeaf("http:/www.acorn.com/pre2#");
      TestLeaf("http:www.acorn.com/pre3#");
      TestLeaf("http://www.acorn.com:80/pre4#");
      TestLeaf("http:/www.acorn.com:80/pre5#");
      TestLeaf("http:www.acorn.com:80/pre6#");

      dprintf(("Save", "\n\n"));
      dprintf(("Save", "Checking pathname canonicalisation\n"));
      dprintf(("Save", "==================================\n\n"));

      #define TestCanonicalise(str) {                                                      \
                                      strcpy(leafname, (str));                             \
                                      dprintf(("Save", "In : '%s'\n",leafname));           \
                                                                                           \
                                      utils_canonicalise_path(leafname, &canonicalised);   \
                                                                                           \
                                      if (canonicalised)                                   \
                                      {                                                    \
                                        dprintf(("Save", "Out: '%s'\n\n", canonicalised)); \
                                                                                           \
                                        free(canonicalised);                               \
                                        canonicalised = NULL;                              \
                                      }                                                    \
                                      else dprintf(("Save", "Out: (Error)\n\n"));          \
                                    }

      TestCanonicalise("<Browse$Dir>.User.Hotlist");
      TestCanonicalise("Browse:User.Hotlist");
      TestCanonicalise("<Choices$Write>.WWW.Browser.Hotlist");
      TestCanonicalise("Choices:WWW.Browser.Hotlist");

      /* Test URL matching for lists */

      dprintf(("Save", "Checking URL matching\n"));
      dprintf(("Save", "=====================\n\n"));

      #define TestMatch(url, match) {                                                           \
                                      url_description * d = urlutils_return_description(url);   \
                                                                                                \
                                      strcpy(leafname, match);                                  \
                                                                                                \
                                      dprintf(("Save", "'%s' to '%s': ",                        \
                                                       url,                                     \
                                                       leafname));                              \
                                                                                                \
                                      dprintf(("Save", "%d\n",                                  \
                                                       urlutils_matches_special(d, leafname))); \
                                                                                                \
                                      urlutils_free_description(d);                             \
                                    }

      TestMatch("http://www.acorn.com:3215/clanorak/test.html", "www");
      TestMatch("http://www.acorn.com:3215/clanorak/test.html", "www.acorn.com");
      TestMatch("http://www.acorn.com:3215/clanorak/test.html", ".com");
      TestMatch("http://www.acorn.com:3215/clanorak/test.html", "www/clan");
      TestMatch("http://www.acorn.com:3215/clanorak/test.html", "www.acorn.com/clan");
      TestMatch("http://www.acorn.com:3215/clanorak/test.html", "www.acorn.com/clan/");
      TestMatch("http://www.acorn.com:3215/clanorak/test.html", "www.acorn.com/clanorak/");
      TestMatch("http://www.acorn.com:3215/clanorak/test.html", "www.acorn.com/clanorak/home.html");
      TestMatch("http://www.acorn.com:3215/clanorak/test.html", "www:3215");
      TestMatch("http://www.acorn.com:3215/clanorak/test.html", "www.acorn.com:3215");
      TestMatch("http://www.acorn.com:3215/clanorak/test.html", "www.acorn.com:80");
      TestMatch("http://www.acorn.com:3215/clanorak/test.html", "www.acorn.com:3215/clan");
      TestMatch("http://www.acorn.com:3215/clanorak/test.html", "www.acorn.com:3215/clan/");
      TestMatch("http://www.acorn.com:3215/clanorak/test.html", "www.acorn.com:3215/clanorak/");
      TestMatch("http://www.acorn.com:3215/clanorak/test.html", "www.acorn.com:3215/clanorak/home.html");

      dprintf(("Save", "\nThe following four groups of six should give '1, 1, 0, 0, 1, 1'...\n\n"));

      TestMatch("http://www.acorn.com/", "www.acorn.com");
      TestMatch("http://www.acorn.com/", "www.acorn.com/");
      TestMatch("http://www.acorn.com/", "www.acorn.com:80");
      TestMatch("http://www.acorn.com/", "www.acorn.com:80/");
      TestMatch("http://www.acorn.com/", "www.acorn.com:");
      TestMatch("http://www.acorn.com/", "www.acorn.com:/");
      TestMatch("http://www.acorn.com:/", "www.acorn.com");
      TestMatch("http://www.acorn.com:/", "www.acorn.com/");
      TestMatch("http://www.acorn.com:/", "www.acorn.com:80");
      TestMatch("http://www.acorn.com:/", "www.acorn.com:80/");
      TestMatch("http://www.acorn.com:/", "www.acorn.com:");
      TestMatch("http://www.acorn.com:/", "www.acorn.com:/");
      TestMatch("http://www.acorn.com:80/", "www.acorn.com");
      TestMatch("http://www.acorn.com:80/", "www.acorn.com/");
      TestMatch("http://www.acorn.com:80/", "www.acorn.com:80");
      TestMatch("http://www.acorn.com:80/", "www.acorn.com:80/");
      TestMatch("http://www.acorn.com:80/", "www.acorn.com:");
      TestMatch("http://www.acorn.com:80/", "www.acorn.com:/");
      TestMatch("http://www.acorn.com:80/path/", "www.acorn.com");
      TestMatch("http://www.acorn.com:80/path/", "www.acorn.com/");
      TestMatch("http://www.acorn.com:80/path/", "www.acorn.com:80");
      TestMatch("http://www.acorn.com:80/path/", "www.acorn.com:80/");
      TestMatch("http://www.acorn.com:80/path/", "www.acorn.com:");
      TestMatch("http://www.acorn.com:80/path/", "www.acorn.com:/");

      /*
       * Maybe we don't want this every time...!
       *
       * dprintf(("Save", "\n\n"));
       * dprintf(("Save", "Checking path building\n"));
       * dprintf(("Save", "======================\n\n"));
       *
       * #define TestBuild(str) {                                                  \
       *                          _kernel_oserror * e = utils_build_tree((str));   \
       *                                                                           \
       *                          if (!e) dprintf(("Save", "OK : '%s'\n", (str))); \
       *                          else                                             \
       *                          {                                                \
       *                            dprintf(("Save", "Err: '%s'\n", (str));        \
       *                            dprintf(("Save", "     '%s'\n", e->errmess);   \
       *                          }                                                \
       *                        }
       *
       * TestBuild("Mem::Sprites.$.This");
       * TestBuild("Mem::Sprites.$.This.That");
       * TestBuild("Mem::Sprites.$.This.That.The.Other");
       * TestBuild("ADFS::4.$.Hello.This.Is.A.Test");
       *
       */
    }
  }

#endif

/**************************************************************/
/* install_signal_handlers()                                  */
/*                                                            */
/* Set up signal handlers for the local serious error         */
/* handler.                                                   */
/**************************************************************/

static void install_signal_handlers(void)
{
  signal(SIGOSERROR, catch_errors); /* OS error            */
  signal(SIGILL,     catch_errors); /* Illegal instruction */
  signal(SIGSEGV,    catch_errors); /* Segment violation   */
  signal(SIGSTAK,    catch_errors); /* Stack overflow      */
  signal(SIGFPE,     catch_errors); /* FPE error           */
}

/**************************************************************/
/* termination()                                              */
/*                                                            */
/* Called by registration through the atexit function. Shuts  */
/* down core functions prior to the browser exitting (e.g.    */
/* the Font Manager can get very tetchy about having font     */
/* handles left claimed, so must release them).               */
/**************************************************************/

void termination(void)
{
  dprintf(("Poll", "termination() called\n"));

  if (taskmodule_ds_registered)
  {
    /* Not interested in any errors, if it fails we can't really */
    /* do anything about it at this stage.                       */

    _swix(TaskModule_DeRegisterService,
          _INR(0,2),

          0,
          0,
          task_handle);
  }

  close_messages_file(cob); cob = NULL;
  close_messages_file(chb); chb = NULL;

  fm_shutdown();
  plugin_shutdown();
  rma_shutdown();
}

/**************************************************************/
/* main()                                                     */
/*                                                            */
/* That which runs before all others.                         */
/**************************************************************/

int main(int argc, char * argv[])
{
  WimpPollBlock b;
  int           eventcode, time;

  /* DO NOT use dprintf() until after the initialisation stuff below...! */

  #ifndef TRACE
    #ifdef SINGLE_USER
      int       argp     = 1;
    #endif
  #else
    int         argp     = 1;
  #endif

  #ifdef INCLUDE_HEAPGRAPH
    HeapGraph_RedirectAllocFns(NULL);
  #endif

  #ifdef INCLUDE_HIERPROF
    HierProf_ProfileAllFunctions();
  #endif

  #ifdef INCLUDE_MEMCHECK

    MemCheck_Init();
    MemCheck_InterceptSCLStringFunctions();
    MemCheck_RegisterArgs(argc, argv);
    MemCheck_SetStoreMallocFunctions(1);
    MemCheck_SetReportFrees(1);
    MemCheck_SetAutoOutputBlocksInfo(0);

  #endif

  #ifdef TRACE

    /* Handle -d[ebug] CLI switch; see Global.c for more information. */
    /* This must be the first command line argument.                  */

    {
      const char   * dsysnm = SYSTEM "$DebugLevel";
      const char   * val    = "";
      unsigned int   all    = 0;
      debug_device   dev;

      if (argc > argp + 1)
      {
        if (!strcmp(argv[argp],"-debug") | !strcmp(argv[argp],"-d"))
        {
          if (strstr(argv[argp + 1], "BBox")) tl |= (1u<<11);
          if (strstr(argv[argp + 1], "Circ")) tl |= (1u<<19);
          if (strstr(argv[argp + 1], "RBox")) tl |= (1u<<23);
          if (strstr(argv[argp + 1], "RAMT")) tl |= (1u<<28);
          if (strstr(argv[argp + 1], "All"))  tl  = 0xffffffff;

          if (
               strstr(argv[argp + 1], "Most") ||
               strstr(argv[argp + 1], "All")
             )
             val = "", all = 1;

          else val = argv[argp + 1];

          show_error(_swix(OS_SetVarVal,
                           _INR(0,4),

                           dsysnm,
                           val,
                           strlen(val),
                           0,
                           4));

          argp += 2;
        }
      }

      if (all == 0 && *val == '\0')
      {
        show_error(_swix(OS_SetVarVal,
                         _INR(0,4),

                         dsysnm,
                         "None",
                         4,
                         0,
                         4));
      }

      dev = TML_OUTPUT;

      debug_initialise(/*"\0216"*/ SYSTEM /*"\0217"*/, "$.BrowsrDbg", dsysnm);
      debug_atexit();
      debug_set_screen_cornering(FALSE);
      debug_set_unbuffered_files(TRUE);
      debug_set_device(dev);
    }

    dprintf(("Rout", "\nmain: Initialising\n"));

    /* Non-debug builds have a WimpSlot close to the actual startup */
    /* requirements. Debug builds have a huge slotsize because of   */
    /* all of the debug information, despite this being copied away */
    /* by the debugger on startup. This leaves a very large free    */
    /* chunk within the WimpSlot size in which malloc may operate,  */
    /* and thus creates a distinctly different environment for the  */
    /* memory system in a debug build.                              */
    /*                                                              */
    /* To try and get closer to the non-debug memory usage, TRACE   */
    /* builds will malloc the following large block in an attempt   */
    /* to soak up that initial free space.                          */

//    real_malloc(4*1024*1024);
    (malloc)(4*1024*1024);

  #endif

  /* Set up a very early stage error handler; this is jumped  */
  /* to by the signal handler function installed just below.  */

  if (setjmp(env) == Main_FromCatchErrors)
  {
    tidy_errors();
    show_error(&erb);
  }
  else
  {
    /* Install serious error handlers */

    install_signal_handlers();
  }

  /* Before initialisation, find out where we ran from - this */
  /* software can support different application names, so the */
  /* existance of a specific system variable cannot be relied */
  /* upon (with the exception of ROM builds).                 */

  {
    int    len;
    char * item;

    /* Work out what path to go through */

    #ifdef ROM

      item = "Resources:$.Resources.Browse";
      len  = strlen(item);

    #else

      item = argv[0];
      len  = strlen(item) - strlen(".!RunImage");

    #endif

    /* Allocate the space, bomb out if it fails */

//    task_dir = real_malloc(len + 1);
    task_dir = (malloc)(len + 1);

    if (!task_dir)
    {
      erb.errnum = Utils_Error_Custom_Fatal;
      strcpy(erb.errmess, "There is insufficient free memory to start the browser.");
      show_error(&erb);
    }

    /* Copy the information and ensure it is terminated correctly */

    strncpy(task_dir, item, len);
    task_dir[len] = 0;
  }

  /* Now do the bulk of application initialisation */

  initialise_app();

  dprintf(("Poll", "main: Loading choices\n"));

  load_choices();

  #ifndef SINGLE_USER

    /* Multiuser builds need a unique filename base. Do this */
    /* checking Post_In / Post_Out as the Set Post_In /      */
    /* Post_Out dialogue box handler will expect to be able  */
    /* to go straight to multiuser_login().                  */

    multiuser_create_unique_postbox_filename();

    /* Want to check for Post_On / Post_Out exist at least */
    /* as readable directories or image files. If not, we  */
    /* should open the Set Post_In / Post_Out dialogue box */
    /* rather than log in, and let that start up the       */
    /* log-in procedure for us.                            */

    {
      int in_ok  = 0;
      int out_ok = 0;

      setpboxes_check_boxes(&in_ok, &out_ok);

      if (!in_ok || !out_ok) show_error(setpboxes_show_dialogue());
      else                   show_error(multiuser_login());
    }

  #else

    /* Load the visit history, image history and hotlist  */
    /* (this will be the single user version of the login */
    /* call).                                             */

    show_error(multiuser_login());

  #endif

  /* Try to start the proxy server if necessary */

  if (choices.start_proxy)
  {
    unsigned int handle = 0;

    utils_get_task_handle(lookup_token("ProxyName:Acorn WebServe",0,0), &handle);

    if (!handle)
    {
      dprintf(("Poll", "main: Starting proxy server\n"));

      _swix(Wimp_StartTask,
            _IN(0),

            lookup_token("ProxyComm:Filer_Run WebServe:!Run",0,0));
    }

    #ifdef TRACE

      else dprintf(("Rout", "main: Proxy server already running\n"));

    #endif
  }

  dprintf(("Poll", "main: Handling CLI arguments\n"));

  /* If using keyboard control, watch the pointer for movement, */
  /* turning it off if not moved for 5 seconds.                 */

  if (choices.keyboard_ctrl) mouse_watch_pointer_control(1);

  /* Command line arguments aren't of interest to a multiuser build  */
  /* because it will never have logged in by this point, so it can't */
  /* sensibly deal with fetching pages yet.                          */

  #ifdef SINGLE_USER

    while (argc > argp)
    {
      /* Handle -html (HTML files) */

      if (argc > argp + 1 && !strcmp(argv[argp], "-html"))
      {
        char url[Limits_URL];

        dprintf(("Poll", "main: Handling -html CLI argument\n"));

        StrNCpy0(url, argv[argp + 1]);
        urlutils_pathname_to_url(url, sizeof(url));

        windows_create_browser(url, NULL, NULL, NULL, Windows_CreateBrowser_Normal);

        argp += 2;
      }

      /* Handle -uri (URI files) */

      else if (argc > argp + 1 && !strcmp(argv[argp], "-uri"))
      {
        char url[Limits_URL];

        dprintf(("Poll", "main: Handling -uri CLI argument\n"));

        urlutils_load_uri_file(url,
                               sizeof(url),
                               NULL,
                               0,
                               argv[argp + 1]);

        if (*url) windows_create_browser(url,
                                         NULL,
                                         NULL,
                                         NULL,
                                         Windows_CreateBrowser_Normal);

        argp += 2;
      }

      /* Handle -url (URL strings) */

      else if (argc > argp + 1 && (!strcmp(argv[argp],"-url") || !strcmp(argv[argp],"-u")))
      {
        dprintf(("Poll", "main: Handling -url CLI argument\n"));

        windows_create_browser(argv[argp+1], NULL, NULL, NULL, Windows_CreateBrowser_Normal);

        argp += 2;
      }
      else argp++;
    }

  #endif

  dprintf(("Poll", "main: Polling\n"));

  atexit(termination);

  /* Long jump handler - most nasty or generally unexpected */
  /* errors will come back to here. The OS error abort      */
  /* handler jumps back here to deal with the error as we   */
  /* then have a clear stack; this is to avoid 'no stack    */
  /* for trap handler' errors caused by a SWI corrupting    */
  /* the value of R10.                                      */

  if (setjmp(env) == Main_FromCatchErrors)
  {
    print_abort_print();
    tidy_errors();

    /* Reset the error number stored by catch_errors() (the     */
    /* signal handler function we just reinstalled) to give     */
    /* 'Quit' and 'Continue' options.                           */

    erb.errnum = Utils_Error_Custom_Normal;

    show_error_cont(&erb);
  }

  while (!quit)
  {
    /* We use flex's deferred compaction, so ensure the */
    /* heap is as small as possible.                    */

    flex_compact();

    /* What time is it? (For Wimp_PollIdle) */

    _swix(OS_ReadMonotonicTime,
          _OUT(0),

          &time);

    /* Use PollIdle, but want drag events to be as responsive as possible */

    ChkError(event_poll_idle(&eventcode,
                             &b,
                             time + 5*!drag_in_progress,
                             NULL));
  }

  dprintf(("Rout", "\nmain: Calling exit()\n\n"));

  dprintf(("CMal", "Near exit, malloccount: \0216%d\0217\n", malloccount));
  dprintf(("CFle", "Near exit, flexcount  : %d\n",           flexcount));

  /* Save hotlist, histories etc., and logout if a multiuser build */

  show_error_ret(multiuser_logout());

  /* This will call the termination() function in passing */

  exit(EXIT_SUCCESS);
}

/**************************************************************/
/* tidy_errors()                                              */
/*                                                            */
/* Tidy up serious errors - aborts etc. - so that a sensible  */
/* error message can be given and a register dump has been    */
/* saved. On older C libraries, this is very important as the */
/* error handler was pretty bad.                              */
/*                                                            */
/* After calling, local error block "erb" will contain an     */
/* updated error either directly from the OS or constructed   */
/* locally, with a register dump saved ready for *ShowRegs.   */
/* Signal handlers will be reinstalled.                       */
/**************************************************************/

static void tidy_errors(void)
{
  char         * tok        = NULL;
  unsigned int * regdump    = NULL;
  unsigned int * os_regdump = NULL;
  int            clib_version;
  char           pc[16];

  /* Is the C library new enough to report errors sensibly  */
  /* itself, or do we have to do the work for it?           */
  /*                                                        */
  /* The 'sscanf' call assumes the version number is the    */
  /* first number in the string returned by _clib_version() */
  /* and is followed by a forwards slash.                   */

  sscanf(_clib_version(), "%*[^0123456789]%d/", &clib_version);

  if (clib_version < 535)
  {
    /* Sort out the register dump */

    _swix(OS_ChangeEnvironment,
          _INR(0,3) | _OUT(3),

          7, /* Call back */
          0,
          0,
          0,

          &regdump); /* Where the C library put the registers */

    _swix(OS_ChangeEnvironment,
          _INR(0,3) | _OUT(1),

          13, /* Exception registers */
          0,
          0,
          0,

          &os_regdump); /* Where *ShowRegs gets them from */

    /* Copy the C register dump into the OS space */

    if (regdump && os_regdump) memcpy(os_regdump, regdump, 4 * 16);

    /* Store a more sensible error in the error block 'erb' where possible. */

    #ifdef WRITE_DUMP_FILE_ON_ERROR

    {
      FILE * debug = fopen("ADFS::4.$.BrowseDump","a");

      if (debug)
      {
        fprintf(debug,
                "Error '%s', code 0x%08x\n",
                (erb.errmess ? erb.errmess : "NULL"),
                erb.errnum);

        fprintf(debug,
                "regdump, os_regdump: %p, %p\n",
                regdump,
                os_regdump);

        fclose(debug);
      }
    }

    #endif

    switch (erb.errnum & 0x00ffffff)
    {
      case 0x000000: tok = "EZeros0:Internal error: Illegal instruction at %0";    break;
      case 0x000001: tok = "EZeros1:Internal error: Prefetch abort at %0";         break;
      case 0x000002: tok = "EZeros2:Internal error: Abort on data transfer at %0"; break;
      case 0x000003: tok = "EZeros3:Internal error: Address exception at %0";      break;
      case 0x000005: tok = "EZeros5:Internal error: Branch through zero";          break;
    }

    #ifdef WRITE_DUMP_FILE_ON_ERROR

    {
      FILE * debug = fopen("ADFS::4.$.BrowseDump","a");

      if (debug)
      {
        if (!tok) fprintf(debug, "No error message found or no lookup done!\n");
        fclose(debug);
      }
    }

    #endif

    if (tok)
    {
      char * error;

      #ifdef WRITE_DUMP_FILE_ON_ERROR

      {
        FILE * debug = fopen("ADFS::4.$.BrowseDump","a");

        if (debug)
        {
          fprintf(debug, "Token '%s'\n",tok);
          fclose(debug);
        }
      }

      #endif

      /* If we know the PC, put this in the message */

      if (!regdump) sprintf(pc, "&deaddead");
      else          sprintf(pc, "&%08X", os_regdump[15] &~ 0xfc000003);

      error = lookup_token(tok, 0, pc);

      #ifdef WRITE_DUMP_FILE_ON_ERROR

      {
        FILE * debug = fopen("ADFS::4.$.BrowseDump","a");

        if (debug)
        {
          fprintf(debug, "String '%s'\n",error);
          fclose(debug);
        }
      }

      #endif

      /* If the message token wasn't found, use the OS error, */
      /* otherwise copy the new one into the error block.     */

      if (strcmp(error, "!")) StrNCpy0(erb.errmess, error);
    }
  }

  /* Need to reinstall the signal handlers since the run-time */
  /* system will have removed them 'For Your Safety And       */
  /* Convenience'.                                            */

  install_signal_handlers();
}

/**************************************************************/
/* catch_errors()                                             */
/*                                                            */
/* Catch OS errors and report them with the opportunity to    */
/* continue or quit (done inside main itself).                */
/*                                                            */
/* This is the last function in the file since it plays       */
/* around with stack checking, and you can't read the         */
/* previous state. If this was in the middle of the source    */
/* and someone wrote a #pragma above it, endless confusion    */
/* could otherwise arise as to why the instruction had no     */
/* effect on some of the functions here...                    */
/*                                                            */
/* Parameters: The signal number (ignored).                   */
/**************************************************************/

#pragma no_check_stack

static void catch_errors(int signum)
{
  /* Store the error locally */

  StrLastE;

  /* Go back to main to report the error */

  longjmp(env, Main_FromCatchErrors);

  /* Just in case... */

  exit(EXIT_FAILURE);
}
@


1.62
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@d88 5
a92 5
#undef  INCLUDE_HEAPGRAPH
#undef  INCLUDE_HIERPROF
#undef  INCLUDE_MEMCHECK
#define JS_USING_MEMLIB
#undef  WRITE_DUMP_FILE_ON_ERROR
@


1.61
log
@  Minor update.
Detail:
  !Run files for Phoenix requested TextGadgets 0.29, but this can be 0.28
  now, and has been amended. Signal handling in Main.c revised a bit.
Admin:
  Tested, works.

Version 2.11. Tagged as 'Browse-2_11'
@
text
@d80 1
d622 4
@


1.60
log
@  Huge pile of changes bringing relatively ancient sources up to date.
Detail:
  This check-in includes Phoenix version 2.11 (26-Apr-2005); only the
  debug and JavaScript builds of Phoenix have been tested and resources
  will definitely be out of date for other versions. The various "!..."
  scripts have been updated to require a minimum of 2MB with no maximum
  limit for building, as CC 5.60 is quite RAM hungry.
Admin:
  Phoenix 2.11 JS builds OK, works reasonably well. Many outstanding
  issues of course, as this is a very outdated browser now.

Version 2.09. Tagged as 'Browse-2_09'
@
text
@d154 4
d171 1
d1808 16
d1979 2
a1980 2
  /* NB, don't forget to echo any changes here with the duplicate code */
  /* just below the setjmp call later.                                 */
d1982 11
a1992 5
  signal(SIGOSERROR, catch_errors); /* OS error            */
  signal(SIGILL,     catch_errors); /* Illegal instruction */
  signal(SIGSEGV,    catch_errors); /* Segment violation   */
  signal(SIGSTAK,    catch_errors); /* Stack overflow      */
  signal(SIGFPE,     catch_errors); /* FPE error           */
d2185 44
a2228 4
    char         * tok        = NULL;
    unsigned int * regdump    = NULL;
    unsigned int * os_regdump = NULL;
    char           pc[16];
d2230 33
a2262 1
    print_abort_print();
d2264 2
d2319 5
a2323 5
      case 0x000000: tok = "EZeros0"; break;
      case 0x000001: tok = "EZeros1"; break;
      case 0x000002: tok = "EZeros2"; break;
      case 0x000003: tok = "EZeros3"; break;
      case 0x000005: tok = "EZeros5"; break;
a2383 15

    /* Need to reinstall the signal handlers since the run-time */
    /* system will have removed them 'For Your Safety And       */
    /* Convenience'. Don't forget to keep this list up to date  */
    /* with the code near the top of the function.              */

    signal(SIGOSERROR, catch_errors); /* OS error            */
    signal(SIGILL,     catch_errors); /* Illegal instruction */
    signal(SIGSEGV,    catch_errors); /* Segment violation   */
    signal(SIGSTAK,    catch_errors); /* Stack overflow      */
    signal(SIGFPE,     catch_errors); /* FPE error           */

    erb.errnum = Utils_Error_Custom_Normal; /* For 'Quit' as well as 'Continue' */

    show_error_cont(&erb);
d2386 3
a2388 4
  while (!quit)
  {
    /* We use flex's deferred compaction, so ensure the */
    /* heap is as small as possible.                    */
d2390 1
a2390 29
    flex_compact();

    /* What time is it? (For Wimp_PollIdle) */

    _swix(OS_ReadMonotonicTime,
          _OUT(0),

          &time);

    /* Use PollIdle, but want drag events to be as responsive as possible */

    ChkError(event_poll_idle(&eventcode,
                             &b,
                             time + 5*!drag_in_progress,
                             NULL));
  }

  dprintf(("Rout", "\nmain: Calling exit()\n\n"));

  dprintf(("CMal", "Near exit, malloccount: \0216%d\0217\n", malloccount));
  dprintf(("CFle", "Near exit, flexcount  : %d\n",           flexcount));

  /* Save hotlist, histories etc., and logout if a multiuser build */

  show_error_ret(multiuser_logout());

  /* This will call the termination() function in passing */

  exit(EXIT_SUCCESS);
@


1.59
log
@  Load balancer pulled apart. DebugLib support. Temporary debug in place.
Detail:
  This is in the middle of some load balancer changes, but I'm checking it
  in as there's a sweeping source code change to use DebugLib. See Global.c
  for full details. Temporary debug code for the load balancer stuff is
  currently held under undocumented area "test".
Admin:
  This build now identifies itself as 2.08 i2-4 and says Pace on the about:
  page. Run for some time with no unexpected problems. Tried a mixture of
  debug levels successfully.

Version 2.08. Not tagged
@
text
@d280 1
a280 1
    area_number = flex_init(main_da_name, NULL, 0x4000000);
d942 3
a944 1
  if (!strcmp(lookup_choice("EVScripts:no",       0, 0), "yes"))    choices.ev_scripts        = 1;
d1341 1
d1884 1
d1887 1
a1887 1
      if (argc >= argp + 1)
d1901 1
a1901 1
             val = "MsgT,TBar,Null,Wind,Menu,Rout,Fetc,Memo,Refo,Redr,Font,LMem,CMal,CFle,Imag,Hist,Fram,Stre,Tabl,URIH,KeyC,JScr,Hotl,Save,Drag,Choi,Plug";
d1918 1
a1918 1
      if (!strcmp(val, ""))
d2089 1
a2089 1
    while (argc >= argp)
d2093 1
a2093 1
      if (argc >= argp + 1 && !strcmp(argv[argp], "-html"))
d2109 1
a2109 1
      else if (argc >= argp + 1 && !strcmp(argv[argp], "-uri"))
d2132 1
a2132 1
      else if (argc >= argp + 1 && (!strcmp(argv[argp],"-url") || !strcmp(argv[argp],"-u")))
@


1.58
log
@
64-wide comments adopted throughout. All headers protected against multiple
inclusion. Use of <> for external headers rather than "". For libraries,
<libname/header.h> is used rather than relying on a complex include path,
where appropriate. Move towards using external URILib rather than the local
copy. Phoenix JavaScript build resources are the only up to date set
currently so don't try others; more work still required on Makefile (e.g.
getting the ROM build working, and internationalisation issues).

Version 2.08. Not tagged
@
text
@d26 1
a59 5
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

d93 1
a93 1
// /* Because parts of this source will be executed right at the very  */
d1419 25
a1443 39
    if (tl & (1u<<5))
    {
      Printf("\nWidth: %d\n"
               "Height: %d\n",
                choices.width,
                choices.height);

      Printf("\nBack colour: %p\n"
               "Text colour: %p\n"
               "Link colour: %p\n"
               "Used colour: %p\n",
                (void *) choices.background_colour,
                (void *) choices.text_colour,
                (void *) choices.link_colour,
                (void *) choices.used_colour);

      Printf("\nSystem font: %d\n"
               "Show foreground images: %d\n"
               "Show background images: %d\n"
               "Fixed pointer: %d\n"
               "Underline links: %d\n"
               "Use document colours: %d\n"
               "URL bar: %d\n"
               "Button bar: %d\n"
               "Status bar: %d\n"
               "Move gadgets: %d\n"
               "Use a proxy: %d\n\n",
                choices.system_font,
                choices.show_foreground,
                choices.show_background,
                choices.fixed_pointer,
                choices.underline_links,
                choices.use_source_cols,
                choices.url_bar,
                choices.button_bar,
                choices.status_bar,
                choices.move_gadgets,
                choices.use_proxy);
    }
a1446 1
    if (tl & (1u<<26))
d1451 1
a1451 1
      #define TestLeaf(str) {urlutils_leafname_from_url((str), leafname, sizeof(leafname)); Printf("%s ", leafname);}
d1453 2
a1454 2
      Printf("\nChecking URL to Leafname translation\n");
      Printf("====================================\n\n");
d1469 1
a1469 1
      Printf("\n");
d1478 1
a1478 1
      Printf("\n");
d1487 1
a1487 1
      Printf("\n");
d1496 1
a1496 1
      Printf("\n");
d1505 1
a1505 1
      Printf("\n");
d1514 1
a1514 1
      Printf("\n");
d1523 1
a1523 1
      Printf("\n");
d1532 1
a1532 1
      Printf("\n\n");
d1547 1
a1547 1
      Printf("\n");
d1556 1
a1556 1
      Printf("\n");
d1565 1
a1565 1
      Printf("\n");
d1574 1
a1574 1
      Printf("\n");
d1583 1
a1583 1
      Printf("\n");
d1592 1
a1592 1
      Printf("\n");
d1601 1
a1601 1
      Printf("\n");
d1610 1
a1610 1
      Printf("\n\n");
d1624 1
a1624 1
      Printf("\n");
d1636 1
a1636 1
      Printf("\n");
d1644 1
a1644 1
      Printf("\n\n");
d1655 1
a1655 1
      Printf("\n");
d1664 1
a1664 1
      Printf("\n");
d1673 1
a1673 1
      Printf("\n");
d1682 18
a1699 18
      Printf("\n\n");
      Printf("Checking pathname canonicalisation\n");
      Printf("==================================\n\n");

      #define TestCanonicalise(str) {                                                    \
                                      strcpy(leafname, (str));                           \
                                      Printf("In : '%s'\n",leafname);                    \
                                                                                         \
                                      utils_canonicalise_path(leafname, &canonicalised); \
                                                                                         \
                                      if (canonicalised)                                 \
                                      {                                                  \
                                        Printf("Out: '%s'\n\n", canonicalised);          \
                                                                                         \
                                        free(canonicalised);                             \
                                        canonicalised = NULL;                            \
                                      }                                                  \
                                      else Printf("Out: (Error)\n\n");                   \
d1709 2
a1710 2
      Printf("Checking URL matching\n");
      Printf("=====================\n\n");
d1712 13
a1724 13
      #define TestMatch(url, match) {                                                         \
                                      url_description * d = urlutils_return_description(url); \
                                                                                              \
                                      strcpy(leafname, match);                                \
                                                                                              \
                                      Printf("'%s' to '%s': ",                                \
                                             url,                                             \
                                             leafname);                                       \
                                                                                              \
                                      Printf("%d\n",                                          \
                                             urlutils_matches_special(d, leafname));          \
                                                                                              \
                                      urlutils_free_description(d);                           \
d1743 1
a1743 1
      Printf("\nThe following four groups of six should give '1, 1, 0, 0, 1, 1'...\n\n");
d1773 3
a1775 3
       * Printf("\n\n");
       * Printf("Checking path building\n");
       * Printf("======================\n\n");
d1777 9
a1785 9
       * #define TestBuild(str) {                                                \
       *                          _kernel_oserror * e = utils_build_tree((str)); \
       *                                                                         \
       *                          if (!e) Printf("OK : '%s'\n", (str));          \
       *                          else                                           \
       *                          {                                              \
       *                            Printf("Err: '%s'\n", (str));                \
       *                            Printf("     '%s'\n", e->errmess);           \
       *                          }                                              \
d1810 1
a1810 3
  #ifdef TRACE
    if (tl & (1u<<5)) Printf("termination() called\n");
  #endif
d1844 2
d1875 62
a2003 53
  #ifdef TRACE

    malloccount = flexcount = 0;

    /* Handle -d[ebug] CLI switch; see Global.c for more information. */
    /* This must be the first command line argument.                  */

    if (argc >= argp + 1)
    {
      if (!strcmp(argv[argp],"-debug") | !strcmp(argv[argp],"-d"))
      {
        if (strstr(argv[argp + 1], "MsgT")) tl |= (1u<<0);
        if (strstr(argv[argp + 1], "TBar")) tl |= (1u<<1);
        if (strstr(argv[argp + 1], "Null")) tl |= (1u<<2);
        if (strstr(argv[argp + 1], "Wind")) tl |= (1u<<3);
        if (strstr(argv[argp + 1], "Menu")) tl |= (1u<<4);
        if (strstr(argv[argp + 1], "Rout")) tl |= (1u<<5);
        if (strstr(argv[argp + 1], "Fetc")) tl |= (1u<<6);
        if (strstr(argv[argp + 1], "Memo")) tl |= (1u<<7);
        if (strstr(argv[argp + 1], "Refo")) tl |= (1u<<8);
        if (strstr(argv[argp + 1], "Redr")) tl |= (1u<<9);
        if (strstr(argv[argp + 1], "Font")) tl |= (1u<<10);
        if (strstr(argv[argp + 1], "BBox")) tl |= (1u<<11);
        if (strstr(argv[argp + 1], "LMem")) tl |= (1u<<12);
        if (strstr(argv[argp + 1], "CMal")) tl |= (1u<<13);
        if (strstr(argv[argp + 1], "CFle")) tl |= (1u<<14);
        if (strstr(argv[argp + 1], "Imag")) tl |= (1u<<15);
        if (strstr(argv[argp + 1], "Hist")) tl |= (1u<<16);
        if (strstr(argv[argp + 1], "Fram")) tl |= (1u<<17);
        if (strstr(argv[argp + 1], "Stre")) tl |= (1u<<18);
        if (strstr(argv[argp + 1], "Circ")) tl |= (1u<<19);
        if (strstr(argv[argp + 1], "Tabl")) tl |= (1u<<20);
        if (strstr(argv[argp + 1], "URIH")) tl |= (1u<<21);
        if (strstr(argv[argp + 1], "KeyC")) tl |= (1u<<22);
        if (strstr(argv[argp + 1], "RBox")) tl |= (1u<<23);
        if (strstr(argv[argp + 1], "JScr")) tl |= (1u<<24);
        if (strstr(argv[argp + 1], "Hotl")) tl |= (1u<<25);
        if (strstr(argv[argp + 1], "Save")) tl |= (1u<<26);
        if (strstr(argv[argp + 1], "Drag")) tl |= (1u<<27);
        if (strstr(argv[argp + 1], "MsgP")) tl |= (1u<<28);
        if (strstr(argv[argp + 1], "Choi")) tl |= (1u<<29);
        if (strstr(argv[argp + 1], "Plug")) tl |= (1u<<30);

        if (strstr(argv[argp + 1], "All"))  tl  = 0xffffffff;

        argp += 2;
      }
    }

    if (tl & (1u<<5)) Printf("\nmain: Initialising\n");

  #endif

d2008 1
a2008 3
  #ifdef TRACE
    if (tl & (1u<<5)) Printf("main: Loading choices\n");
  #endif
d2057 1
a2057 3
      #ifdef TRACE
        if (tl & (1u<<5)) Printf("main: Starting proxy server\n");
      #endif
d2067 1
a2067 4
      else
      {
        if (tl & (1u<<5)) Printf("main: Proxy server already running\n");
      }
d2072 1
a2072 3
  #ifdef TRACE
    if (tl & (1u<<5)) Printf("main: Handling CLI arguments\n");
  #endif
d2093 1
a2093 3
        #ifdef TRACE
          if (tl & (1u<<5)) Printf("main: Handling -html CLI argument\n");
        #endif
d2109 1
a2109 3
        #ifdef TRACE
          if (tl & (1u<<5)) Printf("main: Handling -uri CLI argument\n");
        #endif
d2130 1
a2130 3
        #ifdef TRACE
          if (tl & (1u<<5)) Printf("main: Handling -url CLI argument\n");
        #endif
d2141 1
a2141 3
  #ifdef TRACE
    if (tl & (1u<<5)) Printf("main: Polling\n");
  #endif
d2318 4
a2321 5
  #ifdef TRACE
    if (tl & (1u<<5))  Printf("\nmain: Calling exit()\n\n");
    if (tl & (1u<<13)) Printf("Near exit, malloccount: \0216%d\0217\n",malloccount);
    if (tl & (1u<<14)) Printf("Near exit, flexcount  : %d\n",flexcount);
  #endif
@


1.57
log
@Header and footer support working a lot better than in the previous
release. Could do with some code tidying, but little else to do.
Fixed a typo in JavaScript.c that stopped debug builds compiling,
and updated Trace.c to know about all current HStream flags bits.
@
text
@d15 12
a26 9
/***************************************************/
/* File   : Main.c                                 */
/*                                                 */
/* Purpose: To run.                                */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 12-Nov-96: Created.                    */
/***************************************************/
d28 2
a29 2
#include "setjmp.h"
#include "signal.h"
d37 26
a62 19
#include "swis.h"
#include "kernel.h"
#include "flex.h"

#include "HTMLLib.h" /* HTML library API, Which will include html2_ext.h, tags.h and struct.h */
#include "URI.h"     /* URI handler API, in URILib:h */

#include "wimp.h"
#include "wimplib.h"
#include "event.h"

#include "toolbox.h"
#include "quit.h"
#include "proginfo.h"
#include "window.h"
#include "menu.h"
#include "saveas.h"
#include "printdbox.h"
#include "gadgets.h"
a63 1
#include "svcprint.h"
d129 1
a129 1
    #include "MemLib/memheap.h"
d132 1
a132 1
      #include "NSPRLib/ROSallocs.h"
d219 5
a223 5
/*************************************************/
/* initialise_app()                              */
/*                                               */
/* Initialises application as a Toolbox task.    */
/*************************************************/
d719 11
a729 12
/*************************************************/
/* open_messages_file()                          */
/*                                               */
/* Asks MessageTrans to open a Messages file.    */
/* Looks through a system variable for the path  */
/* to find the file in before going to a         */
/* default - see the code comments for more      */
/* information.                                  */
/*                                               */
/* Parameters: 0 to load the Choices file, or 1  */
/*             to load the Controls file.        */
/*************************************************/
d797 10
a806 11
/*************************************************/
/* close_messages_file()                         */
/*                                               */
/* Closes a messges file and releases the RMA    */
/* space claimed for it.                         */
/*                                               */
/* Parameters: Pointer to the allocated chunk of */
/*             RMA space holding the             */
/*             MessageTrans control block and    */
/*             Messages file pathname.           */
/*************************************************/
d829 12
a840 13
/*************************************************/
/* colour_table_leaf_to_path()                   */
/*                                               */
/* Called by ImageLib. Print a full lookup table */
/* file pathname into path given the leafname.   */
/*                                               */
/* Parameters: Pointer to output buffer for full */
/*             pathname;                         */
/*                                               */
/*             Pointer to leaf name.             */
/*                                               */
/* Assumes:    Output buffer big enough :)       */
/*************************************************/
d847 7
a853 7
/*************************************************/
/* load_choices()                                */
/*                                               */
/* Reads in the choices from the Messages file,  */
/* filling in the global_choices structure,      */
/* 'choices' (see Global.c and Global.h).        */
/*************************************************/
d1409 6
a1414 6
  /*************************************************/
  /* self_test()                                   */
  /*                                               */
  /* Run through a few standard startup trace      */
  /* build output routines.                        */
  /*************************************************/
d1818 8
a1825 9
/*************************************************/
/* termination()                                 */
/*                                               */
/* Called by registration through the atexit     */
/* function. Shuts down core functions prior to  */
/* the browser exitting (e.g. the Font Manager   */
/* can get very tetchy about having font handles */
/* left claimed, so must release them).          */
/*************************************************/
d1854 5
a1858 5
/*************************************************/
/* main()                                        */
/*                                               */
/* That which runs before all others.            */
/*************************************************/
a1872 4
  #ifdef SINGLE_USER
    int         done_one = 0;
  #endif

d2104 1
a2104 7
    /* Keep advancing argp if the arguments are dealt with;  */
    /* only continue to check the arguments if we haven't    */
    /* pushed argp past argc, the total number of arguments. */

    done_one = 1;

    while (argc >= argp && done_one)
a2105 2
      done_one = 0;

d2108 1
a2108 1
      if (argc >= argp + 1)
d2110 1
a2110 3
        if (!strcmp(argv[argp], "-html"))
        {
          char url[Limits_URL];
d2112 3
a2114 3
          #ifdef TRACE
            if (tl & (1u<<5)) Printf("main: Handling -html CLI argument\n");
          #endif
d2116 2
a2117 2
          StrNCpy0(url, argv[argp + 1]);
          urlutils_pathname_to_url(url, sizeof(url));
d2119 1
a2119 1
          windows_create_browser(url, NULL, NULL, NULL, Windows_CreateBrowser_Normal);
d2121 1
a2121 2
          argp += 2, done_one = 1;
        }
d2126 1
a2126 1
      if (argc >= argp + 1)
d2128 1
a2128 3
        if (!strcmp(argv[argp], "-uri"))
        {
          char url[Limits_URL];
d2130 15
a2144 15
          #ifdef TRACE
            if (tl & (1u<<5)) Printf("main: Handling -uri CLI argument\n");
          #endif

          urlutils_load_uri_file(url,
                                 sizeof(url),
                                 NULL,
                                 0,
                                 argv[argp + 1]);

          if (*url) windows_create_browser(url,
                                           NULL,
                                           NULL,
                                           NULL,
                                           Windows_CreateBrowser_Normal);
d2146 1
a2146 2
          argp += 2, done_one = 1;
        }
d2151 1
a2151 1
      if (argc >= argp + 1)
d2153 3
a2155 5
        if (!strcmp(argv[argp],"-url") || !strcmp(argv[argp],"-u"))
        {
          #ifdef TRACE
            if (tl & (1u<<5)) Printf("main: Handling -url CLI argument\n");
          #endif
d2157 1
a2157 1
          windows_create_browser(argv[argp+1], NULL, NULL, NULL, Windows_CreateBrowser_Normal);
d2159 1
a2159 2
          argp += 2, done_one = 1;
        }
d2161 1
d2341 1
a2341 1
                             time + !drag_in_progress,
d2360 15
a2374 17
/*************************************************/
/* catch_errors()                                */
/*                                               */
/* Catch OS errors and report them with the      */
/* opportunity to continue or quit (done inside  */
/* main itself).                                 */
/*                                               */
/* This is the last function in the file since   */
/* it plays around with stack checking, and you  */
/* can't read the previous state. If this was in */
/* the middle of the source and someone wrote a  */
/* #pragma above it, endless confusion could     */
/* otherwise arise as to why the instruction had */
/* no effect on some of the functions here...    */
/*                                               */
/* Parameters: The signal number (ignored).      */
/*************************************************/
@


1.56
log
@Misecllaneous tweaks and fixes. Major addition is full header and footer
support in the printing system - see the Phoenix Choices file for more
information.

Only the Phoenix resources are up to date currently.
@
text
@d1070 1
a1070 1
  choices.print_date_format = utils_strdup(lookup_choice("PrintDateFormat:%%24:%%mi:%%se %%dy-%%m3-%%ce%%yr", 0, 0));
d1076 1
a1076 1
  /* and sideways of landscape. The browser always *saves* portrait or landscape. */
d1078 3
a1080 2
  if   (!strcmp(lookup_choice("PrintOrient:upright", 0, 0), "upright")) choices.print_orient = Choices_PrintOrient_Upright;
  else                                                                  choices.print_orient = Choices_PrintOrient_Sideways;
@


1.55
log
@Long overdue check-in of intermediate browser build, from continued "out
of hours" work. Forgot to add a few files last time too.

List dialogue box handler complete, and exclusion lists implemented
within the main browser code. Full documentation in Choices file.
Save routine knows all about it but is now getting very slow - must
come up with a better scheme; for now, it puts the hourglass on...

StripExtensions option controls auto stripping of filename extensions.

More sensible ancestor / frame selection for keyboard shortcut items
and the save dialogues - having selected a frame won't lock you into
it for F3 and related shortcuts now (input focus in URL writable ->
get ancestor details, input focus in frame -> get frame details). F4
works in frames. F5 now generally present for 'view source' with a
corresponding menu entry in the File menu.

Odd thing in later Res files; there's no action set for Adjust clicks
on the main ToolAction items in the button bar. Very odd. Nothing
appears to be set in v2.07 either, yet adjust-click works. Even
stranger. Anyway, added in the relevant event details (same as for
Select click in all cases) and this fixes the problem.

Background colours in the TABLE tag ignored the "don't print any
backgrounds" Print Style setting. Fixed. Meanwhile, the "black
text with no backgrounds" option wasn't getting this right either;
fixed this also.

Event logging implemented; HTTP errors and script output via.
window.print extension. No internal error output yet.

Faith:Never behaviour extended. If ever a server sends something with
no content type or an unhandleable type, the browser will try and get a
filetype from the URL. If it gets text or HTML, it'll render the file.
Else it'll save it. Hacks around IIS 4's lack of a content type field
in the Marketeye login stuff, and similar other slightly broken sites.
@
text
@d897 2
a898 2
  if      (!strcmp(lookup_choice("SupportTables:yes"   , 0, 0),"yes"))    choices.support_tables     = 1;
  if      (!strcmp(lookup_choice("MSIE4StyleTables:yes", 0, 0),"yes"))    choices.msie4_style_tables = 1;
d914 4
a917 3
    if (!strcmp(lookup_choice("SupportJS:yes",  0, 0),"yes")) choices.support_js    = 1;
    if (!strcmp(lookup_choice("JSNavAsNav:no",  0, 0),"yes")) choices.js_nav_as_nav = 1;
    if (!strcmp(lookup_choice("JSWatchdog:yes", 0, 0),"yes")) choices.js_watchdog   = 1;
d924 9
d935 14
d1023 72
d1107 3
a1109 3
  if      (!strcmp(lookup_choice("SupportPJPEG:both", 0, 0), "os"))       choices.support_pjpeg = Choices_SupportPJPEG_OS;
  else if (!strcmp(lookup_choice("SupportPJPEG:both", 0, 0), "internal")) choices.support_pjpeg = Choices_SupportPJPEG_Internal;
  else                                                                    choices.support_pjpeg = Choices_SupportPJPEG_Both;
d1240 2
a1241 10
  lookup_choice("ProxyAddress:http://127.0.0.1/", 0, 0);
  choices.proxy_address = malloc(strlen(tokens) + 1);
  if (choices.proxy_address)
  {
    strcpy(choices.proxy_address, tokens);
  }
  else
  {
    show_error(make_no_memory_error(32));
  }
d1250 2
a1251 6
    choices.post_in = malloc(strlen(lookup_choice("PostIn:<none>", 0, 0)) + 1);

    if (choices.post_in) strcpy(choices.post_in, tokens);
    else show_error(make_no_memory_error(32));

    choices.post_out = malloc(strlen(lookup_choice("PostOut:<none>", 0, 0)) + 1);
d1253 2
a1254 2
    if (choices.post_out) strcpy(choices.post_out, tokens);
    else show_error(make_no_memory_error(32));
@


1.54
log
@Intermediate check-in; building a browser from this gives you something
between 2.07 and 2.08. Only the Phoenix JavaScript resources are fully
up to date.

I *think* these are the changes since the last check-in:

When saved as a Draw file, horizontal rules were plotted one page width
too far to the right (wonder when that started happening?!). Fixed. In
addition, DrawFiles now accepted as OBJECTs - they weren't in the
recognised filetype list before. Doh.

Table size calculator tables_count_table would overestimate the number
of cells where ROWSPAN was present and there were other rows below the
one spanned. Fixed. In certain odd cases (e.g. optimised image exports
as HTML tables (!!) from the Gimp) this can save vast amounts of RAM.

Fixed problem where printing stops in the middle of a document. Redraw
engine pagination code was written in the days where lines couldn't
have gaps between them; they can now. If a gap fell at the bottom of
a page the engine would look down, see no line straddling or touching
the page edge, and assume there was nothing more. This case is now
correctly handled.

Made sure desktop and testbed Browse Res files had up-to-date Encoding
menus (v2.07 Phoenix has different menus from v2.07 Browse by oversight).

URL auto-completion piggy-backed onto manual completion code; any string
without '.', '/' or ':' in it gets run through completion to see if a
more meaningful item can be produced - "www" special cased out though.

New List dialogue box handler, used for proxy exclusions etc.
(incomplete), complete with appropriate Res file objects.
@
text
@d64 1
a69 1
#include "List.h"
d405 5
d452 1
d592 1
d1152 1
a1152 1
    show_error(make_no_memory_error(103));
d1269 4
d1635 63
d2061 11
a2071 3
          urlutils_load_uri_file(url, sizeof(url), NULL, 0, argv[argp + 1]);

          windows_create_browser(url, NULL, NULL, NULL, Windows_CreateBrowser_Normal);
@


1.53
log
@Tweaks to export rules in Makefile - ResJ source for JavaScript builds,
all of User dir exported, resources rule exports About as well as User.

Handles images with a width or height of 0 specified in the HTML.
Previously went for a default size placeholder and changes to image
sizes and/or redraw problems could occur before/after subsequent
reformatting (involved trivial changes to image_get_image_size and
image_redraw_area only).

Default parameter HRs now plot properly in rectangular pixel modes.

Choices code updated to cope with the minimum font size, JS support,
watchdog on/off and timeout, Navigator object option added generally
(act even *more* like Navigator), image GC after fetch, and image
GC unused image / free RAM constraints.

Code in JSnavigator.c updated to obey new "act more like Navigator"
option (see above). Currently declares itself as version 3.0.

Resources for all builds are up to date. All links in default hotlist
verified and corrected where necessary, with several new links added.

This is Release v2.07. Not tested very much, sorry; YMMV.
@
text
@d69 1
d106 8
a113 5
/* Note that building with USE_NSPRLIB_ALLOC_REGISTRATION     */
/* activates redefines in NSPRLib that will make all of the   */
/* core browser malloc() etc. calls use the reregisterable    */
/* functions instead. If not doing this, we'll need to bring  */
/* in ROSallocs.h ourselves as NSPRLib won't do it.           */
d219 1
d275 1
a275 1
    flex_init(main_da_name, NULL, 0x4000000);
d293 1
d304 11
d415 5
d446 1
d1017 4
@


1.52
log
@Another intermediate check-in, resources may not be up to date; items
most likely to be buildable are PhoenixJ and BrowseD. Done because I'm
about to make some rather dodgy changes to code otherwise unchanged
since the Customer browser and I may well have to back them out...

In Handlers.c now set the HFlags_HasBeenVisited bit of a token at the point
it is first clicked on. Means the link returns to a "visited" colour after
the highlight flash immediately. This will persist for as long as the browser
window is kept open on that page, though if the URL doesn't end up making it
into the history for whatever reason it would "unhighlight" on reload; fair
enough, really. The highlight is window-local, so there are no redraw worries
for other open windows with links to the same URL (though other same-URL
links on the same page aren't updated either).

All forms submissions force a reload (principally for eudoramail.com, but
many other sites have similar requirements).

!MkClean and !MkClnAll didn't correctly call the utility to strip Makefile
dependencies. Fixed.

On fetch closedown, fetchpage_preprocess_token could be called on a token
which had already been run through the preprocessor. Now checks the flags
word before proceeding.

Image RAM cache and garbage collection system implemented - see new Choices
file entries CollectAfter, FreeRAMLimit and UnusedImageLimit to get an
overview. This contains groundwork for JavaScript image array support.

More JavaScript support improvements. Any one window object will know its
parent, top, this, etc.; frames array working except for a frameset created
via. multiple documents; opener for something created with window.open is
currently not set and don't know why (property is being created, pointer to
valid object is held, but JS engine returns 'null'. Ho hum) - JSChain won't
work yet, then.
@
text
@d884 3
a886 2
    if (!strcmp(lookup_choice("SupportJS:yes",  0, 0),"yes")) choices.support_js  = 1;
    if (!strcmp(lookup_choice("JSWatchdog:yes", 0, 0),"yes")) choices.js_watchdog = 1;
d1087 1
a1087 1
  if (!strcmp(lookup_choice("ToggleOnXOnly:no", 0, 0), "yes")) choices.toggle_on_x_only = 1;
@


1.51
log
@Everyone else seems to be checking lots of stuff in lately, so I've
decided to join in. This is an intermediate check-in and so not all
resources etc. will be up to date. You should be able to make Phoenix
and a debug build out of it. As a reminder, to make a JavaScript build:

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean. This now strips dynamic dependencies from the MakeFile
   automatically, to save you having to do it yourself.
 * Run one of the TaskObey files with the "J" suffix, e.g. !DeskBrwsJ -
   this uses the same .o directory for object files and exports to the
   same position in the Targets directory as the non-JavaScript build,
   but it does produce a unique binary in 'abs' and symbols table in
   'syms'.
 * Sourcing an appropriate !Run (with increased WimpSlot value), !Boot
   and About resource is done automatically.
 * Some, but not all of the !xxxD (debug) TaskObey files will make
   JavaScript versions in passing - check the JSUFFIX value on the Make
   command line parameters in the file.

This'll only work on RISC OS 3.1 due to the use of MemLib.

Here's the change list:

Included MNG icons in sprites files; added Sprites23 for some builds.
Added in ANT URL file icon (b28) derived from URI file icon, because
the Save dialogue can need it.

No, you do *not* need to define the same keyboard shortcuts in each
frame since the ancestor keeps the input focus and we've basically
dropped non-nested Wimp support. Maintaining no less than 4 lists of
identical shortcuts was a pain. Some Res files now only have the
lists in the main browser window and button bar objects (these two
are both required still).

Ursula build Markers button arrangement changed from 1x3 horizontal to
2x2 tilted, as in Phoenix, by popular demand.

Couple of hotlist bugs fixed; dragging an item and deleteing it with
Ctrl+X didn't terminate the drag, and deleteting an item underneath a
menu opened for it didn't close the menu.

'SendReferer' option added to all Choices files, all set to 'always'.
Put just beneath 'Clone' as it refers to header items, though really,
both Clone and SendReferer should probably be in the "Fetch controls"
section rather than "Multiuser environments and proxying"! Front-end
control of this is available.

In image_export_original, save_save_source, save_transfer_source and
save_save_object, flex_set_budge(0) was called to lock the heap but the
return value wasn't stored. flex_set_budge(1) was then used to unlock
the heap. All calls now remember and restore the old value, which is
both safer in case one calls another and allows the flex_set_budge
call in Main.c to have an application-wide meaning, as intended.

Some restructuring to the data load and RAM transfer sections of
Protocols.c; remote hotlist builds wouldn't allow files to be loaded
to browser windows before, and can now drop URL, URI or text files to
the Open URL dialogue.

New option "MinimumFontSize", lets the 'size' attribute of the 'font'
element be overridden. Default value is 1, to allow the full range of
values for the attribute. Setting to 7, for example, would give font
size 7 text at all times. Another new option, "ToggleOnXOnly", to
make Toggle Size only extend the window vertically (with Ctrl then
being used to toggle to genuine full size, rather than vice versa).
All Choices files updated to hold both of these options; only the
first has front-end control available (see debug build Res file).

JavaScript Document object exists; frames array etc. working. Can now
just about use "http://www.acorn.com/~ahodgkin/jschain/" but it does
abort after a bit - problems with frames again, I suspect. Is is pretty
slow, too. Can now press Escape to terminate a script.

Main.c erroneously referred to Controls file entry "StopWebServe" as
"StopWebProxy". Fixed.

Keyboard shortcuts to raise SaveFile are now possible in a general sense;
the code before was in the ToBeShown handler and just checked for a parent
component of -1. It then assumed "save frame HTML source". Now there's the
savefile_raise_from_shortcut function, which together with the seven new
event codes in SaveFile.h allows saving of HTML source and frame location,
export of links, images, backgrounds and the page as text or draw, to all
be invoked by keyboard shortcuts. Some Res files have some of these defined.

In reformat_check_height, the first check to see if setpara should be set
references a field in tpLast without checking if it is NULL. Whilst the
'line > 0' check should mean that tpLast wasn't NULL anyway, a direct
call to the function from outside of the reformatter might have tripped
up on this - the check for tpLast != NULL is now made.

Adjust-click on close icon in window showing file: URL attempts to open
the parent Filer window.

Reformatter used to try and find a selectable token if keyboard control
was enabled in a really stupid place - could make reformatting become
very slow if no selectables were present, especially if the page had a
few tables on it. Preprocessor now does this (since it goes through all
of the tokens anyway), the reformatter just doing a last check to ensure
no frames have obscured the selectable and if so, it tries to move it.
Done in the reformatter as generating a line array implies the data really
is visible.

Ctrl+Tab URL completion now builds a full list of matches from the hotlist
and history and can cycle through them (Ctrl+Shift+Tab stepping backwards).

Will give a real error rather than just "Data Abort" if it goes wrong
now. Someone somewhere is setting bit 30 of the error which confused
the replacement signal handler. Flag bits are now masked off (as they
should've been to start with).
@
text
@d79 1
a79 1
/* The following three are defined or undefined locally */
d81 3
a83 3
#undef INCLUDE_HEAPGRAPH
#undef INCLUDE_HIERPROF
#undef INCLUDE_MEMCHECK
d85 1
a85 1
#undef WRITE_DUMP_FILE_ON_ERROR
d87 25
a111 19
/* Because parts of this source will be executed right at the very  */
/* start of program execution, we must be careful not to use MemLib */
/* (assuming USE_MALLOC_REPLACEMENT is defined) before the heap is  */
/* set up; to this end, define routes back to the standard malloc() */
/* family.                                                          */

#define real_malloc(size)       (malloc)(size)
#define real_free(ptr)          (free)(ptr)
#define real_realloc(ptr, size) (realloc)(ptr, size)
#define real_calloc(n, size)    (calloc)(n, size)

/* If MemHeap_Initialise is to be called without the compiler */
/* complaining, we need the MemLib header file. If the        */
/* JavaScript related libraries are using MemLib but it isn't */
/* being used locally, we need to include the header here.    */

#ifndef USE_MALLOC_REPLACEMENT

  #ifdef JAVASCRIPT
d113 1
a113 1
    #ifdef JS_USING_MEMLIB
d115 2
a116 2
      #define os_error _kernel_oserror
      #include "MemLib/memheap.h"
d118 2
d279 1
a279 1
  #ifndef USE_MALLOC_REPLACEMENT
d281 6
a286 1
    #ifdef JAVASCRIPT
d288 2
a289 1
      #ifdef JS_USING_MEMLIB
d291 4
a294 2
        /* If using JavaScript, bring up MemLib with a dynamic area */
        /* name based on the task name - e.g. 'Browse JavaScript'.  */
d296 4
a299 2
        {
          char da[128];
d301 2
a302 1
          StrNCpy0(da, program_name);
d304 1
a304 1
          lookup_token("DAJSc:JavaScript",0,0);
d306 1
a306 5
          if (strlen(da) + strlen(tokens) + 1 < sizeof(da))
          {
            strcat(da, " ");
            strcat(da, tokens);
          }
d308 4
a311 1
          MemHeap_Initialise(da);
d314 2
a315 1
      #endif
d319 9
a327 7
  #else

    /* We're using MemLib for general work, not just JavaScript */
    /* (or not at all!)                                         */

    MemHeap_Initialise2(flex_alloc,
                        flex_extend);
d880 1
a880 1
  /* JavaScript*/
d884 1
a884 1
    if (!strcmp(lookup_choice("SupportJS:no",   0, 0),"yes")) choices.support_js  = 1;
d889 1
a889 1
    if (choices.js_timeout < 50) choices.js_timeout = 50;
d998 7
d1718 2
a1719 1
    real_malloc(4*1024*1024);
d1757 2
a1758 1
    task_dir = real_malloc(len + 1);
@


1.50
log
@Added capability to send Referer headers, together with new options to
allow this to be sent: a) Always, b) Never, c) when the URL referred to
is an http URL.  Default is c.  There is no frontend editing capability
for this option.  This addition means that various counters and sites
that rely on referer to indicate a resource upon which an operation is
to be carried out will now work (eg. rating a web site on Geocities).
@
text
@d85 34
a132 5
#ifdef JAVASCRIPT
  #define os_error _kernel_oserror
  #include "MemLib/memheap.h"
#endif

d242 68
d530 1
a530 1
  /* Event handlers for saving (most are registered when the dialogue opens) */
d532 10
a541 2
  show_error(event_register_toolbox_handler(-1, ESaveFileToBeShown,   savefile_to_be_shown,     NULL));
  show_error(event_register_toolbox_handler(-1, ESaveObjectToBeShown, saveobject_to_be_shown,   NULL));
a548 24
  /* Wake up flex */

  StrNCpy0(program_name,
           lookup_token("_TaskName",1,0));

  {
    static char main_da_name[128];

    StrNCpy0(main_da_name, program_name);

    lookup_token("DAGen:general store",0,0);

    if (strlen(main_da_name) + strlen(tokens) + 1 < sizeof(main_da_name))
    {
      strcat(main_da_name, " ");
      strcat(main_da_name, tokens);
    }

    flex_init(main_da_name, NULL, 0x3000000);
  }

  flex_set_budge(1);
  flex_set_deferred_compaction(1);

d650 1
a650 1
  /* If required, wake up JavaScript */
a653 27
    #ifndef USE_MALLOC_REPLACEMENT

      #ifdef JS_USING_MEMLIB

        /* If using JavaScript, bring up MemLib with a dynamic area */
        /* name based on the task name - e.g. 'Browse JavaScript'.  */

        {
          char da[128];

          StrNCpy0(da, program_name);

          lookup_token("DAJSc:JavaScript",0,0);

          if (strlen(da) + strlen(tokens) + 1 < sizeof(da))
          {
            strcat(da, " ");
            strcat(da, tokens);
          }

          MemHeap_Initialise(da);
        }

      #endif

    #endif

d800 2
d859 14
d888 7
d967 3
a969 3
  if      (!strcmp(lookup_choice("SendReferInfo", 0, 0), "never"))  choices.send_referer = Choices_SendReferer_Never;
  else if (!strcmp(lookup_choice("SendReferInfo", 0, 0), "always")) choices.send_referer = Choices_SendReferer_Always;
  else                                                              choices.send_referer = Choices_SendReferer_WhenHTTP;
d1055 4
a1058 3
  if (!strcmp(lookup_choice("NoScrollBars:no",  0, 0), "yes")) choices.no_scroll_bars  = 1;
  if (!strcmp(lookup_choice("DragToScroll:yes", 0, 0), "yes")) choices.drag_to_scroll  = 1;
  if (!strcmp(lookup_choice("ShowMayScroll:no", 0, 0), "yes")) choices.show_may_scroll = 1;
d1187 1
a1187 1
  if (!strcmp(lookup_control("StopWebProxy:no", 0, 0), "yes")) controls.stop_proxy  = 1;
a1656 6
  #ifdef USE_MALLOC_REPLACEMENT

    MemHeap_Initialise("Blimey, does this work?");

  #endif

d1690 1
a1690 1
    malloc(4*1024*1024);
d1728 1
a1728 1
    task_dir = malloc(len + 1);
d2006 24
a2029 1
    switch (erb.errnum)
d2031 17
a2047 5
      case 0x80000000: tok = "EZeros0"; break;
      case 0x80000001: tok = "EZeros1"; break;
      case 0x80000002: tok = "EZeros2"; break;
      case 0x80000003: tok = "EZeros3"; break;
      case 0x80000005: tok = "EZeros5"; break;
d2050 2
d2056 14
d2077 14
d2098 3
a2100 3
    /* system will have removed them 'for your saftey and       */
    /* convenience (TM)'. Don't forget to keep this list up to  */
    /* date with the code near the top of the function.         */
d2107 2
@


1.49
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d890 4
@


1.48
log
@All !Run[D], Choices, Messages, Controls and Res files are up to date.

RefoKeep and RefoHold options added to, respectively, try and maintain
the line at the top of the visible area when reformatting, and not shrink
the vertical extent at the start of a reformat to try and avoid flicker
to the top of the page and back down again when RefoKeep is on. Choices
front-end implemented, which also allows RefoWait and RefoTime to be set.
Unfortunately for various reasons this doesn't help the page jumping when
unsized images come in (but RefoHold can improve matters...) - roll on
the image history.

DragToScroll and NoScrollBars options added for frames; included new
pointer type, Mouse_Shape_DTS, so relevant Controls file entries done
and Sprites[22] files updated as required. Noticed some builds have
a low-res ptr_link with a mask - mask removed.

Named anchor following fixed up somewhat - anchors near the bottom of
the page shouldn't be displayed, and then pulled down when the fetcher
releases null polls and ensures the y extent is correct (this through
implementing the min_height field in the browser_data structure).

RefoHang was never implemented and there seems little point to it now,
so the entry for it has been removed from the global choices structure
and all Choices files.

Markers menus should work properly now (in last check-in they would not
update correctly if Adjust was used on the entries).

URI handler usage now a lot more sensible, with configuration of how the
browser uses the module from both a Utils menu submenu (sic) and the
Choices dialogue.

Slightly dodgy 'hang around waiting for user input' stuff for the Cookies
dialogue box: All fetches are suspended; the fetcher remembers some info
about its state at the time the cookie came in, and restores it later; it
will only do this for one fetch at a time. It's necessary to single-thread
the fetcher at this point anyway, since other fetches may have a
dependency on the cookie that is hanging in mid-air at that point. As part
of this, some of the fetcher code has been split out into separate
functions (to try and 'black box' the code a bit). Anyway, Cookie Query
dialogue box now implemented with appropriate Choices file entry and
UI work in the Choices dialogue box.

Phoenix build Choices rearranged. Can now choose when the image history
is saved from the front end. Added also MSIE 4-style table option menu
for JPEG support (OS only, OS if it can handle it, internal only).

Should be a bit faster at loading the history - though 95% of the time
is spent in SWI URL_ParseURL. URL descriptions are stored more
efficiently as part of this - one malloc block instead of several
small blocks. The minimum block size for malloc blocks typically leads
to a significantly smaller startup wimpslot depending on the visit
history size.

Nasty bug in image system fixed. If an image size came in and a reformat
was to take place, the line the image lies in is found and the reformat
progresses from there. Unforunately, this didn't check to see if the
token can't be found in the line list, so it'd reformat from the top
of the page...! This would happen if, for example, an image halfway down
the page came in whilst a reformat for an image higher up had just begun.

In Choices.c, made choices_set_timetype_field, choices_set_uri_field,
choices_set_plugin_field, choices_set_cookie_field, and
choices_set_jpeg_field static (so they're not declared in Choices.h now).

Two memory leaks plugged in URL comparison routines in URLutils.c
(calling free() url_description instead of urlutils_free_descripton()).

Client pull reload handler was setting the reload flag if reloading
the same page, but forgetting to turn on reload_lock so
fetchpage_postprocessed was clearing the reload state... Similarly,
Ctrl+Shift+SELECT-Click on a link when the Controls file 'UseSmall'
entry is 'no' would not have reloaded as it should. Both fixed.

Frames shouldn't be so keen on acquiring horizontal scroll bars and never
letting them go when their width is decreased now. Frames set up for
'scrolling="yes"' will not start with no scroll bars and then gain them
shortly afterwards, causing flicker and two reformats - they'll start
with, and continue to hold, both scroll bars.

Pointer shouldn't flicker when over a frame border whilst other fetches
are progressing now.
@
text
@d68 1
d84 1
d99 5
d446 7
a452 3
  strncpy(program_name,
          lookup_token("_TaskName", 1, 0),
          sizeof(program_name));
d454 1
a454 1
  program_name[sizeof(program_name) - 1] = 0;
d456 8
a463 1
  flex_init(program_name, NULL, 0x3000000);
d568 35
d1225 1
a1225 1
    if (tl & (1<<26))
d1232 1
a1232 1
      Printf("Checking URL to Leafname translation\n");
d1576 1
d1578 1
d1614 1
a1614 1
    malloc(3*1024*1024);
d2031 1
a2031 1
  erb = *_kernel_last_oserror();
@


1.47
log
@This is NOT a 'final' version of anything in particular. I'm checking it
in as I'm about to start playing around with low level window handling
(as part of the thing mentioned at the bottom of this log) - this could
screw things up quite badly if it goes wrong! =8*P

Consequently, I advise you not to check this out over your working sources,
and preferably not to check this out at all.

Markers system - events defined in MiscEvents.h will make Browse remember
where it is on the page. This position can be jumped back to later.
Some builds will have defined keyboard shortcuts Ctrl+Shift+F5 through
F8 to set a marker, and Ctrl+F5 through F8 to jump to a marker.

The front-end for the above now has gadgets 0x80 upwards on the Toolbar or
a set of menus (see Menus.h). Noticed an omission in copy_toolaction_info()
(didn't copy the gadget state) in passing; fixed.

browser_top_line() now works properly, as part of the above, but it'll be
slower than before. If flagged to only find a complete line, it'll do just
that, but whereas before this would require any tables that it looked
inside to be wholly visible, tables can now be partially visible and have
lines inside that are fully visible. This should help the Find function
too. There is a new call, browser_top_line_offset, which works as
browser_top_line but also returns a vertical scroll offset in the found
line (used for more accurate marker position). browser_bottom_line[_r]
turn out to never be used, even by the keyboard control routines, so they
have been removed from Browser.c (rather than spend a lot of time and
effort fixing them).

browser_show_token erroneously subtracted 1 from a particular coordinate
when calculating the y scroll position, which could lead to single pixel
page creep using the markers system. Corrected.

The View Resources button (see Toolbars.h) has been finally implemented,
insofar as it fetches the resources file to the current browser page (or
to a new window if Adjust is used, Controls file settings permitting).

menus_toggle_bars did not take account of the toolbar lower window border
edge correctly. It does now.

The reformatter has a prototype system to keep the vertical page position
when reformatting. This was coded about 5 minutes ago, and is not likely
to be reliable...
@
text
@d68 1
d249 4
d283 1
a283 1
  /* Before showing and after closing menus */
d298 1
d364 1
d481 4
d737 2
a738 1
  if      (!strcmp(lookup_choice("SupportTables:yes", 0, 0),"yes"))    choices.support_tables = 1;
d740 9
a748 9
  if      (!strcmp(lookup_choice("TableOuter",        0, 0), "2d"))    choices.table_outer    = Choices_TableOuter_Always2D;
  else if (!strcmp(lookup_choice("TableOuter",        0, 0), "3d"))    choices.table_outer    = Choices_TableOuter_Always3D;
  else if (!strcmp(lookup_choice("TableOuter",        0, 0), "never")) choices.table_outer    = Choices_TableOuter_Never;
  else                                                                 choices.table_outer    = Choices_TableOuter_Auto;

  if      (!strcmp(lookup_choice("TableInner",        0, 0), "2d"))    choices.table_inner    = Choices_TableInner_Always2D;
  else if (!strcmp(lookup_choice("TableInner",        0, 0), "3d"))    choices.table_inner    = Choices_TableInner_Always3D;
  else if (!strcmp(lookup_choice("TableInner",        0, 0), "never")) choices.table_inner    = Choices_TableInner_Never;
  else                                                                 choices.table_inner    = Choices_TableInner_Auto;
d822 2
a823 2
  choices.maximages = atoi(lookup_choice("MaxImages:5", 0, 0));
  if (choices.maximages <= 0) choices.maximages = 1;
d829 4
d839 4
d921 4
d927 3
a929 2
  if (!strcmp(lookup_choice("RefoWait:no", 0, 0), "yes")) choices.refo_wait = 1;
  if (!strcmp(lookup_choice("RefoHang:no", 0, 0), "yes")) choices.refo_hang = 1;
d937 1
a937 1
  if (!strcmp(lookup_choice("FixedPtr:yes",    0, 0), "yes")) choices.fixed_pointer     = 1;
d939 1
a939 1
  if (!strcmp(lookup_choice("KeyboardCtl:no",  0, 0), "yes")) choices.keyboard_ctrl  = 1;
d1049 1
a1049 1
  /* Fetch controls */
d1057 14
d1092 2
d1559 1
a1559 1
    malloc(2*1024*1024);
d1602 1
a1602 1
      strcpy(erb.errmess, "There is insufficient memory to start the browser.");
@


1.46
log
@Programming warehouse link removed from all hotlists - the page has gone.

Some compile-time hacks in place to use MemLib, a dynamic area based
malloc replacement which shrinks its heap when possible. All builds
have these switched off at the moment. Seemed to work with just Browse,
though there would be problems with message blocks stored in dynamic
areas because of the Wimp's '&3800000' check - however, it failed when
HTMLLib was made to use it, too. Don't know why yet.

ItemInfo.[c/h] source added, with Res file additions for testbed Browse
and Phoenix.

Small fetch windows now work properly regardless of toolbar settings
in the Choices.

Reload now reloads all images too, rather than only reloading them for
as long as the main page was being fetched.

Added a simple 'Find' facility.

Realised that event handlers in eventlib are called in reverse order
of registration, so the miscellaneous event handler is now registered
first rather than last.

Multiuser code added (most only active if SINGLE_USER is undefined). As
part of this, hotlist code now knows about read-only items (done for the
Customer-style 'Resources' file, but works generally anyway).
handle_add_hotlist doesn't try to save the hotlist itself anymore (the
hotlist_add function does all that through hotlist_modified anyway).

Customer build Choices and Controls updated slightly (e.g. ClaimHelp
off, hotlist to save on quit only).

Customer build now uses Phoenix-style buttons. Sprites files which
worked at the time (but will probably be out of date now) and included
most of the original Customer-style sprites are in
'Utils.Icons.Customer'.

Choices, Messages and Res files for all builds now stripped down to only
single user items or single plus multiuser for Customer build and testbed
build. Before, all contained a few multiuser bits in at least the Choices
file if not more.

Grammatical error ("Fetching frames contents" (sic.)) corrected in
default message, Toolbars.c, and all of the Messages files.

Customer build brought back to a servicable level (including
implementation of the Find dialogue box with animation and fixing
up authorisation and 'Stop' state in the tristate). Quite a few
missing #ifndef REMOTE_HOTLIST bits from hotlist code added...

Customer build will not use <Choices$Write> or Boot:Choices for any
file finding now. UseProxy defaults to 'yes', MaxImages to 2. Res
file includes Proxy Address setting (save_save_choices() now writes
the ProxyAddress line).
@
text
@d280 13
a292 10
  show_error(event_register_toolbox_handler(-1, EMainToBeShown,     menus_show_main,     NULL));
  show_error(event_register_toolbox_handler(-1, EUtilsToBeShown,    menus_show_utils,    NULL));
  show_error(event_register_toolbox_handler(-1, EExportToBeShown,   menus_show_export,   NULL));
  show_error(event_register_toolbox_handler(-1, EChoicesToBeShown,  menus_show_choices,  NULL));
  show_error(event_register_toolbox_handler(-1, EFileToBeShown,     menus_show_file,     NULL));
  show_error(event_register_toolbox_handler(-1, ENavigateToBeShown, menus_show_navigate, NULL));
  show_error(event_register_toolbox_handler(-1, EDocumentToBeShown, menus_show_document, NULL));
  show_error(event_register_toolbox_handler(-1, EDocumentHidden,    menus_hide_document, NULL));
  show_error(event_register_toolbox_handler(-1, EEncodingToBeShown, encoding_show_menu,  NULL));
  show_error(event_register_toolbox_handler(-1, EHistoryToBeShown,  menus_show_history,  NULL));
d452 1
d1469 8
a1477 2

    int         argp     = 1;
a1478 1

@


1.45
log
@RefoSingle option added to Controls.

Precautions taken in table code to avoid divide by zero errors.

Framesets defining more frames than the frameset implies, for whatever
reason, should never cause a crash now - just report a 'Frames definition
is badly nested' error (if STRICT_PARSER defined). Along the same lines,
in a single document defining a set of nested frames, two /FRAMESETs in
succession could cause a fairly nasty crash. Fixed.

TIFFs do not get loaded by double-click now.

If holding down SHIFT to save a link contents to disc, you can also hold
down CTRL to bypass the cache (sets the browser's reloading flag). Noticed
when testing this that windows_create_browser didn't take account of the
Controls file 'UseSmall' entry when adjust-shift-clicking on links. It
does now.

There is now a complete and up to date set of interactive help messages
built into the Ursula, Customer and Phoenix build Res files.
@
text
@d173 6
a178 4
//  show_error(event_register_toolbox_handler(-1,
//                                            Toolbox_ObjectAutoCreated,
//                                            attach_event_handlers,
//                                            NULL));
a182 1

d258 1
a258 1
  /* Called when the Find dialogue is to be shown */
d261 1
d421 1
a421 2
  /* Finally - and keep this at the end for efficiency - catch any other */
  /* events that might occur                                             */
d423 3
a425 1
  show_error(event_register_toolbox_handler(-1, -1, handle_miscellaneous_event, NULL));
a462 1
    hotlist_load(lookup_choice("HotlistPath:Browse:User.Hotlist",0,0));
d682 16
a697 1
  lookup_choice("HomePage:http://www.acorn.co.uk/", 0, 0);
d699 1
a699 1
  choices.home_page = malloc(strlen(tokens) + 1);
d701 9
a709 8
  if (choices.home_page)
  {
    strcpy(choices.home_page, tokens);
  }
  else
  {
    show_error(make_no_memory_error(102));
  }
d930 14
a943 2
  /* If compiling for a multiuser environment, these will */
  /* exist and need setting to null strings initially.    */
d945 3
a947 1
  #ifndef SINGLE_USER
d949 2
a950 2
    choices.username[0] = 0;
    choices.password[0] = 0;
d1464 11
a1474 1
  int           argp = 1, done_one = 0;
d1485 1
d1492 1
d1625 18
a1642 1
  /* Load the history after Choices, as we need expiry information */
d1644 7
a1650 3
  #ifdef TRACE
    if (tl & (1u<<5)) Printf("main: Loading history\n");
  #endif
d1652 3
a1654 1
  show_error(history_load(lookup_choice("HistoryPath:Browse:User.History",0,0)));
d1656 1
a1656 1
  /* Similarly, load the image history */
a1657 2
  #ifdef TRACE
    if (tl & (1u<<5)) Printf("main: Loading image history\n");
a1659 2
  show_error(imghistory_load(lookup_choice("ImageHistoryPath:Browse:User.Images",0,0)));

d1699 3
a1701 3
  /* Keep advancing argp if the arguments are dealt with;  */
  /* only continue to check the arguments if we haven't    */
  /* pushed argp past argc, the total number of arguments. */
d1703 1
a1703 1
  done_one = 1;
d1705 3
a1707 3
  while (argc >= argp && done_one)
  {
    done_one = 0;
d1709 1
a1709 1
    /* Handle -html (HTML files) */
d1711 1
a1711 1
    if (argc >= argp + 1)
d1713 5
a1717 1
      if (!strcmp(argv[argp], "-html"))
d1719 3
a1721 1
        char url[Limits_URL];
d1723 3
a1725 3
        #ifdef TRACE
          if (tl & (1u<<5)) Printf("main: Handling -html CLI argument\n");
        #endif
d1727 2
a1728 2
        StrNCpy0(url, argv[argp + 1]);
        urlutils_pathname_to_url(url, sizeof(url));
d1730 1
a1730 1
        windows_create_browser(url, NULL, NULL, NULL, Windows_CreateBrowser_Normal);
d1732 2
a1733 1
        argp += 2, done_one = 1;
a1734 1
    }
d1736 1
a1736 1
    /* Handle -uri (URI files) */
d1738 1
a1738 3
    if (argc >= argp + 1)
    {
      if (!strcmp(argv[argp], "-uri"))
d1740 3
a1742 1
        char url[Limits_URL];
d1744 3
a1746 3
        #ifdef TRACE
          if (tl & (1u<<5)) Printf("main: Handling -uri CLI argument\n");
        #endif
d1748 1
a1748 1
        urlutils_load_uri_file(url, sizeof(url), NULL, 0, argv[argp + 1]);
d1750 1
a1750 1
        windows_create_browser(url, NULL, NULL, NULL, Windows_CreateBrowser_Normal);
d1752 2
a1753 1
        argp += 2, done_one = 1;
a1754 1
    }
d1756 1
a1756 1
    /* Handle -url (URL strings) */
d1758 1
a1758 3
    if (argc >= argp + 1)
    {
      if (!strcmp(argv[argp],"-url") || !strcmp(argv[argp],"-u"))
d1760 5
a1764 3
        #ifdef TRACE
          if (tl & (1u<<5)) Printf("main: Handling -url CLI argument\n");
        #endif
d1766 1
a1766 1
        windows_create_browser(argv[argp+1], NULL, NULL, NULL, Windows_CreateBrowser_Normal);
d1768 2
a1769 1
        argp += 2, done_one = 1;
d1772 2
a1773 1
  }
d1893 1
a1893 25
  #ifndef REMOTE_HOTLIST

    /* Save the hotlist, if required */

    #ifdef TRACE
      if (tl & (1u<<5)) Printf("main: Calling hotlist_save\n");
    #endif

    if (choices.save_hotlist != Choices_SaveHotlist_Never) show_error_ret(hotlist_save(lookup_choice("HotlistSave:Browse:User.Hotlist",0,0)));

  #endif

  /* Save the global history, if required */

  #ifdef TRACE
    if (tl & (1u<<5)) Printf("main: Calling history_save\n");
  #endif

  if (choices.save_history != Choices_SaveHistory_Never) show_error_ret(history_save(lookup_choice("HistorySave:Browse:User.History",0,0)));

  /* Finally, save the image history, if required */

  #ifdef TRACE
    if (tl & (1u<<5)) Printf("main: Calling imghistory_save\n");
  #endif
d1895 1
a1895 1
  if (choices.save_image_history != Choices_SaveImageHistory_Never) show_error_ret(imghistory_save(lookup_choice("ImageHistorySave:Browse:User.Images",0,0)));
@


1.44
log
@*Don't* try to load FilterManager 0.18 in !Run[D] files. Requires
WindowManager 3.98. Sets URI handler environment variables for
http, ftp and gopher.

Fixed 'doesn't reformat for unsized images' bug - only happens when the
deferred reformatter is enabled, hadn't remembered to check this in my
debug build where this is turned off. Oops.

Caret position in forms could get left behind despite attempts to rectify
this in v1.31 - now fixed (and faster, fortunately).

Hourglass + percentage displayed for History and Image History when
loading - it can take a while for very big histories, though in
practice you only see the visit history loading (has to do a lot
more work, and is thus quite a bit slower than the image history).

POST forms worked when targetted to frames, but were broken when
not targetted! (Forms data inherited from one browser to the same
browser; ended up freeing the flex block...). Fixed.

Now support 303 response code (redirect to GET). Treated as 301, i.e.
not support if STRICT_PARSER is defined, otherwise drops through to
the 302 handling code.

Pointer shouldn't get stuck in odd shapes when going to a new page now;
it gets reset to a standard shape every time the null handler that
checks the position is called, though (whether or not the handler thinks
the pointer is over a different token, if that token is NULL, it sets
the standard shape). A possible work around would be for a browser to
remember the pointer shape too; that's for the future, though.

Early stage table formatting functions could blow themselves apart if
tables_count_table decided there were no rows, columns or both. A
net table size of zero cells is now dealt with; slow, partial table
fetches in multiple windows with image loading turned on will now
*hopefully* be stable, where v1.31 would have bombed out repeatedly.

A nested frameset within one document will now inherit the border
width (frame spacing) and border colour of its parent. This is done
by copying the maxlen and indent fields of the parent token over
the child, and note it's done in the browser (fetch_preprocess_token),
not HTMLLib.

Border colour on a FRAMESET now used, with the first colour on any
FRAME within it overriding, as in NN 4 and MSIE 4.

<LI> bullets really do stick to the text next to them now (I'd done
that in an experimental piece of code and forgotten to merge it back
before the last check-in).

Browse$HotlistURL/URIFile and Browse$HomeURL/URIFile now work from
_TaskName in the Messages file, and are thus of the generic form
<App>$HotlistURL etc. - Docs.Notes and Docs.User updated appropriately.

Event 0x11d00 through to 0x11d7f will make the browser look up Controls
file entries 'JumpTo00' through to 'JumpTo7f' and read a URL from them.
This will be fetched in the ancestor window of the source of the event,
or a new window if such an ancestor can't be found [for Daytona demo].

NB: Nasty frames-related crash at http://www.teledanmark.dk/menu/start.htm
is *not* fixed in this source. NOBR is not supported.
@
text
@d990 3
a992 2
  if (!strcmp(lookup_control("BrickWall:no",    0, 0), "yes")) controls.brick_wall = 1;
  if (!strcmp(lookup_control("StopWebProxy:no", 0, 0), "yes")) controls.stop_proxy = 1;
@


1.43
log
@Check for WindowManager 3.97 and ensure Unicode$Path is set in all
!Run[D] files, don't set the Alias$@@PrintType_FF4 variable, and updated
Customer build ROM obey file variants. Various other changes to
the Run files for new module versions, updated paths to support
new positions of choices, hotlist and histories (see later), etc.

!Sprites[22] files hold small !app icons for some variants, and
an ic_browse sprite. Some variants now have a Sprites and Sprites22
file instead of just Sprites, with the former containing various
mode 12 or 15 specific sprites.

Text files dragged to the URL writable are treated as ANT URL files. This
relies on URLBarWrit (Toolbars.h) being a unique ID, which it should be,
but beware of the Hotlist and Choices numberspaces...

INPUT TYPE=BUTTON supported. Form items without a FORM tag are now shown
(as MSIE 4, but not NN 4).

'*', '-', '@@', '_' and '.' are not escaped when submitting forms now. The
Web interface to the IMDb now works.

INPUT TYPE=HIDDEN items will not affect the line height anymore - so
http://www.hotmail.com/ now has correctly aligned writable icons, for
example. Similarly, TAG_FORM and TAG_FORM_END items could push up
line height and don't anymore.

HRs with a specified pixel width will now influence the size of a table
cell (they didn't before).

BRs now checked by tagno field when the browser needs to know something
was an actual BR tag rather than just a line break signal, and by the
style bit entry when only the indication of a line break is required.

Table widths of 0 or 0% are ignored.

Trace.c updated to report height and background fields in a table_stream.

fm_putsl() writes a terminator into the string; the Forms.c routines were
calling this for displaying INPUT TYPE=PASSWORD fields using the FE_PassCode
literal string (a line of stars). This write into a read only data area
would make the debugger fault the access. A local char array is now used
instead, to get round this (note the use of var[]=literal rather than
var[sizeof(literal)]; strcpy(var, literal) due to some weird compiler bug
that copies the wrong thing into 'var' under some (undefined...)
circumstances).

Text areas don't scroll back to the top line when clicked in anymore;
single line writables don't scroll back to the left either. When
reentering a text area from 'above', the caret appears at the top line
rather than 'somewhere further down'...

ARROWS_MOVE_OUT compile time option at the top of Forms.c defines whether
you must press Tab/Shift+Tab to move between writable fields in forms or
if up/down will drop out of them, though if keyboard control is on this
is enforced (or you get trapped inside the form!).

urlutils_filetype_from_url now uses MimeMap module.

If fetcher is told a page is text, it'll check for a filename extension and
may choose to use this instead (e.g. it may find it's HTML instead). This
is to try and get around duff servers... (e.g. http://www.batalarms.co.uk/).

Save dialogues shouldn't flicker when options that don't change the
filetype are selected (before, the draggable sprite was always reset for
each selection). Noticed the erroneous setting of a static variable in
SaveFile.c by a call to this by SaveObject.c, and so added a flag to
savefile_set_filetype to deal with this - would have been possible to get
the wrong filetype sent to applications or at best the wrong filetype
sprite in the dialogue without that.

The caret shouldn't jump out of a form back to the URL writable if the page
reformats now.

Table background colours now supported (as in the colour you see in the
border space if the cellspacing is large enough; this is as in MSIE, not
as in Navigator). Drawfile output routines updated accordingly.

Corrected erroneous use of wimpt_dx() / wimpt_dy() in a couple of places
in Images.c, which meant that (say) 1x1 images didn't work correctly in
medium resolution display modes.

Now have support for save as text (component ID and event 0x12) and save
as Draw (component ID and event 0x13) buttons. Dubious conditions for
greying and ungreying the print, save source and view source buttons and
menu options sorted out as part of implementing the same for the two new
buttons; added greying out of their associated menu items in passing.

Turned kerning on in draw file objects (does mean a rather heinous
increase in file size, but this is the only way to ensure the draw file
matches the visible page).

Comments before functions in SaveDraw.c are now complete and up to date.

Image and visit histories now generate a crude hash number to speed up
searching for items. It does give a speed increase, though it's a
disappointingly small one.

Issue of left/right margins and cellpaddings sorted out. Now have
redraw_left/right_margin for finding out the basic gap you must leave.
redraw_left/right_gap then gives any extra indentation for LI, BLOCKQUOTE
or whatever. The last two can be subtracted from the display width to
get an available page width for any section of text. Note that
redraw_left_gap replaces redraw_margin. The redraw_start_x function
uses the above to work out where a line's left hand edge should be,
taking account of left/right/centre alignment. HRs have been fixed now
(they were quite broken in v1.30, I think) based on this new model and
the behaviour of MSIE/NN 4.

Fixed width of cells with no contents - cell padding values wouldn't
have worked properly as the reformatter returns 0 rather than the left
hand margin size if given no stream.

Removed FM_Absolute flags for Font_Paint (spotted by DBrown) - sets bit
2, which is reserved...?

IMG width and height in % terms now works correctly; a % of available
width (after margins and indents) or height on the main page or for
a table cell, if the image lies in one. Because of the chicken-and-egg
problem with the latter, the cell must specify a width and/or height
for things to work properly. If this is not done, you'll usually end
up with a 1:1 scaled image (as in Navigator 4, rather than ending up
with no image or even no cell (!), as in MSIE 4).

HEIGHT attribute on a TABLE tag is supported, but only in a crude
fashion; the extra height (if there is any) is distributed over the
rows in a linear fashion. This is probably all you have to do in
practice, but I haven't checked. To maintain a notion of min/max
height as well as width would of course require a great deal more
work...

If using client pull to reload a page with a fragment ('...#name')
specified, then the reload wouldn't work on the same page; it'd just
jump to the fragment position. This won't happen if b->reloading is
set now (so works in conjunction with client pull on the same page
forcing a non-cached fetch). Similarly, if POSTing to such a URL,
a fetch will proceed (both these fixes done originally for
http://jupiter.beseen.com/chat/rooms/g/1678/).

browser_inherit split to browser_inherit and browser_inherit_post_data;
the code for the latter didn't clear any post_data in the child before
copying from the parent either, and could cause flex errors (now fixed).

Res file for Ursula ('Desktop' Browse) build tweaked - bits in the
font choices dialogue renamed, and button bar rearranged to hold the
new Save As Draw button. Other builds have had Save As Draw and
Save As Text buttons added, or not, depending upon availability of
suitable sprites, required UI simplicity, etc.

Now have:

  Browse$ChoicesFile
  Browse$ControlsFile
  Browse$ChoicesSave
  Browse$ControlsSave

(the last two are new) for loading and saving of the Choices or Controls
files. If unset, <App$Dir>.Choices or <App$Dir>.Controls will be set.
E.g., you could set Browse$ChoicesFile to be:

  <App$Dir>.Choices,Choices:WWW.(app).Choices

for loading and

  <Choices$Write>.WWW.(app).Choices

for saving. (The browser never saves Controls at the moment, so the
relevant variable above isn't effectively implemented, but could be
in future). Similarly, to support asymetric loading/saving of the Hotlist,
there are HotlistSave, HistorySave and ImageHistorySave entries in Choices
to complement HotlistPath, HistoryPath and ImageHistoryPath (which are used
for loading). save_save_choices will create directories as needed to obtain
the given path (and has also been fixed in various areas that hadn't been
tested out until now; e.g. zero termination of the AppName$ChoicesFile
variable expansion...). !Run[D] files updated appropriately.

Table widthing code rewritten. Slower, but a lot better on the whole.
Still has some problems - still needs a final 'make sure nothing is
below minimum width' scan, which it should be possible to do without.
No time to fix this at present!

The reformatter will now 'glue together' an LI token followed by any
non-LI token; so a bullet point followed by an item should not be able to
have a line break inserted after the bullet because of very tight width
constraints (it could before - yuk...).

'about:' brings up a page about the browser and any Plug-Ins, as with
Navigator (for example).

URI files support titles, as per spec. version 8. Saving a current
location to the Hotlist will thus give a sensible title now (unless
you're in a frame, so there's no title to get...). Of course, v1.00
files without a title still work.

Note that NOBR is *not* supported in this build and this combined with
the new table widther may cause problems on some sites (e.g. Microsoft's
home page!).
@
text
@d419 5
@


1.42
log
@Changed image and page history max ages to be saved in seconds instead of hours.
@
text
@d270 6
d404 1
a404 1
  show_error(event_register_toolbox_handler(-1, EButtonBarSaveSource,    handle_save_src,       NULL));
d406 2
d1091 2
a1092 1
      char leafname[1024];
d1326 48
d1466 1
a1466 1
  signal(SIGOSERROR, catch_errors); /* OS error */
d1468 3
a1470 3
  signal(SIGSEGV,    catch_errors); /* Segment violation */
  signal(SIGSTAK,    catch_errors); /* Stack overflow */
  signal(SIGFPE,     catch_errors); /* FPE error */
d1673 1
a1673 1
        urlutils_load_uri_file(url, sizeof(url), argv[argp + 1]);
d1713 3
a1715 1
    char         * tok = NULL;
a1716 2
    unsigned int * regdump;
    unsigned int * os_regdump;
d1779 1
a1779 1
    signal(SIGOSERROR, catch_errors); /* OS error */
d1781 3
a1783 3
    signal(SIGSEGV,    catch_errors); /* Segment violation */
    signal(SIGSTAK,    catch_errors); /* Stack overflow */
    signal(SIGFPE,     catch_errors); /* FPE error */
d1824 1
a1824 1
    if (choices.save_hotlist != Choices_SaveHotlist_Never) show_error_ret(hotlist_save(lookup_choice("HotlistPath:Browse:User.Hotlist",0,0)));
d1834 1
a1834 1
  if (choices.save_history != Choices_SaveHistory_Never) show_error_ret(history_save(lookup_choice("HistoryPath:Browse:User.History",0,0)));
d1842 1
a1842 1
  if (choices.save_image_history != Choices_SaveImageHistory_Never) show_error_ret(imghistory_save(lookup_choice("ImageHistoryPath:Browse:User.Images",0,0)));
@


1.41
log
@Fixed some glitches in the modified status bar code (e.g. status inference
wasn't working properly).

Shift+Toggle size always opened to not obscure the icon bar. If CMOS is
set to always show the icon bar, then Shift+Toggle size is meant to
reverse sense and open to absolute full size. It now does this.

!Run[D] files now require URL 0.22, HTTP 0.64, FTP 0.22, Gopher 0.08
and File 0.32.

Minor overhaul of 'Docs.Notes' (with 'Docs.User' similarly updated) to
include a few new bits and pieces.

Timeout values of 0 now mean 'forever'. Plug-in status messages now have
their own timeout setting. New Messages token 'Actv' for extra info when
a status message times out and the status line drops to 'Viewing' or
'Ready' when there is still a Busy state registered by the Plug-in.

Small Fetch windows don't become visible briefly for Plug-in fetches
when the fetch is complete (for SeeFetches:no, where these windows
should be hidden all the time).

WebServe may be controlled through the Browse front-end via.
Wimp_MAppControl reason code 4 (Wimp_MAppControl_Configure). Note the
renaming internally of 'WebServ' or 'WebServe' has been changed to
'Proxy' (with lower case equivalents where relevant); proxy name
and starting details come from the Messages file 'ProxyName' and
'ProxyComm' tokens. More in 'Docs.Notes'.

Res files updated for image history and PRE/TT font aspect ratio
choices. 'Don't expire' labels changed to 'Expire' (oops, didn't
notice the change in the development Browse's Res file when I
updated all of the others until now...).

When printing, Wimp_PlotIcon appears to ignore R4 and R5, plots
'somewhere' on the page, and tries to get the sprite from the global
pool. This latter part normally causes an error to be raised; though
on my machine I just get a corrupted error message. The Desktop font
gets lost at this point too. All have yet to be fixed; as an
interim work around, Wimp_PlotIcon objects are never drawn at all
if the global 'printing' flag is set.
@
text
@d814 4
a817 4
  choices.max_size         = atoi(lookup_choice("MaxSize:16",         0, 0));
  choices.image_max_size   = atoi(lookup_choice("ImageMaxSize:0",     0, 0));
  choices.expiry_age       = atoi(lookup_choice("ExpiryAge:168",      0, 0));
  choices.image_expiry_age = atoi(lookup_choice("ImageExpiryAge:336", 0, 0));
a820 2
  choices.expiry_age       *= 3600; /* (Convert hours to seconds) */
  choices.image_expiry_age *= 3600;
d823 1
a823 1
  if (choices.expiry_age < 3600 && choices.expiry_age) choices.expiry_age = 3600;
@


1.40
log
@Implemented Message_PlugIn_ReshapeRequest, Message_PlugIn_Status and
Message_PlugIn_Busy. Plug-in code more robust when given invalid
browser instance handles by the plug-in.

Line spacing is now calculated on the basis of the normal style base serif
font, with all other fonts being forced into that line height. This does
mean that an unusually tall (say) sans serif font may get clipped. It
appears to be the only way to get around wildly different baseline
depths returned from the font metrics - you can't work out line spacing
based on each different font style; the line spacing will vary.

Table heighting (as opposed to widthing...) improved considerably; rowspan
can no longer cause very tall cells in odd places. Having trouble getting
rid of the single pixel breaks between vertically adjacent cells, though
I've not tried too hard. Widthing, though, seems fairly badly broken at
present... :-/

Set/clear of page_is_text flag made more robust (it looked as though there
was the potential for this to get stuck in a set state, though I've never
see the front-end behave in a manner which indicates this is the case).
The reformatter will now decrease leading if this flag is set (plain text
pages look daft with a line spacing that is OK for 'rich' text pages).
No reformatting is done if the page width changes by dragging on the
resize icon, though toggle size / full screen will still reformat even
if the contents are only text (browser needs to sort out various width
flags at this point).

Cut down on excessive redrawing when reformatting due to a change in
window dimensions is not done. If display_width hasn't changed, then no
redraw is needed. If this causes redraw problems, then whatever is
changing display_width needs investigating. It shouldn't be kludged
(basically) by forcing a redraw instead of a reformat.

TT/PRE/etc. text can now have a non-100% aspect ratio. 80-90% looks
best (ArcWeb, for example, uses 86%). New option 'TTAspect' in
the Choices files.

Debug builds link to a non-debug Unicode library now; stops stderr
being dumped to the bottom left of the screen if you've not redirected
it in the Run file.

RISC OS 3.1 seems to need more initial WimpSlot than later OS versions.
The 64 deep nested table set gives a 'No stack for trap handler' error
(which it really means in this case!) without 800K, even though 3.71
is happy with just 640K. So, the !Run file checks if Boot$OSVersion
is exactly 300, 310 or 311, and sets the WimpSlot accordingly.

!Run[D] files now require latest fetcher module versions (URL 0.21,
File 0.31, HTTP 0.58).
@
text
@d272 1
d278 2
a279 2
  show_error(event_register_toolbox_handler(-1, EDocumentToBeShown, menus_show_main,     NULL));
  show_error(event_register_toolbox_handler(-1, EDocumentHidden,    menus_hide_main,     NULL));
d283 4
d885 2
a886 1
  if (!strcmp(lookup_choice("UseProxy:no", 0, 0), "yes")) choices.use_proxy = 1;
d979 2
a980 2
  if (!strcmp(lookup_control("BrickWall:no",   0, 0), "yes")) controls.brick_wall    = 1;
  if (!strcmp(lookup_control("StopWebServ:no", 0, 0), "yes")) controls.stop_webserve = 1;
d1535 30
@


1.39
log
@Modified to use external Unicode resource directory and UnicodeLib.
@
text
@d330 9
a338 6
  show_error(event_register_message_handler(Message_PlugIn_Open,      handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_Opening,   handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_Close,     handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_Closed,    handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_URLAccess, handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_StreamNew, handle_messages, NULL));
d704 5
@


1.38
log
@Image history - sizes of images are remembered for future reference (if
the sizes aren't specified in the HTML, they can be looked for in the
image history instead to minimise reformatting requirements). Choices
file options ImageHistoryPath, ImageExpiryAge, ImageMaxSize and
SaveImageHistory added to support this (all have a direct analogy to
the global History items of the same name after removing 'Image').

Text area items are now the correct height for the number of rows
specified in the HTML, don't scroll a line too early, and have the
caret placed at the start of the text when moved into from above
or at the end when moved into from below (rather than always at
the end, which was behaviour inherited from single line writables,
where this is desirable). The top of the text area is aligned to
the top of any line of text on the same line, with the text area
dropping below the text, rather than the bottom of the area matching
the text baseline and extending upwards.

Filename extensions for download files are only stripped if an
attempt to convert to a RISC OS filetype through the Mime Mapper module
does not return an error or Data (0xffd) filetype. '.cgi' is a special
case which is always stripped.

Altered heading styles - all are bold, none are italic, H3 is as big
as H2 was, H2 is a little larger, and others scale down to H6 being
the size as normal text (but, as I say, bold).

Sorted out tables and forms. We can just look for tagno=TAG_FORM, and
get rid of the wobbly form_flag; also discarded the redundant
reprocess_table flag in fetch_preprocess_token. Two separate forms
in consecutive table cells (for example) which used to fail - they
were submitted as one single form - will now work correctly.

Fixed nasty bug in FontManage.c where font size 7 would intermittently
fail. The stupid font sizes that it could ask the Font Manager for may
be responsible for the occasional Font Manager crashes that have been
noticed. Array for font sizes was declared as [Limits_FontSizes], but
indices 1 to Limits_FontSizes are actually used - so needed a '+ 1'
in the declaration... :-/

Replaced the case insensitive string comparison functions in Utils.c
with more efficient versions by S.Brodie.

MAXLENGTH specifier in INPUT tags is now supported. If unspecified or
specifically zero, the browser overrides and allows any length.
@
text
@a626 20
/* encoding_leaf_to_path()                       */
/*                                               */
/* Called by the encoder in HTMLLib. Print a     */
/* full encoding file pathname into path given   */
/* the leafname.                                 */
/*                                               */
/* Parameters: Pointer to output buffer for full */
/*             pathname;                         */
/*                                               */
/*             Pointer to leaf name.             */
/*                                               */
/* Assumes:    Output buffer big enough :)       */
/*************************************************/

void encoding_leaf_to_path(char *path, const char *leaf)
{
  sprintf(path, "%s.Encodings.%s", task_dir, leaf);
}

/*************************************************/
@


1.37
log
@Following the last check-in - all build resources brought up to date.

Adjust-click on forwards/backwards buttons did not work in the intermediate
build, and now does.

Adjust-click on form submission buttons where the submit method is POST
will now work correctly, as the new view inherits the extradata block
of the old. Failure of this is signalled through
make_no_fetch_memory_error, code 16 (see updated Errors file in Docs).
Note the name change of extradata in this context; more details below.

The passing of forms POST data and extra headers for sending in an
HTTP request via. the URL module was all done through pointers into
flex blocks, and was therefore very unsafe. All relevant functions now
use pointers to pointers to the data.

To remove confusion on the umpteen uses of the word 'extradata', the field
in browser_data has been renamed to 'post_data'. The 'extradata' parameters
used within FetchPage.c were all disconnected from the extra header info /
form POST data stuff that extradata is usually associated with, and have
thus also been renamed, in this case to 'appnddata' (Append Data).

As well as X-NoProxy, the browser sends the 'proper' HTTP headers
Pragma:no-cache and Cache-Control:no-cache.

A redirection from a POST request was not handled correctly; despite
what HTTP specs say, you're supposed to use GET for the new URL. The
browser was, but when it chopped off the redundant header data in the
request didn't terminate it and left Content-Type in anyway...! Fixed.

Ctrl+Tab implemented - URL completion. Comes from the hotlist URLs,
hotlist titles, history hosts, paths, full URLs and lastly titles.
See code comments for more (history_find_match, hotlist_find_match).

TableSupport option added to Choices; it is read, can be set by the
front-end, but doesn't actually do anything else yet.

Reversed Choices' semantics on 'don't expire by...' for History. Added
'needs_redraw' flag to choices_get_contents so that, for example, if the
table border types change, browsers get redrawn.
@
text
@d67 1
d821 9
a829 2
  choices.max_size   = atoi(lookup_choice("MaxSize:16",    0, 0));
  choices.expiry_age = atoi(lookup_choice("ExpiryAge:168", 0, 0));
d831 1
a831 4
  choices.max_size   *= 1024; /* (Convert K to bytes)       */
  choices.expiry_age *= 3600; /* (Convert hours to seconds) */

  if (choices.max_size   < 2048 && choices.max_size)  choices.max_size    = 2048;
d840 4
d1529 1
a1529 1
    if (tl & (1u<<5)) Printf("main: Loading History\n");
d1534 8
d1732 3
a1734 3
    if (tl & (1u<<5))       Printf("\nmain: Calling exit()\n\n");
    if (tl & (1u<<13))      Printf("Near exit, malloccount: \0216%d\0217\n",malloccount);
    if (tl & (1u<<14))      Printf("Near exit, flexcount  : %d\n",flexcount);
d1742 1
a1742 1
      if (tl & (1u<<5))     Printf("main: Calling hotlist_save\n");
d1752 1
a1752 1
    if (tl & (1u<<5))     Printf("main: Calling history_save\n");
d1756 8
@


1.36
log
@This is an intermediate check-in to allow work on Choices for the new
table options and History choices as detailed below. Res files are not
up to date except where indicated and there are several known bugs that
will be fixed before the 'final' v1.27 is created. Any work on resources
should only be done for the testbed !Browse.

Client side image maps implemented. There is code to draw highlighted
borders in CSIM.c, but this is not wired in yet; other than that,
the implementation is functionally complete. As part of this, centralised
the fetching of a targetted URL taking into account user request of a
new view and full screen mode, in fetchpage_fetch_targetted. The forms
library now uses this too, so form buttons respond to both adjust-clicks
and TARGET attributes.

Fixed APPLET handling where '.class' isn't present in the CODE attribute.

Paragraphs squashed at the top of cells/pages - browser would insert white
space before.

Now append a ' ' to the end of History menu items to prevent the Wimp
thinking the end of entries represents a keyboard shortcut (e.g. 'Home').

Netscape's handling of 'meta http-equiv="refresh"' is to start counting
when the fetch has completed and everything else has died down. The browser
will now not start counting until the animation handler is deregistered
(so formatting is complete) to show similar behaviour (note that this
checks the main handler, not the 'idle but returning to first frame'
drift handler).

URLs from requests for fetches by Plug-Ins are now relativised.

Page width change tolerance prior to reformat upped from 16 to 32 OS
units. Hoping to provoke a loosely connected bug with this change!

TableOuter, TableInner and SeeFetches choices added to all Choices
files, with appropriate loading and saving code in Main.c and Save.c.
AuthorFTP and AuthorFSh messages added for FTP authentication, and
dialogue handling code (the component in FetchHTML.c) updated to
recognise an FTP fetch and alter the dialogue presentation
appropriately.

All Messages file version numbers taken up to 1.27 (20 Nov 1997).

Following a UseNet suggestion, Ctrl+Toggle Size will increase the window
size to fill the screen vertically only; horizontal size/positioning is
not changed.

Shift+Tab in the URL writable will cycle through alternative fetcher
protocols (from both the Controls file and checking the fetcher modules
are actually present).

Hotlist doesn't require '://' in URLs when loading HTML, just ':/' - so
'file:/' URLs now will be reloaded correctly.

History system rewritten completely. GHistSize and VHistSize options
removed, and replaced by MaxSize and ExpiryAge. Now have global history
menus with most recently visited items at the top, and local history
menus which reflect the path that forward/back buttons would take.
Browsers are robust to background expiry of the History though this is
not implemented - date expiry and size checks are carried out on
history_record only. This does mean that with two windows open one could
have the history expired underneath it whilst another fetched, though;
the code handles this and update toolbars (greying items) as necessary.
It is possible to have the history limits so tight that even one entry
will not fit and again the code copes with this, though values read
from Choices are limit checked to ensure rather more useful results!

Implemented 'Save' button in save dialogues. Remembers pathnames and just
replaces the leaf now (hard coded exceptions for <Wimp$Scrap>... and
<Wimp$ScrapDir>...) - it did before, but only if you'd typed the path
in. Not many people did, given that you couldn't press Return or click on
a Save button to use that path...

In a similar vein, files of type Data or DOS will be checked for a '/xxx'
type extension and the MimeMap module will be used to find a more meaningful
filetype. If this can be handled, the file is loaded. This only works for
files dragged to the browser - the behaviour with inline data in web pages
will depend on the File module, and similarly, if File doesn't spot what is
going on and claims that the object is data, the browser will just open a
save dialogue for it.

!RunD files taken up to 3072K WimpSlot.

Hotlist's saved HTML page title wasn't internationalised - is now. This
opened up a significant can of worms; on file write error, the file would
never be closed, and if a caller of the save or load functions passed
in a filename held in the global Messages lookup buffer then subsequent
lookups in the callees would corrupt that filename. All sorted out now.

Local (not very useful) or global (useful) histories can be saved as HTML,
which opens up the possibility of sending your history to the hotlist
by saving to it. Local and global histories can also be emptied, though
this is probably not a feature that current release Desktop browsers need.
Inheritance of local history and certain UI features is now done more or
less for all cases where one browser window spawns another, too.

Vertical alignment on images is rather less ropey than it was (e.g.
ALIGN=TOP stands half a chance of working) but is still far from perfect.
This was part of fixing a nasty little bug in Redraw.c's setting of
an image position via. image_set_token_image_position, which was making
(amongst possibly many other things) client side image maps fail.
Image update where images had large borders was affected by a similar
problem too (more cans with more worms...).

Fixed image background filler functions; two problems. When cross
referenced images were replaced by base images in a browser because the
original owner was closing down, the original owner browser would stay
registered with ImageLib. Fixed; secondly, when images were deleted from
the image array causing those above to be renumbered, images registered
with ImageLib did not have their numbers updated (this was the one that
lead to the visible drop out of background images with PNGs on the Acorn
Internet home page when there were two views of the page and the first
was closed). This is now also sorted out.
@
text
@d700 1
a700 1
  /* Table borders */
d702 11
a712 9
  if      (!strcmp(lookup_choice("TableOuter", 0, 0), "2d"))    choices.table_outer = Choices_TableOuter_Always2D;
  else if (!strcmp(lookup_choice("TableOuter", 0, 0), "3d"))    choices.table_outer = Choices_TableOuter_Always3D;
  else if (!strcmp(lookup_choice("TableOuter", 0, 0), "never")) choices.table_outer = Choices_TableOuter_Never;
  else                                                          choices.table_outer = Choices_TableOuter_Auto;

  if      (!strcmp(lookup_choice("TableInner", 0, 0), "2d"))    choices.table_inner = Choices_TableInner_Always2D;
  else if (!strcmp(lookup_choice("TableInner", 0, 0), "3d"))    choices.table_inner = Choices_TableInner_Always3D;
  else if (!strcmp(lookup_choice("TableInner", 0, 0), "never")) choices.table_inner = Choices_TableInner_Never;
  else                                                          choices.table_inner = Choices_TableInner_Auto;
d826 1
a826 1
  if (choices.max_size   < 512  && choices.max_size)   choices.max_size   = 512;
@


1.35
log
@Added system font option to choices.
Stopped UNIFONT forcing system font use and added calls to Font_WideFormat.
Made sure the system font option is read before fm_init is called!

User agent string now set if Netscape faking is disabled (format used is
"Acorn Browse/1.26 (RISC OS 3.71)".
@
text
@d279 1
a445 4
  /* Load the history */

  show_error(history_load(lookup_choice("HistoryPath:Browse:User.History",0,0)));

d700 12
d790 2
d816 4
a819 1
  /* Global and local histories */
d821 2
a822 2
  choices.g_hist_size = atoi(lookup_choice("GHistSize:8",  0, 0));
  choices.v_hist_size = atoi(lookup_choice("VHistSize:50", 0, 0));
d824 2
a825 2
  if (choices.g_hist_size < 1) choices.g_hist_size = 1;
  if (choices.v_hist_size < 4) choices.v_hist_size = 4;
d1515 8
d1557 1
a1557 1
        windows_create_browser(url, NULL, NULL, NULL, 0);
d1577 1
a1577 1
        windows_create_browser(url, NULL, NULL, NULL, 0);
d1593 1
a1593 1
        windows_create_browser(argv[argp+1], NULL, NULL, NULL, 0);
d1736 1
a1736 1
  if (choices.save_history != Choices_SaveHistory_Never) history_save(lookup_choice("HistoryPath:Browse:User.History",0,0));
@


1.34
log
@Removed 'The Onion' link from some Hotlist files. Time showed that the
site wasn't entirely Family Friendly (TM)... Removed Shift Control (it's
gone offline now), and corrected the Telegraph URL from ...the-telegraph...
to just ...telegraph...

StrongHelp manual generator now tries to work out the number of lines in
the table on the root page more intelligently.

Plug-in support extended to handle Shockwave. Quite a lot of underlying
work for this, including a pseudo cache system for temporary files.

Bug in redraw routines: they plotted background images within table
cells, when nothing should have been drawn. Oops. When background images
in cells are properly supported, this can get sorted out.

Tweaked vertical plot position of HRs (up to 4 OS units too high before due
to rounding).

Various Res file bits and pieces, Ursula build taken up to v1.26 beta
for release on the Browser site. *Note* not all resources are up to date!
This will be done after AW97.
@
text
@d710 3
a748 14

  #ifdef UNIFONT

    /* Force system font if we're using UTF-8 */

    choices.system_font = 1;

  #else

    if (!strcmp(lookup_choice("SystemFont:no", 0, 0),"yes")) choices.system_font = 1;

  #endif

  if (choices.system_font) choices.font_size = FM_Standard_Size;
@


1.33
log
@Support for RISC OS 3.1 alpha blending added.
@
text
@d333 1
d410 1
@


1.32
log
@Various fixes in the code required for Shockwave support (many invalid
assumptions about the OBJECT tag structure). Not finished yet though.

Played around with signal handling 'n' all that to try and get sensible
errors reported for aborts etc. using code by KBracey. Need a ROM patch
for _swix on RISC OS 3.7 upwards (or a local fixed copy of _swix),
otherwise should sort out most of the problems seen (mostly 'no stack
for trap handler' errors and a distinct lack of a register dump).

Plug-In view on redraw / ASAP choices now work as they should (ASAP
was previously broken).

Version numbers in Messages incremented to 1.25 (23 Oct 1997).

For Plug-In support, created new source file RMA.c/h to handle RMA
claims and releases, in an attempt to ensure leakage never happens.
As such, this source is *slightly* more advanced than that in the 1.25
AW '97 build, though functionally identical. Well, that is, at least
you can confirm zero RMA leakage with '-debug LMem' in TRACE builds now!

Intend to do a consistency check on comment syntax in all sources
shortly - I need to rebuild my StrongHelp manuals; can't keep track
of all of these new functions...
@
text
@d647 19
@


1.31
log
@fetch_get_raw_data will notice if up->fetching is zero and return a
'finished' status rather than trying to continue reading data for the
fetch. Fetches should never fall through that far but at least it
will cope if they do.

3D table borders are now supported. 2D borders are used if the
inter-cell spacing is too small to fit the borders in (display resolution
dependent) - the external table border is 2D if the internal borders are,
else 3D. For cellspacing of 0, internal table borders must plot over the
outer edge of pixels inside the cell; for all greater spacings, the
borders take up all or part of the gap between them. The external border
will always fit around the outside of the cells, including the
cellspacing value in the gap between the outer cells and the border.

Anti-alias colour for placeholder ALT text was incorrect. Fixed.

I'd changed 'point' to 'points' in some of the Font Choices dialogues;
now changed back to 'point'.

The routine to find out how large an otherwise unsized object or image
placeholder based on its ALT text has been centralised in Reformat.c,
so that the image and object routines can both access it without
code duplication (this means non-image objects will now have the correct
size if they contain ALT text, rather than assuming a standard default
size as before). ALT text in images that were also objects was never
plotted either, though the placeholder size would have been correct.
This has been fixed.
@
text
@d71 1
d111 1
a112 1
static void              termination         (void);
d541 1
a541 7
  e = _swix(OS_Module,
            _IN(0) | _IN(3) | _OUT(2),

            6,
            sizeof(MessagesFD) + strlen(path) + 1,

            &control);
d586 1
a586 5
  if (control) _swix(OS_Module,
                     _IN(0) | _IN(2),

                     7,
                     control);
d623 1
a623 5
  _swix(OS_Module,
        _IN(0) | _IN(2),

        7,
        control);
a1295 29
/* catch_errors()                                */
/*                                               */
/* Catch OS errors and report them with the      */
/* opportunity to continue or quit (done inside  */
/* main itself).                                 */
/*                                               */
/* Parameters: The signal number (ignored).      */
/*************************************************/

#pragma no_check_stack

static void catch_errors(int signum)
{
  /* Store the error locally */

  erb = *_kernel_last_oserror();

  /* Go back to main to report the error */

  longjmp(env, Main_FromCatchErrors);

  /* Just in case... */

  exit(EXIT_FAILURE);
}

#pragma check_stack

/*************************************************/
d1329 1
d1361 1
a1361 40
  #ifndef TRACE

    /* Prevent postmortems; instead, report errors in a standard window. */
    /* If backtraces are needed, use the debugger...                     */
    /*                                                                   */
    /* If compiling a version for the debugger, ensure TRACE is defined  */
    /* or the code is commented out. The code below can mess up the      */
    /* debugger as default handlers are not beng used, and trying to     */
    /* install them tramples on the debugger's environment setup.        */

    {
      int loop, ret1, ret2, ret3;

      /* Loop over the undefined instruction, prefetch abort, data abort */
      /* and address exception handlers, resetting them to the RISC OS   */
      /* defaults. The RISC OS default handlers raise a standard RISC OS */
      /* error, having filled in the *ShowRegs register dump. (See PRM   */
      /* volume 1 page 315 onwards).                                     */

      for (loop = 1; loop <= 4; loop ++)
      {
        _swix(OS_ReadDefaultHandler,
              _IN(0) | _OUTR(1,3),

              loop,
              &ret1,
              &ret2,
              &ret3);

        _swix(OS_ChangeEnvironment,
              _INR(0,3),

              loop,
              ret1,
              ret2,
              ret3);
      }
    }

  #else
d1583 5
d1590 54
d1709 35
@


1.30
log
@Weird - the line registering the ENavigateToBeShown event disappeared from
Main.c, so the last log was incorrect; Navigate menu items wouldn't have
been greyed out. Probably a(nother?) CVS update screw up on my part; now
fixed. This sort of thing is happening far too often...

Font manager would crash in system font or if a font face was not found
in the previous release - that hacky business of returning weird font
handles when system font is to be used instead ensured a rather less than
valid array reference on behalf of fm_claim_basic_typefaces.

Added in a few more calls to the 'check the button bar' routines, to
ensure that things like Stop are greyed/ungreyed when needed.

Cellpadding code could lead to rmarg overlapping lmarg, or the sum
being greater than dwidth, or something like that (!) in the reformatter.
Anyway the results were unpleasant; this has been sorted out by range
checking right and left margins w.r.t. display width in the relevant
section of the code.

People who specify 'td width = 2000' in tables expecting to get something
sensible now do, though I was half inclined to leave it alone... I can
only assume that they don't know about % specification or it didn't
work in their browser at authorship time, and the huge width served as
an attempt to get the table to fill the available window width. Anyway,
the table reformatter spots when the maximum width a cell requires is
less than half of what it asks for, and ignores the width specifier if
this is the case.
@
text
@d1312 2
a1313 1
/* opportunity to continue or quit.              */
d1318 2
d1322 3
a1324 1
  _kernel_oserror * e = _kernel_last_oserror();
d1326 1
a1326 1
  if (e) erb = *e;
d1328 1
a1328 1
  print_abort_print();
d1330 1
a1330 1
  if (e) show_error_cont(&erb);
d1335 2
d1459 3
d1654 24
a1677 1
  setjmp(env);
@


1.29
log
@Implemented proxy choices.
@
text
@d270 8
a277 7
  show_error(event_register_toolbox_handler(-1, EUtilsToBeShown,    menus_show_utils,   NULL));
  show_error(event_register_toolbox_handler(-1, EExportToBeShown,   menus_show_export,  NULL));
  show_error(event_register_toolbox_handler(-1, EChoicesToBeShown,  menus_show_choices, NULL));
  show_error(event_register_toolbox_handler(-1, EFileToBeShown,     menus_show_file,    NULL));
  show_error(event_register_toolbox_handler(-1, EDocumentToBeShown, menus_show_main,    NULL));
  show_error(event_register_toolbox_handler(-1, EDocumentHidden,    menus_hide_main,    NULL));
  show_error(event_register_toolbox_handler(-1, EEncodingToBeShown, encoding_show_menu, NULL));
@


1.28
log
@Fixed bug with font size clipping in main.c.
Implemented font size choices.
@
text
@d870 12
@


1.27
log
@Now handles PARAM tags. Sorted out Plug-In bug that was related to Java
setting a 0 by 0 graphics window before calling Wimp_Poll (fixed in Java).
Implemented queue for Plug-Ins so multiple broadcasts aren't sent for
several Objects in one data chunk.

Added Docs directory with some documentation in it. More things to keep
checking for stylistic consistency, horray ;-)

Corrected !Run[D] for Ursula build to need AcornURI but not TaskModule
(URI handler needed for !Mail to pick up mailto: links).

Added display_height field to browser_data, analogous to display_width,
to cope with % sized objects by width and height (see how HRs are
handled in Redraw.c for an example of how it was always fairly easy
with width, but not height until this addition). Though you do have
to reload to get a new size; reformat isn't enough. Must see to this
some time...

Fixed bug where basic typefaces were claimed *before* the Choices file
had been read. For unusual Choices settings, this could create some
'interesting' problems now and again. This was part of narrower scope
work in the Choices code to allow font changing without leaking font
handles (now done; fm_shutdown only ditches fonts, it keeps internal
structures - must then call  fm_lose_fonts for all browsers to get the
bitfields up to date, then rewrite the typeface definitions and reclaim
basic fonts). Noticed that fm_claim_basic_typefaces would claim multiple
instances of the same font if there were several cases of the same font
mapped to different typeface styles - fixed.

Implemented PlugInControl settings, but not SupportObject (fully).
@
text
@d698 2
a699 2
  if (choices.font_size < 6  * 16) choices.font_size = 6;
  if (choices.font_size > 24 * 16) choices.font_size = 24;
@


1.26
log
@More reformatter code bugs fixed; this one regarding width of items. Any
kerned string was overestimated (causing redraw bugs and caret position
problems in forms, apart from other minor bits elsewhere) and the default
size of a writable icon wasn't especially clever.

Crude Plug-In support; just about manages Java, but can't fetch on
behalf of Plug-In (for example). Had to change the default file access
URL construction to be 'file:/' instead of 'file://', or local file
fetches that reference Java applets won't work. This is in its very
early stages, and is being checked in mostly so that various Choices
issues can be worked on.
@
text
@d326 5
a330 4
  show_error(event_register_message_handler(Message_PlugIn_Open,    handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_Opening, handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_Close,   handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_Closed,  handle_messages, NULL));
d334 1
a706 2
  fm_claim_basic_typefaces(choices.font_size);

d730 5
a734 1
  choices.encoding  = atoi(lookup_choice("Encoding:4",  0, 0));
d736 1
a736 1
  /* Force system font if we're using UTF-8 */
d740 2
d1350 1
@


1.25
log
@!Run[D] files updated for new fetchers and GopherFetcher; protocols list
in Controls updated for Gopher. Debug builds now require 2760K rather than
2560K. Font$... variables set if not already, in anticipation of font
Choices work.

Additional bits in Choices section of Res file tidied and some name
changes (e.g. Netscape -> Navigator(TM)). Frames support option added
to Choices.

Grouped 'support_frames' under the Fetch Controls section and added
support_object in Global.h; appropriate entries placed in the Choices
files, and are read at startup. At present, though, only the frames
support flag is implemented.

For some reason, Menu was the button to use on history popups if you
wanted to show URLs instead of descriptions (or vice versa, depending
on Choices settings). Now, Select and Menu will show the Choices
defined setting, and Adjust will show the opposite.

History menus are built backwards, so local histories have the most
recently visited pages at the top. Global history has still no real
order to it, but this may be arranged later.

Customer name changed to Customer by request.

Customer browser now gets its own resources (SYSTEM=Customer), but
otherwise is unchanged, with the Ursula build now giving the
'spinning acorn' with a Bookworm-style toolbar. This is used for the
Desktop !Browse build.

!Sprites[22] files updated to include GIF, JPEG and PNG sprites;
!Run[D] files and !Boot files set appropriate File$Type_xxx variables.
Sprites in all sprites files have been checked for unnecessary palettes,
which have been removed where present.
@
text
@d69 1
d324 7
d773 4
d1518 2
@


1.24
log
@Big steps forward in vertical white space handling as a result of
improvements in HTMLLib in this area ( -> all versions now 1.22 beta-2).
As a result, the 'last_space' field in browser_data struct has been
removed. Note that this relies quite heavily on setting of the PCDATA
bit in the 'style' field of an HStream and the automatic collapsing
of (for example) multiple P tags inside HTMLLib.

Trace.c improved to recognise various bits in the 'style' field of an
HStream structure.

Phoenix defaults altered to a more 'standard' set of choices; Trinity
as the serif font, with a slightly larger default font size. This is
because there's a good chance it might get released to a wider audience
than Acorn internal (though the animation and icon bar sprites will
have to change before then...).

MiscDefs updated for new SWI numbers in HTTP module; !Run[D] files thus
updated to require HTTP 0.42 or later. At this point, all earlier
modules are not backwards compatible in terms of direct calls to the
HTTP module, though this only affects cookies_process_cookie at present.
At the same time, checks for System$Path, InetDBase$Path, and setting
of Inet$MimeMappings if not already defined have been added to the Run
files along with RMEnsures of Resolver and MimeMap.

Object and PlugIn c/h pairs created to handle OBJECT, EMBED and APPLET,
and the RISC OS Plug-In interface respectively. Not part of the build
process yet. Addition of 'odata' field in browser_data struct and
definition of chunk CK_OBJB for memory_set_chunk_size() are in support
of this.
@
text
@d761 3
a763 1
  if (!strcmp(lookup_choice("ClientPull:yes", 0, 0), "yes")) choices.client_pull = 1;
@


1.23
log
@Changed some error handling in Choices, a little bit of reformatting,
removed unnecessary tempstring in Main, and played about with the
choices Res file objects.
@
text
@d105 4
d959 28
a1030 1
  #endif
d1032 10
a1041 2
  /* Install any general handlers that might be needed as a */
  /* result of the choices just loaded.                     */
d1043 1
a1043 1
  show_error(event_register_wimp_handler(-1, Wimp_ELoseCaret, handle_lose_caret, NULL));
d1045 223
a1267 3
  if (controls.claim_help)
  {
    /* Interactive help support for showing help in the status bar */
d1269 2
a1270 2
    register_null_claimant(Wimp_ENull, protocols_ih_send_help_request, NULL);
    show_error(event_register_message_handler(Wimp_MHelpReply, handle_messages, NULL));
d1272 2
a1273 1
}
d1633 3
a1635 3
    if (tl & (1u<<5))   Printf("\nmain: Calling exit()\n\n");
    if (tl & (1u<<13))  Printf("Near exit, malloccount: \0216%d\0217\n",malloccount);
    if (tl & (1u<<14))  Printf("Near exit, flexcount  : %d\n",flexcount);
d1643 1
a1643 1
      if (tl & (1u<<5)) Printf("main: Calling hotlist_save\n");
d1653 1
a1653 1
    if (tl & (1u<<5)) Printf("main: Calling history_save\n");
@


1.22
log
@Implemented dialogue based choices.
@
text
@d248 1
a248 1
  show_error(event_register_toolbox_handler(-1, ECDHidden, choices_hidden, NULL));
d424 1
a424 1

a653 1
  char * tempstring;
d658 4
a661 3
  tempstring = lookup_choice("HomePage:http://www.acorn.com/acorn/", 0, 0);

  choices.home_page = malloc(strlen(tempstring)+1);
d664 1
a664 1
    strcpy(choices.home_page, tempstring);
@


1.21
log
@Added support for HTMLLib HttpEndParse call.

Text items with no VALUE specified in the HTML were not cleared on
hitting a Reset button as the text field of the token is NULL; fixed.
SELECT lists with no default selection item were not being changed
on hitting a Reset button; fixed. In radio groups with no default
selection specified, no item will be selected. This goes against
the HTML 2 spec but allows broken Navigator-esque forms behaviour.
In consequence, radios can be deselected by clicking on the same
one twice. I'd fixed the flickering experienced when doing this
recently, but that, now, is irrelevant, since the state of a radio
must always change.

Reformatter's new 'find width of a SELECT field' didn't account for
the width of <none> and <many> items, and now does (particularly
important for broken items with no OPTION contents).

Under certain circumstances, illegally named targets would open in the
ancestor rather than a new window - a deliberate decision in the code,
but now reversed due to a test suite failure; they'll open in a new
window instead.

Altered the left hand indent handling for lists so that headings and
body text follow the Navigator 48 pixel indent and the bullet point
items drop to the left of the left hand margin, rather than sitting
on the margin with the text indented to the right.

Tightened up the hotlist_load_directory checking of URLs, so that
only those with '://' in - i.e. look fully specified - are accepted.
HTML files are loaded into a new directory now.

Items without a descriptive title in hotlist_new_url will have the URL
substituted in instead. White space before and after descriptions and
after URLs is stripped. Directories with zero length names or null
strings (after white space is stripped) will still be created, with a
generic name (see Messages, token 'HotlistUntitled').
@
text
@d245 5
d423 4
d654 1
d656 14
@


1.20
log
@Forgot to mention the important bit - Choices and Controls are now *not*
loaded into a malloc block, and chf/cof have been removed. This is because
the length of the message file is indeterminate when loaded by MessageTrans;
precisely what MessageTrans does with it on loading is unspecified in the
PRMs. MessageTrans_FileInfo could imply that the size required for the file
may not be the same as the actual file size on disc... so the save choices
routine now loads a copy as it needs it.
@
text
@d486 1
a486 1
  ChkError(windows_initialise_tool_sizes());
d1115 16
@


1.19
log
@All Messages files updated to show version 1.21 beta.

New save choices function with supporting code in Save.c; 'Save choices'
option in the Choices menu is now implemented.
@
text
@d1340 1
a1340 1
    /* Save the hotlist */
d1350 1
a1350 1
  /* Save the global history */
@


1.18
log
@Choices and Controls files are now loaded into malloc space (use chf and
cof to address them). Previously only in Main.c, task_dir is now globally
visible.

Choices updated to allow 16ths of a point in the font size specification
and the System font face has been removed - it isn't used. The use of
serif and sans serif fonts has been rationalised across builds (e.g. Desktop
builds use what they say, but the Customer build uses Homerton as the
default body (serif, so to speak) font as it matches the box's look and
feel better).

Font loading altered a bit to work properly! Font library defines some
standard startup fonts without using Choices, which Choices can then
override.
@
text
@d199 2
a200 2
  cob = chb = NULL;
  cof = chf = NULL;
a505 1
  char            * file = NULL;
a506 1
  int               size;
a548 9
  /* How much space is needed for the file? */

  e = _swix(MessageTrans_FileInfo,
            _IN(1) | _OUT(2),

            path,

            &size);

a553 18
  /* Return any error from the MessageTrans_FileInfo SWI */

  if (e || !size) return e;

  /* Claim memory for the file, complain if the allocation */
  /* fails, and remember where the file is stored in the   */
  /* relevan global.                                       */

  file = malloc(size);

  if (!file) goto open_messages_file_no_memory;

  switch (which)
  {
    case 0: chf = file; break;
    case 1: cof = file; break;
  }

d561 1
a561 1
               file);                              /* Buffer for file          */
a573 1
  if (file) free(file);
d775 3
a777 3
  if (!strcmp(lookup_choice("DefURLbar:yes",    0, 0), "yes")) choices.url_bar    = 1;
  if (!strcmp(lookup_choice("DefButtonBar:yes", 0, 0), "yes")) choices.button_bar = 1;
  if (!strcmp(lookup_choice("DefStatusBar:yes", 0, 0), "yes")) choices.status_bar = 1;
d785 2
a786 2
  choices.width      = atoi(lookup_choice("DefWidth:1024",  0, 0));
  choices.height     = atoi(lookup_choice("DefHeight:1280", 0, 0));
@


1.17
log
@Now working on source merged with Kevin Bracey's internationalisation
support. UNIFONT is undefined in the Make File for now. All Res and
Choices files updated appropriately.

Having sorted out the old Choices and Messages to form Choices, Controls
and Messages, this build has had the same cleaning up done internally.
This includes greater consistency in naming schemes and the removal of
the inconsitent choices items - e.g. Choices file entries saying 'delay
images' and 'plain backgrounds' where internally all the flags say 'show
images' and 'show backgrounds'. ChoiceDefs.h and CtrlDefs.h added to
clarify the meaning of some fields, though usage of these is not 100%
in the source (there are cases where parameters are passed through to
functions as ints, and those functions still check these against hard
coded values rather than the #define stuff).

Fetcher status return bits (connected, sent request, etc.) now reflected
in status bar. Progress during fetchs to files are reported by %, where
the size of the object is known. Exceeding 100% drops back to a byte
counter, in case the estimated size was wrong. The progress counter
may be updated after specific delays, rather than 'as often as possible',
to reduce flicker (as requested by D.Brown some time ago).

I've done a small rewrite of the fetch prioritisation scheme in FetchPage.c;
how well this performs in general use across different processor speeds
remains to be tested, but certainly it has some advantages. For each small
fetch window before the rewrite, a 4cs tight loop was entered - this gave a
noticable and substantial drain to the Desktop performance if more than one
was opened. Now, several can be up at once with little hit. The actual file
fetch is on half the priority it was before, with all others taken back
just a bit - e.g. from 20cs per poll to 15cs per poll for flat out
reformatting. You don't seem to lose much time on the format in practice,
and the Desktop feels quite a bit lighter at the same time. There's the
potential for smoother frameset loading in this scheme, too.

When Shift+Clicking on a link meant you still fetched inside the main
browser window, several fetches could occur in a frameset - one per frame.
However, now that you can only do this by clicking on a link that leads to
non-displayable data - or by turning off the small fetch windows by
setting UseSmall to 'no' in Choices - a bug where fetchpage_preprocessed
would stop such fetches as new ones were started was revealed.
The API to frames_abort_fetching has now been extended to include a
'stop file spooling too' flag, allowing a fix to be made by having
fetchpage_preprocess's calls not set this (and it doesn't check the
savelink flag is unset before proceeding, since frames_abort_fetching
does that implicitly now).

Had left the RAM transfer buffer at 16 bytes (from testing) accidentally...
Oops. Upped it to 4K. In addition, when loading data by RAM transfer,
the browser didn't notice if a RAMFetch bounced during the transfer. It
would be treated as a 'first' RAMFetch bounce, basically, and try to go to
file transfer - oops. Fixed.
@
text
@d70 1
a113 4
/* To hold where the task is coming from (malloced in main) */

static char * task_dir = NULL;

d173 3
a175 3
  show_error(event_register_message_handler(Wimp_MQuit,
                                            handle_messages,
                                            NULL));
a196 7
  /* Register a handler for Toolbox errors */

  show_error(event_register_toolbox_handler(-1,
                                            Toolbox_Error,
                                            report_toolbox_error,
                                            NULL));

d200 1
d205 5
d225 3
a227 2
  /* Quit menu items are set to give the Quit_Quit event type, as well as */
  /* this event possibly being delivered by the Toolbox from elsewhere.   */
d229 1
a229 4
  show_error(event_register_toolbox_handler(-1,
                                            Quit_Quit,
                                            handle_quit,
                                            NULL));
d233 11
a243 32
  show_error(event_register_toolbox_handler(-1,
                                            ProgInfo_AboutToBeShown,
                                            handle_show_info,
                                            NULL));

  /* Called when the icon bar is clicked upon with Select */

  show_error(event_register_toolbox_handler(-1,
                                            EOpenNewWindow,
                                            windows_new_browser,
                                            NULL));

  /* Called to close the browser window */

  show_error(event_register_toolbox_handler(-1,
                                            ECloseWindow,
                                            windows_shut_browser,
                                            NULL));

  /* Called when the Open URL dialogue is to be shown */

  show_error(event_register_toolbox_handler(-1,
                                            EOpenToBeShownMisc,
                                            openurl_to_be_shown,
                                            NULL));

  /* Called when the Open URL dialogue is to be shown from a menu */

  show_error(event_register_toolbox_handler(-1,
                                            EOpenToBeShownMenu,
                                            openurl_to_show_from_menu,
                                            NULL));
d247 20
a266 49
  show_error(event_register_toolbox_handler(-1,
                                            EFindToBeShown,
                                            find_to_be_shown,
                                            NULL));

  /* Called when the Print Style dialogue is to be shown */

  show_error(event_register_toolbox_handler(-1,
                                            EPSToBeShown,
                                            printstyle_to_be_shown,
                                            NULL));

  /* Called when the Print dialogue is to be shown */

  show_error(event_register_toolbox_handler(-1,
                                            PrintDbox_AboutToBeShown,
                                            print_to_be_shown,
                                            NULL));

  /* Called when the Utils submenu is to be opened from the */
  /* main menu in a browser window.                         */

  show_error(event_register_toolbox_handler(-1,
                                            EUtilsToBeShown,
                                            menus_show_utils,
                                            NULL));

  /* Called when the Export submenu is to be opened */

  show_error(event_register_toolbox_handler(-1,
                                            EExportToBeShown,
                                            menus_show_export,
                                            NULL));

  /* Called when the Choices submenu is to be opened */
  /* from the icon bar menu                          */

  show_error(event_register_toolbox_handler(-1,
                                            EChoicesToBeShown,
                                            menus_show_choices,
                                            NULL));

  /* Called when the File submenu is to be opened from */
  /* a browser window's main menu                      */

  show_error(event_register_toolbox_handler(-1,
                                            EFileToBeShown,
                                            menus_show_file,
                                            NULL));
d270 1
a270 4
  show_error(event_register_toolbox_handler(-1,
                                            EEncodingSelect,
                                            encoding_select,
                                            NULL));
d275 5
a279 26
  show_error(event_register_toolbox_handler(-1,
                                            EEncodingFromDocument,
                                            encoding_from_document_select,
                                            NULL));

  /* Called when the Encoding submenu is to be opened from */
  /* a browser window's main menu                          */

  show_error(event_register_toolbox_handler(-1,
                                            EEncodingToBeShown,
                                            encoding_show_menu,
                                            NULL));


  /* Called whenever the main menu is to be opened */
  /* from a browser window, or closed.             */

  show_error(event_register_toolbox_handler(-1,
                                            EDocumentToBeShown,
                                            menus_show_main,
                                            NULL));

  show_error(event_register_toolbox_handler(-1,
                                            EDocumentHidden,
                                            menus_hide_main,
                                            NULL));
d281 1
a281 1
  /* Called whenever a menu item is selected */
d283 1
a283 4
  show_error(event_register_toolbox_handler(-1,
                                            Menu_Selection,
                                            menus_item_selected,
                                            NULL));
d285 1
a285 1
  /* General key press handler */
d287 1
a287 18
  show_error(event_register_wimp_handler(-1,
                                         Wimp_EKeyPressed,
                                         handle_keys,
                                         NULL));

  /* Menu handler for forms etc. */

  show_error(event_register_wimp_handler(-1,
                                         Wimp_EMenuSelection,
                                         handle_menus,
                                         NULL));

  /* LoseCaret event handler for grabbing the caret back, etc. */

  show_error(event_register_wimp_handler(-1,
                                         Wimp_ELoseCaret,
                                         handle_lose_caret,
                                         NULL));
d506 1
a506 2
  char            * sysvar;
  char            * defpath;
d508 1
a508 75
  int               len, exists;

  /* Work out what to open.                     */
  /*                                            */
  /* If you extend this switch statement, don't */
  /* forget to extend the one later in the      */
  /* function too...                            */

  switch (which)
  {
    case 0:
    {
      sysvar  = "Browse$ChoicesFile";
      defpath = ".Choices";
    }
    break;

    case 1:
    {
      sysvar  = "Browse$ControlsFile";
      defpath = ".Controls";
    }
    break;

    default:
    {
      #ifdef TRACE

        erb.errnum = Utils_Error_Custom_Fatal;

        sprintf(erb.errmess,
                "In open_choices_file, passed unrecognised parameter value '%d'",
                which);

        return &erb;

      #else

        return NULL;

      #endif
    }
  }

  /* First, find the system variable length. Must use _kernel_swi */
  /* here for various reasons.                                    */

  {
    _kernel_swi_regs r;

    r.r[0] = (int) sysvar;
    r.r[1] = (int) NULL;
    r.r[2] = -1;
    r.r[3] = 0;
    r.r[4] = 0;

    /* Equivalent to getenv(), but the RISC OS implementation evaluates */
    /* the system variable as an expression which we don't want; hence  */
    /* the direct use of the SWI.                                       */

    _kernel_swi(OS_ReadVarVal, &r, &r);

    len = -r.r[2]; /* This includes a terminator */
  }

  if (!len)
  {
    /* Variable doesn't exist */

    len    = strlen(task_dir) + strlen(defpath) + 1;
    exists = 0;
  }
  else exists = 1;

  /* Allocate space */
d510 1
a510 1
  path = malloc(len + 1);
d512 1
a512 11
  if (!path)
  {
    erb.errnum = Utils_Error_Custom_Fatal;
    strcpy(erb.errmess, "There is insufficient memory to start the browser.");
    show_error(&erb);
  }

  /* Read the variable or copy the data in */

  if (exists) _swix(OS_ReadVarVal,
                    _INR(0,4),
d514 1
a514 10
                    sysvar, /* Variable name                      */
                    path,   /* Buffer                             */
                    len,    /* Size of buffer                     */
                    0,      /* Name pointer (0 for 1st call)      */
                    4);     /* Variable type (4 = literal string) */
  else
  {
    strcpy(path, task_dir);
    strcat(path, defpath);
  }
d533 2
a534 2
  /* Update the relevant variable. No need for a default case */
  /* as the first switch statement must have caught that one. */
d551 9
d563 19
d590 16
a605 1
               0);                                 /* 0 to buffer data in RMA  */
a688 3
  if (choices.font_size < 6)  choices.font_size = 6;
  if (choices.font_size > 24) choices.font_size = 24;
  choices.font_size *= 16;
d690 35
a724 1
  choices.encoding = atoi(lookup_choice("Encoding:4", 0, 0));
a1005 8

  /* Wake up the font library */

  fm_init(choices.system_font, choices.font_size);

  show_error(fm_define_default_typefaces());

  fm_claim_basic_typefaces(choices.font_size);
@


1.16
log
@Encoding support added: if UNIFONT is defined then the browser will
attempt to use the system font to render Unicode characters (new
International module required). If not defined, the browser will just
handle Acorn Latin-1 characters, but HTMLLib will convert other encodings
into Latin-1. Must keep the UNIFONT define in sync with HTMLLib (if
defined HTMLLib outputs UTF-8, otherwise Acorn Latin-1).

Still needed:

Reverse encoding (converting form input etc back into the server's
character set).
Reparse when encoding changes.
Setting of charset from an attribute on the <A> tag.
@
text
@d61 2
d487 1
a487 1
  flex_init(program_name, NULL);
d489 1
d810 1
d826 98
a923 1
  /* Set the default window size and position */
d925 48
a972 4
  choices.width     = atoi(lookup_choice("DefWidth:1024",0,0));
  choices.height    = atoi(lookup_choice("DefHeight:1280",0,0));
  choices.overridex = atoi(lookup_choice("OverrideX:0",0,0));
  choices.overridey = atoi(lookup_choice("OverrideY:0",0,0));
d975 1
a975 1
  /* exist and need setting to null values.               */
d984 1
a984 24
  /* Set the various default colours */

  choices.col_back = (unsigned int) strtoul(lookup_choice("BackColour:0xdddddd00",0,0),NULL,16);
  choices.col_text = (unsigned int) strtoul(lookup_choice("TextColour:0x00000000",0,0),NULL,16);
  choices.col_link = (unsigned int) strtoul(lookup_choice("LinkColour:0xff000000",0,0),NULL,16);
  choices.col_used = (unsigned int) strtoul(lookup_choice("UsedColour:0xbb008800",0,0),NULL,16);
  choices.col_foll = (unsigned int) strtoul(lookup_choice("FollColour:0x0000ff00",0,0),NULL,16);
  choices.col_sele = (unsigned int) strtoul(lookup_choice("SeleColour:0x00bb0000",0,0),NULL,16);

  /* Default fonts */

  choices.fontsize = atoi(lookup_choice("FontSize:12",0,0));
  if (choices.fontsize < 6)  choices.fontsize = 6;
  if (choices.fontsize > 24) choices.fontsize = 24;
  choices.fontsize *= 16;

  choices.encoding = atoi(lookup_choice("Encoding:4",0,0));

  /* Force system font if we're using UTF-8 */
  #ifdef UNIFONT
  choices.systemfont = 1;
  #else
  if (!strcmp(lookup_choice("SystemFont:no",0,0),"yes")) choices.systemfont = 1;
  #endif
d986 1
a986 1
  if (choices.systemfont) choices.fontsize = FM_Standard_Size;
d988 1
a988 1
  /* None user-configurable options from the Controls file */
d990 2
a991 5
  fixed.anim_delay          = atoi(lookup_control("AnimSpeed:4",       0,0));
  fixed.minimum_convergence = atoi(lookup_control("MinConvergence:480",0,0));
  fixed.show_dstat_for      = atoi(lookup_control("ShowDStatFor:300",  0,0));
  fixed.quantise            = atoi(lookup_control("Quantise:5",        0,0));
  fixed.dontgrey            = atoi(lookup_control("DontGrey:0",        0,0));
d993 1
a993 1
  /* Pointer active point offsets */
d995 1
a995 2
  {
    int offset;
d997 3
a999 17
    offset = atoi(lookup_control("PtrLnkActvX:5", 0,0)); fixed.ptrlnkactvx  = (char) offset;
    offset = atoi(lookup_control("PtrLnkActvY:1", 0,0)); fixed.ptrlnkactvy  = (char) offset;
    offset = atoi(lookup_control("PtrMapActvX:7", 0,0)); fixed.ptrmapactvx  = (char) offset;
    offset = atoi(lookup_control("PtrMapActvY:7", 0,0)); fixed.ptrmapactvy  = (char) offset;
    offset = atoi(lookup_control("PtrUDActvX:5",  0,0)); fixed.ptrudactvx   = (char) offset;
    offset = atoi(lookup_control("PtrUDActvY:8",  0,0)); fixed.ptrudactvy   = (char) offset;
    offset = atoi(lookup_control("PtrLRActvX:8",  0,0)); fixed.ptrlractvx   = (char) offset;
    offset = atoi(lookup_control("PtrLRActvY:5",  0,0)); fixed.ptrlractvy   = (char) offset;
    offset = atoi(lookup_control("PtrUDLRActvX:8",0,0)); fixed.ptrudlractvx = (char) offset;
    offset = atoi(lookup_control("PtrUDLRActvY:5",0,0)); fixed.ptrudlractvy = (char) offset;
    offset = atoi(lookup_control("PtrNoRActvX:7", 0,0)); fixed.ptrnoractvx  = (char) offset;
    offset = atoi(lookup_control("PtrNoRActvY:7", 0,0)); fixed.ptrnoractvy  = (char) offset;
    offset = atoi(lookup_control("PtrToSActvX:0", 0,0)); fixed.ptrtosactvx  = (char) offset;
    offset = atoi(lookup_control("PtrToSActvY:0", 0,0)); fixed.ptrtosactvy  = (char) offset;
    offset = atoi(lookup_control("PtrScrActvX:8", 0,0)); fixed.ptrscractvx  = (char) offset;
    offset = atoi(lookup_control("PtrScrActvY:8", 0,0)); fixed.ptrscractvy  = (char) offset;
  }
d1001 3
a1003 1
  fixed.backoffat   = atoi(lookup_control("BackOffAt:128",0,0));
d1005 1
a1005 1
  if (!strcmp(lookup_choice("UseSmall:yes",0,0),"yes")) choices.use_small = 1;
d1007 1
a1007 2
  if (!strcmp(lookup_control("SwapBars:no"     ,0,0),"yes")) fixed.swapbars     = 1;
  if (!strcmp(lookup_control("DBoxAnims:no"    ,0,0),"yes")) fixed.dboxanims    = 1;
d1009 6
a1014 3
  if (!strcmp(lookup_control("AppendStatus:no" ,0,0),"yes")) fixed.appendstatus = 1;
  if (!strcmp(lookup_control("UseBrackets:yes" ,0,0),"yes")) fixed.usebrackets  = 1;
  if (!strcmp(lookup_control("AppendURLs:no"   ,0,0),"yes")) fixed.appendurls   = 1;
d1016 1
a1016 4
  if (!strcmp(lookup_control("KeepCaret:no"    ,0,0),"yes")) fixed.keepcaret    = 1;
  if (!strcmp(lookup_control("ClaimHelp:no"    ,0,0),"yes")) fixed.claimhelp    = 1;
  if (!strcmp(lookup_control("StopWebServ:no"  ,0,0),"yes")) fixed.stopwebserv  = 1;
  if (!strcmp(lookup_control("BackWindow:no"   ,0,0),"yes")) fixed.backwindow   = 1;
d1018 2
a1019 2
  if (!strcmp(lookup_control("IgnoreAdjust:no" ,0,0),"yes")) fixed.ignoreadjust = 1;
  if (!strcmp(lookup_control("LockToLine:no"   ,0,0),"yes")) fixed.locktoline   = 1;
d1021 3
a1023 3
  /* The ColourProgress option in Messages is a little unusual; it holds */
  /* 'no' or a Wimp colour number. Default to 11 (red, in the standard   */
  /* Wimp palette).                                                      */
d1025 1
a1025 1
  if (!strcmp(lookup_control("ColourProgress:11",0,0),"no")) fixed.colour_progress = 255;
d1028 2
a1029 2
    fixed.colour_progress = atoi(lookup_control("ColourProgress:11",0,0));
    if (fixed.colour_progress > 15) fixed.colour_progress = 11;
d1032 1
a1032 3
  /* Maximum global history size in K, maximum */
  /* view history size in entires, and maximum */
  /* number of images to simultaneously fetch. */
d1034 2
a1035 2
  /* Limit the number of simultaneous image fetches (I recommend */
  /* a minimum of 2, rather than 1, as most efficient).          */
d1037 1
a1037 2
  choices.maximages = atoi(lookup_choice("MaxImages:5" ,0,0));
  if (choices.maximages <= 0) choices.maximages = 1;
d1039 1
a1039 1
  /* History list choices */
d1041 4
a1044 2
  choices.maxghistory = atoi(lookup_choice("GHistSize:8" ,0,0));
  choices.maxvhistory = atoi(lookup_choice("VhistSize:50",0,0));
d1046 1
a1046 2
  if (choices.maxghistory < 1) choices.maxghistory = 1;
  if (choices.maxvhistory < 4) choices.maxvhistory = 4;
d1048 1
a1048 2
  if      (!strcmp(lookup_choice("SaveHistory:once",0,0),"always")) choices.save_history = 2;
  else if (!strcmp(lookup_choice("SaveHistory:once",0,0),"once"))   choices.save_history = 1;
d1050 1
a1050 1
  /* Hotlist options */
d1052 2
a1053 2
  if      (!strcmp(lookup_choice("SaveHotlist:always",0,0),"always")) choices.save_hotlist = 2;
  else if (!strcmp(lookup_choice("SaveHotlist:always",0,0),"once"))   choices.save_hotlist = 1;
d1055 1
a1055 2
  if (!strcmp(lookup_choice("AddHotlist:top",0,0),"bottom"))         choices.add_hotlist  = 1;
  if (!strcmp(lookup_choice("HotlistType:descriptions",0,0),"urls")) choices.hotlist_show = 1;
d1057 1
a1057 3
  choices.autoopen_delay = atoi(lookup_choice("AutoOpenDelay:100",0,0));
  if (choices.autoopen_delay > 1000) choices.autoopen_delay = 1000;
  if (choices.autoopen_delay < 0)    choices.autoopen_delay = 0;
d1059 2
a1060 60
  /* Page layout */

  choices.leftmargin   = atoi(lookup_control("LeftMargin:1600"  ,0,0));
  choices.rightmargin  = atoi(lookup_control("RightMargin:6400" ,0,0));
  choices.quotemargin  = atoi(lookup_control("QuoteMargin:19200",0,0));
  choices.leading      = atoi(lookup_control("Leading:4"        ,0,0));
  choices.leftindent   = atoi(lookup_control("LeftIndent:12800" ,0,0));
  choices.minfrmheight = atoi(lookup_control("MinFrmHeight:48"  ,0,0));
  choices.minfrmwidth  = atoi(lookup_control("MinFrmWidth:48"   ,0,0));

  /* Reformatter options */

  if (!strcmp(lookup_choice("RefoWait:no",0,0),"yes")) choices.refowait = 1;
  if (!strcmp(lookup_choice("RefoHang:no",0,0),"yes")) choices.refohang = 1;

  choices.refotime = atoi(lookup_choice("RefoTime:500",0,0));
  if (choices.refotime < 25)   choices.refotime = 25;
  if (choices.refotime > 2000) choices.refotime = 2000;

  /* Miscellaneous options */

  if (!strcmp(lookup_control("BrickWall:no"    ,0,0),"yes")) choices.brickwall     = 1;
  if (!strcmp(lookup_control("ClearFirst:yes"  ,0,0),"yes")) choices.clearfirst    = 1;
  if (!strcmp(lookup_control("KeepHighlight:no",0,0),"yes")) choices.keephighlight = 1;

  if (!strcmp(lookup_choice("DelayImage:yes"   ,0,0),"yes")) choices.delayimages   = 1;
  if (!strcmp(lookup_choice("DisplayBgs:yes"   ,0,0),"yes")) choices.displaybgs    = 1;
  if (!strcmp(lookup_choice("UnderlineLks:yes" ,0,0),"yes")) choices.underlinelks  = 1;
  if (!strcmp(lookup_choice("OverrideCols:no"  ,0,0),"yes")) choices.overridecols  = 1;
  if (!strcmp(lookup_choice("ShowURLs:no"      ,0,0),"yes")) choices.show_urls     = 1;
  if (!strcmp(lookup_choice("FixedPtr:yes"     ,0,0),"yes")) choices.fixedptr      = 1;
  if (!strcmp(lookup_choice("HighlightLks:no"  ,0,0),"yes")) choices.highlightlks  = 1;
  if (!strcmp(lookup_choice("KeyboardCtl:no"   ,0,0),"yes")) choices.keyboardctl   = 1;
  if (!strcmp(lookup_choice("UseProxy:no"      ,0,0),"yes")) choices.use_proxy     = 1;
  if (!strcmp(lookup_choice("FullScreen:no"    ,0,0),"yes")) choices.full_screen   = 1;

  if (!strcmp(lookup_choice("Clone:yes"        ,0,0),"yes")) choices.clone         = 1;

  if      (!strcmp(lookup_choice("HScroll:no" ,0,0),"no"))  choices.h_scroll = 0;
  else if (!strcmp(lookup_choice("HScroll:no" ,0,0),"yes")) choices.h_scroll = 2;
  else                                                      choices.h_scroll = 1; /* Auto */

  if      (!strcmp(lookup_choice("VScroll:yes",0,0),"no"))  choices.v_scroll = 0;
  else if (!strcmp(lookup_choice("VScroll:yes",0,0),"yes")) choices.v_scroll = 2;
  else                                                      choices.v_scroll = 1; /* Auto */

  /* Set toolbar options */

  if (!strcmp(lookup_choice("DefURLbar:yes"   ,0,0),"yes")) choices.url_bar    = 1;
  if (!strcmp(lookup_choice("DefButtonBar:yes",0,0),"yes")) choices.button_bar = 1;
  if (!strcmp(lookup_choice("DefStatusBar:yes",0,0),"yes")) choices.status_bar = 1;

  if (!strcmp(lookup_choice("MoveGadgets"  ,0,0),"0")) choices.move_gadgets = 0;
  if (!strcmp(lookup_choice("MoveGadgets"  ,0,0),"1")) choices.move_gadgets = 1;
  if (!strcmp(lookup_choice("MoveGadgets:2",0,0),"2")) choices.move_gadgets = 2;

  if (!strcmp(lookup_control("AnimDrift:no",0,0),"yes")) choices.anim_drift = 1;

  if      (!strcmp(lookup_choice("SolidResize:yes",0,0),"yes"))    choices.solid_resize = 1;
  else if (!strcmp(lookup_choice("SolidResize:yes",0,0),"always")) choices.solid_resize = 2;
d1062 17
d1097 4
a1100 4
                (void *) choices.col_back,
                (void *) choices.col_text,
                (void *) choices.col_link,
                (void *) choices.col_used);
d1103 2
a1104 2
               "Delay images: %d\n"
               "Display backgrounds: %d\n"
d1107 1
a1107 1
               "Override colours: %d\n"
d1113 6
a1118 6
                choices.systemfont,
                choices.delayimages,
                choices.displaybgs,
                choices.fixedptr,
                choices.underlinelks,
                choices.overridecols,
d1129 2
a1130 1
  fm_init(choices.systemfont, choices.fontsize);
d1132 2
a1133 1
  fm_claim_basic_typefaces(choices.fontsize);
d1140 1
a1140 1
  if (fixed.claimhelp)
d1390 1
a1390 1
  if (choices.keyboardctl) mouse_watch_pointer_control(1);
d1468 1
a1468 1
  while(!quit)
d1470 7
d1504 1
a1504 1
    if (choices.save_hotlist) show_error_ret(hotlist_save(lookup_choice("HotlistPath:Browse:User.Hotlist",0,0)));
d1514 1
a1514 1
  if (choices.save_history) history_save(lookup_choice("HistoryPath:Browse:User.History",0,0));
@


1.15
log
@Support for ANT URL broadcast message added.

Image deletion routines rewritten; nasty animated GIF bug now gone
(it kept trying to update the cross-referenced image in the browser that
no longer existed, and I've no idea how animated GIFs ever managed to *not*
blow up if a cross referencing browser was shut down; and I've tested
this...). There are now as many image structures as there are total images
in the visible browsers, and no more; cross referenced images in the
to-be-deleted browser have their ownership moved to the cross
referencer before the cross referencee is wiped, with any required fetches
being transferred with them.

Reformatter sped up a bit by getting rid of strlen on the main text field
of tokens in all places bar one, where it is called extremely rarely. This
means direct app-to-app transfer of, say, a 359K text file to the browser
won't run like a drain as it tries to do strlen on a 359K string over and
over again! Most of the time the performance benefits won't really be
noticable, but on the above text file, formatting time went down from
290 seconds before the change to just under 7 seconds, a 41 fold speed
increase or thereabouts (SA110 228MHz).

MakeFile changed to force function name compilation on for debug builds
(-fn in the DD...FLAGS); useful for certain functions such as
register_null_handler, which can now output the name of the function
being registered.

...Which helped show up some nasties in the animation handler and animation
drift handler registration/deregistration process, which have been fixed
(callers of fetchpage_release_nulls were unaware that the drift handler
could be installed, and fragments of old code checking choices.anim_drift
had a value other than 1 or 0 were still hanging around - bit tricky for
a single bit item).

Added support for VALIGN in table cells. Spotted a bug or two in the
'what token is the pointer over' routines as a result, and fixed them - the
worst was in browser_line_at_y, which checked the y coordinate was below
the given one [the mouse], but didn't check the line height to see if the
given y coordinate was *within* the line, rather than just above it. Never
used to matter pre-tables, but a definite concern once multiple line
arrays can exist on one page.
@
text
@d61 1
d322 24
d794 19
d855 6
d862 2
@


1.14
log
@Got the deferred reformatter working properly. It doesn't do that 'OK,
the page is fetched and reformatted, but just to annoy you, I'm going
to wait 5 seconds and then suddenly reformat the whole thing again'
trick anymore. The fetcher was calling the reformatter in a delayed
form even when the reformatter was already running, so it would carry
on past the reformat point or from below what had become and invalidated
line, and some time later, get back to the delayed reformat. Now,
reformatting is only delayed by the fetcher when the reformatter is not
running. In practice this means body text reformats as it fetches, but
large tables will show delayed reformatting - which was exactly the
intended behaviour of the feature when it was originally thought of.

fetch_token_data_address removed; it was only needed in two places,
both of which already knew when to read tp->text and when to ignore
it. Its functionality is duplicated in an 'if' involving reformat_istext,
anyway.

!Run[D] files taken back to requiring HTTP 0.33, since 0.36 introduces
many weird and wonderful problems.

Typo in Messages files, 'All current images (sic.) fetches finished' -
'images' is now 'image'.

Shift+Click saving - you could save to an application. No problem. But
the equivalent (just clicking on a link that led to an unknown datatype
and getting the save dialogue that way) didn't work. It does now.
Another problem was saving to an application that didn't support the
datatype - oops, the dialogue would close but the fetch would sit there
waiting to be told where to save. It doesn't close now (as expected).

NB, doing several simultaneous fetches to a text editor may have problems
as the editors are too clever for their own good. Despite receiving
DataLoad messages for <Wimp$Scrap> for files of different types, sizes
and datestamps, the editors can decide it's still the same file and:

Zap      - Hats off, it gets it right, almost. You do get warned 'Multiple
           copies - one on disc is newer' as everything after the first
           text loads, but they do load, and in separate windows.
StrongED - Does not load the subsequent files, so the browser gives 'Data
           transfer failed' errors and opens up Scrap. Turning off 'Don't
           load same file twice' fixes it - each file is loaded in a new
           window with no warnings. At least in the first case, you don't
           lose data, since the files are kept in Scrap.
Edit     - Each time it loads the file, it *replaces* the other one in
           memory, using the same window for each. This is the worst
           behaviour as it isn't configurable (well, I don't know of a way
           to change it...) and results in data loss as successive texts
           get trounced by the new data.

I can't see how I can fix this in the browser as it's basically silly
behaviour on behalf of the editors. Other applications which don't try
to work out if it's a new file or not are fine!

When conducting image fetches, proxying is allowed unless reloading.
When conducting page fetches, proxying was never allowed - so web cache
stuff would have been, er, interesting. It now sets X-NoProxy: in the
request header when reloading, but otherwise this is not included.

AnimSpeed is, at last, independent of browser poll speed. They used to
be tied together. Guess how the animation code used to work ;-)

'Can't handle this datatype' - deprecated now that save dialogues can be
popped up. The 'can't save objects in full screen mode' error would never
be shown due to a bug, anyway; this now replaces 'can't handle', which
has been removed from all Messages files.

RefoWait, RefoHang and RefoTime moved from Controls back to Choices.

Trying to get rid of strlen in the reformatter - it can get very slow
(e.g. strlen of 8K chunks of text, or if a 330K text file is transferred
from a text editor straight to the browser, strlen of a 330K string...).
There will be unfinished bits of code in the reformatter that may seem
unnecessary - they've just not been plugged in yet (since they don't
actually work). Don't remove them!
@
text
@d383 4
a555 4
  /* Try and set the user agent string for HTTP fetches. */

  show_error(utils_set_http_agent());

a624 4
  /* Equivalent to getenv(), but the RISC OS implementation evaluates */
  /* the system variable as an expression which we don't want; hence  */
  /* the direct use of the SWI.                                       */

d637 4
d944 2
d964 1
a964 2
  if      (!strcmp(lookup_control("AnimDrift:no",   0,0),"yes"))    choices.anim_drift   = 1;
  else if (!strcmp(lookup_control("AnimDrift:no",   0,0),"always")) choices.anim_drift   = 2;
@


1.13
log
@As warned in the last log, pretty much all event codes and component IDs
have now changed along with many of the names, to provide a consistent
name and numberspace for events and components. This also minimises
number clashes (e.g. as was, the Save File origin when opened from a
Hotlist menu with an already-used component ID). To get full details on
this, please carefully read through TBEvents.h.

Res files, Sprites files and Messages files have been updated again both
due to the above, and routine additions (e.g. message support for a few
Hotlist bits and pieces). !Run[D] files updated for FTP 0.11 and
HTTP 0.36.

In the Makefile, the Customer objects list was missing Save - must have
moved something when I should've copied it, when adding in SaveFile or
SaveObject in all probability. Now fixed. Couple of other bits and bobs
fixed in the build environment (e.g. stuff saying !Argo instead of
!Customer). Oh, and I've altered the MakeFile copy options again to the
best compromise I can come up with. Newer is turned on for everything
except !Run[D] and !RunImage, since both of those change between debug
builds - otherwise if you'd built debug and non-debug versions, it was
not possible to switch between them - one version would have the newer
timestamp and thus never get overwritten.

The default hotlist has had a few items added - that'll be about the end
of it, I think; there's more than enough stuff in there now.

Saving of the hotlist from the document menu and of URI files,
directories and selections from the hotlist menu tree is now implemented
- this new save system rocks... Oh, and you can save all images and
backgrounds as sprites.

Saving of items with Shift+Click to other applications directly now
works, and is robust. Unique Scrap filenames are used, with data load
bounces (e.g. if some pra - er, person quits the app they're sending
to) working correctly - that is, give an error, keep the file, rename
it to something safe, and open the directory it lies in. As opposed
to normal app-to-app bounces, where the scrap file is deleted (see
PRM 3-254). This means you can now look at README files in FTP
sites, say, without using a disc intermediate. Or you can send pictures
straight to ChangeFSI, fetch HTML links into editors, and so-on, and
so-on - it's all very funky. Known problems include the ambiguous
'invalid component ID' instead of 'file open' for *normal* (straight to
disc) shift+click saves, and I think I'll introduce a unique name
guarantee of some sort to stop 'file open' in the first place. Odd
that the really tricky part (app-to-app) should be least likely to
suffer from this!
@
text
@d816 1
a816 1
  fixed.poll_delay          = atoi(lookup_control("AnimSpeed:4",       0,0));
d920 2
a921 2
  if (!strcmp(lookup_control("RefoWait:no",0,0),"yes")) choices.refowait = 1;
  if (!strcmp(lookup_control("RefoHang:no",0,0),"yes")) choices.refohang = 1;
d923 1
a923 1
  choices.refotime = atoi(lookup_control("RefoTime:500",0,0));
d1366 1
a1366 1
                             time + (drag_in_progress ? 0 : fixed.poll_delay),
@


1.12
log
@First a minor warning - the various Res files are out of sync in this build.
Only the Browse resources are currently valid.

Added Utils.Icons - has a few archives inside containing the resources
(well, some of them) used to build various UI sprites for various builds.
Archived because these are unlikely to change much, and putting them on
CVS was a move to, well, archive the stuff...

SaveDBox objects vanquished and requirements in !Run[D] files removed. The
data save code fits much more neatly in amongst the data load protocol
stuff now (with the slight exception of having to split the SaveObject
source into SaveObject and SaveFile - the former handles multiple persistent
dialogues for Shift+Click on links and the like, the latter handles 'one at
a time' transient dialogues for save source and similar). Export Link is now
supported, too, and writes a 'proper' version URI file. You'll find that
double-clicking on old URI files will work as the URI handler picks them up,
whilst new version ones don't; however, dragging onto the browser will only
work with new version files. Note that support for saving and loading URL
files (ANT suite stuff) is present too, so old URI files can be typed as URL
files if you want to keep them working without modification - the URI
handler itself will hopefully support the defined URI file format soon;
double-clicking on old URI files will stop working at that point. Note
there are *lots* of changes in every Res file to support all this. This may
all seem a bit pointless to some, but the changes do in fact make it very
easy to add new save dialogues all over the place. Certainly much easier
than with the previous system, anyway. In fact, post script, image
'save as sprite' took about half an hour, which I hope proves the worth
of the new system.

Merged in newer hotlist code with support for drag cancelling with Escape
(all relevant Res files appropriately updated) and cancelling scrolling
when you've reached the window scroll limit. Had to move some of the
Wimp message handling stuff to the central Protocols source, as clashes
were occuring, and also the hotlist routines were using independent saving
code - a lot of duplicated effort. This was fair enough as at the time the
Hotlist code was written, the Save code couldn't be used in the way it is
now.

New Save Source and Print buttons on the toolbar of some builds.

Phoenix Sprites file made more efficient - the Acorn base section has been
split from the animated upper region. Browse build has a new grey fade
sprite at the back, which is less grainy than the previous one and only
uses 16 colours (with a 16 greyscale palette).

Not really a bug, bug the routine to start an image fetch for INPUT
TYPE=IMAGE forms items only did so if the src field (or equivalent, for
this tag type) was non-NULL. In fact, you should always call image_new_image
and let that handle the rest, otherwise other sections of the code will fail
as they try to obtain an image number for a given HStream and get -1 back.
This problem only generally manifested itself when loading an HTML file to
the browser straight from an application, as many src fields become NULL
when the relativisation routines find nothing to relativise to...

Authentication got broken somewhere along the line - this has been fixed
(in HTMLLib and the browser).

Ctrl+Click on a cross referenced image updates *all* copies, not just the
one with the image data attached.

Next big step: Rip up TBEvents.h and rebuild that whole approach somewhat.
To all those working on the code, my apologies but this means all Res files
will receive a very large number of alterations and there will be extensive
code changes too (mostly naming convention stuff), in more or less all
source files. I am endeavouring to ensure that the new numberspace
convention does not clash with the work being done by Kevin on
internationalisation.
@
text
@d57 1
a57 1
#include "TBEvents.h"
a60 1
#include "Find.h"
a63 2
#include "Hotlist.h"
#include "Menus.h"
a65 3
#include "OpenURL.h"
#include "Printing.h"
#include "PrintStyle.h"
a66 3
#include "SaveFile.h"
#include "SaveObject.h"
#include "Toolbars.h"
a69 6
/* Conditional includes */

#ifdef TRACE
  #include "Trace.h"
#endif

d248 7
d258 1
a258 1
                                            EOpenOpen,
d265 1
a265 1
                                            EOpenOpenFromMenu,
d272 1
a272 1
                                            EOpenFind,
d279 1
a279 1
                                            EOpenPrintStyle,
d294 1
a294 1
                                            EShowUtilsMenu,
d298 7
d309 1
a309 1
                                            EShowChoicesMenu,
d317 1
a317 1
                                            EShowFileMenu,
d325 1
a325 1
                                            EShowMainMenu,
d330 1
a330 1
                                            EHideMainMenu,
d408 2
a409 2
    show_error(event_register_toolbox_handler(-1, Trace_TokenDumpByLine,   trace_dump_tokens_by_line,   NULL));
    show_error(event_register_toolbox_handler(-1, Trace_TokenDumpByStream, trace_dump_tokens_by_stream, NULL));
d418 13
a430 13
  show_error(event_register_toolbox_handler(-1, EButtonHome,    handle_home,           NULL));
  show_error(event_register_toolbox_handler(-1, EButtonBack,    handle_back,           NULL));
  show_error(event_register_toolbox_handler(-1, EButtonForward, handle_forwards,       NULL));
  show_error(event_register_toolbox_handler(-1, EButtonReload,  handle_reload,         NULL));
  show_error(event_register_toolbox_handler(-1, EButtonStop,    handle_stop,           NULL));
  show_error(event_register_toolbox_handler(-1, EButtonViewHot, handle_view_hotlist,   NULL));
  show_error(event_register_toolbox_handler(-1, EButtonAddHot,  handle_add_hotlist,    NULL));
  show_error(event_register_toolbox_handler(-1, EButtonViewRes, handle_view_resources, NULL));
  show_error(event_register_toolbox_handler(-1, EButtonLoadImg, handle_load_images,    NULL));
  show_error(event_register_toolbox_handler(-1, EButtonViewSrc, handle_view_source,    NULL));
  show_error(event_register_toolbox_handler(-1, EButtonGoTo,    handle_go_to,          NULL));
  show_error(event_register_toolbox_handler(-1, EButtonGo,      handle_go,             NULL));
  show_error(event_register_toolbox_handler(-1, EButtonCancel,  handle_cancel,         NULL));
d432 2
a433 2
  show_error(event_register_toolbox_handler(-1, EBiStateKeyed,  handle_bistate,        NULL));
  show_error(event_register_toolbox_handler(-1, ETriStateKeyed, handle_tristate,       NULL));
d435 2
a436 2
  show_error(event_register_toolbox_handler(-1, EButtonSaveSrc, handle_save_src,       NULL));
  show_error(event_register_toolbox_handler(-1, EButtonPrint,   handle_print,          NULL));
d440 2
a441 2
  show_error(event_register_toolbox_handler(-1, EClearURL,        handle_clear_url,         NULL));
  show_error(event_register_toolbox_handler(-1, EShowHistoryMenu, handle_show_history_menu, NULL));
d445 2
a446 2
  show_error(event_register_toolbox_handler(-1, ESaveFileToBeShown,   savefile_to_be_shown,   NULL));
  show_error(event_register_toolbox_handler(-1, ESaveObjectToBeShown, saveobject_to_be_shown, NULL));
d1049 2
d1053 1
a1053 1
  if (e) show_error_cont(e);
@


1.11
log
@This version is being checked in because the Hotlist manager in the test
build provokes a Wimp bug. All the variant resource files are out of sync
and there are several outstanding bugs in the main code, so I'd personally
avoid this build like the plague unless you're mad enough to want to
examine the Wimp problem ;-)
@
text
@d73 2
a74 1
#include "Save.h"
d376 1
d378 1
d380 1
d436 3
d444 1
a444 1
  /* Event handlers for saving */
d446 2
a447 5
  show_error(event_register_toolbox_handler(-1, SaveAs_AboutToBeShown,    save_fill_in,            NULL));
  show_error(event_register_toolbox_handler(-1, SaveAs_SaveToFile,        save_save_to_file,       NULL));
  show_error(event_register_toolbox_handler(-1, SaveAs_FillBuffer,        save_fill_buffer,        NULL));
  show_error(event_register_toolbox_handler(-1, SaveAs_SaveCompleted,     save_save_completed,     NULL));
  show_error(event_register_toolbox_handler(-1, SaveAs_DialogueCompleted, save_dialogue_completed, NULL));
@


1.10
log
@Created Protocols source file and moved a lot of message handling from
handle_messages - the latter now serves as a high level distributor to
lower level functions in Protocols. Incidentally, URL files (as used by
the ANT suite) can be loaded by dragging to the browser in the same way
as URI files - Not A Lot Of People Know That, etc.

Merged new hotlist display type Res file to existing resources, added
support for DataSave message so items can be dragged from the hotlist
to a specific window (RAM transfer for URI and URL files; ScrapFile for
HTML and Text but deleted afterwards and there are appropriate guards
to stop Reload just saying 'not found'; images run through ScrapFile and
there is no choice but to leave them there and do a conventional fetch).

All !RunD files now give a WimpSlot of 2304K. Some small changes to
the Argo and Ursula build Res files to make the menu trees more sensible.
Controls files now take 'file:/' instead of 'file://' in Protocols
section. Definitions at top of URLutils.c *not* altered, as then you
end up with invalid URLs - so it will accept 'file:/', but always generate
'file://'. This is because some browsers exports 'file:/'. Sigh.

make_no_[..._]memory_error functions now return a _kernel_oserror * rather
than void. It's always &erb returned, but it enables users to use a more
elegant 'return make_no_memory_error(1);', say, rather than something
like 'make_no_memory_error(1); return &erb;'. I obviously should've written
it like that at the outset, but never mind. All callers have been
appropriately updated.

The urlutils_leafname_from_url function now replaces illegal characters
(A7000 Welcome Guide p54...) in the leaf with legal alternatives.

Internal URL scheme is now a bit cleaner, with everything properly defined
in URLutils.h. All references to http:, file: and ftp:, with or without
a following '//' use the definitions in here now.

More tidying and some reorganising of Hotlist source. Auto-open delay is
now a Choices item. Some dependencies on statics removed (e.g. the
counting functions don't accumulate into the global item_number now).
The redraw functions used Wimp_TextOp - oops, so this has been amended
to use whatever is supported on your Wimp. This is now in a new function
(utils_text_width()), which the History menu routines also use (there was
a bug in the width routine there anyway, which is therefore fixed in
passing). Several other routines used Wimp_TextOp directly too, and
they have been altered to use the new function as well.

In hotlist code, one of the larger changes is in the API to hotlist_draw_r()
(formerly _hotlist_draw()) which now takes item widths and heights as
parameters - discovering these is quite slow, so doing it every time the
function calls itself recursively is a little less efficient than
passing the values in from elsewhere. Note that underscore prefixed
functions are being slowly renamed to _r suffixed functions, to match
the convention established by Tony Cheal with is table routines. This
makes it much more obvious when something is recursive, as the same
naming convention is used in every browser source file.

Finally, note that I intend to ditch SaveDBox and use an alternate window
with manual control of the messaging in Protocols.c. This will allow
various improvements which at present the SaveDBox operational methods
preclude. I'm going to have to do at least an alternate Window object for
the SaveDBox module to use soon in any case. Getting rid of SaveDBox will
help reduce, if only slightly, demands on the RMA.
@
text
@d124 4
d204 1
a204 1
                                TASKDIR,
d577 2
a578 3
  char              path[Limits_OS_Pathname];

  memset(path, 0, sizeof(path));
d626 29
a654 3
  if (
       _swix(OS_ReadVarVal,
             _INR(0,4),
d656 1
a656 6
             sysvar,       /* Variable name                      */
             path,         /* Buffer                             */
             sizeof(path), /* Size of buffer                     */
             0,            /* Name pointer (0 for 1st call)      */
             4)            /* Variable type (4 = literal string) */
     )
d658 9
a666 1
    /* If there's an error, assume it was because the variable doesn't exist */
d668 8
a675 1
    strcat(path, TASKDIR);
d689 6
a694 1
  if (e) return e;
d714 4
d819 23
a841 4
  fixed.ptrlnkactvx = atoi(lookup_control("PtrLnkActvX:5",0,0));
  fixed.ptrlnkactvy = atoi(lookup_control("PtrLnkActvY:2",0,0));
  fixed.ptrmapactvx = atoi(lookup_control("PtrMapActvX:8",0,0));
  fixed.ptrmapactvy = atoi(lookup_control("PtrMapActvY:8",0,0));
d844 2
d1164 40
d1254 2
@


1.9
log
@Very long log entry alert - but hey, beats 'Bug fixed' (sorry, Richard) ;-)

Open URL implementation more or less complete, though may undergo UI
revision at a later date to allow named frames to be targetted. Hope to use
the ideas in this code as the foundation for other general dialogues.

In token stream dump for TRACE builds, table head items were not indented
as far as they should have been - this is fixed; and manual toolbar redraw
routines have been removed. They never worked, were commented out, and
would never be used in that form anyway.

DragBox source added, but it isn't at all complete and won't work - this is
an 'in spare time' thing. We need custom drag boxes constrained to windows
for the hotlist, and unconstrained for frame border resizing... Hey ho.

Ancestor window extents match visible areas if there are frames (no more
scrolling framesets...!). Frame resizing works whilst new documents fetch
without pulling the extent down now. However, frame horizontal extents
never shrink until a reload which is nasty, and this is all due for a
rewrite. Frames border redrawing routine moved out of Redraw.c and into
Frames.c. Bug regarding the mouse rectangle and frame border widths
(rectangle was too large, so you could squash the edges) for edge-drag
frame resizes fixed.

Window width change reformat tolerance fixed; you could creep the window
width down or up forever without any reformat, and centred objects would
move but not be redrawn (thereby giving rise to subsequent redraw errors).

Filetype on objects saved through Shift+Click correct. Save Source dialogue
recognises if that source is plain text, rather than assuming HTML. A
browser that fetches a file remembers the old store size it had before the
save, so even though the data is now ditched, it reports the same amount of
data fetched afterwards (looked awful when this could, for example,
suddenly say '0' after a file save). Progress indicator is now fully aware
of one or many file saves inside a frameset and reports the number of
saves, a colon, and the cumulative saved data count, instead of reporting
the sum total of fetched data in all frames, including non-file save stuff
(note that for just 1 save, '1:' is not shown as a special case for the
most common condition). A bug related to this, where you could in fact only
do one fetch per frame*set*, has been corrected (only one fetch allowed per
frame still, this is unlikely to ever change).

Hotlist support added (D.Brown's source), with various bits of integration
and modification still in progress there. Note additions to the Messages
files. On the subject of Messages, the whole mucky business about what
goes in Messages or Choices (and a few bugs where lookup_choice was used
instead of lookup_token or vice versa) has been sorted out. Messages
contains, more or less, just that. Choices contains user configurable
stuff which generally can't mess things up too badly. A new file, Controls,
is a Messages file holding the non-user configurable choices, which can
generally make things go badly wrong if misused. A lot of these are tied
to the Res file. StrongED users can get these to automatically fold out
the various sections (EMail me for details). Sorry, but at the time of
writing, Zap doesn't do folding... =8*P

Two bugs with images. Asking for images to be shown in browser B when
browser A uses the same ones and was loaded first didn't work correctly,
and now does (a bit weird - browser A does the fetch and browser B does the
display...). Second one occurred when the background image was also used on
the page as a foreground image. This has been fixed by flagging background
images in the image_info structure, and checking this before cross
referencing. This bit also allowed the image_restart_fetches API to be
extended, so that just background or foreground images may be fetched if
they weren't already and the user asked the browser to show them. Before,
the whole lot had to be fetched together (so turning on 'display
backgrounds' will now kick off an image fetch if required, you don't
need to reload the page anymore).

Makefile copy options tweaked to be 'newer' (so if you're testing with some
temporary Choices file or something, it won't write over it at the end of
every export), and REMOTE_HOTLIST flag added for Customer builds - means
the Hotlist.c functions aren't needed; the old, hotlist-by-file method is
used. Added support for Customer build (see later), though there were very
few additions needed in practice.

Table printing fixed - in many ways it wasn't broken, it was image printing
causing the oddities ever since the global image pool was introduced (this
is, again, fixed). The 'reformat to fit page' option didn't work as coded
any more; tables store cell addresses in the HStreams, so you can't then do
a background reformat in a different browser. Hence, it now has to reformat
to the page width, print, then put the page back again, all in the actual
displayed browser. This doesn't feel as slow in use as it perhaps should,
considering what is going on... Note that a line of a defined fraction (see
Print.h) of page height will now split over page boundaries, so tall images
or tall tables don't cause problems now (aside from the obvious problem of
having the line split over a page at all!). There was a bug in the routine
to print from a given start point until 'n' pages had been filled, in that
it always filled 'n + 1' - now fixed. Finally, as part of the printing
tweaks, a new dialogue exists - PrintStyle - with a similarly named source
file added to deal with it.

Global history auto save / load done, but only to the Choices file path -
the whole browser is still strictly single user at present, with all the
extra work for a multiuser Customer environment yet to be done. This has
shown up a global history corruption problem which I haven't fixed yet.

Rationalising TBEvents.h - things are migrating out of it, and into more
appropriate sources (e.g. definitions relating to the Open URL dialogue are
going into OpenURL.h, etc.). Event codes were at one stage deliberately
diverged in numberspace from the component IDs of typical gadgets raising
the events, to avoid anyone getting confused and thinking the IDs and event
codes must match. However, this is in fact unlikely and it is much easier
to remember the fewer numbers that result from tying the two together where
possible. This has resulted in changes to event codes raised in the
following objects of all Res files: Authorise, Find, OpenURL, and
PrintStyle.

And finally - !Run[D] files for all variants updated to require the latest
toolbox and fetcher modules. All Res files updated for hotlists etc. and
sprites files updated appropriately. All Messages, Choices and Controls
files brought in sync., and an Customer build has been added (based on the
Desktop build binary with different resources).

That's all for now...
@
text
@d72 1
d371 1
d373 1
d393 2
d832 4
d957 3
a959 1
    register_null_claimant(Wimp_ENull, handle_send_helpreq, NULL);
d1134 1
d1255 3
a1257 3
    if (tl & (1u<<5))   Printf("\nmain: Calling exit()\n");
    if (tl & (1u<<13))  Printf("      malloccount: \0216%d\0217\n",malloccount);
    if (tl & (1u<<14))  Printf("      flexcount  : %d\n",flexcount);
@


1.8
log
@Corrected fm_string_width for system font and made it select fontsize 12.8\nwhen using system font.
@
text
@d64 2
d71 1
d73 1
d108 8
a115 5
static void              initialise_app    (void);
static _kernel_oserror * open_choices_file (void);
static void              load_choices      (void);
static void              catch_errors      (int signum);
static void              termination       (void);
d127 1
a127 1
// /* toolbox (see initialise_app()). Used to get   */
d129 1
a129 1
// /* specifically generated event to deliver it    */
d206 1
a206 1
  show_error(open_choices_file());
d213 7
d260 1
a260 1
                                            EOpenURLWindow,
d264 1
a264 1
  /* Called when the Find dialogue is to be shown */
d267 2
a268 2
                                            EOpenFindWindow,
                                            find_to_be_shown,
d271 1
a271 1
  /* Called when the Print dialogue is to be shown */
d274 2
a275 2
                                            PrintDbox_AboutToBeShown,
                                            print_to_be_shown,
d278 1
a278 1
  /* Called when the user clicks on a Print dialogue's Print button */
d281 2
a282 2
                                            PrintDbox_Print,
                                            print_initiate,
d285 1
a285 1
  /* Called when the print dialogue is cancelled */
d288 2
a289 11
                                            PrintDbox_DialogueCompleted,
                                            print_restore,
                                            NULL));

  /* Called when radios are used in the Print dialogue which */
  /* may alter the state of the Reformat option (i.e. enable */
  /* or disable / ungrey it or grey it out).                 */

  show_error(event_register_toolbox_handler(-1,
                                            EEnableReformat,
                                            print_check_contents,
d316 13
d465 13
d550 1
a550 1
/* open_choices_file()                           */
d552 1
a552 1
/* Asks MessageTrans to open the Choices file.   */
d554 6
a559 3
/* to find the file in before going to the       */
/* default of 'Choices' inside the application   */
/* directory.                                    */
d562 1
a562 1
static _kernel_oserror * open_choices_file(void)
d564 4
a568 1
  _kernel_oserror * e;
d572 42
d622 5
a626 5
             "Browse$ChoicesFile", /* Variable name                      */
             path,                 /* Buffer                             */
             sizeof(path),         /* Size of buffer                     */
             0,                    /* Name pointer (0 for 1st call)      */
             4)                    /* Variable type (4 = literal string) */
d632 1
a632 1
    strcat(path, ".Choices");
d643 1
a643 1
            &chb);
d647 12
d660 1
a660 1
    MemCheck_RegisterMiscBlock((void *) chb, sizeof(MessagesFD) + strlen(path) + 1);
d663 1
a663 1
  strcpy((char *) ((int) chb + sizeof(MessagesFD)), path);
d670 3
a672 3
               chb,                            /* Pointer to control block */
               (int) chb + sizeof(MessagesFD), /* Filename                 */
               0);                             /* 0 to buffer data in RMA  */
d676 4
a679 1
/* close_choices_file()                          */
d681 4
a684 2
/* Closes the Choices messages file and releases */
/* RMA claimed for it.                           */
d687 1
a687 1
static void close_choices_file(void)
d698 1
a698 1
             chb)
d709 1
a709 1
        chb);
d755 2
a756 2
  if (!strcmp(lookup_choice("SystemFont:no"  ,0,0),"yes")) choices.systemfont = 1;
  if (choices.systemfont)    choices.fontsize = FM_Standard_Size;
d758 1
a758 1
  /* None user-configurable options from the Messages file */
d760 30
a789 23
  fixed.poll_delay          = atoi(lookup_token("AnimSpeed:4",       0,0));
  fixed.minimum_convergence = atoi(lookup_token("MinConvergence:480",0,0));
  fixed.show_dstat_for      = atoi(lookup_token("ShowDStatFor:300",  0,0));
  fixed.quantise            = atoi(lookup_token("Quantise:5",        0,0));
  fixed.dontgrey            = atoi(lookup_token("DontGrey:0",        0,0));

  fixed.ptrlnkactvx = atoi(lookup_token("PtrLnkActvX:5",0,0));
  fixed.ptrlnkactvy = atoi(lookup_token("PtrLnkActvY:2",0,0));
  fixed.ptrmapactvx = atoi(lookup_token("PtrMapActvX:8",0,0));
  fixed.ptrmapactvy = atoi(lookup_token("PtrMapActvY:8",0,0));
  fixed.backoffat   = atoi(lookup_token("BackOffAt:128",0,0));

  if (!strcmp(lookup_token("SwapBars:no"     ,0,0),"yes")) fixed.swapbars     = 1;
  if (!strcmp(lookup_token("DBoxAnims:no"    ,0,0),"yes")) fixed.dboxanims    = 1;

  if (!strcmp(lookup_token("AppendStatus:no" ,0,0),"yes")) fixed.appendstatus = 1;
  if (!strcmp(lookup_token("UseBrackets:yes" ,0,0),"yes")) fixed.usebrackets  = 1;
  if (!strcmp(lookup_token("AppendURLs:no"   ,0,0),"yes")) fixed.appendurls   = 1;

  if (!strcmp(lookup_token("KeepCaret:no"    ,0,0),"yes")) fixed.keepcaret    = 1;
  if (!strcmp(lookup_token("ClaimHelp:no"    ,0,0),"yes")) fixed.claimhelp    = 1;
  if (!strcmp(lookup_token("StopWebServ:no"  ,0,0),"yes")) fixed.stopwebserv  = 1;
  if (!strcmp(lookup_token("BackWindow:no"   ,0,0),"yes")) fixed.backwindow   = 1;
d791 6
a796 2
  if (!strcmp(lookup_token("IgnoreAdjust:no" ,0,0),"yes")) fixed.ignoreadjust = 1;
  if (!strcmp(lookup_token("LockToLine:no"   ,0,0),"yes")) fixed.locktoline   = 1;
d802 8
a811 1
  choices.maximages   = atoi(lookup_choice("MaxImages:5" ,0,0));
d815 11
a825 1
  if (choices.maximages <= 0)  choices.maximages   = 1;
d829 7
a835 7
  choices.leftmargin   = atoi(lookup_choice("LeftMargin:1600"  ,0,0));
  choices.rightmargin  = atoi(lookup_choice("RightMargin:6400" ,0,0));
  choices.quotemargin  = atoi(lookup_choice("QuoteMargin:19200",0,0));
  choices.leading      = atoi(lookup_choice("Leading:4"        ,0,0));
  choices.leftindent   = atoi(lookup_choice("LeftIndent:12800" ,0,0));
  choices.minfrmheight = atoi(lookup_choice("MinFrmHeight:48"  ,0,0));
  choices.minfrmwidth  = atoi(lookup_choice("MinFrmWidth:48"   ,0,0));
d839 2
a840 2
  if (!strcmp(lookup_choice("RefoWait:no",0,0),"yes")) choices.refowait = 1;
  if (!strcmp(lookup_choice("RefoHang:no",0,0),"yes")) choices.refohang = 1;
d842 1
a842 1
  choices.refotime = atoi(lookup_choice("RefoTime:500",0,0));
d848 14
a861 14
  if (!strcmp(lookup_choice("BrickWall:no"    ,0,0),"yes")) choices.brickwall     = 1;
  if (!strcmp(lookup_choice("DelayImage:yes"  ,0,0),"yes")) choices.delayimages   = 1;
  if (!strcmp(lookup_choice("DisplayBgs:yes"  ,0,0),"yes")) choices.displaybgs    = 1;
  if (!strcmp(lookup_choice("UnderlineLks:yes",0,0),"yes")) choices.underlinelks  = 1;
  if (!strcmp(lookup_choice("OverrideCols:no" ,0,0),"yes")) choices.overridecols  = 1;
  if (!strcmp(lookup_choice("ShowURLs:no"     ,0,0),"yes")) choices.show_urls     = 1;
  if (!strcmp(lookup_choice("FixedPtr:yes"    ,0,0),"yes")) choices.fixedptr      = 1;
  if (!strcmp(lookup_choice("HighlightLks:no" ,0,0),"yes")) choices.highlightlks  = 1;
  if (!strcmp(lookup_choice("KeyboardCtl:no"  ,0,0),"yes")) choices.keyboardctl   = 1;
  if (!strcmp(lookup_choice("ClearFirst:yes"  ,0,0),"yes")) choices.clearfirst    = 1;
  if (!strcmp(lookup_choice("KeepHighlight:no",0,0),"yes")) choices.keephighlight = 1;

  if (!strcmp(lookup_choice("UseProxy:no"     ,0,0),"yes")) choices.use_proxy     = 1;
  if (!strcmp(lookup_choice("FullScreen:no"   ,0,0),"yes")) choices.full_screen   = 1;
d881 5
a885 4
  if (!strcmp(lookup_choice("AnimDrift:no",   0,0),"yes"))    choices.anim_drift   = 1;
  if (!strcmp(lookup_choice("AnimDrift:no",   0,0),"always")) choices.anim_drift   = 2;
  if (!strcmp(lookup_choice("SolidResize:yes",0,0),"yes"))    choices.solid_resize = 1;
  if (!strcmp(lookup_choice("SolidResize:yes",0,0),"always")) choices.solid_resize = 2;
d1002 3
a1004 1
  close_choices_file();
d1122 1
d1247 20
@


1.7
log
@Updated Makefile to work better in folding text editors. More or less rewrote
Limits.h, and ensured consistent comment styling throughout all sources.
Fetch.c/h split to Fetch, FetchHTML and URLveneer. URLstat.c/h produced to
cope with this. OpenURL and Find sources created from bits in the Windows
source file that shouldn't have been there... These will get filled out
shortly. Note that a few functions in Fetch are due to be renamed and moved;
probably to Tokenutils.
@
text
@d659 3
a724 1
  if (!strcmp(lookup_choice("SystemFont:no"   ,0,0),"yes")) choices.systemfont    = 1;
@


1.6
log
@Checking in mostly because its Friday... Quite a few little bug fixes
(adding up to a greater whole), which include removal of the dastardly
'invalid image number' errors that trace builds would raise from time to
time. Frame highlights are now better controlled (releaseably so).
Generally, this build represents the first genuinely promising version
of the browser for quite some time, despite the known library problems
with comment handling etc.
@
text
@d17 3
a19 2
/* Purpose: Toolbox application framework for      */
/*          the browser                            */
d21 2
a22 1
/* History: 12-Nov-96: Created                     */
d61 1
d67 1
d164 1
a164 2
  int  module_version;
  char combuf[96];
d210 4
a213 1
  sprintf(combuf, "If \"<Browse$IssueDesktopCommand>\" = \"yes\" Then WimpTask Desktop\r\n");
d215 2
a216 2
  _swix(OS_CLI, /* Don't want to hear about any errors */
        _IN(0),
d218 2
a219 1
        combuf);
d247 1
a247 1
                                            windows_url_to_be_shown,
d250 1
a250 1
  /* Called when the icon bar is clicked upon with Select */
d254 1
a254 1
                                            windows_find_to_be_shown,
d257 1
a257 1
  /* Called before the print dialogue is shown */
a310 7
  /* Called whenever a save dialogue is about to open */

  show_error(event_register_toolbox_handler(-1,
                                            SaveAs_AboutToBeShown,
                                            save_fill_in,
                                            NULL));

d344 4
d412 5
a416 3
  show_error(event_register_toolbox_handler(-1, SaveAs_SaveToFile,    save_save_to_file,   NULL));
  show_error(event_register_toolbox_handler(-1, SaveAs_FillBuffer,    save_fill_buffer,    NULL));
  show_error(event_register_toolbox_handler(-1, SaveAs_SaveCompleted, save_save_completed, NULL));
d420 5
a424 1
  strncpy(program_name,lookup_token("_TaskName",1,0),MaxPrgLen);
d451 1
a451 1
    char v[8];
d458 1
a458 1
      sprintf(v,"a%d",animation_frames++);
d460 9
a468 1
    while (!(_swix(OS_SpriteOp,_INR(0,2),296,sprite_block,v)));
d481 1
a481 1
    char v[8];
d485 1
a485 1
      sprintf(v,"b%d",bullets++);
d487 9
a495 1
    while (!(_swix(OS_SpriteOp,_INR(0,2),296,sprite_block,v)));
d530 1
a530 1
  char              path[2048];
d535 3
a537 3
  /* Equivalent to getenv, but the RISC OS implementation evaluates  */
  /* the system variable as an expression which we don't want; hence */
  /* the direct use of the SWI.                                      */
a632 9
  /* Set the default history and hotlist save paths  */
  /* - note the use of strncpy to fill up to but not */
  /* including the last byte, which is forced to     */
  /* zero as a string terminator for the case where  */
  /* the looked up token exceeds the buffer size.    */

  StrNCpy0(choices.historyfile,lookup_choice("HistoryPath:<Browse$Dir>.User.History",0,0));
  StrNCpy0(choices.hotlistfile,lookup_choice("HotlistPath:<Browse$Dir>.User.Hotlist",0,0));

a642 5
  /* Set post-in and post-out directories for mail */

  StrNCpy0(choices.post_in,lookup_choice("PostIn:<None>",0,0));
  StrNCpy0(choices.post_out,lookup_choice("PostOut:<None>",0,0));

d755 5
a759 2
  if (!strcmp(lookup_choice("AnimDrift:no",0,0),"yes"))    choices.anim_drift = 1;
  if (!strcmp(lookup_choice("AnimDrift:no",0,0),"always")) choices.anim_drift = 2;
d770 1
a770 5
               "Height: %d\n"
               "History: %s\n"
               "Hotlist: %s\n"
               "Post-in: %s\n"
               "Post-out: %s\n",
d772 1
a772 5
                choices.height,
                choices.historyfile,
                choices.hotlistfile,
                choices.post_in,
                choices.post_out);
d849 1
a849 1
/* Called by registration through the atexit()   */
d992 1
d1035 1
a1035 1
      if (!strcmp(argv[argp],"-html"))
d1037 1
a1037 1
        char url[2048];
d1043 1
a1043 1
        StrNCpy0(url, argv[argp+1]);
d1046 1
a1046 1
        windows_create_browser(url, NULL, NULL, NULL);
d1056 1
a1056 1
      if (!strcmp(argv[argp],"-uri"))
d1058 1
a1058 1
        char url[2048];
d1064 1
a1064 1
        urlutils_load_uri_file(url, sizeof(url), argv[argp+1]);
d1066 1
a1066 1
        windows_create_browser(url, NULL, NULL, NULL);
d1082 1
a1082 1
        windows_create_browser(argv[argp+1], NULL, NULL, NULL);
d1104 2
d1108 1
a1108 1
                             time + fixed.poll_delay,
d1114 1
a1114 1
    if (tl & (1u<<13))  Printf("      malloccount: %d\n",malloccount);
a1121 2

/*************************************************/
@


1.5
log
@Fixed problems with unsourced images in tables and a couple of other bugs
here and there - nothing earth shattering... Just wanted to keep the CVS
source up to date.
@
text
@d509 4
d984 1
@


1.4
log
@Customer work complete, and this version just shipped. Had to comment out
the code in Main.c that sets the user agent string to fake Netscape, as the
persistent problems with forms in tables showed up much more on a modem
link - net result was that the customer's log in page didn't work. Not
faking Netscape gives an authorisation dialogue instead, allowing access
to the site even if not by the most elegant of methods.
@
text
@d485 1
a485 1
//  show_error(utils_set_http_agent());
d1099 1
a1099 1
    if (tl & (1u<<13))   Printf("      malloccount: %d\n",malloccount);
@


1.3
log
@In the middle of customer support work.
@
text
@d485 1
a485 1
  show_error(utils_set_http_agent());
@


1.2
log
@Supported client pull, through a generalised handing of the META tag.
@
text
@d483 4
d979 1
@


1.1
log
@First commit to CVS, at version 1.16 (Customer build).
@
text
@d69 1
a69 1
/* Debug build includes */
d72 4
d77 3
a79 1
  #include "Trace.h"
d81 3
a83 3
  #ifdef HEAPGRAPH
    #include "HeapGraph.HeapGraph.h"
  #endif
d85 4
a88 3
  // #define HierProf_PROFILE
  // #include "HierProf:HierProf.h"
  // #include "MemCheck:MemCheck.h"
d90 2
d534 3
a536 1
//  MemCheck_RegisterMiscBlock((void *) chb, sizeof(MessagesFD) + strlen(path) + 1);
d876 1
a876 1
  #ifdef HEAPGRAPH
d880 3
a882 1
//  HierProf_ProfileAllFunctions();
d884 8
a891 6
//  MemCheck_Init();
//  MemCheck_InterceptSCLStringFunctions();
//  MemCheck_RegisterArgs(argc, argv);
//  MemCheck_SetStoreMallocFunctions(1);
//  MemCheck_SetReportFrees(1);
//  MemCheck_SetAutoOutputBlocksInfo(0);
@
