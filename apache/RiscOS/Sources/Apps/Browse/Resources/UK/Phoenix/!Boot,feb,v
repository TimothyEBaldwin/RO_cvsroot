head	1.10;
access;
symbols
	Browse-2_16:1.10
	Browse-2_15:1.10
	Browse-2_14:1.10
	Browse-2_13:1.10
	Browse-2_12:1.10
	Browse-2_11:1.9
	Browse-2_10:1.9
	Browse-2_09:1.8
	ahodgkin_208_i4_2:1.8
	ahodgkin_208_i4:1.8
	ahodgkin_208_i3:1.8
	ahodgkin_208_i2:1.8
	ahodgkin_208_i1:1.8
	ahodgkin_207release:1.8
	ahodgkin_206release:1.7
	ahodgkin_205release:1.5
	ahodgkin_204release:1.5
	ahodgkin_202release:1.5
	ahodgkin_201release:1.5
	ahodgkin_200release:1.5
	ahodgkin_133beta:1.5
	ahodgkin_132beta:1.5
	ahodgkin_131beta:1.4
	ahodgkin_130beta:1.3
	ahodgkin_129:1.3
	ahodgkin_128beta:1.3
	ahodgkin_128alpha:1.3
	ahodgkin_127beta2:1.3
	ahodgkin_127beta:1.3
	ahodgkin_126beta:1.3
	ahodgkin_AW97patch:1.3
	ahodgkin_AW97:1.3;
locks; strict;
comment	@# @;


1.10
date	2006.03.13.22.06.18;	author ahodgkin;	state Exp;
branches;
next	1.9;

1.9
date	2005.04.26.17.15.24;	author ahodgkin;	state Exp;
branches;
next	1.8;

1.8
date	98.10.13.16.33.33;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	98.07.09.10.25.49;	author ahodgkin;	state Exp;
branches;
next	1.6;

1.6
date	98.07.02.11.10.47;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	98.02.06.13.54.24;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	98.01.31.10.54.47;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	97.10.09.10.51.44;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	97.09.02.15.45.40;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	97.07.24.09.14.47;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.10
log
@  PDF export, some major redraw structural changes, updated resources,
  new build system, extensive Makefile modifications, const/restrict
  additions, various bug fixes.
Detail:
  PDF export facility. SEE Docs.User FOR DETAILS (important!). Includes
  UI for headers/footers in Choices and option switch in Print dialogue
  box. Minor bug fixes include printing bullet points and, at long last,
  the "print dialogue box contents are not set up" problem. Redraw engine
  now based entirely on function pointers. Draw export routine replaces
  screen output functions with Draw output functions; PDF does similar.
  Coordinate scaling system in Scale.c/h to help. Makefile changes: Now
  supports a more consistent set of build variants and has minimal
  duplication of object and library lists. New build system: !Mk...
  script files removed, FrontEnd tool !MkBrowse replaces it. See !ReadMe
  (replacing old ReadMe) in root for details. Requires FrontEnd 1.29,
  HTMLLib 0.02 and ImageLib 0.04 (by CVS VersionNum). Updated resources:
  Some attempt to bring all variants to a working level, but not much
  testing. Only the Phoenix JavaScript capable builds (Unicode or normal)
  are fully up to date, though, including PDF UI additions. Many other
  minor tweaks, and extensive use of const and restrict qualifiers
  propagated through source code in response to their use in the new
  redraw system.
Admin:
  Draw and PDF export tested quite heavily. Appears to work well. Text
  file 'Docs.User' describes limitations. Note required new module and
  library versions listed above. Note that only JavaScript capable
  Phoenix resources are updated and only Phoenix was heavily tested.

Version 2.12. Tagged as 'Browse-2_12'
@
text
@| !Boot file for Phoenix
| (C) Tematic 2006
|
| Last modified: 02/03/2006

Set      Phoenix$Dir          <Obey$Dir>

SetMacro Phoenix$Path         Choices:WWW.Phoenix.,<Phoenix$Dir>.,<Wimp$ScrapDir>.WWW.Phoenix.,<Phoenix$Dir>.User.
SetMacro Phoenix$ChoicesFile  Phoenix:Choices
SetMacro Phoenix$ControlsFile Phoenix:Controls
SetMacro Phoenix$ChoicesSave  <Choices$Write>.WWW.Phoenix.Choices

| URI handler support

Set Alias$Open_URI_http   <Phoenix$Dir>.!Run
Set Alias$Open_URI_ftp    <Phoenix$Dir>.!Run
Set Alias$Open_URI_gopher <Phoenix$Dir>.!Run

| Support the ANT URL protocol

SetMacro Alias$URLOpen_HTTP   Run <Phoenix$Dir>.!Run -url %%*0
SetMacro Alias$URLOpen_Gopher Run <Phoenix$Dir>.!Run -url %%*0
SetMacro Alias$URLOpen_File   Run <Phoenix$Dir>.!Run -url %%*0
SetMacro Alias$URLOpen_FTP    Run <Phoenix$Dir>.!Run -url %%*0

| Routine actions...

Set Phoenix$Sprites "<Phoenix$Dir>.!Sprites"
If "<Boot$OSVersion>" >= "500" Then Set Phoenix$Sprites "<Phoenix$Dir>.5Sprites"
IconSprites <Phoenix$Sprites>

Set File$Type_FAF HTML
Set File$Type_F91 URI
Set File$Type_F81 JSScript
Set File$Type_695 GIF
Set File$Type_C85 JPEG
Set File$Type_B60 PNG

Set Alias$@@RunType_FAF /<Phoenix$Dir>.!Run -html %%*0
Set Alias$@@RunType_F91 /<Phoenix$Dir>.!Run -uri %%*0
@


1.9
log
@  Completion of v2.11 check-in of Phoenix (note that the application
  gets its reported version number and date from Messages, not the
  VersionNum file, which updates independently).
Detail:
  Various resources updated. New About stuff included. Modification to
  Hotlist.c to ask DragAnObject to *really* call it in USR mode; requires
  DragAnObject 0.09. New "RMTry" utility in Phoenix to help make finding
  up to date modules more friendly - works well in itself but slows down
  the loading time quite a bit; would be nice to find a better solution.
  This will do in the short term, as it's a definite improvement over
  the way the !Run files used to work.
Admin:
  Use of DragAnObject 0.09 fixes aborts when trying to drag items around
  in the hotlist.

Version 2.10. Tagged as 'Browse-2_10'
@
text
@d2 1
a2 1
| (C) Castle Technology Limited 2005
d4 1
a4 1
| Last modified: 26/04/2005
d28 3
a30 1
IconSprites <Phoenix$Dir>.!Sprites
@


1.8
log
@Tweaks to export rules in Makefile - ResJ source for JavaScript builds,
all of User dir exported, resources rule exports About as well as User.

Handles images with a width or height of 0 specified in the HTML.
Previously went for a default size placeholder and changes to image
sizes and/or redraw problems could occur before/after subsequent
reformatting (involved trivial changes to image_get_image_size and
image_redraw_area only).

Default parameter HRs now plot properly in rectangular pixel modes.

Choices code updated to cope with the minimum font size, JS support,
watchdog on/off and timeout, Navigator object option added generally
(act even *more* like Navigator), image GC after fetch, and image
GC unused image / free RAM constraints.

Code in JSnavigator.c updated to obey new "act more like Navigator"
option (see above). Currently declares itself as version 3.0.

Resources for all builds are up to date. All links in default hotlist
verified and corrected where necessary, with several new links added.

This is Release v2.07. Not tested very much, sorry; YMMV.
@
text
@d2 1
a2 1
| (C) Acorn Computers Ltd. 1994
d4 1
a4 1
| Last modified: 08/10/1998
@


1.7
log
@Check-in of Browse v2.06; using very small log file to try and avoid
CVS crashing. Some of the Resources may well be out of date due to CVS
locks being in place after earlier server-end core dumps, which I can't
remove myself.

I'll try and check one file in at the end with the full change log so
people know what's happened (it's reached about 16K...) - I'll make
that the TaskObey file '!All' in the top level directory. So for the
full log, look for the changes on this file.
@
text
@d4 1
a4 1
| Last modified: 08/07/1998
@


1.6
log
@By request, an intermediate 2.06 check-in. This is not a "proper" release
and will need some Makefile fiddling etc. to swap between JavaScript and
standard builds and so-forth. The Resources files are not all up to date;
only Phoenix and the testbed Browse are more or less current. Right now,
JavaScript doesn't work, SO COMPILE IT OUT. But to make a JavaScript build
for a larf -

 * Build JSLib and NSPRLib. Recommend you leave -DUSEMEMLIB in there (as
   used by default) so you can watch it leak into a dynamic area... :-)
   If you do this, you'll need to build MemLib too, of course. If you
   do NOT use MemLib, *undefine JS_USING_MEMLIB in Main.c*!
 * Run !MkClean
 * Add -DJAVASCRIPT to DFLAGS in MakeFile
 * Strip dynamic dependencies from MakeFile
 * Rebuild Phoenix or the Desktop build of Browse
 * In the exported copy, increase the !Run file WimpSlot value; either
   use the appropriate symbols table in 'syms' or use about 960K for
   non-debug, 4600K for debug builds.
 * If the exported copy has an About resource, edit the HTML file inside
   and uncomment the line about JavaScript.
 * Reverse most of the above to rebuild a non-JavaScript copy! :-O

I hope to have much of the above automated soon (either by a new target,
or preferably hackery with the MakeFile).

Here's the change list:

References to 'Phoenix' removed from Ursula build Res file Choices dialogue
help text (only a couple of them). Cookie value display made taller in the
Cookie Query dialogue (prompt field shrunk to accommodate this).

Yikes - ever since markers, "reformat page to fit paper" hasn't done
anything when printing; the reformatter reset the HTML page limits to
the window size at startup! Fixed. Using markers, you can now also reformat
from the top of the visible area and still reformat to fit the paper; the
print dialogue used to grey out the reformat option in this case. It still
does this when printing to the bottom of the visible area, though.

You can drag text files to form writables (single and multiple line,
but NOT password items (deliberately; it's trivial to add this but I
think it'd be a bad idea)). Normally, data is appended up to the limit
specified by the field (unlimited for multiple line items). Holding
down Ctrl replaces the current value entirely (still, again, limited
by maximum field length). The caret is moved from wherever it currently
is and placed at the end of the added data. Note that you *cannot* insert
in the middle of text by placing the caret and dropping.

Things can get distinctly sluggish when you start dragging many Ks of
text file into a multi-line writable, so the keyboard buffer is cleared
for any input code < 32, equal to 127 (backspace - this one is a little
less clear cut, but I think it's probably worthwhile) and anything
> 255. This way, when typing, you don't lose characters; but when moving
around, you don't find the cursor "running away" from you.

Multi-line writables (text areas) would redraw a vertical column taller,
or horizontal column wider than the element covers itself should the
user scroll enough in any one direction (e.g. Ctrl+Up or Ctrl+Down to
go to the top or end of the area). The code working out how much of
the area to redraw by the number of lines or columns moved didn't ensure
it kept within the area. Because an update rather than force redraw is
done, with background blending turned on text around the area would
"thicken". Now fixed.

Form menu entries have (at long last) a space appended to each one, so
the Wimp doesn't get confused and think something is a keyboard shortcut
when someone expresses "Formula 1" as (say) "F1"... Now fill in the menu
width entry from having read the actual VDU character width and spacing,
not that anyone uses the original RO 3.1 Wimp with Browse any more! (The
code existed elsewhere anyway, so it was trivial to add).

Ctrl+U in a multi-line writable clears the contents of the line the caret
is on, but doesn't delete the line itself. Ctrl+J now does this.

DDFLAGS doesn't set ALIAS_URLS - Customer build has this now.

Tiled images were being plotted in the wrong place in some modes (a '+4'
in the starting y coordinate calculations in the three filler / tile
functions should have been '+wimpt_dy()').

MessageTrans lookup buffer extended from 256 to 320 bytes (Limits_Message
in Limits.h), mostly to support Messages files alterations for the About
page.

Spelling error in URI handler menu for Desktop (also known as Ursula,
though this is now something of a misnomer) build corrected. There was
a missing 'l' in 'handler'). StartProxy setting in Choices was 'no' and
is now 'yes'.

Downloading files of sizes over about 20Mb would cause an overflow in
the % calculating code ("(fetched * 100) / file_size" as opposed to
"100 * (fetched / file_size)" with (float) and (int) casts as required.
Percentages now shown to 1dp; Mb displays to 2dp where the file size is
not known.

Download speed is now indicated in Small Fetch windows. Increased the
delay between progress indicator updates as part of this, and modified
Res files to cope (byte counter needs to be enlarged quite a lot). It
isn't shown in normal browser windows because the enlarged byte counter
looks daft in that context (normally, there's never enough information
to fill even half of it).

Adjust-click on an unlinked part of a client side image map could give an
invalid object ID error from accidentally using the return value of a
previous Toolbox call instead of the return result of a call to a fetcher
routine - because given it had a NULL pointer for the URL, there was no
such call made. Corrected in windows_create_browser() and
handle_link_clicks() won't try to do this in the first place anymore.
fetchpage_fetch_targetted() will also warn of such NULL pointers in
TRACE builds.

Submitting a GET form back to the same URL would lead to the query
string getting appended to the fetch URL over and over. form_build_data
now checks to see if there's already a query string in the submission
URL for GET methods and if so, strips it. fetchpage_new_add will do a
similar thing in the case of the additional data starting with '?'.

When following a link, if RefoKeep was 'yes', the page could sometimes
jump to a pre-stored scroll position; it was down to the resize routines
remembering it, but if windows_check_reformat() or windows_remember_size()
didn't actually do a reformat the position was not forgotten. It is now,
so this jumping should no longer occur.

Single character leafnames (e.g. "a.class") used to be reported just as
"Index" in a save dialogue for the object. Fixed.

<P> elements could fail to work as expected in some circumstances. For
example, there would be no gap above '<p> <b>...' - the <b> text doesn't
have the <p> attached, the tag before it does. However, the white space
on this tag gets stripped so it ends up with a NULL text field. This
means that paragraph space is allocated but the text height for the line
thus far is zero. This has been fixed through special case code in
reformat_check_height.

browser_base_url() function added, which through browser_base_callback
can supply a base URL for the current document.

In-page references (URLs with '#something' in them) would fail if the
page contained a BASE tag which pointed elsewhere (that is, the page
would be fetched from its base URL and references would work thereafter;
not very useful for developing sites on your local hard drive). Fixed.
Fixed also the problem where in-page references would fail once after
a forced reload.

Several ultra-stupid bugs in image cross referencing code within
image_update_image fixed:

 - No longer redraws *every* page with the same background when
   *any* of those backgrounds are updated; just if the page with
   the actual image data attached is updated. Doh!

 - Similarly, no longer updates every copy of an image when asked
   to update any of them, only when the one holding the actual image
   data is updated.

 - In the above cases, image array a scanning is avoided wherever
   possible now, whereas it used to happen for any update.

Animated masked GIFs will no longer flicker briefly when they are first
viewed on a page.

Hacky but useful optimisation in Images.c. Local compilation option
'FAST_TOKEN_REFERENCE' controls whether or not the flags word of each
HStream associated with an image_info struct is used in part to store
the image's array index. If so, there's no array scanning to do - this
signficantly speeds up cross referenced image handling. It's still
rather undertested "but it seems to work". The number of bits used for
the array index is controlled by FAST_TOKEN_REFERENCE_SHIFT, and is
currently 20, giving around a 1 million image limit on the browser
and leaving 12 bits for genuine flags (only 3 currently used).

If an error occurred when Message_PlugIn_Opening was received, Browse
would exit early with the message - before it removed the plug-in from
the queue, thus stopping other launches. The error is now reported and
then the item is still removed, preventing this problem.

The BASEHREF entry in the parameters file used for plug-in launching
will now give the contents of any BASE tag in the document before
looking at the display URL, then the fetch URL.

When a new page is visited or a browser window closed, any in progress
fetches for plug-ins are abandoned. They weren't before, which caused
all sorts of problems later on. In addition, any pending plug-in items
in the queue may not have been correctly flushed (the first item may
have been left behind), which can cause mis-firing of the plug-in
engine as it picks up outdated queue items and attemps to launch them.
This has also been fixed.

Fixed problem with asynchronous delivery and reception of the Stream_New
plug-in protocol messages, which previously would be incorrectly handled -
Browse assumed that, as with plug-in launch, only one fetch would be running
at a time (or the message passing between plug-in and fetch window would
occur synchronously). This is not the case, and a variety of problems could
be seen if the system broke down. The most obvious symptom is in Scrap,
where Browse used to leave behind "BTFxxxxx" files on quit.

Intermittent "Invalid object ID" errors cured; the Find dialogue box
handler wasn't clearing its remembered ID, and since Find is a shared
object, that object could get deleted without the Find code
realising.

Corrected mis-spelling of "Parameters" n comment block at top of
about_copy_info_file(), which fouled up the documentation auto-generation.

BuildSHelp will recognise functions indented by 2 spaces, assume they're
indented because of a wrapping #ifdef, and put 'Conditionally compiled.'
under the name of any such functions. It no longer outputs broken manuals
if no functions are found in a source file. More robust to odd input due
to extra EOF checking.

New utility BuildHTML, to generate HTML pages in the same manner as
BuildSHelp, created from BuildSHelp. This was done to support Ferrotec
who'd like StrongHelp-like documentation but don't want to be tied to
Acorn machines (and haven't got any at the time of writing anyway!).
HTML was agreed as a good, easy format to go for.

Have begun to implement JavaScript support. Updated !Boot and !Run[D]
files to define File$Type_F81 and Alias$@@RunType_F81 (0xf81 is a
JavaScript script file, 'JSScript', MIME type application/x-javascript,
common filename extension '.js'.). !Sprites[22] files have the relevant
file icons added. Messages files extended with various tokens for
miscellaneous error messages, error box buttons etc. Created a Browse
About: page section based on the JavaScript filetype - we at last
credit the use of the JPEG group software, LibPNG, etc.
@
text
@d4 1
a4 1
| Last modified: 04/02/1998
a12 2
SetMacro Plugin$About_F81     Phoenix:About

d19 7
a38 1
Set Alias$@@RunType_F81 /<Browse$Dir>.!Run -jss %%*0
@


1.5
log
@*Don't* try to load FilterManager 0.18 in !Run[D] files. Requires
WindowManager 3.98. Sets URI handler environment variables for
http, ftp and gopher.

Fixed 'doesn't reformat for unsized images' bug - only happens when the
deferred reformatter is enabled, hadn't remembered to check this in my
debug build where this is turned off. Oops.

Caret position in forms could get left behind despite attempts to rectify
this in v1.31 - now fixed (and faster, fortunately).

Hourglass + percentage displayed for History and Image History when
loading - it can take a while for very big histories, though in
practice you only see the visit history loading (has to do a lot
more work, and is thus quite a bit slower than the image history).

POST forms worked when targetted to frames, but were broken when
not targetted! (Forms data inherited from one browser to the same
browser; ended up freeing the flex block...). Fixed.

Now support 303 response code (redirect to GET). Treated as 301, i.e.
not support if STRICT_PARSER is defined, otherwise drops through to
the 302 handling code.

Pointer shouldn't get stuck in odd shapes when going to a new page now;
it gets reset to a standard shape every time the null handler that
checks the position is called, though (whether or not the handler thinks
the pointer is over a different token, if that token is NULL, it sets
the standard shape). A possible work around would be for a browser to
remember the pointer shape too; that's for the future, though.

Early stage table formatting functions could blow themselves apart if
tables_count_table decided there were no rows, columns or both. A
net table size of zero cells is now dealt with; slow, partial table
fetches in multiple windows with image loading turned on will now
*hopefully* be stable, where v1.31 would have bombed out repeatedly.

A nested frameset within one document will now inherit the border
width (frame spacing) and border colour of its parent. This is done
by copying the maxlen and indent fields of the parent token over
the child, and note it's done in the browser (fetch_preprocess_token),
not HTMLLib.

Border colour on a FRAMESET now used, with the first colour on any
FRAME within it overriding, as in NN 4 and MSIE 4.

<LI> bullets really do stick to the text next to them now (I'd done
that in an experimental piece of code and forgotten to merge it back
before the last check-in).

Browse$HotlistURL/URIFile and Browse$HomeURL/URIFile now work from
_TaskName in the Messages file, and are thus of the generic form
<App>$HotlistURL etc. - Docs.Notes and Docs.User updated appropriately.

Event 0x11d00 through to 0x11d7f will make the browser look up Controls
file entries 'JumpTo00' through to 'JumpTo7f' and read a URL from them.
This will be fetched in the ancestor window of the source of the event,
or a new window if such an ancestor can't be found [for Daytona demo].

NB: Nasty frames-related crash at http://www.teledanmark.dk/menu/start.htm
is *not* fixed in this source. NOBR is not supported.
@
text
@d13 2
d27 1
d34 1
@


1.4
log
@Check for WindowManager 3.97 and ensure Unicode$Path is set in all
!Run[D] files, don't set the Alias$@@PrintType_FF4 variable, and updated
Customer build ROM obey file variants. Various other changes to
the Run files for new module versions, updated paths to support
new positions of choices, hotlist and histories (see later), etc.

!Sprites[22] files hold small !app icons for some variants, and
an ic_browse sprite. Some variants now have a Sprites and Sprites22
file instead of just Sprites, with the former containing various
mode 12 or 15 specific sprites.

Text files dragged to the URL writable are treated as ANT URL files. This
relies on URLBarWrit (Toolbars.h) being a unique ID, which it should be,
but beware of the Hotlist and Choices numberspaces...

INPUT TYPE=BUTTON supported. Form items without a FORM tag are now shown
(as MSIE 4, but not NN 4).

'*', '-', '@@', '_' and '.' are not escaped when submitting forms now. The
Web interface to the IMDb now works.

INPUT TYPE=HIDDEN items will not affect the line height anymore - so
http://www.hotmail.com/ now has correctly aligned writable icons, for
example. Similarly, TAG_FORM and TAG_FORM_END items could push up
line height and don't anymore.

HRs with a specified pixel width will now influence the size of a table
cell (they didn't before).

BRs now checked by tagno field when the browser needs to know something
was an actual BR tag rather than just a line break signal, and by the
style bit entry when only the indication of a line break is required.

Table widths of 0 or 0% are ignored.

Trace.c updated to report height and background fields in a table_stream.

fm_putsl() writes a terminator into the string; the Forms.c routines were
calling this for displaying INPUT TYPE=PASSWORD fields using the FE_PassCode
literal string (a line of stars). This write into a read only data area
would make the debugger fault the access. A local char array is now used
instead, to get round this (note the use of var[]=literal rather than
var[sizeof(literal)]; strcpy(var, literal) due to some weird compiler bug
that copies the wrong thing into 'var' under some (undefined...)
circumstances).

Text areas don't scroll back to the top line when clicked in anymore;
single line writables don't scroll back to the left either. When
reentering a text area from 'above', the caret appears at the top line
rather than 'somewhere further down'...

ARROWS_MOVE_OUT compile time option at the top of Forms.c defines whether
you must press Tab/Shift+Tab to move between writable fields in forms or
if up/down will drop out of them, though if keyboard control is on this
is enforced (or you get trapped inside the form!).

urlutils_filetype_from_url now uses MimeMap module.

If fetcher is told a page is text, it'll check for a filename extension and
may choose to use this instead (e.g. it may find it's HTML instead). This
is to try and get around duff servers... (e.g. http://www.batalarms.co.uk/).

Save dialogues shouldn't flicker when options that don't change the
filetype are selected (before, the draggable sprite was always reset for
each selection). Noticed the erroneous setting of a static variable in
SaveFile.c by a call to this by SaveObject.c, and so added a flag to
savefile_set_filetype to deal with this - would have been possible to get
the wrong filetype sent to applications or at best the wrong filetype
sprite in the dialogue without that.

The caret shouldn't jump out of a form back to the URL writable if the page
reformats now.

Table background colours now supported (as in the colour you see in the
border space if the cellspacing is large enough; this is as in MSIE, not
as in Navigator). Drawfile output routines updated accordingly.

Corrected erroneous use of wimpt_dx() / wimpt_dy() in a couple of places
in Images.c, which meant that (say) 1x1 images didn't work correctly in
medium resolution display modes.

Now have support for save as text (component ID and event 0x12) and save
as Draw (component ID and event 0x13) buttons. Dubious conditions for
greying and ungreying the print, save source and view source buttons and
menu options sorted out as part of implementing the same for the two new
buttons; added greying out of their associated menu items in passing.

Turned kerning on in draw file objects (does mean a rather heinous
increase in file size, but this is the only way to ensure the draw file
matches the visible page).

Comments before functions in SaveDraw.c are now complete and up to date.

Image and visit histories now generate a crude hash number to speed up
searching for items. It does give a speed increase, though it's a
disappointingly small one.

Issue of left/right margins and cellpaddings sorted out. Now have
redraw_left/right_margin for finding out the basic gap you must leave.
redraw_left/right_gap then gives any extra indentation for LI, BLOCKQUOTE
or whatever. The last two can be subtracted from the display width to
get an available page width for any section of text. Note that
redraw_left_gap replaces redraw_margin. The redraw_start_x function
uses the above to work out where a line's left hand edge should be,
taking account of left/right/centre alignment. HRs have been fixed now
(they were quite broken in v1.30, I think) based on this new model and
the behaviour of MSIE/NN 4.

Fixed width of cells with no contents - cell padding values wouldn't
have worked properly as the reformatter returns 0 rather than the left
hand margin size if given no stream.

Removed FM_Absolute flags for Font_Paint (spotted by DBrown) - sets bit
2, which is reserved...?

IMG width and height in % terms now works correctly; a % of available
width (after margins and indents) or height on the main page or for
a table cell, if the image lies in one. Because of the chicken-and-egg
problem with the latter, the cell must specify a width and/or height
for things to work properly. If this is not done, you'll usually end
up with a 1:1 scaled image (as in Navigator 4, rather than ending up
with no image or even no cell (!), as in MSIE 4).

HEIGHT attribute on a TABLE tag is supported, but only in a crude
fashion; the extra height (if there is any) is distributed over the
rows in a linear fashion. This is probably all you have to do in
practice, but I haven't checked. To maintain a notion of min/max
height as well as width would of course require a great deal more
work...

If using client pull to reload a page with a fragment ('...#name')
specified, then the reload wouldn't work on the same page; it'd just
jump to the fragment position. This won't happen if b->reloading is
set now (so works in conjunction with client pull on the same page
forcing a non-cached fetch). Similarly, if POSTing to such a URL,
a fetch will proceed (both these fixes done originally for
http://jupiter.beseen.com/chat/rooms/g/1678/).

browser_inherit split to browser_inherit and browser_inherit_post_data;
the code for the latter didn't clear any post_data in the child before
copying from the parent either, and could cause flex errors (now fixed).

Res file for Ursula ('Desktop' Browse) build tweaked - bits in the
font choices dialogue renamed, and button bar rearranged to hold the
new Save As Draw button. Other builds have had Save As Draw and
Save As Text buttons added, or not, depending upon availability of
suitable sprites, required UI simplicity, etc.

Now have:

  Browse$ChoicesFile
  Browse$ControlsFile
  Browse$ChoicesSave
  Browse$ControlsSave

(the last two are new) for loading and saving of the Choices or Controls
files. If unset, <App$Dir>.Choices or <App$Dir>.Controls will be set.
E.g., you could set Browse$ChoicesFile to be:

  <App$Dir>.Choices,Choices:WWW.(app).Choices

for loading and

  <Choices$Write>.WWW.(app).Choices

for saving. (The browser never saves Controls at the moment, so the
relevant variable above isn't effectively implemented, but could be
in future). Similarly, to support asymetric loading/saving of the Hotlist,
there are HotlistSave, HistorySave and ImageHistorySave entries in Choices
to complement HotlistPath, HistoryPath and ImageHistoryPath (which are used
for loading). save_save_choices will create directories as needed to obtain
the given path (and has also been fixed in various areas that hadn't been
tested out until now; e.g. zero termination of the AppName$ChoicesFile
variable expansion...). !Run[D] files updated appropriately.

Table widthing code rewritten. Slower, but a lot better on the whole.
Still has some problems - still needs a final 'make sure nothing is
below minimum width' scan, which it should be possible to do without.
No time to fix this at present!

The reformatter will now 'glue together' an LI token followed by any
non-LI token; so a bullet point followed by an item should not be able to
have a line break inserted after the bullet because of very tight width
constraints (it could before - yuk...).

'about:' brings up a page about the browser and any Plug-Ins, as with
Navigator (for example).

URI files support titles, as per spec. version 8. Saving a current
location to the Hotlist will thus give a sensible title now (unless
you're in a frame, so there's no title to get...). Of course, v1.00
files without a title still work.

Note that NOBR is *not* supported in this build and this combined with
the new table widther may cause problems on some sites (e.g. Microsoft's
home page!).
@
text
@d4 1
a4 1
| Last modified: 30/01/1998
d12 6
@


1.3
log
@!Run[D] files updated for new fetchers and GopherFetcher; protocols list
in Controls updated for Gopher. Debug builds now require 2760K rather than
2560K. Font$... variables set if not already, in anticipation of font
Choices work.

Additional bits in Choices section of Res file tidied and some name
changes (e.g. Netscape -> Navigator(TM)). Frames support option added
to Choices.

Grouped 'support_frames' under the Fetch Controls section and added
support_object in Global.h; appropriate entries placed in the Choices
files, and are read at startup. At present, though, only the frames
support flag is implemented.

For some reason, Menu was the button to use on history popups if you
wanted to show URLs instead of descriptions (or vice versa, depending
on Choices settings). Now, Select and Menu will show the Choices
defined setting, and Adjust will show the opposite.

History menus are built backwards, so local histories have the most
recently visited pages at the top. Global history has still no real
order to it, but this may be arranged later.

Customer name changed to Customer by request.

Customer browser now gets its own resources (SYSTEM=Customer), but
otherwise is unchanged, with the Ursula build now giving the
'spinning acorn' with a Bookworm-style toolbar. This is used for the
Desktop !Browse build.

!Sprites[22] files updated to include GIF, JPEG and PNG sprites;
!Run[D] files and !Boot files set appropriate File$Type_xxx variables.
Sprites in all sprites files have been checked for unnecessary palettes,
which have been removed where present.
@
text
@d1 4
a4 2
Set Phoenix$Dir <Obey$Dir>
Set Phoenix$Path <Phoenix$Dir>.
d6 1
a6 1
| Get round the 'problematic' last stage of the printer protocol
d8 4
a11 1
Set Alias$@@PrintType_FF4 "Copy %%0 Printer: ~A ~C ~D F ~L ~N ~P ~Q ~R ~S ~T ~V"
@


1.2
log
@This version is being checked in because the Hotlist manager in the test
build provokes a Wimp bug. All the variant resource files are out of sync
and there are several outstanding bugs in the main code, so I'd personally
avoid this build like the plague unless you're mad enough to want to
examine the Wimp problem ;-)
@
text
@d12 1
d14 3
a16 1
Set File$Type_FAF HTML
@


1.1
log
@Added various TaskObey files to make different browser variants (the Makefile
has been updated to support this). At present, TARGET must be set for the
Make file to work (some oddity in AMU causing problems here). Added
Multiuser.h to cope with a non-SINGLE_USER build for Customer.
@
text
@d1 2
a2 2
Set Browse$Dir <Obey$Dir>
Set Browse$Path <Browse$Dir>.
d10 1
a10 1
IconSprites <Browse$Dir>.!Sprites
d15 2
a16 2
Set Alias$@@RunType_FAF /<Browse$Dir>.!Run -html %%*0
Set Alias$@@RunType_F91 /<Browse$Dir>.!Run -uri %%*0
@
