head	4.1;
branch	4.1.1;
access;
symbols
	Draw-1_30:4.1.1.1
	Draw-1_29:4.1.1.1
	Draw-1_28:4.1.1.1
	Draw-1_27:4.1.1.1
	Draw-1_26:4.1.1.1
	Draw-1_25:4.1.1.1
	Draw-1_24:4.1.1.1
	Draw-1_23:4.1.1.1
	Draw-1_22:4.1.1.1
	Draw-1_21:4.1.1.1
	Draw-1_20:4.1.1.1
	Draw-1_19:4.1.1.1
	Draw-1_18:4.1.1.1
	Draw-1_17:4.1.1.1
	Draw-1_16:4.1.1.1
	Draw-1_15:4.1.1.1
	Draw-1_14:4.1.1.1
	RO_5_07:4.1.1.1
	Draw-1_13:4.1.1.1
	Draw-1_12:4.1.1.1
	Draw-1_11:4.1.1.1
	Ursula_merge:4.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.1.1
	Ursula_RiscPC:4.1.1.1.0.6
	rthornb_UrsulaBuild-19Aug1998:4.1.1.1
	UrsulaBuild_FinalSoftload:4.1.1.1
	rthornb_UrsulaBuild-12Aug1998:4.1.1.1
	aglover_UrsulaBuild-05Aug1998:4.1.1.1
	rthornb_UrsulaBuild-29Jul1998:4.1.1.1
	rthornb_UrsulaBuild-22Jul1998:4.1.1.1
	rthornb_UrsulaBuild-15Jul1998:4.1.1.1
	rthornb_UrsulaBuild-07Jul1998:4.1.1.1
	rthornb_UrsulaBuild-17Jun1998:4.1.1.1
	rthornb_UrsulaBuild-10Jun1998:4.1.1.1
	rthornb_UrsulaBuild-03Jun1998:4.1.1.1
	rthornb_UrsulaBuild-27May1998:4.1.1.1
	rthornb_UrsulaBuild-21May1998:4.1.1.1
	rthornb_UrsulaBuild_01May1998:4.1.1.1
	Daytona:4.1.1.1.0.4
	Daytona_bp:4.1.1.1
	Ursula:4.1.1.1.0.2
	Ursula_bp:4.1.1.1
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.19.10;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.19.10;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.24.00;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -> h.DrawObject
 *
 * Object handling header for Draw
 *
 * Author:  Richard Manby, David Elworthy
 * Version: 0.11
 * History: 0.10 - 19 June 1989 - created from h.draw 0.10 (12 June 1989)
 *          0.11 - 23 June 1989 - name changes, functions moved
 *
 */

/*--- General object handling ---*/
os_error *draw_obj_checkspace(diagrec *diag, int needed);
void      draw_obj_fileheader(diagrec *diag);
void      draw_obj_start(diagrec *diag, draw_tagtyp);

#if (0)
/* Not used anywhere */
extern void draw_obj_addcoord(diagrec *diag, coord, coord);
#endif

extern void draw_obj_fin(diagrec *diag);
extern void draw_obj_finish(diagrec *diag);
extern void draw_obj_complete(diagrec *diag);
extern void draw_obj_appendghost(diagrec *diag);
extern void draw_obj_flush(diagrec *diag);

extern int  draw_obj_next(diagrec *diag, int offset);

/*--- General box manipulation ---*/
extern void draw_obj_unify(draw_bboxtyp *to, draw_bboxtyp *from);

/*--- Database manipulation ---*/
extern os_error *draw_obj_makespace(diagrec *diag, int atoff, int size);
extern os_error *draw_obj_insert(diagrec *diag, int atoff, int size);
extern void      draw_obj_losespace(diagrec *diag, int atoff, int size);
extern void      draw_obj_delete(diagrec *diag, int atoff, int size);
extern void      draw_obj_delete_object(diagrec *diag);
extern void      draw_obj_deleteObject(diagrec *diag, int oldOffset, int newOffset);

/*--- Path manipulation ---*/
extern void draw_obj_addpath_move(diagrec *diag, draw_objcoord *pt);
extern void draw_obj_addpath_line(diagrec *diag, draw_objcoord *pt);
extern void draw_obj_addpath_curve(diagrec *diag, draw_objcoord *pt1,
                                           draw_objcoord *pt2,
                                           draw_objcoord *pt3);
extern void                 draw_obj_addpath_close(diagrec *diag);
extern void                 draw_obj_addpath_term(diagrec *diag);
extern drawmod_pathelemptr  draw_obj_pathstart(draw_objptr hdrptr);
extern draw_dashstr        *draw_obj_dashstart(draw_objptr hdrptr);

/*--- Text manipulation ---*/
extern void draw_obj_addstring(diagrec *diag, char *from);
extern void draw_obj_addtext_char(diagrec *diag, char ch);
extern int  draw_obj_findtext_len(diagrec *diag);
extern void draw_obj_addtext_term(diagrec *diag);
extern void draw_obj_deltext_char(diagrec *diag);

/*--- Object attributes ---*/
extern void draw_obj_settext_font(diagrec *diag, int fref, int fsizex, int fsizey);
extern void draw_obj_settext_colour(diagrec *diag, draw_coltyp textcolour,
                                            draw_coltyp background);
extern void draw_obj_setcoord(diagrec *diag, draw_objcoord *pt);
extern void draw_obj_readcoord(diagrec *diag, draw_objcoord *blk);
extern void draw_obj_addfontentry(diagrec *diag, int ref, char *name);
extern void draw_obj_setpath_colours(diagrec *diag, draw_coltyp    fillcolour,
                                             draw_coltyp    linecolour,
                                             draw_pathwidth linewidth);
extern void draw_obj_setpath_style(diagrec *diag, draw_jointyp join,
                                           draw_captyp  startcap,
                                           draw_captyp  endcap,
                                           draw_windtyp windrule,
                                           int          tricapwid,
                                           int          tricaphei);
extern os_error *draw_obj_setpath_dashpattern(diagrec *diag, draw_dashstr *pattern);

/*--- Bounding box calculation ---*/
extern void draw_obj_bound_minmax(int x, int y, draw_bboxtyp *boundp);
extern void draw_obj_bound_minmax2(draw_objptr hdrptr, draw_bboxtyp *boundp);
extern BOOL draw_obj_findTextBox(draw_objptr hdrptr, draw_bboxtyp *box);
extern BOOL draw_obj_bound_object(draw_objptr hdrptr);
extern void draw_obj_bound_objects(diagrec *diag, int from, int to,draw_bboxtyp *box);
extern void draw_obj_bound_selection(draw_bboxtyp *boundp);
extern void draw_obj_bound_all(diagrec *diag, draw_bboxtyp *bboxp);
extern void draw_obj_bound_selection_width (int *widthp);

extern void draw_obj_get_box(draw_bboxtyp *box, draw_bboxtyp *bbox);

/*--- Object location ---*/
extern int  draw_obj_previous_object(diagrec *diag, int, draw_objcoord *pt);
extern void draw_obj_path_move(diagrec *diag, draw_objcoord *pt);
extern int  draw_obj_over_object(diagrec *diag, draw_objcoord *pt, region*, int*);

/*--- Metagraphic handling ---*/
extern void      draw_obj_move_construction(diagrec *diag, draw_objcoord *pt);
extern os_error *draw_obj_drop_construction(diagrec *diag);

/*--- Arcs ---*/
extern void draw_obj_addpath_centred_circle(diagrec *, draw_objcoord, int, int);

extern BOOL draw_obj_rotatable (draw_objptr);
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
