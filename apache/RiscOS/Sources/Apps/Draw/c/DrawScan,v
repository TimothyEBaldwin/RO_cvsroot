head	4.4;
access;
symbols
	Draw-1_30:4.4
	Draw-1_29:4.4
	Draw-1_28:4.4
	Draw-1_27:4.4
	Draw-1_26:4.4
	Draw-1_25:4.4
	Draw-1_24:4.4
	Draw-1_23:4.4
	Draw-1_22:4.4
	Draw-1_21:4.4
	Draw-1_20:4.4
	Draw-1_19:4.4
	Draw-1_18:4.4
	Draw-1_17:4.4
	Draw-1_16:4.4
	Draw-1_15:4.2
	Draw-1_14:4.1.1.1
	RO_5_07:4.1.1.1
	Draw-1_13:4.1.1.1
	Draw-1_12:4.1.1.1
	Draw-1_11:4.1.1.1
	Ursula_merge:4.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.1.1
	Ursula_RiscPC:4.1.1.1.0.6
	rthornb_UrsulaBuild-19Aug1998:4.1.1.1
	UrsulaBuild_FinalSoftload:4.1.1.1
	rthornb_UrsulaBuild-12Aug1998:4.1.1.1
	aglover_UrsulaBuild-05Aug1998:4.1.1.1
	rthornb_UrsulaBuild-29Jul1998:4.1.1.1
	rthornb_UrsulaBuild-22Jul1998:4.1.1.1
	rthornb_UrsulaBuild-15Jul1998:4.1.1.1
	rthornb_UrsulaBuild-07Jul1998:4.1.1.1
	rthornb_UrsulaBuild-17Jun1998:4.1.1.1
	rthornb_UrsulaBuild-10Jun1998:4.1.1.1
	rthornb_UrsulaBuild-03Jun1998:4.1.1.1
	rthornb_UrsulaBuild-27May1998:4.1.1.1
	rthornb_UrsulaBuild-21May1998:4.1.1.1
	rthornb_UrsulaBuild_01May1998:4.1.1.1
	Daytona:4.1.1.1.0.4
	Daytona_bp:4.1.1.1
	Ursula:4.1.1.1.0.2
	Ursula_bp:4.1.1.1
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2010.12.06.23.12.22;	author rsprowson;	state Exp;
branches;
next	4.3;

4.3
date	2010.12.06.23.03.13;	author rsprowson;	state Exp;
branches;
next	4.2;

4.2
date	2009.05.29.02.12.06;	author pnaulls;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.19.03;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1;
next	;

4.1.1.1
date	96.11.05.09.19.03;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.23.03;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Change to use shared JPEG library code.
Fix some easy warnings.
Swap to use centralised AWK script to get the version number into the messages.
Removed one use of _swi.
Refer to FileType_ using the filetypes header file.
Fixed linkmap target to link with the libraries.
Rationalise headers a bit.

Version 1.16. Tagged as 'Draw-1_16'
@
text
@/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -> c.DrawScan
 *
 * Object traversal
 *
 * Author:  Richard Manby, David Elworthy
 * Version: 0.13
 * History: 0.10 - 12 June 1989 - header added. Old code weeded.
 *          0.11 - 11 July 1989 - extra handle added
 *          0.12 - 27 July 1989 - undo added
 *          0.13 - 11 Aug  1989 - undo parameter for redraw
 *
 * Traverse functions are re-entrant.
 *
 * Traverse functions which cause a redraw put undo information for the old
 * and new boxes of the object. This is not needed in all cases, but never does
 * any harm.
 *
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "os.h"
#include "drawmod.h"
#include "jpeg.h"
#include "dbox.h"
#include "font.h"

#include "ftrace.h"
#include "guard.h"

#include "Draw.h"
#include "DrawDispl.h"
#include "DrawObject.h"
#include "DrawScan.h"
#include "DrawSelect.h"
#include "DrawUndo.h"

#if TRACE
static char *Function_Name (void *fn)

   /*The name of a function.*/

{  char *name = (char *) fn - 4;

   static char Fn [80 + 1];

   if (name [3] == 0xFF)
      strcpy (Fn, name - *name);
   else
      sprintf (Fn, "(unnamed at 0x%X)", (unsigned) fn);

   return Fn;
}
#endif

/* Find the start and end objects */
static BOOL find_objects(char *start, char *end,
                         draw_objptr *hdrptr, draw_objptr *endptr)

{ ftracef0 ("find_objects\n");

  if (start == NULL)
  { if (end == NULL)
    { *hdrptr = draw_select_find(0);
      if (hdrptr->bytep == NULL) return FALSE;
      endptr->bytep = NULL;
      return TRUE;
    }
    else
    { /* Single object */
      hdrptr->bytep = end;
      endptr->bytep = end + hdrptr->objhdrp->size;
    }
  }
  else
  { if (end == NULL)
    { /* Group */
      draw_objptr startobj;
      startobj.bytep = start;

      hdrptr->bytep = start + sizeof(draw_groustr);
      endptr->bytep = start + startobj.objhdrp->size;
    }
    else /* Range */
    { hdrptr->bytep = start;
      endptr->bytep = end;
    }
  }

  return (hdrptr->bytep < endptr->bytep);
}

/* Fetch the next object.
   *index is the last selection index, or -1.
   *hdrptr is the last object if *index == -1, and is set to the result.
   endptr is the limit.
   -> TRUE if any more
*/

static BOOL next_object(int *index, draw_objptr *hdrptr, draw_objptr endptr)
{ ftracef0 ("next_object\n");

  if (*index != -1)
  { /* Selection */
    *index += 1;
    *hdrptr = draw_select_find(*index);
    return (hdrptr->bytep != NULL);
  }
  else
  { hdrptr->bytep += hdrptr->objhdrp->size;

    return (hdrptr->bytep < endptr.bytep);
  }
}

/* Traverse all objects in range */
void draw_scan_traverse(char *start, char *end,
                        despatch_tab arrayp, void *handle)
{ int i;
  draw_objptr hdrptr, endptr;

  ftracef0 ("draw_scan_traverse\n");

  /* Set index for selection case */
  i = (start == NULL && end == NULL) ? 0 : -1;

  /* Set initial objects */
  if (!find_objects(start, end, &hdrptr, &endptr)) return;

  /* Do the scan */
  do draw_scan_traverse_object(hdrptr, arrayp, handle);
  while (next_object(&i, &hdrptr, endptr));
}

/* Put undo and redraw after traversing */
static void put_redraw(diagrec *diag, draw_bboxtyp *bound, BOOL undo)
{ ftracef0 ("put_redraw\n");

  if (diag)
  { if (undo)
    { draw_modified(diag);
      draw_undo_put(diag, draw_undo__redraw, (int)bound, 0);
    }
    else
      draw_modified_no_undo(diag);

    draw_displ_redrawarea(diag, bound);
  }
}

/* Traverse all objects, re-calculate their bounding boxes */
/* Force a redraw of affected area of diagram              */
void draw_scan_traverse_withredraw(char *start, char *end, diagrec *diag,
    despatch_tab arrayp, void *handle,BOOL undo)
{ int i = 0;
  draw_bboxtyp bound = draw_big_box;
  draw_objptr  hdrptr, endptr;

  ftracef0 ("draw_scan_traverse_withredraw\n");

  /* Set index for selection case */
  i = (start == NULL && end == NULL) ? 0 : -1;

  /* Set initial objects */
  if (!find_objects(start, end, &hdrptr, &endptr)) return;

  /* Relies on all objects being graphic (ie have bboxes) */
  do
  { draw_obj_bound_minmax2(hdrptr, &bound);

    draw_scan_traverse_object(hdrptr, arrayp, handle);

    draw_obj_bound_object(hdrptr);
    draw_obj_bound_minmax2(hdrptr, &bound);
  } while (next_object(&i, &hdrptr, endptr));

  put_redraw(diag, &bound, undo);
}

/* As above, but redraws the before and after boxes separately */
void draw_scan_traverse_splitredraw (char *start, char *end, diagrec *diag,
    despatch_tab arrayp, void *handle, BOOL undo)

{ int i = 0;
  draw_bboxtyp before = draw_big_box;
  draw_bboxtyp after  = draw_big_box;
  draw_objptr  hdrptr, endptr;

  ftracef0 ("draw_scan_traverse_splitredraw\n");

  /* Set index for selection case */
  i = (start == NULL && end == NULL) ? 0 : -1;

  /* Set initial objects */
  if (!find_objects(start, end, &hdrptr, &endptr))
    return;

  /* Relies on all objects being graphic (ie have bboxes) */
  do
  { draw_obj_bound_minmax2(hdrptr, &before);

    draw_scan_traverse_object(hdrptr, arrayp, handle);

    draw_obj_bound_object(hdrptr);
    draw_obj_bound_minmax2(hdrptr, &after);
  } while (next_object(&i, &hdrptr, endptr));

  put_redraw(diag, &before, undo);
  if (diag)
  { if (memcmp((char *)&before, (char *)&after, sizeof(draw_bboxtyp)) != 0)
    { draw_displ_redrawarea(diag, &after);
      if (undo) draw_undo_put(diag, draw_undo__redraw, (int)&after, 0);
    }
  }
}

/* Traverse an object */
/* arrayp[draw_OBJGROUP] == 0 means recurse                        */
/*                          other is a user func (could call       */
/*                             traverse_group but do own pre/post  */
/*                                   processing)                   */
/* (we could also have a code for ignore, but at a pinch that can   */
/* be handled by a null function - this method saves having strange */
/* function pointers).                                              */

void draw_scan_traverse_object(draw_objptr hdrptr,
                               despatch_tab arrayp, void *handle)
{ draw_tagtyp tag = hdrptr.objhdrp->tag;

  ftracef0 ("draw_scan_traverse_object\n");

  switch (tag)
  { case draw_OBJFONTLIST:      /*  0 */
    case draw_OBJTEXT:          /*  1 */
    case draw_OBJPATH:          /*  2 */
  /*case draw_OBJRECT:*/
  /*case draw_OBJELLI:*/
    case draw_OBJSPRITE:        /*  5 */
  /*case draw_OBJTAGG:*/        /*  7 */
    case draw_OBJTEXTCOL:       /*  9 */
    case draw_OBJTEXTAREA:      /* 10 */
    case draw_OBJTRFMTEXT:
    case draw_OBJTRFMSPRITE:
    case draw_OBJJPEG:
      if (arrayp [tag])
      { ftracef2 ("Type %d: call supplied function %s\n",
            tag, Function_Name ((void *) arrayp [tag]));
        (*arrayp [tag]) (hdrptr, handle);
      }
    break;

    case draw_OBJGROUP:         /*  6 */
      if (arrayp [tag] == 0)
      { ftracef0 ("Group: recurse\n");
        draw_scan_traverse (hdrptr.bytep, NULL, arrayp, handle);
      }
      else
      { ftracef1 ("Group: call supplied function %s\n",
            Function_Name ((void *) arrayp [tag]));
        (*arrayp [tag]) (hdrptr, handle);
      }
    break;
  }
}
@


4.3
log
@Uncurl some braces.
Makes wood and trees easier to distinguish.
@
text
@d39 4
a42 2
#include "wimp.h"
#include "werr.h"
@


4.2
log
@Filename fixes for case-sensitive environments, and #include name normalisation.  No functional changes.

Version 1.14. Not tagged
@
text
@d277 2
a278 1
} }
@


4.1
log
@Initial revision
@
text
@d38 3
a40 3
#include "h.os"
#include "h.wimp"
#include "h.werr"
d42 1
a42 1
#include "h.ftrace"
d45 6
a50 6
#include "h.Draw"
#include "h.DrawDispl"
#include "h.DrawObject"
#include "h.DrawScan"
#include "h.DrawSelect"
#include "h.DrawUndo"
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
