head	1.3;
access;
symbols
	DebugTools-1_20:1.3
	DebugTools-1_19:1.3
	DebugTools-1_18:1.3
	DebugTools-1_17:1.2
	DebugTools-1_16:1.2
	DebugTools-1_15:1.2
	DebugTools-1_14:1.2
	DebugTools-1_13:1.2
	DebugTools-1_12:1.2
	DebugTools-1_11:1.2
	DebugTools-1_10:1.2
	DebugTools-1_09:1.2
	DebugTools-1_08:1.2
	DebugTools-1_07:1.2
	DebugTools-1_06:1.2
	DebugTools-1_05:1.2
	DebugTools-1_04:1.2
	DebugTools-1_03:1.2
	DebugTools-1_02:1.2
	DebugTools-1_01:1.1.1.1
	DebugTools-1_00:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2015.07.17.00.41.39;	author jlee;	state Exp;
branches;
next	1.2;
commitid	MXDXHN64SpQkAzty;

1.2
date	2001.06.07.23.26.31;	author srevill;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.30.16.20.56;	author srevill;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.30.16.20.56;	author srevill;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Assorted fixes
Detail:
  Hdr/GetAll, s/Debug, s/Module, s/SWIpatch - Use Hdr:OSRSI6 for OS_ReadSysInfo 6 items instead of magic numbers
  s/Cmnds, s/IRQpatch, s/Module, s/SWIs - Disable *IRQInfo and *UnknownIRQs, they're rather broken for HAL kernels/32bit memory map.
  s/IRQpatch, s/Module, s/SWIs - Remove hardcoded IRQ device count and deduce from OS_ReadSysInfo 6 instead
  s/Module - Read address of VecPtrTab from OS_ReadSysInfo 6. Fix bounds calculations for application space & RMA (OS_ReadDynamicArea returns base in R0, not R1)
  s/Strings - Add UnthreadV to list of vector names
Admin:
  Tested on Rasperry Pi (with zero page relocation)
  *Vectors now works again, and *IRQDevices lists full device count.


Version 1.18. Tagged as 'DebugTools-1_18'
@
text
@; Copyright 2001 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; s.Debug


	GBLL	DEBUG
;DEBUG	SETL	{TRUE}
DEBUG	SETL	{FALSE}

  [ DEBUG
	! 0, ""
	! 0, "WARNING: This is a debug build!"
	! 0, ""
  ];DEBUG


; ****************************************************
; *
; * MACRO Write <string>
; *
; * Send the specified string to all active output streams.
; *
	MACRO
	Write	$string
  [ DEBUG
    [ "$string" <> ""
	Push	"LR"
	SWI	XOS_WriteS
	DCB	"$string", 0
	ALIGN
	Pull	"LR"
    ];"$string" <> ""
  ];DEBUG
	MEND


; ****************************************************
; *
; * MACRO WriteLn [<string>]
; *
; * Send the specified string followed by a newline to all active
; * output streams. If no string is specified, only a newline is
; * sent.
; *
	MACRO
	WriteLn	$string
  [ DEBUG
    [ "$string" = ""
	Push	"LR"
	SWI	XOS_NewLine
	Pull	"LR"
    |
	Push	"LR"
	SWI	XOS_WriteS
	DCB	"$string", 10, 13, 0
	ALIGN
	Pull	"LR"
    ];"$string" = ""
  ];DEBUG
	MEND


; ****************************************************
; *
; * MACRO RegHex <register> [<number of nibbles>]
; *
; * Send the contents of the specified register in hexadecimal
; * to all active output streams. Default is 8 nibbles (32 bit).
; *
	MACRO
	RegHex	$reg, $len
  [ DEBUG
	Push	"R0-R2, LR"
	SUB	SP, SP, #12
	MOV	R0, $reg
	MOV	R1, SP
	MOV	R2, #12
    [ "$len" = ""
	SWI	XOS_ConvertHex8
    |
	SWI	XOS_ConvertHex$len
    ];"$len" = ""
	SWIVC	XOS_Write0
	ADD	SP, SP, #12
	Pull	"R0-R2, LR"
  ];DEBUG
	MEND


; ****************************************************
; *
; * MACRO RegDec <register> [<number of bytes>]
; *
; * Send the contents of the specified register in decimal to all
; * active output streams. Default is 4 bytes (32 bit).
; *
	MACRO
	RegDec	$reg, $len
  [ DEBUG
	Push	"R0-R2, LR"
	SUB	SP, SP, #16
	MOV	R0, $reg
	MOV	R1, SP
	MOV	R2, #16
    [ "$len" = ""
	SWI	XOS_ConvertCardinal4
    |
	SWI	XOS_ConvertCardinal$len
    ];"$len" = ""
	SWIVC	XOS_Write0
	ADD	SP, SP, #16
	Pull	"R0-R2, LR"
  ];DEBUG
	MEND

; ****************************************************
; *
; * MACRO Pause [<delay>]
; *
; * Pause for the specified number of centi-seconds. Default
; * is one second.
; *
	MACRO
	Pause	$cs
  [ DEBUG
	Push	"R0-R1, LR"
	SWI	XOS_ReadMonotonicTime
    [ "$cs" = ""
	ADD	R1, R0, #100
    |
	ADD	R1, R0, #$cs
    ];"$cs" = ""
00	SWI	XOS_ReadMonotonicTime
	CMP	R0, R1
	BLO	%BT00
	Pull	"R0-R1, LR"
  ];DEBUG
	MEND


;  [ DEBUG
;
;CP15	CP 15
;C6	CN 6
;C5	CN 5
;C0	CN 0
;
;;
;; Map the specified page as being read-only. Writes to it will data abort.
;; Note: it stores the old state in a workspace word, so we can't call this
;; routine on multiple pages.
;;
;; R10 = address in page to invalidate
;; R12 = module workspace pointer
;;
;invalidate_page
;	Entry	"R0-R3, R10"
;	SCPSR	I_bit, 0, R14,, R3
;	MOV	R0, #6
;	MOV	R1, #0
;	MOV	R2, #OSRSI6_L2PT
;	SWI	XOS_ReadSysInfo		; R2 = L2PT
;	MOV	R10, R10, LSR #12
;	ADD	R14, R2, R10, LSL #2
;	LDR	R0, [R14]
;	STR	R0, [R12, #WSP_L2PTEntry]
;	BIC	R0, R0, #0xFF0
;	STR	R0, [R14]
;	MOV	R10, R10, LSL #12
;	MCR	CP15, 0, R10, C6, C0
;	RestPSR	R3
;	NOP
;	EXIT
;;
;; Restore the state of the specified page back to the state before invalidation.
;;
;; R10 = address in page to restore
;; R12 = module workspace pointer
;;
;validate_page
;	Entry	"R0-R3, R10"
;	SCPSR	I_bit, 0, R14,, R3
;	MOV	R0, #6
;	MOV	R1, #0
;	MOV	R2, #OSRSI6_L2PT
;	SWI	XOS_ReadSysInfo		; R2 = L2PT
;	MOV	R10, R10, LSR #12
;	ADD	R14, R2, R10, LSL #2
;	LDR	R0, [R12, #WSP_L2PTEntry]
;	STR	R0, [R14]
;	MOV	R10, R10, LSL #12
;	MCR	CP15, 0, R10, C6, C0
;	RestPSR	R3
;	NOP
;	EXIT
;  ];DEBUG


	END
@


1.2
log
@  * Added a little bit of bomb-proofing to DebugTools' SWI XOS_Write bits;

  * Significant improvements made to the DebugTest module.
Detail:
  * Sequences of OS_WriteX, OS_NewLine and OS_ConvertXXX have been made a
    little more secure using the VC condition code (where appropriate). I
    haven't done this with OS_WriteS of course!

  * The DebugTest module is now quite handy for watching both OS_Module
    and OS_Heap calls - it provides four *commands:

      *OSModule    *OSModule_Read    *OSHeap    *OSHeap_Read

    These commands allow you to watch the number of calls to these SWIs
    for all of the reason codes, and the distribution of block sizes for
    claims. Handy if you're working on OS_Heap (or any heap algorithm).

    It's not yet very useful for tracking memory leaks.
Admin:
  Tested on RiscPC.

Version 1.02. Tagged as 'DebugTools-1_02'
@
text
@d173 1
a173 1
;	MOV	R2, #14
d197 1
a197 1
;	MOV	R2, #14
@


1.1
log
@Initial revision
@
text
@d95 1
a95 1
	SWI	XOS_Write0
d122 1
a122 1
	SWI	XOS_Write0
@


1.1.1.1
log
@Initial import of the DebugTools component.
@
text
@@
