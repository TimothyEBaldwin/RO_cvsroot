head	1.15;
access;
symbols
	DebugTools-1_20:1.15
	DebugTools-1_19:1.14
	DebugTools-1_18:1.14
	DebugTools-1_17:1.13
	DebugTools-1_16:1.13
	DebugTools-1_15:1.12
	DebugTools-1_14:1.11
	DebugTools-1_13:1.10
	DebugTools-1_12:1.10
	DebugTools-1_11:1.10
	DebugTools-1_10:1.9
	DebugTools-1_09:1.8
	DebugTools-1_08:1.7
	DebugTools-1_07:1.6
	DebugTools-1_06:1.5
	DebugTools-1_05:1.4
	DebugTools-1_04:1.3
	DebugTools-1_03:1.2
	DebugTools-1_02:1.2
	DebugTools-1_01:1.2
	DebugTools-1_00:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.15
date	2017.06.28.20.27.56;	author rsprowson;	state Exp;
branches;
next	1.14;
commitid	TUxMKMGWAdXhgbXz;

1.14
date	2015.07.17.00.41.39;	author jlee;	state Exp;
branches;
next	1.13;
commitid	MXDXHN64SpQkAzty;

1.13
date	2008.10.04.21.45.51;	author bavison;	state Exp;
branches;
next	1.12;

1.12
date	2007.09.21.00.39.36;	author srevill;	state Exp;
branches;
next	1.11;

1.11
date	2004.05.18.16.08.50;	author bavison;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.04.19.48.15;	author srevill;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.20.14.20.32;	author srevill;	state Exp;
branches;
next	1.8;

1.8
date	2001.09.06.13.25.38;	author srevill;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.16.17.54.42;	author srevill;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.12.23.39.00;	author srevill;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.12.14.25.58;	author srevill;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.12.00.26.02;	author srevill;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.11.17.03.38;	author srevill;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.05.15.57.28;	author srevill;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.30.16.20.56;	author srevill;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.30.16.20.56;	author srevill;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Resolve two differing canonicals
Disc based canonical (supplied with the DDE) takes 1 arg, the variable to expand. The version in this module also requires a path name, doing the assignment too.
Take the disc version to be canonical (!) since that one's in the wild, and remove the 2nd arg from DebugTools.
Docs and test case updated accordingly.
Also:
* Use Unix paths (thing.s not s.thing).
* Makefile recreated from fragments.

Version 1.20. Tagged as 'DebugTools-1_20'
@
text
@; Copyright 2001 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >s.Module

;DebugToolsSWI_Base	*	0x000554C0
DebugToolsErr		*	0x00819C00
TAB			*	9
LF			*	10
CR			*	13

; Patching of the kernel's IRQ handler to collect timing statistics needs
; updating to cope with HAL + 32bit world
        GBLL IRQPatch
IRQPatch SETL {FALSE}

; Unknown IRQ tracking is also broken (although to a lesser extent). Leave it
; disabled until we have a reason to fix it.
        GBLL UnkIRQs
UnkIRQs SETL {FALSE}

; ****************************************************
; *
; * The DebugTools module workspace format
; *
			^	0
WSP_PageSize		#	4		; The page size of the machine (-1)
WSP_VecPtrTab		#	4		; The base of the vector pointer table
WSP_TickNodeChain	#	4		; The pointer to the start of the ticker node chain
WSP_AppSlotBase		#	4		; The base address of the application space
WSP_AppSlotTop		#	4		; The end address of the application space
WSP_RMABase             #       4               ; The base address of the RMA space
WSP_RMATop              #       4               ; The end address of the  RMA space
WSP_ROMBase		#	4		; The base address of the ROM
WSP_UtilMod		#	4		; The base address of the Utility Module
WSP_ROMTop		#	4		; The end address of the ROM
 [ IRQPatch
WSP_IRQactive		#	4		; Flags for IRQ patching (0 - inactive, 1 - active)
 ]
WSP_IRQtable		#	4		; The address of the word after the IRQ despatch instruction
WSP_IRQtableEnd		#	4		; The address of the word after the IRQ despatch table
WSP_KernelSWIs		#	4		; The base of the Kernel's SWI despatch table
WSP_SWIDespatch		#	4		; Pointer to our SWI despatch code in RMA
WSP_SWIPatch		#	4		; Pointer to our SWI patch table in RMA
 [ IRQPatch
WSP_IRQcode		#	4		; The address of our IRQ patch code in RMA
 ]
WSP_DeadMods		#	4		; A count of the number of *RMRemoved modules
WSP_DirStack		#	4		; Pointer to the top of the directory stack (may be null)
WSP_ScratchBuffer	#	48		; A scratch buffer in our workspace
 [ IRQPatch
WSP_IRQinfo		#	(IRQs+1)*8	; A block of information for IRQ devices
 ]
 [ UnkIRQs
WSP_UnkIRQCount		#	IRQs*4		; A block of counters for the number of unclaimed IRQs
 ]
WSP_SIZE		*	@@		; The size in bytes of our workspace


  [ DEBUG
  ! 0,"WSP_PageSize      &" :CC: :STR: WSP_PageSize
  ! 0,"WSP_VecPtrTab     &" :CC: :STR: WSP_VecPtrTab
  ! 0,"WSP_TickNodeChain &" :CC: :STR: WSP_TickNodeChain
  ! 0,"WSP_AppSlotBase   &" :CC: :STR: WSP_AppSlotBase
  ! 0,"WSP_AppSlotTop    &" :CC: :STR: WSP_AppSlotTop
  ! 0,"WSP_ROMBase       &" :CC: :STR: WSP_ROMBase
  ! 0,"WSP_UtilMod       &" :CC: :STR: WSP_UtilMod
  ! 0,"WSP_ROMTop        &" :CC: :STR: WSP_ROMTop
  ! 0,"WSP_IRQactive     &" :CC: :STR: WSP_IRQactive
  ! 0,"WSP_IRQtable      &" :CC: :STR: WSP_IRQtable
  ! 0,"WSP_KernelSWIs    &" :CC: :STR: WSP_KernelSWIs
  ! 0,"WSP_SWIDespatch   &" :CC: :STR: WSP_SWIDespatch
  ! 0,"WSP_SWIPatch      &" :CC: :STR: WSP_SWIPatch
  ! 0,"WSP_IRQcode       &" :CC: :STR: WSP_IRQcode
  ! 0,"WSP_DeadMods      &" :CC: :STR: WSP_DeadMods
  ! 0,"WSP_DirStack      &" :CC: :STR: WSP_DirStack
  ! 0,"WSP_ScratchBuffer &" :CC: :STR: WSP_ScratchBuffer
  ! 0,"WSP_IRQinfo       &" :CC: :STR: WSP_IRQinfo
  ! 0,"WSP_UnkIRQCount   &" :CC: :STR: WSP_UnkIRQCount
  ! 0,"WSP_SIZE          &" :CC: :STR: WSP_SIZE
  ! 0,""
  ];DEBUG


	AREA	|Asm$$Code|, CODE, READONLY


; ****************************************************
; *
; * Module header block
; *
Module_BaseAddr
	&	Mod_Start-Module_BaseAddr	; Module start entry point offset
	&	Mod_Init-Module_BaseAddr	; Module intialisation entry point offset
	&	Mod_Die-Module_BaseAddr		; Module finalisation entry point offset
	&	Mod_Service-Module_BaseAddr	; Module service call entry point offset
	&	Mod_Title-Module_BaseAddr	; Module title string offset
	&	Mod_HelpStr-Module_BaseAddr	; Module version info string offset
	&	Mod_HC_Table-Module_BaseAddr	; Help and command keyword table offset
	&	DebugToolsSWI_Base		; SWI chunk
	&	Mod_SWIHandler-Module_BaseAddr	; Module SWI handler entry point offset
	&	Mod_SWITable-Module_BaseAddr	; Module SWI table offset
	&	0				; No SWI name decode entry
	&	0				; No messages file
	&	Mod_Flags-Module_BaseAddr	; Module flags word offset


; ****************************************************
; *
; * Module version, date (and copyright) string
; *
Mod_HelpStr
	DCB	"Debug Tools", 9
	DCB	"$Module_MajorVersion ($Module_Date)"
 [ Module_MinorVersion <> ""
	DCB	" $Module_MinorVersion"
 ]
	DCB	0
	ALIGN


; ****************************************************
; *
; * Module flags word
; *
Mod_Flags
 [ No32bitCode
	&	0
 |
	&	ModuleFlag_32bit
 ]


; ****************************************************
; *
; * Module help and command keyword table
; *
Mod_HC_Table
	Command X, 255, 1		; *Command only - no SWI
	Command Where, 1, 0
	Command Vectors, 1, 0
	Command Tickers, 0, 0
	Command IRQDevices, 0, 0
 [ IRQPatch
	Command IRQInfo, 1, 0
 ]
	Command Canonical, 1, 1		; *Command only - no SWI
 [ UnkIRQs
	Command UnknownIRQs, 0, 0
 ]
	Command RMDie, 1, 1		; *Command only - no SWI
	Command RMRemove, 1, 1		; *Command only - no SWI
	Command PushD, 1, 0		; *Command only - no SWI
	Command PopD, 0, 0		; *Command only - no SWI
	Command PWD, 0, 0		; *Command only - no SWI
	Command EvalHex, 255, 1		; *Command only - no SWI
	Command EvalBin, 255, 1		; *Command only - no SWI
;	Command Poke, 4, 1		; *Command only - no SWI
;	Command Peek, 3, 1		; *Command only - no SWI
	Command	RMSave, 2, 2		; *Command only - no SWI
	Command	SaveWorkspace, 2, 2	; *Command only - no SWI
	Command	SaveDA, 2, 2		; *Command only - no SWI
	Command	RemoveDA, 1, 1		; *Command only - no SWI
	DCB	0

X_Help
	DCB	"*X will execute the specified CLI command and trap any errors in the "
	DCB	"system variable X$$Error (if not already set).", CR
X_Syntax
	DCB	"Syntax: *X <CLI command>", 0

Where_Help
	DCB	"*Where will output information on the location of the specified logical "
	DCB	"address (or that of the last exception).", CR
Where_Syntax
	DCB	"Syntax: *Where [<address>|<register>]", 0

Vectors_Help
	DCB	"*Vectors lists all of the software installed on the all or the "
	DCB	"specified software vectors.", CR
Vectors_Syntax
	DCB	"Syntax: *Vectors [<number> | <name>]", 0

Tickers_Help
	DCB	"*Tickers lists all CallAfters and CallEverys currently pending.", CR
Tickers_Syntax
	DCB	"Syntax: *Tickers", 0

IRQDevices_Help
	DCB	"*IRQDevices lists the current device drivers installed on each of the "
	DCB	"Kernel device IRQs vectors.", CR
IRQDevices_Syntax
	DCB	"Syntax: *IRQDevices", 0

 [ IRQPatch
IRQInfo_Help
	DCB	"*IRQInfo outputs information on the number of calls to and the duration "
	DCB	"of the handler for each IRQ.", CR
IRQInfo_Syntax
	DCB	"Syntax: *IRQInfo", 0
 ]

Canonical_Help
	DCB	"*Canonical will canonicalise the specified file name and place the "
	DCB	"result into the specified system variable.", CR
Canonical_Syntax
	DCB	"Syntax: *Canonical <sys var>", 0

 [ UnkIRQs
UnknownIRQs_Help
	DCB	"*UnknownIRQs outputs a count of the number of calls to IrqV for each "
	DCB	"device (since the last call to this *Command).", CR
UnknownIRQs_Syntax
	DCB	"Syntax: *UnknownIRQs", 0
 ]
 
RMDie_Help
	DCB	"*RMDie will remove a module's finalisation handler before killing the "
	DCB	"module.", CR
RMDie_Syntax
	DCB	"Syntax: *RMDie <module title>", 0

RMRemove_Help
	DCB	"*RMRemove will remove various handlers from a module but leave it in the "
	DCB	"module chain.", CR
RMRemove_Syntax
	DCB	"Syntax: *RMRemove <module title>", 0

PushD_Help
	DCB	"*PushD will push the currently selected directory (CSD) onto a stack of "
	DCB	"previous CSDs and move into the specified directory (if any).", CR
PushD_Syntax
	DCB	"Syntax: *PushD [<directory>]", 0

PopD_Help
	DCB	"*PopD pulls the most recently stacked directory off the directory stack and "
	DCB	"sets it as the currently selected directory (CSD).", CR
PopD_Syntax
	DCB	"Syntax: *PopD", 0

PWD_Help
	DCB	"*PWD outputs the name of the currently selected directory (CSD).", CR
PWD_Syntax
	DCB	"Syntax: *PWD", 0

EvalHex_Help
	DCB	"*EvalHex will evaluate the specified expression (as *Eval) and will return the "
	DCB	"result in eight-digit hexadecimal (if the result is not a string).", CR
EvalHex_Syntax
	DCB	"Syntax: *EvalHex <expression>", 0

EvalBin_Help
	DCB	"*EvalBin will evaluate the specified expression (as *Eval) and will return the "
	DCB	"result in 32 bit binary (if the result is not a string).", CR
EvalBin_Syntax
	DCB	"Syntax: *EvalBin <expression>", 0

;Poke_Help
;	DCB	"*Poke will store the specified value at the specified logical (or physical) "
;	DCB	"address.", CR
;Poke_Syntax
;	DCB	"Syntax *Poke [-P] [-U] [-B | -H | -D] <address> <value>", CR
;	DCB	TAB, "  -P  <address> is a physical address, else logical", CR
;	DCB	TAB, "  -U  perform the store with Usr mode permissions, else Svc mode", CR
;	DCB	TAB, "  -B  <value>   is a byte to store", CR
;	DCB	TAB, "  -H  <value>   is a halfword to store", CR
;	DCB	TAB, "  -D  <value>   is a doubleword to store", 0
;
;Peek_Help
;	DCB	"*Peek will output the contents of the specified logical (or physical) address.", CR
;Peek_Syntax
;	DCB	"Syntax *Peek [-P] [-U] [-B | -H | -D] <address>", CR
;	DCB	TAB, "  -P  <address> is a physical address, else logical", CR
;	DCB	TAB, "  -U  perform the store with Usr mode permissions, else Svc mode", CR
;	DCB	TAB, "  -B  value read is a byte", CR
;	DCB	TAB, "  -H  value read is a halfword", CR
;	DCB	TAB, "  -D  value read is a doubleword", 0

RMSave_Help
	DCB	"*RMSave will attempt to extract the specified module from memory and save it "
	DCB	"to the specified file.", CR
RMSave_Syntax
	DCB	"Syntax: *RMSave <module title> <filename>", 0

SaveWorkspace_Help
	DCB	"*SaveWorkspace will attempt to save a module's workspace to the specified file.", CR
SaveWorkspace_Syntax
	DCB	"Syntax: *SaveWorkspace <module title> <filename>", 0

SaveDA_Help
	DCB	"*SaveDA will save the first dynamic area found with a name "
	DCB	"matching that specified to the specified file.", CR
SaveDA_Syntax
	DCB	"Syntax: *SaveDA <area name> <filename>", 0

RemoveDA_Help
	DCB	"*RemoveDA will remove the first dynamic area found with a name "
	DCB	"matching that specified.", CR
RemoveDA_Syntax
	DCB	"Syntax: *RemoveDA <area name>", 0


; ****************************************************
; *
; * Module title string and module SWI table
; *
Mod_Title
Mod_SWITable
	DCB	"DebugTools", 0
	DCB	"AddressInfo", 0	; 0 SWI only - no *Command
	DCB	"Where", 0		; 1
	DCB	"Vectors", 0		; 2
	DCB	"Tickers", 0		; 3
	DCB	"IRQDevices", 0		; 4
	DCB	"IRQInfo", 0		; 5
	DCB	"UnknownIRQs", 0	; 6
	DCB	"ClaimOSSWI", 0		; 7
	DCB	"AddToOSSWI", 0		; 8
	DCB	"ReleaseOSSWI", 0	; 9
	DCB	0
	ALIGN


; ****************************************************
; *
; * Module execution start entry point
; *
Mod_Start * Module_BaseAddr


; ****************************************************
; *
; * Module initialisation entry point
; *
; * In...
; *   R10	= pointer to environment string
; *   R11	= I/O base or instantiation number
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R6	= can be corrupted
; *   R7-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
Mod_Init Entry "R10-R11"
	WriteLn	"InitTools..."
	MOV	R0, #ModHandReason_Claim
	MOV	R3, #WSP_SIZE
	SWI	XOS_Module
	BVS	%FT00
	STR	R2, [R12]
	MOV	R12, R2
	WriteLn	"  Wsp;"
	; Find out what the page size of this machine is...
	SWI	XOS_ReadMemMapInfo
	MOVVS	R0, #32*1024		; Assume 32KB page size if none returned
	SUB	R0, R0, #1
	STR	R0, [R12, #WSP_PageSize]
	;
	; Store known locations of certain things in memory, for which no interface
	; currently exists to find this information out...
	;
	MOV	R0, #6
	MOV	R1, #0
	MOV	R2, #OSRSI6_VecPtrTab   ; Base of vector pointer table
	SWI	XOS_ReadSysInfo
	MOVVS	R2, #0
	TEQ	R2, #0
	LDREQ	R2, =0x000007D8		; Legacy location
	STR	R2, [R12, #WSP_VecPtrTab]
        MOV     R0, #1                  ; RMA
        SWI     XOS_ReadDynamicArea
        MOVVS   R0, #0x20000000         ; Base of RMA space
        MOVVS   R2, #0x01C00000         ; Top of RMA space
        ADDVC   R2, R0, R2              ; R2 was the max size, we want the top
        STR     R0, [R12, #WSP_RMABase]
        STR     R2, [R12, #WSP_RMATop]
	MOV     R0, #-1
	SWI     XOS_ReadDynamicArea
	MOVVS   R0, #0x00008000		; Base of application space
	MOVVS   R2, #0x01C00000		; Top of application space
	ADDVC   R2, R0, R2              ; R2 was the max size, we want the top
	STR	R0, [R12, #WSP_AppSlotBase]
	STR	R2, [R12, #WSP_AppSlotTop]
	MOV	R0, #0
	STR	R0, [R12, #WSP_DeadMods]
	STR	R0, [R12, #WSP_DirStack]
	WriteLn	"  Tick;"
	; Find the address of the ticker node chain start pointer
	MOV	R0, #6
	MOV	R1, #0
	MOV	R2, #OSRSI6_TickNodeChain
	SWI	XOS_ReadSysInfo
	MOVVS	R2, #0
	STR	R2, [R12, #WSP_TickNodeChain]
	; Find the base address of the Utility Module
	MOV	R0, #ModHandReason_LookupName
	ADR	R1, util_mod_title
	SWI	XOS_Module
	MOVVS	R3, #0
	STR	R3, [R12, #WSP_UtilMod]
	MOV     R0, R3, LSR #20
	MOV     R0, R0, LSL #20		; Base of the ROM = magabyte boundary below UtilityModule
	CMP     R0, #0x04000000
	MOVCC   R1, #0x04000000		; Top of the ROM
	MOVCS   R1, #0xFFFFFFFF
	STR	R0, [R12, #WSP_ROMBase]
	STR	R1, [R12, #WSP_ROMTop]
	WriteLn	"  IRQs;"
	BL	IRQ_init
	BVS	%FT00
	WriteLn	"  SWIs;"
	BL	SWI_patch
	WriteLn	"  Done."
00	;
	EXIT
util_mod_title
	DCB	"UtilityModule", 0
	ALIGN


; ****************************************************
; *
; * Module finalisation entry point
; *
; * In...
; *   R10	= fatality indication: 0 is non-fatal, 1 is fatal
; *   R11	= instantiation number
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R6	= can be corrupted
; *   R7-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
Mod_Die Entry "R10-R11"
	WriteLn	"DieTools..."
	LDR	R12, [R12]
	BL	IRQ_final
	WriteLn	"  SWIs;"
	BLVC	SWI_unpatch
	EXIT


; ****************************************************
; *
; * Dump a literal pool here
; *
	LTORG


; ****************************************************
; *
; * Module service call entry point
; *
; * In...
; *   R1	= service call reason code
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= may be altered to return a result
; *   R1	= 0 if we claimed it
; *   R2-R8	= may be altered to return a result
; *   R9-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13-R14	= must be preserved
; *
; * Do NOT return V set errors from this routine!
; *
Mod_Service * Module_BaseAddr
;Fast_SVC_Table
;	&	0				; Flags word
;	&	Mod_FastService-Module_BaseAddr	; Actual service call handler
;	&	Service_???
;	&	Service_????
;	&	0				; End of service call table
;	&	Fast_SVC_Table-Module_BaseAddr	; Offset of fast service table
;Mod_Service ROUT
;	MOV	R0, R0
;	TEQ	R1, #Service_???
;	TEQNE	R1, #Service_????
;	MOVEQ	PC, LR
;Mod_FastService Entry
;	EXIT


	END
@


1.14
log
@Assorted fixes
Detail:
  Hdr/GetAll, s/Debug, s/Module, s/SWIpatch - Use Hdr:OSRSI6 for OS_ReadSysInfo 6 items instead of magic numbers
  s/Cmnds, s/IRQpatch, s/Module, s/SWIs - Disable *IRQInfo and *UnknownIRQs, they're rather broken for HAL kernels/32bit memory map.
  s/IRQpatch, s/Module, s/SWIs - Remove hardcoded IRQ device count and deduce from OS_ReadSysInfo 6 instead
  s/Module - Read address of VecPtrTab from OS_ReadSysInfo 6. Fix bounds calculations for application space & RMA (OS_ReadDynamicArea returns base in R0, not R1)
  s/Strings - Add UnthreadV to list of vector names
Admin:
  Tested on Rasperry Pi (with zero page relocation)
  *Vectors now works again, and *IRQDevices lists full device count.


Version 1.18. Tagged as 'DebugTools-1_18'
@
text
@d158 1
a158 1
	Command Canonical, 2, 2		; *Command only - no SWI
d218 1
a218 1
	DCB	"Syntax: *Canonical <sys var> <file spec>", 0
@


1.13
log
@  Merged in changes from Castle
Detail:
  IRQ debugging cose and swi vector code now RO5 compatible.
  May well have broken pre RO5 usage..
Admin:
  Not tested

Version 1.16. Tagged as 'DebugTools-1_16'
@
text
@d22 10
a31 1
IRQs                    *       64 ; (64 in HAL) 32
d48 1
d50 1
d52 1
d56 1
d58 1
d62 1
d64 2
d67 1
d155 1
d157 1
d159 1
d161 1
d179 1
a179 1
	DCB	"system variable X$Error (if not already set).", CR
d206 1
d212 1
d220 1
d226 2
a227 1

d378 8
a385 2
	LDR	R0, =0x000007D8		; Base of vector pointer table
	STR	R0, [R12, #WSP_VecPtrTab]
d388 1
a388 1
        MOVVS   R1, #0x20000000         ; Base of RMA space
d390 2
a391 2
        ADDVC   R2, R1, R2              ; R2 was the max size, we want the top
        STR     R1, [R12, #WSP_RMABase]
d395 1
a395 1
	MOVVS   R1, #0x00008000		; Base of application space
d397 2
a398 2
	ADDVC   R2, R1, R2              ; R2 was the max size, we want the top
	STR	R1, [R12, #WSP_AppSlotBase]
d407 1
a407 1
	MOV	R2, #5
@


1.12
log
@  Extended the Where command.
Detail:
  *Where and the Where SWI call can now take a register as a parameter in order
  to specify the contents of a register that was stored following an exception
  (as per *ShowRegs). This is very useful if you know which register(s) you are
  interested in for a given abort.
Admin:
  Tested on IYONIX.
Notes:
  Changes by Steve Revill.

Version 1.15. Tagged as 'DebugTools-1_15'
@
text
@d22 1
a22 1
IRQs			*	32
d34 2
d354 7
@


1.11
log
@  Adapted to new memory maps.
Detail:
  Location of application space and the ROM used hard-coded constants.
  Now uses OS_ReadDynamicArea and the megabyte below the UtilityModule.
Admin:
  Tested briefly on Tungsten.

Version 1.14. Tagged as 'DebugTools-1_14'
@
text
@d163 1
a163 1
	DCB	"Syntax: *Where [<address>]", 0
@


1.10
log
@  Fixed potentially fatal module finalisation bug.
Detail:
  DebugTools freed its workspace on module finalisation, but did
  not store zero in the private word. This means that the Kernel
  would also try to free that address in the RMA, which may have
  been claimed by someone else in the intervening moments. This
  fault was actually seen 100% repeatably with a module on an STB
  (which has the same fault - and one similar in the initialise
  code).
Admin:
  Will work.
  How many other assembler modules will fall down the same hole?

Version 1.11. Tagged as 'DebugTools-1_11'
@
text
@d352 7
a358 8
	MOV	R0, #0x00008000		; Base of application space
	MOV	R1, #0x01C00000		; Top of application space
	STR	R0, [R12, #WSP_AppSlotBase]
	STR	R1, [R12, #WSP_AppSlotTop]
	MOV	R0, #0x03800000		; Base of the ROM
	MOV	R1, #0x04000000		; Top of the ROM
	STR	R0, [R12, #WSP_ROMBase]
	STR	R1, [R12, #WSP_ROMTop]
d376 7
@


1.9
log
@  Modified the RMSave and SaveWorkspace commands.
Detail:
  They will now return an error if the module name lookup fails, rather than
  simply using the DebugTools module (workspace).
Admin:
  Tested on a set-top box.

Version 1.10. Tagged as 'DebugTools-1_10'
@
text
@a413 6
	EXIT	VS
	WriteLn	"  Free;"
	MOV	R0, #ModHandReason_Free
	MOV	R2, R12
	SWI	XOS_Module
	WriteLn	"  Done."
@


1.8
log
@  All peek and poke code commented-out.
Detail:
  Until peek and poke have been implemented, their code has been
  completely commented-out.
Admin:
  Untested.

Version 1.09. Tagged as 'DebugTools-1_09'
@
text
@d17 1
a17 2

DebugToolsSWI		*	0x000554C0
d91 1
a91 1
	&	DebugToolsSWI			; SWI chunk
@


1.7
log
@  Added a few new *commands.
Detail:
  New commands implemented are...

  *SaveDA, *RemoveDA, *RMSave and *SaveWorkspace

  which are fairly self-explanatory. Two new commands are also there
  in spirit but not yet implemented. These are...


  *Peek and *Poke

  which will allow inspection of logical/physical memory and modification.
  The main difference with *Memory commands is that they tend to read a
  location multiple times, which is no good for addresses in I/O space.
Admin:
  Tested a bit on my RiscPC.

Version 1.08. Tagged as 'DebugTools-1_08'
@
text
@d146 2
a147 2
	Command Poke, 4, 1		; *Command only - no SWI
	Command Peek, 3, 1		; *Command only - no SWI
d242 20
a261 20
Poke_Help
	DCB	"*Poke will store the specified value at the specified logical (or physical) "
	DCB	"address.", CR
Poke_Syntax
	DCB	"Syntax *Poke [-P] [-U] [-B | -H | -D] <address> <value>", CR
	DCB	TAB, "  -P  <address> is a physical address, else logical", CR
	DCB	TAB, "  -U  perform the store with Usr mode permissions, else Svc mode", CR
	DCB	TAB, "  -B  <value>   is a byte to store", CR
	DCB	TAB, "  -H  <value>   is a halfword to store", CR
	DCB	TAB, "  -D  <value>   is a doubleword to store", 0

Peek_Help
	DCB	"*Peek will output the contents of the specified logical (or physical) address.", CR
Peek_Syntax
	DCB	"Syntax *Peek [-P] [-U] [-B | -H | -D] <address>", CR
	DCB	TAB, "  -P  <address> is a physical address, else logical", CR
	DCB	TAB, "  -U  perform the store with Usr mode permissions, else Svc mode", CR
	DCB	TAB, "  -B  value read is a byte", CR
	DCB	TAB, "  -H  value read is a halfword", CR
	DCB	TAB, "  -D  value read is a doubleword", 0
@


1.6
log
@  Added a couple more commands and made a couple of bits a little more
  future-proof.
Detail:
  New *commands are EvalHex and EvalBin, which work as you'd expect; they
  look like *Eval but return integer results in either hexadecimal or in
  binary. Very useful.
Admin:
  Tested on RiscPC.

Version 1.07. Tagged as 'DebugTools-1_07'
@
text
@d20 1
a29 1
WSP_ScratchBuffer	#	36		; A 36 byte scratch buffer in our workspace
d46 1
a52 1
  ! 0,"WSP_ScratchBuffer &" :CC: :STR: WSP_ScratchBuffer
d69 1
d141 3
a143 3
	Command pushd, 1, 0		; *Command only - no SWI
	Command popd, 0, 0		; *Command only - no SWI
	Command pwd, 0, 0		; *Command only - no SWI
d146 6
d213 1
a213 1
pushd_Help
d216 1
a216 1
pushd_Syntax
d219 1
a219 1
popd_Help
d222 1
a222 1
popd_Syntax
d225 4
a228 4
pwd_Help
	DCB	"*Pwd outputs the name of the currently selected directory (CSD).", CR
pwd_Syntax
	DCB	"Syntax: *Pwd", 0
d241 44
@


1.5
log
@  * Fix to some pre-RISC OS 4 problems
  * Changed capitalisation of PushD, PopD and Pwd commands
  * Renamed *Devices and SWI Devices to IRQDevices
  * Updated spec
Detail:
  * There were a couple of sillies in some new (untested) code for when the
    module initialises on pre-RISC OS 4 machines. These would have caused a
    DataAbort in module initialisation.
  * Just to be a little more RISC OS, the help and syntax strings have been
    made more conventional for PushD, PopD and Pwd commands.
  * Devices is already used as a *command. This appears to have been missed
    in my allocation request. I've renamed it to *IRQDevices. To keep things
    orthoganal, the corresponding SWI has also been renamed.
Admin:
  Tested on A7000+ and various RiscPCs with various RO versions.

Version 1.06. Tagged as 'DebugTools-1_06'
@
text
@d29 20
a48 20
WSP_ScratchBuffer	#	20		; 0   - A 20 byte scratch buffer in our workspace
WSP_PageSize		#	4		; 20  - The page size of the machine (-1)
WSP_VecPtrTab		#	4		; 24  - The base of the vector pointer table
WSP_TickNodeChain	#	4		; 28  - The pointer to the start of the ticker node chain
WSP_AppSlotBase		#	4		; 32  - The base address of the application space
WSP_AppSlotTop		#	4		; 36  - The end address of the application space
WSP_ROMBase		#	4		; 40  - The base address of the ROM
WSP_UtilMod		#	4		; 44  - The base address of the Utility Module
WSP_ROMTop		#	4		; 48  - The end address of the ROM
WSP_IRQactive		#	4		; 52  - Flags for IRQ patching (0 - inactive, 1 - active)
WSP_IRQtable		#	4		; 56  - The address of the word after the IRQ despatch instruction
WSP_KernelSWIs		#	4		; 60  - The base of the Kernel's SWI despatch table
WSP_SWIDespatch		#	4		; 64  - Pointer to our SWI despatch code in RMA
WSP_SWIPatch		#	4		; 68  - Pointer to our SWI patch table in RMA
WSP_IRQcode		#	4		; 72  - The address of our IRQ patch code in RMA
WSP_DeadMods		#	4		; 76  - A count of the number of *RMRemoved modules
WSP_DirStack		#	4		; 80  - Pointer to the top of the directory stack (may be null)
WSP_IRQinfo		#	(IRQs+1)*8	; 84  - A block of information for IRQ devices
WSP_UnkIRQCount		#	IRQs*4		; 348 - A block of counters for the number of unclaimed IRQs
WSP_SIZE		*	@@		; 476 - The size in bytes of our workspace
d143 2
d222 12
@


1.4
log
@  Bloat. Module is now 10.5 KB. New commands add about 600 bytes...
Detail:
  Added three new *commands: pushd, popd and pwd. The latter of these
  replaces the transient utility of the same name (but it uses OS_FSControl
  to determine how big a buffer it requires for the string - rather than
  a fixed, 256 byte, buffer).

  pushd and popd do the same thing as the UNIX varients (but without any
  of the switches). These two are very useful. Wish all !Mk files would use
  them ;)
Admin:
  Tested on RO4 RiscPC without any problems.
  Spec in the 'Docs' directory updated.

Version 1.05. Tagged as 'DebugTools-1_05'
@
text
@d61 1
d67 2
d134 1
a134 1
	Command Devices, 0, 0
d168 2
a169 2
Devices_Help
	DCB	"*Devices lists the current device drivers installed on each of the "
d171 2
a172 2
Devices_Syntax
	DCB	"Syntax: *Devices", 0
d205 1
a205 1
	DCB	"*pushd will push the currently selected directory (CSD) onto a stack of "
d208 1
a208 1
	DCB	"Syntax: *pushd [<directory>]", 0
d211 1
a211 1
	DCB	"*popd pulls the most recently stacked directory off the directory stack and "
d214 1
a214 1
	DCB	"Syntax: *popd", 0
d217 1
a217 1
	DCB	"*pwd outputs the name of the currently selected directory (CSD).", CR
d219 1
a219 1
	DCB	"Syntax: *pwd", 0
d233 1
a233 1
	DCB	"Devices", 0		; 4
d308 1
a308 1
	MOV	R0, #18
d344 1
a344 1
Mod_Die Entry
@


1.3
log
@  * IRQ timing stuff is now off by default;
  * Some of the new OS_ReadSysInfo 6 codes used (if available);
  * Some small tidying-up done.
Detail:
  The IRQ timing mechanism involves patching the Kernel's IRQ despatch
  code. This is now off by default. The first call to *IRQInfo will
  activate it. *IRQInfo can also be used to switch the mechanism off
  again.

  Some new subreason codes have recently been added to OS_ReadSysInfo
  6. DebugTools will use these values if they are available.

  The specification in the 'Docs' directory has been updated.
Admin:
  Tested on RO4 RiscPC (OS_ReadSysInfo success stuff untested).

Version 1.04. Tagged as 'DebugTools-1_04'
@
text
@d45 4
a48 3
WSP_IRQinfo		#	(IRQs+1)*8	; 80  - A block of information for IRQ devices
WSP_UnkIRQCount		#	IRQs*4		; 344 - A block of counters for the number of unclaimed IRQs
WSP_SIZE		*	@@		; 472 - The size in bytes of our workspace
d137 3
d201 17
d295 1
@


1.2
log
@  Added AHodgkinson's *RMDie and *RMRemove commands.
Detail:
  Rolled the transients into this module as *commands with some
  slight tweaks:

  *RMDie and *RMRemove will not attempt to blat a ROM module.

  *RMRemove will replace the module title and help strings with
  a special name (i.e. not an empty string) so that you can
  still kill the module later.
Admin:
  Tested quickly on RiscPC.

Version 1.01. Tagged as 'DebugTools-1_01'
@
text
@d38 10
a47 9
WSP_IRQtable		#	4		; 52  - The address of the word after the IRQ despatch instruction
WSP_KernelSWIs		#	4		; 56  - The base of the Kernel's SWI despatch table
WSP_SWIDespatch		#	4		; 60  - Pointer to our SWI despatch code in RMA
WSP_SWIPatch		#	4		; 64  - Pointer to our SWI patch table in RMA
WSP_IRQcode		#	4		; 68  - The address of our IRQ patch code in RMA
WSP_DeadMods		#	4		; 72  - A count of the number of *RMRemoved modules
WSP_IRQinfo		#	(IRQs+1)*8	; 76  - A block of information for IRQ devices
WSP_UnkIRQCount		#	IRQs*4		; 340 - A block of counters for the number of unclaimed IRQs
WSP_SIZE		*	@@		; 468 - The size in bytes of our workspace
d131 1
a131 1
	Command IRQInfo, 0, 0
d134 2
a135 2
	Command RMDie, 1, 1
	Command RMRemove, 1, 1
d289 2
a290 1
	BL	IRQ_patch
d293 1
a294 1
	WriteLn	"  Done."
d322 1
a322 1
	BL	IRQ_unpatch
d325 1
d327 3
a329 3
	MOVVC	R0, #ModHandReason_Free
	MOVVC	R2, R12
	SWIVC	XOS_Module
@


1.1
log
@Initial revision
@
text
@d43 4
a46 3
WSP_IRQinfo		#	(IRQs+1)*8	; 72  - A block of information for IRQ devices
WSP_UnkIRQCount		#	IRQs*4		; 336 - A block of counters for the number of unclaimed IRQs
WSP_SIZE		*	@@		; 464 - The size in bytes of our workspace
d133 2
d184 12
d271 2
@


1.1.1.1
log
@Initial import of the DebugTools component.
@
text
@@
