head	1.6;
access;
symbols
	DebugTools-1_20:1.6
	DebugTools-1_19:1.6
	DebugTools-1_18:1.6
	DebugTools-1_17:1.5
	DebugTools-1_16:1.5
	DebugTools-1_15:1.4
	DebugTools-1_14:1.4
	DebugTools-1_13:1.4
	DebugTools-1_12:1.4
	DebugTools-1_11:1.3
	DebugTools-1_10:1.3
	DebugTools-1_09:1.3
	DebugTools-1_08:1.3
	DebugTools-1_07:1.3
	DebugTools-1_06:1.3
	DebugTools-1_05:1.2
	DebugTools-1_04:1.2
	DebugTools-1_03:1.1.1.1
	DebugTools-1_02:1.1.1.1
	DebugTools-1_01:1.1.1.1
	DebugTools-1_00:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2015.07.17.00.41.39;	author jlee;	state Exp;
branches;
next	1.5;
commitid	MXDXHN64SpQkAzty;

1.5
date	2008.10.04.21.45.51;	author bavison;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.18.14.27.05;	author srevill;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.12.14.25.58;	author srevill;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.11.17.03.38;	author srevill;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.30.16.20.56;	author srevill;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.30.16.20.56;	author srevill;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Assorted fixes
Detail:
  Hdr/GetAll, s/Debug, s/Module, s/SWIpatch - Use Hdr:OSRSI6 for OS_ReadSysInfo 6 items instead of magic numbers
  s/Cmnds, s/IRQpatch, s/Module, s/SWIs - Disable *IRQInfo and *UnknownIRQs, they're rather broken for HAL kernels/32bit memory map.
  s/IRQpatch, s/Module, s/SWIs - Remove hardcoded IRQ device count and deduce from OS_ReadSysInfo 6 instead
  s/Module - Read address of VecPtrTab from OS_ReadSysInfo 6. Fix bounds calculations for application space & RMA (OS_ReadDynamicArea returns base in R0, not R1)
  s/Strings - Add UnthreadV to list of vector names
Admin:
  Tested on Rasperry Pi (with zero page relocation)
  *Vectors now works again, and *IRQDevices lists full device count.


Version 1.18. Tagged as 'DebugTools-1_18'
@
text
@; Copyright 2001 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >s.IRQpatch


 [ IRQPatch
; ****************************************************
; *
; * Replace our B instruction with the original LDMIA in the IRQ despatcher,
; * remove the ticker event and release IrqV.
; *
; * In...
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R2	= corrupted
; *   R3-R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
IRQ_unpatch Entry
	; Did we successfully install our code into the RMA? If not, exit...
	LDR	R2, [R12, #WSP_IRQtable]
	TEQ	R2, #0
	EXIT	EQ
	; Is IRQ patching already active? If not, exit...
	LDR	R14, [R12, #WSP_IRQactive]
	TST	R14, #1
	EXIT	EQ
	; Put back the original LDMIA instruction...
	LDR	R14, =0xE8919000	; = "LDMIA R1,{R12,PC}"
	STR	R14, [R2, #-4]!
	; Ensure that we don't have any cache problems...
	MOV	R0, #2_1
	MOV	R1, R2
	SWI	XOS_SynchroniseCodeAreas
	EXIT	VS
	; Remove the ticker event for our timing code...
	ADR	R0, IRQ_ticker
	MOV	R1, R12
	SWI	XOS_RemoveTickerEvent
	EXIT	VS
	; Set the activity flag back to "inactive"...
	MOV	R14, #0
	STR	R14, [R12, #WSP_IRQactive]
	EXIT

; ****************************************************
; *
; * Replace the LDMIA instruction in the IRQ despatcher with a branch to a copy
; * copy of our IRQ timing and despatch code in the RMA and create a ticker event
; * to copy the timing and other information over to a block in the module
; * workspace once a second.
; *
; * In...
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R2	= corrupted
; *   R3-R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
IRQ_patch Entry
	; Did we successfully install our code into the RMA? If not, exit...
	LDR	R2, [R12, #WSP_IRQtable]
	TEQ	R2, #0
	EXIT	EQ
	; Is IRQ patching already active? If so, exit...
	LDR	R14, [R12, #WSP_IRQactive]
	TST	R14, #1
	EXIT	NE
	; Replace the LDMIA in the Kernel's despatch code with a B to our code...
	LDR	R1, [R12, #WSP_IRQcode]
	ADD	R14, R2, #4
	SUB	R14, R1, R14
	MOV	R14, R14, LSR #2
	; Exit if the branch target is too far away or below the source...
	TST	R14, #0xFF000000
	EXIT	NE
	ORR	R14, R14, #0xEA000000	; = "B IRQ_code"
	STR	R14, [R2, #-4]!
	; Ensure that we don't have any cache problems...
	MOV	R0, #2_1
	MOV	R1, R2
	SWI	XOS_SynchroniseCodeAreas
	EXIT	VS
	; Set flag bit to indicate that we are "active"....
	STR	R0, [R12, #WSP_IRQactive]
	; Install a ticker event to copy and reset the timings every second...
	MOV	R0, #99
	ADR	R1, IRQ_ticker
	MOV	R2, R12
	SWI	XOS_CallEvery
	EXIT
 ] ; IRQPatch

; ****************************************************
; *
; * Initialise the IRQ patching stuff to be off with all of the relevant stats in
; * our workspace set to zero. You have to use *IRQInfo 1 to activate the timing
; * mechanism.
; *
; * In...
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
IRQ_init Entry "R1-R5"
 [ IRQPatch
	; Set IRQ patching flags to "inactive"...
	WriteLn	"  irq1"
	MOV	R0, #0
	STR	R0, [R12, #WSP_IRQactive]
	STR	R0, [R12, #WSP_IRQcode]
 ]
 [ UnkIRQs
	; Claim the Unknown IRQ vector...
	WriteLn	"  irq2"
	MOV	R0, #IrqV
	ADR	R1, IrqV_handler
	MOV	R2, R12
	SWI	XOS_Claim
	BVS	%FT09
	; Initialise our count of unclaimed IRQs to zero...
	WriteLn	"  irq3"
	ASSERT	((?WSP_UnkIRQCount) :AND: 3) = 0
	MOV	R0, #0
	ADD	R1, R12, #WSP_UnkIRQCount
	MOV	R2, #?WSP_UnkIRQCount
00	STR	R0, [R1], #4
	SUBS	R2, R2, #4
	BNE	%BT00
 ]
 [ IRQPatch
	; Zero-initialise the copy of the statistics table...
	WriteLn	"  irq4"
	ASSERT	((?WSP_IRQinfo) :AND: 3) = 0
	ADD	R1, R12, #WSP_IRQinfo
	MOV	R14, #?WSP_IRQinfo
01	STR	R0, [R1], #4
	SUBS	R14, R14, #4
	BNE	%BT01
 ]
	; Search for the base of the Kernel IRQ despatch table...
	WriteLn	"  irq5"
	MOV	R0, #6
	MOV	R1, #0
	MOV	R2, #OSRSI6_Devices
	SWI	XOS_ReadSysInfo
	MOVVS	R2, #0
	MOVS	R1, R2
	BNE	%FT03
	LDR	R0, =0xE8919000		; = "LDMIA R1,{R12,PC}"
	MOV	R1, #0x100
	LDR	R1, [R1]		; Base of the interrupt despatcher
	ADD	R4, R1, #1024		; Give-up search after 1KB
02	LDR	R14, [R1], #4
	TEQ	R14, R0
	BEQ	%FT03
	CMP	R1, R4
	BLO	%BT02
	; We didn't find it. Store zero and exit...
	WriteLn	"  irq6"
	MOV	R1, #0
	STR	R1, [R12, #WSP_IRQtable]
	EXIT
03
	STR	R1, [R12, #WSP_IRQtable]
        ; Work out table end
        MOV     R0, #6
        MOV     R1, #0
        MOV     R2, #OSRSI6_DevicesEnd
        SWI     XOS_ReadSysInfo
        MOVVS   R2, #0
        TEQ     R2, #0
        LDREQ   R2, [R12, #WSP_IRQtable]
        ADDEQ   R2, R2, #64*3*4         ; Assume 64
        STR     R2, [R12, #WSP_IRQtableEnd]
 [ IRQPatch
	; Copy our IRQ handler code into RMA...
	WriteLn	"  irq7"
	ASSERT	((IRQ_code_end - IRQ_code) :AND: 3) = 0
	ADR	R4, IRQ_code
	ADR	R5, IRQ_code_end
	MOV	R0, #ModHandReason_Claim
	SUB	R3, R5, R4
	SWI	XOS_Module
	BVS	%FT09
	WriteLn	"  irq8"
	STR	R2, [R12, #WSP_IRQcode]
	MOV	R1, R2
04	LDR	R14, [R4], #4
	SUBS	R3, R3, #4
	STR	R14, [R2], #4
	BNE	%BT04
	WriteLn	"  irq9"
	; Ensure that we don't have any cache problems...
	MOV	R0, #2_1
	SUB	R2, R2, #4
	SWI	XOS_SynchroniseCodeAreas
 ]
09	;
	EXIT


; ****************************************************
; *
; * Remove all of the various bits and bobs related to our software for watching
; * unknown IRQ events and timing IRQ handlers. This includes:
; *
; * - Replacing the patched B in the Kernel IRQ despatch with the orignal LDMIA
; * - Removing the CallEvery which copies IRQ stats into our workspace
; * - Freeing the block of RMA with our IRQ despatch code in it
; * - Releasing the claimant on the IrqV vector
; *
; * In...
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
IRQ_final Entry "R1-R2"
 [ IRQPatch
	; Replace the B with a the original LDMIA in the Kernel's IRQ despatcher...
	WriteLn	"  irq1"
	BL	IRQ_unpatch
	BVS	%FT00
	; Remove our ticker event...
	WriteLn	"  irq2"
	LDR	R2, [R12, #WSP_IRQcode]
	MOV	R0, #0
	STR	R0, [R12, #WSP_IRQcode]
	ADR	R0, IRQ_ticker
	MOV	R1, R12
	SWI	XOS_RemoveTickerEvent
	BVS	%FT00
	; Free the RMA block containing our IRQ despatcher...
	WriteLn	"  irq3"
	MOV	R0, #ModHandReason_Free
	CMP	R2, #0		; Also clears V flag (over-engineered as V is already clear)
	SWINE	XOS_Module
	BVS	%FT00
 ]
 [ UnkIRQs
	; Remove our claimant from the IrqV vector...
	WriteLn	"  irq4"
	MOV	R0, #IrqV
	ADR	R1, IrqV_handler
	MOV	R2, R12
	SWI	XOS_Release
 ]
00	;
	EXIT

 [ IRQPatch
; ****************************************************
; *
; * This ticker code is called every second in order to copy the block of
; * timings for each IRQ device. The blocks are then reset to zero after
; * the copy.
; *
; * In...
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R13	= preserved
; *
IRQ_ticker Entry "R0-R5"
	; Find the base address of the IRQ patch code in RMA...
	LDR	R0, [R12, #WSP_IRQcode]
	; Calculate the base of the block to copy the timings into...
	ADD	R1, R12, #WSP_IRQinfo
	; If the ticker event has been removed, or something is wrong, exit...
	TEQ	R0, #0
	BEQ	%FT01
	; Calculate the address of the block of timings to copy...
	ADD	R0, R0, #IRQ_timings - IRQ_code
	; Ensure that interrupts are disabled...
	SCPSR	I_bit, 0, R14,, R2
	; Copy each table entry and reset to zero...
	MOV	R4, #0
	ADD	R5, R0, #?WSP_IRQinfo
00	LDR	R3, [R0]	; Read word
	STR	R4, [R0], #4	; Set to zero
	STR	R3, [R1], #4	; Store in copy
	CMP	R0, R5
	BLO	%BT00
	; Restore interrupt state...
	RestPSR	R2
	NOP
01	;
	EXIT
 ] ; IRQPatch


 [ UnkIRQs
; ****************************************************
; *
; * Record the number of calls to unknown devices and pass-on the vector.
; *
; * In...
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *
IrqV_handler Entry
	; Make sure that the device number is not out-of-range
	CMP	R0, #3*IRQs
	BHS	IH_exit
	; Convert device number * 3 into a pointer into our table...
	ADD	R14, R0, R0, LSL #3
	ADD	R14, R14, R0, LSL #1
	MOV	R14, R14, LSR #5
	ADD	R14, R12, R14, LSL #2
	; Increment the call count for this device number...
	LDR	R12, [R14, #WSP_UnkIRQCount]
	ADD	R12, R12, #1
	STR	R12, [R14, #WSP_UnkIRQCount]
	; Exit (don't need to preserve flags)...
IH_exit	EXIT
 ] ; UnkIRQs


 [ IRQPatch
; ****************************************************
; *
; * This block of code is copied into the RMA and the Kernel's interrupt
; * despatcher is patched to branch into it. We can then keep timing
; * information on all the device drivers.
; *
; * In...
; *   R0	= device number * 3
; *   R1	= pointer to despatch table entry
; *   R3	= pointer to IOC
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R3	= may be corrupted
; *   R4-R10	= preserved
; *   R11-R12	= may be corrupted
; *   R13	= preserved
; *
IRQ_code ROUT
	; Preserve the caller's R0 and LR...
	Push	"LR"
	MOV	R11, R0

	; Convert the device number *3 into a pointer into our table...
	ADR	R14, IRQ_timings
	ADD	R12, R0, R0, LSL #3
	ADD	R0, R12, R0, LSL #1
	MOV	R0, R0, LSR #5
	ADD	R0, R14, R0, LSL #3

	; Devices greater than 15 are recorded as "other devices"...
	ADR	R14, IRQ_other_timings
	CMP	R0, R14
	MOVHI	R0, R14

	; Load the saved device number (probably null device)...
	LDR	R12, IRQ_device

	; Store our device number's table entry pointer...
	STR	R0, IRQ_device

	; Read the current time (A)..
	BL	Clk_GetHiResTime

	; Recover the original R0...
	MOV	R0, R11

	; Push the various bits of info onto the IRQ stack...
	;   R12 - the interrupted device's table entry pointer (may be null device, -1)
	;   R14 - the 2 MHz time on entry
	Push	"R12, R14"

	; Make sure the device driver returns to us - and call it...
	MOV	LR, PC
	LDMIA	R1, {R12, PC}

	; Pop all the interesting stuff from the IRQ stack...
	Pull	"R1-R3"
	;   R1 - the interrupted device
	;   R2 - the 2 MHz time on entry
	;   R3 - the return address (LR on entry)

	; Disable interrupts here (just in case claimant re-enabled them) before
	; we start doing read-modify-write operations...
	SCPSR	I_bit, 0, R14

	; Read the current time (B)...
	BL	Clk_GetHiResTime

	; Load the current device number into R0...
	LDR	R0, IRQ_device
	;   R0 - the current device

	; Subtract (A) from (B) to get the elapsed time (C)...
	SUB	R14, R14, R2

	; Restore the device number of the interrupted device...
	STR	R1, IRQ_device

	; Add (C) onto the total elapsed time for the current device...
	LDMIA	R0, {R2, R12}
	CMP	R1, #-1
	ADD	R2, R2, R14
	ADD	R12, R12, #1
	STMIA	R0, {R2, R12}

	; If there was no interrupted device, exit here...
	MOVEQ	PC, R3

	; Subtract (C) from the interrupted device's elapsed time...
	LDR	R2, [R1]
	SUB	R2, R2, R14
	STR	R2, [R1]

	; Return to the caller...
	MOV	PC, R3
;
; Current device number (in case one IRQ interrupts another)
;
IRQ_device
	DCD	-1	; Null device number to start with
;
; Table of information for each IRQ handler (i.e. total time and number of calls)
;
IRQ_timings
	DCD	0	; IRQ 0  - time
	DCD	0	; IRQ 0  - calls
	DCD	0	; IRQ 1  - time
	DCD	0	; IRQ 1  - calls
	DCD	0	; IRQ 2  - time
	DCD	0	; IRQ 2  - calls
	DCD	0	; IRQ 3  - time
	DCD	0	; IRQ 3  - calls
	DCD	0	; IRQ 4  - time
	DCD	0	; IRQ 4  - calls
	DCD	0	; IRQ 5  - time
	DCD	0	; IRQ 5  - calls
	DCD	0	; IRQ 6  - time
	DCD	0	; IRQ 6  - calls
	DCD	0	; IRQ 7  - time
	DCD	0	; IRQ 7  - calls
	DCD	0	; IRQ 8  - time
	DCD	0	; IRQ 8  - calls
	DCD	0	; IRQ 9  - time
	DCD	0	; IRQ 9  - calls
	DCD	0	; IRQ 10 - time
	DCD	0	; IRQ 10 - calls
	DCD	0	; IRQ 11 - time
	DCD	0	; IRQ 11 - calls
	DCD	0	; IRQ 12 - time
	DCD	0	; IRQ 12 - calls
	DCD	0	; IRQ 13 - time
	DCD	0	; IRQ 13 - calls
	DCD	0	; IRQ 14 - time
	DCD	0	; IRQ 14 - calls
	DCD	0	; IRQ 15 - time
	DCD	0	; IRQ 15 - calls
	DCD	0	; IRQ 16 - time
	DCD	0	; IRQ 16 - calls
	DCD	0	; IRQ 17 - time
	DCD	0	; IRQ 17 - calls
	DCD	0	; IRQ 18 - time
	DCD	0	; IRQ 18 - calls
	DCD	0	; IRQ 19 - time
	DCD	0	; IRQ 19 - calls
	DCD	0	; IRQ 20 - time
	DCD	0	; IRQ 20 - calls
	DCD	0	; IRQ 21 - time
	DCD	0	; IRQ 21 - calls
	DCD	0	; IRQ 22 - time
	DCD	0	; IRQ 22 - calls
	DCD	0	; IRQ 23 - time
	DCD	0	; IRQ 23 - calls
	DCD	0	; IRQ 24 - time
	DCD	0	; IRQ 24 - calls
	DCD	0	; IRQ 25 - time
	DCD	0	; IRQ 25 - calls
	DCD	0	; IRQ 26 - time
	DCD	0	; IRQ 26 - calls
	DCD	0	; IRQ 27 - time
	DCD	0	; IRQ 27 - calls
	DCD	0	; IRQ 28 - time
	DCD	0	; IRQ 28 - calls
	DCD	0	; IRQ 29 - time
	DCD	0	; IRQ 29 - calls
	DCD	0	; IRQ 30 - time
	DCD	0	; IRQ 30 - calls
	DCD	0	; IRQ 31 - time
	DCD	0	; IRQ 31 - calls
        DCD     0       ; IRQ 32 - time
        DCD     0       ; IRQ 32 - calls
        DCD     0       ; IRQ 33 - time
        DCD     0       ; IRQ 33 - calls
        DCD     0       ; IRQ 34 - time
        DCD     0       ; IRQ 34 - calls
        DCD     0       ; IRQ 35 - time
        DCD     0       ; IRQ 35 - calls
        DCD     0       ; IRQ 36 - time
        DCD     0       ; IRQ 36 - calls
        DCD     0       ; IRQ 37 - time
        DCD     0       ; IRQ 37 - calls
        DCD     0       ; IRQ 38 - time
        DCD     0       ; IRQ 38 - calls
        DCD     0       ; IRQ 39 - time
        DCD     0       ; IRQ 39 - calls
        DCD     0       ; IRQ 40 - time
        DCD     0       ; IRQ 40 - calls
        DCD     0       ; IRQ 41 - time
        DCD     0       ; IRQ 41 - calls
        DCD     0       ; IRQ 42 - time
        DCD     0       ; IRQ 42 - calls
        DCD     0       ; IRQ 43 - time
        DCD     0       ; IRQ 43 - calls
        DCD     0       ; IRQ 44 - time
        DCD     0       ; IRQ 44 - calls
        DCD     0       ; IRQ 45 - time
        DCD     0       ; IRQ 45 - calls
        DCD     0       ; IRQ 46 - time
        DCD     0       ; IRQ 46 - calls
        DCD     0       ; IRQ 47 - time
        DCD     0       ; IRQ 47 - calls
        DCD     0       ; IRQ 48 - time
        DCD     0       ; IRQ 48 - calls
        DCD     0       ; IRQ 49 - time
        DCD     0       ; IRQ 49 - calls
        DCD     0       ; IRQ 50 - time
        DCD     0       ; IRQ 50 - calls
        DCD     0       ; IRQ 51 - time
        DCD     0       ; IRQ 51 - calls
        DCD     0       ; IRQ 52 - time
        DCD     0       ; IRQ 52 - calls
        DCD     0       ; IRQ 53 - time
        DCD     0       ; IRQ 53 - calls
        DCD     0       ; IRQ 54 - time
        DCD     0       ; IRQ 54 - calls
        DCD     0       ; IRQ 55 - time
        DCD     0       ; IRQ 55 - calls
        DCD     0       ; IRQ 56 - time
        DCD     0       ; IRQ 56 - calls
        DCD     0       ; IRQ 57 - time
        DCD     0       ; IRQ 57 - calls
        DCD     0       ; IRQ 58 - time
        DCD     0       ; IRQ 58 - calls
        DCD     0       ; IRQ 59 - time
        DCD     0       ; IRQ 59 - calls
        DCD     0       ; IRQ 60 - time
        DCD     0       ; IRQ 60 - calls
        DCD     0       ; IRQ 61 - time
        DCD     0       ; IRQ 61 - calls
        DCD     0       ; IRQ 62 - time
        DCD     0       ; IRQ 62 - calls
        DCD     0       ; IRQ 63 - time
        DCD     0       ; IRQ 63 - calls
IRQ_other_timings
	DCD	0	; Some other IRQ - time
	DCD	0	; Some other IRQ - calls
IRQ_timings_end
	ASSERT	(IRQ_timings_end - IRQ_timings) = ?WSP_IRQinfo


; ****************************************************
; *
; * Read the time from timer zero (2 MHz timer). Taken from code in MPEGDriver module, written
; * by Ben Avison. Modified to read monotonic time direct from zero page rather than by using
; * OS_ReadMonotonicTime (because I'm going to be calling this from IRQ mode and I don't want
; * to fart-around preserving R14_svc - and I clearly want this to be fast!).
; *
; * In...
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R13	= preserved
; *   R14	= time from 2 MHz timer
; *
Clk_GetHiResTime Entry "R0-R4"
	MOV	R14, #0x10C		; Zero-page location of monotonic timer
	LDR	R14, [R14]		; R14 = cs timer, maybe out of date if IRQ not serviced
	MOV	R3, #&4E00
	ORR	R3, R3, #&20		; R3 = 2000000/100 - useful constant
	MUL	R14, R3, R14
	; Read IRQ status after reading Timer 0 to determine if cs timer is out of date.
	; In case Timer 0 wraps between reading Timer 0 and reading IRQ status, also read
	; IRQ status before reading Timer 0, and if the IRQ becomes set between the two
	; status reads, then ignore the actual Timer 0 read and behave as though we had
	; read the value just after it wrapped.
	MOV	R0, #IOC
	LDRB	R1, [R0, #IOCIRQREQA]
	STRB	R0, [R0, #Timer0LR]
	LDRB	R4, [R0, #Timer0LL]
	LDRB	R2, [R0, #Timer0LH]
	ORRS	R4, R4, R2, LSL #8	; Also clears C (useful later)
	LDRB	R2, [R0, #IOCIRQREQA]
	TST	R2, #timer0_bit		; Timer wrap IRQ pending?
	ADDNE	R14, R14, R3		; Add 1 cs if so
	EOR	R1, R1, R2
	TST	R1, #timer0_bit		; Did timer wrap?
	SBCEQ	R4, R3, R4		; R12 = 19999-Timer0 (note cunning use of C flag)
	ADDEQ	R14, R14, R4
	EXIT


; ****************************************************
; *
; * End of the block to copy into the RMA
; *
IRQ_code_end
 ] ; IRQPatch


	END
@


1.5
log
@  Merged in changes from Castle
Detail:
  IRQ debugging cose and swi vector code now RO5 compatible.
  May well have broken pre RO5 usage..
Admin:
  Not tested

Version 1.16. Tagged as 'DebugTools-1_16'
@
text
@d18 1
a18 3
MaxDevice	*	(IRQ_other_timings - IRQ_timings) :SHR: 2


d110 1
a110 1

d128 1
d134 2
d152 2
d162 1
d167 1
a167 1
	MOV	R2, #19
d186 14
a199 1
03	; Copy our IRQ handler code into RMA...
a208 1
	STR	R1, [R12, #WSP_IRQtable]
d220 1
d245 1
d265 2
d273 1
d277 1
a277 1

d316 1
d319 1
d348 1
d351 1
d638 1
@


1.4
log
@  Improved IRQ despatch vector searching code.
Details:
  The previous revision of this module needed to know the address of both the
  Kernel IRQ despatch code and the despatch vector table. To find this, it
  would attempt to use the OS_ReadSysInfo 6 call. If this failed (i.e. it is an
  older Kernel without the appropriate call), it would have to search for a
  known bit pattern "LDMIA R1,{R12,PC}" in the Cursor/System/Sound area.

  It was known that this routine could, on rare occasions, return a false
  positive from arbitrary data in that area (i.e. in the sound buffers).

  This routine has been improved to use the value of address &100, which is
  documented as being the address of the IRQ despatch code. Thus, we only
  search upwards from this for about 1KB (rather than the full 32KB of the
  area). This will radically reduce the chances of the false positives
  (although they /may/ still happen).
Admin:
  Tested using a RISC OS 3.70 failure case. Now works.

Version 1.12. Tagged as 'DebugTools-1_12'
@
text
@d496 64
@


1.3
log
@  * Fix to some pre-RISC OS 4 problems
  * Changed capitalisation of PushD, PopD and Pwd commands
  * Renamed *Devices and SWI Devices to IRQDevices
  * Updated spec
Detail:
  * There were a couple of sillies in some new (untested) code for when the
    module initialises on pre-RISC OS 4 machines. These would have caused a
    DataAbort in module initialisation.
  * Just to be a little more RISC OS, the help and syntax strings have been
    made more conventional for PushD, PopD and Pwd commands.
  * Devices is already used as a *command. This appears to have been missed
    in my allocation request. I've renamed it to *IRQDevices. To keep things
    orthoganal, the corresponding SWI has also been renamed.
Admin:
  Tested on A7000+ and various RiscPCs with various RO versions.

Version 1.06. Tagged as 'DebugTools-1_06'
@
text
@d169 3
a171 2
	MOV	R1, #0x01F00000		; Base of the Cursor/System/Sound area
	ADD	R4, R1, #32*1024	; End of that area (if 32K)
@


1.2
log
@  * IRQ timing stuff is now off by default;
  * Some of the new OS_ReadSysInfo 6 codes used (if available);
  * Some small tidying-up done.
Detail:
  The IRQ timing mechanism involves patching the Kernel's IRQ despatch
  code. This is now off by default. The first call to *IRQInfo will
  activate it. *IRQInfo can also be used to switch the mechanism off
  again.

  Some new subreason codes have recently been added to OS_ReadSysInfo
  6. DebugTools will use these values if they are available.

  The specification in the 'Docs' directory has been updated.
Admin:
  Tested on RO4 RiscPC (OS_ReadSysInfo success stuff untested).

Version 1.04. Tagged as 'DebugTools-1_04'
@
text
@d23 93
d131 1
d136 1
d143 1
d152 1
d160 1
d170 1
d174 1
a174 1
	CMP	R1, #0x01F800000
d177 1
d182 1
d190 1
d198 1
d228 1
d232 4
d241 1
a241 1
	LDR	R2, [R12, #WSP_IRQcode]
d247 1
a257 93
; * Replace our B instruction with the original LDMIA in the IRQ despatcher,
; * remove the ticker event and release IrqV.
; *
; * In...
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R2	= corrupted
; *   R3-R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
IRQ_unpatch Entry
	; Did we successfully install our code into the RMA? If not, exit...
	LDR	R2, [R12, #WSP_IRQtable]
	TEQ	R2, #0
	EXIT	EQ
	; Is IRQ patching already active? If not, exit...
	LDR	R14, [R12, #WSP_IRQactive]
	TST	R14, #1
	EXIT	EQ
	; Put back the original LDMIA instruction...
	LDR	R14, =0xE8919000	; = "LDMIA R1,{R12,PC}"
	STR	R14, [R2, #-4]!
	; Ensure that we don't have any cache problems...
	MOV	R0, #2_1
	MOV	R1, R2
	SWI	XOS_SynchroniseCodeAreas
	EXIT	VS
	; Remove the ticker event for our timing code...
	ADR	R0, IRQ_ticker
	MOV	R1, R12
	SWI	XOS_RemoveTickerEvent
	EXIT	VS
	; Set the activity flag back to "inactive"...
	MOV	R14, #0
	STR	R14, [R12, #WSP_IRQactive]
	EXIT

; ****************************************************
; *
; * Replace the LDMIA instruction in the IRQ despatcher with a branch to a copy
; * copy of our IRQ timing and despatch code in the RMA and create a ticker event
; * to copy the timing and other information over to a block in the module
; * workspace once a second.
; *
; * In...
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R2	= corrupted
; *   R3-R13	= preserved
; *   V flag	= set if R0 is a pointer to an error block
; *
IRQ_patch Entry
	; Did we successfully install our code into the RMA? If not, exit...
	LDR	R2, [R12, #WSP_IRQtable]
	TEQ	R2, #0
	EXIT	EQ
	; Is IRQ patching already active? If so, exit...
	LDR	R14, [R12, #WSP_IRQactive]
	TST	R14, #1
	EXIT	NE
	; Replace the LDMIA in the Kernel's despatch code with a B to our code...
	LDR	R1, [R12, #WSP_IRQcode]
	ADD	R14, R2, #4
	SUB	R14, R1, R14
	MOV	R14, R14, LSR #2
	; Exit if the branch target is too far away or below the source...
	TST	R14, #0xFF000000
	EXIT	NE
	ORR	R14, R14, #0xEA000000	; = "B IRQ_code"
	STR	R14, [R2, #-4]!
	; Ensure that we don't have any cache problems...
	MOV	R0, #2_1
	MOV	R1, R2
	SWI	XOS_SynchroniseCodeAreas
	EXIT	VS
	; Set flag bit to indicate that we are "active"....
	STR	R0, [R12, #WSP_IRQactive]
	; Install a ticker event to copy and reset the timings every second...
	MOV	R0, #99
	ADR	R1, IRQ_ticker
	MOV	R2, R12
	SWI	XOS_CallEvery
	EXIT


; ****************************************************
; *
d274 3
d292 1
@


1.1
log
@Initial revision
@
text
@d23 3
a25 2
; * Replace our B instruction with the original LDMIA in the IRQ despatcher, remove
; * the ticker event and release IrqV.
d36 60
a95 8
IRQ_unpatch Entry "R1-R2"
	; Have we patched the IRQ despatcher?
	LDR	R2, [R12, #WSP_IRQtable]
	LDR	R14, =0xE8919000	; = "LDMIA R1,{R12,PC}"
	TEQ	R2, #0
	BEQ	Iup			; No. Exit.
	; Put back the original LDMIA instruction...
	STR	R14, [R2, #-4]
d97 2
a98 3
	MOV	R0,#2_1
	SUB	R1,R2,#4
	MOV	R2,R1
d100 28
a127 1
	; Remove the ticker event for our timing code...
d131 8
a138 2
	BVS	Iup
	; Release the IRQ vector...
d143 2
a144 6
	BVS	Iup
	; Free the RMA block with our patch code in it...
	LDR	R2, [R12, #WSP_IRQcode]
	MOV	R0, #ModHandReason_Free
	SWI	XOS_Module
Iup	EXIT
d149 2
a150 8
; * Replace the LDMIA instruction in the IRQ despatcher with a branch to a copy
; * copy of our IRQ timing and despatch code in the RMA.
; *
; * We also create a ticker event to copy the timing and other information over
; * to a block in the module workspace once a second.
; *
; * Finally, we claim IrqV so that we can keep a record of any device numbers
; * which pass along there.
d157 3
a159 4
; *   R0-R3	= corrupted (or pointer to error block)
; *   R4-R9	= preserved
; *   R10-R11	= corrupted
; *   R12-R13	= preserved
d162 12
a173 33
IRQ_patch Entry
	; Scan through the Cursor/System/Sound area for two instructions...
	LDR	R0, =0xE8919000		; = "LDMIA R1,{R12,PC}"
	MOV	R11, #0x01F00000	; Base of the Cursor/System/Sound area
00	LDR	R14, [R11], #4
	TEQ	R14, R0
	BEQ	%FT01
	CMP	R11, #0x01F800000
	BLO	%BT00
	MOV	R11, #0
	STR	R11, [R12, #WSP_IRQtable]
	B	Ipa
01	;
	STR	R11, [R12, #WSP_IRQtable]
	SUB	R11, R11, #4
	ADR	R1, IRQ_code
	ADR	R10, IRQ_code_end
	; Claim a block of RMA...
	MOV	R0, #ModHandReason_Claim
	SUB	R3, R10, R1
	SWI	XOS_Module
	BVS	Ipa
	STR	R2, [R12, #WSP_IRQcode]
	; Copy our code into RMA...
	MOV	R3, R2
02	LDR	R14, [R1], #4
	STR	R14, [R3], #4
	CMP	R1, R10
	BLO	%BT02
	;
	; R2  -> base of copied code
	; R11 -> LDM instruction's address
	;
a176 1
	SUB	R2, R3, #4
d178 40
a217 3
	BVS	Ipa
	; Replace the LDMIA with a B to our code...
	ADD	R14, R11, #8
d222 6
a227 7
	; Ensure cache coherency on Harvard-like CPUs...
	BNE	Ipa
	ORR	R14, R14, #0xEA000000
	STR	R14, [R11]
	MOV	R0,#2_1
	MOV	R1,R11
	MOV	R2,R1
d229 3
a231 1
	BVS	Ipa
d237 1
a237 15
	BVS	Ipa
	; Claim the IRQ vector...
	MOV	R0, #IrqV
	ADR	R1, IrqV_handler
	MOV	R2, R12
	SWI	XOS_Claim
	BVS	Ipa
	; Initialise our count of unclaimed IRQs to zero...
	MOV	R0, #0
	ADD	R1, R12, #WSP_UnkIRQCount
	ADD	R2, R1, #4*IRQs
03	STR	R0, [R1], #4
	CMP	R1, R2
	BLO	%BT03
Ipa	EXIT
@


1.1.1.1
log
@Initial import of the DebugTools component.
@
text
@@
