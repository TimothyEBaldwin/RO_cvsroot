head	1.2;
access;
symbols
	DebugTools-1_20:1.2
	DebugTools-1_19:1.2
	DebugTools-1_18:1.2
	DebugTools-1_17:1.2
	DebugTools-1_16:1.2
	DebugTools-1_15:1.2
	DebugTools-1_14:1.2
	DebugTools-1_13:1.2
	DebugTools-1_12:1.2
	DebugTools-1_11:1.2
	DebugTools-1_10:1.2
	DebugTools-1_09:1.2
	DebugTools-1_08:1.2
	DebugTools-1_07:1.2
	DebugTools-1_06:1.2
	DebugTools-1_05:1.2
	DebugTools-1_04:1.2
	DebugTools-1_03:1.2
	DebugTools-1_02:1.2
	DebugTools-1_01:1.1.1.1
	DebugTools-1_00:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2001.06.07.23.26.29;	author srevill;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.30.16.20.57;	author srevill;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.30.16.20.57;	author srevill;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  * Added a little bit of bomb-proofing to DebugTools' SWI XOS_Write bits;

  * Significant improvements made to the DebugTest module.
Detail:
  * Sequences of OS_WriteX, OS_NewLine and OS_ConvertXXX have been made a
    little more secure using the VC condition code (where appropriate). I
    haven't done this with OS_WriteS of course!

  * The DebugTest module is now quite handy for watching both OS_Module
    and OS_Heap calls - it provides four *commands:

      *OSModule    *OSModule_Read    *OSHeap    *OSHeap_Read

    These commands allow you to watch the number of calls to these SWIs
    for all of the reason codes, and the distribution of block sizes for
    claims. Handy if you're working on OS_Heap (or any heap algorithm).

    It's not yet very useful for tracking memory leaks.
Admin:
  Tested on RiscPC.

Version 1.02. Tagged as 'DebugTools-1_02'
@
text
@DebugTest - ReadMe
~~~~~~~~~~~~~~~~~~
This module adds a claimant to the OS_Module SWI vector which counts the
number of calls to each OS_Module reason code. For reason 6 (claim), it
keeps a count of the number of claims for various block sizes. It also
adds on onto the OS_Heap SWI vector to do the same thing.

Commands:

  *OSModule      - Read OS_Module counters and reset them to zero
  *OSModule_Read - Read OS_Module counters
  *OSHeap        - Read OS_Heap counters and reset them to zero
  *OSHeap_Read   - Read OS_Heap counters and reset them to zero

Some example output:

  OS_Module calls:
    R0=0 0
    R0=1 3
    R0=2 85
    R0=3 9
    R0=4 0
    R0=5 183
    R0=6 10448                <- Claim reason code
      R3=0..3 13 (0%)         <- Number of claims of 0..3 bytes
      R3=4..7 166 (2%)        <- Number of claims of 4..7 bytes
      R3=8..15 1320 (13%)
      R3=16..31 460 (4%)
      R3=32..63 2497 (24%)
      R3=64..127 1215 (12%)
      R3=128..255 197 (2%)
      R3=256..511 3039 (29%)
      R3=512..1023 775 (7%)
      R3=1024+ 766 (7%)       <- Number of claims over 1023 bytes
    R0=7 8948                 <- Free reason code
    R0=8 0
    R0=9 0
    R0=10 22
    R0=11 1
    R0=12 5338
    R0=13 2552
    R0=14 0
    R0=15 0
    R0=16 0
    R0=17 0
    R0=18 922
    R0=19 0
    R0=20 0

-- SAR, 07th Jun 2001
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1

d5 2
a6 1
keeps a count of the number of claims for various block sizes.
d8 1
a8 1
Command syntax:
d10 4
a13 1
  *OSModule
d19 17
a35 19
    R0=1 6
    R0=2 103
    R0=3 0
    R0=4 15
    R0=5 456
    R0=6 101844           <- there were 101,844 "claim" calls in total
      R3=4 19448          <- claims of 4 bytes or less
      R3=8 28046
      R3=16 2573
      R3=32 29763
      R3=64 8059
      R3=128 2471
      R3=256 7398
      R3=512 463
      R3=1024 1133
      R3=2048 1784
      R3=4096 191
      R3=8192 515         <- claims of > 4096 bytes
    R0=7 101538           <- there were 101,538 "free" calls
d38 5
a42 5
    R0=10 5
    R0=11 12
    R0=12 2328
    R0=13 2072
    R0=14 4
d46 1
a46 1
    R0=18 890
d50 1
a50 6
Notes:

All the counters are reset to zero as they are read using this *command,
giving totals since the last call to the command.

-- SAR, 29th May 2001
@


1.1.1.1
log
@Initial import of the DebugTools component.
@
text
@@
