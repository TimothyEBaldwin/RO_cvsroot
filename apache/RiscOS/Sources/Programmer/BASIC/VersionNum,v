head	4.60;
access;
symbols
	BASIC-1_75:4.60
	BASIC-1_74:4.59
	BASIC-1_73:4.58
	BASIC-1_72:4.57
	BASIC-1_71:4.55
	BASIC-1_70:4.54
	BASIC-1_69:4.53
	BASIC-1_68:4.52
	BASIC-1_67:4.51
	BASIC-1_66:4.50
	BASIC-1_65:4.49
	BASIC-1_64:4.48
	BASIC-1_63:4.47
	BASIC-1_62:4.46
	BASIC-1_61:4.45
	BASIC-1_60:4.44
	BASIC-1_59:4.43
	BASIC-1_58:4.40
	BASIC-1_57-pre4:4.38
	BASIC-1_57:4.39
	BASIC-1_57-pre3:4.38
	BASIC-1_57-pre2:4.38
	BASIC-1_57-pre1:4.38
	BASIC-1_56:4.38
	BASIC-1_55:4.37
	BASIC-1_54:4.36
	BASIC-1_53:4.34
	BASIC-1_52:4.33
	BASIC-1_51:4.32
	BASIC-1_50:4.30
	BASIC-1_49:4.29
	BASIC-1_48:4.28
	BASIC-1_47:4.27
	BASIC-1_46:4.26
	BASIC-1_45:4.25
	BASIC-1_44:4.24
	BASIC-1_43:4.23
	BASIC-1_42:4.22
	BASIC-1_41:4.21
	BASIC-1_40:4.20
	BASIC-1_39:4.19
	BASIC-1_37:4.18
	RO_5_07:4.17
	BASIC-1_36:4.17
	BASIC-1_35:4.16
	BASIC-1_34:4.15
	BASIC-1_33:4.14
	BASIC-1_32:4.13
	BASIC-1_31:4.12
	BASIC-1_30:4.11
	BASIC-1_29:4.10
	BASIC-1_28:4.9
	BASIC-1_27:4.8
	BASIC-1_26:4.7
	BASIC-1_25:4.6
	BASIC-1_24:4.5
	BASIC-1_23:4.4
	BASIC-1_22:4.3
	BASIC-1_21:4.2
	BASIC-1_20:4.1;
locks; strict;
comment	@# @;


4.60
date	2018.03.03.19.29.37;	author jlee;	state Exp;
branches;
next	4.59;
commitid	SHWFXEgT9NmaY2tA;

4.59
date	2018.02.25.18.47.30;	author jlee;	state Exp;
branches;
next	4.58;
commitid	plJX5OQyK2HFVgsA;

4.58
date	2017.09.18.21.18.57;	author jlee;	state Exp;
branches;
next	4.57;
commitid	u9VOjCk1jnCuUI7A;

4.57
date	2017.09.18.07.05.41;	author rsprowson;	state Exp;
branches;
next	4.56;
commitid	38lZJju07ZzLbE7A;

4.56
date	2017.09.07.19.34.31;	author rsprowson;	state Exp;
branches;
next	4.55;
commitid	ulAIao6m9bYzGi6A;

4.55
date	2017.07.27.19.58.45;	author rsprowson;	state Exp;
branches;
next	4.54;
commitid	zr7FfPImnoVAaU0A;

4.54
date	2017.07.22.21.50.55;	author jlee;	state Exp;
branches;
next	4.53;
commitid	CDYQ0yZDiBs2Xg0A;

4.53
date	2017.07.21.20.20.26;	author rsprowson;	state Exp;
branches;
next	4.52;
commitid	M1DaUmTbhIPZt80A;

4.52
date	2017.06.13.20.59.50;	author rsprowson;	state Exp;
branches;
next	4.51;
commitid	D0NJjCSdAYCeVfVz;

4.51
date	2017.06.03.22.30.14;	author jlee;	state Exp;
branches;
next	4.50;
commitid	3Iuze3DCMuQaKYTz;

4.50
date	2017.04.13.21.50.57;	author jlee;	state Exp;
branches;
next	4.49;
commitid	ZJzmjWTA1gDlaqNz;

4.49
date	2017.03.30.21.47.20;	author jlee;	state Exp;
branches;
next	4.48;
commitid	lqoHPvfEgWn0BCLz;

4.48
date	2017.03.04.18.00.25;	author jlee;	state Exp;
branches;
next	4.47;
commitid	hnxezA9QYnbYagIz;

4.47
date	2017.01.24.21.57.05;	author rsprowson;	state Exp;
branches;
next	4.46;
commitid	y7O4YdywpmiTJgDz;

4.46
date	2016.05.28.19.06.08;	author jlee;	state Exp;
branches;
next	4.45;
commitid	ve1nDur0pc1xxh8z;

4.45
date	2015.08.01.21.29.16;	author jlee;	state Exp;
branches;
next	4.44;
commitid	et9f6cBOf4Eu0Cvy;

4.44
date	2015.04.14.06.55.59;	author alees;	state Exp;
branches;
next	4.43;
commitid	HlqkBsA4wuh7Gwhy;

4.43
date	2014.09.24.21.07.28;	author bavison;	state Exp;
branches;
next	4.42;
commitid	qciAFgpcX9uOSDRx;

4.42
date	2014.06.02.20.14.58;	author rsprowson;	state Exp;
branches;
next	4.41;
commitid	CN0eflD4efCZfZCx;

4.41
date	2014.06.01.13.42.57;	author rsprowson;	state Exp;
branches;
next	4.40;
commitid	0vJpjRB0NH5v7PCx;

4.40
date	2014.04.29.12.59.57;	author bavison;	state Exp;
branches;
next	4.39;
commitid	kblWeZfq7rQvWzyx;

4.39
date	2013.12.01.18.09.26;	author rsprowson;	state Exp;
branches;
next	4.38;
commitid	g83hl4RCFV1Crsfx;

4.38
date	2013.11.30.14.31.26;	author jlee;	state Exp;
branches;
next	4.37;
commitid	d3jQbefmORBPgjfx;

4.37
date	2013.11.16.15.11.41;	author jlee;	state Exp;
branches;
next	4.36;
commitid	jvN3UHKLDaoxWvdx;

4.36
date	2013.04.26.23.56.11;	author bavison;	state Exp;
branches;
next	4.35;
commitid	yh0dw8l4k162plNw;

4.35
date	2013.04.26.23.31.29;	author bavison;	state Exp;
branches;
next	4.34;
commitid	j9s7yCUXNRcyglNw;

4.34
date	2012.09.18.08.31.44;	author rsprowson;	state Exp;
branches;
next	4.33;
commitid	NTbYO0WLMZXjmZkw;

4.33
date	2012.07.09.00.38.16;	author jlee;	state Exp;
branches;
next	4.32;
commitid	YRf5ENCfqz9o1Pbw;

4.32
date	2012.03.25.12.43.04;	author jlee;	state Exp;
branches;
next	4.31;
commitid	M1DVPKKg46UhrgYv;

4.31
date	2012.03.08.20.48.59;	author jlee;	state Exp;
branches;
next	4.30;
commitid	yE826IbqBRjSF7Wv;

4.30
date	2012.03.07.23.34.17;	author jlee;	state Exp;
branches;
next	4.29;
commitid	mqtCES9yyNSyC0Wv;

4.29
date	2011.12.19.16.48.19;	author jlee;	state Exp;
branches;
next	4.28;
commitid	pdX82Kz8wJDIUOLv;

4.28
date	2011.12.11.10.50.57;	author rsprowson;	state Exp;
branches;
next	4.27;
commitid	NFCqD5WYgdA4cLKv;

4.27
date	2011.12.06.00.05.14;	author jlee;	state Exp;
branches;
next	4.26;
commitid	HdaUfBbwZO6xM3Kv;

4.26
date	2011.09.28.08.23.24;	author rsprowson;	state Exp;
branches;
next	4.25;
commitid	5JO6nnQo1VYVKeBv;

4.25
date	2011.09.24.14.56.24;	author jlee;	state Exp;
branches;
next	4.24;
commitid	9jCYb6wAmHSH3LAv;

4.24
date	2009.06.16.00.05.21;	author bavison;	state Exp;
branches;
next	4.23;

4.23
date	2009.05.17.02.31.50;	author bavison;	state Exp;
branches;
next	4.22;

4.22
date	2009.05.10.19.04.42;	author jlee;	state Exp;
branches;
next	4.21;

4.21
date	2009.04.24.00.35.14;	author srevill;	state Exp;
branches;
next	4.20;

4.20
date	2009.04.24.00.27.13;	author srevill;	state Exp;
branches;
next	4.19;

4.19
date	2008.10.04.21.31.36;	author bavison;	state Exp;
branches;
next	4.18;

4.18
date	2005.05.27.08.41.29;	author kbracey;	state Exp;
branches;
next	4.17;

4.17
date	2004.06.21.17.21.08;	author mhobbs;	state Exp;
branches;
next	4.16;

4.16
date	2003.03.03.18.27.20;	author kbracey;	state Exp;
branches;
next	4.15;

4.15
date	2002.12.02.19.57.21;	author bavison;	state Exp;
branches;
next	4.14;

4.14
date	2002.12.02.19.50.01;	author bavison;	state Exp;
branches;
next	4.13;

4.13
date	2002.10.18.12.27.18;	author kbracey;	state Exp;
branches;
next	4.12;

4.12
date	2002.06.17.11.03.55;	author srevill;	state Exp;
branches;
next	4.11;

4.11
date	2002.04.23.15.48.32;	author srevill;	state Exp;
branches;
next	4.10;

4.10
date	2001.09.14.17.36.24;	author srevill;	state Exp;
branches;
next	4.9;

4.9
date	2001.05.15.10.28.11;	author kbracey;	state Exp;
branches;
next	4.8;

4.8
date	2001.05.11.09.31.10;	author sbrodie;	state Exp;
branches;
next	4.7;

4.7
date	2001.04.20.09.47.35;	author kbracey;	state Exp;
branches;
next	4.6;

4.6
date	2001.03.26.09.49.29;	author dellis;	state Exp;
branches;
next	4.5;

4.5
date	2001.03.16.19.11.50;	author srevill;	state Exp;
branches;
next	4.4;

4.4
date	2001.03.14.20.00.30;	author srevill;	state Exp;
branches;
next	4.3;

4.3
date	2001.02.23.11.33.39;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	2001.02.22.17.17.18;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	2000.11.21.12.57.58;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


4.60
log
@Avoid global OS_SynchroniseCodeAreas
Detail:
  s/Assembler - Have the inline assembler keep track of the original P% value, so the OS_SynchroniseCodeAreas call that's made on exit can be a ranged op instead of a global one
Admin:
  Tested on iMX6
  Resolves some performance issues with SMP ROM, where global OS_SynchroniseCodeAreas actually does a ranged clean of RMA + AppSpace due to lack of global D-cache clean


Version 1.75. Tagged as 'BASIC-1_75'
@
text
@/* (1.75)
 *
 * This file is automatically maintained by srccommit, do not edit manually.
 * Last processed by srccommit version: 1.1.
 *
 */
#define Module_MajorVersion_CMHG        1.75
#define Module_MinorVersion_CMHG        
#define Module_Date_CMHG                03 Mar 2018

#define Module_MajorVersion             "1.75"
#define Module_Version                  175
#define Module_MinorVersion             ""
#define Module_Date                     "03 Mar 2018"

#define Module_ApplicationDate          "03-Mar-18"

#define Module_ComponentName            "BASIC"
#define Module_ComponentPath            "castle/RiscOS/Sources/Programmer/BASIC"

#define Module_FullVersion              "1.75"
#define Module_HelpVersion              "1.75 (03 Mar 2018)"
#define Module_LibraryVersionInfo       "1:75"
@


4.59
log
@VFP/NEON assembler improvements
Detail:
 - Makefile - Add hdr.VFPMacros as a dependency of VFPData
 - Tests/VFP/TestVFP,ffb - Add some assembly tests for the new instructions
 - VFPLib/VFPLib - Remove some non-standard patterns ('D' and 'F' used as data type specifiers). Add the ARMv8 (AArch32) VFP/NEON instructions, and VFPv3 half-precision VCVTB/VCVTT
 - hdr/VFPMacros - Save a few KB of ROM space by changing some tables to use halfword elements instead of words
 - s/VFP - Add VFP_LDRH macro to deal with the compressed tables. Fix VMRS of MVFRn registers (erroneously attempted to convert the digit to upper-case), and add MVFR2
Admin:
  Tested on Raspberry Pi 3


Version 1.74. Tagged as 'BASIC-1_74'
@
text
@d1 1
a1 1
/* (1.74)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.74
d9 1
a9 1
#define Module_Date_CMHG                25 Feb 2018
d11 2
a12 2
#define Module_MajorVersion             "1.74"
#define Module_Version                  174
d14 1
a14 1
#define Module_Date                     "25 Feb 2018"
d16 1
a16 1
#define Module_ApplicationDate          "25-Feb-18"
d21 3
a23 3
#define Module_FullVersion              "1.74"
#define Module_HelpVersion              "1.74 (25 Feb 2018)"
#define Module_LibraryVersionInfo       "1:74"
@


4.58
log
@Adjust VFP error handling
Detail:
  s/ErrorMsgs - Give the VFP "invalid operation" error a more useful error number, and correct the embedded text to match what's in the Resources file. Add VFPExcetion_SQRT, to allow "negative root" errors to be generated by FSQRTD error checks.
  hdr/Definitions - Update FPSCRCheck macro to allow alternate error handlers to be specified
  s/Array, s/Factor - Update FSQRTD error checks to use VFPException_SQRT, so that they say "negative root" instead of "invalid operation"
Admin:
  Tested on Raspberry Pi


Version 1.73. Tagged as 'BASIC-1_73'
@
text
@d1 1
a1 1
/* (1.73)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.73
d9 1
a9 1
#define Module_Date_CMHG                18 Sep 2017
d11 2
a12 2
#define Module_MajorVersion             "1.73"
#define Module_Version                  173
d14 1
a14 1
#define Module_Date                     "18 Sep 2017"
d16 1
a16 1
#define Module_ApplicationDate          "18-Sep-17"
d21 3
a23 3
#define Module_FullVersion              "1.73"
#define Module_HelpVersion              "1.73 (18 Sep 2017)"
#define Module_LibraryVersionInfo       "1:73"
@


4.57
log
@Renumber 'Bad MODE' for beeb compatibility
Bad MODE is ERR=25 on the BBC Micro, follow suit here, and correct the message file token number (should be 13 to match earlier reorganisation).

Version 1.72. Not tagged
@
text
@d1 1
a1 1
/* (1.72)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.72
d11 2
a12 2
#define Module_MajorVersion             "1.72"
#define Module_Version                  172
d21 3
a23 3
#define Module_FullVersion              "1.72"
#define Module_HelpVersion              "1.72 (18 Sep 2017)"
#define Module_LibraryVersionInfo       "1:72"
@


4.56
log
@Automatically pick the best FP model for the hosting CPU
Have BASIC V pick either BASICVFP or BASIC VI as appropriate for the current CPU, so if there's VFP hardware don't emulate everything as FPA opcodes.
The BASIC64 command (moved to BASIC V) will now automatically RMEnsure then enter the respective module. If there's something depending on the internal workings of BASIC VI and wishes to explicitly select that even when VFP is present a new command, *BASICFPA, forces BASIC VI to start.
By having BASIC V manage this selection we in effect remove the requirement to remember to RMEnsure the floating point version, which is usually either forgotten about or wrong anyway.
Compatibility wise
  RISC OS 5 includes all 3 variants (2 if no VFP) and will adopt the new logic.
  Existing RISC OS 5 stable releases have always included BASIC V and VI, so will work as before (through emulating FPA).
  Soft loaded modules inside !System will be handled by a disc based update.
Changed files
  CmdHelp: adds the new BASIC64 help/syntax message
  Basic.s: qualify the FPA version in it's startup banner
  ModHead.s: add the new selection logic, and move the 'VFP' help to be a suffix so the module names line up nicely in *Modules again
Tested in both ROM and disc based guises on ARMs with and without VFP hardware.

Version 1.72. Tagged as 'BASIC-1_72'
@
text
@d9 1
a9 1
#define Module_Date_CMHG                07 Sep 2017
d14 1
a14 1
#define Module_Date                     "07 Sep 2017"
d16 1
a16 1
#define Module_ApplicationDate          "07-Sep-17"
d22 1
a22 1
#define Module_HelpVersion              "1.72 (07 Sep 2017)"
@


4.55
log
@Suppress help on TWIN/TWINO
The TWIN & TWINO commands were changed to cause 'Mistake' in BASIC 1.54, but because we retain the tokens in the token table (so that programs which include the tokens can still be read) they still appeared in response to HELP. Notch then out of the HELP.
In removing the HTWIN and HTWINO tokenised HELP lookup this revealed that the end of table marker was wrong and BASIC kept scanning until it fell off the end of memory - the code expects a terminator of 127.
In fixing that it turned out that in BASIC 1.23 the token for 'HELPTOKENNO' was accidentally turned into an error message, and subsequently into token 'E13', when in fact it's only ever looked up as text (not an error).
Put this back as string shorter 'HHELPNO' and use the slot for E13 for the new 'Bad MODE' error from BASIC 1.70; delete HTWIN and HTWINO.

Version 1.71. Tagged as 'BASIC-1_71'
@
text
@d1 1
a1 1
/* (1.71)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.71
d9 1
a9 1
#define Module_Date_CMHG                27 Jul 2017
d11 2
a12 2
#define Module_MajorVersion             "1.71"
#define Module_Version                  171
d14 1
a14 1
#define Module_Date                     "27 Jul 2017"
d16 1
a16 1
#define Module_ApplicationDate          "27-Jul-17"
d21 3
a23 3
#define Module_FullVersion              "1.71"
#define Module_HelpVersion              "1.71 (27 Jul 2017)"
#define Module_LibraryVersionInfo       "1:71"
@


4.54
log
@MODE improvements
Detail:
  1. MODE <string> now uses OS_ScreenMode 15 rather than *WimpMode, to avoid programs which use it (likely unintentionally) altering the Wimp mode or having to worry about preserving it
  2. If OS_ScreenMode 15 isn't supported, use our own mode string parsing code that provides a similar level of functionality to the host system's *WimpMode
  3. For all MODE variants which use OS_ScreenMode, detect any "SWI not known" error and replace it with "Bad MODE" (under the assumption the user is running pre-OS 3.5)
  4. Add a new variant, MODE <x>,<y>,<modeflags>,<ncolour>,<log2bpp>[,<hz>] to allow specification of the three parameters necessary for selecting the new screen modes introduced by RISC OS Select/5
  Files: Resources/UK/CmdHelp, Resources/UK/Messages, s/ErrorMsgs, s/ModHead, s/Stmt2
Admin:
  Tested on RISC OS 3.1, 3.7, and latest 5.23


Version 1.70. Tagged as 'BASIC-1_70'
@
text
@d1 1
a1 1
/* (1.70)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.70
d9 1
a9 1
#define Module_Date_CMHG                22 Jul 2017
d11 2
a12 2
#define Module_MajorVersion             "1.70"
#define Module_Version                  170
d14 1
a14 1
#define Module_Date                     "22 Jul 2017"
d16 1
a16 1
#define Module_ApplicationDate          "22-Jul-17"
d21 3
a23 3
#define Module_FullVersion              "1.70"
#define Module_HelpVersion              "1.70 (22 Jul 2017)"
#define Module_LibraryVersionInfo       "1:70"
@


4.53
log
@Debugger symmetry, assembler fixes, and add AArch32 ARMv8 instructions
SRS changed to accept R13 as a synonym for SP.
Fix stack imbalance in CHKCOPRO, CHKREG1 expected R14 & R1 to be stacked but only R1 was, so a copro number not starting CP
  CDP 5,0,C1,C2,C3
for example led to a abort on instruction fetch when returning from CHKREG.
The syntax help for STC and LDC was missing the <cpreg> source/dest register.
Fix for LDREXH & STREXH rejecting odd numbered Rt. The check for -EXD was only looking at 1 of the 2 size bits in the output instruction, so -EX and -EXB allowed odd Rt, but -EXH inherited the checks intended for only -EXD.
ARMv8: Added ISHLD/NSHLD/OSHLD/LD options to DMB & DSB; HLT #imm16; SEVL; CRC32; LDA[B|H]; LDAEX[B|H|D], STL[B|H]; STLEX[B|H|D].
This completes the review of all the opcodes (see also BASIC-1_63).

Tests/ARMv6v7/TestARMv8 has samples of the new opcodes in action.

Version 1.69. Tagged as 'BASIC-1_69'
@
text
@d1 1
a1 1
/* (1.69)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.69
d9 1
a9 1
#define Module_Date_CMHG                21 Jul 2017
d11 2
a12 2
#define Module_MajorVersion             "1.69"
#define Module_Version                  169
d14 1
a14 1
#define Module_Date                     "21 Jul 2017"
d16 1
a16 1
#define Module_ApplicationDate          "21-Jul-17"
d21 3
a23 3
#define Module_FullVersion              "1.69"
#define Module_HelpVersion              "1.69 (21 Jul 2017)"
#define Module_LibraryVersionInfo       "1:69"
@


4.52
log
@Follow the ARM ARM for VFP opcode VDUP despite a tokens clash
Earlier versions of the VFP assembler extensions cooked up VDPL as a way to dodge the problem of opcode VDUP being tokenised as VDUPRINT when used in its scalar or unconditional form (ie. VDUP.<size> <regs>).
This can be handled with an exception in the tokeniser in a similar manner to MOVEQ and ORR in the conventional ARM instruction set.
VFPLib: change the tables to use VDUP rather than VDPL.
Lexical.s: watch out for specifically VDUP. and tokenise it as VDU followed by a P in memory.
Assembler.s: watch out for token VDU followed by a P and take it to be VDUP.
VFP.s: when matching, allow the token for VDU to expand as though VDU was seen, also, add support for backslash and REM comments (previously only semicolon was allowed).
Tests/VFP/TestVFP: update the test case and 3 other failing tests from earlier fixes.
Tests/Match/TokVDUP: brute force trial of all combinations of VDU and PRINT, to check only VDUP. is caught.

Version 1.68. Tagged as 'BASIC-1_68'
@
text
@d1 1
a1 1
/* (1.68)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.68
d9 1
a9 1
#define Module_Date_CMHG                13 Jun 2017
d11 2
a12 2
#define Module_MajorVersion             "1.68"
#define Module_Version                  168
d14 1
a14 1
#define Module_Date                     "13 Jun 2017"
d16 1
a16 1
#define Module_ApplicationDate          "13-Jun-17"
d21 3
a23 3
#define Module_FullVersion              "1.68"
#define Module_HelpVersion              "1.68 (13 Jun 2017)"
#define Module_LibraryVersionInfo       "1:68"
@


4.51
log
@Add "BASICVFP", a VFP version of BASIC64
Detail:
  See Doc/BASICVFP for overall design/specification
  File changes:
  - !Mk,fd7, !MkClean,fd7, !MkRom,fd7, Makefile - update build scripts to support BASICVFP target
  - Resources/UK/Messages - Add a few new messages
  - hdr/Definitions - Define BASICVFP register usage and a few utility macros
  - hdr/WorkSpace - Define BASICVFP workspace adjustments. Add a few asserts to check some workspace constraints are maintained.
  - s/* - Lots of changes to add support for BASICVFP variant of the module
Admin:
  Tested on Raspberry Pi 1/2/3, BB-xM


Version 1.67. Tagged as 'BASIC-1_67'
@
text
@d1 1
a1 1
/* (1.67)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.67
d9 1
a9 1
#define Module_Date_CMHG                03 Jun 2017
d11 2
a12 2
#define Module_MajorVersion             "1.67"
#define Module_Version                  167
d14 1
a14 1
#define Module_Date                     "03 Jun 2017"
d16 1
a16 1
#define Module_ApplicationDate          "03-Jun-17"
d21 3
a23 3
#define Module_FullVersion              "1.67"
#define Module_HelpVersion              "1.67 (03 Jun 2017)"
#define Module_LibraryVersionInfo       "1:67"
@


4.50
log
@Restore old number formatting logic
Detail:
  The BASIC64 number formatting code was found to be significantly different to the BASIC105 formatting code, and a potential source of compatibility issues due to the various bugs and quirks it seemed to contain
  To resolve this, the BASIC105 number formatting code has been resurrected and adapted to allow it to be used by both BASIC105 and BASIC64
  The formatting code still uses BCD internally, so accuracy will be the same as BASIC 1.65. It's just the formatting discrepancies (for both BASIC versions) which will have been affected.
  MAXDIGS has also been revised again; the +2 is no longer required (was a BASIC64 quirk), so BASIC105 is down to 11 (up from 10 in pre-1.65 versions) and BASIC64 has reverted to the historic value of 18 (which is technically one more than necessary)
  File changes:
  s/fp2 - Updated as described above
  Tests/Math/AtPercent,ffb - New test program which compares the E/F/G number formatting code against a (BASIC105-style) reference model for the number formatting implemented in BASIC
Admin:
  Tested on Raspberry Pi
  Fixes issue reported on forums:
  https://www.riscosopen.org/forum/forums/4/topics/9199


Version 1.66. Tagged as 'BASIC-1_66'
@
text
@d1 1
a1 1
/* (1.66)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.66
d9 1
a9 1
#define Module_Date_CMHG                13 Apr 2017
d11 2
a12 2
#define Module_MajorVersion             "1.66"
#define Module_Version                  166
d14 1
a14 1
#define Module_Date                     "13 Apr 2017"
d16 1
a16 1
#define Module_ApplicationDate          "13-Apr-17"
d21 3
a23 3
#define Module_FullVersion              "1.66"
#define Module_HelpVersion              "1.66 (13 Apr 2017)"
#define Module_LibraryVersionInfo       "1:66"
@


4.49
log
@Increase accuracy of 5-byte float to string conversion
Detail:
  This change rewrites the BASIC105 version of the FCONA routine so that it converts the value to FPA packed decimal format, with ~16 decimal digits of accuracy. To avoid adding an FPA dependency to BASIC105 this is done via a new, custom routine.
  Apart from improving the accuracy of the result, converting to packed decimal allows the rest of the function body to be shared with the BASIC64 variant of the routine.
  File changes:
  s/fp2 - Updated as above. New FACCtoBCD function added to perform the BCD/packed decimal conversion. MAXDIGS for BASIC105 increased to 11+2. Minor FRDFPEXPBIN optimisation.
Admin:
  Tested on BB-xM
  Although the new FCONA implementation is known not to be fully accurate, testing with Test.Math.Decimal shows a marked improvement over the previous implementation, with ~100m random float -> string -> float conversions being performed without any loss of accuracy


Version 1.65. Tagged as 'BASIC-1_65'
@
text
@d1 1
a1 1
/* (1.65)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.65
d9 1
a9 1
#define Module_Date_CMHG                30 Mar 2017
d11 2
a12 2
#define Module_MajorVersion             "1.65"
#define Module_Version                  165
d14 1
a14 1
#define Module_Date                     "30 Mar 2017"
d16 1
a16 1
#define Module_ApplicationDate          "30-Mar-17"
d21 3
a23 3
#define Module_FullVersion              "1.65"
#define Module_HelpVersion              "1.65 (30 Mar 2017)"
#define Module_LibraryVersionInfo       "1:65"
@


4.48
log
@Fixes and improvements
Detail:
  s/Expr - Clean up some confusing code relating to l-value address offsets in LOOKU5. The old code looked like it contained a bug for BASIC64 (two TEQs back-to-back), but the situations LOOKU5 is called in meant it was fine and the TEQs were actually unnecessary.
  s/HelpMsgs - Fix MSGPRNXXX and friends corrupting R1. Was causing LVAR to crash/malfunction when listing functions/procedures.
  s/Stmt2 - Fix rotated ellipses being completely broken in BASIC64. Looks like this has been broken forever (bug appears to be present in BASIC64 1.05, as supplied with RISC OS 3)
  s/fp2 - Increase MAXDIGS by one for BASIC64, to allow for accurate float -> string conversion for numbers of the form 0.0XXXX when using G format.
  s/fp2 - Rewrite BASIC64's string -> float conversion code. Although the old code was believed to be sufficiently accurate, excessive use of FPA instructions made it rather slow, and a poor fit for any future VFP version of BASIC (the code relied on extended precision for accuracy, which VFP lacks). The new version converts to packed decimal and then relies on FPEmulator to perform the decimal -> float conversion via LDFP (to mirror float -> string conversion via STFP). The reduction in FP instructions makes it many times faster than the original ("Decimal" test runs 5x faster)
  Tests/CALL,ffb, Tests/Math/Array,ffb, Tests/Math/Decimal,ffb, Tests/Math/ELLIPSE,ffb - Add a handful of new test programs.
Admin:
  Tested on BB-xM


Version 1.64. Tagged as 'BASIC-1_64'
@
text
@d1 1
a1 1
/* (1.64)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.64
d9 1
a9 1
#define Module_Date_CMHG                04 Mar 2017
d11 2
a12 2
#define Module_MajorVersion             "1.64"
#define Module_Version                  164
d14 1
a14 1
#define Module_Date                     "04 Mar 2017"
d16 1
a16 1
#define Module_ApplicationDate          "04-Mar-17"
d21 3
a23 3
#define Module_FullVersion              "1.64"
#define Module_HelpVersion              "1.64 (04 Mar 2017)"
#define Module_LibraryVersionInfo       "1:64"
@


4.47
log
@Assembler/Debugger round trip improvements
Review of opcodes of the form
  OP<c> {#}imm
this summarises the ones the BASIC assembler accepts:
  SVC #imm, SVC imm, SWI imm (Debugger emits SWI imm)
  DBG #imm, DGB imm          (Debugger emits DBG imm)
  SMC #imm, SMC imm, SMI imm (Debugger emits SMI imm)
  HVC #imm, HVC imm          (Debugger emits HVC imm)
  BKPT #imm, BKPT imm        (Debugger emits BKPT imm)
Assembler.s: Add SMI as a synonym for SMC.
CmdHelp: Add all the missing v6/v7 opcodes to the help.
HelpMsgs.s: Split the terse yet huge assembler help (HELP [) into 3 to avoid needing 4k of stack just for the message token lookup.

Version 1.63. Tagged as 'BASIC-1_63'
@
text
@d1 1
a1 1
/* (1.63)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.63
d9 1
a9 1
#define Module_Date_CMHG                24 Jan 2017
d11 2
a12 2
#define Module_MajorVersion             "1.63"
#define Module_Version                  163
d14 1
a14 1
#define Module_Date                     "24 Jan 2017"
d16 1
a16 1
#define Module_ApplicationDate          "24-Jan-17"
d21 3
a23 3
#define Module_FullVersion              "1.63"
#define Module_HelpVersion              "1.63 (24 Jan 2017)"
#define Module_LibraryVersionInfo       "1:63"
@


4.46
log
@Fix RISC OS 3.1 compatibility. Fix "Unknown keyword" error.
Detail:
  s/Basic - Fix error generation for unknown keywords on the command line; MSGPRNXXX is a function, not a SWI
  s/HelpMsgs - Take account of the fact that under RISC OS 3.1 MsgTrans doesn't support tokenised messages, and so the [1B][01] control codes being used for inserting newlines will be left in place in the message output. Passing the message on to OS_PrettyPrint allows the tokens to be expanded, but only if we pass a sensible dictionary pointer (Old code was passing in the message pointer as the dictionary pointer, resulting in recursive expansion of the message and an eventual stack overflow)
Admin:
  Tested PlingSystem build on RISC OS 3.1


Version 1.62. Tagged as 'BASIC-1_62'
@
text
@d1 1
a1 1
/* (1.62)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.62
d9 1
a9 1
#define Module_Date_CMHG                28 May 2016
d11 2
a12 2
#define Module_MajorVersion             "1.62"
#define Module_Version                  162
d14 1
a14 1
#define Module_Date                     "28 May 2016"
d16 1
a16 1
#define Module_ApplicationDate          "28-May-16"
d21 3
a23 3
#define Module_FullVersion              "1.62"
#define Module_HelpVersion              "1.62 (28 May 2016)"
#define Module_LibraryVersionInfo       "1:62"
@


4.45
log
@Implement support for VNMLA, VNMLS, VNMUL instructions
Detail:
  VFPLib/VFPLib - Add support for VNMLA, VNMLS, VNMUL to the assembler, which seem to have been accidentally missed from earlier versions of the code
Admin:
  Tested on Pandaboard
  Fixes issue reported on forums:
  https://www.riscosopen.org/forum/forums/2/topics/3457?page=1#posts-45090


Version 1.61. Tagged as 'BASIC-1_61'
@
text
@d1 1
a1 1
/* (1.61)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.61
d9 1
a9 1
#define Module_Date_CMHG                01 Aug 2015
d11 2
a12 2
#define Module_MajorVersion             "1.61"
#define Module_Version                  161
d14 1
a14 1
#define Module_Date                     "01 Aug 2015"
d16 1
a16 1
#define Module_ApplicationDate          "01-Aug-15"
d21 3
a23 3
#define Module_FullVersion              "1.61"
#define Module_HelpVersion              "1.61 (01 Aug 2015)"
#define Module_LibraryVersionInfo       "1:61"
@


4.44
log
@Extended assembler for ARMv6/v7 instructions
Implemented scalar (non-VFP/NEON) instructions for ARMv6/v7 and a couple of omitted ARMv5 instructions in UAL syntax.
Added documentary comments and minor performance tweaks to some existing code.
Corrected stack imbalance in handling of memory moving when local DIMs in use.
Preliminary test code for assembler instructions.

Version 1.60. Tagged as 'BASIC-1_60'
@
text
@d1 1
a1 1
/* (1.60)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.60
d9 1
a9 1
#define Module_Date_CMHG                14 Apr 2015
d11 2
a12 2
#define Module_MajorVersion             "1.60"
#define Module_Version                  160
d14 1
a14 1
#define Module_Date                     "14 Apr 2015"
d16 1
a16 1
#define Module_ApplicationDate          "14-Apr-15"
d21 3
a23 3
#define Module_FullVersion              "1.60"
#define Module_HelpVersion              "1.60 (14 Apr 2015)"
#define Module_LibraryVersionInfo       "1:60"
@


4.43
log
@  Tweaks to permit BASIC to cross-compile
Detail:
  * Changed file paths to forms that also work when cross-compiling
  * Changed case of filenames so they match on case-sensitive filing systems
  * Makefile needs to use leading tabs
  * Escaped the '$' in 'BASIC$Crunch' (squashes a warning in new version of
    objasm - unrelated to cross-compilation)
Admin:
  Cross-compiles OK with Norcroft tools, though asasm can't stomach the
  expressions BASIC uses. Checked it still builds with RISC OS Norcroft.

Version 1.59. Not tagged
@
text
@d1 1
a1 1
/* (1.59)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.59
d9 1
a9 1
#define Module_Date_CMHG                24 Sep 2014
d11 2
a12 2
#define Module_MajorVersion             "1.59"
#define Module_Version                  159
d14 1
a14 1
#define Module_Date                     "24 Sep 2014"
d16 1
a16 1
#define Module_ApplicationDate          "24-Sep-14"
d21 3
a23 3
#define Module_FullVersion              "1.59"
#define Module_HelpVersion              "1.59 (24 Sep 2014)"
#define Module_LibraryVersionInfo       "1:59"
@


4.42
log
@Correction to register vetting
Assembler.s revision 1.18 had a slight flaw in assembling
  LDR Rn,[R1] (or LDMIA Rn,{R1})
would report a bad register because the closing bracket matched the test of being greater than '5' and so skipped the thorough check. So LDR Rn,[R1 ] was OK.
Now, do a more thorough check to determine if the character following could be part of a variable name.

Version 1.59. Not tagged
@
text
@d9 1
a9 1
#define Module_Date_CMHG                02 Jun 2014
d14 1
a14 1
#define Module_Date                     "02 Jun 2014"
d16 1
a16 1
#define Module_ApplicationDate          "02-Jun-14"
d22 1
a22 1
#define Module_HelpVersion              "1.59 (02 Jun 2014)"
@


4.41
log
@Two parsing bug fixes
Lexical.s:
Rework previous fixes (revision 1.5 and revision 1.4) for BPUT#TRACE,<number> confusing the MATCH routine.
While revision 1.5 was better it failed to tokenise IF <expr> GOTO 1234 when the THEN is omitted.
A review of all the keywords shows the only ones that take tokenisable line numbers are TRACE, RESTORE, ON, GOTO, GOSUB and of these only TRACE can be used in a function like manner.
So, only apply the fix from revision 1.5 if it's a TRACE token.
Fix from Martin Avison, fixes ticket #387.
Added a test case in Tests/Match/TokTrace to assist.

Assembler.s:
Only consider SP or LR or PC to be referring to a register name if used in isolation (not as a substring of another word).
While LR and PC aren't particularly common start of words in english, SP is, causing source code with such names to give a "Missing ," error.
We adopt the same logic as for invalid 'R' named variables (eg. r17foo, r9bar) and attempt to find a variable with that name instead.
Fixes ticket #386.

Version 1.59. Tagged as 'BASIC-1_59'
@
text
@d9 1
a9 1
#define Module_Date_CMHG                01 Jun 2014
d14 1
a14 1
#define Module_Date                     "01 Jun 2014"
d16 1
a16 1
#define Module_ApplicationDate          "01-Jun-14"
d22 1
a22 1
#define Module_HelpVersion              "1.59 (01 Jun 2014)"
@


4.40
log
@  Tweak greeting message
Detail:
  The standard message printed when BASIC is entered as the current language
  ("ARM BBC BASIC V[I] version x.xx (C) Acorn 1989") wraps mid-year in
  40-column modes. This change avoids this problem by omiting the version
  number from the greeting.
Admin:
  Tested on a Raspberry Pi booting into MODE 7

Version 1.58. Tagged as 'BASIC-1_58'
@
text
@d1 1
a1 1
/* (1.58)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.58
d9 1
a9 1
#define Module_Date_CMHG                29 Apr 2014
d11 2
a12 2
#define Module_MajorVersion             "1.58"
#define Module_Version                  158
d14 1
a14 1
#define Module_Date                     "29 Apr 2014"
d16 1
a16 1
#define Module_ApplicationDate          "29-Apr-14"
d21 3
a23 3
#define Module_FullVersion              "1.58"
#define Module_HelpVersion              "1.58 (29 Apr 2014)"
#define Module_LibraryVersionInfo       "1:58"
@


4.39
log
@Have BASIC manage its own messages
For the standalone case BASIC[64] will now register its own resources into Resources/BASIC/BASIC[64]Msgs.
For the ROM case BASIC[64] will share them in Resources/BASIC/Messages as before.
This ensures that regardless of the order of loading, and the potential that a ROM and standalone version might be mixed, both ends up seeing the messages its expecting to see.
Tested in a ROM build and softloaded on RISC OS 4.02.

Version 1.57. Tagged as 'BASIC-1_57'
@
text
@d1 1
a1 1
/* (1.57)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.57
d9 1
a9 1
#define Module_Date_CMHG                01 Dec 2013
d11 2
a12 2
#define Module_MajorVersion             "1.57"
#define Module_Version                  157
d14 1
a14 1
#define Module_Date                     "01 Dec 2013"
d16 1
a16 1
#define Module_ApplicationDate          "01-Dec-13"
d21 3
a23 3
#define Module_FullVersion              "1.57"
#define Module_HelpVersion              "1.57 (01 Dec 2013)"
#define Module_LibraryVersionInfo       "1:57"
@


4.38
log
@Fix NEON VMLA[L]/VMLS[L] scalar version using incorrect limits for Dm
Detail:
  VFPLib/VFPLib - VMLA[L]/VMLS[L] scalar version definitions corrected to limit Dm to 0-7 for 16 bit datatypes and 0-15 for 32 bit datatypes
Admin:
  Tested on BB-xM
  All NEON scalar multiply instructions now appear to limit Dm correctly


Version 1.56. Tagged as 'BASIC-1_56'
@
text
@d1 1
a1 1
/* (1.56)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.56
d9 1
a9 1
#define Module_Date_CMHG                30 Nov 2013
d11 2
a12 2
#define Module_MajorVersion             "1.56"
#define Module_Version                  156
d14 1
a14 1
#define Module_Date                     "30 Nov 2013"
d16 1
a16 1
#define Module_ApplicationDate          "30-Nov-13"
d21 3
a23 3
#define Module_FullVersion              "1.56"
#define Module_HelpVersion              "1.56 (30 Nov 2013)"
#define Module_LibraryVersionInfo       "1:56"
@


4.37
log
@VFP/NEON assembler fixes
Detail:
  Doc/VFPDoc:
  - Minor documentation update
  VFPLib/VFPLib:
  - Fixed VCVT (float and fixed, ASIMD) incorrectly accepting a condition code
  - Fixed VCVT (float and fixed, VFP) having incorrect syntax for singleword version
  - Fixed VCVT (float and integer, ASIMD) incorrectly accepting a condition code
  - Fixed VABA, VABAL, VABD, VABDL incorrectly listing I8, I16 and I32 as acceptable data types - should have been U8, U16, U32.
  - Fixed VBIF, VBIT, VBSL incorrectly accepting condition codes
  - Fixed VQABS not being supported
Admin:
  Assembly tested and disassembly examined to test for correctness


Version 1.55. Tagged as 'BASIC-1_55'
@
text
@d1 1
a1 1
/* (1.55)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.55
d9 1
a9 1
#define Module_Date_CMHG                16 Nov 2013
d11 2
a12 2
#define Module_MajorVersion             "1.55"
#define Module_Version                  155
d14 1
a14 1
#define Module_Date                     "16 Nov 2013"
d16 1
a16 1
#define Module_ApplicationDate          "16-Nov-13"
d21 3
a23 3
#define Module_FullVersion              "1.55"
#define Module_HelpVersion              "1.55 (16 Nov 2013)"
#define Module_LibraryVersionInfo       "1:55"
@


4.36
log
@  Changed Basic module so it correctly reports ERL after an external abort.
Detail:
  There was a significant problem with Basic when external code is called using
  CALL, USR, SYS, or a *command (either directly or using OSCLI), and that code
  Aborts with Data Transfer, Undefined Instruction or Instruction Fetch. The
  Error Line (ERL) then given by Basic was often the last line of the program,
  rather than the Basic line containing the CALL, USR, SYS or *command.

  The problem was caused when the Basic LINE pointer in R12 (which points to
  the current line) was corrupted, and that is used by Basic to find the
  program line number (ERL) after an error. If R12 is outside the program, ERL
  was set to zero or the last line of the program, which was useless for
  problem diagnosis.

  After an Abort in a SYS, or in a module *Command (issued direct or via
  OSCLI), R12 is always corrupted. After an Abort in code executed from a CALL
  or USR then R12 is corrupted only if the called code changed it.

  In addition, if r13_usr was corrupted, the Basic error handler was reset
  to the default, causing the program to end abruptly without any line number
  at all.
Admin:
  The changes have been added to CVS in four stages in preceding commits. This
  commit is to increment the module version number, and adds test code supplied
  (as were the module changes) by Martin Avison:

  The test program Aborter creates a module AbortMod which has SWIs and module
  commands which abort in each possible way. The same code is also saved to
  disc to create disc commands for the same function.

  The test application !AbortTest creates many sorts of error and abort, and
  displays the error details.

Version 1.54. Tagged as 'BASIC-1_54'
@
text
@d1 1
a1 1
/* (1.54)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.54
d9 1
a9 1
#define Module_Date_CMHG                27 Apr 2013
d11 2
a12 2
#define Module_MajorVersion             "1.54"
#define Module_Version                  154
d14 1
a14 1
#define Module_Date                     "27 Apr 2013"
d16 1
a16 1
#define Module_ApplicationDate          "27-Apr-13"
d21 3
a23 3
#define Module_FullVersion              "1.54"
#define Module_HelpVersion              "1.54 (27 Apr 2013)"
#define Module_LibraryVersionInfo       "1:54"
@


4.35
log
@  Additional comments and whitespace changes
Admin:
  Provided by Martin Avison, as part of his error handling changes in the
  following commits. This particular commit should build as binary identical
  to version 1.53.

Version 1.53. Not tagged
@
text
@d1 1
a1 1
/* (1.53)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.53
d11 2
a12 2
#define Module_MajorVersion             "1.53"
#define Module_Version                  153
d21 3
a23 3
#define Module_FullVersion              "1.53"
#define Module_HelpVersion              "1.53 (27 Apr 2013)"
#define Module_LibraryVersionInfo       "1:53"
@


4.34
log
@Add an attempt to load ArmBE when EDIT keyword is used
It may fail if not available, but so did 'EDIT'. This way if it is available at least the 'EDIT' command enters the editor.
Note: this replaces the recommendation to load from ADFS::0.$.Modules.BasicEdit in the chapter "Editing BASIC files under RISC OS 2" in the BBC BASIC reference manual (!).

Version 1.53. Tagged as 'BASIC-1_53'
@
text
@d9 1
a9 1
#define Module_Date_CMHG                18 Sep 2012
d14 1
a14 1
#define Module_Date                     "18 Sep 2012"
d16 1
a16 1
#define Module_ApplicationDate          "18-Sep-12"
d22 1
a22 1
#define Module_HelpVersion              "1.53 (18 Sep 2012)"
@


4.33
log
@Protect against reading null pointers when using the output of a SWI to fill a string
Detail:
  s/Stmt2 - Code around SYS1STRING now treats null pointers returned by SWIs as being null strings. This protects against a crash if the user expects a SWI to return a string but it decides not to (e.g. due to an error)
Admin:
  Tested on BB-xM with high processor vectors


Version 1.52. Tagged as 'BASIC-1_52'
@
text
@d1 1
a1 1
/* (1.52)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.52
d9 1
a9 1
#define Module_Date_CMHG                09 Jul 2012
d11 2
a12 2
#define Module_MajorVersion             "1.52"
#define Module_Version                  152
d14 1
a14 1
#define Module_Date                     "09 Jul 2012"
d16 1
a16 1
#define Module_ApplicationDate          "09-Jul-12"
d21 3
a23 3
#define Module_FullVersion              "1.52"
#define Module_HelpVersion              "1.52 (09 Jul 2012)"
#define Module_LibraryVersionInfo       "1:52"
@


4.32
log
@Fix min/max limits of NEON immediate shift instructions
Detail:
  VFPLib/VFPLib - Added "g" and "h" immediate constant types. Updated descriptions of existing types. Fixed VQSHL{U}, VSHL, VSHLL and VSLI to use the correct immediate types.
  s/VFP - Added support for the new immediate constant types. Fixed VFPop_imm6 masking the immediate value against (1<<bits)-1, causing the wrong constant to be encoded when imm==size
Admin:
  Verified correct assembly/disassembly of all shift instructions, with min & max shift amounts
  (Assuming my disassembler is correct)


Version 1.51. Tagged as 'BASIC-1_51'
@
text
@d1 1
a1 1
/* (1.51)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.51
d9 1
a9 1
#define Module_Date_CMHG                25 Mar 2012
d11 2
a12 2
#define Module_MajorVersion             "1.51"
#define Module_Version                  151
d14 1
a14 1
#define Module_Date                     "25 Mar 2012"
d16 1
a16 1
#define Module_ApplicationDate          "25-Mar-12"
d21 3
a23 3
#define Module_FullVersion              "1.51"
#define Module_HelpVersion              "1.51 (25 Mar 2012)"
#define Module_LibraryVersionInfo       "1:51"
@


4.31
log
@Fix building from clean
Detail:
  Makefile - Make sure 'o' directory exists when creating VFPData file. Required since for ROM builds VFPData is now generated during resources phase instead of rom phase.
Admin:
  Tested with building IOMD ROM from clean


Version 1.50. Not tagged
@
text
@d1 1
a1 1
/* (1.50)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.50
d9 1
a9 1
#define Module_Date_CMHG                08 Mar 2012
d11 2
a12 2
#define Module_MajorVersion             "1.50"
#define Module_Version                  150
d14 1
a14 1
#define Module_Date                     "08 Mar 2012"
d16 1
a16 1
#define Module_ApplicationDate          "08-Mar-12"
d21 3
a23 3
#define Module_FullVersion              "1.50"
#define Module_HelpVersion              "1.50 (08 Mar 2012)"
#define Module_LibraryVersionInfo       "1:50"
@


4.30
log
@VFP/NEON assembler fixes and improvements
Detail:
  * Reworked to make ROM builds reference VFP/NEON assembler lookup tables held in ResourceFS instead of using local copies held in the module. Saves ~32K of ROM space due to reduced data duplication between BASIC & BASIC64.
  * Replace OPT flag magic numbers with symbols
  * Added support for VFPv4/ASIMDv2 instructions (VFMA/VFMS, VFNMA/VFNMS)
  * Updated DCFD/EQUFD to add support for .VFP and .FPA suffixes, to indicate whether VFP or FPA word order should be used
  * Added DCFH/EQUFH for storing half precision floats (in advanced half precision format)
  * Rework MSG routine to preserve R4-R7, for passing to BASICTrans as message parameters
  * Added a few new error messages (118-123) for the VFP/NEON assembler
  * Enable OWNERRORS option for standalone builds, and set DO32BIT to 0 for 26bit builds
  * Fixed VLDM/VSTM style register lists not working correctly when using commas to list the registers
  * Improved handling of VFP/NEON 8 bit immediate constants:
    - No longer possible to use #I64.<n>, #F32.<n>, #F64.<n> notation to directly specify the 8-bit encoded value for I64/F32/F64 constants, nor to force one instruction to attempt to use a constant in a format that doesn't match the .<dt> instruction suffix
    - Instead, .I64 constants can either be specified as a number (which will be converted to an integer and then zero-extended to 64 bits) or a string (which will be parsed by the 64bit version of OS_ReadUnsigned)
    - .F32 and .F64 constants should now be specified as floating point numbers which will then be correctly converted to the 8 bit encoding
    - .F32 and .F64 constants which can't be converted will result in a error message indicating the closest possible floating point number that can be encoded (but not necessarily the closest number that can be encoded; e.g. when assembling NEON instructions the assembler can automatically make use of .I32 encoding formats for some numbers)
  * Fixed instructions that have an 'imn' field (e.g. VSHR immediate) being incorrectly assembled
  * VFPLib.GenData & VFPLib.VFPLib now stored as text instead of tokenised BASIC
  Files changed:
  * Makefile, VFPLib.GenData, VFPLib.VFPLib, hdr.VFPMacros, hdr.Workspace, s.Assembler, s.Basic, s.ErrorMsgs, s.Factor, s.ModHead, s.VFP
Admin:
  Tested as softloaded module & in Iyonix ROM softload
  Requires BASICTrans 2.13 for new error messages to work properly


Version 1.50. Tagged as 'BASIC-1_50'
@
text
@d9 1
a9 1
#define Module_Date_CMHG                07 Mar 2012
d14 1
a14 1
#define Module_Date                     "07 Mar 2012"
d16 1
a16 1
#define Module_ApplicationDate          "07-Mar-12"
d22 1
a22 1
#define Module_HelpVersion              "1.50 (07 Mar 2012)"
@


4.29
log
@Add TBA Software's VFP/NEON assembler
Detail:
  This is version 0.06 of TBA's VFP/NEON BASIC assembler, with the following modifications:
  * VFPASM makefile option can be used to toggle the assembler on/off. Currently only used by the Tungsten ROM, due to lack of ROM space.
  * EnableVFPDebug switch added to turn on/off debugging code
  * VFP_Error macro fixed (VFPError symbol wasn't defined in 0.06 sources; now it just calls MSGERR directly)
  * Debug messages tweaked to make them a bit more useful
  * Single-register LDM/STM swapped for LDR/STR to avoid objasm 4 performance warnings
  * Fixed a bug in VFPop_imm_bits that caused parsing of immediate constants to fail in ROM builds, and potentially fail or misbehave in RAM builds. A sequence of conditional instructions incorrectly had the 'S' flag set on each instruction, which could cause the execution to stop halfway through.
  * VFPLib BASIC file moved from Tests.VFP folder into all-new VFPLib folder
  * Makefile modified and VFPLib.GenData script added, in order to allow s.VFPData to be built automatically as part of the build process instead of relying on a prebuilt version in CVS
  File changes:
  - Doc/VFPdoc - VFP assembler implementation notes & usage notes
  - Tests/VFP/!Setup,feb, Tests/VFP/TestVFP,ffb, Tests/VFP/VFPLibAsm,ffb, Tests/VFP/VFPLibTest,ffb - VFP test programs
  - VFPLib/GenData,ffb, VFPLib/VFPLib,ffb - Common BASIC files used to generate the pattern tables used by the assembler, and used by the test programs
  - s/VFP, hdr/VFPMacros - Main VFP/NEON assembler source code
  - Makefile - Modified to allow automatic generation of s.VFPData file
  - s/Assembler - Modified to call VFP assembler for instructions starting with 'V'
  - s/ModHead - Replaced ADRL with a sequence of ADD instructions due to module now being over 64K in size
Admin:
  Tested on rev A2 BB-xM in ROM & softload forms


Version 1.49. Tagged as 'BASIC-1_49'
@
text
@d1 1
a1 1
/* (1.49)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.49
d9 1
a9 1
#define Module_Date_CMHG                19 Dec 2011
d11 2
a12 2
#define Module_MajorVersion             "1.49"
#define Module_Version                  149
d14 1
a14 1
#define Module_Date                     "19 Dec 2011"
d16 1
a16 1
#define Module_ApplicationDate          "19-Dec-11"
d21 3
a23 3
#define Module_FullVersion              "1.49"
#define Module_HelpVersion              "1.49 (19 Dec 2011)"
#define Module_LibraryVersionInfo       "1:49"
@


4.28
log
@Make TEXTLOAD do RENUMBER 10,1 when renumbering is needed.
Effectively raises the longest text program you can load to ~64k lines.

Version 1.48. Tagged as 'BASIC-1_48'
@
text
@d1 1
a1 1
/* (1.48)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.48
d9 1
a9 1
#define Module_Date_CMHG                11 Dec 2011
d11 2
a12 2
#define Module_MajorVersion             "1.48"
#define Module_Version                  148
d14 1
a14 1
#define Module_Date                     "11 Dec 2011"
d16 1
a16 1
#define Module_ApplicationDate          "11-Dec-11"
d21 3
a23 3
#define Module_FullVersion              "1.48"
#define Module_HelpVersion              "1.48 (11 Dec 2011)"
#define Module_LibraryVersionInfo       "1:48"
@


4.27
log
@Use correct CLZ check
Detail:
  s/fp - Only look for ARMv5 support when deciding if CLZ is available, not ARMv5T
Admin:
  Tested in OMAP3 ROM


Version 1.47. Tagged as 'BASIC-1_47'
@
text
@d1 1
a1 1
/* (1.47)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.47
d9 1
a9 1
#define Module_Date_CMHG                06 Dec 2011
d11 2
a12 2
#define Module_MajorVersion             "1.47"
#define Module_Version                  147
d14 1
a14 1
#define Module_Date                     "06 Dec 2011"
d16 1
a16 1
#define Module_ApplicationDate          "06-Dec-11"
d21 3
a23 3
#define Module_FullVersion              "1.47"
#define Module_HelpVersion              "1.47 (06 Dec 2011)"
#define Module_LibraryVersionInfo       "1:47"
@


4.26
log
@Remove post increment.
In s/Array line 956 revision 1.5 the LDMFD was swapped for an LDR but the original didn't have writeback so the LDR shouldn't post increment.

Version 1.46. Tagged as 'BASIC-1_46'
@
text
@d1 1
a1 1
/* (1.46)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.46
d9 1
a9 1
#define Module_Date_CMHG                28 Sep 2011
d11 2
a12 2
#define Module_MajorVersion             "1.46"
#define Module_Version                  146
d14 1
a14 1
#define Module_Date                     "28 Sep 2011"
d16 1
a16 1
#define Module_ApplicationDate          "28-Sep-11"
d21 3
a23 3
#define Module_FullVersion              "1.46"
#define Module_HelpVersion              "1.46 (28 Sep 2011)"
#define Module_LibraryVersionInfo       "1:46"
@


4.25
log
@Fix objasm 4 warnings. Enable use of CLZ in math code.
Detail:
  s/Array, s/Funct, s/Stmt - Use LDR/STR instead of LDM/STM when only one register is to be transferred
  s/fp - Use Hdr:CPU.Arch to determine whether CLZ can be used in the IFLT routine
Admin:
  Tested on rev A2 BB-xM


Version 1.45. Tagged as 'BASIC-1_45'
@
text
@d1 1
a1 1
/* (1.45)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.45
d9 1
a9 1
#define Module_Date_CMHG                24 Sep 2011
d11 2
a12 2
#define Module_MajorVersion             "1.45"
#define Module_Version                  145
d14 1
a14 1
#define Module_Date                     "24 Sep 2011"
d16 1
a16 1
#define Module_ApplicationDate          "24-Sep-11"
d21 3
a23 3
#define Module_FullVersion              "1.45"
#define Module_HelpVersion              "1.45 (24 Sep 2011)"
#define Module_LibraryVersionInfo       "1:45"
@


4.24
log
@  Speed improvements on ARMv6 or later
Detail:
  s.Assembler line 1861: incorrect LDR of 1-byte variable BYTESM. Only bit 2
    of value tested, so no ill effects other than inefficiency on ARMv6.
  s.Stmt2 and s.fp: optimised stores of 5-byte floating-point values to use
    unaligned STR on ARMv6 or later.
  Added ENTRY directive to permit building of GPA debug listing.
Admin:
  Builds but untested.

Version 1.44. Tagged as 'BASIC-1_44'
@
text
@d1 1
a1 1
/* (1.44)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.44
d9 1
a9 1
#define Module_Date_CMHG                16 Jun 2009
d11 2
a12 2
#define Module_MajorVersion             "1.44"
#define Module_Version                  144
d14 1
a14 1
#define Module_Date                     "16 Jun 2009"
d16 1
a16 1
#define Module_ApplicationDate          "16-Jun-09"
d21 3
a23 3
#define Module_FullVersion              "1.44"
#define Module_HelpVersion              "1.44 (16 Jun 2009)"
#define Module_LibraryVersionInfo       "1:44"
@


4.23
log
@  Unaligned load optimisations
Detail:
  * Uses global LDW macro instead of locally-defined LOAD macro (or longhand
    implementations)
  * Some other cases of unaligned loads for v6+ added in places that didn't
    lend themselves to the LDW macro
  * 5-byte (FP) load operation now macroised - the macro skips the unnecessary
    BIC when assembling only for pre-v6 CPUs, or uses unaligned loads for
    v6+ CPUs (unless NoUnaligned global flag is set)
Admin:
  Tested on a rev B7 beagleboard.

Version 1.43. Tagged as 'BASIC-1_43'
@
text
@d1 1
a1 1
/* (1.43)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.43
d9 1
a9 1
#define Module_Date_CMHG                17 May 2009
d11 2
a12 2
#define Module_MajorVersion             "1.43"
#define Module_Version                  143
d14 1
a14 1
#define Module_Date                     "17 May 2009"
d16 1
a16 1
#define Module_ApplicationDate          "17-May-09"
d21 3
a23 3
#define Module_FullVersion              "1.43"
#define Module_HelpVersion              "1.43 (17 May 2009)"
#define Module_LibraryVersionInfo       "1:43"
@


4.22
log
@Fix BASIC to handle ARMv6/ARMv7 unaligned loads
Detail:
  s/Command - LOADFILETOKENCOPY now uses compile-time architecture flags to decide how to handle the potential unaligned load while copying data
  s/ModHead - Include Hdr:CPU.Arch to get architecture flags
Admin:
  Tested on rev C2 beagleboard. Untested on Tungsten/IOMD, but should be fine.


Version 1.42. Tagged as 'BASIC-1_42'
@
text
@d1 1
a1 1
/* (1.42)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.42
d9 1
a9 1
#define Module_Date_CMHG                10 May 2009
d11 2
a12 2
#define Module_MajorVersion             "1.42"
#define Module_Version                  142
d14 1
a14 1
#define Module_Date                     "10 May 2009"
d16 1
a16 1
#define Module_ApplicationDate          "10-May-09"
d21 3
a23 3
#define Module_FullVersion              "1.42"
#define Module_HelpVersion              "1.42 (10 May 2009)"
#define Module_LibraryVersionInfo       "1:42"
@


4.21
log
@A few more bits of code tidy-up. Should still not have changed binary.

Version 1.41. Tagged as 'BASIC-1_41'
@
text
@d1 1
a1 1
/* (1.41)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.41
d9 1
a9 1
#define Module_Date_CMHG                24 Apr 2009
d11 2
a12 2
#define Module_MajorVersion             "1.41"
#define Module_Version                  141
d14 1
a14 1
#define Module_Date                     "24 Apr 2009"
d16 1
a16 1
#define Module_ApplicationDate          "24-Apr-09"
d21 3
a23 3
#define Module_FullVersion              "1.41"
#define Module_HelpVersion              "1.41 (24 Apr 2009)"
#define Module_LibraryVersionInfo       "1:41"
@


4.20
log
@Lots of code improvements but no changes to the built binary.

This update replaces lots of hard-wired definitions of things such as SWI
names with the ones from the main exports in the build environment. It
should build a binary-identical module to the previous revision.

Author: Rob Sprowson

Version 1.40. Tagged as 'BASIC-1_40'
@
text
@d1 1
a1 1
/* (1.40)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.40
d11 2
a12 2
#define Module_MajorVersion             "1.40"
#define Module_Version                  140
d21 3
a23 3
#define Module_FullVersion              "1.40"
#define Module_HelpVersion              "1.40 (24 Apr 2009)"
#define Module_LibraryVersionInfo       "1:40"
@


4.19
log
@  Merged in changes from Castle
Detail:
  Introduced error out of range check for B and BL instructions
  in Basic Assembler   file Assembler.s
Admin:
  Not tested. Version incremented by 2 to match Castle's version.

Version 1.39. Tagged as 'BASIC-1_39'
@
text
@d1 1
a1 1
/* (1.39)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.39
d9 1
a9 1
#define Module_Date_CMHG                04 Oct 2008
d11 2
a12 2
#define Module_MajorVersion             "1.39"
#define Module_Version                  139
d14 1
a14 1
#define Module_Date                     "04 Oct 2008"
d16 1
a16 1
#define Module_ApplicationDate          "04-Oct-08"
d21 3
a23 3
#define Module_FullVersion              "1.39"
#define Module_HelpVersion              "1.39 (04 Oct 2008)"
#define Module_LibraryVersionInfo       "1:39"
@


4.18
log
@Previous fix for BPUT#TRACE,32 broke tokenisation of IF F% THEN 30. Both now
handled correctly.

Version 1.37. Tagged as 'BASIC-1_37'
@
text
@d1 1
a1 1
/* (1.37)
d4 1
a4 1
 * Last processed by srccommit version: 1.2.
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.37
d9 1
a9 1
#define Module_Date_CMHG                27 May 2005
d11 2
a12 2
#define Module_MajorVersion             "1.37"
#define Module_Version                  137
d14 1
a14 1
#define Module_Date                     "27 May 2005"
d16 1
a16 1
#define Module_ApplicationDate          "27-May-05"
d19 1
a19 1
#define Module_ComponentPath            "RiscOS/Sources/Programmer/BASIC"
d21 3
a23 3
#define Module_FullVersion              "1.37"
#define Module_HelpVersion              "1.37 (27 May 2005)"
#define Module_LibraryVersionInfo       "1:37"
@


4.17
log
@  Added a new variant of COLOUR command
Detail:
  Check HELP text in BASICTrans
Admin:
  Updated from Kev's machine.

Version 1.36. Tagged as 'BASIC-1_36'
@
text
@d1 1
a1 1
/* (1.36)
d4 1
a4 1
 * Last processed by srccommit version: 1.68.
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.36
d9 1
a9 1
#define Module_Date_CMHG                21 Jun 2004
d11 2
a12 2
#define Module_MajorVersion             "1.36"
#define Module_Version                  136
d14 1
a14 1
#define Module_Date                     "21 Jun 2004"
d16 1
a16 1
#define Module_ApplicationDate          "21-Jun-04"
d21 3
a23 3
#define Module_FullVersion              "1.36"
#define Module_HelpVersion              "1.36 (21 Jun 2004)"
#define Module_LibraryVersionInfo       "1:36"
@


4.16
log
@* In BASIC64, A() = B() / C now works - this specific case failed due to
  a stack imbalance.
* Keywords that take tokenised line numbers no longer cause number
  tokenisation if they appear on the right. This fixes BPUT#TRACE,32
* STRT/LDRT now enforce post-indexing. LDRT R0,[R1] generates correct code,
  and LDRT R0,[R1,#0] will be faulted.

Version 1.35. Tagged as 'BASIC-1_35'
@
text
@d1 1
a1 1
/* (1.35)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.35
d9 1
a9 1
#define Module_Date_CMHG                03 Mar 2003
d11 2
a12 2
#define Module_MajorVersion             "1.35"
#define Module_Version                  135
d14 1
a14 1
#define Module_Date                     "03 Mar 2003"
d16 1
a16 1
#define Module_ApplicationDate          "03-Mar-03"
d21 3
a23 3
#define Module_FullVersion              "1.35"
#define Module_HelpVersion              "1.35 (03 Mar 2003)"
#define Module_LibraryVersionInfo       "1:35"
@


4.15
log
@Bugfix: the TITLE routine was stacking and unstacking R13. This is defined
as UNPREDICTABLE in the ARM ARM, and while it seems to have been harmless on
older ARMs, the XScale corrupts R13 - in this case, it was always loaded with
the value &80F0. This meant that you couldn't load untokenised BASIC programs
via the *BASIC command because TOP was already above the bottom of the stack!
Also optimised a non-aligned data copy routine a little bit.

Version 1.34. Tagged as 'BASIC-1_34'
@
text
@d1 1
a1 1
/* (1.34)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.34
d9 1
a9 1
#define Module_Date_CMHG                02 Dec 2002
d11 2
a12 2
#define Module_MajorVersion             "1.34"
#define Module_Version                  134
d14 1
a14 1
#define Module_Date                     "02 Dec 2002"
d16 1
a16 1
#define Module_ApplicationDate          "02-Dec-02"
d21 3
a23 3
#define Module_FullVersion              "1.34"
#define Module_HelpVersion              "1.34 (02 Dec 2002)"
#define Module_LibraryVersionInfo       "1:34"
@


4.14
log
@New version from Kevin: appears to be fixes for top-bit-set addresses.
This is the version included in release 5.00 of the OS.

Version 1.33. Tagged as 'BASIC-1_33'
@
text
@d1 1
a1 1
/* (1.33)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.33
d11 2
a12 2
#define Module_MajorVersion             "1.33"
#define Module_Version                  133
d21 3
a23 3
#define Module_FullVersion              "1.33"
#define Module_HelpVersion              "1.33 (02 Dec 2002)"
#define Module_LibraryVersionInfo       "1:33"
@


4.13
log
@Fixed a couple of >64M address problems.

Version 1.32. Tagged as 'BASIC-1_32'
@
text
@d1 1
a1 1
/* (1.32)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.32
d9 1
a9 1
#define Module_Date_CMHG                18 Oct 2002
d11 2
a12 2
#define Module_MajorVersion             "1.32"
#define Module_Version                  132
d14 1
a14 1
#define Module_Date                     "18 Oct 2002"
d16 1
a16 1
#define Module_ApplicationDate          "18-Oct-02"
d21 3
a23 3
#define Module_FullVersion              "1.32"
#define Module_HelpVersion              "1.32 (18 Oct 2002)"
#define Module_LibraryVersionInfo       "1:32"
@


4.12
log
@  Fixed bug spotted on csa.programmer in BASIC CASE statements.
Detail:
  The expression evaluation in the BASIC WHEN statement had an omission
  where it could skip past a syntax error without generating any error.

  For example, "WHEN (R%>>25) AND 1)=1 : do something" would not return
  an error because the expression is complete and evaluated upto the
  "AND 1". Once this is found to not match the condition of the CASE,
  BASIC searches forwards for the next ",", "WHEN", "OTHERWISE" or
  "ENDCASE", skipping over the ")=1" part.

  I've changed this so that, after the expression is evaluated and found
  to not match, BASIC already checks to see if the next char is a ",". If
  not, we check for a ":" or CR before scanning forwards. Any other char
  is a syntax error.
Admin:
  Tested on a set-top box.

Version 1.31. Tagged as 'BASIC-1_31'
@
text
@d1 1
a1 1
/* (1.31)
d4 1
a4 1
 * Last processed by srccommit version: 1.64.
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.31
d9 1
a9 1
#define Module_Date_CMHG                17 Jun 2002
d11 2
a12 2
#define Module_MajorVersion             "1.31"
#define Module_Version                  131
d14 1
a14 1
#define Module_Date                     "17 Jun 2002"
d16 1
a16 2
#define Module_ApplicationDate2         "17-Jun-02"
#define Module_ApplicationDate4         "17-Jun-2002"
d21 3
a23 3
#define Module_FullVersion              "1.31"
#define Module_HelpVersion              "1.31 (17 Jun 2002)"
#define Module_LibraryVersionInfo       "1:31"
@


4.11
log
@  * Performance tweaks.
  * Comments added.
  * Added DIM LOCAL.
Detail:
  * All of the 408 instances of pushes and pops of a single register
    (i.e. "LDMIA SP!,{PC}") have been replaced with an LDR/STR equivalent,
    which provides a small performance boost on StrongARM-like processors.
  * Some obscure bits of the source have had comments added.
  * The new DIM LOCAL statement has been added:

    Syntax: DIM <numeric variable> LOCAL <numeric expression>

    DIM LOCAL allocates space from the BASIC stack rather than from the
    heap. This means that the space allocated is automatically freed on
    exit from the PROC or FN in which it was claimed.

    As with all LOCAL statements, it must appear in a PROC or FN definition
    and cannot appear inside a structure which uses the stack (i.e. NEXT)
    or after a LOCAL ERROR.

    Much like the manner in which "DIM foo% -1" returns the value of FSA
    without allocating space, "DIM foo% LOCAL -1" returns the value of SP
    at the time of the request, without allocating any space from the stack.
    This can be useful in computing the free space between the top of the
    BASIC heap and the bottom of the stack. Of course, the stack is used by
    BASIC while interpreting the program, so the contents of memory below
    foo% should always be treated as undefined.

    One caveat of using DIM LOCAL is that the stack cannot be moved while
    there are DIM LOCALs defined. END= will return an error and any
    Service_Memory calls will be claimed for the duration of the DIM LOCAL.
Admin:
  Builds and tested on RiscPC.
  Requires BASICTrans-2_06.

Version 1.30. Tagged as 'BASIC-1_30'
@
text
@d1 1
a1 1
/* (1.30)
d4 1
a4 1
 * Last processed by srccommit version: 1.63.
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.30
d9 1
a9 1
#define Module_Date_CMHG                23 Apr 2002
d11 2
a12 2
#define Module_MajorVersion             "1.30"
#define Module_Version                  130
d14 1
a14 1
#define Module_Date                     "23 Apr 2002"
d16 2
a17 2
#define Module_ApplicationDate2         "23-Apr-02"
#define Module_ApplicationDate4         "23-Apr-2002"
d22 3
a24 3
#define Module_FullVersion              "1.30"
#define Module_HelpVersion              "1.30 (23 Apr 2002)"
#define Module_LibraryVersionInfo       "1:30"
@


4.10
log
@  Fix to *BASIC command.
Detail:
  *BASIC will now return an error if it fails for any reason. This is
  slightly more polite than the SVC mode infinate loop it used to go
  into.
Admin:
  Tested on RiscPC with Ursula0020 softload.

Version 1.29. Tagged as 'BASIC-1_29'
@
text
@d1 1
a1 1
/* (1.29)
d4 1
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.29
d9 1
a9 1
#define Module_Date_CMHG                14 Sep 2001
d11 2
a12 2
#define Module_MajorVersion             "1.29"
#define Module_Version                  129
d14 1
a14 1
#define Module_Date                     "14 Sep 2001"
d16 2
a17 2
#define Module_ApplicationDate2         "14-Sep-01"
#define Module_ApplicationDate4         "14-Sep-2001"
d22 3
a24 3
#define Module_FullVersion              "1.29"
#define Module_HelpVersion              "1.29 (14 Sep 2001)"
#define Module_LibraryVersionInfo       "1:29"
@


4.9
log
@Fixed assembler bug introduced in version 1.26 - tokenised opcodes (such as
AND and EOR) were failing to assemble.

Version 1.28. Tagged as 'BASIC-1_28'
@
text
@d1 1
a1 1
/* (1.28)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.28
d8 1
a8 1
#define Module_Date_CMHG                15 May 2001
d10 2
a11 2
#define Module_MajorVersion             "1.28"
#define Module_Version                  128
d13 1
a13 1
#define Module_Date                     "15 May 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "15-May-01"
#define Module_ApplicationDate4         "15-May-2001"
d21 3
a23 2
#define Module_FullVersion              "1.28"
#define Module_HelpVersion              "1.28 (15 May 2001)"
@


4.8
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.72 or later.
  Requires BuildSys 3.09 or later.
  Requires Env 0.65 or later.

Version 1.27. Tagged as 'BASIC-1_27'
@
text
@d1 1
a1 1
/* (1.27)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.27
d8 1
a8 1
#define Module_Date_CMHG                11 May 2001
d10 2
a11 2
#define Module_MajorVersion             "1.27"
#define Module_Version                  127
d13 1
a13 1
#define Module_Date                     "11 May 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "11-May-01"
#define Module_ApplicationDate4         "11-May-2001"
d21 2
a22 2
#define Module_FullVersion              "1.27"
#define Module_HelpVersion              "1.27 (11 May 2001)"
@


4.7
log
@* New forms of MODE, COLOUR and GCOL added.
* VDU can now be used as a function to read VDU variables.
* Will surrender application memory for MODE changes etc.

See Doc.Changes for full info.

Version 1.26. Tagged as 'BASIC-1_26'
@
text
@d1 1
a1 1
/* (1.26)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.26
d8 1
a8 1
#define Module_Date_CMHG                20 Apr 2001
d10 2
a11 2
#define Module_MajorVersion             "1.26"
#define Module_Version                  126
d13 1
a13 1
#define Module_Date                     "20 Apr 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "20-Apr-01"
#define Module_ApplicationDate4         "20-Apr-2001"
d21 2
a22 2
#define Module_FullVersion              "1.26"
#define Module_HelpVersion              "1.26 (20 Apr 2001)"
@


4.6
log
@  Fixed bug in Exit handler

Detail:
  The new addition which allows an exit code to be passed using the syntax
"QUIT <expression>" was incorrectly assuming it had access to the workspace
via ARGP when it didn't, this caused a data abort when issuing *quit from
BASIC, or in fact when any program called from BASIC called it's exit
handler.

  It turned out that the required parameters for OS_Exit were already being
pointed to by R12, so a simple LDMIA was sufficient.

Admin:
  Tested on a RiscPC



Version 1.25. Tagged as 'BASIC-1_25'
@
text
@d1 1
a1 1
/* (1.25)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.25
d8 1
a8 1
#define Module_Date_CMHG                26 Mar 2001
d10 2
a11 2
#define Module_MajorVersion             "1.25"
#define Module_Version                  125
d13 1
a13 1
#define Module_Date                     "26 Mar 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "26-Mar-01"
#define Module_ApplicationDate4         "26-Mar-2001"
d21 2
a22 2
#define Module_FullVersion              "1.25"
#define Module_HelpVersion              "1.25 (26 Mar 2001)"
@


4.5
log
@  Some bug fixes and a few new features.
Detail:
  * ALIGN will now force any unused bytes to zero when assembling at
    both P% and O%. This is better than leaving possibly uninitialised
    memory behind (makes diffs very difficult).

  * The assembler now correctly recognises the new 'LR' special variable
    when the L is lower-case.

  * The assembler also has the 'SP' (13) special variable defined.

  * TRACE PROC (and the identical TRACE FN) now flushes the VCACHE when
    it is encountered.

  * TRACE ENDPROC has been implemented to allow the output of 'ENDPROC'
    and 'ENDFN' in the trace output whenever a procedure or function is
    exited. This complements the TRACE PROC/FN functionality.

  * QUIT <expression> has been added to allow a return code to be passed
    back to the called when BASIC exits. This is the /only/ sensible way
    for a BASIC program to set Sys$ReturnCode on exit (others get trashed
    when BASIC removes it's environment handlers).
Admin:
  Tested on a StrongARM RiscPC.

  Some of the reformatting from the last checkin has been improved.

  s.ModuleAB and s.ModuleAB64 have been renamed to s.BASIC105 and
  s.BASIC64 respectively. This will help with the new Brodie Make-o-
  Matik(tm) Makefiles.

Version 1.24. Tagged as 'BASIC-1_24'
@
text
@d1 1
a1 1
/* (1.24)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.24
d8 1
a8 1
#define Module_Date_CMHG                16 Mar 2001
d10 2
a11 2
#define Module_MajorVersion             "1.24"
#define Module_Version                  124
d13 1
a13 1
#define Module_Date                     "16 Mar 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "16-Mar-01"
#define Module_ApplicationDate4         "16-Mar-2001"
d21 2
a22 2
#define Module_FullVersion              "1.24"
#define Module_HelpVersion              "1.24 (16 Mar 2001)"
@


4.4
log
@  Improved BASIC build structure. No code change.
Detail:
  Makefile strips dependencies during the clean phase.

  Sources moved into an 's' directory.

  All sources reformatted into a more readable layout.
Admin:
  Builds binary-identical versions of BASIC and BASIC64 modules to
  version 1.22

Version 1.23. Tagged as 'BASIC-1_23'
@
text
@d1 1
a1 1
/* (1.23)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.23
d8 1
a8 1
#define Module_Date_CMHG                14 Mar 2001
d10 2
a11 2
#define Module_MajorVersion             "1.23"
#define Module_Version                  123
d13 1
a13 1
#define Module_Date                     "14 Mar 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "14-Mar-01"
#define Module_ApplicationDate4         "14-Mar-2001"
d21 2
a22 2
#define Module_FullVersion              "1.23"
#define Module_HelpVersion              "1.23 (14 Mar 2001)"
@


4.3
log
@* Added !Mk and !MkClean TaskObey files for convenience.
* Added new LDC CP0,C0,[R0],{opt} syntax.
* Fixed coprocessor register parsing error in previous version.

Version 1.22. Tagged as 'BASIC-1_22'
@
text
@d1 1
a1 1
/* (1.22)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.22
d8 1
a8 1
#define Module_Date_CMHG                23 Feb 2001
d10 2
a11 2
#define Module_MajorVersion             "1.22"
#define Module_Version                  122
d13 1
a13 1
#define Module_Date                     "23 Feb 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "23-Feb-01"
#define Module_ApplicationDate4         "23-Feb-2001"
d21 2
a22 2
#define Module_FullVersion              "1.22"
#define Module_HelpVersion              "1.22 (23 Feb 2001)"
@


4.2
log
@* Added ARMv5TE opcodes to assembler.
* Fixed some minor parsing errors in long opcodes.

Version 1.21. Tagged as 'BASIC-1_21'
@
text
@d1 1
a1 1
/* (1.21)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.21
d8 1
a8 1
#define Module_Date_CMHG                22 Feb 2001
d10 2
a11 2
#define Module_MajorVersion             "1.21"
#define Module_Version                  121
d13 1
a13 1
#define Module_Date                     "22 Feb 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "22-Feb-01"
#define Module_ApplicationDate4         "22-Feb-2001"
d21 2
a22 2
#define Module_FullVersion              "1.21"
#define Module_HelpVersion              "1.21 (22 Feb 2001)"
@


4.1
log
@  Added 32-bit flag to module header.
  Moved to srccommit.
Admin:
  Built.

Version 1.20. Tagged as 'BASIC-1_20'
@
text
@d1 1
a1 1
/* (1.20)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.20
d8 1
a8 1
#define Module_Date_CMHG                21 Nov 2000
d10 2
a11 2
#define Module_MajorVersion             "1.20"
#define Module_Version                  120
d13 1
a13 1
#define Module_Date                     "21 Nov 2000"
d15 2
a16 2
#define Module_ApplicationDate2         "21-Nov-00"
#define Module_ApplicationDate4         "21-Nov-2000"
d21 2
a22 2
#define Module_FullVersion              "1.20"
#define Module_HelpVersion              "1.20 (21 Nov 2000)"
@

