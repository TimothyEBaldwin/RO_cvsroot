head	1.1;
access;
symbols
	BASIC-1_75:1.1
	BASIC-1_74:1.1
	BASIC-1_73:1.1
	BASIC-1_72:1.1
	BASIC-1_71:1.1
	BASIC-1_70:1.1
	BASIC-1_69:1.1
	BASIC-1_68:1.1;
locks; strict;
comment	@# @;


1.1
date	2017.06.13.20.59.55;	author rsprowson;	state Exp;
branches;
next	;
commitid	D0NJjCSdAYCeVfVz;


desc
@@


1.1
log
@Follow the ARM ARM for VFP opcode VDUP despite a tokens clash
Earlier versions of the VFP assembler extensions cooked up VDPL as a way to dodge the problem of opcode VDUP being tokenised as VDUPRINT when used in its scalar or unconditional form (ie. VDUP.<size> <regs>).
This can be handled with an exception in the tokeniser in a similar manner to MOVEQ and ORR in the conventional ARM instruction set.
VFPLib: change the tables to use VDUP rather than VDPL.
Lexical.s: watch out for specifically VDUP. and tokenise it as VDU followed by a P in memory.
Assembler.s: watch out for token VDU followed by a P and take it to be VDUP.
VFP.s: when matching, allow the token for VDU to expand as though VDU was seen, also, add support for backslash and REM comments (previously only semicolon was allowed).
Tests/VFP/TestVFP: update the test case and 3 other failing tests from earlier fixes.
Tests/Match/TokVDUP: brute force trial of all combinations of VDU and PRINT, to check only VDUP. is caught.

Version 1.68. Tagged as 'BASIC-1_68'
@
text
@900 REM Test BASIC (lack of) tokenise of VDUP opcode.
901 REM To use TEXTLOAD"TokVDUP" then LIST.
902 REM Check the output for the 1 noted exception.
903  
904 V.P.S16
905 VD.P.S16
906 VDUP.S16   :REM Should remain as [token &EF][P][.] in memory, as in "VDUP.S16 D5,D0[1]"
907 VDUPR.S16
908 VDUPRI.S16
909 VDUPRIN.S16
910 VDUPRINTS16
911 VDU P.S16
999 REM End of test
@
