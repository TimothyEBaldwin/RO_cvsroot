head	1.5;
access;
symbols
	BASIC-1_75:1.5
	BASIC-1_74:1.5
	BASIC-1_73:1.5
	BASIC-1_72:1.5
	BASIC-1_71:1.5
	BASIC-1_70:1.4
	BASIC-1_69:1.4
	BASIC-1_68:1.4
	BASIC-1_67:1.4
	BASIC-1_66:1.4
	BASIC-1_65:1.4
	BASIC-1_64:1.4
	BASIC-1_63:1.3
	BASIC-1_62:1.2
	BASIC-1_61:1.1
	BASIC-1_60:1.1
	BASIC-1_59:1.1
	BASIC-1_58:1.1
	BASIC-1_57:1.1;
locks; strict;
comment	@# @;


1.5
date	2017.07.27.19.58.55;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	zr7FfPImnoVAaU0A;

1.4
date	2017.03.04.18.00.30;	author jlee;	state Exp;
branches;
next	1.3;
commitid	hnxezA9QYnbYagIz;

1.3
date	2017.01.24.21.57.10;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	y7O4YdywpmiTJgDz;

1.2
date	2016.05.28.19.06.11;	author jlee;	state Exp;
branches;
next	1.1;
commitid	ve1nDur0pc1xxh8z;

1.1
date	2013.12.01.18.09.40;	author rsprowson;	state Exp;
branches;
next	;
commitid	g83hl4RCFV1Crsfx;


desc
@@


1.5
log
@Suppress help on TWIN/TWINO
The TWIN & TWINO commands were changed to cause 'Mistake' in BASIC 1.54, but because we retain the tokens in the token table (so that programs which include the tokens can still be read) they still appeared in response to HELP. Notch then out of the HELP.
In removing the HTWIN and HTWINO tokenised HELP lookup this revealed that the end of table marker was wrong and BASIC kept scanning until it fell off the end of memory - the code expects a terminator of 127.
In fixing that it turned out that in BASIC 1.23 the token for 'HELPTOKENNO' was accidentally turned into an error message, and subsequently into token 'E13', when in fact it's only ever looked up as text (not an error).
Put this back as string shorter 'HHELPNO' and use the slot for E13 for the new 'Bad MODE' error from BASIC 1.70; delete HTWIN and HTWINO.

Version 1.71. Tagged as 'BASIC-1_71'
@
text
@; Copyright 2013 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > HelpMsgs

 [ OWNERRORS=1
MSGATLINE                               ;got here via CALL so ARGP is still valid
        MOV     R3,LR
        ADD     R0,ARGP,#ERRORS
        BL      MSGZSTR
        ADR     R0,MSGAL
        BL      MSGZSTR
        LDR     R0,[ARGP,#ERRLIN]
        MOV     R1,R11
        MOV     R2,#10
        SWI     XOS_ConvertCardinal4
        MOV     R0,#13
        STRB    R0,[R1]
        MOV     PC,R3
MSGZSTR LDRB    R2,[R0],#1
        CMP     R2,#0
        STRNEB  R2,[R11],#1
        BNE     MSGZSTR
        MOV     PC,LR
MSGAL   =       " at line ",0
        ALIGN
 |
MSGATLINE
        MOV     R10,LR
        SUB     SP,SP,#12
        LDR     R0,[ARGP,#ERRLIN]
        MOV     R1,SP
        MOV     R2,#12
        SWI     XOS_ConvertCardinal4
        ADD     R5,ARGP,#ERRORS         ;REPORT$
        MOV     R4,SP                   ;STR$(ERL)
        ADR     R0,MSGAL
        MOV     R1,R11
        MOV     R3,#256
        BL      MSGXLATE
        ADD     SP,SP,#12
MSGTERM LDRB    R0,[R1],#1
        CMP     R0,#0
        BNE     MSGTERM
        MOV     R0,#13
        STRB    R0,[R1,#-1]
        MOV     PC,R10
MSGAL   =       "M24",0
MSGPRNSSX                               ;two string args, 1 unused
        Push    "R1-R7,LR"
        SUB     SP,SP,#12*3
        MOV     R4,R1
        MOV     R5,R2
        MOV     R6,#0
        B       MSGPRNTOKS3
MSGPRNCXX                               ;one cardinal arg, 2 unused
MSGPRNCCX                               ;two cardinal args, 1 unused
MSGPRNCCC                               ;three cardinal args, 0 unused
        Push    "R1-R7,LR"
        SUB     SP,SP,#12*3             ;just convert all 3
        MOV     R2,#12*3                ;total buffer size
        MOV     R3,R0
        MOV     R0,R1
        ADD     R1,SP,#0
        SWI     OS_ConvertCardinal4
        MOV     R4,R0
        LDR     R0,[SP,#(12*3)+(0*4)]   ;recover entry R2
        ADD     R1,SP,#12
        SWI     OS_ConvertCardinal4
        MOV     R5,R0
        LDR     R0,[SP,#(12*3)+(1*4)]   ;recover entry R3
        ADD     R1,SP,#24
        SWI     OS_ConvertCardinal4
        MOV     R6,R0
        B       MSGPRNTOK3
MSGPRNXXX                               ;no args to substitute
        Push    "R1-R7,LR"
        SUB     SP,SP,#12*3
        MOV     R4,#0
        MOV     R5,#0
        MOV     R6,#0
MSGPRNTOKS3
        MOV     R3,R0                   ;token number
MSGPRNTOK3
        MOV     R0,R3
        MOV     R7,#0
        SUB     SP,SP,#8
        ADD     R1,SP,#1                ;gap for 'M'
        MOV     R2,#7
        SWI     OS_ConvertCardinal1
        MOV     R14,#"M"
        STRB    R14,[R0,#-1]!
        MOV     R1,R0
        BL      HELPXLATE
        ADD     SP,SP,#8+(12*3)
        CMP     R3,#10
        CMPNE   R3,#11
        CMPNE   R3,#16                  ;supress newline after these 3
        SWINE   OS_NewLine
        Pull    "R1-R7,PC"
 ]

HELPPRN
        Push    "R3,R10,LR"
        MOV     R1,#0
        LDRB    R10,[R0],#1
        CMP     R10,#"."
        BEQ     HELPALL1
        CMP     R10,#"["
        BEQ     HELPASS
        CMP     R10,#"@@"
        BEQ     HELPAT
        BCC     HELP1
        CMP     R10,#"W"+1
        BCC     HELPALLLIMITED
        CMP     R10,#&7F
        BCS     HELPTOKEN
HELP1
        ADR     R1,%FT10
        BL      HELPXLATE
        MOV     R1,#1                   ;no help provided
        B       HELPEXIT
10      DCB     "H0", 0
        ALIGN
20      DCB     "H1", 0
        ALIGN
HELPALLLIMITED
        ADR     R1,%BT20
        BL      HELPXLATE
HELPALL
        LDRB    R0,[R2]
        CMP     R0,R10
        BEQ     HELPALL1
        BCS     HELPALLEND
HELPALL01
        LDRB    R0,[R2],#1
        CMP     R0,#&7F
        BCC     HELPALL01
        ADD     R2,R2,#1
        B       HELPALL
HELPALL1
        LDRB    R0,[R2],#1
        CMP     R0,#" "
        BEQ     HELPALLEND
        CMP     R10,#"."
        CMPNE   R0,R10
        BNE     HELPALLEND
        CMP     R1,#70                  ;wrap at 80 columns
        MOVCS   R1,#0
        SWICS   OS_NewLine
        CMP     R1,#0
        BEQ     HELPALL12
HELPALL3
        CMP     R1,#10
        CMPNE   R1,#20
        CMPNE   R1,#30
        CMPNE   R1,#40
        CMPNE   R1,#50
        CMPNE   R1,#60
        CMPNE   R1,#70
        BEQ     HELPALL12
        SWI     OS_WriteI+" "           ;pad to nearest column of 10
        ADD     R1,R1,#1
        B       HELPALL3
HELPALL12
        ASSERT  PTWIN = PTWINO+(5+2)    ;ie.adjacent in PLEXA
        TEQ     R0,#'T'
        LDREQB  R3,[R2]
        TEQEQ   R3,#'W'
        ADDEQ   R2,R2,#(5+2)+(4+2)-1    ;suppress TWINO and TWIN
        BEQ     HELPALL1
HELPALLC
        SWI     OS_WriteC
        ADD     R1,R1,#1
        LDRB    R0,[R2],#1
        CMP     R0,#&7F
        BCC     HELPALLC
        ADD     R2,R2,#1
        B       HELPALL1
HELPALLEND
        CMP     R1,#0
        SWINE   OS_NewLine
        B       HELPEXITNO
HELPTOKENTABLE
        DCD     HELPTOKENINFO-HELPTOKEN
        DCD     HELPTWOFUNCTION-HELPTOKEN
        DCD     HELPTWOSTATEMENT-HELPTOKEN
        DCD     HELPTWOCOMMAND-HELPTOKEN
HELPTOKEN
        ADR     R3,HELPTOKEN
        LDR     R1,HELPTOKENTABLE+0
        CMP     R10,#&7F
        ADDEQ   R1,R1,R3
        BEQ     HELPTOKENSAY
        TEQ     R10,#TESCFN
        LDREQ   R1,HELPTOKENTABLE+4
        LDREQB  R10,[R0]
        TEQ     R10,#TESCSTMT
        LDREQ   R1,HELPTOKENTABLE+8
        LDREQB  R10,[R0]
        TEQ     R10,#TESCCOM
        LDREQ   R1,HELPTOKENTABLE+12
        LDREQB  R10,[R0]
        ADD     R1,R1,R3
        CMP     R10,#&7F
        BCC     HELPTOKENNOSAY
HELPTOKENFIND
        LDRB    R0,[R1],#1
        CMP     R0,#127
        BEQ     HELPTOKENNOSAY
        CMP     R0,R10
        BEQ     HELPTOKENSAY
HELPTOKENFIND1
        LDRB    R0,[R1], #1
        CMP     R0,#0
        BNE     HELPTOKENFIND1
        BEQ     HELPTOKENFIND
HELPNO
        DCB     "HHELPNO",0
        ALIGN
HELPTOKENNOSAY
        ADR     R1,HELPNO
HELPTOKENSAY
        BL      HELPXLATE
        SWI     OS_NewLine
        B       HELPEXITNO
HELPAT
        ADR     R1,%FT10
        BL      HELPXLATE
        B       HELPEXITNO
10      DCB     "H@@", 0
        ALIGN
20      DCB     "HASM", 0
30      DCB     "HASFP", 0
40      DCB     "HASFN", 0
        ALIGN
HELPASS
        ADR     R1,%BT20                ;main
        BL      HELPXLATE
        ADR     R1,%BT30                ;FPA
        BL      HELPXLATE
        ADR     R1,%BT40                ;footnotes
        BL      HELPXLATE
HELPEXITNO
        MOV     R1,#0                   ;help was provided
HELPEXIT
        Pull    "R3,R10,PC"
HELPXLATE
        Push    "R2-R3,LR"
        SUB     SP,SP,#2560             ;that assembler help is quite long
        MOV     R0,R1
        MOV     R1,SP
        MOV     R3,#2560
        BL      MSGXLATE
        MOV     R0,SP
        ADR     R1,mydict
        SWI     OS_PrettyPrint
        ADDS    SP,SP,#2560
        Pull    "R2-R3,PC"

; Minimal OS_PrettyPrint dictionary
; Required for when MsgTrans is too old to support tokenised help text (i.e. pre- RISC OS 3.5)
mydict
        DCB     3,&D,0
        DCD     0
        ALIGN

HELPTOKENINFO
        DCB     "HOTHERWISE",0
        DCB     TAND,"HAND",0
        DCB     TDIV,"HDIV",0
        DCB     TEOR,"HEOR",0
        DCB     TMOD,"HMOD",0
        DCB     TOR,"HOR",0
        DCB     TERROR,"HERROR",0
        DCB     TLINE,"HLINE",0
        DCB     TOFF,"HOFF",0
        DCB     TSTEP,"HSTEP", 0
        DCB     TSPC,"HSPC", 0
        DCB     TTAB,"HTAB",0
        DCB     TELSE,"HELSE",0
        DCB     TTHEN,"HTHEN",0
        DCB     TCONST,"HCONST",0
        DCB     TOPENI,"HOPENUP",0
        DCB     TABS,"HABS",0
        DCB     TACS,"HACS",0
        DCB     TADC,"HADVAL",0
        DCB     TASC,"HASC",0
        DCB     TASN,"HASN",0
        DCB     TATN,"HATN",0
        DCB     TBGET,"HBGET",0
        DCB     TCOS,"HCOS",0
        DCB     TCOUNT,"HCOUNT",0
        DCB     TDEG,"HDEG",0
        DCB     TERL,"HERL",0
        DCB     TERR,"HERR",0
        DCB     TEVAL,"HEVAL",0
        DCB     TEXP,"HEXP",0
        DCB     TEXT,"HEXT",0
        DCB     TFALSE,"HFALSE",0
        DCB     TFN,"HFN",0
        DCB     TGET,"HGET",0
        DCB     TINKEY,"HINKEY",0
        DCB     TINSTR,"HINSTR",0
        DCB     TINT,"HINT",0
        DCB     TLEN,"HLEN",0
        DCB     TLN,"HLN",0
        DCB     TLOG,"HLOG",0
        DCB     TNOT,"HNOT",0
        DCB     TOPENU,"HOPENIN",0
        DCB     TOPENO,"HOPENOUT",0
        DCB     TPI,"HPI",0
        DCB     TPOINT,"HPOINT",0
        DCB     TPOS,"HPOS",0
        DCB     TRAD,"HRAD",0
        DCB     TRND,"HRND",0
        DCB     TSGN,"HSGN",0
        DCB     TSIN,"HSIN",0
        DCB     TSQR,"HSQR",0
        DCB     TTAN,"HTAN",0
        DCB     TTO,"HTO",0
        DCB     TTRUE,"HTRUE",0
        DCB     TUSR,"HUSR",0
        DCB     TVAL,"HVAL",0
        DCB     TVPOS,"HVPOS",0
        DCB     TCHRD,"HCHR$",0
        DCB     TGETD,"HGET$",0
        DCB     TINKED,"HINKEY$",0
        DCB     TLEFTD,"HLEFT$",0
        DCB     TMIDD,"HMID$",0
        DCB     TRIGHTD,"HRIGHT$",0
        DCB     TSTRD,"HSTR$",0
        DCB     TSTRND,"HSTRING$",0
        DCB     TEOF,"HEOF",0
        DCB     TWHEN,"HWHEN",0
        DCB     TOF,"HOF",0
        DCB     TENDCA,"HENDCASE",0
        DCB     TENDIF,"HENDIF",0
        DCB     TENDWH,"HENDWHILE",0
        DCB     TPTR2,"HPTR",0
        DCB     TPAGE2,"HPAGE",0
        DCB     TTIME2,"HTIME",0
        DCB     TLOMM2,"HLOMEM",0
        DCB     THIMM2,"HHIMEM",0
        DCB     TBEEP,"HSOUND",0
        DCB     TBPUT,"HBPUT",0
        DCB     TCALL,"HCALL",0
        DCB     TCHAIN,"HCHAIN",0
        DCB     TCLEAR,"HCLEAR",0
        DCB     TCLOSE,"HCLOSE",0
        DCB     TCLG,"HCLG",0
        DCB     TCLS,"HCLS",0
        DCB     TDATA,"HDATA",0
        DCB     TDEF,"HDEF",0
        DCB     TDIM,"HDIM",0
        DCB     TDRAW,"HDRAW",0
        DCB     TEND,"HEND",0
        DCB     TENDPR,"HENDPROC",0
        DCB     TENVEL,"HENVELOPE",0
        DCB     TFOR,"HFOR",0
        DCB     TGOSUB,"HGOSUB",0
        DCB     TGOTO,"HGOTO",0
        DCB     TGRAPH, "HGCOL",0
        DCB     TIF,"HIF",0
        DCB     TINPUT,"HINPUT",0
        DCB     TLET,"HLET",0
        DCB     TLOCAL,"HLOCAL",0
        DCB     TMODE,"HMODE",0
        DCB     TMOVE,"HMOVE",0
        DCB     TNEXT,"HNEXT",0
        DCB     TON,"HON",0
        DCB     TVDU,"HVDU",0
        DCB     TPLOT,"HPLOT",0
        DCB     TPRINT,"HPRINT",0
        DCB     TPROC,"HPROC",0
        DCB     TREAD,"HREAD",0
        DCB     TREM,"HREM",0
        DCB     TREPEAT,"HREPEAT",0
        DCB     TREPORT,"HREPORT",0
        DCB     TRESTORE,"HRESTORE",0
        DCB     TRETURN,"HRETURN",0
        DCB     TRUN,"HRUN",0
        DCB     TSTOP,"HSTOP",0
        DCB     TTEXT,"HCOLOUR",0
        DCB     TTRACE,"HTRACE",0
        DCB     TUNTIL,"HUNTIL",0
        DCB     TWIDTH,"HWIDTH",0
        DCB     TOSCL,"HOSCLI",0
        DCB     127
HELPTWOSTATEMENT
        DCB     TCASE,"HCASE",0
        DCB     TCIRCLE,"HCIRCLE",0
        DCB     TFILL,"HFILL",0
        DCB     TORGIN,"HORIGIN",0
        DCB     TPSET,"HPOINT",0
        DCB     TRECT,"HRECTANGLE",0
        DCB     TSWAP,"HSWAP",0
        DCB     TWHILE,"HWHILE",0
        DCB     TWAIT,"HWAIT",0
        DCB     TMOUSE,"HMOUSE",0
        DCB     TQUIT,"HQUIT",0
        DCB     TSYS,"HSYS",0
        ; no help for INSTALLBAD
        DCB     TLIBRARY,"HLIBRARY",0
        DCB     TTINT,"HTINT",0
        DCB     TELLIPSE,"HELLIPSE",0
        DCB     TBEATS,"HBEATS",0
        DCB     TTEMPO,"HTEMPO",0
        DCB     TVOICES,"HVOICES",0
        DCB     TVOICE,"HVOICE",0
        DCB     TSTEREO,"HSTEREO",0
        DCB     TOVERLAY,"HOVERLAY",0
        DCB     127
HELPTWOCOMMAND
        DCB     TAPPEND,"HAPPEND",0
        DCB     TAUTO,"HAUTO",0
        DCB     TCRUNCH,"HCRUNCH",0
        DCB     TDELET,"HDELETE",0
        DCB     TEDIT,"HEDIT",0
        DCB     THELP,"HHELP",0
        DCB     TLIST,"HLIST",0
        DCB     TLOAD,"HLOAD",0
        DCB     TLVAR,"HLVAR",0
        DCB     TNEW,"HNEW",0
        DCB     TOLD,"HOLD",0
        DCB     TRENUM,"HRENUMBER",0
        DCB     TSAVE,"HSAVE",0
        DCB     TTEXTLOAD,"HTEXTLOAD",0
        DCB     TTEXTSAVE,"HTEXTSAVE",0
        DCB     TINSTALL,"HINSTALL",0
        DCB     127
HELPTWOFUNCTION
        DCB     TSUM,"HSUM",0
        DCB     TBEAT,"HBEAT",0
        DCB     127
        ALIGN

        LNK     ErrorMsgs.s
@


1.4
log
@Fixes and improvements
Detail:
  s/Expr - Clean up some confusing code relating to l-value address offsets in LOOKU5. The old code looked like it contained a bug for BASIC64 (two TEQs back-to-back), but the situations LOOKU5 is called in meant it was fine and the TEQs were actually unnecessary.
  s/HelpMsgs - Fix MSGPRNXXX and friends corrupting R1. Was causing LVAR to crash/malfunction when listing functions/procedures.
  s/Stmt2 - Fix rotated ellipses being completely broken in BASIC64. Looks like this has been broken forever (bug appears to be present in BASIC64 1.05, as supplied with RISC OS 3)
  s/fp2 - Increase MAXDIGS by one for BASIC64, to allow for accurate float -> string conversion for numbers of the form 0.0XXXX when using G format.
  s/fp2 - Rewrite BASIC64's string -> float conversion code. Although the old code was believed to be sufficiently accurate, excessive use of FPA instructions made it rather slow, and a poor fit for any future VFP version of BASIC (the code relied on extended precision for accuracy, which VFP lacks). The new version converts to packed decimal and then relies on FPEmulator to perform the decimal -> float conversion via LDFP (to mirror float -> string conversion via STFP). The reduction in FP instructions makes it many times faster than the original ("Decimal" test runs 5x faster)
  Tests/CALL,ffb, Tests/Math/Array,ffb, Tests/Math/Decimal,ffb, Tests/Math/ELLIPSE,ffb - Add a handful of new test programs.
Admin:
  Tested on BB-xM


Version 1.64. Tagged as 'BASIC-1_64'
@
text
@d159 1
a159 1
        CMP     R1,#70
a161 1
        BCS     HELPALL12
a164 2
        SWI     OS_WriteI+" "
        ADD     R1,R1,#1
d172 4
a175 1
        BNE     HELPALL3
d177 7
d188 1
a188 1
        BCC     HELPALL12
d229 3
a278 2
HELPNO
        DCB     "HELPTOKENNO",0
d400 1
a400 1
        DCB     TOSCL,127
d424 1
a424 1
        DCB     TSYS,127
a440 2
        DCB     TTWIN,"HTWIN",0
        DCB     TTWINO,"HTWINO",0
d442 1
a442 1
        DCB     TSAVE,127
d446 1
a446 1
        DCB     TSAVE,127
@


1.3
log
@Assembler/Debugger round trip improvements
Review of opcodes of the form
  OP<c> {#}imm
this summarises the ones the BASIC assembler accepts:
  SVC #imm, SVC imm, SWI imm (Debugger emits SWI imm)
  DBG #imm, DGB imm          (Debugger emits DBG imm)
  SMC #imm, SMC imm, SMI imm (Debugger emits SMI imm)
  HVC #imm, HVC imm          (Debugger emits HVC imm)
  BKPT #imm, BKPT imm        (Debugger emits BKPT imm)
Assembler.s: Add SMI as a synonym for SMC.
CmdHelp: Add all the missing v6/v7 opcodes to the help.
HelpMsgs.s: Split the terse yet huge assembler help (HELP [) into 3 to avoid needing 4k of stack just for the message token lookup.

Version 1.63. Tagged as 'BASIC-1_63'
@
text
@d61 1
a61 1
        Push    "R2-R7,LR"
d70 1
a70 1
        Push    "R2-R7,LR"
d88 1
a88 1
        Push    "R2-R7,LR"
d111 1
a111 1
        Pull    "R2-R7,PC"
@


1.2
log
@Fix RISC OS 3.1 compatibility. Fix "Unknown keyword" error.
Detail:
  s/Basic - Fix error generation for unknown keywords on the command line; MSGPRNXXX is a function, not a SWI
  s/HelpMsgs - Take account of the fact that under RISC OS 3.1 MsgTrans doesn't support tokenised messages, and so the [1B][01] control codes being used for inserting newlines will be left in place in the message output. Passing the message on to OS_PrettyPrint allows the tokens to be expanded, but only if we pass a sensible dictionary pointer (Old code was passing in the message pointer as the dictionary pointer, resulting in recursive expansion of the message and an eventual stack overflow)
Admin:
  Tested PlingSystem build on RISC OS 3.1


Version 1.62. Tagged as 'BASIC-1_62'
@
text
@d235 2
d239 5
a243 1
        ADR     R1,%BT20
@


1.1
log
@Have BASIC manage its own messages
For the standalone case BASIC[64] will now register its own resources into Resources/BASIC/BASIC[64]Msgs.
For the ROM case BASIC[64] will share them in Resources/BASIC/Messages as before.
This ensures that regardless of the order of loading, and the potential that a ROM and standalone version might be mixed, both ends up seeing the messages its expecting to see.
Tested in a ROM build and softloaded on RISC OS 4.02.

Version 1.57. Tagged as 'BASIC-1_57'
@
text
@d251 1
d255 8
a262 1
        
@

