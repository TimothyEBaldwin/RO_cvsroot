head	1.13;
access;
symbols
	BASIC-1_75:1.13
	BASIC-1_74:1.13
	BASIC-1_73:1.13
	BASIC-1_72:1.12
	BASIC-1_71:1.11
	BASIC-1_70:1.11
	BASIC-1_69:1.10
	BASIC-1_68:1.10
	BASIC-1_67:1.10
	BASIC-1_66:1.9
	BASIC-1_65:1.9
	BASIC-1_64:1.9
	BASIC-1_63:1.9
	BASIC-1_62:1.9
	BASIC-1_61:1.9
	BASIC-1_60:1.9
	BASIC-1_59:1.9
	BASIC-1_58:1.9
	BASIC-1_57-pre4:1.8
	BASIC-1_57:1.9
	BASIC-1_57-pre3:1.8
	BASIC-1_57-pre2:1.8
	BASIC-1_57-pre1:1.7
	BASIC-1_56:1.7
	BASIC-1_55:1.7
	BASIC-1_54:1.7
	BASIC-1_53:1.6
	BASIC-1_52:1.6
	BASIC-1_51:1.6
	BASIC-1_50:1.6
	BASIC-1_49:1.5
	BASIC-1_48:1.5
	BASIC-1_47:1.5
	BASIC-1_46:1.5
	BASIC-1_45:1.5
	BASIC-1_44:1.5
	BASIC-1_43:1.5
	BASIC-1_42:1.5
	BASIC-1_41:1.5
	BASIC-1_40:1.4
	BASIC-1_39:1.3
	BASIC-1_37:1.3
	RO_5_07:1.3
	BASIC-1_36:1.3
	BASIC-1_35:1.3
	BASIC-1_34:1.3
	BASIC-1_33:1.3
	BASIC-1_32:1.3
	BASIC-1_31:1.3
	BASIC-1_30:1.3
	BASIC-1_29:1.2
	BASIC-1_28:1.2
	BASIC-1_27:1.2
	BASIC-1_26:1.2
	BASIC-1_25:1.1
	BASIC-1_24:1.1
	BASIC-1_23:1.1;
locks; strict;
comment	@# @;


1.13
date	2017.09.18.21.19.03;	author jlee;	state Exp;
branches;
next	1.12;
commitid	u9VOjCk1jnCuUI7A;

1.12
date	2017.09.18.07.05.44;	author rsprowson;	state Exp;
branches;
next	1.11;
commitid	38lZJju07ZzLbE7A;

1.11
date	2017.07.22.21.51.02;	author jlee;	state Exp;
branches;
next	1.10;
commitid	CDYQ0yZDiBs2Xg0A;

1.10
date	2017.06.03.22.30.34;	author jlee;	state Exp;
branches;
next	1.9;
commitid	3Iuze3DCMuQaKYTz;

1.9
date	2013.12.01.18.09.40;	author rsprowson;	state Exp;
branches;
next	1.8;
commitid	g83hl4RCFV1Crsfx;

1.8
date	2013.12.01.17.39.51;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	DTgfZ9WqDVpZgsfx;

1.7
date	2013.04.26.23.53.33;	author bavison;	state Exp;
branches;
next	1.6;
commitid	mepEMy92GBY6olNw;

1.6
date	2012.03.07.23.34.26;	author jlee;	state Exp;
branches;
next	1.5;
commitid	mqtCES9yyNSyC0Wv;

1.5
date	2009.04.24.00.35.15;	author srevill;	state Exp;
branches;
next	1.4;

1.4
date	2009.04.24.00.27.15;	author srevill;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.23.15.48.33;	author srevill;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.20.09.47.36;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.14.20.00.31;	author srevill;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Adjust VFP error handling
Detail:
  s/ErrorMsgs - Give the VFP "invalid operation" error a more useful error number, and correct the embedded text to match what's in the Resources file. Add VFPExcetion_SQRT, to allow "negative root" errors to be generated by FSQRTD error checks.
  hdr/Definitions - Update FPSCRCheck macro to allow alternate error handlers to be specified
  s/Array, s/Factor - Update FSQRTD error checks to use VFPException_SQRT, so that they say "negative root" instead of "invalid operation"
Admin:
  Tested on Raspberry Pi


Version 1.73. Tagged as 'BASIC-1_73'
@
text
@; Copyright 2001 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;> ErrorMsgs

 [ {FALSE}
;debug code
FSHOW   STMFD   SP!,{R14,R0,R10,R9}
        SWI     OS_WriteS
        =       "AA ",0
        MOV     R10,R0
        BL      WORDHX
        SWI     OS_WriteS
        =       " AX ",0
        MOV     R10,R1
        BL      WORDHX
        SWI     OS_WriteS
        =       " AG ",0
        MOV     R10,R2
        BL      WORDHX
        SWI     OS_WriteS
        =       " AS ",0
        MOV     R10,R3
        BL      WORDHX
        SWI     OS_NewLine
        SWI     OS_WriteS
        =       "WA ",0
        MOV     R10,R4
        BL      WORDHX
        SWI     OS_WriteS
        =       " WX ",0
        MOV     R10,R5
        BL      WORDHX
        SWI     OS_WriteS
        =       " WG ",0
        MOV     R10,R6
        BL      WORDHX
        SWI     OS_WriteS
        =       " WS ",0
        MOV     R10,R7
        BL      WORDHX
        SWI     OS_NewLine
        SWI     OS_WriteS
        =       "SP ",0
        MOV     R10,SP
        BL      WORDHX
        SWI     OS_WriteS
        =       " AELINE ",0
        MOV     R10,R11
        BL      WORDHX
        SWI     OS_WriteS
        =       " LINE ",0
        MOV     R10,R12
        BL      WORDHX
        SWI     OS_NewLine
        LDMFD   SP!,{R0,R10,R9,PC}
WORDSP  SWI     OS_WriteI+" "
 ]
;print R10
WORDHX  STMFD   SP!,{R0,R9}
        MOV     R9,#32-4
WORDLP  MOV     R0,R10,LSR R9
        AND     R0,R0,#15
        CMP     R0,#9
        ORRLS   R0,R0,#"0"
        ADDHI   R0,R0,#"A"-10
        SWI     OS_WriteC
        SUBS    R9,R9,#4
        BPL     WORDLP
        LDMFD   SP!,{R0,R9}
        MOV     PC,R14
EREXCEPT
        BL      MSG
        =       0,0
 [ OWNERRORS=1
        =       "Unknown setting of exception control.",0
 ]
        ALIGN
ERSILL  BL      MSG
        =       0,1
 [ OWNERRORS=1
        =       "Silly!",0
 ]
        ALIGN
ERNUMM  BL      MSG
        =       0,2
 [ OWNERRORS=1
        =       "No room to do this renumber",0
 ]
        ALIGN
ERNUMO  BL      MSG
        =       0,3
 [ OWNERRORS=1
        =       "Line numbers larger than 65279 would be generated by this renumber",0
 ]
        ALIGN
ALLOCR  BL      MSG
        =       0,4
 [ OWNERRORS=1
        =       "No room",0
 ]
        ALIGN
ERLINELONG
        BL      MSG
        =       0,5
 [ OWNERRORS=1
        =       "Line too long",0
 ]
        ALIGN
ERSTOP  BL      MSG
        =       0,6
 [ OWNERRORS=1
        =       "Stopped",0
 ]
        ALIGN
ERLISTO BL      MSG
        =       0,7
 [ OWNERRORS=1
        =       "Invalid LISTO option",0
 ]
        ALIGN
ERCATASLIST
        MOV     R0,#0
        STR     R0,[ARGP,#LOCALARLIST]
ERRQ1   BL      MSG
        =       0,9
 [ OWNERRORS=1
        =       "Corruption of stack",0
 ]
        ALIGN
ONERRX  BL      MSG
        =       0,10
 [ OWNERRORS=1
        =       "Error control status not found on stack for RESTORE ERROR",0
 ]
        ALIGN
BADIC   BL      MSG
        =       0,11
 [ OWNERRORS=1
        =       "Missing incore name",0
 ]
        ALIGN
USESLINENUMBERS
        BL      MSG
        =       0,12
 [ OWNERRORS=1
        =       "LIST found line number reference",0
 ]
        ALIGN
HELPTOKENNO
        BL      MSG
        =       0,13
 [ OWNERRORS=1
        =       "HELP has no information on this keyword",0
 ]
        ALIGN
BADIPHEX
        BL      MSG
        =       0,14
 [ OWNERRORS=1
        =       "Incorrect in-core file description",0
 ]
        ALIGN
INSTALLBAD
        BL      MSG
        =       0,15
 [ OWNERRORS=1
        =       "INSTALL cannot be used in a program",0
 ]
        ALIGN
ERASS1  BL      MSG
        =       1,16
 [ OWNERRORS=1
        =       "No such mnemonic",0
 ]
        ALIGN
ERASS1EQU
        BL      MSG
        =       1,17
 [ OWNERRORS=1
        =       "No such suffix on EQU",0
 ]
        ALIGN
ERASS2  BL      MSG
        =       2,18
 [ OWNERRORS=1
        =       "Bad immediate constant",0
 ]
        ALIGN
ERASS2A BL      MSG
        =       2,19
 [ OWNERRORS=1
        =       "Bad address offset",0
 ]
        ALIGN
ERASS2LIM
        BL      MSG
        =       2,20
 [ OWNERRORS=1
        =       "Assembler limit reached",0
 ]
        ALIGN
ERASS2S BL      MSG
        =       2,21
 [ OWNERRORS=1
        =       "Bad shift",0
 ]
        ALIGN
ERASS3  BL      MSG
        =       3,22
 [ OWNERRORS=1
        =       "Bad register",0
 ]
        ALIGN
ERASSMUL
        BL      MSG
        =       3,23
 [ OWNERRORS=1
        =       "Duplicate register in multiply",0
 ]
        ALIGN
MISSEQ  BL      MSG
        =       4,24
 [ OWNERRORS=1
        =       "Missing =",0
 ]
        ALIGN
MISSEQFOR
        BL      MSG
        =       4,25
 [ OWNERRORS=1
        =       "Missing = in FOR statement",0
 ]
        ALIGN
MISTAK  BL      MSG
        =       4,26
 [ OWNERRORS=1
        =       "Mistake",0
 ]
        ALIGN
ERCOMM  BL      MSG
        =       5,27
 [ OWNERRORS=1
        =       "Missing ,",0
 ]
        ALIGN
ERTYPEINT
        BL      MSG
        =       6,28
 [ OWNERRORS=1
        =       "Type mismatch: number needed",0
 ]
        ALIGN
ERTYPENUM
        BL      MSG
        =       6,29
 [ OWNERRORS=1
        =       "Type mismatch: numeric variable needed",0
 ]
        ALIGN
ERTYPENUMARRAY
        BL      MSG
        =       6,30
 [ OWNERRORS=1
        =       "Type mismatch: numeric array needed",0
 ]
        ALIGN
ERTYPESTR
        BL      MSG
        =       6,31
 [ OWNERRORS=1
        =       "Type mismatch: string needed",0
 ]
        ALIGN
ERTYPESTRING
        BL      MSG
        =       6,32
 [ OWNERRORS=1
        =       "Type mismatch: string variable needed",0
 ]
        ALIGN
ERTYPESTRINGARRAY
        BL      MSG
        =       6,33
 [ OWNERRORS=1
        =       "Type mismatch: string array needed",0
 ]
        ALIGN
ERTYPEARRAY
        BL      MSG
        =       6,34
 [ OWNERRORS=1
        =       "Type mismatch: array needed",0
 ]
        ALIGN
ERTYPEARRAYB
        BL      MSG
        =       6,35
 [ OWNERRORS=1
        =       "Type mismatch between arrays",0
 ]
        ALIGN
ERTYPEARRAYC
        BL      MSG
        =       6,36
 [ OWNERRORS=1
        =       "Can't assign to array of this size",0
 ]
        ALIGN
ERSIZE  BL      MSG
        =       6,37
 [ OWNERRORS=1
        =       "Array type mismatch as parameter",0
 ]
        ALIGN
ERTYPESWAP
        BL      MSG
        =       6,38
 [ OWNERRORS=1
        =       "Can't SWAP arrays of different types",0
 ]
        ALIGN
ERRFN   BL      MSG
        =       7,39
 [ OWNERRORS=1
        =       "Not in a function",0
 ]
        ALIGN
ERDOLL  BL      MSG
        =       8,40
 [ OWNERRORS=1
        =       "Too low a value for $<number>",0
 ]
        ALIGN
ERMISQ  BL      MSG
        =       9,41
 [ OWNERRORS=1
        =       "Missing """,0
 ]
        ALIGN
ERDIMFN BL      MSG
        =       10,42
 [ OWNERRORS=1
        =       "DIM() function needs an array",0
 ]
        ALIGN
ERMATMULSPACE
        BL      MSG
        =       10,43
 [ OWNERRORS=1
        =       "No room to do matrix multiply with source(s) the same as destination",0
 ]
        ALIGN
BADDIMSUB
        BL      MSG
        =       10,44
 [ OWNERRORS=1
        =       "Impossible dimension",0
 ]
        ALIGN
BADDIMLIST
        BL      MSG
        =       10,45
 [ OWNERRORS=1
        =       "No end of dimension list )",0
 ]
        ALIGN
BADDIM  BL      MSG
        =       10,46
 [ OWNERRORS=1
        =       "Bad DIM statement",0
 ]
        ALIGN
BADDIMSIGN
        BL      MSG
        =       10,47
 [ OWNERRORS=1
        =       "Can't DIM negative amount",0
 ]
        ALIGN
ERNDIM  BL      MSG
        =       10,48
 [ OWNERRORS=1
        =       "Arrays cannot be redimensioned",0
 ]
        ALIGN
BADDIMSIZE
        BL      MSG
        =       11,49
 [ OWNERRORS=1
        =       "No room for this DIM",0
 ]
        ALIGN
DIMRAM  BL      MSG
        =       11,50
 [ OWNERRORS=1
        =       "No room for this dimension",0
 ]
        ALIGN
ERREND  BL      MSG
        =       11,51
 [ OWNERRORS=1
        =       "Attempt to allocate insufficient memory",0
 ]
        ALIGN
ERRENDARRAYREF
        BL      MSG
        =       11,52
 [ OWNERRORS=1
        =       "Unreferenced local array in END=",0
 ]
        ALIGN
CANTLOAD
        BL      MSG
        =       11,53
 [ OWNERRORS=1
        =       "No room for program",0
 ]
        ALIGN
ERRNLC  BL      MSG
        =       12,54
 [ OWNERRORS=1
        =       "Items can only be made local in a function or procedure",0
 ]
        ALIGN
ENDPRE  BL      MSG
        =       13,55
 [ OWNERRORS=1
        =       "Not in a procedure",0
 ]
        ALIGN
ERARRW  BL      MSG
        =       14,56
 [ OWNERRORS=1
        =       "Reference array incorrect",0
 ]
        ALIGN
ERARRY  BL      MSG
        =       14,57
 [ OWNERRORS=1
        =       "Unknown array",0
 ]
        ALIGN
ERARRYDIM
        BL      MSG
        =       14,58
 [ OWNERRORS=1
        =       "Unknown array in DIM() function",0
 ]
        ALIGN
ERARRZ  BL      MSG
        =       14,59
 [ OWNERRORS=1
        =       "Undimensioned array",0
 ]
        ALIGN
ERRSUB  BL      MSG
        =       15,60
 [ OWNERRORS=1
        =       "Subscript out of range",0
 ]
        ALIGN
ERRSB2  BL      MSG
        =       15,61
 [ OWNERRORS=1
        =       "Incorrect number of subscripts",0
 ]
        ALIGN
ERSYNT  BL      MSG
        =       16,62
 [ OWNERRORS=1
        =       "Syntax error",0
 ]
        ALIGN
ESCAPE  BL      MSG
        =       17,63
 [ OWNERRORS=1
        =       "Escape",0
 ]
        ALIGN
ZDIVOR  BL      MSG
        =       18,64
 [ OWNERRORS=1
        =       "Division by zero",0
 ]
        ALIGN
ERLONG  BL      MSG
        =       19,65
 [ OWNERRORS=1
        =       "String too long",0
 ]
        ALIGN
FOVR    BL      MSG
        =       20,66
 [ OWNERRORS=1
        =       "Number too big",0
 ]
        ALIGN
 [ FPOINT=0
FOVR1   BL      MSG
        =       20,67
 [ OWNERRORS=1
        =       "Number too big for arc Sine or arc Cosine",0
 ]
        ALIGN
 ] ; FPOINT=0
 [ FPOINT<>1
FSQRTN  BL      MSG
        =       21,68
 [ OWNERRORS=1
        =       "Negative root",0
 ]
        ALIGN
 ] ; FPOINT<>1
 [ FPOINT=0
ERFLOG  BL      MSG
        =       22,69
 [ OWNERRORS=1
        =       "Logarithm range",0
 ]
        ALIGN
FRNGQQ  BL      MSG
        =       23,70
 [ OWNERRORS=1
        =       "Accuracy lost in Sine/Cosine/Tangent",0
 ]
        ALIGN
ERFEXP  BL      MSG
        =       24,71
 [ OWNERRORS=1
        =       "Exponent range",0
 ]
        ALIGN
 ] ; FPOINT=0
ERBADMODE BL      MSG
        =       25,13
 [ OWNERRORS=1
        =       "Bad MODE", 0
 ]
        ALIGN
FACERR  BL      MSG
        =       26,72
 [ OWNERRORS=1
        =       "Unknown or missing variable",0
 ]
        ALIGN
ERVARAR BL      MSG
        =       26,73
 [ OWNERRORS=1
        =       "Can't use array reference here",0
 ]
        ALIGN
ERBRA   BL      MSG
        =       27,74
 [ OWNERRORS=1
        =       "Missing )",0
 ]
        ALIGN
ERBRA1  BL      MSG
        =       27,75
 [ OWNERRORS=1
        =       "Missing (",0
 ]
        ALIGN
ERASSB1 BL      MSG
        =       27,76
 [ OWNERRORS=1
        =       "Missing ]",0
 ]
        ALIGN
ERASSB2 BL      MSG
        =       27,77
 [ OWNERRORS=1
        =       "Missing {",0
 ]
        ALIGN
ERASSB3 BL      MSG
        =       27,78
 [ OWNERRORS=1
        =       "Missing }",0
 ]
        ALIGN
ERHEX   BL      MSG
        =       28,79
 [ OWNERRORS=1
        =       "Bad Hex",0
 ]
        ALIGN
ERHEX2  BL      MSG
        =       28,80
 [ OWNERRORS=1
        =       "Hex number too large",0
 ]
        ALIGN
ERBIN   BL      MSG
        =       28,81
 [ OWNERRORS=1
        =       "Bad Binary",0
 ]
        ALIGN
FNMISS  BL      MSG
        =       29,82
 [ OWNERRORS=1
        =       "No such function/procedure",0
 ]
        ALIGN
FNCALL  BL      MSG
        =       30,83
 [ OWNERRORS=1
        =       "Bad call of function/procedure",0
 ]
        ALIGN
ARGMAT  BL      MSG
        =       31,84
 [ OWNERRORS=1
        =       "Arguments of function/procedure incorrect",0
 ]
        ALIGN
ARGMATRET
        BL      MSG
        =       31,85
 [ OWNERRORS=1
        =       "Invalid RETURN actual parameter",0
 ]
        ALIGN
ARGMATARR
        BL      MSG
        =       31,86
 [ OWNERRORS=1
        =       "Invalid array actual parameter",0
 ]
        ALIGN
ERNEXT  BL      MSG
        =       32,87
 [ OWNERRORS=1
        =       "Not in a FOR loop",0
 ]
        ALIGN
NEXTER  BL      MSG
        =       33,88
 [ OWNERRORS=1
        =       "Can't match FOR",0
 ]
        ALIGN
FORCV   BL      MSG
        =       34,89
 [ OWNERRORS=1
        =       "Bad FOR control variable",0
 ]
        ALIGN
FORSTEP BL      MSG
        =       35,90
 [ OWNERRORS=1
        =       "The step cannot be zero",0
 ]
        ALIGN
FORTO   BL      MSG
        =       36,91
 [ OWNERRORS=1
        =       "Missing TO",0
 ]
        ALIGN
ERDEEPPROC
        BL      MSG
        =       37,92
 [ OWNERRORS=1
        =       "No room for function/procedure call",0
 ]
        ALIGN
ERGOSB  BL      MSG
        =       38,93
 [ OWNERRORS=1
        =       "Not in a subroutine",0
 ]
        ALIGN
ONER    BL      MSG
        =       39,94
 [ OWNERRORS=1
        =       "ON syntax",0
 ]
        ALIGN
ONRGER  BL      MSG
        =       40,95
 [ OWNERRORS=1
        =       "ON range",0
 ]
        ALIGN
NOLINE  BL      MSG
        =       41,96
 [ OWNERRORS=1
        =       "No such line",0
 ]
        ALIGN
DATAOT  BL      MSG
        =       42,97
 [ OWNERRORS=1
        =       "Out of data",0
 ]
        ALIGN
ERRDATASTACK
        BL      MSG
        =       42,98
 [ OWNERRORS=1
        =       "DATA pointer not found on stack for RESTORE DATA",0
 ]
        ALIGN
ERREPT  BL      MSG
        =       43,99
 [ OWNERRORS=1
        =       "Not in a REPEAT loop",0
 ]
        ALIGN
ERDEEPNEST
        BL      MSG
        =       44,100
 [ OWNERRORS=1
        =       "Too many nested structures",0
 ]
        ALIGN
CHANNE  BL      MSG
        =       45,101
 [ OWNERRORS=1
        =       "Missing #",0
 ]
        ALIGN
ERWHIL  BL      MSG
        =       46,102
 [ OWNERRORS=1
        =       "Not in a WHILE loop",0
 ]
        ALIGN
NOENDC  BL      MSG
        =       47,103
 [ OWNERRORS=1
        =       "Missing ENDCASE",0
 ]
        ALIGN
ERCASE1 BL      MSG
        =       48,104
 [ OWNERRORS=1
        =       "OF missing from CASE statement",0
 ]
        ALIGN
ERCASE  BL      MSG
        =       48,105
 [ OWNERRORS=1
        =       "CASE..OF statement must be the last thing on a line",0
 ]
        ALIGN
NOENDI  BL      MSG
        =       49,106
 [ OWNERRORS=1
        =       "Missing ENDIF",0
 ]
        ALIGN
ERMOUS  BL      MSG
        =       50,107
 [ OWNERRORS=1
        =       "Bad MOUSE variable",0
 ]
        ALIGN
ERSYSINPUTS
        BL      MSG
        =       51,108
 [ OWNERRORS=1
        =       "Too many input expressions for SYS",0
 ]
        ALIGN
ERSYSOUTPUTS
        BL      MSG
        =       51,109
 [ OWNERRORS=1
        =       "Too many output variables for SYS",0
 ]
        ALIGN
ERINSTALL
        BL      MSG
        =       52,110
 [ OWNERRORS=1
        =       "Can't install library",0
 ]
        ALIGN
BADPRO1 BL      MSG
        =       52,111
 [ OWNERRORS=1
        =       "Bad program used as function/procedure library",0
 ]
        ALIGN
NOLIBROOM
        BL      MSG
        =       52,112
 [ OWNERRORS=1
        =       "No room for library",0
 ]
        ALIGN
ERASS2C BL      MSG
        =       2,113
 [ OWNERRORS=1
        =       "Bad coprocessor opcode",0
 ]
        ALIGN
ERASSB4 BL      MSG
        =       27,114
 [ OWNERRORS=1
        =       "Missing [",0
 ]
        ALIGN
ERASSFP1
        BL      MSG
        =       1,115
 [ OWNERRORS=1
        =       "Bad FP precision",0
 ]
        ALIGN
ERBPP   BL      MSG
        =       53,116
 [ OWNERRORS=1
        =       "Bad screen depth", 0
 ]
        ALIGN
ERMVSTK BL      MSG
        =       54,117
 [ OWNERRORS=1
        =       "END= not allowed within DIM LOCAL", 0
 ]
        ALIGN

 [ :DEF: VFPAssembler

EVFPFPIMM BL    MSG
        =       2,118
  [ OWNERRORS=1
        =       "Bad VFP/NEON floating point immediate constant", 0
  ]
        ALIGN
EVFPSIL BL      MSG
        =       0,119
  [ OWNERRORS=1
        =       "VFP internal mismatch", 0
  ]
        ALIGN
EVFPSCR BL      MSG
        =       3,120
  [ OWNERRORS=1
        =       "VFP scalar offset out of range", 0
  ]
        ALIGN
EVFPSCC BL      MSG
        =       3,121
  [ OWNERRORS=1
        =       "VFP scalar must not change in register list", 0
  ]
        ALIGN
EVFPRLC BL      MSG
        =       3,122
  [ OWNERRORS=1
        =       "Too many registers in list", 0
  ]
        ALIGN
EVFPRIA BL      MSG
        =       2,123
  [ OWNERRORS=1
        =       "Label/offset must be word aligned", 0
  ]
        ALIGN
 ]
 [ FPOINT=2
VFPException_SQRT ; Assume we arrived here with R14 = FPSCR
        TST     R14,#FPSCR_IOC
        BNE     FSQRTN
VFPException
        FMRX    R0,FPSCR
        TST     R0,#FPSCR_DZC
        BNE     ZDIVOR
        TST     R0,#FPSCR_OFC
        BNE     FOVR
EINVOP  BL      MSG
        =       55,124
  [ OWNERRORS=1
        =       "Invalid arithmetic operation", 0
  ]
        ALIGN
 ]
 [ standalone
Basic_ResFiles
  [ :DEF: VFPAssembler
        ResourceFile VFPData,     Resources.BASIC.VFPData
  ]
        ResourceFile $MergedMsgs, Resources.BASIC.$NameMsgs
        DCD     0
 ]
        
Basic_End

        END
@


1.12
log
@Renumber 'Bad MODE' for beeb compatibility
Bad MODE is ERR=25 on the BBC Micro, follow suit here, and correct the message file token number (should be 13 to match earlier reorganisation).

Version 1.72. Not tagged
@
text
@d517 2
d525 2
d879 3
d889 1
a889 1
        =       0,124
d891 1
a891 1
        =       "Invalid operation", 0
@


1.11
log
@MODE improvements
Detail:
  1. MODE <string> now uses OS_ScreenMode 15 rather than *WimpMode, to avoid programs which use it (likely unintentionally) altering the Wimp mode or having to worry about preserving it
  2. If OS_ScreenMode 15 isn't supported, use our own mode string parsing code that provides a similar level of functionality to the host system's *WimpMode
  3. For all MODE variants which use OS_ScreenMode, detect any "SWI not known" error and replace it with "Bad MODE" (under the assumption the user is running pre-OS 3.5)
  4. Add a new variant, MODE <x>,<y>,<modeflags>,<ncolour>,<log2bpp>[,<hz>] to allow specification of the three parameters necessary for selecting the new screen modes introduced by RISC OS Select/5
  Files: Resources/UK/CmdHelp, Resources/UK/Messages, s/ErrorMsgs, s/ModHead, s/Stmt2
Admin:
  Tested on RISC OS 3.1, 3.7, and latest 5.23


Version 1.70. Tagged as 'BASIC-1_70'
@
text
@d542 6
a887 6
ERBADMODE BL      MSG
        =       53,125
 [ OWNERRORS=1
        =       "Bad MODE", 0
 ]
        ALIGN
@


1.10
log
@Add "BASICVFP", a VFP version of BASIC64
Detail:
  See Doc/BASICVFP for overall design/specification
  File changes:
  - !Mk,fd7, !MkClean,fd7, !MkRom,fd7, Makefile - update build scripts to support BASICVFP target
  - Resources/UK/Messages - Add a few new messages
  - hdr/Definitions - Define BASICVFP register usage and a few utility macros
  - hdr/WorkSpace - Define BASICVFP workspace adjustments. Add a few asserts to check some workspace constraints are maintained.
  - s/* - Lots of changes to add support for BASICVFP variant of the module
Admin:
  Tested on Raspberry Pi 1/2/3, BB-xM


Version 1.67. Tagged as 'BASIC-1_67'
@
text
@d882 6
@


1.9
log
@Have BASIC manage its own messages
For the standalone case BASIC[64] will now register its own resources into Resources/BASIC/BASIC[64]Msgs.
For the ROM case BASIC[64] will share them in Resources/BASIC/Messages as before.
This ensures that regardless of the order of loading, and the potential that a ROM and standalone version might be mixed, both ends up seeing the messages its expecting to see.
Tested in a ROM build and softloaded on RISC OS 4.02.

Version 1.57. Tagged as 'BASIC-1_57'
@
text
@d541 1
a541 1
 ]
d868 14
a881 1

@


1.8
log
@Non functional changes
Lined up some comments.
Changed LNK filenames to be Unix style (thing.s rather than s.thing).
Tagged as BASIC-1_57-pre2
@
text
@d869 9
@


1.7
log
@  Error handling fix, part 4
Detail:
  The commands TWIN and TWINO are redundant, so have been removed and
  now give a 'Mistake' error. The tokenisation has not been changed. CALLEDNAME
  is now redundant, but the first byte is used as a QUIT flag, so it has not
  been changed. BasicTrans was also changed to remove references to TWIN, and
  say 'This command is no longer available'. Fixes line number of error when
  TWIN entered after Fix 1.
Admin:
  Changes by Martin Avison

Version 1.53. Not tagged
@
text
@d827 1
d830 1
a830 1
        ALIGN
a834 1
;        =       "%0 cannot be represented as a VFP/NEON floating point immediate constant. Nearest suitable floating point value is %1", 0
a835 1

a841 1

a847 1

a853 1

a859 1

d866 1
a866 1
         
@


1.6
log
@VFP/NEON assembler fixes and improvements
Detail:
  * Reworked to make ROM builds reference VFP/NEON assembler lookup tables held in ResourceFS instead of using local copies held in the module. Saves ~32K of ROM space due to reduced data duplication between BASIC & BASIC64.
  * Replace OPT flag magic numbers with symbols
  * Added support for VFPv4/ASIMDv2 instructions (VFMA/VFMS, VFNMA/VFNMS)
  * Updated DCFD/EQUFD to add support for .VFP and .FPA suffixes, to indicate whether VFP or FPA word order should be used
  * Added DCFH/EQUFH for storing half precision floats (in advanced half precision format)
  * Rework MSG routine to preserve R4-R7, for passing to BASICTrans as message parameters
  * Added a few new error messages (118-123) for the VFP/NEON assembler
  * Enable OWNERRORS option for standalone builds, and set DO32BIT to 0 for 26bit builds
  * Fixed VLDM/VSTM style register lists not working correctly when using commas to list the registers
  * Improved handling of VFP/NEON 8 bit immediate constants:
    - No longer possible to use #I64.<n>, #F32.<n>, #F64.<n> notation to directly specify the 8-bit encoded value for I64/F32/F64 constants, nor to force one instruction to attempt to use a constant in a format that doesn't match the .<dt> instruction suffix
    - Instead, .I64 constants can either be specified as a number (which will be converted to an integer and then zero-extended to 64 bits) or a string (which will be parsed by the 64bit version of OS_ReadUnsigned)
    - .F32 and .F64 constants should now be specified as floating point numbers which will then be correctly converted to the 8 bit encoding
    - .F32 and .F64 constants which can't be converted will result in a error message indicating the closest possible floating point number that can be encoded (but not necessarily the closest number that can be encoded; e.g. when assembling NEON instructions the assembler can automatically make use of .I32 encoding formats for some numbers)
  * Fixed instructions that have an 'imn' field (e.g. VSHR immediate) being incorrectly assembled
  * VFPLib.GenData & VFPLib.VFPLib now stored as text instead of tokenised BASIC
  Files changed:
  * Makefile, VFPLib.GenData, VFPLib.VFPLib, hdr.VFPMacros, hdr.Workspace, s.Assembler, s.Basic, s.ErrorMsgs, s.Factor, s.ModHead, s.VFP
Admin:
  Tested as softloaded module & in Iyonix ROM softload
  Requires BASICTrans 2.13 for new error messages to work properly


Version 1.50. Tagged as 'BASIC-1_50'
@
text
@a132 6
ERTWINO BL      MSG
        =       0,8
 [ OWNERRORS=1
        =       "Invalid TWINO option",0
 ]
        ALIGN
d158 1
a158 1
        =       "LIST/TWIN found line number reference",0
@


1.5
log
@A few more bits of code tidy-up. Should still not have changed binary.

Version 1.41. Tagged as 'BASIC-1_41'
@
text
@d831 1
a831 1
        =       "", 0
d833 47
@


1.4
log
@Lots of code improvements but no changes to the built binary.

This update replaces lots of hard-wired definitions of things such as SWI
names with the ones from the main exports in the build environment. It
should build a binary-identical module to the previous revision.

Author: Rob Sprowson

Version 1.40. Tagged as 'BASIC-1_40'
@
text
@d56 1
a56 1
        MOV     R10,R13
@


1.3
log
@  * Performance tweaks.
  * Comments added.
  * Added DIM LOCAL.
Detail:
  * All of the 408 instances of pushes and pops of a single register
    (i.e. "LDMIA SP!,{PC}") have been replaced with an LDR/STR equivalent,
    which provides a small performance boost on StrongARM-like processors.
  * Some obscure bits of the source have had comments added.
  * The new DIM LOCAL statement has been added:

    Syntax: DIM <numeric variable> LOCAL <numeric expression>

    DIM LOCAL allocates space from the BASIC stack rather than from the
    heap. This means that the space allocated is automatically freed on
    exit from the PROC or FN in which it was claimed.

    As with all LOCAL statements, it must appear in a PROC or FN definition
    and cannot appear inside a structure which uses the stack (i.e. NEXT)
    or after a LOCAL ERROR.

    Much like the manner in which "DIM foo% -1" returns the value of FSA
    without allocating space, "DIM foo% LOCAL -1" returns the value of SP
    at the time of the request, without allocating any space from the stack.
    This can be useful in computing the free space between the top of the
    BASIC heap and the bottom of the stack. Of course, the stack is used by
    BASIC while interpreting the program, so the contents of memory below
    foo% should always be treated as undefined.

    One caveat of using DIM LOCAL is that the stack cannot be moved while
    there are DIM LOCALs defined. END= will return an error and any
    Service_Memory calls will be claimed for the duration of the DIM LOCAL.
Admin:
  Builds and tested on RiscPC.
  Requires BASICTrans-2_06.

Version 1.30. Tagged as 'BASIC-1_30'
@
text
@d15 4
a18 2
; > ErrorMsgs
 [ 1=0 ;debug code
d20 1
a20 1
        SWI     WRITES
d24 1
a24 1
        SWI     WRITES
d28 1
a28 1
        SWI     WRITES
d32 1
a32 1
        SWI     WRITES
d36 2
a37 2
        SWI     NEWLINE
        SWI     WRITES
d41 1
a41 1
        SWI     WRITES
d45 1
a45 1
        SWI     WRITES
d49 1
a49 1
        SWI     WRITES
d53 2
a54 2
        SWI     NEWLINE
        SWI     WRITES
d58 1
a58 1
        SWI     WRITES
d62 1
a62 1
        SWI     WRITES
d66 1
a66 1
        SWI     NEWLINE
d68 1
a68 1
WORDSP  SWI     WRITEI+" "
d78 1
a78 1
        SWI     WRITEC
d516 1
a516 1
 [ FP=0
@


1.2
log
@* New forms of MODE, COLOUR and GCOL added.
* VDU can now be used as a function to read VDU variables.
* Will surrender application memory for MODE changes etc.

See Doc.Changes for full info.

Version 1.26. Tagged as 'BASIC-1_26'
@
text
@d825 6
@


1.1
log
@  Improved BASIC build structure. No code change.
Detail:
  Makefile strips dependencies during the clean phase.

  Sources moved into an 's' directory.

  All sources reformatted into a more readable layout.
Admin:
  Builds binary-identical versions of BASIC and BASIC64 modules to
  version 1.22

Version 1.23. Tagged as 'BASIC-1_23'
@
text
@d87 1
a87 1
        ALIGN   
d93 1
a93 1
        ALIGN   
d99 1
a99 1
        ALIGN   
d105 1
a105 1
        ALIGN   
d111 1
a111 1
        ALIGN   
d118 1
a118 1
        ALIGN   
d124 1
a124 1
        ALIGN   
d130 1
a130 1
        ALIGN   
d136 1
a136 1
        ALIGN   
d145 1
a145 1
        ALIGN   
d151 1
a151 1
        ALIGN   
d157 1
a157 1
        ALIGN   
d164 1
a164 1
        ALIGN   
d171 1
a171 1
        ALIGN   
d178 1
a178 1
        ALIGN   
d185 1
a185 1
        ALIGN   
d191 1
a191 1
        ALIGN   
d198 1
a198 1
        ALIGN   
d204 1
a204 1
        ALIGN   
d210 1
a210 1
        ALIGN   
d217 1
a217 1
        ALIGN   
d223 1
a223 1
        ALIGN   
d229 1
a229 1
        ALIGN   
d236 1
a236 1
        ALIGN   
d242 1
a242 1
        ALIGN   
d249 1
a249 1
        ALIGN   
d255 1
a255 1
        ALIGN   
d261 1
a261 1
        ALIGN   
d268 1
a268 1
        ALIGN   
d275 1
a275 1
        ALIGN   
d282 1
a282 1
        ALIGN   
d289 1
a289 1
        ALIGN   
d296 1
a296 1
        ALIGN   
d303 1
a303 1
        ALIGN   
d310 1
a310 1
        ALIGN   
d317 1
a317 1
        ALIGN   
d324 1
a324 1
        ALIGN   
d330 1
a330 1
        ALIGN   
d337 1
a337 1
        ALIGN   
d343 1
a343 1
        ALIGN   
d349 1
a349 1
        ALIGN   
d355 1
a355 1
        ALIGN   
d361 1
a361 1
        ALIGN   
d368 1
a368 1
        ALIGN   
d375 1
a375 1
        ALIGN   
d382 1
a382 1
        ALIGN   
d388 1
a388 1
        ALIGN   
d395 1
a395 1
        ALIGN   
d401 1
a401 1
        ALIGN   
d408 1
a408 1
        ALIGN   
d414 1
a414 1
        ALIGN   
d420 1
a420 1
        ALIGN   
d427 1
a427 1
        ALIGN   
d434 1
a434 1
        ALIGN   
d440 1
a440 1
        ALIGN   
d446 1
a446 1
        ALIGN   
d452 1
a452 1
        ALIGN   
d458 1
a458 1
        ALIGN   
d465 1
a465 1
        ALIGN   
d471 1
a471 1
        ALIGN   
d477 1
a477 1
        ALIGN   
d483 1
a483 1
        ALIGN   
d489 1
a489 1
        ALIGN   
d495 1
a495 1
        ALIGN   
d501 1
a501 1
        ALIGN   
d507 1
a507 1
        ALIGN   
d513 1
a513 1
        ALIGN   
d520 1
a520 1
        ALIGN   
d526 1
a526 1
        ALIGN   
d532 1
a532 1
        ALIGN   
d538 1
a538 1
        ALIGN   
d544 1
a544 1
        ALIGN   
d551 1
a551 1
        ALIGN   
d557 1
a557 1
        ALIGN   
d563 1
a563 1
        ALIGN   
d569 1
a569 1
        ALIGN   
d575 1
a575 1
        ALIGN   
d581 1
a581 1
        ALIGN   
d587 1
a587 1
        ALIGN   
d593 1
a593 1
        ALIGN   
d599 1
a599 1
        ALIGN   
d605 1
a605 1
        ALIGN   
d611 1
a611 1
        ALIGN   
d617 1
a617 1
        ALIGN   
d623 1
a623 1
        ALIGN   
d630 1
a630 1
        ALIGN   
d637 1
a637 1
        ALIGN   
d643 1
a643 1
        ALIGN   
d649 1
a649 1
        ALIGN   
d655 1
a655 1
        ALIGN   
d661 1
a661 1
        ALIGN   
d667 1
a667 1
        ALIGN   
d674 1
a674 1
        ALIGN   
d680 1
a680 1
        ALIGN   
d686 1
a686 1
        ALIGN   
d692 1
a692 1
        ALIGN   
d698 1
a698 1
        ALIGN   
d704 1
a704 1
        ALIGN   
d711 1
a711 1
        ALIGN   
d717 1
a717 1
        ALIGN   
d724 1
a724 1
        ALIGN   
d730 1
a730 1
        ALIGN   
d736 1
a736 1
        ALIGN   
d742 1
a742 1
        ALIGN   
d748 1
a748 1
        ALIGN   
d754 1
a754 1
        ALIGN   
d760 1
a760 1
        ALIGN   
d766 1
a766 1
        ALIGN   
d773 1
a773 1
        ALIGN   
d780 1
a780 1
        ALIGN   
d787 1
a787 1
        ALIGN   
d793 1
a793 1
        ALIGN   
d800 1
a800 1
        ALIGN   
d806 1
a806 1
        ALIGN   
d812 1
a812 1
        ALIGN   
d819 6
d826 2
a827 2
                
        END     
@

