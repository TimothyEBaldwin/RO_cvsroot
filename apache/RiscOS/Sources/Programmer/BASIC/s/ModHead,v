head	1.15;
access;
symbols
	BASIC-1_75:1.15
	BASIC-1_74:1.15
	BASIC-1_73:1.15
	BASIC-1_72:1.15
	BASIC-1_71:1.14
	BASIC-1_70:1.14
	BASIC-1_69:1.13
	BASIC-1_68:1.13
	BASIC-1_67:1.13
	BASIC-1_66:1.12
	BASIC-1_65:1.12
	BASIC-1_64:1.12
	BASIC-1_63:1.12
	BASIC-1_62:1.12
	BASIC-1_61:1.12
	BASIC-1_60:1.12
	BASIC-1_59:1.12
	BASIC-1_58:1.11
	BASIC-1_57-pre4:1.10
	BASIC-1_57:1.11
	BASIC-1_57-pre3:1.10
	BASIC-1_57-pre2:1.10
	BASIC-1_57-pre1:1.10
	BASIC-1_56:1.9
	BASIC-1_55:1.9
	BASIC-1_54:1.9
	BASIC-1_53:1.9
	BASIC-1_52:1.9
	BASIC-1_51:1.9
	BASIC-1_50:1.9
	BASIC-1_49:1.8
	BASIC-1_48:1.7
	BASIC-1_47:1.7
	BASIC-1_46:1.7
	BASIC-1_45:1.7
	BASIC-1_44:1.7
	BASIC-1_43:1.6
	BASIC-1_42:1.6
	BASIC-1_41:1.5
	BASIC-1_40:1.4
	BASIC-1_39:1.3
	BASIC-1_37:1.3
	RO_5_07:1.3
	BASIC-1_36:1.3
	BASIC-1_35:1.2
	BASIC-1_34:1.2
	BASIC-1_33:1.2
	BASIC-1_32:1.2
	BASIC-1_31:1.2
	BASIC-1_30:1.2
	BASIC-1_29:1.2
	BASIC-1_28:1.1
	BASIC-1_27:1.1;
locks; strict;
comment	@# @;


1.15
date	2017.09.07.19.34.40;	author rsprowson;	state Exp;
branches;
next	1.14;
commitid	ulAIao6m9bYzGi6A;

1.14
date	2017.07.22.21.51.02;	author jlee;	state Exp;
branches;
next	1.13;
commitid	CDYQ0yZDiBs2Xg0A;

1.13
date	2017.06.03.22.30.34;	author jlee;	state Exp;
branches;
next	1.12;
commitid	3Iuze3DCMuQaKYTz;

1.12
date	2014.09.24.21.07.30;	author bavison;	state Exp;
branches;
next	1.11;
commitid	qciAFgpcX9uOSDRx;

1.11
date	2013.12.01.18.09.40;	author rsprowson;	state Exp;
branches;
next	1.10;
commitid	g83hl4RCFV1Crsfx;

1.10
date	2013.12.01.17.23.40;	author rsprowson;	state Exp;
branches;
next	1.9;
commitid	iG291GP27DoPasfx;

1.9
date	2012.03.07.23.34.26;	author jlee;	state Exp;
branches;
next	1.8;
commitid	mqtCES9yyNSyC0Wv;

1.8
date	2011.12.19.16.48.36;	author jlee;	state Exp;
branches;
next	1.7;
commitid	pdX82Kz8wJDIUOLv;

1.7
date	2009.06.16.00.05.23;	author bavison;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.10.19.04.45;	author jlee;	state Exp;
branches;
next	1.5;

1.5
date	2009.04.24.00.35.15;	author srevill;	state Exp;
branches;
next	1.4;

1.4
date	2009.04.24.00.27.16;	author srevill;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.21.17.21.09;	author mhobbs;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.14.17.36.24;	author srevill;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.11.09.31.11;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Automatically pick the best FP model for the hosting CPU
Have BASIC V pick either BASICVFP or BASIC VI as appropriate for the current CPU, so if there's VFP hardware don't emulate everything as FPA opcodes.
The BASIC64 command (moved to BASIC V) will now automatically RMEnsure then enter the respective module. If there's something depending on the internal workings of BASIC VI and wishes to explicitly select that even when VFP is present a new command, *BASICFPA, forces BASIC VI to start.
By having BASIC V manage this selection we in effect remove the requirement to remember to RMEnsure the floating point version, which is usually either forgotten about or wrong anyway.
Compatibility wise
  RISC OS 5 includes all 3 variants (2 if no VFP) and will adopt the new logic.
  Existing RISC OS 5 stable releases have always included BASIC V and VI, so will work as before (through emulating FPA).
  Soft loaded modules inside !System will be handled by a disc based update.
Changed files
  CmdHelp: adds the new BASIC64 help/syntax message
  Basic.s: qualify the FPA version in it's startup banner
  ModHead.s: add the new selection logic, and move the 'VFP' help to be a suffix so the module names line up nicely in *Modules again
Tested in both ROM and disc based guises on ARMs with and without VFP hardware.

Version 1.72. Tagged as 'BASIC-1_72'
@
text
@; Copyright 2001 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;> Module header

 [ :LNOT: :DEF: standalone
                GBLL    standalone
standalone      SETL    {FALSE}         ; Default to ROM based
 ]
 [ :LNOT: :DEF: international_help
                GBLL    international_help
international_help SETL {TRUE}          ; Default to RISC OS 3.60+ internationalisation
 ]

        GET     ./VersionASM
        GET     ./WorkSpace.hdr
        GET     ./Tokens.hdr
        GET     ./Definitions.hdr
        GET     ListOpts
        GET     Macros
        GET     System
        GET     ModHand
        GET     MsgTrans
        GET     Services
        GET     FSNumbers
        GET     NewErrors
        GET     PaletteV
        GET     Wimp
        GET     ColourTran
        GET     ResourceFS
        GET     Territory
        GET     PublicWS
        GET     Sound
        GET     OsWords
        GET     VFPSupport
        GET     VduExt

RELEASEVER                     *       1              ;1 for release version: no Roger
OWNERRORS                      *       0              ;1 for english error messages in module
CHECKCRUNCH                    *       1              ;1 for BASIC$Crunch check on -quit and LIBRARY, INSTALL etc.
SAFECRUNCH                     *       15             ;15 is a nice safe looking number

                               GBLS    Name
                               GBLS    NameMsgs
 [ FPOINT=0
Name                           SETS    "BASIC"
 ELIF FPOINT=1
Name                           SETS    "BASIC64"
 ELIF FPOINT=2
Name                           SETS    "BASICVFP"
 |
        ! 1, "Unknown FPOINT setting"
 ]
 [ standalone
NameMsgs                       SETS    "$Name.Msgs"
 |
NameMsgs                       SETS    "Messages"     ;share when not standalone
 ] 

        AREA    |BASIC$$Code|, CODE, READONLY, PIC
        ENTRY


Module_BaseAddr                *       .

Basic_ModuleStart
        DCD     MODULEMAIN-Module_BaseAddr
 [ standalone
        DCD     Basic_Init-Module_BaseAddr
        DCD     Basic_Die-Module_BaseAddr
 |
        DCD     0                      ;Basic_Init
        DCD     0                      ;Basic_Die
 ]       
        DCD     Basic_Services-Module_BaseAddr
        DCD     Basic_Title-Module_BaseAddr
        DCD     Basic_HelpStr-Module_BaseAddr
        DCD     Basic_HC_Table-Module_BaseAddr
        DCD     0
        DCD     0
        DCD     0
        DCD     0
 [ international_help
        DCD     Basic_MessageFile-Module_BaseAddr
 |
        DCD     0
 ]
 [ :LNOT:No32bitCode
        DCD     Basic_ModuleFlags-Module_BaseAddr
 ]

Basic_HC_Table

 [ international_help
      [ FPOINT=1
        Command BASICFPA, 255, 0, International_Help, Basic
      |
        Command $Name, 255, 0, International_Help, Basic
      ]
      [ FPOINT=0
        Command BASIC64, 255, 0, International_Help, Basic64
      ]
        DCB     0
        ALIGN

Basic_Help
        DCB     "HBASBAS",0
Basic_Syntax
        DCB     "SBASBAS",0
      [ FPOINT=0
Basic64_Help
        DCB     "HBASB64",0
Basic64_Syntax
        DCB     "SBASB64",0
      ]
 |
      [ FPOINT=1
        Command BASICFPA, 255, 0, 0, Basic
      |
        Command $Name, 255, 0, 0, Basic
      ]
      [ FPOINT=0
        Command BASIC64, 255, 0, 0, Basic64
      ]
        DCB     0
        ALIGN

Basic_Help
        DCB     "$Name. is the ARM BBC BASIC interpreter."
        DCB     13
Basic_Syntax
        DCB     "Syntax: *$Name. [-help|-chain|-load|-quit] <filename>",0
      [ FPOINT=0
Basic64_Help
        DCB     "BASIC64 starts the double precision BASIC interpreter."
        DCB     13
Basic64_Syntax
        DCB     "Syntax: *BASIC64 [-help|-chain|-load|-quit] <filename>",0
      ]
 ]

Basic_MessageFile
        DCB     "Resources:$.Resources.BASIC.$NameMsgs.",0

Basic_Title
        DCB     "$Name.",0

Basic_HelpStr

 [ FPOINT=0
        DCB     "BBC BASIC V",9,"$Module_HelpVersion", 0
 ELIF FPOINT=1
        DCB     "BBC BASIC VI",9,"$Module_HelpVersion FPA", 0
 ELIF FPOINT=2
        DCB     "BBC BASIC VI",9,"$Module_HelpVersion VFP", 0
 |
        ! 1, "Unknown FPOINT setting"
 ]
        ALIGN

 [ :LNOT:No32bitCode
Basic_ModuleFlags
        DCD     ModuleFlag_32bit
 ]

 [ standalone
Basic_Init
        MOV     R6,LR
        ADRL    R0,Basic_ResFiles
        SWI     XResourceFS_RegisterFiles
        MOV     PC,R6

Basic_Die
        MOV     R6,LR
        ADRL    R0,Basic_ResFiles
        SWI     XResourceFS_DeregisterFiles
        CLRV
        MOV     PC,R6

Basic_ReRegRes
        Push    "R0,LR"
        ADRL    R0,Basic_ResFiles
        MOV     LR,PC
        MOV     PC,R2
        Pull    "R0,PC"
 ]

Basic_ServicesTable
        DCD     0
        DCD     Basic_ServicesBody-Module_BaseAddr
        ASSERT  Service_Memory < Service_ResourceFSStarting
        DCD     Service_Memory
 [ standalone
        DCD     Service_ResourceFSStarting
 ]       
        DCD     0

;In r0 -> rest of command line
;r1 = number of parameters to *basic[fpa|vfp]

Basic_Code
        MOV     R3,R14
        MOV     R2,R0
        MOV     R0,#ModHandReason_Enter
        ADR     R1,Basic_Title
        SWI     XOS_Module
        MOV     PC,R3

 [ FPOINT=0
;In r0 -> rest of command line
;r1 = number of parameters to *basic64

Basic64_Code
        MOV     R3,R14
        MOV     R2,R0
        SWI     XVFPSupport_Version    ;cheap check if VFP capable
        ADRVC   R0,Basic64_EnsureVFP
        ADRVC   R4,Basic64_TitleVFP
        ADRVS   R0,Basic64_EnsureFPA
        ADRVS   R4,Basic64_TitleFPA
        SWI     XOS_CLI                ;try to load desired FP model
        MOV     R0,#ModHandReason_Enter
        MOV     R1,R4
        SWI     XOS_Module
        MOV     PC,R3
Basic64_EnsureVFP DCB "RMEnsure BASICVFP 0 RMLoad System:Modules.BASICVFP", 0
Basic64_TitleVFP  DCB "BASICVFP", 0
Basic64_EnsureFPA DCB "RMEnsure BASIC64 0 RMLoad System:Modules.BASIC64", 0
Basic64_TitleFPA  DCB "BASIC64", 0
        ALIGN
 ]
 
        DCD     Basic_ServicesTable-Module_BaseAddr

Basic_Services
        MOV     R0,R0
        CMP     R1,#Service_Memory
 [ standalone
        CMPNE   R1,#Service_ResourceFSStarting
 ]
        MOVNE   PC,R14

Basic_ServicesBody
 [ standalone
        TEQ     R1,#Service_ResourceFSStarting
        BEQ     Basic_ReRegRes
 ]
        ADR     R12,Basic_ModuleStart
        CMP     R2,R12                 ;R2 contains the address of the currently active object
        ADDHS   R12,R12,#(Basic_End - Basic_ModuleStart):AND:&0000FF
        ADDHS   R12,R12,#(Basic_End - Basic_ModuleStart):AND:&00FF00
        ADDHS   R12,R12,#(Basic_End - Basic_ModuleStart):AND:&FF0000
        CMPHS   R12,R2
        BHS     MOVEMEMORY             ;claim service - it's in us
        MOV     PC,R14

        LNK     Basic.s
@


1.14
log
@MODE improvements
Detail:
  1. MODE <string> now uses OS_ScreenMode 15 rather than *WimpMode, to avoid programs which use it (likely unintentionally) altering the Wimp mode or having to worry about preserving it
  2. If OS_ScreenMode 15 isn't supported, use our own mode string parsing code that provides a similar level of functionality to the host system's *WimpMode
  3. For all MODE variants which use OS_ScreenMode, detect any "SWI not known" error and replace it with "Bad MODE" (under the assumption the user is running pre-OS 3.5)
  4. Add a new variant, MODE <x>,<y>,<modeflags>,<ncolour>,<log2bpp>[,<hz>] to allow specification of the three parameters necessary for selecting the new screen modes introduced by RISC OS Select/5
  Files: Resources/UK/CmdHelp, Resources/UK/Messages, s/ErrorMsgs, s/ModHead, s/Stmt2
Admin:
  Tested on RISC OS 3.1, 3.7, and latest 5.23


Version 1.70. Tagged as 'BASIC-1_70'
@
text
@a45 1
      [ FPOINT=2
a46 1
      ]
d106 3
d110 4
d121 6
d128 3
d132 4
d144 7
d164 1
a164 1
        DCB     "BBC BASIC VI",9,"$Module_HelpVersion", 0
d166 1
a166 1
        DCB     "BBC BASIC VI (VFP)",9,"$Module_HelpVersion", 0
d210 1
a210 1
;r1 = number of parameters to *ab
d220 24
@


1.13
log
@Add "BASICVFP", a VFP version of BASIC64
Detail:
  See Doc/BASICVFP for overall design/specification
  File changes:
  - !Mk,fd7, !MkClean,fd7, !MkRom,fd7, Makefile - update build scripts to support BASICVFP target
  - Resources/UK/Messages - Add a few new messages
  - hdr/Definitions - Define BASICVFP register usage and a few utility macros
  - hdr/WorkSpace - Define BASICVFP workspace adjustments. Add a few asserts to check some workspace constraints are maintained.
  - s/* - Lots of changes to add support for BASICVFP variant of the module
Admin:
  Tested on Raspberry Pi 1/2/3, BB-xM


Version 1.67. Tagged as 'BASIC-1_67'
@
text
@d49 1
@


1.12
log
@  Tweaks to permit BASIC to cross-compile
Detail:
  * Changed file paths to forms that also work when cross-compiling
  * Changed case of filenames so they match on case-sensitive filing systems
  * Makefile needs to use leading tabs
  * Escaped the '$' in 'BASIC$Crunch' (squashes a warning in new version of
    objasm - unrelated to cross-compilation)
Admin:
  Cross-compiles OK with Norcroft tools, though asasm can't stomach the
  expressions BASIC uses. Checked it still builds with RISC OS Norcroft.

Version 1.59. Not tagged
@
text
@d46 3
d59 4
d64 1
a64 1
Name                           SETS    "BASIC64"
d75 1
d137 4
d142 1
a142 1
        DCB     "BBC BASIC VI",9,"$Module_HelpVersion", 0
@


1.11
log
@Have BASIC manage its own messages
For the standalone case BASIC[64] will now register its own resources into Resources/BASIC/BASIC[64]Msgs.
For the ROM case BASIC[64] will share them in Resources/BASIC/Messages as before.
This ensures that regardless of the order of loading, and the potential that a ROM and standalone version might be mixed, both ends up seeing the messages its expecting to see.
Tested in a ROM build and softloaded on RISC OS 4.02.

Version 1.57. Tagged as 'BASIC-1_57'
@
text
@d26 20
a45 20
        GET     VersionASM
        GET     Hdr/WorkSpace
        GET     Hdr/Tokens
        GET     Hdr/Definitions
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Modhand
        GET     Hdr:MsgTrans
        GET     Hdr:Services
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:PaletteV
        GET     Hdr:Wimp
        GET     Hdr:ColourTran
        GET     Hdr:ResourceFS
        GET     Hdr:Territory
        GET     Hdr:PublicWS
        GET     Hdr:Sound
        GET     Hdr:OsWords
d206 1
a206 1
        LNK     BASIC.s
@


1.10
log
@Redo DO32BIT portions using central macros
When 32 bitted there weren't 26/32 neutral macros around, but can use them now there are allowing one common output binary for disc based BASIC.
Some of the sneaky 26 bit code (eg. relying on address space wrapping at 64MB rather than explicitly clearing bits when computing a jump) adopt the safer 32 bit form even if that does cost 1 extra instruction.
Tagged as BASIC-1_57-pre1
@
text
@d19 1
a19 1
standalone      SETL    {FALSE}
d21 25
d47 2
a48 27
                               GET     VersionASM
                               GET     Hdr/WorkSpace
                               GET     Hdr/Tokens
                               GET     Hdr/Definitions
                               GET     Hdr:ListOpts
                               GET     Hdr:Macros
                               GET     Hdr:System
                               GET     Hdr:Modhand
                               GET     Hdr:Services
                               GET     Hdr:FSNumbers
                               GET     Hdr:NewErrors
                               GET     Hdr:PaletteV
                               GET     Hdr:Wimp
                               GET     Hdr:ColourTran
                               GET     Hdr:BASICTrans
                               GET     Hdr:Territory
                               GET     Hdr:PublicWS
                               GET     Hdr:Sound
                               GET     Hdr:OsWords
                               GET     Hdr:CPU.Arch

RELEASEVER                     *       1              ;1 for release version: no MANDEL or Roger
 [ standalone
OWNERRORS                      *       1              ;1 for error messages in module
 |
OWNERRORS                      *       0
 ]
a50 1
LOOKUPHELP                     *       1              ;1 for lookup command help syntax in Resources messages file.
d53 1
d59 5
d72 4
d78 1
d87 1
a87 1
 [ LOOKUPHELP=1
d98 1
a98 1
 [ LOOKUPHELP=1
a102 2
Basic_MessageFile
        DCB     "Resources:$.Resources.BASIC.Messages",0
d119 3
d139 22
d164 1
d166 3
d187 3
d193 4
@


1.9
log
@VFP/NEON assembler fixes and improvements
Detail:
  * Reworked to make ROM builds reference VFP/NEON assembler lookup tables held in ResourceFS instead of using local copies held in the module. Saves ~32K of ROM space due to reduced data duplication between BASIC & BASIC64.
  * Replace OPT flag magic numbers with symbols
  * Added support for VFPv4/ASIMDv2 instructions (VFMA/VFMS, VFNMA/VFNMS)
  * Updated DCFD/EQUFD to add support for .VFP and .FPA suffixes, to indicate whether VFP or FPA word order should be used
  * Added DCFH/EQUFH for storing half precision floats (in advanced half precision format)
  * Rework MSG routine to preserve R4-R7, for passing to BASICTrans as message parameters
  * Added a few new error messages (118-123) for the VFP/NEON assembler
  * Enable OWNERRORS option for standalone builds, and set DO32BIT to 0 for 26bit builds
  * Fixed VLDM/VSTM style register lists not working correctly when using commas to list the registers
  * Improved handling of VFP/NEON 8 bit immediate constants:
    - No longer possible to use #I64.<n>, #F32.<n>, #F64.<n> notation to directly specify the 8-bit encoded value for I64/F32/F64 constants, nor to force one instruction to attempt to use a constant in a format that doesn't match the .<dt> instruction suffix
    - Instead, .I64 constants can either be specified as a number (which will be converted to an integer and then zero-extended to 64 bits) or a string (which will be parsed by the 64bit version of OS_ReadUnsigned)
    - .F32 and .F64 constants should now be specified as floating point numbers which will then be correctly converted to the 8 bit encoding
    - .F32 and .F64 constants which can't be converted will result in a error message indicating the closest possible floating point number that can be encoded (but not necessarily the closest number that can be encoded; e.g. when assembling NEON instructions the assembler can automatically make use of .I32 encoding formats for some numbers)
  * Fixed instructions that have an 'imn' field (e.g. VSHR immediate) being incorrectly assembled
  * VFPLib.GenData & VFPLib.VFPLib now stored as text instead of tokenised BASIC
  Files changed:
  * Makefile, VFPLib.GenData, VFPLib.VFPLib, hdr.VFPMacros, hdr.Workspace, s.Assembler, s.Basic, s.ErrorMsgs, s.Factor, s.ModHead, s.VFP
Admin:
  Tested as softloaded module & in Iyonix ROM softload
  Requires BASICTrans 2.13 for new error messages to work properly


Version 1.50. Tagged as 'BASIC-1_50'
@
text
@a51 5
 [ No26bitCode
DO32BIT                        *       1              ;1 for 32-bit (and hence not ARM 2/3) compatible
 |
DO32BIT                        *       0              ;26bit version
 ]
d82 1
d84 1
d123 1
d125 1
a125 5

 [ DO32BIT=1
        DCD     1
 |
        DCD     0
@


1.8
log
@Add TBA Software's VFP/NEON assembler
Detail:
  This is version 0.06 of TBA's VFP/NEON BASIC assembler, with the following modifications:
  * VFPASM makefile option can be used to toggle the assembler on/off. Currently only used by the Tungsten ROM, due to lack of ROM space.
  * EnableVFPDebug switch added to turn on/off debugging code
  * VFP_Error macro fixed (VFPError symbol wasn't defined in 0.06 sources; now it just calls MSGERR directly)
  * Debug messages tweaked to make them a bit more useful
  * Single-register LDM/STM swapped for LDR/STR to avoid objasm 4 performance warnings
  * Fixed a bug in VFPop_imm_bits that caused parsing of immediate constants to fail in ROM builds, and potentially fail or misbehave in RAM builds. A sequence of conditional instructions incorrectly had the 'S' flag set on each instruction, which could cause the execution to stop halfway through.
  * VFPLib BASIC file moved from Tests.VFP folder into all-new VFPLib folder
  * Makefile modified and VFPLib.GenData script added, in order to allow s.VFPData to be built automatically as part of the build process instead of relying on a prebuilt version in CVS
  File changes:
  - Doc/VFPdoc - VFP assembler implementation notes & usage notes
  - Tests/VFP/!Setup,feb, Tests/VFP/TestVFP,ffb, Tests/VFP/VFPLibAsm,ffb, Tests/VFP/VFPLibTest,ffb - VFP test programs
  - VFPLib/GenData,ffb, VFPLib/VFPLib,ffb - Common BASIC files used to generate the pattern tables used by the assembler, and used by the test programs
  - s/VFP, hdr/VFPMacros - Main VFP/NEON assembler source code
  - Makefile - Modified to allow automatic generation of s.VFPData file
  - s/Assembler - Modified to call VFP assembler for instructions starting with 'V'
  - s/ModHead - Replaced ADRL with a sequence of ADD instructions due to module now being over 64K in size
Admin:
  Tested on rev A2 BB-xM in ROM & softload forms


Version 1.49. Tagged as 'BASIC-1_49'
@
text
@d17 5
d44 5
a48 1
OWNERRORS                      *       0              ;1 for error messages in module
d52 1
d54 3
@


1.7
log
@  Speed improvements on ARMv6 or later
Detail:
  s.Assembler line 1861: incorrect LDR of 1-byte variable BYTESM. Only bit 2
    of value tested, so no ill effects other than inefficiency on ARMv6.
  s.Stmt2 and s.fp: optimised stores of 5-byte floating-point values to use
    unaligned STR on ARMv6 or later.
  Added ENTRY directive to permit building of GPA debug listing.
Admin:
  Builds but untested.

Version 1.44. Tagged as 'BASIC-1_44'
@
text
@d148 3
a150 1
        ADRHSL  R12,Basic_End
@


1.6
log
@Fix BASIC to handle ARMv6/ARMv7 unaligned loads
Detail:
  s/Command - LOADFILETOKENCOPY now uses compile-time architecture flags to decide how to handle the potential unaligned load while copying data
  s/ModHead - Include Hdr:CPU.Arch to get architecture flags
Admin:
  Tested on rev C2 beagleboard. Untested on Tungsten/IOMD, but should be fine.


Version 1.42. Tagged as 'BASIC-1_42'
@
text
@d53 1
@


1.5
log
@A few more bits of code tidy-up. Should still not have changed binary.

Version 1.41. Tagged as 'BASIC-1_41'
@
text
@d36 1
@


1.4
log
@Lots of code improvements but no changes to the built binary.

This update replaces lots of hard-wired definitions of things such as SWI
names with the ones from the main exports in the build environment. It
should build a binary-identical module to the previous revision.

Author: Rob Sprowson

Version 1.40. Tagged as 'BASIC-1_40'
@
text
@d78 2
d89 2
a90 1
        DCD     0
@


1.3
log
@  Added a new variant of COLOUR command
Detail:
  Check HELP text in BASICTrans
Admin:
  Updated from Kev's machine.

Version 1.36. Tagged as 'BASIC-1_36'
@
text
@d17 30
a46 19
RELEASEVER                      *       1                      ;1 for release version: no MANDEL or Roger
OWNERRORS                       *       0                      ;1 for error messages in module
CHECKCRUNCH                     *       1                      ;1 for BASIC$Crunch check on -quit and LIBRARY, INSTALL etc.
LOOKUPHELP                      *       1                      ;1 for lookup command help syntax in Global.Messages file.
DO32BIT                         *       1                      ;1 for 32-bit (and hence not ARM 2/3) compatible

                                GET     VersionASM
                                GBLS    CurrentDate
CurrentDate                     SETS    Module_Date
                                GBLS    ShortDate
ShortDate                       SETS    Module_Date
                                GBLS    Version
Version                         SETS    Module_FullVersion

VARS                            *       &8700                  ;allocation of the data pointer itself

                                GBLS    Name
 [ FP=0
Name                            SETS    "BASIC"
d48 1
a48 1
Name                            SETS    "BASIC64"
a49 301
;> &.Hdr.System

;***********************************
;*** C h a n g e L i s t ***
;***********************************

;Date Name Description
;---- ---- -----------
;28-Apr-87 APT Added ticker event SWIs

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;SWI names are exported in three forms:
;1) with OS_ 'OS_DoThingToOtherThing' as N
;2) with XOS_ 'XOS_DoThingToOtherThing' as N + Auto_Error_SWI_bit
;3) as is 'DoThingToOtherThing' as N ;But not for long !!

;***************************************************
;*** Generate SWI labels assuming ^ type defs ***
;*** Also assumes the global variable SWIClass ***
;***************************************************
        GBLS    SWIClass
        MACRO
        AddSWI  $SWIName,$value
 [ "$value" = ""
$SWIClass._$SWIName             #       1
 |
$SWIClass._$SWIName             *       $value
 ]
X$SWIClass._$SWIName            *       $SWIClass._$SWIName + Auto_Error_SWI_bit
        MEND

Auto_Error_SWI_bit              *       1:SHL: 17

SWIClass SETS    "OS"

        ^       0                      ;Base for Arthur SWIs
        AddSWI  WriteC                 ;&00
        AddSWI  WriteS                 ;&01
        AddSWI  Write0                 ;&02
        AddSWI  NewLine                ;&03
        AddSWI  ReadC                  ;&04
        AddSWI  CLI                    ;&05
        AddSWI  Byte                   ;&06
        AddSWI  Word                   ;&07
        AddSWI  File                   ;&08
        AddSWI  Args                   ;&09
        AddSWI  BGet                   ;&0A
        AddSWI  BPut                   ;&0B
        AddSWI  GBPB                   ;&0C
        AddSWI  Find                   ;&0D
        AddSWI  ReadLine               ;&0E
        AddSWI  Control                ;&0F
        AddSWI  GetEnv                 ;&10
        AddSWI  Exit                   ;&11
        AddSWI  SetEnv                 ;&12
        AddSWI  IntOn                  ;&13
        AddSWI  IntOff                 ;&14
        AddSWI  CallBack               ;&15
        AddSWI  EnterOS                ;&16
        AddSWI  BreakPt                ;&17
        AddSWI  BreakCtrl              ;&18
        AddSWI  UnusedSWI              ;&19
        AddSWI  UpdateMEMC             ;&1A
        AddSWI  SetCallBack            ;&1B
        AddSWI  Mouse                  ;&1C

        AddSWI  Heap                   ;&1D ;Our new ones start here
        AddSWI  Module                 ;&1E
        AddSWI  Claim                  ;&1F ;PMF's vector handling
        AddSWI  Release                ;&20 ;routines
        AddSWI  ReadUnsigned           ;&21 ;Read an unsigned number
        AddSWI  GenerateEvent          ;&22
        AddSWI  ReadVarVal             ;&23 ;read variable value & type
        AddSWI  SetVarVal              ;&24 ;set variable value & type
        AddSWI  GSInit                 ;&25
        AddSWI  GSRead                 ;&26
        AddSWI  GSTrans                ;&27
        AddSWI  BinaryToDecimal        ;&28
        AddSWI  FSControl              ;&29
        AddSWI  ChangeDynamicArea      ;&2A
        AddSWI  GenerateError          ;&2B
        AddSWI  ReadEscapeState        ;&2C
        AddSWI  EvaluateExpression     ;&2D
        AddSWI  SpriteOp               ;&2E
        AddSWI  ReadPalette            ;&2F ;(was FontManager)
        AddSWI  ServiceCall            ;&30 ;was Claim_Release_FIQ
        AddSWI  ReadVduVariables       ;&31
        AddSWI  ReadPoint              ;&32
        AddSWI  UpCall                 ;&33
        AddSWI  CallAVector            ;&34 ;was ReadCurrentError
        AddSWI  ReadModeVariable       ;&35
        AddSWI  RemoveCursors          ;&36
        AddSWI  RestoreCursors         ;&37
        AddSWI  SWINumberToString      ;&38
        AddSWI  SWINumberFromString    ;&39

        ^       &C0
        AddSWI  ConvertStandardDateAndTime ;&C0
        AddSWI  ConvertDateAndTime     ;&C1

        AddSWI  WriteI,&100

        AddSWI  UserSWI,&200

;Allocation of Operating System SWI Chunks
                                ^       3
StringConvSWI                   #       1

                                ^       8                      ;OS chunk allocation starts at &200
FileSwitchSWI                   #       1


;Allocation of System extension SWI Chunks

                                ^       0
EconetSWI                       #       1
NetFSSWI                        #       1
FontSWI                         #       1
WimpSWI                         #       1
TubeSWI                         #       1
Sound0SWI                       #       1
Sound1SWI                       #       1
Sound2SWI                       #       1
NetPrintSWI                     #       1
ADFSSWI                         #       1
ROMPoduleSWI                    #       1

;Allocation of Application SWI Chunks

                                ^       0
MailSWI                         #       1
NetMonitorSWI                   #       1
ConmputerConcepts               #       1
MinervaSystemD                  #       1
ResourceNH01                    #       1

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;CMOS RAM allocation

ReadCMOS                        *       &A1                    ;The OS_Byte call to read CMOS
WriteCMOS                       *       &A2                    ;The OS_Byte call to write CMOS

NetStnCMOS                      *       &00                    ;One byte
NetFSIDCMOS                     *       &01                    ;Two bytes
NetPSIDCMOS                     *       &03                    ;Two bytes
FileLangCMOS                    *       &05                    ;One byte
FrugalCMOS                      *       &06                    ;Two bytes
EDITCMOS                        *       &08                    ;One byte
TelcomCMOS                      *       &09                    ;One byte
MODETVCMOS                      *       &0A                    ;One byte
StartCMOS                       *       &0B                    ;One byte
KeyDelCMOS                      *       &0C                    ;One byte
KeyRepCMOS                      *       &0D                    ;One byte
PigCMOS                         *       &0E                    ;One byte
PSITCMOS                        *       &0F                    ;One byte
DBTBCMOS                        *       &10                    ;One byte
ANFSCMOS                        *       &11                    ;One byte

UserCMOS                        *       &1E                    ;Sixteen bytes
FreeCMOS                        *       &2E

MOSCMOS                         *       &80                    ;&80-&EF now being allocated ... sign here!
YearCMOS                        *       &80                    ;Two Bytes of year info (HEX)
MonthCMOS                       *       &82                    ;The last month we were in (HEX)
LeapCMOS                        *       &83                    ;The we've-had-the-29th-of-feb-this-year-already flag
TutuCMOS                        *       &84                    ;For nefarious porpoises
VduCMOS                         *       &85
SyncBit                         *       1                      ;Composite sync or not
ModeExtraBit                    *       2
FontCMOS                        *       &86
NewADFSCMOS                     *       &87                    ;Three bytes (consult Nick)
;* &88
;* &89
CatalogCMOS                     *       &8A                    ;Two bytes
ExamineCMOS                     *       &8C                    ;Two bytes
TwinCMOS                        *       &8E
ScreenSizeCMOS                  *       &8F
RAMDiscCMOS                     *       &90
SysHeapCMOS                     *       &91
RMASizeCMOS                     *       &92
SpriteSizeCMOS                  *       &93
SoundCMOS                       *       &94
ABE0                            *       &95                    ;4 Bytes for the BASIC Editor.
ABE1                            *       &96                    ;
ABE2                            *       &97                    ;
ABE3                            *       &98                    ;

PSNameCMOS                      *       &DB                    ;5 bytes for 6 char name,one byte in NetPSId + 1
FSNameCMOS                      *       &E0                    ;15 bytes for 16 char name,one byte in NetFSId + 1
CheckSumCMOS                    *       &EF                    ;One byte for CMOS RAM checksum

;Note that CMOS RAM ends at F0 where the clock starts

;> &.Hdr.ModHand

;***********************************
;*** C h a n g e L i s t ***
;***********************************

;Date Name Description
;---- ---- -----------
;23-Apr-87 APT Help-is-code flag moved into high byte

ModHandReason_Run               *       0
ModHandReason_Load              *       1
ModHandReason_Enter             *       2
ModHandReason_ReInit            *       3
ModHandReason_Delete            *       4
ModHandReason_RMADesc           *       5
ModHandReason_Claim             *       6
ModHandReason_Free              *       7
ModHandReason_Tidy              *       8
ModHandReason_Clear             *       9
ModHandReason_AddArea           *       10
ModHandReason_CopyArea          *       11
ModHandReason_GetNames          *       12
ModHandReason_ExtendBlock       *       13

;Real module offsets

                                ^       0
Module_Start                    #       4
Module_Init                     #       4
Module_Die                      #       4
Module_Service                  #       4
Module_Title                    #       4
Module_HelpStr                  #       4
Module_HC_Table                 #       4                      ;help and command table.

;optional SWI handler offsets
Module_SWIChunk                 #       4
Module_SWIEntry                 #       4
Module_NameTable                #       4
Module_NameCode                 #       4

;Magic number for RM load addr

Module_LoadAddr                 *       &FFFFFA00              ;magic number from Stu/Bruce standard the two zeroes are ignored.

Module_SWIChunkSize             *       2_1000000

Module_SWISystemBase            *       1:SHL: 18
Module_SWIApplicationBase       *       2:SHL: 18
Module_SWIUserBase              *       3:SHL: 18


;flags for the information word:

FS_Command_Flag                 *       1:SHL: 31
Status_Keyword_Flag             *       1:SHL: 30
Help_Is_Code_Flag               *       1:SHL: 29

R0      RN      0
R1      RN      1
R2      RN      2
R3      RN      3
R4      RN      4
R5      RN      5
R6      RN      6
R7      RN      7
R8      RN      8
R9      RN      9
R10     RN      10
R11     RN      11
R12     RN      12
R13     RN      13
R14     RN      14
R15     RN      15
PC      RN      R15

;> &.Hdr.Services

;28-Apr-87  TMD   Added a few more service codes

;All the service call reason codes

Service_Serviced                *       &00
Service_UKCommand               *       &04
Service_Error                   *       &06                    ;not quite the same: only for workspace tidying.
        ;If     you want to claim the error, sit on ErrorV
Service_UKByte                  *       &07                    ;Unknown OSBYTEs go thru here
Service_UKWord                  *       &08                    ;Unknown OSWORDs go thru here
Service_Help                    *       &09                    ;Issued at the start of the *Help command:
        ;claim  if replacing the MOS *Help
Service_ReleaseFIQ              *       &0B
Service_ClaimFIQ                *       &0C
Service_Memory                  *       &11
Service_StartUpFS               *       &12
Service_Tube                    *       &FE                    ;Means "Tube changing state"
        ;R2     = 0 for Tube not there
        ;       <> 0 means Tube alive: may contain more info.

;Master OS ones:

Service_Post_Help               *       &18                    ;Passed round at the end of the *Help code
Service_Reset                   *       &27
Service_UKConfig                *       &28
Service_UKStatus                *       &29

PaletteV                        *       &23
paletteV_Set                    *       2
d53 1
a53 1
Module_BaseAddr                 *       .
d68 1
a68 1
        DCD     message_filename-Module_BaseAddr
a73 13
        MACRO
        Command $cmd
        DCB     "$Name",0
        ALIGN
        DCD     $cmd._Code -Module_BaseAddr
 [ LOOKUPHELP=1
        DCD     &10FF0000
 |
        DCD     &FF0000
 ]
        DCD     $cmd._Syntax-Module_BaseAddr
        DCD     $cmd._Help -Module_BaseAddr
        MEND
d76 2
a77 3
        Command Basic
        DCB     0
        ALIGN
d79 1
a79 2
 [ LOOKUPHELP=1
message_filename
d86 3
a89 1

a92 1

d95 1
d97 1
a98 1
        DCB     "$Name.",0
d101 1
a101 1
 [ FP=0
a116 1

d134 1
a135 1

d139 1
a140 1

@


1.2
log
@  Fix to *BASIC command.
Detail:
  *BASIC will now return an error if it fails for any reason. This is
  slightly more polite than the SVC mode infinate loop it used to go
  into.
Admin:
  Tested on RiscPC with Ursula0020 softload.

Version 1.29. Tagged as 'BASIC-1_29'
@
text
@d338 3
@


1.1
log
@  Updated build structure to use the shared AAsmModule makefile.
  Updated to build using objasm instead of aasm.
  Sources changed to be objasm-compatible.
Admin:
  Requires Library 0.72 or later.
  Requires BuildSys 3.09 or later.
  Requires Env 0.65 or later.

Version 1.27. Tagged as 'BASIC-1_27'
@
text
@d427 1
d432 1
@

