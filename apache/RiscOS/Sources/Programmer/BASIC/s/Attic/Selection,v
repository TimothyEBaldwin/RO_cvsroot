head	1.3;
access;
symbols
	BASIC-1_39:1.2
	BASIC-1_37:1.2
	RO_5_07:1.2
	BASIC-1_36:1.2
	BASIC-1_35:1.2
	BASIC-1_34:1.2
	BASIC-1_33:1.2
	BASIC-1_32:1.2
	BASIC-1_31:1.2
	BASIC-1_30:1.2
	BASIC-1_29:1.1
	BASIC-1_28:1.1
	BASIC-1_27:1.1
	BASIC-1_26:1.1
	BASIC-1_25:1.1
	BASIC-1_24:1.1
	BASIC-1_23:1.1;
locks; strict;
comment	@# @;


1.3
date	2009.04.24.00.27.16;	author srevill;	state dead;
branches;
next	1.2;

1.2
date	2002.04.23.15.48.33;	author srevill;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.14.20.00.32;	author srevill;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Lots of code improvements but no changes to the built binary.

This update replaces lots of hard-wired definitions of things such as SWI
names with the ones from the main exports in the build environment. It
should build a binary-identical module to the previous revision.

Author: Rob Sprowson

Version 1.40. Tagged as 'BASIC-1_40'
@
text
@; Copyright 2001 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        ADD     R0,ARGP,#STRACC
        BL      OSCLIREGS
        SWI     CLI
        B       NXT
SYSNAME ADD     R1,ARGP,#STRACC
        MOV     R0,#0
        STRB    R0,[CLEN]
        SWI     SWINUMBERFROMSTRING
        B       SYSGOTSWINUMB
SYS0STRING
        MOV     R0,#0
        STRB    R0,[CLEN],#1
        LDR     R7,[ARGP,#FSA]
        LDMFD   SP!,{R0,R4,R5,R6}
        STMIA   R7!,{R0,R4,R5,R6}
        LDMFD   SP!,{R0,R4,R5,R6}
        STMIA   R7!,{R0,R4,R5,R6}
        LDMFD   SP!,{R0,R4,R5,R6}
        STMIA   R7!,{R0,R4,R5,R6}      ;move 12 words from stack to free memory
        BL      SPUSH
        LDMDB   R7!,{R0,R4,R5,R6}      ;move 12 words back from free memory
        STMFD   SP!,{R0,R4,R5,R6}
        LDMDB   R7!,{R0,R4,R5,R6}
        STMFD   SP!,{R0,R4,R5,R6}
        LDMDB   R7!,{R0,R4,R5,R6}
        STMFD   SP!,{R0,R4,R5,R6}
        ADD     IACC,SP,#11*4+4+4      ;11 words on stack plus string length plus R4
        B       SYS0PUSH
SYS     BL      AEEXPR
        TEQ     TYPE,#0
        BEQ     SYSNAME
        BLMI    SFIX
SYSGOTSWINUMB
        MOV     TYPE,SP                ;initial SP in R9/TYPE
        STR     IACC,[SP,#-4]!             ;save action
        MOV     R4,#0
        MOV     R5,#0
        MOV     R6,#0
        MOV     R7,#0
        STMFD   SP!,{R4-R7,R9}         ;R9=TYPE
        STMFD   SP!,{R4-R7}
        STMFD   SP!,{R4,R5}            ;save 10 register holes and old sp
        CMP     R10,#","
        BNE     SYSCALL
;note R4 (SYS register index) already 0
SYS0    CMP     R4,#10
        BCS     ERSYSINPUTS
SYS0SPACES
        LDRB    R10,[AELINE],#1
        CMP     R10,#" "
        BEQ     SYS0SPACES
        CMP     R10,#","
        BEQ     SYS0END
        STR     R4,[SP,#-4]!
        SUB     AELINE,AELINE,#1
        BL      EXPR
        TEQ     TYPE,#0
        BEQ     SYS0STRING
        BLMI    SFIX
SYS0PUSH
        LDR     R4,[SP],#4
        STR     IACC,[SP,R4,LSL #2]
SYS0END ADD     R4,R4,#1
        CMP     R10,#","
        BEQ     SYS0
SYSCALL MOV     LINE,AELINE
        ADD     AELINE,ARGP,#STRACC
        LDR     R4,[SP,#10*4]          ;old sp
        LDR     R5,[R4,#-4]            ;SWI call value
        BIC     R5,R5,#&FF000000
        LDR     R6,SYSDATA
        ORR     R6,R6,R5
        STR     R6,[AELINE]
        LDR     R6,SYSDATA+4
        STR     R6,[AELINE,#4]
        CMP     R10,#TTO
;Do IMB here to make SYS StrongARM compatible
        MOV     R0,#0
        SWI     XOSSYNCHRONISECODEAREAS
;----
        BEQ     SYSCALLTO
        BL      DONE
        LDMFD   SP!,{R0-R9}            ;get parameters from stack
        MOV     R14,PC
        MOV     PC,AELINE
        MOV     ARGP,#VARS
        LDR     SP,[SP]                ;pop stack and continue
        B       NXT
SYSCALLTO
        LDMFD   SP!,{R0-R9}            ;get parameters from stack
        MOV     R14,PC
        MOV     PC,AELINE
        STMFD   SP!,{R0-R9,PC}         ;write parameters back to stack
        MOV     ARGP,#VARS
        MOV     R7,#0
SYS1    CMP     R7,#10
        BCS     ERSYSOUTPUTS
        STR     R7,[SP,#-4]!
        BL      CRAELV
        LDR     R7,[SP],#4
        BEQ     SYS1COMMA
        MOV     R4,IACC
        MOV     R5,TYPE
        LDR     IACC,[SP,R7,LSL #2]
        MOV     TYPE,#TINTEGER
        CMP     R5,#128
        BCC     SYS1END
        MOV     TYPE,#0
        ADD     CLEN,ARGP,#STRACC
        ADD     R3,CLEN,#256
SYS1STRING
        LDRB    R1,[IACC],#1
        STRB    R1,[CLEN],#1
        TEQ     CLEN,R3
        TEQNE   R1,#13
        TEQNE   R1,#0
        TEQNE   R1,#10
        BNE     SYS1STRING
        TEQ     CLEN,R3
        SUBEQ   CLEN,CLEN,#255
        SUB     CLEN,CLEN,#1
SYS1END STR     R7,[SP,#-4]!
        BL      STOREA
        LDR     R7,[SP],#4
SYS1ENDA
        ADD     R7,R7,#1
        MOV     LINE,AELINE
SYS1SPACES
        LDRB    R10,[LINE],#1
        CMP     R10,#" "
        BEQ     SYS1SPACES
        CMP     R10,#","
        BEQ     SYS1
        CMP     R10,#";"
        BNE     SYSEXIT
        BL      CRAELV
        BEQ     ERSYNT
        MOV     R4,IACC
        MOV     R5,TYPE
        LDR     IACC,[SP,#10*4]
        MOV     IACC,IACC,LSR #28
        MOV     TYPE,#TINTEGER
        BL      STOREA
        MOV     LINE,AELINE
        BL      SPACES
SYSEXIT LDR     SP,[SP,#11*4]          ;recover old SP
        B       DONEXT
SYS1COMMA
        BL      SPACES
        CMP     R10,#","
        CMPNE   R10,#";"
        SUBEQ   AELINE,LINE,#1
        BEQ     SYS1ENDA
        B       ERSYNT
SYSDATA SWI     0
        MOV     PC,R14
CALL    BL      AEEXPR
        BL      INTEGY
        CMP     R10,#","
        BEQ     CALLARM
        BL      AEDONE
        MOV     TYPE,IACC
 [ FP=0
        BL      EMUMOS
        BNE     NXT
 ]
        MOV     R4,TYPE
        MOV     R5,#0
        B       CALLARMGO
CALLARM MOV     R4,IACC
        MOV     R5,#0
CALLARMP

@


1.2
log
@  * Performance tweaks.
  * Comments added.
  * Added DIM LOCAL.
Detail:
  * All of the 408 instances of pushes and pops of a single register
    (i.e. "LDMIA SP!,{PC}") have been replaced with an LDR/STR equivalent,
    which provides a small performance boost on StrongARM-like processors.
  * Some obscure bits of the source have had comments added.
  * The new DIM LOCAL statement has been added:

    Syntax: DIM <numeric variable> LOCAL <numeric expression>

    DIM LOCAL allocates space from the BASIC stack rather than from the
    heap. This means that the space allocated is automatically freed on
    exit from the PROC or FN in which it was claimed.

    As with all LOCAL statements, it must appear in a PROC or FN definition
    and cannot appear inside a structure which uses the stack (i.e. NEXT)
    or after a LOCAL ERROR.

    Much like the manner in which "DIM foo% -1" returns the value of FSA
    without allocating space, "DIM foo% LOCAL -1" returns the value of SP
    at the time of the request, without allocating any space from the stack.
    This can be useful in computing the free space between the top of the
    BASIC heap and the bottom of the stack. Of course, the stack is used by
    BASIC while interpreting the program, so the contents of memory below
    foo% should always be treated as undefined.

    One caveat of using DIM LOCAL is that the stack cannot be moved while
    there are DIM LOCALs defined. END= will return an error and any
    Service_Memory calls will be claimed for the duration of the DIM LOCAL.
Admin:
  Builds and tested on RiscPC.
  Requires BASICTrans-2_06.

Version 1.30. Tagged as 'BASIC-1_30'
@
text
@@


1.1
log
@  Improved BASIC build structure. No code change.
Detail:
  Makefile strips dependencies during the clean phase.

  Sources moved into an 's' directory.

  All sources reformatted into a more readable layout.
Admin:
  Builds binary-identical versions of BASIC and BASIC64 modules to
  version 1.22

Version 1.23. Tagged as 'BASIC-1_23'
@
text
@d49 1
a49 1
        STMFD   SP!,{IACC}             ;save action
d68 1
a68 1
        STMFD   SP!,{R4}
d75 1
a75 1
        LDMFD   SP!,{R4}
d112 1
a112 1
        STMFD   SP!,{R7}
d114 1
a114 1
        LDMFD   SP!,{R7}
d136 1
a136 1
SYS1END STMFD   SP!,{R7}
d138 1
a138 1
        LDMFD   SP!,{R7}
d187 1
a187 1
                
@

