head	1.11;
access;
symbols
	BASIC-1_75:1.11
	BASIC-1_74:1.11
	BASIC-1_73:1.11
	BASIC-1_72:1.11
	BASIC-1_71:1.11
	BASIC-1_70:1.11
	BASIC-1_69:1.11
	BASIC-1_68:1.11
	BASIC-1_67:1.10
	BASIC-1_66:1.10
	BASIC-1_65:1.10
	BASIC-1_64:1.10
	BASIC-1_63:1.10
	BASIC-1_62:1.10
	BASIC-1_61:1.10
	BASIC-1_60:1.10
	BASIC-1_59:1.9
	BASIC-1_58:1.7
	BASIC-1_57-pre4:1.7
	BASIC-1_57:1.7
	BASIC-1_57-pre3:1.7
	BASIC-1_57-pre2:1.7
	BASIC-1_57-pre1:1.7
	BASIC-1_56:1.6
	BASIC-1_55:1.6
	BASIC-1_54:1.6
	BASIC-1_53:1.6
	BASIC-1_52:1.6
	BASIC-1_51:1.6
	BASIC-1_50:1.6
	BASIC-1_49:1.6
	BASIC-1_48:1.6
	BASIC-1_47:1.6
	BASIC-1_46:1.6
	BASIC-1_45:1.6
	BASIC-1_44:1.6
	BASIC-1_43:1.6
	BASIC-1_42:1.6
	BASIC-1_41:1.6
	BASIC-1_40:1.6
	BASIC-1_39:1.5
	BASIC-1_37:1.5
	RO_5_07:1.4
	BASIC-1_36:1.4
	BASIC-1_35:1.4
	BASIC-1_34:1.3
	BASIC-1_33:1.3
	BASIC-1_32:1.3
	BASIC-1_31:1.3
	BASIC-1_30:1.3
	BASIC-1_29:1.2
	BASIC-1_28:1.2
	BASIC-1_27:1.2
	BASIC-1_26:1.2
	BASIC-1_25:1.2
	BASIC-1_24:1.2
	BASIC-1_23:1.1;
locks; strict;
comment	@# @;


1.11
date	2017.06.13.21.00.11;	author rsprowson;	state Exp;
branches;
next	1.10;
commitid	D0NJjCSdAYCeVfVz;

1.10
date	2015.04.14.06.56.13;	author alees;	state Exp;
branches;
next	1.9;
commitid	HlqkBsA4wuh7Gwhy;

1.9
date	2014.06.01.13.43.01;	author rsprowson;	state Exp;
branches;
next	1.8;
commitid	0vJpjRB0NH5v7PCx;

1.8
date	2014.06.01.12.02.49;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	LxRq5p5HctI1zOCx;

1.7
date	2013.12.01.17.23.40;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	iG291GP27DoPasfx;

1.6
date	2009.04.24.00.27.16;	author srevill;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.27.08.41.29;	author kbracey;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.03.18.27.21;	author kbracey;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.23.15.48.33;	author srevill;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.16.19.11.51;	author srevill;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.14.20.00.31;	author srevill;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Follow the ARM ARM for VFP opcode VDUP despite a tokens clash
Earlier versions of the VFP assembler extensions cooked up VDPL as a way to dodge the problem of opcode VDUP being tokenised as VDUPRINT when used in its scalar or unconditional form (ie. VDUP.<size> <regs>).
This can be handled with an exception in the tokeniser in a similar manner to MOVEQ and ORR in the conventional ARM instruction set.
VFPLib: change the tables to use VDUP rather than VDPL.
Lexical.s: watch out for specifically VDUP. and tokenise it as VDU followed by a P in memory.
Assembler.s: watch out for token VDU followed by a P and take it to be VDUP.
VFP.s: when matching, allow the token for VDU to expand as though VDU was seen, also, add support for backslash and REM comments (previously only semicolon was allowed).
Tests/VFP/TestVFP: update the test case and 3 other failing tests from earlier fixes.
Tests/Match/TokVDUP: brute force trial of all combinations of VDU and PRINT, to check only VDUP. is caught.

Version 1.68. Tagged as 'BASIC-1_68'
@
text
@; Copyright 2001 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;> Lexical

;get line number to r0. EQ if succeed, NE otherwise
;uses r0,r1,r10
SPTSTN  LDRB    R10,[LINE],#1
        CMP     R10,#" "
        BEQ     SPTSTN
        CMP     R10,#TCONST
        MOVNE   PC,R14
SPGETN  LDRB    R10,[LINE],#1
        MOV     R0,R10,LSL #2
        AND     R1,R0,#&C0
        LDRB    R10,[LINE],#1
        EOR     R1,R1,R10
        LDRB    R10,[LINE],#1
        EOR     R0,R10,R0,LSL #2
        AND     R0,R0,#255
        ORR     R0,R1,R0,LSL #8
        MOV     PC,R14
SPACES  LDRB    R10,[LINE],#1
SPACLP  CMP     R10,#" "
	LDREQB	R10,[LINE],#1
        BEQ     SPACLP
        MOV     PC,R14
AESPAC  LDRB    R10,[AELINE],#1
AESPLP  CMP     R10,#" "
	LDREQB	R10,[AELINE],#1
        BEQ     AESPLP
        MOV     PC,R14
INTEXA  MOV     AELINE,LINE
INTEXC  STR     R14,[SP,#-4]!
        BL      EXPR
        TEQ     TYPE,#0
        BEQ     ERTYPEINT
        BLMI    INTEGB
        CMP     R10,#","
        LDREQ   PC,[SP],#4
        B       ERCOMM
EQAEEX  LDRB    R10,[LINE],#1
        CMP     R10,#" "
        BEQ     EQAEEX
        CMP     R10,#"="
        BNE     MISSEQ
AEEXDN  MOV     AELINE,LINE
EXPRDN  STR     R14,[SP,#-4]!
        BL      EXPR
        TEQ     TYPE,#0
        BEQ     ERTYPEINT
        BLMI    INTEGB
        LDR     R14,[SP],#4
AEDONE  MOV     LINE,AELINE
        B       DONE
AEDONES MOV     LINE,AELINE
DONES   LDRB    R10,[LINE],#1
DONE    CMP     R10,#" "
        BEQ     DONES
        CMP     R10,#":"
        CMPNE   R10,#13
        MOVEQ   PC,R14
        CMP     R10,#TELSE
        MOVEQ   PC,R14
        B       ERSYNT
;make string into os string (cr on end)
OSSTRI  TEQ     TYPE,#0
        BNE     ERTYPESTR              ;fail if not a string type
        MOV     R0,#13
        STRB    R0,[CLEN],#1
        ADD     R1,ARGP,#STRACC
        MOV     PC,R14
;check if character in a word, carry set if so
;features involved conditional returns!
WORDCQ  CMP     R0,#"z"
        BHI     CQCCLEAR
        CMP     R0,#"_"
        MOVCS   PC,R14
        CMP     R0,#"Z"
        BHI     CQCCLEAR
        CMP     R0,#"A"
        MOVCS   PC,R14
NUMBCP  CMP     R0,#"9"
        BHI     CQCCLEAR
        CMP     R0,#"0"
        MOV     PC,R14
NUMBCQ  CMP     R0,#"."
        BNE     NUMBCP
        MOV     PC,R14
CQCCLEAR
        CLC                            ; clear C
        MOV     PC,R14
;insert constant into dest
CONSTI  MOV     CONSTA,SMODE,LSR #8
        AND     CONSTA,CONSTA,#&3F
        ORR     CONSTA,CONSTA,#&40
        STRB    CONSTA,[DEST,#2]       ;write msb and &3f or &40
        AND     CONSTA,SMODE,#&3F
        ORR     CONSTA,CONSTA,#&40
        STRB    CONSTA,[DEST,#1]       ;write lsb and &3f or &40
        MOV     CONSTA,SMODE,LSR #4+8
        AND     CONSTA,CONSTA,#&C      ;top two bits of msb
        AND     SMODE,SMODE,#&C0
        ORR     CONSTA,CONSTA,SMODE,LSR #2 ;or in top two bits of lsb
        EOR     CONSTA,CONSTA,#&54
        STRB    CONSTA,[DEST],#3       ;write and index past other bytes
        MOV     PC,R14
;match from source (r1) to destination OUTPUT (in r2)
EVMATCH MOV     DEST,SP                ;on stack
        STR     R14,[SP,#-4]!              ;match for EVAL
        MOV     SMODE,#0
        B       YMATCH                 ;eval is right mode, no constants

;match a text string to a token
;=> R1= points to source string, 10/13 terminated
;   R2= points to destination string buffer
;   R3= MODE
;       0 left, before '=', at start of a statement or line
;       1 right, in an expression
;   R4= CONSTA
;       0 do not convert integers in line number range
;       1 convert such integers to internal format
;<= R1= points to character after terminator
;   R2= points to character after terminator
;   R5= SMODE (string mode)
;              1 = within double quotes "
;              4 = impossible string mode
;            100 = constant too large?
;       xxxx0000 = level of bracket
;       Also used for other purposes while getting constant
;       and getting token, then restored afterwards.
MATCH   ROUT
        STR     R14,[SP,#-4]!          ;match for main command line. Uses r0-r5.
                                       ; input is r1. r2-r5 initialised.
        MOV     SMODE,#0
        ADD     DEST,ARGP,#OUTPUT
        MOV     CONSTA,#TCONST         ;command is left mode, constants
        B       %97
CLIENTMATCH                            ;external entry via Environment Ptr only
                                       ; input is r1-r4. r5 initialised.
        STR     R14,[SP,#-4]!
        MOV     SMODE,#0               ;not in a string to start with
        B       %99
AUMATCH STR     R14,[SP,#-4]!          ;match for AUTO
                                       ; input is r1, r2-r5 initialised.
        ADD     DEST,ARGP,#OUTPUT      ;output string
        MOV     SMODE,#0               ;not in a string to start with
95      MOV     CONSTA,#0              ;not in constant
97      MOV     MODE,#0                ;left mode
99      LDRB    R0,[SOURCE],#1
        STRB    R0,[DEST],#1           ;copy byte assuming not a token
00      CMP     R0,#" "
        BEQ     %99                    ;repeat if " "
        TEQ     R0,#10
        MOVEQ   R0,#13
        STREQB  R0,[DEST,#-1]
        CMP     R0,#13
        LDREQ   PC,[SP],#4               ;return if carriage return copied
        CMP     R0,#""""
        EOREQ   SMODE,SMODE,#1         ;if a " flip smode
        TST     SMODE,#255
        BNE     %99                    ;if lsb smode<>0 then continue copying chars (deals with REM also)
        TEQ     SMODE,#0
        BMI     %05                    ;permanent error in bracket level
        CMP     R0,#"("
        ADDEQ   SMODE,SMODE,#&1000
        CMP     R0,#")"
        SUBEQ   SMODE,SMODE,#&1000
05      CMP     R0,#"&"
        BNE     %10                    ;if ch="&" then
15      LDRB    R0,[SOURCE],#1         ;repeat copy ch
        STRB    R0,[DEST],#1
        BL      NUMBCP
        BCS     %15                    ;while 0-9
        CMP     R0,#"A"
        BCC     %00
        CMP     R0,#"G"
        BCC     %15                    ;or while A-F. O.K. to fall through since >="G"
        CMP     R0,#"a"
        BCC     %10
        CMP     R0,#"g"
        BCC     %15
10      CMP     R0,#":"
        BEQ     %95                    ;If : then beginning of statement
        CMP     R0,#","
        BEQ     %99                    ;If , ignore (no state change)
        CMP     R0,#"*"                ;If *
        BNE     %20
        TEQ     MODE,#0                ;If in left mode
        ORREQ   SMODE,SMODE,#4         ;set impossible string mode
        BEQ     %99                    ;and continue processing. Else :
YMATCH  MOV     CONSTA,#0              ;no constants
        MOV     MODE,#1                ;mode = right
        B       %99
20      CMP     R0,#"."
        BEQ     MATCHZ
        BL      NUMBCP
        BCC     %30                    ;If ch 0-9
        TEQ     CONSTA,#0
        BEQ     MATCHZ                 ;not allowed to be a constant
; check for and encode a constant line number
        STMFD   SP!,{SOURCE,SMODE,CONSTA,MODE} ;in case of failure
        AND     SMODE,R0,#15           ;initial value for constant
24      LDRB    R0,[SOURCE],#1
        BL      NUMBCP
        BCC     %26
        AND     R0,R0,#15
        ADD     SMODE,SMODE,SMODE,LSL #2;smode *5
        ADD     SMODE,R0,SMODE,LSL #1  ;smode*2+r0
        CMP     SMODE,#65280           ;maximum constant plus 1
        BCC     %24
;not a constant since it is too large
        LDMFD   SP!,{SOURCE,SMODE,CONSTA,MODE}
        ORR     SMODE,SMODE,#256
;enter matchz with numbcq true
MATCHZ  LDRB    R0,[SOURCE],#1         ;not constant number : repeat copy ch
        STRB    R0,[DEST],#1
        BL      NUMBCQ
        BCS     MATCHZ                 ;until numbcq false
MATCHY  MOV     CONSTA,#0
        MOV     MODE,#1
        B       %00
;more of the constant encoder
26      STRB    CONSTA,[DEST,#-1]      ;overwrite number with token value
        BL      CONSTI
        STRB    R0,[DEST],#1           ;byte as yet uncopied
        PULLJ   1                      ;throw away source from stack (lowest register, hence first)
        LDMFD   SP!,{SMODE,CONSTA,MODE}
        B       %00                    ;examine current character
MATCHW  BL      WORDCQ
        BCC     YMATCH
        B       MATCHH
MATCHG  LDMFD   SP!,{SMODE,R6,R7,R8}   ;not found
MATCHH  LDRB    R0,[SOURCE],#1
        STRB    R0,[DEST],#1
        BL      WORDCQ
        BCS     MATCHH
        B       MATCHY
30      CMP     R0,#"A"
        BCC     YMATCH
        CMP     R0,#"W"
        BHI     MATCHW                 ;not worth bothering
        STMFD   SP!,{SMODE,R6,R7,R8}
;get table start
        ADR     R6,(INDEXTAB-("A"*4))
        LDR     R6,[R6,R0,LSL #2]
        ADD     SMODE,PC,R6
50      LDRB    R6,[SMODE],#1          ;get first char from table and move on
LEXICALADR
        CMP     R0,R6                  ;first character to check against
        BNE     MATCHG                 ;not found
        MOV     R8,SOURCE              ;save position j.i.c.
54      LDRB    R6,[SMODE],#1
        CMP     R6,#&7F
        BCS     %56                    ;successful match!
        LDRB    R7,[SOURCE],#1
        CMP     R6,R7
        BEQ     %54                    ;keep trying
        CMP     R7,#"."
        BEQ     %58                    ;abbreviated
        MOV     SOURCE,R8              ;failed :reset pointer
52      LDRB    R6,[SMODE],#1          ;and find next token value
        CMP     R6,#&7F
        BCC     %52
        CMP     R6,#TWIDTH             ;last token in list
        BEQ     MATCHG                 ;so give up
        ADD     SMODE,SMODE,#1         ;step past job parameter
        B       %50
58      LDRB    R6,[SMODE],#1          ;if abbreviated find token value
        CMP     R6,#&7F
        BCC     %58
56      LDRB    SMODE,[SMODE]          ;get job

        TEQ     MODE,#1                ;if introducing keyword on right
        TEQEQ   R6,#TTRACE             ; and following a TRACE keyword
        BICEQ   SMODE,SMODE,#16        ; then no constants

        TEQ     MODE,#1                ;if introducing keyword on right
        TEQEQ   R6,#TPRINT             ; and following a PRINT keyword
        TEQEQ   R7,#"."                ; and PRINT was abbreviated
        LDREQB  R14,[SOURCE,#-2]
        TEQEQ   R14,#"P"               ; and only abbreviation P.
        LDREQB  R7,[DEST,#-2]          ; (array in bounds because MODE=1)
        TEQEQ   R7,#TVDU               ; and was preceded by VDU
        LDREQB  R7,[SOURCE,#-3]
        TEQEQ   R7,#"U"                ; and VDU was *not* abbreviated
        STREQB  R14,[DEST],#1          ;then it's clashing VFP opcode VDUP
        MOVEQ   R6,#"."                ; implant [TVDU][P][.]
        MOVEQ   SMODE,#1:SHL:2         ; switch back to l mode
        BEQ     %FT62

        TST     SMODE,SMODE,LSR #1     ;if bit 0 of job (ignore if next char is wordc)
        BCC     %60
        STR     R0,[SP,#-4]!
        LDRB    R0,[SOURCE]
        BL      WORDCQ
        LDR     R0,[SP],#4
        MOVCS   SOURCE,R8
        BCS     MATCHG                 ;fail if next ch is wordc
60      TST     SMODE,SMODE,LSR #4     ;if bit 3 of job (two byte token)
        BCC     %61
        MOV     R7,#TESCCOM
        TST     SMODE,SMODE,LSR #7     ;if bit 6 of job (polymorphic/two byte token is statement)
        MOVCS   R7,#TESCSTMT
        TST     SMODE,SMODE,LSR #3     ;if bit 2 of job (transfer to l mode/two byte token is fn)
        MOVCS   R7,#TESCFN
        BICCS   SMODE,SMODE,#4         ;set OFF constant/list of constants may follow
        STRB    R7,[DEST,#-1]
        ADD     DEST,DEST,#1           ;plant twobyte token
        B       %62
61      TST     SMODE,SMODE,LSR #7     ;if bit 6 of job (polymorphic/two byte token is statement)
        BCC     %62
        TEQ     MODE,#0
        ADDEQ   R6,R6,#TPTR2-&8F       ;and mode=left increase token
62      STRB    R6,[DEST,#-1]          ;implant token
        TST     SMODE,SMODE,LSR #2     ;if bit 1 of job (transfer to r mode)
        MOVCS   MODE,#1                ;then mode=right
        MOVCS   CONSTA,#0              ; and constant=false
        TST     SMODE,SMODE,LSR #3     ;if bit 2 of job (transfer to l mode/two byte token is fn)
        MOVCS   MODE,#0                ;then mode=left
        MOVCS   CONSTA,#0              ; and constant=false
        TEQ     R6,#TFN
        TEQNE   R6,#TPROC              ;if PROC or FN
        BNE     %66
64      LDRB    R0,[SOURCE],#1         ;skip while ch=wordc (over PROC/FN name)
        STRB    R0,[DEST],#1
        BL      WORDCQ
        BCS     %64
        SUB     SOURCE,SOURCE,#1
        SUB     DEST,DEST,#1
66      TST     SMODE,SMODE,LSR #5     ;if bit 4 of job (constant/list of constants may follow)
        MOVCS   CONSTA,#TCONST         ;constant=TRUE
        TST     SMODE,SMODE,LSR #6     ;bit 5 of job to C (give up completely)
        TST     SMODE,#128             ;bit 7 of job to N (contains own bracket)
        LDMFD   SP!,{SMODE,R6,R7,R8}
        ORRCS   SMODE,SMODE,#4         ;give up
        ADDNE   SMODE,SMODE,#&1000     ;has bracket
        B       %99
INDEXTAB
        &       PLEXA-LEXICALADR
        &       PLEXB-LEXICALADR
        &       PLEXC-LEXICALADR
        &       PLEXD-LEXICALADR
        &       PLEXE-LEXICALADR
        &       PLEXF-LEXICALADR
        &       PLEXG-LEXICALADR
        &       PLEXH-LEXICALADR
        &       PLEXI-LEXICALADR
        &       PLEXJ-LEXICALADR
        &       PLEXK-LEXICALADR
        &       PLEXL-LEXICALADR
        &       PLEXM-LEXICALADR
        &       PLEXN-LEXICALADR
        &       PLEXO-LEXICALADR
        &       PLEXP-LEXICALADR
        &       PLEXQ-LEXICALADR
        &       PLEXR-LEXICALADR
        &       PLEXS-LEXICALADR
        &       PLEXT-LEXICALADR
        &       PLEXU-LEXICALADR
        &       PLEXV-LEXICALADR
        &       PLEXW-LEXICALADR
LEXTABADR
        ADR     R2,PLEXA
        MOV     PC,R14
;output character or token
;if token, then R7 contains LISTO
TOKOUT  CMP     R0,#&7F
        BCC     CHOUT
        STR     R14,[SP,#-4]!
        BL      TOKENADDR
TOKPRT  LDRB    R0,[R1],#1
        CMP     R0,#&7F
        LDRCS   PC,[SP],#4
        TST     R7,#16
        BEQ     TOKPRT1
        CMP     R0,#"A"
        BCC     TOKPRT1
        CMP     R0,#"Z"
        ORRLS   R0,R0,#" "
TOKPRT1 BL      CHOUT
        B       TOKPRT
TOKENADDR
        ADR     R1,RTABLE
        TEQ     R0,#TESCFN
        ADDEQ   R1,R1,#RTABLETF-RTABLETC
        TEQNE   R0,#TESCCOM
        ADDEQ   R1,R1,#RTABLETC-RTABLETS
        TEQNE   R0,#TESCSTMT
        LDREQB  R0,[LINE],#1
        ADDEQ   R1,R1,#RTABLETS-RTABLE
        SUBEQ   R0,R0,#&8E
        SUBNE   R0,R0,#&7F             ;otherwise subtract base
        TST     R0,#1                  ;bottom bit to status
        BIC     R0,R0,#1               ;clear bottom bit
        LDR     R1,[R1,R0,LSL #1]
        MOVEQ   R1,R1,LSL #16
        MOV     R1,R1,LSR #16
        ADR     R0,PLEXA
        ADD     R1,R1,R0
        MOV     PC,R14
RTABLE  DCW     POTHER-PLEXA
        DCW     PAND-PLEXA
        DCW     PDIV-PLEXA
        DCW     PEOR-PLEXA
        DCW     PMOD-PLEXA
        DCW     POR-PLEXA
        DCW     PERROR-PLEXA
        DCW     PLINE-PLEXA
        DCW     POFF-PLEXA
        DCW     PSTEP-PLEXA
        DCW     PSPC-PLEXA
        DCW     PTAB-PLEXA
        DCW     PELSE-PLEXA
        DCW     PTHEN-PLEXA
        DCW     PUNLIST-PLEXA
        DCW     POPENU-PLEXA
        DCW     PPTR-PLEXA
        DCW     PPAGE-PLEXA
        DCW     PTIME-PLEXA
        DCW     PLOMEM-PLEXA
        DCW     PHIMEM-PLEXA
        DCW     PABS-PLEXA
        DCW     PACS-PLEXA
        DCW     PADC-PLEXA
        DCW     PASC-PLEXA
        DCW     PASN-PLEXA
        DCW     PATN-PLEXA
        DCW     PBGET-PLEXA
        DCW     PCOS-PLEXA
        DCW     PCOUNT-PLEXA
        DCW     PDEG-PLEXA
        DCW     PERL-PLEXA
        DCW     PERR-PLEXA
        DCW     PEVAL-PLEXA
        DCW     PEXP-PLEXA
        DCW     PEXT-PLEXA
        DCW     PFALSE-PLEXA
        DCW     PFN-PLEXA
        DCW     PGET-PLEXA
        DCW     PINKEY-PLEXA
        DCW     PINSTR-PLEXA
        DCW     PINT-PLEXA
        DCW     PLEN-PLEXA
        DCW     PLN-PLEXA
        DCW     PLOG-PLEXA
        DCW     PNOT-PLEXA
        DCW     POPENI-PLEXA
        DCW     POPENO-PLEXA
        DCW     PPI-PLEXA
        DCW     PPOINT-PLEXA
        DCW     PPOS-PLEXA
        DCW     PRAD-PLEXA
        DCW     PRND-PLEXA
        DCW     PSGN-PLEXA
        DCW     PSIN-PLEXA
        DCW     PSQR-PLEXA
        DCW     PTAN-PLEXA
        DCW     PTO-PLEXA
        DCW     PTRUE-PLEXA
        DCW     PUSR-PLEXA
        DCW     PVAL-PLEXA
        DCW     PVPOS-PLEXA
        DCW     PCHRD-PLEXA
        DCW     PGETD-PLEXA
        DCW     PINKED-PLEXA
        DCW     PLEFTD-PLEXA
        DCW     PMIDD-PLEXA
        DCW     PRIGHTD-PLEXA
        DCW     PSTRD-PLEXA
        DCW     PSTRND-PLEXA
        DCW     PEOF-PLEXA
        DCW     PUNLIST-PLEXA
        DCW     PUNLIST-PLEXA
        DCW     PUNLIST-PLEXA
        DCW     PWHEN-PLEXA
        DCW     POF-PLEXA
        DCW     PENDCA-PLEXA
        DCW     PELSE-PLEXA
        DCW     PENDIF-PLEXA
        DCW     PENDWH-PLEXA
        DCW     PPTR-PLEXA
        DCW     PPAGE-PLEXA
        DCW     PTIME-PLEXA
        DCW     PLOMEM-PLEXA
        DCW     PHIMEM-PLEXA
        DCW     PBEEP-PLEXA
        DCW     PBPUT-PLEXA
        DCW     PCALL-PLEXA
        DCW     PCHAIN-PLEXA
        DCW     PCLEAR-PLEXA
        DCW     PCLOSE-PLEXA
        DCW     PCLG-PLEXA
        DCW     PCLS-PLEXA
        DCW     PDATA-PLEXA
        DCW     PDEF-PLEXA
        DCW     PDIM-PLEXA
        DCW     PDRAW-PLEXA
        DCW     PEND-PLEXA
        DCW     PENDPR-PLEXA
        DCW     PENVEL-PLEXA
        DCW     PFOR-PLEXA
        DCW     PGOSUB-PLEXA
        DCW     PGOTO-PLEXA
        DCW     PGRAPH-PLEXA
        DCW     PIF-PLEXA
        DCW     PINPUT-PLEXA
        DCW     PLET-PLEXA
        DCW     PLOCAL-PLEXA
        DCW     PMODE-PLEXA
        DCW     PMOVE-PLEXA
        DCW     PNEXT-PLEXA
        DCW     PON-PLEXA
        DCW     PVDU-PLEXA
        DCW     PPLOT-PLEXA
        DCW     PPRINT-PLEXA
        DCW     PPROC-PLEXA
        DCW     PREAD-PLEXA
        DCW     PREM-PLEXA
        DCW     PREPEAT-PLEXA
        DCW     PREPORT-PLEXA
        DCW     PRESTORE-PLEXA
        DCW     PRETURN-PLEXA
        DCW     PRUN-PLEXA
        DCW     PSTOP-PLEXA
        DCW     PTEXT-PLEXA
        DCW     PTRACE-PLEXA
        DCW     PUNTIL-PLEXA
        DCW     PWIDTH-PLEXA
        DCW     POSCL-PLEXA
        ALIGN
RTABLETS

        DCW     PCASE-PLEXA
        DCW     PCIRCLE-PLEXA
        DCW     PFILL-PLEXA
        DCW     PORGIN-PLEXA
        DCW     PPSET-PLEXA
        DCW     PRECT-PLEXA
        DCW     PSWAP-PLEXA
        DCW     PWHILE-PLEXA
        DCW     PWAIT-PLEXA
        DCW     PMOUSE-PLEXA
        DCW     PQUIT-PLEXA
        DCW     PSYS-PLEXA
        DCW     PINSTALL-PLEXA         ;list the old install
        DCW     PLIBRARY-PLEXA
        DCW     PTINT-PLEXA
        DCW     PELLIPSE-PLEXA
        DCW     PBEATS-PLEXA
        DCW     PTEMPO-PLEXA
        DCW     PVOICES-PLEXA
        DCW     PVOICE-PLEXA
        DCW     PSTEREO-PLEXA
        DCW     POVERLAY-PLEXA
        ALIGN
RTABLETC

        DCW     PAPPEND-PLEXA
        DCW     PAUTO-PLEXA
        DCW     PCRUNCH-PLEXA
        DCW     PDELET-PLEXA
        DCW     PEDIT-PLEXA
        DCW     PHELP-PLEXA
        DCW     PLIST-PLEXA
        DCW     PLOAD-PLEXA
        DCW     PLVAR-PLEXA
        DCW     PNEW-PLEXA
        DCW     POLD-PLEXA
        DCW     PRENUM-PLEXA
        DCW     PSAVE-PLEXA
        DCW     PTEXTLOAD-PLEXA
        DCW     PTEXTSAVE-PLEXA
        DCW     PTWIN-PLEXA
        DCW     PTWINO-PLEXA
        DCW     PINSTALL-PLEXA
        ALIGN
RTABLETF

        DCW     PSUM-PLEXA
        DCW     PBEAT-PLEXA
        ALIGN

;  lexical tokens and name table

;  The table contains lexical tokens and an action byte
;    7 - contains own bracket
;    6 - polymorphic/two byte token is statement
;    5 - give up completely
;    4 - constant/list of constants may follow
;    3 - two byte token
;    2 - transfer to l mode/two byte token is function
;    1 - transfer to r mode
;    0 - ignore if next character is wordc
PLEXA
PAND    =       "AND",TAND,2           ;this table MUST be alphabetic in first char
PABS    =       "ABS",TABS,0
PACS    =       "ACS",TACS,0
PADC    =       "ADVAL",TADC,0
PASC    =       "ASC",TASC,0
PASN    =       "ASN",TASN,0
PATN    =       "ATN",TATN,0
PAUTO   =       "AUTO",TAUTO,16+8
PAPPEND =       "APPEND",TAPPEND,8+2
PLEXB
PBGET   =       "BGET",TBGET,1
PBPUT   =       "BPUT",TBPUT,2+1
PBEATS  =       "BEATS",TBEATS,64+8+2
PBEAT   =       "BEAT",TBEAT,8+4+2
PLEXC
PTEXT   =       "COLOUR",TTEXT,2
PCALL   =       "CALL",TCALL,2
PCASE   =       "CASE",TCASE,64+8+2
PCHAIN  =       "CHAIN",TCHAIN,2
PCHRD   =       "CHR$",TCHRD,0
PCLEAR  =       "CLEAR",TCLEAR,1
PCLOSE  =       "CLOSE",TCLOSE,2+1
PCLG    =       "CLG",TCLG,1
PCLS    =       "CLS",TCLS,1
PCOS    =       "COS",TCOS,0
PCOUNT  =       "COUNT",TCOUNT,1
PCIRCLE =       "CIRCLE",TCIRCLE,64+8+2
PCRUNCH =       "CRUNCH",TCRUNCH,8+2
        =       "COLOR",TTEXT,2        ;for the Yanks
PLEXD
PDATA   =       "DATA",TDATA,32
PDEG    =       "DEG",TDEG,0
PDEF    =       "DEF",TDEF,0
PDELET  =       "DELETE",TDELET,16+8
PDIV    =       "DIV",TDIV,0
PDIM    =       "DIM",TDIM,2
PDRAW   =       "DRAW",TDRAW,2
PLEXE
PENDPR  =       "ENDPROC",TENDPR,1
PEDIT   =       "EDIT",TEDIT,32+8
PENDWH  =       "ENDWHILE",TENDWH,1
PENDCA  =       "ENDCASE",TENDCA,1
PENDIF  =       "ENDIF",TENDIF,1
PEND    =       "END",TEND,1
PENVEL  =       "ENVELOPE",TENVEL,2
PELSE   =       "ELSE",TELSE,16+4
PEVAL   =       "EVAL",TEVAL,0
PERL    =       "ERL",TERL,1
PERROR  =       "ERROR",TERROR,4
PEOF    =       "EOF",TEOF,1
PEOR    =       "EOR",TEOR,2
PERR    =       "ERR",TERR,1
PEXP    =       "EXP",TEXP,0
PEXT    =       "EXT",TEXT,1
PELLIPSE
        =       "ELLIPSE",TELLIPSE,64+8+2
PLEXF
PFOR    =       "FOR",TFOR,2
PFALSE  =       "FALSE",TFALSE,1
PFILL   =       "FILL",TFILL,64+8+2
PFN     =       "FN",TFN,2
PLEXG
PGOTO   =       "GOTO",TGOTO,16+2
PGETD   =       "GET$",TGETD,0
PGET    =       "GET",TGET,0
PGOSUB  =       "GOSUB",TGOSUB,16+2
PGRAPH  =       "GCOL",TGRAPH,2
PLEXH
PHIMEM  =       "HIMEM",THIMEM,64+2+1
PHELP   =       "HELP",THELP,8+1
PLEXI
PINPUT  =       "INPUT",TINPUT,2
PIF     =       "IF",TIF,2
PINKED  =       "INKEY$",TINKED,0
PINKEY  =       "INKEY",TINKEY,0
PINT    =       "INT",TINT,0
PINSTR  =       "INSTR(",TINSTR,128
PINSTALL
        =       "INSTALL",TINSTALL,8+2
PLEXJ
PLEXK
PLEXL
PLIST   =       "LIST",TLIST,16+8      ;speed up address
PLINE   =       "LINE",TLINE,2
PLOAD   =       "LOAD",TLOAD,2+8
PLOMEM  =       "LOMEM",TLOMEM,64+2+1
PLOCAL  =       "LOCAL",TLOCAL,2
PLEFTD  =       "LEFT$(",TLEFTD,128
PLEN    =       "LEN",TLEN,0
PLET    =       "LET",TLET,4
PLOG    =       "LOG",TLOG,0
PLN     =       "LN",TLN,0
PLIBRARY
        =       "LIBRARY",TLIBRARY,64+8+2
PLVAR   =       "LVAR",TLVAR,8+1
PLEXM
PMIDD   =       "MID$(",TMIDD,128
PMODE   =       "MODE",TMODE,2
PMOD    =       "MOD",TMOD,0
PMOVE   =       "MOVE",TMOVE,2
PMOUSE  =       "MOUSE",TMOUSE,64+8+2
PLEXN
PNEXT   =       "NEXT",TNEXT,2
PNEW    =       "NEW",TNEW,8+1
PNOT    =       "NOT",TNOT,0
PLEXO
POLD    =       "OLD",TOLD,8+1
PON     =       "ON",TON,2
POFF    =       "OFF",TOFF,0
POF     =       "OF",TOF,0
PORGIN  =       "ORIGIN",TORGIN,64+8+2
POR     =       "OR",TOR,2
POPENU  =       "OPENIN",TOPENU,0
POPENO  =       "OPENOUT",TOPENO,0
POPENI  =       "OPENUP",TOPENI,0
POSCL   =       "OSCLI",TOSCL,2
POTHER  =       "OTHERWISE",TOTHER,4
POVERLAY
        =       "OVERLAY",TOVERLAY,64+8+2
PLEXP
PPRINT  =       "PRINT",TPRINT,2
PPAGE   =       "PAGE",TPAGE,64+2+1
PPTR    =       "PTR",TPTR,64+2+1
PPI     =       "PI",TPI,1
PPLOT   =       "PLOT",TPLOT,2
PPOINT  =       "POINT(",TPOINT,128
PPSET   =       "POINT",TPSET,64+8+2
PPROC   =       "PROC",TPROC,2
PPOS    =       "POS",TPOS,1
PLEXQ
PQUIT   =       "QUIT",TQUIT,64+8+2
PLEXR
PRETURN =       "RETURN",TRETURN,1     ;speed up address
PREPEAT =       "REPEAT",TREPEAT,0
PREPORT =       "REPORT",TREPORT,1
PREAD   =       "READ",TREAD,2
PREM    =       "REM",TREM,32
PRUN    =       "RUN",TRUN,1
PRAD    =       "RAD",TRAD,0
PRESTORE
        =       "RESTORE",TRESTORE,16+2
PRIGHTD =       "RIGHT$(",TRIGHTD,128
PRND    =       "RND",TRND,1
PRECT   =       "RECTANGLE",TRECT,64+8+2
PRENUM  =       "RENUMBER",TRENUM,16+8
PLEXS
PSTEP   =       "STEP",TSTEP,0
PSAVE   =       "SAVE",TSAVE,8+2
PSGN    =       "SGN",TSGN,0
PSIN    =       "SIN",TSIN,0
PSQR    =       "SQR",TSQR,0
PBEEP   =       "SOUND",TBEEP,2
PSPC    =       "SPC",TSPC,0
PSTRD   =       "STR$",TSTRD,0
PSTRND  =       "STRING$(",TSTRND,128
PSTOP   =       "STOP",TSTOP,1
PSTEREO =       "STEREO",TSTEREO,64+8+2
PSUM    =       "SUM",TSUM,8+4+2
PSWAP   =       "SWAP",TSWAP,64+8+2
PSYS    =       "SYS",TSYS,64+8+2
PLEXT
PTAN    =       "TAN",TTAN,0
PTAB    =       "TAB(",TTAB,128
PTEMPO  =       "TEMPO",TTEMPO,64+8+2
PTEXTLOAD
        =       "TEXTLOAD",TTEXTLOAD,8+2
PTEXTSAVE
        =       "TEXTSAVE",TTEXTSAVE,8+2
PTHEN   =       "THEN",TTHEN,16+4
PTIME   =       "TIME",TTIME,64+2+1
PTINT   =       "TINT",TTINT,64+8+2
PTO     =       "TO",TTO,0
PTRACE  =       "TRACE",TTRACE,16+2
PTRUE   =       "TRUE",TTRUE,1
PTWINO  =       "TWINO",TTWINO,8+2
PTWIN   =       "TWIN",TTWIN,8+1
PLEXU
PUNTIL  =       "UNTIL",TUNTIL,2
PUSR    =       "USR",TUSR,0
PLEXV
PVDU    =       "VDU",TVDU,2
PVAL    =       "VAL",TVAL,0
PVPOS   =       "VPOS",TVPOS,1
PVOICES =       "VOICES",TVOICES,64+8+2
PVOICE  =       "VOICE",TVOICE,64+8+2
PLEXW
PWHILE  =       "WHILE",TWHILE,64+8+2
PWHEN   =       "WHEN",TWHEN,2
PWAIT   =       "WAIT",TWAIT,64+8+1
PWIDTH  =       "WIDTH",TWIDTH,2
PUNLIST =       " unlistable token ",&FF

        LNK     Command.s
@


1.10
log
@Extended assembler for ARMv6/v7 instructions
Implemented scalar (non-VFP/NEON) instructions for ARMv6/v7 and a couple of omitted ARMv5 instructions in UAL syntax.
Added documentary comments and minor performance tweaks to some existing code.
Corrected stack imbalance in handling of memory moving when local DIMs in use.
Preliminary test code for assembler instructions.

Version 1.60. Tagged as 'BASIC-1_60'
@
text
@d289 14
@


1.9
log
@Two parsing bug fixes
Lexical.s:
Rework previous fixes (revision 1.5 and revision 1.4) for BPUT#TRACE,<number> confusing the MATCH routine.
While revision 1.5 was better it failed to tokenise IF <expr> GOTO 1234 when the THEN is omitted.
A review of all the keywords shows the only ones that take tokenisable line numbers are TRACE, RESTORE, ON, GOTO, GOSUB and of these only TRACE can be used in a function like manner.
So, only apply the fix from revision 1.5 if it's a TRACE token.
Fix from Martin Avison, fixes ticket #387.
Added a test case in Tests/Match/TokTrace to assist.

Assembler.s:
Only consider SP or LR or PC to be referring to a register name if used in isolation (not as a substring of another word).
While LR and PC aren't particularly common start of words in english, SP is, causing source code with such names to give a "Missing ," error.
We adopt the same logic as for invalid 'R' named variables (eg. r17foo, r9bar) and attempt to find a variable with that name instead.
Fixes ticket #386.

Version 1.59. Tagged as 'BASIC-1_59'
@
text
@d35 3
a37 2
        CMP     R10,#" "
        BEQ     SPACES
d40 3
a42 2
        CMP     R10,#" "
        BEQ     AESPAC
@


1.8
log
@Beef up the comments in MATCH routine
Submission from Martin Avison. Not tagged.
@
text
@d282 1
a282 2
;;; KJB fix for PRINT TRACE,2 or BPUT#TRACE,32
;;; plus later fix for IF F% THEN 30
d284 3
a286 3
        TSTEQ   SMODE,#4               ;and not shifting to left mode
        BICEQ   SMODE,SMODE,#16        ;then no constants
;;; end KJB fix
@


1.7
log
@Redo DO32BIT portions using central macros
When 32 bitted there weren't 26/32 neutral macros around, but can use them now there are allowing one common output binary for disc based BASIC.
Some of the sneaky 26 bit code (eg. relying on address space wrapping at 64MB rather than explicitly clearing bits when computing a jump) adopt the safer 32 bit form even if that does cost 1 extra instruction.
Tagged as BASIC-1_57-pre1
@
text
@d122 19
d142 2
a143 1
        STR     R14,[SP,#-4]!              ;match for main command line. Uses r0-r5.
d148 2
a149 1
CLIENTMATCH
d151 1
a151 1
        MOV     SMODE,#0
d153 2
a154 1
AUMATCH STR     R14,[SP,#-4]!              ;match for AUTO
d210 1
d271 1
a271 1
52      LDRB    R6,[SMODE],#1
d288 1
a288 1
        TST     SMODE,SMODE,LSR #1     ;if bit 0 of job
d296 1
a296 1
60      TST     SMODE,SMODE,LSR #4     ;if bit 3 of job
d299 1
a299 1
        TST     SMODE,SMODE,LSR #7
d301 1
a301 1
        TST     SMODE,SMODE,LSR #3
d303 1
a303 1
        BICCS   SMODE,SMODE,#4
d307 1
a307 1
61      TST     SMODE,SMODE,LSR #7     ;if bit 6 of job
d312 1
a312 1
        TST     SMODE,SMODE,LSR #2     ;if bit 1 of job
d314 2
a315 2
        MOVCS   CONSTA,#0              ;constant=false
        TST     SMODE,SMODE,LSR #3     ;if bit 2 of job
d317 1
a317 1
        MOVCS   CONSTA,#0              ;constant=false
d321 1
a321 1
64      LDRB    R0,[SOURCE],#1         ;skip while ch=wordc
d327 1
a327 1
66      TST     SMODE,SMODE,LSR #5     ;if bit 4 of job
d329 2
a330 2
        TST     SMODE,SMODE,LSR #6     ;bit 5 of job to C
        TST     SMODE,#128             ;bit 7 of job to N
@


1.6
log
@Lots of code improvements but no changes to the built binary.

This update replaces lots of hard-wired definitions of things such as SWI
names with the ones from the main exports in the build environment. It
should build a binary-identical module to the previous revision.

Author: Rob Sprowson

Version 1.40. Tagged as 'BASIC-1_40'
@
text
@a83 1
 [ DO32BIT = 1
d100 1
a100 18

        CMN     PC,#0                  ; clear C
        MOV     PC,R14
 |
WORDCQ  CMP     R0,#"z"
        BICHIS  PC,R14,#C_Flag
        CMP     R0,#"_"
        MOVCS   PC,R14
        CMP     R0,#"Z"
        BICHIS  PC,R14,#C_Flag
        CMP     R0,#"A"
        MOVCS   PC,R14
NUMBCP  CMP     R0,#"9"
        BICHIS  PC,R14,#C_Flag
        CMP     R0,#"0"
        MOV     PC,R14
NUMBCQ  CMP     R0,#"."
        BNE     NUMBCP
a101 1
 ]
@


1.5
log
@Previous fix for BPUT#TRACE,32 broke tokenisation of IF F% THEN 30. Both now
handled correctly.

Version 1.37. Tagged as 'BASIC-1_37'
@
text
@d15 2
a16 1
; > Lexical
d106 1
a106 1
        BICHIS  PC,R14,#CFLAG
d110 1
a110 1
        BICHIS  PC,R14,#CFLAG
d114 1
a114 1
        BICHIS  PC,R14,#CFLAG
d779 2
a780 1
        LNK     s.Command
@


1.4
log
@* In BASIC64, A() = B() / C now works - this specific case failed due to
  a stack imbalance.
* Keywords that take tokenised line numbers no longer cause number
  tokenisation if they appear on the right. This fixes BPUT#TRACE,32
* STRT/LDRT now enforce post-indexing. LDRT R0,[R1] generates correct code,
  and LDRT R0,[R1,#0] will be faulted.

Version 1.35. Tagged as 'BASIC-1_35'
@
text
@d278 4
a281 2
        TEQ     MODE,#0                ;if introducing keyword on right
        BICNE   SMODE,SMODE,#1:SHL:4   ;then no constants
@


1.3
log
@  * Performance tweaks.
  * Comments added.
  * Added DIM LOCAL.
Detail:
  * All of the 408 instances of pushes and pops of a single register
    (i.e. "LDMIA SP!,{PC}") have been replaced with an LDR/STR equivalent,
    which provides a small performance boost on StrongARM-like processors.
  * Some obscure bits of the source have had comments added.
  * The new DIM LOCAL statement has been added:

    Syntax: DIM <numeric variable> LOCAL <numeric expression>

    DIM LOCAL allocates space from the BASIC stack rather than from the
    heap. This means that the space allocated is automatically freed on
    exit from the PROC or FN in which it was claimed.

    As with all LOCAL statements, it must appear in a PROC or FN definition
    and cannot appear inside a structure which uses the stack (i.e. NEXT)
    or after a LOCAL ERROR.

    Much like the manner in which "DIM foo% -1" returns the value of FSA
    without allocating space, "DIM foo% LOCAL -1" returns the value of SP
    at the time of the request, without allocating any space from the stack.
    This can be useful in computing the free space between the top of the
    BASIC heap and the bottom of the stack. Of course, the stack is used by
    BASIC while interpreting the program, so the contents of memory below
    foo% should always be treated as undefined.

    One caveat of using DIM LOCAL is that the stack cannot be moved while
    there are DIM LOCALs defined. END= will return an error and any
    Service_Memory calls will be claimed for the duration of the DIM LOCAL.
Admin:
  Builds and tested on RiscPC.
  Requires BASICTrans-2_06.

Version 1.30. Tagged as 'BASIC-1_30'
@
text
@d277 4
@


1.2
log
@  Some bug fixes and a few new features.
Detail:
  * ALIGN will now force any unused bytes to zero when assembling at
    both P% and O%. This is better than leaving possibly uninitialised
    memory behind (makes diffs very difficult).

  * The assembler now correctly recognises the new 'LR' special variable
    when the L is lower-case.

  * The assembler also has the 'SP' (13) special variable defined.

  * TRACE PROC (and the identical TRACE FN) now flushes the VCACHE when
    it is encountered.

  * TRACE ENDPROC has been implemented to allow the output of 'ENDPROC'
    and 'ENDFN' in the trace output whenever a procedure or function is
    exited. This complements the TRACE PROC/FN functionality.

  * QUIT <expression> has been added to allow a return code to be passed
    back to the called when BASIC exits. This is the /only/ sensible way
    for a BASIC program to set Sys$ReturnCode on exit (others get trashed
    when BASIC removes it's environment handlers).
Admin:
  Tested on a StrongARM RiscPC.

  Some of the reformatting from the last checkin has been improved.

  s.ModuleAB and s.ModuleAB64 have been renamed to s.BASIC105 and
  s.BASIC64 respectively. This will help with the new Brodie Make-o-
  Matik(tm) Makefiles.

Version 1.24. Tagged as 'BASIC-1_24'
@
text
@d42 1
a42 1
INTEXC  STMFD   SP!,{R14}
d48 1
a48 1
        LDMEQFD SP!,{PC}
d56 1
a56 1
EXPRDN  STMFD   SP!,{R14}
d61 1
a61 1
        LDMFD   SP!,{R14}
d137 1
a137 1
        STMFD   SP!,{R14}              ;match for EVAL
d141 1
a141 1
        STMFD   SP!,{R14}              ;match for main command line. Uses r0-r5.
d147 1
a147 1
        STMFD   SP!,{R14}
d150 1
a150 1
AUMATCH STMFD   SP!,{R14}              ;match for AUTO
d163 1
a163 1
        LDMEQFD SP!,{PC}               ;return if carriage return copied
d279 1
a279 1
        STMFD   SP!,{R0}
d282 1
a282 1
        LDMFD   SP!,{R0}
d355 1
a355 1
        STMFD   SP!,{R14}
d359 1
a359 1
        LDMCSFD SP!,{PC}
@


1.1
log
@  Improved BASIC build structure. No code change.
Detail:
  Makefile strips dependencies during the clean phase.

  Sources moved into an 's' directory.

  All sources reformatted into a more readable layout.
Admin:
  Builds binary-identical versions of BASIC and BASIC64 modules to
  version 1.22

Version 1.23. Tagged as 'BASIC-1_23'
@
text
@d711 1
a711 1
PQUIT   =       "QUIT",TQUIT,64+8+1
@

