head	1.8;
access;
symbols
	BASIC-1_75:1.8
	BASIC-1_74:1.8
	BASIC-1_73:1.8
	BASIC-1_72:1.8
	BASIC-1_71:1.7
	BASIC-1_70:1.6
	BASIC-1_69:1.6
	BASIC-1_68:1.5
	BASIC-1_67:1.5
	BASIC-1_66:1.5
	BASIC-1_65:1.5
	BASIC-1_64:1.5
	BASIC-1_63:1.5
	BASIC-1_62:1.4
	BASIC-1_61:1.4
	BASIC-1_60:1.4
	BASIC-1_59:1.3
	BASIC-1_58:1.3
	BASIC-1_57:1.3
	RO_5_07:1.2
	Ursula_merge:1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	Ursula_RiscPC:1.1.0.6
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	rthornb_UrsulaBuild_01May1998:1.1
	Daytona:1.1.0.4
	Daytona_bp:1.1
	Ursula:1.1.0.2
	Ursula_bp:1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.8
date	2017.09.07.19.34.35;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	ulAIao6m9bYzGi6A;

1.7
date	2017.07.27.19.58.50;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	zr7FfPImnoVAaU0A;

1.6
date	2017.07.21.20.20.29;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	M1DaUmTbhIPZt80A;

1.5
date	2017.01.24.21.57.06;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	y7O4YdywpmiTJgDz;

1.4
date	2015.04.14.06.56.05;	author alees;	state Exp;
branches;
next	1.3;
commitid	HlqkBsA4wuh7Gwhy;

1.3
date	2013.12.01.18.09.28;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	g83hl4RCFV1Crsfx;

1.2
date	98.09.22.10.43.37;	author nturton;	state dead;
branches;
next	1.1;

1.1
date	97.05.09.05.33.21;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Automatically pick the best FP model for the hosting CPU
Have BASIC V pick either BASICVFP or BASIC VI as appropriate for the current CPU, so if there's VFP hardware don't emulate everything as FPA opcodes.
The BASIC64 command (moved to BASIC V) will now automatically RMEnsure then enter the respective module. If there's something depending on the internal workings of BASIC VI and wishes to explicitly select that even when VFP is present a new command, *BASICFPA, forces BASIC VI to start.
By having BASIC V manage this selection we in effect remove the requirement to remember to RMEnsure the floating point version, which is usually either forgotten about or wrong anyway.
Compatibility wise
  RISC OS 5 includes all 3 variants (2 if no VFP) and will adopt the new logic.
  Existing RISC OS 5 stable releases have always included BASIC V and VI, so will work as before (through emulating FPA).
  Soft loaded modules inside !System will be handled by a disc based update.
Changed files
  CmdHelp: adds the new BASIC64 help/syntax message
  Basic.s: qualify the FPA version in it's startup banner
  ModHead.s: add the new selection logic, and move the 'VFP' help to be a suffix so the module names line up nicely in *Modules again
Tested in both ROM and disc based guises on ARMs with and without VFP hardware.

Version 1.72. Tagged as 'BASIC-1_72'
@
text
@#Untranslated: HASM

HAND:Diese Funktion führt das bitweise logische UND zwischen zwei Zahlen aus. Priorität 6.
HABS:Diese Funktion gibt den absoluten Wert einer Zahl zurück (<Faktor>).
HACS:Diese Funktion gibt den Arcuscosinus einer Zahl zurück (<Faktor>).
HADVAL:Diese Funktion gibt den Wert der angegebenen analogen Schnittstelle oder des angegebenen Puffers zurück.
HASC:Diese Funktion gibt den ASCII- bzw. ISO-Code des ersten Zeichens einer Zeichenkette zurück.
HASN:Diese Funktion gibt den Arcussinus einer Zahl zurück (<Faktor>).
HATN:Diese Funktion gibt den Arcustangens einer Zahl zurück (<Faktor>).
HAUTO:AUTO [<Erste Zeile>[,<Schrittweite>]] generiert Zeilennummern zum Eingeben eines Programms.
HAPPEND:Dieses Kommando fügt eine Datei an das Programm an und numeriert die angefügten Zeilen neu.
HBGET:BGET#<Dateireferenz> gibt das nächste Byte aus der angegebenen Datei zurück.
HBPUT:BPUT#<Dateireferenz>,<Wert> schreibt das Byte in die geöffnete Datei.BPUT#<Dateireferenz>,<Zeichenkette>[;] schreibt die Zeichenkette in die geöffnete Datei, mit [ohne] Zeilenvorschub.
HBEATS:BEATS <Ausdruck> setzt die Anzahl der Schläge pro Takt. Als Funktion gibt BEATS die aktuelle Anzahl der Schläge pro Takt zurück.
HBEAT:Diese Funktion liefert die aktuelle Zahl von Schlägen pro Takt.
HCOLOUR:COLOUR a [TINT t] setzt Vordergrundfarbe [und Helligkeit] (Hintergrund 128+a).COLOUR a,p setzt den Paletteneintrag der logischen Farbe a auf die physikalische Farbe p.COLOUR a,r,g,b setzt den Paletteneintrag für a auf die physikalische Farbe r, g, b.
HCONST:Diese Anweisung leitet eine Zeilenummerreferenz in internen Format ein.
HCALL:CALL<Ausdruck>[,<Variable>]^: Ruft Maschinencode auf.
HCASE:CASE <Ausdruck> OF ist der Beginn eines CASE..WHEN..OTHERWISE..ENDCASE-Konstrukts.
HCHAIN:Dieser Befehl lädt und startet ein neues BASIC-Programm.
HCHR$:Diese Funktion liefert eine Zeichenkette, die das Zeichen mit dem angegebenen ASCII-Code enthält.
HCLEAR:Dieser Befehl löscht alle Variablen.
HCLOSE:CLOSE#<Dateireferenz> schließt die angegebene Datei.
HCLG:Löscht den Grafikbildschirm.
HCLS:Löscht den Textbildschirm.
HCOS:Diese Funktion liefert den Cosinus einer Zahl (<Faktor>).
HCOUNT:Diese Funktion liefert die Anzahl der Zeichen, die seit dem letzten Zeilenvorschub mit PRINT ausgegeben wurden.
HCIRCLE:CIRCLE [FILL] x,y,r: Zeichnet einen [ausgefüllten] Kreis.
HCRUNCH:CRUNCH <Ausdruck> entfernt bestimmte Leerzeichen aus dem aktuellen Programm.Die Bits der Zahl haben folgende Bedeutung:0: Entfernt Leerzeichen vor Anweisungen1: Entfernt Leerzeichen in Anweisungen2: Entfernt REM-Anweisungen (bis auf die erste)3: Entfernt Leeranweisungen4: Entfernt Leerzeilen
HDATA:Leitet eine Zeile mit von READ zu lesenden Daten ein. Die Daten werden durch Komma voneinander getrennt.LOCAL DATA, RESTORE DATA: Sichert und lädt den Datenzeiger.
HDEG:Diese Funktion wandelt Werte im Bogenmaß ins Gradmaß um.
HDEF:Definiert eine Funktion oder Prozedur: DEF FN|PROC<Name>[(<Parameterliste>)].Funktionen werden mit =<Ausdruck> beendet, Prozeduren mit ENDPROC.
HDELETE:Dieses Kommando löscht alle Zeilen zwischen den angegebenen Zahlen.DELETE <Nummer der Startzeile>,<Nummer der Endzeile>
HDIV:Diese Anweisung führt ein Ganzzahldivision zwischen zwei ganzen Zahlen aus. Priorität 3.
HDIM:DIM fred(100,100): Erzeugt und initialisiert ein Feld.DIM fred% 100 alloziiert ein unstrukturiertes Stück Speicher von 100 Bytes Größe.DIM(fred()) liefert die Anzahl der Felddimensionen.DIM(fred(),n) liefert die Größe der n-ten Felddimension.
HDRAW:DRAW [BY] x,y: Zeichnet eine Linie zum [relativen] Punkt x,y.
HENDPROC:Diese Anweisung beendet eine Prozedurdefinition.
HEDIT:Dieses Kommando ruft den ARM-BASIC-Editor auf.
HENDWHILE:Diese Anweisung beendet ein WHILE-Konstrukt. Siehe WHILE.
HENDCASE:Diese Anweisung beendet ein CASE-Konstrukt am Anfang der Zeile. Siehe CASE.
HENDIF:Diese Anweisung beendet den Block eines IF-Konstrukts am Anfang der Zeile. Siehe IF.
HEND:END markiert das Ende der Programmausführung.END=<Ausdruck> setzt die Menge des für BASIC alloziierten Speichers.Als Funktion liefert END die Endadresse des benutzen Speichers.
HENVELOPE:ENVELOPE benötigt 14 numerische, durch Komma getrennte Parameter.
HELSE:Diese Anweisung ist Teil eines IF..THEN..ELSE-Konstrukts. Am Zeilenanfang stehend wird es als Teil eines IF..THEN..ELSE..ENDIF-Blocks interpretiert.ELSE kann auch in einem ON .. GOTO|GOSUB|PROC-Konstrukt verwendet werden, um die Standardaktion zu bestimmen.
HEVAL:Diese Funktion wertet eine Zeichenkette mathematisch aus: EVAL("2*X+1").
HERL:Diese Funktion liefert die Nummer der Zeile, in der der letzte Fehler aufgetreten ist.
HERROR:Diese Anweisung ist Teil von ON ERROR; LOCAL ERROR und RESTORE ERROR-Anweisungen.Verursacht einen Fehler: ERROR [EXT] <Zahl>,<Zeichenkette>.
HEOF:EOF#<Datei-Referenz> liefert TRUE, wenn das Ende einer offenen Datei erreicht ist; andernfalls gibt sie FALSE zurück.
HEOR:Diese Anweisung führt das bitweise logisches Exklusiv-Oder zwischen zwei ganzzahligen Werten aus. Priorität 7.
HERR:Diese Funktion liefert die Fehlernummer des letzten Fehlers.
HEXP:Diese Funktion liefert die Eulersche Zahl potenziert mit dem Funktionsparameter (<Faktor>).
HEXT:EXT#<Datei-Referenz> liefert die Größe einer offenen Datei.EXT#<Datei-Referenz>=<Ausdruck> setzt die Größe einer offenen Datei.
HELLIPSE:ELLIPSE [FILL] x,y,maj,min[,winkel]: Zeichnet eine [ausgefüllte] Ellipse.
HFOR:FOR <Variable> = <Startwert> TO <Grenzwert> [STEP <Schrittweite>].
HFALSE:Diese Funktion gibt den logischen Wert –falsch” zurück, d.h. 0.
HFILL:FILL [BY] x,y: Füllt am [relativen] Punkt x,y.
HFN:FNfred(x,y) ruft die Funktion fred auf. DEF FNfred(a,b) definiert die Funktion.
HGOTO:GOTO <Zeilennummer> springt zu der angegebenen Zeile.
HGET$:Diese Funktion liefert das nächste Zeichen des Eingabestroms als einstellige Zeichenkette.GET$#<Dateireferenz> liefert die nächste Zeichenkette aus einer Datei.
HGET:Diese Funktion liefert den ASCII-Code des nächsten Zeichens im Eingabestrom.
HGOSUB:GOSUB <Zeilennummer> ruft eine Unterroutine an der angegebenen Zeilennummer auf.
HGCOL:GCOL a [TINT t] setzt die Grafik-Vordergrundfarbe [und Helligkeit] (Hintergrund 128+a).GCOL <Aktion>,a [TINT t] setzt die Grafik-Vorder|Hintergrundfarbe und die Aktion.
HHIMEM:Diese Pseudo-Variable liest oder setzt die Endadresse des BASIC-Speichers.
HHELP:Dieses Kommando hilft bei der Benutzung des BASIC-Interpreters.
HHELPNO:HELP hat zu diesem Schlüsselwort keine Information
HINPUT:INPUT [LINE]['|TAB|SPC]["Eingabezeichenkette"][,|;]<Variable> läßt den Benutzer eine Eingabe machen.INPUT#<Dateireferenz>,<Variablenliste> liest Eingabedaten aus einer offenen Datei.
HIF:Einzeiliges IF: IF <Ausdruck> [THEN] <Anweisungen> [ELSE <Anweisungen>].IF mit Block: IF <Ausdruck> THEN<Zeilenvorschub><Zeilen>optional:ELSE <Zeilen>ENDIF
HINKEY$:CHR$(INKEY...): Siehe INKEY.
HINKEY:INKEY 0 bis 32767 wartet <Anzahl> Zehntelsekunden auf ein einzugebendes Zeichen.INKEY -255 bis -1: Diese Funktion prüft bestimmte Tasten ab und liefert TRUE|FALSE.INKEY -256: Diese Funktion liefert die Versionsnummer des Betriebssystems.
HINT:Diese Funktion schneidet die Nachkommastellen einer Zahl ab.
HINSTR:INSTR(<Zeichenkette>,<Teilzeichenkette>[,<Startposition>]) ermittelt die Position der Teilzeichenkette.
HINSTALL:Dieses Kommando installiert eine Bibliothek. Siehe LIBRARY LIBRARY.
HLIST:Dieses Kommando listet das Programm.LIST [<Zeilennummer>][,[<Zeilennummer>]][IF<Suchmuster>] listet einen Programmabschnitt [wenn das Suchmuster zutrifft]LISTO <Optionsnummer>. Die Bits bedeuten:0: Leerzeichen am Zeilenanfang1: Macht Strukturen durch Einrückungen sichtbar2: Splittet Zeilen bei :3: Läßt die Zeilennummern weg4: Listet Tokens in Kleinbuchstaben
HLINE:LINE x1,y1,x2,y2 zeichnet eine Linie.Die Anweisung kann auch Teil einer der Anweisungen INPUT LINE oder LINE INPUT sein.
HLOAD:Dieses Kommando lädt ein neues Programm.
HLOMEM:Diese Pseudo-Variable liest oder setzt die Startadresse des Variablenspeichers.
HLOCAL:LOCAL <Variablenliste> macht Objekte in einer Prozedur oder Funktion lokal.LOCAL DATA: Sichert den Datenzeiger auf den Stack.LOCAL ERROR: Sichert den Fehlerkontrollstatus auf den Stack.
HLEFT$:LEFT$(<Zeichenkette>,<Zahl>) liefert die angegebene Zahl von Zeichen links von der Zeichenkette.LEFT$(<Zeichenkette>) schneidet das letzte Zeichen der Zeichenkette ab.LEFT$(<Zeichenkettenvariable>[,<Zähler>])=<Zeichenkette> überschreibt die Zeichenkette von links an.
HLEN:Diese Funktion liefert die Länge einer Zeichenkette.
HLET:Diese Anweisung ist ein optionaler Teil einer Zuweisung.
HLOG:Diese Funktion liefert den Logarithmus (zur Basis 10) einer Zahl (<Faktor>).
HLN:Diese Funktion liefert den natürlichen Logarithmus (zur Basis e) einer Zahl (<Faktor>).
HLIBRARY:LIBRARY <Zeichenkette>: Stellt die Funktionen und Prozeduren des angegebenen Programms zur Benutzung bereit.
HLVAR:Dieses Kommando listet alle benutzten Variablen.
HMID$:MID$(<Zeichenkette>,<Position>): Liefert alle Zeichen der Zeichenkette ab der angegebenen Position.MID$(<Zeichenkette>,<Position>,<Zähler>): Liefert eine Anzahl von Zeichen der Zeichenkettte ab der angegebenen Position.MID$(<Zeichenkettenvariable>,<Position>[,<Zähler>])=<Zeichenkette>: Überschreibt in der Zeichenkette eine Anzahl von Zeichen an der angegebenen Position.
HMODE:MODE <Zahl> setzt den Bildschirmmodus. Als Funktion liefert MODE den aktuellen Bildschirmmodus.
HMOD:Diese Funktion liefert den Rest einer Ganzzahldivision. Priorität 3.Die MOD-Funktion liefert die Wurzel der Summe der Quadrate aller Elemente eines numerischen Felds.
HMOVE:MOVE [BY] x,y bewegt den Grafik-Cursor zum [relativen] Punkt x,y.
HMOUSE:MOUSE x,y,z[,t] setzt x,y auf die Maus-Position, z auf den Tastenstatus[, t auf die Zeit seit dem letzten Klick].MOUSE COLOUR a,r,g,b setzt den Maus-Paletteneintrag für a auf die physikalische Farbe r, g, b.MOUSE OFF schaltet den Mauszeiger aus.MOUSE ON [a] setzt den Mauszeiger 1 [oder a].MOUSE RECTANGLE x,y,Breite,Höhe: Dieses Kommando beschränkt Mausbewegungen auf das angegebene Rechteck.MOUSE STEP a[,b] setzt den Mausschritt-Multiplikator auf a,a [oder a,b].MOUSE TO x,y positioniert Maus und Mauszeiger auf x,y.
HNEXT:NEXT [<Variable>[,<Variable>]^] schließt ein oder mehrere FOR..NEXT-Konstrukte.
HNEW:Dieses Kommando löscht das aktuelle Programm.
HNOT:Diese Anweisung invertiert eine Zahl bitweise.
HOLD:Dieses Kommando stellt ein mit NEW gelöschtes Programm wieder her.
HON:ON schaltet den Textcursor an.ON ERROR [LOCAL|OFF] vereinbart eine Fehlerbehandlungsroutine.ON <Ausdruck> GOTO|GOSUB|PROC.... ELSE beschreibt einen bedingten Sprung zu einem bestimmten Punkt.
HOFF:OFF schaltet den Textcursor ab.Die Anweisung kann auch Teil der Anweisungen TRACE OFF oder ON ERROR OFF sein.
HOF:Dieses Schlüsselwort ist Teil der Anweisungen CASE <Ausdruck> OF.
HORIGIN:ORIGIN x,y setzt den Grafik-Ursprung 0,0 auf x,y.
HOR:Diese Funktion führt ein bitweises ODER zwischen zwei Zahlen aus. Priorität 7.
HOPENIN:Diese Funktion öffnet eine Datei für die Eingabe.
HOPENOUT:Diese Funktion öffnet eine Datei für die Ausgabe.
HOPENUP:Diese Funktion öffnet eine Datei für die Ein- und Ausgabe.
HOSCLI:OSCLI <Zeichenkette> übergibt die Zeichenkette an die Kommandozeile des Betriebssystems.
HOTHERWISE:Dieses Schlüsselwort leitet den Standardzweig eines CASE-Konstrukts ein. Siehe CASE.
HOVERLAY:OVERLAY <Zeichenkettenfeld> setzt ein Feld von Dateinamen für Overlay-Bibliotheken.
HPRINT:PRINT ['|TAB|SPC]["Zeichenkette"][<Ausdruck>][;] gibt Elemente von mit @@% definierten Feldern aus - siehe HELP @@%PRINT#<Dateireferenz>,<Liste von Ausdrücken> schreibt Daten in eine offene Datei.
HPAGE:Diese Pseudo-Variable liest oder setzt die Startadresse des Programms.
HPTR:PTR#<Dateireferenz> liefert die Position des Zeigers in eine Datei.PTR#<Dateireferenz>=<Ausdruck> setzt die Position des Zeigers in eine Datei.
HPI:Diese Funktion liefert den Wert von –pi” (3.14159265).
HPLOT:PLOT n,x,y führt die grafische Operation n aus.
HPOINT:POINT [BY] x,y setzt Pixel an der [relativen] Position x,y.POINT TO x,y setzt den Mauszeiger auf x,y, falls dieser nicht an die Maus gebunden ist.
HPOINTPAR:POINT(x,y) liefert die logische Farbe des angegebenen Pixels.
HPROC:PROCfred(x,y) ruft die mit DEF PROCfred(a,b) definierte Prozedur auf.
HPOS:Diese Funktion liefert die x-Koordinate des Textcursors.
HQUIT:QUIT beendet den BASIC-Interpreter.Als Funktion liefert QUIT TRUE, wenn BASIC mit der Option -quit aufgerufen wurde.
HRETURN:Diese Anweisung beendet eine Unterroutine bzw. eine Unterprogramm und springt zum Aufrufpunkt zurück.
HREPEAT:REPEAT: Diese Anweisung leitet ein REPEAT..UNTIL-Konstrukt ein.
HREPORT:REPORT: Dieses Kommando gibt die letzte Fehlermeldung aus.REPORT$ liefert eine Zeichenkette mit der letzten Fehlermeldung.
HREAD:READ <Variablenliste> liest die Werte von DATA-Anweisungen in die angegebenen Variablen.
HREM:Dieses Kommando macht den Rest der Zeile zum Kommentar.
HRUN:Dieses Kommando löscht alle Variablen und startet das Programm an dessen Anfang.
HRAD:Diese Funktion wandelt Werte im Gradmaß ins Bogenmaß um.
HRESTORE:RESTORE [+][<Zahl>] setzt den Datenzeiger zurück zur ersten oder angegebenen DATA-Zeile, oder bewegt ihn die angegebene Zahl von Zeilen weiter.RESTORE DATA holt den Datenzeiger vom Stack.RESTORE ERROR holt den Fehlerkontrollstatus vom Stack.
HRIGHT$:RIGHT$(<Zeichenkette>,<Zahl>): Diese Funktion liefert die angegebene Zahl von Zeichen rechts von der Zeichenkette.RIGHT$(<Zeichenkette>) liefert das rechte Zeichen.RIGHT$(<Zeichenkettenvariable>[,<Zähler>])=<Zeichenkette> überschreibt Zeichen am Ende der Zeichenkette.
HRND:RND gibt eine zufällige Ganzzahl zurück.RND(n), wobei n<0, initialisiert den Zufallszahlengenerator mit dem Startwert n.RND(0) liefert den letzten Wert von RND(1).RND(1) gibt eine zufällige Zahl zwischen 0 und 1 zurück.RND(n), wobei n>1, gibt eine zufällige Zahl zwischen 1 und INT(n) zurück.
HRECTANGLE:RECTANGLE [FILL] xlo,ylo,Breite[,Höhe] [TO xlo,ylo] zeichnet ein [ausgefülltes] Rechteck oder kopiert [verschiebt] ein Rechteck.
HRENUMBER:Dieses Kommando numeriert die Zeilen des Programms neu:RENUMBER [<Startwert>[,<Schrittweite>]]
HSTEP:Diese Anweisung ist Teil eines FOR..TO..STEP-Konstrukts.
HSAVE:Dieses Kommando speichert das aktuelle Programm.
HSGN:Diese Funktion liefert die Werte -1, 0, 1 für das Vorzeichen einer Zahl.
HSIN:Diese Funktion liefert den Sinus einer Zahl (<Faktor>).
HSQR:Diese Funktion liefert die Quadratwurzel einer Zahl (<Faktor>).
HSOUND:SOUND <Kanal>,<Lautstärke>,<Höhe>,<Dauer>[,<Startschlag>] erzeugt einen Ton.SOUND ON|OFF schaltet den Ton an oder aus.
HSPC:In PRINT- und INPUT-Anweisungen gibt SPC(n) n Leerzeichen aus.
HSTR$:STR$[~]<Zahl> liefert die Zeichenkettenrepräsentation [in hexadezimal] einer Zahl.
HSTRING$:STRING$(<Zahl>,<Zeichenkette>) gibt die Zeichenkette die angegebene Anzahl von Malen zurück.
HSTOP:Diese Anweisung stoppt ein Programm.
HSTEREO:STEREO <Kanal>,<Position> setzt die Stereoposition für einen Kanal.
HSUM:Diese Funktion gibt die Summe aller Elemente eines Feldes zurück.SUMLEN liefert die Gesamtlänge aller Elemente eines Zeichenkettenfeldes.
HSWAP:SWAP <Variable>,<Variable> tauscht den Inhalt zweier Variablen.
HSYS:SYS <Ausdruck> [,<Ausdruck>]^ [TO <Variable>[,<Variable>]^[;<Variable>]] ruft das Betriebssystem auf.
HTAN:Diese Funktion liefert den Tangens einer Zahl (<Faktor>).
HTAB:In PRINT- und INPUT-Anweisungen setzt TAB den Cursor in die Spalte n. TAB(x,y) setzt den Cursor auf die angegebene Position auf dem Bildschirm.
HTEMPO:TEMPO <Ausdruck> setzt das Tempo der Taktschläge. Als Funktion gibt TEMPO das aktuelle Takttempo zurück.
HTEXTLOAD:Dieses Kommando lädt ein neues Programm.
HTEXTSAVE:TEXTSAVE[O <Ausdruck>,] <Zeichenkette> speichert das aktuelle Programm als Text (mit einer LISTO-Option).
HTHEN:THEN ist Teil des IF..THEN-Konstrukts. Wenn THEN von einem Zeilenvorschub gefolgt wird, leitet es einen IF..THEN..ELSE..ENDIF-Block ein.
HTIME:Diese Pseudo-Variable liest oder setzt die Echtzeituhr. TIME$ liest oder setzt die Anzeigeversion der Uhr.
HTINT:TINT a,t setzt in 256-Farbmodi die Helligkeit für COLOUR/GCOL/Vordergrundfarbe/Hintergrundfarbe a auf t.Die Anweisung ist auch als Suffix für GCOL und COLOUR verfügbar.Als Funktion gibt TINT(x,y) die Helligkeit eines Punktes zurück.
HTO:TO ist Teil des FOR..TO..-Konstrukts.TOP gibt die Addresse des Programmendes zurück.
HTRACE:TRACE [STEP] ON|OFF|PROC|<Zahl> schaltet die Programmverfolgung für Zeilen, Funktionen oder Prozeduren ab der angegebenen Zeilennummer an oder aus. TRACE TO <Zeichenkette> sendet alle Ausgaben an den angegebenen Ausgabestrom.TRACE CLOSE schließt die Ausgabe in den Ausgabestrom. Ausdruck: TRACE liefert die Referenz auf den Ausgabestrom.
HTRUE:Diese Funktion liefert den logischen Wert –Wahr”, d.h. -1.
HUNTIL:UNTIL <Ausdruck> beendet ein REPEAT..UNTIL-Konstrukt.
HUSR:Diese Funktion liefert den Rückgabewert einer Maschinenroutine.
HVDU:VDU <Zahl>[;|][,<Zahl>[;|]] sendet eine Liste von Werten an die VDU., nur 8 Bits.; 16 Bits.| 8 Bytes Nullen.
HVAL:Diese Funktion liefert den numerischen Wert einer Zeichenkette, z.B. VAL"23".
HVPOS:Diese Funktion gibt die Y-Koordinate des Textcursors zurück.
HVOICES:VOICES <Ausdruck> setzt die Anzahl der Tonkanäle.
HVOICE:VOICE <Kanal>,<Zeichenkette> weist einem Tonkanal eine Stimme zu.
HWHILE:WHILE <expression> startet ein WHILE..ENDWHILE-Konstrukt.
HWHEN:WHEN <Ausdruck>[,<Ausdruck>] identifiziert einen Fallabschnitt am Zeilenanfang. Siehe CASE.
HWAIT:Dieses Kommando wartet auf den vertikalen Sync.
HWIDTH:WIDTH <Ausdruck> setzt die Breite von Textausgaben.
HASM:Assembly language is contained in [] and assembled at P%. Labels follow '.'.Syntax:SWI|SVC|DBG|HVC|SMC|SMI[<cond>] <expr>BFC[<cond>] <reg>,#<expr>,#<expr>BFI|SBFX|UBFX[<cond>] <reg>,<reg>,#<expr>,#<expr>USAT|SSAT[<cond>] <reg>,#<expr>,<shift>USAT16|SSAT16[<cond>] <reg>,#<expr>,<reg>UXTB|UXTB16|UXTH|UXTAB|UXTAB16|UXTAH|SXTB|SXTB16|SXTH[<cond>] <reg>,<shift>BKPT|HLT|UDF <expr>ADC|ADD|AND|BIC|EOR|ORR|RSB|RSC|SBC|SUB[<cond>][S] <reg>,<reg>,<shift>MOV|MVN[<cond>][S] <reg>,<shift>MOV[T|W][<cond> <reg>,#<expr>CMN|CMP|TEQ|TST[<cond>][S|P] <reg>,<shift>CLZ|RBIT|REV|REVSH|REV16[<cond>] <reg>,<reg>CRC32[C]<B|H|W> <reg>,<reg>,<reg>QADD[8|16]|QSUB[8|16]|USAD8|USADA8|QDADD|QDSUB[<cond>] <reg>,<reg>,<reg>UADD|UHADD|UQADD|UQSUB|USUB|SADD|SHADD|SSUB|SHSUB<8|16>[<cond>] <reg>,<reg>,<reg>QASX|QSAX|UQASX|UQSAX|SHASX|SHSAX|SSAX|SASX|USAX|UASX|SEL[<cond>] <reg>,<reg>,<reg>MUL[<cond>][S] <reg>,<reg>,<reg>MLA|MLS|UMULL|UMLAL|SMULL|SMLAL[<cond>][S] <reg>,<reg>,<reg>,<reg>UMAAL[<cond>] <reg>,<reg>,<reg>,<reg>SMUL<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>SMLA[L]<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>,<reg>SM<LA[L]|LS[L]|UA|US>D[X][<cond>] <reg>,<reg>,<reg>,<reg>SMM<LA|LS|UL>[R][<cond>] <reg>,<reg>,<reg>,<reg>LDR|STR[<cond>][B|T|BT|SB|SBT|H|HT|SH|SHT|D] <reg>, '[ <reg>[,<shift>] '] [,<shift>][!]LDA|STL[<cond>][B|H] <reg>, '[ <reg> ']LDREX|LDAEX|STREX|STLEX[B|H|D][<cond>] <reg>, '[ <reg> ']LDM|STM[<cond>]DA|DB|EA|ED|FA|FD|IA|IB <reg>[!],{<reg list>}[^]RFE<DA|DB|EA|ED|FA|FD|IA|IB> <reg>[!]SRS<DA|DB|EA|ED|FA|FD|IA|IB> SP[!],#<expr>SWP[<cond>][B] <reg>,<reg>, '[ <reg> ']PLD[W]|PLI '[ <reg>[,<shift>] ']PKH<BT|TB>[<cond>] <reg>,<reg>,<shift>PUSH|POP[<cond>] <reg list>B[L][<cond>] <label>BLX <label>BX|BLX|BXJ[<cond>] <reg>SDIV|UDIV[<cond>] <reg>,<reg>,<reg>WFE|WFI|SEV[L]|YIELD[<cond>]DMB|DSB|ISB [SY|SYST|ST|LD|<ISH|NSH|OSH>[ST|LD]]SETEND <BE|LE>MRC|MCR[<cond>|2] <copro>,<expr>,<reg>,<cpreg>,<cpreg> [,<expr>]MCRR|MRRC[<cond>] <copro>,<expr>,<reg>,<reg>,<cpreg>CDP[<cond>|2] <copro>,<expr>,<cpreg>,<cpreg>,<cpreg> [,<expr>]LDC|STC[<cond>|2][L] <copro>,<cpreg>, '[ <reg>[,#<expr>] '] [,#<expr>|{expr}][!]CPS<ID|IE> <iflags[,#<expr>]>CPS #<expr>CLREX|ERETMRS[<cond>] <reg>,<psr>MSR[<cond>] <psr>_[c][x][s][f],<reg>|#<expr>
HASFP:ADF|MUF|SUF|RSF|DVF|RDF|POW|RPW|RMF|FML|FDV|FRD|POL[<cond>]<prec>[<round>] <fpreg>,<fpreg>,<fpop>MVF|MNF|ABS|RND|SQT|LOG|LGN|EXP|SIN|COS|TAN|ASN|ACS|ATN|URD|NRM[<cond>]<prec>[<round>] <fpreg>,<fpop>FLT[<cond>]<prec>[<round>] <fpreg>,<reg>FIX[<cond>][<round>] <reg>,<fpreg>WFS|RFS|WFC|RFC[<cond>] <reg>CMF|CNF[E][<cond>] <fpreg>,<fpop>LDF|STF[<cond>]<prec> <fpreg>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>] <fpreg>,<expr>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>]EA|FD <fpreg>,<expr>, '[ <reg> '] [!]DCF|EQUF<prec> <expr>
HASFN:OPT|=|DCB|EQUB|DCW|EQUW|DCD|EQUD|EQUS <expr>ADR[<cond>] <reg>,<label>ALIGN|NOPwhere <shift>=<reg>|#<expr>|<reg>,ASL|LSL|LSR|ASR|ROR <reg>|#<expr>|RRXand <cond>=AL|CC|CS|EQ|GE|GT|HI|HS|LE|LS|LT|LO|MI|NE|NV|PL|VC|VSand <reg>=R0 to 15 or SP or LR or PC or <expr>and <copro>=CP0 to 15 or <expr>and <cpreg>=C0 to 15 or <expr>and <fpreg>=F0 to 7 or <expr>and <fpop>=F0 to 7 or #<expr>, where <expr>=0,0.5,1,2,3,4,5 or 10and <prec>=S|D|E|Pand <round>=P|M|Zand <psr>=CPSR|SPSRand <iflags>=A|I|F
H0:HELP kann wie folgt aufgerufen werden:–HELP .” oder –HELP A” um die Namen von Schlüsselwörtern auszugeben;–HELP PRINT” gibt Hilfe für ein bestimmtes Schlüsselwort und –HELP [” für Assembler.
H1:Mögliche Schlüsselwörter:
H@@:Diese Pseudo-Variable liest oder setzt das Format für die Ausgabe von Zahlen:PRINT @@% gibt eine Zahl zurück, LVAR und @@%= benötigen Zeichenketten."G<Zahl.Zahl>" ist das allgemeine Formatfeld und setzt die Zahl der Ziffern"E<Zahl>.<Zahl>" ist das Exponentenformatfeld und setzt die Zahl Ziffern im Exponenten."F<Zahl>.<Zahl>" ist das Festformatfeld und setzt die Zahl der Ziffern nach dem Dezimalpunkt.Alle Teile sind optional., oder . im der Formatzeichenkette geben , oder . als Dezimaltrennzeichen aus. ein vorangestelltes + bedeutet, daß @@% auch für STR$ gilt.

#{Token0=BASIC}
HBASBAS:BASIC ist der ARM-BBC-BASIC-Interpreter 
SBASBAS:Syntax: *BASIC [-help|-chain|-load|-quit] <Dateiname> 
#{Token0=BASIC64}
HBASB64:BASIC64 starts the double precision BASIC interpreter. 
SBASB64:Syntax: *BASIC64 [-help|-chain|-load|-quit] <Dateiname> 
@


1.7
log
@Suppress help on TWIN/TWINO
The TWIN & TWINO commands were changed to cause 'Mistake' in BASIC 1.54, but because we retain the tokens in the token table (so that programs which include the tokens can still be read) they still appeared in response to HELP. Notch then out of the HELP.
In removing the HTWIN and HTWINO tokenised HELP lookup this revealed that the end of table marker was wrong and BASIC kept scanning until it fell off the end of memory - the code expects a terminator of 127.
In fixing that it turned out that in BASIC 1.23 the token for 'HELPTOKENNO' was accidentally turned into an error message, and subsequently into token 'E13', when in fact it's only ever looked up as text (not an error).
Put this back as string shorter 'HHELPNO' and use the slot for E13 for the new 'Bad MODE' error from BASIC 1.70; delete HTWIN and HTWINO.

Version 1.71. Tagged as 'BASIC-1_71'
@
text
@d171 5
a175 2
HBASBAS:BASIC64 ist der ARM-BBC-BASIC-Interpreter 
SBASBAS:Syntax: *BASIC64 [-help|-chain|-load|-quit] <Dateiname> 
@


1.6
log
@Debugger symmetry, assembler fixes, and add AArch32 ARMv8 instructions
SRS changed to accept R13 as a synonym for SP.
Fix stack imbalance in CHKCOPRO, CHKREG1 expected R14 & R1 to be stacked but only R1 was, so a copro number not starting CP
  CDP 5,0,C1,C2,C3
for example led to a abort on instruction fetch when returning from CHKREG.
The syntax help for STC and LDC was missing the <cpreg> source/dest register.
Fix for LDREXH & STREXH rejecting odd numbered Rt. The check for -EXD was only looking at 1 of the 2 size bits in the output instruction, so -EX and -EXB allowed odd Rt, but -EXH inherited the checks intended for only -EXD.
ARMv8: Added ISHLD/NSHLD/OSHLD/LD options to DMB & DSB; HLT #imm16; SEVL; CRC32; LDA[B|H]; LDAEX[B|H|D], STL[B|H]; STLEX[B|H|D].
This completes the review of all the opcodes (see also BASIC-1_63).

Tests/ARMv6v7/TestARMv8 has samples of the new opcodes in action.

Version 1.69. Tagged as 'BASIC-1_69'
@
text
@d65 1
a151 2
HTWINO:Dieses Kommando konvertiert das Programm in Text mit einer LIST-Option und ruft TWIN auf.
HTWIN:Dieses Kommando konvertiert das Programm in Text und ruft TWIN auf.
@


1.5
log
@Assembler/Debugger round trip improvements
Review of opcodes of the form
  OP<c> {#}imm
this summarises the ones the BASIC assembler accepts:
  SVC #imm, SVC imm, SWI imm (Debugger emits SWI imm)
  DBG #imm, DGB imm          (Debugger emits DBG imm)
  SMC #imm, SMC imm, SMI imm (Debugger emits SMI imm)
  HVC #imm, HVC imm          (Debugger emits HVC imm)
  BKPT #imm, BKPT imm        (Debugger emits BKPT imm)
Assembler.s: Add SMI as a synonym for SMC.
CmdHelp: Add all the missing v6/v7 opcodes to the help.
HelpMsgs.s: Split the terse yet huge assembler help (HELP [) into 3 to avoid needing 4k of stack just for the message token lookup.

Version 1.63. Tagged as 'BASIC-1_63'
@
text
@d164 1
a164 1
HASM:Assembly language is contained in [] and assembled at P%. Labels follow '.'.Syntax:SWI|SVC|DBG|HVC|SMC|SMI[<cond>] <expr>BFC[<cond>] <reg>,#<expr>,#<expr>BFI|SBFX|UBFX[<cond>] <reg>,<reg>,#<expr>,#<expr>USAT|SSAT[<cond>] <reg>,#<expr>,<shift>USAT16|SSAT16[<cond>] <reg>,#<expr>,<reg>UXTB|UXTB16|UXTH|UXTAB|UXTAB16|UXTAH|SXTB|SXTB16|SXTH[<cond>] <reg>,<shift>BKPT|UDF <expr>ADC|ADD|AND|BIC|EOR|ORR|RSB|RSC|SBC|SUB[<cond>][S] <reg>,<reg>,<shift>MOV|MVN[<cond>][S] <reg>,<shift>MOV[T|W][<cond> <reg>,#<expr>CMN|CMP|TEQ|TST[<cond>][S|P] <reg>,<shift>CLZ|RBIT|REV|REVSH|REV16[<cond>] <reg>,<reg>QADD[8|16]|QSUB[8|16]|USAD8|USADA8|QDADD|QDSUB[<cond>] <reg>,<reg>,<reg>UADD|UHADD|UQADD|UQSUB|USUB|SADD|SHADD|SSUB|SHSUB<8|16>[<cond>] <reg>,<reg>,<reg>QASX|QSAX|UQASX|UQSAX|SHASX|SHSAX|SSAX|SASX|USAX|UASX|SEL[<cond>] <reg>,<reg>,<reg>MUL[<cond>][S] <reg>,<reg>,<reg>MLA|MLS|UMULL|UMLAL|SMULL|SMLAL[<cond>][S] <reg>,<reg>,<reg>,<reg>UMAAL[<cond>] <reg>,<reg>,<reg>,<reg>SMUL<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>SMLA[L]<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>,<reg>SM<LA[L]|LS[L]|UA|US>D[X][<cond>] <reg>,<reg>,<reg>,<reg>SMM<LA|LS|UL>[R][<cond>] <reg>,<reg>,<reg>,<reg>LDR|STR[<cond>][B|T|BT|SB|SBT|H|HT|SH|SHT|D] <reg>, '[ <reg>[,<shift>] '] [,<shift>][!]LDREX|STREX[B|H|D][<cond>] <reg>, '[ <reg> ']LDM|STM[<cond>]DA|DB|EA|ED|FA|FD|IA|IB <reg>[!],{<reg list>}[^]RFE<DA|DB|EA|ED|FA|FD|IA|IB> <reg>[!]SRS<DA|DB|EA|ED|FA|FD|IA|IB> SP[!],#<expr>SWP[<cond>][B] <reg>,<reg>, '[ <reg> ']PLD[W]|PLI '[ <reg>[,<shift>] ']PKH<BT|TB>[<cond>] <reg>,<reg>,<shift>PUSH|POP[<cond>] <reg list>B[L][<cond>] <label>BLX <label>BX|BLX|BXJ[<cond>] <reg>SDIV|UDIV[<cond>] <reg>,<reg>,<reg>WFE|WFI|SEV|YIELD[<cond>]DMB|DSB|ISB [SY|ST|ISH[ST]|NSH[ST]|OSH[ST]]SETEND <BE|LE>MRC|MCR[<cond>|2] <copro>,<expr>,<reg>,<cpreg>,<cpreg> [,<expr>]MCRR|MRRC[<cond>] <copro>,<expr>,<reg>,<reg>,<cpreg>CDP[<cond>|2] <copro>,<expr>,<cpreg>,<cpreg>,<cpreg> [,<expr>]LDC|STC[<cond>|2][L] <copro>, '[ <reg>[,#<expr>] '] [,#<expr>|{expr}][!]CPS<ID|IE> <iflags[,#<expr>]>CPS #<expr>CLREX|ERETMRS[<cond>] <reg>,<psr>MSR[<cond>] <psr>_[c][x][s][f],<reg>|#<expr>
@


1.4
log
@Extended assembler for ARMv6/v7 instructions
Implemented scalar (non-VFP/NEON) instructions for ARMv6/v7 and a couple of omitted ARMv5 instructions in UAL syntax.
Added documentary comments and minor performance tweaks to some existing code.
Corrected stack imbalance in handling of memory moving when local DIMs in use.
Preliminary test code for assembler instructions.

Version 1.60. Tagged as 'BASIC-1_60'
@
text
@d164 3
a166 1
HASM:Assembly language is contained in [] and assembled at P%. Labels follow '.'.Syntax:SWI|SVC[<cond>] <expr>BFC[<cond>] <reg>,#<expr>,#<expr>BFI[<cond>] <reg>,<reg>,#<expr>,#<expr>BKPT <expr>ADC|ADD|AND|BIC|EOR|ORR|RSB|RSC|SBC|SUB[<cond>][S] <reg>,<reg>,<shift>MOV|MVN[<cond>][S] <reg>,<shift>CMN|CMP|TEQ|TST[<cond>][S|P] <reg>,<shift>CLZ[<cond>] <reg>,<reg>QADD|QSUB|QDADD|QDSUB[<cond>] <reg>,<reg>,<reg>MUL[<cond>][S] <reg>,<reg>,<reg>MLA|UMULL|UMLAL|SMULL|SMLAL[<cond>][S] <reg>,<reg>,<reg>,<reg>SMUL<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>SMLA[L]<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>,<reg>LDR|STR[<cond>][B|T|BT|SB|SBT|H|HT|SH|SHT|D] <reg>, '[ <reg>[,<shift>] '] [,<shift>][!]LDM|STM[<cond>]DA|DB|EA|ED|FA|FD|IA|IB <reg>[!],{<reg list>}[^]SWP[<cond>][B] <reg>,<reg>, '[<reg> ']PLD '[ <reg>[,<shift>] ']B[L][<cond>] <label>BLX <label>B[L]X[<cond>] <reg>SDIV|UDIV[<cond>] <reg>,<reg>,<reg>MRC|MCR[<cond>|2] <copro>,<expr>,<reg>,<cpreg>,<cpreg> [,<expr>]MCRR|MRRC[<cond>] <copro>,<expr>,<reg>,<reg>,<cpreg>CDP[<cond>|2] <copro>,<expr>,<cpreg>,<cpreg>,<cpreg> [,<expr>]LDC|STC[<cond>|2][L] <copro>, '[ <reg>[,#<expr>] '] [,#<expr>|{expr}][!]MRS[<cond>] <reg>,<psr>MSR[<cond>] <psr>_[c][x][s][f],<reg>|#<expr>ADF|MUF|SUF|RSF|DVF|RDF|POW|RPW|RMF|FML|FDV|FRD|POL[<cond>]<prec>[<round>] <fpreg>,<fpreg>,<fpop>MVF|MNF|ABS|RND|SQT|LOG|LGN|EXP|SIN|COS|TAN|ASN|ACS|ATN|URD|NRM[<cond>]<prec>[<round>] <fpreg>,<fpop>FLT[<cond>]<prec>[<round>] <fpreg>,<reg>FIX[<cond>][<round>] <reg>,<fpreg>WFS|RFS|WFC|RFC[<cond>] <reg>CMF|CNF[E][<cond>] <fpreg>,<fpop>LDF|STF[<cond>]<prec> <fpreg>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>] <fpreg>,<expr>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>]EA|FD <fpreg>,<expr>, '[ <reg> '] [!]OPT|=|DCB|EQUB|DCW|EQUW|DCD|EQUD|EQUS <expr>DCF|EQUF<prec> <expr>ADR[<cond>] <reg>,<label>ALIGN|NOPwhere <shift>=<reg>|#<expr>|<reg>,ASL|LSL|LSR|ASR|ROR <reg>|#<expr>|RRXand <cond>=AL|CC|CS|EQ|GE|GT|HI|HS|LE|LS|LT|LO|MI|NE|NV|PL|VC|VSand <reg>=R0 to 15 or SP or LR or PC or <expr>and <copro>=CP0 to 15 or <expr>and <cpreg>=C0 to 15 or <expr>and <fpreg>=F0 to 7 or <expr>and <fpop>=F0 to 7 or #<expr>, where <expr>=0,0.5,1,2,3,4,5 or 10and <prec>=S|D|E|Pand <round>=P|M|Zand <psr>=CPSR|SPSR
@


1.3
log
@Have BASIC manage its own messages
For the standalone case BASIC[64] will now register its own resources into Resources/BASIC/BASIC[64]Msgs.
For the ROM case BASIC[64] will share them in Resources/BASIC/Messages as before.
This ensures that regardless of the order of loading, and the potential that a ROM and standalone version might be mixed, both ends up seeing the messages its expecting to see.
Tested in a ROM build and softloaded on RISC OS 4.02.

Version 1.57. Tagged as 'BASIC-1_57'
@
text
@d164 1
a164 1
HASM:Assembly language is contained in [] and assembled at P%. Labels follow '.'.Syntax:SWI[<cond>] <expr>BKPT <expr>ADC|ADD|AND|BIC|EOR|ORR|RSB|RSC|SBC|SUB[<cond>][S] <reg>,<reg>,<shift>MOV|MVN[<cond>][S] <reg>,<shift>CMN|CMP|TEQ|TST[<cond>][S|P] <reg>,<shift>CLZ[<cond>] <reg>,<reg>QADD|QSUB|QDADD|QDSUB[<cond>] <reg>,<reg>,<reg>MUL[<cond>][S] <reg>,<reg>,<reg>MLA|UMULL|UMLAL|SMULL|SMLAL[<cond>][S] <reg>,<reg>,<reg>,<reg>SMUL<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>SMLA[L]<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>,<reg>LDR|STR[<cond>][B|T|BT|SB|H|SH|D] <reg>, '[ <reg>[,<shift>] '] [,<shift>][!]LDM|STM[<cond>]DA|DB|EA|ED|FA|FD|IA|IB <reg>[!],{<reg list>}[^]SWP[<cond>][B] <reg>,<reg>, '[<reg> ']PLD '[ <reg>[,<shift>] ']B[L][<cond>] <label>BLX <label>B[L]X[<cond>] <reg>MRC|MCR[<cond>|2] <copro>,<expr>,<reg>,<cpreg>,<cpreg> [,<expr>]MCRR|MRRC[<cond>] <copro>,<expr>,<reg>,<reg>,<cpreg>CDP[<cond>|2] <copro>,<expr>,<cpreg>,<cpreg>,<cpreg> [,<expr>]LDC|STC[<cond>|2][L] <copro>, '[ <reg>[,#<expr>] '] [,#<expr>|{expr}][!]MRS[<cond>] <reg>,<psr>MSR[<cond>] <psr>_[c][x][s][f],<reg>|#<expr>ADF|MUF|SUF|RSF|DVF|RDF|POW|RPW|RMF|FML|FDV|FRD|POL[<cond>]<prec>[<round>] <fpreg>,<fpreg>,<fpop>MVF|MNF|ABS|RND|SQT|LOG|LGN|EXP|SIN|COS|TAN|ASN|ACS|ATN|URD|NRM[<cond>]<prec>[<round>] <fpreg>,<fpop>FLT[<cond>]<prec>[<round>] <fpreg>,<reg>FIX[<cond>][<round>] <reg>,<fpreg>WFS|RFS|WFC|RFC[<cond>] <reg>CMF|CNF[E][<cond>] <fpreg>,<fpop>LDF|STF[<cond>]<prec> <fpreg>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>] <fpreg>,<expr>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>]EA|FD <fpreg>,<expr>, '[ <reg> '] [!]OPT|=|DCB|EQUB|DCW|EQUW|DCD|EQUD|EQUS <expr>DCF|EQUF<prec> <expr>ADR[<cond>] <reg>,<label>ALIGN|NOPwhere <shift>=<reg>|#<expr>|<reg>,ASL|LSL|LSR|ASR|ROR <reg>|#<expr>|RRXand <cond>=AL|CC|CS|EQ|GE|GT|HI|HS|LE|LS|LT|LO|MI|NE|NV|PL|VC|VSand <reg>=R0 to 15 or SP or LR or PC or <expr>and <copro>=CP0 to 15 or <expr>and <cpreg>=C0 to 15 or <expr>and <fpreg>=F0 to 7 or <expr>and <fpop>=F0 to 7 or #<expr>, where <expr>=0,0.5,1,2,3,4,5 or 10and <prec>=S|D|E|Pand <round>=P|M|Zand <psr>=CPSR|SPSR
@


1.2
log
@Removed BASICTrans.  Now in a separate directory.
@
text
@d164 1
a164 1
HASM:Assembly language is contained in [] and assembled at P%. Labels follow '.'.Syntax:SWI[<cond>] <expr>ADC|ADD|AND|BIC|EOR|ORR|RSB|RSC|SBC|SUB[<cond>][S] <reg>,<reg>,<shift>MOV|MVN[<cond>][S] <reg>,<shift>CMN|CMP|TEQ|TST[<cond>][S|P] <reg>,<shift>MUL[<cond>][S] <reg>,<reg>,<reg>MLA|UMULL|UMLAL|SMULL|SMLAL[<cond>][S] <reg>,<reg>,<reg>,<reg>LDR|STR[<cond>][B|SB|H|SH] <reg>, '[ <reg>[,<shift>] '] [,<shift>][!]LDM|STM[<cond>]DA|DB|EA|ED|FA|FD|IA|IB <reg>[!],{<reg list>}[^]B[L][<cond>] <label>BX[<cond>] <reg>MRC|MCR[<cond>] <copro>,<expr>,<reg>,<cpreg>,<cpreg> [,<expr>]CDP[<cond>] <copro>,<expr>,<cpreg>,<cpreg>,<cpreg> [,<expr>]LDC|STC[<cond>][L] <copro>, '[ <reg>[,#<expr>] '] [,#<expr>][!]SWP[<cond>][B] <reg>,<reg>, '[<reg> ']MRS[<cond>] <reg>,<psr>MSR[<cond>] <psr>_[c][x][s][f],<reg>|#<expr>ADF|MUF|SUF|RSF|DVF|RDF|POW|RPW|RMF|FML|FDV|FRD|POL[<cond>]<prec>[<round>] <fpreg>,<fpreg>,<fpop>MVF|MNF|ABS|RND|SQT|LOG|LGN|EXP|SIN|COS|TAN|ASN|ACS|ATN|URD|NRM[<cond>]<prec>[<round>] <fpreg>,<fpop>FLT[<cond>]<prec>[<round>] <fpreg>,<reg>FIX[<cond>][<round>] <reg>,<fpreg>WFS|RFS|WFC|RFC[<cond>] <reg>CMF|CNF[E][<cond>] <fpreg>,<fpop>LDF|STF[<cond>]<prec> <fpreg>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>] <fpreg>,<expr>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>]EA|FD <fpreg>,<expr>, '[ <reg> '] [!]OPT|=|DCB|EQUB|DCW|EQUW|DCD|EQUD|EQUS <expr>DCF|EQUF<prec> <expr>ADR[<cond>] <reg>,<label>ALIGN|NOPwhere <shift>=<reg>|#<expr>|<reg>,ASL|LSL|LSR|ASR|ROR <reg>|#<expr>|RRXand <cond>=AL|CC|CS|EQ|GE|GT|HI|HS|LE|LS|LT|LO|MI|NE|NV|PL|VC|VSand <reg>=R0 to 15 or LR or PC or <expr>and <copro>=CP0 to 15 or <expr>and <cpreg>=C0 to 15 or <expr>and <fpreg>=F0 to 7 or <expr>and <fpop>=F0 to 7 or #<expr>, where <expr>=0,0.5,1,2,3,4,5 or 10and <prec>=S|D|E|Pand <round>=P|M|Zand <psr>=CPSR|SPSR
@


1.1
log
@German resources added
@
text
@@
