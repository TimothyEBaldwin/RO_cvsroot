head	4.9;
access;
symbols
	BASIC-1_75:4.9
	BASIC-1_74:4.9
	BASIC-1_73:4.9
	BASIC-1_72:4.9
	BASIC-1_71:4.8
	BASIC-1_70:4.7
	BASIC-1_69:4.6
	BASIC-1_68:4.5
	BASIC-1_67:4.5
	BASIC-1_66:4.5
	BASIC-1_65:4.5
	BASIC-1_64:4.5
	BASIC-1_63:4.5
	BASIC-1_62:4.4
	BASIC-1_61:4.4
	BASIC-1_60:4.4
	BASIC-1_59:4.3
	BASIC-1_58:4.3
	BASIC-1_57:4.3
	RO_5_07:4.2
	Ursula_merge:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.6
	nicke_BASIC_13-10-98:1.1.2.1
	nicke_BASIC_25-9-98:1.1.2.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:1.1.2.1
	Spinner_B20_2:1.1.2.1
	Spinner_19_3:1.1.2.1
	Spinner_B18:1.1.2.1
	Spinner_B17:1.1.2.1
	Spinner_B15:1.1.2.1
	Spinner_B14:1.1.2.1
	Spinner_B13:1.1.2.1
	Spinner_B12:1.1.2.1
	Spinner_B10:1.1.2.1
	Daytona:4.1.0.4
	Daytona_bp:4.1
	Ursula:4.1.0.2
	Ursula_bp:4.1
	Spin_merge:1.1.2.1
	ARTtmp_bp:1.1.2.1
	Spinner_B7:1.1.2.1
	ARTtmp_merge:1.1.2.1.2.1
	Spin_3Apr97:1.1.2.1
	ARTtmp:1.1.2.1.0.2
	Spinner:1.1.0.2;
locks; strict;
comment	@# @;
expand	@b@;


4.9
date	2017.09.07.19.34.37;	author rsprowson;	state Exp;
branches;
next	4.8;
commitid	ulAIao6m9bYzGi6A;

4.8
date	2017.07.27.19.58.52;	author rsprowson;	state Exp;
branches;
next	4.7;
commitid	zr7FfPImnoVAaU0A;

4.7
date	2017.07.22.21.50.59;	author jlee;	state Exp;
branches;
next	4.6;
commitid	CDYQ0yZDiBs2Xg0A;

4.6
date	2017.07.21.20.20.31;	author rsprowson;	state Exp;
branches;
next	4.5;
commitid	M1DaUmTbhIPZt80A;

4.5
date	2017.01.24.21.57.08;	author rsprowson;	state Exp;
branches;
next	4.4;
commitid	y7O4YdywpmiTJgDz;

4.4
date	2015.04.14.06.56.07;	author alees;	state Exp;
branches;
next	4.3;
commitid	HlqkBsA4wuh7Gwhy;

4.3
date	2013.12.01.18.09.31;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	g83hl4RCFV1Crsfx;

4.2
date	98.09.22.10.43.39;	author nturton;	state dead;
branches;
next	4.1;

4.1
date	97.05.08.10.48.13;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.03.11.19.18.04;	author nturton;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.03.11.19.18.05;	author nturton;	state Exp;
branches
	1.1.2.1.2.1;
next	;

1.1.2.1.2.1
date	97.04.16.12.00.29;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.9
log
@Automatically pick the best FP model for the hosting CPU
Have BASIC V pick either BASICVFP or BASIC VI as appropriate for the current CPU, so if there's VFP hardware don't emulate everything as FPA opcodes.
The BASIC64 command (moved to BASIC V) will now automatically RMEnsure then enter the respective module. If there's something depending on the internal workings of BASIC VI and wishes to explicitly select that even when VFP is present a new command, *BASICFPA, forces BASIC VI to start.
By having BASIC V manage this selection we in effect remove the requirement to remember to RMEnsure the floating point version, which is usually either forgotten about or wrong anyway.
Compatibility wise
  RISC OS 5 includes all 3 variants (2 if no VFP) and will adopt the new logic.
  Existing RISC OS 5 stable releases have always included BASIC V and VI, so will work as before (through emulating FPA).
  Soft loaded modules inside !System will be handled by a disc based update.
Changed files
  CmdHelp: adds the new BASIC64 help/syntax message
  Basic.s: qualify the FPA version in it's startup banner
  ModHead.s: add the new selection logic, and move the 'VFP' help to be a suffix so the module names line up nicely in *Modules again
Tested in both ROM and disc based guises on ARMs with and without VFP hardware.

Version 1.72. Tagged as 'BASIC-1_72'
@
text
@#{DictTokens}
HAND:Bitwise logical AND between two integers. Priority 6.
HABS:This function gives the magnitude (absolute value) of a number (<factor>).
HACS:This function gives the arc cosine of a number (<factor>).
HADVAL:This function gives the value of the specified analogue port or buffer.
HASC:This function gives the ASCII code of the first character of a string.
HASN:This function gives the arc sine of a number (<factor>).
HATN:This function gives the arc tangent of a number (<factor>).
HAUTO:This command generates line numbers for typing in a program.AUTO [<base number>[,<step size>]]
HAPPEND:This command appends a file to the program and renumbers the new lines.
HBGET:This function gives the next byte from the specified file: BGET#<channel>.
HBPUT:BPUT#<channel>,<number>: put byte to open file.BPUT#<channel>,<string>[;]: put string to open file, with[out] newline.
HBEATS:BEATS <expression>: set the number of microbeats in a bar.As a function BEATS gives the current number of microbeats.
HBEAT:This function gives the current microbeat number.
HCOLOUR:COLOUR a [TINT t]: set text foreground colour [and tint] (background 128+a).COLOUR [OF f] [ON b]: set foreground to colour number f and/or background to b.COLOUR a,p: set palette entry for logical colour a to physical colour p.COLOUR [[OF] r,g,b] [ON r,g,b]: set foreground and/or background to r, g, b.COLOUR a,r,g,b[,s]: set palette entry for a to r, g, b physical colour.
HCONST:Introduces a line number reference in internal form.
HCALL:CALL<expression>[,<variable>]^: Call machine code.
HCASE:CASE <expression> OF: start of CASE..WHEN..OTHERWISE..ENDCASE structure.
HCHAIN:Load and run a new Basic program.
HCHR$:This function gives the one character string of the supplied ASCII code.
HCLEAR:Forget all variables.
HCLOSE:CLOSE#<channel>: close specified file.
HCLG:Clear graphics screen.
HCLS:Clear text screen.
HCOS:This function gives the cosine of a number (<factor>).
HCOUNT:This function gives the number of characters PRINTed since the last newline.
HCIRCLE:CIRCLE [FILL] x,y,r: draw circle outline [solid].
HCRUNCH:This command removes specified spaces from the current program.CRUNCH <expression>. The bits in the number mean:0: spaces before statements1: spaces in statements2: REM statements (except first)3: empty statements4: empty lines
HDATA:Introduces line of DATA to be READ. The list of items is separated by commas.LOCAL DATA, RESTORE DATA: save and restore current DATA pointer.
HDEG:This function gives the value in degrees of a number in radians.
HDEF:Define function or procedure: DEF FN|PROC<name>[(<parameter list>)].End function with =<expression>; end procedure with ENDPROC.
HDELETE:This command deletes all lines between the specified numbers.DELETE <start line number>,<end line number>
HDIV:Integer division, rounded towards zero, between two integers. Priority 3.
HDIM:DIM fred(100,100): create and initialise an array.DIM fred% [LOCAL] 100: allocate [temporary] space for a byte array etc.DIM(fred()): function gives the number of dimensions.DIM(fred(),n): function gives the size of the n'th dimension.
HDRAW:DRAW [BY] x,y: graphics draw to [relative by] x,y.
HENDPROC:End of procedure definition.
HEDIT:This command calls the ARM BASIC Editor.
HENDWHILE:End of WHILE structure. See WHILE.
HENDCASE:End of CASE structure at start of line. See CASE.
HENDIF:End of block IF structure at start of line. See IF.
HEND:END: statement marking end of program execution.END=<expression>: alter amount of memory allocated to BASIC.As a function END gives the end address of memory used.
HENVELOPE:ENVELOPE takes 14 numeric parameters separated by commas.
HELSE:Part of the IF..THEN..ELSE structure. If found at the start of line, it is part of the block IF..THEN..ELSE..ENDIF structure.ELSE can also appear in ON .. GOTO|GOSUB|PROC to set the default option.
HEVAL:This function evaluates a string: EVAL("2*X+1").
HERL:This function gives the line number of the last error.
HERROR:Part of ON ERROR; LOCAL ERROR and RESTORE ERROR statements.Cause an error: ERROR [EXT] <number>,<string>.
HEOF:This function gives TRUE if at end of open file; else FALSE: EOF#<channel>.
HEOR:Bitwise logical Exclusive-OR between two integers. Priority 7.
HERR:This function gives the error number of the last error.
HEXP:This function gives the exponential of a number (<factor>).
HEXT:This function gives the length (extent) of an open file: EXT#<channel>.EXT#<channel>=<expression> sets the length of an open file.
HELLIPSE:ELLIPSE [FILL] x,y,maj,min[,angle]: draw ellipse outline [solid].
HFOR:FOR <variable> = <start value> TO <limit value> [STEP <step size>].
HFALSE:This function gives the logical value 'false' i.e. 0.
HFILL:FILL [BY] x,y: flood fill from [relative to] point x,y.
HFN:Call a function with FNfred(x,y): define one with DEF FNfred(a,b).
HGOTO:GOTO <line number>: go to line number.
HGET$:This function gives the next input character as a one character string.GET$#<channel> gives next string from the file.
HGET:This function gives the ASCII value of the next character in the input stream.
HGOSUB:GOSUB <line number>: call subroutine at line number.
HGCOL:GCOL a [TINT t]: set graphics foreground colour [and tint] (background 128+a).GCOL <action>,a [TINT t]: set graphics fore|background colour and action.GCOL [OF [<action>],f] [ON [<action>],b]:Set graphics foreground and/or background colour number [and action].GCOL [[OF] [<action>,]r,g,b] [ON [<action>,]r,g,b]:Set graphics foreground and/or background colour to r, g, b [and action].
HHIMEM:This pseudo-variable reads or sets the address of the end of BASIC's memory.
HHELP:This command gives help on usage of the interpreter.
HHELPNO:HELP has no information on this keyword
HINPUT:INPUT [LINE]['|TAB|SPC]["display string"][,|;]<variable>: input from user.INPUT#<channel>,<list of variables>: input data from open file.
HIF:Single line if: IF <expression> [THEN] <statements> [ELSE <statements>].Block if: IF <expression> THEN<newline><lines>optional: ELSE <lines>must:ENDIF
HINKEY$:CHR$(INKEY...): see INKEY.
HINKEY:INKEY 0 to 32767: function waits <number> centiseconds to read character.INKEY -255 to -1: function checks specific key for TRUE|FALSE.INKEY -256: function gives operating system number.
HINT:This function gives the nearest integer less than or equal to the number.
HINSTR:INSTR(<string>,<sub string>[,<start position>]) find sub string position.
HINSTALL:This command permanently installs a library: see HELP LIBRARY.
HLIST:This command lists the program:LIST [<line number>][,[<line number>]][IF<pattern>]. list section [if pattern]LISTO <option number>. Bits mean:-0: space before line1: indent structure2: split lines at :3: don't list line number4: list tokens in lower case
HLINE:Draw a line: LINE x1,y1,x2,y2Part of INPUT LINE or LINE INPUT statement.
HLOAD:This command loads a new program.
HLOMEM:This pseudo-variable reads or sets the address of the start of the variables.
HLOCAL:LOCAL <list of variables>: make things private to function or procedure.LOCAL DATA: save DATA pointer on stack.LOCAL ERROR: save error control status on stack.
HLEFT$:LEFT$(<string>,<number>): gives leftmost number of characters from string.LEFT$(<string>): gives leftmost LEN-1 characters.LEFT$(<string variable>[,<count>])=<string>: overwrite characters from start.
HLEN:This function gives the length of a string.
HLET:Optional part of assignment.
HLOG:This function gives the common logarithm (base 10) of a number (<factor>).
HLN:This function gives the natural logarithm (base e) of a number (<factor>).
HLIBRARY:LIBRARY <string>: functions and procedures of the named program can be used.
HLVAR:This command lists all variables in use.
HMID$:MID$(<string>,<position>): gives all of string starting from position.MID$(<string>,<position>,<count>): gives some of string from position.MID$(<string variable>,<position>[,<count>])=<string>: overwrite characters.
HMODE:MODE <number>|<string>: set screen mode.MODE <width>,<height>,<bpp>[,<framerate>]: set screen mode.MODE <width>,<height>,<modeflags>,<ncolour>,<log2bpp>[,<framerate>]: set screen mode.As a function MODE gives the current screen mode.
HMOD:Remainder after integer division between two integers. Priority 3.The MOD function gives the square root of the sum of the squares of all the elements in a numeric array.
HMOVE:MOVE [BY] x,y: graphics move to [relative by] x,y.
HMOUSE:MOUSE x,y,z[,t]: sets x,y to mouse position; z to button state [t to time].MOUSE COLOUR a,r,g,b: set mouse palette entry for a to r, g, b physical colour.MOUSE OFF: turn mouse pointer off.MOUSE ON [a]: sets mouse pointer 1 [or a].MOUSE RECTANGLE x,y,width,height: constrain mouse movement to inside rectangle.MOUSE STEP a[,b]: sets mouse step multiplier to a,a [or a,b].MOUSE TO x,y: positions mouse and pointer at x,y.
HNEXT:NEXT [<variable>[,<variable>]^]: closes one or several FOR..NEXT structures.
HNEW:This command erases the current program.
HNOT:This function gives the number with all bits inverted (0 and 1 exchanged).
HOLD:This command recovers the program just after a NEW.
HON:ON: cursor on.ON ERROR [LOCAL|OFF]: define error handler.ON <expression> GOTO|GOSUB|PROC.... ELSE: call from specified list item.
HOFF:OFF: turn cursor off.Part of TRACE OFF, ON ERROR OFF statements.
HOF:Part of the CASE <expression> OF statement.
HORIGIN:ORIGIN x,y: sets x,y as the new graphics 0,0 point.
HOR:Bitwise logical OR between two integers. Priority 7.
HOPENIN:Open for Input: the function opens a file for input.
HOPENOUT:Open for Output: the function opens a file for output.
HOPENUP:Open for Update: the function opens a file for input and output.
HOSCLI:OSCLI <string>: give string to Operating System Command Line Interpreter.
HOTHERWISE:Identifies case exceptional section at start of line. See CASE.
HOVERLAY:OVERLAY <string array>: set an array of filenames for overlay libraries.
HPRINT:PRINT ['|TAB|SPC]["display string"][<expression>][;] print items in fields defined by @@% - see HELP @@%PRINT#<channel>,<list of expressions>: print data to open file.
HPAGE:This pseudo-variable reads or sets the address of the start of the program.
HPTR:This function gives the position in a file: PTR#<channel>.PTR#<channel>=<expression> sets the position in a file.
HPI:This function gives the value of 'pi' 3.1415926535.
HPLOT:PLOT n,x,y: graphics operation n.
HPOINT:POINT [BY] x,y: set pixel at [relative to] x,y.POINT TO x,y: position pointer at x,y if not linked to mouse.
HPOINTPAR:POINT(x,y) gives the logical colour of a graphics point.
HPROC:Call a procedure with PROCfred(x,y); define one with DEF PROCfred(a,b).
HPOS:This function gives the x-coordinate of the text cursor.
HQUIT:QUIT [<expression>]: leave the interpreter (passing optional return code <expression>).As a function QUIT gives TRUE if BASIC was entered with a -quit option.
HRETURN:End of subroutine.
HREPEAT:REPEAT: start of REPEAT..UNTIL structure; statement delimiter not required.
HREPORT:REPORT: print last error message.REPORT$ function gives string of last error string.
HREAD:READ <list of variables>: read the variables in turn from DATA statements.
HREM:Ignores rest of line.
HRUN:Clear variables and start execution at beginning of program.
HRAD:This function gives the value in radians of a number in degrees.
HRESTORE:RESTORE [+][<number>]: restore the data pointer to first or given line, or move forward <number> lines from the start of the next line.RESTORE DATA: restore DATA pointer from stack.RESTORE ERROR: restore error control status from stack.
HRIGHT$:RIGHT$(<string>,<number>): gives rightmost number of characters from string.RIGHT$(<string>): gives rightmost character.RIGHT$(<string variable>[,<count>])=<string>: overwrite characters at end.
HRND:RND: function gives a random integer.RND(n) where n<0: initialise random number generator based on n.RND(0): last RND(1) value.RND(1): random real 0..1.RND(n) where n>1: random value between 1 and INT(n).
HRECTANGLE:RECTANGLE [FILL] xlo,ylo,width[,height] [TO xlo,ylo]:Draw a rectangle outline [solid] or copy [move] the rectangle.
HRENUMBER:This command renumbers the lines in the program:RENUMBER [<base number>[,<step size>]]
HSTEP:Part of the FOR..TO..STEP structure.
HSAVE:This command saves the current program.
HSGN:This function gives the values -1, 0, 1 for negative, zero, positive numbers.
HSIN:This function gives the sine of a number (<factor>).
HSQR:This function gives the square root of a number (<factor>).
HSOUND:SOUND <channel>,<amplitude>,<pitch>,<duration>[,<start beat>]: make a sound.SOUND ON|OFF: enable|disable sounds.
HSPC:In PRINT or INPUT statements, prints out n spaces: PRINT SPC(10).
HSTR$:STR$[~]<number>: gives string representation [in hex] of a number (<factor>).
HSTRING$:STRING$(<number>,<string>): gives string replicated the number of times.
HSTOP:Stop program.
HSTEREO:STEREO <channel>,<position>: set the stereo position for a channel.
HSUM:This function gives the sum of all elements in an array.SUMLEN gives the total length of all elements of a string array.
HSWAP:SWAP <variable>,<variable>: exchange the contents.
HSYS:The SYS statement calls the operating system:SYS <expression> [,<expression>]^ [TO <variable>[,<variable>]^[;<variable>]]
HTAN:This function gives the tangent of a number (<factor>).
HTAB:In PRINT or INPUT statements:TAB to column n: PRINT TAB(10)s$.TAB to screen position x,y: PRINT TAB(10,20)s$.
HTEMPO:TEMPO <expression>: set the sound microbeat tempo.As a function TEMPO gives the current microbeat tempo.
HTEXTLOAD:This command loads a new program, converting from text form if required.
HTEXTSAVE:This command saves the current program as text [with a LISTO option].TEXTSAVE[O <expression>,] <string>
HTHEN:Part of the IF..THEN structure. If THEN is followed by a newline it introduces a block structured IF..THEN..ELSE..ENDIF.
HTIME:This pseudo-variable reads or sets the computational real time clock. TIME$ reads or sets the display version of the clock.
HTINT:TINT a,t: set the tint for COLOUR|GCOL|fore|back a to t in 256 colour modes.Also available as a suffix to GCOL and COLOUR.As a function TINT(x,y) gives the tint of a point in 256 colour modes.
HTO:TO: part of FOR..TO..TOP: gives the address of the end of the program.
HTRACE:TRACE [STEP] ON|OFF|PROC|FN|ENDPROC|<number>: trace [in single step mode] on or off, or procedure and function calls, or procedure/function exit points, or lines below <number>.TRACE TO <string>: send all output to stream <string>TRACE CLOSE: close stream output. Expression: TRACE gives handle of the stream.
HTRUE:This function gives the logical value 'true' i.e. -1.
HUNTIL:UNTIL <expression>: end of REPEAT..UNTIL structure.
HUSR:This function gives the value returned by a machine code routine.
HVDU:VDU <number>[;|][,<number>[;|]]: list of values to be sent to vdu., only - 8 bits.; 16 bits.| 8 bytes of zeroes.As a function VDU x gives the value of the specified vdu variable.
HVAL:This function gives the numeric value of a textual string e.g. VAL"23".
HVPOS:This function gives the y-coordinate of the text cursor.
HVOICES:VOICES <expression>: set the number of sound voice channels.
HVOICE:VOICE <channel>,<string>: assign a named sound algorithm to the voice channel.
HWHILE:WHILE <expression>: start of WHILE..ENDWHILE structure.
HWHEN:WHEN <expression>[,<expression>]^: identifies case section at start of line.See CASE.
HWAIT:Wait for vertical sync.
HWIDTH:WIDTH <expression>: set width of output.
HASM:Assembly language is contained in [] and assembled at P%. Labels follow '.'.Syntax:SWI|SVC|DBG|HVC|SMC|SMI[<cond>] <expr>BFC[<cond>] <reg>,#<expr>,#<expr>BFI|SBFX|UBFX[<cond>] <reg>,<reg>,#<expr>,#<expr>USAT|SSAT[<cond>] <reg>,#<expr>,<shift>USAT16|SSAT16[<cond>] <reg>,#<expr>,<reg>UXTB|UXTB16|UXTH|UXTAB|UXTAB16|UXTAH|SXTB|SXTB16|SXTH[<cond>] <reg>,<shift>BKPT|HLT|UDF <expr>ADC|ADD|AND|BIC|EOR|ORR|RSB|RSC|SBC|SUB[<cond>][S] <reg>,<reg>,<shift>MOV|MVN[<cond>][S] <reg>,<shift>MOV[T|W][<cond> <reg>,#<expr>CMN|CMP|TEQ|TST[<cond>][S|P] <reg>,<shift>CLZ|RBIT|REV|REVSH|REV16[<cond>] <reg>,<reg>CRC32[C]<B|H|W> <reg>,<reg>,<reg>QADD[8|16]|QSUB[8|16]|USAD8|USADA8|QDADD|QDSUB[<cond>] <reg>,<reg>,<reg>UADD|UHADD|UQADD|UQSUB|USUB|SADD|SHADD|SSUB|SHSUB<8|16>[<cond>] <reg>,<reg>,<reg>QASX|QSAX|UQASX|UQSAX|SHASX|SHSAX|SSAX|SASX|USAX|UASX|SEL[<cond>] <reg>,<reg>,<reg>MUL[<cond>][S] <reg>,<reg>,<reg>MLA|MLS|UMULL|UMLAL|SMULL|SMLAL[<cond>][S] <reg>,<reg>,<reg>,<reg>UMAAL[<cond>] <reg>,<reg>,<reg>,<reg>SMUL<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>SMLA[L]<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>,<reg>SM<LA[L]|LS[L]|UA|US>D[X][<cond>] <reg>,<reg>,<reg>,<reg>SMM<LA|LS|UL>[R][<cond>] <reg>,<reg>,<reg>,<reg>LDR|STR[<cond>][B|T|BT|SB|SBT|H|HT|SH|SHT|D] <reg>, '[ <reg>[,<shift>] '] [,<shift>][!]LDA|STL[<cond>][B|H] <reg>, '[ <reg> ']LDREX|LDAEX|STREX|STLEX[B|H|D][<cond>] <reg>, '[ <reg> ']LDM|STM[<cond>]DA|DB|EA|ED|FA|FD|IA|IB <reg>[!],{<reg list>}[^]RFE<DA|DB|EA|ED|FA|FD|IA|IB> <reg>[!]SRS<DA|DB|EA|ED|FA|FD|IA|IB> SP[!],#<expr>SWP[<cond>][B] <reg>,<reg>, '[ <reg> ']PLD[W]|PLI '[ <reg>[,<shift>] ']PKH<BT|TB>[<cond>] <reg>,<reg>,<shift>PUSH|POP[<cond>] <reg list>B[L][<cond>] <label>BLX <label>BX|BLX|BXJ[<cond>] <reg>SDIV|UDIV[<cond>] <reg>,<reg>,<reg>WFE|WFI|SEV[L]|YIELD[<cond>]DMB|DSB|ISB [SY|SYST|ST|LD|<ISH|NSH|OSH>[ST|LD]]SETEND <BE|LE>MRC|MCR[<cond>|2] <copro>,<expr>,<reg>,<cpreg>,<cpreg> [,<expr>]MCRR|MRRC[<cond>] <copro>,<expr>,<reg>,<reg>,<cpreg>CDP[<cond>|2] <copro>,<expr>,<cpreg>,<cpreg>,<cpreg> [,<expr>]LDC|STC[<cond>|2][L] <copro>,<cpreg>, '[ <reg>[,#<expr>] '] [,#<expr>|{expr}][!]CPS<ID|IE> <iflags[,#<expr>]>CPS #<expr>CLREX|ERETMRS[<cond>] <reg>,<psr>MSR[<cond>] <psr>_[c][x][s][f],<reg>|#<expr>
HASFP:ADF|MUF|SUF|RSF|DVF|RDF|POW|RPW|RMF|FML|FDV|FRD|POL[<cond>]<prec>[<round>] <fpreg>,<fpreg>,<fpop>MVF|MNF|ABS|RND|SQT|LOG|LGN|EXP|SIN|COS|TAN|ASN|ACS|ATN|URD|NRM[<cond>]<prec>[<round>] <fpreg>,<fpop>FLT[<cond>]<prec>[<round>] <fpreg>,<reg>FIX[<cond>][<round>] <reg>,<fpreg>WFS|RFS|WFC|RFC[<cond>] <reg>CMF|CNF[E][<cond>] <fpreg>,<fpop>LDF|STF[<cond>]<prec> <fpreg>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>] <fpreg>,<expr>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>]EA|FD <fpreg>,<expr>, '[ <reg> '] [!]DCF|EQUF<prec> <expr>
HASFN:OPT|=|DCB|EQUB|DCW|EQUW|DCD|EQUD|EQUS <expr>ADR[<cond>] <reg>,<label>ALIGN|NOPwhere <shift>=<reg>|#<expr>|<reg>,ASL|LSL|LSR|ASR|ROR <reg>|#<expr>|RRXand <cond>=AL|CC|CS|EQ|GE|GT|HI|HS|LE|LS|LT|LO|MI|NE|NV|PL|VC|VSand <reg>=R0 to 15 or SP or LR or PC or <expr>and <copro>=CP0 to 15 or <expr>and <cpreg>=C0 to 15 or <expr>and <fpreg>=F0 to 7 or <expr>and <fpop>=F0 to 7 or #<expr>, where <expr>=0,0.5,1,2,3,4,5 or 10and <prec>=S|D|E|Pand <round>=P|M|Zand <psr>=CPSR|SPSRand <iflags>=A|I|F
H0:Help can do: 'HELP .' or 'HELP A' to print the names of keywords;'HELP PRINT' for help on any particular keyword and 'HELP [' for assembler.
H1:Possible keywords:
H@@:This pseudo-variable reads or sets the number print format:PRINT @@% gives a number, but LVAR and @@%= use strings"G<number>.<number>" general format field and number of digits"E<number>.<number>" exponent format field and number of digits"F<number>.<number>" fixed format field and number of digits after '.'All parts optional. , or . in the above prints , or . as the decimal point.Leading + means @@% applies to STR$ also.

#{Token0=BASIC}
HBASBAS:BASIC is the ARM BBC BASIC interpreter. 
SBASBAS:Syntax: *BASIC [-help|-chain|-load|-quit] <filename> 
#{Token0=BASIC64}
HBASB64:BASIC64 starts the double precision BASIC interpreter. 
SBASB64:Syntax: *BASIC64 [-help|-chain|-load|-quit] <filename> 
@


4.8
log
@Suppress help on TWIN/TWINO
The TWIN & TWINO commands were changed to cause 'Mistake' in BASIC 1.54, but because we retain the tokens in the token table (so that programs which include the tokens can still be read) they still appeared in response to HELP. Notch then out of the HELP.
In removing the HTWIN and HTWINO tokenised HELP lookup this revealed that the end of table marker was wrong and BASIC kept scanning until it fell off the end of memory - the code expects a terminator of 127.
In fixing that it turned out that in BASIC 1.23 the token for 'HELPTOKENNO' was accidentally turned into an error message, and subsequently into token 'E13', when in fact it's only ever looked up as text (not an error).
Put this back as string shorter 'HHELPNO' and use the slot for E13 for the new 'Bad MODE' error from BASIC 1.70; delete HTWIN and HTWINO.

Version 1.71. Tagged as 'BASIC-1_71'
@
text
@d172 3
@


4.7
log
@MODE improvements
Detail:
  1. MODE <string> now uses OS_ScreenMode 15 rather than *WimpMode, to avoid programs which use it (likely unintentionally) altering the Wimp mode or having to worry about preserving it
  2. If OS_ScreenMode 15 isn't supported, use our own mode string parsing code that provides a similar level of functionality to the host system's *WimpMode
  3. For all MODE variants which use OS_ScreenMode, detect any "SWI not known" error and replace it with "Bad MODE" (under the assumption the user is running pre-OS 3.5)
  4. Add a new variant, MODE <x>,<y>,<modeflags>,<ncolour>,<log2bpp>[,<hz>] to allow specification of the three parameters necessary for selecting the new screen modes introduced by RISC OS Select/5
  Files: Resources/UK/CmdHelp, Resources/UK/Messages, s/ErrorMsgs, s/ModHead, s/Stmt2
Admin:
  Tested on RISC OS 3.1, 3.7, and latest 5.23


Version 1.70. Tagged as 'BASIC-1_70'
@
text
@d64 1
d85 1
a85 1
HMODE:MODE <number>|<string>: set screen mode.MODE <width>,<height>,<bpp>[,<framerate>]:set screen mode.MODE <width>,<height>,<modeflags>,<ncolour>,<log2bpp>[,<framerate>]:set screen mode.As a function MODE gives the current screen mode.
a150 2
HTWINO:This command converts the program to text with a LIST option and calls Twin.
HTWIN:This command converts the program to text and calls Twin.
@


4.6
log
@Debugger symmetry, assembler fixes, and add AArch32 ARMv8 instructions
SRS changed to accept R13 as a synonym for SP.
Fix stack imbalance in CHKCOPRO, CHKREG1 expected R14 & R1 to be stacked but only R1 was, so a copro number not starting CP
  CDP 5,0,C1,C2,C3
for example led to a abort on instruction fetch when returning from CHKREG.
The syntax help for STC and LDC was missing the <cpreg> source/dest register.
Fix for LDREXH & STREXH rejecting odd numbered Rt. The check for -EXD was only looking at 1 of the 2 size bits in the output instruction, so -EX and -EXB allowed odd Rt, but -EXH inherited the checks intended for only -EXD.
ARMv8: Added ISHLD/NSHLD/OSHLD/LD options to DMB & DSB; HLT #imm16; SEVL; CRC32; LDA[B|H]; LDAEX[B|H|D], STL[B|H]; STLEX[B|H|D].
This completes the review of all the opcodes (see also BASIC-1_63).

Tests/ARMv6v7/TestARMv8 has samples of the new opcodes in action.

Version 1.69. Tagged as 'BASIC-1_69'
@
text
@d84 1
a84 1
HMODE:MODE <number>|<string>: set screen mode.MODE <width>,<height>,<bpp>[,<framerate>]:set screen mode.As a function MODE gives the current screen mode.
@


4.5
log
@Assembler/Debugger round trip improvements
Review of opcodes of the form
  OP<c> {#}imm
this summarises the ones the BASIC assembler accepts:
  SVC #imm, SVC imm, SWI imm (Debugger emits SWI imm)
  DBG #imm, DGB imm          (Debugger emits DBG imm)
  SMC #imm, SMC imm, SMI imm (Debugger emits SMI imm)
  HVC #imm, HVC imm          (Debugger emits HVC imm)
  BKPT #imm, BKPT imm        (Debugger emits BKPT imm)
Assembler.s: Add SMI as a synonym for SMC.
CmdHelp: Add all the missing v6/v7 opcodes to the help.
HelpMsgs.s: Split the terse yet huge assembler help (HELP [) into 3 to avoid needing 4k of stack just for the message token lookup.

Version 1.63. Tagged as 'BASIC-1_63'
@
text
@d163 1
a163 1
HASM:Assembly language is contained in [] and assembled at P%. Labels follow '.'.Syntax:SWI|SVC|DBG|HVC|SMC|SMI[<cond>] <expr>BFC[<cond>] <reg>,#<expr>,#<expr>BFI|SBFX|UBFX[<cond>] <reg>,<reg>,#<expr>,#<expr>USAT|SSAT[<cond>] <reg>,#<expr>,<shift>USAT16|SSAT16[<cond>] <reg>,#<expr>,<reg>UXTB|UXTB16|UXTH|UXTAB|UXTAB16|UXTAH|SXTB|SXTB16|SXTH[<cond>] <reg>,<shift>BKPT|UDF <expr>ADC|ADD|AND|BIC|EOR|ORR|RSB|RSC|SBC|SUB[<cond>][S] <reg>,<reg>,<shift>MOV|MVN[<cond>][S] <reg>,<shift>MOV[T|W][<cond> <reg>,#<expr>CMN|CMP|TEQ|TST[<cond>][S|P] <reg>,<shift>CLZ|RBIT|REV|REVSH|REV16[<cond>] <reg>,<reg>QADD[8|16]|QSUB[8|16]|USAD8|USADA8|QDADD|QDSUB[<cond>] <reg>,<reg>,<reg>UADD|UHADD|UQADD|UQSUB|USUB|SADD|SHADD|SSUB|SHSUB<8|16>[<cond>] <reg>,<reg>,<reg>QASX|QSAX|UQASX|UQSAX|SHASX|SHSAX|SSAX|SASX|USAX|UASX|SEL[<cond>] <reg>,<reg>,<reg>MUL[<cond>][S] <reg>,<reg>,<reg>MLA|MLS|UMULL|UMLAL|SMULL|SMLAL[<cond>][S] <reg>,<reg>,<reg>,<reg>UMAAL[<cond>] <reg>,<reg>,<reg>,<reg>SMUL<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>SMLA[L]<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>,<reg>SM<LA[L]|LS[L]|UA|US>D[X][<cond>] <reg>,<reg>,<reg>,<reg>SMM<LA|LS|UL>[R][<cond>] <reg>,<reg>,<reg>,<reg>LDR|STR[<cond>][B|T|BT|SB|SBT|H|HT|SH|SHT|D] <reg>, '[ <reg>[,<shift>] '] [,<shift>][!]LDREX|STREX[B|H|D][<cond>] <reg>, '[ <reg> ']LDM|STM[<cond>]DA|DB|EA|ED|FA|FD|IA|IB <reg>[!],{<reg list>}[^]RFE<DA|DB|EA|ED|FA|FD|IA|IB> <reg>[!]SRS<DA|DB|EA|ED|FA|FD|IA|IB> SP[!],#<expr>SWP[<cond>][B] <reg>,<reg>, '[ <reg> ']PLD[W]|PLI '[ <reg>[,<shift>] ']PKH<BT|TB>[<cond>] <reg>,<reg>,<shift>PUSH|POP[<cond>] <reg list>B[L][<cond>] <label>BLX <label>BX|BLX|BXJ[<cond>] <reg>SDIV|UDIV[<cond>] <reg>,<reg>,<reg>WFE|WFI|SEV|YIELD[<cond>]DMB|DSB|ISB [SY|ST|ISH[ST]|NSH[ST]|OSH[ST]]SETEND <BE|LE>MRC|MCR[<cond>|2] <copro>,<expr>,<reg>,<cpreg>,<cpreg> [,<expr>]MCRR|MRRC[<cond>] <copro>,<expr>,<reg>,<reg>,<cpreg>CDP[<cond>|2] <copro>,<expr>,<cpreg>,<cpreg>,<cpreg> [,<expr>]LDC|STC[<cond>|2][L] <copro>, '[ <reg>[,#<expr>] '] [,#<expr>|{expr}][!]CPS<ID|IE> <iflags[,#<expr>]>CPS #<expr>CLREX|ERETMRS[<cond>] <reg>,<psr>MSR[<cond>] <psr>_[c][x][s][f],<reg>|#<expr>
@


4.4
log
@Extended assembler for ARMv6/v7 instructions
Implemented scalar (non-VFP/NEON) instructions for ARMv6/v7 and a couple of omitted ARMv5 instructions in UAL syntax.
Added documentary comments and minor performance tweaks to some existing code.
Corrected stack imbalance in handling of memory moving when local DIMs in use.
Preliminary test code for assembler instructions.

Version 1.60. Tagged as 'BASIC-1_60'
@
text
@d163 3
a165 1
HASM:Assembly language is contained in [] and assembled at P%. Labels follow '.'.Syntax:SWI|SVC[<cond>] <expr>BFC[<cond>] <reg>,#<expr>,#<expr>BFI[<cond>] <reg>,<reg>,#<expr>,#<expr>BKPT <expr>ADC|ADD|AND|BIC|EOR|ORR|RSB|RSC|SBC|SUB[<cond>][S] <reg>,<reg>,<shift>MOV|MVN[<cond>][S] <reg>,<shift>CMN|CMP|TEQ|TST[<cond>][S|P] <reg>,<shift>CLZ[<cond>] <reg>,<reg>QADD|QSUB|QDADD|QDSUB[<cond>] <reg>,<reg>,<reg>MUL[<cond>][S] <reg>,<reg>,<reg>MLA|UMULL|UMLAL|SMULL|SMLAL[<cond>][S] <reg>,<reg>,<reg>,<reg>SMUL<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>SMLA[L]<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>,<reg>LDR|STR[<cond>][B|T|BT|SB|SBT|H|HT|SH|SHT|D] <reg>, '[ <reg>[,<shift>] '] [,<shift>][!]LDM|STM[<cond>]DA|DB|EA|ED|FA|FD|IA|IB <reg>[!],{<reg list>}[^]SWP[<cond>][B] <reg>,<reg>, '[<reg> ']PLD '[ <reg>[,<shift>] ']B[L][<cond>] <label>BLX <label>B[L]X[<cond>] <reg>SDIV|UDIV[<cond>] <reg>,<reg>,<reg>MRC|MCR[<cond>|2] <copro>,<expr>,<reg>,<cpreg>,<cpreg> [,<expr>]MCRR|MRRC[<cond>] <copro>,<expr>,<reg>,<reg>,<cpreg>CDP[<cond>|2] <copro>,<expr>,<cpreg>,<cpreg>,<cpreg> [,<expr>]LDC|STC[<cond>|2][L] <copro>, '[ <reg>[,#<expr>] '] [,#<expr>|{expr}][!]MRS[<cond>] <reg>,<psr>MSR[<cond>] <psr>_[c][x][s][f],<reg>|#<expr>ADF|MUF|SUF|RSF|DVF|RDF|POW|RPW|RMF|FML|FDV|FRD|POL[<cond>]<prec>[<round>] <fpreg>,<fpreg>,<fpop>MVF|MNF|ABS|RND|SQT|LOG|LGN|EXP|SIN|COS|TAN|ASN|ACS|ATN|URD|NRM[<cond>]<prec>[<round>] <fpreg>,<fpop>FLT[<cond>]<prec>[<round>] <fpreg>,<reg>FIX[<cond>][<round>] <reg>,<fpreg>WFS|RFS|WFC|RFC[<cond>] <reg>CMF|CNF[E][<cond>] <fpreg>,<fpop>LDF|STF[<cond>]<prec> <fpreg>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>] <fpreg>,<expr>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>]EA|FD <fpreg>,<expr>, '[ <reg> '] [!]OPT|=|DCB|EQUB|DCW|EQUW|DCD|EQUD|EQUS <expr>DCF|EQUF<prec> <expr>ADR[<cond>] <reg>,<label>ALIGN|NOPwhere <shift>=<reg>|#<expr>|<reg>,ASL|LSL|LSR|ASR|ROR <reg>|#<expr>|RRXand <cond>=AL|CC|CS|EQ|GE|GT|HI|HS|LE|LS|LT|LO|MI|NE|NV|PL|VC|VSand <reg>=R0 to 15 or SP or LR or PC or <expr>and <copro>=CP0 to 15 or <expr>and <cpreg>=C0 to 15 or <expr>and <fpreg>=F0 to 7 or <expr>and <fpop>=F0 to 7 or #<expr>, where <expr>=0,0.5,1,2,3,4,5 or 10and <prec>=S|D|E|Pand <round>=P|M|Zand <psr>=CPSR|SPSR
@


4.3
log
@Have BASIC manage its own messages
For the standalone case BASIC[64] will now register its own resources into Resources/BASIC/BASIC[64]Msgs.
For the ROM case BASIC[64] will share them in Resources/BASIC/Messages as before.
This ensures that regardless of the order of loading, and the potential that a ROM and standalone version might be mixed, both ends up seeing the messages its expecting to see.
Tested in a ROM build and softloaded on RISC OS 4.02.

Version 1.57. Tagged as 'BASIC-1_57'
@
text
@d163 1
a163 1
HASM:Assembly language is contained in [] and assembled at P%. Labels follow '.'.Syntax:SWI[<cond>] <expr>BKPT <expr>ADC|ADD|AND|BIC|EOR|ORR|RSB|RSC|SBC|SUB[<cond>][S] <reg>,<reg>,<shift>MOV|MVN[<cond>][S] <reg>,<shift>CMN|CMP|TEQ|TST[<cond>][S|P] <reg>,<shift>CLZ[<cond>] <reg>,<reg>QADD|QSUB|QDADD|QDSUB[<cond>] <reg>,<reg>,<reg>MUL[<cond>][S] <reg>,<reg>,<reg>MLA|UMULL|UMLAL|SMULL|SMLAL[<cond>][S] <reg>,<reg>,<reg>,<reg>SMUL<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>SMLA[L]<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>,<reg>LDR|STR[<cond>][B|T|BT|SB|H|SH|D] <reg>, '[ <reg>[,<shift>] '] [,<shift>][!]LDM|STM[<cond>]DA|DB|EA|ED|FA|FD|IA|IB <reg>[!],{<reg list>}[^]SWP[<cond>][B] <reg>,<reg>, '[<reg> ']PLD '[ <reg>[,<shift>] ']B[L][<cond>] <label>BLX <label>B[L]X[<cond>] <reg>MRC|MCR[<cond>|2] <copro>,<expr>,<reg>,<cpreg>,<cpreg> [,<expr>]MCRR|MRRC[<cond>] <copro>,<expr>,<reg>,<reg>,<cpreg>CDP[<cond>|2] <copro>,<expr>,<cpreg>,<cpreg>,<cpreg> [,<expr>]LDC|STC[<cond>|2][L] <copro>, '[ <reg>[,#<expr>] '] [,#<expr>|{expr}][!]MRS[<cond>] <reg>,<psr>MSR[<cond>] <psr>_[c][x][s][f],<reg>|#<expr>ADF|MUF|SUF|RSF|DVF|RDF|POW|RPW|RMF|FML|FDV|FRD|POL[<cond>]<prec>[<round>] <fpreg>,<fpreg>,<fpop>MVF|MNF|ABS|RND|SQT|LOG|LGN|EXP|SIN|COS|TAN|ASN|ACS|ATN|URD|NRM[<cond>]<prec>[<round>] <fpreg>,<fpop>FLT[<cond>]<prec>[<round>] <fpreg>,<reg>FIX[<cond>][<round>] <reg>,<fpreg>WFS|RFS|WFC|RFC[<cond>] <reg>CMF|CNF[E][<cond>] <fpreg>,<fpop>LDF|STF[<cond>]<prec> <fpreg>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>] <fpreg>,<expr>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>]EA|FD <fpreg>,<expr>, '[ <reg> '] [!]OPT|=|DCB|EQUB|DCW|EQUW|DCD|EQUD|EQUS <expr>DCF|EQUF<prec> <expr>ADR[<cond>] <reg>,<label>ALIGN|NOPwhere <shift>=<reg>|#<expr>|<reg>,ASL|LSL|LSR|ASR|ROR <reg>|#<expr>|RRXand <cond>=AL|CC|CS|EQ|GE|GT|HI|HS|LE|LS|LT|LO|MI|NE|NV|PL|VC|VSand <reg>=R0 to 15 or SP or LR or PC or <expr>and <copro>=CP0 to 15 or <expr>and <cpreg>=C0 to 15 or <expr>and <fpreg>=F0 to 7 or <expr>and <fpop>=F0 to 7 or #<expr>, where <expr>=0,0.5,1,2,3,4,5 or 10and <prec>=S|D|E|Pand <round>=P|M|Zand <psr>=CPSR|SPSR
@


4.2
log
@Removed BASICTrans.  Now in a separate directory.
@
text
@d1 1
a1 1

d15 1
a15 1
HCOLOUR:COLOUR a [TINT t]: set text foreground colour [and tint] (background 128+a).COLOUR a,p: set palette entry for logical colour a to physical colour p.COLOUR r,g,b: set colour to r, g, b.COLOUR a,r,g,b: set palette entry for a to r, g, b physical colour.
d34 1
a34 1
HDIM:DIM fred(100,100): create and initialise an array.DIM fred% 100: allocate space for a byte array etc.DIM(fred()): function gives the number of dimensions.DIM(fred(),n): function gives the size of the n'th dimension.
d61 1
a61 1
HGCOL:GCOL a [TINT t]: set graphics foreground colour [and tint] (background 128+a).GCOL <action>,a [TINT t]: set graphics fore|background colour and action.GCOL [<action>,]r,g,b: set colour to r, g, b.
d84 1
a84 1
HMODE:MODE <number>|<string>: set screen mode.As a function MODE gives the current screen mode.
d112 1
a112 1
HQUIT:QUIT: leave the interpreter.As a function QUIT gives TRUE if BASIC was entered with a -quit option.
d148 1
a148 1
HTRACE:TRACE [STEP] ON|OFF|PROC|<number>: trace [in single step mode] on or off or procedure or function calls or lines below the number.TRACE TO <string>: send all output to stream <string>TRACE CLOSE: close stream output. Expression: TRACE gives handle of the stream.
d154 1
a154 1
HVDU:VDU <number>[;|][,<number>[;|]]: list of values to be sent to vdu., only - 8 bits.; 16 bits.| 8 bytes of zeroes.
d163 1
a163 1
HASM:Assembly language is contained in [] and assembled at P%. Labels follow '.'.Syntax:SWI[<cond>] <expr>ADC|ADD|AND|BIC|EOR|ORR|RSB|RSC|SBC|SUB[<cond>][S] <reg>,<reg>,<shift>MOV|MVN[<cond>][S] <reg>,<shift>CMN|CMP|TEQ|TST[<cond>][S|P] <reg>,<shift>MUL[<cond>][S] <reg>,<reg>,<reg>MLA|UMULL|UMLAL|SMULL|SMLAL[<cond>][S] <reg>,<reg>,<reg>,<reg>LDR|STR[<cond>][B|SB|H|SH] <reg>, '[ <reg>[,<shift>] '] [,<shift>][!]LDM|STM[<cond>]DA|DB|EA|ED|FA|FD|IA|IB <reg>[!],{<reg list>}[^]B[L][<cond>] <label>BX[<cond>] <reg>MRC|MCR[<cond>] <copro>,<expr>,<reg>,<cpreg>,<cpreg> [,<expr>]CDP[<cond>] <copro>,<expr>,<cpreg>,<cpreg>,<cpreg> [,<expr>]LDC|STC[<cond>][L] <copro>, '[ <reg>[,#<expr>] '] [,#<expr>][!]SWP[<cond>][B] <reg>,<reg>, '[<reg> ']MRS[<cond>] <reg>,<psr>MSR[<cond>] <psr>_[c][x][s][f],<reg>|#<expr>ADF|MUF|SUF|RSF|DVF|RDF|POW|RPW|RMF|FML|FDV|FRD|POL[<cond>]<prec>[<round>] <fpreg>,<fpreg>,<fpop>MVF|MNF|ABS|RND|SQT|LOG|LGN|EXP|SIN|COS|TAN|ASN|ACS|ATN|URD|NRM[<cond>]<prec>[<round>] <fpreg>,<fpop>FLT[<cond>]<prec>[<round>] <fpreg>,<reg>FIX[<cond>][<round>] <reg>,<fpreg>WFS|RFS|WFC|RFC[<cond>] <reg>CMF|CNF[E][<cond>] <fpreg>,<fpop>LDF|STF[<cond>]<prec> <fpreg>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>] <fpreg>,<expr>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>]EA|FD <fpreg>,<expr>, '[ <reg> '] [!]OPT|=|DCB|EQUB|DCW|EQUW|DCD|EQUD|EQUS <expr>DCF|EQUF<prec> <expr>ADR[<cond>] <reg>,<label>ALIGN|NOPwhere <shift>=<reg>|#<expr>|<reg>,ASL|LSL|LSR|ASR|ROR <reg>|#<expr>|RRXand <cond>=AL|CC|CS|EQ|GE|GT|HI|HS|LE|LS|LT|LO|MI|NE|NV|PL|VC|VSand <reg>=R0 to 15 or LR or PC or <expr>and <copro>=CP0 to 15 or <expr>and <cpreg>=C0 to 15 or <expr>and <fpreg>=F0 to 7 or <expr>and <fpop>=F0 to 7 or #<expr>, where <expr>=0,0.5,1,2,3,4,5 or 10and <prec>=S|D|E|Pand <round>=P|M|Zand <psr>=CPSR|SPSR
@


4.1
log
@ARTtmp branch folded in
@
text
@@


1.1
log
@file CmdHelp was initially added on branch Spinner.
@
text
@d1 170
@


1.1.2.1
log
@Command line messages removed
@
text
@a0 170

HAND:Bitwise logical AND between two integers. Priority 6.
HABS:This function gives the magnitude (absolute value) of a number (<factor>).
HACS:This function gives the arc cosine of a number (<factor>).
HADVAL:This function gives the value of the specified analogue port or buffer.
HASC:This function gives the ASCII code of the first character of a string.
HASN:This function gives the arc sine of a number (<factor>).
HATN:This function gives the arc tangent of a number (<factor>).
HAUTO:This command generates line numbers for typing in a program.AUTO [<base number>[,<step size>]]
HAPPEND:This command appends a file to the program and renumbers the new lines.
HBGET:This function gives the next byte from the specified file: BGET#<channel>.
HBPUT:BPUT#<channel>,<number>: put byte to open file.BPUT#<channel>,<string>[;]: put string to open file, with[out] newline.
HBEATS:BEATS <expression>: set the number of microbeats in a bar.As a function BEATS gives the current number of microbeats.
HBEAT:This function gives the current microbeat number.
HCOLOUR:COLOUR a [TINT t]: set text foreground colour [and tint] (background 128+a).COLOUR a,p: set palette entry for logical colour a to physical colour p.COLOUR r,g,b: set colour to r, g, b.COLOUR a,r,g,b: set palette entry for a to r, g, b physical colour.
HCONST:Introduces a line number reference in internal form.
HCALL:CALL<expression>[,<variable>]^: Call machine code.
HCASE:CASE <expression> OF: start of CASE..WHEN..OTHERWISE..ENDCASE structure.
HCHAIN:Load and run a new Basic program.
HCHR$:This function gives the one character string of the supplied ASCII code.
HCLEAR:Forget all variables.
HCLOSE:CLOSE#<channel>: close specified file.
HCLG:Clear graphics screen.
HCLS:Clear text screen.
HCOS:This function gives the cosine of a number (<factor>).
HCOUNT:This function gives the number of characters PRINTed since the last newline.
HCIRCLE:CIRCLE [FILL] x,y,r: draw circle outline [solid].
HCRUNCH:This command removes specified spaces from the current program.CRUNCH <expression>. The bits in the number mean:0: spaces before statements1: spaces in statements2: REM statements (except first)3: empty statements4: empty lines
HDATA:Introduces line of DATA to be READ. The list of items is separated by commas.LOCAL DATA, RESTORE DATA: save and restore current DATA pointer.
HDEG:This function gives the value in degrees of a number in radians.
HDEF:Define function or procedure: DEF FN|PROC<name>[(<parameter list>)].End function with =<expression>; end procedure with ENDPROC.
HDELETE:This command deletes all lines between the specified numbers.DELETE <start line number>,<end line number>
HDIV:Integer division, rounded towards zero, between two integers. Priority 3.
HDIM:DIM fred(100,100): create and initialise an array.DIM fred% 100: allocate space for a byte array etc.DIM(fred()): function gives the number of dimensions.DIM(fred(),n): function gives the size of the n'th dimension.
HDRAW:DRAW [BY] x,y: graphics draw to [relative by] x,y.
HENDPROC:End of procedure definition.
HEDIT:This command calls the ARM BASIC Editor.
HENDWHILE:End of WHILE structure. See WHILE.
HENDCASE:End of CASE structure at start of line. See CASE.
HENDIF:End of block IF structure at start of line. See IF.
HEND:END: statement marking end of program execution.END=<expression>: alter amount of memory allocated to BASIC.As a function END gives the end address of memory used.
HENVELOPE:ENVELOPE takes 14 numeric parameters separated by commas.
HELSE:Part of the IF..THEN..ELSE structure. If found at the start of line, it is part of the block IF..THEN..ELSE..ENDIF structure.ELSE can also appear in ON .. GOTO|GOSUB|PROC to set the default option.
HEVAL:This function evaluates a string: EVAL("2*X+1").
HERL:This function gives the line number of the last error.
HERROR:Part of ON ERROR; LOCAL ERROR and RESTORE ERROR statements.Cause an error: ERROR [EXT] <number>,<string>.
HEOF:This function gives TRUE if at end of open file; else FALSE: EOF#<channel>.
HEOR:Bitwise logical Exclusive-OR between two integers. Priority 7.
HERR:This function gives the error number of the last error.
HEXP:This function gives the exponential of a number (<factor>).
HEXT:This function gives the length (extent) of an open file: EXT#<channel>.EXT#<channel>=<expression> sets the length of an open file.
HELLIPSE:ELLIPSE [FILL] x,y,maj,min[,angle]: draw ellipse outline [solid].
HFOR:FOR <variable> = <start value> TO <limit value> [STEP <step size>].
HFALSE:This function gives the logical value 'false' i.e. 0.
HFILL:FILL [BY] x,y: flood fill from [relative to] point x,y.
HFN:Call a function with FNfred(x,y): define one with DEF FNfred(a,b).
HGOTO:GOTO <line number>: go to line number.
HGET$:This function gives the next input character as a one character string.GET$#<channel> gives next string from the file.
HGET:This function gives the ASCII value of the next character in the input stream.
HGOSUB:GOSUB <line number>: call subroutine at line number.
HGCOL:GCOL a [TINT t]: set graphics foreground colour [and tint] (background 128+a).GCOL <action>,a [TINT t]: set graphics fore|background colour and action.GCOL [<action>,]r,g,b: set colour to r, g, b.
HHIMEM:This pseudo-variable reads or sets the address of the end of BASIC's memory.
HHELP:This command gives help on usage of the interpreter.
HINPUT:INPUT [LINE]['|TAB|SPC]["display string"][,|;]<variable>: input from user.INPUT#<channel>,<list of variables>: input data from open file.
HIF:Single line if: IF <expression> [THEN] <statements> [ELSE <statements>].Block if: IF <expression> THEN<newline>            <lines>optional: ELSE <lines>must:     ENDIF
HINKEY$:CHR$(INKEY...): see INKEY.
HINKEY:INKEY 0 to 32767: function waits <number> centiseconds to read character.INKEY -255 to -1: function checks specific key for TRUE|FALSE.INKEY -256: function gives operating system number.
HINT:This function gives the nearest integer less than or equal to the number.
HINSTR:INSTR(<string>,<sub string>[,<start position>]) find sub string position.
HINSTALL:This command permanently installs a library: see HELP LIBRARY.
HLIST:This command lists the program:LIST [<line number>][,[<line number>]][IF<pattern>]. list section [if pattern]LISTO <option number>. Bits mean:-0: space before line1: indent structure2: split lines at :3: don't list line number4: list tokens in lower case
HLINE:Draw a line: LINE x1,y1,x2,y2Part of INPUT LINE or LINE INPUT statement.
HLOAD:This command loads a new program.
HLOMEM:This pseudo-variable reads or sets the address of the start of the variables.
HLOCAL:LOCAL <list of variables>: make things private to function or procedure.LOCAL DATA: save DATA pointer on stack.LOCAL ERROR: save error control status on stack.
HLEFT$:LEFT$(<string>,<number>): gives leftmost number of characters from string.LEFT$(<string>): gives leftmost LEN-1 characters.LEFT$(<string variable>[,<count>])=<string>: overwrite characters from start.
HLEN:This function gives the length of a string.
HLET:Optional part of assignment.
HLOG:This function gives the common logarithm (base 10) of a number (<factor>).
HLN:This function gives the natural logarithm (base e) of a number (<factor>).
HLIBRARY:LIBRARY <string>: functions and procedures of the named program can be used.
HLVAR:This command lists all variables in use.
HMID$:MID$(<string>,<position>): gives all of string starting from position.MID$(<string>,<position>,<count>): gives some of string from position.MID$(<string variable>,<position>[,<count>])=<string>: overwrite characters.
HMODE:MODE <number>|<string>: set screen mode.As a function MODE gives the current screen mode.
HMOD:Remainder after integer division between two integers. Priority 3.The MOD function gives the square root of the sum of the squares of all the elements in a numeric array.
HMOVE:MOVE [BY] x,y: graphics move to [relative by] x,y.
HMOUSE:MOUSE x,y,z[,t]: sets x,y to mouse position; z to button state [t to time].MOUSE COLOUR a,r,g,b: set mouse palette entry for a to r, g, b physical colour.MOUSE OFF: turn mouse pointer off.MOUSE ON [a]: sets mouse pointer 1 [or a].MOUSE RECTANGLE x,y,width,height: constrain mouse movement to inside rectangle.MOUSE STEP a[,b]: sets mouse step multiplier to a,a [or a,b].MOUSE TO x,y: positions mouse and pointer at x,y.
HNEXT:NEXT [<variable>[,<variable>]^]: closes one or several FOR..NEXT structures.
HNEW:This command erases the current program.
HNOT:This function gives the number with all bits inverted (0 and 1 exchanged).
HOLD:This command recovers the program just after a NEW.
HON:ON: cursor on.ON ERROR [LOCAL|OFF]: define error handler.ON <expression> GOTO|GOSUB|PROC.... ELSE: call from specified list item.
HOFF:OFF: turn cursor off.Part of TRACE OFF, ON ERROR OFF statements.
HOF:Part of the CASE <expression> OF statement.
HORIGIN:ORIGIN x,y: sets x,y as the new graphics 0,0 point.
HOR:Bitwise logical OR between two integers. Priority 7.
HOPENIN:Open for Input: the function opens a file for input.
HOPENOUT:Open for Output: the function opens a file for output.
HOPENUP:Open for Update: the function opens a file for input and output.
HOSCLI:OSCLI <string>: give string to Operating System Command Line Interpreter.
HOTHERWISE:Identifies case exceptional section at start of line. See CASE.
HOVERLAY:OVERLAY <string array>: set an array of filenames for overlay libraries.
HPRINT:PRINT ['|TAB|SPC]["display string"][<expression>][;] print items in fields defined by @@% - see HELP @@%PRINT#<channel>,<list of expressions>: print data to open file.
HPAGE:This pseudo-variable reads or sets the address of the start of the program.
HPTR:This function gives the position in a file: PTR#<channel>.PTR#<channel>=<expression> sets the position in a file.
HPI:This function gives the value of 'pi' 3.1415926535.
HPLOT:PLOT n,x,y: graphics operation n.
HPOINT:POINT [BY] x,y: set pixel at [relative to] x,y.POINT TO x,y: position pointer at x,y if not linked to mouse.
HPOINTPAR:POINT(x,y) gives the logical colour of a graphics point.
HPROC:Call a procedure with PROCfred(x,y); define one with DEF PROCfred(a,b).
HPOS:This function gives the x-coordinate of the text cursor.
HQUIT:QUIT: leave the interpreter.As a function QUIT gives TRUE if BASIC was entered with a -quit option.
HRETURN:End of subroutine.
HREPEAT:REPEAT: start of REPEAT..UNTIL structure; statement delimiter not required.
HREPORT:REPORT: print last error message.REPORT$ function gives string of last error string.
HREAD:READ <list of variables>: read the variables in turn from DATA statements.
HREM:Ignores rest of line.
HRUN:Clear variables and start execution at beginning of program.
HRAD:This function gives the value in radians of a number in degrees.
HRESTORE:RESTORE [+][<number>]: restore the data pointer to first or given line, or move forward <number> lines from the start of the next line.RESTORE DATA: restore DATA pointer from stack.RESTORE ERROR: restore error control status from stack.
HRIGHT$:RIGHT$(<string>,<number>): gives rightmost number of characters from string.RIGHT$(<string>): gives rightmost character.RIGHT$(<string variable>[,<count>])=<string>: overwrite characters at end.
HRND:RND: function gives a random integer.RND(n) where n<0: initialise random number generator based on n.RND(0): last RND(1) value.RND(1): random real 0..1.RND(n) where n>1: random value between 1 and INT(n).
HRECTANGLE:RECTANGLE [FILL] xlo,ylo,width[,height] [TO xlo,ylo]:Draw a rectangle outline [solid] or copy [move] the rectangle.
HRENUMBER:This command renumbers the lines in the program:RENUMBER [<base number>[,<step size>]]
HSTEP:Part of the FOR..TO..STEP structure.
HSAVE:This command saves the current program.
HSGN:This function gives the values -1, 0, 1 for negative, zero, positive numbers.
HSIN:This function gives the sine of a number (<factor>).
HSQR:This function gives the square root of a number (<factor>).
HSOUND:SOUND <channel>,<amplitude>,<pitch>,<duration>[,<start beat>]: make a sound.SOUND ON|OFF: enable|disable sounds.
HSPC:In PRINT or INPUT statements, prints out n spaces: PRINT SPC(10).
HSTR$:STR$[~]<number>: gives string representation [in hex] of a number (<factor>).
HSTRING$:STRING$(<number>,<string>): gives string replicated the number of times.
HSTOP:Stop program.
HSTEREO:STEREO <channel>,<position>: set the stereo position for a channel.
HSUM:This function gives the sum of all elements in an array.SUMLEN gives the total length of all elements of a string array.
HSWAP:SWAP <variable>,<variable>: exchange the contents.
HSYS:The SYS statement calls the operating system:SYS <expression> [,<expression>]^ [TO <variable>[,<variable>]^[;<variable>]]
HTAN:This function gives the tangent of a number (<factor>).
HTAB:In PRINT or INPUT statements:TAB to column n: PRINT TAB(10)s$.TAB to screen position x,y: PRINT TAB(10,20)s$.
HTEMPO:TEMPO <expression>: set the sound microbeat tempo.As a function TEMPO gives the current microbeat tempo.
HTEXTLOAD:This command loads a new program, converting from text form if required.
HTEXTSAVE:This command saves the current program as text [with a LISTO option].TEXTSAVE[O <expression>,] <string>
HTHEN:Part of the IF..THEN structure. If THEN is followed by a newline it introduces a block structured IF..THEN..ELSE..ENDIF.
HTIME:This pseudo-variable reads or sets the computational real time clock. TIME$ reads or sets the display version of the clock.
HTINT:TINT a,t: set the tint for COLOUR|GCOL|fore|back a to t in 256 colour modes.Also available as a suffix to GCOL and COLOUR.As a function TINT(x,y) gives the tint of a point in 256 colour modes.
HTO:TO: part of FOR..TO..TOP: gives the address of the end of the program.
HTRACE:TRACE [STEP] ON|OFF|PROC|<number>: trace [in single step mode] on or off or procedure or function calls or lines below the number.TRACE TO <string>: send all output to stream <string>TRACE CLOSE: close stream output. Expression: TRACE gives handle of the stream.
HTRUE:This function gives the logical value 'true' i.e. -1.
HTWINO:This command converts the program to text with a LIST option and calls Twin.
HTWIN:This command converts the program to text and calls Twin.
HUNTIL:UNTIL <expression>: end of REPEAT..UNTIL structure.
HUSR:This function gives the value returned by a machine code routine.
HVDU:VDU <number>[;|][,<number>[;|]]: list of values to be sent to vdu., only - 8 bits.; 16 bits.| 8 bytes of zeroes.
HVAL:This function gives the numeric value of a textual string e.g. VAL"23".
HVPOS:This function gives the y-coordinate of the text cursor.
HVOICES:VOICES <expression>: set the number of sound voice channels.
HVOICE:VOICE <channel>,<string>: assign a named sound algorithm to the voice channel.
HWHILE:WHILE <expression>: start of WHILE..ENDWHILE structure.
HWHEN:WHEN <expression>[,<expression>]^: identifies case section at start of line.See CASE.
HWAIT:Wait for vertical sync.
HWIDTH:WIDTH <expression>: set width of output.
HASM:Assembly language is contained in [] and assembled at P%. Labels follow '.'.Syntax:SWI[<cond>] <expr>ADC|ADD|AND|BIC|EOR|ORR|RSB|RSC|SBC|SUB[<cond>][S] <reg>,<reg>,<shift>MOV|MVN[<cond>][S] <reg>,<shift>CMN|CMP|TEQ|TST[<cond>][S|P] <reg>,<shift>MLA[<cond>][S] <reg>,<reg>,<reg>,<reg>MUL[<cond>][S] <reg>,<reg>,<reg>LDR|STR[<cond>][B] <reg>, '[ <reg>[,<shift>] '] [,<shift>][!]LDM|STM[<cond>]DA|DB|EA|ED|FA|FD|IA|IB <reg>[!],{<reg list>}[^]B[L][<cond>] <label>OPT|=|DCB|EQUB|DCW|EQUW|DCD|EQUD|EQUS <expr>ADR[<cond>] <reg>,<label>ALIGNwhere <shift>=<reg>|#<expr>|<reg>,ASL|LSL|LSR|ASR|ROR <reg>|#<expr>|RRXand <cond>=AL|CC|CS|EQ|GE|GT|HI|HS|LE|LS|LT|LO|MI|NE|NV|PL|VC|VSand <reg>=R0 to 15 or PC or <expr>
H0:Help can do: 'HELP .' or 'HELP A' to print the names of keywords;'HELP PRINT' for help on any particular keyword and 'HELP [' for assembler.
H1:Possible keywords:
H@@:This pseudo-variable reads or sets the number print format:PRINT @@% gives a number, but LVAR and @@%= use strings"G<number>.<number>" general format field and number of digits"E<number>.<number>" exponent format field and number of digits"F<number>.<number>" fixed format field and number of digits after '.'All parts optional. , or . in the above prints , or . as the decimal point.Leading + means @@% applies to STR$ also.

#{Token0=BASIC}
HBASBAS:BASIC is the ARM BBC BASIC interpreter. 
SBASBAS:Syntax: *BASIC [-help|-chain|-load|-quit] <filename> 
@


1.1.2.1.2.1
log
@StrongARM changes pulled in from RO_3_70 branch.
Some minor help mistakes fixed.
Assembler extended to cover complete ARM Architecture v4 and FPA instruction
set.
@
text
@d65 1
a65 1
HIF:Single line if: IF <expression> [THEN] <statements> [ELSE <statements>].Block if: IF <expression> THEN<newline><lines>optional: ELSE <lines>must:ENDIF
d163 1
a163 1
HASM:Assembly language is contained in [] and assembled at P%. Labels follow '.'.Syntax:SWI[<cond>] <expr>ADC|ADD|AND|BIC|EOR|ORR|RSB|RSC|SBC|SUB[<cond>][S] <reg>,<reg>,<shift>MOV|MVN[<cond>][S] <reg>,<shift>CMN|CMP|TEQ|TST[<cond>][S|P] <reg>,<shift>MUL[<cond>][S] <reg>,<reg>,<reg>MLA|UMULL|UMLAL|SMULL|SMLAL[<cond>][S] <reg>,<reg>,<reg>,<reg>LDR|STR[<cond>][B|SB|H|SH] <reg>, '[ <reg>[,<shift>] '] [,<shift>][!]LDM|STM[<cond>]DA|DB|EA|ED|FA|FD|IA|IB <reg>[!],{<reg list>}[^]B[L][<cond>] <label>BX[<cond>] <reg>MRC|MCR[<cond>] <copro>,<expr>,<reg>,<cpreg>,<cpreg> [,<expr>]CDP[<cond>] <copro>,<expr>,<cpreg>,<cpreg>,<cpreg> [,<expr>]LDC|STC[<cond>][L] <copro>, '[ <reg>[,#<expr>] '] [,#<expr>][!]SWP[<cond>][B] <reg>,<reg>, '[<reg> ']MRS[<cond>] <reg>,<psr>MSR[<cond>] <psr>_[c][x][s][f],<reg>|#<expr>ADF|MUF|SUF|RSF|DVF|RDF|POW|RPW|RMF|FML|FDV|FRD|POL[<cond>]<prec>[<round>] <fpreg>,<fpreg>,<fpop>MVF|MNF|ABS|RND|SQT|LOG|LGN|EXP|SIN|COS|TAN|ASN|ACS|ATN|URD|NRM[<cond>]<prec>[<round>] <fpreg>,<fpop>FLT[<cond>]<prec>[<round>] <fpreg>,<reg>FIX[<cond>][<round>] <reg>,<fpreg>WFS|RFS|WFC|RFC[<cond>] <reg>CMF|CNF[E][<cond>] <fpreg>,<fpop>LDF|STF[<cond>]<prec> <fpreg>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>] <fpreg>,<expr>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>]EA|FD <fpreg>,<expr>, '[ <reg> '] [!]OPT|=|DCB|EQUB|DCW|EQUW|DCD|EQUD|EQUS <expr>DCF|EQUF<prec> <expr>ADR[<cond>] <reg>,<label>ALIGN|NOPwhere <shift>=<reg>|#<expr>|<reg>,ASL|LSL|LSR|ASR|ROR <reg>|#<expr>|RRXand <cond>=AL|CC|CS|EQ|GE|GT|HI|HS|LE|LS|LT|LO|MI|NE|NV|PL|VC|VSand <reg>=R0 to 15 or LR or PC or <expr>and <copro>=CP0 to 15 or <expr>and <cpreg>=C0 to 15 or <expr>and <fpreg>=F0 to 7 or <expr>and <fpop>=F0 to 7 or #<expr>, where <expr>=0,0.5,1,2,3,4,5 or 10and <prec>=S|D|E|Pand <round>=P|M|Zand <psr>=CPSR|SPSR
@
