head	4.1;
access;
symbols
	BASIC-1_75:4.1
	BASIC-1_74:4.1
	BASIC-1_73:4.1
	BASIC-1_72:4.1
	BASIC-1_71:4.1
	BASIC-1_70:4.1
	BASIC-1_69:4.1
	BASIC-1_68:4.1
	BASIC-1_67:4.1
	BASIC-1_66:4.1
	BASIC-1_65:4.1
	BASIC-1_64:4.1
	BASIC-1_63:4.1
	BASIC-1_62:4.1
	BASIC-1_61:4.1
	BASIC-1_60:4.1
	BASIC-1_59:4.1
	BASIC-1_58:4.1
	BASIC-1_57-pre4:4.1
	BASIC-1_57:4.1
	BASIC-1_57-pre3:4.1
	BASIC-1_57-pre2:4.1
	BASIC-1_57-pre1:4.1
	BASIC-1_56:4.1
	BASIC-1_55:4.1
	BASIC-1_54:4.1
	BASIC-1_53:4.1
	BASIC-1_52:4.1
	BASIC-1_51:4.1
	BASIC-1_50:4.1
	BASIC-1_49:4.1
	BASIC-1_48:4.1
	BASIC-1_47:4.1
	BASIC-1_46:4.1
	BASIC-1_45:4.1
	BASIC-1_44:4.1
	BASIC-1_43:4.1
	BASIC-1_42:4.1
	BASIC-1_41:4.1
	BASIC-1_40:4.1
	BASIC-1_39:4.1
	BASIC-1_37:4.1
	RO_5_07:4.1
	BASIC-1_36:4.1
	BASIC-1_35:4.1
	BASIC-1_34:4.1
	BASIC-1_33:4.1
	BASIC-1_32:4.1
	BASIC-1_31:4.1
	BASIC-1_30:4.1
	BASIC-1_29:4.1
	BASIC-1_28:4.1
	BASIC-1_27:4.1
	BASIC-1_26:4.1
	BASIC-1_25:4.1
	BASIC-1_24:4.1
	BASIC-1_23:4.1
	BASIC-1_22:4.1
	BASIC-1_21:4.1
	BASIC-1_20:4.1
	BASIC-1_19:4.1
	BASIC-1_18:4.1
	Ursula_merge:4.1
	nturton_BASIC-1_18:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	nicke_BASIC_13-10-98:4.1
	nicke_BASIC_25-9-98:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula:4.1.0.4
	Ursula_bp:4.1
	Spin_merge_7May97:4.1.7.1
	ARTtmp_bp:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.1
date	96.11.05.09.49.59;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.49.59;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.18.46;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.05.08;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.36.36;	author nturton;	state Exp;
branches;
next	;


desc
@@



4.1
log
@Initial revision
@
text
@                            BASICTrans
                            ==========

BASIC will be internationalised by way of a set of new SWIs based at &42C80.
Memory for the translation aspect can be allocated from the RMA if required and
code can be shared between BASIC and BASIC64 (because it ends up inside the
SWI).

[aside: memory inside the SWI call is invulnerable to the task swapping problem
found when BASIC itself attempts to use RMA memory. If two BASIC programs are
being "task manager" swapped between, the swaps do not occur when in SWI mode.]

Functions of the code:

(1) &42C80 "BASICTrans_HELP"

Interpret, translate if required, and print HELP messages:

In:

R0: pointer to lexically analysed HELP text (terminated by 0d)
R1: points to program's name (BASIC or BASIC64)
R2: points to the lexical analyser's tables

Out:

R0: xxx
R1: xxx or 0
R2: xxx

V set if not done or SWI non-existent. If R1 is not zero, then BASIC will
print its own (short) Help text (it is non-zero on entry!).

[In order to share the entirety of the HELP text between BASIC and BASIC64,
this call can be implemented for English and both BASIC and BASIC64 assembled
without their own HELP text. About 15KBytes can be shared like this.]

(2) &42C81 "BASICTrans_Error"

Copy translated error string to buffer

In:

R0: unique error number (0..112 presently)
R1: buffer in which to place the error
    (format: string followed by 0)

Out:

R0: xxx
R1: xxx
R2: xxx
R3: xxx

V set if not done or SWI non-existent.

[In order to share the entirety of the error string text between BASIC and
BASIC64, this call can be implemented for English and both BASIC and BASIC64
assembled without their error messages. About 6KBytes can be shared like this.
Correct error numbers are vital to the functioning of the interpreter and so
are held in BASIC or BASIC64]

(3) &42C82 "BASICTrans_Message"

Translate and print miscellaneous message

In:

R0: unique message number (0..25 presently)
R1: message dependent value
R2: message dependent value
R3: message dependent value

Out:

R0: xxx
R1: xxx

V set if not done or SWI non-existent.

The classic problem of the error handler's " at line " can now be handled as
follows:

TRACE OFF
IF QUIT=TRUE THEN
 ERROR EXT,ERR,REPORT$
ELSE
 RESTORE:!(HIMEM-4)=@@%
 SYS"BASICTrans_Message",42,ERL,REPORT$ TO ;@@%
 IF (@@% AND 1)<>0 THEN
  REPORT:@@%=&900:IF ERL<>0 THEN PRINT" at line "ERL ELSE PRINT
 ENDIF
@@%=!(HIMEM-4)
ENDIF
END

This allows the BASICTrans_Message code to print the string and optional " at
line "ERL information in any order it likes.

[There are not many "miscellaneous" messages, so no great saving is to be had
in providing RISC OS 2.50 with a shared implementation]
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
