head	1.6;
access;
symbols
	BASIC-1_75:1.6
	BASIC-1_74:1.6
	BASIC-1_73:1.6
	BASIC-1_72:1.6
	BASIC-1_71:1.6
	BASIC-1_70:1.6
	BASIC-1_69:1.6
	BASIC-1_68:1.6
	BASIC-1_67:1.6
	BASIC-1_66:1.5
	BASIC-1_65:1.5
	BASIC-1_64:1.5
	BASIC-1_63:1.5
	BASIC-1_62:1.5
	BASIC-1_61:1.5
	BASIC-1_60:1.5
	BASIC-1_59:1.5
	BASIC-1_58:1.5
	BASIC-1_57-pre4:1.4
	BASIC-1_57:1.5
	BASIC-1_57-pre3:1.4
	BASIC-1_57-pre2:1.4
	BASIC-1_57-pre1:1.4
	BASIC-1_56:1.4
	BASIC-1_55:1.4
	BASIC-1_54:1.4
	BASIC-1_53:1.2
	BASIC-1_52:1.2
	BASIC-1_51:1.2
	BASIC-1_50:1.2
	BASIC-1_49:1.1
	BASIC-1_48:1.1
	BASIC-1_47:1.1
	BASIC-1_46:1.1
	BASIC-1_45:1.1
	BASIC-1_44:1.1
	BASIC-1_43:1.1
	BASIC-1_42:1.1
	BASIC-1_41:1.1
	BASIC-1_40:1.1;
locks; strict;
comment	@# @;


1.6
date	2017.06.03.22.30.29;	author jlee;	state Exp;
branches;
next	1.5;
commitid	3Iuze3DCMuQaKYTz;

1.5
date	2013.12.01.18.09.37;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	g83hl4RCFV1Crsfx;

1.4
date	2013.04.26.23.53.31;	author bavison;	state Exp;
branches;
next	1.3;
commitid	mepEMy92GBY6olNw;

1.3
date	2013.04.26.23.46.52;	author bavison;	state Exp;
branches;
next	1.2;
commitid	72Ql4NVxJYJPllNw;

1.2
date	2012.03.07.23.34.23;	author jlee;	state Exp;
branches;
next	1.1;
commitid	mqtCES9yyNSyC0Wv;

1.1
date	2009.04.24.00.27.14;	author srevill;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Add "BASICVFP", a VFP version of BASIC64
Detail:
  See Doc/BASICVFP for overall design/specification
  File changes:
  - !Mk,fd7, !MkClean,fd7, !MkRom,fd7, Makefile - update build scripts to support BASICVFP target
  - Resources/UK/Messages - Add a few new messages
  - hdr/Definitions - Define BASICVFP register usage and a few utility macros
  - hdr/WorkSpace - Define BASICVFP workspace adjustments. Add a few asserts to check some workspace constraints are maintained.
  - s/* - Lots of changes to add support for BASICVFP variant of the module
Admin:
  Tested on Raspberry Pi 1/2/3, BB-xM


Version 1.67. Tagged as 'BASIC-1_67'
@
text
@; Copyright 2009 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;> Workspace

                               TTL     Workspace used by BASIC

VARS                           *       &8700                  ;allocation of the data pointer itself

;allocation relative to vars/ARGP
                               ^       -&700
ERRORS                         #       256
STRACC                         #       256
OUTPUT                         #       512
FREELIST                       #       256                    ;one word for sizes 4..252(3,4,5) bytes
PROCPTR                        #       4
VARPTR                         #       4*("z"+1-"A")          ;arranged s.t. 4*(ch-"@@") is right
FNTEMPLOC                      *       PROCPTR+4*("["-"@@")    ;4 words for the secret use of FN/PROC
                                                              ;these four words must be zero for lvar to work!
                               #       4
FNPTR                          #       4
DATAP                          #       4
TALLY                          #       4
WIDTHLOC                       #       4                      ;immediately before intvar
INTVAR                         #       4*27                   ;-&100 from ARGP
ASSPC                          *       4*("P"-"@@")+INTVAR
PAGE                           #       4                      ;ALWAYS immediately after INTVAR
TOP                            #       4
FSA                            #       4
LOMEM                          #       4
HIMEM                          #       4
ERRNUM                         #       4
ERRORH                         #       4
ERRSTK                         #       4
ERRLIN                         #       4
ESCWORD                        #       4
ESCFLG                         *       ESCWORD
TRCFLG                         *       ESCWORD+1
TRCNUM                         #       4
TRACEFILE                      #       4
LOCALARLIST                    #       4
INSTALLLIST                    #       4
LIBRARYLIST                    #       4
OVERPTR                        #       4                      ;pointer to array of overlay information
MEMLIMIT                       #       4
OLDERR                         #       4*9
SWICODE                        #       8
OS_Exit_ABEX                   *       SWICODE
OS_Exit_RetCode                *       SWICODE+4
DIMLOCAL                       #       4                      ;pointer to head of DIM LOCAL list
SEED                           #       5
LISTOP                         #       1
BYTESM                         #       1                      ;OPT flags
MEMM                           #       1
 [ :DEF: VFPAssembler
VFPTABLES                      #       4                      ;Pointer to assembler lookup tables from ResourceFS
 ]
R12STORE                       #       4                      ;safe place for r12
ERRXLATE                       #       4
 [ FPOINT=2
FREEPTR                        #       4                      ;dynamic FREE value
VFPFLAGS                       #       4
VFPFLAG_Vectors                *       1                      ;VFP short vectors available
VFPFLAG_NEON                   *       2                      ;Integer NEON available
 ]
; <- Insert new bits here
        ASSERT @@+VARS < VARS
CALLEDNAME                     #       0-(@@)             ;needs to be /at least/ one byte for -quit flag
; Note that apart from the first byte (which is used as a Quit flag)
; CALLEDNAME is only really used by TWIN & TWINO commands (now removed).
; It could (should?) probably be changed to 1 byte and renamed QUIT.
        ! 0, "CALLEDNAME size " :CC::STR: ?CALLEDNAME

 [ FPOINT=0
CACHESIZE                      *       128
CACHEMASK                      *       2_11111110
CACHESHIFT                     *       3
CACHECHECK                     *       4*2                    ;address where check value held
 |
CACHESIZE                      *       256
CACHEMASK                      *       2_11111111
CACHESHIFT                     *       4
CACHECHECK                     *       4*2                    ;address where check value held
 ]

OPT_list                       *       1                      ;Assembler listings enabled
OPT_errors                     *       2                      ;Assembler errors enabled
OPT_asm_to_O                   *       4                      ;Assemble to O%
OPT_check_limit                *       8                      ;Check against memory limit L%
OPT_extended_instrs            *       16                     ;Enable 'extended instructions' (MSR/MRS, LDRH, etc.) - used by ROL versions
OPT_mask                       *       15                     ;Mask of our supported flags (not used in any significant manner?)

VCACHE                         #       CACHESIZE*16
 [ FPOINT=2
VFPCONTEXT                     #       0                      ;VFP context sits here
 |
FREE                           #       0                      ;start of everything else
 ]

; The BASIC reference manual states that the following must be true
; (TRACEFILE exposed via CALL environment information pointer)
        ASSERT TRACEFILE+4 = LOCALARLIST
        ASSERT TRACEFILE+8 = INSTALLLIST
        ASSERT TRACEFILE+12 = LIBRARYLIST
        ASSERT TRACEFILE+16 = OVERPTR

                               END
@


1.5
log
@Have BASIC manage its own messages
For the standalone case BASIC[64] will now register its own resources into Resources/BASIC/BASIC[64]Msgs.
For the ROM case BASIC[64] will share them in Resources/BASIC/Messages as before.
This ensures that regardless of the order of loading, and the potential that a ROM and standalone version might be mixed, both ends up seeing the messages its expecting to see.
Tested in a ROM build and softloaded on RISC OS 4.02.

Version 1.57. Tagged as 'BASIC-1_57'
@
text
@d71 6
d78 1
d83 1
d105 3
d109 8
@


1.4
log
@  Error handling fix, part 4
Detail:
  The commands TWIN and TWINO are redundant, so have been removed and
  now give a 'Mistake' error. The tokenisation has not been changed. CALLEDNAME
  is now redundant, but the first byte is used as a QUIT flag, so it has not
  been changed. BasicTrans was also changed to remove references to TWIN, and
  say 'This command is no longer available'. Fixes line number of error when
  TWIN entered after Fix 1.
Admin:
  Changes by Martin Avison

Version 1.53. Not tagged
@
text
@d30 2
a31 2
;these four words must be zero for lvar to work!
RECPTR                         #       4
d66 1
a66 1
 [ :DEF: VFPAssembler :LAND: :LNOT: standalone
d69 2
a70 1
R12STORE                       #       4          ; safe place for r12
@


1.3
log
@  Error handling fix, part 2
Detail:
  LINE pointer r12 is saved & restored when appropriate.

  R12 must only be restored after a CALL, USR, SYS, *Commands or OSCLI aborts.
  To ensure this, the use of the MEMM flag has been changed slightly.

  Before SYS, *Commands and OSCLI are executed there is already a flag set in
  MEMM of x01, indicating that memory may be movable. This is set back to x00
  after they have successfully completed, and after an error in Stmt2.MSGERR.

  1.  The one test of MEMM (in Basic.MOVEMEMORY) was for equality with x01.
      This has been changed to test only for bit 1, not the whole byte.
  2.  Before SYS, *Commands and OSCLI the MEMM flag is now set to x03 not x01.
  3.  MEMM is now additionally set to x02 before CALLed code (also used by USR)
      and unset afterwards.
  4.  Whenever MEMM bit 1 is set, r12 is saved in R12STOR in the workspace.
  5.  In the error handling code, r12 is restored IF bit 1 is set in MEMM.

  Thus r12 can only be restored when it had just been stored, and there has
  been an error in external code. So these changes should be safe!
Admin:
  Changes by Martin Avison

Version 1.53. Not tagged
@
text
@d72 3
@


1.2
log
@VFP/NEON assembler fixes and improvements
Detail:
  * Reworked to make ROM builds reference VFP/NEON assembler lookup tables held in ResourceFS instead of using local copies held in the module. Saves ~32K of ROM space due to reduced data duplication between BASIC & BASIC64.
  * Replace OPT flag magic numbers with symbols
  * Added support for VFPv4/ASIMDv2 instructions (VFMA/VFMS, VFNMA/VFNMS)
  * Updated DCFD/EQUFD to add support for .VFP and .FPA suffixes, to indicate whether VFP or FPA word order should be used
  * Added DCFH/EQUFH for storing half precision floats (in advanced half precision format)
  * Rework MSG routine to preserve R4-R7, for passing to BASICTrans as message parameters
  * Added a few new error messages (118-123) for the VFP/NEON assembler
  * Enable OWNERRORS option for standalone builds, and set DO32BIT to 0 for 26bit builds
  * Fixed VLDM/VSTM style register lists not working correctly when using commas to list the registers
  * Improved handling of VFP/NEON 8 bit immediate constants:
    - No longer possible to use #I64.<n>, #F32.<n>, #F64.<n> notation to directly specify the 8-bit encoded value for I64/F32/F64 constants, nor to force one instruction to attempt to use a constant in a format that doesn't match the .<dt> instruction suffix
    - Instead, .I64 constants can either be specified as a number (which will be converted to an integer and then zero-extended to 64 bits) or a string (which will be parsed by the 64bit version of OS_ReadUnsigned)
    - .F32 and .F64 constants should now be specified as floating point numbers which will then be correctly converted to the 8 bit encoding
    - .F32 and .F64 constants which can't be converted will result in a error message indicating the closest possible floating point number that can be encoded (but not necessarily the closest number that can be encoded; e.g. when assembling NEON instructions the assembler can automatically make use of .I32 encoding formats for some numbers)
  * Fixed instructions that have an 'imn' field (e.g. VSHR immediate) being incorrectly assembled
  * VFPLib.GenData & VFPLib.VFPLib now stored as text instead of tokenised BASIC
  Files changed:
  * Makefile, VFPLib.GenData, VFPLib.VFPLib, hdr.VFPMacros, hdr.Workspace, s.Assembler, s.Basic, s.ErrorMsgs, s.Factor, s.ModHead, s.VFP
Admin:
  Tested as softloaded module & in Iyonix ROM softload
  Requires BASICTrans 2.13 for new error messages to work properly


Version 1.50. Tagged as 'BASIC-1_50'
@
text
@d69 1
@


1.1
log
@Lots of code improvements but no changes to the built binary.

This update replaces lots of hard-wired definitions of things such as SWI
names with the ones from the main exports in the build environment. It
should build a binary-identical module to the previous revision.

Author: Rob Sprowson

Version 1.40. Tagged as 'BASIC-1_40'
@
text
@d64 1
a64 1
BYTESM                         #       1
d66 3
d70 1
a70 1
CALLEDNAME                     #       0-(MEMM+1)             ;needs to be /at least/ one byte for -quit flag
d84 7
@

