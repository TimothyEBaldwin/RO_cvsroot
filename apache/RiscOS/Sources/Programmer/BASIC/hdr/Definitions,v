head	1.5;
access;
symbols
	BASIC-1_75:1.5
	BASIC-1_74:1.5
	BASIC-1_73:1.5
	BASIC-1_72:1.4
	BASIC-1_71:1.4
	BASIC-1_70:1.4
	BASIC-1_69:1.4
	BASIC-1_68:1.4
	BASIC-1_67:1.4
	BASIC-1_66:1.3
	BASIC-1_65:1.3
	BASIC-1_64:1.3
	BASIC-1_63:1.3
	BASIC-1_62:1.3
	BASIC-1_61:1.3
	BASIC-1_60:1.3
	BASIC-1_59:1.3
	BASIC-1_58:1.3
	BASIC-1_57-pre4:1.3
	BASIC-1_57:1.3
	BASIC-1_57-pre3:1.3
	BASIC-1_57-pre2:1.3
	BASIC-1_57-pre1:1.3
	BASIC-1_56:1.2
	BASIC-1_55:1.2
	BASIC-1_54:1.2
	BASIC-1_53:1.2
	BASIC-1_52:1.2
	BASIC-1_51:1.2
	BASIC-1_50:1.2
	BASIC-1_49:1.2
	BASIC-1_48:1.2
	BASIC-1_47:1.2
	BASIC-1_46:1.2
	BASIC-1_45:1.2
	BASIC-1_44:1.2
	BASIC-1_43:1.2
	BASIC-1_42:1.1
	BASIC-1_41:1.1
	BASIC-1_40:1.1;
locks; strict;
comment	@# @;


1.5
date	2017.09.18.21.19.00;	author jlee;	state Exp;
branches;
next	1.4;
commitid	u9VOjCk1jnCuUI7A;

1.4
date	2017.06.03.22.30.28;	author jlee;	state Exp;
branches;
next	1.3;
commitid	3Iuze3DCMuQaKYTz;

1.3
date	2013.12.01.17.23.36;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	iG291GP27DoPasfx;

1.2
date	2009.05.17.02.31.52;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.24.00.27.14;	author srevill;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Adjust VFP error handling
Detail:
  s/ErrorMsgs - Give the VFP "invalid operation" error a more useful error number, and correct the embedded text to match what's in the Resources file. Add VFPExcetion_SQRT, to allow "negative root" errors to be generated by FSQRTD error checks.
  hdr/Definitions - Update FPSCRCheck macro to allow alternate error handlers to be specified
  s/Array, s/Factor - Update FSQRTD error checks to use VFPException_SQRT, so that they say "negative root" instead of "invalid operation"
Admin:
  Tested on Raspberry Pi


Version 1.73. Tagged as 'BASIC-1_73'
@
text
@; Copyright 2009 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;> Definitions

                               TTL     Definitions used by BASIC

; BASIC's stack structure [SP,SP+4,SP+8...]:
;
; GOSUB.RETURN       is TRETURN, ADDR
; REPEAT.UNTIL       is TUNTIL, ADDR
; WHILE.ENDWHILE     is TENDWH, block start ADDR, expr start ADDR
; integer FOR.NEXT   is TNEXT, varaddr, ADDR, step, limit
; fp FOR.NEXT        is TFOR, varaddr, ADDR, step (8), limit (8)
; FN                 is n words on stack, the bottom being TFN
; PROC               is n words on stack, the bottom being TPROC
; LOCAL A(X)         is 256+{4,5,128}, linklist, address, numbytes, arraylist
; LOCAL ERROR        is TERROR, !ERRSTK, !ERRORH
; DIM var LOCAL expr is TDIM, bytes (rounded upto whole multiple of 4), linklist (going up the stack)

; BASIC VCache structure:
;
; variable   IACC, MOVEBY, CHECK, TYPE
; number     IACC, MOVEBY, CHECK, TYPE
; GOTO       R1,   MOVEBY, CHECK
; THENline   R1,         , CHECK
; FN/PROC    IACC, MOVEBY, CHECK, ( or not

 [ FPOINT=0
FACC    RN      R0
FACCX   RN      R1
FGRD    RN      R2
FSIGN   RN      R3
FWACC   RN      R4
FWACCX  RN      R5
FWGRD   RN      R6
FWSIGN  RN      R7
 ELIF FPOINT=1
FACC    FN      0
F1      FN      1
F2      FN      2
F7      FN      7
 ELIF FPOINT=2
FACC    DN      0
 |
        ! 1, "Unknown FPOINT setting"
 ]
IACC    RN      R0                     ;pointer to some data (i.e. a variable's value)
CLEN    RN      R2                     ;actually contains STRACC+CLEN
ARGP    RN      R8                     ;workspace pointer
TYPE    RN      R9                     ;type of a variable/expression
AELINE  RN      R11                    ;pointer to some interesting part of the current line
LINE    RN      R12                    ;pointer to the current position in the program (i.e. for errors)
SOURCE  RN      R1
DEST    RN      R2
MODE    RN      R3
CONSTA  RN      R4                     ;0 for none, tconst for allowed
SMODE   RN      R5

; Types...
TINTEGER                        *      &40000000              ;string TYPE is 0
TFP                             *      &80000000
TEFP                            *      &20000000
 [ FPOINT=0
TFPLV                           *      5
 |
TFPLV                           *      8
 ]

; Macros...

        ;pull and junk n items from stack
        MACRO
$L      PULLJ   $N
$L      ADD     SP,SP,#4*$N
        MEND

        ;allow space for n items from stack
        MACRO
$L      PUSHJ   $N
$L      SUB     SP,SP,#4*$N
        MEND

        ;load misaligned 5-byte value using 2 other registers
        ;and sets Z depending upon whether the value is 0
        ;$DEST1 must be below $DEST2
        MACRO
$L      LOAD5   $DEST1,$DEST2,$ADDR,$W1,$W2
$L
        ASSERT  $DEST1 < $DEST2
    [ NoARMv6 :LOR: NoUnaligned
        ; Mustn't use v6-only features. May or may not need to run on v6 processors.
        ANDS    $W1,$ADDR,#3
      [ SupportARMv6
        BIC     $W2,$ADDR,#3
        LDMIA   $W2,{$DEST1,$DEST2}
      |
        LDMIA   $ADDR,{$DEST1,$DEST2}
      ]
        MOVNE   $W1,$W1,LSL #3
        MOVNE   $DEST1,$DEST1,LSR $W1
        RSBNE   $W2,$W1,#32
        ORRNE   $DEST1,$DEST1,$DEST2,LSL $W2
        MOVNE   $DEST2,$DEST2,LSR $W1
        ANDS    $DEST2,$DEST2,#255
        TEQEQ   $DEST1,#0
    |
        ; OK to use v6-only features
      [ $DEST1 = $ADDR
        LDRB    $DEST2,[$ADDR,#4]
        LDR     $DEST1,[$ADDR]
      |
        LDR     $DEST1,[$ADDR]
        LDRB    $DEST2,[$ADDR,#4]
      ]
        TEQ     $DEST1,#0
        TEQEQ   $DEST2,#0
    ]
        MEND

 [ FPOINT=0
        ;save fp acc to address in TYPE [Format 2 only]
        MACRO
$L      FSTA    $ADDR
$L      ORR     FGRD,FSIGN,FACCX
        STMIA   $ADDR,{FACC,FGRD}
        MEND
        MACRO
$L      FPUSH
$L      ORR     FGRD,FSIGN,FACCX
        STMFD   SP!,{FACC,FGRD}
        MEND
        MACRO
$L      FLDA    $ADDR
$L      LDMIA   $ADDR,{FACC,FACCX}
        AND     FSIGN,FACCX,#&80000000
        AND     FACCX,FACCX,#255
        MEND
 ELIF FPOINT=1
        MACRO
$L      FPUSH
$L      STFD    FACC,[SP,#-8]!
        MEND
 ELIF FPOINT=2
        MACRO
$L      FPUSH
$L      FSTD    FACC,[SP,#-8]!
        MEND

        ; Check for VFP exceptions
        ; Corrupts NZ, $temp
        MACRO
        FPSCRCheck $temp, $dest
        FMRX    $temp,FPSCR
        TST     $temp,#FPSCR_IOC+FPSCR_DZC+FPSCR_OFC
        BNE     VFPException$dest
        MEND

        ;VFP FACC -> FPA F0
        MACRO
        FACCtoFPA$cc
        ASSERT  FACC=0
        FSTS$cc S0,[SP,#-4]!
        FSTS$cc S1,[SP,#-4]!
        LDF$cc.D F0,[SP],#8
        MEND

        ;FPA F0 -> VFP FACC
        MACRO
        FPAtoFACC
        ASSERT  FACC=0
        STFD    F0,[SP,#-8]!
        FLDS    S1,[SP],#4
        FLDS    S0,[SP],#4
        MEND

        MACRO
        FPAop $op
        ! 0, "TODO native $op"
        FACCtoFPA
        $op F0,F0
        FPAtoFACC
        MEND
 |
        ! 1, "Unknown FPOINT setting"
 ]

        ;do an expression
        MACRO
        EXPRCALL
        ADR     R4,AJ7
        BIC     R14,R10,#&FF000000
        ADD     PC,R4,R14,LSL #2
        MEND

                               END
@


1.4
log
@Add "BASICVFP", a VFP version of BASIC64
Detail:
  See Doc/BASICVFP for overall design/specification
  File changes:
  - !Mk,fd7, !MkClean,fd7, !MkRom,fd7, Makefile - update build scripts to support BASICVFP target
  - Resources/UK/Messages - Add a few new messages
  - hdr/Definitions - Define BASICVFP register usage and a few utility macros
  - hdr/WorkSpace - Define BASICVFP workspace adjustments. Add a few asserts to check some workspace constraints are maintained.
  - s/* - Lots of changes to add support for BASICVFP variant of the module
Admin:
  Tested on Raspberry Pi 1/2/3, BB-xM


Version 1.67. Tagged as 'BASIC-1_67'
@
text
@d164 1
a164 1
        FPSCRCheck $temp
d167 1
a167 1
        BNE     VFPException
@


1.3
log
@Redo DO32BIT portions using central macros
When 32 bitted there weren't 26/32 neutral macros around, but can use them now there are allowing one common output binary for disc based BASIC.
Some of the sneaky 26 bit code (eg. relying on address space wrapping at 64MB rather than explicitly clearing bits when computing a jump) adopt the safer 32 bit form even if that does cost 1 extra instruction.
Tagged as BASIC-1_57-pre1
@
text
@d49 1
a49 1
 |
d54 4
d150 1
a150 1
 |
d155 42
@


1.2
log
@  Unaligned load optimisations
Detail:
  * Uses global LDW macro instead of locally-defined LOAD macro (or longhand
    implementations)
  * Some other cases of unaligned loads for v6+ added in places that didn't
    lend themselves to the LDW macro
  * 5-byte (FP) load operation now macroised - the macro skips the unnecessary
    BIC when assembling only for pre-v6 CPUs, or uses unaligned loads for
    v6+ CPUs (unless NoUnaligned global flag is set)
Admin:
  Tested on a rev B7 beagleboard.

Version 1.43. Tagged as 'BASIC-1_43'
@
text
@a156 1
 [ DO32BIT = 1
a158 3
 |
        ADD     PC,R4,R10,LSL #2
 ]
@


1.1
log
@Lots of code improvements but no changes to the built binary.

This update replaces lots of hard-wired definitions of things such as SWI
names with the ones from the main exports in the build environment. It
should build a binary-identical module to the previous revision.

Author: Rob Sprowson

Version 1.40. Tagged as 'BASIC-1_40'
@
text
@d91 35
a125 11
        ;load misaligned word using 2 other registers $DEST MUST BE < $W2
        ;$DEST may be $ADDR
        MACRO
$L      LOAD    $DEST,$ADDR,$W1,$W2
$L      BIC     $W2,$ADDR,#3
        AND     $W1,$ADDR,#3
        LDMIA   $W2,{$DEST,$W2}
        MOVS    $W1,$W1,LSL #3
        MOVNE   $DEST,$DEST,LSR $W1
        RSBNE   $W1,$W1,#32
        ORRNE   $DEST,$DEST,$W2,LSL $W1
@

