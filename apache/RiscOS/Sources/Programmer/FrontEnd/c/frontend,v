head	1.9;
access;
symbols
	FrontEnd-1_34:1.9
	FrontEnd-1_33:1.9
	FrontEnd-1_32:1.8
	FrontEnd-1_31:1.8
	FrontEnd-1_30-2:1.8
	FrontEnd-1_30:1.8
	FrontEnd-1_29:1.8
	FrontEnd-1_28:1.7
	FrontEnd-1_27:1.6
	FrontEnd-1_26:1.6
	FrontEnd-1_25:1.6
	FrontEnd-1_24:1.6
	FrontEnd-1_23:1.5
	FrontEnd-1_22:1.5
	FrontEnd-1_21:1.4
	FrontEnd-1_20:1.4
	FrontEnd-1_19:1.4
	FrontEnd-1_18:1.3
	FrontEnd-1_17:1.2
	FrontEnd-1_16:1.2
	FrontEnd-Aquarius-1_16:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2015.08.01.09.11.58;	author rsprowson;	state Exp;
branches;
next	1.8;
commitid	BuHD1AiFr85xVxvy;

1.8
date	2006.03.13.17.32.17;	author ahodgkin;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.17.16.02.01;	author kbracey;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.01.12.53.44;	author ahodgkin;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.11.15.37.34;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.13.14.50.55;	author sbrodie;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.12.14.14.51;	author sbrodie;	state Exp;
branches;
next	1.2;

1.2
date	99.03.18.12.38.46;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	99.03.18.10.30.26;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.03.18.10.30.26;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Makefile amendment
Use CUSTOMRES=no to denote no resources.
Get the service call numbers from the Services.h.
Get the image base from AsmUtils.

Version 1.33. Tagged as 'FrontEnd-1_33'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   FrontEnd.c
 * Purpose: generalised front end module
 * Author:  IDJ
 * History: 06-Apr-90: IDJ: created
 *          27-Jun-90: IDJ: added check for already loaded app.
 *          06-Jul-90: IDJ: added SWI FrontEnd_ExtendedCmdLine
 *          26-Sep-90: IDJ: integrated with !Make (*FrontEnd_SetUp)
 *          09-Oct-90: IDJ: moved long cmdline stuff to CLIUtils.
 *          04-Mar-91: IDJ: added choices filename parameter to FrontEnd_SetUp
 *
 *          Re-release started (31-Oct-91 IDJ)
 *          31-Oct-91: IDJ: initialise filetype to -1 to avoid owning type 0 (bug DDE-0815)
 *
 *          11-May-01: ADH: added application.tab_width default setting (of 1)
 *          01-Jun-01: ADH: won't die if currently in use
 *
 */

#include <stdio.h>
#include "kernel.h"
#include "swis.h"
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "Global/Services.h"
#include "AsmUtils/rminfo.h"

#include "wimpt.h"
#include "win.h"
#include "event.h"
#include "wimp.h"
#include "werr.h"
#include "baricon.h"
#include "resspr.h"
#include "res.h"
#include "visdelay.h"
#include "msgs.h"

#include "global.h"
#include "types.h"
#include "FrontEnd.h"
#include "parser.h"
#include "gen.h"
#include "FEiconbar.h"
#include "FEexit.h"
#include "FEinit.h"
#include "FEmem.h"
#include "FEoptions.h"
#include "FEdbox.h"
#include "FEcmdline.h"
#include "utils.h"
#include "FEinterr.h"

#include "DDEswis.h"

#define MAXNAME          32
#define BUFLEN          256
#define APPNAM_LEN       13

#define OSModuleReason_Enter          2
#define OSModuleReason_Delete         4
#define OSModuleReason_Claim          6
#define OSModuleReason_Free           7
#define OSModuleReason_ExtractInfo   12
#define OSModuleReason_NewInstant    14
#define OSModuleReason_MakePreferred 16
#define OSModuleReason_LookUp        18

/* --- exported data --- */
Frontend_application application;
int                  task_id = -1;
int                  app_handle = -1;
char make_choicesname[MAXFILENAME];
char app_name[APPNAM_LEN];

/* --- functions exported to cmhg description --- */
extern _kernel_oserror *FrontEnd_init(char *cmd_tail, int podule_base, void *pw);
extern _kernel_oserror *FrontEnd_final(char *cmd_tail, int podule_base, void *pw);
extern void FrontEnd_services(int service_number, _kernel_swi_regs *r, void *pw);
extern _kernel_oserror *FrontEnd_commands(char *arg_string, int argc, int cmd_no, void *pw);
extern _kernel_oserror *FrontEnd_SWI_handler(int swi_no, _kernel_swi_regs *r, void *pw);


/* ++++++++++++++++++++++++++++++++ initialisation code +++++++++++++++++++++++++++++++ */

/* >>>>>>>>>>>> MODE == SVC <<<<<<<<< */

#pragma no_check_stack

extern _kernel_oserror *FrontEnd_init(char *cmd_tail, int podule_base, void *pw)
{
   IGNORE(cmd_tail);
   IGNORE(podule_base);
   IGNORE(pw);
   return NULL;
}

extern _kernel_oserror *FrontEnd_final(char *cmd_tail, int podule_base, void *pw)
{
   static _kernel_oserror e;

   IGNORE(cmd_tail);
   IGNORE(podule_base);
   IGNORE(pw);

   if ((application.flags & AF_I_AM_ACTIVE) != 0)
   {
      char * mesc = e.errmess;
      char * mesg = "You must quit all FrontEnd applications before you can kill the FrontEnd module";

      while (*mesg != '\0') *(mesc++) = *(mesg++); /* Not strcpy/memcpy/sprintf */
      *mesc = '\0';

      return &e;
   }

   return NULL;
}

#pragma check_stack

/* +++++++++++++++++++++++++++++++++++ start code +++++++++++++++++++++++++++++++++++++ */

/* NOTE: processor is in USR mode here, so malloc gives us memory from app.
         workspace.
         main() is entered when we do a Module_Enter following a star command
         DANGER: this is when Clib initialisation happens. Beware init. code!!
                 It will write over things like statics, of course
*/

/* >>>>>>>>>> MODE == USR <<<<<<<<<<<<< */

#pragma check_stack

static void FrontEnd__initapp(void)
{
   application.name = 0;
   application.command = 0;
   application.version = "0.00";
   application.filetype = -1;       /* IDJ 31-Oct-91: bug-fix to DDE-0815 */
   application.wimpslot = 640;
   application.dft_output_name = 0;
   application.flags = AF_I_AM_ACTIVE;
   application.tab_width = 1;
   application.setup = 0;
   application.ordering = 0;
   application.make_ordering = 0;
}


/* argv[1] holds the application name */
/* argv[2] holds description filename */
/* argv[3] may hold input filename after double-click
           OR  task handle if invoked via *FrontEnd_Setup */
/* argv[4] will hold app. specific handle if invoked via *FrontEnd_Setup */
/* argv[5] will hold full pathname of toolflags file if invoked by make */

int main(int argc, char *argv[])
{
   char pling_name[MAXNAME+1] = "!";

   /* --- check we haven't been started by a double-click on the module --- */
   if (argc <= 1)
      exit(EXIT_FAILURE);


   /* --- stash app. name so we can clean up the module instantiation --- */
   strcpy(app_name, argv[1]);

   /* --- set up an exit handler (to ensure module dies when we exit!!) --- */
   /* this must be installed first to ensure it is called last! */
   atexit(FEexit_die);

   /* --- now parse the description --- */
   FrontEnd__initapp();
   visdelay_begin();
   parser_readdescription(argv[2]);
   visdelay_end();

   /* --- make sure app. name and parameter to *FrontEnd_Start/Setup same --- */
   /* --- or we'll have problems cleaning up module instantiations        --- */
   if ((application.name != 0) && cistrcmp(application.name, argv[1]))
   {
      printf("Application name in description file inconsistent with star command");
      exit(EXIT_FAILURE);
   }

   /* --- start up as a wimp task --- */
   /* we must decide here whether we have been invoked by double-clicking
      the app., or double-clicking a file type we understand, or invoked
      via *FrontEnd_setup.
      This is decided by the number of arguments passed to main!!!
   */

   switch (argc)
   {
      case 3:
      case 4:   /* either double-click on app (3 args) or on file of our type (4 args) */
         {
            char choices_file[MAXFILENAME];

            strcat(pling_name, application.name);
            FEinitialise(pling_name);

            /* --- and set up saved options --- */
            visdelay_begin();
            res_findname("!Choices", choices_file);
            FEoptions_readchoices(choices_file);
            visdelay_end();

            if (argc == 4)
            {
               if (!(application.flags & AF_AUTORUN))
               {
                   FEdbox_show();
                   do_inserts(ICONBAR_ICON, argv[3], 0, TRUE);
               }
               else
                   do_inserts(ICONBAR_ICON, argv[3], 0, FALSE);
               if (application.flags & AF_AUTORUN)
                  FEcmdline_run();
            }

            /* --- set up an exit handler (to ensure tasks killed when we exit!!) --- */
            atexit(FEexit_killtasks);

            /* --- set up exit handler to ensure no tmp files left around --- */
            atexit(FEexit_delete_all_tmpfiles);

         }
         break;

      case 6:   /* this means we have been invoked via *FrontEnd_Setup from !Make */
         {
            char choices_file[MAXFILENAME];

            /* --- startup task and show dbox --- */
            application.flags |= AF_MAKE;
            strcat(pling_name, application.name);
            task_id = atoi(argv[3]);
            app_handle = atoi(argv[4]);
            FEinitialise(pling_name);

            /* --- see if project's toolflags need reading (and remember for writing) --- */
            visdelay_begin();
            strncpy(choices_file, argv[5], MAXFILENAME-1);
            FEoptions_readchoices(choices_file);
            strncpy(make_choicesname, choices_file, MAXFILENAME-1);
            visdelay_end();
         }
         break;

      default:
         break;
   }

   /* --- loop the loop --- */
   while(TRUE)
      event_process();

   return 0;
}


/* +++++++++++++++++++++++++++++++++ service handler code ++++++++++++++++++++++++++++++ */

/* >>>>>>>>>>> MODE == SVC <<<<<<<<<<<<<< */

#pragma no_check_stack

extern void FrontEnd_services(int service_number, _kernel_swi_regs *r, void *pw)
{
   IGNORE(pw);
   /* keep application workspace (r2 holds CAO pointer) */
   if (service_number == Service_Memory && r->r[2] == (int)Image_RO_Base)
   {
      r->r[1] = 0;  /* hide from wimp */
   }

#if FALSE
   else if (service_number == Service_Reset)
   {
      _kernel_swi_regs rr;
      char modname[64];
      int instant = 0, mod = 0, pref_instant;

      /* make base the preferred instantiation so we can kill others */
      rr.r[0] = OSModuleReason_MakePreferred;
      rr.r[1] = (int)"FrontEnd%Base";
      _kernel_swi(OS_Module, &rr, &rr);

      /* find our module number */
      rr.r[0] = OSModuleReason_LookUp;
      rr.r[1] = (int)"FrontEnd%Base";
      _kernel_swi(OS_Module, &rr, &rr);
      mod = rr.r[1];
      pref_instant = rr.r[2];

      /* kill instants one by one */
      do
      {
         rr.r[0] = OSModuleReason_ExtractInfo;
         rr.r[1] = mod;
         rr.r[2] = instant;
         _kernel_swi(OS_Module, &rr, &rr);
         if (rr.r[2] == 0) break;
         instant = rr.r[2];

         /* now r5 holds instant postfix */
         if (instant != pref_instant)
         {
            rr.r[0] = '.'; _kernel_swi(OS_WriteC, &rr, &rr);
         }
      } while (TRUE);

   }
#endif
}

#pragma check_stack

/* +++++++++++++++++++++++++++++++++++++ star commands +++++++++++++++++++++++++++++++++ */

/* >>>>>>>>>>>>>> MODE == SVC <<<<<<<<<<<<<< */

#pragma no_check_stack

static _kernel_oserror *FrontEnd_start(char *arg_string)
{
   _kernel_swi_regs r;
   static char name[MAXNAME] = "FrontEnd%";
   static char argv[BUFLEN];  /* fed to main on module entry */
   char *src, *dst;
   int len;
   union
   {
     struct
     {
        char *app;
        char *desc;
        char *infile;
     } args;
     char chars[BUFLEN];
   } buffer;
   int i;
   _kernel_oserror *e;

   /* --- munge the command line --- */
   r.r[0] = (int) "app/A/K/G,desc/A/K/G,/G";
   r.r[1] = (int) arg_string;
   r.r[2] = (int) &buffer;
   r.r[3] = BUFLEN;
   if ((e = _kernel_swi(OS_ReadArgs, &r, &r)) != 0) return e;

   /* --- create argv[1] to hold app. name --- */
   src = buffer.args.app+2;          /* +2 gets us past length info in buffer */
   dst = argv;
   len = *(buffer.args.app) & 0xff;
   if (len >= APPNAM_LEN)
   {
       _kernel_oserror *err = FEmem_alloc(sizeof(_kernel_oserror));
       err->errnum = 0;
       strcpy(err->errmess, "Application name too long");
       return err;
   }
   i = 0;
   while(i++ < len) *dst++ = *src++;
   *dst++ = ' ';
   *dst = 0;

   /* --- create argv[2] to hold description filename --- */
   src = buffer.args.desc+2;          /* +2 gets us past length info in buffer */
   len = *(buffer.args.desc) & 0xff;
   i = 0;
   while(i++ < len) *dst++ = *src++;
   *dst++ = ' ';
   *dst = 0;

   /* --- create argv[3] to hold optional input filename from dbl-click */
   if (buffer.args.infile != 0)
   {
      src = buffer.args.infile+2;          /* +2 gets us past length info in buffer */
      len = *(buffer.args.infile) & 0xff;
      i = 0;
      while(i++ < len) *dst++ = *src++;
      *dst = 0;
   }

   /* --- create a new instantiation ... --- */
   src = buffer.args.app+2;      /* +2 gets us past length info in buffer */
   dst = name + strlen("FrontEnd%");
   len = *(buffer.args.app) & 0xff;
   i = 0;
   while(i++ < len) *dst++ = *src++;
   *dst = 0;

   r.r[0] = OSModuleReason_LookUp;
   r.r[1] = (int)name;
   r.r[4] = 0;
   _kernel_swi(OS_Module, &r, &r);
   if (r.r[4] != 0  /* private word is there */)
   {
       _kernel_oserror *err = FEmem_alloc(sizeof(_kernel_oserror));
       err->errnum = 0;
       strcpy(err->errmess, "Application already loaded");
       return err;
   }

   r.r[0] = OSModuleReason_NewInstant;
   r.r[1] = (int)name;
   r.r[2] = 0;
   if ((e = _kernel_swi(OS_Module, &r, &r)) != 0) return e;

   /* --- ... and enter it as current app (passing desc. file as argv[1]) --- */
   r.r[0] = OSModuleReason_Enter;
   r.r[1] = (int)name;
   r.r[2] = (int)argv;
   if ((e = _kernel_swi(OS_Module, &r, &r)) != 0) return e;

   return NULL;
}


static _kernel_oserror *FrontEnd_setup(char *arg_string)
{
   _kernel_swi_regs r;
   static char name[MAXNAME] = "FrontEnd%M";
   static char argv[BUFLEN];  /* fed to main on module entry */
   char *src, *dst;
   int len;
   union
   {
     struct
     {
        char *app;
        char *desc;
        char *task;
        char *handle;
        char *toolflags;
     } args;
     char chars[BUFLEN];
   } buffer;
   int i;
   _kernel_oserror *e;

   /* --- munge the command line --- */
   r.r[0] = (int) "app/A/K/G,desc/A/K/G,task/A/K,handle/A/K,toolflags/A/K";
   r.r[1] = (int) arg_string;
   r.r[2] = (int) &buffer;
   r.r[3] = BUFLEN;
   if ((e = _kernel_swi(OS_ReadArgs, &r, &r)) != 0) return e;

   /* --- create argv[1] to hold app. name --- */
   src = buffer.args.app+2;          /* +2 gets us past length info in buffer */
   dst = argv;
   len = *(buffer.args.app) & 0xff;
   i = 0;
   while(i++ < len) *dst++ = *src++;
   *dst++ = ' ';
   *dst = 0;

   /* --- create argv[2] to hold description filename --- */
   src = buffer.args.desc+2;          /* +2 gets us past length info in buffer */
   len = *(buffer.args.desc) & 0xff;
   i = 0;
   while(i++ < len) *dst++ = *src++;
   *dst++ = ' ';
   *dst = 0;

   /* --- create argv[3] to hold task id of caller --- */
   strcat(argv, buffer.args.task);
   strcat(argv, " ");

   /* --- create argv[4] to hold app. specific handle --- */
   strcat(argv, buffer.args.handle);
   strcat(argv, " ");

   /* --- create argv[5] to hold toolflags filename --- */
   strcat(argv, buffer.args.toolflags);

   /* --- create a new instantiation ... --- */
   src = buffer.args.app+2;      /* +2 gets us past length info in buffer */
   dst = name + strlen("FrontEnd%M");
   len = *(buffer.args.app) & 0xff;
   i = 0;
   while(i++ < len) *dst++ = *src++;
   *dst = 0;

   r.r[0] = OSModuleReason_LookUp;
   r.r[1] = (int)name;
   r.r[4] = 0;
   _kernel_swi(OS_Module, &r, &r);
   if (r.r[4] != 0  /* private word is there */)
   {
       _kernel_oserror *err = FEmem_alloc(sizeof(_kernel_oserror));
       err->errnum = 0;
       strcpy(err->errmess, "Application already loaded");
       return err;
   }

   r.r[0] = OSModuleReason_NewInstant;
   r.r[1] = (int)name;
   r.r[2] = 0;
   if ((e = _kernel_swi(OS_Module, &r, &r)) != 0) return e;

   /* --- ... and enter it as current app (passing argv) --- */
   r.r[0] = OSModuleReason_Enter;
   r.r[1] = (int)name;
   r.r[2] = (int)argv;
   if ((e = _kernel_swi(OS_Module, &r, &r)) != 0) return e;

   return NULL;
}


extern _kernel_oserror *FrontEnd_commands(char *arg_string, int argc, int cmd_no, void *pw)
{
   IGNORE(argc);
   IGNORE(pw);
   switch (cmd_no)
   {
      case 0:   /* *FrontEnd_Start -app <appname> -desc <filename> */
        {
           return FrontEnd_start(arg_string);
        }
        break;

      case 1:   /* *FrontEnd_Setup -app <appname> -desc <filename> -task <task_id> -handle <handle> */
        {
           return FrontEnd_setup(arg_string);
        }
        break;

      default:
        break;
   }

   return NULL;
}

#pragma check_stack

/* ++++++++++++++++++++++++++++++++++++++ SWI code +++++++++++++++++++++++++++++++++++++ */


/* >>>>>>>>>>>> MODE == SVC <<<<<<<<<<<< */

#pragma no_check_stack

extern _kernel_oserror *FrontEnd_SWI_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
   IGNORE(pw);
   IGNORE(r);

   switch(FrontEnd_ChunkBase + swi_no)
   {
      default:
         break;
   }

   return NULL;
}

#pragma check_stack
@


1.8
log
@  Bug fix, bug aversion, compiles.
Detail:
  "Command line too short" error from DDEUtils down to not including space
  for a terminating NUL character fixed. Nasty crashes due to lines being
  exactly 64 characters long averted, but I don't understand the root cause
  of the fault; changing the parser block size to 128 pushes the problem
  further away. Not ideal but time was short. A few instances of static
  structures initialised to "{}" removed; the C99 compiler disliked them.
Admin:
  !MkBrowse FrontEnd application being developed at the time, provoking
  the above faults. Faults no longer show up, FrontEnd behaves as hoped.

Version 1.29. Tagged as 'FrontEnd-1_29'
@
text
@d40 3
a74 3
#define Service_Memory        0x11
#define Service_Reset         0x27
#define Service_WimpCloseDown 0x53
a83 5
/* NOTE: Image__RO_Base is used to get at Image$$RO$$Base (our base address)
         to be compared with the CAO, when the wimp tries to map us out
*/
extern void *Image__RO_Base;

d290 1
a290 1
   if (service_number == Service_Memory && r->r[2] == (int)Image__RO_Base)
@


1.7
log
@Fixed the same FrontEnd%MLinkLinkLink problem as fixed in version 1.19, but
for FrontEnd_Setup this time (ie when called from !Make).

Version 1.28. Tagged as 'FrontEnd-1_28'
@
text
@d90 1
a90 1
Frontend_application application = {};
@


1.6
log
@  Refuses to die if in use.
Detail:
  A new flag in the application structure is set if an application is
  running. Finalisation code checks this flag and if set, raises an
  error, stopping the module from dying. This should prevent anyone
  accidentally loading the module when applications which are using it
  are running.
Admin:
  Tested via. various killing methods (*RMKill at CLI and in a task
  window, reloading the module) whilst applications were and were not
  running. Behaviour followed expectations.

  Beware that FrontEnd 1.23 and earlier do not have this protection in;
  before loading 1.24 at run-time, ensure you have quitted any apps that
  are using it (see instantiations for FrontEnd in the *Modules list).

Version 1.24. Tagged as 'FrontEnd-1_24'
@
text
@d503 1
a503 1
   dst = name + strlen(name);
@


1.5
log
@  Improved redraw strategy; added 'quoted_string' option for icons, plus
  'ctrl_chars' and 'tab_width' for metaoptions.
Detail:
  Previously the redraw engine stayed one line behind current output as it
  did not know where to terminate redraw of the current line. At task exit
  it forced \n\r into the output to flush the last line. Now, the incoming
  data buffer is oversized by 1 byte and a \0 written in to give the redraw
  engine something to stop at. This allows it to redraw the current line,
  meaning e.g. "....[...]" progress indicators and so-on will work. It also
  means the \r\n hack isn't needed so saved output doesn't have a spurious
  blank line.

  For 'icn <n> maps_to ...' you can now say 'quoted_string' where you used
  to say 'string'. This encloses the relevant writable field's text in
  double quotes, escaping any double quotes from the writable with '\'. If
  you use 'prefix_by', all of the prefixes and strings are within the
  double quotes (rather than e.g. enclosing each item individually).

  Previously, control characters were output more or less directly. This
  could cause a crash for some nasty ones (e.g. send output to printer)
  or just cause redraw corruptions and the bell to ring. Now, any control
  characters are replaced with "?" by default, including &7F, except for
  tab (&09), which is replaced with a single space. Behaviour is chosen by
  the "ctrl_chars" metaoption, which takes parameters "text" for the usual
  behaviour as described, "escape" for !Edit-style "[aa]" escaping, or
  "hide" to not draw anything at all (so e.g. put "ctrl_chars escape" in
  your metaoptions section of the Desc file). Another new option is
  "tab_width"; tabs are now understood for all three output types. To
  avoid unduly changing existing output the default tab width is 1, but it
  can be 0 to hide tabs, or up to 32. The limit is arbitrary and only in
  place to stop the redraw engine trying to do silly things if given a
  very large value.

  Finally, lexer.c's list of text items was mirrored in lexer.h by a list
  of numbered items - all done by #define, so you had to manually renumber
  them all! This has been changed to an enum, with compiled output checked
  against the previous version - identical as expected.
Admin:
  Remember, you MUST NOT soft load this if you have any FrontEnd apps
  running already! Either quit them all (check there are no instantiations
  with *Modules) and then run it, or put it in !System and reboot. The new
  features have been tested with a work-in-progress !UpgCreate utility,
  and the usual set of DDE apps run to ensure they don't give any syntax
  errors. GNUDiff and Find tested fairly heavily. Builds ROM and RAM
  variants from clean.


Version 1.22. Tagged as 'FrontEnd-1_22'
@
text
@d29 1
d49 1
d98 1
d118 22
d163 1
a163 1
   application.flags = 0;
@


1.4
log
@  Fixed the FrontEnd%DecAOFDecAOFDecAOF ... problem.
Detail:
  When I made the argument strings static to avoid the problem of arg
    overwriting on the flattened SVC stack, I didn't notice that it relied
    on the re-initialisation of the automatic array to terminate the
    new module name buffer.  This is now fixed.
Admin:
  Tested in desktop build.
  Only affects desktop builds.

Version 1.19. Tagged as 'FrontEnd-1_19'
@
text
@d28 2
d139 1
@


1.3
log
@  Fixed the "spurious blank line" problem.
  Builds completely cleanly now.
Detail:
  The extra blank line problem has been solved.  This was caused by
    multicharacter lineend character sequences (\r\n or \n\r) being
    delivered split across different TaskWindow messages.
Admin:
  Tested by getting DecAOF to disassemble a large file.  No more spurious
    blank lines appeared.

Version 1.18. Tagged as 'FrontEnd-1_18'
@
text
@d383 1
a383 1
   dst = name + strlen(name);
@


1.2
log
@Build structure standardised.
This source set will actually build using the latest RISC_OSlib.
Functionally equivalent to FrontEnd-Aquarius-1_16.
Moved to srccommit.

Tagged as FrontEnd-1_16.
@
text
@d323 2
a324 2
   char name[MAXNAME] = "FrontEnd%";
   char argv[BUFLEN];  /* fed to main on module entry */
d419 2
a420 2
   char name[MAXNAME] = "FrontEnd%M";
   char argv[BUFLEN];  /* fed to main on module entry */
@


1.1
log
@Initial revision
@
text
@d70 1
a70 1
#define Service_WimpCloseDown 0x53 
d89 1
a89 1
char make_choicesname[MAXFILENAME];                
d145 1
a145 1
/* argv[3] may hold input filename after double-click 
d149 1
a149 1
 
d151 1
a151 1
{ 
d158 1
d181 1
a181 1
   /* we must decide here whether we have been invoked by double-clicking 
d205 1
a205 1
               if (!(application.flags & AF_AUTORUN)) 
d249 1
a249 1
   /* --- loop the loop --- */  
d264 1
a264 1
{             
d278 2
a279 2
 
      /* make base the preferred instantiation so we can kill others */    
d290 1
a290 1
     
d295 1
a295 1
         rr.r[1] = mod;        
d307 1
a307 1
      
d361 1
a361 1
   *dst = 0; 
d452 1
a452 1
   *dst = 0; 
d491 1
a491 1
   } 
@


1.1.1.1
log
@  Initial import of FrontEnd module to CVS from Aquarius.
Detail:
  Code claims to build FrontEnd 1.16 (11 Jan 1995), but will not
    build in current build environment.
Admin:
  Does not compile - checked in for reference purposes only.
  Tagged appropriately.  Use tag FrontEnd-1_16 to extract version
    which builds in the current build environment.

Tagged as FrontEnd-Aquarius-1_16


@
text
@@
