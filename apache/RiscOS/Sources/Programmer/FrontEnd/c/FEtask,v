head	1.4;
access;
symbols
	FrontEnd-1_34:1.4
	FrontEnd-1_33:1.4
	FrontEnd-1_32:1.4
	FrontEnd-1_31:1.4
	FrontEnd-1_30-2:1.4
	FrontEnd-1_30:1.4
	FrontEnd-1_29:1.4
	FrontEnd-1_28:1.4
	FrontEnd-1_27:1.4
	FrontEnd-1_26:1.4
	FrontEnd-1_25:1.4
	FrontEnd-1_24:1.4
	FrontEnd-1_23:1.4
	FrontEnd-1_22:1.4
	FrontEnd-1_21:1.3
	FrontEnd-1_20:1.3
	FrontEnd-1_19:1.2
	FrontEnd-1_18:1.2
	FrontEnd-1_17:1.1.1.1
	FrontEnd-1_16:1.1.1.1
	FrontEnd-Aquarius-1_16:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2001.05.11.15.37.34;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.02.15.57.34;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.12.14.14.51;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	99.03.18.10.30.26;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.03.18.10.30.26;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@  Improved redraw strategy; added 'quoted_string' option for icons, plus
  'ctrl_chars' and 'tab_width' for metaoptions.
Detail:
  Previously the redraw engine stayed one line behind current output as it
  did not know where to terminate redraw of the current line. At task exit
  it forced \n\r into the output to flush the last line. Now, the incoming
  data buffer is oversized by 1 byte and a \0 written in to give the redraw
  engine something to stop at. This allows it to redraw the current line,
  meaning e.g. "....[...]" progress indicators and so-on will work. It also
  means the \r\n hack isn't needed so saved output doesn't have a spurious
  blank line.

  For 'icn <n> maps_to ...' you can now say 'quoted_string' where you used
  to say 'string'. This encloses the relevant writable field's text in
  double quotes, escaping any double quotes from the writable with '\'. If
  you use 'prefix_by', all of the prefixes and strings are within the
  double quotes (rather than e.g. enclosing each item individually).

  Previously, control characters were output more or less directly. This
  could cause a crash for some nasty ones (e.g. send output to printer)
  or just cause redraw corruptions and the bell to ring. Now, any control
  characters are replaced with "?" by default, including &7F, except for
  tab (&09), which is replaced with a single space. Behaviour is chosen by
  the "ctrl_chars" metaoption, which takes parameters "text" for the usual
  behaviour as described, "escape" for !Edit-style "[aa]" escaping, or
  "hide" to not draw anything at all (so e.g. put "ctrl_chars escape" in
  your metaoptions section of the Desc file). Another new option is
  "tab_width"; tabs are now understood for all three output types. To
  avoid unduly changing existing output the default tab width is 1, but it
  can be 0 to hide tabs, or up to 32. The limit is arbitrary and only in
  place to stop the redraw engine trying to do silly things if given a
  very large value.

  Finally, lexer.c's list of text items was mirrored in lexer.h by a list
  of numbered items - all done by #define, so you had to manually renumber
  them all! This has been changed to an enum, with compiled output checked
  against the previous version - identical as expected.
Admin:
  Remember, you MUST NOT soft load this if you have any FrontEnd apps
  running already! Either quit them all (check there are no instantiations
  with *Modules) and then run it, or put it in !System and reboot. The new
  features have been tested with a work-in-progress !UpgCreate utility,
  and the usual set of DDE apps run to ensure they don't give any syntax
  errors. GNUDiff and Find tested fairly heavily. Builds ROM and RAM
  variants from clean.


Version 1.22. Tagged as 'FrontEnd-1_22'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   FEtask.c
 * Purpose: running multiple tasks under the task window module
 * Author:  IDJ
 * History: 24-Apr-90: IDJ: created (from srcedit)
 *          26-Jun-90: IDJ: added check for task window module
 *          14-Jan-91: IDJ: mark unsaved output when produced
 *          31-Jan-91: IDJ: check before passing too long cmdline to task window module
 *          12-Feb-91: IDJ: bug-fix to cmdline too long check
 *          04-Apr-91: IDJ: check for no output state created on task creation
 *          11-May-01: ADH: no need to do hacky \n\r output flush on task exit now
 *
 */

/*
 * IDJ: 31-May-90
 * A word of explanation for the uninitiated:
 *     1. When we go: *taskwindow "cmd" -quit -wimpslot <n>K
 *        -task <task_id> -txt <txt_id>, the new task window
 *        module starts us up as a task. Note that task id is
 *        our id (not our child's) and txt id is some pointer
 *        into app. workspace.
 *
 *     2. We first get back the child's wimp task-id in a wimp
 *        message (FEtask_ego).  The first word of data is the
 *        "txt" pointer which we use to identify the appropriate
 *        entry in our list of states.
 *
 *     3. Whenever our child produces VDU output, the task window
 *        module intercepts it, and sends it to us in wimp
 *        messages (FEtask_output). NB first word of data gives length
 *        of output!
 *
 *     4. Since we have said "-quit", as soon as the task window module
 *        stops running the task it exits its CLI state and sends us
 *        a dying message (FEtask_morio).  We thus know when the task
 *        has stopped!
 *
 */


#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "kernel.h"
#include "swis.h"

#include "flex.h"
#include "os.h"
#include "event.h"
#include "werr.h"
#include "wimp.h"
#include "wimpt.h"
#include "win.h"
#include "msgs.h"
#include "dbox.h"

#include "global.h"
#include "types.h"
#include "FrontEnd.h"
#include "slist.h"
#include "bool.h"
#include "FEmem.h"
#include "FEsaveas.h"
#include "FEoutput.h"
#include "FEmsg.h"
#include "utils.h"
#include "FEinterr.h"
#include "DDEswis.h"

#include "FEtask.h"

#define round(i) (((i)+3) & 0xfffffffc)


static Frontend_task *states = NULL;

/* NB 256 is the limit imposed by the task window module/wimp_starttask and co.
      for non-extended cmd-lines we just construct the full line and pass it
      to *taskwindow
      for extended command-lines, we construct a small cmd-line which just invokes
      the tool, which will pick up its argv by going SWI DDEUtils_GetCL
*/


static os_error * FEtask__sendmessage(FEtask_action action, wimp_t dest, FEtask_data * data)
{
   wimp_msgstr msg;

   msg.hdr.your_ref = 0; /* Not ACK */
   msg.hdr.action = (wimp_msgaction) action;
   if (data)
   {
     int size = data->size;
     msg.hdr.size = round(24 + size);
     memcpy(&msg.data, data, 4);
     if (size) memcpy(&msg.data.chars[4], data->data, size);
   } else msg.hdr.size = 20;
   return wimp_sendmessage(wimp_ESEND, &msg, dest);
}


static Frontend_task *findstatefromtask(wimp_t task)
{
   Frontend_task *s = states;

   while (s)
   {
     if (s->child == task) return s;
     s = s->next;
   }
   return NULL;
}


static Frontend_task *findstatefromtxt(Frontend_outputwin *t)
{
   Frontend_task *s = states;

   while (s)
   {
     if (s->output == t) return s;
     s = s->next;
   }
   return NULL;
}


extern os_error *FEtask_sendchar(Frontend_outputwin *t, char c)
{
   Frontend_task *s = findstatefromtxt(t);

   if (s != 0)
   {
      FEtask_data data;

      data.size = 1;
      data.data = &c;   /* this is disgusting */
      return FEtask__sendmessage(FEtask_input, s->child, &data);
   }

   return 0;
}


extern void FEtask_dispose(Frontend_task *s)
{
   Frontend_tmpfilename *f, *fnext;

   if (s->tmpfile != 0)
   {
       delete_object(s->tmpfile);
       free(s->tmpfile);
   }
   if (s->outfile != 0) free(s->outfile);
   if (s->cmdline != 0) free(s->cmdline);
   if (s->extcmdline != 0) free(s->extcmdline);

   /* --- get rid of any saveas box --- */
   if (s->saveas != 0)
   {
      dbox_hide(s->saveas);
      dbox_dispose(&s->saveas);
   }

   /* --- free output state --- */
   if (s->output) FEoutput_dispose(s->output);

   /* --- and free any tmp files which were created as a result of a datasave --- */
   f = s->tmplist;
   while (f != 0)
   {
      fnext = f->next;
      if (f->name)
      {
         delete_object(f->name);
         FEmem_free(f->name);
      }
      FEmem_free(f);

      f = fnext;
   }

   /* --- ... and bid it farewell --- */
   states = slist_remove(states, s);
   free(s);
}


static void FEtask__taskdying(Frontend_task *s)
{
   os_filestr f;
   os_error *e;

   if (!(s->flags & TF_Aborted))
   {
      s->flags &= ~(TF_Running|TF_Aborted|TF_Paused);
      s->flags |= TF_Completed;
      if (s->output) FEoutput_settitles(s->output, TF_Completed);
   }

   /* --- set dbox fields to faded when finished --- */
   if (s->output) FEoutput_fadefields(s->output);

   /* --- see if output needed --- */
   if (s->tmpfile != 0)
   {
      /* --- see if tmpfile exists --- */
      f.action = 5;
      f.name = s->tmpfile;
      e = os_file(&f);
      if (e == 0 && (f.action == 1 || f.action == 2) /*file/directory found*/)
      {
         /* --- pop up a save box for output (not on abort!) --- */
         if (!(s->flags & TF_Aborted))
         {
            s->flags |= TF_Unsaved_Output;
            FEsaveas_dbox(s, &f);
         }
      }
   }

   /* --- is it marked for total demise? (ie is its window closed?) --- */
   if (s->flags & TF_Dead)
      FEtask_dispose(s);
}


static BOOL FEtask__bkg_events(wimp_eventstr *e, void *handle)
{
   Frontend_task  *s;

   handle = handle;

   switch(e->e)
   {
     case wimp_ESEND:
        switch (e->data.msg.hdr.action)
        {
          case FEtask_output:

             s = findstatefromtask(e->data.msg.hdr.task);
             if (s && s->output) FEoutput_addtobuffer(s->output, e->data.msg.data.words[0], &e->data.msg.data.chars[4]);
             return TRUE;

          case FEtask_morio:   /* alas, poor task...... */

             s = findstatefromtask(e->data.msg.hdr.task);
             if (s)
             {
                FEtask__taskdying(s);
             }
             return TRUE;

          case FEtask_ego:

             /* --- child has started, store its task-id --- */
             /* --- first word of msg holds "txt" --- */
             s = (Frontend_task *)(e->data.msg.data.words[0]);
             if (s) s->child = e->data.msg.hdr.task;
             return TRUE;

          default:
             return FALSE;
        }

     default:
        return FALSE;
   }
   return FALSE;
}


extern char *FEtask_get_cmdline(Frontend_outputwin *t)
{
   Frontend_task *s = findstatefromtxt(t);

   return (s != 0)?s->cmdline:0;
}


extern char *FEtask_get_extcmdline(Frontend_outputwin *t)
{
   Frontend_task *s = findstatefromtxt(t);

   return (s != 0)?s->extcmdline:0;
}


extern char *FEtask_get_tmpfile(Frontend_outputwin *t)
{
   Frontend_task *s = findstatefromtxt(t);

   return (s != 0)?s->tmpfile:0;
}


extern char *FEtask_get_outfile(Frontend_outputwin *t)
{
   Frontend_task *s = findstatefromtxt(t);

   return (s != 0)?s->outfile:0;
}


extern void FEtask_abort(Frontend_outputwin *t)
{
   Frontend_task *s = findstatefromtxt(t);

   if (s)
   {
      s->flags &= ~(TF_Running|TF_Paused|TF_Completed);
      s->flags |= TF_Aborted;
      if (s->child)
         wimpt_noerr(FEtask__sendmessage(FEtask_morite, s->child, NULL));
   }
}


extern void FEtask_abort_and_dispose(Frontend_outputwin *t)
{
   Frontend_task *s = findstatefromtxt(t);

   if (s)
   {
      /* --- if it's already aborted, just remove its state, otherwise,
             mark it as dead and let the die handler deal with disposal --- */
      if (s->flags & (TF_Aborted|TF_Completed))
         FEtask_dispose(s);
      else
      {
         if (s->child)
            wimpt_noerr(FEtask__sendmessage(FEtask_morite, s->child, NULL));
         s->flags |= TF_Dead;
      }
   }
}


extern void FEtask_pause(Frontend_outputwin *t)
{
   Frontend_task *s = findstatefromtxt(t);

   if (s)
   {
      s->flags &= ~(TF_Aborted|TF_Running|TF_Completed);
      s->flags |= TF_Paused;
      if (s->child)
         wimpt_noerr(FEtask__sendmessage(FEtask_suspend, s->child, NULL));
   }
}


extern void FEtask_continue(Frontend_outputwin *t)
{
   Frontend_task *s = findstatefromtxt(t);

   if (s)
   {
      s->flags &= ~(TF_Aborted|TF_Paused|TF_Completed);
      s->flags |= TF_Running;
      if (s->child)
         wimpt_noerr(FEtask__sendmessage(FEtask_resume, s->child, NULL));
   }
}


extern void FEtask_killalltasks(void)
{
   Frontend_task *s = states;
   Frontend_tmpfilename *f;

   while (s)
   {
     if (s->child && !(s->flags & (TF_Aborted|TF_Completed)))
     {
        wimpt_noerr(FEtask__sendmessage(FEtask_morite, s->child, NULL));
     }

     /* --- make sure we don't leave temp. files --- */
     /* file used for output */
     if (s->tmpfile)
     {
         delete_object(s->tmpfile);
     }

     /* ... and tmp files used for input after a datasave */
     f = s->tmplist;
     while (f != 0)
     {
        if (f->name) delete_object(f->name);
        f = f->next;
     }

     s = s->next;
   }
}


extern int FEtask_getflags(Frontend_outputwin *w)
{
   Frontend_task *s = findstatefromtxt(w);

   return (s)?s->flags:0;
}


extern BOOL FEtask_anyactive(void)
{
   Frontend_task *s = states;

   while (s != 0)
   {
      if (!(s->flags & (TF_Completed|TF_Aborted)))
          return TRUE;
      s = s->next;
   }

   return FALSE;
}


static void FEtask__free_extcmdline(char *extcmdline)
{
   _kernel_swi_regs r;
   _kernel_oserror *e;

   /* --- get ext cmdline to avoid it being left around --- */
   if ((e = _kernel_swi(DDEUtils_GetCLSize, &r, &r)) == 0 && r.r[0] != 0)
   {
      r.r[0] = (int)extcmdline;
      e = _kernel_swi(DDEUtils_GetCL, &r, &r);
      assert(e == 0, "Failed to free dangling extended cmdline");
   }
}


extern void FEtask_request_taskwindow(char *cmd, char *tmpfile,char *outfile,char *extcmdline)
{
   char taskcmd[2*MAXCMDLINE];  /* yes alright I know this is horrible */
   Frontend_task *s;
   os_error *e;
   _kernel_oserror *ee;
   _kernel_swi_regs r;

   /* --- don't bother if taskwindow not around --- */
   if ((e = os_cli("RMEnsure TaskWindow 0")) != 0)
   {
        werr(FALSE, msgs_lookup("FEtask1:Task window not active"));
        return;
   }

   /* --- check there is space for new application --- */
   r.r[0] = -1;
   r.r[1] = -1;
   _kernel_swi(Wimp_SlotSize, &r, &r);
   if (r.r[2] < application.wimpslot * 1024)
   {
      werr(FALSE, msgs_lookup("FEtask2:Application needs at least %dK to start up"), application.wimpslot);
      if (extcmdline != 0)
         FEtask__free_extcmdline(extcmdline);
      return;
   }

   /* --- create new state --- */
   s = FEmem_alloc(sizeof(Frontend_task));

   s->child = 0; /* Don't know child taskid yet */
   s->saveas = 0;
   s->flags = TF_Running;
   s->output = 0;
   s->tmpfile = 0;
   s->outfile = 0;
   s->cmdline = 0;
   s->extcmdline = 0;

   /* --- create new associated text/summary window --- */
   if ((application.flags & AF_HAS_OUTPUT_WINDOW) || (application.flags & AF_HAS_SUMMARY_WINDOW))
   {
      s->output = FEoutput_new();
      if (s->output == 0)
      {
         FEmem_free(s);
         if (extcmdline != 0)
            FEtask__free_extcmdline(extcmdline);
         return;
      }
   }

   s->tmplist = FEmsg_get_datasave_tmpfile_list();

   if (tmpfile[0] != 0)
   {
      stralloc(&s->tmpfile, tmpfile);
   }
   if (outfile[0] != 0)
   {
      stralloc(&s->outfile, outfile);
   }
   if (cmd != 0)
   {
      stralloc(&s->cmdline, cmd);
   }
   if (extcmdline != 0)
   {
      stralloc(&s->extcmdline, extcmdline);
   }

   /* --- add it to the list of states --- */
   states = slist_add(states, s);

   /* --- run in a task window --- */
   if (extcmdline != 0)
   {
      r.r[0] = (int)extcmdline;
      if ((ee = _kernel_swi(DDEUtils_SetCL, &r, &r)) != 0)
      {
         werr(FALSE, "%s", ee->errmess);
      }
   }
   strncpy(taskcmd, "*taskwindow \"", 2*MAXCMDLINE);
   strncat(taskcmd, cmd, 2*MAXCMDLINE);
   add_char(taskcmd, '"');
   strncat(taskcmd, " -quit -wimpslot ", 2*MAXCMDLINE);
   sprintf((taskcmd+strlen(taskcmd)), "%dK", application.wimpslot);
   strncat(taskcmd, " -name ", 2*MAXCMDLINE);
   strncat(taskcmd, application.name, 2*MAXCMDLINE);
   strncat(taskcmd, "_task", 2*MAXCMDLINE);
   strncat(taskcmd, " -task &", 2*MAXCMDLINE);
   sprintf((taskcmd+strlen(taskcmd)), "%x", wimpt_task());
   strncat(taskcmd, " -txt &", 2*MAXCMDLINE);
   sprintf((taskcmd+strlen(taskcmd)), "%x", (int)s);

   /* --- check we don't overflow cmdline buffer --- */
   if (strlen(taskcmd) >= MAXCMDLINE)
   {
      werr(FALSE, msgs_lookup("FEtask3:Command line too long for task window module"));
      FEtask_dispose(s);
      if (extcmdline != 0)
         FEtask__free_extcmdline(extcmdline);
      return;
   }

   /* --- now start the command --- */
   wimpt_noerr(wimp_starttask(taskcmd));

   /* --- display an output window --- */
   if ((application.flags & AF_HAS_OUTPUT_WINDOW) || (application.flags & AF_HAS_SUMMARY_WINDOW))
      FEoutput_show(s->output);
}


extern void FEtask_init(void)
{
   win_add_unknown_event_processor(FEtask__bkg_events, 0);
}
@


1.3
log
@Removed spurious trailing blank line that appeared in output window when
final line was terminated by VDU 10,13.

Version 1.20. Tagged as 'FrontEnd-1_20'
@
text
@d24 1
a263 7
                if (s->output && s->output->bufsize > 0 && s->output->buffer[s->output->bufsize-1] != '\n'
                                                        && s->output->buffer[s->output->bufsize-1] != '\r')
                {
                   /* --- force display of last dying gasps --- */
                   FEoutput_addtobuffer(s->output, 2, "\n\r");
                }

@


1.2
log
@  Fixed the "spurious blank line" problem.
  Builds completely cleanly now.
Detail:
  The extra blank line problem has been solved.  This was caused by
    multicharacter lineend character sequences (\r\n or \n\r) being
    delivered split across different TaskWindow messages.
Admin:
  Tested by getting DecAOF to disassemble a large file.  No more spurious
    blank lines appeared.

Version 1.18. Tagged as 'FrontEnd-1_18'
@
text
@d263 2
a264 1
                if (s->output && s->output->bufsize > 0 && s->output->buffer[s->output->bufsize-1] != '\n')
d267 1
a267 1
                   FEoutput_addtobuffer(s->output, 1, "\n");
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
 *     1. When we go: *taskwindow "cmd" -quit -wimpslot <n>K 
d42 1
a42 1
 *        module intercepts it, and sends it to us in wimp 
d51 2
a52 2
 */ 
      
d103 1
a103 1
   msg.hdr.action = action;
d162 1
a162 1
   if (s->tmpfile != 0) 
d186 1
a186 1
      if (f->name) 
d200 1
a200 1
 
d241 1
a241 1
static BOOL FEtask__bkg_events(wimp_eventstr *e, void *handle) 
d257 1
a257 1
       
d261 1
a261 1
             if (s) 
d296 1
a296 1
   return (s != 0)?s->cmdline:0; 
d304 1
a304 1
   return (s != 0)?s->extcmdline:0; 
d312 1
a312 1
   return (s != 0)?s->tmpfile:0; 
d320 1
a320 1
   return (s != 0)?s->outfile:0; 
d451 1
a451 1
      assert(e == 0, "Failed to free dangling extended cmdline");   
d526 1
a526 1
 
@


1.1.1.1
log
@  Initial import of FrontEnd module to CVS from Aquarius.
Detail:
  Code claims to build FrontEnd 1.16 (11 Jan 1995), but will not
    build in current build environment.
Admin:
  Does not compile - checked in for reference purposes only.
  Tagged appropriately.  Use tag FrontEnd-1_16 to extract version
    which builds in the current build environment.

Tagged as FrontEnd-Aquarius-1_16


@
text
@@
