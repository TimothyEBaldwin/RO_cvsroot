head	1.2;
access;
symbols
	FrontEnd-1_34:1.2
	FrontEnd-1_33:1.2
	FrontEnd-1_32:1.2
	FrontEnd-1_31:1.2
	FrontEnd-1_30-2:1.2
	FrontEnd-1_30:1.2
	FrontEnd-1_29:1.2
	FrontEnd-1_28:1.2
	FrontEnd-1_27:1.2
	FrontEnd-1_26:1.2
	FrontEnd-1_25:1.2
	FrontEnd-1_24:1.2
	FrontEnd-1_23:1.2
	FrontEnd-1_22:1.1.1.1
	FrontEnd-1_21:1.1.1.1
	FrontEnd-1_20:1.1.1.1
	FrontEnd-1_19:1.1.1.1
	FrontEnd-1_18:1.1.1.1
	FrontEnd-1_17:1.1.1.1
	FrontEnd-1_16:1.1.1.1
	FrontEnd-Aquarius-1_16:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2001.05.22.13.58.40;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	99.03.18.10.30.25;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.03.18.10.30.25;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Great many changes and a few fixes.
Detail:
  See 'ReadMe' in the Docs directory. Summary - new includes and selections
  rules, rules_start/rules_end section, lists before rules keywords, actions
  can take place when icons go off as well as on, and more.
Admin:
  Tested new features a reasonable amount by playing around with the UpgFetch
  front-end. Link still behaves as it should, and all the other Desktop tools
  run without any parser errors or obvious faults in behaviour.


Version 1.23. Tagged as 'FrontEnd-1_23'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   FEoptions.c
 * Purpose: Saving/loading of options
 * Author:  IDJ
 * History: 11-Jun-90: IDJ: created
 *          19-Jun-90: IDJ: added icon/menu dfts
 *          20-Jun-90: IDJ: did option saving
 *          07-Mar-91: IDJ: check for error opening choices file
 *          16-May-01: ADH: ensured deselections etc. are honoured
 *
 */

#include <string.h>
#include <stdlib.h>

#include "res.h"
#include "werr.h"
#include "msgs.h"

#include "global.h"
#include "types.h"
#include "FrontEnd.h"
#include "parser.h"
#include "FEmem.h"
#include "utils.h"
#include "bool.h"
#include "FEinterr.h"

#include "FEoptions.h"


extern void FEoptions_iconclick(int icn, BOOL on)
{
   Frontend_icon *i = find_icon(icn);

   if (i != 0)
   {
      unsigned int old_flag = i->flags & IF_SELECTED;

      if (on)
      {
         dbox_setnumeric(application.setup->d, icn, 1);
         i->flags |= IF_SELECTED;
         if (old_flag == 0) do_on_actions((void *)i, IS_ICON);
      }
      else
      {
         dbox_setnumeric(application.setup->d, icn, 0);
         i->flags &= ~IF_SELECTED;
         if (old_flag != 0) do_off_actions((void *)i, IS_ICON);
      }
   }
}


extern void FEoptions_iconval(int icn, char *val)
{
   Frontend_icon *i = find_icon(icn);

   if (i != 0)
   {
      if (i->flags & (IF_STRING|IF_NUMBER))
      {
         dbox_setfield(application.setup->d, icn, val);
      }
   }
}


extern void FEoptions_menuclick(int entry, BOOL on)
{
   Frontend_menuentry *m = find_menuentry(entry+1);

   if (m != 0)
   {
      unsigned int old_flag = m->flags & IF_SELECTED;

      if (on)
      {
         m->flags |= IF_SELECTED;
         if (old_flag == 0) do_on_actions((void *)m, IS_MENU);
      }
      else
      {
         m->flags &= ~IF_SELECTED;
         if (old_flag != 0) do_off_actions((void *)m, IS_MENU);
      }
   }
}


extern void FEoptions_menuval(int entry, char *val)
{
   Frontend_menuentry *m = find_menuentry(entry+1);

   if (m != 0)
   {
      if (m->buffer != 0) strcpy(m->buffer, val);
   }
}


extern void FEoptions_readchoices(char *choices_filename)
{
   parser_readchoices(choices_filename);
}


extern void FEoptions_savechoices(char *choices_filename, BOOL force_save)
{
   char buffer[MAXFILENAME];
   FILE *cfp;
   Frontend_icon *icon;
   Frontend_menuentry *m;
   template *t;
   wimp_wind *w;
   wimp_icon *wi;

   if ((cfp = fopen(choices_filename, "w")) == 0)
   {
      werr(FALSE, msgs_lookup("FEOpts1:Unable to write choices file %s"), choices_filename);
      return;
   }

   /* --- first write out the "metaoptions" auto_run, auto_save, display --- */
   fprintf(cfp, (application.flags & AF_AUTORUN)?"on ":"off ");
   fprintf(cfp, (application.flags & AF_AUTOSAVE)?"on ":"off ");
   fprintf(cfp, (application.flags & AF_DFT_SUMMARY)?"summary\n":"text\n");

   /* --- write out icon details --- */
   icon = application.setup->icons;
   t = template_find("SetUp");
   w = &t->window;
   while (icon != 0)
   {
      if (!(icon->flags & IF_NOT_SAVED) || force_save)
      {
         /* --- see what sort of icon it is in the template --- */
         wi = ((wimp_icon *)(w + 1)) + icon->number;

         if (is_writeable_indirecttext(wi))
         {
            dbox_getfield(application.setup->d, icon->number, buffer, wi->data.indirecttext.bufflen);
            fprintf(cfp, "icn %d ", icon->number);
            fputc('"', cfp);
            fprintf(cfp, "%s\"\n", buffer);
         }
         else if (is_click(wi) && (icon->flags & (IF_ARROWUP | IF_ARROWDOWN | IF_EXTENDS)) == 0)
         {
            fprintf(cfp, "icn %d ", icon->number);
            fprintf(cfp, (icon->flags & IF_SELECTED)?"on\n":"off\n");
         }
      }
      icon = icon->next;
   }

   /* --- write out menu details --- */
   m = application.setup->menu.entries;

   while (m != 0)
   {
      if (!(m->flags & IF_NOT_SAVED) || force_save)
      {
         fprintf(cfp, "menu %d ", m->number-1);  /* -1 because of menu numbering mess */
                                                 /* menus are held internally numbered
                                                    one greater than user references */
         fprintf(cfp, (m->flags & IF_SELECTED)?"on ":"off ");

         if (m->buffer != 0)
         {
            fputc('"', cfp);
            fprintf(cfp, "%s\"", m->buffer);
         }
         fputc('\n', cfp);
      }

      m = m->next;
   }

   /* --- and close choices file --- */
   fclose(cfp);
}


@


1.1
log
@Initial revision
@
text
@d22 1
d51 3
a53 1
      if (on) 
d57 1
d59 1
a59 1
      else 
d63 1
d89 12
a100 2
      if (on) m->flags |= IF_SELECTED;
      else    m->flags &= ~IF_SELECTED;
d164 2
a165 2
            fprintf(cfp, (icon->flags & IF_SELECTED)?"on\n":"off\n");        
         } 
d168 1
a168 1
   }         
d186 1
a186 1
         }  
@


1.1.1.1
log
@  Initial import of FrontEnd module to CVS from Aquarius.
Detail:
  Code claims to build FrontEnd 1.16 (11 Jan 1995), but will not
    build in current build environment.
Admin:
  Does not compile - checked in for reference purposes only.
  Tagged appropriately.  Use tag FrontEnd-1_16 to extract version
    which builds in the current build environment.

Tagged as FrontEnd-Aquarius-1_16


@
text
@@
