head	1.5;
access;
symbols
	FrontEnd-1_34:1.5
	FrontEnd-1_33:1.5
	FrontEnd-1_32:1.5
	FrontEnd-1_31:1.5
	FrontEnd-1_30-2:1.5
	FrontEnd-1_30:1.5
	FrontEnd-1_29:1.5
	FrontEnd-1_28:1.5
	FrontEnd-1_27:1.5
	FrontEnd-1_26:1.4
	FrontEnd-1_25:1.4
	FrontEnd-1_24:1.4
	FrontEnd-1_23:1.4
	FrontEnd-1_22:1.3
	FrontEnd-1_21:1.2
	FrontEnd-1_20:1.2
	FrontEnd-1_19:1.2
	FrontEnd-1_18:1.2
	FrontEnd-1_17:1.1.1.1
	FrontEnd-1_16:1.1.1.1
	FrontEnd-Aquarius-1_16:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2001.06.15.17.25.00;	author ahodgkin;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.22.13.58.40;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.11.15.37.34;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.12.14.14.51;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	99.03.18.10.30.24;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.03.18.10.30.24;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@  Finally got the rules stuff sorted. Hurrah.
Detail:
  A few tricks to this; maintain a usage count for greying/ungreying where
  the initial state for an icon is zero, meaning 'unknown', and going to
  either < or > 0 thereafter once the state is determined. That's done
  at load-time from the Defaults and Choices settings. In addition, the
  module has to know when an icon is part of a selection group - normally
  this means a radio button - and detects that when this is happening, the
  'off' rules for items deselected by the selection of another should *not*
  be run. This makes a great deal of difference to behaviour, which is now
  a lot more straightforward and a lot clearer in the code itself.

  The caveat of this is that exclude on = include off / exclude off =
  include on, which never worked before, now should; you can infact totally
  remove inclusion support internally beyond leaving it as syntactic sugar
  for the Desc file by undefining INCLUDES_AS_INCLUDES when building. By
  default, this isn't done, as there's an omission in this work. Since any
  item judged to be in a selection group will not have its Off rules run
  (or On rules unwound IYSWIM) then *any* off item for a radio won't be
  run. What FrontEnd *should* do is compare the list of icons altered by
  the selecting item's selection rules and only run rules for the
  deselecting items that are not part of the other list. It doesn't do
  this, which creates a slight lack of orthogonality overall. It's minor.
Admin:
  Tested it as heavily as I easily can in UpgCreate. Ensured that Link
  still works. Had a quick look at menu behaviour (sane); brought Docs up
  to date.

Version 1.27. Tagged as 'FrontEnd-1_27'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:    FEdbox.c
 * Purpose:  Show a dialogue box for setting options.
 * Author:   IDJ
 * History:  12-Apr-90: IDJ: created
 *           21-Jun-90: IDJ: made setup dbox hide when RUN click
 *           26-Jun-90: IDJ: fixed state handling/setting (I hope)
 *           28-Jun-90: IDJ: cancel now closes dbox as well
 *           05-Mar-91: IDJ: use msgs.h
 *           18-Mar-91: IDJ: right click on Run leaves dbox up
 *           04-Apr-91: IDJ: fix "throbbing" extended dbox
 *           29-Apr-91: IDJ: exit if too many windows
 *
 *           Re-relesae started (31-Oct-91 IDJ)
 *           31-Oct-91: IDJ: correct (re)open of setup dbox if extender icon selected
 *                           (bug DDE-0828)
 *
 *           Aquarius:
 *           25-Nov-94: IDJ: allow non-menu buttons to do insertion (bug AQU-00619)
 *           19-Dec-94: IDJ: AQU-00596 - quit frontend task on cancel click on dbox
 *
 *           11-May-01: ADH: corrected single typo in comment :-)
 *           15-Jun-01: ADH: lots of fixes, extensions, etc., including adjust-click
 *                           on Cancel leaving dbox open
 */

#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "dbox.h"
#include "wimp.h"
#include "template.h"
#include "msgs.h"
#include "werr.h"
#include "event.h"
#include "wimp.h"
#include "xferrecv.h"
#include "wimpt.h"
#include "help.h"

#include "global.h"
#include "types.h"
#include "FrontEnd.h"
#include "FEdbox.h"
#include "FEmem.h"
#include "FEmenus.h"
#include "FEmsg.h"
#include "FEcmdline.h"
#include "utils.h"
#include "bool.h"
#include "FEinterr.h"


#define  FEdbox_IRun     0
#define  FEdbox_ICancel  1

#define  FEdbox_large_dbox  1
#define  FEdbox_small_dbox  2


/* ---------------------------------- state handling/setting ---------------------------- */

static void FEdbox__extend_dbox(wimp_w whandle, int top, int bottom, int size)
{
   wimp_wstate state;
   wimp_icon top_icon, bottom_icon;
   int growth;
   template *t;
   int small_size = 0;

   if ((t = template_find("SetUp")) != 0)
      small_size = t->window.box.y1 - t->window.box.y0;

   /* --- get the window state --- */
   wimpt_noerr(wimp_get_wind_state(whandle, &state));

   /* --- use icon defs to set size of window --- */
   wimp_get_icon_info(whandle, top, &top_icon);
   wimp_get_icon_info(whandle, bottom, &bottom_icon);

   growth = top_icon.box.y0 - bottom_icon.box.y0;

   /* --- change bottom of window --- */
   if (size == FEdbox_small_dbox)
       state.o.box.y0 = state.o.box.y1 - small_size;
   else
       state.o.box.y0 = state.o.box.y1 - small_size - growth;

   /* --- open it again --- */
   wimpt_noerr(wimp_open_wind(&state.o));
}


static void FEdbox__click(dbox_field icon)
{
   Frontend_icon *i;
   wimp_icon *wi;

   i = find_icon(icon);
   assert(i != 0, "Zero icon pointer");
   wi = icon_num_to_pointer("SetUp", i->number);

   if (is_click(wi))
   {
      if (i->flags & (IF_ARROWUP | IF_ARROWDOWN))
      {
         int icn_val;
         wimp_mousestr m;
         BOOL going_up;

         wimp_get_point_info(&m);
         going_up = ((m.bbits & wimp_BLEFT) && (i->flags & IF_ARROWUP)) ||
                    ((m.bbits & wimp_BRIGHT) && (i->flags & IF_ARROWDOWN));

         /* --- get numeric value of the icon it changes and find it --- */
         icn_val = dbox_getnumeric(application.setup->d, i->incdec);

         /* --- modify it (up/down) --- */
         icn_val += (going_up)?i->by:-i->by;

         /* --- write the value back --- */
         if (icn_val <= i->max_val && going_up ||
             !going_up && icn_val >= i->min_val)
             dbox_setnumeric(application.setup->d, i->incdec, icn_val);
      }
      else if (i->flags & IF_EXTENDS)
      {
         wimp_icon icon;
         wimp_w handle = dbox_syshandle(application.setup->d);
         wimp_get_icon_info(handle, i->number, &icon);

         if ((icon.flags & wimp_ISELECTED) != 0)
         {
           wimpt_noerr(wimp_set_icon_state(handle, i->number, wimp_ISELECTED, (wimp_iconflags)0));
           FEdbox__extend_dbox(handle, application.setup->extends_from,
                                      application.setup->extends_to,
                                      FEdbox_small_dbox);
         }
         else
         {
           wimpt_noerr(wimp_set_icon_state(handle, i->number, wimp_ISELECTED, wimp_ISELECTED));
           FEdbox__extend_dbox(handle, application.setup->extends_from,
                                      application.setup->extends_to,
                                      FEdbox_large_dbox);
         }
      }
      else if (i->insert)   /* Bug-fix AQU-00619 */
      {
         char *p = i->insert;
         wimp_caretstr c;
         wimp_icon *ci;

         /* --- keys which insert a string into another icon --- */
         /* --- if we have the caret, then insert the given string associated --- */
         /* --- with this icon                                                --- */
         wimp_get_caret_pos(&c);
         if (c.w == dbox_syshandle(application.setup->d))
         {
            ci = icon_num_to_pointer("SetUp", c.i);
            if (is_writeable_indirecttext(ci))
            {
               /* --- insert the string --- */
               /* --- problems here with multiple characters using wimp_processkey --- */
               /* --- so we insert straight into the keyboard buffer (yuk!)        --- */
               while (*p)
               {
                  _kernel_swi_regs r;
                  r.r[0] = 138;  /* insert into buffer */
                  r.r[1] = 0;    /* the keyboard */
                  r.r[2] = *p++; /* the character */
                  _kernel_swi(OS_Byte, &r, &r);
               }
             }
         }
      }
      else
      {
         if (i->flags & IF_SELECTED)
         {
             /* --- deselect it --- */
             dbox_setnumeric(application.setup->d, i->number, 0);
             i->flags &= ~IF_SELECTED;

             /* --- do the 'off' deselections, selections, inclusions and exclusions --- */
             do_off_actions(i, IS_ICON);
         }
         else
         {
             /* --- select it --- */
             dbox_setnumeric(application.setup->d, i->number, 1);
             i->flags |= IF_SELECTED;

             /* --- do the deselections, selections, inclusions and exclusions --- */
             do_on_actions(i, IS_ICON);
         }
      }
   }
   else if (is_autorepeat(wi))   /* this is an arrow key */
   {
      int icn_val;
      wimp_mousestr m;
      BOOL going_up;

      wimp_get_point_info(&m);
      going_up = ((m.bbits & wimp_BLEFT) && (i->flags & IF_ARROWUP)) ||
                 ((m.bbits & wimp_BRIGHT) && (i->flags & IF_ARROWDOWN));

      /* --- get numeric value of the icon it changes and find it --- */
      icn_val = dbox_getnumeric(application.setup->d, i->incdec);

      /* --- modify it (up/down) --- */
      icn_val += (going_up)?i->by:-i->by;

      /* --- write the value back --- */
      if (icn_val <= i->max_val && going_up ||
          !going_up && icn_val >= i->min_val)
          dbox_setnumeric(application.setup->d, i->incdec, icn_val);
   }
   else if (is_menu(wi))
   {
      char *p = i->insert;
      wimp_caretstr c;
      wimp_icon *ci;

      /* --- keys which insert a string into another icon --- */
      /* --- if we have the caret, then insert the given string associated --- */
      /* --- with this icon                                                --- */
      wimp_get_caret_pos(&c);
      if (c.w == dbox_syshandle(application.setup->d))
      {
         ci = icon_num_to_pointer("SetUp", c.i);
         if (is_writeable_indirecttext(ci))
         {
            /* --- insert the string --- */
            /* --- problems here with multiple characters using wimp_processkey --- */
            /* --- so we insert straight into the keyboard buffer (yuk!)        --- */
            while (*p)
            {
               _kernel_swi_regs r;
               r.r[0] = 138;  /* insert into buffer */
               r.r[1] = 0;    /* the keyboard */
               r.r[2] = *p++; /* the character */
               _kernel_swi(OS_Byte, &r, &r);
            }
          }
      }
   }
   else
   {
      /* do nothing */
   }
}


static void FEdbox__cancel(void)
{
   Frontend_icon *icon;
   wimp_icon *wi;

   /* --- this function returns to the previous state of the dialogue box --- */

   icon = application.setup->icons;
   while (icon != 0)
   {
      /* --- see what sort of icon it is in the template --- */
      wi = icon_num_to_pointer("SetUp", icon->number);

      /* --- indirect text - writeable --- */
      if (is_writeable_indirecttext(wi))
      {
         /* --- restore saved buffer --- */
         if (icon->save_buffer != 0)
         {
            char *temp = FEmem_alloc(wi->data.indirecttext.bufflen);

            dbox_getfield(application.setup->d, icon->number, temp, wi->data.indirecttext.bufflen);

            if (strcmp(temp, icon->save_buffer))
            {
               FEmem_free(temp);
               dbox_setfield(application.setup->d, icon->number, icon->save_buffer);
            }
            else FEmem_free(temp);
         }
      }
      /* --- click/autorepeat --- */
      else if (is_click(wi) || is_autorepeat(wi))
      {
         if ((icon->flags & (IF_ARROWUP | IF_ARROWDOWN)) == 0)
         {
            /* Must be careful when restoring flags. We can't just overwrite the flags
             * with the saved flags as that'll leave the front end's idea of what is
             * going on inconsistent - e.g. a selection lower down the icon list
             * has greyed out stuff higher up, this gets cancelled, but we've already
             * set the flags to say thost earlier items are not greyed (whether or not
             * they really are) so the anti-flicker code doesn't update the display.
             *
             * Hence we rely on knowing the only flag modifications from the front end
             * are for selection and fading, and deal with those directly; fading can
             * only be done by selections, thus by running the selection rules as
             * required the fading should take care of itself (just as if the user
             * clicked on the relevant buttons in the front end manually, to restore it
             * to its initial state).
             */

            if (icon->flags != icon->save_flags)
            {
               int old_flag = icon->flags & IF_SELECTED;

               if ((icon->save_flags & IF_SELECTED) != 0)
               {
                  dbox_setnumeric(application.setup->d, icon->number, 1);

                  if (old_flag == 0)
                  {
                     icon->flags |= IF_SELECTED;
                     do_on_actions((void *)icon, IS_ICON);
                  }
               }
               else
               {
                  dbox_setnumeric(application.setup->d, icon->number, 0);

                  if (old_flag != 0)
                  {
                     icon->flags &= ~IF_SELECTED;
                     do_off_actions((void *)icon, IS_ICON);
                  }
               }
            }
         }
      }
      icon = icon->next;
   }
}


static void FEdbox__save_state(void)
{
   Frontend_icon *icon;
   wimp_icon *wi;

   /* --- this function saves the state of the dialogue box --- */

   icon = application.setup->icons;
   while (icon != 0)
   {
      /* --- see what sort of icon it is in the template --- */
      wi = icon_num_to_pointer("SetUp", icon->number);

      if (is_writeable_indirecttext(wi))
      {
         if (icon->save_buffer == 0)
             icon->save_buffer = FEmem_alloc(wi->data.indirecttext.bufflen);

         dbox_getfield(application.setup->d, icon->number, icon->save_buffer, wi->data.indirecttext.bufflen);
      }
      else if (is_click(wi) || is_autorepeat(wi))
      {
         if ((icon->flags & (IF_ARROWUP | IF_ARROWDOWN)) == 0)
         {
              icon->save_flags = icon->flags;
         }
      }
      icon = icon->next;
   }
}


static void FEdbox__initial_state(void)
{
   Frontend_icon *icon;
   wimp_icon *wi;

   /* --- this function sets the initial state of the dialogue box --- */

   icon = application.setup->icons;

   /* --- now run default values through --- */

   icon = application.setup->icons;

   while (icon != 0)
   {
      wi = icon_num_to_pointer("SetUp", icon->number);

      /* --- indirect text - writeable --- */
      if (is_writeable_indirecttext(wi))
      {
          /* --- nothing there yet, so put default there --- */
          if (icon->flags & IF_STRING)
          {
             if (!(application.flags & AF_MAKE))
             {
                if (icon->dft_value.string != 0)
                   dbox_setfield(application.setup->d, icon->number, icon->dft_value.string);
             }
             else
             {
                if (icon->make_dft_value.string != 0)
                   dbox_setfield(application.setup->d, icon->number, icon->make_dft_value.string);
             }
          }
          else if (icon->flags & IF_NUMBER)
          {
             if (!(application.flags & AF_MAKE))
                dbox_setnumeric(application.setup->d, icon->number, icon->dft_value.integer);
             else
                dbox_setnumeric(application.setup->d, icon->number, icon->make_dft_value.integer);
          }
      }
      /* --- click/autorepeat --- */
      else if (is_click(wi) || is_autorepeat(wi))
      {
         if ((icon->flags & (IF_ARROWUP|IF_ARROWDOWN)) == 0)
         {
            int dft_value;

            if ((icon->flags & IF_DEFAULT_GIVEN) != 0)
            {
               if (!(application.flags & AF_MAKE))
                  dft_value = icon->dft_value.integer;
               else
                  dft_value = icon->make_dft_value.integer;
            }
            else dft_value = 0;

            dbox_setnumeric(application.setup->d, icon->number, dft_value);

            if (dft_value == 1)
            {
               icon->flags |= IF_SELECTED;
               do_on_actions(icon, IS_ICON);
            }
            else
            {
               BOOL skip_rules = FALSE;

               if ((icon->flags & IF_SELECTED) == 0)
               {
                  Frontend_deselection * desel = icon->deselections;

                  /* Running 'off' rules is complex. Suppose the icon is part of a radio group,
                   * for example, and items in this radio group when selected grey out other
                   * items. To run the 'off' rules we first must unwind the 'on' rules for
                   * inclusions and exclusions, which would ungrey (include) the items that the
                   * radio would have excluded (greyed). However, should we do this for each
                   * 'off' item in the radio group, we'll skew the ungrey count for the items
                   * heavily and they would never get greyed out again. We need to recognise a
                   * radio group and only run 'on' rules, then. To do this, consider each item
                   * in the 'on' rule deselection list. For each of those items, do they also
                   * have an 'on' rule deselection that deselects *this* icon? If so, clearly
                   * only one of those icons may be 'on' at a time => radio group.
                   */

                  while (desel != NULL && skip_rules == FALSE)
                  {
                     /* --- is this an icon? --- */

                     if (desel->menu_or_icon == IS_ICON)
                     {
                        Frontend_icon * icurrent = find_icon(desel->deselect);

                        if (icurrent != NULL)
                        {
                           Frontend_deselection * dcurrent = icurrent->deselections;

                           while (dcurrent != NULL)
                           {
                              /* --- does this item list an icon with the same number? --- */

                              if (dcurrent->menu_or_icon == IS_ICON)
                              {
                                 Frontend_icon * dicurrent = find_icon(dcurrent->deselect);

                                 if (dicurrent != NULL && dicurrent->number == icon->number)
                                 {
                                    skip_rules = TRUE;
                                    break;
                                 }
                              }

                              dcurrent = dcurrent->next;
                           }
                        }
                     }

                     /* --- examine next thing in the 'on' deselections list --- */

                     desel = desel->next;
                  }
               }

               /* --- so, run the 'off' rules? --- */

               if (skip_rules == FALSE)
               {
                  icon->flags &= ~IF_SELECTED;
                  do_off_actions(icon, IS_ICON);
               }
            }
         }
      }
      icon = icon->next;
   }

   /* --- if we were invoked via make, then we also need to:
             1. do all the make exclusions (ie exclude things not appropriate for make)
             2. set up the menu to take its Make defaults
             3. change button icon texts
   */
   if (application.flags & AF_MAKE)
   {
      do_make_exclusions();
      FEmenus_setup_make_defaults();
      dbox_setfield(application.setup->d, FEdbox_IRun, msgs_lookup("FECmd5:OK"));
   }
}


/* -------------------------------------------- event handling ----------------------------- */

static void FEdbox__events(dbox d, void *handle)
{
   dbox_field click;

   IGNORE(handle);

   switch(click = dbox_get(d))
   {
      case dbox_CLOSE:
        dbox_hide(d);
        if (application.flags & AF_MAKE) exit(EXIT_SUCCESS);  /* !!! close dbox from make, we must exit */
        break;

      case FEdbox_IRun:
        {
           /* --- construct the command line and run it --- */
           if (!dbox_persist())
              dbox_hide(d);
           if (application.flags & AF_MAKE)
           {
              FEcmdline_send();
              exit(EXIT_SUCCESS);
           }
           else
              FEcmdline_run();
        }
        break;

      case FEdbox_ICancel:
        /* --- revert to previous options and close box --- */
        FEdbox__cancel();
        FEmenus_setup_cancel();
        if (!dbox_persist()) dbox_hide(d);
        /* IDJ: 19-Dec-94: bug-fix AQU-00596 */
        if (application.flags & AF_MAKE) exit(EXIT_SUCCESS);  /* !!! close dbox from make, we must exit */
        break;

      default:
        /* --- process the click --- */
        FEdbox__click(click);
        break;
   }
}


static BOOL FEdbox__raw_events(dbox d, void *event, void *handle)
{
   wimp_eventstr *e = (wimp_eventstr *)event;

   IGNORE(handle);

   switch(e->e)
   {
      case wimp_ESEND:
      case wimp_ESENDWANTACK:
         switch(e->data.msg.hdr.action)
         {
            case wimp_MDATALOAD:
               {
                  FEmsg_dataload(TRUE, e->data.msg.data.dataload.i);
               }
               return TRUE;

            case wimp_MDATASAVE:
               {
                  if (!(application.flags & AF_MAKE))
                     FEmsg_datasave(&e->data.msg, e->data.msg.data.datasave.i);
                  else
                     werr(FALSE, msgs_lookup("FEdbox1:Can't import from other applications when invoked from !Make"));
               }
               return TRUE;

            case wimp_MHELPREQUEST:
               return help_dboxrawevents(d, event, "SETUP");

            default:
               return FALSE;
         }
         break;
      case wimp_EOPEN:
         if (application.setup->extends != -1)
         {
            wimp_icon icon;
            wimp_w handle = dbox_syshandle(d);
            wimp_get_icon_info(handle, application.setup->extends, &icon);

           wimpt_noerr(wimp_open_wind(&e->data.o));
           if ((icon.flags & wimp_ISELECTED) != 0)
             FEdbox__extend_dbox(handle, application.setup->extends_from,
                                         application.setup->extends_to,
                                         FEdbox_large_dbox);
           else
             FEdbox__extend_dbox(handle, application.setup->extends_from,
                                         application.setup->extends_to,
                                         FEdbox_small_dbox);
            return TRUE;
         }
         else
            return FALSE;

      default:
         return FALSE;
   }
}


/* --------------------------------------- exported functions ------------------------------- */

extern void FEdbox_create(void)
{
   if (application.setup->d == 0)
   {
      if ((application.setup->d = dbox_new("SetUp")) == 0)
      {
          werr(TRUE, msgs_lookup("FEdbox2:Unable to start up -- not enough space (or too many windows)"));
      }
      dbox_eventhandler(application.setup->d, FEdbox__events, 0);
      dbox_raw_eventhandler(application.setup->d, FEdbox__raw_events, 0);
      event_attachmenumaker(dbox_syshandle(application.setup->d), FEmenus_setup_maker,
                            FEmenus_setup_proc, 0);

      FEdbox__initial_state();
   }
}


extern void FEdbox_show(void)
{
   wimp_i i;
   wimp_wstate ws;

   /* --- save state in case of a cancel --- */
   FEdbox__save_state();
   FEmenus_setup_save_state();

   /* --- show the box --- */
   wimpt_noerr(wimp_get_wind_state(dbox_syshandle(application.setup->d), &ws));
   if (ws.flags & wimp_WOPEN)
   {
      ws.o.behind = -1;
      wimpt_noerr(wimp_open_wind(&ws.o));
   }
   else
      dbox_showstatic(application.setup->d);

   /* --- ensure toggled large if appropriate --- */
   /* IDJ: 31-Oct-91: bug fix DDE-0828 */
   if (application.setup->extends != -1)
   {
      wimp_icon icon;
      wimp_w handle = dbox_syshandle(application.setup->d);
      wimp_get_icon_info(handle, application.setup->extends, &icon);

     if ((icon.flags & wimp_ISELECTED) != 0)
       FEdbox__extend_dbox(handle, application.setup->extends_from,
                                   application.setup->extends_to,
                                   FEdbox_large_dbox);
     else
       FEdbox__extend_dbox(handle, application.setup->extends_from,
                                   application.setup->extends_to,
                                   FEdbox_small_dbox);
   }

   /* --- caret at end of first writeable icon --- */
   if (find_writeable("SetUp", dbox_syshandle(application.setup->d), &i))
   {
       set_caret(dbox_syshandle(application.setup->d), i);
   }
}
@


1.4
log
@  Great many changes and a few fixes.
Detail:
  See 'ReadMe' in the Docs directory. Summary - new includes and selections
  rules, rules_start/rules_end section, lists before rules keywords, actions
  can take place when icons go off as well as on, and more.
Admin:
  Tested new features a reasonable amount by playing around with the UpgFetch
  front-end. Link still behaves as it should, and all the other Desktop tools
  run without any parser errors or obvious faults in behaviour.


Version 1.23. Tagged as 'FrontEnd-1_23'
@
text
@d36 2
d288 12
a299 1
            dbox_setfield(application.setup->d, icon->number, icon->save_buffer);
d306 14
a319 1
             int old_flag = icon->flags & IF_SELECTED;
d321 25
a345 12
             /* --- restore saved flags --- */
             icon->flags = icon->save_flags;
             if (icon->flags & IF_SELECTED)
             {
                dbox_setnumeric(application.setup->d, icon->number, 1);
                if (old_flag == 0) do_on_actions((void *)icon, IS_ICON);
             }
             else
             {
                dbox_setnumeric(application.setup->d, icon->number, 0);
                if (old_flag != 0) do_off_actions((void *)icon, IS_ICON);
             }
d394 4
a399 1
      /* --- see what sort of icon it is in the template --- */
d434 16
a449 2
            if (!(application.flags & AF_MAKE))
               dft_value = icon->dft_value.integer;
a450 8
               dft_value = icon->make_dft_value.integer;

            /* --- since we assume all icons 'off' by default, IF_DEFAULT_GIVEN *must* be set
                      if dft_value is non-zero, so this will always run 'on' rules; it will,
                      however, only run 'off' rules if an explicit 'off' default was listed
                      in the defaults section.
            */
            if ((icon->flags & IF_DEFAULT_GIVEN) != 0)
d452 1
a452 1
               dbox_setnumeric(application.setup->d, icon->number, dft_value);
d454 1
a454 1
               if (dft_value == 1)
d456 51
a506 2
                  icon->flags |= IF_SELECTED;
                  do_on_actions(icon, IS_ICON);
d508 4
a511 1
               else
d570 1
a570 1
        dbox_hide(d);
@


1.3
log
@  Improved redraw strategy; added 'quoted_string' option for icons, plus
  'ctrl_chars' and 'tab_width' for metaoptions.
Detail:
  Previously the redraw engine stayed one line behind current output as it
  did not know where to terminate redraw of the current line. At task exit
  it forced \n\r into the output to flush the last line. Now, the incoming
  data buffer is oversized by 1 byte and a \0 written in to give the redraw
  engine something to stop at. This allows it to redraw the current line,
  meaning e.g. "....[...]" progress indicators and so-on will work. It also
  means the \r\n hack isn't needed so saved output doesn't have a spurious
  blank line.

  For 'icn <n> maps_to ...' you can now say 'quoted_string' where you used
  to say 'string'. This encloses the relevant writable field's text in
  double quotes, escaping any double quotes from the writable with '\'. If
  you use 'prefix_by', all of the prefixes and strings are within the
  double quotes (rather than e.g. enclosing each item individually).

  Previously, control characters were output more or less directly. This
  could cause a crash for some nasty ones (e.g. send output to printer)
  or just cause redraw corruptions and the bell to ring. Now, any control
  characters are replaced with "?" by default, including &7F, except for
  tab (&09), which is replaced with a single space. Behaviour is chosen by
  the "ctrl_chars" metaoption, which takes parameters "text" for the usual
  behaviour as described, "escape" for !Edit-style "[aa]" escaping, or
  "hide" to not draw anything at all (so e.g. put "ctrl_chars escape" in
  your metaoptions section of the Desc file). Another new option is
  "tab_width"; tabs are now understood for all three output types. To
  avoid unduly changing existing output the default tab width is 1, but it
  can be 0 to hide tabs, or up to 32. The limit is arbitrary and only in
  place to stop the redraw engine trying to do silly things if given a
  very large value.

  Finally, lexer.c's list of text items was mirrored in lexer.h by a list
  of numbered items - all done by #define, so you had to manually renumber
  them all! This has been changed to an enum, with compiled output checked
  against the previous version - identical as expected.
Admin:
  Remember, you MUST NOT soft load this if you have any FrontEnd apps
  running already! Either quit them all (check there are no instantiations
  with *Modules) and then run it, or put it in !System and reboot. The new
  features have been tested with a work-in-progress !UpgCreate utility,
  and the usual set of DDE apps run to ensure they don't give any syntax
  errors. GNUDiff and Find tested fairly heavily. Builds ROM and RAM
  variants from clean.


Version 1.22. Tagged as 'FrontEnd-1_22'
@
text
@d197 2
a198 2
             /* --- "unexclude" things that were excluded --- */
             do_exclusions(i, IS_ICON, FALSE);
d206 2
a207 5
             /* --- do the deselections --- */
             do_deselections(i, IS_ICON);

             /* --- do the exclusions --- */
             do_exclusions(i, IS_ICON, TRUE);
d293 2
d300 1
a300 2
                do_deselections(icon, IS_ICON);
                do_exclusions(icon, IS_ICON, TRUE);
d303 1
d305 2
d366 10
a375 10
                if (!(application.flags & AF_MAKE))
                {
                   if (icon->dft_value.string != 0)
                      dbox_setfield(application.setup->d, icon->number, icon->dft_value.string);
                }
                else
                {
                   if (icon->make_dft_value.string != 0)
                      dbox_setfield(application.setup->d, icon->number, icon->make_dft_value.string);
                }
d379 4
a382 4
                if (!(application.flags & AF_MAKE))
                   dbox_setnumeric(application.setup->d, icon->number, icon->dft_value.integer);
                else
                   dbox_setnumeric(application.setup->d, icon->number, icon->make_dft_value.integer);
d390 27
a416 13
             if (!(application.flags & AF_MAKE))
                dbox_setnumeric(application.setup->d, icon->number, icon->dft_value.integer);
             else
                dbox_setnumeric(application.setup->d, icon->number, icon->make_dft_value.integer);
             if ((icon->dft_value.integer == 1 && !(application.flags & AF_MAKE)) ||
                 (icon->make_dft_value.integer == 1 && (application.flags & AF_MAKE)))
             {
               icon->flags |= IF_SELECTED;
               do_deselections(icon, IS_ICON);
               do_exclusions(icon, IS_ICON, TRUE);
             }
             else
               icon->flags &= ~IF_SELECTED;
@


1.2
log
@  Fixed the "spurious blank line" problem.
  Builds completely cleanly now.
Detail:
  The extra blank line problem has been solved.  This was caused by
    multicharacter lineend character sequences (\r\n or \n\r) being
    delivered split across different TaskWindow messages.
Admin:
  Tested by getting DecAOF to disassemble a large file.  No more spurious
    blank lines appeared.

Version 1.18. Tagged as 'FrontEnd-1_18'
@
text
@d34 2
d362 1
a362 1
          /* --- nothin there yet, so put default there --- */
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
 *           
d84 2
a85 2
   
   /* --- get the window state --- */ 
d87 1
a87 1
   
d135 1
a135 1
             dbox_setnumeric(application.setup->d, i->incdec, icn_val);  
d143 1
a143 1
         if ((icon.flags & wimp_ISELECTED) != 0) 
d145 1
a145 1
           wimpt_noerr(wimp_set_icon_state(handle, i->number, wimp_ISELECTED, 0));
d208 1
a208 1
             do_exclusions(i, IS_ICON, TRUE);            
d231 1
a231 1
          dbox_setnumeric(application.setup->d, i->incdec, icn_val); 
d297 1
a297 1
             { 
d326 1
a326 1
         if (icon->save_buffer == 0) 
d372 1
a372 1
                } 
d424 1
a424 1
            
d508 1
a508 1
           if ((icon.flags & wimp_ISELECTED) != 0) 
d548 1
a548 1
{                          
d574 1
a574 1
     if ((icon.flags & wimp_ISELECTED) != 0) 
@


1.1.1.1
log
@  Initial import of FrontEnd module to CVS from Aquarius.
Detail:
  Code claims to build FrontEnd 1.16 (11 Jan 1995), but will not
    build in current build environment.
Admin:
  Does not compile - checked in for reference purposes only.
  Tagged appropriately.  Use tag FrontEnd-1_16 to extract version
    which builds in the current build environment.

Tagged as FrontEnd-Aquarius-1_16


@
text
@@
