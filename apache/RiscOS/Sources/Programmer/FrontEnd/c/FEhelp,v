head	1.4;
access;
symbols
	FrontEnd-1_34:1.4
	FrontEnd-1_33:1.4
	FrontEnd-1_32:1.4
	FrontEnd-1_31:1.4
	FrontEnd-1_30-2:1.4
	FrontEnd-1_30:1.4
	FrontEnd-1_29:1.4
	FrontEnd-1_28:1.3
	FrontEnd-1_27:1.3
	FrontEnd-1_26:1.3
	FrontEnd-1_25:1.3
	FrontEnd-1_24:1.3
	FrontEnd-1_23:1.3
	FrontEnd-1_22:1.3
	FrontEnd-1_21:1.2
	FrontEnd-1_20:1.2
	FrontEnd-1_19:1.2
	FrontEnd-1_18:1.2
	FrontEnd-1_17:1.1.1.1
	FrontEnd-1_16:1.1.1.1
	FrontEnd-Aquarius-1_16:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2006.03.13.17.32.17;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.11.15.37.34;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.12.14.14.51;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	99.03.18.10.30.24;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.03.18.10.30.24;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@  Bug fix, bug aversion, compiles.
Detail:
  "Command line too short" error from DDEUtils down to not including space
  for a terminating NUL character fixed. Nasty crashes due to lines being
  exactly 64 characters long averted, but I don't understand the root cause
  of the fault; changing the parser block size to 128 pushes the problem
  further away. Not ideal but time was short. A few instances of static
  structures initialised to "{}" removed; the C99 compiler disliked them.
Admin:
  !MkBrowse FrontEnd application being developed at the time, provoking
  the above faults. Faults no longer show up, FrontEnd behaves as hoped.

Version 1.29. Tagged as 'FrontEnd-1_29'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   FEhelp.c
 * Purpose: to display help file
 * Author:  IDJ
 * History: 20-Jun-90: IDJ: created
 *          11-May-01: ADH: supported changes to FEtxtwin_ redraw scheme
 *
 */

#include "os.h"
#include "res.h"
#include "wimp.h"
#include "template.h"
#include "win.h"
#include "flex.h"
#include "wimpt.h"

#include "global.h"
#include "types.h"
#include "FrontEnd.h"
#include "FEtxtwin.h"
#include "FEinterr.h"

#include "FEhelp.h"

typedef struct FEhelp_helpwindow
{
   wimp_w    w;
   char     *buffer;
   int      *line_offsets;
   int       nlines;
} FEhelp_helpwindow;


static FEhelp_helpwindow FEhelp__wind;

static void FEhelp__handler(wimp_eventstr *e, void *handle)
{
   FEhelp_helpwindow *w = (FEhelp_helpwindow *)handle;

   switch(e->e)
   {
      case wimp_ESCROLL:
        FEtxtwin_scroll(&e->data.scroll.o, e->data.scroll.x, e->data.scroll.y);
        break;

      case wimp_ECLOSE:
        wimpt_noerr(wimp_close_wind(e->data.o.w));
        break;

      case wimp_EOPEN:
        FEtxtwin_open(&e->data.o);
        break;

      case wimp_EREDRAW:
         {
           wimp_redrawstr r;
           BOOL more;
           r.w = e->data.o.w;
           wimpt_noerr(wimp_redraw_wind(&r, &more));
           FEtxtwin_refresh(&r, more, w->buffer, w->line_offsets, w->nlines);
         }
        break;

      default:
        break;
   }
}


extern void FEhelp_givehelp(void)
{
   char helpfilename[MAXFILENAME];
   os_filestr f;
   os_error *e;
   template *t;
   wimp_wstate ws;
   wimp_redrawstr r;
   int lastchar = 0;

   if (FEhelp__wind.buffer == 0)
   {
      /* --- find if !help file exists --- */
      res_findname("!Help", helpfilename);
      f.action = 5;
      f.name = helpfilename;
      if ((e = os_file(&f)) != 0 || f.action != 1 /*file found*/) return;

      /* --- create a help window and register event handlers --- */
      t = template_find("Help");
      wimpt_noerr(wimp_create_wind(&t->window, &FEhelp__wind.w));
      win_register_event_handler(FEhelp__wind.w, FEhelp__handler, (void *)&FEhelp__wind);
      flex_alloc((flex_ptr)&FEhelp__wind.buffer, f.start + 1);
      FEhelp__wind.buffer[f.start] = '\0';

      /* --- load file into buffer --- */
      f.action = 0xff;   /* load named file */
      f.name = helpfilename;
      f.loadaddr = (int) FEhelp__wind.buffer;
      f.execaddr = 0;
      if ((e = os_file(&f)) != 0) return;

      /* --- set up line offsets --- */
      FEtxtwin_linecount(f.start, FEhelp__wind.buffer, &FEhelp__wind.nlines, &FEhelp__wind.line_offsets, flex_size((flex_ptr)&FEhelp__wind.buffer) - 1, &lastchar);

      /* --- set the extent --- */
      r.w = FEhelp__wind.w;
      r.box.x0 = 0;
      r.box.x1 = t->window.ex.x1;
      r.box.y1 = 0;
      r.box.y0 = -(FEhelp__wind.nlines * sysfont_height);
      wimpt_noerr(wimp_set_extent(&r));
   }

   /* --- ... and open the window --- */
   wimpt_noerr(wimp_get_wind_state(FEhelp__wind.w, &ws));
   ws.o.behind = -1;
   FEtxtwin_open(&ws.o);
}





@


1.3
log
@  Improved redraw strategy; added 'quoted_string' option for icons, plus
  'ctrl_chars' and 'tab_width' for metaoptions.
Detail:
  Previously the redraw engine stayed one line behind current output as it
  did not know where to terminate redraw of the current line. At task exit
  it forced \n\r into the output to flush the last line. Now, the incoming
  data buffer is oversized by 1 byte and a \0 written in to give the redraw
  engine something to stop at. This allows it to redraw the current line,
  meaning e.g. "....[...]" progress indicators and so-on will work. It also
  means the \r\n hack isn't needed so saved output doesn't have a spurious
  blank line.

  For 'icn <n> maps_to ...' you can now say 'quoted_string' where you used
  to say 'string'. This encloses the relevant writable field's text in
  double quotes, escaping any double quotes from the writable with '\'. If
  you use 'prefix_by', all of the prefixes and strings are within the
  double quotes (rather than e.g. enclosing each item individually).

  Previously, control characters were output more or less directly. This
  could cause a crash for some nasty ones (e.g. send output to printer)
  or just cause redraw corruptions and the bell to ring. Now, any control
  characters are replaced with "?" by default, including &7F, except for
  tab (&09), which is replaced with a single space. Behaviour is chosen by
  the "ctrl_chars" metaoption, which takes parameters "text" for the usual
  behaviour as described, "escape" for !Edit-style "[aa]" escaping, or
  "hide" to not draw anything at all (so e.g. put "ctrl_chars escape" in
  your metaoptions section of the Desc file). Another new option is
  "tab_width"; tabs are now understood for all three output types. To
  avoid unduly changing existing output the default tab width is 1, but it
  can be 0 to hide tabs, or up to 32. The limit is arbitrary and only in
  place to stop the redraw engine trying to do silly things if given a
  very large value.

  Finally, lexer.c's list of text items was mirrored in lexer.h by a list
  of numbered items - all done by #define, so you had to manually renumber
  them all! This has been changed to an enum, with compiled output checked
  against the previous version - identical as expected.
Admin:
  Remember, you MUST NOT soft load this if you have any FrontEnd apps
  running already! Either quit them all (check there are no instantiations
  with *Modules) and then run it, or put it in !System and reboot. The new
  features have been tested with a work-in-progress !UpgCreate utility,
  and the usual set of DDE apps run to ensure they don't give any syntax
  errors. GNUDiff and Find tested fairly heavily. Builds ROM and RAM
  variants from clean.


Version 1.22. Tagged as 'FrontEnd-1_22'
@
text
@d48 1
a48 1
static FEhelp_helpwindow FEhelp__wind = {};
@


1.2
log
@  Fixed the "spurious blank line" problem.
  Builds completely cleanly now.
Detail:
  The extra blank line problem has been solved.  This was caused by
    multicharacter lineend character sequences (\r\n or \n\r) being
    delivered split across different TaskWindow messages.
Admin:
  Tested by getting DecAOF to disassemble a large file.  No more spurious
    blank lines appeared.

Version 1.18. Tagged as 'FrontEnd-1_18'
@
text
@d19 1
d106 2
a107 1
      flex_alloc((flex_ptr)&FEhelp__wind.buffer, f.start);
d117 1
a117 1
      FEtxtwin_linecount(f.start, FEhelp__wind.buffer, &FEhelp__wind.nlines, &FEhelp__wind.line_offsets, flex_size((flex_ptr)&FEhelp__wind.buffer), &lastchar);
@


1.1
log
@Initial revision
@
text
@d91 1
d110 1
a110 1
      f.loadaddr = (int) FEhelp__wind.buffer; 
d115 1
a115 1
      FEtxtwin_linecount(f.start, FEhelp__wind.buffer, &FEhelp__wind.nlines, &FEhelp__wind.line_offsets, flex_size((flex_ptr)&FEhelp__wind.buffer));
d132 1
a132 1
   
@


1.1.1.1
log
@  Initial import of FrontEnd module to CVS from Aquarius.
Detail:
  Code claims to build FrontEnd 1.16 (11 Jan 1995), but will not
    build in current build environment.
Admin:
  Does not compile - checked in for reference purposes only.
  Tagged appropriately.  Use tag FrontEnd-1_16 to extract version
    which builds in the current build environment.

Tagged as FrontEnd-Aquarius-1_16


@
text
@@
