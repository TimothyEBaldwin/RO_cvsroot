head	1.1;
branch	1.1.1;
access;
symbols
	FrontEnd-1_34:1.1.1.1
	FrontEnd-1_33:1.1.1.1
	FrontEnd-1_32:1.1.1.1
	FrontEnd-1_31:1.1.1.1
	FrontEnd-1_30-2:1.1.1.1
	FrontEnd-1_30:1.1.1.1
	FrontEnd-1_29:1.1.1.1
	FrontEnd-1_28:1.1.1.1
	FrontEnd-1_27:1.1.1.1
	FrontEnd-1_26:1.1.1.1
	FrontEnd-1_25:1.1.1.1
	FrontEnd-1_24:1.1.1.1
	FrontEnd-1_23:1.1.1.1
	FrontEnd-1_22:1.1.1.1
	FrontEnd-1_21:1.1.1.1
	FrontEnd-1_20:1.1.1.1
	FrontEnd-1_19:1.1.1.1
	FrontEnd-1_18:1.1.1.1
	FrontEnd-1_17:1.1.1.1
	FrontEnd-1_16:1.1.1.1
	FrontEnd-Aquarius-1_16:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	99.03.18.10.30.32;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.03.18.10.30.32;	author sbrodie;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -> h.Slist
 * Title:       Slist - singly-linked lists
 * Author:      JGT (converted from MJJ)
 *
 */

#ifndef __slist_h
#define __slist_h

/* This is a generic package for handling singly-linked lists. The critical
 assumption is that the first item of a record to be added to the list is used
 as the link field. e.g.

 TYPE
   ListPtr = POINTER TO ListRec;
   ListRec = RECORD
     next: ListPtr;    (* 'Slist' can be used to chain 'ListRec' items *)
     ...blah blah...   (* on their 'next' field because it is the first *)
   END;                (* field in the record *)
  
*/

extern void *slist_add(void *listhead, void *newelement);
/* Adds 'newelement' to the front of the list whose head is 'listhead'
   Returns new value of listhead. */

extern void *slist_addend(void *listhead, void *newelement);
/* Adds 'newelement' to the end of the list whose head is 'listhead'.
   The link field of 'newelement' is set to NIL
   Returns new value of listhead. */

extern void *slist_remove(void *listhead, void *element);
/* Removes 'element' from the list whose head is 'listhead'
   Returns new value of listhead. */

extern void *slist_joinend(void *listhead, void *newlist);
/* Adds the list headed by 'newlist' to the end of 'listhead'
   Returns new value of listhead. */

#endif

@


1.1.1.1
log
@  Initial import of FrontEnd module to CVS from Aquarius.
Detail:
  Code claims to build FrontEnd 1.16 (11 Jan 1995), but will not
    build in current build environment.
Admin:
  Does not compile - checked in for reference purposes only.
  Tagged appropriately.  Use tag FrontEnd-1_16 to extract version
    which builds in the current build environment.

Tagged as FrontEnd-Aquarius-1_16


@
text
@@
