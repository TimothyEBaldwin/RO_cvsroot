head	1.4;
access;
symbols
	FrontEnd-1_34:1.4
	FrontEnd-1_33:1.4
	FrontEnd-1_32:1.4
	FrontEnd-1_31:1.4
	FrontEnd-1_30-2:1.4
	FrontEnd-1_30:1.4
	FrontEnd-1_29:1.4
	FrontEnd-1_28:1.4
	FrontEnd-1_27:1.4
	FrontEnd-1_26:1.4
	FrontEnd-1_25:1.4
	FrontEnd-1_24:1.4
	FrontEnd-1_23:1.4
	FrontEnd-1_22:1.3
	FrontEnd-1_21:1.2
	FrontEnd-1_20:1.2
	FrontEnd-1_19:1.2
	FrontEnd-1_18:1.2
	FrontEnd-1_17:1.1.1.1
	FrontEnd-1_16:1.1.1.1
	FrontEnd-Aquarius-1_16:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2001.05.22.13.58.41;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.11.15.37.35;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.12.14.14.51;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	99.03.18.10.30.32;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.03.18.10.30.32;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@  Great many changes and a few fixes.
Detail:
  See 'ReadMe' in the Docs directory. Summary - new includes and selections
  rules, rules_start/rules_end section, lists before rules keywords, actions
  can take place when icons go off as well as on, and more.
Admin:
  Tested new features a reasonable amount by playing around with the UpgFetch
  front-end. Link still behaves as it should, and all the other Desktop tools
  run without any parser errors or obvious faults in behaviour.


Version 1.23. Tagged as 'FrontEnd-1_23'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   types.h
 * Purpose: generalised front end module
 * Author:  IDJ
 * History: 06-Apr-90: IDJ: created
 *          18-Apr-90: IDJ: defined what an app DS is
 *          23-May-90: IDJ: icons can now exclude menus and vice versa
 *          11-May-01: ADH: added tab_width field for applications
 *          17-May-01: ADH: added support for on/off and selections
 *
 */

#ifndef __types_h
#define __types_h

#ifndef __menu_h
#include "menu.h"
#endif

#ifndef __wimp_h
#include "wimp.h"
#endif

#ifndef __template_h
#include "template.h"
#endif

#ifndef __dbox_h
#include "dbox.h"
#endif

/* ------ deselection/selection/exclusion/dragging/following/ordering -------- */

typedef struct Frontend_insert
{
   struct Frontend_insert *next;
   int insert;
} Frontend_insert;

typedef struct Frontend_deselection
{
   struct Frontend_deselection *next;
   short menu_or_icon;
   short deselect;
} Frontend_deselection;

typedef struct Frontend_selection
{
   struct Frontend_selection *next;
   short menu_or_icon;
   short select;
} Frontend_selection;

typedef struct Frontend_exclusion
{
   struct Frontend_exclusion *next;
   short menu_or_icon;
   short exclude;
} Frontend_exclusion;

typedef struct Frontend_inclusion
{
   struct Frontend_inclusion *next;
   short menu_or_icon;
   short include;
} Frontend_inclusion;

typedef struct Frontend_dragto
{
   struct Frontend_dragto *next;
   int                     drag;
   struct Frontend_insert *inserts;
   char                    separator;
} Frontend_dragto;

typedef struct Frontend_follow
{
   struct Frontend_follow *next;
   int                     follow;
   int                     flags;
   char                   *string;
   int                     min_val, max_val;
} Frontend_follow;

typedef struct Frontend_orderentry
{
   struct Frontend_orderentry *next;
   int type;
   union {char *string; int number;} data;
} Frontend_orderentry;

typedef struct Frontend_parserlist
{
   struct Frontend_parserlist *next;
   unsigned is_icon :1;
   unsigned off     :1;
   int number;
} Frontend_parserlist;


/* ------------------ setup menu entries ----------------- */
typedef struct Frontend_menuentry
{
   struct Frontend_menuentry *next;
   int                        number;
   int                        flags;
   char                      *text;
   char                      *subtext;
   char                      *maps_to;
   char                      *maps_to_off;
   int                        make_dft_value;
   char                      *make_dft_buffer;
   char                      *buffer;
   char                      *save_buffer;
   int                        save_flags;
   char                      *prefix_by;
   int                        bufsize;
   Frontend_deselection      *deselections;
   Frontend_deselection      *deselections_off;
   Frontend_selection        *selections;
   Frontend_selection        *selections_off;
   Frontend_exclusion        *exclusions;
   Frontend_exclusion        *exclusions_off;
   Frontend_inclusion        *inclusions;
   Frontend_inclusion        *inclusions_off;
} Frontend_menuentry;

typedef struct
{
   Frontend_menuentry *entries;
} Frontend_menu;


/* --------------- the setup dialogue box -------------- */
typedef struct Frontend_icon
{
   struct Frontend_icon  *next;
   int                    number;
   int                    flags;
   int                    save_flags;
   int                    min_val, max_val;
   int                    incdec, by;
   char                  *save_buffer;
   char                  *maps_to;
   char                  *maps_to_off;
   struct
   {
       char *string;
       int   integer;
   }                      dft_value;
   struct
   {
       char *string;
       int   integer;
   }                      make_dft_value;
   char                   separator;
   char                   separator_off;
   char                  *insert;
   char                  *prefix_by;
   Frontend_follow       *followed_by;
   Frontend_follow       *followed_by_off;
   Frontend_deselection  *deselections;
   Frontend_deselection  *deselections_off;
   Frontend_selection    *selections;
   Frontend_selection    *selections_off;
   Frontend_exclusion    *exclusions;
   Frontend_exclusion    *exclusions_off;
   Frontend_inclusion    *inclusions;
   Frontend_inclusion    *inclusions_off;
} Frontend_icon;

typedef struct
{
   dbox             d;
   char            *output_option;
   char            *wild_card;
   int              extends, extends_from, extends_to;
   int              save_from, num_hats;
   char            *save_prefix, *save_suffix;
   Frontend_icon   *icons;
   Frontend_menu    menu;
   Frontend_dragto *drags;
} Frontend_dbox;


/* ----------------- an output window ------------------ */
typedef struct Frontend_outputwin
{
   struct Frontend_outputwin *next;
   int                       flags;
   template                 *text_t;
   wimp_w                    text_w;
   dbox                      summary_d;
   char                     *buffer;
   int                      *line_offsets;
   int                       bufsize;
   int                       nlines;
   int                       initlines, yextent;
   int                       last_char;
   char                     *time_run;
} Frontend_outputwin;


/* ----------------- temporary file for datasave ------- */
typedef struct Frontend_tmpfilename
{
   struct Frontend_tmpfilename *next;
   char *name;
} Frontend_tmpfilename;

/* -------------------- task state --------------------- */

typedef struct state
{
   struct state         *next;
   wimp_t                child;       /* The taskid of the child */
   Frontend_outputwin   *output;      /* The associated text/summary object */
   dbox                  saveas;      /* The dbox used for saving file output */
   char                 *tmpfile;     /* temporary file used for output */
   char                 *outfile;     /* real output filename */
   char                 *cmdline;     /* which was used to run tool */
   char                 *extcmdline;  /* possible extended cmdline used */
   Frontend_tmpfilename *tmplist;     /* list of temporaries created due to datasave */
   int                   flags;       /* suspended/aborted etc */
   struct
   {
       int              ty;
       int              size;
   } result;                         /* output file details */
} Frontend_task;

/* ------------------- an application ------------------ */
typedef struct
{
   char                *name;
   char                *command;
   char                *version;
   int                  filetype;  /* input file type */
   int                  wimpslot;
   char                *dft_output_name;
   int                  flags;
   int                  tab_width; /* yes, signed int */
   Frontend_dbox       *setup;
   Frontend_orderentry *ordering, *make_ordering;
} Frontend_application;

/* -------------------------- wimp msg formats -------------------- */

typedef struct
{
   wimp_msghdr hdr;
   int         handle;
   char        application_name[12];
   char        cmdline[220];
} Frontend_msg_cmdline;

#endif

@


1.3
log
@  Improved redraw strategy; added 'quoted_string' option for icons, plus
  'ctrl_chars' and 'tab_width' for metaoptions.
Detail:
  Previously the redraw engine stayed one line behind current output as it
  did not know where to terminate redraw of the current line. At task exit
  it forced \n\r into the output to flush the last line. Now, the incoming
  data buffer is oversized by 1 byte and a \0 written in to give the redraw
  engine something to stop at. This allows it to redraw the current line,
  meaning e.g. "....[...]" progress indicators and so-on will work. It also
  means the \r\n hack isn't needed so saved output doesn't have a spurious
  blank line.

  For 'icn <n> maps_to ...' you can now say 'quoted_string' where you used
  to say 'string'. This encloses the relevant writable field's text in
  double quotes, escaping any double quotes from the writable with '\'. If
  you use 'prefix_by', all of the prefixes and strings are within the
  double quotes (rather than e.g. enclosing each item individually).

  Previously, control characters were output more or less directly. This
  could cause a crash for some nasty ones (e.g. send output to printer)
  or just cause redraw corruptions and the bell to ring. Now, any control
  characters are replaced with "?" by default, including &7F, except for
  tab (&09), which is replaced with a single space. Behaviour is chosen by
  the "ctrl_chars" metaoption, which takes parameters "text" for the usual
  behaviour as described, "escape" for !Edit-style "[aa]" escaping, or
  "hide" to not draw anything at all (so e.g. put "ctrl_chars escape" in
  your metaoptions section of the Desc file). Another new option is
  "tab_width"; tabs are now understood for all three output types. To
  avoid unduly changing existing output the default tab width is 1, but it
  can be 0 to hide tabs, or up to 32. The limit is arbitrary and only in
  place to stop the redraw engine trying to do silly things if given a
  very large value.

  Finally, lexer.c's list of text items was mirrored in lexer.h by a list
  of numbered items - all done by #define, so you had to manually renumber
  them all! This has been changed to an enum, with compiled output checked
  against the previous version - identical as expected.
Admin:
  Remember, you MUST NOT soft load this if you have any FrontEnd apps
  running already! Either quit them all (check there are no instantiations
  with *Modules) and then run it, or put it in !System and reboot. The new
  features have been tested with a work-in-progress !UpgCreate utility,
  and the usual set of DDE apps run to ensure they don't give any syntax
  errors. GNUDiff and Find tested fairly heavily. Builds ROM and RAM
  variants from clean.


Version 1.22. Tagged as 'FrontEnd-1_22'
@
text
@d22 1
d45 1
a45 1
/* ------ deselection/exclusion/dragging/following/ordering -------- */
d53 14
d74 1
a74 1
typedef struct Frontend_deselection
d76 1
a76 1
   struct Frontend_deselection *next;
d78 2
a79 2
   short deselect;
} Frontend_deselection;
d105 7
d123 1
d131 4
d136 3
a138 1
   Frontend_deselection      *deselections;
d158 1
d170 1
d174 5
d180 3
a182 1
   Frontend_deselection  *deselections;
@


1.2
log
@  Fixed the "spurious blank line" problem.
  Builds completely cleanly now.
Detail:
  The extra blank line problem has been solved.  This was caused by
    multicharacter lineend character sequences (\r\n or \n\r) being
    delivered split across different TaskWindow messages.
Admin:
  Tested by getting DecAOF to disassemble a large file.  No more spurious
    blank lines appeared.

Version 1.18. Tagged as 'FrontEnd-1_18'
@
text
@d21 1
d217 1
@


1.1
log
@Initial revision
@
text
@d79 1
a79 1
   int                     min_val, max_val;   
d86 1
a86 1
   union {char *string; int number;} data;   
d88 1
a88 1
   
d106 1
a106 1
   int                        bufsize;  
d110 1
a110 1
   
d173 1
d187 1
a187 1
typedef struct state 
d207 1
a207 1
typedef struct 
@


1.1.1.1
log
@  Initial import of FrontEnd module to CVS from Aquarius.
Detail:
  Code claims to build FrontEnd 1.16 (11 Jan 1995), but will not
    build in current build environment.
Admin:
  Does not compile - checked in for reference purposes only.
  Tagged appropriately.  Use tag FrontEnd-1_16 to extract version
    which builds in the current build environment.

Tagged as FrontEnd-Aquarius-1_16


@
text
@@
