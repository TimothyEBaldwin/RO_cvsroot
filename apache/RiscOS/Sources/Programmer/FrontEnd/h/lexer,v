head	1.3;
access;
symbols
	FrontEnd-1_34:1.3
	FrontEnd-1_33:1.3
	FrontEnd-1_32:1.3
	FrontEnd-1_31:1.3
	FrontEnd-1_30-2:1.3
	FrontEnd-1_30:1.3
	FrontEnd-1_29:1.3
	FrontEnd-1_28:1.3
	FrontEnd-1_27:1.3
	FrontEnd-1_26:1.3
	FrontEnd-1_25:1.3
	FrontEnd-1_24:1.3
	FrontEnd-1_23:1.3
	FrontEnd-1_22:1.2
	FrontEnd-1_21:1.1.1.1
	FrontEnd-1_20:1.1.1.1
	FrontEnd-1_19:1.1.1.1
	FrontEnd-1_18:1.1.1.1
	FrontEnd-1_17:1.1.1.1
	FrontEnd-1_16:1.1.1.1
	FrontEnd-Aquarius-1_16:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2001.05.22.13.58.41;	author ahodgkin;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.11.15.37.35;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	99.03.18.10.30.32;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.03.18.10.30.32;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  Great many changes and a few fixes.
Detail:
  See 'ReadMe' in the Docs directory. Summary - new includes and selections
  rules, rules_start/rules_end section, lists before rules keywords, actions
  can take place when icons go off as well as on, and more.
Admin:
  Tested new features a reasonable amount by playing around with the UpgFetch
  front-end. Link still behaves as it should, and all the other Desktop tools
  run without any parser errors or obvious faults in behaviour.


Version 1.23. Tagged as 'FrontEnd-1_23'
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:    lexer.h
 * Purpose:  lexical analysis of an application description
 * Author:   IDJ
 * History:  05-Apr-90: IDJ: created
 *           11-May-01: ADH: replaced huge daft list of #defines with enum for
 *                           keywords etc.; no change produced in compiled binary
 *
 */

#ifndef __lexer_h
#define __lexer_h

#ifndef BOOL
#include "bool.h"
#endif

/* This has to be kept in sync with the lexer_tokenstrings array
 * in lexer.c.
 */

enum
{
  /* Keywords */

  s_any = 0,
  s_buffer_size,
  s_by,
  s_command_is,
  s_ctrl_chars,
  s_dbox_end,
  s_dbox_start,
  s_decreases,
  s_defaults,
  s_deselect,
  s_deselections_end,
  s_deselections_start,
  s_deselects,
  s_display_dft_is,
  s_drag_to,
  s_escape,
  s_exclude,
  s_excludes,
  s_exclusions_end,
  s_exclusions_start,
  s_extends,
  s_fileoutput_end,
  s_fileoutput_start,
  s_filetype,
  s_followed_by,
  s_from,
  s_has_auto_run,
  s_has_auto_save,
  s_has_extended_cmdline,
  s_has_summary_window,
  s_has_text_window,
  s_hide,
  s_icn,
  s_iconbar,
  s_icons_end,
  s_icons_start,
  s_imports_end,
  s_imports_start,
  s_include,
  s_includes,
  s_inclusions_end,
  s_inclusions_start,
  s_increases,
  s_inserts,
  s_k,
  s_leafname,
  s_make_defaults,
  s_make_excludes,
  s_make_order_is,
  s_maps_to,
  s_max,
  s_menu,
  s_menu_end,
  s_menu_start,
  s_metaoptions_end,
  s_metaoptions_start,
  s_min,
  s_name,
  s_not_saved,
  s_number,
  s_off,
  s_on,
  s_order_is,
  s_output,
  s_output_dft_is,
  s_output_dft_string,
  s_output_option_is,
  s_prefix_by,
  s_produces_no_output,
  s_produces_output,
  s_quoted_string,
  s_rules_end,
  s_rules_start,
  s_select,
  s_selections_end,
  s_selections_start,
  s_selects,
  s_separator_is,
  s_spaces,
  s_string,
  s_sub_menu,
  s_summary,
  s_tab_width,
  s_text,
  s_to,
  s_tool_details_end,
  s_tool_details_start,
  s_toolflags,
  s_version,
  s_wild_card_is,
  s_wimpslot,

  /* If you add something so that s_wimpslot isn't the
   * last keyword any more, don't forget to update the
   * definition below.
   */

  #define NKEYWORDS (s_wimpslot + 1)

  /* The following are lexeme types */

  s_string_value,
  s_number_value,
  s_boolean_value,
  s_eof,
  s_semicolon,
  s_bra,
  s_ket,
  s_comma,
  s_dot,
  s_hat,
  s_keywd,

  s_unknown = -1
};


extern char *lexer_tokenstrings[];

extern int line_number;


#define LEXLEN  64
typedef struct
{
   int number;
   union
   {
      int   integer;
      BOOL  boolean;
   } value;
#if VARIABLE_LENGTH_TOKENS
   char *lexeme;
   unsigned int lexeme_size;
#else
   char lexeme[LEXLEN];
#endif
} lexer_token;

#if VARIABLE_LENGTH_TOKENS
extern void lexer_next_token(lexer_token *token);
extern void lexer_copy_token(lexer_token *dst, lexer_token *src);
#else
extern lexer_token lexer_next_token(void);
#endif

#endif





@


1.2
log
@  Improved redraw strategy; added 'quoted_string' option for icons, plus
  'ctrl_chars' and 'tab_width' for metaoptions.
Detail:
  Previously the redraw engine stayed one line behind current output as it
  did not know where to terminate redraw of the current line. At task exit
  it forced \n\r into the output to flush the last line. Now, the incoming
  data buffer is oversized by 1 byte and a \0 written in to give the redraw
  engine something to stop at. This allows it to redraw the current line,
  meaning e.g. "....[...]" progress indicators and so-on will work. It also
  means the \r\n hack isn't needed so saved output doesn't have a spurious
  blank line.

  For 'icn <n> maps_to ...' you can now say 'quoted_string' where you used
  to say 'string'. This encloses the relevant writable field's text in
  double quotes, escaping any double quotes from the writable with '\'. If
  you use 'prefix_by', all of the prefixes and strings are within the
  double quotes (rather than e.g. enclosing each item individually).

  Previously, control characters were output more or less directly. This
  could cause a crash for some nasty ones (e.g. send output to printer)
  or just cause redraw corruptions and the bell to ring. Now, any control
  characters are replaced with "?" by default, including &7F, except for
  tab (&09), which is replaced with a single space. Behaviour is chosen by
  the "ctrl_chars" metaoption, which takes parameters "text" for the usual
  behaviour as described, "escape" for !Edit-style "[aa]" escaping, or
  "hide" to not draw anything at all (so e.g. put "ctrl_chars escape" in
  your metaoptions section of the Desc file). Another new option is
  "tab_width"; tabs are now understood for all three output types. To
  avoid unduly changing existing output the default tab width is 1, but it
  can be 0 to hide tabs, or up to 32. The limit is arbitrary and only in
  place to stop the redraw engine trying to do silly things if given a
  very large value.

  Finally, lexer.c's list of text items was mirrored in lexer.h by a list
  of numbered items - all done by #define, so you had to manually renumber
  them all! This has been changed to an enum, with compiled output checked
  against the previous version - identical as expected.
Admin:
  Remember, you MUST NOT soft load this if you have any FrontEnd apps
  running already! Either quit them all (check there are no instantiations
  with *Modules) and then run it, or put it in !System and reboot. The new
  features have been tested with a work-in-progress !UpgCreate utility,
  and the usual set of DDE apps run to ensure they don't give any syntax
  errors. GNUDiff and Find tested fairly heavily. Builds ROM and RAM
  variants from clean.


Version 1.22. Tagged as 'FrontEnd-1_22'
@
text
@d48 1
d55 1
d77 4
d110 6
@


1.1
log
@Initial revision
@
text
@d19 2
d31 3
a33 1
/* keywords */
d35 3
a37 88
#define NKEYWORDS  74
#define  s_any                   0
#define  s_buffer_size           1
#define  s_by                    2
#define  s_command_is            3
#define  s_dbox_end              4
#define  s_dbox_start            5
#define  s_decreases             6
#define  s_defaults              7
#define  s_deselections_end      8 
#define  s_deselections_start    9
#define  s_deselects            10
#define  s_display_dft_is       11
#define  s_drag_to              12
#define  s_excludes             13
#define  s_exclusions_end       14
#define  s_exclusions_start     15
#define  s_extends              16
#define  s_fileoutput_end       17
#define  s_fileoutput_start     18
#define  s_filetype             19
#define  s_followed_by          20
#define  s_from                 21
#define  s_has_auto_run         22
#define  s_has_auto_save        23
#define  s_has_extended_cmdline 24
#define  s_has_summary_window   25
#define  s_has_text_window      26
#define  s_icn                  27
#define  s_iconbar              28
#define  s_icons_end            29
#define  s_icons_start          30
#define  s_imports_end          31
#define  s_imports_start        32
#define  s_increases            33
#define  s_inserts              34
#define  s_k                    35
#define  s_leafname             36
#define  s_make_defaults        37
#define  s_make_excludes        38
#define  s_make_order_is        39
#define  s_maps_to              40
#define  s_max                  41
#define  s_menu                 42
#define  s_menu_end             43
#define  s_menu_start           44
#define  s_metaoptions_end      45
#define  s_metaoptions_start    46
#define  s_min                  47
#define  s_name                 48
#define  s_not_saved            49
#define  s_number               50
#define  s_off                  51
#define  s_on                   52
#define  s_order_is             53
#define  s_output               54
#define  s_output_dft_is        55
#define  s_output_dft_string    56
#define  s_output_option_is     57
#define  s_prefix_by            58
#define  s_produces_no_output   59
#define  s_produces_output      60
#define  s_separator_is         61
#define  s_spaces               62
#define  s_string               63
#define  s_sub_menu             64
#define  s_summary              65
#define  s_text                 66
#define  s_to                   67
#define  s_tool_details_end     68
#define  s_tool_details_start   69
#define  s_toolflags            70
#define  s_version              71
#define  s_wild_card_is         72
#define  s_wimpslot             73

/* lexeme types */
#define  s_string_value       74
#define  s_number_value       75
#define  s_boolean_value      76
#define  s_eof                77
#define  s_semicolon          78
#define  s_bra                79
#define  s_ket                80
#define  s_comma              81
#define  s_dot                82
#define  s_hat                83
#define  s_keywd              84
d39 100
d140 2
a141 1
#define  s_unknown           (-1)
d150 1
a150 1
typedef struct 
d154 1
a154 1
   { 
d175 1
a175 1
 
@


1.1.1.1
log
@  Initial import of FrontEnd module to CVS from Aquarius.
Detail:
  Code claims to build FrontEnd 1.16 (11 Jan 1995), but will not
    build in current build environment.
Admin:
  Does not compile - checked in for reference purposes only.
  Tagged appropriately.  Use tag FrontEnd-1_16 to extract version
    which builds in the current build environment.

Tagged as FrontEnd-Aquarius-1_16


@
text
@@
