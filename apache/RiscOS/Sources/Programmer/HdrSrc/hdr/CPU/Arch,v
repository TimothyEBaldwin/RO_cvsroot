head	4.10;
access;
symbols
	HdrSrc-2_77:4.10
	HdrSrc-2_76:4.10
	HdrSrc-2_75:4.10
	HdrSrc-2_74:4.10
	HdrSrc-2_73:4.10
	HdrSrc-2_72:4.10
	HdrSrc-2_71:4.10
	HdrSrc-2_70:4.10
	HdrSrc-2_69:4.10
	HdrSrc-2_68:4.10
	HdrSrc-2_67:4.10
	HdrSrc-2_66:4.10
	HdrSrc-2_65:4.10
	HdrSrc-2_64:4.10
	HdrSrc-2_63:4.10
	HdrSrc-2_62:4.9
	HdrSrc-2_61:4.9
	HdrSrc-2_60:4.9
	HdrSrc-2_59:4.9
	HdrSrc-2_58:4.9
	HdrSrc-2_57:4.8
	HdrSrc-2_56:4.8
	HdrSrc-2_55:4.8
	HdrSrc-2_54:4.7
	HdrSrc-2_53:4.7
	HdrSrc-2_52:4.7
	HdrSrc-2_51:4.7
	HdrSrc-2_50:4.7
	HdrSrc-2_49:4.6
	HdrSrc-2_48:4.6
	HdrSrc-2_47:4.6
	HdrSrc-2_46-4_247_2_1:4.6.2.1
	XCompile:4.6.0.2
	XCompile_bp:4.6
	HdrSrc-2_46:4.6
	HdrSrc-2_45:4.6
	HdrSrc-2_44:4.6
	HdrSrc-2_43:4.6
	HdrSrc-2_42:4.6
	HdrSrc-2_41:4.6
	HdrSrc-2_40-1:4.6
	HdrSrc-2_40:4.6
	HdrSrc-2_39:4.6
	HdrSrc-2_38:4.6
	HdrSrc-2_37:4.6
	HdrSrc-2_36:4.6
	HdrSrc-2_35:4.6
	HdrSrc-2_34:4.6
	HdrSrc-2_33:4.6
	HdrSrc-2_32:4.6
	HdrSrc-2_31:4.6
	HdrSrc-2_30:4.6
	HdrSrc-2_29:4.6
	HdrSrc-2_28:4.6
	HdrSrc-2_27:4.6
	HdrSrc-2_26:4.6
	HdrSrc-2_25:4.6
	HdrSrc-2_24:4.6
	HdrSrc-2_23:4.5
	HdrSrc-2_22:4.5
	HdrSrc-2_21:4.5
	HdrSrc-2_20:4.5
	HdrSrc-2_19:4.5
	HdrSrc-2_18:4.5
	HdrSrc-2_17:4.5
	HdrSrc-2_16:4.5
	HdrSrc-2_15:4.5
	HdrSrc-2_14:4.5
	HdrSrc-2_13:4.5
	HdrSrc-2_12:4.5
	HdrSrc-2_11:4.5
	HdrSrc-2_10:4.5
	HdrSrc-2_09:4.5
	HdrSrc-2_08:4.5
	HdrSrc-2_07:4.5
	HdrSrc-2_06:4.5
	HdrSrc-2_05:4.5
	HdrSrc-2_04:4.5
	HdrSrc-2_03:4.5
	HdrSrc-2_02:4.5
	HdrSrc-2_01:4.5
	HdrSrc-2_00:4.5
	HdrSrc-1_99:4.5
	HdrSrc-1_98:4.5
	HdrSrc-1_97:4.5
	HdrSrc-1_96:4.5
	HdrSrc-1_95:4.5
	HdrSrc-1_94:4.5
	HdrSrc-1_93:4.5
	HdrSrc-1_92:4.5
	HdrSrc-1_91:4.5
	HdrSrc-1_90:4.5
	HdrSrc-1_89:4.5
	HdrSrc-1_88:4.5
	HdrSrc-1_87:4.5
	HdrSrc-1_86:4.5
	HdrSrc-1_85:4.5
	HdrSrc-1_84:4.5
	HdrSrc-1_83:4.5
	HdrSrc-1_82:4.5
	HdrSrc-1_81:4.4
	HdrSrc-1_80:4.4
	HdrSrc-1_79:4.4
	HdrSrc-1_78:4.4
	HdrSrc-1_77:4.4
	HdrSrc-1_76:4.4
	Cortex_merge:4.1.2.4
	HdrSrc-1_62-4_162_2_15:4.1.2.4
	HdrSrc-1_75:4.4
	HdrSrc-1_62-4_162_2_14:4.1.2.4
	HdrSrc-1_74:4.4
	HdrSrc-1_62-4_162_2_13:4.1.2.3
	HdrSrc-1_62-4_162_2_12:4.1.2.3
	HdrSrc-1_73:4.4
	HdrSrc-1_72:4.4
	HdrSrc-1_62-4_162_2_11:4.1.2.3
	HdrSrc-1_62-4_162_2_10:4.1.2.3
	HdrSrc-1_71:4.4
	HdrSrc-1_70:4.4
	HdrSrc-1_69:4.4
	Cortex_bp:4.3
	HdrSrc-1_62-4_162_2_9:4.1.2.3
	HdrSrc-1_62-4_162_2_8:4.1.2.3
	HdrSrc-1_68:4.3
	HdrSrc-1_62-4_162_2_7:4.1.2.3
	HdrSrc-1_62-4_162_2_6:4.1.2.3
	HdrSrc-1_62-4_162_2_5:4.1.2.3
	HdrSrc-1_62-4_162_2_4:4.1.2.3
	HdrSrc-1_67:4.3
	HdrSrc-1_66:4.2
	HdrSrc-1_62-4_162_2_3:4.1.2.2
	Cortex:4.1.0.2
	HdrSrc-1_65:4.1;
locks; strict;
comment	@# @;


4.10
date	2016.05.28.18.30.08;	author jlee;	state Exp;
branches;
next	4.9;
commitid	DbPnp2msZ7Galh8z;

4.9
date	2016.02.29.08.44.32;	author bavison;	state Exp;
branches;
next	4.8;
commitid	odsJoBBMwnIBXMWy;

4.8
date	2015.11.08.02.42.34;	author bavison;	state Exp;
branches;
next	4.7;
commitid	aGqeeBPfobqCAeIy;

4.7
date	2015.02.02.11.33.45;	author bavison;	state Exp;
branches;
next	4.6;
commitid	9PbSXB0QlH2Uuq8y;

4.6
date	2013.01.27.16.15.08;	author bavison;	state Exp;
branches
	4.6.2.1;
next	4.5;
commitid	wCHkhF97vZhdIRBw;

4.5
date	2011.06.03.22.34.54;	author bavison;	state Exp;
branches;
next	4.4;
commitid	1MRpLHHoRzAcehmv;

4.4
date	2009.06.14.01.33.13;	author bavison;	state Exp;
branches;
next	4.3;

4.3
date	2009.05.08.19.43.00;	author bavison;	state Exp;
branches;
next	4.2;

4.2
date	2009.05.08.13.30.04;	author srevill;	state Exp;
branches;
next	4.1;

4.1
date	2009.05.06.16.13.25;	author bavison;	state Exp;
branches
	4.1.2.1;
next	;

4.6.2.1
date	2014.09.24.20.51.15;	author bavison;	state Exp;
branches;
next	;
commitid	FLu4L8VxkYPcNDRx;

4.1.2.1
date	2009.05.06.16.13.25;	author bavison;	state dead;
branches;
next	4.1.2.2;

4.1.2.2
date	2009.05.06.16.17.56;	author bavison;	state Exp;
branches;
next	4.1.2.3;

4.1.2.3
date	2009.05.08.19.44.48;	author bavison;	state Exp;
branches;
next	4.1.2.4;

4.1.2.4
date	2010.11.20.17.09.42;	author jlee;	state Exp;
branches;
next	;


desc
@@


4.10
log
@Add new "26" machine type. Simplify ARM2 support.
Detail:
  hdr/Machine/26, hdr/Machine/Machine - Add new "26" machine type, which targets all 26 bit machines/OS versions (running only in 26 bit mode)
  hdr/CPU/Arch - Use ELIF to avoid bracket spam. Remove duplicate CortexA7 case.
  hdr/CPU/Generic26 - Add NOPs to PSR manipulation macros in order to make them ARM2-safe (Generic32 macros are already structured to have suitable NOPs when generating 32bit-neutral code, so it makes sense for Generic26 to take care of ARM2 as well). This removes the need for components which use these macros to insert any manual NOPs, whether for the StrongARM MSR bug or the ARM2 TEQP bug.
  hdr/CPU/Generic32 - Flag the StrongARM MSR NOP diagnostic message as a warning, so the line number can be included in the output, so developers can more easily investigate the issue.
Admin:
  Tested with PlingSystem build


Version 2.63. Tagged as 'HdrSrc-2_63'
@
text
@; Copyright (c) 2009, RISC OS Open Ltd
; All rights reserved.
; 
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY RISC OS OPEN LTD ''AS IS'' AND ANY EXPRESS OR
; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
; EVENT SHALL RISC OS OPEN LTD BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
; WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
; OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


; Historically, RISC OS has usually tried to cater for all CPU types at run
; time. This was partly because CPUs were swappable in some machines, and
; partly because of economies of scale when manufacturing masked ROMs. Neither
; of these arguments are as important in today's environment.
; 
; It is probably desirable for disc components to continue to be as widely
; applicable as possible to help with version control. However, there may be
; exceptions in certain cases, e.g. codecs will often want to be tuned to a
; specific architecture. But ROM builds can benefit, in terms of code size,
; speed and maintainability, from being targetted at the correct CPU -
; previously, such customisation was mainly confined to the FPASC/FPEmulator.
; 
; This header file translates between the "Machine" build variable and a set of
; assembly-time variables that describe the range of CPUs which must be
; supported by that build. Thus, the author of the software can switch
; depending upon the specific CPU feature that they require, and build
; maintainers can select the range of CPUs that a given build must run on.
; Typically, except for IOMD machines, a ROM build will only target one CPU,
; but a disc build will target a wide range of CPUs.
; 
; The assembler variables are of the form
; 
;  SupportARMvx -> at least one supported platform is of architecture x or later
;  NoARMvx      -> at least one supported platform is of architecture before x
; 
; or for architecture variants (usually a single letter), the variables
; indicate whether one or more supported platforms do or don't support that
; variant.


; Example 1: to provide a set of implementations to be selected on the basis of
; the oldest required architecture
; 
;  [ NoARMa
;    ; implementation suitable for ARMv2 or later
;  |
;  [ NoARMv3
;    ; implementation suitable for ARMv2a or later
;  |
;  [ NoARMv4
;    ; implementation suitable for ARMv3 or later
;  |
;    ; implementation suitable for ARMv4 or later
;  ]
;  ]
;  ]

; Example 2: to bracket an implementation suitable for ARMv2 to v4 but not v5
; onwards - for example because it stores flags in bits 0 and 1 of PC addresses
; on the stack
; 
;  [ :LNOT: SupportARMv5
;    ; insert code here
;  |
;    ! 1, "No suitable implementation for required architecture(s) yet"
;  ]

; Example 3: to bracket an implementation only suitable for v4T and v5 -
; for example because it uses fine (1K) page tables
; 
;  [ SupportARMv6 :LOR: NoARMT
;    ; Build targets include pre-v4T and/or v6-or-later
;    ! 1, "No suitable implementation for required architecture(s) yet"
;  |
;    ; insert code here
;  ]

; Example 4: change from SVC mode to IRQ mode in the minimal number of
; instructions for the required architecture(s)
; 
;  [ :LNOT: SupportARMv3
;    ; Can only be executed in 26-bit mode
;    TEQP    PC, #2
;    NOP
;  |
;  [ NoARMG
;    ; Could be either 26-bit mode or 32-bit mode
;    TEQ     PC, PC
;    MSREQ   CPSR_c, #&12
;    TEQNEP  PC, #2
;    NOP
;  |
;    ; Can only be executed in 32-bit mode
;    MSR     CPSR_c, #&12
;  ]
;  ]

; Example 5: load a word from address in r0, which may be non-word-aligned,
; into r1. Registers r0, r2 and r3 may be corrupted.
; 
; Under ARMv6, unaligned behaviour can be configured either way, but since
; ARMv7 mandates the new behaviour we have to handle it anyway, so we may as
; well run ARMv6 CPUs in ARMv7 mode.
; 
;  [ :LNOT: NoARMv6
;         ; Only has to operate on CPUs with automatic unaligned LDR
;         LDR     r1,[r0]
;  |
;         ANDS    r3,r0,#3
;    [ SupportARMv6
;         ; Need to handle both CPU types at run time
;         BICNE   r0,r0,#3
;    |
;         ; Only has to operate on CPUs with traditional ARM LDM behaviour
;         ; where the bottom two bits of r0 are ignored
;    ]
;         LDMNEIA r0!,{r1,r2}
;         MOVNE   r3,r3,LSL #3
;         LDREQ   r1,[r0]
;         MOVNE   r1,r1,LSR r3
;         RSBNE   r3,r3,#32
;         ORRNE   r1,r1,r2,LSL r3
;  ]


OldOpt  SETA    {OPT}
        OPT     OptNoList+OptNoP1List

 [ :LNOT: :DEF: Included_Hdr_CPU_Arch
        GBLL    Included_Hdr_CPU_Arch
Included_Hdr_CPU_Arch SETL {TRUE}

        GET     Hdr:Machine.<Machine>

; MRS/MSR and USR32, IRQ32, FIQ32, SVC32, ABT and UND modes
MchFlg_v3   * 2_00000000000000000000000000000001
; LDRH/STRH, LDRSB/H, SYS mode
MchFlg_v4   * 2_00000000000000000000000000000010
; CLZ, BLX, BKPT, LDC2, STC2, CDP2, MCR2, MRC2
MchFlg_v5   * 2_00000000000000000000000000000100
; LDREX/STREX, cross-mode exception save/restore, endian-switching, packed byte
; and halfword add/subtract/absolute/saturate/halve/pack/extract,
; sign-extension, saturation, 32+32+32*32, 32+16*16+16*16, 64+16*16+16*16 and
; MSW 32*32 MLA, MLS and MUL, MCRR2, MRRC2
MchFlg_v6   * 2_00000000000000000000000000001000
; DBG, DMB, PLI, PLDW and ThumbEE instruction set
MchFlg_v7   * 2_00000000000000000000000000010000
; CRC32, HLT, LDA(EX), SEVL, STL(EX), VMAXNM, VMINNM, VRINT, VSEL
MchFlg_v8   * 2_00000000000000000000000000100000
; SWP and SWPB
MchFlg_a    * 2_00000000000000000000000001000000
; Hardware FPA - FPA10 if v2 (ARM3); FPA11 if v3 (ARM700 or ARM7500FE)
MchFlg_F    * 2_00000000000000000000000010000000
; Withdrawal of 26-bit modes
MchFlg_G    * 2_00000000000000000000000100000000
; 64+32x32 bit MLA and MUL
MchFlg_M    * 2_00000000000000000000001000000000
; BX and Thumb - Thumbv1 if ARMv4; Thumbv2 if ARMv5; Thumbv3 if ARMv6
; no established terminology for later revisions
MchFlg_T    * 2_00000000000000000000010000000000
; Enhanced DSP extension - 32+16*16, 33+32*16, 64+16*16 MLA and MUL,
; saturated ADD/SUB
MchFlg_E    * 2_00000000000000000000100000000000
; PLD, LDRD/STRD, MRRC/MCRR
MchFlg_P    * 2_00000000000000000001000000000000
; Intel XScale extensions - 40+32*32, 40+16*16, 40+16*16+16*16 MLA,
; mini data cache
MchFlg_X    * 2_00000000000000000010000000000000
; Jazelle extension - BXJ
MchFlg_J    * 2_00000000000000000100000000000000
; Multiprocessing extensions - CLREX, YIELD, WFE, WFI, SEV, SMI and
; security extensions
MchFlg_K    * 2_00000000000000001000000000000000
; Thumb 2 and more - MOVW, MOVH, bitfield operations, DSB, ISB,
; 8/16/64 bit LDR/STREX, LDRT/STRT for halfwords and signed bytes, 32-32*32 MLS
MchFlg_T2   * 2_00000000000000010000000000000000
; Virtualisation extension - ERET, HVC, banked MRS and MSR and hardware divide
MchFlg_VE   * 2_00000000000000100000000000000000
; Cryptographic extension - AES, SHA1, SHA256
MchFlg_C    * 2_00000000000001000000000000000000
; VFP - VFPv1 if ARMv5T; VFPv2 if ARMv5TE or ARMv6; VFPv3 if ARMv7
MchFlg_V    * 2_00000000000010000000000000000000
; VFP D variant (double precision)
MchFlg_VD   * 2_00000000000100000000000000000000
; VFP 32 double-precision registers variant
MchFlg_V32  * 2_00000000001000000000000000000000
; VFP half-precision variant
MchFlg_VH   * 2_00000000010000000000000000000000
; VFPv4 - fused multiply-accumulate
MchFlg_Vv4  * 2_00000000100000000000000000000000
; Advanced SIMD extensions - integer only if no VFP; FP half or single
; precision options mirror the VFP options
MchFlg_A     * 2_00000010000000000000000000000000
; Remaining flags reserved for future use
;MchFlg_     * 2_00000100000000000000000000000000
;MchFlg_     * 2_00001000000000000000000000000000
;MchFlg_     * 2_00010000000000000000000000000000
;MchFlg_     * 2_00100000000000000000000000000000
;MchFlg_     * 2_01000000000000000000000000000000
;MchFlg_     * 2_10000000000000000000000000000000

; Common flag combinations, to make the ArchitectureOption macro smaller
MchFlgs_v3   * 0            :OR: MchFlg_v3 :OR: MchFlg_a
MchFlgs_v4   * MchFlgs_v3   :OR: MchFlg_v4 :OR: MchFlg_M
MchFlgs_v4T  * MchFlgs_v4   :OR: MchFlg_G  :OR: MchFlg_T
MchFlgs_v5T  * MchFlgs_v4T  :OR: MchFlg_v5
MchFlgs_v5TE * MchFlgs_v5T  :OR: MchFlg_E  :OR: MchFlg_P
MchFlgs_v6   * MchFlgs_v5TE :OR: MchFlg_v6 :OR: MchFlg_J
MchFlgs_v7   * MchFlgs_v6   :OR: MchFlg_v7 :OR: MchFlg_K :OR: MchFlg_T2
MchFlgs_v8   * (MchFlgs_v7 :AND: :NOT: MchFlg_a) :OR: MchFlg_v8 :OR: MchFlg_VE :OR: MchFlg_V :OR: MchFlg_VD :OR: MchFlg_V32 :OR: MchFlg_VH :OR: MchFlg_Vv4 :OR: MchFlg_A

        GBLA    MchFlgs_Cumulative
MchFlgs_Cumulative    SETA 0
        GBLA    MchFlgs_CumulativeNOT
MchFlgs_CumulativeNOT SETA 0

        MACRO
$lab    ArchitectureOption $arch
        LCLA MchFlgs
 [ "$arch" = "v2"
MchFlgs SETA 0
 ELIF "$arch" = "v2a"
MchFlgs SETA MchFlg_a
 ELIF "$arch" = "v2a_FPA"
MchFlgs SETA MchFlg_a :OR: MchFlg_F
 ELIF "$arch" = "v3"
MchFlgs SETA MchFlgs_v3
 ELIF "$arch" = "v3_FPA"
MchFlgs SETA MchFlgs_v3 :OR: MchFlg_F
 ELIF "$arch" = "v3G"
MchFlgs SETA MchFlgs_v3 :OR: MchFlg_G
 ELIF "$arch" = "v3M"
MchFlgs SETA MchFlgs_v3 :OR: MchFlg_M
 ELIF "$arch" = "v4xM"
MchFlgs SETA MchFlgs_v4 :AND: :NOT: MchFlg_M
 ELIF "$arch" = "v4"
MchFlgs SETA MchFlgs_v4
 ELIF "$arch" = "v4TxM"
MchFlgs SETA MchFlgs_v4T :AND: :NOT: MchFlg_M
 ELIF "$arch" = "v4T"
MchFlgs SETA MchFlgs_v4T
 ELIF "$arch" = "v5xM"
MchFlgs SETA MchFlgs_v5T :AND: :NOT: (MchFlg_M :OR: MchFlg_T)
 ELIF "$arch" = "v5"
MchFlgs SETA MchFlgs_v5T :AND: :NOT: MchFlg_T
 ELIF "$arch" = "v5TxM"
MchFlgs SETA MchFlgs_v5T :AND: :NOT: MchFlg_M
 ELIF "$arch" = "v5T"
MchFlgs SETA MchFlgs_v5T
 ELIF "$arch" = "v5T_VFP1"
MchFlgs SETA MchFlgs_v5T :OR: MchFlg_V
 ELIF "$arch" = "v5T_VFP1D"
MchFlgs SETA MchFlgs_v5T :OR: MchFlg_V :OR: MchFlg_VD
 ELIF "$arch" = "v5TExP"
MchFlgs SETA MchFlgs_v5TE :AND: :NOT: MchFlg_P
 ELIF "$arch" = "v5TE"
MchFlgs SETA MchFlgs_v5TE
 ELIF "$arch" = "v5TEX"
MchFlgs SETA MchFlgs_v5TE :OR: MchFlg_X
 ELIF "$arch" = "v5TE_VFP2"
MchFlgs SETA MchFlgs_v5TE :OR: MchFlg_V
 ELIF "$arch" = "v5TE_VFP2D"
MchFlgs SETA MchFlgs_v5TE :OR: MchFlg_V :OR: MchFlg_VD
 ELIF "$arch" = "v5TEJ"
MchFlgs SETA MchFlgs_v5TE :OR: MchFlg_J
 ELIF "$arch" = "v5TEJ_VFP2"
MchFlgs SETA MchFlgs_v5TE :OR: MchFlg_J :OR: MchFlg_V
 ELIF "$arch" = "v5TEJ_VFP2D"
MchFlgs SETA MchFlgs_v5TE :OR: MchFlg_J :OR: MchFlg_V :OR: MchFlg_VD
 ELIF "$arch" = "v6"
MchFlgs SETA MchFlgs_v6
 ELIF "$arch" = "v6_VFP2"
MchFlgs SETA MchFlgs_v6 :OR: MchFlg_V
 ELIF "$arch" = "v6_VFP2D"
MchFlgs SETA MchFlgs_v6 :OR: MchFlg_V :OR: MchFlg_VD
 ELIF "$arch" = "v6K"
MchFlgs SETA MchFlgs_v6 :OR: MchFlg_K
 ELIF "$arch" = "v6K_VFP2"
MchFlgs SETA MchFlgs_v6 :OR: MchFlg_K :OR: MchFlg_V
 ELIF "$arch" = "v6K_VFP2D"
MchFlgs SETA MchFlgs_v6 :OR: MchFlg_K :OR: MchFlg_V :OR: MchFlg_VD
 ELIF "$arch" = "v6T2"
MchFlgs SETA MchFlgs_v6 :OR: MchFlg_T2
 ELIF "$arch" = "v6T2_VFP2"
MchFlgs SETA MchFlgs_v6 :OR: MchFlg_T2 :OR: MchFlg_V
 ELIF "$arch" = "v6T2_VFP2D"
MchFlgs SETA MchFlgs_v6 :OR: MchFlg_T2 :OR: MchFlg_V :OR: MchFlg_VD
 ELIF "$arch" = "v7"
MchFlgs SETA MchFlgs_v7
 ELIF "$arch" = "v7_VFP3"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V
 ELIF "$arch" = "v7_VFP3D"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_VD
 ELIF "$arch" = "v7_VFP3D32"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_VD :OR: MchFlg_V32
 ELIF "$arch" = "v7_VFP3H"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_VH
 ELIF "$arch" = "v7_VFP3DH"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_VD :OR: MchFlg_VH
 ELIF "$arch" = "v7_VFP3D32H"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_VD :OR: MchFlg_V32 :OR: MchFlg_VH
 ELIF "$arch" = "v7_SIMD"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_A
 ELIF "$arch" = "v7_VFP3_SIMD"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_A
 ELIF "$arch" = "v7_VFP3D32_SIMD"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_VD :OR: MchFlg_V32 :OR: MchFlg_A
 ELIF "$arch" = "v7_VFP3H_SIMD"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_VH :OR: MchFlg_A
 ELIF "$arch" = "v7_VFP3D32H_SIMD"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_VD :OR: MchFlg_V32 :OR: MchFlg_VH :OR: MchFlg_A
 ELIF "$arch" = "v7VE_VFP4D32_SIMD"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_VE :OR: MchFlg_V :OR: MchFlg_VD :OR: MchFlg_V32 :OR: MchFlg_VH :OR: MchFlg_Vv4 :OR: MchFlg_A
 ELIF "$arch" = "v8"
MchFlgs SETA MchFlgs_v8
 |
   ! 1, "Unrecognised architecture: $arch"
 ]
MchFlgs_Cumulative    SETA MchFlgs_Cumulative    :OR: MchFlgs
MchFlgs_CumulativeNOT SETA MchFlgs_CumulativeNOT :OR: :NOT: MchFlgs
        MEND

      [ "$Machine" = "Archimedes" ; pre-IOMD Acorn machines, 26-bit only
        ArchitectureOption v2
        ArchitectureOption v2a
        ArchitectureOption v2a_FPA
      ELIF "$Machine" = "26" ; All 26-bit capable machines, running in 26-bit mode
        ArchitectureOption v2
        ArchitectureOption v2a
        ArchitectureOption v2a_FPA
        ArchitectureOption v3
        ArchitectureOption v3_FPA
        ArchitectureOption v4
      ELIF "$Machine" = "32" ; basic 32-bit capable machines (used for many ARM7TDMI and ARM9 ports)
        ArchitectureOption v3
        ArchitectureOption v3_FPA
        ArchitectureOption v4
        ArchitectureOption v4T
      ELIF "$Machine" = "IOMD" ; 32-bit IOMD-class machines ARM6/ARM7/StrongARM
        ArchitectureOption v3
        ArchitectureOption v3_FPA
        ArchitectureOption v4
      ELIF "$Machine" = "Tungsten" ; Iyonix PC
        ArchitectureOption v5TEX
      ELIF "$Machine" = "ARM11ZF"
        ArchitectureOption v6K_VFP2D
      ELIF "$Machine" = "RPi" ; Raspberry Pi versions are similar enough that one ROM can handle three architectures
        ArchitectureOption v6K_VFP2D
        ArchitectureOption v7VE_VFP4D32_SIMD
        ArchitectureOption v8
      ELIF "$Machine" = "CortexA7" ; Cortex A7, A15 or A17, e.g. BCM2836, TI OMAP543x, TI AM5728
        ArchitectureOption v7VE_VFP4D32_SIMD
      ELIF "$Machine" = "CortexA8" ; Cortex A8, e.g. TI OMAP35xx
        ArchitectureOption v7_VFP3D32_SIMD
      ELIF "$Machine" = "CortexA9" ; Cortex A9, e.g. TI OMAP44xx, Freescale i.MX6
        ArchitectureOption v7_VFP3D32H_SIMD
      ELIF "$Machine" = "All" ; if the target code is required to run on
                           ; any RISC OS machine
        ArchitectureOption v2
        ArchitectureOption v2a_FPA
        ArchitectureOption v8
      ELIF "$Machine" = "All32" ; if the target code is required to run on
                             ; any 32-bit capable RISC OS machine
        ArchitectureOption v3
        ArchitectureOption v3_FPA
        ArchitectureOption v8
      |
        ! 1, "Unrecognised machine: $Machine"
      ]

        GBLL    SupportARMv3
SupportARMv3 SETL  (MchFlgs_Cumulative :AND: MchFlg_v3) > 0
        GBLL    NoARMv3
NoARMv3 SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_v3) > 0

        GBLL    SupportARMv4
SupportARMv4 SETL  (MchFlgs_Cumulative :AND: MchFlg_v4) > 0
        GBLL    NoARMv4
NoARMv4 SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_v4) > 0

        GBLL    SupportARMv5
SupportARMv5 SETL  (MchFlgs_Cumulative :AND: MchFlg_v5) > 0
        GBLL    NoARMv5
NoARMv5 SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_v5) > 0

        GBLL    SupportARMv6
SupportARMv6 SETL  (MchFlgs_Cumulative :AND: MchFlg_v6) > 0
        GBLL    NoARMv6
NoARMv6 SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_v6) > 0

        GBLL    SupportARMv7
SupportARMv7 SETL  (MchFlgs_Cumulative :AND: MchFlg_v7) > 0
        GBLL    NoARMv7
NoARMv7 SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_v7) > 0

        GBLL    SupportARMv8
SupportARMv8 SETL  (MchFlgs_Cumulative :AND: MchFlg_v8) > 0
        GBLL    NoARMv8
NoARMv8 SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_v8) > 0

        GBLL    SupportARMa
SupportARMa SETL   (MchFlgs_Cumulative :AND: MchFlg_a) > 0
        GBLL    NoARMa
NoARMa  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_a) > 0

        GBLL    SupportARMF
SupportARMF SETL   (MchFlgs_Cumulative :AND: MchFlg_F) > 0
        GBLL    NoARMF
NoARMF  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_F) > 0

        GBLL    SupportARMG
SupportARMG SETL   (MchFlgs_Cumulative :AND: MchFlg_G) > 0
        GBLL    NoARMG
NoARMG  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_G) > 0

        GBLL    SupportARMM
SupportARMM SETL   (MchFlgs_Cumulative :AND: MchFlg_M) > 0
        GBLL    NoARMM
NoARMM  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_M) > 0

        GBLL    SupportARMT
SupportARMT SETL   (MchFlgs_Cumulative :AND: MchFlg_T) > 0
        GBLL    NoARMT
NoARMT  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_T) > 0

        GBLL    SupportARME
SupportARME SETL   (MchFlgs_Cumulative :AND: MchFlg_E) > 0
        GBLL    NoARME
NoARME  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_E) > 0

        GBLL    SupportARMP
SupportARMP SETL   (MchFlgs_Cumulative :AND: MchFlg_P) > 0
        GBLL    NoARMP
NoARMP  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_P) > 0

        GBLL    SupportARMX
SupportARMX SETL   (MchFlgs_Cumulative :AND: MchFlg_X) > 0
        GBLL    NoARMX
NoARMX  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_X) > 0

        GBLL    SupportARMJ
SupportARMJ SETL   (MchFlgs_Cumulative :AND: MchFlg_J) > 0
        GBLL    NoARMJ
NoARMJ  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_J) > 0

        GBLL    SupportARMK
SupportARMK SETL   (MchFlgs_Cumulative :AND: MchFlg_K) > 0
        GBLL    NoARMK
NoARMK  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_K) > 0

        GBLL    SupportARMT2
SupportARMT2 SETL  (MchFlgs_Cumulative :AND: MchFlg_T2) > 0
        GBLL    NoARMT2
NoARMT2 SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_T2) > 0

        GBLL    SupportARMVE
SupportARMVE SETL  (MchFlgs_Cumulative :AND: MchFlg_VE) > 0
        GBLL    NoARMVE
NoARMVE SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_VE) > 0

        GBLL    SupportARMC
SupportARMC SETL   (MchFlgs_Cumulative :AND: MchFlg_C) > 0
        GBLL    NoARMC
NoARMC  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_C) > 0

        GBLL    SupportARMV
SupportARMV SETL   (MchFlgs_Cumulative :AND: MchFlg_V) > 0
        GBLL    NoARMV
NoARMV  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_V) > 0

        GBLL    SupportARMVD
SupportARMVD SETL  (MchFlgs_Cumulative :AND: MchFlg_VD) > 0
        GBLL    NoARMVD
NoARMVD SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_VD) > 0

        GBLL    SupportARMV32
SupportARMV32 SETL (MchFlgs_Cumulative :AND: MchFlg_V32) > 0
        GBLL    NoARMV32
NoARMV32 SETL   (MchFlgs_CumulativeNOT :AND: MchFlg_V32) > 0

        GBLL    SupportARMVH
SupportARMVH SETL  (MchFlgs_Cumulative :AND: MchFlg_VH) > 0
        GBLL    NoARMVH
NoARMVH SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_VH) > 0

        GBLL    SupportARMVv4
SupportARMVH SETL  (MchFlgs_Cumulative :AND: MchFlg_Vv4) > 0
        GBLL    NoARMVv4
NoARMVH SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_Vv4) > 0

        GBLL    SupportARMA
SupportARMA SETL   (MchFlgs_Cumulative :AND: MchFlg_A) > 0
        GBLL    NoARMA
NoARMA  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_A) > 0

 ]

        OPT     OldOpt
        END
@


4.9
log
@  New compile-time architecture flags:
  * ARMv7VE (virtualisation extension)
  * ARMv8
  * ARMv8 cryptographic extension
  Machine=RPi builds now targets ARMv8 as well as ARMv6 and ARMv7;
  Machine=CortexA7 builds now set the VE flag; and All and All32 include ARMv8.

Version 2.58. Tagged as 'HdrSrc-2_58'
@
text
@d238 1
a238 2
 |
 [ "$arch" = "v2a"
d240 1
a240 2
 |
 [ "$arch" = "v2a_FPA"
d242 1
a242 2
 |
 [ "$arch" = "v3"
d244 1
a244 2
 |
 [ "$arch" = "v3_FPA"
d246 1
a246 2
 |
 [ "$arch" = "v3G"
d248 1
a248 2
 |
 [ "$arch" = "v3M"
d250 1
a250 2
 |
 [ "$arch" = "v4xM"
d252 1
a252 2
 |
 [ "$arch" = "v4"
d254 1
a254 2
 |
 [ "$arch" = "v4TxM"
d256 1
a256 2
 |
 [ "$arch" = "v4T"
d258 1
a258 2
 |
 [ "$arch" = "v5xM"
d260 1
a260 2
 |
 [ "$arch" = "v5"
d262 1
a262 2
 |
 [ "$arch" = "v5TxM"
d264 1
a264 2
 |
 [ "$arch" = "v5T"
d266 1
a266 2
 |
 [ "$arch" = "v5T_VFP1"
d268 1
a268 2
 |
 [ "$arch" = "v5T_VFP1D"
d270 1
a270 2
 |
 [ "$arch" = "v5TExP"
d272 1
a272 2
 |
 [ "$arch" = "v5TE"
d274 1
a274 2
 |
 [ "$arch" = "v5TEX"
d276 1
a276 2
 |
 [ "$arch" = "v5TE_VFP2"
d278 1
a278 2
 |
 [ "$arch" = "v5TE_VFP2D"
d280 1
a280 2
 |
 [ "$arch" = "v5TEJ"
d282 1
a282 2
 |
 [ "$arch" = "v5TEJ_VFP2"
d284 1
a284 2
 |
 [ "$arch" = "v5TEJ_VFP2D"
d286 1
a286 2
 |
 [ "$arch" = "v6"
d288 1
a288 2
 |
 [ "$arch" = "v6_VFP2"
d290 1
a290 2
 |
 [ "$arch" = "v6_VFP2D"
d292 1
a292 2
 |
 [ "$arch" = "v6K"
d294 1
a294 2
 |
 [ "$arch" = "v6K_VFP2"
d296 1
a296 2
 |
 [ "$arch" = "v6K_VFP2D"
d298 1
a298 2
 |
 [ "$arch" = "v6T2"
d300 1
a300 2
 |
 [ "$arch" = "v6T2_VFP2"
d302 1
a302 2
 |
 [ "$arch" = "v6T2_VFP2D"
d304 1
a304 2
 |
 [ "$arch" = "v7"
d306 1
a306 2
 |
 [ "$arch" = "v7_VFP3"
d308 1
a308 2
 |
 [ "$arch" = "v7_VFP3D"
d310 1
a310 2
 |
 [ "$arch" = "v7_VFP3D32"
d312 1
a312 2
 |
 [ "$arch" = "v7_VFP3H"
d314 1
a314 2
 |
 [ "$arch" = "v7_VFP3DH"
d316 1
a316 2
 |
 [ "$arch" = "v7_VFP3D32H"
d318 1
a318 2
 |
 [ "$arch" = "v7_SIMD"
d320 1
a320 2
 |
 [ "$arch" = "v7_VFP3_SIMD"
d322 1
a322 2
 |
 [ "$arch" = "v7_VFP3D32_SIMD"
d324 1
a324 2
 |
 [ "$arch" = "v7_VFP3H_SIMD"
d326 1
a326 2
 |
 [ "$arch" = "v7_VFP3D32H_SIMD"
d328 1
a328 2
 |
 [ "$arch" = "v7VE_VFP4D32_SIMD"
d330 1
a330 2
 |
 [ "$arch" = "v8"
a334 47
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
d343 8
a350 2
      |
      [ "$Machine" = "32" ; basic 32-bit capable machines (used for many ARM7TDMI and ARM9 ports)
d355 1
a355 2
      |
      [ "$Machine" = "IOMD" ; 32-bit IOMD-class machines ARM6/ARM7/StrongARM
d359 1
a359 2
      |
      [ "$Machine" = "Tungsten" ; Iyonix PC
d361 1
a361 2
      |
      [ "$Machine" = "ARM11ZF"
d363 1
a363 2
      |
      [ "$Machine" = "RPi" ; Raspberry Pi versions are similar enough that one ROM can handle three architectures
d367 1
a367 2
      |
      [ "$Machine" = "CortexA7" ; Cortex A7
d369 1
a369 2
      |
      [ "$Machine" = "CortexA8" ; Cortex A8, e.g. TI OMAP35xx
d371 1
a371 2
      |
      [ "$Machine" = "CortexA9" ; Cortex A9, e.g. TI OMAP44xx, Freescale i.MX6
d373 1
a373 5
      |
      [ "$Machine" = "CortexA7" ; Cortex A7, A15 or A17, e.g. BCM2836, TI OMAP543x, TI AM5728
        ArchitectureOption v7_VFP4D32_SIMD
      |
      [ "$Machine" = "All" ; if the target code is required to run on
d378 1
a378 2
      |
      [ "$Machine" = "All32" ; if the target code is required to run on
a385 11
      ]
      ]
      ]
      ]
      ]
      ]
      ]
      ]
      ]
      ]
      ]
@


4.8
log
@  Support for OMAP543x, AM5728 and ADFS 4
Detail:
  * Complete the Cortex-A7 support which was initially added for RPi 2, to
    allow for builds that only target Cortex-A7. Because Cortex-A15 and
    Cortex-A17 CPUs are indistinguishable architecturally from Cortex-A7
    (all are ARMv7VE with VFPv4, Advanced SIMD v2 and hardware integer divide)
    any such platforms are expected to use Machine=CortexA7. Also bear in
    mind that if we ever support multiple cores on big.LITTLE CPUs, execution
    can move between these core types at runtime, making an assembly time
    option to distinguish between them meaningless!
  * Correct Machines All and All32 to include support for VFPv4
  * Decloak the ATA driver SWI chunk
  * Add a global error allocation for use by the ATA subsystem (placed in
    global space because it propagates into the CD stack)


Version 2.55. Tagged as 'HdrSrc-2_55'
@
text
@d164 2
d167 1
a167 1
MchFlg_a    * 2_00000000000000000000000000100000
d169 1
a169 1
MchFlg_F    * 2_00000000000000000000000001000000
d171 1
a171 1
MchFlg_G    * 2_00000000000000000000000010000000
d173 1
a173 1
MchFlg_M    * 2_00000000000000000000000100000000
d176 1
a176 1
MchFlg_T    * 2_00000000000000000000001000000000
d179 1
a179 1
MchFlg_E    * 2_00000000000000000000010000000000
d181 1
a181 1
MchFlg_P    * 2_00000000000000000000100000000000
d184 1
a184 1
MchFlg_X    * 2_00000000000000000001000000000000
d186 1
a186 1
MchFlg_J    * 2_00000000000000000010000000000000
d189 1
a189 1
MchFlg_K    * 2_00000000000000000100000000000000
d192 5
a196 1
MchFlg_T2   * 2_00000000000000001000000000000000
d198 1
a198 1
MchFlg_V    * 2_00000000000000010000000000000000
d200 1
a200 1
MchFlg_VD   * 2_00000000000000100000000000000000
d202 1
a202 1
MchFlg_V32  * 2_00000000000001000000000000000000
d204 1
a204 1
MchFlg_VH   * 2_00000000000010000000000000000000
d206 1
a206 1
MchFlg_Vv4  * 2_00000000000100000000000000000000
d209 1
a209 1
MchFlg_A    * 2_00000000001000000000000000000000
a210 4
;MchFlg_     * 2_00000000010000000000000000000000
;MchFlg_     * 2_00000000100000000000000000000000
;MchFlg_     * 2_00000001000000000000000000000000
;MchFlg_     * 2_00000010000000000000000000000000
d226 1
d374 5
a378 2
 [ "$arch" = "v7_VFP4D32_SIMD"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_VD :OR: MchFlg_V32 :OR: MchFlg_VH :OR: MchFlg_Vv4 :OR: MchFlg_A
d428 1
d455 1
a455 1
      [ "$Machine" = "RPi" ; Raspberry Pi versions are similar enough that one ROM can handle two architectures
d457 2
a458 1
        ArchitectureOption v7_VFP4D32_SIMD
d461 1
a461 1
        ArchitectureOption v7_VFP4D32_SIMD
d476 1
a476 1
        ArchitectureOption v7_VFP4D32_SIMD
d482 1
a482 1
        ArchitectureOption v7_VFP4D32_SIMD
d523 5
d583 10
@


4.7
log
@  Add Raspberry Pi 2 support
Detail:
  The Raspberry Pi ROM now joins the IOMD ROM in supporting multiple
  architectures, in this case ARMv6 and ARMv7. This has been achieved by
  creating a new machine type specific for Raspberry Pi. The old ARM11ZF
  machine type remains for builds that are ARM11-only.

  The Raspberry Pi 2 uses the Cortex-A7 processor, which includes version 4
  of the VFP instruction set and version 2 of the Advanced SIMD (NEON)
  instruction set. You can now switch on this at assembly time using the new
  switches NoARMVv4 and SupportARMVv4.

Version 2.50. Tagged as 'HdrSrc-2_50'
@
text
@d203 1
a203 1
MchFlg_A     * 2_00000000001000000000000000000000
d458 1
a458 1
      [ "$Machine" = "CortexA9" ; Cortex A9
d461 3
d468 1
a468 1
        ArchitectureOption v7_VFP3D32H_SIMD
d474 1
a474 1
        ArchitectureOption v7_VFP3D32H_SIMD
d488 1
@


4.6
log
@  Rationalisation of Hdr:Machine
Detail:
  * Updated comments in 32, All, All32
  * New Machine for IOMD class
  * Phoebe support removed
  * In Hdr:Machine.Machine:
    + Moved the 4 common switches to the top (No32bitCode; No26bitCode;
      NoUnaligned; StrongARM_MSR_bug).
    + Bracketed non 'All' switches, mid term most of these are actually
      kernel private switches, but the HAL kernel still includes a lot of
      pre HAL code so making it tricky to obsolete them in one pass.
    + Bracketed non 'HAL' switches, pending deletion.
    + Bracketed non 'HAL' STB switches, pending deletion.
    + Deleted unused "NewClockChip", "CDVPoduleIRQs", "OldComboSupport",
       "DoPOSTwithoutPowerOn", "M_Phoebe".
    + Moved "HAL32"; "HAL26"; "ROMSizeOffset" to kernel header.
    + Added some comments.
Admin:
  Changes provided by Sprow

Version 2.24. Tagged as 'HdrSrc-2_24'
@
text
@d199 2
d203 1
a203 1
MchFlg_A    * 2_00000000000100000000000000000000
a204 1
;MchFlg_     * 2_00000000001000000000000000000000
d371 3
d421 1
d448 7
d483 2
d586 5
@


4.6.2.1
log
@  Cross-compile version of HdrSrc
Detail:
  Mostly a question of changing directory separators and removing reliance
  upon path variables and system variable expansion. One day, when all
  components use the shared makefiles (or at least use the necessary -pd and
  -i switches to objasm), we will be able to switch over to using this
  version for all builds. In the meantime, I have created a new branch for
  the HdrSrc component, called XCompile, to store these changes. The downside
  is the fact that we'll now have to maintain unrelated changes on both
  branches until they can be merged.
Admin:
  Tested by cross-assembling the BASIC module.

Version 2.46, 4.247.2.1. Tagged as 'HdrSrc-2_46-4_247_2_1'
@
text
@d149 1
a149 1
        GET     Machine/$Machine
@


4.5
log
@  Added support for Machine=ARM11ZF
Detail:
  Suitable for ARMv6Z CPUs with VFPv2, e.g. ARM1176JZF-S
Admin:
  Required by the S3C6410 HAL

Version 1.82. Tagged as 'HdrSrc-1_82'
@
text
@d426 7
a432 1
      [ "$Machine" = "32" ; basic 32-bit capable machines
a435 2
        ArchitectureOption v4T ; "32" is used for many ARM7TDMI and ARM9 ports
                               ; as well as IOMD-class machines
d470 1
@


4.4
log
@  Added support for machine-neutral builds
Detail:
  For use when building binaries which must run on a wide range of ARM
  architectures - typically used by disc builds rather than rom builds.
  Use Machine=All to target all machines, or Machine=All32 for any
  architecture from v3 (ARM600) upwards.
Admin:
  Tested in a BuildHost build.

Version 1.69. Tagged as 'HdrSrc-1_69'
@
text
@d436 3
d465 1
@


4.3
log
@  Fixed Hdr:CPU.Arch so that it actually works
Detail:
  Didn't previously interact with other standard RISC OS headers, especially
  Hdr:ListOpts
Admin:
  Has now been used successfully in an (as-yet unreleased) build of Squash
  to add compatibility with ARMv6

Version 1.67. Tagged as 'HdrSrc-1_67'
@
text
@d442 1
a442 1
      [ "$Machine" = "Any" ; if the target code is required to run on
d448 1
a448 1
      [ "$Machine" = "Any32" ; if the target code is required to run on
@


4.2
log
@Very minor tweaks to the CPU.Arch header file.

Changed the formatting of example 4 to look more consistent with they way
we format asm code. Corrected the comments for example 5 to indicate that
R0 may be corrupted also.

Version 1.66. Tagged as 'HdrSrc-1_66'
@
text
@d142 3
d147 1
a147 1
Included_Hdr_ARMarch SETL {TRUE}
a148 1
        GET     Hdr:ListOpts
d570 1
@


4.1
log
@  Added new assembler header file Hdr:CPU.Arch
Detail:
  Defines a large selection of boolean assembler variables, permitting
  authors to test the CPU architecture features required by the target
  platform(s) of a given build. Examples of use are included.
Admin:
  Not tested in anger yet.

Version 1.65. Tagged as 'HdrSrc-1_65'
@
text
@d99 1
a99 1
;    TEQP PC, #2
d104 3
a106 3
;    TEQ PC, PC
;    MSREQ CPSR_c, #&12
;    TEQNEP PC, #2
d110 1
a110 1
;    MSR CPSR_c, #&12
d115 1
a115 1
; into r1. Registers r2 and r3 may be corrupted.
@


4.1.2.1
log
@file Arch was added on branch Cortex on 2009-05-06 16:17:56 +0000
@
text
@d1 568
@


4.1.2.2
log
@Merged trunk version 1.65 to branch Cortex

Version 1.62, 4.162.2.3. Tagged as 'HdrSrc-1_62-4_162_2_3'
@
text
@a0 568
; Copyright (c) 2009, RISC OS Open Ltd
; All rights reserved.
; 
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY RISC OS OPEN LTD ''AS IS'' AND ANY EXPRESS OR
; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
; EVENT SHALL RISC OS OPEN LTD BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
; WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
; OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


; Historically, RISC OS has usually tried to cater for all CPU types at run
; time. This was partly because CPUs were swappable in some machines, and
; partly because of economies of scale when manufacturing masked ROMs. Neither
; of these arguments are as important in today's environment.
; 
; It is probably desirable for disc components to continue to be as widely
; applicable as possible to help with version control. However, there may be
; exceptions in certain cases, e.g. codecs will often want to be tuned to a
; specific architecture. But ROM builds can benefit, in terms of code size,
; speed and maintainability, from being targetted at the correct CPU -
; previously, such customisation was mainly confined to the FPASC/FPEmulator.
; 
; This header file translates between the "Machine" build variable and a set of
; assembly-time variables that describe the range of CPUs which must be
; supported by that build. Thus, the author of the software can switch
; depending upon the specific CPU feature that they require, and build
; maintainers can select the range of CPUs that a given build must run on.
; Typically, except for IOMD machines, a ROM build will only target one CPU,
; but a disc build will target a wide range of CPUs.
; 
; The assembler variables are of the form
; 
;  SupportARMvx -> at least one supported platform is of architecture x or later
;  NoARMvx      -> at least one supported platform is of architecture before x
; 
; or for architecture variants (usually a single letter), the variables
; indicate whether one or more supported platforms do or don't support that
; variant.


; Example 1: to provide a set of implementations to be selected on the basis of
; the oldest required architecture
; 
;  [ NoARMa
;    ; implementation suitable for ARMv2 or later
;  |
;  [ NoARMv3
;    ; implementation suitable for ARMv2a or later
;  |
;  [ NoARMv4
;    ; implementation suitable for ARMv3 or later
;  |
;    ; implementation suitable for ARMv4 or later
;  ]
;  ]
;  ]

; Example 2: to bracket an implementation suitable for ARMv2 to v4 but not v5
; onwards - for example because it stores flags in bits 0 and 1 of PC addresses
; on the stack
; 
;  [ :LNOT: SupportARMv5
;    ; insert code here
;  |
;    ! 1, "No suitable implementation for required architecture(s) yet"
;  ]

; Example 3: to bracket an implementation only suitable for v4T and v5 -
; for example because it uses fine (1K) page tables
; 
;  [ SupportARMv6 :LOR: NoARMT
;    ; Build targets include pre-v4T and/or v6-or-later
;    ! 1, "No suitable implementation for required architecture(s) yet"
;  |
;    ; insert code here
;  ]

; Example 4: change from SVC mode to IRQ mode in the minimal number of
; instructions for the required architecture(s)
; 
;  [ :LNOT: SupportARMv3
;    ; Can only be executed in 26-bit mode
;    TEQP PC, #2
;    NOP
;  |
;  [ NoARMG
;    ; Could be either 26-bit mode or 32-bit mode
;    TEQ PC, PC
;    MSREQ CPSR_c, #&12
;    TEQNEP PC, #2
;    NOP
;  |
;    ; Can only be executed in 32-bit mode
;    MSR CPSR_c, #&12
;  ]
;  ]

; Example 5: load a word from address in r0, which may be non-word-aligned,
; into r1. Registers r2 and r3 may be corrupted.
; 
; Under ARMv6, unaligned behaviour can be configured either way, but since
; ARMv7 mandates the new behaviour we have to handle it anyway, so we may as
; well run ARMv6 CPUs in ARMv7 mode.
; 
;  [ :LNOT: NoARMv6
;         ; Only has to operate on CPUs with automatic unaligned LDR
;         LDR     r1,[r0]
;  |
;         ANDS    r3,r0,#3
;    [ SupportARMv6
;         ; Need to handle both CPU types at run time
;         BICNE   r0,r0,#3
;    |
;         ; Only has to operate on CPUs with traditional ARM LDM behaviour
;         ; where the bottom two bits of r0 are ignored
;    ]
;         LDMNEIA r0!,{r1,r2}
;         MOVNE   r3,r3,LSL #3
;         LDREQ   r1,[r0]
;         MOVNE   r1,r1,LSR r3
;         RSBNE   r3,r3,#32
;         ORRNE   r1,r1,r2,LSL r3
;  ]


 [ :LNOT: :DEF: Included_Hdr_CPU_Arch
        GBLL    Included_Hdr_CPU_Arch
Included_Hdr_ARMarch SETL {TRUE}

        GET     Hdr:ListOpts
        GET     Hdr:Machine.<Machine>

; MRS/MSR and USR32, IRQ32, FIQ32, SVC32, ABT and UND modes
MchFlg_v3   * 2_00000000000000000000000000000001
; LDRH/STRH, LDRSB/H, SYS mode
MchFlg_v4   * 2_00000000000000000000000000000010
; CLZ, BLX, BKPT, LDC2, STC2, CDP2, MCR2, MRC2
MchFlg_v5   * 2_00000000000000000000000000000100
; LDREX/STREX, cross-mode exception save/restore, endian-switching, packed byte
; and halfword add/subtract/absolute/saturate/halve/pack/extract,
; sign-extension, saturation, 32+32+32*32, 32+16*16+16*16, 64+16*16+16*16 and
; MSW 32*32 MLA, MLS and MUL, MCRR2, MRRC2
MchFlg_v6   * 2_00000000000000000000000000001000
; DBG, DMB, PLI, PLDW and ThumbEE instruction set
MchFlg_v7   * 2_00000000000000000000000000010000
; SWP and SWPB
MchFlg_a    * 2_00000000000000000000000000100000
; Hardware FPA - FPA10 if v2 (ARM3); FPA11 if v3 (ARM700 or ARM7500FE)
MchFlg_F    * 2_00000000000000000000000001000000
; Withdrawal of 26-bit modes
MchFlg_G    * 2_00000000000000000000000010000000
; 64+32x32 bit MLA and MUL
MchFlg_M    * 2_00000000000000000000000100000000
; BX and Thumb - Thumbv1 if ARMv4; Thumbv2 if ARMv5; Thumbv3 if ARMv6
; no established terminology for later revisions
MchFlg_T    * 2_00000000000000000000001000000000
; Enhanced DSP extension - 32+16*16, 33+32*16, 64+16*16 MLA and MUL,
; saturated ADD/SUB
MchFlg_E    * 2_00000000000000000000010000000000
; PLD, LDRD/STRD, MRRC/MCRR
MchFlg_P    * 2_00000000000000000000100000000000
; Intel XScale extensions - 40+32*32, 40+16*16, 40+16*16+16*16 MLA,
; mini data cache
MchFlg_X    * 2_00000000000000000001000000000000
; Jazelle extension - BXJ
MchFlg_J    * 2_00000000000000000010000000000000
; Multiprocessing extensions - CLREX, YIELD, WFE, WFI, SEV, SMI and
; security extensions
MchFlg_K    * 2_00000000000000000100000000000000
; Thumb 2 and more - MOVW, MOVH, bitfield operations, DSB, ISB,
; 8/16/64 bit LDR/STREX, LDRT/STRT for halfwords and signed bytes, 32-32*32 MLS
MchFlg_T2   * 2_00000000000000001000000000000000
; VFP - VFPv1 if ARMv5T; VFPv2 if ARMv5TE or ARMv6; VFPv3 if ARMv7
MchFlg_V    * 2_00000000000000010000000000000000
; VFP D variant (double precision)
MchFlg_VD   * 2_00000000000000100000000000000000
; VFP 32 double-precision registers variant
MchFlg_V32  * 2_00000000000001000000000000000000
; VFP half-precision variant
MchFlg_VH   * 2_00000000000010000000000000000000
; Advanced SIMD extensions - integer only if no VFP; FP half or single
; precision options mirror the VFP options
MchFlg_A    * 2_00000000000100000000000000000000
; Remaining flags reserved for future use
;MchFlg_     * 2_00000000001000000000000000000000
;MchFlg_     * 2_00000000010000000000000000000000
;MchFlg_     * 2_00000000100000000000000000000000
;MchFlg_     * 2_00000001000000000000000000000000
;MchFlg_     * 2_00000010000000000000000000000000
;MchFlg_     * 2_00000100000000000000000000000000
;MchFlg_     * 2_00001000000000000000000000000000
;MchFlg_     * 2_00010000000000000000000000000000
;MchFlg_     * 2_00100000000000000000000000000000
;MchFlg_     * 2_01000000000000000000000000000000
;MchFlg_     * 2_10000000000000000000000000000000

; Common flag combinations, to make the ArchitectureOption macro smaller
MchFlgs_v3   * 0            :OR: MchFlg_v3 :OR: MchFlg_a
MchFlgs_v4   * MchFlgs_v3   :OR: MchFlg_v4 :OR: MchFlg_M
MchFlgs_v4T  * MchFlgs_v4   :OR: MchFlg_G  :OR: MchFlg_T
MchFlgs_v5T  * MchFlgs_v4T  :OR: MchFlg_v5
MchFlgs_v5TE * MchFlgs_v5T  :OR: MchFlg_E  :OR: MchFlg_P
MchFlgs_v6   * MchFlgs_v5TE :OR: MchFlg_v6 :OR: MchFlg_J
MchFlgs_v7   * MchFlgs_v6   :OR: MchFlg_v7 :OR: MchFlg_K :OR: MchFlg_T2

        GBLA    MchFlgs_Cumulative
MchFlgs_Cumulative    SETA 0
        GBLA    MchFlgs_CumulativeNOT
MchFlgs_CumulativeNOT SETA 0

        MACRO
$lab    ArchitectureOption $arch
        LCLA MchFlgs
 [ "$arch" = "v2"
MchFlgs SETA 0
 |
 [ "$arch" = "v2a"
MchFlgs SETA MchFlg_a
 |
 [ "$arch" = "v2a_FPA"
MchFlgs SETA MchFlg_a :OR: MchFlg_F
 |
 [ "$arch" = "v3"
MchFlgs SETA MchFlgs_v3
 |
 [ "$arch" = "v3_FPA"
MchFlgs SETA MchFlgs_v3 :OR: MchFlg_F
 |
 [ "$arch" = "v3G"
MchFlgs SETA MchFlgs_v3 :OR: MchFlg_G
 |
 [ "$arch" = "v3M"
MchFlgs SETA MchFlgs_v3 :OR: MchFlg_M
 |
 [ "$arch" = "v4xM"
MchFlgs SETA MchFlgs_v4 :AND: :NOT: MchFlg_M
 |
 [ "$arch" = "v4"
MchFlgs SETA MchFlgs_v4
 |
 [ "$arch" = "v4TxM"
MchFlgs SETA MchFlgs_v4T :AND: :NOT: MchFlg_M
 |
 [ "$arch" = "v4T"
MchFlgs SETA MchFlgs_v4T
 |
 [ "$arch" = "v5xM"
MchFlgs SETA MchFlgs_v5T :AND: :NOT: (MchFlg_M :OR: MchFlg_T)
 |
 [ "$arch" = "v5"
MchFlgs SETA MchFlgs_v5T :AND: :NOT: MchFlg_T
 |
 [ "$arch" = "v5TxM"
MchFlgs SETA MchFlgs_v5T :AND: :NOT: MchFlg_M
 |
 [ "$arch" = "v5T"
MchFlgs SETA MchFlgs_v5T
 |
 [ "$arch" = "v5T_VFP1"
MchFlgs SETA MchFlgs_v5T :OR: MchFlg_V
 |
 [ "$arch" = "v5T_VFP1D"
MchFlgs SETA MchFlgs_v5T :OR: MchFlg_V :OR: MchFlg_VD
 |
 [ "$arch" = "v5TExP"
MchFlgs SETA MchFlgs_v5TE :AND: :NOT: MchFlg_P
 |
 [ "$arch" = "v5TE"
MchFlgs SETA MchFlgs_v5TE
 |
 [ "$arch" = "v5TEX"
MchFlgs SETA MchFlgs_v5TE :OR: MchFlg_X
 |
 [ "$arch" = "v5TE_VFP2"
MchFlgs SETA MchFlgs_v5TE :OR: MchFlg_V
 |
 [ "$arch" = "v5TE_VFP2D"
MchFlgs SETA MchFlgs_v5TE :OR: MchFlg_V :OR: MchFlg_VD
 |
 [ "$arch" = "v5TEJ"
MchFlgs SETA MchFlgs_v5TE :OR: MchFlg_J
 |
 [ "$arch" = "v5TEJ_VFP2"
MchFlgs SETA MchFlgs_v5TE :OR: MchFlg_J :OR: MchFlg_V
 |
 [ "$arch" = "v5TEJ_VFP2D"
MchFlgs SETA MchFlgs_v5TE :OR: MchFlg_J :OR: MchFlg_V :OR: MchFlg_VD
 |
 [ "$arch" = "v6"
MchFlgs SETA MchFlgs_v6
 |
 [ "$arch" = "v6_VFP2"
MchFlgs SETA MchFlgs_v6 :OR: MchFlg_V
 |
 [ "$arch" = "v6_VFP2D"
MchFlgs SETA MchFlgs_v6 :OR: MchFlg_V :OR: MchFlg_VD
 |
 [ "$arch" = "v6K"
MchFlgs SETA MchFlgs_v6 :OR: MchFlg_K
 |
 [ "$arch" = "v6K_VFP2"
MchFlgs SETA MchFlgs_v6 :OR: MchFlg_K :OR: MchFlg_V
 |
 [ "$arch" = "v6K_VFP2D"
MchFlgs SETA MchFlgs_v6 :OR: MchFlg_K :OR: MchFlg_V :OR: MchFlg_VD
 |
 [ "$arch" = "v6T2"
MchFlgs SETA MchFlgs_v6 :OR: MchFlg_T2
 |
 [ "$arch" = "v6T2_VFP2"
MchFlgs SETA MchFlgs_v6 :OR: MchFlg_T2 :OR: MchFlg_V
 |
 [ "$arch" = "v6T2_VFP2D"
MchFlgs SETA MchFlgs_v6 :OR: MchFlg_T2 :OR: MchFlg_V :OR: MchFlg_VD
 |
 [ "$arch" = "v7"
MchFlgs SETA MchFlgs_v7
 |
 [ "$arch" = "v7_VFP3"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V
 |
 [ "$arch" = "v7_VFP3D"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_VD
 |
 [ "$arch" = "v7_VFP3D32"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_VD :OR: MchFlg_V32
 |
 [ "$arch" = "v7_VFP3H"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_VH
 |
 [ "$arch" = "v7_VFP3DH"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_VD :OR: MchFlg_VH
 |
 [ "$arch" = "v7_VFP3D32H"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_VD :OR: MchFlg_V32 :OR: MchFlg_VH
 |
 [ "$arch" = "v7_SIMD"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_A
 |
 [ "$arch" = "v7_VFP3_SIMD"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_A
 |
 [ "$arch" = "v7_VFP3D32_SIMD"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_VD :OR: MchFlg_V32 :OR: MchFlg_A
 |
 [ "$arch" = "v7_VFP3H_SIMD"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_VH :OR: MchFlg_A
 |
 [ "$arch" = "v7_VFP3D32H_SIMD"
MchFlgs SETA MchFlgs_v7 :OR: MchFlg_V :OR: MchFlg_VD :OR: MchFlg_V32 :OR: MchFlg_VH :OR: MchFlg_A
 |
   ! 1, "Unrecognised architecture: $arch"
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
 ]
MchFlgs_Cumulative    SETA MchFlgs_Cumulative    :OR: MchFlgs
MchFlgs_CumulativeNOT SETA MchFlgs_CumulativeNOT :OR: :NOT: MchFlgs
        MEND

      [ "$Machine" = "Archimedes" ; pre-IOMD Acorn machines, 26-bit only
        ArchitectureOption v2
        ArchitectureOption v2a
        ArchitectureOption v2a_FPA
      |
      [ "$Machine" = "32" ; basic 32-bit capable machines
        ArchitectureOption v3
        ArchitectureOption v3_FPA
        ArchitectureOption v4
        ArchitectureOption v4T ; "32" is used for many ARM7TDMI and ARM9 ports
                               ; as well as IOMD-class machines
      |
      [ "$Machine" = "Tungsten" ; Iyonix PC
        ArchitectureOption v5TEX
      |
      [ "$Machine" = "CortexA8" ; Cortex A8, e.g. TI OMAP35xx
        ArchitectureOption v7_VFP3D32_SIMD
      |
      [ "$Machine" = "CortexA9" ; Cortex A9
        ArchitectureOption v7_VFP3D32H_SIMD
      |
      [ "$Machine" = "Any" ; if the target code is required to run on
                           ; any RISC OS machine
        ArchitectureOption v2
        ArchitectureOption v2a_FPA
        ArchitectureOption v7_VFP3D32H_SIMD
      |
      [ "$Machine" = "Any32" ; if the target code is required to run on
                             ; any 32-bit capable RISC OS machine
        ArchitectureOption v3
        ArchitectureOption v3_FPA
        ArchitectureOption v7_VFP3D32H_SIMD
      |
        ! 1, "Unrecognised machine: $Machine"
      ]
      ]
      ]
      ]
      ]
      ]
      ]

        GBLL    SupportARMv3
SupportARMv3 SETL  (MchFlgs_Cumulative :AND: MchFlg_v3) > 0
        GBLL    NoARMv3
NoARMv3 SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_v3) > 0

        GBLL    SupportARMv4
SupportARMv4 SETL  (MchFlgs_Cumulative :AND: MchFlg_v4) > 0
        GBLL    NoARMv4
NoARMv4 SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_v4) > 0

        GBLL    SupportARMv5
SupportARMv5 SETL  (MchFlgs_Cumulative :AND: MchFlg_v5) > 0
        GBLL    NoARMv5
NoARMv5 SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_v5) > 0

        GBLL    SupportARMv6
SupportARMv6 SETL  (MchFlgs_Cumulative :AND: MchFlg_v6) > 0
        GBLL    NoARMv6
NoARMv6 SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_v6) > 0

        GBLL    SupportARMv7
SupportARMv7 SETL  (MchFlgs_Cumulative :AND: MchFlg_v7) > 0
        GBLL    NoARMv7
NoARMv7 SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_v7) > 0

        GBLL    SupportARMa
SupportARMa SETL   (MchFlgs_Cumulative :AND: MchFlg_a) > 0
        GBLL    NoARMa
NoARMa  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_a) > 0

        GBLL    SupportARMF
SupportARMF SETL   (MchFlgs_Cumulative :AND: MchFlg_F) > 0
        GBLL    NoARMF
NoARMF  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_F) > 0

        GBLL    SupportARMG
SupportARMG SETL   (MchFlgs_Cumulative :AND: MchFlg_G) > 0
        GBLL    NoARMG
NoARMG  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_G) > 0

        GBLL    SupportARMM
SupportARMM SETL   (MchFlgs_Cumulative :AND: MchFlg_M) > 0
        GBLL    NoARMM
NoARMM  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_M) > 0

        GBLL    SupportARMT
SupportARMT SETL   (MchFlgs_Cumulative :AND: MchFlg_T) > 0
        GBLL    NoARMT
NoARMT  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_T) > 0

        GBLL    SupportARME
SupportARME SETL   (MchFlgs_Cumulative :AND: MchFlg_E) > 0
        GBLL    NoARME
NoARME  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_E) > 0

        GBLL    SupportARMP
SupportARMP SETL   (MchFlgs_Cumulative :AND: MchFlg_P) > 0
        GBLL    NoARMP
NoARMP  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_P) > 0

        GBLL    SupportARMX
SupportARMX SETL   (MchFlgs_Cumulative :AND: MchFlg_X) > 0
        GBLL    NoARMX
NoARMX  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_X) > 0

        GBLL    SupportARMJ
SupportARMJ SETL   (MchFlgs_Cumulative :AND: MchFlg_J) > 0
        GBLL    NoARMJ
NoARMJ  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_J) > 0

        GBLL    SupportARMK
SupportARMK SETL   (MchFlgs_Cumulative :AND: MchFlg_K) > 0
        GBLL    NoARMK
NoARMK  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_K) > 0

        GBLL    SupportARMT2
SupportARMT2 SETL  (MchFlgs_Cumulative :AND: MchFlg_T2) > 0
        GBLL    NoARMT2
NoARMT2 SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_T2) > 0

        GBLL    SupportARMV
SupportARMV SETL   (MchFlgs_Cumulative :AND: MchFlg_V) > 0
        GBLL    NoARMV
NoARMV  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_V) > 0

        GBLL    SupportARMVD
SupportARMVD SETL  (MchFlgs_Cumulative :AND: MchFlg_VD) > 0
        GBLL    NoARMVD
NoARMVD SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_VD) > 0

        GBLL    SupportARMV32
SupportARMV32 SETL (MchFlgs_Cumulative :AND: MchFlg_V32) > 0
        GBLL    NoARMV32
NoARMV32 SETL   (MchFlgs_CumulativeNOT :AND: MchFlg_V32) > 0

        GBLL    SupportARMVH
SupportARMVH SETL  (MchFlgs_Cumulative :AND: MchFlg_VH) > 0
        GBLL    NoARMVH
NoARMVH SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_VH) > 0

        GBLL    SupportARMA
SupportARMA SETL   (MchFlgs_Cumulative :AND: MchFlg_A) > 0
        GBLL    NoARMA
NoARMA  SETL    (MchFlgs_CumulativeNOT :AND: MchFlg_A) > 0

 ]

        END
@


4.1.2.3
log
@Merged trunk version 1.67 to Cortex branch

Version 1.62, 4.162.2.4. Tagged as 'HdrSrc-1_62-4_162_2_4'
@
text
@d99 1
a99 1
;    TEQP    PC, #2
d104 3
a106 3
;    TEQ     PC, PC
;    MSREQ   CPSR_c, #&12
;    TEQNEP  PC, #2
d110 1
a110 1
;    MSR     CPSR_c, #&12
d115 1
a115 1
; into r1. Registers r0, r2 and r3 may be corrupted.
a141 3
OldOpt  SETA    {OPT}
        OPT     OptNoList+OptNoP1List

d144 1
a144 1
Included_Hdr_CPU_Arch SETL {TRUE}
d146 1
a567 1
        OPT     OldOpt
@


4.1.2.4
log
@Bring Cortex branch of HdrSrc in line with trunk
Detail:
  * Added VFPSupport SWI definition
  * Added some new industry standard file types
  * Aded some new sprite errors
  * Added install rule for C/C++ CD
  * Added support for machine-neutral builds
Admin:
  Untested!


Version 1.62, 4.162.2.14. Tagged as 'HdrSrc-1_62-4_162_2_14'
@
text
@d442 1
a442 1
      [ "$Machine" = "All" ; if the target code is required to run on
d448 1
a448 1
      [ "$Machine" = "All32" ; if the target code is required to run on
@


