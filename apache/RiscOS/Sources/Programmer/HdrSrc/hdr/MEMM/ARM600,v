head	4.6;
access;
symbols
	HdrSrc-2_77:4.6
	HdrSrc-2_76:4.6
	HdrSrc-2_75:4.6
	HdrSrc-2_74:4.6
	HdrSrc-2_73:4.6
	HdrSrc-2_72:4.6
	HdrSrc-2_71:4.6
	HdrSrc-2_70:4.6
	HdrSrc-2_69:4.6
	HdrSrc-2_68:4.6
	HdrSrc-2_67:4.6
	HdrSrc-2_66:4.6
	HdrSrc-2_65:4.6
	HdrSrc-2_64:4.6
	HdrSrc-2_63:4.6
	HdrSrc-2_62:4.6
	HdrSrc-2_61:4.6
	HdrSrc-2_60:4.6
	HdrSrc-2_59:4.6
	HdrSrc-2_58:4.6
	HdrSrc-2_57:4.6
	HdrSrc-2_56:4.6
	HdrSrc-2_55:4.6
	HdrSrc-2_54:4.6
	HdrSrc-2_53:4.6
	HdrSrc-2_52:4.6
	HdrSrc-2_51:4.6
	HdrSrc-2_50:4.6
	HdrSrc-2_49:4.6
	HdrSrc-2_48:4.6
	HdrSrc-2_47:4.6
	HdrSrc-2_46-4_247_2_1:4.6
	XCompile:4.6.0.2
	XCompile_bp:4.6
	HdrSrc-2_46:4.6
	HdrSrc-2_45:4.6
	HdrSrc-2_44:4.6
	HdrSrc-2_43:4.6
	HdrSrc-2_42:4.6
	HdrSrc-2_41:4.6
	HdrSrc-2_40-1:4.6
	HdrSrc-2_40:4.6
	HdrSrc-2_39:4.6
	HdrSrc-2_38:4.6
	HdrSrc-2_37:4.6
	HdrSrc-2_36:4.6
	HdrSrc-2_35:4.6
	HdrSrc-2_34:4.6
	HdrSrc-2_33:4.6
	HdrSrc-2_32:4.6
	HdrSrc-2_31:4.6
	HdrSrc-2_30:4.6
	HdrSrc-2_29:4.6
	HdrSrc-2_28:4.6
	HdrSrc-2_27:4.6
	HdrSrc-2_26:4.6
	HdrSrc-2_25:4.6
	HdrSrc-2_24:4.6
	HdrSrc-2_23:4.6
	HdrSrc-2_22:4.6
	HdrSrc-2_21:4.6
	HdrSrc-2_20:4.6
	HdrSrc-2_19:4.6
	HdrSrc-2_18:4.6
	HdrSrc-2_17:4.6
	HdrSrc-2_16:4.6
	HdrSrc-2_15:4.6
	HdrSrc-2_14:4.6
	HdrSrc-2_13:4.6
	HdrSrc-2_12:4.6
	HdrSrc-2_11:4.6
	HdrSrc-2_10:4.6
	HdrSrc-2_09:4.6
	HdrSrc-2_08:4.6
	HdrSrc-2_07:4.6
	HdrSrc-2_06:4.5
	HdrSrc-2_05:4.5
	HdrSrc-2_04:4.5
	HdrSrc-2_03:4.5
	HdrSrc-2_02:4.5
	HdrSrc-2_01:4.5
	HdrSrc-2_00:4.5
	HdrSrc-1_99:4.5
	HdrSrc-1_98:4.5
	HdrSrc-1_97:4.5
	HdrSrc-1_96:4.5
	HdrSrc-1_95:4.5
	HdrSrc-1_94:4.5
	HdrSrc-1_93:4.5
	HdrSrc-1_92:4.5
	HdrSrc-1_91:4.5
	HdrSrc-1_90:4.5
	HdrSrc-1_89:4.5
	HdrSrc-1_88:4.5
	HdrSrc-1_87:4.5
	HdrSrc-1_86:4.5
	HdrSrc-1_85:4.5
	HdrSrc-1_84:4.5
	HdrSrc-1_83:4.5
	HdrSrc-1_82:4.5
	HdrSrc-1_81:4.5
	HdrSrc-1_80:4.5
	HdrSrc-1_79:4.5
	HdrSrc-1_78:4.5
	HdrSrc-1_77:4.5
	HdrSrc-1_76:4.5
	Cortex_merge:4.4.2.1
	HdrSrc-1_62-4_162_2_15:4.4.2.1
	HdrSrc-1_75:4.4
	HdrSrc-1_62-4_162_2_14:4.4.2.1
	HdrSrc-1_74:4.4
	HdrSrc-1_62-4_162_2_13:4.4.2.1
	HdrSrc-1_62-4_162_2_12:4.4.2.1
	HdrSrc-1_73:4.4
	HdrSrc-1_72:4.4
	HdrSrc-1_62-4_162_2_11:4.4.2.1
	HdrSrc-1_62-4_162_2_10:4.4.2.1
	HdrSrc-1_71:4.4
	HdrSrc-1_70:4.4
	HdrSrc-1_69:4.4
	Cortex_bp:4.4
	HdrSrc-1_62-4_162_2_9:4.4.2.1
	HdrSrc-1_62-4_162_2_8:4.4.2.1
	HdrSrc-1_68:4.4
	HdrSrc-1_62-4_162_2_7:4.4.2.1
	HdrSrc-1_62-4_162_2_6:4.4.2.1
	HdrSrc-1_62-4_162_2_5:4.4.2.1
	HdrSrc-1_62-4_162_2_4:4.4.2.1
	HdrSrc-1_67:4.4
	HdrSrc-1_66:4.4
	HdrSrc-1_62-4_162_2_3:4.4.2.1
	HdrSrc-1_65:4.4
	HdrSrc-1_64:4.4
	HdrSrc-1_63:4.4
	HdrSrc-1_62-4_162_2_2:4.4.2.1
	HdrSrc-1_62-4_162_2_1:4.4.2.1
	Cortex:4.4.0.2
	HdrSrc-1_62:4.4
	HdrSrc-1_61:4.4
	HdrSrc-1_60:4.4
	HdrSrc-1_59:4.4
	HdrSrc-1_58:4.4
	HdrSrc-1_57:4.4
	HdrSrc-1_56:4.4
	HdrSrc-1_55:4.4
	HdrSrc-1_54:4.4
	HdrSrc-1_53:4.4
	HdrSrc-1_52:4.4
	HdrSrc-1_51:4.4
	HdrSrc-1_50:4.4
	HdrSrc-1_49:4.4
	HdrSrc-1_48:4.4
	HdrSrc-1_47:4.4
	RO_5_07:4.4
	HdrSrc-1_46:4.4
	HdrSrc-1_45:4.4
	HdrSrc-1_44:4.4
	HdrSrc-1_43:4.4
	HdrSrc-1_42:4.4
	HdrSrc-1_41:4.4
	HdrSrc-1_40:4.4
	HdrSrc-1_39:4.4
	HdrSrc-1_38:4.4
	HdrSrc-1_37:4.4
	HdrSrc-1_36:4.4
	HdrSrc-1_35:4.4
	HdrSrc-1_34:4.3
	HdrSrc-1_33:4.3
	HdrSrc-1_32:4.3
	HdrSrc-1_31:4.3
	HdrSrc-1_30:4.3
	HdrSrc-1_29:4.3
	HdrSrc-1_28:4.3
	HdrSrc-1_27:4.3
	HdrSrc-1_26:4.3
	HdrSrc-1_25:4.3
	HdrSrc-1_24:4.3
	HdrSrc-1_23:4.3
	HdrSrc-1_22:4.3
	HdrSrc-1_21:4.3
	HdrSrc-1_20:4.3
	HdrSrc-1_19:4.3
	HdrSrc-1_18:4.3
	HdrSrc-1_17:4.3
	HdrSrc-1_16:4.3
	HdrSrc-1_15:4.3
	HdrSrc-1_14:4.3
	HdrSrc-1_13:4.3
	HdrSrc-1_12:4.3
	HdrSrc-1_11:4.3
	HdrSrc-0_71-4_72_2_2:4.1
	HdrSrc-1_10:4.3
	HdrSrc-1_09:4.3
	HdrSrc-1_08:4.2
	HdrSrc-1_07:4.2
	HdrSrc-1_06:4.2
	HdrSrc-1_05:4.2
	dellis_autobuild_BaseSW:4.2
	HdrSrc-1_04:4.2
	HdrSrc-1_03:4.2
	HdrSrc-1_02:4.1
	HdrSrc-1_00:4.1
	HdrSrc-0_99:4.1
	HdrSrc-0_71-4_72_2_1:4.1
	Lazarus_Z11:4.1.0.12
	HdrSrc-0_98:4.1
	HdrSrc-0_97:4.1
	HdrSrc-0_95:4.1
	HdrSrc-0_94:4.1
	HdrSrc-0_93:4.1
	HdrSrc-0_92:4.1
	HdrSrc-0_91:4.1
	HdrSrc-0_90:4.1
	HdrSrc-0_89:4.1
	HdrSrc-0_88:4.1
	HdrSrc-0_87:4.1
	HdrSrc-0_86:4.1
	HdrSrc-0_85:4.1
	HdrSrc-0_84:4.1
	HdrSrc-0_83:4.1
	HdrSrc-0_82:4.1
	HdrSrc-0_81:4.1
	HdrSrc-0_80:4.1
	HdrSrc-0_79:4.1
	HdrSrc-0_78:4.1
	HdrSrc-0_77:4.1
	sbrodie_sedwards_16Mar2000:4.1
	HdrSrc-0_76:4.1
	HdrSrc-0_75:4.1
	HdrSrc-0_74:4.1
	HdrSrc-0_73:4.1
	HdrSrc-0_72:4.1
	HdrSrc-0_71:4.1
	HdrSrc-0_70:4.1
	HdrSrc-0_69:4.1
	HdrSrc-0_68:4.1
	HdrSrc-0_67:4.1
	HdrSrc-0_66:4.1
	HdrSrc-0_65:4.1
	HdrSrc-0_64:4.1
	kbracey_32bit_merge:4.1
	HdrSrc-0_63:4.1
	HdrSrc-0_57-4_58_2_9:4.1
	HdrSrc-0_57-4_58_2_8:4.1
	HdrSrc-0_57-4_58_2_7:4.1
	HdrSrc-0_57-4_58_2_6:4.1
	HdrSrc-0_57-4_58_2_5:4.1
	HdrSrc-0_57-4_58_2_4:4.1
	HdrSrc-0_57-4_58_2_3:4.1
	HdrSrc-0_62:4.1
	HdrSrc-0_61:4.1
	HdrSrc-0_60:4.1
	HdrSrc-0_57-4_58_2_2:4.1
	HdrSrc-0_59:4.1
	HdrSrc-0_58:4.1
	HdrSrc-0_57-4_58_2_1:4.1
	kbracey_32bit:4.1.0.10
	HdrSrc-0_57:4.1
	HdrSrc-0_56:4.1
	HdrSrc-0_55:4.1
	HdrSrc-0_54:4.1
	HdrSrc-0_53:4.1
	HdrSrc-0_52:4.1
	HdrSrc-0_51:4.1
	HdrSrc-0_50:4.1
	HdrSrc-0_49:4.1
	HdrSrc-0_48:4.1
	HdrSrc-0_47:4.1
	HdrSrc-0_46:4.1
	HdrSrc-0_45:4.1
	HdrSrc-0_44:4.1
	HdrSrc-0_43:4.1
	HdrSrc-0_42:4.1
	dcotton_autobuild_BaseSW:4.3
	HdrSrc-0_41:4.1
	HdrSrc-0_39:4.1
	HdrSrc-0_38:4.1
	HdrSrc-0_37:4.1
	HdrSrc-0_36:4.1
	HdrSrc-0_35:4.1
	HdrSrc-0_34:4.1
	HdrSrc-0_33:4.1
	HdrSrc-0_32:4.1
	HdrSrc-0_31:4.1
	Ursula_RiscPC_merge:4.1
	HdrSrc-0_30:4.1
	HdrSrc-0_29:4.1
	Ursula_merge:4.1
	HdrSrc-0_28:4.1
	HdrSrc-0_27:4.1
	HdrSrc-0_26:4.1
	HdrSrc-0_25:4.1
	HdrSrc-0_24:4.1
	HdrSrc-0_23:4.1
	HdrSrc-0_22:4.1
	HdrSrc-0_21:4.1
	HdrSrc-0_20:4.1
	HdrSrc-0_19:4.1
	nturton_HdrSrc-0_11:4.1
	HdrSrc-0_18:4.1
	HdrSrc-0_17:4.1
	HdrSrc-0_16:4.1
	HdrSrc-0_15:4.1
	HdrSrc-0_14:4.1
	HdrSrc-0_13:4.1
	HdrSrc-0_12:4.1
	HdrSrc-0_11:4.1
	HdrSrc-0_10:4.1
	HdrSrc-0_09:4.1
	HdrSrc-0_08:4.1
	HdrSrc-0_07:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	HdrSrc-0_06:4.1
	HdrSrc-0_05:4.1
	HdrSrc-0_04:4.1
	HdrSrc-0_03:4.1
	HdrSrc-0_02:4.1
	HdrSrc-0_01:4.1
	nicke_HdrSrc_21_9_98:4.1
	nicke_HdrSrc_21_8_98:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	afrost_NC2_Generic:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.6
date	2012.05.14.19.01.24;	author bavison;	state Exp;
branches;
next	4.5;
commitid	leUAY5ZgoiipVI4w;

4.5
date	2011.01.15.22.29.58;	author jlee;	state Exp;
branches;
next	4.4;

4.4
date	2002.10.29.21.42.08;	author rsprowson;	state Exp;
branches
	4.4.2.1;
next	4.3;

4.3
date	2000.11.16.10.52.43;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	2000.09.15.11.15.44;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.21.30;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.4.2.1
date	2009.02.21.17.12.13;	author jlee;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.21.30;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.05.19.37.27;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.11.37.19;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.19.33.13;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@  Added definitions for the ARMv6 extensions to the CP15 cache type register
Detail:
  This allows the cache properties of CPUs like the ARM1176JZF-S (as featured
  in the Raspberry Pi) to be correctly determined
Admin:
  Tested in a Raspberry Pi build

Version 2.07. Tagged as 'HdrSrc-2_07'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > hdr:ARM600

; ********************
; *** Changes List ***
; ********************

; 13-Jan-93 TMD Created.
; 12-Mar-93 TMD Added SetCop, ReadCop and CR_foo symbols
; 10-Aug-93 SMC Added condition fields to SetCop and ReadCop

VIDC            EQU     &03500000

; Access privilege bits

AP_ROM  *       4_0             ; user read-only,  svc read-only   (if R bit set in CR)
AP_None *       4_1             ; user no access,  svc read/write
AP_Read *       4_2             ; user read-only,  svc read/write
AP_Full *       4_3             ; user read/write, svc read/write

L1_AP     *     4_300000        ; masks for AP fields
L2_AP     *     4_333300
L2X_AP    *     4_000300

L1_APMult *     4_100000        ; value to multiply AP_ values by for L1 entry
L2_APMult *     4_111100        ; value to multiply AP_ values by for L2 entry with same AP for each sub-page
L2T_APMult *    4_000100        ; value to multiply AP_ values by for tiny or extended L2 entry
L2X_APMult *    L2T_APMult

L1_DomainShift *   5            ; lowest bit position in L1 entry for domain number

L1_Fault *      4_0             ; translation fault specifier in L1 entry
L1_Page *       4_1             ; coarse page specifier in L1 entry
L1_Section *    4_2             ; section specifier in L1 entry
L1_Fine *       4_3             ; fine page specifier in L2 entry

L2_Fault *      4_0             ; translation fault specifier in L2 entry
L2_LargePage *  4_1             ; large page specifier in L2 entry
L2_SmallPage *  4_2             ; small page specifier in L2 entry
L2_TinyPage  *  4_3             ; tiny page specifier in L2 entry (fine only)
L2_ExtPage *    4_3             ; extended page specifier in L2 entry (XScale - coarse only)

L1_TEXShift *   12
L1_TEX  *       2_1111 :SHL: 12 ; Type Extension bits
L1_X    *       1 :SHL: 12      ; XScale - modifies meaning of C and B bits
L1_P    *       1 :SHL: 9       ; page bit in level 1 entry (XScale - ECC enable on 80200)
L1_U    *       1 :SHL: 4       ; updateable bit in level 1 entry (ARM6 only, not ARM7+)
L1_C    *       1 :SHL: 3       ; cacheable  --------""----------
L1_B    *       1 :SHL: 2       ; bufferable --------""----------

L2L_TEXShift *  12
L2_TEXShift *   6
L2L_TEX *       2_1111 :SHL: 12 ; Type Extension bits (large pages)
L2_TEX  *       2_1111 :SHL: 6  ; Type Extension bits (tiny and extended pages)
L2L_X   *       1 :SHL: 12      ; XScale - modifies meaning of C and B bits (large pages)
L2_X    *       1 :SHL: 6       ; XScale - modifies meaning of C and B bits (tiny and extended pages)
L2_C    *       1 :SHL: 3       ; cacheable  bit in level 2 entry
L2_B    *       1 :SHL: 2       ; bufferable --------""----------

; MMU control register bits

MMUC_M  *       1 :SHL: 0       ; MMU enable
MMUC_A  *       1 :SHL: 1       ; Address fault enable
MMUC_C  *       1 :SHL: 2       ; Cache enable (or Data cache enable)
MMUC_W  *       1 :SHL: 3       ; Write buffer enable
MMUC_P  *       1 :SHL: 4       ; 32-bit program space enable
MMUC_D  *       1 :SHL: 5       ; 32-bit data space enable
MMUC_L  *       1 :SHL: 6       ; Late abort mode enable
MMUC_B  *       1 :SHL: 7       ; Big-endian mode enable
MMUC_S  *       1 :SHL: 8       ; S-mode enable
MMUC_R  *       1 :SHL: 9       ; R-mode enable (ARM7 or later)
MMUC_F  *       1 :SHL: 10      ; Coprocessor frequency bit (ARM700 only)
MMUC_Z  *       1 :SHL: 11      ; Branch predictor enable
MMUC_I  *       1 :SHL: 12      ; Instruction cache enable
MMUC_V  *       1 :SHL: 13      ; High exception vectors
MMUC_RR *       1 :SHL: 14      ; Round-robin replacement
MMUC_L4 *       1 :SHL: 15      ; Disable ARMv5 "load Thumb state with PC" behaviour
MMUC_nF *       1 :SHL: 30      ; not FastBus (ie separate CPUCLK from MEMCLK)
MMUC_iA *       1 :SHL: 31      ; Asynchronous

; ARM600 MMU coprocessor number

Arm600Cop CP      15

; ARM600 coprocessor registers

CR_Dummy        CN      0
CR_ID           CN      0       ; read-only
CR_Control      CN      1       ; write-only
CR_TTabBase     CN      2       ; write-only
CR_Domains      CN      3       ; write-only
CR_FaultStatus  CN      5       ; read
CR_TLBFlush     CN      5       ; write
CR_FaultAddress CN      6       ; read
CR_TLBPurge     CN      6       ; write
CR_IDCFlush     CN      7       ; write-only

; Cache type register fields
; NOTE - need to be kept in sync with hdr.MEMM.VMSAv6!

CT_ctype_pos    *       25
CT_ctype_mask   *       &F:SHL:CT_ctype_pos
CT_S_pos        *       24
CT_S            *       1:SHL:CT_S_pos
CT_Dsize_pos    *       12
CT_Dsize_mask   *       &FFF:SHL:CT_Dsize_pos
CT_Isize_pos    *       0
CT_Isize_mask   *       &FFF:SHL:CT_Isize_pos

CT_ctype_WT     *       0       ; write-through cache
CT_ctype_WB_Crd *       1       ; write-back, clean by reading data
CT_ctype_WB_CR7 *       2       ; write-back, clean with register 7
CT_ctype_WB_Cal_LD  *   5       ; write-back, clean by allocating data, lockdown (?)
CT_ctype_WB_CR7_LDd *   5       ; write-back, clean with register 7, lockdown (format D)
CT_ctype_WB_CR7_LDa *   6       ; write-back, clean with register 7, lockdown (format A)
CT_ctype_WB_CR7_LDb *   7       ; write-back, clean with register 7, lockdown (format B)
CT_ctype_WB_CR7_Lx  *   8       ; write-back, clean with register 7, multiple cache levels
CT_ctype_WB_CR7_LDc *  14       ; write-back, clean with register 7, lockdown (format C)

CT_P_pos        *       11
CT_P            *       1:SHL:CT_P_pos
CT_size_pos     *       6
CT_size_mask    *       7:SHL:CT_size_pos
CT_assoc_pos    *       3
CT_assoc_mask   *       7:SHL:CT_assoc_pos
CT_M_pos        *       2
CT_M            *       1:SHL:CT_M_pos
CT_len_pos      *       0
CT_len_mask     *       3:SHL:CT_len_pos

CT_size_512     *       0
CT_size_1K      *       1
CT_size_2K      *       2
CT_size_4K      *       3
CT_size_8K      *       4
CT_size_16K     *       5
CT_size_32K     *       6
CT_size_64K     *       7
CT_size_128K    *       8
CT_size_768     *       0
CT_size_1536    *       1
CT_size_3K      *       2
CT_size_6K      *       3
CT_size_12K     *       4
CT_size_24K     *       5
CT_size_48K     *       6
CT_size_96K     *       7
CT_size_192K    *       8

CT_assoc_1      *       0
CT_assoc_2      *       1
CT_assoc_4      *       2
CT_assoc_8      *       3
CT_assoc_16     *       4
CT_assoc_32     *       5
CT_assoc_64     *       6
CT_assoc_128    *       7
CT_assoc_0      *       0
CT_assoc_3      *       1
CT_assoc_6      *       2
CT_assoc_12     *       3
CT_assoc_24     *       4
CT_assoc_48     *       5
CT_assoc_96     *       6
CT_assoc_192    *       7

CT_len_2        *       0
CT_len_4        *       1
CT_len_8        *       2
CT_len_16       *       3

CT_M_512        *       0
CT_M_1K         *       0
CT_M_2K         *       0
CT_M_4K         *       0
CT_M_8K         *       0
CT_M_16K        *       0
CT_M_32K        *       0
CT_M_64K        *       0
CT_M_128K       *       0
CT_M_768        *       1
CT_M_1536       *       1
CT_M_3K         *       1
CT_M_6K         *       1
CT_M_12K        *       1
CT_M_24K        *       1
CT_M_48K        *       1
CT_M_96K        *       1
CT_M_192K       *       1



        MACRO
        SetCop  $reg, $cop, $cc
        MCR$cc  Arm600Cop, 0, $reg, $cop, CR_Dummy
        MEND

        MACRO
        ReadCop $reg, $cop, $cc
        MRC$cc  Arm600Cop, 0, $reg, $cop, CR_Dummy
        MEND


        END
@


4.5
log
@Merge Cortex branch of HdrSrc into trunk
Detail:
  This should merge all of the Cortex HdrSrc changes into the trunk, so we don't have to worry about OMAP builds breaking each time the trunk HdrSrc changes
Admin:
  Untested!


Version 1.76. Tagged as 'HdrSrc-1_76'
@
text
@d112 1
d126 2
a127 1
CT_ctype_WB_Cal_LD  *   5	; write-back, clean by allocating data, lockdown (?)
d130 2
a131 1
CT_ctype_WB_CR7_Lx *  8       ; write-back, clean with register 7, multiple cache levels
d133 2
d152 1
d161 1
d193 1
d202 1
@


4.4
log
@Addition (manually at present) of new allocations requested from AMG.
Addition of Tungsten machine and Iyonix user interface.
New 1024k ROM image size.

Version 1.35. Tagged as 'HdrSrc-1_35'
@
text
@d128 1
@


4.4.2.1
log
@  Added new cache type for Cortex CPU's
Detail:
  CB_ctype_WB_CR7_Lx - cache type #8
Admin:
  Change did not break header export procedure. The change is only capable of affecting new kernels that support the new cache type.


Version 1.62, 4.162.2.1. Tagged as 'HdrSrc-1_62-4_162_2_1'
@
text
@a127 1
CT_ctype_WB_CR7_Lx *  8       ; write-back, clean with register 7, multiple cache levels
@


4.3
log
@Hdr:CPU.Generic26 adjusted to not mess up listing state.
Extra errors added for OS_Hardware.
Hdr:Machine.Machine flag changes for "M_32" build.

Version 1.09. Tagged as 'HdrSrc-1_09'
@
text
@d34 4
d40 2
d54 1
d56 4
d64 6
d84 2
a85 2
MMUC_R  *       1 :SHL: 9       ; R-mode enable (ARM700 or later)
MMUC_F  *       1 :SHL: 10      ; Coprocessor frequency bit
d90 1
@


4.2
log
@* Optimised conditional RETURNVS and RETURNVC macros.
* Added new flags and bits to Hdr:MEMM.ARM600.
* Added "HAL" switch in Hdr:Machine.Machine. True only for my prototype M_32.

Version 1.03. Tagged as 'HdrSrc-1_03'
@
text
@d107 1
d109 1
a109 1
CT_ctype_WB_CR7_LDb *   7       ; write-back, clean with register 7, lockdown (format A)
@


4.1
log
@Initial revision
@
text
@d29 1
d40 1
a40 1
L1_Page *       4_1             ; page specifier in L1 entry
d42 1
d47 1
d49 1
a49 1
L1_U    *       1 :SHL: 4       ; updateable bit in level 1 entry (will not exist on ARM700)
d60 1
a60 1
MMUC_C  *       1 :SHL: 2       ; Cache enable
d67 1
a67 1
MMUC_R  *       1 :SHL: 9       ; R-mode enable (ARM700 specific)
d69 6
d92 84
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
