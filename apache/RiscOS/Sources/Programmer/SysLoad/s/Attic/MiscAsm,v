head	1.3;
access;
symbols
	SysLoad-0_03:1.2
	SysLoad-0_02:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2008.09.25.20.57.25;	author srevill;	state dead;
branches;
next	1.2;

1.2
date	2007.05.24.01.44.35;	author srevill;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.01.15.26.43;	author srevill;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.03.01.15.26.43;	author srevill;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  Now works on RISC OS 5.
Detail:
  High resolution timer code modified to work on a RISC OS 5 (HAL)
  version of RISC OS.
Admin:
  Tested on IYONIX.

Version 0.04. Tagged as 'SysLoad-0_04'
@
text
@; Copyright 2006 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >SysLoad:s.MiscAsm
; Copyright © tematic, 2006
; All rights reserved.
;


	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:APCS.<APCS>
	GET	Hdr:System
	GET	Hdr:Proc
	GET	VersionASM

 [ DEBUG
 ! 0,"MiscAsm: This is a debug build!"
 ]


	AREA	|MiscAsm$$Code|,CODE,READONLY


	EXPORT	Get_Hires_Time


Get_Hires_Time
	FunctionEntry "R4,R5"
	; Disable interrupts
	SCPSR	I_bit, 0, R14,, R5
	; Do stuff
	MOV	R0, #0x10C		; Zero-page location of monotonic timer
	LDR	R0, [R0]		; R0 = cs timer, maybe out of date if IRQ not serviced
	MOV	R3, #&4E00
	ORR	R3, R3, #&20		; R3 = 2000000/100 - useful constant
	MUL	R0, R3, R0
	; Read IRQ status after reading Timer 0 to determine if cs timer is out of date.
	; In case Timer 0 wraps between reading Timer 0 and reading IRQ status, also read
	; IRQ status before reading Timer 0, and if the IRQ becomes set between the two
	; status reads, then ignore the actual Timer 0 read and behave as though we had
	; read the value just after it wrapped.
	MOV	R14, #IOC
	LDRB	R1, [R14, #IOCIRQREQA]
	STRB	R14, [R14, #Timer0LR]
	LDRB	R4, [R14, #Timer0LL]
	LDRB	R2, [R14, #Timer0LH]
	ORRS	R4, R4, R2, LSL #8	; Also clears C (useful later)
	LDRB	R2, [R14, #IOCIRQREQA]
	TST	R2, #timer0_bit		; Timer wrap IRQ pending?
	ADDNE	R0, R0, R3		; Add 1 cs if so
	EOR	R1, R1, R2
	TST	R1, #timer0_bit		; Did timer wrap?
	SBCEQ	R4, R3, R4		; R12 = 19999-TimeR14 (note cunning use of C flag)
	ADDEQ	R0, R0, R4
	; Restore interrupts
	RestPSR	R5
	; Return
	Return	"R4,R5"


	END
@


1.2
log
@  Tiny assembler tweak.
Detail:
  Referenced SteveMacro header file when it needed Hdr:Proc.
Admin:
  Tested in patched Batch One BBE.

Version 0.03. Tagged as 'SysLoad-0_03'
@
text
@@


1.1
log
@Initial revision
@
text
@d25 1
a25 1
	GET	Hdr:SteveMacro
@


1.1.1.1
log
@  Import of first version of SysLoad module.
Detail:
  Monitors system load (see Docs directory for more info)
Admin:
  (Re-imported now we're using a new repository)
@
text
@@
