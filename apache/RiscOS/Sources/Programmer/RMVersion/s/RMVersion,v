head	1.2;
access;
symbols
	RMVersion-0_04:1.2
	RMVersion-0_03:1.2
	RMVersion-0_02:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	99.11.18.12.56.16;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	98.12.07.14.38.27;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.12.07.14.38.27;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  32-bit capability added.
Detail:
  The Utility can run in either USR26 or USR32 mode.
  The AOF files contain APCS-R or APCS-32 code as per build options.
Admin:
  Test application run to verify code still works.

Version 0.03. Tagged as 'RMVersion-0_03'
@
text
@; Copyright 1998 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; RMVersion 0.02
; © Acorn Computers Ltd. 1998
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:Symbols
        GET     Hdr:System
        GET     Hdr:NdrDebug
        GET     Hdr:ModHand
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:HighFSI
        GET     Hdr:Territory
        GET     Hdr:FileTypes
        GET     Hdr:MsgTrans

        GET     VersionASM

        AREA    |RMVersion$$Code|, CODE, READONLY

        [ :LNOT: :DEF: module
        GBLL    module
module  SETL    false
        ]

; Definition of output buffer structure from XOS_ReadArgs
                ^       0
modulename      #       4
variable        #       4
usingfile       #       4
quiet           #       4
usingrom        #       4
        [ :LNOT: utility
filebuffer      #       4
        ]
args_bufsize    #       0

        [ utility
filebufferlen   *       (end_file_buffer - file_buffer)
        |
filebufferlen   *       256
        ]

        MACRO
        GetFileBuffer   $dest
        [ utility
        ADR     $dest, file_buffer
        |
        LDR     $dest, [r7, #filebuffer]
        ]
        MEND

        MACRO
        GetArg          $dest,$arg
        [ utility
        LDR     $dest, output_buffer + $arg
        |
        LDR     $dest, [r7, # $arg ]
        ]
        MEND

        MACRO
        SetArg          $dest,$arg
        [ utility
        STR     $dest, output_buffer + $arg
        |
        STR     $dest, [r7, # $arg ]
        ]
        MEND

        MACRO
        LDMRet  $regs, $cond
        [ {CONFIG}=26
        LDM$cond.FD sp!, {$regs, pc}^
        |
        LDM$cond.FD sp!, {$regs, pc}
        ]
        MEND

        [ :LNOT: utility
flag_rommod     *       1 :SHL: 0       ; looking for ROM module name
flag_rammod     *       1 :SHL: 1       ; looking for active module name
flag_sysmod     *       1 :SHL: 2       ; looking for a file
        ]

        EXPORT  rmversion
rmversion
        [ :LNOT: utility
; _kernel_oserror *rmversion(int flags, const char *name, unsigned int *version);
        ; For code use, insert an APCS wrapper around the code
        MOV     ip, sp
        STMDB   sp!, {a3, v1-v6, sl, fp, ip, lr, pc}
        SUB     fp, ip, #4
        ; Fake up the OS_ReadArgs output block
        SUB     sp, sp, #args_bufsize
        MOV     r7, sp
        SetArg  a2, modulename
        AND     a2, a1, #flag_rommod
        SetArg  a2, usingrom
        AND     a2, a1, #flag_sysmod
        SetArg  a2, usingfile
        LDR     a1, =_rmversion_data_buffer
        [ module
        LDR     a2, [sl, #-536]
        ADD     a1, a2, a1
        ]
        SetArg  a1, filebuffer
        BL      rmversion_asm
        ADD     sp, sp, #args_bufsize
        LDMFD   sp!, {a3}
        MOVVS   a2, #0
        STRVC   a1, [a3]
        STRVS   a2, [a3]
        MOVVC   a1, #0
        [ {CONFIG}=26
        LDMDB   fp, {v1-v6, sl, fp, sp, pc}^
        |
        LDMDB   fp, {v1-v6, sl, fp, sp, pc}
        ]
rmversion_asm
        STMFD   sp!, {lr}
        |
        STMFD   sp!, {lr}
        ADR     r2, output_buffer
        MOV     r3, #(output_buffer_end - output_buffer)
        BL      read_args
        ]

        ;       Was a module name specified?
        GetArg  r1, modulename
        TEQ     r1, #0
        BEQ     exit

        ;       Were we asked to look at a file?
        ;       If so, grab the string whilst we still have the full filename
        GetArg  r0, usingfile
        TEQ     r0, #0
        BLNE    load_file_help_data

        ;       Find leafname of specified module
        GetArg  r1, modulename
        BL      r1_skipdots
        SetArg  r1, modulename

        ;       Were we asked to look up a ROM module?
        GetArg  r0, usingrom
        TEQ     r0, #0
        BNE     find_rom_pointer

        ;       Were we asked to look at a file?
        GetArg  r0, usingfile
        TEQ     r0, #0
        BNE     start

        ;       Get module details
        MOV     r0, #ModHandReason_LookupName
        SWI     XOS_Module
        BVS     exit

        ;       Find address of help string
        LDR     r0, [r3, #Module_HelpStr]
        ADD     r0, r0, r3

        ;       Begin the processing now that R0 points to the help string
        ;       wherever this has come from
start
        ;       R4 is set up as a constant for usage in several CMPCS instructions below
        MOV     r4, #'9' + 1
        MOV     r1, #0
        MOV     r7, #0
        MOV     r6, r0

loop1
        LDRB    r2, [r6, r7]    ; Next byte of help string
        TEQ     r2, #0          ; Found the end?
        BEQ     exit            ; Yes.  Oh dear.  Die.
        CMP     r2, #'0'        ; Clear carry if not possibly digit (<"0")
        CMPCS   r4, r2          ; Clear carry if not possibly digit (>"9")
        CMPCS   r1, #16         ; Seen enough characters?
        BCS     exitloop        ; Got a digit, had 16 characters, so could be it!
        SUBS    r5, r2, #9      ; Was it a TAB? (If it is (Z set), then C set too!)
                ; Yes - R5=0, C is set, so R1=(R1 DIV 8) + 1
                ; *8.  So with the subsequent line, we've done R1=(R1+8)ANDNOT7
        ADCEQ   r1, r5, r1, lsr #3
        MOVEQ   r1, r1, lsl #3
                ; No - so just increment our counter by one
        ADDNE   r1, r1, #1
        ADD     r7, r7, #1      ; Pointer independent of character count.  Increment
        B       loop1
exitloop
        ADD     r0, r6, r7      ; R0 = Address of first digit
        MOV     r6, #0          ; Version number starts at zero
loop_major
        LDRB    r5, [r0], #1    ; Get next character
        TEQ     r5, #'.'        ; Found the terminator?
        BEQ     exit_loop_major ; yes - jump forward
        CMP     r5, #'0'        ; Clear carry if char less than "0"
        CMPCS   r4, r5          ; If C set, clear C if char is greater than "9"
        SUBCS   r5, r5, #'0'    ; If C still set, reduce to range 0-9
        ORRCS   r6, r5, r6, lsl #4 ; Insert into version. R6 = (R6 << 4) | R5
        BCS     loop_major
        B       exit_loop_minor

exit_loop_major
        MOV     r6, r6, lsl #16 ; Move major version number up to top 16 bits
        MOV     r8, #12         ; Shift amount for most significant minor version digit
loop_minor
        LDRB    r5, [r0] ,#1    ; Get next character
        CMP     r5, #'0'        ; Usual test for digits
        CMPCS   r4, r5
        BCC     exit_loop_minor
        SUB     r5, r5, #'0'
        ORR     r6, r6, r5, lsl r8 ; Put it into the version string
        SUBS    r8, r8, #4      ; Reduce shift factor by one nybble
        BNE     loop_minor
exit_loop_minor
        [ utility
        ; At this point, R6 holds the BCD version number, as returned by OS_Module 20
        ; But for our purposes we need this number as version*100.  So we convert it.
        BL      r6_to_decimal
        STR     r6, [r12], #4
        GetArg  r0, variable    ; Did user specify system variable name?
        MOV     r1, r12
        TEQ     r0, #0
        LDRNE   r2, [r0]                ; Yes, so extract the GSTrans'ed string
        MOVNE   r2, r2, lsl #16         ; These two effect "AND r2, r2, #&0000FFFF"
        MOVNE   r2, r2, lsr #16
        ADDNE   r0, r0, #2              ; Skip two byte length field
        BNE     gotvar                  ; Don't need to construct a variable
        BL      copy_moduleversion      ; No.  So copy the default
        LDR     r0, output_buffer       ; If not specified, concat the module name
        BL      r0strlen                ; Count it for the rstrcpy
gotvar  BL      rstrcpy                 ; "memcpy(R1, R0, R2)"
        MOV     r0, r12                 ; Name buffer
        SUB     r1, r12, #4             ; Size
        MOV     r2, #4                  ; Size of Size
        MOV     r3, #0                  ; Context
        MOV     r4, #1                  ; Numeric variable
        SWI     XOS_SetVarVal
        ]

exit
        [ utility
        LDMVCFD sp!, {pc}               ; normal exit
        GetArg  lr, quiet
        TEQ     lr, #0
        CMPNE   lr, lr                  ; clear V if non-zero
        LDMFD   sp!, {pc}
        |
        MOVVC   r0, r6
        LDMFD   sp!, {pc}
        ]

        LTORG

;
; r1_skipdots returns the leafname of the R1 parameter.
; Corrupts r0 and r2.
;
r1_skipdots
        MOV     r0, r1
r1_sd_l1
        LDRB    r2, [r0], #1
        TEQ     r2, #'.'
        TEQNE   r2, #':'
        MOVEQ   r1, r0
        TEQ     r2, #0
        BNE     r1_sd_l1
        MOV     pc, lr


        [ utility
;
; r6_to_decimal
; Corrupts R7, R9
;
r6_to_decimal
        MOV     r9, r6, lsl #8
        BIC     r9, r9, #&F00
        ORR     r9, r9, #&8000
        MOV     r6, #0
r6_t_d_l1
        AND     r7, r9, #15             ; Get least significant nybble
        EORS    r9, r9, r7              ; Mask out of value being converted
        MOVEQ   pc, lr                  ; Completed it
        ADD     r6, r6, r6, lsl #2      ; result = result * 5
        ADD     r6, r7, r6, lsl #1      ; result = result * 2 + units (ie. result*10 + units)
        MOV     r9, r9, ror #28         ; Rotate source around for next nybble
        B       r6_t_d_l1
        ]

; Returns ROM module version in R6, corrupts R0-R6,R8
find_rom_pointer
        MOV     r8, r1
        MVN     r2, #0
        MOV     r1, #0
        MOV     r0, #ModHandReason_EnumerateROM_ModulesWithInfo
frp_loop
        SWI     XOS_Module
        ADRVS   r0, NotInROMToken
        MOVVS   r4, r8
        BVS     gen_error
frp_cmp_r3_r8
        STMFD   sp!, {r0-r6, r8}
        MVN     r0, #0
        MOV     r1, r3
        MOV     r2, r8
        MOV     r3, #Collate_IgnoreCase
        SWI     XTerritory_Collate
        ADDVS   sp, sp, #32
        BVS     exit
        TEQ     r0, #0
        LDMFD   sp!, {r0-r6, r8}
        BNE     frp_loop
        B       exit_loop_minor

        [ utility
copy_moduleversion
        LDR     r0, output_buffer + usingfile  ; Check file flag to see which string we copy
        TEQ     r0, #0
        ADRNE   r0, discstring
        MOVNE   r2, #(enddiscstring - discstring)
        BNE     rstrcpy
        LDR     r0, output_buffer + usingrom   ; Check ROM flag
        TEQ     r0, #0
        ADREQ   r0, modstring           ; Set buffer & Length then fall into rstrcpy
        MOVEQ   r2, #(endmodstring - modstring)
        ADRNE   r0, romstring
        MOVNE   r2, #(endromstring - romstring)
rstrcpy                        ; "memcpy(R1,R0,R2)"
        LDRB    r3, [r0], #1
        STRB    r3, [r1], #1
        SUBS    r2, r2, #1
        BNE     rstrcpy
        STRB    r2, [r1]
        MOV     pc, lr
r0strlen                                ; On exit, R2 is "strlen(R0)"
        MOV     r11, r0                 ; Copy of R0 pointer (we're preserving R0)
strlenloop
        LDRB    r10, [r11], #1          ; Get next byte
        CMP     r10, #1                 ; Comparison clears C if got terminator, else sets C
        BCS     strlenloop              ; Was not terminator - around again
        SBC     r2, r11, r0             ; R11 - R0 - 1, courtesy of the clear C flag
        MOV     pc, lr
        ]

NotAModToken
        DCD     ErrorNumber_NotMod
        DCB     ErrorString_NotMod, 0
        ALIGN
NotFoundToken
        DCD     ErrorNumber_RMNotFound
        DCB     ErrorString_RMNotFound, 0
        ALIGN
NotInROMToken
        DCD     ErrorNumber_RMNotFoundInROM
        DCB     ErrorString_RMNotFoundInROM, 0
        ALIGN

        [ utility
modstring
        DCB     "ModuleVersion$"
endmodstring
        DCB     0
discstring
        DCB     "SystemVersion$"
enddiscstring
        DCB     0
romstring
        DCB     "ROMVersion$"
endromstring
        DCB     0
        ALIGN
        ]

load_file_help_data
        STMFD   sp!, {r1, r2, lr}
        MOV     r0, #OSFile_ReadWithType
        SWI     XOS_File
        ADDVS   sp, sp, #12
        BVS     exit
        TEQ     r0, #0
        ADREQ   r0, NotFoundToken
        ADDEQ   sp, sp, #12
        MOVEQ   r4, r1
        BEQ     gen_error
        RSB     r6, r6, #&1000
        TEQ     r6, #(&1000 - FileType_Module)
        ADRNE   r0, NotAModToken
        ADDNE   sp, sp, #12
        MOVNE   r4, r1
        BNE     gen_error
        GetFileBuffer r2
        MOV     r0, #OSFind_ReadFile
        SWI     XOS_Find
        BVS     exit_load
        MOVS    r1, r0
        BEQ     exit_load               ; For safety (and RISC OS 2?)
        MOV     r0, #OSGBPB_ReadFromPTR ; Read first &18 bytes of module header
        GetFileBuffer r2
        MOV     r3, #Module_HC_Table
        SWI     XOS_GBPB
        BVS     exit_close
        LDR     r4, [r2, #-4]           ; Help offset - load directly into OS_GBPB 3's R4
        TEQ     r4, #0                  ; Another sanity check
        MOVEQ   r0, #0
        SWIEQ   XOS_Find
        ADDEQ   sp, sp, #12
        BEQ     exit
        MOV     r0, #OSGBPB_ReadFromGiven
        GetFileBuffer r2
        MOV     r3, #filebufferlen
        SWI     XOS_GBPB
        GetFileBuffer r2
        SetArg  r2, usingfile
exit_close
        STMFD   sp!, {r0}
        MOV     r0, #0
        SWI     XOS_Find
        LDMFD   sp!, {r0}
exit_load
        LDMFD   sp!, {r1, r2, lr}
        BVS     exit
        MOV     pc, lr

        [ utility
read_args
        ADR     r0, readargs_match
        SWI     XOS_ReadArgs
        LDMVSFD sp!, {pc}
        MOV     pc, lr

; The OS_ReadArgs input format specifier
readargs_match
        DCB     "M/A,V/G,F=FILE/S,Q=QUIET/S,R=ROM/S", 0
        ALIGN
output_buffer
        %       256
output_buffer_end
file_buffer
        %       256
end_file_buffer
        ]
gen_error
        STMFD   sp!, {r0}
        SUB     sp, sp, #16
        MOV     r0, sp
        ADR     r1, kernel_messages
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile
        ADDVS   sp, sp, #20
        BVS     exit
        LDR     r0, [sp, #16]
        MOV     r2, #0
        MOV     r3, r2
        MOV     r1, sp
        SWI     XMessageTrans_ErrorLookup
        STR     r0, [sp, #16]
        MOV     r0, sp
        SWI     XMessageTrans_CloseFile
        ADD     sp, sp, #16
        LDR     r0, [sp], #4
        SWIVC   XOS_GenerateError
        B       exit
kernel_messages
        DCB     "Resources:$.Resources.Kernel.Messages", 0
        ALIGN
        DCB     "RMVersion ", Module_MajorVersion, " © Pace Micro Technology plc 1999", 0
        ALIGN

        [ :LNOT: utility
        AREA    |RMVersion$$Data|, DATA, NOINIT
        EXPORT  _rmversion_data_buffer
_rmversion_data_buffer
        %       filebufferlen
        ]

        END
@


1.1
log
@Initial revision
@
text
@d18 21
a38 19
	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:Symbols
	GET	Hdr:System
	GET	Hdr:NdrDebug
	GET	Hdr:ModHand
	GET	Hdr:FSNumbers
	GET	Hdr:NewErrors
	GET	Hdr:HighFSI
	GET	Hdr:Territory
	GET	Hdr:FileTypes
	GET	Hdr:MsgTrans

	AREA	|RMVersion$$Code|, CODE, READONLY

	[ :LNOT: :DEF: module
	GBLL	module
module	SETL	false
	]
d41 58
a98 49
		^	0
modulename	#	4
variable	#	4
usingfile	#	4
quiet		#	4
usingrom	#	4
	[ :LNOT: utility
filebuffer	#	4
	]
args_bufsize	#	0

	[ utility
filebufferlen	*	(end_file_buffer - file_buffer)
	|
filebufferlen	*	256
	]

	MACRO
	GetFileBuffer	$dest
	[ utility
	ADR	$dest, file_buffer
	|
	LDR	$dest, [r7, #filebuffer]
	]
	MEND

	MACRO
	GetArg		$dest,$arg
	[ utility
	LDR	$dest, output_buffer + $arg
	|
	LDR	$dest, [r7, # $arg ]
	]
	MEND

	MACRO
	SetArg		$dest,$arg
	[ utility
	STR	$dest, output_buffer + $arg
	|
	STR	$dest, [r7, # $arg ]
	]
	MEND

	[ :LNOT: utility
flag_rommod	*	1 :SHL: 0	; looking for ROM module name
flag_rammod	*	1 :SHL: 1	; looking for active module name
flag_sysmod	*	1 :SHL:	2	; looking for a file
	]
d100 1
a100 1
	EXPORT	rmversion
d102 1
a102 1
	[ :LNOT: utility
d104 30
a133 26
	; For code use, insert an APCS-R wrapper around the code
	MOV	ip, sp
	STMDB	sp!, {a3, v1-v6, sl, fp, ip, lr, pc}
	SUB	fp, ip, #4
	; Fake up the OS_ReadArgs output block
	SUB	sp, sp, #args_bufsize
	MOV	r7, sp
	SetArg	a2, modulename
	AND	a2, a1, #flag_rommod
	SetArg	a2, usingrom
	AND	a2, a1, #flag_sysmod
	SetArg	a2, usingfile
	LDR	a1, =_rmversion_data_buffer
	[ module
	LDR	a2, [sl, #-536]
	ADD	a1, a2, a1
	]
	SetArg	a1, filebuffer
	BL	rmversion_asm
	ADD	sp, sp, #args_bufsize
	LDMFD	sp!, {a3}
	MOVVS	a2, #0
	STRVC	a1, [a3]
	STRVS	a2, [a3]
	MOVVC	a1, #0
	LDMDB	fp, {v1-v6, sl, fp, sp, pc}^
d135 42
a176 42
	STMFD	sp!, {lr}
	|
	STMFD	sp!, {lr}
	ADR	r2, output_buffer
	MOV	r3, #(output_buffer_end - output_buffer)
	BL	read_args
	]

	;	Was a module name specified?
	GetArg	r1, modulename
	TEQ	r1, #0
	BEQ	exit

	;	Were we asked to look at a file?
	;	If so, grab the string whilst we still have the full filename
	GetArg	r0, usingfile
	TEQ	r0, #0
	BLNE	load_file_help_data

	;	Find leafname of specified module
	GetArg	r1, modulename
	BL	r1_skipdots
	SetArg	r1, modulename

	;	Were we asked to look up a ROM module?
	GetArg	r0, usingrom
	TEQ     r0, #0
	BNE     find_rom_pointer

	; 	Were we asked to look at a file?
	GetArg	r0, usingfile
	TEQ     r0, #0
	BNE     start

	;	Get module details
	MOV     r0, #ModHandReason_LookupName
	SWI     XOS_Module
	BVS     exit

	;	Find address of help string
	LDR     r0, [r3, #Module_HelpStr]
	ADD     r0, r0, r3
d178 2
a179 2
	;	Begin the processing now that R0 points to the help string
	;	wherever this has come from
d181 5
a185 5
	; 	R4 is set up as a constant for usage in several CMPCS instructions below
	MOV     r4, #'9' + 1
	MOV     r1, #0
	MOV     r7, #0
	MOV     r6, r0
d188 16
a203 16
	LDRB    r2, [r6, r7]    ; Next byte of help string
	TEQ     r2, #0          ; Found the end?
	BEQ     exit            ; Yes.  Oh dear.  Die.
	CMP     r2, #'0'     	; Clear carry if not possibly digit (<"0")
	CMPCS   r4, r2          ; Clear carry if not possibly digit (>"9")
	CMPCS   r1, #16         ; Seen enough characters?
	BCS     exitloop        ; Got a digit, had 16 characters, so could be it!
	SUBS    r5, r2, #9      ; Was it a TAB? (If it is (Z set), then C set too!)
		; Yes - R5=0, C is set, so R1=(R1 DIV 8) + 1
     		; *8.  So with the subsequent line, we've done R1=(R1+8)ANDNOT7
	ADCEQ   r1, r5, r1, lsr #3
	MOVEQ   r1, r1, lsl #3
      		; No - so just increment our counter by one
	ADDNE   r1, r1, #1
	ADD     r7, r7, #1      ; Pointer independent of character count.  Increment
	B       loop1
d205 2
a206 2
	ADD     r0, r6, r7      ; R0 = Address of first digit
	MOV     r6, #0          ; Version number starts at zero
d208 9
a216 9
	LDRB    r5, [r0], #1    ; Get next character
	TEQ     r5, #'.'     	; Found the terminator?
	BEQ     exit_loop_major ; yes - jump forward
	CMP     r5, #'0'     	; Clear carry if char less than "0"
	CMPCS   r4, r5          ; If C set, clear C if char is greater than "9"
	SUBCS   r5, r5, #'0'	; If C still set, reduce to range 0-9
	ORRCS   r6, r5, r6, lsl #4 ; Insert into version. R6 = (R6 << 4) | R5
	BCS     loop_major
	B       exit_loop_minor
d219 2
a220 3
	MOV     r6, r6, lsl #16 ; Move major version number up to top 16 bits
	MOV     r5, r6
	MOV     r8, #12         ; Shift amount for most significant minor version digit
d222 8
a229 8
	LDRB    r5, [r0] ,#1    ; Get next character
	CMP     r5, #'0'     	; Usual test for digits
	CMPCS   r4, r5
	BCC     exit_loop_minor
	SUB     r5, r5, #'0'
	ORR     r6, r6, r5, lsl r8 ; Put it into the version string
	SUBS    r8, r8, #4      ; Reduce shift factor by one nybble
	BNE     loop_minor
d231 24
a254 23
	[ utility
	; At this point, R6 holds the BCD version number, as returned by OS_Module 20
	; But for our purposes we need this number as version*100.  So we convert it.
	BL      r6_to_decimal
	STR     r6, [r12], #4
	GetArg  r0, variable    ; Did user specify system variable name?
	MOV     r1, r12
	TEQ     r0, #0
	BLEQ    copy_moduleversion      ; No.  So copy the default
	LDRNE   r2, [r0]                ; Yes, so extract the GSTrans'ed string
	MOVNE   r2, r2, lsl #16         ; These two effect "AND r2, r2, #&0000FFFF"
	MOVNE   r2, r2, lsr #16
	ADDNE   r0, r0, #2              ; Skip two byte length field
	LDREQ   r0, output_buffer       ; If not specified, concat the module name
	BLEQ    r0strlen                ; Count it for the rstrcpy
	BL      rstrcpy                 ; "memcpy(R1, R0, R2)"
	MOV     r0, r12                 ; Name buffer
	SUB     r1, r12, #4             ; Size
	MOV     r2, #4                  ; Size of Size
	MOV     r3, #0                  ; Context
	MOV     r4, #1                  ; Numeric variable
	SWI     XOS_SetVarVal
	]
d257 10
a266 11
	[ utility
	LDRVS	lr, output_buffer + quiet
	TEQVS	lr, #0
	LDMFD	sp!, {lr}
	ORRVS	lr, lr, #VFlag
	BICNE	lr, lr, #VFlag
	MOVS	pc, lr
	|
	MOVVC	r0, r6
	LDMFD	sp!, {pc}
	]
d268 1
a268 1
	LTORG
d275 1
a275 1
	MOV	r0, r1
d277 7
a283 7
	LDRB	r2, [r0], #1
	TEQ	r2, #'.'
	TEQNE	r2, #':'
	MOVEQ	r1, r0
	TEQ	r2, #0
	BNE	r1_sd_l1
	MOVS	pc, lr
d286 1
a286 1
	[ utility
d292 4
a295 4
	MOV	r9, r6, lsl #8
	BIC	r9, r9, #&F00
	ORR	r9, r9, #&8000
	MOV	r6, #0
d297 8
a304 8
	AND     r7, r9, #15             ; Get least significant nybble
	EORS    r9, r9, r7              ; Mask out of value being converted
	MOVEQS	pc, lr			; Completed it
	ADD     r6, r6, r6, lsl #2      ; result = result * 5
	ADD     r6, r7, r6, lsl #1      ; result = result * 2 + units (ie. result*10 + units)
	MOV     r9, r9, ror #28         ; Rotate source around for next nybble
	B       r6_t_d_l1
	]
d308 4
a311 4
	MOV     r8, r1
	MVN     r2, #0
	MOV     r1, #0
	MOV     r0, #ModHandReason_EnumerateROM_ModulesWithInfo
d313 4
a316 4
	SWI     XOS_Module
	ADRVS	r0, NotInROMToken
	MOVVS	r4, r8
	BVS     gen_error
d318 12
a329 12
	STMFD   sp!, {r0-r6, r8}
	MVN     r0, #0
	MOV     r1, r3
	MOV     r2, r8
	MOV     r3, #Collate_IgnoreCase
	SWI     XTerritory_Collate
	ADDVS   sp, sp, #32
	BVS     exit
	TEQ     r0, #0
	LDMFD   sp!, {r0-r6, r8}
	BNE     frp_loop
	B       exit_loop_minor
d331 1
a331 1
	[ utility
d333 11
a343 11
	LDR     r0, output_buffer + usingfile  ; Check file flag to see which string we copy
	TEQ     r0, #0
	ADRNE   r0, discstring
	MOVNE   r2, #(enddiscstring - discstring)
	BNE     rstrcpy
	LDR     r0, output_buffer + usingrom   ; Check ROM flag
	TEQ     r0, #0
	ADREQ   r0, modstring           ; Set buffer & Length then fall into rstrcpy
	MOVEQ   r2, #(endmodstring - modstring)
	ADRNE   r0, romstring
	MOVNE   r2, #(endromstring - romstring)
d345 8
a352 8
	LDRB    r3, [r0], #1
	STRB    r3, [r1], #1
	SUBS    r2, r2, #1
	BNE     rstrcpy
	STRB    r2, [r1]
	MOVS    pc, lr
r0strlen                       		; On exit, R2 is "strlen(R0)"
	MOV     r11, r0                 ; Copy of R0 pointer (we're preserving R0)
d354 6
a359 6
	LDRB    r10, [r11], #1          ; Get next byte
	CMP     r10, #1                 ; Comparison clears C if got terminator, else sets C
	BCS     strlenloop              ; Was not terminator - around again
	SBC     r2, r11, r0             ; R11 - R0 - 1, courtesy of the clear C flag
	MOVS    pc, lr
	]
d362 3
a364 3
	DCD	ErrorNumber_NotMod
	DCB	ErrorString_NotMod, 0
	ALIGN
d366 3
a368 3
	DCD	ErrorNumber_RMNotFound
	DCB	ErrorString_RMNotFound, 0
	ALIGN
d370 3
a372 3
	DCD	ErrorNumber_RMNotFoundInROM
	DCB	ErrorString_RMNotFoundInROM, 0
	ALIGN
d374 1
a374 1
	[ utility
d376 1
a376 1
	DCB 	"ModuleVersion$"
d378 1
a378 1
	DCB	0
d380 1
a380 1
	DCB	"SystemVersion$"
d382 1
a382 1
	DCB	0
d384 1
a384 1
	DCB	"ROMVersion$"
d386 3
a388 3
	DCB	0
	ALIGN
	]
d391 39
a429 39
	STMFD   sp!, {r1, r2, lr}
	MOV	r0, #OSFile_ReadWithType
	SWI	XOS_File
	ADDVS	sp, sp, #12
	BVS	exit
	TEQ	r0, #0
	ADREQ	r0, NotFoundToken
	ADDEQ	sp, sp, #12
	MOVEQ	r4, r1
	BEQ	gen_error
	RSB	r6, r6, #&1000
	TEQ	r6, #(&1000 - FileType_Module)
	ADRNE	r0, NotAModToken
	ADDNE	sp, sp, #12
	MOVNE	r4, r1
	BNE	gen_error
	GetFileBuffer r2
	MOV     r0, #OSFind_ReadFile
	SWI     XOS_Find
	BVS     exit_load
	MOVS    r1, r0
	BEQ     exit_load               ; For safety (and RISC OS 2?)
	MOV     r0, #OSGBPB_ReadFromPTR ; Read first &18 bytes of module header
	GetFileBuffer r2
	MOV     r3, #Module_HC_Table
	SWI     XOS_GBPB
	BVS     exit_close
	LDR     r4, [r2, #-4]           ; Help offset - load directly into OS_GBPB 3's R4
	TEQ     r4, #0                  ; Another sanity check
	MOVEQ   r0, #0
	SWIEQ   XOS_Find
	ADDEQ   sp, sp, #12
	BEQ     exit
	MOV     r0, #OSGBPB_ReadFromGiven
	GetFileBuffer r2
	MOV     r3, #filebufferlen
	SWI     XOS_GBPB
	GetFileBuffer r2
	SetArg	r2, usingfile
d431 4
a434 4
	STMFD   sp!, {r0}
	MOV     r0, #0
	SWI     XOS_Find
	LDMFD   sp!, {r0}
d436 3
a438 3
	LDMFD   sp!, {r1, r2, lr}
	BVS     exit
	MOVS    pc, lr
d440 1
a440 1
	[ utility
d442 1
a442 1
	ADR     r0, readargs_match
d444 2
a445 2
	LDMVSFD	sp!, {pc}
	MOV 	pc, lr
d449 2
a450 2
	DCB	"M/A,V/G,F=FILE/S,Q=QUIET/S,R=ROM/S", 0
	ALIGN
d452 1
a452 1
	%	256
d455 1
a455 1
	%	256
d457 1
a457 1
	]
d459 4
a462 4
	STMFD	sp!, {r0}
	SUB	sp, sp, #16
	MOV	r0, sp
	ADR     r1, kernel_messages
d464 15
a478 15
	SWI	XMessageTrans_OpenFile
	ADDVS	sp, sp, #20
	BVS	exit
	LDR	r0, [sp, #16]
	MOV	r2, #0
	MOV	r3, r2
	MOV	r1, sp
	SWI	XMessageTrans_ErrorLookup
	STR	r0, [sp, #16]
	MOV	r0, sp
	SWI	XMessageTrans_CloseFile
	ADD	sp, sp, #16
	LDR	r0, [sp], #4
	SWIVC	XOS_GenerateError
	B	exit
d480 8
a487 8
	DCB	"Resources:$.Resources.Kernel.Messages", 0
	ALIGN
	DCB	"RMVersion 0.02 © Acorn Computers Ltd, 1998", 0
	ALIGN

	[ :LNOT: utility
	AREA	|RMVersion$$Data|, DATA, NOINIT
	EXPORT	_rmversion_data_buffer
d489 2
a490 2
	%	filebufferlen
	]
d492 1
a492 1
	END
@


1.1.1.1
log
@
Initial import of a small library to provide module version extraction
facilities.  A library is exported containing code providing a single
API to extract version numbers from ROM modules, modules in the RMA and
modules stored in files.

A test program can be built and a Utility can be built which exports
version numbers via system variables.

Tagged as RMVersion-0_02.

@
text
@@
