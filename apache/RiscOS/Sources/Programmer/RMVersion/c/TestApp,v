head	1.1;
branch	1.1.1;
access;
symbols
	RMVersion-0_04:1.1.1.1
	RMVersion-0_03:1.1.1.1
	RMVersion-0_02:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	98.12.07.14.38.26;	author sbrodie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.12.07.14.38.26;	author sbrodie;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * TestApp - test for RMVersion application code
 *
 * Copyright (C) Acorn Computers Ltd. 1998
 *
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "rmversion.h"

static const char *leaf(const char *arg)
{
        char *end = strrchr(arg, '.');
        if (end) return end + 1;
        end = strrchr(arg, ':');
        if (end) return end + 1;
        return arg;
}

int main(int argc, char *argv[])
{
        unsigned int version;
        _kernel_oserror *e;
        const char *module = argv[1];

        if (argc < 2) {
                fprintf(stderr, "Syntax: %s <module or filename>\n", leaf(argv[0]));
                exit(EXIT_FAILURE);
        }

        e = rmversion(rmversion_ROM, module, &version);
        printf("ROM %x.%02x %s\n", version>>16, (version&0xFF00) >> 8, e?e->errmess:"");
        e = rmversion(rmversion_RAM, module, &version);
        printf("RAM %x.%02x %s\n", version>>16, (version&0xFF00) >> 8, e?e->errmess:"");
        e = rmversion(rmversion_FILE, module, &version);
        printf("Sys %x.%02x %s\n", version>>16, (version&0xFF00) >> 8, e?e->errmess:"");

	return EXIT_SUCCESS;
}
@


1.1.1.1
log
@
Initial import of a small library to provide module version extraction
facilities.  A library is exported containing code providing a single
API to extract version numbers from ROM modules, modules in the RMA and
modules stored in files.

A test program can be built and a Utility can be built which exports
version numbers via system variables.

Tagged as RMVersion-0_02.

@
text
@@
