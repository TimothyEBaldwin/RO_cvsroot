head	1.3;
access;
symbols
	KeyWatch-0_13:1.3
	KeyWatch-0_12:1.3
	KeyWatch-0_11:1.3
	dellis_autobuild_BaseSW:1.3
	sbrodie_sedwards_16Mar2000:1.3
	KeyWatch-0_10:1.3
	dcotton_autobuild_BaseSW:1.3
	nturton_KeyWatch-0_09:1.3
	KeyWatch-0_09:1.3
	KeyWatch-0_08-1_1_2_10:1.1.2.7
	nicke_KeyWatch-0_0_7:1.1.2.6
	hsimons_BOCA-1_2-Release:1.1.2.6
	KeyWatch-0_07-1_1_2_9:1.1.2.6
	afrost_Boca-1_2-Beta:1.1.2.5
	KeyWatch-0_06-1_1_2_8:1.1.2.5
	KeyWatch-0_05-1_1_2_7:1.1.2.5
	KeyWatch-0_04-1_1_2_6:1.1.2.4
	KeyWatch-0_04-1_1_2_5:1.1.2.4
	KeyWatch-0_03-1_1_2_4:1.1.2.3
	KeyWatch-0_03-1_1_2_3:1.1.2.2
	KeyWatch-0_02-1_1_2_2:1.1.2.1
	Spinner:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	98.10.07.18.46.00;	author smiddle;	state Exp;
branches;
next	1.2;

1.2
date	98.10.07.18.44.03;	author smiddle;	state Exp;
branches;
next	1.1;

1.1
date	98.02.03.15.25.19;	author smiddle;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	98.02.03.15.25.19;	author smiddle;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	98.02.03.18.09.57;	author smiddle;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	98.02.06.17.00.31;	author smiddle;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	98.02.09.11.02.08;	author smiddle;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	98.03.20.14.55.12;	author smiddle;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	98.06.05.13.57.39;	author smiddle;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	98.09.28.16.46.52;	author olove;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update documentation with last change
@
text
@<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
  <head>
    <title>KeyWatch Module Functional Specification</title>
  </head>

  <body BGCOLOR="#ffffff">
    <h1 align=center>KeyWatch Module Functional Specification</h1>

    <p>
    <hr>
    <p align=center><strong>CONFIDENTIAL</strong></p>
    <hr>

    <CENTER>
      <TABLE BORDER=0 WIDTH="40%">
	<TR><TD>Document ref:	<TD>1215,501/FS
	<TR><TD>Project:	<TD>ICA-3
	<TR><TD>Revision:	<TD>$Revision: 1.2 $
	<TR><TD>Date:		<TD>$Date: 1998/10/07 18:44:03 $
	<TR><TD>Author(s):	<TD><A HREF="mailto:smiddleton@@acorn.com">Simon Middleton</a>
	<TR><TD>Change:		<TD>*** LIVE ***
	<TR><TD>Classification:	<TD>Acorn Confidential
      </TABLE>
    </CENTER>

    <!-- ======================================================================= -->

    <hr>
    <h2> Contents </h2>
    <TABLE BORDER=0 WIDTH="100%">
      <TR><TD WIDTH="8%">1.0		<TD><A HREF="#overview">	Overview </A>
      <TR><TD>2.0		<TD><A HREF="#outstanding">	Outstanding issues </A>
      <TR><TD>3.0		<TD><A HREF="#technical">	Technical background </A>
      <TR><TD>4.0		<TD><A HREF="#user">		User interface </A>
      <TR><TD>5.0		<TD><A HREF="#programmer">	Programmer interface </A>
      <TR><TD>6.0		<TD><A HREF="#interchange">     Data interchange </A>
      <TR><TD>7.0             <TD><A HREF="#formats">         Data formats </A>
      <TR><TD>8.0             <TD><A HREF="#external">        External dependencies </A>
      <TR><TD>9.0		<TD><A HREF="#acceptance">	Acceptance test </A>
      <TR><TD>10.0            <TD><A HREF="#noncompliances">  Non compliances </A>
      <TR><TD>11.0		<TD><A HREF="#test">		Development test strategy </A>
      <TR><TD>12.0		<TD><A HREF="#organisation">	Product organisation </A>
      <TR><TD>13.0		<TD><A HREF="#enhancements">	Future enhancements </A>
      <TR><TD>14.0	<TD><A HREF="#glossary">	Glossary </A>
      <TR><TD>15.0	<TD><A HREF="#references">	References </A>
      <TR><TD>16.0	<TD><A HREF="#history">		History </A>
    </TABLE>

    <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="overview"> 1.0 Overview </a> </h2>

    <P>There is a need amongst a number of applications (eg ICA, Java)
      to be able to capture all the users key-presses individually,
      rather than in the transformed form given by the Wimp. This
      module provides access to all these events in formats suitable
      for the applications currently requiring them.

    <P>The goals of this module are 
    <OL>
      <LI>It should be as simple as possible
      <LI>It should sit on top of existing interfaces and not require
	any changes to other modules (eg Wimp, Kernel etc.)
      <LI>It should work on RISC OS 3.1
      <LI>It should not introduce any significant extra problems to
	any future work to upgrade the RISC OS input system.
    </OL>

    <P>To cut down on module proliferation this is an extension of the
    KeyWatch module originally created for the NC100. This module (in
      version 0.01) originally only implemented the first two SWI calls.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="outstanding"> 2.0 Outstanding issues </a> </h2>

    <P>None known.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="technical"> 3.0 Technical background </a> </h2>

    <P>The module accomplishes its task by looking at the events
    generated 
    <OL TYPE="a">
      <LI>when a key is pressed or released 
      <LI>when a key is
	entered into the keyboard input buffer. 
    </OL>

    <P>On KeyV the kernel first calls EventV to pass the key up or
      down event and then processes the key through the international
      keyboard handler and, if necessary, inserts the key into the
      keyboard buffer. After a suitable interval if the key is still
      held down then it inserts the key in the keyboard buffer again.

    <P>All this information is combined to generate a new key event
    stream containing all the extended data required.

    <P>The characters inserted into the keyboard buffer by the
      keyboard driver are removed by the KeyWatch module therefore an
      application using this interface will not receive any keys
      through the usual wimp key event interface.


<!--
      EventV 2, buffer(0), byte
      EventV 11, up/down, key, driverID

      remove byte
      OS_Byte 145, buffer(0) TO ,,byte

      auto-repeat delay
      OS_Byte 11

      auto-repeat rate
      OS_Byte 12
 -->

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="user"> 4.0 User interface </a> </h2>

    <P>There is no user interface.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="programmer"> 5.0 Programmer interface </a> </h2>


    <H3>SWI KeyWatch_Register (+00)</H3>

    <PRE>
IN:
	R0 = flags
		bits 0-31: reserved
OUT:
	R0 = Address of PollWord
    </PRE>

    <P>Register with the module to have a pollword updated.



    <H3>SWI KeyWatch_Unregister (+01)</H3>

    <PRE>
IN:
	R0 = Address of PollWord

OUT:
    </PRE>

    <P>Unregister a previously allocated pollword.



    <H3>SWI KeyWatch_Version (+02)</H3>

    <PRE>
IN:
	R0 = flags
		bits 0-31: reserved
OUT:
	R0 = feature flags
	R1 = major version * 100
	R2 -> minor version string
    </PRE>

    <P>Return version and feature information about the module.



    <H3>SWI KeyWatch_RegisterScan (+03)</H3>

    <PRE>
IN:
	R0 = flags
		bit 0:  1 = store codes as PS/2 scan codes
			0 = store codes as Acorn internal scan codes
		bit 1:  1 = send code as message
			0 = store code in buffer
		bit 2:  1 = include mouse clicks
			0 = ignore mouse clicks
		bit 3:  1 = store key transition events (scan codes)
			0 = ignore transitions
		bit 4:  1 = store buffer events
			0 = ignore buffer events
		bit 5:  1 = remove code from input buffer
			0 = leave code in input buffer
		bits 5-31: reserved
		
	R1 = wimp task handle
OUT:
    </PRE>

    <P>Call this after receiving input focus to change from using
    KeyEvent to NewKeyEvent. Note that there may be characters in the
    input buffer before this is called. These will be delivered to the
    application as normal through the wimp key event. If possible
    these should be processed to avoid losing any key presses.

    <P>Note that even if scan codes are not entered in to the poll
      buffer then scan code processing is still performed which means
      that the shift state is accurate and the scan code is still
      stored with the buffer code.

      <P>If bit 5 is set then OS_Byte,145 is used to remove the key
      code from the buffer. This prevents the key press from also
      appearing via the Wimp key event or similar.


    <H3>SWI KeyWatch_DeregisterScan (+04)</H3>

    <PRE>
IN:
	R0 = flags
		bits 0-31: reserved

	R1 = wimp task handle
OUT:
    </PRE>

    <P>Call this after losing input focus or on window close to allow
      another window to set its mode correctly. 

    <P>If the application requested that key events were buffered then
    there may be keys left in the buffer. Therefore in this case the
    task should read any keys out using KeyWatch_Poll and send them
    back to the wimp using Wimp_ProcessKey so that they are sent on to
    the task receiving the input focus. This must be done before
      calling Deregister.

    <P>Similarly if the application had requested that the keys were
    delivered using messages then it should maintain a flag to say
    whether it currently owns the input focus and should call
    Wimp_ProcessKey for any messages received when it doesn't.


    <H3>SWI KeyWatch_Poll (+05)</H3>

    <PRE>
IN:
	R0 = flags
		bits 0-31: reserved
	R1 = wimp task handle
	R2 = address of buffer or null
	R3 = size of buffer
	R4 = max number of entries to retrieve
OUT:
	R0 = flags out
		bit 0: 1 = an overflow occurred on the internal buffer
		bits 1-31: reserved
	R1 = number of bytes per entry

	if R2 = NULL then 
	  R2 = NULL
	  R3 = size of buffer needed for all entries
	  R4 = number of entries pending
        if R2 <> NULL then 
	  R2 = byte after last buffer byte filled
	  R3 = size left in buffer
	  R4 = number of entries asked for and not retrieved
    </PRE>

    <P>The given buffer is filled with the pending data in the same
      format as the message data shown below. ie currently there are
      three words of data in the order flags, scan code, key code.

    <P>The flags in R1 are sticky and are cleared when some of the
    data is read from the buffer. R2 and R3 are updated with their new
    values after writing out the event structures. R4 contains the
    size of an individual structure (currently 12 bytes).

    <P>If the buffer address is given as null and the size of the
    buffer as zero then no data is written and R3 on exit will have
    been decremented by the size of the data that would have been
    written.

    <H3>SWI KeyWatch_Ignore (+06)</H3>

    <PRE>
IN:
	R0 = flags
		bits 0-31: reserved
OUT:
    </PRE>

    <P>The SWI is allows other modules to instruct the KeyWatch module to ignore the next key that is pressed. This allows modules such as the STB IR handset module to by-pass the KeyWatch module.

    <P>

    <H3>Command <CODE>*KeyWatchForceClose</CODE></H3>

    <P>This command forces keywatch to discard all registrations and
    detach from all event handlers. This means that it can be
    killed. It is only designed to be used if a client application
    crashes so that the module can be killed safely.

      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="interchange">6.0 Data interchange</a> </h2>

    <P>The following message is sent when a key event is generated by
      the module (if the appopriate flag was set on registering).

    <H3>Message_KeyEvent (tbd)</H3>
    <TABLE>
      <COL VALIGN=TOP WIDTH="50"></COL>
      <TR>
	<TD ROWSPAN=1>+0</TD>
	<TD><B>size</B> (36)</TD>
      </TR>

      <TR>
	<TD ROWSPAN=1>+16</TD>
	<TD><B>message code</B> (tbd)</TD>
      </TR>

      <TR>
	<TD ROWSPAN=13>+20</TD>
	<TD><B>flags</B></TD>
      </TR>

      <TR><TD>bit 0: 1 = Scan code is valid, 0 = Scan code is invalid</TD></TR>

      <TR><TD>bit 1: 1 = Key code is valid, 0 = Key code should be
	  ignored</TD></TR>

      <TR><TD>bit 2: 1 = Key going up, 0 = Key going down</TD></TR>

      <TR><TD>bit 3: 1 = this key code was preceded 
	  by a nul character in the 
	  keyboard buffer</TD></TR>

      <TR><TD>bit 4: 1 = this scan code was preceded 
	  by an 0xE0 character in the 
	  keyboard buffer</TD></TR>

      <TR><TD>bits 5-15: reserved</TD></TR>

      <TR><TD>bit 16: 1 = Left Shift is down, 0 = Left Shift is up
      <TR><TD>bit 17: 1 = Right Shift is down, 0 = Right Shift is up
      <TR><TD>bit 18: 1 = Left Ctrl is down, 0 = Left Ctrl is up
      <TR><TD>bit 19: 1 = Right Ctrl is down, 0 = Right Ctrl is up
      <TR><TD>bit 20: 1 = Left Alt is down, 0 = Left Alt is up
      <TR><TD>bit 21: 1 = Right Alt is down, 0 = Right Alt is up

      <TR><TD>bits 22-31: reserved</TD></TR>

      <TR>
	<TD ROWSPAN=2>+24</TD>
	<TD><B>scan code</B></TD>
      </TR>
      <TR>
	<TD>either PS/2 or EventV codes</TD>
      </TR>

      <TR>
	<TD ROWSPAN=2>+28</TD>
	<TD><B>key code</B></TD>
      </TR>
      <TR>
	<TD>As inserted into keyboard buffer</TD>
      </TR>

    </TABLE>

    <P>When a key code is event structure is created the scan code of
      the last key to go down is added to it. This only happens on
      the first key code received after the key goes down. Therefore
      an auto-repeat key can be distringuished by the fact that the
      scan code field is invalid.
   
    <P>Note for PS/2 codes the entire byte sequence is entered into
    the buffer.  The Windows keys currently generate 0x7E (left) and
    0x7F (right) until the correct codes can be ascertained. Up to and
    including version 0.08 of this module the codes generated were
    extended codes (i.e. 0xE0 was generated before each one). From
    0.09 this was changed.

    <P>
      <!-- ======================================================================= --> 

    <hr  noshade>
    <h2> <a name="formats"> 7.0 Data formats </a> </h2>

    <P>No new data formats are defined.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="external"> 8.0 External dependencies </a> </h2>

    <P>None.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="acceptance"> 9.0 Acceptance test </a> </h2>

    <P>The module will work on RISC OS 3.1 upwards.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="noncompliances"> 10.0 Non compliances </a> </h2>

    <P>None.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="test"> 11.0 Development test strategy </a> </h2>

    <P>To be decided.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="organisation"> 12.0 Product organisation </a> </h2>

    <P>A module written in C.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="enhancements"> 13.0 Future enhancements </a> </h2>

    <P>Optionally assemble the bytes of a UTF8 sequence into a UCS4 code.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="glossary"> 14.0 Glossary </a> </h2>

    <P>N/A.

      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="references"> 15.0 References </a> </h2>

    <P>N/A.

      <!-- ======================================================================= -->

    <hr noshade>
    <h2> <a name="history"> 16.0 History </a> </h2>

    <PRE>
$Log: keywatch.html,v $
Revision 1.2  1998/10/07 18:44:03  smiddle
Moved to trunk.
Changed the fake Windows keys from extended to plain in the PS/2
mappings. This stops strange results being seen in the ICAClient.
You must use ICAClient 0.33 or later with it now though.

Version 0.09. Tagged as 'KeyWatch-0_09'

Revision 1.1.2.7  1998/09/28 16:46:52  olove
Added a new SWI KeyWatch_Ignore which will ignore the next key press received by KeyWatch.

Revision 1.1.2.6  1998/06/05 13:57:39  smiddle
Added the Windows Menu key and fake versions of the left and right Windows keys.
Added a flag to say that a byte was preceded by the PS/2 E0 extension byte.

Version 0.07, 1.1.2.9. Tagged as 'KeyWatch-0_07-1_1_2_9'

Revision 1.1.2.5  1998/03/20 14:55:12  smiddle
Added KeyWatchForceClose command to clean up if a client crashes.

Version 0.05, 1.1.2.7. Tagged as 'KeyWatch-0_05-1_1_2_7'

Revision 1.1.2.4  1998/02/09 11:02:08  smiddle
Changed KeyWatch_Poll API to stop allow swallowing of buffer codes even when only using
scan code events.

Version 0.04, 1.1.2.5. Tagged as 'KeyWatch-0_04-1_1_2_5'

Revision 1.1.2.3  1998/02/06 17:00:31  smiddle
Fixed some of the PS/2 codes. Changed mechanism so that the real PS/2 style
code stream is output.

Version 0.03, 1.1.2.4. Tagged as 'KeyWatch-0_03-1_1_2_4'

Revision 1.1.2.2  1998/02/03 18:09:57  smiddle
Rejigged how PS/2 codes are handled and added a few more flags to RegisterScan

Version 0.03, 1.1.2.3. Tagged as 'KeyWatch-0_03-1_1_2_3'

Revision 1.1.2.1  1998/02/03 15:25:19  smiddle
Whole new load of functionality to support getting a stream of scan keys.
See doc/keywatch.html for details.

Version 0.02, 1.1.2.2. Tagged as 'KeyWatch-0_02-1_1_2_2'


    </PRE>

    <hr>
    <P>

    <TABLE BORDER=1 WIDTH="100%">
      <TR>
	<TD WIDTH="50%" VALIGN=TOP>
	  <SMALL>
	    This document is issued under license and must not be copied, reproduced
	    or disclosed in part or whole outside the terms of the license.
	  </SMALL>
	<TD WIDTH="50%" VALIGN=TOP>
	  <SMALL>
	    &#169; Acorn Computers Ltd 1997
	  </SMALL>
    </TABLE>

    <hr>
    <address><a href="mailto:smiddle@@valhalla">Simon Middleton</a></address>
<!-- Created: Thu Jan 15 13:57:56 GMT 1998 -->
<!-- hhmts start -->
Last modified: Wed Oct  7 19:45:24 BST 1998
<!-- hhmts end -->
  </body>
</html>
@


1.2
log
@Moved to trunk.
Changed the fake Windows keys from extended to plain in the PS/2
mappings. This stops strange results being seen in the ICAClient.
You must use ICAClient 0.33 or later with it now though.

Version 0.09. Tagged as 'KeyWatch-0_09'
@
text
@d19 2
a20 2
	<TR><TD>Revision:	<TD>$Revision: 1.1.2.7 $
	<TR><TD>Date:		<TD>$Date: 1998/09/28 16:46:52 $
d387 5
a391 2
    the buffer.  The Windows keys currently generate 0xE0, 0x7E (left)
    and 0xE0, 0x7F (right) until the correct codes can be ascertained.
d471 8
d539 1
a539 1
Last modified: Fri Jun  5 13:57:25 BST 1998
@


1.1
log
@file keywatch.html was initially added on branch Spinner.
@
text
@d1 531
@


1.1.2.1
log
@Whole new load of functionality to support getting a stream of scan keys.
See doc/keywatch.html for details.

Version 0.02, 1.1.2.2. Tagged as 'KeyWatch-0_02-1_1_2_2'
@
text
@a0 450
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
  <head>
    <title>KeyWatch Module Functional Specification</title>
  </head>

  <body BGCOLOR="#ffffff">
    <h1 align=center>KeyWatch Module Functional Specification</h1>

    <p>
    <hr>
    <p align=center><strong>CONFIDENTIAL</strong></p>
    <hr>

    <CENTER>
      <TABLE BORDER=0 WIDTH="40%">
	<TR><TD>Document ref:	<TD>xxxx,xxx
	<TR><TD>Project:	<TD>ICA 3
	<TR><TD>Revision:	<TD>$Revision:  $
	<TR><TD>Date:		<TD>$Date: $
	<TR><TD>Author(s):	<TD><A HREF="mailto:smiddleton@@acorn.com">Simon Middleton</a>
	<TR><TD>Change:		<TD>*** LIVE ***
	<TR><TD>Classification:	<TD>Acorn Confidential
      </TABLE>
    </CENTER>

    <!-- ======================================================================= -->

    <hr>
    <h2> Contents </h2>
    <TABLE BORDER=0 WIDTH="100%">
      <TR><TD WIDTH="8%">1.0		<TD><A HREF="#overview">	Overview </A>
      <TR><TD>2.0		<TD><A HREF="#outstanding">	Outstanding issues </A>
      <TR><TD>3.0		<TD><A HREF="#technical">	Technical background </A>
      <TR><TD>4.0		<TD><A HREF="#user">		User interface </A>
      <TR><TD>5.0		<TD><A HREF="#programmer">	Programmer interface </A>
      <TR><TD>6.0		<TD><A HREF="#interchange">     Data interchange </A>
      <TR><TD>7.0             <TD><A HREF="#formats">         Data formats </A>
      <TR><TD>8.0             <TD><A HREF="#external">        External dependencies </A>
      <TR><TD>9.0		<TD><A HREF="#acceptance">	Acceptance test </A>
      <TR><TD>10.0            <TD><A HREF="#noncompliances">  Non compliances </A>
      <TR><TD>11.0		<TD><A HREF="#test">		Development test strategy </A>
      <TR><TD>12.0		<TD><A HREF="#organisation">	Product organisation </A>
      <TR><TD>13.0		<TD><A HREF="#enhancements">	Future enhancements </A>
      <TR><TD>14.0	<TD><A HREF="#glossary">	Glossary </A>
      <TR><TD>15.0	<TD><A HREF="#references">	References </A>
      <TR><TD>16.0	<TD><A HREF="#history">		History </A>
    </TABLE>

    <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="overview"> 1.0 Overview </a> </h2>

    <P>There is a need amongst a number of applications (eg ICA, Java)
      to be able to capture all the users key-presses individually,
      rather than in the transformed form given by the Wimp. This
      module provides access to all these events in formats suitable
      for the applications currently requiring them.

    <P>The goals of this module are 
    <OL>
      <LI>It should be as simple as possible
      <LI>It should sit on top of existing interfaces and not require
	any changes to other modules (eg Wimp, Kernel etc.)
      <LI>It should work on RISC OS 3.1
      <LI>It should not introduce any significant extra problems to
	any future work to upgrade the RISC OS input system.
    </OL>

    <P>To cut down on module proliferation this is an extension of the
    KeyWatch module originally created for the NC100. This module (in
      version 0.01) originally only implemented the first two SWI calls.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="outstanding"> 2.0 Outstanding issues </a> </h2>

    <P>None known.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="technical"> 3.0 Technical background </a> </h2>

    <P>The module accomplishes its task by looking at the events
    generated 
    <OL TYPE="a">
      <LI>when a key is pressed or released 
      <LI>when a key is
	entered into the keyboard input buffer. 
    </OL>

    <P>On KeyV the kernel first calls EventV to pass the key up or
      down event and then processes the key through the international
      keyboard handler and, if necessary, inserts the key into the
      keyboard buffer. After a suitable interval if the key is still
      held down then it inserts the key in the keyboard buffer again.

    <P>All this information is combined to generate a new key event
    stream containing all the extended data required.

    <P>The characters inserted into the keyboard buffer by the
      keyboard driver are removed by the KeyWatch module therefore an
      application using this interface will not receive any keys
      through the usual wimp key event interface.


<!--
      EventV 2, buffer(0), byte
      EventV 11, up/down, key, driverID

      remove byte
      OS_Byte 145, buffer(0) TO ,,byte

      auto-repeat delay
      OS_Byte 11

      auto-repeat rate
      OS_Byte 12
 -->

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="user"> 4.0 User interface </a> </h2>

    <P>There is no user interface.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="programmer"> 5.0 Programmer interface </a> </h2>


    <H3>SWI KeyWatch_Register (+00)</H3>

    <PRE>
IN:
	R0 = flags
		bits 0-31: reserved
OUT:
	R0 = Address of PollWord
    </PRE>

    <P>Register with the module to have a pollword updated.



    <H3>SWI KeyWatch_Unregister (+00)</H3>

    <PRE>
IN:
	R0 = Address of PollWord

OUT:
    </PRE>

    <P>Unregister a previously allocated pollword.



    <H3>SWI KeyWatch_Version (+00)</H3>

    <PRE>
IN:
	R0 = flags
		bits 0-31: reserved
OUT:
	R0 = feature flags
	R1 = major version * 100
	R2 -> minor version string
    </PRE>

    <P>Return version and feature information about the module.



    <H3>SWI KeyWatch_RegisterScan (+00)</H3>

    <PRE>
IN:
	R0 = flags
		bit 0:  1 = store codes as PS/2 scan codes
			0 = store codes as Acorn internal scan codes
		bit 1:  1 = send code as message
			0 = store code in buffer
		bit 2:  1 = include mouse clicks
			0 = ignore mouse clicks
		bits 2-31: reserved
		
	R1 = wimp task handle
OUT:
    </PRE>

    <P>Call this after receiving input focus to change from using
    KeyEvent to NewKeyEvent. Note that there may be characters in the
    input buffer before this is called. These will be delivered to the
    application as normal through the wimp key event. If possible
    these should be processed to avoid losing any key presses.

      <P>The PS2 scan codes are stored slightly modified as 8 bit
      values as follows.

      <TABLE BORDER=1>
	<TR><TH>Key Range</TH><TH>Description</TH><TH>PS/2 sequence</TH></TR>
	<TR><TD>0x00</TD><TD>Unused</TD><TD>&nbsp;</TD></TR>
	<TR><TD>0x01 to 0x7F</TD><TD>Standard PS/2 code</TD><TD>code</TD></TR>
	<TR><TD>0x80</TD><TD>Unused</TD><TD>&nbsp;</TD></TR>
	<TR><TD>0x81</TD><TD>Print screen key</TD><TD>0xE0 + 0x12 + 0xE0 + 0x7C</TR>
	<TR><TD>0x82</TD><TD>Break key</TD><TD>0x14 + 0x77 + 0xF0 + 0x14 +
	    0xF0 + 0x77</TD></TR>
	<TR><TD>0x83 to 0x8F</TD><TD>Unused</TD><TD>&nbsp;</TD></TR>
	<TR><TD>0x90 to 0xFF</TD><TD>Extended PS/2 code</TD><TD>0xE0 + (code BIC 0x80)</TD></TR>
      </TABLE>

    <H3>SWI KeyWatch_DeregisterScan (+00)</H3>

    <PRE>
IN:
	R0 = flags
		bits 0-31: reserved

	R1 = wimp task handle
OUT:
    </PRE>

    <P>Call this after losing input focus or on window close to allow
      another window to set its mode correctly. 

    <P>If the application requested that key events were buffered then
    there may be keys left in the buffer. Therefore in this case the
    task should read any keys out using KeyWatch_Poll and send them
    back to the wimp using Wimp_ProcessKey so that they are sent on to
    the task receiving the input focus. This must be done before
      calling Deregister.

    <P>Similarly if the application had requested that the keys were
    delivered using messages then it should maintain a flag to say
    whether it currently owns the input focus and should call
    Wimp_ProcessKey for any messages received when it doesn't.


    <H3>SWI KeyWatch_Poll (+00)</H3>

    <PRE>
IN:
	R0 = flags
		bits 0-31: reserved
	R1 = wimp task handle
	R2 = address of buffer
	R3 = size of buffer
OUT:
	R0 = flags out
		bit 0: 1 = an overflow occurred on the internal buffer
		bits 1-31: reserved
	R1 = number of bytes per entry
	R2 = byte after last buffer byte filled
	R3 = size left in buffer
    </PRE>

    <P>The given buffer is filled with the pending data in the same
      format as the message data shown below. ie currently there are
      three words of data in the order flags, scan code, key code.

    <P>

      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="interchange">6.0 Data interchange</a> </h2>

    <P>The following message is sent when a key event is generated by
      the module (if the appopriate flag was set on registering).

    <H3>Message_KeyEvent (tbd)</H3>
    <TABLE>
      <COL VALIGN=TOP WIDTH="50"></COL>
      <TR>
	<TD ROWSPAN=1>+0</TD>
	<TD><B>size</B> (36)</TD>
      </TR>

      <TR>
	<TD ROWSPAN=1>+16</TD>
	<TD><B>message code</B> (tbd)</TD>
      </TR>

      <TR>
	<TD ROWSPAN=13>+20</TD>
	<TD><B>flags</B></TD>
      </TR>

      <TR><TD>bit 0: 1 = Scan code is valid, 0 = Scan code is invalid</TD></TR>

      <TR><TD>bit 1: 1 = Key code is valid, 0 = Key code should be
	  ignored</TD></TR>

      <TR><TD>bit 2: 1 = Key going up, 0 = Key going down</TD></TR>

      <TR><TD>bit 3: 1 = this key code was preceded 
	  by a nul character in the 
	  keyboard buffer</TD></TR>

      <TR><TD>bits 4-15: reserved</TD></TR>

      <TR><TD>bit 16: 1 = Left Shift is down, 0 = Left Shift is up
      <TR><TD>bit 17: 1 = Right Shift is down, 0 = Right Shift is up
      <TR><TD>bit 18: 1 = Left Ctrl is down, 0 = Left Ctrl is up
      <TR><TD>bit 19: 1 = Right Ctrl is down, 0 = Right Ctrl is up
      <TR><TD>bit 20: 1 = Left Alt is down, 0 = Left Alt is up
      <TR><TD>bit 21: 1 = Right Alt is down, 0 = Right Alt is up

      <TR><TD>bits 22-31: reserved</TD></TR>

      <TR>
	<TD ROWSPAN=2>+24</TD>
	<TD><B>scan code</B></TD>
      </TR>
      <TR>
	<TD>either PS/2 or EventV codes</TD>
      </TR>

      <TR>
	<TD ROWSPAN=2>+28</TD>
	<TD><B>key code</B></TD>
      </TR>
      <TR>
	<TD>As inserted into keyboard buffer</TD>
      </TR>

    </TABLE>

    <P>When a key code is event structure is created the scan code of
      the last key to go down is added to it. This only happens on
      the first key code received after the key goes down. Therefore
      an auto-repeat key can be distringuished by the fact that the
      scan code field is invalid.
   

    <P>
      <!-- ======================================================================= --> 

    <hr  noshade>
    <h2> <a name="formats"> 7.0 Data formats </a> </h2>

    <P>No new data formats are defined.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="external"> 8.0 External dependencies </a> </h2>

    <P>None.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="acceptance"> 9.0 Acceptance test </a> </h2>

    <P>The module will work on RISC OS 3.1 upwards.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="noncompliances"> 10.0 Non compliances </a> </h2>

    <P>None.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="test"> 11.0 Development test strategy </a> </h2>

    <P>To be decided.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="organisation"> 12.0 Product organisation </a> </h2>

    <P>A module written in C.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="enhancements"> 13.0 Future enhancements </a> </h2>

    <P>Optionally assemble the bytes of a UTF8 sequence into a UCS4 code.

    <P>
      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="glossary"> 14.0 Glossary </a> </h2>

    <P>N/A.

      <!-- ======================================================================= -->

    <hr  noshade>
    <h2> <a name="references"> 15.0 References </a> </h2>

    <P>N/A.

      <!-- ======================================================================= -->

    <hr noshade>
    <h2> <a name="history"> 16.0 History </a> </h2>

    <PRE>
$Log: $

    </PRE>

    <hr>
    <P>

    <TABLE BORDER=1 WIDTH="100%">
      <TR>
	<TD WIDTH="50%" VALIGN=TOP>
	  <SMALL>
	    This document is issued under license and must not be copied, reproduced
	    or disclosed in part or whole outside the terms of the license.
	  </SMALL>
	<TD WIDTH="50%" VALIGN=TOP>
	  <SMALL>
	    &#169; Acorn Computers Ltd 1997
	  </SMALL>
    </TABLE>

    <hr>
    <address><a href="mailto:smiddle@@valhalla">Simon Middleton</a></address>
<!-- Created: Thu Jan 15 13:57:56 GMT 1998 -->
<!-- hhmts start -->
Last modified: Tue Feb  3 15:01:35 GMT 1998
<!-- hhmts end -->
  </body>
</html>
@


1.1.2.2
log
@Rejigged how PS/2 codes are handled and added a few more flags to RegisterScan

Version 0.03, 1.1.2.3. Tagged as 'KeyWatch-0_03-1_1_2_3'
@
text
@d19 2
a20 2
	<TR><TD>Revision:	<TD>$Revision: 1.1.2.1 $
	<TR><TD>Date:		<TD>$Date: 1998/02/03 15:25:19 $
d195 1
a195 5
		bit 3:  1 = store key transition events (scan codes)
			0 = ignore transitions
		bit 4:  1 = store buffer events
			0 = ignore buffer events
		bits 5-31: reserved
d207 1
a207 1
    <P>The PS2 scan codes are stored slightly modified as 8 bit
a209 2
    <P>If the PS2_MULTI flags is clear then the following applies.

d212 1
a212 1
	<TR><TD>0x00</TD><TD>Unused - never returned</TD><TD>&nbsp;</TD></TR>
d214 3
a216 8
	<TR><TD>0x80 to 0xFF</TD><TD>Extended PS/2 code</TD><TD>0xE0 + (code BIC 0x80)</TD></TR>
      </TABLE>

    <P>If the PS2_MULTI flags is set then the following applies.

      <TABLE BORDER=1>
	<TR><TD>0x01</TD><TD>Print screen key</TD><TD>0xE0 + 0x12 + 0xE0 + 0x7C</TR>
	<TR><TD>0x02</TD><TD>Break key</TD><TD>0x14 + 0x77 + 0xF0 + 0x14 +
d218 2
a221 6
      <P>Note that even if scan codes are not entered in to the poll
      buffer then scan code processing is still performed which means
      that the shift state is accurate and the scan code is still
      stored with the buffer code.


d256 1
a256 1
	R2 = address of buffer or null
d262 1
a262 1
	R1 preserved
a264 1
	R4 = number of bytes per entry
a270 10
    <P>The flags in R1 are sticky and are cleared when somne of the
    data is read from the buffer. R2 and R3 are updated with their new
    values after writing out the event structures. R4 contains the
    size of an individual structure (currently 12 bytes).

    <P>If the buffer address is given as null and the size of the
    buffer as zero then no data is written and R3 on exit will have
    been decremented by the size of the data that would have been
    written.

a309 2
      <TR><TD>bit 4: 1 = this PS/2 key code is actually a multi byte sequence (see table)</TD></TR>

d423 1
a423 7
$Log: keywatch.html,v $
Revision 1.1.2.1  1998/02/03 15:25:19  smiddle
Whole new load of functionality to support getting a stream of scan keys.
See doc/keywatch.html for details.

Version 0.02, 1.1.2.2. Tagged as 'KeyWatch-0_02-1_1_2_2'

d447 1
a447 1
Last modified: Tue Feb  3 16:27:41 GMT 1998
@


1.1.2.3
log
@Fixed some of the PS/2 codes. Changed mechanism so that the real PS/2 style
code stream is output.

Version 0.03, 1.1.2.4. Tagged as 'KeyWatch-0_03-1_1_2_4'
@
text
@d19 2
a20 2
	<TR><TD>Revision:	<TD>$Revision: 1.1.2.2 $
	<TR><TD>Date:		<TD>$Date: 1998/02/03 18:09:57 $
d211 20
d336 2
a372 4
    <P>Note that the scan code stored when a valid key code is stored
    and PS/2 scan codes have been requested is a 1 byte version of the
    code. Bit 7 set means it is an extended code (ie normally preceded
      by byte 0xE0);
a451 5
Revision 1.1.2.2  1998/02/03 18:09:57  smiddle
Rejigged how PS/2 codes are handled and added a few more flags to RegisterScan

Version 0.03, 1.1.2.3. Tagged as 'KeyWatch-0_03-1_1_2_3'

d481 1
a481 1
Last modified: Thu Feb  5 11:02:31 GMT 1998
@


1.1.2.4
log
@Changed KeyWatch_Poll API to stop allow swallowing of buffer codes even when only using
scan code events.

Version 0.04, 1.1.2.5. Tagged as 'KeyWatch-0_04-1_1_2_5'
@
text
@d19 2
a20 2
	<TR><TD>Revision:	<TD>$Revision: 1.1.2.3 $
	<TR><TD>Date:		<TD>$Date: 1998/02/06 17:00:31 $
a198 2
		bit 5:  1 = remove code from input buffer
			0 = leave code in input buffer
d211 1
a211 1
    <P>Note that even if scan codes are not entered in to the poll
a215 4
      <P>If bit 5 is set then OS_Byte,145 is used to remove the key
      code from the buffer. This prevents the key press from also
      appearing via the Wimp key event or similar.

a252 1
	R4 = max number of entries to retrieve
d257 4
a260 10
	R1 = number of bytes per entry

	if R2 = NULL then 
	  R2 = NULL
	  R3 = size of buffer needed for all entries
	  R4 = number of entries pending
        if R2 <> NULL then 
	  R2 = byte after last buffer byte filled
	  R3 = size left in buffer
	  R4 = number of entries asked for and not retrieved
d267 1
a267 1
    <P>The flags in R1 are sticky and are cleared when some of the
a433 6
Revision 1.1.2.3  1998/02/06 17:00:31  smiddle
Fixed some of the PS/2 codes. Changed mechanism so that the real PS/2 style
code stream is output.

Version 0.03, 1.1.2.4. Tagged as 'KeyWatch-0_03-1_1_2_4'

d468 1
a468 1
Last modified: Mon Feb  9 10:39:24 GMT 1998
@


1.1.2.5
log
@Added KeyWatchForceClose command to clean up if a client crashes.

Version 0.05, 1.1.2.7. Tagged as 'KeyWatch-0_05-1_1_2_7'
@
text
@d17 4
a20 4
	<TR><TD>Document ref:	<TD>1215,501/FS
	<TR><TD>Project:	<TD>ICA-3
	<TR><TD>Revision:	<TD>$Revision: 1.1.2.4 $
	<TR><TD>Date:		<TD>$Date: 1998/02/09 11:02:08 $
d155 1
a155 1
    <H3>SWI KeyWatch_Unregister (+01)</H3>
d168 1
a168 1
    <H3>SWI KeyWatch_Version (+02)</H3>
d184 1
a184 1
    <H3>SWI KeyWatch_RegisterScan (+03)</H3>
d223 1
a223 1
    <H3>SWI KeyWatch_DeregisterScan (+04)</H3>
d250 1
a250 1
    <H3>SWI KeyWatch_Poll (+05)</H3>
a291 7
    <H3>Command <CODE>*KeyWatchForceClose</CODE></H3>

    <P>This command forces keywatch to discard all registrations and
    detach from all event handlers. This means that it can be
    killed. It is only designed to be used if a client application
    crashes so that the module can be killed safely.

a446 6
Revision 1.1.2.4  1998/02/09 11:02:08  smiddle
Changed KeyWatch_Poll API to stop allow swallowing of buffer codes even when only using
scan code events.

Version 0.04, 1.1.2.5. Tagged as 'KeyWatch-0_04-1_1_2_5'

d487 1
a487 1
Last modified: Tue Mar 17 16:50:17 GMT 1998
@


1.1.2.6
log
@Added the Windows Menu key and fake versions of the left and right Windows keys.
Added a flag to say that a byte was preceded by the PS/2 E0 extension byte.

Version 0.07, 1.1.2.9. Tagged as 'KeyWatch-0_07-1_1_2_9'
@
text
@d19 2
a20 2
	<TR><TD>Revision:	<TD>$Revision: 1.1.2.5 $
	<TR><TD>Date:		<TD>$Date: 1998/03/20 14:55:12 $
d336 1
a336 5
      <TR><TD>bit 4: 1 = this scan code was preceded 
	  by an 0xE0 character in the 
	  keyboard buffer</TD></TR>

      <TR><TD>bits 5-15: reserved</TD></TR>
d371 4
a374 3
    <P>Note for PS/2 codes the entire byte sequence is entered into
    the buffer.  The Windows keys currently generate 0xE0, 0x7E (left)
    and 0xE0, 0x7F (right) until the correct codes can be ascertained.
a453 5
Revision 1.1.2.5  1998/03/20 14:55:12  smiddle
Added KeyWatchForceClose command to clean up if a client crashes.

Version 0.05, 1.1.2.7. Tagged as 'KeyWatch-0_05-1_1_2_7'

d500 1
a500 1
Last modified: Fri Jun  5 13:57:25 BST 1998
@


1.1.2.7
log
@Added a new SWI KeyWatch_Ignore which will ignore the next key press received by KeyWatch.
@
text
@d19 2
a20 2
	<TR><TD>Revision:	<TD>$Revision: 1.1.2.6 $
	<TR><TD>Date:		<TD>$Date: 1998/06/05 13:57:39 $
a289 11
    <H3>SWI KeyWatch_Ignore (+06)</H3>

    <PRE>
IN:
	R0 = flags
		bits 0-31: reserved
OUT:
    </PRE>

    <P>The SWI is allows other modules to instruct the KeyWatch module to ignore the next key that is pressed. This allows modules such as the STB IR handset module to by-pass the KeyWatch module.

a456 6
Revision 1.1.2.6  1998/06/05 13:57:39  smiddle
Added the Windows Menu key and fake versions of the left and right Windows keys.
Added a flag to say that a byte was preceded by the PS/2 E0 extension byte.

Version 0.07, 1.1.2.9. Tagged as 'KeyWatch-0_07-1_1_2_9'

@
