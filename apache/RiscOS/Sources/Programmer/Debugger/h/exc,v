head	1.2;
access;
symbols
	Debugger-2_02-1:1.2
	Debugger-2_02:1.2
	Debugger-2_01:1.2
	Debugger-2_00:1.1
	Debugger-1_99:1.1
	Debugger-1_98:1.1
	Debugger-1_97:1.1
	Debugger-1_96:1.1
	Debugger-1_95:1.1
	Debugger-1_94:1.1
	Debugger-1_93:1.1
	Debugger-1_92:1.1;
locks; strict;
comment	@# @;


1.2
date	2018.02.21.21.23.40;	author jlee;	state Exp;
branches;
next	1.1;
commitid	pIaztPR1g9daVLrA;

1.1
date	2016.04.05.20.41.26;	author jlee;	state Exp;
branches;
next	;
commitid	xIAY2HYlqbqLLt1z;


desc
@@


1.2
log
@Exception dump fixes & improvements
Detail:
  c/ExceptionDump - Disable unused ExcLooksLikePSR() function. Fix DescribeBlocks() printing the wrong indices for OS_Memory 16 items. Make AnnotateAll() attempt to unwind the ABT/UND stack if the abort came from that mode. Fix some cases where empty lines used for formatting were missing.
  Resources/UK/Messages, Resources/Germany/Messages, s/ExceptionDump, h/exc - Add message tokens X25 & X26 for the ABT & UND stack headers.
Admin:
  Tested on BB-xM
  German messages in need of translation


Version 2.01. Tagged as 'Debugger-2_01'
@
text
@/* Copyright 2016 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef EXC_H
#define EXC_H

#include <stdint.h>
#include <stdbool.h>
#include "dis2.h"

/* To avoid dynamic memory allocation we use a line buffer to collect annotations before they are output
   The buffer acts as a sliding window, storing the annotations for a contiguous range of memory
   The buffer is flushed in a lazy manner; we only emit entries once we need to add an annotation for an address which is outside the current window
   This allows us to go back and add annotations up to LINEBUFFER_SIZE lines in the past (required for e.g. STM decoding) */
#define LINEBUFFER_SIZE 32 /* 16 in an APCS frame plus 10 for a _kernel_swi_regs. But round up to power of 2 for simplicity. N.B. 32 is max due to use of bitflags */
#define LINEBUFFER_COLUMNS 4 /* If we find some overlapping stack frames (e.g. from stale data on the stack) we output them in separate columns */
#define LINEBUFFER_COLWIDTH 40

typedef struct {
	uint32_t val;
	bool ok;
} excresult;

typedef enum {
	/* Messages used in annotations */
	EXC_MSG_NONE = 0,
	EXC_MSG_SWI,
	EXC_MSG_MAYBEPSR,
	EXC_MSG_R14_DESC,
	EXC_MSG_REGNO,
	EXC_MSG_IRQSEMA,
	EXC_MSG_PSR,
	EXC_MSG_ASMCALL,
	EXC_MSG_RETURN_2DESC,
	EXC_MSG_APCS,
	EXC_MSG_CMHG_R0,
	EXC_MSG_CMHG_RN,
	EXC_MSG_CMHG_R9,
	EXC_MSG_RETURN_1DESC,
	EXC_MSG_APCS_BROKEN,

	/* Other messages */
	EXC_MSG_UNKNOWN,
	EXC_MSG_OUT_OF_ANNOT,
	EXC_MSG_DUMP_CORRUPT,
	EXC_MSG_BLOCK_MEM,
	EXC_MSG_BLOCK_OSRSI6,
	EXC_MSG_BLOCK_ERROR,
	EXC_MSG_BLOCK_OSMEM16,
	EXC_MSG_IRQ_STACK,
	EXC_MSG_SVC_STACK,
	EXC_MSG_USR_STACK,
	EXC_MSG_END,
	EXC_MSG_CALLTO,
	EXC_MSG_ABT_STACK,
	EXC_MSG_UND_STACK,
} exc_msg;

/* This represents a single annotation block/column (e.g. decoded stack frame) */
typedef struct exc_annotation_block {
	uint8_t msgs[LINEBUFFER_SIZE]; /* Message type/number to display for the line */
	uint32_t addrs[LINEBUFFER_SIZE][2]; /* Two addresses (or other values, e.g. SWI numbers) to display for the line */
	uint32_t next_fp; /* Next FP value in an APCS stack frame chain - allows all frames within a chain to use the same column */
	uint32_t min,max; /* Min/max address range of current (or last) block */
	uint32_t lineflags; /* Each bit corresponds to a line in the buffer; bit is set if it's the middle of an annotation, clear if it's the start */
} exc_annotation_block_t;

typedef struct exc_context {
	uint32_t lineaddr; /* The address of the first line in the buffer */
	uint8_t line; /* The index of the first line in the buffer (it's a circular buffer) */
	exc_annotation_block_t annotations[LINEBUFFER_COLUMNS];

	const uint32_t *buffer; /* The buffer containing the dump blocks */
	size_t bufferlen;
#ifndef MODULE
	const uint32_t *rom;
	size_t romlen;
#endif

	void (*print)(void *param, const char *str);
	void *print_param;
} exc_context_t;

typedef struct {
	const uint32_t *symbols;
	uint32_t romaddr;
} romsymtable;

extern __value_in_regs excresult ExcPeekMem2(exc_context_t *ctx, uint32_t addr);
extern const char *ExcGetMsg(exc_context_t *ctx, exc_msg msg);
extern void ExcDescribeAddr(exc_context_t *ctx, uint32_t addr, char *buf, size_t len);
extern __value_in_regs romsymtable ExcGetROMSymbols(void);

#endif
@


1.1
log
@Add exception dump generation and processing facilities
Detail:
  This set of changes adds support for the following features:
  * A new code system variable, Debugger$DumpOptions, to control whether exception/crash dumps are collected from SeriousErrorV and where they should be output
  * Dump output can be in raw (binary) or annotated (text) form.
  * Annotated form provides detailed annotation of the stack(s), detecting certain constructs such as SWI invocations, IRQsema frames, CMHG veneers, APCS stack frame chains, and most forms of assembler function calls. The output isn't as easy to understand as a proper stack backtrace would be, but the low-level nature allows it to cope with corrupt or partially-overwritten stack frames, and avoids making invasive changes to components in order to make them backtrace-friendly
  * Stack annotation is able to make use of embedded ROM debug symbols (to be supported by romlinker 0.06) and Norcroft-style embedded function names in order to provide function-level location information for most ROM components and applications
  * System variables Debugger$RawFile and Debugger$AnnotatedFile to specify where to save raw and annotated exception dumps (preliminary, approach may change in future)
  * As well as supporting saving to file, the exception dumps can also be sent to the HAL via HAL_DebugTX, or if a program is driving SeriousErrorV directly it can use SeriousErrorV_CustomReport to have it fed to a custom callback function
  The code is structured in such a way that the core dump annotation code can potentially be built into a standalone application to allow offline processing of dumps (offline application not part of this checkin)
  File changes:
  c/exc, h/exc - Core code for producing the annotated exception dumps
  hdr/ExcDump - Header detailing the format of the binary dump
  s/ExceptionDump - Code variable and SeriousErrorV handling. Several support calls (used by c/exc) are also implemented here, in order to separate the dump processing from any interrogation of the originating machine
  Makefile - Updated for c/exc inclusion, and C header generation from hdr/ExcDump
  Resources/UK/Messages, Resources/Germany/Messages - New messages used by exception dump code
  c/support - Add a strcmp implementation, and extend vsprintf to be vsnprintf. Add support for string width format specifier.
  s/Debugger - Workspace definitions and init/shutdown hooks for exception dump code. Refactor *Where so that the locate logic is separate from the message output logic, to allow the locate logic to be used by the exception dump code.
Admin:
  Tested on Raspberry Pi
  German messages in need of translation


Version 1.92. Tagged as 'Debugger-1_92'
@
text
@d66 2
@

