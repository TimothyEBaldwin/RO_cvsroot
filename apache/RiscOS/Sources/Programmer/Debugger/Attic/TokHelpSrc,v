head	4.2;
access;
symbols
	RO_5_07:4.2
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.2
	RCA:4.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	97.05.09.06.10.52;	author kbracey;	state dead;
branches;
next	4.1;

4.1
date	96.11.05.09.50.03;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.50.03;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.19.25;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.05.24;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.36.49;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Lots of bug fixes and extra warnings. Source code tidied.
Thumb disassembly added.
@
text
@     TTL ==> TokHelpSrc

        SUBT    > <wini>arm.Debugger.HelpSrc

 [ International_Help = 0
BreakClr_Help
         ;=       "*",TokenEscapeChar,Token0
     =  "*",TokenEscapeChar,Token0," removes",TokenEscapeChar,Token2
     =  "breakpoint at",TokenEscapeChar,Token2,"specified address. If"
     =  " no address",TokenEscapeChar,Token41,"given then"
     =  TokenEscapeChar,Token38,"breakpoints are removed.", 13
         ;=       " removes the breakpoint at the specified address."
         ;=       " If no address is given then all breakpoints are removed."
         ;=       13
BreakClr_Syntax
         ;=       "Syntax: *",TokenEscapeChar,Token0
     =  TokenEscapeChar,Token30,"<addr|reg>]",  0
         ;=       " [<addr|reg>]", 0

BreakList_Help
         ;=       "*",TokenEscapeChar,Token0
     =  "*",TokenEscapeChar,Token0," lists all",TokenEscapeChar,Token2
     =  TokenEscapeChar,Token5,"ly set breakpoints.", 13
         ;=       " lists all the currently set breakpoints."
         ;=       13
BreakList_Syntax
         ;=       "Syntax: *",TokenEscapeChar,Token0
     =  TokenEscapeChar,Token1,  0
         ;=       "", 0

BreakSet_Help
         ;=       "*",TokenEscapeChar,Token0
     =  "*",TokenEscapeChar,Token0," sets a breakpoint at"
     =  TokenEscapeChar,Token2,"given address.", 13
         ;=       " sets a breakpoint at the given address."
         ;=       13
BreakSet_Syntax
         ;=       "Syntax: *",TokenEscapeChar,Token0
     =  TokenEscapeChar,Token14,"addr|reg>",  0
         ;=       " <addr|reg>", 0

Continue_Help
         ;=       "*",TokenEscapeChar,Token0
     =  "*",TokenEscapeChar,Token0," restarts execu"
     =  TokenEscapeChar,Token9," from",TokenEscapeChar,Token2,"bre"
     =  "akpoint saved state.", 13
         ;=       " restarts execution from the breakpoint saved state."
         ;=       13
Continue_Syntax
         ;=       "Syntax: *",TokenEscapeChar,Token0
     =  TokenEscapeChar,Token1,  0
         ;=       "", 0

Debug_Help
         ;=       "*",TokenEscapeChar,Token0
     =  "*",TokenEscapeChar,Token0," gives access"
     =  TokenEscapeChar,Token40,"debugging facilities.", 13
         ;=       " gives access to debugging facilities."
         ;=       13
Debug_Syntax
         ;=       "Syntax: *",TokenEscapeChar,Token0
     =  TokenEscapeChar,Token1,  0
         ;=       "", 0

InitStore_Help
         ;=       "*",TokenEscapeChar,Token0
     =  "*",TokenEscapeChar,Token0," fills user memory with"
     =  TokenEscapeChar,Token2,"specified data, or"
     =  TokenEscapeChar,Token2,"value &E6000010 (an illegal ARM inst"
     =  "ruc",TokenEscapeChar,Token9,") if no ",TokenEscapeChar,Token36
     =  TokenEscapeChar,Token41,"given.", 13
         ;=       " fills user memory with the specified data,"
         ;=       " or the value &E6000010 (an illegal ARM instruction) if no"
         ;=       " parameter is given."
         ;=       13
InitStore_Syntax
         ;=       "Syntax: *",TokenEscapeChar,Token0
     =  TokenEscapeChar,Token30,"<data|reg>]",  0
         ;=       " [<data|reg>]", 0

Memory_Help
         ;=       "*",TokenEscapeChar,Token0
     =  "*",TokenEscapeChar,Token0,TokenEscapeChar,Token32
     =  TokenEscapeChar,Token2,"values in",TokenEscapeChar,Token2,"m"
     =  "emory in ARM words.", 13
         ;=       " displays the values in the memory in ARM words."
         ;=       13
Memory_Syntax
         ;=       "Syntax: *",TokenEscapeChar,Token0
     =  TokenEscapeChar,Token30,"B] <addr1|reg1> [[+|-] <addr2|reg2> "
     =  "[+ <addr3|reg3>]]",  0
         ;=       " [B] <addr1|reg1> [[+|-] <addr2|reg2> [+ <addr3|reg3>]]", 0

MemoryA_Help
         ;=       "*",TokenEscapeChar,Token0
     =  "*",TokenEscapeChar,Token0,TokenEscapeChar,Token32
     =  TokenEscapeChar,Token16,"alters",TokenEscapeChar,Token2,"me"
     =  "mory contents in bytes or words.", 13
         ;=       " displays and alters the memory contents in bytes or words."
         ;=       13
MemoryA_Syntax
         ;=       "Syntax: *",TokenEscapeChar,Token0
     =  TokenEscapeChar,Token30,"B] <addr|reg1> [<data|reg2>]",  0
         ;=       " [B] <addr|reg1> [<data|reg2>]", 0

MemoryI_Help
         ;=       "*",TokenEscapeChar,Token0
     =  "*",TokenEscapeChar,Token0," disassembles ARM instruc"
     =  TokenEscapeChar,Token9,"s.", 13
         ;=       " disassembles ARM instructions."
         ;=       13
MemoryI_Syntax
         ;=       "Syntax: *",TokenEscapeChar,Token0
     =  TokenEscapeChar,Token14,"addr1|reg1> [[+|-] <addr2|reg2> [+ <"
     =  "addr3|reg3>]]",  0
         ;=       " <addr1|reg1> [[+|-] <addr2|reg2> [+ <addr3|reg3>]]", 0

ShowRegs_Help
         ;=       "*",TokenEscapeChar,Token0
     =  "*",TokenEscapeChar,Token0,TokenEscapeChar,Token32
     =  TokenEscapeChar,Token2,"stored ARM registers.", 13
         ;=       " displays the stored ARM registers."
         ;=       13
ShowRegs_Syntax
         ;=       "Syntax: *",TokenEscapeChar,Token0
     =  TokenEscapeChar,Token1,  0
         ;=       "", 0
 |
BreakClr_Help           DCB     "HDBGBCL", 0
BreakClr_Syntax         DCB     "SDBGBCL", 0

BreakList_Help          DCB     "HDBGBLS", 0
BreakList_Syntax        DCB     "SDBGBLS", 0

BreakSet_Help           DCB     "HDBGBST", 0
BreakSet_Syntax         DCB     "SDBGBST", 0

Continue_Help           DCB     "HDBGCNT", 0
Continue_Syntax         DCB     "SDBGCNT", 0

Debug_Help              DCB     "HDBGDBG", 0
Debug_Syntax            DCB     "SDBGDBG", 0

InitStore_Help          DCB     "HDBGINS", 0
InitStore_Syntax        DCB     "SDBGINS", 0

Memory_Help             DCB     "HDBGMEM", 0
Memory_Syntax           DCB     "SDBGMEM", 0

MemoryA_Help            DCB     "HDBGMMA", 0
MemoryA_Syntax          DCB     "SDBGMMA", 0

MemoryI_Help            DCB     "HDBGMMI", 0
MemoryI_Syntax          DCB     "SDBGMMI", 0

ShowRegs_Help           DCB     "HDBGSHR", 0
ShowRegs_Syntax         DCB     "SDBGSHR", 0
 ]

        ALIGN

        END
@


4.1
log
@Initial revision
@
text
@@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
