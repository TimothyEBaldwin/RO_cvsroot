head	4.22;
access;
symbols
	Debugger-2_02-1:4.22
	Debugger-2_02:4.22
	Debugger-2_01:4.22
	Debugger-2_00:4.21
	Debugger-1_99:4.21
	Debugger-1_98:4.21
	Debugger-1_97:4.20
	Debugger-1_96:4.19
	Debugger-1_95:4.19
	Debugger-1_94:4.19
	Debugger-1_93:4.18
	Debugger-1_92:4.17
	Debugger-1_91:4.16
	Debugger-1_90:4.16
	Debugger-1_89:4.15
	Debugger-1_88:4.15
	Debugger-1_87:4.14
	Debugger-1_86:4.14
	Debugger-1_85:4.13
	Debugger-1_84:4.12
	Debugger-1_83:4.11
	Debugger-1_82:4.11
	Debugger-1_81:4.11
	Debugger-1_80:4.11
	Debugger-1_79:4.11
	Debugger-1_78:4.11
	RO_5_07:4.10
	Debugger-1_77:4.10
	Debugger-1_76:4.9
	Debugger-1_75:4.8
	Debugger-1_74:4.7
	Debugger-1_73:4.7
	Debugger-1_72:4.7
	Debugger-1_71:4.7
	Debugger-1_70:4.6
	Debugger-1_68:4.6
	Debugger-1_67:4.6
	Debugger-1_66:4.6
	Debugger-1_65:4.6
	Debugger-1_64:4.6
	Debugger-1_63:4.5
	dellis_autobuild_BaseSW:4.5
	Debugger-1_62:4.5
	Debugger-1_61:4.5
	Debugger-1_60:4.5
	sbrodie_sedwards_16Mar2000:4.4
	dcotton_autobuild_BaseSW:4.7
	Debugger-1_59:4.4
	Debugger-1_58:4.4
	dcotton_debugger_MPTBuild_14Apr1999:4.4
	dcotton_debugger_MPTInitialBuild:4.4
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	Ursula_RiscPC:4.3.0.6
	Debugger-1_57:4.4
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	rthornb_UrsulaBuild_01May1998:4.3
	afrost_NC2_Generic:4.1.7.2
	afrost_Funai01-33:4.1.7.2
	Spinner_RCA116:4.1.7.2
	Spinner_B20_2:4.1.7.2
	Spinner_19_3:4.1.7.2
	Spinner_B18:4.1.7.2
	Spinner_B17:4.1.7.2
	Spinner_B15:4.1.7.2
	Spinner_B14:4.1.7.2
	Spinner_B13:4.1.7.2
	Spinner_B12:4.1.7.2
	Spinner_B10:4.1.7.2
	Daytona:4.3.0.4
	Daytona_bp:4.3
	Ursula:4.3.0.2
	Ursula_bp:4.3
	Spinner_B7:4.1.7.2
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.2
	Spin_3Apr97:4.1.7.2
	RCA_bp:4.2
	ARTtmp:4.1.7.2.0.2
	RCA:4.2.0.4
	Spin_merge:4.1.7.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;
expand	@b@;


4.22
date	2018.02.21.21.23.35;	author jlee;	state Exp;
branches;
next	4.21;
commitid	pIaztPR1g9daVLrA;

4.21
date	2016.11.11.22.58.03;	author rsprowson;	state Exp;
branches;
next	4.20;
commitid	qeQW0pSFnTogsLtz;

4.20
date	2016.11.11.22.39.58;	author rsprowson;	state Exp;
branches;
next	4.19;
commitid	WFdnDSqoAtC2mLtz;

4.19
date	2016.06.11.09.51.05;	author rsprowson;	state Exp;
branches;
next	4.18;
commitid	BcfYDtHjQWGb12az;

4.18
date	2016.04.06.21.17.58;	author jlee;	state Exp;
branches;
next	4.17;
commitid	MwS45m4zRB1lWB1z;

4.17
date	2016.04.05.20.41.21;	author jlee;	state Exp;
branches;
next	4.16;
commitid	xIAY2HYlqbqLLt1z;

4.16
date	2015.07.22.07.38.27;	author rsprowson;	state Exp;
branches;
next	4.15;
commitid	1DzdVXPZmoHlJfuy;

4.15
date	2015.01.21.20.57.33;	author jballance;	state Exp;
branches;
next	4.14;
commitid	UodbwDZASlbd0W6y;

4.14
date	2014.02.08.15.46.59;	author jlee;	state Exp;
branches;
next	4.13;
commitid	WRCgbSfWiPsdrjox;

4.13
date	2013.11.28.01.29.15;	author jlee;	state Exp;
branches;
next	4.12;
commitid	STgm4PaoUxPr0Zex;

4.12
date	2013.10.19.16.54.53;	author rsprowson;	state Exp;
branches;
next	4.11;
commitid	OeaVkZCy9wwHpV9x;

4.11
date	2009.05.17.02.51.45;	author bavison;	state Exp;
branches;
next	4.10;

4.10
date	2004.07.30.13.32.33;	author kbracey;	state Exp;
branches;
next	4.9;

4.9
date	2002.12.03.21.28.03;	author bavison;	state Exp;
branches;
next	4.8;

4.8
date	2002.12.03.17.50.13;	author bavison;	state Exp;
branches;
next	4.7;

4.7
date	2001.04.18.12.22.33;	author kbracey;	state Exp;
branches;
next	4.6;

4.6
date	2001.01.31.14.06.09;	author kbracey;	state Exp;
branches;
next	4.5;

4.5
date	2000.05.02.15.58.42;	author kbracey;	state Exp;
branches;
next	4.4;

4.4
date	98.09.21.10.51.31;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	97.05.09.06.10.57;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.01.21.17.44.23;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.50.05;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.50.05;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.03.19.45;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.13.05.29;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.36.53;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.03.11.19.18.25;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.22
log
@Exception dump fixes & improvements
Detail:
  c/ExceptionDump - Disable unused ExcLooksLikePSR() function. Fix DescribeBlocks() printing the wrong indices for OS_Memory 16 items. Make AnnotateAll() attempt to unwind the ABT/UND stack if the abort came from that mode. Fix some cases where empty lines used for formatting were missing.
  Resources/UK/Messages, Resources/Germany/Messages, s/ExceptionDump, h/exc - Add message tokens X25 & X26 for the ABT & UND stack headers.
Admin:
  Tested on BB-xM
  German messages in need of translation


Version 2.01. Tagged as 'Debugger-2_01'
@
text
@M00:Undefined instruction
M01:ARM3 or later
M02:ARMv4 ID
M03:ARMv4 Control
M04:ARMv4 Translation Table Base
M05:ARMv4 Domain Access Control
M06:ARMv4 Fault Status
M07:ARMv4 Fault Address
M51:ARMv4 Cache Operations
M52:ARMv4 TLB Operations
M08:ARMv4 - Bad register
M09:*** Use of NV
M10:*** ! and ^
M11:*** Not R8-R14
M12:*** SWI after CDP
M13:*** Rd=Rm or Rd=R15
M53:*** Shift by R15
M54:*** Not R15
M55:*** PC writeback
M56:*** Byte load/store of PC
M57:*** May store PC+8 or PC+12
M58:*** Unpredictable
M59:*** Rd=Rn
M60:*** Rm=Rn
M61:*** RdLo=RdHi
M62:*** RdLo=Rm
M63:*** RdHi=Rm
M64:*** Rn in list
M66:*** Rd=Rm
M67:*** Only 1 reg on SA-1 rev 2
M49:*** Odd base of pair
M80:*** Deprecated SUBS PC,LR-like instruction
M81:*** Non-standard encoding of PC-relative address offset
M82:*** Unrecognised DMB/DSB/ISB option
M83:*** Deprecated use of SP
M84:*** Deprecated use of both LR & PC in LDM/POP
M85:*** Deprecated use of PC
M86:*** Deprecated instruction
M87:*** Bad VFP/NEON special register
M16:Store initialised to &
M17:Register dump (stored at &
M18:) is:
M19:Mode 
M20: flags set: 
M14:        PSR = 
M22:Address  :
M23:   ASCII Data
M24:Word at &
M25:Byte at &
M26: was &
M27: altered to &
M29:  Enter new value : 
M31:No breakpoints set
M32:Address     Old data
M33: : bad breakpoint; cleared.
M35:Clear all breakpoints? [Y/N]
M36:All breakpoints cleared
M37:Bad breakpoint at &
M38:; cleared.
M39:Continue from breakpoint set at &
M40:Execute out of line? [Y/N] 
M41:Bad breakpoint at &
M42:; cleared.
M43:Debug*
M44:Stopped at break point set at &
M45:Breakpoint not found
M46:Invalid value
M48:No room in breakpoint table
M50:Bad breakpoint
M65:Unpredictable instruction
M75:Half-word at &
M76:Double-word at &
M15:Address &
M21:is at offset &
M28:is unknown RAM
M30:is nowhere in RAM
M96:is system workspace
M34:in ROM
M47:in module
M88:in application memory
M89:in dynamic area
M95:in the Kernel
M97:Valid options are: [-hal raw | annotated | raw,annotated] [-file raw | annotated | raw,annotated] | -none

A00:ARMv5 or later
A01:ARMv5TE or later
A02:ARMv6 or later
A03:ARMv6K or later
A04:ARMv6T2 or later
A05:ARMv7 or later
A06:VFP
A07:VFPv3 or later
A08:VFPv3 half-precision
A09:VFPv4 or later
A10:ASIMD
A11:ASIMD half-precision
A12:ASIMD FP
A13:ASIMDv2 FP
A14:VFP or ASIMD required
A15:ARMv7VE or later
A16:ARMv7MP or later
A17:XScale DSP instruction
A18:ARMv8 or later

F00:infinity
F01:quiet NaN
F02:signalling NaN
F03:     S Exp  J Fraction                       S Exp  J Fraction
F04:System:  
F06:Control:
F05:                        Enabled exceptions:   
F07:                 Cumulative exceptions:

V00:VFP context &
V01:Context flags &
V02:invalid,   
V03:FSTMX format word = 
V04:Round to nearest, 
V05:Round to +inf,    
V06:Round to -inf,    
V07:Round to zero,    
V09:Vector length 
V10: stride 
V11:                 Remaining iterations: 
V12: Flags:
V13:                 Options: 
V14:                 Enabled exceptions:          
V15:                 Cumulative exceptions:       
V16:                 Pending/potential exceptions:

FS00:Old FPE
FS01:FPE 400
FS80:FPPC   
FS81:FPA    
FSxx:unknown

NaN00:signalling NaN operand
NaN01:initial NaN
NaN02:massive overflow
NaN03:massive underflow
NaN04:infinity minus infinity
NaN05:infinity times zero
NaN06:zero times infinity
NaN07:zero divided by zero
NaN08:infinity / infinity
NaN09:RMF of infinity
NaN10:RMF by zero
NaN11:square root of negative
NaN12:FIX of quiet NaN
NaN13:FIX of infinity
NaN14:FIX range
NaN15:CMFE/CNFE of quiet NaN
NaN16:SIN/COS range
NaN17:SIN/COS of infinity
NaN18:TAN range
NaN19:TAN of infinity
NaN20:ASN/ACS range
NaN21:ASN/ACS of infinity
NaN22:POL on two zeros
NaN23:POL on two infinities
NaN24:LGN/LOG of negative
NaN25:bad POW/RPW of negative
NaN26:bad POW/RPW of zero
NaN27:bad POW/RPW on infinity

# N.B. these are all null terminated to allow direct use by C, and several contain newlines
X00:SWI %s 
X01:PSR? 
X02:R14: %08x 
X03:IRQsema link 
X04:PSR 
X05:R14: %08x (ASM call to %08x) 
X06:%08x return to %08x? 
X07:APCS function: %08x 
X08:R0 \ CMHG veneer _kernel_swi_regs? 
X09:R%d | 
X10:R9 / 
X11:Return to %08x? 
X12:Broken APCS chain? 
X13:Unknown 
X14:Out of annotations!
 
X15:Dump corrupt
 
X16:Memory: %08x - %08x
 
X17:OSRSI6: %d = %08x
 
X18:Error block: %08x  
X19:OSMem16: %d = %08x, %08x, %08x
 
X20:IRQ stack:
 
X21:SVC stack:
 
X22:USR stack:
 
X23:End of dump
 
X24:Function call to %08x  
X25:ABT stack:
 
X26:UND stack:
 
@


4.21
log
@Add ARMv8 AArch32 disassembly
Opcodes for CRC32/HLT/SEVL/LDA/STL/LDAEX/STLEX and DMB/DSB options.
Makefile:
  Add ARMv8_AArch32 actions and encodings to dis2.
actions/ARMv7,dis2.h:
  Extend the DMS/DSB decoding to warn about ARMv8 specific ones (previously undefined)
ARM.s/ARMv6.s:
  Slot in decode.
CGlue.s/Debugger.s/Messages
  New token for "ARMv8 or later" warnings.

Tested by brute force all 256M instructions in NV space and 256M conditionals, comparing the output against dis2.
Currently missing the new VFP and SIMD opcodes.

Version 1.98. Tagged as 'Debugger-1_98'
@
text
@d201 4
@


4.20
log
@Add XScale DSP disassembly
Three instructions, MIA/MAR/MRA, 14 years late.

Version 1.97. Tagged as 'Debugger-1_97'
@
text
@d103 1
@


4.19
log
@ARMv6/v7 disassembly accuracy improvements, ARMv7MP ARMv7VE additions
ARMv6.s
  Add missing conditionals on DBG.
  Add ERET (v7VE).
  Add MRS/MSR banked (v7VE), and its funky encoding of the banked register.
  Check bit 22 of SRS/RFE properly, otherwise some undefined instructions get wrongly decoded as SRS/RFE.
CGlue.s
  Use prefix 'A' for arch warnings, so they can be kept together in the messages file.
Debugger.s:
  Around line 990, refactor up front decoding to pick out NV instruction space like the ARM ARM says to do. This makes subsequent decoding much simpler to follow, and removes lots of backdoor checks on bits 28-31 scattered later on in the decode - fixes problem with CPS #mode being wrong when bit 4 set.
  Add HVI (v7MP). Note this is a made up pre-UAL form of HVC (cf. SWI->SVC, SMI->SMC) for now.
  Add PLDW (v7VE).
  Put back flags preservation on Conditions routine, otherwise TestStr preserves flags if no conditions are wanted, but doesn't if they are - was causing some of the Saturates family to be misclassified as undefined.
Test/V6V7tests
  Add samples of each of the extra instructions.
Resources/UK/Messages, Resources/Germany/Messages
  Messages files updated.
Tested with 'testbed' over the 256M EQ condition code, plus 256M NV condition code, with no unexplained mismatches.

Version 1.94. Tagged as 'Debugger-1_94'
@
text
@d102 1
@


4.18
log
@Fix truncated error messages in annotated exception dumps. Fix Debugger$DumpOptions syntax error.
Detail:
  c/exc - The error message was being shoved into a 64 byte buffer, causing truncation. Rather than making the buffer bigger (trying to keep stack usage to a minimum), bypass the buffer and write the message straight to the output. Also add an extra newline at the end of DescribeBlocks so that the output doesn't run directly into the annotated R15/R14 that are output by AnnotateAll.
  Resources/Germany/Messages, Resources/UK/Messages - Update EXC_MSG_ERROR (X18) for the above. Remove Debugger$RawFile and Debugger$AnnotatedFile hint text from Debugger$DumpOptions syntax error message - CopyError wasn't causing the magic newline codes to be translated, and the error buffer (aka StringBuffer) is too small for such a long message anyway.
Admin:
  Tested on Raspberry Pi


Version 1.93. Tagged as 'Debugger-1_93'
@
text
@a39 15
M68:ARMv5 or later
M69:ARMv5TE or later
M70:ARMv6 or later
M71:ARMv6K or later
M72:ARMv6T2 or later
M73:ARMv7 or later
M74:VFP
M77:VFPv3 or later
M78:VFPv3 half-precision
M79:VFPv4 or later
M90:ASIMD
M91:ASIMD half-precision
M92:ASIMD FP
M93:ASIMDv2 FP
M94:VFP or ASIMD required
d85 18
@


4.17
log
@Add exception dump generation and processing facilities
Detail:
  This set of changes adds support for the following features:
  * A new code system variable, Debugger$DumpOptions, to control whether exception/crash dumps are collected from SeriousErrorV and where they should be output
  * Dump output can be in raw (binary) or annotated (text) form.
  * Annotated form provides detailed annotation of the stack(s), detecting certain constructs such as SWI invocations, IRQsema frames, CMHG veneers, APCS stack frame chains, and most forms of assembler function calls. The output isn't as easy to understand as a proper stack backtrace would be, but the low-level nature allows it to cope with corrupt or partially-overwritten stack frames, and avoids making invasive changes to components in order to make them backtrace-friendly
  * Stack annotation is able to make use of embedded ROM debug symbols (to be supported by romlinker 0.06) and Norcroft-style embedded function names in order to provide function-level location information for most ROM components and applications
  * System variables Debugger$RawFile and Debugger$AnnotatedFile to specify where to save raw and annotated exception dumps (preliminary, approach may change in future)
  * As well as supporting saving to file, the exception dumps can also be sent to the HAL via HAL_DebugTX, or if a program is driving SeriousErrorV directly it can use SeriousErrorV_CustomReport to have it fed to a custom callback function
  The code is structured in such a way that the core dump annotation code can potentially be built into a standalone application to allow offline processing of dumps (offline application not part of this checkin)
  File changes:
  c/exc, h/exc - Core code for producing the annotated exception dumps
  hdr/ExcDump - Header detailing the format of the binary dump
  s/ExceptionDump - Code variable and SeriousErrorV handling. Several support calls (used by c/exc) are also implemented here, in order to separate the dump processing from any interrogation of the originating machine
  Makefile - Updated for c/exc inclusion, and C header generation from hdr/ExcDump
  Resources/UK/Messages, Resources/Germany/Messages - New messages used by exception dump code
  c/support - Add a strcmp implementation, and extend vsprintf to be vsnprintf. Add support for string width format specifier.
  s/Debugger - Workspace definitions and init/shutdown hooks for exception dump code. Refactor *Where so that the locate logic is separate from the message output logic, to allow the locate logic to be used by the exception dump code.
Admin:
  Tested on Raspberry Pi
  German messages in need of translation


Version 1.92. Tagged as 'Debugger-1_92'
@
text
@d98 1
a98 1
M97:Valid options are: [-hal raw | annotated | raw,annotated] [-file raw | annotated | raw,annotated] | -none-file options will write to the files specified in the <Debugger$RawFile> and <Debugger$AnnotatedFile> variables.
d184 1
a184 2
X18:Error block: %08x %s
 
@


4.16
log
@Add *Where to debugger's armoury
Largely inspired/ripped off from the DebugTools module, but using OS_DynamicArea 20 for the bulk of area searching. The address to lookup goes through the usual parser for Debugger commands so can be a hex address/register/implied exception PC if no arguments given.
Removed limited lookup from *ShowRegs command; this wasn't especially useful being hardwired to PC since only data aborts have a valid PC, normally the other registers are more interesting.
Fix miscapitalisation of ShowVFPRegs syntax (presumably to avoid it using Token0) by adding a DictTokens directive, since the syntax is used by code in the module which doesn't work with Token0.
Split German messages out into CmdHelp/Messages.

Tested in an IOMD ROM build with various edge cases.

Version 1.90. Tagged as 'Debugger-1_90'
@
text
@d98 1
d160 37
@


4.15
log
@  Added module name and offset to *ShowRegs command
Detail:
  *Showregs now indicated module name and offset if address is
  in a module
Admin:
  (highlight level of testing that has taken place)
  (bugfix number if appropriate)


Version 1.88. Tagged as 'Debugger-1_88'
@
text
@d88 10
a97 3
M95:Not in a module
M96:At offset 
M97: in module 
@


4.14
log
@Add *ShowVFPRegs command
Detail:
  This adds support for the *ShowVFPRegs command, which is basically VFP equivalent of *ShowFPRegs. However unlike *ShowFPRegs it allows for any arbitrary VFP context to be viewed, not just the last context that caused an exception:
  *ShowVFPRegs [E] for showing the exception context
  *ShowVFPRegs A <address> for showing a context at a specific address
  *ShowVFPRegs C for showing the current context
  File changes:
  - HelpSrc, Resources/UK/CmdHelp - Added *ShowVFPRegs help text
  - Resources/Germany/Messages, Resources/UK/Messages - New message tokens for *ShowVFPRegs output
  - s/Debugger - *ShowVFPRegs implementation
  - actions/ARMv7_VFP - VPUSH or VPOP of >16 singleword registers were incorrectly being flagged as unpredictable; it's only the doubleword version which should have that restriction.
Admin:
  Tested on Raspberry Pi
  German messages are in need of translation


Version 1.86. Tagged as 'Debugger-1_86'
@
text
@d88 3
@


4.13
log
@Add a new, machine-generated VFP/NEON disassembler. Fix some ARMv6/v7 disassembly bugs.
Detail:
  This change adds up-to-date VFP & NEON disassembly to the module, by way of a partially machine-generated disassembler written in C.
  It's also possible to build a standalone disassembler utility (dubbed 'dis2') which is 100% C and has support for all ARM instructions (including some obscure stuff the assembler disassembler currently lacks, e.g. XScale DSP instructions). One day this may completely replace the assembler disassembler, but at the moment it's a bit bulky and probably has a few bugs left to squash. The disassembler is also fairly flexible, supporting various output formatting options.

  Main changes:
  - Makefile - Rewritten to switch over to using the CModule makefile fragment instead of AAsmModule, to allow the C code to be included in the component. Also added 'dis2' as an alternative component to build as.
  - Resources/UK/Messages, Resources/Germany/Messages - Updated with new disassembler messages
  - s/Debugger - Add new UseCVFPNEON switch to allow control over whether the module builds with the C VFP/NEON disassembler or the original assembler VFP disassembler
  - s/CGlue - Glue code used with the C disassembler to bridge the gap between the assembler world and the C world
  - actions/* - A set of decgen action files describing what to do for each instruction the new disassembler supports. These are basically just blocks of C code - although they need to match up with the encoding names in Library/Misc/decgen/encodings
  - cache/* - Folder for decgen to cache decision trees in. Building the decision tree for the disassembler is currently a lengthy process, but caching the trees reduces the build time to a fraction of the full time.
  - c/head - Stub C file that decgen prepends to the code it generates
  - c/main - main frontend for the standalone version of the disassembler
  - c/support - Reimplementation of the standard C library functions required for the disassembler. This allows us to avoid a runtime dependency on the shared C library, and also allows us to deal with control-terminated strings from messagetrans where relevant. For convenience this file also has the main entry point that's called from assembler.
  - c/util - Utility code for outputting various forms of instruction, decoding immediate constants, etc.
  - h/dis2 - Header file for the C code
  - Test/c/testbed - Simple C testbed app to allow the output of dis2 to be compared against the Debugger module and decaof
  - !MkDis2,fd7 - Script to allow easy building of the standalone 'dis2' disassembler
  Bugfixes:
  - s/ARMv6 - Change 'ROR#' to 'ROR #' for UXTAB, etc. disassembly. Fix bitfield extract & clear instructions to detect unpredictable/invalid bitfield definitions
  Misc other changes:
  - s/* - Source files updated so s/Debugger contains a list of GETs instead of each source file LNK'ing to the next
Admin:
  Tested in ROM form on BB-xM, and as softload on Iyonix
  German messages are in need of translation
  Requires Library-1_65 and BuildSys-6_34


Version 1.85. Tagged as 'Debugger-1_85'
@
text
@d98 17
@


4.12
log
@Add in disassembly of ARMv6 and ARMv7 instruction sets
The debugger had some embryonic ARMv6 knowhow, switched out due to being incomplete.
Enabling and finishing off ARMv6, then adding ARMv6K, ARMv6T2, ARMv6 security extensions, and ARMv7.
That just leaves
 - ARMv7MP (multiprocessor extensions: PLDW)
 - ARMv7VE (virtualisation extensions: ERET, MRS copro, MSR copro)
 - Advanced SIMD (probably worth thinking about)
 - Thumb2 (questionable why Thumb is supported at all as the tools & OS don't use it)
The syntax follows the pre UAL spirit for the new instructions (cf. ADDCCS versus ADDSCC).
Removed binary V6test binary, replaced with more comprehensive v6/v7 source.
Tested softloaded inspecting the output in StrongEd.

Version 1.84. Tagged as 'Debugger-1_84'
@
text
@d32 8
d46 9
@


4.11
log
@  Changes to make Debugger more useful on ARMv6/v7
Detail:
  * Added knowledge of the ARMv5TEJ / ARMv6 CPSR flags J, GE[3:0], E and A,
    plus Monitor mode
  * *Memory, *Memory H, *MemoryA and *MemoryA H can now access unaligned
    addresses; the header line in unaligned cases adapts depending on whether
    the CPU natively rotates or does unaligned loads
  * Added *Memory D and *MemoryA D for accessing 64-bit words using LDRD / STRD
  * Removed check for 32-bit mode before doing LDRH - this is nonsensial now
    that there are 32-bit builds for IOMD-class machines. I've decided to let
    it attempt LDRH even on platforms where it might not work or might be an
    undefined instruction - this gets us "closer to the metal", and it's not
    like *Memory couldn't already throw exceptions in normal use
  * Removed redundant clauses of a few build options, it was getting
    impractical to maintain the alternate build variants
Admin:
  Tested on rev B7 beagleboard. Requires an updated kernel in order to be
  able to specify 64-bit values on the command line or interactively (but
  even on older kernels you can enter a value less than 2^32 to *MemoryA D)

Version 1.78. Tagged as 'Debugger-1_78'
@
text
@d31 1
d35 3
@


4.10
log
@Modified ASCII display in *Memory etc to read memory using the same access
size as the main output. This helps with some hardware registers that only
support, say, word-sized accesses. Note that the memory locations are still
read a second time for the ASCII display, so it's still not ideal for
read-sensitive hardware.

Added some ARMv6 support to disassembly, but this is incomplete and switched
out at the moment.

Version 1.77. Tagged as 'Debugger-1_77'
@
text
@d39 1
a39 1
M14:               PSR = 
d66 1
@


4.9
log
@  A new feature and a bugfix.
Detail:
  * Added 'H' flag to *Memory and *MemoryA to allow half-word memory accesses.
    On 26-bit machines, this is emulated using 32-bit reads and read-modify-
    writes; on 32-bit machines, LDRH and STRH are used. Address header in
    *Memory byte mode changed to be only one digit per byte for consistency
    with word and half-word modes. *MemoryA H in interactive mode gives a
    Thumb disassembly.
  * STM Rn!,{reg_list_including_Rn} is actually allowed, provided Rn is the
    lowest register in the list. Warning code adjusted accordingly.
Admin:
  Tested on Risc PC and Tungsten.

Version 1.76. Tagged as 'Debugger-1_76'
@
text
@d33 1
@


4.8
log
@  Merged in Kevin's latest version, as featured in OS release 5.00.
Detail:
  * Added Q bit to *ShowRegs
  * Added FMSRR, FMRRS, FMDRR and FMRRD to VFP support
  * Shortened lots of VFP literals by treating common "F" prefix separately
  * Cirrus DSP support (switched out)
  * Piccolo support (not even linked in)
  * ARM/Thumb disassembly test programs added
  * Bugfix: code variable init code was trashing the flags that indicated
    whether zero page branch table (used for breakpoints in 32-bit mode) needs
    creating
Admin:
  Builds identical binary to 5.00 release, repository changes were build-
  related only.

Version 1.75. Tagged as 'Debugger-1_75'
@
text
@d64 1
@


4.7
log
@Fixed and tidied *ShowFPRegs. In particular, will work with 26-bit
FPEmulators.

Version 1.71. Tagged as 'Debugger-1_71'
@
text
@d38 1
a38 1
M14:                PSR = 
@


4.6
log
@* Added ARMv5TE instructions.
* Fixed disassembly of Thumb high MOV/ADD/CMP instructions.

Version 1.64. Tagged as 'Debugger-1_64'
@
text
@d71 2
a72 2
F05:                       Enabled exceptions:   
F07:                Cumulative exceptions:
@


4.5
log
@* 32-bit compatibility added.
* New *ShowFPRegs command.
* Added ARMv5 instructions (BLX, CLZ, BKPT, CDP2 et al)
* Handling of instruction extension space adjusted as per ARMv4.
* Fixed some Thumb instructions.
* Added "info" form of LDC and STC.
* NV condition code is now undefined, except for the new instructions using
  it.

Version 1.60. Tagged as 'Debugger-1_60'
@
text
@d32 1
@


4.4
log
@Ursula and Spinner branches merged.
Makefile changed to use LocalRes$Path.
Changed to use srccommit.

Version 1.57. Tagged as 'Debugger-1_57'
@
text
@d31 1
d37 1
d63 44
@


4.3
log
@Lots of bug fixes and extra warnings. Source code tidied.
Thumb disassembly added.
@
text
@a60 32

#{DictTokens}
#{Token0=BreakClr}
HDBGBCL:*BreakClr removes the breakpoint at the specified address. If no address is given then all breakpoints are removed. 
SDBGBCL:Syntax: *BreakClr [<addr|reg>] 
#{Token0=BreakList}
HDBGBLS:*BreakList lists all the currently set breakpoints. 
SDBGBLS:Syntax: *BreakList 
#{Token0=BreakSet}
HDBGBST:*BreakSet sets a breakpoint at the given address. 
SDBGBST:Syntax: *BreakSet <addr|reg> 
#{Token0=Continue}
HDBGCNT:*Continue restarts execution from the breakpoint saved state. 
SDBGCNT:Syntax: *Continue 
#{Token0=Debug}
HDBGDBG:*Debug gives access to debugging facilities. 
SDBGDBG:Syntax: *Debug 
#{Token0=InitStore}
HDBGINS:*InitStore fills user memory with the specified data, or the value &E6000010 (an illegal ARM instruction) if no parameter is given. 
SDBGINS:Syntax: *InitStore [<data|reg>] 
#{Token0=Memory}
HDBGMEM:*Memory displays the values in the memory in ARM words. 
SDBGMEM:Syntax: *Memory [B] <addr1|reg1> [[+|-] <addr2|reg2> [+ <addr3|reg3>]] 
#{Token0=MemoryA}
HDBGMMA:*MemoryA displays and alters the memory contents in bytes or words. 
SDBGMMA:Syntax: *MemoryA [B] <addr|reg1> [<data|reg2>] 
#{Token0=MemoryI}
HDBGMMI:*MemoryI disassembles ARM or Thumb instructions. 
SDBGMMI:Syntax: *MemoryI [T] <addr1|reg1> [[+|-] <addr2|reg2> [+ <addr3|reg3>]] 
#{Token0=ShowRegs}
HDBGSHR:*ShowRegs displays the stored ARM registers. 
SDBGSHR:Syntax: *ShowRegs 
@


4.2
log
@Version RO_3_70 taken
@
text
@d17 14
a30 2
M14:Syntax: *MemoryI <addr1|reg1> [[+|-] <addr2|reg2> [+ <addr3|reg3>]]
M15:Syntax: *InitStore [<data|reg>]
a35 1
M21:Syntax: *Memory [B] <addr1|reg1> [[+|-] <addr2|reg2> [+ <addr3|reg3>]]
a41 1
M28:Syntax: *MemoryA [B] <addr|reg1> [<data|reg2>]
a42 1
M30:Syntax: *BreakSet <addr|reg>
a45 1
M34:Syntax: *BreakClr [<addr|reg>]
d60 1
d88 2
a89 2
HDBGMMI:*MemoryI disassembles ARM instructions. 
SDBGMMI:Syntax: *MemoryI <addr1|reg1> [[+|-] <addr2|reg2> [+ <addr3|reg3>]] 
@


4.1
log
@Initial revision
@
text
@d3 9
a11 7
M02:ARM3 ID
M03:ARM3 Flush
M04:ARM3 Control
M05:ARM3 Cacheable
M06:ARM3 Updateable
M07:ARM3 Disruptive
M08:ARM3 - Bad reg
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Command line messages removed
@
text
@d50 32
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@d3 7
a9 9
M02:ARMv4 ID
M03:ARMv4 Control
M04:ARMv4 Translation Table Base
M05:ARMv4 Domain Access Control
M06:ARMv4 Fault Status
M07:ARMv4 Fault Address
M51:ARMv4 Cache Operations
M52:ARMv4 TLB Operations
M08:ARMv4 - Bad register
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
