head	4.49;
access;
symbols
	Debugger-2_02-1:4.49
	Debugger-2_02:4.49
	Debugger-2_01:4.48
	Debugger-2_00:4.47
	Debugger-1_99:4.46
	Debugger-1_98:4.45
	Debugger-1_97:4.44
	Debugger-1_96:4.43
	Debugger-1_95:4.42
	Debugger-1_94:4.41
	Debugger-1_93:4.40
	Debugger-1_92:4.39
	Debugger-1_91:4.38
	Debugger-1_90:4.37
	Debugger-1_89:4.36
	Debugger-1_88:4.35
	Debugger-1_87:4.34
	Debugger-1_86:4.33
	Debugger-1_85:4.32
	Debugger-1_84:4.31
	Debugger-1_83:4.30
	Debugger-1_82:4.29
	Debugger-1_81:4.28
	Debugger-1_80:4.27
	Debugger-1_79:4.26
	Debugger-1_78:4.24
	RO_5_07:4.23
	Debugger-1_77:4.23
	Debugger-1_76:4.22
	Debugger-1_75:4.21
	Debugger-1_74:4.20
	Debugger-1_73:4.19
	Debugger-1_72:4.17
	Debugger-1_71:4.16
	Debugger-1_70:4.15
	Debugger-1_68:4.13
	Debugger-1_67:4.12
	Debugger-1_66:4.11
	Debugger-1_65:4.10
	Debugger-1_64:4.9
	Debugger-1_63:4.8
	dellis_autobuild_BaseSW:4.7
	Debugger-1_62:4.7
	Debugger-1_61:4.6
	Debugger-1_60:4.5
	sbrodie_sedwards_16Mar2000:4.4
	dcotton_autobuild_BaseSW:4.20
	Debugger-1_59:4.4
	Debugger-1_58:4.3
	dcotton_debugger_MPTBuild_14Apr1999:4.2
	dcotton_debugger_MPTInitialBuild:4.2
	Debugger-1_57:4.2;
locks; strict;
comment	@# @;


4.49
date	2018.02.25.19.12.59;	author jlee;	state Exp;
branches;
next	4.48;
commitid	PliTQiXFRyup4hsA;

4.48
date	2018.02.21.21.23.30;	author jlee;	state Exp;
branches;
next	4.47;
commitid	pIaztPR1g9daVLrA;

4.47
date	2017.08.15.19.22.23;	author rsprowson;	state Exp;
branches;
next	4.46;
commitid	h1UikBohUqHfml3A;

4.46
date	2017.01.24.21.50.26;	author rsprowson;	state Exp;
branches;
next	4.45;
commitid	tEVxvSZYlibCHgDz;

4.45
date	2016.11.11.22.58.01;	author rsprowson;	state Exp;
branches;
next	4.44;
commitid	qeQW0pSFnTogsLtz;

4.44
date	2016.11.11.22.39.52;	author rsprowson;	state Exp;
branches;
next	4.43;
commitid	WFdnDSqoAtC2mLtz;

4.43
date	2016.07.24.17.50.40;	author rsprowson;	state Exp;
branches;
next	4.42;
commitid	APuSN35dqad3iBfz;

4.42
date	2016.07.24.10.56.41;	author rsprowson;	state Exp;
branches;
next	4.41;
commitid	l1PQigueRnt10zfz;

4.41
date	2016.06.11.09.51.00;	author rsprowson;	state Exp;
branches;
next	4.40;
commitid	BcfYDtHjQWGb12az;

4.40
date	2016.04.06.21.17.50;	author jlee;	state Exp;
branches;
next	4.39;
commitid	MwS45m4zRB1lWB1z;

4.39
date	2016.04.05.20.41.13;	author jlee;	state Exp;
branches;
next	4.38;
commitid	xIAY2HYlqbqLLt1z;

4.38
date	2016.03.03.22.53.28;	author jlee;	state Exp;
branches;
next	4.37;
commitid	INpEZPjPEKPTyfXy;

4.37
date	2015.07.22.07.38.20;	author rsprowson;	state Exp;
branches;
next	4.36;
commitid	1DzdVXPZmoHlJfuy;

4.36
date	2015.02.08.22.28.30;	author jlee;	state Exp;
branches;
next	4.35;
commitid	59Rp9M42xWNzVf9y;

4.35
date	2015.01.21.20.57.27;	author jballance;	state Exp;
branches;
next	4.34;
commitid	UodbwDZASlbd0W6y;

4.34
date	2014.10.24.12.39.46;	author rsprowson;	state Exp;
branches;
next	4.33;
commitid	91DMgFBApLOQ6sVx;

4.33
date	2014.02.08.15.46.54;	author jlee;	state Exp;
branches;
next	4.32;
commitid	WRCgbSfWiPsdrjox;

4.32
date	2013.11.28.01.29.10;	author jlee;	state Exp;
branches;
next	4.31;
commitid	STgm4PaoUxPr0Zex;

4.31
date	2013.10.19.16.54.46;	author rsprowson;	state Exp;
branches;
next	4.30;
commitid	OeaVkZCy9wwHpV9x;

4.30
date	2011.09.24.15.00.46;	author jlee;	state Exp;
branches;
next	4.29;
commitid	UAzTXKfyHcwc5LAv;

4.29
date	2011.08.04.22.18.28;	author jlee;	state Exp;
branches;
next	4.28;
commitid	VlFUy51myBu19fuv;

4.28
date	2010.03.22.01.09.46;	author jlee;	state Exp;
branches;
next	4.27;

4.27
date	2010.01.30.18.53.09;	author jlee;	state Exp;
branches;
next	4.26;

4.26
date	2009.06.26.00.57.31;	author bavison;	state Exp;
branches;
next	4.25;

4.25
date	2009.06.16.00.00.27;	author bavison;	state Exp;
branches;
next	4.24;

4.24
date	2009.05.17.02.51.41;	author bavison;	state Exp;
branches;
next	4.23;

4.23
date	2004.07.30.13.32.31;	author kbracey;	state Exp;
branches;
next	4.22;

4.22
date	2002.12.03.21.28.02;	author bavison;	state Exp;
branches;
next	4.21;

4.21
date	2002.12.03.17.50.12;	author bavison;	state Exp;
branches;
next	4.20;

4.20
date	2001.06.01.08.52.22;	author dcotton;	state Exp;
branches;
next	4.19;

4.19
date	2001.05.10.16.47.20;	author kbracey;	state Exp;
branches;
next	4.18;

4.18
date	2001.05.01.14.14.01;	author mstephen;	state Exp;
branches;
next	4.17;

4.17
date	2001.04.30.10.53.56;	author srevill;	state Exp;
branches;
next	4.16;

4.16
date	2001.04.18.12.22.32;	author kbracey;	state Exp;
branches;
next	4.15;

4.15
date	2001.03.21.15.52.55;	author srevill;	state Exp;
branches;
next	4.14;

4.14
date	2001.03.21.15.43.53;	author srevill;	state Exp;
branches;
next	4.13;

4.13
date	2001.03.21.14.04.30;	author srevill;	state Exp;
branches;
next	4.12;

4.12
date	2001.02.15.14.37.40;	author kbracey;	state Exp;
branches;
next	4.11;

4.11
date	2001.02.14.10.41.28;	author srevill;	state Exp;
branches;
next	4.10;

4.10
date	2001.02.08.14.48.50;	author kbracey;	state Exp;
branches;
next	4.9;

4.9
date	2001.01.31.14.06.08;	author kbracey;	state Exp;
branches;
next	4.8;

4.8
date	2001.01.30.23.24.26;	author srevill;	state Exp;
branches;
next	4.7;

4.7
date	2000.09.08.14.12.34;	author kbracey;	state Exp;
branches;
next	4.6;

4.6
date	2000.07.11.09.20.51;	author kbracey;	state Exp;
branches;
next	4.5;

4.5
date	2000.05.02.15.58.40;	author kbracey;	state Exp;
branches;
next	4.4;

4.4
date	99.04.20.08.08.27;	author dcotton;	state Exp;
branches;
next	4.3;

4.3
date	99.04.19.15.10.28;	author dcotton;	state Exp;
branches;
next	4.2;

4.2
date	98.09.21.10.51.25;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	98.09.21.10.31.21;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.49
log
@VFP/NEON disassembly improvements
Detail:
  actions/ARMv8FP_AArch32, Makefile - Add disasembly for the ARMv8 VFP/NEON instructions
  actions/ARMv7_ASIMD, actions/ARMv7_VFP - Fix incorrect disassembly of VCLS, VMOVN, VRSUBHN, VFNMA, VFNMS
  c/util - Add disassembly for MVFR2 register
  s/ARM - Tweak coprocessor instruction decoding logic; ARMv8 uses some of the CDP2 instructions for VFP/NEON
  cache/vfp - Updated decgen cache file
  Test/c/testbed - Improve fopen/system error checking. Add some more rules to deal with (expected) differences between Debugger/dis2 and decaof.
Admin:
  Tested on Raspberry Pi 3
  Disassembly for new instructions (+ some nearby values) checked against BASIC 1.74 + decaof 5.18
  Requires Library-1_92


Version 2.02. Tagged as 'Debugger-2_02'
@
text
@/* (2.02)
 *
 * This file is automatically maintained by srccommit, do not edit manually.
 * Last processed by srccommit version: 1.1.
 *
 */
#define Module_MajorVersion_CMHG        2.02
#define Module_MinorVersion_CMHG        
#define Module_Date_CMHG                25 Feb 2018

#define Module_MajorVersion             "2.02"
#define Module_Version                  202
#define Module_MinorVersion             ""
#define Module_Date                     "25 Feb 2018"

#define Module_ApplicationDate          "25-Feb-18"

#define Module_ComponentName            "Debugger"
#define Module_ComponentPath            "castle/RiscOS/Sources/Programmer/Debugger"

#define Module_FullVersion              "2.02"
#define Module_HelpVersion              "2.02 (25 Feb 2018)"
#define Module_LibraryVersionInfo       "2:2"
@


4.48
log
@Exception dump fixes & improvements
Detail:
  c/ExceptionDump - Disable unused ExcLooksLikePSR() function. Fix DescribeBlocks() printing the wrong indices for OS_Memory 16 items. Make AnnotateAll() attempt to unwind the ABT/UND stack if the abort came from that mode. Fix some cases where empty lines used for formatting were missing.
  Resources/UK/Messages, Resources/Germany/Messages, s/ExceptionDump, h/exc - Add message tokens X25 & X26 for the ABT & UND stack headers.
Admin:
  Tested on BB-xM
  German messages in need of translation


Version 2.01. Tagged as 'Debugger-2_01'
@
text
@d1 1
a1 1
/* (2.01)
d7 1
a7 1
#define Module_MajorVersion_CMHG        2.01
d9 1
a9 1
#define Module_Date_CMHG                21 Feb 2018
d11 2
a12 2
#define Module_MajorVersion             "2.01"
#define Module_Version                  201
d14 1
a14 1
#define Module_Date                     "21 Feb 2018"
d16 1
a16 1
#define Module_ApplicationDate          "21-Feb-18"
d21 3
a23 3
#define Module_FullVersion              "2.01"
#define Module_HelpVersion              "2.01 (21 Feb 2018)"
#define Module_LibraryVersionInfo       "2:1"
@


4.47
log
@When there's no VFP don't offer ShowVFPRegs
It just gives a bad SWI error since VFPSupport is missing. In practice this is IOMD and Tungsten platforms, at least in the absence of a VFPEmulator.

Version 2.00. Tagged as 'Debugger-2_00'
@
text
@d1 1
a1 1
/* (2.00)
d7 1
a7 1
#define Module_MajorVersion_CMHG        2.00
d9 1
a9 1
#define Module_Date_CMHG                15 Aug 2017
d11 2
a12 2
#define Module_MajorVersion             "2.00"
#define Module_Version                  200
d14 1
a14 1
#define Module_Date                     "15 Aug 2017"
d16 1
a16 1
#define Module_ApplicationDate          "15-Aug-17"
d21 3
a23 3
#define Module_FullVersion              "2.00"
#define Module_HelpVersion              "2.00 (15 Aug 2017)"
#define Module_LibraryVersionInfo       "2:0"
@


4.46
log
@Remove unnecessary made up opcode
We don't need to invent a pre-UAL variant of HVC, since BASIC accepts HVC with or without the #.
Replace made up HVI with HVC.

Version 1.99. Tagged as 'Debugger-1_99'
@
text
@d1 1
a1 1
/* (1.99)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.99
d9 1
a9 1
#define Module_Date_CMHG                24 Jan 2017
d11 2
a12 2
#define Module_MajorVersion             "1.99"
#define Module_Version                  199
d14 1
a14 1
#define Module_Date                     "24 Jan 2017"
d16 1
a16 1
#define Module_ApplicationDate          "24-Jan-17"
d21 3
a23 3
#define Module_FullVersion              "1.99"
#define Module_HelpVersion              "1.99 (24 Jan 2017)"
#define Module_LibraryVersionInfo       "1:99"
@


4.45
log
@Add ARMv8 AArch32 disassembly
Opcodes for CRC32/HLT/SEVL/LDA/STL/LDAEX/STLEX and DMB/DSB options.
Makefile:
  Add ARMv8_AArch32 actions and encodings to dis2.
actions/ARMv7,dis2.h:
  Extend the DMS/DSB decoding to warn about ARMv8 specific ones (previously undefined)
ARM.s/ARMv6.s:
  Slot in decode.
CGlue.s/Debugger.s/Messages
  New token for "ARMv8 or later" warnings.

Tested by brute force all 256M instructions in NV space and 256M conditionals, comparing the output against dis2.
Currently missing the new VFP and SIMD opcodes.

Version 1.98. Tagged as 'Debugger-1_98'
@
text
@d1 1
a1 1
/* (1.98)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.98
d9 1
a9 1
#define Module_Date_CMHG                11 Nov 2016
d11 2
a12 2
#define Module_MajorVersion             "1.98"
#define Module_Version                  198
d14 1
a14 1
#define Module_Date                     "11 Nov 2016"
d16 1
a16 1
#define Module_ApplicationDate          "11-Nov-16"
d21 3
a23 3
#define Module_FullVersion              "1.98"
#define Module_HelpVersion              "1.98 (11 Nov 2016)"
#define Module_LibraryVersionInfo       "1:98"
@


4.44
log
@Add XScale DSP disassembly
Three instructions, MIA/MAR/MRA, 14 years late.

Version 1.97. Tagged as 'Debugger-1_97'
@
text
@d1 1
a1 1
/* (1.97)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.97
d11 2
a12 2
#define Module_MajorVersion             "1.97"
#define Module_Version                  197
d21 3
a23 3
#define Module_FullVersion              "1.97"
#define Module_HelpVersion              "1.97 (11 Nov 2016)"
#define Module_LibraryVersionInfo       "1:97"
@


4.43
log
@Express wacky shifts as the ARMARM says we should
Reinstate the check that an immediate value that doesn't use the preferred encoding is disassembled to #value,ror such that reassembling it would give you back the original op code.
Tested with a handful of values, plus inspected all duplicates possible in Excel.

Version 1.96. Tagged as 'Debugger-1_96'
@
text
@d1 1
a1 1
/* (1.96)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.96
d9 1
a9 1
#define Module_Date_CMHG                24 Jul 2016
d11 2
a12 2
#define Module_MajorVersion             "1.96"
#define Module_Version                  196
d14 1
a14 1
#define Module_Date                     "24 Jul 2016"
d16 1
a16 1
#define Module_ApplicationDate          "24-Jul-16"
d21 3
a23 3
#define Module_FullVersion              "1.96"
#define Module_HelpVersion              "1.96 (24 Jul 2016)"
#define Module_LibraryVersionInfo       "1:96"
@


4.42
log
@Build fix
Module_Title->Module_TitleStr from Kernel-5_54.

Version 1.95. Tagged as 'Debugger-1_95'
@
text
@d1 1
a1 1
/* (1.95)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.95
d11 2
a12 2
#define Module_MajorVersion             "1.95"
#define Module_Version                  195
d21 3
a23 3
#define Module_FullVersion              "1.95"
#define Module_HelpVersion              "1.95 (24 Jul 2016)"
#define Module_LibraryVersionInfo       "1:95"
@


4.41
log
@ARMv6/v7 disassembly accuracy improvements, ARMv7MP ARMv7VE additions
ARMv6.s
  Add missing conditionals on DBG.
  Add ERET (v7VE).
  Add MRS/MSR banked (v7VE), and its funky encoding of the banked register.
  Check bit 22 of SRS/RFE properly, otherwise some undefined instructions get wrongly decoded as SRS/RFE.
CGlue.s
  Use prefix 'A' for arch warnings, so they can be kept together in the messages file.
Debugger.s:
  Around line 990, refactor up front decoding to pick out NV instruction space like the ARM ARM says to do. This makes subsequent decoding much simpler to follow, and removes lots of backdoor checks on bits 28-31 scattered later on in the decode - fixes problem with CPS #mode being wrong when bit 4 set.
  Add HVI (v7MP). Note this is a made up pre-UAL form of HVC (cf. SWI->SVC, SMI->SMC) for now.
  Add PLDW (v7VE).
  Put back flags preservation on Conditions routine, otherwise TestStr preserves flags if no conditions are wanted, but doesn't if they are - was causing some of the Saturates family to be misclassified as undefined.
Test/V6V7tests
  Add samples of each of the extra instructions.
Resources/UK/Messages, Resources/Germany/Messages
  Messages files updated.
Tested with 'testbed' over the 256M EQ condition code, plus 256M NV condition code, with no unexplained mismatches.

Version 1.94. Tagged as 'Debugger-1_94'
@
text
@d1 1
a1 1
/* (1.94)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.94
d9 1
a9 1
#define Module_Date_CMHG                11 Jun 2016
d11 2
a12 2
#define Module_MajorVersion             "1.94"
#define Module_Version                  194
d14 1
a14 1
#define Module_Date                     "11 Jun 2016"
d16 1
a16 1
#define Module_ApplicationDate          "11-Jun-16"
d21 3
a23 3
#define Module_FullVersion              "1.94"
#define Module_HelpVersion              "1.94 (11 Jun 2016)"
#define Module_LibraryVersionInfo       "1:94"
@


4.40
log
@Fix truncated error messages in annotated exception dumps. Fix Debugger$DumpOptions syntax error.
Detail:
  c/exc - The error message was being shoved into a 64 byte buffer, causing truncation. Rather than making the buffer bigger (trying to keep stack usage to a minimum), bypass the buffer and write the message straight to the output. Also add an extra newline at the end of DescribeBlocks so that the output doesn't run directly into the annotated R15/R14 that are output by AnnotateAll.
  Resources/Germany/Messages, Resources/UK/Messages - Update EXC_MSG_ERROR (X18) for the above. Remove Debugger$RawFile and Debugger$AnnotatedFile hint text from Debugger$DumpOptions syntax error message - CopyError wasn't causing the magic newline codes to be translated, and the error buffer (aka StringBuffer) is too small for such a long message anyway.
Admin:
  Tested on Raspberry Pi


Version 1.93. Tagged as 'Debugger-1_93'
@
text
@d1 1
a1 1
/* (1.93)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.93
d9 1
a9 1
#define Module_Date_CMHG                06 Apr 2016
d11 2
a12 2
#define Module_MajorVersion             "1.93"
#define Module_Version                  193
d14 1
a14 1
#define Module_Date                     "06 Apr 2016"
d16 1
a16 1
#define Module_ApplicationDate          "06-Apr-16"
d21 3
a23 3
#define Module_FullVersion              "1.93"
#define Module_HelpVersion              "1.93 (06 Apr 2016)"
#define Module_LibraryVersionInfo       "1:93"
@


4.39
log
@Add exception dump generation and processing facilities
Detail:
  This set of changes adds support for the following features:
  * A new code system variable, Debugger$DumpOptions, to control whether exception/crash dumps are collected from SeriousErrorV and where they should be output
  * Dump output can be in raw (binary) or annotated (text) form.
  * Annotated form provides detailed annotation of the stack(s), detecting certain constructs such as SWI invocations, IRQsema frames, CMHG veneers, APCS stack frame chains, and most forms of assembler function calls. The output isn't as easy to understand as a proper stack backtrace would be, but the low-level nature allows it to cope with corrupt or partially-overwritten stack frames, and avoids making invasive changes to components in order to make them backtrace-friendly
  * Stack annotation is able to make use of embedded ROM debug symbols (to be supported by romlinker 0.06) and Norcroft-style embedded function names in order to provide function-level location information for most ROM components and applications
  * System variables Debugger$RawFile and Debugger$AnnotatedFile to specify where to save raw and annotated exception dumps (preliminary, approach may change in future)
  * As well as supporting saving to file, the exception dumps can also be sent to the HAL via HAL_DebugTX, or if a program is driving SeriousErrorV directly it can use SeriousErrorV_CustomReport to have it fed to a custom callback function
  The code is structured in such a way that the core dump annotation code can potentially be built into a standalone application to allow offline processing of dumps (offline application not part of this checkin)
  File changes:
  c/exc, h/exc - Core code for producing the annotated exception dumps
  hdr/ExcDump - Header detailing the format of the binary dump
  s/ExceptionDump - Code variable and SeriousErrorV handling. Several support calls (used by c/exc) are also implemented here, in order to separate the dump processing from any interrogation of the originating machine
  Makefile - Updated for c/exc inclusion, and C header generation from hdr/ExcDump
  Resources/UK/Messages, Resources/Germany/Messages - New messages used by exception dump code
  c/support - Add a strcmp implementation, and extend vsprintf to be vsnprintf. Add support for string width format specifier.
  s/Debugger - Workspace definitions and init/shutdown hooks for exception dump code. Refactor *Where so that the locate logic is separate from the message output logic, to allow the locate logic to be used by the exception dump code.
Admin:
  Tested on Raspberry Pi
  German messages in need of translation


Version 1.92. Tagged as 'Debugger-1_92'
@
text
@d1 1
a1 1
/* (1.92)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.92
d9 1
a9 1
#define Module_Date_CMHG                05 Apr 2016
d11 2
a12 2
#define Module_MajorVersion             "1.92"
#define Module_Version                  192
d14 1
a14 1
#define Module_Date                     "05 Apr 2016"
d16 1
a16 1
#define Module_ApplicationDate          "05-Apr-16"
d21 3
a23 3
#define Module_FullVersion              "1.92"
#define Module_HelpVersion              "1.92 (05 Apr 2016)"
#define Module_LibraryVersionInfo       "1:92"
@


4.38
log
@Fix typo in VSRI disassembly
Detail:
  actions/ARMv7_ASIMD - The instruction is VSRI, but the disassembly was stating VRSI. Fix.
Admin:
  Untested
  Issue reported by Fred Graute:
  https://www.riscosopen.org/forum/forums/4/topics/3956


Version 1.91. Tagged as 'Debugger-1_91'
@
text
@d1 1
a1 1
/* (1.91)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.91
d9 1
a9 1
#define Module_Date_CMHG                03 Mar 2016
d11 2
a12 2
#define Module_MajorVersion             "1.91"
#define Module_Version                  191
d14 1
a14 1
#define Module_Date                     "03 Mar 2016"
d16 1
a16 1
#define Module_ApplicationDate          "03-Mar-16"
d21 3
a23 3
#define Module_FullVersion              "1.91"
#define Module_HelpVersion              "1.91 (03 Mar 2016)"
#define Module_LibraryVersionInfo       "1:91"
@


4.37
log
@Add *Where to debugger's armoury
Largely inspired/ripped off from the DebugTools module, but using OS_DynamicArea 20 for the bulk of area searching. The address to lookup goes through the usual parser for Debugger commands so can be a hex address/register/implied exception PC if no arguments given.
Removed limited lookup from *ShowRegs command; this wasn't especially useful being hardwired to PC since only data aborts have a valid PC, normally the other registers are more interesting.
Fix miscapitalisation of ShowVFPRegs syntax (presumably to avoid it using Token0) by adding a DictTokens directive, since the syntax is used by code in the module which doesn't work with Token0.
Split German messages out into CmdHelp/Messages.

Tested in an IOMD ROM build with various edge cases.

Version 1.90. Tagged as 'Debugger-1_90'
@
text
@d1 1
a1 1
/* (1.90)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.90
d9 1
a9 1
#define Module_Date_CMHG                22 Jul 2015
d11 2
a12 2
#define Module_MajorVersion             "1.90"
#define Module_Version                  190
d14 1
a14 1
#define Module_Date                     "22 Jul 2015"
d16 1
a16 1
#define Module_ApplicationDate          "22-Jul-15"
d21 3
a23 3
#define Module_FullVersion              "1.90"
#define Module_HelpVersion              "1.90 (22 Jul 2015)"
#define Module_LibraryVersionInfo       "1:90"
@


4.36
log
@Fix annotation of FPSCR LEN & STRIDE fields
Detail:
  s/Debugger - Fix some broken logic in *ShowVFPRegs that was causing the FPSCR vector length fields to be reported incorrectly if vector stride was enabled
Admin:
  Tested on Raspberry Pi


Version 1.89. Tagged as 'Debugger-1_89'
@
text
@d1 1
a1 1
/* (1.89)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.89
d9 1
a9 1
#define Module_Date_CMHG                08 Feb 2015
d11 2
a12 2
#define Module_MajorVersion             "1.89"
#define Module_Version                  189
d14 1
a14 1
#define Module_Date                     "08 Feb 2015"
d16 1
a16 1
#define Module_ApplicationDate          "08-Feb-15"
d21 3
a23 3
#define Module_FullVersion              "1.89"
#define Module_HelpVersion              "1.89 (08 Feb 2015)"
#define Module_LibraryVersionInfo       "1:89"
@


4.35
log
@  Added module name and offset to *ShowRegs command
Detail:
  *Showregs now indicated module name and offset if address is
  in a module
Admin:
  (highlight level of testing that has taken place)
  (bugfix number if appropriate)


Version 1.88. Tagged as 'Debugger-1_88'
@
text
@d1 1
a1 1
/* (1.88)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.88
d9 1
a9 1
#define Module_Date_CMHG                21 Jan 2015
d11 2
a12 2
#define Module_MajorVersion             "1.88"
#define Module_Version                  188
d14 1
a14 1
#define Module_Date                     "21 Jan 2015"
d16 1
a16 1
#define Module_ApplicationDate          "21-Jan-15"
d21 3
a23 3
#define Module_FullVersion              "1.88"
#define Module_HelpVersion              "1.88 (21 Jan 2015)"
#define Module_LibraryVersionInfo       "1:88"
@


4.34
log
@Build fix
Update for BuildSys-6_60. No need to force things in ModuleLibs to blank now.

Version 1.87. Tagged as 'Debugger-1_87'
@
text
@d1 1
a1 1
/* (1.87)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.87
d9 1
a9 1
#define Module_Date_CMHG                24 Oct 2014
d11 2
a12 2
#define Module_MajorVersion             "1.87"
#define Module_Version                  187
d14 1
a14 1
#define Module_Date                     "24 Oct 2014"
d16 1
a16 1
#define Module_ApplicationDate          "24-Oct-14"
d21 3
a23 3
#define Module_FullVersion              "1.87"
#define Module_HelpVersion              "1.87 (24 Oct 2014)"
#define Module_LibraryVersionInfo       "1:87"
@


4.33
log
@Add *ShowVFPRegs command
Detail:
  This adds support for the *ShowVFPRegs command, which is basically VFP equivalent of *ShowFPRegs. However unlike *ShowFPRegs it allows for any arbitrary VFP context to be viewed, not just the last context that caused an exception:
  *ShowVFPRegs [E] for showing the exception context
  *ShowVFPRegs A <address> for showing a context at a specific address
  *ShowVFPRegs C for showing the current context
  File changes:
  - HelpSrc, Resources/UK/CmdHelp - Added *ShowVFPRegs help text
  - Resources/Germany/Messages, Resources/UK/Messages - New message tokens for *ShowVFPRegs output
  - s/Debugger - *ShowVFPRegs implementation
  - actions/ARMv7_VFP - VPUSH or VPOP of >16 singleword registers were incorrectly being flagged as unpredictable; it's only the doubleword version which should have that restriction.
Admin:
  Tested on Raspberry Pi
  German messages are in need of translation


Version 1.86. Tagged as 'Debugger-1_86'
@
text
@d1 1
a1 1
/* (1.86)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.86
d9 1
a9 1
#define Module_Date_CMHG                08 Feb 2014
d11 2
a12 2
#define Module_MajorVersion             "1.86"
#define Module_Version                  186
d14 1
a14 1
#define Module_Date                     "08 Feb 2014"
d16 1
a16 1
#define Module_ApplicationDate          "08-Feb-14"
d21 3
a23 3
#define Module_FullVersion              "1.86"
#define Module_HelpVersion              "1.86 (08 Feb 2014)"
#define Module_LibraryVersionInfo       "1:86"
@


4.32
log
@Add a new, machine-generated VFP/NEON disassembler. Fix some ARMv6/v7 disassembly bugs.
Detail:
  This change adds up-to-date VFP & NEON disassembly to the module, by way of a partially machine-generated disassembler written in C.
  It's also possible to build a standalone disassembler utility (dubbed 'dis2') which is 100% C and has support for all ARM instructions (including some obscure stuff the assembler disassembler currently lacks, e.g. XScale DSP instructions). One day this may completely replace the assembler disassembler, but at the moment it's a bit bulky and probably has a few bugs left to squash. The disassembler is also fairly flexible, supporting various output formatting options.

  Main changes:
  - Makefile - Rewritten to switch over to using the CModule makefile fragment instead of AAsmModule, to allow the C code to be included in the component. Also added 'dis2' as an alternative component to build as.
  - Resources/UK/Messages, Resources/Germany/Messages - Updated with new disassembler messages
  - s/Debugger - Add new UseCVFPNEON switch to allow control over whether the module builds with the C VFP/NEON disassembler or the original assembler VFP disassembler
  - s/CGlue - Glue code used with the C disassembler to bridge the gap between the assembler world and the C world
  - actions/* - A set of decgen action files describing what to do for each instruction the new disassembler supports. These are basically just blocks of C code - although they need to match up with the encoding names in Library/Misc/decgen/encodings
  - cache/* - Folder for decgen to cache decision trees in. Building the decision tree for the disassembler is currently a lengthy process, but caching the trees reduces the build time to a fraction of the full time.
  - c/head - Stub C file that decgen prepends to the code it generates
  - c/main - main frontend for the standalone version of the disassembler
  - c/support - Reimplementation of the standard C library functions required for the disassembler. This allows us to avoid a runtime dependency on the shared C library, and also allows us to deal with control-terminated strings from messagetrans where relevant. For convenience this file also has the main entry point that's called from assembler.
  - c/util - Utility code for outputting various forms of instruction, decoding immediate constants, etc.
  - h/dis2 - Header file for the C code
  - Test/c/testbed - Simple C testbed app to allow the output of dis2 to be compared against the Debugger module and decaof
  - !MkDis2,fd7 - Script to allow easy building of the standalone 'dis2' disassembler
  Bugfixes:
  - s/ARMv6 - Change 'ROR#' to 'ROR #' for UXTAB, etc. disassembly. Fix bitfield extract & clear instructions to detect unpredictable/invalid bitfield definitions
  Misc other changes:
  - s/* - Source files updated so s/Debugger contains a list of GETs instead of each source file LNK'ing to the next
Admin:
  Tested in ROM form on BB-xM, and as softload on Iyonix
  German messages are in need of translation
  Requires Library-1_65 and BuildSys-6_34


Version 1.85. Tagged as 'Debugger-1_85'
@
text
@d1 1
a1 1
/* (1.85)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.85
d9 1
a9 1
#define Module_Date_CMHG                28 Nov 2013
d11 2
a12 2
#define Module_MajorVersion             "1.85"
#define Module_Version                  185
d14 1
a14 1
#define Module_Date                     "28 Nov 2013"
d16 1
a16 1
#define Module_ApplicationDate          "28-Nov-13"
d21 3
a23 3
#define Module_FullVersion              "1.85"
#define Module_HelpVersion              "1.85 (28 Nov 2013)"
#define Module_LibraryVersionInfo       "1:85"
@


4.31
log
@Add in disassembly of ARMv6 and ARMv7 instruction sets
The debugger had some embryonic ARMv6 knowhow, switched out due to being incomplete.
Enabling and finishing off ARMv6, then adding ARMv6K, ARMv6T2, ARMv6 security extensions, and ARMv7.
That just leaves
 - ARMv7MP (multiprocessor extensions: PLDW)
 - ARMv7VE (virtualisation extensions: ERET, MRS copro, MSR copro)
 - Advanced SIMD (probably worth thinking about)
 - Thumb2 (questionable why Thumb is supported at all as the tools & OS don't use it)
The syntax follows the pre UAL spirit for the new instructions (cf. ADDCCS versus ADDSCC).
Removed binary V6test binary, replaced with more comprehensive v6/v7 source.
Tested softloaded inspecting the output in StrongEd.

Version 1.84. Tagged as 'Debugger-1_84'
@
text
@d1 1
a1 1
/* (1.84)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.84
d9 1
a9 1
#define Module_Date_CMHG                19 Oct 2013
d11 2
a12 2
#define Module_MajorVersion             "1.84"
#define Module_Version                  184
d14 1
a14 1
#define Module_Date                     "19 Oct 2013"
d16 1
a16 1
#define Module_ApplicationDate          "19-Oct-13"
d21 3
a23 3
#define Module_FullVersion              "1.84"
#define Module_HelpVersion              "1.84 (19 Oct 2013)"
#define Module_LibraryVersionInfo       "1:84"
@


4.30
log
@Fix objasm 4 warnings. Fix breakclr <addr> when addr is >=64M
Detail:
  s/Debugger - Tweaked a few LDM/STM instructions to fix some objasm 4 warnings. Disabled some 26bit code in 32bit configs to avoid more warnings. Fix BreakClr to work on 32bit systems if the breakpoint address is >=64M.
Admin:
  Tested on rev A2 BB-xM


Version 1.83. Tagged as 'Debugger-1_83'
@
text
@d1 1
a1 1
/* (1.83)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.83
d9 1
a9 1
#define Module_Date_CMHG                24 Sep 2011
d11 2
a12 2
#define Module_MajorVersion             "1.83"
#define Module_Version                  183
d14 1
a14 1
#define Module_Date                     "24 Sep 2011"
d16 1
a16 1
#define Module_ApplicationDate          "24-Sep-11"
d21 3
a23 3
#define Module_FullVersion              "1.83"
#define Module_HelpVersion              "1.83 (24 Sep 2011)"
#define Module_LibraryVersionInfo       "1:83"
@


4.29
log
@Update to work with zero page relocation
Detail:
  s/Debugger - Try reading DebuggerSpace location using OS_ReadSysInfo 6 before falling back on legacy address. Compute appropriate MOV PC,DebuggerSpace instruction instead of using hard-coded one.
Admin:
  Tested on rev A2 BB-xM


Version 1.82. Tagged as 'Debugger-1_82'
@
text
@d1 1
a1 1
/* (1.82)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.82
d9 1
a9 1
#define Module_Date_CMHG                04 Aug 2011
d11 2
a12 2
#define Module_MajorVersion             "1.82"
#define Module_Version                  182
d14 1
a14 1
#define Module_Date                     "04 Aug 2011"
d16 1
a16 1
#define Module_ApplicationDate          "04-Aug-11"
d21 3
a23 3
#define Module_FullVersion              "1.82"
#define Module_HelpVersion              "1.82 (04 Aug 2011)"
#define Module_LibraryVersionInfo       "1:82"
@


4.28
log
@Rework *memoryi implementation to avoid alignment faults during Thumb disassembly on ARMv6+
Detail:
  s/Debugger - Reworked MemoryI_Code:
  * Avoid alignment faults when disassembling Thumb instructions by using LDRH or LDR-and-shift depending on compile-time architecture
  * Split ARM & Thumb disassembly into two seperate paths to (perhaps) increase readability
  * Cleaned up the code so it only reads each memory location once
Admin:
  Tested on rev C2 beagleboard.
  Current thumb disassembler looks like it could do with a bit of an overhaul when full support for the 32bit encodings is added.
  *memoryi code could also be made a bit nicer if we don't mind thumb disassembly failing if attempted on a CPU that can't (reliably) LDRH.


Version 1.81. Tagged as 'Debugger-1_81'
@
text
@d1 1
a1 1
/* (1.81)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.81
d9 1
a9 1
#define Module_Date_CMHG                22 Mar 2010
d11 2
a12 2
#define Module_MajorVersion             "1.81"
#define Module_Version                  181
d14 1
a14 1
#define Module_Date                     "22 Mar 2010"
d16 1
a16 1
#define Module_ApplicationDate          "22-Mar-10"
d21 3
a23 3
#define Module_FullVersion              "1.81"
#define Module_HelpVersion              "1.81 (22 Mar 2010)"
#define Module_LibraryVersionInfo       "1:81"
@


4.27
log
@Fix code to be fully aware of 64bit parameter flags, fix accidental alignment exceptions on ARMv6/v7
Detail:
  s/Debugger - All code which calls ReadOneParm, ReadParm, etc. now correctly sets r10 to the correct value depending on whether they want to parse 64bit numbers or not. This was the cause of *InitStore malfunctioning and (presumably) trashing whatever R11 pointed to (bug #232)
  Also fixed MemoryHeader causing an unintentional alignment exception when testing if rotated or unaligned loads are in use. The CP15 registers are now interrogated instead.
Admin:
  Tested on rev C2 beagleoard. *Memory with unaligned addresses no longer aborts, and *InitStore <val> now uses the correct value, and seems to no longer trash memory
  Fixes bug #232


Version 1.80. Tagged as 'Debugger-1_80'
@
text
@d1 1
a1 1
/* (1.80)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.80
d9 1
a9 1
#define Module_Date_CMHG                30 Jan 2010
d11 2
a12 2
#define Module_MajorVersion             "1.80"
#define Module_Version                  180
d14 1
a14 1
#define Module_Date                     "30 Jan 2010"
d16 1
a16 1
#define Module_ApplicationDate          "30-Jan-10"
d21 3
a23 3
#define Module_FullVersion              "1.80"
#define Module_HelpVersion              "1.80 (30 Jan 2010)"
#define Module_LibraryVersionInfo       "1:80"
@


4.26
log
@  Now has a standalone build variant
Detail:
  Debugger now handles registering and deregistering its messages file with
  ResourceFS when you build a RAM (standalone) variant. This obsoletes the
  DbgMess module.
Admin:
  Tested briefly

Version 1.79. Tagged as 'Debugger-1_79'
@
text
@d1 1
a1 1
/* (1.79)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.79
d9 1
a9 1
#define Module_Date_CMHG                26 Jun 2009
d11 2
a12 2
#define Module_MajorVersion             "1.79"
#define Module_Version                  179
d14 1
a14 1
#define Module_Date                     "26 Jun 2009"
d16 1
a16 1
#define Module_ApplicationDate          "26-Jun-09"
d21 3
a23 3
#define Module_FullVersion              "1.79"
#define Module_HelpVersion              "1.79 (26 Jun 2009)"
#define Module_LibraryVersionInfo       "1:79"
@


4.25
log
@  Build change
Detail:
  CPU version is no longer specified in the makefile - it's better to inherit
  it from the build environment now that we actually set it appropriately.
Admin:
  Built but not tested. Binary should be unchanged - this only affects the
  warnings generated during assembly.

Version 1.78. Not tagged
@
text
@d1 1
a1 1
/* (1.78)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.78
d9 1
a9 1
#define Module_Date_CMHG                16 Jun 2009
d11 2
a12 2
#define Module_MajorVersion             "1.78"
#define Module_Version                  178
d14 1
a14 1
#define Module_Date                     "16 Jun 2009"
d16 1
a16 1
#define Module_ApplicationDate          "16-Jun-09"
d21 3
a23 3
#define Module_FullVersion              "1.78"
#define Module_HelpVersion              "1.78 (16 Jun 2009)"
#define Module_LibraryVersionInfo       "1:78"
@


4.24
log
@  Changes to make Debugger more useful on ARMv6/v7
Detail:
  * Added knowledge of the ARMv5TEJ / ARMv6 CPSR flags J, GE[3:0], E and A,
    plus Monitor mode
  * *Memory, *Memory H, *MemoryA and *MemoryA H can now access unaligned
    addresses; the header line in unaligned cases adapts depending on whether
    the CPU natively rotates or does unaligned loads
  * Added *Memory D and *MemoryA D for accessing 64-bit words using LDRD / STRD
  * Removed check for 32-bit mode before doing LDRH - this is nonsensial now
    that there are 32-bit builds for IOMD-class machines. I've decided to let
    it attempt LDRH even on platforms where it might not work or might be an
    undefined instruction - this gets us "closer to the metal", and it's not
    like *Memory couldn't already throw exceptions in normal use
  * Removed redundant clauses of a few build options, it was getting
    impractical to maintain the alternate build variants
Admin:
  Tested on rev B7 beagleboard. Requires an updated kernel in order to be
  able to specify 64-bit values on the command line or interactively (but
  even on older kernels you can enter a value less than 2^32 to *MemoryA D)

Version 1.78. Tagged as 'Debugger-1_78'
@
text
@d9 1
a9 1
#define Module_Date_CMHG                17 May 2009
d14 1
a14 1
#define Module_Date                     "17 May 2009"
d16 1
a16 1
#define Module_ApplicationDate          "17-May-09"
d22 1
a22 1
#define Module_HelpVersion              "1.78 (17 May 2009)"
@


4.23
log
@Modified ASCII display in *Memory etc to read memory using the same access
size as the main output. This helps with some hardware registers that only
support, say, word-sized accesses. Note that the memory locations are still
read a second time for the ASCII display, so it's still not ideal for
read-sensitive hardware.

Added some ARMv6 support to disassembly, but this is incomplete and switched
out at the moment.

Version 1.77. Tagged as 'Debugger-1_77'
@
text
@d1 1
a1 1
/* (1.77)
d4 1
a4 1
 * Last processed by srccommit version: 1.68.
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.77
d9 1
a9 1
#define Module_Date_CMHG                30 Jul 2004
d11 2
a12 2
#define Module_MajorVersion             "1.77"
#define Module_Version                  177
d14 1
a14 1
#define Module_Date                     "30 Jul 2004"
d16 1
a16 1
#define Module_ApplicationDate          "30-Jul-04"
d19 1
a19 1
#define Module_ComponentPath            "RiscOS/Sources/Programmer/Debugger"
d21 3
a23 3
#define Module_FullVersion              "1.77"
#define Module_HelpVersion              "1.77 (30 Jul 2004)"
#define Module_LibraryVersionInfo       "1:77"
@


4.22
log
@  A new feature and a bugfix.
Detail:
  * Added 'H' flag to *Memory and *MemoryA to allow half-word memory accesses.
    On 26-bit machines, this is emulated using 32-bit reads and read-modify-
    writes; on 32-bit machines, LDRH and STRH are used. Address header in
    *Memory byte mode changed to be only one digit per byte for consistency
    with word and half-word modes. *MemoryA H in interactive mode gives a
    Thumb disassembly.
  * STM Rn!,{reg_list_including_Rn} is actually allowed, provided Rn is the
    lowest register in the list. Warning code adjusted accordingly.
Admin:
  Tested on Risc PC and Tungsten.

Version 1.76. Tagged as 'Debugger-1_76'
@
text
@d1 1
a1 1
/* (1.76)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.76
d9 1
a9 1
#define Module_Date_CMHG                03 Dec 2002
d11 2
a12 2
#define Module_MajorVersion             "1.76"
#define Module_Version                  176
d14 1
a14 1
#define Module_Date                     "03 Dec 2002"
d16 1
a16 1
#define Module_ApplicationDate          "03-Dec-02"
d21 3
a23 3
#define Module_FullVersion              "1.76"
#define Module_HelpVersion              "1.76 (03 Dec 2002)"
#define Module_LibraryVersionInfo       "1:76"
@


4.21
log
@  Merged in Kevin's latest version, as featured in OS release 5.00.
Detail:
  * Added Q bit to *ShowRegs
  * Added FMSRR, FMRRS, FMDRR and FMRRD to VFP support
  * Shortened lots of VFP literals by treating common "F" prefix separately
  * Cirrus DSP support (switched out)
  * Piccolo support (not even linked in)
  * ARM/Thumb disassembly test programs added
  * Bugfix: code variable init code was trashing the flags that indicated
    whether zero page branch table (used for breakpoints in 32-bit mode) needs
    creating
Admin:
  Builds identical binary to 5.00 release, repository changes were build-
  related only.

Version 1.75. Tagged as 'Debugger-1_75'
@
text
@d1 1
a1 1
/* (1.75)
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.75
d11 2
a12 2
#define Module_MajorVersion             "1.75"
#define Module_Version                  175
d21 3
a23 3
#define Module_FullVersion              "1.75"
#define Module_HelpVersion              "1.75 (03 Dec 2002)"
#define Module_LibraryVersionInfo       "1:75"
@


4.20
log
@    Header exports now work.

Detail:
    Build would not build with this version of the module as the last change
to the makefile did not include the line needed to export the Debugger
header. This line has now been added.
    Added an !MkExport to enable testing of the export.
    Converted the existing Mk... obey files to !Mk... files.

Admin:
    Some basic testing.

Version 1.74. Tagged as 'Debugger-1_74'
@
text
@d1 1
a1 1
/* (1.74)
d4 1
d7 1
a7 1
#define Module_MajorVersion_CMHG        1.74
d9 1
a9 1
#define Module_Date_CMHG                01 Jun 2001
d11 2
a12 2
#define Module_MajorVersion             "1.74"
#define Module_Version                  174
d14 1
a14 1
#define Module_Date                     "01 Jun 2001"
d16 1
a16 2
#define Module_ApplicationDate2         "01-Jun-01"
#define Module_ApplicationDate4         "01-Jun-2001"
d21 3
a23 2
#define Module_FullVersion              "1.74"
#define Module_HelpVersion              "1.74 (01 Jun 2001)"
@


4.19
log
@* Fixed register clash warnings on SWP.
* Changes to message files to correct syntax errors.
* *MemoryX P works on IOMD-based systems is OS_Memory 13 fails.
* Changed to use ObjAsm and centralised Makefiles.

Version 1.73. Tagged as 'Debugger-1_73'
@
text
@d1 1
a1 1
/* (1.73)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.73
d8 1
a8 1
#define Module_Date_CMHG                10 May 2001
d10 2
a11 2
#define Module_MajorVersion             "1.73"
#define Module_Version                  173
d13 1
a13 1
#define Module_Date                     "10 May 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "10-May-01"
#define Module_ApplicationDate4         "10-May-2001"
d21 2
a22 2
#define Module_FullVersion              "1.73"
#define Module_HelpVersion              "1.73 (10 May 2001)"
@


4.18
log
@memory, memorya and memoryi commands support p option,
which specifies physical rather than logical addresses
only functional with kernel that support OS_Memory 14 and 15

Version 1.72. Not tagged
@
text
@d1 1
a1 1
/* (1.72)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.72
d8 1
a8 1
#define Module_Date_CMHG                01 May 2001
d10 2
a11 2
#define Module_MajorVersion             "1.72"
#define Module_Version                  172
d13 1
a13 1
#define Module_Date                     "01 May 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "01-May-01"
#define Module_ApplicationDate4         "01-May-2001"
d21 2
a22 2
#define Module_FullVersion              "1.72"
#define Module_HelpVersion              "1.72 (01 May 2001)"
@


4.17
log
@  * Added a couple of tweaks to the MakeMess and MkClean files.
  * Added the Disassemble$Options system variable.
Detail:
  * MakeMess now does a CDir command (in case you run it before
    running MkRom). MkClean now includes a 'stripdepnd' call.

  * There is a new system (code) variable created on module init
    called Disassemble$Options. This controls (at the moment)
    register naming for disassembly.
Admin:
  Tested on RiscOS 4 and 3.70.

Version 1.72. Tagged as 'Debugger-1_72'
@
text
@d8 1
a8 1
#define Module_Date_CMHG                30 Apr 2001
d13 1
a13 1
#define Module_Date                     "30 Apr 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "30-Apr-01"
#define Module_ApplicationDate4         "30-Apr-2001"
d22 1
a22 1
#define Module_HelpVersion              "1.72 (30 Apr 2001)"
@


4.16
log
@Fixed and tidied *ShowFPRegs. In particular, will work with 26-bit
FPEmulators.

Version 1.71. Tagged as 'Debugger-1_71'
@
text
@d1 1
a1 1
/* (1.71)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.71
d8 1
a8 1
#define Module_Date_CMHG                18 Apr 2001
d10 2
a11 2
#define Module_MajorVersion             "1.71"
#define Module_Version                  171
d13 1
a13 1
#define Module_Date                     "18 Apr 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "18-Apr-01"
#define Module_ApplicationDate4         "18-Apr-2001"
d21 2
a22 2
#define Module_FullVersion              "1.71"
#define Module_HelpVersion              "1.71 (18 Apr 2001)"
@


4.15
log
@  Optimisation of SWI stuff.
  Changed wacky immediate format.
Detail:
  SWI number stuff now uses an internal routine rather than a call
  to SWI OS_ConvertHex...

  When someone disassembles a wacky immediate, it is represented as
  "<OP> Rd,Rn,#&xx,x" rather than the non-standard
  "<OP> Rd,Rn,#&xx,ROR #x" format. This can then be assembled and
  conforms to ARM's standards.
Admin:
  Tested on RiscPC

  My editor blew-up in the middle of srccommit on Debugger-1_69 so
  don't use that version!

Version 1.70. Tagged as 'Debugger-1_70'
@
text
@d1 1
a1 1
/* (1.70)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.70
d8 1
a8 1
#define Module_Date_CMHG                21 Mar 2001
d10 2
a11 2
#define Module_MajorVersion             "1.70"
#define Module_Version                  170
d13 1
a13 1
#define Module_Date                     "21 Mar 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "21-Mar-01"
#define Module_ApplicationDate4         "21-Mar-2001"
d21 2
a22 2
#define Module_FullVersion              "1.70"
#define Module_HelpVersion              "1.70 (21 Mar 2001)"
@


4.14
log
@  Optimisation of SWI stuff.
  Changed wacky immediate format.
Detail:
  SWI number stuff now uses an internal routine rather than a call
  	 SWISWI

Version 1.69. Tagged as 'Debugger-1_69'
@
text
@d1 1
a1 1
/* (1.69)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.69
d10 2
a11 2
#define Module_MajorVersion             "1.69"
#define Module_Version                  169
d21 2
a22 2
#define Module_FullVersion              "1.69"
#define Module_HelpVersion              "1.69 (21 Mar 2001)"
@


4.13
log
@  Modified SWI number output.
  SWI number stuff also implemented in Thumb mode.
Detail:
  Unknown SWIs were dissasembled as an 8 nibble hexadecimal number.
  This has been reduced to a six nibble number (as the top byte is
  always zero).

  The unknown SWI disassembled as a number stuff has also been added
  to Thumb mode disassembly. Only two nibbles are displayed in this
  mode.
Admin:
  Tested on a RiscPC.

Version 1.68. Tagged as 'Debugger-1_68'
@
text
@d1 1
a1 1
/* (1.68)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.68
d10 2
a11 2
#define Module_MajorVersion             "1.68"
#define Module_Version                  168
d21 2
a22 2
#define Module_FullVersion              "1.68"
#define Module_HelpVersion              "1.68 (21 Mar 2001)"
@


4.12
log
@QADD etc "corrected" to have operands in Rm,Rn order.

Version 1.67. Tagged as 'Debugger-1_67'
@
text
@d1 1
a1 1
/* (1.67)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.67
d8 1
a8 1
#define Module_Date_CMHG                15 Feb 2001
d10 2
a11 2
#define Module_MajorVersion             "1.67"
#define Module_Version                  167
d13 1
a13 1
#define Module_Date                     "15 Feb 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "15-Feb-01"
#define Module_ApplicationDate4         "15-Feb-2001"
d21 2
a22 2
#define Module_FullVersion              "1.67"
#define Module_HelpVersion              "1.67 (15 Feb 2001)"
@


4.11
log
@  Fixed SWI number disassembly.
Detail:
  The routine was returning the length of the disassembled instruction
  *including* the terminator. Changed to exclude it as the others do
Admin:
  Tested on RiscPC

Version 1.66. Tagged as 'Debugger-1_66'
@
text
@d1 1
a1 1
/* (1.66)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.66
d8 1
a8 1
#define Module_Date_CMHG                14 Feb 2001
d10 2
a11 2
#define Module_MajorVersion             "1.66"
#define Module_Version                  166
d13 1
a13 1
#define Module_Date                     "14 Feb 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "14-Feb-01"
#define Module_ApplicationDate4         "14-Feb-2001"
d21 2
a22 2
#define Module_FullVersion              "1.66"
#define Module_HelpVersion              "1.66 (14 Feb 2001)"
@


4.10
log
@* Breakpoints now work on 32-bit systems - it got confused over which
  breakpoint was hit.
* *MemoryI T now disassembles 24 instructions by default rather than 48.

Version 1.65. Tagged as 'Debugger-1_65'
@
text
@d1 1
a1 1
/* (1.65)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.65
d8 1
a8 1
#define Module_Date_CMHG                08 Feb 2001
d10 2
a11 2
#define Module_MajorVersion             "1.65"
#define Module_Version                  165
d13 1
a13 1
#define Module_Date                     "08 Feb 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "08-Feb-01"
#define Module_ApplicationDate4         "08-Feb-2001"
d21 2
a22 2
#define Module_FullVersion              "1.65"
#define Module_HelpVersion              "1.65 (08 Feb 2001)"
@


4.9
log
@* Added ARMv5TE instructions.
* Fixed disassembly of Thumb high MOV/ADD/CMP instructions.

Version 1.64. Tagged as 'Debugger-1_64'
@
text
@d1 1
a1 1
/* (1.64)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.64
d8 1
a8 1
#define Module_Date_CMHG                31 Jan 2001
d10 2
a11 2
#define Module_MajorVersion             "1.64"
#define Module_Version                  164
d13 1
a13 1
#define Module_Date                     "31 Jan 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "31-Jan-01"
#define Module_ApplicationDate4         "31-Jan-2001"
d21 2
a22 2
#define Module_FullVersion              "1.64"
#define Module_HelpVersion              "1.64 (31 Jan 2001)"
@


4.8
log
@  Fixed ADR and modified SWI disassembly.
Detail:
  ADDS Rd,PC,#.. and SUBS Rd,PC,#.. were being incorrectly disassembled
  as ADR pseudo-instructions. Fixed.

  Unknown SWIs (such as OS_Undefined and User) are disassembled in the
  form 'SWI &<num>' so that you can re-assemble the code (and it makes
  more sense if you don't have a module loaded which defined that SWI).
Admin:
  Tested on RiscPC

  I also added some notes on ARM v5TE to the Doc directory. May be of
  some use when adding compatibility for that to Debugger.

Version 1.63. Tagged as 'Debugger-1_63'
@
text
@d1 1
a1 1
/* (1.63)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.63
d8 1
a8 1
#define Module_Date_CMHG                30 Jan 2001
d10 2
a11 2
#define Module_MajorVersion             "1.63"
#define Module_Version                  163
d13 1
a13 1
#define Module_Date                     "30 Jan 2001"
d15 2
a16 2
#define Module_ApplicationDate2         "30-Jan-01"
#define Module_ApplicationDate4         "30-Jan-2001"
d21 2
a22 2
#define Module_FullVersion              "1.63"
#define Module_HelpVersion              "1.63 (30 Jan 2001)"
@


4.7
log
@* Disassembly of VFP instruction set added.
* Changed invalid instruction to &E7FFFFFF (as per ARM
  recommendation that &E7FxxxFx should be used)
* Branch disassembly changed - when running on a
  26-bit systems, branch instructions in the lower
  64M will be wrapped within 64M, but branches
  above 64M will not.
* PC-relative LDRH family instructions calculated
  target address incorrectly.

Version 1.62. Tagged as 'Debugger-1_62'
@
text
@d1 1
a1 1
/* (1.62)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.62
d8 1
a8 1
#define Module_Date_CMHG                08 Sep 2000
d10 2
a11 2
#define Module_MajorVersion             "1.62"
#define Module_Version                  162
d13 1
a13 1
#define Module_Date                     "08 Sep 2000"
d15 2
a16 2
#define Module_ApplicationDate2         "08-Sep-00"
#define Module_ApplicationDate4         "08-Sep-2000"
d18 5
a22 1
#define Module_FullVersion              "1.62"
@


4.6
log
@"ARMv5 only" warning now shown reliably.

Version 1.61. Tagged as 'Debugger-1_61'
@
text
@d1 1
a1 1
/* (1.61)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.61
d8 1
a8 1
#define Module_Date_CMHG                11 Jul 2000
d10 2
a11 2
#define Module_MajorVersion             "1.61"
#define Module_Version                  161
d13 1
a13 1
#define Module_Date                     "11 Jul 2000"
d15 2
a16 2
#define Module_ApplicationDate2         "11-Jul-00"
#define Module_ApplicationDate4         "11-Jul-2000"
d18 1
a18 1
#define Module_FullVersion              "1.61"
@


4.5
log
@* 32-bit compatibility added.
* New *ShowFPRegs command.
* Added ARMv5 instructions (BLX, CLZ, BKPT, CDP2 et al)
* Handling of instruction extension space adjusted as per ARMv4.
* Fixed some Thumb instructions.
* Added "info" form of LDC and STC.
* NV condition code is now undefined, except for the new instructions using
  it.

Version 1.60. Tagged as 'Debugger-1_60'
@
text
@d1 1
a1 1
/* (1.60)
d6 1
a6 1
#define Module_MajorVersion_CMHG        1.60
d8 1
a8 1
#define Module_Date_CMHG                02 May 2000
d10 2
a11 2
#define Module_MajorVersion             "1.60"
#define Module_Version                  160
d13 1
a13 1
#define Module_Date                     "02 May 2000"
d15 4
a18 1
#define Module_FullVersion              "1.60"
@


4.4
log
@Now also creates and removed the rm directory. Should now build straight from CVS.

Version 1.59. Tagged as 'Debugger-1_59'
@
text
@d1 1
a1 1
/* (1.59)
d6 3
a8 3
#define Module_MajorVersion_CMHG     	1.59
#define Module_MinorVersion_CMHG	
#define Module_Date_CMHG      		20 Apr 1999
d10 4
a13 4
#define Module_MajorVersion     	"1.59"
#define Module_Version                  159
#define Module_MinorVersion		""
#define Module_Date      		"20 Apr 1999"
d15 1
a15 1
#define Module_FullVersion              "1.59"
@


4.3
log
@Altered Makefile to automatically create and delete the rm.{MACHINE}
directory.

Version 1.58. Tagged as 'Debugger-1_58'
@
text
@d1 1
a1 1
/* (1.58)
d6 1
a6 1
#define Module_MajorVersion_CMHG     	1.58
d8 1
a8 1
#define Module_Date_CMHG      		19 Apr 1999
d10 2
a11 2
#define Module_MajorVersion     	"1.58"
#define Module_Version                  158
d13 1
a13 1
#define Module_Date      		"19 Apr 1999"
d15 1
a15 1
#define Module_FullVersion              "1.58"
@


4.2
log
@Ursula and Spinner branches merged.
Makefile changed to use LocalRes$Path.
Changed to use srccommit.

Version 1.57. Tagged as 'Debugger-1_57'
@
text
@d1 1
a1 1
/* (1.57)
d6 1
a6 1
#define Module_MajorVersion_CMHG     	1.57
d8 1
a8 1
#define Module_Date_CMHG      		21 Sep 1998
d10 2
a11 2
#define Module_MajorVersion     	"1.57"
#define Module_Version                  157
d13 1
a13 1
#define Module_Date      		"21 Sep 1998"
d15 1
@


4.1
log
@created by srccommit.
@
text
@d1 1
a1 1
/* (1.56)
d6 1
a6 1
#define Module_MajorVersion_CMHG     	1.56
d10 2
a11 2
#define Module_MajorVersion     	"1.56"
#define Module_Version                  156
@
