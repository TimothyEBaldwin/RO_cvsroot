head	1.3;
access;
symbols
	Debugger-2_02-1:1.3
	Debugger-2_02:1.3
	Debugger-2_01:1.3
	Debugger-2_00:1.3
	Debugger-1_99:1.3
	Debugger-1_98:1.3
	Debugger-1_97:1.2
	Debugger-1_96:1.2
	Debugger-1_95:1.2
	Debugger-1_94:1.2
	Debugger-1_93:1.1
	Debugger-1_92:1.1
	Debugger-1_91:1.1
	Debugger-1_90:1.1
	Debugger-1_89:1.1
	Debugger-1_88:1.1
	Debugger-1_87:1.1
	Debugger-1_86:1.1
	Debugger-1_85:1.1
	Debugger-1_84:1.1;
locks; strict;
comment	@# @;


1.3
date	2016.11.11.22.58.06;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	qeQW0pSFnTogsLtz;

1.2
date	2016.06.11.09.51.08;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	BcfYDtHjQWGb12az;

1.1
date	2013.10.19.16.54.56;	author rsprowson;	state Exp;
branches;
next	;
commitid	OeaVkZCy9wwHpV9x;


desc
@@


1.3
log
@Add ARMv8 AArch32 disassembly
Opcodes for CRC32/HLT/SEVL/LDA/STL/LDAEX/STLEX and DMB/DSB options.
Makefile:
  Add ARMv8_AArch32 actions and encodings to dis2.
actions/ARMv7,dis2.h:
  Extend the DMS/DSB decoding to warn about ARMv8 specific ones (previously undefined)
ARM.s/ARMv6.s:
  Slot in decode.
CGlue.s/Debugger.s/Messages
  New token for "ARMv8 or later" warnings.

Tested by brute force all 256M instructions in NV space and 256M conditionals, comparing the output against dis2.
Currently missing the new VFP and SIMD opcodes.

Version 1.98. Tagged as 'Debugger-1_98'
@
text
@; Copyright 2013 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System

        AREA    test,CODE,READONLY

        ; Synchronisation primitives
        LDREXB  r0, [r1]
        LDREXH  r0, [r1]
        LDREX   r0, [r1]
        LDREXD  r0, r1, [r2]

        LDREXBNE  r0, [r1]
        LDREXHNE  r0, [r1]
        LDREXNE   r0, [r1]
        LDREXDNE  r0, r1, [r2]

        DCI     &E1B25F9F               ; LDREXD odd reg, unpredictable

        STREX   r0, r1, [r2]
        STREX   r0, r0, [r2]            ; Unpredictable
        STREX   r0, r1, [r0]            ; Unpredictable
        STREX   pc, r1, [r2]            ; Unpredictable
        DCI     &E1A20F95               ; STREXD odd reg, unpredictable
        STREXD  r0, r14, r15, [r2]      ; Target PC, unpredictable

        ; Hints
        DCI     &E320F000               ; NOP
        DCI     &2320F000               ; NOPCS
        YIELD
        YIELDCS
        WFE
        WFECS
        WFI
        WFICS
        SEV
        SEVCS
        DBG     7
        DBGCS   7
        DCI     &E320F900               ; NOP but with nonzero SBZ, undefined
        DCI     &E320F0EE               ; Unallocated hint, unpredictable NOP

        ; Move immediate 16b
        MOVW    r5, #&DEAD
        MOVT    r5, #&BEEF

        ; Multiply extensions
        UMAAL   r0, r1, r2, r3
        UMAALHI r0, r1, r2, r3
        UMAAL   r0, r1, pc, r3          ; Unpredictable
        UMAAL   r1, r1, r2, r3          ; Clash RdLo RdHi
        MLS     r0, r1, r2, r3
        MLSHI   r0, r1, r2, r3
        MLS     r0, r1, pc, r3          ; Unpredictable

        ; User mode load/store
        LDRCCT  r1, [r2], r3
        LDRT    r1, [r2], #-4
        LDRHTCC r1, [r2], r3            ; UAL only, cond last
        LDRHT   r1, [r2], #-2
        LDRCCBT r1, [r2], r3
        LDRBT   r1, [r2], #-1
        LDRSHTCC r1, [r2], r3           ; UAL only, cond last
        LDRSHT  r1, [r2], #-2
        LDRSBTCC r1, [r2], r3           ; UAL only, cond last
        LDRSBT  r1, [r2], #1
        STRT    r1, [r2]
        STRHT   r1, [r2]
        STRBT   r1, [r2]

        ; Secure extensions
        SMC     7
        SMCHI   7

        MCRR    p7, 0, r3, r4, c5
        MCRRNV  p7, 0, r3, r4, c5       ; MCRR2
        MRRC    p7, 0, r3, r4, c5
        MRRCNV  p7, 0, r3, r4, c5       ; MRRC2

        ; Exception entry and exit
        SRSDA   SP!, #3
        SRSDB   SP, #3
        SRSIA   SP!, #3
        SRSIB   SP, #3
        DCI     &F9CE0503               ; Not SP, undefined
        RFEDA   R15!                    ; Not PC
        RFEDB   R0
        RFEIA   R0!
        RFEIB   R0

        ; Misc instructions
        CPSID   i
        CPSIE   f
        CPSID   aif,#SVC32_mode
        CPS     12
        DCI     &F100000C               ; Mode != 0, no mode change bit, unpredictable

        SETEND  BE

        CLREX
        DSB     ISHST
        DMB     OSH
        DMB     ST
        ISB     SY
        DCI     &F57FF050               ; DMB 0, as SY but unpredictable
        DCI     &F57FF063               ; ISB OSH, as SY but unpredictable
        DCI     &F57FF000               ; Unallocated, unpredictable
10
        PLD     %BT10       
        PLD     [R1, #-1000]
        PLD     [R1, R2]    
        DCI     &F45FF014               ; Objasm 4.01 bug, this is "PLI %BT10"
        PLI     [R1, #-1000]
        PLI     [R1, R2]

        ; Parallel add/sub signed/unsigned
        SADD16CC r0, r1, r2             ; Check for spill into next column
        SADD8CC r0, r1, r2
        SASXCC  r0, r1, r2

        SADD16  r0, r1, r2
        SADD8   r0, r1, r2
        SASX    r0, r1, r2
        SSUB16  r0, r1, r2
        SSUB8   r0, r1, r2
        SSAX    r0, r1, r2

        QADD16  r0, r1, r2
        QADD8   r0, r1, r2
        QASX    r0, r1, r2
        QSUB16  r0, r1, r2
        QSUB8   r0, r1, r2
        QSAX    r0, r1, r2

        SHADD16 r0, r1, r2
        SHADD8  r0, r1, r2
        SHASX   r0, r1, r2
        SHSUB16 r0, r1, r2
        SHSUB8  r0, r1, r2
        SHSAX   r0, r1, r2

        UADD16  r0, r1, r2
        UADD8   r0, r1, r2
        UASX    r0, r1, r2
        USUB16  r0, r1, r2
        USUB8   r0, r1, r2
        USAX    r0, r1, r2

        UQADD16 r0, r1, r2
        UQADD8  r0, r1, r2
        UQASX   r0, r1, r2
        UQSUB16 r0, r1, r2
        UQSUB8  r0, r1, r2
        UQSAX   r0, r1, r2

        UHADD16 r0, r1, r2
        UHADD8  r0, r1, r2
        UHASX   r0, r1, r2
        UHSUB16 r0, r1, r2
        UHSUB8  r0, r1, r2
        UHSAX   r0, r1, r2

        ; Signed multiply and divide
        SMLAD   r0, r1, r2, r3
        SMLADXCS r0, r1, r2, r3
        SMUAD   r0, r1, r2
        SMUADXCS r0, r1, r2
        SMLSD   r0, r1, r2, r3
        SMLSDXCS r0, r1, r2, r3
        SMUSD   r0, r1, r2
        SMUSDXCS r0, r1, r2
        DCI      &E715F716              ; SDIV r5, r6, r7
        DCI      &E735F716              ; UDIV r5, r6, r7
        SMLALD  r0, r1, r2, r3
        SMLALDCS r0, r1, r2, r3
        SMLSLD  r0, r1, r2, r3
        SMLSLDCS r0, r1, r2, r3
        SMMLA   r0, r1, r2, r3
        SMMLARCS r0, r1, r2, r3
        SMMUL   r0, r1, r2
        SMMULRCS r0, r1, r2
        SMMLS   r0, r1, r2, r3
        SMMLSRCS r0, r1, r2, r3

        ; Sum abs diffs
        USAD8   r2, r3, r4
        USADA8  r2, r3, r4, r5
        USADA8CC r2, r3, r4, r5
        
        ; Media extensions
        SEL     r5, r6, r7
        SELCC   r5, PC, r7              ; Not PC
        REV     r0, r1
        REV16   r0, r1
        REVSH   r0, r1
        REVSHCC r0, pc                  ; Not PC
        UBFX    r5, r6, #12, #19
        UBFXCS  r5, r6, #0, #32
        SBFX    r5, PC, #12, #19        ; Not PC
        SBFXCS  r5, r6, #19, #9
        BFI     r5, r6, #9, #19
        BFI     pc, r6, #9, #19         ; PC target unpredictable
        BFCCS   r5, #9, #21

        REV     r1,r2
        REV16   r1,r2
        REVSHCC r1,r2
        RBIT    r1,r2
        RBIT    r1,PC                   ; Not PC

        PKHBT   r0, r1, r2
        PKHBTCC r0, r1, r2, LSL #31
        PKHTB   r0, r2, r1              ; Maps to PKHBT r0, r1, r2
        PKHTB   r0, r1, PC, ASR #1      ; Not PC
        PKHTBCC r0, r1, r2, ASR #32

        USAT    r6, #7, r8
        SSAT    r6, #7, r8, ASR #32
        USAT    r6, #7, PC, LSL #5      ; Not PC
        USAT16NE r6, #7, r8

        UXTB    r0, r1
        UXTAB   r0, r1, r2
        SXTBCC  r0, r1, ROR #8
        SXTABCC r0, r1, r2, ROR #16
        UXTH    r0, r1
        UXTAH   r0, r1, r2
        UXTB16  r0, PC                  ; Not PC
        UXTAB16CC r0, r1, r2, ROR #24

        ; V7 multi processor additions
        PLDW    [r5, r6]

        ; V7 virtualisation additions
        MSR     ELR_hyp, r5
        MSR     R8_fiq, r5
        MRS     r5, SP_irq
        MRS     r5, LR_mon
        ERETNE
        HVC     &1234
        
        ; V8 additions
        DCI     &E1043045               ; CRC32B  r3, r4, r5
        DCI     &11043245               ; CRC32CBNE r3, r4, r5
        DCI     &11243245               ; CRC32CHNE r3, r4, r5
        DCI     &E14F3245               ; CRC32CW r3, pc, r5

        DMB     NSHLD
        DSB     LD

        HLT     &DEAD
        SEVL

        LDA     r0, [r1]
        LDACCB  r0, [r1]
        LDACCH  r0, [pc]
        STL     r2, [r2]

        LDAEXNE r0, [r1]
        LDAEXD  r0, r1, [r2]
        LDAEXNEB r0, [pc]
        LDAEXH  r0, [r1]
        STLEX   r0, r1, [r2]
        STLEXNE r0, pc, [r2]

        END
@


1.2
log
@ARMv6/v7 disassembly accuracy improvements, ARMv7MP ARMv7VE additions
ARMv6.s
  Add missing conditionals on DBG.
  Add ERET (v7VE).
  Add MRS/MSR banked (v7VE), and its funky encoding of the banked register.
  Check bit 22 of SRS/RFE properly, otherwise some undefined instructions get wrongly decoded as SRS/RFE.
CGlue.s
  Use prefix 'A' for arch warnings, so they can be kept together in the messages file.
Debugger.s:
  Around line 990, refactor up front decoding to pick out NV instruction space like the ARM ARM says to do. This makes subsequent decoding much simpler to follow, and removes lots of backdoor checks on bits 28-31 scattered later on in the decode - fixes problem with CPS #mode being wrong when bit 4 set.
  Add HVI (v7MP). Note this is a made up pre-UAL form of HVC (cf. SWI->SVC, SMI->SMC) for now.
  Add PLDW (v7VE).
  Put back flags preservation on Conditions routine, otherwise TestStr preserves flags if no conditions are wanted, but doesn't if they are - was causing some of the Saturates family to be misclassified as undefined.
Test/V6V7tests
  Add samples of each of the extra instructions.
Resources/UK/Messages, Resources/Germany/Messages
  Messages files updated.
Tested with 'testbed' over the 256M EQ condition code, plus 256M NV condition code, with no unexplained mismatches.

Version 1.94. Tagged as 'Debugger-1_94'
@
text
@d257 24
@


1.1
log
@Add in disassembly of ARMv6 and ARMv7 instruction sets
The debugger had some embryonic ARMv6 knowhow, switched out due to being incomplete.
Enabling and finishing off ARMv6, then adding ARMv6K, ARMv6T2, ARMv6 security extensions, and ARMv7.
That just leaves
 - ARMv7MP (multiprocessor extensions: PLDW)
 - ARMv7VE (virtualisation extensions: ERET, MRS copro, MSR copro)
 - Advanced SIMD (probably worth thinking about)
 - Thumb2 (questionable why Thumb is supported at all as the tools & OS don't use it)
The syntax follows the pre UAL spirit for the new instructions (cf. ADDCCS versus ADDSCC).
Removed binary V6test binary, replaced with more comprehensive v6/v7 source.
Tested softloaded inspecting the output in StrongEd.

Version 1.84. Tagged as 'Debugger-1_84'
@
text
@a18 1
        GET     Hdr:Services
d109 1
a109 1
        CPSID   aif,#12
d245 11
@

