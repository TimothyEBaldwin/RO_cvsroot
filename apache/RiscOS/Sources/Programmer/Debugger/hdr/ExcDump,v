head	1.1;
access;
symbols
	Debugger-2_02-1:1.1
	Debugger-2_02:1.1
	Debugger-2_01:1.1
	Debugger-2_00:1.1
	Debugger-1_99:1.1
	Debugger-1_98:1.1
	Debugger-1_97:1.1
	Debugger-1_96:1.1
	Debugger-1_95:1.1
	Debugger-1_94:1.1
	Debugger-1_93:1.1
	Debugger-1_92:1.1;
locks; strict;
comment	@# @;


1.1
date	2016.04.05.20.41.29;	author jlee;	state Exp;
branches;
next	;
commitid	xIAY2HYlqbqLLt1z;


desc
@@


1.1
log
@Add exception dump generation and processing facilities
Detail:
  This set of changes adds support for the following features:
  * A new code system variable, Debugger$DumpOptions, to control whether exception/crash dumps are collected from SeriousErrorV and where they should be output
  * Dump output can be in raw (binary) or annotated (text) form.
  * Annotated form provides detailed annotation of the stack(s), detecting certain constructs such as SWI invocations, IRQsema frames, CMHG veneers, APCS stack frame chains, and most forms of assembler function calls. The output isn't as easy to understand as a proper stack backtrace would be, but the low-level nature allows it to cope with corrupt or partially-overwritten stack frames, and avoids making invasive changes to components in order to make them backtrace-friendly
  * Stack annotation is able to make use of embedded ROM debug symbols (to be supported by romlinker 0.06) and Norcroft-style embedded function names in order to provide function-level location information for most ROM components and applications
  * System variables Debugger$RawFile and Debugger$AnnotatedFile to specify where to save raw and annotated exception dumps (preliminary, approach may change in future)
  * As well as supporting saving to file, the exception dumps can also be sent to the HAL via HAL_DebugTX, or if a program is driving SeriousErrorV directly it can use SeriousErrorV_CustomReport to have it fed to a custom callback function
  The code is structured in such a way that the core dump annotation code can potentially be built into a standalone application to allow offline processing of dumps (offline application not part of this checkin)
  File changes:
  c/exc, h/exc - Core code for producing the annotated exception dumps
  hdr/ExcDump - Header detailing the format of the binary dump
  s/ExceptionDump - Code variable and SeriousErrorV handling. Several support calls (used by c/exc) are also implemented here, in order to separate the dump processing from any interrogation of the originating machine
  Makefile - Updated for c/exc inclusion, and C header generation from hdr/ExcDump
  Resources/UK/Messages, Resources/Germany/Messages - New messages used by exception dump code
  c/support - Add a strcmp implementation, and extend vsprintf to be vsnprintf. Add support for string width format specifier.
  s/Debugger - Workspace definitions and init/shutdown hooks for exception dump code. Refactor *Where so that the locate logic is separate from the message output logic, to allow the locate logic to be used by the exception dump code.
Admin:
  Tested on Raspberry Pi
  German messages in need of translation


Version 1.92. Tagged as 'Debugger-1_92'
@
text
@; Copyright 2016 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; Dump block format:
; word 0: block length (including header)
; word 1: block type
;         0 -> memory dump
;              word 2: base addr
;              word 3+: data
;         1 -> OSRSI6 item(s)
;              word 2: base index
;              word 3+: data
;         2 -> register dump
;              word 2+: data
;         3 -> error block
;              word 2+: data
;         4 -> OS_Memory 16 items
;              word 2: base item number
;              word 3+: details of each item
;                       base of area (R1)
;                       address space allocated (R2)
;                       actual memory used (R3)

                       ^ 0
ExcDump_Chunk_Memory   # 1
ExcDump_Chunk_OSRSI6   # 1
ExcDump_Chunk_Regs     # 1
ExcDump_Chunk_Error    # 1
ExcDump_Chunk_OSMem16  # 1

                       ^ 0
ExcDump_Reg_R0         # 1
ExcDump_Reg_R1         # 1
ExcDump_Reg_R2         # 1
ExcDump_Reg_R3         # 1
ExcDump_Reg_R4         # 1
ExcDump_Reg_R5         # 1
ExcDump_Reg_R6         # 1
ExcDump_Reg_R7         # 1
ExcDump_Reg_R8         # 1
ExcDump_Reg_R9         # 1
ExcDump_Reg_R10        # 1
ExcDump_Reg_R11        # 1
ExcDump_Reg_R12        # 1
ExcDump_Reg_R13        # 1
ExcDump_Reg_R14        # 1
ExcDump_Reg_R15        # 1
ExcDump_Reg_CPSR       # 1
ExcDump_Reg_R13_usr    # 1
ExcDump_Reg_R14_usr    # 1
ExcDump_Reg_R13_svc    # 1
ExcDump_Reg_R14_svc    # 1
ExcDump_Reg_SPSR_svc   # 1
ExcDump_Reg_R13_irq    # 1
ExcDump_Reg_R14_irq    # 1
ExcDump_Reg_SPSR_irq   # 1
ExcDump_Reg_R13_abt    # 1
ExcDump_Reg_R14_abt    # 1
ExcDump_Reg_SPSR_abt   # 1
ExcDump_Reg_R13_und    # 1
ExcDump_Reg_R14_und    # 1
ExcDump_Reg_SPSR_und   # 1
ExcDump_Reg_Count      # 0

ExcAnnotateAll_DescribeBlocks * 1

        END
@
