head	4.2;
access;
symbols
	Debugger-2_02-1:4.2
	Debugger-2_02:4.2
	Debugger-2_01:4.2
	Debugger-2_00:4.2
	Debugger-1_99:4.2
	Debugger-1_98:4.2
	Debugger-1_97:4.2
	Debugger-1_96:4.2
	Debugger-1_95:4.2
	Debugger-1_94:4.2
	Debugger-1_93:4.2
	Debugger-1_92:4.2
	Debugger-1_91:4.2
	Debugger-1_90:4.2
	Debugger-1_89:4.2
	Debugger-1_88:4.2
	Debugger-1_87:4.2
	Debugger-1_86:4.2
	Debugger-1_85:4.2
	Debugger-1_84:4.2
	Debugger-1_83:4.1
	Debugger-1_82:4.1
	Debugger-1_81:4.1
	Debugger-1_80:4.1
	Debugger-1_79:4.1
	Debugger-1_78:4.1
	RO_5_07:4.1
	Debugger-1_77:4.1;
locks; strict;
comment	@# @;


4.2
date	2013.10.19.16.54.50;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	OeaVkZCy9wwHpV9x;

4.1
date	2004.07.30.13.32.32;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Add in disassembly of ARMv6 and ARMv7 instruction sets
The debugger had some embryonic ARMv6 knowhow, switched out due to being incomplete.
Enabling and finishing off ARMv6, then adding ARMv6K, ARMv6T2, ARMv6 security extensions, and ARMv7.
That just leaves
 - ARMv7MP (multiprocessor extensions: PLDW)
 - ARMv7VE (virtualisation extensions: ERET, MRS copro, MSR copro)
 - Advanced SIMD (probably worth thinking about)
 - Thumb2 (questionable why Thumb is supported at all as the tools & OS don't use it)
The syntax follows the pre UAL spirit for the new instructions (cf. ADDCCS versus ADDSCC).
Removed binary V6test binary, replaced with more comprehensive v6/v7 source.
Tested softloaded inspecting the output in StrongEd.

Version 1.84. Tagged as 'Debugger-1_84'
@
text
@From ARMARMv7AR chapter L and A5.
                                                                    Introduced in
                                                                    v6 v6K v6T2 v7
        ; STREX            cccc 0001 1000 nnnn dddd 1111 1001 mmmm   *
        ; LDREX                      1001 nnnn dddd 1111 1001 1111   *
        ; STREXD                     1010                               *
        ; LDREXD                     1011                               *
        ; STREXB                     1100                               *
        ; LDREXB                     1101                               *
        ; STREXH                     1110                               *
        ; LDREXH                     1111                               *

        ; NOP              cccc 0011 0010 0000 1111 0000 0000 0000      *
        ; YIELD                                               0001      *
        ; WFE                                                 0010      *
        ; WFI                                                 0011      *
        ; SEV                                                 0100      *
        ; DBG                                            1111 hhhh               *

        ; MOVT             cccc 0011 0100 iiii dddd iiii iiii iiii          *
        ; MOVW             cccc 0011 0000 iiii dddd iiii iiii iiii          *

        ; STRHT            cccc 0000 ur10                1011               *
        ; LDRHT            cccc 0000 ur11                1011               *
        ; LDRSBT           cccc 0000 ur11                1101               *
        ; LDRSHT           cccc 0000 ur11                1111               *

        ; SMI              cccc 0001 0110 0000 0000 0000 0111 iiii      *

        ; UMAAL            cccc 0000 0100 hhhh llll ssss 1001 mmmm      *
        ; MLS              cccc 0000 0100 dddd aaaa mmmm 1001 nnnn          *

        ; MCRR2            1111 
        ; MRRC2            1111 

        ; SRS              1111 100p u1w0 1101 0000 0101 000m mmmm   *
        ; RFE              1111 100p u0w1 nnnn 0000 1010 0000 0000   *

        ; CPS              1111 0001 0000 ssc0 0000 000a if0m mmmm   *
        ; SETEND           1111 0001 0000 0001 0000 00e0 0000 0000

        ; CLREX            1111 0101 0111 1111 1111 0000 0001 1111      *
        ; DSB              1111 0101 0111 1111 1111 0000 0100 tttt               *
        ; DMB                                            0101 tttt               *
        ; ISB                                            0110 tttt               *

        ; PLI(imm)         1111 011h u101 nnnn 1111 rrrr rtt0 mmmm               *
        ; PLI(reg)         1111 010h u101 nnnn 1111 iiii iiii iiii               *

        ; REV/REV16/REVSH  cccc 0110 1s11 1111 dddd 1111 h011 mmmm   *
        ; RBIT                        1                  0                  *

        ; PKH              cccc 0110 1000 nnnn dddd iiii it01 mmmm
        ; SEL              cccc 0110 1000 nnnn dddd 1111 1011 mmmm   *

        ;                  cccc 0110 0xxx nnnn dddd 1111 xxx1 mmmm   *
        ; ADD8                                           100         *
        ; ADD16                                          000         *
        ; ASX                                            001         *
        ; SUB8                                           111         *
        ; SUB16                                          011         *
        ; SAX                                            010         *
        ; UH                          111                            *
        ; UQ                          110                            *
        ; U                           101                            *
        ; SH                          011                            *
        ; Q                           010                            *
        ; S                           001                            *

        ; SMLAD                                                      *
        ; SMUAD                                                      *
        ; SMLSD                                                      *
        ; SMUSD                                                      *
        ; SDIV/UDIV        cccc 0111 00u1 dddd 1111 mmmm 0001 nnnn               *
        ; SMLALD           cccc 0111 0100 dddd nnnn 1111 0001 ssss   *
        ; SMLSLD                                                     *
        ; SMMLA            cccc 0111 0101 dddd ssss nnnn 00r1 ssss   *
        ; SMMLA                                                      *
        ; SMMUL                                                      *
        ; SMMLS                                                      *

        ; USAD8,USADA8     cccc 0111 1000 dddd nnnn ssss 0001 mmmm   *
        ; BFI              cccc 0111 110m mmmm dddd llll l001 nnnn          *
        ; BFC                                                 1111          *
        ; SBFX             cccc 0111 101w wwww dddd llll l101 nnnn          *
        ; UBFX                        1                                     *
        ; USAT             cccc 0110 1u1b bbbb dddd iiii ith1 nnnn   *
        ; USAT16                                    1111 00          *
        ; SSAT             cccc 0110 1u1b bbbb dddd iiii ith1 nnnn   *
        ; SSAT16                                    1111 00          *
        ; UXTB16,UXTAB16   cccc 0110 11ww nnnn dddd rr00 0111 mmmm   *
        ; UXTB,UXTAB                  1                              *
        ; UXTH,UXTAH                  1                              *
        ; SXTB16,SXTAB16              0                              *
        ; SXTB,SXTAB                  0                              *
        ; SXTH,SXTAH                  0                              *
@


4.1
log
@Modified ASCII display in *Memory etc to read memory using the same access
size as the main output. This helps with some hardware registers that only
support, say, word-sized accesses. Note that the memory locations are still
read a second time for the ASCII display, so it's still not ideal for
read-sensitive hardware.

Added some ARMv6 support to disassembly, but this is incomplete and switched
out at the moment.

Version 1.77. Tagged as 'Debugger-1_77'
@
text
@d1 96
a96 50
        ; arrive here with cccc 011x xxxx xxxx xxxx xxxx xxx1 xxxx


        ; SMLAD/SMUAD etc  cccc 0111 0xxx xxxx xxxx xxxx xxx1 xxxx
        ; USAD8/USADA8     cccc 0111 1000 xxxx xxxx xxxx 0001 xxxx
        
        ; SMUAD/SMUSD      cccc 0111 0000 dddd nnnn 1111 0sx1 ssss
        ; SMMUL            cccc 0111 0101 dddd nnnn 1111 00r1 ssss
        ; SMMLA            cccc 0111 0101 dddd ssss nnnn 00r1 ssss
        ; SMLALD           cccc 0111 0100 dddd nnnn 1111 0001 ssss
        
        ; various          cccc 0110 0xxx xooo xxxx xxxx xxx1 xxxx
        ; ADD/UNPK         cccc 0110 1xxx xxxx xxxx xxxx 0111 xxxx
        ; PKH              cccc 0110 1000 xxxx xxxx xxxx xx01 xxxx
        ; USAT/SSAT        cccc 0110 1x1x xxxx xxxx xxxx xx01 xxxx
        ; USAT16/SSAT16    cccc 0110 1x10 xxxx xxxx xxxx xx11 xxxx
        ; SEL16/SEL8       cccc 0110 1000 xxxx xxxx xxxx x011 xxxx
        ; REVxx            cccc 0110 1x11 xxxx xxxx xxxx x011 xxxx

        ; various          cccc 0110 0xxx xooo xxxx xxxx xxx1 xxxx
        ;                                 0100
        ; ADD8                                           1001
        ; ADD16						 0001
        ; ADDSUBX					 0011
        ; SUB8						 1111
        ; SUB16						 0111
        ; SUBADDX					 0101
        
        ; undefined					 1101
        ; undefined                                      1011
        ; UH                         0111     
        ; UQ                         0110
        ; U                          0101
        ; SH                         0011
        ; Q                          0010
        ; S                          0001
       
                
       ;  REV              cccc 0110 1011 1111 dddd 1111 0011 mmmm
       ;  REV16            cccc 0110 1011 xxxx xxxx xxxx 1011 xxxx
       ;  REVSH            cccc 0110 1111 xxxx xxxx xxxx 1011 xxxx

        ; LDREX            cccc 0001 1001 nnnn dddd 1111 1001 1111
        ; STREX            cccc 0001 1000 nnnn dddd 1111 1001 mmmm


        ; SRS              1111 100x x1x0 1101 xxxx 0101 xxxx xxxx
        ; RFE              1111 100x x0x1 xxxx xxxx 1010 xxxx xxxx
        ; SETEND           1111 0001 0000 xxx1 xxxx xxxx xxxx xxxx
        ; CPS              1111 0001 0000 xxxx xxxx xxxx xx0x xxxx
@

