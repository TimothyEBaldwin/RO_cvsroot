head	4.10;
access;
symbols
	Debugger-2_02-1:4.10
	Debugger-2_02:4.10
	Debugger-2_01:4.10
	Debugger-2_00:4.10
	Debugger-1_99:4.10
	Debugger-1_98:4.10
	Debugger-1_97:4.10
	Debugger-1_96:4.10
	Debugger-1_95:4.10
	Debugger-1_94:4.10
	Debugger-1_93:4.10
	Debugger-1_92:4.10
	Debugger-1_91:4.10
	Debugger-1_90:4.10
	Debugger-1_89:4.10
	Debugger-1_88:4.10
	Debugger-1_87:4.10
	Debugger-1_86:4.10
	Debugger-1_85:4.10
	Debugger-1_84:4.9
	Debugger-1_83:4.8
	Debugger-1_82:4.8
	Debugger-1_81:4.8
	Debugger-1_80:4.8
	Debugger-1_79:4.8
	Debugger-1_78:4.8
	RO_5_07:4.7
	Debugger-1_77:4.7
	Debugger-1_76:4.6
	Debugger-1_75:4.6
	Debugger-1_74:4.6
	Debugger-1_73:4.6
	Debugger-1_72:4.6
	Debugger-1_71:4.5
	Debugger-1_70:4.5
	Debugger-1_68:4.4
	Debugger-1_67:4.3
	Debugger-1_66:4.3
	Debugger-1_65:4.3
	Debugger-1_64:4.3
	Debugger-1_63:4.2
	dellis_autobuild_BaseSW:4.2
	Debugger-1_62:4.2
	Debugger-1_61:4.2
	Debugger-1_60:4.2
	sbrodie_sedwards_16Mar2000:4.1
	dcotton_autobuild_BaseSW:4.6
	Debugger-1_59:4.1
	Debugger-1_58:4.1
	dcotton_debugger_MPTBuild_14Apr1999:4.1
	dcotton_debugger_MPTInitialBuild:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.6
	Debugger-1_57:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	rthornb_UrsulaBuild_01May1998:4.1
	Daytona:4.1.0.4
	Daytona_bp:4.1
	Ursula:4.1.0.2
	Ursula_bp:4.1;
locks; strict;
comment	@# @;


4.10
date	2013.11.28.01.29.30;	author jlee;	state Exp;
branches;
next	4.9;
commitid	STgm4PaoUxPr0Zex;

4.9
date	2013.10.19.16.54.58;	author rsprowson;	state Exp;
branches;
next	4.8;
commitid	OeaVkZCy9wwHpV9x;

4.8
date	2009.05.17.02.51.46;	author bavison;	state Exp;
branches;
next	4.7;

4.7
date	2004.07.30.13.32.34;	author kbracey;	state Exp;
branches;
next	4.6;

4.6
date	2001.04.30.10.53.56;	author srevill;	state Exp;
branches;
next	4.5;

4.5
date	2001.03.21.15.52.56;	author srevill;	state Exp;
branches;
next	4.4;

4.4
date	2001.03.21.14.04.31;	author srevill;	state Exp;
branches;
next	4.3;

4.3
date	2001.01.31.14.06.09;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	2000.05.02.15.58.44;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	97.05.09.06.11.05;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.10
log
@Add a new, machine-generated VFP/NEON disassembler. Fix some ARMv6/v7 disassembly bugs.
Detail:
  This change adds up-to-date VFP & NEON disassembly to the module, by way of a partially machine-generated disassembler written in C.
  It's also possible to build a standalone disassembler utility (dubbed 'dis2') which is 100% C and has support for all ARM instructions (including some obscure stuff the assembler disassembler currently lacks, e.g. XScale DSP instructions). One day this may completely replace the assembler disassembler, but at the moment it's a bit bulky and probably has a few bugs left to squash. The disassembler is also fairly flexible, supporting various output formatting options.

  Main changes:
  - Makefile - Rewritten to switch over to using the CModule makefile fragment instead of AAsmModule, to allow the C code to be included in the component. Also added 'dis2' as an alternative component to build as.
  - Resources/UK/Messages, Resources/Germany/Messages - Updated with new disassembler messages
  - s/Debugger - Add new UseCVFPNEON switch to allow control over whether the module builds with the C VFP/NEON disassembler or the original assembler VFP disassembler
  - s/CGlue - Glue code used with the C disassembler to bridge the gap between the assembler world and the C world
  - actions/* - A set of decgen action files describing what to do for each instruction the new disassembler supports. These are basically just blocks of C code - although they need to match up with the encoding names in Library/Misc/decgen/encodings
  - cache/* - Folder for decgen to cache decision trees in. Building the decision tree for the disassembler is currently a lengthy process, but caching the trees reduces the build time to a fraction of the full time.
  - c/head - Stub C file that decgen prepends to the code it generates
  - c/main - main frontend for the standalone version of the disassembler
  - c/support - Reimplementation of the standard C library functions required for the disassembler. This allows us to avoid a runtime dependency on the shared C library, and also allows us to deal with control-terminated strings from messagetrans where relevant. For convenience this file also has the main entry point that's called from assembler.
  - c/util - Utility code for outputting various forms of instruction, decoding immediate constants, etc.
  - h/dis2 - Header file for the C code
  - Test/c/testbed - Simple C testbed app to allow the output of dis2 to be compared against the Debugger module and decaof
  - !MkDis2,fd7 - Script to allow easy building of the standalone 'dis2' disassembler
  Bugfixes:
  - s/ARMv6 - Change 'ROR#' to 'ROR #' for UXTAB, etc. disassembly. Fix bitfield extract & clear instructions to detect unpredictable/invalid bitfield definitions
  Misc other changes:
  - s/* - Source files updated so s/Debugger contains a list of GETs instead of each source file LNK'ing to the next
Admin:
  Tested in ROM form on BB-xM, and as softload on Iyonix
  German messages are in need of translation
  Requires Library-1_65 and BuildSys-6_34


Version 1.85. Tagged as 'Debugger-1_85'
@
text
@; Copyright 1997 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; File:    Thumb.s
; Purpose: Disassembly of the Thumb instruction set
; Author:  K Bracey
; History: 10-Oct-96: KJB: created
;          02-May-00: KJB: architecture 5 extensions, fixes

; In    r0 = instruction to disassemble
;       r9 = where it is

; Out   r1 -> core containing string
;       r2 = length of string excluding 0
;       r10,r11 corrupt

ThumbInstruction
	Entry	"R0,R3-R9"

        MOV     R4, R0

        ADR     R0, StringBuffer        ; Always build into temp buffer

	AND	R3,R4,#&F000
	ADD	PC,PC,R3,LSR #10
	NOP
	B	ThumbShiftImm
	B	ThumbAddSub
	B	ThumbAddSubCmpImm
	B	ThumbAddSubCmpImm
	B	ThumbDataProcReg
	B	ThumbLdStReg
	B	ThumbLdStImm
	B	ThumbLdStImm
	B	ThumbLdStHImm
	B	ThumbLdStStack
	B	ThumbAddSPPC
	B	ThumbAdjustSP
	B	ThumbLdStMultiple
	B	ThumbCondBranch
	B	ThumbUncondBranch

ThumbBL
	; arrive here with 1111 xxxx xxxx xxxx
	TestBit	11
	BNE	ThumbBLSuffix

ThumbBLPrefix
	; arrive here with 1111 0xxx xxxx xxxx
	; format is        1111 0ooo oooo oooo
	;
	; ADR R14,address
	;
	; where oooo = top 11-bits of 22-bit signed halfword offset
	AddStr	Adr
	BL	Tab
	AddStr	Lr
	BL	AddComma
	MOV	R8,R4,ASL #32-11
	ADD	R8,R9,R8,ASR #32-11-12
	ADD	R8,R8,#4
	MOV	R2,#32-4
	BL	StoreHex
	B	ThumbInstEnd
BL
	= "BL", 0
BLX
        = "BLX", 0
LRplus
	= "R14,#", 0
        ALIGN
UnknownThumb
	DCB     "M00", 0
UnpredThumb
	DCB	"M65", 0
        ALIGN


ThumbBLSuffix
	; arrive here with 1111 1xxx xxxx xxxx
	; format is        1111 1ooo oooo oooo
	;
	; BL address
	;
	; where oooo = bottom 11-bits of 22-bit signed halfword offset
	AddStr	BL
	BL	Tab
T_BLSuffixCommon
	SUB	R2,R9,#2
	LDR	R3,OldThumbAddress
	TEQS	R2,R3
	BNE	BadThumbBL
	LDR	R5,OldThumbInst
	AND	R6,R5,#2_1111100000000000
	TEQS	R6,#2_1111000000000000
	BNE	BadThumbBL
	MOV	R5,R5,ASL #32-11
	MOV	R5,R5,ASR #32-11-12
	MOV	R3,R4,LSL #32-11
	ADD	R8,R5,R3,LSR #32-11-1
	ADD	R8,R9,R8
	ADD	R8,R8,#2
        TestBit 12                      ; BLX clears bottom bits to word align
        BICEQ   R8,R8,#3
	MOV	R2,#32-4
	BL	StoreHex
	B	ThumbInstEnd
BadThumbBL
	AddStr	LRplus
	MOV	R8,R4,LSL #32-11
	MOV	R8,R8,LSR #32-11-1
	MOV	R2,#12-4
	BL	StoreHex
	B	ThumbInstEnd

ThumbBLXSuffix
        ; arrive here with 1110 1xxx xxxx xxxx
        ; format is        1110 1ooo oooo ooo0
        ;
        ; BLX address
        ;
        ; where oooo = bottom 10-bits of 21-bit signed word offset
        TestBit 0
        BNE     ThumbUndefined

        [ WarnARMv5
        MOV     R10,#Mistake_ARMv5
        STR     R10,Mistake
        ]

        AddStr  BLX
        BL      Tab
        B       T_BLSuffixCommon

ThumbImmediateEnd
	CMPS	R8,#10			; If really simple, just display number
	BLO	TRem_Number		; ie 0..9 unambiguous

	MOV	R2,#8-4			; default is byte
	CMPS	R8,#&100
	MOVHS	R2,#16-4		; then halfword
	CMPS	R8,#&10000
	MOVHS	R2,#32-4		; then fullword
	BL	StoreHex

	CMPS	R8,#8192		; If really big, don't comment on it
	BHS	ThumbInstEnd		; May have VSet from CMP!

	BL	Tab			; Will also insert "; "

	AddChar	"="

TRem_Character
	CMPS	R8,#delete
	CMPNES	R8,#space-1
	BLS	TRem_Number

	CMPS	R8,#&100
	BHS	Rem_Number

	MOV	R10,#quote
	STRB	R10,[R0],#1
	STRB	R8, [R0],#1
	STRB	R10,[R0],#1
	B	ThumbInstEnd

TRem_Number
	BL	StoreDecimal

ThumbInstEnd
        BL      TestMistakes

	STR	R9,OldThumbAddress
	STR	R4,OldThumbInst
	MOV	R14,#0
	STRB	R14,[R0]
	ADR	R1,StringBuffer
	SUBS	R2,R0,R1

	EXIT

ThumbUncondBranch
	; arrive here with 1110 xxxx xxxx xxxx
	; format is        1110 0ooo oooo oooo
	;
	; B address
	;
	; where oooo = 11-bit signed offset (in halfwords)
	TestBit	11
	BNE	ThumbBLXSuffix

	AddChar	"B"
	BL	Tab
	MOV	R8,R4,ASL #32-11
	ADD	R8,R9,R8,ASR #32-11-1
	ADD	R8,R8,#4
	MOV	R2,#32-4
	BL	StoreHex
	B	ThumbInstEnd

	ROUT
ThumbUndefined
	ADR	R10, UnknownThumb
10	BL	lookup_r10
	BL	SaveString
	B	ThumbInstEnd

ThumbUnpredictable
	ADR	R10, UnpredThumb
	B	%B10

ThumbCondBranch
	; arrive here with 1101 xxxx xxxx xxxx
	; format is        1101 cccc oooo oooo
	;
	; B{cond} address
	;
	; where cccc = condition (not AL or NV)
	;       oooo = 8-bit signed offset (in halfwords)
	AND	R2,R4,#2_0000111100000000
	CMPS	R2,#2_0000111000000000
	BHI	ThumbSWI
        BEQ     ThumbUndefined
	AddChar	"B"
	MOV	R2,R2,LSR #8
	ADRL	R1,CondSym
	ADD	R2,R1,R2,LSL #1
	LDRB	R10,[R2],#1
	TEQS	R10,#0
	STRNEB	R10,[R0],#1
	LDRNEB	R10,[R2],#1
	STRNEB	R10,[R0],#1
	BL	Tab
	MOV	R8,R4,ASL #32-8
	MOV	R8,R8,ASR #32-8
	ADD	R8,R9,R8,LSL #1
	ADD	R8,R8,#4
	MOV	R2,#32-4
	BL	StoreHex
	B	ThumbInstEnd

ThumbSWI
	; arrive here with 1101 1111 xxxx xxxx
	; format is        1101 1111 nnnn nnnn
	;
	; SWI <number|name>
	;
	; where nnnn = number
	AddStr	SWItext
	BL	Tab
	MOV	R1,R0
	ADR	R2,StringBuffer+?StringBuffer
	SUB	R2,R2,R1
	AND	R0,R4,#&FF
	SWI	XOS_SWINumberToString
	BVS	ThumbInstEnd
	MOV	R3,#8
	BL	unknown_swis
	ADD	R0,R1,R2
	B	ThumbInstEnd

ThumbLdStMultiple
	; arrive here with 1100 xxxx xxxx xxxx
	; format is        1100 lnnn rrrr rrrr
	;
	; <LDM|STM>IA Rn!,register list
	;
	; where l = <LDMIA|STMIA>
	;     nnn = Rn
	;    rrrr = register list (R0-R7)
	TestStr	11,Ldmia,Stmia
	AND	R5,R4,#2_0000011100000000
	MOV	R5,R5,LSR #8
	BL	Tab_Dis_Register
	AddStr	Bits
	BL	ThumbRegList
	AddChar	"}"
	B	ThumbInstEnd

SWItext	= "SWI", 0
Stmia	= "STMIA", 0
Ldmia	= "LDMIA", 0
Bits	= "!,{", 0
Adr	= "ADR", 0
CommaSPHash
	= ","
SPSPtext
SPHash	= "R13,#", 0
Push	= "PUSH", 0
Pop	= "POP", 0
        ALIGN   4,3
CommaLR	= ","
Lr	= "R14", 0
CommaPC	= ","
Pc	= "PC", 0
Open_B_1
	= ",[", 0
Bkpt    = "BKPT", 0

	ALIGN

ThumbAdjustSP
	; arrive here with 1011 xxxx xxxx xxxx
	TestBit	10
	BNE	ThumbPushPop
	; arrive here with 1011 x0xx xxxx xxxx
	; format is        1011 0000 aiii iiii
	;
	; <ADD|SUB> R13,#imm
	;
	; where a = ADD/~SUB
	;    iiii = 7-bit unsigned immediate offset (words)
	TSTS	R4,#2_0000101100000000
        [ Thumbv6
	BNE	ThumbMisc
        |
	BNE	ThumbUnpredictable
        ]
	TestStr	7,Sub,Add
	BL	Tab
	AddStr	SPSPtext
	AND	R8,R4,#2_0000000001111111
        MOV     R8,R8,LSL #2
	B	ThumbImmediateEnd

;
; Instructions of the form PUSH {R0-R4,LR}
;		           POP {R0,R5-R7}
;
ThumbPushPop
	; arrive here with 1011 x1xx xxxx xxxx
	; format is        1011 l10p rrrr rrrr
	;
	; <PUSH|POP> register list
	;
	; where l = POP/~PUSH
	;       p = PC or LR
	;    rrrr = register list (R0-R7)
	TestBit	9
	BNE	ThumbBKPT
	TestStr	11,Pop,Push
	BL	Tab
	AddChar	"{"
	BL	ThumbRegList
	TestBit	8
	BEQ	%F1
	TSTS	R4,#2_0000000011111111
	BLNE	AddComma
	TestStr	11,Pc,Lr
1
	AddChar	"}"
	B	ThumbInstEnd

ThumbBKPT
        ; arrive here with 1011 x11x xxxx xxxx
        ; format is        1011 1110 nnnn nnnn
        ;
        ; BKPT <number>
        ;
        ; where nnnn = number
        ANDS    R2,R4,#2_1001:SHL:8
        [ Thumbv6
        BEQ     ThumbSETEND
        ]
        TEQS    R2,#2_1000:SHL:8
        BNE     ThumbUnpredictable
        [ WarnARMv5
        MOV     R10,#Mistake_ARMv5
        STR     R10,Mistake
        ]
        AddStr  Bkpt
        BL      Tab
        AND     R8,R4,#&FF
        MOV     R2,#8-4
        BL      StoreHex
        B       ThumbInstEnd

        [ Thumbv6
ThumbSETEND
        ; arrive here with 1011 0110 xxxx xxxx
        ; format is        1011 0110 0101 e000
        ;
        ; SETEND <LE|BE>
        ;
        ; where e = BE/~LE
        AND     R2,R4,#2_11110000
        TEQS    R2,#2_01100000
        TEQNES  R2,#2_01110000
        BEQ     ThumbCPS
        TEQ     R2,#2_01010000
        BNE     ThumbUnpredictable
        [ WarnARMv6
        MOV     R10,#Mistake_ARMv6
        STR     R10,Mistake
        ]
        AddStr  SETENDtext
        BL      Tab
        TestStr 3,BEtext,LEtext
        B       ThumbInstEnd

ThumbCPS
        ; arrive here with 1011 0110 011x xxxx
        ; format is        1011 0110 011d 0aif
        ;
        ; CPS<IE|ID> [a][i][f]
        ;
        ; where d = ID/~IE
        ;       aif = aif
        TestBit 3
        BNE     ThumbUnpredictable
        TSTS    R4,#2_111
        BEQ     ThumbUnpredictable
        [ WarnARMv6
        MOV     R10,#Mistake_ARMv6
        STR     R10,Mistake
        ]
        AddStr  CPSItext
        TestBit 4,"D","E"
        BL      Tab
        TestBit 2,"a"
        TestBit 1,"i"
        TestBit 0,"f"
        B       ThumbInstEnd

ThumbMisc
	; arrive here with 1011 o0oo xxxx xxxx (ooo <> 000)
        AND     R5,R4,#2_0000101100000000
        TEQ     R5,#2_0000001000000000
        BEQ     ThumbExt
        TEQ     R5,#2_0000101000000000
        BEQ     ThumbRev
        B       ThumbUnpredictable

ThumbExt
	; arrive here with 1011 0010 xxxx xxxx
        ; format is        1011 0010 ubmm mddd
        ;
        ; <S|U>EXT<8|16> Rd,Rm
        ;
        ; where  u = Unsigned/~Signed
        ;        b = Byte(8)/~Halfword(16)
        ;      ddd = Rd
        ;      mmm = Rm
        [ WarnARMv6
        MOV     R10,#Mistake_ARMv6
        STR     R10,Mistake
        ]
        TestBit 7,"U","S"
        TestStr 6,Ext8,Ext16
        B       ThumbRdRm

ThumbRev
	; arrive here with 1011 1010 xxxx xxxx
        ; format is        1011 1010 shmm mddd
        ;
        ; REV{16|SH} Rd,Rm
        ;
        ; where   s = Sign-extend
        ;         h = Halfword/~Word
        ;       ddd = Rd
        ;       mmm = Rm
        AND     R5,R4,#2_11000000
        TEQ     R5,#2_10000000
        BEQ     ThumbUnpredictable
        [ WarnARMv6
        MOV     R10,#Mistake_ARMv6
        STR     R10,Mistake
        ]
        AddStr  REVtext
        CMP     R5,#2_01000000
        BLO     ThumbRdRm
        ADREQ   R10,Sixteentext
        ADRHI   R10,SHtext
        BL      SaveString
        B       ThumbRdRm

CPYtext = "CPY", 0
Ext8    = "EXT8", 0
Ext16   = "EXT"
Sixteentext = "16", 0
SHtext  = "SH", 0
        ALIGN
REVtext = "REV", 0
SETENDtext = "SETEND", 0
        ALIGN
BEtext  = "BE", 0
        ALIGN
LEtext  = "LE", 0
CPSItext = "CPSI", 0
        ALIGN
        ] ; Thumbv6

ThumbAddSPPC
	; arrive here with 1010 xxxx xxxx xxxx
	; format is        1010 pddd iiii iiii
	;
	; ADD Rd,R13,#imm
	; ADR Rd,address (ADD Rd,PC,#imm)
	;
	; where p = PC/~SP
	;     ddd = Rd
	;    iiii = 8-bit unsigned immediate offset (words)
	TestBit 11
	BEQ	ThumbADR
	AddStr	Add
	MOV	R5,R4,LSR #8
	AND	R5,R5,#7
	BL	Tab_Dis_Register
	AddStr	CommaSPHash
	AND	R8,R4,#2_0000000011111111
        MOV     R8,R8,LSL #2
	B	ThumbImmediateEnd

ThumbADR
	ADR	R10,Adr
	BL	SaveString
	MOV	R5,R4,LSR #8
	AND	R5,R5,#7
	BL	Tab_Dis_Register
	BL	AddComma
	AND	R8,R4,#2_0000000011111111
	ADD	R8,R9,R8,LSL #2
	ADD	R8,R8,#4
        BIC     R8,R8,#3
	MOV	R2,#32-4
	BL	StoreHex
	B	ThumbInstEnd

ThumbLdStStack
	; arrive here with 1001 xxxx xxxx xxxx
	; format is        1001 lddd iiii iiii
	;
	; <LDR|STR> Rd,[R13,#imm]
	;
	; where l = Load/~Store
	;     ddd = Rd
	;    iiii = 8-bit unsigned immediate offset (words)
	TestStr	11,Ldr_1,Str_1
	AND	R5,R4,#2_0000011100000000
	MOV	R5,R5,LSR #8
	BL	Tab_Dis_Register
	AddStr	Open_B_SP_hash
	AND	R8,R4,#2_0000000011111111
	MOV	R8,R8,LSL #2
	BL	StoreDecimal
	AddChar	"]"
	B	ThumbInstEnd

ThumbLdStHImm
	; arrive here with 1000 xxxx xxxx xxxx
	; format is        1000 liii iinn nddd
	;
	; <LDRH|STRH> Rd,[Rn,#imm]
	;
	; where l = Load/~Store
	;   iiiii = 5-bit unsigned immediate offset (halfwords)
	;     nnn = Rn
	;     ddd = Rd
	TestStr	11,Ldrh,Strh
	MOV	R2,#1		; LDRHs use offset << 1
T_CommonLdStImm
	AND	R5,R4,#2_0000000000000111
	BL	Tab_Dis_Register
	AddStr	Open_B_1
	AND	R5,R4,#2_0000000000111000
	MOV	R5,R5,LSR #3
	BL	Dis_Register
	BL	AddComma
	AddChar	"#"
	AND	R8,R4,#2_0000011111000000
	MOV	R8,R8,LSR #6
	MOV	R8,R8,LSL R2
	BL	StoreDecimal
	AddChar	"]"
	B	ThumbInstEnd

ThumbLdStImm ROUT
	; arrive here with 011x xxxx xxxx xxxx
	; format is        011b liii iinn nddd
	;
	; <LDR|STR>{B} Rd,[Rn,#imm]
	;
	; where b = Byte/~Word
	;	l = Load/~Store
	;   iiiii = 5-bit unsigned immediate (words or bytes depending on B bit)
	;     nnn = Rn
	;     ddd = Rd
	TestStr	11,Ldr_1,Str_1
	TestBit	12,"B"
	MOVEQ	R2,#2		; LDRs use offset << 2
	MOVNE	R2,#0		; LDRBs use offset
	B	T_CommonLdStImm

Open_B_SP_hash
	= ",[R13,#", 0
PC_hash
	= "PC,#", 0
        ALIGN
ThumbLdStRegTable
Str_1	= "STR", 0, 0, 0
Strh	= "STRH", 0, 0
	= "STRB", 0, 0
	= "LDRSB", 0
Ldr_1	= "LDR", 0, 0, 0
Ldrh	= "LDRH", 0, 0
	= "LDRB", 0, 0
	= "LDRSH", 0
Add	= "ADD", 0
Sub	= "SUB", 0
	ALIGN

ThumbLdStReg ROUT
	; arrive here with 0101 xxxx xxxx xxxx
	; format is        0101 lbhm mmnn nddd
	;
	; <LDR|STR>{B|SB|H|SH} Rd,[Rn,Rm]
	;
	; where l = Load/~Store
	;       b = Byte
	;	h = Halfword
	;     mmm = Rm
	;     nnn = Rn
	;     ddd = Rd
	ADR	R10,ThumbLdStRegTable
	AND	R2,R4,#2_0000111000000000
	ADD	R10,R10,R2,LSR #7
	ADD	R10,R10,R2,LSR #8
	BL	SaveString
	AND	R5,R4,#2_0000000000000111
	BL	Tab_Dis_Register
	AddStr	Open_B_1
	AND	R5,R4,#2_0000000000111000
	MOV	R5,R5,LSR #3
	BL	Dis_Register
	AND	R5,R4,#2_0000000111000000
	MOV	R5,R5,LSR #6
	BL	Comma_Dis_Register
	AddChar	"]"
	B	ThumbInstEnd

ThumbOpcodeTable
	= "AND", 0
	= "EOR", 0
	= "LSL", 0
	= "LSR", 0
	= "ASR", 0
	= "ADC", 0
	= "SBC", 0
	= "ROR", 0
	= "TST", 0
	= "NEG", 0
	= "CMP", 0
	= "CMN", 0
	= "ORR", 0
	= "MUL", 0
	= "BIC", 0
	= "MVN", 0

ThumbDataProcReg
	; arrive here with 0100 xxxx xxxx xxxx
	TestBit	11
	BNE	ThumbLoadLiteral
	TestBit 10
	BNE	ThumbSpecialDataProc
	; arrive here with 0100 00xx xxxx xxxx
	; format is        0100 00oo oonn nddd
	;
	; <operation> Rd,Rn
	;
	; where oooo = operation (AND,EOR,LSL, ... ,MUL,BIC,MVN)
	;        nnn = Rn
	;        ddd = Rd
	AND	R10,R4,#2_0000001111000000
	ADR	R1,ThumbOpcodeTable
	ADD	R10,R1,R10,LSR #4
	BL	SaveString
ThumbRdRm
	AND	R5,R4,#2_0000000000000111
	BL	Tab_Dis_Register
	AND	R5,R4,#2_0000000000111000
	MOV	R5,R5,LSR #3
	BL	Comma_Dis_Register
	B	ThumbInstEnd

ThumbHighOpcodeTable
	= "ADD", 0
	= "CMP", 0
	= "MOV", 0
Bx	= "BX", 0
Blx     = "BLX", 0
	ALIGN

ThumbSpecialDataProc
	; arrive here with 0100 01xx xxxx xxxx
	; format is        0100 01oo bann nddd
	;
	; <ADD|CMP|MOV> Rd,Rn
	;
	; where oo = operation (ADD,CMP,MOV)
	;        b = Rd high register
	;        a = Rn high register
	;      nnn = Rn
	;      ddd = Rd
	AND	R10,R4,#2_0000001100000000
	TEQS	R10,#2_0000001100000000
	BEQ	ThumbBX
	TSTS	R4,#2_0000000011000000	; One of the registers must be high
        [ Thumbv6
        BEQ     ThumbSDPNotHigh
        |
	BEQ	ThumbUnpredictable
        ]
	ADR	R1,ThumbHighOpcodeTable
	ADD	R10,R1,R10,LSR #6
	BL	SaveString
	AND	R5,R4,#2_0000000000000111
	TestBit	7
	ADDNE	R5,R5,#8
	BL	Tab_Dis_Register
	MOV	R5,R4,LSR #3
	BL	Comma_Dis_Register
	B	ThumbInstEnd

        [ Thumbv6
ThumbSDPNotHigh
	; arrive here with 0100 01oo 00xx xxxx     R10 = oo
        TEQS    R10,#2_0000001000000000
        BNE     ThumbUnpredictable

ThumbCPY
	; arrive here with 0100 0110 00xx xxxx
        ; format is        0100 0110 00mm mddd
        ;
        ; CPY Rd,Rm
        ;
        ; where mmm = Rm
        ;       ddd = Rd
        [ WarnARMv6
        MOV     R10,#Mistake_ARMv6
        STR     R10,Mistake
        ]

        AddStr  CPYtext
        B       ThumbRdRm
        ]

ThumbBX
	; arrive here with 0100 0111 xxxx xxxx
	; format is        0100 0111 lnnn n000
	;
	; B{L}X Rn
	;
	; where nnnn = Rn
        ;          l = Link
	TSTS	R4,#2_111
	BNE	ThumbUnpredictable
        TestStr 7,Blx,Bx
        [ WarnARMv5
        TestBit 7
        MOVNE   R10,#Mistake_ARMv5
        STRNE   R10,Mistake
        ]
	MOV	R5,R4,LSR #3
	BL	Tab_Dis_Register
	B	ThumbInstEnd

ThumbLoadLiteral
	; arrive here with 0100 1xxx xxxx xxxx
	; format is        0100 1ddd oooo oooo
	;
	; LDR Rd,address
	;
	; where ddd = Rd
	;       ooo = 8-bit unsigned offset
	AddStr	Ldr_1
	AND	R5,R4,#2_0000011100000000
	MOV	R5,R5,LSR #8
	BL	Tab_Dis_Register
	BL	AddComma
	AND	R8,R4,#&00FF
	ADD	R8,R9,R8,LSL #2		; Word offset
	ADD	R8,R8,#4
        BIC     R8,R8,#3
	MOV	R2,#32-4
	BL	StoreHex
	B	ThumbInstEnd

ThumbLargeImmTable
	= "MOV", 0
	= "CMP", 0
	= "ADD", 0
	= "SUB", 0

ThumbAddSubCmpImm ROUT
	; arrive here with 001x xxxx xxxx xxxx
	; format is        001o oddd iiii iiii
	;
	; <MOV|CMP|ADD|SUB> Rd,#imm
	;
	; where oo = operation (MOV,CMP,ADD,SUB)
	;      ddd = Rd
	;      iii = 8-bit unsigned immediate
	ADR	R10,ThumbLargeImmTable
	AND	R1,R4,#2_0001100000000000
	ADD	R10,R10,R1,LSR #9
	BL	SaveString
	AND	R5,R4,#2_0000011100000000
	MOV	R5,R5,LSR #8
	BL	Tab_Dis_Register
	BL	AddComma
	AddChar	"#"
	AND	R8,R4,#2_0000000011111111
	B	ThumbImmediateEnd

ThumbAddSub ROUT
	; arrive here with 0001 xxxx xxxx xxxx
	TestBit	11
	BEQ	ThumbShiftImm
	; arrive here with 0001 1xxx xxxx xxxx
	; format is        0001 1iam mmnn nddd
	;
	; <ADD|SUB> Rd,Rn,Rm
	;           Rd,Rn,#imm
	;
	; where i = Immediate/~Register
	;       a = ADD/~SUB
	;     mmm = Rm or 3-bit immediate
	;     nnn = Rn
	;     ddd = Rd
	TestStr	9,Sub,Add
	AND	R5,R4,#2_0000000000000111
	BL	Tab_Dis_Register
	AND	R5,R4,#2_0000000000111000
	MOV	R5,R5,LSR #3
	BL	Comma_Dis_Register
	TestBit	10
	BEQ	%F1
	BL	AddComma
	AddChar	"#"
	AND	R8,R4,#2_0000000111000000
	MOV	R8,R8,LSR #6
	BL	StoreDecimal
	B	ThumbInstEnd

1	AND	R5,R4,#2_0000000111000000
	MOV	R5,R5,LSR #6
	BL	Comma_Dis_Register
	B	ThumbInstEnd

ThumbShiftTable
	= "LSL", 0
	= "LSR", 0
	= "ASR", 0

ThumbShiftImm ROUT
	; arrive here with 000o oxxx xxxx xxxx
	; where yy <> 11
	;
	; format is        000o oiii iinn nddd
	;
	; <LSL|LSR|ASR> Rd,Rn,#imm
	;
	; where  oo = operation (LSL,LSR,ASR)
	;     iiiii = 5-bit immediate
	;       nnn = Rn
	;       ddd = Rd
	AND	R6,R4,#2_0001100000000000
	ADR	R1,ThumbShiftTable
	ADD	R10,R1,R6,LSR #9
	BL	SaveString
	AND	R5,R4,#2_0000000000000111
	BL	Tab_Dis_Register
	AND	R5,R4,#2_0000000000111000
	MOV	R5,R5,LSR #3
	BL	Comma_Dis_Register
	BL	AddComma
	AddChar	"#"
	AND	R8,R4,#2_0000011111000000
	MOV	R8,R8,LSR #6
	TEQS	R6,#0
	BEQ	%F3
	TEQS	R8,#0		; ASR/LSR #0 means ASR/LSR #32
	MOVEQ	R8,#32
3	BL	StoreDecimal
	B	ThumbInstEnd

	ROUT
ThumbRegList Entry "R2,R5,R6,R8"
	MOV	R5,#0
	MOV	R8,#0
TRL_Cont
	ADD	R2,R5,#1
	TSTS	R2,R4,LSR R2
	BCC	TRL_Next
	TEQS	R8,#0
	BLNE	AddComma
	BL	Dis_Register
	ADD	R5,R5,#1
	CMP	R5,#8
	EXIT	EQ
	ADD	R2,R5,#1
	TSTS	R2,R4,LSR R2
	MOV	R8,#1
	BCC	TRL_Next                   ; If next reg not done, loop
TRL_Count
	ADD	R8,R8,#1
	ADD	R5,R5,#1
	CMPS	R5,#8
	BEQ	TRL_Group
	ADD	R2,R5,#1
	TSTS	R2,R4,LSR R2
	BCS	TRL_Count
TRL_Group
	MOV	R6,#","
	CMPS	R8,#3
	MOVHS	R6,#"-"
	STRB	R6,[R0],#1
	SUB	R5,R5,#1
	BL	Dis_Register
TRL_Next
	ADD	R5,R5,#1
	CMPS	R5,#8
	BNE 	TRL_Cont
TRL_End
	EXIT

	END
@


4.9
log
@Add in disassembly of ARMv6 and ARMv7 instruction sets
The debugger had some embryonic ARMv6 knowhow, switched out due to being incomplete.
Enabling and finishing off ARMv6, then adding ARMv6K, ARMv6T2, ARMv6 security extensions, and ARMv7.
That just leaves
 - ARMv7MP (multiprocessor extensions: PLDW)
 - ARMv7VE (virtualisation extensions: ERET, MRS copro, MSR copro)
 - Advanced SIMD (probably worth thinking about)
 - Thumb2 (questionable why Thumb is supported at all as the tools & OS don't use it)
The syntax follows the pre UAL spirit for the new instructions (cf. ADDCCS versus ADDSCC).
Removed binary V6test binary, replaced with more comprehensive v6/v7 source.
Tested softloaded inspecting the output in StrongEd.

Version 1.84. Tagged as 'Debugger-1_84'
@
text
@d938 1
a938 1
	LNK	s.CodeVar
@


4.8
log
@  Changes to make Debugger more useful on ARMv6/v7
Detail:
  * Added knowledge of the ARMv5TEJ / ARMv6 CPSR flags J, GE[3:0], E and A,
    plus Monitor mode
  * *Memory, *Memory H, *MemoryA and *MemoryA H can now access unaligned
    addresses; the header line in unaligned cases adapts depending on whether
    the CPU natively rotates or does unaligned loads
  * Added *Memory D and *MemoryA D for accessing 64-bit words using LDRD / STRD
  * Removed check for 32-bit mode before doing LDRH - this is nonsensial now
    that there are 32-bit builds for IOMD-class machines. I've decided to let
    it attempt LDRH even on platforms where it might not work or might be an
    undefined instruction - this gets us "closer to the metal", and it's not
    like *Memory couldn't already throw exceptions in normal use
  * Removed redundant clauses of a few build options, it was getting
    impractical to maintain the alternate build variants
Admin:
  Tested on rev B7 beagleboard. Requires an updated kernel in order to be
  able to specify 64-bit values on the command line or interactively (but
  even on older kernels you can enter a value less than 2^32 to *MemoryA D)

Version 1.78. Tagged as 'Debugger-1_78'
@
text
@d325 1
a325 1
        [ ARMv6
d373 1
a373 1
        [ ARMv6
d389 1
a389 1
        [ ARMv6
d502 1
a502 1
        ] ; ARMv6
d719 1
a719 1
        [ ARMv6
d735 1
a735 1
        [ ARMv6
@


4.7
log
@Modified ASCII display in *Memory etc to read memory using the same access
size as the main output. This helps with some hardware registers that only
support, say, word-sized accesses. Note that the memory locations are still
read a second time for the ASCII display, so it's still not ideal for
read-sensitive hardware.

Added some ARMv6 support to disassembly, but this is incomplete and switched
out at the moment.

Version 1.77. Tagged as 'Debugger-1_77'
@
text
@a20 2
	[ Thumb

a937 2
	]

@


4.6
log
@  * Added a couple of tweaks to the MakeMess and MkClean files.
  * Added the Disassemble$Options system variable.
Detail:
  * MakeMess now does a CDir command (in case you run it before
    running MkRom). MkClean now includes a 'stripdepnd' call.

  * There is a new system (code) variable created on module init
    called Disassemble$Options. This controls (at the moment)
    register naming for disassembly.
Admin:
  Tested on RiscOS 4 and 3.70.

Version 1.72. Tagged as 'Debugger-1_72'
@
text
@d327 3
d331 1
d374 5
a378 2
        AND     R2,R4,#&FF00
        TEQS    R2,#2_10111110:SHL:8
d391 115
d690 1
d721 3
d725 1
d736 23
@


4.5
log
@  Optimisation of SWI stuff.
  Changed wacky immediate format.
Detail:
  SWI number stuff now uses an internal routine rather than a call
  to SWI OS_ConvertHex...

  When someone disassembles a wacky immediate, it is represented as
  "<OP> Rd,Rn,#&xx,x" rather than the non-standard
  "<OP> Rd,Rn,#&xx,ROR #x" format. This can then be assembled and
  conforms to ARM's standards.
Admin:
  Tested on RiscPC

  My editor blew-up in the middle of srccommit on Debugger-1_69 so
  don't use that version!

Version 1.70. Tagged as 'Debugger-1_70'
@
text
@d792 1
a792 1
	END
@


4.4
log
@  Modified SWI number output.
  SWI number stuff also implemented in Thumb mode.
Detail:
  Unknown SWIs were dissasembled as an 8 nibble hexadecimal number.
  This has been reduced to a six nibble number (as the top byte is
  always zero).

  The unknown SWI disassembled as a number stuff has also been added
  to Thumb mode disassembly. Only two nibbles are displayed in this
  mode.
Admin:
  Tested on a RiscPC.

Version 1.68. Tagged as 'Debugger-1_68'
@
text
@d270 1
@


4.3
log
@* Added ARMv5TE instructions.
* Fixed disassembly of Thumb high MOV/ADD/CMP instructions.

Version 1.64. Tagged as 'Debugger-1_64'
@
text
@d269 3
a271 2
	SUBVC	R2,R2,#1
	ADDVC	R0,R1,R2
@


4.2
log
@* 32-bit compatibility added.
* New *ShowFPRegs command.
* Added ARMv5 instructions (BLX, CLZ, BKPT, CDP2 et al)
* Handling of instruction extension space adjusted as per ARMv4.
* Fixed some Thumb instructions.
* Added "info" form of LDC and STC.
* NV condition code is now undefined, except for the new instructions using
  it.

Version 1.60. Tagged as 'Debugger-1_60'
@
text
@d588 2
a589 2
	;        b = Rn high register
	;        a = Rd high register
d601 1
a601 1
	TestBit	6
d604 1
a604 4
	AND	R5,R4,#2_0000000000111000
	MOV	R5,R5,LSR #3
	TestBit	7
	ADDNE	R5,R5,#8
d644 1
@


4.1
log
@Lots of bug fixes and extra warnings. Source code tidied.
Thumb disassembly added.
@
text
@d19 1
d59 1
a59 1
	BNE	T_RealBL
d61 1
d80 2
d83 2
a84 1
	= "R14+", 0
d92 1
a92 1
T_RealBL
d101 1
d116 2
d125 1
a125 1
	MOV	R2,#32-4
d129 19
d184 2
d203 1
a203 1
	BNE	ThumbUndefined
d231 1
a231 1
	; where cccc = condition
d234 3
a236 2
	TEQS	R2,#2_0000111100000000
	BEQ	ThumbSWI
d291 5
a295 16
SWItext
	= "SWI", 0
Stmia
	= "STMIA", 0
Ldmia
	= "LDMIA", 0
Bits
	= "!,{", 0
Add
	= "ADD", 0
Sub
	= "SUB", 0
Adr
	= "ADR", 0
SPSPtext
	= "R13"
d298 5
a302 6
SPHash
	= "R13,#", 0
Push
	= "PUSH", 0
Pop
	= "POP", 0
a304 1

d309 2
d320 1
a320 1
	; <ADD|SUB> SP,SP,#imm
d323 1
a323 1
	;    iiii = 7-bit unsigned immediate offset (bytes)
d330 1
d347 1
a347 1
	BNE	ThumbUnpredictable
d361 21
d386 1
a386 1
	; ADD Rd,SP,#imm
d391 1
a391 1
	;    iiii = 8-bit unsigned immediate offset (bytes)
d398 1
a398 2
	BL	AddComma
	AddStr	SP_hash
d400 1
d411 1
a411 1
	ADD	R8,R9,R8
d413 1
d422 1
a422 1
	; <LDR|STR> Rd,[SP,#imm]
d484 1
a484 3
	= ",["
SP_hash
	= "SP,#", 0
d487 1
d497 2
d578 1
d613 1
a613 1
	; format is        0100 0111 0nnn n000
d615 1
a615 1
	; BX Rn
d618 2
a619 1
	TSTS	R4,#2_0000000010000111
d621 6
a626 1
	AddStr	Bx
d652 2
a653 2
	= "MOV", 0		; These two are the same in the ARMv4 book, but I
	= "CMP", 0		; deduce that this must be the correct order.
@

