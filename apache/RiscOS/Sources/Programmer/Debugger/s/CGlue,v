head	4.4;
access;
symbols
	Debugger-2_02-1:4.4
	Debugger-2_02:4.4
	Debugger-2_01:4.4
	Debugger-2_00:4.4
	Debugger-1_99:4.4
	Debugger-1_98:4.4
	Debugger-1_97:4.3
	Debugger-1_96:4.2
	Debugger-1_95:4.2
	Debugger-1_94:4.2
	Debugger-1_93:4.1
	Debugger-1_92:4.1
	Debugger-1_91:4.1
	Debugger-1_90:4.1
	Debugger-1_89:4.1
	Debugger-1_88:4.1
	Debugger-1_87:4.1
	Debugger-1_86:4.1
	Debugger-1_85:4.1;
locks; strict;
comment	@# @;


4.4
date	2016.11.11.22.58.16;	author rsprowson;	state Exp;
branches;
next	4.3;
commitid	qeQW0pSFnTogsLtz;

4.3
date	2016.11.11.22.40.00;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	WFdnDSqoAtC2mLtz;

4.2
date	2016.06.11.09.51.10;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	BcfYDtHjQWGb12az;

4.1
date	2013.11.28.01.29.29;	author jlee;	state Exp;
branches;
next	;
commitid	STgm4PaoUxPr0Zex;


desc
@@


4.4
log
@Add ARMv8 AArch32 disassembly
Opcodes for CRC32/HLT/SEVL/LDA/STL/LDAEX/STLEX and DMB/DSB options.
Makefile:
  Add ARMv8_AArch32 actions and encodings to dis2.
actions/ARMv7,dis2.h:
  Extend the DMS/DSB decoding to warn about ARMv8 specific ones (previously undefined)
ARM.s/ARMv6.s:
  Slot in decode.
CGlue.s/Debugger.s/Messages
  New token for "ARMv8 or later" warnings.

Tested by brute force all 256M instructions in NV space and 256M conditionals, comparing the output against dis2.
Currently missing the new VFP and SIMD opcodes.

Version 1.98. Tagged as 'Debugger-1_98'
@
text
@; Copyright 2013 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; Glue code for connecting the assembler disassembler to the C one

        ; Specify where the relocation offset is relative to SL
        ; This is a negative offset!
        EXPORT  |_Mod$Reloc$Off|
|_Mod$Reloc$Off| * 0

VFP
        ; Call the C code
        BL      call_c_code
        ; Undefined VFP instructions should be treated as regular coprocessor instructions
        B       Coprocessor_NotFP

ASIMD
        ; Call the C code
        BL      call_c_code
        ; Undefined ASIMD instructions are truly undefined
        B       Undefined

call_c_code
        ; Common entry point for when we want to call the C disassembler
        ; Entry:
        ;   R0 -> StringBuffer
        ;   R4 = instruction
        ;   R9 = address
        ; Exit:
        ;   R0 -> end of StringBuffer
        ;   StringBuffer filled in
        ;   exit via InstructionEnd, or return to caller if instruction was undefined
        Entry   "r1-r12"

        ; Prepare arguments for C code
        MOV     r1, r4
        MOV     r2, r9
        ADR     r3, DisRegLabels
        MOV     r4, #?StringBuffer
        Push    "r4"
        ADD     sl, r12, #:INDEX:CRelocOffset ; Store workspace pointer/relocation offset in sl
        MOV     fp, #0
        IMPORT  arm_engine_fromasm
        BL      arm_engine_fromasm
        ADD     sp, sp, #4

        PullEnv
        TEQ     r0, #0
        BNE     InstructionEnd
        ADR     r0, StringBuffer
        MOV     pc, lr

        EXPORT  getmessage
getmessage
        ; Entry:
        ;  R0 = message number
        ; Exit:
        ;  R0 = pointer to string
        Entry   "r10"
        SUB     r12, sl, #:INDEX:CRelocOffset
        ADR     r10, messages
        ADD     r10, r10, r0, LSL #2
        BL      lookup_r10
        MOV     r0, r10
        EXIT

        EXPORT  getwarnmessage
getwarnmessage
        ; Entry:
        ;  R0 = message number
        ; Exit:
        ;  R0 = pointer to string
        Entry   "r10"
        SUB     r12, sl, #:INDEX:CRelocOffset
        ADR     r10, warnmessages
        ADD     r10, r10, r0, LSL #2
        BL      lookup_r10
        MOV     r0, r10
        EXIT

        EXPORT  getarchwarning
getarchwarning
        ; Entry:
        ;  R0 = message number
        ; Exit:
        ;  R0 = pointer to string
        Entry   "r10"
        SUB     r12, sl, #:INDEX:CRelocOffset
        ADR     r10, archwarnings
        ADD     r10, r10, r0, LSL #2
        BL      lookup_r10
        MOV     r0, r10
        EXIT

messages
        = "M00", 0 ; MSG_UNDEFINEDINSTRUCTION
        = "M65", 0 ; MSG_UNPREDICTABLEINSTRUCTION
        = "M00", 0 ; MSG_UNALLOCATEDHINT
        = "M00", 0 ; MSG_PERMAUNDEFINED
        = "M00", 0 ; MSG_UNALLOCATEDMEMHINT
        = "M00", 0 ; MSG_THUMB32 (impossible without Thumb disassembler being enabled)

warnmessages
        = "M80", 0 ; WARN_SUBS_PC_LR
        = "M58", 0 ; WARN_UNPREDICTABLE
        = "M58", 0 ; WARN_UNPREDICTABLE_LT_6
        = "M58", 0 ; WARN_UNPREDICTABLE_GE_7
        = "M81", 0 ; WARN_NONSTANDARD_PC_OFFSET
        = "M82", 0 ; WARN_BAD_DMB_DSB_ISB_OPTION
        = "M55", 0 ; WARN_UNPREDICTABLE_PC_WRITEBACK
        = "M83", 0 ; WARN_LDM_SP
        = "M84", 0 ; WARN_LDM_LR_PC
        = "M83", 0 ; WARN_STM_SP
        = "M85", 0 ; WARN_STM_PC
        = "M85", 0 ; WARN_STC_PC
        = "M64", 0 ; WARN_STM_WB
        = "M85", 0 ; WARN_STR_PC
        = "M86", 0 ; WARN_SWP_SWPB
        = "M58", 0 ; WARN_CPS_NONSTANDARD
        = "M87", 0 ; WARN_BAD_VFP_MRS_MSR
        = "M85", 0 ; WARN_PC_POSTINDEXED

archwarnings
        = "A00", 0 ; ARMv5Tstar
        = "A01", 0 ; ARMv5TEstar
        = "A02", 0 ; ARMv6star
        = "M00", 0 ; ARMv6Tstar (impossible with VFP-only build)
        = "A03", 0 ; ARMv6K
        = "A04", 0 ; ARMv6T2
        = "A05", 0 ; ARMv7
        = "A16", 0 ; ARMv7MP
        = "M00", 0 ; ARMv7VE (impossible with VFP-only build)
        = "M00", 0 ; ARMv7opt (impossible with VFP-only build)
        = "M00", 0 ; SecExt (impossible with VFP-only build)
        = "A14", 0 ; VFP_ASIMD_common
        = "A06", 0 ; VFPv2
        = "A07", 0 ; VFPv3
        = "A08", 0 ; VFPv3HP
        = "A09", 0 ; VFPv4
        = "A10", 0 ; ASIMD
        = "A11", 0 ; ASIMDHFP
        = "A12", 0 ; ASIMDFP
        = "A13", 0 ; ASIMDv2FP
        = "M00", 0 ; FPA (impossible with VFP-only build)
        = "A17", 0 ; XScaleDSP
        = "A18", 0 ; ARMv8

        END
@


4.3
log
@Add XScale DSP disassembly
Three instructions, MIA/MAR/MRA, 14 years late.

Version 1.97. Tagged as 'Debugger-1_97'
@
text
@d158 1
@


4.2
log
@ARMv6/v7 disassembly accuracy improvements, ARMv7MP ARMv7VE additions
ARMv6.s
  Add missing conditionals on DBG.
  Add ERET (v7VE).
  Add MRS/MSR banked (v7VE), and its funky encoding of the banked register.
  Check bit 22 of SRS/RFE properly, otherwise some undefined instructions get wrongly decoded as SRS/RFE.
CGlue.s
  Use prefix 'A' for arch warnings, so they can be kept together in the messages file.
Debugger.s:
  Around line 990, refactor up front decoding to pick out NV instruction space like the ARM ARM says to do. This makes subsequent decoding much simpler to follow, and removes lots of backdoor checks on bits 28-31 scattered later on in the decode - fixes problem with CPS #mode being wrong when bit 4 set.
  Add HVI (v7MP). Note this is a made up pre-UAL form of HVC (cf. SWI->SVC, SMI->SMC) for now.
  Add PLDW (v7VE).
  Put back flags preservation on Conditions routine, otherwise TestStr preserves flags if no conditions are wanted, but doesn't if they are - was causing some of the Saturates family to be misclassified as undefined.
Test/V6V7tests
  Add samples of each of the extra instructions.
Resources/UK/Messages, Resources/Germany/Messages
  Messages files updated.
Tested with 'testbed' over the 256M EQ condition code, plus 256M NV condition code, with no unexplained mismatches.

Version 1.94. Tagged as 'Debugger-1_94'
@
text
@d157 1
a157 1
        = "M00", 0 ; XScaleDSP (impossible with VFP-only build)
@


4.1
log
@Add a new, machine-generated VFP/NEON disassembler. Fix some ARMv6/v7 disassembly bugs.
Detail:
  This change adds up-to-date VFP & NEON disassembly to the module, by way of a partially machine-generated disassembler written in C.
  It's also possible to build a standalone disassembler utility (dubbed 'dis2') which is 100% C and has support for all ARM instructions (including some obscure stuff the assembler disassembler currently lacks, e.g. XScale DSP instructions). One day this may completely replace the assembler disassembler, but at the moment it's a bit bulky and probably has a few bugs left to squash. The disassembler is also fairly flexible, supporting various output formatting options.

  Main changes:
  - Makefile - Rewritten to switch over to using the CModule makefile fragment instead of AAsmModule, to allow the C code to be included in the component. Also added 'dis2' as an alternative component to build as.
  - Resources/UK/Messages, Resources/Germany/Messages - Updated with new disassembler messages
  - s/Debugger - Add new UseCVFPNEON switch to allow control over whether the module builds with the C VFP/NEON disassembler or the original assembler VFP disassembler
  - s/CGlue - Glue code used with the C disassembler to bridge the gap between the assembler world and the C world
  - actions/* - A set of decgen action files describing what to do for each instruction the new disassembler supports. These are basically just blocks of C code - although they need to match up with the encoding names in Library/Misc/decgen/encodings
  - cache/* - Folder for decgen to cache decision trees in. Building the decision tree for the disassembler is currently a lengthy process, but caching the trees reduces the build time to a fraction of the full time.
  - c/head - Stub C file that decgen prepends to the code it generates
  - c/main - main frontend for the standalone version of the disassembler
  - c/support - Reimplementation of the standard C library functions required for the disassembler. This allows us to avoid a runtime dependency on the shared C library, and also allows us to deal with control-terminated strings from messagetrans where relevant. For convenience this file also has the main entry point that's called from assembler.
  - c/util - Utility code for outputting various forms of instruction, decoding immediate constants, etc.
  - h/dis2 - Header file for the C code
  - Test/c/testbed - Simple C testbed app to allow the output of dis2 to be compared against the Debugger module and decaof
  - !MkDis2,fd7 - Script to allow easy building of the standalone 'dis2' disassembler
  Bugfixes:
  - s/ARMv6 - Change 'ROR#' to 'ROR #' for UXTAB, etc. disassembly. Fix bitfield extract & clear instructions to detect unpredictable/invalid bitfield definitions
  Misc other changes:
  - s/* - Source files updated so s/Debugger contains a list of GETs instead of each source file LNK'ing to the next
Admin:
  Tested in ROM form on BB-xM, and as softload on Iyonix
  German messages are in need of translation
  Requires Library-1_65 and BuildSys-6_34


Version 1.85. Tagged as 'Debugger-1_85'
@
text
@d136 3
a138 3
        = "M68", 0 ; ARMv5Tstar
        = "M69", 0 ; ARMv5TEstar
        = "M70", 0 ; ARMv6star
d140 4
a143 4
        = "M71", 0 ; ARMv6K
        = "M72", 0 ; ARMv6T2
        = "M73", 0 ; ARMv7
        = "M00", 0 ; ARMv7MP (impossible with VFP-only build)
d147 9
a155 9
        = "M94", 0 ; VFP_ASIMD_common
        = "M74", 0 ; VFPv2
        = "M77", 0 ; VFPv3
        = "M78", 0 ; VFPv3HP
        = "M79", 0 ; VFPv4
        = "M90", 0 ; ASIMD
        = "M91", 0 ; ASIMDHFP
        = "M92", 0 ; ASIMDFP
        = "M93", 0 ; ASIMDv2FP
@

