head	4.4;
access;
symbols
	Debugger-2_02-1:4.4
	Debugger-2_02:4.4
	Debugger-2_01:4.4
	Debugger-2_00:4.4
	Debugger-1_99:4.4
	Debugger-1_98:4.4
	Debugger-1_97:4.4
	Debugger-1_96:4.4
	Debugger-1_95:4.4
	Debugger-1_94:4.4
	Debugger-1_93:4.4
	Debugger-1_92:4.4
	Debugger-1_91:4.4
	Debugger-1_90:4.4
	Debugger-1_89:4.4
	Debugger-1_88:4.4
	Debugger-1_87:4.4
	Debugger-1_86:4.4
	Debugger-1_85:4.4
	Debugger-1_84:4.3
	Debugger-1_83:4.3
	Debugger-1_82:4.3
	Debugger-1_81:4.3
	Debugger-1_80:4.3
	Debugger-1_79:4.3
	Debugger-1_78:4.3
	RO_5_07:4.3
	Debugger-1_77:4.3
	Debugger-1_76:4.3
	Debugger-1_75:4.3
	Debugger-1_74:4.2
	Debugger-1_73:4.2
	Debugger-1_72:4.2
	Debugger-1_71:4.2
	Debugger-1_70:4.2
	Debugger-1_68:4.2
	Debugger-1_67:4.2
	Debugger-1_66:4.2
	Debugger-1_65:4.2
	Debugger-1_64:4.2
	Debugger-1_63:4.1
	dellis_autobuild_BaseSW:4.1
	dcotton_autobuild_BaseSW:4.2
	Debugger-1_62:4.1;
locks; strict;
comment	@# @;


4.4
date	2013.11.28.01.29.30;	author jlee;	state Exp;
branches;
next	4.3;
commitid	STgm4PaoUxPr0Zex;

4.3
date	2002.12.03.17.50.15;	author bavison;	state Exp;
branches;
next	4.2;

4.2
date	2001.01.31.14.06.09;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	2000.09.08.14.12.34;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Add a new, machine-generated VFP/NEON disassembler. Fix some ARMv6/v7 disassembly bugs.
Detail:
  This change adds up-to-date VFP & NEON disassembly to the module, by way of a partially machine-generated disassembler written in C.
  It's also possible to build a standalone disassembler utility (dubbed 'dis2') which is 100% C and has support for all ARM instructions (including some obscure stuff the assembler disassembler currently lacks, e.g. XScale DSP instructions). One day this may completely replace the assembler disassembler, but at the moment it's a bit bulky and probably has a few bugs left to squash. The disassembler is also fairly flexible, supporting various output formatting options.

  Main changes:
  - Makefile - Rewritten to switch over to using the CModule makefile fragment instead of AAsmModule, to allow the C code to be included in the component. Also added 'dis2' as an alternative component to build as.
  - Resources/UK/Messages, Resources/Germany/Messages - Updated with new disassembler messages
  - s/Debugger - Add new UseCVFPNEON switch to allow control over whether the module builds with the C VFP/NEON disassembler or the original assembler VFP disassembler
  - s/CGlue - Glue code used with the C disassembler to bridge the gap between the assembler world and the C world
  - actions/* - A set of decgen action files describing what to do for each instruction the new disassembler supports. These are basically just blocks of C code - although they need to match up with the encoding names in Library/Misc/decgen/encodings
  - cache/* - Folder for decgen to cache decision trees in. Building the decision tree for the disassembler is currently a lengthy process, but caching the trees reduces the build time to a fraction of the full time.
  - c/head - Stub C file that decgen prepends to the code it generates
  - c/main - main frontend for the standalone version of the disassembler
  - c/support - Reimplementation of the standard C library functions required for the disassembler. This allows us to avoid a runtime dependency on the shared C library, and also allows us to deal with control-terminated strings from messagetrans where relevant. For convenience this file also has the main entry point that's called from assembler.
  - c/util - Utility code for outputting various forms of instruction, decoding immediate constants, etc.
  - h/dis2 - Header file for the C code
  - Test/c/testbed - Simple C testbed app to allow the output of dis2 to be compared against the Debugger module and decaof
  - !MkDis2,fd7 - Script to allow easy building of the standalone 'dis2' disassembler
  Bugfixes:
  - s/ARMv6 - Change 'ROR#' to 'ROR #' for UXTAB, etc. disassembly. Fix bitfield extract & clear instructions to detect unpredictable/invalid bitfield definitions
  Misc other changes:
  - s/* - Source files updated so s/Debugger contains a list of GETs instead of each source file LNK'ing to the next
Admin:
  Tested in ROM form on BB-xM, and as softload on Iyonix
  German messages are in need of translation
  Requires Library-1_65 and BuildSys-6_34


Version 1.85. Tagged as 'Debugger-1_85'
@
text
@; Copyright 2000 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; File:    VFP.s
; Purpose: Disassembly of the Vector Floating Point instruction set
; Author:  K Bracey
; History: 13-Aug-00: KJB: created

VFP
        AddChar "F"

        CMP     r3, #&E
        BEQ     VFP_processing

; VFP Load and Store instructions
        ; arrive here with cccc 110x xxxx xxxx xxxx 101x xxxx xxxx
        ; format is        cccc 110p udwl nnnn dddd 101# iiii iiii
        ;
        ; <FLD|FST><S|D>{cond}            Fd,[Rn,#imm]
        ; <FLDM|FSTM><IA|DB><S|D|X>{cond} Rn{!},{reglist}
        ;
        ; where cccc = condition                     puw
        ;        puw = addressing mode               00x undefined
        ;          # = Double or Mixed/~Single       010 multiple, IA
        ;    dddd(d) = Fd                            011 multiple, IA !
        ;          l = Load/~Store                   1x0 single
        ;       nnnn = Rn                            101 multiple, DB !
        ;       iiii = 8-bit immediate offset        111 undefined

        AND     r14, r4, #2_1101:SHL:21         ; isolate PUW
        CMP     r14, #2_0001:SHL:21
        BLO     VFP_extension
        BEQ     VFP_undefined
        TEQ     r14, #2_1101:SHL:21
        BEQ     VFP_undefined

        TestStr 20,Ld,St

        AND     r10, r4, #2_1001:SHL:21
        TEQ     r10, #2_1000:SHL:21             ; P + ~W?
        BNE     VFP_LdStMultiple

        TestBit 8,"D","S"
        BL      Conditions

        BL      Tab
        BL      Dis_VFP_Fd

        B       CPDT_Common

Ld      = "LD", 0
St      = "ST", 0
Mia     = "MIA", 0
Mdb     = "MDB", 0
        ALIGN

VFP_LdStMultiple
        TestStr 23,Mia,Mdb                      ; increment/offset or decrement?
        TestBit 8,,"S"                          ; single, or
        BEQ     %FT20
        TestBit 0,"X","D"                       ; double/unspecified
20      BL      Conditions
        BL      TabOrPushOver                   ; can be 9 characters!
        MOV     r5, r4, LSR #16
        BL      Dis_Register
        TEQ     r5, #15
        BNE     %FT22
        TestBit 21
        MOVNE   r10, #Mistake_PCwriteback
        STRNE   r10, Mistake
22
        TestBit 21,"!"
        AddStr  CmBrc
        AND     r5, r4, #2_1111:SHL:12          ; start register
        MOV     r5, r5, LSR #11
        TestBit 22
        ORRNE   r5, r5, #1
        BL      Dis_VFP_Register
        AND     r14, r4, #2_11111111            ; offset (number of words to transfer)
        MOV     r1, r14
        TestBit 8
        BICNE   r14, r14, #1                    ; ignore extra word of X form
        SUB     r14, r14, #1
        BICNE   r14, r14, #1                    ; make it an inclusive end register offset
        MOVNE   r1, r1, LSR #1                  ; r1 = number of registers
        TEQ     r1, #0
        BEQ     VFP_unpredictable               ; must be > 0
        ADD     r5, r5, r14                     ; end register
        CMP     r5, #32                         ; don't run off end
        BHS     VFP_unpredictable
        TEQ     r1, #1                          ; if 1 register, that's it
        BEQ     %FT40
        TEQ     r1, #2                          ; comma for 2 registers
        MOVEQ   r10, #","
        MOVNE   r10, #"-"
        STRB    r10, [r0], #1
        BL      Dis_VFP_Register                ; print the final register
40
        AddChar "}"
        B       InstructionEnd

CmBrc   = ",{", 0
Mrrs    = "MRRS", 0
Msrr    = "MSRR", 0
Mrrd    = "MRRD", 0
Mdrr    = "MDRR", 0

        ALIGN

VFP_extension
        ; arrive here with cccc 1100 0x0x xxxx xxxx 101x xxxx xxxx
        ; format is        cccc 1100 010l nnnn dddd 101# 00m1 mmmm
        ;
        ; FMSRR{cond} Rd,Rn,{Sm,Sm+1}
        ; FMRRS{cond} Rd,Rn,{Sm,Sm+1}
        ; FMDRR{cond} Dm,Rd,Rn
        ; FMRRD{cond} Rd,Rn,Dm
        ;
        ; where cccc = condition
        ;          l = Load/~Store (ie load from coprocessor)
        ;          # = Double/~Single
        ;       nnnn = Rn
        ;       dddd = Rd
        ;    mmmm(m) = Fm

        TestBit 22
        BEQ     VFP_undefined
        AND     r14, r4, #2_1101:SHL:4
        TEQ     r14, #2_0001:SHL:4
        BNE     VFP_undefined
        TestBit 8
        BNE     VFP_double_dual_transfer

VFP_single_dual_transfer
        TestStr 20,Mrrs,Msrr,conds
        BL      Tab
        BL      Dis_RdRn
        AddStr  CmBrc
        BL      Dis_VFP_Fm
        ADD     r5, r5, #1
        BL      Comma_Dis_VFP_Register
        TST     r5, #31
        BEQ     VFP_undefined
        AddChar "}"
        B       InstructionEnd

VFP_double_dual_transfer
        TestStr 20,Mrrd,Mdrr,conds
        BL      Tab
        TestBit 20
        BNE     %FT10
        BL      Dis_VFP_Fm
        BL      AddComma
10      BL      Dis_RdRn
        TestBit 20
        BLNE    Comma_Dis_VFP_Fm
        B       InstructionEnd

VFP_processing
        ; arrive here with cccc 1110 xxxx xxxx xxxx 101x xxxx xxxx
        TestBit 4
        BNE     VFP_register_transfer

        ; arrive here with cccc 1110 xxxx xxxx xxxx 101x xxx0 xxxx
        ; format is        cccc 1110 pdqr nnnn dddd 101# nsm0 mmmm
        ;
        ; <Primary op><S|D>{cond} Fd,Fn,Fm
        ; ...
        ;
        ; where cccc = condition
        ;       pqrs = primary opcode
        ;          # = Double/~Single
        ;    nnnn(n) = Fn   (secondary opcode if pqrs = 1111)
        ;    dddd(d) = Fd
        ;    mmmm(m) = Fm

        MOV     r6, #0                  ; piece together the opcode
        TestBit 23
        ORRNE   r6, r6, #2_1000
        AND     r14, r4, #2_11:SHL:20
        ORR     r6, r6, r14, LSR #19
        TestBit 6
        ORRNE   r6, r6, #1
        TEQ     r6, #15
        BEQ     VFP_secondary_data_processing
        CMP     r6, #9
        BHS     VFP_undefined
        ADR     r10, VFP_dp_opc1_table
        ADD     r10, r10, r6, LSL #2
        ADD     r10, r10, r6
        BL      SaveString
        TestBit 8,"D","S"
        BL      Conditions
        BL      TabOrPushOver
        BL      Dis_VFP_Fd
        BL      Comma_Dis_VFP_Fn
        BL      Comma_Dis_VFP_Fm
        B       InstructionEnd

VFP_dp_opc1_table
        = "MAC",0,0
        = "NMAC",0
        = "MSC",0,0
        = "NMSC",0
        = "MUL",0,0
        = "NMUL",0
        = "ADD",0,0
        = "SUB",0,0
        = "DIV",0;,0

VFP_monadic_table
        = "CPY",0
        = "ABS",0
        = "NEG",0
        = "SQRT",0 ; Change entry size to 5 if SQRT not last entry
        ALIGN

VFP_secondary_data_processing
        ; arrive here with cccc 1110 1x11 xxxx xxxx 101x x1x0 xxxx
        ; format is        cccc 1110 1d11 nnnn dddd 101# n1m0 mmmm
        ;
        ; <Secondary op><S|D>{cond} Fd,Fm
        ; ...
        ;
        ; where cccc = condition
        ;          # = Double/~Single
        ;    nnnn(n) = secondary opcode
        ;    dddd(d) = Fd
        ;    mmmm(m) = Fm

        AND     r6, r4, #2_1111:SHL:16
        MOV     r6, r6, LSR #15
        TestBit 7
        ORRNE   r6, r6, #1                      ; r6 = opcode

        CMP     r6, #2_00011                    ; 000xx = monadic
        BLS     VFP_monadic
        CMP     r6, #2_01000
        BLO     VFP_undefined
        CMP     r6, #2_01011                    ; 010xx = compare
        BLS     VFP_compare
        CMP     r6, #2_01111
        BLO     VFP_undefined
        BEQ     VFP_convert_precision           ; 01111 = convert S<->D
        CMP     r6, #2_10001
        BLS     VFP_convert_to_fp               ; 1000x = convert to FP
        CMP     r6, #2_11000
        BLO     VFP_undefined
        CMP     r6, #2_11011
        BLS     VFP_convert_to_int              ; 110xx = convert to int
        B       VFP_undefined

VFP_monadic
        ; arrive here with cccc 1110 1x11 000x xxxx 101x x1x0 xxxx
        ; format is        cccc 1110 1d11 000n dddd 101# n1m0 mmmm
        ;
        ; <FCPY|FABS|FNEG|FSQRT><S|D>{cond} Fd,Fm
        ADR     r10, VFP_monadic_table
        ADD     r10, r10, r6, LSL #2
        BL      SaveString
        TestBit 8,"D","S"
        BL      Conditions
        BL      TabOrPushOver
        BL      Dis_VFP_Fd
        BL      Comma_Dis_VFP_Fm
        B       InstructionEnd

VFP_compare
        ; arrive here with cccc 1110 1x11 010x xxxx 101x x1x0 xxxx
        ; format is        cccc 1110 1d11 010z dddd 101# e1m0 mmmm
        ;
        ; FCMP{E}<S|D>{cond}  Fd,Fm
        ; FCMP{E}Z<S|D>{cond} Fd
        AddStr  Cmp
        TestBit 7,"E"
        TestBit 16,"Z"
        TestBit 8,"D","S"
        BL      Conditions
        BL      TabOrPushOver
        BL      Dis_VFP_Fd
        TestBit 16
        BNE     %FT20
        BL      Comma_Dis_VFP_Fm
        B       InstructionEnd
20
        TST     r4, #2_101111
        BEQ     InstructionEnd          ; I'm following the ARM ARM
        TestBit 5                       ; to the letter here - bit 5
        BNE     VFP_undefined           ; IS 0, bits 0-3 SHOULD BE
        B       VFP_unpredictable       ; zero

VFP_convert_precision
        ; arrive here with cccc 1110 1x11 0111 xxxx 101x 11x0 xxxx
        ; format is        cccc 1110 1d11 0111 dddd 101# 11m0 mmmm
        ;
        ; FCVTDS{cond} Dd,Sm
        ; FCVTSD{cond} Sd,Dm
        AddStr  Cvt
        TestBit 8
        MOVEQ   r10, #"D"
        MOVNE   r10, #"S"               ; First letter is inverse
        STRB    r10, [r0], #1           ; of precision
        EOR     r10, r10, #"D":EOR:"S"  ; Second is opposite
        STRB    r10, [r0], #1
        BL      Conditions
        BL      TabOrPushOver
        EOR     r4, r4, #1:SHL:8        ; Sneakily invert D/S
        BL      Dis_VFP_Fd
        EOR     r4, r4, #1:SHL:8        ; Put it back
        BL      Comma_Dis_VFP_Fm
        B       InstructionEnd

VFP_convert_to_fp
        ; arrive here with cccc 1110 1x11 1000 xxxx 101x x1x0 xxxx
        ; format is        cccc 1110 1d11 1000 dddd 101# s1m0 mmmm
        ;
        ; F<S|U>ITO<S|D>{cond} Fd,Sm
        TestStr 7,Sito,Uito
        TestBit 8,"D","S"
        BL      Conditions
        BL      TabOrPushOver
        BL      Dis_VFP_Fd
        BL      Comma_Dis_VFP_Sm
        B       InstructionEnd

VFP_convert_to_int
        ; arrive here with cccc 1110 1x11 110x xxxx 101x x1x0 xxxx
        ; format is        cccc 1110 1d11 110s dddd 101# z1m0 mmmm
        ;
        ; FTO<U|S>I{Z}<S|D>{cond} Sd,Fm
        AddStr  To
        TestBit 16,"S","U"
        AddChar "I"
        TestBit 7,"Z"
        TestBit 8,"D","S"
        BL      Conditions
        BL      TabOrPushOver
        BL      Dis_VFP_Sd
        BL      Comma_Dis_VFP_Fm
        B       InstructionEnd

Cmp    = "CMP",0
Cvt    = "CVT",0
Sito   = "SITO",0
Uito   = "UI" ;...
To     = "TO",0
        ALIGN

        ROUT
VFP_register_transfer
        ; arrive here with cccc 1110 xxxx xxxx xxxx 101x xxx1 xxxx
        ; format  is       cccc 1110 oool nnnn dddd 101# n001 0000
        TST     r4, #2_11:SHL:5
        BNE     VFP_undefined
        TST     r4, #2_1111
        BNE     VFP_unpredictable
        AND     r6, r4, #2_111:SHL:21
        TestBit 23
        BNE     VFP_system_register_transfer

        CMP     r6, #2_010:SHL:21
        BHS     VFP_undefined
        ; arrive here with cccc 1110 00xx xxxx xxxx 101x x001 0000
        ; format is        cccc 1110 00hl nnnn dddd 101# n001 0000
        ;
        ; FMSR{cond}      Sn,Rd
        ; FMRS{cond}      Rd,Sn
        ; FMD<L|H>R{cond} Dn,Rd
        ; FMRD<L|H>{cond} Rd,Dn

        AddChar "M"
        ADR     r10, VFPRT_table
        AND     r6, r4, #2_11:SHL:20
        TestBit 8
        ORRNE   r6, r6, #1:SHL:19               ; hl#
        LDRB    r14, [r10, r6, LSR #19-2]!
        TEQ     r14, #0
        BEQ     VFP_undefined
        BL      SaveStringConditions
        BL      Tab
        TestBit 20
        BNE     %FT20
        BL      Dis_VFP_Fn
        MOV     r5, r4, LSR #12
        BL      Comma_Dis_Register
        B       InstructionEnd
20      MOV     r5, r4, LSR #12
        BL      Dis_Register
        BL      Comma_Dis_VFP_Fn
        B       InstructionEnd

VFPRT_table
        = "SR",0,0
        = "DLR",0
        = "RS",0,0
        = "RDL",0
        = 0,0,0,0
        = "DHR",0
        = 0,0,0,0
        = "RDH",0
Mrx    = "MRX",0
Mxr    = "MXR",0
Fpsid   = "FPSID",0
Fpscr   = "FPSCR",0
Fpexc   = "FPEXC",0
Fmstat  = "FMSTAT",0
        ALIGN

        ROUT
VFP_system_register_transfer
        ; arrive here with cccc 1110 1xxx xxxx xxxx 101x x001 0000
        ; format is        cccc 1110 111l nnnn dddd 1010 n001 0000
        ;
        ; FMXR{cond} <FPSID|FPSCR|FPEXC>,Rd
        ; FMRX{cond} Rd,<FPSID|FPSCR|FPEXC>
        TEQ     r6, #2_111:SHL:21
        TSTEQ   r4, #1:SHL:8
        BNE     VFP_undefined
        TestStr 20,Mrx,Mxr,conds
        TestBit 20
        BNE     %FT20

        BL      Tab
        BL      Dis_VFP_Sys_Fn
        MOV     r5, r4, LSR #12
        BL      Comma_Dis_Register
        B       InstructionEnd

20      AND     r14, r4, #&FF:SHL:12    ; check for FMSTAT (FMRX PC,FPSCR)
        TEQ     r14, #&1F:SHL:12
        TSTEQ   r4, #1:SHL:7
        BNE     %FT25
        TST     r4, #1:SHL:20
        BEQ     %FT25
        ADR     r0, StringBuffer
        AddStr  Fmstat,,conds
        B       InstructionEnd

25      MOV     r5, r4, LSR #12
        BL      Tab_Dis_Register
        BL      AddComma
        BL      Dis_VFP_Sys_Fn
        B       InstructionEnd

Dis_VFP_Sys_Fn
        TestBit 7
        BNE     VFP_undefined
        AND     r5, r4, #2_1111:SHL:16
        MOV     r10, #0
        CMP     r5, #2_0001:SHL:16
        ADRLO   r10, Fpsid
        ADREQ   r10, Fpscr
        TEQ     r5, #2_1000:SHL:16
        ADREQ   r10, Fpexc
        TEQ     r10, #0
        BNE     SaveString
        B       VFP_undefined


Comma_Dis_VFP_Register
        AddChar ","
Dis_VFP_Register
        CLC
        AND     r8, r5, #2_11111
        TestBit 8,"D","S"
        MOVNES  r8, r8, LSR #1
        BCC     StoreDecimal
        B       VFP_undefined

Dis_VFP_Fd
        AND     r5, r4, #2_1111:SHL:12
        MOV     r5, r5, LSR #11
        TestBit 22
        ORRNE   r5, r5, #1
        B       Dis_VFP_Register

Comma_Dis_VFP_Fn
        AddChar ","
Dis_VFP_Fn
        AND     r5, r4, #2_1111:SHL:16
        MOV     r5, r5, LSR #15
        TestBit 7
        ORRNE   r5, r5, #1
        B       Dis_VFP_Register

Comma_Dis_VFP_Fm
        AddChar ","
Dis_VFP_Fm
        MOV     r5, r4, LSL #1
        TestBit 5
        ORRNE   r5, r5, #1
        B       Dis_VFP_Register

Dis_VFP_S_Register
        AddChar "S"
        AND     r8, r5, #2_11111
        B       StoreDecimal

Dis_VFP_Sd
        AND     r5, r4, #2_1111:SHL:12
        MOV     r5, r5, LSR #11
        TestBit 22
        ORRNE   r5, r5, #1
        B       Dis_VFP_S_Register

Comma_Dis_VFP_Sm
        AddChar ","
Dis_VFP_Sm
        MOV     r5, r4, LSL #1
        TestBit 5
        ORRNE   r5, r5, #1
        B       Dis_VFP_S_Register

VFP_unpredictable
VFP_undefined
        ADR     r0, StringBuffer
        B       Coprocessor_NotFP

        END
@


4.3
log
@  Merged in Kevin's latest version, as featured in OS release 5.00.
Detail:
  * Added Q bit to *ShowRegs
  * Added FMSRR, FMRRS, FMDRR and FMRRD to VFP support
  * Shortened lots of VFP literals by treating common "F" prefix separately
  * Cirrus DSP support (switched out)
  * Piccolo support (not even linked in)
  * ARM/Thumb disassembly test programs added
  * Bugfix: code variable init code was trashing the flags that indicated
    whether zero page branch table (used for breakpoints in 32-bit mode) needs
    creating
Admin:
  Builds identical binary to 5.00 release, repository changes were build-
  related only.

Version 1.75. Tagged as 'Debugger-1_75'
@
text
@d530 1
a530 1
        LNK     s.Thumb
@


4.2
log
@* Added ARMv5TE instructions.
* Fixed disassembly of Thumb high MOV/ADD/CMP instructions.

Version 1.64. Tagged as 'Debugger-1_64'
@
text
@d21 2
d43 2
a44 1
        BLS     VFP_undefined
d48 1
a48 1
        TestStr 20,Fld,Fst
d62 6
a112 4
Fld     = "FLD", 0
Fst     = "FST", 0
Mia     = "MIA", 0
Mdb     = "MDB", 0
d114 4
d121 49
d201 1
a201 1
        ADD     r10, r10, r6, LSL #1
d212 9
a220 9
        = "FMAC",0,0
        = "FNMAC",0
        = "FMSC",0,0
        = "FNMSC",0
        = "FMUL",0,0
        = "FNMUL",0
        = "FADD",0,0
        = "FSUB",0,0
        = "FDIV",0;,0
d223 4
a226 4
        = "FCPY",0,0
        = "FABS",0,0
        = "FNEG",0,0
        = "FSQRT",0
a270 1
        ADD     r10, r10, r6, LSL #1
d285 1
a285 1
        AddStr  Fcmp
d309 1
a309 1
        AddStr  Fcvt
d329 1
a329 1
        TestStr 7,Fsito,Fuito
d342 1
a342 1
        AddStr  Fto
d353 5
a357 5
Fcmp    = "FCMP",0
Fcvt    = "FCVT",0
Fsito   = "FSITO",0
Fuito   = "FUITO",0
Fto     = "FTO",0
d382 1
a382 1
        AddStr  Fm
a402 1
Fm      = "FM",0
d412 2
a413 2
Fmrx    = "FMRX",0
Fmxr    = "FMXR",0
d430 1
a430 1
        TestStr 20,Fmrx,Fmxr,conds
@


4.1
log
@* Disassembly of VFP instruction set added.
* Changed invalid instruction to &E7FFFFFF (as per ARM
  recommendation that &E7FxxxFx should be used)
* Branch disassembly changed - when running on a
  26-bit systems, branch instructions in the lower
  64M will be wrapped within 64M, but branches
  above 64M will not.
* PC-relative LDRH family instructions calculated
  target address incorrectly.

Version 1.62. Tagged as 'Debugger-1_62'
@
text
@d31 7
a37 7
        ; where cccc = condition
        ;        puw = addressing mode
        ;          # = Double or Mixed/~Single
        ;    dddd(d) = Fd
        ;          l = Load/~Store
        ;       nnnn = Rn
        ;       iiii = 8-bit immediate offset
@

