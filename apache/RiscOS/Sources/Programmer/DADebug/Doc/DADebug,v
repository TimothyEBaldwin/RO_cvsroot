head	1.4;
access;
symbols
	DADebug-0_10:1.4
	DADebug-0_09:1.4
	DADebug-0_08:1.4
	DADebug-0_07:1.3
	DADebug-0_06:1.3
	DADebug-0_05:1.2
	DADebug-0_04:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2012.06.03.13.56.07;	author jlee;	state Exp;
branches;
next	1.3;
commitid	TAIWDexN6ObPAg7w;

1.3
date	2010.11.25.19.25.45;	author jlee;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.02.19.28.08;	author jlee;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.01.15.45.01;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.02.01.15.45.01;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Add SWIs for *DADPrint and *DADReset
Detail:
  s/DADebug - Added DADebug_Print and DADebug_Reset SWIs, to provide an alternate way of issuing *DADPrint/*DADReset
  Doc/DADebug - Updated docs
Admin:
  Tested in BCM2835 ROM


Version 0.08. Tagged as 'DADebug-0_08'
@
text
@DADebug 0.08
============

This is a simple module, designed to store debug output in a dynamic area for
later retrieval. This is particularly of use in speed critical code, where the
time overhead of other methods (eg writing to a file) would be a problem.
The character output routine is accessed via a direct branch into the module
code, to further reduce overheads.

Support for DADebug is included in Hdr:NdrDebug and DebugLib.

SWIs
^^^^
DADebug_GetWriteCAddress (SWI &531C0)

This returns the address of the character output routine in R0. The routine
should be entered in a privileged mode, with the character to store in R0 and a
return address (including PSR bits) in R14. When the dynamic area is full, the
write pointer is wrapped around.

The direct access routine is APCS compliant, and may be considered to have the
prototype:

  void DADWriteC (char c);

DADebug_Print (SWI &531C1)

This is equivalent to *DADPrint

DADebug_Reset (SWI &531C2)

This is equivalent to *DADReset

* Commands
^^^^^^^^^^
*DADPrint writes the current contents of the debug dynamic area to the screen.
Only complete lines (ie those that have not been overwritten if the write
pointer has wrapped around) are output.

*DADReset clears the dynamic area of all but the initial "Debug start" line
(which is there to assure you that wraparound has not occurred).


Ben Avison, 28 Oct 1999
Jeffrey Lee, 3 Jun 2012
@


1.3
log
@Make DADebug run from ROM properly
Detail:
  !MkRom,fd7, Makefile, Doc/DADebug, s/DADebug - Removed the ROMSupport hack and replaced with a new system that allows the module to function immediately after initialisation instead of having to wait for the next callback.
  The module now uses workspace to store its variables, and the DADWriteC routine is stored as part of that workspace, allowing DADWriteC to function even though it doesn't get passed a workspace pointer.
Admin:
  Tested in Iyonix ROM build


Version 0.06. Tagged as 'DADebug-0_06'
@
text
@d1 1
a1 1
DADebug 0.06
d14 6
a19 5
A single SWI, DADebug_GetWriteCAddress (SWI &531C0) is provided. This returns
the address of the character output routine in R0. The routine should be
entered in SVC or IRQ mode, with the character to store in R0 and a return
address (including PSR bits) in R14. When the dynamic area is full, the write
pointer is wrapped around.
d26 8
d45 1
a45 1
Jeffrey Lee, 25 Nov 2010@


1.2
log
@Fix DADebug to build properly with objasm, add initial support for running from ROM
Detail:
  Makefile - rewritten using makefile fragments, added ROMSupport option
  !MkRam, !MkRom - updated to correctly build RAM/ROM versions of module
  s/DADebug - Added an AREA to keep objasm happy. Added initial, hacky ROM support (compare PC against hardcoded ROM start address & relaunch module from RAM if we think we're in ROM). Added builtin ability to automatically call *DADPrint every 60 seconds, for situations where keyboard input isn't possible
  Doc/DADebug - Updated with notes about running from ROM
Admin:
  Tested on Rev C2 beagleboard


Version 0.05. Tagged as 'DADebug-0_05'
@
text
@d1 1
a1 1
DADebug 0.05
a33 5
ROM support
^^^^^^^^^^^

Version 0.05 now has (some) support for running from ROM. On HAL32 systems, passing the "ROMSupport=TRUE" option to AMU will enable some code that performs a rudimentary "Am I in ROM?" check by comparing the PC against the ROM start addresss (as defined in the kernel source). If the module thinks it is in ROM, it will schedule a callback that will re-initialise the module in RAM, and then exit with an error (to ensure the ROM version won't get used by any other modules)

d36 1
a36 1
Jeffrey Lee, 2 Jul 2009@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
DADebug 0.02
d34 5
d41 1
@


1.1.1.1
log
@  Initial import of DADebug module into CVS.
Detail:
  Made the module 32-bit compatible, and decided it was about time it was in
  CVS, since I've been using it for the last 2 years.
Admin:
  There are accompanying tweaks to DebugLib to use this module, but I've not
  checked those in yet.

Version 0.04. Tagged as 'DADebug-0_04'
@
text
@@
