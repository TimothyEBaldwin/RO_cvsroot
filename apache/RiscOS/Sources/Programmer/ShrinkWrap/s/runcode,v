head	1.3;
access;
symbols
	ShrinkWrap-0_07:1.3
	ShrinkWrap-0_06-2:1.3
	ShrinkWrap-0_06:1.3
	dellis_autobuild_BaseSW:1.2
	ShrinkWrap-0_05:1.2
	ShrinkWrap-0_04:1.2
	sbrodie_sedwards_16Mar2000:1.1
	dcotton_autobuild_BaseSW:1.2
	ShrinkWrap-0_03:1.1
	nturton_ShrinkWrap-0_02:1.1
	Spin_merge:1.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	Ursula_RiscPC:1.1.0.8
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	rthornb_UrsulaBuild_01May1998:1.1
	afrost_Funai01-33:1.1.1.1
	afrost_NC2_Generic:1.1.1.1
	Spinner_RCA116:1.1.1.1
	Spinner_B20_2:1.1.1.1
	Spinner_19_3:1.1.1.1
	Spinner_B18:1.1.1.1
	Spinner_B17:1.1.1.1
	Spinner_B15:1.1.1.1
	Spinner_B14:1.1.1.1
	Spinner_B13:1.1.1.1
	Spinner_B12:1.1.1.1
	Spinner_B10:1.1.1.1
	Daytona:1.1.0.6
	Daytona_bp:1.1
	Ursula:1.1.0.4
	Ursula_bp:1.1
	Spinner_B7:1.1.1.1
	ARTtmp_merge:1.1.1.1
	Spin_3Apr97:1.1.1.1
	RCA_bp:1.1
	RCA:1.1.0.2
	ARTtmp:1.1.1.1.0.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2003.12.16.18.39.19;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.05.08.20.45;	author sbrodie;	state Exp;
branches;
next	1.1;

1.1
date	97.03.19.14.15.18;	author scormie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.19.14.15.18;	author scormie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@No longer relies upon headers defining SVCSTK.
Added install rule.

Retagged as 'ShrinkWrap-0_06'
@
text
@; Copyright 1997 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; s.runcode

        GET   Hdr:ListOpts
        GET   Hdr:Macros
        GET   Hdr:System
        GET   Hdr:Machine.<Machine>
        GET   Hdr:HighFSI
        GET   Hdr:PublicWS
        GET   Hdr:APCS.<APCS>

        AREA  SRASM, CODE, READONLY, PIC

; _kernel_oserror * runcode(int exec,char * commandtail,char * commandname);
        EXPORT runcode
runcode
        FunctionEntry "v1-v6",MakeFrame

        SUBS    r3,r2,#0   ; MOV R3,R2, setting carry for TEQ
        TEQ     pc,pc      ; set Z if in a 32-bit mode
        BICNE   r2,r0,#&FC000003
        MOV     r0,#FSControl_StartApplication
        SWI     XOS_FSControl
        Return  "v1-v6", fpbased, VS

        ; Find the top of the SVC stack
        MOV     r0, #6
        MOV     r1, #0
        MOV     r2, #16
        SWI     XOS_ReadSysInfo         ; politely read SVCSTK from Kernel
        MOVVSS  r2, #0
        TEQVC   r2, #0
        MOVNE   r13, r2
        LDREQ   r13,=&01C02000          ; brute force read if polite failed

        WritePSRc USR_mode,r0
        MOV     r0, r0
        MOV     r12, #&80000000
        MOV     r13, #&80000000
        MOV     r14, pc
        MOV     pc, r2
        SWI     OS_Exit
        ; Does not return

; _kernel_oserror * runtrans(int exec,int codesize,
;                            char * commandtail,char * commandname);

        EXPORT runtrans
runtrans
        FunctionEntry "v1-v6", MakeFrame
        STMDB   sp!,{sl,fp,ip}

        WritePSRc USR_mode, ip
        MOV     r0, r0
        ADD     ip, a1, a2      ; R12 = base of 1K workspace
        ADD     sp, ip, #&400   ; R13 = top of workspace (stach)
        MOV     v1, a1          ; execution address parked in R4 temporarily
        MOV     a1, a4          ; set up command name in R0
        MOV     a2, a3          ; set up command tail in R1
        MOV     lr, pc          ; set up return address
        MOV     pc, v1          ; go go go
        MOVVC   a1, #0          ; no error, set return value to zero
        MOV     a2, pc          ; save flags in R1 for no apparent reason
        SWI     XOS_EnterOS     ; return to SVC mode

        LDMIA   sp!,{sl,fp,ip}  ; restore from SVC stack
        Return "v1-v6", fpbased ; exit APCS function

        END
@


1.2
log
@32-bit compatible.

Version 0.04. Tagged as 'ShrinkWrap-0_04'
@
text
@d47 1
a47 1
        LDREQ   r13,=SVCSTK             ; brute force read if polite failed
@


1.1
log
@Initial revision
@
text
@d15 1
a15 3
;->s.runcode
;
;
d17 7
d25 1
a25 71
R0 RN 0
R1 RN 1
R2 RN 2
R3 RN 3
R4 RN 4
R5 RN 5
R6 RN 6
R7 RN 7
R8 RN 8
R9 RN 9
R10 RN 10
R11 RN 11
R12 RN 12
R13 RN 13
R14 RN 14
R15 RN 15
PC  RN 15


a1 RN 0
a2 RN 1
a3 RN 2
a4 RN 3
v1 RN 4
v2 RN 5
v3 RN 6
v4 RN 7
v5 RN 8
v6 RN 9
sl RN 10
fp RN 11
ip RN 12
sp RN 13
lk RN 14
lr RN 14
pc RN 15

f0 FN 0
f1 FN 1
f2 FN 2
f3 FN 3
f4 FN 4
f5 FN 5
f6 FN 6
f7 FN 7





 AREA  SRASM, CODE



OS_Exit                 * &000011
OS_FSControl            * &000029
OS_EnterOS              * &000016


XOS_MASK   * &00020000 ; mask to make a swi a RISC OS V-error SWI

XOS_FSControl * OS_FSControl :OR: XOS_MASK
XOS_EnterOS   * OS_EnterOS   :OR: XOS_MASK



; ****************************************************************************


 EXPORT runcode

d28 1
a28 1

d30 1
d32 25
a56 37
 MOV   ip,sp
 STMFD sp!,{v1-v6,fp,ip,lk,pc}
 SUB   fp,ip,#4

 MOV   r3,r2

 MOV   r2,r0
 BIC   r2,r2,#&FC000003

 MOV   r0,#2

 SWI   XOS_FSControl
 BVS   runerror

 LDR   r13,InitSVCStack

 TEQP  pc,#0
 MOV   r0,r0
 MOV   r12,#&80000000
 MOV   r13,#&80000000
 MOV   r14,pc
 MOV   pc,r2
 MOV   r0,r0
 SWI   OS_Exit


runerror
 LDMEA fp,{v1-v6,fp,sp,pc}^


InitSVCStack
 DCD   &01C02000



 EXPORT runtrans

d61 1
d63 2
d66 12
a77 33
 MOV     ip,sp
 STMFD   sp!,{v1-v6,fp,ip,lk,pc}
 SUB     fp,ip,#4

 STMDB   sp!,{sl,fp,ip}
 TEQP    pc,#0 
 MOV     a1,a1

 MOV     ip,a1
 ADD     ip,ip,a2
 ADD     sp,ip,#&400

 MOV     v1,a1

 MOV     a1,a4
 MOV     a2,a3

 ADR     lk,transreturn
 MOV     pc,v1


transreturn

 MOVVC   a1,#0
 MOV     a2,pc
 SWI     XOS_EnterOS
 LDMIA   sp!,{sl,fp,ip}

 LDMEA   fp,{v1-v6,fp,sp,pc}^


 END

d79 2
d82 1
@


1.1.1.1
log
@Initial version.

@
text
@@
