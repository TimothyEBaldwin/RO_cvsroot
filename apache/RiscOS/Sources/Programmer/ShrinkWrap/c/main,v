head	1.3;
access;
symbols
	ShrinkWrap-0_07:1.3
	ShrinkWrap-0_06-2:1.3
	ShrinkWrap-0_06:1.2
	dellis_autobuild_BaseSW:1.2
	ShrinkWrap-0_05:1.2
	ShrinkWrap-0_04:1.1
	sbrodie_sedwards_16Mar2000:1.1
	dcotton_autobuild_BaseSW:1.2
	ShrinkWrap-0_03:1.1
	nturton_ShrinkWrap-0_02:1.1
	Spin_merge:1.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	Ursula_RiscPC:1.1.0.8
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	rthornb_UrsulaBuild_01May1998:1.1
	afrost_Funai01-33:1.1.1.1
	afrost_NC2_Generic:1.1.1.1
	Spinner_RCA116:1.1.1.1
	Spinner_B20_2:1.1.1.1
	Spinner_19_3:1.1.1.1
	Spinner_B18:1.1.1.1
	Spinner_B17:1.1.1.1
	Spinner_B15:1.1.1.1
	Spinner_B14:1.1.1.1
	Spinner_B13:1.1.1.1
	Spinner_B12:1.1.1.1
	Spinner_B10:1.1.1.1
	Daytona:1.1.0.6
	Daytona_bp:1.1
	Ursula:1.1.0.4
	Ursula_bp:1.1
	Spinner_B7:1.1.1.1
	ARTtmp_merge:1.1.1.1
	Spin_3Apr97:1.1.1.1
	RCA_bp:1.1
	RCA:1.1.0.2
	ARTtmp:1.1.1.1.0.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2009.06.11.21.46.52;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.12.18.11.48;	author srevill;	state Exp;
branches;
next	1.1;

1.1
date	97.03.19.14.15.16;	author scormie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.19.14.15.16;	author scormie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  #include file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both Norcroft and GCC.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 0.06. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*->c.main */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>


#include "kernel.h"
#include "swis.h"


#include "etc.h"

#include "err.h"

#include "mem.h"
#include "flex.h"
#include "vectors.h"
#include "scrap.h"
#include "fs.h"

#include "find.h"
#include "file.h"
#include "command.h"
#include "buffer.h"
#include "deflate.h"

#include "main.h"



       void * xprivate_word;
       int    active;



_kernel_oserror *ShrinkWrapSwi(int swi_number,_kernel_swi_regs *r,
                                                       void *private_word)
{
 _kernel_oserror * err;

 err=NULL;

 switch(swi_number)
 {
   case 0:
          err=memman(r);
          break;

   case 1:
          err=zipman(r);
          break;

   case 2:
          err=commandman(r);
          break;




  default:
          err=&mb_nfserr_DummyFSDoesNothing;
          break;
 }

 return(err);

 USE(private_word);
}






static void ShrinkWrapFinalise(void)
{
 closeallfiles();
 scrapfinit();
 memfinish();
 filefinit();
 releasevectors(xprivate_word);

}






_kernel_oserror * ShrinkWrapInitialise(char *cmd_tail,int podule_base,
                                                   void *private_word)
{
 _kernel_oserror * err;

 xprivate_word=private_word;
 active=0;

 err=meminit();

 if(!err)
 {
  err=claimvectors(private_word);

  if(!err)
  {
   scrapinit();
   findinit();
   commandinit();
   initdeflate();
   fileinit();

   atexit(ShrinkWrapFinalise);
  }
 }

 return(err);

 USE(cmd_tail);
 USE(podule_base);
}



#define Service_DyanmicAreaRenumber 0x92
#define Service_DiscDismounted      0x7D
#define Service_Reset               0x27




void ShrinkWrapService(int service_number,_kernel_swi_regs *r,
                                                  void *private_word)
{

 switch(service_number)
 {

  case Service_DyanmicAreaRenumber:
  {
   dynamicrenumber(r);
   break;
  }
  case Service_Reset:
  {
   if (active)    (void)releasevectors(private_word);
   if (active==0) (void)claimvectors(private_word);
   break;
  }

 }

 USE(private_word);
}






#define MAXARG 8
#define CLEN   256

static char command[CLEN];


_kernel_oserror *ShrinkWrapCommand(char *arg_string,int argc,int cmd_no,
                                                  void *private_word)
{
 _kernel_oserror  * err;
 char             * args[MAXARG];
 char             * temptr;
 int                i;
 int                whitespace;


 err=NULL;

 temptr=command;

 for(;temptr-command<CLEN && *arg_string>=' ';arg_string++)
 {
  *(temptr++)=*arg_string;
 }

 *temptr='\0';

 arg_string=command;
 temptr=command;
 whitespace=1;
 i=0;

 while(1)
 {
  if(whitespace)
  {
   if(*temptr==0) break;
   else
   if(*temptr!=32)
   {
    args[i++]=temptr;
    whitespace=0;
   }
  }
  else
  {
   if(*temptr==0) break;
   else
   if(*temptr==32)
   {
    whitespace=1;
    *temptr=0;
   }
  }
  temptr++;
 }



 switch(cmd_no)
 {
  case 0:
         err=addzone(args,i);
         break;

  case 1:
         err=remzone(args,i);
         break;

  case 2:
         err=showzone(args,i);
         break;

  case 3:
         err=addtype(args,i);
         break;

  case 4:
         err=remtype(args,i);
         break;

  case 5:
         err=showtype(args,i);
         break;

  case 6:
         err=setmemorysize(args,i);
         break;

  case 7:
         err=setstrength(args,i);
         break;

  case 8:
          err=compressfile(args);
          break;

  case 9:
          err=uncompressfile(args);
          break;

  case 10:
          err=setstate(1);
          break;

  case 11:
          err=setstate(0);
          break;


 }


 return(err);

 USE(argc);
 USE(private_word);
}





@


1.2
log
@  Fixed long-standing failure of ROMmed versions of this module.
Detail:
  If this module was placed into ROM, it would need an RMReInit at
  some point before it would start to work.

  This is because FileSwitch ends up on the various vectors before
  ShrinkWrap because it correctly releases and re-claims it's
  vectors on Service_Reset.

  ShrinkWrap now does likewise and works without being reinited.
Admin:
  Tested in STB-400 ROM build 19.

Version 0.05. Tagged as 'ShrinkWrap-0_05'
@
text
@d27 1
a27 1
#include "h.etc"
d29 1
a29 1
#include "h.err"
d31 11
a41 11
#include "h.mem"
#include "h.flex"
#include "h.vectors"
#include "h.scrap"
#include "h.fs"

#include "h.find"
#include "h.file"
#include "h.command"
#include "h.buffer"
#include "h.deflate"
d43 1
a43 1
#include "h.main"
@


1.1
log
@Initial revision
@
text
@d142 1
d155 10
a164 2
                                   dynamicrenumber(r);
                                   break;
d224 1
a224 1
   if(*temptr==32) 
@


1.1.1.1
log
@Initial version.

@
text
@@
