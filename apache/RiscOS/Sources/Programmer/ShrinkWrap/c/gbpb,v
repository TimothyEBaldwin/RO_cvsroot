head	1.2;
access;
symbols
	ShrinkWrap-0_07:1.2
	ShrinkWrap-0_06-2:1.2
	ShrinkWrap-0_06:1.1
	dellis_autobuild_BaseSW:1.1
	ShrinkWrap-0_05:1.1
	ShrinkWrap-0_04:1.1
	sbrodie_sedwards_16Mar2000:1.1
	dcotton_autobuild_BaseSW:1.1
	ShrinkWrap-0_03:1.1
	nturton_ShrinkWrap-0_02:1.1
	Spin_merge:1.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	Ursula_RiscPC:1.1.0.8
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	rthornb_UrsulaBuild_01May1998:1.1
	afrost_Funai01-33:1.1.1.1
	afrost_NC2_Generic:1.1.1.1
	Spinner_RCA116:1.1.1.1
	Spinner_B20_2:1.1.1.1
	Spinner_19_3:1.1.1.1
	Spinner_B18:1.1.1.1
	Spinner_B17:1.1.1.1
	Spinner_B15:1.1.1.1
	Spinner_B14:1.1.1.1
	Spinner_B13:1.1.1.1
	Spinner_B12:1.1.1.1
	Spinner_B10:1.1.1.1
	Daytona:1.1.0.6
	Daytona_bp:1.1
	Ursula:1.1.0.4
	Ursula_bp:1.1
	Spinner_B7:1.1.1.1
	ARTtmp_merge:1.1.1.1
	Spin_3Apr97:1.1.1.1
	RCA_bp:1.1
	RCA:1.1.0.2
	ARTtmp:1.1.1.1.0.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2009.06.11.21.46.51;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	97.03.19.14.15.15;	author scormie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.19.14.15.15;	author scormie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  #include file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both Norcroft and GCC.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 0.06. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*->c.gbpb */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>


#include "kernel.h"
#include "swis.h"


#include "etc.h"

#include "err.h"

#include "mem.h"
#include "rminfo.h"


#include "constants.h"

#include "fs.h"

#include "vectors.h"
#include "command.h"

#include "find.h"

#include "gbpb.h"





_kernel_oserror * checkourfiles(int fh,fstat * f)
{
 _kernel_oserror * err;
 int               compresstype;
 int               bits;
 int               time;
 int               extrabits;
 int               os;
 int               part;
 int               extralen;
 int               magic;
 int               exfield[8];
 int               cryptdata[3];
 int               subbits;
 int               sublen;


 f->object=0;

 magic=0;
 err=fs_read(fh,&magic,2);
 if((!err) && magic==0x8B1F)
 {
  if(!err)                    err=fs_read(fh,&compresstype,1);
  if(!err)                    err=fs_read(fh,&bits,1);
  if(!err)                    err=fs_read(fh,&time,4);
  if(!err)                    err=fs_read(fh,&extrabits,1);
  if(!err)                    err=fs_read(fh,&os,1);


  if((bits & 0x2) && !err)    err=fs_read(fh,&part,2);

  if((bits & 0x4) && !err)
  {
   extralen=0;
   err=fs_read(fh,&extralen,2);  /* then read extra */
   if(!err)
   {
    while(extralen>0)
    {
     err=fs_read(fh,&subbits,4);
     sublen=((subbits>>16) & 0xFFFF);

     extralen-=(4+sublen);
     if((subbits & 0xFFFF)==('A'+(((int)'C')<<8)))
     {
      fs_read(fh,exfield,sublen);
      f->load=exfield[0];
      f->exec=exfield[1];
      f->acc=exfield[2];
      f->length=exfield[3];
      f->object=1;
      f->type=filetype(f->load);
     }
     else   /* skip sublen bytes */
     {
      fs_skip(fh,sublen);
     }
    }
   }
  }

  if((bits & 0x8) && !err)     /* original filename - zero terminated */
  {
   os=0;
   while(!err) 
   {
    err=fs_read(fh,&os,1);
    if(!os) break;
   }
  }

  if((bits & 0x10) && !err)    /* file comment - zero terminated */
  {
   while(!err) 
   {
    err=fs_read(fh,&os,1);
    if(!os) break;
   }
  }

  if((bits & 0x20) && !err)    /* file encrypted */
  {
   err=fs_read(fh,cryptdata,12);
  }
 }
 return(err);
}








static _kernel_oserror * checkourfile(char * path,char * leaf,fstat * f)
{
 _kernel_oserror * err;
 char              name[256];
 int               fh;

 setvskip(1);

 xstrcpy(name,path);
 strcat(name,".");
 xstrcat(name,leaf);

 err=findreadstat(name,f,NULL);
 if(!f->object)
 {
  err=fs_open(name,'r',&fh);
  if(!err && fh)
  {
   err=checkourfiles(fh,f);
   err=fs_close(fh,err);
  }
 }

 setvskip(0);

 return(NULL);
}




int gbpbwrite(_kernel_swi_regs * r)
{
 USE(r);
 return(2);
}



int gbpbwritep(_kernel_swi_regs * r)
{
 if(!(r->r[LRINDEX] & OVERFLOW))
 {
  modfile(r->r[1]);
 }
 return(1);
}




int gbpbread(_kernel_swi_regs * r)
{
 USE(r);
 return(1);
}





int gbpbreadentries(_kernel_swi_regs * r)
{
 USE(r);
 return(2);
}





int gbpbreadentriesp(_kernel_swi_regs * r)
{
 _kernel_oserror * err;
 int               entries;
 int             * p;
 char            * q;
 int               ftype;
 fstat             f;
 char              buffer[256];


 if(!(r->r[LRINDEX] & OVERFLOW))
 {
  err=fs_canonicalpath((char*)r->r[1],buffer,sizeof(buffer),NULL,NULL);
  if(!err)
  {
   if(inzone(buffer,NULL))
   {
    entries=r->r[3];
    p=(int*)r->r[2];

    while(entries--)
    {
     if(r->r[0]==10) q=(char*)(p+5);
     else
     if(r->r[0]==11) q=((char*)(p+5))+5;
     else
     /* if(r->r[0]==12)*/ q=(char*)(p+6);

     ftype=filetype(*p);

     if(ftype==XTYPE)
     {
      err=checkourfile(buffer,q,&f);
      if(!err && f.object)
      {
       p[0]=f.load;
       p[1]=f.exec;
       p[2]=f.length;
       p[3]=f.acc;
       if(r->r[0]==12) p[5]=f.type;
      }
     }

     while(*q++);
 
     p=(int*)((((int)q)+3) & ~0x3);
    }
   }
  }
 }
 return(1);
}




@


1.1
log
@Initial revision
@
text
@d27 1
a27 1
#include "h.etc"
d29 1
a29 1
#include "h.err"
d31 2
a32 2
#include "h.mem"
#include "h.rminfo"
d35 1
a35 1
#include "h.constants"
d37 1
a37 1
#include "h.fs"
d39 2
a40 2
#include "h.vectors"
#include "h.command"
d42 1
a42 1
#include "h.find"
d44 1
a44 1
#include "h.gbpb"
@


1.1.1.1
log
@Initial version.

@
text
@@
