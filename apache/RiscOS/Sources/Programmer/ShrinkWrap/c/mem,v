head	1.2;
access;
symbols
	ShrinkWrap-0_07:1.2
	ShrinkWrap-0_06-2:1.2
	ShrinkWrap-0_06:1.1
	dellis_autobuild_BaseSW:1.1
	ShrinkWrap-0_05:1.1
	ShrinkWrap-0_04:1.1
	sbrodie_sedwards_16Mar2000:1.1
	dcotton_autobuild_BaseSW:1.1
	ShrinkWrap-0_03:1.1
	nturton_ShrinkWrap-0_02:1.1
	Spin_merge:1.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	Ursula_RiscPC:1.1.0.8
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	rthornb_UrsulaBuild_01May1998:1.1
	afrost_Funai01-33:1.1.1.1
	afrost_NC2_Generic:1.1.1.1
	Spinner_RCA116:1.1.1.1
	Spinner_B20_2:1.1.1.1
	Spinner_19_3:1.1.1.1
	Spinner_B18:1.1.1.1
	Spinner_B17:1.1.1.1
	Spinner_B15:1.1.1.1
	Spinner_B14:1.1.1.1
	Spinner_B13:1.1.1.1
	Spinner_B12:1.1.1.1
	Spinner_B10:1.1.1.1
	Daytona:1.1.0.6
	Daytona_bp:1.1
	Ursula:1.1.0.4
	Ursula_bp:1.1
	Spinner_B7:1.1.1.1
	ARTtmp_merge:1.1.1.1
	Spin_3Apr97:1.1.1.1
	RCA_bp:1.1
	RCA:1.1.0.2
	ARTtmp:1.1.1.1.0.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2009.06.11.21.46.52;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	97.03.19.14.15.16;	author scormie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.19.14.15.16;	author scormie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  #include file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both Norcroft and GCC.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 0.06. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*->c.mem */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stdarg.h>


#include "kernel.h"
#include "swis.h"


#include "etc.h"
#include "err.h"

#include "flex.h"

#include "mem.h"



/*****************************************************************************/

#define SPHEADS 44
#define SPBLOCK 32
#define CBLOCK  16

static int   pagechunk;
static int   nchunks;
static int * spriteareap;  /* was 0x1400000; */


static void getpagesize(void)
{
 _kernel_swi_regs  rx;

 _kernel_swi(OS_ReadMemMapInfo,&rx,&rx);

 /* return r0 page size in bytes, r1 no of pages */

 pagechunk=rx.r[0];
 nchunks=rx.r[1];

 rx.r[0]=3;

 _kernel_swi(OS_ReadDynamicArea,&rx,&rx);

 spriteareap=(int*)rx.r[0];
}




/************************************************************************/
/* dynamic memory areas */



static int dynamicnumber;




_kernel_oserror * dynamicrenumber(_kernel_swi_regs * rx)
{

 if(rx->r[2]==dynamicnumber) 
       dynamicnumber=rx->r[3];

 return(NULL);
}







static _kernel_oserror * trashdynamic(void)
{
 _kernel_oserror  * err;
 _kernel_swi_regs   rx;

 rx.r[0]=1;
 rx.r[1]=dynamicnumber;

 err=_kernel_swi(OS_DynamicArea,&rx,&rx); 

 return(err);
}




static _kernel_oserror * createdynamic(void)
{
 _kernel_oserror  * err;
 _kernel_swi_regs   rx;

 rx.r[0]=0;
 rx.r[1]=-1;
 rx.r[2]=0;
 rx.r[3]=-1;
 rx.r[4]=(1<<7);
 rx.r[5]=-1;
 rx.r[6]=0;
 rx.r[7]=0;
 rx.r[8]=(int)"ShrinkWrap";

 err=_kernel_swi(OS_DynamicArea,&rx,&rx); 

 dynamicnumber=rx.r[1];

 return(err); 
}



static _kernel_oserror * finddynamic(int ** p)
{
 _kernel_oserror  * err;
 _kernel_swi_regs   rx;

 rx.r[0]=2;
 rx.r[1]=dynamicnumber;

 err=_kernel_swi(OS_DynamicArea,&rx,&rx); 

 *p=(int*)rx.r[3];

 return(err); 
}



static _kernel_oserror * setdynamicsize(int * p,int size)
{
 _kernel_oserror  * err;
 _kernel_swi_regs   rx;
 int                oldsize;
 int                change;

 rx.r[0]=2;
 rx.r[1]=dynamicnumber;

 err=_kernel_swi(OS_DynamicArea,&rx,&rx); 

 oldsize=rx.r[2];

 oldsize=(oldsize+(pagechunk-1))/pagechunk;
 size=(size+(pagechunk-1))/pagechunk;

 change=(size-oldsize)*pagechunk;

 rx.r[0]=dynamicnumber;
 rx.r[1]=change;

 err=_kernel_swi(OS_ChangeDynamicArea,&rx,&rx);

 return(err); 

 p=p;
}



static int dynamicsize(int * p)
{
 _kernel_oserror  * err;
 _kernel_swi_regs   rx;
 int                size;

 rx.r[0]=2;
 rx.r[1]=dynamicnumber;

 err=_kernel_swi(OS_DynamicArea,&rx,&rx); 

 size=rx.r[2];

 return(size); 

 p=p;
}



/****************************************************************************/

static int    memmin; /* max memory */
static int    memmax; /* min memory */
static int  * sploc;


void memfinish(void)
{
 trashdynamic();
}



_kernel_oserror * meminit(void)
{
 _kernel_oserror  * err;

 getpagesize();

 memmin=0;
 memmax=0x40000;
 err=createdynamic();
 if(!err)
 {
  err=finddynamic(&sploc);
  if(!err)
  {
   flex_init((char*)sploc,0);
  }
 }

 return(err);
}



/* called whenever we re-enter the FS to see if our memory is OK */

_kernel_oserror * memcheck(void)
{
 _kernel_oserror  * err;
 int              * p;

 err=finddynamic(&p);
 if(!err)
 {
  if(p!=sploc)
  {
   if(!flex_reloc((char*)p)) err=&mb_sfserr_MemoryCorrupt;
   sploc=p;
  }
 }
 else err=NULL;

 return(err);
}




int memextend(int n)
{
 _kernel_oserror  * err;
 int              * p;
 int                size; 

 err=finddynamic(&p);
 if(!err)
 {
  size=flex_max()+n;
  if(size>memmax) return(0);
  err=setdynamicsize(p,size);
  if(err) return(0);
  else
  {
   flex_newmax((char*)p,dynamicsize(p));
   return(1);
  }
 }
 else return(0);
}



void memcontract(void)
{
 _kernel_oserror  * err;
 int   max;
 int   inuse;
 int * p;

 max=flex_max();
 inuse=flex_inuse();
 if(inuse<memmin) inuse=memmin;

 if(((max-inuse)>pagechunk) || inuse>max)
 {
  err=finddynamic(&p);
  if(!err)
  {
   setdynamicsize(p,inuse);
   if(!err)
   {
    flex_newmax((char*)p,dynamicsize(p));
   }
  }
 }
}



/*

 Entry r0=3,r1=min,r2=max
 Exit       r1=min,r2=max,r3=cur

*/



static _kernel_oserror * memoryset(_kernel_swi_regs * r)
{
 _kernel_oserror * err;
 int               min;
 int               max;

 err=NULL;

 min=r->r[1];
 max=r->r[2];

 if(min>max && min>memmin) max=min;
 else
 if(max<min && max<memmax) min=max;

 if(max>nchunks*pagechunk) max=nchunks*pagechunk;
 if(min>nchunks*pagechunk) min=nchunks*pagechunk;

 if(min<0)   min=0;
 if(max<min) max=min;

 memmin=min;
 memmax=max;

 memcontract();

 if(flex_max()<memmin) memmin=flex_max();

 r->r[1]=memmin;
 r->r[2]=memmax;
 r->r[3]=flex_max();
 r->r[4]=pagechunk*nchunks;

 return(err);
}






static int checkk(char * p)
{
 while(*p>=32) if(toupper(*p++)=='K') return(1);
 return(0);
}


_kernel_oserror * setmemorysize(char * args[],int i)
{
 _kernel_oserror  * err;
 _kernel_swi_regs   r;
 int                min;
 int                max;

 err=NULL;

 if(sscanf(args[0],"%d",&min)==1)
 {
  if(checkk(args[0])) min*=1024;

  if(sscanf(args[1],"%d",&max)==1)
  {
   if(checkk(args[1])) max*=1024;

   r.r[1]=min;
   r.r[2]=max;
   err=memoryset(&r);
  }
 }

 return(err);
 USE(i);
}





_kernel_oserror * memman(_kernel_swi_regs * r)
{
 _kernel_oserror * err;

 err=NULL;

 switch(r->r[0])
 {
     case 0:
            err=memoryset(r);
            break;

 }

 return(err);
}





@


1.1
log
@Initial revision
@
text
@d29 2
a30 2
#include "h.etc"
#include "h.err"
d32 1
a32 1
#include "h.flex"
d34 1
a34 1
#include "h.mem"
@


1.1.1.1
log
@Initial version.

@
text
@@
