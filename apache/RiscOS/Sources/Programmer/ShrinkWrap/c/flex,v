head	1.3;
access;
symbols
	ShrinkWrap-0_07:1.3
	ShrinkWrap-0_06-2:1.3
	ShrinkWrap-0_06:1.2
	dellis_autobuild_BaseSW:1.2
	ShrinkWrap-0_05:1.2
	ShrinkWrap-0_04:1.2
	sbrodie_sedwards_16Mar2000:1.2
	dcotton_autobuild_BaseSW:1.2
	ShrinkWrap-0_03:1.2
	nturton_ShrinkWrap-0_02:1.2
	Spin_merge:1.1.1.2
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	Ursula_RiscPC:1.1.0.8
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	rthornb_UrsulaBuild_01May1998:1.1
	afrost_Funai01-33:1.1.1.2
	afrost_NC2_Generic:1.1.1.2
	Spinner_RCA116:1.1.1.2
	Spinner_B20_2:1.1.1.2
	Spinner_19_3:1.1.1.2
	Spinner_B18:1.1.1.2
	Spinner_B17:1.1.1.2
	Spinner_B15:1.1.1.2
	Spinner_B14:1.1.1.2
	Spinner_B13:1.1.1.2
	Spinner_B12:1.1.1.2
	Spinner_B10:1.1.1.2
	Daytona:1.1.0.6
	Daytona_bp:1.1
	Ursula:1.1.0.4
	Ursula_bp:1.1
	Spinner_B7:1.1.1.2
	ARTtmp_merge:1.1.1.2
	Spin_3Apr97:1.1.1.2
	RCA_bp:1.1
	RCA:1.1.0.2
	ARTtmp:1.1.1.2.0.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2009.06.11.21.46.51;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	98.12.04.15.34.51;	author nturton;	state Exp;
branches;
next	1.1;

1.1
date	97.03.19.14.15.15;	author scormie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.19.14.15.15;	author scormie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.03.19.23.32.42;	author nturton;	state Exp;
branches;
next	;


desc
@@


1.3
log
@  #include file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both Norcroft and GCC.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 0.06. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*->c.flex */

#define BOOL int
#define TRUE 1
#define FALSE 0


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "mem.h"
#include "err.h"

#include "flex.h"




typedef struct
{
 flex_ptr anchor;      /* *anchor should point back to here. */
 int size;             /* in bytes. Exact size of logical area. */
                       /* then the actual store follows. */
} swflex__rec;




static void swflex__fail(int i)
{
/* printf("xxxxxxxxxxxxxxxxxxx i=%d xxxxxxxxxxxxxxxxxxxxx",i); */

/* memcorrupt(i); */

 i=i;
}



static int roundup(int i)
{
  return 0xfffffffc & (i + 3);
}


static char *swflex__freep;       /* free flex memory */
static char *swflex__lim;         /* limit of flex memory */
static char *swflex__base;


/* From base upwards, it's divided into store blocks of
  a swflex__rec
  the space
  align up to next word.
*/




static BOOL swflex__more(int n)
{
 return(memextend(n));
}



static void swflex__give(void)
{
 memcontract();
}



static BOOL swflex__ensure(int n)
{
 n-=swflex__lim-swflex__freep;
 if(n<=0 || swflex__more(n)) return(TRUE);
 else                      return(FALSE);
}



_kernel_oserror * swflex_alloc(flex_ptr anchor, int n)
{
 swflex__rec *p;

/* printf("alloc %d\n",n); */

 if(n<0 || ! swflex__ensure(sizeof(swflex__rec) + roundup(n)))
 {
  *anchor = 0;
  return(&mb_malloc_failed);
 }

 p = (swflex__rec*) swflex__freep;
 swflex__freep += sizeof(swflex__rec) + roundup(n);

 p->anchor = anchor;
 p->size = n;
 *anchor = p + 1; /* sizeof(swflex__rec), that is */

 return(NULL);
}




_kernel_oserror * swflex_allocc(flex_ptr anchor, int n)
{
 _kernel_oserror * err;

 err=swflex_alloc(anchor,n);
 if(!err) memset(*anchor,0,n);
 return(err);
}







static void swflex__reanchor(swflex__rec *p, int by)
{
 /* Move all the anchors from p upwards. This is in anticipation
  of that block of the heap being shifted. */

 while (1)
 {
  if((int) p>=(int) swflex__freep) break;
  if(*(p->anchor) != p + 1) swflex__fail(6);
  *(p->anchor) = ((char*) (p + 1)) + by;
  p = (swflex__rec*) (((char*) (p + 1)) + roundup(p->size));
 }
}


void swflex_free(flex_ptr anchor)
{
 swflex__rec *p = ((swflex__rec*) *anchor) - 1;
 int roundsize = roundup(p->size);
 swflex__rec *next = (swflex__rec*) (((char*) (p + 1)) + roundsize);


 if(p->anchor!=anchor)
 {
  swflex__fail(0);
 }

 swflex__reanchor(next, - (sizeof(swflex__rec) + roundsize));

 memmove(p,next,swflex__freep-(char*) next);

 swflex__freep-=sizeof(swflex__rec) + roundsize;

 swflex__give();

 *anchor = 0;
}



int swflex_size(flex_ptr anchor)
{
 swflex__rec *p = ((swflex__rec*) *anchor) - 1;
 if(p->anchor!=anchor)
 {
  swflex__fail(4);
 }
 return(p->size);
}



_kernel_oserror * swflex_extend(flex_ptr anchor, int newsize)
{
 swflex__rec *p = ((swflex__rec*) *anchor) - 1;

 return(swflex_midextend(anchor, p->size, newsize - p->size));
}



_kernel_oserror * swflex_midextend(flex_ptr anchor, int at, int by)
{
 swflex__rec *p;
 swflex__rec *next;


 p=((swflex__rec*) *anchor) - 1;

 if(p->anchor!=anchor)
 {
  swflex__fail(1);
 }

 if(at>p->size)
 {
  swflex__fail(2);
 }

 if(by < 0 && (-by) > at)
 {
  swflex__fail(3);
 }

 if(by == 0)
 {
  /* do nothing */
 }
 else
 if(by > 0)
 { /* extend */

  int growth = roundup(p->size + by) - roundup(p->size);
  /* Amount by which the block will actually grow. */

  if(!swflex__ensure(growth))
  {
   return(&mb_malloc_failed);
  }

  next = (swflex__rec*) (((char*) (p + 1)) + roundup(p->size));

  /* The move has to happen in two parts because the moving
    of objects above is word-aligned, while the extension within
    the object may not be. */

  swflex__reanchor(next, growth);

  memmove(((char*) next) + roundup(growth),next,swflex__freep - (char*) next);

  swflex__freep += growth;

  memmove(((char*) (p + 1)) + at + by,((char*) (p + 1)) + at,p->size - at);
  p->size += by;

 }
 else
 { /* The block shrinks. */
  int shrinkage;

  next = (swflex__rec*) (((char*) (p + 1)) + roundup(p->size));

  by = -by; /* a positive value now */
  shrinkage = roundup(p->size) - roundup(p->size - by);
  /* a positive value */

  memmove(((char*) (p + 1)) + at - by,((char*) (p + 1)) + at,p->size - at);
  p->size -= by;

  swflex__reanchor(next, - shrinkage);

  memmove(((char*) next) - shrinkage,next,swflex__freep - (char*) next);

  swflex__freep -= shrinkage;

  swflex__give();

 };

 return(NULL);
}




/* called when we propose to change amount of stuff in flex block */

_kernel_oserror * swflex_chunk(flex_ptr anchor,int size,int chunksize)
{
 swflex__rec *p = ((swflex__rec*) *anchor)-1;

 if((size>=p->size) || (p->size>(size+chunksize)))
   return(swflex_extend(anchor,(size/chunksize+1)*chunksize));

 return(NULL);
}



int swflex_init(char * chunk,int size)
{
 swflex__freep=chunk;
 swflex__lim=chunk+size;
 swflex__base=chunk;
 return(1);
}


int swflex_newmax(char * chunk,int size)
{
 swflex__lim=chunk+size;
 return(1);
}


int swflex_inuse(void)
{
 return(swflex__freep-swflex__base);
}


int swflex_max(void)
{
 return(swflex__lim-swflex__base);
}


int swflex_reloc(char * newbase)
{
 int         shift;
 swflex__rec * p;

 shift=newbase-swflex__base;

 swflex__base+=shift;
 swflex__freep+=shift;
 swflex__lim+=shift;

 p=(swflex__rec *)swflex__base;

 while(((int)p)<((int)swflex__freep))
 {
/*printf("shift=%d *(p->anchor)=%x p+1=%x",shift,*(p->anchor),(char*)(p+1));*/

  if(*(p->anchor)!=(((char*)(p+1))-shift))
  {
   swflex__fail(6);
   return(0);
  }
  *(p->anchor)=((char*)(p+1));

  p=(swflex__rec*)(((char*)(p + 1))+roundup(p->size));
 }

 return(1);
}



#ifdef NEVER

/* return 1 if corrupt */


int swflex_check(void)
{
 swflex__rec * p;
 char      * q;

 p=(swflex__rec *)swflex__base;

 while(((int)p)<((int)swflex__freep))
 {
  q=*(p->anchor);

  if(q<((char*)swflex__base) || q>((char*)swflex__freep))
  {
   deb("flex pointer at %x points to illegal address.",(int)p);
   return(1);
  }

  if(*(p->anchor)!=(((char*)(p+1))))
  {
   deb("bad flex blockat %x.",(int)p);
   return(1);
  }

/*  deb("block %x len=%d.",p,p->size);  */

  p=(swflex__rec*)(((char*)(p + 1))+roundup(p->size));
 }

 return(0);
}

#endif



@


1.2
log
@Spinner branch merged.  Updated to use -rmf option to link
@
text
@d29 2
a30 2
#include "h.mem"
#include "h.err"
d32 1
a32 1
#include "h.flex"
@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
} flex__rec;
d47 1
a47 1
static void flex__fail(int i)
d64 3
a66 3
static char *flex__freep;       /* free flex memory */
static char *flex__lim;         /* limit of flex memory */
static char *flex__base;
d70 1
a70 1
  a flex__rec
d78 1
a78 1
static BOOL flex__more(int n)
d85 1
a85 1
static void flex__give(void)
d92 1
a92 1
static BOOL flex__ensure(int n)
d94 2
a95 2
 n-=flex__lim-flex__freep;
 if(n<=0 || flex__more(n)) return(TRUE);
d101 1
a101 1
_kernel_oserror * flex_alloc(flex_ptr anchor, int n)
d103 1
a103 1
 flex__rec *p;
d107 1
a107 1
 if(n<0 || ! flex__ensure(sizeof(flex__rec) + roundup(n)))
d113 2
a114 2
 p = (flex__rec*) flex__freep;
 flex__freep += sizeof(flex__rec) + roundup(n);
d118 1
a118 1
 *anchor = p + 1; /* sizeof(flex__rec), that is */
d126 1
a126 1
_kernel_oserror * flex_allocc(flex_ptr anchor, int n)
d130 1
a130 1
 err=flex_alloc(anchor,n);
d141 1
a141 1
static void flex__reanchor(flex__rec *p, int by)
d148 2
a149 2
  if((int) p>=(int) flex__freep) break;
  if(*(p->anchor) != p + 1) flex__fail(6);
d151 1
a151 1
  p = (flex__rec*) (((char*) (p + 1)) + roundup(p->size));
d156 1
a156 1
void flex_free(flex_ptr anchor)
d158 1
a158 1
 flex__rec *p = ((flex__rec*) *anchor) - 1;
d160 1
a160 1
 flex__rec *next = (flex__rec*) (((char*) (p + 1)) + roundsize);
d165 1
a165 1
  flex__fail(0);
d168 1
a168 1
 flex__reanchor(next, - (sizeof(flex__rec) + roundsize));
d170 1
a170 1
 memmove(p,next,flex__freep-(char*) next);
d172 1
a172 1
 flex__freep-=sizeof(flex__rec) + roundsize;
d174 1
a174 1
 flex__give();
d181 1
a181 1
int flex_size(flex_ptr anchor)
d183 1
a183 1
 flex__rec *p = ((flex__rec*) *anchor) - 1;
d186 1
a186 1
  flex__fail(4);
d193 1
a193 1
_kernel_oserror * flex_extend(flex_ptr anchor, int newsize)
d195 1
a195 1
 flex__rec *p = ((flex__rec*) *anchor) - 1;
d197 1
a197 1
 return(flex_midextend(anchor, p->size, newsize - p->size));
d202 1
a202 1
_kernel_oserror * flex_midextend(flex_ptr anchor, int at, int by)
d204 2
a205 2
 flex__rec *p;
 flex__rec *next;
d208 1
a208 1
 p=((flex__rec*) *anchor) - 1;
d212 1
a212 1
  flex__fail(1);
d217 1
a217 1
  flex__fail(2);
d222 1
a222 1
  flex__fail(3);
d236 1
a236 1
  if(!flex__ensure(growth))
d241 1
a241 1
  next = (flex__rec*) (((char*) (p + 1)) + roundup(p->size));
d247 1
a247 1
  flex__reanchor(next, growth);
d249 1
a249 1
  memmove(((char*) next) + roundup(growth),next,flex__freep - (char*) next);
d251 1
a251 1
  flex__freep += growth;
d261 1
a261 1
  next = (flex__rec*) (((char*) (p + 1)) + roundup(p->size));
d270 1
a270 1
  flex__reanchor(next, - shrinkage);
d272 1
a272 1
  memmove(((char*) next) - shrinkage,next,flex__freep - (char*) next);
d274 1
a274 1
  flex__freep -= shrinkage;
d276 1
a276 1
  flex__give();
d288 1
a288 1
_kernel_oserror * flex_chunk(flex_ptr anchor,int size,int chunksize)
d290 1
a290 1
 flex__rec *p = ((flex__rec*) *anchor)-1;
d293 1
a293 1
   return(flex_extend(anchor,(size/chunksize+1)*chunksize));
d300 1
a300 1
int flex_init(char * chunk,int size)
d302 3
a304 3
 flex__freep=chunk;
 flex__lim=chunk+size;
 flex__base=chunk;
d309 1
a309 1
int flex_newmax(char * chunk,int size)
d311 1
a311 1
 flex__lim=chunk+size;
d316 1
a316 1
int flex_inuse(void)
d318 1
a318 1
 return(flex__freep-flex__base);
d322 1
a322 1
int flex_max(void)
d324 1
a324 1
 return(flex__lim-flex__base);
d328 1
a328 1
int flex_reloc(char * newbase)
d331 1
a331 1
 flex__rec * p;
d333 1
a333 1
 shift=newbase-flex__base;
d335 3
a337 3
 flex__base+=shift;
 flex__freep+=shift;
 flex__lim+=shift;
d339 1
a339 1
 p=(flex__rec *)flex__base;
d341 1
a341 1
 while(((int)p)<((int)flex__freep))
d347 1
a347 1
   flex__fail(6);
d352 1
a352 1
  p=(flex__rec*)(((char*)(p + 1))+roundup(p->size));
d365 1
a365 1
int flex_check(void)
d367 1
a367 1
 flex__rec * p;
d370 1
a370 1
 p=(flex__rec *)flex__base;
d372 1
a372 1
 while(((int)p)<((int)flex__freep))
d376 1
a376 1
  if(q<((char*)flex__base) || q>((char*)flex__freep))
d390 1
a390 1
  p=(flex__rec*)(((char*)(p + 1))+roundup(p->size));
@


1.1.1.1
log
@Initial version.

@
text
@@


1.1.1.2
log
@Renamed flex_ functions to swflex_ to avoid clashes in ROM link.
@
text
@d42 1
a42 1
} swflex__rec;
d47 1
a47 1
static void swflex__fail(int i)
d64 3
a66 3
static char *swflex__freep;       /* free flex memory */
static char *swflex__lim;         /* limit of flex memory */
static char *swflex__base;
d70 1
a70 1
  a swflex__rec
d78 1
a78 1
static BOOL swflex__more(int n)
d85 1
a85 1
static void swflex__give(void)
d92 1
a92 1
static BOOL swflex__ensure(int n)
d94 2
a95 2
 n-=swflex__lim-swflex__freep;
 if(n<=0 || swflex__more(n)) return(TRUE);
d101 1
a101 1
_kernel_oserror * swflex_alloc(flex_ptr anchor, int n)
d103 1
a103 1
 swflex__rec *p;
d107 1
a107 1
 if(n<0 || ! swflex__ensure(sizeof(swflex__rec) + roundup(n)))
d113 2
a114 2
 p = (swflex__rec*) swflex__freep;
 swflex__freep += sizeof(swflex__rec) + roundup(n);
d118 1
a118 1
 *anchor = p + 1; /* sizeof(swflex__rec), that is */
d126 1
a126 1
_kernel_oserror * swflex_allocc(flex_ptr anchor, int n)
d130 1
a130 1
 err=swflex_alloc(anchor,n);
d141 1
a141 1
static void swflex__reanchor(swflex__rec *p, int by)
d148 2
a149 2
  if((int) p>=(int) swflex__freep) break;
  if(*(p->anchor) != p + 1) swflex__fail(6);
d151 1
a151 1
  p = (swflex__rec*) (((char*) (p + 1)) + roundup(p->size));
d156 1
a156 1
void swflex_free(flex_ptr anchor)
d158 1
a158 1
 swflex__rec *p = ((swflex__rec*) *anchor) - 1;
d160 1
a160 1
 swflex__rec *next = (swflex__rec*) (((char*) (p + 1)) + roundsize);
d165 1
a165 1
  swflex__fail(0);
d168 1
a168 1
 swflex__reanchor(next, - (sizeof(swflex__rec) + roundsize));
d170 1
a170 1
 memmove(p,next,swflex__freep-(char*) next);
d172 1
a172 1
 swflex__freep-=sizeof(swflex__rec) + roundsize;
d174 1
a174 1
 swflex__give();
d181 1
a181 1
int swflex_size(flex_ptr anchor)
d183 1
a183 1
 swflex__rec *p = ((swflex__rec*) *anchor) - 1;
d186 1
a186 1
  swflex__fail(4);
d193 1
a193 1
_kernel_oserror * swflex_extend(flex_ptr anchor, int newsize)
d195 1
a195 1
 swflex__rec *p = ((swflex__rec*) *anchor) - 1;
d197 1
a197 1
 return(swflex_midextend(anchor, p->size, newsize - p->size));
d202 1
a202 1
_kernel_oserror * swflex_midextend(flex_ptr anchor, int at, int by)
d204 2
a205 2
 swflex__rec *p;
 swflex__rec *next;
d208 1
a208 1
 p=((swflex__rec*) *anchor) - 1;
d212 1
a212 1
  swflex__fail(1);
d217 1
a217 1
  swflex__fail(2);
d222 1
a222 1
  swflex__fail(3);
d236 1
a236 1
  if(!swflex__ensure(growth))
d241 1
a241 1
  next = (swflex__rec*) (((char*) (p + 1)) + roundup(p->size));
d247 1
a247 1
  swflex__reanchor(next, growth);
d249 1
a249 1
  memmove(((char*) next) + roundup(growth),next,swflex__freep - (char*) next);
d251 1
a251 1
  swflex__freep += growth;
d261 1
a261 1
  next = (swflex__rec*) (((char*) (p + 1)) + roundup(p->size));
d270 1
a270 1
  swflex__reanchor(next, - shrinkage);
d272 1
a272 1
  memmove(((char*) next) - shrinkage,next,swflex__freep - (char*) next);
d274 1
a274 1
  swflex__freep -= shrinkage;
d276 1
a276 1
  swflex__give();
d288 1
a288 1
_kernel_oserror * swflex_chunk(flex_ptr anchor,int size,int chunksize)
d290 1
a290 1
 swflex__rec *p = ((swflex__rec*) *anchor)-1;
d293 1
a293 1
   return(swflex_extend(anchor,(size/chunksize+1)*chunksize));
d300 1
a300 1
int swflex_init(char * chunk,int size)
d302 3
a304 3
 swflex__freep=chunk;
 swflex__lim=chunk+size;
 swflex__base=chunk;
d309 1
a309 1
int swflex_newmax(char * chunk,int size)
d311 1
a311 1
 swflex__lim=chunk+size;
d316 1
a316 1
int swflex_inuse(void)
d318 1
a318 1
 return(swflex__freep-swflex__base);
d322 1
a322 1
int swflex_max(void)
d324 1
a324 1
 return(swflex__lim-swflex__base);
d328 1
a328 1
int swflex_reloc(char * newbase)
d331 1
a331 1
 swflex__rec * p;
d333 1
a333 1
 shift=newbase-swflex__base;
d335 3
a337 3
 swflex__base+=shift;
 swflex__freep+=shift;
 swflex__lim+=shift;
d339 1
a339 1
 p=(swflex__rec *)swflex__base;
d341 1
a341 1
 while(((int)p)<((int)swflex__freep))
d347 1
a347 1
   swflex__fail(6);
d352 1
a352 1
  p=(swflex__rec*)(((char*)(p + 1))+roundup(p->size));
d365 1
a365 1
int swflex_check(void)
d367 1
a367 1
 swflex__rec * p;
d370 1
a370 1
 p=(swflex__rec *)swflex__base;
d372 1
a372 1
 while(((int)p)<((int)swflex__freep))
d376 1
a376 1
  if(q<((char*)swflex__base) || q>((char*)swflex__freep))
d390 1
a390 1
  p=(swflex__rec*)(((char*)(p + 1))+roundup(p->size));
@
