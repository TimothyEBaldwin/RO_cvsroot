head	1.2;
access;
symbols
	ShrinkWrap-0_07:1.2
	ShrinkWrap-0_06-2:1.2
	ShrinkWrap-0_06:1.1
	dellis_autobuild_BaseSW:1.1
	ShrinkWrap-0_05:1.1
	ShrinkWrap-0_04:1.1
	sbrodie_sedwards_16Mar2000:1.1
	dcotton_autobuild_BaseSW:1.1
	ShrinkWrap-0_03:1.1
	nturton_ShrinkWrap-0_02:1.1
	Spin_merge:1.1.1.1
	mstphens_UrsulaRiscPCBuild_20Nov98:1.1
	Ursula_RiscPC:1.1.0.8
	rthornb_UrsulaBuild-19Aug1998:1.1
	UrsulaBuild_FinalSoftload:1.1
	rthornb_UrsulaBuild-12Aug1998:1.1
	aglover_UrsulaBuild-05Aug1998:1.1
	rthornb_UrsulaBuild-29Jul1998:1.1
	rthornb_UrsulaBuild-22Jul1998:1.1
	rthornb_UrsulaBuild-15Jul1998:1.1
	rthornb_UrsulaBuild-07Jul1998:1.1
	rthornb_UrsulaBuild-17Jun1998:1.1
	rthornb_UrsulaBuild-03Jun1998:1.1
	rthornb_UrsulaBuild-27May1998:1.1
	rthornb_UrsulaBuild-21May1998:1.1
	rthornb_UrsulaBuild_01May1998:1.1
	afrost_Funai01-33:1.1.1.1
	afrost_NC2_Generic:1.1.1.1
	Spinner_RCA116:1.1.1.1
	Spinner_B20_2:1.1.1.1
	Spinner_19_3:1.1.1.1
	Spinner_B18:1.1.1.1
	Spinner_B17:1.1.1.1
	Spinner_B15:1.1.1.1
	Spinner_B14:1.1.1.1
	Spinner_B13:1.1.1.1
	Spinner_B12:1.1.1.1
	Spinner_B10:1.1.1.1
	Daytona:1.1.0.6
	Daytona_bp:1.1
	Ursula:1.1.0.4
	Ursula_bp:1.1
	Spinner_B7:1.1.1.1
	ARTtmp_merge:1.1.1.1
	Spin_3Apr97:1.1.1.1
	RCA_bp:1.1
	RCA:1.1.0.2
	ARTtmp:1.1.1.1.0.2
	initial:1.1.1.1
	Spinner:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2009.06.11.21.46.52;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	97.03.19.14.15.16;	author scormie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.03.19.14.15.16;	author scormie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  #include file pathnames changed
Detail:
  Uses suffixed file extensions for compatiblity with both Norcroft and GCC.
Admin:
  Supplied by Peter Naulls, tested at ROOL

Version 0.06. Not tagged
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*->c.scrap */


#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <stdio.h>
#include <ctype.h>



#include "kernel.h"
#include "swis.h"


#include "etc.h"

#include "err.h"

#include "fs.h"


#include "flex.h"


#include "scrap.h"




#define SCRAPCHUNK (0x20*sizeof(int))


/* holds 1 if object is in use */

static unsigned int * scrapmap;
static int            scrapn;


static char * scrappath="<ShrinkWrap$Scrap>.ShrinkWrap";



/* scrap name is <Progname$Scrap>.Progname<instance>.<dir>.<dir>.file */
/* stored as 5 bits per filename and dir name */


char * sc_name(int sh)
{
 static char name[256];
 int    mask;
 int    shift;
 int    len;

 strcpy(name,scrappath);
 strcat(name,".");
 len=strlen(name);

 mask=0x1F;
 shift=25;

 while(shift>=0)
 {
  if((sh>>shift)&mask) 
  {
   sprintf(name+len,"%c%02d.",shift?'D':'F',(sh>>shift)&mask);
   len+=4;
  }
  shift-=5;
 }

 if(name[len-1]=='.') name[len-1]=0;

 return(name);
}




/* scan scrap map for unused handles */
/* else extend                       */

_kernel_oserror * sc_create(int * shp)
{
 _kernel_oserror * err;
 int               i;
 int               sh;
 fstat             f;
 char            * p;

 err=NULL;

 sh=scrapn; /* compiler */

 for(i=0;i<scrapn;i++)
 {
  if((!(scrapmap[i>>5] & (1<<(i & 0x1F)))) && (i & 0x1F))
  {
   /* found an unused file handle */
   sh=i;
   break;
  }
 }

 if(i>=scrapn)
 {
  /* extend */

  err=flex_chunk((flex_ptr)&scrapmap,((scrapn+2)/32+1)*sizeof(int),SCRAPCHUNK);
  if(!err)
  {
   sh=scrapn++;
   if(!(sh & 0x1F))
   {
    p=sc_name(sh);
    fs_stat(p,&f);
    if(!f.object) err=fs_cdir(p);

    err=fs_cdir(sc_name(sh));
    if(!err)
    {
     scrapmap[sh>>5]|=(1<<(sh & 0x1F));
     sh=scrapn++;
    }
   }
  }
 }

 if(!err)
 {
  scrapmap[sh>>5]|=(1<<(sh & 0x1F));
  *shp=sh;
 }
 return(err);
}


/* kill handle, then scan end of map pruning empty directories */

_kernel_oserror * sc_remove(int sh,_kernel_oserror * err)
{

 if(scrapmap[sh>>5] & (1<<(sh & 0x1F))) scrapmap[sh>>5]^=(1<<(sh & 0x1F));

 if(sh==(scrapn-1))
 {
  while(scrapn)
  {
   sh=scrapn-1;

   if(!(sh & 0x1F))
   {
    /* remove directory */
    if(sh) fs_delete(sc_name(sh));
    scrapn--;
   }
   else
   {
    if(scrapmap[sh>>5] & (1<<(sh & 0x1F))) break;
    else                                   scrapn--;
   }
  }
 }

 return(err);
}





/* scrpname is a short string to form into a scrap directory name */
/* tskname  is the name to appear in taskname$scrap               */
/* in general tskname may not be the same as wimpt_programname()  */


_kernel_oserror * scrapinit(void)
{
 _kernel_oserror * err;

 scrapn=0;

 err=NULL;

 if(!getenv("ShrinkWrap$Scrap")) 
                      err=oscli("SetMacro ShrinkWrap$Scrap <Wimp$ScrapDir>");
 if(!err)             err=flex_alloc((flex_ptr)&scrapmap,SCRAPCHUNK);
 if(!err)             fs_wipe(scrappath);

 return(err);
}



/* attempt to trash all scrap files in sight */


_kernel_oserror * scrapfinit(void)
{
 _kernel_oserror * err;

 err=fs_wipe(sc_name(0));

 return(err);
}


@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
#include "h.etc"
d32 1
a32 1
#include "h.err"
d34 1
a34 1
#include "h.fs"
d37 1
a37 1
#include "h.flex"
d40 1
a40 1
#include "h.scrap"
@


1.1.1.1
log
@Initial version.

@
text
@@
