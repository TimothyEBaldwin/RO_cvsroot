head	1.1;
branch	1.1.1;
access;
symbols
	TxtDebug-0_06:1.1.1.1
	TxtDebug-0_05:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.01.17.14.00.11;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.17.14.00.11;	author bavison;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@DADebug 0.02
============

This is a simple module, designed to store debug output in a dynamic area for
later retrieval. This is particularly of use in speed critical code, where the
time overhead of other methods (eg writing to a file) would be a problem.
The character output routine is accessed via a direct branch into the module
code, to further reduce overheads.

Support for DADebug is included in Hdr:NdrDebug and DebugLib.

SWIs
^^^^
A single SWI, DADebug_GetWriteCAddress (SWI &531C0) is provided. This returns
the address of the character output routine in R0. The routine should be
entered in SVC or IRQ mode, with the character to store in R0 and a return
address (including PSR bits) in R14. When the dynamic area is full, the write
pointer is wrapped around.

The direct access routine is APCS compliant, and may be considered to have the
prototype:

  void DADWriteC (char c);

* Commands
^^^^^^^^^^
*DADPrint writes the current contents of the debug dynamic area to the screen.
Only complete lines (ie those that have not been overwritten if the write
pointer has wrapped around) are output.

*DADReset clears the dynamic area of all but the initial "Debug start" line
(which is there to assure you that wraparound has not occurred).


Ben Avison, 28 Oct 1999
@


1.1.1.1
log
@A debugging module, making the screen-plotting code previously included only
in MPEGDriver modules available via the DADebug API (and therefore all the
debugging libraries that support DADebug). Module name not currently
registered. Should ideally have its own SWI chunk too, but that would mean
having to update the debugging libraries.
@
text
@@
