head	1.4;
access;
symbols
	HeapUtils-0_03:1.4
	HeapUtils-0_02:1.3
	HeapUtils-0_01:1.2;
locks; strict;
comment	@# @;


1.4
date	2008.10.07.01.17.25;	author srevill;	state Exp;
branches;
next	1.3;

1.3
date	2005.08.31.12.52.11;	author srevill;	state Exp;
branches;
next	1.2;

1.2
date	2005.07.26.15.42.27;	author srevill;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.26.15.34.39;	author srevill;	state Exp;
branches;
next	;


desc
@@


1.4
log
@  Fixed clean rule of Makefile to avoid annoying error messages.
Detail:
  Use the XWIPE macro rather than WIPE so that when the component
  is cleaned, we don't get loads of irritating errors from AMU if
  the object to be wiped doesn't exist.
Admin:
  No code change.


Version 0.03. Tagged as 'HeapUtils-0_03'
@
text
@/* (0.03)
 *
 * This file is automatically maintained by srccommit, do not edit manually.
 * Last processed by srccommit version: 1.1.
 *
 */
#define Module_MajorVersion_CMHG        0.03
#define Module_MinorVersion_CMHG        
#define Module_Date_CMHG                07 Oct 2008

#define Module_MajorVersion             "0.03"
#define Module_Version                  3
#define Module_MinorVersion             ""
#define Module_Date                     "07 Oct 2008"

#define Module_ApplicationDate          "07-Oct-08"

#define Module_ComponentName            "HeapUtils"
#define Module_ComponentPath            "castle/RiscOS/Sources/Programmer/HeapUtils"

#define Module_FullVersion              "0.03"
#define Module_HelpVersion              "0.03 (07 Oct 2008)"
#define Module_LibraryVersionInfo       "0:3"
@


1.3
log
@  Added SWI which can be called to ensure a certain amount of free
  space on a specified heap.
Detail:
  Before someone on an IRQ wants to claim, say, 32K from the RMA, they
  can arrange (in a non-IRQ context) to get HeapUtils to arrange for at
  least that much to be free (assuming that the heap is one of those
  being monitored by HeapUtils).

  Calling SWI HeapUtils_Request will cause a CallBack to be added which
  will do the ensure.

  An alternative strategy is if your IRQ routine can cope with the alloc
  failing, it can call the SWI there and then. Next time the IRQ handler
  gets entered, the memory might be available (if the callback happened
  in the mean time).
Admin:
  Tested on Iyonix, appears to work

Version 0.02. Tagged as 'HeapUtils-0_02'
@
text
@d1 1
a1 1
/* (0.02)
d4 1
a4 1
 * Last processed by srccommit version: 1.2.
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.02
d9 1
a9 1
#define Module_Date_CMHG                31 Aug 2005
d11 2
a12 2
#define Module_MajorVersion             "0.02"
#define Module_Version                  2
d14 1
a14 1
#define Module_Date                     "31 Aug 2005"
d16 1
a16 1
#define Module_ApplicationDate          "31-Aug-05"
d19 1
a19 1
#define Module_ComponentPath            "RiscOS/Sources/Programmer/HeapUtils"
d21 3
a23 3
#define Module_FullVersion              "0.02"
#define Module_HelpVersion              "0.02 (31 Aug 2005)"
#define Module_LibraryVersionInfo       "0:2"
@


1.2
log
@  Check-in of first version of the HeapUtils module
Detail:
  There is a long-standing problem in RISC OS where anyone wanting to claim
  a block from a heap such as the RMA could find that the claim fails when
  the call is from an interrupt context because the heap is full and the
  dynamic area cannot be grown.
 
  Usually, this isn't much of a problem because a) people don't claim much
  memory from IRQs and b) fragmentation of the RMA usually means there's
  some free blocks to be used.
 
  On the STB, steps have been taken to reduce RMA fragmentation which makes
  the above failure more likely. To help reduce the problem, this module
  will monitor a list of nominated OS_Heaps in dynamic areas and make sure
  that there are always at least two machine pages free at the end. This
  will not fix the problem but will certainly help in all likely cases (the
  times it won't help are if more than a couple of machine pages are claimed
  from a full heap during a period where callbacks are not enabled).
Admin:
  Tested on Iyonix (RISC OS 5.09), VirtualRPC (RISC OS 4.02) and on a STB
  (STB OS 5.0.9). Should work all the way back to RISC OS 3.5 (I believe
  that is when general purpose dynamic areas were introduced).
 
  Fixes a fault where PlugPlay would sometimes be informed by the MPEG
  system that the video is of zero height (i.e. memory allocation failed in
  the MPEG system routine which was filling the data structure).

Version 0.01. Tagged as 'HeapUtils-0_01'
@
text
@d1 1
a1 1
/* (0.01)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.01
d9 1
a9 1
#define Module_Date_CMHG                26 Jul 2005
d11 2
a12 2
#define Module_MajorVersion             "0.01"
#define Module_Version                  1
d14 1
a14 1
#define Module_Date                     "26 Jul 2005"
d16 1
a16 1
#define Module_ApplicationDate          "26-Jul-05"
d21 3
a23 3
#define Module_FullVersion              "0.01"
#define Module_HelpVersion              "0.01 (26 Jul 2005)"
#define Module_LibraryVersionInfo       "0:1"
@


1.1
log
@created by srccommit.
@
text
@d1 1
a1 1
/* (0.00)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.00
d11 2
a12 2
#define Module_MajorVersion             "0.00"
#define Module_Version                  0
d21 3
a23 3
#define Module_FullVersion              "0.00"
#define Module_HelpVersion              "0.00 (26 Jul 2005)"
#define Module_LibraryVersionInfo       "0:0"
@

