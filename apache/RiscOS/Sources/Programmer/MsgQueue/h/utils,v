head	1.1;
branch	1.1.1;
access;
symbols
	MsgQueue-0_09-1:1.1.1.1
	MsgQueue-0_09:1.1.1.1
	MsgQueue-0_08:1.1.1.1
	MsgQueue-0_07:1.1.1.1
	MsgQueue-0_06:1.1.1.1
	MsgQueue-0_05:1.1.1.1
	MsgQueue-0_04:1.1.1.1
	MsgQueue-0_03:1.1.1.1
	MsgQueue-0_02:1.1.1.1
	MsgQueue-0_01:1.1.1.1
	iniitial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.1
date	99.01.15.09.59.17;	author srose;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.01.15.09.59.17;	author srose;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * MsgQueue (utils.h)
 *
 * Copyright (C) Acorn Computers Ltd. 1993, 1994, 1995, 1996, 1997, 1998, 1999
 *
 */
#ifndef utils_h_included
#define utils_h_included
#include "kernel.h"

#ifdef _cplusplus
extern "C" {
#endif

extern _kernel_oserror *make_error (int err_num, int num_args, ...);

extern _kernel_oserror *read_message (const char */*token*/, const char **/*buffer*/, size_t */*inoutlength*/);
extern _kernel_oserror *read_message_2 (const char */*token*/, const char **/*buffer*/, size_t */*inoutlength*/,
		const char *arg1 /* substituted for %0 if non-NULL */,
		const char *arg2 /* substituted for %1 if non-NULL */);
extern _kernel_oserror *messages_file_open (const char *messages_filename);
extern _kernel_oserror *messages_file_close (void);

#ifndef ROM
/* Only need to register our resources if they come with us and not a ROM Messages/AUNMsgs module */
extern _kernel_oserror *utils_register_msgs(void);
extern _kernel_oserror *utils_deregister_msgs(void);
#endif

enum module_error_numbers {
        error_NOT_ENOUGH_MEMORY,
        error_BAD_MESSAGE_SIZE,
        error_MESSAGE_TOO_LARGE,
        error_UNKNOWN_QUEUE,
        error_QUEUE_EMPTY,
        error_QUEUE_FULL
};

#define ERROR_BASE	(0x816200)


#ifdef _cplusplus
}
#endif

#endif
@


1.1.1.1
log
@Initial import.  Snapshot following review with Richard Warren (review
changes / notes included).  Review focussed mainly on checking and 
confirming validity of (pseudo) code in messagequeue_send() under various
interrupt conditions, and the best way of optimizing the registering and
deregistering of queues. 
@
text
@@
