head	4.2;
access;
symbols
	HAL_merge:4.1
	Kernel-5_48:4.1
	Kernel-5_35-4_79_2_327:4.1
	Kernel-5_35-4_79_2_326:4.1
	Kernel-5_35-4_79_2_325:4.1
	Kernel-5_35-4_79_2_324:4.1
	Kernel-5_35-4_79_2_323:4.1
	Kernel-5_35-4_79_2_322:4.1
	Kernel-5_35-4_79_2_321:4.1
	Kernel-5_35-4_79_2_320:4.1
	Kernel-5_35-4_79_2_319:4.1
	Kernel-5_35-4_79_2_318:4.1
	Kernel-5_35-4_79_2_317:4.1
	Kernel-5_35-4_79_2_316:4.1
	Kernel-5_35-4_79_2_315:4.1
	Kernel-5_35-4_79_2_314:4.1
	Kernel-5_35-4_79_2_313:4.1
	Kernel-5_35-4_79_2_312:4.1
	Kernel-5_35-4_79_2_311:4.1
	Kernel-5_35-4_79_2_310:4.1
	Kernel-5_35-4_79_2_309:4.1
	Kernel-5_35-4_79_2_308:4.1
	Kernel-5_35-4_79_2_307:4.1
	Kernel-5_35-4_79_2_306:4.1
	Kernel-5_35-4_79_2_305:4.1
	Kernel-5_35-4_79_2_304:4.1
	Kernel-5_35-4_79_2_303:4.1
	Kernel-5_35-4_79_2_302:4.1
	Kernel-5_35-4_79_2_301:4.1
	Kernel-5_35-4_79_2_300:4.1
	Kernel-5_35-4_79_2_299:4.1
	Kernel-5_35-4_79_2_298:4.1
	Kernel-5_35-4_79_2_297:4.1
	Kernel-5_35-4_79_2_296:4.1
	Kernel-5_35-4_79_2_295:4.1
	Kernel-5_35-4_79_2_294:4.1
	Kernel-5_35-4_79_2_293:4.1
	Kernel-5_35-4_79_2_292:4.1
	Kernel-5_35-4_79_2_291:4.1
	Kernel-5_35-4_79_2_290:4.1
	Kernel-5_35-4_79_2_289:4.1
	Kernel-5_35-4_79_2_288:4.1
	Kernel-5_35-4_79_2_287:4.1
	Kernel-5_35-4_79_2_286:4.1
	Kernel-5_35-4_79_2_285:4.1
	Kernel-5_35-4_79_2_284:4.1
	Kernel-5_35-4_79_2_283:4.1
	Kernel-5_35-4_79_2_282:4.1
	Kernel-5_35-4_79_2_281:4.1
	Kernel-5_35-4_79_2_280:4.1
	Kernel-5_35-4_79_2_279:4.1
	Kernel-5_35-4_79_2_278:4.1
	Kernel-5_35-4_79_2_277:4.1
	Kernel-5_35-4_79_2_276:4.1
	Kernel-5_35-4_79_2_275:4.1
	Kernel-5_35-4_79_2_274:4.1
	Kernel-5_35-4_79_2_273:4.1
	Kernel-5_35-4_79_2_272:4.1
	Kernel-5_35-4_79_2_271:4.1
	Kernel-5_35-4_79_2_270:4.1
	Kernel-5_35-4_79_2_269:4.1
	Kernel-5_35-4_79_2_268:4.1
	Kernel-5_35-4_79_2_267:4.1
	Kernel-5_35-4_79_2_266:4.1
	Kernel-5_35-4_79_2_265:4.1
	Kernel-5_35-4_79_2_264:4.1
	Kernel-5_35-4_79_2_263:4.1
	Kernel-5_35-4_79_2_262:4.1
	Kernel-5_35-4_79_2_261:4.1
	Kernel-5_35-4_79_2_260:4.1
	Kernel-5_35-4_79_2_259:4.1
	Kernel-5_35-4_79_2_258:4.1
	Kernel-5_35-4_79_2_257:4.1
	Kernel-5_35-4_79_2_256:4.1
	Kernel-5_35-4_79_2_255:4.1
	Kernel-5_35-4_79_2_254:4.1
	Kernel-5_35-4_79_2_253:4.1
	Kernel-5_35-4_79_2_252:4.1
	Kernel-5_35-4_79_2_251:4.1
	Kernel-5_35-4_79_2_250:4.1
	Kernel-5_35-4_79_2_249:4.1
	Kernel-5_35-4_79_2_248:4.1
	Kernel-5_35-4_79_2_247:4.1
	Kernel-5_35-4_79_2_246:4.1
	Kernel-5_35-4_79_2_245:4.1
	Kernel-5_35-4_79_2_244:4.1
	Kernel-5_35-4_79_2_243:4.1
	Kernel-5_35-4_79_2_242:4.1
	Kernel-5_35-4_79_2_241:4.1
	Kernel-5_35-4_79_2_240:4.1
	Kernel-5_35-4_79_2_239:4.1
	Kernel-5_35-4_79_2_238:4.1
	Kernel-5_35-4_79_2_237:4.1
	Kernel-5_35-4_79_2_236:4.1
	Kernel-5_35-4_79_2_235:4.1
	Kernel-5_35-4_79_2_234:4.1
	Kernel-5_35-4_79_2_233:4.1
	Kernel-5_35-4_79_2_232:4.1
	Kernel-5_35-4_79_2_231:4.1
	Kernel-5_35-4_79_2_230:4.1
	Kernel-5_35-4_79_2_229:4.1
	Kernel-5_35-4_79_2_228:4.1
	Kernel-5_35-4_79_2_227:4.1
	Kernel-5_35-4_79_2_226:4.1
	Kernel-5_35-4_79_2_225:4.1
	Kernel-5_35-4_79_2_224:4.1
	Kernel-5_35-4_79_2_223:4.1
	Kernel-5_35-4_79_2_222:4.1
	Kernel-5_35-4_79_2_221:4.1
	Kernel-5_35-4_79_2_220:4.1
	Kernel-5_35-4_79_2_219:4.1
	Kernel-5_35-4_79_2_218:4.1
	Kernel-5_35-4_79_2_217:4.1
	Kernel-5_35-4_79_2_216:4.1
	Kernel-5_35-4_79_2_215:4.1
	Kernel-5_35-4_79_2_214:4.1
	Kernel-5_35-4_79_2_213:4.1
	Kernel-5_35-4_79_2_212:4.1
	Kernel-5_35-4_79_2_211:4.1
	Kernel-5_35-4_79_2_210:4.1
	Kernel-5_35-4_79_2_209:4.1
	Kernel-5_35-4_79_2_208:4.1
	Kernel-5_35-4_79_2_207:4.1
	Kernel-5_35-4_79_2_206:4.1
	Kernel-5_35-4_79_2_205:4.1
	Kernel-5_35-4_79_2_204:4.1
	Kernel-5_35-4_79_2_203:4.1
	Kernel-5_35-4_79_2_202:4.1
	Kernel-5_35-4_79_2_201:4.1
	Kernel-5_35-4_79_2_200:4.1
	Kernel-5_35-4_79_2_199:4.1
	Kernel-5_35-4_79_2_198:4.1
	Kernel-5_35-4_79_2_197:4.1
	Kernel-5_35-4_79_2_196:4.1
	Kernel-5_35-4_79_2_195:4.1
	Kernel-5_35-4_79_2_194:4.1
	Kernel-5_35-4_79_2_193:4.1
	Kernel-5_35-4_79_2_192:4.1
	Kernel-5_35-4_79_2_191:4.1
	Kernel-5_35-4_79_2_190:4.1
	Kernel-5_35-4_79_2_189:4.1
	Kernel-5_35-4_79_2_188:4.1
	Kernel-5_35-4_79_2_187:4.1
	Kernel-5_35-4_79_2_186:4.1
	Kernel-5_35-4_79_2_185:4.1
	Kernel-5_35-4_79_2_184:4.1
	Kernel-5_35-4_79_2_183:4.1
	Kernel-5_35-4_79_2_182:4.1
	Kernel-5_35-4_79_2_181:4.1
	Kernel-5_35-4_79_2_180:4.1
	Kernel-5_35-4_79_2_179:4.1
	Kernel-5_35-4_79_2_178:4.1
	Kernel-5_35-4_79_2_177:4.1
	Kernel-5_35-4_79_2_176:4.1
	Kernel-5_35-4_79_2_175:4.1
	Kernel-5_35-4_79_2_174:4.1
	Kernel-5_35-4_79_2_173:4.1
	Kernel-5_35-4_79_2_172:4.1
	Kernel-5_35-4_79_2_171:4.1
	Kernel-5_35-4_79_2_170:4.1
	Kernel-5_35-4_79_2_169:4.1
	Kernel-5_35-4_79_2_168:4.1
	Kernel-5_35-4_79_2_167:4.1
	Kernel-5_35-4_79_2_166:4.1
	Kernel-5_35-4_79_2_165:4.1
	RPi_merge:4.1
	Kernel-5_35-4_79_2_147_2_23:4.1
	Kernel-5_35-4_79_2_147_2_22:4.1
	Kernel-5_35-4_79_2_147_2_21:4.1
	Kernel-5_35-4_79_2_147_2_20:4.1
	Kernel-5_35-4_79_2_147_2_19:4.1
	Kernel-5_35-4_79_2_147_2_18:4.1
	Kernel-5_35-4_79_2_164:4.1
	Kernel-5_35-4_79_2_163:4.1
	Kernel-5_35-4_79_2_147_2_17:4.1
	Kernel-5_35-4_79_2_147_2_16:4.1
	Kernel-5_35-4_79_2_147_2_15:4.1
	Kernel-5_35-4_79_2_162:4.1
	Kernel-5_35-4_79_2_161:4.1
	Kernel-5_35-4_79_2_147_2_14:4.1
	Kernel-5_35-4_79_2_147_2_13:4.1
	Kernel-5_35-4_79_2_160:4.1
	Kernel-5_35-4_79_2_159:4.1
	Kernel-5_35-4_79_2_158:4.1
	Kernel-5_35-4_79_2_157:4.1
	Kernel-5_35-4_79_2_156:4.1
	Kernel-5_35-4_79_2_147_2_12:4.1
	Kernel-5_35-4_79_2_147_2_11:4.1
	Kernel-5_35-4_79_2_155:4.1
	Kernel-5_35-4_79_2_147_2_10:4.1
	Kernel-5_35-4_79_2_154:4.1
	Kernel-5_35-4_79_2_153:4.1
	Kernel-5_35-4_79_2_147_2_9:4.1
	Kernel-5_35-4_79_2_152:4.1
	Kernel-5_35-4_79_2_151:4.1
	Kernel-5_35-4_79_2_147_2_8:4.1
	Kernel-5_35-4_79_2_147_2_7:4.1
	Kernel-5_35-4_79_2_150:4.1
	Kernel-5_35-4_79_2_147_2_6:4.1
	Kernel-5_35-4_79_2_147_2_5:4.1
	Kernel-5_35-4_79_2_149:4.1
	Kernel-5_35-4_79_2_147_2_4:4.1
	Kernel-5_35-4_79_2_147_2_3:4.1
	Kernel-5_35-4_79_2_148:4.1
	Kernel-5_35-4_79_2_147_2_2:4.1
	Kernel-5_35-4_79_2_147_2_1:4.1
	RPi:4.1.0.18
	RPi_bp:4.1
	Kernel-5_35-4_79_2_98_2_52_2_1:4.1
	alees_Kernel_dev:4.1.0.14
	alees_Kernel_dev_bp:4.1
	Kernel-5_35-4_79_2_147:4.1
	Kernel-5_35-4_79_2_146:4.1
	Kernel-5_35-4_79_2_145:4.1
	Kernel-5_35-4_79_2_144:4.1
	Kernel-5_35-4_79_2_143:4.1
	Kernel-5_35-4_79_2_142:4.1
	Kernel-5_35-4_79_2_141:4.1
	Kernel-5_35-4_79_2_140:4.1
	Kernel-5_35-4_79_2_139:4.1
	Kernel-5_35-4_79_2_138:4.1
	Kernel-5_35-4_79_2_137:4.1
	Kernel-5_35-4_79_2_136:4.1
	Kernel-5_35-4_79_2_135:4.1
	Kernel-5_35-4_79_2_134:4.1
	Kernel-5_35-4_79_2_133:4.1
	Kernel-5_35-4_79_2_132:4.1
	Kernel-5_35-4_79_2_131:4.1
	Kernel-5_35-4_79_2_130:4.1
	Kernel-5_35-4_79_2_129:4.1
	Kernel-5_35-4_79_2_128:4.1
	Kernel-5_35-4_79_2_127:4.1
	Kernel-5_35-4_79_2_126:4.1
	Kernel-5_35-4_79_2_125:4.1
	Kernel-5_35-4_79_2_124:4.1
	Kernel-5_35-4_79_2_123:4.1
	Cortex_merge:4.1
	Kernel-5_35-4_79_2_122:4.1
	Kernel-5_35-4_79_2_98_2_54:4.1
	Kernel-5_35-4_79_2_98_2_53:4.1
	Kernel-5_35-4_79_2_98_2_52:4.1
	Kernel-5_35-4_79_2_98_2_51:4.1
	Kernel-5_35-4_79_2_98_2_50:4.1
	Kernel-5_35-4_79_2_98_2_49:4.1
	Kernel-5_35-4_79_2_98_2_48:4.1
	Kernel-5_35-4_79_2_121:4.1
	Kernel-5_35-4_79_2_98_2_47:4.1
	Kernel-5_35-4_79_2_120:4.1
	Kernel-5_35-4_79_2_98_2_46:4.1
	Kernel-5_35-4_79_2_119:4.1
	Kernel-5_35-4_79_2_98_2_45:4.1
	Kernel-5_35-4_79_2_98_2_44:4.1
	Kernel-5_35-4_79_2_118:4.1
	Kernel-5_35-4_79_2_98_2_43:4.1
	Kernel-5_35-4_79_2_117:4.1
	Kernel-5_35-4_79_2_116:4.1
	Kernel-5_35-4_79_2_98_2_42:4.1
	Kernel-5_35-4_79_2_115:4.1
	Kernel-5_35-4_79_2_98_2_41:4.1
	Kernel-5_35-4_79_2_98_2_40:4.1
	Kernel-5_35-4_79_2_114:4.1
	Kernel-5_35-4_79_2_98_2_39:4.1
	Kernel-5_35-4_79_2_98_2_38:4.1
	Kernel-5_35-4_79_2_113:4.1
	Kernel-5_35-4_79_2_112:4.1
	Kernel-5_35-4_79_2_98_2_37:4.1
	Kernel-5_35-4_79_2_98_2_36:4.1
	Kernel-5_35-4_79_2_98_2_35:4.1
	Kernel-5_35-4_79_2_98_2_34:4.1
	Kernel-5_35-4_79_2_98_2_33:4.1
	Kernel-5_35-4_79_2_98_2_32:4.1
	Kernel-5_35-4_79_2_98_2_31:4.1
	Kernel-5_35-4_79_2_98_2_30:4.1
	Kernel-5_35-4_79_2_98_2_29:4.1
	Kernel-5_35-4_79_2_98_2_28:4.1
	Kernel-5_35-4_79_2_98_2_27:4.1
	Kernel-5_35-4_79_2_98_2_26:4.1
	Kernel-5_35-4_79_2_111:4.1
	Kernel-5_35-4_79_2_98_2_25:4.1
	Kernel-5_35-4_79_2_98_2_24:4.1
	Kernel-5_35-4_79_2_98_2_23:4.1
	Kernel-5_35-4_79_2_110:4.1
	Kernel-5_35-4_79_2_98_2_22:4.1
	Kernel-5_35-4_79_2_109:4.1
	Kernel-5_35-4_79_2_98_2_21:4.1
	Kernel-5_35-4_79_2_98_2_20:4.1
	Kernel-5_35-4_79_2_108:4.1
	Kernel-5_35-4_79_2_107:4.1
	Kernel-5_35-4_79_2_98_2_19:4.1
	Kernel-5_35-4_79_2_98_2_18:4.1
	Kernel-5_35-4_79_2_98_2_17:4.1
	Kernel-5_35-4_79_2_98_2_16:4.1
	Kernel-5_35-4_79_2_98_2_15:4.1
	Kernel-5_35-4_79_2_106:4.1
	Kernel-5_35-4_79_2_105:4.1
	Kernel-5_35-4_79_2_104:4.1
	Kernel-5_35-4_79_2_98_2_14:4.1
	Kernel-5_35-4_79_2_98_2_13:4.1
	Kernel-5_35-4_79_2_98_2_12:4.1
	Kernel-5_35-4_79_2_98_2_11:4.1
	Kernel-5_35-4_79_2_98_2_10:4.1
	Kernel-5_35-4_79_2_98_2_9:4.1
	Kernel-5_35-4_79_2_103:4.1
	Kernel-5_35-4_79_2_102:4.1
	Kernel-5_35-4_79_2_98_2_8:4.1
	Kernel-5_35-4_79_2_98_2_7:4.1
	Kernel-5_35-4_79_2_98_2_6:4.1
	Kernel-5_35-4_79_2_98_2_5:4.1
	Kernel-5_35-4_79_2_98_2_4:4.1
	Kernel-5_35-4_79_2_101:4.1
	Kernel-5_35-4_79_2_100:4.1
	Kernel-5_35-4_79_2_99:4.1
	Kernel-5_35-4_79_2_98_2_3:4.1
	Kernel-5_35-4_79_2_98_2_2:4.1
	Kernel-5_35-4_79_2_98_2_1:4.1
	Cortex:4.1.0.2
	Cortex_bp:4.1
	Kernel-5_35-4_79_2_98:4.1
	Kernel-5_35-4_79_2_97:4.1
	Kernel-5_35-4_79_2_96:4.1
	Kernel-5_35-4_79_2_95:4.1
	Kernel-5_35-4_79_2_94:4.1
	Kernel-5_35-4_79_2_93:4.1
	Kernel-5_35-4_79_2_92:4.1
	Kernel-5_35-4_79_2_91:4.1
	Kernel-5_35-4_79_2_90:4.1
	Kernel-5_35-4_79_2_89:4.1
	Kernel-5_35-4_79_2_88:4.1
	Kernel-5_35-4_79_2_87:4.1
	Kernel-5_35-4_79_2_86:4.1
	Kernel-5_35-4_79_2_85:4.1
	Kernel-5_35-4_79_2_84:4.1
	Kernel-5_35-4_79_2_83:4.1
	Kernel-5_35-4_79_2_82:4.1
	Kernel-5_35-4_79_2_81:4.1
	Kernel-5_35-4_79_2_80:4.1
	Kernel-5_35-4_79_2_79:4.1
	Kernel-5_35-4_79_2_78:4.1
	Kernel-5_35-4_79_2_77:4.1
	RO_5_07:4.1
	Kernel-5_35-4_79_2_76:4.1
	Kernel-5_35-4_79_2_75:4.1
	Kernel-5_35-4_79_2_74:4.1
	Kernel-5_35-4_79_2_73:4.1
	Kernel-5_35-4_79_2_72:4.1
	Kernel-5_35-4_79_2_71:4.1
	Kernel-5_35-4_79_2_70:4.1
	Kernel-5_35-4_79_2_69:4.1
	Kernel-5_35-4_79_2_68:4.1
	Kernel-5_35-4_79_2_67:4.1
	Kernel-5_35-4_79_2_66:4.1
	Kernel-5_35-4_79_2_65:4.1
	Kernel-5_35-4_79_2_64:4.1
	Kernel-5_35-4_79_2_63:4.1
	Kernel-5_35-4_79_2_62:4.1
	Kernel-5_35-4_79_2_61:4.1
	Kernel-5_35-4_79_2_59:4.1
	Kernel-5_35-4_79_2_58:4.1
	Kernel-5_35-4_79_2_57:4.1
	Kernel-5_35-4_79_2_56:4.1
	Kernel-5_35-4_79_2_55:4.1
	Kernel-5_35-4_79_2_54:4.1
	Kernel-5_35-4_79_2_53:4.1
	Kernel-5_35-4_79_2_52:4.1
	Kernel-5_35-4_79_2_51:4.1
	Kernel-5_35-4_79_2_50:4.1
	Kernel-5_35-4_79_2_49:4.1
	Kernel-5_35-4_79_2_48:4.1
	Kernel-5_47:4.1
	Kernel-5_46-4_90_2_1:4.1
	nbingham_Kernel_FastNC_dev_bp:4.1
	nbingham_Kernel_FastNC_dev:4.1.0.16
	Kernel-5_46:4.1
	Kernel-5_45:4.1
	Kernel-5_35-4_79_2_47:4.1
	Kernel-5_35-4_79_2_46:4.1
	Kernel-5_35-4_79_2_45:4.1
	Kernel-5_35-4_79_2_44:4.1
	Kernel-5_35-4_79_2_25_2_2:4.1
	Kernel-5_35-4_79_2_43:4.1
	Kernel-5_35-4_79_2_42:4.1
	Kernel-5_35-4_79_2_41:4.1
	Kernel-5_35-4_79_2_40:4.1
	Kernel-5_35-4_79_2_39:4.1
	Kernel-5_35-4_79_2_38:4.1
	Kernel-5_35-4_79_2_37:4.1
	Kernel-5_35-4_79_2_36:4.1
	Kernel-5_35-4_79_2_35:4.1
	Kernel-5_35-4_79_2_34:4.1
	Kernel-5_35-4_79_2_33:4.1
	Kernel-5_35-4_79_2_32:4.1
	Kernel-5_44:4.1
	Kernel-5_35-4_79_2_25_2_1:4.1
	Kernel-5_43:4.1
	Kernel-5_35-4_79_2_31:4.1
	Kernel-5_35-4_79_2_30:4.1
	Kernel-5_35-4_79_2_29:4.1
	Kernel-5_35-4_79_2_28:4.1
	Kernel-5_35-4_79_2_27:4.1
	Kernel-5_35-4_79_2_26:4.1
	Kernel-5_42:4.1
	Kernel-5_41:4.1
	Kernel-5_40:4.1
	Kernel-5_35-4_79_2_25:4.1
	Kernel-5_35-4_79_2_24:4.1
	Kernel-5_35-4_79_2_23:4.1
	Kernel-5_35-4_79_2_22:4.1
	Kernel-5_35-4_79_2_21:4.1
	Kernel-5_35-4_79_2_20:4.1
	Kernel-5_35-4_79_2_19:4.1
	Kernel-5_35-4_79_2_18:4.1
	Kernel-5_35-4_79_2_17:4.1
	Kernel-5_35-4_79_2_16:4.1
	Kernel-5_35-4_79_2_15:4.1
	Kernel-5_35-4_79_2_14:4.1
	Kernel-5_39:4.1
	Kernel-5_13-4_52_2_1:4.1
	Bethany:4.1.0.12
	Kernel-5_38:4.1
	Kernel-5_35-4_79_2_13:4.1
	Kernel-5_35-4_79_2_12:4.1
	Kernel-5_35-4_79_2_11:4.1
	Kernel-5_37:4.1
	Kernel-5_35-4_79_2_10:4.1
	Kernel-5_35-4_79_2_9:4.1
	Kernel-5_36:4.1
	Kernel-5_35-4_79_2_8:4.1
	Kernel-5_35-4_79_2_7:4.1
	Kernel-5_35-4_79_2_6:4.1
	Kernel-5_35-4_79_2_5:4.1
	Kernel-5_35-4_79_2_4:4.1
	Kernel-5_35-4_79_2_3:4.1
	Kernel-5_35-4_79_2_2:4.1
	dellis_autobuild_BaseSW:4.1
	Kernel-5_35-4_79_2_1:4.1
	HAL:4.1.0.10
	Kernel-5_35:4.1
	Kernel-5_34:4.1
	Kernel-5_33:4.1
	Kernel-5_32:4.1
	Kernel-5_31:4.1
	Kernel-5_30:4.1
	Kernel-5_29:4.1
	Kernel-5_28:4.1
	Kernel-5_27:4.1
	Kernel-5_26:4.1
	Kernel-5_25:4.1
	Kernel-5_24:4.1
	Kernel-5_23:4.1
	Kernel-5_22:4.1
	sbrodie_sedwards_16Mar2000:4.1
	Kernel-5_21:4.1
	Kernel-5_20:4.1
	Kernel-5_19:4.1
	Kernel-5_18:4.1
	Kernel-5_17:4.1
	Kernel-5_16:4.1
	Kernel-5_15:4.1
	Kernel-5_14:4.1
	Kernel-5_13:4.1
	Kernel-5_12:4.1
	Kernel-5_11:4.1
	Kernel-5_10:4.1
	Kernel-5_09:4.1
	Kernel-5_08:4.1
	Kernel-5_07:4.1
	Kernel-5_06:4.1
	Kernel-5_05:4.1
	Kernel-5_04:4.1
	Kernel-5_03:4.1
	Kernel-5_02:4.1
	Kernel-5_01:4.1
	Kernel-5_00:4.1
	Kernel-4_99:4.1
	Kernel-4_98:4.1
	Kernel-4_97:4.1
	Kernel-4_96:4.1
	Kernel-4_95:4.1
	Kernel-4_94:4.1
	Kernel-4_93:4.1
	Kernel-4_92:4.1
	Kernel-4_91:4.1
	Kernel-4_90:4.1
	dcotton_autobuild_BaseSW:4.1
	Kernel-4_89:4.1
	Kernel-4_88:4.1
	Kernel-4_87:4.1
	Kernel-4_86:4.1
	Kernel-4_85:4.1
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1
	Kernel-4_84:4.1
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1
	Ursula_RiscPC_bp:4.1
	Kernel-4_83:4.1
	Kernel-4_82:4.1
	Kernel-4_81:4.1
	Kernel-4_80:4.1
	Kernel-4_79:4.1
	Kernel-4_78:4.1
	Kernel-4_77:4.1
	Kernel-4_76:4.1
	Kernel-4_75:4.1
	Kernel-4_74:4.1
	Kernel-4_73:4.1
	Kernel-4_72:4.1
	Kernel-4_71:4.1
	Kernel-4_70:4.1
	Kernel-4_69:4.1
	Kernel-4_68:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	Kernel-4_63-1_1_2_5:4.1.7.1
	Kernel-4_63-1_1_2_4:4.1.7.1
	Kernel-4_67:4.1
	Kernel-4_66:4.1
	Kernel-4_63-1_1_2_3:4.1.7.1
	Kernel-4_65:4.1
	Ursula_merge:4.1
	Kernel-4_64:4.1
	mstphens_Kernel-3_81:4.1
	Kernel-4_63-1_1_2_2:4.1.7.1
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	mstphens_Kernel-3_80:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2016.06.30.20.28.48;	author jlee;	state dead;
branches;
next	4.1;
commitid	lMnWzoE9eJz3Wwcz;

4.1
date	96.11.05.09.41.47;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.41.47;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.04.38;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.14.10;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.05.22;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Delete pre-HAL and 26bit code
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * HAL
  * HAL26
  * HAL32
  * No26bitCode
  * No32bitCode
  * IncludeTestSrc
  * FixR9CorruptionInExtensionSWI
  Various old files have also been removed (POST code, Arc/STB keyboard drivers, etc.)
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.49. Tagged as 'Kernel-5_49'
@
text
@;>MEM5D_SCR
;
; RISC OS 2+ BOOT TEST SOFTWARE.
; MEMORY TEST 5 VERSION D.      BRIAN RICE 10-01-90.
; 04-Apr-90     ArtG    0.1     Use memory size to determine page count
; 11-Apr-90	ArtG	0.2	Changes to permit use of BangCam
;
; This file will be called by MEM6x_SCR for the purposes of assembly.
; This file requires the assembly of MEM4x_SCR to be perfromed at the
; same time. The program will call the cam setting routines in the cam
; test program.
;
; This file will test MEMCs ability to assert its protection over
; logical pages.
; The test code for this test was taken from the A680 test code.
; The Arm CPU has three mode of operation, Supervisor, Operating System.
; and User. Most of the time the machine will operate in user mode, in this.
; mode the designers do not want the user to have full access to the memory.
; map, therefore the MEMC(s) will check that the CPU has the appropiate
; level of authorisation to access specific area of memory.
; User mode is the lowest mode, allowing limited R/W access to the ram.
; Operating System is next up the list and is allowed some more access to
; to the ram than user mode.
; Supervisor mode this is the highest and the CPU has unlimited access to
; the entire memory map. 
;
; This version has the "my abort" routine in it not the ts_dab_exp0..5 routine as
; coded from the A680 code.
;
; Set up some variables.
;
ts_wks_word     *   36                      ; Offset of word for workspace.
;
; ****************************************************************************
;
ts_memc_prot
;
; This module will map and assign protection mode 0 to all the pages. The
; module will then perfrom a read and write operations in supervisor and
; user modes. This is repeated for the three (four) protection modes.
; The module will check after every protection mode level that the required
; responses have been returned.
;
; Set up the memory, map and assign protection mode 0.
;
        ROUT                                ; Local Branches.
        MOV     r13, lr                     ; Preserve the link register.
        MOV     r12, #&00                   ; r12 = The physical page to test.

0       ADD     r8, r12, #&01               ; Get a page to use as vectors,
	BL	ts_count_CAMs		    ; get total number of pages
	SUB	r0,r0,#1 		    ; make a mask for useable page
	AND	r0,r0,#&7f		    ; numbers - min(128, num_pages)
        AND     r8, r8, r0

        MOV     r1, r8                      ; r1 = r8,  r1 = physical page 0.
        MOV     r0, #&00                    ; r0 = &00, r0 = logical page 0.
        BL      ts_set_cam                  ; Gosub ts_set_cam, set the CAM up.
;
; Set protection mode 0 and test that page.
;
        MOV     r2, #&00                    ; r2 = &00, r2 = protection mode 0.
        BL      ts_mem_prot                 ; Gosub ts_mem_prot.
        CMP     r3,#&0F                     ; Is r3 = &0F ? r3 = Super Read/Write ok.
                                            ;                    O/S   Read/Write ok.
                                            ;                    User  Read/Write ok.
	MOV	r2, #0
        BNE     ts_prot_fail                ; If r3 <> &0F Then branch to fail routine.
;
; Set protection mode 1 and test that page.
;
        MOV     r2, #&01                    ; r2 = &01, r2 = protection mode 1.
        BL      ts_mem_prot                 ; Gosub ts_mem_prot.
	[ CPU_Type = "ARM600"
	CMP	r3,#&0f			    ; no ABORT line to ARM600
	|
	CMP     r3,#&0B                     ; Is r3 = &0B ? r3 = Super Read/Write ok.
	]                                   ;                    O/S   Read/Write ok.
                                            ;                    User  Read only ok.

	MOV	r2,#1
        BNE     ts_prot_fail                ; If r3 <> &0B Then branch to fail routine.
;
; Set protection mode 2 and test that page.
;
        MOV     r2, #&02                    ; r2 = &02, r2 = protection mode 2.
        BL      ts_mem_prot                 ; Gosub ts_mem_prot.
	[ CPU_Type = "ARM600"
	CMP	r3,#&0f			    ; no ABORT line to ARM600
	|
        CMP     r3,#&03                     ; Is r3 = &03 ? r3 = Super Read/Write ok.
	]                                   ;                    O/S   Read only ok.
                                            ;                    User  No Access ok. 
	MOV	r2,#2
        BNE     ts_prot_fail                ; If r3 <> &03 Then branch to fail routine.
;
; Set protection mode 3 and test that page.
;
        MOV     r2, #&03                    ; r2 = &03, r2 = protection mode 3.
        BL      ts_mem_prot                 ; Gosub ts_mem_prot.
	[ CPU_Type = "ARM600"
	CMP	r3,#&0f			    ; no ABORT line to ARM600
	|
        CMP     r3, #&03                    ; Is r3 = &03 ? r3 = Super Read/Write ok.
	]                                   ;                    O/S   Read only ok.
                                            ;                    User  No Access ok. 
	MOV	r2,#3
        BNE     ts_prot_fail                ; If r3 <> &03 Then branch to 
                                            ; fail routine.
;
; Reset the page used to idle.
;
        MOV     r0, r12                     ; r0 = r12, idle the pages 
                                            ; being used.
        BL      ts_set_cam_idle             ; Gosub ts_set_cam_idle.
        MOV     r0, r8                      ; r0 = r8, idle the pages 
                                            ; being used. 
        BL      ts_set_cam_idle             ; Gosub ts_set_cam_idle.
;
; Increment the physical page counter and check that all the pages are 
; done, else finish.
;
        BL      ts_count_CAMs
        ADD     r12, r12, #&01              ; do the next physical page.
        CMP     r12, r0                     ; Done all pages ?
        BLT     %B0                         ; If r12 <= cam_entries, 
                                            ; branch back to 0.

        ANDS    r0, r0, #0                  ; set zero flag : test passed
        MOV     pc, r13                     ; Return to caller.
;
; **************************************************************************
;
; Branch here when ts_memc_prot fails to get the proper result from
; ts_mem_prot.
;
; At this point, 
;                 
; r3  is a map of permitted ops (user read, user write, sys read, sys write) 
; r2  is the memc protection mode
; r12 is the physical page number.
;
; This is displayed as :   
;
;       PPL bad l.a.pppp
;
; where l is the PPL set on that page (0, 1, 2 or 3)
;       a is a bitmap of the actual operations permitted (ur.uw.or.ow)
;       p is the physical page number tested
;

0
        =       "PPL bad",&88,&ff,".",&ff,".",&ff,&ff,&ff,&ff,0
        ALIGN

ts_prot_fail
        AND     r2, r2, #&0f
        MOV     r0, r2, LSL #20          ; mode bits
        AND     r3, r3, #&0f
        ORR     r0, r0, r3, LSL #16     ; permitted ops bits
        BIC     r12, r12, #&ff000000
        BIC     r12, r12, #&ff0000
        ORR     r0, r0, r12             ; current page number


        ADR     r4, %B0                 ; get fail message  
        MOV     r8, r0, LSL #8          ; shift number to suit ts_SendText
        ORRS    r0, r0, #1              ; fail flag
        MOV     pc, r13


;
;
; This section will test that the physical page referenced in r12 at the set 
; protection mode. During the operation of this module, aborts are expected to happen.
; The aborts are handled by the routine ts_dab.
;
; The system is running in supervisor mode and thus to check the user mode read / writes
; the address translator flag is used. The CPU has a signal called -TRANS which when used
; with MEMC forces the an address translation to be performed, this is not done whilst
; in supervisor mode because it has unlimited access to the memory map. The address
; translator falg (T) is used with STR and LDR instructions only, the effective result of
; adding the (T) to the opcode is to force the instruction to be executed as if the CPU
; was in user mode, thus unauthorised accesses will cause an abort to occur.
;
; IN:
;       r12 - physical page.
;       r2  - protection mode.
; OUT:
;       r3  - access pattern.
;             r3 = &0F, Super Read/Write ok, O/S Read/Write ok, User Read/Write ok.
;             r3 = &0B, Super Read/Write ok, O/S Read/Write ok, User Read only ok.
;             r3 = &03, Super Read/Write ok, O/S Read only ok,  User No Access ok.
;
ts_mem_prot
;
; Set up data to write and read from memory.
;
        MOV     r10, lr                     ; Preserve link register.
        MOV     r1, r12                     ; r1 = physical page.
        MOV     r0, #&01                    ; r0 = logical page 1.
        BL      ts_set_camp 

        MOV     r3, #&00                    ; Initialise access pattern.
	MOV_fiq	r5, r11_fiq		    ; get MEMC control
	AND	r5, r5, #&C
	ADR	r9, ts_ppl_tptrs
	LDR	r9, [r9, r5]		    ; get test address for this pagesize
;
; Test 1 system mode - write.
;
        MOV     r6, #&00                    ; r6 = &00, clear expected abort flag.
        MOV     r7, #&94                    ; r7 = &94, set abort expected flag.
;
; The following instruction may abort.
;
        STR     r1, [r9]                    ; Store r1 at loc pointed to by r9.
        CMP     r6, #&00                    ; Is r6 = &00 ? If not then abort happened.
        ORREQ   r3, r3, #&01                ; If r6 = &00, Then update r3, access pattern.
;
; Test 2 system mode - read.
;
        MOV     r6, #&00                    ; r6 = &00, clear expected abort flag.
        MOV     r7, #&94                    ; r7 = &94, set abort expected flag.
;
; The following instruction may abort.
;
        LDR     r1, [r9]                    ; Load r1 from loc pointed to by r9.
        CMP     r6, #&00                    ; Is r6 = &00 ? If not then abort happened.
        ORREQ   r3, r3, #&02                ; If r6 = &00 Then update r3, access pattern.
;
; Test 3 user mode - write.
;
        MOV     r6, #&00                    ; r6 = &00, clear expected abort flag.
        MOV     r7, #&94                    ; r7 = &94, set abort expected flag.
;
; The following instruction may abort.
;
        STRT    r1, [r9]                    ; Store r1 at loc pointed to by r9.
        CMP     r6, #&00                    ; Is r6 = &00 ? If not then abort happened.
        ORREQ   r3, r3, #&04                ; If r6 = &00 Then update r3, access pattern.
;
; Test 4 user mode - read.
;
        MOV     r6, #&00                    ; r6 = &00, clear expected abort flag.
        MOV     r7, #&94                    ; r7 = &94, set expected expected flag.
;
; The following instruction may abort.
;
        LDRT    r1, [r9]                    ; Load r1 from loc pointed to by r9.
        CMP     r6, #&00                    ; Is r6 = &00 ? If not then abort happened.
        ORREQ   r3, r3, #&08                ; If r6 = &00 Then update r3, access pattern.
        MOV     pc, r10                     ; Return to caller.

;
; addresses (a short way up page 1) to test PPL aborts
;

ts_ppl_tptrs
	&	( 4 * 1024) + ts_wks_word
	&	( 8 * 1024) + ts_wks_word
	&	(16 * 1024) + ts_wks_word
	&	(32 * 1024) + ts_wks_word
;
;
ts_dab
;
; This routine provides the handling when a DATA ABORT occurs.
; The routine will if the abort was DATA cause the program to skip over the instruction
; that caused the abort first place.
; Data aborts could come from a variety of sources, in this module we are only concerned
; about a select group of aborts. This abort routine is called instead of the "usuall"
; abort routine. All that is required from this abort routine is to set a flag to
; indicate that an abort occured. Therefore this routine needs to be told that the
; abort that caused the routine to be called is either one of mine or not, (expected
; or unexpected). To achive this &94 is placed in r7. The abort routine will check
; for the presence of &94 in r7, if present then the abort is an expected abort.
; The abort routine will then copy r7 into r6, which is used as a flag to indicate
; that an abort occured and that it was an expected abort. Then the routine will
; return control to the program at the location after the instruction that caused to
; abort to occur.
; The return address is stored by the CPU into the link regester lr (r14), sort off.
; It must be remembered that the PC is always 2 instructions ahead. E.G. if the
; instruction that causes the abort is at &2000, then the lr will have &2008 in it,
; but we want to return to the location after the abort instruction, &2004. Therefore to
; return to the correct location &04 is removed from the lr and this is put into the pc.
; If the abort was not expected then the routine will jump to the end and another
; routine will show that an unexpected abort was generated.
;
; IN:
;       r6 - Equals &00, cleared just before the instruction that could cause an abort.
;       r7 - Equals &94, set just before the instruction that could cause an abort.
;
; OUT:
;       r6 - Equals &94, set if an abort happened and was expected.
;       r7 - Equals &94, preserved.
;
        ROUT                                ; Local Branches.
;
; Check that it is an expected abort and not an unexpected abort.
;
        CMP     r7, #&94                    ; Is r7 = &94, abort expected value.
        BNE     ts_dab_unexp                ; If <> &94, Then branch to unexpected
                                            ; abort handler.
;
; It is an expected  abort, so handle it.
;
        MOV     r6, r7                      ; r6 = r7, indicates that an abort happened.
        SUB     pc, lr, #&04                ; pc = link reg - &04.
                                            ; Skip over aborting instruction.
                                            ; By reloading the pc we return to the area
                                            ; of code where the abort occured but 4
                                            ; locations further on.


 END
@


4.1
log
@Initial revision
@
text
@@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
