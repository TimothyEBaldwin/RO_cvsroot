head	4.4;
access;
symbols
	HAL_merge:4.2.2.1
	Kernel-5_48:4.3
	Kernel-5_35-4_79_2_327:4.2.2.1
	Kernel-5_35-4_79_2_326:4.2.2.1
	Kernel-5_35-4_79_2_325:4.2.2.1
	Kernel-5_35-4_79_2_324:4.2.2.1
	Kernel-5_35-4_79_2_323:4.2.2.1
	Kernel-5_35-4_79_2_322:4.2.2.1
	Kernel-5_35-4_79_2_321:4.2.2.1
	Kernel-5_35-4_79_2_320:4.2.2.1
	Kernel-5_35-4_79_2_319:4.2.2.1
	Kernel-5_35-4_79_2_318:4.2.2.1
	Kernel-5_35-4_79_2_317:4.2.2.1
	Kernel-5_35-4_79_2_316:4.2.2.1
	Kernel-5_35-4_79_2_315:4.2.2.1
	Kernel-5_35-4_79_2_314:4.2.2.1
	Kernel-5_35-4_79_2_313:4.2.2.1
	Kernel-5_35-4_79_2_312:4.2.2.1
	Kernel-5_35-4_79_2_311:4.2.2.1
	Kernel-5_35-4_79_2_310:4.2.2.1
	Kernel-5_35-4_79_2_309:4.2.2.1
	Kernel-5_35-4_79_2_308:4.2.2.1
	Kernel-5_35-4_79_2_307:4.2.2.1
	Kernel-5_35-4_79_2_306:4.2.2.1
	Kernel-5_35-4_79_2_305:4.2.2.1
	Kernel-5_35-4_79_2_304:4.2.2.1
	Kernel-5_35-4_79_2_303:4.2.2.1
	Kernel-5_35-4_79_2_302:4.2.2.1
	Kernel-5_35-4_79_2_301:4.2.2.1
	Kernel-5_35-4_79_2_300:4.2.2.1
	Kernel-5_35-4_79_2_299:4.2.2.1
	Kernel-5_35-4_79_2_298:4.2.2.1
	Kernel-5_35-4_79_2_297:4.2.2.1
	Kernel-5_35-4_79_2_296:4.2.2.1
	Kernel-5_35-4_79_2_295:4.2.2.1
	Kernel-5_35-4_79_2_294:4.2.2.1
	Kernel-5_35-4_79_2_293:4.2.2.1
	Kernel-5_35-4_79_2_292:4.2.2.1
	Kernel-5_35-4_79_2_291:4.2.2.1
	Kernel-5_35-4_79_2_290:4.2.2.1
	Kernel-5_35-4_79_2_289:4.2.2.1
	Kernel-5_35-4_79_2_288:4.2.2.1
	Kernel-5_35-4_79_2_287:4.2.2.1
	Kernel-5_35-4_79_2_286:4.2.2.1
	Kernel-5_35-4_79_2_285:4.2.2.1
	Kernel-5_35-4_79_2_284:4.2.2.1
	Kernel-5_35-4_79_2_283:4.2.2.1
	Kernel-5_35-4_79_2_282:4.2.2.1
	Kernel-5_35-4_79_2_281:4.2.2.1
	Kernel-5_35-4_79_2_280:4.2.2.1
	Kernel-5_35-4_79_2_279:4.2.2.1
	Kernel-5_35-4_79_2_278:4.2.2.1
	Kernel-5_35-4_79_2_277:4.2.2.1
	Kernel-5_35-4_79_2_276:4.2.2.1
	Kernel-5_35-4_79_2_275:4.2.2.1
	Kernel-5_35-4_79_2_274:4.2.2.1
	Kernel-5_35-4_79_2_273:4.2.2.1
	Kernel-5_35-4_79_2_272:4.2.2.1
	Kernel-5_35-4_79_2_271:4.2.2.1
	Kernel-5_35-4_79_2_270:4.2.2.1
	Kernel-5_35-4_79_2_269:4.2.2.1
	Kernel-5_35-4_79_2_268:4.2.2.1
	Kernel-5_35-4_79_2_267:4.2.2.1
	Kernel-5_35-4_79_2_266:4.2.2.1
	Kernel-5_35-4_79_2_265:4.2.2.1
	Kernel-5_35-4_79_2_264:4.2.2.1
	Kernel-5_35-4_79_2_263:4.2.2.1
	Kernel-5_35-4_79_2_262:4.2.2.1
	Kernel-5_35-4_79_2_261:4.2.2.1
	Kernel-5_35-4_79_2_260:4.2.2.1
	Kernel-5_35-4_79_2_259:4.2.2.1
	Kernel-5_35-4_79_2_258:4.2.2.1
	Kernel-5_35-4_79_2_257:4.2.2.1
	Kernel-5_35-4_79_2_256:4.2.2.1
	Kernel-5_35-4_79_2_255:4.2.2.1
	Kernel-5_35-4_79_2_254:4.2.2.1
	Kernel-5_35-4_79_2_253:4.2.2.1
	Kernel-5_35-4_79_2_252:4.2.2.1
	Kernel-5_35-4_79_2_251:4.2.2.1
	Kernel-5_35-4_79_2_250:4.2.2.1
	Kernel-5_35-4_79_2_249:4.2.2.1
	Kernel-5_35-4_79_2_248:4.2.2.1
	Kernel-5_35-4_79_2_247:4.2.2.1
	Kernel-5_35-4_79_2_246:4.2.2.1
	Kernel-5_35-4_79_2_245:4.2.2.1
	Kernel-5_35-4_79_2_244:4.2.2.1
	Kernel-5_35-4_79_2_243:4.2.2.1
	Kernel-5_35-4_79_2_242:4.2.2.1
	Kernel-5_35-4_79_2_241:4.2.2.1
	Kernel-5_35-4_79_2_240:4.2.2.1
	Kernel-5_35-4_79_2_239:4.2.2.1
	Kernel-5_35-4_79_2_238:4.2.2.1
	Kernel-5_35-4_79_2_237:4.2.2.1
	Kernel-5_35-4_79_2_236:4.2.2.1
	Kernel-5_35-4_79_2_235:4.2.2.1
	Kernel-5_35-4_79_2_234:4.2.2.1
	Kernel-5_35-4_79_2_233:4.2.2.1
	Kernel-5_35-4_79_2_232:4.2.2.1
	Kernel-5_35-4_79_2_231:4.2.2.1
	Kernel-5_35-4_79_2_230:4.2.2.1
	Kernel-5_35-4_79_2_229:4.2.2.1
	Kernel-5_35-4_79_2_228:4.2.2.1
	Kernel-5_35-4_79_2_227:4.2.2.1
	Kernel-5_35-4_79_2_226:4.2.2.1
	Kernel-5_35-4_79_2_225:4.2.2.1
	Kernel-5_35-4_79_2_224:4.2.2.1
	Kernel-5_35-4_79_2_223:4.2.2.1
	Kernel-5_35-4_79_2_222:4.2.2.1
	Kernel-5_35-4_79_2_221:4.2.2.1
	Kernel-5_35-4_79_2_220:4.2.2.1
	Kernel-5_35-4_79_2_219:4.2.2.1
	Kernel-5_35-4_79_2_218:4.2.2.1
	Kernel-5_35-4_79_2_217:4.2.2.1
	Kernel-5_35-4_79_2_216:4.2.2.1
	Kernel-5_35-4_79_2_215:4.2.2.1
	Kernel-5_35-4_79_2_214:4.2.2.1
	Kernel-5_35-4_79_2_213:4.2.2.1
	Kernel-5_35-4_79_2_212:4.2.2.1
	Kernel-5_35-4_79_2_211:4.2.2.1
	Kernel-5_35-4_79_2_210:4.2.2.1
	Kernel-5_35-4_79_2_209:4.2.2.1
	Kernel-5_35-4_79_2_208:4.2.2.1
	Kernel-5_35-4_79_2_207:4.2.2.1
	Kernel-5_35-4_79_2_206:4.2.2.1
	Kernel-5_35-4_79_2_205:4.2.2.1
	Kernel-5_35-4_79_2_204:4.2.2.1
	Kernel-5_35-4_79_2_203:4.2.2.1
	Kernel-5_35-4_79_2_202:4.2.2.1
	Kernel-5_35-4_79_2_201:4.2.2.1
	Kernel-5_35-4_79_2_200:4.2.2.1
	Kernel-5_35-4_79_2_199:4.2.2.1
	Kernel-5_35-4_79_2_198:4.2.2.1
	Kernel-5_35-4_79_2_197:4.2.2.1
	Kernel-5_35-4_79_2_196:4.2.2.1
	Kernel-5_35-4_79_2_195:4.2.2.1
	Kernel-5_35-4_79_2_194:4.2.2.1
	Kernel-5_35-4_79_2_193:4.2.2.1
	Kernel-5_35-4_79_2_192:4.2.2.1
	Kernel-5_35-4_79_2_191:4.2.2.1
	Kernel-5_35-4_79_2_190:4.2.2.1
	Kernel-5_35-4_79_2_189:4.2.2.1
	Kernel-5_35-4_79_2_188:4.2.2.1
	Kernel-5_35-4_79_2_187:4.2.2.1
	Kernel-5_35-4_79_2_186:4.2.2.1
	Kernel-5_35-4_79_2_185:4.2.2.1
	Kernel-5_35-4_79_2_184:4.2.2.1
	Kernel-5_35-4_79_2_183:4.2.2.1
	Kernel-5_35-4_79_2_182:4.2
	Kernel-5_35-4_79_2_181:4.2
	Kernel-5_35-4_79_2_180:4.2
	Kernel-5_35-4_79_2_179:4.2
	Kernel-5_35-4_79_2_178:4.2
	Kernel-5_35-4_79_2_177:4.2
	Kernel-5_35-4_79_2_176:4.2
	Kernel-5_35-4_79_2_175:4.2
	Kernel-5_35-4_79_2_174:4.2
	Kernel-5_35-4_79_2_173:4.2
	Kernel-5_35-4_79_2_172:4.2
	Kernel-5_35-4_79_2_171:4.2
	Kernel-5_35-4_79_2_170:4.2
	Kernel-5_35-4_79_2_169:4.2
	Kernel-5_35-4_79_2_168:4.2
	Kernel-5_35-4_79_2_167:4.2
	Kernel-5_35-4_79_2_166:4.2
	Kernel-5_35-4_79_2_165:4.2
	RPi_merge:4.2
	Kernel-5_35-4_79_2_147_2_23:4.2
	Kernel-5_35-4_79_2_147_2_22:4.2
	Kernel-5_35-4_79_2_147_2_21:4.2
	Kernel-5_35-4_79_2_147_2_20:4.2
	Kernel-5_35-4_79_2_147_2_19:4.2
	Kernel-5_35-4_79_2_147_2_18:4.2
	Kernel-5_35-4_79_2_164:4.2
	Kernel-5_35-4_79_2_163:4.2
	Kernel-5_35-4_79_2_147_2_17:4.2
	Kernel-5_35-4_79_2_147_2_16:4.2
	Kernel-5_35-4_79_2_147_2_15:4.2
	Kernel-5_35-4_79_2_162:4.2
	Kernel-5_35-4_79_2_161:4.2
	Kernel-5_35-4_79_2_147_2_14:4.2
	Kernel-5_35-4_79_2_147_2_13:4.2
	Kernel-5_35-4_79_2_160:4.2
	Kernel-5_35-4_79_2_159:4.2
	Kernel-5_35-4_79_2_158:4.2
	Kernel-5_35-4_79_2_157:4.2
	Kernel-5_35-4_79_2_156:4.2
	Kernel-5_35-4_79_2_147_2_12:4.2
	Kernel-5_35-4_79_2_147_2_11:4.2
	Kernel-5_35-4_79_2_155:4.2
	Kernel-5_35-4_79_2_147_2_10:4.2
	Kernel-5_35-4_79_2_154:4.2
	Kernel-5_35-4_79_2_153:4.2
	Kernel-5_35-4_79_2_147_2_9:4.2
	Kernel-5_35-4_79_2_152:4.2
	Kernel-5_35-4_79_2_151:4.2
	Kernel-5_35-4_79_2_147_2_8:4.2
	Kernel-5_35-4_79_2_147_2_7:4.2
	Kernel-5_35-4_79_2_150:4.2
	Kernel-5_35-4_79_2_147_2_6:4.2
	Kernel-5_35-4_79_2_147_2_5:4.2
	Kernel-5_35-4_79_2_149:4.2
	Kernel-5_35-4_79_2_147_2_4:4.2
	Kernel-5_35-4_79_2_147_2_3:4.2
	Kernel-5_35-4_79_2_148:4.2
	Kernel-5_35-4_79_2_147_2_2:4.2
	Kernel-5_35-4_79_2_147_2_1:4.2
	RPi:4.2.0.12
	RPi_bp:4.2
	Kernel-5_35-4_79_2_98_2_52_2_1:4.2
	alees_Kernel_dev:4.2.0.10
	alees_Kernel_dev_bp:4.2
	Kernel-5_35-4_79_2_147:4.2
	Kernel-5_35-4_79_2_146:4.2
	Kernel-5_35-4_79_2_145:4.2
	Kernel-5_35-4_79_2_144:4.2
	Kernel-5_35-4_79_2_143:4.2
	Kernel-5_35-4_79_2_142:4.2
	Kernel-5_35-4_79_2_141:4.2
	Kernel-5_35-4_79_2_140:4.2
	Kernel-5_35-4_79_2_139:4.2
	Kernel-5_35-4_79_2_138:4.2
	Kernel-5_35-4_79_2_137:4.2
	Kernel-5_35-4_79_2_136:4.2
	Kernel-5_35-4_79_2_135:4.2
	Kernel-5_35-4_79_2_134:4.2
	Kernel-5_35-4_79_2_133:4.2
	Kernel-5_35-4_79_2_132:4.2
	Kernel-5_35-4_79_2_131:4.2
	Kernel-5_35-4_79_2_130:4.2
	Kernel-5_35-4_79_2_129:4.2
	Kernel-5_35-4_79_2_128:4.2
	Kernel-5_35-4_79_2_127:4.2
	Kernel-5_35-4_79_2_126:4.2
	Kernel-5_35-4_79_2_125:4.2
	Kernel-5_35-4_79_2_124:4.2
	Kernel-5_35-4_79_2_123:4.2
	Cortex_merge:4.2
	Kernel-5_35-4_79_2_122:4.2
	Kernel-5_35-4_79_2_98_2_54:4.2
	Kernel-5_35-4_79_2_98_2_53:4.2
	Kernel-5_35-4_79_2_98_2_52:4.2
	Kernel-5_35-4_79_2_98_2_51:4.2
	Kernel-5_35-4_79_2_98_2_50:4.2
	Kernel-5_35-4_79_2_98_2_49:4.2
	Kernel-5_35-4_79_2_98_2_48:4.2
	Kernel-5_35-4_79_2_121:4.2
	Kernel-5_35-4_79_2_98_2_47:4.2
	Kernel-5_35-4_79_2_120:4.2
	Kernel-5_35-4_79_2_98_2_46:4.2
	Kernel-5_35-4_79_2_119:4.2
	Kernel-5_35-4_79_2_98_2_45:4.2
	Kernel-5_35-4_79_2_98_2_44:4.2
	Kernel-5_35-4_79_2_118:4.2
	Kernel-5_35-4_79_2_98_2_43:4.2
	Kernel-5_35-4_79_2_117:4.2
	Kernel-5_35-4_79_2_116:4.2
	Kernel-5_35-4_79_2_98_2_42:4.2
	Kernel-5_35-4_79_2_115:4.2
	Kernel-5_35-4_79_2_98_2_41:4.2
	Kernel-5_35-4_79_2_98_2_40:4.2
	Kernel-5_35-4_79_2_114:4.2
	Kernel-5_35-4_79_2_98_2_39:4.2
	Kernel-5_35-4_79_2_98_2_38:4.2
	Kernel-5_35-4_79_2_113:4.2
	Kernel-5_35-4_79_2_112:4.2
	Kernel-5_35-4_79_2_98_2_37:4.2
	Kernel-5_35-4_79_2_98_2_36:4.2
	Kernel-5_35-4_79_2_98_2_35:4.2
	Kernel-5_35-4_79_2_98_2_34:4.2
	Kernel-5_35-4_79_2_98_2_33:4.2
	Kernel-5_35-4_79_2_98_2_32:4.2
	Kernel-5_35-4_79_2_98_2_31:4.2
	Kernel-5_35-4_79_2_98_2_30:4.2
	Kernel-5_35-4_79_2_98_2_29:4.2
	Kernel-5_35-4_79_2_98_2_28:4.2
	Kernel-5_35-4_79_2_98_2_27:4.2
	Kernel-5_35-4_79_2_98_2_26:4.2
	Kernel-5_35-4_79_2_111:4.2
	Kernel-5_35-4_79_2_98_2_25:4.2
	Kernel-5_35-4_79_2_98_2_24:4.2
	Kernel-5_35-4_79_2_98_2_23:4.2
	Kernel-5_35-4_79_2_110:4.2
	Kernel-5_35-4_79_2_98_2_22:4.2
	Kernel-5_35-4_79_2_109:4.2
	Kernel-5_35-4_79_2_98_2_21:4.2
	Kernel-5_35-4_79_2_98_2_20:4.2
	Kernel-5_35-4_79_2_108:4.2
	Kernel-5_35-4_79_2_107:4.2
	Kernel-5_35-4_79_2_98_2_19:4.2
	Kernel-5_35-4_79_2_98_2_18:4.2
	Kernel-5_35-4_79_2_98_2_17:4.2
	Kernel-5_35-4_79_2_98_2_16:4.2
	Kernel-5_35-4_79_2_98_2_15:4.2
	Kernel-5_35-4_79_2_106:4.2
	Kernel-5_35-4_79_2_105:4.2
	Kernel-5_35-4_79_2_104:4.2
	Kernel-5_35-4_79_2_98_2_14:4.2
	Kernel-5_35-4_79_2_98_2_13:4.2
	Kernel-5_35-4_79_2_98_2_12:4.2
	Kernel-5_35-4_79_2_98_2_11:4.2
	Kernel-5_35-4_79_2_98_2_10:4.2
	Kernel-5_35-4_79_2_98_2_9:4.2
	Kernel-5_35-4_79_2_103:4.2
	Kernel-5_35-4_79_2_102:4.2
	Kernel-5_35-4_79_2_98_2_8:4.2
	Kernel-5_35-4_79_2_98_2_7:4.2
	Kernel-5_35-4_79_2_98_2_6:4.2
	Kernel-5_35-4_79_2_98_2_5:4.2
	Kernel-5_35-4_79_2_98_2_4:4.2
	Kernel-5_35-4_79_2_101:4.2
	Kernel-5_35-4_79_2_100:4.2
	Kernel-5_35-4_79_2_99:4.2
	Kernel-5_35-4_79_2_98_2_3:4.2
	Kernel-5_35-4_79_2_98_2_2:4.2
	Kernel-5_35-4_79_2_98_2_1:4.2
	Cortex:4.2.0.6
	Cortex_bp:4.2
	Kernel-5_35-4_79_2_98:4.2
	Kernel-5_35-4_79_2_97:4.2
	Kernel-5_35-4_79_2_96:4.2
	Kernel-5_35-4_79_2_95:4.2
	Kernel-5_35-4_79_2_94:4.2
	Kernel-5_35-4_79_2_93:4.2
	Kernel-5_35-4_79_2_92:4.2
	Kernel-5_35-4_79_2_91:4.2
	Kernel-5_35-4_79_2_90:4.2
	Kernel-5_35-4_79_2_89:4.2
	Kernel-5_35-4_79_2_88:4.2
	Kernel-5_35-4_79_2_87:4.2
	Kernel-5_35-4_79_2_86:4.2
	Kernel-5_35-4_79_2_85:4.2
	Kernel-5_35-4_79_2_84:4.2
	Kernel-5_35-4_79_2_83:4.2
	Kernel-5_35-4_79_2_82:4.2
	Kernel-5_35-4_79_2_81:4.2
	Kernel-5_35-4_79_2_80:4.2
	Kernel-5_35-4_79_2_79:4.2
	Kernel-5_35-4_79_2_78:4.2
	Kernel-5_35-4_79_2_77:4.2
	RO_5_07:4.2
	Kernel-5_35-4_79_2_76:4.2
	Kernel-5_35-4_79_2_75:4.2
	Kernel-5_35-4_79_2_74:4.2
	Kernel-5_35-4_79_2_73:4.2
	Kernel-5_35-4_79_2_72:4.2
	Kernel-5_35-4_79_2_71:4.2
	Kernel-5_35-4_79_2_70:4.2
	Kernel-5_35-4_79_2_69:4.2
	Kernel-5_35-4_79_2_68:4.2
	Kernel-5_35-4_79_2_67:4.2
	Kernel-5_35-4_79_2_66:4.2
	Kernel-5_35-4_79_2_65:4.2
	Kernel-5_35-4_79_2_64:4.2
	Kernel-5_35-4_79_2_63:4.2
	Kernel-5_35-4_79_2_62:4.2
	Kernel-5_35-4_79_2_61:4.2
	Kernel-5_35-4_79_2_59:4.2
	Kernel-5_35-4_79_2_58:4.2
	Kernel-5_35-4_79_2_57:4.2
	Kernel-5_35-4_79_2_56:4.2
	Kernel-5_35-4_79_2_55:4.2
	Kernel-5_35-4_79_2_54:4.2
	Kernel-5_35-4_79_2_53:4.2
	Kernel-5_35-4_79_2_52:4.2
	Kernel-5_35-4_79_2_51:4.2
	Kernel-5_35-4_79_2_50:4.2
	Kernel-5_35-4_79_2_49:4.2
	Kernel-5_35-4_79_2_48:4.2
	Kernel-5_47:4.2
	Kernel-5_46-4_90_2_1:4.2
	nbingham_Kernel_FastNC_dev_bp:4.2
	nbingham_Kernel_FastNC_dev:4.2.0.8
	Kernel-5_46:4.2
	Kernel-5_45:4.2
	Kernel-5_35-4_79_2_47:4.2
	Kernel-5_35-4_79_2_46:4.2
	Kernel-5_35-4_79_2_45:4.2
	Kernel-5_35-4_79_2_44:4.2
	Kernel-5_35-4_79_2_25_2_2:4.2
	Kernel-5_35-4_79_2_43:4.2
	Kernel-5_35-4_79_2_42:4.2
	Kernel-5_35-4_79_2_41:4.2
	Kernel-5_35-4_79_2_40:4.2
	Kernel-5_35-4_79_2_39:4.2
	Kernel-5_35-4_79_2_38:4.2
	Kernel-5_35-4_79_2_37:4.2
	Kernel-5_35-4_79_2_36:4.2
	Kernel-5_35-4_79_2_35:4.2
	Kernel-5_35-4_79_2_34:4.2
	Kernel-5_35-4_79_2_33:4.2
	Kernel-5_35-4_79_2_32:4.2
	Kernel-5_44:4.2
	Kernel-5_35-4_79_2_25_2_1:4.2
	Kernel-5_43:4.2
	Kernel-5_35-4_79_2_31:4.2
	Kernel-5_35-4_79_2_30:4.2
	Kernel-5_35-4_79_2_29:4.2
	Kernel-5_35-4_79_2_28:4.2
	Kernel-5_35-4_79_2_27:4.2
	Kernel-5_35-4_79_2_26:4.2
	Kernel-5_42:4.2
	Kernel-5_41:4.2
	Kernel-5_40:4.2
	Kernel-5_35-4_79_2_25:4.2
	Kernel-5_35-4_79_2_24:4.2
	Kernel-5_35-4_79_2_23:4.2
	Kernel-5_35-4_79_2_22:4.2
	Kernel-5_35-4_79_2_21:4.2
	Kernel-5_35-4_79_2_20:4.2
	Kernel-5_35-4_79_2_19:4.2
	Kernel-5_35-4_79_2_18:4.2
	Kernel-5_35-4_79_2_17:4.2
	Kernel-5_35-4_79_2_16:4.2
	Kernel-5_35-4_79_2_15:4.2
	Kernel-5_35-4_79_2_14:4.2
	Kernel-5_39:4.2
	Kernel-5_13-4_52_2_1:4.2
	Bethany:4.2.0.4
	Kernel-5_38:4.2
	Kernel-5_35-4_79_2_13:4.2
	Kernel-5_35-4_79_2_12:4.2
	Kernel-5_35-4_79_2_11:4.2
	Kernel-5_37:4.2
	Kernel-5_35-4_79_2_10:4.2
	Kernel-5_35-4_79_2_9:4.2
	Kernel-5_36:4.2
	Kernel-5_35-4_79_2_8:4.2
	Kernel-5_35-4_79_2_7:4.2
	Kernel-5_35-4_79_2_6:4.2
	Kernel-5_35-4_79_2_5:4.2
	Kernel-5_35-4_79_2_4:4.2
	Kernel-5_35-4_79_2_3:4.2
	Kernel-5_35-4_79_2_2:4.2
	dellis_autobuild_BaseSW:4.2
	Kernel-5_35-4_79_2_1:4.2
	HAL:4.2.0.2
	Kernel-5_35:4.2
	Kernel-5_34:4.2
	Kernel-5_33:4.2
	Kernel-5_32:4.2
	Kernel-5_31:4.2
	Kernel-5_30:4.2
	Kernel-5_29:4.2
	Kernel-5_28:4.2
	Kernel-5_27:4.2
	Kernel-5_26:4.2
	Kernel-5_25:4.2
	Kernel-5_24:4.2
	Kernel-5_23:4.2
	Kernel-5_22:4.2
	sbrodie_sedwards_16Mar2000:4.2
	Kernel-5_21:4.2
	Kernel-5_20:4.2
	Kernel-5_19:4.2
	Kernel-5_18:4.2
	Kernel-5_17:4.2
	Kernel-5_16:4.2
	Kernel-5_15:4.2
	Kernel-5_14:4.2
	Kernel-5_13:4.2
	Kernel-5_12:4.2
	Kernel-5_11:4.2
	Kernel-5_10:4.2
	Kernel-5_09:4.2
	Kernel-5_08:4.2
	Kernel-5_07:4.2
	Kernel-5_06:4.2
	Kernel-5_05:4.2
	Kernel-5_04:4.2
	Kernel-5_03:4.2
	Kernel-5_02:4.2
	Kernel-5_01:4.2
	Kernel-5_00:4.2
	Kernel-4_99:4.2
	Kernel-4_98:4.2
	Kernel-4_97:4.2
	Kernel-4_96:4.2
	Kernel-4_95:4.2
	Kernel-4_94:4.2
	Kernel-4_93:4.2
	Kernel-4_92:4.2
	Kernel-4_91:4.2
	Kernel-4_90:4.2
	dcotton_autobuild_BaseSW:4.2
	Kernel-4_89:4.2
	Kernel-4_88:4.2
	Kernel-4_87:4.2
	Kernel-4_86:4.2
	Kernel-4_85:4.2
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1
	Kernel-4_84:4.2
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1
	Ursula_RiscPC_bp:4.1
	Kernel-4_83:4.2
	Kernel-4_82:4.2
	Kernel-4_81:4.2
	Kernel-4_80:4.2
	Kernel-4_79:4.2
	Kernel-4_78:4.2
	Kernel-4_77:4.2
	Kernel-4_76:4.2
	Kernel-4_75:4.2
	Kernel-4_74:4.2
	Kernel-4_73:4.2
	Kernel-4_72:4.2
	Kernel-4_71:4.2
	Kernel-4_70:4.2
	Kernel-4_69:4.2
	Kernel-4_68:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	Kernel-4_63-1_1_2_5:4.1.7.5
	Kernel-4_63-1_1_2_4:4.1.7.5
	Kernel-4_67:4.2
	Kernel-4_66:4.2
	Kernel-4_63-1_1_2_3:4.1.7.5
	Kernel-4_65:4.2
	Ursula_merge:4.1
	Kernel-4_64:4.2
	mstphens_Kernel-3_81:4.1
	Kernel-4_63-1_1_2_2:4.1.7.5
	nicke_Kernel_4_62:4.1.7.5
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	nturton_v459:4.1.7.4
	nturton_v460:4.1.7.4
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	mstphens_Kernel-3_80:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	afrost_Boca-1_2-Beta:4.1.7.4
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.4
	Spinner_B20_2:4.1.7.4
	Spinner_19_3:4.1.7.4
	Spinner_B18:4.1.7.4
	Spinner_B17:4.1.7.4
	Spinner_B15:4.1.7.4
	Spinner_B14:4.1.7.4
	Spinner_B13:4.1.7.4
	Spinner_B12:4.1.7.4
	Spinner_B10:4.1.7.4
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Spinner_B7:4.1.7.4
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.5
	MergeFiles:4.1.7.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1;
locks; strict;
comment	@# @;


4.4
date	2016.06.30.20.28.48;	author jlee;	state dead;
branches;
next	4.3;
commitid	lMnWzoE9eJz3Wwcz;

4.3
date	2016.06.30.20.07.52;	author jlee;	state Exp;
branches;
next	4.2;
commitid	IWoXxARWeuLDOwcz;

4.2
date	98.09.30.08.42.10;	author kbracey;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.21.12.14.21;	author nturton;	state Exp;
branches
	4.1.5.1
	4.1.7.1;
next	;

4.2.2.1
date	2013.01.27.17.50.21;	author rsprowson;	state Exp;
branches;
next	;
commitid	tDlfhdSfOxFReSBw;

4.1.5.1
date	96.11.21.12.14.21;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.05.24;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.04.28.11.58.52;	author scormie;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.04.29.09.52.39;	author scormie;	state Exp;
branches;
next	4.1.7.4;

4.1.7.4
date	97.04.29.14.57.58;	author nturton;	state Exp;
branches;
next	4.1.7.5;

4.1.7.5
date	98.08.12.12.16.26;	author nicke;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Delete pre-HAL and 26bit code
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * HAL
  * HAL26
  * HAL32
  * No26bitCode
  * No32bitCode
  * IncludeTestSrc
  * FixR9CorruptionInExtensionSWI
  Various old files have also been removed (POST code, Arc/STB keyboard drivers, etc.)
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.49. Tagged as 'Kernel-5_49'
@
text
@; > TestSrc.ROMCard

	TTL NCOS Support for ROM Cards
;
; Tests for presence of a 2,4 or 8MB OS image in 2nd ROM bank and jumps to it.
;
; This doesn't really belong in the POST sources, but lives here because it
; needs to happen soon after boot. This file is included inline by Begin before
; it starts calculating the ROM checksum
;
; Relies on width of the 2nd ROM bank already being set to 32bit.
; If 16bit extension ROM support is required then s.ARM600 must set ROMCR1 back
; to 16bit-wide.
;
; No registers are preserved and, unlike some other parts of the POST code, it
; assumes it is running on a fully-functional ARM & IOMD.
;


;------------------------------------------------------------------------
; History
;
; Date		Name	Comment
; ----		----	-------
; 16-Aug-96	JRH	First release
; 05-Sep-96	BAR	Add code to switch out the progress colour screens.
;			See begin (2.17 for details).
; 05-Aug-98     NCE     Changes for Customer F maintainance OS.
;                       Front panel button skips lookng for ROM banks.
;                       Support for 3rd Rom bank.


;	Can't have CanLiveOnROMCard TRUE without ROMCardSupport
	ASSERT	ROMCardSupport

; Offset from start of ROM to word containing ROM size.
                GBLA    ROMSizeOffset
ROMSizeOffset   SETA    &60

	GBLL	DebugROMCard
DebugROMCard	SETL	{FALSE}

ts_RC_1meg      *       (1*1024*1024)
ts_RC_MinOSsize	*	(2*1024*1024)
ts_RC_MaxOSsize	*	(8*1024*1024)
ts_RC_2ndbank	*	(16*1024*1024)
ts_RC_3rdbank   *       (24*1024*1024)
ts_RC_idoffset	*	-16			; offset from end of image


ROMCardTest	ROUT

; DEBUG: set up VIDC for VGA, assuming 32M clock
  [ DebugROMCard
        MOV     r1, #ts_VIDCPhys
        LDR     r0, =&40ffffff			; White
        STR     r0, [r1]
  ]

  [ CanLiveOnROMCard
  	CMP    pc, #ts_RC_2ndbank  		;skip this stuff if already 
  	BGT    %FT99               		;running in 2nd bank of higher
  ]
  
  [  IOMD_C_FrontPanelButton <> 0 
   [ :LNOT: FrontPanelButtClearsCMOS
     MOV     r0, #IOMD_Base          ; if front panel button pressed then skip this       
     LDRB    r0, [r0, #IOMD_CLINES]  ; stuff and run the maintainance OS 
     TST     r0, #IOMD_C_FrontPanelButton
     BEQ     %FT99
   ]   
  ]

  [ DebugROMCard
        LDR     r0, =&4000ffff			; Yellow
        STR     r0, [r1]
  ]


        MOV     r3,#ts_RC_3rdbank            ;lr contains the address of the ROM were looking for
                                             
40
        MOV     r12, r3                         ; try to pull ROM size out of the image
        LDR     r12, [r12, #ROMSizeOffset]      ; if this fails then we will start at r3 and work up
        CMP	r12, #ts_RC_MaxOSsize
        BHI	%FT90

ts_RC_idword	=	"NCOS"			; id string
ts_RC_LDRPCInst	&	&E59FF

00
	ADD	r2, r12, r3		; end of image
	LDR	r1, ts_RC_idword		; id word to look for
	LDR	r0, [r2, #ts_RC_idoffset]
	CMP	r0, r1
	BNE	%FT90				; try next size if no match

; Found the id string, now see if it checksums to 0.
; Following code ripped off from Mem3.
;
; r0 IS A POINTER TO THE LOCATIONS IN MEMORY.
; r1 HAS THE CALCULATED CHECKSUM.
; r2 HOLDS A COUNTER INDICATION HOW MANY WORDS ARE LEFT TO GET
; r3 is a temporary variable (no it isn't)
; r4 TO r11 ARE USED TO LOAD THE CONTENTS OF 8 LOCATIONS FROM THE ROM.
;
  [ DebugROMCard
        MOV     r1,#ts_VIDCPhys
        LDR     r0, =&407f7fff			; Fetching Pink
        STR     r0, [r1]
  ]
	MOV	r1, #&00			; initialise accumulator
	MOV	r0, r3          		; initialise pointer
	ADD	r2, r0, r12			; initialise endstop, >= 8 words
	SUB	r2, r2, #(8 * 4)		;  below the real endpoint

RC_loop1
	LDMIA	r0!, {r4 - r11}			; get 8 words & post-inc
01
	ADD	r1, r1,	r4
	ADD	r1, r1,	r5
	ADD	r1, r1,	r6
	ADD	r1, r1,	r7
	ADD	r1, r1,	r8
	ADD	r1, r1,	r9
	ADD	r1, r1,	r10
	ADD	r1, r1,	r11
02
	ASSERT ((%02 - %01) = 32)	; else r2 won't count down correctly

	CMP	r0, r2
	BNE	RC_loop1		; loop until pointer reaches endstop

	LDMIA	r0, {r4 - r9}		; get last 6 words (miss last 2 in ROM)
03
	ADD	r1, r1,	r4
	ADD	r1, r1,	r5
	ADD	r1, r1,	r6
	ADD	r1, r1,	r7
	ADD	r1, r1,	r8
	ADDS	r1, r1,	r9			; NOTE: Z set => checksum OK
04
	ASSERT	(((%04 - %03) + (2*4)) = 32)

	BNE	%FT90				; Skip if checksum not zero

; We have a valid image. Now work out where to jump to in it.
; Can't just jump to the start because 1st instruction is an LDR PC.
; Code ripped off from Tim's Softloader (thanks Tim)

  	[ DontShowProgressColours
  	; Display "Jumping to 2nd ROM bank" colour

        MOV_fiq r0,r12_fiq              	; restore the faultcode bits
        ANDS    r0,r0,#(R_EXTERN :OR: R_TESTED)	; If test adapter present,
			                   	; NE : Adaptor fitted, show progress.
 	           				; EQ : No Adaptor fitted, don't show progress
	BEQ	%FT10				; EQ : Don't show colours
	]
        MOV	r1, #ts_VIDCPhys
        LDR	r0, =C_2NDBANK
        STR	r0, [r1]
10

  [ DebugROMCard
; Delay
	MOV	r0, #0
	MOV	r1, #(2*1024*1024)
15
	LDMIA	r0!, {r2}
	CMP	r0, r1
	BNE	%BT15
  ]
	MOV	r0, r3          		; start of 2nd ROM image
	LDR	r6, [r0]			; load 1st instruction of ROM image
	AND	r2, r6, #&FF000000
	TEQ	r2, #&EA000000			; is it a branch
	BNE	%FT20				; [no, so try something else]

	MOV	r6, r6, LSL #(32-21)		; extract offset within ROM
	ADD	r0, r0, r6, LSR #(32-21-2)	; convert to byte offset
	ADD     pc, r0, #8			; allow for pre-fetch

; check for LDR PC, [PC, +/-#x]
20	MOV     r4, r6, LSR #12
	LDR     r5, ts_RC_LDRPCInst
	ORR	r4, r4, #1 << (23-12)
	TEQ	r4, r5
30	; endlessloop
	BNE	%BT30				; not either, so stuck

	EOR	r6, r6, r4, LSL #12		; extract offset, and up/down bit
	TST	r6, #1 << 23			; NE => bit was 0, so -ve
	RSBNE	r6, r6, #1 << 23		; get rid of bit 23 and negate
	ADD	r6, r6, #8			; offset in ROM we're reading
	LDR	r6, [r0, r6]			; address to jump to
	ADD	pc, r0, r6			; jump to it

; Try the other ROM bank
90
        CMP     r3, #ts_RC_2ndbank              
        BEQ     %FT91
        MOV     r3,#ts_RC_2ndbank
        B       %BT40

91
  [ DebugROMCard
        MOV	r1, #ts_VIDCPhys
        LDR	r0, =&407fff7f			; Pale Green
        STR	r0, [r1]
; Delay
	MOV	r0, #0
	MOV	r1, #(2*1024*1024)
95
	LDMIA	r0!, {r2}
	CMP	r0, r1
	BNE	%BT95

	B	%FT99				; No image found

	LTORG
  ]

; Fall through to POST code
99
	END
@


4.3
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@@


4.2
log
@Spinner branch merged.
Bandwidth limit for 7500FE fixed.
RO371Timings flag set to :LNOT:STB

Version 4.64. Tagged as 'Kernel-4_64'
@
text
@d36 4
@


4.2.2.1
log
@Adopt some switches from Hdr:Machine/Machine
SystemName, ROMSizeOffset, HAL32, HAL26 only used here, moved here.
Remove uses of "M_" booleans, apparently that's bad form.
Fix SWIDespatch_Size for the non thumb capable case (was ASSERTing).
Swapped UserMemStart for AppSpaceStart.
Removed last use of OldComboSupport (pre Medusa!).
Removed switch 'CDVPoduleIRQs', a correction to the machine definitions mean this can now simply be switched on NumberOfPodules (previously, IOMD couldn't chain podule interrupts).
Take out disabled sub interrupt support - it's in CVS if you want to try to get it working.
Moved ConfiguredLang to 11 for everyone, it only matters if !Boot fails, and no harm in making it common for 5.xx onwards.

Version 5.35, 4.79.2.183. Tagged as 'Kernel-5_35-4_79_2_183'
@
text
@a35 4
; Offset from start of ROM to word containing ROM size.
                GBLA    ROMSizeOffset
ROMSizeOffset   SETA    &60

@


4.1
log
@Initial revision
@
text
@d18 2
d28 3
d39 1
d43 1
d57 11
a67 2
	TST	pc, #ts_RC_2ndbank		; running out of 2nd ROM bank?
	BNE	%FT99				; skip all this if so
d75 8
a82 2
	MOV	r12, #ts_RC_MinOSsize		; start with this size image
	B	%FT00
d88 1
a88 1
	ADD	r2, r12, #ts_RC_2ndbank		; end of image
d109 1
a109 1
	MOV	r0, #ts_RC_2ndbank 		; initialise pointer
d170 3
a172 3
	MOV	r0, #ts_RC_2ndbank		; start of 2nd ROM image
	LDR	r3, [r0]			; load 1st instruction of ROM image
	AND	r2, r3, #&FF000000
d176 2
a177 2
	MOV	r3, r3, LSL #(32-21)		; extract offset within ROM
	ADD	r0, r0, r3, LSR #(32-21-2)	; convert to byte offset
d181 1
a181 1
20	MOV     r4, r3, LSR #12
d188 13
a200 11
	EOR	r3, r3, r4, LSL #12		; extract offset, and up/down bit
	TST	r3, #1 << 23			; NE => bit was 0, so -ve
	RSBNE	r3, r3, #1 << 23		; get rid of bit 23 and negate
	ADD	r3, r3, #8			; offset in ROM we're reading
	LDR	r3, [r0, r3]			; address to jump to
	ADD	pc, r0, r3			; jump to it

; Try next image size up
90	MOV	r12, r12, LSL #1		; double the size
	CMP	r12, #ts_RC_MaxOSsize
	BLE	%BT00
d202 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Try pulling ROM size from second ROM bank before scanning for ROM id.
@
text
@a33 1
ts_RC_1meg      *       (1*1024*1024)
d59 1
a59 3
	MOV	r14, #ts_RC_MinOSsize
        MOV     r12, #ts_RC_2ndbank             ; try to pull ROM size out of the image
        LDR     r12, [r12, #ROMSizeOffset]      ; if this fails then we will start at r14 and work up
d174 3
a176 5
90
        ADD     r14, r14, #ts_RC_1meg           ; assume ROMs are multiples of 1 meg
        CMP     r14, #ts_RC_MaxOSsize
        MOVLE   r12, r14
        BLE     %BT00
@


4.1.7.3
log
@If reading ROM size from image fails then start at 2M and work up.
@
text
@d60 1
a60 1
	MOV	r14, #ts_RC_MinOSsize - ts_RC_1meg
@


4.1.7.4
log
@Range check ROM card size, and shuffle registers
@
text
@d60 1
a60 1
	MOV	r3, #ts_RC_MinOSsize - ts_RC_1meg
d62 1
a62 3
        LDR     r12, [r12, #ROMSizeOffset]      ; if this fails then we will start at r3 and work up
        CMP	r12, #ts_RC_MaxOSsize
        BHI	%FT90
d152 2
a153 2
	LDR	r6, [r0]			; load 1st instruction of ROM image
	AND	r2, r6, #&FF000000
d157 2
a158 2
	MOV	r6, r6, LSL #(32-21)		; extract offset within ROM
	ADD	r0, r0, r6, LSR #(32-21-2)	; convert to byte offset
d162 1
a162 1
20	MOV     r4, r6, LSR #12
d169 6
a174 6
	EOR	r6, r6, r4, LSL #12		; extract offset, and up/down bit
	TST	r6, #1 << 23			; NE => bit was 0, so -ve
	RSBNE	r6, r6, #1 << 23		; get rid of bit 23 and negate
	ADD	r6, r6, #8			; offset in ROM we're reading
	LDR	r6, [r0, r6]			; address to jump to
	ADD	pc, r0, r6			; jump to it
d178 4
a181 4
        ADD     r3, r3, #ts_RC_1meg           ; assume ROMs are multiples of 1 meg
        CMP     r3, #ts_RC_MaxOSsize
        MOVLE   r12, r3
;        BLE     %BT00
@


4.1.7.5
log
@Added 3rd ROM support for Customer F
@
text
@a17 2


a25 3
; 05-Aug-98     NCE     Changes for Customer F maintainance OS.
;                       Front panel button skips lookng for ROM banks.
;                       Support for 3rd Rom bank.
a37 1
ts_RC_3rdbank   *       (24*1024*1024)
d51 2
a52 11
  	CMP    pc, #ts_RC_2ndbank  		;skip this stuff if already 
  	BGT    %FT99               		;running in 2nd bank of higher
  ]
  
  [  IOMD_C_FrontPanelButton <> 0 
   [ :LNOT: FrontPanelButtClearsCMOS
     MOV     r0, #IOMD_Base          ; if front panel button pressed then skip this       
     LDRB    r0, [r0, #IOMD_CLINES]  ; stuff and run the maintainance OS 
     TST     r0, #IOMD_C_FrontPanelButton
     BEQ     %FT99
   ]   
d60 2
a61 5

        MOV     r3,#ts_RC_3rdbank            ;lr contains the address of the ROM were looking for
                                             
40
        MOV     r12, r3                         ; try to pull ROM size out of the image
d65 1
d71 1
a71 1
	ADD	r2, r12, r3		; end of image
d92 1
a92 1
	MOV	r0, r3          		; initialise pointer
d153 1
a153 1
	MOV	r0, r3          		; start of 2nd ROM image
d178 1
a178 1
; Try the other ROM bank
d180 4
a183 4
        CMP     r3, #ts_RC_2ndbank              
        BEQ     %FT91
        MOV     r3,#ts_RC_2ndbank
        B       %BT40
a184 1
91
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@
