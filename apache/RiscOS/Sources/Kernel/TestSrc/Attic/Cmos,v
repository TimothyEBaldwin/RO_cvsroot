head	4.4;
access;
symbols
	HAL_merge:4.2.2.1
	Kernel-5_48:4.3
	Kernel-5_35-4_79_2_327:4.2.2.1
	Kernel-5_35-4_79_2_326:4.2.2.1
	Kernel-5_35-4_79_2_325:4.2.2.1
	Kernel-5_35-4_79_2_324:4.2.2.1
	Kernel-5_35-4_79_2_323:4.2.2.1
	Kernel-5_35-4_79_2_322:4.2.2.1
	Kernel-5_35-4_79_2_321:4.2.2.1
	Kernel-5_35-4_79_2_320:4.2.2.1
	Kernel-5_35-4_79_2_319:4.2.2.1
	Kernel-5_35-4_79_2_318:4.2.2.1
	Kernel-5_35-4_79_2_317:4.2.2.1
	Kernel-5_35-4_79_2_316:4.2.2.1
	Kernel-5_35-4_79_2_315:4.2.2.1
	Kernel-5_35-4_79_2_314:4.2.2.1
	Kernel-5_35-4_79_2_313:4.2.2.1
	Kernel-5_35-4_79_2_312:4.2.2.1
	Kernel-5_35-4_79_2_311:4.2.2.1
	Kernel-5_35-4_79_2_310:4.2.2.1
	Kernel-5_35-4_79_2_309:4.2.2.1
	Kernel-5_35-4_79_2_308:4.2.2.1
	Kernel-5_35-4_79_2_307:4.2.2.1
	Kernel-5_35-4_79_2_306:4.2.2.1
	Kernel-5_35-4_79_2_305:4.2.2.1
	Kernel-5_35-4_79_2_304:4.2.2.1
	Kernel-5_35-4_79_2_303:4.2.2.1
	Kernel-5_35-4_79_2_302:4.2.2.1
	Kernel-5_35-4_79_2_301:4.2.2.1
	Kernel-5_35-4_79_2_300:4.2.2.1
	Kernel-5_35-4_79_2_299:4.2.2.1
	Kernel-5_35-4_79_2_298:4.2.2.1
	Kernel-5_35-4_79_2_297:4.2.2.1
	Kernel-5_35-4_79_2_296:4.2.2.1
	Kernel-5_35-4_79_2_295:4.2.2.1
	Kernel-5_35-4_79_2_294:4.2.2.1
	Kernel-5_35-4_79_2_293:4.2.2.1
	Kernel-5_35-4_79_2_292:4.2.2.1
	Kernel-5_35-4_79_2_291:4.2.2.1
	Kernel-5_35-4_79_2_290:4.2.2.1
	Kernel-5_35-4_79_2_289:4.2.2.1
	Kernel-5_35-4_79_2_288:4.2.2.1
	Kernel-5_35-4_79_2_287:4.2.2.1
	Kernel-5_35-4_79_2_286:4.2.2.1
	Kernel-5_35-4_79_2_285:4.2.2.1
	Kernel-5_35-4_79_2_284:4.2.2.1
	Kernel-5_35-4_79_2_283:4.2.2.1
	Kernel-5_35-4_79_2_282:4.2.2.1
	Kernel-5_35-4_79_2_281:4.2.2.1
	Kernel-5_35-4_79_2_280:4.2.2.1
	Kernel-5_35-4_79_2_279:4.2.2.1
	Kernel-5_35-4_79_2_278:4.2.2.1
	Kernel-5_35-4_79_2_277:4.2.2.1
	Kernel-5_35-4_79_2_276:4.2.2.1
	Kernel-5_35-4_79_2_275:4.2.2.1
	Kernel-5_35-4_79_2_274:4.2.2.1
	Kernel-5_35-4_79_2_273:4.2.2.1
	Kernel-5_35-4_79_2_272:4.2.2.1
	Kernel-5_35-4_79_2_271:4.2.2.1
	Kernel-5_35-4_79_2_270:4.2.2.1
	Kernel-5_35-4_79_2_269:4.2.2.1
	Kernel-5_35-4_79_2_268:4.2.2.1
	Kernel-5_35-4_79_2_267:4.2.2.1
	Kernel-5_35-4_79_2_266:4.2.2.1
	Kernel-5_35-4_79_2_265:4.2.2.1
	Kernel-5_35-4_79_2_264:4.2.2.1
	Kernel-5_35-4_79_2_263:4.2.2.1
	Kernel-5_35-4_79_2_262:4.2.2.1
	Kernel-5_35-4_79_2_261:4.2.2.1
	Kernel-5_35-4_79_2_260:4.2.2.1
	Kernel-5_35-4_79_2_259:4.2.2.1
	Kernel-5_35-4_79_2_258:4.2.2.1
	Kernel-5_35-4_79_2_257:4.2.2.1
	Kernel-5_35-4_79_2_256:4.2.2.1
	Kernel-5_35-4_79_2_255:4.2.2.1
	Kernel-5_35-4_79_2_254:4.2.2.1
	Kernel-5_35-4_79_2_253:4.2.2.1
	Kernel-5_35-4_79_2_252:4.2.2.1
	Kernel-5_35-4_79_2_251:4.2.2.1
	Kernel-5_35-4_79_2_250:4.2.2.1
	Kernel-5_35-4_79_2_249:4.2.2.1
	Kernel-5_35-4_79_2_248:4.2.2.1
	Kernel-5_35-4_79_2_247:4.2.2.1
	Kernel-5_35-4_79_2_246:4.2.2.1
	Kernel-5_35-4_79_2_245:4.2.2.1
	Kernel-5_35-4_79_2_244:4.2.2.1
	Kernel-5_35-4_79_2_243:4.2.2.1
	Kernel-5_35-4_79_2_242:4.2.2.1
	Kernel-5_35-4_79_2_241:4.2.2.1
	Kernel-5_35-4_79_2_240:4.2.2.1
	Kernel-5_35-4_79_2_239:4.2.2.1
	Kernel-5_35-4_79_2_238:4.2.2.1
	Kernel-5_35-4_79_2_237:4.2.2.1
	Kernel-5_35-4_79_2_236:4.2.2.1
	Kernel-5_35-4_79_2_235:4.2.2.1
	Kernel-5_35-4_79_2_234:4.2.2.1
	Kernel-5_35-4_79_2_233:4.2.2.1
	Kernel-5_35-4_79_2_232:4.2.2.1
	Kernel-5_35-4_79_2_231:4.2.2.1
	Kernel-5_35-4_79_2_230:4.2.2.1
	Kernel-5_35-4_79_2_229:4.2.2.1
	Kernel-5_35-4_79_2_228:4.2.2.1
	Kernel-5_35-4_79_2_227:4.2.2.1
	Kernel-5_35-4_79_2_226:4.2.2.1
	Kernel-5_35-4_79_2_225:4.2.2.1
	Kernel-5_35-4_79_2_224:4.2.2.1
	Kernel-5_35-4_79_2_223:4.2.2.1
	Kernel-5_35-4_79_2_222:4.2.2.1
	Kernel-5_35-4_79_2_221:4.2.2.1
	Kernel-5_35-4_79_2_220:4.2.2.1
	Kernel-5_35-4_79_2_219:4.2.2.1
	Kernel-5_35-4_79_2_218:4.2.2.1
	Kernel-5_35-4_79_2_217:4.2.2.1
	Kernel-5_35-4_79_2_216:4.2.2.1
	Kernel-5_35-4_79_2_215:4.2.2.1
	Kernel-5_35-4_79_2_214:4.2.2.1
	Kernel-5_35-4_79_2_213:4.2.2.1
	Kernel-5_35-4_79_2_212:4.2.2.1
	Kernel-5_35-4_79_2_211:4.2.2.1
	Kernel-5_35-4_79_2_210:4.2.2.1
	Kernel-5_35-4_79_2_209:4.2.2.1
	Kernel-5_35-4_79_2_208:4.2.2.1
	Kernel-5_35-4_79_2_207:4.2.2.1
	Kernel-5_35-4_79_2_206:4.2.2.1
	Kernel-5_35-4_79_2_205:4.2.2.1
	Kernel-5_35-4_79_2_204:4.2.2.1
	Kernel-5_35-4_79_2_203:4.2.2.1
	Kernel-5_35-4_79_2_202:4.2.2.1
	Kernel-5_35-4_79_2_201:4.2.2.1
	Kernel-5_35-4_79_2_200:4.2.2.1
	Kernel-5_35-4_79_2_199:4.2.2.1
	Kernel-5_35-4_79_2_198:4.2.2.1
	Kernel-5_35-4_79_2_197:4.2.2.1
	Kernel-5_35-4_79_2_196:4.2.2.1
	Kernel-5_35-4_79_2_195:4.2.2.1
	Kernel-5_35-4_79_2_194:4.2.2.1
	Kernel-5_35-4_79_2_193:4.2.2.1
	Kernel-5_35-4_79_2_192:4.2.2.1
	Kernel-5_35-4_79_2_191:4.2.2.1
	Kernel-5_35-4_79_2_190:4.2.2.1
	Kernel-5_35-4_79_2_189:4.2.2.1
	Kernel-5_35-4_79_2_188:4.2.2.1
	Kernel-5_35-4_79_2_187:4.2.2.1
	Kernel-5_35-4_79_2_186:4.2.2.1
	Kernel-5_35-4_79_2_185:4.2.2.1
	Kernel-5_35-4_79_2_184:4.2.2.1
	Kernel-5_35-4_79_2_183:4.2.2.1
	Kernel-5_35-4_79_2_182:4.2.2.1
	Kernel-5_35-4_79_2_181:4.2.2.1
	Kernel-5_35-4_79_2_180:4.2.2.1
	Kernel-5_35-4_79_2_179:4.2.2.1
	Kernel-5_35-4_79_2_178:4.2.2.1
	Kernel-5_35-4_79_2_177:4.2.2.1
	Kernel-5_35-4_79_2_176:4.2.2.1
	Kernel-5_35-4_79_2_175:4.2.2.1
	Kernel-5_35-4_79_2_174:4.2.2.1
	Kernel-5_35-4_79_2_173:4.2.2.1
	Kernel-5_35-4_79_2_172:4.2.2.1
	Kernel-5_35-4_79_2_171:4.2.2.1
	Kernel-5_35-4_79_2_170:4.2.2.1
	Kernel-5_35-4_79_2_169:4.2.2.1
	Kernel-5_35-4_79_2_168:4.2.2.1
	Kernel-5_35-4_79_2_167:4.2.2.1
	Kernel-5_35-4_79_2_166:4.2.2.1
	Kernel-5_35-4_79_2_165:4.2.2.1
	RPi_merge:4.2.2.1
	Kernel-5_35-4_79_2_147_2_23:4.2.2.1
	Kernel-5_35-4_79_2_147_2_22:4.2.2.1
	Kernel-5_35-4_79_2_147_2_21:4.2.2.1
	Kernel-5_35-4_79_2_147_2_20:4.2.2.1
	Kernel-5_35-4_79_2_147_2_19:4.2.2.1
	Kernel-5_35-4_79_2_147_2_18:4.2.2.1
	Kernel-5_35-4_79_2_164:4.2.2.1
	Kernel-5_35-4_79_2_163:4.2.2.1
	Kernel-5_35-4_79_2_147_2_17:4.2.2.1
	Kernel-5_35-4_79_2_147_2_16:4.2.2.1
	Kernel-5_35-4_79_2_147_2_15:4.2.2.1
	Kernel-5_35-4_79_2_162:4.2.2.1
	Kernel-5_35-4_79_2_161:4.2.2.1
	Kernel-5_35-4_79_2_147_2_14:4.2.2.1
	Kernel-5_35-4_79_2_147_2_13:4.2.2.1
	Kernel-5_35-4_79_2_160:4.2.2.1
	Kernel-5_35-4_79_2_159:4.2.2.1
	Kernel-5_35-4_79_2_158:4.2.2.1
	Kernel-5_35-4_79_2_157:4.2.2.1
	Kernel-5_35-4_79_2_156:4.2.2.1
	Kernel-5_35-4_79_2_147_2_12:4.2.2.1
	Kernel-5_35-4_79_2_147_2_11:4.2.2.1
	Kernel-5_35-4_79_2_155:4.2.2.1
	Kernel-5_35-4_79_2_147_2_10:4.2.2.1
	Kernel-5_35-4_79_2_154:4.2.2.1
	Kernel-5_35-4_79_2_153:4.2.2.1
	Kernel-5_35-4_79_2_147_2_9:4.2.2.1
	Kernel-5_35-4_79_2_152:4.2.2.1
	Kernel-5_35-4_79_2_151:4.2.2.1
	Kernel-5_35-4_79_2_147_2_8:4.2.2.1
	Kernel-5_35-4_79_2_147_2_7:4.2.2.1
	Kernel-5_35-4_79_2_150:4.2.2.1
	Kernel-5_35-4_79_2_147_2_6:4.2.2.1
	Kernel-5_35-4_79_2_147_2_5:4.2.2.1
	Kernel-5_35-4_79_2_149:4.2.2.1
	Kernel-5_35-4_79_2_147_2_4:4.2.2.1
	Kernel-5_35-4_79_2_147_2_3:4.2.2.1
	Kernel-5_35-4_79_2_148:4.2.2.1
	Kernel-5_35-4_79_2_147_2_2:4.2.2.1
	Kernel-5_35-4_79_2_147_2_1:4.2.2.1
	RPi:4.2.2.1.0.6
	RPi_bp:4.2.2.1
	Kernel-5_35-4_79_2_98_2_52_2_1:4.2.2.1
	alees_Kernel_dev:4.2.2.1.0.4
	alees_Kernel_dev_bp:4.2.2.1
	Kernel-5_35-4_79_2_147:4.2.2.1
	Kernel-5_35-4_79_2_146:4.2.2.1
	Kernel-5_35-4_79_2_145:4.2.2.1
	Kernel-5_35-4_79_2_144:4.2.2.1
	Kernel-5_35-4_79_2_143:4.2.2.1
	Kernel-5_35-4_79_2_142:4.2.2.1
	Kernel-5_35-4_79_2_141:4.2.2.1
	Kernel-5_35-4_79_2_140:4.2.2.1
	Kernel-5_35-4_79_2_139:4.2.2.1
	Kernel-5_35-4_79_2_138:4.2.2.1
	Kernel-5_35-4_79_2_137:4.2.2.1
	Kernel-5_35-4_79_2_136:4.2.2.1
	Kernel-5_35-4_79_2_135:4.2.2.1
	Kernel-5_35-4_79_2_134:4.2.2.1
	Kernel-5_35-4_79_2_133:4.2.2.1
	Kernel-5_35-4_79_2_132:4.2.2.1
	Kernel-5_35-4_79_2_131:4.2.2.1
	Kernel-5_35-4_79_2_130:4.2.2.1
	Kernel-5_35-4_79_2_129:4.2.2.1
	Kernel-5_35-4_79_2_128:4.2.2.1
	Kernel-5_35-4_79_2_127:4.2.2.1
	Kernel-5_35-4_79_2_126:4.2.2.1
	Kernel-5_35-4_79_2_125:4.2.2.1
	Kernel-5_35-4_79_2_124:4.2.2.1
	Kernel-5_35-4_79_2_123:4.2.2.1
	Cortex_merge:4.2.2.1
	Kernel-5_35-4_79_2_122:4.2.2.1
	Kernel-5_35-4_79_2_98_2_54:4.2.2.1
	Kernel-5_35-4_79_2_98_2_53:4.2.2.1
	Kernel-5_35-4_79_2_98_2_52:4.2.2.1
	Kernel-5_35-4_79_2_98_2_51:4.2.2.1
	Kernel-5_35-4_79_2_98_2_50:4.2.2.1
	Kernel-5_35-4_79_2_98_2_49:4.2.2.1
	Kernel-5_35-4_79_2_98_2_48:4.2.2.1
	Kernel-5_35-4_79_2_121:4.2.2.1
	Kernel-5_35-4_79_2_98_2_47:4.2.2.1
	Kernel-5_35-4_79_2_120:4.2.2.1
	Kernel-5_35-4_79_2_98_2_46:4.2.2.1
	Kernel-5_35-4_79_2_119:4.2.2.1
	Kernel-5_35-4_79_2_98_2_45:4.2.2.1
	Kernel-5_35-4_79_2_98_2_44:4.2.2.1
	Kernel-5_35-4_79_2_118:4.2.2.1
	Kernel-5_35-4_79_2_98_2_43:4.2.2.1
	Kernel-5_35-4_79_2_117:4.2.2.1
	Kernel-5_35-4_79_2_116:4.2.2.1
	Kernel-5_35-4_79_2_98_2_42:4.2.2.1
	Kernel-5_35-4_79_2_115:4.2.2.1
	Kernel-5_35-4_79_2_98_2_41:4.2.2.1
	Kernel-5_35-4_79_2_98_2_40:4.2.2.1
	Kernel-5_35-4_79_2_114:4.2.2.1
	Kernel-5_35-4_79_2_98_2_39:4.2.2.1
	Kernel-5_35-4_79_2_98_2_38:4.2.2.1
	Kernel-5_35-4_79_2_113:4.2.2.1
	Kernel-5_35-4_79_2_112:4.2.2.1
	Kernel-5_35-4_79_2_98_2_37:4.2.2.1
	Kernel-5_35-4_79_2_98_2_36:4.2.2.1
	Kernel-5_35-4_79_2_98_2_35:4.2.2.1
	Kernel-5_35-4_79_2_98_2_34:4.2.2.1
	Kernel-5_35-4_79_2_98_2_33:4.2.2.1
	Kernel-5_35-4_79_2_98_2_32:4.2.2.1
	Kernel-5_35-4_79_2_98_2_31:4.2.2.1
	Kernel-5_35-4_79_2_98_2_30:4.2.2.1
	Kernel-5_35-4_79_2_98_2_29:4.2.2.1
	Kernel-5_35-4_79_2_98_2_28:4.2.2.1
	Kernel-5_35-4_79_2_98_2_27:4.2.2.1
	Kernel-5_35-4_79_2_98_2_26:4.2.2.1
	Kernel-5_35-4_79_2_111:4.2.2.1
	Kernel-5_35-4_79_2_98_2_25:4.2.2.1
	Kernel-5_35-4_79_2_98_2_24:4.2.2.1
	Kernel-5_35-4_79_2_98_2_23:4.2.2.1
	Kernel-5_35-4_79_2_110:4.2.2.1
	Kernel-5_35-4_79_2_98_2_22:4.2.2.1
	Kernel-5_35-4_79_2_109:4.2.2.1
	Kernel-5_35-4_79_2_98_2_21:4.2.2.1
	Kernel-5_35-4_79_2_98_2_20:4.2.2.1
	Kernel-5_35-4_79_2_108:4.2.2.1
	Kernel-5_35-4_79_2_107:4.2.2.1
	Kernel-5_35-4_79_2_98_2_19:4.2.2.1
	Kernel-5_35-4_79_2_98_2_18:4.2.2.1
	Kernel-5_35-4_79_2_98_2_17:4.2.2.1
	Kernel-5_35-4_79_2_98_2_16:4.2.2.1
	Kernel-5_35-4_79_2_98_2_15:4.2.2.1
	Kernel-5_35-4_79_2_106:4.2.2.1
	Kernel-5_35-4_79_2_105:4.2.2.1
	Kernel-5_35-4_79_2_104:4.2.2.1
	Kernel-5_35-4_79_2_98_2_14:4.2.2.1
	Kernel-5_35-4_79_2_98_2_13:4.2.2.1
	Kernel-5_35-4_79_2_98_2_12:4.2.2.1
	Kernel-5_35-4_79_2_98_2_11:4.2.2.1
	Kernel-5_35-4_79_2_98_2_10:4.2.2.1
	Kernel-5_35-4_79_2_98_2_9:4.2.2.1
	Kernel-5_35-4_79_2_103:4.2.2.1
	Kernel-5_35-4_79_2_102:4.2.2.1
	Kernel-5_35-4_79_2_98_2_8:4.2.2.1
	Kernel-5_35-4_79_2_98_2_7:4.2.2.1
	Kernel-5_35-4_79_2_98_2_6:4.2.2.1
	Kernel-5_35-4_79_2_98_2_5:4.2.2.1
	Kernel-5_35-4_79_2_98_2_4:4.2.2.1
	Kernel-5_35-4_79_2_101:4.2.2.1
	Kernel-5_35-4_79_2_100:4.2.2.1
	Kernel-5_35-4_79_2_99:4.2.2.1
	Kernel-5_35-4_79_2_98_2_3:4.2.2.1
	Kernel-5_35-4_79_2_98_2_2:4.2.2.1
	Kernel-5_35-4_79_2_98_2_1:4.2.2.1
	Cortex:4.2.2.1.0.2
	Cortex_bp:4.2.2.1
	Kernel-5_35-4_79_2_98:4.2.2.1
	Kernel-5_35-4_79_2_97:4.2.2.1
	Kernel-5_35-4_79_2_96:4.2.2.1
	Kernel-5_35-4_79_2_95:4.2.2.1
	Kernel-5_35-4_79_2_94:4.2.2.1
	Kernel-5_35-4_79_2_93:4.2.2.1
	Kernel-5_35-4_79_2_92:4.2.2.1
	Kernel-5_35-4_79_2_91:4.2.2.1
	Kernel-5_35-4_79_2_90:4.2.2.1
	Kernel-5_35-4_79_2_89:4.2.2.1
	Kernel-5_35-4_79_2_88:4.2.2.1
	Kernel-5_35-4_79_2_87:4.2.2.1
	Kernel-5_35-4_79_2_86:4.2.2.1
	Kernel-5_35-4_79_2_85:4.2.2.1
	Kernel-5_35-4_79_2_84:4.2.2.1
	Kernel-5_35-4_79_2_83:4.2.2.1
	Kernel-5_35-4_79_2_82:4.2.2.1
	Kernel-5_35-4_79_2_81:4.2.2.1
	Kernel-5_35-4_79_2_80:4.2.2.1
	Kernel-5_35-4_79_2_79:4.2.2.1
	Kernel-5_35-4_79_2_78:4.2.2.1
	Kernel-5_35-4_79_2_77:4.2.2.1
	RO_5_07:4.2.2.1
	Kernel-5_35-4_79_2_76:4.2.2.1
	Kernel-5_35-4_79_2_75:4.2.2.1
	Kernel-5_35-4_79_2_74:4.2.2.1
	Kernel-5_35-4_79_2_73:4.2.2.1
	Kernel-5_35-4_79_2_72:4.2.2.1
	Kernel-5_35-4_79_2_71:4.2.2.1
	Kernel-5_35-4_79_2_70:4.2.2.1
	Kernel-5_35-4_79_2_69:4.2.2.1
	Kernel-5_35-4_79_2_68:4.2.2.1
	Kernel-5_35-4_79_2_67:4.2.2.1
	Kernel-5_35-4_79_2_66:4.2.2.1
	Kernel-5_35-4_79_2_65:4.2.2.1
	Kernel-5_35-4_79_2_64:4.2.2.1
	Kernel-5_35-4_79_2_63:4.2.2.1
	Kernel-5_35-4_79_2_62:4.2.2.1
	Kernel-5_35-4_79_2_61:4.2.2.1
	Kernel-5_35-4_79_2_59:4.2.2.1
	Kernel-5_35-4_79_2_58:4.2.2.1
	Kernel-5_35-4_79_2_57:4.2.2.1
	Kernel-5_35-4_79_2_56:4.2.2.1
	Kernel-5_35-4_79_2_55:4.2.2.1
	Kernel-5_35-4_79_2_54:4.2.2.1
	Kernel-5_35-4_79_2_53:4.2.2.1
	Kernel-5_35-4_79_2_52:4.2.2.1
	Kernel-5_35-4_79_2_51:4.2.2.1
	Kernel-5_35-4_79_2_50:4.2.2.1
	Kernel-5_35-4_79_2_49:4.2.2.1
	Kernel-5_35-4_79_2_48:4.2.2.1
	Kernel-5_47:4.2
	Kernel-5_46-4_90_2_1:4.2
	nbingham_Kernel_FastNC_dev_bp:4.2
	nbingham_Kernel_FastNC_dev:4.2.0.4
	Kernel-5_46:4.2
	Kernel-5_45:4.2
	Kernel-5_35-4_79_2_47:4.2.2.1
	Kernel-5_35-4_79_2_46:4.2.2.1
	Kernel-5_35-4_79_2_45:4.2.2.1
	Kernel-5_35-4_79_2_44:4.2.2.1
	Kernel-5_35-4_79_2_25_2_2:4.2.2.1
	Kernel-5_35-4_79_2_43:4.2.2.1
	Kernel-5_35-4_79_2_42:4.2.2.1
	Kernel-5_35-4_79_2_41:4.2.2.1
	Kernel-5_35-4_79_2_40:4.2.2.1
	Kernel-5_35-4_79_2_39:4.2.2.1
	Kernel-5_35-4_79_2_38:4.2.2.1
	Kernel-5_35-4_79_2_37:4.2.2.1
	Kernel-5_35-4_79_2_36:4.2.2.1
	Kernel-5_35-4_79_2_35:4.2.2.1
	Kernel-5_35-4_79_2_34:4.2.2.1
	Kernel-5_35-4_79_2_33:4.2.2.1
	Kernel-5_35-4_79_2_32:4.2.2.1
	Kernel-5_44:4.2
	Kernel-5_35-4_79_2_25_2_1:4.2.2.1
	Kernel-5_43:4.2
	Kernel-5_35-4_79_2_31:4.2.2.1
	Kernel-5_35-4_79_2_30:4.2.2.1
	Kernel-5_35-4_79_2_29:4.2.2.1
	Kernel-5_35-4_79_2_28:4.2.2.1
	Kernel-5_35-4_79_2_27:4.2.2.1
	Kernel-5_35-4_79_2_26:4.2.2.1
	Kernel-5_42:4.2
	Kernel-5_41:4.2
	Kernel-5_40:4.2
	Kernel-5_35-4_79_2_25:4.2.2.1
	Kernel-5_35-4_79_2_24:4.2.2.1
	Kernel-5_35-4_79_2_23:4.2.2.1
	Kernel-5_35-4_79_2_22:4.2.2.1
	Kernel-5_35-4_79_2_21:4.2.2.1
	Kernel-5_35-4_79_2_20:4.2.2.1
	Kernel-5_35-4_79_2_19:4.2.2.1
	Kernel-5_35-4_79_2_18:4.2.2.1
	Kernel-5_35-4_79_2_17:4.2.2.1
	Kernel-5_35-4_79_2_16:4.2.2.1
	Kernel-5_35-4_79_2_15:4.2.2.1
	Kernel-5_35-4_79_2_14:4.2.2.1
	Kernel-5_39:4.2
	Kernel-5_13-4_52_2_1:4.1
	Bethany:4.1.0.10
	Kernel-5_38:4.2
	Kernel-5_35-4_79_2_13:4.2.2.1
	Kernel-5_35-4_79_2_12:4.2.2.1
	Kernel-5_35-4_79_2_11:4.2.2.1
	Kernel-5_37:4.2
	Kernel-5_35-4_79_2_10:4.2.2.1
	Kernel-5_35-4_79_2_9:4.2.2.1
	Kernel-5_36:4.2
	Kernel-5_35-4_79_2_8:4.2.2.1
	Kernel-5_35-4_79_2_7:4.2.2.1
	Kernel-5_35-4_79_2_6:4.2.2.1
	Kernel-5_35-4_79_2_5:4.2.2.1
	Kernel-5_35-4_79_2_4:4.2.2.1
	Kernel-5_35-4_79_2_3:4.2.2.1
	Kernel-5_35-4_79_2_2:4.2.2.1
	dellis_autobuild_BaseSW:4.2
	Kernel-5_35-4_79_2_1:4.2.2.1
	HAL:4.2.0.2
	Kernel-5_35:4.2
	Kernel-5_34:4.2
	Kernel-5_33:4.2
	Kernel-5_32:4.2
	Kernel-5_31:4.2
	Kernel-5_30:4.2
	Kernel-5_29:4.2
	Kernel-5_28:4.2
	Kernel-5_27:4.2
	Kernel-5_26:4.2
	Kernel-5_25:4.2
	Kernel-5_24:4.2
	Kernel-5_23:4.2
	Kernel-5_22:4.1
	sbrodie_sedwards_16Mar2000:4.1
	Kernel-5_21:4.1
	Kernel-5_20:4.1
	Kernel-5_19:4.1
	Kernel-5_18:4.1
	Kernel-5_17:4.1
	Kernel-5_16:4.1
	Kernel-5_15:4.1
	Kernel-5_14:4.1
	Kernel-5_13:4.1
	Kernel-5_12:4.1
	Kernel-5_11:4.1
	Kernel-5_10:4.1
	Kernel-5_09:4.1
	Kernel-5_08:4.1
	Kernel-5_07:4.1
	Kernel-5_06:4.1
	Kernel-5_05:4.1
	Kernel-5_04:4.1
	Kernel-5_03:4.1
	Kernel-5_02:4.1
	Kernel-5_01:4.1
	Kernel-5_00:4.1
	Kernel-4_99:4.1
	Kernel-4_98:4.1
	Kernel-4_97:4.1
	Kernel-4_96:4.1
	Kernel-4_95:4.1
	Kernel-4_94:4.1
	Kernel-4_93:4.1
	Kernel-4_92:4.1
	Kernel-4_91:4.1
	Kernel-4_90:4.1
	dcotton_autobuild_BaseSW:4.2
	Kernel-4_89:4.1
	Kernel-4_88:4.1
	Kernel-4_87:4.1
	Kernel-4_86:4.1
	Kernel-4_85:4.1
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1
	Kernel-4_84:4.1
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1
	Ursula_RiscPC_bp:4.1
	Kernel-4_83:4.1
	Kernel-4_82:4.1
	Kernel-4_81:4.1
	Kernel-4_80:4.1
	Kernel-4_79:4.1
	Kernel-4_78:4.1
	Kernel-4_77:4.1
	Kernel-4_76:4.1
	Kernel-4_75:4.1
	Kernel-4_74:4.1
	Kernel-4_73:4.1
	Kernel-4_72:4.1
	Kernel-4_71:4.1
	Kernel-4_70:4.1
	Kernel-4_69:4.1
	Kernel-4_68:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	Kernel-4_63-1_1_2_5:4.1.7.1
	Kernel-4_63-1_1_2_4:4.1.7.1
	Kernel-4_67:4.1
	Kernel-4_66:4.1
	Kernel-4_63-1_1_2_3:4.1.7.1
	Kernel-4_65:4.1
	Ursula_merge:4.1
	Kernel-4_64:4.1
	mstphens_Kernel-3_81:4.1
	Kernel-4_63-1_1_2_2:4.1.7.1
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	mstphens_Kernel-3_80:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2016.06.30.20.28.47;	author jlee;	state dead;
branches;
next	4.3;
commitid	lMnWzoE9eJz3Wwcz;

4.3
date	2016.06.30.20.07.52;	author jlee;	state Exp;
branches;
next	4.2;
commitid	IWoXxARWeuLDOwcz;

4.2
date	2000.04.04.14.27.22;	author kbracey;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.41.44;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.2.2.1
date	2000.09.15.12.38.00;	author kbracey;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.41.44;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.04.17;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.13.52;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.05.09;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Delete pre-HAL and 26bit code
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * HAL
  * HAL26
  * HAL32
  * No26bitCode
  * No32bitCode
  * IncludeTestSrc
  * FixR9CorruptionInExtensionSWI
  Various old files have also been removed (POST code, Arc/STB keyboard drivers, etc.)
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.49. Tagged as 'Kernel-5_49'
@
text
@; > TestSrc.Cmos

        TTL RISC OS 2+ POST battery-backed RAM access
;
; A function to read bytes from CMOS, for use in verifying the checksum
; and reading memory test flag & video modes.
;------------------------------------------------------------------------
; History
;
; Date          Name            Comment
; ----          ----            -------
; 05-Apr-91     ArtG            Initial version, based on IICMod.
;
;
;------------------------------------------------------------------------
;
; in:
;       R0 = device address          (bit 8 - 15   register address    )
;       R1 = length of block to read
;       R2 = initial sum value
;
; out:  R0 = sum of all bytes in block
;       R1 - R13 trashed
;

ts_CMOSread     ROUT

        MOV     R13,R14
        MOV     R8,R2                   ; initialise accumulator
        MOV     R7,R1                   ; initialise byte counter
        MOV     R6,R0                   ; stash register address
        MOV     R2, #IOC
        MOV     R0, #-1                 ; ensure timer is ticking
        STRB    R0, [R2, #Timer0LL]     ; (nonzero in input latch)
        STRB    R0, [R2, #Timer0LH]
        STRB    R0, [R2, #Timer0GO]     ; load the count registers
        BL      ts_Start
        BEQ     %FT30                   ; check clock line toggles OK
        AND     R0, R6, #&FE
        BL      ts_TXCheckAck           ; transmit device address (write)
        BVS     %FT30
        MOV     R0, R6, LSR #8
        BL      ts_TXCheckAck           ; write register address
        BVS     %FT30
        BL      ts_Start                ; Extra START bit to switch modes
        AND     R0, R6, #&FE
        ORR     R0, R0, #1
        BL      ts_TXCheckAck           ; transmit device address (read)
        BVS     %FT30
20
        BL      ts_RXByte               ; read byte from bus
        ADD     R8, R8, R0              ; accumulate total
        SUBS    R7, R7, #1              ; is it last byte ?
        MOVNE   R0, #0                  ; no, then acknowledge with 0 bit
        MOVEQ   R0, #1                  ; yes, then don't acknowledge
        BL      ts_ClockData            ; but always send ack clock pulse
        TEQ     R7, #0                  ; loop, until last byte
        BNE     %BT20
30
        MOVVS   R7, #-1                 ; pass error indicator to caller
        BL      ts_Stop
        MOV     R0, R8
        TEQ     R7, #0                  ; return zero flag if read OK
        MOV     PC,R13

; *****************************************************************************
;
;       TXCheckACK - transmit a byte and wait for slave to ACK
;
;  out: Trashes r0,r1,r2,r3,r4,r5,r9,r10,r11,r12
;       V bit set on error.
;

ts_TXCheckAck ROUT
        MOV     R12,R14
        BL      ts_TXByte
        BL      ts_Acknowledge
        MOV     PC, R12

; *****************************************************************************
;
;       SetC1C0 - Set clock and data lines to values in R1 and R0 respectively
;
; out:  Trashes r0,r1,r2,r11
;

ts_SetC1C0 ROUT
        MOVS    R11, R14                        ; NE: indicate not checking clock
ts_SetOrCheck
        MRS     R14, CPSR
        ORR     R14, R14, #I32_bit              ; disable interrupts
        MSR     CPSR_c, R14

        ADD     R0, R0, R1, LSL #1              ; R0 := C0 + C1*2

        ORR     R0, R0, #&C0                    ; make sure two test bits are
                                                ; always set to 1 !
        MOV     R2, #IOC
        STRB    R0, [R2, #IOCControl]
10
        LDREQB  R1, [R2, #IOCControl]           ; wait for clock
        TSTEQ   R1, #i2c_clock_bit              ; to read high
        BEQ     %BT10

        MOV     R0, #10                         ; delay for >= 10/2 microsecs
;
; in-line do-micro-delay to save a stack level
;
        STRB    R0, [R2, #Timer0LR]     ; copy counter into output latch
        LDRB    R1, [R2, #Timer0CL]     ; R1 := low output latch
20
        STRB    R0, [R2, #Timer0LR]     ; copy counter into output latch
        LDRB    R14, [R2, #Timer0CL]    ; R14 := low output latch
        TEQ     R14, R1                 ; unchanged ?
        MOVNE   R1, R14                 ; copy anyway
        BEQ     %BT20                   ; then loop
        SUBS    R0, R0, #1              ; decrement count
        BNE     %BT20                   ; loop if not finished
;
; end do-micro-delay
;
        MOV     PC, R11

; Set clock and data lines to R1 and R0 and then wait for clock to be high

ts_SetC1C0CheckClock ROUT
        MOV     R11, R14
        CMP     R0, R0                          ; EQ: indicate checking clock
        B       ts_SetOrCheck


; *****************************************************************************
;
;       ClockData - Clock a bit of data down the IIC bus
;
; in:   R0 = data bit
;
; out:  Trashes r0,r1,r2,r3,r10,r11
;

ts_ClockData ROUT
        MOV     R10,R14

        MOV     R3, R0                  ; save data
        MOV     R1, #0                  ; clock LO
        BL      ts_SetC1C0

        MOV     R1, #1                  ; clock HI
        MOV     R0, R3
        BL      ts_SetC1C0CheckClock

; Delay here must be >= 4.0 microsecs

        MOV     R1, #0                  ; clock LO
        MOV     R0, R3
        BL      ts_SetC1C0

        MOV     PC,R10

; *****************************************************************************
;
;       Start - Send the Start signal
;
; out:  Trashes r0,r1,r2,r9,r11
;       R0 (and Z flag) indicates state of clock .. should be NZ.
;

ts_Start   ROUT
        MOV     R9,R14

        MOV     R0, #1                  ; clock HI, data HI
        MOV     R1, #1
        BL      ts_SetC1C0

; Delay here must be >= 4.0 microsecs

        MOV     R0, #0                  ; clock HI, data LO
        MOV     R1, #1
        BL      ts_SetC1C0

; Make sure clock really is high (and not shorted to gnd)

        LDRB    R3, [R2, #IOCControl]

; Delay here must be >= 4.7 microsecs

        MOV     R0, #0                  ; clock LO, data LO
        MOV     R1, #0
        BL      ts_SetC1C0

        ANDS    R0, R3, #i2c_clock_bit
        MOV     PC,R9

; *****************************************************************************
;
;       Acknowledge - Check acknowledge after transmitting a byte
;
; out:  Trashes r0,r1,r2,r3,r9,r11
;       V=0 => acknowledge received
;       V=1 => no acknowledge received
;

ts_Acknowledge ROUT
        MOV     R9,R14

        MOV     R0, #1                  ; clock LO, data HI
        MOV     R1, #0
        BL      ts_SetC1C0

        MOV     R0, #1                  ; clock HI, data HI
        MOV     R1, #1
        BL      ts_SetC1C0CheckClock

; Delay here must be >= 4.0 microsecs

        MOV     R2, #IOC
        LDRB    R3, [R2, #IOCControl]   ; get the data from IOC

        MOV     R0, #1                  ; clock LO, data HI
        MOV     R1, #0
        BL      ts_SetC1C0

        TST     R3, #1                  ; should be LO for correct acknowledge
        MRS     R3, CPSR
        BICEQ   R3, R3, #V_bit          ; clear V if correct acknowledge
        ORRNE   R3, R3, #V_bit          ; set V if no acknowledge
        MSR     CPSR_f, R3

        MOV     PC,R9

; *****************************************************************************
;
;       Stop - Send the Stop signal
;
; out:  Trashes r0,r1,r2,r9,r11
;

ts_Stop    ROUT
        MOV     R9,R14

        MOV     R0, #0                  ; clock HI, data LO
        MOV     R1, #1
        BL      ts_SetC1C0

; Delay here must be >= 4.0 microsecs

        MOV     R0, #1                  ; clock HI, data HI
        MOV     R1, #1
        BL      ts_SetC1C0

        MOV     PC,R9

; *****************************************************************************
;
;       TXByte - Transmit a byte
;
; in:   R0 = byte to be transmitted
;
; out:  Trashes r0,r1,r2,r3,r4,r5,r9,r10,r11
;

ts_TXByte  ROUT
        MOV     R9, R14
        MOV     R4, R0                  ; byte goes into R4
        MOV     R5, #&80                ; 2^7   the bit mask
10
        ANDS    R0, R4, R5              ; zero if bit is zero
        MOVNE   R0, #1
        BL      ts_ClockData            ; send the bit
        MOVS    R5, R5, LSR #1
        BNE     %BT10
        MOV     PC, R9

; *****************************************************************************
;
;       RXByte - Receive a byte
;
; out:  R0 = byte received
;       Trashes r1,r2,r3,r4,r9,r11
;

ts_RXByte  ROUT
        MOV     R9, R14
        MOV     R3, #0                  ; byte:=0
        MOV     R2, #IOC
        MOV     R4, #7

        MOV     R0, #1                  ; clock LO, data HI
        MOV     R1, #0
        BL      ts_SetC1C0
10
        MOV     R0, #1                  ; pulse clock HI
        MOV     R1, #1
        BL      ts_SetC1C0CheckClock

        LDRB    R1, [R2, #IOCControl]   ; get the data from IOC
        AND     R1, R1, #1
        ADD     R3, R1, R3, LSL #1      ; byte:=byte*2+(IOC?0)AND1

        MOV     R0, #1                  ; return clock LO
        MOV     R1, #0
        BL      ts_SetC1C0

        SUBS    R4, R4, #1
        BCS     %BT10

        MOV     R0, R3                  ; return the result in R0
        MOV     PC, R9

        LTORG

        END








@


4.3
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@@


4.2
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@d90 1
a90 1
        mrs    ,R14, CPSR
d92 1
a92 1
        msr    ,CPSR_c, R14
d224 1
a224 1
        mrs    ,R3, CPSR
d227 1
a227 1
        msr    ,CPSR_f, R3
@


4.2.2.1
log
@* Converted to building with ObjAsm (but still a single object file using ORG).
* Added ARM_IMB and ARM_IMBRange SWIs as recommended by ARMv5.
* Some early prototype HAL bits popped in - a lot of source restructuring still
  to come.
* New debug target creates an AIF image with debug information, and translates
  this into an ASCII object file for the 16702B logic analyser.

Version 5.35, 4.79.2.1. Tagged as 'Kernel-5_35-4_79_2_1'
@
text
@d90 1
a90 1
        MRS     R14, CPSR
d92 1
a92 1
        MSR     CPSR_c, R14
d224 1
a224 1
        MRS     R3, CPSR
d227 1
a227 1
        MSR     CPSR_f, R3
@


4.1
log
@Initial revision
@
text
@d24 1
a24 1
;  
d78 1
a78 2
        MOVVC   PC, R12                 ; acknowledged ok, so return
        ORRS    PC, R12, #V_bit
d88 1
a88 2
        MOV     R11, R14
        BIC     R14, R14, #Z_bit                ; indicate not checking clock
d90 3
a92 2
        ORR     R14, R14, #I_bit                ; disable interrupts
        TEQP    R14, #0
d128 1
a128 1
        ORR     R14, R14, #Z_bit                ; indicate checking clock
d224 1
a224 1
        MOV     R3, PC
d227 1
a227 1
        TEQP    R3, #0
d307 1
a307 1
        MOV     R0, R3                  ; return the result in R0  
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
