head	4.2;
access;
symbols
	HAL_merge:4.1
	Kernel-5_48:4.1
	Kernel-5_35-4_79_2_327:4.1
	Kernel-5_35-4_79_2_326:4.1
	Kernel-5_35-4_79_2_325:4.1
	Kernel-5_35-4_79_2_324:4.1
	Kernel-5_35-4_79_2_323:4.1
	Kernel-5_35-4_79_2_322:4.1
	Kernel-5_35-4_79_2_321:4.1
	Kernel-5_35-4_79_2_320:4.1
	Kernel-5_35-4_79_2_319:4.1
	Kernel-5_35-4_79_2_318:4.1
	Kernel-5_35-4_79_2_317:4.1
	Kernel-5_35-4_79_2_316:4.1
	Kernel-5_35-4_79_2_315:4.1
	Kernel-5_35-4_79_2_314:4.1
	Kernel-5_35-4_79_2_313:4.1
	Kernel-5_35-4_79_2_312:4.1
	Kernel-5_35-4_79_2_311:4.1
	Kernel-5_35-4_79_2_310:4.1
	Kernel-5_35-4_79_2_309:4.1
	Kernel-5_35-4_79_2_308:4.1
	Kernel-5_35-4_79_2_307:4.1
	Kernel-5_35-4_79_2_306:4.1
	Kernel-5_35-4_79_2_305:4.1
	Kernel-5_35-4_79_2_304:4.1
	Kernel-5_35-4_79_2_303:4.1
	Kernel-5_35-4_79_2_302:4.1
	Kernel-5_35-4_79_2_301:4.1
	Kernel-5_35-4_79_2_300:4.1
	Kernel-5_35-4_79_2_299:4.1
	Kernel-5_35-4_79_2_298:4.1
	Kernel-5_35-4_79_2_297:4.1
	Kernel-5_35-4_79_2_296:4.1
	Kernel-5_35-4_79_2_295:4.1
	Kernel-5_35-4_79_2_294:4.1
	Kernel-5_35-4_79_2_293:4.1
	Kernel-5_35-4_79_2_292:4.1
	Kernel-5_35-4_79_2_291:4.1
	Kernel-5_35-4_79_2_290:4.1
	Kernel-5_35-4_79_2_289:4.1
	Kernel-5_35-4_79_2_288:4.1
	Kernel-5_35-4_79_2_287:4.1
	Kernel-5_35-4_79_2_286:4.1
	Kernel-5_35-4_79_2_285:4.1
	Kernel-5_35-4_79_2_284:4.1
	Kernel-5_35-4_79_2_283:4.1
	Kernel-5_35-4_79_2_282:4.1
	Kernel-5_35-4_79_2_281:4.1
	Kernel-5_35-4_79_2_280:4.1
	Kernel-5_35-4_79_2_279:4.1
	Kernel-5_35-4_79_2_278:4.1
	Kernel-5_35-4_79_2_277:4.1
	Kernel-5_35-4_79_2_276:4.1
	Kernel-5_35-4_79_2_275:4.1
	Kernel-5_35-4_79_2_274:4.1
	Kernel-5_35-4_79_2_273:4.1
	Kernel-5_35-4_79_2_272:4.1
	Kernel-5_35-4_79_2_271:4.1
	Kernel-5_35-4_79_2_270:4.1
	Kernel-5_35-4_79_2_269:4.1
	Kernel-5_35-4_79_2_268:4.1
	Kernel-5_35-4_79_2_267:4.1
	Kernel-5_35-4_79_2_266:4.1
	Kernel-5_35-4_79_2_265:4.1
	Kernel-5_35-4_79_2_264:4.1
	Kernel-5_35-4_79_2_263:4.1
	Kernel-5_35-4_79_2_262:4.1
	Kernel-5_35-4_79_2_261:4.1
	Kernel-5_35-4_79_2_260:4.1
	Kernel-5_35-4_79_2_259:4.1
	Kernel-5_35-4_79_2_258:4.1
	Kernel-5_35-4_79_2_257:4.1
	Kernel-5_35-4_79_2_256:4.1
	Kernel-5_35-4_79_2_255:4.1
	Kernel-5_35-4_79_2_254:4.1
	Kernel-5_35-4_79_2_253:4.1
	Kernel-5_35-4_79_2_252:4.1
	Kernel-5_35-4_79_2_251:4.1
	Kernel-5_35-4_79_2_250:4.1
	Kernel-5_35-4_79_2_249:4.1
	Kernel-5_35-4_79_2_248:4.1
	Kernel-5_35-4_79_2_247:4.1
	Kernel-5_35-4_79_2_246:4.1
	Kernel-5_35-4_79_2_245:4.1
	Kernel-5_35-4_79_2_244:4.1
	Kernel-5_35-4_79_2_243:4.1
	Kernel-5_35-4_79_2_242:4.1
	Kernel-5_35-4_79_2_241:4.1
	Kernel-5_35-4_79_2_240:4.1
	Kernel-5_35-4_79_2_239:4.1
	Kernel-5_35-4_79_2_238:4.1
	Kernel-5_35-4_79_2_237:4.1
	Kernel-5_35-4_79_2_236:4.1
	Kernel-5_35-4_79_2_235:4.1
	Kernel-5_35-4_79_2_234:4.1
	Kernel-5_35-4_79_2_233:4.1
	Kernel-5_35-4_79_2_232:4.1
	Kernel-5_35-4_79_2_231:4.1
	Kernel-5_35-4_79_2_230:4.1
	Kernel-5_35-4_79_2_229:4.1
	Kernel-5_35-4_79_2_228:4.1
	Kernel-5_35-4_79_2_227:4.1
	Kernel-5_35-4_79_2_226:4.1
	Kernel-5_35-4_79_2_225:4.1
	Kernel-5_35-4_79_2_224:4.1
	Kernel-5_35-4_79_2_223:4.1
	Kernel-5_35-4_79_2_222:4.1
	Kernel-5_35-4_79_2_221:4.1
	Kernel-5_35-4_79_2_220:4.1
	Kernel-5_35-4_79_2_219:4.1
	Kernel-5_35-4_79_2_218:4.1
	Kernel-5_35-4_79_2_217:4.1
	Kernel-5_35-4_79_2_216:4.1
	Kernel-5_35-4_79_2_215:4.1
	Kernel-5_35-4_79_2_214:4.1
	Kernel-5_35-4_79_2_213:4.1
	Kernel-5_35-4_79_2_212:4.1
	Kernel-5_35-4_79_2_211:4.1
	Kernel-5_35-4_79_2_210:4.1
	Kernel-5_35-4_79_2_209:4.1
	Kernel-5_35-4_79_2_208:4.1
	Kernel-5_35-4_79_2_207:4.1
	Kernel-5_35-4_79_2_206:4.1
	Kernel-5_35-4_79_2_205:4.1
	Kernel-5_35-4_79_2_204:4.1
	Kernel-5_35-4_79_2_203:4.1
	Kernel-5_35-4_79_2_202:4.1
	Kernel-5_35-4_79_2_201:4.1
	Kernel-5_35-4_79_2_200:4.1
	Kernel-5_35-4_79_2_199:4.1
	Kernel-5_35-4_79_2_198:4.1
	Kernel-5_35-4_79_2_197:4.1
	Kernel-5_35-4_79_2_196:4.1
	Kernel-5_35-4_79_2_195:4.1
	Kernel-5_35-4_79_2_194:4.1
	Kernel-5_35-4_79_2_193:4.1
	Kernel-5_35-4_79_2_192:4.1
	Kernel-5_35-4_79_2_191:4.1
	Kernel-5_35-4_79_2_190:4.1
	Kernel-5_35-4_79_2_189:4.1
	Kernel-5_35-4_79_2_188:4.1
	Kernel-5_35-4_79_2_187:4.1
	Kernel-5_35-4_79_2_186:4.1
	Kernel-5_35-4_79_2_185:4.1
	Kernel-5_35-4_79_2_184:4.1
	Kernel-5_35-4_79_2_183:4.1
	Kernel-5_35-4_79_2_182:4.1
	Kernel-5_35-4_79_2_181:4.1
	Kernel-5_35-4_79_2_180:4.1
	Kernel-5_35-4_79_2_179:4.1
	Kernel-5_35-4_79_2_178:4.1
	Kernel-5_35-4_79_2_177:4.1
	Kernel-5_35-4_79_2_176:4.1
	Kernel-5_35-4_79_2_175:4.1
	Kernel-5_35-4_79_2_174:4.1
	Kernel-5_35-4_79_2_173:4.1
	Kernel-5_35-4_79_2_172:4.1
	Kernel-5_35-4_79_2_171:4.1
	Kernel-5_35-4_79_2_170:4.1
	Kernel-5_35-4_79_2_169:4.1
	Kernel-5_35-4_79_2_168:4.1
	Kernel-5_35-4_79_2_167:4.1
	Kernel-5_35-4_79_2_166:4.1
	Kernel-5_35-4_79_2_165:4.1
	RPi_merge:4.1
	Kernel-5_35-4_79_2_147_2_23:4.1
	Kernel-5_35-4_79_2_147_2_22:4.1
	Kernel-5_35-4_79_2_147_2_21:4.1
	Kernel-5_35-4_79_2_147_2_20:4.1
	Kernel-5_35-4_79_2_147_2_19:4.1
	Kernel-5_35-4_79_2_147_2_18:4.1
	Kernel-5_35-4_79_2_164:4.1
	Kernel-5_35-4_79_2_163:4.1
	Kernel-5_35-4_79_2_147_2_17:4.1
	Kernel-5_35-4_79_2_147_2_16:4.1
	Kernel-5_35-4_79_2_147_2_15:4.1
	Kernel-5_35-4_79_2_162:4.1
	Kernel-5_35-4_79_2_161:4.1
	Kernel-5_35-4_79_2_147_2_14:4.1
	Kernel-5_35-4_79_2_147_2_13:4.1
	Kernel-5_35-4_79_2_160:4.1
	Kernel-5_35-4_79_2_159:4.1
	Kernel-5_35-4_79_2_158:4.1
	Kernel-5_35-4_79_2_157:4.1
	Kernel-5_35-4_79_2_156:4.1
	Kernel-5_35-4_79_2_147_2_12:4.1
	Kernel-5_35-4_79_2_147_2_11:4.1
	Kernel-5_35-4_79_2_155:4.1
	Kernel-5_35-4_79_2_147_2_10:4.1
	Kernel-5_35-4_79_2_154:4.1
	Kernel-5_35-4_79_2_153:4.1
	Kernel-5_35-4_79_2_147_2_9:4.1
	Kernel-5_35-4_79_2_152:4.1
	Kernel-5_35-4_79_2_151:4.1
	Kernel-5_35-4_79_2_147_2_8:4.1
	Kernel-5_35-4_79_2_147_2_7:4.1
	Kernel-5_35-4_79_2_150:4.1
	Kernel-5_35-4_79_2_147_2_6:4.1
	Kernel-5_35-4_79_2_147_2_5:4.1
	Kernel-5_35-4_79_2_149:4.1
	Kernel-5_35-4_79_2_147_2_4:4.1
	Kernel-5_35-4_79_2_147_2_3:4.1
	Kernel-5_35-4_79_2_148:4.1
	Kernel-5_35-4_79_2_147_2_2:4.1
	Kernel-5_35-4_79_2_147_2_1:4.1
	RPi:4.1.0.18
	RPi_bp:4.1
	Kernel-5_35-4_79_2_98_2_52_2_1:4.1
	alees_Kernel_dev:4.1.0.14
	alees_Kernel_dev_bp:4.1
	Kernel-5_35-4_79_2_147:4.1
	Kernel-5_35-4_79_2_146:4.1
	Kernel-5_35-4_79_2_145:4.1
	Kernel-5_35-4_79_2_144:4.1
	Kernel-5_35-4_79_2_143:4.1
	Kernel-5_35-4_79_2_142:4.1
	Kernel-5_35-4_79_2_141:4.1
	Kernel-5_35-4_79_2_140:4.1
	Kernel-5_35-4_79_2_139:4.1
	Kernel-5_35-4_79_2_138:4.1
	Kernel-5_35-4_79_2_137:4.1
	Kernel-5_35-4_79_2_136:4.1
	Kernel-5_35-4_79_2_135:4.1
	Kernel-5_35-4_79_2_134:4.1
	Kernel-5_35-4_79_2_133:4.1
	Kernel-5_35-4_79_2_132:4.1
	Kernel-5_35-4_79_2_131:4.1
	Kernel-5_35-4_79_2_130:4.1
	Kernel-5_35-4_79_2_129:4.1
	Kernel-5_35-4_79_2_128:4.1
	Kernel-5_35-4_79_2_127:4.1
	Kernel-5_35-4_79_2_126:4.1
	Kernel-5_35-4_79_2_125:4.1
	Kernel-5_35-4_79_2_124:4.1
	Kernel-5_35-4_79_2_123:4.1
	Cortex_merge:4.1
	Kernel-5_35-4_79_2_122:4.1
	Kernel-5_35-4_79_2_98_2_54:4.1
	Kernel-5_35-4_79_2_98_2_53:4.1
	Kernel-5_35-4_79_2_98_2_52:4.1
	Kernel-5_35-4_79_2_98_2_51:4.1
	Kernel-5_35-4_79_2_98_2_50:4.1
	Kernel-5_35-4_79_2_98_2_49:4.1
	Kernel-5_35-4_79_2_98_2_48:4.1
	Kernel-5_35-4_79_2_121:4.1
	Kernel-5_35-4_79_2_98_2_47:4.1
	Kernel-5_35-4_79_2_120:4.1
	Kernel-5_35-4_79_2_98_2_46:4.1
	Kernel-5_35-4_79_2_119:4.1
	Kernel-5_35-4_79_2_98_2_45:4.1
	Kernel-5_35-4_79_2_98_2_44:4.1
	Kernel-5_35-4_79_2_118:4.1
	Kernel-5_35-4_79_2_98_2_43:4.1
	Kernel-5_35-4_79_2_117:4.1
	Kernel-5_35-4_79_2_116:4.1
	Kernel-5_35-4_79_2_98_2_42:4.1
	Kernel-5_35-4_79_2_115:4.1
	Kernel-5_35-4_79_2_98_2_41:4.1
	Kernel-5_35-4_79_2_98_2_40:4.1
	Kernel-5_35-4_79_2_114:4.1
	Kernel-5_35-4_79_2_98_2_39:4.1
	Kernel-5_35-4_79_2_98_2_38:4.1
	Kernel-5_35-4_79_2_113:4.1
	Kernel-5_35-4_79_2_112:4.1
	Kernel-5_35-4_79_2_98_2_37:4.1
	Kernel-5_35-4_79_2_98_2_36:4.1
	Kernel-5_35-4_79_2_98_2_35:4.1
	Kernel-5_35-4_79_2_98_2_34:4.1
	Kernel-5_35-4_79_2_98_2_33:4.1
	Kernel-5_35-4_79_2_98_2_32:4.1
	Kernel-5_35-4_79_2_98_2_31:4.1
	Kernel-5_35-4_79_2_98_2_30:4.1
	Kernel-5_35-4_79_2_98_2_29:4.1
	Kernel-5_35-4_79_2_98_2_28:4.1
	Kernel-5_35-4_79_2_98_2_27:4.1
	Kernel-5_35-4_79_2_98_2_26:4.1
	Kernel-5_35-4_79_2_111:4.1
	Kernel-5_35-4_79_2_98_2_25:4.1
	Kernel-5_35-4_79_2_98_2_24:4.1
	Kernel-5_35-4_79_2_98_2_23:4.1
	Kernel-5_35-4_79_2_110:4.1
	Kernel-5_35-4_79_2_98_2_22:4.1
	Kernel-5_35-4_79_2_109:4.1
	Kernel-5_35-4_79_2_98_2_21:4.1
	Kernel-5_35-4_79_2_98_2_20:4.1
	Kernel-5_35-4_79_2_108:4.1
	Kernel-5_35-4_79_2_107:4.1
	Kernel-5_35-4_79_2_98_2_19:4.1
	Kernel-5_35-4_79_2_98_2_18:4.1
	Kernel-5_35-4_79_2_98_2_17:4.1
	Kernel-5_35-4_79_2_98_2_16:4.1
	Kernel-5_35-4_79_2_98_2_15:4.1
	Kernel-5_35-4_79_2_106:4.1
	Kernel-5_35-4_79_2_105:4.1
	Kernel-5_35-4_79_2_104:4.1
	Kernel-5_35-4_79_2_98_2_14:4.1
	Kernel-5_35-4_79_2_98_2_13:4.1
	Kernel-5_35-4_79_2_98_2_12:4.1
	Kernel-5_35-4_79_2_98_2_11:4.1
	Kernel-5_35-4_79_2_98_2_10:4.1
	Kernel-5_35-4_79_2_98_2_9:4.1
	Kernel-5_35-4_79_2_103:4.1
	Kernel-5_35-4_79_2_102:4.1
	Kernel-5_35-4_79_2_98_2_8:4.1
	Kernel-5_35-4_79_2_98_2_7:4.1
	Kernel-5_35-4_79_2_98_2_6:4.1
	Kernel-5_35-4_79_2_98_2_5:4.1
	Kernel-5_35-4_79_2_98_2_4:4.1
	Kernel-5_35-4_79_2_101:4.1
	Kernel-5_35-4_79_2_100:4.1
	Kernel-5_35-4_79_2_99:4.1
	Kernel-5_35-4_79_2_98_2_3:4.1
	Kernel-5_35-4_79_2_98_2_2:4.1
	Kernel-5_35-4_79_2_98_2_1:4.1
	Cortex:4.1.0.2
	Cortex_bp:4.1
	Kernel-5_35-4_79_2_98:4.1
	Kernel-5_35-4_79_2_97:4.1
	Kernel-5_35-4_79_2_96:4.1
	Kernel-5_35-4_79_2_95:4.1
	Kernel-5_35-4_79_2_94:4.1
	Kernel-5_35-4_79_2_93:4.1
	Kernel-5_35-4_79_2_92:4.1
	Kernel-5_35-4_79_2_91:4.1
	Kernel-5_35-4_79_2_90:4.1
	Kernel-5_35-4_79_2_89:4.1
	Kernel-5_35-4_79_2_88:4.1
	Kernel-5_35-4_79_2_87:4.1
	Kernel-5_35-4_79_2_86:4.1
	Kernel-5_35-4_79_2_85:4.1
	Kernel-5_35-4_79_2_84:4.1
	Kernel-5_35-4_79_2_83:4.1
	Kernel-5_35-4_79_2_82:4.1
	Kernel-5_35-4_79_2_81:4.1
	Kernel-5_35-4_79_2_80:4.1
	Kernel-5_35-4_79_2_79:4.1
	Kernel-5_35-4_79_2_78:4.1
	Kernel-5_35-4_79_2_77:4.1
	RO_5_07:4.1
	Kernel-5_35-4_79_2_76:4.1
	Kernel-5_35-4_79_2_75:4.1
	Kernel-5_35-4_79_2_74:4.1
	Kernel-5_35-4_79_2_73:4.1
	Kernel-5_35-4_79_2_72:4.1
	Kernel-5_35-4_79_2_71:4.1
	Kernel-5_35-4_79_2_70:4.1
	Kernel-5_35-4_79_2_69:4.1
	Kernel-5_35-4_79_2_68:4.1
	Kernel-5_35-4_79_2_67:4.1
	Kernel-5_35-4_79_2_66:4.1
	Kernel-5_35-4_79_2_65:4.1
	Kernel-5_35-4_79_2_64:4.1
	Kernel-5_35-4_79_2_63:4.1
	Kernel-5_35-4_79_2_62:4.1
	Kernel-5_35-4_79_2_61:4.1
	Kernel-5_35-4_79_2_59:4.1
	Kernel-5_35-4_79_2_58:4.1
	Kernel-5_35-4_79_2_57:4.1
	Kernel-5_35-4_79_2_56:4.1
	Kernel-5_35-4_79_2_55:4.1
	Kernel-5_35-4_79_2_54:4.1
	Kernel-5_35-4_79_2_53:4.1
	Kernel-5_35-4_79_2_52:4.1
	Kernel-5_35-4_79_2_51:4.1
	Kernel-5_35-4_79_2_50:4.1
	Kernel-5_35-4_79_2_49:4.1
	Kernel-5_35-4_79_2_48:4.1
	Kernel-5_47:4.1
	Kernel-5_46-4_90_2_1:4.1
	nbingham_Kernel_FastNC_dev_bp:4.1
	nbingham_Kernel_FastNC_dev:4.1.0.16
	Kernel-5_46:4.1
	Kernel-5_45:4.1
	Kernel-5_35-4_79_2_47:4.1
	Kernel-5_35-4_79_2_46:4.1
	Kernel-5_35-4_79_2_45:4.1
	Kernel-5_35-4_79_2_44:4.1
	Kernel-5_35-4_79_2_25_2_2:4.1
	Kernel-5_35-4_79_2_43:4.1
	Kernel-5_35-4_79_2_42:4.1
	Kernel-5_35-4_79_2_41:4.1
	Kernel-5_35-4_79_2_40:4.1
	Kernel-5_35-4_79_2_39:4.1
	Kernel-5_35-4_79_2_38:4.1
	Kernel-5_35-4_79_2_37:4.1
	Kernel-5_35-4_79_2_36:4.1
	Kernel-5_35-4_79_2_35:4.1
	Kernel-5_35-4_79_2_34:4.1
	Kernel-5_35-4_79_2_33:4.1
	Kernel-5_35-4_79_2_32:4.1
	Kernel-5_44:4.1
	Kernel-5_35-4_79_2_25_2_1:4.1
	Kernel-5_43:4.1
	Kernel-5_35-4_79_2_31:4.1
	Kernel-5_35-4_79_2_30:4.1
	Kernel-5_35-4_79_2_29:4.1
	Kernel-5_35-4_79_2_28:4.1
	Kernel-5_35-4_79_2_27:4.1
	Kernel-5_35-4_79_2_26:4.1
	Kernel-5_42:4.1
	Kernel-5_41:4.1
	Kernel-5_40:4.1
	Kernel-5_35-4_79_2_25:4.1
	Kernel-5_35-4_79_2_24:4.1
	Kernel-5_35-4_79_2_23:4.1
	Kernel-5_35-4_79_2_22:4.1
	Kernel-5_35-4_79_2_21:4.1
	Kernel-5_35-4_79_2_20:4.1
	Kernel-5_35-4_79_2_19:4.1
	Kernel-5_35-4_79_2_18:4.1
	Kernel-5_35-4_79_2_17:4.1
	Kernel-5_35-4_79_2_16:4.1
	Kernel-5_35-4_79_2_15:4.1
	Kernel-5_35-4_79_2_14:4.1
	Kernel-5_39:4.1
	Kernel-5_13-4_52_2_1:4.1
	Bethany:4.1.0.12
	Kernel-5_38:4.1
	Kernel-5_35-4_79_2_13:4.1
	Kernel-5_35-4_79_2_12:4.1
	Kernel-5_35-4_79_2_11:4.1
	Kernel-5_37:4.1
	Kernel-5_35-4_79_2_10:4.1
	Kernel-5_35-4_79_2_9:4.1
	Kernel-5_36:4.1
	Kernel-5_35-4_79_2_8:4.1
	Kernel-5_35-4_79_2_7:4.1
	Kernel-5_35-4_79_2_6:4.1
	Kernel-5_35-4_79_2_5:4.1
	Kernel-5_35-4_79_2_4:4.1
	Kernel-5_35-4_79_2_3:4.1
	Kernel-5_35-4_79_2_2:4.1
	dellis_autobuild_BaseSW:4.1
	Kernel-5_35-4_79_2_1:4.1
	HAL:4.1.0.10
	Kernel-5_35:4.1
	Kernel-5_34:4.1
	Kernel-5_33:4.1
	Kernel-5_32:4.1
	Kernel-5_31:4.1
	Kernel-5_30:4.1
	Kernel-5_29:4.1
	Kernel-5_28:4.1
	Kernel-5_27:4.1
	Kernel-5_26:4.1
	Kernel-5_25:4.1
	Kernel-5_24:4.1
	Kernel-5_23:4.1
	Kernel-5_22:4.1
	sbrodie_sedwards_16Mar2000:4.1
	Kernel-5_21:4.1
	Kernel-5_20:4.1
	Kernel-5_19:4.1
	Kernel-5_18:4.1
	Kernel-5_17:4.1
	Kernel-5_16:4.1
	Kernel-5_15:4.1
	Kernel-5_14:4.1
	Kernel-5_13:4.1
	Kernel-5_12:4.1
	Kernel-5_11:4.1
	Kernel-5_10:4.1
	Kernel-5_09:4.1
	Kernel-5_08:4.1
	Kernel-5_07:4.1
	Kernel-5_06:4.1
	Kernel-5_05:4.1
	Kernel-5_04:4.1
	Kernel-5_03:4.1
	Kernel-5_02:4.1
	Kernel-5_01:4.1
	Kernel-5_00:4.1
	Kernel-4_99:4.1
	Kernel-4_98:4.1
	Kernel-4_97:4.1
	Kernel-4_96:4.1
	Kernel-4_95:4.1
	Kernel-4_94:4.1
	Kernel-4_93:4.1
	Kernel-4_92:4.1
	Kernel-4_91:4.1
	Kernel-4_90:4.1
	dcotton_autobuild_BaseSW:4.1
	Kernel-4_89:4.1
	Kernel-4_88:4.1
	Kernel-4_87:4.1
	Kernel-4_86:4.1
	Kernel-4_85:4.1
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1
	Kernel-4_84:4.1
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1
	Ursula_RiscPC_bp:4.1
	Kernel-4_83:4.1
	Kernel-4_82:4.1
	Kernel-4_81:4.1
	Kernel-4_80:4.1
	Kernel-4_79:4.1
	Kernel-4_78:4.1
	Kernel-4_77:4.1
	Kernel-4_76:4.1
	Kernel-4_75:4.1
	Kernel-4_74:4.1
	Kernel-4_73:4.1
	Kernel-4_72:4.1
	Kernel-4_71:4.1
	Kernel-4_70:4.1
	Kernel-4_69:4.1
	Kernel-4_68:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	Kernel-4_63-1_1_2_5:4.1.7.1
	Kernel-4_63-1_1_2_4:4.1.7.1
	Kernel-4_67:4.1
	Kernel-4_66:4.1
	Kernel-4_63-1_1_2_3:4.1.7.1
	Kernel-4_65:4.1
	Ursula_merge:4.1
	Kernel-4_64:4.1
	mstphens_Kernel-3_81:4.1
	Kernel-4_63-1_1_2_2:4.1.7.1
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	mstphens_Kernel-3_80:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.2
date	2016.06.30.20.28.48;	author jlee;	state dead;
branches;
next	4.1;
commitid	lMnWzoE9eJz3Wwcz;

4.1
date	96.11.05.09.41.46;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.41.46;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.04.29;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.14.03;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.05.17;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Delete pre-HAL and 26bit code
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * HAL
  * HAL26
  * HAL32
  * No26bitCode
  * No32bitCode
  * IncludeTestSrc
  * FixR9CorruptionInExtensionSWI
  Various old files have also been removed (POST code, Arc/STB keyboard drivers, etc.)
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.49. Tagged as 'Kernel-5_49'
@
text
@; > TestSrc.Mem1

        TTL RISC OS 2+ POST memory linetest
;
; This test code is used to perform basic integrity tests on DRAM.
; It doesn't test all locations - just walks patterns through data
; and address lines.
;
;------------------------------------------------------------------------
; History
;
; Date          Name            Comment
; ----          ----            -------
; 18-Dec-89     ArtG            Initial version
; 1-Jun-93	ArtG		Reorganised to allow separate module for Medusa
;
;
;------------------------------------------------------------------------

;
; Test the data and address and byte strobe lines for uniqueness.
;

        LTORG
        ROUT

1
        =       "Data :",0
2
        =       "Data @@",&89,&ff,&ff,&ff,&ff,&ff,&ff,&ff,0
3
        =       "Data-F",&88,&ff,&ff,&ff,&ff,&ff,&ff,&ff,&ff,0
4
        =       "Data-P",&88,&ff,&ff,&ff,&ff,&ff,&ff,&ff,&ff,0



        ALIGN

ts_LineTest

        ADR     r4,%BT1
        BL      ts_SendText             ; Start data line tests

        MOV_fiq r0,r10_fiq
        MOV     r1, #PhysRam
        BL      ts_Dataline
        BEQ     ts_address              ; OK : continue to next test
;
; Data line test failed. This probably also means that RISCOS got the
; configuration wrong, so set it to 32K pages and repeat - otherwise 
; the data line test result may be garbage.
;
        ADR     r4,%BT2
        MOV     r11,r0                  ; save data & report fault address
        MOV     r8,r1,LSL #4
        BL      ts_SendText

        MOV     r8,r11
        ADR     r4,%BT3                 ; report data fault mask
        BL      ts_SendText

        LDR     r0,=(&E000C :OR: MEMCADR) ; set 32K page size
        STR     r0,[r0]
        MOV_fiq r11_fiq,r0

        MOV     r0,#ts_RamChunk         ; limit test to 1 block
        MOV     r1,#PhysRam
        BL      ts_Dataline   

        MOV     r8,r0
        ADR     r4,%BT4                 ; ready to report data fault mask
        B       ts_linefault

;
; Start the address line tests
;
        ROUT

4
        =       "Addrs :",0
5
        =       "Addrs",&89,&ff,&ff,&ff,&ff,&ff,&ff,&ff,0
6
        =       "Byte :",0
7
        =       "Byte",&89,&ff,&ff,&ff,&ff,&ff,&ff,&ff,0



ts_address
        ADR     r4,%BT4
        BL      ts_SendText             ; Start address line tests

        MOV_fiq r0,r10_fiq
        BL      ts_Addrline

        ADR     r4,%BT5
        MOV     r8,r0,LSL #4
        BEQ     %30                     ; Failed : report address fault

ts_linefault      
        FAULT   #R_LINFAILBIT
        B       %31

30      ADR     r4,%BT6                 ; Start Byte/Word test
        BL      ts_SendText

        MOV_fiq r0,r10_fiq              ; get memory size
        BL      ts_Byteword

        MOV     r8,r0,LSL #4            ; Get result to top of r8 
        BEQ     %40
        FAULT   #R_LINFAILBIT

        ADR     r4,%BT7

31      BL      ts_SendText
        B       %42
;
; Line tests passed. Do a short test on memory that isn't there,
; in case it's supposed to be and we want to know why it's not ..

40
        MOV_fiq r0, r10_fiq             ; if there's less than 16Mbytes ..
        CMP     r0, #(16 * 1024 * 1024)
        BCS     %F42
        ADR     r4, %FT44               ; briefly test the next bit of ram
        BL      ts_SendText             ; in case it's a duff expansion

        MOV_fiq r1,r10_fiq
        ADD     r1,r1,#PhysRam
        MOV     r0,#ts_RamChunk
        BL      ts_Dataline
        ADR     r4, %FT45
        MOV     r11, r0                 ; report the result even if OK
        MOV     r8,r1,LSL #4
        BL      ts_SendText             ; report address

        MOV     r8,r11
        ADR     r4,%FT46                ; report data fault mask
        BL      ts_SendText
;
; End of line tests
;

42
        B       ts_IOCTest

44
        =       "Exp? :",0
45
        =       "Exp? @@",&89,&ff,&ff,&ff,&ff,&ff,&ff,&ff,0
46
        =       "Exp?",&88,&ff,&ff,&ff,&ff,&ff,&ff,&ff,&ff,0



;
; Data line test.
;
; In  : r0  - size of memory
;       r1  - start address for test
;
; Out : r0  - failing data pattern
;       r1  - address of failure
;
;
; This exercises data lines in attempt to find shorts/opens.
; It goes something like :
;
; for (address = start; address < end of ram; address += ts_RamChunk)
;       for (ptr = address, pattern = 1; pattern != 0; pattern <<= 1)
;               *ptr++ =  pattern;
;               *ptr++ = ~pattern;
;       for (ptr = address, pattern = 1; pattern != 0; pattern <<= 1)
;               result |=  pattern ^ *ptr++;
;               result |= ~pattern ^ *ptr++;
;       if (result |= 0)
;               return result and address
;

ts_Dataline     ROUT

        ADD     r7,r1,r0                ; end address
;
; Write all walking-zero, walking-one patterns
;
10      MOV     r6,r1                   ; set pointer for a write loop
        MOV     r5,#1                   ; set initial test pattern
        MVN     r4,r5                   ; and it's inverse        
11
        STMIA   r6!,{r4-r5}             ; write the patterns

        ADDS    r5,r5,r5                ; shift the pattern (into Carry)
        MVN     r4,r5
        BCC     %BT11                   ; repeat until all bits done
;
; Read back and accumulate in r0 any incorrect bits
;
        MOV     r6,r1                   ; set pointer for a read loop
        MOV     r5,#1                   ; set initial test pattern
        MVN     r4,r5                   ; and it's inverse        
        MOV     r0,#0                   ; accumulate result
21
        LDMIA   r6!,{r2-r3}             ; read the patterns
        EOR     r2,r2,r4
        ORR     r0,r0,r2                ; OR any failed bits into r0
        EOR     r3,r3,r5
        ORR     r0,r0,r2

        ADDS    r5,r5,r5                ; shift the pattern (into Carry)
        MVN     r4,r5
        BCC     %BT21                   ; repeat until all bits done
;
; After all checks at this address group, report back errors
;
        MOVS    r0,r0                   ; check for any result bits set 
        MOVNE   pc,r14                  ; return on error
;
; Bump to another address group
;
        ADD     r1,r1,#ts_RamChunk
        CMPS    r1,r7                   ; test for loop end
        BLO     %10

        SUBS    r1,r1,#ts_RamChunk      ; no fault - last tested address
        MOVS    r0,r0
        MOV     pc,r14                  ; test complete - no failures.


;
; Address line test
;
; In  : r0  - size of memeory
;
; Out : r0  - failing address bit mask
;
; This exercises address lines in an attempt to find any which don't
; work (i.e., don't select unique addresses).
;
; It works something like :
;
; MaxRam = PhysRam | (Memory size - 4); 
; for (pattern = 4; pattern < memsize; pattern <<= 1 )
;       *(PhysRam ^ pattern) = pattern;
;       *(MaxRam  ^ pattern) = ~pattern;
; for (pattern = 4; pattern < memsize; pattern <<= 1 )
;       if (*PhysRam == *(PhysRam ^ pattern))
;               result |= pattern;
;       if (*MaxRam == *(MaxRam + pattern))
;               result |= pattern;
;  return result
;


ts_Addrline     ROUT

        MOVS    r7,r0                   ; Save memory size
        SUB     r6,r0,#4                ; Calculate MaxRam
        ADD     r6,r6,#PhysRam          ; (all-bits-set memory address)
;
; Mark (walking one, walking 0) addresses with unique patterns
;
        LDR     r5,=&5A5AA5A5           ; initialize end markers
        STR     r5,[r6]
        MVN     r4,r5
        MOV     r3,#PhysRam
        STR     r4,[r3]

        MOV     r5,#4                   ; initialize pattern
02
        MVN     r4,r5
        EOR     r3,r5,#PhysRam          ; point to (start ^ pattern)
        STR     r4,[r3]
        EOR     r3,r5,r6                ; point to (end ^ pattern)
        STR     r5,[r3]

        MOV     r5,r5,LSL #1            ; shift test pattern up
        CMPS    r5,r7                   ; test bit still inside memory ?
        BCC     %02                     ; reached top bit - end this loop
;
; Check (walking one, walking 0) addresses for effectivity
;
        MOV     r5,#4                   ; initialize pattern
        MOV     r3,#PhysRam
        MOV     r0,#0
04
        MVN     r4,r5
        EOR     r2,r5,r3                ; point to (start ^ pattern)
        LDR     r2,[r2]
        LDR     r1,[r3]
        CMPS    r1,r2                   ; do contents differ ?
        ORREQ   r0,r0,r5                ; no - record ineffective bit

        EOR     r2,r5,r6                ; point to (end ^ pattern)
        LDR     r2,[r2]
        LDR     r1,[r6]
        CMPS    r1,r2                   ; do contents differ ?
        ORREQ   r0,r0,r5                ; no - record ineffective bit

        MOV     r5,r5,LSL #1            ; shift test pattern up
        CMPS    r5,r7                   ; test bit still inside memory ?
        BCC     %04                     ; reached top bit - end this loop

        MOVS    r0,r0                   ; any result bits set - return error
        MOV     pc,r14


;
; Byte / word test
;
; In  :  r0 - memory size
;
; Out :  r0 - address of physical ram where failure occured
;
; This test ensures (for each of four possible MEMCs fitted)
; that individual bytes may be written to each part of a word
; without affecting the other bytes in the word.
;
; for (address = PhysRam; address < PhysRam + Memsize; address += 4Mbyte)
;       for (byte = 0; byte < 4; byte ++)
;               address[0] = word_signature
;               address[1] = ~word_signature
;               address + byte = byte_signature
;               if (address[0] !=
;                                 (word_signature & (~ff << byte * 8))
;                               | (byte_signature        << byte * 8)  )
;                       result |= (1 << byte)
;       if (result != 0
;               result |= address;      /* fail at address, byte(s)     */
;               return result;
;  return result;                       /* pass */
;

ts_Byteword     ROUT

        ADD     r7,r0,#PhysRam          ; Set test limit address
        MOV     r1,#PhysRam             ; Initial test address
        LDR     r3,=&AABBCCDD           ; word signature
;
; MEMC test loop (for addresses 4M, 8M, ...)
;
01
        MOV     r0,#0                   ; clear result register
        MOV     r2,#0                   ; clear byte count
;
; byte test loop ( for bytes 0 to 4  ...)
;
02
        MVN     r4,r3
        STMIA   r1,{r3,r4}              ; write word signature
        STRB    r2,[r1,r2]              ; write byte

        MOV     r4,r2,LSL #3            ; calculate expected result
        MOV     r5,#&ff     
        MVN     r5,r5,LSL r4
        AND     r5,r5,r3                ; word signature, byte removed
        ORR     r5,r5,r2,LSL r4         ; byte signature inserted

        LDR     r4,[r1,#4]
        LDR     r4,[r1]                 ; read modified word
        CMPS    r4,r5
        MOV     r5,#1
        ORRNE   r0,r0,r5,LSL r2         ; fault : set bit in result mask
;
; Loop for next byte
;
        ADD     r2,r2,#1                ; Bump byte counter
        CMPS    r2,#4                   ; ... until 4 byte strobes tested 
        BLO     %BT02
;
; byte strobes all tested : check for errors
;
        CMPS    r0,#0
        ORRNE   r0,r0,r1
        MOVNE   pc,r14                  ; Error : return address and fault.
;
; Loop for next MEMC
;
        ADD     r1,r1,#&400000          ; Bump to next MEMC
        CMPS    r1,r7
        BLO     %01

        MOVS    r0,#0                   ; Passed - return OK
        MOV     pc,r14


        END 
 @


4.1
log
@Initial revision
@
text
@@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
