head	4.4;
access;
symbols
	HAL_merge:4.3
	Kernel-5_48:4.3
	Kernel-5_35-4_79_2_327:4.3
	Kernel-5_35-4_79_2_326:4.3
	Kernel-5_35-4_79_2_325:4.3
	Kernel-5_35-4_79_2_324:4.3
	Kernel-5_35-4_79_2_323:4.3
	Kernel-5_35-4_79_2_322:4.3
	Kernel-5_35-4_79_2_321:4.3
	Kernel-5_35-4_79_2_320:4.3
	Kernel-5_35-4_79_2_319:4.3
	Kernel-5_35-4_79_2_318:4.3
	Kernel-5_35-4_79_2_317:4.3
	Kernel-5_35-4_79_2_316:4.3
	Kernel-5_35-4_79_2_315:4.3
	Kernel-5_35-4_79_2_314:4.3
	Kernel-5_35-4_79_2_313:4.3
	Kernel-5_35-4_79_2_312:4.3
	Kernel-5_35-4_79_2_311:4.3
	Kernel-5_35-4_79_2_310:4.3
	Kernel-5_35-4_79_2_309:4.3
	Kernel-5_35-4_79_2_308:4.3
	Kernel-5_35-4_79_2_307:4.3
	Kernel-5_35-4_79_2_306:4.3
	Kernel-5_35-4_79_2_305:4.3
	Kernel-5_35-4_79_2_304:4.3
	Kernel-5_35-4_79_2_303:4.3
	Kernel-5_35-4_79_2_302:4.3
	Kernel-5_35-4_79_2_301:4.3
	Kernel-5_35-4_79_2_300:4.3
	Kernel-5_35-4_79_2_299:4.3
	Kernel-5_35-4_79_2_298:4.3
	Kernel-5_35-4_79_2_297:4.3
	Kernel-5_35-4_79_2_296:4.3
	Kernel-5_35-4_79_2_295:4.3
	Kernel-5_35-4_79_2_294:4.3
	Kernel-5_35-4_79_2_293:4.3
	Kernel-5_35-4_79_2_292:4.3
	Kernel-5_35-4_79_2_291:4.3
	Kernel-5_35-4_79_2_290:4.3
	Kernel-5_35-4_79_2_289:4.3
	Kernel-5_35-4_79_2_288:4.3
	Kernel-5_35-4_79_2_287:4.3
	Kernel-5_35-4_79_2_286:4.3
	Kernel-5_35-4_79_2_285:4.3
	Kernel-5_35-4_79_2_284:4.3
	Kernel-5_35-4_79_2_283:4.3
	Kernel-5_35-4_79_2_282:4.3
	Kernel-5_35-4_79_2_281:4.3
	Kernel-5_35-4_79_2_280:4.3
	Kernel-5_35-4_79_2_279:4.3
	Kernel-5_35-4_79_2_278:4.3
	Kernel-5_35-4_79_2_277:4.3
	Kernel-5_35-4_79_2_276:4.3
	Kernel-5_35-4_79_2_275:4.3
	Kernel-5_35-4_79_2_274:4.3
	Kernel-5_35-4_79_2_273:4.3
	Kernel-5_35-4_79_2_272:4.3
	Kernel-5_35-4_79_2_271:4.3
	Kernel-5_35-4_79_2_270:4.3
	Kernel-5_35-4_79_2_269:4.3
	Kernel-5_35-4_79_2_268:4.3
	Kernel-5_35-4_79_2_267:4.3
	Kernel-5_35-4_79_2_266:4.3
	Kernel-5_35-4_79_2_265:4.3
	Kernel-5_35-4_79_2_264:4.3
	Kernel-5_35-4_79_2_263:4.3
	Kernel-5_35-4_79_2_262:4.3
	Kernel-5_35-4_79_2_261:4.3
	Kernel-5_35-4_79_2_260:4.3
	Kernel-5_35-4_79_2_259:4.3
	Kernel-5_35-4_79_2_258:4.3
	Kernel-5_35-4_79_2_257:4.3
	Kernel-5_35-4_79_2_256:4.3
	Kernel-5_35-4_79_2_255:4.3
	Kernel-5_35-4_79_2_254:4.3
	Kernel-5_35-4_79_2_253:4.3
	Kernel-5_35-4_79_2_252:4.3
	Kernel-5_35-4_79_2_251:4.3
	Kernel-5_35-4_79_2_250:4.3
	Kernel-5_35-4_79_2_249:4.3
	Kernel-5_35-4_79_2_248:4.3
	Kernel-5_35-4_79_2_247:4.3
	Kernel-5_35-4_79_2_246:4.3
	Kernel-5_35-4_79_2_245:4.3
	Kernel-5_35-4_79_2_244:4.3
	Kernel-5_35-4_79_2_243:4.3
	Kernel-5_35-4_79_2_242:4.3
	Kernel-5_35-4_79_2_241:4.3
	Kernel-5_35-4_79_2_240:4.3
	Kernel-5_35-4_79_2_239:4.3
	Kernel-5_35-4_79_2_238:4.3
	Kernel-5_35-4_79_2_237:4.3
	Kernel-5_35-4_79_2_236:4.3
	Kernel-5_35-4_79_2_235:4.3
	Kernel-5_35-4_79_2_234:4.3
	Kernel-5_35-4_79_2_233:4.3
	Kernel-5_35-4_79_2_232:4.3
	Kernel-5_35-4_79_2_231:4.3
	Kernel-5_35-4_79_2_230:4.3
	Kernel-5_35-4_79_2_229:4.3
	Kernel-5_35-4_79_2_228:4.3
	Kernel-5_35-4_79_2_227:4.3
	Kernel-5_35-4_79_2_226:4.3
	Kernel-5_35-4_79_2_225:4.3
	Kernel-5_35-4_79_2_224:4.3
	Kernel-5_35-4_79_2_223:4.3
	Kernel-5_35-4_79_2_222:4.3
	Kernel-5_35-4_79_2_221:4.3
	Kernel-5_35-4_79_2_220:4.3
	Kernel-5_35-4_79_2_219:4.3
	Kernel-5_35-4_79_2_218:4.3
	Kernel-5_35-4_79_2_217:4.3
	Kernel-5_35-4_79_2_216:4.3
	Kernel-5_35-4_79_2_215:4.3
	Kernel-5_35-4_79_2_214:4.3
	Kernel-5_35-4_79_2_213:4.3
	Kernel-5_35-4_79_2_212:4.3
	Kernel-5_35-4_79_2_211:4.3
	Kernel-5_35-4_79_2_210:4.3
	Kernel-5_35-4_79_2_209:4.3
	Kernel-5_35-4_79_2_208:4.3
	Kernel-5_35-4_79_2_207:4.3
	Kernel-5_35-4_79_2_206:4.3
	Kernel-5_35-4_79_2_205:4.3
	Kernel-5_35-4_79_2_204:4.3
	Kernel-5_35-4_79_2_203:4.3
	Kernel-5_35-4_79_2_202:4.3
	Kernel-5_35-4_79_2_201:4.3
	Kernel-5_35-4_79_2_200:4.3
	Kernel-5_35-4_79_2_199:4.3
	Kernel-5_35-4_79_2_198:4.3
	Kernel-5_35-4_79_2_197:4.3
	Kernel-5_35-4_79_2_196:4.3
	Kernel-5_35-4_79_2_195:4.3
	Kernel-5_35-4_79_2_194:4.3
	Kernel-5_35-4_79_2_193:4.3
	Kernel-5_35-4_79_2_192:4.3
	Kernel-5_35-4_79_2_191:4.3
	Kernel-5_35-4_79_2_190:4.3
	Kernel-5_35-4_79_2_189:4.3
	Kernel-5_35-4_79_2_188:4.3
	Kernel-5_35-4_79_2_187:4.3
	Kernel-5_35-4_79_2_186:4.3
	Kernel-5_35-4_79_2_185:4.3
	Kernel-5_35-4_79_2_184:4.3
	Kernel-5_35-4_79_2_183:4.3
	Kernel-5_35-4_79_2_182:4.3
	Kernel-5_35-4_79_2_181:4.3
	Kernel-5_35-4_79_2_180:4.3
	Kernel-5_35-4_79_2_179:4.3
	Kernel-5_35-4_79_2_178:4.3
	Kernel-5_35-4_79_2_177:4.3
	Kernel-5_35-4_79_2_176:4.3
	Kernel-5_35-4_79_2_175:4.3
	Kernel-5_35-4_79_2_174:4.3
	Kernel-5_35-4_79_2_173:4.3
	Kernel-5_35-4_79_2_172:4.3
	Kernel-5_35-4_79_2_171:4.3
	Kernel-5_35-4_79_2_170:4.3
	Kernel-5_35-4_79_2_169:4.3
	Kernel-5_35-4_79_2_168:4.3
	Kernel-5_35-4_79_2_167:4.3
	Kernel-5_35-4_79_2_166:4.3
	Kernel-5_35-4_79_2_165:4.3
	RPi_merge:4.3
	Kernel-5_35-4_79_2_147_2_23:4.3
	Kernel-5_35-4_79_2_147_2_22:4.3
	Kernel-5_35-4_79_2_147_2_21:4.3
	Kernel-5_35-4_79_2_147_2_20:4.3
	Kernel-5_35-4_79_2_147_2_19:4.3
	Kernel-5_35-4_79_2_147_2_18:4.3
	Kernel-5_35-4_79_2_164:4.3
	Kernel-5_35-4_79_2_163:4.3
	Kernel-5_35-4_79_2_147_2_17:4.3
	Kernel-5_35-4_79_2_147_2_16:4.3
	Kernel-5_35-4_79_2_147_2_15:4.3
	Kernel-5_35-4_79_2_162:4.3
	Kernel-5_35-4_79_2_161:4.3
	Kernel-5_35-4_79_2_147_2_14:4.3
	Kernel-5_35-4_79_2_147_2_13:4.3
	Kernel-5_35-4_79_2_160:4.3
	Kernel-5_35-4_79_2_159:4.3
	Kernel-5_35-4_79_2_158:4.3
	Kernel-5_35-4_79_2_157:4.3
	Kernel-5_35-4_79_2_156:4.3
	Kernel-5_35-4_79_2_147_2_12:4.3
	Kernel-5_35-4_79_2_147_2_11:4.3
	Kernel-5_35-4_79_2_155:4.3
	Kernel-5_35-4_79_2_147_2_10:4.3
	Kernel-5_35-4_79_2_154:4.3
	Kernel-5_35-4_79_2_153:4.3
	Kernel-5_35-4_79_2_147_2_9:4.3
	Kernel-5_35-4_79_2_152:4.3
	Kernel-5_35-4_79_2_151:4.3
	Kernel-5_35-4_79_2_147_2_8:4.3
	Kernel-5_35-4_79_2_147_2_7:4.3
	Kernel-5_35-4_79_2_150:4.3
	Kernel-5_35-4_79_2_147_2_6:4.3
	Kernel-5_35-4_79_2_147_2_5:4.3
	Kernel-5_35-4_79_2_149:4.3
	Kernel-5_35-4_79_2_147_2_4:4.3
	Kernel-5_35-4_79_2_147_2_3:4.3
	Kernel-5_35-4_79_2_148:4.3
	Kernel-5_35-4_79_2_147_2_2:4.3
	Kernel-5_35-4_79_2_147_2_1:4.3
	RPi:4.3.0.18
	RPi_bp:4.3
	Kernel-5_35-4_79_2_98_2_52_2_1:4.3
	alees_Kernel_dev:4.3.0.16
	alees_Kernel_dev_bp:4.3
	Kernel-5_35-4_79_2_147:4.3
	Kernel-5_35-4_79_2_146:4.3
	Kernel-5_35-4_79_2_145:4.3
	Kernel-5_35-4_79_2_144:4.3
	Kernel-5_35-4_79_2_143:4.3
	Kernel-5_35-4_79_2_142:4.3
	Kernel-5_35-4_79_2_141:4.3
	Kernel-5_35-4_79_2_140:4.3
	Kernel-5_35-4_79_2_139:4.3
	Kernel-5_35-4_79_2_138:4.3
	Kernel-5_35-4_79_2_137:4.3
	Kernel-5_35-4_79_2_136:4.3
	Kernel-5_35-4_79_2_135:4.3
	Kernel-5_35-4_79_2_134:4.3
	Kernel-5_35-4_79_2_133:4.3
	Kernel-5_35-4_79_2_132:4.3
	Kernel-5_35-4_79_2_131:4.3
	Kernel-5_35-4_79_2_130:4.3
	Kernel-5_35-4_79_2_129:4.3
	Kernel-5_35-4_79_2_128:4.3
	Kernel-5_35-4_79_2_127:4.3
	Kernel-5_35-4_79_2_126:4.3
	Kernel-5_35-4_79_2_125:4.3
	Kernel-5_35-4_79_2_124:4.3
	Kernel-5_35-4_79_2_123:4.3
	Cortex_merge:4.3
	Kernel-5_35-4_79_2_122:4.3
	Kernel-5_35-4_79_2_98_2_54:4.3
	Kernel-5_35-4_79_2_98_2_53:4.3
	Kernel-5_35-4_79_2_98_2_52:4.3
	Kernel-5_35-4_79_2_98_2_51:4.3
	Kernel-5_35-4_79_2_98_2_50:4.3
	Kernel-5_35-4_79_2_98_2_49:4.3
	Kernel-5_35-4_79_2_98_2_48:4.3
	Kernel-5_35-4_79_2_121:4.3
	Kernel-5_35-4_79_2_98_2_47:4.3
	Kernel-5_35-4_79_2_120:4.3
	Kernel-5_35-4_79_2_98_2_46:4.3
	Kernel-5_35-4_79_2_119:4.3
	Kernel-5_35-4_79_2_98_2_45:4.3
	Kernel-5_35-4_79_2_98_2_44:4.3
	Kernel-5_35-4_79_2_118:4.3
	Kernel-5_35-4_79_2_98_2_43:4.3
	Kernel-5_35-4_79_2_117:4.3
	Kernel-5_35-4_79_2_116:4.3
	Kernel-5_35-4_79_2_98_2_42:4.3
	Kernel-5_35-4_79_2_115:4.3
	Kernel-5_35-4_79_2_98_2_41:4.3
	Kernel-5_35-4_79_2_98_2_40:4.3
	Kernel-5_35-4_79_2_114:4.3
	Kernel-5_35-4_79_2_98_2_39:4.3
	Kernel-5_35-4_79_2_98_2_38:4.3
	Kernel-5_35-4_79_2_113:4.3
	Kernel-5_35-4_79_2_112:4.3
	Kernel-5_35-4_79_2_98_2_37:4.3
	Kernel-5_35-4_79_2_98_2_36:4.3
	Kernel-5_35-4_79_2_98_2_35:4.3
	Kernel-5_35-4_79_2_98_2_34:4.3
	Kernel-5_35-4_79_2_98_2_33:4.3
	Kernel-5_35-4_79_2_98_2_32:4.3
	Kernel-5_35-4_79_2_98_2_31:4.3
	Kernel-5_35-4_79_2_98_2_30:4.3
	Kernel-5_35-4_79_2_98_2_29:4.3
	Kernel-5_35-4_79_2_98_2_28:4.3
	Kernel-5_35-4_79_2_98_2_27:4.3
	Kernel-5_35-4_79_2_98_2_26:4.3
	Kernel-5_35-4_79_2_111:4.3
	Kernel-5_35-4_79_2_98_2_25:4.3
	Kernel-5_35-4_79_2_98_2_24:4.3
	Kernel-5_35-4_79_2_98_2_23:4.3
	Kernel-5_35-4_79_2_110:4.3
	Kernel-5_35-4_79_2_98_2_22:4.3
	Kernel-5_35-4_79_2_109:4.3
	Kernel-5_35-4_79_2_98_2_21:4.3
	Kernel-5_35-4_79_2_98_2_20:4.3
	Kernel-5_35-4_79_2_108:4.3
	Kernel-5_35-4_79_2_107:4.3
	Kernel-5_35-4_79_2_98_2_19:4.3
	Kernel-5_35-4_79_2_98_2_18:4.3
	Kernel-5_35-4_79_2_98_2_17:4.3
	Kernel-5_35-4_79_2_98_2_16:4.3
	Kernel-5_35-4_79_2_98_2_15:4.3
	Kernel-5_35-4_79_2_106:4.3
	Kernel-5_35-4_79_2_105:4.3
	Kernel-5_35-4_79_2_104:4.3
	Kernel-5_35-4_79_2_98_2_14:4.3
	Kernel-5_35-4_79_2_98_2_13:4.3
	Kernel-5_35-4_79_2_98_2_12:4.3
	Kernel-5_35-4_79_2_98_2_11:4.3
	Kernel-5_35-4_79_2_98_2_10:4.3
	Kernel-5_35-4_79_2_98_2_9:4.3
	Kernel-5_35-4_79_2_103:4.3
	Kernel-5_35-4_79_2_102:4.3
	Kernel-5_35-4_79_2_98_2_8:4.3
	Kernel-5_35-4_79_2_98_2_7:4.3
	Kernel-5_35-4_79_2_98_2_6:4.3
	Kernel-5_35-4_79_2_98_2_5:4.3
	Kernel-5_35-4_79_2_98_2_4:4.3
	Kernel-5_35-4_79_2_101:4.3
	Kernel-5_35-4_79_2_100:4.3
	Kernel-5_35-4_79_2_99:4.3
	Kernel-5_35-4_79_2_98_2_3:4.3
	Kernel-5_35-4_79_2_98_2_2:4.3
	Kernel-5_35-4_79_2_98_2_1:4.3
	Cortex:4.3.0.12
	Cortex_bp:4.3
	Kernel-5_35-4_79_2_98:4.3
	Kernel-5_35-4_79_2_97:4.3
	Kernel-5_35-4_79_2_96:4.3
	Kernel-5_35-4_79_2_95:4.3
	Kernel-5_35-4_79_2_94:4.3
	Kernel-5_35-4_79_2_93:4.3
	Kernel-5_35-4_79_2_92:4.3
	Kernel-5_35-4_79_2_91:4.3
	Kernel-5_35-4_79_2_90:4.3
	Kernel-5_35-4_79_2_89:4.3
	Kernel-5_35-4_79_2_88:4.3
	Kernel-5_35-4_79_2_87:4.3
	Kernel-5_35-4_79_2_86:4.3
	Kernel-5_35-4_79_2_85:4.3
	Kernel-5_35-4_79_2_84:4.3
	Kernel-5_35-4_79_2_83:4.3
	Kernel-5_35-4_79_2_82:4.3
	Kernel-5_35-4_79_2_81:4.3
	Kernel-5_35-4_79_2_80:4.3
	Kernel-5_35-4_79_2_79:4.3
	Kernel-5_35-4_79_2_78:4.3
	Kernel-5_35-4_79_2_77:4.3
	RO_5_07:4.3
	Kernel-5_35-4_79_2_76:4.3
	Kernel-5_35-4_79_2_75:4.3
	Kernel-5_35-4_79_2_74:4.3
	Kernel-5_35-4_79_2_73:4.3
	Kernel-5_35-4_79_2_72:4.3
	Kernel-5_35-4_79_2_71:4.3
	Kernel-5_35-4_79_2_70:4.3
	Kernel-5_35-4_79_2_69:4.3
	Kernel-5_35-4_79_2_68:4.3
	Kernel-5_35-4_79_2_67:4.3
	Kernel-5_35-4_79_2_66:4.3
	Kernel-5_35-4_79_2_65:4.3
	Kernel-5_35-4_79_2_64:4.3
	Kernel-5_35-4_79_2_63:4.3
	Kernel-5_35-4_79_2_62:4.3
	Kernel-5_35-4_79_2_61:4.3
	Kernel-5_35-4_79_2_59:4.3
	Kernel-5_35-4_79_2_58:4.3
	Kernel-5_35-4_79_2_57:4.3
	Kernel-5_35-4_79_2_56:4.3
	Kernel-5_35-4_79_2_55:4.3
	Kernel-5_35-4_79_2_54:4.3
	Kernel-5_35-4_79_2_53:4.3
	Kernel-5_35-4_79_2_52:4.3
	Kernel-5_35-4_79_2_51:4.3
	Kernel-5_35-4_79_2_50:4.3
	Kernel-5_35-4_79_2_49:4.3
	Kernel-5_35-4_79_2_48:4.3
	Kernel-5_47:4.3
	Kernel-5_46-4_90_2_1:4.3
	nbingham_Kernel_FastNC_dev_bp:4.3
	nbingham_Kernel_FastNC_dev:4.3.0.14
	Kernel-5_46:4.3
	Kernel-5_45:4.3
	Kernel-5_35-4_79_2_47:4.3
	Kernel-5_35-4_79_2_46:4.3
	Kernel-5_35-4_79_2_45:4.3
	Kernel-5_35-4_79_2_44:4.3
	Kernel-5_35-4_79_2_25_2_2:4.3
	Kernel-5_35-4_79_2_43:4.3
	Kernel-5_35-4_79_2_42:4.3
	Kernel-5_35-4_79_2_41:4.3
	Kernel-5_35-4_79_2_40:4.3
	Kernel-5_35-4_79_2_39:4.3
	Kernel-5_35-4_79_2_38:4.3
	Kernel-5_35-4_79_2_37:4.3
	Kernel-5_35-4_79_2_36:4.3
	Kernel-5_35-4_79_2_35:4.3
	Kernel-5_35-4_79_2_34:4.3
	Kernel-5_35-4_79_2_33:4.3
	Kernel-5_35-4_79_2_32:4.3
	Kernel-5_44:4.3
	Kernel-5_35-4_79_2_25_2_1:4.3
	Kernel-5_43:4.3
	Kernel-5_35-4_79_2_31:4.3
	Kernel-5_35-4_79_2_30:4.3
	Kernel-5_35-4_79_2_29:4.3
	Kernel-5_35-4_79_2_28:4.3
	Kernel-5_35-4_79_2_27:4.3
	Kernel-5_35-4_79_2_26:4.3
	Kernel-5_42:4.3
	Kernel-5_41:4.3
	Kernel-5_40:4.3
	Kernel-5_35-4_79_2_25:4.3
	Kernel-5_35-4_79_2_24:4.3
	Kernel-5_35-4_79_2_23:4.3
	Kernel-5_35-4_79_2_22:4.3
	Kernel-5_35-4_79_2_21:4.3
	Kernel-5_35-4_79_2_20:4.3
	Kernel-5_35-4_79_2_19:4.3
	Kernel-5_35-4_79_2_18:4.3
	Kernel-5_35-4_79_2_17:4.3
	Kernel-5_35-4_79_2_16:4.3
	Kernel-5_35-4_79_2_15:4.3
	Kernel-5_35-4_79_2_14:4.3
	Kernel-5_39:4.3
	Kernel-5_13-4_52_2_1:4.3
	Bethany:4.3.0.10
	Kernel-5_38:4.3
	Kernel-5_35-4_79_2_13:4.3
	Kernel-5_35-4_79_2_12:4.3
	Kernel-5_35-4_79_2_11:4.3
	Kernel-5_37:4.3
	Kernel-5_35-4_79_2_10:4.3
	Kernel-5_35-4_79_2_9:4.3
	Kernel-5_36:4.3
	Kernel-5_35-4_79_2_8:4.3
	Kernel-5_35-4_79_2_7:4.3
	Kernel-5_35-4_79_2_6:4.3
	Kernel-5_35-4_79_2_5:4.3
	Kernel-5_35-4_79_2_4:4.3
	Kernel-5_35-4_79_2_3:4.3
	Kernel-5_35-4_79_2_2:4.3
	dellis_autobuild_BaseSW:4.3
	Kernel-5_35-4_79_2_1:4.3
	HAL:4.3.0.8
	Kernel-5_35:4.3
	Kernel-5_34:4.3
	Kernel-5_33:4.3
	Kernel-5_32:4.3
	Kernel-5_31:4.3
	Kernel-5_30:4.3
	Kernel-5_29:4.3
	Kernel-5_28:4.3
	Kernel-5_27:4.3
	Kernel-5_26:4.3
	Kernel-5_25:4.3
	Kernel-5_24:4.3
	Kernel-5_23:4.3
	Kernel-5_22:4.3
	sbrodie_sedwards_16Mar2000:4.3
	Kernel-5_21:4.3
	Kernel-5_20:4.3
	Kernel-5_19:4.3
	Kernel-5_18:4.3
	Kernel-5_17:4.3
	Kernel-5_16:4.3
	Kernel-5_15:4.3
	Kernel-5_14:4.3
	Kernel-5_13:4.3
	Kernel-5_12:4.3
	Kernel-5_11:4.3
	Kernel-5_10:4.3
	Kernel-5_09:4.3
	Kernel-5_08:4.3
	Kernel-5_07:4.3
	Kernel-5_06:4.3
	Kernel-5_05:4.3
	Kernel-5_04:4.3
	Kernel-5_03:4.3
	Kernel-5_02:4.3
	Kernel-5_01:4.3
	Kernel-5_00:4.3
	Kernel-4_99:4.3
	Kernel-4_98:4.3
	Kernel-4_97:4.3
	Kernel-4_96:4.3
	Kernel-4_95:4.3
	Kernel-4_94:4.3
	Kernel-4_93:4.3
	Kernel-4_92:4.3
	Kernel-4_91:4.3
	Kernel-4_90:4.3
	dcotton_autobuild_BaseSW:4.3
	Kernel-4_89:4.3
	Kernel-4_88:4.3
	Kernel-4_87:4.3
	Kernel-4_86:4.3
	Kernel-4_85:4.3
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.3
	Kernel-4_84:4.3
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.3
	Ursula_RiscPC_bp:4.3
	Kernel-4_83:4.3
	Kernel-4_82:4.3
	Kernel-4_81:4.3
	Kernel-4_80:4.3
	Kernel-4_79:4.3
	Kernel-4_78:4.3
	Kernel-4_77:4.3
	Kernel-4_76:4.3
	Kernel-4_75:4.3
	Kernel-4_74:4.3
	Kernel-4_73:4.3
	Kernel-4_72:4.3
	Kernel-4_71:4.3
	Kernel-4_70:4.3
	Kernel-4_69:4.3
	Kernel-4_68:4.3
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	Ursula_RiscPC:4.3.0.6
	Kernel-4_63-1_1_2_5:4.1.7.1
	Kernel-4_63-1_1_2_4:4.1.7.1
	Kernel-4_67:4.3
	Kernel-4_66:4.3
	Kernel-4_63-1_1_2_3:4.1.7.1
	Kernel-4_65:4.3
	Ursula_merge:4.3
	Kernel-4_64:4.3
	mstphens_Kernel-3_81:4.3
	Kernel-4_63-1_1_2_2:4.1.7.1
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	mstphens_Kernel-3_80:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.3
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.3.0.4
	Daytona_bp:4.3
	Ursula_bp:4.3
	Ursula:4.3.0.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.2
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2016.06.30.20.28.48;	author jlee;	state dead;
branches;
next	4.3;
commitid	lMnWzoE9eJz3Wwcz;

4.3
date	97.05.07.05.51.42;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.01.21.14.06.42;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.41.46;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.41.46;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.04.34;	author nturton;	state Exp;
branches
	4.1.3.1.2.1;
next	4.1.3.2;

4.1.3.2
date	97.05.01.08.09.14;	author kbracey;	state Exp;
branches;
next	;

4.1.3.1.2.1
date	97.04.30.16.45.52;	author kbracey;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.14.06;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.05.19;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Delete pre-HAL and 26bit code
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * HAL
  * HAL26
  * HAL32
  * No26bitCode
  * No32bitCode
  * IncludeTestSrc
  * FixR9CorruptionInExtensionSWI
  Various old files have also been removed (POST code, Arc/STB keyboard drivers, etc.)
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.49. Tagged as 'Kernel-5_49'
@
text
@        ;> RomCheck
; 
; RISC OS 2+ BOOT TEST SOFTWARE
; MEMORY TEST 3 VERSION A.
; BRIAN RICE 01-11-89
; 24.04.90      0.10    ArtG    Added ROM size test
; 15.05.90      1.00    ArtG    Changed to put checksum at (end - 2 words)
; 17.05.90      1.01    ArtG    Changed to get ROM length from vectot table
; 16-Aug-96     1.02	JRH	Gets ROM start using PC-relative addressing,
;				to support OSimages in 1st or 2nd ROM bank
;
;
; This file will perform quick checksum test on the OS ROMS.
;
;
; The test code for this test is a simple additive checksum routine.
; The software will read eight words from ROM then add the contents from ROM  
; to a register. When the test is complete the contents of the checksum
; register is checked by adding the final word in ROM - this should give 
; zero.
; The program will be run from ROM, at slowest speed.
;
; All except the last two words are checksummed : these hold the numbers
; that cause each individual ROM to CRC to zero, so they can't simultaneously
; be included in an all-zero additive checksum.

ts_CRCsize      *       (2 * 4)

;
;
;r0 IS A POINTER TO THE LOCATIONS IN MEMORY.
;r1 HAS THE CALCULATED CHECKSUM.
;r2 HOLDS A COUNTER INDICATION HOW MANY WORDS ARE LEFT TO GET
;r3 is a temporary variable
;r4 TO r11 ARE USED TO LOAD THE CONTENTS OF 8 LOCATIONS FROM THE ROM.
;
        ROUT

ts_ROM_checksum

;StrongARM_POST issue:
;ARM810 - this will probably go bang! because ARM810 aborts if the processor
;         vectors (00 - 1C) are read in 26-bit mode

         MOV    r1, #&00                    ; initialise accumulator    
	ADRL	r0, ROM			; initialise pointer using PC-relative
					; addressing (could be 1st or 2nd bank)
         LDR    r2, [r0, #ts_ROMSIZE]       ; initialise endstop
         ADD    r2, r2, r0                  ; - must be at least 8 words 
         SUB    r2, r2, #(10 * 4)           ; below the real endpoint

loop1    LDMIA  r0!, {r4 - r11}             ;LOAD r4 TO r11 WITH THE CONTENTS
                                            ;OF LOCATIONS POINTED TO BY r0
                                            ;WHICH IS INCREMEMTED AUTOMATICALLY
                                            ;TO POINT TO THE NEXT LOCATION
01
         ADD    r1, r1,          r4         ;ADD r4  TO CHECKSUM
         ADD    r1, r1,          r5         ;ADD r5  TO CHECKSUM
         ADD    r1, r1,          r6         ;ADD r6  TO CHECKSUM
         ADD    r1, r1,          r7         ;ADD r7  TO CHECKSUM
         ADD    r1, r1,          r8         ;ADD r8  TO CHECKSUM
         ADD    r1, r1,          r9         ;ADD r9  TO CHECKSUM
         ADD    r1, r1,          r10        ;ADD r10 TO CHECKSUM
         ADD    r1, r1,          r11        ;ADD r11 TO CHECKSUM
02
        ASSERT ((%02 - %01) = 32)       ; else r2 won't count down correctly
 
         CMPS   r0, r2
         BCC    loop1                       ;loop until pointer reaches endstop

         LDMIA  r0!, {r4 - r9}             ; get last 6 words (miss last 2 in ROM)
03
         ADD    r1, r1,          r4         ;ADD r4  TO CHECKSUM
         ADD    r1, r1,          r5         ;ADD r5  TO CHECKSUM
         ADD    r1, r1,          r6         ;ADD r6  TO CHECKSUM
         ADD    r1, r1,          r7         ;ADD r7  TO CHECKSUM
         ADD    r1, r1,          r8         ;ADD r8  TO CHECKSUM
         ADD    r1, r1,          r9         ;ADD r9  TO CHECKSUM
04
        ASSERT  (((%04 - %03) + (2*4)) =  32) ; Change this if you like - 
                                            ; but be careful to count nearly
                                            ; to the top in eights, then add
                                            ; add in the last few words.

         MOVS   r0,r1                       ; should be zero if all OK

         MOV    pc,r14                      ;return with zero flag set on OK
                                            ;and the calculated sum in r0.


;
; ROM alias check.
; This test looks for an aliased copy of the vector table at varying
; distances from the start of ROM space.
; 16K is fairly arbitrary but corresponds approximately with the size of 
; the POST. If there's an alias below that, we've probably already crashed !
;
; This test is only called if the checksum fails, in order to indicate a
; possible high ROM address line failure.

ts_ROM_alias    ROUT

	ADRL	r0, ROM			; initialise pointer using PC-relative
					; addressing (could be 1st or 2nd bank)
        LDR     r3,[r0, #ts_ROMSIZE]    ; get the ROM length word
        LDMIA   r0,{r4,r5,r6,r7}
        MOV     r1,#(16 * 1024)

01      ADD     r2,r0,r1                ; get some words from possible alias
        LDMIA   r2,{r8,r9,r10,r11}
        CMPS    r4,r8
        CMPNE   r5,r9
        CMPNE   r6,r10
        CMPNE   r7,r11
        BEQ     %10                     ; aliased : found MS ROM address bit

        MOVS    r1, r1, LSL #1          ; test the next (more significant) bit
        CMPS    r1, r3                  ; reached the limit yet ?
        BLT     %01                     ; no - try again.

10      MOV     r0,r1                   ; reached the end, or an alias.
        MOV     pc,lr


  LTORG                     

  END
@


4.3
log
@RISC OS 3.71 kernel changes merged.
Not fully tested on all hardware permutations.
@
text
@@


4.2
log
@Kernel merged
@
text
@d41 4
@


4.1
log
@Initial revision
@
text
@d9 2
d42 2
a43 1
         LDR    r0, =PhysROM                ; initialise pointer
d99 2
a100 1
        MOV     r0,#PhysROM             ; get some words from ROM start
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@a8 2
; 16-Aug-96     1.02	JRH	Gets ROM start using PC-relative addressing,
;				to support OSimages in 1st or 2nd ROM bank
d40 1
a40 2
	ADRL	r0, ROM			; initialise pointer using PC-relative
					; addressing (could be 1st or 2nd bank)
d96 1
a96 2
	ADRL	r0, ROM			; initialise pointer using PC-relative
					; addressing (could be 1st or 2nd bank)
@


4.1.5.1
log
@Import from SrcFiler
@
text
@a8 2
; 16-Aug-96     1.02	JRH	Gets ROM start using PC-relative addressing,
;				to support OSimages in 1st or 2nd ROM bank
d40 1
a40 2
	ADRL	r0, ROM			; initialise pointer using PC-relative
					; addressing (could be 1st or 2nd bank)
d96 1
a96 2
	ADRL	r0, ROM			; initialise pointer using PC-relative
					; addressing (could be 1st or 2nd bank)
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.3.2
log
@RISC OS 3.71 version taken
@
text
@a38 4
;StrongARM_POST issue:
;ARM810 - this will probably go bang! because ARM810 aborts if the processor
;         vectors (00 - 1C) are read in 26-bit mode

@


4.1.3.1.2.1
log
@Merged from 3.71 CD
@
text
@a38 4
;StrongARM_POST issue:
;ARM810 - this will probably go bang! because ARM810 aborts if the processor
;         vectors (00 - 1C) are read in 26-bit mode

@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
