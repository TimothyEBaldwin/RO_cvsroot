head	4.3;
access;
symbols
	HAL_merge:4.2
	Kernel-5_48:4.2
	Kernel-5_35-4_79_2_327:4.2
	Kernel-5_35-4_79_2_326:4.2
	Kernel-5_35-4_79_2_325:4.2
	Kernel-5_35-4_79_2_324:4.2
	Kernel-5_35-4_79_2_323:4.2
	Kernel-5_35-4_79_2_322:4.2
	Kernel-5_35-4_79_2_321:4.2
	Kernel-5_35-4_79_2_320:4.2
	Kernel-5_35-4_79_2_319:4.2
	Kernel-5_35-4_79_2_318:4.2
	Kernel-5_35-4_79_2_317:4.2
	Kernel-5_35-4_79_2_316:4.2
	Kernel-5_35-4_79_2_315:4.2
	Kernel-5_35-4_79_2_314:4.2
	Kernel-5_35-4_79_2_313:4.2
	Kernel-5_35-4_79_2_312:4.2
	Kernel-5_35-4_79_2_311:4.2
	Kernel-5_35-4_79_2_310:4.2
	Kernel-5_35-4_79_2_309:4.2
	Kernel-5_35-4_79_2_308:4.2
	Kernel-5_35-4_79_2_307:4.2
	Kernel-5_35-4_79_2_306:4.2
	Kernel-5_35-4_79_2_305:4.2
	Kernel-5_35-4_79_2_304:4.2
	Kernel-5_35-4_79_2_303:4.2
	Kernel-5_35-4_79_2_302:4.2
	Kernel-5_35-4_79_2_301:4.2
	Kernel-5_35-4_79_2_300:4.2
	Kernel-5_35-4_79_2_299:4.2
	Kernel-5_35-4_79_2_298:4.2
	Kernel-5_35-4_79_2_297:4.2
	Kernel-5_35-4_79_2_296:4.2
	Kernel-5_35-4_79_2_295:4.2
	Kernel-5_35-4_79_2_294:4.2
	Kernel-5_35-4_79_2_293:4.2
	Kernel-5_35-4_79_2_292:4.2
	Kernel-5_35-4_79_2_291:4.2
	Kernel-5_35-4_79_2_290:4.2
	Kernel-5_35-4_79_2_289:4.2
	Kernel-5_35-4_79_2_288:4.2
	Kernel-5_35-4_79_2_287:4.2
	Kernel-5_35-4_79_2_286:4.2
	Kernel-5_35-4_79_2_285:4.2
	Kernel-5_35-4_79_2_284:4.2
	Kernel-5_35-4_79_2_283:4.2
	Kernel-5_35-4_79_2_282:4.2
	Kernel-5_35-4_79_2_281:4.2
	Kernel-5_35-4_79_2_280:4.2
	Kernel-5_35-4_79_2_279:4.2
	Kernel-5_35-4_79_2_278:4.2
	Kernel-5_35-4_79_2_277:4.2
	Kernel-5_35-4_79_2_276:4.2
	Kernel-5_35-4_79_2_275:4.2
	Kernel-5_35-4_79_2_274:4.2
	Kernel-5_35-4_79_2_273:4.2
	Kernel-5_35-4_79_2_272:4.2
	Kernel-5_35-4_79_2_271:4.2
	Kernel-5_35-4_79_2_270:4.2
	Kernel-5_35-4_79_2_269:4.2
	Kernel-5_35-4_79_2_268:4.2
	Kernel-5_35-4_79_2_267:4.2
	Kernel-5_35-4_79_2_266:4.2
	Kernel-5_35-4_79_2_265:4.2
	Kernel-5_35-4_79_2_264:4.2
	Kernel-5_35-4_79_2_263:4.2
	Kernel-5_35-4_79_2_262:4.2
	Kernel-5_35-4_79_2_261:4.2
	Kernel-5_35-4_79_2_260:4.2
	Kernel-5_35-4_79_2_259:4.2
	Kernel-5_35-4_79_2_258:4.2
	Kernel-5_35-4_79_2_257:4.2
	Kernel-5_35-4_79_2_256:4.2
	Kernel-5_35-4_79_2_255:4.2
	Kernel-5_35-4_79_2_254:4.2
	Kernel-5_35-4_79_2_253:4.2
	Kernel-5_35-4_79_2_252:4.2
	Kernel-5_35-4_79_2_251:4.2
	Kernel-5_35-4_79_2_250:4.2
	Kernel-5_35-4_79_2_249:4.2
	Kernel-5_35-4_79_2_248:4.2
	Kernel-5_35-4_79_2_247:4.2
	Kernel-5_35-4_79_2_246:4.2
	Kernel-5_35-4_79_2_245:4.2
	Kernel-5_35-4_79_2_244:4.2
	Kernel-5_35-4_79_2_243:4.2
	Kernel-5_35-4_79_2_242:4.2
	Kernel-5_35-4_79_2_241:4.2
	Kernel-5_35-4_79_2_240:4.2
	Kernel-5_35-4_79_2_239:4.2
	Kernel-5_35-4_79_2_238:4.2
	Kernel-5_35-4_79_2_237:4.2
	Kernel-5_35-4_79_2_236:4.2
	Kernel-5_35-4_79_2_235:4.2
	Kernel-5_35-4_79_2_234:4.2
	Kernel-5_35-4_79_2_233:4.2
	Kernel-5_35-4_79_2_232:4.2
	Kernel-5_35-4_79_2_231:4.2
	Kernel-5_35-4_79_2_230:4.2
	Kernel-5_35-4_79_2_229:4.2
	Kernel-5_35-4_79_2_228:4.2
	Kernel-5_35-4_79_2_227:4.2
	Kernel-5_35-4_79_2_226:4.2
	Kernel-5_35-4_79_2_225:4.2
	Kernel-5_35-4_79_2_224:4.2
	Kernel-5_35-4_79_2_223:4.2
	Kernel-5_35-4_79_2_222:4.2
	Kernel-5_35-4_79_2_221:4.2
	Kernel-5_35-4_79_2_220:4.2
	Kernel-5_35-4_79_2_219:4.2
	Kernel-5_35-4_79_2_218:4.2
	Kernel-5_35-4_79_2_217:4.2
	Kernel-5_35-4_79_2_216:4.2
	Kernel-5_35-4_79_2_215:4.2
	Kernel-5_35-4_79_2_214:4.2
	Kernel-5_35-4_79_2_213:4.2
	Kernel-5_35-4_79_2_212:4.2
	Kernel-5_35-4_79_2_211:4.2
	Kernel-5_35-4_79_2_210:4.2
	Kernel-5_35-4_79_2_209:4.2
	Kernel-5_35-4_79_2_208:4.2
	Kernel-5_35-4_79_2_207:4.2
	Kernel-5_35-4_79_2_206:4.2
	Kernel-5_35-4_79_2_205:4.2
	Kernel-5_35-4_79_2_204:4.2
	Kernel-5_35-4_79_2_203:4.2
	Kernel-5_35-4_79_2_202:4.2
	Kernel-5_35-4_79_2_201:4.2
	Kernel-5_35-4_79_2_200:4.2
	Kernel-5_35-4_79_2_199:4.2
	Kernel-5_35-4_79_2_198:4.2
	Kernel-5_35-4_79_2_197:4.2
	Kernel-5_35-4_79_2_196:4.2
	Kernel-5_35-4_79_2_195:4.2
	Kernel-5_35-4_79_2_194:4.2
	Kernel-5_35-4_79_2_193:4.2
	Kernel-5_35-4_79_2_192:4.2
	Kernel-5_35-4_79_2_191:4.2
	Kernel-5_35-4_79_2_190:4.2
	Kernel-5_35-4_79_2_189:4.2
	Kernel-5_35-4_79_2_188:4.2
	Kernel-5_35-4_79_2_187:4.2
	Kernel-5_35-4_79_2_186:4.2
	Kernel-5_35-4_79_2_185:4.2
	Kernel-5_35-4_79_2_184:4.2
	Kernel-5_35-4_79_2_183:4.2
	Kernel-5_35-4_79_2_182:4.2
	Kernel-5_35-4_79_2_181:4.2
	Kernel-5_35-4_79_2_180:4.2
	Kernel-5_35-4_79_2_179:4.2
	Kernel-5_35-4_79_2_178:4.2
	Kernel-5_35-4_79_2_177:4.2
	Kernel-5_35-4_79_2_176:4.2
	Kernel-5_35-4_79_2_175:4.2
	Kernel-5_35-4_79_2_174:4.2
	Kernel-5_35-4_79_2_173:4.2
	Kernel-5_35-4_79_2_172:4.2
	Kernel-5_35-4_79_2_171:4.2
	Kernel-5_35-4_79_2_170:4.2
	Kernel-5_35-4_79_2_169:4.2
	Kernel-5_35-4_79_2_168:4.2
	Kernel-5_35-4_79_2_167:4.2
	Kernel-5_35-4_79_2_166:4.2
	Kernel-5_35-4_79_2_165:4.2
	RPi_merge:4.2
	Kernel-5_35-4_79_2_147_2_23:4.2
	Kernel-5_35-4_79_2_147_2_22:4.2
	Kernel-5_35-4_79_2_147_2_21:4.2
	Kernel-5_35-4_79_2_147_2_20:4.2
	Kernel-5_35-4_79_2_147_2_19:4.2
	Kernel-5_35-4_79_2_147_2_18:4.2
	Kernel-5_35-4_79_2_164:4.2
	Kernel-5_35-4_79_2_163:4.2
	Kernel-5_35-4_79_2_147_2_17:4.2
	Kernel-5_35-4_79_2_147_2_16:4.2
	Kernel-5_35-4_79_2_147_2_15:4.2
	Kernel-5_35-4_79_2_162:4.2
	Kernel-5_35-4_79_2_161:4.2
	Kernel-5_35-4_79_2_147_2_14:4.2
	Kernel-5_35-4_79_2_147_2_13:4.2
	Kernel-5_35-4_79_2_160:4.2
	Kernel-5_35-4_79_2_159:4.2
	Kernel-5_35-4_79_2_158:4.2
	Kernel-5_35-4_79_2_157:4.2
	Kernel-5_35-4_79_2_156:4.2
	Kernel-5_35-4_79_2_147_2_12:4.2
	Kernel-5_35-4_79_2_147_2_11:4.2
	Kernel-5_35-4_79_2_155:4.2
	Kernel-5_35-4_79_2_147_2_10:4.2
	Kernel-5_35-4_79_2_154:4.2
	Kernel-5_35-4_79_2_153:4.2
	Kernel-5_35-4_79_2_147_2_9:4.2
	Kernel-5_35-4_79_2_152:4.2
	Kernel-5_35-4_79_2_151:4.2
	Kernel-5_35-4_79_2_147_2_8:4.2
	Kernel-5_35-4_79_2_147_2_7:4.2
	Kernel-5_35-4_79_2_150:4.2
	Kernel-5_35-4_79_2_147_2_6:4.2
	Kernel-5_35-4_79_2_147_2_5:4.2
	Kernel-5_35-4_79_2_149:4.2
	Kernel-5_35-4_79_2_147_2_4:4.2
	Kernel-5_35-4_79_2_147_2_3:4.2
	Kernel-5_35-4_79_2_148:4.2
	Kernel-5_35-4_79_2_147_2_2:4.2
	Kernel-5_35-4_79_2_147_2_1:4.2
	RPi:4.2.0.18
	RPi_bp:4.2
	Kernel-5_35-4_79_2_98_2_52_2_1:4.2
	alees_Kernel_dev:4.2.0.14
	alees_Kernel_dev_bp:4.2
	Kernel-5_35-4_79_2_147:4.2
	Kernel-5_35-4_79_2_146:4.2
	Kernel-5_35-4_79_2_145:4.2
	Kernel-5_35-4_79_2_144:4.2
	Kernel-5_35-4_79_2_143:4.2
	Kernel-5_35-4_79_2_142:4.2
	Kernel-5_35-4_79_2_141:4.2
	Kernel-5_35-4_79_2_140:4.2
	Kernel-5_35-4_79_2_139:4.2
	Kernel-5_35-4_79_2_138:4.2
	Kernel-5_35-4_79_2_137:4.2
	Kernel-5_35-4_79_2_136:4.2
	Kernel-5_35-4_79_2_135:4.2
	Kernel-5_35-4_79_2_134:4.2
	Kernel-5_35-4_79_2_133:4.2
	Kernel-5_35-4_79_2_132:4.2
	Kernel-5_35-4_79_2_131:4.2
	Kernel-5_35-4_79_2_130:4.2
	Kernel-5_35-4_79_2_129:4.2
	Kernel-5_35-4_79_2_128:4.2
	Kernel-5_35-4_79_2_127:4.2
	Kernel-5_35-4_79_2_126:4.2
	Kernel-5_35-4_79_2_125:4.2
	Kernel-5_35-4_79_2_124:4.2
	Kernel-5_35-4_79_2_123:4.2
	Cortex_merge:4.2
	Kernel-5_35-4_79_2_122:4.2
	Kernel-5_35-4_79_2_98_2_54:4.2
	Kernel-5_35-4_79_2_98_2_53:4.2
	Kernel-5_35-4_79_2_98_2_52:4.2
	Kernel-5_35-4_79_2_98_2_51:4.2
	Kernel-5_35-4_79_2_98_2_50:4.2
	Kernel-5_35-4_79_2_98_2_49:4.2
	Kernel-5_35-4_79_2_98_2_48:4.2
	Kernel-5_35-4_79_2_121:4.2
	Kernel-5_35-4_79_2_98_2_47:4.2
	Kernel-5_35-4_79_2_120:4.2
	Kernel-5_35-4_79_2_98_2_46:4.2
	Kernel-5_35-4_79_2_119:4.2
	Kernel-5_35-4_79_2_98_2_45:4.2
	Kernel-5_35-4_79_2_98_2_44:4.2
	Kernel-5_35-4_79_2_118:4.2
	Kernel-5_35-4_79_2_98_2_43:4.2
	Kernel-5_35-4_79_2_117:4.2
	Kernel-5_35-4_79_2_116:4.2
	Kernel-5_35-4_79_2_98_2_42:4.2
	Kernel-5_35-4_79_2_115:4.2
	Kernel-5_35-4_79_2_98_2_41:4.2
	Kernel-5_35-4_79_2_98_2_40:4.2
	Kernel-5_35-4_79_2_114:4.2
	Kernel-5_35-4_79_2_98_2_39:4.2
	Kernel-5_35-4_79_2_98_2_38:4.2
	Kernel-5_35-4_79_2_113:4.2
	Kernel-5_35-4_79_2_112:4.2
	Kernel-5_35-4_79_2_98_2_37:4.2
	Kernel-5_35-4_79_2_98_2_36:4.2
	Kernel-5_35-4_79_2_98_2_35:4.2
	Kernel-5_35-4_79_2_98_2_34:4.2
	Kernel-5_35-4_79_2_98_2_33:4.2
	Kernel-5_35-4_79_2_98_2_32:4.2
	Kernel-5_35-4_79_2_98_2_31:4.2
	Kernel-5_35-4_79_2_98_2_30:4.2
	Kernel-5_35-4_79_2_98_2_29:4.2
	Kernel-5_35-4_79_2_98_2_28:4.2
	Kernel-5_35-4_79_2_98_2_27:4.2
	Kernel-5_35-4_79_2_98_2_26:4.2
	Kernel-5_35-4_79_2_111:4.2
	Kernel-5_35-4_79_2_98_2_25:4.2
	Kernel-5_35-4_79_2_98_2_24:4.2
	Kernel-5_35-4_79_2_98_2_23:4.2
	Kernel-5_35-4_79_2_110:4.2
	Kernel-5_35-4_79_2_98_2_22:4.2
	Kernel-5_35-4_79_2_109:4.2
	Kernel-5_35-4_79_2_98_2_21:4.2
	Kernel-5_35-4_79_2_98_2_20:4.2
	Kernel-5_35-4_79_2_108:4.2
	Kernel-5_35-4_79_2_107:4.2
	Kernel-5_35-4_79_2_98_2_19:4.2
	Kernel-5_35-4_79_2_98_2_18:4.2
	Kernel-5_35-4_79_2_98_2_17:4.2
	Kernel-5_35-4_79_2_98_2_16:4.2
	Kernel-5_35-4_79_2_98_2_15:4.2
	Kernel-5_35-4_79_2_106:4.2
	Kernel-5_35-4_79_2_105:4.2
	Kernel-5_35-4_79_2_104:4.2
	Kernel-5_35-4_79_2_98_2_14:4.2
	Kernel-5_35-4_79_2_98_2_13:4.2
	Kernel-5_35-4_79_2_98_2_12:4.2
	Kernel-5_35-4_79_2_98_2_11:4.2
	Kernel-5_35-4_79_2_98_2_10:4.2
	Kernel-5_35-4_79_2_98_2_9:4.2
	Kernel-5_35-4_79_2_103:4.2
	Kernel-5_35-4_79_2_102:4.2
	Kernel-5_35-4_79_2_98_2_8:4.2
	Kernel-5_35-4_79_2_98_2_7:4.2
	Kernel-5_35-4_79_2_98_2_6:4.2
	Kernel-5_35-4_79_2_98_2_5:4.2
	Kernel-5_35-4_79_2_98_2_4:4.2
	Kernel-5_35-4_79_2_101:4.2
	Kernel-5_35-4_79_2_100:4.2
	Kernel-5_35-4_79_2_99:4.2
	Kernel-5_35-4_79_2_98_2_3:4.2
	Kernel-5_35-4_79_2_98_2_2:4.2
	Kernel-5_35-4_79_2_98_2_1:4.2
	Cortex:4.2.0.4
	Cortex_bp:4.2
	Kernel-5_35-4_79_2_98:4.2
	Kernel-5_35-4_79_2_97:4.2
	Kernel-5_35-4_79_2_96:4.2
	Kernel-5_35-4_79_2_95:4.2
	Kernel-5_35-4_79_2_94:4.2
	Kernel-5_35-4_79_2_93:4.2
	Kernel-5_35-4_79_2_92:4.2
	Kernel-5_35-4_79_2_91:4.2
	Kernel-5_35-4_79_2_90:4.2
	Kernel-5_35-4_79_2_89:4.2
	Kernel-5_35-4_79_2_88:4.2
	Kernel-5_35-4_79_2_87:4.2
	Kernel-5_35-4_79_2_86:4.2
	Kernel-5_35-4_79_2_85:4.2
	Kernel-5_35-4_79_2_84:4.2
	Kernel-5_35-4_79_2_83:4.2
	Kernel-5_35-4_79_2_82:4.2
	Kernel-5_35-4_79_2_81:4.2
	Kernel-5_35-4_79_2_80:4.2
	Kernel-5_35-4_79_2_79:4.2
	Kernel-5_35-4_79_2_78:4.2
	Kernel-5_35-4_79_2_77:4.2
	RO_5_07:4.2
	Kernel-5_35-4_79_2_76:4.2
	Kernel-5_35-4_79_2_75:4.2
	Kernel-5_35-4_79_2_74:4.2
	Kernel-5_35-4_79_2_73:4.2
	Kernel-5_35-4_79_2_72:4.2
	Kernel-5_35-4_79_2_71:4.2
	Kernel-5_35-4_79_2_70:4.2
	Kernel-5_35-4_79_2_69:4.2
	Kernel-5_35-4_79_2_68:4.2
	Kernel-5_35-4_79_2_67:4.2
	Kernel-5_35-4_79_2_66:4.2
	Kernel-5_35-4_79_2_65:4.2
	Kernel-5_35-4_79_2_64:4.2
	Kernel-5_35-4_79_2_63:4.2
	Kernel-5_35-4_79_2_62:4.2
	Kernel-5_35-4_79_2_61:4.2
	Kernel-5_35-4_79_2_59:4.2
	Kernel-5_35-4_79_2_58:4.2
	Kernel-5_35-4_79_2_57:4.2
	Kernel-5_35-4_79_2_56:4.2
	Kernel-5_35-4_79_2_55:4.2
	Kernel-5_35-4_79_2_54:4.2
	Kernel-5_35-4_79_2_53:4.2
	Kernel-5_35-4_79_2_52:4.2
	Kernel-5_35-4_79_2_51:4.2
	Kernel-5_35-4_79_2_50:4.2
	Kernel-5_35-4_79_2_49:4.2
	Kernel-5_35-4_79_2_48:4.2
	Kernel-5_47:4.2
	Kernel-5_46-4_90_2_1:4.2
	nbingham_Kernel_FastNC_dev_bp:4.2
	nbingham_Kernel_FastNC_dev:4.2.0.16
	Kernel-5_46:4.2
	Kernel-5_45:4.2
	Kernel-5_35-4_79_2_47:4.2
	Kernel-5_35-4_79_2_46:4.2
	Kernel-5_35-4_79_2_45:4.2
	Kernel-5_35-4_79_2_44:4.2
	Kernel-5_35-4_79_2_25_2_2:4.2
	Kernel-5_35-4_79_2_43:4.2
	Kernel-5_35-4_79_2_42:4.2
	Kernel-5_35-4_79_2_41:4.2
	Kernel-5_35-4_79_2_40:4.2
	Kernel-5_35-4_79_2_39:4.2
	Kernel-5_35-4_79_2_38:4.2
	Kernel-5_35-4_79_2_37:4.2
	Kernel-5_35-4_79_2_36:4.2
	Kernel-5_35-4_79_2_35:4.2
	Kernel-5_35-4_79_2_34:4.2
	Kernel-5_35-4_79_2_33:4.2
	Kernel-5_35-4_79_2_32:4.2
	Kernel-5_44:4.2
	Kernel-5_35-4_79_2_25_2_1:4.2
	Kernel-5_43:4.2
	Kernel-5_35-4_79_2_31:4.2
	Kernel-5_35-4_79_2_30:4.2
	Kernel-5_35-4_79_2_29:4.2
	Kernel-5_35-4_79_2_28:4.2
	Kernel-5_35-4_79_2_27:4.2
	Kernel-5_35-4_79_2_26:4.2
	Kernel-5_42:4.2
	Kernel-5_41:4.2
	Kernel-5_40:4.2
	Kernel-5_35-4_79_2_25:4.2
	Kernel-5_35-4_79_2_24:4.2
	Kernel-5_35-4_79_2_23:4.2
	Kernel-5_35-4_79_2_22:4.2
	Kernel-5_35-4_79_2_21:4.2
	Kernel-5_35-4_79_2_20:4.2
	Kernel-5_35-4_79_2_19:4.2
	Kernel-5_35-4_79_2_18:4.2
	Kernel-5_35-4_79_2_17:4.2
	Kernel-5_35-4_79_2_16:4.2
	Kernel-5_35-4_79_2_15:4.2
	Kernel-5_35-4_79_2_14:4.2
	Kernel-5_39:4.2
	Kernel-5_13-4_52_2_1:4.2
	Bethany:4.2.0.12
	Kernel-5_38:4.2
	Kernel-5_35-4_79_2_13:4.2
	Kernel-5_35-4_79_2_12:4.2
	Kernel-5_35-4_79_2_11:4.2
	Kernel-5_37:4.2
	Kernel-5_35-4_79_2_10:4.2
	Kernel-5_35-4_79_2_9:4.2
	Kernel-5_36:4.2
	Kernel-5_35-4_79_2_8:4.2
	Kernel-5_35-4_79_2_7:4.2
	Kernel-5_35-4_79_2_6:4.2
	Kernel-5_35-4_79_2_5:4.2
	Kernel-5_35-4_79_2_4:4.2
	Kernel-5_35-4_79_2_3:4.2
	Kernel-5_35-4_79_2_2:4.2
	dellis_autobuild_BaseSW:4.2
	Kernel-5_35-4_79_2_1:4.2
	HAL:4.2.0.10
	Kernel-5_35:4.2
	Kernel-5_34:4.2
	Kernel-5_33:4.2
	Kernel-5_32:4.2
	Kernel-5_31:4.2
	Kernel-5_30:4.2
	Kernel-5_29:4.2
	Kernel-5_28:4.2
	Kernel-5_27:4.2
	Kernel-5_26:4.2
	Kernel-5_25:4.2
	Kernel-5_24:4.2
	Kernel-5_23:4.2
	Kernel-5_22:4.2
	sbrodie_sedwards_16Mar2000:4.2
	Kernel-5_21:4.2
	Kernel-5_20:4.2
	Kernel-5_19:4.2
	Kernel-5_18:4.2
	Kernel-5_17:4.2
	Kernel-5_16:4.2
	Kernel-5_15:4.2
	Kernel-5_14:4.2
	Kernel-5_13:4.2
	Kernel-5_12:4.2
	Kernel-5_11:4.2
	Kernel-5_10:4.2
	Kernel-5_09:4.2
	Kernel-5_08:4.2
	Kernel-5_07:4.2
	Kernel-5_06:4.2
	Kernel-5_05:4.2
	Kernel-5_04:4.2
	Kernel-5_03:4.2
	Kernel-5_02:4.2
	Kernel-5_01:4.2
	Kernel-5_00:4.2
	Kernel-4_99:4.2
	Kernel-4_98:4.2
	Kernel-4_97:4.2
	Kernel-4_96:4.2
	Kernel-4_95:4.2
	Kernel-4_94:4.2
	Kernel-4_93:4.2
	Kernel-4_92:4.2
	Kernel-4_91:4.2
	Kernel-4_90:4.2
	dcotton_autobuild_BaseSW:4.2
	Kernel-4_89:4.2
	Kernel-4_88:4.2
	Kernel-4_87:4.2
	Kernel-4_86:4.2
	Kernel-4_85:4.2
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.2
	Kernel-4_84:4.2
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.2
	Ursula_RiscPC_bp:4.2
	Kernel-4_83:4.2
	Kernel-4_82:4.2
	Kernel-4_81:4.2
	Kernel-4_80:4.2
	Kernel-4_79:4.2
	Kernel-4_78:4.2
	Kernel-4_77:4.2
	Kernel-4_76:4.2
	Kernel-4_75:4.2
	Kernel-4_74:4.2
	Kernel-4_73:4.2
	Kernel-4_72:4.2
	Kernel-4_71:4.2
	Kernel-4_70:4.2
	Kernel-4_69:4.2
	Kernel-4_68:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.8
	Kernel-4_63-1_1_2_5:4.1.7.1
	Kernel-4_63-1_1_2_4:4.1.7.1
	Kernel-4_67:4.2
	Kernel-4_66:4.2
	Kernel-4_63-1_1_2_3:4.1.7.1
	Kernel-4_65:4.2
	Ursula_merge:4.2
	Kernel-4_64:4.2
	mstphens_Kernel-3_81:4.2
	Kernel-4_63-1_1_2_2:4.1.7.1
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	mstphens_Kernel-3_80:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.2
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.2
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2016.06.30.20.28.47;	author jlee;	state dead;
branches;
next	4.2;
commitid	lMnWzoE9eJz3Wwcz;

4.2
date	97.01.21.14.06.40;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.41.45;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.1.1.1
date	96.11.05.09.41.45;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.04.24;	author nturton;	state Exp;
branches
	4.1.3.1.2.1;
next	4.1.3.2;

4.1.3.2
date	97.05.01.08.09.11;	author kbracey;	state Exp;
branches;
next	;

4.1.3.1.2.1
date	97.04.30.16.45.49;	author kbracey;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.13.59;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.05.14;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Delete pre-HAL and 26bit code
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * HAL
  * HAL26
  * HAL32
  * No26bitCode
  * No32bitCode
  * IncludeTestSrc
  * FixR9CorruptionInExtensionSWI
  Various old files have also been removed (POST code, Arc/STB keyboard drivers, etc.)
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.49. Tagged as 'Kernel-5_49'
@
text
@; > TestSrc.IOC

        TTL RISC OS 2+ POST IO controller
;
; This initial IOC test simply reports the content of the IRQ and FIRQ
; registers, to show any unexpected pending IRQs.
; Certain of these should really be cleared, and the effect of an
; interrupt tested.
;
;------------------------------------------------------------------------
; History
;
; Date          Name            Comment
; ----          ----            -------
; 18-Dec-89     ArtG            Initial version
; 29-Nov-91     ArtG            Added IOC bus test using mask registers
; 20-Jun-93     ArtG            Modified for 29-bit IOMD test
; 18-Nov-94     RCM             Morris changes
; 15-May-96	BAR		Changes for 7500FE - new IOMD ID code.
;				Now list 3 ID codes.
; 17-Jun-96	BAR		Change ts_IOMD_IDn definitions to point to
;				definitions in IOMDL
; 09-Jul-96     BAR             Improve IOMD ID code.
;
;
;------------------------------------------------------------------------

 [ IO_Type = "IOMD"
ts_IObase       *       IOMD_Base
ts_IOmask       *       &00fffff0       ;&1fffffff
ts_IOreg1       *       IOMD_VIDEND     ;IOMD_VIDCUR
ts_IOreg2       *       IOMD_VIDSTART
ts_IObswap      *       32
ts_IOMD_ID1     *       IOMD_Original
ts_IOMD_ID2     *       IOMD_7500
ts_IOMD_ID3     *       IOMD_7500FE
 |
ts_IObase       *       IOC
ts_IOmask       *       &ff0000
ts_IOreg1       *       IOCIRQMSKA
ts_IOreg2       *       IOCIRQMSKB
ts_IObswap      *       16
 ]

ts_IOCreg
        MOV     r0,#0                   ; zero error accumulator
        LDR     r3, =ts_IObase
        MOV     r1,#(1 :SHL: 31)          ; initialise bit-set test mask
0
        MVN     r2,r1                   ; make bit-clear test mask
        LDR     r4, =ts_IOmask
        ANDS    r4,r1,r4
        BEQ     %FT1                    ; skip if this bit isn't tested
        STR     r1,[r3,#ts_IOreg1]
        STR     r2,[r3,#ts_IOreg2]
        LDR     r4,[r3,#ts_IOreg1]
;        EOR     r4, r4, r1, LSR #ts_IObswap     ; check bit-set test was OK
        EOR     r4, r4, r1           ; check bit-set test was OK
        ORR     r0, r0, r4              ; accumulate errors in r0
        LDR     r4,[r3,#ts_IOreg2]
;        EOR     r4, r4, r2, LSR #ts_IObswap     ; check bit-clear test was OK
        EOR     r4, r4, r2           ; check bit-clear test was OK
        ORR     r0, r0, r4              ; accumulate errors in r0
1
        MOV     r1, r1, LSR #1          ; shift mask downwards
        TEQ     r1,#0
        BNE     %BT0                    ; and loop until all bits tested

        LDR     r8, =ts_IOmask
        ANDS    r8, r0, r8
        MOV     pc,r14                  ; return error if any bit failed

ts_IOCstat
        LDR     r3, =ts_IObase		; r3 points to IO Chip base address
        MOV     r0,#0			; clear r0
 [ IO_Type = "IOMD"
	; Check IOMD chip variants
        LDRB    r1,[r3,#IOMD_ID1]	; load r1 with IOMD ID high byte
        LDRB    r0,[r3,#IOMD_ID0]	; load r1 with IOMD ID low byte
        ORR     r0,r0,r1, LSL #8	; Or r0 and r1 - shifted left 8, put in r0
        LDR     r1,=ts_IOMD_ID1		; get Ref IOMD ID code #1
        CMPS    r0,r1                   ; check =to IOMD ID Code #1

        LDRNE   r1,=ts_IOMD_ID2		; If not ID1, get Ref IOMD ID code #2
        CMPNES  r0,r1			; If not ID1, check =to IOMD ID Code #2

        LDRNE   r1,=ts_IOMD_ID3		; if not ID1 and ID2, get Ref IOMD ID code #3
        CMPNES  r0,r1			; If not ID1 and ID2, check =to IOMD ID Code #3

        MOV     r0,r0,LSL #16		; Move ID code in to top 16 bits
        LDRB    r1,[r3,#IOMD_VERSION]	; Load r with IOMD Version number
        ORR     r8,r0,r1, LSL #12	; Or r0 and r1 - shifted left 12, put in r8
        MOV     pc,r14			; extit to whence came from.
 |
	; Check IOC chip variants
        LDRB    r1,[r3,#IOCControl]
        ORR     r0,r0,r1, LSL #(32 - 8)
        LDRB    r1,[r3,#IOCIRQSTAA]
        ORR     r0,r0,r1, LSL #(32 - 16)
        LDRB    r1,[r3,#IOCIRQSTAB]
        ORR     r0,r0,r1, LSL #(32 - 24)
        LDRB    r1,[r3,#IOCFIQSTA]
        ORR     r8,r0,r1
        ANDS    r1,r1,#0                ; return zero flag (OK)

        MOV     pc,r14
 ]

        END

@


4.2
log
@Kernel merged
@
text
@@


4.1
log
@Initial revision
@
text
@d6 1
a6 1
; registers, to show any unexpected pending IRQs. 
d19 5
d28 1
a28 1
        [ IO_Type = "IOMD"
d34 4
a37 5
ts_IOMD_ID      *       &D4E7
 [ MorrisSupport
ts_IOMD_IDmorris *      &5B98
 ]
        |
d43 1
a43 1
        ]
d71 1
a71 1
        MOV     pc,r14                   ; return error if any bit failed
d74 22
a95 18
        LDR     r3, =ts_IObase
        MOV     r0,#0
        [ IO_Type = "IOMD"
        LDRB    r1,[r3,#IOMD_ID1]
        ORR     r0,r0,r1, LSL #(32-24)
        LDRB    r1,[r3,#IOMD_ID0]
        ORR     r0,r0,r1
        LDR     r1,=ts_IOMD_ID
        CMPS    r0,r1                   ; check IOMD identity
 [ MorrisSupport
        LDRNE   r1,=ts_IOMD_IDmorris    ; allow for Morris variant
        CMPNES  r0,r1
 ]
        MOV     r0,r0,LSL #16
        LDRB    r1,[r3,#IOMD_VERSION]
        ORR     r8,r0,r1, LSL #12
        MOV     pc,r14
        |
d107 3
a109 1
        ]
a110 2
        END 
 
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@d6 1
a6 1
; registers, to show any unexpected pending IRQs.
a18 5
; 15-May-96	BAR		Changes for 7500FE - new IOMD ID code.
;				Now list 3 ID codes.
; 17-Jun-96	BAR		Change ts_IOMD_IDn definitions to point to
;				definitions in IOMDL
; 09-Jul-96     BAR             Improve IOMD ID code.
d23 1
a23 1
 [ IO_Type = "IOMD"
d29 5
a33 4
ts_IOMD_ID1     *       IOMD_Original
ts_IOMD_ID2     *       IOMD_7500
ts_IOMD_ID3     *       IOMD_7500FE
 |
d39 1
a39 1
 ]
d67 1
a67 1
        MOV     pc,r14                  ; return error if any bit failed
d70 18
a87 22
        LDR     r3, =ts_IObase		; r3 points to IO Chip base address
        MOV     r0,#0			; clear r0
 [ IO_Type = "IOMD"
	; Check IOMD chip variants
        LDRB    r1,[r3,#IOMD_ID1]	; load r1 with IOMD ID high byte
        LDRB    r0,[r3,#IOMD_ID0]	; load r1 with IOMD ID low byte
        ORR     r0,r0,r1, LSL #8	; Or r0 and r1 - shifted left 8, put in r0
        LDR     r1,=ts_IOMD_ID1		; get Ref IOMD ID code #1
        CMPS    r0,r1                   ; check =to IOMD ID Code #1

        LDRNE   r1,=ts_IOMD_ID2		; If not ID1, get Ref IOMD ID code #2
        CMPNES  r0,r1			; If not ID1, check =to IOMD ID Code #2

        LDRNE   r1,=ts_IOMD_ID3		; if not ID1 and ID2, get Ref IOMD ID code #3
        CMPNES  r0,r1			; If not ID1 and ID2, check =to IOMD ID Code #3

        MOV     r0,r0,LSL #16		; Move ID code in to top 16 bits
        LDRB    r1,[r3,#IOMD_VERSION]	; Load r with IOMD Version number
        ORR     r8,r0,r1, LSL #12	; Or r0 and r1 - shifted left 12, put in r8
        MOV     pc,r14			; extit to whence came from.
 |
	; Check IOC chip variants
d99 1
a99 3
 ]

        END
d101 2
@


4.1.5.1
log
@Import from SrcFiler
@
text
@d6 1
a6 1
; registers, to show any unexpected pending IRQs.
a18 5
; 15-May-96	BAR		Changes for 7500FE - new IOMD ID code.
;				Now list 3 ID codes.
; 17-Jun-96	BAR		Change ts_IOMD_IDn definitions to point to
;				definitions in IOMDL
; 09-Jul-96     BAR             Improve IOMD ID code.
d23 1
a23 1
 [ IO_Type = "IOMD"
d29 5
a33 4
ts_IOMD_ID1     *       IOMD_Original
ts_IOMD_ID2     *       IOMD_7500
ts_IOMD_ID3     *       IOMD_7500FE
 |
d39 1
a39 1
 ]
d67 1
a67 1
        MOV     pc,r14                  ; return error if any bit failed
d70 18
a87 22
        LDR     r3, =ts_IObase		; r3 points to IO Chip base address
        MOV     r0,#0			; clear r0
 [ IO_Type = "IOMD"
	; Check IOMD chip variants
        LDRB    r1,[r3,#IOMD_ID1]	; load r1 with IOMD ID high byte
        LDRB    r0,[r3,#IOMD_ID0]	; load r1 with IOMD ID low byte
        ORR     r0,r0,r1, LSL #8	; Or r0 and r1 - shifted left 8, put in r0
        LDR     r1,=ts_IOMD_ID1		; get Ref IOMD ID code #1
        CMPS    r0,r1                   ; check =to IOMD ID Code #1

        LDRNE   r1,=ts_IOMD_ID2		; If not ID1, get Ref IOMD ID code #2
        CMPNES  r0,r1			; If not ID1, check =to IOMD ID Code #2

        LDRNE   r1,=ts_IOMD_ID3		; if not ID1 and ID2, get Ref IOMD ID code #3
        CMPNES  r0,r1			; If not ID1 and ID2, check =to IOMD ID Code #3

        MOV     r0,r0,LSL #16		; Move ID code in to top 16 bits
        LDRB    r1,[r3,#IOMD_VERSION]	; Load r with IOMD Version number
        ORR     r8,r0,r1, LSL #12	; Or r0 and r1 - shifted left 12, put in r8
        MOV     pc,r14			; extit to whence came from.
 |
	; Check IOC chip variants
d99 1
a99 3
 ]

        END
d101 2
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.3.2
log
@RISC OS 3.71 version taken
@
text
@d6 1
a6 1
; registers, to show any unexpected pending IRQs.
d80 2
a81 3
;;        LDRNE   r1,=ts_IOMD_IDmorris    ; allow for Morris variant
;;        CMPNES  r0,r1
        CMPNE r0,r0    ;insist on not failing (allow 7500,7500FE...)
d101 2
a102 2
        END

@


4.1.3.1.2.1
log
@Merged from 3.71 CD
@
text
@d6 1
a6 1
; registers, to show any unexpected pending IRQs.
d80 2
a81 3
;;        LDRNE   r1,=ts_IOMD_IDmorris    ; allow for Morris variant
;;        CMPNES  r0,r1
        CMPNE r0,r0    ;insist on not failing (allow 7500,7500FE...)
d101 2
a102 2
        END

@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
