head	4.2;
access;
symbols
	Kernel-6_14:4.2
	Kernel-6_01-3:4.2
	Kernel-6_13:4.2
	Kernel-6_12:4.2
	Kernel-6_11:4.2
	Kernel-6_10:4.2
	Kernel-6_09:4.2
	Kernel-6_08-4_129_2_10:4.2
	Kernel-6_08-4_129_2_9:4.2
	Kernel-6_08:4.2
	Kernel-6_07:4.2
	Kernel-6_06:4.2
	Kernel-6_05-4_129_2_8:4.2
	Kernel-6_05:4.2
	Kernel-6_04:4.2
	Kernel-6_03:4.2
	Kernel-6_01-2:4.2
	Kernel-6_01-4_146_2_1:4.2
	Kernel-6_02:4.2
	Kernel-6_01-1:4.2
	Kernel-6_01:4.2
	Kernel-6_00:4.2
	Kernel-5_99:4.2
	Kernel-5_98:4.2
	Kernel-5_97-4_129_2_7:4.2
	Kernel-5_97:4.2
	Kernel-5_96:4.2
	Kernel-5_95:4.2
	Kernel-5_94:4.2
	Kernel-5_93:4.2
	Kernel-5_92:4.2
	Kernel-5_91:4.2
	Kernel-5_90:4.2
	Kernel-5_89-4_129_2_6:4.2
	Kernel-5_89:4.2
	Kernel-5_88-4_129_2_5:4.2
	Kernel-5_88-4_129_2_4:4.2
	Kernel-5_88:4.2
	Kernel-5_87:4.2
	Kernel-5_86-4_129_2_3:4.2
	Kernel-5_86-4_129_2_2:4.2
	Kernel-5_86-4_129_2_1:4.2
	Kernel-5_86:4.2
	SMP:4.2.0.2
	SMP_bp:4.2
	Kernel-5_85:4.2
	Kernel-5_54-1:4.2
	Kernel-5_84:4.2
	Kernel-5_83:4.2
	Kernel-5_82:4.2
	Kernel-5_81:4.2
	Kernel-5_80:4.2
	Kernel-5_79:4.2
	Kernel-5_78:4.2
	Kernel-5_77:4.2
	Kernel-5_76:4.2
	Kernel-5_75:4.2
	Kernel-5_74:4.2
	Kernel-5_73:4.2
	Kernel-5_72:4.2
	Kernel-5_71:4.2
	Kernel-5_70:4.2
	Kernel-5_69:4.2
	Kernel-5_68:4.2
	Kernel-5_67:4.2
	Kernel-5_66:4.2
	Kernel-5_65:4.2
	Kernel-5_64:4.2
	Kernel-5_63:4.2
	Kernel-5_62:4.2
	Kernel-5_61:4.2
	Kernel-5_60:4.2
	Kernel-5_59:4.2
	Kernel-5_58:4.2
	Kernel-5_57:4.2
	Kernel-5_56:4.2
	Kernel-5_55:4.2
	Kernel-5_54:4.2
	Kernel-5_53:4.2
	Kernel-5_52:4.2
	Kernel-5_51:4.2
	Kernel-5_50:4.2
	Kernel-5_49:4.2
	HAL_merge:4.1.3.1.10.1
	Kernel-5_48:4.2
	Kernel-5_35-4_79_2_327:4.1.3.1.10.1
	Kernel-5_35-4_79_2_326:4.1.3.1.10.1
	Kernel-5_35-4_79_2_325:4.1.3.1.10.1
	Kernel-5_35-4_79_2_324:4.1.3.1.10.1
	Kernel-5_35-4_79_2_323:4.1.3.1.10.1
	Kernel-5_35-4_79_2_322:4.1.3.1.10.1
	Kernel-5_35-4_79_2_321:4.1.3.1.10.1
	Kernel-5_35-4_79_2_320:4.1.3.1.10.1
	Kernel-5_35-4_79_2_319:4.1.3.1.10.1
	Kernel-5_35-4_79_2_318:4.1.3.1.10.1
	Kernel-5_35-4_79_2_317:4.1.3.1.10.1
	Kernel-5_35-4_79_2_316:4.1.3.1.10.1
	Kernel-5_35-4_79_2_315:4.1.3.1.10.1
	Kernel-5_35-4_79_2_314:4.1.3.1.10.1
	Kernel-5_35-4_79_2_313:4.1.3.1.10.1
	Kernel-5_35-4_79_2_312:4.1.3.1.10.1
	Kernel-5_35-4_79_2_311:4.1.3.1.10.1
	Kernel-5_35-4_79_2_310:4.1.3.1.10.1
	Kernel-5_35-4_79_2_309:4.1.3.1.10.1
	Kernel-5_35-4_79_2_308:4.1.3.1.10.1
	Kernel-5_35-4_79_2_307:4.1.3.1.10.1
	Kernel-5_35-4_79_2_306:4.1.3.1.10.1
	Kernel-5_35-4_79_2_305:4.1.3.1.10.1
	Kernel-5_35-4_79_2_304:4.1.3.1.10.1
	Kernel-5_35-4_79_2_303:4.1.3.1.10.1
	Kernel-5_35-4_79_2_302:4.1.3.1.10.1
	Kernel-5_35-4_79_2_301:4.1.3.1.10.1
	Kernel-5_35-4_79_2_300:4.1.3.1.10.1
	Kernel-5_35-4_79_2_299:4.1.3.1.10.1
	Kernel-5_35-4_79_2_298:4.1.3.1.10.1
	Kernel-5_35-4_79_2_297:4.1.3.1.10.1
	Kernel-5_35-4_79_2_296:4.1.3.1.10.1
	Kernel-5_35-4_79_2_295:4.1.3.1.10.1
	Kernel-5_35-4_79_2_294:4.1.3.1.10.1
	Kernel-5_35-4_79_2_293:4.1.3.1.10.1
	Kernel-5_35-4_79_2_292:4.1.3.1.10.1
	Kernel-5_35-4_79_2_291:4.1.3.1.10.1
	Kernel-5_35-4_79_2_290:4.1.3.1.10.1
	Kernel-5_35-4_79_2_289:4.1.3.1.10.1
	Kernel-5_35-4_79_2_288:4.1.3.1.10.1
	Kernel-5_35-4_79_2_287:4.1.3.1.10.1
	Kernel-5_35-4_79_2_286:4.1.3.1.10.1
	Kernel-5_35-4_79_2_285:4.1.3.1.10.1
	Kernel-5_35-4_79_2_284:4.1.3.1.10.1
	Kernel-5_35-4_79_2_283:4.1.3.1.10.1
	Kernel-5_35-4_79_2_282:4.1.3.1.10.1
	Kernel-5_35-4_79_2_281:4.1.3.1.10.1
	Kernel-5_35-4_79_2_280:4.1.3.1.10.1
	Kernel-5_35-4_79_2_279:4.1.3.1.10.1
	Kernel-5_35-4_79_2_278:4.1.3.1.10.1
	Kernel-5_35-4_79_2_277:4.1.3.1.10.1
	Kernel-5_35-4_79_2_276:4.1.3.1.10.1
	Kernel-5_35-4_79_2_275:4.1.3.1.10.1
	Kernel-5_35-4_79_2_274:4.1.3.1.10.1
	Kernel-5_35-4_79_2_273:4.1.3.1.10.1
	Kernel-5_35-4_79_2_272:4.1.3.1.10.1
	Kernel-5_35-4_79_2_271:4.1.3.1.10.1
	Kernel-5_35-4_79_2_270:4.1.3.1.10.1
	Kernel-5_35-4_79_2_269:4.1.3.1.10.1
	Kernel-5_35-4_79_2_268:4.1.3.1.10.1
	Kernel-5_35-4_79_2_267:4.1.3.1.10.1
	Kernel-5_35-4_79_2_266:4.1.3.1.10.1
	Kernel-5_35-4_79_2_265:4.1.3.1.10.1
	Kernel-5_35-4_79_2_264:4.1.3.1.10.1
	Kernel-5_35-4_79_2_263:4.1.3.1.10.1
	Kernel-5_35-4_79_2_262:4.1.3.1.10.1
	Kernel-5_35-4_79_2_261:4.1.3.1.10.1
	Kernel-5_35-4_79_2_260:4.1.3.1.10.1
	Kernel-5_35-4_79_2_259:4.1.3.1.10.1
	Kernel-5_35-4_79_2_258:4.1.3.1.10.1
	Kernel-5_35-4_79_2_257:4.1.3.1.10.1
	Kernel-5_35-4_79_2_256:4.1.3.1.10.1
	Kernel-5_35-4_79_2_255:4.1.3.1.10.1
	Kernel-5_35-4_79_2_254:4.1.3.1.10.1
	Kernel-5_35-4_79_2_253:4.1.3.1.10.1
	Kernel-5_35-4_79_2_252:4.1.3.1.10.1
	Kernel-5_35-4_79_2_251:4.1.3.1.10.1
	Kernel-5_35-4_79_2_250:4.1.3.1.10.1
	Kernel-5_35-4_79_2_249:4.1.3.1.10.1
	Kernel-5_35-4_79_2_248:4.1.3.1.10.1
	Kernel-5_35-4_79_2_247:4.1.3.1.10.1
	Kernel-5_35-4_79_2_246:4.1.3.1.10.1
	Kernel-5_35-4_79_2_245:4.1.3.1.10.1
	Kernel-5_35-4_79_2_244:4.1.3.1.10.1
	Kernel-5_35-4_79_2_243:4.1.3.1.10.1
	Kernel-5_35-4_79_2_242:4.1.3.1.10.1
	Kernel-5_35-4_79_2_241:4.1.3.1.10.1
	Kernel-5_35-4_79_2_240:4.1.3.1.10.1
	Kernel-5_35-4_79_2_239:4.1.3.1.10.1
	Kernel-5_35-4_79_2_238:4.1.3.1.10.1
	Kernel-5_35-4_79_2_237:4.1.3.1.10.1
	Kernel-5_35-4_79_2_236:4.1.3.1.10.1
	Kernel-5_35-4_79_2_235:4.1.3.1.10.1
	Kernel-5_35-4_79_2_234:4.1.3.1.10.1
	Kernel-5_35-4_79_2_233:4.1.3.1.10.1
	Kernel-5_35-4_79_2_232:4.1.3.1.10.1
	Kernel-5_35-4_79_2_231:4.1.3.1.10.1
	Kernel-5_35-4_79_2_230:4.1.3.1.10.1
	Kernel-5_35-4_79_2_229:4.1.3.1.10.1
	Kernel-5_35-4_79_2_228:4.1.3.1.10.1
	Kernel-5_35-4_79_2_227:4.1.3.1.10.1
	Kernel-5_35-4_79_2_226:4.1.3.1.10.1
	Kernel-5_35-4_79_2_225:4.1.3.1.10.1
	Kernel-5_35-4_79_2_224:4.1.3.1.10.1
	Kernel-5_35-4_79_2_223:4.1.3.1.10.1
	Kernel-5_35-4_79_2_222:4.1.3.1.10.1
	Kernel-5_35-4_79_2_221:4.1.3.1.10.1
	Kernel-5_35-4_79_2_220:4.1.3.1.10.1
	Kernel-5_35-4_79_2_219:4.1.3.1.10.1
	Kernel-5_35-4_79_2_218:4.1.3.1.10.1
	Kernel-5_35-4_79_2_217:4.1.3.1.10.1
	Kernel-5_35-4_79_2_216:4.1.3.1.10.1
	Kernel-5_35-4_79_2_215:4.1.3.1.10.1
	Kernel-5_35-4_79_2_214:4.1.3.1.10.1
	Kernel-5_35-4_79_2_213:4.1.3.1.10.1
	Kernel-5_35-4_79_2_212:4.1.3.1.10.1
	Kernel-5_35-4_79_2_211:4.1.3.1.10.1
	Kernel-5_35-4_79_2_210:4.1.3.1.10.1
	Kernel-5_35-4_79_2_209:4.1.3.1.10.1
	Kernel-5_35-4_79_2_208:4.1.3.1.10.1
	Kernel-5_35-4_79_2_207:4.1.3.1.10.1
	Kernel-5_35-4_79_2_206:4.1.3.1.10.1
	Kernel-5_35-4_79_2_205:4.1.3.1.10.1
	Kernel-5_35-4_79_2_204:4.1.3.1.10.1
	Kernel-5_35-4_79_2_203:4.1.3.1.10.1
	Kernel-5_35-4_79_2_202:4.1.3.1.10.1
	Kernel-5_35-4_79_2_201:4.1.3.1.10.1
	Kernel-5_35-4_79_2_200:4.1.3.1.10.1
	Kernel-5_35-4_79_2_199:4.1.3.1.10.1
	Kernel-5_35-4_79_2_198:4.1.3.1.10.1
	Kernel-5_35-4_79_2_197:4.1.3.1.10.1
	Kernel-5_35-4_79_2_196:4.1.3.1.10.1
	Kernel-5_35-4_79_2_195:4.1.3.1.10.1
	Kernel-5_35-4_79_2_194:4.1.3.1.10.1
	Kernel-5_35-4_79_2_193:4.1.3.1.10.1
	Kernel-5_35-4_79_2_192:4.1.3.1.10.1
	Kernel-5_35-4_79_2_191:4.1.3.1.10.1
	Kernel-5_35-4_79_2_190:4.1.3.1.10.1
	Kernel-5_35-4_79_2_189:4.1.3.1.10.1
	Kernel-5_35-4_79_2_188:4.1.3.1.10.1
	Kernel-5_35-4_79_2_187:4.1.3.1.10.1
	Kernel-5_35-4_79_2_186:4.1.3.1.10.1
	Kernel-5_35-4_79_2_185:4.1.3.1.10.1
	Kernel-5_35-4_79_2_184:4.1.3.1.10.1
	Kernel-5_35-4_79_2_183:4.1.3.1.10.1
	Kernel-5_35-4_79_2_182:4.1.3.1.10.1
	Kernel-5_35-4_79_2_181:4.1.3.1.10.1
	Kernel-5_35-4_79_2_180:4.1.3.1.10.1
	Kernel-5_35-4_79_2_179:4.1.3.1.10.1
	Kernel-5_35-4_79_2_178:4.1.3.1.10.1
	Kernel-5_35-4_79_2_177:4.1.3.1.10.1
	Kernel-5_35-4_79_2_176:4.1.3.1.10.1
	Kernel-5_35-4_79_2_175:4.1.3.1.10.1
	Kernel-5_35-4_79_2_174:4.1.3.1.10.1
	Kernel-5_35-4_79_2_173:4.1.3.1.10.1
	Kernel-5_35-4_79_2_172:4.1.3.1.10.1
	Kernel-5_35-4_79_2_171:4.1.3.1.10.1
	Kernel-5_35-4_79_2_170:4.1.3.1.10.1
	Kernel-5_35-4_79_2_169:4.1.3.1.10.1
	Kernel-5_35-4_79_2_168:4.1.3.1.10.1
	Kernel-5_35-4_79_2_167:4.1.3.1.10.1
	Kernel-5_35-4_79_2_166:4.1.3.1.10.1
	Kernel-5_35-4_79_2_165:4.1.3.1.10.1
	RPi_merge:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_23:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_22:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_21:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_20:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_19:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_18:4.1.3.1.10.1
	Kernel-5_35-4_79_2_164:4.1.3.1.10.1
	Kernel-5_35-4_79_2_163:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_17:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_16:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_15:4.1.3.1.10.1
	Kernel-5_35-4_79_2_162:4.1.3.1.10.1
	Kernel-5_35-4_79_2_161:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_14:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_13:4.1.3.1.10.1
	Kernel-5_35-4_79_2_160:4.1.3.1.10.1
	Kernel-5_35-4_79_2_159:4.1.3.1.10.1
	Kernel-5_35-4_79_2_158:4.1.3.1.10.1
	Kernel-5_35-4_79_2_157:4.1.3.1.10.1
	Kernel-5_35-4_79_2_156:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_12:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_11:4.1.3.1.10.1
	Kernel-5_35-4_79_2_155:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_10:4.1.3.1.10.1
	Kernel-5_35-4_79_2_154:4.1.3.1.10.1
	Kernel-5_35-4_79_2_153:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_9:4.1.3.1.10.1
	Kernel-5_35-4_79_2_152:4.1.3.1.10.1
	Kernel-5_35-4_79_2_151:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_8:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_7:4.1.3.1.10.1
	Kernel-5_35-4_79_2_150:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_6:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_5:4.1.3.1.10.1
	Kernel-5_35-4_79_2_149:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_4:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_3:4.1.3.1.10.1
	Kernel-5_35-4_79_2_148:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_2:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147_2_1:4.1.3.1.10.1
	RPi:4.1.3.1.10.1.0.6
	RPi_bp:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_52_2_1:4.1.3.1.10.1
	alees_Kernel_dev:4.1.3.1.10.1.0.4
	alees_Kernel_dev_bp:4.1.3.1.10.1
	Kernel-5_35-4_79_2_147:4.1.3.1.10.1
	Kernel-5_35-4_79_2_146:4.1.3.1.10.1
	Kernel-5_35-4_79_2_145:4.1.3.1.10.1
	Kernel-5_35-4_79_2_144:4.1.3.1.10.1
	Kernel-5_35-4_79_2_143:4.1.3.1.10.1
	Kernel-5_35-4_79_2_142:4.1.3.1.10.1
	Kernel-5_35-4_79_2_141:4.1.3.1.10.1
	Kernel-5_35-4_79_2_140:4.1.3.1.10.1
	Kernel-5_35-4_79_2_139:4.1.3.1.10.1
	Kernel-5_35-4_79_2_138:4.1.3.1.10.1
	Kernel-5_35-4_79_2_137:4.1.3.1.10.1
	Kernel-5_35-4_79_2_136:4.1.3.1.10.1
	Kernel-5_35-4_79_2_135:4.1.3.1.10.1
	Kernel-5_35-4_79_2_134:4.1.3.1.10.1
	Kernel-5_35-4_79_2_133:4.1.3.1.10.1
	Kernel-5_35-4_79_2_132:4.1.3.1.10.1
	Kernel-5_35-4_79_2_131:4.1.3.1.10.1
	Kernel-5_35-4_79_2_130:4.1.3.1.10.1
	Kernel-5_35-4_79_2_129:4.1.3.1.10.1
	Kernel-5_35-4_79_2_128:4.1.3.1.10.1
	Kernel-5_35-4_79_2_127:4.1.3.1.10.1
	Kernel-5_35-4_79_2_126:4.1.3.1.10.1
	Kernel-5_35-4_79_2_125:4.1.3.1.10.1
	Kernel-5_35-4_79_2_124:4.1.3.1.10.1
	Kernel-5_35-4_79_2_123:4.1.3.1.10.1
	Cortex_merge:4.1.3.1.10.1
	Kernel-5_35-4_79_2_122:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_54:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_53:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_52:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_51:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_50:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_49:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_48:4.1.3.1.10.1
	Kernel-5_35-4_79_2_121:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_47:4.1.3.1.10.1
	Kernel-5_35-4_79_2_120:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_46:4.1.3.1.10.1
	Kernel-5_35-4_79_2_119:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_45:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_44:4.1.3.1.10.1
	Kernel-5_35-4_79_2_118:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_43:4.1.3.1.10.1
	Kernel-5_35-4_79_2_117:4.1.3.1.10.1
	Kernel-5_35-4_79_2_116:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_42:4.1.3.1.10.1
	Kernel-5_35-4_79_2_115:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_41:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_40:4.1.3.1.10.1
	Kernel-5_35-4_79_2_114:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_39:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_38:4.1.3.1.10.1
	Kernel-5_35-4_79_2_113:4.1.3.1.10.1
	Kernel-5_35-4_79_2_112:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_37:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_36:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_35:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_34:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_33:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_32:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_31:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_30:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_29:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_28:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_27:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_26:4.1.3.1.10.1
	Kernel-5_35-4_79_2_111:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_25:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_24:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_23:4.1.3.1.10.1
	Kernel-5_35-4_79_2_110:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_22:4.1.3.1.10.1
	Kernel-5_35-4_79_2_109:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_21:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_20:4.1.3.1.10.1
	Kernel-5_35-4_79_2_108:4.1.3.1.10.1
	Kernel-5_35-4_79_2_107:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_19:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_18:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_17:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_16:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_15:4.1.3.1.10.1
	Kernel-5_35-4_79_2_106:4.1.3.1.10.1
	Kernel-5_35-4_79_2_105:4.1.3.1.10.1
	Kernel-5_35-4_79_2_104:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_14:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_13:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_12:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_11:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_10:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_9:4.1.3.1.10.1
	Kernel-5_35-4_79_2_103:4.1.3.1.10.1
	Kernel-5_35-4_79_2_102:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_8:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_7:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_6:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_5:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_4:4.1.3.1.10.1
	Kernel-5_35-4_79_2_101:4.1.3.1.10.1
	Kernel-5_35-4_79_2_100:4.1.3.1.10.1
	Kernel-5_35-4_79_2_99:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_3:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_2:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98_2_1:4.1.3.1.10.1
	Cortex:4.1.3.1.10.1.0.2
	Cortex_bp:4.1.3.1.10.1
	Kernel-5_35-4_79_2_98:4.1.3.1.10.1
	Kernel-5_35-4_79_2_97:4.1.3.1.10.1
	Kernel-5_35-4_79_2_96:4.1.3.1.10.1
	Kernel-5_35-4_79_2_95:4.1.3.1.10.1
	Kernel-5_35-4_79_2_94:4.1.3.1.10.1
	Kernel-5_35-4_79_2_93:4.1.3.1.10.1
	Kernel-5_35-4_79_2_92:4.1.3.1.10.1
	Kernel-5_35-4_79_2_91:4.1.3.1.10.1
	Kernel-5_35-4_79_2_90:4.1.3.1.10.1
	Kernel-5_35-4_79_2_89:4.1.3.1.10.1
	Kernel-5_35-4_79_2_88:4.1.3.1.10.1
	Kernel-5_35-4_79_2_87:4.1.3.1.10.1
	Kernel-5_35-4_79_2_86:4.1.3.1.10.1
	Kernel-5_35-4_79_2_85:4.1.3.1.10.1
	Kernel-5_35-4_79_2_84:4.1.3.1.10.1
	Kernel-5_35-4_79_2_83:4.1.3.1.10.1
	Kernel-5_35-4_79_2_82:4.1.3.1.10.1
	Kernel-5_35-4_79_2_81:4.1.3.1.10.1
	Kernel-5_35-4_79_2_80:4.1.3.1.10.1
	Kernel-5_35-4_79_2_79:4.1.3.1.10.1
	Kernel-5_35-4_79_2_78:4.1.3.1.10.1
	Kernel-5_35-4_79_2_77:4.1.3.1.10.1
	RO_5_07:4.1.3.1.10.1
	Kernel-5_35-4_79_2_76:4.1.3.1.10.1
	Kernel-5_35-4_79_2_75:4.1.3.1.10.1
	Kernel-5_35-4_79_2_74:4.1.3.1.10.1
	Kernel-5_35-4_79_2_73:4.1.3.1.10.1
	Kernel-5_35-4_79_2_72:4.1.3.1.10.1
	Kernel-5_35-4_79_2_71:4.1.3.1.10.1
	Kernel-5_35-4_79_2_70:4.1.3.1.10.1
	Kernel-5_35-4_79_2_69:4.1.3.1.10.1
	Kernel-5_35-4_79_2_68:4.1.3.1.10.1
	Kernel-5_35-4_79_2_67:4.1.3.1.10.1
	Kernel-5_35-4_79_2_66:4.1.3.1.10.1
	Kernel-5_35-4_79_2_65:4.1.3.1.10.1
	Kernel-5_35-4_79_2_64:4.1.3.1.10.1
	Kernel-5_35-4_79_2_63:4.1.3.1.10.1
	Kernel-5_35-4_79_2_62:4.1.3.1.10.1
	Kernel-5_35-4_79_2_61:4.1.3.1.10.1
	Kernel-5_35-4_79_2_60:4.1.3.1.10.1
	Kernel-5_35-4_79_2_59:4.1.3.1.10.1
	Kernel-5_35-4_79_2_58:4.1.3.1.10.1
	Kernel-5_35-4_79_2_57:4.1.3.1.10.1
	Kernel-5_35-4_79_2_56:4.1.3.1.10.1
	Kernel-5_35-4_79_2_55:4.1.3.1.10.1
	Kernel-5_35-4_79_2_54:4.1.3.1.10.1
	Kernel-5_35-4_79_2_53:4.1.3.1.10.1
	Kernel-5_35-4_79_2_52:4.1.3.1.10.1
	Kernel-5_35-4_79_2_51:4.1.3.1.10.1
	Kernel-5_35-4_79_2_50:4.1.3.1.10.1
	Kernel-5_35-4_79_2_49:4.1.3.1.10.1
	Kernel-5_35-4_79_2_48:4.1.3.1.10.1
	Kernel-5_47:4.1.3.1
	Kernel-5_46-4_90_2_1:4.1.3.1
	nbingham_Kernel_FastNC_dev_bp:4.1.3.1
	nbingham_Kernel_FastNC_dev:4.1.3.1.0.16
	Kernel-5_46:4.1.3.1
	Kernel-5_45:4.1.3.1
	Kernel-5_35-4_79_2_47:4.1.3.1
	Kernel-5_35-4_79_2_46:4.1.3.1
	Kernel-5_35-4_79_2_45:4.1.3.1
	Kernel-5_35-4_79_2_44:4.1.3.1
	Kernel-5_35-4_79_2_25_2_2:4.1.3.1
	Kernel-5_35-4_79_2_43:4.1.3.1
	Kernel-5_35-4_79_2_42:4.1.3.1
	Kernel-5_35-4_79_2_41:4.1.3.1
	Kernel-5_35-4_79_2_40:4.1.3.1
	Kernel-5_35-4_79_2_39:4.1.3.1
	Kernel-5_35-4_79_2_38:4.1.3.1
	Kernel-5_35-4_79_2_37:4.1.3.1
	Kernel-5_35-4_79_2_36:4.1.3.1
	Kernel-5_35-4_79_2_35:4.1.3.1
	Kernel-5_35-4_79_2_34:4.1.3.1
	Kernel-5_35-4_79_2_33:4.1.3.1
	Kernel-5_35-4_79_2_32:4.1.3.1
	Kernel-5_44:4.1.3.1
	Kernel-5_35-4_79_2_25_2_1:4.1.3.1
	Kernel-5_43:4.1.3.1
	Kernel-5_35-4_79_2_31:4.1.3.1
	Kernel-5_35-4_79_2_30:4.1.3.1
	Kernel-5_35-4_79_2_29:4.1.3.1
	Kernel-5_35-4_79_2_28:4.1.3.1
	Kernel-5_35-4_79_2_27:4.1.3.1
	Kernel-5_35-4_79_2_26:4.1.3.1
	Kernel-5_42:4.1.3.1
	Kernel-5_41:4.1.3.1
	Kernel-5_40:4.1.3.1
	Kernel-5_35-4_79_2_25:4.1.3.1
	Kernel-5_35-4_79_2_24:4.1.3.1
	Kernel-5_35-4_79_2_23:4.1.3.1
	Kernel-5_35-4_79_2_22:4.1.3.1
	Kernel-5_35-4_79_2_21:4.1.3.1
	Kernel-5_35-4_79_2_20:4.1.3.1
	Kernel-5_35-4_79_2_19:4.1.3.1
	Kernel-5_35-4_79_2_18:4.1.3.1
	Kernel-5_35-4_79_2_17:4.1.3.1
	Kernel-5_35-4_79_2_16:4.1.3.1
	Kernel-5_35-4_79_2_15:4.1.3.1
	Kernel-5_35-4_79_2_14:4.1.3.1
	Kernel-5_39:4.1.3.1
	Kernel-5_13-4_52_2_1:4.1.3.1
	Bethany:4.1.3.1.0.12
	Kernel-5_38:4.1.3.1
	Kernel-5_35-4_79_2_13:4.1.3.1
	Kernel-5_35-4_79_2_12:4.1.3.1
	Kernel-5_35-4_79_2_11:4.1.3.1
	Kernel-5_37:4.1.3.1
	Kernel-5_35-4_79_2_10:4.1.3.1
	Kernel-5_35-4_79_2_9:4.1.3.1
	Kernel-5_36:4.1.3.1
	Kernel-5_35-4_79_2_8:4.1.3.1
	Kernel-5_35-4_79_2_7:4.1.3.1
	Kernel-5_35-4_79_2_6:4.1.3.1
	Kernel-5_35-4_79_2_5:4.1.3.1
	Kernel-5_35-4_79_2_4:4.1.3.1
	Kernel-5_35-4_79_2_3:4.1.3.1
	Kernel-5_35-4_79_2_2:4.1.3.1
	dellis_autobuild_BaseSW:4.1.3.1
	Kernel-5_35-4_79_2_1:4.1.3.1
	HAL:4.1.3.1.0.10
	Kernel-5_35:4.1.3.1
	Kernel-5_34:4.1.3.1
	Kernel-5_33:4.1.3.1
	Kernel-5_32:4.1.3.1
	Kernel-5_31:4.1.3.1
	Kernel-5_30:4.1.3.1
	Kernel-5_29:4.1.3.1
	Kernel-5_28:4.1.3.1
	Kernel-5_27:4.1.3.1
	Kernel-5_26:4.1.3.1
	Kernel-5_25:4.1.3.1
	Kernel-5_24:4.1.3.1
	Kernel-5_23:4.1.3.1
	Kernel-5_22:4.1.3.1
	sbrodie_sedwards_16Mar2000:4.1.3.1
	Kernel-5_21:4.1.3.1
	Kernel-5_20:4.1.3.1
	Kernel-5_19:4.1.3.1
	Kernel-5_18:4.1.3.1
	Kernel-5_17:4.1.3.1
	Kernel-5_16:4.1.3.1
	Kernel-5_15:4.1.3.1
	Kernel-5_14:4.1.3.1
	Kernel-5_13:4.1.3.1
	Kernel-5_12:4.1.3.1
	Kernel-5_11:4.1.3.1
	Kernel-5_10:4.1.3.1
	Kernel-5_09:4.1.3.1
	Kernel-5_08:4.1.3.1
	Kernel-5_07:4.1.3.1
	Kernel-5_06:4.1.3.1
	Kernel-5_05:4.1.3.1
	Kernel-5_04:4.1.3.1
	Kernel-5_03:4.1.3.1
	Kernel-5_02:4.1.3.1
	Kernel-5_01:4.1.3.1
	Kernel-5_00:4.1.3.1
	Kernel-4_99:4.1.3.1
	Kernel-4_98:4.1.3.1
	Kernel-4_97:4.1.3.1
	Kernel-4_96:4.1.3.1
	Kernel-4_95:4.1.3.1
	Kernel-4_94:4.1.3.1
	Kernel-4_93:4.1.3.1
	Kernel-4_92:4.1.3.1
	Kernel-4_91:4.1.3.1
	Kernel-4_90:4.1.3.1
	dcotton_autobuild_BaseSW:4.1.3.1
	Kernel-4_89:4.1.3.1
	Kernel-4_88:4.1.3.1
	Kernel-4_87:4.1.3.1
	Kernel-4_86:4.1.3.1
	Kernel-4_85:4.1.3.1
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1.3.1
	Kernel-4_84:4.1.3.1
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1.3.1
	Ursula_RiscPC_bp:4.1.3.1
	Kernel-4_83:4.1.3.1
	Kernel-4_82:4.1.3.1
	Kernel-4_81:4.1.3.1
	Kernel-4_80:4.1.3.1
	Kernel-4_79:4.1.3.1
	Kernel-4_78:4.1.3.1
	Kernel-4_77:4.1.3.1
	Kernel-4_76:4.1.3.1
	Kernel-4_75:4.1.3.1
	Kernel-4_74:4.1.3.1
	Kernel-4_73:4.1.3.1
	Kernel-4_72:4.1.3.1
	Kernel-4_71:4.1.3.1
	Kernel-4_70:4.1.3.1
	Kernel-4_69:4.1.3.1
	Kernel-4_68:4.1.3.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.3.1
	Ursula_RiscPC:4.1.3.1.0.8
	Kernel-4_67:4.1.3.1
	Kernel-4_66:4.1.3.1
	Kernel-4_65:4.1.3.1
	Ursula_merge:4.1.3.1
	Kernel-4_64:4.1.3.1
	mstphens_Kernel-3_81:4.1.3.1
	rthornb_UrsulaBuild-19Aug1998:4.1.3.1
	UrsulaBuild_FinalSoftload:4.1.3.1
	rthornb_UrsulaBuild-12Aug1998:4.1.3.1
	aglover_UrsulaBuild-05Aug1998:4.1.3.1
	rthornb_UrsulaBuild-29Jul1998:4.1.3.1
	rthornb_UrsulaBuild-22Jul1998:4.1.3.1
	rthornb_UrsulaBuild-15Jul1998:4.1.3.1
	rthornb_UrsulaBuild-07Jul1998:4.1.3.1
	rthornb_UrsulaBuild-17Jun1998:4.1.3.1
	rthornb_UrsulaBuild-03Jun1998:4.1.3.1
	rthornb_UrsulaBuild-27May1998:4.1.3.1
	mstphens_Kernel-3_80:4.1.3.1
	rthornb_UrsulaBuild-21May1998:4.1.3.1
	rthornb_UrsulaBuild_01May1998:4.1.3.1
	afrost_NC2_Generic:4.1.3.1
	Daytona:4.1.3.1.0.6
	Daytona_bp:4.1.3.1
	Ursula_bp:4.1.3.1
	Ursula:4.1.3.1.0.2
	RO_3_71:4.1.3.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	StrongARM:4.1.3;
locks; strict;
comment	@# @;


4.2
date	2016.06.30.20.07.33;	author jlee;	state Exp;
branches;
next	4.1;
commitid	IWoXxARWeuLDOwcz;

4.1
date	96.11.06.01.58.14;	author nturton;	state Exp;
branches
	4.1.3.1;
next	;

4.1.3.1
date	96.11.06.01.58.14;	author nturton;	state Exp;
branches
	4.1.3.1.10.1;
next	;

4.1.3.1.10.1
date	2002.10.07.17.29.31;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@; > Doc.ReadSysInf

 Title:         ReadSysInf
 Author:        Tim Dobson
 Version:       0.13
 Started:       19-Mar-91
 Last updated:  25-Aug-02
 Status:        Preliminary
 History:
  19-Mar-91 TMD         Created
  04-Apr-91 TMD         Updated OS_ReadSysInfo(2)
  25-Aug-02 RPS         Boy was this out of date

Extensions to SWI OS_ReadSysInfo in RISC OS 2.11 and later versions
===================================================================

SWI OS_ReadSysInfo has been extended since RISC OS 2.00 - the full
specification is as follows:-

*****************************************************************************

        SWI OS_ReadSysInfo - Read various system information

 in:    R0 = reason code

 out:   Depends on reason code

 Reason codes:-

-------------------------------------------------------------------------

 in:    R0 = 0
 out:   R0 = amount of configured screen memory, in bytes

This sub-call is the same as on RISC OS 2.00, with the exception that two
bugs in the call have been fixed:-

 a) It no longer goes wrong if less than 20K configured on 8K or 16K page
size machine;

 b) It now properly ignores the top bit of the CMOS location holding the
configured value.

-------------------------------------------------------------------------

 in:    R0 = 1
 out:   R0 = Configured Mode/WimpMode
        R1 = Configured MonitorType
        R2 = Configured Sync

Note that from RISC OS 2.09 onwards, the configured Mode and WimpMode have
been merged. Both *Configure Mode and *Configure WimpMode control the same
CMOS RAM location.

Note also that if any of Mode/WimpMode, MonitorType or Sync have been
configured to Auto (see "Doc.MonLead"), then the appropriate value for the
attached monitor will be returned.

-------------------------------------------------------------------------

 in:   r0 = 2
 out:  r0 = hardware configuration word 0
               bits 0-7 = special functions chip type
                               0 => none
                               1 => IOEB
               bits 8-15 = I/O control chip type
                               0 => IOC
                               1 => IOMD
               bits 16-23 = memory control chip type
                               0 => MEMC1/MEMC1a
                               1 => IOMD
               bits 24-31 = video control chip type
                               0 => VIDC1a
                               1 => VIDC20
       r1 = hardware configuration word 1
               bits 0-7 = I/O chip type
                               0 => absent
                               1 => 82C710/711 or SMC'665 or similar
               bits 8-31 reserved (set to 0)
       r2 = hardware configuration word 2
               bits 0-7 = LCD controller type
                               0 => absent
                               1 => present (type 1) eg A4 portable
                               2 => present (type 2) eg Stork portable
               bits 8-15 = IOMD variant
                               0 => IOMD
                               1 => IOMDL ie ARM7500 (Morris)
               bits 16-23 = VIDC20 variant
                               0 => VIDC20
                               1 => VIDC2L ie ARM7500 (Morris)
               bits 24-31 = miscellaneous flags
                      bit 24   0 => IIC bus slow (100kHz)
                               1 => IIC bus fast (400kHz)
                      bit 25   0 => keep I/O clocks running during idle
                               1 => stop I/O clocks during idle
                      bits 26-31 reserved (set to 0)
       r3 = word 0 of unique machine ID, or 0 if unavailable
       r4 = word 1 of unique machine ID, or 0 if unavailable

Some RISC OS computers are fitted with a chip providing a machine ID number
which is unique to each computer. Machines not fitted with an ID will return
zero in both R3 and R4.

-------------------------------------------------------------------------

 in:   r0 = 3 (*** Only available from RISC OS 3.01 onwards ***)
 out:  r0 = I/O chip base features mask               710  711  665  669  UMC669
               Bits 0..3   Base IDE type              1    1    1    1    1
               Bits 4..7   Base FDC type              1    1    1    1    1
               Bits 8..11  Base parallel type         1    1    1    1    1
               Bits 12..15 Base 1st serial type       1    1    1    1    1
               Bits 16..19 Base 2nd serial type       0    1    1    1    1
               Bits 20..23 Base Config type           1    2    3    4    5
               Bits 24..31 Reserved                   0    0    0    0    0

       r1 = I/O chip extra features mask              710  711  665  669  UMC669
               Bits 0..3   IDE extra features         0    0    0    0    0
               Bits 4..7   FDC extra features         0    0    0    0    0
               Bits 8..11  parallel extra features    0    0    1    1    1
               Bits 12..15 1st serial extra features  0    0    1    1    1
               Bits 16..19 2nd serial extra features  0    0    1    1    1
               Bits 20..23 config extra features      0    0    0    0    0
               Bits 24..31 Reserved                   0    0    0    0    0

        R2-R4 Undefined (reserved for future expansion)

The 82C710 family of chips are composed of several sub-units, each of which
might change under future revisions of the chip. Current sub-units are as
follows:

        IDE hard disc interface
        Floppy disc interface
        Parallel port
        Serial port 1
        Serial port 2 (only present in 82C711)
        Chip configuration (different on 82C710 and 82C711)

New versions of the chip may have some sub-units which are incompatible with
earlier versions, while leaving the functionality of other sub-units
unchanged.

This call allows drivers which are only interested in particular sub-units
to tell whether they can work on the particular hardware running in the
machine.

Different values of each sub-field correspond to incompatible versions of
the corresponding sub-unit. A sub-field of zero indicates that the sub-unit
is not present.

If a sub-unit gains additional backwards-compatible functionality in future
versions of the chip, this will be indicated by having bits set in the value
returned in R1.

Information on extra sub-units will be accomodated in the remaining bits of
R0, or in R2-R4.

-------------------------------------------------------------------------

 in:   r0 = 4 (reason code)

 out:  r0 = LSW of Ethernet Network Address (or 0)
       r1 = MSW of Ethernet Network Address (or 0)

-------------------------------------------------------------------------

 in:   r0 = 5 (reason code)
 
 out:  r0 = LSW of Raw data from Dallas Chip
       r1 = MSW of Raw data from Dallas Chip

-------------------------------------------------------------------------

 in:   r0 =  6 (reason code)
       r1 -> input block, 1 word per entry, giving number of value
             required, terminated by -1
 OR:   r1 =  0 if just 1 value is required, and this is to beturned in r2
       r2 -> output block, 1 word per entry, will be filled in on output
 OR:   r2 =  number of single value required, if r1 = 0

On exit:
  if r1 entry != 0:
        r0,r1,r2 preserved
        output block filled in, filled in value(s) set to 0 if
        unrecognised/no longer meaningful value(s)
  if r1 entry = 0:
        r0,r1 preserved
        r2 = single value required, or set to 0 if if unrecognised/
        no longer meaningful value

 valid value numbers available - see table below
        CamEntriesPointer       = 0
        MaxCamEntry             = 1
        PageFlags_Unavailable   = 2
        PhysRamTable            = 3
        ARMA_Cleaner_flipflop   = 4
        TickNodeChain           = 5
        ROMModuleChain          = 6
        DAList                  = 7
        AppSpaceDANode          = 8
        Module_List             = 9
        ModuleSHT_Entries       = 10
        ModuleSWI_HashTab       = 11
        IOSystemType            = 12
        L1PT                    = 13
        L2PT                    = 14
        UNDSTK                  = 15
        SVCSTK                  = 16
        SysHeapStart            = 17

-------------------------------------------------------------------------

 in:    r0 =  6 (reason code)
        read 32-bit Abort information for last unexpected abort
        (prefetch or data)
 out:   r1 = 32-bit PC for last abort
        r2 = 32-bit PSR for last abort
        r3 = fault address for last abort (same as PC for prefetch abort)

-------------------------------------------------------------------------

 in:    r0 = 8 (reason code 8)
 out:   r0 = platform class
             currently defined classes are:
                0 = unspecified platform (r1,r2 will be 0)
                1 = Medusa   (currently returned for Risc PC only)
                2 = Morris   (currently returned for A7000 only)
                3 = Morris+  (currently returned for A7000+ only)
                4 = Phoebe   (currently returned for Risc PC 2 only)
                all other values currently reserved
        r1 = 32 additional platform specifier flags (if defined)
             bits 0..31 = value of flags 0..31 if defined, 0 if undefined
        r2 = defined status of the 32 flags in r1
             bits 0..31 = status of flags 0..31
                          0 = flag is undefined in this OS version
                          1 = flag is defined in this OS version

The current flag definitions for r1 (1=supported, 0=unsupported) are :

    0     = Podule expansion card(s)
    1     = PCI expansion card(s)
    2     = additional processor(s)
    3     = auto power off
    4..31 reserved (currently undefined)

-------------------------------------------------------------------------

 in:   r0 = 9 (reason code 9)
       r1 = item number to return
 out:  r0 = pointer to requested string (NULL terminated) or NULL
            if it wasn't found

 Currently defined item numbers are:

    0   = OS name
    1   = Part number
    2   = Build date
    3   = Dealer name
    4   = User name
    5   = User address
@


4.1
log
@Initial revision
@
text
@d5 1
a5 1
 Version:       0.03
d7 1
a7 1
 Last updated:  21-Oct-91
d12 1
d14 2
a15 2
 Extensions to SWI OS_ReadSysInfo in RISC OS 2.11 and later versions
 ===================================================================
d61 38
a98 19
 in:    R0 = 2
 out:   R0 = IOEB ASIC presence flag
             0 => absent
             1 => present (type 1)
             Other values are reserved for future versions of IOEB which are
              not backwards compatible.

        R1 = 82C710 (or similar) presence flag
             0 => absent
             1 => present

        R2 = LCD ASIC presence flag
             0 => absent
             1 => present (type 1)
             Other values are reserved for future versions of LCD ASIC which
              are not backwards compatible.

        R3 = word 0 of unique machine ID
        R4 = word 1 of unique machine ID
d106 18
a123 12
 in:    R0 = 3 (*** Only available from RISC OS 3.01 onwards ***)
 out:   R0 = 82C710/82C711 basic features mask       82C710  82C711
                Bits 0..3   Basic IDE type              1       1
                Bits 4..7   Basic FDC type              1       1
                Bits 8..11  Basic parallel port type    1       1
                Bits 12..15 Basic 1st serial port type  1       1
                Bits 16..19 Basic 2nd serial port type  0       1
                Bits 20..23 Basic Configuration type    1       2
                Bits 24..31 Reserved

        R1 = 82C710/82C711 extra features mask
                Reserved for upwards compatible additional functionality
d156 104
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.3.1.10.1
log
@Lots of Tungsten work.

Version 5.35, 4.79.2.48. Tagged as 'Kernel-5_35-4_79_2_48'
@
text
@d5 1
a5 1
 Version:       0.13
d7 1
a7 1
 Last updated:  25-Aug-02
a11 1
  25-Aug-02 RPS         Boy was this out of date
d13 2
a14 2
Extensions to SWI OS_ReadSysInfo in RISC OS 2.11 and later versions
===================================================================
d60 19
a78 38
 in:   r0 = 2
 out:  r0 = hardware configuration word 0
               bits 0-7 = special functions chip type
                               0 => none
                               1 => IOEB
               bits 8-15 = I/O control chip type
                               0 => IOC
                               1 => IOMD
               bits 16-23 = memory control chip type
                               0 => MEMC1/MEMC1a
                               1 => IOMD
               bits 24-31 = video control chip type
                               0 => VIDC1a
                               1 => VIDC20
       r1 = hardware configuration word 1
               bits 0-7 = I/O chip type
                               0 => absent
                               1 => 82C710/711 or SMC'665 or similar
               bits 8-31 reserved (set to 0)
       r2 = hardware configuration word 2
               bits 0-7 = LCD controller type
                               0 => absent
                               1 => present (type 1) eg A4 portable
                               2 => present (type 2) eg Stork portable
               bits 8-15 = IOMD variant
                               0 => IOMD
                               1 => IOMDL ie ARM7500 (Morris)
               bits 16-23 = VIDC20 variant
                               0 => VIDC20
                               1 => VIDC2L ie ARM7500 (Morris)
               bits 24-31 = miscellaneous flags
                      bit 24   0 => IIC bus slow (100kHz)
                               1 => IIC bus fast (400kHz)
                      bit 25   0 => keep I/O clocks running during idle
                               1 => stop I/O clocks during idle
                      bits 26-31 reserved (set to 0)
       r3 = word 0 of unique machine ID, or 0 if unavailable
       r4 = word 1 of unique machine ID, or 0 if unavailable
d86 12
a97 18
 in:   r0 = 3 (*** Only available from RISC OS 3.01 onwards ***)
 out:  r0 = I/O chip base features mask               710  711  665  669  UMC669
               Bits 0..3   Base IDE type              1    1    1    1    1
               Bits 4..7   Base FDC type              1    1    1    1    1
               Bits 8..11  Base parallel type         1    1    1    1    1
               Bits 12..15 Base 1st serial type       1    1    1    1    1
               Bits 16..19 Base 2nd serial type       0    1    1    1    1
               Bits 20..23 Base Config type           1    2    3    4    5
               Bits 24..31 Reserved                   0    0    0    0    0

       r1 = I/O chip extra features mask              710  711  665  669  UMC669
               Bits 0..3   IDE extra features         0    0    0    0    0
               Bits 4..7   FDC extra features         0    0    0    0    0
               Bits 8..11  parallel extra features    0    0    1    1    1
               Bits 12..15 1st serial extra features  0    0    1    1    1
               Bits 16..19 2nd serial extra features  0    0    1    1    1
               Bits 20..23 config extra features      0    0    0    0    0
               Bits 24..31 Reserved                   0    0    0    0    0
a129 104

-------------------------------------------------------------------------

 in:   r0 = 4 (reason code)

 out:  r0 = LSW of Ethernet Network Address (or 0)
       r1 = MSW of Ethernet Network Address (or 0)

-------------------------------------------------------------------------

 in:   r0 = 5 (reason code)
 
 out:  r0 = LSW of Raw data from Dallas Chip
       r1 = MSW of Raw data from Dallas Chip

-------------------------------------------------------------------------

 in:   r0 =  6 (reason code)
       r1 -> input block, 1 word per entry, giving number of value
             required, terminated by -1
 OR:   r1 =  0 if just 1 value is required, and this is to beturned in r2
       r2 -> output block, 1 word per entry, will be filled in on output
 OR:   r2 =  number of single value required, if r1 = 0

On exit:
  if r1 entry != 0:
        r0,r1,r2 preserved
        output block filled in, filled in value(s) set to 0 if
        unrecognised/no longer meaningful value(s)
  if r1 entry = 0:
        r0,r1 preserved
        r2 = single value required, or set to 0 if if unrecognised/
        no longer meaningful value

 valid value numbers available - see table below
        CamEntriesPointer       = 0
        MaxCamEntry             = 1
        PageFlags_Unavailable   = 2
        PhysRamTable            = 3
        ARMA_Cleaner_flipflop   = 4
        TickNodeChain           = 5
        ROMModuleChain          = 6
        DAList                  = 7
        AppSpaceDANode          = 8
        Module_List             = 9
        ModuleSHT_Entries       = 10
        ModuleSWI_HashTab       = 11
        IOSystemType            = 12
        L1PT                    = 13
        L2PT                    = 14
        UNDSTK                  = 15
        SVCSTK                  = 16
        SysHeapStart            = 17

-------------------------------------------------------------------------

 in:    r0 =  6 (reason code)
        read 32-bit Abort information for last unexpected abort
        (prefetch or data)
 out:   r1 = 32-bit PC for last abort
        r2 = 32-bit PSR for last abort
        r3 = fault address for last abort (same as PC for prefetch abort)

-------------------------------------------------------------------------

 in:    r0 = 8 (reason code 8)
 out:   r0 = platform class
             currently defined classes are:
                0 = unspecified platform (r1,r2 will be 0)
                1 = Medusa   (currently returned for Risc PC only)
                2 = Morris   (currently returned for A7000 only)
                3 = Morris+  (currently returned for A7000+ only)
                4 = Phoebe   (currently returned for Risc PC 2 only)
                all other values currently reserved
        r1 = 32 additional platform specifier flags (if defined)
             bits 0..31 = value of flags 0..31 if defined, 0 if undefined
        r2 = defined status of the 32 flags in r1
             bits 0..31 = status of flags 0..31
                          0 = flag is undefined in this OS version
                          1 = flag is defined in this OS version

The current flag definitions for r1 (1=supported, 0=unsupported) are :

    0     = Podule expansion card(s)
    1     = PCI expansion card(s)
    2     = additional processor(s)
    3     = auto power off
    4..31 reserved (currently undefined)

-------------------------------------------------------------------------

 in:   r0 = 9 (reason code 9)
       r1 = item number to return
 out:  r0 = pointer to requested string (NULL terminated) or NULL
            if it wasn't found

 Currently defined item numbers are:

    0   = OS name
    1   = Part number
    2   = Build date
    3   = Dealer name
    4   = User name
    5   = User address
@

