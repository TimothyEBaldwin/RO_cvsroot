head	4.1;
access;
symbols
	Kernel-6_15:4.1
	Kernel-6_14:4.1
	Kernel-6_01-3:4.1
	Kernel-6_13:4.1
	Kernel-6_12:4.1
	Kernel-6_11:4.1
	Kernel-6_10:4.1
	Kernel-6_09:4.1
	Kernel-6_08-4_129_2_10:4.1
	Kernel-6_08-4_129_2_9:4.1
	Kernel-6_08:4.1
	Kernel-6_07:4.1
	Kernel-6_06:4.1
	Kernel-6_05-4_129_2_8:4.1
	Kernel-6_05:4.1
	Kernel-6_04:4.1
	Kernel-6_03:4.1
	Kernel-6_01-2:4.1
	Kernel-6_01-4_146_2_1:4.1
	Kernel-6_02:4.1
	Kernel-6_01-1:4.1
	Kernel-6_01:4.1
	Kernel-6_00:4.1
	Kernel-5_99:4.1
	Kernel-5_98:4.1
	Kernel-5_97-4_129_2_7:4.1
	Kernel-5_97:4.1
	Kernel-5_96:4.1
	Kernel-5_95:4.1
	Kernel-5_94:4.1
	Kernel-5_93:4.1
	Kernel-5_92:4.1
	Kernel-5_91:4.1
	Kernel-5_90:4.1
	Kernel-5_89-4_129_2_6:4.1
	Kernel-5_89:4.1
	Kernel-5_88-4_129_2_5:4.1
	Kernel-5_88-4_129_2_4:4.1
	Kernel-5_88:4.1
	Kernel-5_87:4.1
	Kernel-5_86-4_129_2_3:4.1
	Kernel-5_86-4_129_2_2:4.1
	Kernel-5_86-4_129_2_1:4.1
	Kernel-5_86:4.1
	SMP:4.1.0.2
	SMP_bp:4.1
	Kernel-5_85:4.1
	Kernel-5_54-1:4.1
	Kernel-5_84:4.1
	Kernel-5_83:4.1
	Kernel-5_82:4.1
	Kernel-5_81:4.1
	Kernel-5_80:4.1
	Kernel-5_79:4.1
	Kernel-5_78:4.1
	Kernel-5_77:4.1
	Kernel-5_76:4.1
	Kernel-5_75:4.1
	Kernel-5_74:4.1
	Kernel-5_73:4.1
	Kernel-5_72:4.1
	Kernel-5_71:4.1
	Kernel-5_70:4.1
	Kernel-5_69:4.1
	Kernel-5_68:4.1
	Kernel-5_67:4.1
	Kernel-5_66:4.1
	Kernel-5_65:4.1
	Kernel-5_64:4.1
	Kernel-5_63:4.1
	Kernel-5_62:4.1
	Kernel-5_61:4.1
	Kernel-5_60:4.1
	Kernel-5_59:4.1
	Kernel-5_58:4.1
	Kernel-5_57:4.1
	Kernel-5_56:4.1
	Kernel-5_55:4.1
	Kernel-5_54:4.1
	Kernel-5_53:4.1
	Kernel-5_52:4.1
	Kernel-5_51:4.1
	Kernel-5_50:4.1
	Kernel-5_49:4.1
	HAL_merge:1.1.2.6
	Kernel-5_48:4.1
	Kernel-5_35-4_79_2_327:1.1.2.6
	Kernel-5_35-4_79_2_326:1.1.2.6
	Kernel-5_35-4_79_2_325:1.1.2.6
	Kernel-5_35-4_79_2_324:1.1.2.6
	Kernel-5_35-4_79_2_323:1.1.2.6
	Kernel-5_35-4_79_2_322:1.1.2.6
	Kernel-5_35-4_79_2_321:1.1.2.6
	Kernel-5_35-4_79_2_320:1.1.2.6
	Kernel-5_35-4_79_2_319:1.1.2.6
	Kernel-5_35-4_79_2_318:1.1.2.6
	Kernel-5_35-4_79_2_317:1.1.2.6
	Kernel-5_35-4_79_2_316:1.1.2.6
	Kernel-5_35-4_79_2_315:1.1.2.6
	Kernel-5_35-4_79_2_314:1.1.2.6
	Kernel-5_35-4_79_2_313:1.1.2.6
	Kernel-5_35-4_79_2_312:1.1.2.6
	Kernel-5_35-4_79_2_311:1.1.2.6
	Kernel-5_35-4_79_2_310:1.1.2.6
	Kernel-5_35-4_79_2_309:1.1.2.6
	Kernel-5_35-4_79_2_308:1.1.2.6
	Kernel-5_35-4_79_2_307:1.1.2.6
	Kernel-5_35-4_79_2_306:1.1.2.6
	Kernel-5_35-4_79_2_305:1.1.2.6
	Kernel-5_35-4_79_2_304:1.1.2.6
	Kernel-5_35-4_79_2_303:1.1.2.6
	Kernel-5_35-4_79_2_302:1.1.2.6
	Kernel-5_35-4_79_2_301:1.1.2.6
	Kernel-5_35-4_79_2_300:1.1.2.6
	Kernel-5_35-4_79_2_299:1.1.2.6
	Kernel-5_35-4_79_2_298:1.1.2.6
	Kernel-5_35-4_79_2_297:1.1.2.6
	Kernel-5_35-4_79_2_296:1.1.2.6
	Kernel-5_35-4_79_2_295:1.1.2.6
	Kernel-5_35-4_79_2_294:1.1.2.6
	Kernel-5_35-4_79_2_293:1.1.2.6
	Kernel-5_35-4_79_2_292:1.1.2.6
	Kernel-5_35-4_79_2_291:1.1.2.6
	Kernel-5_35-4_79_2_290:1.1.2.6
	Kernel-5_35-4_79_2_289:1.1.2.6
	Kernel-5_35-4_79_2_288:1.1.2.6
	Kernel-5_35-4_79_2_287:1.1.2.6
	Kernel-5_35-4_79_2_286:1.1.2.6
	Kernel-5_35-4_79_2_285:1.1.2.6
	Kernel-5_35-4_79_2_284:1.1.2.6
	Kernel-5_35-4_79_2_283:1.1.2.6
	Kernel-5_35-4_79_2_282:1.1.2.6
	Kernel-5_35-4_79_2_281:1.1.2.6
	Kernel-5_35-4_79_2_280:1.1.2.6
	Kernel-5_35-4_79_2_279:1.1.2.6
	Kernel-5_35-4_79_2_278:1.1.2.6
	Kernel-5_35-4_79_2_277:1.1.2.6
	Kernel-5_35-4_79_2_276:1.1.2.6
	Kernel-5_35-4_79_2_275:1.1.2.6
	Kernel-5_35-4_79_2_274:1.1.2.6
	Kernel-5_35-4_79_2_273:1.1.2.6
	Kernel-5_35-4_79_2_272:1.1.2.6
	Kernel-5_35-4_79_2_271:1.1.2.6
	Kernel-5_35-4_79_2_270:1.1.2.6
	Kernel-5_35-4_79_2_269:1.1.2.6
	Kernel-5_35-4_79_2_268:1.1.2.6
	Kernel-5_35-4_79_2_267:1.1.2.6
	Kernel-5_35-4_79_2_266:1.1.2.6
	Kernel-5_35-4_79_2_265:1.1.2.6
	Kernel-5_35-4_79_2_264:1.1.2.6
	Kernel-5_35-4_79_2_263:1.1.2.6
	Kernel-5_35-4_79_2_262:1.1.2.6
	Kernel-5_35-4_79_2_261:1.1.2.6
	Kernel-5_35-4_79_2_260:1.1.2.6
	Kernel-5_35-4_79_2_259:1.1.2.6
	Kernel-5_35-4_79_2_258:1.1.2.6
	Kernel-5_35-4_79_2_257:1.1.2.6
	Kernel-5_35-4_79_2_256:1.1.2.6
	Kernel-5_35-4_79_2_255:1.1.2.6
	Kernel-5_35-4_79_2_254:1.1.2.6
	Kernel-5_35-4_79_2_253:1.1.2.6
	Kernel-5_35-4_79_2_252:1.1.2.6
	Kernel-5_35-4_79_2_251:1.1.2.6
	Kernel-5_35-4_79_2_250:1.1.2.6
	Kernel-5_35-4_79_2_249:1.1.2.6
	Kernel-5_35-4_79_2_248:1.1.2.6
	Kernel-5_35-4_79_2_247:1.1.2.6
	Kernel-5_35-4_79_2_246:1.1.2.6
	Kernel-5_35-4_79_2_245:1.1.2.6
	Kernel-5_35-4_79_2_244:1.1.2.6
	Kernel-5_35-4_79_2_243:1.1.2.6
	Kernel-5_35-4_79_2_242:1.1.2.6
	Kernel-5_35-4_79_2_241:1.1.2.6
	Kernel-5_35-4_79_2_240:1.1.2.6
	Kernel-5_35-4_79_2_239:1.1.2.6
	Kernel-5_35-4_79_2_238:1.1.2.6
	Kernel-5_35-4_79_2_237:1.1.2.6
	Kernel-5_35-4_79_2_236:1.1.2.6
	Kernel-5_35-4_79_2_235:1.1.2.6
	Kernel-5_35-4_79_2_234:1.1.2.6
	Kernel-5_35-4_79_2_233:1.1.2.6
	Kernel-5_35-4_79_2_232:1.1.2.6
	Kernel-5_35-4_79_2_231:1.1.2.6
	Kernel-5_35-4_79_2_230:1.1.2.6
	Kernel-5_35-4_79_2_229:1.1.2.6
	Kernel-5_35-4_79_2_228:1.1.2.6
	Kernel-5_35-4_79_2_227:1.1.2.6
	Kernel-5_35-4_79_2_226:1.1.2.6
	Kernel-5_35-4_79_2_225:1.1.2.6
	Kernel-5_35-4_79_2_224:1.1.2.6
	Kernel-5_35-4_79_2_223:1.1.2.6
	Kernel-5_35-4_79_2_222:1.1.2.6
	Kernel-5_35-4_79_2_221:1.1.2.6
	Kernel-5_35-4_79_2_220:1.1.2.6
	Kernel-5_35-4_79_2_219:1.1.2.6
	Kernel-5_35-4_79_2_218:1.1.2.6
	Kernel-5_35-4_79_2_217:1.1.2.6
	Kernel-5_35-4_79_2_216:1.1.2.6
	Kernel-5_35-4_79_2_215:1.1.2.6
	Kernel-5_35-4_79_2_214:1.1.2.6
	Kernel-5_35-4_79_2_213:1.1.2.6
	Kernel-5_35-4_79_2_212:1.1.2.6
	Kernel-5_35-4_79_2_211:1.1.2.6
	Kernel-5_35-4_79_2_210:1.1.2.6
	Kernel-5_35-4_79_2_209:1.1.2.6
	Kernel-5_35-4_79_2_208:1.1.2.6
	Kernel-5_35-4_79_2_207:1.1.2.6
	Kernel-5_35-4_79_2_206:1.1.2.6
	Kernel-5_35-4_79_2_205:1.1.2.6
	Kernel-5_35-4_79_2_204:1.1.2.6
	Kernel-5_35-4_79_2_203:1.1.2.6
	Kernel-5_35-4_79_2_202:1.1.2.6
	Kernel-5_35-4_79_2_201:1.1.2.6
	Kernel-5_35-4_79_2_200:1.1.2.6
	Kernel-5_35-4_79_2_199:1.1.2.6
	Kernel-5_35-4_79_2_198:1.1.2.6
	Kernel-5_35-4_79_2_197:1.1.2.6
	Kernel-5_35-4_79_2_196:1.1.2.6
	Kernel-5_35-4_79_2_195:1.1.2.6
	Kernel-5_35-4_79_2_194:1.1.2.6
	Kernel-5_35-4_79_2_193:1.1.2.6
	Kernel-5_35-4_79_2_192:1.1.2.6
	Kernel-5_35-4_79_2_191:1.1.2.6
	Kernel-5_35-4_79_2_190:1.1.2.6
	Kernel-5_35-4_79_2_189:1.1.2.6
	Kernel-5_35-4_79_2_188:1.1.2.6
	Kernel-5_35-4_79_2_187:1.1.2.6
	Kernel-5_35-4_79_2_186:1.1.2.6
	Kernel-5_35-4_79_2_185:1.1.2.6
	Kernel-5_35-4_79_2_184:1.1.2.6
	Kernel-5_35-4_79_2_183:1.1.2.6
	Kernel-5_35-4_79_2_182:1.1.2.6
	Kernel-5_35-4_79_2_181:1.1.2.6
	Kernel-5_35-4_79_2_180:1.1.2.6
	Kernel-5_35-4_79_2_179:1.1.2.6
	Kernel-5_35-4_79_2_178:1.1.2.6
	Kernel-5_35-4_79_2_177:1.1.2.6
	Kernel-5_35-4_79_2_176:1.1.2.6
	Kernel-5_35-4_79_2_175:1.1.2.6
	Kernel-5_35-4_79_2_174:1.1.2.6
	Kernel-5_35-4_79_2_173:1.1.2.6
	Kernel-5_35-4_79_2_172:1.1.2.6
	Kernel-5_35-4_79_2_171:1.1.2.6
	Kernel-5_35-4_79_2_170:1.1.2.6
	Kernel-5_35-4_79_2_169:1.1.2.6
	Kernel-5_35-4_79_2_168:1.1.2.6
	Kernel-5_35-4_79_2_167:1.1.2.6
	Kernel-5_35-4_79_2_166:1.1.2.6
	Kernel-5_35-4_79_2_165:1.1.2.6
	RPi_merge:1.1.2.6
	Kernel-5_35-4_79_2_147_2_23:1.1.2.6
	Kernel-5_35-4_79_2_147_2_22:1.1.2.6
	Kernel-5_35-4_79_2_147_2_21:1.1.2.6
	Kernel-5_35-4_79_2_147_2_20:1.1.2.6
	Kernel-5_35-4_79_2_147_2_19:1.1.2.6
	Kernel-5_35-4_79_2_147_2_18:1.1.2.6
	Kernel-5_35-4_79_2_164:1.1.2.6
	Kernel-5_35-4_79_2_163:1.1.2.6
	Kernel-5_35-4_79_2_147_2_17:1.1.2.6
	Kernel-5_35-4_79_2_147_2_16:1.1.2.6
	Kernel-5_35-4_79_2_147_2_15:1.1.2.6
	Kernel-5_35-4_79_2_162:1.1.2.6
	Kernel-5_35-4_79_2_161:1.1.2.6
	Kernel-5_35-4_79_2_147_2_14:1.1.2.6
	Kernel-5_35-4_79_2_147_2_13:1.1.2.6
	Kernel-5_35-4_79_2_160:1.1.2.6
	Kernel-5_35-4_79_2_159:1.1.2.6
	Kernel-5_35-4_79_2_158:1.1.2.6
	Kernel-5_35-4_79_2_157:1.1.2.6
	Kernel-5_35-4_79_2_156:1.1.2.6
	Kernel-5_35-4_79_2_147_2_12:1.1.2.6
	Kernel-5_35-4_79_2_147_2_11:1.1.2.6
	Kernel-5_35-4_79_2_155:1.1.2.6
	Kernel-5_35-4_79_2_147_2_10:1.1.2.6
	Kernel-5_35-4_79_2_154:1.1.2.6
	Kernel-5_35-4_79_2_153:1.1.2.6
	Kernel-5_35-4_79_2_147_2_9:1.1.2.6
	Kernel-5_35-4_79_2_152:1.1.2.6
	Kernel-5_35-4_79_2_151:1.1.2.6
	Kernel-5_35-4_79_2_147_2_8:1.1.2.6
	Kernel-5_35-4_79_2_147_2_7:1.1.2.6
	Kernel-5_35-4_79_2_150:1.1.2.6
	Kernel-5_35-4_79_2_147_2_6:1.1.2.6
	Kernel-5_35-4_79_2_147_2_5:1.1.2.6
	Kernel-5_35-4_79_2_149:1.1.2.6
	Kernel-5_35-4_79_2_147_2_4:1.1.2.6
	Kernel-5_35-4_79_2_147_2_3:1.1.2.6
	Kernel-5_35-4_79_2_148:1.1.2.6
	Kernel-5_35-4_79_2_147_2_2:1.1.2.6
	Kernel-5_35-4_79_2_147_2_1:1.1.2.6
	RPi:1.1.2.6.0.6
	RPi_bp:1.1.2.6
	Kernel-5_35-4_79_2_98_2_52_2_1:1.1.2.6
	alees_Kernel_dev:1.1.2.6.0.4
	alees_Kernel_dev_bp:1.1.2.6
	Kernel-5_35-4_79_2_147:1.1.2.6
	Kernel-5_35-4_79_2_146:1.1.2.6
	Kernel-5_35-4_79_2_145:1.1.2.6
	Kernel-5_35-4_79_2_144:1.1.2.6
	Kernel-5_35-4_79_2_143:1.1.2.6
	Kernel-5_35-4_79_2_142:1.1.2.6
	Kernel-5_35-4_79_2_141:1.1.2.6
	Kernel-5_35-4_79_2_140:1.1.2.6
	Kernel-5_35-4_79_2_139:1.1.2.6
	Kernel-5_35-4_79_2_138:1.1.2.6
	Kernel-5_35-4_79_2_137:1.1.2.6
	Kernel-5_35-4_79_2_136:1.1.2.6
	Kernel-5_35-4_79_2_135:1.1.2.6
	Kernel-5_35-4_79_2_134:1.1.2.6
	Kernel-5_35-4_79_2_133:1.1.2.6
	Kernel-5_35-4_79_2_132:1.1.2.6
	Kernel-5_35-4_79_2_131:1.1.2.6
	Kernel-5_35-4_79_2_130:1.1.2.6
	Kernel-5_35-4_79_2_129:1.1.2.6
	Kernel-5_35-4_79_2_128:1.1.2.6
	Kernel-5_35-4_79_2_127:1.1.2.6
	Kernel-5_35-4_79_2_126:1.1.2.6
	Kernel-5_35-4_79_2_125:1.1.2.6
	Kernel-5_35-4_79_2_124:1.1.2.6
	Kernel-5_35-4_79_2_123:1.1.2.6
	Cortex_merge:1.1.2.6
	Kernel-5_35-4_79_2_122:1.1.2.6
	Kernel-5_35-4_79_2_98_2_54:1.1.2.6
	Kernel-5_35-4_79_2_98_2_53:1.1.2.6
	Kernel-5_35-4_79_2_98_2_52:1.1.2.6
	Kernel-5_35-4_79_2_98_2_51:1.1.2.6
	Kernel-5_35-4_79_2_98_2_50:1.1.2.6
	Kernel-5_35-4_79_2_98_2_49:1.1.2.6
	Kernel-5_35-4_79_2_98_2_48:1.1.2.6
	Kernel-5_35-4_79_2_121:1.1.2.6
	Kernel-5_35-4_79_2_98_2_47:1.1.2.6
	Kernel-5_35-4_79_2_120:1.1.2.6
	Kernel-5_35-4_79_2_98_2_46:1.1.2.6
	Kernel-5_35-4_79_2_119:1.1.2.6
	Kernel-5_35-4_79_2_98_2_45:1.1.2.6
	Kernel-5_35-4_79_2_98_2_44:1.1.2.6
	Kernel-5_35-4_79_2_118:1.1.2.6
	Kernel-5_35-4_79_2_98_2_43:1.1.2.6
	Kernel-5_35-4_79_2_117:1.1.2.6
	Kernel-5_35-4_79_2_116:1.1.2.6
	Kernel-5_35-4_79_2_98_2_42:1.1.2.6
	Kernel-5_35-4_79_2_115:1.1.2.6
	Kernel-5_35-4_79_2_98_2_41:1.1.2.6
	Kernel-5_35-4_79_2_98_2_40:1.1.2.6
	Kernel-5_35-4_79_2_114:1.1.2.6
	Kernel-5_35-4_79_2_98_2_39:1.1.2.6
	Kernel-5_35-4_79_2_98_2_38:1.1.2.6
	Kernel-5_35-4_79_2_113:1.1.2.6
	Kernel-5_35-4_79_2_112:1.1.2.6
	Kernel-5_35-4_79_2_98_2_37:1.1.2.6
	Kernel-5_35-4_79_2_98_2_36:1.1.2.6
	Kernel-5_35-4_79_2_98_2_35:1.1.2.6
	Kernel-5_35-4_79_2_98_2_34:1.1.2.6
	Kernel-5_35-4_79_2_98_2_33:1.1.2.6
	Kernel-5_35-4_79_2_98_2_32:1.1.2.6
	Kernel-5_35-4_79_2_98_2_31:1.1.2.6
	Kernel-5_35-4_79_2_98_2_30:1.1.2.6
	Kernel-5_35-4_79_2_98_2_29:1.1.2.6
	Kernel-5_35-4_79_2_98_2_28:1.1.2.6
	Kernel-5_35-4_79_2_98_2_27:1.1.2.6
	Kernel-5_35-4_79_2_98_2_26:1.1.2.6
	Kernel-5_35-4_79_2_111:1.1.2.6
	Kernel-5_35-4_79_2_98_2_25:1.1.2.6
	Kernel-5_35-4_79_2_98_2_24:1.1.2.6
	Kernel-5_35-4_79_2_98_2_23:1.1.2.6
	Kernel-5_35-4_79_2_110:1.1.2.6
	Kernel-5_35-4_79_2_98_2_22:1.1.2.6
	Kernel-5_35-4_79_2_109:1.1.2.6
	Kernel-5_35-4_79_2_98_2_21:1.1.2.6
	Kernel-5_35-4_79_2_98_2_20:1.1.2.6
	Kernel-5_35-4_79_2_108:1.1.2.6
	Kernel-5_35-4_79_2_107:1.1.2.6
	Kernel-5_35-4_79_2_98_2_19:1.1.2.6
	Kernel-5_35-4_79_2_98_2_18:1.1.2.6
	Kernel-5_35-4_79_2_98_2_17:1.1.2.6
	Kernel-5_35-4_79_2_98_2_16:1.1.2.6
	Kernel-5_35-4_79_2_98_2_15:1.1.2.6
	Kernel-5_35-4_79_2_106:1.1.2.6
	Kernel-5_35-4_79_2_105:1.1.2.6
	Kernel-5_35-4_79_2_104:1.1.2.6
	Kernel-5_35-4_79_2_98_2_14:1.1.2.6
	Kernel-5_35-4_79_2_98_2_13:1.1.2.6
	Kernel-5_35-4_79_2_98_2_12:1.1.2.6
	Kernel-5_35-4_79_2_98_2_11:1.1.2.6
	Kernel-5_35-4_79_2_98_2_10:1.1.2.6
	Kernel-5_35-4_79_2_98_2_9:1.1.2.6
	Kernel-5_35-4_79_2_103:1.1.2.6
	Kernel-5_35-4_79_2_102:1.1.2.6
	Kernel-5_35-4_79_2_98_2_8:1.1.2.6
	Kernel-5_35-4_79_2_98_2_7:1.1.2.6
	Kernel-5_35-4_79_2_98_2_6:1.1.2.6
	Kernel-5_35-4_79_2_98_2_5:1.1.2.6
	Kernel-5_35-4_79_2_98_2_4:1.1.2.6
	Kernel-5_35-4_79_2_101:1.1.2.6
	Kernel-5_35-4_79_2_100:1.1.2.6
	Kernel-5_35-4_79_2_99:1.1.2.6
	Kernel-5_35-4_79_2_98_2_3:1.1.2.6
	Kernel-5_35-4_79_2_98_2_2:1.1.2.6
	Kernel-5_35-4_79_2_98_2_1:1.1.2.6
	Cortex:1.1.2.6.0.2
	Cortex_bp:1.1.2.6
	Kernel-5_35-4_79_2_98:1.1.2.6
	Kernel-5_35-4_79_2_97:1.1.2.6
	Kernel-5_35-4_79_2_96:1.1.2.6
	Kernel-5_35-4_79_2_95:1.1.2.5
	Kernel-5_35-4_79_2_94:1.1.2.5
	Kernel-5_35-4_79_2_93:1.1.2.5
	Kernel-5_35-4_79_2_92:1.1.2.5
	Kernel-5_35-4_79_2_91:1.1.2.5
	Kernel-5_35-4_79_2_90:1.1.2.5
	Kernel-5_35-4_79_2_89:1.1.2.5
	Kernel-5_35-4_79_2_88:1.1.2.5
	Kernel-5_35-4_79_2_87:1.1.2.5
	Kernel-5_35-4_79_2_86:1.1.2.5
	Kernel-5_35-4_79_2_85:1.1.2.5
	Kernel-5_35-4_79_2_84:1.1.2.5
	Kernel-5_35-4_79_2_83:1.1.2.5
	Kernel-5_35-4_79_2_82:1.1.2.5
	Kernel-5_35-4_79_2_81:1.1.2.5
	Kernel-5_35-4_79_2_80:1.1.2.4
	Kernel-5_35-4_79_2_79:1.1.2.4
	Kernel-5_35-4_79_2_78:1.1.2.4
	Kernel-5_35-4_79_2_77:1.1.2.4
	RO_5_07:1.1.2.4
	Kernel-5_35-4_79_2_76:1.1.2.4
	Kernel-5_35-4_79_2_75:1.1.2.4
	Kernel-5_35-4_79_2_74:1.1.2.4
	Kernel-5_35-4_79_2_73:1.1.2.4
	Kernel-5_35-4_79_2_72:1.1.2.4
	Kernel-5_35-4_79_2_71:1.1.2.4
	Kernel-5_35-4_79_2_70:1.1.2.4
	Kernel-5_35-4_79_2_69:1.1.2.4
	Kernel-5_35-4_79_2_68:1.1.2.4
	Kernel-5_35-4_79_2_67:1.1.2.4
	Kernel-5_35-4_79_2_66:1.1.2.4
	Kernel-5_35-4_79_2_65:1.1.2.3
	Kernel-5_35-4_79_2_64:1.1.2.3
	Kernel-5_35-4_79_2_63:1.1.2.3
	Kernel-5_35-4_79_2_62:1.1.2.3
	Kernel-5_35-4_79_2_61:1.1.2.3
	Kernel-5_35-4_79_2_60:1.1.2.3
	Kernel-5_35-4_79_2_59:1.1.2.3
	Kernel-5_35-4_79_2_58:1.1.2.3
	Kernel-5_35-4_79_2_57:1.1.2.3
	Kernel-5_35-4_79_2_56:1.1.2.3
	Kernel-5_35-4_79_2_55:1.1.2.3
	Kernel-5_35-4_79_2_54:1.1.2.2
	Kernel-5_35-4_79_2_53:1.1.2.2
	Kernel-5_35-4_79_2_52:1.1.2.2
	Kernel-5_35-4_79_2_51:1.1.2.2
	Kernel-5_35-4_79_2_50:1.1.2.1
	Kernel-5_35-4_79_2_49:1.1.2.1
	Kernel-5_35-4_79_2_48:1.1.2.1
	HAL:1.1.0.2;
locks; strict;
comment	@# @;


4.1
date	2016.06.30.20.07.33;	author jlee;	state Exp;
branches;
next	1.1;
commitid	IWoXxARWeuLDOwcz;

1.1
date	2002.10.07.17.29.31;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2002.10.07.17.29.31;	author kbracey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.11.30.00.30.58;	author bavison;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2003.01.27.15.25.30;	author kbracey;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2004.05.06.16.01.58;	author kbracey;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2004.11.02.00.48.02;	author jballance;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2008.10.04.20.33.12;	author bavison;	state Exp;
branches;
next	;


desc
@@


4.1
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@GraphicsV
---------
R4 = reason code .. Bits 31..24 = display number, default 0


VSync interrupt occured (Driver -> Kernel)
  R4 = 1
out: R0-R3 corrupt

Set mode
  R4 = 2
  R0 -> VIDC list type 3

Set interlace
  R4 = 3
  R0 = 0 or 1 (off or on)

Set blank
  R4 = 4
  R0 = 0 or 1 (unblank or blank)
  R1 = DPMS state (0 -3)

Update pointer
  R4 = 5
  R0 = flags (bit 0 => enable, bit 1 => shape changed)
  R1 = x pos
  R2 = y pos
  R3 -> shape descriptor

 R3 points to shape_t descriptor block:
   typedef struct shape_t
   {
	uint8	width;	    /* unpadded width in bytes (see notes) */
	uint8	height;	    /* in pixels */
	uint8	padding[2]; /* 2 bytes of padding for field alignment */
	void   *buffLA;	    /* logical address of buffer holding pixel data */
	void   *buffPA;	    /* corresponding physical address of buffer */
   }

 Notes:
 1) if flags bit 0 is 0 (pointer off), x, y, shape are undefined
 2) the shape data from RISC OS is always padded with transparent pixels
    on the rhs, to a width of 32 pixels (8 bytes)
 3) pointer clipping is the responsibility of the HAL (eg. may be able to
    allow display of pointer in border region on some h/w)
 4) buffer for pixel data is aligned to a multiple of 256 bytes or better

 This call is made by the OS at a time to allow smoothly displayed changes
 (on a VSync)

Set DAG
  R4 = 6
  R0 = DAG (0 = display init, 1 = base, 2 = limit, 3 = vdu init)
  R1 = physical address

Vet mode (reserved)
  R4 = 7
  R0 = VIDC list
  R1 = workspace ?
out: R0 = 0 if OK
  
Features
  R4 = 8
out:
  R0 = flags word (bit 0 => hardware scroll)
		  (bit 1 => hardware pointer)
		  (bit 2 => interlace with progressive framestore)
		  (bit 3 => separate framestore)
		  (bit 4 => no VSyncs generated)
  R1 = pixel formats (bits 0-5 => 2^n bpp supported)
  R2 = buffer alignment requirement in bytes (power of 2)

Framestore information
  R4 = 9
out:
  R0 = framestore physical base address
  R1 = framestore size
  R4 = 0 if external framestore used, preserved if not

Write palette entry
  R4 = 10
  R0 = type (0 = normal entry, 1 = border, 2 = pointer)
  R1 = palette entry (&BBGGRRSS)
  R2 = palette index

Write palette entries
  R4 = 11
  R0 = type (0 = normal entry, 1 = border, 2 = pointer)
  R1 -> palette entry table
  R2 = first palette index
  R3 = number of entries

Read palette entry
  R4 = 12
  R0 = type (0 = normal entry, 1 = border, 2 = pointer)
  R1 = palette entry (&BBGGRRSS)
  R2 = palette index
Out:
  R1 = palette updated

Render
  R4 = 13
  R0 = flags
	 bit 0 = synchronise
	 bit 1 = synchronise if unclaimed
  R1 = operation
  R2 -> parameter block
  
IIC_Op
   R4 = 14
   R0 = card<<28 + channel<<24 + I2Ccmnd << 16 + address
                                 I2Ccmnd = 1 for read, 0 write
   R1 ->dma address
   R2 = byte count
 Out:
   R0 = 0 or error block
   R1 updated
   R2 updated   
  
SelectHead
   R4 = 15
   R0 = head to select (0,1, etc)
 Out:
   R0 = 0 or error block
  
  
  
  
  
Render calls:

  R1 = 0   NOP
  no parameters (R2  undefined) - NOP
   
  R1 = 1   Copy rectangle
  R2+0 = source left
  R2+4 = source bottom
  R2+8 = dest left
  R2+12 = dest bottom
  R2+16 = width-1
  R2+20 = height-1
  
  
  R1 = 2   Fill rectangle
  R2+0 = left
  R2+4 = top
  R2+8 = right
  R2+12 = bottom
  R2+16 -> OraEor block (on a 64-byte boundary)
@


1.1
log
@file GraphicsV was initially added on branch HAL.
@
text
@d1 149
@


1.1.2.1
log
@Lots of Tungsten work.

Version 5.35, 4.79.2.48. Tagged as 'Kernel-5_35-4_79_2_48'
@
text
@a0 79
GraphicsV
---------
R4 = reason code



VSync interrupt occured (Driver -> Kernel)
  R4 = 1
out: R0-R3 corrupt

Set mode
  R4 = 2
  R0 -> VIDC list type 3

Set interlace
  R4 = 3
  R0 = 0 or 1 (off or on)

Set blank
  R4 = 4
  R0 = 0 or 1 (unblank or blank)
  R1 = DPMS state (0 -3)

Update pointer
  R4 = 5
  R0 = flags (bit 0 => enable, bit 1 => shape changed)
  R1 = x pos
  R2 = y pos
  R3 -> shape descriptor

Set DAG
  R4 = 6
  R0 = DAG
  R1 = physical address

Vet mode (reserved)
  R4 = 7
  R0 = VIDC list
  R1 = workspace ?
out: R0 = 0 if OK
  
Features
  R4 = 8
out:
  R0 = flags word (bit 0 => hardware scroll)
                  (bit 1 => hardware pointer)
                  (bit 2 => interlace with progressive framestore)
                  (bit 3 => separate framestore)
  R1 = pixel formats (bits 0-5 => 2^n bpp supported)
  R2 = buffer alignment requirement in bytes (power of 2)

Framestore information
  R4 = 9
out:
  R0 = framestore physical base address
  R1 = framestore size
  R4 = 0 if external framestore used, preserved if not

Write palette entry
  R4 = 10
  R0 = type (0 = normal entry, 1 = border, 2 = palette)
  R1 = palette entry (&BBGGRRSS)
  R2 = palette index

Write palette entries
  R4 = 11
  R0 = type (0 = normal entry, 1 = border, 2 = palette)
  R1 -> palette entry table
  R2 = first palette index
  R3 = number of entries

Read palette entry
  R4 = 12
  R0 = type (0 = normal entry, 1 = border, 2 = palette)
  R1 = palette entry (&BBGGRRSS)
  R2 = palette index
Out:
  R1 = palette updated
  @


1.1.2.2
log
@  Commit of kernel as featured in release 5.00.
Detail:
  Lots of changes since last version, at least the following:
  * Updated OS timestamp, removed alpha status
  * Negative INKEY OS version changed to &AA
  * GraphicsV is now alocated vector number &2A
  * ROM moved up to &FC000000
  * Max application slot increased to 512 Mbytes (for now)
  * Max size of RMA increased to 256 Mbytes
  * RMA is now first-created dynamic area (so it gets lowest address after
    top of application slot)
  * OS_Memory 10 reimplemeted
  * New OS_ReadSysInfo 6 values 18-22 added
  * OS_ReadSysInfo 8 gains flag bit to indicate soft power-off
  * Misc internal top-bit-set-address fixes
  * *ChangeDynamicArea can take sizes in megabytes or gigabytes
  * Magic word "&off" in R0 passed to OS_Reset powers down if possible
  * Added acceleration: block copy; CLS; text window scroll up; rectangle
    fill
  * Disabled LED flashing in page mode (liable to crash)
  * Masked sprite plot and VDU 5 text avoids reading the screen if possible
  * Framestore made USR mode accessible
  * Fix for VDU 5,127 bug - now relies on font definitions being in extreme
    quarters of memory, rather than bottom half
  * Allocated 64-bit OS_Convert... SWIs
  * IIC errors use allocated error numbers
  * Looks for Dallas RTC before Philips RTC because we're using a Philips
    NVRAM device with the same ID
  * Fix to bug that meant the oscillator in the Dallas RTC wasn't enabled
  * Default mouse type (USB) changed to allocated number
  * Ram disc max size increased to 128 Mbytes (Ursula merge) and made
    cacheable for StrongARMs (not XScale)
  * Branch through zero handler now works in USR mode, by use of a
    trampoline in the system stack to allow PC-relative register storage
  * Address exception handler changed to not use 0 as workspace
  * OS_Memory 13 extended to allow specification of cacheability and access
    privileges
  * Added OS_Memory 16 to return important memory addresses
  * RISCOS_MapInIO() takes cacheable flag in bit 3, access permissions in
    bits 10 and 11, doubly-mapped flag in bit 20, and access permissions
    specified flag in bit 21
  * Bug fix in last version for application abort handlers didn't quite
    work; register shuffle required
  * "Module is not 32-bit compatible" error now reports the module name
  * Default configured language changed from 10 to 11 (now Desktop again)

Version 5.35, 4.79.2.51. Tagged as 'Kernel-5_35-4_79_2_51'
@
text
@d33 1
a33 1
  R0 = DAG (0 = display init, 1 = base, 2 = limit, 3 = vdu init)
d79 1
a79 33

Render
  R4 = 13
  R0 = flags
         bit 0 = synchronise
         bit 1 = synchronise if unclaimed
  R1 = operation
  R2 -> parameter block
  
  
  
  
  
Render calls:

  R1 = 0   NOP
  no parameters (R2  undefined) - NOP
   
  R1 = 1   Copy rectangle
  R2+0 = source left
  R2+4 = source bottom
  R2+8 = dest left
  R2+12 = dest bottom
  R2+16 = width-1
  R2+20 = height-1
  
  
  R1 = 2   Fill rectangle
  R2+0 = left
  R2+4 = top
  R2+8 = right
  R2+12 = bottom
  R2+16 -> OraEor block (on a 64-byte boundary)
@


1.1.2.3
log
@Support for keys held down in the HAL at power on.
*Configure ANYTHINGsize was broken due to not setting R0 to ReadUnsigned
IIC ack message uninternationalised
OS_Memory was saying we only had 4M of RAM
VDU4 scrolling when output was switched to sprite was causing corruption
on use of CTRL-J and CTRL-K
Default SystemSize CMOS set to 32k

Version 5.35, 4.79.2.55. Tagged as 'Kernel-5_35-4_79_2_55'
@
text
@d61 1
a61 1
  R0 = type (0 = normal entry, 1 = border, 2 = pointer)
d67 1
a67 1
  R0 = type (0 = normal entry, 1 = border, 2 = pointer)
d74 1
a74 1
  R0 = type (0 = normal entry, 1 = border, 2 = pointer)
@


1.1.2.4
log
@* HAL can choose to limit amount of screen memory to allocate
  [Not fully implemented - for now leaves at least 16MB free if only
  one RAM area; was 1MB].
* Added HAL_USBControllerInfo, HAL_MonitorLeadID and HAL_Video_Render.
* Added HAL->OS call OS_IICOpV.
* OS_MMUControl now allows independent control of I and C bits.
* Added facility to deactivate keyboard debounce (magic word "NoKd" in
  R2 in KeyV 0).
* Fixed problem with RAM amounts not a multiple of 4MB.
* Supremacy bit (in VDU 19) now sets all 8 bits of supremacy.
* Added PaletteV 14 (reads gamma tables).
* Added Supremacy transfer functions (like gamma correction, but for
  supremacy). Allows easy global supremacy effects in a mode-independent
  fashion. Controlled with PaletteV 15,16.
* Added modes 50-53 (320x240, 1,2,4,8bpp). Intended for small LCD.
* Added 13.5kHz versions of TV modes (selected by Hdr:Machine).
* Upped desktop version to 5.06.

Version 5.35, 4.79.2.66. Tagged as 'Kernel-5_35-4_79_2_66'
@
text
@a30 21
 R3 points to shape_t descriptor block:
   typedef struct shape_t
   {
	uint8	width;	    /* unpadded width in bytes (see notes) */
	uint8	height;	    /* in pixels */
	uint8	padding[2]; /* 2 bytes of padding for field alignment */
	void   *buffLA;	    /* logical address of buffer holding pixel data */
	void   *buffPA;	    /* corresponding physical address of buffer */
   }

 Notes:
 1) if flags bit 0 is 0 (pointer off), x, y, shape are undefined
 2) the shape data from RISC OS is always padded with transparent pixels
    on the rhs, to a width of 32 pixels (8 bytes)
 3) pointer clipping is the responsibility of the HAL (eg. may be able to
    allow display of pointer in border region on some h/w)
 4) buffer for pixel data is aligned to a multiple of 256 bytes or better

 This call is made by the OS at a time to allow smoothly displayed changes
 (on a VSync)

d46 3
a48 3
		  (bit 1 => hardware pointer)
		  (bit 2 => interlace with progressive framestore)
		  (bit 3 => separate framestore)
d83 2
a84 2
	 bit 0 = synchronise
	 bit 1 = synchronise if unclaimed
@


1.1.2.5
log
@     several mode:
     1: default ticker based vsync generated whenever no device present to do so
     2: graphicsv handling and spec updated to use the hi 8 bits in the
        reason code (R4) to define the display number. Kernel only knows
        of display 0
Detail:
Admin:
     tested castle  castle added ip


Version 5.35, 4.79.2.81. Tagged as 'Kernel-5_35-4_79_2_81'
@
text
@d3 2
a4 1
R4 = reason code .. Bits 31..24 = display number, default 0
a69 1
		  (bit 4 => no VSyncs generated)
@


1.1.2.6
log
@  Merged in changes from Castle
Detail:
  Updated GraphicsV documentation
  Upped ROM version number - currently matches latest Castle release (5.13)
Admin:
  No code change

Version 5.35, 4.79.2.96. Tagged as 'Kernel-5_35-4_79_2_96'
@
text
@a108 17
IIC_Op
   R4 = 14
   R0 = card<<28 + channel<<24 + I2Ccmnd << 16 + address
                                 I2Ccmnd = 1 for read, 0 write
   R1 ->dma address
   R2 = byte count
 Out:
   R0 = 0 or error block
   R1 updated
   R2 updated   
  
SelectHead
   R4 = 15
   R0 = head to select (0,1, etc)
 Out:
   R0 = 0 or error block
  
@


