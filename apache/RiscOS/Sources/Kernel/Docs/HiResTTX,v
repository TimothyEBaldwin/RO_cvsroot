head	4.2;
access;
symbols
	Kernel-6_15:4.2
	Kernel-6_14:4.2
	Kernel-6_01-3:4.2
	Kernel-6_13:4.2
	Kernel-6_12:4.2
	Kernel-6_11:4.2
	Kernel-6_10:4.2
	Kernel-6_09:4.2
	Kernel-6_08-4_129_2_10:4.2
	Kernel-6_08-4_129_2_9:4.2
	Kernel-6_08:4.2
	Kernel-6_07:4.2
	Kernel-6_06:4.2
	Kernel-6_05-4_129_2_8:4.2
	Kernel-6_05:4.2
	Kernel-6_04:4.2
	Kernel-6_03:4.2
	Kernel-6_01-2:4.2
	Kernel-6_01-4_146_2_1:4.2
	Kernel-6_02:4.2
	Kernel-6_01-1:4.2
	Kernel-6_01:4.2
	Kernel-6_00:4.2
	Kernel-5_99:4.2
	Kernel-5_98:4.2
	Kernel-5_97-4_129_2_7:4.2
	Kernel-5_97:4.2
	Kernel-5_96:4.2
	Kernel-5_95:4.2
	Kernel-5_94:4.2
	Kernel-5_93:4.2
	Kernel-5_92:4.2
	Kernel-5_91:4.2
	Kernel-5_90:4.2
	Kernel-5_89-4_129_2_6:4.2
	Kernel-5_89:4.2
	Kernel-5_88-4_129_2_5:4.2
	Kernel-5_88-4_129_2_4:4.2
	Kernel-5_88:4.2
	Kernel-5_87:4.2
	Kernel-5_86-4_129_2_3:4.2
	Kernel-5_86-4_129_2_2:4.2
	Kernel-5_86-4_129_2_1:4.2
	Kernel-5_86:4.2
	SMP:4.2.0.2
	SMP_bp:4.2
	Kernel-5_85:4.2
	Kernel-5_54-1:4.2
	Kernel-5_84:4.2
	Kernel-5_83:4.2
	Kernel-5_82:4.2
	Kernel-5_81:4.2
	Kernel-5_80:4.2
	Kernel-5_79:4.2
	Kernel-5_78:4.2
	Kernel-5_77:4.2
	Kernel-5_76:4.2
	Kernel-5_75:4.2
	Kernel-5_74:4.2
	Kernel-5_73:4.2
	Kernel-5_72:4.2
	Kernel-5_71:4.2
	Kernel-5_70:4.2
	Kernel-5_69:4.2
	Kernel-5_68:4.2
	Kernel-5_67:4.2
	Kernel-5_66:4.2
	Kernel-5_65:4.2
	Kernel-5_64:4.2
	Kernel-5_63:4.2
	Kernel-5_62:4.2
	Kernel-5_61:4.2
	Kernel-5_60:4.2
	Kernel-5_59:4.2
	Kernel-5_58:4.2
	Kernel-5_57:4.2
	Kernel-5_56:4.2
	Kernel-5_55:4.2
	Kernel-5_54:4.2
	Kernel-5_53:4.2
	Kernel-5_52:4.2
	Kernel-5_51:4.2
	Kernel-5_50:4.2
	Kernel-5_49:4.2
	HAL_merge:4.1.2.1
	Kernel-5_48:4.2
	Kernel-5_35-4_79_2_327:4.1.2.1
	Kernel-5_35-4_79_2_326:4.1.2.1
	Kernel-5_35-4_79_2_325:4.1.2.1
	Kernel-5_35-4_79_2_324:4.1.2.1
	Kernel-5_35-4_79_2_323:4.1.2.1
	Kernel-5_35-4_79_2_322:4.1.2.1
	Kernel-5_35-4_79_2_321:4.1.2.1
	Kernel-5_35-4_79_2_320:4.1.2.1
	Kernel-5_35-4_79_2_319:4.1.2.1
	Kernel-5_35-4_79_2_318:4.1.2.1
	Kernel-5_35-4_79_2_317:4.1.2.1
	Kernel-5_35-4_79_2_316:4.1.2.1
	Kernel-5_35-4_79_2_315:4.1.2.1
	Kernel-5_35-4_79_2_314:4.1.2.1
	Kernel-5_35-4_79_2_313:4.1.2.1
	Kernel-5_35-4_79_2_312:4.1.2.1
	Kernel-5_35-4_79_2_311:4.1.2.1
	Kernel-5_35-4_79_2_310:4.1.2.1
	Kernel-5_35-4_79_2_309:4.1.2.1
	Kernel-5_35-4_79_2_308:4.1.2.1
	Kernel-5_35-4_79_2_307:4.1.2.1
	Kernel-5_35-4_79_2_306:4.1.2.1
	Kernel-5_35-4_79_2_305:4.1.2.1
	Kernel-5_35-4_79_2_304:4.1.2.1
	Kernel-5_35-4_79_2_303:4.1.2.1
	Kernel-5_35-4_79_2_302:4.1.2.1
	Kernel-5_35-4_79_2_301:4.1.2.1
	Kernel-5_35-4_79_2_300:4.1.2.1
	Kernel-5_35-4_79_2_299:4.1.2.1
	Kernel-5_35-4_79_2_298:4.1.2.1
	Kernel-5_35-4_79_2_297:4.1.2.1
	Kernel-5_35-4_79_2_296:4.1.2.1
	Kernel-5_35-4_79_2_295:4.1.2.1
	Kernel-5_35-4_79_2_294:4.1.2.1
	Kernel-5_35-4_79_2_293:4.1.2.1
	Kernel-5_35-4_79_2_292:4.1.2.1
	Kernel-5_35-4_79_2_291:4.1.2.1
	Kernel-5_35-4_79_2_290:4.1.2.1
	Kernel-5_35-4_79_2_289:4.1.2.1
	Kernel-5_35-4_79_2_288:4.1.2.1
	Kernel-5_35-4_79_2_287:4.1.2.1
	Kernel-5_35-4_79_2_286:4.1.2.1
	Kernel-5_35-4_79_2_285:4.1.2.1
	Kernel-5_35-4_79_2_284:4.1.2.1
	Kernel-5_35-4_79_2_283:4.1.2.1
	Kernel-5_35-4_79_2_282:4.1.2.1
	Kernel-5_35-4_79_2_281:4.1.2.1
	Kernel-5_35-4_79_2_280:4.1.2.1
	Kernel-5_35-4_79_2_279:4.1.2.1
	Kernel-5_35-4_79_2_278:4.1.2.1
	Kernel-5_35-4_79_2_277:4.1.2.1
	Kernel-5_35-4_79_2_276:4.1.2.1
	Kernel-5_35-4_79_2_275:4.1.2.1
	Kernel-5_35-4_79_2_274:4.1.2.1
	Kernel-5_35-4_79_2_273:4.1.2.1
	Kernel-5_35-4_79_2_272:4.1.2.1
	Kernel-5_35-4_79_2_271:4.1.2.1
	Kernel-5_35-4_79_2_270:4.1.2.1
	Kernel-5_35-4_79_2_269:4.1.2.1
	Kernel-5_35-4_79_2_268:4.1.2.1
	Kernel-5_35-4_79_2_267:4.1.2.1
	Kernel-5_35-4_79_2_266:4.1.2.1
	Kernel-5_35-4_79_2_265:4.1.2.1
	Kernel-5_35-4_79_2_264:4.1.2.1
	Kernel-5_35-4_79_2_263:4.1.2.1
	Kernel-5_35-4_79_2_262:4.1.2.1
	Kernel-5_35-4_79_2_261:4.1.2.1
	Kernel-5_35-4_79_2_260:4.1.2.1
	Kernel-5_35-4_79_2_259:4.1.2.1
	Kernel-5_35-4_79_2_258:4.1.2.1
	Kernel-5_35-4_79_2_257:4.1.2.1
	Kernel-5_35-4_79_2_256:4.1.2.1
	Kernel-5_35-4_79_2_255:4.1.2.1
	Kernel-5_35-4_79_2_254:4.1.2.1
	Kernel-5_35-4_79_2_253:4.1.2.1
	Kernel-5_35-4_79_2_252:4.1.2.1
	Kernel-5_35-4_79_2_251:4.1.2.1
	Kernel-5_35-4_79_2_250:4.1.2.1
	Kernel-5_35-4_79_2_249:4.1.2.1
	Kernel-5_35-4_79_2_248:4.1.2.1
	Kernel-5_35-4_79_2_247:4.1.2.1
	Kernel-5_35-4_79_2_246:4.1.2.1
	Kernel-5_35-4_79_2_245:4.1.2.1
	Kernel-5_35-4_79_2_244:4.1.2.1
	Kernel-5_35-4_79_2_243:4.1.2.1
	Kernel-5_35-4_79_2_242:4.1.2.1
	Kernel-5_35-4_79_2_241:4.1.2.1
	Kernel-5_35-4_79_2_240:4.1.2.1
	Kernel-5_35-4_79_2_239:4.1.2.1
	Kernel-5_35-4_79_2_238:4.1.2.1
	Kernel-5_35-4_79_2_237:4.1.2.1
	Kernel-5_35-4_79_2_236:4.1.2.1
	Kernel-5_35-4_79_2_235:4.1.2.1
	Kernel-5_35-4_79_2_234:4.1.2.1
	Kernel-5_35-4_79_2_233:4.1.2.1
	Kernel-5_35-4_79_2_232:4.1.2.1
	Kernel-5_35-4_79_2_231:4.1.2.1
	Kernel-5_35-4_79_2_230:4.1.2.1
	Kernel-5_35-4_79_2_229:4.1.2.1
	Kernel-5_35-4_79_2_228:4.1.2.1
	Kernel-5_35-4_79_2_227:4.1.2.1
	Kernel-5_35-4_79_2_226:4.1.2.1
	Kernel-5_35-4_79_2_225:4.1.2.1
	Kernel-5_35-4_79_2_224:4.1.2.1
	Kernel-5_35-4_79_2_223:4.1.2.1
	Kernel-5_35-4_79_2_222:4.1.2.1
	Kernel-5_35-4_79_2_221:4.1.2.1
	Kernel-5_35-4_79_2_220:4.1.2.1
	Kernel-5_35-4_79_2_219:4.1.2.1
	Kernel-5_35-4_79_2_218:4.1.2.1
	Kernel-5_35-4_79_2_217:4.1.2.1
	Kernel-5_35-4_79_2_216:4.1.2.1
	Kernel-5_35-4_79_2_215:4.1.2.1
	Kernel-5_35-4_79_2_214:4.1.2.1
	Kernel-5_35-4_79_2_213:4.1.2.1
	Kernel-5_35-4_79_2_212:4.1.2.1
	Kernel-5_35-4_79_2_211:4.1.2.1
	Kernel-5_35-4_79_2_210:4.1.2.1
	Kernel-5_35-4_79_2_209:4.1.2.1
	Kernel-5_35-4_79_2_208:4.1.2.1
	Kernel-5_35-4_79_2_207:4.1.2.1
	Kernel-5_35-4_79_2_206:4.1.2.1
	Kernel-5_35-4_79_2_205:4.1.2.1
	Kernel-5_35-4_79_2_204:4.1.2.1
	Kernel-5_35-4_79_2_203:4.1.2.1
	Kernel-5_35-4_79_2_202:4.1.2.1
	Kernel-5_35-4_79_2_201:4.1.2.1
	Kernel-5_35-4_79_2_200:4.1.2.1
	Kernel-5_35-4_79_2_199:4.1.2.1
	Kernel-5_35-4_79_2_198:4.1.2.1
	Kernel-5_35-4_79_2_197:4.1.2.1
	Kernel-5_35-4_79_2_196:4.1.2.1
	Kernel-5_35-4_79_2_195:4.1.2.1
	Kernel-5_35-4_79_2_194:4.1.2.1
	Kernel-5_35-4_79_2_193:4.1.2.1
	Kernel-5_35-4_79_2_192:4.1.2.1
	Kernel-5_35-4_79_2_191:4.1.2.1
	Kernel-5_35-4_79_2_190:4.1.2.1
	Kernel-5_35-4_79_2_189:4.1.2.1
	Kernel-5_35-4_79_2_188:4.1.2.1
	Kernel-5_35-4_79_2_187:4.1.2.1
	Kernel-5_35-4_79_2_186:4.1.2.1
	Kernel-5_35-4_79_2_185:4.1.2.1
	Kernel-5_35-4_79_2_184:4.1.2.1
	Kernel-5_35-4_79_2_183:4.1.2.1
	Kernel-5_35-4_79_2_182:4.1.2.1
	Kernel-5_35-4_79_2_181:4.1.2.1
	Kernel-5_35-4_79_2_180:4.1.2.1
	Kernel-5_35-4_79_2_179:4.1.2.1
	Kernel-5_35-4_79_2_178:4.1.2.1
	Kernel-5_35-4_79_2_177:4.1.2.1
	Kernel-5_35-4_79_2_176:4.1.2.1
	Kernel-5_35-4_79_2_175:4.1.2.1
	Kernel-5_35-4_79_2_174:4.1.2.1
	Kernel-5_35-4_79_2_173:4.1.2.1
	Kernel-5_35-4_79_2_172:4.1.2.1
	Kernel-5_35-4_79_2_171:4.1.2.1
	Kernel-5_35-4_79_2_170:4.1.2.1
	Kernel-5_35-4_79_2_169:4.1.2.1
	Kernel-5_35-4_79_2_168:4.1.2.1
	Kernel-5_35-4_79_2_167:4.1.2.1
	Kernel-5_35-4_79_2_166:4.1.2.1
	Kernel-5_35-4_79_2_165:4.1.2.1
	RPi_merge:4.1.2.1
	Kernel-5_35-4_79_2_147_2_23:4.1.2.1
	Kernel-5_35-4_79_2_147_2_22:4.1.2.1
	Kernel-5_35-4_79_2_147_2_21:4.1.2.1
	Kernel-5_35-4_79_2_147_2_20:4.1.2.1
	Kernel-5_35-4_79_2_147_2_19:4.1.2.1
	Kernel-5_35-4_79_2_147_2_18:4.1.2.1
	Kernel-5_35-4_79_2_164:4.1.2.1
	Kernel-5_35-4_79_2_163:4.1.2.1
	Kernel-5_35-4_79_2_147_2_17:4.1.2.1
	Kernel-5_35-4_79_2_147_2_16:4.1.2.1
	Kernel-5_35-4_79_2_147_2_15:4.1.2.1
	Kernel-5_35-4_79_2_162:4.1.2.1
	Kernel-5_35-4_79_2_161:4.1.2.1
	Kernel-5_35-4_79_2_147_2_14:4.1.2.1
	Kernel-5_35-4_79_2_147_2_13:4.1.2.1
	Kernel-5_35-4_79_2_160:4.1.2.1
	Kernel-5_35-4_79_2_159:4.1.2.1
	Kernel-5_35-4_79_2_158:4.1.2.1
	Kernel-5_35-4_79_2_157:4.1.2.1
	Kernel-5_35-4_79_2_156:4.1.2.1
	Kernel-5_35-4_79_2_147_2_12:4.1.2.1
	Kernel-5_35-4_79_2_147_2_11:4.1.2.1
	Kernel-5_35-4_79_2_155:4.1.2.1
	Kernel-5_35-4_79_2_147_2_10:4.1.2.1
	Kernel-5_35-4_79_2_154:4.1.2.1
	Kernel-5_35-4_79_2_153:4.1.2.1
	Kernel-5_35-4_79_2_147_2_9:4.1.2.1
	Kernel-5_35-4_79_2_152:4.1.2.1
	Kernel-5_35-4_79_2_151:4.1.2.1
	Kernel-5_35-4_79_2_147_2_8:4.1.2.1
	Kernel-5_35-4_79_2_147_2_7:4.1.2.1
	Kernel-5_35-4_79_2_150:4.1.2.1
	Kernel-5_35-4_79_2_147_2_6:4.1.2.1
	Kernel-5_35-4_79_2_147_2_5:4.1.2.1
	Kernel-5_35-4_79_2_149:4.1.2.1
	Kernel-5_35-4_79_2_147_2_4:4.1.2.1
	Kernel-5_35-4_79_2_147_2_3:4.1.2.1
	Kernel-5_35-4_79_2_148:4.1.2.1
	Kernel-5_35-4_79_2_147_2_2:4.1.2.1
	Kernel-5_35-4_79_2_147_2_1:4.1.2.1
	RPi:4.1.2.1.0.6
	RPi_bp:4.1.2.1
	Kernel-5_35-4_79_2_98_2_52_2_1:4.1.2.1
	alees_Kernel_dev:4.1.2.1.0.4
	alees_Kernel_dev_bp:4.1.2.1
	Kernel-5_35-4_79_2_147:4.1.2.1
	Kernel-5_35-4_79_2_146:4.1.2.1
	Kernel-5_35-4_79_2_145:4.1.2.1
	Kernel-5_35-4_79_2_144:4.1.2.1
	Kernel-5_35-4_79_2_143:4.1.2.1
	Kernel-5_35-4_79_2_142:4.1.2.1
	Kernel-5_35-4_79_2_141:4.1.2.1
	Kernel-5_35-4_79_2_140:4.1.2.1
	Kernel-5_35-4_79_2_139:4.1.2.1
	Kernel-5_35-4_79_2_138:4.1.2.1
	Kernel-5_35-4_79_2_137:4.1.2.1
	Kernel-5_35-4_79_2_136:4.1.2.1
	Kernel-5_35-4_79_2_135:4.1.2.1
	Kernel-5_35-4_79_2_134:4.1.2.1
	Kernel-5_35-4_79_2_133:4.1.2.1
	Kernel-5_35-4_79_2_132:4.1.2.1
	Kernel-5_35-4_79_2_131:4.1.2.1
	Kernel-5_35-4_79_2_130:4.1.2.1
	Kernel-5_35-4_79_2_129:4.1.2.1
	Kernel-5_35-4_79_2_128:4.1.2.1
	Kernel-5_35-4_79_2_127:4.1.2.1
	Kernel-5_35-4_79_2_126:4.1.2.1
	Kernel-5_35-4_79_2_125:4.1.2.1
	Kernel-5_35-4_79_2_124:4.1.2.1
	Kernel-5_35-4_79_2_123:4.1.2.1
	Cortex_merge:4.1.2.1
	Kernel-5_35-4_79_2_122:4.1.2.1
	Kernel-5_35-4_79_2_98_2_54:4.1.2.1
	Kernel-5_35-4_79_2_98_2_53:4.1.2.1
	Kernel-5_35-4_79_2_98_2_52:4.1.2.1
	Kernel-5_35-4_79_2_98_2_51:4.1.2.1
	Kernel-5_35-4_79_2_98_2_50:4.1.2.1
	Kernel-5_35-4_79_2_98_2_49:4.1.2.1
	Kernel-5_35-4_79_2_98_2_48:4.1.2.1
	Kernel-5_35-4_79_2_121:4.1.2.1
	Kernel-5_35-4_79_2_98_2_47:4.1.2.1
	Kernel-5_35-4_79_2_120:4.1.2.1
	Kernel-5_35-4_79_2_98_2_46:4.1.2.1
	Kernel-5_35-4_79_2_119:4.1.2.1
	Kernel-5_35-4_79_2_98_2_45:4.1.2.1
	Kernel-5_35-4_79_2_98_2_44:4.1.2.1
	Kernel-5_35-4_79_2_118:4.1.2.1
	Kernel-5_35-4_79_2_98_2_43:4.1.2.1
	Kernel-5_35-4_79_2_117:4.1.2.1
	Kernel-5_35-4_79_2_116:4.1.2.1
	Kernel-5_35-4_79_2_98_2_42:4.1.2.1
	Kernel-5_35-4_79_2_115:4.1.2.1
	Kernel-5_35-4_79_2_98_2_41:4.1.2.1
	Kernel-5_35-4_79_2_98_2_40:4.1.2.1
	Kernel-5_35-4_79_2_114:4.1.2.1
	Kernel-5_35-4_79_2_98_2_39:4.1.2.1
	Kernel-5_35-4_79_2_98_2_38:4.1.2.1
	Kernel-5_35-4_79_2_113:4.1.2.1
	Kernel-5_35-4_79_2_112:4.1.2.1
	Kernel-5_35-4_79_2_98_2_37:4.1.2.1
	Kernel-5_35-4_79_2_98_2_36:4.1.2.1
	Kernel-5_35-4_79_2_98_2_35:4.1.2.1
	Kernel-5_35-4_79_2_98_2_34:4.1.2.1
	Kernel-5_35-4_79_2_98_2_33:4.1.2.1
	Kernel-5_35-4_79_2_98_2_32:4.1.2.1
	Kernel-5_35-4_79_2_98_2_31:4.1.2.1
	Kernel-5_35-4_79_2_98_2_30:4.1.2.1
	Kernel-5_35-4_79_2_98_2_29:4.1.2.1
	Kernel-5_35-4_79_2_98_2_28:4.1.2.1
	Kernel-5_35-4_79_2_98_2_27:4.1.2.1
	Kernel-5_35-4_79_2_98_2_26:4.1.2.1
	Kernel-5_35-4_79_2_111:4.1.2.1
	Kernel-5_35-4_79_2_98_2_25:4.1.2.1
	Kernel-5_35-4_79_2_98_2_24:4.1.2.1
	Kernel-5_35-4_79_2_98_2_23:4.1.2.1
	Kernel-5_35-4_79_2_110:4.1.2.1
	Kernel-5_35-4_79_2_98_2_22:4.1.2.1
	Kernel-5_35-4_79_2_109:4.1.2.1
	Kernel-5_35-4_79_2_98_2_21:4.1.2.1
	Kernel-5_35-4_79_2_98_2_20:4.1.2.1
	Kernel-5_35-4_79_2_108:4.1.2.1
	Kernel-5_35-4_79_2_107:4.1.2.1
	Kernel-5_35-4_79_2_98_2_19:4.1.2.1
	Kernel-5_35-4_79_2_98_2_18:4.1.2.1
	Kernel-5_35-4_79_2_98_2_17:4.1.2.1
	Kernel-5_35-4_79_2_98_2_16:4.1.2.1
	Kernel-5_35-4_79_2_98_2_15:4.1.2.1
	Kernel-5_35-4_79_2_106:4.1.2.1
	Kernel-5_35-4_79_2_105:4.1.2.1
	Kernel-5_35-4_79_2_104:4.1.2.1
	Kernel-5_35-4_79_2_98_2_14:4.1.2.1
	Kernel-5_35-4_79_2_98_2_13:4.1.2.1
	Kernel-5_35-4_79_2_98_2_12:4.1.2.1
	Kernel-5_35-4_79_2_98_2_11:4.1.2.1
	Kernel-5_35-4_79_2_98_2_10:4.1.2.1
	Kernel-5_35-4_79_2_98_2_9:4.1.2.1
	Kernel-5_35-4_79_2_103:4.1.2.1
	Kernel-5_35-4_79_2_102:4.1.2.1
	Kernel-5_35-4_79_2_98_2_8:4.1.2.1
	Kernel-5_35-4_79_2_98_2_7:4.1.2.1
	Kernel-5_35-4_79_2_98_2_6:4.1.2.1
	Kernel-5_35-4_79_2_98_2_5:4.1.2.1
	Kernel-5_35-4_79_2_98_2_4:4.1.2.1
	Kernel-5_35-4_79_2_101:4.1.2.1
	Kernel-5_35-4_79_2_100:4.1.2.1
	Kernel-5_35-4_79_2_99:4.1.2.1
	Kernel-5_35-4_79_2_98_2_3:4.1.2.1
	Kernel-5_35-4_79_2_98_2_2:4.1.2.1
	Kernel-5_35-4_79_2_98_2_1:4.1.2.1
	Cortex:4.1.2.1.0.2
	Cortex_bp:4.1.2.1
	Kernel-5_35-4_79_2_98:4.1.2.1
	Kernel-5_35-4_79_2_97:4.1.2.1
	Kernel-5_35-4_79_2_96:4.1.2.1
	Kernel-5_35-4_79_2_95:4.1.2.1
	Kernel-5_35-4_79_2_94:4.1.2.1
	Kernel-5_35-4_79_2_93:4.1.2.1
	Kernel-5_35-4_79_2_92:4.1.2.1
	Kernel-5_35-4_79_2_91:4.1.2.1
	Kernel-5_35-4_79_2_90:4.1.2.1
	Kernel-5_35-4_79_2_89:4.1.2.1
	Kernel-5_35-4_79_2_88:4.1.2.1
	Kernel-5_35-4_79_2_87:4.1.2.1
	Kernel-5_35-4_79_2_86:4.1.2.1
	Kernel-5_35-4_79_2_85:4.1.2.1
	Kernel-5_35-4_79_2_84:4.1.2.1
	Kernel-5_35-4_79_2_83:4.1.2.1
	Kernel-5_35-4_79_2_82:4.1.2.1
	Kernel-5_35-4_79_2_81:4.1.2.1
	Kernel-5_35-4_79_2_80:4.1.2.1
	Kernel-5_35-4_79_2_79:4.1.2.1
	Kernel-5_35-4_79_2_78:4.1.2.1
	Kernel-5_35-4_79_2_77:4.1.2.1
	RO_5_07:4.1.2.1
	Kernel-5_35-4_79_2_76:4.1.2.1
	Kernel-5_35-4_79_2_75:4.1.2.1
	Kernel-5_35-4_79_2_74:4.1.2.1
	Kernel-5_35-4_79_2_73:4.1.2.1
	Kernel-5_35-4_79_2_72:4.1.2.1
	Kernel-5_35-4_79_2_71:4.1.2.1
	Kernel-5_35-4_79_2_70:4.1.2.1
	Kernel-5_35-4_79_2_69:4.1.2.1
	Kernel-5_35-4_79_2_68:4.1.2.1
	Kernel-5_35-4_79_2_67:4.1.2.1
	Kernel-5_35-4_79_2_66:4.1.2.1
	Kernel-5_35-4_79_2_65:4.1.2.1
	Kernel-5_35-4_79_2_64:4.1.2.1
	Kernel-5_35-4_79_2_63:4.1.2.1
	Kernel-5_35-4_79_2_62:4.1.2.1
	Kernel-5_35-4_79_2_61:4.1.2.1
	Kernel-5_35-4_79_2_60:4.1.2.1
	Kernel-5_35-4_79_2_59:4.1.2.1
	Kernel-5_35-4_79_2_58:4.1.2.1
	Kernel-5_35-4_79_2_57:4.1.2.1
	Kernel-5_35-4_79_2_56:4.1.2.1
	Kernel-5_35-4_79_2_55:4.1.2.1
	Kernel-5_35-4_79_2_54:4.1.2.1
	Kernel-5_35-4_79_2_53:4.1.2.1
	Kernel-5_35-4_79_2_52:4.1
	Kernel-5_35-4_79_2_51:4.1
	Kernel-5_35-4_79_2_50:4.1
	Kernel-5_35-4_79_2_49:4.1
	Kernel-5_35-4_79_2_48:4.1
	Kernel-5_47:4.1
	Kernel-5_46-4_90_2_1:4.1
	nbingham_Kernel_FastNC_dev_bp:4.1
	nbingham_Kernel_FastNC_dev:4.1.0.6
	Kernel-5_46:4.1
	Kernel-5_45:4.1
	Kernel-5_35-4_79_2_47:4.1
	Kernel-5_35-4_79_2_46:4.1
	Kernel-5_35-4_79_2_45:4.1
	Kernel-5_35-4_79_2_44:4.1
	Kernel-5_35-4_79_2_25_2_2:4.1
	Kernel-5_35-4_79_2_43:4.1
	Kernel-5_35-4_79_2_42:4.1
	Kernel-5_35-4_79_2_41:4.1
	Kernel-5_35-4_79_2_40:4.1
	Kernel-5_35-4_79_2_39:4.1
	Kernel-5_35-4_79_2_38:4.1
	Kernel-5_35-4_79_2_37:4.1
	Kernel-5_35-4_79_2_36:4.1
	Kernel-5_35-4_79_2_35:4.1
	Kernel-5_35-4_79_2_34:4.1
	Kernel-5_35-4_79_2_33:4.1
	Kernel-5_35-4_79_2_32:4.1
	Kernel-5_44:4.1
	Kernel-5_35-4_79_2_25_2_1:4.1
	Kernel-5_43:4.1
	Kernel-5_35-4_79_2_31:4.1
	Kernel-5_35-4_79_2_30:4.1
	Kernel-5_35-4_79_2_29:4.1
	Kernel-5_35-4_79_2_28:4.1
	Kernel-5_35-4_79_2_27:4.1
	Kernel-5_35-4_79_2_26:4.1
	Kernel-5_42:4.1
	Kernel-5_41:4.1
	Kernel-5_40:4.1
	Kernel-5_35-4_79_2_25:4.1
	Kernel-5_35-4_79_2_24:4.1
	Kernel-5_35-4_79_2_23:4.1
	Kernel-5_35-4_79_2_22:4.1
	Kernel-5_35-4_79_2_21:4.1
	Kernel-5_35-4_79_2_20:4.1
	Kernel-5_35-4_79_2_19:4.1
	Kernel-5_35-4_79_2_18:4.1
	Kernel-5_35-4_79_2_17:4.1
	Kernel-5_35-4_79_2_16:4.1
	Kernel-5_35-4_79_2_15:4.1
	Kernel-5_35-4_79_2_14:4.1
	Kernel-5_39:4.1
	Kernel-5_38:4.1
	Kernel-5_35-4_79_2_13:4.1
	Kernel-5_35-4_79_2_12:4.1
	Kernel-5_35-4_79_2_11:4.1
	Kernel-5_37:4.1
	Kernel-5_35-4_79_2_10:4.1
	Kernel-5_35-4_79_2_9:4.1
	Kernel-5_36:4.1
	Kernel-5_35-4_79_2_8:4.1
	Kernel-5_35-4_79_2_7:4.1
	Kernel-5_35-4_79_2_6:4.1
	Kernel-5_35-4_79_2_5:4.1
	Kernel-5_35-4_79_2_4:4.1
	Kernel-5_35-4_79_2_3:4.1
	Kernel-5_35-4_79_2_2:4.1
	dellis_autobuild_BaseSW:4.1
	Kernel-5_35-4_79_2_1:4.1
	HAL:4.1.0.2
	Kernel-5_35:4.1
	Kernel-5_34:4.1
	Kernel-5_33:4.1
	Kernel-5_32:4.1
	Kernel-5_31:4.1
	dcotton_autobuild_BaseSW:4.1
	Kernel-5_30:4.1;
locks; strict;
comment	@# @;


4.2
date	2016.06.30.20.07.33;	author jlee;	state Exp;
branches;
next	4.1;
commitid	IWoXxARWeuLDOwcz;

4.1
date	2000.06.28.16.12.26;	author bavison;	state Exp;
branches
	4.1.2.1;
next	;

4.1.2.1
date	2002.12.18.22.18.32;	author bavison;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@  The new typeface is designed on a 16x20 grid (previously we had used 8x10),
  so it uses a screen resolution of 640x500 pixels (rather than 320x250).
  Since we have been unable to source a genuine teletext font, and since
  examination of a BBC Micro suggests that the genuine font may not have been
  a power-of-2 pixels wide, I have designed one specially, based upon the one
  supplied in Zap distributions (a 12x20 font). Rather than increase the
  amount of workspace that the kernel requires for cacheing graphic
  characters, it now generates them on the fly, as they are required; this
  should only add about 25% to their rendering time.
  
  The new VDU 23 sequences are as follows:
  
  VDU 23,18,0,mode,0,0,0,0,0,0
    Switch transparency mode
      mode = 0: "Text" mode: the whole display is set opaque
      mode = 1: "Mix" mode: foreground colours, and both foreground and
        background of boxed text are opaque; non-boxed background colours are
        all transparent
      mode = 2: "Box" mode: boxed regions are opaque, others are transparent
      mode = 3: "TV" mode: the whole display is set transparent
    Default is mode = 0.
  
  VDU 23,18,1,suspend,0,0,0,0,0,0
    Suspend or resume bitmap updates
    This call allows an application to request that the kernel suspends
    updates to the framebuffer bitmap. This allows for a significant speed
    increase in the rendering time for a large amount of text, for example
    when redrawing a complete teletext page, because each time you plot a
    single character, it can cause the whole of the rest of the line to be
    re-rendered. When you switch out of suspend mode, the whole screen is
    refreshed in a single pass. Note that the appearance of the display is
    undefined is you cause a hardware scroll while in suspend mode.
      suspend = 0: screen update is enabled
      suspend = 1: screen update is suspended
    Default is suspend = 0.
  
  VDU 23,18,2,reveal,0,0,0,0,0,0
    Reveal/conceal
      reveal = 0: characters between the Conceal control code and the next
        colour control code are replaced by spaces
      reveal = 1: all characters are displayed
    Default is reveal = 0.
  
  VDU 23,18,3,black_enable,0,0,0,0,0,0
    Enable/disable black foreground colour control codes
      black_enable = 0: control codes &80 and &90 do nothing
      black_enable = 1: control code &80 selects black text, control code
        &90 selects black graphics
    Default is black_enable = 0.
  
  I have performed some timing tests on the rendering of complete teletext
  pages grabbed from the teletext server. These show that the new code
  generally imposes a 2x speed hit. However, when using the VDU 23,18,1
  suspend function, this improves to a 20% speed increase when compared to
  the old low-resolution code. Better still, because the framebuffer is only
  being updated for the final stage of this process, the screen *appears* to
  be updated some 3x faster than with the old code!
  
  A comment on the VDU variable Log2BPC is in order: in previous kernels,
  this was able unambiguously to refer to both the framebuffer width of a
  character in bytes, and the framebuffer width of an "addressable pixel" in
  bits; this no longer works with the 16-pixel wide teletext font. Bearing
  in mind that future kernels may support Unicode system fonts where the
  width varies from character to character, I have chosen to fix Log2BPC to
  the "addressable pixel" definition.
@


4.1
log
@  Added compile-time support for full-resolution teletext characters in
  teletext emulation mode (MODE 7) for that authentic BBC Micro feel.
  Also introduced a few useful teletext control features via VDU 23,18.
  Unrelatedly, fixed *ScreenLoad to work for interlaced displays.

Detail:
  The new typeface is designed on a 16x20 grid (previously we had used 8x10),
  so it uses a screen resolution of 640x500 pixels (rather than 320x250).
  Since we have been unable to source a genuine teletext font, and since
  examination of a BBC Micro suggests that the genuine font may not have been
  a power-of-2 pixels wide, I have designed one specially, based upon the one
  supplied in Zap distributions (a 12x20 font). Rather than increase the
  amount of workspace that the kernel requires for cacheing graphic
  characters, it now generates them on the fly, as they are required; this
  should only add about 25% to their rendering time.

  The new VDU 23 sequences are as follows:

  VDU 23,18,0,mode,0,0,0,0,0,0
    Switch transparency mode
      mode = 0: "Text" mode: the whole display is set opaque
      mode = 1: "Mix" mode: foreground colours, and both foreground and
        background of boxed text are opaque; non-boxed background colours are
        all transparent
      mode = 2: "Box" mode: boxed regions are opaque, others are transparent
      mode = 3: "TV" mode: the whole display is set transparent
    Default is mode = 0.

  VDU 23,18,1,suspend,0,0,0,0,0,0
    Suspend or resume bitmap updates
    This call allows an application to request that the kernel suspends
    updates to the framebuffer bitmap. This allows for a significant speed
    increase in the rendering time for a large amount of text, for example
    when redrawing a complete teletext page, because each time you plot a
    single character, it can cause the whole of the rest of the line to be
    re-rendered. When you switch out of suspend mode, the whole screen is
    refreshed in a single pass. Note that the appearance of the display is
    undefined is you cause a hardware scroll while in suspend mode.
      suspend = 0: screen update is enabled
      suspend = 1: screen update is suspended
    Default is suspend = 0.

  VDU 23,18,2,reveal,0,0,0,0,0,0
    Reveal/conceal
      reveal = 0: characters between the Conceal control code and the next
        colour control code are replaced by spaces
      reveal = 1: all characters are displayed
    Default is reveal = 0.

  VDU 23,18,3,black_emable,0,0,0,0,0,0
    Enable/disable black foreground colour control codes
      black_enable = 0: control codes &80 and &90 do nothing
      black_enable = 1: control code &80 selects black text, control code
        &90 selects black graphics
    Default is black_enable = 0.

  I have performed some timing tests on the rendering of complete teletext
  pages grabbed from the teletext server. These show that the new code
  generally imposes a 2x speed hit. However, when using the VDU 23,18,1
  suspend function, this improves to a 20% speed increase when compared to
  the old low-resolution code. Better still, because the framebuffer is only
  being updated for the final stage of this process, the screen *appears* to
  be updated some 3x faster than with the old code!

  A comment on the VDU variable Log2BPC is in order: in previous kernels,
  this was able unambiguously to refer to both the framebuffer width of a
  character in bytes, and the framebuffer width of an "addressable pixel" in
  bits; this no longer works with the 16-pixel wide teletext font. Bearing
  in mind that future kernels may support Unicode system fonts where the
  width varies from character to character, I have chosen to fix Log2BPC to
  the "addressable pixel" definition.

Admin:
  Requires HdrSrc 0.89 and (for non-desktop builds) Interlace 0.61. A monitor
  definition file containing a definition for a 640x500 screen mode is also
  required; version 0.40 of ModeFiles contains a suitable mode for STB-400.

  Tested fairly rigourously on an Ursula build, a Lazarus build and an
  STB-400 build, using genuine teletext pages and Yellow River Kingdom.

Version 5.30. Tagged as 'Kernel-5_30'
@
text
@d44 1
a44 1
  VDU 23,18,3,black_emable,0,0,0,0,0,0
@


4.1.2.1
log
@Added 256-colour version of the (high-resolution only) teletext code,
and support for teletext when hardware scroll is disabled. Both are required
for Tungsten.
Turned off the module init/final service calls, since we still don't have an
allocation for them.
Upped the OS version number to 5.01.

Version 5.35, 4.79.2.53. Tagged as 'Kernel-5_35-4_79_2_53'
@
text
@d44 1
a44 1
  VDU 23,18,3,black_enable,0,0,0,0,0,0
@

