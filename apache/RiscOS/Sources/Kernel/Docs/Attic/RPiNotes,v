head	1.1;
access;
symbols
	Kernel-5_35-4_79_2_147_2_19:1.1.4.2
	Kernel-5_35-4_79_2_147_2_18:1.1.4.2
	Kernel-5_35-4_79_2_147_2_17:1.1.4.2
	Kernel-5_35-4_79_2_147_2_16:1.1.4.2
	Kernel-5_35-4_79_2_147_2_15:1.1.4.2
	Kernel-5_35-4_79_2_147_2_14:1.1.4.2
	Kernel-5_35-4_79_2_147_2_13:1.1.4.2
	Kernel-5_35-4_79_2_147_2_12:1.1.4.2
	Kernel-5_35-4_79_2_147_2_11:1.1.4.2
	Kernel-5_35-4_79_2_147_2_10:1.1.4.2
	Kernel-5_35-4_79_2_147_2_9:1.1.4.2
	Kernel-5_35-4_79_2_147_2_8:1.1.4.2
	Kernel-5_35-4_79_2_147_2_7:1.1.4.2
	Kernel-5_35-4_79_2_147_2_6:1.1.4.2
	Kernel-5_35-4_79_2_147_2_5:1.1.4.2
	Kernel-5_35-4_79_2_147_2_4:1.1.4.2
	Kernel-5_35-4_79_2_147_2_3:1.1.4.2
	Kernel-5_35-4_79_2_147_2_2:1.1.4.2
	Kernel-5_35-4_79_2_147_2_1:1.1.4.2
	RPi:1.1.0.4
	Kernel-5_35-4_79_2_98_2_52_2_1:1.1.2.1
	alees_Kernel_dev:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2012.05.10.03.09.45;	author bavison;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;
commitid	HTVG5Da5tRqSM74w;

1.1.2.1
date	2012.05.10.03.09.45;	author bavison;	state Exp;
branches;
next	;
commitid	HTVG5Da5tRqSM74w;

1.1.4.1
date	2012.05.10.03.09.45;	author bavison;	state dead;
branches;
next	1.1.4.2;
commitid	kuJoT3AcfB16T74w;

1.1.4.2
date	2012.05.10.03.27.53;	author bavison;	state Exp;
branches;
next	1.1.4.3;
commitid	kuJoT3AcfB16T74w;

1.1.4.3
date	2012.09.07.23.05.49;	author jlee;	state dead;
branches;
next	;
commitid	Ik0jMROsIiH5yEjw;


desc
@@


1.1
log
@file RPiNotes was initially added on branch alees_Kernel_dev.
@
text
@@


1.1.4.1
log
@file RPiNotes was added on branch RPi on 2012-05-10 03:27:53 +0000
@
text
@@


1.1.4.2
log
@  Merge of Raspberry Pi support code against latest kernel
Detail:
  This is a new branch from the current tip of the HAL branch, incorporating
  the changes received from Adrian Lees. The same caveats apply - this is a
  work in progress and will not work on any other platform at present.
Admin:
  Builds, but not tested.

Version 5.35, 4.79.2.147.2.1. Tagged as 'Kernel-5_35-4_79_2_147_2_1'
@
text
@a0 36
Things remaining to be tidied:

 - The starting in a non-numbered video mode; in s.vdu. Code deliberately
   bodged (and flagged with !!!) to force starting in 1920x1080x32bpp.
   I guess any HAL_VideoFeatures call that returns inability to handle a
   <= 8bpp mode might be a way to activate it? Then I guess the HAL needs to
   suggest a suitable default resolution.

   Alternatively, with later start.elf images perhaps we will be able to run
   in lower resolutions when booting.

 - There's code surrounding ARM_Analyse and particularly EvaluateCache
   where it didn't determine the correct cachetype and cachelinelen
   for this ARM. I've not tidied this properly yet; it should be obvious
   what's required.

      ARM ID reg &410FB767
      MRC 15,1,R0,C0,C0,1
        cache info = &1D152152
        ARMv6 format...ok

   I'm not sure who's best-placed to sort this cleanly; my knowledge of
   ARMs from that era is not extensive...I'd have to study the ARM ARM
   to ascertain the 'correct' way to determine cache properties.

 - The code in vdudriver that reads the framestore properties requires
   a GraphicsV claimant if an external framestore is required. I can
   knock up a simple asm module to do this, or we can switch to an
   internal framestore if that can be made to work. I like the latter
   idea because it gives us 'hardware scrolling' and possibly the
   screen cacheing (SA), both of which would benefit us with the
   currently unaccelerated display.

 - the centisecond timer interrupt currently needs to
   be a 'pretend Vsync' handler too at the moment. I'm unsure how you'd
   like to go about having this workaround used for R-Pi only
@


1.1.4.3
log
@Clean up remaining kernel hacks
Detail:
  Docs/RPiNotes - Deleted, contents no longer relevant
  s/HAL, s/Kernel, s/vdu/vduswis, s/pmf/key - Cleaned up debug code
  s/NewIRQs - No need to piggy back on timer 0 IRQ to generate a fake VSync; PushModeInfo already claims/releases TickerV as appropriate if video driver doesn't provide a VSync IRQ.
  s/NewReset - Re-enable LookForHALRTC call, the stack imbalance bug was fixed before the Pi changes were merged in
  s/vdu/vducursoft - Streamline PostWrchCursor a bit by only preserving R14 around RestorePointer if the software pointer is in use
  s/vdu/vdudriver - Amend ModeChangeSub improvements to ensure old external framestore handling logic is used if driver doesn't support framestore growth/realloc
Admin:
  Tested on Raspberry Pi with high processor vectors
  Kernel now looks to be in a good state for merging back into HAL branch
  Note - Software mouse pointer support in vducursoft only checks HALVideoFeatures, so doesn't take into account the capabilities of any GraphicsV driver that may be in use.


Version 5.35, 4.79.2.147.2.20. Tagged as 'Kernel-5_35-4_79_2_147_2_20'
@
text
@@


1.1.2.1
log
@  Support for Raspberry Pi / BCM2835
Detail:
  Falls into two main areas: graphics support and ARM11 core support.
  A work in progress - in many cases the code changes need to be replaced
  with an alternative mechanism which will permit the kernel to still function
  on other platforms. Adrian marked these with "!!!" comments - I have added
  ! directives as well so that they don't get forgotten about.
Admin:
  Changes received from Adrian Lees. This revision represents the code largely
  as delivered, and is placed on its own branch (forked off from the version
  from which he worked). It is intended for reference. It doesn't build against
  current headers - this is likely to require a merge with the other changes
  to the kernel since that time.

Version 5.35, 4.79.2.98.2.52.2.1. Tagged as 'Kernel-5_35-4_79_2_98_2_52_2_1'
@
text
@a0 36
Things remaining to be tidied:

 - The starting in a non-numbered video mode; in s.vdu. Code deliberately
   bodged (and flagged with !!!) to force starting in 1920x1080x32bpp.
   I guess any HAL_VideoFeatures call that returns inability to handle a
   <= 8bpp mode might be a way to activate it? Then I guess the HAL needs to
   suggest a suitable default resolution.

   Alternatively, with later start.elf images perhaps we will be able to run
   in lower resolutions when booting.

 - There's code surrounding ARM_Analyse and particularly EvaluateCache
   where it didn't determine the correct cachetype and cachelinelen
   for this ARM. I've not tidied this properly yet; it should be obvious
   what's required.

      ARM ID reg &410FB767
      MRC 15,1,R0,C0,C0,1
        cache info = &1D152152
        ARMv6 format...ok

   I'm not sure who's best-placed to sort this cleanly; my knowledge of
   ARMs from that era is not extensive...I'd have to study the ARM ARM
   to ascertain the 'correct' way to determine cache properties.

 - The code in vdudriver that reads the framestore properties requires
   a GraphicsV claimant if an external framestore is required. I can
   knock up a simple asm module to do this, or we can switch to an
   internal framestore if that can be made to work. I like the latter
   idea because it gives us 'hardware scrolling' and possibly the
   screen cacheing (SA), both of which would benefit us with the
   currently unaccelerated display.

 - the centisecond timer interrupt currently needs to
   be a 'pretend Vsync' handler too at the moment. I'm unsure how you'd
   like to go about having this workaround used for R-Pi only
@

