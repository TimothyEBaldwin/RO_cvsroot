head	1.3;
access;
symbols
	Kernel-5_50:1.2
	Kernel-5_49:1.2
	HAL_merge:1.2
	Kernel-5_48:1.2
	Kernel-5_35-4_79_2_327:1.2
	Kernel-5_35-4_79_2_326:1.2
	Kernel-5_35-4_79_2_325:1.2
	Kernel-5_35-4_79_2_324:1.2
	Kernel-5_35-4_79_2_323:1.2
	Kernel-5_35-4_79_2_322:1.2
	Kernel-5_35-4_79_2_321:1.2
	Kernel-5_35-4_79_2_320:1.2
	Kernel-5_35-4_79_2_319:1.2
	Kernel-5_35-4_79_2_318:1.2
	Kernel-5_35-4_79_2_317:1.2
	Kernel-5_35-4_79_2_316:1.2
	Kernel-5_35-4_79_2_315:1.2
	Kernel-5_35-4_79_2_314:1.2
	Kernel-5_35-4_79_2_313:1.2
	Kernel-5_35-4_79_2_312:1.2
	Kernel-5_35-4_79_2_311:1.2
	Kernel-5_35-4_79_2_310:1.2
	Kernel-5_35-4_79_2_309:1.2
	Kernel-5_35-4_79_2_308:1.2
	Kernel-5_35-4_79_2_307:1.2
	Kernel-5_35-4_79_2_306:1.2
	Kernel-5_35-4_79_2_305:1.2
	Kernel-5_35-4_79_2_304:1.2
	Kernel-5_35-4_79_2_303:1.2
	Kernel-5_35-4_79_2_302:1.2
	Kernel-5_35-4_79_2_301:1.2
	Kernel-5_35-4_79_2_300:1.2
	Kernel-5_35-4_79_2_299:1.2
	Kernel-5_35-4_79_2_298:1.2
	Kernel-5_35-4_79_2_297:1.2
	Kernel-5_35-4_79_2_296:1.2
	Kernel-5_35-4_79_2_295:1.2
	Kernel-5_35-4_79_2_294:1.2
	Kernel-5_35-4_79_2_293:1.2
	Kernel-5_35-4_79_2_292:1.2
	Kernel-5_35-4_79_2_291:1.2
	Kernel-5_35-4_79_2_290:1.2
	Kernel-5_35-4_79_2_289:1.2
	Kernel-5_35-4_79_2_288:1.2
	Kernel-5_35-4_79_2_287:1.2
	Kernel-5_35-4_79_2_286:1.2
	Kernel-5_35-4_79_2_285:1.2
	Kernel-5_35-4_79_2_284:1.2
	Kernel-5_35-4_79_2_283:1.2
	Kernel-5_35-4_79_2_282:1.2
	Kernel-5_35-4_79_2_281:1.2
	Kernel-5_35-4_79_2_280:1.2
	Kernel-5_35-4_79_2_279:1.2
	Kernel-5_35-4_79_2_278:1.2
	Kernel-5_35-4_79_2_277:1.2
	Kernel-5_35-4_79_2_276:1.2
	Kernel-5_35-4_79_2_275:1.2
	Kernel-5_35-4_79_2_274:1.2
	Kernel-5_35-4_79_2_273:1.2
	Kernel-5_35-4_79_2_272:1.2
	Kernel-5_35-4_79_2_271:1.2
	Kernel-5_35-4_79_2_270:1.2
	Kernel-5_35-4_79_2_269:1.2
	Kernel-5_35-4_79_2_268:1.2
	Kernel-5_35-4_79_2_267:1.2
	Kernel-5_35-4_79_2_266:1.2
	Kernel-5_35-4_79_2_265:1.2
	Kernel-5_35-4_79_2_264:1.2
	Kernel-5_35-4_79_2_263:1.2
	Kernel-5_35-4_79_2_262:1.2
	Kernel-5_35-4_79_2_261:1.2
	Kernel-5_35-4_79_2_260:1.2
	Kernel-5_35-4_79_2_259:1.2
	Kernel-5_35-4_79_2_258:1.2
	Kernel-5_35-4_79_2_257:1.2
	Kernel-5_35-4_79_2_256:1.2
	Kernel-5_35-4_79_2_255:1.2
	Kernel-5_35-4_79_2_254:1.2
	Kernel-5_35-4_79_2_253:1.2
	Kernel-5_35-4_79_2_252:1.2
	Kernel-5_35-4_79_2_251:1.2
	Kernel-5_35-4_79_2_250:1.2
	Kernel-5_35-4_79_2_249:1.2
	Kernel-5_35-4_79_2_248:1.2
	Kernel-5_35-4_79_2_247:1.2
	Kernel-5_35-4_79_2_246:1.2
	Kernel-5_35-4_79_2_245:1.2
	Kernel-5_35-4_79_2_244:1.2
	Kernel-5_35-4_79_2_243:1.2
	Kernel-5_35-4_79_2_242:1.2
	Kernel-5_35-4_79_2_241:1.2
	Kernel-5_35-4_79_2_240:1.2
	Kernel-5_35-4_79_2_239:1.2
	Kernel-5_35-4_79_2_238:1.2
	Kernel-5_35-4_79_2_237:1.2
	Kernel-5_35-4_79_2_236:1.2
	Kernel-5_35-4_79_2_235:1.2
	Kernel-5_35-4_79_2_234:1.2
	Kernel-5_35-4_79_2_233:1.2
	Kernel-5_35-4_79_2_232:1.2
	Kernel-5_35-4_79_2_231:1.2
	Kernel-5_35-4_79_2_230:1.2
	Kernel-5_35-4_79_2_229:1.2
	Kernel-5_35-4_79_2_228:1.2
	Kernel-5_35-4_79_2_227:1.2
	Kernel-5_35-4_79_2_226:1.2
	Kernel-5_35-4_79_2_225:1.2
	Kernel-5_35-4_79_2_224:1.2
	Kernel-5_35-4_79_2_223:1.2
	Kernel-5_35-4_79_2_222:1.2
	Kernel-5_35-4_79_2_221:1.2
	Kernel-5_35-4_79_2_220:1.2
	Kernel-5_35-4_79_2_219:1.2
	Kernel-5_35-4_79_2_218:1.2
	Kernel-5_35-4_79_2_217:1.2
	Kernel-5_35-4_79_2_216:1.2
	Kernel-5_35-4_79_2_215:1.2
	Kernel-5_35-4_79_2_214:1.2
	Kernel-5_35-4_79_2_213:1.2
	Kernel-5_35-4_79_2_212:1.2
	Kernel-5_35-4_79_2_211:1.2
	Kernel-5_35-4_79_2_210:1.2
	Kernel-5_35-4_79_2_209:1.2
	Kernel-5_35-4_79_2_208:1.2
	Kernel-5_35-4_79_2_207:1.2
	Kernel-5_35-4_79_2_206:1.2
	Kernel-5_35-4_79_2_205:1.2
	Kernel-5_35-4_79_2_204:1.2
	Kernel-5_35-4_79_2_203:1.2
	Kernel-5_35-4_79_2_202:1.2
	Kernel-5_35-4_79_2_201:1.2
	Kernel-5_35-4_79_2_200:1.2
	Kernel-5_35-4_79_2_199:1.2
	Kernel-5_35-4_79_2_198:1.2
	Kernel-5_35-4_79_2_197:1.2
	Kernel-5_35-4_79_2_196:1.2
	Kernel-5_35-4_79_2_195:1.2
	Kernel-5_35-4_79_2_194:1.2
	Kernel-5_35-4_79_2_193:1.2
	Kernel-5_35-4_79_2_192:1.2
	Kernel-5_35-4_79_2_191:1.2
	Kernel-5_35-4_79_2_190:1.2
	Kernel-5_35-4_79_2_189:1.2
	Kernel-5_35-4_79_2_188:1.2
	Kernel-5_35-4_79_2_187:1.2
	Kernel-5_35-4_79_2_186:1.2
	Kernel-5_35-4_79_2_185:1.2
	Kernel-5_35-4_79_2_184:1.2
	Kernel-5_35-4_79_2_183:1.2
	Kernel-5_35-4_79_2_182:1.2
	Kernel-5_35-4_79_2_181:1.2
	Kernel-5_35-4_79_2_180:1.2
	Kernel-5_35-4_79_2_179:1.2
	Kernel-5_35-4_79_2_178:1.2
	Kernel-5_35-4_79_2_177:1.2
	Kernel-5_35-4_79_2_176:1.2
	Kernel-5_35-4_79_2_175:1.2
	Kernel-5_35-4_79_2_174:1.2
	Kernel-5_35-4_79_2_173:1.2
	Kernel-5_35-4_79_2_172:1.2
	Kernel-5_35-4_79_2_171:1.2
	Kernel-5_35-4_79_2_170:1.2
	Kernel-5_35-4_79_2_169:1.2
	Kernel-5_35-4_79_2_168:1.2
	Kernel-5_35-4_79_2_167:1.2
	Kernel-5_35-4_79_2_166:1.2
	Kernel-5_35-4_79_2_165:1.2
	RPi_merge:1.2
	Kernel-5_35-4_79_2_147_2_23:1.2
	Kernel-5_35-4_79_2_147_2_22:1.2
	Kernel-5_35-4_79_2_147_2_21:1.2
	Kernel-5_35-4_79_2_147_2_20:1.2
	Kernel-5_35-4_79_2_147_2_19:1.2
	Kernel-5_35-4_79_2_147_2_18:1.2
	Kernel-5_35-4_79_2_164:1.2
	Kernel-5_35-4_79_2_163:1.2
	Kernel-5_35-4_79_2_147_2_17:1.2
	Kernel-5_35-4_79_2_147_2_16:1.2
	Kernel-5_35-4_79_2_147_2_15:1.2
	Kernel-5_35-4_79_2_162:1.2
	Kernel-5_35-4_79_2_161:1.2
	Kernel-5_35-4_79_2_147_2_14:1.2
	Kernel-5_35-4_79_2_147_2_13:1.2
	Kernel-5_35-4_79_2_160:1.2
	Kernel-5_35-4_79_2_159:1.2
	Kernel-5_35-4_79_2_158:1.2
	Kernel-5_35-4_79_2_157:1.2
	Kernel-5_35-4_79_2_156:1.2
	Kernel-5_35-4_79_2_147_2_12:1.2
	Kernel-5_35-4_79_2_147_2_11:1.2
	Kernel-5_35-4_79_2_155:1.2
	Kernel-5_35-4_79_2_147_2_10:1.2
	Kernel-5_35-4_79_2_154:1.2
	Kernel-5_35-4_79_2_153:1.2
	Kernel-5_35-4_79_2_147_2_9:1.2
	Kernel-5_35-4_79_2_152:1.2
	Kernel-5_35-4_79_2_151:1.2
	Kernel-5_35-4_79_2_147_2_8:1.2
	Kernel-5_35-4_79_2_147_2_7:1.2
	Kernel-5_35-4_79_2_150:1.2
	Kernel-5_35-4_79_2_147_2_6:1.2
	Kernel-5_35-4_79_2_147_2_5:1.2
	Kernel-5_35-4_79_2_149:1.2
	Kernel-5_35-4_79_2_147_2_4:1.2
	Kernel-5_35-4_79_2_147_2_3:1.2
	Kernel-5_35-4_79_2_148:1.2
	Kernel-5_35-4_79_2_147_2_2:1.2
	Kernel-5_35-4_79_2_147_2_1:1.2
	RPi:1.2.0.12
	RPi_bp:1.2
	Kernel-5_35-4_79_2_98_2_52_2_1:1.2
	alees_Kernel_dev:1.2.0.10
	alees_Kernel_dev_bp:1.2
	Kernel-5_35-4_79_2_147:1.2
	Kernel-5_35-4_79_2_146:1.2
	Kernel-5_35-4_79_2_145:1.2
	Kernel-5_35-4_79_2_144:1.2
	Kernel-5_35-4_79_2_143:1.2
	Kernel-5_35-4_79_2_142:1.2
	Kernel-5_35-4_79_2_141:1.2
	Kernel-5_35-4_79_2_140:1.2
	Kernel-5_35-4_79_2_139:1.2
	Kernel-5_35-4_79_2_138:1.2
	Kernel-5_35-4_79_2_137:1.2
	Kernel-5_35-4_79_2_136:1.2
	Kernel-5_35-4_79_2_135:1.2
	Kernel-5_35-4_79_2_134:1.2
	Kernel-5_35-4_79_2_133:1.2
	Kernel-5_35-4_79_2_132:1.2
	Kernel-5_35-4_79_2_131:1.2
	Kernel-5_35-4_79_2_130:1.2
	Kernel-5_35-4_79_2_129:1.2
	Kernel-5_35-4_79_2_128:1.2
	Kernel-5_35-4_79_2_127:1.2
	Kernel-5_35-4_79_2_126:1.2
	Kernel-5_35-4_79_2_125:1.2
	Kernel-5_35-4_79_2_124:1.2
	Kernel-5_35-4_79_2_123:1.2
	Cortex_merge:1.2
	Kernel-5_35-4_79_2_122:1.2
	Kernel-5_35-4_79_2_98_2_54:1.2
	Kernel-5_35-4_79_2_98_2_53:1.2
	Kernel-5_35-4_79_2_98_2_52:1.2
	Kernel-5_35-4_79_2_98_2_51:1.2
	Kernel-5_35-4_79_2_98_2_50:1.2
	Kernel-5_35-4_79_2_98_2_49:1.2
	Kernel-5_35-4_79_2_98_2_48:1.2
	Kernel-5_35-4_79_2_121:1.2
	Kernel-5_35-4_79_2_98_2_47:1.2
	Kernel-5_35-4_79_2_120:1.2
	Kernel-5_35-4_79_2_98_2_46:1.2
	Kernel-5_35-4_79_2_119:1.2
	Kernel-5_35-4_79_2_98_2_45:1.2
	Kernel-5_35-4_79_2_98_2_44:1.2
	Kernel-5_35-4_79_2_118:1.2
	Kernel-5_35-4_79_2_98_2_43:1.2
	Kernel-5_35-4_79_2_117:1.2
	Kernel-5_35-4_79_2_116:1.2
	Kernel-5_35-4_79_2_98_2_42:1.2
	Kernel-5_35-4_79_2_115:1.2
	Kernel-5_35-4_79_2_98_2_41:1.2
	Kernel-5_35-4_79_2_98_2_40:1.2
	Kernel-5_35-4_79_2_114:1.2
	Kernel-5_35-4_79_2_98_2_39:1.2
	Kernel-5_35-4_79_2_98_2_38:1.2
	Kernel-5_35-4_79_2_113:1.2
	Kernel-5_35-4_79_2_112:1.2
	Kernel-5_35-4_79_2_98_2_37:1.2
	Kernel-5_35-4_79_2_98_2_36:1.2
	Kernel-5_35-4_79_2_98_2_35:1.2
	Kernel-5_35-4_79_2_98_2_34:1.2
	Kernel-5_35-4_79_2_98_2_33:1.2
	Kernel-5_35-4_79_2_98_2_32:1.2
	Kernel-5_35-4_79_2_98_2_31:1.2
	Kernel-5_35-4_79_2_98_2_30:1.2
	Kernel-5_35-4_79_2_98_2_29:1.2
	Kernel-5_35-4_79_2_98_2_28:1.2
	Kernel-5_35-4_79_2_98_2_27:1.2
	Kernel-5_35-4_79_2_98_2_26:1.2
	Kernel-5_35-4_79_2_111:1.2
	Kernel-5_35-4_79_2_98_2_25:1.2
	Kernel-5_35-4_79_2_98_2_24:1.2
	Kernel-5_35-4_79_2_98_2_23:1.2
	Kernel-5_35-4_79_2_110:1.2
	Kernel-5_35-4_79_2_98_2_22:1.2
	Kernel-5_35-4_79_2_109:1.2
	Kernel-5_35-4_79_2_98_2_21:1.2
	Kernel-5_35-4_79_2_98_2_20:1.2
	Kernel-5_35-4_79_2_108:1.2
	Kernel-5_35-4_79_2_107:1.2
	Kernel-5_35-4_79_2_98_2_19:1.2
	Kernel-5_35-4_79_2_98_2_18:1.2
	Kernel-5_35-4_79_2_98_2_17:1.2
	Kernel-5_35-4_79_2_98_2_16:1.2
	Kernel-5_35-4_79_2_98_2_15:1.2
	Kernel-5_35-4_79_2_106:1.2
	Kernel-5_35-4_79_2_105:1.2
	Kernel-5_35-4_79_2_104:1.2
	Kernel-5_35-4_79_2_98_2_14:1.2
	Kernel-5_35-4_79_2_98_2_13:1.2
	Kernel-5_35-4_79_2_98_2_12:1.2
	Kernel-5_35-4_79_2_98_2_11:1.2
	Kernel-5_35-4_79_2_98_2_10:1.2
	Kernel-5_35-4_79_2_98_2_9:1.2
	Kernel-5_35-4_79_2_103:1.2
	Kernel-5_35-4_79_2_102:1.2
	Kernel-5_35-4_79_2_98_2_8:1.2
	Kernel-5_35-4_79_2_98_2_7:1.2
	Kernel-5_35-4_79_2_98_2_6:1.2
	Kernel-5_35-4_79_2_98_2_5:1.2
	Kernel-5_35-4_79_2_98_2_4:1.2
	Kernel-5_35-4_79_2_101:1.2
	Kernel-5_35-4_79_2_100:1.2
	Kernel-5_35-4_79_2_99:1.2
	Kernel-5_35-4_79_2_98_2_3:1.2
	Kernel-5_35-4_79_2_98_2_2:1.2
	Kernel-5_35-4_79_2_98_2_1:1.2
	Cortex:1.2.0.6
	Cortex_bp:1.2
	Kernel-5_35-4_79_2_98:1.2
	Kernel-5_35-4_79_2_97:1.2
	Kernel-5_35-4_79_2_96:1.2
	Kernel-5_35-4_79_2_95:1.2
	Kernel-5_35-4_79_2_94:1.2
	Kernel-5_35-4_79_2_93:1.2
	Kernel-5_35-4_79_2_92:1.2
	Kernel-5_35-4_79_2_91:1.2
	Kernel-5_35-4_79_2_90:1.2
	Kernel-5_35-4_79_2_89:1.2
	Kernel-5_35-4_79_2_88:1.2
	Kernel-5_35-4_79_2_87:1.2
	Kernel-5_35-4_79_2_86:1.2
	Kernel-5_35-4_79_2_85:1.2
	Kernel-5_35-4_79_2_84:1.2
	Kernel-5_35-4_79_2_83:1.2
	Kernel-5_35-4_79_2_82:1.2
	Kernel-5_35-4_79_2_81:1.2
	Kernel-5_35-4_79_2_80:1.2
	Kernel-5_35-4_79_2_79:1.2
	Kernel-5_35-4_79_2_78:1.2
	Kernel-5_35-4_79_2_77:1.2
	RO_5_07:1.2
	Kernel-5_35-4_79_2_76:1.2
	Kernel-5_35-4_79_2_75:1.2
	Kernel-5_35-4_79_2_74:1.2
	Kernel-5_35-4_79_2_73:1.2
	Kernel-5_35-4_79_2_72:1.2
	Kernel-5_35-4_79_2_71:1.2
	Kernel-5_35-4_79_2_70:1.2
	Kernel-5_35-4_79_2_69:1.2
	Kernel-5_35-4_79_2_68:1.2
	Kernel-5_35-4_79_2_67:1.2
	Kernel-5_35-4_79_2_66:1.2
	Kernel-5_35-4_79_2_65:1.2
	Kernel-5_35-4_79_2_64:1.2
	Kernel-5_35-4_79_2_63:1.2
	Kernel-5_35-4_79_2_62:1.2
	Kernel-5_35-4_79_2_61:1.2
	Kernel-5_35-4_79_2_60:1.2
	Kernel-5_35-4_79_2_59:1.2
	Kernel-5_35-4_79_2_58:1.2
	Kernel-5_35-4_79_2_57:1.2
	Kernel-5_35-4_79_2_56:1.2
	Kernel-5_35-4_79_2_55:1.2
	Kernel-5_35-4_79_2_54:1.2
	Kernel-5_35-4_79_2_53:1.2
	Kernel-5_35-4_79_2_52:1.2
	Kernel-5_35-4_79_2_51:1.2
	Kernel-5_35-4_79_2_50:1.2
	Kernel-5_35-4_79_2_49:1.2
	Kernel-5_35-4_79_2_48:1.2
	Kernel-5_47:1.2
	Kernel-5_46-4_90_2_1:1.2
	nbingham_Kernel_FastNC_dev_bp:1.2
	nbingham_Kernel_FastNC_dev:1.2.0.8
	Kernel-5_46:1.2
	Kernel-5_45:1.2
	Kernel-5_35-4_79_2_47:1.2
	Kernel-5_35-4_79_2_46:1.2
	Kernel-5_35-4_79_2_45:1.2
	Kernel-5_35-4_79_2_44:1.2
	Kernel-5_35-4_79_2_25_2_2:1.2
	Kernel-5_35-4_79_2_43:1.2
	Kernel-5_35-4_79_2_42:1.2
	Kernel-5_35-4_79_2_41:1.2
	Kernel-5_35-4_79_2_40:1.2
	Kernel-5_35-4_79_2_39:1.2
	Kernel-5_35-4_79_2_38:1.2
	Kernel-5_35-4_79_2_37:1.2
	Kernel-5_35-4_79_2_36:1.2
	Kernel-5_35-4_79_2_35:1.2
	Kernel-5_35-4_79_2_34:1.2
	Kernel-5_35-4_79_2_33:1.2
	Kernel-5_35-4_79_2_32:1.2
	Kernel-5_44:1.2
	Kernel-5_35-4_79_2_25_2_1:1.2
	Kernel-5_43:1.2
	Kernel-5_35-4_79_2_31:1.2
	Kernel-5_35-4_79_2_30:1.2
	Kernel-5_35-4_79_2_29:1.2
	Kernel-5_35-4_79_2_28:1.2
	Kernel-5_35-4_79_2_27:1.2
	Kernel-5_35-4_79_2_26:1.2
	Kernel-5_42:1.2
	Kernel-5_41:1.2
	Kernel-5_40:1.2
	Kernel-5_35-4_79_2_25:1.2
	Kernel-5_35-4_79_2_24:1.2
	Kernel-5_35-4_79_2_23:1.2
	Kernel-5_35-4_79_2_22:1.2
	Kernel-5_35-4_79_2_21:1.2
	Kernel-5_35-4_79_2_20:1.2
	Kernel-5_35-4_79_2_19:1.2
	Kernel-5_35-4_79_2_18:1.2
	Kernel-5_35-4_79_2_17:1.2
	Kernel-5_35-4_79_2_16:1.2
	Kernel-5_35-4_79_2_15:1.2
	Kernel-5_35-4_79_2_14:1.2
	Kernel-5_39:1.2
	Kernel-5_13-4_52_2_1:1.2
	Bethany:1.2.0.4
	Kernel-5_38:1.2
	Kernel-5_35-4_79_2_13:1.2
	Kernel-5_35-4_79_2_12:1.2
	Kernel-5_35-4_79_2_11:1.2
	Kernel-5_37:1.2
	Kernel-5_35-4_79_2_10:1.2
	Kernel-5_35-4_79_2_9:1.2
	Kernel-5_36:1.2
	Kernel-5_35-4_79_2_8:1.2
	Kernel-5_35-4_79_2_7:1.2
	Kernel-5_35-4_79_2_6:1.2
	Kernel-5_35-4_79_2_5:1.2
	Kernel-5_35-4_79_2_4:1.2
	Kernel-5_35-4_79_2_3:1.2
	Kernel-5_35-4_79_2_2:1.2
	dellis_autobuild_BaseSW:1.2
	Kernel-5_35-4_79_2_1:1.2
	HAL:1.2.0.2
	Kernel-5_35:1.2
	Kernel-5_34:1.2
	Kernel-5_33:1.2
	Kernel-5_32:1.2
	Kernel-5_31:1.2
	Kernel-5_30:1.2
	Kernel-5_29:1.2
	Kernel-5_28:1.2
	Kernel-5_27:1.2
	Kernel-5_26:1.2
	Kernel-5_25:1.2
	Kernel-5_24:1.2
	Kernel-5_23:1.2
	Kernel-5_22:1.2
	sbrodie_sedwards_16Mar2000:1.2
	Kernel-5_21:1.2
	Kernel-5_20:1.2
	Kernel-5_19:1.2
	Kernel-5_18:1.2
	Kernel-5_17:1.2
	Kernel-5_16:1.2
	Kernel-5_15:1.2
	Kernel-5_14:1.2
	Kernel-5_13:1.2
	Kernel-5_12:1.2
	Kernel-5_11:1.2
	Kernel-5_10:1.2
	Kernel-5_09:1.2
	Kernel-5_08:1.2
	Kernel-5_07:1.2
	Kernel-5_06:1.2
	Kernel-5_05:1.2
	Kernel-5_04:1.2
	Kernel-5_03:1.2
	Kernel-5_02:1.2
	Kernel-5_01:1.2
	Kernel-5_00:1.2
	Kernel-4_99:1.2
	Kernel-4_98:1.2
	Kernel-4_97:1.2
	Kernel-4_96:1.2
	Kernel-4_95:1.2
	Kernel-4_94:1.2
	Kernel-4_93:1.2
	Kernel-4_92:1.2
	Kernel-4_91:1.2
	Kernel-4_90:1.2
	dcotton_autobuild_BaseSW:1.2
	Kernel-4_89:1.2
	Kernel-4_88:1.2
	Kernel-4_87:1.2
	Kernel-4_86:1.2
	Kernel-4_85:1.2
	Kernel-4_84:1.2
	Kernel-4_83:1.2
	Kernel-4_82:1.2
	Kernel-4_81:1.2
	Kernel-4_80:1.2
	Kernel-4_79:1.2
	Kernel-4_78:1.2
	Kernel-4_77:1.2
	Kernel-4_76:1.2
	Kernel-4_75:1.2
	Kernel-4_74:1.2
	Kernel-4_73:1.2
	Kernel-4_72:1.2
	Kernel-4_71:1.2
	Kernel-4_70:1.2
	Kernel-4_69:1.2
	Kernel-4_68:1.2
	Kernel-4_63-1_1_2_5:1.1.2.4
	Kernel-4_63-1_1_2_4:1.1.2.4
	Kernel-4_67:1.2
	Kernel-4_66:1.2
	Kernel-4_63-1_1_2_3:1.1.2.4
	Kernel-4_65:1.2
	Spin_merge:1.1.2.4
	Kernel-4_64:1.2
	Kernel-4_63-1_1_2_2:1.1.2.4
	nicke_Kernel_4_62:1.1.2.3
	nturton_v459:1.1.2.3
	nturton_v460:1.1.2.3
	afrost_Boca-1_2-Beta:1.1.2.3
	Spinner_B20_2:1.1.2.3
	Spinner_19_3:1.1.2.3
	Spinner_B18:1.1.2.3
	Spinner_B17:1.1.2.3
	Spinner_B15:1.1.2.3
	Spinner_B14:1.1.2.3
	Spinner_B13:1.1.2.3
	Spinner_B12:1.1.2.3
	Spinner_B10:1.1.2.3
	Spinner_B7:1.1.2.3
	ARTtmp_merge:1.1.2.1
	Spin_3Apr97:1.1.2.1
	ARTtmp:1.1.2.1.0.2
	Spinner:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2016.06.30.20.59.26;	author jlee;	state dead;
branches;
next	1.2;
commitid	skOEjp3ipLHx6xcz;

1.2
date	98.09.30.08.41.50;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.03.14.18.23.42;	author scormie;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.03.14.18.23.43;	author scormie;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.04.28.18.41.13;	author scormie;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	97.04.30.10.30.54;	author scormie;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	98.09.24.12.36.32;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Delete lots of old switches
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * FixCallBacks
  * UseProcessTransfer
  * CanLiveOnROMCard
  * BleedinDaveBell
  * NewStyleEcfs
  * DoVdu23_0_12
  * LCDPowerCtrl
  * HostVdu
  * Print
  * EmulatorSupport
  * TubeInfo
  * AddTubeBashers
  * TubeChar, TubeString, TubeDumpNoStack, TubeNewlNoStack macros
  * FIQDebug
  * VCOstartfix
  * AssemblingArthur (n.b. still defined for safety with anything in Hdr: which uses it, but not used explicitly by the kernel)
  * MouseBufferFix
  * LCDInvert
  * LCDSupport
  * DoInitialiseMode
  * Interruptible32bitModes
  * MouseBufferManager
  * StrongARM (new CacheCleanerHack and InterruptDelay switches added to hdr/Options to cover some functionality that StrongARM previously covered)
  * SAcleanflushbroken
  * StrongARM_POST
  * IrqsInClaimRelease
  * CheckProtectionLink
  * GSWorkspaceInKernelBuffers
  * EarlierReentrancyInDAShrink
  * LongCommandLines
  * ECC
  * NoSPSRcorruption
  * RMTidyDoesNowt
  * RogerEXEY
  * StorkPowerSave
  * DebugForcedReset
  * AssembleKEYV
  * AssemblePointerV
  * ProcessorVectors
  * Keyboard_Type
  Assorted old files have also been deleted.
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.51. Tagged as 'Kernel-5_51'
@
text
@; Copyright 1997 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > s.IICTest

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetCPU
        $GetIO
        $GetMEMC
        $GetMEMM
        $GetVIDC

                    GBLL  med_00001_debug
med_00001_debug     SETL  {FALSE}

AssemblingArthur SETL  {TRUE}

                GBLL    Module
Module          SETL    {FALSE}

                GBLL   ChecksumCMOS
ChecksumCMOS    SETL  {TRUE}

                GBLL    CacheCMOSRAM                            ; Whether to keep a RAM copy of CMOS RAM for faster access
CacheCMOSRAM    SETL    MEMM_Type = "ARM600" :LAND: {TRUE}      ; (Space only allocated on ARM600 versions)

        GBLL    ProtectStationID        ; if TRUE, disallow OSBYTE &A2,0,n
ProtectStationID SETL {TRUE}

                GBLL    TestHarness
TestHarness     SETL    {TRUE}

        GET     Hdr:ModHand
        GET     Hdr:Proc
        GET     Hdr:CMOS
        GET     ^.^.hdr.PublicWS
        GET     ^.^.hdr.KernelWS

        ! 0, "NVRAMSize at ":CC::STR:(NVRamSize)

        LEADR   Module_LoadAddr

TAB     *       9

; Module workspace allocation

        ^ 0, R12

i2cWorkSpace    #       256
corruption_test #       4
NVSize          #       1
NVSpeed         #       1
RTCFlag         #       1
NVBase          #       1

IIC_WorkspaceSize * :INDEX: @@

; **************** Module code starts here **********************

Module_BaseAddr

        DCD     0
        DCD     IIC_Init    -Module_BaseAddr
        DCD     IIC_Die     -Module_BaseAddr
        DCD     IIC_Service -Module_BaseAddr
        DCD     IIC_Title   -Module_BaseAddr
        DCD     IIC_HelpStr -Module_BaseAddr
        DCD     IIC_HC_Table-Module_BaseAddr
        DCD     0
        DCD     0
        DCD     0
        DCD     0 ; Code to manually decode swi name (not needed)

IIC_Title
        DCB     "IICTest",0
IIC_HelpStr
        =       "IICTest"
        =       TAB, TAB
        =       "0.01 (06 Mar 1997)", 0
        ALIGN

; *****************************************************************************

IIC_HC_Table * Module_BaseAddr

IIC_Service * Module_BaseAddr

IIC_Init
        ENTRY

        LDR     r2, [r12]               ; Hard or soft init ?
        TEQ     r2, #0
        BNE     %FT00

; Hard init

        LDR     r3, =IIC_WorkspaceSize
        TEQ     r3, #0
        BEQ     %FT00
        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        LDMVSIA sp!, {pc}

        STR     r2, [r12]

00      MOV     r12, r2

        LDR     R0, =&5C5C5C5C
        STR     R0, corruption_test

 [ CacheCMOSRAM
        BL      InitCMOSCache
 ]
        BL      ClaimByteV

        EXIT

IIC_Die ENTRY
        TEQ     r12, #0
        LDRNE   r12, [r12]

        BL      ReleaseByteV

        EXITS

; *****************************************************************************

; ByteV handling routines.

ClaimByteV
        ENTRY   "r1,r2"
        MOV     r0, #ByteV
        ADR     r1, ByteVHandler
        MOV     r2, r12
        SWI     XOS_Claim
        EXIT

ReleaseByteV
        ENTRY   "r1,r2"
        MOV     r0, #ByteV
        ADR     r1, ByteVHandler
        MOV     r2, r12
        SWI     XOS_Release
        EXIT

ByteVHandler
        Push    "r0,r1"
        TEQ     r0, #&A2
        BEQ     OsbyteA2
        TEQ     r0, #&A1
        Pull    "r0,r1",NE
        MOVNES  pc, lr
        ; If &A1 then drop through to...

; *****************************************************************************

; OS_Byte &A1 and &A2 handlers pulled from s.PMF.osbyte. We declare our own
; MyOsbyte macro to exit our handler by claiming the ByteV call.

        MACRO
        MyOsbyte $cond
        Pull    "r0,r1,pc",$cond,^
        MEND

; Read CMOS RAM
OsbyteA1    ; R1 = address , R2 = result
        CLRPSR  I_bit, R0       ; this may take some time
        MOV     R0, R1
        BL      Read            ; Read CMOS ram at address <R0>
        MOV     R2, R0          ; Result in R0, return in R2
        MyOsbyte

; Write CMOS RAM
OsbyteA2
        CLRPSR  I_bit, R0       ; this may take some time
        [ E2ROMSupport
        MOVS	R0, R1
        |
        ANDS    R0, R1, #&FF    ; only look at bottom byte
        ]
        [ ProtectStationID
        MyOsbyte EQ
        ]

        ; This bit is conditioned out to make life easier...
        ;
        [ {FALSE}
        ; Protect machine address CMOS (if not corrupt)
        ASSERT  EtherCheckCMOS = EtherAddrCMOS+6
        CMP     r0, #EtherAddrCMOS
        BLT     %FT10
        CMP     r0, #EtherCheckCMOS
        BGT     %FT10
        Push    "r0,r1"
        BL      GetMachineAddressCMOS
        Pull    "r0,r1"
        MyOsbyte EQ             ; don't allow write if address is valid
10
        ]

        MOV     R1, R2
        BL      Write
        MOV     R1, R0          ; R1 is supposed to be preserved
        MyOsbyte

; *****************************************************************************

; Include the i2cutils source file from the Kernel sources.

        GET     ^.^.s.PMF.i2cutils

        END
@


1.2
log
@Spinner branch merged.
Bandwidth limit for 7500FE fixed.
RO371Timings flag set to :LNOT:STB

Version 4.64. Tagged as 'Kernel-4_64'
@
text
@@


1.1
log
@file IICTest was initially added on branch Spinner.
@
text
@d1 227
@


1.1.2.1
log
@Initial version.
@
text
@a0 228
; Copyright 1997 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > s.IICTest

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetCPU
        $GetIO
        $GetMEMC
        $GetMEMM
        $GetVIDC

                    GBLL  med_00001_debug
med_00001_debug     SETL  {FALSE}

AssemblingArthur SETL  {TRUE}

                GBLL    Module
Module          SETL    {FALSE}

                GBLL   ChecksumCMOS
ChecksumCMOS    SETL  {TRUE}

                GBLL    CacheCMOSRAM            ; Whether to keep a RAM copy of CMOS RAM for faster access
CacheCMOSRAM    SETL    MEMM_Type = "ARM600"    ; (Space only allocated on ARM600 versions)

                GBLL    FullCMOSRAMCache        ; Whether to cache all CMOS RAM or only first 240 bytes.
FullCMOSRAMCache SETL   {FALSE}

        GBLL    ProtectStationID        ; if TRUE, disallow OSBYTE &A2,0,n
ProtectStationID SETL {TRUE}

                GBLL    TestHarness
TestHarness     SETL    {TRUE}

        GET     Hdr:ModHand
        GET     Hdr:Proc
        GET     Hdr:CMOS
        GET     ^.^.hdr.PublicWS
        GET     ^.^.hdr.KernelWS

        ! 0, "NVRAMSize at ":CC::STR:(NVRamSize)

        LEADR   Module_LoadAddr

TAB     *       9

; Module workspace allocation

        ^ 0, R12

 [ FullCMOSRAMCache
i2cWorkSpace    #       1008
 |
i2cWorkSpace    #       240
 ]
corruption_test #       4

IIC_WorkspaceSize * :INDEX: @@

; **************** Module code starts here **********************

Module_BaseAddr

        DCD     0
        DCD     IIC_Init    -Module_BaseAddr
        DCD     IIC_Die     -Module_BaseAddr
        DCD     IIC_Service -Module_BaseAddr
        DCD     IIC_Title   -Module_BaseAddr
        DCD     IIC_HelpStr -Module_BaseAddr
        DCD     IIC_HC_Table-Module_BaseAddr
        DCD     0
        DCD     0
        DCD     0
        DCD     0 ; Code to manually decode swi name (not needed)

IIC_Title
        DCB     "IICTest",0
IIC_HelpStr
        =       "IICTest"
        =       TAB, TAB
        =       "0.01 (06 Mar 1997)", 0
        ALIGN

; *****************************************************************************

IIC_HC_Table * Module_BaseAddr

IIC_Service * Module_BaseAddr

IIC_Init
        ENTRY

        LDR     r2, [r12]               ; Hard or soft init ?
        TEQ     r2, #0
        BNE     %FT00

; Hard init

        LDR     r3, =IIC_WorkspaceSize
        TEQ     r3, #0
        BEQ     %FT00
        MOV     r0, #ModHandReason_Claim
        SWI     XOS_Module
        LDMVSIA sp!, {pc}

        STR     r2, [r12]

00      MOV     r12, r2

        LDR     R0, =&5C5C5C5C
        STR     R0, corruption_test

        BL      InitCMOSCache
        BL      ClaimByteV
        
        EXIT

IIC_Die ENTRY
        TEQ     r12, #0
        LDRNE   r12, [r12]

        BL      ReleaseByteV

        EXITS

; *****************************************************************************

; ByteV handling routines.

ClaimByteV
        ENTRY   "r1,r2"
        MOV     r0, #ByteV
        ADR     r1, ByteVHandler
        MOV     r2, r12
        SWI     XOS_Claim
        EXIT

ReleaseByteV
        ENTRY   "r1,r2"
        MOV     r0, #ByteV
        ADR     r1, ByteVHandler
        MOV     r2, r12
        SWI     XOS_Release
        EXIT

ByteVHandler
        Push    "r0,r1"
        TEQ     r0, #&A2
        BEQ     OsbyteA2
        TEQ     r0, #&A1
        Pull    "r0,r1",NE
        MOVNES  pc, lr
        ; If &A1 then drop through to...

; *****************************************************************************

; OS_Byte &A1 and &A2 handlers pulled from s.PMF.osbyte. We declare our own
; MyOsbyte macro to exit our handler by claiming the ByteV call.

        MACRO
        MyOsbyte $cond
        Pull    "r0,r1,pc",$cond,^
        MEND

; Read CMOS RAM
OsbyteA1    ; R1 = address , R2 = result
        CLRPSR  I_bit, R0       ; this may take some time
        MOV     R0, R1
        BL      Read            ; Read CMOS ram at address <R0>
        MOV     R2, R0          ; Result in R0, return in R2
        MyOsbyte

; Write CMOS RAM
OsbyteA2 
        CLRPSR  I_bit, R0       ; this may take some time
        [ E2ROMSupport
        MOVS	R0, R1
        |
        ANDS    R0, R1, #&FF    ; only look at bottom byte
        ]
        [ ProtectStationID
        MyOsbyte EQ
        ]

        ; This bit is conditioned out to make life easier...
        ;
        [ {FALSE}
        ; Protect machine address CMOS (if not corrupt)
        ASSERT  EtherCheckCMOS = EtherAddrCMOS+6
        CMP     r0, #EtherAddrCMOS
        BLT     %FT10
        CMP     r0, #EtherCheckCMOS
        BGT     %FT10
        Push    "r0,r1"
        BL      GetMachineAddressCMOS
        Pull    "r0,r1"
        MyOsbyte EQ             ; don't allow write if address is valid
10
        ]
 
        MOV     R1, R2
        BL      Write      
        MOV     R1, R0          ; R1 is supposed to be preserved
        MyOsbyte

; *****************************************************************************

; Include the i2cutils source file from the Kernel sources.

        GET     ^.^.s.PMF.i2cutils

        END
@


1.1.2.2
log
@Added support for 2K EEPROM.
@
text
@d39 2
a40 2
                GBLL    CacheCMOSRAM                            ; Whether to keep a RAM copy of CMOS RAM for faster access
CacheCMOSRAM    SETL    MEMM_Type = "ARM600" :LAND: {TRUE}      ; (Space only allocated on ARM600 versions)
d68 1
a68 1
i2cWorkSpace    #       2032
a72 3
NVSize          #       1
RTCFlag         #       1
NVBase          #       1
a128 1
 [ CacheCMOSRAM
a129 1
 ]
@


1.1.2.3
log
@Removed FullCMOSRAMCache support.
@
text
@d42 3
d67 5
a71 1
i2cWorkSpace    #       256
@


1.1.2.4
log
@Support added for 24LC128 16K EEPROM device.
OS_NVMemory SWI added to allow block operations on non-volatile memory.
Kernel can clock memory device at 400kHz for greater throughput.
Safeguards added to stop the device being accessed when the clock is changed
and the device doesn't have an RTC.
Changed to use srccommit.

Version 4.63, 1.1.2.2. Tagged as 'Kernel-4_63-1_1_2_2'
@
text
@a66 1
NVSpeed         #       1
d129 1
a129 1

d188 1
a188 1
OsbyteA2
d214 1
a214 1

d216 1
a216 1
        BL      Write
@
