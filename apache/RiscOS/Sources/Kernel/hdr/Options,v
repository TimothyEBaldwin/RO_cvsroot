head	4.11;
access;
symbols
	Kernel-6_14:4.11
	Kernel-6_01-3:4.9
	Kernel-6_13:4.11
	Kernel-6_12:4.11
	Kernel-6_11:4.11
	Kernel-6_10:4.11
	Kernel-6_09:4.11
	Kernel-6_08-4_129_2_10:4.7.2.5
	Kernel-6_08-4_129_2_9:4.7.2.4
	Kernel-6_08:4.10
	Kernel-6_07:4.10
	Kernel-6_06:4.10
	Kernel-6_05-4_129_2_8:4.7.2.4
	Kernel-6_05:4.10
	Kernel-6_04:4.10
	Kernel-6_03:4.9
	Kernel-6_01-2:4.9
	Kernel-6_01-4_146_2_1:4.9
	Kernel-6_02:4.9
	Kernel-6_01-1:4.9
	Kernel-6_01:4.9
	Kernel-6_00:4.9
	Kernel-5_99:4.9
	Kernel-5_98:4.9
	Kernel-5_97-4_129_2_7:4.7.2.3
	Kernel-5_97:4.9
	Kernel-5_96:4.9
	Kernel-5_95:4.9
	Kernel-5_94:4.8
	Kernel-5_93:4.8
	Kernel-5_92:4.8
	Kernel-5_91:4.8
	Kernel-5_90:4.8
	Kernel-5_89-4_129_2_6:4.7.2.2
	Kernel-5_89:4.8
	Kernel-5_88-4_129_2_5:4.7.2.2
	Kernel-5_88-4_129_2_4:4.7.2.2
	Kernel-5_88:4.8
	Kernel-5_87:4.8
	Kernel-5_86-4_129_2_3:4.7.2.1
	Kernel-5_86-4_129_2_2:4.7.2.1
	Kernel-5_86-4_129_2_1:4.7
	Kernel-5_86:4.7
	SMP:4.7.0.2
	SMP_bp:4.7
	Kernel-5_85:4.7
	Kernel-5_54-1:4.5
	Kernel-5_84:4.7
	Kernel-5_83:4.7
	Kernel-5_82:4.7
	Kernel-5_81:4.7
	Kernel-5_80:4.7
	Kernel-5_79:4.7
	Kernel-5_78:4.7
	Kernel-5_77:4.7
	Kernel-5_76:4.7
	Kernel-5_75:4.7
	Kernel-5_74:4.7
	Kernel-5_73:4.7
	Kernel-5_72:4.7
	Kernel-5_71:4.7
	Kernel-5_70:4.6
	Kernel-5_69:4.6
	Kernel-5_68:4.6
	Kernel-5_67:4.6
	Kernel-5_66:4.6
	Kernel-5_65:4.6
	Kernel-5_64:4.6
	Kernel-5_63:4.6
	Kernel-5_62:4.6
	Kernel-5_61:4.6
	Kernel-5_60:4.6
	Kernel-5_59:4.6
	Kernel-5_58:4.6
	Kernel-5_57:4.6
	Kernel-5_56:4.6
	Kernel-5_55:4.6
	Kernel-5_54:4.5
	Kernel-5_53:4.5
	Kernel-5_52:4.5
	Kernel-5_51:4.4
	Kernel-5_50:4.3
	Kernel-5_49:4.2
	HAL_merge:1.1.2.40
	Kernel-5_48:4.1
	Kernel-5_35-4_79_2_327:1.1.2.40
	Kernel-5_35-4_79_2_326:1.1.2.40
	Kernel-5_35-4_79_2_325:1.1.2.40
	Kernel-5_35-4_79_2_324:1.1.2.40
	Kernel-5_35-4_79_2_323:1.1.2.40
	Kernel-5_35-4_79_2_322:1.1.2.40
	Kernel-5_35-4_79_2_321:1.1.2.40
	Kernel-5_35-4_79_2_320:1.1.2.40
	Kernel-5_35-4_79_2_319:1.1.2.40
	Kernel-5_35-4_79_2_318:1.1.2.40
	Kernel-5_35-4_79_2_317:1.1.2.40
	Kernel-5_35-4_79_2_316:1.1.2.40
	Kernel-5_35-4_79_2_315:1.1.2.40
	Kernel-5_35-4_79_2_314:1.1.2.40
	Kernel-5_35-4_79_2_313:1.1.2.40
	Kernel-5_35-4_79_2_312:1.1.2.39
	Kernel-5_35-4_79_2_311:1.1.2.39
	Kernel-5_35-4_79_2_310:1.1.2.39
	Kernel-5_35-4_79_2_309:1.1.2.39
	Kernel-5_35-4_79_2_308:1.1.2.39
	Kernel-5_35-4_79_2_307:1.1.2.39
	Kernel-5_35-4_79_2_306:1.1.2.39
	Kernel-5_35-4_79_2_305:1.1.2.39
	Kernel-5_35-4_79_2_304:1.1.2.39
	Kernel-5_35-4_79_2_303:1.1.2.39
	Kernel-5_35-4_79_2_302:1.1.2.39
	Kernel-5_35-4_79_2_301:1.1.2.39
	Kernel-5_35-4_79_2_300:1.1.2.39
	Kernel-5_35-4_79_2_299:1.1.2.39
	Kernel-5_35-4_79_2_298:1.1.2.39
	Kernel-5_35-4_79_2_297:1.1.2.38
	Kernel-5_35-4_79_2_296:1.1.2.38
	Kernel-5_35-4_79_2_295:1.1.2.38
	Kernel-5_35-4_79_2_294:1.1.2.38
	Kernel-5_35-4_79_2_293:1.1.2.38
	Kernel-5_35-4_79_2_292:1.1.2.38
	Kernel-5_35-4_79_2_291:1.1.2.38
	Kernel-5_35-4_79_2_290:1.1.2.38
	Kernel-5_35-4_79_2_289:1.1.2.37
	Kernel-5_35-4_79_2_288:1.1.2.37
	Kernel-5_35-4_79_2_287:1.1.2.37
	Kernel-5_35-4_79_2_286:1.1.2.37
	Kernel-5_35-4_79_2_285:1.1.2.37
	Kernel-5_35-4_79_2_284:1.1.2.37
	Kernel-5_35-4_79_2_283:1.1.2.36
	Kernel-5_35-4_79_2_282:1.1.2.36
	Kernel-5_35-4_79_2_281:1.1.2.36
	Kernel-5_35-4_79_2_280:1.1.2.36
	Kernel-5_35-4_79_2_279:1.1.2.36
	Kernel-5_35-4_79_2_278:1.1.2.36
	Kernel-5_35-4_79_2_277:1.1.2.36
	Kernel-5_35-4_79_2_276:1.1.2.36
	Kernel-5_35-4_79_2_275:1.1.2.36
	Kernel-5_35-4_79_2_274:1.1.2.36
	Kernel-5_35-4_79_2_273:1.1.2.36
	Kernel-5_35-4_79_2_272:1.1.2.36
	Kernel-5_35-4_79_2_271:1.1.2.36
	Kernel-5_35-4_79_2_270:1.1.2.36
	Kernel-5_35-4_79_2_269:1.1.2.36
	Kernel-5_35-4_79_2_268:1.1.2.36
	Kernel-5_35-4_79_2_267:1.1.2.35
	Kernel-5_35-4_79_2_266:1.1.2.35
	Kernel-5_35-4_79_2_265:1.1.2.35
	Kernel-5_35-4_79_2_264:1.1.2.35
	Kernel-5_35-4_79_2_263:1.1.2.35
	Kernel-5_35-4_79_2_262:1.1.2.35
	Kernel-5_35-4_79_2_261:1.1.2.35
	Kernel-5_35-4_79_2_260:1.1.2.35
	Kernel-5_35-4_79_2_259:1.1.2.35
	Kernel-5_35-4_79_2_258:1.1.2.35
	Kernel-5_35-4_79_2_257:1.1.2.35
	Kernel-5_35-4_79_2_256:1.1.2.35
	Kernel-5_35-4_79_2_255:1.1.2.35
	Kernel-5_35-4_79_2_254:1.1.2.35
	Kernel-5_35-4_79_2_253:1.1.2.35
	Kernel-5_35-4_79_2_252:1.1.2.35
	Kernel-5_35-4_79_2_251:1.1.2.35
	Kernel-5_35-4_79_2_250:1.1.2.35
	Kernel-5_35-4_79_2_249:1.1.2.35
	Kernel-5_35-4_79_2_248:1.1.2.35
	Kernel-5_35-4_79_2_247:1.1.2.35
	Kernel-5_35-4_79_2_246:1.1.2.34
	Kernel-5_35-4_79_2_245:1.1.2.34
	Kernel-5_35-4_79_2_244:1.1.2.34
	Kernel-5_35-4_79_2_243:1.1.2.34
	Kernel-5_35-4_79_2_242:1.1.2.34
	Kernel-5_35-4_79_2_241:1.1.2.34
	Kernel-5_35-4_79_2_240:1.1.2.34
	Kernel-5_35-4_79_2_239:1.1.2.33
	Kernel-5_35-4_79_2_238:1.1.2.33
	Kernel-5_35-4_79_2_237:1.1.2.33
	Kernel-5_35-4_79_2_236:1.1.2.33
	Kernel-5_35-4_79_2_235:1.1.2.33
	Kernel-5_35-4_79_2_234:1.1.2.32
	Kernel-5_35-4_79_2_233:1.1.2.31
	Kernel-5_35-4_79_2_232:1.1.2.31
	Kernel-5_35-4_79_2_231:1.1.2.31
	Kernel-5_35-4_79_2_230:1.1.2.31
	Kernel-5_35-4_79_2_229:1.1.2.31
	Kernel-5_35-4_79_2_228:1.1.2.31
	Kernel-5_35-4_79_2_227:1.1.2.31
	Kernel-5_35-4_79_2_226:1.1.2.31
	Kernel-5_35-4_79_2_225:1.1.2.31
	Kernel-5_35-4_79_2_224:1.1.2.31
	Kernel-5_35-4_79_2_223:1.1.2.31
	Kernel-5_35-4_79_2_222:1.1.2.31
	Kernel-5_35-4_79_2_221:1.1.2.31
	Kernel-5_35-4_79_2_220:1.1.2.31
	Kernel-5_35-4_79_2_219:1.1.2.31
	Kernel-5_35-4_79_2_218:1.1.2.31
	Kernel-5_35-4_79_2_217:1.1.2.31
	Kernel-5_35-4_79_2_216:1.1.2.31
	Kernel-5_35-4_79_2_215:1.1.2.31
	Kernel-5_35-4_79_2_214:1.1.2.31
	Kernel-5_35-4_79_2_213:1.1.2.31
	Kernel-5_35-4_79_2_212:1.1.2.31
	Kernel-5_35-4_79_2_211:1.1.2.31
	Kernel-5_35-4_79_2_210:1.1.2.31
	Kernel-5_35-4_79_2_209:1.1.2.31
	Kernel-5_35-4_79_2_208:1.1.2.31
	Kernel-5_35-4_79_2_207:1.1.2.31
	Kernel-5_35-4_79_2_206:1.1.2.31
	Kernel-5_35-4_79_2_205:1.1.2.31
	Kernel-5_35-4_79_2_204:1.1.2.31
	Kernel-5_35-4_79_2_203:1.1.2.30
	Kernel-5_35-4_79_2_202:1.1.2.29
	Kernel-5_35-4_79_2_201:1.1.2.29
	Kernel-5_35-4_79_2_200:1.1.2.28
	Kernel-5_35-4_79_2_199:1.1.2.28
	Kernel-5_35-4_79_2_198:1.1.2.28
	Kernel-5_35-4_79_2_197:1.1.2.28
	Kernel-5_35-4_79_2_196:1.1.2.28
	Kernel-5_35-4_79_2_195:1.1.2.28
	Kernel-5_35-4_79_2_194:1.1.2.28
	Kernel-5_35-4_79_2_193:1.1.2.28
	Kernel-5_35-4_79_2_192:1.1.2.28
	Kernel-5_35-4_79_2_191:1.1.2.28
	Kernel-5_35-4_79_2_190:1.1.2.28
	Kernel-5_35-4_79_2_189:1.1.2.28
	Kernel-5_35-4_79_2_188:1.1.2.28
	Kernel-5_35-4_79_2_187:1.1.2.28
	Kernel-5_35-4_79_2_186:1.1.2.28
	Kernel-5_35-4_79_2_185:1.1.2.28
	Kernel-5_35-4_79_2_184:1.1.2.28
	Kernel-5_35-4_79_2_183:1.1.2.27
	Kernel-5_35-4_79_2_182:1.1.2.26
	Kernel-5_35-4_79_2_181:1.1.2.26
	Kernel-5_35-4_79_2_180:1.1.2.25
	Kernel-5_35-4_79_2_179:1.1.2.24
	Kernel-5_35-4_79_2_178:1.1.2.24
	Kernel-5_35-4_79_2_177:1.1.2.24
	Kernel-5_35-4_79_2_176:1.1.2.24
	Kernel-5_35-4_79_2_175:1.1.2.24
	Kernel-5_35-4_79_2_174:1.1.2.24
	Kernel-5_35-4_79_2_173:1.1.2.24
	Kernel-5_35-4_79_2_172:1.1.2.24
	Kernel-5_35-4_79_2_171:1.1.2.24
	Kernel-5_35-4_79_2_170:1.1.2.23
	Kernel-5_35-4_79_2_169:1.1.2.23
	Kernel-5_35-4_79_2_168:1.1.2.23
	Kernel-5_35-4_79_2_167:1.1.2.23
	Kernel-5_35-4_79_2_166:1.1.2.23
	Kernel-5_35-4_79_2_165:1.1.2.23
	RPi_merge:1.1.2.21.2.3
	Kernel-5_35-4_79_2_147_2_23:1.1.2.21.2.3
	Kernel-5_35-4_79_2_147_2_22:1.1.2.21.2.2
	Kernel-5_35-4_79_2_147_2_21:1.1.2.21.2.2
	Kernel-5_35-4_79_2_147_2_20:1.1.2.21.2.2
	Kernel-5_35-4_79_2_147_2_19:1.1.2.21.2.2
	Kernel-5_35-4_79_2_147_2_18:1.1.2.21.2.1
	Kernel-5_35-4_79_2_164:1.1.2.22
	Kernel-5_35-4_79_2_163:1.1.2.22
	Kernel-5_35-4_79_2_147_2_17:1.1.2.21.2.1
	Kernel-5_35-4_79_2_147_2_16:1.1.2.21.2.1
	Kernel-5_35-4_79_2_147_2_15:1.1.2.21.2.1
	Kernel-5_35-4_79_2_162:1.1.2.22
	Kernel-5_35-4_79_2_161:1.1.2.22
	Kernel-5_35-4_79_2_147_2_14:1.1.2.21.2.1
	Kernel-5_35-4_79_2_147_2_13:1.1.2.21.2.1
	Kernel-5_35-4_79_2_160:1.1.2.22
	Kernel-5_35-4_79_2_159:1.1.2.22
	Kernel-5_35-4_79_2_158:1.1.2.22
	Kernel-5_35-4_79_2_157:1.1.2.22
	Kernel-5_35-4_79_2_156:1.1.2.22
	Kernel-5_35-4_79_2_147_2_12:1.1.2.21.2.1
	Kernel-5_35-4_79_2_147_2_11:1.1.2.21.2.1
	Kernel-5_35-4_79_2_155:1.1.2.22
	Kernel-5_35-4_79_2_147_2_10:1.1.2.21.2.1
	Kernel-5_35-4_79_2_154:1.1.2.22
	Kernel-5_35-4_79_2_153:1.1.2.22
	Kernel-5_35-4_79_2_147_2_9:1.1.2.21.2.1
	Kernel-5_35-4_79_2_152:1.1.2.22
	Kernel-5_35-4_79_2_151:1.1.2.22
	Kernel-5_35-4_79_2_147_2_8:1.1.2.21.2.1
	Kernel-5_35-4_79_2_147_2_7:1.1.2.21.2.1
	Kernel-5_35-4_79_2_150:1.1.2.21
	Kernel-5_35-4_79_2_147_2_6:1.1.2.21.2.1
	Kernel-5_35-4_79_2_147_2_5:1.1.2.21.2.1
	Kernel-5_35-4_79_2_149:1.1.2.21
	Kernel-5_35-4_79_2_147_2_4:1.1.2.21
	Kernel-5_35-4_79_2_147_2_3:1.1.2.21
	Kernel-5_35-4_79_2_148:1.1.2.21
	Kernel-5_35-4_79_2_147_2_2:1.1.2.21
	Kernel-5_35-4_79_2_147_2_1:1.1.2.21
	RPi:1.1.2.21.0.2
	RPi_bp:1.1.2.21
	Kernel-5_35-4_79_2_98_2_52_2_1:1.1.2.16.2.7.2.1
	alees_Kernel_dev:1.1.2.16.2.7.0.2
	alees_Kernel_dev_bp:1.1.2.16.2.7
	Kernel-5_35-4_79_2_147:1.1.2.21
	Kernel-5_35-4_79_2_146:1.1.2.21
	Kernel-5_35-4_79_2_145:1.1.2.21
	Kernel-5_35-4_79_2_144:1.1.2.21
	Kernel-5_35-4_79_2_143:1.1.2.21
	Kernel-5_35-4_79_2_142:1.1.2.21
	Kernel-5_35-4_79_2_141:1.1.2.21
	Kernel-5_35-4_79_2_140:1.1.2.21
	Kernel-5_35-4_79_2_139:1.1.2.21
	Kernel-5_35-4_79_2_138:1.1.2.21
	Kernel-5_35-4_79_2_137:1.1.2.21
	Kernel-5_35-4_79_2_136:1.1.2.21
	Kernel-5_35-4_79_2_135:1.1.2.21
	Kernel-5_35-4_79_2_134:1.1.2.21
	Kernel-5_35-4_79_2_133:1.1.2.21
	Kernel-5_35-4_79_2_132:1.1.2.21
	Kernel-5_35-4_79_2_131:1.1.2.21
	Kernel-5_35-4_79_2_130:1.1.2.20
	Kernel-5_35-4_79_2_129:1.1.2.20
	Kernel-5_35-4_79_2_128:1.1.2.20
	Kernel-5_35-4_79_2_127:1.1.2.20
	Kernel-5_35-4_79_2_126:1.1.2.19
	Kernel-5_35-4_79_2_125:1.1.2.19
	Kernel-5_35-4_79_2_124:1.1.2.19
	Kernel-5_35-4_79_2_123:1.1.2.19
	Cortex_merge:1.1.2.16.2.7
	Kernel-5_35-4_79_2_122:1.1.2.18
	Kernel-5_35-4_79_2_98_2_54:1.1.2.16.2.7
	Kernel-5_35-4_79_2_98_2_53:1.1.2.16.2.7
	Kernel-5_35-4_79_2_98_2_52:1.1.2.16.2.7
	Kernel-5_35-4_79_2_98_2_51:1.1.2.16.2.7
	Kernel-5_35-4_79_2_98_2_50:1.1.2.16.2.7
	Kernel-5_35-4_79_2_98_2_49:1.1.2.16.2.7
	Kernel-5_35-4_79_2_98_2_48:1.1.2.16.2.7
	Kernel-5_35-4_79_2_121:1.1.2.18
	Kernel-5_35-4_79_2_98_2_47:1.1.2.16.2.6
	Kernel-5_35-4_79_2_120:1.1.2.18
	Kernel-5_35-4_79_2_98_2_46:1.1.2.16.2.6
	Kernel-5_35-4_79_2_119:1.1.2.18
	Kernel-5_35-4_79_2_98_2_45:1.1.2.16.2.6
	Kernel-5_35-4_79_2_98_2_44:1.1.2.16.2.6
	Kernel-5_35-4_79_2_118:1.1.2.18
	Kernel-5_35-4_79_2_98_2_43:1.1.2.16.2.5
	Kernel-5_35-4_79_2_117:1.1.2.17
	Kernel-5_35-4_79_2_116:1.1.2.17
	Kernel-5_35-4_79_2_98_2_42:1.1.2.16.2.5
	Kernel-5_35-4_79_2_115:1.1.2.17
	Kernel-5_35-4_79_2_98_2_41:1.1.2.16.2.5
	Kernel-5_35-4_79_2_98_2_40:1.1.2.16.2.4
	Kernel-5_35-4_79_2_114:1.1.2.16
	Kernel-5_35-4_79_2_98_2_39:1.1.2.16.2.4
	Kernel-5_35-4_79_2_98_2_38:1.1.2.16.2.4
	Kernel-5_35-4_79_2_113:1.1.2.16
	Kernel-5_35-4_79_2_112:1.1.2.16
	Kernel-5_35-4_79_2_98_2_37:1.1.2.16.2.4
	Kernel-5_35-4_79_2_98_2_36:1.1.2.16.2.4
	Kernel-5_35-4_79_2_98_2_35:1.1.2.16.2.4
	Kernel-5_35-4_79_2_98_2_34:1.1.2.16.2.4
	Kernel-5_35-4_79_2_98_2_33:1.1.2.16.2.4
	Kernel-5_35-4_79_2_98_2_32:1.1.2.16.2.4
	Kernel-5_35-4_79_2_98_2_31:1.1.2.16.2.3
	Kernel-5_35-4_79_2_98_2_30:1.1.2.16.2.3
	Kernel-5_35-4_79_2_98_2_29:1.1.2.16.2.3
	Kernel-5_35-4_79_2_98_2_28:1.1.2.16.2.3
	Kernel-5_35-4_79_2_98_2_27:1.1.2.16.2.3
	Kernel-5_35-4_79_2_98_2_26:1.1.2.16.2.3
	Kernel-5_35-4_79_2_111:1.1.2.16
	Kernel-5_35-4_79_2_98_2_25:1.1.2.16.2.3
	Kernel-5_35-4_79_2_98_2_24:1.1.2.16.2.3
	Kernel-5_35-4_79_2_98_2_23:1.1.2.16.2.3
	Kernel-5_35-4_79_2_110:1.1.2.16
	Kernel-5_35-4_79_2_98_2_22:1.1.2.16.2.3
	Kernel-5_35-4_79_2_109:1.1.2.16
	Kernel-5_35-4_79_2_98_2_21:1.1.2.16.2.3
	Kernel-5_35-4_79_2_98_2_20:1.1.2.16.2.3
	Kernel-5_35-4_79_2_108:1.1.2.16
	Kernel-5_35-4_79_2_107:1.1.2.16
	Kernel-5_35-4_79_2_98_2_19:1.1.2.16.2.3
	Kernel-5_35-4_79_2_98_2_18:1.1.2.16.2.3
	Kernel-5_35-4_79_2_98_2_17:1.1.2.16.2.3
	Kernel-5_35-4_79_2_98_2_16:1.1.2.16.2.3
	Kernel-5_35-4_79_2_98_2_15:1.1.2.16.2.3
	Kernel-5_35-4_79_2_106:1.1.2.16
	Kernel-5_35-4_79_2_105:1.1.2.16
	Kernel-5_35-4_79_2_104:1.1.2.16
	Kernel-5_35-4_79_2_98_2_14:1.1.2.16.2.3
	Kernel-5_35-4_79_2_98_2_13:1.1.2.16.2.3
	Kernel-5_35-4_79_2_98_2_12:1.1.2.16.2.3
	Kernel-5_35-4_79_2_98_2_11:1.1.2.16.2.2
	Kernel-5_35-4_79_2_98_2_10:1.1.2.16.2.2
	Kernel-5_35-4_79_2_98_2_9:1.1.2.16.2.2
	Kernel-5_35-4_79_2_103:1.1.2.16
	Kernel-5_35-4_79_2_102:1.1.2.16
	Kernel-5_35-4_79_2_98_2_8:1.1.2.16.2.2
	Kernel-5_35-4_79_2_98_2_7:1.1.2.16.2.2
	Kernel-5_35-4_79_2_98_2_6:1.1.2.16.2.2
	Kernel-5_35-4_79_2_98_2_5:1.1.2.16.2.2
	Kernel-5_35-4_79_2_98_2_4:1.1.2.16.2.2
	Kernel-5_35-4_79_2_101:1.1.2.16
	Kernel-5_35-4_79_2_100:1.1.2.16
	Kernel-5_35-4_79_2_99:1.1.2.16
	Kernel-5_35-4_79_2_98_2_3:1.1.2.16.2.2
	Kernel-5_35-4_79_2_98_2_2:1.1.2.16.2.1
	Kernel-5_35-4_79_2_98_2_1:1.1.2.16.2.1
	Cortex:1.1.2.16.0.2
	Cortex_bp:1.1.2.16
	Kernel-5_35-4_79_2_98:1.1.2.16
	Kernel-5_35-4_79_2_97:1.1.2.16
	Kernel-5_35-4_79_2_96:1.1.2.16
	Kernel-5_35-4_79_2_95:1.1.2.16
	Kernel-5_35-4_79_2_94:1.1.2.16
	Kernel-5_35-4_79_2_93:1.1.2.16
	Kernel-5_35-4_79_2_92:1.1.2.16
	Kernel-5_35-4_79_2_91:1.1.2.16
	Kernel-5_35-4_79_2_90:1.1.2.16
	Kernel-5_35-4_79_2_89:1.1.2.16
	Kernel-5_35-4_79_2_88:1.1.2.16
	Kernel-5_35-4_79_2_87:1.1.2.16
	Kernel-5_35-4_79_2_86:1.1.2.16
	Kernel-5_35-4_79_2_85:1.1.2.16
	Kernel-5_35-4_79_2_84:1.1.2.16
	Kernel-5_35-4_79_2_83:1.1.2.16
	Kernel-5_35-4_79_2_82:1.1.2.16
	Kernel-5_35-4_79_2_81:1.1.2.16
	Kernel-5_35-4_79_2_80:1.1.2.16
	Kernel-5_35-4_79_2_79:1.1.2.16
	Kernel-5_35-4_79_2_78:1.1.2.16
	Kernel-5_35-4_79_2_77:1.1.2.16
	RO_5_07:1.1.2.16
	Kernel-5_35-4_79_2_76:1.1.2.16
	Kernel-5_35-4_79_2_75:1.1.2.16
	Kernel-5_35-4_79_2_74:1.1.2.16
	Kernel-5_35-4_79_2_73:1.1.2.16
	Kernel-5_35-4_79_2_72:1.1.2.16
	Kernel-5_35-4_79_2_71:1.1.2.16
	Kernel-5_35-4_79_2_70:1.1.2.15
	Kernel-5_35-4_79_2_69:1.1.2.15
	Kernel-5_35-4_79_2_68:1.1.2.15
	Kernel-5_35-4_79_2_67:1.1.2.15
	Kernel-5_35-4_79_2_66:1.1.2.15
	Kernel-5_35-4_79_2_65:1.1.2.15
	Kernel-5_35-4_79_2_64:1.1.2.15
	Kernel-5_35-4_79_2_63:1.1.2.15
	Kernel-5_35-4_79_2_62:1.1.2.15
	Kernel-5_35-4_79_2_61:1.1.2.15
	Kernel-5_35-4_79_2_59:1.1.2.15
	Kernel-5_35-4_79_2_58:1.1.2.15
	Kernel-5_35-4_79_2_57:1.1.2.14
	Kernel-5_35-4_79_2_56:1.1.2.14
	Kernel-5_35-4_79_2_55:1.1.2.13
	Kernel-5_35-4_79_2_54:1.1.2.12
	Kernel-5_35-4_79_2_53:1.1.2.12
	Kernel-5_35-4_79_2_52:1.1.2.12
	Kernel-5_35-4_79_2_51:1.1.2.12
	Kernel-5_35-4_79_2_50:1.1.2.11
	Kernel-5_35-4_79_2_49:1.1.2.11
	Kernel-5_35-4_79_2_48:1.1.2.11
	Kernel-5_35-4_79_2_47:1.1.2.10
	Kernel-5_35-4_79_2_46:1.1.2.10
	Kernel-5_35-4_79_2_45:1.1.2.10
	Kernel-5_35-4_79_2_44:1.1.2.10
	Kernel-5_35-4_79_2_25_2_2:1.1.2.6
	Kernel-5_35-4_79_2_43:1.1.2.10
	Kernel-5_35-4_79_2_42:1.1.2.10
	Kernel-5_35-4_79_2_41:1.1.2.10
	Kernel-5_35-4_79_2_40:1.1.2.10
	Kernel-5_35-4_79_2_39:1.1.2.10
	Kernel-5_35-4_79_2_38:1.1.2.10
	Kernel-5_35-4_79_2_37:1.1.2.9
	Kernel-5_35-4_79_2_36:1.1.2.8
	Kernel-5_35-4_79_2_35:1.1.2.8
	Kernel-5_35-4_79_2_34:1.1.2.8
	Kernel-5_35-4_79_2_33:1.1.2.8
	Kernel-5_35-4_79_2_32:1.1.2.7
	Kernel-5_35-4_79_2_25_2_1:1.1.2.6
	Kernel-5_35-4_79_2_31:1.1.2.7
	Kernel-5_35-4_79_2_30:1.1.2.6
	Kernel-5_35-4_79_2_29:1.1.2.6
	Kernel-5_35-4_79_2_28:1.1.2.6
	Kernel-5_35-4_79_2_27:1.1.2.6
	Kernel-5_35-4_79_2_26:1.1.2.6
	Kernel-5_35-4_79_2_25:1.1.2.6
	Kernel-5_35-4_79_2_24:1.1.2.6
	Kernel-5_35-4_79_2_23:1.1.2.6
	Kernel-5_35-4_79_2_22:1.1.2.6
	Kernel-5_35-4_79_2_21:1.1.2.6
	Kernel-5_35-4_79_2_20:1.1.2.6
	Kernel-5_35-4_79_2_19:1.1.2.6
	Kernel-5_35-4_79_2_18:1.1.2.4
	Kernel-5_35-4_79_2_17:1.1.2.4
	Kernel-5_35-4_79_2_16:1.1.2.4
	Kernel-5_35-4_79_2_15:1.1.2.4
	Kernel-5_35-4_79_2_14:1.1.2.4
	Kernel-5_35-4_79_2_13:1.1.2.4
	Kernel-5_35-4_79_2_12:1.1.2.3
	Kernel-5_35-4_79_2_11:1.1.2.2
	Kernel-5_35-4_79_2_10:1.1.2.1
	HAL:1.1.0.2;
locks; strict;
comment	@# @;


4.11
date	2018.07.07.14.06.26;	author jlee;	state Exp;
branches;
next	4.10;
commitid	VD8qInwgaJB98dJA;

4.10
date	2018.04.24.18.43.44;	author jlee;	state Exp;
branches;
next	4.9;
commitid	KGf9l84CSTjL2JzA;

4.9
date	2018.02.03.18.41.36;	author rsprowson;	state Exp;
branches;
next	4.8;
commitid	VwdJDuE1iBptBrpA;

4.8
date	2017.08.19.16.43.32;	author jlee;	state Exp;
branches;
next	4.7;
commitid	43sQ2BtQwXrLlQ3A;

4.7
date	2016.12.13.19.41.10;	author jlee;	state Exp;
branches
	4.7.2.1;
next	4.6;
commitid	XeVhUEC50BLVkRxz;

4.6
date	2016.08.02.22.10.40;	author jlee;	state Exp;
branches;
next	4.5;
commitid	CnQYuUGzojQfrMgz;

4.5
date	2016.06.30.21.14.24;	author jlee;	state Exp;
branches;
next	4.4;
commitid	juXQJ5NfO6DKbxcz;

4.4
date	2016.06.30.20.59.35;	author jlee;	state Exp;
branches;
next	4.3;
commitid	skOEjp3ipLHx6xcz;

4.3
date	2016.06.30.20.42.02;	author jlee;	state Exp;
branches;
next	4.2;
commitid	bDF3DCxdmyMD0xcz;

4.2
date	2016.06.30.20.28.51;	author jlee;	state Exp;
branches;
next	4.1;
commitid	lMnWzoE9eJz3Wwcz;

4.1
date	2016.06.30.20.07.59;	author jlee;	state Exp;
branches;
next	1.1;
commitid	IWoXxARWeuLDOwcz;

1.1
date	2000.10.16.11.55.38;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

4.7.2.1
date	2017.07.29.11.13.05;	author jlee;	state Exp;
branches;
next	4.7.2.2;
commitid	E0o1zV5A8r2fc71A;

4.7.2.2
date	2017.08.31.18.47.00;	author jlee;	state Exp;
branches;
next	4.7.2.3;
commitid	e0d3gZHfENrcEo5A;

4.7.2.3
date	2018.02.16.00.01.37;	author jlee;	state Exp;
branches;
next	4.7.2.4;
commitid	L7HYXYTsWSFlZ0rA;

4.7.2.4
date	2018.05.14.19.33.40;	author jlee;	state Exp;
branches;
next	4.7.2.5;
commitid	wrVtYH84nAz1GiCA;

4.7.2.5
date	2018.07.07.13.21.27;	author jlee;	state Exp;
branches;
next	;
commitid	jxDGVONh2NXJScJA;

1.1.2.1
date	2000.10.16.11.55.38;	author kbracey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2000.10.20.14.58.21;	author kbracey;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2000.11.10.14.41.16;	author mstephen;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2000.11.10.15.51.34;	author kbracey;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2001.03.07.15.12.56;	author kbracey;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2001.03.08.17.53.35;	author kbracey;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2001.05.22.15.27.52;	author mstephen;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	2001.06.11.11.33.30;	author kbracey;	state Exp;
branches;
next	1.1.2.9;

1.1.2.9
date	2001.06.15.09.39.56;	author mstephen;	state Exp;
branches;
next	1.1.2.10;

1.1.2.10
date	2001.06.18.14.49.43;	author mstephen;	state Exp;
branches;
next	1.1.2.11;

1.1.2.11
date	2002.10.07.17.29.37;	author kbracey;	state Exp;
branches;
next	1.1.2.12;

1.1.2.12
date	2002.11.30.00.31.04;	author bavison;	state Exp;
branches;
next	1.1.2.13;

1.1.2.13
date	2003.01.27.15.25.32;	author kbracey;	state Exp;
branches;
next	1.1.2.14;

1.1.2.14
date	2003.02.21.20.21.52;	author bavison;	state Exp;
branches;
next	1.1.2.15;

1.1.2.15
date	2003.03.02.23.30.45;	author kbracey;	state Exp;
branches;
next	1.1.2.16;

1.1.2.16
date	2004.06.25.15.07.12;	author kbracey;	state Exp;
branches
	1.1.2.16.2.1;
next	1.1.2.17;

1.1.2.17
date	2011.07.31.13.48.09;	author jlee;	state Exp;
branches;
next	1.1.2.18;
commitid	o0Go7NdMMK4UrGtv;

1.1.2.18
date	2011.08.03.23.46.17;	author jlee;	state Exp;
branches;
next	1.1.2.19;
commitid	uz6Vep4mDx27F7uv;

1.1.2.19
date	2011.11.26.21.11.10;	author jlee;	state Exp;
branches;
next	1.1.2.20;
commitid	cI3W0zbtALQG6TIv;

1.1.2.20
date	2011.11.27.19.18.13;	author rsprowson;	state Exp;
branches;
next	1.1.2.21;
commitid	iuIXfUOByAFYr0Jv;

1.1.2.21
date	2012.01.05.23.08.04;	author rsprowson;	state Exp;
branches
	1.1.2.21.2.1;
next	1.1.2.22;
commitid	HlZJUAHx4rO6t2Ov;

1.1.2.22
date	2012.05.26.09.00.22;	author rsprowson;	state Exp;
branches;
next	1.1.2.23;
commitid	EMsCe1GQBPXgdd6w;

1.1.2.23
date	2012.09.18.22.01.12;	author jlee;	state Exp;
branches;
next	1.1.2.24;
commitid	eFa3Y1QY0MjZP3lw;

1.1.2.24
date	2012.10.08.13.33.28;	author srevill;	state Exp;
branches;
next	1.1.2.25;
commitid	jje13cvdo9fWnAnw;

1.1.2.25
date	2013.01.10.21.19.05;	author rsprowson;	state Exp;
branches;
next	1.1.2.26;
commitid	F6D8WGw2f7PkWHzw;

1.1.2.26
date	2013.01.17.08.46.03;	author rsprowson;	state Exp;
branches;
next	1.1.2.27;
commitid	9ol0RyjqkkO4yxAw;

1.1.2.27
date	2013.01.27.17.50.24;	author rsprowson;	state Exp;
branches;
next	1.1.2.28;
commitid	tDlfhdSfOxFReSBw;

1.1.2.28
date	2013.03.24.10.16.21;	author rsprowson;	state Exp;
branches;
next	1.1.2.29;
commitid	UvakvUQoRMnwV1Jw;

1.1.2.29
date	2013.11.16.12.30.11;	author rsprowson;	state Exp;
branches;
next	1.1.2.30;
commitid	9tijEFmxNuG63vdx;

1.1.2.30
date	2013.12.15.21.34.00;	author jlee;	state Exp;
branches;
next	1.1.2.31;
commitid	KwuK29hKRyXO7hhx;

1.1.2.31
date	2013.12.17.19.08.48;	author jlee;	state Exp;
branches;
next	1.1.2.32;
commitid	mr92WavK9Mu4gwhx;

1.1.2.32
date	2014.08.17.10.29.14;	author jballance;	state Exp;
branches;
next	1.1.2.33;
commitid	EvuS6ETGlsoyzHMx;

1.1.2.33
date	2014.08.29.18.45.33;	author jlee;	state Exp;
branches;
next	1.1.2.34;
commitid	9jew7cvwwQoVVhOx;

1.1.2.34
date	2014.10.08.21.24.59;	author rsprowson;	state Exp;
branches;
next	1.1.2.35;
commitid	BL1tvnKpiUC4wrTx;

1.1.2.35
date	2014.11.13.22.19.17;	author rsprowson;	state Exp;
branches;
next	1.1.2.36;
commitid	w8sxKkSQnrGJF4Yx;

1.1.2.36
date	2015.07.04.19.22.23;	author jlee;	state Exp;
branches;
next	1.1.2.37;
commitid	4vKk5RxNmDlJc0sy;

1.1.2.37
date	2015.08.31.19.28.34;	author jlee;	state Exp;
branches;
next	1.1.2.38;
commitid	Ni3KL17bG70fnszy;

1.1.2.38
date	2015.09.24.22.01.29;	author jballance;	state Exp;
branches;
next	1.1.2.39;
commitid	V7Omi28VtT9SryCy;

1.1.2.39
date	2015.11.08.02.10.13;	author bavison;	state Exp;
branches;
next	1.1.2.40;
commitid	LS5ibOqZw7JypeIy;

1.1.2.40
date	2016.04.05.19.36.32;	author jlee;	state Exp;
branches;
next	;
commitid	8RLqvkae1X7wpt1z;

1.1.2.16.2.1
date	2009.02.01.13.25.04;	author jlee;	state Exp;
branches;
next	1.1.2.16.2.2;

1.1.2.16.2.2
date	2009.03.06.23.23.40;	author jlee;	state Exp;
branches;
next	1.1.2.16.2.3;

1.1.2.16.2.3
date	2009.09.06.20.54.17;	author jlee;	state Exp;
branches;
next	1.1.2.16.2.4;

1.1.2.16.2.4
date	2010.10.04.22.22.11;	author jlee;	state Exp;
branches;
next	1.1.2.16.2.5;

1.1.2.16.2.5
date	2011.07.31.13.39.16;	author jlee;	state Exp;
branches;
next	1.1.2.16.2.6;
commitid	tnhfpNorgEFQoGtv;

1.1.2.16.2.6
date	2011.08.03.23.52.00;	author jlee;	state Exp;
branches;
next	1.1.2.16.2.7;
commitid	LLn4KPy3Hjh5H7uv;

1.1.2.16.2.7
date	2011.08.08.23.28.22;	author jlee;	state Exp;
branches
	1.1.2.16.2.7.2.1;
next	;
commitid	D7rzILnwRRSXoLuv;

1.1.2.16.2.7.2.1
date	2012.05.10.03.09.48;	author bavison;	state Exp;
branches;
next	;
commitid	HTVG5Da5tRqSM74w;

1.1.2.21.2.1
date	2012.05.20.21.21.32;	author jballance;	state Exp;
branches;
next	1.1.2.21.2.2;
commitid	neZVFdyw3wNwvv5w;

1.1.2.21.2.2
date	2012.09.03.00.01.58;	author srevill;	state Exp;
branches;
next	1.1.2.21.2.3;
commitid	zPAZ30SZFqok11jw;

1.1.2.21.2.3
date	2012.09.18.15.49.56;	author jlee;	state Exp;
branches;
next	;
commitid	jeuxYpI6CQUxM1lw;


desc
@@


4.11
log
@Merge SMP branch to trunk
Detail:
  Since the current SMP changes are fairly minor, and the trunk is seeing most development, from a maintenance perspective it makes sense to merge the changes to trunk. This will also make sure they get some wider testing ready for when the next round of SMP development takes place.
  Changes:
  - Docs/SMP - New docs folder describing SMP-related changes to the HAL and interrupt handling. Some of the IRQ changes can also be taken advantage of by single-core devices, since it introduces a way to describe which interrupt sources can be routed to IRQ & FIQ
  - Makefile, hdr/DBellDevice, hdr/HALDevice - New HAL device for an inter-processor software-generated interrupt source ("doorbell")
  - hdr/HALEntries - Reuse the unused matrix keyboard & touchscreen HAL entry points for the new IRQ handling & SMP-related HAL calls
  - hdr/KernelWS - Bump up MaxInterrupts
  - hdr/OSMem, s/MemInfo - Introduce OS_Memory 19, to allow for DMA to/from cacheable memory without actually altering the cacheability of the pages (which can be even more tricky in SMP systems than it is in uniprocessor systems)
  - hdr/Options - Introduce SMP build switch. Currently this controls whether the ARMops will operate in "SMP-friendly" mode or not (when running on MP processors)
  - s/ARMops, s/MemMap2 - Introduce the ARMv7MP ARMop implementation. Simplify DCache_LineLen / ICache_LineLen handling for WB_CR7_Lx so that it's the plain value rather than log2(n)-2
  - s/ExtraSWIs - If ARMops are in SMP-friendly mode, global OS_SynchroniseCodeAreas now only syncs application space and the RMA. This is because there is no trivial MP-safe global IMB operation available. This will also make global OS_SynchroniseCodeAreas significantly slower, but the documentation has always warned against performing a global IMB for just that reason, so code that suffers performance penalties should really try and switch to a ranged IMB.
  - s/NewIRQs - Update some comments regarding IRQ handler entry/exit conditions
Admin:
  Untested


Version 6.09. Tagged as 'Kernel-6_09'
@
text
@; Copyright 2000 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; essential global variables
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                GET   Version
                GBLS  VersionNo
VersionNo       SETS  "$VString ($Date)"

MosVer          *       6               ; As returned by OS_Byte 0

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; now the conditional flags for the version we want
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

AssemblingArthur SETL  {TRUE}
; defined in hdr.system to allow conditionals in macros

                GBLL    CacheOff
CacheOff        SETL    {FALSE}

                GBLL    ShowWS
ShowWS          SETL    {TRUE}          ; Make KernelWS be verbose

                GBLL    Module
Module          SETL    {FALSE}

                GBLL    SqueezeMods     ; whether squeezed modules are allowed
SqueezeMods     SETL    {TRUE}

                GBLL    International   ; whether text and error messages come from  messages file.
International   SETL    {TRUE}

                GBLL    CacheCommonErrors       ; whether common internationalised errors are cached in sysheap
CacheCommonErrors       SETL    International :LAND: {TRUE}

                GBLL    CacheCMOSRAM            ; Whether to keep a RAM copy of CMOS RAM for faster access
CacheCMOSRAM    SETL    {TRUE}

                GBLL    ProtectStationID        ; Disallow writes to NetStnCMOS (via OS_Byte & OS_NVMemory)
ProtectStationID        SETL {TRUE}

                GBLL    ValidateCMOS            ; Apply special CMOS-corruption detection code,
ValidateCMOS    SETL    {TRUE}                  ; and do minimal default settings.

                GBLL    ChecksumCMOS            ; Inspect the CMOS checksum byte, and act like a CMOS reset if it's
ChecksumCMOS    SETL    {TRUE}                  ; invalid. Also, calculate CMOS checksum and write it when needed.

                GBLL    ShrinkableDAs           ; if true, support Shrinkable Dynamic Areas (eg. CacheFS)
ShrinkableDAs   SETL    {TRUE}

                GBLL    DA_Batman               ; Holey dynamic areas Batman!
DA_Batman       SETL    {TRUE}                  ; concept of sparsely mapped dynamic areas introduced for Ursula

LongCLISize          * 1024                     ; buffer size for long commands

                GBLL    SASTMhatbroken          ; whether ROM must support SA110's with broken STM^ (revision 3 should fix this)
SASTMhatbroken  SETL    SupportARMv4 :LAND: NoARMv5

                GBLL    CacheCleanerHack        ; Cache clean hack in ClearPhysRAM for platforms that use DCacheCleanAddress. Does not work with all CPUs!
                GBLL    InterruptDelay          ; True if we might be running on a CPU with CPUFlag_InterruptDelay set (e.g. StrongARM)
CacheCleanerHack   SETL {TRUE}
InterruptDelay     SETL SupportARMv4 :LAND: NoARMv5

                GBLL    ARM6support
                GBLL    XScaleMiniCache         ; is the XScale mini data-cache used (at all)
                GBLL    XScaleJTAGDebug
ARM6support        SETL (MEMM_Type = "ARM600") :LAND: NoARMv4
XScaleMiniCache    SETL {FALSE}
XScaleJTAGDebug    SETL {TRUE}

                ;mjs
                ;Chocolate flavours implemented for Ursula, but they are generally useful performance enhancements
                ;(not all Ursula performance improvements are flagged with Chocolate - eg. simple changes such as slicker SWI
                ;despatch and wider SWI hashing)
                ;
                ;any ARM
                ;
                GBLL    ChocolateSysHeap        ;whether to save cost of SysHeap block claim/release for common cases (eg. callback blocks)
                                                ;also reduces SysHeap stress by using fewer blocks in total
                GBLL    ChocolateOSMod          ;whether to reduce SysHeap stress in module handling
                GBLL    ChocolateSysVars        ;whether to do performance improvements in system variable handling
                GBLL    ChocolateOscli          ;whether to do performance improvements in Oscli command stuff
                GBLL    ChocolateService        ;whether to implement fast module service call distribution (uses table introduced
                                                ;into module format by Ursula API)
                GBLL    ChocolateAMB            ;whether to compile support for Lazy task swapping
                                                ;possibly enabled at run time for some ARMs only
ChocolateSysHeap       SETL {TRUE}
ChocolateOSMod         SETL {TRUE}
ChocolateSysVars       SETL {TRUE}
ChocolateOscli         SETL {TRUE}
ChocolateService       SETL {TRUE}
ChocolateAMB           SETL {TRUE}
  [ ChocolateSysHeap
                       GBLA  MaxChocolateCBBlocks  ;max quick CallBack blocks available at any one time (else ordinary heap nodes used)
                       GBLA  MaxChocolateSVBlocks  ;max quick Software Vector blocks available at any one time (else ordinary heap nodes used)
                       GBLA  MaxChocolateTKBlocks  ;max quick Ticker blocks available at any one time (else ordinary heap nodes used)
                       GBLA  MaxChocolateMRBlocks  ;max module ROM blocks before ordinary heap nodes are used (reduces total no. nodes in SysHeap)
                       GBLA  MaxChocolateMABlocks  ;max module Active blocks before ordinary heap nodes are used
                       GBLA  MaxChocolateMSBlocks  ;max module SWI Hash blocks before ordinary heap nodes are used
MaxChocolateCBBlocks   SETA   32
MaxChocolateSVBlocks   SETA  128
MaxChocolateTKBlocks   SETA   32
MaxChocolateMRBlocks   SETA  150
MaxChocolateMABlocks   SETA  150
MaxChocolateMSBlocks   SETA  150
  ]

                          GBLL    Oscli_QuickAliases
                          GBLL    Oscli_HashedCommands
Oscli_QuickAliases        SETL    {TRUE} :LAND: ChocolateOscli   ;try to do a better job of checking for aliases
Oscli_HashedCommands      SETL    {TRUE} :LAND: ChocolateOscli   ;try to do a better job of finding commands

                     GBLL    mjsServiceTrace          ;for statistics gathering on service calls only
mjsServiceTrace      SETL    {FALSE}
                     GBLL    mjsSysHeapNodesTrace     ;for statistics gathering on some SysHeap nodes only
mjsSysHeapNodesTrace SETL    {FALSE}

                GBLL    DebugROMInit
                GBLL    DebugHALTX

              [ FreezeDevRel
DebugROMInit    SETL    {FALSE}
DebugHALTX      SETL    {FALSE}
              |
DebugROMInit    SETL    (Version :AND: 1) = 1   ; Yes for odd numbered development
DebugHALTX      SETL    (Version :AND: 1) = 1   ; Yes for odd numbered development
              ]

                GBLL    DebugROMPostInit ; Displays when the PostInit service call is sent to each ROM module (currently works on vanilla service call handling only)
DebugROMPostInit SETL   (:LNOT: ChocolateService) :LAND: {FALSE}

                GBLL    DebugTerminal           ; default WRCH and RDCH through HAL
DebugTerminal   SETL    {FALSE}

                GBLL    DebugHeaps              ; initialise claimed and freed blocks
DebugHeaps      SETL    {FALSE}                 ; (may slow things down unacceptably)

                GBLL    DebugCDA2       ; ChangeDynamicArea and related options
DebugCDA2       SETL    {FALSE}

              [ DebugHeaps :LOR: DebugROMInit :LOR: DebugROMPostInit :LOR: DebugCDA2
                ! 0, "*** WARNING *** Debugging assembled in"
              ]

  [ :LNOT: :DEF: HiProcVecs
                GBLL    HiProcVecs              ; Relocate processor vectors and first 16K of workspace to &FFFF0000
HiProcVecs      SETL    "$Machine"="Tungsten" :LOR: :LNOT: NoARMv6
  ]

                GBLL    CompatibilityPage       ; Add a read-only page at &0 for compatibility with buggy zero page reading software
CompatibilityPage SETL  HiProcVecs

                GBLA    FirstUnpluggableModule
FirstUnpluggableModule  SETA 8                  ; Podule, FileSwitch, ResourceFS, Messages, MessageTrans,
                                                ; TerritoryManager, UK. Moot now the keyboard and mouse aren't
                                                ; in the kernel - unplug those and you're stuffed.

                GBLL  PMPDebug
PMPDebug        SETL  {FALSE}                   ; Physical memory pool debugging

                GBLL  PMPParanoid
PMPParanoid     SETL  {FALSE}                   ; Validate PMPs after most ops

                GBLL  PMPRAMFS
PMPRAMFS        SETL  {TRUE}                    ; Whether RAMFS DA is a PMP (requires compatible RAMFS module)
PMPRAMFS_Size   * 256                           ; Number of logical pages (physical size is unlimited)

                GBLL    CacheablePageTables
CacheablePageTables SETL {TRUE}                 ; Use cacheable page tables where possible

                GBLL    SyncPageTables
SyncPageTables  SETL    (MEMM_Type = "VMSAv6") :LOR: CacheablePageTables ; Any page table modification (specifically, overwriting faulting entries) requires synchronisation

  [ :LNOT: :DEF: SMP
                GBLL    SMP
SMP             SETL    (MEMM_Type = "VMSAv6") :LAND: {TRUE} ; Enable SMP-related changes
  ]

                    GBLL  UseNewFX0Error
UseNewFX0Error      SETL  ((Version :AND: 1) = 1) ; Whether *FX 0 should show the ROM link date instead of the UtilityModule date

                    GBLL  CheckErrorBlocks
CheckErrorBlocks    SETL  {FALSE}               ; Attempt to check whether error blocks are valid (in addition to the error pointer checks)

                    GBLS  GetMessages
 [ International
GetMessages         SETS  "GET s.MsgCode"
 |
GetMessages         SETS  ""
 ]
                    GBLS  GetUnsqueeze
 [ SqueezeMods
GetUnsqueeze        SETS  "GET s.Unsqueeze"
 |
GetUnsqueeze        SETS  ""
 ]
                    GBLS  GetKernelMEMC
GetKernelMEMC       SETS  "GET s." :CC: MEMM_Type

; control switches for med_00001 (the flood fill routines 1024 line limit).
; Switches have the following effects:
;
; _userma     Will use rma if >48K is free, up to a maximum of 128K. It will
;             try to acheive the latter by growing the rma if possible.
; _twowords   Use two word entries in the queue. This overcomes the limitation
;             of the original packed word format.

                    GBLL  med_00001_userma
                    GBLL  med_00001_twowords
med_00001_userma    SETL  {TRUE}
med_00001_twowords  SETL  {TRUE}

 [ med_00001_userma
smallest_rma_size   * (48*1024)                  ; define the low threshold for rma use
largest_rma_size    * (128*1024)                 ; and the ceiling for rma use
 ]

; Ickle macros. We want to be able to turn IRQs on and off fast in the
; code in various places. To do this easily, have a name for the
; SVC26/32 mode we run in.

USR2632 * USR32_mode
SVC2632 * SVC32_mode

        END
@


4.10
log
@Disable error block validity checks
Detail:
  The error block checks introduced in Kernel-5_35-4_79_2_313 are generating a few too many false positives and edge cases, so take the safe option of just disabling them rather than trying to tweak the rules further. Error pointers will still be checked, but the content of the error blocks will not.
  hdr/Options - Add CheckErrorBlocks switch so we can easily turn the code back on again in the future if necessary
  s/Kernel - Switch out all the code relating to error number checks, except for the dummy load of the first word of the error block, since that's still useful as a pointer validity check
  hdr/KernelWS - Revise SWIDespatch_Size definition so it's easier for it to cope with the various factors which may affect the despatcher size
Admin:
  Tested on PandaBoard
  Relevant discussion:
  https://www.riscosopen.org/forum/forums/11/topics/11133


Version 6.04. Tagged as 'Kernel-6_04'
@
text
@d189 5
@


4.9
log
@Recover gracefully from a completely blank set of CMOS
Newly born boards have all 0xFF's in their CMOS (EEPROM), but the new order of keyboard scan did
  Init -> Scan keyboard -> Check (or wipe) CMOS
and would therefore leave 0xFF's in a select few kernel workspace areas and OS_Byte values.
Defer the init which reads CMOS until after the check/wipe step. Only the screen area size is now done early, but MassageScreenSize clamps that properly anyway.

Arthur3.s: Relocate stranded function SetupPrinterBuffer to osinit.
PMF/key.s: Drop support for SoftReset.
PMF/osinit.s: Stuff in hardcoded defaults at early init. Retrieve the proper ones later. Take ownership of SystemSprite/RamFS/Font Manager dynamic areas (deferrable).
vdudriver.s: Use symbolic name.
NewReset.s: Defer SystemSprite/RamFS/Font Manager area creation, MouseInit, Read(Hard)CMOSDefaults until later.
hdr/Options: Delete unused IgnoreVRAM. Remove MaxRAMFS_Size now PMPs make it not useful. Shuffle ARM6Support/XScaleMiniCache/XScaleJTAGDebug to be adjacent to their definitions.

Tested by filling first 256 bytes with 0xFF and powering up. Reset now completes, OS_Byte variables look sensible.

Version 5.95. Tagged as 'Kernel-5_95'
@
text
@d192 3
@


4.8
log
@Add a compatibility page zero for high processor vectors / zero page relocation builds
Detail:
  When HiProcVecs is enabled, there will now be a read-only page located at &0 in order to ease compatibility with buggy software which reads from null pointers
  Although most of the page is zero-filled, the start of the page contains a few words which are invalid pointers, discouraging dereferencing them, and a warning message if the memory is interpreted as a string.
  On ARMv6+ the page is also made non-executable, to deal with branch-through-zero type situations
  OS_Memory 20 has been introduced as a way of determining whether the compatibility page is present, and also to enable/disable it
  File changes:
  - hdr/Options - Add CompatibilityPage option
  - hdr/OSMem - Declare OS_Memory reason code 20
  - hdr/KernelWS - When CompatibilityPage is enabled, make sure nothing else is located at &0
  - s/NewReset - Enable compatibility page just before Service_PostInit (try and keep zero-tolerance policy for null pointer dereferencing during ROM init)
  - s/MemInfo - OS_Memory 20 implementation. Add knowledge of the compatibility page to OS_Memory 16 and 24.
Admin:
  Tested on BB-xM


Version 5.87. Tagged as 'Kernel-5_87'
@
text
@a62 3
                GBLL    IgnoreVRAM              ; if true, don't add VRAM to the RAM list (+ don't use for screen)
IgnoreVRAM      SETL    {FALSE}

d72 1
a72 6

                GBLL    ARM6support
                GBLL    XScaleMiniCache         ; is the XScale mini data-cache used (at all)
                GBLL    XScaleJTAGDebug

SASTMhatbroken     SETL SupportARMv4 :LAND: NoARMv5
d79 3
a180 2

 [ PMPRAMFS
a181 4
 |
                GBLA    MaxRAMFS_Size
MaxRAMFS_Size   SETA    128                     ; Max size available for RAM Disc
 ]
@


4.7
log
@Implement support for cacheable pagetables
Detail:
  Modern ARMs (ARMv6+) introduce the possibility for the page table walk hardware to make use of the data cache(s) when performing memory accesses. This can significantly reduce the cost of a TLB miss on the system, and since the accesses are cache-coherent with the CPU it allows us to make the page tables cacheable for CPU (program) accesses also, improving the performance of page table manipulation by the OS.
  Even on ARMs where the page table walk can't use the data cache, it's been measured that page table manipulation operations can still benefit from placing the page tables in write-through or bufferable memory.
  So with that in mind, this set of changes updates the OS to allow cacheable/bufferable page tables to be used by the OS + MMU, using a system-appropriate cache policy.
  File changes:
  - hdr/KernelWS - Allocate workspace for storing the page flags that are to be used by the page tables
  - hdr/OSMem - Re-specify CP_CB_AlternativeDCache as having a different behaviour on ARMv6+ (inner write-through, outer write-back)
  - hdr/Options - Add CacheablePageTables option to allow switching back to non-cacheable page tables if necessary. Add SyncPageTables var which will be set {TRUE} if either the OS or the architecture requires a DSB after writing to a faulting page table entry.
  - s/ARM600, s/VMSAv6 - Add new SetTTBR & GetPageFlagsForCacheablePageTables functions. Update VMSAv6 for wider XCBTable (now 2 bytes per element)
  - s/ARMops - Update pre-ARMv7 MMU_Changing ARMops to drain the write buffer on entry if cacheable pagetables are in use (ARMv7+ already has this behaviour due to architectural requirements). For VMSAv6 Normal memory, change the way that the OS encodes the cache policy in the page table entries so that it's more compatible with the encoding used in the TTBR.
  - s/ChangeDyn - Update page table page flag handling to use PageTable_PageFlags. Make use of new PageTableSync macro.
  - s/Exceptions, s/AMBControl/memmap - Make use of new PageTableSync macro.
  - s/HAL - Update MMU initialisation sequence to make use of PageTable_PageFlags + SetTTBR
  - s/Kernel - Add PageTableSync macro, to be used after any write to a faulting page table entry
  - s/MemInfo - Update OS_Memory 0 page flag conversion. Update OS_Memory 24 to use new symbol for page table access permissions.
  - s/MemMap2 - Use PageTableSync. Add routines to enable/disable cacheable pagetables
  - s/NewReset - Enable cacheable pagetables once we're fully clear of the MMU initialision sequence (doing earlier would be trickier due to potential double-mapping)
Admin:
  Tested on pretty much everything currently supported
  Delivers moderate performance benefits to page table ops on old systems (e.g. 10% faster), astronomical benefits on some new systems (up to 8x faster)
  Stats: https://www.riscosopen.org/forum/forums/3/topics/2728?page=2#posts-58015


Version 5.71. Tagged as 'Kernel-5_71'
@
text
@d170 3
@


4.7.2.1
log
@Initial SMP changes
Detail:
  This commit lays some of the groundwork for SMP support within the HAL, kernel, and OS.
  Makefile, hdr/HALDevice, hdr/DBellDevice - Add definitions for a doorbell HAL device, to allow CPU cores to signal each other via interrupts
  hdr/HALEntries - Repurpose HAL_Matrix and HAL_Touchscreen entry points for new SMP-related entry points. Add a couple of IRQ-related definitions.
  hdr/KernelWS - Boost MaxInterrupts to 256
  hdr/Options - Add new SMP build switch to control whether the kernel is built in SMP-friendly mode or not. SMP-friendly kernels should still run on single-core machines, but may behave slightly differently.
  s/ARMops - Make as many ARMops SMP-safe as possible, relying on hardware support for broadcasting of cache/TLB maintenance operations
  s/ExtraSWIs - Make SMP-friendly full OS_SynchroniseCodeAreas only sync application space and the RMA (full-cache IMB not really possible with SMP)
  s/NewIRQs - Update IRQ despatcher comments to (hopefully) reflect reality
  Docs/SMP/HAL, Docs/SMP/IRQ - Add documentation covering the new HAL calls and IRQ behaviour
Admin:
  Tested on Raspberry Pi 2, 3, OMAP4, iMX6


Version 5.86, 4.129.2.2. Tagged as 'Kernel-5_86-4_129_2_2'
@
text
@a196 3
                GBLL    SMP
SMP             SETL    (MEMM_Type = "VMSAv6") :LAND: {TRUE} ; Enable SMP-related changes

@


4.7.2.2
log
@Merge in latest changes from main branch


Version 5.88, 4.129.2.4. Tagged as 'Kernel-5_88-4_129_2_4'
@
text
@a169 3
                GBLL    CompatibilityPage       ; Add a read-only page at &0 for compatibility with buggy zero page reading software
CompatibilityPage SETL  HiProcVecs

@


4.7.2.3
log
@Merge in latest changes from main branch

Version 5.97, 4.129.2.7. Tagged as 'Kernel-5_97-4_129_2_7'
@
text
@d63 3
d75 6
a80 1
SASTMhatbroken  SETL    SupportARMv4 :LAND: NoARMv5
a86 3
                GBLL    ARM6support
                GBLL    XScaleMiniCache         ; is the XScale mini data-cache used (at all)
                GBLL    XScaleJTAGDebug
d186 2
d189 4
@


4.7.2.4
log
@Merge in latest changes from main branch

Version 6.05, 4.129.2.8. Tagged as 'Kernel-6_05-4_129_2_8'
@
text
@a194 3
                    GBLL  CheckErrorBlocks
CheckErrorBlocks    SETL  {FALSE}               ; Attempt to check whether error blocks are valid (in addition to the error pointer checks)

@


4.7.2.5
log
@Allow SMP build switch to be overridden by components file
Detail:
  hdr/Options - The setting of the SMP switch can now be controlled by specifying the correct ASFLAGS, e.g. ASFLAGS="-PD \"SMP SETL {FALSE}\""
Admin:
  Untested


Version 6.08, 4.129.2.10. Tagged as 'Kernel-6_08-4_129_2_10'
@
text
@a188 1
  [ :LNOT: :DEF: SMP
a190 1
  ]
@


4.6
log
@Add support for shareable pages and additional access privileges
Detail:
  This set of changes:
  * Refactors page table entry encoding/decoding so that it's (mostly) performed via functions in the MMU files (s.ARM600, s.VMSAv6) rather than on an ad-hoc basis as was the case previously
  * Page table entry encoding/decoding performed during ROM init is also handled via the MMU functions, which resolves some cases where the wrong cache policy was in use on ARMv6+
  * Adds basic support for shareable pages - on non-uniprocessor systems all pages will be marked as shareable (however, we are currently lacking ARMops which broadcast cache maintenance operations to other cores, so safe sharing of cacheable regions isn't possible yet)
  * Adds support for the VMSA XN flag and the "privileged ROM" access permission. These are exposed via RISC OS access privileges 4 and above, taking advantage of the fact that 4 bits have always been reserved for AP values but only 4 values were defined
  * Adds OS_Memory 17 and 18 to convert RWX-style access flags to and from RISC OS access privelege numbers; this allows us to make arbitrary changes to the mappings of AP values 4+ between different OS/hardware versions, and allows software to more easily cope with cases where the most precise AP isn't available (e.g. no XN on <=ARMv5)
  * Extends OS_Memory 24 (CheckMemoryAccess) to return executability information
  * Adds exported OSMem header containing definitions for OS_Memory and OS_DynamicArea
  File changes:
  - Makefile - export C and assembler versions of hdr/OSMem
  - Resources/UK/Messages - Add more text for OS_Memory errors
  - hdr/KernelWS - Correct comment regarding DCacheCleanAddress. Allocate workspace for MMU_PPLTrans and MMU_PPLAccess.
  - hdr/OSMem - New file containing exported OS_Memory and OS_DynamicArea constants, and public page flags
  - hdr/Options - Reduce scope of ARM6support to only cover builds which require ARMv3 support
  - s/AMBControl/Workspace - Clarify AMBNode_PPL usage
  - s/AMBControl/growp, mapslot, mapsome, memmap - Use AreaFlags_ instead of AP_
  - s/AMBControl/main, memmap - Use GetPTE instead of generating page table entry manually
  - s/ARM600 - Remove old coments relating to lack of stack. Update BangCam to use GetPTE. Update PPL tables, removing PPLTransL1 (L1 entries are now derived from L2 table on demand) and adding a separate table for ARM6. Implement the ARM600 versions of the Get*PTE ('get page table entry') and Decode*Entry functions
  - s/ARMops - Add Init_PCBTrans function to allow relevant MMU_PPLTrans/MMU_PCBTrans pointers to be set up during the pre-MMU stage of ROM init. Update ARM_Analyse to set up the pointers that are used post MMU init.
  - s/ChangeDyn - Move a bunch of flags to hdr/OSMem. Rename the AP_ dynamic area flags to AreaFlags_ to avoid name clashes and confusion with the page table AP_ values exported by Hdr:MEMM.ARM600/Hdr:MEMM.VMSAv6. Also generate the relevant flags for OS_Memory 24 so that it can refer to the fixed areas by their name instead of hardcoding the permissions.
  - s/GetAll - GET Hdr:OSMem
  - s/HAL - Change initial page table setup to use DA/page flags and GetPTE instead of building page table entries manually. Simplify AllocateL2PT by removing the requirement for the user to supply the access perimssions that will be used for the area; instead for ARM6 we just assume that cacheable memory is the norm and set L1_U for any L1 entry we create here.
  - s/Kernel - Add GetPTE macro (for easier integration of Get*PTE functions) and GenPPLAccess macro (for easy generation of OS_Memory 24 flags)
  - s/MemInfo - Fixup OS_Memory 0 to not fail on seeing non-executable pages. Implement OS_Memory 17 & 18. Tidy up some error generation. Make OS_Memory 13 use GetPTE. Extend OS_Memory 24 to return (non-) executability information, to use the named CMA_ constants generated by s/ChangeDyn, and to use the Decode*Entry functions when it's necessary to decode page table entries.
  - s/NewReset - Use AreaFlags_ instead of AP_
  - s/VMSAv6 - Remove old comments relating to lack of stack. Update BangCam to use GetPTE. Update PPL tables, removing PPLTransL1 (L1 entries are now derived from L2 table on demand) and adding a separate table for shareable pages. Implement the VMSAv6 versions of the Get*PTE and Decode*Entry functions.
Admin:
  Tested on Raspberry Pi 1, Raspberry Pi 3, Iyonix, RPCEmu (ARM6 & ARM7), comparing before and after CAM and page table dumps to check for any unexpected differences


Version 5.55. Tagged as 'Kernel-5_55'
@
text
@d191 6
@


4.5
log
@Tidy things up a bit
Detail:
  hdr/Options - Reduce the scope of SASTMhatbroken and InterruptDelay switches so that they're only enabled when we're building for ARMv4 targets
  s/ARM600, s/VMSAv6, s/ExtraSWIs, s/Exceptions - Move duplicate code out of s/ARM600 & s/VMSAv6 and into shared locations. OS_UpdateMEMC, the bulk of OS_MMUControl, and OS_SynchroniseCodeAreas are now located in s/ExtraSWIs. Meanwhile the data & prefetch abort veneers have been moved to the new file s/Exceptions. s/ARM600 and s/VMSAv6 are now almost purely to do with the different page table formats.
  s/GetAll - GET s/Exceptions
Admin:
  Tested on Raspberry Pi


Version 5.52. Tagged as 'Kernel-5_52'
@
text
@d87 1
a87 1
ARM6support        SETL (MEMM_Type = "ARM600")  ; Needs updating for VMSAv6 compatability
@


4.4
log
@Delete lots of old switches
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * FixCallBacks
  * UseProcessTransfer
  * CanLiveOnROMCard
  * BleedinDaveBell
  * NewStyleEcfs
  * DoVdu23_0_12
  * LCDPowerCtrl
  * HostVdu
  * Print
  * EmulatorSupport
  * TubeInfo
  * AddTubeBashers
  * TubeChar, TubeString, TubeDumpNoStack, TubeNewlNoStack macros
  * FIQDebug
  * VCOstartfix
  * AssemblingArthur (n.b. still defined for safety with anything in Hdr: which uses it, but not used explicitly by the kernel)
  * MouseBufferFix
  * LCDInvert
  * LCDSupport
  * DoInitialiseMode
  * Interruptible32bitModes
  * MouseBufferManager
  * StrongARM (new CacheCleanerHack and InterruptDelay switches added to hdr/Options to cover some functionality that StrongARM previously covered)
  * SAcleanflushbroken
  * StrongARM_POST
  * IrqsInClaimRelease
  * CheckProtectionLink
  * GSWorkspaceInKernelBuffers
  * EarlierReentrancyInDAShrink
  * LongCommandLines
  * ECC
  * NoSPSRcorruption
  * RMTidyDoesNowt
  * RogerEXEY
  * StorkPowerSave
  * DebugForcedReset
  * AssembleKEYV
  * AssemblePointerV
  * ProcessorVectors
  * Keyboard_Type
  Assorted old files have also been deleted.
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.51. Tagged as 'Kernel-5_51'
@
text
@d80 1
a80 1
SASTMhatbroken     SETL {TRUE}
d85 1
a85 1
InterruptDelay     SETL {TRUE}
@


4.3
log
@Delete STB code
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a desktop build):
  * STB
  * RO371Timings
  * NormalSpeedROMS
  * AutoSpeedROMS
  * RISCPCBurstMode
  * InterlacedPointer
  * ParallelFlashUpgrade (and s/FlashROM file)
  * Embedded_UI
  Some of the deleted code might be worth revisiting in future:
  * OS_ReadSysInfo 4 support for storing the MAC in alternate CMOS locations (including 2nd copy for error checking) or fetching via Service_MachineAddress
  * Mouse handling changes, possibly aimed at hiding the mouse pointer if a mouse isn't connected
  * More strict CMOS validation in s/NewReset
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.50. Tagged as 'Kernel-5_50'
@
text
@a29 9
                GBLL  AddTubeBashers
AddTubeBashers  SETL  {FALSE}

Tube_Normal     *       1
Tube_Simulator  *       2

                GBLA    TubeType
TubeType        SETA    Tube_Simulator

a32 3
                GBLL    CanLiveOnROMCard
CanLiveOnROMCard SETL   ROMCardSupport

a41 10
                GBLL    VCOstartfix              ;code in early kernel to fix VCO start problem on A7000 (esp. 7500FE)
VCOstartfix     SETL    {TRUE}

;whether we support running on the (Risc PC) emulator
                GBLL    EmulatorSupport
EmulatorSupport SETL    {FALSE} ; Disabled; QEMU doesn't like it

                GBLL    DoInitialiseMode
DoInitialiseMode SETL   {TRUE}

a50 9
                GBLL    MouseBufferManager      ; Whether mouse uses buffer manager
MouseBufferManager      SETL    {TRUE}

                GBLL    IrqsInClaimRelease      ; Whether OS_Claim/Release restore IRQ's before releasing heap node
IrqsInClaimRelease      SETL  {TRUE}

                GBLL    AlwaysClearRAM          ; If true, clear RAM on every break/reset
AlwaysClearRAM  SETL    {TRUE}

a56 3
                GBLL    CheckProtectionLink     ; if true, disallow CMOS RAM changes if link in protected position
CheckProtectionLink     SETL {TRUE}             ; NB affects Delete/Copy/R/T and 0-9/.

a62 9
                GBLL    LCDInvert
LCDInvert       SETL    {TRUE}

                GBLL    LCDSupport              ; Whether LCD Support is assembled in or not
LCDSupport      SETL    {TRUE}

                GBLL    ModeSelectors           ; whether mode selectors are understood
ModeSelectors   SETL    {TRUE}

a65 3
                GBLL    LateAborts              ; if true, use late abort mode on ARM600 (compulsory on ARM700)
LateAborts      SETL    {TRUE}

a71 17
                GBLL    Interruptible32bitModes ; if true, limited 32-bit mode code support (interrupt handler does not assume
Interruptible32bitModes SETL {TRUE}             ; 26-bit foreground), also allows faster, 32-bit APCS version of FPEmulator

                GBLL   GSWorkspaceInKernelBuffers      ; Move gstrans workspace into the kernel buffers area to fix redirection
GSWorkspaceInKernelBuffers SETL   {TRUE}        ; and everything else that suffers from the dodgy use of scratch space.

                GBLL    EarlierReentrancyInDAShrink
EarlierReentrancyInDAShrink SETL {TRUE}         ; fix for RAMFS and new FileCore (causes reentrant DA shrink/remove)

                GBLL    OnlyKernelCanAccessHardwareVectors
OnlyKernelCanAccessHardwareVectors SETL {TRUE}  ; if true, only the Kernel is permitted to write to the hardware vectors
                                                ; while in 26-bit mode. If false, the whole ROM can (including BASIC
                                                ; and the Shared C Library - eg any memcpy!)

                GBLL   LongCommandLines         ; first introduced for Ursula, merged into HAL kernel
LongCommandLines SETL   {TRUE}
  [ LongCommandLines
a72 1
  ]
a73 2
                GBLL    StrongARM
                GBLL    SAcleanflushbroken      ; whether StrongARM single MCR for DC clean+flush broken (is always for SA110)
a74 1
                GBLL    StrongARM_POST          ; whether to run POST for StrongARM (and possibly ARM8)
a78 1
                GBLL    ECC                     ; use ECC on XScale. May compromise other ARM compatibility
d80 6
a85 4
StrongARM          SETL {TRUE}
SAcleanflushbroken SETL {TRUE}  :LAND: StrongARM
SASTMhatbroken     SETL {TRUE}  :LAND: StrongARM
StrongARM_POST     SETL {TRUE}  :LAND: StrongARM
a89 1
ECC                SETL {FALSE}
a137 9
                GBLL    NoSPSRcorruption              ;set to true if IRQ dispatcher
NoSPSRcorruption SETL   {FALSE}                       ;preserves SPSR_SVC

                GBLL    RMTidyDoesNowt          ; if true, RMTidy does nothing
RMTidyDoesNowt  SETL    {TRUE}                  ; should really be "machine has FSLock in ROM"

                GBLL    RogerEXEY               ; if true, use Roger's new algorithm for XEigFactor, YEigFactor
RogerEXEY       SETL    {FALSE}                 ; Marketing don't like it!

a164 6
                GBLL    StorkPowerSave  ;True => power saving for Stork AND A4
StorkPowerSave  SETL    MorrisSupport   ;False=> older A4 code only

                GBLL    FixCallBacks            ; see Docs.CallbackChange
FixCallBacks    SETL    {TRUE}                  ; also addresses some atomicity problems

a169 3
                GBLL    DebugForcedReset        ; debug forced hard resets
DebugForcedReset SETL   {FALSE}

a190 21
 [ DebugForcedReset
Reset_CannotResetFlag           * 1
Reset_SysHeapCorrupt            * 2
Reset_WrongCamMapAddress        * 3
Reset_WrongNumberOfPages        * 4
Reset_CamMapCorrupt             * 5
Reset_VectorChainCorrupt        * 6
Reset_TickNodesCorrupt          * 7
Reset_DeviceVectorCorrupt       * 8
Reset_PoduleOrCallBackCorrupt   * 9
 ]

                    GBLL  AssembleKEYV
AssembleKEYV        SETL  {TRUE}          ; Use KEYV.

                    GBLL  AssemblePointerV
AssemblePointerV    SETL  {TRUE}          ; Use PointerV.

                    GBLL  ProcessorVectors
ProcessorVectors    SETL  {TRUE}          ; Processor vectors indirected through 0 page.

a206 2
                    GBLS  GetPalette
                    GBLS  GetMemInfo
a207 3
GetMemInfo          SETS  "GET s.MemInfo"

GetPalette          SETS  "GET s.vdu.vdupalxx"
@


4.2
log
@Delete pre-HAL and 26bit code
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * HAL
  * HAL26
  * HAL32
  * No26bitCode
  * No32bitCode
  * IncludeTestSrc
  * FixR9CorruptionInExtensionSWI
  Various old files have also been removed (POST code, Arc/STB keyboard drivers, etc.)
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.49. Tagged as 'Kernel-5_49'
@
text
@a21 1
                [ Module_MinorVersion = "" :LOR: :LNOT: STB
a22 3
                |
VersionNo       SETS  "$VString ($Date) $Module_MinorVersion"
                ]
a53 8
;RISC OS 3.71 onwards assumed bus timings - if true, then ROM speeds atc are assumed according to IOMD ID regs. as follows:
;     if IOMD (Risc PC)     ROM ticks 5-3 (assumed bus 32 MHz)
;     if 7500 (A7000)       ROM ticks 5-3 (assumed bus 32 MHz), all clocks divide-by-1
;     if 7500FE (A7000+)    ROM ticks 5-3,half speed (asssumed bus 64 MHz), EDO memory, divide-by-2 I/O, divide-by-1 CPU and memory
;
                GBLL    RO371Timings
RO371Timings    SETL    :LNOT: STB

a56 4
; For development on Customer M hardware only
                GBLL    ParallelFlashUpgrade
ParallelFlashUpgrade SETL {FALSE}

a60 20
  [ :LNOT: RO371Timings

                GBLL    NormalSpeedROMS
 [ STB
NormalSpeedROMS SETL    {TRUE}           ;use FALSE for slow EPROMS
 |
NormalSpeedROMS SETL    {FALSE}          ;use FALSE for slow EPROMS
 ]

                GBLL    AutoSpeedROMS
AutoSpeedROMS   SETL    {TRUE} :LAND: :LNOT: STB

                GBLL    RISCPCBurstMode
RISCPCBurstMode SETL    {FALSE}
;>>>RCM says if the FRM approves the use of burst mode ROMS for
;>>>RISC PC (no reason why it shouldn't) all references to RISCPCBurstMode
;>>>could be replaced by NormalSpeedROMS

  ] ; :LNOT:RO371Timings

d62 1
a62 1
DoInitialiseMode SETL   {TRUE} :LAND: Embedded_UI
d86 1
a86 1
ProtectStationID        SETL :LNOT:Embedded_UI
d98 1
a98 1
LCDInvert       SETL    {TRUE} :LAND: :LNOT: STB
d101 1
a101 1
LCDSupport      SETL    {TRUE} :LAND: :LNOT: STB
a246 3
                GBLL    InterlacedPointer
InterlacedPointer SETL {TRUE} :LAND: STB        ; enable code to do proper interlaced pointer

d298 1
a298 1
UseNewFX0Error      SETL  (:LNOT: Embedded_UI) :LAND: ((Version :AND: 1) = 1) ; Whether *FX 0 should show the ROM link date instead of the UtilityModule date
a311 6
                    GBLS  GetFlashROM
 [ ParallelFlashUpgrade
GetFlashROM         SETS  "GET s.FlashROM"
 |
GetFlashROM         SETS  ""
 ]
@


4.1
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@a57 8
                GBLL    IncludeTestSrc  ; whether test code is included
IncludeTestSrc  SETL    :LNOT: HAL

                GBLL    HAL26
                GBLL    HAL32           ; HAL32 indicates the new 32-bit memory map in use.
HAL32           SETL    HAL :LAND: No26bitCode
HAL26           SETL    HAL :LAND: :LNOT: No26bitCode

d215 1
a215 1
ChocolateAMB           SETL {TRUE} :LAND: No26bitCode   ; not implemented for 26bit kernel at present
a279 3
                GBLL    FixR9CorruptionInExtensionSWI   ; whether R9 corruption by ExtensionSWI handler is fixed
FixR9CorruptionInExtensionSWI   SETL    No26bitCode     ; currently FALSE as CC's !SpellMod (possibly others) rely on it being broken

a359 1
                    GBLS  GetHAL
a363 19
 [ HAL
GetHAL              SETS  "GET s.HAL"
 |
GetHAL              SETS   ""
 ]
                    GBLS  GetKbdDrA1
 [ Keyboard_Type = "A1A500"
GetKbdDrA1          SETS  "GET s.PMF.KbdDrA1"
 |
GetKbdDrA1          SETS  ""
 ]
                    GBLS  GetKbdRes
 [ :LNOT: HAL
 [ Keyboard_Type = "A1A500"
GetKbdRes           SETS  "GET s.KbdResA1"
 |
GetKbdRes           SETS  "GET s.KbdRes" :CC: Keyboard_Type
 ]
 ]
a386 1
 [ No26bitCode
a388 4
 |
USR2632 * USR26_mode
SVC2632 * SVC26_mode
 ]
@


1.1
log
@file Options was initially added on branch HAL.
@
text
@d1 426
@


1.1.2.1
log
@More stuff. Up to the desktop now; cache on, working keyboard. Some source
restructuring to start to make splitting it up into several object files more
feasible.
@
text
@a0 501
; Copyright 2000 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; amg 7/12/96 Renaissance
; Forcibly ensure that options only intended for one class of platform
; stay there. Generally this involves combining switches with the STB
; switch. The exception is processor architectural stuff. 7500FE is
; included always, and StrongARM has an independed switch.
;
; When you want to migrate features from one platform to another you'll
; find that every occurence of feature switches has been qualified with
; the appropriate sense of the STB switch. This is to remind you to think
; about what you're about to do! Check whether the code actually will work
; at all on something that is or is not a STB class product.
;
; Using the STB switch this aggressively also help ensure that there's
; no unexpected code crossover in the initial merge.

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; now the conditional flags for the version we want
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                GBLL    CacheOff
CacheOff        SETL    {FALSE}

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; essential global variables
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                GET   Version
                GBLS  VersionNo
                [ Module_MinorVersion = ""
VersionNo       SETS  "$VString ($Date)"
                |
VersionNo       SETS  "$VString ($Date) $Module_MinorVersion"
                ]

; SystemName moved to Machine.* header files.

                GBLS  MosTitle
MosTitle        SETS  "$SystemName $VersionNo"

                GBLL  AddTubeBashers
AddTubeBashers  SETL  {FALSE}

Tube_Normal     *       1
Tube_Simulator  *       2

                GBLA    TubeType
TubeType        SETA    Tube_Simulator

UserMemStart    * &8000

                GBLL  ExceptionsAreErrors
ExceptionsAreErrors SETL  1=1

AssemblingArthur SETL  {TRUE}
; defined in hdr.system to allow conditionals in macros

                GBLL    DoingVdu
DoingVdu        SETL    {FALSE}         ; so can get KeyWS!
                GBLL    Module
Module          SETL    {FALSE}

                GBLL    IncludeTestSrc  ; whether test code is included
IncludeTestSrc  SETL    :LNOT: HAL

;RISC OS 3.71 onwards assumed bus timings - if true, then ROM speeds atc are assumed according to IOMD ID regs. as follows:
;     if IOMD (Risc PC)     ROM ticks 5-3 (assumed bus 32 MHz)
;     if 7500 (A7000)       ROM ticks 5-3 (assumed bus 32 MHz), all clocks divide-by-1
;     if 7500FE (A7000+)    ROM ticks 5-3,half speed (asssumed bus 64 MHz), EDO memory, divide-by-2 I/O, divide-by-1 CPU and memory
;
                GBLL    RO371Timings
RO371Timings    SETL    :LNOT: STB

; For development on Customer M hardware only
                GBLL    ParallelFlashUpgrade
ParallelFlashUpgrade SETL {FALSE}

;whether we support running on the (Risc PC) emulator
                GBLL    EmulatorSupport
EmulatorSupport SETL    {TRUE}

  [ :LNOT: RO371Timings

                GBLL    NormalSpeedROMS
 [ STB
NormalSpeedROMS SETL    {TRUE}           ;use FALSE for slow EPROMS
 |
NormalSpeedROMS SETL    {FALSE}          ;use FALSE for slow EPROMS
 ]

                GBLL    AutoSpeedROMS
AutoSpeedROMS   SETL    {TRUE} :LAND: :LNOT: STB

                GBLL    RISCPCBurstMode
RISCPCBurstMode SETL    {FALSE}
;>>>RCM says if the FRM approves the use of burst mode ROMS for
;>>>RISC PC (no reason why it shouldn't) all references to RISCPCBurstMode
;>>>could be replaced by NormalSpeedROMS

  ] ; :LNOT:RO371Timings

                GBLL    DoInitialiseMode
DoInitialiseMode SETL   {TRUE} :LAND: STB

 [ STB
                GBLL    Select16BitSound        ; STBs and pre-IOMD systems don't have this link
Select16BitSound SETL   {FALSE}
 |
                GBLL    Select16BitSound
Select16BitSound SETL   {TRUE}
 ]
                GBLL    Japanese16BitSound
Japanese16BitSound SETL {TRUE} :LAND: STB

                  GBLL   ChopOffTheGoolies
ChopOffTheGoolies SETL  {FALSE}

                GBLL   ChecksumCMOS
ChecksumCMOS    SETL  {TRUE}

                GBLL    ResetIndirected ; new flag to say if instruction at start of ROM does LDR PC, [PC, #x]
ResetIndirected SETL    {TRUE}

                GBLL    SqueezeMods     ; whether squeezed modules are allowed
SqueezeMods     SETL    {TRUE}

                GBLL    International   ; whether text and error messages come from  messaeges file.
International   SETL    {TRUE}

                GBLL    CacheCommonErrors       ; whether common internationalised errors are cached in sysheap
CacheCommonErrors       SETL    International :LAND: {TRUE}

                GBLL    MouseBufferManager      ; Whether mouse uses buffer manager
MouseBufferManager      SETL    {TRUE}

                GBLL    IrqsInClaimRelease      ; Whether OS_Claim/Release restore IRQ's before releasing heap node
IrqsInClaimRelease      SETL  {TRUE}

                GBLL    TickIrqReenter          ; Whether TickEventChain processing re-enables IRQ's
TickIrqReenter  SETL    {TRUE}

                GBLL    SoftResets              ; If false, always force a hard reset
SoftResets      SETL    {FALSE}

                GBLL    AlwaysClearRAM          ; If true, clear RAM on every break/reset
AlwaysClearRAM  SETL    {TRUE}

                GBLL    CacheCMOSRAM            ; Whether to keep a RAM copy of CMOS RAM for faster access
CacheCMOSRAM    SETL    MEMM_Type = "ARM600"    ; (Space only allocated on ARM600 versions)

                GBLL    LCDInvert
LCDInvert       SETL    (VIDC_Type = "VIDC20") :LAND: {TRUE} :LAND: :LNOT: STB

                GBLL    ExpandedCamMap          ; two words per entry instead of one
ExpandedCamMap  SETL    MEMM_Type = "ARM600"    ; NB ARM600 code assumes expanded map

                GBLL    UseFreePool             ; whether OS_ChangeDynamicArea puts and gets memory to and from free pool
UseFreePool     SETL    MEMM_Type = "ARM600" :LAND: {TRUE}

                GBLL    NewCDA                  ; new change dynamic area code
NewCDA          SETL    MEMM_Type = "ARM600" :LAND: {TRUE}    ; let's give it a try!

                GBLL    ModeSelectors           ; whether mode selectors are understood
ModeSelectors   SETL    (VIDC_Type = "VIDC20") :LAND: {TRUE}

                GBLL    MakeModeSelectorsForModeNumbers
MakeModeSelectorsForModeNumbers SETL    ModeSelectors :LAND: {FALSE}    ; not actually needed after all

                GBLL    IgnoreVRAM              ; if true, don't add VRAM to the RAM list (+ don't use for screen)
IgnoreVRAM      SETL    {FALSE}

                GBLL    LateAborts              ; if true, use late abort mode on ARM600 (compulsory on ARM700)
LateAborts      SETL    MEMM_Type = "ARM600" :LAND: {TRUE}

                GBLL    ShrinkableDAs           ; if true, support Shrinkable Dynamic Areas (eg. CacheFS)
ShrinkableDAs   SETL    {TRUE}

                GBLL    ShadowROM               ; if true, the ROM is mirrored above
ShadowROM       SETL    {FALSE}                 ; &FF800000

                GBLL    Interruptible32bitModes
Interruptible32bitModes SETL {TRUE}             ;if true, limited 32-bit mode code support (interrupt handler does not assume
                                                ; 26-bit foreground), also allows faster, 32-bit APCS version of FPEmulator

                  GBLL  EarlierReentrancyInDAShrink ; fix for RAMFS and new FileCore (causes reentrant DA shrink/remove)
EarlierReentrancyInDAShrink SETL {TRUE}

                GBLL    OnlyKernelCanAccessHardwareVectors
OnlyKernelCanAccessHardwareVectors SETL {TRUE}  ; if true, only the Kernel is permitted to write to the hardware vectors
                                                ; while in 26-bit mode. If false, the whole ROM can (including BASIC
                                                ; and the Shared C Library - eg any memcpy!)

                GBLL    StrongARM
                GBLL    SAcleanflushbroken      ;whether StrongARM single MCR for DC clean+flush broken (is always for SA110)
                GBLL    SASTMhatbroken          ;whether ROM must support SA110's with broken STM^ (revision 3 should fix this)
                GBLL    StrongARM_POST          ;whether to run POST for StrongARM (and possibly ARM8)

                GBLL    ARM810support           ;StrongARM must also be true for this to be useful
                GBLL    ARM810cleanflushbroken  ;whether single MCR for IDC clean+flush broken (a la StrongARM!)
                GBLL    ARM810fastclock         ;whether to attempt to use fast clock (false means bus clock)
                GBLL    ARM810usePLL            ;whether to use PLL for fast clock (else RefClk pin)
                GBLL    ARM810_POST             ;whether to run POST for ARM810 (StrongARM_POST must also be true)

                GBLL    ARM6support

StrongARM          SETL {TRUE}
SAcleanflushbroken SETL {TRUE}  :LAND: StrongARM
SASTMhatbroken         SETL {TRUE}  :LAND: StrongARM
StrongARM_POST         SETL {TRUE}  :LAND: StrongARM

ARM810support          SETL {FALSE} :LAND: StrongARM
ARM810cleanflushbroken SETL {TRUE}  :LAND: ARM810support
ARM810fastclock        SETL {FALSE} :LAND: ARM810support
ARM810usePLL           SETL {TRUE}  :LAND: ARM810fastclock
ARM810_POST            SETL {FALSE} :LAND: ARM810support

ARM6support            SETL {TRUE}


                ;mjs
                ;Chocolate flavours implemented for Ursula, but they are generally useful performance enhancements
                ;(not all Ursula performance improvements are flagged with Chocolate - eg. simple changes such as slicker SWI
                ;despatch and wider SWI hashing)
                ;
                ;any ARM
                GBLL    ChocolateSysHeap        ;whether to save cost of SysHeap block claim/release for common cases (eg. callback blocks)
                                                ;also reduces SysHeap stress by using fewer blocks in total
                GBLL    ChocolateOSMod          ;whether to reduce SysHeap stress in module handling
                GBLL    ChocolateSysVars        ;whether to do performance improvements in system variable handling
                GBLL    ChocolateOscli          ;whether to do performance improvements in Oscli command stuff
                GBLL    ChocolateService        ;whether to implement fast module service call distribution (uses table introduced
                                                ;into module format by Ursula API

ChocolateSysHeap       SETL {TRUE}
ChocolateOSMod         SETL {TRUE}
ChocolateSysVars       SETL {TRUE}
ChocolateOscli         SETL {TRUE}
ChocolateService       SETL {TRUE}
  [ ChocolateSysHeap
                       GBLA  MaxChocolateCBBlocks  ;max quick CallBack blocks available at any one time (else ordinary heap nodes used)
                       GBLA  MaxChocolateSVBlocks  ;max quick Software Vector blocks available at any one time (else ordinary heap nodes used)
                       GBLA  MaxChocolateTKBlocks  ;max quick Ticker blocks available at any one time (else ordinary heap nodes used)
                       GBLA  MaxChocolateMRBlocks  ;max module ROM blocks before ordinary heap nodes are used (reduces total no. nodes in SysHeap)
                       GBLA  MaxChocolateMABlocks  ;max module Active blocks before ordinary heap nodes are used
                       GBLA  MaxChocolateMSBlocks  ;max module SWI Hash blocks before ordinary heap nodes are used
MaxChocolateCBBlocks   SETA   32
MaxChocolateSVBlocks   SETA  128
MaxChocolateTKBlocks   SETA   32
MaxChocolateMRBlocks   SETA  150
MaxChocolateMABlocks   SETA  150
MaxChocolateMSBlocks   SETA  150
  ]

                          GBLL    Oscli_QuickAliases
                          GBLL    Oscli_HashedCommands
Oscli_QuickAliases        SETL    {TRUE} :LAND: ChocolateOscli   ;try to do a better job of checking for aliases
Oscli_HashedCommands      SETL    {TRUE} :LAND: ChocolateOscli   ;try to do a better job of finding commands


                GBLL    VCOstartfix              ;code in early kernel to fix VCO start problem on A7000 (esp. 7500FE)
VCOstartfix     SETL    {TRUE}


                     GBLL    mjsServiceTrace          ;for statistics gathering on service calls only
mjsServiceTrace      SETL    {FALSE}
                     GBLL    mjsSysHeapNodesTrace     ;for statistics gathering on some SysHeap nodes only
mjsSysHeapNodesTrace SETL    {FALSE}

                GBLL    NoSPSRcorruption              ;set to true if IRQ dispatcher
NoSPSRcorruption SETL   {FALSE}                       ;preserves SPSR_SVC

                GBLL    CheckProtectionLink     ; if true, disallow CMOS RAM changes if link in protected position
CheckProtectionLink SETL (IO_Type = "IOMD") :LAND: {TRUE}       ; NB affects Delete/Copy/R/T and 0-9/.

                GBLL    RMTidyDoesNowt          ; if true, RMTidy does nothing
RMTidyDoesNowt  SETL    (MEMC_Type = "IOMD") :LAND: {TRUE} ; should really be "machine has FSLock in ROM"

                GBLL    RogerEXEY               ; if true, use Roger's new algorithm for XEigFactor, YEigFactor
RogerEXEY       SETL    {FALSE}                 ; Marketing don't like it!

                GBLL    DAF_SpecifyBit          ; enable use of dynamic area flag which says an area may need specific pages
DAF_SpecifyBit  SETL    {TRUE}

                GBLL    DebugROMInit
DebugROMInit    SETL    (MEMC_Type = "IOMD") :LAND: {TRUE}

                GBLL    DebugROMPostInit ; Displays when the PostInit service call is sent to each ROM module (currently works on vanilla service call handling only)
DebugROMPostInit SETL    (MEMC_Type = "IOMD") :LAND: :LNOT: ChocolateService :LAND: {TRUE}

                GBLL    DebugROMErrors
DebugROMErrors  SETL    (MEMC_Type = "IOMD") :LAND: {TRUE}

                GBLL    DebugHeaps              ; initialise claimed and freed blocks
DebugHeaps      SETL    {FALSE}                 ; (may slow things down unacceptably)

; ChangeDynamicArea and related options

        GBLL    DebugCDA
DebugCDA SETL {FALSE}

        GBLL    DebugCDA2
DebugCDA2 SETL {FALSE}

        GBLL    NewCDA2                 ; whether all the new CDA code is in there
NewCDA2 SETL NewCDA :LAND: {TRUE}

        GBLL    NewStyle_RMA            ; whether RMA is a new style area
NewStyle_RMA    SETL NewCDA :LAND: {TRUE}

        GBLL    NewStyle_SpriteArea     ; whether sprite area is a new style area
NewStyle_SpriteArea     SETL    NewCDA :LAND: {TRUE}

        GBLL    NewStyle_RAMDisc        ; whether RAM disc is a new style area
NewStyle_RAMDisc        SETL    NewCDA :LAND: {TRUE}

        GBLL    NewStyle_FontArea       ; whether font cache is a new style area
NewStyle_FontArea       SETL    NewCDA :LAND: {TRUE}

        GBLL    NewStyle_SysHeap        ; whether system heap is a new style area (node faked up)
NewStyle_SysHeap        SETL    NewCDA :LAND: {TRUE}

        GBLL    NewStyle_Screen         ; whether screen is a new style area
NewStyle_Screen         SETL    NewCDA :LAND: {TRUE}

        GBLL    NewStyle_All            ; whether all old-style areas have been converted to new-style
NewStyle_All    SETL    NewStyle_RMA :LAND: NewStyle_SpriteArea :LAND: NewStyle_RAMDisc :LAND: NewStyle_FontArea :LAND: NewStyle_SysHeap :LAND: NewStyle_Screen

                GBLL    StorkPowerSave  ;True => power saving for Stork AND A4
StorkPowerSave  SETL    MorrisSupport   ;False=> older A4 code only

                GBLL    LCDSupport      ;Whether LCD Support is assembled in or not
LCDSupport      SETL    {TRUE} :LAND: :LNOT: STB
                                        ;(First intro'd for Stork)

                GBLL    FixR9CorruptionInExtensionSWI   ; whether R9 corruption by ExtensionSWI handler is fixed
FixR9CorruptionInExtensionSWI   SETL    {FALSE}         ; currently FALSE as CC's !SpellMod (possibly others) rely on it being broken

                GBLL    InterlacedPointer
InterlacedPointer SETL {TRUE} :LAND: STB                ; enable code to do proper interlaced pointer

                GBLL    ValidateCMOS            ; Apply special CMOS-corruption detection code, and do minimal default settings.
ValidateCMOS    SETL    {TRUE} :LAND: STB

              [ DebugHeaps
                ! 0, "*** WARNING *** Heap debugging assembled in"
              ]

                GBLS    GetMessages
              [ International
GetMessages     SETS    "GET s.MsgCode"
              |
GetMessages     SETS    ""
              ]

                GBLL    DebugForcedReset        ; debug forced hard resets
DebugForcedReset SETL   {FALSE}

                GBLA    ConfiguredLang
ConfiguredLang  SETA    0;10                      ; default configured language

                GBLA    FirstUnpluggableModule
FirstUnpluggableModule SETA 8                   ; Podule, FileSwitch, ResourceFS, Messages, MessageTrans,
                                                ; TerritoryManager, UKTerritory

 [ DebugForcedReset
Reset_CannotResetFlag           * 1
Reset_SysHeapCorrupt            * 2
Reset_WrongCamMapAddress        * 3
Reset_WrongNumberOfPages        * 4
Reset_CamMapCorrupt             * 5
Reset_VectorChainCorrupt        * 6
Reset_TickNodesCorrupt          * 7
Reset_DeviceVectorCorrupt       * 8
Reset_PoduleOrCallBackCorrupt   * 9
 ]

; Flags for RISC OS Blue changes
;
                        GBLL    AssembleKEYV
AssembleKEYV            SETL    {TRUE}          ; Use KEYV.
                        GBLL    AssemblePointerV
AssemblePointerV        SETL    {TRUE}          ; Use PointerV.
                        GBLL    PollMouse
PollMouse               SETL    {FALSE}         ; Poll mouse.

                        GBLL    ProcessorVectors
ProcessorVectors        SETL    {TRUE}          ; Processor vectors indirected through 0 page.

                    GBLS  GetUnsqueeze
 [ SqueezeMods
GetUnsqueeze        SETS  "GET s.Unsqueeze"
 |
GetUnsqueeze        SETS  ""
 ]
                    GBLS  GetFlashROM
 [ ParallelFlashUpgrade
GetFlashROM         SETS  "GET s.FlashROM"
 |
GetFlashROM         SETS  ""
 ]
                    GBLS  GetKernelMEMC
                    GBLS  GetPalette
                    GBLS  GetMemInfo
                    GBLS  GetHAL
GetKernelMEMC       SETS  "GET s.ARM600"
GetMemInfo          SETS  "GET s.MemInfo"

GetPalette          SETS  "GET s.vdu.vdupalxx"
 [ HAL
GetHAL              SETS  "GET s.HAL"
 |
GetHAL              SETS   ""
 ]


                    GBLS  GetKbdDrA1
 [ Keyboard_Type = "A1A500"
GetKbdDrA1          SETS  "GET s.PMF.KbdDrA1"
 |
GetKbdDrA1          SETS  ""
 ]

                    GBLS  GetKbdRes
 [ Keyboard_Type = "A1A500"
GetKbdRes           SETS  "GET s.KbdResA1"
 |
GetKbdRes           SETS  "GET s.KbdRes" :CC: Keyboard_Type
 ]

; control switches for med_00001 (the flood fill routines 1024 line limit).
; Switches have the following effects:
;
; _userma     Will use rma if >48K is free, up to a maximum of 128K. It will
;             try to acheive the latter by growing the rma if possible.
; _twowords   Use two word entries in the queue. This overcomes the limitation
;             of the original packed word format.
; _debug      Store the queue start, end and 'amount to change the rma dynamic
;             area by' in the first three words of OldIRQ1VSpace

                    GBLL  med_00001_userma
                    GBLL  med_00001_twowords
                    GBLL  med_00001_debug

med_00001_userma    SETL  {TRUE}
med_00001_twowords  SETL  {TRUE}
;med_00001_debug     SETL  {TRUE}

;med_00001_userma    SETL  {FALSE}
;med_00001_twowords  SETL  {FALSE}
med_00001_debug     SETL  {FALSE}

 [ med_00001_userma
smallest_rma_size   * (48*1024)                  ; define the low threshold for rma use
largest_rma_size    * (128*1024)                 ; and the ceiling for rma use
 ]

 [ med_00001_debug
 ! 0,""
 ! 0,",-----------------------------------------------------------------,"
 ! 0,"| **** WARNING ****                                               |"
 ! 0,"|                                                                 |"
 ! 0,"| Audit trail debugging for MED-00001 is enabled. This reuses the |"
 ! 0,"| first three words of OldIRQ1Vspace. This should be turned off   |"
 ! 0,"| once MED-00001 has been tested and marked 'fixed'.              |"
 ! 0,"|                                                                 |"
 ! 0,"| Usage:                                                          |"
 ! 0,"|   +0   start of area used by flood fill                         |"
 ! 0,"|   +4   end+1 of area used by flood fill                         |"
 ! 0,"|   +8   amount the rma was grown by                              |"
 ! 0,"'-----------------------------------------------------------------'"
 ! 0,""
 ]

; Ickle macros. We want to be able to turn IRQs on and off fast in the
; code in various places. To do this easily, have a name for the
; SVC26/32 mode we run in.

 [ No26bitCode
USR2632 * USR32_mode
SVC2632 * SVC32_mode
 |
USR2632 * USR26_mode
SVC2632 * SVC26_mode
 ]

MaxSwi  * OS_Hardware+1

        END
@


1.1.2.2
log
@Stuff. A bit of touchscreen, I expect, and probably some other bits too.
@
text
@d372 1
a372 1
ConfiguredLang  SETA    10                      ; default configured language
@


1.1.2.3
log
@reintroduce Ursula AMBControl, recoded with generic ARMop style, not debugged yet

Version 5.35, 4.79.2.12. Tagged as 'Kernel-5_35-4_79_2_12'
@
text
@a238 1
                ;
a246 4
                ;possibly enabled at run time for some ARMs only
                ;
                GBLL    ChocolateAMB            ;whether to compile support for Lazy task swapping

a251 1
ChocolateAMB           SETL {TRUE}
@


1.1.2.4
log
@Check-in of the few last-minute changes for the Customer L demo. Nothing
exciting, apart from an extended touchscreen API.

Version 5.35, 4.79.2.13. Tagged as 'Kernel-5_35-4_79_2_13'
@
text
@d304 1
a304 1
DebugROMInit    SETL    (MEMC_Type = "IOMD") :LAND: {FALSE}
d307 1
a307 1
DebugROMPostInit SETL    (MEMC_Type = "IOMD") :LAND: :LNOT: ChocolateService :LAND: {FALSE}
d310 1
a310 1
DebugROMErrors  SETL    (MEMC_Type = "IOMD") :LAND: {FALSE}
@


1.1.2.5
log
@Customer L-y HAL-y IIC-y type stuff. It's great.
@
text
@d304 1
a304 1
DebugROMInit    SETL    (MEMC_Type = "IOMD") :LAND: {TRUE}
d310 1
a310 1
DebugROMErrors  SETL    (MEMC_Type = "IOMD") :LAND: {TRUE}
d505 1
a505 1
MaxSwi  * OS_IICOp+1
@


1.1.2.6
log
@Added some missing IIC and USB files.
An attempt to do NVMemory by using part of the Flash that the OS is sitting
in for Customer L. Programming algorithm works, but I'm not confident that the
Kernel does the right thing yet.

Version 5.35, 4.79.2.19. Tagged as 'Kernel-5_35-4_79_2_19'
@
text
@d361 1
a361 1
ValidateCMOS    SETL    {TRUE}
@


1.1.2.7
log
@Reimplement Lazy task swapping, an amusing idea from Ursula,
would have done it sooner but couldn't be bothered (humour).
Currently activates for all ARMs flagged as base-restored
abort model. No handling of eg. StrongARM pre-revT bug, but
then the kernel no longer runs on StrongARM (progress).
Still some details to fix: all aborts in current app space
assumed to be missing pages, but this must be fixed to
handle abort code in app space, things like debuggers
marking code read only.

Plus, small fixes:
  OS_Memory 8 returns vaguely useful info for RAM,VRAM
  in HAL build (temporary partial implementation)
  Broken handling of old BBC commands with (fx,tv etc)
  with no spaces fixed (fudgeulike code from Ursula,
  now 32-bit).

Version 5.35, 4.79.2.31. Tagged as 'Kernel-5_35-4_79_2_31'
@
text
@d246 1
a246 1
                                                ;into module format by Ursula API)
d257 1
a257 1
ChocolateAMB           SETL {TRUE} :LAND: No26bitCode   ; not implemented for 26bit kernel at present
@


1.1.2.8
log
@* Allows interrupt-driven use of PointerV (as well as polled).
* Allows HAL-driven software resets.
* Sound buffers corrected to be uncacheable.

Version 5.35, 4.79.2.33. Tagged as 'Kernel-5_35-4_79_2_33'
@
text
@d134 3
@


1.1.2.9
log
@Merge in long command line support from Ursula kernel.
Look for LongCommandLine flag, command line size currently
set at 1k.
For HAL/32bit builds, the kernel buffer space is at high
(top bit set) address, which may break some code using signed
comparisons. So *beware* that there may be some latent
bugs in old kernel code using these buffers, not yet found.
One such bug, in s.Arthur2 found and fixed.
Tested moderately on ARM9 desktop build.
Lovely to reimplement things I did two and half years ago.

Version 5.35, 4.79.2.37. Tagged as 'Kernel-5_35-4_79_2_37'
@
text
@a202 6
                 GBLL   LongCommandLines        ; first introduced for Ursula, merged into HAL kernel
LongCommandLines SETL   {TRUE}
  [ LongCommandLines
LongCLISize          * 1024                     ; buffer size for long commands
  ]

@


1.1.2.10
log
@Reimplement enhancements to kernel Dynamic Area support from
Ursula. Quite a hairy code merge really, so let's hope it is
worth it to someone. What you get (back after 2 or 3 years):
- much more efficient for largish numbers of DAs (relevance
  to current build = approx 0)
- fancy reason codes to support fast update of
  Switcher bar display (relevance = 0)
- support for clamped maximum area sizes, to avoid address
  space exhaustion with big memory (relevance = 0)
- better implementation of shrinkable DAs, performance
  wise (if lots of DAs, relevance = approx 0)
- support for 'Sparse' DAs. Holey dynamic areas, Batman!
  (relevance, go on someone use the darned things)
Moderately development tested on HAL/32bit ARM9 desktop.
Note the Switcher should be compiled to use the new
reason codes 6&7, for fabled desktop builds.

Also, during this work, so I could see the wood for the
trees, redid some source code clean up, removing pre-Medusa
stuff (like I did about 3 years ago on Ursula, sigh). That's
why loads of source files have changed. The new DA stuff
is confined pretty much to hdr.KernelWS and s.ChangeDyn.

Ta.

Version 5.35, 4.79.2.38. Tagged as 'Kernel-5_35-4_79_2_38'
@
text
@d159 1
a159 1
CacheCMOSRAM    SETL    {TRUE}
d162 10
a171 1
LCDInvert       SETL    {TRUE} :LAND: :LNOT: STB
d174 1
a174 1
ModeSelectors   SETL    {TRUE}
d183 1
a183 1
LateAborts      SETL    {TRUE}
d214 6
d227 6
a236 4
                ;concept of sparsely mapped dynamic areas introduced for Ursula
                GBLL    DA_Batman               ;Holey dynamic areas Batman!

                ;mjs
a254 2
DA_Batman              SETL {TRUE}

d295 1
a295 1
CheckProtectionLink  SETL {TRUE}                ; NB affects Delete/Copy/R/T and 0-9/.
d298 1
a298 1
RMTidyDoesNowt  SETL    {TRUE} ; should really be "machine has FSLock in ROM"
d303 3
d307 1
a307 1
DebugROMInit    SETL    {TRUE}
d310 1
a310 1
DebugROMPostInit SETL    (:LNOT: ChocolateService) :LAND: {FALSE}
d313 1
a313 1
DebugROMErrors  SETL    {TRUE}
d326 23
@


1.1.2.11
log
@Lots of Tungsten work.

Version 5.35, 4.79.2.48. Tagged as 'Kernel-5_35-4_79_2_48'
@
text
@d43 1
a43 1
                [ Module_MinorVersion = "" :LOR: :LNOT: STB
a172 3
                GBLL    UseGraphicsV            ; if true, use GraphicsV, rather than going straight
UseGraphicsV    SETL    {TRUE}                  ; to the hardware (or HAL)

a205 3
                GBLL    XScaleMiniCache         ;is the XScale mini data-cache used (at all)
                GBLL    XScaleJTAGDebug
                GBLL    ECC                     ;use ECC on XScale. May compromise other ARM compatibility
d209 2
a210 6
SASTMhatbroken     SETL {TRUE}  :LAND: StrongARM
StrongARM_POST     SETL {TRUE}  :LAND: StrongARM

ARM6support        SETL {TRUE}

XScaleMiniCache    SETL {FALSE}
d212 1
a212 3
XScaleJTAGDebug    SETL {TRUE}

ECC                SETL {FALSE}
d289 1
a289 1
DebugROMInit    SETL    {FALSE}
d295 1
a295 7
DebugROMErrors  SETL    {FALSE}

                GBLL    DebugTerminal           ; default WRCH and RDCH through HAL
DebugTerminal   SETL    {FALSE}

                GBLL    DebugHALTX
DebugHALTX      SETL    {FALSE}
d317 1
a317 1
FixR9CorruptionInExtensionSWI   SETL    No26bitCode     ; currently FALSE as CC's !SpellMod (possibly others) rely on it being broken
d467 1
a467 1
MaxSwi  * OS_HeapSort32+1
@


1.1.2.12
log
@  Commit of kernel as featured in release 5.00.
Detail:
  Lots of changes since last version, at least the following:
  * Updated OS timestamp, removed alpha status
  * Negative INKEY OS version changed to &AA
  * GraphicsV is now alocated vector number &2A
  * ROM moved up to &FC000000
  * Max application slot increased to 512 Mbytes (for now)
  * Max size of RMA increased to 256 Mbytes
  * RMA is now first-created dynamic area (so it gets lowest address after
    top of application slot)
  * OS_Memory 10 reimplemeted
  * New OS_ReadSysInfo 6 values 18-22 added
  * OS_ReadSysInfo 8 gains flag bit to indicate soft power-off
  * Misc internal top-bit-set-address fixes
  * *ChangeDynamicArea can take sizes in megabytes or gigabytes
  * Magic word "&off" in R0 passed to OS_Reset powers down if possible
  * Added acceleration: block copy; CLS; text window scroll up; rectangle
    fill
  * Disabled LED flashing in page mode (liable to crash)
  * Masked sprite plot and VDU 5 text avoids reading the screen if possible
  * Framestore made USR mode accessible
  * Fix for VDU 5,127 bug - now relies on font definitions being in extreme
    quarters of memory, rather than bottom half
  * Allocated 64-bit OS_Convert... SWIs
  * IIC errors use allocated error numbers
  * Looks for Dallas RTC before Philips RTC because we're using a Philips
    NVRAM device with the same ID
  * Fix to bug that meant the oscillator in the Dallas RTC wasn't enabled
  * Default mouse type (USB) changed to allocated number
  * Ram disc max size increased to 128 Mbytes (Ursula merge) and made
    cacheable for StrongARMs (not XScale)
  * Branch through zero handler now works in USR mode, by use of a
    trampoline in the system stack to allow PC-relative register storage
  * Address exception handler changed to not use 0 as workspace
  * OS_Memory 13 extended to allow specification of cacheability and access
    privileges
  * Added OS_Memory 16 to return important memory addresses
  * RISCOS_MapInIO() takes cacheable flag in bit 3, access permissions in
    bits 10 and 11, doubly-mapped flag in bit 20, and access permissions
    specified flag in bit 21
  * Bug fix in last version for application abort handlers didn't quite
    work; register shuffle required
  * "Module is not 32-bit compatible" error now reports the module name
  * Default configured language changed from 10 to 11 (now Desktop again)

Version 5.35, 4.79.2.51. Tagged as 'Kernel-5_35-4_79_2_51'
@
text
@d132 1
a132 1
ChecksumCMOS    SETL   {TRUE}
d189 2
a190 2
                GBLL    EarlierReentrancyInDAShrink
EarlierReentrancyInDAShrink SETL {TRUE}         ; fix for RAMFS and new FileCore (causes reentrant DA shrink/remove)
d197 1
a197 1
                GBLL   LongCommandLines         ; first introduced for Ursula, merged into HAL kernel
d292 1
a292 1
CheckProtectionLink     SETL {TRUE}             ; NB affects Delete/Copy/R/T and 0-9/.
d295 1
a295 1
RMTidyDoesNowt  SETL    {TRUE}                  ; should really be "machine has FSLock in ROM"
d320 5
a324 2
                GBLL    DebugCDA
DebugCDA        SETL    {FALSE}
a325 2
                GBLL    DebugCDA2
DebugCDA2       SETL    {FALSE}
d358 1
a358 1
ConfiguredLang  SETA    11                      ; default configured language
@


1.1.2.13
log
@Support for keys held down in the HAL at power on.
*Configure ANYTHINGsize was broken due to not setting R0 to ReadUnsigned
IIC ack message uninternationalised
OS_Memory was saying we only had 4M of RAM
VDU4 scrolling when output was switched to sprite was causing corruption
on use of CTRL-J and CTRL-K
Default SystemSize CMOS set to 32k

Version 5.35, 4.79.2.55. Tagged as 'Kernel-5_35-4_79_2_55'
@
text
@a421 1
 [ :LNOT: HAL
a425 1
 ]
@


1.1.2.14
log
@  Miscellaneous stuff.
Detail:
  * Merged in the change to RISC OS 4.02 kernel that moved the GSTrans
    workspace out of scratch space.
  * Fixed a few bugs in callback postponement, and interrupt holes in
    callback dispatch. See Docs.CallbackChange for full info.
  * Fixed SystemSizeCMOS to SysHeapCMOS - wouldn't build as was.
  * Added an export of a C version of Hdr:HALDevice, based on the Hdr2H
    translation but with an additional struct definition. Required by
    SoundControl 1.00.
  * Added some additional location and ID allocations to Hdr:HALDevice.
    Required by today's HAL and SoundControl.
Admin:
  Partially tested.

Version 5.35, 4.79.2.56. Tagged as 'Kernel-5_35-4_79_2_56'
@
text
@a188 4
                 GBLL   GSWorkspaceInKernelBuffers      ; Move gstrans workspace into the kernel buffers area to fix redirection
GSWorkspaceInKernelBuffers SETL   {TRUE}		; and everything else that suffers from the dodgy use of scratch space.


a334 3

                GBLL    FixCallBacks            ; see Docs.CallbackChange
FixCallBacks    SETL    {TRUE}                  ; also addresses some atomicity problems
@


1.1.2.15
log
@OSDelink/RelinkApp now work on the list in opposite orders so that
the order of vector claims doesn't get toggled.
Fix for *FX5 not working due to a TST having been swapped for CMP.
Checkprotectionlink option added to HAL version so CMOS lock is
implemented.
Updated HAL docs.

Version 5.35, 4.79.2.58. Tagged as 'Kernel-5_35-4_79_2_58'
@
text
@d137 1
a137 1
                GBLL    International   ; whether text and error messages come from  messages file.
a320 3
              [ DebugHeaps
                ! 0, "*** WARNING *** Heap debugging assembled in"
              ]
d346 6
a351 2
                GBLL    ValidateCMOS            ; Apply special CMOS-corruption detection code,
ValidateCMOS    SETL    {TRUE}                  ; and do minimal default settings.
d367 1
a367 1
FirstUnpluggableModule  SETA 8                  ; Podule, FileSwitch, ResourceFS, Messages, MessageTrans,
@


1.1.2.16
log
@* Changed some STB switches to Embedded_UI
* Added use of CDVPoduleIRQs (from Hdr:Machine)
* Fixed checksum corruption in OS_NVMemory block writes ending just below
  the checksum byte.
* Fixed R4 corruption by OS_Byte 162 with certain HALs.

Version 5.35, 4.79.2.71. Tagged as 'Kernel-5_35-4_79_2_71'
@
text
@d116 1
a116 1
DoInitialiseMode SETL   {TRUE} :LAND: Embedded_UI
@


1.1.2.17
log
@Update the method the HAL kernel uses to determine the UtilityModule & ROM dates
Detail:
  Three main changes:
  * On odd-numbered (i.e. development) versions of the module, the UtilityModule will now take its date from the VersionNum file instead of using a hard-coded date
  * All build versions now look for the new "extended ROM footer" (as created by romlinker 0.04+) at the end of the ROM image and use it to determine the ROM build date for return by OS_ReadSysInfo 9,2. Failing to find the build date in the footer will cause OS_ReadSysInfo 9,2 to return 0.
  * On odd-numbered versions, OS_Byte 0 will now use the ROM build date (as found in the extended footer) to generate the error block that's returned to the user. This seems OK as the PRM describes OS_Byte 0 as returning the "creation date of the operating system". Plus it's a convenient way of getting the ROM build date into the Switcher, since the switcher uses OS_Byte 0. If the extended footer can't be found (or if the string isn't initialised yet, e.g. before Service_PostInit) the code falls back to a hard-coded string containing the date from the VersionNum file.
  File changes:
  Makefile - Updated to not create the obsolete Time+Date file (previously used for the ROM build date)
  Version - Use date from VersionNum file for development builds
  hdr/Options - New UseNewFX0Error variable/option to make it easy to check which OS_Byte 0 variant should be enabled
  hdr/KernelWS - Added new string buffers & extended ROM footer pointer to workspace
  s/Middle - Updated OS_ReadSysInfo 9 code, and added utility functions for searching the extended ROM footer for certain tags
  s/NewReset - Added a couple of calls to initialise the new string buffers just prior to Service_PostInit. This is required since OS_Byte/OS_ReadSysInfo shouldn't enable interrupts, but date conversion relies on the Territory module, which may enable interrupts.
  s/PMF/osbyte - Updated OS_Byte 0 code
Admin:
  Tested in Tungsten ROM, with and without the extended footer present.


Version 5.35, 4.79.2.115. Tagged as 'Kernel-5_35-4_79_2_115'
@
text
@a392 3
               GBLL  UseNewFX0Error
UseNewFX0Error SETL (:LNOT: Embedded_UI) :LAND: ((Version :AND: 1) = 1) ; Whether *FX 0 should show the ROM link date instead of the UtilityModule date

@


1.1.2.18
log
@Add new OS_ReadSysInfo 6 items codes. Change naming of PublicWS values.
Detail:
  s/Middle - Added some new OS_ReadSysInfo 6 items which are needed by the zero page relocation kernel. Also duplicated some existing entries to avoid conflicts with ROL's allocations.
  hdr/OSRSI6, Makefile - New header listing OS_ReadSysInfo 6 items
  hdr/PublicWS - Duplicated the workspace definitions for &0-&4000, but with a 'Legacy_' prefix to their names. Also added some new entries as needed by the zero page relocation kernel. Once existing modules have been updated to use OS_ReadSysInfo & the Legacy_ definitions, the old defs will be removed.
  hdr/KernelWS - Removed 'Export_' prefix from all the exported workspace values, since the kernel can now use the original names directly
  hdr/Options - Dummy HiProcVecs option so merging things will be a bit cleaner
Admin:
  Tested in ROM softload on Iyonix


Version 5.35, 4.79.2.118. Tagged as 'Kernel-5_35-4_79_2_118'
@
text
@a358 3
                GBLL    HiProcVecs              ; Relocate processor vectors and first 16K of workspace to &FFFF0000
HiProcVecs      SETL    {FALSE} ; Coming soon!

@


1.1.2.19
log
@Merge Cortex kernel into HAL branch
Detail:
  This is a full merge of the Cortex kernel back into the HAL branch. Since the Cortex kernel is/was just a superset of the HAL branch, at this point in time both branches are identical.
  Main features the HAL branch gains from this merge:
  - ARMv6/ARMv7 support
  - High processor vectors/zero page relocation support
  - objasm 4 warning fixes
  - Improved HAL related functionality:
    - Support for HAL-driven RTCs instead of kernel-driven IIC based ones
    - Support for arbitrary size machine IDs
    - Support for multiple IIC busses
    - Support for any HAL size, instead of hardcoded 64k size
    - Probably some other stuff I've forgotten
  - Probably a few bug fixes here and there
Admin:
  Tested on BB-xM & Iyonix.
  Was successfully flashed to ROM on an Iyonix to test the Cortex branch implementation of the 2010 RTC bug fix.
  IOMD build untested - but has been known to work in the past.


Version 5.35, 4.79.2.123. Tagged as 'Kernel-5_35-4_79_2_123'
@
text
@d93 1
a93 1
EmulatorSupport SETL    {FALSE} ; Disabled; QEMU doesn't like it
d222 1
a222 1
ARM6support        SETL (MEMM_Type = "ARM600") ; Needs updating for VMSAv6 compatability
d305 1
a305 1
DebugROMInit    SETL    {TRUE}
d311 1
a311 1
DebugROMErrors  SETL    {TRUE}
d317 1
a317 1
DebugHALTX      SETL    {TRUE}
d360 1
a360 3
HiProcVecs      SETL    {FALSE} ; Leave off for now
; In an ideal world, we'd use something like this:
; HiProcVecs      SETL    M_Tungsten :LOR: :LNOT: NoARMv6
d415 1
a415 1
GetKernelMEMC       SETS  "GET s." :CC: MEMM_Type
@


1.1.2.20
log
@Rationalise some old switches.
Export less in hdr:RISCOS.
Delete unused GetDecimalPair routine.
Move CheckYear with other RTC stuff out of PMF/osword.
Hide DebugROMInit and DebugROMErrors in release (even numbered) versions.

Version 5.35, 4.79.2.127. Tagged as 'Kernel-5_35-4_79_2_127'
@
text
@d15 14
d65 3
a70 3
                GBLL    ShowWS
ShowWS          SETL    {TRUE}          ; Make KernelWS be verbose

a72 1

a86 3
                GBLL    VCOstartfix              ;code in early kernel to fix VCO start problem on A7000 (esp. 7500FE)
VCOstartfix     SETL    {TRUE}

d128 3
a160 6
                GBLL    CheckProtectionLink     ; if true, disallow CMOS RAM changes if link in protected position
CheckProtectionLink     SETL {TRUE}             ; NB affects Delete/Copy/R/T and 0-9/.

                GBLL    ValidateCMOS            ; Apply special CMOS-corruption detection code,
ValidateCMOS    SETL    {TRUE}                  ; and do minimal default settings.

a163 3
                GBLL    LCDSupport              ; Whether LCD Support is assembled in or not
LCDSupport      SETL    {TRUE} :LAND: :LNOT: STB

a181 3
                GBLL    DA_Batman               ; Holey dynamic areas Batman!
DA_Batman       SETL {TRUE}                     ; concept of sparsely mapped dynamic areas introduced for Ursula

d185 6
a190 2
                GBLL    Interruptible32bitModes ; if true, limited 32-bit mode code support (interrupt handler does not assume
Interruptible32bitModes SETL {TRUE}             ; 26-bit foreground), also allows faster, 32-bit APCS version of FPEmulator
a191 2
                GBLL   GSWorkspaceInKernelBuffers      ; Move gstrans workspace into the kernel buffers area to fix redirection
GSWorkspaceInKernelBuffers SETL   {TRUE}	; and everything else that suffers from the dodgy use of scratch space.
d208 3
a210 3
                GBLL    SAcleanflushbroken      ; whether StrongARM single MCR for DC clean+flush broken (is always for SA110)
                GBLL    SASTMhatbroken          ; whether ROM must support SA110's with broken STM^ (revision 3 should fix this)
                GBLL    StrongARM_POST          ; whether to run POST for StrongARM (and possibly ARM8)
d213 1
a213 1
                GBLL    XScaleMiniCache         ; is the XScale mini data-cache used (at all)
d215 1
a215 1
                GBLL    ECC                     ; use ECC on XScale. May compromise other ARM compatibility
d222 2
a223 1
ARM6support        SETL (MEMM_Type = "ARM600")  ; Needs updating for VMSAv6 compatability
d225 1
d227 1
d230 5
d249 3
d253 3
a255 1
                                                ;possibly enabled at run time for some ARMs only
d282 5
d295 3
d305 1
a305 1
DebugROMInit    SETL    (Version :AND: 1) = 1   ; Yes for odd numbered development
d311 1
a311 1
DebugROMErrors  SETL    (Version :AND: 1) = 1   ; Yes for odd numbered development
d317 1
a317 1
DebugHALTX      SETL    (Version :AND: 1) = 1   ; Yes for odd numbered development
d321 5
d327 4
a330 1
                GBLL    DebugCDA2       ; ChangeDynamicArea and related options
a332 4
              [ DebugHeaps :LOR: DebugROMInit :LOR: DebugROMPostInit :LOR: DebugROMErrors :LOR: DebugCDA2
                ! 0, "*** WARNING *** Debugging assembled in"
              ]

d336 4
d347 11
a357 1
InterlacedPointer SETL {TRUE} :LAND: STB        ; enable code to do proper interlaced pointer
d386 8
a393 5
                    GBLL  AssembleKEYV
AssembleKEYV        SETL  {TRUE}          ; Use KEYV.

                    GBLL  AssemblePointerV
AssemblePointerV    SETL  {TRUE}          ; Use PointerV.
d395 2
a396 2
                    GBLL  PollMouse
PollMouse           SETL  {FALSE}         ; Poll mouse.
d398 2
a399 2
                    GBLL  ProcessorVectors
ProcessorVectors    SETL  {TRUE}          ; Processor vectors indirected through 0 page.
a400 9
                    GBLL  UseNewFX0Error
UseNewFX0Error      SETL  (:LNOT: Embedded_UI) :LAND: ((Version :AND: 1) = 1) ; Whether *FX 0 should show the ROM link date instead of the UtilityModule date

                    GBLS  GetMessages
 [ International
GetMessages         SETS  "GET s.MsgCode"
 |
GetMessages         SETS  ""
 ]
d426 2
d434 1
d451 2
d456 2
d460 5
d471 17
d500 2
@


1.1.2.21
log
@Get tag for 5.18.

Version 5.35, 4.79.2.131. Tagged as 'Kernel-5_35-4_79_2_131'
@
text
@d118 2
a119 2
                GBLL    ChecksumCMOS
ChecksumCMOS    SETL    {TRUE}
d179 1
a179 1
DA_Batman       SETL    {TRUE}                  ; concept of sparsely mapped dynamic areas introduced for Ursula
@


1.1.2.22
log
@Adoption of *CONFIGURE/STATUS CACHE commands
The kernel already looks after all other aspects of the ARM CPU, so can look after the cache control command too.
 HelpStrs.s:New tokens for help and syntax
 CmdHelp.s:UK help and syntax
 Arthur3.s:Tables updates for *CONFIGURE/STATUS, lined some stuff up, default error text sync'd with Hdr:NewErrors
 MoreComms.s:Parsing and doing of *CACHE
 Utility.s:Hashing table updated for *CACHE
Other minor changes
 hdr/Options:Bring 'MosVer' into the private header
 hdr/RISCOS:aasm aliases for SP removed, MainVars and MosVer made private, added definition of the start of application space
 HeapMan.s:Use of GRAB changed to Pull
 Offset of TutuCMOS changed for more informative PrintSoundCMOS
 PMF/osbyte.s:Use OsBytes header file in place of MainVars

Version 5.35, 4.79.2.151. Tagged as 'Kernel-5_35-4_79_2_151'
@
text
@d35 4
a38 1
MosVer          *       6               ; As returned by OS_Byte 0
@


1.1.2.23
log
@Merge with RPi branch
Detail:
  Merge the RPi branch with the HAL branch, ending RPi branch development
  Brief summary of changes brought in:
  * Added HAL_VideoStartupMode to allow the HAL to specify a startup mode for the OS
  * Fixed addresses being sent to GraphicsV_SetDMAAddress being wrong for external framestores (addresses were given as if internal framestore was in use)
  * Add InverseTextTransparency option for limited compile-time support for targets where framebuffer alpha channel is important
  * Fix ConfiguredLanguage for non-Tungsten builds
  * Update ARMv6 CPU detection to read cache parameters from cache type register instead of using KnownCPUTable
  * Add HALDebugHexTX/TX2/TX4 debug routines for writing out numbers via HAL
  * Use HAL_TimerIRQClear when clearing timer 0 interrupt instead of just HAL_IRQClear
  * Initialise FileLangCMOS using defines from Hdr:FSNumbers instead of magic numbers. Use SDFS on M_ARM11ZF.
  * Improved software mouse pointer support; software pointer now removed & restored in some of the same places the text cursor is
  * Improve support for external framestores; driver is now able to grow/shrink/move the framestore on mode changes if bit 5 of GraphicsV_DisplayFeatures R0 is set
  * GraphicsV_FramestoreAddress now has a default claimant which calls HAL_VideoFramestoreAddress
Admin:
  Tested on Raspberry Pi, Iyonix, OMAP3, IOMD


Version 5.35, 4.79.2.165. Tagged as 'Kernel-5_35-4_79_2_165'
@
text
@a291 3
                GBLL    InverseTextTransparency
InverseTextTransparency SETL    {FALSE}
                            
d322 2
a323 6
                GBLA    ConfiguredLang          ; default configured language
            [ M_Tungsten
ConfiguredLang  SETA    11
            |
ConfiguredLang  SETA    10
            ]
@


1.1.2.24
log
@Some tweaks ahead of an RPi code freeze.

Default CMOS tweaks now apply for the RPi hardware. Was missed in
the previous commit.

You can now build the Kernel without the ROM debug output stuff
that's enabled for odd-numbered builds, by passing FREEZE_DEV_REL=TRUE
into the makefile. For example, in the Components file, you'd add:

  -options FREEZE_DEV_REL=TRUE

onto the Kernel line.

Version 5.35, 4.79.2.171. Tagged as 'Kernel-5_35-4_79_2_171'
@
text
@a277 8
                GBLL    DebugROMErrors
                GBLL    DebugHALTX

              [ FreezeDevRel
DebugROMInit    SETL    {FALSE}
DebugROMErrors  SETL    {FALSE}
DebugHALTX      SETL    {FALSE}
              |
a278 3
DebugROMErrors  SETL    (Version :AND: 1) = 1   ; Yes for odd numbered development
DebugHALTX      SETL    (Version :AND: 1) = 1   ; Yes for odd numbered development
              ]
d281 4
a284 1
DebugROMPostInit SETL   (:LNOT: ChocolateService) :LAND: {FALSE}
d289 3
d294 1
a294 1

@


1.1.2.25
log
@Add OS_NVMemory 6
Permits applications to query what value would be used in the event of a CMOS reset for a given configure value. Notably, the configure plugins will use this in favour of 'ResetCMOS'.
hdr/Options: retire the 'Select16BitSound' switch, add comment for ChecksumCMOS switch
hdr/KernelWS: DuffEntry and Nowhere moved here
Kernel.s: Unused OSMD removed, retire single use of SPIRQ in favour of r13_irq
Middle.s: Retire SPIRQ
NewReset.s: Trim out 300+ lines of CMOS reset defaults, call OS_NVMemory 6 instead
PMF/i2cutils.s: CMOS reset default code and table moved here with refactoring
Note, the previous code preserved YearCMOS during the zeroing, only to unconditionally write it later - so have removed it from the zeroing step.
Note, the locations 80-111 are now considered as system CMOS in the allocations hence are now wiped too (previously they got skipped as user CMOS during R-power-on).

Tested on OMAP3 ROM with delete-power-on and R-power-on variants, and a simple BASIC program to read locations 0-255 via OS_NVMemory.

Version 5.35, 4.79.2.180. Tagged as 'Kernel-5_35-4_79_2_180'
@
text
@d105 7
d115 3
a150 3
                GBLL    ChecksumCMOS            ; Inspect the CMOS checksum byte, and act like a CMOS reset if it's
ChecksumCMOS    SETL    {TRUE}                  ; invalid. Also, calculate CMOS checksum and write it when needed.

@


1.1.2.26
log
@Extend possible range of OS_Call[After|Every]
OS_CallAfter and OS_CallEvery were treating the delay in R0 as a signed number, limiting its possible range. The PRM didn't require this (a -ve delay doesn't make sense, so implicitly times are unsigned), reworked to allow times up to 0xFFFFFBFF.
Aside:
  OSLib exports these functions as 'int', but it doesn't seem to make a distinction for unsigned versus signed anyway (other unsigned arguments are plain int too)
  The 'callx' library was already prototyped with unsigned times back in 1997

Added comment to hdr/Options about FirstUnpluggableModule - since the keyboard and mouse drivers got moved out of the kernel in 3.50, the original intent (to not allow you to unplug vital modules) has long since been lost, and really the only use of this value is to save 8 bits of CMOS frugal bits.

Version 5.35, 4.79.2.181. Tagged as 'Kernel-5_35-4_79_2_181'
@
text
@d332 2
a333 2
                                                ; TerritoryManager, UK. Moot now the keyboard and mouse aren't
                                                ; in the kernel - unplug those and you're stuffed.
@


1.1.2.27
log
@Adopt some switches from Hdr:Machine/Machine
SystemName, ROMSizeOffset, HAL32, HAL26 only used here, moved here.
Remove uses of "M_" booleans, apparently that's bad form.
Fix SWIDespatch_Size for the non thumb capable case (was ASSERTing).
Swapped UserMemStart for AppSpaceStart.
Removed last use of OldComboSupport (pre Medusa!).
Removed switch 'CDVPoduleIRQs', a correction to the machine definitions mean this can now simply be switched on NumberOfPodules (previously, IOMD couldn't chain podule interrupts).
Take out disabled sub interrupt support - it's in CVS if you want to try to get it working.
Moved ConfiguredLang to 11 for everyone, it only matters if !Boot fails, and no harm in making it common for 5.xx onwards.

Version 5.35, 4.79.2.183. Tagged as 'Kernel-5_35-4_79_2_183'
@
text
@d17 7
a36 4
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; now the conditional flags for the version we want
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

d46 2
a50 6
                GBLL    CanLiveOnROMCard
CanLiveOnROMCard SETL   ROMCardSupport

                GBLL    CacheOff
CacheOff        SETL    {FALSE}

a62 5
                GBLL    HAL26
                GBLL    HAL32           ; HAL32 indicates the new 32-bit memory map in use.
HAL32           SETL    HAL :LAND: No26bitCode
HAL26           SETL    HAL :LAND: :LNOT: No26bitCode

d318 1
a318 1
; HiProcVecs      SETL    "$Machine"="Tungsten" :LOR: :LNOT: NoARMv6
d323 7
@


1.1.2.28
log
@Retire single use of DebugROMErrors
hdr/Options: Switch removed
s/Modhand: Switch removed, now considered equivalent to DebugROMInit. DebugROMInit changed so that the callback ordering is as expected, batched up until "callbacks" is hit after Service_PostInit.
PMF/osbyte: Redundant RISC OS 2.01 code deleted

Version 5.35, 4.79.2.184. Tagged as 'Kernel-5_35-4_79_2_184'
@
text
@d277 1
d282 1
d286 1
d305 1
a305 1
              [ DebugHeaps :LOR: DebugROMInit :LOR: DebugROMPostInit :LOR: DebugCDA2
@


1.1.2.29
log
@Little kernel patches
hdr/ExportVals: the copyright header insertion got a bit confused with some of the file contents
TickEvents.s: a bad merge from Ursula branch 4.1.4.2 to trunk 4.2 left behind unmatched push/pull where TickIrqReenter had been removed
hdr/Options & NewIRQs.s: collapse remaining TickIrqReenter switches
osinit.s: when ZeroPage is in a top bit set address only the last buffer pointer would get zeroed

Tip offs from eagle eyed Tim Baldwin.

Version 5.35, 4.79.2.201. Tagged as 'Kernel-5_35-4_79_2_201'
@
text
@d129 3
@


1.1.2.30
log
@Assorted GraphicsV improvements
Detail:
  This set of changes:
  * Adds basic support for multiple GraphicsV drivers, by way of some new OS_ScreenMode reason codes for registering/deregistering, selecting and enumerating drivers (11, 64-68)
  * Tidies up handling of HAL video calls so that the HAL calls will be transformed into a bona fide GraphicsV driver if they're implemented
  * Changes handling of 16bpp gamma table entries so that they're sent to GraphicsV in a generic form instead of in a VIDC-specific form
  * Adds a new GraphicsV call and defines new VIDC list items to allow GraphicsV drivers to utilise the new pixel formats
  File changes:
  * h/VIDCList, hdr/VIDCList, Makefile - Add new header export containing VIDC list type 3 definitions, to avoid repeated definitions in other components
  * Resources/UK/Messages - Add new GraphicsV/OS_ScreenMode error strings and some missing processor type strings
  * hdr/KernelWS - Clean up some pre-GraphicsV definitions, and add new workspace locations for storing the current GraphicsV driver number and the driver list
  * hdr/Options - Remove obsolete InverseTextTransparency option
  * hdr/VduExt - Add VDU variable 192 for storing GraphicsV driver number (same as ROL's VideoV driver number). Remove old 'Flag_*' mode flag definitions (use new 'ModeFlag_*' defintions instead). Add new OS_ScreenMode reason codes.
  * s/ARM600, s/VMSAv6, s/vdu/vdu23, s/vdu/vdugrafa, s/vdu/vdugrafd, s/vdu/vdupalxx, s/vdu/vdupointer, s/vdu/vduwrch - Strip out pre-GraphicsV code. Update GraphicsV code to use correct driver number.
  * s/ArthurSWIs - Pass the default GraphicsV claimant the VduDriverWorkSpace instead of ZeroPage
  * s/Getall - Add Hdr:VIDCList and s/vdu/VduGrafHAL to list of GETs
  * s/NewIRQs - Remove HAL VSync IRQ initialisation, is now handled by grafvhal. Remove old HAL VsyncIRQ entry point, all VSyncs are now handled by VsyncIRQ_ExtEntry.
  * s/PMF/osbyte - Stop OS_Byte 19 waiting forever if no video driver is active
  * s/PMF/osinit - Remove HAL VSync IRQ initialisation, is now handled by grafvhal
  * s/vdu/vducursoft - Use new workspace variable names and flag names
  * s/vdu/vdudecl - Remove old HALDAG_* definitions, GVDAG_* definitions are used instead. Add definition of the per-driver workspace structure and flags.
  * s/vdu/vdudriver - Remove pre-GraphicsV code. Update InitialiseMode to check for and initialise a HAL driver. Use cached driver features word in a few places instead of calling GraphicsV each time. Update PalIndexTable to disable VIDC mangling of 16bpp gamma tables.
  * s/vdu/vdugrafv, s/vdu/vdugrafhal - HAL<->GraphicsV code split off into its own file (vdugrafhal). Default GraphicsV claimant now only deals with VSync events for the active driver.
  * s/vdu/vdumodes - Get rid of old VIDC List type 3 definiton; now in hdr/VIDCList
  * s/vdu/vduswis - Added OS_ScreenMode reason codes 11 and 64-68 for registering, deregistering, selecting and enumerating GraphicsV drivers. Update mode set code to not bother checking if the driver supports the pixel format; instead we assume that the driver's vet mode call will do the check for us.
Admin:
  Tested in Tungsten, IOMD, OMAP3 & BCM2835 ROMs
  Requires HdrSrc-2_38 and updated video driver modes


Version 5.35, 4.79.2.203. Tagged as 'Kernel-5_35-4_79_2_203'
@
text
@d290 3
@


1.1.2.31
log
@Strip out some old build switches
Detail:
  hdr/Options, s/ArthurSWIs, s/ChangeDyn, s/PMF/KbdDrA1, s/PMF/key, s/vdu/vdugrafa, s/vdu/vdugrafd, s/vdu/vdugrafhal, s/vdu/vdugrafv, s/vdu/vdumodes, s/vdu/vduwrch:
  - Strip out DoingVdu build switch (did nothing)
  - Strip out Japanese16BitSound switch (did nothing)
  - Strip out MakeModeSelectorsForModeNUmbers switch (altered the mode list structures, but there wasn't any code to do anything with the new data)
  - Strip out remaining uses of UseGraphicsV switch (now hardwired to {TRUE})
  - Strip out ShadowROM switch (altered FixedAreasTable to show the shadow mapping, but code to create the mapping is missing)
  - Strip out PollMouse switch (old Archimedes-era debug/development option)
Admin:
  Tested on BB-xM
  Builds to same binary as previous version


Version 5.35, 4.79.2.204. Tagged as 'Kernel-5_35-4_79_2_204'
@
text
@d55 3
d111 3
d156 3
d162 3
d174 3
d181 1
a181 1
GSWorkspaceInKernelBuffers SETL   {TRUE}        ; and everything else that suffers from the dodgy use of scratch space.
d342 3
@


1.1.2.32
log
@  Added hdr.options line to set up max RAMFS size.
Detail:
  s.NewReset line 1304 amended to use this variable. It was
  hard codede to 128MB as a compromise between address space reservation and size.
Admin:
  Tested OK to expand to 511MB in task manager. At 512MB the taskmanager window fails.
JB

Version 5.35, 4.79.2.234. Tagged as 'Kernel-5_35-4_79_2_234'
@
text
@a408 6
; Max size available for RAM Disc .. It has been 128 Megabytes for some time
		GBLA	MaxRAMFS_Size
MaxRAMFS_Size	SETA	128



@


1.1.2.33
log
@Add more HAL USB definitions to hdr/HALEntries. Add debug option for calling HangWatch_Dump on serious errors.
Detail:
  hdr/HALEntries - Added definition of the struct returned by HAL_USBControllerInfo
  hdr/Options, s/Middle - Added the option to call HangWatch_Dump on serious errors
Admin:
  Tested on BB-xM


Version 5.35, 4.79.2.235. Tagged as 'Kernel-5_35-4_79_2_235'
@
text
@a304 3
                GBLL    HangWatch               ; Issue HangWatch_Dump on serious errors (data abort, etc.)
HangWatch       SETL    {FALSE}

@


1.1.2.34
log
@Header defs for Pi Compute module and IIC
OSEntries.h: added a C structure for RISCOS_IICOpV.
GPIODevice.hdr: allocate Pandora and Pi Compute module sub device nos.
HALDevice.hdr/Options.hdr: tabs expanded, capitalised abbreviations.
Not tagged.
@
text
@a311 4

                GBLA    MaxRAMFS_Size
MaxRAMFS_Size   SETA    128                     ; Max size available for RAM Disc

d412 6
@


1.1.2.35
log
@Add a means to write NetStnCMOS in a HAL world
With ProtectStationID turned on there are no routes to writing the Econet station (or bottom octect of the IP address), a function previously fulfilled by the SetStation utility which pokes the hardware directly and doesn't fit into a HAL model.
Add a new subreason to OS_NVMemory to perform this role. This SWI appeared for RISC OS 5.00, and errors unsupported subreasons, so there's a means of run tim selecting its use by checking the platform class and trying the SWI. All RISC OS 5 based platforms can always be upgraded to this version, since they're all still being maintained.

hdr/Options: move the switch with the other options from osinit.s
i2cutils.c: new subreason

Ditch the 'ObsoleteNC1CMOS' switch, if it was obsolete for NC1, it's certainly obsolete now.
Ditch unmaintained messages files for Morris4/Omega/Ursula projects.
Tested on a Risc PC.

Version 5.35, 4.79.2.247. Tagged as 'Kernel-5_35-4_79_2_247'
@
text
@a131 3
                GBLL    ProtectStationID        ; Disallow writes to NetStnCMOS (via OS_Byte & OS_NVMemory)
ProtectStationID        SETL :LNOT:Embedded_UI

@


1.1.2.36
log
@Enable high processor vectors/zero page relocation. OS_DynamicArea 20 fixes.
Detail:
  Makefile, hdr/Options - By default enable high processor vectors/zero page relocation for compatible machines, but also allow the components file to override the setting if required
  s/ChangeDyn - Fix OS_DynamicArea 20 to check the correct range for doubly mapped areas, and to correctly localise its error message
Admin:
  Tested on Iyonix


Version 5.35, 4.79.2.268. Tagged as 'Kernel-5_35-4_79_2_268'
@
text
@a299 1
  [ :LNOT: :DEF: HiProcVecs
d301 3
a303 2
HiProcVecs      SETL    "$Machine"="Tungsten" :LOR: :LNOT: NoARMv6
  ]
@


1.1.2.37
log
@Add initial support for "physical memory pools"
Detail:
  This set of changes adds support for "physical memory pools" (aka PMPs), a new type of dynamic area which allow physical pages to be claimed/allocated without mapping them in to the logical address space. PMPs have full control over which physical pages they use (similar to DAs which request specific physical pages), and also have full control over the logical mapping of their pages (which pages go where, and per-page access/cacheability control).
  Currently the OS makes use of two PMPs: one for the free pool (which now has a logical size of zero - freeing up gigabytes of logical space), and one for the RAM disc (logical size of 1MB, allowing for a physical size limited only by the amount of free memory)
  Implementing these changes has required a number of other changes to be made:
  * The CAM has been expanded from 8 bytes per entry to 16 bytes per entry, in order to allow each RAM page to store information about its PMP association
  * The system heap has been expanded to 32MB in size (from just under 4MB), in order to allow it to be used to store PMP page lists (1 word needed per page, but PMP pages may not always have physical pages assigned to them - so to allow multiple large PMPs to exist we need more than just 1 word per RAM page)
  * The &FA000000-&FBFFFFFF area of fixed kernel workspace has been shuffled around to accomodate the larger CAM, and the system heap is now located just above the RMA.
  * SoftResets code stripped out (unlikely we'll ever want to fix and re-enable it)
  * A couple of FastCDA options are now permanently on
  * Internal page flags shuffled around a bit. PageFlags_Unavailable now publicly exposed so that PMP clients can lock/unlock pages at will.
  * When OS_ChangeDynamicArea is asked to grow or shrink the free pool, it now implicitly converts it into a shrink or grow of application space (which is what would happen anyway). This simplifies the implementation; during a grow, pages (or replacement pages) are always sourced from the free pool, and during a shrink pages are always sent to the free pool.
  File changes:
  - hdr/KernelWS - Extend DANode structure. Describe CAM format. Adjust kernel workspace.
  - hdr/OSRSI6, s/Middle - Add new item to expose the CAM format
  - hdr/Options - Remove SoftResets switch. Add some PMP switches.
  - s/ARM600, s/VMSAv6 - Updated for new CAM format. Note that although the CAM stores PMP information, BangCamUpdate currently doesn't deal with updating that data - it's the caller's responsibility to do so where appropriate.
  - s/ChangeDyn - Lots of changes to implement PMP support, and to cope with the new CAM format.
  - s/HAL - Updated to cope with new CAM format, and lack of logical mapping of free pool.
  - s/MemInfo - Updated to cope with new CAM format. OS_Memory 0 updated to cope with converting PPN to PA for pages which are mapped out. OS_Memory 24 updated to decode the access permissions on a per-page basis for PMPs, and fixed its HWM usage for sparse DAs.
  - s/NewReset - Soft reset code and unused AddCamEntries function removed. Updated to cope with new CAM format, PMP free pool, PMP RAMFS
  - s/AMBControl/allocate - Update comment (RMA hasn't been used for AMBControl nodes for a long time)
  - s/AMBControl/growp, s/AMBControl/memmap, s/AMBControl/shrinkp - Update for new CAM format + PMP free pool
  - s/vdu/vdudriver - Strip out soft reset code.
Admin:
  Tested on Pandaboard
  This is just a first iteration of the PMP feature, with any luck future changes will improve functionality. This means APIs are subject to change as well.


Version 5.35, 4.79.2.284. Tagged as 'Kernel-5_35-4_79_2_284'
@
text
@d123 3
a315 12
                GBLL  PMPDebug
PMPDebug        SETL  {FALSE}                   ; Physical memory pool debugging

                GBLL  PMPParanoid
PMPParanoid     SETL  {FALSE}                   ; Validate PMPs after most ops

                GBLL  PMPRAMFS
PMPRAMFS        SETL  {TRUE}                    ; Whether RAMFS DA is a PMP (requires compatible RAMFS module)

 [ PMPRAMFS
PMPRAMFS_Size   * 256                           ; Number of logical pages (physical size is unlimited)
 |
a317 1
 ]
@


1.1.2.38
log
@Change some default CMOS settings, using custom build switch
Detail:
  Default to SCSI::4 for boot driver is custom switch at buildtime
  (EnforceSCSI4) is defined. 2 fontcache items also defaulted with this switch
Admin:
  tested on iMx6


Version 5.35, 4.79.2.290. Tagged as 'Kernel-5_35-4_79_2_290'
@
text
@a428 7
; Switch to alter default CMOS settings for SCSI::4 as default drive 

 [ :LNOT: :DEF: EnforceSCSI4
       GBLL   EnforceSCSI4
EnforceSCSI4   SETL    {FALSE}
 ]
 
@


1.1.2.39
log
@  New method to control default CMOS settings
Detail:
  Rather than fill the Kernel sources with an ever-increasing number of
  platform-specific switches to control the default CMOS settings, this
  change introduces a variable which passes the requirements direct from
  the Components file to the Kernel. Since it uses a comma-separated list
  of address/value pairs, it is inherently extensible. All the symbolic
  names of addresses from Hdr:CMOS are available, and any valid objasm
  expression can be used for the value.
Admin:
  This removes the need for the EnforceSCSI4 switch, and leaves almost
  no uses of the Machine variable in the Kernel either.


Version 5.35, 4.79.2.298. Tagged as 'Kernel-5_35-4_79_2_298'
@
text
@d429 7
@


1.1.2.40
log
@Add SWI error pointer validation, SeriousErrorV hooks, and OS_ReadSysInfo 15
Detail:
  Resources/UK/Messages, hdr/KernelWS, s/Kernel - On return from a SWI with V set, do some basic validity checks on the error pointer in order to try and catch buggy SWIs that return bad pointers or invalid error blocks. If a bad pointer is found we'll substitute it with a pointer to a different error block, which has the SWI number in the error message, to allow the user to identify the source of the problem. (There's also a chance we'll crash when investigating a bad pointer, but crashing here in the kernel is preferable to crashing elsewhere because R12 should still contain the SWI number)
  hdr/OSMisc - Define SeriousErrorV reason codes and extended ROM footer entry IDs
  hdr/Options - Remove HangWatch integration flag, obsolete now that SeriousErrorV is available
  s/ArthurSWIs - Keep defaultvectab up to date with vector allocations
  s/Middle - Update serious error handling to call SeriousErrorV at several key points. This allows for accurate crash dumps to be obtained, along with a mechanism to warn low-level components such as RTSupport that the privileged mode stacks are being flattened.
  s/Middle - Add OS_ReadSysInfo 15, for enumerating extended ROM footer entries
  s/PMF/osbyte - Update InitNewFX0Error to use the ROM footer entry ID defined in hdr/OSMisc
Admin:
  Tested on Pi 1B, 2B, 3B


Version 5.35, 4.79.2.313. Tagged as 'Kernel-5_35-4_79_2_313'
@
text
@d305 3
@


1.1.2.21.2.1
log
@  Changes to resolve some of the BCM2835 initial hacks
  1: Added HAL_FramebufferAddress entry.
  2: Minor mod the NoIrqVecSwiDispatch mods recently submitted. Improved coverage
  3: Added compile time switch InverseTextTransparency to toggle sense of text
  (pre-wimp) for use until correct transparency behaviour is introduced in the RPi
  start.elf.
  4: Ensured that if a non aligned frame buffer is reported, ALL of the space
  is actually mapped in.
Detail:
  (list files and functions that have changed)
Admin:
  builds and runs .. Still needs service_mode extension work to replace hard
  coded mode definition files
  (highlight level of testing that has taken place)
  (bugfix number if appropriate)


Version 5.35, 4.79.2.147.2.5. Tagged as 'Kernel-5_35-4_79_2_147_2_5'
@
text
@a294 3
                GBLL    InverseTextTransparency
InverseTextTransparency SETL    {FALSE}
                            
@


1.1.2.21.2.2
log
@Corrected default configured language to the Desktop module.

Version 5.35, 4.79.2.147.2.19. Tagged as 'Kernel-5_35-4_79_2_147_2_19'
@
text
@d329 1
a329 1
ConfiguredLang  SETA    10                      ; default configured language
@


1.1.2.21.2.3
log
@Merge with HAL branch
Detail:
  Merge the HAL branch into the RPi branch, prior to merging RPi to HAL
  Brief summary of main changes brought in:
  * Added *cache functionality previously provided by ARM module
  * Added "CMOS RAM reset" message on startup when CMOS has been wiped by keypress
  * Renamed HAL Video entries from HAL_Video_XXX to HAL_VideoXXX
  * Dropped mjsHAL macros, GRAB/STASH macros
  * Fixed pseudo-VRAM allocation when machine has exactly 16MB of RAM
  * Added OS_Hardware 5
  * Use OS_SerialOp GetDeviceName for getting serial device name
  * Drop HAL_MonitorLeadID
  * Rework default GraphicsV_IICOp handler
Admin:
  Tested on Raspberry Pi with high processor vectors


Version 5.35, 4.79.2.147.2.23. Tagged as 'Kernel-5_35-4_79_2_147_2_23'
@
text
@d35 4
a38 1
MosVer          *       6               ; As returned by OS_Byte 0
@


1.1.2.16.2.1
log
@Initial kernel support for Cortex-A8 processors.
Detail:
  hdr/ARMops - Added Cortex_A8 processor type, new ARM architecture number
  hdr/Options - Enabled various kernel debug options
  s/ARMops - Added Cortex-A8/OMAP3530 to known CPUs list. Ignore cache type register for ARM architecture &F.
  s/NewIRQs - Increase MaxInterrupts to 96
Admin:
  Brief testing under qemu-omap3.



Version 5.35, 4.79.2.98.2.1. Tagged as 'Kernel-5_35-4_79_2_98_2_1'
@
text
@d93 1
a93 1
EmulatorSupport SETL    {FALSE} ; Disabled; QEMU doesn't like it
d305 1
a305 1
DebugROMInit    SETL    {TRUE}
d311 1
a311 1
DebugROMErrors  SETL    {TRUE}
d314 1
a314 1
DebugTerminal   SETL    {TRUE}
d317 1
a317 1
DebugHALTX      SETL    {TRUE}
@


1.1.2.16.2.2
log
@Add VMSAv6 MMU support, fixes to allow booting on beagleboard
Detail:
  s/ARM600 - fix to SyncCodeAreasRange to correctly read cache line length for WB_CR7_Lx caches
  s/ARMops - Cortex cache handling fixes. Enable L2 cache for Cortex.
  s/ChangeDyn - VMSAv6 support in AllocateBackingLevel2
  s/HAL - Improve RISCOS_InitARM to set/clear correct CP15 flags for ARMv6/v7. VMSAv6 support in code to generate initial page tables.
  s/NewReset - Extra DebugTX calls during OS startup. Disable pre-HAL Processor_Type for HAL builds.
  s/VMSAv6 - Main VMSAv6 MMU code - stripped down version of s/ARM600 with support for basic VMSAv6 features.
  hdr/Options - Use VMSAv6 MMU code, not ARM600. Disable ARM6support since current VMSAv6 code will conflict with it.
Admin:
  Tested basic OS functionality under qemu-omap3 and revision B6 beagleboard.


Version 5.35, 4.79.2.98.2.3. Tagged as 'Kernel-5_35-4_79_2_98_2_3'
@
text
@d222 1
a222 1
ARM6support        SETL {FALSE} ; Needs updating for VMSAv6 compatability
d409 1
a409 1
GetKernelMEMC       SETS  "GET s.VMSAv6"
@


1.1.2.16.2.3
log
@Disable DebugTerminal by default for OMAP3 kernel
Detail:
  The host-mode driver for the MUSB OTG controller is now working, so there's no longer any reason to have the DebugTerminal enabled by default.
Admin:
  Tested on rev C2 beagleboard


Version 5.35, 4.79.2.98.2.12. Tagged as 'Kernel-5_35-4_79_2_98_2_12'
@
text
@d314 1
a314 1
DebugTerminal   SETL    {FALSE}
@


1.1.2.16.2.4
log
@Fix some issues preventing the Cortex kernel from being used on non-Cortex machines
Detail:
  hdr/Options - ARM6support and GetKernelMEMC values are now derived from the value of MEMM_Type
  s/ARMops, s/HAL - Code to detect and handle ARMv7 CPUs is now only enabled when using VMSAv6 MMU model. Saves us from having to deal with lack of myIMB, myDSB, etc. implementations on pre-ARMv6.
  s/HAL - Removed some debug code
  s/NewReset - Fix bug spotted by Tom Walker where R12 wasn't being restored by LookForHALRTC if a non-HAL RTC had already been found
  s/AMBControl/memmap - correct the assert clause that was checking that &FFE are the correct L2PT protection bits for non-VMSAv6 machines
Admin:
  Tested this kernel on a rev C2 beagleboard & Iyonix softload. Also compiled it into an IOMD ROM, but didn't try running it.


Version 5.35, 4.79.2.98.2.32. Tagged as 'Kernel-5_35-4_79_2_98_2_32'
@
text
@d222 1
a222 1
ARM6support        SETL (MEMM_Type = "ARM600") ; Needs updating for VMSAv6 compatability
d409 1
a409 1
GetKernelMEMC       SETS  "GET s." :CC: MEMM_Type
@


1.1.2.16.2.5
log
@Update the method the Cortex kernel uses to determine the UtilityModule & ROM dates
Detail:
  Three main changes:
  * On odd-numbered (i.e. development) versions of the module, the UtilityModule will now take its date from the VersionNum file instead of using a hard-coded date.
  * All build versions now look for the new "extended ROM footer" (as created by romlinker 0.04+) at the end of the ROM image and use it to determine the ROM build date for return by OS_ReadSysInfo 9,2. Failing to find the build date in the footer will cause OS_ReadSysInfo 9,2 to return 0.
  * On odd-numbered versions, OS_Byte 0 will now use the ROM build date (as found in the extended footer) to generate the error block that's returned to the user. This seems OK as the PRM describes OS_Byte 0 as returning the "creation date of the operation system". Plus it's a convenient way of getting the ROM build date into the Switcher, since the switcher uses OS_Byte 0. If the extended footer can't be found (or if the string hasn't been initialised yet, e.g. before Service_PostInit) the code falls back to a hard-coded string containing the date from the VersionNum file.
  File changes:
  Makefile - Updated to not create the obsolete Time+Date file (previously used for the ROM build date)
  Version - Use date from VersionNum file for development builds
  hdr/Options - New UseNewFX0Error variable/option to make it easy to check which OS_Byte 0 variant should be enabled
  hdr/KernelWS - Added new string buffers & extended ROM footer pointer to workspace
  s/Middle - Updated OS_ReadSysInfo 9 code, and added utility functions for searching the extended ROM footer for certain tags
  s/NewReset - Added a couple of calls to initialise the new string buffers just prior to Service_PostInit. This is required since OS_Byte/OS_ReadSysInfo shouldn't enable interrupts, but date conversion relies on the Territory module, which may enable interrupts.
  s/PMF/osbyte - Updated OS_Byte 0 code
Admin:
  Tested in OMAP ROM, with and without the extended footer present.


Version 5.35, 4.79.2.98.2.41. Tagged as 'Kernel-5_35-4_79_2_98_2_41'
@
text
@a392 3
               GBLL  UseNewFX0Error
UseNewFX0Error SETL (:LNOT: Embedded_UI) :LAND: ((Version :AND: 1) = 1) ; Whether *FX 0 should show the ROM link date instead of the UtilityModule date

@


1.1.2.16.2.6
log
@Add new OS_ReadSysInfo 6 items. Change naming of PublicWS values.
Detail:
  s/Middle - Added some new OS_ReadSysInfo 6 items which are needed by the zero page relocation kernel. Also duplicated some existing entries to avoid conflicts with ROL's allocations.
  hdr/OSRSI6, Makefile - New header listing OS_ReadSysInfo 6 items
  hdr/PublicWS - Duplicated the workspace definitions for &0-&4000, but with a 'Legacy_' prefix to their names. Also added some new entries as needed by the zero page relocation kernel. Once existing modules have been updated to use OS_ReadSysInfo 6 & the Legacy_ definitions, the old defs will be removed.
  hdr/KernelWS - Removed 'Export_' prefix from all the exported workspace values, since the kernel can now use the original names directly
  hdr/Options - Dummy HiProcVecs option so merging things will be a bit cleaner
Admin:
  Tested on rev A2 BB-xM


Version 5.35, 4.79.2.98.2.44. Tagged as 'Kernel-5_35-4_79_2_98_2_44'
@
text
@a358 3
                GBLL    HiProcVecs              ; Relocate processor vectors and first 16K of workspace to &FFFF0000
HiProcVecs      SETL    {FALSE} ; Coming soon!

@


1.1.2.16.2.7
log
@Add zero page relocation support
Detail:
  A whole mass of changes to add high processor vectors + zero page relocation support to the Cortex branch of the kernel
  At the moment the code can only cope with two ZeroPage locations, &0 and &FFFF0000. But with a bit more tweaking those restrictions can probably be lifted, allowing ZeroPage to be hidden at almost any address (assuming it's fixed at compile time). If I've done my job right, these restrictions should all be enforced by asserts.
  There's a new option, HiProcVecs, in hdr/Options to control whether high processor vectors are used. When enabling it and building a ROM, remember:
  * FPEmulator needs to be built with the FPEAnchor=High option specified in the components file (not FPEAnchorType=High as my FPEmulator commit comments suggested)
  * ShareFS needs unplugging/removing since it can't cope with it yet
  * Iyonix users will need to use the latest ROOL boot sequence, to ensure the softloaded modules are compatible (OMAP, etc. don't really softload much so they're OK with older sequences)
  * However VProtect also needs patching to fix a nasty bug there - http://www.riscosopen.org/tracker/tickets/294
  The only other notable thing I can think of is that the ProcessTransfer code in s/ARM600 & s/VMSAv6 is disabled if high processor vectors are in use (it's fairly safe to say that code is obsolete in HAL builds anyway?)
  Fun challenge for my successor: Try setting ZeroPage to &FFFF00FF (or similar) so its value can be loaded with MVN instead of LDR. Then use positive/negative address offsets to access the contents.
  File changes:
  - hdr/ARMops - Modified ARMop macro to take the ZeroPage pointer as a parameter instead of 'zero'
  - hdr/Copro15ops - Corrected $quick handling in myISB macro
  - hdr/Options - Added ideal setting for us to use for HiProcVecs
  - s/AMBControl/allocate, s/AMBControl/growp, s/AMBControl/mapslot, s/AMBControl/memmap, s/AMBControl/service, s/AMBControl/shrinkp, s/Arthur2, s/Arthur3, s/ArthurSWIs, s/ChangeDyn, s/ExtraSWIs, s/HAL, s/HeapMan, s/Kernel, s/MemInfo, s/Middle, s/ModHand, s/MoreSWIs, s/MsgCode, s/NewIRQs, s/NewReset, s/Oscli, s/PMF/buffer, s/PMF/IIC, s/PMF/i2cutils, s/PMF/key, s/PMF/mouse, s/PMF/osbyte, s/PMF/oseven, s/PMF/osinit, s/PMF/osword, s/PMF/oswrch, s/SWINaming, s/Super1, s/SysComms, s/TickEvents, s/Utility, s/vdu/vdu23, s/vdu/vdudriver, s/vdu/vdugrafl, s/vdu/vdugrafv, s/vdu/vdupalxx, s/vdu/vdupointer, s/vdu/vduswis, s/vdu/vduwrch - Lots of updates to deal with zero page relocation
  - s/ARM600 - UseProcessTransfer option. Zero page relocation support. Deleted pre-HAL ClearPhysRAM code to tidy the file up a bit.
  - s/ARMops - Zero page relocation support. Set CPUFlag_HiProcVecs when high vectors are in use.
  - s/KbdResPC - Disable compilation of dead code
  - s/VMSAv6 - UseProcessTransfer option. Zero page relocation support.
Admin:
  Tested with OMAP & Iyonix ROM softloads, both with high & low zero page.
  High zero page hasn't had extensive testing, but boot sequence + ROM apps seem to work.


Version 5.35, 4.79.2.98.2.48. Tagged as 'Kernel-5_35-4_79_2_98_2_48'
@
text
@d360 1
a360 3
HiProcVecs      SETL    {FALSE} ; Leave off for now
; In an ideal world, we'd use something like this:
; HiProcVecs      SETL    M_Tungsten :LOR: :LNOT: NoARMv6
@


1.1.2.16.2.7.2.1
log
@  Support for Raspberry Pi / BCM2835
Detail:
  Falls into two main areas: graphics support and ARM11 core support.
  A work in progress - in many cases the code changes need to be replaced
  with an alternative mechanism which will permit the kernel to still function
  on other platforms. Adrian marked these with "!!!" comments - I have added
  ! directives as well so that they don't get forgotten about.
Admin:
  Changes received from Adrian Lees. This revision represents the code largely
  as delivered, and is placed on its own branch (forked off from the version
  from which he worked). It is intended for reference. It doesn't build against
  current headers - this is likely to require a merge with the other changes
  to the kernel since that time.

Version 5.35, 4.79.2.98.2.52.2.1. Tagged as 'Kernel-5_35-4_79_2_98_2_52_2_1'
@
text
@d305 1
a305 1
DebugROMInit    SETL    {FALSE}
d311 1
a311 1
DebugROMErrors  SETL    {FALSE}
@


