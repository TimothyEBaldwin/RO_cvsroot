head	4.1;
access;
symbols
	Kernel-6_15:4.1
	Kernel-6_14:4.1
	Kernel-6_01-3:4.1
	Kernel-6_13:4.1
	Kernel-6_12:4.1
	Kernel-6_11:4.1
	Kernel-6_10:4.1
	Kernel-6_09:4.1
	Kernel-6_08-4_129_2_10:4.1
	Kernel-6_08-4_129_2_9:4.1
	Kernel-6_08:4.1
	Kernel-6_07:4.1
	Kernel-6_06:4.1
	Kernel-6_05-4_129_2_8:4.1
	Kernel-6_05:4.1
	Kernel-6_04:4.1
	Kernel-6_03:4.1
	Kernel-6_01-2:4.1
	Kernel-6_01-4_146_2_1:4.1
	Kernel-6_02:4.1
	Kernel-6_01-1:4.1
	Kernel-6_01:4.1
	Kernel-6_00:4.1
	Kernel-5_99:4.1
	Kernel-5_98:4.1
	Kernel-5_97-4_129_2_7:4.1
	Kernel-5_97:4.1
	Kernel-5_96:4.1
	Kernel-5_95:4.1
	Kernel-5_94:4.1
	Kernel-5_93:4.1
	Kernel-5_92:4.1
	Kernel-5_91:4.1
	Kernel-5_90:4.1
	Kernel-5_89-4_129_2_6:4.1
	Kernel-5_89:4.1
	Kernel-5_88-4_129_2_5:4.1
	Kernel-5_88-4_129_2_4:4.1
	Kernel-5_88:4.1
	Kernel-5_87:4.1
	Kernel-5_86-4_129_2_3:4.1
	Kernel-5_86-4_129_2_2:4.1
	Kernel-5_86-4_129_2_1:4.1
	Kernel-5_86:4.1
	SMP:4.1.0.2
	SMP_bp:4.1
	Kernel-5_85:4.1
	Kernel-5_54-1:4.1
	Kernel-5_84:4.1
	Kernel-5_83:4.1
	Kernel-5_82:4.1
	Kernel-5_81:4.1
	Kernel-5_80:4.1
	Kernel-5_79:4.1
	Kernel-5_78:4.1
	Kernel-5_77:4.1
	Kernel-5_76:4.1
	Kernel-5_75:4.1
	Kernel-5_74:4.1
	Kernel-5_73:4.1
	Kernel-5_72:4.1
	Kernel-5_71:4.1
	Kernel-5_70:4.1
	Kernel-5_69:4.1
	Kernel-5_68:4.1
	Kernel-5_67:4.1
	Kernel-5_66:4.1
	Kernel-5_65:4.1
	Kernel-5_64:4.1
	Kernel-5_63:4.1
	Kernel-5_62:4.1
	Kernel-5_61:4.1
	Kernel-5_60:4.1
	Kernel-5_59:4.1
	Kernel-5_58:4.1
	Kernel-5_57:4.1
	Kernel-5_56:4.1
	Kernel-5_55:4.1
	Kernel-5_54:4.1
	Kernel-5_53:4.1
	Kernel-5_52:4.1
	Kernel-5_51:4.1
	Kernel-5_50:4.1
	Kernel-5_49:4.1
	HAL_merge:1.1.2.9
	Kernel-5_48:4.1
	Kernel-5_35-4_79_2_327:1.1.2.9
	Kernel-5_35-4_79_2_326:1.1.2.9
	Kernel-5_35-4_79_2_325:1.1.2.9
	Kernel-5_35-4_79_2_324:1.1.2.9
	Kernel-5_35-4_79_2_323:1.1.2.9
	Kernel-5_35-4_79_2_322:1.1.2.9
	Kernel-5_35-4_79_2_321:1.1.2.9
	Kernel-5_35-4_79_2_320:1.1.2.9
	Kernel-5_35-4_79_2_319:1.1.2.9
	Kernel-5_35-4_79_2_318:1.1.2.9
	Kernel-5_35-4_79_2_317:1.1.2.9
	Kernel-5_35-4_79_2_316:1.1.2.9
	Kernel-5_35-4_79_2_315:1.1.2.9
	Kernel-5_35-4_79_2_314:1.1.2.9
	Kernel-5_35-4_79_2_313:1.1.2.9
	Kernel-5_35-4_79_2_312:1.1.2.9
	Kernel-5_35-4_79_2_311:1.1.2.9
	Kernel-5_35-4_79_2_310:1.1.2.9
	Kernel-5_35-4_79_2_309:1.1.2.9
	Kernel-5_35-4_79_2_308:1.1.2.9
	Kernel-5_35-4_79_2_307:1.1.2.9
	Kernel-5_35-4_79_2_306:1.1.2.9
	Kernel-5_35-4_79_2_305:1.1.2.9
	Kernel-5_35-4_79_2_304:1.1.2.9
	Kernel-5_35-4_79_2_303:1.1.2.8
	Kernel-5_35-4_79_2_302:1.1.2.8
	Kernel-5_35-4_79_2_301:1.1.2.8
	Kernel-5_35-4_79_2_300:1.1.2.8
	Kernel-5_35-4_79_2_299:1.1.2.8
	Kernel-5_35-4_79_2_298:1.1.2.8
	Kernel-5_35-4_79_2_297:1.1.2.8
	Kernel-5_35-4_79_2_296:1.1.2.8
	Kernel-5_35-4_79_2_295:1.1.2.8
	Kernel-5_35-4_79_2_294:1.1.2.8
	Kernel-5_35-4_79_2_293:1.1.2.8
	Kernel-5_35-4_79_2_292:1.1.2.8
	Kernel-5_35-4_79_2_291:1.1.2.8
	Kernel-5_35-4_79_2_290:1.1.2.8
	Kernel-5_35-4_79_2_289:1.1.2.8
	Kernel-5_35-4_79_2_288:1.1.2.8
	Kernel-5_35-4_79_2_287:1.1.2.8
	Kernel-5_35-4_79_2_286:1.1.2.8
	Kernel-5_35-4_79_2_285:1.1.2.8
	Kernel-5_35-4_79_2_284:1.1.2.8
	Kernel-5_35-4_79_2_283:1.1.2.8
	Kernel-5_35-4_79_2_282:1.1.2.8
	Kernel-5_35-4_79_2_281:1.1.2.8
	Kernel-5_35-4_79_2_280:1.1.2.8
	Kernel-5_35-4_79_2_279:1.1.2.8
	Kernel-5_35-4_79_2_278:1.1.2.7
	Kernel-5_35-4_79_2_277:1.1.2.7
	Kernel-5_35-4_79_2_276:1.1.2.7
	Kernel-5_35-4_79_2_275:1.1.2.7
	Kernel-5_35-4_79_2_274:1.1.2.7
	Kernel-5_35-4_79_2_273:1.1.2.7
	Kernel-5_35-4_79_2_272:1.1.2.7
	Kernel-5_35-4_79_2_271:1.1.2.7
	Kernel-5_35-4_79_2_270:1.1.2.7
	Kernel-5_35-4_79_2_269:1.1.2.7
	Kernel-5_35-4_79_2_268:1.1.2.7
	Kernel-5_35-4_79_2_267:1.1.2.7
	Kernel-5_35-4_79_2_266:1.1.2.7
	Kernel-5_35-4_79_2_265:1.1.2.7
	Kernel-5_35-4_79_2_264:1.1.2.7
	Kernel-5_35-4_79_2_263:1.1.2.7
	Kernel-5_35-4_79_2_262:1.1.2.7
	Kernel-5_35-4_79_2_261:1.1.2.7
	Kernel-5_35-4_79_2_260:1.1.2.7
	Kernel-5_35-4_79_2_259:1.1.2.7
	Kernel-5_35-4_79_2_258:1.1.2.7
	Kernel-5_35-4_79_2_257:1.1.2.7
	Kernel-5_35-4_79_2_256:1.1.2.7
	Kernel-5_35-4_79_2_255:1.1.2.7
	Kernel-5_35-4_79_2_254:1.1.2.7
	Kernel-5_35-4_79_2_253:1.1.2.7
	Kernel-5_35-4_79_2_252:1.1.2.7
	Kernel-5_35-4_79_2_251:1.1.2.7
	Kernel-5_35-4_79_2_250:1.1.2.7
	Kernel-5_35-4_79_2_249:1.1.2.6
	Kernel-5_35-4_79_2_248:1.1.2.6
	Kernel-5_35-4_79_2_247:1.1.2.6
	Kernel-5_35-4_79_2_246:1.1.2.6
	Kernel-5_35-4_79_2_245:1.1.2.6
	Kernel-5_35-4_79_2_244:1.1.2.6
	Kernel-5_35-4_79_2_243:1.1.2.6
	Kernel-5_35-4_79_2_242:1.1.2.6
	Kernel-5_35-4_79_2_241:1.1.2.6
	Kernel-5_35-4_79_2_240:1.1.2.6
	Kernel-5_35-4_79_2_239:1.1.2.6
	Kernel-5_35-4_79_2_238:1.1.2.6
	Kernel-5_35-4_79_2_237:1.1.2.6
	Kernel-5_35-4_79_2_236:1.1.2.6
	Kernel-5_35-4_79_2_235:1.1.2.6
	Kernel-5_35-4_79_2_234:1.1.2.6
	Kernel-5_35-4_79_2_233:1.1.2.6
	Kernel-5_35-4_79_2_232:1.1.2.6
	Kernel-5_35-4_79_2_231:1.1.2.6
	Kernel-5_35-4_79_2_230:1.1.2.6
	Kernel-5_35-4_79_2_229:1.1.2.6
	Kernel-5_35-4_79_2_228:1.1.2.6
	Kernel-5_35-4_79_2_227:1.1.2.6
	Kernel-5_35-4_79_2_226:1.1.2.6
	Kernel-5_35-4_79_2_225:1.1.2.6
	Kernel-5_35-4_79_2_224:1.1.2.6
	Kernel-5_35-4_79_2_223:1.1.2.6
	Kernel-5_35-4_79_2_222:1.1.2.6
	Kernel-5_35-4_79_2_221:1.1.2.6
	Kernel-5_35-4_79_2_220:1.1.2.6
	Kernel-5_35-4_79_2_219:1.1.2.6
	Kernel-5_35-4_79_2_218:1.1.2.6
	Kernel-5_35-4_79_2_217:1.1.2.6
	Kernel-5_35-4_79_2_216:1.1.2.6
	Kernel-5_35-4_79_2_215:1.1.2.6
	Kernel-5_35-4_79_2_214:1.1.2.6
	Kernel-5_35-4_79_2_213:1.1.2.6
	Kernel-5_35-4_79_2_212:1.1.2.6
	Kernel-5_35-4_79_2_211:1.1.2.6
	Kernel-5_35-4_79_2_210:1.1.2.6
	Kernel-5_35-4_79_2_209:1.1.2.6
	Kernel-5_35-4_79_2_208:1.1.2.6
	Kernel-5_35-4_79_2_207:1.1.2.6
	Kernel-5_35-4_79_2_206:1.1.2.6
	Kernel-5_35-4_79_2_205:1.1.2.6
	Kernel-5_35-4_79_2_204:1.1.2.6
	Kernel-5_35-4_79_2_203:1.1.2.6
	Kernel-5_35-4_79_2_202:1.1.2.6
	Kernel-5_35-4_79_2_201:1.1.2.6
	Kernel-5_35-4_79_2_200:1.1.2.6
	Kernel-5_35-4_79_2_199:1.1.2.6
	Kernel-5_35-4_79_2_198:1.1.2.6
	Kernel-5_35-4_79_2_197:1.1.2.6
	Kernel-5_35-4_79_2_196:1.1.2.6
	Kernel-5_35-4_79_2_195:1.1.2.6
	Kernel-5_35-4_79_2_194:1.1.2.6
	Kernel-5_35-4_79_2_193:1.1.2.6
	Kernel-5_35-4_79_2_192:1.1.2.6
	Kernel-5_35-4_79_2_191:1.1.2.6
	Kernel-5_35-4_79_2_190:1.1.2.6
	Kernel-5_35-4_79_2_189:1.1.2.6
	Kernel-5_35-4_79_2_188:1.1.2.6
	Kernel-5_35-4_79_2_187:1.1.2.6
	Kernel-5_35-4_79_2_186:1.1.2.6
	Kernel-5_35-4_79_2_185:1.1.2.6
	Kernel-5_35-4_79_2_184:1.1.2.6
	Kernel-5_35-4_79_2_183:1.1.2.6
	Kernel-5_35-4_79_2_182:1.1.2.6
	Kernel-5_35-4_79_2_181:1.1.2.6
	Kernel-5_35-4_79_2_180:1.1.2.6
	Kernel-5_35-4_79_2_179:1.1.2.6
	Kernel-5_35-4_79_2_178:1.1.2.6
	Kernel-5_35-4_79_2_177:1.1.2.6
	Kernel-5_35-4_79_2_176:1.1.2.6
	Kernel-5_35-4_79_2_175:1.1.2.6
	Kernel-5_35-4_79_2_174:1.1.2.6
	Kernel-5_35-4_79_2_173:1.1.2.6
	Kernel-5_35-4_79_2_172:1.1.2.6
	Kernel-5_35-4_79_2_171:1.1.2.6
	Kernel-5_35-4_79_2_170:1.1.2.6
	Kernel-5_35-4_79_2_169:1.1.2.6
	Kernel-5_35-4_79_2_168:1.1.2.6
	Kernel-5_35-4_79_2_167:1.1.2.6
	Kernel-5_35-4_79_2_166:1.1.2.6
	Kernel-5_35-4_79_2_165:1.1.2.6
	RPi_merge:1.1.2.6
	Kernel-5_35-4_79_2_147_2_23:1.1.2.6
	Kernel-5_35-4_79_2_147_2_22:1.1.2.6
	Kernel-5_35-4_79_2_147_2_21:1.1.2.6
	Kernel-5_35-4_79_2_147_2_20:1.1.2.6
	Kernel-5_35-4_79_2_147_2_19:1.1.2.6
	Kernel-5_35-4_79_2_147_2_18:1.1.2.6
	Kernel-5_35-4_79_2_164:1.1.2.6
	Kernel-5_35-4_79_2_163:1.1.2.6
	Kernel-5_35-4_79_2_147_2_17:1.1.2.6
	Kernel-5_35-4_79_2_147_2_16:1.1.2.6
	Kernel-5_35-4_79_2_147_2_15:1.1.2.6
	Kernel-5_35-4_79_2_162:1.1.2.6
	Kernel-5_35-4_79_2_161:1.1.2.6
	Kernel-5_35-4_79_2_147_2_14:1.1.2.6
	Kernel-5_35-4_79_2_147_2_13:1.1.2.6
	Kernel-5_35-4_79_2_160:1.1.2.6
	Kernel-5_35-4_79_2_159:1.1.2.6
	Kernel-5_35-4_79_2_158:1.1.2.6
	Kernel-5_35-4_79_2_157:1.1.2.6
	Kernel-5_35-4_79_2_156:1.1.2.6
	Kernel-5_35-4_79_2_147_2_12:1.1.2.6
	Kernel-5_35-4_79_2_147_2_11:1.1.2.6
	Kernel-5_35-4_79_2_155:1.1.2.6
	Kernel-5_35-4_79_2_147_2_10:1.1.2.6
	Kernel-5_35-4_79_2_154:1.1.2.6
	Kernel-5_35-4_79_2_153:1.1.2.6
	Kernel-5_35-4_79_2_147_2_9:1.1.2.6
	Kernel-5_35-4_79_2_152:1.1.2.6
	Kernel-5_35-4_79_2_151:1.1.2.6
	Kernel-5_35-4_79_2_147_2_8:1.1.2.6
	Kernel-5_35-4_79_2_147_2_7:1.1.2.6
	Kernel-5_35-4_79_2_150:1.1.2.6
	Kernel-5_35-4_79_2_147_2_6:1.1.2.6
	Kernel-5_35-4_79_2_147_2_5:1.1.2.6
	Kernel-5_35-4_79_2_149:1.1.2.6
	Kernel-5_35-4_79_2_147_2_4:1.1.2.6
	Kernel-5_35-4_79_2_147_2_3:1.1.2.6
	Kernel-5_35-4_79_2_148:1.1.2.6
	Kernel-5_35-4_79_2_147_2_2:1.1.2.6
	Kernel-5_35-4_79_2_147_2_1:1.1.2.6
	RPi:1.1.2.6.0.2
	RPi_bp:1.1.2.6
	Kernel-5_35-4_79_2_98_2_52_2_1:1.1.2.4.2.7
	alees_Kernel_dev:1.1.2.4.2.7.0.2
	alees_Kernel_dev_bp:1.1.2.4.2.7
	Kernel-5_35-4_79_2_147:1.1.2.6
	Kernel-5_35-4_79_2_146:1.1.2.6
	Kernel-5_35-4_79_2_145:1.1.2.6
	Kernel-5_35-4_79_2_144:1.1.2.6
	Kernel-5_35-4_79_2_143:1.1.2.6
	Kernel-5_35-4_79_2_142:1.1.2.6
	Kernel-5_35-4_79_2_141:1.1.2.6
	Kernel-5_35-4_79_2_140:1.1.2.6
	Kernel-5_35-4_79_2_139:1.1.2.6
	Kernel-5_35-4_79_2_138:1.1.2.6
	Kernel-5_35-4_79_2_137:1.1.2.6
	Kernel-5_35-4_79_2_136:1.1.2.6
	Kernel-5_35-4_79_2_135:1.1.2.6
	Kernel-5_35-4_79_2_134:1.1.2.6
	Kernel-5_35-4_79_2_133:1.1.2.6
	Kernel-5_35-4_79_2_132:1.1.2.6
	Kernel-5_35-4_79_2_131:1.1.2.6
	Kernel-5_35-4_79_2_130:1.1.2.6
	Kernel-5_35-4_79_2_129:1.1.2.6
	Kernel-5_35-4_79_2_128:1.1.2.6
	Kernel-5_35-4_79_2_127:1.1.2.6
	Kernel-5_35-4_79_2_126:1.1.2.6
	Kernel-5_35-4_79_2_125:1.1.2.6
	Kernel-5_35-4_79_2_124:1.1.2.6
	Kernel-5_35-4_79_2_123:1.1.2.6
	Cortex_merge:1.1.2.4.2.7
	Kernel-5_35-4_79_2_122:1.1.2.5
	Kernel-5_35-4_79_2_98_2_54:1.1.2.4.2.7
	Kernel-5_35-4_79_2_98_2_53:1.1.2.4.2.7
	Kernel-5_35-4_79_2_98_2_52:1.1.2.4.2.7
	Kernel-5_35-4_79_2_98_2_51:1.1.2.4.2.7
	Kernel-5_35-4_79_2_98_2_50:1.1.2.4.2.7
	Kernel-5_35-4_79_2_98_2_49:1.1.2.4.2.6
	Kernel-5_35-4_79_2_98_2_48:1.1.2.4.2.6
	Kernel-5_35-4_79_2_121:1.1.2.5
	Kernel-5_35-4_79_2_98_2_47:1.1.2.4.2.5
	Kernel-5_35-4_79_2_120:1.1.2.5
	Kernel-5_35-4_79_2_98_2_46:1.1.2.4.2.5
	Kernel-5_35-4_79_2_119:1.1.2.4
	Kernel-5_35-4_79_2_98_2_45:1.1.2.4.2.4
	Kernel-5_35-4_79_2_98_2_44:1.1.2.4.2.4
	Kernel-5_35-4_79_2_118:1.1.2.4
	Kernel-5_35-4_79_2_98_2_43:1.1.2.4.2.4
	Kernel-5_35-4_79_2_117:1.1.2.4
	Kernel-5_35-4_79_2_116:1.1.2.4
	Kernel-5_35-4_79_2_98_2_42:1.1.2.4.2.4
	Kernel-5_35-4_79_2_115:1.1.2.4
	Kernel-5_35-4_79_2_98_2_41:1.1.2.4.2.4
	Kernel-5_35-4_79_2_98_2_40:1.1.2.4.2.4
	Kernel-5_35-4_79_2_114:1.1.2.4
	Kernel-5_35-4_79_2_98_2_39:1.1.2.4.2.4
	Kernel-5_35-4_79_2_98_2_38:1.1.2.4.2.3
	Kernel-5_35-4_79_2_113:1.1.2.4
	Kernel-5_35-4_79_2_112:1.1.2.4
	Kernel-5_35-4_79_2_98_2_37:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_36:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_35:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_34:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_33:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_32:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_31:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_30:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_29:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_28:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_27:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_26:1.1.2.4.2.2
	Kernel-5_35-4_79_2_111:1.1.2.4
	Kernel-5_35-4_79_2_98_2_25:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_24:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_23:1.1.2.4.2.2
	Kernel-5_35-4_79_2_110:1.1.2.4
	Kernel-5_35-4_79_2_98_2_22:1.1.2.4.2.2
	Kernel-5_35-4_79_2_109:1.1.2.4
	Kernel-5_35-4_79_2_98_2_21:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_20:1.1.2.4.2.2
	Kernel-5_35-4_79_2_108:1.1.2.4
	Kernel-5_35-4_79_2_107:1.1.2.4
	Kernel-5_35-4_79_2_98_2_19:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_18:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_17:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_16:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_15:1.1.2.4.2.2
	Kernel-5_35-4_79_2_106:1.1.2.4
	Kernel-5_35-4_79_2_105:1.1.2.4
	Kernel-5_35-4_79_2_104:1.1.2.4
	Kernel-5_35-4_79_2_98_2_14:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_13:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_12:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_11:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_10:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_9:1.1.2.4.2.2
	Kernel-5_35-4_79_2_103:1.1.2.4
	Kernel-5_35-4_79_2_102:1.1.2.4
	Kernel-5_35-4_79_2_98_2_8:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_7:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_6:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_5:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_4:1.1.2.4.2.2
	Kernel-5_35-4_79_2_101:1.1.2.4
	Kernel-5_35-4_79_2_100:1.1.2.4
	Kernel-5_35-4_79_2_99:1.1.2.4
	Kernel-5_35-4_79_2_98_2_3:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_2:1.1.2.4.2.2
	Kernel-5_35-4_79_2_98_2_1:1.1.2.4.2.1
	Cortex:1.1.2.4.0.2
	Cortex_bp:1.1.2.4
	Kernel-5_35-4_79_2_98:1.1.2.4
	Kernel-5_35-4_79_2_97:1.1.2.4
	Kernel-5_35-4_79_2_96:1.1.2.4
	Kernel-5_35-4_79_2_95:1.1.2.4
	Kernel-5_35-4_79_2_94:1.1.2.4
	Kernel-5_35-4_79_2_93:1.1.2.4
	Kernel-5_35-4_79_2_92:1.1.2.4
	Kernel-5_35-4_79_2_91:1.1.2.4
	Kernel-5_35-4_79_2_90:1.1.2.4
	Kernel-5_35-4_79_2_89:1.1.2.4
	Kernel-5_35-4_79_2_88:1.1.2.4
	Kernel-5_35-4_79_2_87:1.1.2.4
	Kernel-5_35-4_79_2_86:1.1.2.4
	Kernel-5_35-4_79_2_85:1.1.2.4
	Kernel-5_35-4_79_2_84:1.1.2.4
	Kernel-5_35-4_79_2_83:1.1.2.4
	Kernel-5_35-4_79_2_82:1.1.2.4
	Kernel-5_35-4_79_2_81:1.1.2.4
	Kernel-5_35-4_79_2_80:1.1.2.4
	Kernel-5_35-4_79_2_79:1.1.2.4
	Kernel-5_35-4_79_2_78:1.1.2.4
	Kernel-5_35-4_79_2_77:1.1.2.4
	RO_5_07:1.1.2.4
	Kernel-5_35-4_79_2_76:1.1.2.4
	Kernel-5_35-4_79_2_75:1.1.2.4
	Kernel-5_35-4_79_2_74:1.1.2.4
	Kernel-5_35-4_79_2_73:1.1.2.4
	Kernel-5_35-4_79_2_72:1.1.2.4
	Kernel-5_35-4_79_2_71:1.1.2.4
	Kernel-5_35-4_79_2_70:1.1.2.4
	Kernel-5_35-4_79_2_69:1.1.2.4
	Kernel-5_35-4_79_2_68:1.1.2.4
	Kernel-5_35-4_79_2_67:1.1.2.4
	Kernel-5_35-4_79_2_66:1.1.2.4
	Kernel-5_35-4_79_2_65:1.1.2.4
	Kernel-5_35-4_79_2_64:1.1.2.4
	Kernel-5_35-4_79_2_63:1.1.2.4
	Kernel-5_35-4_79_2_62:1.1.2.4
	Kernel-5_35-4_79_2_61:1.1.2.4
	Kernel-5_35-4_79_2_59:1.1.2.4
	Kernel-5_35-4_79_2_58:1.1.2.4
	Kernel-5_35-4_79_2_57:1.1.2.4
	Kernel-5_35-4_79_2_56:1.1.2.4
	Kernel-5_35-4_79_2_55:1.1.2.4
	Kernel-5_35-4_79_2_54:1.1.2.4
	Kernel-5_35-4_79_2_53:1.1.2.4
	Kernel-5_35-4_79_2_52:1.1.2.4
	Kernel-5_35-4_79_2_51:1.1.2.4
	Kernel-5_35-4_79_2_50:1.1.2.4
	Kernel-5_35-4_79_2_49:1.1.2.4
	Kernel-5_35-4_79_2_48:1.1.2.4
	Kernel-5_35-4_79_2_47:1.1.2.3
	Kernel-5_35-4_79_2_46:1.1.2.3
	Kernel-5_35-4_79_2_45:1.1.2.3
	Kernel-5_35-4_79_2_44:1.1.2.3
	Kernel-5_35-4_79_2_25_2_2:1.1.2.2
	Kernel-5_35-4_79_2_43:1.1.2.3
	Kernel-5_35-4_79_2_42:1.1.2.3
	Kernel-5_35-4_79_2_41:1.1.2.2
	Kernel-5_35-4_79_2_40:1.1.2.2
	Kernel-5_35-4_79_2_39:1.1.2.2
	Kernel-5_35-4_79_2_38:1.1.2.2
	Kernel-5_35-4_79_2_37:1.1.2.2
	Kernel-5_35-4_79_2_36:1.1.2.2
	Kernel-5_35-4_79_2_35:1.1.2.2
	Kernel-5_35-4_79_2_34:1.1.2.2
	Kernel-5_35-4_79_2_33:1.1.2.2
	Kernel-5_35-4_79_2_32:1.1.2.2
	Kernel-5_35-4_79_2_25_2_1:1.1.2.2
	Kernel-5_35-4_79_2_31:1.1.2.2
	Kernel-5_35-4_79_2_30:1.1.2.2
	Kernel-5_35-4_79_2_29:1.1.2.2
	Kernel-5_35-4_79_2_28:1.1.2.2
	Kernel-5_35-4_79_2_27:1.1.2.2
	Kernel-5_35-4_79_2_26:1.1.2.2
	Kernel-5_35-4_79_2_25:1.1.2.2
	Kernel-5_35-4_79_2_24:1.1.2.2
	Kernel-5_35-4_79_2_23:1.1.2.2
	Kernel-5_35-4_79_2_22:1.1.2.2
	Kernel-5_35-4_79_2_21:1.1.2.2
	Kernel-5_35-4_79_2_20:1.1.2.2
	Kernel-5_35-4_79_2_19:1.1.2.2
	Kernel-5_35-4_79_2_18:1.1.2.2
	Kernel-5_35-4_79_2_17:1.1.2.2
	Kernel-5_35-4_79_2_16:1.1.2.2
	Kernel-5_35-4_79_2_15:1.1.2.2
	Kernel-5_35-4_79_2_14:1.1.2.2
	Kernel-5_35-4_79_2_13:1.1.2.2
	Kernel-5_35-4_79_2_12:1.1.2.2
	Kernel-5_35-4_79_2_11:1.1.2.2
	Kernel-5_35-4_79_2_10:1.1.2.1
	HAL:1.1.0.2;
locks; strict;
comment	@# @;


4.1
date	2016.06.30.20.07.57;	author jlee;	state Exp;
branches;
next	1.1;
commitid	IWoXxARWeuLDOwcz;

1.1
date	2000.10.16.11.55.38;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2000.10.16.11.55.38;	author kbracey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2000.10.20.15.48.04;	author mstephen;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2001.06.27.14.16.26;	author mstephen;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2002.10.07.17.29.36;	author kbracey;	state Exp;
branches
	1.1.2.4.2.1;
next	1.1.2.5;

1.1.2.5
date	2011.08.07.00.04.57;	author jlee;	state Exp;
branches;
next	1.1.2.6;
commitid	1LhiU7JeG3NwFvuv;

1.1.2.6
date	2011.11.26.21.11.09;	author jlee;	state Exp;
branches;
next	1.1.2.7;
commitid	cI3W0zbtALQG6TIv;

1.1.2.7
date	2014.12.21.10.13.05;	author rsprowson;	state Exp;
branches;
next	1.1.2.8;
commitid	mV2MnLoz7tiTqT2y;

1.1.2.8
date	2015.08.14.22.02.28;	author jlee;	state Exp;
branches;
next	1.1.2.9;
commitid	6gyfvmM0cNZULhxy;

1.1.2.9
date	2016.02.29.09.34.26;	author bavison;	state Exp;
branches;
next	;
commitid	MTrfU2BUG24IeNWy;

1.1.2.4.2.1
date	2009.02.01.13.25.04;	author jlee;	state Exp;
branches;
next	1.1.2.4.2.2;

1.1.2.4.2.2
date	2009.02.21.17.41.24;	author jlee;	state Exp;
branches;
next	1.1.2.4.2.3;

1.1.2.4.2.3
date	2011.06.04.15.54.28;	author jlee;	state Exp;
branches;
next	1.1.2.4.2.4;
commitid	xmzeXYEfZlUPYmmv;

1.1.2.4.2.4
date	2011.06.08.23.09.38;	author jlee;	state Exp;
branches;
next	1.1.2.4.2.5;
commitid	n5CIwG9YV7k9gVmv;

1.1.2.4.2.5
date	2011.08.06.23.56.07;	author jlee;	state Exp;
branches;
next	1.1.2.4.2.6;
commitid	FftZtV6AJ7qwCvuv;

1.1.2.4.2.6
date	2011.08.08.23.28.22;	author jlee;	state Exp;
branches;
next	1.1.2.4.2.7;
commitid	D7rzILnwRRSXoLuv;

1.1.2.4.2.7
date	2011.09.12.18.52.29;	author bavison;	state Exp;
branches;
next	;
commitid	KJtDPjWMk0KCKezv;


desc
@@


4.1
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@; Copyright 2000 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

ARMv3    *       0
ARMv4    *       1
ARMv4T   *       2
ARMv5    *       3
ARMv5T   *       4
ARMv5TE  *       5
ARMv5TEJ *       6
ARMv6    *       7
ARMvF		*	&F ; 'Fancy' ARM that describes its features in the feature registers.
; Generally this implies ARMv7+, but there are also a few ARMv6 CPUs with this value
; (e.g. ARM1176JZF-S)

                ^       0
ARM600          #       1
ARM610          #       1
ARM700          #       1
ARM710          #       1
ARM710a         #       1
SA110_preRevT   #       1
SA110           #       1
ARM7500         #       1
ARM7500FE       #       1
SA1100          #       1
SA1110          #       1
ARM720T         #       1
ARM920T         #       1
ARM922T         #       1
X80200          #       1
X80321          #       1
ARM1176JZF_S    #       1
Cortex_A5       #       1
Cortex_A7       #       1
Cortex_A8       #       1
Cortex_A9       #       1
Cortex_A12      #       1
Cortex_A15      #       1
Cortex_A17      #       1
Cortex_A53      #       1
Cortex_A57      #       1
Cortex_A72      #       1
ARMunk          *       255

; The macro to do an ARM operation. All ARM operations are expected
; to corrupt a1 only
; This macro corrupts ip unless $zeropage reg is supplied

        MACRO
        ARMop   $op, $cond, $tailcall, $zeropage
 [ "$zeropage" = ""
        LDR$cond ip, =ZeroPage
 ]
 [ "$tailcall" = ""
        MOV$cond lr, pc
 ]
 [ "$zeropage" = ""
        LDR$cond pc, [ip, #Proc_$op]
 |
        LDR$cond pc, [$zeropage, #Proc_$op]
 ]
        MEND

        MACRO
        ChangedProcVecs $tmp
 [ XScaleJTAGDebug
        LDR     $tmp, =ZeroPage
        LDR     $tmp, [$tmp, #ProcessorFlags]
        TST     $tmp, #CPUFlag_XScaleJTAGconnected
        BEQ     %FT01
        BKPT    &2000
01
 ]
        MEND


        END
@


1.1
log
@file ARMops was initially added on branch HAL.
@
text
@d1 90
@


1.1.2.1
log
@More stuff. Up to the desktop now; cache on, working keyboard. Some source
restructuring to start to make splitting it up into several object files more
feasible.
@
text
@a0 59
; Copyright 2000 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

ARMv3   *       0
ARMv4   *       1
ARMv4T  *       2
ARMv5   *       3
ARMv5T  *       4
ARMv5TE *       5

                ^       0
ARM600          #       1
ARM610          #       1
ARM700          #       1
ARM710          #       1
ARM710a         #       1
SA110           #       1
ARM7500         #       1
ARM7500FE       #       1
SA1100          #       1
SA1110          #       1
ARM720T         #       1
ARM920T         #       1
ARM922T         #       1
X80200          #       1
ARMunk          *       255

CPUFlag_BaseRestored            * 1:SHL:0
CPUFlag_StorePCplus8            * 1:SHL:1
CPUFlag_No26bitMode             * 1:SHL:8
CPUFlag_VectorReadException     * 1:SHL:9
CPUFlag_SplitCache              * 1:SHL:10
CPUFlag_NoWBDrain               * 1:SHL:11

; The macro to do an ARM operation. All ARM operations are ATCPS, except that they
; preserve ip (to aid compatiblity with code using r12 as a workspace pointer).

        MACRO
        ARMop   $op, $cond, $tailcall
        MOV$cond a4, #ZeroPage
 [ "$tailcall" = ""
        MOV$cond lr, pc
 ]
        LDR$cond pc, [a4, #Proc_$op]
        MEND

        END
@


1.1.2.2
log
@more use of ARMops in page manipulation, change register usage of ARmops
tested by kernel boot to star prompt only

Version 5.35, 4.79.2.11. Tagged as 'Kernel-5_35-4_79_2_11'
@
text
@d47 2
a48 3
; The macro to do an ARM operation. All ARM operations are expected
; to corrupt a1 only
; This macro corrupts ip unless $zero reg is supplied
d51 2
a52 4
        ARMop   $op, $cond, $tailcall, $zero
 [ "$zero" = ""
        MOV$cond ip, #ZeroPage
 ]
d56 1
a56 5
 [ "$zero" = ""
        LDR$cond pc, [ip, #Proc_$op]
 |
        LDR$cond pc, [$zero, #Proc_$op]
 ]
@


1.1.2.3
log
@StrongARM is back, and this time it's provisional!

IOMD HAL:
  enables fast clock for StrongARM on Medusa h/w

Kernel:
  ARMops for StrongARM implemented. Tested moderately on
  HAL/32-bit minimal desktop build for Risc PC. Could do
  with more testing later. eg. does reentrant cache
  cleaning support really work?
  Lazy task swapping is enabled for revT or later, wahey.

Version 5.35, 4.79.2.42. Tagged as 'Kernel-5_35-4_79_2_42'
@
text
@a28 1
SA110_preRevT   #       1
a45 1
CPUFlag_AbortRestartBroken      * 1:SHL:12
@


1.1.2.4
log
@Lots of Tungsten work.

Version 5.35, 4.79.2.48. Tagged as 'Kernel-5_35-4_79_2_48'
@
text
@a38 1
X80321          #       1
d41 7
a47 18
; These flags are stored in ProcessorFlags and returned by OS_PlatformFeatures 0 (Read code features)

CPUFlag_SynchroniseCodeAreas    * 1:SHL:0       ; Calls to OS_SynchroniseCodeAreas required
CPUFlag_InterruptDelay          * 1:SHL:1       ; Clearing then setting I bit immediately doesn't trigger IRQs
CPUFlag_VectorReadException     * 1:SHL:2       ; 26-bit reads of hardware vectors abort
CPUFlag_StorePCplus8            * 1:SHL:3       ; Stores of R15 store PC+8 rather than PC+12
CPUFlag_BaseRestored            * 1:SHL:4       ; Base Restored abort model rather than Base Updated
CPUFlag_SplitCache              * 1:SHL:5       ; CPU has separate I and D caches
CPUFlag_32bitOS                 * 1:SHL:6       ; OS is 32-bit
CPUFlag_No26bitMode             * 1:SHL:7       ; CPU does not support 26-bit modes
CPUFlag_LongMul                 * 1:SHL:8       ; Has M extensions (UMULL etc)
CPUFlag_Thumb                   * 1:SHL:9       ; Supports Thumb
CPUFlag_DSP                     * 1:SHL:10      ; Has E extensions (QADD etc)
CPUFlag_ExtendedPages           * 1:SHL:15      ; Supports extended small page L2 descriptors
CPUFlag_NoWBDrain               * 1:SHL:16      ; CPU does not support Drain Write Buffer instruction
CPUFlag_AbortRestartBroken      * 1:SHL:17      ; Aborts do not correctly follow documented abort model
CPUFlag_XScale                  * 1:SHL:18      ; it's an XScale, so weird debug etc
CPUFlag_XScaleJTAGconnected     * 1:SHL:19      ; JTAG has been connected
a66 13

        MACRO
        ChangedProcVecs $tmp
 [ XScaleJTAGDebug
        MOV     $tmp, #0
        LDR     $tmp, [$tmp, #ProcessorFlags]
        TST     $tmp, #CPUFlag_XScaleJTAGconnected
        BEQ     %FT01
        BKPT    &2000
01
 ]
        MEND

@


1.1.2.5
log
@Merge over some changes from the Cortex branch
Detail:
  hdr/ARMops - Reserve OS_PlatformFeatures 0 bit 20 for indicating whether high processor vectors are in use
  s/Kernel - Add local definitions of BYTEWS, LDROSB, STROSB, VDWS macros (previously in Hdr:Macros)
  s/MoreComms - Fix potential buffer overflow when filling error buffer (although GSTrans shouldn't overflow the buffer in the first place?)
  s/Arthur2 - GSRead number detection fix
  s/ArthurSWIs - Updated OS_ReadUnsigned to support reading 64bit numbers
  Docs/ReadUnsigned - Docs for the updated OS_ReadUnsigned interface
Admin:
  Untested!
  Needs HdrSrc 1.86


Version 5.35, 4.79.2.120. Tagged as 'Kernel-5_35-4_79_2_120'
@
text
@a59 1
CPUFlag_HiProcVecs              * 1:SHL:20      ; High processor vectors are in use
@


1.1.2.6
log
@Merge Cortex kernel into HAL branch
Detail:
  This is a full merge of the Cortex kernel back into the HAL branch. Since the Cortex kernel is/was just a superset of the HAL branch, at this point in time both branches are identical.
  Main features the HAL branch gains from this merge:
  - ARMv6/ARMv7 support
  - High processor vectors/zero page relocation support
  - objasm 4 warning fixes
  - Improved HAL related functionality:
    - Support for HAL-driven RTCs instead of kernel-driven IIC based ones
    - Support for arbitrary size machine IDs
    - Support for multiple IIC busses
    - Support for any HAL size, instead of hardcoded 64k size
    - Probably some other stuff I've forgotten
  - Probably a few bug fixes here and there
Admin:
  Tested on BB-xM & Iyonix.
  Was successfully flashed to ROM on an Iyonix to test the Cortex branch implementation of the 2010 RTC bug fix.
  IOMD build untested - but has been known to work in the past.


Version 5.35, 4.79.2.123. Tagged as 'Kernel-5_35-4_79_2_123'
@
text
@d16 6
a21 11
ARMv3    *       0
ARMv4    *       1
ARMv4T   *       2
ARMv5    *       3
ARMv5T   *       4
ARMv5TE  *       5
ARMv5TEJ *       6
ARMv6    *       7
ARMvF		*	&F ; 'Fancy' ARM that describes its features in the feature registers.
; Generally this implies ARMv7+, but there are also a few ARMv6 CPUs with this value
; (e.g. ARM1176JZF-S)
a39 3
Cortex_A8       #       1
Cortex_A9	#	1
ARM1176JZF_S    #       1
d64 1
a64 1
; This macro corrupts ip unless $zeropage reg is supplied
d67 3
a69 3
        ARMop   $op, $cond, $tailcall, $zeropage
 [ "$zeropage" = ""
        LDR$cond ip, =ZeroPage
d74 1
a74 1
 [ "$zeropage" = ""
d77 1
a77 1
        LDR$cond pc, [$zeropage, #Proc_$op]
d84 1
a84 1
        LDR     $tmp, =ZeroPage
@


1.1.2.7
log
@Delegate L2 (and below) cache init at power on/reset to the HAL
Historically the kernel looked after all aspects of cache control since they were common across all ARMs. However, not all cache controllers are created equal, and sometimes more complex initialisation steps are needed than fit the generic coprocessor ops - for example the PL310 attached to a Cortex-A9 has memory mapped control registers.
Rather than clutter the kernel with one shot init code for every cache controller invented, we delegate that step to the HAL in HAL_Init. This is only a few hundred instructions later than where it was already being set. The kernel remains responsible for subsequent maintenance, this is just init which is being handed off.
A quick survey of the Cortex-A TRMs shows:
A5 - optional, for example ARM's PL310, ref TRM section 8.1.7.
A7 - optional, C bit of SCTLR, ref TRM section 1.1.
A8 - L2EN bit of ACTLR, note this bit has been recycled for other uses on other cores, ref TRM section 8.3.
A9 - not integrated, ARM's PL310 uses bit 0 of control register 1, ref PL310 TRM section 3.1.1.
A12 - see A17
A15 - integrated, C bit of SCTLR, ref TRM section 7.2.3.
A17 - integrated, bit 18 of L2CTLR & C bit of SCTLR, ref TRM section 7.2.
and while we've got the TRMs open, back fill the CPU id register table.

Version 5.35, 4.79.2.250. Tagged as 'Kernel-5_35-4_79_2_250'
@
text
@d45 2
a47 7
Cortex_A5       #       1
Cortex_A7       #       1
Cortex_A8       #       1
Cortex_A9       #       1
Cortex_A12      #       1
Cortex_A15      #       1
Cortex_A17      #       1
@


1.1.2.8
log
@Replace WriteBuffer_Drain ARMop with a suite of memory barrier ARMops
Detail:
  - Docs/HAL/ARMop_API - Updated with documentation for the new ARMops.
  - s/ARMops - Set up pointers for the new memory barrier ARMops. Add full implementations for ARMv6 & ARMv7; older architectures should be able to get by with a mix of null ops & write buffer drain ops. Update ARMopPtrTable to validate structure against the list in hdr/OSMisc
  - hdr/KernelWS - Reserve workspace for new ARMops. Free up a bit of space by limiting ourselves to 2 cache levels with ARMv7. Remove some unused definitions.
  - hdr/OSMisc - New header defining OS_PlatformFeatures & OS_MMUControl reason codes, OS_PlatformFeatures 0 flags, and OS_MMUControl 2 ARMop indices
  - Makefile - Add export rules for OSMisc header
  - hdr/ARMops, s/ARM600, s/VMSAv6 - Remove CPUFlag_* and MMUCReason_* definitions. Update OS_MMUControl write buffer drain to use DSB_ReadWrite ARMop (which is what most existing write buffer drain implementations have been renamed to).
  - s/GetAll - Get Hdr:OSMisc
  - s/Kernel - Use OS_PlatformFeatures reason code symbols
  - s/vdu/vdudecl - Remove unused definition
Admin:
  Tested on ARM11, Cortex-A8, Cortex-A9


Version 5.35, 4.79.2.279. Tagged as 'Kernel-5_35-4_79_2_279'
@
text
@d55 20
@


1.1.2.9
log
@  Support for ARMv8
Detail:
  * Filled in CPU tables for publicly documented ARMv8 cores (Cortex-A53,57,72).
  * Recent ARM ARMs (e.g. section B1.9.2 of the ARMv7AR ARM) permit the core to
    take an undefined instruction exception upon encountering even not-taken
    conditional undefined instructions. This option is exercised by the
    Cortex-A53, unlike all ARMv7 cores previously supported by RISC OS. This
    unfortunately trips up a lot of kernel code that adapts to different
    architectures at runtime. These have now all been replaced with branches
    over the affected code on the opposite condition.
  * Fixed bug in HAL_InvalidateCache_ARMvF: for the main body of the loop,
    which was written as though to act on the CLIDR register, r8 actually
    contained the CTR register instead.
Admin:
  Tested on Raspberry Pi 3

Version 5.35, 4.79.2.304. Tagged as 'Kernel-5_35-4_79_2_304'
@
text
@a52 3
Cortex_A53      #       1
Cortex_A57      #       1
Cortex_A72      #       1
@


1.1.2.4.2.1
log
@Initial kernel support for Cortex-A8 processors.
Detail:
  hdr/ARMops - Added Cortex_A8 processor type, new ARM architecture number
  hdr/Options - Enabled various kernel debug options
  s/ARMops - Added Cortex-A8/OMAP3530 to known CPUs list. Ignore cache type register for ARM architecture &F.
  s/NewIRQs - Increase MaxInterrupts to 96
Admin:
  Brief testing under qemu-omap3.



Version 5.35, 4.79.2.98.2.1. Tagged as 'Kernel-5_35-4_79_2_98_2_1'
@
text
@a21 1
ARMvF   *       &F ; 'Fancy' ARM that describes its features in the feature registers
a39 1
Cortex_A8       #       1
@


1.1.2.4.2.2
log
@  Add support for Cortex cache type. Extend ARM_Analyse to, where appropriate, use CPU feature registers to identify CPU capabilities.
Detail:
  s/ARMops - Support for Cortex multi-level cache (CT_ctype_WB_CR7_Lx). New ARM_Analyse_Fancy to identify CPU capabilities using feature registers.
  s/HAL - Modify pre-ARMop cache code to handle Cortex-syle caches.
  s/MemInfo - Replace ARM_flush_TLB macro call with appropriate ARMop to provide Cortex compatability
  hdr/ARMops - Update list of ARM architectures
  hdr/CoPro15ops - Deprecate ARM_flush_* macros for HAL kernels, as they are no longer capable of flushing all cache types. ARMops should be used instead.
  hdr/KernelWS - Add storage space for multi-level cache properties required for new cache cleaning code.
Admin:
  Tested under qemu-omap3. Still unable to verify on real hardware due to lack of appropriate MMU code. However new OMAP3 HAL code that uses similar cache management functions appears to work fine on real hardware.


Version 5.35, 4.79.2.98.2.2. Tagged as 'Kernel-5_35-4_79_2_98_2_2'
@
text
@d16 7
a22 9
ARMv3    *       0
ARMv4    *       1
ARMv4T   *       2
ARMv5    *       3
ARMv5T   *       4
ARMv5TE  *       5
ARMv5TEJ *       6
ARMv6    *       7
ARMvF    *       &F ; 'Fancy' ARM that describes its features in the feature registers (Cortex/ARMv7 and above?)
@


1.1.2.4.2.3
log
@Add hdr.Variables to the C header export, fix ARMv6 issues
Detail:
  Makefile - Added hdr.Variables to the C header export list
  hdr/ARMops, s/ARMops - Added ARM1176JZF-S to the list of known CPUs
  s/ARMops - Fix unaligned memory access in ARM_PrintProcessorType
  hdr/Copro15ops, s/ARMops, s/HAL, s/VMSAv6, s/AMBControl/memmap - Fixed all myDSB/myISB/etc. macro instances to specify a temp register, so that they work properly when building an ARMv6 version of the kernel
Admin:
  Fixes build errors with the latest Draw module.
  Should also allow the kernel to work properly with the new S3C6410 port.
  ARMv6 version builds OK, but no other builds or runtime tests have been made.


Version 5.35, 4.79.2.98.2.38. Tagged as 'Kernel-5_35-4_79_2_98_2_38'
@
text
@a43 1
ARM1176JZF_S    #       1
@


1.1.2.4.2.4
log
@Kernel fixes for ARMv6
Detail:
  hdr/ARMops - Amended ARMvF description to state that an ARMvF CPU can be ARMv6 or ARMv7
  s/ARMops - Move ARM11JZF_S CPUDesc to KnownCPUTable_Fancy, since it's ARMvF. Update ARM_Analyse_Fancy to detect whether ARMv6 or ARMv7 style cache control is in use, and react accordingly.
  s/HAL - Simplified system control register/MMUC initialisation. There are now just two types of setup - one for ARMv3-ARMv5 and one for ARMv6-ARMv7. Modified HAL_InvalidateCache_ARMvF to use the appropriate cache flush instructions depending on whether it's an ARMv6 or ARMv7 style cache.
Admin:
  S3C6410 and other ARMv6 machines should work now.
  Tested on BB-xM rev A2.


Version 5.35, 4.79.2.98.2.39. Tagged as 'Kernel-5_35-4_79_2_98_2_39'
@
text
@d24 1
a24 1
ARMvF    *       &F ; 'Fancy' ARM that describes its features in the feature registers. Generally this implies ARMv7+, but there are also a few ARMv6 CPUs with this value (e.g. ARM1176JZF-S)
@


1.1.2.4.2.5
log
@Misc kernel updates
Detail:
  hdr/ARMops - Reserve OS_PlatformFeatures 0 bit 20 for indicating whether high processor vectors are in use
  s/Kernel - Add local definitions of BYTEWS, LDROSB, STROSB, VDWS macros (previously in Hdr:Macros)
  s/MoreComms - Fix potential buffer overflow when filling error buffer (although GSTrans shouldn't overflow the buffer in the first place?)
Admin:
  Tested on rev A2 BB-xM
  Requires HdrSrc 1.86


Version 5.35, 4.79.2.98.2.46. Tagged as 'Kernel-5_35-4_79_2_98_2_46'
@
text
@a64 1
CPUFlag_HiProcVecs              * 1:SHL:20      ; High processor vectors are in use
@


1.1.2.4.2.6
log
@Add zero page relocation support
Detail:
  A whole mass of changes to add high processor vectors + zero page relocation support to the Cortex branch of the kernel
  At the moment the code can only cope with two ZeroPage locations, &0 and &FFFF0000. But with a bit more tweaking those restrictions can probably be lifted, allowing ZeroPage to be hidden at almost any address (assuming it's fixed at compile time). If I've done my job right, these restrictions should all be enforced by asserts.
  There's a new option, HiProcVecs, in hdr/Options to control whether high processor vectors are used. When enabling it and building a ROM, remember:
  * FPEmulator needs to be built with the FPEAnchor=High option specified in the components file (not FPEAnchorType=High as my FPEmulator commit comments suggested)
  * ShareFS needs unplugging/removing since it can't cope with it yet
  * Iyonix users will need to use the latest ROOL boot sequence, to ensure the softloaded modules are compatible (OMAP, etc. don't really softload much so they're OK with older sequences)
  * However VProtect also needs patching to fix a nasty bug there - http://www.riscosopen.org/tracker/tickets/294
  The only other notable thing I can think of is that the ProcessTransfer code in s/ARM600 & s/VMSAv6 is disabled if high processor vectors are in use (it's fairly safe to say that code is obsolete in HAL builds anyway?)
  Fun challenge for my successor: Try setting ZeroPage to &FFFF00FF (or similar) so its value can be loaded with MVN instead of LDR. Then use positive/negative address offsets to access the contents.
  File changes:
  - hdr/ARMops - Modified ARMop macro to take the ZeroPage pointer as a parameter instead of 'zero'
  - hdr/Copro15ops - Corrected $quick handling in myISB macro
  - hdr/Options - Added ideal setting for us to use for HiProcVecs
  - s/AMBControl/allocate, s/AMBControl/growp, s/AMBControl/mapslot, s/AMBControl/memmap, s/AMBControl/service, s/AMBControl/shrinkp, s/Arthur2, s/Arthur3, s/ArthurSWIs, s/ChangeDyn, s/ExtraSWIs, s/HAL, s/HeapMan, s/Kernel, s/MemInfo, s/Middle, s/ModHand, s/MoreSWIs, s/MsgCode, s/NewIRQs, s/NewReset, s/Oscli, s/PMF/buffer, s/PMF/IIC, s/PMF/i2cutils, s/PMF/key, s/PMF/mouse, s/PMF/osbyte, s/PMF/oseven, s/PMF/osinit, s/PMF/osword, s/PMF/oswrch, s/SWINaming, s/Super1, s/SysComms, s/TickEvents, s/Utility, s/vdu/vdu23, s/vdu/vdudriver, s/vdu/vdugrafl, s/vdu/vdugrafv, s/vdu/vdupalxx, s/vdu/vdupointer, s/vdu/vduswis, s/vdu/vduwrch - Lots of updates to deal with zero page relocation
  - s/ARM600 - UseProcessTransfer option. Zero page relocation support. Deleted pre-HAL ClearPhysRAM code to tidy the file up a bit.
  - s/ARMops - Zero page relocation support. Set CPUFlag_HiProcVecs when high vectors are in use.
  - s/KbdResPC - Disable compilation of dead code
  - s/VMSAv6 - UseProcessTransfer option. Zero page relocation support.
Admin:
  Tested with OMAP & Iyonix ROM softloads, both with high & low zero page.
  High zero page hasn't had extensive testing, but boot sequence + ROM apps seem to work.


Version 5.35, 4.79.2.98.2.48. Tagged as 'Kernel-5_35-4_79_2_98_2_48'
@
text
@d69 1
a69 1
; This macro corrupts ip unless $zeropage reg is supplied
d72 3
a74 3
        ARMop   $op, $cond, $tailcall, $zeropage
 [ "$zeropage" = ""
        LDR$cond ip, =ZeroPage
d79 1
a79 1
 [ "$zeropage" = ""
d82 1
a82 1
        LDR$cond pc, [$zeropage, #Proc_$op]
d89 1
a89 1
        LDR     $tmp, =ZeroPage
@


1.1.2.4.2.7
log
@  Kernel updates to support Cortex-A9 CPUs
Detail:
  hdr.ARMops
    added Cortex_A9
  hdr.HALDevice
    added OMAP4 specific device IDs
  hdr.KernelWS
    changed definition of DefIRQ1Vspace for M_CortexA9
  s.ARMops
    added CortexA9 specific code for enabling L2 cache
    added CPUDesc Cortex_A9
  s.NewIRQs
    added CortexA9 specific definition of MaxInterrupts
  s.NewReset
    added M_CortexA9 options
    line 1444: corrected typo
    line 187: commented out unnecessary operation
Admin:
  Submission from Willi Theiß

Version 5.35, 4.79.2.98.2.50. Tagged as 'Kernel-5_35-4_79_2_98_2_50'
@
text
@d24 1
a24 3
ARMvF		*	&F ; 'Fancy' ARM that describes its features in the feature registers.
; Generally this implies ARMv7+, but there are also a few ARMv6 CPUs with this value
; (e.g. ARM1176JZF-S)
a43 1
Cortex_A9	#	1
@


