head	4.1;
access;
symbols
	Kernel-6_15:4.1
	Kernel-6_14:4.1
	Kernel-6_01-3:4.1
	Kernel-6_13:4.1
	Kernel-6_12:4.1
	Kernel-6_11:4.1
	Kernel-6_10:4.1
	Kernel-6_09:4.1
	Kernel-6_08-4_129_2_10:4.1
	Kernel-6_08-4_129_2_9:4.1
	Kernel-6_08:4.1
	Kernel-6_07:4.1
	Kernel-6_06:4.1
	Kernel-6_05-4_129_2_8:4.1
	Kernel-6_05:4.1
	Kernel-6_04:4.1
	Kernel-6_03:4.1
	Kernel-6_01-2:4.1
	Kernel-6_01-4_146_2_1:4.1
	Kernel-6_02:4.1
	Kernel-6_01-1:4.1
	Kernel-6_01:4.1
	Kernel-6_00:4.1
	Kernel-5_99:4.1
	Kernel-5_98:4.1
	Kernel-5_97-4_129_2_7:4.1
	Kernel-5_97:4.1
	Kernel-5_96:4.1
	Kernel-5_95:4.1
	Kernel-5_94:4.1
	Kernel-5_93:4.1
	Kernel-5_92:4.1
	Kernel-5_91:4.1
	Kernel-5_90:4.1
	Kernel-5_89-4_129_2_6:4.1
	Kernel-5_89:4.1
	Kernel-5_88-4_129_2_5:4.1
	Kernel-5_88-4_129_2_4:4.1
	Kernel-5_88:4.1
	Kernel-5_87:4.1
	Kernel-5_86-4_129_2_3:4.1
	Kernel-5_86-4_129_2_2:4.1
	Kernel-5_86-4_129_2_1:4.1
	Kernel-5_86:4.1
	SMP:4.1.0.2
	SMP_bp:4.1
	Kernel-5_85:4.1
	Kernel-5_54-1:4.1
	Kernel-5_84:4.1
	Kernel-5_83:4.1
	Kernel-5_82:4.1
	Kernel-5_81:4.1
	Kernel-5_80:4.1
	Kernel-5_79:4.1
	Kernel-5_78:4.1
	Kernel-5_77:4.1
	Kernel-5_76:4.1
	Kernel-5_75:4.1
	Kernel-5_74:4.1
	Kernel-5_73:4.1
	Kernel-5_72:4.1
	Kernel-5_71:4.1
	Kernel-5_70:4.1
	Kernel-5_69:4.1
	Kernel-5_68:4.1
	Kernel-5_67:4.1
	Kernel-5_66:4.1
	Kernel-5_65:4.1
	Kernel-5_64:4.1
	Kernel-5_63:4.1
	Kernel-5_62:4.1
	Kernel-5_61:4.1
	Kernel-5_60:4.1
	Kernel-5_59:4.1
	Kernel-5_58:4.1
	Kernel-5_57:4.1
	Kernel-5_56:4.1
	Kernel-5_55:4.1
	Kernel-5_54:4.1
	Kernel-5_53:4.1
	Kernel-5_52:4.1
	Kernel-5_51:4.1
	Kernel-5_50:4.1
	Kernel-5_49:4.1
	HAL_merge:1.1.2.8
	Kernel-5_48:4.1
	Kernel-5_35-4_79_2_327:1.1.2.8
	Kernel-5_35-4_79_2_326:1.1.2.8
	Kernel-5_35-4_79_2_325:1.1.2.8
	Kernel-5_35-4_79_2_324:1.1.2.8
	Kernel-5_35-4_79_2_323:1.1.2.8
	Kernel-5_35-4_79_2_322:1.1.2.8
	Kernel-5_35-4_79_2_321:1.1.2.8
	Kernel-5_35-4_79_2_320:1.1.2.8
	Kernel-5_35-4_79_2_319:1.1.2.8
	Kernel-5_35-4_79_2_318:1.1.2.8
	Kernel-5_35-4_79_2_317:1.1.2.8
	Kernel-5_35-4_79_2_316:1.1.2.8
	Kernel-5_35-4_79_2_315:1.1.2.8
	Kernel-5_35-4_79_2_314:1.1.2.8
	Kernel-5_35-4_79_2_313:1.1.2.8
	Kernel-5_35-4_79_2_312:1.1.2.8
	Kernel-5_35-4_79_2_311:1.1.2.8
	Kernel-5_35-4_79_2_310:1.1.2.8
	Kernel-5_35-4_79_2_309:1.1.2.8
	Kernel-5_35-4_79_2_308:1.1.2.8
	Kernel-5_35-4_79_2_307:1.1.2.8
	Kernel-5_35-4_79_2_306:1.1.2.8
	Kernel-5_35-4_79_2_305:1.1.2.8
	Kernel-5_35-4_79_2_304:1.1.2.8
	Kernel-5_35-4_79_2_303:1.1.2.8
	Kernel-5_35-4_79_2_302:1.1.2.8
	Kernel-5_35-4_79_2_301:1.1.2.8
	Kernel-5_35-4_79_2_300:1.1.2.8
	Kernel-5_35-4_79_2_299:1.1.2.8
	Kernel-5_35-4_79_2_298:1.1.2.8
	Kernel-5_35-4_79_2_297:1.1.2.8
	Kernel-5_35-4_79_2_296:1.1.2.8
	Kernel-5_35-4_79_2_295:1.1.2.8
	Kernel-5_35-4_79_2_294:1.1.2.8
	Kernel-5_35-4_79_2_293:1.1.2.8
	Kernel-5_35-4_79_2_292:1.1.2.8
	Kernel-5_35-4_79_2_291:1.1.2.8
	Kernel-5_35-4_79_2_290:1.1.2.8
	Kernel-5_35-4_79_2_289:1.1.2.8
	Kernel-5_35-4_79_2_288:1.1.2.8
	Kernel-5_35-4_79_2_287:1.1.2.8
	Kernel-5_35-4_79_2_286:1.1.2.8
	Kernel-5_35-4_79_2_285:1.1.2.8
	Kernel-5_35-4_79_2_284:1.1.2.8
	Kernel-5_35-4_79_2_283:1.1.2.8
	Kernel-5_35-4_79_2_282:1.1.2.8
	Kernel-5_35-4_79_2_281:1.1.2.8
	Kernel-5_35-4_79_2_280:1.1.2.8
	Kernel-5_35-4_79_2_279:1.1.2.8
	Kernel-5_35-4_79_2_278:1.1.2.8
	Kernel-5_35-4_79_2_277:1.1.2.8
	Kernel-5_35-4_79_2_276:1.1.2.8
	Kernel-5_35-4_79_2_275:1.1.2.8
	Kernel-5_35-4_79_2_274:1.1.2.8
	Kernel-5_35-4_79_2_273:1.1.2.8
	Kernel-5_35-4_79_2_272:1.1.2.8
	Kernel-5_35-4_79_2_271:1.1.2.8
	Kernel-5_35-4_79_2_270:1.1.2.8
	Kernel-5_35-4_79_2_269:1.1.2.8
	Kernel-5_35-4_79_2_268:1.1.2.8
	Kernel-5_35-4_79_2_267:1.1.2.8
	Kernel-5_35-4_79_2_266:1.1.2.8
	Kernel-5_35-4_79_2_265:1.1.2.8
	Kernel-5_35-4_79_2_264:1.1.2.8
	Kernel-5_35-4_79_2_263:1.1.2.8
	Kernel-5_35-4_79_2_262:1.1.2.8
	Kernel-5_35-4_79_2_261:1.1.2.8
	Kernel-5_35-4_79_2_260:1.1.2.8
	Kernel-5_35-4_79_2_259:1.1.2.8
	Kernel-5_35-4_79_2_258:1.1.2.8
	Kernel-5_35-4_79_2_257:1.1.2.8
	Kernel-5_35-4_79_2_256:1.1.2.8
	Kernel-5_35-4_79_2_255:1.1.2.8
	Kernel-5_35-4_79_2_254:1.1.2.8
	Kernel-5_35-4_79_2_253:1.1.2.8
	Kernel-5_35-4_79_2_252:1.1.2.8
	Kernel-5_35-4_79_2_251:1.1.2.8
	Kernel-5_35-4_79_2_250:1.1.2.8
	Kernel-5_35-4_79_2_249:1.1.2.8
	Kernel-5_35-4_79_2_248:1.1.2.8
	Kernel-5_35-4_79_2_247:1.1.2.8
	Kernel-5_35-4_79_2_246:1.1.2.8
	Kernel-5_35-4_79_2_245:1.1.2.8
	Kernel-5_35-4_79_2_244:1.1.2.8
	Kernel-5_35-4_79_2_243:1.1.2.8
	Kernel-5_35-4_79_2_242:1.1.2.8
	Kernel-5_35-4_79_2_241:1.1.2.8
	Kernel-5_35-4_79_2_240:1.1.2.8
	Kernel-5_35-4_79_2_239:1.1.2.8
	Kernel-5_35-4_79_2_238:1.1.2.8
	Kernel-5_35-4_79_2_237:1.1.2.8
	Kernel-5_35-4_79_2_236:1.1.2.8
	Kernel-5_35-4_79_2_235:1.1.2.8
	Kernel-5_35-4_79_2_234:1.1.2.8
	Kernel-5_35-4_79_2_233:1.1.2.8
	Kernel-5_35-4_79_2_232:1.1.2.8
	Kernel-5_35-4_79_2_231:1.1.2.8
	Kernel-5_35-4_79_2_230:1.1.2.8
	Kernel-5_35-4_79_2_229:1.1.2.8
	Kernel-5_35-4_79_2_228:1.1.2.8
	Kernel-5_35-4_79_2_227:1.1.2.8
	Kernel-5_35-4_79_2_226:1.1.2.8
	Kernel-5_35-4_79_2_225:1.1.2.8
	Kernel-5_35-4_79_2_224:1.1.2.8
	Kernel-5_35-4_79_2_223:1.1.2.8
	Kernel-5_35-4_79_2_222:1.1.2.8
	Kernel-5_35-4_79_2_221:1.1.2.8
	Kernel-5_35-4_79_2_220:1.1.2.8
	Kernel-5_35-4_79_2_219:1.1.2.8
	Kernel-5_35-4_79_2_218:1.1.2.8
	Kernel-5_35-4_79_2_217:1.1.2.8
	Kernel-5_35-4_79_2_216:1.1.2.8
	Kernel-5_35-4_79_2_215:1.1.2.8
	Kernel-5_35-4_79_2_214:1.1.2.8
	Kernel-5_35-4_79_2_213:1.1.2.8
	Kernel-5_35-4_79_2_212:1.1.2.8
	Kernel-5_35-4_79_2_211:1.1.2.8
	Kernel-5_35-4_79_2_210:1.1.2.8
	Kernel-5_35-4_79_2_209:1.1.2.8
	Kernel-5_35-4_79_2_208:1.1.2.8
	Kernel-5_35-4_79_2_207:1.1.2.8
	Kernel-5_35-4_79_2_206:1.1.2.8
	Kernel-5_35-4_79_2_205:1.1.2.8
	Kernel-5_35-4_79_2_204:1.1.2.8
	Kernel-5_35-4_79_2_203:1.1.2.8
	Kernel-5_35-4_79_2_202:1.1.2.8
	Kernel-5_35-4_79_2_201:1.1.2.8
	Kernel-5_35-4_79_2_200:1.1.2.8
	Kernel-5_35-4_79_2_199:1.1.2.8
	Kernel-5_35-4_79_2_198:1.1.2.8
	Kernel-5_35-4_79_2_197:1.1.2.8
	Kernel-5_35-4_79_2_196:1.1.2.8
	Kernel-5_35-4_79_2_195:1.1.2.8
	Kernel-5_35-4_79_2_194:1.1.2.8
	Kernel-5_35-4_79_2_193:1.1.2.8
	Kernel-5_35-4_79_2_192:1.1.2.8
	Kernel-5_35-4_79_2_191:1.1.2.8
	Kernel-5_35-4_79_2_190:1.1.2.8
	Kernel-5_35-4_79_2_189:1.1.2.8
	Kernel-5_35-4_79_2_188:1.1.2.8
	Kernel-5_35-4_79_2_187:1.1.2.8
	Kernel-5_35-4_79_2_186:1.1.2.8
	Kernel-5_35-4_79_2_185:1.1.2.7
	Kernel-5_35-4_79_2_184:1.1.2.7
	Kernel-5_35-4_79_2_183:1.1.2.7
	Kernel-5_35-4_79_2_182:1.1.2.7
	Kernel-5_35-4_79_2_181:1.1.2.7
	Kernel-5_35-4_79_2_180:1.1.2.7
	Kernel-5_35-4_79_2_179:1.1.2.7
	Kernel-5_35-4_79_2_178:1.1.2.7
	Kernel-5_35-4_79_2_177:1.1.2.7
	Kernel-5_35-4_79_2_176:1.1.2.7
	Kernel-5_35-4_79_2_175:1.1.2.7
	Kernel-5_35-4_79_2_174:1.1.2.7
	Kernel-5_35-4_79_2_173:1.1.2.7
	Kernel-5_35-4_79_2_172:1.1.2.7
	Kernel-5_35-4_79_2_171:1.1.2.7
	Kernel-5_35-4_79_2_170:1.1.2.7
	Kernel-5_35-4_79_2_169:1.1.2.7
	Kernel-5_35-4_79_2_168:1.1.2.7
	Kernel-5_35-4_79_2_167:1.1.2.7
	Kernel-5_35-4_79_2_166:1.1.2.7
	Kernel-5_35-4_79_2_165:1.1.2.7
	RPi_merge:1.1.2.7
	Kernel-5_35-4_79_2_147_2_23:1.1.2.7
	Kernel-5_35-4_79_2_147_2_22:1.1.2.7
	Kernel-5_35-4_79_2_147_2_21:1.1.2.7
	Kernel-5_35-4_79_2_147_2_20:1.1.2.7
	Kernel-5_35-4_79_2_147_2_19:1.1.2.7
	Kernel-5_35-4_79_2_147_2_18:1.1.2.7
	Kernel-5_35-4_79_2_164:1.1.2.7
	Kernel-5_35-4_79_2_163:1.1.2.7
	Kernel-5_35-4_79_2_147_2_17:1.1.2.7
	Kernel-5_35-4_79_2_147_2_16:1.1.2.7
	Kernel-5_35-4_79_2_147_2_15:1.1.2.7
	Kernel-5_35-4_79_2_162:1.1.2.7
	Kernel-5_35-4_79_2_161:1.1.2.7
	Kernel-5_35-4_79_2_147_2_14:1.1.2.7
	Kernel-5_35-4_79_2_147_2_13:1.1.2.7
	Kernel-5_35-4_79_2_160:1.1.2.7
	Kernel-5_35-4_79_2_159:1.1.2.7
	Kernel-5_35-4_79_2_158:1.1.2.7
	Kernel-5_35-4_79_2_157:1.1.2.7
	Kernel-5_35-4_79_2_156:1.1.2.7
	Kernel-5_35-4_79_2_147_2_12:1.1.2.7
	Kernel-5_35-4_79_2_147_2_11:1.1.2.7
	Kernel-5_35-4_79_2_155:1.1.2.7
	Kernel-5_35-4_79_2_147_2_10:1.1.2.7
	Kernel-5_35-4_79_2_154:1.1.2.7
	Kernel-5_35-4_79_2_153:1.1.2.7
	Kernel-5_35-4_79_2_147_2_9:1.1.2.7
	Kernel-5_35-4_79_2_152:1.1.2.7
	Kernel-5_35-4_79_2_151:1.1.2.7
	Kernel-5_35-4_79_2_147_2_8:1.1.2.7
	Kernel-5_35-4_79_2_147_2_7:1.1.2.7
	Kernel-5_35-4_79_2_150:1.1.2.7
	Kernel-5_35-4_79_2_147_2_6:1.1.2.7
	Kernel-5_35-4_79_2_147_2_5:1.1.2.7
	Kernel-5_35-4_79_2_149:1.1.2.7
	Kernel-5_35-4_79_2_147_2_4:1.1.2.7
	Kernel-5_35-4_79_2_147_2_3:1.1.2.7
	Kernel-5_35-4_79_2_148:1.1.2.7
	Kernel-5_35-4_79_2_147_2_2:1.1.2.7
	Kernel-5_35-4_79_2_147_2_1:1.1.2.7
	RPi:1.1.2.7.0.2
	RPi_bp:1.1.2.7
	Kernel-5_35-4_79_2_98_2_52_2_1:1.1.2.6
	alees_Kernel_dev:1.1.2.6.0.4
	alees_Kernel_dev_bp:1.1.2.6
	Kernel-5_35-4_79_2_147:1.1.2.7
	Kernel-5_35-4_79_2_146:1.1.2.7
	Kernel-5_35-4_79_2_145:1.1.2.7
	Kernel-5_35-4_79_2_144:1.1.2.7
	Kernel-5_35-4_79_2_143:1.1.2.7
	Kernel-5_35-4_79_2_142:1.1.2.7
	Kernel-5_35-4_79_2_141:1.1.2.7
	Kernel-5_35-4_79_2_140:1.1.2.7
	Kernel-5_35-4_79_2_139:1.1.2.7
	Kernel-5_35-4_79_2_138:1.1.2.7
	Kernel-5_35-4_79_2_137:1.1.2.6
	Kernel-5_35-4_79_2_136:1.1.2.6
	Kernel-5_35-4_79_2_135:1.1.2.6
	Kernel-5_35-4_79_2_134:1.1.2.6
	Kernel-5_35-4_79_2_133:1.1.2.6
	Kernel-5_35-4_79_2_132:1.1.2.6
	Kernel-5_35-4_79_2_131:1.1.2.6
	Kernel-5_35-4_79_2_130:1.1.2.6
	Kernel-5_35-4_79_2_129:1.1.2.6
	Kernel-5_35-4_79_2_128:1.1.2.6
	Kernel-5_35-4_79_2_127:1.1.2.6
	Kernel-5_35-4_79_2_126:1.1.2.6
	Kernel-5_35-4_79_2_125:1.1.2.6
	Kernel-5_35-4_79_2_124:1.1.2.6
	Kernel-5_35-4_79_2_123:1.1.2.6
	Cortex_merge:1.1.2.6
	Kernel-5_35-4_79_2_122:1.1.2.6
	Kernel-5_35-4_79_2_98_2_54:1.1.2.6
	Kernel-5_35-4_79_2_98_2_53:1.1.2.6
	Kernel-5_35-4_79_2_98_2_52:1.1.2.6
	Kernel-5_35-4_79_2_98_2_51:1.1.2.6
	Kernel-5_35-4_79_2_98_2_50:1.1.2.6
	Kernel-5_35-4_79_2_98_2_49:1.1.2.6
	Kernel-5_35-4_79_2_98_2_48:1.1.2.6
	Kernel-5_35-4_79_2_121:1.1.2.6
	Kernel-5_35-4_79_2_98_2_47:1.1.2.6
	Kernel-5_35-4_79_2_120:1.1.2.6
	Kernel-5_35-4_79_2_98_2_46:1.1.2.6
	Kernel-5_35-4_79_2_119:1.1.2.6
	Kernel-5_35-4_79_2_98_2_45:1.1.2.6
	Kernel-5_35-4_79_2_98_2_44:1.1.2.6
	Kernel-5_35-4_79_2_118:1.1.2.6
	Kernel-5_35-4_79_2_98_2_43:1.1.2.6
	Kernel-5_35-4_79_2_117:1.1.2.6
	Kernel-5_35-4_79_2_116:1.1.2.6
	Kernel-5_35-4_79_2_98_2_42:1.1.2.6
	Kernel-5_35-4_79_2_115:1.1.2.6
	Kernel-5_35-4_79_2_98_2_41:1.1.2.6
	Kernel-5_35-4_79_2_98_2_40:1.1.2.6
	Kernel-5_35-4_79_2_114:1.1.2.6
	Kernel-5_35-4_79_2_98_2_39:1.1.2.6
	Kernel-5_35-4_79_2_98_2_38:1.1.2.6
	Kernel-5_35-4_79_2_113:1.1.2.6
	Kernel-5_35-4_79_2_112:1.1.2.6
	Kernel-5_35-4_79_2_98_2_37:1.1.2.6
	Kernel-5_35-4_79_2_98_2_36:1.1.2.6
	Kernel-5_35-4_79_2_98_2_35:1.1.2.6
	Kernel-5_35-4_79_2_98_2_34:1.1.2.6
	Kernel-5_35-4_79_2_98_2_33:1.1.2.6
	Kernel-5_35-4_79_2_98_2_32:1.1.2.6
	Kernel-5_35-4_79_2_98_2_31:1.1.2.6
	Kernel-5_35-4_79_2_98_2_30:1.1.2.6
	Kernel-5_35-4_79_2_98_2_29:1.1.2.6
	Kernel-5_35-4_79_2_98_2_28:1.1.2.6
	Kernel-5_35-4_79_2_98_2_27:1.1.2.6
	Kernel-5_35-4_79_2_98_2_26:1.1.2.6
	Kernel-5_35-4_79_2_111:1.1.2.6
	Kernel-5_35-4_79_2_98_2_25:1.1.2.6
	Kernel-5_35-4_79_2_98_2_24:1.1.2.6
	Kernel-5_35-4_79_2_98_2_23:1.1.2.6
	Kernel-5_35-4_79_2_110:1.1.2.6
	Kernel-5_35-4_79_2_98_2_22:1.1.2.6
	Kernel-5_35-4_79_2_109:1.1.2.6
	Kernel-5_35-4_79_2_98_2_21:1.1.2.6
	Kernel-5_35-4_79_2_98_2_20:1.1.2.6
	Kernel-5_35-4_79_2_108:1.1.2.6
	Kernel-5_35-4_79_2_107:1.1.2.6
	Kernel-5_35-4_79_2_98_2_19:1.1.2.6
	Kernel-5_35-4_79_2_98_2_18:1.1.2.6
	Kernel-5_35-4_79_2_98_2_17:1.1.2.6
	Kernel-5_35-4_79_2_98_2_16:1.1.2.6
	Kernel-5_35-4_79_2_98_2_15:1.1.2.6
	Kernel-5_35-4_79_2_106:1.1.2.6
	Kernel-5_35-4_79_2_105:1.1.2.6
	Kernel-5_35-4_79_2_104:1.1.2.6
	Kernel-5_35-4_79_2_98_2_14:1.1.2.6
	Kernel-5_35-4_79_2_98_2_13:1.1.2.6
	Kernel-5_35-4_79_2_98_2_12:1.1.2.6
	Kernel-5_35-4_79_2_98_2_11:1.1.2.6
	Kernel-5_35-4_79_2_98_2_10:1.1.2.6
	Kernel-5_35-4_79_2_98_2_9:1.1.2.6
	Kernel-5_35-4_79_2_103:1.1.2.6
	Kernel-5_35-4_79_2_102:1.1.2.6
	Kernel-5_35-4_79_2_98_2_8:1.1.2.6
	Kernel-5_35-4_79_2_98_2_7:1.1.2.6
	Kernel-5_35-4_79_2_98_2_6:1.1.2.6
	Kernel-5_35-4_79_2_98_2_5:1.1.2.6
	Kernel-5_35-4_79_2_98_2_4:1.1.2.6
	Kernel-5_35-4_79_2_101:1.1.2.6
	Kernel-5_35-4_79_2_100:1.1.2.6
	Kernel-5_35-4_79_2_99:1.1.2.6
	Kernel-5_35-4_79_2_98_2_3:1.1.2.6
	Kernel-5_35-4_79_2_98_2_2:1.1.2.6
	Kernel-5_35-4_79_2_98_2_1:1.1.2.6
	Cortex:1.1.2.6.0.2
	Cortex_bp:1.1.2.6
	Kernel-5_35-4_79_2_98:1.1.2.6
	Kernel-5_35-4_79_2_97:1.1.2.6
	Kernel-5_35-4_79_2_96:1.1.2.6
	Kernel-5_35-4_79_2_95:1.1.2.6
	Kernel-5_35-4_79_2_94:1.1.2.6
	Kernel-5_35-4_79_2_93:1.1.2.6
	Kernel-5_35-4_79_2_92:1.1.2.6
	Kernel-5_35-4_79_2_91:1.1.2.6
	Kernel-5_35-4_79_2_90:1.1.2.6
	Kernel-5_35-4_79_2_89:1.1.2.6
	Kernel-5_35-4_79_2_88:1.1.2.6
	Kernel-5_35-4_79_2_87:1.1.2.6
	Kernel-5_35-4_79_2_86:1.1.2.6
	Kernel-5_35-4_79_2_85:1.1.2.6
	Kernel-5_35-4_79_2_84:1.1.2.6
	Kernel-5_35-4_79_2_83:1.1.2.6
	Kernel-5_35-4_79_2_82:1.1.2.6
	Kernel-5_35-4_79_2_81:1.1.2.6
	Kernel-5_35-4_79_2_80:1.1.2.6
	Kernel-5_35-4_79_2_79:1.1.2.6
	Kernel-5_35-4_79_2_78:1.1.2.6
	Kernel-5_35-4_79_2_77:1.1.2.6
	RO_5_07:1.1.2.6
	Kernel-5_35-4_79_2_76:1.1.2.6
	Kernel-5_35-4_79_2_75:1.1.2.6
	Kernel-5_35-4_79_2_74:1.1.2.6
	Kernel-5_35-4_79_2_73:1.1.2.6
	Kernel-5_35-4_79_2_72:1.1.2.6
	Kernel-5_35-4_79_2_71:1.1.2.6
	Kernel-5_35-4_79_2_70:1.1.2.6
	Kernel-5_35-4_79_2_69:1.1.2.6
	Kernel-5_35-4_79_2_68:1.1.2.6
	Kernel-5_35-4_79_2_67:1.1.2.6
	Kernel-5_35-4_79_2_66:1.1.2.6
	Kernel-5_35-4_79_2_65:1.1.2.5
	Kernel-5_35-4_79_2_64:1.1.2.5
	Kernel-5_35-4_79_2_63:1.1.2.5
	Kernel-5_35-4_79_2_62:1.1.2.5
	Kernel-5_35-4_79_2_61:1.1.2.5
	Kernel-5_35-4_79_2_59:1.1.2.5
	Kernel-5_35-4_79_2_58:1.1.2.5
	Kernel-5_35-4_79_2_57:1.1.2.5
	Kernel-5_35-4_79_2_56:1.1.2.5
	Kernel-5_35-4_79_2_55:1.1.2.5
	Kernel-5_35-4_79_2_54:1.1.2.4
	Kernel-5_35-4_79_2_53:1.1.2.4
	Kernel-5_35-4_79_2_52:1.1.2.4
	Kernel-5_35-4_79_2_51:1.1.2.4
	Kernel-5_35-4_79_2_50:1.1.2.4
	Kernel-5_35-4_79_2_49:1.1.2.4
	Kernel-5_35-4_79_2_48:1.1.2.3
	Kernel-5_35-4_79_2_47:1.1.2.2
	Kernel-5_35-4_79_2_46:1.1.2.2
	Kernel-5_35-4_79_2_45:1.1.2.2
	Kernel-5_35-4_79_2_44:1.1.2.2
	Kernel-5_35-4_79_2_25_2_2:1.1.2.2
	Kernel-5_35-4_79_2_43:1.1.2.2
	Kernel-5_35-4_79_2_42:1.1.2.2
	Kernel-5_35-4_79_2_41:1.1.2.2
	Kernel-5_35-4_79_2_40:1.1.2.2
	Kernel-5_35-4_79_2_39:1.1.2.2
	Kernel-5_35-4_79_2_38:1.1.2.2
	Kernel-5_35-4_79_2_37:1.1.2.2
	Kernel-5_35-4_79_2_36:1.1.2.2
	Kernel-5_35-4_79_2_35:1.1.2.2
	Kernel-5_35-4_79_2_34:1.1.2.2
	Kernel-5_35-4_79_2_33:1.1.2.2
	Kernel-5_35-4_79_2_32:1.1.2.2
	Kernel-5_35-4_79_2_25_2_1:1.1.2.2
	Kernel-5_35-4_79_2_31:1.1.2.2
	Kernel-5_35-4_79_2_30:1.1.2.2
	Kernel-5_35-4_79_2_29:1.1.2.2
	Kernel-5_35-4_79_2_28:1.1.2.2
	Kernel-5_35-4_79_2_27:1.1.2.2
	Kernel-5_35-4_79_2_26:1.1.2.2
	Kernel-5_35-4_79_2_25:1.1.2.2
	Kernel-5_35-4_79_2_24:1.1.2.2
	Kernel-5_35-4_79_2_23:1.1.2.2
	Kernel-5_35-4_79_2_22:1.1.2.2
	Kernel-5_35-4_79_2_21:1.1.2.2
	Kernel-5_35-4_79_2_20:1.1.2.2
	Kernel-5_35-4_79_2_19:1.1.2.2
	Kernel-5_35-4_79_2_18:1.1.2.2
	Kernel-5_35-4_79_2_17:1.1.2.2
	Kernel-5_35-4_79_2_16:1.1.2.2
	Kernel-5_35-4_79_2_15:1.1.2.2
	Kernel-5_35-4_79_2_14:1.1.2.2
	Kernel-5_35-4_79_2_13:1.1.2.2
	Kernel-5_35-4_79_2_12:1.1.2.2
	Kernel-5_35-4_79_2_11:1.1.2.2
	Kernel-5_35-4_79_2_10:1.1.2.2
	Kernel-5_35-4_79_2_9:1.1.2.2
	Kernel-5_35-4_79_2_8:1.1.2.2
	Kernel-5_35-4_79_2_7:1.1.2.1
	Kernel-5_35-4_79_2_6:1.1.2.1
	Kernel-5_35-4_79_2_5:1.1.2.1
	Kernel-5_35-4_79_2_4:1.1.2.1
	Kernel-5_35-4_79_2_3:1.1.2.1
	Kernel-5_35-4_79_2_2:1.1.2.1
	HAL:1.1.0.2;
locks; strict;
comment	@# @;


4.1
date	2016.06.30.20.07.59;	author jlee;	state Exp;
branches;
next	1.1;
commitid	IWoXxARWeuLDOwcz;

1.1
date	2000.10.02.08.52.19;	author kbracey;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2000.10.02.08.52.19;	author kbracey;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2000.10.05.16.46.36;	author dellis;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2002.10.07.17.29.37;	author kbracey;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2002.10.16.17.23.13;	author bavison;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2003.01.27.15.25.32;	author kbracey;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2004.05.06.16.01.59;	author kbracey;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2012.02.25.16.19.34;	author jlee;	state Exp;
branches;
next	1.1.2.8;
commitid	ad3WnPntkzrizyUv;

1.1.2.8
date	2013.03.28.21.36.21;	author jlee;	state Exp;
branches;
next	;
commitid	UN0GP6eB0LlNyBJw;


desc
@@


4.1
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@; Copyright 2000 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; Entries to the OS from the HAL

                ^       0
OS_InitARM      #       1
OS_AddRAM       #       1
OS_Start        #       1
OS_MapInIO      #       1
OS_AddDevice    #       1
OS_LogToPhys    #       1
OS_IICOpV       #       1

HighestOSEntry  *       :INDEX: @@ - 1

; The layout of the OS header
                     ^  0
OSHdr_Magic          #  4 ; = "OSIm"
OSHdr_Flags          #  4
OSHdr_ImageSize      #  4 ; Size of image after decompression
OSHdr_Entries        #  4 ; Offset from header start to entry point table
OSHdr_NumEntries     #  4
OSHdr_CompressedSize #  4 ; Same as OSHdr_ImageSize if not compressed
OSHdr_DecompressHdr  #  4 ; Offset from header start to decompression header. 0 if not compressed.
OSHdr_CompressOffset #  4 ; Offset at which compression should be performed
OSHdr_size           #  0

OSHdrFlag_SupportsCompression * 1 ; OS supports compressed images
OSHdr_ValidFlags              * 1 ; Mask of all valid flags

; Parameters/flag for various calls

OSStartFlag_POR             * 1:SHL:0   ; Power-On Reset
OSStartFlag_NoCMOSReset     * 1:SHL:1	; CMOS reset inhibited (protection link etc)
OSStartFlag_CMOSReset       * 1:SHL:2	; CMOS reset (if POR and not inhibited)
OSStartFlag_NoCMOS  	    * 1:SHL:3	; There's no real NVRAM, only cache
OSStartFlag_RAMCleared      * 1:SHL:4   ; RAM has been cleared to zero

; Decompression header block
                    ^  0
OSDecompHdr_WSSize  #  4 ; Required workspace size (multiple of 4K)
OSDecompHdr_Code    #  4 ; Offset from header start to decompression code
OSDecompHdr_size    #  0

; OS_AddRAM flags
OSAddRAM_IsVRAM                *  1:SHL:0
OSAddRAM_VRAMNotForGeneralUse  *  1:SHL:1
OSAddRAM_NoDMA                 *  1:SHL:7 ; Don't allow any DMA here
OSAddRAM_Speed                 *  1:SHL:8 ; 4 bit value, higher = faster


                END
@


1.1
log
@file OSEntries was initially added on branch HAL.
@
text
@d1 64
@


1.1.2.1
log
@More HAL work. IOMD HAL work in progress. Lots of my own little build
scripts. Don't touch this.

Version 5.35, 4.79.2.2. Tagged as 'Kernel-5_35-4_79_2_2'
@
text
@a0 38
; Copyright 2000 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; Entries to the OS from the HAL

                ^       0
OS_InitARM      #       1
OS_AddRAM       #       1
OS_Start        #       1
OS_MapInIO      #       1

; The layout of the OS header
                ^       0
OSHdr_Magic     #       4
OSHdr_Flags     #       4
OSHdr_ImageSize #       4
OSHdr_Entries   #       4
OSHdr_NumEntries #      4
OSHdr_size      #       0

; Parameters/flag for various calls

OSStartFlag_POR         * 1:SHL:0       ; Power-On Reset
OSStartFlag_NoCMOSReset * 1:SHL:1       ; CMOS reset inhibited (protection link etc)
OSStartFlag_CMOSReset   * 1:SHL:2       ; CMOS reset (if POR and not inhibited)

                END
@


1.1.2.2
log
@  Added HAL NVRAM support
Detail:
  Added the HAL NVRAM entries.
  Modified i2cutils to use the HAL entries for NVRAM and behave sensibly if the HAL reports that there is no NVRAM, in which case there must be a forced reset_cmos call so that the cache gets set up sensibly.
Admin:
  Tested under the RPC emulator and appears to be working correctly, although some calls to IIC are still being made in the no nvram case.

Version 5.35, 4.79.2.8. Tagged as 'Kernel-5_35-4_79_2_8'
@
text
@d34 4
a37 4
OSStartFlag_POR             * 1:SHL:0   ; Power-On Reset
OSStartFlag_NoCMOSReset     * 1:SHL:1	; CMOS reset inhibited (protection link etc)
OSStartFlag_CMOSReset       * 1:SHL:2	; CMOS reset (if POR and not inhibited)
OSStartFlag_NoCMOS  	    * 1:SHL:3	; There's no real NVRAM, only cache
@


1.1.2.3
log
@Lots of Tungsten work.

Version 5.35, 4.79.2.48. Tagged as 'Kernel-5_35-4_79_2_48'
@
text
@a37 2
OSStartFlag_RAMCleared      * 1:SHL:4   ; RAM has been cleared to zero

@


1.1.2.4
log
@  Mostly device stuff.
Detail:
  * Implemented OS_Hardware 2, 3 and 4 as described in Docs.HAL.NewAPI.
  * Added new OS->HAL and HAL->OS routines to register HAL devices with the
    OS during hard resets.
  * Updated Docs.HAL.NewAPI to correct inconsistencies, fill in missing
    definitions, and allow for interrupt sharing.
  * Now uses OS_LeaveOS to trigger callbacks after ROM module init.
Admin:
  Untested. Requires new HAL.

Version 5.35, 4.79.2.49. Tagged as 'Kernel-5_35-4_79_2_49'
@
text
@a21 3
OS_AddDevice    #       1

HighestOSEntry  *       :INDEX: @@ - 1
@


1.1.2.5
log
@Support for keys held down in the HAL at power on.
*Configure ANYTHINGsize was broken due to not setting R0 to ReadUnsigned
IIC ack message uninternationalised
OS_Memory was saying we only had 4M of RAM
VDU4 scrolling when output was switched to sprite was causing corruption
on use of CTRL-J and CTRL-K
Default SystemSize CMOS set to 32k

Version 5.35, 4.79.2.55. Tagged as 'Kernel-5_35-4_79_2_55'
@
text
@a22 1
OS_LogToPhys    #       1
@


1.1.2.6
log
@* HAL can choose to limit amount of screen memory to allocate
  [Not fully implemented - for now leaves at least 16MB free if only
  one RAM area; was 1MB].
* Added HAL_USBControllerInfo, HAL_MonitorLeadID and HAL_Video_Render.
* Added HAL->OS call OS_IICOpV.
* OS_MMUControl now allows independent control of I and C bits.
* Added facility to deactivate keyboard debounce (magic word "NoKd" in
  R2 in KeyV 0).
* Fixed problem with RAM amounts not a multiple of 4MB.
* Supremacy bit (in VDU 19) now sets all 8 bits of supremacy.
* Added PaletteV 14 (reads gamma tables).
* Added Supremacy transfer functions (like gamma correction, but for
  supremacy). Allows easy global supremacy effects in a mode-independent
  fashion. Controlled with PaletteV 15,16.
* Added modes 50-53 (320x240, 1,2,4,8bpp). Intended for small LCD.
* Added 13.5kHz versions of TV modes (selected by Hdr:Machine).
* Upped desktop version to 5.06.

Version 5.35, 4.79.2.66. Tagged as 'Kernel-5_35-4_79_2_66'
@
text
@a23 1
OS_IICOpV       #       1
@


1.1.2.7
log
@Add compressed ROM support. Make more use of ARMv5+ instructions. Other misc tweaks.
Detail:
  hdr/OSEntries, s/HAL, s/Kernel - Add compressed ROM support.
  With the current scheme, a compressed ROM will have everything except the HAL and kernel compressed.
  During the keyboard scan period the kernel will allocate some temporary decompression workspace and call the decompression stub that was appended to the ROM.
  The decompression stub is expected to perform in-place decompression of the ROM. Once decompression is complete the workspace will be freed and the page tables updated to make the ROM image readonly.
  It's the HAL's responsibility to make sure any compressed ROM is located in an area of physically contiguous RAM large enough to hold the uncompressed image.
  More info here: http://www.riscosopen.org/wiki/documentation/show/Compressed%20ROMs
  Makefile, h/OSEntries - Add C export of hdr/OSEntries
  hdr/HALDevice - Add device ID for Tungsten video device. Convert tabs to spaces for consistency.
  hdr/HALEntries, s/NewReset - Moved KbdFlag_* definitions to hdr/HALEntries so HALs can use them in their keyboard scan code
  s/ArthurSWIs, S/HAL, s/HeapSort, s/Kernel, s/MemInfo, s/Middle, s/NewIRQs, s/TickEvents, s/vdu/vdugrafb - Make use of BLX, BFI and long multiplies if the CPU supports them. Don't support SWI calls from thumb mode if the CPU doesn't support thumb.
  s/HAL - Made the LDMIA in Init_MapInRAM more sensible (register order was backwards). The old code did work, but wasn't doing what the comments described. Removed unused/unfinished HAL_Write0 function. Improve RISCOS_LogToPhys to check L1PT for any section mappings if the logical_to_physical call fails
  s/ModHand - Save one instruction by using ADR instead of MOV+ADD to compute lr
  s/NewReset, s/PMF/key - Pass L1PT to HAL_Reset to allow machines without hardware reset (e.g. IOMD) to perform resets by manually disabling the MMU and restarting the ROM
  s/vdu/vdudriver, s/vdu/vdugrafv - Use GVEntry macro borrowed from NVidia module for setting up the GraphicsV jump table. Make GraphicsV_ReadPaletteEntry call HAL_Video_ReadPaletteEntry if left unclaimed. Fixup GV_Render to only call HAL_Video_Render if the HAL call is implemented.
Admin:
  Tested with OMAP3, IOMD & Tungsten ROMs/softloads.


Version 5.35, 4.79.2.138. Tagged as 'Kernel-5_35-4_79_2_138'
@
text
@d29 7
a35 13
                     ^  0
OSHdr_Magic          #  4 ; = "OSIm"
OSHdr_Flags          #  4
OSHdr_ImageSize      #  4 ; Size of image after decompression
OSHdr_Entries        #  4 ; Offset from header start to entry point table
OSHdr_NumEntries     #  4
OSHdr_CompressedSize #  4 ; Same as OSHdr_ImageSize if not compressed
OSHdr_DecompressHdr  #  4 ; Offset from header start to decompression header. 0 if not compressed.
OSHdr_CompressOffset #  4 ; Offset at which compression should be performed
OSHdr_size           #  0

OSHdrFlag_SupportsCompression * 1 ; OS supports compressed images
OSHdr_ValidFlags              * 1 ; Mask of all valid flags
a44 6
; Decompression header block
                    ^  0
OSDecompHdr_WSSize  #  4 ; Required workspace size (multiple of 4K)
OSDecompHdr_Code    #  4 ; Offset from header start to decompression code
OSDecompHdr_size    #  0

@


1.1.2.8
log
@Teach the kernel about different memory attributes
Detail:
  Briefly, this set of changes:
  * Adjusts PhysRamTable so that it retains the flags passed in by the HAL from OS_AddRAM (by storing them in the lower 12 bits of the size field)
  * Sorts the non-VRAM entries of PhysRamTable by speed and DMA capability, to ensure optimal memory allocation during OS startup.
  * Adjust the initial memory allocation logic to allow the cursor/sound chunk and HAL noncacheable workspace to come from DMA capable memory
  * Extends OS_Memory 12 to accept a 'must be DMA capable' flag in bit 8 of R0. This is the same as available in ROL's OS.
  * Extends OS_DynamicArea 0 to allow the creation of dynamic areas that automatically allocate from DMA capable memory. In ROL's OS this was done by setting bit 12 of R4, but we're using bits 12-14 for specifying the cache policy, so instead bit 15 is used.
  * Fixes OS_ReadSysInfo 6 to return the correct DevicesEnd value now that the IRQ/device limit is computed at runtime
  File changes:
  * hdr/OSEntries - Add definitions of the various flags passed to OS_AddRAM by the HAL. Add a new flag, NoDMA, for memory which can't be used for DMA.
  * hdr/KernelWS - Tidy PhysRamTable definition a bit by removing all the DRAM bank definitions except the first - this makes it easier to search for code which is interacting with the table. Remove VRAMFlags, it's redundant now that the flags are kept in the table. Add DMA allocation info to InitWs.
  * s/AMBControl/memmap - Updated to mask out the flags from PhysRamTable when reading RAM block sizes.
  * s/ARM600 - Strip out a lot of IOMD specific pre-HAL code.
  * s/ChangeDyn - Updated to cope with the flags stored in PhysRamTable. Implement support for DMA-capable dynamic areas. Rewrite InitDynamicAreas to insert pages into the free pool in the right order so that the fastest memory will be taken from it first.
  * s/GetAll, s/Middle - Fix OS_ReadSysInfo 6 to return the correct HAL-specific DevicesEnd value
  * s/HAL - Significant rework of initial RAM allocation code to allow the kernel workspace to come from the fastest DMA incapable RAM, while also allowing allocation of DMA capable memory for HAL NCNB workspace & kernel cursor/sound chunks. ClearPhysRAM rewritten as part of this.
  * s/MemInfo - Updated to cope with the flags stored in PhysRamTable. Add support for the new OS_Memory 12 flag. Update OS_Memory 7 to not assume PhysRamTable entries are sorted in address order, and rip out the old pre-HAL IOMD implementation.
  * s/NewReset - Remove GetPagesFromFreePool option, assume TRUE (as this has been the case for the past 10+ years). Revise a few comments and strip dead code. Update to cope with PhysRamTable flags.
  * s/VMSAv6 - Remove a couple of unused definitions
  * s/vdu/vdudriver - Update to cope with PhysRamTable flags
Admin:
  Tested in Kinetic RiscPC ROM softload, Iyonix softload, & OMAP3


Version 5.35, 4.79.2.186. Tagged as 'Kernel-5_35-4_79_2_186'
@
text
@a56 7
; OS_AddRAM flags
OSAddRAM_IsVRAM                *  1:SHL:0
OSAddRAM_VRAMNotForGeneralUse  *  1:SHL:1
OSAddRAM_NoDMA                 *  1:SHL:7 ; Don't allow any DMA here
OSAddRAM_Speed                 *  1:SHL:8 ; 4 bit value, higher = faster


@


