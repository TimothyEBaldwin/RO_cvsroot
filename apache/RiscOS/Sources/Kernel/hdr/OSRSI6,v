head	4.1;
access;
symbols
	Kernel-6_14:4.1
	Kernel-6_01-3:4.1
	Kernel-6_13:4.1
	Kernel-6_12:4.1
	Kernel-6_11:4.1
	Kernel-6_10:4.1
	Kernel-6_09:4.1
	Kernel-6_08-4_129_2_10:4.1
	Kernel-6_08-4_129_2_9:4.1
	Kernel-6_08:4.1
	Kernel-6_07:4.1
	Kernel-6_06:4.1
	Kernel-6_05-4_129_2_8:4.1
	Kernel-6_05:4.1
	Kernel-6_04:4.1
	Kernel-6_03:4.1
	Kernel-6_01-2:4.1
	Kernel-6_01-4_146_2_1:4.1
	Kernel-6_02:4.1
	Kernel-6_01-1:4.1
	Kernel-6_01:4.1
	Kernel-6_00:4.1
	Kernel-5_99:4.1
	Kernel-5_98:4.1
	Kernel-5_97-4_129_2_7:4.1
	Kernel-5_97:4.1
	Kernel-5_96:4.1
	Kernel-5_95:4.1
	Kernel-5_94:4.1
	Kernel-5_93:4.1
	Kernel-5_92:4.1
	Kernel-5_91:4.1
	Kernel-5_90:4.1
	Kernel-5_89-4_129_2_6:4.1
	Kernel-5_89:4.1
	Kernel-5_88-4_129_2_5:4.1
	Kernel-5_88-4_129_2_4:4.1
	Kernel-5_88:4.1
	Kernel-5_87:4.1
	Kernel-5_86-4_129_2_3:4.1
	Kernel-5_86-4_129_2_2:4.1
	Kernel-5_86-4_129_2_1:4.1
	Kernel-5_86:4.1
	SMP:4.1.0.2
	SMP_bp:4.1
	Kernel-5_85:4.1
	Kernel-5_54-1:4.1
	Kernel-5_84:4.1
	Kernel-5_83:4.1
	Kernel-5_82:4.1
	Kernel-5_81:4.1
	Kernel-5_80:4.1
	Kernel-5_79:4.1
	Kernel-5_78:4.1
	Kernel-5_77:4.1
	Kernel-5_76:4.1
	Kernel-5_75:4.1
	Kernel-5_74:4.1
	Kernel-5_73:4.1
	Kernel-5_72:4.1
	Kernel-5_71:4.1
	Kernel-5_70:4.1
	Kernel-5_69:4.1
	Kernel-5_68:4.1
	Kernel-5_67:4.1
	Kernel-5_66:4.1
	Kernel-5_65:4.1
	Kernel-5_64:4.1
	Kernel-5_63:4.1
	Kernel-5_62:4.1
	Kernel-5_61:4.1
	Kernel-5_60:4.1
	Kernel-5_59:4.1
	Kernel-5_58:4.1
	Kernel-5_57:4.1
	Kernel-5_56:4.1
	Kernel-5_55:4.1
	Kernel-5_54:4.1
	Kernel-5_53:4.1
	Kernel-5_52:4.1
	Kernel-5_51:4.1
	Kernel-5_50:4.1
	Kernel-5_49:4.1
	HAL_merge:1.1.2.6
	Kernel-5_48:4.1
	Kernel-5_35-4_79_2_327:1.1.2.6
	Kernel-5_35-4_79_2_326:1.1.2.6
	Kernel-5_35-4_79_2_325:1.1.2.6
	Kernel-5_35-4_79_2_324:1.1.2.6
	Kernel-5_35-4_79_2_323:1.1.2.6
	Kernel-5_35-4_79_2_322:1.1.2.6
	Kernel-5_35-4_79_2_321:1.1.2.6
	Kernel-5_35-4_79_2_320:1.1.2.6
	Kernel-5_35-4_79_2_319:1.1.2.6
	Kernel-5_35-4_79_2_318:1.1.2.6
	Kernel-5_35-4_79_2_317:1.1.2.6
	Kernel-5_35-4_79_2_316:1.1.2.6
	Kernel-5_35-4_79_2_315:1.1.2.6
	Kernel-5_35-4_79_2_314:1.1.2.6
	Kernel-5_35-4_79_2_313:1.1.2.6
	Kernel-5_35-4_79_2_312:1.1.2.6
	Kernel-5_35-4_79_2_311:1.1.2.6
	Kernel-5_35-4_79_2_310:1.1.2.6
	Kernel-5_35-4_79_2_309:1.1.2.6
	Kernel-5_35-4_79_2_308:1.1.2.6
	Kernel-5_35-4_79_2_307:1.1.2.6
	Kernel-5_35-4_79_2_306:1.1.2.6
	Kernel-5_35-4_79_2_305:1.1.2.6
	Kernel-5_35-4_79_2_304:1.1.2.6
	Kernel-5_35-4_79_2_303:1.1.2.6
	Kernel-5_35-4_79_2_302:1.1.2.6
	Kernel-5_35-4_79_2_301:1.1.2.6
	Kernel-5_35-4_79_2_300:1.1.2.6
	Kernel-5_35-4_79_2_299:1.1.2.6
	Kernel-5_35-4_79_2_298:1.1.2.6
	Kernel-5_35-4_79_2_297:1.1.2.6
	Kernel-5_35-4_79_2_296:1.1.2.6
	Kernel-5_35-4_79_2_295:1.1.2.6
	Kernel-5_35-4_79_2_294:1.1.2.6
	Kernel-5_35-4_79_2_293:1.1.2.6
	Kernel-5_35-4_79_2_292:1.1.2.6
	Kernel-5_35-4_79_2_291:1.1.2.6
	Kernel-5_35-4_79_2_290:1.1.2.6
	Kernel-5_35-4_79_2_289:1.1.2.6
	Kernel-5_35-4_79_2_288:1.1.2.6
	Kernel-5_35-4_79_2_287:1.1.2.6
	Kernel-5_35-4_79_2_286:1.1.2.6
	Kernel-5_35-4_79_2_285:1.1.2.6
	Kernel-5_35-4_79_2_284:1.1.2.6
	Kernel-5_35-4_79_2_283:1.1.2.5
	Kernel-5_35-4_79_2_282:1.1.2.5
	Kernel-5_35-4_79_2_281:1.1.2.5
	Kernel-5_35-4_79_2_280:1.1.2.5
	Kernel-5_35-4_79_2_279:1.1.2.5
	Kernel-5_35-4_79_2_278:1.1.2.5
	Kernel-5_35-4_79_2_277:1.1.2.5
	Kernel-5_35-4_79_2_276:1.1.2.5
	Kernel-5_35-4_79_2_275:1.1.2.5
	Kernel-5_35-4_79_2_274:1.1.2.5
	Kernel-5_35-4_79_2_273:1.1.2.5
	Kernel-5_35-4_79_2_272:1.1.2.5
	Kernel-5_35-4_79_2_271:1.1.2.5
	Kernel-5_35-4_79_2_270:1.1.2.4
	Kernel-5_35-4_79_2_269:1.1.2.4
	Kernel-5_35-4_79_2_268:1.1.2.4
	Kernel-5_35-4_79_2_267:1.1.2.4
	Kernel-5_35-4_79_2_266:1.1.2.4
	Kernel-5_35-4_79_2_265:1.1.2.4
	Kernel-5_35-4_79_2_264:1.1.2.4
	Kernel-5_35-4_79_2_263:1.1.2.4
	Kernel-5_35-4_79_2_262:1.1.2.4
	Kernel-5_35-4_79_2_261:1.1.2.4
	Kernel-5_35-4_79_2_260:1.1.2.4
	Kernel-5_35-4_79_2_259:1.1.2.4
	Kernel-5_35-4_79_2_258:1.1.2.4
	Kernel-5_35-4_79_2_257:1.1.2.4
	Kernel-5_35-4_79_2_256:1.1.2.4
	Kernel-5_35-4_79_2_255:1.1.2.4
	Kernel-5_35-4_79_2_254:1.1.2.4
	Kernel-5_35-4_79_2_253:1.1.2.4
	Kernel-5_35-4_79_2_252:1.1.2.4
	Kernel-5_35-4_79_2_251:1.1.2.4
	Kernel-5_35-4_79_2_250:1.1.2.4
	Kernel-5_35-4_79_2_249:1.1.2.4
	Kernel-5_35-4_79_2_248:1.1.2.4
	Kernel-5_35-4_79_2_247:1.1.2.4
	Kernel-5_35-4_79_2_246:1.1.2.4
	Kernel-5_35-4_79_2_245:1.1.2.4
	Kernel-5_35-4_79_2_244:1.1.2.4
	Kernel-5_35-4_79_2_243:1.1.2.4
	Kernel-5_35-4_79_2_242:1.1.2.4
	Kernel-5_35-4_79_2_241:1.1.2.4
	Kernel-5_35-4_79_2_240:1.1.2.4
	Kernel-5_35-4_79_2_239:1.1.2.4
	Kernel-5_35-4_79_2_238:1.1.2.4
	Kernel-5_35-4_79_2_237:1.1.2.4
	Kernel-5_35-4_79_2_236:1.1.2.4
	Kernel-5_35-4_79_2_235:1.1.2.4
	Kernel-5_35-4_79_2_234:1.1.2.4
	Kernel-5_35-4_79_2_233:1.1.2.4
	Kernel-5_35-4_79_2_232:1.1.2.4
	Kernel-5_35-4_79_2_231:1.1.2.4
	Kernel-5_35-4_79_2_230:1.1.2.4
	Kernel-5_35-4_79_2_229:1.1.2.4
	Kernel-5_35-4_79_2_228:1.1.2.4
	Kernel-5_35-4_79_2_227:1.1.2.4
	Kernel-5_35-4_79_2_226:1.1.2.4
	Kernel-5_35-4_79_2_225:1.1.2.4
	Kernel-5_35-4_79_2_224:1.1.2.4
	Kernel-5_35-4_79_2_223:1.1.2.4
	Kernel-5_35-4_79_2_222:1.1.2.4
	Kernel-5_35-4_79_2_221:1.1.2.4
	Kernel-5_35-4_79_2_220:1.1.2.4
	Kernel-5_35-4_79_2_219:1.1.2.4
	Kernel-5_35-4_79_2_218:1.1.2.4
	Kernel-5_35-4_79_2_217:1.1.2.4
	Kernel-5_35-4_79_2_216:1.1.2.4
	Kernel-5_35-4_79_2_215:1.1.2.4
	Kernel-5_35-4_79_2_214:1.1.2.4
	Kernel-5_35-4_79_2_213:1.1.2.4
	Kernel-5_35-4_79_2_212:1.1.2.4
	Kernel-5_35-4_79_2_211:1.1.2.4
	Kernel-5_35-4_79_2_210:1.1.2.4
	Kernel-5_35-4_79_2_209:1.1.2.4
	Kernel-5_35-4_79_2_208:1.1.2.4
	Kernel-5_35-4_79_2_207:1.1.2.4
	Kernel-5_35-4_79_2_206:1.1.2.4
	Kernel-5_35-4_79_2_205:1.1.2.4
	Kernel-5_35-4_79_2_204:1.1.2.4
	Kernel-5_35-4_79_2_203:1.1.2.4
	Kernel-5_35-4_79_2_202:1.1.2.4
	Kernel-5_35-4_79_2_201:1.1.2.4
	Kernel-5_35-4_79_2_200:1.1.2.4
	Kernel-5_35-4_79_2_199:1.1.2.4
	Kernel-5_35-4_79_2_198:1.1.2.4
	Kernel-5_35-4_79_2_197:1.1.2.4
	Kernel-5_35-4_79_2_196:1.1.2.4
	Kernel-5_35-4_79_2_195:1.1.2.4
	Kernel-5_35-4_79_2_194:1.1.2.4
	Kernel-5_35-4_79_2_193:1.1.2.3
	Kernel-5_35-4_79_2_192:1.1.2.3
	Kernel-5_35-4_79_2_191:1.1.2.3
	Kernel-5_35-4_79_2_190:1.1.2.3
	Kernel-5_35-4_79_2_189:1.1.2.3
	Kernel-5_35-4_79_2_188:1.1.2.3
	Kernel-5_35-4_79_2_187:1.1.2.3
	Kernel-5_35-4_79_2_186:1.1.2.3
	Kernel-5_35-4_79_2_185:1.1.2.3
	Kernel-5_35-4_79_2_184:1.1.2.3
	Kernel-5_35-4_79_2_183:1.1.2.3
	Kernel-5_35-4_79_2_182:1.1.2.3
	Kernel-5_35-4_79_2_181:1.1.2.3
	Kernel-5_35-4_79_2_180:1.1.2.3
	Kernel-5_35-4_79_2_179:1.1.2.3
	Kernel-5_35-4_79_2_178:1.1.2.3
	Kernel-5_35-4_79_2_177:1.1.2.3
	Kernel-5_35-4_79_2_176:1.1.2.3
	Kernel-5_35-4_79_2_175:1.1.2.3
	Kernel-5_35-4_79_2_174:1.1.2.3
	Kernel-5_35-4_79_2_173:1.1.2.3
	Kernel-5_35-4_79_2_172:1.1.2.3
	Kernel-5_35-4_79_2_171:1.1.2.3
	Kernel-5_35-4_79_2_170:1.1.2.3
	Kernel-5_35-4_79_2_169:1.1.2.3
	Kernel-5_35-4_79_2_168:1.1.2.3
	Kernel-5_35-4_79_2_167:1.1.2.3
	Kernel-5_35-4_79_2_166:1.1.2.3
	Kernel-5_35-4_79_2_165:1.1.2.3
	RPi_merge:1.1.2.3
	Kernel-5_35-4_79_2_147_2_23:1.1.2.3
	Kernel-5_35-4_79_2_147_2_22:1.1.2.3
	Kernel-5_35-4_79_2_147_2_21:1.1.2.3
	Kernel-5_35-4_79_2_147_2_20:1.1.2.3
	Kernel-5_35-4_79_2_147_2_19:1.1.2.3
	Kernel-5_35-4_79_2_147_2_18:1.1.2.3
	Kernel-5_35-4_79_2_164:1.1.2.3
	Kernel-5_35-4_79_2_163:1.1.2.3
	Kernel-5_35-4_79_2_147_2_17:1.1.2.3
	Kernel-5_35-4_79_2_147_2_16:1.1.2.3
	Kernel-5_35-4_79_2_147_2_15:1.1.2.3
	Kernel-5_35-4_79_2_162:1.1.2.3
	Kernel-5_35-4_79_2_161:1.1.2.3
	Kernel-5_35-4_79_2_147_2_14:1.1.2.3
	Kernel-5_35-4_79_2_147_2_13:1.1.2.3
	Kernel-5_35-4_79_2_160:1.1.2.3
	Kernel-5_35-4_79_2_159:1.1.2.3
	Kernel-5_35-4_79_2_158:1.1.2.3
	Kernel-5_35-4_79_2_157:1.1.2.3
	Kernel-5_35-4_79_2_156:1.1.2.3
	Kernel-5_35-4_79_2_147_2_12:1.1.2.3
	Kernel-5_35-4_79_2_147_2_11:1.1.2.3
	Kernel-5_35-4_79_2_155:1.1.2.3
	Kernel-5_35-4_79_2_147_2_10:1.1.2.3
	Kernel-5_35-4_79_2_154:1.1.2.3
	Kernel-5_35-4_79_2_153:1.1.2.3
	Kernel-5_35-4_79_2_147_2_9:1.1.2.3
	Kernel-5_35-4_79_2_152:1.1.2.3
	Kernel-5_35-4_79_2_151:1.1.2.3
	Kernel-5_35-4_79_2_147_2_8:1.1.2.3
	Kernel-5_35-4_79_2_147_2_7:1.1.2.3
	Kernel-5_35-4_79_2_150:1.1.2.3
	Kernel-5_35-4_79_2_147_2_6:1.1.2.3
	Kernel-5_35-4_79_2_147_2_5:1.1.2.3
	Kernel-5_35-4_79_2_149:1.1.2.3
	Kernel-5_35-4_79_2_147_2_4:1.1.2.3
	Kernel-5_35-4_79_2_147_2_3:1.1.2.3
	Kernel-5_35-4_79_2_148:1.1.2.3
	Kernel-5_35-4_79_2_147_2_2:1.1.2.3
	Kernel-5_35-4_79_2_147_2_1:1.1.2.3
	RPi:1.1.2.3.0.2
	RPi_bp:1.1.2.3
	Kernel-5_35-4_79_2_98_2_52_2_1:1.1.4.4
	alees_Kernel_dev:1.1.4.4.0.2
	alees_Kernel_dev_bp:1.1.4.4
	Kernel-5_35-4_79_2_147:1.1.2.3
	Kernel-5_35-4_79_2_146:1.1.2.3
	Kernel-5_35-4_79_2_145:1.1.2.3
	Kernel-5_35-4_79_2_144:1.1.2.3
	Kernel-5_35-4_79_2_143:1.1.2.3
	Kernel-5_35-4_79_2_142:1.1.2.3
	Kernel-5_35-4_79_2_141:1.1.2.3
	Kernel-5_35-4_79_2_140:1.1.2.3
	Kernel-5_35-4_79_2_139:1.1.2.3
	Kernel-5_35-4_79_2_138:1.1.2.3
	Kernel-5_35-4_79_2_137:1.1.2.3
	Kernel-5_35-4_79_2_136:1.1.2.3
	Kernel-5_35-4_79_2_135:1.1.2.3
	Kernel-5_35-4_79_2_134:1.1.2.3
	Kernel-5_35-4_79_2_133:1.1.2.3
	Kernel-5_35-4_79_2_132:1.1.2.3
	Kernel-5_35-4_79_2_131:1.1.2.3
	Kernel-5_35-4_79_2_130:1.1.2.3
	Kernel-5_35-4_79_2_129:1.1.2.3
	Kernel-5_35-4_79_2_128:1.1.2.3
	Kernel-5_35-4_79_2_127:1.1.2.3
	Kernel-5_35-4_79_2_126:1.1.2.3
	Kernel-5_35-4_79_2_125:1.1.2.3
	Kernel-5_35-4_79_2_124:1.1.2.3
	Kernel-5_35-4_79_2_123:1.1.2.3
	Cortex_merge:1.1.4.4
	Kernel-5_35-4_79_2_122:1.1.2.3
	Kernel-5_35-4_79_2_98_2_54:1.1.4.4
	Kernel-5_35-4_79_2_98_2_53:1.1.4.4
	Kernel-5_35-4_79_2_98_2_52:1.1.4.4
	Kernel-5_35-4_79_2_98_2_51:1.1.4.4
	Kernel-5_35-4_79_2_98_2_50:1.1.4.4
	Kernel-5_35-4_79_2_98_2_49:1.1.4.4
	Kernel-5_35-4_79_2_98_2_48:1.1.4.4
	Kernel-5_35-4_79_2_121:1.1.2.3
	Kernel-5_35-4_79_2_98_2_47:1.1.4.4
	Kernel-5_35-4_79_2_120:1.1.2.2
	Kernel-5_35-4_79_2_98_2_46:1.1.4.3
	Kernel-5_35-4_79_2_119:1.1.2.2
	Kernel-5_35-4_79_2_98_2_45:1.1.4.3
	Kernel-5_35-4_79_2_98_2_44:1.1.4.2
	Cortex:1.1.0.4
	Kernel-5_35-4_79_2_118:1.1.2.1
	HAL:1.1.0.2;
locks; strict;
comment	@# @;


4.1
date	2016.06.30.20.07.59;	author jlee;	state Exp;
branches;
next	1.1;
commitid	IWoXxARWeuLDOwcz;

1.1
date	2011.08.03.23.46.17;	author jlee;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;
commitid	uz6Vep4mDx27F7uv;

1.1.2.1
date	2011.08.03.23.46.17;	author jlee;	state Exp;
branches;
next	1.1.2.2;
commitid	uz6Vep4mDx27F7uv;

1.1.2.2
date	2011.08.04.20.05.23;	author jlee;	state Exp;
branches;
next	1.1.2.3;
commitid	GNEfDqAS3FZlpeuv;

1.1.2.3
date	2011.08.07.19.28.57;	author jlee;	state Exp;
branches;
next	1.1.2.4;
commitid	eaiKjtqFrPbS6Cuv;

1.1.2.4
date	2013.08.06.22.43.02;	author jlee;	state Exp;
branches;
next	1.1.2.5;
commitid	TOIaeUf2Q4rBIr0x;

1.1.2.5
date	2015.07.17.00.28.24;	author jlee;	state Exp;
branches;
next	1.1.2.6;
commitid	s5cS0yKIca1Nvzty;

1.1.2.6
date	2015.08.31.19.28.33;	author jlee;	state Exp;
branches;
next	;
commitid	Ni3KL17bG70fnszy;

1.1.4.1
date	2011.08.03.23.46.17;	author jlee;	state dead;
branches;
next	1.1.4.2;
commitid	LLn4KPy3Hjh5H7uv;

1.1.4.2
date	2011.08.03.23.52.00;	author jlee;	state Exp;
branches;
next	1.1.4.3;
commitid	LLn4KPy3Hjh5H7uv;

1.1.4.3
date	2011.08.04.20.01.03;	author jlee;	state Exp;
branches;
next	1.1.4.4;
commitid	hliJi7339nhRneuv;

1.1.4.4
date	2011.08.07.19.26.25;	author jlee;	state Exp;
branches;
next	;
commitid	91YMAm9KaDtZ5Cuv;


desc
@@


4.1
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; OS_ReadSysInfo 6 values

OSRSI6_CamEntriesPointer                       * 0
OSRSI6_MaxCamEntry                             * 1
OSRSI6_PageFlags_Unavailable                   * 2
OSRSI6_PhysRamTable                            * 3
OSRSI6_ARMA_Cleaner_flipflop                   * 4 ; Unused in HAL kernels
OSRSI6_TickNodeChain                           * 5
OSRSI6_ROMModuleChain                          * 6
OSRSI6_DAList                                  * 7
OSRSI6_AppSpaceDANode                          * 8
OSRSI6_Module_List                             * 9
OSRSI6_ModuleSHT_Entries                       * 10
OSRSI6_ModuleSWI_HashTab                       * 11
OSRSI6_IOSystemType                            * 12
OSRSI6_L1PT                                    * 13
OSRSI6_L2PT                                    * 14
OSRSI6_UNDSTK                                  * 15
OSRSI6_SVCSTK                                  * 16
OSRSI6_SysHeapStart                            * 17

; These are used by ROL, but conflict with our allocations

OSRSI6_ROL_KernelMessagesBlock                 * 18
OSRSI6_ROL_ErrorSemaphore                      * 19
OSRSI6_ROL_MOSdictionary                       * 20
OSRSI6_ROL_Timer_0_Latch_Value                 * 21
OSRSI6_ROL_FastTickerV_Counts_Per_Second       * 22
OSRSI6_ROL_VecPtrTab                           * 23
OSRSI6_ROL_NVECTORS                            * 24
OSRSI6_ROL_IRQSTK                              * 25
OSRSI6_ROL_SWIDispatchTable                    * 26 ; JTABLE-SWIRelocation?
OSRSI6_ROL_SWIBranchBack                       * 27 ; DirtyBranch?

; Our allocations which conflict with the above

OSRSI6_Danger_SWIDispatchTable                 * 18 ; JTABLE-SWIRelocation (Relocated base of OS SWI dispatch table)
OSRSI6_Danger_Devices                          * 19 ; Relocated base of IRQ device head nodes
OSRSI6_Danger_DevicesEnd                       * 20 ; Relocated end of IRQ device head nodes
OSRSI6_Danger_IRQSTK                           * 21
OSRSI6_Danger_SoundWorkSpace                   * 22 ; workspace (8K) and buffers (2*4K)
OSRSI6_Danger_IRQsema                          * 23

; Safe versions of the danger allocations
; Only supported by OS 5.17+, so if backwards compatability is required code
; should (safely!) fall back on the danger versions

OSRSI6_SWIDispatchTable                        * 64 ; JTABLE-SWIRelocation (Relocated base of OS SWI dispatch table)
OSRSI6_Devices                                 * 65 ; Relocated base of IRQ device head nodes
OSRSI6_DevicesEnd                              * 66 ; Relocated end of IRQ device head nodes
OSRSI6_IRQSTK                                  * 67
OSRSI6_SoundWorkSpace                          * 68 ; workspace (8K) and buffers (2*4K)
OSRSI6_IRQsema                                 * 69

; New ROOL allocations

OSRSI6_DomainId                                * 70 ; current Wimp task handle
OSRSI6_OSByteVars                              * 71 ; OS_Byte vars (previously available via OS_Byte &A6/VarStart)
OSRSI6_FgEcfOraEor                             * 72
OSRSI6_BgEcfOraEor                             * 73
OSRSI6_DebuggerSpace                           * 74
OSRSI6_DebuggerSpace_Size                      * 75
OSRSI6_CannotReset                             * 76
OSRSI6_MetroGnome                              * 77 ; OS_ReadMonotonicTime
OSRSI6_CLibCounter                             * 78
OSRSI6_RISCOSLibWord                           * 79
OSRSI6_CLibWord                                * 80
OSRSI6_FPEAnchor                               * 81
OSRSI6_ESC_Status                              * 82
OSRSI6_ECFYOffset                              * 83
OSRSI6_ECFShift                                * 84
OSRSI6_VecPtrTab                               * 85
OSRSI6_NVECTORS                                * 86
OSRSI6_CAMFormat                               * 87 ; 0 = 8 bytes per entry, 1 = 16 bytes per entry

        END
        @


1.1
log
@file OSRSI6 was initially added on branch HAL.
@
text
@d1 92
@


1.1.4.1
log
@file OSRSI6 was added on branch Cortex on 2011-08-03 23:52:00 +0000
@
text
@@


1.1.4.2
log
@Add new OS_ReadSysInfo 6 items. Change naming of PublicWS values.
Detail:
  s/Middle - Added some new OS_ReadSysInfo 6 items which are needed by the zero page relocation kernel. Also duplicated some existing entries to avoid conflicts with ROL's allocations.
  hdr/OSRSI6, Makefile - New header listing OS_ReadSysInfo 6 items
  hdr/PublicWS - Duplicated the workspace definitions for &0-&4000, but with a 'Legacy_' prefix to their names. Also added some new entries as needed by the zero page relocation kernel. Once existing modules have been updated to use OS_ReadSysInfo 6 & the Legacy_ definitions, the old defs will be removed.
  hdr/KernelWS - Removed 'Export_' prefix from all the exported workspace values, since the kernel can now use the original names directly
  hdr/Options - Dummy HiProcVecs option so merging things will be a bit cleaner
Admin:
  Tested on rev A2 BB-xM


Version 5.35, 4.79.2.98.2.44. Tagged as 'Kernel-5_35-4_79_2_98_2_44'
@
text
@a0 86
; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; OS_ReadSysInfo 6 values

OSRSI6_CamEntriesPointer                       * 0
OSRSI6_MaxCamEntry                             * 1
OSRSI6_PageFlags_Unavailable                   * 2
OSRSI6_PhysRamTable                            * 3
OSRSI6_ARMA_Cleaner_flipflop                   * 4 ; Unused in HAL kernels
OSRSI6_TickNodeChain                           * 5
OSRSI6_ROMModuleChain                          * 6
OSRSI6_DAList                                  * 7
OSRSI6_AppSpaceDANode                          * 8
OSRSI6_Module_List                             * 9
OSRSI6_ModuleSHT_Entries                       * 10
OSRSI6_ModuleSWI_HashTab                       * 11
OSRSI6_IOSystemType                            * 12
OSRSI6_L1PT                                    * 13
OSRSI6_L2PT                                    * 14
OSRSI6_UNDSTK                                  * 15
OSRSI6_SVCSTK                                  * 16
OSRSI6_SysHeapStart                            * 17

; These are used by ROL, but conflict with our allocations

OSRSI6_ROL_KernelMessagesBlock                 * 18
OSRSI6_ROL_ErrorSemaphore                      * 19
OSRSI6_ROL_MOSdictionary                       * 20
OSRSI6_ROL_Timer_0_Latch_Value                 * 21
OSRSI6_ROL_FastTickerV_Counts_Per_Second       * 22
OSRSI6_ROL_VecPtrTab                           * 23
OSRSI6_ROL_NVECTORS                            * 24
OSRSI6_ROL_IRQSTK                              * 25
OSRSI6_ROL_SWIDispatchTable                    * 26 ; JTABLE-SWIRelocation?
OSRSI6_ROL_SWIBranchBack                       * 27 ; DirtyBranch?

; Our allocations which conflict with the above

OSRSI6_Danger_SWIDispatchTable                 * 18 ; JTABLE-SWIRelocation (Relocated base of OS SWI dispatch table)
OSRSI6_Danger_Devices                          * 19 ; Relocated base of IRQ device head nodes
OSRSI6_Danger_DevicesEnd                       * 20 ; Relocated end of IRQ device head nodes
OSRSI6_Danger_IRQSTK                           * 21
OSRSI6_Danger_SoundWorkSpace                   * 22 ; workspace (8K) and buffers (2*4K)
OSRSI6_Danger_IRQsema                          * 23

; Safe versions of the danger allocations
; Only supported by OS 5.19+, so if backwards compatability is required code
; should (safely!) fall back on the danger versions

OSRSI6_SWIDispatchTable                        * 64 ; JTABLE-SWIRelocation (Relocated base of OS SWI dispatch table)
OSRSI6_Devices                                 * 65 ; Relocated base of IRQ device head nodes
OSRSI6_DevicesEnd                              * 66 ; Relocated end of IRQ device head nodes
OSRSI6_IRQSTK                                  * 67
OSRSI6_SoundWorkSpace                          * 68 ; workspace (8K) and buffers (2*4K)
OSRSI6_IRQsema                                 * 69

; New ROOL allocations

OSRSI6_DomainId                                * 70 ; current Wimp task handle
OSRSI6_OSByteVars                              * 71 ; OS_Byte vars (previously available via OS_Byte &A6/VarStart)
OSRSI6_FgEcfOraEor                             * 72
OSRSI6_BgEcfOraEor                             * 73
OSRSI6_DebuggerSpace                           * 74
OSRSI6_DebuggerSpace_Size                      * 75
OSRSI6_CannotReset                             * 76
OSRSI6_MetroGnome                              * 77 ; OS_ReadMonotonicTime
OSRSI6_CLibCounter                             * 78
OSRSI6_RISCOSLibWord                           * 79
OSRSI6_CLibWord                                * 80
OSRSI6_FPEAnchor                               * 81

        END
        @


1.1.4.3
log
@Correct new OS_ReadSysInfo 6 item numbers
Detail:
  s/Middle - Correct the actual item numbers to match those defined in the header 9and those used in the HAL branch)
  hdr/OSRSI6 - Corrected ROM version numbere where the new items are available from
Admin:
  Untested!


Version 5.35, 4.79.2.98.2.45. Tagged as 'Kernel-5_35-4_79_2_98_2_45'
@
text
@d60 1
a60 1
; Only supported by OS 5.17+, so if backwards compatability is required code
@


1.1.4.4
log
@Add ESC_Status to list of OS_ReadSysInfo 6 items
Detail:
  hdr/OSRSI6, s/Middle - Added ESC_Status to the list of items that OS_ReadSysInfo 6 exports
Admin:
  Tested on rev A2 BB-xM


Version 5.35, 4.79.2.98.2.47. Tagged as 'Kernel-5_35-4_79_2_98_2_47'
@
text
@a83 1
OSRSI6_ESC_Status                              * 82
@


1.1.2.1
log
@Add new OS_ReadSysInfo 6 items codes. Change naming of PublicWS values.
Detail:
  s/Middle - Added some new OS_ReadSysInfo 6 items which are needed by the zero page relocation kernel. Also duplicated some existing entries to avoid conflicts with ROL's allocations.
  hdr/OSRSI6, Makefile - New header listing OS_ReadSysInfo 6 items
  hdr/PublicWS - Duplicated the workspace definitions for &0-&4000, but with a 'Legacy_' prefix to their names. Also added some new entries as needed by the zero page relocation kernel. Once existing modules have been updated to use OS_ReadSysInfo & the Legacy_ definitions, the old defs will be removed.
  hdr/KernelWS - Removed 'Export_' prefix from all the exported workspace values, since the kernel can now use the original names directly
  hdr/Options - Dummy HiProcVecs option so merging things will be a bit cleaner
Admin:
  Tested in ROM softload on Iyonix


Version 5.35, 4.79.2.118. Tagged as 'Kernel-5_35-4_79_2_118'
@
text
@a0 86
; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; OS_ReadSysInfo 6 values

OSRSI6_CamEntriesPointer                       * 0
OSRSI6_MaxCamEntry                             * 1
OSRSI6_PageFlags_Unavailable                   * 2
OSRSI6_PhysRamTable                            * 3
OSRSI6_ARMA_Cleaner_flipflop                   * 4 ; Unused in HAL kernels
OSRSI6_TickNodeChain                           * 5
OSRSI6_ROMModuleChain                          * 6
OSRSI6_DAList                                  * 7
OSRSI6_AppSpaceDANode                          * 8
OSRSI6_Module_List                             * 9
OSRSI6_ModuleSHT_Entries                       * 10
OSRSI6_ModuleSWI_HashTab                       * 11
OSRSI6_IOSystemType                            * 12
OSRSI6_L1PT                                    * 13
OSRSI6_L2PT                                    * 14
OSRSI6_UNDSTK                                  * 15
OSRSI6_SVCSTK                                  * 16
OSRSI6_SysHeapStart                            * 17

; These are used by ROL, but conflict with our allocations

OSRSI6_ROL_KernelMessagesBlock                 * 18
OSRSI6_ROL_ErrorSemaphore                      * 19
OSRSI6_ROL_MOSdictionary                       * 20
OSRSI6_ROL_Timer_0_Latch_Value                 * 21
OSRSI6_ROL_FastTickerV_Counts_Per_Second       * 22
OSRSI6_ROL_VecPtrTab                           * 23
OSRSI6_ROL_NVECTORS                            * 24
OSRSI6_ROL_IRQSTK                              * 25
OSRSI6_ROL_SWIDispatchTable                    * 26 ; JTABLE-SWIRelocation?
OSRSI6_ROL_SWIBranchBack                       * 27 ; DirtyBranch?

; Our allocations which conflict with the above

OSRSI6_Danger_SWIDispatchTable                 * 18 ; JTABLE-SWIRelocation (Relocated base of OS SWI dispatch table)
OSRSI6_Danger_Devices                          * 19 ; Relocated base of IRQ device head nodes
OSRSI6_Danger_DevicesEnd                       * 20 ; Relocated end of IRQ device head nodes
OSRSI6_Danger_IRQSTK                           * 21
OSRSI6_Danger_SoundWorkSpace                   * 22 ; workspace (8K) and buffers (2*4K)
OSRSI6_Danger_IRQsema                          * 23

; Safe versions of the danger allocations
; Only supported by OS 5.19+, so if backwards compatability is required code
; should (safely!) fall back on the danger versions

OSRSI6_SWIDispatchTable                        * 64 ; JTABLE-SWIRelocation (Relocated base of OS SWI dispatch table)
OSRSI6_Devices                                 * 65 ; Relocated base of IRQ device head nodes
OSRSI6_DevicesEnd                              * 66 ; Relocated end of IRQ device head nodes
OSRSI6_IRQSTK                                  * 67
OSRSI6_SoundWorkSpace                          * 68 ; workspace (8K) and buffers (2*4K)
OSRSI6_IRQsema                                 * 69

; New ROOL allocations

OSRSI6_DomainId                                * 70 ; current Wimp task handle
OSRSI6_OSByteVars                              * 71 ; OS_Byte vars (previously available via OS_Byte &A6/VarStart)
OSRSI6_FgEcfOraEor                             * 72
OSRSI6_BgEcfOraEor                             * 73
OSRSI6_DebuggerSpace                           * 74
OSRSI6_DebuggerSpace_Size                      * 75
OSRSI6_CannotReset                             * 76
OSRSI6_MetroGnome                              * 77 ; OS_ReadMonotonicTime
OSRSI6_CLibCounter                             * 78
OSRSI6_RISCOSLibWord                           * 79
OSRSI6_CLibWord                                * 80
OSRSI6_FPEAnchor                               * 81

        END
        @


1.1.2.2
log
@Correct version number in header comment
Detail:
  hdr/OSRSI6 - Corrected RO version number from 5.19 to 5.17
Admin:
  Untested, but testing shouldn't be needed anyway


Version 5.35, 4.79.2.119. Tagged as 'Kernel-5_35-4_79_2_119'
@
text
@d60 1
a60 1
; Only supported by OS 5.17+, so if backwards compatability is required code
@


1.1.2.3
log
@Add ESC_Status to list of OS_ReadSysInfo 6 items
Detail:
  hdr/OSRSI6, s/Middle - Added ESC_Status to the list of items that OS_ReadSysInfo 6 exports
Admin:
  Tested in ROM softload on Iyonix


Version 5.35, 4.79.2.121. Tagged as 'Kernel-5_35-4_79_2_121'
@
text
@a83 1
OSRSI6_ESC_Status                              * 82
@


1.1.2.4
log
@Add support for the new RISC OS 5 style sprite mode word. Add partial support for alpha channel sprite masks. Implement OS_ScreenMode reasons 13-15
Detail:
  ECFShift/ECFYOffset:
  - hdr/PublicWS - Add ECFShift and ECFYOffset to list of public exports (SpriteExtend was using hardcoded values). Rearrange exports so that VduWorkspace exports are now labelled as such.
  - hdr/KernelWS - Make sure ECFShift & ECFYOffset match their exported locations
  - hdr/OSRSI6, s/Middle - Add OS_ReadSysInfo 6 items 83 & 84, for reading ECFYOffset and ECFShift locations
  Mode flags/VDU variables:
  - Makefile - Add hdr/VduExt to the C header exports
  - hdr/VduExt - Get rid of NotRVVTBarWobblyBits macro and defined VDU variables manually so that Hdr2H will handle them. Begin replacing overly generic 'Flag_*' mode flag definitions with 'ModeFlag_*' instead. Define new flags as required by the new screen/sprite modes. Add OS_ScreenMode reason codes and mode selector format (from s.vdu.vdudecl)
  - NewModes/NEWF2, NewModes/OldPSSrc, NewModes/PSSrc, s.vdu.vdu23, s.vdu.vducursoft, s.vdu.vdudriver, s.vdu.vdugrafg, s.vdu.vdugrafj, s.vdu.vdugrafl, s.vdu.vdumodes, s.vdu.vdupal10, s.vdu.vdupal20, s.vdu.vdupalette, s.vdu.vdupalxx, s.vdu.vduwrch - Renaming Flag_* to ModeFlag_*
  - s.vdu.vdudecl - Remove OS_ScreenMode reason codes & mode selector format definitions; these are now in hdr/VduExt. Flag_* -> ModeFlag_* renaming.
  - s.vdu.vdupalxx - Apply a greyscale palette in PV_SetDefaultPalette if the greyscale mode flag is set
  New sprite types:
  - s.vdu.vdudriver - Extend GenerateModeSelectorVars to deal with the wide mask flag, 64K sprites, and the new RISC OS 5 sprite mode word format.
  - s.vdu.vdugrafdec - Store more information about the sprite in the SprReadNColour ... SprLog2BPC block.
  - s.vdu.vdugrafg - Update SpriteVecHandler to be able to detect whether RISC OS 5 format sprites are allowed palettes. Update SetupSprModeData to store the extra sprite info that's defined in vdugrafdec. Update PutSprite to fault any sprites with wide masks - SpriteExtend must be used for that (once implemented!)
  - s.vdu.vdugrafh - Update WritePixelColour to avoid temporary poking of NColour VDU variable for 8bpp sprites. Correctly replicate data when writing to RISC OS 5 format sprites. Update ReadPixelMask, WritePixelMask, SpriteMaskAddr, GetMaskspWidth to deal with wide masks. Delete obsolete bounce_new_format_masks routine.
  - s.vdu.vdugrafi - Comment updated to reflect new reality
  - s.vdu.vdugrafj - Get rid of unused code block in CreateHeader/PostCreateHeader. Update SanitizeSGetMode to generate RISC OS 5 style sprite mode words where applicable. Update DecideMaskSize to rely on GetMaskspWidth for calculating mask width.
  - s.vdu.vdugrafl - Update SwitchOutputToSprite/SwitchOutputToMask to deal with the new sprite formats. Allow PushModeInfoAnyMonitor to fail.
  - s.vdu.vduswis - Extended OS_ReadModeVariable to cope with new sprite types
  Misc:
  - s.vdu.vdudriver - Fixed bug with VIDCList copying where any -1 value in the structure would terminate the copy, instead of only -1 as a control item number
  - s.vdu.vduswis - Implemented OS_ScreenMode 13 (Mode string to specifier), 14 (mode specifier to string), and 15 (set mode by string). Mostly as per ROL's specs, but minus support for teletext attributes, and plus support for new RISC OS 5 attributes (L... layout specifier, 4096 & 24bpp packed modes, etc.)
  - s.vdu.vduwrch - Pick correct default text colours for the new modes
Admin:
  Tested on BB-xM
  Part of an implementation of the Extended Framebuffer Format spec:
  http://www.riscosopen.org/wiki/documentation/show/Extended%20Framebuffer%20Format%20Specification


Version 5.35, 4.79.2.194. Tagged as 'Kernel-5_35-4_79_2_194'
@
text
@a84 2
OSRSI6_ECFYOffset                              * 83
OSRSI6_ECFShift                                * 84
@


1.1.2.5
log
@Expose more areas via OS_ReadSysInfo 6 & OS_Memory 16. Expose processor vectors base + size via OS_PlatformFeatures.
Detail:
  hdr/KernelWS - Define processor vectors address. Currently same as ZeroPage, but in the future will differ for some machines.
  hdr/OSRSI6, s/Middle - Expose VecPtrTab & NVECTORS via OS_ReadSysInfo items 85 & 86
  s/Kernel - Add OS_PlatformFeatures 32, for returning the base + size of the processor vectors
  s/MemInfo - Add areas 12 thru 15 to OS_Memory 16, for reporting ZeroPage, ProcVecs, DebuggerSpace and ScratchSpace. The task manager can now use these for calculating memory usage instead of assuming 32K workspace from &0-&8000.
Admin:
  Tested on Raspberry Pi


Version 5.35, 4.79.2.271. Tagged as 'Kernel-5_35-4_79_2_271'
@
text
@a86 2
OSRSI6_VecPtrTab                               * 85
OSRSI6_NVECTORS                                * 86
@


1.1.2.6
log
@Add initial support for "physical memory pools"
Detail:
  This set of changes adds support for "physical memory pools" (aka PMPs), a new type of dynamic area which allow physical pages to be claimed/allocated without mapping them in to the logical address space. PMPs have full control over which physical pages they use (similar to DAs which request specific physical pages), and also have full control over the logical mapping of their pages (which pages go where, and per-page access/cacheability control).
  Currently the OS makes use of two PMPs: one for the free pool (which now has a logical size of zero - freeing up gigabytes of logical space), and one for the RAM disc (logical size of 1MB, allowing for a physical size limited only by the amount of free memory)
  Implementing these changes has required a number of other changes to be made:
  * The CAM has been expanded from 8 bytes per entry to 16 bytes per entry, in order to allow each RAM page to store information about its PMP association
  * The system heap has been expanded to 32MB in size (from just under 4MB), in order to allow it to be used to store PMP page lists (1 word needed per page, but PMP pages may not always have physical pages assigned to them - so to allow multiple large PMPs to exist we need more than just 1 word per RAM page)
  * The &FA000000-&FBFFFFFF area of fixed kernel workspace has been shuffled around to accomodate the larger CAM, and the system heap is now located just above the RMA.
  * SoftResets code stripped out (unlikely we'll ever want to fix and re-enable it)
  * A couple of FastCDA options are now permanently on
  * Internal page flags shuffled around a bit. PageFlags_Unavailable now publicly exposed so that PMP clients can lock/unlock pages at will.
  * When OS_ChangeDynamicArea is asked to grow or shrink the free pool, it now implicitly converts it into a shrink or grow of application space (which is what would happen anyway). This simplifies the implementation; during a grow, pages (or replacement pages) are always sourced from the free pool, and during a shrink pages are always sent to the free pool.
  File changes:
  - hdr/KernelWS - Extend DANode structure. Describe CAM format. Adjust kernel workspace.
  - hdr/OSRSI6, s/Middle - Add new item to expose the CAM format
  - hdr/Options - Remove SoftResets switch. Add some PMP switches.
  - s/ARM600, s/VMSAv6 - Updated for new CAM format. Note that although the CAM stores PMP information, BangCamUpdate currently doesn't deal with updating that data - it's the caller's responsibility to do so where appropriate.
  - s/ChangeDyn - Lots of changes to implement PMP support, and to cope with the new CAM format.
  - s/HAL - Updated to cope with new CAM format, and lack of logical mapping of free pool.
  - s/MemInfo - Updated to cope with new CAM format. OS_Memory 0 updated to cope with converting PPN to PA for pages which are mapped out. OS_Memory 24 updated to decode the access permissions on a per-page basis for PMPs, and fixed its HWM usage for sparse DAs.
  - s/NewReset - Soft reset code and unused AddCamEntries function removed. Updated to cope with new CAM format, PMP free pool, PMP RAMFS
  - s/AMBControl/allocate - Update comment (RMA hasn't been used for AMBControl nodes for a long time)
  - s/AMBControl/growp, s/AMBControl/memmap, s/AMBControl/shrinkp - Update for new CAM format + PMP free pool
  - s/vdu/vdudriver - Strip out soft reset code.
Admin:
  Tested on Pandaboard
  This is just a first iteration of the PMP feature, with any luck future changes will improve functionality. This means APIs are subject to change as well.


Version 5.35, 4.79.2.284. Tagged as 'Kernel-5_35-4_79_2_284'
@
text
@a88 1
OSRSI6_CAMFormat                               * 87 ; 0 = 8 bytes per entry, 1 = 16 bytes per entry
@


