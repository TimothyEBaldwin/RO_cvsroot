head	4.8;
access;
symbols
	Kernel-6_15:4.8
	Kernel-6_14:4.8
	Kernel-6_01-3:4.8
	Kernel-6_13:4.8
	Kernel-6_12:4.8
	Kernel-6_11:4.8
	Kernel-6_10:4.8
	Kernel-6_09:4.8
	Kernel-6_08-4_129_2_10:4.8
	Kernel-6_08-4_129_2_9:4.8
	Kernel-6_08:4.8
	Kernel-6_07:4.8
	Kernel-6_06:4.8
	Kernel-6_05-4_129_2_8:4.8
	Kernel-6_05:4.8
	Kernel-6_04:4.8
	Kernel-6_03:4.8
	Kernel-6_01-2:4.8
	Kernel-6_01-4_146_2_1:4.8
	Kernel-6_02:4.8
	Kernel-6_01-1:4.8
	Kernel-6_01:4.8
	Kernel-6_00:4.8
	Kernel-5_99:4.8
	Kernel-5_98:4.8
	Kernel-5_97-4_129_2_7:4.8
	Kernel-5_97:4.8
	Kernel-5_96:4.8
	Kernel-5_95:4.8
	Kernel-5_94:4.8
	Kernel-5_93:4.8
	Kernel-5_92:4.8
	Kernel-5_91:4.8
	Kernel-5_90:4.8
	Kernel-5_89-4_129_2_6:4.8
	Kernel-5_89:4.8
	Kernel-5_88-4_129_2_5:4.8
	Kernel-5_88-4_129_2_4:4.8
	Kernel-5_88:4.8
	Kernel-5_87:4.8
	Kernel-5_86-4_129_2_3:4.8
	Kernel-5_86-4_129_2_2:4.8
	Kernel-5_86-4_129_2_1:4.8
	Kernel-5_86:4.8
	SMP:4.8.0.2
	SMP_bp:4.8
	Kernel-5_85:4.8
	Kernel-5_54-1:4.8
	Kernel-5_84:4.8
	Kernel-5_83:4.8
	Kernel-5_82:4.8
	Kernel-5_81:4.8
	Kernel-5_80:4.8
	Kernel-5_79:4.8
	Kernel-5_78:4.8
	Kernel-5_77:4.8
	Kernel-5_76:4.8
	Kernel-5_75:4.8
	Kernel-5_74:4.8
	Kernel-5_73:4.8
	Kernel-5_72:4.8
	Kernel-5_71:4.8
	Kernel-5_70:4.8
	Kernel-5_69:4.8
	Kernel-5_68:4.8
	Kernel-5_67:4.8
	Kernel-5_66:4.8
	Kernel-5_65:4.8
	Kernel-5_64:4.8
	Kernel-5_63:4.8
	Kernel-5_62:4.8
	Kernel-5_61:4.8
	Kernel-5_60:4.8
	Kernel-5_59:4.8
	Kernel-5_58:4.8
	Kernel-5_57:4.8
	Kernel-5_56:4.8
	Kernel-5_55:4.8
	Kernel-5_54:4.8
	Kernel-5_53:4.7
	Kernel-5_52:4.7
	Kernel-5_51:4.7
	Kernel-5_50:4.6
	Kernel-5_49:4.6
	HAL_merge:4.5.2.5
	Kernel-5_48:4.6
	Kernel-5_35-4_79_2_327:4.5.2.5
	Kernel-5_35-4_79_2_326:4.5.2.5
	Kernel-5_35-4_79_2_325:4.5.2.5
	Kernel-5_35-4_79_2_324:4.5.2.5
	Kernel-5_35-4_79_2_323:4.5.2.5
	Kernel-5_35-4_79_2_322:4.5.2.5
	Kernel-5_35-4_79_2_321:4.5.2.5
	Kernel-5_35-4_79_2_320:4.5.2.5
	Kernel-5_35-4_79_2_319:4.5.2.5
	Kernel-5_35-4_79_2_318:4.5.2.5
	Kernel-5_35-4_79_2_317:4.5.2.5
	Kernel-5_35-4_79_2_316:4.5.2.5
	Kernel-5_35-4_79_2_315:4.5.2.5
	Kernel-5_35-4_79_2_314:4.5.2.5
	Kernel-5_35-4_79_2_313:4.5.2.5
	Kernel-5_35-4_79_2_312:4.5.2.5
	Kernel-5_35-4_79_2_311:4.5.2.5
	Kernel-5_35-4_79_2_310:4.5.2.5
	Kernel-5_35-4_79_2_309:4.5.2.5
	Kernel-5_35-4_79_2_308:4.5.2.5
	Kernel-5_35-4_79_2_307:4.5.2.5
	Kernel-5_35-4_79_2_306:4.5.2.5
	Kernel-5_35-4_79_2_305:4.5.2.5
	Kernel-5_35-4_79_2_304:4.5.2.5
	Kernel-5_35-4_79_2_303:4.5.2.5
	Kernel-5_35-4_79_2_302:4.5.2.5
	Kernel-5_35-4_79_2_301:4.5.2.5
	Kernel-5_35-4_79_2_300:4.5.2.5
	Kernel-5_35-4_79_2_299:4.5.2.5
	Kernel-5_35-4_79_2_298:4.5.2.5
	Kernel-5_35-4_79_2_297:4.5.2.5
	Kernel-5_35-4_79_2_296:4.5.2.5
	Kernel-5_35-4_79_2_295:4.5.2.5
	Kernel-5_35-4_79_2_294:4.5.2.5
	Kernel-5_35-4_79_2_293:4.5.2.5
	Kernel-5_35-4_79_2_292:4.5.2.5
	Kernel-5_35-4_79_2_291:4.5.2.5
	Kernel-5_35-4_79_2_290:4.5.2.5
	Kernel-5_35-4_79_2_289:4.5.2.5
	Kernel-5_35-4_79_2_288:4.5.2.5
	Kernel-5_35-4_79_2_287:4.5.2.5
	Kernel-5_35-4_79_2_286:4.5.2.5
	Kernel-5_35-4_79_2_285:4.5.2.5
	Kernel-5_35-4_79_2_284:4.5.2.5
	Kernel-5_35-4_79_2_283:4.5.2.5
	Kernel-5_35-4_79_2_282:4.5.2.5
	Kernel-5_35-4_79_2_281:4.5.2.5
	Kernel-5_35-4_79_2_280:4.5.2.5
	Kernel-5_35-4_79_2_279:4.5.2.5
	Kernel-5_35-4_79_2_278:4.5.2.5
	Kernel-5_35-4_79_2_277:4.5.2.5
	Kernel-5_35-4_79_2_276:4.5.2.5
	Kernel-5_35-4_79_2_275:4.5.2.5
	Kernel-5_35-4_79_2_274:4.5.2.5
	Kernel-5_35-4_79_2_273:4.5.2.5
	Kernel-5_35-4_79_2_272:4.5.2.5
	Kernel-5_35-4_79_2_271:4.5.2.5
	Kernel-5_35-4_79_2_270:4.5.2.5
	Kernel-5_35-4_79_2_269:4.5.2.5
	Kernel-5_35-4_79_2_268:4.5.2.5
	Kernel-5_35-4_79_2_267:4.5.2.5
	Kernel-5_35-4_79_2_266:4.5.2.5
	Kernel-5_35-4_79_2_265:4.5.2.5
	Kernel-5_35-4_79_2_264:4.5.2.5
	Kernel-5_35-4_79_2_263:4.5.2.5
	Kernel-5_35-4_79_2_262:4.5.2.5
	Kernel-5_35-4_79_2_261:4.5.2.5
	Kernel-5_35-4_79_2_260:4.5.2.5
	Kernel-5_35-4_79_2_259:4.5.2.5
	Kernel-5_35-4_79_2_258:4.5.2.5
	Kernel-5_35-4_79_2_257:4.5.2.5
	Kernel-5_35-4_79_2_256:4.5.2.5
	Kernel-5_35-4_79_2_255:4.5.2.5
	Kernel-5_35-4_79_2_254:4.5.2.5
	Kernel-5_35-4_79_2_253:4.5.2.5
	Kernel-5_35-4_79_2_252:4.5.2.5
	Kernel-5_35-4_79_2_251:4.5.2.5
	Kernel-5_35-4_79_2_250:4.5.2.5
	Kernel-5_35-4_79_2_249:4.5.2.5
	Kernel-5_35-4_79_2_248:4.5.2.5
	Kernel-5_35-4_79_2_247:4.5.2.5
	Kernel-5_35-4_79_2_246:4.5.2.5
	Kernel-5_35-4_79_2_245:4.5.2.5
	Kernel-5_35-4_79_2_244:4.5.2.5
	Kernel-5_35-4_79_2_243:4.5.2.5
	Kernel-5_35-4_79_2_242:4.5.2.5
	Kernel-5_35-4_79_2_241:4.5.2.5
	Kernel-5_35-4_79_2_240:4.5.2.5
	Kernel-5_35-4_79_2_239:4.5.2.5
	Kernel-5_35-4_79_2_238:4.5.2.5
	Kernel-5_35-4_79_2_237:4.5.2.5
	Kernel-5_35-4_79_2_236:4.5.2.5
	Kernel-5_35-4_79_2_235:4.5.2.5
	Kernel-5_35-4_79_2_234:4.5.2.5
	Kernel-5_35-4_79_2_233:4.5.2.5
	Kernel-5_35-4_79_2_232:4.5.2.5
	Kernel-5_35-4_79_2_231:4.5.2.5
	Kernel-5_35-4_79_2_230:4.5.2.5
	Kernel-5_35-4_79_2_229:4.5.2.5
	Kernel-5_35-4_79_2_228:4.5.2.5
	Kernel-5_35-4_79_2_227:4.5.2.5
	Kernel-5_35-4_79_2_226:4.5.2.5
	Kernel-5_35-4_79_2_225:4.5.2.5
	Kernel-5_35-4_79_2_224:4.5.2.5
	Kernel-5_35-4_79_2_223:4.5.2.5
	Kernel-5_35-4_79_2_222:4.5.2.5
	Kernel-5_35-4_79_2_221:4.5.2.5
	Kernel-5_35-4_79_2_220:4.5.2.5
	Kernel-5_35-4_79_2_219:4.5.2.5
	Kernel-5_35-4_79_2_218:4.5.2.5
	Kernel-5_35-4_79_2_217:4.5.2.5
	Kernel-5_35-4_79_2_216:4.5.2.5
	Kernel-5_35-4_79_2_215:4.5.2.5
	Kernel-5_35-4_79_2_214:4.5.2.5
	Kernel-5_35-4_79_2_213:4.5.2.5
	Kernel-5_35-4_79_2_212:4.5.2.5
	Kernel-5_35-4_79_2_211:4.5.2.5
	Kernel-5_35-4_79_2_210:4.5.2.5
	Kernel-5_35-4_79_2_209:4.5.2.5
	Kernel-5_35-4_79_2_208:4.5.2.5
	Kernel-5_35-4_79_2_207:4.5.2.5
	Kernel-5_35-4_79_2_206:4.5.2.5
	Kernel-5_35-4_79_2_205:4.5.2.5
	Kernel-5_35-4_79_2_204:4.5.2.5
	Kernel-5_35-4_79_2_203:4.5.2.5
	Kernel-5_35-4_79_2_202:4.5.2.5
	Kernel-5_35-4_79_2_201:4.5.2.5
	Kernel-5_35-4_79_2_200:4.5.2.5
	Kernel-5_35-4_79_2_199:4.5.2.5
	Kernel-5_35-4_79_2_198:4.5.2.5
	Kernel-5_35-4_79_2_197:4.5.2.5
	Kernel-5_35-4_79_2_196:4.5.2.5
	Kernel-5_35-4_79_2_195:4.5.2.5
	Kernel-5_35-4_79_2_194:4.5.2.5
	Kernel-5_35-4_79_2_193:4.5.2.5
	Kernel-5_35-4_79_2_192:4.5.2.5
	Kernel-5_35-4_79_2_191:4.5.2.5
	Kernel-5_35-4_79_2_190:4.5.2.5
	Kernel-5_35-4_79_2_189:4.5.2.5
	Kernel-5_35-4_79_2_188:4.5.2.5
	Kernel-5_35-4_79_2_187:4.5.2.5
	Kernel-5_35-4_79_2_186:4.5.2.5
	Kernel-5_35-4_79_2_185:4.5.2.5
	Kernel-5_35-4_79_2_184:4.5.2.5
	Kernel-5_35-4_79_2_183:4.5.2.5
	Kernel-5_35-4_79_2_182:4.5.2.5
	Kernel-5_35-4_79_2_181:4.5.2.5
	Kernel-5_35-4_79_2_180:4.5.2.5
	Kernel-5_35-4_79_2_179:4.5.2.5
	Kernel-5_35-4_79_2_178:4.5.2.5
	Kernel-5_35-4_79_2_177:4.5.2.5
	Kernel-5_35-4_79_2_176:4.5.2.5
	Kernel-5_35-4_79_2_175:4.5.2.5
	Kernel-5_35-4_79_2_174:4.5.2.5
	Kernel-5_35-4_79_2_173:4.5.2.4
	Kernel-5_35-4_79_2_172:4.5.2.4
	Kernel-5_35-4_79_2_171:4.5.2.4
	Kernel-5_35-4_79_2_170:4.5.2.4
	Kernel-5_35-4_79_2_169:4.5.2.4
	Kernel-5_35-4_79_2_168:4.5.2.4
	Kernel-5_35-4_79_2_167:4.5.2.4
	Kernel-5_35-4_79_2_166:4.5.2.4
	Kernel-5_35-4_79_2_165:4.5.2.4
	RPi_merge:4.5.2.3.2.1
	Kernel-5_35-4_79_2_147_2_23:4.5.2.3.2.1
	Kernel-5_35-4_79_2_147_2_22:4.5.2.3
	Kernel-5_35-4_79_2_147_2_21:4.5.2.3
	Kernel-5_35-4_79_2_147_2_20:4.5.2.3
	Kernel-5_35-4_79_2_147_2_19:4.5.2.3
	Kernel-5_35-4_79_2_147_2_18:4.5.2.3
	Kernel-5_35-4_79_2_164:4.5.2.4
	Kernel-5_35-4_79_2_163:4.5.2.4
	Kernel-5_35-4_79_2_147_2_17:4.5.2.3
	Kernel-5_35-4_79_2_147_2_16:4.5.2.3
	Kernel-5_35-4_79_2_147_2_15:4.5.2.3
	Kernel-5_35-4_79_2_162:4.5.2.4
	Kernel-5_35-4_79_2_161:4.5.2.4
	Kernel-5_35-4_79_2_147_2_14:4.5.2.3
	Kernel-5_35-4_79_2_147_2_13:4.5.2.3
	Kernel-5_35-4_79_2_160:4.5.2.4
	Kernel-5_35-4_79_2_159:4.5.2.4
	Kernel-5_35-4_79_2_158:4.5.2.4
	Kernel-5_35-4_79_2_157:4.5.2.4
	Kernel-5_35-4_79_2_156:4.5.2.4
	Kernel-5_35-4_79_2_147_2_12:4.5.2.3
	Kernel-5_35-4_79_2_147_2_11:4.5.2.3
	Kernel-5_35-4_79_2_155:4.5.2.4
	Kernel-5_35-4_79_2_147_2_10:4.5.2.3
	Kernel-5_35-4_79_2_154:4.5.2.4
	Kernel-5_35-4_79_2_153:4.5.2.4
	Kernel-5_35-4_79_2_147_2_9:4.5.2.3
	Kernel-5_35-4_79_2_152:4.5.2.4
	Kernel-5_35-4_79_2_151:4.5.2.4
	Kernel-5_35-4_79_2_147_2_8:4.5.2.3
	Kernel-5_35-4_79_2_147_2_7:4.5.2.3
	Kernel-5_35-4_79_2_150:4.5.2.3
	Kernel-5_35-4_79_2_147_2_6:4.5.2.3
	Kernel-5_35-4_79_2_147_2_5:4.5.2.3
	Kernel-5_35-4_79_2_149:4.5.2.3
	Kernel-5_35-4_79_2_147_2_4:4.5.2.3
	Kernel-5_35-4_79_2_147_2_3:4.5.2.3
	Kernel-5_35-4_79_2_148:4.5.2.3
	Kernel-5_35-4_79_2_147_2_2:4.5.2.3
	Kernel-5_35-4_79_2_147_2_1:4.5.2.3
	RPi:4.5.2.3.0.2
	RPi_bp:4.5.2.3
	Kernel-5_35-4_79_2_98_2_52_2_1:4.5.2.2.2.1
	alees_Kernel_dev:4.5.2.2.2.1.0.2
	alees_Kernel_dev_bp:4.5.2.2.2.1
	Kernel-5_35-4_79_2_147:4.5.2.3
	Kernel-5_35-4_79_2_146:4.5.2.3
	Kernel-5_35-4_79_2_145:4.5.2.3
	Kernel-5_35-4_79_2_144:4.5.2.3
	Kernel-5_35-4_79_2_143:4.5.2.3
	Kernel-5_35-4_79_2_142:4.5.2.3
	Kernel-5_35-4_79_2_141:4.5.2.3
	Kernel-5_35-4_79_2_140:4.5.2.3
	Kernel-5_35-4_79_2_139:4.5.2.3
	Kernel-5_35-4_79_2_138:4.5.2.3
	Kernel-5_35-4_79_2_137:4.5.2.3
	Kernel-5_35-4_79_2_136:4.5.2.3
	Kernel-5_35-4_79_2_135:4.5.2.3
	Kernel-5_35-4_79_2_134:4.5.2.3
	Kernel-5_35-4_79_2_133:4.5.2.3
	Kernel-5_35-4_79_2_132:4.5.2.3
	Kernel-5_35-4_79_2_131:4.5.2.3
	Kernel-5_35-4_79_2_130:4.5.2.3
	Kernel-5_35-4_79_2_129:4.5.2.3
	Kernel-5_35-4_79_2_128:4.5.2.3
	Kernel-5_35-4_79_2_127:4.5.2.3
	Kernel-5_35-4_79_2_126:4.5.2.3
	Kernel-5_35-4_79_2_125:4.5.2.3
	Kernel-5_35-4_79_2_124:4.5.2.3
	Kernel-5_35-4_79_2_123:4.5.2.3
	Cortex_merge:4.5.2.2.2.1
	Kernel-5_35-4_79_2_122:4.5.2.3
	Kernel-5_35-4_79_2_98_2_54:4.5.2.2.2.1
	Kernel-5_35-4_79_2_98_2_53:4.5.2.2.2.1
	Kernel-5_35-4_79_2_98_2_52:4.5.2.2.2.1
	Kernel-5_35-4_79_2_98_2_51:4.5.2.2.2.1
	Kernel-5_35-4_79_2_98_2_50:4.5.2.2.2.1
	Kernel-5_35-4_79_2_98_2_49:4.5.2.2.2.1
	Kernel-5_35-4_79_2_98_2_48:4.5.2.2.2.1
	Kernel-5_35-4_79_2_121:4.5.2.3
	Kernel-5_35-4_79_2_98_2_47:4.5.2.2.2.1
	Kernel-5_35-4_79_2_120:4.5.2.3
	Kernel-5_35-4_79_2_98_2_46:4.5.2.2.2.1
	Kernel-5_35-4_79_2_119:4.5.2.2
	Kernel-5_35-4_79_2_98_2_45:4.5.2.2
	Kernel-5_35-4_79_2_98_2_44:4.5.2.2
	Kernel-5_35-4_79_2_118:4.5.2.2
	Kernel-5_35-4_79_2_98_2_43:4.5.2.2
	Kernel-5_35-4_79_2_117:4.5.2.2
	Kernel-5_35-4_79_2_116:4.5.2.2
	Kernel-5_35-4_79_2_98_2_42:4.5.2.2
	Kernel-5_35-4_79_2_115:4.5.2.2
	Kernel-5_35-4_79_2_98_2_41:4.5.2.2
	Kernel-5_35-4_79_2_98_2_40:4.5.2.2
	Kernel-5_35-4_79_2_114:4.5.2.2
	Kernel-5_35-4_79_2_98_2_39:4.5.2.2
	Kernel-5_35-4_79_2_98_2_38:4.5.2.2
	Kernel-5_35-4_79_2_113:4.5.2.2
	Kernel-5_35-4_79_2_112:4.5.2.2
	Kernel-5_35-4_79_2_98_2_37:4.5.2.2
	Kernel-5_35-4_79_2_98_2_36:4.5.2.2
	Kernel-5_35-4_79_2_98_2_35:4.5.2.2
	Kernel-5_35-4_79_2_98_2_34:4.5.2.2
	Kernel-5_35-4_79_2_98_2_33:4.5.2.2
	Kernel-5_35-4_79_2_98_2_32:4.5.2.2
	Kernel-5_35-4_79_2_98_2_31:4.5.2.2
	Kernel-5_35-4_79_2_98_2_30:4.5.2.2
	Kernel-5_35-4_79_2_98_2_29:4.5.2.2
	Kernel-5_35-4_79_2_98_2_28:4.5.2.2
	Kernel-5_35-4_79_2_98_2_27:4.5.2.2
	Kernel-5_35-4_79_2_98_2_26:4.5.2.2
	Kernel-5_35-4_79_2_111:4.5.2.2
	Kernel-5_35-4_79_2_98_2_25:4.5.2.2
	Kernel-5_35-4_79_2_98_2_24:4.5.2.2
	Kernel-5_35-4_79_2_98_2_23:4.5.2.2
	Kernel-5_35-4_79_2_110:4.5.2.2
	Kernel-5_35-4_79_2_98_2_22:4.5.2.2
	Kernel-5_35-4_79_2_109:4.5.2.2
	Kernel-5_35-4_79_2_98_2_21:4.5.2.2
	Kernel-5_35-4_79_2_98_2_20:4.5.2.2
	Kernel-5_35-4_79_2_108:4.5.2.2
	Kernel-5_35-4_79_2_107:4.5.2.2
	Kernel-5_35-4_79_2_98_2_19:4.5.2.2
	Kernel-5_35-4_79_2_98_2_18:4.5.2.2
	Kernel-5_35-4_79_2_98_2_17:4.5.2.2
	Kernel-5_35-4_79_2_98_2_16:4.5.2.2
	Kernel-5_35-4_79_2_98_2_15:4.5.2.2
	Kernel-5_35-4_79_2_106:4.5.2.2
	Kernel-5_35-4_79_2_105:4.5.2.2
	Kernel-5_35-4_79_2_104:4.5.2.2
	Kernel-5_35-4_79_2_98_2_14:4.5.2.2
	Kernel-5_35-4_79_2_98_2_13:4.5.2.2
	Kernel-5_35-4_79_2_98_2_12:4.5.2.2
	Kernel-5_35-4_79_2_98_2_11:4.5.2.2
	Kernel-5_35-4_79_2_98_2_10:4.5.2.2
	Kernel-5_35-4_79_2_98_2_9:4.5.2.2
	Kernel-5_35-4_79_2_103:4.5.2.2
	Kernel-5_35-4_79_2_102:4.5.2.2
	Kernel-5_35-4_79_2_98_2_8:4.5.2.2
	Kernel-5_35-4_79_2_98_2_7:4.5.2.2
	Kernel-5_35-4_79_2_98_2_6:4.5.2.2
	Kernel-5_35-4_79_2_98_2_5:4.5.2.2
	Kernel-5_35-4_79_2_98_2_4:4.5.2.2
	Kernel-5_35-4_79_2_101:4.5.2.2
	Kernel-5_35-4_79_2_100:4.5.2.2
	Kernel-5_35-4_79_2_99:4.5.2.2
	Kernel-5_35-4_79_2_98_2_3:4.5.2.2
	Kernel-5_35-4_79_2_98_2_2:4.5.2.2
	Kernel-5_35-4_79_2_98_2_1:4.5.2.2
	Cortex:4.5.2.2.0.2
	Cortex_bp:4.5.2.2
	Kernel-5_35-4_79_2_98:4.5.2.2
	Kernel-5_35-4_79_2_97:4.5.2.2
	Kernel-5_35-4_79_2_96:4.5.2.2
	Kernel-5_35-4_79_2_95:4.5.2.2
	Kernel-5_35-4_79_2_94:4.5.2.2
	Kernel-5_35-4_79_2_93:4.5.2.2
	Kernel-5_35-4_79_2_92:4.5.2.2
	Kernel-5_35-4_79_2_91:4.5.2.2
	Kernel-5_35-4_79_2_90:4.5.2.2
	Kernel-5_35-4_79_2_89:4.5.2.2
	Kernel-5_35-4_79_2_88:4.5.2.2
	Kernel-5_35-4_79_2_87:4.5.2.2
	Kernel-5_35-4_79_2_86:4.5.2.2
	Kernel-5_35-4_79_2_85:4.5.2.2
	Kernel-5_35-4_79_2_84:4.5.2.2
	Kernel-5_35-4_79_2_83:4.5.2.2
	Kernel-5_35-4_79_2_82:4.5.2.2
	Kernel-5_35-4_79_2_81:4.5.2.2
	Kernel-5_35-4_79_2_80:4.5.2.2
	Kernel-5_35-4_79_2_79:4.5.2.2
	Kernel-5_35-4_79_2_78:4.5.2.2
	Kernel-5_35-4_79_2_77:4.5.2.2
	RO_5_07:4.5.2.2
	Kernel-5_35-4_79_2_76:4.5.2.2
	Kernel-5_35-4_79_2_75:4.5.2.2
	Kernel-5_35-4_79_2_74:4.5.2.2
	Kernel-5_35-4_79_2_73:4.5.2.2
	Kernel-5_35-4_79_2_72:4.5.2.2
	Kernel-5_35-4_79_2_71:4.5.2.2
	Kernel-5_35-4_79_2_70:4.5.2.2
	Kernel-5_35-4_79_2_69:4.5.2.2
	Kernel-5_35-4_79_2_68:4.5.2.2
	Kernel-5_35-4_79_2_67:4.5.2.2
	Kernel-5_35-4_79_2_66:4.5.2.2
	Kernel-5_35-4_79_2_65:4.5.2.2
	Kernel-5_35-4_79_2_64:4.5.2.2
	Kernel-5_35-4_79_2_63:4.5.2.2
	Kernel-5_35-4_79_2_62:4.5.2.2
	Kernel-5_35-4_79_2_61:4.5.2.2
	Kernel-5_35-4_79_2_59:4.5.2.2
	Kernel-5_35-4_79_2_58:4.5.2.2
	Kernel-5_35-4_79_2_57:4.5.2.2
	Kernel-5_35-4_79_2_56:4.5.2.2
	Kernel-5_35-4_79_2_55:4.5.2.2
	Kernel-5_35-4_79_2_54:4.5.2.2
	Kernel-5_35-4_79_2_53:4.5.2.2
	Kernel-5_35-4_79_2_52:4.5.2.2
	Kernel-5_35-4_79_2_51:4.5.2.2
	Kernel-5_35-4_79_2_50:4.5.2.2
	Kernel-5_35-4_79_2_49:4.5.2.2
	Kernel-5_35-4_79_2_48:4.5.2.2
	Kernel-5_47:4.5
	Kernel-5_46-4_90_2_1:4.5
	nbingham_Kernel_FastNC_dev_bp:4.5
	nbingham_Kernel_FastNC_dev:4.5.0.4
	Kernel-5_46:4.5
	Kernel-5_45:4.5
	Kernel-5_35-4_79_2_47:4.5.2.2
	Kernel-5_35-4_79_2_46:4.5.2.2
	Kernel-5_35-4_79_2_45:4.5.2.2
	Kernel-5_35-4_79_2_44:4.5.2.2
	Kernel-5_35-4_79_2_25_2_2:4.5.2.1
	Kernel-5_35-4_79_2_43:4.5.2.2
	Kernel-5_35-4_79_2_42:4.5.2.2
	Kernel-5_35-4_79_2_41:4.5.2.2
	Kernel-5_35-4_79_2_40:4.5.2.2
	Kernel-5_35-4_79_2_39:4.5.2.2
	Kernel-5_35-4_79_2_38:4.5.2.2
	Kernel-5_35-4_79_2_37:4.5.2.2
	Kernel-5_35-4_79_2_36:4.5.2.1
	Kernel-5_35-4_79_2_35:4.5.2.1
	Kernel-5_35-4_79_2_34:4.5.2.1
	Kernel-5_35-4_79_2_33:4.5.2.1
	Kernel-5_35-4_79_2_32:4.5.2.1
	Kernel-5_44:4.5
	Kernel-5_35-4_79_2_25_2_1:4.5.2.1
	Kernel-5_43:4.5
	Kernel-5_35-4_79_2_31:4.5.2.1
	Kernel-5_35-4_79_2_30:4.5.2.1
	Kernel-5_35-4_79_2_29:4.5.2.1
	Kernel-5_35-4_79_2_28:4.5.2.1
	Kernel-5_35-4_79_2_27:4.5.2.1
	Kernel-5_35-4_79_2_26:4.5.2.1
	Kernel-5_42:4.5
	Kernel-5_41:4.5
	Kernel-5_40:4.5
	Kernel-5_35-4_79_2_25:4.5.2.1
	Kernel-5_35-4_79_2_24:4.5.2.1
	Kernel-5_35-4_79_2_23:4.5.2.1
	Kernel-5_35-4_79_2_22:4.5.2.1
	Kernel-5_35-4_79_2_21:4.5.2.1
	Kernel-5_35-4_79_2_20:4.5.2.1
	Kernel-5_35-4_79_2_19:4.5.2.1
	Kernel-5_35-4_79_2_18:4.5.2.1
	Kernel-5_35-4_79_2_17:4.5.2.1
	Kernel-5_35-4_79_2_16:4.5.2.1
	Kernel-5_35-4_79_2_15:4.5.2.1
	Kernel-5_35-4_79_2_14:4.5.2.1
	Kernel-5_39:4.5
	Kernel-5_13-4_52_2_1:4.2
	Bethany:4.2.0.2
	Kernel-5_38:4.5
	Kernel-5_35-4_79_2_13:4.5.2.1
	Kernel-5_35-4_79_2_12:4.5.2.1
	Kernel-5_35-4_79_2_11:4.5.2.1
	Kernel-5_37:4.5
	Kernel-5_35-4_79_2_10:4.5.2.1
	Kernel-5_35-4_79_2_9:4.5.2.1
	Kernel-5_36:4.5
	Kernel-5_35-4_79_2_8:4.5.2.1
	Kernel-5_35-4_79_2_7:4.5.2.1
	Kernel-5_35-4_79_2_6:4.5.2.1
	Kernel-5_35-4_79_2_5:4.5.2.1
	Kernel-5_35-4_79_2_4:4.5.2.1
	Kernel-5_35-4_79_2_3:4.5.2.1
	Kernel-5_35-4_79_2_2:4.5.2.1
	dellis_autobuild_BaseSW:4.5
	Kernel-5_35-4_79_2_1:4.5.2.1
	HAL:4.5.0.2
	Kernel-5_35:4.5
	Kernel-5_34:4.5
	Kernel-5_33:4.5
	Kernel-5_32:4.5
	Kernel-5_31:4.5
	Kernel-5_30:4.5
	Kernel-5_29:4.5
	Kernel-5_28:4.5
	Kernel-5_27:4.5
	Kernel-5_26:4.5
	Kernel-5_25:4.5
	Kernel-5_24:4.5
	Kernel-5_23:4.4
	Kernel-5_22:4.3
	sbrodie_sedwards_16Mar2000:4.3
	Kernel-5_21:4.3
	Kernel-5_20:4.3
	Kernel-5_19:4.2
	Kernel-5_18:4.2
	Kernel-5_17:4.2
	Kernel-5_16:4.2
	Kernel-5_15:4.2
	Kernel-5_14:4.2
	Kernel-5_13:4.2
	Kernel-5_12:4.2
	Kernel-5_11:4.2
	Kernel-5_10:4.2
	Kernel-5_09:4.2
	Kernel-5_08:4.2
	Kernel-5_07:4.2
	Kernel-5_06:4.2
	Kernel-5_05:4.2
	Kernel-5_04:4.2
	Kernel-5_03:4.2
	Kernel-5_02:4.2
	Kernel-5_01:4.2
	Kernel-5_00:4.2
	Kernel-4_99:4.2
	Kernel-4_98:4.2
	Kernel-4_97:4.2
	Kernel-4_96:4.2
	Kernel-4_95:4.2
	Kernel-4_94:4.2
	Kernel-4_93:4.2
	Kernel-4_92:4.2
	Kernel-4_91:4.2
	Kernel-4_90:4.2
	dcotton_autobuild_BaseSW:4.5
	Kernel-4_89:4.2
	Kernel-4_88:4.2
	Kernel-4_87:4.2
	Kernel-4_86:4.2
	Kernel-4_85:4.2
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1.4.3
	Kernel-4_84:4.2
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1.4.3
	Ursula_RiscPC_bp:4.1.4.3
	Kernel-4_83:4.2
	Kernel-4_82:4.2
	Kernel-4_81:4.2
	Kernel-4_80:4.2
	Kernel-4_79:4.2
	Kernel-4_78:4.2
	Kernel-4_77:4.2
	Kernel-4_76:4.2
	Kernel-4_75:4.2
	Kernel-4_74:4.2
	Kernel-4_73:4.2
	Kernel-4_72:4.2
	Kernel-4_71:4.2
	Kernel-4_70:4.2
	Kernel-4_69:4.2
	Kernel-4_68:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.3
	Ursula_RiscPC:4.1.4.3.0.2
	Kernel-4_63-1_1_2_5:4.1.7.2
	Kernel-4_63-1_1_2_4:4.1.7.2
	Kernel-4_67:4.2
	Kernel-4_66:4.2
	Kernel-4_63-1_1_2_3:4.1.7.2
	Kernel-4_65:4.2
	Ursula_merge:4.1
	Kernel-4_64:4.2
	mstphens_Kernel-3_81:4.1.4.3
	Kernel-4_63-1_1_2_2:4.1.7.2
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1.4.3
	UrsulaBuild_FinalSoftload:4.1.4.3
	rthornb_UrsulaBuild-12Aug1998:4.1.4.3
	aglover_UrsulaBuild-05Aug1998:4.1.4.3
	rthornb_UrsulaBuild-29Jul1998:4.1.4.3
	rthornb_UrsulaBuild-22Jul1998:4.1.4.3
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.4.3
	rthornb_UrsulaBuild-07Jul1998:4.1.4.3
	rthornb_UrsulaBuild-17Jun1998:4.1.4.3
	rthornb_UrsulaBuild-03Jun1998:4.1.4.3
	rthornb_UrsulaBuild-27May1998:4.1.4.3
	mstphens_Kernel-3_80:4.1.4.3
	rthornb_UrsulaBuild-21May1998:4.1.4.3
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.4.3
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.8
date	2016.07.24.10.50.43;	author rsprowson;	state Exp;
branches;
next	4.7;
commitid	x4yCuRzf90zVXyfz;

4.7
date	2016.06.30.20.59.46;	author jlee;	state Exp;
branches;
next	4.6;
commitid	skOEjp3ipLHx6xcz;

4.6
date	2016.06.30.20.08.08;	author jlee;	state Exp;
branches;
next	4.5;
commitid	IWoXxARWeuLDOwcz;

4.5
date	2000.04.12.13.58.38;	author sbrodie;	state Exp;
branches
	4.5.2.1;
next	4.4;

4.4
date	2000.04.04.14.27.32;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	2000.03.08.16.00.01;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	98.09.30.08.42.35;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.41.22;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.5.2.1
date	2000.09.15.12.38.01;	author kbracey;	state Exp;
branches;
next	4.5.2.2;

4.5.2.2
date	2001.06.15.09.39.57;	author mstephen;	state Exp;
branches
	4.5.2.2.2.1;
next	4.5.2.3;

4.5.2.3
date	2011.08.07.00.05.00;	author jlee;	state Exp;
branches
	4.5.2.3.2.1;
next	4.5.2.4;
commitid	1LhiU7JeG3NwFvuv;

4.5.2.4
date	2012.05.26.09.00.28;	author rsprowson;	state Exp;
branches;
next	4.5.2.5;
commitid	EMsCe1GQBPXgdd6w;

4.5.2.5
date	2012.10.28.16.51.46;	author rsprowson;	state Exp;
branches;
next	;
commitid	ruXZqdTJKJ85Qaqw;

4.5.2.2.2.1
date	2011.08.06.23.56.11;	author jlee;	state Exp;
branches;
next	;
commitid	FftZtV6AJ7qwCvuv;

4.5.2.3.2.1
date	2012.09.18.15.50.02;	author jlee;	state Exp;
branches;
next	;
commitid	jeuxYpI6CQUxM1lw;

4.1.1.1
date	96.11.05.09.41.22;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.00.41;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.09.09.13.33.24;	author mstphens;	state Exp;
branches;
next	4.1.4.2;

4.1.4.2
date	98.03.26.11.25.56;	author mstphens;	state Exp;
branches;
next	4.1.4.3;

4.1.4.3
date	98.04.14.11.23.57;	author mstphens;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.11.26;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.03.45;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	98.09.08.15.25.01;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.8
log
@Resolve 2x header clashes
hdr/AHCIDevice:
  Remove this, since it clashes with the (differing API version number) copy exported by SATADriver. Post merging the Kernel back to the trunk the newer file datestamp has meant the wrong one gets exported during any ROM build which includes both components. Since the Kernel doesn't need AHCIDevice itself, it is left to the respective client (SATADriver or AHCIDriver in this case) to export them.
hdr/ModHand:
  Resolve the longstanding clash of Module_Title with the same named symbol that CMHG uses. There are very few assembler needing to look at the module header (Kernel, FileCore, Debugger, Podule) directly, but every C module which uses CMHG and wants one of the ModHandReason values ends up with a duplicate define.
  Obsolete Arthur era Module_LoadAddr value.
ArthurSWIs.s/MoreComms.s/NewReset.s/SWINaming.s/SysComms.s/Utility.s:
  Module_Title->Module_TitleStr.
ModHand.s:
  Module_Title->Module_TitleStr.
  Recode Module_LoadAddr using the file type from Hdr:FileTypes.
GetAlls.s:
  Drop unused NVRAM and PortMan headers. Add Hdr:FileTypes.

Version 5.54. Tagged as 'Kernel-5_54'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        TTL     => MoreComms

Error_Code ROUT
        ; Use MessageTrans to construct an error block by substituting the error text into
        ; an error

        Push    "r7,r8,lr"

        ASSERT  ?Error_CodeTag <= 8
        ADR     lr, Error_CodeTag
        LDMIA   lr, {r1,r2}
        Push    "r1,r2"

        MOV     r1, r0          ; pointer
        MOV     r0, #0          ; base
        SWI     XOS_ReadUnsigned
        Push    "r2"

        MOV     r0, sp          ; Error block
 [ :LNOT:International
        ; Haven't got any alternate code, but at least it'll assemble
 |
        BL      TranslateError_VClear
 ]

        ; If error number's changed don't substitute
        LDR     r3, [r0]
        TEQ     r3, r2
        BNE     %FT90

        ; GSTrans the text into the error buffer
        MOV     r3, r0
        MOV     r0, r1
        ADD     r1, r3, #4
        MOV     r2, #252
        SWI     XOS_GSTrans

        ; Ensure 0-terminated
        MOV     r0, #0
        CMP     r2, #251
        MOVHI   r2, #251
        STRB    r0, [r1, r2]

        MOV     r0, r3
90
        ADD     sp, sp, #12
        SETV
        Pull    "r7,r8,pc"

Error_CodeTag DCB "ErrSub", 0

        LTORG

Eval_Code ROUT
             Push  "lr"
             LDR    R1, =GeneralMOSBuffer
             MOV    R2, #LongCLISize
             SWI    XOS_EvaluateExpression
             Pull  "PC", VS
           [ :LNOT: International
             SWI    XOS_WriteS
             =     "Result is a",0
             ALIGN
             Pull  "PC", VS
             CMP    R1, #0
             ADREQ  R0, %FT01
             ADRNE  R0, %FT02
             SWI    XOS_Write0
             Pull  "PC", VS
             SWI    XOS_WriteS
             =     ", value : ",0
             ALIGN
             Pull  "PC", VS
           |
             Push   "r4"
             CMP    R1, #0
             ADREQ  R0, %FT01
             ADRNE  R0, %FT02
             BL     FindToken
             MOV    R4,R0
             BL     WriteS_Translated_UseR4
             =      "Result:Result is %0, value :",0
             ALIGN
             SWI    XOS_WriteI + " "
             Pull   "r4"

           ]
             LDREQ  R1, =GeneralMOSBuffer
             MOVEQ  R0, R2
             MOVEQ  R2, #256
             SWIEQ  XOS_BinaryToDecimal
             MOV    R5, #-1
03           ADD    R5, R5, #1
             CMP    R5, R2
             BEQ    %FT04
             LDRB   R0, [R1, R5]
             CMP    R0, #&7F
             MOVEQ  R0, #"?"-"@@"   ; preversion!!
             CMP    R0, #31
             ADDLE  R0, R0, #"@@"
             SWILE  XOS_WriteI+"|"
             Pull  "PC", VS
             CMP    R0, #"|"
             CMPNE  R0, #""""
             CMPNE  R0, #"<"
             SWIEQ  XOS_WriteI+"|"
             SWIVC  XOS_WriteC
             BVC    %BT03

04           SWIVC  XOS_NewLine
             Pull  "PC"

        [ International
01
    =    "Integer:an integer",0
02
    =    "String:a string",0
        |
01
    =    "n integer",0
02
    =    " string",0
        ]

    ALIGN

;****************************************************************************
; Coupla utility commands

Time_Code    ROUT
     Push   "lr"
     SUB     R13, R13, #8
     MOV     R1, R13
     MOV     R0, #3
     STRB    R0, [R1]
     MOV     R0, #14
     SWI     XOS_Word
     BVS     %FT01
     MOV     R0, #-1
     MOV     R1, R13
     LDR     R2, =GeneralMOSBuffer
     MOV     R3, #256
     ADRL    R4, TimeFormat
     SWI     XTerritory_ConvertDateAndTime
01   ADD     R13, R13, #8
     SWIVC   XOS_Write0
     SWIVC   XOS_NewLine
     Pull   "PC"

Cache_Code   ROUT
     Push    "lr"
     TEQ     r1, #0
     BNE     %FT05

     ; Report
     MOV     r0, #MMUCReason_ModifyControl
     MOV     r1, #0             ; EOR mask
     MOV     r2, #-1            ; AND mask (ie don't modify)
     SWI     XOS_MMUControl
     Pull    "PC", VS

     SWI     XOS_WriteS
     DCB     "Cache ", 0
     ALIGN
     Pull    "PC", VS

     TST     r1, #MMUC_C
     ADRNE   r0, %FT02
     ADREQ   r0, %FT03
     SWI     XOS_Write0
     SWIVC   XOS_NewLine
     Pull    "PC"
02
     DCB     "On", 0            ; Not internationalised because the
03                              ; command expects english 'On' or 'Off'
     DCB     "Off", 0           ; to set it so should report in english
     ALIGN
05
     ; Set
     BL      Cache_Opt_Parse
     MOVS    r1, r1
     BPL     %FT07
     ADRL    r0, ErrorBlock_BadParameters
   [ International
     BL      TranslateError
   |
     SETV
   ]
07
     LDR     r2, =:NOT: (MMUC_I + MMUC_C + MMUC_W)
     LDRNE   r1, =0
     LDREQ   r1, =MMUC_I + MMUC_C + MMUC_W
     MOVVC   r0, #MMUCReason_ModifyControl
     SWIVC   XOS_MMUControl
     Pull    "PC"
      
Cache_Opt_Parse
     ; => R0 -> control terminated string
     ; <= R1 = 0, 1, or -ve for error
     LDRB    r2, [r0], #1
     TEQ     r2, #'O'
     TEQNE   r2, #'o'
     BNE     %FT15
     LDRB    r2, [r0], #1
     TEQ     r2, #'N'
     TEQNE   r2, #'n'
     BEQ     %FT12
     TEQ     r2, #'F'
     TEQNE   r2, #'f'
     BNE     %FT15
     LDRB    r2, [r0], #1
     TEQ     r2, #'F'
     TEQNE   r2, #'f'
     BNE     %FT15
     ; Off
     MOVS    r1, #1
12
     ; On
     MOVEQ   r1, #0
13
     ; Check for trailing text
     LDRB    r2, [r0], #1
     CMP     r2, #' '
     BEQ     %BT13
     MOVCC   pc, lr
15
     ; Error
     SETV
     MOV     r1, #-1
     MOV     pc, lr
     
Ignore_Code  ROUT
     Push   "lr"
     MOVS    R4, R1
     MOV     R1, R0
     MOV     R0, #10+ (1:SHL:30)
     SWINE   XOS_ReadUnsigned
     Pull   "PC", VS
     MOV     R6, R2        ; maybe number
     BL      CheckEOL
     BNE     %FT01

     CMP     R4, #0
     MOV     R0, #&B6
     MOVEQ   R1, #255
     MOVNE   R1, #0
     MOV     R2, #0
     SWI     XOS_Byte
     MOV     R0, #6
     MOV     R1, R6
     SWINE   XOS_Byte
     Pull   "PC"

01   ADRL    R0, ErrorBlock_BadNumb
   [ International
     BL      TranslateError
   |
     SETV
   ]
     Pull   "PC"

;*****************************************************************************

ROMModules_Code Entry
      [ International
        BL      GSWriteS_Translated
        =       "ROMMTitle:No. Position|IModule Name|I|IVersion|IStatus|M|J",0
        EXIT    VS
      |
        ADRL    r0, romm_helpstr
        MOV     r1, #0
        SWI     XOS_PrettyPrint
        EXIT    VS
      ]
        MOV     r1, #0
        MOV     r2, #-1
01
        SWI     XOS_ReadEscapeState
        PullEnv CS
        BCS     AckEscape
        MOV     r0, #ModHandReason_EnumerateROM_ModulesWithInfo
        SWI     XOS_Module
        BVC     %FT08
        CLRV
        EXIT                                            ; exit V clear

; R1 = module number +1
; R2 = podule number
; R3 -> name
; R4 = status (-1 unplugged, 0 dormant, 1 active, 2 running)
; R5 = chunk number
; R6 = version number

; Copy info into buffer and prettyprint
08
        MOV     r5, r1                                  ; save r1 and r2 for next call to OS_Module
        MOV     r10, r2
        MOV     r0, r1
        MOV     r2, #4
        SUB     sp, sp, #4
        MOV     r1, sp
        SWI     XOS_ConvertCardinal2
        ADD     sp, sp, #4
        SUB     r12, r1, r0
        LDR     r1, =GeneralMOSBuffer
        MOV     r2, #256
        MOV     r0, #31
        RSBS    r12, r12, #3
15      BLNE    %FT20
        SUBS    r12, r12, #1
        BPL     %BT15
        MOV     r0, r5
        SWI     XOS_ConvertCardinal2
        MOV     r0, #" "
        BL      %FT20                                   ; add space
        CMP     r10, #-1
      [ International
        ADREQL  r0, rommpossysrom
        ADRLTL  r0, rommposextrom
        ADRGTL  r0, rommpospodule
        BL      FindToken
      |
        ADREQL  r0, rommpossr
        ADRLTL  r0, rommposer
        ADRGTL  r0, rommposp
      ]
        BL      %FT21                                   ; add string
        MOV     r0, #" "
        BL      %FT20                                   ; add space
        MOVGT   r0, r10                                 ; if normal podule then use plain number (flags still set from CMP)
        MVNLT   r0, r10                                 ; if extension ROM then NOT it (-2 => 1, -3 => 2 etc)
        SWINE   XOS_ConvertCardinal1
        MOV     r0, #TAB
        BL      %FT20                                   ; tab to col. 16
        MOV     r0, r3
        BL      %FT21                                   ; copy name in
        MOV     r3, r0                                  ; string length
        MOV     r0, #TAB
03
        CMP     r3, #24
        ADDCC   r3, r3, #8
        BLCC    %FT20
        BCC     %BT03
04
        MOV     r11, #"0"
        TST     r6, #&F0000000                          ; 1st digit of integer part
        ORRNE   r0, r11, r6, LSR #28
        BLNE    %FT20
        MOV     r6, r6, LSL #4
        TSTEQ   r6, #&F0000000                          ; 2nd digit of integer part
        ORRNE   r0, r11, r6, LSR #28
        BLNE    %FT20
        MOV     r6, r6, LSL #4
        TSTEQ   r6, #&F0000000                          ; 3rd digit of integer part
        ORRNE   r0, r11, r6, LSR #28
        BLNE    %FT20
        MOV     r6, r6, LSL #4
        ORR     r0, r11, r6, LSR #28                    ; 4th digit of integer part
        BL      %FT20
        MOV     r0, #"."
        BL      %FT20
        MOV     r6, r6, LSL #4
        ORR     r0, r11, r6, LSR #28                    ; 1st digit of decimal part
        BL      %FT20
        MOV     r6, r6, LSL #4
        ORR     r0, r11, r6, LSR #28                    ; 2nd digit of decimal part
        BL      %FT20
        MOVS    r6, r6, LSL #4                          ; only print 3rd and 4th digits of decimal part if non-zero
        ORRNE   r0, r11, r6, LSR #28
        BLNE    %FT20
        MOVS    r6, r6, LSL #4
        ORRNE   r0, r11, r6, LSR #28
        BLNE    %FT20
        MOV     r0, #TAB
        BL      %FT20

        CMP     r4, #0
      [ International
        ADRMIL  r0, rommstatu
        ADREQL  r0, rommstatd
        ADRGTL  r0, rommstata
        BL      FindToken
      |
        ADRMIL  r0, rommstu
        ADREQL  r0, rommstd
        ADRGTL  r0, rommsta
      ]
        CMP     r4, #2
      [ International
        ADREQL  r0, rommstatr
        BLEQ    FindToken
      |
        ADREQL  r0, rommstr
      ]
        BL      %FT21
        MOV     r0, #13
        BL      %FT20
        MOV     r0, #0
        BL      %FT20
        LDR     r0, =GeneralMOSBuffer
        MOV     r1, #0
        SWI     XOS_PrettyPrint
        EXIT    VS
        MOV     r1, r5
        MOV     r2, r10
        B       %BT01

; R1 buffer ptr, R2 bufflen left

20
        EntryS
        SUBS    r2, r2, #1
        STRPLB  r0, [r1], #1
        EXITS
21
        EntryS
        Push    "r0"
        MOV     r12, r0
22
        LDRB    r0, [r12], #1
        CMP     r0, #TokenEscapeChar
        BEQ     %FT23
        CMP     r0, #0
      [ International
        CMPNE   r0, #10
      ]
        BLNE    %BT20
        BNE     %BT22
        Pull    "r0"
        SUB     r0, r12, r0       ; length of string
        SUB     r0, r0, #1
        EXITS

23
        BL      %BT20
        LDRB    r0, [r12], #1
        BL      %BT20
        B       %BT22

      [ International
rommpossysrom
     =   "SYSROM:System ROM", 0
rommposextrom
     =   "EXTROM:Extn ROM", 0
rommpospodule
     =   "PODROM:Podule", 0

rommstata
     =   "Active:Active", 0

rommstatd
     =   "Dormant:Dormant", 0

rommstatu
     =   "Unplugged:Unplugged", 0

rommstatr
     =   "Running:Running",0

     ALIGN
      |
romm_helpstr
     =   "No. Position",9,"Module Name",9,9,"Version",9,"Status",10,13,0
rommpossr
     =   "System ROM", 0
rommstu
     =   "Unplugged", 0
rommstd
     =   "Dormant", 0
rommsta
     =   "Active", 0
rommstr
     =   "Running", 0

     ALIGN
      ]
     LTORG

;*****************************************************************************

RMEnsure_Code Entry "r0, r1"
        MOV     r1, r0                          ; name pointer
        MOV     r0, #ModHandReason_LookupName
        SWI     XOS_Module
        MOVVS   r10, r0                         ; module handler will build a nice error
        BVS     RMEDoCommand                    ; module not found
        LDR     r0, [stack]                     ; now find version number
01
        LDRB    r6, [r0], #1
        CMP     r6, #" "
        BNE     %BT01
        BL      RMEGetVerNo
        MOV     r6, r1
        LDR     r0, [r3, #Module_HelpStr]
        TEQ     r0, #0
        BEQ     RMEDoCommand                    ; no help string, so do command
        ADD     r0, r0, r3
        BL      GetVerNoFromHelpString
        CMP     r1, r6
        EXIT    GE
        MOV     r10, #0
RMEDoCommand
        Pull    "r0, r1"
        CMP     r1, #2
        BEQ     BuildRMEnsureError
04
        LDRB    r1, [r0], #1
        CMP     r1, #" "
        BNE     %BT04
05
        LDRB    r1, [r0], #1
        CMP     r1, #" "
        BEQ     %BT05
06
        LDRB    r1, [r0], #1
        CMP     r1, #" "
        BNE     %BT06
        SUB     r0, r0, #1
03
        SWI     XOS_CLI
        Pull    PC

BuildRMEnsureError
        MOVS    r0, r10
        BEQ     %FT10
        SETV
        Pull    pc
10      ADR     r0, ErrorBlock_ModuleTooOld
      [ International
        LDR     r4,[r3, #Module_TitleStr]
        ADD     r4,r4,r3
        BL      TranslateError_UseR4            ; => V set
        Pull    pc
      |
        BL      GetOscliBuffer
        MOV     r10, r5
        LDR     r2, [r0], #4
        STR     r2, [r5], #4
        BL      rmecopystr
        MOV     r6, r0

        LDR     r2, [r3, #Module_TitleStr]      ; r3 still module pointer
        ADD     r0, r2, r3
        BL      rmecopystr
        MOV     r0, r6
        BL      rmecopystr
        STRB    r2, [r5]                        ; terminate
        B       BuildRMEnsureError
      ]

rmecopystr
        LDRB    r2, [r0], #1
        CMP     r2, #32
        STRGEB  r2, [r5], #1
        BGE     rmecopystr
        MOV     pc, lr

        MakeErrorBlock ModuleTooOld

; *************************************************************************
;
;       RMEGetVerNo - Read version number from a string
;
; in:   R0 -> string
;
; out:  R0, R4, R5, R12 corrupted
;       R1 = version number in BCD with the decimal point between bits 15 and 16
;            eg "2.34" => &00023400, "5.6789" => &00056789, "17" => &00170000
;            only the last 4 digits of the integer part, and the first 4 decimal places are stored
;

RMEGetVerNo Entry
        MOV     r1, #0
10
        LDRB    r12, [r0], #1
        CMP     r12, #" "
        BEQ     %BT10
11
        SUB     r12, r12, #"0"
        CMP     r12, #9
        ORRLS   r1, r12, r1, LSL #4             ; just keep nibbles - we only need the
        LDRLSB  r12, [r0], #1                   ; result to be ordered, not continous
        BLS     %BT11
        MOV     r5, #0
        CMP     r12, #"."-"0"
        BNE     %FT13
        MOV     r4, #16
12
        SUBS    r4, r4, #4
        BMI     %FT13
        LDRB    r12, [r0], #1
        SUB     r12, r12, #"0"
        CMP     r12, #9
        ORRLS   r5, r5, r12, LSL r4
        BLS     %BT12
13
        ORR     r1, r5, r1, LSL #16
        EXIT

; *************************************************************************
;
;       GetVerNoFromHelpString - Read version number from a module help string
;
; in:   R0 -> module help string
;
; out:  R1 = version number in BCD with the decimal point between bits 15 and 16
;            eg "2.34" => &00023400, "5.6789" => &00056789, "17" => &00170000
;            only the last 4 digits of the integer part, and the first 4 decimal places are stored
;       All other registers preserved
;

GetVerNoFromHelpString Entry "r0, r4, r5, r12"
        MOV     r5, #0                          ; char count
10
        LDRB    r1, [r0], #1
        CMP     r1, #0                          ; check character
        EXIT    EQ                              ; if end of string then no version number so return zero
        ADD     r5, r5, #1
        CMP     r1, #TAB
        ADDEQ   r5, r5, #7
        BICEQ   r5, r5, #7
        CMP     r5, #16                         ; hit verno col yet?
        BLT     %BT10
20
        LDRB    r1, [r0], #1
        CMP     r1, #TAB
        CMPNE   r1, #31                         ; if a control character (except TAB)
        MOVLT   r1, #0                          ; then no version number so return zero
        EXIT    LT
        SUB     r1, r1, #"0"
        CMP     r1, #9                          ; if not a digit
        BHI     %BT20                           ; then try next character
        SUB     r0, r0, #1                      ; was a digit so go back to it
        BL      RMEGetVerNo                     ; read version number from here
        EXIT

        END
@


4.7
log
@Delete lots of old switches
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * FixCallBacks
  * UseProcessTransfer
  * CanLiveOnROMCard
  * BleedinDaveBell
  * NewStyleEcfs
  * DoVdu23_0_12
  * LCDPowerCtrl
  * HostVdu
  * Print
  * EmulatorSupport
  * TubeInfo
  * AddTubeBashers
  * TubeChar, TubeString, TubeDumpNoStack, TubeNewlNoStack macros
  * FIQDebug
  * VCOstartfix
  * AssemblingArthur (n.b. still defined for safety with anything in Hdr: which uses it, but not used explicitly by the kernel)
  * MouseBufferFix
  * LCDInvert
  * LCDSupport
  * DoInitialiseMode
  * Interruptible32bitModes
  * MouseBufferManager
  * StrongARM (new CacheCleanerHack and InterruptDelay switches added to hdr/Options to cover some functionality that StrongARM previously covered)
  * SAcleanflushbroken
  * StrongARM_POST
  * IrqsInClaimRelease
  * CheckProtectionLink
  * GSWorkspaceInKernelBuffers
  * EarlierReentrancyInDAShrink
  * LongCommandLines
  * ECC
  * NoSPSRcorruption
  * RMTidyDoesNowt
  * RogerEXEY
  * StorkPowerSave
  * DebugForcedReset
  * AssembleKEYV
  * AssemblePointerV
  * ProcessorVectors
  * Keyboard_Type
  Assorted old files have also been deleted.
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.51. Tagged as 'Kernel-5_51'
@
text
@d544 1
a544 1
        LDR     r4,[r3, #Module_Title]
d556 1
a556 1
        LDR     r2, [r3, #Module_Title]         ; r3 still module pointer
@


4.6
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@a70 1
  [ LongCommandLines
a71 3
  |
             MOV    R2, #256
  ]
@


4.5
log
@  Bug fixes only.
Detail:
  "Podule" number now displayed again in *ROMModule output - flag
     preservation issue caused it to disappear in 5.23.
  *Eval output no longer misses its trailing space, neither do "Podule" or
    "Extn ROM" in *ROMModules output.
  Heap manager now works again in non-SVC modes.
  Exception dump now contains faked up 26-bit PC+PSR lookalike.
Admin:
  Assembled.
@
text
@d54 2
a55 2
        CMP     r2, #252
        MOVHI   r2, #252
d71 3
d75 1
d168 11
d180 70
d282 1
a282 1
ROMModules_Code ENTRY
d495 1
d499 1
a499 1
RMEnsure_Code ENTRY "r0, r1"
d550 1
a550 2
        BL      TranslateError_UseR4
        SETV
d590 1
a590 1
RMEGetVerNo ENTRY
d630 1
a630 1
GetVerNoFromHelpString ENTRY "r0, r4, r5, r12"
@


4.5.2.1
log
@* Converted to building with ObjAsm (but still a single object file using ORG).
* Added ARM_IMB and ARM_IMBRange SWIs as recommended by ARMv5.
* Some early prototype HAL bits popped in - a lot of source restructuring still
  to come.
* New debug target creates an AIF image with debug information, and translates
  this into an ASCII object file for the 16702B logic analyser.

Version 5.35, 4.79.2.1. Tagged as 'Kernel-5_35-4_79_2_1'
@
text
@d197 1
a197 1
ROMModules_Code Entry
d413 1
a413 1
RMEnsure_Code Entry "r0, r1"
d505 1
a505 1
RMEGetVerNo Entry
d545 1
a545 1
GetVerNoFromHelpString Entry "r0, r4, r5, r12"
@


4.5.2.2
log
@Merge in long command line support from Ursula kernel.
Look for LongCommandLine flag, command line size currently
set at 1k.
For HAL/32bit builds, the kernel buffer space is at high
(top bit set) address, which may break some code using signed
comparisons. So *beware* that there may be some latent
bugs in old kernel code using these buffers, not yet found.
One such bug, in s.Arthur2 found and fixed.
Tested moderately on ARM9 desktop build.
Lovely to reimplement things I did two and half years ago.

Version 5.35, 4.79.2.37. Tagged as 'Kernel-5_35-4_79_2_37'
@
text
@a70 3
  [ LongCommandLines
             MOV    R2, #LongCLISize
  |
a71 1
  ]
@


4.5.2.3
log
@Merge over some changes from the Cortex branch
Detail:
  hdr/ARMops - Reserve OS_PlatformFeatures 0 bit 20 for indicating whether high processor vectors are in use
  s/Kernel - Add local definitions of BYTEWS, LDROSB, STROSB, VDWS macros (previously in Hdr:Macros)
  s/MoreComms - Fix potential buffer overflow when filling error buffer (although GSTrans shouldn't overflow the buffer in the first place?)
  s/Arthur2 - GSRead number detection fix
  s/ArthurSWIs - Updated OS_ReadUnsigned to support reading 64bit numbers
  Docs/ReadUnsigned - Docs for the updated OS_ReadUnsigned interface
Admin:
  Untested!
  Needs HdrSrc 1.86


Version 5.35, 4.79.2.120. Tagged as 'Kernel-5_35-4_79_2_120'
@
text
@d54 2
a55 2
        CMP     r2, #251
        MOVHI   r2, #251
@


4.5.2.3.2.1
log
@Merge with HAL branch
Detail:
  Merge the HAL branch into the RPi branch, prior to merging RPi to HAL
  Brief summary of main changes brought in:
  * Added *cache functionality previously provided by ARM module
  * Added "CMOS RAM reset" message on startup when CMOS has been wiped by keypress
  * Renamed HAL Video entries from HAL_Video_XXX to HAL_VideoXXX
  * Dropped mjsHAL macros, GRAB/STASH macros
  * Fixed pseudo-VRAM allocation when machine has exactly 16MB of RAM
  * Added OS_Hardware 5
  * Use OS_SerialOp GetDeviceName for getting serial device name
  * Drop HAL_MonitorLeadID
  * Rework default GraphicsV_IICOp handler
Admin:
  Tested on Raspberry Pi with high processor vectors


Version 5.35, 4.79.2.147.2.23. Tagged as 'Kernel-5_35-4_79_2_147_2_23'
@
text
@a167 11
Cache_Code   ROUT
     Push    "lr"
     TEQ     r1, #0
     BNE     %FT05

     ; Report
     MOV     r0, #MMUCReason_ModifyControl
     MOV     r1, #0             ; EOR mask
     MOV     r2, #-1            ; AND mask (ie don't modify)
     SWI     XOS_MMUControl
     Pull    "PC", VS
a168 70
     SWI     XOS_WriteS
     DCB     "Cache ", 0
     ALIGN
     Pull    "PC", VS

     TST     r1, #MMUC_C
     ADRNE   r0, %FT02
     ADREQ   r0, %FT03
     SWI     XOS_Write0
     SWIVC   XOS_NewLine
     Pull    "PC"
02
     DCB     "On", 0            ; Not internationalised because the
03                              ; command expects english 'On' or 'Off'
     DCB     "Off", 0           ; to set it so should report in english
     ALIGN
05
     ; Set
     BL      Cache_Opt_Parse
     MOVS    r1, r1
     BPL     %FT07
     ADRL    r0, ErrorBlock_BadParameters
   [ International
     BL      TranslateError
   |
     SETV
   ]
07
     LDR     r2, =:NOT: (MMUC_I + MMUC_C + MMUC_W)
     LDRNE   r1, =0
     LDREQ   r1, =MMUC_I + MMUC_C + MMUC_W
     MOVVC   r0, #MMUCReason_ModifyControl
     SWIVC   XOS_MMUControl
     Pull    "PC"
      
Cache_Opt_Parse
     ; => R0 -> control terminated string
     ; <= R1 = 0, 1, or -ve for error
     LDRB    r2, [r0], #1
     TEQ     r2, #'O'
     TEQNE   r2, #'o'
     BNE     %FT15
     LDRB    r2, [r0], #1
     TEQ     r2, #'N'
     TEQNE   r2, #'n'
     BEQ     %FT12
     TEQ     r2, #'F'
     TEQNE   r2, #'f'
     BNE     %FT15
     LDRB    r2, [r0], #1
     TEQ     r2, #'F'
     TEQNE   r2, #'f'
     BNE     %FT15
     ; Off
     MOVS    r1, #1
12
     ; On
     MOVEQ   r1, #0
13
     ; Check for trailing text
     LDRB    r2, [r0], #1
     CMP     r2, #' '
     BEQ     %BT13
     MOVCC   pc, lr
15
     ; Error
     SETV
     MOV     r1, #-1
     MOV     pc, lr
     
a413 1
     LTORG
@


4.5.2.4
log
@Adoption of *CONFIGURE/STATUS CACHE commands
The kernel already looks after all other aspects of the ARM CPU, so can look after the cache control command too.
 HelpStrs.s:New tokens for help and syntax
 CmdHelp.s:UK help and syntax
 Arthur3.s:Tables updates for *CONFIGURE/STATUS, lined some stuff up, default error text sync'd with Hdr:NewErrors
 MoreComms.s:Parsing and doing of *CACHE
 Utility.s:Hashing table updated for *CACHE
Other minor changes
 hdr/Options:Bring 'MosVer' into the private header
 hdr/RISCOS:aasm aliases for SP removed, MainVars and MosVer made private, added definition of the start of application space
 HeapMan.s:Use of GRAB changed to Pull
 Offset of TutuCMOS changed for more informative PrintSoundCMOS
 PMF/osbyte.s:Use OsBytes header file in place of MainVars

Version 5.35, 4.79.2.151. Tagged as 'Kernel-5_35-4_79_2_151'
@
text
@a167 11
Cache_Code   ROUT
     Push    "lr"
     TEQ     r1, #0
     BNE     %FT05

     ; Report
     MOV     r0, #MMUCReason_ModifyControl
     MOV     r1, #0             ; EOR mask
     MOV     r2, #-1            ; AND mask (ie don't modify)
     SWI     XOS_MMUControl
     Pull    "PC", VS
a168 70
     SWI     XOS_WriteS
     DCB     "Cache ", 0
     ALIGN
     Pull    "PC", VS

     TST     r1, #MMUC_C
     ADRNE   r0, %FT02
     ADREQ   r0, %FT03
     SWI     XOS_Write0
     SWIVC   XOS_NewLine
     Pull    "PC"
02
     DCB     "On", 0            ; Not internationalised because the
03                              ; command expects english 'On' or 'Off'
     DCB     "Off", 0           ; to set it so should report in english
     ALIGN
05
     ; Set
     BL      Cache_Opt_Parse
     MOVS    r1, r1
     BPL     %FT07
     ADRL    r0, ErrorBlock_BadParameters
   [ International
     BL      TranslateError
   |
     SETV
   ]
07
     LDR     r2, =:NOT: (MMUC_I + MMUC_C + MMUC_W)
     LDRNE   r1, =0
     LDREQ   r1, =MMUC_I + MMUC_C + MMUC_W
     MOVVC   r0, #MMUCReason_ModifyControl
     SWIVC   XOS_MMUControl
     Pull    "PC"
      
Cache_Opt_Parse
     ; => R0 -> control terminated string
     ; <= R1 = 0, 1, or -ve for error
     LDRB    r2, [r0], #1
     TEQ     r2, #'O'
     TEQNE   r2, #'o'
     BNE     %FT15
     LDRB    r2, [r0], #1
     TEQ     r2, #'N'
     TEQNE   r2, #'n'
     BEQ     %FT12
     TEQ     r2, #'F'
     TEQNE   r2, #'f'
     BNE     %FT15
     LDRB    r2, [r0], #1
     TEQ     r2, #'F'
     TEQNE   r2, #'f'
     BNE     %FT15
     ; Off
     MOVS    r1, #1
12
     ; On
     MOVEQ   r1, #0
13
     ; Check for trailing text
     LDRB    r2, [r0], #1
     CMP     r2, #' '
     BEQ     %BT13
     MOVCC   pc, lr
15
     ; Error
     SETV
     MOV     r1, #-1
     MOV     pc, lr
     
a413 1
     LTORG
@


4.5.2.5
log
@Review of Internation switch
Variously the call to TranslateError was either followed (outside the switch) by an unnecessary SETV, or missing SETV for the non international case.
Added DMA controller HAL device for IOMD.

Version 5.35, 4.79.2.174. Tagged as 'Kernel-5_35-4_79_2_174'
@
text
@d550 2
a551 1
        BL      TranslateError_UseR4            ; => V set
@


4.5.2.2.2.1
log
@Misc kernel updates
Detail:
  hdr/ARMops - Reserve OS_PlatformFeatures 0 bit 20 for indicating whether high processor vectors are in use
  s/Kernel - Add local definitions of BYTEWS, LDROSB, STROSB, VDWS macros (previously in Hdr:Macros)
  s/MoreComms - Fix potential buffer overflow when filling error buffer (although GSTrans shouldn't overflow the buffer in the first place?)
Admin:
  Tested on rev A2 BB-xM
  Requires HdrSrc 1.86


Version 5.35, 4.79.2.98.2.46. Tagged as 'Kernel-5_35-4_79_2_98_2_46'
@
text
@d54 2
a55 2
        CMP     r2, #251
        MOVHI   r2, #251
@


4.4
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@d98 1
d261 2
d349 2
a350 1
        EntryS  "r0"
d362 1
a362 1
        PullEnvS
d365 1
a365 1
        MOV     pc, lr
@


4.3
log
@  Fixed output of *ROMModules so everything lines up properly.
Detail:
  The code for *ROMModules uses OS_PrettyPrint, which seems unconcerned
    by such trivial things as leading spaces, which accounts for the
    misaligned output.  The code now starts by using ASCII 31 (hard
    space for OS_PrettyPrint's purposes) as the leading indent character
    to avoid confusion.
Admin:
  Tested on desktop build in both command-line and TaskWindows.

Version 5.20. Tagged as 'Kernel-5_20'
@
text
@d34 3
d38 1
d61 2
a62 2
        Pull    "r7,r8,lr"
        ORRS    pc, lr, #V_bit
d215 3
a217 1
        EXITS   VS                                      ; exit V clear
d227 1
a227 1

d274 1
a274 1

d341 1
d344 1
a344 1
        MOVS    pc, lr
d346 1
a346 1
        Push    "r0, lr"
d358 1
a358 1
        Pull    "r0, lr"
d361 1
a361 1
        MOVS    pc, lr
d390 15
d453 4
a456 3
        Pull    lr, NE
        ORRNES  pc, lr, #V_bit
        ADR     r0, ErrorBlock_ModuleTooOld
d461 2
a462 2
        Pull    "LR"
        ORRS    PC,LR,#V_bit
@


4.2
log
@Spinner branch merged.
Bandwidth limit for 7500FE fixed.
RO371Timings flag set to :LNOT:STB

Version 4.64. Tagged as 'Kernel-4_64'
@
text
@d225 6
d233 6
a239 7
        SUB     r12, r1, r0                             ; characters in buffer
02
        CMP     r12, #3                                 ; tab out to 3 characters
        SWICC   XOS_WriteI+" "
        EXIT    VS
        ADDCC   r12, r12, #1
        BCC     %BT02
@


4.1
log
@Initial revision
@
text
@d95 1
a95 1
 
d141 3
a143 2
     LDR     R1, =GeneralMOSBuffer
     MOV     R0, #0
d147 9
a155 3
     MOVVC   R0, R1
     MOVVC   R1, #24
     SWIVC   XOS_WriteN
d340 1
a340 1
        CMP     r0, #0 
d513 1
a513 1
GetVerNoFromHelpString ENTRY "r0, r4, r5, r12" 
@


4.1.4.1
log
@ 1 Simplify source by removing various long-standing compile flags
   and pre-Medusa h/w support

 2 Fix bug with Pages_Unsafe/Pages_Safe page moving for StrongARM
   (interrupt hole) - also better performance for StrongARM

 3 Improve perfromance of physical memory clear for StrongARM
   (make sure it uses burst write for STM)

 4 Suspend Chocolate task switching for StrongARM if SALDMIBbroken
   is TRUE
@
text
@d70 15
d96 1
d122 1
d127 6
d176 1
d178 3
d186 1
d190 6
d231 1
d236 5
d290 1
d295 5
d301 1
d304 3
d334 1
d336 1
d350 1
d371 1
d422 1
d428 16
@


4.1.4.2
log
@added support for Sparse dynamic areas
fixed performance disaster caused by naff API for Shrinkable areas
implemented clamps for dynamic areas max size
configured kernel to not own or create RAMFS area (needs new RAMFS)
AMBControl now uses system heap for space, not RMA
AMBControl enables Lazy task swapping if running on rev T or better SA
kernel now assumes there could be code above 64M
SWIS for limited 32 bit user code support implemented
Long command lines implemented (1k instead of 256)
Fast service call distribution implemented (uses Ursula module format)
*fx,*key etc now allow missing space before first parameter
*configure is reinstated (bug fix)
@
text
@a66 3
  [ LongCommandLines
             MOV    R2, #LongCLISize
  |
a67 1
  ]
@


4.1.4.3
log
@ - reestablish ownership of RAMFS dynamic area by kernel; this may be
   switched out again later, if new RAMFS takes over ownership
 - make ChangeDynamicArea allow re-entrancy slightly earlier on a shrink;
   now allows re-enter after page moves but before calling any post-shrink
   handler; this should fix problem with RAMFS and new FileCore (that now
   itself uses dynamic areas); needs testing once we pull a ROM together
 - Fix following bugs:
    - (new) kernel was keeping modules on active service chains during
      call to their finalise, now temporarily delinks them, as the API
      says it should; symptom eg. Zap 1.39 fails to quit (module Zap)
    - (longstanding) *help in a taskwindow was very dangerous (eg quit
      window, run other *help, start new window can all take out OS,
      by fundamentally cracking MessageTrans); fix: *help now does not
      keep MessageTrans descriptor on SVC stack (swapped out on pre-empt),
      now has re-entrancy guard, gives 'busy' error if reentered; minor
      infelicity is that busy message may be given on new *help after
      abandoning old one in taskwindow, but the next *help will work
    - (longstanding) *time could occasionally give a scrambled message on
      first call in a taskwindow (caused by multiple use of a general
      buffer)
@
text
@a122 6
 [ LongCommandLines
     ;take opportunity to fix occasional infelicity - re-use of GeneralMOSBuffer sometimes
     ;scrambles a time message the first time it happens in a Taskwindow
     ASSERT  LongCLISize >= 512
     ADD     R1, R1, #256
 ]
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Changes to cope with territories where %w3, %dy or %m3 are not the normal
lengths. To wit:

* Code variables Sys$Time, Sys$Date, Sys$Year don't assume field lengths.
* *Time doesn't assume OS_Word 14,0 output length is 24.
* OS_ConvertStandardDateAndTime now really does call the Territory Manager.
* OS_Word 14,0 no longer gives a maximum buffer length of 24 when calling
  OS_ConvertDateAndTime.
* OS_Word 15 doesn't assume reason code = length of string - attempt is
  made to terminate based on maximum string length, but callers really should
  be supplied control-terminated strings. Other offending modules (eg BASIC)
  have been fixed where spotted.
@
text
@d95 1
a95 1

d141 2
a142 3
     SUB     R13, R13, #8
     MOV     R1, R13
     MOV     R0, #3
d146 3
a148 9
     BVS     %FT01
     MOV     R0, #-1
     MOV     R1, R13
     LDR     R2, =GeneralMOSBuffer
     MOV     R3, #256
     ADRL    R4, TimeFormat
     SWI     XTerritory_ConvertDateAndTime
01   ADD     R13, R13, #8
     SWIVC   XOS_Write0
d333 1
a333 1
        CMP     r0, #0
d506 1
a506 1
GetVerNoFromHelpString ENTRY "r0, r4, r5, r12"
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
