head	4.5;
access;
symbols
	Kernel-6_15:4.5
	Kernel-6_14:4.5
	Kernel-6_01-3:4.5
	Kernel-6_13:4.5
	Kernel-6_12:4.5
	Kernel-6_11:4.5
	Kernel-6_10:4.5
	Kernel-6_09:4.5
	Kernel-6_08-4_129_2_10:4.5
	Kernel-6_08-4_129_2_9:4.5
	Kernel-6_08:4.5
	Kernel-6_07:4.5
	Kernel-6_06:4.5
	Kernel-6_05-4_129_2_8:4.5
	Kernel-6_05:4.5
	Kernel-6_04:4.5
	Kernel-6_03:4.5
	Kernel-6_01-2:4.5
	Kernel-6_01-4_146_2_1:4.5
	Kernel-6_02:4.5
	Kernel-6_01-1:4.5
	Kernel-6_01:4.5
	Kernel-6_00:4.5
	Kernel-5_99:4.5
	Kernel-5_98:4.5
	Kernel-5_97-4_129_2_7:4.5
	Kernel-5_97:4.5
	Kernel-5_96:4.5
	Kernel-5_95:4.5
	Kernel-5_94:4.5
	Kernel-5_93:4.5
	Kernel-5_92:4.5
	Kernel-5_91:4.5
	Kernel-5_90:4.5
	Kernel-5_89-4_129_2_6:4.5
	Kernel-5_89:4.5
	Kernel-5_88-4_129_2_5:4.5
	Kernel-5_88-4_129_2_4:4.5
	Kernel-5_88:4.5
	Kernel-5_87:4.5
	Kernel-5_86-4_129_2_3:4.5
	Kernel-5_86-4_129_2_2:4.5
	Kernel-5_86-4_129_2_1:4.5
	Kernel-5_86:4.5
	SMP:4.5.0.2
	SMP_bp:4.5
	Kernel-5_85:4.5
	Kernel-5_54-1:4.5
	Kernel-5_84:4.5
	Kernel-5_83:4.5
	Kernel-5_82:4.5
	Kernel-5_81:4.5
	Kernel-5_80:4.5
	Kernel-5_79:4.5
	Kernel-5_78:4.5
	Kernel-5_77:4.5
	Kernel-5_76:4.5
	Kernel-5_75:4.5
	Kernel-5_74:4.5
	Kernel-5_73:4.5
	Kernel-5_72:4.5
	Kernel-5_71:4.5
	Kernel-5_70:4.5
	Kernel-5_69:4.5
	Kernel-5_68:4.5
	Kernel-5_67:4.5
	Kernel-5_66:4.5
	Kernel-5_65:4.5
	Kernel-5_64:4.5
	Kernel-5_63:4.5
	Kernel-5_62:4.5
	Kernel-5_61:4.5
	Kernel-5_60:4.5
	Kernel-5_59:4.5
	Kernel-5_58:4.5
	Kernel-5_57:4.5
	Kernel-5_56:4.5
	Kernel-5_55:4.5
	Kernel-5_54:4.5
	Kernel-5_53:4.5
	Kernel-5_52:4.5
	Kernel-5_51:4.5
	Kernel-5_50:4.5
	Kernel-5_49:4.5
	HAL_merge:4.4.2.5
	Kernel-5_48:4.5
	Kernel-5_35-4_79_2_327:4.4.2.5
	Kernel-5_35-4_79_2_326:4.4.2.5
	Kernel-5_35-4_79_2_325:4.4.2.5
	Kernel-5_35-4_79_2_324:4.4.2.5
	Kernel-5_35-4_79_2_323:4.4.2.5
	Kernel-5_35-4_79_2_322:4.4.2.5
	Kernel-5_35-4_79_2_321:4.4.2.5
	Kernel-5_35-4_79_2_320:4.4.2.5
	Kernel-5_35-4_79_2_319:4.4.2.5
	Kernel-5_35-4_79_2_318:4.4.2.5
	Kernel-5_35-4_79_2_317:4.4.2.5
	Kernel-5_35-4_79_2_316:4.4.2.5
	Kernel-5_35-4_79_2_315:4.4.2.5
	Kernel-5_35-4_79_2_314:4.4.2.5
	Kernel-5_35-4_79_2_313:4.4.2.5
	Kernel-5_35-4_79_2_312:4.4.2.5
	Kernel-5_35-4_79_2_311:4.4.2.5
	Kernel-5_35-4_79_2_310:4.4.2.5
	Kernel-5_35-4_79_2_309:4.4.2.5
	Kernel-5_35-4_79_2_308:4.4.2.5
	Kernel-5_35-4_79_2_307:4.4.2.5
	Kernel-5_35-4_79_2_306:4.4.2.5
	Kernel-5_35-4_79_2_305:4.4.2.5
	Kernel-5_35-4_79_2_304:4.4.2.5
	Kernel-5_35-4_79_2_303:4.4.2.5
	Kernel-5_35-4_79_2_302:4.4.2.5
	Kernel-5_35-4_79_2_301:4.4.2.5
	Kernel-5_35-4_79_2_300:4.4.2.5
	Kernel-5_35-4_79_2_299:4.4.2.5
	Kernel-5_35-4_79_2_298:4.4.2.5
	Kernel-5_35-4_79_2_297:4.4.2.5
	Kernel-5_35-4_79_2_296:4.4.2.5
	Kernel-5_35-4_79_2_295:4.4.2.5
	Kernel-5_35-4_79_2_294:4.4.2.5
	Kernel-5_35-4_79_2_293:4.4.2.5
	Kernel-5_35-4_79_2_292:4.4.2.5
	Kernel-5_35-4_79_2_291:4.4.2.5
	Kernel-5_35-4_79_2_290:4.4.2.5
	Kernel-5_35-4_79_2_289:4.4.2.5
	Kernel-5_35-4_79_2_288:4.4.2.5
	Kernel-5_35-4_79_2_287:4.4.2.5
	Kernel-5_35-4_79_2_286:4.4.2.5
	Kernel-5_35-4_79_2_285:4.4.2.5
	Kernel-5_35-4_79_2_284:4.4.2.5
	Kernel-5_35-4_79_2_283:4.4.2.5
	Kernel-5_35-4_79_2_282:4.4.2.5
	Kernel-5_35-4_79_2_281:4.4.2.5
	Kernel-5_35-4_79_2_280:4.4.2.5
	Kernel-5_35-4_79_2_279:4.4.2.5
	Kernel-5_35-4_79_2_278:4.4.2.5
	Kernel-5_35-4_79_2_277:4.4.2.4
	Kernel-5_35-4_79_2_276:4.4.2.4
	Kernel-5_35-4_79_2_275:4.4.2.4
	Kernel-5_35-4_79_2_274:4.4.2.4
	Kernel-5_35-4_79_2_273:4.4.2.4
	Kernel-5_35-4_79_2_272:4.4.2.4
	Kernel-5_35-4_79_2_271:4.4.2.4
	Kernel-5_35-4_79_2_270:4.4.2.4
	Kernel-5_35-4_79_2_269:4.4.2.4
	Kernel-5_35-4_79_2_268:4.4.2.4
	Kernel-5_35-4_79_2_267:4.4.2.4
	Kernel-5_35-4_79_2_266:4.4.2.4
	Kernel-5_35-4_79_2_265:4.4.2.4
	Kernel-5_35-4_79_2_264:4.4.2.4
	Kernel-5_35-4_79_2_263:4.4.2.4
	Kernel-5_35-4_79_2_262:4.4.2.4
	Kernel-5_35-4_79_2_261:4.4.2.4
	Kernel-5_35-4_79_2_260:4.4.2.4
	Kernel-5_35-4_79_2_259:4.4.2.4
	Kernel-5_35-4_79_2_258:4.4.2.4
	Kernel-5_35-4_79_2_257:4.4.2.4
	Kernel-5_35-4_79_2_256:4.4.2.4
	Kernel-5_35-4_79_2_255:4.4.2.4
	Kernel-5_35-4_79_2_254:4.4.2.4
	Kernel-5_35-4_79_2_253:4.4.2.4
	Kernel-5_35-4_79_2_252:4.4.2.4
	Kernel-5_35-4_79_2_251:4.4.2.4
	Kernel-5_35-4_79_2_250:4.4.2.4
	Kernel-5_35-4_79_2_249:4.4.2.4
	Kernel-5_35-4_79_2_248:4.4.2.4
	Kernel-5_35-4_79_2_247:4.4.2.4
	Kernel-5_35-4_79_2_246:4.4.2.4
	Kernel-5_35-4_79_2_245:4.4.2.4
	Kernel-5_35-4_79_2_244:4.4.2.4
	Kernel-5_35-4_79_2_243:4.4.2.4
	Kernel-5_35-4_79_2_242:4.4.2.4
	Kernel-5_35-4_79_2_241:4.4.2.4
	Kernel-5_35-4_79_2_240:4.4.2.4
	Kernel-5_35-4_79_2_239:4.4.2.4
	Kernel-5_35-4_79_2_238:4.4.2.4
	Kernel-5_35-4_79_2_237:4.4.2.4
	Kernel-5_35-4_79_2_236:4.4.2.4
	Kernel-5_35-4_79_2_235:4.4.2.4
	Kernel-5_35-4_79_2_234:4.4.2.4
	Kernel-5_35-4_79_2_233:4.4.2.4
	Kernel-5_35-4_79_2_232:4.4.2.4
	Kernel-5_35-4_79_2_231:4.4.2.4
	Kernel-5_35-4_79_2_230:4.4.2.4
	Kernel-5_35-4_79_2_229:4.4.2.4
	Kernel-5_35-4_79_2_228:4.4.2.4
	Kernel-5_35-4_79_2_227:4.4.2.4
	Kernel-5_35-4_79_2_226:4.4.2.4
	Kernel-5_35-4_79_2_225:4.4.2.4
	Kernel-5_35-4_79_2_224:4.4.2.4
	Kernel-5_35-4_79_2_223:4.4.2.4
	Kernel-5_35-4_79_2_222:4.4.2.4
	Kernel-5_35-4_79_2_221:4.4.2.4
	Kernel-5_35-4_79_2_220:4.4.2.4
	Kernel-5_35-4_79_2_219:4.4.2.4
	Kernel-5_35-4_79_2_218:4.4.2.4
	Kernel-5_35-4_79_2_217:4.4.2.4
	Kernel-5_35-4_79_2_216:4.4.2.4
	Kernel-5_35-4_79_2_215:4.4.2.4
	Kernel-5_35-4_79_2_214:4.4.2.4
	Kernel-5_35-4_79_2_213:4.4.2.4
	Kernel-5_35-4_79_2_212:4.4.2.4
	Kernel-5_35-4_79_2_211:4.4.2.4
	Kernel-5_35-4_79_2_210:4.4.2.4
	Kernel-5_35-4_79_2_209:4.4.2.4
	Kernel-5_35-4_79_2_208:4.4.2.4
	Kernel-5_35-4_79_2_207:4.4.2.4
	Kernel-5_35-4_79_2_206:4.4.2.4
	Kernel-5_35-4_79_2_205:4.4.2.4
	Kernel-5_35-4_79_2_204:4.4.2.4
	Kernel-5_35-4_79_2_203:4.4.2.4
	Kernel-5_35-4_79_2_202:4.4.2.4
	Kernel-5_35-4_79_2_201:4.4.2.4
	Kernel-5_35-4_79_2_200:4.4.2.3
	Kernel-5_35-4_79_2_199:4.4.2.3
	Kernel-5_35-4_79_2_198:4.4.2.3
	Kernel-5_35-4_79_2_197:4.4.2.3
	Kernel-5_35-4_79_2_196:4.4.2.3
	Kernel-5_35-4_79_2_195:4.4.2.3
	Kernel-5_35-4_79_2_194:4.4.2.3
	Kernel-5_35-4_79_2_193:4.4.2.3
	Kernel-5_35-4_79_2_192:4.4.2.3
	Kernel-5_35-4_79_2_191:4.4.2.3
	Kernel-5_35-4_79_2_190:4.4.2.3
	Kernel-5_35-4_79_2_189:4.4.2.3
	Kernel-5_35-4_79_2_188:4.4.2.3
	Kernel-5_35-4_79_2_187:4.4.2.3
	Kernel-5_35-4_79_2_186:4.4.2.3
	Kernel-5_35-4_79_2_185:4.4.2.3
	Kernel-5_35-4_79_2_184:4.4.2.3
	Kernel-5_35-4_79_2_183:4.4.2.3
	Kernel-5_35-4_79_2_182:4.4.2.3
	Kernel-5_35-4_79_2_181:4.4.2.3
	Kernel-5_35-4_79_2_180:4.4.2.2
	Kernel-5_35-4_79_2_179:4.4.2.2
	Kernel-5_35-4_79_2_178:4.4.2.2
	Kernel-5_35-4_79_2_177:4.4.2.2
	Kernel-5_35-4_79_2_176:4.4.2.2
	Kernel-5_35-4_79_2_175:4.4.2.2
	Kernel-5_35-4_79_2_174:4.4.2.2
	Kernel-5_35-4_79_2_173:4.4.2.2
	Kernel-5_35-4_79_2_172:4.4.2.2
	Kernel-5_35-4_79_2_171:4.4.2.2
	Kernel-5_35-4_79_2_170:4.4.2.2
	Kernel-5_35-4_79_2_169:4.4.2.2
	Kernel-5_35-4_79_2_168:4.4.2.2
	Kernel-5_35-4_79_2_167:4.4.2.2
	Kernel-5_35-4_79_2_166:4.4.2.2
	Kernel-5_35-4_79_2_165:4.4.2.2
	RPi_merge:4.4.2.2
	Kernel-5_35-4_79_2_147_2_23:4.4.2.2
	Kernel-5_35-4_79_2_147_2_22:4.4.2.2
	Kernel-5_35-4_79_2_147_2_21:4.4.2.2
	Kernel-5_35-4_79_2_147_2_20:4.4.2.2
	Kernel-5_35-4_79_2_147_2_19:4.4.2.2
	Kernel-5_35-4_79_2_147_2_18:4.4.2.2
	Kernel-5_35-4_79_2_164:4.4.2.2
	Kernel-5_35-4_79_2_163:4.4.2.2
	Kernel-5_35-4_79_2_147_2_17:4.4.2.2
	Kernel-5_35-4_79_2_147_2_16:4.4.2.2
	Kernel-5_35-4_79_2_147_2_15:4.4.2.2
	Kernel-5_35-4_79_2_162:4.4.2.2
	Kernel-5_35-4_79_2_161:4.4.2.2
	Kernel-5_35-4_79_2_147_2_14:4.4.2.2
	Kernel-5_35-4_79_2_147_2_13:4.4.2.2
	Kernel-5_35-4_79_2_160:4.4.2.2
	Kernel-5_35-4_79_2_159:4.4.2.2
	Kernel-5_35-4_79_2_158:4.4.2.2
	Kernel-5_35-4_79_2_157:4.4.2.2
	Kernel-5_35-4_79_2_156:4.4.2.2
	Kernel-5_35-4_79_2_147_2_12:4.4.2.2
	Kernel-5_35-4_79_2_147_2_11:4.4.2.2
	Kernel-5_35-4_79_2_155:4.4.2.2
	Kernel-5_35-4_79_2_147_2_10:4.4.2.2
	Kernel-5_35-4_79_2_154:4.4.2.2
	Kernel-5_35-4_79_2_153:4.4.2.2
	Kernel-5_35-4_79_2_147_2_9:4.4.2.2
	Kernel-5_35-4_79_2_152:4.4.2.2
	Kernel-5_35-4_79_2_151:4.4.2.2
	Kernel-5_35-4_79_2_147_2_8:4.4.2.2
	Kernel-5_35-4_79_2_147_2_7:4.4.2.2
	Kernel-5_35-4_79_2_150:4.4.2.2
	Kernel-5_35-4_79_2_147_2_6:4.4.2.2
	Kernel-5_35-4_79_2_147_2_5:4.4.2.2
	Kernel-5_35-4_79_2_149:4.4.2.2
	Kernel-5_35-4_79_2_147_2_4:4.4.2.2
	Kernel-5_35-4_79_2_147_2_3:4.4.2.2
	Kernel-5_35-4_79_2_148:4.4.2.2
	Kernel-5_35-4_79_2_147_2_2:4.4.2.2
	Kernel-5_35-4_79_2_147_2_1:4.4.2.2
	RPi:4.4.2.2.0.2
	RPi_bp:4.4.2.2
	Kernel-5_35-4_79_2_98_2_52_2_1:4.4.4.1
	alees_Kernel_dev:4.4.4.1.0.2
	alees_Kernel_dev_bp:4.4.4.1
	Kernel-5_35-4_79_2_147:4.4.2.2
	Kernel-5_35-4_79_2_146:4.4.2.2
	Kernel-5_35-4_79_2_145:4.4.2.2
	Kernel-5_35-4_79_2_144:4.4.2.2
	Kernel-5_35-4_79_2_143:4.4.2.2
	Kernel-5_35-4_79_2_142:4.4.2.2
	Kernel-5_35-4_79_2_141:4.4.2.2
	Kernel-5_35-4_79_2_140:4.4.2.2
	Kernel-5_35-4_79_2_139:4.4.2.2
	Kernel-5_35-4_79_2_138:4.4.2.2
	Kernel-5_35-4_79_2_137:4.4.2.1
	Kernel-5_35-4_79_2_136:4.4.2.1
	Kernel-5_35-4_79_2_135:4.4.2.1
	Kernel-5_35-4_79_2_134:4.4.2.1
	Kernel-5_35-4_79_2_133:4.4.2.1
	Kernel-5_35-4_79_2_132:4.4.2.1
	Kernel-5_35-4_79_2_131:4.4.2.1
	Kernel-5_35-4_79_2_130:4.4.2.1
	Kernel-5_35-4_79_2_129:4.4.2.1
	Kernel-5_35-4_79_2_128:4.4.2.1
	Kernel-5_35-4_79_2_127:4.4.2.1
	Kernel-5_35-4_79_2_126:4.4.2.1
	Kernel-5_35-4_79_2_125:4.4.2.1
	Kernel-5_35-4_79_2_124:4.4.2.1
	Kernel-5_35-4_79_2_123:4.4.2.1
	Cortex_merge:4.4.4.1
	Kernel-5_35-4_79_2_122:4.4
	Kernel-5_35-4_79_2_98_2_54:4.4.4.1
	Kernel-5_35-4_79_2_98_2_53:4.4.4.1
	Kernel-5_35-4_79_2_98_2_52:4.4.4.1
	Kernel-5_35-4_79_2_98_2_51:4.4.4.1
	Kernel-5_35-4_79_2_98_2_50:4.4.4.1
	Kernel-5_35-4_79_2_98_2_49:4.4.4.1
	Kernel-5_35-4_79_2_98_2_48:4.4.4.1
	Kernel-5_35-4_79_2_121:4.4
	Kernel-5_35-4_79_2_98_2_47:4.4
	Kernel-5_35-4_79_2_120:4.4
	Kernel-5_35-4_79_2_98_2_46:4.4
	Kernel-5_35-4_79_2_119:4.4
	Kernel-5_35-4_79_2_98_2_45:4.4
	Kernel-5_35-4_79_2_98_2_44:4.4
	Kernel-5_35-4_79_2_118:4.4
	Kernel-5_35-4_79_2_98_2_43:4.4
	Kernel-5_35-4_79_2_117:4.4
	Kernel-5_35-4_79_2_116:4.4
	Kernel-5_35-4_79_2_98_2_42:4.4
	Kernel-5_35-4_79_2_115:4.4
	Kernel-5_35-4_79_2_98_2_41:4.4
	Kernel-5_35-4_79_2_98_2_40:4.4
	Kernel-5_35-4_79_2_114:4.4
	Kernel-5_35-4_79_2_98_2_39:4.4
	Kernel-5_35-4_79_2_98_2_38:4.4
	Kernel-5_35-4_79_2_113:4.4
	Kernel-5_35-4_79_2_112:4.4
	Kernel-5_35-4_79_2_98_2_37:4.4
	Kernel-5_35-4_79_2_98_2_36:4.4
	Kernel-5_35-4_79_2_98_2_35:4.4
	Kernel-5_35-4_79_2_98_2_34:4.4
	Kernel-5_35-4_79_2_98_2_33:4.4
	Kernel-5_35-4_79_2_98_2_32:4.4
	Kernel-5_35-4_79_2_98_2_31:4.4
	Kernel-5_35-4_79_2_98_2_30:4.4
	Kernel-5_35-4_79_2_98_2_29:4.4
	Kernel-5_35-4_79_2_98_2_28:4.4
	Kernel-5_35-4_79_2_98_2_27:4.4
	Kernel-5_35-4_79_2_98_2_26:4.4
	Kernel-5_35-4_79_2_111:4.4
	Kernel-5_35-4_79_2_98_2_25:4.4
	Kernel-5_35-4_79_2_98_2_24:4.4
	Kernel-5_35-4_79_2_98_2_23:4.4
	Kernel-5_35-4_79_2_110:4.4
	Kernel-5_35-4_79_2_98_2_22:4.4
	Kernel-5_35-4_79_2_109:4.4
	Kernel-5_35-4_79_2_98_2_21:4.4
	Kernel-5_35-4_79_2_98_2_20:4.4
	Kernel-5_35-4_79_2_108:4.4
	Kernel-5_35-4_79_2_107:4.4
	Kernel-5_35-4_79_2_98_2_19:4.4
	Kernel-5_35-4_79_2_98_2_18:4.4
	Kernel-5_35-4_79_2_98_2_17:4.4
	Kernel-5_35-4_79_2_98_2_16:4.4
	Kernel-5_35-4_79_2_98_2_15:4.4
	Kernel-5_35-4_79_2_106:4.4
	Kernel-5_35-4_79_2_105:4.4
	Kernel-5_35-4_79_2_104:4.4
	Kernel-5_35-4_79_2_98_2_14:4.4
	Kernel-5_35-4_79_2_98_2_13:4.4
	Kernel-5_35-4_79_2_98_2_12:4.4
	Kernel-5_35-4_79_2_98_2_11:4.4
	Kernel-5_35-4_79_2_98_2_10:4.4
	Kernel-5_35-4_79_2_98_2_9:4.4
	Kernel-5_35-4_79_2_103:4.4
	Kernel-5_35-4_79_2_102:4.4
	Kernel-5_35-4_79_2_98_2_8:4.4
	Kernel-5_35-4_79_2_98_2_7:4.4
	Kernel-5_35-4_79_2_98_2_6:4.4
	Kernel-5_35-4_79_2_98_2_5:4.4
	Kernel-5_35-4_79_2_98_2_4:4.4
	Kernel-5_35-4_79_2_101:4.4
	Kernel-5_35-4_79_2_100:4.4
	Kernel-5_35-4_79_2_99:4.4
	Kernel-5_35-4_79_2_98_2_3:4.4
	Kernel-5_35-4_79_2_98_2_2:4.4
	Kernel-5_35-4_79_2_98_2_1:4.4
	Cortex:4.4.0.4
	Cortex_bp:4.4
	Kernel-5_35-4_79_2_98:4.4
	Kernel-5_35-4_79_2_97:4.4
	Kernel-5_35-4_79_2_96:4.4
	Kernel-5_35-4_79_2_95:4.4
	Kernel-5_35-4_79_2_94:4.4
	Kernel-5_35-4_79_2_93:4.4
	Kernel-5_35-4_79_2_92:4.4
	Kernel-5_35-4_79_2_91:4.4
	Kernel-5_35-4_79_2_90:4.4
	Kernel-5_35-4_79_2_89:4.4
	Kernel-5_35-4_79_2_88:4.4
	Kernel-5_35-4_79_2_87:4.4
	Kernel-5_35-4_79_2_86:4.4
	Kernel-5_35-4_79_2_85:4.4
	Kernel-5_35-4_79_2_84:4.4
	Kernel-5_35-4_79_2_83:4.4
	Kernel-5_35-4_79_2_82:4.4
	Kernel-5_35-4_79_2_81:4.4
	Kernel-5_35-4_79_2_80:4.4
	Kernel-5_35-4_79_2_79:4.4
	Kernel-5_35-4_79_2_78:4.4
	Kernel-5_35-4_79_2_77:4.4
	RO_5_07:4.4
	Kernel-5_35-4_79_2_76:4.4
	Kernel-5_35-4_79_2_75:4.4
	Kernel-5_35-4_79_2_74:4.4
	Kernel-5_35-4_79_2_73:4.4
	Kernel-5_35-4_79_2_72:4.4
	Kernel-5_35-4_79_2_71:4.4
	Kernel-5_35-4_79_2_70:4.4
	Kernel-5_35-4_79_2_69:4.4
	Kernel-5_35-4_79_2_68:4.4
	Kernel-5_35-4_79_2_67:4.4
	Kernel-5_35-4_79_2_66:4.4
	Kernel-5_35-4_79_2_65:4.4
	Kernel-5_35-4_79_2_64:4.4
	Kernel-5_35-4_79_2_63:4.4
	Kernel-5_35-4_79_2_62:4.4
	Kernel-5_35-4_79_2_61:4.4
	Kernel-5_35-4_79_2_59:4.4
	Kernel-5_35-4_79_2_58:4.4
	Kernel-5_35-4_79_2_57:4.4
	Kernel-5_35-4_79_2_56:4.4
	Kernel-5_35-4_79_2_55:4.4
	Kernel-5_35-4_79_2_54:4.4
	Kernel-5_35-4_79_2_53:4.4
	Kernel-5_35-4_79_2_52:4.4
	Kernel-5_35-4_79_2_51:4.4
	Kernel-5_35-4_79_2_50:4.4
	Kernel-5_35-4_79_2_49:4.4
	Kernel-5_35-4_79_2_48:4.4
	Kernel-5_47:4.4
	Kernel-5_46-4_90_2_1:4.4
	nbingham_Kernel_FastNC_dev_bp:4.4
	nbingham_Kernel_FastNC_dev:4.4.0.6
	Kernel-5_46:4.4
	Kernel-5_45:4.4
	Kernel-5_35-4_79_2_47:4.4
	Kernel-5_35-4_79_2_46:4.4
	Kernel-5_35-4_79_2_45:4.4
	Kernel-5_35-4_79_2_44:4.4
	Kernel-5_35-4_79_2_25_2_2:4.4
	Kernel-5_35-4_79_2_43:4.4
	Kernel-5_35-4_79_2_42:4.4
	Kernel-5_35-4_79_2_41:4.4
	Kernel-5_35-4_79_2_40:4.4
	Kernel-5_35-4_79_2_39:4.4
	Kernel-5_35-4_79_2_38:4.4
	Kernel-5_35-4_79_2_37:4.4
	Kernel-5_35-4_79_2_36:4.4
	Kernel-5_35-4_79_2_35:4.4
	Kernel-5_35-4_79_2_34:4.4
	Kernel-5_35-4_79_2_33:4.4
	Kernel-5_35-4_79_2_32:4.4
	Kernel-5_44:4.4
	Kernel-5_35-4_79_2_25_2_1:4.4
	Kernel-5_43:4.4
	Kernel-5_35-4_79_2_31:4.4
	Kernel-5_35-4_79_2_30:4.4
	Kernel-5_35-4_79_2_29:4.4
	Kernel-5_35-4_79_2_28:4.4
	Kernel-5_35-4_79_2_27:4.4
	Kernel-5_35-4_79_2_26:4.4
	Kernel-5_42:4.4
	Kernel-5_41:4.4
	Kernel-5_40:4.4
	Kernel-5_35-4_79_2_25:4.4
	Kernel-5_35-4_79_2_24:4.4
	Kernel-5_35-4_79_2_23:4.4
	Kernel-5_35-4_79_2_22:4.4
	Kernel-5_35-4_79_2_21:4.4
	Kernel-5_35-4_79_2_20:4.4
	Kernel-5_35-4_79_2_19:4.4
	Kernel-5_35-4_79_2_18:4.4
	Kernel-5_35-4_79_2_17:4.4
	Kernel-5_35-4_79_2_16:4.4
	Kernel-5_35-4_79_2_15:4.4
	Kernel-5_35-4_79_2_14:4.4
	Kernel-5_39:4.4
	Kernel-5_13-4_52_2_1:4.2
	Bethany:4.2.0.2
	Kernel-5_38:4.4
	Kernel-5_35-4_79_2_13:4.4
	Kernel-5_35-4_79_2_12:4.4
	Kernel-5_35-4_79_2_11:4.4
	Kernel-5_37:4.4
	Kernel-5_35-4_79_2_10:4.4
	Kernel-5_35-4_79_2_9:4.4
	Kernel-5_36:4.4
	Kernel-5_35-4_79_2_8:4.4
	Kernel-5_35-4_79_2_7:4.4
	Kernel-5_35-4_79_2_6:4.4
	Kernel-5_35-4_79_2_5:4.4
	Kernel-5_35-4_79_2_4:4.4
	Kernel-5_35-4_79_2_3:4.4
	Kernel-5_35-4_79_2_2:4.4
	dellis_autobuild_BaseSW:4.4
	Kernel-5_35-4_79_2_1:4.4
	HAL:4.4.0.2
	Kernel-5_35:4.4
	Kernel-5_34:4.4
	Kernel-5_33:4.4
	Kernel-5_32:4.4
	Kernel-5_31:4.4
	Kernel-5_30:4.4
	Kernel-5_29:4.4
	Kernel-5_28:4.4
	Kernel-5_27:4.4
	Kernel-5_26:4.4
	Kernel-5_25:4.4
	Kernel-5_24:4.4
	Kernel-5_23:4.4
	Kernel-5_22:4.3
	sbrodie_sedwards_16Mar2000:4.2
	Kernel-5_21:4.2
	Kernel-5_20:4.2
	Kernel-5_19:4.2
	Kernel-5_18:4.2
	Kernel-5_17:4.2
	Kernel-5_16:4.2
	Kernel-5_15:4.2
	Kernel-5_14:4.2
	Kernel-5_13:4.2
	Kernel-5_12:4.2
	Kernel-5_11:4.2
	Kernel-5_10:4.2
	Kernel-5_09:4.2
	Kernel-5_08:4.2
	Kernel-5_07:4.2
	Kernel-5_06:4.2
	Kernel-5_05:4.2
	Kernel-5_04:4.2
	Kernel-5_03:4.2
	Kernel-5_02:4.2
	Kernel-5_01:4.2
	Kernel-5_00:4.2
	Kernel-4_99:4.2
	Kernel-4_98:4.2
	Kernel-4_97:4.2
	Kernel-4_96:4.2
	Kernel-4_95:4.2
	Kernel-4_94:4.2
	Kernel-4_93:4.2
	Kernel-4_92:4.2
	Kernel-4_91:4.2
	Kernel-4_90:4.2
	dcotton_autobuild_BaseSW:4.4
	Kernel-4_89:4.2
	Kernel-4_88:4.2
	Kernel-4_87:4.2
	Kernel-4_86:4.2
	Kernel-4_85:4.2
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1.4.2
	Kernel-4_84:4.2
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1.4.2
	Ursula_RiscPC_bp:4.1.4.2
	Kernel-4_83:4.2
	Kernel-4_82:4.1
	Kernel-4_81:4.1
	Kernel-4_80:4.1
	Kernel-4_79:4.1
	Kernel-4_78:4.1
	Kernel-4_77:4.1
	Kernel-4_76:4.1
	Kernel-4_75:4.1
	Kernel-4_74:4.1
	Kernel-4_73:4.1
	Kernel-4_72:4.1
	Kernel-4_71:4.1
	Kernel-4_70:4.1
	Kernel-4_69:4.1
	Kernel-4_68:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.2
	Ursula_RiscPC:4.1.4.2.0.2
	Kernel-4_63-1_1_2_5:4.1.7.1
	Kernel-4_63-1_1_2_4:4.1.7.1
	Kernel-4_67:4.1
	Kernel-4_66:4.1
	Kernel-4_63-1_1_2_3:4.1.7.1
	Kernel-4_65:4.1
	Ursula_merge:4.1
	Kernel-4_64:4.1
	mstphens_Kernel-3_81:4.1.4.2
	Kernel-4_63-1_1_2_2:4.1.7.1
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1.4.2
	UrsulaBuild_FinalSoftload:4.1.4.2
	rthornb_UrsulaBuild-12Aug1998:4.1.4.2
	aglover_UrsulaBuild-05Aug1998:4.1.4.2
	rthornb_UrsulaBuild-29Jul1998:4.1.4.2
	rthornb_UrsulaBuild-22Jul1998:4.1.4.2
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.4.2
	rthornb_UrsulaBuild-07Jul1998:4.1.4.2
	rthornb_UrsulaBuild-17Jun1998:4.1.4.2
	rthornb_UrsulaBuild-03Jun1998:4.1.4.2
	rthornb_UrsulaBuild-27May1998:4.1.4.2
	mstphens_Kernel-3_80:4.1.4.2
	rthornb_UrsulaBuild-21May1998:4.1.4.2
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.4.2
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.5
date	2016.06.30.20.08.09;	author jlee;	state Exp;
branches;
next	4.4;
commitid	IWoXxARWeuLDOwcz;

4.4
date	2000.04.04.14.27.34;	author kbracey;	state Exp;
branches
	4.4.2.1
	4.4.4.1;
next	4.3;

4.3
date	2000.03.23.16.40.47;	author bavison;	state Exp;
branches;
next	4.2;

4.2
date	99.08.17.11.16.25;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.41.25;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.4.2.1
date	2011.11.26.21.11.17;	author jlee;	state Exp;
branches;
next	4.4.2.2;
commitid	cI3W0zbtALQG6TIv;

4.4.2.2
date	2012.02.25.16.19.37;	author jlee;	state Exp;
branches;
next	4.4.2.3;
commitid	ad3WnPntkzrizyUv;

4.4.2.3
date	2013.01.17.08.46.05;	author rsprowson;	state Exp;
branches;
next	4.4.2.4;
commitid	9ol0RyjqkkO4yxAw;

4.4.2.4
date	2013.11.16.12.30.16;	author rsprowson;	state Exp;
branches;
next	4.4.2.5;
commitid	9tijEFmxNuG63vdx;

4.4.2.5
date	2015.08.11.19.52.12;	author jlee;	state Exp;
branches;
next	;
commitid	guQuty8Y0dpf9Twy;

4.4.4.1
date	2011.08.08.23.28.26;	author jlee;	state Exp;
branches;
next	;
commitid	D7rzILnwRRSXoLuv;

4.1.1.1
date	96.11.05.09.41.25;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.01.15;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.09.09.13.33.37;	author mstphens;	state Exp;
branches;
next	4.1.4.2;

4.1.4.2
date	97.12.08.14.34.43;	author mstphens;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.11.49;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.03.59;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        TTL   => TickEvents

; This file revised by TMD 28-Jan-94 to
; a) Correct internals to time n ticks not n+1
; b) Change externals to add 1 to compensate for user subtracting 1
; c) Fix RemoveTickerEvent to add this node's time onto the next one
; These fix bug MED-02498.

; There are two (centisecond) ticker SWIs :
; SWI CallAfter calls the given address once, after the given number of ticks
; SWI CallEvery  "     "    "    "      every N centiseconds

; In :  R0 is unsigned number of centiseconds
;       R1 is address to call
;       R2 is value of R12 to pass to code

CallEvery_Code
        ADD     r10, r0, #1             ; compensate for n+1 bug
        B       TickTockCommon
CallAfter_Code   ROUT
        MOV     r10, #0
TickTockCommon
        Push    "r0-r3, lr"
        ADD     r14, r0, #1024
        CMP     r14, #1024
        BLS     %FT99                   ; reject 0 and >= &FFFFFC00

  [ ChocolateSysHeap
        ASSERT  ChocolateTKBlocks = ChocolateBlockArrays + 8
        LDR     r3,=ZeroPage+ChocolateBlockArrays
        LDR     r3,[r3,#8]
        BL      ClaimChocolateBlock
        MOVVS   r3, #TickNodeSize
        BLVS    ClaimSysHeapNode
  |
        MOV     r3, #TickNodeSize
        BL      ClaimSysHeapNode
  ]
        BVS     %FT97

        MOV     r3, r2
        LDMFD   stack, {r0-r2}
        STR     r1,  [r3, #TickNodeAddr]
        STR     r10, [r3, #TickNodeRedo]
        STR     r2,  [r3, #TickNodeR12]
        MOV     r1, r3

        ADD     r0, r0, #1              ; compensate for n+1 bug
        BL      InsertTickerEvent

        Pull    "r0-r3, lr"
        ExitSWIHandler

99      ADR     r0, ErrorBlock_BadTime
      [ International
        BL      TranslateError
      ]
97
        ADD     sp, sp, #1*4            ; junk old R0
        Pull    "r1-r3, lr"
        B       SLVK_SetV

        MakeErrorBlock BadTime


; Data structure :
; chain of nodes
;
;       +----------------------------------+
;       |   Link to next node or 0         |
;       +----------------------------------+
;       |   Reload flag                    |
;       +----------------------------------+
;       |   Address to call                |
;       +----------------------------------+
;       |   Value of R12                   |
;       +----------------------------------+
;       |   No of ticks to go before call  |
;       +----------------------------------+
;
; The head node's no of ticks is decremented until 0
;  Subsequent nodes contain the no of ticks to wait when they reach the
;  chain head.
; If the reload flag is non-0, the node is reinserted at that number of ticks
; down the chain after every use.

             ^  0
TickNodeLink #  4        ;
TickNodeRedo #  4        ; These are together
TickNodeAddr #  4        ;
TickNodeR12  #  4        ;  so can LDM them

TickNodeLeft #  4

TickNodeSize #  0

InsertTickerEvent   ROUT
; R1 is node pointer, R0 ticks to wait
; R10-R12 corrupted

        Push    "r0,lr"
        PHPSEI  r14
        LDR     r10, =ZeroPage+TickNodeChain
01
        MOV     r11, r10
        LDR     r10, [r11, #TickNodeLink]
        CMP     r10, #0
        BEQ     %FT02                           ; end of chain
        LDR     r12,  [r10, #TickNodeLeft]
        CMP     r12, r0
        SUBLS   r0, r0, r12
        BLS     %BT01                           ; node R10 is earlier (or equal) to node R1 
        SUB     r12, r12, r0
        STR     r12, [r10, #TickNodeLeft]
02
        STR     r1, [r11, #TickNodeLink]
        STR     r0, [r1, #TickNodeLeft]
        STR     r10, [r1, #TickNodeLink]

        PLP     r14
        Pull    "r0,pc"

ProcessTickEventChain  ROUT
; R0-R3, R10-R12 corruptible
        LDR     r3, =ZeroPage+TickNodeChain

        LDR     r1, [r3, #TickNodeLink]
        CMP     r1, #0
        MOVEQ   pc, lr                          ; no timers

        LDR     r2, [r1, #TickNodeLeft]
        SUBS    r2, r2, #1
        STR     r2, [r1, #TickNodeLeft]
        MOVHI   pc, lr                          ; nothing to call yet (HI to cope with ordinary 1 -> 0 transition, and 0 -> -1 transition if re-entered while processing two or more events which are due to fire at the same time)

        Push    "lr"                            ; save IRQ_lr
        MSR     CPSR_c, #SVC32_mode+I32_bit     ; switch to SVC mode, IRQ's off
        Push    "lr"                            ; save SVC_lr
01
        LDMIA   r1, {r2, r10, r11, r12}         ; load next ptr, redo state,
                                                ;     address and R12val
        STR     r2, [r3]                        ; de-link from chain
      [ NoARMv5
        MOV     lr, pc
        MOV     pc, r11                         ; call event handler
      |
        BLX     r11                             ; call event handler
      ]

        MOVS    r0, r10                         ; CallEvery?
        BEQ     %FT05

        BL      InsertTickerEvent               ; yes, then re-insert timer
        B       %FT10

05
; Return spent ticker node to heap

        MSR     CPSR_c, #SVC32_mode             ; IRQ's ON for the  S L O W  bit
        MOV     r2, r1                          ; R2->node to free
  [ ChocolateSysHeap
        ASSERT  ChocolateTKBlocks = ChocolateBlockArrays + 8
        LDR     r1,=ZeroPage+ChocolateBlockArrays
        LDR     r1,[r1,#8]
        BL      FreeChocolateBlock
        LDRVS   r1, =SysHeapStart
        MOVVS   r0, #HeapReason_Free
        SWIVS   XOS_Heap
  |
        LDR     r1, =SysHeapStart
        MOV     r0, #HeapReason_Free
        SWI     XOS_Heap
  ]

; Check for more events at the same level in the list
10
        MSR     CPSR_c, #SVC32_mode+I32_bit     ; IRQ's off again (after returning node to heap, or after naughty CallEvery exits with IRQs on)

        LDR     r1, [r3, #TickNodeLink]         ; get top of list
        CMP     r1, #0                          ; list empty?
        BEQ     %FT02                           ; yes then exit

        LDR     r0, [r1, #TickNodeLeft]
        CMP     r0, #0                          ; zero time delta?
        BEQ     %BT01                           ; yes then jump
02
        Pull    "lr"                            ; restore SVC_lr
        MSR     CPSR_c, #IRQ32_mode+I32_bit     ; back to IRQ mode
        Pull    "pc"                            ; pull IRQ_lr from IRQ stack

RemoveTickerEvent_Code
; R0 is address of code to remove, R1 the R12 value
        MSR     CPSR_c, #SVC32_mode+I32_bit
        LDR     r10, =ZeroPage+TickNodeChain
01
        LDR     r11, [r10]
        CMP     r11, #0
        ExitSWIHandler EQ
        LDR     r12, [r11, #TickNodeAddr]
        CMP     r12, r0
        LDREQ   r12, [r11, #TickNodeR12]
        CMPEQ   r12, r1
        MOVNE   r10, r11
        BNE     %BT01

        Push    "r0-r2, lr"
        MOV     r2, r11
        LDR     r11, [r11, #TickNodeLink]       ; prev->link = this->link
        STR     r11, [r10]

        TEQ     r11, #0                         ; if next node exists
        LDRNE   r14, [r11, #TickNodeLeft]       ; then add our time-to-go onto its
        LDRNE   r0, [r2, #TickNodeLeft]
        ADDNE   r14, r14, r0
        STRNE   r14, [r11, #TickNodeLeft]

  [ ChocolateSysHeap
        ASSERT  ChocolateTKBlocks = ChocolateBlockArrays + 8
        LDR     r1,=ZeroPage+ChocolateBlockArrays
        LDR     r1,[r1,#8]
        BL      FreeChocolateBlock
        BLVS    FreeSysHeapNode
  |
        BL      FreeSysHeapNode
  ]
        Pull    "r0-r2, lr"
        B       %BT01

ReadMetroGnome
        LDR     r0, =ZeroPage
        LDR     r0, [r0, #MetroGnome]
        ExitSWIHandler

        LTORG

        END
@


4.4
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@d20 1
a20 1
; c) Fix RemoveTickerEvent to add this nodes time onto the next one
d27 1
a27 1
; In :  R0 is (signed) number of centiseconds
d31 3
d38 3
a40 2
        CMP     r0, #0
        BLE     %FT99
d44 1
a44 1
        MOV     r3,#ChocolateBlockArrays
a78 3
CallEvery_Code
        ADD     r10, r0, #1             ; compensate for n+1 bug
        B       TickTockCommon
d115 3
a117 3
        Push    "r0,r2"
        PHPSEI  r2
        LDR     r10, =TickNodeChain
d124 3
a126 3
        SUBS    r0, r0, r12
        BGE     %BT01
        ADD     r0, r0, r12
d134 2
a135 3
        PLP     r2
        Pull    "r0,r2"
        MOV     pc, lr
d139 1
a139 1
        LDR     r3, =TickNodeChain
d148 1
a148 1
        MOVGT   pc, lr                          ; nothing to call yet (was MOVPL)
d151 1
a151 3
 [ TickIrqReenter
        WritePSRc SVC_mode+I_bit, r10           ; switch to SVC mode, IRQ's off
        NOP
a152 1
 ]
d157 1
d160 3
d164 2
a165 3
        LDR     r0, [r1, #TickNodeRedo]
        CMP     r0, #0                          ; CallEvery?
        BLE     %FT05
d173 1
a173 1
        WritePSRc SVC_mode, r2                  ; IRQ's ON for the  S L O W  bit
d177 1
a177 1
        MOV     r1,#ChocolateBlockArrays
a187 1
        WritePSRc SVC_mode+I_bit, r1            ; IRQ's off again
d189 1
a189 1
; Check for more events down the list
d191 2
d198 2
a199 2
        CMP     r0, #0                          ; timed out?
        BLE     %BT01                           ; yes then jump
d202 1
a202 2
        WritePSRc IRQ_mode+I_bit, r10           ; back to IRQ mode
        NOP
d207 2
a208 2
        WritePSRc SVC_mode+I_bit, r10
        LDR     r10, =TickNodeChain
d233 1
a233 1
        MOV     r1,#ChocolateBlockArrays
d244 1
a244 1
        MOV     r0, #0
@


4.4.2.1
log
@Merge Cortex kernel into HAL branch
Detail:
  This is a full merge of the Cortex kernel back into the HAL branch. Since the Cortex kernel is/was just a superset of the HAL branch, at this point in time both branches are identical.
  Main features the HAL branch gains from this merge:
  - ARMv6/ARMv7 support
  - High processor vectors/zero page relocation support
  - objasm 4 warning fixes
  - Improved HAL related functionality:
    - Support for HAL-driven RTCs instead of kernel-driven IIC based ones
    - Support for arbitrary size machine IDs
    - Support for multiple IIC busses
    - Support for any HAL size, instead of hardcoded 64k size
    - Probably some other stuff I've forgotten
  - Probably a few bug fixes here and there
Admin:
  Tested on BB-xM & Iyonix.
  Was successfully flashed to ROM on an Iyonix to test the Cortex branch implementation of the 2010 RTC bug fix.
  IOMD build untested - but has been known to work in the past.


Version 5.35, 4.79.2.123. Tagged as 'Kernel-5_35-4_79_2_123'
@
text
@d40 1
a40 1
        LDR     r3,=ZeroPage+ChocolateBlockArrays
d116 1
a116 1
        LDR     r10, =ZeroPage+TickNodeChain
d139 1
a139 1
        LDR     r3, =ZeroPage+TickNodeChain
d177 1
a177 1
        LDR     r1,=ZeroPage+ChocolateBlockArrays
d208 1
a208 1
        LDR     r10, =ZeroPage+TickNodeChain
d233 1
a233 1
        LDR     r1,=ZeroPage+ChocolateBlockArrays
d244 1
a244 1
        LDR     r0, =ZeroPage
@


4.4.2.2
log
@Add compressed ROM support. Make more use of ARMv5+ instructions. Other misc tweaks.
Detail:
  hdr/OSEntries, s/HAL, s/Kernel - Add compressed ROM support.
  With the current scheme, a compressed ROM will have everything except the HAL and kernel compressed.
  During the keyboard scan period the kernel will allocate some temporary decompression workspace and call the decompression stub that was appended to the ROM.
  The decompression stub is expected to perform in-place decompression of the ROM. Once decompression is complete the workspace will be freed and the page tables updated to make the ROM image readonly.
  It's the HAL's responsibility to make sure any compressed ROM is located in an area of physically contiguous RAM large enough to hold the uncompressed image.
  More info here: http://www.riscosopen.org/wiki/documentation/show/Compressed%20ROMs
  Makefile, h/OSEntries - Add C export of hdr/OSEntries
  hdr/HALDevice - Add device ID for Tungsten video device. Convert tabs to spaces for consistency.
  hdr/HALEntries, s/NewReset - Moved KbdFlag_* definitions to hdr/HALEntries so HALs can use them in their keyboard scan code
  s/ArthurSWIs, S/HAL, s/HeapSort, s/Kernel, s/MemInfo, s/Middle, s/NewIRQs, s/TickEvents, s/vdu/vdugrafb - Make use of BLX, BFI and long multiplies if the CPU supports them. Don't support SWI calls from thumb mode if the CPU doesn't support thumb.
  s/HAL - Made the LDMIA in Init_MapInRAM more sensible (register order was backwards). The old code did work, but wasn't doing what the comments described. Removed unused/unfinished HAL_Write0 function. Improve RISCOS_LogToPhys to check L1PT for any section mappings if the logical_to_physical call fails
  s/ModHand - Save one instruction by using ADR instead of MOV+ADD to compute lr
  s/NewReset, s/PMF/key - Pass L1PT to HAL_Reset to allow machines without hardware reset (e.g. IOMD) to perform resets by manually disabling the MMU and restarting the ROM
  s/vdu/vdudriver, s/vdu/vdugrafv - Use GVEntry macro borrowed from NVidia module for setting up the GraphicsV jump table. Make GraphicsV_ReadPaletteEntry call HAL_Video_ReadPaletteEntry if left unclaimed. Fixup GV_Render to only call HAL_Video_Render if the HAL call is implemented.
Admin:
  Tested with OMAP3, IOMD & Tungsten ROMs/softloads.


Version 5.35, 4.79.2.138. Tagged as 'Kernel-5_35-4_79_2_138'
@
text
@a159 1
      [ NoARMv5
a161 3
      |
        BLX     r11                             ; call event handler
      ]
@


4.4.2.3
log
@Extend possible range of OS_Call[After|Every]
OS_CallAfter and OS_CallEvery were treating the delay in R0 as a signed number, limiting its possible range. The PRM didn't require this (a -ve delay doesn't make sense, so implicitly times are unsigned), reworked to allow times up to 0xFFFFFBFF.
Aside:
  OSLib exports these functions as 'int', but it doesn't seem to make a distinction for unsigned versus signed anyway (other unsigned arguments are plain int too)
  The 'callx' library was already prototyped with unsigned times back in 1997

Added comment to hdr/Options about FirstUnpluggableModule - since the keyboard and mouse drivers got moved out of the kernel in 3.50, the original intent (to not allow you to unplug vital modules) has long since been lost, and really the only use of this value is to save 8 bits of CMOS frugal bits.

Version 5.35, 4.79.2.181. Tagged as 'Kernel-5_35-4_79_2_181'
@
text
@d20 1
a20 1
; c) Fix RemoveTickerEvent to add this node's time onto the next one
d27 1
a27 1
; In :  R0 is unsigned number of centiseconds
a30 3
CallEvery_Code
        ADD     r10, r0, #1             ; compensate for n+1 bug
        B       TickTockCommon
d35 2
a36 3
        ADD     r14, r0, #1024
        CMP     r14, #1024
        BLS     %FT99                   ; reject 0 and >= &FFFFFC00
d75 3
d114 2
a115 2
        Push    "r0,lr"
        PHPSEI  r14
d123 3
a125 3
        CMP     r12, r0
        SUBLS   r0, r0, r12
        BLS     %BT01                           ; node R10 is earlier (or equal) to node R1 
d133 3
a135 2
        PLP     r14
        Pull    "r0,pc"
d148 1
a148 1
        MOVNE   pc, lr                          ; nothing to call yet (was MOVPL)
d169 1
a169 1
        BEQ     %FT05
d194 1
a194 1
; Check for more events at the same level in the list
d201 2
a202 2
        CMP     r0, #0                          ; zero time delta?
        BEQ     %BT01                           ; yes then jump
@


4.4.2.4
log
@Little kernel patches
hdr/ExportVals: the copyright header insertion got a bit confused with some of the file contents
TickEvents.s: a bad merge from Ursula branch 4.1.4.2 to trunk 4.2 left behind unmatched push/pull where TickIrqReenter had been removed
hdr/Options & NewIRQs.s: collapse remaining TickIrqReenter switches
osinit.s: when ZeroPage is in a top bit set address only the last buffer pointer would get zeroed

Tip offs from eagle eyed Tim Baldwin.

Version 5.35, 4.79.2.201. Tagged as 'Kernel-5_35-4_79_2_201'
@
text
@d151 1
d155 1
@


4.4.2.5
log
@Fix some re-entrancy issues. Minor optimisations.
Detail:
  s/TickEvents:
  - Change initial TickNodeLeft check in ProcessTickEventChain to exit on HI rather than NE. This fixes a case where the ticker event chain can become corrupted if ProcessTickEventChain is re-entered while in the middle of processing multiple nodes which are due to fire at the same time (after initial node is removed from the list, head node will be left with a TickNodeLeft value of 0)
  - Move "IRQ's off again" PSR write to be after the 10 label, to ensure that IRQs are off before we examine/process the next node (naughty CallEvery may have exited with IRQs enabled)
  - Stop using crusty old WritePSRc macro (currently generates 4 instructions for something that should be 1)
  - Also get rid of ARM2-era NOPs
  - Optimise CallEvery check to be MOVS rather than LDR + CMP
Admin:
  Tested on Pandaboard
  Should fix problem reported on forums with apparent wrap-around of TickNodeLeft value of first node: https://www.riscosopen.org/forum/forums/5/topics/3544
  May also fix other ticker corruption problems: https://www.riscosopen.org/forum/forums/4/topics/2708


Version 5.35, 4.79.2.278. Tagged as 'Kernel-5_35-4_79_2_278'
@
text
@d148 1
a148 1
        MOVHI   pc, lr                          ; nothing to call yet (HI to cope with ordinary 1 -> 0 transition, and 0 -> -1 transition if re-entered while processing two or more events which are due to fire at the same time)
d151 2
a152 1
        MSR     CPSR_c, #SVC32_mode+I32_bit     ; switch to SVC mode, IRQ's off
d165 2
a166 1
        MOVS    r0, r10                         ; CallEvery?
d175 1
a175 1
        MSR     CPSR_c, #SVC32_mode             ; IRQ's ON for the  S L O W  bit
d190 1
a193 2
        MSR     CPSR_c, #SVC32_mode+I32_bit     ; IRQ's off again (after returning node to heap, or after naughty CallEvery exits with IRQs on)

d203 2
a204 1
        MSR     CPSR_c, #IRQ32_mode+I32_bit     ; back to IRQ mode
d209 1
a209 1
        MSR     CPSR_c, #SVC32_mode+I32_bit
@


4.4.4.1
log
@Add zero page relocation support
Detail:
  A whole mass of changes to add high processor vectors + zero page relocation support to the Cortex branch of the kernel
  At the moment the code can only cope with two ZeroPage locations, &0 and &FFFF0000. But with a bit more tweaking those restrictions can probably be lifted, allowing ZeroPage to be hidden at almost any address (assuming it's fixed at compile time). If I've done my job right, these restrictions should all be enforced by asserts.
  There's a new option, HiProcVecs, in hdr/Options to control whether high processor vectors are used. When enabling it and building a ROM, remember:
  * FPEmulator needs to be built with the FPEAnchor=High option specified in the components file (not FPEAnchorType=High as my FPEmulator commit comments suggested)
  * ShareFS needs unplugging/removing since it can't cope with it yet
  * Iyonix users will need to use the latest ROOL boot sequence, to ensure the softloaded modules are compatible (OMAP, etc. don't really softload much so they're OK with older sequences)
  * However VProtect also needs patching to fix a nasty bug there - http://www.riscosopen.org/tracker/tickets/294
  The only other notable thing I can think of is that the ProcessTransfer code in s/ARM600 & s/VMSAv6 is disabled if high processor vectors are in use (it's fairly safe to say that code is obsolete in HAL builds anyway?)
  Fun challenge for my successor: Try setting ZeroPage to &FFFF00FF (or similar) so its value can be loaded with MVN instead of LDR. Then use positive/negative address offsets to access the contents.
  File changes:
  - hdr/ARMops - Modified ARMop macro to take the ZeroPage pointer as a parameter instead of 'zero'
  - hdr/Copro15ops - Corrected $quick handling in myISB macro
  - hdr/Options - Added ideal setting for us to use for HiProcVecs
  - s/AMBControl/allocate, s/AMBControl/growp, s/AMBControl/mapslot, s/AMBControl/memmap, s/AMBControl/service, s/AMBControl/shrinkp, s/Arthur2, s/Arthur3, s/ArthurSWIs, s/ChangeDyn, s/ExtraSWIs, s/HAL, s/HeapMan, s/Kernel, s/MemInfo, s/Middle, s/ModHand, s/MoreSWIs, s/MsgCode, s/NewIRQs, s/NewReset, s/Oscli, s/PMF/buffer, s/PMF/IIC, s/PMF/i2cutils, s/PMF/key, s/PMF/mouse, s/PMF/osbyte, s/PMF/oseven, s/PMF/osinit, s/PMF/osword, s/PMF/oswrch, s/SWINaming, s/Super1, s/SysComms, s/TickEvents, s/Utility, s/vdu/vdu23, s/vdu/vdudriver, s/vdu/vdugrafl, s/vdu/vdugrafv, s/vdu/vdupalxx, s/vdu/vdupointer, s/vdu/vduswis, s/vdu/vduwrch - Lots of updates to deal with zero page relocation
  - s/ARM600 - UseProcessTransfer option. Zero page relocation support. Deleted pre-HAL ClearPhysRAM code to tidy the file up a bit.
  - s/ARMops - Zero page relocation support. Set CPUFlag_HiProcVecs when high vectors are in use.
  - s/KbdResPC - Disable compilation of dead code
  - s/VMSAv6 - UseProcessTransfer option. Zero page relocation support.
Admin:
  Tested with OMAP & Iyonix ROM softloads, both with high & low zero page.
  High zero page hasn't had extensive testing, but boot sequence + ROM apps seem to work.


Version 5.35, 4.79.2.98.2.48. Tagged as 'Kernel-5_35-4_79_2_98_2_48'
@
text
@d40 1
a40 1
        LDR     r3,=ZeroPage+ChocolateBlockArrays
d116 1
a116 1
        LDR     r10, =ZeroPage+TickNodeChain
d139 1
a139 1
        LDR     r3, =ZeroPage+TickNodeChain
d177 1
a177 1
        LDR     r1,=ZeroPage+ChocolateBlockArrays
d208 1
a208 1
        LDR     r10, =ZeroPage+TickNodeChain
d233 1
a233 1
        LDR     r1,=ZeroPage+ChocolateBlockArrays
d244 1
a244 1
        LDR     r0, =ZeroPage
@


4.3
log
@  Monotonic time was returned with a 1 cs error in certain circumstances.
Detail:
  Most of the centisecond timers were incremented very early in the Timer0
  interrupt routine, but MetroGnome was incremented after we had called
  TickerV. Routines on TickerV are allowed to enable interrupts, so any
  interrupt routines that use OS_ReadMonotonicTime and IRQRQA are unable to
  accurately determine if the monotonic time is one tick out-of-date or not.
  MetroGnome is now incremented with the other timers.
Admin:
  Tested with the timer code in STB-400 MPEGDriver.

Version 5.22. Tagged as 'Kernel-5_22'
@
text
@a68 1
 [ Fix14
a70 3
 |
        Pull    "r0-r3, lr"
 ]
d114 2
a115 4
        Push    "r0"
        MOV     r10, pc
        ORR     r10, r10, #I_bit
        TEQP    r10, #0
d133 3
a135 2
        Pull    "r0"
        MOVS    pc, lr
d152 1
a152 1
        TEQP    pc, #SVC_mode+I_bit             ; switch to SVC mode, IRQ's off
d165 4
a168 2
        BLGT    InsertTickerEvent               ; yes, then re-insert timer
        BGT     %FT10
d170 1
d173 1
a173 1
        TEQP    pc, #SVC_mode                   ; IRQ's ON for the  S L O W  bit
d188 1
a188 1
        TEQP    pc, #SVC_mode+I_bit             ; IRQ's off again
d201 1
a201 1
        TEQP    pc, #IRQ_mode+I_bit             ; back to IRQ mode
d207 1
a207 1
        TEQP    pc, #SVC_mode+I_bit
@


4.2
log
@Ursula ChocolateSysHeap and 128-entry SWI hash table incorporated.

Version 4.83. Tagged as 'Kernel-4_83'
@
text
@a145 4
        LDR     r1, [r3, #MetroGnome-TickNodeChain]
        ADD     r1, r1, #1
        STR     r1, [r3, #MetroGnome-TickNodeChain]

@


4.1
log
@Initial revision
@
text
@d38 8
d48 1
a178 1
 [ TickIrqReenter
d181 9
d193 1
a209 19
 |
        TEQP    pc, #SVC_mode+I_bit
        MOV     r0, #HeapReason_Free
        Push    "r2, lr"
        MOV     r2, r1
        LDR     r1, =SysHeapStart
        SWI     XOS_Heap
        Pull    "r2, lr"
        TEQP    pc, #IRQ_mode+I_bit
10
        CMP     r2, #0                          ; end of list?
        BEQ     %FT02                           ; yes then exit
        LDR     r0, [r2, #TickNodeLeft]
        CMP     r0, #0
        MOVLE   r1, r2
        BLE     %BT01
02
        Pull    "pc"
 ]
d237 7
d245 1
@


4.1.4.1
log
@ 1 Simplify source by removing various long-standing compile flags
   and pre-Medusa h/w support

 2 Fix bug with Pages_Unsafe/Pages_Safe page moving for StrongARM
   (interrupt hole) - also better performance for StrongARM

 3 Improve perfromance of physical memory clear for StrongARM
   (make sure it uses burst write for STM)

 4 Suspend Chocolate task switching for StrongARM if SALDMIBbroken
   is TRUE
@
text
@d56 1
d58 1
d60 1
d63 3
d151 1
d155 1
d170 1
d192 19
@


4.1.4.2
log
@Various speed ups
Memory map changes:
remove shadow ROM
move UNDEF stack, SoftCAM and MMU tables above 64M
expand RMA limit to 15M from 11M
expand SysHeap limit to 3M-32k from 2M-8k
expand SVC stack to 32k from 8k
partially protect kernel workspace from user access
protect SVC stack from user access
@
text
@a37 8
  [ ChocolateSysHeap
        ASSERT  ChocolateTKBlocks = ChocolateBlockArrays + 8
        MOV     r3,#ChocolateBlockArrays
        LDR     r3,[r3,#8]
        BL      ClaimChocolateBlock
        MOVVS   r3, #TickNodeSize
        BLVS    ClaimSysHeapNode
  |
a39 1
  ]
a163 9
  [ ChocolateSysHeap
        ASSERT  ChocolateTKBlocks = ChocolateBlockArrays + 8
        MOV     r1,#ChocolateBlockArrays
        LDR     r1,[r1,#8]
        BL      FreeChocolateBlock
        LDRVS   r1, =SysHeapStart
        MOVVS   r0, #HeapReason_Free
        SWIVS   XOS_Heap
  |
a166 1
  ]
a209 7
  [ ChocolateSysHeap
        ASSERT  ChocolateTKBlocks = ChocolateBlockArrays + 8
        MOV     r1,#ChocolateBlockArrays
        LDR     r1,[r1,#8]
        BL      FreeChocolateBlock
        BLVS    FreeSysHeapNode
  |
a210 1
  ]
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
