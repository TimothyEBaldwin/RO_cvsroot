head	4.3;
access;
symbols
	Kernel-6_15:4.3
	Kernel-6_14:4.3
	Kernel-6_01-3:4.3
	Kernel-6_13:4.3
	Kernel-6_12:4.3
	Kernel-6_11:4.3
	Kernel-6_10:4.3
	Kernel-6_09:4.3
	Kernel-6_08-4_129_2_10:4.3
	Kernel-6_08-4_129_2_9:4.3
	Kernel-6_08:4.3
	Kernel-6_07:4.3
	Kernel-6_06:4.3
	Kernel-6_05-4_129_2_8:4.3
	Kernel-6_05:4.3
	Kernel-6_04:4.3
	Kernel-6_03:4.3
	Kernel-6_01-2:4.3
	Kernel-6_01-4_146_2_1:4.3
	Kernel-6_02:4.3
	Kernel-6_01-1:4.3
	Kernel-6_01:4.3
	Kernel-6_00:4.3
	Kernel-5_99:4.3
	Kernel-5_98:4.3
	Kernel-5_97-4_129_2_7:4.3
	Kernel-5_97:4.3
	Kernel-5_96:4.3
	Kernel-5_95:4.3
	Kernel-5_94:4.3
	Kernel-5_93:4.3
	Kernel-5_92:4.3
	Kernel-5_91:4.3
	Kernel-5_90:4.3
	Kernel-5_89-4_129_2_6:4.3
	Kernel-5_89:4.3
	Kernel-5_88-4_129_2_5:4.3
	Kernel-5_88-4_129_2_4:4.3
	Kernel-5_88:4.3
	Kernel-5_87:4.3
	Kernel-5_86-4_129_2_3:4.3
	Kernel-5_86-4_129_2_2:4.3
	Kernel-5_86-4_129_2_1:4.3
	Kernel-5_86:4.3
	SMP:4.3.0.2
	SMP_bp:4.3
	Kernel-5_85:4.3
	Kernel-5_54-1:4.3
	Kernel-5_84:4.3
	Kernel-5_83:4.3
	Kernel-5_82:4.3
	Kernel-5_81:4.3
	Kernel-5_80:4.3
	Kernel-5_79:4.3
	Kernel-5_78:4.3
	Kernel-5_77:4.3
	Kernel-5_76:4.3
	Kernel-5_75:4.3
	Kernel-5_74:4.3
	Kernel-5_73:4.3
	Kernel-5_72:4.3
	Kernel-5_71:4.3
	Kernel-5_70:4.3
	Kernel-5_69:4.3
	Kernel-5_68:4.3
	Kernel-5_67:4.3
	Kernel-5_66:4.3
	Kernel-5_65:4.3
	Kernel-5_64:4.3
	Kernel-5_63:4.3
	Kernel-5_62:4.3
	Kernel-5_61:4.3
	Kernel-5_60:4.3
	Kernel-5_59:4.3
	Kernel-5_58:4.3
	Kernel-5_57:4.3
	Kernel-5_56:4.3
	Kernel-5_55:4.3
	Kernel-5_54:4.3
	Kernel-5_53:4.3
	Kernel-5_52:4.3
	Kernel-5_51:4.3
	Kernel-5_50:4.3
	Kernel-5_49:4.3
	HAL_merge:4.2.2.5
	Kernel-5_48:4.3
	Kernel-5_35-4_79_2_327:4.2.2.5
	Kernel-5_35-4_79_2_326:4.2.2.5
	Kernel-5_35-4_79_2_325:4.2.2.5
	Kernel-5_35-4_79_2_324:4.2.2.5
	Kernel-5_35-4_79_2_323:4.2.2.5
	Kernel-5_35-4_79_2_322:4.2.2.5
	Kernel-5_35-4_79_2_321:4.2.2.5
	Kernel-5_35-4_79_2_320:4.2.2.5
	Kernel-5_35-4_79_2_319:4.2.2.5
	Kernel-5_35-4_79_2_318:4.2.2.5
	Kernel-5_35-4_79_2_317:4.2.2.5
	Kernel-5_35-4_79_2_316:4.2.2.5
	Kernel-5_35-4_79_2_315:4.2.2.5
	Kernel-5_35-4_79_2_314:4.2.2.5
	Kernel-5_35-4_79_2_313:4.2.2.5
	Kernel-5_35-4_79_2_312:4.2.2.5
	Kernel-5_35-4_79_2_311:4.2.2.5
	Kernel-5_35-4_79_2_310:4.2.2.5
	Kernel-5_35-4_79_2_309:4.2.2.5
	Kernel-5_35-4_79_2_308:4.2.2.5
	Kernel-5_35-4_79_2_307:4.2.2.5
	Kernel-5_35-4_79_2_306:4.2.2.5
	Kernel-5_35-4_79_2_305:4.2.2.5
	Kernel-5_35-4_79_2_304:4.2.2.5
	Kernel-5_35-4_79_2_303:4.2.2.5
	Kernel-5_35-4_79_2_302:4.2.2.5
	Kernel-5_35-4_79_2_301:4.2.2.5
	Kernel-5_35-4_79_2_300:4.2.2.5
	Kernel-5_35-4_79_2_299:4.2.2.5
	Kernel-5_35-4_79_2_298:4.2.2.5
	Kernel-5_35-4_79_2_297:4.2.2.5
	Kernel-5_35-4_79_2_296:4.2.2.5
	Kernel-5_35-4_79_2_295:4.2.2.5
	Kernel-5_35-4_79_2_294:4.2.2.5
	Kernel-5_35-4_79_2_293:4.2.2.5
	Kernel-5_35-4_79_2_292:4.2.2.5
	Kernel-5_35-4_79_2_291:4.2.2.5
	Kernel-5_35-4_79_2_290:4.2.2.5
	Kernel-5_35-4_79_2_289:4.2.2.5
	Kernel-5_35-4_79_2_288:4.2.2.5
	Kernel-5_35-4_79_2_287:4.2.2.5
	Kernel-5_35-4_79_2_286:4.2.2.5
	Kernel-5_35-4_79_2_285:4.2.2.5
	Kernel-5_35-4_79_2_284:4.2.2.5
	Kernel-5_35-4_79_2_283:4.2.2.5
	Kernel-5_35-4_79_2_282:4.2.2.5
	Kernel-5_35-4_79_2_281:4.2.2.5
	Kernel-5_35-4_79_2_280:4.2.2.5
	Kernel-5_35-4_79_2_279:4.2.2.5
	Kernel-5_35-4_79_2_278:4.2.2.5
	Kernel-5_35-4_79_2_277:4.2.2.5
	Kernel-5_35-4_79_2_276:4.2.2.5
	Kernel-5_35-4_79_2_275:4.2.2.5
	Kernel-5_35-4_79_2_274:4.2.2.5
	Kernel-5_35-4_79_2_273:4.2.2.5
	Kernel-5_35-4_79_2_272:4.2.2.5
	Kernel-5_35-4_79_2_271:4.2.2.5
	Kernel-5_35-4_79_2_270:4.2.2.5
	Kernel-5_35-4_79_2_269:4.2.2.5
	Kernel-5_35-4_79_2_268:4.2.2.5
	Kernel-5_35-4_79_2_267:4.2.2.5
	Kernel-5_35-4_79_2_266:4.2.2.5
	Kernel-5_35-4_79_2_265:4.2.2.5
	Kernel-5_35-4_79_2_264:4.2.2.5
	Kernel-5_35-4_79_2_263:4.2.2.5
	Kernel-5_35-4_79_2_262:4.2.2.5
	Kernel-5_35-4_79_2_261:4.2.2.5
	Kernel-5_35-4_79_2_260:4.2.2.5
	Kernel-5_35-4_79_2_259:4.2.2.5
	Kernel-5_35-4_79_2_258:4.2.2.5
	Kernel-5_35-4_79_2_257:4.2.2.5
	Kernel-5_35-4_79_2_256:4.2.2.5
	Kernel-5_35-4_79_2_255:4.2.2.5
	Kernel-5_35-4_79_2_254:4.2.2.5
	Kernel-5_35-4_79_2_253:4.2.2.5
	Kernel-5_35-4_79_2_252:4.2.2.4
	Kernel-5_35-4_79_2_251:4.2.2.4
	Kernel-5_35-4_79_2_250:4.2.2.4
	Kernel-5_35-4_79_2_249:4.2.2.4
	Kernel-5_35-4_79_2_248:4.2.2.4
	Kernel-5_35-4_79_2_247:4.2.2.4
	Kernel-5_35-4_79_2_246:4.2.2.4
	Kernel-5_35-4_79_2_245:4.2.2.4
	Kernel-5_35-4_79_2_244:4.2.2.4
	Kernel-5_35-4_79_2_243:4.2.2.4
	Kernel-5_35-4_79_2_242:4.2.2.4
	Kernel-5_35-4_79_2_241:4.2.2.4
	Kernel-5_35-4_79_2_240:4.2.2.4
	Kernel-5_35-4_79_2_239:4.2.2.4
	Kernel-5_35-4_79_2_238:4.2.2.4
	Kernel-5_35-4_79_2_237:4.2.2.4
	Kernel-5_35-4_79_2_236:4.2.2.4
	Kernel-5_35-4_79_2_235:4.2.2.4
	Kernel-5_35-4_79_2_234:4.2.2.4
	Kernel-5_35-4_79_2_233:4.2.2.4
	Kernel-5_35-4_79_2_232:4.2.2.4
	Kernel-5_35-4_79_2_231:4.2.2.4
	Kernel-5_35-4_79_2_230:4.2.2.4
	Kernel-5_35-4_79_2_229:4.2.2.4
	Kernel-5_35-4_79_2_228:4.2.2.4
	Kernel-5_35-4_79_2_227:4.2.2.4
	Kernel-5_35-4_79_2_226:4.2.2.4
	Kernel-5_35-4_79_2_225:4.2.2.4
	Kernel-5_35-4_79_2_224:4.2.2.4
	Kernel-5_35-4_79_2_223:4.2.2.4
	Kernel-5_35-4_79_2_222:4.2.2.4
	Kernel-5_35-4_79_2_221:4.2.2.4
	Kernel-5_35-4_79_2_220:4.2.2.4
	Kernel-5_35-4_79_2_219:4.2.2.4
	Kernel-5_35-4_79_2_218:4.2.2.4
	Kernel-5_35-4_79_2_217:4.2.2.4
	Kernel-5_35-4_79_2_216:4.2.2.4
	Kernel-5_35-4_79_2_215:4.2.2.4
	Kernel-5_35-4_79_2_214:4.2.2.4
	Kernel-5_35-4_79_2_213:4.2.2.4
	Kernel-5_35-4_79_2_212:4.2.2.4
	Kernel-5_35-4_79_2_211:4.2.2.4
	Kernel-5_35-4_79_2_210:4.2.2.4
	Kernel-5_35-4_79_2_209:4.2.2.4
	Kernel-5_35-4_79_2_208:4.2.2.4
	Kernel-5_35-4_79_2_207:4.2.2.4
	Kernel-5_35-4_79_2_206:4.2.2.4
	Kernel-5_35-4_79_2_205:4.2.2.4
	Kernel-5_35-4_79_2_204:4.2.2.4
	Kernel-5_35-4_79_2_203:4.2.2.4
	Kernel-5_35-4_79_2_202:4.2.2.4
	Kernel-5_35-4_79_2_201:4.2.2.4
	Kernel-5_35-4_79_2_200:4.2.2.4
	Kernel-5_35-4_79_2_199:4.2.2.4
	Kernel-5_35-4_79_2_198:4.2.2.4
	Kernel-5_35-4_79_2_197:4.2.2.4
	Kernel-5_35-4_79_2_196:4.2.2.4
	Kernel-5_35-4_79_2_195:4.2.2.4
	Kernel-5_35-4_79_2_194:4.2.2.4
	Kernel-5_35-4_79_2_193:4.2.2.4
	Kernel-5_35-4_79_2_192:4.2.2.4
	Kernel-5_35-4_79_2_191:4.2.2.4
	Kernel-5_35-4_79_2_190:4.2.2.4
	Kernel-5_35-4_79_2_189:4.2.2.4
	Kernel-5_35-4_79_2_188:4.2.2.4
	Kernel-5_35-4_79_2_187:4.2.2.4
	Kernel-5_35-4_79_2_186:4.2.2.4
	Kernel-5_35-4_79_2_185:4.2.2.4
	Kernel-5_35-4_79_2_184:4.2.2.4
	Kernel-5_35-4_79_2_183:4.2.2.4
	Kernel-5_35-4_79_2_182:4.2.2.4
	Kernel-5_35-4_79_2_181:4.2.2.4
	Kernel-5_35-4_79_2_180:4.2.2.4
	Kernel-5_35-4_79_2_179:4.2.2.4
	Kernel-5_35-4_79_2_178:4.2.2.4
	Kernel-5_35-4_79_2_177:4.2.2.4
	Kernel-5_35-4_79_2_176:4.2.2.4
	Kernel-5_35-4_79_2_175:4.2.2.4
	Kernel-5_35-4_79_2_174:4.2.2.4
	Kernel-5_35-4_79_2_173:4.2.2.4
	Kernel-5_35-4_79_2_172:4.2.2.4
	Kernel-5_35-4_79_2_171:4.2.2.4
	Kernel-5_35-4_79_2_170:4.2.2.4
	Kernel-5_35-4_79_2_169:4.2.2.4
	Kernel-5_35-4_79_2_168:4.2.2.4
	Kernel-5_35-4_79_2_167:4.2.2.4
	Kernel-5_35-4_79_2_166:4.2.2.4
	Kernel-5_35-4_79_2_165:4.2.2.4
	RPi_merge:4.2.2.3.2.1
	Kernel-5_35-4_79_2_147_2_23:4.2.2.3.2.1
	Kernel-5_35-4_79_2_147_2_22:4.2.2.3
	Kernel-5_35-4_79_2_147_2_21:4.2.2.3
	Kernel-5_35-4_79_2_147_2_20:4.2.2.3
	Kernel-5_35-4_79_2_147_2_19:4.2.2.3
	Kernel-5_35-4_79_2_147_2_18:4.2.2.3
	Kernel-5_35-4_79_2_164:4.2.2.4
	Kernel-5_35-4_79_2_163:4.2.2.4
	Kernel-5_35-4_79_2_147_2_17:4.2.2.3
	Kernel-5_35-4_79_2_147_2_16:4.2.2.3
	Kernel-5_35-4_79_2_147_2_15:4.2.2.3
	Kernel-5_35-4_79_2_162:4.2.2.4
	Kernel-5_35-4_79_2_161:4.2.2.4
	Kernel-5_35-4_79_2_147_2_14:4.2.2.3
	Kernel-5_35-4_79_2_147_2_13:4.2.2.3
	Kernel-5_35-4_79_2_160:4.2.2.4
	Kernel-5_35-4_79_2_159:4.2.2.4
	Kernel-5_35-4_79_2_158:4.2.2.4
	Kernel-5_35-4_79_2_157:4.2.2.4
	Kernel-5_35-4_79_2_156:4.2.2.3
	Kernel-5_35-4_79_2_147_2_12:4.2.2.3
	Kernel-5_35-4_79_2_147_2_11:4.2.2.3
	Kernel-5_35-4_79_2_155:4.2.2.3
	Kernel-5_35-4_79_2_147_2_10:4.2.2.3
	Kernel-5_35-4_79_2_154:4.2.2.3
	Kernel-5_35-4_79_2_153:4.2.2.3
	Kernel-5_35-4_79_2_147_2_9:4.2.2.3
	Kernel-5_35-4_79_2_152:4.2.2.3
	Kernel-5_35-4_79_2_151:4.2.2.3
	Kernel-5_35-4_79_2_147_2_8:4.2.2.3
	Kernel-5_35-4_79_2_147_2_7:4.2.2.3
	Kernel-5_35-4_79_2_150:4.2.2.3
	Kernel-5_35-4_79_2_147_2_6:4.2.2.3
	Kernel-5_35-4_79_2_147_2_5:4.2.2.3
	Kernel-5_35-4_79_2_149:4.2.2.3
	Kernel-5_35-4_79_2_147_2_4:4.2.2.3
	Kernel-5_35-4_79_2_147_2_3:4.2.2.3
	Kernel-5_35-4_79_2_148:4.2.2.3
	Kernel-5_35-4_79_2_147_2_2:4.2.2.3
	Kernel-5_35-4_79_2_147_2_1:4.2.2.3
	RPi:4.2.2.3.0.2
	RPi_bp:4.2.2.3
	Kernel-5_35-4_79_2_98_2_52_2_1:4.2.2.2.2.1
	alees_Kernel_dev:4.2.2.2.2.1.0.2
	alees_Kernel_dev_bp:4.2.2.2.2.1
	Kernel-5_35-4_79_2_147:4.2.2.3
	Kernel-5_35-4_79_2_146:4.2.2.3
	Kernel-5_35-4_79_2_145:4.2.2.3
	Kernel-5_35-4_79_2_144:4.2.2.3
	Kernel-5_35-4_79_2_143:4.2.2.3
	Kernel-5_35-4_79_2_142:4.2.2.3
	Kernel-5_35-4_79_2_141:4.2.2.3
	Kernel-5_35-4_79_2_140:4.2.2.3
	Kernel-5_35-4_79_2_139:4.2.2.3
	Kernel-5_35-4_79_2_138:4.2.2.3
	Kernel-5_35-4_79_2_137:4.2.2.3
	Kernel-5_35-4_79_2_136:4.2.2.3
	Kernel-5_35-4_79_2_135:4.2.2.3
	Kernel-5_35-4_79_2_134:4.2.2.3
	Kernel-5_35-4_79_2_133:4.2.2.3
	Kernel-5_35-4_79_2_132:4.2.2.3
	Kernel-5_35-4_79_2_131:4.2.2.3
	Kernel-5_35-4_79_2_130:4.2.2.3
	Kernel-5_35-4_79_2_129:4.2.2.3
	Kernel-5_35-4_79_2_128:4.2.2.3
	Kernel-5_35-4_79_2_127:4.2.2.3
	Kernel-5_35-4_79_2_126:4.2.2.3
	Kernel-5_35-4_79_2_125:4.2.2.3
	Kernel-5_35-4_79_2_124:4.2.2.3
	Kernel-5_35-4_79_2_123:4.2.2.3
	Cortex_merge:4.2.2.2.2.1
	Kernel-5_35-4_79_2_122:4.2.2.2
	Kernel-5_35-4_79_2_98_2_54:4.2.2.2.2.1
	Kernel-5_35-4_79_2_98_2_53:4.2.2.2.2.1
	Kernel-5_35-4_79_2_98_2_52:4.2.2.2.2.1
	Kernel-5_35-4_79_2_98_2_51:4.2.2.2.2.1
	Kernel-5_35-4_79_2_98_2_50:4.2.2.2.2.1
	Kernel-5_35-4_79_2_98_2_49:4.2.2.2.2.1
	Kernel-5_35-4_79_2_98_2_48:4.2.2.2.2.1
	Kernel-5_35-4_79_2_121:4.2.2.2
	Kernel-5_35-4_79_2_98_2_47:4.2.2.2
	Kernel-5_35-4_79_2_120:4.2.2.2
	Kernel-5_35-4_79_2_98_2_46:4.2.2.2
	Kernel-5_35-4_79_2_119:4.2.2.2
	Kernel-5_35-4_79_2_98_2_45:4.2.2.2
	Kernel-5_35-4_79_2_98_2_44:4.2.2.2
	Kernel-5_35-4_79_2_118:4.2.2.2
	Kernel-5_35-4_79_2_98_2_43:4.2.2.2
	Kernel-5_35-4_79_2_117:4.2.2.2
	Kernel-5_35-4_79_2_116:4.2.2.2
	Kernel-5_35-4_79_2_98_2_42:4.2.2.2
	Kernel-5_35-4_79_2_115:4.2.2.2
	Kernel-5_35-4_79_2_98_2_41:4.2.2.2
	Kernel-5_35-4_79_2_98_2_40:4.2.2.2
	Kernel-5_35-4_79_2_114:4.2.2.2
	Kernel-5_35-4_79_2_98_2_39:4.2.2.2
	Kernel-5_35-4_79_2_98_2_38:4.2.2.2
	Kernel-5_35-4_79_2_113:4.2.2.2
	Kernel-5_35-4_79_2_112:4.2.2.2
	Kernel-5_35-4_79_2_98_2_37:4.2.2.2
	Kernel-5_35-4_79_2_98_2_36:4.2.2.2
	Kernel-5_35-4_79_2_98_2_35:4.2.2.2
	Kernel-5_35-4_79_2_98_2_34:4.2.2.2
	Kernel-5_35-4_79_2_98_2_33:4.2.2.2
	Kernel-5_35-4_79_2_98_2_32:4.2.2.2
	Kernel-5_35-4_79_2_98_2_31:4.2.2.2
	Kernel-5_35-4_79_2_98_2_30:4.2.2.2
	Kernel-5_35-4_79_2_98_2_29:4.2.2.2
	Kernel-5_35-4_79_2_98_2_28:4.2.2.2
	Kernel-5_35-4_79_2_98_2_27:4.2.2.2
	Kernel-5_35-4_79_2_98_2_26:4.2.2.2
	Kernel-5_35-4_79_2_111:4.2.2.2
	Kernel-5_35-4_79_2_98_2_25:4.2.2.2
	Kernel-5_35-4_79_2_98_2_24:4.2.2.2
	Kernel-5_35-4_79_2_98_2_23:4.2.2.2
	Kernel-5_35-4_79_2_110:4.2.2.2
	Kernel-5_35-4_79_2_98_2_22:4.2.2.2
	Kernel-5_35-4_79_2_109:4.2.2.2
	Kernel-5_35-4_79_2_98_2_21:4.2.2.2
	Kernel-5_35-4_79_2_98_2_20:4.2.2.2
	Kernel-5_35-4_79_2_108:4.2.2.2
	Kernel-5_35-4_79_2_107:4.2.2.2
	Kernel-5_35-4_79_2_98_2_19:4.2.2.2
	Kernel-5_35-4_79_2_98_2_18:4.2.2.2
	Kernel-5_35-4_79_2_98_2_17:4.2.2.2
	Kernel-5_35-4_79_2_98_2_16:4.2.2.2
	Kernel-5_35-4_79_2_98_2_15:4.2.2.2
	Kernel-5_35-4_79_2_106:4.2.2.2
	Kernel-5_35-4_79_2_105:4.2.2.2
	Kernel-5_35-4_79_2_104:4.2.2.2
	Kernel-5_35-4_79_2_98_2_14:4.2.2.2
	Kernel-5_35-4_79_2_98_2_13:4.2.2.2
	Kernel-5_35-4_79_2_98_2_12:4.2.2.2
	Kernel-5_35-4_79_2_98_2_11:4.2.2.2
	Kernel-5_35-4_79_2_98_2_10:4.2.2.2
	Kernel-5_35-4_79_2_98_2_9:4.2.2.2
	Kernel-5_35-4_79_2_103:4.2.2.2
	Kernel-5_35-4_79_2_102:4.2.2.2
	Kernel-5_35-4_79_2_98_2_8:4.2.2.2
	Kernel-5_35-4_79_2_98_2_7:4.2.2.2
	Kernel-5_35-4_79_2_98_2_6:4.2.2.2
	Kernel-5_35-4_79_2_98_2_5:4.2.2.2
	Kernel-5_35-4_79_2_98_2_4:4.2.2.2
	Kernel-5_35-4_79_2_101:4.2.2.2
	Kernel-5_35-4_79_2_100:4.2.2.2
	Kernel-5_35-4_79_2_99:4.2.2.2
	Kernel-5_35-4_79_2_98_2_3:4.2.2.2
	Kernel-5_35-4_79_2_98_2_2:4.2.2.2
	Kernel-5_35-4_79_2_98_2_1:4.2.2.2
	Cortex:4.2.2.2.0.2
	Cortex_bp:4.2.2.2
	Kernel-5_35-4_79_2_98:4.2.2.2
	Kernel-5_35-4_79_2_97:4.2.2.2
	Kernel-5_35-4_79_2_96:4.2.2.2
	Kernel-5_35-4_79_2_95:4.2.2.2
	Kernel-5_35-4_79_2_94:4.2.2.2
	Kernel-5_35-4_79_2_93:4.2.2.2
	Kernel-5_35-4_79_2_92:4.2.2.2
	Kernel-5_35-4_79_2_91:4.2.2.2
	Kernel-5_35-4_79_2_90:4.2.2.2
	Kernel-5_35-4_79_2_89:4.2.2.2
	Kernel-5_35-4_79_2_88:4.2.2.2
	Kernel-5_35-4_79_2_87:4.2.2.2
	Kernel-5_35-4_79_2_86:4.2.2.2
	Kernel-5_35-4_79_2_85:4.2.2.2
	Kernel-5_35-4_79_2_84:4.2.2.2
	Kernel-5_35-4_79_2_83:4.2.2.2
	Kernel-5_35-4_79_2_82:4.2.2.2
	Kernel-5_35-4_79_2_81:4.2.2.2
	Kernel-5_35-4_79_2_80:4.2.2.2
	Kernel-5_35-4_79_2_79:4.2.2.2
	Kernel-5_35-4_79_2_78:4.2.2.2
	Kernel-5_35-4_79_2_77:4.2.2.2
	RO_5_07:4.2.2.2
	Kernel-5_35-4_79_2_76:4.2.2.2
	Kernel-5_35-4_79_2_75:4.2.2.2
	Kernel-5_35-4_79_2_74:4.2.2.2
	Kernel-5_35-4_79_2_73:4.2.2.2
	Kernel-5_35-4_79_2_72:4.2.2.2
	Kernel-5_35-4_79_2_71:4.2.2.2
	Kernel-5_35-4_79_2_70:4.2.2.2
	Kernel-5_35-4_79_2_69:4.2.2.2
	Kernel-5_35-4_79_2_68:4.2.2.2
	Kernel-5_35-4_79_2_67:4.2.2.2
	Kernel-5_35-4_79_2_66:4.2.2.2
	Kernel-5_35-4_79_2_65:4.2.2.2
	Kernel-5_35-4_79_2_64:4.2.2.2
	Kernel-5_35-4_79_2_63:4.2.2.2
	Kernel-5_35-4_79_2_62:4.2.2.2
	Kernel-5_35-4_79_2_61:4.2.2.2
	Kernel-5_35-4_79_2_59:4.2.2.2
	Kernel-5_35-4_79_2_58:4.2.2.2
	Kernel-5_35-4_79_2_57:4.2.2.2
	Kernel-5_35-4_79_2_56:4.2.2.2
	Kernel-5_35-4_79_2_55:4.2.2.2
	Kernel-5_35-4_79_2_54:4.2.2.2
	Kernel-5_35-4_79_2_53:4.2.2.2
	Kernel-5_35-4_79_2_52:4.2.2.2
	Kernel-5_35-4_79_2_51:4.2.2.2
	Kernel-5_35-4_79_2_50:4.2.2.2
	Kernel-5_35-4_79_2_49:4.2.2.2
	Kernel-5_35-4_79_2_48:4.2.2.2
	Kernel-5_47:4.2
	Kernel-5_46-4_90_2_1:4.2
	nbingham_Kernel_FastNC_dev_bp:4.2
	nbingham_Kernel_FastNC_dev:4.2.0.6
	Kernel-5_46:4.2
	Kernel-5_45:4.2
	Kernel-5_35-4_79_2_47:4.2.2.1
	Kernel-5_35-4_79_2_46:4.2.2.1
	Kernel-5_35-4_79_2_45:4.2.2.1
	Kernel-5_35-4_79_2_44:4.2.2.1
	Kernel-5_35-4_79_2_25_2_2:4.2
	Kernel-5_35-4_79_2_43:4.2.2.1
	Kernel-5_35-4_79_2_42:4.2.2.1
	Kernel-5_35-4_79_2_41:4.2.2.1
	Kernel-5_35-4_79_2_40:4.2
	Kernel-5_35-4_79_2_39:4.2
	Kernel-5_35-4_79_2_38:4.2
	Kernel-5_35-4_79_2_37:4.2
	Kernel-5_35-4_79_2_36:4.2
	Kernel-5_35-4_79_2_35:4.2
	Kernel-5_35-4_79_2_34:4.2
	Kernel-5_35-4_79_2_33:4.2
	Kernel-5_35-4_79_2_32:4.2
	Kernel-5_44:4.2
	Kernel-5_35-4_79_2_25_2_1:4.2
	Kernel-5_43:4.2
	Kernel-5_35-4_79_2_31:4.2
	Kernel-5_35-4_79_2_30:4.2
	Kernel-5_35-4_79_2_29:4.2
	Kernel-5_35-4_79_2_28:4.2
	Kernel-5_35-4_79_2_27:4.2
	Kernel-5_35-4_79_2_26:4.2
	Kernel-5_42:4.2
	Kernel-5_41:4.2
	Kernel-5_40:4.2
	Kernel-5_35-4_79_2_25:4.2
	Kernel-5_35-4_79_2_24:4.2
	Kernel-5_35-4_79_2_23:4.2
	Kernel-5_35-4_79_2_22:4.2
	Kernel-5_35-4_79_2_21:4.2
	Kernel-5_35-4_79_2_20:4.2
	Kernel-5_35-4_79_2_19:4.2
	Kernel-5_35-4_79_2_18:4.2
	Kernel-5_35-4_79_2_17:4.2
	Kernel-5_35-4_79_2_16:4.2
	Kernel-5_35-4_79_2_15:4.2
	Kernel-5_35-4_79_2_14:4.2
	Kernel-5_39:4.2
	Kernel-5_13-4_52_2_1:4.1
	Bethany:4.1.0.8
	Kernel-5_38:4.2
	Kernel-5_35-4_79_2_13:4.2
	Kernel-5_35-4_79_2_12:4.2
	Kernel-5_35-4_79_2_11:4.2
	Kernel-5_37:4.2
	Kernel-5_35-4_79_2_10:4.2
	Kernel-5_35-4_79_2_9:4.2
	Kernel-5_36:4.2
	Kernel-5_35-4_79_2_8:4.2
	Kernel-5_35-4_79_2_7:4.2
	Kernel-5_35-4_79_2_6:4.2
	Kernel-5_35-4_79_2_5:4.2
	Kernel-5_35-4_79_2_4:4.2
	Kernel-5_35-4_79_2_3:4.2
	Kernel-5_35-4_79_2_2:4.2
	dellis_autobuild_BaseSW:4.2
	Kernel-5_35-4_79_2_1:4.2
	HAL:4.2.0.2
	Kernel-5_35:4.2
	Kernel-5_34:4.2
	Kernel-5_33:4.2
	Kernel-5_32:4.2
	Kernel-5_31:4.2
	Kernel-5_30:4.2
	Kernel-5_29:4.2
	Kernel-5_28:4.2
	Kernel-5_27:4.2
	Kernel-5_26:4.2
	Kernel-5_25:4.2
	Kernel-5_24:4.2
	Kernel-5_23:4.2
	Kernel-5_22:4.1
	sbrodie_sedwards_16Mar2000:4.1
	Kernel-5_21:4.1
	Kernel-5_20:4.1
	Kernel-5_19:4.1
	Kernel-5_18:4.1
	Kernel-5_17:4.1
	Kernel-5_16:4.1
	Kernel-5_15:4.1
	Kernel-5_14:4.1
	Kernel-5_13:4.1
	Kernel-5_12:4.1
	Kernel-5_11:4.1
	Kernel-5_10:4.1
	Kernel-5_09:4.1
	Kernel-5_08:4.1
	Kernel-5_07:4.1
	Kernel-5_06:4.1
	Kernel-5_05:4.1
	Kernel-5_04:4.1
	Kernel-5_03:4.1
	Kernel-5_02:4.1
	Kernel-5_01:4.1
	Kernel-5_00:4.1
	Kernel-4_99:4.1
	Kernel-4_98:4.1
	Kernel-4_97:4.1
	Kernel-4_96:4.1
	Kernel-4_95:4.1
	Kernel-4_94:4.1
	Kernel-4_93:4.1
	Kernel-4_92:4.1
	Kernel-4_91:4.1
	Kernel-4_90:4.1
	dcotton_autobuild_BaseSW:4.2
	Kernel-4_89:4.1
	Kernel-4_88:4.1
	Kernel-4_87:4.1
	Kernel-4_86:4.1
	Kernel-4_85:4.1
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1.4.1
	Kernel-4_84:4.1
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1.4.1
	Ursula_RiscPC_bp:4.1.4.1
	Kernel-4_83:4.1
	Kernel-4_82:4.1
	Kernel-4_81:4.1
	Kernel-4_80:4.1
	Kernel-4_79:4.1
	Kernel-4_78:4.1
	Kernel-4_77:4.1
	Kernel-4_76:4.1
	Kernel-4_75:4.1
	Kernel-4_74:4.1
	Kernel-4_73:4.1
	Kernel-4_72:4.1
	Kernel-4_71:4.1
	Kernel-4_70:4.1
	Kernel-4_69:4.1
	Kernel-4_68:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.1
	Ursula_RiscPC:4.1.4.1.0.2
	Kernel-4_63-1_1_2_5:4.1.7.1
	Kernel-4_63-1_1_2_4:4.1.7.1
	Kernel-4_67:4.1
	Kernel-4_66:4.1
	Kernel-4_63-1_1_2_3:4.1.7.1
	Kernel-4_65:4.1
	Ursula_merge:4.1
	Kernel-4_64:4.1
	mstphens_Kernel-3_81:4.1.4.1
	Kernel-4_63-1_1_2_2:4.1.7.1
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1.4.1
	UrsulaBuild_FinalSoftload:4.1.4.1
	rthornb_UrsulaBuild-12Aug1998:4.1.4.1
	aglover_UrsulaBuild-05Aug1998:4.1.4.1
	rthornb_UrsulaBuild-29Jul1998:4.1.4.1
	rthornb_UrsulaBuild-22Jul1998:4.1.4.1
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.4.1
	rthornb_UrsulaBuild-07Jul1998:4.1.4.1
	rthornb_UrsulaBuild-17Jun1998:4.1.4.1
	rthornb_UrsulaBuild-03Jun1998:4.1.4.1
	rthornb_UrsulaBuild-27May1998:4.1.4.1
	mstphens_Kernel-3_80:4.1.4.1
	rthornb_UrsulaBuild-21May1998:4.1.4.1
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2016.06.30.20.08.09;	author jlee;	state Exp;
branches;
next	4.2;
commitid	IWoXxARWeuLDOwcz;

4.2
date	2000.04.04.14.27.33;	author kbracey;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.41.24;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.2.2.1
date	2001.06.26.09.37.11;	author mstephen;	state Exp;
branches;
next	4.2.2.2;

4.2.2.2
date	2002.10.07.17.29.43;	author kbracey;	state Exp;
branches
	4.2.2.2.2.1;
next	4.2.2.3;

4.2.2.3
date	2011.11.26.21.11.16;	author jlee;	state Exp;
branches
	4.2.2.3.2.1;
next	4.2.2.4;
commitid	cI3W0zbtALQG6TIv;

4.2.2.4
date	2012.07.01.21.26.41;	author rsprowson;	state Exp;
branches;
next	4.2.2.5;
commitid	K3GB4gteEYUubUaw;

4.2.2.5
date	2015.01.16.00.43.14;	author jlee;	state Exp;
branches;
next	;
commitid	6VfHOoXB8KkCrb6y;

4.2.2.2.2.1
date	2011.08.08.23.28.26;	author jlee;	state Exp;
branches;
next	;
commitid	D7rzILnwRRSXoLuv;

4.2.2.3.2.1
date	2012.09.18.15.50.03;	author jlee;	state Exp;
branches;
next	;
commitid	jeuxYpI6CQUxM1lw;

4.1.1.1
date	96.11.05.09.41.24;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.01.02;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.09.09.13.33.34;	author mstphens;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.11.43;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.03.55;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        TTL    => Super1

CliDPrompt    =  "CLI$$Prompt",0
DefaultPrompt = "*"
        ALIGN

StartSuper ; Start entry for UtilModule
        BL      DEFHAN                  ; set error handler in case spooling
      [ International                   ; We are in USR mode and have no stack ...
        LDR     R0,=ZeroPage+KernelMessagesBlock+4
        ADR     R1,%FT11
        MOV     R2,#0
        SWI     XMessageTrans_Lookup
        MOVVS   R2,R1
01
        LDRB    R0,[R2],#1
        CMP     R0,#31
        BLT     %FT02
        SWI     OS_WriteC
        B       %BT01
02      SWI     OS_NewLine
        SWI     OS_NewLine
        B       CLILOP
11
        =       "Supervisor",0
        ALIGN
      |
        SWI     OS_WriteS
        =       "Supervisor",10,13,10,13,0
        ALIGN
        B       CLILOP
      ]


CLIEXIT BL      DEFHN2                  ; restore all our world

GOSUPV
        WritePSRc 0, R0
        BL      DEFHAN                  ; including error handler!

CLILOP ROUT

        ADR     R0, CliDPrompt          ; try looking it up
        LDR     R1, =GeneralMOSBuffer
        MOV     R2, #?GeneralMOSBuffer
        MOV     R3, #0
        MOV     R4, #VarType_Expanded
        SWI     XOS_ReadVarVal
        ADRVS   r1, DefaultPrompt       ; gnot gthere or gnaff
        MOVVS   r2, #1
        MOV     r0, r1
        MOV     r1, r2
        SWI     OS_WriteN
        LDR     R0, =GeneralMOSBuffer
        LDR     R1, =?GeneralMOSBuffer-1
        MOV     R2, #" "
        MOV     R3, #255
        MOV     R4, #0
        SWI     OS_ReadLine32
        BCS     ESCAPE
        MOV     lr, pc                  ; construct lr for wallies to return to
        SWI     XOS_CLI
        BVC     CLILOP

        SWI     XOS_NewLine
        BL      PrintError
        B       CLILOP

        LTORG

ESCAPE  MOV     R0, #&7E
        SWI     OS_Byte                 ; May yield error
      [ International
        SWI     XOS_EnterOS             ; GO into SVC mode to get some stack
        SWI     OS_NewLine
        BVS     %FT01
        BL      WriteS_Translated
        =       "Escape:Escape",10,13,0
        ALIGN
01
        WritePSRc 0, R0                 ; Back to user mode.
      |
        SWI     OS_WriteS
        =       10,13, "Escape", 10,13, 0
        ALIGN
      ]
        B       CLILOP

        END
@


4.2
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@d17 1
a17 1
CliDPrompt    =  "CLI$Prompt",0
d24 1
a24 1
        ADR     R0,KernelMessagesBlock+4
d72 2
a73 1
        SWI     OS_ReadLine
d90 2
a91 1
        BLVC    WriteS_Translated
d94 1
@


4.2.2.1
log
@1) Bring IOMD HAL more up to date. Add support for new
call HAL_CleanerSpace (preparation for StrongARM kernel
support).

2) In kernel, add HAL_CleanerSpace call (preparation for
StrongARM and XScale core support). Fix bug found with
ARMv3 support during test on Risc PC.

3) Implement new API for kernel SWIs that have used top
bits of addresses as flags. The new API has an extra
flag that must be set, so kernel can distinguish and
support both APIs. The reason for all this is that
addresses are 32-bits now, people, keep up there. Briefly:

  OS_HeapSort
    bit 31 of r0 set for new API, r1 is full 32-bit address
    flags move from r1 bits 31-29 to r0 bits 30-28

  OS_ReadLine
    bit 31 of r1 set for new API, r0 is full 32-bit address
    flags move from bits 31,30 of r0 to bits 30,29 of r1

  OS_SubstituteArgs
    bit 31 of r2 set for new API, r0 is full 32-bit address
    flag moves from bit 31 of r0 to bit 30 of r2

Tested on Risc PC and briefly on Customer A 2

Ta

Version 5.35, 4.79.2.41. Tagged as 'Kernel-5_35-4_79_2_41'
@
text
@a69 1
        ORR     R1, R1, #&80000000        ; new API (allows full 32-bit buffer address)
@


4.2.2.2
log
@Lots of Tungsten work.

Version 5.35, 4.79.2.48. Tagged as 'Kernel-5_35-4_79_2_48'
@
text
@d70 1
d73 1
a73 2
        MOV     R4, #0
        SWI     OS_ReadLine32
@


4.2.2.3
log
@Merge Cortex kernel into HAL branch
Detail:
  This is a full merge of the Cortex kernel back into the HAL branch. Since the Cortex kernel is/was just a superset of the HAL branch, at this point in time both branches are identical.
  Main features the HAL branch gains from this merge:
  - ARMv6/ARMv7 support
  - High processor vectors/zero page relocation support
  - objasm 4 warning fixes
  - Improved HAL related functionality:
    - Support for HAL-driven RTCs instead of kernel-driven IIC based ones
    - Support for arbitrary size machine IDs
    - Support for multiple IIC busses
    - Support for any HAL size, instead of hardcoded 64k size
    - Probably some other stuff I've forgotten
  - Probably a few bug fixes here and there
Admin:
  Tested on BB-xM & Iyonix.
  Was successfully flashed to ROM on an Iyonix to test the Cortex branch implementation of the 2010 RTC bug fix.
  IOMD build untested - but has been known to work in the past.


Version 5.35, 4.79.2.123. Tagged as 'Kernel-5_35-4_79_2_123'
@
text
@d24 1
a24 1
        LDR     R0,=ZeroPage+KernelMessagesBlock+4
@


4.2.2.3.2.1
log
@Merge with HAL branch
Detail:
  Merge the HAL branch into the RPi branch, prior to merging RPi to HAL
  Brief summary of main changes brought in:
  * Added *cache functionality previously provided by ARM module
  * Added "CMOS RAM reset" message on startup when CMOS has been wiped by keypress
  * Renamed HAL Video entries from HAL_Video_XXX to HAL_VideoXXX
  * Dropped mjsHAL macros, GRAB/STASH macros
  * Fixed pseudo-VRAM allocation when machine has exactly 16MB of RAM
  * Added OS_Hardware 5
  * Use OS_SerialOp GetDeviceName for getting serial device name
  * Drop HAL_MonitorLeadID
  * Rework default GraphicsV_IICOp handler
Admin:
  Tested on Raspberry Pi with high processor vectors


Version 5.35, 4.79.2.147.2.23. Tagged as 'Kernel-5_35-4_79_2_147_2_23'
@
text
@d90 1
a90 2
        BVS     %FT01
        BL      WriteS_Translated
a92 1
01
@


4.2.2.4
log
@Sort out SetBorder
NewReset.s:
The one remaining use of SetBorder was to denote the user asked for and got a CMOS reset, which in the HAL case emitted a warning because setting the border is potentially complicated/slow.
To solve this, the reset is noted and replaces the normal RISC OS banner with a warning message. The behaviour and text for this comes from the BBC Master, though the escape key is used in place of break since a reset isn't actually needed.
Moved the unused cputable inside its corresponding switch.
Two occurrences of WriteS_Translated would have executed the message in the V=1 case.
KernelWS/Resources:
Flag added to workspace, translation added to messages files.
Heapman.s:
Commented out use of SetBorder removed.
Kernel.s:
SetBorder macro removed.
Middle.s:
Switched out use of SetBorder removed.
Super1.s:
Conditional WriteS_Translated would try to execute the message in the opposite condition case.


Version 5.35, 4.79.2.157. Tagged as 'Kernel-5_35-4_79_2_157'
@
text
@d90 1
a90 2
        BVS     %FT01
        BL      WriteS_Translated
a92 1
01
@


4.2.2.5
log
@Escape some dollars
Detail:
  s/NewReset, s/Super1 - Escape some dollars contained in strings to avoid warnings from objasm
Admin:
  Resulting binary unchanged


Version 5.35, 4.79.2.253. Tagged as 'Kernel-5_35-4_79_2_253'
@
text
@d17 1
a17 1
CliDPrompt    =  "CLI$$Prompt",0
@


4.2.2.2.2.1
log
@Add zero page relocation support
Detail:
  A whole mass of changes to add high processor vectors + zero page relocation support to the Cortex branch of the kernel
  At the moment the code can only cope with two ZeroPage locations, &0 and &FFFF0000. But with a bit more tweaking those restrictions can probably be lifted, allowing ZeroPage to be hidden at almost any address (assuming it's fixed at compile time). If I've done my job right, these restrictions should all be enforced by asserts.
  There's a new option, HiProcVecs, in hdr/Options to control whether high processor vectors are used. When enabling it and building a ROM, remember:
  * FPEmulator needs to be built with the FPEAnchor=High option specified in the components file (not FPEAnchorType=High as my FPEmulator commit comments suggested)
  * ShareFS needs unplugging/removing since it can't cope with it yet
  * Iyonix users will need to use the latest ROOL boot sequence, to ensure the softloaded modules are compatible (OMAP, etc. don't really softload much so they're OK with older sequences)
  * However VProtect also needs patching to fix a nasty bug there - http://www.riscosopen.org/tracker/tickets/294
  The only other notable thing I can think of is that the ProcessTransfer code in s/ARM600 & s/VMSAv6 is disabled if high processor vectors are in use (it's fairly safe to say that code is obsolete in HAL builds anyway?)
  Fun challenge for my successor: Try setting ZeroPage to &FFFF00FF (or similar) so its value can be loaded with MVN instead of LDR. Then use positive/negative address offsets to access the contents.
  File changes:
  - hdr/ARMops - Modified ARMop macro to take the ZeroPage pointer as a parameter instead of 'zero'
  - hdr/Copro15ops - Corrected $quick handling in myISB macro
  - hdr/Options - Added ideal setting for us to use for HiProcVecs
  - s/AMBControl/allocate, s/AMBControl/growp, s/AMBControl/mapslot, s/AMBControl/memmap, s/AMBControl/service, s/AMBControl/shrinkp, s/Arthur2, s/Arthur3, s/ArthurSWIs, s/ChangeDyn, s/ExtraSWIs, s/HAL, s/HeapMan, s/Kernel, s/MemInfo, s/Middle, s/ModHand, s/MoreSWIs, s/MsgCode, s/NewIRQs, s/NewReset, s/Oscli, s/PMF/buffer, s/PMF/IIC, s/PMF/i2cutils, s/PMF/key, s/PMF/mouse, s/PMF/osbyte, s/PMF/oseven, s/PMF/osinit, s/PMF/osword, s/PMF/oswrch, s/SWINaming, s/Super1, s/SysComms, s/TickEvents, s/Utility, s/vdu/vdu23, s/vdu/vdudriver, s/vdu/vdugrafl, s/vdu/vdugrafv, s/vdu/vdupalxx, s/vdu/vdupointer, s/vdu/vduswis, s/vdu/vduwrch - Lots of updates to deal with zero page relocation
  - s/ARM600 - UseProcessTransfer option. Zero page relocation support. Deleted pre-HAL ClearPhysRAM code to tidy the file up a bit.
  - s/ARMops - Zero page relocation support. Set CPUFlag_HiProcVecs when high vectors are in use.
  - s/KbdResPC - Disable compilation of dead code
  - s/VMSAv6 - UseProcessTransfer option. Zero page relocation support.
Admin:
  Tested with OMAP & Iyonix ROM softloads, both with high & low zero page.
  High zero page hasn't had extensive testing, but boot sequence + ROM apps seem to work.


Version 5.35, 4.79.2.98.2.48. Tagged as 'Kernel-5_35-4_79_2_98_2_48'
@
text
@d24 1
a24 1
        LDR     R0,=ZeroPage+KernelMessagesBlock+4
@


4.1
log
@Initial revision
@
text
@d32 4
a35 3
        SWIGT   OS_WriteC
        BGT     %BT01
        SWI     OS_NewLine
d51 2
a52 1
GOSUPV  TEQP    PC, #0
d91 2
a92 3
        ALIGN    
        TEQP    PC,#0                   ; Back to user mode.
        MOV     R0,R0
@


4.1.4.1
log
@ 1 Simplify source by removing various long-standing compile flags
   and pre-Medusa h/w support

 2 Fix bug with Pages_Unsafe/Pages_Safe page moving for StrongARM
   (interrupt hole) - also better performance for StrongARM

 3 Improve perfromance of physical memory clear for StrongARM
   (make sure it uses burst write for STM)

 4 Suspend Chocolate task switching for StrongARM if SALDMIBbroken
   is TRUE
@
text
@d23 1
d40 6
d84 1
d92 5
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
