head	4.30;
access;
symbols
	Kernel-6_14:4.30
	Kernel-6_01-3:4.29
	Kernel-6_13:4.29
	Kernel-6_12:4.29
	Kernel-6_11:4.29
	Kernel-6_10:4.29
	Kernel-6_09:4.29
	Kernel-6_08-4_129_2_10:4.28.2.1
	Kernel-6_08-4_129_2_9:4.28.2.1
	Kernel-6_08:4.29
	Kernel-6_07:4.29
	Kernel-6_06:4.29
	Kernel-6_05-4_129_2_8:4.28.2.1
	Kernel-6_05:4.29
	Kernel-6_04:4.29
	Kernel-6_03:4.29
	Kernel-6_01-2:4.29
	Kernel-6_01-4_146_2_1:4.29
	Kernel-6_02:4.29
	Kernel-6_01-1:4.29
	Kernel-6_01:4.29
	Kernel-6_00:4.29
	Kernel-5_99:4.29
	Kernel-5_98:4.29
	Kernel-5_97-4_129_2_7:4.28.2.1
	Kernel-5_97:4.29
	Kernel-5_96:4.29
	Kernel-5_95:4.29
	Kernel-5_94:4.29
	Kernel-5_93:4.29
	Kernel-5_92:4.29
	Kernel-5_91:4.29
	Kernel-5_90:4.29
	Kernel-5_89-4_129_2_6:4.28.2.1
	Kernel-5_89:4.29
	Kernel-5_88-4_129_2_5:4.28
	Kernel-5_88-4_129_2_4:4.28
	Kernel-5_88:4.28
	Kernel-5_87:4.28
	Kernel-5_86-4_129_2_3:4.28
	Kernel-5_86-4_129_2_2:4.28
	Kernel-5_86-4_129_2_1:4.28
	Kernel-5_86:4.28
	SMP:4.28.0.2
	SMP_bp:4.28
	Kernel-5_85:4.28
	Kernel-5_54-1:4.25
	Kernel-5_84:4.28
	Kernel-5_83:4.28
	Kernel-5_82:4.28
	Kernel-5_81:4.28
	Kernel-5_80:4.28
	Kernel-5_79:4.28
	Kernel-5_78:4.28
	Kernel-5_77:4.28
	Kernel-5_76:4.28
	Kernel-5_75:4.28
	Kernel-5_74:4.27
	Kernel-5_73:4.27
	Kernel-5_72:4.27
	Kernel-5_71:4.27
	Kernel-5_70:4.27
	Kernel-5_69:4.27
	Kernel-5_68:4.27
	Kernel-5_67:4.27
	Kernel-5_66:4.26
	Kernel-5_65:4.26
	Kernel-5_64:4.26
	Kernel-5_63:4.26
	Kernel-5_62:4.26
	Kernel-5_61:4.26
	Kernel-5_60:4.26
	Kernel-5_59:4.26
	Kernel-5_58:4.26
	Kernel-5_57:4.26
	Kernel-5_56:4.26
	Kernel-5_55:4.26
	Kernel-5_54:4.25
	Kernel-5_53:4.24
	Kernel-5_52:4.24
	Kernel-5_51:4.23
	Kernel-5_50:4.22
	Kernel-5_49:4.21
	HAL_merge:4.18.2.30
	Kernel-5_48:4.20
	Kernel-5_35-4_79_2_327:4.18.2.30
	Kernel-5_35-4_79_2_326:4.18.2.30
	Kernel-5_35-4_79_2_325:4.18.2.30
	Kernel-5_35-4_79_2_324:4.18.2.30
	Kernel-5_35-4_79_2_323:4.18.2.30
	Kernel-5_35-4_79_2_322:4.18.2.30
	Kernel-5_35-4_79_2_321:4.18.2.30
	Kernel-5_35-4_79_2_320:4.18.2.30
	Kernel-5_35-4_79_2_319:4.18.2.30
	Kernel-5_35-4_79_2_318:4.18.2.29
	Kernel-5_35-4_79_2_317:4.18.2.29
	Kernel-5_35-4_79_2_316:4.18.2.29
	Kernel-5_35-4_79_2_315:4.18.2.29
	Kernel-5_35-4_79_2_314:4.18.2.29
	Kernel-5_35-4_79_2_313:4.18.2.29
	Kernel-5_35-4_79_2_312:4.18.2.29
	Kernel-5_35-4_79_2_311:4.18.2.29
	Kernel-5_35-4_79_2_310:4.18.2.29
	Kernel-5_35-4_79_2_309:4.18.2.29
	Kernel-5_35-4_79_2_308:4.18.2.29
	Kernel-5_35-4_79_2_307:4.18.2.29
	Kernel-5_35-4_79_2_306:4.18.2.29
	Kernel-5_35-4_79_2_305:4.18.2.28
	Kernel-5_35-4_79_2_304:4.18.2.28
	Kernel-5_35-4_79_2_303:4.18.2.28
	Kernel-5_35-4_79_2_302:4.18.2.28
	Kernel-5_35-4_79_2_301:4.18.2.28
	Kernel-5_35-4_79_2_300:4.18.2.28
	Kernel-5_35-4_79_2_299:4.18.2.28
	Kernel-5_35-4_79_2_298:4.18.2.28
	Kernel-5_35-4_79_2_297:4.18.2.28
	Kernel-5_35-4_79_2_296:4.18.2.28
	Kernel-5_35-4_79_2_295:4.18.2.28
	Kernel-5_35-4_79_2_294:4.18.2.28
	Kernel-5_35-4_79_2_293:4.18.2.28
	Kernel-5_35-4_79_2_292:4.18.2.28
	Kernel-5_35-4_79_2_291:4.18.2.28
	Kernel-5_35-4_79_2_290:4.18.2.28
	Kernel-5_35-4_79_2_289:4.18.2.28
	Kernel-5_35-4_79_2_288:4.18.2.28
	Kernel-5_35-4_79_2_287:4.18.2.28
	Kernel-5_35-4_79_2_286:4.18.2.28
	Kernel-5_35-4_79_2_285:4.18.2.28
	Kernel-5_35-4_79_2_284:4.18.2.28
	Kernel-5_35-4_79_2_283:4.18.2.28
	Kernel-5_35-4_79_2_282:4.18.2.28
	Kernel-5_35-4_79_2_281:4.18.2.28
	Kernel-5_35-4_79_2_280:4.18.2.28
	Kernel-5_35-4_79_2_279:4.18.2.28
	Kernel-5_35-4_79_2_278:4.18.2.27
	Kernel-5_35-4_79_2_277:4.18.2.27
	Kernel-5_35-4_79_2_276:4.18.2.27
	Kernel-5_35-4_79_2_275:4.18.2.27
	Kernel-5_35-4_79_2_274:4.18.2.27
	Kernel-5_35-4_79_2_273:4.18.2.27
	Kernel-5_35-4_79_2_272:4.18.2.27
	Kernel-5_35-4_79_2_271:4.18.2.27
	Kernel-5_35-4_79_2_270:4.18.2.27
	Kernel-5_35-4_79_2_269:4.18.2.27
	Kernel-5_35-4_79_2_268:4.18.2.27
	Kernel-5_35-4_79_2_267:4.18.2.27
	Kernel-5_35-4_79_2_266:4.18.2.27
	Kernel-5_35-4_79_2_265:4.18.2.27
	Kernel-5_35-4_79_2_264:4.18.2.27
	Kernel-5_35-4_79_2_263:4.18.2.27
	Kernel-5_35-4_79_2_262:4.18.2.27
	Kernel-5_35-4_79_2_261:4.18.2.27
	Kernel-5_35-4_79_2_260:4.18.2.27
	Kernel-5_35-4_79_2_259:4.18.2.27
	Kernel-5_35-4_79_2_258:4.18.2.27
	Kernel-5_35-4_79_2_257:4.18.2.27
	Kernel-5_35-4_79_2_256:4.18.2.27
	Kernel-5_35-4_79_2_255:4.18.2.27
	Kernel-5_35-4_79_2_254:4.18.2.27
	Kernel-5_35-4_79_2_253:4.18.2.27
	Kernel-5_35-4_79_2_252:4.18.2.27
	Kernel-5_35-4_79_2_251:4.18.2.26
	Kernel-5_35-4_79_2_250:4.18.2.26
	Kernel-5_35-4_79_2_249:4.18.2.26
	Kernel-5_35-4_79_2_248:4.18.2.26
	Kernel-5_35-4_79_2_247:4.18.2.26
	Kernel-5_35-4_79_2_246:4.18.2.26
	Kernel-5_35-4_79_2_245:4.18.2.26
	Kernel-5_35-4_79_2_244:4.18.2.26
	Kernel-5_35-4_79_2_243:4.18.2.26
	Kernel-5_35-4_79_2_242:4.18.2.26
	Kernel-5_35-4_79_2_241:4.18.2.26
	Kernel-5_35-4_79_2_240:4.18.2.26
	Kernel-5_35-4_79_2_239:4.18.2.26
	Kernel-5_35-4_79_2_238:4.18.2.26
	Kernel-5_35-4_79_2_237:4.18.2.26
	Kernel-5_35-4_79_2_236:4.18.2.26
	Kernel-5_35-4_79_2_235:4.18.2.26
	Kernel-5_35-4_79_2_234:4.18.2.26
	Kernel-5_35-4_79_2_233:4.18.2.26
	Kernel-5_35-4_79_2_232:4.18.2.26
	Kernel-5_35-4_79_2_231:4.18.2.26
	Kernel-5_35-4_79_2_230:4.18.2.26
	Kernel-5_35-4_79_2_229:4.18.2.26
	Kernel-5_35-4_79_2_228:4.18.2.26
	Kernel-5_35-4_79_2_227:4.18.2.26
	Kernel-5_35-4_79_2_226:4.18.2.26
	Kernel-5_35-4_79_2_225:4.18.2.26
	Kernel-5_35-4_79_2_224:4.18.2.26
	Kernel-5_35-4_79_2_223:4.18.2.26
	Kernel-5_35-4_79_2_222:4.18.2.26
	Kernel-5_35-4_79_2_221:4.18.2.26
	Kernel-5_35-4_79_2_220:4.18.2.26
	Kernel-5_35-4_79_2_219:4.18.2.26
	Kernel-5_35-4_79_2_218:4.18.2.26
	Kernel-5_35-4_79_2_217:4.18.2.26
	Kernel-5_35-4_79_2_216:4.18.2.26
	Kernel-5_35-4_79_2_215:4.18.2.26
	Kernel-5_35-4_79_2_214:4.18.2.26
	Kernel-5_35-4_79_2_213:4.18.2.26
	Kernel-5_35-4_79_2_212:4.18.2.26
	Kernel-5_35-4_79_2_211:4.18.2.26
	Kernel-5_35-4_79_2_210:4.18.2.26
	Kernel-5_35-4_79_2_209:4.18.2.26
	Kernel-5_35-4_79_2_208:4.18.2.26
	Kernel-5_35-4_79_2_207:4.18.2.26
	Kernel-5_35-4_79_2_206:4.18.2.26
	Kernel-5_35-4_79_2_205:4.18.2.26
	Kernel-5_35-4_79_2_204:4.18.2.26
	Kernel-5_35-4_79_2_203:4.18.2.26
	Kernel-5_35-4_79_2_202:4.18.2.25
	Kernel-5_35-4_79_2_201:4.18.2.24
	Kernel-5_35-4_79_2_200:4.18.2.24
	Kernel-5_35-4_79_2_199:4.18.2.24
	Kernel-5_35-4_79_2_198:4.18.2.24
	Kernel-5_35-4_79_2_197:4.18.2.24
	Kernel-5_35-4_79_2_196:4.18.2.24
	Kernel-5_35-4_79_2_195:4.18.2.24
	Kernel-5_35-4_79_2_194:4.18.2.24
	Kernel-5_35-4_79_2_193:4.18.2.24
	Kernel-5_35-4_79_2_192:4.18.2.24
	Kernel-5_35-4_79_2_191:4.18.2.24
	Kernel-5_35-4_79_2_190:4.18.2.24
	Kernel-5_35-4_79_2_189:4.18.2.24
	Kernel-5_35-4_79_2_188:4.18.2.24
	Kernel-5_35-4_79_2_187:4.18.2.24
	Kernel-5_35-4_79_2_186:4.18.2.24
	Kernel-5_35-4_79_2_185:4.18.2.23
	Kernel-5_35-4_79_2_184:4.18.2.23
	Kernel-5_35-4_79_2_183:4.18.2.23
	Kernel-5_35-4_79_2_182:4.18.2.22
	Kernel-5_35-4_79_2_181:4.18.2.22
	Kernel-5_35-4_79_2_180:4.18.2.22
	Kernel-5_35-4_79_2_179:4.18.2.22
	Kernel-5_35-4_79_2_178:4.18.2.22
	Kernel-5_35-4_79_2_177:4.18.2.21
	Kernel-5_35-4_79_2_176:4.18.2.21
	Kernel-5_35-4_79_2_175:4.18.2.21
	Kernel-5_35-4_79_2_174:4.18.2.21
	Kernel-5_35-4_79_2_173:4.18.2.21
	Kernel-5_35-4_79_2_172:4.18.2.21
	Kernel-5_35-4_79_2_171:4.18.2.21
	Kernel-5_35-4_79_2_170:4.18.2.21
	Kernel-5_35-4_79_2_169:4.18.2.21
	Kernel-5_35-4_79_2_168:4.18.2.21
	Kernel-5_35-4_79_2_167:4.18.2.21
	Kernel-5_35-4_79_2_166:4.18.2.21
	Kernel-5_35-4_79_2_165:4.18.2.21
	RPi_merge:4.18.2.18.2.1
	Kernel-5_35-4_79_2_147_2_23:4.18.2.18.2.1
	Kernel-5_35-4_79_2_147_2_22:4.18.2.18
	Kernel-5_35-4_79_2_147_2_21:4.18.2.18
	Kernel-5_35-4_79_2_147_2_20:4.18.2.18
	Kernel-5_35-4_79_2_147_2_19:4.18.2.18
	Kernel-5_35-4_79_2_147_2_18:4.18.2.18
	Kernel-5_35-4_79_2_164:4.18.2.21
	Kernel-5_35-4_79_2_163:4.18.2.21
	Kernel-5_35-4_79_2_147_2_17:4.18.2.18
	Kernel-5_35-4_79_2_147_2_16:4.18.2.18
	Kernel-5_35-4_79_2_147_2_15:4.18.2.18
	Kernel-5_35-4_79_2_162:4.18.2.21
	Kernel-5_35-4_79_2_161:4.18.2.21
	Kernel-5_35-4_79_2_147_2_14:4.18.2.18
	Kernel-5_35-4_79_2_147_2_13:4.18.2.18
	Kernel-5_35-4_79_2_160:4.18.2.21
	Kernel-5_35-4_79_2_159:4.18.2.21
	Kernel-5_35-4_79_2_158:4.18.2.21
	Kernel-5_35-4_79_2_157:4.18.2.21
	Kernel-5_35-4_79_2_156:4.18.2.21
	Kernel-5_35-4_79_2_147_2_12:4.18.2.18
	Kernel-5_35-4_79_2_147_2_11:4.18.2.18
	Kernel-5_35-4_79_2_155:4.18.2.21
	Kernel-5_35-4_79_2_147_2_10:4.18.2.18
	Kernel-5_35-4_79_2_154:4.18.2.21
	Kernel-5_35-4_79_2_153:4.18.2.21
	Kernel-5_35-4_79_2_147_2_9:4.18.2.18
	Kernel-5_35-4_79_2_152:4.18.2.21
	Kernel-5_35-4_79_2_151:4.18.2.20
	Kernel-5_35-4_79_2_147_2_8:4.18.2.18
	Kernel-5_35-4_79_2_147_2_7:4.18.2.18
	Kernel-5_35-4_79_2_150:4.18.2.19
	Kernel-5_35-4_79_2_147_2_6:4.18.2.18
	Kernel-5_35-4_79_2_147_2_5:4.18.2.18
	Kernel-5_35-4_79_2_149:4.18.2.18
	Kernel-5_35-4_79_2_147_2_4:4.18.2.18
	Kernel-5_35-4_79_2_147_2_3:4.18.2.18
	Kernel-5_35-4_79_2_148:4.18.2.18
	Kernel-5_35-4_79_2_147_2_2:4.18.2.18
	Kernel-5_35-4_79_2_147_2_1:4.18.2.18
	RPi:4.18.2.18.0.2
	RPi_bp:4.18.2.18
	Kernel-5_35-4_79_2_98_2_52_2_1:4.18.2.12.2.3
	alees_Kernel_dev:4.18.2.12.2.3.0.2
	alees_Kernel_dev_bp:4.18.2.12.2.3
	Kernel-5_35-4_79_2_147:4.18.2.18
	Kernel-5_35-4_79_2_146:4.18.2.18
	Kernel-5_35-4_79_2_145:4.18.2.18
	Kernel-5_35-4_79_2_144:4.18.2.18
	Kernel-5_35-4_79_2_143:4.18.2.18
	Kernel-5_35-4_79_2_142:4.18.2.18
	Kernel-5_35-4_79_2_141:4.18.2.18
	Kernel-5_35-4_79_2_140:4.18.2.18
	Kernel-5_35-4_79_2_139:4.18.2.18
	Kernel-5_35-4_79_2_138:4.18.2.18
	Kernel-5_35-4_79_2_137:4.18.2.18
	Kernel-5_35-4_79_2_136:4.18.2.17
	Kernel-5_35-4_79_2_135:4.18.2.18
	Kernel-5_35-4_79_2_134:4.18.2.18
	Kernel-5_35-4_79_2_133:4.18.2.17
	Kernel-5_35-4_79_2_132:4.18.2.17
	Kernel-5_35-4_79_2_131:4.18.2.17
	Kernel-5_35-4_79_2_130:4.18.2.17
	Kernel-5_35-4_79_2_129:4.18.2.17
	Kernel-5_35-4_79_2_128:4.18.2.17
	Kernel-5_35-4_79_2_127:4.18.2.17
	Kernel-5_35-4_79_2_126:4.18.2.16
	Kernel-5_35-4_79_2_125:4.18.2.15
	Kernel-5_35-4_79_2_124:4.18.2.14
	Kernel-5_35-4_79_2_123:4.18.2.14
	Cortex_merge:4.18.2.12.2.3
	Kernel-5_35-4_79_2_122:4.18.2.13
	Kernel-5_35-4_79_2_98_2_54:4.18.2.12.2.3
	Kernel-5_35-4_79_2_98_2_53:4.18.2.12.2.3
	Kernel-5_35-4_79_2_98_2_52:4.18.2.12.2.3
	Kernel-5_35-4_79_2_98_2_51:4.18.2.12.2.3
	Kernel-5_35-4_79_2_98_2_50:4.18.2.12.2.3
	Kernel-5_35-4_79_2_98_2_49:4.18.2.12.2.3
	Kernel-5_35-4_79_2_98_2_48:4.18.2.12.2.3
	Kernel-5_35-4_79_2_121:4.18.2.13
	Kernel-5_35-4_79_2_98_2_47:4.18.2.12.2.3
	Kernel-5_35-4_79_2_120:4.18.2.13
	Kernel-5_35-4_79_2_98_2_46:4.18.2.12.2.3
	Kernel-5_35-4_79_2_119:4.18.2.13
	Kernel-5_35-4_79_2_98_2_45:4.18.2.12.2.3
	Kernel-5_35-4_79_2_98_2_44:4.18.2.12.2.3
	Kernel-5_35-4_79_2_118:4.18.2.13
	Kernel-5_35-4_79_2_98_2_43:4.18.2.12.2.3
	Kernel-5_35-4_79_2_117:4.18.2.13
	Kernel-5_35-4_79_2_116:4.18.2.13
	Kernel-5_35-4_79_2_98_2_42:4.18.2.12.2.3
	Kernel-5_35-4_79_2_115:4.18.2.13
	Kernel-5_35-4_79_2_98_2_41:4.18.2.12.2.3
	Kernel-5_35-4_79_2_98_2_40:4.18.2.12.2.3
	Kernel-5_35-4_79_2_114:4.18.2.13
	Kernel-5_35-4_79_2_98_2_39:4.18.2.12.2.3
	Kernel-5_35-4_79_2_98_2_38:4.18.2.12.2.3
	Kernel-5_35-4_79_2_113:4.18.2.13
	Kernel-5_35-4_79_2_112:4.18.2.13
	Kernel-5_35-4_79_2_98_2_37:4.18.2.12.2.3
	Kernel-5_35-4_79_2_98_2_36:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_35:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_34:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_33:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_32:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_31:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_30:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_29:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_28:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_27:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_26:4.18.2.12.2.2
	Kernel-5_35-4_79_2_111:4.18.2.13
	Kernel-5_35-4_79_2_98_2_25:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_24:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_23:4.18.2.12.2.2
	Kernel-5_35-4_79_2_110:4.18.2.13
	Kernel-5_35-4_79_2_98_2_22:4.18.2.12.2.2
	Kernel-5_35-4_79_2_109:4.18.2.13
	Kernel-5_35-4_79_2_98_2_21:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_20:4.18.2.12.2.2
	Kernel-5_35-4_79_2_108:4.18.2.13
	Kernel-5_35-4_79_2_107:4.18.2.13
	Kernel-5_35-4_79_2_98_2_19:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_18:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_17:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_16:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_15:4.18.2.12.2.2
	Kernel-5_35-4_79_2_106:4.18.2.13
	Kernel-5_35-4_79_2_105:4.18.2.13
	Kernel-5_35-4_79_2_104:4.18.2.12
	Kernel-5_35-4_79_2_98_2_14:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_13:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_12:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_11:4.18.2.12.2.2
	Kernel-5_35-4_79_2_98_2_10:4.18.2.12.2.1
	Kernel-5_35-4_79_2_98_2_9:4.18.2.12.2.1
	Kernel-5_35-4_79_2_103:4.18.2.12
	Kernel-5_35-4_79_2_102:4.18.2.12
	Kernel-5_35-4_79_2_98_2_8:4.18.2.12.2.1
	Kernel-5_35-4_79_2_98_2_7:4.18.2.12.2.1
	Kernel-5_35-4_79_2_98_2_6:4.18.2.12.2.1
	Kernel-5_35-4_79_2_98_2_5:4.18.2.12
	Kernel-5_35-4_79_2_98_2_4:4.18.2.12
	Kernel-5_35-4_79_2_101:4.18.2.12
	Kernel-5_35-4_79_2_100:4.18.2.12
	Kernel-5_35-4_79_2_99:4.18.2.12
	Kernel-5_35-4_79_2_98_2_3:4.18.2.12
	Kernel-5_35-4_79_2_98_2_2:4.18.2.12
	Kernel-5_35-4_79_2_98_2_1:4.18.2.12
	Cortex:4.18.2.12.0.2
	Cortex_bp:4.18.2.12
	Kernel-5_35-4_79_2_98:4.18.2.12
	Kernel-5_35-4_79_2_97:4.18.2.12
	Kernel-5_35-4_79_2_96:4.18.2.12
	Kernel-5_35-4_79_2_95:4.18.2.12
	Kernel-5_35-4_79_2_94:4.18.2.12
	Kernel-5_35-4_79_2_93:4.18.2.12
	Kernel-5_35-4_79_2_92:4.18.2.12
	Kernel-5_35-4_79_2_91:4.18.2.12
	Kernel-5_35-4_79_2_90:4.18.2.12
	Kernel-5_35-4_79_2_89:4.18.2.12
	Kernel-5_35-4_79_2_88:4.18.2.12
	Kernel-5_35-4_79_2_87:4.18.2.12
	Kernel-5_35-4_79_2_86:4.18.2.12
	Kernel-5_35-4_79_2_85:4.18.2.12
	Kernel-5_35-4_79_2_84:4.18.2.12
	Kernel-5_35-4_79_2_83:4.18.2.12
	Kernel-5_35-4_79_2_82:4.18.2.12
	Kernel-5_35-4_79_2_81:4.18.2.12
	Kernel-5_35-4_79_2_80:4.18.2.12
	Kernel-5_35-4_79_2_79:4.18.2.12
	Kernel-5_35-4_79_2_78:4.18.2.12
	Kernel-5_35-4_79_2_77:4.18.2.12
	RO_5_07:4.18.2.12
	Kernel-5_35-4_79_2_76:4.18.2.12
	Kernel-5_35-4_79_2_75:4.18.2.12
	Kernel-5_35-4_79_2_74:4.18.2.12
	Kernel-5_35-4_79_2_73:4.18.2.12
	Kernel-5_35-4_79_2_72:4.18.2.12
	Kernel-5_35-4_79_2_71:4.18.2.12
	Kernel-5_35-4_79_2_70:4.18.2.12
	Kernel-5_35-4_79_2_69:4.18.2.12
	Kernel-5_35-4_79_2_68:4.18.2.12
	Kernel-5_35-4_79_2_67:4.18.2.12
	Kernel-5_35-4_79_2_66:4.18.2.12
	Kernel-5_35-4_79_2_65:4.18.2.12
	Kernel-5_35-4_79_2_64:4.18.2.12
	Kernel-5_35-4_79_2_63:4.18.2.12
	Kernel-5_35-4_79_2_62:4.18.2.12
	Kernel-5_35-4_79_2_61:4.18.2.12
	Kernel-5_35-4_79_2_59:4.18.2.12
	Kernel-5_35-4_79_2_58:4.18.2.12
	Kernel-5_35-4_79_2_57:4.18.2.12
	Kernel-5_35-4_79_2_56:4.18.2.12
	Kernel-5_35-4_79_2_55:4.18.2.12
	Kernel-5_35-4_79_2_54:4.18.2.12
	Kernel-5_35-4_79_2_53:4.18.2.12
	Kernel-5_35-4_79_2_52:4.18.2.12
	Kernel-5_35-4_79_2_51:4.18.2.12
	Kernel-5_35-4_79_2_50:4.18.2.11
	Kernel-5_35-4_79_2_49:4.18.2.11
	Kernel-5_35-4_79_2_48:4.18.2.10
	Kernel-5_47:4.19
	Kernel-5_46-4_90_2_1:4.19
	nbingham_Kernel_FastNC_dev_bp:4.19
	nbingham_Kernel_FastNC_dev:4.19.0.2
	Kernel-5_46:4.19
	Kernel-5_45:4.19
	Kernel-5_35-4_79_2_47:4.18.2.9
	Kernel-5_35-4_79_2_46:4.18.2.9
	Kernel-5_35-4_79_2_45:4.18.2.8
	Kernel-5_35-4_79_2_44:4.18.2.8
	Kernel-5_35-4_79_2_25_2_2:4.18.2.8
	Kernel-5_35-4_79_2_43:4.18.2.8
	Kernel-5_35-4_79_2_42:4.18.2.8
	Kernel-5_35-4_79_2_41:4.18.2.8
	Kernel-5_35-4_79_2_40:4.18.2.8
	Kernel-5_35-4_79_2_39:4.18.2.8
	Kernel-5_35-4_79_2_38:4.18.2.8
	Kernel-5_35-4_79_2_37:4.18.2.8
	Kernel-5_35-4_79_2_36:4.18.2.8
	Kernel-5_35-4_79_2_35:4.18.2.8
	Kernel-5_35-4_79_2_34:4.18.2.8
	Kernel-5_35-4_79_2_33:4.18.2.8
	Kernel-5_35-4_79_2_32:4.18.2.8
	Kernel-5_44:4.19
	Kernel-5_35-4_79_2_25_2_1:4.18.2.8
	Kernel-5_43:4.19
	Kernel-5_35-4_79_2_31:4.18.2.8
	Kernel-5_35-4_79_2_30:4.18.2.8
	Kernel-5_35-4_79_2_29:4.18.2.8
	Kernel-5_35-4_79_2_28:4.18.2.8
	Kernel-5_35-4_79_2_27:4.18.2.8
	Kernel-5_35-4_79_2_26:4.18.2.8
	Kernel-5_42:4.19
	Kernel-5_41:4.19
	Kernel-5_40:4.19
	Kernel-5_35-4_79_2_25:4.18.2.8
	Kernel-5_35-4_79_2_24:4.18.2.8
	Kernel-5_35-4_79_2_23:4.18.2.8
	Kernel-5_35-4_79_2_22:4.18.2.8
	Kernel-5_35-4_79_2_21:4.18.2.8
	Kernel-5_35-4_79_2_20:4.18.2.8
	Kernel-5_35-4_79_2_19:4.18.2.8
	Kernel-5_35-4_79_2_18:4.18.2.7
	Kernel-5_35-4_79_2_17:4.18.2.7
	Kernel-5_35-4_79_2_16:4.18.2.7
	Kernel-5_35-4_79_2_15:4.18.2.7
	Kernel-5_35-4_79_2_14:4.18.2.7
	Kernel-5_39:4.19
	Kernel-5_13-4_52_2_1:4.14
	Bethany:4.14.0.2
	Kernel-5_38:4.19
	Kernel-5_35-4_79_2_13:4.18.2.7
	Kernel-5_35-4_79_2_12:4.18.2.6
	Kernel-5_35-4_79_2_11:4.18.2.6
	Kernel-5_37:4.19
	Kernel-5_35-4_79_2_10:4.18.2.6
	Kernel-5_35-4_79_2_9:4.18.2.5
	Kernel-5_36:4.19
	Kernel-5_35-4_79_2_8:4.18.2.3
	Kernel-5_35-4_79_2_7:4.18.2.3
	Kernel-5_35-4_79_2_6:4.18.2.3
	Kernel-5_35-4_79_2_5:4.18.2.3
	Kernel-5_35-4_79_2_4:4.18.2.3
	Kernel-5_35-4_79_2_3:4.18.2.3
	Kernel-5_35-4_79_2_2:4.18.2.2
	dellis_autobuild_BaseSW:4.18
	Kernel-5_35-4_79_2_1:4.18.2.1
	HAL:4.18.0.2
	Kernel-5_35:4.18
	Kernel-5_34:4.18
	Kernel-5_33:4.18
	Kernel-5_32:4.18
	Kernel-5_31:4.17
	Kernel-5_30:4.17
	Kernel-5_29:4.17
	Kernel-5_28:4.17
	Kernel-5_27:4.17
	Kernel-5_26:4.16
	Kernel-5_25:4.16
	Kernel-5_24:4.16
	Kernel-5_23:4.15
	Kernel-5_22:4.14
	sbrodie_sedwards_16Mar2000:4.14
	Kernel-5_21:4.14
	Kernel-5_20:4.14
	Kernel-5_19:4.14
	Kernel-5_18:4.14
	Kernel-5_17:4.14
	Kernel-5_16:4.14
	Kernel-5_15:4.14
	Kernel-5_14:4.14
	Kernel-5_13:4.14
	Kernel-5_12:4.14
	Kernel-5_11:4.14
	Kernel-5_10:4.14
	Kernel-5_09:4.14
	Kernel-5_08:4.14
	Kernel-5_07:4.14
	Kernel-5_06:4.14
	Kernel-5_05:4.14
	Kernel-5_04:4.14
	Kernel-5_03:4.14
	Kernel-5_02:4.14
	Kernel-5_01:4.14
	Kernel-5_00:4.14
	Kernel-4_99:4.14
	Kernel-4_98:4.14
	Kernel-4_97:4.13
	Kernel-4_96:4.13
	Kernel-4_95:4.13
	Kernel-4_94:4.13
	Kernel-4_93:4.13
	Kernel-4_92:4.13
	Kernel-4_91:4.12
	Kernel-4_90:4.12
	dcotton_autobuild_BaseSW:4.19
	Kernel-4_89:4.12
	Kernel-4_88:4.12
	Kernel-4_87:4.12
	Kernel-4_86:4.12
	Kernel-4_85:4.11
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.4.4.9.2.1
	Kernel-4_84:4.11
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.4.4.9.2.1
	Ursula_RiscPC_bp:4.4.4.9
	Kernel-4_83:4.10
	Kernel-4_82:4.9
	Kernel-4_81:4.9
	Kernel-4_80:4.8
	Kernel-4_79:4.8
	Kernel-4_78:4.8
	Kernel-4_77:4.8
	Kernel-4_76:4.8
	Kernel-4_75:4.8
	Kernel-4_74:4.8
	Kernel-4_73:4.8
	Kernel-4_72:4.8
	Kernel-4_71:4.7
	Kernel-4_70:4.7
	Kernel-4_69:4.7
	Kernel-4_68:4.6
	mstphens_UrsulaRiscPCBuild_20Nov98:4.4.4.9.2.1
	Ursula_RiscPC:4.4.4.9.0.2
	Kernel-4_63-1_1_2_5:4.1.7.6
	Kernel-4_63-1_1_2_4:4.1.7.6
	Kernel-4_67:4.6
	Kernel-4_66:4.6
	Kernel-4_63-1_1_2_3:4.1.7.6
	Kernel-4_65:4.6
	Ursula_merge:4.4.4.1
	Kernel-4_64:4.5
	mstphens_Kernel-3_81:4.4.4.10
	Kernel-4_63-1_1_2_2:4.1.7.6
	nicke_Kernel_4_62:4.1.7.5
	rthornb_UrsulaBuild-19Aug1998:4.4.4.9
	UrsulaBuild_FinalSoftload:4.4.4.9
	rthornb_UrsulaBuild-12Aug1998:4.4.4.9
	aglover_UrsulaBuild-05Aug1998:4.4.4.9
	rthornb_UrsulaBuild-29Jul1998:4.4.4.9
	rthornb_UrsulaBuild-22Jul1998:4.4.4.9
	nturton_v459:4.1.7.3
	nturton_v460:4.1.7.3
	rthornb_UrsulaBuild-15Jul1998:4.4.4.9
	rthornb_UrsulaBuild-07Jul1998:4.4.4.9
	rthornb_UrsulaBuild-17Jun1998:4.4.4.9
	rthornb_UrsulaBuild-03Jun1998:4.4.4.9
	rthornb_UrsulaBuild-27May1998:4.4.4.9
	mstphens_Kernel-3_80:4.4.4.9
	rthornb_UrsulaBuild-21May1998:4.4.4.9
	afrost_Boca-1_2-Beta:4.1.7.4
	rthornb_UrsulaBuild_01May1998:4.4.4.8
	afrost_NC2_Generic:4.1.7.3
	Spinner_B20_2:4.1.7.3
	Spinner_19_3:4.1.7.3
	Spinner_B18:4.1.7.3
	Spinner_B17:4.1.7.3
	Spinner_B15:4.1.7.3
	Spinner_B14:4.1.7.3
	Spinner_B13:4.1.7.3
	Spinner_B12:4.1.7.3
	Spinner_B10:4.1.7.3
	Daytona:4.4.0.2
	Daytona_bp:4.4
	Ursula_bp:4.4
	Ursula:4.4.0.4
	Spinner_B7:4.1.7.3
	RO_3_71:4.1.3.2
	ARTtmp_merge:4.1.7.2
	Spin_3Apr97:4.1.7.2
	ARTtmp:4.1.7.2.0.2
	Spin_merge:4.1.7.6
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.30
date	2018.11.07.22.28.10;	author jlee;	state Exp;
branches;
next	4.29;
commitid	Ub9LVqEF46x8X3ZA;

4.29
date	2017.09.09.10.35.42;	author rool;	state Exp;
branches;
next	4.28;
commitid	SuZJGVb4fAmIDv6A;

4.28
date	2016.12.17.18.33.44;	author jlee;	state Exp;
branches
	4.28.2.1;
next	4.27;
commitid	gK0l0oJHtyZOPmyz;

4.27
date	2016.12.13.17.03.40;	author jlee;	state Exp;
branches;
next	4.26;
commitid	ICF3hx0HXNFUsQxz;

4.26
date	2016.08.02.22.10.43;	author jlee;	state Exp;
branches;
next	4.25;
commitid	CnQYuUGzojQfrMgz;

4.25
date	2016.07.24.10.50.43;	author rsprowson;	state Exp;
branches;
next	4.24;
commitid	x4yCuRzf90zVXyfz;

4.24
date	2016.06.30.21.14.27;	author jlee;	state Exp;
branches;
next	4.23;
commitid	juXQJ5NfO6DKbxcz;

4.23
date	2016.06.30.20.59.46;	author jlee;	state Exp;
branches;
next	4.22;
commitid	skOEjp3ipLHx6xcz;

4.22
date	2016.06.30.20.42.05;	author jlee;	state Exp;
branches;
next	4.21;
commitid	bDF3DCxdmyMD0xcz;

4.21
date	2016.06.30.20.28.55;	author jlee;	state Exp;
branches;
next	4.20;
commitid	lMnWzoE9eJz3Wwcz;

4.20
date	2016.06.30.20.08.08;	author jlee;	state Exp;
branches;
next	4.19;
commitid	IWoXxARWeuLDOwcz;

4.19
date	2000.10.10.10.16.31;	author sbrodie;	state Exp;
branches;
next	4.18;

4.18
date	2000.08.18.09.31.45;	author sbrodie;	state Exp;
branches
	4.18.2.1;
next	4.17;

4.17
date	2000.05.10.09.45.59;	author dcotton;	state Exp;
branches;
next	4.16;

4.16
date	2000.04.13.10.37.27;	author kbracey;	state Exp;
branches;
next	4.15;

4.15
date	2000.04.04.14.27.30;	author kbracey;	state Exp;
branches;
next	4.14;

4.14
date	99.10.18.16.15.29;	author kbracey;	state Exp;
branches;
next	4.13;

4.13
date	99.10.07.11.09.23;	author kbracey;	state Exp;
branches;
next	4.12;

4.12
date	99.09.16.13.53.35;	author kbracey;	state Exp;
branches;
next	4.11;

4.11
date	99.08.19.10.52.30;	author kbracey;	state Exp;
branches;
next	4.10;

4.10
date	99.08.17.11.16.19;	author kbracey;	state Exp;
branches;
next	4.9;

4.9
date	99.08.03.09.58.59;	author kbracey;	state Exp;
branches;
next	4.8;

4.8
date	99.04.08.13.23.45;	author kbracey;	state Exp;
branches;
next	4.7;

4.7
date	99.02.09.10.57.38;	author nturton;	state Exp;
branches;
next	4.6;

4.6
date	98.10.01.07.42.39;	author kbracey;	state Exp;
branches;
next	4.5;

4.5
date	98.09.30.08.42.30;	author kbracey;	state Exp;
branches;
next	4.4;

4.4
date	97.05.13.14.10.31;	author mstphens;	state Exp;
branches
	4.4.4.1;
next	4.3;

4.3
date	97.05.07.05.51.49;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.01.21.14.07.02;	author nturton;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.41.17;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.28.2.1
date	2017.09.10.11.27.21;	author jlee;	state Exp;
branches;
next	;
commitid	EGooxXrB27MqTD6A;

4.18.2.1
date	2000.09.15.12.38.01;	author kbracey;	state Exp;
branches;
next	4.18.2.2;

4.18.2.2
date	2000.10.02.08.52.19;	author kbracey;	state Exp;
branches;
next	4.18.2.3;

4.18.2.3
date	2000.10.03.12.05.59;	author mstephen;	state Exp;
branches;
next	4.18.2.4;

4.18.2.4
date	2000.10.09.15.59.15;	author kbracey;	state Exp;
branches;
next	4.18.2.5;

4.18.2.5
date	2000.10.10.10.37.10;	author sbrodie;	state Exp;
branches;
next	4.18.2.6;

4.18.2.6
date	2000.10.16.11.55.38;	author kbracey;	state Exp;
branches;
next	4.18.2.7;

4.18.2.7
date	2000.11.10.15.51.34;	author kbracey;	state Exp;
branches;
next	4.18.2.8;

4.18.2.8
date	2001.03.07.15.12.57;	author kbracey;	state Exp;
branches;
next	4.18.2.9;

4.18.2.9
date	2001.07.11.09.35.19;	author dcotton;	state Exp;
branches;
next	4.18.2.10;

4.18.2.10
date	2002.10.07.17.29.41;	author kbracey;	state Exp;
branches;
next	4.18.2.11;

4.18.2.11
date	2002.10.16.17.23.13;	author bavison;	state Exp;
branches;
next	4.18.2.12;

4.18.2.12
date	2002.11.30.00.31.07;	author bavison;	state Exp;
branches
	4.18.2.12.2.1;
next	4.18.2.13;

4.18.2.13
date	2009.10.28.16.16.13;	author bavison;	state Exp;
branches;
next	4.18.2.14;

4.18.2.14
date	2011.11.26.21.11.15;	author jlee;	state Exp;
branches;
next	4.18.2.15;
commitid	cI3W0zbtALQG6TIv;

4.18.2.15
date	2011.11.27.12.34.45;	author rsprowson;	state Exp;
branches;
next	4.18.2.16;
commitid	QtdLV6zjuPNxdYIv;

4.18.2.16
date	2011.11.27.12.54.07;	author rsprowson;	state Exp;
branches;
next	4.18.2.17;
commitid	qUSTS070aqq3kYIv;

4.18.2.17
date	2011.11.27.19.18.15;	author rsprowson;	state Exp;
branches;
next	4.18.2.18;
commitid	iuIXfUOByAFYr0Jv;

4.18.2.18
date	2012.01.27.21.16.25;	author rsprowson;	state Exp;
branches
	4.18.2.18.2.1;
next	4.18.2.19;
commitid	JuFgTDI186HY8RQv;

4.18.2.19
date	2012.05.21.19.31.38;	author rsprowson;	state Exp;
branches;
next	4.18.2.20;
commitid	oEtPURiKNEPMRC5w;

4.18.2.20
date	2012.05.26.09.00.26;	author rsprowson;	state Exp;
branches;
next	4.18.2.21;
commitid	EMsCe1GQBPXgdd6w;

4.18.2.21
date	2012.06.04.23.10.35;	author jlee;	state Exp;
branches;
next	4.18.2.22;
commitid	Fel7FC5bdci2Dr7w;

4.18.2.22
date	2012.12.05.01.16.18;	author jlee;	state Exp;
branches;
next	4.18.2.23;
commitid	jNXy5BkvBl5srYuw;

4.18.2.23
date	2013.01.27.17.50.27;	author rsprowson;	state Exp;
branches;
next	4.18.2.24;
commitid	tDlfhdSfOxFReSBw;

4.18.2.24
date	2013.03.28.21.36.24;	author jlee;	state Exp;
branches;
next	4.18.2.25;
commitid	UN0GP6eB0LlNyBJw;

4.18.2.25
date	2013.11.20.20.29.58;	author rsprowson;	state Exp;
branches;
next	4.18.2.26;
commitid	X1FKtc2EAz7Jz3ex;

4.18.2.26
date	2013.12.15.21.34.04;	author jlee;	state Exp;
branches;
next	4.18.2.27;
commitid	KwuK29hKRyXO7hhx;

4.18.2.27
date	2015.01.11.23.10.49;	author jlee;	state Exp;
branches;
next	4.18.2.28;
commitid	a9HNIsO4R7LP3F5y;

4.18.2.28
date	2015.08.14.22.02.31;	author jlee;	state Exp;
branches;
next	4.18.2.29;
commitid	6gyfvmM0cNZULhxy;

4.18.2.29
date	2016.03.10.22.57.41;	author jlee;	state Exp;
branches;
next	4.18.2.30;
commitid	DAXUqMY2ucjim9Yy;

4.18.2.30
date	2016.05.19.21.03.49;	author jlee;	state Exp;
branches;
next	;
commitid	7f3vfXP8BWCNt87z;

4.18.2.12.2.1
date	2009.05.10.20.22.31;	author bavison;	state Exp;
branches;
next	4.18.2.12.2.2;

4.18.2.12.2.2
date	2009.07.23.00.57.11;	author jlee;	state Exp;
branches;
next	4.18.2.12.2.3;

4.18.2.12.2.3
date	2011.05.22.19.45.03;	author jlee;	state Exp;
branches;
next	;
commitid	FcIrTQvrz0zQFIkv;

4.18.2.18.2.1
date	2012.09.18.15.50.01;	author jlee;	state Exp;
branches;
next	;
commitid	jeuxYpI6CQUxM1lw;

4.4.4.1
date	97.05.20.10.23.37;	author kbracey;	state Exp;
branches;
next	4.4.4.2;

4.4.4.2
date	97.05.21.09.30.11;	author mstphens;	state Exp;
branches;
next	4.4.4.3;

4.4.4.3
date	97.05.23.13.06.50;	author kbracey;	state Exp;
branches;
next	4.4.4.4;

4.4.4.4
date	97.09.09.13.33.08;	author mstphens;	state Exp;
branches;
next	4.4.4.5;

4.4.4.5
date	97.10.21.15.31.14;	author mstphens;	state Exp;
branches;
next	4.4.4.6;

4.4.4.6
date	97.12.08.14.34.23;	author mstphens;	state Exp;
branches;
next	4.4.4.7;

4.4.4.7
date	98.03.26.11.25.40;	author mstphens;	state Exp;
branches;
next	4.4.4.8;

4.4.4.8
date	98.04.14.11.23.53;	author mstphens;	state Exp;
branches;
next	4.4.4.9;

4.4.4.9
date	98.05.19.15.52.03;	author sproven;	state Exp;
branches
	4.4.4.9.2.1;
next	4.4.4.10;

4.4.4.10
date	98.09.24.13.17.06;	author mstphens;	state Exp;
branches;
next	4.4.4.11;

4.4.4.11
date	98.11.13.14.25.43;	author mstphens;	state Exp;
branches;
next	;

4.4.4.9.2.1
date	98.11.23.14.59.07;	author mstphens;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.41.17;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.00.02;	author nturton;	state Exp;
branches
	4.1.3.1.2.1;
next	4.1.3.2;

4.1.3.2
date	97.05.01.08.09.24;	author kbracey;	state Exp;
branches;
next	;

4.1.3.1.2.1
date	97.04.30.16.46.01;	author kbracey;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.10.56;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.03.30;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.03.14.18.18.02;	author scormie;	state Exp;
branches;
next	4.1.7.3;

4.1.7.3
date	97.04.30.10.31.29;	author scormie;	state Exp;
branches;
next	4.1.7.4;

4.1.7.4
date	98.06.05.09.31.53;	author afrost;	state Exp;
branches;
next	4.1.7.5;

4.1.7.5
date	98.07.21.17.57.38;	author nturton;	state Exp;
branches;
next	4.1.7.6;

4.1.7.6
date	98.09.24.12.36.38;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.30
log
@Attempt to tidy up substitute screen mode selection logic
Detail:
  Over the years the OS's substitute screen mode selection logic has grown to be a tangled mess, and the logic it does implement isn't always very useful. Additionally, the kernel is structured in such a way that it can be hard for modules to override it.
  This set of changes aims to fix the many of the problems, by doing the following:
  - Moving all substitute mode selection logic out of the core VDU driver code and into a Service_ModeTranslation handler. This means you now only have one place in the kernel to look instead of several, and modules can override the behaviour by claiming/blocking the service call as appropriate.
  - Moving handling of the built-in VIDC lists out of the core VDU driver code and into a Service_ModeExtension handler. This means programs can now inspect these VIDC lists by issuing the right service call (although you are essentially limited to lists which the GraphicsV driver is OK with)
  - Moving *TV interlace & offset adjustment logic into the Service_ModeExtension handler, since they're legacy things which can be handled more cleanly for MDF/EDID (and the old code was poking memory the kernel didn't own)
  - Adding a Service_EnumerateScreenModes implementation, so that if you end up in the desktop with ScreenModes non-functional, the display manager at least has something useful to show you
  - Enhancing the handling of the built-in numbered modes so that they are now available in any colour depth; the Service_ModeExtension handler (and related handlers) treat the builtin VIDC lists as a set of mode timings, not a discrete set of modes
  - Substitute mode selection logic is a complete re-write. Instead of trying a handful of numbered fallback modes, it now tries:
    - Same mode but at higher colour depths
    - Same mode but at lower colour depths
    - Alternate resolutions (half-width mode with no double-pixel if original request was for double-pixel, and default resolution for monitor type)
  - Combined with the logic to allow the builtin VIDC lists to be used at any colour depth, this means that the kernel should now be able to find substitute modes for machines which lack support for <=8bpp modes (e.g. OMAP5)
  - Additionally the mode substitution code will attempt to retain as many properties of the originally requested mode as possible (eigen values, gap mode type, etc.)
  Other improvements:
  - The kernel now actually vets the builtin VIDC lists instead of assuming that they'll work (which also means they'll have the correct ExtraBytes value, where applicable)
  - The kernel now uses GraphicsV 19 (VetMode2) to vet the mode during the mode switch process, using the result to detect where the framebuffer will be placed. This allows for GraphicsV drivers to switch between DA 2 and external framestores on a per-mode basis.
  - The kernel now supports mode selectors which specify LineLength values which are larger than necessary; this will get translated to a suitable ExtraBytes control list item (+ combined with whatever padding the driver indicates is necessary via the VetMode2 result)
  File changes:
  - hdr/KernelWS - Reserve space for a VIDC list, since the Service_ModeExtension implementation typically can't use the built-in list as-is
  - s/Arthur3 - Issue Service_ModeFileChanged when the configured monitor type is changed, so that DisplayManager + friends are aware that the set of available modes has changed
  - s/GetAll - Fiddle with GETs a bit
  - s/MemMap2 - Extra LTORG
  - s/NewIRQs - Small routine to install/uninstall false VSync routine (previously from PushModeInfo, which wasn't really the appropriate place for it)
  - s/Utility - Hook up the extra service call handlers
  - s/vdu/legacymodes - New file containing the new service call implementations, and some related code
  - s/vdu/vdudecl - Move mode workspace definition here, from vdumodes
  - s/vdu/vdudriver - Remove assorted bits of mode substitution code. Plug in new bits for calling GraphicsV 19 during mode set, and deal with ExtraBytes/LineLength during PushModeInfo
  - s/vdu/vdumodes - Move some workspace definitions to s/vdu/vdudecl. Tweak how the builtin VIDC lists are stored.
  - s/vdu/vduswis - Rip out more mode substitution code. Issue Service_ModeFileChanged when monitor type is changed by OS_ScreenMode.
Admin:
  Tested on Raspberry Pi 3, Iyonix, IGEPv5


Version 6.14. Tagged as 'Kernel-6_14'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > GetAll

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:CPU.Arch
        GET     Hdr:Machine.<Machine>
        GET     Hdr:HALSize.<HALSize>
        GET     Hdr:ImageSize.<ImageSize>
        GET     Hdr:UserIF.<UserIF>
        $GetCPU
        $GetIO
        $GetMEMC
        $GetMEMM
        $GetVIDC

        GET     hdr.Options

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; now get the headers
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


        GET     Hdr:CMOS
        GET     Hdr:Heap
        GET     Hdr:Sprite
        GET     Hdr:PublicWS
        GET     Hdr:HALEntries
        GET     Hdr:HALDevice
        GET     Hdr:OSEntries
        GET     Hdr:Services
        GET     Hdr:FSNumbers
        GET     Hdr:HighFSI
        GET     Hdr:NewErrors
        GET     Hdr:Proc
        GET     Hdr:RS423
        GET     Hdr:ModHand
        GET     Hdr:Variables
        GET     Hdr:EnvNumbers
        GET     Hdr:UpCall
        GET     Hdr:Sound
        GET     Hdr:Pointer
        GET     Hdr:Podule
        GET     Hdr:VduExt
        GET     Hdr:Buffer
        GET     Hdr:Font
        GET     Hdr:DevNos
        GET     Hdr:OsBytes
        GET     Hdr:Internatio
        GET     Hdr:Territory
        GET     Hdr:Countries
        GET     Hdr:Portable
        GET     Hdr:MsgTrans
        GET     Hdr:PaletteV
        GET     Hdr:GraphicsV
        GET     Hdr:VIDCList
        GET     Hdr:Wimp
        GET     Hdr:ColourTran
        GET     Hdr:Debug
        GET     Hdr:FileTypes
        GET     Hdr:RTC
        GET     Hdr:SerialOp
        GET     Hdr:Keyboard
        GET     Hdr:OSMem
        GET     Hdr:OSMisc
        GET     Hdr:OSRSI6
        GET     Hdr:PL310

; now the main parts of the MOS

        GET     hdr.KernelWS
        GET     hdr.KeyWS
        GET     hdr.Copro15ops ; some macros
        GET     hdr.ARMops

        GET     s.Kernel
        GET     s.ARMops
        GET     s.NewIRQs
        GET     s.Oscli
        GET     s.SysComms
        GET     s.HeapMan
        GET     s.ModHand
        $GetUnsqueeze
        GET     s.ArthurSWIs
        $GetKernelMEMC
        GET     s.Exceptions
        GET     s.ChangeDyn
        GET     s.HAL
        GET     s.Arthur2
        GET     s.LibKern
        GET     s.Utility
        GET     s.MoreComms
        GET     s.Convrsions
        GET     s.MoreSWIs
        GET     s.ExtraSWIs
        GET     s.HeapSort
        GET     s.Arthur3
        GET     s.SWINaming
        GET     s.TickEvents
        GET     s.NewReset
        $GetMessages
        GET     s.Middle
        GET     s.Super1
        GET     s.MemInfo
        GET     s.CPUFeatures
        GET     s.MemMap2
        ! 0, "Main kernel size = &" :CC: :STR: (.-KernelBase)
StartOfVduDriver
        GET     s.vdu.VduDecl
        GET     s.vdu.legacymodes
        GET     s.vdu.VduDriver
        GET     s.vdu.VduSWIs
        GET     s.vdu.VduPalette
        GET     s.vdu.vdupalxx
        GET     s.vdu.VduPlot
        GET     s.vdu.VduGrafA
        GET     s.vdu.VduGrafB
        GET     s.vdu.VduGrafC
        GET     s.vdu.VduGrafD
        GET     s.vdu.VduGrafE
        GET     s.vdu.VduGrafF
        GET     s.vdu.VduGrafG
        GET     s.vdu.VduGrafH
        GET     s.vdu.VduGrafI
        GET     s.vdu.VduGrafJ
        GET     s.vdu.VduGrafK
        GET     s.vdu.VduGrafL
        GET     s.vdu.VduGrafV
        GET     s.vdu.VduGrafHAL
        GET     s.vdu.VduWrch
        GET     s.vdu.Vdu23
        GET     s.vdu.VduPointer
        GET     s.vdu.Vdu5
        GET     s.vdu.VduCurSoft
        GET     s.vdu.VduTTX
        GET     s.vdu.VduFontL1

        ! 0, "Vdu section size = &" :CC: :STR: (.-StartOfVduDriver)

StartOfPMF
        GET     s.PMF.osinit
        GET     s.PMF.oseven
        GET     s.PMF.osbyte
        GET     s.PMF.osword
        GET     s.PMF.realtime
        GET     s.PMF.i2cutils
        GET     s.PMF.IIC
        GET     s.PMF.oswrch
        GET     s.PMF.buffer
        GET     s.PMF.key
        GET     s.PMF.mouse
        ALIGN
EndOfPMF

        ! 0, "PMF section size = &" :CC: :STR: (EndOfPMF - StartOfPMF)

StartOfAMB
        GET     s.AMBControl.AMB
EndOfAMB

        ! 0, "AMB section size = &" :CC: :STR: (EndOfAMB - StartOfAMB)

EndOfKernel
        DCD     0

        END
@


4.29
log
@Change module initialisation to be a two pass scheme
Detail:
  To make it easier to support arbitrary complexity keyboard controllers (eg. USB via DWCDriver on the Pi) have the kernel do the early keyboard recovery key press detection instead of the HAL.
  During the first pass those modules used for reading the keyboard are started, ignoring the CMOS frugal bits.
  The keyboard is then scanned for 3s, during which time the RAM is cleared (unless the HAL indicated it has already been done).
  During the second pass the remaining modules are started respecting the CMOS frugal bits. Any which were already started in the first pass are inserted into the new chain, so the keyboard is reset once and only once.

  Boot times, with a 300cs key scan time in NewReset.
  Risc PC with 160MB RAM (128+32+0).
  Times from turning on power to initial "beep", using a stopwatch.
                RISC OS 3.70 RISC OS 5.22 This OS
  ARM610        12.5         10.4         10.3
  ARM710        11.8         10.2         9.7
  StrongARM 233 11.1         9.5          8.4

  In NewReset.s:
  Remove old KbdScan code (leave Reset_IRQ_Handler for IIC only)
  If HAL_KbdScanDependencies returns a null string then present KbdDone flag and skip to full init.
  A few vestiges of soft resets removed.
  Do RAM clear when waiting for INKEY (being careful not to trash the running modules...).
  Clearing just the freepool on a 2GB Titanium cleared 7EFD6 pages (99.2%).

  In ModHand.s:
  2nd pass need to sneaky renumber the nodes (so *ROMModules is in the right order, frugal bits line up) without resetting the chain

  In HAL.s:
  Change ClearPhysRAM to ClearWkspRAM, such that it only clears the kernel workspace rather than all RAM. The bulk of the RAM is cleared during the keyboard scan by new function ClearFreePoolSection.
  Add a variant of Init_MapInRAM which clears the mapped in RAM too (as these very early claims will not be in the free pool when the RAM is cleared later).
  Remove HAL keyboard scan setup & IRQ handler.
  Fix bug in HALDebugHexTX2, the input value needs pre-shifting by 16b before continuing.

  In GetAll.s, PMF/osbyte.s:
  Use Hdr:Countries and Hdr:OsBytes for constants.

  In PMF/key.s, PMF/osinit.s:
  Relocate the key post init from PostInit to KeyPostInit.
  Changed PostInit to not tail call KeyPostInit so they can be called independently.

  In hdr/KernelWs:
  Improve comments, add InitWsStart label to refer to.

  In hdr/HALEntries:
  Add HAL_KbdScanDependencies.
  Delete KbdFlag exports.
  Took the opportunity to reorder some of the higher numbered HAL entries and re-grouping, specifically (112,120) (84,106,108,117).
Admin:
  Tested on an ARM6/ARM7/SA Risc PC, BeagleBoard xM, Iyonix, Pandaboard ES, Wandboard Quad, IPEGv5, Titanium, Pi 2 and 3.
  Requires corresponding HAL change.
  Submission for USB bounty.

Version 5.89. Tagged as 'Kernel-5_89'
@
text
@a41 1
        GET     Hdr:KernelWS
a49 1
        GET     Hdr:KeyWS
d85 2
d123 2
@


4.28
log
@Fix screen redirection when in teletext modes. Fix *ScreenLoad buffer overflow.
Detail:
  s/vdu/vdugrafl, s/vdu/vduttx - Adjust initialisation & shutdown of TTX workspace to fix workspace being erroneously freed/reinitialised when redirecting output to a sprite
  s/vdu/vdugrafk - If ScreenLoad needs to load one row at a time (e.g. when graphics window width != sprite width), allocate a block from the RMA instead of assuming that ScrLoaBuffer is large enough
  hdr/KernelWS - Get rid of ScrLoaBuffer, and shrink LargeCommon to a suitable size. Frees about 2K of VDU workspace.
  s/GetAll - Move Hdr:Sprite earlier in list of GETs
Admin:
  Tested on Raspberry Pi


Version 5.75. Tagged as 'Kernel-5_75'
@
text
@d67 1
@


4.28.2.1
log
@Merge latest changes from main branch

Version 5.89, 4.129.2.6. Tagged as 'Kernel-5_89-4_129_2_6'
@
text
@a66 1
        GET     Hdr:Countries
@


4.27
log
@Make s/ChangeDyn slightly more readable by splitting some routines out into a separate file
Detail:
  s/MemMap2 - New file containing assorted low-level memory mapping routines taken from s/ChangeDyn. N.B. There's no special significance to this being named "MemMap2", it's just a name that stuck due to some earlier (abandoned) changes which added a file named "MemMap".
  s/ChangeDyn - Remove the routines/chunks of code that were moved to s/MemMap2. Also some duplicate code removal (Regular DA grow code and DoTheGrowNotSpecified are now rely on the new DoTheGrowCommon routine for doing the actual grow)
  s/GetAll - GET s/MemMap2 at an appropriate time
Admin:
  Tested on pretty much everything currently supported


Version 5.67. Tagged as 'Kernel-5_67'
@
text
@d40 1
a50 1
        GET     Hdr:Sprite
@


4.26
log
@Add support for shareable pages and additional access privileges
Detail:
  This set of changes:
  * Refactors page table entry encoding/decoding so that it's (mostly) performed via functions in the MMU files (s.ARM600, s.VMSAv6) rather than on an ad-hoc basis as was the case previously
  * Page table entry encoding/decoding performed during ROM init is also handled via the MMU functions, which resolves some cases where the wrong cache policy was in use on ARMv6+
  * Adds basic support for shareable pages - on non-uniprocessor systems all pages will be marked as shareable (however, we are currently lacking ARMops which broadcast cache maintenance operations to other cores, so safe sharing of cacheable regions isn't possible yet)
  * Adds support for the VMSA XN flag and the "privileged ROM" access permission. These are exposed via RISC OS access privileges 4 and above, taking advantage of the fact that 4 bits have always been reserved for AP values but only 4 values were defined
  * Adds OS_Memory 17 and 18 to convert RWX-style access flags to and from RISC OS access privelege numbers; this allows us to make arbitrary changes to the mappings of AP values 4+ between different OS/hardware versions, and allows software to more easily cope with cases where the most precise AP isn't available (e.g. no XN on <=ARMv5)
  * Extends OS_Memory 24 (CheckMemoryAccess) to return executability information
  * Adds exported OSMem header containing definitions for OS_Memory and OS_DynamicArea
  File changes:
  - Makefile - export C and assembler versions of hdr/OSMem
  - Resources/UK/Messages - Add more text for OS_Memory errors
  - hdr/KernelWS - Correct comment regarding DCacheCleanAddress. Allocate workspace for MMU_PPLTrans and MMU_PPLAccess.
  - hdr/OSMem - New file containing exported OS_Memory and OS_DynamicArea constants, and public page flags
  - hdr/Options - Reduce scope of ARM6support to only cover builds which require ARMv3 support
  - s/AMBControl/Workspace - Clarify AMBNode_PPL usage
  - s/AMBControl/growp, mapslot, mapsome, memmap - Use AreaFlags_ instead of AP_
  - s/AMBControl/main, memmap - Use GetPTE instead of generating page table entry manually
  - s/ARM600 - Remove old coments relating to lack of stack. Update BangCam to use GetPTE. Update PPL tables, removing PPLTransL1 (L1 entries are now derived from L2 table on demand) and adding a separate table for ARM6. Implement the ARM600 versions of the Get*PTE ('get page table entry') and Decode*Entry functions
  - s/ARMops - Add Init_PCBTrans function to allow relevant MMU_PPLTrans/MMU_PCBTrans pointers to be set up during the pre-MMU stage of ROM init. Update ARM_Analyse to set up the pointers that are used post MMU init.
  - s/ChangeDyn - Move a bunch of flags to hdr/OSMem. Rename the AP_ dynamic area flags to AreaFlags_ to avoid name clashes and confusion with the page table AP_ values exported by Hdr:MEMM.ARM600/Hdr:MEMM.VMSAv6. Also generate the relevant flags for OS_Memory 24 so that it can refer to the fixed areas by their name instead of hardcoding the permissions.
  - s/GetAll - GET Hdr:OSMem
  - s/HAL - Change initial page table setup to use DA/page flags and GetPTE instead of building page table entries manually. Simplify AllocateL2PT by removing the requirement for the user to supply the access perimssions that will be used for the area; instead for ARM6 we just assume that cacheable memory is the norm and set L1_U for any L1 entry we create here.
  - s/Kernel - Add GetPTE macro (for easier integration of Get*PTE functions) and GenPPLAccess macro (for easy generation of OS_Memory 24 flags)
  - s/MemInfo - Fixup OS_Memory 0 to not fail on seeing non-executable pages. Implement OS_Memory 17 & 18. Tidy up some error generation. Make OS_Memory 13 use GetPTE. Extend OS_Memory 24 to return (non-) executability information, to use the named CMA_ constants generated by s/ChangeDyn, and to use the Decode*Entry functions when it's necessary to decode page table entries.
  - s/NewReset - Use AreaFlags_ instead of AP_
  - s/VMSAv6 - Remove old comments relating to lack of stack. Update BangCam to use GetPTE. Update PPL tables, removing PPLTransL1 (L1 entries are now derived from L2 table on demand) and adding a separate table for shareable pages. Implement the VMSAv6 versions of the Get*PTE and Decode*Entry functions.
Admin:
  Tested on Raspberry Pi 1, Raspberry Pi 3, Iyonix, RPCEmu (ARM6 & ARM7), comparing before and after CAM and page table dumps to check for any unexpected differences


Version 5.55. Tagged as 'Kernel-5_55'
@
text
@d119 1
@


4.25
log
@Resolve 2x header clashes
hdr/AHCIDevice:
  Remove this, since it clashes with the (differing API version number) copy exported by SATADriver. Post merging the Kernel back to the trunk the newer file datestamp has meant the wrong one gets exported during any ROM build which includes both components. Since the Kernel doesn't need AHCIDevice itself, it is left to the respective client (SATADriver or AHCIDriver in this case) to export them.
hdr/ModHand:
  Resolve the longstanding clash of Module_Title with the same named symbol that CMHG uses. There are very few assembler needing to look at the module header (Kernel, FileCore, Debugger, Podule) directly, but every C module which uses CMHG and wants one of the ModHandReason values ends up with a duplicate define.
  Obsolete Arthur era Module_LoadAddr value.
ArthurSWIs.s/MoreComms.s/NewReset.s/SWINaming.s/SysComms.s/Utility.s:
  Module_Title->Module_TitleStr.
ModHand.s:
  Module_Title->Module_TitleStr.
  Recode Module_LoadAddr using the file type from Hdr:FileTypes.
GetAlls.s:
  Drop unused NVRAM and PortMan headers. Add Hdr:FileTypes.

Version 5.54. Tagged as 'Kernel-5_54'
@
text
@d79 1
@


4.24
log
@Tidy things up a bit
Detail:
  hdr/Options - Reduce the scope of SASTMhatbroken and InterruptDelay switches so that they're only enabled when we're building for ARMv4 targets
  s/ARM600, s/VMSAv6, s/ExtraSWIs, s/Exceptions - Move duplicate code out of s/ARM600 & s/VMSAv6 and into shared locations. OS_UpdateMEMC, the bulk of OS_MMUControl, and OS_SynchroniseCodeAreas are now located in s/ExtraSWIs. Meanwhile the data & prefetch abort veneers have been moved to the new file s/Exceptions. s/ARM600 and s/VMSAv6 are now almost purely to do with the different page table formats.
  s/GetAll - GET s/Exceptions
Admin:
  Tested on Raspberry Pi


Version 5.52. Tagged as 'Kernel-5_52'
@
text
@d75 1
a75 1
        GET     Hdr:NVRAM
a76 1
        GET     Hdr:PortMan
@


4.23
log
@Delete lots of old switches
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * FixCallBacks
  * UseProcessTransfer
  * CanLiveOnROMCard
  * BleedinDaveBell
  * NewStyleEcfs
  * DoVdu23_0_12
  * LCDPowerCtrl
  * HostVdu
  * Print
  * EmulatorSupport
  * TubeInfo
  * AddTubeBashers
  * TubeChar, TubeString, TubeDumpNoStack, TubeNewlNoStack macros
  * FIQDebug
  * VCOstartfix
  * AssemblingArthur (n.b. still defined for safety with anything in Hdr: which uses it, but not used explicitly by the kernel)
  * MouseBufferFix
  * LCDInvert
  * LCDSupport
  * DoInitialiseMode
  * Interruptible32bitModes
  * MouseBufferManager
  * StrongARM (new CacheCleanerHack and InterruptDelay switches added to hdr/Options to cover some functionality that StrongARM previously covered)
  * SAcleanflushbroken
  * StrongARM_POST
  * IrqsInClaimRelease
  * CheckProtectionLink
  * GSWorkspaceInKernelBuffers
  * EarlierReentrancyInDAShrink
  * LongCommandLines
  * ECC
  * NoSPSRcorruption
  * RMTidyDoesNowt
  * RogerEXEY
  * StorkPowerSave
  * DebugForcedReset
  * AssembleKEYV
  * AssemblePointerV
  * ProcessorVectors
  * Keyboard_Type
  Assorted old files have also been deleted.
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.51. Tagged as 'Kernel-5_51'
@
text
@d99 1
@


4.22
log
@Delete STB code
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a desktop build):
  * STB
  * RO371Timings
  * NormalSpeedROMS
  * AutoSpeedROMS
  * RISCPCBurstMode
  * InterlacedPointer
  * ParallelFlashUpgrade (and s/FlashROM file)
  * Embedded_UI
  Some of the deleted code might be worth revisiting in future:
  * OS_ReadSysInfo 4 support for storing the MAC in alternate CMOS locations (including 2nd copy for error checking) or fetching via Service_MachineAddress
  * Mouse handling changes, possibly aimed at hiding the mouse pointer if a mouse isn't connected
  * More strict CMOS validation in s/NewReset
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.50. Tagged as 'Kernel-5_50'
@
text
@d116 1
a116 1
        $GetMemInfo
d123 1
a123 1
        $GetPalette
d145 1
a145 9

        GBLS    GiveMeBfontAnyDay
        [ BleedinDaveBell
GiveMeBfontAnyDay SETS "GET s.vdu.VduFontL1"
        |
GiveMeBfontAnyDay SETS "GET s.vdu.VduFont"
        ]

        $GiveMeBfontAnyDay
@


4.21
log
@Delete pre-HAL and 26bit code
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * HAL
  * HAL26
  * HAL32
  * No26bitCode
  * No32bitCode
  * IncludeTestSrc
  * FixR9CorruptionInExtensionSWI
  Various old files have also been removed (POST code, Arc/STB keyboard drivers, etc.)
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.49. Tagged as 'Kernel-5_49'
@
text
@a89 1
        $GetFlashROM
@


4.20
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@d101 1
a101 1
        $GetHAL
a112 1
        $GetKbdRes
a167 1
        $GetKbdDrA1
@


4.19
log
@  Imported OS_Memory 12 from Ursula.
  Imported EarlierReentrancyinDAShrink fix from Ursula.
Detail:
  OS_Memory 12 allows the kernel to suggest physical pages to callers
    who need that sort of information without wanting to have them
    grub around in the page tables.
  EarlierReentrancyInDAShrink should allow RAMFS and FileCore to delete
    their RAMFS related dynamic areas when the Switcher is used to drag
    the RAM disc bar to zero.
Admin:
  Required by Interlace 0.63 or later.

Version 5.36. Tagged as 'Kernel-5_36'
@
text
@d20 1
d22 1
d24 1
d31 1
a31 14
; amg 7/12/96 Renaissance
; Forcibly ensure that options only intended for one class of platform
; stay there. Generally this involves combining switches with the STB
; switch. The exception is processor architectural stuff. 7500FE is
; included always, and StrongARM has an independed switch.
;
; When you want to migrate features from one platform to another you'll
; find that every occurence of feature switches has been qualified with
; the appropriate sense of the STB switch. This is to remind you to think
; about what you're about to do! Check whether the code actually will work
; at all on something that is or is not a STB class product.
;
; Using the STB switch this aggressively also help ensure that there's
; no unexpected code crossover in the initial merge.
d34 1
a34 6
; now the conditional flags for the version we want
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; essential global variables
a36 478
                GET   Version
                GBLS  VersionNo
                [ Module_MinorVersion = ""
VersionNo       SETS  "$VString ($Date)"
                |
VersionNo       SETS  "$VString ($Date) $Module_MinorVersion"
                ]

; SystemName moved to Machine.* header files.

                GBLS  MosTitle
MosTitle        SETS  "$SystemName $VersionNo"

                GBLL  AddTubeBashers
AddTubeBashers  SETL  {FALSE}

Tube_Normal     *       1
Tube_Simulator  *       2

                GBLA    TubeType
TubeType        SETA    Tube_Simulator

UserMemStart    * &8000

                GBLL  ExceptionsAreErrors
ExceptionsAreErrors SETL  1=1

AssemblingArthur SETL  {TRUE}
; defined in hdr.system to allow conditionals in macros

                GBLL    DoingVdu
DoingVdu        SETL    {FALSE}         ; so can get KeyWS!
                GBLL    Module
Module          SETL    {FALSE}

                GBLL    IncludeTestSrc  ; whether test code is included
                ! 0, "Modified code"
 [ MorrisSupport
IncludeTestSrc  SETL    {TRUE}
 |
IncludeTestSrc  SETL    :LNOT: (MEMM_Type = "MEMC2") ; not on internal test versions
 ]

;RISC OS 3.71 onwards assumed bus timings - if true, then ROM speeds atc are assumed according to IOMD ID regs. as follows:
;     if IOMD (Risc PC)     ROM ticks 5-3 (assumed bus 32 MHz)
;     if 7500 (A7000)       ROM ticks 5-3 (assumed bus 32 MHz), all clocks divide-by-1
;     if 7500FE (A7000+)    ROM ticks 5-3,half speed (asssumed bus 64 MHz), EDO memory, divide-by-2 I/O, divide-by-1 CPU and memory
;
                GBLL    RO371Timings
RO371Timings    SETL    :LNOT: STB

; For development on Customer M hardware only
                GBLL    ParallelFlashUpgrade
ParallelFlashUpgrade SETL {FALSE}

;whether we support running on the (Risc PC) emulator
                GBLL    EmulatorSupport
EmulatorSupport SETL    {TRUE}

  [ :LNOT: RO371Timings

                GBLL    NormalSpeedROMS
 [ STB
NormalSpeedROMS SETL    {TRUE}           ;use FALSE for slow EPROMS
 |
NormalSpeedROMS SETL    {FALSE}          ;use FALSE for slow EPROMS
 ]

                GBLL    AutoSpeedROMS
AutoSpeedROMS   SETL    {TRUE} :LAND: :LNOT: STB

                GBLL    RISCPCBurstMode
RISCPCBurstMode SETL    {FALSE}
;>>>RCM says if the FRM approves the use of burst mode ROMS for
;>>>RISC PC (no reason why it shouldn't) all references to RISCPCBurstMode
;>>>could be replaced by NormalSpeedROMS

  ] ; :LNOT:RO371Timings

                GBLL    DoInitialiseMode
DoInitialiseMode SETL   {TRUE} :LAND: STB

 [ STB
                GBLL    Select16BitSound        ; STBs and pre-IOMD systems don't have this link
Select16BitSound SETL   {FALSE}
 |
                GBLL    Select16BitSound
Select16BitSound SETL   {TRUE}
 ]
                GBLL    Japanese16BitSound
Japanese16BitSound SETL {TRUE} :LAND: STB

                GBLL    Simulator               ; running on simulator?
Simulator       SETL    {FALSE}

                  GBLL   ChopOffTheGoolies
ChopOffTheGoolies SETL  {FALSE}

                GBLL   ChecksumCMOS
ChecksumCMOS    SETL  {TRUE}

                GBLL    ResetIndirected ; new flag to say if instruction at start of ROM does LDR PC, [PC, #x]
ResetIndirected SETL    {TRUE}

                GBLL    SqueezeMods     ; whether squeezed modules are allowed
SqueezeMods     SETL    {TRUE}

                GBLL    International   ; whether text and error messages come from  messaeges file.
International   SETL    {TRUE}

                GBLL    CacheCommonErrors       ; whether common internationalised errors are cached in sysheap
CacheCommonErrors       SETL    International :LAND: {TRUE}

                GBLL    MouseBufferManager      ; Whether mouse uses buffer manager
MouseBufferManager      SETL    {TRUE}

                GBLL    IrqsInClaimRelease      ; Whether OS_Claim/Release restore IRQ's before releasing heap node
IrqsInClaimRelease      SETL  {TRUE}

                GBLL    TickIrqReenter          ; Whether TickEventChain processing re-enables IRQ's
TickIrqReenter  SETL    {TRUE}

                GBLL    SoftResets              ; If false, always force a hard reset
SoftResets      SETL    {FALSE}

                GBLL    AlwaysClearRAM          ; If true, clear RAM on every break/reset
AlwaysClearRAM  SETL    {TRUE}

                GBLL    CacheCMOSRAM            ; Whether to keep a RAM copy of CMOS RAM for faster access
CacheCMOSRAM    SETL    MEMM_Type = "ARM600"    ; (Space only allocated on ARM600 versions)

                GBLL    GammaCorrection
GammaCorrection SETL    (VIDC_Type = "VIDC20") :LAND: {TRUE}

                GBLL    LCDInvert
LCDInvert       SETL    (VIDC_Type = "VIDC20") :LAND: {TRUE} :LAND: :LNOT: STB

                GBLL    VIDCListType3
VIDCListType3   SETL    (VIDC_Type = "VIDC20") :LAND: {TRUE}

                GBLL    ExpandedCamMap          ; two words per entry instead of one
ExpandedCamMap  SETL    MEMM_Type = "ARM600"    ; NB ARM600 code assumes expanded map

                GBLL    UseFreePool             ; whether OS_ChangeDynamicArea puts and gets memory to and from free pool
UseFreePool     SETL    MEMM_Type = "ARM600" :LAND: {TRUE}

                GBLL    NewCDA                  ; new change dynamic area code
NewCDA          SETL    MEMM_Type = "ARM600" :LAND: {TRUE}    ; let's give it a try!

                GBLL    ModeSelectors           ; whether mode selectors are understood
ModeSelectors   SETL    (VIDC_Type = "VIDC20") :LAND: {TRUE}

                GBLL    MakeModeSelectorsForModeNumbers
MakeModeSelectorsForModeNumbers SETL    ModeSelectors :LAND: {FALSE}    ; not actually needed after all

                GBLL    IgnoreVRAM              ; if true, don't add VRAM to the RAM list (+ don't use for screen)
IgnoreVRAM      SETL    {FALSE}

                GBLL    LateAborts              ; if true, use late abort mode on ARM600 (compulsory on ARM700)
LateAborts      SETL    MEMM_Type = "ARM600" :LAND: {TRUE}

                GBLL    ShrinkableDAs           ; if true, support Shrinkable Dynamic Areas (eg. CacheFS)
ShrinkableDAs   SETL    {TRUE}

                GBLL    ShadowROM               ; if true, the ROM is mirrored above
ShadowROM       SETL    {FALSE}                 ; &FF800000

                GBLL    Interruptible32bitModes
Interruptible32bitModes SETL {TRUE}             ;if true, limited 32-bit mode code support (interrupt handler does not assume
                                                ; 26-bit foreground), also allows faster, 32-bit APCS version of FPEmulator

                  GBLL  EarlierReentrancyInDAShrink ; fix for RAMFS and new FileCore (causes reentrant DA shrink/remove)
EarlierReentrancyInDAShrink SETL {TRUE}

                GBLL    OnlyKernelCanAccessHardwareVectors
OnlyKernelCanAccessHardwareVectors SETL {TRUE}  ; if true, only the Kernel is permitted to write to the hardware vectors
                                                ; while in 26-bit mode. If false, the whole ROM can (including BASIC
                                                ; and the Shared C Library - eg any memcpy!)

                GBLL    StrongARM
                GBLL    SAWBbroken              ;whether StrongARM Write Buffer is broken (pass 1 silicon only)
                GBLL    SAcleanflushbroken      ;whether StrongARM single MCR for DC clean+flush broken (is always for SA110)
                GBLL    SASTMhatbroken          ;whether ROM must support SA110's with broken STM^ (revision 3 should fix this)
                GBLL    StrongARM_POST          ;whether to run POST for StrongARM (and possibly ARM8)

                GBLL    ARM810support           ;StrongARM must also be true for this to be useful
                GBLL    ARM810bpbroken          ;whether branch predict is broken
                GBLL    ARM810cleanflushbroken  ;whether single MCR for IDC clean+flush broken (a la StrongARM!)
                GBLL    ARM810fastclock         ;whether to attempt to use fast clock (false means bus clock)
                GBLL    ARM810usePLL            ;whether to use PLL for fast clock (else RefClk pin)
                GBLL    ARM810_POST             ;whether to run POST for ARM810 (StrongARM_POST must also be true)

StrongARM          SETL {TRUE}
SAWBbroken         SETL {FALSE} :LAND: StrongARM
SAcleanflushbroken SETL {TRUE}  :LAND: StrongARM
SASTMhatbroken         SETL {TRUE}  :LAND: StrongARM
StrongARM_POST         SETL {TRUE}  :LAND: StrongARM

ARM810support          SETL {FALSE} :LAND: StrongARM
ARM810bpbroken         SETL {TRUE}  :LAND: ARM810support
ARM810cleanflushbroken SETL {TRUE}  :LAND: ARM810support
ARM810fastclock        SETL {FALSE} :LAND: ARM810support
ARM810usePLL           SETL {TRUE}  :LAND: ARM810fastclock
ARM810_POST            SETL {FALSE} :LAND: ARM810support

                ;mjs
                ;Chocolate flavours implemented for Ursula, but they are generally useful performance enhancements
                ;(not all Ursula performance improvements are flagged with Chocolate - eg. simple changes such as slicker SWI
                ;despatch and wider SWI hashing)
                ;
                ;any ARM
                GBLL    ChocolateSysHeap        ;whether to save cost of SysHeap block claim/release for common cases (eg. callback blocks)
                                                ;also reduces SysHeap stress by using fewer blocks in total
                GBLL    ChocolateOSMod          ;whether to reduce SysHeap stress in module handling
                GBLL    ChocolateSysVars        ;whether to do performance improvements in system variable handling
                GBLL    ChocolateOscli          ;whether to do performance improvements in Oscli command stuff
                GBLL    ChocolateService        ;whether to implement fast module service call distribution (uses table introduced
                                                ;into module format by Ursula API

ChocolateSysHeap       SETL {TRUE}
ChocolateOSMod         SETL {TRUE}
ChocolateSysVars       SETL {TRUE}
ChocolateOscli         SETL {TRUE}
ChocolateService       SETL {TRUE}
  [ ChocolateSysHeap
                       GBLA  MaxChocolateCBBlocks  ;max quick CallBack blocks available at any one time (else ordinary heap nodes used)
                       GBLA  MaxChocolateSVBlocks  ;max quick Software Vector blocks available at any one time (else ordinary heap nodes used)
                       GBLA  MaxChocolateTKBlocks  ;max quick Ticker blocks available at any one time (else ordinary heap nodes used)
                       GBLA  MaxChocolateMRBlocks  ;max module ROM blocks before ordinary heap nodes are used (reduces total no. nodes in SysHeap)
                       GBLA  MaxChocolateMABlocks  ;max module Active blocks before ordinary heap nodes are used
                       GBLA  MaxChocolateMSBlocks  ;max module SWI Hash blocks before ordinary heap nodes are used
MaxChocolateCBBlocks   SETA   32
MaxChocolateSVBlocks   SETA  128
MaxChocolateTKBlocks   SETA   32
MaxChocolateMRBlocks   SETA  150
MaxChocolateMABlocks   SETA  150
MaxChocolateMSBlocks   SETA  150
  ]


                GBLL    VCOstartfix              ;code in early kernel to fix VCO start problem on A7000 (esp. 7500FE)
VCOstartfix     SETL    {TRUE}


                     GBLL    mjsServiceTrace          ;for statistics gathering on service calls only
mjsServiceTrace      SETL    {FALSE}
                     GBLL    mjsSysHeapNodesTrace     ;for statistics gathering on some SysHeap nodes only
mjsSysHeapNodesTrace SETL    {FALSE}

                GBLL    NoSPSRcorruption              ;set to true if IRQ dispatcher
NoSPSRcorruption SETL   {FALSE}                       ;preserves SPSR_SVC


 [ StrongARM
 ! 0," ______________________________________________________"
 ! 0,"|                                                      |"
 ! 0,"| Building a StrongARM capable kernel for this machine |"
 ! 0,"|______________________________________________________|"
 ]

                GBLL    CheckProtectionLink     ; if true, disallow CMOS RAM changes if link in protected position
CheckProtectionLink SETL (IO_Type = "IOMD") :LAND: {TRUE}       ; NB affects Delete/Copy/R/T and 0-9/.

                GBLL    RMTidyDoesNowt          ; if true, RMTidy does nothing
RMTidyDoesNowt  SETL    (MEMC_Type = "IOMD") :LAND: {TRUE} ; should really be "machine has FSLock in ROM"

                GBLL    RogerEXEY               ; if true, use Roger's new algorithm for XEigFactor, YEigFactor
RogerEXEY       SETL    {FALSE}                 ; Marketing don't like it!

                GBLL    DAF_SpecifyBit          ; enable use of dynamic area flag which says an area may need specific pages
DAF_SpecifyBit  SETL    {TRUE}

                GBLL    DebugROMInit
DebugROMInit    SETL    (MEMC_Type = "IOMD") :LAND: {FALSE}

                GBLL    DebugROMPostInit ; Displays when the PostInit service call is sent to each ROM module (currently works on vanilla service call handling only)
DebugROMPostInit SETL    (MEMC_Type = "IOMD") :LAND: {FALSE}

                GBLL    DebugROMErrors
DebugROMErrors  SETL    (MEMC_Type = "IOMD") :LAND: {FALSE}

                GBLL    DebugHeaps              ; initialise claimed and freed blocks
DebugHeaps      SETL    {FALSE}                 ; (may slow things down unacceptably)

; ChangeDynamicArea and related options

        GBLL    DebugCDA
DebugCDA SETL {FALSE}

        GBLL    DebugCDA2
DebugCDA2 SETL {FALSE}

        GBLL    NewCDA2                 ; whether all the new CDA code is in there
NewCDA2 SETL NewCDA :LAND: {TRUE}

        GBLL    NewStyle_RMA            ; whether RMA is a new style area
NewStyle_RMA    SETL NewCDA :LAND: {TRUE}

        GBLL    NewStyle_SpriteArea     ; whether sprite area is a new style area
NewStyle_SpriteArea     SETL    NewCDA :LAND: {TRUE}

        GBLL    NewStyle_RAMDisc        ; whether RAM disc is a new style area
NewStyle_RAMDisc        SETL    NewCDA :LAND: {TRUE}

        GBLL    NewStyle_FontArea       ; whether font cache is a new style area
NewStyle_FontArea       SETL    NewCDA :LAND: {TRUE}

        GBLL    NewStyle_SysHeap        ; whether system heap is a new style area (node faked up)
NewStyle_SysHeap        SETL    NewCDA :LAND: {TRUE}

        GBLL    NewStyle_Screen         ; whether screen is a new style area
NewStyle_Screen         SETL    NewCDA :LAND: {TRUE}

        GBLL    NewStyle_All            ; whether all old-style areas have been converted to new-style
NewStyle_All    SETL    NewStyle_RMA :LAND: NewStyle_SpriteArea :LAND: NewStyle_RAMDisc :LAND: NewStyle_FontArea :LAND: NewStyle_SysHeap :LAND: NewStyle_Screen

                GBLL    StorkPowerSave  ;True => power saving for Stork AND A4
StorkPowerSave  SETL    MorrisSupport   ;False=> older A4 code only

                GBLL    LCDSupport      ;Whether LCD Support is assembled in or not
LCDSupport      SETL    {TRUE} :LAND: :LNOT: STB
                                        ;(First intro'd for Stork)

                GBLL    FixR9CorruptionInExtensionSWI   ; whether R9 corruption by ExtensionSWI handler is fixed
FixR9CorruptionInExtensionSWI   SETL    {FALSE}         ; currently FALSE as CC's !SpellMod (possibly others) rely on it being broken

                GBLL    InterlacedPointer
InterlacedPointer SETL {TRUE} :LAND: STB                ; enable code to do proper interlaced pointer

                GBLL    ValidateCMOS            ; Apply special CMOS-corruption detection code, and do minimal default settings.
ValidateCMOS    SETL    {TRUE} :LAND: STB

              [ DebugHeaps
                ! 0, "*** WARNING *** Heap debugging assembled in"
              ]

                GBLS    GetMessages
              [ International
GetMessages     SETS    "GET s.MsgCode"
              |
GetMessages     SETS    ""
              ]

                GBLL    DebugForcedReset        ; debug forced hard resets
DebugForcedReset SETL   {FALSE}

                GBLA    ConfiguredLang
ConfiguredLang  SETA    10                      ; default configured language

                GBLA    FirstUnpluggableModule
FirstUnpluggableModule SETA 8                   ; Podule, FileSwitch, ResourceFS, Messages, MessageTrans,
                                                ; TerritoryManager, UKTerritory

 [ DebugForcedReset
Reset_CannotResetFlag           * 1
Reset_SysHeapCorrupt            * 2
Reset_WrongCamMapAddress        * 3
Reset_WrongNumberOfPages        * 4
Reset_CamMapCorrupt             * 5
Reset_VectorChainCorrupt        * 6
Reset_TickNodesCorrupt          * 7
Reset_DeviceVectorCorrupt       * 8
Reset_PoduleOrCallBackCorrupt   * 9
 ]

; Flags for RISC OS Blue changes
;
                        GBLL    AssembleKEYV
AssembleKEYV            SETL    {TRUE}          ; Use KEYV.
                        GBLL    AssemblePointerV
AssemblePointerV        SETL    {TRUE}          ; Use PointerV.
                        GBLL    PollMouse
PollMouse               SETL    {FALSE}         ; Poll mouse.

                        GBLL    ProcessorVectors
ProcessorVectors        SETL    {TRUE}          ; Processor vectors indirected through 0 page.

                    GBLS  GetUnsqueeze
 [ SqueezeMods
GetUnsqueeze        SETS  "GET s.Unsqueeze"
 |
GetUnsqueeze        SETS  ""
 ]
                    GBLS  GetFlashROM
 [ ParallelFlashUpgrade
GetFlashROM         SETS  "GET s.FlashROM"
 |
GetFlashROM         SETS  ""
 ]
                    GBLS  GetPublicWS
                    GBLS  GetWorkspace
                    GBLS  GetKernelMEMC
                    GBLS  GetPalette
                    GBLS  GetMemInfo
 [ MEMM_Type = "ARM600"
GetPublicWS         SETS  "GET Hdr:PublicWS"
GetWorkspace        SETS  "GET Hdr:KernelWS"
GetKernelMEMC       SETS  "GET s.ARM600"
GetMemInfo          SETS  "GET s.MemInfo"
 |
GetPublicWS         SETS  ""
GetWorkspace        SETS  "GET Hdr:Old.NewSpace"
  [ MEMM_Type = "MEMC2"
GetKernelMEMC       SETS  "GET s.MEMC2"
  |
GetKernelMEMC       SETS  "GET s.MEMC1"
  ]
GetMemInfo          SETS  ""
 ]

 [ VIDC_Type = "VIDC20"
GetPalette          SETS  "GET s.Vdu.VduPal20"
 |
GetPalette          SETS  "GET s.Vdu.VduPal10"
 ]


                    GBLS  GetKbdDrA1
 [ Keyboard_Type = "A1A500"
GetKbdDrA1          SETS  "GET s.PMF.KbdDrA1"
 |
GetKbdDrA1          SETS  ""
 ]

                    GBLS  GetKbdRes
 [ Keyboard_Type = "A1A500"
GetKbdRes           SETS  "GET s.KbdResA1"
 |
GetKbdRes           SETS  "GET s.KbdRes" :CC: Keyboard_Type
 ]

; control switches for med_00001 (the flood fill routines 1024 line limit).
; Switches have the following effects:
;
; _userma     Will use rma if >48K is free, up to a maximum of 128K. It will
;             try to acheive the latter by growing the rma if possible.
; _twowords   Use two word entries in the queue. This overcomes the limitation
;             of the original packed word format.
; _debug      Store the queue start, end and 'amount to change the rma dynamic
;             area by' in the first three words of OldIRQ1VSpace

                    GBLL  med_00001_userma
                    GBLL  med_00001_twowords
                    GBLL  med_00001_debug

med_00001_userma    SETL  {TRUE}
med_00001_twowords  SETL  {TRUE}
;med_00001_debug     SETL  {TRUE}

;med_00001_userma    SETL  {FALSE}
;med_00001_twowords  SETL  {FALSE}
med_00001_debug     SETL  {FALSE}

 [ med_00001_userma
smallest_rma_size   * (48*1024)                  ; define the low threshold for rma use
largest_rma_size    * (128*1024)                 ; and the ceiling for rma use
 ]

 [ med_00001_debug
 ! 0,""
 ! 0,",-----------------------------------------------------------------,"
 ! 0,"| **** WARNING ****                                               |"
 ! 0,"|                                                                 |"
 ! 0,"| Audit trail debugging for MED-00001 is enabled. This reuses the |"
 ! 0,"| first three words of OldIRQ1Vspace. This should be turned off   |"
 ! 0,"| once MED-00001 has been tested and marked 'fixed'.              |"
 ! 0,"|                                                                 |"
 ! 0,"| Usage:                                                          |"
 ! 0,"|   +0   start of area used by flood fill                         |"
 ! 0,"|   +4   end+1 of area used by flood fill                         |"
 ! 0,"|   +8   amount the rma was grown by                              |"
 ! 0,"'-----------------------------------------------------------------'"
 ! 0,""
 ]

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; now get the headers
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
d40 5
a44 2
        $GetPublicWS
        $GetWorkspace
a60 1
;        GET     Hdr:Fox
d64 2
a65 1
;        GET     Hdr:IOEB
d70 2
d75 2
a76 1
        GET	Hdr:nvram
d78 5
a82 2
        GET     s.PMF.DEF          ; Common with 6502 code in the keyboard
        Protocol
d86 2
a87 1
        GET     s.Copro15ops ; some macros
d91 1
d99 1
d101 1
d103 1
a117 1
        $GetKernelMEMC
d119 2
a120 1
        ! 0, "Main kernel size = &" :CC: :STR: (.-ROM)
d139 2
d157 1
a157 1
        ! 0, "Vdu drivers size = &" :CC: :STR: (.-StartOfVduDriver)
a164 1
        GET     s.PMF.convdate
d166 1
a176 5
 [ {FALSE}
StartOfAMB_beforealign
        ALIGN   4096                    ;align to 4k page boundary, for easy ROMpatch
 ]

d181 1
a181 4
 [ {FALSE}
        DCB     "GROT"                  ;spare words marker
        ALIGN   4096                    ;align to 4k page boundary, for easy ROMpatch
 ]
d184 1
a184 24
        &       0                       ; for patching by BigSplit et al

        ! 0, "AMB section size = &" :CC: :STR: (EndOfAMB - StartOfAMB)
 [ {FALSE}
        ! 0, "AMB section (4k aligned) starts at ":CC::STR:(StartOfAMB)
        ! 0, "AMB section size (4k aligned) = &" :CC: :STR: (EndOfKernel - StartOfAMB)
 ]

 [ med_00001_debug
 ! 0,""
 ! 0,",-----------------------------------------------------------------,"
 ! 0,"| **** WARNING ****                                               |"
 ! 0,"|                                                                 |"
 ! 0,"| Audit trail debugging for MED-00001 is enabled. This reuses the |"
 ! 0,"| first three words of OldIRQ1Vspace. This should be turned off   |"
 ! 0,"| once MED-00001 has been tested and marked 'fixed'.              |"
 ! 0,"|                                                                 |"
 ! 0,"| Usage:                                                          |"
 ! 0,"|   +0   start of area used by flood fill                         |"
 ! 0,"|   +4   end+1 of area used by flood fill                         |"
 ! 0,"|   +8   amount the rma was grown by                              |"
 ! 0,"'-----------------------------------------------------------------'"
 ! 0,""
 ]
@


4.18
log
@  Improved the error cacheing.
  Removed DriversInKernel conditional.
Detail:
  If the territory changes or the resource file changes, the kernel
    will now decache all the cached error blocks so that next time
    they are required, they will be looked up again.
  The error cacheing is now a kernel build option and is always set
    to on.
  Removed one of the 5 error messages to be cached - it never seems
    to happen.  The remaining 4 are more frequent.
Admin:
  Tested in Ursula build.
  Cannot be used with HdrSrc 0.94.  HdrSrc 0.95 and later is required
    (or HdrSrc 0.93 and earlier subject to other kernel requirements)
  Requires MessageTrans 0.42 or later for correct operation when a
    replacement messages file is loaded.

Version 5.32. Tagged as 'Kernel-5_32'
@
text
@d223 3
@


4.18.2.1
log
@* Converted to building with ObjAsm (but still a single object file using ORG).
* Added ARM_IMB and ARM_IMBRange SWIs as recommended by ARMv5.
* Some early prototype HAL bits popped in - a lot of source restructuring still
  to come.
* New debug target creates an AIF image with debug information, and translates
  this into an ASCII object file for the 16702B logic analyser.

Version 5.35, 4.79.2.1. Tagged as 'Kernel-5_35-4_79_2_1'
@
text
@d88 6
a93 1
IncludeTestSrc  SETL    :LNOT: HAL
d144 3
a240 2
                GBLL    ARM6support

a253 3
ARM6support            SETL {TRUE}


a287 5
                          GBLL    Oscli_QuickAliases
                          GBLL    Oscli_HashedCommands
Oscli_QuickAliases        SETL    {TRUE} :LAND: ChocolateOscli   ;try to do a better job of checking for aliases
Oscli_HashedCommands      SETL    {TRUE} :LAND: ChocolateOscli   ;try to do a better job of finding commands

d322 1
a322 1
DebugROMInit    SETL    (MEMC_Type = "IOMD") :LAND: {TRUE}
d325 1
a325 1
DebugROMPostInit SETL    (MEMC_Type = "IOMD") :LAND: :LNOT: ChocolateService :LAND: {TRUE}
d328 1
a328 1
DebugROMErrors  SETL    (MEMC_Type = "IOMD") :LAND: {TRUE}
d438 2
d443 3
a445 1
                    GBLS  GetHAL
d448 10
d459 1
a460 2
 [ HAL
GetHAL              SETS  "GET s.HAL"
d462 1
a462 1
GetHAL              SETS   ""
a523 15
; Ickle macros. We want to be able to turn IRQs on and off fast in the
; code in various places. To do this easily, have a name for the
; SVC26/32 mode we run in.

 [ No26bitCode
USR2632 * USR32_mode
SVC2632 * SVC32_mode
 |
USR2632 * USR26_mode
SVC2632 * SVC26_mode
 ]

MaxSwi  * OS_NVMemory+1


d530 2
a531 2
        GET     Hdr:PublicWS
        GET     Hdr:KernelWS
a578 1
        $GetHAL
d596 1
a596 1
        ! 0, "Main kernel size = &" :CC: :STR: (.-KernelBase)
d660 5
d669 4
@


4.18.2.2
log
@More HAL work. IOMD HAL work in progress. Lots of my own little build
scripts. Don't touch this.

Version 5.35, 4.79.2.2. Tagged as 'Kernel-5_35-4_79_2_2'
@
text
@a46 2
                GBLL    CacheOff
CacheOff        SETL    {TRUE}
a535 2
        GET     Hdr:HALEntries
        GET     Hdr:OSEntries
a584 1
        GET     s.LibKern
@


4.18.2.3
log
@partial video changes for kernel/HAL split
near-HAL code for VIDC/IOMD in vdu.vduhint
briefly tested in Ursula desktop build
still some kernel workspace dependency in near-HAL code

Version 5.35, 4.79.2.3. Tagged as 'Kernel-5_35-4_79_2_3'
@
text
@d177 3
d183 3
d223 1
d229 1
d238 1
d244 1
d449 1
a449 1
GetPalette          SETS  "GET s.vdu.vdupalxx"
a607 1
        GET     s.vdu.vduhint
@


4.18.2.4
log
@More L7200 HAL work
@
text
@d517 1
a517 1
MaxSwi  * OS_Hardware+1
a659 2

        ALIGN   65536
@


4.18.2.5
log
@Added OS_Memory 12 and EarlierReentrancyInDAShrink
Imported from Kernel 5.36.
@
text
@a210 3
                  GBLL  EarlierReentrancyInDAShrink ; fix for RAMFS and new FileCore (causes reentrant DA shrink/remove)
EarlierReentrancyInDAShrink SETL {TRUE}

@


4.18.2.6
log
@More stuff. Up to the desktop now; cache on, working keyboard. Some source
restructuring to start to make splitting it up into several object files more
feasible.
@
text
@d28 494
a521 1
        GET     hdr.Options
a526 3
        GBLL    ShowWS
ShowWS  SETL    {TRUE}                          ; Make KernelWS be verbose

d568 1
a568 4
;        IMPORT  EndOfKernel

        GET     hdr.Copro15ops ; some macros
        GET     hdr.ARMops
a571 1
        GET     s.ARMops
d664 1
a664 1
        ! 0, "AMB section size = &" :CC: :STR: (EndOfAMB - StartOfAMB)
a665 1
        ALIGN   65536
d667 3
a669 1
        DCD     0
a686 1

@


4.18.2.7
log
@Check-in of the few last-minute changes for the Customer L demo. Nothing
exciting, apart from an extended touchscreen API.

Version 5.35, 4.79.2.13. Tagged as 'Kernel-5_35-4_79_2_13'
@
text
@d180 1
a180 1
;        ALIGN   65536
@


4.18.2.8
log
@Customer L-y HAL-y IIC-y type stuff. It's great.
@
text
@a158 1
        GET     s.PMF.IIC
@


4.18.2.9
log
@    Change for Customer M build.

Detail:
    The Kernel now sets "ProtectStationID" on the basis of the Embedded_UI
flag, rather than the STB flag, so you're able to set the bottom byte of your
IP address in IPConfig.

Admin:
    Untested.

Version 5.35, 4.79.2.46. Tagged as 'Kernel-5_35-4_79_2_46'
@
text
@a21 1
	GET	Hdr:UserIF.<UserIF>
@


4.18.2.10
log
@Lots of Tungsten work.

Version 5.35, 4.79.2.48. Tagged as 'Kernel-5_35-4_79_2_48'
@
text
@a68 1
        GET     Hdr:GraphicsV
a133 1
        GET     s.vdu.VduGrafV
@


4.18.2.11
log
@  Mostly device stuff.
Detail:
  * Implemented OS_Hardware 2, 3 and 4 as described in Docs.HAL.NewAPI.
  * Added new OS->HAL and HAL->OS routines to register HAL devices with the
    OS during hard resets.
  * Updated Docs.HAL.NewAPI to correct inconsistencies, fill in missing
    definitions, and allow for interrupt sharing.
  * Now uses OS_LeaveOS to trigger callbacks after ROM module init.
Admin:
  Untested. Requires new HAL.

Version 5.35, 4.79.2.49. Tagged as 'Kernel-5_35-4_79_2_49'
@
text
@a42 1
        GET     Hdr:HALDevice
@


4.18.2.12
log
@  Commit of kernel as featured in release 5.00.
Detail:
  Lots of changes since last version, at least the following:
  * Updated OS timestamp, removed alpha status
  * Negative INKEY OS version changed to &AA
  * GraphicsV is now alocated vector number &2A
  * ROM moved up to &FC000000
  * Max application slot increased to 512 Mbytes (for now)
  * Max size of RMA increased to 256 Mbytes
  * RMA is now first-created dynamic area (so it gets lowest address after
    top of application slot)
  * OS_Memory 10 reimplemeted
  * New OS_ReadSysInfo 6 values 18-22 added
  * OS_ReadSysInfo 8 gains flag bit to indicate soft power-off
  * Misc internal top-bit-set-address fixes
  * *ChangeDynamicArea can take sizes in megabytes or gigabytes
  * Magic word "&off" in R0 passed to OS_Reset powers down if possible
  * Added acceleration: block copy; CLS; text window scroll up; rectangle
    fill
  * Disabled LED flashing in page mode (liable to crash)
  * Masked sprite plot and VDU 5 text avoids reading the screen if possible
  * Framestore made USR mode accessible
  * Fix for VDU 5,127 bug - now relies on font definitions being in extreme
    quarters of memory, rather than bottom half
  * Allocated 64-bit OS_Convert... SWIs
  * IIC errors use allocated error numbers
  * Looks for Dallas RTC before Philips RTC because we're using a Philips
    NVRAM device with the same ID
  * Fix to bug that meant the oscillator in the Dallas RTC wasn't enabled
  * Default mouse type (USB) changed to allocated number
  * Ram disc max size increased to 128 Mbytes (Ursula merge) and made
    cacheable for StrongARMs (not XScale)
  * Branch through zero handler now works in USR mode, by use of a
    trampoline in the system stack to allow PC-relative register storage
  * Address exception handler changed to not use 0 as workspace
  * OS_Memory 13 extended to allow specification of cacheability and access
    privileges
  * Added OS_Memory 16 to return important memory addresses
  * RISCOS_MapInIO() takes cacheable flag in bit 3, access permissions in
    bits 10 and 11, doubly-mapped flag in bit 20, and access permissions
    specified flag in bit 21
  * Bug fix in last version for application abort handlers didn't quite
    work; register shuffle required
  * "Module is not 32-bit compatible" error now reports the module name
  * Default configured language changed from 10 to 11 (now Desktop again)

Version 5.35, 4.79.2.51. Tagged as 'Kernel-5_35-4_79_2_51'
@
text
@d22 1
a22 1
        GET     Hdr:UserIF.<UserIF>
d61 1
d65 1
d74 1
a74 1
        GET     Hdr:nvram
@


4.18.2.13
log
@  Build fix
Detail:
  Hdr:Macros has just been changed on the trunk in such a way that you now
  need to include Hdr:CPU.Arch as well. Previously this include file was only
  referenced by the Cortex branch kernel - now mirrored on the HAL branch
  kernel too.
Admin:
  Verified that IOMD ROM now builds again - should fix Tungsten ROM build too.

Version 5.35, 4.79.2.105. Tagged as 'Kernel-5_35-4_79_2_105'
@
text
@a19 1
        GET     Hdr:CPU.Arch
@


4.18.2.14
log
@Merge Cortex kernel into HAL branch
Detail:
  This is a full merge of the Cortex kernel back into the HAL branch. Since the Cortex kernel is/was just a superset of the HAL branch, at this point in time both branches are identical.
  Main features the HAL branch gains from this merge:
  - ARMv6/ARMv7 support
  - High processor vectors/zero page relocation support
  - objasm 4 warning fixes
  - Improved HAL related functionality:
    - Support for HAL-driven RTCs instead of kernel-driven IIC based ones
    - Support for arbitrary size machine IDs
    - Support for multiple IIC busses
    - Support for any HAL size, instead of hardcoded 64k size
    - Probably some other stuff I've forgotten
  - Probably a few bug fixes here and there
Admin:
  Tested on BB-xM & Iyonix.
  Was successfully flashed to ROM on an Iyonix to test the Cortex branch implementation of the 2010 RTC bug fix.
  IOMD build untested - but has been known to work in the past.


Version 5.35, 4.79.2.123. Tagged as 'Kernel-5_35-4_79_2_123'
@
text
@a21 1
        GET     Hdr:HALSize.<HALSize>
a44 1
        GET     Hdr:RTCDevice
@


4.18.2.15
log
@Conversions rationalisation.
Delete pmf/convdate, moved to conversions.
Moved OS_BinaryToDecimal to conversions.
Remove OS_ConvertHex16 and friends.
Add OS_ConvertVariform skeleton.
Tidied conversions.

Version 5.35, 4.79.2.125. Tagged as 'Kernel-5_35-4_79_2_125'
@
text
@d162 1
@


4.18.2.16
log
@Added 'UnConv' error (see also HdrSrc).
Implement OS_ConvertVariform, internally the other conversions now just call it.
Add tester for Variform to 'Dev'.
Made block copy weirdness for XScale dependent on XScale arch flag.

Version 5.35, 4.79.2.126. Tagged as 'Kernel-5_35-4_79_2_126'
@
text
@d154 1
a154 1
        ! 0, "Vdu section size = &" :CC: :STR: (.-StartOfVduDriver)
@


4.18.2.17
log
@Rationalise some old switches.
Export less in hdr:RISCOS.
Delete unused GetDecimalPair routine.
Move CheckYear with other RTC stuff out of PMF/osword.
Hide DebugROMInit and DebugROMErrors in release (even numbered) versions.

Version 5.35, 4.79.2.127. Tagged as 'Kernel-5_35-4_79_2_127'
@
text
@d37 2
d82 2
d185 1
d189 18
@


4.18.2.18
log
@Get of international module header.

Version 5.35, 4.79.2.134. Tagged as 'Kernel-5_35-4_79_2_134'
@
text
@a64 1
        GET     Hdr:Internatio
@


4.18.2.18.2.1
log
@Merge with HAL branch
Detail:
  Merge the HAL branch into the RPi branch, prior to merging RPi to HAL
  Brief summary of main changes brought in:
  * Added *cache functionality previously provided by ARM module
  * Added "CMOS RAM reset" message on startup when CMOS has been wiped by keypress
  * Renamed HAL Video entries from HAL_Video_XXX to HAL_VideoXXX
  * Dropped mjsHAL macros, GRAB/STASH macros
  * Fixed pseudo-VRAM allocation when machine has exactly 16MB of RAM
  * Added OS_Hardware 5
  * Use OS_SerialOp GetDeviceName for getting serial device name
  * Drop HAL_MonitorLeadID
  * Rework default GraphicsV_IICOp handler
Admin:
  Tested on Raspberry Pi with high processor vectors


Version 5.35, 4.79.2.147.2.23. Tagged as 'Kernel-5_35-4_79_2_147_2_23'
@
text
@a64 1
        GET     Hdr:OsBytes
a75 1
        GET     Hdr:SerialOp
d116 1
@


4.18.2.19
log
@Make Mike's macros permanent.
While the HAL and kernel were being split some temporary macros were used for the bits being worked on, after 12 years of use they're probably safe to adopt.
mjsCallHAL -> CallHAL; mjsAddressHAL -> AddressHAL; mjsHAL -> HAL.
OS_VIDCDividerSWI code now always does NoSuchSWI (had been switched out previously).
File vduhint.s no longer assembled (was empty).


Version 5.35, 4.79.2.150. Tagged as 'Kernel-5_35-4_79_2_150'
@
text
@d116 1
@


4.18.2.20
log
@Adoption of *CONFIGURE/STATUS CACHE commands
The kernel already looks after all other aspects of the ARM CPU, so can look after the cache control command too.
 HelpStrs.s:New tokens for help and syntax
 CmdHelp.s:UK help and syntax
 Arthur3.s:Tables updates for *CONFIGURE/STATUS, lined some stuff up, default error text sync'd with Hdr:NewErrors
 MoreComms.s:Parsing and doing of *CACHE
 Utility.s:Hashing table updated for *CACHE
Other minor changes
 hdr/Options:Bring 'MosVer' into the private header
 hdr/RISCOS:aasm aliases for SP removed, MainVars and MosVer made private, added definition of the start of application space
 HeapMan.s:Use of GRAB changed to Pull
 Offset of TutuCMOS changed for more informative PrintSoundCMOS
 PMF/osbyte.s:Use OsBytes header file in place of MainVars

Version 5.35, 4.79.2.151. Tagged as 'Kernel-5_35-4_79_2_151'
@
text
@a64 1
        GET     Hdr:OsBytes
@


4.18.2.21
log
@Add new HAL entry, HAL_UARTDefault. Make use of Hdr:SerialOp & OS_SerialOp 10.
Detail:
  hdr/HALEntries - Brought in line with RPi branch, plus addition of new HAL_UARTDefault HAL entry, to allow DualSerial to determine which (if any) of the HAL UARTs should be the default UART accessed via OS_SerialOp
  s/GetAll - Add GET of Hdr:SerialOp
  s/PMF/osbyte - Use OS_SerialOp 10 when constructing filename to open for OS_Byte 2
Admin:
  Tested in OMAP3, Tungsten ROMs


Version 5.35, 4.79.2.152. Tagged as 'Kernel-5_35-4_79_2_152'
@
text
@a76 1
        GET     Hdr:SerialOp
@


4.18.2.22
log
@Add support for new extended internal key codes, low level key codes, and key handler format
Detail:
  s/Middle - Added OS_ReadSysInfo 13 to allow the kernel to validate a key handler before the owner attempts to install it
  Resources/UK/Messages - Text for new "Bad key handler" error
  s/GetAll, s/PMF/Def - Get rid of now obsolete s/PMF/Def file. It only contained definitions for pre-HAL hardware, and for the key handler layout (now in Hdr:Keyboard)
  hdr/KeyWS - Increased size of KeysDown array so it can hold 768 keys instead of 160. Trim a couple of obsolete variables, and increase CurrKey/OldKey from 1 byte to 4 bytes.
  s/PMF/key, s/PMF/osbyte - Main bulk of the changes for the new key handling. All the important interfaces are now able to deal with extended (i.e. > 8 bit) internal key numbers, and the kernel is able to cope with key handlers which use 16 bit internal/low level key numbers instead of 8 bit.
Admin:
  Tested on Pandora & BB-xM
  Requires HdrSrc-2_20


Version 5.35, 4.79.2.178. Tagged as 'Kernel-5_35-4_79_2_178'
@
text
@d78 2
a79 1
        GET     Hdr:Keyboard
@


4.18.2.23
log
@Adopt some switches from Hdr:Machine/Machine
SystemName, ROMSizeOffset, HAL32, HAL26 only used here, moved here.
Remove uses of "M_" booleans, apparently that's bad form.
Fix SWIDespatch_Size for the non thumb capable case (was ASSERTing).
Swapped UserMemStart for AppSpaceStart.
Removed last use of OldComboSupport (pre Medusa!).
Removed switch 'CDVPoduleIRQs', a correction to the machine definitions mean this can now simply be switched on NumberOfPodules (previously, IOMD couldn't chain podule interrupts).
Take out disabled sub interrupt support - it's in CVS if you want to try to get it working.
Moved ConfiguredLang to 11 for everyone, it only matters if !Boot fails, and no harm in making it common for 5.xx onwards.

Version 5.35, 4.79.2.183. Tagged as 'Kernel-5_35-4_79_2_183'
@
text
@d75 1
a75 1
        GET     Hdr:NVRAM
d171 5
@


4.18.2.24
log
@Teach the kernel about different memory attributes
Detail:
  Briefly, this set of changes:
  * Adjusts PhysRamTable so that it retains the flags passed in by the HAL from OS_AddRAM (by storing them in the lower 12 bits of the size field)
  * Sorts the non-VRAM entries of PhysRamTable by speed and DMA capability, to ensure optimal memory allocation during OS startup.
  * Adjust the initial memory allocation logic to allow the cursor/sound chunk and HAL noncacheable workspace to come from DMA capable memory
  * Extends OS_Memory 12 to accept a 'must be DMA capable' flag in bit 8 of R0. This is the same as available in ROL's OS.
  * Extends OS_DynamicArea 0 to allow the creation of dynamic areas that automatically allocate from DMA capable memory. In ROL's OS this was done by setting bit 12 of R4, but we're using bits 12-14 for specifying the cache policy, so instead bit 15 is used.
  * Fixes OS_ReadSysInfo 6 to return the correct DevicesEnd value now that the IRQ/device limit is computed at runtime
  File changes:
  * hdr/OSEntries - Add definitions of the various flags passed to OS_AddRAM by the HAL. Add a new flag, NoDMA, for memory which can't be used for DMA.
  * hdr/KernelWS - Tidy PhysRamTable definition a bit by removing all the DRAM bank definitions except the first - this makes it easier to search for code which is interacting with the table. Remove VRAMFlags, it's redundant now that the flags are kept in the table. Add DMA allocation info to InitWs.
  * s/AMBControl/memmap - Updated to mask out the flags from PhysRamTable when reading RAM block sizes.
  * s/ARM600 - Strip out a lot of IOMD specific pre-HAL code.
  * s/ChangeDyn - Updated to cope with the flags stored in PhysRamTable. Implement support for DMA-capable dynamic areas. Rewrite InitDynamicAreas to insert pages into the free pool in the right order so that the fastest memory will be taken from it first.
  * s/GetAll, s/Middle - Fix OS_ReadSysInfo 6 to return the correct HAL-specific DevicesEnd value
  * s/HAL - Significant rework of initial RAM allocation code to allow the kernel workspace to come from the fastest DMA incapable RAM, while also allowing allocation of DMA capable memory for HAL NCNB workspace & kernel cursor/sound chunks. ClearPhysRAM rewritten as part of this.
  * s/MemInfo - Updated to cope with the flags stored in PhysRamTable. Add support for the new OS_Memory 12 flag. Update OS_Memory 7 to not assume PhysRamTable entries are sorted in address order, and rip out the old pre-HAL IOMD implementation.
  * s/NewReset - Remove GetPagesFromFreePool option, assume TRUE (as this has been the case for the past 10+ years). Revise a few comments and strip dead code. Update to cope with PhysRamTable flags.
  * s/VMSAv6 - Remove a couple of unused definitions
  * s/vdu/vdudriver - Update to cope with PhysRamTable flags
Admin:
  Tested in Kinetic RiscPC ROM softload, Iyonix softload, & OMAP3


Version 5.35, 4.79.2.186. Tagged as 'Kernel-5_35-4_79_2_186'
@
text
@a78 1
        GET     Hdr:OSRSI6
@


4.18.2.25
log
@Migrate RTC driver out of the kernel
The kernel will use RTC_Read and RTC_Write to access the hardware clock, while maintaining the software clock as before.
Makefile: header export is now in the RTC module's sources
KernelWS: remove RTCFitted flag
NewReset: sync the time after the module init
i2cutils: deleted clock chip code
osinit: move OS_ResyncTime into PMF/realtime
realtime: mostly packages up ordinals and calls the respective SWI

Tested on IOMD softload.

Version 5.35, 4.79.2.202. Tagged as 'Kernel-5_35-4_79_2_202'
@
text
@d44 1
a75 1
        GET     Hdr:RTC
@


4.18.2.26
log
@Assorted GraphicsV improvements
Detail:
  This set of changes:
  * Adds basic support for multiple GraphicsV drivers, by way of some new OS_ScreenMode reason codes for registering/deregistering, selecting and enumerating drivers (11, 64-68)
  * Tidies up handling of HAL video calls so that the HAL calls will be transformed into a bona fide GraphicsV driver if they're implemented
  * Changes handling of 16bpp gamma table entries so that they're sent to GraphicsV in a generic form instead of in a VIDC-specific form
  * Adds a new GraphicsV call and defines new VIDC list items to allow GraphicsV drivers to utilise the new pixel formats
  File changes:
  * h/VIDCList, hdr/VIDCList, Makefile - Add new header export containing VIDC list type 3 definitions, to avoid repeated definitions in other components
  * Resources/UK/Messages - Add new GraphicsV/OS_ScreenMode error strings and some missing processor type strings
  * hdr/KernelWS - Clean up some pre-GraphicsV definitions, and add new workspace locations for storing the current GraphicsV driver number and the driver list
  * hdr/Options - Remove obsolete InverseTextTransparency option
  * hdr/VduExt - Add VDU variable 192 for storing GraphicsV driver number (same as ROL's VideoV driver number). Remove old 'Flag_*' mode flag definitions (use new 'ModeFlag_*' defintions instead). Add new OS_ScreenMode reason codes.
  * s/ARM600, s/VMSAv6, s/vdu/vdu23, s/vdu/vdugrafa, s/vdu/vdugrafd, s/vdu/vdupalxx, s/vdu/vdupointer, s/vdu/vduwrch - Strip out pre-GraphicsV code. Update GraphicsV code to use correct driver number.
  * s/ArthurSWIs - Pass the default GraphicsV claimant the VduDriverWorkSpace instead of ZeroPage
  * s/Getall - Add Hdr:VIDCList and s/vdu/VduGrafHAL to list of GETs
  * s/NewIRQs - Remove HAL VSync IRQ initialisation, is now handled by grafvhal. Remove old HAL VsyncIRQ entry point, all VSyncs are now handled by VsyncIRQ_ExtEntry.
  * s/PMF/osbyte - Stop OS_Byte 19 waiting forever if no video driver is active
  * s/PMF/osinit - Remove HAL VSync IRQ initialisation, is now handled by grafvhal
  * s/vdu/vducursoft - Use new workspace variable names and flag names
  * s/vdu/vdudecl - Remove old HALDAG_* definitions, GVDAG_* definitions are used instead. Add definition of the per-driver workspace structure and flags.
  * s/vdu/vdudriver - Remove pre-GraphicsV code. Update InitialiseMode to check for and initialise a HAL driver. Use cached driver features word in a few places instead of calling GraphicsV each time. Update PalIndexTable to disable VIDC mangling of 16bpp gamma tables.
  * s/vdu/vdugrafv, s/vdu/vdugrafhal - HAL<->GraphicsV code split off into its own file (vdugrafhal). Default GraphicsV claimant now only deals with VSync events for the active driver.
  * s/vdu/vdumodes - Get rid of old VIDC List type 3 definiton; now in hdr/VIDCList
  * s/vdu/vduswis - Added OS_ScreenMode reason codes 11 and 64-68 for registering, deregistering, selecting and enumerating GraphicsV drivers. Update mode set code to not bother checking if the driver supports the pixel format; instead we assume that the driver's vet mode call will do the check for us.
Admin:
  Tested in Tungsten, IOMD, OMAP3 & BCM2835 ROMs
  Requires HdrSrc-2_38 and updated video driver modes


Version 5.35, 4.79.2.203. Tagged as 'Kernel-5_35-4_79_2_203'
@
text
@a70 1
        GET     Hdr:VIDCList
a135 1
        GET     s.vdu.VduGrafHAL
@


4.18.2.27
log
@Add ARMops for PL310 L2 cache controller
Detail:
  Unlike on the Cortex-A8 or Cortex-A15, the L2 cache that's used with the Cortex-A9 isn't hooked up to the standard ARMv7 CP15 cache maintenance ops. Instead, memory-mapped registers must be used to program and maintain the cache.
  Since the PL310 can't be detected automatically, this change adds support for a 'cache controller' HAL device which the HAL can use to advertise the presence of any external caches. If a cache device is registered during HAL_InitDevices the kernel will then check it against a list of known cache types and replace the appropriate ARMop routines with the alternatives for that controller.
  File changes:
  - hdr/PL310 - New header containing PL310 register listing
  - Makefile - Add export for PL310 header. Reorder exports to be alphabetical
  - hdr/HALDevice - Add cache controller device type, PL310 device
  - hdr/KernelWS - Allocate some workspace for storing a pointer to the current cache HAL device
  - s/ARMops - Add code for searching for known cache types, and implementation of PL310-specific ARMops
  - s/GetAll - Get Hdr:PL310
  - s/NewReset - Look for a cache controller after calling HAL_InitDevices
Admin:
  Tested on Pandaboard
  Fixes various assorted instability issues


Version 5.35, 4.79.2.252. Tagged as 'Kernel-5_35-4_79_2_252'
@
text
@a80 1
        GET     Hdr:PL310
@


4.18.2.28
log
@Replace WriteBuffer_Drain ARMop with a suite of memory barrier ARMops
Detail:
  - Docs/HAL/ARMop_API - Updated with documentation for the new ARMops.
  - s/ARMops - Set up pointers for the new memory barrier ARMops. Add full implementations for ARMv6 & ARMv7; older architectures should be able to get by with a mix of null ops & write buffer drain ops. Update ARMopPtrTable to validate structure against the list in hdr/OSMisc
  - hdr/KernelWS - Reserve workspace for new ARMops. Free up a bit of space by limiting ourselves to 2 cache levels with ARMv7. Remove some unused definitions.
  - hdr/OSMisc - New header defining OS_PlatformFeatures & OS_MMUControl reason codes, OS_PlatformFeatures 0 flags, and OS_MMUControl 2 ARMop indices
  - Makefile - Add export rules for OSMisc header
  - hdr/ARMops, s/ARM600, s/VMSAv6 - Remove CPUFlag_* and MMUCReason_* definitions. Update OS_MMUControl write buffer drain to use DSB_ReadWrite ARMop (which is what most existing write buffer drain implementations have been renamed to).
  - s/GetAll - Get Hdr:OSMisc
  - s/Kernel - Use OS_PlatformFeatures reason code symbols
  - s/vdu/vdudecl - Remove unused definition
Admin:
  Tested on ARM11, Cortex-A8, Cortex-A9


Version 5.35, 4.79.2.279. Tagged as 'Kernel-5_35-4_79_2_279'
@
text
@a79 1
        GET     Hdr:OSMisc
@


4.18.2.29
log
@Cache maintenance fixes
Detail:
  This set of changes tackles two main issues:
  * Before mapping out a cacheable page or making it uncacheable, the OS performs a cache clean+invalidate op. However this leaves a small window where data may be fetched back into the cache, either accidentally (dodgy interrupt handler) or via agressive prefetch (as allowed for by the architecture). This rogue data can then result in coherency issues once the pages are mapped out or made uncacheable a short time later.
    The fix for this is to make the page uncacheable before performing the cache maintenance (although this isn't ideal, as prior to ARMv7 it's implementation defined whether address-based cache maintenance ops affect uncacheable pages or not - and on ARM11 it seems that they don't, so for that CPU we currently force a full cache clean instead)
  * Modern ARMs generally ignore unexpected cache hits, so there's an interrupt hole in the current OS_Memory 0 "make temporarily uncacheable" implementation where the cache is being flushed after the page has been made uncacheable (consider the case of a page that's being used by an interrupt handler, but the page is being made uncacheable so it can also be used by DMA). As well as affecting ARMv7+ devices this was found to affect XScale (and ARM11, although untested for this issue, would have presumably suffered from the "can't clean uncacheable pages" limitation)
    The fix for this is to disable IRQs around the uncache sequence - however FIQs are currently not being dealt with, so there's still a potential issue there.
  File changes:
  - Docs/HAL/ARMop_API, hdr/KernelWS, hdr/OSMisc - Add new Cache_CleanInvalidateRange ARMop
  - s/ARM600, s/VMSAv6 - BangCam updated to make the page uncacheable prior to flushing the cache. Add GetTempUncache macro to help with calculating the page flags required for making pages uncacheable. Fix abort in OS_MMUControl on Raspberry Pi - MCR-based ISB was resetting ZeroPage pointer to 0
  - s/ARMops - Cache_CleanInvalidateRange implementations. PL310 MMU_ChangingEntry/MMU_ChangingEntries refactored to rely on Cache_CleanInvalidateRange_PL310, which should be a more optimal implementation of the cache cleaning code that was previously in MMU_ChangingEntry_PL310.
  - s/ChangeDyn - Rename FastCDA_UpFront to FastCDA_Bulk, since the cache maintenance is no longer performed upfront. CheckCacheabilityR0ByMinusR2 now becomes RemoveCacheabilityR0ByMinusR2. PMP LogOp implementation refactored quite a bit to perform cache/TLB maintenance after making page table changes instead of before. One flaw with this new implementation is that mapping out large areas of cacheable pages will result in multiple full cache cleans while the old implementation would have (generally) only performed one - a two-pass approach over the page list would be needed to solve this.
  - s/GetAll - Change file ordering so GetTempUncache macro is available earlier
  - s/HAL - ROM decompression changed to do full MMU_Changing instead of MMU_ChangingEntries, to make sure earlier cached data is truly gone from the cache. ClearPhysRAM changed to make page uncacheable before flushing cache.
  - s/MemInfo - OS_Memory 0 interrupt hole fix
  - s/AMBControl/memmap - AMB_movepagesout_L2PT now split into cacheable+non-cacheable variants. Sparse map out operation now does two passes through the page list so that they can all be made uncacheable prior to the cache flush + map out.
Admin:
  Tested on StrongARM, XScale, ARM11, Cortex-A7, Cortex-A9, Cortex-A15, Cortex-A53
  Appears to fix the major issues plaguing SATA on IGEPv5


Version 5.35, 4.79.2.306. Tagged as 'Kernel-5_35-4_79_2_306'
@
text
@a98 1
        $GetKernelMEMC
d117 1
@


4.18.2.30
log
@Add new OS_PlatformFeatures reason code for reading CPU features (inspired by ARMv6+ CPUID scheme). Add OS_ReadSysInfo 8 flags for indicating the alignment mode the ROM was built with. Fix long-standing bug with OS_PlatformFeatures when an unknown reason code is used.
Detail:
  s/CPUFeatures, hdr/OSMisc, hdr/KernelWS - Code and definitions for reading CPU features and reporting them via OS_PlatformFeatures 34. All the instruction set features which are exposed by the CPUID scheme and which are relevant to RISC OS are exposed, along with a few extra flags which we derive ourselves (e.g. things relating to < ARMv4, and some register usage restrictions in instructions). s/CPUFeatures is designed to be easily copyable into a future version of CallASWI without requiring any changes.
  s/ARMops - Read and cache CPU features during ARMop initialisation
  s/GetAll - GET new file
  s/Kernel - Hook up the CPU features code to OS_PlatformFeatures. Fix a long standing stack imbalance bug (fixed in RISC OS 3.8, but never merged back to our main branch) which meant that calling OS_PlatformFeatures with an invalid reason code would raise an error, even if it was the X form of the SWI that was called. Similar fix also applied to the unused service call code, along with a fix for the user's R1-R9 being corrupt (shuffled up one place) should an error have been generated.
  s/MemInfo - Extra LTORG needed to keep things happy
  s/Middle - Extend OS_ReadSysInfo 8 to include flags for indicating what memory alignment mode (if any) the OS relies upon. Together with OS_PlatformFeatures 34 this could e.g. be used by !CPUSetup to determine which options should be offered to the user.
Admin:
  Tested on Raspberry Pi 1, 2, 3


Version 5.35, 4.79.2.319. Tagged as 'Kernel-5_35-4_79_2_319'
@
text
@a118 1
        GET     s.CPUFeatures
@


4.18.2.12.2.1
log
@  Unaligned loads/stores optimised for ARMv6+
Detail:
  Having scanned the kernel source for unaligned load code fragments which
  would abort on ARMv6 and v7 and not having found any, I took the opportunity
  to give them build-time switches to use unaligned LDR((S)H)/STR(H)
  instructions if built for a new enough platform. Also added a couple of
  cases of LDRSB that will benefit v4 CPUs and a few instances of the v6
  SXTH instruction, but since objasm doesn't yet understand it (and when it
  does, not everyone will have upgraded) they are currently written as
  DCI statements.
  Most of the changes are to OS_Word handlers, which are notorious in that
  their input/output block is not word-aligned.
Admin:
  Not tested, but it should at least build.

Version 5.35, 4.79.2.98.2.6. Tagged as 'Kernel-5_35-4_79_2_98_2_6'
@
text
@a19 1
        GET     Hdr:CPU.Arch
@


4.18.2.12.2.2
log
@Add HAL RTC support to Cortex branch of kernel, clean up RTCSupport code
Detail:
  HAL kernels (on the Cortex branch at least) now support HALDevice-based RTCs. If the kernels own RTC code is disabled or fails to detect an RTC, then after HAL_InitDevices is called the HALDevice list will be scanned for any HAL-resident RTC devices.
  Additionally, the RTCSupport flag (in Hdr:Machine.Machine), which was previously TRUE for all HAL kernels, can now be set to FALSE in HAL kernels to disable the kernels own IIC RTC code. This allows the unwanted legacy RTC code to be disabled for machines which are known to use HAL RTCs instead.
  hdr/RTCDevice - new header describing data structures used for HAL RTC device
  hdr/HALDevice - added RTCDevice device type, IIC serial bus type
  hdr/KernelWS - upgraded RTCFitted from a 1 byte field to 4 byte. It now stores either a null value (for no RTC), a value <2048 for an IIC RTC address, or a value >= 2048 for a RTCDevice ptr
  Makefile - added header export of hdr/RTCDevice
  s/GetAll - include hdr/RTCDevice
  s/NewReset - initialise HAL RTC after HAL_InitDevices if required
  s/PMF/i2cutils, s/PMF/osinit, s/PMF/osword - modifications to allow use of HAL RTC (and disallow use of builtin IIC RTC)
Admin:
  Tested on rev C2 beagleboard


Version 5.35, 4.79.2.98.2.11. Tagged as 'Kernel-5_35-4_79_2_98_2_11'
@
text
@a44 1
        GET     Hdr:RTCDevice
@


4.18.2.12.2.3
log
@Update Cortex branch of kernel to support HALSize env variable. Export C version of hdr.OSEntries.
Detail:
  Makefile - Now exports a C version of hdr.OSEntries, for use by the new HAL USB drivers
  s/GetAll, s/Kernel - The HALSize env variable is now used in place of hard-coded values for the HAL size
  s/HAL - Reset_IRQ_Handler now switches to SVC mode before calling HAL_KbdScanInterrupt, to allow the HAL USB drivers to re-enable interrupts if they wish.
  s/VMSAv6 - Deleted some obsolete definitions
Admin:
  Tested on rev C2 BB, A2 BB-xM, C1 TouchBook
  Needs latest BuildSys, Env, HdrSrc


Version 5.35, 4.79.2.98.2.37. Tagged as 'Kernel-5_35-4_79_2_98_2_37'
@
text
@a21 1
        GET     Hdr:HALSize.<HALSize>
@


4.17
log
@	Added new debug flag DebugROMPostInit

Detail:
	It is often the case that modules fail on receipt of a PostInit
cervice call. The Kernel already has an option to display debugging on module
initialisation (DebugROMInit), but this does not help if a module crashes
during the PostInit stage.
	To aid debugging of the PostInit stage of module initialisation, a
new flag (DebugROMPostInit) has been added to the vanilla service call
handler. This flag displays the name of each module that the PostInit is
being dispatched to, and then displays whether control has passed back to the
kernel. Hence crashes of a module during PostInit can be detected.

Admin:
	Note that this debug option only works in the vanilla service call
handler. If your build uses the chocolate handler and you wish to debug
PostInit of modules, then set it temporarilly to use vanilla handlers.
	Tested in Lazarus builds both with and without the option switched.

Version 5.26. Not tagged
@
text
@a158 3
                GBLL    DriversInKernel ; whether serial/parallel drivers are in the kernel
DriversInKernel SETL    {FALSE}

d161 3
@


4.16
log
@* Run-time emulator detection added (no need for separate images). Needs an
  RPCEm update.
* Register allocation in default ErrorV handler fixed - problems occured when
  callbacks were triggered on way out.
* OS_Byte 19 didn't manipulate interrupt disable flag correctly in 26-bit
  builds.
* Stray bit of debugging left in sprite code many years ago removed.

Version 5.23. Not tagged
@
text
@d324 3
@


4.15
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@a42 4
;whether compiling to run on (Risc PC) emulator
                GBLL    RunningOnEmul
RunningOnEmul   SETL    {FALSE}

a94 4
 [ RunningOnEmul
IncludeTestSrc  SETL    {FALSE} :LAND: :LNOT: STB
 ]

d106 4
@


4.14
log
@Added RCMM keyboard support for Delete-power on, Ctrl-reset etc etc.
Right arrow on a remote also acts as Delete.

Version 4.98. Tagged as 'Kernel-4_98'
@
text
@d45 1
a45 1
RunningOnEmul   SETL    {FALSE} :LAND::LNOT: STB
a50 109
; TMD 29-Apr-93: Fix1 conditioning removed for simplicity of code - always true

     [ {TRUE}
     ! 0, "Fix1: interrupts re-enabled in ChangeDynamicArea"
     ]

     GBLL Fix2
Fix2 SETL {TRUE}
     [ Fix2
     ! 0, "Fix2: TMD optimisations of heap manager"
     ]

     GBLL Fix3
Fix3 SETL {TRUE}
     [ Fix3
     ! 0, "Fix3: ExtendHeap stack balanced"
     ]

     GBLL Fix4
Fix4 SETL {TRUE}
     [ Fix4
     ! 0, "Fix4: ExtendBlock IRQ latency improved"
     ]

     GBLL Fix5
Fix5 SETL {TRUE}
     [ Fix5
     ! 0, "Fix5: SpriteOp made re-entrant"
     ]

     GBLL Fix6
Fix6 SETL {TRUE}
     [ Fix6
     ! 0, "Fix6: OS_Byte &87 restores caller's IRQ state"
     ]

     GBLL Fix7
Fix7 SETL {TRUE}
     [ Fix7
     ! 0, "Fix7: OS_Word &0E,0 enables IRQs"
     ]

     GBLL Fix8
Fix8 SETL {TRUE}
     [ Fix8
     ! 0, "Fix8: OS_Word &15,0 enables IRQs"
     ]

     GBLL Fix9
Fix9 SETL {TRUE}
     [ Fix9
     ! 0, "Fix9: Incarnation names not terminated by 1st character"
     ]

     GBLL Fix10
Fix10 SETL {TRUE}
     [ Fix10
     ! 0, "Fix10: *Unplug terminated by address bug fixed"
     ]

     GBLL Fix11
Fix11 SETL {TRUE}
     [ Fix11
     ! 0, "Fix11: Podule IRQ despatcher doesn't corrupt R0"
     ]

     GBLL Fix12
Fix12 SETL {TRUE}
     [ Fix12
     ! 0, "Fix12: Rename incarnation fixed"
     ]

; TMD 04-Sep-89: Fix bug in prefer incarnation - corrupted error pointer if
; module or incarnation didn't exist

     GBLL Fix13
Fix13 SETL {TRUE}
     [ Fix13
     ! 0, "Fix13: Prefer incarnation fixed"
     ]

; TMD 06-Sep-89: Fix bug in CallAfter/Every - the error pointer was corrupted
; (errors caused by supplying non-positive time interval, or by being unable to
; claim a node from the system heap)

     GBLL Fix14
Fix14 SETL {TRUE}
     [ Fix14
     ! 0, "Fix14: CallAfter/Every error pointer not corrupted"
     ]

; TMD 11-Sep-89: Fix bug in AddCallBack - freed wrong heap node when chaining
; down the vector

     GBLL Fix15
Fix15 SETL {TRUE}
     [ Fix15
     ! 0, "Fix15: AddCallBack frees correct heap node"
     ]

; TMD 25-Sep-89: Fix bug in GSRead quoted termination - started skipping spaces
; from the wrong character, and didn't adjust for post increment after loading
; first non-space.

     GBLL Fix16
Fix16 SETL {TRUE}
     [ Fix16
     ! 0, "Fix16: GSRead quoted termination fixed"
     ]
d220 3
d302 3
a416 2
                        GBLL    AssembleA1KeyHandler
AssembleA1KeyHandler    SETL    {FALSE}
a466 7
                    GBLS    GetRS423
 [ DriversInKernel
GetRS423            SETS  "GET s.PMF.rs423"
 |
GetRS423            SETS  ""
 ]

a480 7
                    GBLS  GetKey2
 [ AssembleA1KeyHandler
GetKey2             SETS  "GET s.PMF.Key2"
 |
GetKey2             SETS  ""
 ]

a640 1
        $GetRS423
a645 1
        $GetKey2
d648 3
d652 1
d655 2
d659 3
d664 1
d669 2
a670 1
        ! 0, "PMF section size = &" :CC: :STR: (StartOfAMB_beforealign - StartOfPMF)
d673 1
@


4.13
log
@Kernel now uses PortManager to set TV_Mode GPIO line, and updates it on
every mode change, rather than doing it once based on the monitor lead ID.
Requires PortManager, and required if PortManager is present.

Version 4.92. Tagged as 'Kernel-4_92'
@
text
@d587 2
a588 2
 [ Keyboard_Type = "PC"
GetKbdRes           SETS  "GET s.KbdResPC"
d590 1
a590 1
GetKbdRes           SETS  "GET s.KbdResA1"
@


4.12
log
@Default RCLK mode now RCLK/2 rather than RCLK/1.
Doesn't force CMOS setting of sync and monitortype on NCs/STBs.
Accepts HClockSelect parameter (number 9) in VIDC lists. Uses this to
determine whether to use HCLK or not, rather than abusing
Service_MonitorLeadTranslation.
If DontUseVCO flag is set, then VCLK will not be used - only RCLK (or HCLK if
requested).

Version 4.86. Tagged as 'Kernel-4_86'
@
text
@d681 1
@


4.11
log
@ChocolateSysVars and ChocolateOscli merged from Ursula.

Version 4.84. Tagged as 'Kernel-4_84'
@
text
@a484 3
                GBLL    UseHClk
UseHClk         SETL    {TRUE} :LAND: STB       ; Use HClk when driving TVs.

@


4.10
log
@Ursula ChocolateSysHeap and 128-entry SWI hash table incorporated.

Version 4.83. Tagged as 'Kernel-4_83'
@
text
@d373 2
d380 2
@


4.9
log
@* Added support for 24LC64 8K EEPROM (untested).
* Integrated Ursula fast service call dispatch code.
* Added Interruptible32bitModes from Ursula.
* Stopped allowing ROM modules (other than the Kernel/UtilityModule) to write
  to the hardware vectors in 26-bit mode.

Version 4.81. Tagged as 'Kernel-4_81'
@
text
@d369 3
a371 1
                ;disabled at run time if not StrongARM
d376 1
d379 14
d397 6
@


4.8
log
@Parallel port flash upgrade facility added.

Version 4.72. Tagged as 'Kernel-4_72'
@
text
@d329 9
d363 14
@


4.7
log
@ROM speed not taken from the Machine header file.  POST can now exist
in a softloaded OS, since it searches for a zero word in the ROM
instead of using one within the POST when trying to communicate with
the POST adapter (the zero word must be in ROM).  Fixed to build on
non-chrontel STB/NC products.  Lots of duplicate code merged in
MemSize.  MemSize copes better with the softload case, and is less
willing to use the region the OS occupies as video memory, or
page tables.  POST is now ON (memory tests disabled).
OS_ReadSysInfo 4 now uses the NVRAM module to access the ethernet
address in NVRAM/CMOS, so that the availability/location of the
MAC address can be changed.  CMOS location 0 is now unprotected on
STB/NC products to try to stop people poking the hardware directly.
Fixed a CMOS resetting problem on STBs where the value expected in a
location was different from the value written on a CMOS reset, so the
CMOS would be reset every time...

Version 4.69. Tagged as 'Kernel-4_69'
@
text
@d220 3
d491 6
d642 1
@


4.6
log
@Following changes folded in from the start of the Ursula branch:
CPU type messages internationalised.
"Unknown OS_PlatformFeatures reason code" internationalised.
RunningOnEmul flag tweaked.
MorrisIDString conditional removed.
New modules added to SWI list at the end of the chain, on grounds that
the first-registered modules are probably more important.
*ChangeDynamicArea moved into UtilityModule from TaskManager.

Version 4.65. Tagged as 'Kernel-4_65'
@
text
@d203 1
a203 1
IncludeTestSrc  SETL    {FALSE}
d624 1
@


4.5
log
@Spinner branch merged.
Bandwidth limit for 7500FE fixed.
RO371Timings flag set to :LNOT:STB

Version 4.64. Tagged as 'Kernel-4_64'
@
text
@d45 1
a45 1
RunningOnEmul   SETL    {FALSE} :LAND: STB
a354 3

                GBLL    MorrisIDString           ;whether printed CPU string includes 7500/7500FE recognition
MorrisIDString  SETL    {TRUE} :LAND: StrongARM  ;printed CPU type only implemented if StrongARM true
@


4.4
log
@added separate flag, ShrinkableDAs
@
text
@d167 1
d169 3
a172 1
                [ STB
a173 4
                |
                GBLS  SystemName
SystemName      SETS  "RISC OS" ; ", p.k.a. Arthur a.k.a. Richard III"
                ]
d218 1
a218 1
RO371Timings    SETL    {TRUE}
@


4.4.4.1
log
@RunningOnEmul flag tweaked
@
text
@d45 1
a45 1
RunningOnEmul   SETL    {FALSE} :LAND::LNOT: STB
@


4.4.4.2
log
@Added following enhancements:

 - Chocolate screen mapping (section mapped and cached), StrongARM only
   Phoebe h/w (IOMD 2) will have register to assist this, but code currently
   relies on data abort mechanism to keep screen up to date wrt write-back
   data cache.

 - Chocolate AMBControl task switching (lazy page mapping), StrongARM only
   Improves task swapping speed. There appears to be a StrongAEM silicon
   bug rev 2 and 3) which means that LDMIB rn, {regs includind rn} cannot
   be reliably restarted after a data abort. This stuffs Chocolate AMBControl
   (awaiting response from Digital).

Both enhancements need more work to complete for Phoebe. Chocolate AMBControl
may well have to be made dormant because of silicon bug.

Note that this kernel *will* cause problems with task switching on StrongARM,
unless Chocolate task switching is disabled via !Flavour application.
@
text
@a332 3
                GBLL    ChocolateScreen         ;whether to implement crazy chocolate flavour screen (section mapped and cacheable) on SA
                GBLL    ChocolateAMB            ;whether to implement crazy chocolate flavour AMBControl (lazy task swapping) on SA

d340 3
a342 3
StrongARM              SETL {TRUE}
SAWBbroken             SETL {FALSE} :LAND: StrongARM
SAcleanflushbroken     SETL {TRUE}  :LAND: StrongARM
a345 3
ChocolateScreen        SETL {TRUE}  :LAND: StrongARM
ChocolateAMB           SETL {TRUE}  :LAND: StrongARM

d347 1
a347 1
ARM810bpbroken         SETL {FALSE} :LAND: ARM810support
@


4.4.4.3
log
@Module SWI chunks added to end of linked list on grounds that first loaded
modules are probably more important, so should be checked first.
Some RISC OS 3.70 bits internationalised.
*ChangeDynamicArea moved into UtilityModule from TaskManager.
@
text
@d363 3
@


4.4.4.4
log
@ 1 Simplify source by removing various long-standing compile flags
   and pre-Medusa h/w support

 2 Fix bug with Pages_Unsafe/Pages_Safe page moving for StrongARM
   (interrupt hole) - also better performance for StrongARM

 3 Improve perfromance of physical memory clear for StrongARM
   (make sure it uses burst write for STM)

 4 Suspend Chocolate task switching for StrongARM if SALDMIBbroken
   is TRUE
@
text
@d45 1
a45 2
RunningOnEmul   SETL    {FALSE} :LAND: STB

d48 1
a48 1
; we can only build for medusa-ish h/w
d51 109
a159 5
        ASSERT CPU_Type  = "ARM600"
        ASSERT IO_Type   = "IOMD"
        ASSERT VIDC_Type = "VIDC20"
        ASSERT MEMC_Type = "IOMD"
        ASSERT MEMM_Type = "ARM600"
d190 2
a193 1
      ASSERT AssemblingArthur   ;must be defined TRUE (some conditional code removed)
d219 14
a232 1
RO371Timings    SETL    {TRUE} :LAND: :LNOT: STB
d234 7
d255 6
d264 3
d270 18
d291 6
d300 15
d316 1
a316 1
MakeModeSelectorsForModeNumbers SETL   {FALSE}    ; not actually needed after all
d321 3
d328 1
a330 2
                GBLL    SALDMIBbroken           ;whether LDMIB Rn,{Reg list including Rn} cannot be reliably restarted after abort
                                                ;(broken up to revision 3 SA110 at least)
a334 3
                                                ;if LDMIBbroken is TRUE, ChocolateAMB is not forced FALSE, but the kernel does suspend
                                                ;chocolate task swapping at run time (allows use with fixed SA, or use with apps
                                                ;cleaned of LDMIBs or whatever)
d337 1
d344 1
a346 1
SALDMIBbroken          SETL {TRUE}  :LAND: StrongARM
d353 1
d376 6
d399 23
d447 1
d449 3
d486 3
d500 1
a500 1

d505 10
d519 1
d524 3
d528 1
d551 23
a573 1
;flood fill routine params
d576 1
d578 16
d732 16
@


4.4.4.5
log
@1) Fixes and tidy ups:
   - mapping of Cur/Sys/Sound area done more elegantly, and soft CAM info
     is now consistent with it
   - cached screen cleaning on VSync performed *after* VSync events
   - comments at top of ARM600 modernised
   - Pages_Unsafe/Safe code fixed to work properly on StrongARM with
     pages that are involved in interrupts (there is no fix for ARM8,
     since that is unlikely to be needed - an ASSERT checks use of ARM8
   - OS_DynamicArea code souped up, to be much more efficient for large
     numbers of dynamic areas (see comments near top of ChangeDyn)
   - cached screen is now suspended on h/w scroll (avoids possible cache
     incoherency)
2) API changes:
   - new OS_Memory reason code (10) allows Wimp to inform kernel of
     Wimp_ClaimFreeMemory, and can control VRAM rescue (see below)
   - new OS_ReadSysInfo reason code (6) allows reading of kernel values
     (reserved for Acorn use, eg. for SoftLoad, ROMPatch)
   - new OS_DynamicArea reason codes (6 and 7) allow for more efficient
     monitoring of dynamic areas by TaskManager (reserved for Acorn use)
3) Changes for Phoebe:
   - kernel runs a VRAM rescue process, which ensures that any VRAM not
     used for the screen is reclaimed if necessary and sinks to the bottom
     of the Free Pool. This is important for Phoebe, where VRAM is slower
     than SDRAM, but does no harm on other platforms.
   - logical copy of physical RAM is removed from memory map. This frees
     up 256M of address space that will later be used for PCI on Phoebe,
     but should do no harm on other platforms (this space is marked
     private in PRMs, so 3rd parties should not use it).
@
text
@d98 2
d101 3
a103 1

a158 4
                GBLL    RescueVRAM              ;whether to run process that rescues VRAM pages that are not in use for the screen
                                                ;and sorts them into the bottom of the free pool - implements use of VRAM as a last resort
                                                ;(maybe useful on Risc PC, important on Phoebe where VRAM is slower than SDRAM)

a176 2
RescueVRAM             SETL {TRUE}

a187 4


                GBLL    mjsServiceTrace          ;for statistics gathering on service calls only
mjsServiceTrace SETL    {FALSE}
@


4.4.4.6
log
@Various speed ups
Memory map changes:
remove shadow ROM
move UNDEF stack, SoftCAM and MMU tables above 64M
expand RMA limit to 15M from 11M
expand SysHeap limit to 3M-32k from 2M-8k
expand SVC stack to 32k from 8k
partially protect kernel workspace from user access
protect SVC stack from user access
@
text
@d117 9
a125 11

                   GBLL  Select16BitSound 
                   GBLL  Japanese16BitSound
  [ STB
Select16BitSound   SETL  {FALSE}            ; STBs and pre-IOMD systems don't have this link
Japanese16BitSound SETL  {TRUE}
  |
Select16BitSound   SETL  {TRUE}
Japanese16BitSound SETL  {TRUE}
  ]

d128 1
a128 17
ChecksumCMOS    SETL   {TRUE}

                GBLL   SqueezeMods             ; whether squeezed modules are allowed
SqueezeMods     SETL   {TRUE}


;mjs WARNING:
;  Setting this {TRUE} slows the whole OS down significantly (eg. when booting directories),
;  and is suspected to sometimes cause phantom unexpected errors because of flooding the
;  global MessageTrans buffers.
;  The English errors will rarely if ever be seen by the user. If a project really thinks the
;  world will stop spinning on seeing an English error, a scheme where the errors are
;  internationalised _once_ into (say) a SysHeap block should probably be used (this was not
;  considered worthwhile for Ursula).
;
                GBLL    InternationaliseCommonSilentErrors
InternationaliseCommonSilentErrors SETL {FALSE}
d130 2
a158 6
                ;mjs
                ;Chocolate flavours implemented for Ursula, but they are generally useful performance enhancements
                ;(not all Ursula performance improvements are flagged with Chocolate - eg. simple changes such as slicker SWI
                ;despatch and wider SWI hashing)
                ;
                ;disabled at run time if not StrongARM
a163 7
                ;any ARM
                GBLL    ChocolateSysHeap        ;whether to save cost of SysHeap block claim/release for common cases (eg. callback blocks)
                                                ;also reduces SysHeap stress by using fewer blocks in total
                GBLL    ChocolateOSMod          ;whether to reduce SysHeap stress in module handling
                GBLL    ChocolateSysVars        ;whether to do performance improvements in system variable handling
                GBLL    ChocolateOscli          ;whether to do performance improvements in Oscli command stuff

a180 19
;
ChocolateSysHeap       SETL {TRUE}
ChocolateOSMod         SETL {TRUE}
ChocolateSysVars       SETL {TRUE}
ChocolateOscli         SETL {TRUE}
  [ ChocolateSysHeap
                       GBLA  MaxChocolateCBBlocks  ;max quick CallBack blocks available at any one time (else ordinary heap nodes used)
                       GBLA  MaxChocolateSVBlocks  ;max quick Software Vector blocks available at any one time (else ordinary heap nodes used)
                       GBLA  MaxChocolateTKBlocks  ;max quick Ticker blocks available at any one time (else ordinary heap nodes used)
                       GBLA  MaxChocolateMRBlocks  ;max module ROM blocks before ordinary heap nodes are used (reduces total no. nodes in SysHeap)
                       GBLA  MaxChocolateMABlocks  ;max module Active blocks before ordinary heap nodes are used
                       GBLA  MaxChocolateMSBlocks  ;max module SWI Hash blocks before ordinary heap nodes are used
MaxChocolateCBBlocks   SETA   32
MaxChocolateSVBlocks   SETA  128
MaxChocolateTKBlocks   SETA   32
MaxChocolateMRBlocks   SETA  150 
MaxChocolateMABlocks   SETA  150
MaxChocolateMSBlocks   SETA  150
  ]
d192 3
a194 4
                     GBLL    mjsServiceTrace          ;for statistics gathering on service calls only
mjsServiceTrace      SETL    {FALSE}
                     GBLL    mjsSysHeapNodesTrace     ;for statistics gathering on some SysHeap nodes only
mjsSysHeapNodesTrace SETL    {FALSE}
d204 1
a204 1
CheckProtectionLink SETL {TRUE}                 ; NB affects Delete/Copy/R/T and 0-9/.
d207 1
a207 1
RMTidyDoesNowt  SETL    {TRUE}                  ; should really be "machine has FSLock in ROM"
d210 1
a210 1
DebugROMInit    SETL    {FALSE}
d213 1
a213 1
DebugROMErrors  SETL    {FALSE}
@


4.4.4.7
log
@added support for Sparse dynamic areas
fixed performance disaster caused by naff API for Shrinkable areas
implemented clamps for dynamic areas max size
configured kernel to not own or create RAMFS area (needs new RAMFS)
AMBControl now uses system heap for space, not RMA
AMBControl enables Lazy task swapping if running on rev T or better SA
kernel now assumes there could be code above 64M
SWIS for limited 32 bit user code support implemented
Long command lines implemented (1k instead of 256)
Fast service call distribution implemented (uses Ursula module format)
*fx,*key etc now allow missing space before first parameter
*configure is reinstated (bug fix)
@
text
@a163 13
                GBLL    Interruptible32bitModes
Interruptible32bitModes SETL {TRUE}             ;if true, limited 32-bit mode code support (interrupt handler does not assume
                                                ; 26-bit foreground), also allows faster, 32-bit APCS version of FPEmulator

                 GBLL   LongCommandLines        ;introduced for Ursula
LongCommandLines SETL   {TRUE}
  [ LongCommandLines
LongCLISize          * 1024                     ;buffer size for long commands
  ]

                  GBLL  KernelOwnsRAMFSDA       ; introduced and set false for Ursula (CacheFS variant of RAMFS controls dynamic area)
KernelOwnsRAMFSDA SETL  {FALSE}

d168 1
a168 1
                                                ;on some StrongARMs
a175 4
                ;concept of sparsely mapped dynamic areas introduced for Ursula
                GBLL    DA_Batman               ;Holey dynamic areas Batman!

                ;mjs
a185 1

a191 2
                GBLL    ChocolateService        ;whether to implement fast module service call distribution (uses table introduced
                                                ;into module format by Ursula API
a203 3
  [ SALDMIBbroken
SALDMIBfixedrev        * 4   ;fixed in revision T SA110 (ARM id revision field = 4)
  ]
a207 2
DA_Batman              SETL {TRUE}

a214 1
ChocolateService       SETL {TRUE}
d510 3
a512 3
;;;StartOfAMB_beforealign
;;;        ALIGN   4096                    ;align to 4k page boundary, for easy ROMpatch
;;;StartOfAMB
d514 2
a515 2
;;;        DCB     "GROT"                  ;spare words marker
;;;        ALIGN   4096                    ;align to 4k page boundary, for easy ROMpatch
d520 3
a522 4
;;;        ! 0, "PMF section size = &" :CC: :STR: (StartOfAMB_beforealign - StartOfPMF)

;;;        ! 0, "AMB section (4k aligned) starts at ":CC::STR:(StartOfAMB)
;;;        ! 0, "AMB section size (4k aligned) = &" :CC: :STR: (EndOfKernel - StartOfAMB)
@


4.4.4.8
log
@ - reestablish ownership of RAMFS dynamic area by kernel; this may be
   switched out again later, if new RAMFS takes over ownership
 - make ChangeDynamicArea allow re-entrancy slightly earlier on a shrink;
   now allows re-enter after page moves but before calling any post-shrink
   handler; this should fix problem with RAMFS and new FileCore (that now
   itself uses dynamic areas); needs testing once we pull a ROM together
 - Fix following bugs:
    - (new) kernel was keeping modules on active service chains during
      call to their finalise, now temporarily delinks them, as the API
      says it should; symptom eg. Zap 1.39 fails to quit (module Zap)
    - (longstanding) *help in a taskwindow was very dangerous (eg quit
      window, run other *help, start new window can all take out OS,
      by fundamentally cracking MessageTrans); fix: *help now does not
      keep MessageTrans descriptor on SVC stack (swapped out on pre-empt),
      now has re-entrancy guard, gives 'busy' error if reentered; minor
      infelicity is that busy message may be given on new *help after
      abandoning old one in taskwindow, but the next *help will work
    - (longstanding) *time could occasionally give a scrambled message on
      first call in a taskwindow (caused by multiple use of a general
      buffer)
@
text
@d174 2
a175 4
                  GBLL  KernelOwnsRAMFSDA           ; may be set false later for Ursula (if RAMFS takes on ownership)
                  GBLL  EarlierReentrancyInDAShrink ; fix for RAMFS and new FileCore (causes reentrant DA shrink/remove)
KernelOwnsRAMFSDA SETL  {TRUE}
EarlierReentrancyInDAShrink SETL {TRUE}
@


4.4.4.9
log
@Made the kernel control the layout of the free space map on the RAM disc,
which avoids the rmreinit ramfs on every size change of the disc.

Also increase RAM disc max size to 128M bytes.

Change is enabled by NewRAMFS switch.
@
text
@d118 1
a118 1
                   GBLL  Select16BitSound
a178 6
		GBLL	NewRAMFS       		    ; if this is TRUE then we're running a new FileCore variant of
NewRAMFS	SETL	{TRUE}			    ; RAMFS.  different handling of the RAMFS pregrow etc results

		GET	hdr:FileCore
		GET	hdr:RAMFS

d253 1
a253 1
MaxChocolateMRBlocks   SETA  150
@


4.4.4.9.2.1
log
@Changed compile switches, to build Ursula kernel for RPC and A7000(+),
switches now set as follows:
  ARM67Support      TRUE  (for 610,710,7500,7500FE)
  ARMSASupport      TRUE  (for StrongARM)
  ARMSASupport_RevS FALSE (for StrongARMs before rev S)
  IOMD1Support      TRUE  (for old machines)
  IOMD2Support      FALSE (They killed Phoebe!)
Version set to 4.00 (RISC OS 4)
This is the same as my last commit to the Ursula branch
@
text
@d28 15
d45 1
a45 1
RunningOnEmul   SETL    {FALSE}
d47 2
a48 1
;
d50 1
a50 30
;
        ASSERT Keyboard_Type = "PC"
        ASSERT CPU_Type      = "ARM600"
        ASSERT IO_Type       = "IOMD"
        ASSERT VIDC_Type     = "VIDC20"
        ASSERT MEMC_Type     = "IOMD"
        ASSERT MEMM_Type     = "ARM600"

; mjs:
; We cannot build for STB. If STB code is ever 're-merged', it is suggested
; that it is done in a more structured way than a basic CVS munge with
; fix-ups. For example, look at separating files for affected, hardware
; dependent areas of kernel. This is a lot of work, but is better than
; the obfuscation caused by pretend hardware abstraction.
;
        ASSERT :LNOT: STB
;
; We choose to distinguish IOMD variants by differing IOMD_ID0 bytes only
;
; Note that decision points based on IOMD variant now do exhaustive checks,
; and deliberately hang up in a loop for unrecognised IOMD. The panic
; hang-up loops continually read IOMD_ID0, so that examining the hang up
; with a logic analyser will give a clue. Doing exhaustive checks like
; this may seem a bit verbose, but is much less ad hoc than previous
; hacks, and may make it easier to see how to add support for other
; variants.
;
        ASSERT (IOMD_7500FE   :AND: &FF) < (IOMD_7500     :AND: &FF)
        ASSERT (IOMD_7500     :AND: &FF) < (IOMD_Original :AND: &FF)
        ASSERT (IOMD_Original :AND: &FF) < (IOMD_IOMD2    :AND: &FF)
d52 5
d66 3
d71 1
d102 1
a102 1
IncludeTestSrc  SETL    {FALSE}
d105 4
a108 19

;these are large-scale options, not necessarily controlling all code, but enough to allow
;some code size reduction, and to restrict ROM capability if desired
;
                  GBLL    ARM67Support        ;whether to support ARM6 and ARM7 cpu (610,710,cpu in 7500)
                  GBLL    ARMSASupport        ;whether to support StrongARM cpu (SA110,SA120)
                  GBLL    ARMSASupport_RevS   ;whether we can assume Revision S SA110 (rev 3 in ID register) or better
                  GBLL    ARMSASupport_Only   ;whether we can assume StrongARM cpu (SA110,SA120)
                  GBLL    IOMD1Support        ;whether to support IOMD 1 platforms (Risc PC,A7000)
                  GBLL    IOMD2Support        ;whether to support IOMD 2 platforms (Phoebe)
ARM67Support      SETL    {TRUE}
ARMSASupport      SETL    {TRUE}
ARMSASupport_RevS SETL    {FALSE}
ARMSASupport_Only SETL    ARMSASupport :LAND: (:LNOT: ARM67Support)
IOMD1Support      SETL    {TRUE}
IOMD2Support      SETL    {FALSE}
;
                  ASSERT  ARM67Support :LOR: ARMSASupport
                  ASSERT  IOMD1Support :LOR: IOMD2Support
d110 2
a111 36
    ! 0, "--"
  [ ARM67Support
    ! 0, "-- Compiling support for ARM 6,7 cpu's"
  ]
  [ ARMSASupport
    [ ARMSASupport_RevS
      ! 0, "-- Compiling support for StrongARM cpu's (SA-110 rev S or better)"
    |
      ! 0, "-- Compiling support for StrongARM cpu's"
    ]
  ]
  [ IOMD1Support
    ! 0, "-- Compiling support for IOMD1 platforms"
  ]
  [ IOMD2Support
    ! 0, "-- Compiling support for IOMD2 platforms"
  ]
    ! 0, "--"

;StrongARM support options
                       GBLL    SAcleanflushbroken      ;whether StrongARM single MCR for DC clean+flush broken (is always for SA110)
                       GBLL    SASTMhatbroken          ;whether ROM must support SA110's with broken STM^ (those before rev S)
                       GBLL    SALDMIBbroken           ;whether LDMIB Rn,{Reg list including Rn} cannot be reliably restarted after abort
                                                       ;on some StrongARMs (those before rev T)
                       GBLL    StrongARM_POST          ;whether to run POST for StrongARM (and possibly ARM8)
SA120minimumrev        * 9                             ;ARM id revision at which SA-120 introduced (kernel uses mini data cache for screen)
SAcleanflushbroken     SETL {TRUE}
SASTMhatbroken         SETL :LNOT: ARMSASupport_RevS   ;is broken before rev S - this flag now derived from ARMSASupport_RevS
SALDMIBbroken          SETL {TRUE}                     ;is broken before rev T
  [ SALDMIBbroken
SALDMIBfixedrev        * 4                             ;fixed in revision T SA110 (ARM id revision field = 4)
  ]
StrongARM_POST         SETL {TRUE}


;;;TEMPORARY - all PhoebeBodge code should ultimately be removed completely (not just switched out)
a112 10
                     GBLL    PhoebeBodge
                     GBLL    PhoebeBodge_OldVCO   ;1st (FPGA) board has old style VCO, 2nd (FPGA/ASIC) board has new VCO
                     GBLL    PhoebeBodge_Bernard  ;temp kludge to avoid programming CURSINIT, for ASIC debug
                     GBLL    PhoebeBodge_Bernard2 ;temp kludge for external abort retry debug
                     GBLL    PhoebeBodge_Slow     ;assume ? MHz clock for 100Hz ticker, rather than 64 MHz
PhoebeBodge          SETL    {FALSE}
PhoebeBodge_OldVCO   SETL    {FALSE}
PhoebeBodge_Bernard  SETL    {FALSE}
PhoebeBodge_Bernard2 SETL    {FALSE}
PhoebeBodge_Slow     SETL    {FALSE}
d114 2
a115 2
                GBLL    IOMD2_VIDMRDbroken
IOMD2_VIDMRDbroken SETL {TRUE}              ;looks like this won't be fixed in ASIC
a116 15
Phoebe_VRAMsize *       &400000             ;must be 4M currently (see ASSERTion for code that depends on this)

                GBLL    Phoebe_SoftROM
Phoebe_SoftROM  SETL    {TRUE}              ;whether to automagically soft load ROM on Phoebe, for speed
                       
                GBLL    KeepCachesOff       ;for logic analyser debug
KeepCachesOff   SETL    {FALSE}


;RISC OS 3.71 onwards assumed bus timings - ROM speeds atc are assumed according to IOMD ID regs. as follows:
;     if IOMD (Risc PC)     ROM ticks 5-3 (assumed bus 32 MHz)
;     if 7500 (A7000)       ROM ticks 5-3 (assumed bus 32 MHz), all clocks divide-by-1
;     if 7500FE (A7000+)    ROM ticks 5-3, half speed (asssumed bus 64 MHz), EDO memory, divide-by-2 I/O, divide-by-1 CPU and memory
;     if IOMD2 (Phoebe)     ROM ticks 10-6 (assumed bus 64 MHz)
;
d120 4
d126 2
d129 2
d148 4
d153 1
a153 1
LCDInvert       SETL    {TRUE}
d179 5
a183 2
                GBLL    NewRAMFS                    ; if this is TRUE then we're running a new FileCore variant of
NewRAMFS        SETL    {TRUE}                      ; RAMFS.  different handling of the RAMFS pregrow etc results
d185 6
a190 2
                GET     hdr:FileCore
                GET     hdr:RAMFS
d221 16
d241 2
a242 2
ChocolateScreen        SETL {TRUE}
ChocolateAMB           SETL {TRUE} :LAND: ARMSASupport
d264 5
d279 9
d311 1
a311 1
StorkPowerSave  SETL    {TRUE}          ;False=> older A4 code only
d314 1
a314 1
LCDSupport      SETL    {TRUE}
d320 5
d326 2
a327 2
                GBLL    ValidateCMOS            ; reset CMOS if checksum wrong on start-up
ValidateCMOS    SETL    {TRUE}
d386 1
d388 3
d396 3
d400 1
d403 1
d405 3
@


4.4.4.10
log
@Phoebe aware version of kernel
Source currently builds for Phoebe only. Flipping source switches will
build for Risc PC and/or A7000(+) as well (or instead). Not tested
much on older platforms.
Known issues remaining:
 - on Phoebe, kernel does not always set up the video (new VCO)
   properly. It appears that anything via the display manager is ok,
   old modes are ok before a monitor definition is seen, but mode
   changes via applications in the desktop always/often (?) aren't.
   Most likely area for investigation is whether kernel catches all
   mode change routes for ensuring it programs the new VCO.
 - on Phoebe, kernel does not yet have the hooks to support multiple
   CPU(s) (to park the slaves and allow them to be used later). I
   have a technical note on this, which should be archived as part of
   the Ursula burial work.
 - on older platforms, the areas that need checking most are CMOS
   power on reset (when in ROM) and mode changes by all routes (since
   these areas are bent by Phoebe support)
Note that kernel currently builds for rev S or better StrongARM. The
switch ARMSASupport_RevS should be set false if building for Risc PC.
@
text
@d28 15
d45 1
a45 1
RunningOnEmul   SETL    {FALSE}
d47 2
a48 1
;
d50 1
a50 30
;
        ASSERT Keyboard_Type = "PC"
        ASSERT CPU_Type      = "ARM600"
        ASSERT IO_Type       = "IOMD"
        ASSERT VIDC_Type     = "VIDC20"
        ASSERT MEMC_Type     = "IOMD"
        ASSERT MEMM_Type     = "ARM600"

; mjs:
; We cannot build for STB. If STB code is ever 're-merged', it is suggested
; that it is done in a more structured way than a basic CVS munge with
; fix-ups. For example, look at separating files for affected, hardware
; dependent areas of kernel. This is a lot of work, but is better than
; the obfuscation caused by pretend hardware abstraction.
;
        ASSERT :LNOT: STB
;
; We choose to distinguish IOMD variants by differing IOMD_ID0 bytes only
;
; Note that decision points based on IOMD variant now do exhaustive checks,
; and deliberately hang up in a loop for unrecognised IOMD. The panic
; hang-up loops continually read IOMD_ID0, so that examining the hang up
; with a logic analyser will give a clue. Doing exhaustive checks like
; this may seem a bit verbose, but is much less ad hoc than previous
; hacks, and may make it easier to see how to add support for other
; variants.
;
        ASSERT (IOMD_7500FE   :AND: &FF) < (IOMD_7500     :AND: &FF)
        ASSERT (IOMD_7500     :AND: &FF) < (IOMD_Original :AND: &FF)
        ASSERT (IOMD_Original :AND: &FF) < (IOMD_IOMD2    :AND: &FF)
d52 5
d66 3
d71 1
d102 1
a102 1
IncludeTestSrc  SETL    {FALSE}
d105 4
a108 19

;these are large-scale options, not necessarily controlling all code, but enough to allow
;some code size reduction, and to restrict ROM capability if desired
;
                  GBLL    ARM67Support        ;whether to support ARM6 and ARM7 cpu (610,710,cpu in 7500)
                  GBLL    ARMSASupport        ;whether to support StrongARM cpu (SA110,SA120)
                  GBLL    ARMSASupport_RevS   ;whether we can assume Revision S SA110 (rev 3 in ID register) or better
                  GBLL    ARMSASupport_Only   ;whether we can assume StrongARM cpu (SA110,SA120)
                  GBLL    IOMD1Support        ;whether to support IOMD 1 platforms (Risc PC,A7000)
                  GBLL    IOMD2Support        ;whether to support IOMD 2 platforms (Phoebe)
ARM67Support      SETL    {FALSE}
ARMSASupport      SETL    {TRUE}
ARMSASupport_RevS SETL    {TRUE}
ARMSASupport_Only SETL    ARMSASupport :LAND: (:LNOT: ARM67Support)
IOMD1Support      SETL    {FALSE}
IOMD2Support      SETL    {TRUE}
;
                  ASSERT  ARM67Support :LOR: ARMSASupport
                  ASSERT  IOMD1Support :LOR: IOMD2Support
d110 2
a111 36
    ! 0, "--"
  [ ARM67Support
    ! 0, "-- Compiling support for ARM 6,7 cpu's"
  ]
  [ ARMSASupport
    [ ARMSASupport_RevS
      ! 0, "-- Compiling support for StrongARM cpu's (SA-110 rev S or better)"
    |
      ! 0, "-- Compiling support for StrongARM cpu's"
    ]
  ]
  [ IOMD1Support
    ! 0, "-- Compiling support for IOMD1 platforms"
  ]
  [ IOMD2Support
    ! 0, "-- Compiling support for IOMD2 platforms"
  ]
    ! 0, "--"

;StrongARM support options
                       GBLL    SAcleanflushbroken      ;whether StrongARM single MCR for DC clean+flush broken (is always for SA110)
                       GBLL    SASTMhatbroken          ;whether ROM must support SA110's with broken STM^ (those before rev S)
                       GBLL    SALDMIBbroken           ;whether LDMIB Rn,{Reg list including Rn} cannot be reliably restarted after abort
                                                       ;on some StrongARMs (those before rev T)
                       GBLL    StrongARM_POST          ;whether to run POST for StrongARM (and possibly ARM8)
SA120minimumrev        * 9                             ;ARM id revision at which SA-120 introduced (kernel uses mini data cache for screen)
SAcleanflushbroken     SETL {TRUE}
SASTMhatbroken         SETL :LNOT: ARMSASupport_RevS   ;is broken before rev S - this flag now derived from ARMSASupport_RevS
SALDMIBbroken          SETL {TRUE}                     ;is broken before rev T
  [ SALDMIBbroken
SALDMIBfixedrev        * 4                             ;fixed in revision T SA110 (ARM id revision field = 4)
  ]
StrongARM_POST         SETL {TRUE}


;;;TEMPORARY - all PhoebeBodge code should ultimately be removed completely (not just switched out)
a112 10
                     GBLL    PhoebeBodge
                     GBLL    PhoebeBodge_OldVCO   ;1st (FPGA) board has old style VCO, 2nd (FPGA/ASIC) board has new VCO
                     GBLL    PhoebeBodge_Bernard  ;temp kludge to avoid programming CURSINIT, for ASIC debug
                     GBLL    PhoebeBodge_Bernard2 ;temp kludge for external abort retry debug
                     GBLL    PhoebeBodge_Slow     ;assume ? MHz clock for 100Hz ticker, rather than 64 MHz
PhoebeBodge          SETL    {FALSE}
PhoebeBodge_OldVCO   SETL    {FALSE}
PhoebeBodge_Bernard  SETL    {FALSE}
PhoebeBodge_Bernard2 SETL    {FALSE}
PhoebeBodge_Slow     SETL    {FALSE}
d114 2
a115 2
                GBLL    IOMD2_VIDMRDbroken
IOMD2_VIDMRDbroken SETL {TRUE}              ;looks like this won't be fixed in ASIC
a116 15
Phoebe_VRAMsize *       &400000             ;must be 4M currently (see ASSERTion for code that depends on this)

                GBLL    Phoebe_SoftROM
Phoebe_SoftROM  SETL    {TRUE}              ;whether to automagically soft load ROM on Phoebe, for speed
                       
                GBLL    KeepCachesOff       ;for logic analyser debug
KeepCachesOff   SETL    {FALSE}


;RISC OS 3.71 onwards assumed bus timings - ROM speeds atc are assumed according to IOMD ID regs. as follows:
;     if IOMD (Risc PC)     ROM ticks 5-3 (assumed bus 32 MHz)
;     if 7500 (A7000)       ROM ticks 5-3 (assumed bus 32 MHz), all clocks divide-by-1
;     if 7500FE (A7000+)    ROM ticks 5-3, half speed (asssumed bus 64 MHz), EDO memory, divide-by-2 I/O, divide-by-1 CPU and memory
;     if IOMD2 (Phoebe)     ROM ticks 10-6 (assumed bus 64 MHz)
;
d120 4
d126 2
d129 2
d148 4
d153 1
a153 1
LCDInvert       SETL    {TRUE}
d179 5
a183 2
                GBLL    NewRAMFS                    ; if this is TRUE then we're running a new FileCore variant of
NewRAMFS        SETL    {TRUE}                      ; RAMFS.  different handling of the RAMFS pregrow etc results
d185 6
a190 2
                GET     hdr:FileCore
                GET     hdr:RAMFS
d221 16
d241 2
a242 2
ChocolateScreen        SETL {TRUE}
ChocolateAMB           SETL {TRUE} :LAND: ARMSASupport
d264 5
d279 9
d311 1
a311 1
StorkPowerSave  SETL    {TRUE}          ;False=> older A4 code only
d314 1
a314 1
LCDSupport      SETL    {TRUE}
d320 5
d326 2
a327 2
                GBLL    ValidateCMOS            ; reset CMOS if checksum wrong on start-up
ValidateCMOS    SETL    {TRUE}
d386 1
d388 3
d396 3
d400 1
d403 1
d405 3
@


4.4.4.11
log
@Changed compile switches, to build Ursula kernel for RPC and A7000(+),
switches now set as follows:
  ARM67Support      TRUE  (for 610,710,7500,7500FE)
  ARMSASupport      TRUE  (for StrongARM)
  ARMSASupport_RevS FALSE (for StrongARMs before rev S)
  IOMD1Support      TRUE  (for old machines)
  IOMD2Support      FALSE (They killed Phoebe!)
Version set to 4.00 (RISC OS 4)
@
text
@d119 1
a119 1
ARM67Support      SETL    {TRUE}
d121 1
a121 1
ARMSASupport_RevS SETL    {FALSE}
d123 2
a124 2
IOMD1Support      SETL    {TRUE}
IOMD2Support      SETL    {FALSE}
@


4.3
log
@RISC OS 3.71 kernel changes merged.
Not fully tested on all hardware permutations.
@
text
@d202 1
a202 1
		! 0, "Modified code"
d242 2
a243 2
		GBLL	DoInitialiseMode
DoInitialiseMode SETL	{TRUE} :LAND: STB
d246 2
a247 2
                GBLL	Select16BitSound	; STBs and pre-IOMD systems don't have this link
Select16BitSound SETL	{FALSE}
d252 2
a253 2
                GBLL	Japanese16BitSound
Japanese16BitSound SETL	{TRUE} :LAND: STB
d324 2
d430 2
a431 2
	        GBLL	InterlacedPointer
InterlacedPointer SETL {TRUE} :LAND: STB		; enable code to do proper interlaced pointer
d433 2
a434 2
		GBLL	ValidateCMOS		; Apply special CMOS-corruption detection code, and do minimal default settings.
ValidateCMOS	SETL	{TRUE} :LAND: STB
d436 2
a437 2
		GBLL	UseHClk
UseHClk		SETL	{TRUE} :LAND: STB	; Use HClk when driving TVs.
@


4.2
log
@Kernel merged
@
text
@d213 11
d240 2
a324 1

d328 9
a336 1
                GBLL    SAUBxferbroken          ;whether extra NOPs required for user bank STM/LDM (is so far)
d341 16
a356 1
SAUBxferbroken     SETL {TRUE}  :LAND: StrongARM
@


4.1
log
@Initial revision
@
text
@d28 19
d169 3
d174 1
d202 1
d204 1
a204 1
IncludeTestSrc  SETL    {TRUE}
d209 4
d214 8
a221 1
NormalSpeedROMS SETL    {TRUE}          ;use FALSE for slow EPROMS
d229 7
d237 4
a240 1
Select16BitSound SETL   {TRUE} 
d259 1
a259 1
                                
d265 1
a265 1
                    
d284 3
d311 19
d386 4
d393 8
d510 1
a510 1
 
d520 1
a520 1
 
d526 1
a526 1
med_00001_twowords  SETL  {TRUE}         
d537 2
a538 2
 
 [ med_00001_debug    
d545 1
a545 1
 ! 0,"| once MED-00001 has been tested and marked 'fixed'.              |" 
d553 1
a553 1
 ] 
d596 2
d677 8
d688 3
a690 1
        ! 0, "PMF section size = &" :CC: :STR: (.-StartOfPMF)
d692 1
a692 1
 [ med_00001_debug    
d699 1
a699 1
 ! 0,"| once MED-00001 has been tested and marked 'fixed'.              |" 
d707 1
a707 1
 ] 
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@d150 2
a151 1
; SystemName moved to Machine.* header files.
d194 2
a195 8
		GBLL	DoInitialiseMode
DoInitialiseMode SETL	{TRUE}

                GBLL	Select16BitSound	; STBs and pre-IOMD systems don't have this link
Select16BitSound SETL	{FALSE}

                GBLL	Japanese16BitSound
Japanese16BitSound SETL	{TRUE}
d214 1
a214 1

d220 1
a220 1

d264 1
a264 1
CheckProtectionLink SETL (IO_Type = "IOMD") :LAND: {FALSE}	; NB affects Delete/Copy/R/T and 0-9/.
a321 14
	        GBLL	InterlacedPointer
InterlacedPointer SETL {TRUE}	; enable code to do proper interlaced pointer


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;	New Options for STB/NCD builds - JHarris 8/1/96
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		GBLL	ValidateCMOS		; Apply special CMOS-corruption detection code, and do minimal default settings.
ValidateCMOS	SETL	{TRUE}

		GBLL	UseHClk
UseHClk		SETL	{TRUE}			; Use HClk when driving TVs.

d431 1
a431 1

d441 1
a441 1

d447 1
a447 1
med_00001_twowords  SETL  {TRUE}
d458 2
a459 2

 [ med_00001_debug
d466 1
a466 1
 ! 0,"| once MED-00001 has been tested and marked 'fixed'.              |"
d474 1
a474 1
 ]
d601 1
a601 1
 [ med_00001_debug
d608 1
a608 1
 ! 0,"| once MED-00001 has been tested and marked 'fixed'.              |"
d616 1
a616 1
 ]
@


4.1.7.2
log
@Added FullCMOSRAMCache.
@
text
@a240 3
                GBLL    FullCMOSRAMCache        ; Whether to cache all CMOS RAM or only 240 bytes.
FullCMOSRAMCache SETL   {FALSE}

@


4.1.7.3
log
@Removed FullCMOSRAMCache support.
@
text
@d241 3
@


4.1.7.4
log
@Compile time option for TV display HCLK divider added
@
text
@a21 9
        GBLS    GetTVStandard
        
        [ Boca
GetTVStandard SETS   "GET     Hdr:Display.TV<Display>"
          ! 0, "Building for $TVStandard display"
        |
GetTVStandard SETS   "GET     Hdr:Display.TV"
        ]
        $GetTVStandard
@


4.1.7.5
log
@Added SWI OS_VIDCDivider, and vdu variable PixelRate for better video mode
support.  Fixed to build for Risc PC.
@
text
@d22 9
@


4.1.7.6
log
@Support added for 24LC128 16K EEPROM device.
OS_NVMemory SWI added to allow block operations on non-volatile memory.
Kernel can clock memory device at 400kHz for greater throughput.
Safeguards added to stop the device being accessed when the clock is changed
and the device doesn't have an RTC.
Changed to use srccommit.

Version 4.63, 1.1.2.2. Tagged as 'Kernel-4_63-1_1_2_2'
@
text
@a147 1
                [ Module_MinorVersion = ""
a148 3
                |
VersionNo       SETS  "$VString ($Date) $Module_MinorVersion"
                ]
@


4.1.5.1
log
@Import from SrcFiler
@
text
@d150 2
a151 1
; SystemName moved to Machine.* header files.
d194 2
a195 8
		GBLL	DoInitialiseMode
DoInitialiseMode SETL	{TRUE}

                GBLL	Select16BitSound	; STBs and pre-IOMD systems don't have this link
Select16BitSound SETL	{FALSE}

                GBLL	Japanese16BitSound
Japanese16BitSound SETL	{TRUE}
d214 1
a214 1

d220 1
a220 1

d264 1
a264 1
CheckProtectionLink SETL (IO_Type = "IOMD") :LAND: {FALSE}	; NB affects Delete/Copy/R/T and 0-9/.
a321 14
	        GBLL	InterlacedPointer
InterlacedPointer SETL {TRUE}	; enable code to do proper interlaced pointer


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;	New Options for STB/NCD builds - JHarris 8/1/96
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		GBLL	ValidateCMOS		; Apply special CMOS-corruption detection code, and do minimal default settings.
ValidateCMOS	SETL	{TRUE}

		GBLL	UseHClk
UseHClk		SETL	{TRUE}			; Use HClk when driving TVs.

d431 1
a431 1

d441 1
a441 1

d447 1
a447 1
med_00001_twowords  SETL  {TRUE}
d458 2
a459 2

 [ med_00001_debug
d466 1
a466 1
 ! 0,"| once MED-00001 has been tested and marked 'fixed'.              |"
d474 1
a474 1
 ]
d601 1
a601 1
 [ med_00001_debug
d608 1
a608 1
 ! 0,"| once MED-00001 has been tested and marked 'fixed'.              |"
d616 1
a616 1
 ]
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@a27 4
;whether compiling to run on (Risc PC) emulator
                GBLL    RunningOnEmul
RunningOnEmul   SETL    {FALSE}

a184 5
 [ RunningOnEmul
IncludeTestSrc  SETL    {FALSE}
 ]


d186 1
a186 4
NormalSpeedROMS SETL    {FALSE}          ;use FALSE for slow EPROMS

                GBLL    AutoSpeedROMS
AutoSpeedROMS   SETL    {TRUE}
d195 1
a195 1
Select16BitSound SETL   {TRUE}
d214 1
a214 1

d220 1
a220 1

a238 3
                GBLL    LCDInvert
LCDInvert       SETL    (VIDC_Type = "VIDC20") :LAND: {TRUE}

a262 14


                GBLL    StrongARM
                GBLL    SAWBbroken              ;whether StrongARM Write Buffer is broken (pass 1 silicon only)
                GBLL    SAcleanflushbroken      ;whether StrongARM single MCR for DC clean+flush broken (is always for SA110)
                GBLL    SAUBxferbroken          ;whether extra NOPs required for user bank STM/LDM (is so far)

StrongARM          SETL {TRUE}
SAWBbroken         SETL {FALSE} :LAND: StrongARM
SAcleanflushbroken SETL {TRUE}  :LAND: StrongARM
SAUBxferbroken     SETL {TRUE}  :LAND: StrongARM



a318 3
                GBLL    LCDSupport      ;Whether LCD Support is assembled in or not
LCDSupport      SETL    {TRUE}          ;(First intro'd for Stork)

d431 1
a431 1

d441 1
a441 1

d447 1
a447 1
med_00001_twowords  SETL  {TRUE}
d458 2
a459 2

 [ med_00001_debug
d466 1
a466 1
 ! 0,"| once MED-00001 has been tested and marked 'fixed'.              |"
d474 1
a474 1
 ]
a516 2
        GET     s.Copro15ops ; some macros

a595 8

StartOfAMB_beforealign
        ALIGN   4096                    ;align to 4k page boundary, for easy ROMpatch
StartOfAMB
        GET     s.AMBControl.AMB
        DCB     "GROT"                  ;spare words marker
        ALIGN   4096                    ;align to 4k page boundary, for easy ROMpatch

d599 1
a599 3
        ! 0, "PMF section size = &" :CC: :STR: (StartOfAMB_beforealign - StartOfPMF)
        ! 0, "AMB section (4k aligned) starts at ":CC::STR:(StartOfAMB)
        ! 0, "AMB section size (4k aligned) = &" :CC: :STR: (EndOfKernel - StartOfAMB)
d601 1
a601 1
 [ med_00001_debug
d608 1
a608 1
 ! 0,"| once MED-00001 has been tested and marked 'fixed'.              |"
d616 1
a616 1
 ]
@


4.1.3.2
log
@RISC OS 3.71 version taken
@
text
@a192 10
;RISC OS 3.71 onwards assumed bus timings - if true, then ROM speeds atc are assumed according to IOMD ID regs. as follows:
;     if IOMD (Risc PC)     ROM ticks 5-3 (assumed bus 32 MHz)
;     if 7500 (A7000)       ROM ticks 5-3 (assumed bus 32 MHz), all clocks divide-by-1
;     if 7500FE (A7000+)    ROM ticks 5-3,half speed (asssumed bus 64 MHz), EDO memory, divide-by-2 I/O, divide-by-1 CPU and memory
;
                GBLL    RO371Timings
RO371Timings    SETL    {TRUE}


  [ :LNOT: RO371Timings
d198 1
a198 1
AutoSpeedROMS   SETL    {TRUE}           ;WARNING: may not be reliable if true
a205 2
  ]

d279 1
d283 1
a283 9
                GBLL    SASTMhatbroken          ;whether ROM must support SA110's with broken STM^ (revision 3 should fix this)
                GBLL    StrongARM_POST          ;whether to run POST for StrongARM (and possibly ARM8)

                GBLL    ARM810support           ;StrongARM must also be true for this to be useful
                GBLL    ARM810bpbroken          ;whether branch predict is broken
                GBLL    ARM810cleanflushbroken  ;whether single MCR for IDC clean+flush broken (a la StrongARM!)
                GBLL    ARM810fastclock         ;whether to attempt to use fast clock (false means bus clock)
                GBLL    ARM810usePLL            ;whether to use PLL for fast clock (else RefClk pin)
                GBLL    ARM810_POST             ;whether to run POST for ARM810 (StrongARM_POST must also be true)
d288 1
a288 12
SASTMhatbroken         SETL {TRUE}  :LAND: StrongARM
StrongARM_POST         SETL {TRUE}  :LAND: StrongARM

ARM810support          SETL {FALSE} :LAND: StrongARM
ARM810bpbroken         SETL {TRUE}  :LAND: ARM810support
ARM810cleanflushbroken SETL {TRUE}  :LAND: ARM810support
ARM810fastclock        SETL {FALSE} :LAND: ARM810support
ARM810usePLL           SETL {TRUE}  :LAND: ARM810fastclock
ARM810_POST            SETL {FALSE} :LAND: ARM810support

                GBLL    VCOstartfix              ;code in early kernel to fix VCO start problem on A7000 (esp. 7500FE)
VCOstartfix     SETL    {TRUE}
a290 2
                GBLL    MorrisIDString           ;whether printed CPU string includes 7500/7500FE recognition
MorrisIDString  SETL    {TRUE} :LAND: StrongARM  ;printed CPU type only implemented if StrongARM true
@


4.1.3.1.2.1
log
@Merged from 3.71 CD
@
text
@a192 10
;RISC OS 3.71 onwards assumed bus timings - if true, then ROM speeds atc are assumed according to IOMD ID regs. as follows:
;     if IOMD (Risc PC)     ROM ticks 5-3 (assumed bus 32 MHz)
;     if 7500 (A7000)       ROM ticks 5-3 (assumed bus 32 MHz), all clocks divide-by-1
;     if 7500FE (A7000+)    ROM ticks 5-3,half speed (asssumed bus 64 MHz), EDO memory, divide-by-2 I/O, divide-by-1 CPU and memory
;
                GBLL    RO371Timings
RO371Timings    SETL    {TRUE}


  [ :LNOT: RO371Timings
d198 1
a198 1
AutoSpeedROMS   SETL    {TRUE}           ;WARNING: may not be reliable if true
a205 2
  ]

d279 1
d283 1
a283 9
                GBLL    SASTMhatbroken          ;whether ROM must support SA110's with broken STM^ (revision 3 should fix this)
                GBLL    StrongARM_POST          ;whether to run POST for StrongARM (and possibly ARM8)

                GBLL    ARM810support           ;StrongARM must also be true for this to be useful
                GBLL    ARM810bpbroken          ;whether branch predict is broken
                GBLL    ARM810cleanflushbroken  ;whether single MCR for IDC clean+flush broken (a la StrongARM!)
                GBLL    ARM810fastclock         ;whether to attempt to use fast clock (false means bus clock)
                GBLL    ARM810usePLL            ;whether to use PLL for fast clock (else RefClk pin)
                GBLL    ARM810_POST             ;whether to run POST for ARM810 (StrongARM_POST must also be true)
d288 1
a288 12
SASTMhatbroken         SETL {TRUE}  :LAND: StrongARM
StrongARM_POST         SETL {TRUE}  :LAND: StrongARM

ARM810support          SETL {FALSE} :LAND: StrongARM
ARM810bpbroken         SETL {TRUE}  :LAND: ARM810support
ARM810cleanflushbroken SETL {TRUE}  :LAND: ARM810support
ARM810fastclock        SETL {FALSE} :LAND: ARM810support
ARM810usePLL           SETL {TRUE}  :LAND: ARM810fastclock
ARM810_POST            SETL {FALSE} :LAND: ARM810support

                GBLL    VCOstartfix              ;code in early kernel to fix VCO start problem on A7000 (esp. 7500FE)
VCOstartfix     SETL    {TRUE}
a290 2
                GBLL    MorrisIDString           ;whether printed CPU string includes 7500/7500FE recognition
MorrisIDString  SETL    {TRUE} :LAND: StrongARM  ;printed CPU type only implemented if StrongARM true
@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
