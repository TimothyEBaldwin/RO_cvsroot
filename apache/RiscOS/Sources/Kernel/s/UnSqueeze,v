head	4.3;
access;
symbols
	Kernel-6_15:4.3
	Kernel-6_14:4.3
	Kernel-6_01-3:4.3
	Kernel-6_13:4.3
	Kernel-6_12:4.3
	Kernel-6_11:4.3
	Kernel-6_10:4.3
	Kernel-6_09:4.3
	Kernel-6_08-4_129_2_10:4.3
	Kernel-6_08-4_129_2_9:4.3
	Kernel-6_08:4.3
	Kernel-6_07:4.3
	Kernel-6_06:4.3
	Kernel-6_05-4_129_2_8:4.3
	Kernel-6_05:4.3
	Kernel-6_04:4.3
	Kernel-6_03:4.3
	Kernel-6_01-2:4.3
	Kernel-6_01-4_146_2_1:4.3
	Kernel-6_02:4.3
	Kernel-6_01-1:4.3
	Kernel-6_01:4.3
	Kernel-6_00:4.3
	Kernel-5_99:4.3
	Kernel-5_98:4.3
	Kernel-5_97-4_129_2_7:4.3
	Kernel-5_97:4.3
	Kernel-5_96:4.3
	Kernel-5_95:4.3
	Kernel-5_94:4.3
	Kernel-5_93:4.3
	Kernel-5_92:4.3
	Kernel-5_91:4.3
	Kernel-5_90:4.3
	Kernel-5_89-4_129_2_6:4.3
	Kernel-5_89:4.3
	Kernel-5_88-4_129_2_5:4.3
	Kernel-5_88-4_129_2_4:4.3
	Kernel-5_88:4.3
	Kernel-5_87:4.3
	Kernel-5_86-4_129_2_3:4.3
	Kernel-5_86-4_129_2_2:4.3
	Kernel-5_86-4_129_2_1:4.3
	Kernel-5_86:4.3
	SMP:4.3.0.2
	SMP_bp:4.3
	Kernel-5_85:4.3
	Kernel-5_54-1:4.3
	Kernel-5_84:4.3
	Kernel-5_83:4.3
	Kernel-5_82:4.3
	Kernel-5_81:4.3
	Kernel-5_80:4.3
	Kernel-5_79:4.3
	Kernel-5_78:4.3
	Kernel-5_77:4.3
	Kernel-5_76:4.3
	Kernel-5_75:4.3
	Kernel-5_74:4.3
	Kernel-5_73:4.3
	Kernel-5_72:4.3
	Kernel-5_71:4.3
	Kernel-5_70:4.3
	Kernel-5_69:4.3
	Kernel-5_68:4.3
	Kernel-5_67:4.3
	Kernel-5_66:4.3
	Kernel-5_65:4.3
	Kernel-5_64:4.3
	Kernel-5_63:4.3
	Kernel-5_62:4.3
	Kernel-5_61:4.3
	Kernel-5_60:4.3
	Kernel-5_59:4.3
	Kernel-5_58:4.3
	Kernel-5_57:4.3
	Kernel-5_56:4.3
	Kernel-5_55:4.3
	Kernel-5_54:4.3
	Kernel-5_53:4.3
	Kernel-5_52:4.3
	Kernel-5_51:4.3
	Kernel-5_50:4.3
	Kernel-5_49:4.3
	HAL_merge:4.2.2.1
	Kernel-5_48:4.3
	Kernel-5_35-4_79_2_327:4.2.2.1
	Kernel-5_35-4_79_2_326:4.2.2.1
	Kernel-5_35-4_79_2_325:4.2.2.1
	Kernel-5_35-4_79_2_324:4.2.2.1
	Kernel-5_35-4_79_2_323:4.2.2.1
	Kernel-5_35-4_79_2_322:4.2.2.1
	Kernel-5_35-4_79_2_321:4.2.2.1
	Kernel-5_35-4_79_2_320:4.2.2.1
	Kernel-5_35-4_79_2_319:4.2.2.1
	Kernel-5_35-4_79_2_318:4.2.2.1
	Kernel-5_35-4_79_2_317:4.2.2.1
	Kernel-5_35-4_79_2_316:4.2.2.1
	Kernel-5_35-4_79_2_315:4.2.2.1
	Kernel-5_35-4_79_2_314:4.2.2.1
	Kernel-5_35-4_79_2_313:4.2.2.1
	Kernel-5_35-4_79_2_312:4.2.2.1
	Kernel-5_35-4_79_2_311:4.2.2.1
	Kernel-5_35-4_79_2_310:4.2.2.1
	Kernel-5_35-4_79_2_309:4.2.2.1
	Kernel-5_35-4_79_2_308:4.2.2.1
	Kernel-5_35-4_79_2_307:4.2.2.1
	Kernel-5_35-4_79_2_306:4.2.2.1
	Kernel-5_35-4_79_2_305:4.2.2.1
	Kernel-5_35-4_79_2_304:4.2.2.1
	Kernel-5_35-4_79_2_303:4.2.2.1
	Kernel-5_35-4_79_2_302:4.2.2.1
	Kernel-5_35-4_79_2_301:4.2.2.1
	Kernel-5_35-4_79_2_300:4.2.2.1
	Kernel-5_35-4_79_2_299:4.2.2.1
	Kernel-5_35-4_79_2_298:4.2.2.1
	Kernel-5_35-4_79_2_297:4.2.2.1
	Kernel-5_35-4_79_2_296:4.2.2.1
	Kernel-5_35-4_79_2_295:4.2.2.1
	Kernel-5_35-4_79_2_294:4.2.2.1
	Kernel-5_35-4_79_2_293:4.2.2.1
	Kernel-5_35-4_79_2_292:4.2.2.1
	Kernel-5_35-4_79_2_291:4.2.2.1
	Kernel-5_35-4_79_2_290:4.2.2.1
	Kernel-5_35-4_79_2_289:4.2.2.1
	Kernel-5_35-4_79_2_288:4.2.2.1
	Kernel-5_35-4_79_2_287:4.2.2.1
	Kernel-5_35-4_79_2_286:4.2.2.1
	Kernel-5_35-4_79_2_285:4.2.2.1
	Kernel-5_35-4_79_2_284:4.2.2.1
	Kernel-5_35-4_79_2_283:4.2.2.1
	Kernel-5_35-4_79_2_282:4.2.2.1
	Kernel-5_35-4_79_2_281:4.2.2.1
	Kernel-5_35-4_79_2_280:4.2.2.1
	Kernel-5_35-4_79_2_279:4.2.2.1
	Kernel-5_35-4_79_2_278:4.2.2.1
	Kernel-5_35-4_79_2_277:4.2.2.1
	Kernel-5_35-4_79_2_276:4.2.2.1
	Kernel-5_35-4_79_2_275:4.2.2.1
	Kernel-5_35-4_79_2_274:4.2.2.1
	Kernel-5_35-4_79_2_273:4.2.2.1
	Kernel-5_35-4_79_2_272:4.2.2.1
	Kernel-5_35-4_79_2_271:4.2.2.1
	Kernel-5_35-4_79_2_270:4.2.2.1
	Kernel-5_35-4_79_2_269:4.2.2.1
	Kernel-5_35-4_79_2_268:4.2.2.1
	Kernel-5_35-4_79_2_267:4.2.2.1
	Kernel-5_35-4_79_2_266:4.2.2.1
	Kernel-5_35-4_79_2_265:4.2.2.1
	Kernel-5_35-4_79_2_264:4.2.2.1
	Kernel-5_35-4_79_2_263:4.2.2.1
	Kernel-5_35-4_79_2_262:4.2.2.1
	Kernel-5_35-4_79_2_261:4.2.2.1
	Kernel-5_35-4_79_2_260:4.2.2.1
	Kernel-5_35-4_79_2_259:4.2.2.1
	Kernel-5_35-4_79_2_258:4.2.2.1
	Kernel-5_35-4_79_2_257:4.2.2.1
	Kernel-5_35-4_79_2_256:4.2.2.1
	Kernel-5_35-4_79_2_255:4.2.2.1
	Kernel-5_35-4_79_2_254:4.2.2.1
	Kernel-5_35-4_79_2_253:4.2.2.1
	Kernel-5_35-4_79_2_252:4.2.2.1
	Kernel-5_35-4_79_2_251:4.2.2.1
	Kernel-5_35-4_79_2_250:4.2.2.1
	Kernel-5_35-4_79_2_249:4.2.2.1
	Kernel-5_35-4_79_2_248:4.2.2.1
	Kernel-5_35-4_79_2_247:4.2.2.1
	Kernel-5_35-4_79_2_246:4.2.2.1
	Kernel-5_35-4_79_2_245:4.2.2.1
	Kernel-5_35-4_79_2_244:4.2.2.1
	Kernel-5_35-4_79_2_243:4.2.2.1
	Kernel-5_35-4_79_2_242:4.2.2.1
	Kernel-5_35-4_79_2_241:4.2.2.1
	Kernel-5_35-4_79_2_240:4.2.2.1
	Kernel-5_35-4_79_2_239:4.2.2.1
	Kernel-5_35-4_79_2_238:4.2.2.1
	Kernel-5_35-4_79_2_237:4.2.2.1
	Kernel-5_35-4_79_2_236:4.2.2.1
	Kernel-5_35-4_79_2_235:4.2.2.1
	Kernel-5_35-4_79_2_234:4.2.2.1
	Kernel-5_35-4_79_2_233:4.2.2.1
	Kernel-5_35-4_79_2_232:4.2.2.1
	Kernel-5_35-4_79_2_231:4.2.2.1
	Kernel-5_35-4_79_2_230:4.2.2.1
	Kernel-5_35-4_79_2_229:4.2.2.1
	Kernel-5_35-4_79_2_228:4.2.2.1
	Kernel-5_35-4_79_2_227:4.2.2.1
	Kernel-5_35-4_79_2_226:4.2.2.1
	Kernel-5_35-4_79_2_225:4.2.2.1
	Kernel-5_35-4_79_2_224:4.2.2.1
	Kernel-5_35-4_79_2_223:4.2.2.1
	Kernel-5_35-4_79_2_222:4.2.2.1
	Kernel-5_35-4_79_2_221:4.2.2.1
	Kernel-5_35-4_79_2_220:4.2.2.1
	Kernel-5_35-4_79_2_219:4.2.2.1
	Kernel-5_35-4_79_2_218:4.2.2.1
	Kernel-5_35-4_79_2_217:4.2.2.1
	Kernel-5_35-4_79_2_216:4.2.2.1
	Kernel-5_35-4_79_2_215:4.2.2.1
	Kernel-5_35-4_79_2_214:4.2.2.1
	Kernel-5_35-4_79_2_213:4.2.2.1
	Kernel-5_35-4_79_2_212:4.2.2.1
	Kernel-5_35-4_79_2_211:4.2.2.1
	Kernel-5_35-4_79_2_210:4.2.2.1
	Kernel-5_35-4_79_2_209:4.2.2.1
	Kernel-5_35-4_79_2_208:4.2.2.1
	Kernel-5_35-4_79_2_207:4.2.2.1
	Kernel-5_35-4_79_2_206:4.2.2.1
	Kernel-5_35-4_79_2_205:4.2.2.1
	Kernel-5_35-4_79_2_204:4.2.2.1
	Kernel-5_35-4_79_2_203:4.2.2.1
	Kernel-5_35-4_79_2_202:4.2.2.1
	Kernel-5_35-4_79_2_201:4.2.2.1
	Kernel-5_35-4_79_2_200:4.2.2.1
	Kernel-5_35-4_79_2_199:4.2.2.1
	Kernel-5_35-4_79_2_198:4.2.2.1
	Kernel-5_35-4_79_2_197:4.2.2.1
	Kernel-5_35-4_79_2_196:4.2.2.1
	Kernel-5_35-4_79_2_195:4.2.2.1
	Kernel-5_35-4_79_2_194:4.2.2.1
	Kernel-5_35-4_79_2_193:4.2.2.1
	Kernel-5_35-4_79_2_192:4.2.2.1
	Kernel-5_35-4_79_2_191:4.2.2.1
	Kernel-5_35-4_79_2_190:4.2.2.1
	Kernel-5_35-4_79_2_189:4.2.2.1
	Kernel-5_35-4_79_2_188:4.2.2.1
	Kernel-5_35-4_79_2_187:4.2.2.1
	Kernel-5_35-4_79_2_186:4.2.2.1
	Kernel-5_35-4_79_2_185:4.2.2.1
	Kernel-5_35-4_79_2_184:4.2.2.1
	Kernel-5_35-4_79_2_183:4.2.2.1
	Kernel-5_35-4_79_2_182:4.2.2.1
	Kernel-5_35-4_79_2_181:4.2.2.1
	Kernel-5_35-4_79_2_180:4.2.2.1
	Kernel-5_35-4_79_2_179:4.2.2.1
	Kernel-5_35-4_79_2_178:4.2.2.1
	Kernel-5_35-4_79_2_177:4.2.2.1
	Kernel-5_35-4_79_2_176:4.2.2.1
	Kernel-5_35-4_79_2_175:4.2.2.1
	Kernel-5_35-4_79_2_174:4.2.2.1
	Kernel-5_35-4_79_2_173:4.2.2.1
	Kernel-5_35-4_79_2_172:4.2.2.1
	Kernel-5_35-4_79_2_171:4.2.2.1
	Kernel-5_35-4_79_2_170:4.2.2.1
	Kernel-5_35-4_79_2_169:4.2.2.1
	Kernel-5_35-4_79_2_168:4.2.2.1
	Kernel-5_35-4_79_2_167:4.2.2.1
	Kernel-5_35-4_79_2_166:4.2.2.1
	Kernel-5_35-4_79_2_165:4.2.2.1
	RPi_merge:4.2.2.1
	Kernel-5_35-4_79_2_147_2_23:4.2.2.1
	Kernel-5_35-4_79_2_147_2_22:4.2.2.1
	Kernel-5_35-4_79_2_147_2_21:4.2.2.1
	Kernel-5_35-4_79_2_147_2_20:4.2.2.1
	Kernel-5_35-4_79_2_147_2_19:4.2.2.1
	Kernel-5_35-4_79_2_147_2_18:4.2.2.1
	Kernel-5_35-4_79_2_164:4.2.2.1
	Kernel-5_35-4_79_2_163:4.2.2.1
	Kernel-5_35-4_79_2_147_2_17:4.2.2.1
	Kernel-5_35-4_79_2_147_2_16:4.2.2.1
	Kernel-5_35-4_79_2_147_2_15:4.2.2.1
	Kernel-5_35-4_79_2_162:4.2.2.1
	Kernel-5_35-4_79_2_161:4.2.2.1
	Kernel-5_35-4_79_2_147_2_14:4.2.2.1
	Kernel-5_35-4_79_2_147_2_13:4.2.2.1
	Kernel-5_35-4_79_2_160:4.2.2.1
	Kernel-5_35-4_79_2_159:4.2.2.1
	Kernel-5_35-4_79_2_158:4.2.2.1
	Kernel-5_35-4_79_2_157:4.2.2.1
	Kernel-5_35-4_79_2_156:4.2.2.1
	Kernel-5_35-4_79_2_147_2_12:4.2.2.1
	Kernel-5_35-4_79_2_147_2_11:4.2.2.1
	Kernel-5_35-4_79_2_155:4.2.2.1
	Kernel-5_35-4_79_2_147_2_10:4.2.2.1
	Kernel-5_35-4_79_2_154:4.2.2.1
	Kernel-5_35-4_79_2_153:4.2.2.1
	Kernel-5_35-4_79_2_147_2_9:4.2.2.1
	Kernel-5_35-4_79_2_152:4.2.2.1
	Kernel-5_35-4_79_2_151:4.2.2.1
	Kernel-5_35-4_79_2_147_2_8:4.2.2.1
	Kernel-5_35-4_79_2_147_2_7:4.2.2.1
	Kernel-5_35-4_79_2_150:4.2.2.1
	Kernel-5_35-4_79_2_147_2_6:4.2.2.1
	Kernel-5_35-4_79_2_147_2_5:4.2.2.1
	Kernel-5_35-4_79_2_149:4.2.2.1
	Kernel-5_35-4_79_2_147_2_4:4.2.2.1
	Kernel-5_35-4_79_2_147_2_3:4.2.2.1
	Kernel-5_35-4_79_2_148:4.2.2.1
	Kernel-5_35-4_79_2_147_2_2:4.2.2.1
	Kernel-5_35-4_79_2_147_2_1:4.2.2.1
	RPi:4.2.2.1.0.6
	RPi_bp:4.2.2.1
	Kernel-5_35-4_79_2_98_2_52_2_1:4.2.2.1
	alees_Kernel_dev:4.2.2.1.0.4
	alees_Kernel_dev_bp:4.2.2.1
	Kernel-5_35-4_79_2_147:4.2.2.1
	Kernel-5_35-4_79_2_146:4.2.2.1
	Kernel-5_35-4_79_2_145:4.2.2.1
	Kernel-5_35-4_79_2_144:4.2.2.1
	Kernel-5_35-4_79_2_143:4.2.2.1
	Kernel-5_35-4_79_2_142:4.2.2.1
	Kernel-5_35-4_79_2_141:4.2.2.1
	Kernel-5_35-4_79_2_140:4.2.2.1
	Kernel-5_35-4_79_2_139:4.2.2.1
	Kernel-5_35-4_79_2_138:4.2.2.1
	Kernel-5_35-4_79_2_137:4.2.2.1
	Kernel-5_35-4_79_2_136:4.2.2.1
	Kernel-5_35-4_79_2_135:4.2.2.1
	Kernel-5_35-4_79_2_134:4.2.2.1
	Kernel-5_35-4_79_2_133:4.2.2.1
	Kernel-5_35-4_79_2_132:4.2.2.1
	Kernel-5_35-4_79_2_131:4.2.2.1
	Kernel-5_35-4_79_2_130:4.2.2.1
	Kernel-5_35-4_79_2_129:4.2.2.1
	Kernel-5_35-4_79_2_128:4.2.2.1
	Kernel-5_35-4_79_2_127:4.2.2.1
	Kernel-5_35-4_79_2_126:4.2.2.1
	Kernel-5_35-4_79_2_125:4.2.2.1
	Kernel-5_35-4_79_2_124:4.2.2.1
	Kernel-5_35-4_79_2_123:4.2.2.1
	Cortex_merge:4.2.2.1
	Kernel-5_35-4_79_2_122:4.2.2.1
	Kernel-5_35-4_79_2_98_2_54:4.2.2.1
	Kernel-5_35-4_79_2_98_2_53:4.2.2.1
	Kernel-5_35-4_79_2_98_2_52:4.2.2.1
	Kernel-5_35-4_79_2_98_2_51:4.2.2.1
	Kernel-5_35-4_79_2_98_2_50:4.2.2.1
	Kernel-5_35-4_79_2_98_2_49:4.2.2.1
	Kernel-5_35-4_79_2_98_2_48:4.2.2.1
	Kernel-5_35-4_79_2_121:4.2.2.1
	Kernel-5_35-4_79_2_98_2_47:4.2.2.1
	Kernel-5_35-4_79_2_120:4.2.2.1
	Kernel-5_35-4_79_2_98_2_46:4.2.2.1
	Kernel-5_35-4_79_2_119:4.2.2.1
	Kernel-5_35-4_79_2_98_2_45:4.2.2.1
	Kernel-5_35-4_79_2_98_2_44:4.2.2.1
	Kernel-5_35-4_79_2_118:4.2.2.1
	Kernel-5_35-4_79_2_98_2_43:4.2.2.1
	Kernel-5_35-4_79_2_117:4.2.2.1
	Kernel-5_35-4_79_2_116:4.2.2.1
	Kernel-5_35-4_79_2_98_2_42:4.2.2.1
	Kernel-5_35-4_79_2_115:4.2.2.1
	Kernel-5_35-4_79_2_98_2_41:4.2.2.1
	Kernel-5_35-4_79_2_98_2_40:4.2.2.1
	Kernel-5_35-4_79_2_114:4.2.2.1
	Kernel-5_35-4_79_2_98_2_39:4.2.2.1
	Kernel-5_35-4_79_2_98_2_38:4.2.2.1
	Kernel-5_35-4_79_2_113:4.2.2.1
	Kernel-5_35-4_79_2_112:4.2.2.1
	Kernel-5_35-4_79_2_98_2_37:4.2.2.1
	Kernel-5_35-4_79_2_98_2_36:4.2.2.1
	Kernel-5_35-4_79_2_98_2_35:4.2.2.1
	Kernel-5_35-4_79_2_98_2_34:4.2.2.1
	Kernel-5_35-4_79_2_98_2_33:4.2.2.1
	Kernel-5_35-4_79_2_98_2_32:4.2.2.1
	Kernel-5_35-4_79_2_98_2_31:4.2.2.1
	Kernel-5_35-4_79_2_98_2_30:4.2.2.1
	Kernel-5_35-4_79_2_98_2_29:4.2.2.1
	Kernel-5_35-4_79_2_98_2_28:4.2.2.1
	Kernel-5_35-4_79_2_98_2_27:4.2.2.1
	Kernel-5_35-4_79_2_98_2_26:4.2.2.1
	Kernel-5_35-4_79_2_111:4.2.2.1
	Kernel-5_35-4_79_2_98_2_25:4.2.2.1
	Kernel-5_35-4_79_2_98_2_24:4.2.2.1
	Kernel-5_35-4_79_2_98_2_23:4.2.2.1
	Kernel-5_35-4_79_2_110:4.2.2.1
	Kernel-5_35-4_79_2_98_2_22:4.2.2.1
	Kernel-5_35-4_79_2_109:4.2.2.1
	Kernel-5_35-4_79_2_98_2_21:4.2.2.1
	Kernel-5_35-4_79_2_98_2_20:4.2.2.1
	Kernel-5_35-4_79_2_108:4.2.2.1
	Kernel-5_35-4_79_2_107:4.2.2.1
	Kernel-5_35-4_79_2_98_2_19:4.2.2.1
	Kernel-5_35-4_79_2_98_2_18:4.2.2.1
	Kernel-5_35-4_79_2_98_2_17:4.2.2.1
	Kernel-5_35-4_79_2_98_2_16:4.2.2.1
	Kernel-5_35-4_79_2_98_2_15:4.2.2.1
	Kernel-5_35-4_79_2_106:4.2.2.1
	Kernel-5_35-4_79_2_105:4.2.2.1
	Kernel-5_35-4_79_2_104:4.2.2.1
	Kernel-5_35-4_79_2_98_2_14:4.2.2.1
	Kernel-5_35-4_79_2_98_2_13:4.2.2.1
	Kernel-5_35-4_79_2_98_2_12:4.2.2.1
	Kernel-5_35-4_79_2_98_2_11:4.2.2.1
	Kernel-5_35-4_79_2_98_2_10:4.2.2.1
	Kernel-5_35-4_79_2_98_2_9:4.2.2.1
	Kernel-5_35-4_79_2_103:4.2.2.1
	Kernel-5_35-4_79_2_102:4.2.2.1
	Kernel-5_35-4_79_2_98_2_8:4.2.2.1
	Kernel-5_35-4_79_2_98_2_7:4.2.2.1
	Kernel-5_35-4_79_2_98_2_6:4.2.2.1
	Kernel-5_35-4_79_2_98_2_5:4.2.2.1
	Kernel-5_35-4_79_2_98_2_4:4.2.2.1
	Kernel-5_35-4_79_2_101:4.2.2.1
	Kernel-5_35-4_79_2_100:4.2.2.1
	Kernel-5_35-4_79_2_99:4.2.2.1
	Kernel-5_35-4_79_2_98_2_3:4.2.2.1
	Kernel-5_35-4_79_2_98_2_2:4.2.2.1
	Kernel-5_35-4_79_2_98_2_1:4.2.2.1
	Cortex:4.2.2.1.0.2
	Cortex_bp:4.2.2.1
	Kernel-5_35-4_79_2_98:4.2.2.1
	Kernel-5_35-4_79_2_97:4.2.2.1
	Kernel-5_35-4_79_2_96:4.2.2.1
	Kernel-5_35-4_79_2_95:4.2.2.1
	Kernel-5_35-4_79_2_94:4.2.2.1
	Kernel-5_35-4_79_2_93:4.2.2.1
	Kernel-5_35-4_79_2_92:4.2.2.1
	Kernel-5_35-4_79_2_91:4.2.2.1
	Kernel-5_35-4_79_2_90:4.2.2.1
	Kernel-5_35-4_79_2_89:4.2.2.1
	Kernel-5_35-4_79_2_88:4.2.2.1
	Kernel-5_35-4_79_2_87:4.2.2.1
	Kernel-5_35-4_79_2_86:4.2.2.1
	Kernel-5_35-4_79_2_85:4.2.2.1
	Kernel-5_35-4_79_2_84:4.2.2.1
	Kernel-5_35-4_79_2_83:4.2.2.1
	Kernel-5_35-4_79_2_82:4.2.2.1
	Kernel-5_35-4_79_2_81:4.2.2.1
	Kernel-5_35-4_79_2_80:4.2.2.1
	Kernel-5_35-4_79_2_79:4.2.2.1
	Kernel-5_35-4_79_2_78:4.2.2.1
	Kernel-5_35-4_79_2_77:4.2.2.1
	RO_5_07:4.2.2.1
	Kernel-5_35-4_79_2_76:4.2.2.1
	Kernel-5_35-4_79_2_75:4.2.2.1
	Kernel-5_35-4_79_2_74:4.2.2.1
	Kernel-5_35-4_79_2_73:4.2.2.1
	Kernel-5_35-4_79_2_72:4.2.2.1
	Kernel-5_35-4_79_2_71:4.2.2.1
	Kernel-5_35-4_79_2_70:4.2.2.1
	Kernel-5_35-4_79_2_69:4.2.2.1
	Kernel-5_35-4_79_2_68:4.2.2.1
	Kernel-5_35-4_79_2_67:4.2.2.1
	Kernel-5_35-4_79_2_66:4.2.2.1
	Kernel-5_35-4_79_2_65:4.2.2.1
	Kernel-5_35-4_79_2_64:4.2.2.1
	Kernel-5_35-4_79_2_63:4.2.2.1
	Kernel-5_35-4_79_2_62:4.2.2.1
	Kernel-5_35-4_79_2_61:4.2.2.1
	Kernel-5_35-4_79_2_59:4.2.2.1
	Kernel-5_35-4_79_2_58:4.2.2.1
	Kernel-5_35-4_79_2_57:4.2.2.1
	Kernel-5_35-4_79_2_56:4.2.2.1
	Kernel-5_35-4_79_2_55:4.2.2.1
	Kernel-5_35-4_79_2_54:4.2.2.1
	Kernel-5_35-4_79_2_53:4.2.2.1
	Kernel-5_35-4_79_2_52:4.2.2.1
	Kernel-5_35-4_79_2_51:4.2.2.1
	Kernel-5_35-4_79_2_50:4.2.2.1
	Kernel-5_35-4_79_2_49:4.2.2.1
	Kernel-5_35-4_79_2_48:4.2.2.1
	Kernel-5_47:4.2
	Kernel-5_46-4_90_2_1:4.2
	nbingham_Kernel_FastNC_dev_bp:4.2
	nbingham_Kernel_FastNC_dev:4.2.0.4
	Kernel-5_46:4.2
	Kernel-5_45:4.2
	Kernel-5_35-4_79_2_47:4.2.2.1
	Kernel-5_35-4_79_2_46:4.2.2.1
	Kernel-5_35-4_79_2_45:4.2.2.1
	Kernel-5_35-4_79_2_44:4.2.2.1
	Kernel-5_35-4_79_2_25_2_2:4.2.2.1
	Kernel-5_35-4_79_2_43:4.2.2.1
	Kernel-5_35-4_79_2_42:4.2.2.1
	Kernel-5_35-4_79_2_41:4.2.2.1
	Kernel-5_35-4_79_2_40:4.2.2.1
	Kernel-5_35-4_79_2_39:4.2.2.1
	Kernel-5_35-4_79_2_38:4.2.2.1
	Kernel-5_35-4_79_2_37:4.2.2.1
	Kernel-5_35-4_79_2_36:4.2.2.1
	Kernel-5_35-4_79_2_35:4.2.2.1
	Kernel-5_35-4_79_2_34:4.2.2.1
	Kernel-5_35-4_79_2_33:4.2.2.1
	Kernel-5_35-4_79_2_32:4.2.2.1
	Kernel-5_44:4.2
	Kernel-5_35-4_79_2_25_2_1:4.2.2.1
	Kernel-5_43:4.2
	Kernel-5_35-4_79_2_31:4.2.2.1
	Kernel-5_35-4_79_2_30:4.2.2.1
	Kernel-5_35-4_79_2_29:4.2.2.1
	Kernel-5_35-4_79_2_28:4.2.2.1
	Kernel-5_35-4_79_2_27:4.2.2.1
	Kernel-5_35-4_79_2_26:4.2.2.1
	Kernel-5_42:4.2
	Kernel-5_41:4.2
	Kernel-5_40:4.2
	Kernel-5_35-4_79_2_25:4.2.2.1
	Kernel-5_35-4_79_2_24:4.2.2.1
	Kernel-5_35-4_79_2_23:4.2.2.1
	Kernel-5_35-4_79_2_22:4.2.2.1
	Kernel-5_35-4_79_2_21:4.2.2.1
	Kernel-5_35-4_79_2_20:4.2.2.1
	Kernel-5_35-4_79_2_19:4.2.2.1
	Kernel-5_35-4_79_2_18:4.2.2.1
	Kernel-5_35-4_79_2_17:4.2.2.1
	Kernel-5_35-4_79_2_16:4.2.2.1
	Kernel-5_35-4_79_2_15:4.2.2.1
	Kernel-5_35-4_79_2_14:4.2.2.1
	Kernel-5_39:4.2
	Kernel-5_13-4_52_2_1:4.1
	Bethany:4.1.0.10
	Kernel-5_38:4.2
	Kernel-5_35-4_79_2_13:4.2.2.1
	Kernel-5_35-4_79_2_12:4.2.2.1
	Kernel-5_35-4_79_2_11:4.2.2.1
	Kernel-5_37:4.2
	Kernel-5_35-4_79_2_10:4.2.2.1
	Kernel-5_35-4_79_2_9:4.2.2.1
	Kernel-5_36:4.2
	Kernel-5_35-4_79_2_8:4.2.2.1
	Kernel-5_35-4_79_2_7:4.2.2.1
	Kernel-5_35-4_79_2_6:4.2.2.1
	Kernel-5_35-4_79_2_5:4.2.2.1
	Kernel-5_35-4_79_2_4:4.2.2.1
	Kernel-5_35-4_79_2_3:4.2.2.1
	Kernel-5_35-4_79_2_2:4.2.2.1
	dellis_autobuild_BaseSW:4.2
	Kernel-5_35-4_79_2_1:4.2.2.1
	HAL:4.2.0.2
	Kernel-5_35:4.2
	Kernel-5_34:4.2
	Kernel-5_33:4.2
	Kernel-5_32:4.2
	Kernel-5_31:4.2
	Kernel-5_30:4.2
	Kernel-5_29:4.2
	Kernel-5_28:4.2
	Kernel-5_27:4.2
	Kernel-5_26:4.2
	Kernel-5_25:4.2
	Kernel-5_24:4.2
	Kernel-5_23:4.2
	Kernel-5_22:4.1
	sbrodie_sedwards_16Mar2000:4.1
	Kernel-5_21:4.1
	Kernel-5_20:4.1
	Kernel-5_19:4.1
	Kernel-5_18:4.1
	Kernel-5_17:4.1
	Kernel-5_16:4.1
	Kernel-5_15:4.1
	Kernel-5_14:4.1
	Kernel-5_13:4.1
	Kernel-5_12:4.1
	Kernel-5_11:4.1
	Kernel-5_10:4.1
	Kernel-5_09:4.1
	Kernel-5_08:4.1
	Kernel-5_07:4.1
	Kernel-5_06:4.1
	Kernel-5_05:4.1
	Kernel-5_04:4.1
	Kernel-5_03:4.1
	Kernel-5_02:4.1
	Kernel-5_01:4.1
	Kernel-5_00:4.1
	Kernel-4_99:4.1
	Kernel-4_98:4.1
	Kernel-4_97:4.1
	Kernel-4_96:4.1
	Kernel-4_95:4.1
	Kernel-4_94:4.1
	Kernel-4_93:4.1
	Kernel-4_92:4.1
	Kernel-4_91:4.1
	Kernel-4_90:4.1
	dcotton_autobuild_BaseSW:4.2
	Kernel-4_89:4.1
	Kernel-4_88:4.1
	Kernel-4_87:4.1
	Kernel-4_86:4.1
	Kernel-4_85:4.1
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1
	Kernel-4_84:4.1
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1
	Ursula_RiscPC_bp:4.1
	Kernel-4_83:4.1
	Kernel-4_82:4.1
	Kernel-4_81:4.1
	Kernel-4_80:4.1
	Kernel-4_79:4.1
	Kernel-4_78:4.1
	Kernel-4_77:4.1
	Kernel-4_76:4.1
	Kernel-4_75:4.1
	Kernel-4_74:4.1
	Kernel-4_73:4.1
	Kernel-4_72:4.1
	Kernel-4_71:4.1
	Kernel-4_70:4.1
	Kernel-4_69:4.1
	Kernel-4_68:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	Kernel-4_63-1_1_2_5:4.1.7.1
	Kernel-4_63-1_1_2_4:4.1.7.1
	Kernel-4_67:4.1
	Kernel-4_66:4.1
	Kernel-4_63-1_1_2_3:4.1.7.1
	Kernel-4_65:4.1
	Ursula_merge:4.1
	Kernel-4_64:4.1
	mstphens_Kernel-3_81:4.1
	Kernel-4_63-1_1_2_2:4.1.7.1
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	mstphens_Kernel-3_80:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.3
date	2016.06.30.20.08.09;	author jlee;	state Exp;
branches;
next	4.2;
commitid	IWoXxARWeuLDOwcz;

4.2
date	2000.04.04.14.27.34;	author kbracey;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.41.26;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.2.2.1
date	2000.09.15.12.38.01;	author kbracey;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.41.26;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.01.23;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.11.56;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.04.02;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;
; s.UnSqueeze by RCC 25-Aug-87
; This is a bit of code to be included in self-decompressing images to
; expand the image in place.  See elsewhere for details of the compression
; algorithm.
;
; ***********************************
; ***    C h a n g e   L i s t    ***
; ***********************************

; Date       Name       Description
; ----       ----       -----------
; 13-Feb-90  TDobson    Minor optimisation which saves 1 instruction for
;                       every output word that isn't a "short" or a "long".
; 15-Feb-90  TDobson    Started conversion for inclusion in RISC OS kernel

;        GET     Hdr:Debug

; Constants defining partition of nibble value space: these must match
; corresponding values in mod.squeeze.

NibsLong    * 7
NibsShort   * (14-NibsLong)
MinShort    * (2+NibsLong)
MinLong     * 2

; **************************************************************************
;
;       CheckForSqueezedModule - Check whether a module is squeezed, and
;                                unsqueeze it if it is
;
; in:   R9 -> module node
;       R10 -> environment string
;       R12 -> incarnation node
;
; out:  R9 preserved, but module node pointed to may have code entry changed
;       to point to expanded copy of module
;       R10, R12 preserved
;       R0-R6 may be corrupted
;
; If offset to init entry is negative, then (offset BIC &80000000) is the
; offset from the size of the encoded module. The last 5 words of this are
; as follows

        ^       -5*4
Squeeze_DecodedSize # 4                                 ; size of decoded image     (bytes)
Squeeze_EncodedSize # 4                                 ; size of encoded image     (--"--)
Squeeze_TablesSize  # 4                                 ; size of short+long tables (--"--)
Squeeze_NShorts     # 4                                 ; number of "short" entries
Squeeze_NLongs      # 4                                 ; number of "long" entries
        ASSERT  @@=0

CheckForSqueezedModule ROUT
        CLRV                                            ; prepare for normal exit (V clear)
        LDR     R6, [R9, #Module_code_pointer]          ; R6 -> module code
        LDR     R5, [R6, #Module_Init]                  ; R5 = offset to init entry
        EORS    R5, R5, #&80000000                      ; take off top bit
        MOVMI   PC, lr                                  ; if -ve now, then it's a normal module, so exit doing nothing

; it's a squeezed module, R5 = size of compressed module

        Push    "R6-R12,lr"     ; save other registers (and pointer to module base)

;        DLINE   "Unsqueezing module"

        ADD     R5, R6, R5      ; R5 -> byte after end of module
        LDMDB   R5!, {R8-R12}   ; load all the data - R8=decoded size, R9=encoded size
                                ; R10=tables size, R11=no. of shorts, R12=no. of longs

        SUB     R10, R5, R10    ; R10 -> start (lowest address) of encoded tables
                                ; = highest address +1 of encoded data
        SUB     R9, R10, R9     ; R9 -> lowest address of encoded data

;        DREG    R8, "Claiming block for module of size "

        MOV     R3, R8          ; now claim a block for the expanded code
        BL      RMAClaim_Chunk
        BVS     ExpandFailed1

;        DREG    R2, "Successfully claimed block for expanded code at "

        MOV     R7, R2          ; R7 -> start of expanded module

        ADD     R3, R11, R12    ; R3 = no. of shorts and longs
        MOV     R3, R3, LSL #2  ; convert to bytes

;        DREG    R3, "Claiming block for shorts+longs of size "

        BL      RMAClaim_Chunk
        BVS     ExpandFailed2   ; must free module block before exiting!

;        DREG    R2, "Successfully claimed block for shorts+longs at "

        MOV     R6, R2          ; R6 -> start of expanded table of shorts+longs

        ADD     R8, R7, R8      ; R8 -> highest address of decoded image +1

; We only need nLongs and nShorts while we are decoding the tables.
; Afterwards we will re-use the registers for pointers to start of tables.

        MOV   R5, R10       ; R5 is ptr into encoded tables
        MOV   R4, #0        ; this is the first table el

;        DLINE   "Expanding shorts+longs table"

decodeTab
        ; Require:  R11 -- no of els left to decode
        ;           R6  -- ptr into decoded table
        ;           R5  -- ptr into encoding
        ;           R4  -- = 0 iff this is the shorts table (i.e. 4-byte vals)

; I believe this loop could be made good deal smaller and possibly
; faster, but it's only a couple of hundred bytes and it works.

        MOV   R2, R6        ; stash away base of first table
        MOV   R3, #-1       ; start as if previous entry was -1
decodeEntry
        SUBS  R11, R11, #1  ; while (--nEntries >= 0) {
        BLT   decodedTab    ; assert: previous word is in R3
        LDRB  R1, [R5], #1  ; byte = *p++
        SUBS  R0, R1, #10
        BGE   greaterThan9
literalOrOnes
        CMPS  R1, #0
        BNE   ones
literal
        LDRB  R0, [R5], #1
        LDRB  R1, [R5], #1
        ORR   R0, R0, R1, LSL #8
        LDRB  R1, [R5], #1
        ORR   R0, R0, R1, LSL #16
        CMPS  R4, #0                 ; in the 4-byte (short encodings) table?
        LDREQB R1, [R5], #1          ; yes, so include the 4th byte
        ORREQ  R0, R0, R1, LSL #24   ; in the resultant word
        ADD   R3, R3, R0
        STR   R3, [R6], #4
        B     decodeEntry
ones
        SUB   R11, R11, R1
        ADD   R11, R11, #1
anotherOne        ; Have number of increment-by-ones in R1
        ADD   R3, R3, #1
        STR   R3, [R6], #4
        SUBS  R1, R1, #1
        BGT   anotherOne
        B     decodeEntry
greaterThan9
        CMPS  R1, #92
        ADDLT R3, R3, R0
        STRLT R3, [R6], #4
        BLT   decodeEntry
greaterThan91
        SUBS  R0, R1, #174
        BLT   oneMore
twoMore
        LDRB  R1, [R5], #1
        ORR   R0, R1, R0, LSL #16
        LDRB  R1, [R5], #1
        ORR   R0, R0, R1, LSL #8
        ADD   R3, R3, R0
        STR   R3, [R6], #4
        B     decodeEntry
oneMore
        SUBS  R0, R1, #92
        LDRB  R1, [R5], #1
        ORR   R0, R1, R0, LSL #8
        ADD   R3, R3, R0
        STR   R3, [R6], #4
        B     decodeEntry   ; } /* end while (--nEntries >= 0) { */

decodedTab
        CMPS  R4, #0        ; if isShorts then
        BNE   finishLongs   ; else finishLongs
finishShorts
        MOV   R11, R12      ; no of els to decode = nLongs
        MOV   R12, R2       ; R12 = &shorts[0]
        MOV   R2, R6        ; stash away start of longs table
        MOV   R4, #1        ; next table is longs
        B     decodeTab
finishLongs
        MOV   R11, R2       ; R11 = &longs[0]

;        DLINE   "Finished expanding shorts+longs table"

decodedBothTabs
        ; Now have:  R12 = &shorts[0]
        ;            R11 = &longs[0]
        ;            R10 = highest address +1 of encoded data
        ;            R9  = lowest address of encoded data
        ;            R8  = highest address +1 of decoded data
        ;
        ; R0..R7 are free for workspace

;        DREG    R12, "Shorts table at "
;        DREG    R11, "Longs table at "
;        DREG    R9, "Encoded data start "
;        DREG    R10, "Encoded data end+1 "
;        DREG    R8, "Decoded data end+1 "

decodePair
        CMPS  R10, R9           ; Have we reached the base ?
        BLE   doneDecode
        LDRB  R6, [R10, #-1]!   ; byte value
        ; The words will be put in R4 and R5, to be STMDB'd
        AND   R3, R6, #15       ; first nibble
        SUBS  R0, R3, #MinShort ; idx = (val - 8)
        BLT   notshort0
short0
        LDRB  R1, [R10, #-1]!
        ORR   R0, R1, R0, LSL #8
        LDR   R4, [R12, R0, LSL #2]    ; w = shorts[(nibble-8)<<8 | *p--]
        B     gotFirst
notshort0
        SUBS  R0, R3, #MinLong         ; idx = (val - 2)
        BLT   notlong0
long0
        LDRB  R1, [R10, #-1]!
        ORR   R0, R1, R0, LSL #8
        LDR   R0, [R11, R0, LSL #2]    ; w = longs[(nibble-2)<<8 | *p--]
        LDRB  R1, [R10, #-1]!
        ORR   R4, R1, R0, LSL #8
        B gotFirst
notlong0
        MOVS  R4, R3            ; TMD 13-Feb-90: combine 2 instructions here
                                ; used to be CMPS R3,#0; MOVEQ R4,R3
        BEQ   gotFirst
literal0
        LDRB  R0, [R10, #-1]!
        LDRB  R1, [R10, #-1]!
        ORR   R0, R0, R1, LSL #8
        LDRB  R1, [R10, #-1]!
        ORR   R0, R0, R1, LSL #16
        LDRB  R1, [R10, #-1]!
        ORR   R4, R0, R1, LSL #24

gotFirst
        ; Phew!  We have the first word of the pair (in R4), now we have
        ; to do (almost) the same again, result in R5, and STMDB.

        MOV   R3, R6, LSR #4     ; second nibble
        SUBS  R0, R3, #MinShort  ; idx = (val - 8)
        BLT   notshort1
short1
        LDRB  R1, [R10, #-1]!
        ORR   R0, R1, R0, LSL #8
        LDR   R5, [R12, R0, LSL #2]    ; w = shorts[(nibble-8)<<8 | *p--]
        STMDB R8!, {R4,R5}
        B     decodePair
notshort1
        SUBS  R0, R3, #MinLong        ; idx = (val - 2)
        BLT   notlong1
long1
        LDRB  R1, [R10, #-1]!
        ORR   R0, R1, R0, LSL #8
        LDR   R0, [R11, R0, LSL #2]    ; w = longs[(nibble-2)<<8 | *p--]
        LDRB  R1, [R10, #-1]!
        ORR   R5, R1, R0, LSL #8
        STMDB R8!, {R4,R5}
        B     decodePair
notlong1
        MOVS  R5, R3            ; TMD 13-Feb-90: combine 2 instructions here
                                ; used to be CMPS R3,#0; MOVEQ R5,R3

                                       ; This doesn't pay off much
        STMEQDB R8!, {R4,R5}           ; might be better to swap round
        BEQ   decodePair               ; literal and zero, to save 3S on
literal1                               ; the longer path ?
        LDRB  R0, [R10, #-1]!
        LDRB  R1, [R10, #-1]!          ; If I had the right byte-sex and
        ORR   R0, R0, R1, LSL #8       ; a couple of registers to spare,
        LDRB  R1, [R10, #-1]!          ; could do this in 15S instead of 22S
        ORR   R0, R0, R1, LSL #16      ; using the load non-aligned word code
        LDRB  R1, [R10, #-1]!          ; given in ARM CPU Manual.
        ORR   R5, R0, R1, LSL #24
        STMDB R8!, {R4,R5}
        B decodePair

doneDecode

;        DREG    R8, "Finished decoding, module at "

; now R8 -> the completely unsqueezed module

; so first, free the shorts+longs table block
; R12 -> shorts, which is first of the two

        MOV     R2, R12

;        DREG    R2, "Freeing shorts+longs table at "

        BL      FreeRMABlock

; ignore any error from this
        MOV     R3, R8                  ; save pointer to expanded module
        Pull    "R2,R7-R12"             ; pull pointer to original module base into R2 and restore other registers

;        DREG    R2, "Freeing original module block at "

        BL      FreeRMABlock            ; may fail because original module is in ROM, so ignore error

;        DLINE   "Returning new module to OS"

        STR     R3, [R9, #Module_code_pointer]  ; point module node at expanded module
        CLRV
        Pull    PC                      ; exit (VC)

; come here if failed to claim block for tables

ExpandFailed2

;        DLINE   "Failed to claim table block, freeing module block"

        Push    R0                      ; save original error pointer
        MOV     R2, R7
        BL      FreeRMABlock
        Pull    R0                      ; restore error pointer, and drop thru to ...

; come here if failed to claim block for expanded module

ExpandFailed1
        SETV
        Pull    "R6-R12, pc"            ; restore registers, and exit V set

; subroutine to free a block in RMA
; in: R2 -> block
; out: R0,R1 corrupted

FreeRMABlock Entry
;        LDR     R0, [R2, #-4]
;        DREG    R0, "FreeRMABlock called, block size purports to be "

        MOV     R0, #HeapReason_Free
        MOV     R1, #RMAAddress
        SWI     XOS_Heap
        EXIT

;        InsertDebugRoutines

        END
@


4.2
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@d342 1
a342 1
FreeRMABlock ENTRY
@


4.2.2.1
log
@* Converted to building with ObjAsm (but still a single object file using ORG).
* Added ARM_IMB and ARM_IMBRange SWIs as recommended by ARMv5.
* Some early prototype HAL bits popped in - a lot of source restructuring still
  to come.
* New debug target creates an AIF image with debug information, and translates
  this into an ASCII object file for the 16702B logic analyser.

Version 5.35, 4.79.2.1. Tagged as 'Kernel-5_35-4_79_2_1'
@
text
@d342 1
a342 1
FreeRMABlock Entry
@


4.1
log
@Initial revision
@
text
@d68 1
a68 1
        BIC     lr, lr, #V_bit                          ; prepare for normal exit (V clear)
d72 1
a72 1
        MOVMIS  PC, lr                                  ; if -ve now, then it's a normal module, so exit doing nothing
d125 1
a125 1
        
d147 1
a147 1
        LDREQB R1, [R5], #1          ; yes, so include the 4th byte 
d190 1
a190 1
        MOV   R12, R2       ; R12 = &shorts[0] 
d213 1
a213 1
        
d216 1
a216 1
        BLE   doneDecode       
d236 1
a236 1
        B gotFirst             
d252 1
a252 1
        ; to do (almost) the same again, result in R5, and STMDB.  
d261 1
a261 1
        STMDB R8!, {R4,R5} 
d273 2
a274 2
        B     decodePair             
notlong1        
d318 2
a319 1
        Pull    PC,,^                   ; exit (VC)
d335 2
a336 2
        Pull    "R6-R12, lr"            ; restore registers
        ORRS    PC, lr, #V_bit          ; and exit V set
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
