head	4.7;
access;
symbols
	Kernel-6_15:4.7
	Kernel-6_14:4.7
	Kernel-6_01-3:4.7
	Kernel-6_13:4.7
	Kernel-6_12:4.7
	Kernel-6_11:4.7
	Kernel-6_10:4.7
	Kernel-6_09:4.7
	Kernel-6_08-4_129_2_10:4.6.2.1
	Kernel-6_08-4_129_2_9:4.6.2.1
	Kernel-6_08:4.7
	Kernel-6_07:4.7
	Kernel-6_06:4.7
	Kernel-6_05-4_129_2_8:4.6.2.1
	Kernel-6_05:4.7
	Kernel-6_04:4.7
	Kernel-6_03:4.7
	Kernel-6_01-2:4.7
	Kernel-6_01-4_146_2_1:4.7
	Kernel-6_02:4.7
	Kernel-6_01-1:4.7
	Kernel-6_01:4.7
	Kernel-6_00:4.7
	Kernel-5_99:4.7
	Kernel-5_98:4.6
	Kernel-5_97-4_129_2_7:4.6
	Kernel-5_97:4.6
	Kernel-5_96:4.6
	Kernel-5_95:4.6
	Kernel-5_94:4.6
	Kernel-5_93:4.6
	Kernel-5_92:4.6
	Kernel-5_91:4.6
	Kernel-5_90:4.6
	Kernel-5_89-4_129_2_6:4.6
	Kernel-5_89:4.6
	Kernel-5_88-4_129_2_5:4.6
	Kernel-5_88-4_129_2_4:4.6
	Kernel-5_88:4.6
	Kernel-5_87:4.6
	Kernel-5_86-4_129_2_3:4.6
	Kernel-5_86-4_129_2_2:4.6
	Kernel-5_86-4_129_2_1:4.6
	Kernel-5_86:4.6
	SMP:4.6.0.2
	SMP_bp:4.6
	Kernel-5_85:4.6
	Kernel-5_54-1:4.6
	Kernel-5_84:4.6
	Kernel-5_83:4.6
	Kernel-5_82:4.6
	Kernel-5_81:4.6
	Kernel-5_80:4.6
	Kernel-5_79:4.6
	Kernel-5_78:4.6
	Kernel-5_77:4.6
	Kernel-5_76:4.6
	Kernel-5_75:4.6
	Kernel-5_74:4.6
	Kernel-5_73:4.6
	Kernel-5_72:4.6
	Kernel-5_71:4.6
	Kernel-5_70:4.6
	Kernel-5_69:4.6
	Kernel-5_68:4.6
	Kernel-5_67:4.6
	Kernel-5_66:4.6
	Kernel-5_65:4.6
	Kernel-5_64:4.6
	Kernel-5_63:4.6
	Kernel-5_62:4.6
	Kernel-5_61:4.6
	Kernel-5_60:4.6
	Kernel-5_59:4.6
	Kernel-5_58:4.6
	Kernel-5_57:4.6
	Kernel-5_56:4.6
	Kernel-5_55:4.6
	Kernel-5_54:4.6
	Kernel-5_53:4.6
	Kernel-5_52:4.6
	Kernel-5_51:4.6
	Kernel-5_50:4.5
	Kernel-5_49:4.4
	HAL_merge:4.3.2.4
	Kernel-5_48:4.4
	Kernel-5_35-4_79_2_327:4.3.2.4
	Kernel-5_35-4_79_2_326:4.3.2.4
	Kernel-5_35-4_79_2_325:4.3.2.4
	Kernel-5_35-4_79_2_324:4.3.2.4
	Kernel-5_35-4_79_2_323:4.3.2.4
	Kernel-5_35-4_79_2_322:4.3.2.4
	Kernel-5_35-4_79_2_321:4.3.2.4
	Kernel-5_35-4_79_2_320:4.3.2.4
	Kernel-5_35-4_79_2_319:4.3.2.4
	Kernel-5_35-4_79_2_318:4.3.2.4
	Kernel-5_35-4_79_2_317:4.3.2.4
	Kernel-5_35-4_79_2_316:4.3.2.4
	Kernel-5_35-4_79_2_315:4.3.2.4
	Kernel-5_35-4_79_2_314:4.3.2.4
	Kernel-5_35-4_79_2_313:4.3.2.4
	Kernel-5_35-4_79_2_312:4.3.2.4
	Kernel-5_35-4_79_2_311:4.3.2.4
	Kernel-5_35-4_79_2_310:4.3.2.4
	Kernel-5_35-4_79_2_309:4.3.2.4
	Kernel-5_35-4_79_2_308:4.3.2.4
	Kernel-5_35-4_79_2_307:4.3.2.4
	Kernel-5_35-4_79_2_306:4.3.2.4
	Kernel-5_35-4_79_2_305:4.3.2.4
	Kernel-5_35-4_79_2_304:4.3.2.4
	Kernel-5_35-4_79_2_303:4.3.2.4
	Kernel-5_35-4_79_2_302:4.3.2.4
	Kernel-5_35-4_79_2_301:4.3.2.4
	Kernel-5_35-4_79_2_300:4.3.2.4
	Kernel-5_35-4_79_2_299:4.3.2.4
	Kernel-5_35-4_79_2_298:4.3.2.4
	Kernel-5_35-4_79_2_297:4.3.2.4
	Kernel-5_35-4_79_2_296:4.3.2.4
	Kernel-5_35-4_79_2_295:4.3.2.4
	Kernel-5_35-4_79_2_294:4.3.2.4
	Kernel-5_35-4_79_2_293:4.3.2.4
	Kernel-5_35-4_79_2_292:4.3.2.4
	Kernel-5_35-4_79_2_291:4.3.2.4
	Kernel-5_35-4_79_2_290:4.3.2.4
	Kernel-5_35-4_79_2_289:4.3.2.4
	Kernel-5_35-4_79_2_288:4.3.2.4
	Kernel-5_35-4_79_2_287:4.3.2.4
	Kernel-5_35-4_79_2_286:4.3.2.4
	Kernel-5_35-4_79_2_285:4.3.2.4
	Kernel-5_35-4_79_2_284:4.3.2.4
	Kernel-5_35-4_79_2_283:4.3.2.4
	Kernel-5_35-4_79_2_282:4.3.2.4
	Kernel-5_35-4_79_2_281:4.3.2.4
	Kernel-5_35-4_79_2_280:4.3.2.4
	Kernel-5_35-4_79_2_279:4.3.2.4
	Kernel-5_35-4_79_2_278:4.3.2.4
	Kernel-5_35-4_79_2_277:4.3.2.4
	Kernel-5_35-4_79_2_276:4.3.2.4
	Kernel-5_35-4_79_2_275:4.3.2.4
	Kernel-5_35-4_79_2_274:4.3.2.4
	Kernel-5_35-4_79_2_273:4.3.2.4
	Kernel-5_35-4_79_2_272:4.3.2.4
	Kernel-5_35-4_79_2_271:4.3.2.4
	Kernel-5_35-4_79_2_270:4.3.2.4
	Kernel-5_35-4_79_2_269:4.3.2.4
	Kernel-5_35-4_79_2_268:4.3.2.4
	Kernel-5_35-4_79_2_267:4.3.2.4
	Kernel-5_35-4_79_2_266:4.3.2.4
	Kernel-5_35-4_79_2_265:4.3.2.4
	Kernel-5_35-4_79_2_264:4.3.2.4
	Kernel-5_35-4_79_2_263:4.3.2.4
	Kernel-5_35-4_79_2_262:4.3.2.4
	Kernel-5_35-4_79_2_261:4.3.2.4
	Kernel-5_35-4_79_2_260:4.3.2.4
	Kernel-5_35-4_79_2_259:4.3.2.4
	Kernel-5_35-4_79_2_258:4.3.2.4
	Kernel-5_35-4_79_2_257:4.3.2.4
	Kernel-5_35-4_79_2_256:4.3.2.4
	Kernel-5_35-4_79_2_255:4.3.2.4
	Kernel-5_35-4_79_2_254:4.3.2.4
	Kernel-5_35-4_79_2_253:4.3.2.4
	Kernel-5_35-4_79_2_252:4.3.2.4
	Kernel-5_35-4_79_2_251:4.3.2.4
	Kernel-5_35-4_79_2_250:4.3.2.4
	Kernel-5_35-4_79_2_249:4.3.2.4
	Kernel-5_35-4_79_2_248:4.3.2.4
	Kernel-5_35-4_79_2_247:4.3.2.4
	Kernel-5_35-4_79_2_246:4.3.2.4
	Kernel-5_35-4_79_2_245:4.3.2.4
	Kernel-5_35-4_79_2_244:4.3.2.4
	Kernel-5_35-4_79_2_243:4.3.2.4
	Kernel-5_35-4_79_2_242:4.3.2.4
	Kernel-5_35-4_79_2_241:4.3.2.4
	Kernel-5_35-4_79_2_240:4.3.2.4
	Kernel-5_35-4_79_2_239:4.3.2.4
	Kernel-5_35-4_79_2_238:4.3.2.4
	Kernel-5_35-4_79_2_237:4.3.2.4
	Kernel-5_35-4_79_2_236:4.3.2.4
	Kernel-5_35-4_79_2_235:4.3.2.4
	Kernel-5_35-4_79_2_234:4.3.2.4
	Kernel-5_35-4_79_2_233:4.3.2.4
	Kernel-5_35-4_79_2_232:4.3.2.4
	Kernel-5_35-4_79_2_231:4.3.2.4
	Kernel-5_35-4_79_2_230:4.3.2.4
	Kernel-5_35-4_79_2_229:4.3.2.4
	Kernel-5_35-4_79_2_228:4.3.2.4
	Kernel-5_35-4_79_2_227:4.3.2.4
	Kernel-5_35-4_79_2_226:4.3.2.4
	Kernel-5_35-4_79_2_225:4.3.2.4
	Kernel-5_35-4_79_2_224:4.3.2.4
	Kernel-5_35-4_79_2_223:4.3.2.4
	Kernel-5_35-4_79_2_222:4.3.2.4
	Kernel-5_35-4_79_2_221:4.3.2.4
	Kernel-5_35-4_79_2_220:4.3.2.4
	Kernel-5_35-4_79_2_219:4.3.2.4
	Kernel-5_35-4_79_2_218:4.3.2.4
	Kernel-5_35-4_79_2_217:4.3.2.4
	Kernel-5_35-4_79_2_216:4.3.2.4
	Kernel-5_35-4_79_2_215:4.3.2.4
	Kernel-5_35-4_79_2_214:4.3.2.4
	Kernel-5_35-4_79_2_213:4.3.2.4
	Kernel-5_35-4_79_2_212:4.3.2.4
	Kernel-5_35-4_79_2_211:4.3.2.4
	Kernel-5_35-4_79_2_210:4.3.2.4
	Kernel-5_35-4_79_2_209:4.3.2.4
	Kernel-5_35-4_79_2_208:4.3.2.4
	Kernel-5_35-4_79_2_207:4.3.2.4
	Kernel-5_35-4_79_2_206:4.3.2.4
	Kernel-5_35-4_79_2_205:4.3.2.4
	Kernel-5_35-4_79_2_204:4.3.2.4
	Kernel-5_35-4_79_2_203:4.3.2.4
	Kernel-5_35-4_79_2_202:4.3.2.4
	Kernel-5_35-4_79_2_201:4.3.2.4
	Kernel-5_35-4_79_2_200:4.3.2.4
	Kernel-5_35-4_79_2_199:4.3.2.4
	Kernel-5_35-4_79_2_198:4.3.2.4
	Kernel-5_35-4_79_2_197:4.3.2.4
	Kernel-5_35-4_79_2_196:4.3.2.4
	Kernel-5_35-4_79_2_195:4.3.2.4
	Kernel-5_35-4_79_2_194:4.3.2.4
	Kernel-5_35-4_79_2_193:4.3.2.4
	Kernel-5_35-4_79_2_192:4.3.2.4
	Kernel-5_35-4_79_2_191:4.3.2.4
	Kernel-5_35-4_79_2_190:4.3.2.4
	Kernel-5_35-4_79_2_189:4.3.2.4
	Kernel-5_35-4_79_2_188:4.3.2.4
	Kernel-5_35-4_79_2_187:4.3.2.4
	Kernel-5_35-4_79_2_186:4.3.2.4
	Kernel-5_35-4_79_2_185:4.3.2.4
	Kernel-5_35-4_79_2_184:4.3.2.4
	Kernel-5_35-4_79_2_183:4.3.2.4
	Kernel-5_35-4_79_2_182:4.3.2.4
	Kernel-5_35-4_79_2_181:4.3.2.4
	Kernel-5_35-4_79_2_180:4.3.2.4
	Kernel-5_35-4_79_2_179:4.3.2.4
	Kernel-5_35-4_79_2_178:4.3.2.4
	Kernel-5_35-4_79_2_177:4.3.2.4
	Kernel-5_35-4_79_2_176:4.3.2.4
	Kernel-5_35-4_79_2_175:4.3.2.4
	Kernel-5_35-4_79_2_174:4.3.2.4
	Kernel-5_35-4_79_2_173:4.3.2.4
	Kernel-5_35-4_79_2_172:4.3.2.4
	Kernel-5_35-4_79_2_171:4.3.2.4
	Kernel-5_35-4_79_2_170:4.3.2.4
	Kernel-5_35-4_79_2_169:4.3.2.4
	Kernel-5_35-4_79_2_168:4.3.2.4
	Kernel-5_35-4_79_2_167:4.3.2.4
	Kernel-5_35-4_79_2_166:4.3.2.4
	Kernel-5_35-4_79_2_165:4.3.2.4
	RPi_merge:4.3.2.4
	Kernel-5_35-4_79_2_147_2_23:4.3.2.4
	Kernel-5_35-4_79_2_147_2_22:4.3.2.4
	Kernel-5_35-4_79_2_147_2_21:4.3.2.4
	Kernel-5_35-4_79_2_147_2_20:4.3.2.4
	Kernel-5_35-4_79_2_147_2_19:4.3.2.4
	Kernel-5_35-4_79_2_147_2_18:4.3.2.4
	Kernel-5_35-4_79_2_164:4.3.2.4
	Kernel-5_35-4_79_2_163:4.3.2.4
	Kernel-5_35-4_79_2_147_2_17:4.3.2.4
	Kernel-5_35-4_79_2_147_2_16:4.3.2.4
	Kernel-5_35-4_79_2_147_2_15:4.3.2.4
	Kernel-5_35-4_79_2_162:4.3.2.4
	Kernel-5_35-4_79_2_161:4.3.2.4
	Kernel-5_35-4_79_2_147_2_14:4.3.2.4
	Kernel-5_35-4_79_2_147_2_13:4.3.2.4
	Kernel-5_35-4_79_2_160:4.3.2.4
	Kernel-5_35-4_79_2_159:4.3.2.4
	Kernel-5_35-4_79_2_158:4.3.2.4
	Kernel-5_35-4_79_2_157:4.3.2.4
	Kernel-5_35-4_79_2_156:4.3.2.4
	Kernel-5_35-4_79_2_147_2_12:4.3.2.4
	Kernel-5_35-4_79_2_147_2_11:4.3.2.4
	Kernel-5_35-4_79_2_155:4.3.2.4
	Kernel-5_35-4_79_2_147_2_10:4.3.2.4
	Kernel-5_35-4_79_2_154:4.3.2.4
	Kernel-5_35-4_79_2_153:4.3.2.4
	Kernel-5_35-4_79_2_147_2_9:4.3.2.4
	Kernel-5_35-4_79_2_152:4.3.2.4
	Kernel-5_35-4_79_2_151:4.3.2.4
	Kernel-5_35-4_79_2_147_2_8:4.3.2.4
	Kernel-5_35-4_79_2_147_2_7:4.3.2.4
	Kernel-5_35-4_79_2_150:4.3.2.4
	Kernel-5_35-4_79_2_147_2_6:4.3.2.4
	Kernel-5_35-4_79_2_147_2_5:4.3.2.4
	Kernel-5_35-4_79_2_149:4.3.2.4
	Kernel-5_35-4_79_2_147_2_4:4.3.2.4
	Kernel-5_35-4_79_2_147_2_3:4.3.2.4
	Kernel-5_35-4_79_2_148:4.3.2.4
	Kernel-5_35-4_79_2_147_2_2:4.3.2.4
	Kernel-5_35-4_79_2_147_2_1:4.3.2.4
	RPi:4.3.2.4.0.2
	RPi_bp:4.3.2.4
	Kernel-5_35-4_79_2_98_2_52_2_1:4.3.2.2.2.1
	alees_Kernel_dev:4.3.2.2.2.1.0.2
	alees_Kernel_dev_bp:4.3.2.2.2.1
	Kernel-5_35-4_79_2_147:4.3.2.4
	Kernel-5_35-4_79_2_146:4.3.2.4
	Kernel-5_35-4_79_2_145:4.3.2.4
	Kernel-5_35-4_79_2_144:4.3.2.4
	Kernel-5_35-4_79_2_143:4.3.2.4
	Kernel-5_35-4_79_2_142:4.3.2.4
	Kernel-5_35-4_79_2_141:4.3.2.4
	Kernel-5_35-4_79_2_140:4.3.2.4
	Kernel-5_35-4_79_2_139:4.3.2.4
	Kernel-5_35-4_79_2_138:4.3.2.4
	Kernel-5_35-4_79_2_137:4.3.2.4
	Kernel-5_35-4_79_2_136:4.3.2.4
	Kernel-5_35-4_79_2_135:4.3.2.4
	Kernel-5_35-4_79_2_134:4.3.2.4
	Kernel-5_35-4_79_2_133:4.3.2.4
	Kernel-5_35-4_79_2_132:4.3.2.4
	Kernel-5_35-4_79_2_131:4.3.2.4
	Kernel-5_35-4_79_2_130:4.3.2.4
	Kernel-5_35-4_79_2_129:4.3.2.4
	Kernel-5_35-4_79_2_128:4.3.2.4
	Kernel-5_35-4_79_2_127:4.3.2.4
	Kernel-5_35-4_79_2_126:4.3.2.4
	Kernel-5_35-4_79_2_125:4.3.2.4
	Kernel-5_35-4_79_2_124:4.3.2.4
	Kernel-5_35-4_79_2_123:4.3.2.3
	Cortex_merge:4.3.2.2.2.1
	Kernel-5_35-4_79_2_122:4.3.2.2
	Kernel-5_35-4_79_2_98_2_54:4.3.2.2.2.1
	Kernel-5_35-4_79_2_98_2_53:4.3.2.2.2.1
	Kernel-5_35-4_79_2_98_2_52:4.3.2.2.2.1
	Kernel-5_35-4_79_2_98_2_51:4.3.2.2.2.1
	Kernel-5_35-4_79_2_98_2_50:4.3.2.2.2.1
	Kernel-5_35-4_79_2_98_2_49:4.3.2.2.2.1
	Kernel-5_35-4_79_2_98_2_48:4.3.2.2.2.1
	Kernel-5_35-4_79_2_121:4.3.2.2
	Kernel-5_35-4_79_2_98_2_47:4.3.2.2
	Kernel-5_35-4_79_2_120:4.3.2.2
	Kernel-5_35-4_79_2_98_2_46:4.3.2.2
	Kernel-5_35-4_79_2_119:4.3.2.2
	Kernel-5_35-4_79_2_98_2_45:4.3.2.2
	Kernel-5_35-4_79_2_98_2_44:4.3.2.2
	Kernel-5_35-4_79_2_118:4.3.2.2
	Kernel-5_35-4_79_2_98_2_43:4.3.2.2
	Kernel-5_35-4_79_2_117:4.3.2.2
	Kernel-5_35-4_79_2_116:4.3.2.2
	Kernel-5_35-4_79_2_98_2_42:4.3.2.2
	Kernel-5_35-4_79_2_115:4.3.2.2
	Kernel-5_35-4_79_2_98_2_41:4.3.2.2
	Kernel-5_35-4_79_2_98_2_40:4.3.2.2
	Kernel-5_35-4_79_2_114:4.3.2.2
	Kernel-5_35-4_79_2_98_2_39:4.3.2.2
	Kernel-5_35-4_79_2_98_2_38:4.3.2.2
	Kernel-5_35-4_79_2_113:4.3.2.2
	Kernel-5_35-4_79_2_112:4.3.2.2
	Kernel-5_35-4_79_2_98_2_37:4.3.2.2
	Kernel-5_35-4_79_2_98_2_36:4.3.2.2
	Kernel-5_35-4_79_2_98_2_35:4.3.2.2
	Kernel-5_35-4_79_2_98_2_34:4.3.2.2
	Kernel-5_35-4_79_2_98_2_33:4.3.2.2
	Kernel-5_35-4_79_2_98_2_32:4.3.2.2
	Kernel-5_35-4_79_2_98_2_31:4.3.2.2
	Kernel-5_35-4_79_2_98_2_30:4.3.2.2
	Kernel-5_35-4_79_2_98_2_29:4.3.2.2
	Kernel-5_35-4_79_2_98_2_28:4.3.2.2
	Kernel-5_35-4_79_2_98_2_27:4.3.2.2
	Kernel-5_35-4_79_2_98_2_26:4.3.2.2
	Kernel-5_35-4_79_2_111:4.3.2.2
	Kernel-5_35-4_79_2_98_2_25:4.3.2.2
	Kernel-5_35-4_79_2_98_2_24:4.3.2.2
	Kernel-5_35-4_79_2_98_2_23:4.3.2.2
	Kernel-5_35-4_79_2_110:4.3.2.2
	Kernel-5_35-4_79_2_98_2_22:4.3.2.2
	Kernel-5_35-4_79_2_109:4.3.2.2
	Kernel-5_35-4_79_2_98_2_21:4.3.2.2
	Kernel-5_35-4_79_2_98_2_20:4.3.2.2
	Kernel-5_35-4_79_2_108:4.3.2.2
	Kernel-5_35-4_79_2_107:4.3.2.2
	Kernel-5_35-4_79_2_98_2_19:4.3.2.2
	Kernel-5_35-4_79_2_98_2_18:4.3.2.2
	Kernel-5_35-4_79_2_98_2_17:4.3.2.2
	Kernel-5_35-4_79_2_98_2_16:4.3.2.2
	Kernel-5_35-4_79_2_98_2_15:4.3.2.2
	Kernel-5_35-4_79_2_106:4.3.2.2
	Kernel-5_35-4_79_2_105:4.3.2.2
	Kernel-5_35-4_79_2_104:4.3.2.2
	Kernel-5_35-4_79_2_98_2_14:4.3.2.2
	Kernel-5_35-4_79_2_98_2_13:4.3.2.2
	Kernel-5_35-4_79_2_98_2_12:4.3.2.2
	Kernel-5_35-4_79_2_98_2_11:4.3.2.2
	Kernel-5_35-4_79_2_98_2_10:4.3.2.2
	Kernel-5_35-4_79_2_98_2_9:4.3.2.2
	Kernel-5_35-4_79_2_103:4.3.2.2
	Kernel-5_35-4_79_2_102:4.3.2.2
	Kernel-5_35-4_79_2_98_2_8:4.3.2.2
	Kernel-5_35-4_79_2_98_2_7:4.3.2.2
	Kernel-5_35-4_79_2_98_2_6:4.3.2.2
	Kernel-5_35-4_79_2_98_2_5:4.3.2.2
	Kernel-5_35-4_79_2_98_2_4:4.3.2.2
	Kernel-5_35-4_79_2_101:4.3.2.2
	Kernel-5_35-4_79_2_100:4.3.2.2
	Kernel-5_35-4_79_2_99:4.3.2.2
	Kernel-5_35-4_79_2_98_2_3:4.3.2.2
	Kernel-5_35-4_79_2_98_2_2:4.3.2.2
	Kernel-5_35-4_79_2_98_2_1:4.3.2.2
	Cortex:4.3.2.2.0.2
	Cortex_bp:4.3.2.2
	Kernel-5_35-4_79_2_98:4.3.2.2
	Kernel-5_35-4_79_2_97:4.3.2.2
	Kernel-5_35-4_79_2_96:4.3.2.2
	Kernel-5_35-4_79_2_95:4.3.2.2
	Kernel-5_35-4_79_2_94:4.3.2.2
	Kernel-5_35-4_79_2_93:4.3.2.2
	Kernel-5_35-4_79_2_92:4.3.2.2
	Kernel-5_35-4_79_2_91:4.3.2.2
	Kernel-5_35-4_79_2_90:4.3.2.2
	Kernel-5_35-4_79_2_89:4.3.2.2
	Kernel-5_35-4_79_2_88:4.3.2.2
	Kernel-5_35-4_79_2_87:4.3.2.2
	Kernel-5_35-4_79_2_86:4.3.2.2
	Kernel-5_35-4_79_2_85:4.3.2.2
	Kernel-5_35-4_79_2_84:4.3.2.2
	Kernel-5_35-4_79_2_83:4.3.2.2
	Kernel-5_35-4_79_2_82:4.3.2.2
	Kernel-5_35-4_79_2_81:4.3.2.2
	Kernel-5_35-4_79_2_80:4.3.2.2
	Kernel-5_35-4_79_2_79:4.3.2.2
	Kernel-5_35-4_79_2_78:4.3.2.2
	Kernel-5_35-4_79_2_77:4.3.2.2
	RO_5_07:4.3.2.2
	Kernel-5_35-4_79_2_76:4.3.2.2
	Kernel-5_35-4_79_2_75:4.3.2.2
	Kernel-5_35-4_79_2_74:4.3.2.2
	Kernel-5_35-4_79_2_73:4.3.2.2
	Kernel-5_35-4_79_2_72:4.3.2.2
	Kernel-5_35-4_79_2_71:4.3.2.2
	Kernel-5_35-4_79_2_70:4.3.2.2
	Kernel-5_35-4_79_2_69:4.3.2.2
	Kernel-5_35-4_79_2_68:4.3.2.2
	Kernel-5_35-4_79_2_67:4.3.2.2
	Kernel-5_35-4_79_2_66:4.3.2.2
	Kernel-5_35-4_79_2_65:4.3.2.2
	Kernel-5_35-4_79_2_64:4.3.2.2
	Kernel-5_35-4_79_2_63:4.3.2.2
	Kernel-5_35-4_79_2_62:4.3.2.2
	Kernel-5_35-4_79_2_61:4.3.2.2
	Kernel-5_35-4_79_2_59:4.3.2.2
	Kernel-5_35-4_79_2_58:4.3.2.2
	Kernel-5_35-4_79_2_57:4.3.2.2
	Kernel-5_35-4_79_2_56:4.3.2.2
	Kernel-5_35-4_79_2_55:4.3.2.2
	Kernel-5_35-4_79_2_54:4.3.2.2
	Kernel-5_35-4_79_2_53:4.3.2.2
	Kernel-5_35-4_79_2_52:4.3.2.2
	Kernel-5_35-4_79_2_51:4.3.2.2
	Kernel-5_35-4_79_2_50:4.3.2.2
	Kernel-5_35-4_79_2_49:4.3.2.2
	Kernel-5_35-4_79_2_48:4.3.2.2
	Kernel-5_47:4.3
	Kernel-5_46-4_90_2_1:4.3
	nbingham_Kernel_FastNC_dev_bp:4.3
	nbingham_Kernel_FastNC_dev:4.3.0.4
	Kernel-5_46:4.3
	Kernel-5_45:4.3
	Kernel-5_35-4_79_2_47:4.3.2.2
	Kernel-5_35-4_79_2_46:4.3.2.2
	Kernel-5_35-4_79_2_45:4.3.2.2
	Kernel-5_35-4_79_2_44:4.3.2.2
	Kernel-5_35-4_79_2_25_2_2:4.3.2.1
	Kernel-5_35-4_79_2_43:4.3.2.2
	Kernel-5_35-4_79_2_42:4.3.2.2
	Kernel-5_35-4_79_2_41:4.3.2.2
	Kernel-5_35-4_79_2_40:4.3.2.2
	Kernel-5_35-4_79_2_39:4.3.2.2
	Kernel-5_35-4_79_2_38:4.3.2.2
	Kernel-5_35-4_79_2_37:4.3.2.2
	Kernel-5_35-4_79_2_36:4.3.2.2
	Kernel-5_35-4_79_2_35:4.3.2.2
	Kernel-5_35-4_79_2_34:4.3.2.2
	Kernel-5_35-4_79_2_33:4.3.2.2
	Kernel-5_35-4_79_2_32:4.3.2.1
	Kernel-5_44:4.3
	Kernel-5_35-4_79_2_25_2_1:4.3.2.1
	Kernel-5_43:4.3
	Kernel-5_35-4_79_2_31:4.3.2.1
	Kernel-5_35-4_79_2_30:4.3.2.1
	Kernel-5_35-4_79_2_29:4.3.2.1
	Kernel-5_35-4_79_2_28:4.3.2.1
	Kernel-5_35-4_79_2_27:4.3.2.1
	Kernel-5_35-4_79_2_26:4.3.2.1
	Kernel-5_42:4.3
	Kernel-5_41:4.3
	Kernel-5_40:4.3
	Kernel-5_35-4_79_2_25:4.3.2.1
	Kernel-5_35-4_79_2_24:4.3.2.1
	Kernel-5_35-4_79_2_23:4.3.2.1
	Kernel-5_35-4_79_2_22:4.3.2.1
	Kernel-5_35-4_79_2_21:4.3.2.1
	Kernel-5_35-4_79_2_20:4.3.2.1
	Kernel-5_35-4_79_2_19:4.3.2.1
	Kernel-5_35-4_79_2_18:4.3.2.1
	Kernel-5_35-4_79_2_17:4.3.2.1
	Kernel-5_35-4_79_2_16:4.3.2.1
	Kernel-5_35-4_79_2_15:4.3.2.1
	Kernel-5_35-4_79_2_14:4.3.2.1
	Kernel-5_39:4.3
	Kernel-5_13-4_52_2_1:4.2
	Bethany:4.2.0.8
	Kernel-5_38:4.3
	Kernel-5_35-4_79_2_13:4.3.2.1
	Kernel-5_35-4_79_2_12:4.3.2.1
	Kernel-5_35-4_79_2_11:4.3.2.1
	Kernel-5_37:4.3
	Kernel-5_35-4_79_2_10:4.3
	Kernel-5_35-4_79_2_9:4.3
	Kernel-5_36:4.3
	Kernel-5_35-4_79_2_8:4.3
	Kernel-5_35-4_79_2_7:4.3
	Kernel-5_35-4_79_2_6:4.3
	Kernel-5_35-4_79_2_5:4.3
	Kernel-5_35-4_79_2_4:4.3
	Kernel-5_35-4_79_2_3:4.3
	Kernel-5_35-4_79_2_2:4.3
	dellis_autobuild_BaseSW:4.3
	Kernel-5_35-4_79_2_1:4.3
	HAL:4.3.0.2
	Kernel-5_35:4.3
	Kernel-5_34:4.3
	Kernel-5_33:4.3
	Kernel-5_32:4.3
	Kernel-5_31:4.3
	Kernel-5_30:4.3
	Kernel-5_29:4.3
	Kernel-5_28:4.3
	Kernel-5_27:4.3
	Kernel-5_26:4.3
	Kernel-5_25:4.3
	Kernel-5_24:4.3
	Kernel-5_23:4.3
	Kernel-5_22:4.2
	sbrodie_sedwards_16Mar2000:4.2
	Kernel-5_21:4.2
	Kernel-5_20:4.2
	Kernel-5_19:4.2
	Kernel-5_18:4.2
	Kernel-5_17:4.2
	Kernel-5_16:4.2
	Kernel-5_15:4.2
	Kernel-5_14:4.2
	Kernel-5_13:4.2
	Kernel-5_12:4.2
	Kernel-5_11:4.2
	Kernel-5_10:4.2
	Kernel-5_09:4.2
	Kernel-5_08:4.2
	Kernel-5_07:4.2
	Kernel-5_06:4.2
	Kernel-5_05:4.2
	Kernel-5_04:4.2
	Kernel-5_03:4.2
	Kernel-5_02:4.2
	Kernel-5_01:4.2
	Kernel-5_00:4.2
	Kernel-4_99:4.2
	Kernel-4_98:4.2
	Kernel-4_97:4.2
	Kernel-4_96:4.2
	Kernel-4_95:4.2
	Kernel-4_94:4.2
	Kernel-4_93:4.2
	Kernel-4_92:4.2
	Kernel-4_91:4.2
	Kernel-4_90:4.2
	dcotton_autobuild_BaseSW:4.3
	Kernel-4_89:4.2
	Kernel-4_88:4.2
	Kernel-4_87:4.2
	Kernel-4_86:4.2
	Kernel-4_85:4.2
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.2.2.1.2.1
	Kernel-4_84:4.2
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.2.2.1.2.1
	Ursula_RiscPC_bp:4.2.2.1
	Kernel-4_83:4.2
	Kernel-4_82:4.2
	Kernel-4_81:4.2
	Kernel-4_80:4.2
	Kernel-4_79:4.2
	Kernel-4_78:4.2
	Kernel-4_77:4.2
	Kernel-4_76:4.2
	Kernel-4_75:4.2
	Kernel-4_74:4.2
	Kernel-4_73:4.2
	Kernel-4_72:4.2
	Kernel-4_71:4.2
	Kernel-4_70:4.2
	Kernel-4_69:4.2
	Kernel-4_68:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2.2.1.2.1
	Ursula_RiscPC:4.2.2.1.0.2
	Kernel-4_63-1_1_2_5:4.1.7.1
	Kernel-4_63-1_1_2_4:4.1.7.1
	Kernel-4_67:4.2
	Kernel-4_66:4.2
	Kernel-4_63-1_1_2_3:4.1.7.1
	Kernel-4_65:4.2
	Ursula_merge:4.2
	Kernel-4_64:4.2
	mstphens_Kernel-3_81:4.2.2.2
	Kernel-4_63-1_1_2_2:4.1.7.1
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.2.2.1
	UrsulaBuild_FinalSoftload:4.2.2.1
	rthornb_UrsulaBuild-12Aug1998:4.2.2.1
	aglover_UrsulaBuild-05Aug1998:4.2.2.1
	rthornb_UrsulaBuild-29Jul1998:4.2.2.1
	rthornb_UrsulaBuild-22Jul1998:4.2.2.1
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.2.2.1
	rthornb_UrsulaBuild-07Jul1998:4.2.2.1
	rthornb_UrsulaBuild-17Jun1998:4.2.2.1
	rthornb_UrsulaBuild-03Jun1998:4.2.2.1
	rthornb_UrsulaBuild-27May1998:4.2.2.1
	mstphens_Kernel-3_80:4.2.2.1
	rthornb_UrsulaBuild-21May1998:4.2.2.1
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.2.2.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.2.0.6
	Daytona_bp:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.2
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.7
date	2018.03.25.21.01.03;	author rsprowson;	state Exp;
branches;
next	4.6;
commitid	gUttU6y9LCksLSvA;

4.6
date	2016.06.30.20.59.50;	author jlee;	state Exp;
branches
	4.6.2.1;
next	4.5;
commitid	skOEjp3ipLHx6xcz;

4.5
date	2016.06.30.20.42.08;	author jlee;	state Exp;
branches;
next	4.4;
commitid	bDF3DCxdmyMD0xcz;

4.4
date	2016.06.30.20.08.16;	author jlee;	state Exp;
branches;
next	4.3;
commitid	IWoXxARWeuLDOwcz;

4.3
date	2000.04.04.14.27.37;	author kbracey;	state Exp;
branches
	4.3.2.1;
next	4.2;

4.2
date	97.01.21.14.07.25;	author nturton;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.41.29;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.6.2.1
date	2018.05.14.19.33.46;	author jlee;	state Exp;
branches;
next	;
commitid	wrVtYH84nAz1GiCA;

4.3.2.1
date	2000.10.20.14.58.21;	author kbracey;	state Exp;
branches;
next	4.3.2.2;

4.3.2.2
date	2001.06.11.11.33.33;	author kbracey;	state Exp;
branches
	4.3.2.2.2.1;
next	4.3.2.3;

4.3.2.3
date	2011.11.26.21.11.23;	author jlee;	state Exp;
branches;
next	4.3.2.4;
commitid	cI3W0zbtALQG6TIv;

4.3.2.4
date	2011.11.27.11.48.16;	author rsprowson;	state Exp;
branches;
next	;
commitid	OFgqaKhOb6swXXIv;

4.3.2.2.2.1
date	2011.08.08.23.28.34;	author jlee;	state Exp;
branches;
next	;
commitid	D7rzILnwRRSXoLuv;

4.2.2.1
date	97.09.09.13.34.10;	author mstphens;	state Exp;
branches
	4.2.2.1.2.1;
next	4.2.2.2;

4.2.2.2
date	98.09.24.13.17.34;	author mstphens;	state Exp;
branches;
next	;

4.2.2.1.2.1
date	98.11.23.14.59.31;	author mstphens;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.41.29;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.01.57;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.12.23;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.04.14;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Don't bother setting up R12 to point at IOC
This is now a HAL only kernel, and 0x3200000 is most likely somewhere in RAM.
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > $.Source.PMF.Mouse

; Mouse driving code

; Author:       Steve Cormie
; Started:      24-Feb-93

; Change history:
;
; Date          Who     Description
; ----          ---     -----------
; 24-Feb-93     SMC     Created.

; *****************************************************************************
;
;        Mouse initialisation
;
MouseInit
        Push    "lr"
        LDR     r11, =ZeroPage+KeyWorkSpace

        MOV     r0, #MouseStepCMOS      ; setup mouse multipliers from CMOS
        BL      Read
        MOV     r0, r0, LSL #24         ; sign extend it
        MOVS    r0, r0, ASR #24
        MOVEQ   r0, #1                  ; if would be zero, set to 1
        STR     r0, MouseXMult
        STR     r0, MouseYMult

        MOV     r0, #0
        STRB    r0, MouseButtons

        MOV     r0, #MouseCMOS
        BL      Read
        STRB    r0, MouseType

        Pull    "pc"

; *****************************************************************************
;
;       MouseButtonChange - Called by keyboard handler when mouse button change
;
; in:   R0 = state of buttons (bit0=R, bit1=C, bit2=L)
;       R11 -> KeyWorkSpace
;

MouseButtonChange ROUT
        Push    "R0-R5, R12, R14"

        VDWS    WsPtr
        STRB    R0, MouseButtons        ; save it for ReadMouse calls
        MOV     R3, R0

        LDR     R1, MouseX
        LDR     R0, [WsPtr, #OrgX]
        SUB     R1, R1, R0              ; mouse X

        LDR     R2, MouseY
        LDR     R0, [WsPtr, #OrgY]
        SUB     R2, R2, R0              ; mouse Y

        LDR     R4, =ZeroPage
        LDR     R4, [R4, #MetroGnome]   ; use monotonic variable now

        MOV     R0, #Event_Mouse
        BL      OSEVEN

; Use buffer manager's 'block insert' function

; TMD 26-Feb-93: Fix bug - if X is negative, Y would be inserted in the buffer as -1

        LDR     R0, MouseX              ; 16 bits, sign-extended to 32 bits
        MOV     R0, R0, LSL #16
        LDR     R1, MouseY              ; ditto
        MOV     R1, R1, LSL #16
        ORR     R0, R1, R0, LSR #16     ; combine, having knocked off the troublesome bits
        ORR     R1, R3, R4, LSL #8      ; R1 = Combined 8bit buttons and 24 LSB's of time
        MOV     R2, R4, LSR #24         ; R2 = MSB of time
        SUB     SP, SP, #3*4            ; Create local mouse data buffer
        STMIA   SP, {R0,R1,R2}          ; Write mouse data to buffer

        MOV     R3, #9                  ; Mouse packet size
        MOV     R2, SP                  ; R2-> block to insert
        MOV     R1, #(Buff_Mouse:OR:(1:SHL:31)) ; Block insert to mouse buffer
        Push    "R10,R12"
        MOV     R10, #INSV              ; Insert
        BL      GoVec2                  ; Call the vector in R10
        Pull    "R10,R12"
        ADD     SP, SP, #3*4            ; Destroy mouse data buffer
        Pull    "R0-R5, R12, PC"

; *****************************************************************************
;
;       Read mouse position
;

ReadMouse ROUT
        Push    "R4-R6,R10-R12"
        LDR     R11, =ZeroPage+KeyWorkSpace

        SUB     SP, SP, #3*4            ; Create 9 byte local mouse data buffer
        MOV     R3, #9                  ; Mouse packet size
        MOV     R2, SP                  ; R2-> buffer for data
        MOV     R1, #(Buff_Mouse:OR:(1:SHL:31)) ; Block remove from mouse buffer
        CLRV                            ; Remove not examine
        Push    "R10,R12"
        MOV     R10, #REMV
        BL      GoVec2                  ; Call the vector in R10
        Pull    "R10,R12"

        LDMCCIA SP, {R4,R5,R6}
        ADD     SP, SP, #3*4            ; Destroy mouse data buffer
        BCS     %FT10                   ; Jump if no buffered data

        MOV     R0, R4, LSL #16
        MOV     R0, R0, ASR #16         ; R0 = sign extended x coord
        MOV     R1, R4, ASR #16         ; R1 = sign extended y coord
        AND     R2, R5, #&FF            ; R2 = button state
        MOV     R3, R5, LSR #8          ; R3 = 3 low order bytes of time
        ORR     R3, R3, R6, LSL #24     ; R3 = time

; code inserted here 12-Aug-88 to force position read from buffer to be inside
; CURRENT bounding box; this removes the need to flush buffer when changing
; the bounding box.

        ADR     R4, MouseBounds
        LDMIA   R4, {R4-R6,R10}         ; R4=LCol; R5=BRow; R6=RCol; R10=TRow;
        CMP     R0, R4
        MOVLT   R0, R4
        CMP     R0, R6
        MOVGT   R0, R6
        CMP     R1, R5
        MOVLT   R1, R5
        CMP     R1, R10
        MOVGT   R1, R10

        B       %FT20                   ; correct for origin after clipping

10
        LDRB    R2, MouseButtons

        LDR     R3, =ZeroPage
        LDR     R3, [R3, #MetroGnome]           ; use monotonic variable now

        LDR     R0, MouseX
        LDR     R1, MouseY
20
        VDWS    WsPtr

        LDR     R4, [WsPtr, #OrgX]
        SUB     R0, R0, R4

        LDR     R4, [WsPtr, #OrgY]
        SUB     R1, R1, R4

        Pull    "R4-R6,R10-R12,PC"

Abso    DCB     "Abso"

; *****************************************************************************
;
;       ProcessMouseXY - Called to update mouse position.
;
;       in:     r2  = signed 32-bit X movement
;               r3  = signed 32-bit Y movement
;               r4  = "Abso" if absolute movement
;               r11 ->KeyWorkSpace
;       out:    r2,r3 corrupted
;
ProcessMouseXY
        Push    "r4,lr"

; check for absolute position
        LDR     lr, Abso
        TEQ     r4, lr
        BEQ     %FT40

; process X movement
        CMP     r2, #0
        BEQ     %FT10

        MOV     r2, r2, LSL #16         ; move delta X to top 16 bits

        LDR     r4, MouseXMult
        MUL     r2, r4, r2

        LDR     r4, MouseX
        ADD     r2, r2, r4, LSL #16     ; add signed value in top 16 bits
        MOV     r2, r2, ASR #16         ; sign extend to 32 bits

        LDR     r4, MouseBoundLCol      ; bound to bounding box
        CMP     r2, r4
        MOVLT   r2, r4
        LDR     r4, MouseBoundRCol
        CMP     r4, r2
        MOVLT   r2, r4
        STR     r2, MouseX

10
; process Y movement
        CMP     r3, #0
        Pull    "r4,pc",EQ

        MOV     r3, r3, LSL #16         ; move delta Y to top 16 bits

        LDR     r4, MouseYMult
        MUL     r3, r4, r3

        LDR     r4, MouseY
        ADD     r3, r3, r4, LSL #16     ; add signed value in top 16 bits
        MOV     r3, r3, ASR #16         ; sign extend to 32 bits

        LDR     r4, MouseBoundBRow      ; bound to bounding box
        CMP     r3, r4
        MOVLT   r3, r4
        LDR     r4, MouseBoundTRow
        CMP     r4, r3
        MOVLT   r3, r4
        STR     r3, MouseY

        Pull    "r4,pc"

40
; process absolute position
        MOV     r2, r2, ASL #16         ; look only at bottom 16 bits,
        MOV     r3, r3, ASL #16         ; sign extended
        MOV     r2, r2, ASR #16
        MOV     r3, r3, ASR #16

        LDR     r4, MouseBoundLCol      ; bound to bounding box
        CMP     r2, r4
        MOVLT   r2, r4
        LDR     r4, MouseBoundRCol
        CMP     r4, r2
        MOVLT   r2, r4
        STR     r2, MouseX
        LDR     r4, MouseBoundBRow      ; bound to bounding box
        CMP     r3, r4
        MOVLT   r3, r4
        LDR     r4, MouseBoundTRow
        CMP     r4, r3
        MOVLT   r3, r4
        STR     r3, MouseY
        Pull    "r4,pc"


; *****************************************************************************
;
;       PollPointer - Called on VSync to get mouse changes.
;
;       out:    corrupts r0-r3,r9-r11
;
PollPointer
        Push    "r4,r12,lr"
        LDR     r11, =ZeroPage+KeyWorkSpace

        LDRB    r0, MouseReporting
        TEQ     r0, #0
        Pull    "r4,r12,pc",NE

        MOV     r0, #0                  ; Request pointer state.
        LDRB    r1, MouseType
        MOV     r2, #0                  ; Default to no movement.
        MOV     r3, #0
        MOV     r4, #0                  ; They might fill this in
        SavePSR r9                      ; Save current PSR.
        WritePSRc SVC_mode+I_bit, r10   ; Call PointerV in SVC mode, no IRQs.
        MOV     r10, #PointerV          ; Call PointerV to get movements & button states
        Push    "lr"                    ; Save SVC lr.
        BL      CallVector
        Pull    "lr"                    ; Restore SVC lr.
        RestPSR r9
        BL      ProcessMouseXY

        Pull    "r4,r12,pc"

; *****************************************************************************
;
;       PointerVector - the default PointerV claimant
;
PointerVector
        CMP     r0, #PointerReason_Report
        Pull    pc, NE
        Push    "r2,r3,r11"
        LDR     r11, =ZeroPage+KeyWorkSpace
        LDRB    lr, MouseType
        TEQ     r1, lr
        MOVEQ   lr, #1
        STREQB  lr, MouseReporting
        BL      ProcessMouseXY
        Pull    "r2,r3,r11,pc"



; *****************************************************************************
;
;       PointerSWI - Handle SWI OS_Pointer calls (read/set pointer type).
;
PointerSWI
        LDR     r11, =ZeroPage+KeyWorkSpace
        TEQ     r0, #0
        LDREQB  r0, MouseType
        BEQ     SLVK

        TEQ     r0, #1
        BNE     %FT10

        Push    "r0,r10,r12,lr"
        STRB    r1, MouseType
        MOV     r0, #0
        STRB    r0, MouseReporting
        MOV     r0, #2
        MOV     r10, #PointerV
        BL      CallVector
        Pull    "r0,r10,r12,lr"
        B       SLVK

10
        ADRL    r0, ErrorBlock_BadParameters
  [ International
        BL      TranslateError
  ]
        B       SLVK_SetV

        END
@


4.6
log
@Delete lots of old switches
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * FixCallBacks
  * UseProcessTransfer
  * CanLiveOnROMCard
  * BleedinDaveBell
  * NewStyleEcfs
  * DoVdu23_0_12
  * LCDPowerCtrl
  * HostVdu
  * Print
  * EmulatorSupport
  * TubeInfo
  * AddTubeBashers
  * TubeChar, TubeString, TubeDumpNoStack, TubeNewlNoStack macros
  * FIQDebug
  * VCOstartfix
  * AssemblingArthur (n.b. still defined for safety with anything in Hdr: which uses it, but not used explicitly by the kernel)
  * MouseBufferFix
  * LCDInvert
  * LCDSupport
  * DoInitialiseMode
  * Interruptible32bitModes
  * MouseBufferManager
  * StrongARM (new CacheCleanerHack and InterruptDelay switches added to hdr/Options to cover some functionality that StrongARM previously covered)
  * SAcleanflushbroken
  * StrongARM_POST
  * IrqsInClaimRelease
  * CheckProtectionLink
  * GSWorkspaceInKernelBuffers
  * EarlierReentrancyInDAShrink
  * LongCommandLines
  * ECC
  * NoSPSRcorruption
  * RMTidyDoesNowt
  * RogerEXEY
  * StorkPowerSave
  * DebugForcedReset
  * AssembleKEYV
  * AssemblePointerV
  * ProcessorVectors
  * Keyboard_Type
  Assorted old files have also been deleted.
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.51. Tagged as 'Kernel-5_51'
@
text
@a80 1
        MOV     WsPtr, #IOC
@


4.6.2.1
log
@Merge in latest changes from main branch

Version 6.05, 4.129.2.8. Tagged as 'Kernel-6_05-4_129_2_8'
@
text
@d81 1
@


4.5
log
@Delete STB code
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a desktop build):
  * STB
  * RO371Timings
  * NormalSpeedROMS
  * AutoSpeedROMS
  * RISCPCBurstMode
  * InterlacedPointer
  * ParallelFlashUpgrade (and s/FlashROM file)
  * Embedded_UI
  Some of the deleted code might be worth revisiting in future:
  * OS_ReadSysInfo 4 support for storing the MAC in alternate CMOS locations (including 2nd copy for error checking) or fetching via Service_MachineAddress
  * Mouse handling changes, possibly aimed at hiding the mouse pointer if a mouse isn't connected
  * More strict CMOS validation in s/NewReset
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.50. Tagged as 'Kernel-5_50'
@
text
@a35 6
 [ :LNOT: AssemblingArthur
        MOV     r0, #MouseV
        ADRL    r1, ReadMouse
        SWI     OS_Claim
 ]

a75 1
        [ AssemblingArthur :LOR: Module
a77 4
        |
        BYTEWS  WsPtr
        LDR     R4, RealTime            ; doesn't exist in my world
        ]
a82 38
 [ :LNOT:MouseBufferManager
        [ MouseBufferFix
        LDR     R0, MouseX
        |
        MOV     R5, R2                  ; save mouse Y
        MOV     R0, R1
        ]
        BL      MouseInsert             ; send mouse X low
        BCS     %FT10                   ; buffer full, so don't send rest

        MOV     R0, R0, LSR #8          ; send mouse X high
        BL      MouseInsert

        [ MouseBufferFix
        LDR     R0, MouseY
        |
        MOV     R0, R5
        ]
        BL      MouseInsert             ; send mouse Y low

        MOV     R0, R0, LSR #8          ; send mouse Y high
        BL      MouseInsert

        MOV     R0, R3
        BL      MouseInsert             ; send buttons

        MOV     R0, R4
        BL      MouseInsert             ; send realtime(0)

        MOV     R0, R4, LSR #8
        BL      MouseInsert             ; send realtime(1)

        MOV     R0, R4, LSR #16
        BL      MouseInsert             ; send realtime(2)

        MOV     R0, R4, LSR #24
        BL      MouseInsert             ; send realtime(3)
 |
a84 2
 [ {TRUE}

a91 5
 |
        LDR     R0, MouseX              ; 16 bits
        LDR     R1, MouseY              ; 16 bits
        ORR     R0, R0, R1, LSL #16     ; R0 = Combined 16bit X/Y mouse position
 ]
a104 2
 ]
10
a106 8
 [ :LNOT:MouseBufferManager
MouseInsert
        Push    "R10,R12,R14"
        MOV     R10, #INSV
        MOV     R1, #Buff_Mouse
        B       GoVec
 ]

a115 30
 [ :LNOT:MouseBufferManager
        MOV     R1, #Buff_Mouse
        BL      KeyREMOVE
        BCS     %FT10                   ; MouseAhead buffer empty

        MOV     R4, R2, LSL #16         ; Mouse X Low
        BL      KeyREMOVE
        ORR     R4, R4, R2, LSL #24     ; R4 := Mouse X << 16

        BL      KeyREMOVE
        MOV     R5, R2, LSL #16         ; Mouse Y Low
        BL      KeyREMOVE
        ORR     R5, R5, R2, LSL #24     ; R5 := Mouse Y << 16

        BL      KeyREMOVE
        MOV     R6, R2                  ; Button state

        BL      KeyREMOVE               ; get realtime
        MOV     R3, R2
        BL      KeyREMOVE
        ORR     R3, R3, R2, LSL #8
        BL      KeyREMOVE
        ORR     R3, R3, R2, LSL #16
        BL      KeyREMOVE
        ORR     R3, R3, R2, LSL #24

        MOV     R0, R4, ASR #16         ; sign extend mouse coords
        MOV     R1, R5, ASR #16
        MOV     R2, R6
 |
a135 1
 ]
a151 1
        [ MouseBufferFix
a152 3
        |
        Pull    "R4-R6,R10-R12,PC"
        ]
a156 1
        [ AssemblingArthur :LOR: Module
a158 4
        |
        BYTEWS  WsPtr
        LDR     R3, RealTime                    ; doesn't exist in my world
        ]
a261 2
 [ AssemblePointerV

a338 1
 ]
@


4.4
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@a51 3
        [ STB
        STRB    r0, MousePresent
        ]
a395 7
        [ STB
        TEQ     r2, #0
        TEQEQ   r3, #0
        MOVNE   lr, #1
        STRNEB  lr, MousePresent
        BLNE    ProcessMouseXY
        |
a396 1
        ]
a412 7
        [ STB
        TEQ     r2, #0
        TEQEQ   r3, #0
        MOVNE   lr, #1
        STRNEB  lr, MousePresent
        BLNE    ProcessMouseXY
        |
a413 1
        ]
a427 6
        [ STB
        TEQ     r0, #2
        LDREQB  r0, MousePresent
        BEQ     SLVK
        ]

@


4.3
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@d34 1
a34 1
        MOV     r11, #KeyWorkSpace
d86 1
a86 1
        MOV     R4, #0
d183 1
a183 1
        MOV     R11, #KeyWorkSpace
d262 1
a262 1
        MOV     R3, #0
d282 2
d290 1
d297 5
d347 24
d380 6
a385 2
        Push    "r12,lr"
        MOV     r11, #KeyWorkSpace
d391 1
d409 26
a434 1
        Pull    "r12,pc"
d442 1
a442 1
        MOV     r11, #KeyWorkSpace
d447 1
a447 1
	[ STB
d458 2
@


4.3.2.1
log
@Stuff. A bit of touchscreen, I expect, and probably some other bits too.
@
text
@a281 2
Abso    DCB     "Abso"

a287 1
;               r4  = "Abso" if absolute movement
a293 5
; check for absolute position
        LDR     lr, Abso
        TEQ     r4, lr
        BEQ     %FT40

a338 24
40
; process absolute position
        MOV     r2, r2, ASL #16         ; look only at bottom 16 bits,
        MOV     r3, r3, ASL #16         ; sign extended
        MOV     r2, r2, ASR #16
        MOV     r3, r3, ASR #16

        LDR     r4, MouseBoundLCol      ; bound to bounding box
        CMP     r2, r4
        MOVLT   r2, r4
        LDR     r4, MouseBoundRCol
        CMP     r4, r2
        MOVLT   r2, r4
        STR     r2, MouseX
        LDR     r4, MouseBoundBRow      ; bound to bounding box
        CMP     r3, r4
        MOVLT   r3, r4
        LDR     r4, MouseBoundTRow
        CMP     r4, r3
        MOVLT   r3, r4
        STR     r3, MouseY
        Pull    "r4,pc"


d348 1
a348 1
        Push    "r4,r12,lr"
a354 1
        MOV     r4, #0                  ; They might fill this in
d372 1
a372 1
        Pull    "r4,r12,pc"
@


4.3.2.2
log
@* Allows interrupt-driven use of PointerV (as well as polled).
* Allows HAL-driven software resets.
* Sound buffers corrected to be uncacheable.

Version 5.35, 4.79.2.33. Tagged as 'Kernel-5_35-4_79_2_33'
@
text
@a382 4
        LDRB    r0, MouseReporting
        TEQ     r0, #0
        Pull    "r4,r12,pc",NE

a406 25
; *****************************************************************************
;
;       PointerVector - the default PointerV claimant
;
PointerVector
        CMP     r0, #PointerReason_Report
        Pull    pc, NE
        Push    "r2,r3,r11"
        MOV     r11, #KeyWorkSpace
        LDRB    lr, MouseType
        TEQ     r1, lr
        MOVEQ   lr, #1
        STREQB  lr, MouseReporting
        [ STB
        TEQ     r2, #0
        TEQEQ   r3, #0
        MOVNE   lr, #1
        STRNEB  lr, MousePresent
        BLNE    ProcessMouseXY
        |
        BL      ProcessMouseXY
        ]
        Pull    "r2,r3,r11,pc"


a428 2
        MOV     r0, #0
        STRB    r0, MouseReporting
@


4.3.2.3
log
@Merge Cortex kernel into HAL branch
Detail:
  This is a full merge of the Cortex kernel back into the HAL branch. Since the Cortex kernel is/was just a superset of the HAL branch, at this point in time both branches are identical.
  Main features the HAL branch gains from this merge:
  - ARMv6/ARMv7 support
  - High processor vectors/zero page relocation support
  - objasm 4 warning fixes
  - Improved HAL related functionality:
    - Support for HAL-driven RTCs instead of kernel-driven IIC based ones
    - Support for arbitrary size machine IDs
    - Support for multiple IIC busses
    - Support for any HAL size, instead of hardcoded 64k size
    - Probably some other stuff I've forgotten
  - Probably a few bug fixes here and there
Admin:
  Tested on BB-xM & Iyonix.
  Was successfully flashed to ROM on an Iyonix to test the Cortex branch implementation of the 2010 RTC bug fix.
  IOMD build untested - but has been known to work in the past.


Version 5.35, 4.79.2.123. Tagged as 'Kernel-5_35-4_79_2_123'
@
text
@d34 1
a34 1
        LDR     r11, =ZeroPage+KeyWorkSpace
d86 1
a86 1
        LDR     R4, =ZeroPage
d183 1
a183 1
        LDR     R11, =ZeroPage+KeyWorkSpace
d262 1
a262 1
        LDR     R3, =ZeroPage
d381 1
a381 1
        LDR     r11, =ZeroPage+KeyWorkSpace
d419 1
a419 1
        LDR     r11, =ZeroPage+KeyWorkSpace
d442 1
a442 1
        LDR     r11, =ZeroPage+KeyWorkSpace
@


4.3.2.4
log
@Reindent Arthur2.
Expand tabs.
Swap DCI for instructions now Objasm 4 is out.
Symbols for FSControl_CAT/RUN/OPT changed to non Arthur definitions.
Still boots on IOMD class, no other testing.

Version 5.35, 4.79.2.124. Tagged as 'Kernel-5_35-4_79_2_124'
@
text
@d447 1
a447 1
        [ STB
@


4.3.2.2.2.1
log
@Add zero page relocation support
Detail:
  A whole mass of changes to add high processor vectors + zero page relocation support to the Cortex branch of the kernel
  At the moment the code can only cope with two ZeroPage locations, &0 and &FFFF0000. But with a bit more tweaking those restrictions can probably be lifted, allowing ZeroPage to be hidden at almost any address (assuming it's fixed at compile time). If I've done my job right, these restrictions should all be enforced by asserts.
  There's a new option, HiProcVecs, in hdr/Options to control whether high processor vectors are used. When enabling it and building a ROM, remember:
  * FPEmulator needs to be built with the FPEAnchor=High option specified in the components file (not FPEAnchorType=High as my FPEmulator commit comments suggested)
  * ShareFS needs unplugging/removing since it can't cope with it yet
  * Iyonix users will need to use the latest ROOL boot sequence, to ensure the softloaded modules are compatible (OMAP, etc. don't really softload much so they're OK with older sequences)
  * However VProtect also needs patching to fix a nasty bug there - http://www.riscosopen.org/tracker/tickets/294
  The only other notable thing I can think of is that the ProcessTransfer code in s/ARM600 & s/VMSAv6 is disabled if high processor vectors are in use (it's fairly safe to say that code is obsolete in HAL builds anyway?)
  Fun challenge for my successor: Try setting ZeroPage to &FFFF00FF (or similar) so its value can be loaded with MVN instead of LDR. Then use positive/negative address offsets to access the contents.
  File changes:
  - hdr/ARMops - Modified ARMop macro to take the ZeroPage pointer as a parameter instead of 'zero'
  - hdr/Copro15ops - Corrected $quick handling in myISB macro
  - hdr/Options - Added ideal setting for us to use for HiProcVecs
  - s/AMBControl/allocate, s/AMBControl/growp, s/AMBControl/mapslot, s/AMBControl/memmap, s/AMBControl/service, s/AMBControl/shrinkp, s/Arthur2, s/Arthur3, s/ArthurSWIs, s/ChangeDyn, s/ExtraSWIs, s/HAL, s/HeapMan, s/Kernel, s/MemInfo, s/Middle, s/ModHand, s/MoreSWIs, s/MsgCode, s/NewIRQs, s/NewReset, s/Oscli, s/PMF/buffer, s/PMF/IIC, s/PMF/i2cutils, s/PMF/key, s/PMF/mouse, s/PMF/osbyte, s/PMF/oseven, s/PMF/osinit, s/PMF/osword, s/PMF/oswrch, s/SWINaming, s/Super1, s/SysComms, s/TickEvents, s/Utility, s/vdu/vdu23, s/vdu/vdudriver, s/vdu/vdugrafl, s/vdu/vdugrafv, s/vdu/vdupalxx, s/vdu/vdupointer, s/vdu/vduswis, s/vdu/vduwrch - Lots of updates to deal with zero page relocation
  - s/ARM600 - UseProcessTransfer option. Zero page relocation support. Deleted pre-HAL ClearPhysRAM code to tidy the file up a bit.
  - s/ARMops - Zero page relocation support. Set CPUFlag_HiProcVecs when high vectors are in use.
  - s/KbdResPC - Disable compilation of dead code
  - s/VMSAv6 - UseProcessTransfer option. Zero page relocation support.
Admin:
  Tested with OMAP & Iyonix ROM softloads, both with high & low zero page.
  High zero page hasn't had extensive testing, but boot sequence + ROM apps seem to work.


Version 5.35, 4.79.2.98.2.48. Tagged as 'Kernel-5_35-4_79_2_98_2_48'
@
text
@d34 1
a34 1
        LDR     r11, =ZeroPage+KeyWorkSpace
d86 1
a86 1
        LDR     R4, =ZeroPage
d183 1
a183 1
        LDR     R11, =ZeroPage+KeyWorkSpace
d262 1
a262 1
        LDR     R3, =ZeroPage
d381 1
a381 1
        LDR     r11, =ZeroPage+KeyWorkSpace
d419 1
a419 1
        LDR     r11, =ZeroPage+KeyWorkSpace
d442 1
a442 1
        LDR     r11, =ZeroPage+KeyWorkSpace
@


4.2
log
@Kernel merged
@
text
@d97 1
a97 1
 [ :LNOT:MouseBufferManager        
d168 1
a168 1
 [ :LNOT:MouseBufferManager        
d185 1
a185 1
 [ :LNOT:MouseBufferManager        
d355 2
a356 2
        MOV     r9, pc                  ; Save current PSR.
        TEQP    pc, #SVC_mode + I_bit   ; Call PointerV in SVC mode, no IRQs.
d361 1
a361 2
        TEQP    r9, #0
        NOP
d369 1
a369 1
        BL	ProcessMouseXY
@


4.2.2.1
log
@ 1 Simplify source by removing various long-standing compile flags
   and pre-Medusa h/w support

 2 Fix bug with Pages_Unsafe/Pages_Safe page moving for StrongARM
   (interrupt hole) - also better performance for StrongARM

 3 Improve perfromance of physical memory clear for StrongARM
   (make sure it uses burst write for STM)

 4 Suspend Chocolate task switching for StrongARM if SALDMIBbroken
   is TRUE
@
text
@d36 5
d85 1
d88 4
d97 38
d137 1
d146 5
a150 1

d164 1
d168 7
d185 30
d235 1
d261 1
d264 4
d405 1
d407 1
@


4.2.2.1.2.1
log
@Changed compile switches, to build Ursula kernel for RPC and A7000(+),
switches now set as follows:
  ARM67Support      TRUE  (for 610,710,7500,7500FE)
  ARMSASupport      TRUE  (for StrongARM)
  ARMSASupport_RevS FALSE (for StrongARMs before rev S)
  IOMD1Support      TRUE  (for old machines)
  IOMD2Support      FALSE (They killed Phoebe!)
Version set to 4.00 (RISC OS 4)
This is the same as my last commit to the Ursula branch
@
text
@d47 3
d266 7
d274 1
d289 5
@


4.2.2.2
log
@Phoebe aware version of kernel
Source currently builds for Phoebe only. Flipping source switches will
build for Risc PC and/or A7000(+) as well (or instead). Not tested
much on older platforms.
Known issues remaining:
 - on Phoebe, kernel does not always set up the video (new VCO)
   properly. It appears that anything via the display manager is ok,
   old modes are ok before a monitor definition is seen, but mode
   changes via applications in the desktop always/often (?) aren't.
   Most likely area for investigation is whether kernel catches all
   mode change routes for ensuring it programs the new VCO.
 - on Phoebe, kernel does not yet have the hooks to support multiple
   CPU(s) (to park the slaves and allow them to be used later). I
   have a technical note on this, which should be archived as part of
   the Ursula burial work.
 - on older platforms, the areas that need checking most are CMOS
   power on reset (when in ROM) and mode changes by all routes (since
   these areas are bent by Phoebe support)
Note that kernel currently builds for rev S or better StrongARM. The
switch ARMSASupport_RevS should be set false if building for Risc PC.
@
text
@d47 3
d266 7
d274 1
d289 5
@


4.1
log
@Initial revision
@
text
@d52 3
d363 9
a371 2

        BL      ProcessMouseXY
d385 6
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@a51 1
        STRB    r0, MousePresent
d361 1
a361 5
        TEQ     r2, #0
        TEQEQ   r3, #0
        MOVNE   lr, #1
        STRNEB  lr, MousePresent
        BLNE    ProcessMouseXY
a373 4
        BEQ     SLVK

        TEQ     r0, #2
        LDREQB  r0, MousePresent
@


4.1.5.1
log
@Import from SrcFiler
@
text
@a51 1
        STRB    r0, MousePresent
d361 1
a361 5
        TEQ     r2, #0
        TEQEQ   r3, #0
        MOVNE   lr, #1
        STRNEB  lr, MousePresent
        BLNE    ProcessMouseXY
a373 4
        BEQ     SLVK

        TEQ     r0, #2
        LDREQB  r0, MousePresent
@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
