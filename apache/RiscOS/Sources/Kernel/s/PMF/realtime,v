head	4.4;
access;
symbols
	Kernel-6_15:4.4
	Kernel-6_14:4.4
	Kernel-6_01-3:4.4
	Kernel-6_13:4.4
	Kernel-6_12:4.4
	Kernel-6_11:4.4
	Kernel-6_10:4.4
	Kernel-6_09:4.4
	Kernel-6_08-4_129_2_10:4.4
	Kernel-6_08-4_129_2_9:4.4
	Kernel-6_08:4.4
	Kernel-6_07:4.4
	Kernel-6_06:4.4
	Kernel-6_05-4_129_2_8:4.4
	Kernel-6_05:4.4
	Kernel-6_04:4.4
	Kernel-6_03:4.4
	Kernel-6_01-2:4.4
	Kernel-6_01-4_146_2_1:4.4
	Kernel-6_02:4.4
	Kernel-6_01-1:4.4
	Kernel-6_01:4.4
	Kernel-6_00:4.4
	Kernel-5_99:4.4
	Kernel-5_98:4.4
	Kernel-5_97-4_129_2_7:4.4
	Kernel-5_97:4.4
	Kernel-5_96:4.4
	Kernel-5_95:4.4
	Kernel-5_94:4.4
	Kernel-5_93:4.4
	Kernel-5_92:4.4
	Kernel-5_91:4.4
	Kernel-5_90:4.4
	Kernel-5_89-4_129_2_6:4.4
	Kernel-5_89:4.4
	Kernel-5_88-4_129_2_5:4.4
	Kernel-5_88-4_129_2_4:4.4
	Kernel-5_88:4.4
	Kernel-5_87:4.4
	Kernel-5_86-4_129_2_3:4.4
	Kernel-5_86-4_129_2_2:4.4
	Kernel-5_86-4_129_2_1:4.4
	Kernel-5_86:4.4
	SMP:4.4.0.2
	SMP_bp:4.4
	Kernel-5_85:4.4
	Kernel-5_54-1:4.4
	Kernel-5_84:4.4
	Kernel-5_83:4.4
	Kernel-5_82:4.4
	Kernel-5_81:4.4
	Kernel-5_80:4.4
	Kernel-5_79:4.4
	Kernel-5_78:4.4
	Kernel-5_77:4.4
	Kernel-5_76:4.4
	Kernel-5_75:4.4
	Kernel-5_74:4.4
	Kernel-5_73:4.4
	Kernel-5_72:4.4
	Kernel-5_71:4.4
	Kernel-5_70:4.4
	Kernel-5_69:4.4
	Kernel-5_68:4.4
	Kernel-5_67:4.4
	Kernel-5_66:4.4
	Kernel-5_65:4.4
	Kernel-5_64:4.4
	Kernel-5_63:4.4
	Kernel-5_62:4.4
	Kernel-5_61:4.4
	Kernel-5_60:4.4
	Kernel-5_59:4.4
	Kernel-5_58:4.4
	Kernel-5_57:4.4
	Kernel-5_56:4.4
	Kernel-5_55:4.4
	Kernel-5_54:4.4
	Kernel-5_53:4.4
	Kernel-5_52:4.4
	Kernel-5_51:4.4
	Kernel-5_50:4.4
	Kernel-5_49:4.4
	HAL_merge:4.3.2.4
	Kernel-5_48:4.4
	Kernel-5_35-4_79_2_327:4.3.2.4
	Kernel-5_35-4_79_2_326:4.3.2.4
	Kernel-5_35-4_79_2_325:4.3.2.4
	Kernel-5_35-4_79_2_324:4.3.2.4
	Kernel-5_35-4_79_2_323:4.3.2.4
	Kernel-5_35-4_79_2_322:4.3.2.4
	Kernel-5_35-4_79_2_321:4.3.2.4
	Kernel-5_35-4_79_2_320:4.3.2.4
	Kernel-5_35-4_79_2_319:4.3.2.4
	Kernel-5_35-4_79_2_318:4.3.2.4
	Kernel-5_35-4_79_2_317:4.3.2.4
	Kernel-5_35-4_79_2_316:4.3.2.4
	Kernel-5_35-4_79_2_315:4.3.2.4
	Kernel-5_35-4_79_2_314:4.3.2.4
	Kernel-5_35-4_79_2_313:4.3.2.4
	Kernel-5_35-4_79_2_312:4.3.2.4
	Kernel-5_35-4_79_2_311:4.3.2.4
	Kernel-5_35-4_79_2_310:4.3.2.4
	Kernel-5_35-4_79_2_309:4.3.2.4
	Kernel-5_35-4_79_2_308:4.3.2.4
	Kernel-5_35-4_79_2_307:4.3.2.4
	Kernel-5_35-4_79_2_306:4.3.2.4
	Kernel-5_35-4_79_2_305:4.3.2.4
	Kernel-5_35-4_79_2_304:4.3.2.4
	Kernel-5_35-4_79_2_303:4.3.2.4
	Kernel-5_35-4_79_2_302:4.3.2.4
	Kernel-5_35-4_79_2_301:4.3.2.4
	Kernel-5_35-4_79_2_300:4.3.2.4
	Kernel-5_35-4_79_2_299:4.3.2.4
	Kernel-5_35-4_79_2_298:4.3.2.4
	Kernel-5_35-4_79_2_297:4.3.2.4
	Kernel-5_35-4_79_2_296:4.3.2.4
	Kernel-5_35-4_79_2_295:4.3.2.4
	Kernel-5_35-4_79_2_294:4.3.2.4
	Kernel-5_35-4_79_2_293:4.3.2.4
	Kernel-5_35-4_79_2_292:4.3.2.4
	Kernel-5_35-4_79_2_291:4.3.2.4
	Kernel-5_35-4_79_2_290:4.3.2.4
	Kernel-5_35-4_79_2_289:4.3.2.4
	Kernel-5_35-4_79_2_288:4.3.2.4
	Kernel-5_35-4_79_2_287:4.3.2.4
	Kernel-5_35-4_79_2_286:4.3.2.4
	Kernel-5_35-4_79_2_285:4.3.2.4
	Kernel-5_35-4_79_2_284:4.3.2.4
	Kernel-5_35-4_79_2_283:4.3.2.4
	Kernel-5_35-4_79_2_282:4.3.2.4
	Kernel-5_35-4_79_2_281:4.3.2.4
	Kernel-5_35-4_79_2_280:4.3.2.4
	Kernel-5_35-4_79_2_279:4.3.2.4
	Kernel-5_35-4_79_2_278:4.3.2.4
	Kernel-5_35-4_79_2_277:4.3.2.4
	Kernel-5_35-4_79_2_276:4.3.2.4
	Kernel-5_35-4_79_2_275:4.3.2.4
	Kernel-5_35-4_79_2_274:4.3.2.4
	Kernel-5_35-4_79_2_273:4.3.2.4
	Kernel-5_35-4_79_2_272:4.3.2.4
	Kernel-5_35-4_79_2_271:4.3.2.4
	Kernel-5_35-4_79_2_270:4.3.2.4
	Kernel-5_35-4_79_2_269:4.3.2.4
	Kernel-5_35-4_79_2_268:4.3.2.4
	Kernel-5_35-4_79_2_267:4.3.2.4
	Kernel-5_35-4_79_2_266:4.3.2.4
	Kernel-5_35-4_79_2_265:4.3.2.4
	Kernel-5_35-4_79_2_264:4.3.2.4
	Kernel-5_35-4_79_2_263:4.3.2.4
	Kernel-5_35-4_79_2_262:4.3.2.4
	Kernel-5_35-4_79_2_261:4.3.2.4
	Kernel-5_35-4_79_2_260:4.3.2.4
	Kernel-5_35-4_79_2_259:4.3.2.4
	Kernel-5_35-4_79_2_258:4.3.2.4
	Kernel-5_35-4_79_2_257:4.3.2.4
	Kernel-5_35-4_79_2_256:4.3.2.4
	Kernel-5_35-4_79_2_255:4.3.2.4
	Kernel-5_35-4_79_2_254:4.3.2.4
	Kernel-5_35-4_79_2_253:4.3.2.4
	Kernel-5_35-4_79_2_252:4.3.2.4
	Kernel-5_35-4_79_2_251:4.3.2.4
	Kernel-5_35-4_79_2_250:4.3.2.4
	Kernel-5_35-4_79_2_249:4.3.2.4
	Kernel-5_35-4_79_2_248:4.3.2.4
	Kernel-5_35-4_79_2_247:4.3.2.4
	Kernel-5_35-4_79_2_246:4.3.2.4
	Kernel-5_35-4_79_2_245:4.3.2.4
	Kernel-5_35-4_79_2_244:4.3.2.4
	Kernel-5_35-4_79_2_243:4.3.2.4
	Kernel-5_35-4_79_2_242:4.3.2.4
	Kernel-5_35-4_79_2_241:4.3.2.4
	Kernel-5_35-4_79_2_240:4.3.2.4
	Kernel-5_35-4_79_2_239:4.3.2.4
	Kernel-5_35-4_79_2_238:4.3.2.4
	Kernel-5_35-4_79_2_237:4.3.2.4
	Kernel-5_35-4_79_2_236:4.3.2.4
	Kernel-5_35-4_79_2_235:4.3.2.4
	Kernel-5_35-4_79_2_234:4.3.2.4
	Kernel-5_35-4_79_2_233:4.3.2.4
	Kernel-5_35-4_79_2_232:4.3.2.4
	Kernel-5_35-4_79_2_231:4.3.2.4
	Kernel-5_35-4_79_2_230:4.3.2.4
	Kernel-5_35-4_79_2_229:4.3.2.4
	Kernel-5_35-4_79_2_228:4.3.2.4
	Kernel-5_35-4_79_2_227:4.3.2.4
	Kernel-5_35-4_79_2_226:4.3.2.4
	Kernel-5_35-4_79_2_225:4.3.2.4
	Kernel-5_35-4_79_2_224:4.3.2.4
	Kernel-5_35-4_79_2_223:4.3.2.4
	Kernel-5_35-4_79_2_222:4.3.2.4
	Kernel-5_35-4_79_2_221:4.3.2.4
	Kernel-5_35-4_79_2_220:4.3.2.4
	Kernel-5_35-4_79_2_219:4.3.2.4
	Kernel-5_35-4_79_2_218:4.3.2.4
	Kernel-5_35-4_79_2_217:4.3.2.4
	Kernel-5_35-4_79_2_216:4.3.2.4
	Kernel-5_35-4_79_2_215:4.3.2.4
	Kernel-5_35-4_79_2_214:4.3.2.4
	Kernel-5_35-4_79_2_213:4.3.2.4
	Kernel-5_35-4_79_2_212:4.3.2.4
	Kernel-5_35-4_79_2_211:4.3.2.4
	Kernel-5_35-4_79_2_210:4.3.2.4
	Kernel-5_35-4_79_2_209:4.3.2.4
	Kernel-5_35-4_79_2_208:4.3.2.4
	Kernel-5_35-4_79_2_207:4.3.2.4
	Kernel-5_35-4_79_2_206:4.3.2.4
	Kernel-5_35-4_79_2_205:4.3.2.4
	Kernel-5_35-4_79_2_204:4.3.2.4
	Kernel-5_35-4_79_2_203:4.3.2.4
	Kernel-5_35-4_79_2_202:4.3.2.4
	Kernel-5_35-4_79_2_201:4.3.2.3
	Kernel-5_35-4_79_2_200:4.3.2.3
	Kernel-5_35-4_79_2_199:4.3.2.3
	Kernel-5_35-4_79_2_198:4.3.2.2
	Kernel-5_35-4_79_2_197:4.3.2.2
	Kernel-5_35-4_79_2_196:4.3.2.2
	Kernel-5_35-4_79_2_195:4.3.2.2
	Kernel-5_35-4_79_2_194:4.3.2.2
	Kernel-5_35-4_79_2_193:4.3.2.2
	Kernel-5_35-4_79_2_192:4.3.2.2
	Kernel-5_35-4_79_2_191:4.3.2.2
	Kernel-5_35-4_79_2_190:4.3.2.2
	Kernel-5_35-4_79_2_189:4.3.2.2
	Kernel-5_35-4_79_2_188:4.3.2.2
	Kernel-5_35-4_79_2_187:4.3.2.2
	Kernel-5_35-4_79_2_186:4.3.2.2
	Kernel-5_35-4_79_2_185:4.3.2.2
	Kernel-5_35-4_79_2_184:4.3.2.2
	Kernel-5_35-4_79_2_183:4.3.2.2
	Kernel-5_35-4_79_2_182:4.3.2.2
	Kernel-5_35-4_79_2_181:4.3.2.2
	Kernel-5_35-4_79_2_180:4.3.2.2
	Kernel-5_35-4_79_2_179:4.3.2.2
	Kernel-5_35-4_79_2_178:4.3.2.2
	Kernel-5_35-4_79_2_177:4.3.2.2
	Kernel-5_35-4_79_2_176:4.3.2.2
	Kernel-5_35-4_79_2_175:4.3.2.2
	Kernel-5_35-4_79_2_174:4.3.2.2
	Kernel-5_35-4_79_2_173:4.3.2.2
	Kernel-5_35-4_79_2_172:4.3.2.2
	Kernel-5_35-4_79_2_171:4.3.2.2
	Kernel-5_35-4_79_2_170:4.3.2.2
	Kernel-5_35-4_79_2_169:4.3.2.2
	Kernel-5_35-4_79_2_168:4.3.2.2
	Kernel-5_35-4_79_2_167:4.3.2.2
	Kernel-5_35-4_79_2_166:4.3.2.2
	Kernel-5_35-4_79_2_165:4.3.2.2
	RPi_merge:4.3.2.2
	Kernel-5_35-4_79_2_147_2_23:4.3.2.2
	Kernel-5_35-4_79_2_147_2_22:4.3.2.2
	Kernel-5_35-4_79_2_147_2_21:4.3.2.2
	Kernel-5_35-4_79_2_147_2_20:4.3.2.2
	Kernel-5_35-4_79_2_147_2_19:4.3.2.2
	Kernel-5_35-4_79_2_147_2_18:4.3.2.2
	Kernel-5_35-4_79_2_164:4.3.2.2
	Kernel-5_35-4_79_2_163:4.3.2.2
	Kernel-5_35-4_79_2_147_2_17:4.3.2.2
	Kernel-5_35-4_79_2_147_2_16:4.3.2.2
	Kernel-5_35-4_79_2_147_2_15:4.3.2.2
	Kernel-5_35-4_79_2_162:4.3.2.2
	Kernel-5_35-4_79_2_161:4.3.2.2
	Kernel-5_35-4_79_2_147_2_14:4.3.2.2
	Kernel-5_35-4_79_2_147_2_13:4.3.2.2
	Kernel-5_35-4_79_2_160:4.3.2.2
	Kernel-5_35-4_79_2_159:4.3.2.2
	Kernel-5_35-4_79_2_158:4.3.2.2
	Kernel-5_35-4_79_2_157:4.3.2.2
	Kernel-5_35-4_79_2_156:4.3.2.2
	Kernel-5_35-4_79_2_147_2_12:4.3.2.2
	Kernel-5_35-4_79_2_147_2_11:4.3.2.2
	Kernel-5_35-4_79_2_155:4.3.2.2
	Kernel-5_35-4_79_2_147_2_10:4.3.2.2
	Kernel-5_35-4_79_2_154:4.3.2.2
	Kernel-5_35-4_79_2_153:4.3.2.2
	Kernel-5_35-4_79_2_147_2_9:4.3.2.2
	Kernel-5_35-4_79_2_152:4.3.2.2
	Kernel-5_35-4_79_2_151:4.3.2.2
	Kernel-5_35-4_79_2_147_2_8:4.3.2.2
	Kernel-5_35-4_79_2_147_2_7:4.3.2.2
	Kernel-5_35-4_79_2_150:4.3.2.2
	Kernel-5_35-4_79_2_147_2_6:4.3.2.2
	Kernel-5_35-4_79_2_147_2_5:4.3.2.2
	Kernel-5_35-4_79_2_149:4.3.2.2
	Kernel-5_35-4_79_2_147_2_4:4.3.2.2
	Kernel-5_35-4_79_2_147_2_3:4.3.2.2
	Kernel-5_35-4_79_2_148:4.3.2.2
	Kernel-5_35-4_79_2_147_2_2:4.3.2.2
	Kernel-5_35-4_79_2_147_2_1:4.3.2.2
	RPi:4.3.2.2.0.2
	RPi_bp:4.3.2.2
	Kernel-5_35-4_79_2_98_2_52_2_1:4.3.4.1
	alees_Kernel_dev:4.3.4.1.0.2
	alees_Kernel_dev_bp:4.3.4.1
	Kernel-5_35-4_79_2_147:4.3.2.2
	Kernel-5_35-4_79_2_146:4.3.2.2
	Kernel-5_35-4_79_2_145:4.3.2.2
	Kernel-5_35-4_79_2_144:4.3.2.2
	Kernel-5_35-4_79_2_143:4.3.2.2
	Kernel-5_35-4_79_2_142:4.3.2.2
	Kernel-5_35-4_79_2_141:4.3.2.2
	Kernel-5_35-4_79_2_140:4.3.2.2
	Kernel-5_35-4_79_2_139:4.3.2.2
	Kernel-5_35-4_79_2_138:4.3.2.2
	Kernel-5_35-4_79_2_137:4.3.2.2
	Kernel-5_35-4_79_2_136:4.3.2.2
	Kernel-5_35-4_79_2_135:4.3.2.2
	Kernel-5_35-4_79_2_134:4.3.2.2
	Kernel-5_35-4_79_2_133:4.3.2.2
	Kernel-5_35-4_79_2_132:4.3.2.2
	Kernel-5_35-4_79_2_131:4.3.2.2
	Kernel-5_35-4_79_2_130:4.3.2.2
	Kernel-5_35-4_79_2_129:4.3.2.2
	Kernel-5_35-4_79_2_128:4.3.2.2
	Kernel-5_35-4_79_2_127:4.3.2.2
	Kernel-5_35-4_79_2_126:4.3.2.1
	Kernel-5_35-4_79_2_125:4.3.2.1
	Kernel-5_35-4_79_2_124:4.3.2.1
	Kernel-5_35-4_79_2_123:4.3.2.1
	Cortex_merge:4.3.4.1
	Kernel-5_35-4_79_2_122:4.3
	Kernel-5_35-4_79_2_98_2_54:4.3.4.1
	Kernel-5_35-4_79_2_98_2_53:4.3.4.1
	Kernel-5_35-4_79_2_98_2_52:4.3.4.1
	Kernel-5_35-4_79_2_98_2_51:4.3.4.1
	Kernel-5_35-4_79_2_98_2_50:4.3.4.1
	Kernel-5_35-4_79_2_98_2_49:4.3.4.1
	Kernel-5_35-4_79_2_98_2_48:4.3.4.1
	Kernel-5_35-4_79_2_121:4.3
	Kernel-5_35-4_79_2_98_2_47:4.3.4.1
	Kernel-5_35-4_79_2_120:4.3
	Kernel-5_35-4_79_2_98_2_46:4.3.4.1
	Kernel-5_35-4_79_2_119:4.3
	Kernel-5_35-4_79_2_98_2_45:4.3.4.1
	Kernel-5_35-4_79_2_98_2_44:4.3.4.1
	Kernel-5_35-4_79_2_118:4.3
	Kernel-5_35-4_79_2_98_2_43:4.3.4.1
	Kernel-5_35-4_79_2_117:4.3
	Kernel-5_35-4_79_2_116:4.3
	Kernel-5_35-4_79_2_98_2_42:4.3.4.1
	Kernel-5_35-4_79_2_115:4.3
	Kernel-5_35-4_79_2_98_2_41:4.3.4.1
	Kernel-5_35-4_79_2_98_2_40:4.3.4.1
	Kernel-5_35-4_79_2_114:4.3
	Kernel-5_35-4_79_2_98_2_39:4.3.4.1
	Kernel-5_35-4_79_2_98_2_38:4.3.4.1
	Kernel-5_35-4_79_2_113:4.3
	Kernel-5_35-4_79_2_112:4.3
	Kernel-5_35-4_79_2_98_2_37:4.3.4.1
	Kernel-5_35-4_79_2_98_2_36:4.3.4.1
	Kernel-5_35-4_79_2_98_2_35:4.3.4.1
	Kernel-5_35-4_79_2_98_2_34:4.3.4.1
	Kernel-5_35-4_79_2_98_2_33:4.3.4.1
	Kernel-5_35-4_79_2_98_2_32:4.3.4.1
	Kernel-5_35-4_79_2_98_2_31:4.3.4.1
	Kernel-5_35-4_79_2_98_2_30:4.3.4.1
	Kernel-5_35-4_79_2_98_2_29:4.3.4.1
	Kernel-5_35-4_79_2_98_2_28:4.3.4.1
	Kernel-5_35-4_79_2_98_2_27:4.3.4.1
	Kernel-5_35-4_79_2_98_2_26:4.3.4.1
	Kernel-5_35-4_79_2_111:4.3
	Kernel-5_35-4_79_2_98_2_25:4.3.4.1
	Kernel-5_35-4_79_2_98_2_24:4.3.4.1
	Kernel-5_35-4_79_2_98_2_23:4.3.4.1
	Kernel-5_35-4_79_2_110:4.3
	Kernel-5_35-4_79_2_98_2_22:4.3.4.1
	Kernel-5_35-4_79_2_109:4.3
	Kernel-5_35-4_79_2_98_2_21:4.3.4.1
	Kernel-5_35-4_79_2_98_2_20:4.3.4.1
	Kernel-5_35-4_79_2_108:4.3
	Kernel-5_35-4_79_2_107:4.3
	Kernel-5_35-4_79_2_98_2_19:4.3.4.1
	Kernel-5_35-4_79_2_98_2_18:4.3.4.1
	Kernel-5_35-4_79_2_98_2_17:4.3.4.1
	Kernel-5_35-4_79_2_98_2_16:4.3.4.1
	Kernel-5_35-4_79_2_98_2_15:4.3.4.1
	Kernel-5_35-4_79_2_106:4.3
	Kernel-5_35-4_79_2_105:4.3
	Kernel-5_35-4_79_2_104:4.3
	Kernel-5_35-4_79_2_98_2_14:4.3.4.1
	Kernel-5_35-4_79_2_98_2_13:4.3.4.1
	Kernel-5_35-4_79_2_98_2_12:4.3
	Kernel-5_35-4_79_2_98_2_11:4.3
	Kernel-5_35-4_79_2_98_2_10:4.3
	Kernel-5_35-4_79_2_98_2_9:4.3
	Kernel-5_35-4_79_2_103:4.3
	Kernel-5_35-4_79_2_102:4.3
	Kernel-5_35-4_79_2_98_2_8:4.3
	Kernel-5_35-4_79_2_98_2_7:4.3
	Kernel-5_35-4_79_2_98_2_6:4.3
	Kernel-5_35-4_79_2_98_2_5:4.3
	Kernel-5_35-4_79_2_98_2_4:4.3
	Kernel-5_35-4_79_2_101:4.3
	Kernel-5_35-4_79_2_100:4.3
	Kernel-5_35-4_79_2_99:4.3
	Kernel-5_35-4_79_2_98_2_3:4.3
	Kernel-5_35-4_79_2_98_2_2:4.3
	Kernel-5_35-4_79_2_98_2_1:4.3
	Cortex:4.3.0.4
	Cortex_bp:4.3
	Kernel-5_35-4_79_2_98:4.3
	Kernel-5_35-4_79_2_97:4.3
	Kernel-5_35-4_79_2_96:4.3
	Kernel-5_35-4_79_2_95:4.3
	Kernel-5_35-4_79_2_94:4.3
	Kernel-5_35-4_79_2_93:4.3
	Kernel-5_35-4_79_2_92:4.3
	Kernel-5_35-4_79_2_91:4.3
	Kernel-5_35-4_79_2_90:4.3
	Kernel-5_35-4_79_2_89:4.3
	Kernel-5_35-4_79_2_88:4.3
	Kernel-5_35-4_79_2_87:4.3
	Kernel-5_35-4_79_2_86:4.3
	Kernel-5_35-4_79_2_85:4.3
	Kernel-5_35-4_79_2_84:4.3
	Kernel-5_35-4_79_2_83:4.3
	Kernel-5_35-4_79_2_82:4.3
	Kernel-5_35-4_79_2_81:4.3
	Kernel-5_35-4_79_2_80:4.3
	Kernel-5_35-4_79_2_79:4.3
	Kernel-5_35-4_79_2_78:4.3
	Kernel-5_35-4_79_2_77:4.3
	RO_5_07:4.3
	Kernel-5_35-4_79_2_76:4.3
	Kernel-5_35-4_79_2_75:4.3
	Kernel-5_35-4_79_2_74:4.3
	Kernel-5_35-4_79_2_73:4.3
	Kernel-5_35-4_79_2_72:4.3
	Kernel-5_35-4_79_2_71:4.3
	Kernel-5_35-4_79_2_70:4.3
	Kernel-5_35-4_79_2_69:4.3
	Kernel-5_35-4_79_2_68:4.3
	Kernel-5_35-4_79_2_67:4.3
	Kernel-5_35-4_79_2_66:4.3
	Kernel-5_35-4_79_2_65:4.3
	Kernel-5_35-4_79_2_64:4.3
	Kernel-5_35-4_79_2_63:4.3
	Kernel-5_35-4_79_2_62:4.3
	Kernel-5_35-4_79_2_61:4.3
	Kernel-5_35-4_79_2_59:4.3
	Kernel-5_35-4_79_2_58:4.3
	Kernel-5_35-4_79_2_57:4.3
	Kernel-5_35-4_79_2_56:4.3
	Kernel-5_35-4_79_2_55:4.3
	Kernel-5_35-4_79_2_54:4.3
	Kernel-5_35-4_79_2_53:4.3
	Kernel-5_35-4_79_2_52:4.3
	Kernel-5_35-4_79_2_51:4.3
	Kernel-5_35-4_79_2_50:4.3
	Kernel-5_35-4_79_2_49:4.3
	Kernel-5_35-4_79_2_48:4.3
	Kernel-5_47:4.3
	Kernel-5_46-4_90_2_1:4.3
	nbingham_Kernel_FastNC_dev_bp:4.3
	nbingham_Kernel_FastNC_dev:4.3.0.6
	Kernel-5_46:4.3
	Kernel-5_45:4.3
	Kernel-5_35-4_79_2_47:4.3
	Kernel-5_35-4_79_2_46:4.3
	Kernel-5_35-4_79_2_45:4.3
	Kernel-5_35-4_79_2_44:4.3
	Kernel-5_35-4_79_2_25_2_2:4.3
	Kernel-5_35-4_79_2_43:4.3
	Kernel-5_35-4_79_2_42:4.3
	Kernel-5_35-4_79_2_41:4.3
	Kernel-5_35-4_79_2_40:4.3
	Kernel-5_35-4_79_2_39:4.3
	Kernel-5_35-4_79_2_38:4.3
	Kernel-5_35-4_79_2_37:4.3
	Kernel-5_35-4_79_2_36:4.3
	Kernel-5_35-4_79_2_35:4.3
	Kernel-5_35-4_79_2_34:4.3
	Kernel-5_35-4_79_2_33:4.3
	Kernel-5_35-4_79_2_32:4.3
	Kernel-5_44:4.3
	Kernel-5_35-4_79_2_25_2_1:4.3
	Kernel-5_43:4.3
	Kernel-5_35-4_79_2_31:4.3
	Kernel-5_35-4_79_2_30:4.3
	Kernel-5_35-4_79_2_29:4.3
	Kernel-5_35-4_79_2_28:4.3
	Kernel-5_35-4_79_2_27:4.3
	Kernel-5_35-4_79_2_26:4.3
	Kernel-5_42:4.3
	Kernel-5_41:4.3
	Kernel-5_40:4.3
	Kernel-5_35-4_79_2_25:4.3
	Kernel-5_35-4_79_2_24:4.3
	Kernel-5_35-4_79_2_23:4.3
	Kernel-5_35-4_79_2_22:4.3
	Kernel-5_35-4_79_2_21:4.3
	Kernel-5_35-4_79_2_20:4.3
	Kernel-5_35-4_79_2_19:4.3
	Kernel-5_35-4_79_2_18:4.3
	Kernel-5_35-4_79_2_17:4.3
	Kernel-5_35-4_79_2_16:4.3
	Kernel-5_35-4_79_2_15:4.3
	Kernel-5_35-4_79_2_14:4.3
	Kernel-5_39:4.3
	Kernel-5_13-4_52_2_1:4.2
	Bethany:4.2.0.2
	Kernel-5_38:4.3
	Kernel-5_35-4_79_2_13:4.3
	Kernel-5_35-4_79_2_12:4.3
	Kernel-5_35-4_79_2_11:4.3
	Kernel-5_37:4.3
	Kernel-5_35-4_79_2_10:4.3
	Kernel-5_35-4_79_2_9:4.3
	Kernel-5_36:4.3
	Kernel-5_35-4_79_2_8:4.3
	Kernel-5_35-4_79_2_7:4.3
	Kernel-5_35-4_79_2_6:4.3
	Kernel-5_35-4_79_2_5:4.3
	Kernel-5_35-4_79_2_4:4.3
	Kernel-5_35-4_79_2_3:4.3
	Kernel-5_35-4_79_2_2:4.3
	dellis_autobuild_BaseSW:4.3
	Kernel-5_35-4_79_2_1:4.3
	HAL:4.3.0.2
	Kernel-5_35:4.3
	Kernel-5_34:4.3
	Kernel-5_33:4.3
	Kernel-5_32:4.3
	Kernel-5_31:4.3
	Kernel-5_30:4.3
	Kernel-5_29:4.3
	Kernel-5_28:4.3
	Kernel-5_27:4.3
	Kernel-5_26:4.3
	Kernel-5_25:4.3
	Kernel-5_24:4.3
	Kernel-5_23:4.3
	Kernel-5_22:4.2
	sbrodie_sedwards_16Mar2000:4.2
	Kernel-5_21:4.2
	Kernel-5_20:4.2
	Kernel-5_19:4.2
	Kernel-5_18:4.2
	Kernel-5_17:4.2
	Kernel-5_16:4.2
	Kernel-5_15:4.2
	Kernel-5_14:4.2
	Kernel-5_13:4.2
	Kernel-5_12:4.2
	Kernel-5_11:4.2
	Kernel-5_10:4.2
	Kernel-5_09:4.2
	Kernel-5_08:4.2
	Kernel-5_07:4.2
	Kernel-5_06:4.2
	Kernel-5_05:4.2
	Kernel-5_04:4.2
	Kernel-5_03:4.2
	Kernel-5_02:4.2
	Kernel-5_01:4.2
	Kernel-5_00:4.2
	Kernel-4_99:4.2
	Kernel-4_98:4.2
	Kernel-4_97:4.2
	Kernel-4_96:4.2
	Kernel-4_95:4.2
	Kernel-4_94:4.2
	Kernel-4_93:4.2
	Kernel-4_92:4.2
	Kernel-4_91:4.2
	Kernel-4_90:4.2
	dcotton_autobuild_BaseSW:4.3
	Kernel-4_89:4.2
	Kernel-4_88:4.2
	Kernel-4_87:4.2
	Kernel-4_86:4.2
	Kernel-4_85:4.2
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1.4.1
	Kernel-4_84:4.2
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1.4.1
	Ursula_RiscPC_bp:4.1.4.1
	Kernel-4_83:4.2
	Kernel-4_82:4.2
	Kernel-4_81:4.2
	Kernel-4_80:4.2
	Kernel-4_79:4.2
	Kernel-4_78:4.2
	Kernel-4_77:4.2
	Kernel-4_76:4.2
	Kernel-4_75:4.2
	Kernel-4_74:4.2
	Kernel-4_73:4.2
	Kernel-4_72:4.2
	Kernel-4_71:4.2
	Kernel-4_70:4.2
	Kernel-4_69:4.2
	Kernel-4_68:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1.4.1
	Ursula_RiscPC:4.1.4.1.0.2
	Kernel-4_63-1_1_2_5:4.1.7.2
	Kernel-4_63-1_1_2_4:4.1.7.2
	Kernel-4_67:4.2
	Kernel-4_66:4.2
	Kernel-4_63-1_1_2_3:4.1.7.2
	Kernel-4_65:4.2
	Ursula_merge:4.1
	Kernel-4_64:4.2
	mstphens_Kernel-3_81:4.1.4.1
	Kernel-4_63-1_1_2_2:4.1.7.2
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1.4.1
	UrsulaBuild_FinalSoftload:4.1.4.1
	rthornb_UrsulaBuild-12Aug1998:4.1.4.1
	aglover_UrsulaBuild-05Aug1998:4.1.4.1
	rthornb_UrsulaBuild-29Jul1998:4.1.4.1
	rthornb_UrsulaBuild-22Jul1998:4.1.4.1
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1.4.1
	rthornb_UrsulaBuild-07Jul1998:4.1.4.1
	rthornb_UrsulaBuild-17Jun1998:4.1.4.1
	rthornb_UrsulaBuild-03Jun1998:4.1.4.1
	rthornb_UrsulaBuild-27May1998:4.1.4.1
	mstphens_Kernel-3_80:4.1.4.1
	rthornb_UrsulaBuild-21May1998:4.1.4.1
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1.4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.2
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2016.06.30.20.08.16;	author jlee;	state Exp;
branches;
next	4.3;
commitid	IWoXxARWeuLDOwcz;

4.3
date	2000.04.04.14.27.38;	author kbracey;	state Exp;
branches
	4.3.2.1
	4.3.4.1;
next	4.2;

4.2
date	98.09.30.08.42.51;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	96.11.05.09.41.31;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.4.1
	4.1.5.1
	4.1.7.1;
next	;

4.3.2.1
date	2011.11.26.21.11.25;	author jlee;	state Exp;
branches;
next	4.3.2.2;
commitid	cI3W0zbtALQG6TIv;

4.3.2.2
date	2011.11.27.19.18.20;	author rsprowson;	state Exp;
branches;
next	4.3.2.3;
commitid	iuIXfUOByAFYr0Jv;

4.3.2.3
date	2013.10.27.17.46.17;	author rsprowson;	state Exp;
branches;
next	4.3.2.4;
commitid	LTAQStOMyOaprXax;

4.3.2.4
date	2013.11.20.20.30.02;	author rsprowson;	state Exp;
branches;
next	;
commitid	X1FKtc2EAz7Jz3ex;

4.3.4.1
date	2009.09.30.22.30.53;	author jlee;	state Exp;
branches;
next	;

4.1.1.1
date	96.11.05.09.41.31;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.02.12;	author nturton;	state Exp;
branches;
next	;

4.1.4.1
date	97.09.09.13.34.18;	author mstphens;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.12.36;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.04.22;	author nturton;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	98.09.24.12.36.50;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > $.Source.PMF.realtime

; *****************************************************************************
;
;       SWI OS_ResyncTime
;
; in:   r0  = 0 - Real time clock soft copy only
;       r0 <> 0   reserved for future expansion
; out:  registers preserved
;    or VS and R0 -> error
;
ResyncTimeSWI ROUT
        Push    "R1, R12, LR"
        BYTEWS  WsPtr
        BL      RTCToRealTime
        MOVVC   R1, #Service_RTCSynchronised
        BLVC    Issue_Service
        Pull    "R1, R12, LR"
        B       SLVK_TestV

; *****************************************************************************
;
;       SetTime - Write the CMOS clock time and update 5-byte RealTime
;
; in:   UTC time:
;       R0 = hours
;       R1 = minutes
;       R2 = day of month (1-based)
;       R3 = month (1-based)
;       R5 = year (lo)
;       R6 = year (hi)
;       R7 = seconds
;       R8 = centiseconds
; out:  registers preserved
;    or VS and R0 -> error
;
;       If R0,R2,R5 or R6 is -1 then the time,date,year,century (respectively) will not be written.
;       However if R2=-1, R5 & R6 will also be -1, so only R0 (for time) and R2 (for D/M/Y) need checking.
;

SetTime ROUT
        Push    "R4, R9, LR"

        ; Prepare BCD data on stack
        ASSERT  (RTCTimeStruct_Size :AND: 3)=0
        SUB     R13, R13, #RTCTimeStruct_Size
        MOV     R9, R13
        MOV     R4, R0

        ; Ensure struct matches our setting order
        ASSERT  RTCTimeStruct_Centiseconds = 0
        ASSERT  RTCTimeStruct_Seconds = 1
        ASSERT  RTCTimeStruct_Minutes = 2
        ASSERT  RTCTimeStruct_Hours = 3
        ASSERT  RTCTimeStruct_DayOfMonth = 4
        ASSERT  RTCTimeStruct_Month = 5
        ASSERT  RTCTimeStruct_YearLO = 6
        ASSERT  RTCTimeStruct_YearHI = 7

        ; Are we setting the time?
        CMP     R4, #-1
        STREQ   R4, [R9], #4 ; Conveniently, 4 bytes of time info
        BEQ     %FT11
        MOV     R0, R8
        BL      HTBS9
        MOV     R0, R7
        BL      HTBS9
        MOV     R0, R1
        BL      HTBS9
        MOV     R0, R4
        BL      HTBS9
11
        ; Are we setting the date?
        CMP     R2, #-1
        STREQ   R2, [R9], #4 ; Conveniently, 4 bytes of date info
        BEQ     %FT12
        MOV     R0, R2
        BL      HTBS9
        MOV     R0, R3
        BL      HTBS9
        MOV     R0, R5
        BL      HTBS9
        MOV     R0, R6
        BL      HTBS9
12
        MOV     R0, SP
        SWI     XRTC_Write              ; Try update hardware

        MOV     R0, R4
        BL      RegToRealTime           ; Update soft copy regardless

        CLRV
        ADD     SP, SP, #RTCTimeStruct_Size
        Pull    "R4, R9, PC"

; *****************************************************************************
;
;       ReadTime - Read the CMOS clock time
;
; in:   -
; out:  R0 = hours
;       R1 = minutes
;       R2 = day of month (1-based)
;       R3 = month (1-based)
;       R5 = year (lo)
;       R6 = year (hi)
;       R7 = seconds
;       R8 = centiseconds
;    or VS and R0 -> error

ReadTime ROUT
        Push    "LR"

        ; Receive BCD data on stack
        ASSERT  (RTCTimeStruct_Size :AND: 3)=0
        SUB     R13, R13, #RTCTimeStruct_Size
        MOV     R0, R13
        SWI     XRTC_Read
        ADDVS   R13, R13, #RTCTimeStruct_Size
        Pull    "PC",VS

        ; Now convert the BCD ordinals
        LDRB    R0, [R13, #RTCTimeStruct_Centiseconds]
        BL      BCDToHex
        MOV     R8, R0                  ; centiseconds
        LDRB    R0, [R13, #RTCTimeStruct_Seconds]
        BL      BCDToHex
        MOV     R7, R0                  ; seconds
        LDRB    R0, [R13, #RTCTimeStruct_Minutes]
        BL      BCDToHex
        MOV     R1, R0                  ; minutes
        LDRB    R0, [R13, #RTCTimeStruct_DayOfMonth]
        BL      BCDToHex
        MOV     R2, R0                  ; days
        LDRB    R0, [R13, #RTCTimeStruct_Month]
        BL      BCDToHex
        MOV     R3, R0                  ; months
        LDRB    R0, [R13, #RTCTimeStruct_YearLO]
        BL      BCDToHex
        MOV     R5, R0                  ; year lo
        LDRB    R0, [R13, #RTCTimeStruct_YearHI]
        BL      BCDToHex
        MOV     R6, R0                  ; year hi
        LDRB    R0, [R13, #RTCTimeStruct_Hours]
        BL      BCDToHex
                                        ; hours
        CLRV

        ; We're done with our stack data, remove it
        ADD     R13, R13, #RTCTimeStruct_Size
        Pull    "PC"

; *****************************************************************************
;
;       RTCToRealTime - Set RealTime from actual RTC
;
; in:   R12 -> BYTEWS
; out:  all registers preserved
;    or VS and R0 -> error
;

RTCToRealTime ROUT
        Push    "R0-R9, LR"
        BL      ReadTime                ; R0 := hours, R1 := minutes
                                        ; R2 := days, R3 := months
                                        ; R5 := year(lo), R6 := year(hi)
                                        ; R7 := seconds, R8 := centiseconds
        BVS     %FT10
        BL      ConvertTo5Byte
        BL      Store5ByteInRealTime
        CLRV
10
        STRVS   R0, [SP, #0]        
        Pull    "R0-R9, PC"

; *****************************************************************************
;
;       RegToRealTime - Set RealTime from a bunch of registers
;
; in:   R12 -> BYTEWS
;       R0-R3, R5-R8 = validated time and date
; out:  all registers preserved
;

RegToRealTime ROUT
        Push    "R0-R9, LR"
        BL      ConvertTo5Byte
        BL      Store5ByteInRealTime
        Pull    "R0-R9, PC"

; *****************************************************************************
;
;       Store5ByteInRealTime - put 5 byte centisecond UTC time into soft copy
;
; in:   R7 = low word of time
;       R8 = high byte of time
;       R12 -> BYTEWS
; out:  all registers preserved
;

Store5ByteInRealTime
        Push    "LR"
        PHPSEI                          ; disable IRQs for this bit
        STR     R7, RealTime +0
        STRB    R8, RealTime +4
        PLP
        Pull    "PC"

; *****************************************************************************
;
;       ConvertTo5Byte - Convert ordinals to 5 byte time
;
; in:   R12 -> BYTEWS
;       R0-R3, R5-R8 = time and date
; out:  R7 = low word
;       R8 = high byte
;    or R7 = R8 = -1 if conversion failed
;

ConvertTo5Byte ROUT
        Push    "LR"

        MOV     R4, R5                  ; R4 := year MOD 100
        MOV     R5, R6                  ; R5 := year DIV 100
        MOV     R6, R7                  ; R6 := seconds
        MOV     R7, R8                  ; R7 := centiseconds

        MOV     R9, #24
        SUB     R2, R2, #1              ; decrement day (day=1 => nowt to add)
        MLA     R0, R9, R2, R0          ; R0 = hours + day*24
        MOV     R9, #60
        MLA     R1, R0, R9, R1          ; R1 = mins + hours*60
        MLA     R6, R1, R9, R6          ; R6 = secs + mins*60
        MOV     R9, #100
        MLA     R7, R6, R9, R7          ; R7 = centisecs + secs*100

        ADR     R0, STMonths-4          ; Point to table (month = 1..12)
        LDR     R1, [R0, R3, LSL #2]    ; get word of offset
        ADD     R7, R7, R1              ; add to total

; if not had leap day in this year yet, then exclude this year from the
; leap day calculations

        CMP     R3, #3                  ; if month >= 3
        SBCS    R0, R4, #0              ; then R0,R1 = R4,R5
        MOVCC   R0, #99                 ; else R0,R1 = R4,R5 -1
        SBC     R1, R5, #0

; want (yl+100*yh) DIV 4 - (yl+100*yh) DIV 100 + (yl+100*yh) DIV 400
; = (yl DIV 4)+ (25*yh) - yh + (yh DIV 4)
; = (yl >> 2) + 24*yh + (yh >> 2)

        MOV     R0, R0, LSR #2          ; yl >> 2
        ADD     R0, R0, R1, LSR #2      ; + yh >> 2
        ADD     R0, R0, R1, LSL #4      ; + yh * 16
        ADD     R0, R0, R1, LSL #3      ; + yh * 8

; now subtract off the number of leap days in first 1900 years = 460

        SUBS    R0, R0, #460
        BCC     BadYear                 ; before 1900, so bad
        CMP     R0, #86                 ; if more than 86 days, then it's
        BCS     BadYear                 ; after 2248, so bad

        LDR     R9, =ticksperday        ; multiply by ticksperday and add to
        MLA     R7, R9, R0, R7          ; total (no overflow possible as this
                                        ; can never be more than 85+31 days)

; now add on (year-1900)*ticksperyear

        SUBS    R5, R5, #19             ; subtract off 1900
        BCC     BadYear
        MOV     R9, #100
        MLA     R4, R9, R5, R4          ; R4 = year-1900

        LDR     R0, =ticksperyear       ; lo word of amount to add on
        MOV     R1, #0                  ; hi word of amount to add on
        MOV     R8, #0                  ; hi word of result
10
        MOVS    R4, R4, LSR #1
        BCC     %FT15

        ADDS    R7, R7, R0              ; if bit set then add on amount
        ADCS    R8, R8, R1
        BCS     BadYear                 ; overflow => bad time value
15
        ADDS    R0, R0, R0              ; shift up amount
        ADCS    R1, R1, R1
        TEQ     R4, #0                  ; if still bits to add in
        BNE     %BT10                   ; then loop

        CMP     R8, #&100               ; R8 must only be a byte
        Pull    "PC",CC

BadYear
        MOV     R7, #-1
        MOV     R8, #-1
        Pull    "PC"

; *****************************************************************************

tickspersecond  * 100
ticksperminute  * tickspersecond * 60
ticksperhour    * ticksperminute * 60
ticksperday     * ticksperhour   * 24
ticksperyear    * ticksperday    * 365  ; &BBF81E00

STMonths
        DCD     &00000000       ; Jan
        DCD     &0FF6EA00       ; Feb
        DCD     &1E625200       ; Mar
        DCD     &2E593C00       ; Apr
        DCD     &3DCC5000       ; May
        DCD     &4DC33A00       ; Jun
        DCD     &5D364E00       ; Jul
        DCD     &6D2D3800       ; Aug
        DCD     &7D242200       ; Sep
        DCD     &8C973600       ; Oct
        DCD     &9C8E2000       ; Nov
        DCD     &AC013400       ; Dec
        DCD     &F0000000       ; terminator, must be less than this (+1)

        LTORG

        END
@


4.3
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@d19 150
d173 1
a175 6
        [ {FALSE}
Construct5Byte ROUT
        Push    R14
        B       Construct5ByteEntry
        ]

d177 1
a177 1
        Push    "R0-R9, R14"
d182 1
d185 3
d190 9
d200 1
a200 1
        Push    "R0-R9, R14"
d205 29
d235 1
a235 1
        Push    R14
a241 1
Construct5ByteEntry
d307 1
a307 1
        Pull    PC, CC
d312 1
a312 24
        Pull    PC


Store5ByteInRealTime
        Push    R14
        PHPSEI                          ; disable IRQs for this bit
        STR     R7, RealTime +0
        STRB    R8, RealTime +4

        [ :LNOT: AssemblingArthur :LAND: :LNOT: Module
; for now, also put into normal time

        LDRB    R0, TimerState
        TEQ     R0, #5

        ADREQ   R3, TimerAlpha +0
        ADRNE   R3, TimerBeta +0

        STR     R7, [R3]
        STRB    R8, [R3, #4]
        ]
        PLP

        Pull    PC
d323 13
a335 14
        &       &00000000       ; Jan
        &       &0FF6EA00       ; Feb
        &       &1E625200       ; Mar
        &       &2E593C00       ; Apr
        &       &3DCC5000       ; May
        &       &4DC33A00       ; Jun
        &       &5D364E00       ; Jul
        &       &6D2D3800       ; Aug
        &       &7D242200       ; Sep
        &       &8C973600       ; Oct
        &       &9C8E2000       ; Nov
        &       &AC013400       ; Dec
        &       &F0000000       ; terminator, must be less than this (+1)

@


4.3.2.1
log
@Merge Cortex kernel into HAL branch
Detail:
  This is a full merge of the Cortex kernel back into the HAL branch. Since the Cortex kernel is/was just a superset of the HAL branch, at this point in time both branches are identical.
  Main features the HAL branch gains from this merge:
  - ARMv6/ARMv7 support
  - High processor vectors/zero page relocation support
  - objasm 4 warning fixes
  - Improved HAL related functionality:
    - Support for HAL-driven RTCs instead of kernel-driven IIC based ones
    - Support for arbitrary size machine IDs
    - Support for multiple IIC busses
    - Support for any HAL size, instead of hardcoded 64k size
    - Probably some other stuff I've forgotten
  - Probably a few bug fixes here and there
Admin:
  Tested on BB-xM & Iyonix.
  Was successfully flashed to ROM on an Iyonix to test the Cortex branch implementation of the 2010 RTC bug fix.
  IOMD build untested - but has been known to work in the past.


Version 5.35, 4.79.2.123. Tagged as 'Kernel-5_35-4_79_2_123'
@
text
@a36 3
        ; R0 will be negative on error. Just skip the update.
        CMP     R0,#0
        Pull    "R0-R9, PC",LT
@


4.3.2.2
log
@Rationalise some old switches.
Export less in hdr:RISCOS.
Delete unused GetDecimalPair routine.
Move CheckYear with other RTC stuff out of PMF/osword.
Hide DebugROMInit and DebugROMErrors in release (even numbered) versions.

Version 5.35, 4.79.2.127. Tagged as 'Kernel-5_35-4_79_2_127'
@
text
@a18 110
;       CheckYear - Check for year wrap (year in RTC <> year "YearCMOS")
;       and for leap year fudging
;

CheckYear ROUT
        Push    "R0,R1,R2,R14"
        LDR     R0, =ZeroPage
        LDR     R0, [R0, #RTCFitted]
 [ HAL
        CMP     R0, #2048
  [ RTCSupport
        BLO     %FT8
  |
        BLO     %FT15
  ] 
         ; Ask the RTC what it thinks the year is
        Push    "R3,R10,R12"
        MOV     R10, R0
        SUB     R13, R13, #RTCTimeStruct_BCD_Size
        MOV     R1, R13
        ADRL    R2, HALRTC_IICOp
        MOV     LR, PC
        LDR     PC, [R0, #HALDevice_RTCReadTime]
        ; Did we succeed?
        CMP     R0, #RTCRetCode_OK
        LDRB    R0, [R13, #RTCTimeStruct_BCD_YearLO]
        LDRB    R1, [R13, #RTCTimeStruct_BCD_YearHI]
        ADD     R13, R13, #RTCTimeStruct_BCD_Size
        LDRB    R2, [R10, #HALDevice_RTCFormatFlags]
        Pull    "R3,R10,R12"
        BNE     %FT15
        ASSERT  RTCFormatFlags_BCD_NeedsYearHelp = 1 :SHL: 2
        ASSERT  RTCFormatFlags_BCD_YearLOIsGood = 1 :SHL: 3
        AND     LR, R2, #RTCFormatFlags_BCD_NeedsYearHelp + RTCFormatFlags_BCD_YearLOIsGood
        MOVS    LR, LR, ROR #3 ; CC = good, CS+EQ = 2 bit, CS+NE = BCD
        ADDCS   R1, LR, #RTCAddressPHI+1 ; 2 bit=RTCAddressPHI+1, BCD!=RTCAddressPHI+1
        BCS     %FT9
        ; Year is reliable; convert R0 & R1 to ints and update CMOS if necessary.
        BL      BCDToHex
        MOV     R2, R1
        MOV     R1, R0 ; YearLO
        MOV     R0, #YearCMOS
        BL      Read
        CMP     R0, R1
        MOVNE   R0, #YearCMOS
        BLNE    Write
        MOV     R0, R2
        BL      BCDToHex
        MOV     R1, R0 ; YearHI
        MOV     R0, #YearCMOS+1
        BL      Read
        CMP     R0, R1
        MOVNE   R0, #YearCMOS+1
        BLNE    Write
        B       %FT15
8
 ] ; HAL
 [ RTCSupport :LOR: :LNOT: HAL
        TEQ     R0, #RTCAddressPHI
        MOVEQ   R1, #5
        MOVNE   R1, #6                  ; year address (dependant on RTC)
        STRB    R1, [R13, #-4]!
        MOV     R1, R13
        ORR     R0, R0, #1:SHL:29
        MOV     R2, #1
        BL      IIC_Op
        ORR     R0, R0, #1
        BL      IIC_Op
        AND     R1, R0, #&FF
        LDRB    R0, [R13], #4

        TEQ     R1, #RTCAddressPHI+1
 ] ; RTCSupport :LOR: :LNOT: HAL
9
        MOVEQ   R0, R0, LSR #6          ; R0= year MOD 4.
        BLNE    BCDToHex
        MOV     R2, R0                  ; remember RTC value
        MOV     R0, #YearCMOS
        BL      Read
        TEQ     R1, #RTCAddressPHI+1
        ANDEQ   R1, R0, #3
        MOVNE   R1, R0
        MOVEQ   R14,#4
        MOVNE   R14,#100

        SUBS    R2, R2, R1              ; same year ?
        Pull    "R0,R1,R2,PC", EQ       ; [yes, so no bother]
        ADDCC   R2, R2, R14             ; if lower, then must be carry
        ADD     R2, R0, R2              ; new year value
        CMP     R2, #100
        BCC     %FT10                   ; no carry thru to next century

        SUB     R2, R2, #100
        MOV     R0, #YearCMOS +1
        BL      Read
        ADD     R1, R0, #1
        TEQ     R1, #100
        MOVEQ   R1, #0                  ; wrap century
        MOV     R0, #YearCMOS +1
        BL      Write
10
        MOV     R1, R2
        MOV     R0, #YearCMOS
        BL      Write
15
        BL      RTCToRealTime
        Pull    "R0,R1,R2,PC"

; *****************************************************************************
;
@


4.3.2.3
log
@Fixes to NeedsYearHelp clock case
Want LSR not ROR otherwise in the need help + HAL + 2 bit case the IIC address in R1 comes out as &800000A1.
Added HAL device ids for a couple more RTC devices.

Version 5.35, 4.79.2.199. Tagged as 'Kernel-5_35-4_79_2_199'
@
text
@d34 1
a34 1
        ; Ask the RTC what it thinks the year is
d53 1
a53 1
        MOVS    LR, LR, LSR #3 ; CC = good, CS = need help (EQ = 2 bit, NE = BCD)
a90 1
        MOVEQ   R0, R0, LSR #6          ; R0= year MOD 4.
d93 1
@


4.3.2.4
log
@Migrate RTC driver out of the kernel
The kernel will use RTC_Read and RTC_Write to access the hardware clock, while maintaining the software clock as before.
Makefile: header export is now in the RTC module's sources
KernelWS: remove RTCFitted flag
NewReset: sync the time after the module init
i2cutils: deleted clock chip code
osinit: move OS_ResyncTime into PMF/realtime
realtime: mostly packages up ordinals and calls the respective SWI

Tested on IOMD softload.

Version 5.35, 4.79.2.202. Tagged as 'Kernel-5_35-4_79_2_202'
@
text
@d19 2
a20 1
;       SWI OS_ResyncTime
a21 13
; in:   r0  = 0 - Real time clock soft copy only
;       r0 <> 0   reserved for future expansion
; out:  registers preserved
;    or VS and R0 -> error
;
ResyncTimeSWI ROUT
        Push    "R1, R12, LR"
        BYTEWS  WsPtr
        BL      RTCToRealTime
        MOVVC   R1, #Service_RTCSynchronised
        BLVC    Issue_Service
        Pull    "R1, R12, LR"
        B       SLVK_TestV
d23 42
a64 56
; *****************************************************************************
;
;       SetTime - Write the CMOS clock time and update 5-byte RealTime
;
; in:   UTC time:
;       R0 = hours
;       R1 = minutes
;       R2 = day of month (1-based)
;       R3 = month (1-based)
;       R5 = year (lo)
;       R6 = year (hi)
;       R7 = seconds
;       R8 = centiseconds
; out:  registers preserved
;    or VS and R0 -> error
;
;       If R0,R2,R5 or R6 is -1 then the time,date,year,century (respectively) will not be written.
;       However if R2=-1, R5 & R6 will also be -1, so only R0 (for time) and R2 (for D/M/Y) need checking.
;

SetTime ROUT
        Push    "R4, R9, LR"

        ; Prepare BCD data on stack
        ASSERT  (RTCTimeStruct_Size :AND: 3)=0
        SUB     R13, R13, #RTCTimeStruct_Size
        MOV     R9, R13
        MOV     R4, R0

        ; Ensure struct matches our setting order
        ASSERT  RTCTimeStruct_Centiseconds = 0
        ASSERT  RTCTimeStruct_Seconds = 1
        ASSERT  RTCTimeStruct_Minutes = 2
        ASSERT  RTCTimeStruct_Hours = 3
        ASSERT  RTCTimeStruct_DayOfMonth = 4
        ASSERT  RTCTimeStruct_Month = 5
        ASSERT  RTCTimeStruct_YearLO = 6
        ASSERT  RTCTimeStruct_YearHI = 7

        ; Are we setting the time?
        CMP     R4, #-1
        STREQ   R4, [R9], #4 ; Conveniently, 4 bytes of time info
        BEQ     %FT11
        MOV     R0, R8
        BL      HTBS9
        MOV     R0, R7
        BL      HTBS9
        MOV     R0, R1
        BL      HTBS9
        MOV     R0, R4
        BL      HTBS9
11
        ; Are we setting the date?
        CMP     R2, #-1
        STREQ   R2, [R9], #4 ; Conveniently, 4 bytes of date info
        BEQ     %FT12
a65 46
        BL      HTBS9
        MOV     R0, R3
        BL      HTBS9
        MOV     R0, R5
        BL      HTBS9
        MOV     R0, R6
        BL      HTBS9
12
        MOV     R0, SP
        SWI     XRTC_Write              ; Try update hardware

        MOV     R0, R4
        BL      RegToRealTime           ; Update soft copy regardless

        CLRV
        ADD     SP, SP, #RTCTimeStruct_Size
        Pull    "R4, R9, PC"

; *****************************************************************************
;
;       ReadTime - Read the CMOS clock time
;
; in:   -
; out:  R0 = hours
;       R1 = minutes
;       R2 = day of month (1-based)
;       R3 = month (1-based)
;       R5 = year (lo)
;       R6 = year (hi)
;       R7 = seconds
;       R8 = centiseconds
;    or VS and R0 -> error

ReadTime ROUT
        Push    "LR"

        ; Receive BCD data on stack
        ASSERT  (RTCTimeStruct_Size :AND: 3)=0
        SUB     R13, R13, #RTCTimeStruct_Size
        MOV     R0, R13
        SWI     XRTC_Read
        ADDVS   R13, R13, #RTCTimeStruct_Size
        Pull    "PC",VS

        ; Now convert the BCD ordinals
        LDRB    R0, [R13, #RTCTimeStruct_Centiseconds]
d67 59
a125 27
        MOV     R8, R0                  ; centiseconds
        LDRB    R0, [R13, #RTCTimeStruct_Seconds]
        BL      BCDToHex
        MOV     R7, R0                  ; seconds
        LDRB    R0, [R13, #RTCTimeStruct_Minutes]
        BL      BCDToHex
        MOV     R1, R0                  ; minutes
        LDRB    R0, [R13, #RTCTimeStruct_DayOfMonth]
        BL      BCDToHex
        MOV     R2, R0                  ; days
        LDRB    R0, [R13, #RTCTimeStruct_Month]
        BL      BCDToHex
        MOV     R3, R0                  ; months
        LDRB    R0, [R13, #RTCTimeStruct_YearLO]
        BL      BCDToHex
        MOV     R5, R0                  ; year lo
        LDRB    R0, [R13, #RTCTimeStruct_YearHI]
        BL      BCDToHex
        MOV     R6, R0                  ; year hi
        LDRB    R0, [R13, #RTCTimeStruct_Hours]
        BL      BCDToHex
                                        ; hours
        CLRV

        ; We're done with our stack data, remove it
        ADD     R13, R13, #RTCTimeStruct_Size
        Pull    "PC"
a132 1
;    or VS and R0 -> error
d135 6
d142 1
a142 1
        Push    "R0-R9, LR"
d147 3
a149 1
        BVS     %FT10
a151 3
        CLRV
10
        STRVS   R0, [SP, #0]        
a153 9
; *****************************************************************************
;
;       RegToRealTime - Set RealTime from a bunch of registers
;
; in:   R12 -> BYTEWS
;       R0-R3, R5-R8 = validated time and date
; out:  all registers preserved
;

d155 1
a155 1
        Push    "R0-R9, LR"
a159 29
; *****************************************************************************
;
;       Store5ByteInRealTime - put 5 byte centisecond UTC time into soft copy
;
; in:   R7 = low word of time
;       R8 = high byte of time
;       R12 -> BYTEWS
; out:  all registers preserved
;

Store5ByteInRealTime
        Push    "LR"
        PHPSEI                          ; disable IRQs for this bit
        STR     R7, RealTime +0
        STRB    R8, RealTime +4
        PLP
        Pull    "PC"

; *****************************************************************************
;
;       ConvertTo5Byte - Convert ordinals to 5 byte time
;
; in:   R12 -> BYTEWS
;       R0-R3, R5-R8 = time and date
; out:  R7 = low word
;       R8 = high byte
;    or R7 = R8 = -1 if conversion failed
;

d161 1
a161 1
        Push    "LR"
d168 1
d234 1
a234 1
        Pull    "PC",CC
d239 24
a262 1
        Pull    "PC"
d273 14
a286 13
        DCD     &00000000       ; Jan
        DCD     &0FF6EA00       ; Feb
        DCD     &1E625200       ; Mar
        DCD     &2E593C00       ; Apr
        DCD     &3DCC5000       ; May
        DCD     &4DC33A00       ; Jun
        DCD     &5D364E00       ; Jul
        DCD     &6D2D3800       ; Aug
        DCD     &7D242200       ; Sep
        DCD     &8C973600       ; Oct
        DCD     &9C8E2000       ; Nov
        DCD     &AC013400       ; Dec
        DCD     &F0000000       ; terminator, must be less than this (+1)
@


4.3.4.1
log
@Update Cortex kernel to cope correctly with HAL RTC errors
Detail:
  The kernel will now attempt to cope with errors returned by HAL RTC devices - For RTC read operations, instead of just loading random garbage, the bad result will now be ignored and the soft 5-byte time left unaltered.
Admin:
  Tested on rev C2 beagleboard. Year now correctly defaults to 1970 instead of 1900 if the OMAP3 RTC driver returns an error because the RTC isn't running yet.


Version 5.35, 4.79.2.98.2.13. Tagged as 'Kernel-5_35-4_79_2_98_2_13'
@
text
@a36 3
        ; R0 will be negative on error. Just skip the update.
        CMP     R0,#0
        Pull    "R0-R9, PC",LT
@


4.2
log
@Spinner branch merged.
Bandwidth limit for 7500FE fixed.
RO371Timings flag set to :LNOT:STB

Version 4.64. Tagged as 'Kernel-4_64'
@
text
@a173 152
        [ {FALSE}
; *****************************************************************************
;
;       DecodeAcornTime - Convert from 5-byte cs representation to
;                         "01:23:45 on 01-Jan-1988<0D>" format
;
; in:   R1 -> block
;       [R1, #1..5] = 5-byte centisecond representation
;
; out:  [R1, #0..23] = string representation
;

OsWord0EEpsilon
DecodeAcornTime ROUT
        ADD     R0, R1, #1              ; R0 -> 5 bytes of centiseconds
        MOV     R2, #24
        ADR     R3, AcornTimeFormat
        B       OsWord0EDandT           ; needs to be recoded if re-included

AcornTimeFormat
        =       "%24:%mi:%se on %dy-%m3-%ce%yr", 0
        ALIGN

        LTORG

; *****************************************************************************
;
;       EncodeAcornTime - Convert string representation (as above) into
;                         5-byte centisecond value
;
; in:   R1 -> block
;       [R1, #1..24] = string representation
;
; out:  [R1, #0..4] = 5 byte cs representation
;

OsWord0EZeta
EncodeAcornTime ROUT
        Push    "R7-R10"

; Firstly, the months (into R3)

        LDRB    R0, [R1, #16]           ; Get first char and lowercase it
        ORR     R0, R0, #&20
        LDRB    R2, [R1, #16+1]         ; And the second
        ORR     R2, R2, #&20
        LDRB    R3, [R1, #16+2]         ; And the third
        ORR     R3, R3, #&20
        ORR     R0, R0, R2, LSL #8      ; Make a word of the chars
        ORR     R0, R0, R3, LSL #16     ; eg. 0naj, 0bef etc.

        MOV     R3, #0
        ADRL    R2, MonthNameTable
10      ADD     R3, R3, #1
        CMP     R3, #13
        BCS     BadEncodeTime
        LDR     R4, [R2], #4            ; Test month name against list
        TEQ     R4, R0
        BNE     %BT10

; Ok, suss the years

        MOV     R10, #20                ; Read pair from hundreds/thousands
        BL      GetPair
        BCS     BadEncodeTime
        MOV     R5, R0

        MOV     R10, #20+2              ; And from tens/years
        BL      GetPair
        BCS     BadEncodeTime
        MOV     R4, R0

; The days, please

        MOV     R10, #13                ; Read pair from days field
        BL      GetPair
        BCS     BadEncodeTime
        MOV     R2, R0

; Then the seconds

        MOV     R10, #7                 ; Read pair from seconds field
        BL      GetPair
        CMPCC   R0, #60                 ; 00..59 valid
        BCS     BadEncodeTime
        MOV     R6, R0

; Now the minutes

        MOV     R10, #4                 ; Read pair from minutes field
        BL      GetPair
        CMPCC   R0, #60                 ; 00..59 valid
        BCS     BadEncodeTime
        MOV     R9, R0                  ; Can't disturb R1 yet !

; Lastly the hours

        MOV     R10, #1                 ; Read pair from hours field
        BL      GetPair
        CMPCC   R0, #24                 ; 00..23 valid
        BCS     BadEncodeTime

        MOV     R10, R1
        MOV     R1, R9                  ; Get minutes back
        MOV     R7, #0                  ; Centiseconds = 0
        BL      Construct5Byte          ; Has R0-R7 parameters; R7,R8 on exit
EncodeExit
        STRB    R7, [R10, #0]
        MOV     R7, R7, LSR #8
        STRB    R7, [R10, #1]
        MOV     R7, R7, LSR #8
        STRB    R7, [R10, #2]
        MOV     R7, R7, LSR #8
        STRB    R7, [R10, #3]
        STRB    R8, [R10, #4]

        Pull    "R7-R10"
        B       OsWord0Eend


BadEncodeTime
        MOV     R8, #-1                 ; Set date to out-of-bounds value
        MOV     R7, #-1                 ; (This would be a command file)
        MOV     R10, R1
        B       EncodeExit

; *****************************************************************************
;
;       GetPair - Get a pair of decimal digits
;
; in:   [R1,R10], [R1,R10+1] contain digits
;
; out:  C=0 => R0 = 10*msdigit + lsdigit
;       C=1 => invalid pair of digits
;

GetPair ROUT
        Push    "R2, R10, R14"

        LDRB    R2, [R10, R1]!          ; Get msdigit and convert to decimal
        SUB     R2, R2, #"0"
        CMP     R2, #10                 ; Keep CState for exit

        LDRB    R0, [R10, #1]           ; Get lsdigit and convert to decimal
        SUB     R0, R0, #"0"
        CMPCC   R0, #10

        ADD     R2, R2, R2, LSL #2      ; Multiply msdigit by 5
        ADD     R0, R0, R2, LSL #1      ; complete mult by 10 and add

        Pull    "R2, R10, PC"
        ]
@


4.1
log
@Initial revision
@
text
@a40 1
        [ {FALSE}                       ; not used
a45 1
        ]
@


4.1.4.1
log
@ 1 Simplify source by removing various long-standing compile flags
   and pre-Medusa h/w support

 2 Fix bug with Pages_Unsafe/Pages_Safe page moving for StrongARM
   (interrupt hole) - also better performance for StrongARM

 3 Improve perfromance of physical memory clear for StrongARM
   (make sure it uses burst write for STM)

 4 Suspend Chocolate task switching for StrongARM if SALDMIBbroken
   is TRUE
@
text
@d25 5
d41 7
d137 12
d176 152
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.7.2
log
@Support added for 24LC128 16K EEPROM device.
OS_NVMemory SWI added to allow block operations on non-volatile memory.
Kernel can clock memory device at 400kHz for greater throughput.
Safeguards added to stop the device being accessed when the clock is changed
and the device doesn't have an RTC.
Changed to use srccommit.

Version 4.63, 1.1.2.2. Tagged as 'Kernel-4_63-1_1_2_2'
@
text
@d41 1
d47 1
@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
