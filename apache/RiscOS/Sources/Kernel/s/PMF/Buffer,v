head	4.4;
access;
symbols
	Kernel-6_14:4.4
	Kernel-6_01-3:4.4
	Kernel-6_13:4.4
	Kernel-6_12:4.4
	Kernel-6_11:4.4
	Kernel-6_10:4.4
	Kernel-6_09:4.4
	Kernel-6_08-4_129_2_10:4.4
	Kernel-6_08-4_129_2_9:4.4
	Kernel-6_08:4.4
	Kernel-6_07:4.4
	Kernel-6_06:4.4
	Kernel-6_05-4_129_2_8:4.4
	Kernel-6_05:4.4
	Kernel-6_04:4.4
	Kernel-6_03:4.4
	Kernel-6_01-2:4.4
	Kernel-6_01-4_146_2_1:4.4
	Kernel-6_02:4.4
	Kernel-6_01-1:4.4
	Kernel-6_01:4.4
	Kernel-6_00:4.4
	Kernel-5_99:4.4
	Kernel-5_98:4.4
	Kernel-5_97-4_129_2_7:4.4
	Kernel-5_97:4.4
	Kernel-5_96:4.4
	Kernel-5_95:4.4
	Kernel-5_94:4.4
	Kernel-5_93:4.4
	Kernel-5_92:4.4
	Kernel-5_91:4.4
	Kernel-5_90:4.4
	Kernel-5_89-4_129_2_6:4.4
	Kernel-5_89:4.4
	Kernel-5_88-4_129_2_5:4.4
	Kernel-5_88-4_129_2_4:4.4
	Kernel-5_88:4.4
	Kernel-5_87:4.4
	Kernel-5_86-4_129_2_3:4.4
	Kernel-5_86-4_129_2_2:4.4
	Kernel-5_86-4_129_2_1:4.4
	Kernel-5_86:4.4
	SMP:4.4.0.2
	SMP_bp:4.4
	Kernel-5_85:4.4
	Kernel-5_54-1:4.4
	Kernel-5_84:4.4
	Kernel-5_83:4.4
	Kernel-5_82:4.4
	Kernel-5_81:4.4
	Kernel-5_80:4.4
	Kernel-5_79:4.4
	Kernel-5_78:4.4
	Kernel-5_77:4.4
	Kernel-5_76:4.4
	Kernel-5_75:4.4
	Kernel-5_74:4.4
	Kernel-5_73:4.4
	Kernel-5_72:4.4
	Kernel-5_71:4.4
	Kernel-5_70:4.4
	Kernel-5_69:4.4
	Kernel-5_68:4.4
	Kernel-5_67:4.4
	Kernel-5_66:4.4
	Kernel-5_65:4.4
	Kernel-5_64:4.4
	Kernel-5_63:4.4
	Kernel-5_62:4.4
	Kernel-5_61:4.4
	Kernel-5_60:4.4
	Kernel-5_59:4.4
	Kernel-5_58:4.4
	Kernel-5_57:4.4
	Kernel-5_56:4.4
	Kernel-5_55:4.4
	Kernel-5_54:4.4
	Kernel-5_53:4.4
	Kernel-5_52:4.4
	Kernel-5_51:4.4
	Kernel-5_50:4.4
	Kernel-5_49:4.4
	HAL_merge:4.2.2.2
	Kernel-5_48:4.3
	Kernel-5_35-4_79_2_327:4.2.2.2
	Kernel-5_35-4_79_2_326:4.2.2.2
	Kernel-5_35-4_79_2_325:4.2.2.2
	Kernel-5_35-4_79_2_324:4.2.2.2
	Kernel-5_35-4_79_2_323:4.2.2.2
	Kernel-5_35-4_79_2_322:4.2.2.2
	Kernel-5_35-4_79_2_321:4.2.2.2
	Kernel-5_35-4_79_2_320:4.2.2.2
	Kernel-5_35-4_79_2_319:4.2.2.2
	Kernel-5_35-4_79_2_318:4.2.2.2
	Kernel-5_35-4_79_2_317:4.2.2.2
	Kernel-5_35-4_79_2_316:4.2.2.2
	Kernel-5_35-4_79_2_315:4.2.2.2
	Kernel-5_35-4_79_2_314:4.2.2.2
	Kernel-5_35-4_79_2_313:4.2.2.2
	Kernel-5_35-4_79_2_312:4.2.2.2
	Kernel-5_35-4_79_2_311:4.2.2.2
	Kernel-5_35-4_79_2_310:4.2.2.2
	Kernel-5_35-4_79_2_309:4.2.2.2
	Kernel-5_35-4_79_2_308:4.2.2.2
	Kernel-5_35-4_79_2_307:4.2.2.2
	Kernel-5_35-4_79_2_306:4.2.2.2
	Kernel-5_35-4_79_2_305:4.2.2.2
	Kernel-5_35-4_79_2_304:4.2.2.2
	Kernel-5_35-4_79_2_303:4.2.2.2
	Kernel-5_35-4_79_2_302:4.2.2.2
	Kernel-5_35-4_79_2_301:4.2.2.2
	Kernel-5_35-4_79_2_300:4.2.2.2
	Kernel-5_35-4_79_2_299:4.2.2.2
	Kernel-5_35-4_79_2_298:4.2.2.2
	Kernel-5_35-4_79_2_297:4.2.2.2
	Kernel-5_35-4_79_2_296:4.2.2.2
	Kernel-5_35-4_79_2_295:4.2.2.2
	Kernel-5_35-4_79_2_294:4.2.2.2
	Kernel-5_35-4_79_2_293:4.2.2.2
	Kernel-5_35-4_79_2_292:4.2.2.2
	Kernel-5_35-4_79_2_291:4.2.2.2
	Kernel-5_35-4_79_2_290:4.2.2.2
	Kernel-5_35-4_79_2_289:4.2.2.2
	Kernel-5_35-4_79_2_288:4.2.2.2
	Kernel-5_35-4_79_2_287:4.2.2.2
	Kernel-5_35-4_79_2_286:4.2.2.2
	Kernel-5_35-4_79_2_285:4.2.2.2
	Kernel-5_35-4_79_2_284:4.2.2.2
	Kernel-5_35-4_79_2_283:4.2.2.2
	Kernel-5_35-4_79_2_282:4.2.2.2
	Kernel-5_35-4_79_2_281:4.2.2.2
	Kernel-5_35-4_79_2_280:4.2.2.2
	Kernel-5_35-4_79_2_279:4.2.2.2
	Kernel-5_35-4_79_2_278:4.2.2.2
	Kernel-5_35-4_79_2_277:4.2.2.2
	Kernel-5_35-4_79_2_276:4.2.2.2
	Kernel-5_35-4_79_2_275:4.2.2.2
	Kernel-5_35-4_79_2_274:4.2.2.2
	Kernel-5_35-4_79_2_273:4.2.2.2
	Kernel-5_35-4_79_2_272:4.2.2.2
	Kernel-5_35-4_79_2_271:4.2.2.2
	Kernel-5_35-4_79_2_270:4.2.2.2
	Kernel-5_35-4_79_2_269:4.2.2.2
	Kernel-5_35-4_79_2_268:4.2.2.2
	Kernel-5_35-4_79_2_267:4.2.2.2
	Kernel-5_35-4_79_2_266:4.2.2.2
	Kernel-5_35-4_79_2_265:4.2.2.2
	Kernel-5_35-4_79_2_264:4.2.2.2
	Kernel-5_35-4_79_2_263:4.2.2.2
	Kernel-5_35-4_79_2_262:4.2.2.2
	Kernel-5_35-4_79_2_261:4.2.2.2
	Kernel-5_35-4_79_2_260:4.2.2.2
	Kernel-5_35-4_79_2_259:4.2.2.2
	Kernel-5_35-4_79_2_258:4.2.2.2
	Kernel-5_35-4_79_2_257:4.2.2.2
	Kernel-5_35-4_79_2_256:4.2.2.2
	Kernel-5_35-4_79_2_255:4.2.2.2
	Kernel-5_35-4_79_2_254:4.2.2.2
	Kernel-5_35-4_79_2_253:4.2.2.2
	Kernel-5_35-4_79_2_252:4.2.2.2
	Kernel-5_35-4_79_2_251:4.2.2.2
	Kernel-5_35-4_79_2_250:4.2.2.2
	Kernel-5_35-4_79_2_249:4.2.2.2
	Kernel-5_35-4_79_2_248:4.2.2.2
	Kernel-5_35-4_79_2_247:4.2.2.2
	Kernel-5_35-4_79_2_246:4.2.2.2
	Kernel-5_35-4_79_2_245:4.2.2.2
	Kernel-5_35-4_79_2_244:4.2.2.2
	Kernel-5_35-4_79_2_243:4.2.2.2
	Kernel-5_35-4_79_2_242:4.2.2.2
	Kernel-5_35-4_79_2_241:4.2.2.2
	Kernel-5_35-4_79_2_240:4.2.2.2
	Kernel-5_35-4_79_2_239:4.2.2.2
	Kernel-5_35-4_79_2_238:4.2.2.2
	Kernel-5_35-4_79_2_237:4.2.2.2
	Kernel-5_35-4_79_2_236:4.2.2.2
	Kernel-5_35-4_79_2_235:4.2.2.2
	Kernel-5_35-4_79_2_234:4.2.2.2
	Kernel-5_35-4_79_2_233:4.2.2.2
	Kernel-5_35-4_79_2_232:4.2.2.2
	Kernel-5_35-4_79_2_231:4.2.2.2
	Kernel-5_35-4_79_2_230:4.2.2.2
	Kernel-5_35-4_79_2_229:4.2.2.2
	Kernel-5_35-4_79_2_228:4.2.2.2
	Kernel-5_35-4_79_2_227:4.2.2.2
	Kernel-5_35-4_79_2_226:4.2.2.2
	Kernel-5_35-4_79_2_225:4.2.2.2
	Kernel-5_35-4_79_2_224:4.2.2.2
	Kernel-5_35-4_79_2_223:4.2.2.2
	Kernel-5_35-4_79_2_222:4.2.2.2
	Kernel-5_35-4_79_2_221:4.2.2.2
	Kernel-5_35-4_79_2_220:4.2.2.2
	Kernel-5_35-4_79_2_219:4.2.2.2
	Kernel-5_35-4_79_2_218:4.2.2.2
	Kernel-5_35-4_79_2_217:4.2.2.2
	Kernel-5_35-4_79_2_216:4.2.2.2
	Kernel-5_35-4_79_2_215:4.2.2.2
	Kernel-5_35-4_79_2_214:4.2.2.2
	Kernel-5_35-4_79_2_213:4.2.2.2
	Kernel-5_35-4_79_2_212:4.2.2.2
	Kernel-5_35-4_79_2_211:4.2.2.2
	Kernel-5_35-4_79_2_210:4.2.2.2
	Kernel-5_35-4_79_2_209:4.2.2.2
	Kernel-5_35-4_79_2_208:4.2.2.2
	Kernel-5_35-4_79_2_207:4.2.2.2
	Kernel-5_35-4_79_2_206:4.2.2.2
	Kernel-5_35-4_79_2_205:4.2.2.2
	Kernel-5_35-4_79_2_204:4.2.2.2
	Kernel-5_35-4_79_2_203:4.2.2.2
	Kernel-5_35-4_79_2_202:4.2.2.2
	Kernel-5_35-4_79_2_201:4.2.2.2
	Kernel-5_35-4_79_2_200:4.2.2.2
	Kernel-5_35-4_79_2_199:4.2.2.2
	Kernel-5_35-4_79_2_198:4.2.2.2
	Kernel-5_35-4_79_2_197:4.2.2.2
	Kernel-5_35-4_79_2_196:4.2.2.2
	Kernel-5_35-4_79_2_195:4.2.2.2
	Kernel-5_35-4_79_2_194:4.2.2.2
	Kernel-5_35-4_79_2_193:4.2.2.2
	Kernel-5_35-4_79_2_192:4.2.2.2
	Kernel-5_35-4_79_2_191:4.2.2.2
	Kernel-5_35-4_79_2_190:4.2.2.2
	Kernel-5_35-4_79_2_189:4.2.2.2
	Kernel-5_35-4_79_2_188:4.2.2.2
	Kernel-5_35-4_79_2_187:4.2.2.2
	Kernel-5_35-4_79_2_186:4.2.2.2
	Kernel-5_35-4_79_2_185:4.2.2.2
	Kernel-5_35-4_79_2_184:4.2.2.2
	Kernel-5_35-4_79_2_183:4.2.2.2
	Kernel-5_35-4_79_2_182:4.2.2.2
	Kernel-5_35-4_79_2_181:4.2.2.2
	Kernel-5_35-4_79_2_180:4.2.2.2
	Kernel-5_35-4_79_2_179:4.2.2.2
	Kernel-5_35-4_79_2_178:4.2.2.2
	Kernel-5_35-4_79_2_177:4.2.2.2
	Kernel-5_35-4_79_2_176:4.2.2.2
	Kernel-5_35-4_79_2_175:4.2.2.2
	Kernel-5_35-4_79_2_174:4.2.2.2
	Kernel-5_35-4_79_2_173:4.2.2.2
	Kernel-5_35-4_79_2_172:4.2.2.2
	Kernel-5_35-4_79_2_171:4.2.2.2
	Kernel-5_35-4_79_2_170:4.2.2.2
	Kernel-5_35-4_79_2_169:4.2.2.2
	Kernel-5_35-4_79_2_168:4.2.2.2
	Kernel-5_35-4_79_2_167:4.2.2.2
	Kernel-5_35-4_79_2_166:4.2.2.2
	Kernel-5_35-4_79_2_165:4.2.2.2
	RPi_merge:4.2.2.2
	Kernel-5_35-4_79_2_147_2_23:4.2.2.2
	Kernel-5_35-4_79_2_147_2_22:4.2.2.2
	Kernel-5_35-4_79_2_147_2_21:4.2.2.2
	Kernel-5_35-4_79_2_147_2_20:4.2.2.2
	Kernel-5_35-4_79_2_147_2_19:4.2.2.2
	Kernel-5_35-4_79_2_147_2_18:4.2.2.2
	Kernel-5_35-4_79_2_164:4.2.2.2
	Kernel-5_35-4_79_2_163:4.2.2.2
	Kernel-5_35-4_79_2_147_2_17:4.2.2.2
	Kernel-5_35-4_79_2_147_2_16:4.2.2.2
	Kernel-5_35-4_79_2_147_2_15:4.2.2.2
	Kernel-5_35-4_79_2_162:4.2.2.2
	Kernel-5_35-4_79_2_161:4.2.2.2
	Kernel-5_35-4_79_2_147_2_14:4.2.2.2
	Kernel-5_35-4_79_2_147_2_13:4.2.2.2
	Kernel-5_35-4_79_2_160:4.2.2.2
	Kernel-5_35-4_79_2_159:4.2.2.2
	Kernel-5_35-4_79_2_158:4.2.2.2
	Kernel-5_35-4_79_2_157:4.2.2.2
	Kernel-5_35-4_79_2_156:4.2.2.2
	Kernel-5_35-4_79_2_147_2_12:4.2.2.2
	Kernel-5_35-4_79_2_147_2_11:4.2.2.2
	Kernel-5_35-4_79_2_155:4.2.2.2
	Kernel-5_35-4_79_2_147_2_10:4.2.2.2
	Kernel-5_35-4_79_2_154:4.2.2.2
	Kernel-5_35-4_79_2_153:4.2.2.2
	Kernel-5_35-4_79_2_147_2_9:4.2.2.2
	Kernel-5_35-4_79_2_152:4.2.2.2
	Kernel-5_35-4_79_2_151:4.2.2.2
	Kernel-5_35-4_79_2_147_2_8:4.2.2.2
	Kernel-5_35-4_79_2_147_2_7:4.2.2.2
	Kernel-5_35-4_79_2_150:4.2.2.2
	Kernel-5_35-4_79_2_147_2_6:4.2.2.2
	Kernel-5_35-4_79_2_147_2_5:4.2.2.2
	Kernel-5_35-4_79_2_149:4.2.2.2
	Kernel-5_35-4_79_2_147_2_4:4.2.2.2
	Kernel-5_35-4_79_2_147_2_3:4.2.2.2
	Kernel-5_35-4_79_2_148:4.2.2.2
	Kernel-5_35-4_79_2_147_2_2:4.2.2.2
	Kernel-5_35-4_79_2_147_2_1:4.2.2.2
	RPi:4.2.2.2.0.2
	RPi_bp:4.2.2.2
	Kernel-5_35-4_79_2_98_2_52_2_1:4.2.2.1.2.1
	alees_Kernel_dev:4.2.2.1.2.1.0.2
	alees_Kernel_dev_bp:4.2.2.1.2.1
	Kernel-5_35-4_79_2_147:4.2.2.2
	Kernel-5_35-4_79_2_146:4.2.2.2
	Kernel-5_35-4_79_2_145:4.2.2.2
	Kernel-5_35-4_79_2_144:4.2.2.2
	Kernel-5_35-4_79_2_143:4.2.2.2
	Kernel-5_35-4_79_2_142:4.2.2.2
	Kernel-5_35-4_79_2_141:4.2.2.2
	Kernel-5_35-4_79_2_140:4.2.2.2
	Kernel-5_35-4_79_2_139:4.2.2.2
	Kernel-5_35-4_79_2_138:4.2.2.2
	Kernel-5_35-4_79_2_137:4.2.2.2
	Kernel-5_35-4_79_2_136:4.2.2.2
	Kernel-5_35-4_79_2_135:4.2.2.2
	Kernel-5_35-4_79_2_134:4.2.2.2
	Kernel-5_35-4_79_2_133:4.2.2.2
	Kernel-5_35-4_79_2_132:4.2.2.2
	Kernel-5_35-4_79_2_131:4.2.2.2
	Kernel-5_35-4_79_2_130:4.2.2.2
	Kernel-5_35-4_79_2_129:4.2.2.2
	Kernel-5_35-4_79_2_128:4.2.2.2
	Kernel-5_35-4_79_2_127:4.2.2.2
	Kernel-5_35-4_79_2_126:4.2.2.2
	Kernel-5_35-4_79_2_125:4.2.2.2
	Kernel-5_35-4_79_2_124:4.2.2.2
	Kernel-5_35-4_79_2_123:4.2.2.2
	Cortex_merge:4.2.2.1.2.1
	Kernel-5_35-4_79_2_122:4.2.2.1
	Kernel-5_35-4_79_2_98_2_54:4.2.2.1.2.1
	Kernel-5_35-4_79_2_98_2_53:4.2.2.1.2.1
	Kernel-5_35-4_79_2_98_2_52:4.2.2.1.2.1
	Kernel-5_35-4_79_2_98_2_51:4.2.2.1.2.1
	Kernel-5_35-4_79_2_98_2_50:4.2.2.1.2.1
	Kernel-5_35-4_79_2_98_2_49:4.2.2.1.2.1
	Kernel-5_35-4_79_2_98_2_48:4.2.2.1.2.1
	Kernel-5_35-4_79_2_121:4.2.2.1
	Kernel-5_35-4_79_2_98_2_47:4.2.2.1
	Kernel-5_35-4_79_2_120:4.2.2.1
	Kernel-5_35-4_79_2_98_2_46:4.2.2.1
	Kernel-5_35-4_79_2_119:4.2.2.1
	Kernel-5_35-4_79_2_98_2_45:4.2.2.1
	Kernel-5_35-4_79_2_98_2_44:4.2.2.1
	Kernel-5_35-4_79_2_118:4.2.2.1
	Kernel-5_35-4_79_2_98_2_43:4.2.2.1
	Kernel-5_35-4_79_2_117:4.2.2.1
	Kernel-5_35-4_79_2_116:4.2.2.1
	Kernel-5_35-4_79_2_98_2_42:4.2.2.1
	Kernel-5_35-4_79_2_115:4.2.2.1
	Kernel-5_35-4_79_2_98_2_41:4.2.2.1
	Kernel-5_35-4_79_2_98_2_40:4.2.2.1
	Kernel-5_35-4_79_2_114:4.2.2.1
	Kernel-5_35-4_79_2_98_2_39:4.2.2.1
	Kernel-5_35-4_79_2_98_2_38:4.2.2.1
	Kernel-5_35-4_79_2_113:4.2.2.1
	Kernel-5_35-4_79_2_112:4.2.2.1
	Kernel-5_35-4_79_2_98_2_37:4.2.2.1
	Kernel-5_35-4_79_2_98_2_36:4.2.2.1
	Kernel-5_35-4_79_2_98_2_35:4.2.2.1
	Kernel-5_35-4_79_2_98_2_34:4.2.2.1
	Kernel-5_35-4_79_2_98_2_33:4.2.2.1
	Kernel-5_35-4_79_2_98_2_32:4.2.2.1
	Kernel-5_35-4_79_2_98_2_31:4.2.2.1
	Kernel-5_35-4_79_2_98_2_30:4.2.2.1
	Kernel-5_35-4_79_2_98_2_29:4.2.2.1
	Kernel-5_35-4_79_2_98_2_28:4.2.2.1
	Kernel-5_35-4_79_2_98_2_27:4.2.2.1
	Kernel-5_35-4_79_2_98_2_26:4.2.2.1
	Kernel-5_35-4_79_2_111:4.2.2.1
	Kernel-5_35-4_79_2_98_2_25:4.2.2.1
	Kernel-5_35-4_79_2_98_2_24:4.2.2.1
	Kernel-5_35-4_79_2_98_2_23:4.2.2.1
	Kernel-5_35-4_79_2_110:4.2.2.1
	Kernel-5_35-4_79_2_98_2_22:4.2.2.1
	Kernel-5_35-4_79_2_109:4.2.2.1
	Kernel-5_35-4_79_2_98_2_21:4.2.2.1
	Kernel-5_35-4_79_2_98_2_20:4.2.2.1
	Kernel-5_35-4_79_2_108:4.2.2.1
	Kernel-5_35-4_79_2_107:4.2.2.1
	Kernel-5_35-4_79_2_98_2_19:4.2.2.1
	Kernel-5_35-4_79_2_98_2_18:4.2.2.1
	Kernel-5_35-4_79_2_98_2_17:4.2.2.1
	Kernel-5_35-4_79_2_98_2_16:4.2.2.1
	Kernel-5_35-4_79_2_98_2_15:4.2.2.1
	Kernel-5_35-4_79_2_106:4.2.2.1
	Kernel-5_35-4_79_2_105:4.2.2.1
	Kernel-5_35-4_79_2_104:4.2.2.1
	Kernel-5_35-4_79_2_98_2_14:4.2.2.1
	Kernel-5_35-4_79_2_98_2_13:4.2.2.1
	Kernel-5_35-4_79_2_98_2_12:4.2.2.1
	Kernel-5_35-4_79_2_98_2_11:4.2.2.1
	Kernel-5_35-4_79_2_98_2_10:4.2.2.1
	Kernel-5_35-4_79_2_98_2_9:4.2.2.1
	Kernel-5_35-4_79_2_103:4.2.2.1
	Kernel-5_35-4_79_2_102:4.2.2.1
	Kernel-5_35-4_79_2_98_2_8:4.2.2.1
	Kernel-5_35-4_79_2_98_2_7:4.2.2.1
	Kernel-5_35-4_79_2_98_2_6:4.2.2.1
	Kernel-5_35-4_79_2_98_2_5:4.2.2.1
	Kernel-5_35-4_79_2_98_2_4:4.2.2.1
	Kernel-5_35-4_79_2_101:4.2.2.1
	Kernel-5_35-4_79_2_100:4.2.2.1
	Kernel-5_35-4_79_2_99:4.2.2.1
	Kernel-5_35-4_79_2_98_2_3:4.2.2.1
	Kernel-5_35-4_79_2_98_2_2:4.2.2.1
	Kernel-5_35-4_79_2_98_2_1:4.2.2.1
	Cortex:4.2.2.1.0.2
	Cortex_bp:4.2.2.1
	Kernel-5_35-4_79_2_98:4.2.2.1
	Kernel-5_35-4_79_2_97:4.2.2.1
	Kernel-5_35-4_79_2_96:4.2.2.1
	Kernel-5_35-4_79_2_95:4.2.2.1
	Kernel-5_35-4_79_2_94:4.2.2.1
	Kernel-5_35-4_79_2_93:4.2.2.1
	Kernel-5_35-4_79_2_92:4.2.2.1
	Kernel-5_35-4_79_2_91:4.2.2.1
	Kernel-5_35-4_79_2_90:4.2.2.1
	Kernel-5_35-4_79_2_89:4.2.2.1
	Kernel-5_35-4_79_2_88:4.2.2.1
	Kernel-5_35-4_79_2_87:4.2.2.1
	Kernel-5_35-4_79_2_86:4.2.2.1
	Kernel-5_35-4_79_2_85:4.2.2.1
	Kernel-5_35-4_79_2_84:4.2.2.1
	Kernel-5_35-4_79_2_83:4.2.2.1
	Kernel-5_35-4_79_2_82:4.2.2.1
	Kernel-5_35-4_79_2_81:4.2.2.1
	Kernel-5_35-4_79_2_80:4.2.2.1
	Kernel-5_35-4_79_2_79:4.2.2.1
	Kernel-5_35-4_79_2_78:4.2.2.1
	Kernel-5_35-4_79_2_77:4.2.2.1
	RO_5_07:4.2.2.1
	Kernel-5_35-4_79_2_76:4.2.2.1
	Kernel-5_35-4_79_2_75:4.2.2.1
	Kernel-5_35-4_79_2_74:4.2.2.1
	Kernel-5_35-4_79_2_73:4.2.2.1
	Kernel-5_35-4_79_2_72:4.2.2.1
	Kernel-5_35-4_79_2_71:4.2.2.1
	Kernel-5_35-4_79_2_70:4.2.2.1
	Kernel-5_35-4_79_2_69:4.2.2.1
	Kernel-5_35-4_79_2_68:4.2.2.1
	Kernel-5_35-4_79_2_67:4.2.2.1
	Kernel-5_35-4_79_2_66:4.2.2.1
	Kernel-5_35-4_79_2_65:4.2.2.1
	Kernel-5_35-4_79_2_64:4.2.2.1
	Kernel-5_35-4_79_2_63:4.2.2.1
	Kernel-5_35-4_79_2_62:4.2.2.1
	Kernel-5_35-4_79_2_61:4.2.2.1
	Kernel-5_35-4_79_2_59:4.2.2.1
	Kernel-5_35-4_79_2_58:4.2.2.1
	Kernel-5_35-4_79_2_57:4.2.2.1
	Kernel-5_35-4_79_2_56:4.2.2.1
	Kernel-5_35-4_79_2_55:4.2.2.1
	Kernel-5_35-4_79_2_54:4.2.2.1
	Kernel-5_35-4_79_2_53:4.2.2.1
	Kernel-5_35-4_79_2_52:4.2.2.1
	Kernel-5_35-4_79_2_51:4.2.2.1
	Kernel-5_35-4_79_2_50:4.2.2.1
	Kernel-5_35-4_79_2_49:4.2.2.1
	Kernel-5_35-4_79_2_48:4.2.2.1
	Kernel-5_47:4.2
	Kernel-5_46-4_90_2_1:4.2
	nbingham_Kernel_FastNC_dev_bp:4.2
	nbingham_Kernel_FastNC_dev:4.2.0.4
	Kernel-5_46:4.2
	Kernel-5_45:4.2
	Kernel-5_35-4_79_2_47:4.2.2.1
	Kernel-5_35-4_79_2_46:4.2.2.1
	Kernel-5_35-4_79_2_45:4.2.2.1
	Kernel-5_35-4_79_2_44:4.2.2.1
	Kernel-5_35-4_79_2_25_2_2:4.2.2.1
	Kernel-5_35-4_79_2_43:4.2.2.1
	Kernel-5_35-4_79_2_42:4.2.2.1
	Kernel-5_35-4_79_2_41:4.2.2.1
	Kernel-5_35-4_79_2_40:4.2.2.1
	Kernel-5_35-4_79_2_39:4.2.2.1
	Kernel-5_35-4_79_2_38:4.2.2.1
	Kernel-5_35-4_79_2_37:4.2.2.1
	Kernel-5_35-4_79_2_36:4.2.2.1
	Kernel-5_35-4_79_2_35:4.2.2.1
	Kernel-5_35-4_79_2_34:4.2.2.1
	Kernel-5_35-4_79_2_33:4.2.2.1
	Kernel-5_35-4_79_2_32:4.2.2.1
	Kernel-5_44:4.2
	Kernel-5_35-4_79_2_25_2_1:4.2.2.1
	Kernel-5_43:4.2
	Kernel-5_35-4_79_2_31:4.2.2.1
	Kernel-5_35-4_79_2_30:4.2.2.1
	Kernel-5_35-4_79_2_29:4.2.2.1
	Kernel-5_35-4_79_2_28:4.2.2.1
	Kernel-5_35-4_79_2_27:4.2.2.1
	Kernel-5_35-4_79_2_26:4.2.2.1
	Kernel-5_42:4.2
	Kernel-5_41:4.2
	Kernel-5_40:4.2
	Kernel-5_35-4_79_2_25:4.2.2.1
	Kernel-5_35-4_79_2_24:4.2.2.1
	Kernel-5_35-4_79_2_23:4.2.2.1
	Kernel-5_35-4_79_2_22:4.2.2.1
	Kernel-5_35-4_79_2_21:4.2.2.1
	Kernel-5_35-4_79_2_20:4.2.2.1
	Kernel-5_35-4_79_2_19:4.2.2.1
	Kernel-5_35-4_79_2_18:4.2.2.1
	Kernel-5_35-4_79_2_17:4.2.2.1
	Kernel-5_35-4_79_2_16:4.2.2.1
	Kernel-5_35-4_79_2_15:4.2.2.1
	Kernel-5_35-4_79_2_14:4.2.2.1
	Kernel-5_39:4.2
	Kernel-5_13-4_52_2_1:4.1
	Bethany:4.1.0.10
	Kernel-5_38:4.2
	Kernel-5_35-4_79_2_13:4.2.2.1
	Kernel-5_35-4_79_2_12:4.2.2.1
	Kernel-5_35-4_79_2_11:4.2.2.1
	Kernel-5_37:4.2
	Kernel-5_35-4_79_2_10:4.2.2.1
	Kernel-5_35-4_79_2_9:4.2.2.1
	Kernel-5_36:4.2
	Kernel-5_35-4_79_2_8:4.2.2.1
	Kernel-5_35-4_79_2_7:4.2.2.1
	Kernel-5_35-4_79_2_6:4.2.2.1
	Kernel-5_35-4_79_2_5:4.2.2.1
	Kernel-5_35-4_79_2_4:4.2.2.1
	Kernel-5_35-4_79_2_3:4.2.2.1
	Kernel-5_35-4_79_2_2:4.2.2.1
	dellis_autobuild_BaseSW:4.2
	Kernel-5_35-4_79_2_1:4.2.2.1
	HAL:4.2.0.2
	Kernel-5_35:4.2
	Kernel-5_34:4.2
	Kernel-5_33:4.2
	Kernel-5_32:4.2
	Kernel-5_31:4.2
	Kernel-5_30:4.2
	Kernel-5_29:4.2
	Kernel-5_28:4.2
	Kernel-5_27:4.2
	Kernel-5_26:4.2
	Kernel-5_25:4.2
	Kernel-5_24:4.2
	Kernel-5_23:4.2
	Kernel-5_22:4.1
	sbrodie_sedwards_16Mar2000:4.1
	Kernel-5_21:4.1
	Kernel-5_20:4.1
	Kernel-5_19:4.1
	Kernel-5_18:4.1
	Kernel-5_17:4.1
	Kernel-5_16:4.1
	Kernel-5_15:4.1
	Kernel-5_14:4.1
	Kernel-5_13:4.1
	Kernel-5_12:4.1
	Kernel-5_11:4.1
	Kernel-5_10:4.1
	Kernel-5_09:4.1
	Kernel-5_08:4.1
	Kernel-5_07:4.1
	Kernel-5_06:4.1
	Kernel-5_05:4.1
	Kernel-5_04:4.1
	Kernel-5_03:4.1
	Kernel-5_02:4.1
	Kernel-5_01:4.1
	Kernel-5_00:4.1
	Kernel-4_99:4.1
	Kernel-4_98:4.1
	Kernel-4_97:4.1
	Kernel-4_96:4.1
	Kernel-4_95:4.1
	Kernel-4_94:4.1
	Kernel-4_93:4.1
	Kernel-4_92:4.1
	Kernel-4_91:4.1
	Kernel-4_90:4.1
	dcotton_autobuild_BaseSW:4.2
	Kernel-4_89:4.1
	Kernel-4_88:4.1
	Kernel-4_87:4.1
	Kernel-4_86:4.1
	Kernel-4_85:4.1
	sbrodie_UrsulaRiscPC_Kernel_19Aug99:4.1
	Kernel-4_84:4.1
	sbrodie_UrsulaRiscPC_Kernel_18Aug99:4.1
	Ursula_RiscPC_bp:4.1
	Kernel-4_83:4.1
	Kernel-4_82:4.1
	Kernel-4_81:4.1
	Kernel-4_80:4.1
	Kernel-4_79:4.1
	Kernel-4_78:4.1
	Kernel-4_77:4.1
	Kernel-4_76:4.1
	Kernel-4_75:4.1
	Kernel-4_74:4.1
	Kernel-4_73:4.1
	Kernel-4_72:4.1
	Kernel-4_71:4.1
	Kernel-4_70:4.1
	Kernel-4_69:4.1
	Kernel-4_68:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.8
	Kernel-4_63-1_1_2_5:4.1.7.1
	Kernel-4_63-1_1_2_4:4.1.7.1
	Kernel-4_67:4.1
	Kernel-4_66:4.1
	Kernel-4_63-1_1_2_3:4.1.7.1
	Kernel-4_65:4.1
	Ursula_merge:4.1
	Kernel-4_64:4.1
	mstphens_Kernel-3_81:4.1
	Kernel-4_63-1_1_2_2:4.1.7.1
	nicke_Kernel_4_62:4.1.7.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	nturton_v459:4.1.7.1
	nturton_v460:4.1.7.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	mstphens_Kernel-3_80:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	afrost_Boca-1_2-Beta:4.1.7.1
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Spinner_B7:4.1.7.1
	RO_3_71:4.1.3.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	ARTtmp:4.1.7.1.0.2
	Spin_merge:4.1.7.1
	MergeFiles:4.1.3.1
	RO_3_70:4.1.3.1
	NC_1_06:4.1.7.1
	Spinner:4.1.7
	Spin_xx:4.1.5
	NC_xx:4.1.5.1
	RO_3_60:4.1.1.1
	StrongARM:4.1.3
	Black:4.1.1;
locks; strict;
comment	@# @;


4.4
date	2016.06.30.20.29.02;	author jlee;	state Exp;
branches;
next	4.3;
commitid	lMnWzoE9eJz3Wwcz;

4.3
date	2016.06.30.20.08.15;	author jlee;	state Exp;
branches;
next	4.2;
commitid	IWoXxARWeuLDOwcz;

4.2
date	2000.04.04.14.27.35;	author kbracey;	state Exp;
branches
	4.2.2.1;
next	4.1;

4.1
date	96.11.05.09.41.27;	author nturton;	state Exp;
branches
	4.1.1.1
	4.1.3.1
	4.1.5.1
	4.1.7.1;
next	;

4.2.2.1
date	2000.09.15.12.38.01;	author kbracey;	state Exp;
branches
	4.2.2.1.2.1;
next	4.2.2.2;

4.2.2.2
date	2011.11.26.21.11.22;	author jlee;	state Exp;
branches;
next	;
commitid	cI3W0zbtALQG6TIv;

4.2.2.1.2.1
date	2011.08.08.23.28.34;	author jlee;	state Exp;
branches;
next	;
commitid	D7rzILnwRRSXoLuv;

4.1.1.1
date	96.11.05.09.41.27;	author nturton;	state Exp;
branches;
next	;

4.1.3.1
date	96.11.06.02.01.40;	author nturton;	state Exp;
branches;
next	;

4.1.5.1
date	96.11.21.12.12.02;	author nturton;	state Exp;
branches;
next	;

4.1.7.1
date	96.11.29.21.04.04;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Delete pre-HAL and 26bit code
Detail:
  This change gets rid of the following switches from the source (picking appropriate code paths for a 32bit HAL build):
  * HAL
  * HAL26
  * HAL32
  * No26bitCode
  * No32bitCode
  * IncludeTestSrc
  * FixR9CorruptionInExtensionSWI
  Various old files have also been removed (POST code, Arc/STB keyboard drivers, etc.)
Admin:
  Identical binary to previous revision for IOMD & Raspberry Pi builds


Version 5.49. Tagged as 'Kernel-5_49'
@
text
@; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > $.Source.PMF.Buffer

; *****************************************************************************
;
;       NewInsV - Routine for InsVec
;
; in:   R0 = character to be inserted
;       R1 = buffer number
;
; out:  R0, R1, R3-R12 preserved
;       R2 undefined
;       C=1 <=> insertion failed
;

NewInsV ROUT
        CMP     R1, #NBuffers
        MOVCS   PC, R14                         ; not known about, pass it on

        Push    "R3-R5"
        MOV     R3, R1, LSL #2                  ; make index a word index
        ADR     R2, BuffParms
        ADD     R2, R2, R3, LSL #1
        LDMIA   R2, {R2, R5}                    ; get address, size

      [ ZeroPage <> 0
        LDR     R4, =ZeroPage
        ADD     R3, R3, R4
      ]

        LDR     R4, [R3, #BuffInPtrs]
        STRB    R0, [R2, R4]                    ; store byte anyway
        ADD     R4, R4, #1                      ; increment pointer

        TEQ     R4, R5
        MOVEQ   R4, #0

        LDR     R5, [R3, #BuffOutPtrs]          ; does inptr=outptr ?
        CMP     R4, R5                          ; C=1 <=> R4 >= R5
        CMPHI   R5, R4                          ; C=1 <=> R4 = R5
        STRCC   R4, [R3, #BuffInPtrs]           ; if not, then safe

        BCC     %FT10                           ; no event, cos not full
        TEQ     R1, #(Buff_Mouse :SHL: 2), 2    ; clear carry and test if mouse
        CMPNE   R1, #Buff_RS423Out              ; C=1 => output buffer
        BCS     %FT10                           ; no event, cos not input

        MOV     R2, R0                          ; put character in 'Y'
        MOV     R0, #Event_InputFull            ; event number
        BL      OSEVEN                          ; preserves R0-R3
        MOV     R0, R2                          ; restore character
        SEC                                     ; indicate buffer full
10
        Pull    "R3-R5,PC"                      ; claim call

; *****************************************************************************
;
;       NewRemV - Routine for RemVec
;
; in:   R1 = buffer number (0 => keyboard buffer)
;       V=0 => remove character
;       V=1 => examine only
;
; out:  R0 = R2 = next character for examine option or character removed
;       R1, R3-R12 preserved
;       C=1 <=> buffer was empty on entry
;

NewRemV ROUT
        BVS     Examine

        Push    R14
        MRS     R14, CPSR
        CMP     R1, #NBuffers
        BLO     %FT10
        MSR     CPSR_f, R14
        Pull    PC              ; not known about, pass it on (preserving V)
10
        ADD     R13, R13, #4

        Push    "R3-R5"

      [ ZeroPage <> 0
        LDR     R4, =ZeroPage
        ADD     R3, R4, R1, LSL #2
      |
        MOV     R3, R1, LSL #2
      ]

        LDR     R4, [R3, #BuffOutPtrs]
        LDR     R5, [R3, #BuffInPtrs]

        CMP     R4, R5
        CMPHI   R5, R4                          ; C=1 <=> (R4 = R5) ie empty
        BCS     RemVExit

        ADR     R2, BuffParms
        ADD     R2, R2, R1, LSL #3
        LDMIA   R2, {R2, R5}                    ; get address, size

        LDRB    R2, [R2, R4]                    ; get next byte to be read out
        MOV     R0, R2
        ADD     R4, R4, #1                      ; increment out pointer

        TEQ     R4, R5                          ; wrap pointer if necessary
        MOVEQ   R4, #0

        STR     R4, [R3, #BuffOutPtrs]          ; bugfix - was STRB
        TEQ     R1, #Buff_Mouse                 ; mouse => not output buffer
        BEQ     RemVExit                        ; exit (C=0) if not
        CMP     R1, #Buff_RS423Out              ; C=1 => output buffer
        BCC     RemVExit                        ; exit (C=0) if not

        LDR     R5, [R3, #BuffInPtrs]           ; reload in-ptr
        TEQ     R4, R5                          ; are ptrs same now ?
        BNE     RemVExitCLC                     ; no, then exit setting C=0

        Push    R0                              ; save character
        MOV     R0, #Event_OutputEmpty          ; output buffer empty event
        BL      OSEVEN                          ; generate event
        Pull    R0                              ; restore character

RemVExitCLC
        CLC                                     ; make sure carry clear

RemVExit
        Pull    "R3-R5,PC"

Examine
        Push    R14
        MRS     R14, CPSR
        CMP     R1, #NBuffers
        BLO     %FT10
        MSR     CPSR_f, R14
        Pull    PC              ; not known about, pass it on (preserving V)
10

        Push    "R3-R5"

        MOV     R3, R1, LSL #2
        ADR     R2, BuffParms

        LDR     R2, [R2, R3, LSL #1]            ; R2 -> buffer

      [ ZeroPage <> 0
        LDR     R4, =ZeroPage
        ADD     R3, R3, R4
      ]

        LDR     R4, [R3, #BuffOutPtrs]
        LDR     R5, [R3, #BuffInPtrs]

        CMP     R4, R5
        CMPHI   R5, R4                          ; C=1 <=> (R4 = R5) ie empty

        LDRCCB  R2, [R2, R4]                    ; if ok then examine byte
        MOVCC   R0, R2

        Pull    "R3-R5,PC"

; *****************************************************************************
;
;       NewCnpV - Routine for CnpVec
;
; in:   R1 = buffer number (0 => keyboard)
;       V=0, C=0 => count entries
;       V=0, C=1 => count spaces
;       V=1 => purge buffer
;
; out:  R0 undefined
;       (purge) R1-R12 preserved
;       (count) R1,R2 = count, R3-R12 preserved
;

NewCnpV
        Push    R14
        MRS     R14, CPSR
        CMP     R1, #NBuffers
        BLO     %FT10
        MSR     CPSR_f, R14
        Pull    "PC"            ; not known about, pass it on (preserving V)
10
        ADD     R13, R13, #4

        Push    "R3-R5"

        MSR     CPSR_f, R14             ; restore V and C

      [ ZeroPage <> 0
        LDR     R4, =ZeroPage
        ADD     R3, R4, R1, LSL #2
      |
        MOV     R3, R1, LSL #2
      ]

        LDR     R4, [R3, #BuffOutPtrs]

        STRVS   R4, [R3, #BuffInPtrs]   ; if purge, then make in=out
        Pull    "R3-R5,PC", VS          ; and return

        LDR     R5, [R3, #BuffInPtrs]
      [ ZeroPage <> 0
        MOV     R3, R1, LSL #2
      ]
        SUB     R1, R5, R4              ; in - out (don't stamp on carry)

        ADR     R5, BuffParms+4
        LDR     R5, [R5, R3, LSL #1]    ; get size

        TEQ     R1, #0                  ; don't stamp on carry
        ADDMI   R1, R1, R5              ; wrap number of chars if negative

        SUBCS   R1, R5, R1              ; C=1 => convert to spaces
        SUBCS   R1, R1, #1              ; one fewer spaces than BuffSizes

        MOV     R2, R1, LSR #8          ; make R2 = hi-byte
        AND     R1, R1, #&FF            ; and  R1 = lo-byte

        Pull    "R3-R5,PC"

; *****************************************************************************

BuffParms
        &       KeyBuff
        &       KeyBuffSize

        &       RS423InBuff
        &       RS423InBuffSize

        &       RS423OutBuff
        &       RS423OutBuffSize

        &       PrintBuff
        &       PrintBuffSize

        &       Sound0Buff
        &       Sound0BuffSize

        &       Sound1Buff
        &       Sound1BuffSize

        &       Sound2Buff
        &       Sound2BuffSize

        &       Sound3Buff
        &       Sound3BuffSize

        &       SpeechBuff
        &       SpeechBuffSize

        &       MouseBuff
        &       MouseBuffSize

; *****************************************************************************
;
;       DoInsertESC - Insert character into buffer, checking for escape
;
; in:   R1 = buffer id
;       R2 = character
;

DoInsertESC
        CMP     R1, #2                          ; if not keyboard or serial input
        BCS     INSERT                          ; then don't treat as special

        LDROSB  R0, RS423mode                   ; Z => simulate keyboard
        TST     R0, R1                          ; NZ => RS423 input and RS8Bit
        BNE     INSERT

        Push    R14

        LDROSB  R0, ESCch                       ; escape character
        TEQ     R2, R0                          ; if escape character
        LDROSB  R0, ESCaction, EQ
        TEQEQ   R0, #0                          ; and FX229,0
        BNE     CKESCY                          ; not escape or let it thru

; ESCAPE detected

        LDROSB  R0, ESCBREAK                    ; FX 200
        TST     R0, #1                          ; bit 0 set ?
        BNE     %FT10                           ; escape ignored

        MOV     R0, #Event_Escape
        BL      OSEVEN                          ; exits carry set if disabled
        BCC     %FT10                           ; [event enabled, so don't do
                                                ; normal escape action]
        Push    "R1, R12"
        BL      DoOsbyte7D                      ; generate escape condition
        Pull    "R1, R12"
10
        CLC                                     ; character inserted OK
        Pull    PC

CKESCY
        MOV     R0, #Event_CharInput
        BL      OSEVEN                          ; preserves R0-R2
        Pull    R14
INSERT
        MOV     R0, R2
INSRT
        Push    "R10,R12,R14"
        MOV     R10, #INSV
GoVec
        BL      GoVec2
        Pull    "R10,R12,PC"

GoVec2
        CallAVector

        LTORG

        END
@


4.3
log
@Merge HAL branch to trunk
Detail:
  This change merges the past 15+ years of HAL branch development back to the trunk.
  This is effectively the end for non-HAL builds of the kernel, as no attempt has been made to maintain it during this merge, and all non-HAL & non-32bit code will soon be removed anyway.
  Rather than list everything that's been added to the HAL branch, it's easier to describe the change in terms of the things that the HAL branch was lacking:
  * Trunk version of Docs/32bit contained updated comments for the SVC stack structure during ErrorV
  * Trunk version of s/HeapMan contained a tweak to try and reduce the number of small free blocks that are created
  * Trunk version of s/Kernel contained a change to only copy 248 bytes of the error string to the error buffer (down from 252 bytes), to take into account the extra 4 bytes needed by the PSR. However this goes against the decision that's been made in the HAL branch that the error buffer should be enlarged to 260 bytes instead (ref: https://www.riscosopen.org/tracker/tickets/201), so the HAL build will retain its current behaviour.
  * Trunk version of s/MsgCode had RMNot32bit error in the list of error messages to count when countmsgusage {TRUE}
  * Trunk version of s/PMF/i2cutils contained support for OS_Memory 5, "read/write value of NVRamWriteSize". Currently the HAL branch doesn't have a use for this (in particular, the correct NVRamWriteSize should be specified by the HAL, so there should be no need for software to change it at runtime), and so this code will remain switched out in the HAL build.
Admin:
  Tested on Raspberry Pi


Version 5.48. Tagged as 'Kernel-5_48'
@
text
@a84 1
 [ No26bitCode
a92 4
 |
        CMP     R1, #NBuffers
        MOVCSS  PC, R14         ; not known about, pass it on (preserving V)
 ]
a142 1
 [ No26bitCode
a149 4
 |
        CMP     R1, #NBuffers
        MOVCSS  PC, R14         ; not known about, pass it on (preserving V)
 ]
a188 1
 [ No26bitCode
a196 4
 |
        CMP     R1, #NBuffers
        MOVCSS  PC, R14         ; not known about, pass it on (preserving V)
 ]
a199 1
 [ No26bitCode
a200 4
 |
        TEQP    R14, #0                 ; restore V and C
 ]

@


4.2
log
@  32-bit Kernel.

Details:
  The Kernel will now compile to produce a pure 32-bit system if No26bitCode is
  set to TRUE.
  If No26bitCode is FALSE, then the Kernel will be a standard 26-bit Kernel,
  although some internal changes have taken place to minimise compile
  switches between the two cases. See Docs.32bit for more technical info.

  The hardest part was the flood-fill...

Other changes:
  Pointer shape changes now take place on the next VSync, rather than actually
  WAITING for the VSync. Turning the Hourglass on shouldn't slow your machine
  down by 5% now :)

  Lots of really crusty pre-IOMD code removed.

Admin:
  Tested in 32 and 26-bit forms in a limited desktop build. Basically, this
  will need to see a lot of use to iron out difficulties. I'd like anyone who
  has a non-frozen project to at least attempt using this Kernel.

Version 5.23. Tagged as 'Kernel-5_23'
@
text
@d39 5
d87 1
a87 1
        mrs    ,R14, CPSR
d90 1
a90 1
        msr    ,CPSR_f, R14
d101 4
d106 2
d116 1
a116 1
        ADD     R2, R2, R3, LSL #1
d150 1
a150 1
        mrs    ,R14, CPSR
d153 1
a153 1
        msr    ,CPSR_f, R14
d168 5
d201 1
a201 1
        mrs    ,R14, CPSR
d204 1
a204 1
        msr    ,CPSR_f, R14
d216 1
a216 1
        msr    ,CPSR_f, R14             ; restore V and C
d221 5
d227 1
d235 3
d344 2
@


4.2.2.1
log
@* Converted to building with ObjAsm (but still a single object file using ORG).
* Added ARM_IMB and ARM_IMBRange SWIs as recommended by ARMv5.
* Some early prototype HAL bits popped in - a lot of source restructuring still
  to come.
* New debug target creates an AIF image with debug information, and translates
  this into an ASCII object file for the 16702B logic analyser.

Version 5.35, 4.79.2.1. Tagged as 'Kernel-5_35-4_79_2_1'
@
text
@d82 1
a82 1
        MRS     R14, CPSR
d85 1
a85 1
        MSR     CPSR_f, R14
d139 1
a139 1
        MRS     R14, CPSR
d142 1
a142 1
        MSR     CPSR_f, R14
d185 1
a185 1
        MRS     R14, CPSR
d188 1
a188 1
        MSR     CPSR_f, R14
d200 1
a200 1
        MSR     CPSR_f, R14             ; restore V and C
@


4.2.2.2
log
@Merge Cortex kernel into HAL branch
Detail:
  This is a full merge of the Cortex kernel back into the HAL branch. Since the Cortex kernel is/was just a superset of the HAL branch, at this point in time both branches are identical.
  Main features the HAL branch gains from this merge:
  - ARMv6/ARMv7 support
  - High processor vectors/zero page relocation support
  - objasm 4 warning fixes
  - Improved HAL related functionality:
    - Support for HAL-driven RTCs instead of kernel-driven IIC based ones
    - Support for arbitrary size machine IDs
    - Support for multiple IIC busses
    - Support for any HAL size, instead of hardcoded 64k size
    - Probably some other stuff I've forgotten
  - Probably a few bug fixes here and there
Admin:
  Tested on BB-xM & Iyonix.
  Was successfully flashed to ROM on an Iyonix to test the Cortex branch implementation of the 2010 RTC bug fix.
  IOMD build untested - but has been known to work in the past.


Version 5.35, 4.79.2.123. Tagged as 'Kernel-5_35-4_79_2_123'
@
text
@a38 5
      [ ZeroPage <> 0
        LDR     R4, =ZeroPage
        ADD     R3, R3, R4
      ]

a95 4
      [ ZeroPage <> 0
        LDR     R4, =ZeroPage
        ADD     R3, R4, R1, LSL #2
      |
a96 2
      ]

d105 1
a105 1
        ADD     R2, R2, R1, LSL #3
a156 5
      [ ZeroPage <> 0
        LDR     R4, =ZeroPage
        ADD     R3, R3, R4
      ]

a204 5

      [ ZeroPage <> 0
        LDR     R4, =ZeroPage
        ADD     R3, R4, R1, LSL #2
      |
a205 1
      ]
a212 3
      [ ZeroPage <> 0
        MOV     R3, R1, LSL #2
      ]
a318 2
        LTORG

@


4.2.2.1.2.1
log
@Add zero page relocation support
Detail:
  A whole mass of changes to add high processor vectors + zero page relocation support to the Cortex branch of the kernel
  At the moment the code can only cope with two ZeroPage locations, &0 and &FFFF0000. But with a bit more tweaking those restrictions can probably be lifted, allowing ZeroPage to be hidden at almost any address (assuming it's fixed at compile time). If I've done my job right, these restrictions should all be enforced by asserts.
  There's a new option, HiProcVecs, in hdr/Options to control whether high processor vectors are used. When enabling it and building a ROM, remember:
  * FPEmulator needs to be built with the FPEAnchor=High option specified in the components file (not FPEAnchorType=High as my FPEmulator commit comments suggested)
  * ShareFS needs unplugging/removing since it can't cope with it yet
  * Iyonix users will need to use the latest ROOL boot sequence, to ensure the softloaded modules are compatible (OMAP, etc. don't really softload much so they're OK with older sequences)
  * However VProtect also needs patching to fix a nasty bug there - http://www.riscosopen.org/tracker/tickets/294
  The only other notable thing I can think of is that the ProcessTransfer code in s/ARM600 & s/VMSAv6 is disabled if high processor vectors are in use (it's fairly safe to say that code is obsolete in HAL builds anyway?)
  Fun challenge for my successor: Try setting ZeroPage to &FFFF00FF (or similar) so its value can be loaded with MVN instead of LDR. Then use positive/negative address offsets to access the contents.
  File changes:
  - hdr/ARMops - Modified ARMop macro to take the ZeroPage pointer as a parameter instead of 'zero'
  - hdr/Copro15ops - Corrected $quick handling in myISB macro
  - hdr/Options - Added ideal setting for us to use for HiProcVecs
  - s/AMBControl/allocate, s/AMBControl/growp, s/AMBControl/mapslot, s/AMBControl/memmap, s/AMBControl/service, s/AMBControl/shrinkp, s/Arthur2, s/Arthur3, s/ArthurSWIs, s/ChangeDyn, s/ExtraSWIs, s/HAL, s/HeapMan, s/Kernel, s/MemInfo, s/Middle, s/ModHand, s/MoreSWIs, s/MsgCode, s/NewIRQs, s/NewReset, s/Oscli, s/PMF/buffer, s/PMF/IIC, s/PMF/i2cutils, s/PMF/key, s/PMF/mouse, s/PMF/osbyte, s/PMF/oseven, s/PMF/osinit, s/PMF/osword, s/PMF/oswrch, s/SWINaming, s/Super1, s/SysComms, s/TickEvents, s/Utility, s/vdu/vdu23, s/vdu/vdudriver, s/vdu/vdugrafl, s/vdu/vdugrafv, s/vdu/vdupalxx, s/vdu/vdupointer, s/vdu/vduswis, s/vdu/vduwrch - Lots of updates to deal with zero page relocation
  - s/ARM600 - UseProcessTransfer option. Zero page relocation support. Deleted pre-HAL ClearPhysRAM code to tidy the file up a bit.
  - s/ARMops - Zero page relocation support. Set CPUFlag_HiProcVecs when high vectors are in use.
  - s/KbdResPC - Disable compilation of dead code
  - s/VMSAv6 - UseProcessTransfer option. Zero page relocation support.
Admin:
  Tested with OMAP & Iyonix ROM softloads, both with high & low zero page.
  High zero page hasn't had extensive testing, but boot sequence + ROM apps seem to work.


Version 5.35, 4.79.2.98.2.48. Tagged as 'Kernel-5_35-4_79_2_98_2_48'
@
text
@a38 5
      [ ZeroPage <> 0
        LDR     R4, =ZeroPage
        ADD     R3, R3, R4
      ]

a95 4
      [ ZeroPage <> 0
        LDR     R4, =ZeroPage
        ADD     R3, R4, R1, LSL #2
      |
a96 2
      ]

d105 1
a105 1
        ADD     R2, R2, R1, LSL #3
a156 5
      [ ZeroPage <> 0
        LDR     R4, =ZeroPage
        ADD     R3, R3, R4
      ]

a204 5

      [ ZeroPage <> 0
        LDR     R4, =ZeroPage
        ADD     R3, R4, R1, LSL #2
      |
a205 1
      ]
a212 3
      [ ZeroPage <> 0
        MOV     R3, R1, LSL #2
      ]
a318 2
        LTORG

@


4.1
log
@Initial revision
@
text
@d80 10
d92 1
d137 9
d148 1
d183 10
d195 1
d199 3
d203 1
@


4.1.7.1
log
@NCOS 1.06 Imported from Zip drive
@
text
@@


4.1.5.1
log
@Import from SrcFiler
@
text
@@


4.1.3.1
log
@Import from cleaned 370 CD
@
text
@@


4.1.1.1
log
@Import from cleaned 360 CD
@
text
@@
